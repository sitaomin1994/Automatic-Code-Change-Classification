{"application": "google-closure-templates", "csha": "14434e013a4eb8d6110164802c74f94e4f739789", "files": [{"SoyFileSet_cluster": {"actions": [{"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.tofu.SoyTofuOptions"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement: @code", "DEL TextElement:  SoyTofu", "DEL TagElement: @return", "DEL TextElement:  SoyTofu", "DEL SimpleName: SoySyntaxException", "DEL SimpleType: SoySyntaxException", "DEL MethodRef", "DEL TagElement: @code", "DEL TagElement: @code", "DEL TagElement: @see", "DEL TextElement:  object.", "DEL SimpleName: compileToTofu", "DEL MethodInvocation", "DEL TextElement: ) capable of rendering the", "DEL TextElement: substitutions from the SoyMsgBundle and the SoyCssRenamingMap.", "DEL TagElement: @throws", "DEL TextElement:  does not cache intermediate results after", "DEL Javadoc", "DEL MethodRefParameter", "DEL SimpleName: compileToTofu", "DEL QualifiedName: com.google.template.soy.tofu.SoyTofuOptions", "DEL MethodDeclaration", "DEL SimpleName: SoyTofu", "DEL SimpleType: SoyTofu", "DEL SimpleType: com.google.template.soy.tofu.SoyTofuOptions", "DEL TextElement:  The resulting ", "DEL SimpleName: SoySyntaxException", "DEL TextElement: Compiles this Soy file set into a Java object (type ", "DEL SimpleName: compileToTofu", "DEL TextElement:  If a syntax error is found.", "DEL ReturnStatement", "DEL TagElement", "DEL TextElement:  SoyTofu", "DEL SimpleName: SoyTofuOptions", "DEL ClassInstanceCreation", "DEL TextElement: compiled templates. The resulting ", "DEL SimpleType: SoyTofuOptions", "DEL Modifier: public", "DEL Block"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: SoyTofuOptions", "DEL SimpleType: SoyTofuOptions", "DEL SingleVariableDeclaration", "DEL SimpleName: tofuOptions"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: tofuOptions", "DEL SimpleName: tofuOptions", "DEL Assignment: =", "DEL SimpleName: copy", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: tofuOptions", "DEL MethodInvocation", "DEL SimpleName: useCaching"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ClassInstanceCreation", "DEL SimpleName: SoyTofuOptions", "DEL SimpleType: SoyTofuOptions"]}]}}, {"SoyFileSet_diff": {"operations": ["Delete QualifiedName: com.google.template.soy.tofu.SoyTofuOptions(140)", "Delete ImportDeclaration(141)", "Delete TextElement: Compiles this Soy file set into a Java object (type (2137)", "Delete TextElement:  SoyTofu(2138)", "Delete TagElement: @code(2139)", "Delete TextElement: ) capable of rendering the(2140)", "Delete TextElement: compiled templates. The resulting (2141)", "Delete TextElement:  SoyTofu(2142)", "Delete TagElement: @code(2143)", "Delete TextElement:  does not cache intermediate results after(2144)", "Delete TextElement: substitutions from the SoyMsgBundle and the SoyCssRenamingMap.(2145)", "Delete TagElement(2146)", "Delete SimpleName: compileToTofu(2147)", "Delete QualifiedName: com.google.template.soy.tofu.SoyTofuOptions(2148)", "Delete SimpleType: com.google.template.soy.tofu.SoyTofuOptions(2149)", "Delete MethodRefParameter(2150)", "Delete MethodRef(2151)", "Delete TagElement: @see(2152)", "Delete TextElement:  The resulting (2153)", "Delete TextElement:  SoyTofu(2154)", "Delete TagElement: @code(2155)", "Delete TextElement:  object.(2156)", "Delete TagElement: @return(2157)", "Delete SimpleName: SoySyntaxException(2158)", "Delete TextElement:  If a syntax error is found.(2159)", "Delete TagElement: @throws(2160)", "Delete Javadoc(2161)", "Delete Modifier: public(2162)", "Delete SimpleName: SoyTofu(2163)", "Delete SimpleType: SoyTofu(2164)", "Delete SimpleName: compileToTofu(2165)", "Delete SimpleName: SoySyntaxException(2166)", "Delete SimpleType: SoySyntaxException(2167)", "Delete SimpleName: compileToTofu(2168)", "Delete SimpleName: SoyTofuOptions(2169)", "Delete SimpleType: SoyTofuOptions(2170)", "Delete ClassInstanceCreation(2171)", "Delete MethodInvocation(2172)", "Delete ReturnStatement(2173)", "Delete Block(2174)", "Delete MethodDeclaration(2175)", "Delete SimpleName: SoyTofuOptions(2198)", "Delete SimpleType: SoyTofuOptions(2199)", "Delete SimpleName: tofuOptions(2200)", "Delete SingleVariableDeclaration(2201)", "Delete SimpleName: tofuOptions(2204)", "Delete SimpleName: tofuOptions(2205)", "Delete SimpleName: copy(2206)", "Delete MethodInvocation(2207)", "Delete Assignment: =(2208)", "Delete ExpressionStatement(2209)", "Delete SimpleName: tofuOptions(2278)", "Delete SimpleName: useCaching(2279)", "Delete MethodInvocation(2280)", "Delete SimpleName: SoyTofuOptions(2597)", "Delete SimpleType: SoyTofuOptions(2598)", "Delete ClassInstanceCreation(2599)"]}}, {"SoyTofu_cluster": {"actions": [{"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Deprecated to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Deprecated to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "UPDATE from @return to @deprecated", "operations": ["UPD TagElement: @return from @return to @deprecated", "UPD TagElement: @param from @param to @deprecated", "UPD TagElement from  to @deprecated"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Deprecated to MarkerAnnotation at 0"]}, {"root": "UPDATE from you're finding that the caching mode of  to  The caching feature has been deleted", "operations": ["UPD TextElement: you're finding that the caching mode of  from you're finding that the caching mode of  to  The caching feature has been deleted", "UPD TextElement:  Whether this instance caches intermediate Soy trees after substitutions from the from  Whether this instance caches intermediate Soy trees after substitutions from the to  The caching feature has been deleted", "UPD TextElement:  The CSS renaming map to prime the cache with. from  The CSS renaming map to prime the cache with. to  The caching feature has been deleted"]}, {"root": "DEL TagElement", "operations": ["DEL TextElement: Gets whether this instance caches intermediate Soy trees after substitutions from the", "DEL TagElement", "DEL TextElement: SoyMsgBundle and the SoyCssRenamingMap."]}, {"root": "DEL TextElement: SoyMsgBundle and the SoyCssRenamingMap.", "operations": ["DEL TextElement: SoyMsgBundle and the SoyCssRenamingMap."]}, {"root": "DEL TagElement", "operations": ["DEL TextElement: Only applicable when ", "DEL TextElement: Primes the cache with the given combination of SoyMsgBundle and SoyCssRenamingMap. Priming the", "DEL TextElement: for each distinct combination of SoyMsgBundle and SoyCssRenamingMap for which you wish to prime", "DEL TextElement: the cache.", "DEL TextElement:  isCaching()", "DEL TagElement", "DEL TextElement: cache will eliminate the slowness for the first render. This method must be called separately", "DEL TagElement: @code", "DEL TextElement:  is true."]}, {"root": "DEL TagElement: @param", "operations": ["DEL TagElement: @param", "DEL SimpleName: msgBundle", "DEL TextElement:  The message bundle to prime the cache with."]}, {"root": "DEL SimpleName: cssRenamingMap", "operations": ["DEL SimpleName: cssRenamingMap"]}, {"root": "DEL TextElement: If set to true, indicates that we should not add the current combination of", "operations": ["DEL TextElement: If set to true, indicates that we should not add the current combination of"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  SoyMsgBundle", "DEL TagElement: @code"]}, {"root": "DEL TextElement:  and ", "operations": ["DEL TextElement:  and "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  SoyCssRenamingMap", "DEL TagElement: @code"]}, {"root": "DEL TextElement:  to the cache if it's not already there.", "operations": ["DEL TextElement:  to the cache if it's not already there."]}, {"root": "DEL TextElement: Only applicable when the associated ", "operations": ["DEL TextElement: Only applicable when the associated "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  SoyTofu", "DEL TagElement: @code"]}, {"root": "DEL TextElement:  instance uses caching. Default value is", "operations": ["DEL TextElement:  instance uses caching. Default value is"]}, {"root": "DEL TextElement: false, i.e. by default we always add to cache when not already present.", "operations": ["DEL TextElement: false, i.e. by default we always add to cache when not already present."]}, {"root": "DEL TextElement: <p> Specifically, if ", "operations": ["DEL TextElement: <p> Specifically, if "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  dontAddToCache"]}, {"root": "DEL TextElement:  is set to true, then after checking the cache for", "operations": ["DEL TextElement:  is set to true, then after checking the cache for"]}, {"root": "DEL TextElement: the current combination of ", "operations": ["DEL TextElement: the current combination of "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  SoyMsgBundle"]}, {"root": "DEL TextElement:  and ", "operations": ["DEL TextElement:  and "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  SoyCssRenamingMap"]}, {"root": "DEL TextElement: :", "operations": ["DEL TextElement: :"]}, {"root": "DEL TextElement: (a) if found in cache, we will use the cached intermediate results for faster rendering,", "operations": ["DEL TextElement: (a) if found in cache, we will use the cached intermediate results for faster rendering,"]}, {"root": "DEL TextElement: (b) if not found in cache, we will fall back to the no-caching method of rendering.", "operations": ["DEL TextElement: (b) if not found in cache, we will fall back to the no-caching method of rendering."]}, {"root": "DEL TextElement: <p> If your app uses many different ", "operations": ["DEL TextElement: <p> If your app uses many different "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  SoyMsgBundle"]}, {"root": "DEL TextElement: s or ", "operations": ["DEL TextElement: s or "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  SoyCssRenamingMap", "DEL TagElement: @code"]}, {"root": "DEL TextElement: s and", "operations": ["DEL TextElement: s and"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  SoyTofu", "DEL TagElement: @code"]}, {"root": "DEL TextElement:  is using too much memory, one", "operations": ["DEL TextElement:  is using too much memory, one"]}, {"root": "DEL TextElement: strategy may be to first prime the cache with the most common combinations by calling", "operations": ["DEL TextElement: strategy may be to first prime the cache with the most common combinations by calling"]}, {"root": "DEL TagElement: @link", "operations": ["DEL SimpleName: addToCache", "DEL TagElement: @link", "DEL MemberRef", "DEL SimpleName: SoyTofu"]}, {"root": "DEL TextElement: , and then when rendering, always ", "operations": ["DEL TextElement: , and then when rendering, always "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  setDontAddToCache(true)", "DEL TagElement: @code"]}, {"root": "DEL TextElement: .", "operations": ["DEL TextElement: ."]}, {"root": "DEL TextElement: This way, most of your renders will use the cached results, yet your cache will never grow", "operations": ["DEL TextElement: This way, most of your renders will use the cached results, yet your cache will never grow"]}, {"root": "DEL TextElement: beyond the size that you initially primed it to be.", "operations": ["DEL TextElement: beyond the size that you initially primed it to be."]}]}}, {"SoyTofu_diff": {"operations": ["Insert MarkerAnnotation(71) into MethodDeclaration(75) at 1", "Insert MarkerAnnotation(80) into MethodDeclaration(96) at 1", "Update TagElement: @return(72) to @deprecated", "Insert SimpleName: Deprecated(70) into MarkerAnnotation(71) at 0", "Update TagElement: @param(92) to @deprecated", "Insert SimpleName: Deprecated(79) into MarkerAnnotation(80) at 0", "Insert MarkerAnnotation(359) into MethodDeclaration(367) at 1", "Update TextElement:  Whether this instance caches intermediate Soy trees after substitutions from the(70) to  The caching feature has been deleted", "Update TextElement:  The CSS renaming map to prime the cache with.(91) to  The caching feature has been deleted", "Update TagElement(415) to @deprecated", "Insert SimpleName: Deprecated(358) into MarkerAnnotation(359) at 0", "Update TextElement: you're finding that the caching mode of (400) to  The caching feature has been deleted", "Delete TextElement: Gets whether this instance caches intermediate Soy trees after substitutions from the(67)", "Delete TextElement: SoyMsgBundle and the SoyCssRenamingMap.(68)", "Delete TagElement(69)", "Delete TextElement: SoyMsgBundle and the SoyCssRenamingMap.(71)", "Delete TextElement: Primes the cache with the given combination of SoyMsgBundle and SoyCssRenamingMap. Priming the(78)", "Delete TextElement: cache will eliminate the slowness for the first render. This method must be called separately(79)", "Delete TextElement: for each distinct combination of SoyMsgBundle and SoyCssRenamingMap for which you wish to prime(80)", "Delete TextElement: the cache.(81)", "Delete TextElement: Only applicable when (82)", "Delete TextElement:  isCaching()(83)", "Delete TagElement: @code(84)", "Delete TextElement:  is true.(85)", "Delete TagElement(86)", "Delete SimpleName: msgBundle(87)", "Delete TextElement:  The message bundle to prime the cache with.(88)", "Delete TagElement: @param(89)", "Delete SimpleName: cssRenamingMap(90)", "Delete TextElement: If set to true, indicates that we should not add the current combination of(368)", "Delete TextElement:  SoyMsgBundle(369)", "Delete TagElement: @code(370)", "Delete TextElement:  and (371)", "Delete TextElement:  SoyCssRenamingMap(372)", "Delete TagElement: @code(373)", "Delete TextElement:  to the cache if it's not already there.(374)", "Delete TextElement: Only applicable when the associated (375)", "Delete TextElement:  SoyTofu(376)", "Delete TagElement: @code(377)", "Delete TextElement:  instance uses caching. Default value is(378)", "Delete TextElement: false, i.e. by default we always add to cache when not already present.(379)", "Delete TextElement: <p> Specifically, if (380)", "Delete TextElement:  dontAddToCache(381)", "Delete TagElement: @code(382)", "Delete TextElement:  is set to true, then after checking the cache for(383)", "Delete TextElement: the current combination of (384)", "Delete TextElement:  SoyMsgBundle(385)", "Delete TagElement: @code(386)", "Delete TextElement:  and (387)", "Delete TextElement:  SoyCssRenamingMap(388)", "Delete TagElement: @code(389)", "Delete TextElement: :(390)", "Delete TextElement: (a) if found in cache, we will use the cached intermediate results for faster rendering,(391)", "Delete TextElement: (b) if not found in cache, we will fall back to the no-caching method of rendering.(392)", "Delete TextElement: <p> If your app uses many different (393)", "Delete TextElement:  SoyMsgBundle(394)", "Delete TagElement: @code(395)", "Delete TextElement: s or (396)", "Delete TextElement:  SoyCssRenamingMap(397)", "Delete TagElement: @code(398)", "Delete TextElement: s and(399)", "Delete TextElement:  SoyTofu(401)", "Delete TagElement: @code(402)", "Delete TextElement:  is using too much memory, one(403)", "Delete TextElement: strategy may be to first prime the cache with the most common combinations by calling(404)", "Delete SimpleName: SoyTofu(405)", "Delete SimpleName: addToCache(406)", "Delete MemberRef(407)", "Delete TagElement: @link(408)", "Delete TextElement: , and then when rendering, always (409)", "Delete TextElement:  setDontAddToCache(true)(410)", "Delete TagElement: @code(411)", "Delete TextElement: .(412)", "Delete TextElement: This way, most of your renders will use the cached results, yet your cache will never grow(413)", "Delete TextElement: beyond the size that you initially primed it to be.(414)"]}}, {"SoyTofuOptions_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.google.template.soy.tofu"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: useCaching", "DEL SimpleName: SoyTofuOptions", "DEL ThisExpression", "DEL SimpleName: useCaching", "DEL SimpleName: opts", "DEL Block", "DEL TagElement: @param", "DEL QualifiedName: SoyTofu.Renderer", "DEL Modifier: public", "DEL TagElement", "DEL SimpleName: SoyTofuOptions", "DEL TextElement: Compilation options for the Tofu backend.", "DEL VariableDeclarationFragment", "DEL Block", "DEL VariableDeclarationStatement", "DEL TextElement: Sets whether the resulting SoyTofu instance should cache intermediate results after", "DEL MethodDeclaration", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL Assignment: =", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: setUseCaching", "DEL BooleanLiteral: false", "DEL TextElement: (b) The subsequent times the SoyTofu is used with an already-seen combination of", "DEL Block", "DEL TextElement: from the SoyMsgBundle and the SoyCssRenamingMap. ", "DEL TypeDeclaration: class", "DEL TextElement: <p> Specifically, if this param is set to true, then", "DEL PrimitiveType: void", "DEL SimpleName: SoyTofuOptions", "DEL SimpleName: useCaching", "DEL MemberRef", "DEL MethodDeclaration", "DEL TextElement: SoyMsgBundle and SoyCssRenamingMap your app uses (note most apps have at most one", "DEL TagElement: @link", "DEL TagElement", "DEL TextElement: SoyCssRenamingMap, the render will be slower. (Note that this first-render slowness can", "DEL TagElement: @link", "DEL TextElement: SoyMsgBundle and SoyCssRenamingMap, the render will be faster.", "DEL PrimitiveType: boolean", "DEL TextElement: <p> The cache will use memory proportional to the number of distinct combinations of", "DEL Modifier: public", "DEL SimpleName: SoyTofuOptions", "DEL SimpleName: useCaching", "DEL PrimitiveType: boolean", "DEL Modifier: private", "DEL TextElement:  The value to set.", "DEL SimpleName: useCaching", "DEL ReturnStatement", "DEL Modifier: public", "DEL SimpleName: SoyTofuOptions", "DEL SimpleName: addToCache", "DEL TextElement: Returns whether the resulting SoyTofu instance should cache intermediate results after", "DEL Javadoc", "DEL TextElement: substitutions from the SoyMsgBundle and the SoyCssRenamingMap.", "DEL Javadoc", "DEL TextElement: Whether the resulting SoyTofu instance should cache intermediate results after substitutions", "DEL SimpleType: SoyTofuOptions", "DEL ClassInstanceCreation", "DEL TextElement:  for details.", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleType: SoyTofuOptions", "DEL Javadoc", "DEL SimpleName: opts", "DEL SimpleName: useCaching", "DEL SimpleName: setDontAddToCache", "DEL SimpleName: useCaching", "DEL Modifier: public", "DEL FieldAccess", "DEL TextElement: contents of the cache. See ", "DEL ReturnStatement", "DEL SimpleType: SoyTofuOptions", "DEL TagElement", "DEL TextElement: substitutions from the SoyMsgBundle and the SoyCssRenamingMap.", "DEL SimpleName: SoyTofu", "DEL Modifier: public", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: copy", "DEL TextElement: SoyCssRenamingMap). If you find memory usage to be a problem, you can manually control the", "DEL MethodDeclaration", "DEL FieldAccess", "DEL MemberRef", "DEL PrimitiveType: boolean", "DEL ThisExpression", "DEL Block", "DEL SimpleName: useCaching", "DEL Assignment: =", "DEL TextElement: be eliminated by calling the method ", "DEL TextElement: (a) The first time the SoyTofu is used with a new combination of SoyMsgBundle and", "DEL SimpleName: useCaching", "DEL QualifiedName: opts.useCaching", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL TextElement:  to prime the cache.)"]}]}}, {"SoyTofuOptions_diff": {"operations": ["Delete QualifiedName: com.google.template.soy.tofu(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Compilation options for the Tofu backend.(2)", "Delete TagElement(3)", "Delete Javadoc(4)", "Delete Modifier: public(5)", "Delete SimpleName: SoyTofuOptions(6)", "Delete TextElement: Whether the resulting SoyTofu instance should cache intermediate results after substitutions(7)", "Delete TextElement: from the SoyMsgBundle and the SoyCssRenamingMap. (8)", "Delete TagElement(9)", "Delete Javadoc(10)", "Delete Modifier: private(11)", "Delete PrimitiveType: boolean(12)", "Delete SimpleName: useCaching(13)", "Delete VariableDeclarationFragment(14)", "Delete FieldDeclaration(15)", "Delete Modifier: public(16)", "Delete SimpleName: SoyTofuOptions(17)", "Delete SimpleName: useCaching(18)", "Delete BooleanLiteral: false(19)", "Delete Assignment: =(20)", "Delete ExpressionStatement(21)", "Delete Block(22)", "Delete MethodDeclaration(23)", "Delete TextElement: Sets whether the resulting SoyTofu instance should cache intermediate results after(24)", "Delete TextElement: substitutions from the SoyMsgBundle and the SoyCssRenamingMap.(25)", "Delete TextElement: <p> Specifically, if this param is set to true, then(26)", "Delete TextElement: (a) The first time the SoyTofu is used with a new combination of SoyMsgBundle and(27)", "Delete TextElement: SoyCssRenamingMap, the render will be slower. (Note that this first-render slowness can(28)", "Delete TextElement: be eliminated by calling the method (29)", "Delete SimpleName: SoyTofu(30)", "Delete SimpleName: addToCache(31)", "Delete MemberRef(32)", "Delete TagElement: @link(33)", "Delete TextElement:  to prime the cache.)(34)", "Delete TextElement: (b) The subsequent times the SoyTofu is used with an already-seen combination of(35)", "Delete TextElement: SoyMsgBundle and SoyCssRenamingMap, the render will be faster.(36)", "Delete TextElement: <p> The cache will use memory proportional to the number of distinct combinations of(37)", "Delete TextElement: SoyMsgBundle and SoyCssRenamingMap your app uses (note most apps have at most one(38)", "Delete TextElement: SoyCssRenamingMap). If you find memory usage to be a problem, you can manually control the(39)", "Delete TextElement: contents of the cache. See (40)", "Delete QualifiedName: SoyTofu.Renderer(41)", "Delete SimpleName: setDontAddToCache(42)", "Delete MemberRef(43)", "Delete TagElement: @link(44)", "Delete TextElement:  for details.(45)", "Delete TagElement(46)", "Delete SimpleName: useCaching(47)", "Delete TextElement:  The value to set.(48)", "Delete TagElement: @param(49)", "Delete Javadoc(50)", "Delete Modifier: public(51)", "Delete PrimitiveType: void(52)", "Delete SimpleName: setUseCaching(53)", "Delete PrimitiveType: boolean(54)", "Delete SimpleName: useCaching(55)", "Delete SingleVariableDeclaration(56)", "Delete ThisExpression(57)", "Delete SimpleName: useCaching(58)", "Delete FieldAccess(59)", "Delete SimpleName: useCaching(60)", "Delete Assignment: =(61)", "Delete ExpressionStatement(62)", "Delete Block(63)", "Delete MethodDeclaration(64)", "Delete TextElement: Returns whether the resulting SoyTofu instance should cache intermediate results after(65)", "Delete TextElement: substitutions from the SoyMsgBundle and the SoyCssRenamingMap.(66)", "Delete TagElement(67)", "Delete Javadoc(68)", "Delete Modifier: public(69)", "Delete PrimitiveType: boolean(70)", "Delete SimpleName: useCaching(71)", "Delete SimpleName: useCaching(72)", "Delete ReturnStatement(73)", "Delete Block(74)", "Delete MethodDeclaration(75)", "Delete Modifier: public(76)", "Delete SimpleName: SoyTofuOptions(77)", "Delete SimpleType: SoyTofuOptions(78)", "Delete SimpleName: copy(79)", "Delete SimpleName: SoyTofuOptions(80)", "Delete SimpleType: SoyTofuOptions(81)", "Delete SimpleName: opts(82)", "Delete SimpleName: SoyTofuOptions(83)", "Delete SimpleType: SoyTofuOptions(84)", "Delete ClassInstanceCreation(85)", "Delete VariableDeclarationFragment(86)", "Delete VariableDeclarationStatement(87)", "Delete QualifiedName: opts.useCaching(88)", "Delete ThisExpression(89)", "Delete SimpleName: useCaching(90)", "Delete FieldAccess(91)", "Delete Assignment: =(92)", "Delete ExpressionStatement(93)", "Delete SimpleName: opts(94)", "Delete ReturnStatement(95)", "Delete Block(96)", "Delete MethodDeclaration(97)", "Delete TypeDeclaration: class(98)"]}}, {"BaseTofu_cluster": {"actions": [{"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS Block to MethodDeclaration at 6"]}, {"root": "UPDATE from The template registry used for no-caching mode of rendering. Applicable when isCaching is to The template registry. ", "operations": ["UPD TextElement: The template registry used for no-caching mode of rendering. Applicable when isCaching is from The template registry used for no-caching mode of rendering. Applicable when isCaching is to The template registry. "]}, {"root": "INS BooleanLiteral: false to ReturnStatement at 0", "operations": ["INS BooleanLiteral: false to ReturnStatement at 0"]}, {"root": "MOVE from TryStatement", "operations": ["MOV Block to TryStatement at 1"]}, {"root": "INS ClassInstanceCreation to Assignment: = at 1", "operations": ["INS SimpleName: errorReporter to ClassInstanceCreation at 2", "INS SimpleName: soyTreeForNoCaching to ClassInstanceCreation at 1", "INS ClassInstanceCreation to Assignment: = at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: TemplateNode to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: TemplateNode to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: TemplateRegistry to ClassInstanceCreation at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.collect.Maps", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.internal.base.Pair", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.msgs.internal.InsertMsgsVisitor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.sharedpasses.RenameCssVisitor"]}, {"root": "DEL TagElement: @param", "operations": ["DEL TextElement:  Whether this instance caches intermediate Soy trees after substitutions from", "DEL SimpleName: isCaching", "DEL TextElement: the msgBundle and the cssRenamingMap.", "DEL TagElement: @param"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL SimpleName: isCaching", "DEL SingleVariableDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL Modifier: private", "DEL PrimitiveType: boolean", "DEL FieldDeclaration", "DEL SimpleName: isCaching", "DEL TagElement", "DEL TextElement: and the cssRenamingMap. ", "DEL VariableDeclarationFragment", "DEL TextElement: Whether this instance caches intermediate Soy trees after substitutions from the msgBundle", "DEL Javadoc"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL ParameterizedType: Pair<SoyMsgBundle,SoyCssRenamingMap>", "DEL SimpleType: TemplateRegistry", "DEL ParameterizedType: Map<Pair<SoyMsgBundle,SoyCssRenamingMap>,TemplateRegistry>", "DEL TextElement: Map of cached template registries. Only applicable when isCaching is true. ", "DEL VariableDeclarationFragment", "DEL SimpleName: SoyCssRenamingMap", "DEL TagElement", "DEL Javadoc", "DEL SimpleType: SoyMsgBundle", "DEL SimpleName: TemplateRegistry", "DEL SimpleType: Pair", "DEL FieldDeclaration", "DEL SimpleType: Map", "DEL SimpleName: Pair", "DEL Modifier: private", "DEL SimpleName: cachedTemplateRegistries", "DEL Modifier: final", "DEL SimpleName: Map", "DEL SimpleType: SoyCssRenamingMap", "DEL SimpleName: SoyMsgBundle"]}, {"root": "DEL TextElement: false or when isCaching is true but doAddToCache is false. ", "operations": ["DEL TextElement: false or when isCaching is true but doAddToCache is false. "]}, {"root": "DEL TagElement: @param", "operations": ["DEL TagElement: @param", "DEL SimpleName: isCaching", "DEL TextElement:  Whether this instance caches intermediate Soy trees after substitutions from", "DEL TextElement: the msgBundle and the cssRenamingMap."]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: isCaching", "DEL PrimitiveType: boolean", "DEL SimpleName: Assisted", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ThisExpression", "DEL FieldAccess", "DEL SimpleName: isCaching", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: isCaching"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL Block", "DEL SimpleName: addToCache", "DEL NullLiteral", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: isCaching", "DEL SimpleName: cachedTemplateRegistries", "DEL ExpressionStatement", "DEL SimpleName: cachedTemplateRegistries", "DEL ExpressionStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: newHashMap", "DEL Assignment: =", "DEL SimpleName: Maps", "DEL NullLiteral", "DEL NullLiteral", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: buildTemplateRegistry", "DEL SimpleName: soyTreeForNoCaching"]}, {"root": "DEL SimpleName: isCaching", "operations": ["DEL SimpleName: isCaching"]}, {"root": "DEL Block", "operations": ["DEL ExpressionStatement", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL SimpleName: Pair", "DEL SimpleType: SoyTofuException", "DEL SimpleName: isCaching", "DEL SimpleName: ApiCallScopeUtils", "DEL SimpleName: cssRenamingMap", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: msgBundle", "DEL SimpleName: getCachedTemplateRegistry", "DEL PrefixExpression: !", "DEL SimpleName: withScope", "DEL TryStatement", "DEL SimpleName: SoyTofuException", "DEL Block", "DEL SimpleName: apiCallScope", "DEL MethodInvocation", "DEL SimpleName: apiCallScope", "DEL StringLiteral: \"Cannot addToCache() when isCaching is false.\"", "DEL ClassInstanceCreation", "DEL SimpleType: WithScope", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: WithScope", "DEL IfStatement", "DEL ThrowStatement", "DEL MethodInvocation", "DEL SimpleName: enter", "DEL VariableDeclarationExpression", "DEL SimpleName: seedSharedParams", "DEL ExpressionStatement", "DEL SimpleName: of", "DEL SimpleName: msgBundle"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: TemplateRegistry", "DEL SimpleName: soyTreeClone", "DEL IfStatement", "DEL TextElement: not already there. Thus, after calling this method with doAddToCache set to true, the given key", "DEL TextElement: is not already in the cache, then this method simply returns null without modifying the cache.", "DEL SimpleName: apiCallScope", "DEL SimpleName: buildTemplateRegistry", "DEL SimpleName: SoyMsgBundle", "DEL SingleVariableDeclaration", "DEL SimpleName: get", "DEL Block", "DEL SimpleName: templateRegistry", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL TextElement: <p> Specifically, if doAddToCache is true, then the mapping will be added to the cache if it's", "DEL Assignment: =", "DEL SimpleType: SoyCssRenamingMap", "DEL SimpleName: key", "DEL ReturnStatement", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: cloneNode", "DEL ParameterizedType: Pair<SoyMsgBundle,SoyCssRenamingMap>", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: soyTreeClone", "DEL ReturnStatement", "DEL Modifier: private", "DEL SimpleName: templateRegistry", "DEL MethodDeclaration", "DEL SimpleName: templateRegistry", "DEL SimpleName: SoyFileSetNode", "DEL TextElement: found in the cache.", "DEL SimpleName: TemplateRegistry", "DEL SimpleName: Preconditions", "DEL SimpleName: simplifyVisitor", "DEL SimpleName: doAddToCache", "DEL SimpleName: soyTreeClone", "DEL QualifiedName: key.first", "DEL SimpleType: Pair", "DEL ExpressionStatement", "DEL TextElement:  The corresponding template registry, or null if not found in cache and doAddToCache is", "DEL SimpleName: Pair", "DEL InfixExpression: ==", "DEL SimpleName: checkState", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: SoytreeUtils", "DEL SimpleName: errorReporter", "DEL TextElement: SoyCssRenamingMap), optionally adding the mapping to the cache if it's not already there.", "DEL TagElement: @param", "DEL TextElement: is guaranteed to be found in the cache. On the other hand, if doAddToCache is false and the key", "DEL NullLiteral", "DEL MethodInvocation", "DEL TextElement: false.", "DEL SimpleName: soyTree", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL SimpleType: SoyFileSetNode", "DEL SimpleName: doAddToCache", "DEL SimpleName: SoyCssRenamingMap", "DEL SimpleType: InsertMsgsVisitor", "DEL MethodInvocation", "DEL SimpleName: getCachedTemplateRegistry", "DEL SimpleName: exec", "DEL BooleanLiteral: true", "DEL SimpleType: SoyMsgBundle", "DEL TextElement: Gets the template registry associated with the given key (a key is a pair of SoyMsgBundle and", "DEL SimpleName: templateRegistry", "DEL SimpleName: InsertMsgsVisitor", "DEL MethodInvocation", "DEL SimpleName: exec", "DEL ExpressionStatement", "DEL TagElement: @return", "DEL SimpleName: cachedTemplateRegistries", "DEL SimpleName: errorReporter", "DEL SimpleName: cachedTemplateRegistries", "DEL ExpressionStatement", "DEL SimpleName: put", "DEL TextElement:  Whether to add this combination to the cache in the case that it's not", "DEL SimpleType: RenameCssVisitor", "DEL SimpleName: isActive", "DEL TagElement", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: soyTreeClone", "DEL ExpressionStatement", "DEL TextElement:  The pair of SoyMsgBundle and SoyCssRenamingMap for which to retrieve the", "DEL VariableDeclarationFragment", "DEL QualifiedName: key.second", "DEL SimpleName: templateRegistry", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: doAddToCache", "DEL TextElement: corresponding template registry.", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SimpleName: soyTreeClone", "DEL SimpleName: RenameCssVisitor", "DEL SimpleName: exec", "DEL Javadoc", "DEL TagElement: @param", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: key", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: key"]}, {"root": "DEL TagElement: @param", "operations": ["DEL TextElement: the cache if it's not already there. If set to false, then falls back to the no-caching", "DEL SimpleName: doAddToCache", "DEL TagElement: @param", "DEL TextElement: BaseTofu instance.", "DEL TextElement: mode of rendering when not found in cache. Only applicable if isCaching is true for this", "DEL TextElement:  Whether to add the current combination of msgBundle and cssRenamingMap to"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL SimpleName: doAddToCache", "DEL SingleVariableDeclaration"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: Pair", "DEL SimpleName: msgBundle", "DEL SimpleName: cssRenamingMap", "DEL SimpleName: msgBundle", "DEL NullLiteral", "DEL Block", "DEL SimpleName: templateName", "DEL NullLiteral", "DEL SimpleName: doAddToCache", "DEL ReturnStatement", "DEL SimpleName: ijData", "DEL SimpleName: getCachedTemplateRegistry", "DEL NullLiteral", "DEL SimpleName: data", "DEL ConditionalExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: outputBuf", "DEL SimpleName: cachedTemplateRegistry", "DEL MethodInvocation", "DEL SimpleName: cachedTemplateRegistry", "DEL SimpleType: TemplateRegistry", "DEL InfixExpression: !=", "DEL SimpleName: renderMainHelper", "DEL SimpleName: activeDelPackageNames", "DEL Block", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL SimpleName: isCaching", "DEL MethodInvocation", "DEL SimpleName: of", "DEL SimpleName: TemplateRegistry", "DEL IfStatement", "DEL SimpleName: cachedTemplateRegistry", "DEL MethodInvocation"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL SimpleName: doAddToCache", "DEL FieldDeclaration", "DEL Modifier: private", "DEL VariableDeclarationFragment"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: doAddToCache", "DEL ExpressionStatement", "DEL FieldAccess", "DEL Assignment: =", "DEL BooleanLiteral: true", "DEL ThisExpression"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL FieldAccess", "DEL SimpleName: dontAddToCache", "DEL PrefixExpression: !", "DEL SimpleName: doAddToCache", "DEL ExpressionStatement", "DEL ThisExpression", "DEL Assignment: ="]}, {"root": "DEL SimpleName: doAddToCache", "operations": ["DEL SimpleName: doAddToCache"]}, {"root": "DEL SimpleName: doAddToCache", "operations": ["DEL SimpleName: doAddToCache"]}]}}, {"BaseTofu_diff": {"operations": ["Move MarkerAnnotation(437) into MethodDeclaration(357) at 0", "Move MarkerAnnotation(428) into MethodDeclaration(376) at 0", "Insert Block(375) into MethodDeclaration(376) at 6", "Update TextElement: The template registry used for no-caching mode of rendering. Applicable when isCaching is(203) to The template registry. ", "Insert BooleanLiteral: false(354) into ReturnStatement(355) at 0", "Move Block(885) into TryStatement(622) at 1", "Insert ClassInstanceCreation(293) into Assignment: =(294) at 1", "Move ExpressionStatement(840) into Block(621) at 0", "Move SimpleType: TemplateNode(1544) into VariableDeclarationStatement(1224) at 0", "Move SimpleType: TemplateNode(1494) into VariableDeclarationStatement(1273) at 0", "Move SimpleType: TemplateRegistry(663) into ClassInstanceCreation(293) at 0", "Insert SimpleName: soyTreeForNoCaching(291) into ClassInstanceCreation(293) at 1", "Insert SimpleName: errorReporter(292) into ClassInstanceCreation(293) at 2", "Delete QualifiedName: com.google.common.collect.Maps(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.google.template.soy.internal.base.Pair(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: com.google.template.soy.msgs.internal.InsertMsgsVisitor(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: com.google.template.soy.sharedpasses.RenameCssVisitor(50)", "Delete ImportDeclaration(51)", "Delete SimpleName: isCaching(98)", "Delete TextElement:  Whether this instance caches intermediate Soy trees after substitutions from(99)", "Delete TextElement: the msgBundle and the cssRenamingMap.(100)", "Delete TagElement: @param(101)", "Delete PrimitiveType: boolean(114)", "Delete SimpleName: isCaching(115)", "Delete SingleVariableDeclaration(116)", "Delete TextElement: Whether this instance caches intermediate Soy trees after substitutions from the msgBundle(173)", "Delete TextElement: and the cssRenamingMap. (174)", "Delete TagElement(175)", "Delete Javadoc(176)", "Delete Modifier: private(177)", "Delete Modifier: final(178)", "Delete PrimitiveType: boolean(179)", "Delete SimpleName: isCaching(180)", "Delete VariableDeclarationFragment(181)", "Delete FieldDeclaration(182)", "Delete TextElement: Map of cached template registries. Only applicable when isCaching is true. (183)", "Delete TagElement(184)", "Delete Javadoc(185)", "Delete Modifier: private(186)", "Delete Modifier: final(187)", "Delete SimpleName: Map(188)", "Delete SimpleType: Map(189)", "Delete SimpleName: Pair(190)", "Delete SimpleType: Pair(191)", "Delete SimpleName: SoyMsgBundle(192)", "Delete SimpleType: SoyMsgBundle(193)", "Delete SimpleName: SoyCssRenamingMap(194)", "Delete SimpleType: SoyCssRenamingMap(195)", "Delete ParameterizedType: Pair<SoyMsgBundle,SoyCssRenamingMap>(196)", "Delete SimpleName: TemplateRegistry(197)", "Delete SimpleType: TemplateRegistry(198)", "Delete ParameterizedType: Map<Pair<SoyMsgBundle,SoyCssRenamingMap>,TemplateRegistry>(199)", "Delete SimpleName: cachedTemplateRegistries(200)", "Delete VariableDeclarationFragment(201)", "Delete FieldDeclaration(202)", "Delete TextElement: false or when isCaching is true but doAddToCache is false. (204)", "Delete SimpleName: isCaching(254)", "Delete TextElement:  Whether this instance caches intermediate Soy trees after substitutions from(255)", "Delete TextElement: the msgBundle and the cssRenamingMap.(256)", "Delete TagElement: @param(257)", "Delete SimpleName: Assisted(287)", "Delete MarkerAnnotation(288)", "Delete PrimitiveType: boolean(289)", "Delete SimpleName: isCaching(290)", "Delete SingleVariableDeclaration(291)", "Delete ThisExpression(328)", "Delete SimpleName: isCaching(329)", "Delete FieldAccess(330)", "Delete SimpleName: isCaching(331)", "Delete Assignment: =(332)", "Delete ExpressionStatement(333)", "Delete SimpleName: isCaching(340)", "Delete SimpleName: cachedTemplateRegistries(341)", "Delete SimpleName: Maps(342)", "Delete SimpleName: newHashMap(343)", "Delete MethodInvocation(344)", "Delete Assignment: =(345)", "Delete ExpressionStatement(346)", "Delete SimpleName: addToCache(347)", "Delete NullLiteral(348)", "Delete NullLiteral(349)", "Delete MethodInvocation(350)", "Delete ExpressionStatement(351)", "Delete Block(352)", "Delete SimpleName: cachedTemplateRegistries(353)", "Delete NullLiteral(354)", "Delete Assignment: =(355)", "Delete ExpressionStatement(356)", "Delete Block(357)", "Delete IfStatement(358)", "Delete SimpleName: buildTemplateRegistry(369)", "Delete SimpleName: soyTreeForNoCaching(370)", "Delete MethodInvocation(371)", "Delete SimpleName: isCaching(432)", "Delete SimpleName: isCaching(453)", "Delete PrefixExpression: !(454)", "Delete SimpleName: SoyTofuException(455)", "Delete SimpleType: SoyTofuException(456)", "Delete StringLiteral: \"Cannot addToCache() when isCaching is false.\"(457)", "Delete ClassInstanceCreation(458)", "Delete ThrowStatement(459)", "Delete Block(460)", "Delete IfStatement(461)", "Delete SimpleName: WithScope(462)", "Delete SimpleType: WithScope(463)", "Delete SimpleName: withScope(464)", "Delete SimpleName: apiCallScope(465)", "Delete SimpleName: enter(466)", "Delete MethodInvocation(467)", "Delete VariableDeclarationFragment(468)", "Delete VariableDeclarationExpression(469)", "Delete SimpleName: ApiCallScopeUtils(470)", "Delete SimpleName: seedSharedParams(471)", "Delete SimpleName: apiCallScope(472)", "Delete SimpleName: msgBundle(473)", "Delete MethodInvocation(474)", "Delete ExpressionStatement(475)", "Delete SimpleName: getCachedTemplateRegistry(476)", "Delete SimpleName: Pair(477)", "Delete SimpleName: of(478)", "Delete SimpleName: msgBundle(479)", "Delete SimpleName: cssRenamingMap(480)", "Delete MethodInvocation(481)", "Delete BooleanLiteral: true(482)", "Delete MethodInvocation(483)", "Delete ExpressionStatement(484)", "Delete Block(485)", "Delete TryStatement(486)", "Delete Block(487)", "Delete TextElement: Gets the template registry associated with the given key (a key is a pair of SoyMsgBundle and(620)", "Delete TextElement: SoyCssRenamingMap), optionally adding the mapping to the cache if it's not already there.(621)", "Delete TextElement: <p> Specifically, if doAddToCache is true, then the mapping will be added to the cache if it's(622)", "Delete TextElement: not already there. Thus, after calling this method with doAddToCache set to true, the given key(623)", "Delete TextElement: is guaranteed to be found in the cache. On the other hand, if doAddToCache is false and the key(624)", "Delete TextElement: is not already in the cache, then this method simply returns null without modifying the cache.(625)", "Delete TagElement(626)", "Delete SimpleName: key(627)", "Delete TextElement:  The pair of SoyMsgBundle and SoyCssRenamingMap for which to retrieve the(628)", "Delete TextElement: corresponding template registry.(629)", "Delete TagElement: @param(630)", "Delete SimpleName: doAddToCache(631)", "Delete TextElement:  Whether to add this combination to the cache in the case that it's not(632)", "Delete TextElement: found in the cache.(633)", "Delete TagElement: @param(634)", "Delete TextElement:  The corresponding template registry, or null if not found in cache and doAddToCache is(635)", "Delete TextElement: false.(636)", "Delete TagElement: @return(637)", "Delete Javadoc(638)", "Delete Modifier: private(639)", "Delete SimpleName: TemplateRegistry(640)", "Delete SimpleType: TemplateRegistry(641)", "Delete SimpleName: getCachedTemplateRegistry(642)", "Delete SimpleName: Pair(643)", "Delete SimpleType: Pair(644)", "Delete SimpleName: SoyMsgBundle(645)", "Delete SimpleType: SoyMsgBundle(646)", "Delete SimpleName: SoyCssRenamingMap(647)", "Delete SimpleType: SoyCssRenamingMap(648)", "Delete ParameterizedType: Pair<SoyMsgBundle,SoyCssRenamingMap>(649)", "Delete SimpleName: key(650)", "Delete SingleVariableDeclaration(651)", "Delete PrimitiveType: boolean(652)", "Delete SimpleName: doAddToCache(653)", "Delete SingleVariableDeclaration(654)", "Delete SimpleName: Preconditions(655)", "Delete SimpleName: checkState(656)", "Delete SimpleName: apiCallScope(657)", "Delete SimpleName: isActive(658)", "Delete MethodInvocation(659)", "Delete MethodInvocation(660)", "Delete ExpressionStatement(661)", "Delete SimpleName: templateRegistry(664)", "Delete SimpleName: cachedTemplateRegistries(665)", "Delete SimpleName: get(666)", "Delete SimpleName: key(667)", "Delete MethodInvocation(668)", "Delete VariableDeclarationFragment(669)", "Delete VariableDeclarationStatement(670)", "Delete SimpleName: templateRegistry(671)", "Delete NullLiteral(672)", "Delete InfixExpression: ==(673)", "Delete SimpleName: doAddToCache(674)", "Delete PrefixExpression: !(675)", "Delete NullLiteral(676)", "Delete ReturnStatement(677)", "Delete Block(678)", "Delete IfStatement(679)", "Delete SimpleName: SoyFileSetNode(680)", "Delete SimpleType: SoyFileSetNode(681)", "Delete SimpleName: soyTreeClone(682)", "Delete SimpleName: SoytreeUtils(683)", "Delete SimpleName: cloneNode(684)", "Delete SimpleName: soyTree(685)", "Delete MethodInvocation(686)", "Delete VariableDeclarationFragment(687)", "Delete VariableDeclarationStatement(688)", "Delete SimpleName: InsertMsgsVisitor(689)", "Delete SimpleType: InsertMsgsVisitor(690)", "Delete QualifiedName: key.first(691)", "Delete BooleanLiteral: true(692)", "Delete SimpleName: errorReporter(693)", "Delete ClassInstanceCreation(694)", "Delete SimpleName: exec(695)", "Delete SimpleName: soyTreeClone(696)", "Delete MethodInvocation(697)", "Delete ExpressionStatement(698)", "Delete SimpleName: RenameCssVisitor(699)", "Delete SimpleType: RenameCssVisitor(700)", "Delete QualifiedName: key.second(701)", "Delete SimpleName: errorReporter(702)", "Delete ClassInstanceCreation(703)", "Delete SimpleName: exec(704)", "Delete SimpleName: soyTreeClone(705)", "Delete MethodInvocation(706)", "Delete ExpressionStatement(707)", "Delete SimpleName: simplifyVisitor(708)", "Delete SimpleName: exec(709)", "Delete SimpleName: soyTreeClone(710)", "Delete MethodInvocation(711)", "Delete ExpressionStatement(712)", "Delete SimpleName: templateRegistry(713)", "Delete SimpleName: buildTemplateRegistry(714)", "Delete SimpleName: soyTreeClone(715)", "Delete MethodInvocation(716)", "Delete Assignment: =(717)", "Delete ExpressionStatement(718)", "Delete SimpleName: cachedTemplateRegistries(719)", "Delete SimpleName: put(720)", "Delete SimpleName: key(721)", "Delete SimpleName: templateRegistry(722)", "Delete MethodInvocation(723)", "Delete ExpressionStatement(724)", "Delete Block(725)", "Delete IfStatement(726)", "Delete SimpleName: templateRegistry(727)", "Delete ReturnStatement(728)", "Delete Block(729)", "Delete MethodDeclaration(730)", "Delete SimpleName: doAddToCache(753)", "Delete TextElement:  Whether to add the current combination of msgBundle and cssRenamingMap to(754)", "Delete TextElement: the cache if it's not already there. If set to false, then falls back to the no-caching(755)", "Delete TextElement: mode of rendering when not found in cache. Only applicable if isCaching is true for this(756)", "Delete TextElement: BaseTofu instance.(757)", "Delete TagElement: @param(758)", "Delete PrimitiveType: boolean(813)", "Delete SimpleName: doAddToCache(814)", "Delete SingleVariableDeclaration(815)", "Delete SimpleName: TemplateRegistry(841)", "Delete SimpleType: TemplateRegistry(842)", "Delete SimpleName: cachedTemplateRegistry(843)", "Delete SimpleName: isCaching(844)", "Delete SimpleName: getCachedTemplateRegistry(845)", "Delete SimpleName: Pair(846)", "Delete SimpleName: of(847)", "Delete SimpleName: msgBundle(848)", "Delete SimpleName: cssRenamingMap(849)", "Delete MethodInvocation(850)", "Delete SimpleName: doAddToCache(851)", "Delete MethodInvocation(852)", "Delete NullLiteral(853)", "Delete ConditionalExpression(854)", "Delete VariableDeclarationFragment(855)", "Delete VariableDeclarationStatement(856)", "Delete SimpleName: cachedTemplateRegistry(857)", "Delete NullLiteral(858)", "Delete InfixExpression: !=(859)", "Delete SimpleName: renderMainHelper(860)", "Delete SimpleName: cachedTemplateRegistry(861)", "Delete SimpleName: outputBuf(862)", "Delete SimpleName: templateName(863)", "Delete SimpleName: data(864)", "Delete SimpleName: ijData(865)", "Delete SimpleName: activeDelPackageNames(866)", "Delete SimpleName: msgBundle(867)", "Delete NullLiteral(868)", "Delete NullLiteral(869)", "Delete MethodInvocation(870)", "Delete ReturnStatement(871)", "Delete Block(872)", "Delete IfStatement(886)", "Delete Block(887)", "Delete Modifier: private(1120)", "Delete PrimitiveType: boolean(1121)", "Delete SimpleName: doAddToCache(1122)", "Delete VariableDeclarationFragment(1123)", "Delete FieldDeclaration(1124)", "Delete ThisExpression(1201)", "Delete SimpleName: doAddToCache(1202)", "Delete FieldAccess(1203)", "Delete BooleanLiteral: true(1204)", "Delete Assignment: =(1205)", "Delete ExpressionStatement(1206)", "Delete ThisExpression(1419)", "Delete SimpleName: doAddToCache(1420)", "Delete FieldAccess(1421)", "Delete SimpleName: dontAddToCache(1422)", "Delete PrefixExpression: !(1423)", "Delete Assignment: =(1424)", "Delete ExpressionStatement(1425)", "Delete SimpleName: doAddToCache(1506)", "Delete SimpleName: doAddToCache(1556)"]}}], "commit_stats": [{"total_files": 5, "deleted_files": 1, "testing": "True", "maintenance": "False", "build": "False"}]}