{"application": "apache-commons-validator", "csha": "ec47d755b8f8fcffdce021e367ecb2a97a3303d0", "files": [{"DomainValidator_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: java.lang.reflect.InvocationTargetException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: java.lang.reflect.Method to ImportDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 28", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 28", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS Block to TryStatement at 0", "INS SimpleName: input to MethodInvocation at 1", "INS TextElement:  converted input, or original input if conversion fails to TagElement: @return at 0", "INS SimpleType: String to MethodDeclaration at 3", "INS Modifier: static to MethodDeclaration at 2", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS TextElement:  the string to convert, not null to TagElement: @param at 1", "INS SimpleName: input to SingleVariableDeclaration at 1", "INS TextElement: Converts potentially Unicode input to punycode. to TagElement at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: toASCII to MethodInvocation at 0", "INS TagElement: @param to Javadoc at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: input to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: input to TagElement: @param at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleType: IllegalArgumentException to SingleVariableDeclaration at 0", "INS SimpleName: unicodeToASCII to MethodDeclaration at 4", "INS Modifier: private to MethodDeclaration at 1", "INS Block to MethodDeclaration at 6", "INS CatchClause to TryStatement at 1", "INS ReturnStatement to Block at 0", "INS Javadoc to MethodDeclaration at 0", "INS TryStatement to Block at 0", "INS SimpleName: String to SimpleType: String at 0", "INS Block to CatchClause at 1", "INS TagElement: @return to Javadoc at 2", "INS TagElement to Javadoc at 0", "INS TextElement: If conversion fails, returns the original input. to TagElement at 1"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 29", "operations": ["INS CatchClause to TryStatement at 1", "INS StringLiteral: \"toASCII\" to MethodInvocation at 2", "INS SimpleType: Class to ArrayType: Class[] at 0", "INS Modifier: static to FieldDeclaration at 0", "INS SimpleName: DomainValidatorTest to SimpleType: DomainValidatorTest at 0", "INS SimpleType: Method to FieldDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 3", "INS SimpleName: clazz to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS ReturnStatement to Block at 1", "INS SimpleType: Exception to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: getMethod to MethodDeclaration at 3", "INS NullLiteral to ReturnStatement at 0", "INS SimpleName: forName to MethodInvocation at 1", "INS SimpleName: getClassLoader to MethodInvocation at 1", "INS SimpleType: DomainValidatorTest to TypeLiteral at 0", "INS SimpleName: IDNHolder to TypeDeclaration: class at 2", "INS Modifier: static to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SimpleType: Class to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: clazz to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 0", "INS SimpleName: getMethod to MethodInvocation at 0", "INS Block to CatchClause at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS SimpleName: javaNetIDNtoAscii to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS ArrayInitializer to ArrayCreation at 1", "INS SimpleName: Class to MethodInvocation at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS TryStatement to Block at 0", "INS ArrayType: Class[] to ArrayCreation at 0", "INS ArrayCreation to MethodInvocation at 3", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleType: Method to MethodDeclaration at 2", "INS Dimension to ArrayType: Class[] at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleType: String to TypeLiteral at 0", "INS SimpleName: Method to SimpleType: Method at 0", "INS Block to TryStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 4", "INS Modifier: final to FieldDeclaration at 1", "INS Modifier: static to TypeDeclaration: class at 1", "INS MethodInvocation to ReturnStatement at 0", "INS Block to MethodDeclaration at 4", "INS Modifier: private to MethodDeclaration at 0", "INS Modifier: private to TypeDeclaration: class at 0", "INS TypeDeclaration: class to TypeDeclaration: class at 29", "INS StringLiteral: \"java.net.IDN\" to MethodInvocation at 2", "INS BooleanLiteral: false to MethodInvocation at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getDeclaredMethod to MethodInvocation at 1", "INS SimpleName: Method to SimpleType: Method at 0", "INS TypeLiteral to ArrayInitializer at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 30", "operations": ["INS SimpleType: Method to MethodDeclaration at 2", "INS Modifier: static to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: Method to SimpleType: Method at 0", "INS SimpleName: getIDNMethod to MethodDeclaration at 3", "INS QualifiedName: IDNHolder.javaNetIDNtoAscii to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 30", "INS Modifier: final to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 31", "operations": ["INS SimpleName: line to ReturnStatement at 0", "INS SimpleName: Method to SimpleType: Method at 0", "INS ArrayCreation to MethodInvocation at 3", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: t to InstanceofExpression at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to IfStatement at 0", "INS Block to TryStatement at 0", "INS CastExpression to ReturnStatement at 0", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleType: String to ArrayType: String[] at 0", "INS Dimension to ArrayType: String[] at 1", "INS ThrowStatement to Block at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: e to ClassInstanceCreation at 1", "INS SimpleName: t to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: String to SimpleType: String at 0", "INS Block to CatchClause at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: InvocationTargetException to SingleVariableDeclaration at 0", "INS SimpleType: String to MethodDeclaration at 3", "INS SimpleType: IllegalArgumentException to CastExpression at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: toASCII to MethodDeclaration at 4", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: invoke to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS TryStatement to Block at 3", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: m to InfixExpression: == at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SimpleName: line to ReturnStatement at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS SimpleName: String to SimpleType: String at 0", "INS CatchClause to TryStatement at 1", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS QualifiedName: Locale.ENGLISH to MethodInvocation at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: InvocationTargetException to SimpleType: InvocationTargetException at 0", "INS Block to IfStatement at 1", "INS ThrowStatement to Block at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleType: RuntimeException to ClassInstanceCreation at 0", "INS SimpleName: e to ClassInstanceCreation at 1", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS SimpleType: IllegalArgumentException to MethodDeclaration at 6", "INS Modifier: final to MethodDeclaration at 2", "INS IfStatement to Block at 2", "INS Block to IfStatement at 1", "INS SimpleName: getIDNMethod to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: IllegalAccessException to SimpleType: IllegalAccessException at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: line to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS IfStatement to Block at 1", "INS SimpleName: t to CastExpression at 1", "INS CastExpression to ThrowStatement at 0", "INS SimpleName: line to SingleVariableDeclaration at 1", "INS SimpleName: isOnlyASCII to MethodInvocation at 0", "INS SimpleName: toLowerCase to MethodInvocation at 1", "INS SimpleType: IllegalAccessException to SingleVariableDeclaration at 0", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS Modifier: static to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: getCause to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 31", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleType: RuntimeException to ClassInstanceCreation at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS MethodInvocation to ArrayInitializer at 0", "INS SimpleName: m to VariableDeclarationFragment at 0", "INS NullLiteral to MethodInvocation at 2", "INS Block to CatchClause at 1", "INS ArrayType: String[] to ArrayCreation at 0", "INS ArrayInitializer to ArrayCreation at 1", "INS InstanceofExpression to IfStatement at 0", "INS SimpleType: IllegalArgumentException to InstanceofExpression at 1", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SimpleName: m to MethodInvocation at 0", "INS ThrowStatement to Block at 0", "INS Block to MethodDeclaration at 7", "INS SimpleType: String to CastExpression at 0", "INS CatchClause to TryStatement at 2", "INS SimpleType: Method to VariableDeclarationStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: line to MethodInvocation at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleType: Throwable to VariableDeclarationStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 32", "operations": ["INS InfixExpression: < to ForStatement at 1", "INS SimpleName: charAt to MethodInvocation at 1", "INS SimpleName: length to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: > at 0", "INS SimpleName: input to SingleVariableDeclaration at 1", "INS Modifier: static to MethodDeclaration at 1", "INS InfixExpression: > to IfStatement at 0", "INS ReturnStatement to Block at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS ForStatement to Block at 1", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS BooleanLiteral: true to ReturnStatement at 0", "INS SimpleName: input to MethodInvocation at 0", "INS PostfixExpression: ++ to ForStatement at 2", "INS BooleanLiteral: false to ReturnStatement at 0", "INS Block to MethodDeclaration at 5", "INS ReturnStatement to Block at 2", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: i to MethodInvocation at 2", "INS Block to ForStatement at 3", "INS SimpleName: input to InfixExpression: == at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS IfStatement to Block at 0", "INS MethodInvocation to InfixExpression: < at 1", "INS SimpleName: isOnlyASCII to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS SimpleName: i to InfixExpression: < at 0", "INS NumberLiteral: 0x7F to InfixExpression: > at 1", "INS BooleanLiteral: true to ReturnStatement at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: input to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 32", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS InfixExpression: == to IfStatement at 0", "INS Block to IfStatement at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS NullLiteral to InfixExpression: == at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS Modifier: private to MethodDeclaration at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: domain to Assignment: = at 0", "INS SimpleName: domain to MethodInvocation at 1", "INS SimpleName: unicodeToASCII to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: domain to Assignment: = at 0", "INS SimpleName: domain to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: unicodeToASCII to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: tld to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: unicodeToASCII to MethodInvocation at 0", "INS SimpleName: tld to Assignment: = at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: iTld to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: unicodeToASCII to MethodInvocation at 0", "INS SimpleName: iTld to MethodInvocation at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS SimpleName: unicodeToASCII to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: gTld to MethodInvocation at 1", "INS SimpleName: gTld to Assignment: = at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: unicodeToASCII to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: ccTld to MethodInvocation at 1", "INS SimpleName: ccTld to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from iTld to lTld", "operations": ["UPD SimpleName: iTld from iTld to lTld", "UPD SimpleName: iTld from iTld to lTld", "UPD SimpleName: iTld from iTld to lTld"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: unicodeToASCII to MethodInvocation at 0", "INS SimpleName: lTld to MethodInvocation at 1", "INS SimpleName: lTld to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from  the parameter to check for TLD status to  the parameter to check for TLD status, not null", "operations": ["UPD TextElement:  the parameter to check for TLD status from  the parameter to check for TLD status to  the parameter to check for TLD status, not null"]}, {"root": "UPDATE from  the parameter to check for infrastructure TLD status to  the parameter to check for infrastructure TLD status, not null", "operations": ["UPD TextElement:  the parameter to check for infrastructure TLD status from  the parameter to check for infrastructure TLD status to  the parameter to check for infrastructure TLD status, not null"]}, {"root": "UPDATE from  the parameter to check for generic TLD status to  the parameter to check for generic TLD status, not null", "operations": ["UPD TextElement:  the parameter to check for generic TLD status from  the parameter to check for generic TLD status to  the parameter to check for generic TLD status, not null"]}, {"root": "UPDATE from  the parameter to check for country code TLD status to  the parameter to check for country code TLD status, not null", "operations": ["UPD TextElement:  the parameter to check for country code TLD status from  the parameter to check for country code TLD status to  the parameter to check for country code TLD status, not null"]}, {"root": "UPDATE from  the parameter to check for local TLD status to  the parameter to check for local TLD status, not null", "operations": ["UPD TextElement:  the parameter to check for local TLD status from  the parameter to check for local TLD status to  the parameter to check for local TLD status, not null"]}]}}, {"DomainValidator_diff": {"operations": ["Insert ImportDeclaration(5) into CompilationUnit(1674) at 2", "Insert ImportDeclaration(7) into CompilationUnit(1674) at 3", "Insert QualifiedName: java.lang.reflect.InvocationTargetException(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: java.lang.reflect.Method(6) into ImportDeclaration(7) at 0", "Insert MethodDeclaration(1465) into TypeDeclaration: class(1673) at 28", "Insert TypeDeclaration: class(1524) into TypeDeclaration: class(1673) at 29", "Insert MethodDeclaration(1533) into TypeDeclaration: class(1673) at 30", "Insert MethodDeclaration(1629) into TypeDeclaration: class(1673) at 31", "Insert MethodDeclaration(1672) into TypeDeclaration: class(1673) at 32", "Insert Javadoc(1440) into MethodDeclaration(1465) at 0", "Insert Modifier: private(1441) into MethodDeclaration(1465) at 1", "Insert Modifier: static(1442) into MethodDeclaration(1465) at 2", "Insert SimpleType: String(1444) into MethodDeclaration(1465) at 3", "Insert SimpleName: unicodeToASCII(1445) into MethodDeclaration(1465) at 4", "Insert SingleVariableDeclaration(1449) into MethodDeclaration(1465) at 5", "Insert Block(1464) into MethodDeclaration(1465) at 6", "Insert Modifier: private(1466) into TypeDeclaration: class(1524) at 0", "Insert Modifier: static(1467) into TypeDeclaration: class(1524) at 1", "Insert SimpleName: IDNHolder(1468) into TypeDeclaration: class(1524) at 2", "Insert MethodDeclaration(1514) into TypeDeclaration: class(1524) at 3", "Insert FieldDeclaration(1523) into TypeDeclaration: class(1524) at 4", "Insert Modifier: static(1525) into MethodDeclaration(1533) at 0", "Insert Modifier: final(1526) into MethodDeclaration(1533) at 1", "Insert SimpleType: Method(1528) into MethodDeclaration(1533) at 2", "Insert SimpleName: getIDNMethod(1529) into MethodDeclaration(1533) at 3", "Insert Block(1532) into MethodDeclaration(1533) at 4", "Insert Modifier: private(1534) into MethodDeclaration(1629) at 0", "Insert Modifier: static(1535) into MethodDeclaration(1629) at 1", "Insert Modifier: final(1536) into MethodDeclaration(1629) at 2", "Insert SimpleType: String(1538) into MethodDeclaration(1629) at 3", "Insert SimpleName: toASCII(1539) into MethodDeclaration(1629) at 4", "Insert SingleVariableDeclaration(1543) into MethodDeclaration(1629) at 5", "Insert SimpleType: IllegalArgumentException(1545) into MethodDeclaration(1629) at 6", "Insert Block(1628) into MethodDeclaration(1629) at 7", "Insert Modifier: private(1630) into MethodDeclaration(1672) at 0", "Insert Modifier: static(1631) into MethodDeclaration(1672) at 1", "Insert PrimitiveType: boolean(1632) into MethodDeclaration(1672) at 2", "Insert SimpleName: isOnlyASCII(1633) into MethodDeclaration(1672) at 3", "Insert SingleVariableDeclaration(1637) into MethodDeclaration(1672) at 4", "Insert Block(1671) into MethodDeclaration(1672) at 5", "Insert ExpressionStatement(266) into Block(300) at 1", "Insert ExpressionStatement(327) into Block(353) at 1", "Insert ExpressionStatement(377) into Block(398) at 0", "Insert ExpressionStatement(422) into Block(437) at 0", "Insert ExpressionStatement(461) into Block(475) at 0", "Insert ExpressionStatement(499) into Block(513) at 0", "Update SimpleName: iTld(490) to lTld", "Insert ExpressionStatement(537) into Block(551) at 0", "Insert TagElement(1434) into Javadoc(1440) at 0", "Insert TagElement: @param(1437) into Javadoc(1440) at 1", "Insert TagElement: @return(1439) into Javadoc(1440) at 2", "Insert SimpleName: String(1443) into SimpleType: String(1444) at 0", "Insert SimpleType: String(1447) into SingleVariableDeclaration(1449) at 0", "Insert SimpleName: input(1448) into SingleVariableDeclaration(1449) at 1", "Insert TryStatement(1463) into Block(1464) at 0", "Insert Modifier: private(1469) into MethodDeclaration(1514) at 0", "Insert Modifier: static(1470) into MethodDeclaration(1514) at 1", "Insert SimpleType: Method(1472) into MethodDeclaration(1514) at 2", "Insert SimpleName: getMethod(1473) into MethodDeclaration(1514) at 3", "Insert Block(1513) into MethodDeclaration(1514) at 4", "Insert Modifier: static(1515) into FieldDeclaration(1523) at 0", "Insert Modifier: final(1516) into FieldDeclaration(1523) at 1", "Insert SimpleType: Method(1518) into FieldDeclaration(1523) at 2", "Insert VariableDeclarationFragment(1522) into FieldDeclaration(1523) at 3", "Insert SimpleName: Method(1527) into SimpleType: Method(1528) at 0", "Insert ReturnStatement(1531) into Block(1532) at 0", "Insert SimpleName: String(1537) into SimpleType: String(1538) at 0", "Insert SimpleType: String(1541) into SingleVariableDeclaration(1543) at 0", "Insert SimpleName: line(1542) into SingleVariableDeclaration(1543) at 1", "Insert SimpleName: IllegalArgumentException(1544) into SimpleType: IllegalArgumentException(1545) at 0", "Insert IfStatement(1552) into Block(1628) at 0", "Insert VariableDeclarationStatement(1559) into Block(1628) at 1", "Insert IfStatement(1566) into Block(1628) at 2", "Insert TryStatement(1627) into Block(1628) at 3", "Insert SimpleType: String(1635) into SingleVariableDeclaration(1637) at 0", "Insert SimpleName: input(1636) into SingleVariableDeclaration(1637) at 1", "Insert IfStatement(1644) into Block(1671) at 0", "Insert ForStatement(1668) into Block(1671) at 1", "Insert ReturnStatement(1670) into Block(1671) at 2", "Insert Assignment: =(265) into ExpressionStatement(266) at 0", "Insert Assignment: =(326) into ExpressionStatement(327) at 0", "Update TextElement:  the parameter to check for TLD status(344) to  the parameter to check for TLD status, not null", "Insert Assignment: =(376) into ExpressionStatement(377) at 0", "Update TextElement:  the parameter to check for infrastructure TLD status(383) to  the parameter to check for infrastructure TLD status, not null", "Insert Assignment: =(421) into ExpressionStatement(422) at 0", "Update TextElement:  the parameter to check for generic TLD status(416) to  the parameter to check for generic TLD status, not null", "Insert Assignment: =(460) into ExpressionStatement(461) at 0", "Update TextElement:  the parameter to check for country code TLD status(448) to  the parameter to check for country code TLD status, not null", "Insert Assignment: =(498) into ExpressionStatement(499) at 0", "Update SimpleName: iTld(479) to lTld", "Update TextElement:  the parameter to check for local TLD status(480) to  the parameter to check for local TLD status, not null", "Insert Assignment: =(536) into ExpressionStatement(537) at 0", "Insert TextElement: Converts potentially Unicode input to punycode.(1432) into TagElement(1434) at 0", "Insert TextElement: If conversion fails, returns the original input.(1433) into TagElement(1434) at 1", "Insert SimpleName: input(1435) into TagElement: @param(1437) at 0", "Insert TextElement:  the string to convert, not null(1436) into TagElement: @param(1437) at 1", "Insert TextElement:  converted input, or original input if conversion fails(1438) into TagElement: @return(1439) at 0", "Insert SimpleName: String(1446) into SimpleType: String(1447) at 0", "Insert Block(1454) into TryStatement(1463) at 0", "Insert CatchClause(1462) into TryStatement(1463) at 1", "Insert SimpleName: Method(1471) into SimpleType: Method(1472) at 0", "Insert TryStatement(1512) into Block(1513) at 0", "Insert SimpleName: Method(1517) into SimpleType: Method(1518) at 0", "Insert SimpleName: javaNetIDNtoAscii(1519) into VariableDeclarationFragment(1522) at 0", "Insert MethodInvocation(1521) into VariableDeclarationFragment(1522) at 1", "Insert QualifiedName: IDNHolder.javaNetIDNtoAscii(1530) into ReturnStatement(1531) at 0", "Insert SimpleName: String(1540) into SimpleType: String(1541) at 0", "Insert MethodInvocation(1548) into IfStatement(1552) at 0", "Insert Block(1551) into IfStatement(1552) at 1", "Insert SimpleType: Method(1554) into VariableDeclarationStatement(1559) at 0", "Insert VariableDeclarationFragment(1558) into VariableDeclarationStatement(1559) at 1", "Insert InfixExpression: ==(1562) into IfStatement(1566) at 0", "Insert Block(1565) into IfStatement(1566) at 1", "Insert Block(1585) into TryStatement(1627) at 0", "Insert CatchClause(1596) into TryStatement(1627) at 1", "Insert CatchClause(1626) into TryStatement(1627) at 2", "Insert SimpleName: String(1634) into SimpleType: String(1635) at 0", "Insert InfixExpression: ==(1640) into IfStatement(1644) at 0", "Insert Block(1643) into IfStatement(1644) at 1", "Insert VariableDeclarationExpression(1649) into ForStatement(1668) at 0", "Insert InfixExpression: <(1654) into ForStatement(1668) at 1", "Insert PostfixExpression: ++(1656) into ForStatement(1668) at 2", "Insert Block(1667) into ForStatement(1668) at 3", "Insert BooleanLiteral: true(1669) into ReturnStatement(1670) at 0", "Insert SimpleName: domain(261) into Assignment: =(265) at 0", "Insert MethodInvocation(264) into Assignment: =(265) at 1", "Insert SimpleName: domain(322) into Assignment: =(326) at 0", "Insert MethodInvocation(325) into Assignment: =(326) at 1", "Insert SimpleName: tld(372) into Assignment: =(376) at 0", "Insert MethodInvocation(375) into Assignment: =(376) at 1", "Insert SimpleName: iTld(417) into Assignment: =(421) at 0", "Insert MethodInvocation(420) into Assignment: =(421) at 1", "Insert SimpleName: gTld(456) into Assignment: =(460) at 0", "Insert MethodInvocation(459) into Assignment: =(460) at 1", "Insert SimpleName: ccTld(494) into Assignment: =(498) at 0", "Insert MethodInvocation(497) into Assignment: =(498) at 1", "Insert SimpleName: lTld(532) into Assignment: =(536) at 0", "Insert MethodInvocation(535) into Assignment: =(536) at 1", "Insert ReturnStatement(1453) into Block(1454) at 0", "Insert SingleVariableDeclaration(1458) into CatchClause(1462) at 0", "Insert Block(1461) into CatchClause(1462) at 1", "Insert Block(1503) into TryStatement(1512) at 0", "Insert CatchClause(1511) into TryStatement(1512) at 1", "Insert SimpleName: getMethod(1520) into MethodInvocation(1521) at 0", "Insert SimpleName: isOnlyASCII(1546) into MethodInvocation(1548) at 0", "Insert SimpleName: line(1547) into MethodInvocation(1548) at 1", "Insert ReturnStatement(1550) into Block(1551) at 0", "Insert SimpleName: Method(1553) into SimpleType: Method(1554) at 0", "Insert SimpleName: m(1555) into VariableDeclarationFragment(1558) at 0", "Insert MethodInvocation(1557) into VariableDeclarationFragment(1558) at 1", "Insert SimpleName: m(1560) into InfixExpression: ==(1562) at 0", "Insert NullLiteral(1561) into InfixExpression: ==(1562) at 1", "Insert ReturnStatement(1564) into Block(1565) at 0", "Insert ReturnStatement(1584) into Block(1585) at 0", "Insert SingleVariableDeclaration(1589) into CatchClause(1596) at 0", "Insert Block(1595) into CatchClause(1596) at 1", "Insert SingleVariableDeclaration(1600) into CatchClause(1626) at 0", "Insert Block(1625) into CatchClause(1626) at 1", "Insert SimpleName: input(1638) into InfixExpression: ==(1640) at 0", "Insert NullLiteral(1639) into InfixExpression: ==(1640) at 1", "Insert ReturnStatement(1642) into Block(1643) at 0", "Insert PrimitiveType: int(1645) into VariableDeclarationExpression(1649) at 0", "Insert VariableDeclarationFragment(1648) into VariableDeclarationExpression(1649) at 1", "Insert SimpleName: i(1650) into InfixExpression: <(1654) at 0", "Insert MethodInvocation(1653) into InfixExpression: <(1654) at 1", "Insert SimpleName: i(1655) into PostfixExpression: ++(1656) at 0", "Insert IfStatement(1666) into Block(1667) at 0", "Insert SimpleName: unicodeToASCII(262) into MethodInvocation(264) at 0", "Insert SimpleName: domain(263) into MethodInvocation(264) at 1", "Insert SimpleName: unicodeToASCII(323) into MethodInvocation(325) at 0", "Insert SimpleName: domain(324) into MethodInvocation(325) at 1", "Insert SimpleName: unicodeToASCII(373) into MethodInvocation(375) at 0", "Insert SimpleName: tld(374) into MethodInvocation(375) at 1", "Insert SimpleName: unicodeToASCII(418) into MethodInvocation(420) at 0", "Insert SimpleName: iTld(419) into MethodInvocation(420) at 1", "Insert SimpleName: unicodeToASCII(457) into MethodInvocation(459) at 0", "Insert SimpleName: gTld(458) into MethodInvocation(459) at 1", "Insert SimpleName: unicodeToASCII(495) into MethodInvocation(497) at 0", "Insert SimpleName: ccTld(496) into MethodInvocation(497) at 1", "Insert SimpleName: unicodeToASCII(533) into MethodInvocation(535) at 0", "Insert SimpleName: lTld(534) into MethodInvocation(535) at 1", "Insert MethodInvocation(1452) into ReturnStatement(1453) at 0", "Insert SimpleType: IllegalArgumentException(1456) into SingleVariableDeclaration(1458) at 0", "Insert SimpleName: e(1457) into SingleVariableDeclaration(1458) at 1", "Insert ReturnStatement(1460) into Block(1461) at 0", "Insert VariableDeclarationStatement(1488) into Block(1503) at 0", "Insert ReturnStatement(1502) into Block(1503) at 1", "Insert SingleVariableDeclaration(1507) into CatchClause(1511) at 0", "Insert Block(1510) into CatchClause(1511) at 1", "Insert SimpleName: line(1549) into ReturnStatement(1550) at 0", "Insert SimpleName: getIDNMethod(1556) into MethodInvocation(1557) at 0", "Insert SimpleName: line(1563) into ReturnStatement(1564) at 0", "Insert CastExpression(1583) into ReturnStatement(1584) at 0", "Insert SimpleType: IllegalAccessException(1587) into SingleVariableDeclaration(1589) at 0", "Insert SimpleName: e(1588) into SingleVariableDeclaration(1589) at 1", "Insert ThrowStatement(1594) into Block(1595) at 0", "Insert SimpleType: InvocationTargetException(1598) into SingleVariableDeclaration(1600) at 0", "Insert SimpleName: e(1599) into SingleVariableDeclaration(1600) at 1", "Insert VariableDeclarationStatement(1608) into Block(1625) at 0", "Insert IfStatement(1619) into Block(1625) at 1", "Insert ThrowStatement(1624) into Block(1625) at 2", "Insert BooleanLiteral: true(1641) into ReturnStatement(1642) at 0", "Insert SimpleName: i(1646) into VariableDeclarationFragment(1648) at 0", "Insert NumberLiteral: 0(1647) into VariableDeclarationFragment(1648) at 1", "Insert SimpleName: input(1651) into MethodInvocation(1653) at 0", "Insert SimpleName: length(1652) into MethodInvocation(1653) at 1", "Insert InfixExpression: >(1662) into IfStatement(1666) at 0", "Insert Block(1665) into IfStatement(1666) at 1", "Insert SimpleName: toASCII(1450) into MethodInvocation(1452) at 0", "Insert SimpleName: input(1451) into MethodInvocation(1452) at 1", "Insert SimpleName: IllegalArgumentException(1455) into SimpleType: IllegalArgumentException(1456) at 0", "Insert SimpleName: input(1459) into ReturnStatement(1460) at 0", "Insert SimpleType: Class(1475) into VariableDeclarationStatement(1488) at 0", "Insert VariableDeclarationFragment(1487) into VariableDeclarationStatement(1488) at 1", "Insert MethodInvocation(1501) into ReturnStatement(1502) at 0", "Insert SimpleType: Exception(1505) into SingleVariableDeclaration(1507) at 0", "Insert SimpleName: e(1506) into SingleVariableDeclaration(1507) at 1", "Insert ReturnStatement(1509) into Block(1510) at 0", "Insert SimpleType: String(1568) into CastExpression(1583) at 0", "Insert MethodInvocation(1582) into CastExpression(1583) at 1", "Insert SimpleName: IllegalAccessException(1586) into SimpleType: IllegalAccessException(1587) at 0", "Insert ClassInstanceCreation(1593) into ThrowStatement(1594) at 0", "Insert SimpleName: InvocationTargetException(1597) into SimpleType: InvocationTargetException(1598) at 0", "Insert SimpleType: Throwable(1602) into VariableDeclarationStatement(1608) at 0", "Insert VariableDeclarationFragment(1607) into VariableDeclarationStatement(1608) at 1", "Insert InstanceofExpression(1612) into IfStatement(1619) at 0", "Insert Block(1618) into IfStatement(1619) at 1", "Insert ClassInstanceCreation(1623) into ThrowStatement(1624) at 0", "Insert MethodInvocation(1660) into InfixExpression: >(1662) at 0", "Insert NumberLiteral: 0x7F(1661) into InfixExpression: >(1662) at 1", "Insert ReturnStatement(1664) into Block(1665) at 0", "Update SimpleName: iTld(496) to lTld", "Insert SimpleName: Class(1474) into SimpleType: Class(1475) at 0", "Insert SimpleName: clazz(1476) into VariableDeclarationFragment(1487) at 0", "Insert MethodInvocation(1486) into VariableDeclarationFragment(1487) at 1", "Insert SimpleName: clazz(1489) into MethodInvocation(1501) at 0", "Insert SimpleName: getDeclaredMethod(1490) into MethodInvocation(1501) at 1", "Insert StringLiteral: \"toASCII\"(1491) into MethodInvocation(1501) at 2", "Insert ArrayCreation(1500) into MethodInvocation(1501) at 3", "Insert SimpleName: Exception(1504) into SimpleType: Exception(1505) at 0", "Insert NullLiteral(1508) into ReturnStatement(1509) at 0", "Insert SimpleName: String(1567) into SimpleType: String(1568) at 0", "Insert SimpleName: m(1569) into MethodInvocation(1582) at 0", "Insert SimpleName: invoke(1570) into MethodInvocation(1582) at 1", "Insert NullLiteral(1571) into MethodInvocation(1582) at 2", "Insert ArrayCreation(1581) into MethodInvocation(1582) at 3", "Insert SimpleType: RuntimeException(1591) into ClassInstanceCreation(1593) at 0", "Insert SimpleName: e(1592) into ClassInstanceCreation(1593) at 1", "Insert SimpleName: Throwable(1601) into SimpleType: Throwable(1602) at 0", "Insert SimpleName: t(1603) into VariableDeclarationFragment(1607) at 0", "Insert MethodInvocation(1606) into VariableDeclarationFragment(1607) at 1", "Insert SimpleName: t(1609) into InstanceofExpression(1612) at 0", "Insert SimpleType: IllegalArgumentException(1611) into InstanceofExpression(1612) at 1", "Insert ThrowStatement(1617) into Block(1618) at 0", "Insert SimpleType: RuntimeException(1621) into ClassInstanceCreation(1623) at 0", "Insert SimpleName: e(1622) into ClassInstanceCreation(1623) at 1", "Insert SimpleName: input(1657) into MethodInvocation(1660) at 0", "Insert SimpleName: charAt(1658) into MethodInvocation(1660) at 1", "Insert SimpleName: i(1659) into MethodInvocation(1660) at 2", "Insert BooleanLiteral: false(1663) into ReturnStatement(1664) at 0", "Insert SimpleName: Class(1477) into MethodInvocation(1486) at 0", "Insert SimpleName: forName(1478) into MethodInvocation(1486) at 1", "Insert StringLiteral: \"java.net.IDN\"(1479) into MethodInvocation(1486) at 2", "Insert BooleanLiteral: false(1480) into MethodInvocation(1486) at 3", "Insert MethodInvocation(1485) into MethodInvocation(1486) at 4", "Insert ArrayType: Class[](1495) into ArrayCreation(1500) at 0", "Insert ArrayInitializer(1499) into ArrayCreation(1500) at 1", "Insert ArrayType: String[](1575) into ArrayCreation(1581) at 0", "Insert ArrayInitializer(1580) into ArrayCreation(1581) at 1", "Insert SimpleName: RuntimeException(1590) into SimpleType: RuntimeException(1591) at 0", "Insert SimpleName: e(1604) into MethodInvocation(1606) at 0", "Insert SimpleName: getCause(1605) into MethodInvocation(1606) at 1", "Insert SimpleName: IllegalArgumentException(1610) into SimpleType: IllegalArgumentException(1611) at 0", "Insert CastExpression(1616) into ThrowStatement(1617) at 0", "Insert SimpleName: RuntimeException(1620) into SimpleType: RuntimeException(1621) at 0", "Insert TypeLiteral(1483) into MethodInvocation(1485) at 0", "Insert SimpleName: getClassLoader(1484) into MethodInvocation(1485) at 1", "Insert SimpleType: Class(1493) into ArrayType: Class[](1495) at 0", "Insert Dimension(1494) into ArrayType: Class[](1495) at 1", "Insert TypeLiteral(1498) into ArrayInitializer(1499) at 0", "Insert SimpleType: String(1573) into ArrayType: String[](1575) at 0", "Insert Dimension(1574) into ArrayType: String[](1575) at 1", "Insert MethodInvocation(1579) into ArrayInitializer(1580) at 0", "Insert SimpleType: IllegalArgumentException(1614) into CastExpression(1616) at 0", "Insert SimpleName: t(1615) into CastExpression(1616) at 1", "Insert SimpleType: DomainValidatorTest(1482) into TypeLiteral(1483) at 0", "Insert SimpleName: Class(1492) into SimpleType: Class(1493) at 0", "Insert SimpleType: String(1497) into TypeLiteral(1498) at 0", "Insert SimpleName: String(1572) into SimpleType: String(1573) at 0", "Insert SimpleName: line(1576) into MethodInvocation(1579) at 0", "Insert SimpleName: toLowerCase(1577) into MethodInvocation(1579) at 1", "Insert QualifiedName: Locale.ENGLISH(1578) into MethodInvocation(1579) at 2", "Insert SimpleName: IllegalArgumentException(1613) into SimpleType: IllegalArgumentException(1614) at 0", "Insert SimpleName: DomainValidatorTest(1481) into SimpleType: DomainValidatorTest(1482) at 0", "Insert SimpleName: String(1496) into SimpleType: String(1497) at 0"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}