{"application": "google-closure-compiler", "csha": "39184a66950fe7ca510210943f68f7ede7af7b6d", "files": [{"DefaultPassConfig_cluster": {"actions": [{"root": "INS SimpleName: useTypesForOptimization to ClassInstanceCreation at 2", "operations": ["INS SimpleName: useTypesForOptimization to ClassInstanceCreation at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 1", "INS SimpleName: useTypesForOptimization to VariableDeclarationFragment at 0", "INS QualifiedName: options.useTypesForLocalOptimization to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2"]}, {"root": "INS SimpleName: useTypesForOptimization to ClassInstanceCreation at 2", "operations": ["INS SimpleName: useTypesForOptimization to ClassInstanceCreation at 2"]}, {"root": "INS SimpleName: useTypesForOptimization to ClassInstanceCreation at 2", "operations": ["INS SimpleName: useTypesForOptimization to ClassInstanceCreation at 2"]}, {"root": "INS SimpleName: useTypesForOptimization to ClassInstanceCreation at 2", "operations": ["INS SimpleName: useTypesForOptimization to ClassInstanceCreation at 2"]}, {"root": "DEL QualifiedName: options.useTypesForLocalOptimization", "operations": ["DEL QualifiedName: options.useTypesForLocalOptimization"]}, {"root": "DEL QualifiedName: options.useTypesForLocalOptimization", "operations": ["DEL QualifiedName: options.useTypesForLocalOptimization"]}]}}, {"DefaultPassConfig_diff": {"operations": ["Insert SimpleName: useTypesForOptimization(4083) into ClassInstanceCreation(4084) at 2", "Insert VariableDeclarationStatement(4197) into Block(4232) at 1", "Insert Modifier: final(4192) into VariableDeclarationStatement(4197) at 0", "Insert PrimitiveType: boolean(4193) into VariableDeclarationStatement(4197) at 1", "Insert VariableDeclarationFragment(4196) into VariableDeclarationStatement(4197) at 2", "Insert SimpleName: useTypesForOptimization(4194) into VariableDeclarationFragment(4196) at 0", "Insert QualifiedName: options.useTypesForLocalOptimization(4195) into VariableDeclarationFragment(4196) at 1", "Insert SimpleName: useTypesForOptimization(4211) into ClassInstanceCreation(4212) at 2", "Insert SimpleName: useTypesForOptimization(4220) into ClassInstanceCreation(4221) at 2", "Insert SimpleName: useTypesForOptimization(4225) into ClassInstanceCreation(4226) at 2", "Delete QualifiedName: options.useTypesForLocalOptimization(4204)", "Delete QualifiedName: options.useTypesForLocalOptimization(4217)"]}}, {"ExpandJqueryAliases_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 5", "operations": ["INS SimpleName: Node to SimpleType: Node at 0", "INS VariableDeclarationStatement to Block at 5", "INS SimpleType: Node to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS VariableDeclarationStatement to Block at 2", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS ParenthesizedExpression to InfixExpression: || at 1", "operations": ["INS ParenthesizedExpression to InfixExpression: || at 1"]}, {"root": "INS SimpleName: useTypesForOptimization to ClassInstanceCreation at 2", "operations": ["INS SimpleName: useTypesForOptimization to ClassInstanceCreation at 2"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV InfixExpression: && to ParenthesizedExpression at 0"]}, {"root": "INS ParenthesizedExpression to InfixExpression: || at 1", "operations": ["INS ParenthesizedExpression to InfixExpression: || at 1"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV InfixExpression: && to ParenthesizedExpression at 0"]}]}}, {"ExpandJqueryAliases_diff": {"operations": ["Insert VariableDeclarationStatement(1271) into Block(1815) at 5", "Insert SimpleType: Node(1267) into VariableDeclarationStatement(1271) at 0", "Move VariableDeclarationFragment(1265) into VariableDeclarationStatement(1271) at 1", "Insert VariableDeclarationStatement(2112) into Block(2218) at 2", "Insert SimpleName: Node(1266) into SimpleType: Node(1267) at 0", "Insert SimpleType: String(2108) into VariableDeclarationStatement(2112) at 0", "Move VariableDeclarationFragment(2103) into VariableDeclarationStatement(2112) at 1", "Insert SimpleName: String(2107) into SimpleType: String(2108) at 0", "Insert ParenthesizedExpression(2305) into InfixExpression: ||(2306) at 1", "Insert SimpleName: useTypesForOptimization(213) into ClassInstanceCreation(214) at 2", "Move InfixExpression: &&(2296) into ParenthesizedExpression(2305) at 0", "Insert ParenthesizedExpression(315) into InfixExpression: ||(316) at 1", "Move InfixExpression: &&(313) into ParenthesizedExpression(315) at 0"]}}, {"PeepholeReplaceKnownMethods_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS PrimitiveType: boolean to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS SimpleName: useTypes to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS IfStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: isStringValueType to MethodInvocation at 1", "INS SimpleName: stringNode to MethodInvocation at 0", "INS StringLiteral: \"charAt\" to SwitchCase at 0", "INS IfStatement to Block at 7", "INS ReturnStatement to SwitchStatement at 4", "INS SwitchCase to SwitchStatement at 6", "INS SwitchStatement to Block at 0", "INS StringLiteral: \"substr\" to SwitchCase at 0", "INS IfStatement to IfStatement at 2", "INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: && to InfixExpression: && at 0", "INS IfStatement to IfStatement at 2", "INS SwitchCase to SwitchStatement at 2", "INS ReturnStatement to SwitchStatement at 2", "INS Block to IfStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ReturnStatement to SwitchStatement at 3", "INS InfixExpression: != to InfixExpression: && at 1", "INS SimpleName: callTarget to SingleVariableDeclaration at 1", "INS StringLiteral: \"substring\" to SwitchCase at 0", "INS StringLiteral: \"charCodeAt\" to SwitchCase at 0", "INS Block to MethodDeclaration at 6", "INS SwitchStatement to Block at 0", "INS Block to IfStatement at 1", "INS InfixExpression: != to InfixExpression: && at 1", "INS SwitchCase to SwitchStatement at 10", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SwitchCase to SwitchStatement at 8", "INS Block to IfStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS StringLiteral: \"lastIndexOf\" to SwitchCase at 0", "INS SimpleName: functionNameString to SwitchStatement at 0", "INS SimpleName: useTypes to InfixExpression: && at 0", "INS InfixExpression: && to InfixExpression: && at 0", "INS SimpleName: functionNameString to SwitchStatement at 0", "INS ReturnStatement to SwitchStatement at 9", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS MethodInvocation to InfixExpression: && at 1", "INS ReturnStatement to SwitchStatement at 7", "INS ReturnStatement to SwitchStatement at 11", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: getJSType to MethodInvocation at 1", "INS SwitchCase to SwitchStatement at 3", "INS SwitchCase to SwitchStatement at 4", "INS SimpleName: functionName to VariableDeclarationFragment at 0", "INS SimpleName: firstArg to InfixExpression: != at 0", "INS SwitchCase to SwitchStatement at 1", "INS SimpleName: getJSType to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SwitchCase to SwitchStatement at 1", "INS SimpleName: isStringLiteral to IfStatement at 0", "INS ReturnStatement to SwitchStatement at 5", "INS SimpleName: stringNode to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS Block to IfStatement at 2", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS StringLiteral: \"toLowerCase\" to SwitchCase at 0", "INS VariableDeclarationStatement to Block at 4", "INS SimpleName: isStringLiteral to VariableDeclarationFragment at 0", "INS StringLiteral: \"indexOf\" to SwitchCase at 0", "INS VariableDeclarationStatement to Block at 2", "INS StringLiteral: \"toUpperCase\" to SwitchCase at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS SimpleType: Node to MethodDeclaration at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to MethodDeclaration at 6", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: n to ReturnStatement at 0", "INS SimpleName: length to InfixExpression: == at 0", "INS SimpleName: callTarget to SingleVariableDeclaration at 1", "INS SimpleName: firstArg to SingleVariableDeclaration at 1", "INS InfixExpression: == to IfStatement at 0", "INS Modifier: private to MethodDeclaration at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ReturnStatement to Block at 1", "INS SimpleName: getChildCount to MethodInvocation at 1", "INS SimpleName: n to SingleVariableDeclaration at 1", "INS SimpleName: n to MethodInvocation at 0", "INS IfStatement to Block at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS NumberLiteral: 1 to InfixExpression: == at 1", "INS SimpleName: tryReplaceSubstrWithCharAt to MethodDeclaration at 2", "INS NumberLiteral: 3 to InfixExpression: == at 1", "INS SimpleName: length to VariableDeclarationFragment at 0", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS IfStatement to Block at 1", "INS Block to IfStatement at 1", "INS InfixExpression: != to IfStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS Block to IfStatement at 1", "INS IfStatement to Block at 0", "INS VariableDeclarationStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: maybeLength to InfixExpression: != at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleType: Node to SingleVariableDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS IfStatement to Block at 5", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: end to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: NodeUtil to MethodInvocation at 0", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS SimpleName: maybeStart to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 3", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: start to VariableDeclarationFragment at 0", "INS SimpleName: n to ReturnStatement at 0", "INS SimpleName: NodeUtil to MethodInvocation at 0", "INS Block to MethodDeclaration at 6", "INS VariableDeclarationStatement to Block at 7", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to InfixExpression: == at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: callTarget to SingleVariableDeclaration at 1", "INS InfixExpression: - to MethodInvocation at 2", "INS SimpleName: maybeEnd to InfixExpression: == at 0", "INS SimpleName: maybeEnd to VariableDeclarationFragment at 0", "INS NumberLiteral: 1 to InfixExpression: == at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 4", "INS VariableDeclarationStatement to Block at 6", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to IfStatement at 1", "INS SimpleName: Double to SimpleType: Double at 0", "INS IfStatement to Block at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: maybeEnd to MethodInvocation at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleName: firstArg to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 1", "INS NullLiteral to InfixExpression: == at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS SimpleName: maybeStart to InfixExpression: == at 0", "INS SimpleName: getNumberValue to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: intValue to MethodInvocation at 1", "INS SimpleName: end to InfixExpression: - at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleName: tryReplaceSubstringWithCharAt to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS SimpleName: firstArg to MethodInvocation at 2", "INS SimpleName: n to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 9", "INS SimpleType: Double to VariableDeclarationStatement at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleType: Node to MethodDeclaration at 1", "INS IfStatement to Block at 2", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: start to InfixExpression: - at 0", "INS SimpleName: Double to SimpleType: Double at 0", "INS SimpleType: Double to VariableDeclarationStatement at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS IfStatement to Block at 8", "INS SimpleName: Node to SimpleType: Node at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: useTypes to MethodInvocation at 3", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: secondArg to VariableDeclarationFragment at 0", "INS NumberLiteral: 3 to InfixExpression: != at 1", "INS SimpleName: getNumberValue to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 21", "operations": ["INS ExpressionStatement to Block at 1", "INS SimpleType: Node to MethodDeclaration at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS MethodInvocation to MethodInvocation at 0", "INS Block to MethodDeclaration at 6", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS ReturnStatement to Block at 5", "INS SimpleName: firstArg to MethodInvocation at 2", "INS SimpleName: n to MethodInvocation at 0", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleName: n to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setString to MethodInvocation at 1", "INS SimpleName: callTarget to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS SimpleName: n to ReturnStatement at 0", "INS SimpleName: firstArg to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS ExpressionStatement to Block at 3", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS SimpleName: detachChildren to MethodInvocation at 1", "INS SimpleName: replaceWithCharAt to MethodDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SimpleName: useTypes to SingleVariableDeclaration at 1", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV SimpleType: Node to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Modifier: private to MethodDeclaration at 1", "MOV SimpleName: tryFoldKnownStringMethods to MethodDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: callTarget to SingleVariableDeclaration at 1", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: useTypes to Assignment: = at 1", "INS SimpleName: useTypes to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 6", "MOV ExpressionStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 5", "MOV IfStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 1", "MOV ReturnStatement to Block at 8"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2", "INS SimpleName: checkArgument to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Preconditions to MethodInvocation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 4"]}, {"root": "INS VariableDeclarationStatement to Block at 6", "operations": ["INS SimpleType: Double to VariableDeclarationStatement at 0", "INS SimpleName: Double to SimpleType: Double at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 6", "INS SimpleName: maybeStart to VariableDeclarationFragment at 0", "INS SimpleName: getNumberValue to MethodInvocation at 1", "INS SimpleName: NodeUtil to MethodInvocation at 0"]}, {"root": "INS IfStatement to Block at 7", "operations": ["INS InfixExpression: != to IfStatement at 0", "INS SimpleName: maybeStart to InfixExpression: != at 0", "INS IfStatement to Block at 7", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Preconditions to MethodInvocation at 0", "INS SimpleName: checkArgument to MethodInvocation at 1", "INS ExpressionStatement to Block at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS VariableDeclarationStatement to Block at 4", "INS PrimitiveType: int to VariableDeclarationStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 6", "operations": ["INS SimpleName: NodeUtil to MethodInvocation at 0", "INS SimpleType: Double to VariableDeclarationStatement at 0", "INS SimpleName: maybeStart to VariableDeclarationFragment at 0", "INS SimpleName: Double to SimpleType: Double at 0", "INS SimpleName: getNumberValue to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 6", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS IfStatement to Block at 7", "operations": ["INS InfixExpression: != to IfStatement at 0", "INS IfStatement to Block at 7", "INS SimpleName: maybeStart to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4"]}, {"root": "MOVE from SimpleType: Node", "operations": ["MOV SimpleName: Node to SimpleType: Node at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Node to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2", "MOV Block to IfStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV Block to IfStatement at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV Block to IfStatement at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: callTarget to MethodInvocation at 2", "INS SimpleName: n to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: addChildToFront to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: reportCodeChange to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV InfixExpression: != to MethodInvocation at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: NodeUtil to MethodInvocation at 0", "INS SimpleName: getNumberValue to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: Double to SimpleType: Double at 0", "INS SimpleName: maybeLength to VariableDeclarationFragment at 0", "INS SimpleType: Double to VariableDeclarationStatement at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: maybeLength to InfixExpression: != at 0", "INS IfStatement to Block at 1", "INS InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV InfixExpression: != to MethodInvocation at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleType: Double to VariableDeclarationStatement at 0", "INS SimpleName: getNumberValue to MethodInvocation at 1", "INS SimpleName: Double to SimpleType: Double at 0", "INS SimpleName: maybeEnd to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: NodeUtil to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS InfixExpression: != to IfStatement at 0", "INS IfStatement to Block at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: maybeEnd to InfixExpression: != at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS SimpleName: n to ReturnStatement at 0", "INS ReturnStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleName: n to ReturnStatement at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0", "INS ConditionalExpression to MethodInvocation at 3", "INS SimpleName: start to InfixExpression: < at 0", "INS SimpleName: secondArg to ConditionalExpression at 2", "INS SimpleName: replaceWithCharAt to MethodInvocation at 0", "INS InfixExpression: < to ConditionalExpression at 0", "INS SimpleName: end to InfixExpression: < at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: callTarget to MethodInvocation at 2", "INS SimpleName: n to MethodInvocation at 1", "INS SimpleName: firstArg to ConditionalExpression at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: equals to MethodInvocation at 1", "MOV SimpleName: functionNameString to MethodInvocation at 0", "MOV StringLiteral: \"charAt\" to MethodInvocation at 2"]}, {"root": "UPDATE from functionNameString to n", "operations": ["UPD SimpleName: functionNameString from functionNameString to n", "UPD SimpleName: functionNameString from functionNameString to n", "UPD SimpleName: subtree from subtree to n"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: equals to MethodInvocation at 1", "MOV SimpleName: functionNameString to MethodInvocation at 0"]}, {"root": "UPDATE from equals to addChildToBack", "operations": ["UPD SimpleName: equals from equals to addChildToBack"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationStatement to Block at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0"]}, {"root": "INS IfStatement to IfStatement at 2", "operations": ["INS IfStatement to IfStatement at 2"]}, {"root": "UPDATE from subtree to callTarget", "operations": ["UPD SimpleName: subtree from subtree to callTarget", "UPD SimpleName: functionNameString from functionNameString to callTarget"]}, {"root": "UPDATE from equals to getLastChild", "operations": ["UPD SimpleName: equals from equals to getLastChild", "UPD SimpleName: getFirstChild from getFirstChild to getLastChild"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "INS SwitchStatement to Block at 0", "operations": ["INS SimpleName: functionNameString to SwitchStatement at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: subtree to MethodInvocation at 1", "INS StringLiteral: \"substr\" to SwitchCase at 0", "INS SimpleName: callTarget to MethodInvocation at 2", "INS SimpleName: tryReplaceSubstringWithCharAt to MethodInvocation at 0", "INS SwitchCase to SwitchStatement at 3", "INS SimpleName: subtree to MethodInvocation at 1", "INS SimpleName: firstArg to MethodInvocation at 3", "INS SwitchStatement to Block at 0", "INS ReturnStatement to SwitchStatement at 4", "INS ReturnStatement to SwitchStatement at 2", "INS SimpleName: callTarget to MethodInvocation at 2", "INS SimpleName: firstArg to MethodInvocation at 3", "INS StringLiteral: \"substring\" to SwitchCase at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SwitchCase to SwitchStatement at 1", "INS SimpleName: tryReplaceSubstrWithCharAt to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: isNumber to MethodInvocation at 3", "MOV SimpleName: arg1 to MethodInvocation at 2"]}, {"root": "UPDATE from isNumber to useTypes", "operations": ["UPD SimpleName: isNumber from isNumber to useTypes", "UPD SimpleName: equals from equals to useTypes", "UPD SimpleName: isNumber from isNumber to useTypes", "UPD SimpleName: isNumber from isNumber to useTypes", "UPD SimpleName: isNumber from isNumber to useTypes"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV Block to IfStatement at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: arg1 to MethodInvocation at 2", "MOV SimpleName: isNumber to MethodInvocation at 3"]}, {"root": "INS SimpleType: Double to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: Double to SimpleType: Double at 0", "INS SimpleType: Double to VariableDeclarationStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: functionNameString to MethodInvocation at 0", "MOV SimpleName: equals to MethodInvocation at 1"]}, {"root": "UPDATE from equals to getChildCount", "operations": ["UPD SimpleName: equals from equals to getChildCount"]}, {"root": "UPDATE from functionNameString to firstArg", "operations": ["UPD SimpleName: functionNameString from functionNameString to firstArg"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: functionNameString to MethodInvocation at 0", "MOV SimpleName: equals to MethodInvocation at 1"]}, {"root": "UPDATE from equals to getNext", "operations": ["UPD SimpleName: equals from equals to getNext"]}, {"root": "UPDATE from functionNameString to secondArg", "operations": ["UPD SimpleName: functionNameString from functionNameString to secondArg"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: equals to MethodInvocation at 3", "MOV SimpleName: functionNameString to MethodInvocation at 2"]}, {"root": "UPDATE from arg1 to maybeStart", "operations": ["UPD SimpleName: arg1 from arg1 to maybeStart", "UPD SimpleName: functionNameString from functionNameString to maybeStart", "UPD SimpleName: arg1 from arg1 to maybeStart"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: functionNameString to MethodInvocation at 0", "MOV SimpleName: equals to MethodInvocation at 1"]}, {"root": "UPDATE from getDouble to intValue", "operations": ["UPD SimpleName: getDouble from getDouble to intValue", "UPD SimpleName: getDouble from getDouble to intValue", "UPD SimpleName: getDouble from getDouble to intValue", "UPD SimpleName: getDouble from getDouble to intValue", "UPD SimpleName: equals from equals to intValue", "UPD SimpleName: equals from equals to intValue"]}, {"root": "UPDATE from functionNameString to Math", "operations": ["UPD SimpleName: functionNameString from functionNameString to Math"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: equals to MethodInvocation at 1", "MOV SimpleName: functionNameString to MethodInvocation at 0"]}, {"root": "UPDATE from equals to abs", "operations": ["UPD SimpleName: equals from equals to abs"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS MethodInvocation to Assignment: = at 1"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from functionName to maybeLength", "operations": ["UPD SimpleName: functionName from functionName to maybeLength", "UPD SimpleName: arg2 from arg2 to maybeLength", "UPD SimpleName: functionNameString from functionNameString to maybeLength"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from InfixExpression: !=", "operations": ["MOV NullLiteral to InfixExpression: != at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: arg1 to MethodInvocation at 0", "MOV SimpleName: getDouble to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: isNumber to MethodInvocation at 3", "MOV SimpleName: arg2 to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: arg1 to MethodInvocation at 0", "MOV SimpleName: getDouble to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: arg2 to MethodInvocation at 2", "MOV SimpleName: isNumber to MethodInvocation at 3"]}, {"root": "UPDATE from stringNode to NodeUtil", "operations": ["UPD SimpleName: stringNode from stringNode to NodeUtil"]}, {"root": "INS SimpleName: getNumberValue to MethodInvocation at 1", "operations": ["INS SimpleName: getNumberValue to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: firstArg to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS SimpleName: useTypes to MethodInvocation at 3", "operations": ["INS SimpleName: useTypes to MethodInvocation at 3"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS MethodInvocation to Assignment: = at 1"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getNext to MethodInvocation at 1"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS SimpleName: callTarget to MethodInvocation at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: n to MethodInvocation at 1", "INS SimpleName: firstArg to MethodInvocation at 3", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: replaceWithCharAt to MethodInvocation at 0"]}, {"root": "INS SimpleName: callTarget to MethodInvocation at 2", "operations": ["INS SimpleName: callTarget to MethodInvocation at 2"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getDouble to MethodInvocation at 1", "MOV SimpleName: arg2 to MethodInvocation at 0"]}, {"root": "UPDATE from arg2 to maybeEnd", "operations": ["UPD SimpleName: arg2 from arg2 to maybeEnd"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: arg2 to MethodInvocation at 0", "MOV SimpleName: getDouble to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: equals to MethodInvocation at 1", "MOV SimpleName: functionNameString to MethodInvocation at 0"]}, {"root": "INS SimpleName: callTarget to MethodInvocation at 2", "operations": ["INS SimpleName: callTarget to MethodInvocation at 2"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: getFirstChild", "DEL SimpleName: subtree", "DEL SimpleName: Node", "DEL VariableDeclarationFragment", "DEL SimpleName: callTarget", "DEL SimpleType: Node", "DEL MethodInvocation", "DEL VariableDeclarationStatement"]}, {"root": "DEL InfixExpression: ||", "operations": ["DEL ParenthesizedExpression", "DEL InfixExpression: ||", "DEL PrefixExpression: !", "DEL ParenthesizedExpression"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: subtree"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: subtree", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL StringLiteral: \"charCodeAt\"", "DEL PrefixExpression: !", "DEL IfStatement", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL IfStatement", "DEL IfStatement", "DEL StringLiteral: \"lastIndexOf\"", "DEL SimpleName: NodeUtil", "DEL IfStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL Block", "DEL StringLiteral: \"toLowerCase\"", "DEL SimpleName: callTarget", "DEL Block", "DEL SimpleName: subtree", "DEL Block", "DEL IfStatement", "DEL Block", "DEL InfixExpression: ||", "DEL StringLiteral: \"toUpperCase\"", "DEL Assignment: =", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL StringLiteral: \"substr\"", "DEL IfStatement", "DEL Block", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: callTarget", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: isGet", "DEL SimpleName: callTarget", "DEL MethodDeclaration", "DEL StringLiteral: \"indexOf\"", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleType: Node", "DEL MethodInvocation", "DEL StringLiteral: \"substring\"", "DEL SimpleName: subtree", "DEL IfStatement", "DEL IfStatement", "DEL IfStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: subtree", "DEL IfStatement", "DEL ReturnStatement", "DEL PrefixExpression: !", "DEL Block"]}, {"root": "DEL CastExpression", "operations": ["DEL PrimitiveType: int", "DEL MethodInvocation", "DEL CastExpression"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL InfixExpression: &&", "DEL IfStatement"]}, {"root": "DEL CastExpression", "operations": ["DEL PrimitiveType: int", "DEL MethodInvocation", "DEL CastExpression"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL MethodInvocation"]}, {"root": "DEL CastExpression", "operations": ["DEL CastExpression", "DEL PrimitiveType: int", "DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL InfixExpression: &&", "DEL IfStatement"]}, {"root": "DEL CastExpression", "operations": ["DEL CastExpression", "DEL MethodInvocation", "DEL PrimitiveType: int"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL IfStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: subtree"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: subtree", "DEL Assignment: =", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: subtree", "DEL Assignment: =", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: subtree", "DEL Assignment: =", "DEL ExpressionStatement"]}, {"root": "DEL Assignment: =", "operations": ["DEL Assignment: =", "DEL SimpleName: subtree"]}, {"root": "DEL Assignment: =", "operations": ["DEL Assignment: =", "DEL SimpleName: subtree"]}]}}, {"PeepholeReplaceKnownMethods_diff": {"operations": ["Insert FieldDeclaration(35) into TypeDeclaration: class(2958) at 4", "Insert MethodDeclaration(347) into TypeDeclaration: class(2958) at 8", "Insert MethodDeclaration(2142) into TypeDeclaration: class(2958) at 18", "Insert MethodDeclaration(2248) into TypeDeclaration: class(2958) at 19", "Insert MethodDeclaration(2292) into TypeDeclaration: class(2958) at 20", "Insert Modifier: private(30) into FieldDeclaration(35) at 0", "Insert Modifier: final(31) into FieldDeclaration(35) at 1", "Insert PrimitiveType: boolean(32) into FieldDeclaration(35) at 2", "Insert VariableDeclarationFragment(34) into FieldDeclaration(35) at 3", "Insert SingleVariableDeclaration(49) into MethodDeclaration(63) at 3", "Move Javadoc(131) into MethodDeclaration(347) at 0", "Move Modifier: private(132) into MethodDeclaration(347) at 1", "Move SimpleType: Node(134) into MethodDeclaration(347) at 2", "Move SimpleName: tryFoldKnownStringMethods(135) into MethodDeclaration(347) at 3", "Move SingleVariableDeclaration(139) into MethodDeclaration(347) at 4", "Insert SingleVariableDeclaration(164) into MethodDeclaration(347) at 5", "Insert Block(346) into MethodDeclaration(347) at 6", "Insert SingleVariableDeclaration(363) into MethodDeclaration(427) at 5", "Insert Modifier: private(2081) into MethodDeclaration(2142) at 0", "Insert SimpleType: Node(2083) into MethodDeclaration(2142) at 1", "Insert SimpleName: tryReplaceSubstrWithCharAt(2084) into MethodDeclaration(2142) at 2", "Insert SingleVariableDeclaration(2088) into MethodDeclaration(2142) at 3", "Insert SingleVariableDeclaration(2092) into MethodDeclaration(2142) at 4", "Insert SingleVariableDeclaration(2096) into MethodDeclaration(2142) at 5", "Insert Block(2141) into MethodDeclaration(2142) at 6", "Insert Modifier: private(2143) into MethodDeclaration(2248) at 0", "Insert SimpleType: Node(2145) into MethodDeclaration(2248) at 1", "Insert SimpleName: tryReplaceSubstringWithCharAt(2146) into MethodDeclaration(2248) at 2", "Insert SingleVariableDeclaration(2150) into MethodDeclaration(2248) at 3", "Insert SingleVariableDeclaration(2154) into MethodDeclaration(2248) at 4", "Insert SingleVariableDeclaration(2158) into MethodDeclaration(2248) at 5", "Insert Block(2247) into MethodDeclaration(2248) at 6", "Insert Modifier: private(2249) into MethodDeclaration(2292) at 0", "Insert SimpleType: Node(2251) into MethodDeclaration(2292) at 1", "Insert SimpleName: replaceWithCharAt(2252) into MethodDeclaration(2292) at 2", "Insert SingleVariableDeclaration(2256) into MethodDeclaration(2292) at 3", "Insert SingleVariableDeclaration(2260) into MethodDeclaration(2292) at 4", "Insert SingleVariableDeclaration(2264) into MethodDeclaration(2292) at 5", "Insert Block(2291) into MethodDeclaration(2292) at 6", "Insert SimpleName: useTypes(33) into VariableDeclarationFragment(34) at 0", "Insert PrimitiveType: boolean(47) into SingleVariableDeclaration(49) at 0", "Insert SimpleName: useTypes(48) into SingleVariableDeclaration(49) at 1", "Insert ExpressionStatement(61) into Block(62) at 1", "Insert SimpleType: Node(162) into SingleVariableDeclaration(164) at 0", "Insert SimpleName: callTarget(163) into SingleVariableDeclaration(164) at 1", "Move ExpressionStatement(146) into Block(346) at 0", "Move VariableDeclarationStatement(178) into Block(346) at 1", "Insert VariableDeclarationStatement(187) into Block(346) at 2", "Move IfStatement(201) into Block(346) at 3", "Insert VariableDeclarationStatement(202) into Block(346) at 4", "Move VariableDeclarationStatement(209) into Block(346) at 5", "Move VariableDeclarationStatement(217) into Block(346) at 6", "Insert IfStatement(343) into Block(346) at 7", "Move ReturnStatement(348) into Block(346) at 8", "Insert SimpleType: Node(361) into SingleVariableDeclaration(363) at 0", "Insert SimpleName: callTarget(362) into SingleVariableDeclaration(363) at 1", "Insert VariableDeclarationStatement(554) into Block(637) at 1", "Insert ExpressionStatement(1723) into Block(1881) at 2", "Insert VariableDeclarationStatement(1731) into Block(1881) at 4", "Insert VariableDeclarationStatement(1749) into Block(1881) at 6", "Insert IfStatement(1763) into Block(1881) at 7", "Insert ExpressionStatement(1922) into Block(2079) at 2", "Insert VariableDeclarationStatement(1930) into Block(2079) at 4", "Insert VariableDeclarationStatement(1948) into Block(2079) at 6", "Insert IfStatement(1962) into Block(2079) at 7", "Insert SimpleName: Node(2082) into SimpleType: Node(2083) at 0", "Insert SimpleType: Node(2086) into SingleVariableDeclaration(2088) at 0", "Insert SimpleName: n(2087) into SingleVariableDeclaration(2088) at 1", "Insert SimpleType: Node(2090) into SingleVariableDeclaration(2092) at 0", "Insert SimpleName: callTarget(2091) into SingleVariableDeclaration(2092) at 1", "Insert SimpleType: Node(2094) into SingleVariableDeclaration(2096) at 0", "Insert SimpleName: firstArg(2095) into SingleVariableDeclaration(2096) at 1", "Insert IfStatement(2138) into Block(2141) at 0", "Insert ReturnStatement(2140) into Block(2141) at 1", "Insert SimpleName: Node(2144) into SimpleType: Node(2145) at 0", "Insert SimpleType: Node(2148) into SingleVariableDeclaration(2150) at 0", "Insert SimpleName: n(2149) into SingleVariableDeclaration(2150) at 1", "Insert SimpleType: Node(2152) into SingleVariableDeclaration(2154) at 0", "Insert SimpleName: callTarget(2153) into SingleVariableDeclaration(2154) at 1", "Insert SimpleType: Node(2156) into SingleVariableDeclaration(2158) at 0", "Insert SimpleName: firstArg(2157) into SingleVariableDeclaration(2158) at 1", "Insert IfStatement(2167) into Block(2247) at 0", "Insert VariableDeclarationStatement(2177) into Block(2247) at 1", "Insert IfStatement(2184) into Block(2247) at 2", "Insert VariableDeclarationStatement(2192) into Block(2247) at 3", "Insert VariableDeclarationStatement(2202) into Block(2247) at 4", "Insert IfStatement(2209) into Block(2247) at 5", "Insert VariableDeclarationStatement(2216) into Block(2247) at 6", "Insert VariableDeclarationStatement(2223) into Block(2247) at 7", "Insert IfStatement(2244) into Block(2247) at 8", "Insert ReturnStatement(2246) into Block(2247) at 9", "Insert SimpleName: Node(2250) into SimpleType: Node(2251) at 0", "Insert SimpleType: Node(2254) into SingleVariableDeclaration(2256) at 0", "Insert SimpleName: n(2255) into SingleVariableDeclaration(2256) at 1", "Insert SimpleType: Node(2258) into SingleVariableDeclaration(2260) at 0", "Insert SimpleName: callTarget(2259) into SingleVariableDeclaration(2260) at 1", "Insert SimpleType: Node(2262) into SingleVariableDeclaration(2264) at 0", "Insert SimpleName: firstArg(2263) into SingleVariableDeclaration(2264) at 1", "Insert ExpressionStatement(2268) into Block(2291) at 0", "Insert ExpressionStatement(2275) into Block(2291) at 1", "Move ExpressionStatement(323) into Block(2291) at 2", "Insert ExpressionStatement(2285) into Block(2291) at 3", "Move ExpressionStatement(336) into Block(2291) at 4", "Insert ReturnStatement(2290) into Block(2291) at 5", "Insert Assignment: =(60) into ExpressionStatement(61) at 0", "Move SimpleName: Node(147) into SimpleType: Node(162) at 0", "Move SimpleType: Node(180) into VariableDeclarationStatement(187) at 0", "Insert VariableDeclarationFragment(186) into VariableDeclarationStatement(187) at 1", "Move PrefixExpression: !(195) into IfStatement(195) at 0", "Insert PrimitiveType: boolean(196) into VariableDeclarationStatement(202) at 0", "Insert VariableDeclarationFragment(201) into VariableDeclarationStatement(202) at 1", "Insert SimpleName: isStringLiteral(219) into IfStatement(343) at 0", "Insert Block(305) into IfStatement(343) at 1", "Insert IfStatement(342) into IfStatement(343) at 2", "Insert SimpleName: Node(360) into SimpleType: Node(361) at 0", "Insert PrimitiveType: int(550) into VariableDeclarationStatement(554) at 0", "Move VariableDeclarationFragment(568) into VariableDeclarationStatement(554) at 1", "Insert MethodInvocation(1722) into ExpressionStatement(1723) at 0", "Insert PrimitiveType: int(1728) into VariableDeclarationStatement(1731) at 0", "Move VariableDeclarationFragment(1734) into VariableDeclarationStatement(1731) at 1", "Insert SimpleType: Double(1741) into VariableDeclarationStatement(1749) at 0", "Insert VariableDeclarationFragment(1748) into VariableDeclarationStatement(1749) at 1", "Insert InfixExpression: !=(1752) into IfStatement(1763) at 0", "Move Block(1759) into IfStatement(1763) at 1", "Move Block(1762) into IfStatement(1763) at 2", "Insert MethodInvocation(1921) into ExpressionStatement(1922) at 0", "Insert PrimitiveType: int(1927) into VariableDeclarationStatement(1930) at 0", "Move VariableDeclarationFragment(1912) into VariableDeclarationStatement(1930) at 1", "Insert SimpleType: Double(1940) into VariableDeclarationStatement(1948) at 0", "Insert VariableDeclarationFragment(1947) into VariableDeclarationStatement(1948) at 1", "Insert InfixExpression: !=(1951) into IfStatement(1962) at 0", "Move Block(1937) into IfStatement(1962) at 1", "Move Block(1967) into IfStatement(1962) at 2", "Insert SimpleName: Node(2085) into SimpleType: Node(2086) at 0", "Insert SimpleName: Node(2089) into SimpleType: Node(2090) at 0", "Insert SimpleName: Node(2093) into SimpleType: Node(2094) at 0", "Insert InfixExpression: ==(2101) into IfStatement(2138) at 0", "Insert Block(2137) into IfStatement(2138) at 1", "Insert SimpleName: n(2139) into ReturnStatement(2140) at 0", "Insert SimpleName: Node(2147) into SimpleType: Node(2148) at 0", "Insert SimpleName: Node(2151) into SimpleType: Node(2152) at 0", "Insert SimpleName: Node(2155) into SimpleType: Node(2156) at 0", "Insert InfixExpression: !=(2163) into IfStatement(2167) at 0", "Move Block(257) into IfStatement(2167) at 1", "Insert SimpleType: Double(2169) into VariableDeclarationStatement(2177) at 0", "Insert VariableDeclarationFragment(2176) into VariableDeclarationStatement(2177) at 1", "Insert InfixExpression: ==(2180) into IfStatement(2184) at 0", "Insert Block(2183) into IfStatement(2184) at 1", "Insert SimpleType: Node(2186) into VariableDeclarationStatement(2192) at 0", "Insert VariableDeclarationFragment(2191) into VariableDeclarationStatement(2192) at 1", "Insert SimpleType: Double(2194) into VariableDeclarationStatement(2202) at 0", "Insert VariableDeclarationFragment(2201) into VariableDeclarationStatement(2202) at 1", "Insert InfixExpression: ==(2205) into IfStatement(2209) at 0", "Move Block(285) into IfStatement(2209) at 1", "Insert PrimitiveType: int(2210) into VariableDeclarationStatement(2216) at 0", "Insert VariableDeclarationFragment(2215) into VariableDeclarationStatement(2216) at 1", "Insert PrimitiveType: int(2217) into VariableDeclarationStatement(2223) at 0", "Insert VariableDeclarationFragment(2222) into VariableDeclarationStatement(2223) at 1", "Insert InfixExpression: ==(2231) into IfStatement(2244) at 0", "Move Block(311) into IfStatement(2244) at 1", "Insert SimpleName: n(2245) into ReturnStatement(2246) at 0", "Insert SimpleName: Node(2253) into SimpleType: Node(2254) at 0", "Insert SimpleName: Node(2257) into SimpleType: Node(2258) at 0", "Insert SimpleName: Node(2261) into SimpleType: Node(2262) at 0", "Insert MethodInvocation(2267) into ExpressionStatement(2268) at 0", "Insert MethodInvocation(2274) into ExpressionStatement(2275) at 0", "Insert MethodInvocation(2279) into ExpressionStatement(2280) at 0", "Insert MethodInvocation(2284) into ExpressionStatement(2285) at 0", "Insert MethodInvocation(2287) into ExpressionStatement(2288) at 0", "Insert SimpleName: n(2289) into ReturnStatement(2290) at 0", "Insert FieldAccess(58) into Assignment: =(60) at 0", "Insert SimpleName: useTypes(59) into Assignment: =(60) at 1", "Move VariableDeclarationStatement(379) into Block(143) at 0", "Insert SimpleName: functionName(182) into VariableDeclarationFragment(186) at 0", "Move MethodInvocation(152) into VariableDeclarationFragment(186) at 1", "Insert SimpleName: isStringLiteral(197) into VariableDeclarationFragment(201) at 0", "Move MethodInvocation(189) into VariableDeclarationFragment(201) at 1", "Insert IfStatement(304) into Block(305) at 0", "Insert InfixExpression: &&(322) into IfStatement(342) at 0", "Move Block(160) into IfStatement(342) at 1", "Insert SimpleName: Preconditions(1717) into MethodInvocation(1722) at 0", "Insert SimpleName: checkArgument(1718) into MethodInvocation(1722) at 1", "Move InfixExpression: !=(1746) into MethodInvocation(1722) at 2", "Insert SimpleName: Double(1740) into SimpleType: Double(1741) at 0", "Insert SimpleName: maybeStart(1742) into VariableDeclarationFragment(1748) at 0", "Insert MethodInvocation(1747) into VariableDeclarationFragment(1748) at 1", "Insert SimpleName: maybeStart(1750) into InfixExpression: !=(1752) at 0", "Insert NullLiteral(1751) into InfixExpression: !=(1752) at 1", "Insert VariableDeclarationStatement(1784) into Block(1808) at 0", "Insert IfStatement(1798) into Block(1808) at 1", "Insert SimpleName: Preconditions(1916) into MethodInvocation(1921) at 0", "Insert SimpleName: checkArgument(1917) into MethodInvocation(1921) at 1", "Move InfixExpression: !=(1924) into MethodInvocation(1921) at 2", "Insert SimpleName: Double(1939) into SimpleType: Double(1940) at 0", "Insert SimpleName: maybeStart(1941) into VariableDeclarationFragment(1947) at 0", "Insert MethodInvocation(1946) into VariableDeclarationFragment(1947) at 1", "Insert SimpleName: maybeStart(1949) into InfixExpression: !=(1951) at 0", "Insert NullLiteral(1950) into InfixExpression: !=(1951) at 1", "Insert VariableDeclarationStatement(1983) into Block(2007) at 0", "Insert IfStatement(1997) into Block(2007) at 1", "Insert MethodInvocation(2099) into InfixExpression: ==(2101) at 0", "Insert NumberLiteral: 3(2100) into InfixExpression: ==(2101) at 1", "Move VariableDeclarationStatement(186) into Block(2137) at 0", "Insert IfStatement(2136) into Block(2137) at 1", "Insert MethodInvocation(2161) into InfixExpression: !=(2163) at 0", "Insert NumberLiteral: 3(2162) into InfixExpression: !=(2163) at 1", "Insert ReturnStatement(2165) into Block(2166) at 0", "Insert SimpleName: Double(2168) into SimpleType: Double(2169) at 0", "Insert SimpleName: maybeStart(2170) into VariableDeclarationFragment(2176) at 0", "Insert MethodInvocation(2175) into VariableDeclarationFragment(2176) at 1", "Insert SimpleName: maybeStart(2178) into InfixExpression: ==(2180) at 0", "Insert NullLiteral(2179) into InfixExpression: ==(2180) at 1", "Move ReturnStatement(261) into Block(2183) at 0", "Insert SimpleName: Node(2185) into SimpleType: Node(2186) at 0", "Insert SimpleName: secondArg(2187) into VariableDeclarationFragment(2191) at 0", "Insert MethodInvocation(2190) into VariableDeclarationFragment(2191) at 1", "Insert SimpleName: Double(2193) into SimpleType: Double(2194) at 0", "Insert SimpleName: maybeEnd(2195) into VariableDeclarationFragment(2201) at 0", "Insert MethodInvocation(2200) into VariableDeclarationFragment(2201) at 1", "Insert SimpleName: maybeEnd(2203) into InfixExpression: ==(2205) at 0", "Insert NullLiteral(2204) into InfixExpression: ==(2205) at 1", "Insert ReturnStatement(2207) into Block(2208) at 0", "Insert SimpleName: start(2211) into VariableDeclarationFragment(2215) at 0", "Insert MethodInvocation(2214) into VariableDeclarationFragment(2215) at 1", "Insert SimpleName: end(2218) into VariableDeclarationFragment(2222) at 0", "Insert MethodInvocation(2221) into VariableDeclarationFragment(2222) at 1", "Insert MethodInvocation(2229) into InfixExpression: ==(2231) at 0", "Insert NumberLiteral: 1(2230) into InfixExpression: ==(2231) at 1", "Insert ReturnStatement(2242) into Block(2243) at 0", "Insert SimpleName: n(2265) into MethodInvocation(2267) at 0", "Insert SimpleName: detachChildren(2266) into MethodInvocation(2267) at 1", "Insert MethodInvocation(2271) into MethodInvocation(2274) at 0", "Insert SimpleName: setString(2272) into MethodInvocation(2274) at 1", "Move StringLiteral: \"charAt\"(314) into MethodInvocation(2274) at 2", "Insert SimpleName: n(2276) into MethodInvocation(2279) at 0", "Insert SimpleName: addChildToFront(2277) into MethodInvocation(2279) at 1", "Insert SimpleName: callTarget(2278) into MethodInvocation(2279) at 2", "Update SimpleName: functionNameString(325) to n", "Move SimpleName: functionNameString(325) into MethodInvocation(2284) at 0", "Update SimpleName: equals(326) to addChildToBack", "Move SimpleName: equals(326) into MethodInvocation(2284) at 1", "Insert SimpleName: firstArg(2283) into MethodInvocation(2284) at 2", "Insert SimpleName: reportCodeChange(2286) into MethodInvocation(2287) at 0", "Insert VariableDeclarationStatement(2696) into Block(2760) at 1", "Insert ThisExpression(56) into FieldAccess(58) at 0", "Insert SimpleName: useTypes(57) into FieldAccess(58) at 1", "Insert IfStatement(141) into IfStatement(142) at 2", "Update SimpleName: subtree(150) to callTarget", "Update SimpleName: getFirstChild(151) to getLastChild", "Move MethodInvocation(221) into IfStatement(304) at 0", "Move Block(230) into IfStatement(304) at 1", "Insert IfStatement(303) into IfStatement(304) at 2", "Insert InfixExpression: &&(316) into InfixExpression: &&(322) at 0", "Insert MethodInvocation(321) into InfixExpression: &&(322) at 1", "Insert SwitchStatement(340) into Block(341) at 0", "Insert SimpleName: NodeUtil(1743) into MethodInvocation(1747) at 0", "Insert SimpleName: getNumberValue(1744) into MethodInvocation(1747) at 1", "Move SimpleName: arg1(1747) into MethodInvocation(1747) at 2", "Update SimpleName: isNumber(1748) to useTypes", "Move SimpleName: isNumber(1748) into MethodInvocation(1747) at 3", "Insert SimpleType: Double(1776) into VariableDeclarationStatement(1784) at 0", "Insert VariableDeclarationFragment(1783) into VariableDeclarationStatement(1784) at 1", "Insert InfixExpression: !=(1787) into IfStatement(1798) at 0", "Move Block(1786) into IfStatement(1798) at 1", "Move Block(1789) into IfStatement(1798) at 2", "Insert SimpleName: NodeUtil(1942) into MethodInvocation(1946) at 0", "Insert SimpleName: getNumberValue(1943) into MethodInvocation(1946) at 1", "Move SimpleName: arg1(1925) into MethodInvocation(1946) at 2", "Update SimpleName: isNumber(1926) to useTypes", "Move SimpleName: isNumber(1926) into MethodInvocation(1946) at 3", "Insert SimpleType: Double(1975) into VariableDeclarationStatement(1983) at 0", "Insert VariableDeclarationFragment(1982) into VariableDeclarationStatement(1983) at 1", "Insert InfixExpression: !=(1986) into IfStatement(1997) at 0", "Move Block(1964) into IfStatement(1997) at 1", "Move Block(1940) into IfStatement(1997) at 2", "Insert SimpleName: n(2097) into MethodInvocation(2099) at 0", "Insert SimpleName: getChildCount(2098) into MethodInvocation(2099) at 1", "Insert SimpleType: Double(2103) into VariableDeclarationStatement(2113) at 0", "Insert InfixExpression: !=(2116) into IfStatement(2136) at 0", "Insert Block(2135) into IfStatement(2136) at 1", "Update SimpleName: functionNameString(246) to n", "Move SimpleName: functionNameString(246) into MethodInvocation(2161) at 0", "Update SimpleName: equals(247) to getChildCount", "Move SimpleName: equals(247) into MethodInvocation(2161) at 1", "Insert SimpleName: n(2164) into ReturnStatement(2165) at 0", "Insert SimpleName: NodeUtil(2171) into MethodInvocation(2175) at 0", "Insert SimpleName: getNumberValue(2172) into MethodInvocation(2175) at 1", "Insert SimpleName: firstArg(2173) into MethodInvocation(2175) at 2", "Insert SimpleName: useTypes(2174) into MethodInvocation(2175) at 3", "Update SimpleName: subtree(260) to n", "Update SimpleName: functionNameString(267) to firstArg", "Move SimpleName: functionNameString(267) into MethodInvocation(2190) at 0", "Update SimpleName: equals(268) to getNext", "Move SimpleName: equals(268) into MethodInvocation(2190) at 1", "Insert SimpleName: NodeUtil(2196) into MethodInvocation(2200) at 0", "Insert SimpleName: getNumberValue(2197) into MethodInvocation(2200) at 1", "Update SimpleName: functionNameString(271) to secondArg", "Move SimpleName: functionNameString(271) into MethodInvocation(2200) at 2", "Update SimpleName: equals(272) to useTypes", "Move SimpleName: equals(272) into MethodInvocation(2200) at 3", "Insert SimpleName: n(2206) into ReturnStatement(2207) at 0", "Update SimpleName: functionNameString(286) to maybeStart", "Move SimpleName: functionNameString(286) into MethodInvocation(2214) at 0", "Update SimpleName: equals(287) to intValue", "Move SimpleName: equals(287) into MethodInvocation(2214) at 1", "Insert SimpleName: maybeEnd(2219) into MethodInvocation(2221) at 0", "Insert SimpleName: intValue(2220) into MethodInvocation(2221) at 1", "Update SimpleName: functionNameString(299) to Math", "Move SimpleName: functionNameString(299) into MethodInvocation(2229) at 0", "Update SimpleName: equals(300) to abs", "Move SimpleName: equals(300) into MethodInvocation(2229) at 1", "Insert InfixExpression: -(2228) into MethodInvocation(2229) at 2", "Insert MethodInvocation(2241) into ReturnStatement(2242) at 0", "Update SimpleName: functionNameString(312) to callTarget", "Move SimpleName: functionNameString(312) into MethodInvocation(2271) at 0", "Update SimpleName: equals(313) to getLastChild", "Move SimpleName: equals(313) into MethodInvocation(2271) at 1", "Insert PrimitiveType: int(2693) into VariableDeclarationStatement(2696) at 0", "Move VariableDeclarationFragment(2452) into VariableDeclarationStatement(2696) at 1", "Move MethodInvocation(382) into IfStatement(141) at 0", "Move Block(120) into IfStatement(141) at 1", "Insert ReturnStatement(229) into Block(230) at 0", "Move InfixExpression: ==(233) into IfStatement(303) at 0", "Insert Block(250) into IfStatement(303) at 1", "Insert Block(302) into IfStatement(303) at 2", "Insert InfixExpression: &&(310) into InfixExpression: &&(316) at 0", "Insert InfixExpression: !=(315) into InfixExpression: &&(316) at 1", "Insert MethodInvocation(319) into MethodInvocation(321) at 0", "Insert SimpleName: isStringValueType(320) into MethodInvocation(321) at 1", "Insert SimpleName: functionNameString(323) into SwitchStatement(340) at 0", "Insert SwitchCase(325) into SwitchStatement(340) at 1", "Insert ReturnStatement(331) into SwitchStatement(340) at 2", "Insert SwitchCase(333) into SwitchStatement(340) at 3", "Insert ReturnStatement(339) into SwitchStatement(340) at 4", "Insert MethodInvocation(1756) into Assignment: =(1757) at 1", "Insert SimpleName: Double(1775) into SimpleType: Double(1776) at 0", "Insert SimpleName: maybeLength(1777) into VariableDeclarationFragment(1783) at 0", "Insert MethodInvocation(1782) into VariableDeclarationFragment(1783) at 1", "Insert SimpleName: maybeLength(1785) into InfixExpression: !=(1787) at 0", "Insert NullLiteral(1786) into InfixExpression: !=(1787) at 1", "Insert MethodInvocation(1955) into Assignment: =(1956) at 1", "Insert SimpleName: Double(1974) into SimpleType: Double(1975) at 0", "Insert SimpleName: maybeEnd(1976) into VariableDeclarationFragment(1982) at 0", "Insert MethodInvocation(1981) into VariableDeclarationFragment(1982) at 1", "Insert SimpleName: maybeEnd(1984) into InfixExpression: !=(1986) at 0", "Insert NullLiteral(1985) into InfixExpression: !=(1986) at 1", "Insert SimpleName: Double(2102) into SimpleType: Double(2103) at 0", "Update SimpleName: functionName(181) to maybeLength", "Insert SimpleName: maybeLength(2114) into InfixExpression: !=(2116) at 0", "Insert NullLiteral(2115) into InfixExpression: !=(2116) at 1", "Insert VariableDeclarationStatement(2123) into Block(2135) at 0", "Insert IfStatement(2134) into Block(2135) at 1", "Insert SimpleName: start(2226) into InfixExpression: -(2228) at 0", "Insert SimpleName: end(2227) into InfixExpression: -(2228) at 1", "Insert SimpleName: replaceWithCharAt(2232) into MethodInvocation(2241) at 0", "Insert SimpleName: n(2233) into MethodInvocation(2241) at 1", "Insert SimpleName: callTarget(2234) into MethodInvocation(2241) at 2", "Insert ConditionalExpression(2240) into MethodInvocation(2241) at 3", "Move MethodInvocation(227) into ReturnStatement(229) at 0", "Insert SwitchStatement(249) into Block(250) at 0", "Insert IfStatement(301) into Block(302) at 0", "Insert SimpleName: useTypes(306) into InfixExpression: &&(310) at 0", "Insert InfixExpression: !=(309) into InfixExpression: &&(310) at 1", "Insert MethodInvocation(313) into InfixExpression: !=(315) at 0", "Move NullLiteral(156) into InfixExpression: !=(315) at 1", "Insert SimpleName: stringNode(317) into MethodInvocation(319) at 0", "Insert SimpleName: getJSType(318) into MethodInvocation(319) at 1", "Insert StringLiteral: \"substr\"(324) into SwitchCase(325) at 0", "Insert MethodInvocation(330) into ReturnStatement(331) at 0", "Insert StringLiteral: \"substring\"(332) into SwitchCase(333) at 0", "Insert MethodInvocation(338) into ReturnStatement(339) at 0", "Update SimpleName: arg1(1753) to maybeStart", "Move SimpleName: arg1(1753) into MethodInvocation(1756) at 0", "Update SimpleName: getDouble(1754) to intValue", "Move SimpleName: getDouble(1754) into MethodInvocation(1756) at 1", "Insert SimpleName: NodeUtil(1778) into MethodInvocation(1782) at 0", "Insert SimpleName: getNumberValue(1779) into MethodInvocation(1782) at 1", "Move SimpleName: arg2(1775) into MethodInvocation(1782) at 2", "Update SimpleName: isNumber(1776) to useTypes", "Move SimpleName: isNumber(1776) into MethodInvocation(1782) at 3", "Update SimpleName: arg1(1931) to maybeStart", "Move SimpleName: arg1(1931) into MethodInvocation(1955) at 0", "Update SimpleName: getDouble(1932) to intValue", "Move SimpleName: getDouble(1932) into MethodInvocation(1955) at 1", "Insert SimpleName: NodeUtil(1977) into MethodInvocation(1981) at 0", "Insert SimpleName: getNumberValue(1978) into MethodInvocation(1981) at 1", "Move SimpleName: arg2(1953) into MethodInvocation(1981) at 2", "Update SimpleName: isNumber(1954) to useTypes", "Move SimpleName: isNumber(1954) into MethodInvocation(1981) at 3", "Update SimpleName: stringNode(182) to NodeUtil", "Insert SimpleName: getNumberValue(2106) into MethodInvocation(2111) at 1", "Insert MethodInvocation(2109) into MethodInvocation(2111) at 2", "Insert SimpleName: useTypes(2110) into MethodInvocation(2111) at 3", "Insert PrimitiveType: int(2117) into VariableDeclarationStatement(2123) at 0", "Insert VariableDeclarationFragment(2122) into VariableDeclarationStatement(2123) at 1", "Insert InfixExpression: ==(2126) into IfStatement(2134) at 0", "Move Block(245) into IfStatement(2134) at 1", "Insert InfixExpression: <(2237) into ConditionalExpression(2240) at 0", "Insert SimpleName: firstArg(2238) into ConditionalExpression(2240) at 1", "Insert SimpleName: secondArg(2239) into ConditionalExpression(2240) at 2", "Insert SimpleName: functionNameString(234) into SwitchStatement(249) at 0", "Insert SwitchCase(236) into SwitchStatement(249) at 1", "Insert ReturnStatement(241) into SwitchStatement(249) at 2", "Insert SwitchCase(243) into SwitchStatement(249) at 3", "Insert ReturnStatement(248) into SwitchStatement(249) at 4", "Move MethodInvocation(266) into IfStatement(301) at 0", "Insert Block(300) into IfStatement(301) at 1", "Insert SimpleName: firstArg(307) into InfixExpression: !=(309) at 0", "Insert NullLiteral(308) into InfixExpression: !=(309) at 1", "Insert SimpleName: stringNode(311) into MethodInvocation(313) at 0", "Insert SimpleName: getJSType(312) into MethodInvocation(313) at 1", "Insert SimpleName: tryReplaceSubstrWithCharAt(326) into MethodInvocation(330) at 0", "Insert SimpleName: subtree(327) into MethodInvocation(330) at 1", "Insert SimpleName: callTarget(328) into MethodInvocation(330) at 2", "Insert SimpleName: firstArg(329) into MethodInvocation(330) at 3", "Insert SimpleName: tryReplaceSubstringWithCharAt(334) into MethodInvocation(338) at 0", "Insert SimpleName: subtree(335) into MethodInvocation(338) at 1", "Insert SimpleName: callTarget(336) into MethodInvocation(338) at 2", "Insert SimpleName: firstArg(337) into MethodInvocation(338) at 3", "Insert MethodInvocation(1791) into Assignment: =(1792) at 1", "Insert MethodInvocation(1990) into Assignment: =(1991) at 1", "Insert SimpleName: firstArg(2107) into MethodInvocation(2109) at 0", "Move SimpleName: getNext(183) into MethodInvocation(2109) at 1", "Insert SimpleName: length(2118) into VariableDeclarationFragment(2122) at 0", "Insert MethodInvocation(2121) into VariableDeclarationFragment(2122) at 1", "Insert SimpleName: length(2124) into InfixExpression: ==(2126) at 0", "Insert NumberLiteral: 1(2125) into InfixExpression: ==(2126) at 1", "Insert ReturnStatement(2132) into Block(2133) at 0", "Insert SimpleName: start(2235) into InfixExpression: <(2237) at 0", "Insert SimpleName: end(2236) into InfixExpression: <(2237) at 1", "Insert SimpleName: callTarget(125) into MethodInvocation(126) at 2", "Insert StringLiteral: \"toLowerCase\"(235) into SwitchCase(236) at 0", "Move MethodInvocation(242) into ReturnStatement(241) at 0", "Insert StringLiteral: \"toUpperCase\"(242) into SwitchCase(243) at 0", "Move MethodInvocation(254) into ReturnStatement(248) at 0", "Insert SwitchStatement(299) into Block(300) at 0", "Update SimpleName: arg2(1780) to maybeLength", "Move SimpleName: arg2(1780) into MethodInvocation(1791) at 0", "Update SimpleName: getDouble(1781) to intValue", "Move SimpleName: getDouble(1781) into MethodInvocation(1791) at 1", "Update SimpleName: arg2(1958) to maybeEnd", "Move SimpleName: arg2(1958) into MethodInvocation(1990) at 0", "Update SimpleName: getDouble(1959) to intValue", "Move SimpleName: getDouble(1959) into MethodInvocation(1990) at 1", "Update SimpleName: functionNameString(234) to maybeLength", "Move SimpleName: functionNameString(234) into MethodInvocation(2121) at 0", "Update SimpleName: equals(235) to intValue", "Move SimpleName: equals(235) into MethodInvocation(2121) at 1", "Insert MethodInvocation(2131) into ReturnStatement(2132) at 0", "Insert SimpleName: callTarget(136) into MethodInvocation(137) at 2", "Insert SimpleName: functionNameString(255) into SwitchStatement(299) at 0", "Insert SwitchCase(257) into SwitchStatement(299) at 1", "Insert SwitchCase(259) into SwitchStatement(299) at 2", "Insert ReturnStatement(266) into SwitchStatement(299) at 3", "Insert SwitchCase(268) into SwitchStatement(299) at 4", "Insert ReturnStatement(274) into SwitchStatement(299) at 5", "Insert SwitchCase(276) into SwitchStatement(299) at 6", "Insert ReturnStatement(282) into SwitchStatement(299) at 7", "Insert SwitchCase(284) into SwitchStatement(299) at 8", "Insert ReturnStatement(290) into SwitchStatement(299) at 9", "Insert SwitchCase(292) into SwitchStatement(299) at 10", "Insert ReturnStatement(298) into SwitchStatement(299) at 11", "Insert SimpleName: replaceWithCharAt(2127) into MethodInvocation(2131) at 0", "Insert SimpleName: n(2128) into MethodInvocation(2131) at 1", "Insert SimpleName: callTarget(2129) into MethodInvocation(2131) at 2", "Insert SimpleName: firstArg(2130) into MethodInvocation(2131) at 3", "Insert StringLiteral: \"indexOf\"(256) into SwitchCase(257) at 0", "Insert StringLiteral: \"lastIndexOf\"(258) into SwitchCase(259) at 0", "Move MethodInvocation(282) into ReturnStatement(266) at 0", "Insert StringLiteral: \"substr\"(267) into SwitchCase(268) at 0", "Move MethodInvocation(295) into ReturnStatement(274) at 0", "Insert StringLiteral: \"substring\"(275) into SwitchCase(276) at 0", "Move MethodInvocation(308) into ReturnStatement(282) at 0", "Insert StringLiteral: \"charAt\"(283) into SwitchCase(284) at 0", "Move MethodInvocation(321) into ReturnStatement(290) at 0", "Insert StringLiteral: \"charCodeAt\"(291) into SwitchCase(292) at 0", "Move MethodInvocation(334) into ReturnStatement(298) at 0", "Delete SimpleName: Node(88)", "Delete SimpleType: Node(89)", "Delete SimpleName: callTarget(90)", "Delete SimpleName: subtree(91)", "Delete SimpleName: getFirstChild(92)", "Delete MethodInvocation(93)", "Delete VariableDeclarationFragment(94)", "Delete VariableDeclarationStatement(95)", "Delete PrefixExpression: !(190)", "Delete ParenthesizedExpression(191)", "Delete ParenthesizedExpression(196)", "Delete InfixExpression: ||(197)", "Delete SimpleName: subtree(222)", "Delete Assignment: =(228)", "Delete ExpressionStatement(229)", "Delete SimpleName: subtree(158)", "Delete ReturnStatement(159)", "Delete SimpleType: Node(148)", "Delete SimpleName: callTarget(149)", "Delete VariableDeclarationFragment(153)", "Delete VariableDeclarationStatement(154)", "Delete SimpleName: callTarget(155)", "Delete InfixExpression: ==(157)", "Delete IfStatement(161)", "Delete SimpleName: NodeUtil(162)", "Delete SimpleName: isGet(163)", "Delete SimpleName: callTarget(164)", "Delete MethodInvocation(165)", "Delete PrefixExpression: !(166)", "Delete SimpleName: subtree(167)", "Delete ReturnStatement(168)", "Delete Block(169)", "Delete IfStatement(170)", "Delete StringLiteral: \"toLowerCase\"(236)", "Delete MethodInvocation(237)", "Delete StringLiteral: \"toUpperCase\"(248)", "Delete MethodInvocation(249)", "Delete IfStatement(258)", "Delete IfStatement(259)", "Delete Block(262)", "Delete StringLiteral: \"indexOf\"(269)", "Delete MethodInvocation(270)", "Delete StringLiteral: \"lastIndexOf\"(273)", "Delete MethodInvocation(274)", "Delete InfixExpression: ||(275)", "Delete StringLiteral: \"substr\"(288)", "Delete MethodInvocation(289)", "Delete SimpleName: subtree(290)", "Delete Assignment: =(296)", "Delete ExpressionStatement(297)", "Delete Block(298)", "Delete StringLiteral: \"substring\"(301)", "Delete MethodInvocation(302)", "Delete MethodInvocation(315)", "Delete Block(324)", "Delete StringLiteral: \"charCodeAt\"(327)", "Delete MethodInvocation(328)", "Delete Block(337)", "Delete IfStatement(338)", "Delete IfStatement(339)", "Delete IfStatement(340)", "Delete IfStatement(341)", "Delete IfStatement(342)", "Delete Block(343)", "Delete IfStatement(344)", "Delete IfStatement(345)", "Delete IfStatement(346)", "Delete Block(349)", "Delete MethodDeclaration(350)", "Delete PrefixExpression: !(383)", "Delete SimpleName: subtree(384)", "Delete ReturnStatement(385)", "Delete Block(386)", "Delete IfStatement(387)", "Delete PrimitiveType: int(1752)", "Delete MethodInvocation(1755)", "Delete CastExpression(1756)", "Delete MethodInvocation(1749)", "Delete InfixExpression: &&(1750)", "Delete IfStatement(1763)", "Delete PrimitiveType: int(1779)", "Delete MethodInvocation(1782)", "Delete CastExpression(1783)", "Delete MethodInvocation(1777)", "Delete IfStatement(1790)", "Delete PrimitiveType: int(1930)", "Delete MethodInvocation(1933)", "Delete CastExpression(1934)", "Delete MethodInvocation(1927)", "Delete InfixExpression: &&(1928)", "Delete IfStatement(1941)", "Delete PrimitiveType: int(1957)", "Delete MethodInvocation(1960)", "Delete CastExpression(1961)", "Delete MethodInvocation(1955)", "Delete IfStatement(1968)", "Delete SimpleName: subtree(238)", "Delete Assignment: =(243)", "Delete ExpressionStatement(244)", "Delete SimpleName: subtree(250)", "Delete Assignment: =(255)", "Delete ExpressionStatement(256)", "Delete SimpleName: subtree(276)", "Delete Assignment: =(283)", "Delete ExpressionStatement(284)", "Delete SimpleName: subtree(303)", "Delete Assignment: =(309)", "Delete ExpressionStatement(310)", "Delete SimpleName: subtree(316)", "Delete Assignment: =(322)", "Delete SimpleName: subtree(329)", "Delete Assignment: =(335)"]}}], "commit_stats": [{"total_files": 7, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}