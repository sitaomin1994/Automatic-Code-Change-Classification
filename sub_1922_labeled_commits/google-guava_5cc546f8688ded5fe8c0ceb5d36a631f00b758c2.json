{"application": "google-guava", "csha": "5cc546f8688ded5fe8c0ceb5d36a631f00b758c2", "files": [{"FluentIterable_cluster": {"actions": [{"root": "INS TextElement: . to TagElement at 9", "operations": ["INS TextElement: . to TagElement at 9"]}, {"root": "INS TextElement: . to TagElement at 10", "operations": ["INS TextElement: . to TagElement at 10"]}, {"root": "UPDATE from  (same) to  (same).", "operations": ["UPD TextElement:  (same) from  (same) to  (same).", "UPD TextElement:  (same) from  (same) to  (same)."]}, {"root": "INS TextElement: . to TagElement at 5", "operations": ["INS TextElement: . to TagElement at 5"]}, {"root": "INS TextElement: . to TagElement at 8", "operations": ["INS TextElement: . to TagElement at 8"]}, {"root": "INS TextElement: . to TagElement at 15", "operations": ["INS TextElement: . to TagElement at 15"]}, {"root": "INS TextElement: . to TagElement at 8", "operations": ["INS TextElement: . to TagElement at 8"]}, {"root": "INS TextElement: . to TagElement at 18", "operations": ["INS TextElement: . to TagElement at 18"]}, {"root": "INS TextElement: . to TagElement at 7", "operations": ["INS TextElement: . to TagElement at 7"]}, {"root": "UPDATE from  equivalent:</b> TODO (note that Collectors.toMap would trash the order...) to  equivalent:</b> ", "operations": ["UPD TextElement:  equivalent:</b> TODO (note that Collectors.toMap would trash the order...) from  equivalent:</b> TODO (note that Collectors.toMap would trash the order...) to  equivalent:</b> ", "UPD TextElement:  equivalent:</b> TODO from  equivalent:</b> TODO to  equivalent:</b> "]}, {"root": "INS TagElement: @code to TagElement at 13", "operations": ["INS TagElement: @code to TagElement at 13", "INS TextElement: ImmutableMap.copyOf(stream.collect(Collectors.toMap(k -> k, valueFunction))) to TagElement: @code at 0"]}, {"root": "INS TextElement:  (but note that to TagElement at 14", "operations": ["INS TextElement:  (but note that to TagElement at 14"]}, {"root": "INS TextElement: this may not preserve the order of entries). to TagElement at 15", "operations": ["INS TextElement: this may not preserve the order of entries). to TagElement at 15"]}, {"root": "INS TextElement: <p><b> to TagElement: @throws at 13", "operations": ["INS TextElement: <p><b> to TagElement: @throws at 13"]}, {"root": "INS TagElement: @code to TagElement: @throws at 14", "operations": ["INS TagElement: @code to TagElement: @throws at 14", "INS TextElement:  Stream to TagElement: @code at 0"]}, {"root": "INS TextElement:  equivalent:</b>  to TagElement: @throws at 15", "operations": ["INS TextElement:  equivalent:</b>  to TagElement: @throws at 15"]}, {"root": "INS TagElement: @code to TagElement: @throws at 16", "operations": ["INS TextElement:  stream.collect(Collectors.groupingBy(keyFunction)) to TagElement: @code at 0", "INS TagElement: @code to TagElement: @throws at 16"]}, {"root": "INS TextElement: behaves similarly, but returns a mutable  to TagElement: @throws at 17", "operations": ["INS TextElement: behaves similarly, but returns a mutable  to TagElement: @throws at 17"]}, {"root": "INS TagElement: @code to TagElement: @throws at 18", "operations": ["INS TextElement:  Map<K, List<E>> to TagElement: @code at 0", "INS TagElement: @code to TagElement: @throws at 18"]}, {"root": "INS TextElement:  instead, and may not preserve to TagElement: @throws at 19", "operations": ["INS TextElement:  instead, and may not preserve to TagElement: @throws at 19"]}, {"root": "INS TextElement: the order of entries). to TagElement: @throws at 20", "operations": ["INS TextElement: the order of entries). to TagElement: @throws at 20"]}, {"root": "INS TagElement: @code to TagElement at 19", "operations": ["INS TagElement: @code to TagElement at 19", "INS TextElement: ImmutableMap.copyOf(stream.collect(Collectors.toMap(keyFunction, v -> v))) to TagElement: @code at 0"]}, {"root": "INS TextElement:  (but note that this to TagElement at 20", "operations": ["INS TextElement:  (but note that this to TagElement at 20"]}, {"root": "INS TextElement: may not preserve the order of entries). to TagElement at 21", "operations": ["INS TextElement: may not preserve the order of entries). to TagElement at 21"]}, {"root": "INS TextElement: <p><b> to TagElement at 1", "operations": ["INS TextElement: <p><b> to TagElement at 1"]}, {"root": "INS TagElement: @code to TagElement at 2", "operations": ["INS TagElement: @code to TagElement at 2", "INS TextElement:  Stream to TagElement: @code at 0"]}, {"root": "INS TextElement:  equivalent:</b> if an object array is acceptable, use to TagElement at 3", "operations": ["INS TextElement:  equivalent:</b> if an object array is acceptable, use to TagElement at 3"]}, {"root": "INS TagElement: @code to TagElement at 4", "operations": ["INS TagElement: @code to TagElement at 4", "INS TextElement:  stream.toArray() to TagElement: @code at 0"]}, {"root": "INS TextElement: ; if  to TagElement at 5", "operations": ["INS TextElement: ; if  to TagElement at 5"]}, {"root": "INS TagElement: @code to TagElement at 6", "operations": ["INS TagElement: @code to TagElement at 6", "INS TextElement:  type to TagElement: @code at 0"]}, {"root": "INS TextElement:  is a class literal such as  to TagElement at 7", "operations": ["INS TextElement:  is a class literal such as  to TagElement at 7"]}, {"root": "INS TagElement: @code to TagElement at 8", "operations": ["INS TagElement: @code to TagElement at 8", "INS TextElement:  MyType.class to TagElement: @code at 0"]}, {"root": "INS TextElement: , use to TagElement at 9", "operations": ["INS TextElement: , use to TagElement at 9"]}, {"root": "INS TagElement: @code to TagElement at 10", "operations": ["INS TagElement: @code to TagElement at 10", "INS TextElement:  stream.toArray(MyType[]::new) to TagElement: @code at 0"]}, {"root": "INS TextElement: . Otherwise use  to TagElement at 11", "operations": ["INS TextElement: . Otherwise use  to TagElement at 11"]}, {"root": "INS TagElement: @code to TagElement at 12", "operations": ["INS TagElement: @code to TagElement at 12", "INS TextElement:  stream.toArray( to TagElement: @code at 0", "INS TextElement: len -> (E[]) Array.newInstance(type, len)) to TagElement: @code at 1"]}, {"root": "INS TextElement: . to TagElement at 13", "operations": ["INS TextElement: . to TagElement at 13"]}, {"root": "INS TextElement: <p><b> to TagElement at 6", "operations": ["INS TextElement: <p><b> to TagElement at 6"]}, {"root": "INS TagElement: @code to TagElement at 7", "operations": ["INS TagElement: @code to TagElement at 7", "INS TextElement:  Stream to TagElement: @code at 0"]}, {"root": "INS TextElement:  equivalent:</b>  to TagElement at 8", "operations": ["INS TextElement:  equivalent:</b>  to TagElement at 8"]}, {"root": "INS TagElement: @code to TagElement at 9", "operations": ["INS TextElement:  stream.forEachOrdered(collection::add) to TagElement: @code at 0", "INS TagElement: @code to TagElement at 9"]}, {"root": "INS TextElement:  or to TagElement at 10", "operations": ["INS TextElement:  or to TagElement at 10"]}, {"root": "INS TagElement: @code to TagElement at 11", "operations": ["INS TextElement:  stream.forEach(collection::add) to TagElement: @code at 0", "INS TagElement: @code to TagElement at 11"]}, {"root": "INS TextElement: . to TagElement at 12", "operations": ["INS TextElement: . to TagElement at 12"]}, {"root": "INS TextElement: <p><b> to TagElement at 5", "operations": ["INS TextElement: <p><b> to TagElement at 5"]}, {"root": "INS TagElement: @code to TagElement at 6", "operations": ["INS TextElement:  Stream to TagElement: @code at 0", "INS TagElement: @code to TagElement at 6"]}, {"root": "INS TextElement:  equivalent:</b>  to TagElement at 7", "operations": ["INS TextElement:  equivalent:</b>  to TagElement at 7"]}, {"root": "INS TagElement: @code to TagElement at 8", "operations": ["INS TagElement: @code to TagElement at 8", "INS TextElement:  joiner.join(stream.iterator()) to TagElement: @code at 0"]}, {"root": "INS TextElement: , or, if you are not to TagElement at 9", "operations": ["INS TextElement: , or, if you are not to TagElement at 9"]}, {"root": "INS TextElement: using any optional  to TagElement at 10", "operations": ["INS TextElement: using any optional  to TagElement at 10"]}, {"root": "INS TagElement: @code to TagElement at 11", "operations": ["INS TextElement:  Joiner to TagElement: @code at 0", "INS TagElement: @code to TagElement at 11"]}, {"root": "INS TextElement:  features, to TagElement at 12", "operations": ["INS TextElement:  features, to TagElement at 12"]}, {"root": "INS TagElement: @code to TagElement at 13", "operations": ["INS TextElement:  stream.collect(Collectors.joining(delimiter) to TagElement: @code at 0", "INS TagElement: @code to TagElement at 13"]}, {"root": "INS TextElement: . to TagElement at 14", "operations": ["INS TextElement: . to TagElement at 14"]}, {"root": "INS TextElement: <p><b> to TagElement at 1", "operations": ["INS TextElement: <p><b> to TagElement at 1"]}, {"root": "INS TagElement: @code to TagElement at 2", "operations": ["INS TextElement:  Stream to TagElement: @code at 0", "INS TagElement: @code to TagElement at 2"]}, {"root": "INS TextElement:  equivalent:</b>  to TagElement at 3", "operations": ["INS TextElement:  equivalent:</b>  to TagElement at 3"]}, {"root": "INS TagElement: @code to TagElement at 4", "operations": ["INS TagElement: @code to TagElement at 4", "INS TextElement:  stream.skip(position).findFirst().get() to TagElement: @code at 0"]}, {"root": "INS TextElement:  (but note to TagElement at 5", "operations": ["INS TextElement:  (but note to TagElement at 5"]}, {"root": "INS TextElement: that this throws different exception types, and throws an exception if  to TagElement at 6", "operations": ["INS TextElement: that this throws different exception types, and throws an exception if  to TagElement at 6"]}, {"root": "INS TagElement: @code to TagElement at 7", "operations": ["INS TagElement: @code to TagElement at 7", "INS TextElement:  null to TagElement: @code at 0"]}, {"root": "INS TextElement:  would be to TagElement at 8", "operations": ["INS TextElement:  would be to TagElement at 8"]}, {"root": "INS TextElement: returned). to TagElement at 9", "operations": ["INS TextElement: returned). to TagElement at 9"]}]}}, {"FluentIterable_diff": {"operations": ["Insert TextElement: .(483) into TagElement(484) at 9", "Insert TextElement: .(1102) into TagElement(1103) at 10", "Update TextElement:  (same)(1286) to  (same).", "Update TextElement:  (same)(1329) to  (same).", "Insert TextElement: .(1373) into TagElement(1374) at 5", "Insert TextElement: .(1402) into TagElement(1403) at 8", "Insert TextElement: .(1449) into TagElement(1450) at 15", "Insert TextElement: .(1502) into TagElement(1503) at 8", "Insert TextElement: .(1553) into TagElement(1554) at 18", "Insert TextElement: .(1603) into TagElement(1604) at 7", "Update TextElement:  equivalent:</b> TODO (note that Collectors.toMap would trash the order...)(1633) to  equivalent:</b> ", "Insert TagElement: @code(1643) into TagElement(1646) at 13", "Insert TextElement:  (but note that(1644) into TagElement(1646) at 14", "Insert TextElement: this may not preserve the order of entries).(1645) into TagElement(1646) at 15", "Insert TextElement: <p><b>(1727) into TagElement: @throws(1738) at 13", "Insert TagElement: @code(1729) into TagElement: @throws(1738) at 14", "Insert TextElement:  equivalent:</b> (1730) into TagElement: @throws(1738) at 15", "Insert TagElement: @code(1732) into TagElement: @throws(1738) at 16", "Insert TextElement: behaves similarly, but returns a mutable (1733) into TagElement: @throws(1738) at 17", "Insert TagElement: @code(1735) into TagElement: @throws(1738) at 18", "Insert TextElement:  instead, and may not preserve(1736) into TagElement: @throws(1738) at 19", "Insert TextElement: the order of entries).(1737) into TagElement: @throws(1738) at 20", "Update TextElement:  equivalent:</b> TODO(1784) to  equivalent:</b> ", "Insert TagElement: @code(1809) into TagElement(1812) at 19", "Insert TextElement:  (but note that this(1810) into TagElement(1812) at 20", "Insert TextElement: may not preserve the order of entries).(1811) into TagElement(1812) at 21", "Insert TextElement: <p><b>(1874) into TagElement(1894) at 1", "Insert TagElement: @code(1876) into TagElement(1894) at 2", "Insert TextElement:  equivalent:</b> if an object array is acceptable, use(1877) into TagElement(1894) at 3", "Insert TagElement: @code(1879) into TagElement(1894) at 4", "Insert TextElement: ; if (1880) into TagElement(1894) at 5", "Insert TagElement: @code(1882) into TagElement(1894) at 6", "Insert TextElement:  is a class literal such as (1883) into TagElement(1894) at 7", "Insert TagElement: @code(1885) into TagElement(1894) at 8", "Insert TextElement: , use(1886) into TagElement(1894) at 9", "Insert TagElement: @code(1888) into TagElement(1894) at 10", "Insert TextElement: . Otherwise use (1889) into TagElement(1894) at 11", "Insert TagElement: @code(1892) into TagElement(1894) at 12", "Insert TextElement: .(1893) into TagElement(1894) at 13", "Insert TextElement: <p><b>(1937) into TagElement(1947) at 6", "Insert TagElement: @code(1939) into TagElement(1947) at 7", "Insert TextElement:  equivalent:</b> (1940) into TagElement(1947) at 8", "Insert TagElement: @code(1942) into TagElement(1947) at 9", "Insert TextElement:  or(1943) into TagElement(1947) at 10", "Insert TagElement: @code(1945) into TagElement(1947) at 11", "Insert TextElement: .(1946) into TagElement(1947) at 12", "Insert TextElement: <p><b>(2018) into TagElement(2032) at 5", "Insert TagElement: @code(2020) into TagElement(2032) at 6", "Insert TextElement:  equivalent:</b> (2021) into TagElement(2032) at 7", "Insert TagElement: @code(2023) into TagElement(2032) at 8", "Insert TextElement: , or, if you are not(2024) into TagElement(2032) at 9", "Insert TextElement: using any optional (2025) into TagElement(2032) at 10", "Insert TagElement: @code(2027) into TagElement(2032) at 11", "Insert TextElement:  features,(2028) into TagElement(2032) at 12", "Insert TagElement: @code(2030) into TagElement(2032) at 13", "Insert TextElement: .(2031) into TagElement(2032) at 14", "Insert TextElement: <p><b>(2057) into TagElement(2069) at 1", "Insert TagElement: @code(2059) into TagElement(2069) at 2", "Insert TextElement:  equivalent:</b> (2060) into TagElement(2069) at 3", "Insert TagElement: @code(2062) into TagElement(2069) at 4", "Insert TextElement:  (but note(2063) into TagElement(2069) at 5", "Insert TextElement: that this throws different exception types, and throws an exception if (2064) into TagElement(2069) at 6", "Insert TagElement: @code(2066) into TagElement(2069) at 7", "Insert TextElement:  would be(2067) into TagElement(2069) at 8", "Insert TextElement: returned).(2068) into TagElement(2069) at 9", "Insert TextElement: ImmutableMap.copyOf(stream.collect(Collectors.toMap(k -> k, valueFunction)))(1642) into TagElement: @code(1643) at 0", "Insert TextElement:  Stream(1728) into TagElement: @code(1729) at 0", "Insert TextElement:  stream.collect(Collectors.groupingBy(keyFunction))(1731) into TagElement: @code(1732) at 0", "Insert TextElement:  Map<K, List<E>>(1734) into TagElement: @code(1735) at 0", "Insert TextElement: ImmutableMap.copyOf(stream.collect(Collectors.toMap(keyFunction, v -> v)))(1808) into TagElement: @code(1809) at 0", "Insert TextElement:  Stream(1875) into TagElement: @code(1876) at 0", "Insert TextElement:  stream.toArray()(1878) into TagElement: @code(1879) at 0", "Insert TextElement:  type(1881) into TagElement: @code(1882) at 0", "Insert TextElement:  MyType.class(1884) into TagElement: @code(1885) at 0", "Insert TextElement:  stream.toArray(MyType[]::new)(1887) into TagElement: @code(1888) at 0", "Insert TextElement:  stream.toArray((1890) into TagElement: @code(1892) at 0", "Insert TextElement: len -> (E[]) Array.newInstance(type, len))(1891) into TagElement: @code(1892) at 1", "Insert TextElement:  Stream(1938) into TagElement: @code(1939) at 0", "Insert TextElement:  stream.forEachOrdered(collection::add)(1941) into TagElement: @code(1942) at 0", "Insert TextElement:  stream.forEach(collection::add)(1944) into TagElement: @code(1945) at 0", "Insert TextElement:  Stream(2019) into TagElement: @code(2020) at 0", "Insert TextElement:  joiner.join(stream.iterator())(2022) into TagElement: @code(2023) at 0", "Insert TextElement:  Joiner(2026) into TagElement: @code(2027) at 0", "Insert TextElement:  stream.collect(Collectors.joining(delimiter)(2029) into TagElement: @code(2030) at 0", "Insert TextElement:  Stream(2058) into TagElement: @code(2059) at 0", "Insert TextElement:  stream.skip(position).findFirst().get()(2061) into TagElement: @code(2062) at 0", "Insert TextElement:  null(2065) into TagElement: @code(2066) at 0"]}}, {"FluentIterable_cluster": {"actions": [{"root": "INS TextElement: . to TagElement at 9", "operations": ["INS TextElement: . to TagElement at 9"]}, {"root": "INS TextElement: . to TagElement at 10", "operations": ["INS TextElement: . to TagElement at 10"]}, {"root": "UPDATE from  (same) to  (same).", "operations": ["UPD TextElement:  (same) from  (same) to  (same).", "UPD TextElement:  (same) from  (same) to  (same)."]}, {"root": "INS TextElement: . to TagElement at 5", "operations": ["INS TextElement: . to TagElement at 5"]}, {"root": "INS TextElement: . to TagElement at 8", "operations": ["INS TextElement: . to TagElement at 8"]}, {"root": "INS TextElement: . to TagElement at 15", "operations": ["INS TextElement: . to TagElement at 15"]}, {"root": "INS TextElement: . to TagElement at 8", "operations": ["INS TextElement: . to TagElement at 8"]}, {"root": "INS TextElement: . to TagElement at 18", "operations": ["INS TextElement: . to TagElement at 18"]}, {"root": "INS TextElement: . to TagElement at 7", "operations": ["INS TextElement: . to TagElement at 7"]}, {"root": "UPDATE from  equivalent:</b> TODO (note that Collectors.toMap would trash the order...) to  equivalent:</b> ", "operations": ["UPD TextElement:  equivalent:</b> TODO (note that Collectors.toMap would trash the order...) from  equivalent:</b> TODO (note that Collectors.toMap would trash the order...) to  equivalent:</b> ", "UPD TextElement:  equivalent:</b> TODO from  equivalent:</b> TODO to  equivalent:</b> "]}, {"root": "INS TagElement: @code to TagElement at 13", "operations": ["INS TagElement: @code to TagElement at 13", "INS TextElement: ImmutableMap.copyOf(stream.collect(Collectors.toMap(k -> k, valueFunction))) to TagElement: @code at 0"]}, {"root": "INS TextElement:  (but note that to TagElement at 14", "operations": ["INS TextElement:  (but note that to TagElement at 14"]}, {"root": "INS TextElement: this may not preserve the order of entries). to TagElement at 15", "operations": ["INS TextElement: this may not preserve the order of entries). to TagElement at 15"]}, {"root": "INS TextElement: <p><b> to TagElement: @throws at 13", "operations": ["INS TextElement: <p><b> to TagElement: @throws at 13"]}, {"root": "INS TagElement: @code to TagElement: @throws at 14", "operations": ["INS TagElement: @code to TagElement: @throws at 14", "INS TextElement:  Stream to TagElement: @code at 0"]}, {"root": "INS TextElement:  equivalent:</b>  to TagElement: @throws at 15", "operations": ["INS TextElement:  equivalent:</b>  to TagElement: @throws at 15"]}, {"root": "INS TagElement: @code to TagElement: @throws at 16", "operations": ["INS TextElement:  stream.collect(Collectors.groupingBy(keyFunction)) to TagElement: @code at 0", "INS TagElement: @code to TagElement: @throws at 16"]}, {"root": "INS TextElement: behaves similarly, but returns a mutable  to TagElement: @throws at 17", "operations": ["INS TextElement: behaves similarly, but returns a mutable  to TagElement: @throws at 17"]}, {"root": "INS TagElement: @code to TagElement: @throws at 18", "operations": ["INS TextElement:  Map<K, List<E>> to TagElement: @code at 0", "INS TagElement: @code to TagElement: @throws at 18"]}, {"root": "INS TextElement:  instead, and may not preserve to TagElement: @throws at 19", "operations": ["INS TextElement:  instead, and may not preserve to TagElement: @throws at 19"]}, {"root": "INS TextElement: the order of entries). to TagElement: @throws at 20", "operations": ["INS TextElement: the order of entries). to TagElement: @throws at 20"]}, {"root": "INS TagElement: @code to TagElement at 19", "operations": ["INS TagElement: @code to TagElement at 19", "INS TextElement: ImmutableMap.copyOf(stream.collect(Collectors.toMap(keyFunction, v -> v))) to TagElement: @code at 0"]}, {"root": "INS TextElement:  (but note that this to TagElement at 20", "operations": ["INS TextElement:  (but note that this to TagElement at 20"]}, {"root": "INS TextElement: may not preserve the order of entries). to TagElement at 21", "operations": ["INS TextElement: may not preserve the order of entries). to TagElement at 21"]}, {"root": "INS TextElement: <p><b> to TagElement at 1", "operations": ["INS TextElement: <p><b> to TagElement at 1"]}, {"root": "INS TagElement: @code to TagElement at 2", "operations": ["INS TagElement: @code to TagElement at 2", "INS TextElement:  Stream to TagElement: @code at 0"]}, {"root": "INS TextElement:  equivalent:</b> if an object array is acceptable, use to TagElement at 3", "operations": ["INS TextElement:  equivalent:</b> if an object array is acceptable, use to TagElement at 3"]}, {"root": "INS TagElement: @code to TagElement at 4", "operations": ["INS TagElement: @code to TagElement at 4", "INS TextElement:  stream.toArray() to TagElement: @code at 0"]}, {"root": "INS TextElement: ; if  to TagElement at 5", "operations": ["INS TextElement: ; if  to TagElement at 5"]}, {"root": "INS TagElement: @code to TagElement at 6", "operations": ["INS TagElement: @code to TagElement at 6", "INS TextElement:  type to TagElement: @code at 0"]}, {"root": "INS TextElement:  is a class literal such as  to TagElement at 7", "operations": ["INS TextElement:  is a class literal such as  to TagElement at 7"]}, {"root": "INS TagElement: @code to TagElement at 8", "operations": ["INS TagElement: @code to TagElement at 8", "INS TextElement:  MyType.class to TagElement: @code at 0"]}, {"root": "INS TextElement: , use to TagElement at 9", "operations": ["INS TextElement: , use to TagElement at 9"]}, {"root": "INS TagElement: @code to TagElement at 10", "operations": ["INS TagElement: @code to TagElement at 10", "INS TextElement:  stream.toArray(MyType[]::new) to TagElement: @code at 0"]}, {"root": "INS TextElement: . Otherwise use  to TagElement at 11", "operations": ["INS TextElement: . Otherwise use  to TagElement at 11"]}, {"root": "INS TagElement: @code to TagElement at 12", "operations": ["INS TagElement: @code to TagElement at 12", "INS TextElement:  stream.toArray( to TagElement: @code at 0", "INS TextElement: len -> (E[]) Array.newInstance(type, len)) to TagElement: @code at 1"]}, {"root": "INS TextElement: . to TagElement at 13", "operations": ["INS TextElement: . to TagElement at 13"]}, {"root": "INS TextElement: <p><b> to TagElement at 6", "operations": ["INS TextElement: <p><b> to TagElement at 6"]}, {"root": "INS TagElement: @code to TagElement at 7", "operations": ["INS TagElement: @code to TagElement at 7", "INS TextElement:  Stream to TagElement: @code at 0"]}, {"root": "INS TextElement:  equivalent:</b>  to TagElement at 8", "operations": ["INS TextElement:  equivalent:</b>  to TagElement at 8"]}, {"root": "INS TagElement: @code to TagElement at 9", "operations": ["INS TextElement:  stream.forEachOrdered(collection::add) to TagElement: @code at 0", "INS TagElement: @code to TagElement at 9"]}, {"root": "INS TextElement:  or to TagElement at 10", "operations": ["INS TextElement:  or to TagElement at 10"]}, {"root": "INS TagElement: @code to TagElement at 11", "operations": ["INS TextElement:  stream.forEach(collection::add) to TagElement: @code at 0", "INS TagElement: @code to TagElement at 11"]}, {"root": "INS TextElement: . to TagElement at 12", "operations": ["INS TextElement: . to TagElement at 12"]}, {"root": "INS TextElement: <p><b> to TagElement at 5", "operations": ["INS TextElement: <p><b> to TagElement at 5"]}, {"root": "INS TagElement: @code to TagElement at 6", "operations": ["INS TextElement:  Stream to TagElement: @code at 0", "INS TagElement: @code to TagElement at 6"]}, {"root": "INS TextElement:  equivalent:</b>  to TagElement at 7", "operations": ["INS TextElement:  equivalent:</b>  to TagElement at 7"]}, {"root": "INS TagElement: @code to TagElement at 8", "operations": ["INS TagElement: @code to TagElement at 8", "INS TextElement:  joiner.join(stream.iterator()) to TagElement: @code at 0"]}, {"root": "INS TextElement: , or, if you are not to TagElement at 9", "operations": ["INS TextElement: , or, if you are not to TagElement at 9"]}, {"root": "INS TextElement: using any optional  to TagElement at 10", "operations": ["INS TextElement: using any optional  to TagElement at 10"]}, {"root": "INS TagElement: @code to TagElement at 11", "operations": ["INS TextElement:  Joiner to TagElement: @code at 0", "INS TagElement: @code to TagElement at 11"]}, {"root": "INS TextElement:  features, to TagElement at 12", "operations": ["INS TextElement:  features, to TagElement at 12"]}, {"root": "INS TagElement: @code to TagElement at 13", "operations": ["INS TextElement:  stream.collect(Collectors.joining(delimiter) to TagElement: @code at 0", "INS TagElement: @code to TagElement at 13"]}, {"root": "INS TextElement: . to TagElement at 14", "operations": ["INS TextElement: . to TagElement at 14"]}, {"root": "INS TextElement: <p><b> to TagElement at 1", "operations": ["INS TextElement: <p><b> to TagElement at 1"]}, {"root": "INS TagElement: @code to TagElement at 2", "operations": ["INS TextElement:  Stream to TagElement: @code at 0", "INS TagElement: @code to TagElement at 2"]}, {"root": "INS TextElement:  equivalent:</b>  to TagElement at 3", "operations": ["INS TextElement:  equivalent:</b>  to TagElement at 3"]}, {"root": "INS TagElement: @code to TagElement at 4", "operations": ["INS TagElement: @code to TagElement at 4", "INS TextElement:  stream.skip(position).findFirst().get() to TagElement: @code at 0"]}, {"root": "INS TextElement:  (but note to TagElement at 5", "operations": ["INS TextElement:  (but note to TagElement at 5"]}, {"root": "INS TextElement: that this throws different exception types, and throws an exception if  to TagElement at 6", "operations": ["INS TextElement: that this throws different exception types, and throws an exception if  to TagElement at 6"]}, {"root": "INS TagElement: @code to TagElement at 7", "operations": ["INS TagElement: @code to TagElement at 7", "INS TextElement:  null to TagElement: @code at 0"]}, {"root": "INS TextElement:  would be to TagElement at 8", "operations": ["INS TextElement:  would be to TagElement at 8"]}, {"root": "INS TextElement: returned). to TagElement at 9", "operations": ["INS TextElement: returned). to TagElement at 9"]}]}}, {"FluentIterable_diff": {"operations": ["Insert TextElement: .(483) into TagElement(484) at 9", "Insert TextElement: .(1102) into TagElement(1103) at 10", "Update TextElement:  (same)(1286) to  (same).", "Update TextElement:  (same)(1329) to  (same).", "Insert TextElement: .(1373) into TagElement(1374) at 5", "Insert TextElement: .(1402) into TagElement(1403) at 8", "Insert TextElement: .(1449) into TagElement(1450) at 15", "Insert TextElement: .(1502) into TagElement(1503) at 8", "Insert TextElement: .(1553) into TagElement(1554) at 18", "Insert TextElement: .(1603) into TagElement(1604) at 7", "Update TextElement:  equivalent:</b> TODO (note that Collectors.toMap would trash the order...)(1633) to  equivalent:</b> ", "Insert TagElement: @code(1643) into TagElement(1646) at 13", "Insert TextElement:  (but note that(1644) into TagElement(1646) at 14", "Insert TextElement: this may not preserve the order of entries).(1645) into TagElement(1646) at 15", "Insert TextElement: <p><b>(1727) into TagElement: @throws(1738) at 13", "Insert TagElement: @code(1729) into TagElement: @throws(1738) at 14", "Insert TextElement:  equivalent:</b> (1730) into TagElement: @throws(1738) at 15", "Insert TagElement: @code(1732) into TagElement: @throws(1738) at 16", "Insert TextElement: behaves similarly, but returns a mutable (1733) into TagElement: @throws(1738) at 17", "Insert TagElement: @code(1735) into TagElement: @throws(1738) at 18", "Insert TextElement:  instead, and may not preserve(1736) into TagElement: @throws(1738) at 19", "Insert TextElement: the order of entries).(1737) into TagElement: @throws(1738) at 20", "Update TextElement:  equivalent:</b> TODO(1784) to  equivalent:</b> ", "Insert TagElement: @code(1809) into TagElement(1812) at 19", "Insert TextElement:  (but note that this(1810) into TagElement(1812) at 20", "Insert TextElement: may not preserve the order of entries).(1811) into TagElement(1812) at 21", "Insert TextElement: <p><b>(1874) into TagElement(1894) at 1", "Insert TagElement: @code(1876) into TagElement(1894) at 2", "Insert TextElement:  equivalent:</b> if an object array is acceptable, use(1877) into TagElement(1894) at 3", "Insert TagElement: @code(1879) into TagElement(1894) at 4", "Insert TextElement: ; if (1880) into TagElement(1894) at 5", "Insert TagElement: @code(1882) into TagElement(1894) at 6", "Insert TextElement:  is a class literal such as (1883) into TagElement(1894) at 7", "Insert TagElement: @code(1885) into TagElement(1894) at 8", "Insert TextElement: , use(1886) into TagElement(1894) at 9", "Insert TagElement: @code(1888) into TagElement(1894) at 10", "Insert TextElement: . Otherwise use (1889) into TagElement(1894) at 11", "Insert TagElement: @code(1892) into TagElement(1894) at 12", "Insert TextElement: .(1893) into TagElement(1894) at 13", "Insert TextElement: <p><b>(1937) into TagElement(1947) at 6", "Insert TagElement: @code(1939) into TagElement(1947) at 7", "Insert TextElement:  equivalent:</b> (1940) into TagElement(1947) at 8", "Insert TagElement: @code(1942) into TagElement(1947) at 9", "Insert TextElement:  or(1943) into TagElement(1947) at 10", "Insert TagElement: @code(1945) into TagElement(1947) at 11", "Insert TextElement: .(1946) into TagElement(1947) at 12", "Insert TextElement: <p><b>(2018) into TagElement(2032) at 5", "Insert TagElement: @code(2020) into TagElement(2032) at 6", "Insert TextElement:  equivalent:</b> (2021) into TagElement(2032) at 7", "Insert TagElement: @code(2023) into TagElement(2032) at 8", "Insert TextElement: , or, if you are not(2024) into TagElement(2032) at 9", "Insert TextElement: using any optional (2025) into TagElement(2032) at 10", "Insert TagElement: @code(2027) into TagElement(2032) at 11", "Insert TextElement:  features,(2028) into TagElement(2032) at 12", "Insert TagElement: @code(2030) into TagElement(2032) at 13", "Insert TextElement: .(2031) into TagElement(2032) at 14", "Insert TextElement: <p><b>(2057) into TagElement(2069) at 1", "Insert TagElement: @code(2059) into TagElement(2069) at 2", "Insert TextElement:  equivalent:</b> (2060) into TagElement(2069) at 3", "Insert TagElement: @code(2062) into TagElement(2069) at 4", "Insert TextElement:  (but note(2063) into TagElement(2069) at 5", "Insert TextElement: that this throws different exception types, and throws an exception if (2064) into TagElement(2069) at 6", "Insert TagElement: @code(2066) into TagElement(2069) at 7", "Insert TextElement:  would be(2067) into TagElement(2069) at 8", "Insert TextElement: returned).(2068) into TagElement(2069) at 9", "Insert TextElement: ImmutableMap.copyOf(stream.collect(Collectors.toMap(k -> k, valueFunction)))(1642) into TagElement: @code(1643) at 0", "Insert TextElement:  Stream(1728) into TagElement: @code(1729) at 0", "Insert TextElement:  stream.collect(Collectors.groupingBy(keyFunction))(1731) into TagElement: @code(1732) at 0", "Insert TextElement:  Map<K, List<E>>(1734) into TagElement: @code(1735) at 0", "Insert TextElement: ImmutableMap.copyOf(stream.collect(Collectors.toMap(keyFunction, v -> v)))(1808) into TagElement: @code(1809) at 0", "Insert TextElement:  Stream(1875) into TagElement: @code(1876) at 0", "Insert TextElement:  stream.toArray()(1878) into TagElement: @code(1879) at 0", "Insert TextElement:  type(1881) into TagElement: @code(1882) at 0", "Insert TextElement:  MyType.class(1884) into TagElement: @code(1885) at 0", "Insert TextElement:  stream.toArray(MyType[]::new)(1887) into TagElement: @code(1888) at 0", "Insert TextElement:  stream.toArray((1890) into TagElement: @code(1892) at 0", "Insert TextElement: len -> (E[]) Array.newInstance(type, len))(1891) into TagElement: @code(1892) at 1", "Insert TextElement:  Stream(1938) into TagElement: @code(1939) at 0", "Insert TextElement:  stream.forEachOrdered(collection::add)(1941) into TagElement: @code(1942) at 0", "Insert TextElement:  stream.forEach(collection::add)(1944) into TagElement: @code(1945) at 0", "Insert TextElement:  Stream(2019) into TagElement: @code(2020) at 0", "Insert TextElement:  joiner.join(stream.iterator())(2022) into TagElement: @code(2023) at 0", "Insert TextElement:  Joiner(2026) into TagElement: @code(2027) at 0", "Insert TextElement:  stream.collect(Collectors.joining(delimiter)(2029) into TagElement: @code(2030) at 0", "Insert TextElement:  Stream(2058) into TagElement: @code(2059) at 0", "Insert TextElement:  stream.skip(position).findFirst().get()(2061) into TagElement: @code(2062) at 0", "Insert TextElement:  null(2065) into TagElement: @code(2066) at 0"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}