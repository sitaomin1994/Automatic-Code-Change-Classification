{"application": "google-closure-compiler", "csha": "2a4317fa7b2f5b1704e4adee9870e0e94c13318e", "files": [{"CrossModuleCodeMotion_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 9"]}, {"root": "UPDATE from com.google.common.collect.ImmutableList to java.util.BitSet", "operations": ["UPD QualifiedName: com.google.common.collect.ImmutableList from com.google.common.collect.ImmutableList to java.util.BitSet"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: modulesWithReferences to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: BitSet to FieldDeclaration at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleName: BitSet to SimpleType: BitSet at 0", "INS FieldDeclaration to TypeDeclaration: class at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 9", "INS PrimitiveType: boolean to MethodDeclaration at 0", "INS SimpleName: allowMove to ReturnStatement at 0", "INS SimpleName: isAllowedToMove to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS SimpleName: allowMove to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS NullLiteral to Assignment: = at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: disallowMovement to MethodDeclaration at 1", "INS Block to MethodDeclaration at 2", "INS ExpressionStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS BooleanLiteral: false to Assignment: = at 1", "INS SimpleName: declModule to Assignment: = at 1", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS SimpleName: modulesWithReferences to Assignment: = at 0", "INS SimpleName: preferredModule to Assignment: = at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS Block to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS PrimitiveType: void to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS ReturnStatement to Block at 2", "INS SimpleType: JSModule to MethodDeclaration at 1", "INS Block to IfStatement at 1", "INS TextElement: to this global name. to TagElement at 1", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS SimpleName: allowMove to MethodInvocation at 1", "INS IfStatement to Block at 1", "INS TagElement to Javadoc at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: JSModule to SimpleType: JSModule at 0", "INS TextElement: Returns the root module of a dependency subtree that contains all of the modules which refer to TagElement at 0", "INS Javadoc to MethodDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: getPreferredModule to MethodDeclaration at 2", "INS Block to MethodDeclaration at 3", "INS SimpleName: preferredModule to ReturnStatement at 0", "INS SimpleName: checkState to MethodInvocation at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV PrimitiveType: void to MethodDeclaration at 0", "MOV SimpleName: addUsedModule to MethodDeclaration at 1", "MOV SingleVariableDeclaration to MethodDeclaration at 2"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0", "MOV IfStatement to Block at 0"]}, {"root": "UPDATE from Transforms instanceof usages into an expression that short circuits to to Transforms instanceof usages into an expression that short circuits to false if tested with a", "operations": ["UPD TextElement: Transforms instanceof usages into an expression that short circuits to from Transforms instanceof usages into an expression that short circuits to to Transforms instanceof usages into an expression that short circuits to false if tested with a"]}, {"root": "UPDATE from false if tested with a constructor that is undefined. This allows ignoring to constructor that is undefined. This allows ignoring instanceof with respect to cross module", "operations": ["UPD TextElement: false if tested with a constructor that is undefined. This allows ignoring from false if tested with a constructor that is undefined. This allows ignoring to constructor that is undefined. This allows ignoring instanceof with respect to cross module"]}, {"root": "UPDATE from instanceof with respect to cross module code motion. to code motion.", "operations": ["UPD TextElement: instanceof with respect to cross module code motion. from instanceof with respect to cross module code motion. to code motion."]}, {"root": "INS SimpleName: allowMove to IfStatement at 0", "operations": ["INS SimpleName: allowMove to IfStatement at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS ExpressionStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: m to MethodInvocation at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: modulesWithReferences to MethodInvocation at 0", "INS SimpleName: preferredModule to Assignment: = at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getIndex to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: set to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS IfStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: modulesWithReferences to InfixExpression: == at 0", "INS NullLiteral to Assignment: = at 1", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: && to InfixExpression: && at 0", "MOV InfixExpression: != to InfixExpression: && at 1"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS MethodInvocation to IfStatement at 0", "INS SimpleName: info to MethodInvocation at 0", "INS SimpleName: isAllowedToMove to MethodInvocation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationStatement to Block at 1", "INS SimpleName: info to MethodInvocation at 0", "INS SimpleType: JSModule to VariableDeclarationStatement at 0", "INS SimpleName: getPreferredModule to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: JSModule to SimpleType: JSModule at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: preferredModule to VariableDeclarationFragment at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS InfixExpression: == to IfStatement at 0", "operations": ["INS InfixExpression: == to IfStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: modulesWithReferences to InfixExpression: == at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV EnhancedForStatement to Block at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: BitSet to SimpleType: BitSet at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: graph to MethodInvocation at 0", "INS SimpleName: getModuleCount to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleType: BitSet to ClassInstanceCreation at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: modulesWithReferences to Assignment: = at 0"]}, {"root": "UPDATE from preferredModule to getPreferredModule", "operations": ["UPD SimpleName: preferredModule from preferredModule to getPreferredModule"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: preferredModule to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: info to MethodInvocation at 0", "INS SimpleName: disallowMovement to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS SimpleName: preferredModule to Assignment: = at 1", "operations": ["INS SimpleName: preferredModule to Assignment: = at 1"]}, {"root": "INS SimpleName: preferredModule to MethodInvocation at 2", "operations": ["INS SimpleName: preferredModule to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SimpleName: declModule to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "INS SimpleName: preferredModule to MethodInvocation at 2", "operations": ["INS SimpleName: preferredModule to MethodInvocation at 2"]}, {"root": "UPDATE from preferredModule to modulesWithReferences", "operations": ["UPD SimpleName: preferredModule from preferredModule to modulesWithReferences"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: preferredModule to MethodInvocation at 2"]}, {"root": "INS SimpleName: preferredModule to MethodInvocation at 2", "operations": ["INS SimpleName: preferredModule to MethodInvocation at 2"]}, {"root": "DEL QualifiedName: info.preferredModule", "operations": ["DEL QualifiedName: info.preferredModule"]}, {"root": "DEL QualifiedName: info.preferredModule", "operations": ["DEL QualifiedName: info.preferredModule"]}, {"root": "DEL QualifiedName: info.preferredModule", "operations": ["DEL QualifiedName: info.preferredModule"]}, {"root": "DEL QualifiedName: info.preferredModule", "operations": ["DEL QualifiedName: info.preferredModule"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !", "DEL SimpleName: allowMove"]}, {"root": "DEL SimpleName: m", "operations": ["DEL SimpleName: m"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: m", "DEL SimpleName: of", "DEL SimpleName: ImmutableList", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL MethodDeclaration"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL SimpleName: preferredModule", "DEL InfixExpression: !=", "DEL NullLiteral"]}, {"root": "DEL InfixExpression: &&", "operations": ["DEL InfixExpression: &&"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL QualifiedName: info.allowMove", "DEL PrefixExpression: !"]}, {"root": "DEL ContinueStatement", "operations": ["DEL ContinueStatement"]}, {"root": "DEL Assignment: =", "operations": ["DEL Assignment: =", "DEL BooleanLiteral: false", "DEL QualifiedName: info.allowMove"]}]}}, {"CrossModuleCodeMotion_diff": {"operations": ["Move ImportDeclaration(7) into CompilationUnit(2003) at 9", "Update QualifiedName: com.google.common.collect.ImmutableList(6) to java.util.BitSet", "Insert FieldDeclaration(357) into TypeDeclaration: class(558) at 4", "Insert MethodDeclaration(397) into TypeDeclaration: class(558) at 9", "Insert MethodDeclaration(413) into TypeDeclaration: class(558) at 10", "Insert MethodDeclaration(449) into TypeDeclaration: class(558) at 11", "Insert MethodDeclaration(488) into TypeDeclaration: class(558) at 12", "Insert Modifier: private(351) into FieldDeclaration(357) at 0", "Insert SimpleType: BitSet(353) into FieldDeclaration(357) at 1", "Insert VariableDeclarationFragment(356) into FieldDeclaration(357) at 2", "Insert PrimitiveType: boolean(392) into MethodDeclaration(397) at 0", "Insert SimpleName: isAllowedToMove(393) into MethodDeclaration(397) at 1", "Insert Block(396) into MethodDeclaration(397) at 2", "Move PrimitiveType: void(377) into MethodDeclaration(413) at 0", "Insert SimpleName: disallowMovement(399) into MethodDeclaration(413) at 1", "Insert Block(412) into MethodDeclaration(413) at 2", "Insert PrimitiveType: void(414) into MethodDeclaration(449) at 0", "Move SimpleName: addUsedModule(378) into MethodDeclaration(449) at 1", "Move SingleVariableDeclaration(382) into MethodDeclaration(449) at 2", "Insert Block(448) into MethodDeclaration(449) at 3", "Insert Javadoc(453) into MethodDeclaration(488) at 0", "Insert SimpleType: JSModule(455) into MethodDeclaration(488) at 1", "Insert SimpleName: getPreferredModule(456) into MethodDeclaration(488) at 2", "Insert Block(487) into MethodDeclaration(488) at 3", "Insert SimpleName: BitSet(352) into SimpleType: BitSet(353) at 0", "Insert SimpleName: modulesWithReferences(354) into VariableDeclarationFragment(356) at 0", "Insert NullLiteral(355) into VariableDeclarationFragment(356) at 1", "Insert ReturnStatement(395) into Block(396) at 0", "Insert ExpressionStatement(403) into Block(412) at 0", "Insert ExpressionStatement(407) into Block(412) at 1", "Insert ExpressionStatement(411) into Block(412) at 2", "Move IfStatement(387) into Block(448) at 0", "Insert TagElement(452) into Javadoc(453) at 0", "Insert SimpleName: JSModule(454) into SimpleType: JSModule(455) at 0", "Insert ExpressionStatement(460) into Block(487) at 0", "Insert IfStatement(484) into Block(487) at 1", "Insert ReturnStatement(486) into Block(487) at 2", "Update TextElement: Transforms instanceof usages into an expression that short circuits to(1747) to Transforms instanceof usages into an expression that short circuits to false if tested with a", "Update TextElement: false if tested with a constructor that is undefined. This allows ignoring(1748) to constructor that is undefined. This allows ignoring instanceof with respect to cross module", "Update TextElement: instanceof with respect to cross module code motion.(1749) to code motion.", "Insert SimpleName: allowMove(394) into ReturnStatement(395) at 0", "Insert Assignment: =(402) into ExpressionStatement(403) at 0", "Insert Assignment: =(406) into ExpressionStatement(407) at 0", "Insert Assignment: =(410) into ExpressionStatement(411) at 0", "Insert SimpleName: allowMove(420) into IfStatement(447) at 0", "Insert Block(446) into IfStatement(447) at 1", "Insert TextElement: Returns the root module of a dependency subtree that contains all of the modules which refer(450) into TagElement(452) at 0", "Insert TextElement: to this global name.(451) into TagElement(452) at 1", "Insert MethodInvocation(459) into ExpressionStatement(460) at 0", "Move InfixExpression: ==(390) into IfStatement(484) at 0", "Insert Block(483) into IfStatement(484) at 1", "Insert SimpleName: preferredModule(485) into ReturnStatement(486) at 0", "Insert SimpleName: allowMove(400) into Assignment: =(402) at 0", "Insert BooleanLiteral: false(401) into Assignment: =(402) at 1", "Insert SimpleName: modulesWithReferences(404) into Assignment: =(406) at 0", "Insert NullLiteral(405) into Assignment: =(406) at 1", "Insert SimpleName: preferredModule(408) into Assignment: =(410) at 0", "Insert SimpleName: declModule(409) into Assignment: =(410) at 1", "Insert IfStatement(434) into Block(446) at 0", "Insert ExpressionStatement(441) into Block(446) at 1", "Insert ExpressionStatement(445) into Block(446) at 2", "Insert SimpleName: checkState(457) into MethodInvocation(459) at 0", "Insert SimpleName: allowMove(458) into MethodInvocation(459) at 1", "Move IfStatement(408) into Block(483) at 0", "Move InfixExpression: &&(453) into InfixExpression: &&(538) at 0", "Insert MethodInvocation(920) into IfStatement(945) at 0", "Insert VariableDeclarationStatement(241) into Block(335) at 1", "Insert InfixExpression: ==(423) into IfStatement(434) at 0", "Move Block(386) into IfStatement(434) at 1", "Insert MethodInvocation(440) into ExpressionStatement(441) at 0", "Insert Assignment: =(444) into ExpressionStatement(445) at 0", "Insert InfixExpression: ==(466) into IfStatement(482) at 0", "Move InfixExpression: !=(456) into InfixExpression: &&(531) at 1", "Insert MethodInvocation(535) into MethodInvocation(537) at 2", "Insert SimpleName: info(918) into MethodInvocation(920) at 0", "Insert SimpleName: isAllowedToMove(919) into MethodInvocation(920) at 1", "Move VariableDeclarationStatement(856) into Block(944) at 0", "Move EnhancedForStatement(870) into Block(944) at 1", "Insert SimpleType: JSModule(235) into VariableDeclarationStatement(241) at 0", "Insert VariableDeclarationFragment(240) into VariableDeclarationStatement(241) at 1", "Insert SimpleName: modulesWithReferences(421) into InfixExpression: ==(423) at 0", "Insert NullLiteral(422) into InfixExpression: ==(423) at 1", "Insert ExpressionStatement(432) into Block(433) at 0", "Insert SimpleName: modulesWithReferences(435) into MethodInvocation(440) at 0", "Insert SimpleName: set(436) into MethodInvocation(440) at 1", "Insert MethodInvocation(439) into MethodInvocation(440) at 2", "Insert SimpleName: preferredModule(442) into Assignment: =(444) at 0", "Insert NullLiteral(443) into Assignment: =(444) at 1", "Insert SimpleName: modulesWithReferences(464) into InfixExpression: ==(466) at 0", "Insert NullLiteral(465) into InfixExpression: ==(466) at 1", "Update SimpleName: preferredModule(460) to getPreferredModule", "Move SimpleName: preferredModule(460) into MethodInvocation(535) at 0", "Insert MethodInvocation(1004) into ExpressionStatement(1005) at 0", "Insert SimpleName: JSModule(234) into SimpleType: JSModule(235) at 0", "Insert SimpleName: preferredModule(236) into VariableDeclarationFragment(240) at 0", "Insert MethodInvocation(239) into VariableDeclarationFragment(240) at 1", "Insert SimpleName: preferredModule(332) into Assignment: =(333) at 1", "Insert Assignment: =(431) into ExpressionStatement(432) at 0", "Insert SimpleName: m(437) into MethodInvocation(439) at 0", "Insert SimpleName: getIndex(438) into MethodInvocation(439) at 1", "Insert SimpleName: info(1002) into MethodInvocation(1004) at 0", "Insert SimpleName: disallowMovement(1003) into MethodInvocation(1004) at 1", "Insert SimpleName: info(237) into MethodInvocation(239) at 0", "Insert SimpleName: getPreferredModule(238) into MethodInvocation(239) at 1", "Insert SimpleName: preferredModule(247) into MethodInvocation(248) at 2", "Insert SimpleName: modulesWithReferences(424) into Assignment: =(431) at 0", "Insert ClassInstanceCreation(430) into Assignment: =(431) at 1", "Insert MethodInvocation(470) into Assignment: =(471) at 1", "Insert SimpleName: preferredModule(263) into MethodInvocation(265) at 2", "Insert SimpleType: BitSet(426) into ClassInstanceCreation(430) at 0", "Insert MethodInvocation(429) into ClassInstanceCreation(430) at 1", "Insert SimpleName: checkNotNull(468) into MethodInvocation(470) at 0", "Insert SimpleName: declModule(469) into MethodInvocation(470) at 1", "Update SimpleName: preferredModule(402) to modulesWithReferences", "Move SimpleName: preferredModule(402) into MethodInvocation(478) at 2", "Insert SimpleName: preferredModule(257) into MethodInvocation(258) at 2", "Insert SimpleName: BitSet(425) into SimpleType: BitSet(426) at 0", "Insert SimpleName: graph(427) into MethodInvocation(429) at 0", "Insert SimpleName: getModuleCount(428) into MethodInvocation(429) at 1", "Delete QualifiedName: info.preferredModule(239)", "Delete QualifiedName: info.preferredModule(249)", "Delete QualifiedName: info.preferredModule(255)", "Delete QualifiedName: info.preferredModule(324)", "Delete ReturnStatement(385)", "Delete SimpleName: allowMove(383)", "Delete PrefixExpression: !(384)", "Delete SimpleName: m(392)", "Delete SimpleName: ImmutableList(399)", "Delete SimpleName: of(400)", "Delete SimpleName: m(401)", "Delete MethodInvocation(403)", "Delete Block(409)", "Delete MethodDeclaration(410)", "Delete SimpleName: preferredModule(450)", "Delete NullLiteral(451)", "Delete InfixExpression: !=(452)", "Delete InfixExpression: &&(457)", "Delete QualifiedName: info.allowMove(843)", "Delete PrefixExpression: !(844)", "Delete ContinueStatement(845)", "Delete QualifiedName: info.allowMove(927)", "Delete BooleanLiteral: false(928)", "Delete Assignment: =(929)"]}}, {"JSModuleGraph_cluster": {"actions": [{"root": "INS SimpleType: BitSet to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: BitSet to SingleVariableDeclaration at 0"]}, {"root": "INS ForStatement to Block at 4", "operations": ["INS SimpleName: dependentIndex to InfixExpression: >= at 0", "INS Assignment: = to ForStatement at 2", "INS SimpleName: dependentModules to MethodInvocation at 0", "INS SimpleName: nextSetBit to MethodInvocation at 1", "INS InfixExpression: >= to ForStatement at 1", "INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS ForStatement to Block at 4", "INS SimpleName: dependentIndex to VariableDeclarationFragment at 0", "INS SimpleName: dependentIndex to InfixExpression: + at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS SimpleName: dependentIndex to Assignment: = at 0", "INS SimpleName: dependentModules to MethodInvocation at 0", "INS SimpleName: nextSetBit to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS MethodInvocation to Assignment: = at 1", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from  to consider to  indices of modules to consider", "operations": ["UPD TextElement:  to consider from  to consider to  indices of modules to consider"]}, {"root": "UPDATE from Collection to BitSet", "operations": ["UPD SimpleName: Collection from Collection to BitSet"]}, {"root": "MOVE from SimpleType: BitSet", "operations": ["MOV SimpleName: Collection to SimpleType: BitSet at 0"]}, {"root": "MOVE from ForStatement", "operations": ["MOV Block to ForStatement at 3"]}, {"root": "DEL ParameterizedType: Collection<JSModule>", "operations": ["DEL ParameterizedType: Collection<JSModule>", "DEL SimpleType: Collection", "DEL SimpleName: JSModule", "DEL SimpleType: JSModule"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: dependentIndex", "DEL SimpleName: getIndex", "DEL SimpleName: module"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL SimpleName: module", "DEL SimpleType: JSModule", "DEL EnhancedForStatement", "DEL SimpleName: JSModule", "DEL SimpleName: dependentModules", "DEL SingleVariableDeclaration"]}]}}, {"JSModuleGraph_diff": {"operations": ["Insert SimpleType: BitSet(861) into SingleVariableDeclaration(863) at 0", "Insert ForStatement(928) into Block(988) at 4", "Update TextElement:  to consider(851) to  indices of modules to consider", "Update SimpleName: Collection(860) to BitSet", "Move SimpleName: Collection(860) into SimpleType: BitSet(861) at 0", "Insert VariableDeclarationExpression(900) into ForStatement(928) at 0", "Insert InfixExpression: >=(903) into ForStatement(928) at 1", "Insert Assignment: =(911) into ForStatement(928) at 2", "Move Block(923) into ForStatement(928) at 3", "Insert PrimitiveType: int(893) into VariableDeclarationExpression(900) at 0", "Insert VariableDeclarationFragment(899) into VariableDeclarationExpression(900) at 1", "Insert SimpleName: dependentIndex(901) into InfixExpression: >=(903) at 0", "Insert NumberLiteral: 0(902) into InfixExpression: >=(903) at 1", "Insert SimpleName: dependentIndex(904) into Assignment: =(911) at 0", "Insert MethodInvocation(910) into Assignment: =(911) at 1", "Insert SimpleName: dependentIndex(894) into VariableDeclarationFragment(899) at 0", "Insert MethodInvocation(898) into VariableDeclarationFragment(899) at 1", "Insert SimpleName: dependentModules(905) into MethodInvocation(910) at 0", "Insert SimpleName: nextSetBit(906) into MethodInvocation(910) at 1", "Insert InfixExpression: +(909) into MethodInvocation(910) at 2", "Insert SimpleName: dependentModules(895) into MethodInvocation(898) at 0", "Insert SimpleName: nextSetBit(896) into MethodInvocation(898) at 1", "Insert NumberLiteral: 0(897) into MethodInvocation(898) at 2", "Insert SimpleName: dependentIndex(907) into InfixExpression: +(909) at 0", "Insert NumberLiteral: 1(908) into InfixExpression: +(909) at 1", "Delete SimpleType: Collection(861)", "Delete SimpleName: JSModule(862)", "Delete SimpleType: JSModule(863)", "Delete ParameterizedType: Collection<JSModule>(864)", "Delete PrimitiveType: int(901)", "Delete SimpleName: dependentIndex(902)", "Delete SimpleName: module(903)", "Delete SimpleName: getIndex(904)", "Delete MethodInvocation(905)", "Delete VariableDeclarationFragment(906)", "Delete VariableDeclarationStatement(907)", "Delete SimpleName: JSModule(896)", "Delete SimpleType: JSModule(897)", "Delete SimpleName: module(898)", "Delete SingleVariableDeclaration(899)", "Delete SimpleName: dependentModules(900)", "Delete EnhancedForStatement(924)"]}}], "commit_stats": [{"total_files": 3, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}