{"application": "apache-cxf-fediz", "csha": "cae5c37f3cb6a9250fb2c5c52c16cd0cc759dd6b", "files": [{"TrustedIssuer_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: java.util.regex.Pattern to ImportDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 3", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 3", "INS SimpleName: subject to VariableDeclarationFragment at 0", "INS SimpleName: Pattern to SimpleType: Pattern at 0", "INS SimpleType: Pattern to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS Modifier: public to MethodDeclaration at 0", "INS IfStatement to Block at 1", "INS MethodInvocation to InfixExpression: != at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS ReturnStatement to Block at 0", "INS SimpleName: compile to MethodInvocation at 1", "INS ReturnStatement to Block at 2", "INS SimpleName: getSubject to MethodInvocation at 1", "INS SimpleType: Pattern to MethodDeclaration at 1", "INS SimpleName: trustedIssuerType to MethodInvocation at 0", "INS SimpleName: Pattern to SimpleType: Pattern at 0", "INS InfixExpression: != to IfStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: getCompiledSubject to MethodDeclaration at 2", "INS SimpleName: getSubject to MethodInvocation at 1", "INS Block to MethodDeclaration at 3", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: subject to ReturnStatement at 0", "INS SimpleName: subject to ReturnStatement at 0", "INS SimpleName: subject to InfixExpression: != at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: trustedIssuerType to MethodInvocation at 0", "INS SimpleName: subject to Assignment: = at 0", "INS SimpleName: Pattern to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS NullLiteral to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: subject to FieldAccess at 1", "INS ExpressionStatement to Block at 1", "INS FieldAccess to Assignment: = at 0"]}]}}, {"TrustedIssuer_diff": {"operations": ["Insert ImportDeclaration(19) into CompilationUnit(270) at 1", "Insert QualifiedName: java.util.regex.Pattern(18) into ImportDeclaration(19) at 0", "Insert FieldDeclaration(38) into TypeDeclaration: class(269) at 3", "Insert MethodDeclaration(108) into TypeDeclaration: class(269) at 7", "Insert Modifier: private(33) into FieldDeclaration(38) at 0", "Insert SimpleType: Pattern(35) into FieldDeclaration(38) at 1", "Insert VariableDeclarationFragment(37) into FieldDeclaration(38) at 2", "Insert Modifier: public(78) into MethodDeclaration(108) at 0", "Insert SimpleType: Pattern(80) into MethodDeclaration(108) at 1", "Insert SimpleName: getCompiledSubject(81) into MethodDeclaration(108) at 2", "Insert Block(107) into MethodDeclaration(108) at 3", "Insert SimpleName: Pattern(34) into SimpleType: Pattern(35) at 0", "Insert SimpleName: subject(36) into VariableDeclarationFragment(37) at 0", "Insert SimpleName: Pattern(79) into SimpleType: Pattern(80) at 0", "Insert IfStatement(88) into Block(107) at 0", "Insert IfStatement(104) into Block(107) at 1", "Insert ReturnStatement(106) into Block(107) at 2", "Insert ExpressionStatement(136) into Block(137) at 1", "Insert InfixExpression: !=(84) into IfStatement(88) at 0", "Insert Block(87) into IfStatement(88) at 1", "Insert InfixExpression: !=(93) into IfStatement(104) at 0", "Insert Block(103) into IfStatement(104) at 1", "Insert SimpleName: subject(105) into ReturnStatement(106) at 0", "Insert Assignment: =(135) into ExpressionStatement(136) at 0", "Insert SimpleName: subject(82) into InfixExpression: !=(84) at 0", "Insert NullLiteral(83) into InfixExpression: !=(84) at 1", "Insert ReturnStatement(86) into Block(87) at 0", "Insert MethodInvocation(91) into InfixExpression: !=(93) at 0", "Insert NullLiteral(92) into InfixExpression: !=(93) at 1", "Insert ExpressionStatement(102) into Block(103) at 0", "Insert FieldAccess(133) into Assignment: =(135) at 0", "Insert NullLiteral(134) into Assignment: =(135) at 1", "Insert SimpleName: subject(85) into ReturnStatement(86) at 0", "Insert SimpleName: trustedIssuerType(89) into MethodInvocation(91) at 0", "Insert SimpleName: getSubject(90) into MethodInvocation(91) at 1", "Insert Assignment: =(101) into ExpressionStatement(102) at 0", "Insert ThisExpression(131) into FieldAccess(133) at 0", "Insert SimpleName: subject(132) into FieldAccess(133) at 1", "Insert SimpleName: subject(94) into Assignment: =(101) at 0", "Insert MethodInvocation(100) into Assignment: =(101) at 1", "Insert SimpleName: Pattern(95) into MethodInvocation(100) at 0", "Insert SimpleName: compile(96) into MethodInvocation(100) at 1", "Insert MethodInvocation(99) into MethodInvocation(100) at 2", "Insert SimpleName: trustedIssuerType(97) into MethodInvocation(99) at 0", "Insert SimpleName: getSubject(98) into MethodInvocation(99) at 1"]}}, {"FedizSignatureTrustValidator_cluster": {"actions": [{"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.regex.PatternSyntaxException", "DEL ImportDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: ex", "DEL MethodInvocation", "DEL TextElement: the subject DN of a certificate", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: setSubjectConstraints", "DEL MethodInvocation", "DEL SimpleName: compile", "DEL Javadoc", "DEL Block", "DEL SimpleName: Pattern", "DEL ClassInstanceCreation", "DEL SimpleName: subjectDNPatterns", "DEL Block", "DEL TryStatement", "DEL SingleVariableDeclaration", "DEL SimpleType: PatternSyntaxException", "DEL SimpleType: String", "DEL NullLiteral", "DEL SimpleName: constraint", "DEL ThrowStatement", "DEL SimpleName: constraints", "DEL InfixExpression: !=", "DEL SimpleName: PatternSyntaxException", "DEL SingleVariableDeclaration", "DEL SimpleType: ArrayList", "DEL SimpleName: String", "DEL SimpleName: constraints", "DEL Assignment: =", "DEL SimpleName: add", "DEL TextElement: Set a list of Strings corresponding to regular expression constraints on", "DEL SimpleName: ArrayList", "DEL ExpressionStatement", "DEL EnhancedForStatement", "DEL Block", "DEL SimpleType: Pattern", "DEL ParameterizedType: List<String>", "DEL SimpleType: String", "DEL SimpleName: constraints", "DEL MethodDeclaration", "DEL SimpleType: List", "DEL SimpleName: Pattern", "DEL SimpleName: List", "DEL CatchClause", "DEL Block", "DEL PrimitiveType: void", "DEL IfStatement", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: subjectDNPatterns", "DEL SimpleName: constraint", "DEL SimpleName: String", "DEL SimpleName: trim", "DEL TagElement", "DEL SimpleName: ex", "DEL ParameterizedType: ArrayList<Pattern>"]}]}}, {"FedizSignatureTrustValidator_diff": {"operations": ["Delete QualifiedName: java.util.List(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: java.util.regex.PatternSyntaxException(36)", "Delete ImportDeclaration(37)", "Delete TextElement: Set a list of Strings corresponding to regular expression constraints on(158)", "Delete TextElement: the subject DN of a certificate(159)", "Delete TagElement(160)", "Delete Javadoc(161)", "Delete Modifier: public(162)", "Delete PrimitiveType: void(163)", "Delete SimpleName: setSubjectConstraints(164)", "Delete SimpleName: List(165)", "Delete SimpleType: List(166)", "Delete SimpleName: String(167)", "Delete SimpleType: String(168)", "Delete ParameterizedType: List<String>(169)", "Delete SimpleName: constraints(170)", "Delete SingleVariableDeclaration(171)", "Delete SimpleName: constraints(172)", "Delete NullLiteral(173)", "Delete InfixExpression: !=(174)", "Delete SimpleName: subjectDNPatterns(175)", "Delete SimpleName: ArrayList(176)", "Delete SimpleType: ArrayList(177)", "Delete SimpleName: Pattern(178)", "Delete SimpleType: Pattern(179)", "Delete ParameterizedType: ArrayList<Pattern>(180)", "Delete ClassInstanceCreation(181)", "Delete Assignment: =(182)", "Delete ExpressionStatement(183)", "Delete SimpleName: String(184)", "Delete SimpleType: String(185)", "Delete SimpleName: constraint(186)", "Delete SingleVariableDeclaration(187)", "Delete SimpleName: constraints(188)", "Delete SimpleName: subjectDNPatterns(189)", "Delete SimpleName: add(190)", "Delete SimpleName: Pattern(191)", "Delete SimpleName: compile(192)", "Delete SimpleName: constraint(193)", "Delete SimpleName: trim(194)", "Delete MethodInvocation(195)", "Delete MethodInvocation(196)", "Delete MethodInvocation(197)", "Delete ExpressionStatement(198)", "Delete Block(199)", "Delete SimpleName: PatternSyntaxException(200)", "Delete SimpleType: PatternSyntaxException(201)", "Delete SimpleName: ex(202)", "Delete SingleVariableDeclaration(203)", "Delete SimpleName: ex(204)", "Delete ThrowStatement(205)", "Delete Block(206)", "Delete CatchClause(207)", "Delete TryStatement(208)", "Delete Block(209)", "Delete EnhancedForStatement(210)", "Delete Block(211)", "Delete IfStatement(212)", "Delete Block(213)", "Delete MethodDeclaration(214)"]}}, {"SAMLTokenValidator_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS QualifiedName: java.util.regex.Pattern to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 9"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: getCompiledSubject to MethodInvocation at 1", "INS SimpleName: Pattern to SimpleType: Pattern at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: Pattern to VariableDeclarationStatement at 0", "INS SimpleName: subjectConstraint to VariableDeclarationFragment at 0", "INS SimpleName: ti to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleType: Pattern to ParameterizedType: ArrayList<Pattern> at 1", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS ParameterizedType: ArrayList<Pattern> to ClassInstanceCreation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NumberLiteral: 1 to ClassInstanceCreation at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: Pattern to SimpleType: Pattern at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<Pattern> at 0"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS IfStatement to Block at 2", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: add to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: subjectConstraint to InfixExpression: != at 0", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from List<String> to List<Pattern>", "operations": ["UPD ParameterizedType: List<String> from List<String> to List<Pattern>"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: List<String> to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from String to Pattern", "operations": ["UPD SimpleType: String from String to Pattern", "UPD SimpleName: String from String to Pattern"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: subjectConstraints to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from ti to subjectConstraints", "operations": ["UPD SimpleName: ti from ti to subjectConstraints"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getSubject to MethodInvocation at 2", "MOV SimpleName: ti to MethodInvocation at 0"]}, {"root": "UPDATE from getSubject to subjectConstraint", "operations": ["UPD SimpleName: getSubject from getSubject to subjectConstraint"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: Collections", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: singletonList", "DEL MethodInvocation"]}]}}, {"SAMLTokenValidator_diff": {"operations": ["Insert ImportDeclaration(35) into CompilationUnit(2123) at 9", "Insert QualifiedName: java.util.regex.Pattern(34) into ImportDeclaration(35) at 0", "Insert VariableDeclarationStatement(402) into Block(547) at 0", "Insert VariableDeclarationStatement(417) into Block(547) at 1", "Insert IfStatement(427) into Block(547) at 2", "Insert SimpleType: Pattern(396) into VariableDeclarationStatement(402) at 0", "Insert VariableDeclarationFragment(401) into VariableDeclarationStatement(402) at 1", "Update ParameterizedType: List<String>(397) to List<Pattern>", "Move ParameterizedType: List<String>(397) into VariableDeclarationStatement(417) at 0", "Insert VariableDeclarationFragment(416) into VariableDeclarationStatement(417) at 1", "Insert InfixExpression: !=(420) into IfStatement(427) at 0", "Insert Block(426) into IfStatement(427) at 1", "Insert SimpleName: Pattern(395) into SimpleType: Pattern(396) at 0", "Insert SimpleName: subjectConstraint(397) into VariableDeclarationFragment(401) at 0", "Insert MethodInvocation(400) into VariableDeclarationFragment(401) at 1", "Update SimpleType: String(396) to Pattern", "Move SimpleName: subjectConstraints(398) into VariableDeclarationFragment(416) at 0", "Insert ClassInstanceCreation(415) into VariableDeclarationFragment(416) at 1", "Insert SimpleName: subjectConstraint(418) into InfixExpression: !=(420) at 0", "Insert NullLiteral(419) into InfixExpression: !=(420) at 1", "Insert ExpressionStatement(425) into Block(426) at 0", "Insert SimpleName: ti(398) into MethodInvocation(400) at 0", "Insert SimpleName: getCompiledSubject(399) into MethodInvocation(400) at 1", "Update SimpleName: String(395) to Pattern", "Insert ParameterizedType: ArrayList<Pattern>(413) into ClassInstanceCreation(415) at 0", "Insert NumberLiteral: 1(414) into ClassInstanceCreation(415) at 1", "Insert MethodInvocation(424) into ExpressionStatement(425) at 0", "Insert SimpleType: ArrayList(410) into ParameterizedType: ArrayList<Pattern>(413) at 0", "Insert SimpleType: Pattern(412) into ParameterizedType: ArrayList<Pattern>(413) at 1", "Update SimpleName: ti(401) to subjectConstraints", "Move SimpleName: ti(401) into MethodInvocation(424) at 0", "Insert SimpleName: add(422) into MethodInvocation(424) at 1", "Update SimpleName: getSubject(402) to subjectConstraint", "Move SimpleName: getSubject(402) into MethodInvocation(424) at 2", "Insert SimpleName: ArrayList(409) into SimpleType: ArrayList(410) at 0", "Insert SimpleName: Pattern(411) into SimpleType: Pattern(412) at 0", "Delete SimpleName: Collections(399)", "Delete SimpleName: singletonList(400)", "Delete MethodInvocation(403)", "Delete MethodInvocation(404)", "Delete VariableDeclarationFragment(405)", "Delete VariableDeclarationStatement(406)"]}}, {"SamlAssertionValidator_cluster": {"actions": [{"root": "UPDATE from List<String> to Collection<Pattern>", "operations": ["UPD ParameterizedType: List<String> from List<String> to Collection<Pattern>"]}, {"root": "UPDATE from List to Collection", "operations": ["UPD SimpleName: List from List to Collection", "UPD SimpleType: List from List to Collection"]}, {"root": "MOVE from ParameterizedType: List<String>", "operations": ["MOV SimpleType: Pattern to ParameterizedType: List<String> at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: clear to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: subjectDNPatterns to MethodInvocation at 0"]}, {"root": "UPDATE from add to addAll", "operations": ["UPD SimpleName: add from add to addAll"]}, {"root": "UPDATE from constraint to constraints", "operations": ["UPD SimpleName: constraint from constraint to constraints"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: constraint to MethodInvocation at 2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.regex.PatternSyntaxException", "DEL ImportDeclaration"]}, {"root": "DEL SimpleType: String", "operations": ["DEL SimpleType: String", "DEL SimpleName: String"]}, {"root": "DEL Assignment: =", "operations": ["DEL SimpleType: ArrayList", "DEL SimpleName: ArrayList", "DEL ClassInstanceCreation", "DEL SimpleName: subjectDNPatterns", "DEL Assignment: =", "DEL ParameterizedType: ArrayList<Pattern>"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: trim", "DEL SimpleName: Pattern", "DEL SimpleName: compile", "DEL MethodInvocation", "DEL MethodInvocation"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL SimpleType: String", "DEL CatchClause", "DEL Block", "DEL SimpleName: ex", "DEL TryStatement", "DEL SimpleName: constraints", "DEL Block", "DEL SimpleType: PatternSyntaxException", "DEL ThrowStatement", "DEL Block", "DEL SimpleName: constraint", "DEL SimpleName: PatternSyntaxException", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL SimpleName: ex", "DEL SingleVariableDeclaration", "DEL EnhancedForStatement"]}]}}, {"SamlAssertionValidator_diff": {"operations": ["Update ParameterizedType: List<String>(173) to Collection<Pattern>", "Update SimpleType: List(170) to Collection", "Move SimpleType: Pattern(183) into ParameterizedType: Collection<Pattern>(171) at 1", "Update SimpleName: List(169) to Collection", "Move ExpressionStatement(202) into Block(186) at 1", "Insert MethodInvocation(179) into ExpressionStatement(180) at 0", "Insert SimpleName: subjectDNPatterns(177) into MethodInvocation(179) at 0", "Insert SimpleName: clear(178) into MethodInvocation(179) at 1", "Update SimpleName: add(194) to addAll", "Update SimpleName: constraint(197) to constraints", "Move SimpleName: constraint(197) into MethodInvocation(184) at 2", "Delete QualifiedName: java.util.regex.PatternSyntaxException(28)", "Delete ImportDeclaration(29)", "Delete SimpleName: String(171)", "Delete SimpleType: String(172)", "Delete SimpleName: subjectDNPatterns(179)", "Delete SimpleName: ArrayList(180)", "Delete SimpleType: ArrayList(181)", "Delete ParameterizedType: ArrayList<Pattern>(184)", "Delete ClassInstanceCreation(185)", "Delete Assignment: =(186)", "Delete SimpleName: Pattern(195)", "Delete SimpleName: compile(196)", "Delete SimpleName: trim(198)", "Delete MethodInvocation(199)", "Delete MethodInvocation(200)", "Delete SimpleName: String(188)", "Delete SimpleType: String(189)", "Delete SimpleName: constraint(190)", "Delete SingleVariableDeclaration(191)", "Delete SimpleName: constraints(192)", "Delete Block(203)", "Delete SimpleName: PatternSyntaxException(204)", "Delete SimpleType: PatternSyntaxException(205)", "Delete SimpleName: ex(206)", "Delete SingleVariableDeclaration(207)", "Delete SimpleName: ex(208)", "Delete ThrowStatement(209)", "Delete Block(210)", "Delete CatchClause(211)", "Delete TryStatement(212)", "Delete Block(213)", "Delete EnhancedForStatement(214)"]}}, {"SAMLProtocolResponseValidator_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: java.util.regex.Pattern to ImportDeclaration at 0"]}, {"root": "UPDATE from java.util.Collections to java.util.ArrayList", "operations": ["UPD QualifiedName: java.util.Collections from java.util.Collections to java.util.ArrayList"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleType: Pattern to VariableDeclarationStatement at 0", "INS SimpleName: ti to MethodInvocation at 0", "INS SimpleName: subjectConstraint to VariableDeclarationFragment at 0", "INS SimpleName: getCompiledSubject to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Pattern to SimpleType: Pattern at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationStatement to Block at 1", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS NumberLiteral: 1 to ClassInstanceCreation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ParameterizedType: ArrayList<Pattern> to ClassInstanceCreation at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<Pattern> at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: Pattern to SimpleType: Pattern at 0", "INS SimpleType: Pattern to ParameterizedType: ArrayList<Pattern> at 1"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS IfStatement to Block at 2", "INS Block to IfStatement at 1", "INS SimpleName: subjectConstraint to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: add to MethodInvocation at 1"]}, {"root": "UPDATE from List<String> to List<Pattern>", "operations": ["UPD ParameterizedType: List<String> from List<String> to List<Pattern>"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: List<String> to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from String to Pattern", "operations": ["UPD SimpleName: String from String to Pattern", "UPD SimpleType: String from String to Pattern"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: subjectConstraints to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from ti to subjectConstraints", "operations": ["UPD SimpleName: ti from ti to subjectConstraints"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ti to MethodInvocation at 0", "MOV SimpleName: getSubject to MethodInvocation at 2"]}, {"root": "UPDATE from getSubject to subjectConstraint", "operations": ["UPD SimpleName: getSubject from getSubject to subjectConstraint"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: singletonList", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: Collections", "DEL MethodInvocation"]}]}}, {"SAMLProtocolResponseValidator_diff": {"operations": ["Insert ImportDeclaration(23) into CompilationUnit(971) at 3", "Update QualifiedName: java.util.Collections(18) to java.util.ArrayList", "Insert QualifiedName: java.util.regex.Pattern(22) into ImportDeclaration(23) at 0", "Insert VariableDeclarationStatement(668) into Block(809) at 0", "Insert VariableDeclarationStatement(683) into Block(809) at 1", "Insert IfStatement(693) into Block(809) at 2", "Insert SimpleType: Pattern(662) into VariableDeclarationStatement(668) at 0", "Insert VariableDeclarationFragment(667) into VariableDeclarationStatement(668) at 1", "Update ParameterizedType: List<String>(663) to List<Pattern>", "Move ParameterizedType: List<String>(663) into VariableDeclarationStatement(683) at 0", "Insert VariableDeclarationFragment(682) into VariableDeclarationStatement(683) at 1", "Insert InfixExpression: !=(686) into IfStatement(693) at 0", "Insert Block(692) into IfStatement(693) at 1", "Insert SimpleName: Pattern(661) into SimpleType: Pattern(662) at 0", "Insert SimpleName: subjectConstraint(663) into VariableDeclarationFragment(667) at 0", "Insert MethodInvocation(666) into VariableDeclarationFragment(667) at 1", "Update SimpleType: String(662) to Pattern", "Move SimpleName: subjectConstraints(664) into VariableDeclarationFragment(682) at 0", "Insert ClassInstanceCreation(681) into VariableDeclarationFragment(682) at 1", "Insert SimpleName: subjectConstraint(684) into InfixExpression: !=(686) at 0", "Insert NullLiteral(685) into InfixExpression: !=(686) at 1", "Insert ExpressionStatement(691) into Block(692) at 0", "Insert SimpleName: ti(664) into MethodInvocation(666) at 0", "Insert SimpleName: getCompiledSubject(665) into MethodInvocation(666) at 1", "Update SimpleName: String(661) to Pattern", "Insert ParameterizedType: ArrayList<Pattern>(679) into ClassInstanceCreation(681) at 0", "Insert NumberLiteral: 1(680) into ClassInstanceCreation(681) at 1", "Insert MethodInvocation(690) into ExpressionStatement(691) at 0", "Insert SimpleType: ArrayList(676) into ParameterizedType: ArrayList<Pattern>(679) at 0", "Insert SimpleType: Pattern(678) into ParameterizedType: ArrayList<Pattern>(679) at 1", "Update SimpleName: ti(667) to subjectConstraints", "Move SimpleName: ti(667) into MethodInvocation(690) at 0", "Insert SimpleName: add(688) into MethodInvocation(690) at 1", "Update SimpleName: getSubject(668) to subjectConstraint", "Move SimpleName: getSubject(668) into MethodInvocation(690) at 2", "Insert SimpleName: ArrayList(675) into SimpleType: ArrayList(676) at 0", "Insert SimpleName: Pattern(677) into SimpleType: Pattern(678) at 0", "Delete SimpleName: Collections(665)", "Delete SimpleName: singletonList(666)", "Delete MethodInvocation(669)", "Delete MethodInvocation(670)", "Delete VariableDeclarationFragment(671)", "Delete VariableDeclarationStatement(672)"]}}], "commit_stats": [{"total_files": 5, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}