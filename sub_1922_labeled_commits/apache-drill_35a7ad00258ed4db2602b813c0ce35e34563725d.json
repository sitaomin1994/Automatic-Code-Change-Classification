{"application": "apache-drill", "csha": "35a7ad00258ed4db2602b813c0ce35e34563725d", "files": [{"HashAggTemplate_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: prefix to SingleVariableDeclaration at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 14"]}, {"root": "UPDATE from RESIZING_TIME to RESIZING_TIME_MS", "operations": ["UPD SimpleName: RESIZING_TIME from RESIZING_TIME to RESIZING_TIME_MS"]}, {"root": "INS TagElement: @param to Javadoc at 2", "operations": ["INS TagElement: @param to Javadoc at 2", "INS SimpleName: prefix to TagElement: @param at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 11"]}, {"root": "INS ExpressionStatement to Block at 9", "operations": ["INS ExpressionStatement to Block at 9", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: stats to FieldAccess at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: Metric.SPILL_CYCLE to MethodInvocation at 2", "INS SimpleName: cycleNum to MethodInvocation at 3", "INS SimpleName: setLongStat to MethodInvocation at 1", "INS FieldAccess to MethodInvocation at 0"]}, {"root": "UPDATE from long to boolean", "operations": ["UPD PrimitiveType: long from long to boolean"]}, {"root": "INS IfStatement to IfStatement at 2", "operations": ["INS SimpleName: logger to MethodInvocation at 0", "INS InfixExpression: - to MethodInvocation at 4", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: allocatedBeforeHTput to MethodInvocation at 3", "INS BooleanLiteral: true to Assignment: = at 1", "INS SimpleName: trace to MethodInvocation at 1", "INS SimpleName: needToCheckIfSpillIsNeeded to Assignment: = at 0", "INS SimpleName: currentPartition to MethodInvocation at 5", "INS ExpressionStatement to Block at 1", "INS SimpleName: needToCheckIfSpillIsNeeded to Assignment: = at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: > to IfStatement at 0", "INS Block to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS StringLiteral: \"MEMORY CHECK HT: was allocated {}  added {} partition {}\" to MethodInvocation at 2", "INS IfStatement to IfStatement at 2", "INS BooleanLiteral: true to Assignment: = at 1", "INS SimpleName: allocatedBeforeAggCol to InfixExpression: > at 0", "INS IfStatement to IfStatement at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: allocatedBeforeAggCol to InfixExpression: - at 0", "INS SimpleName: allocatedBeforeHTput to InfixExpression: - at 1", "INS SimpleName: allocatedBeforeHTput to InfixExpression: > at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 9", "MOV VariableDeclarationStatement to Block at 5", "MOV VariableDeclarationStatement to Block at 8", "MOV ExpressionStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 7"]}, {"root": "INS IfStatement to Block at 6", "operations": ["INS IfStatement to Block at 6", "INS Block to IfStatement at 2"]}, {"root": "INS SimpleName: numPendingOutput to MethodInvocation at 6", "operations": ["INS SimpleName: numPendingOutput to MethodInvocation at 6"]}, {"root": "UPDATE from allocatedBefore to allocatedBeforeHTput", "operations": ["UPD SimpleName: allocatedBefore from allocatedBefore to allocatedBeforeHTput", "UPD SimpleName: allocatedBefore from allocatedBefore to allocatedBeforeHTput"]}, {"root": "UPDATE from putStatus to needToCheckIfSpillIsNeeded", "operations": ["UPD SimpleName: putStatus from putStatus to needToCheckIfSpillIsNeeded", "UPD SimpleName: addedMem from addedMem to needToCheckIfSpillIsNeeded"]}, {"root": "INS BooleanLiteral: false to VariableDeclarationFragment at 1", "operations": ["INS BooleanLiteral: false to VariableDeclarationFragment at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV SimpleName: putStatus to InfixExpression: && at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS VariableDeclarationStatement to Block at 4", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NumberLiteral: 1 to VariableDeclarationFragment at 1", "INS SimpleName: maxSize to VariableDeclarationFragment at 0"]}, {"root": "INS ForStatement to Block at 5", "operations": ["INS SimpleName: insp to PostfixExpression: ++ at 0", "INS ForStatement to Block at 5", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS PostfixExpression: ++ to ForStatement at 2", "INS VariableDeclarationExpression to ForStatement at 0", "INS Block to ForStatement at 3", "INS SimpleName: insp to InfixExpression: < at 0", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: numPartitions to InfixExpression: < at 1"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS SimpleName: MAX_BATCH_SIZE to InfixExpression: * at 0", "INS ExpressionStatement to Block at 6", "INS SimpleName: maxMemoryNeeded to Assignment: += at 0", "INS NumberLiteral: 4 to InfixExpression: * at 3", "INS NumberLiteral: 2 to InfixExpression: * at 1", "INS SimpleName: maxSize to InfixExpression: * at 4", "INS Assignment: += to ExpressionStatement at 0", "INS NumberLiteral: 2 to InfixExpression: * at 2", "INS InfixExpression: * to Assignment: += at 1"]}, {"root": "UPDATE from Metric.RESIZING_TIME to Metric.RESIZING_TIME_MS", "operations": ["UPD QualifiedName: Metric.RESIZING_TIME from Metric.RESIZING_TIME to Metric.RESIZING_TIME_MS"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV SimpleName: handlingSpills to IfStatement at 0"]}, {"root": "INS SimpleName: putStatus to InfixExpression: == at 0", "operations": ["INS SimpleName: putStatus to InfixExpression: == at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from beforeAlloc to memAllocBeforeNext", "operations": ["UPD SimpleName: beforeAlloc from beforeAlloc to memAllocBeforeNext", "UPD SimpleName: beforeAlloc from beforeAlloc to memAllocBeforeNext"]}, {"root": "UPDATE from afterAlloc to memAllocAfterNext", "operations": ["UPD SimpleName: afterAlloc from afterAlloc to memAllocAfterNext", "UPD SimpleName: afterAlloc from afterAlloc to memAllocAfterNext"]}, {"root": "INS SimpleName: numPendingOutput to MethodInvocation at 6", "operations": ["INS SimpleName: numPendingOutput to MethodInvocation at 6"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV InfixExpression: * to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from trace to debug", "operations": ["UPD SimpleName: trace from trace to debug", "UPD SimpleName: trace from trace to debug"]}, {"root": "INS MethodInvocation to InfixExpression: * at 1", "operations": ["INS SimpleName: plannedBatches to MethodInvocation at 3", "INS MethodInvocation to InfixExpression: * at 1", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS SimpleName: Math to MethodInvocation at 0", "INS SimpleName: max to MethodInvocation at 1"]}, {"root": "UPDATE from hashTableDoublingSizeNeeded to insp", "operations": ["UPD SimpleName: hashTableDoublingSizeNeeded from hashTableDoublingSizeNeeded to insp"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV NumberLiteral: 0 to VariableDeclarationFragment at 1", "MOV SimpleName: hashTableDoublingSizeNeeded to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from += to =", "operations": ["UPD Assignment: += from += to ="]}, {"root": "UPDATE from \"Memory needed {}, Est batch size {}, mem limit {}\" to \"Max memory needed {}, Est batch size {}, mem limit {}\"", "operations": ["UPD StringLiteral: \"Memory needed {}, Est batch size {}, mem limit {}\" from \"Memory needed {}, Est batch size {}, mem limit {}\" to \"Max memory needed {}, Est batch size {}, mem limit {}\""]}, {"root": "UPDATE from \"Found a bigger incoming batch: {} , prior estimate was: {}\" to \"Found a bigger next {} batch: {} , prior estimate was: {}, mem allocated {}\"", "operations": ["UPD StringLiteral: \"Found a bigger incoming batch: {} , prior estimate was: {}\" from \"Found a bigger incoming batch: {} , prior estimate was: {}\" to \"Found a bigger next {} batch: {} , prior estimate was: {}, mem allocated {}\""]}, {"root": "INS ConditionalExpression to MethodInvocation at 3", "operations": ["INS StringLiteral: \"incoming\" to ConditionalExpression at 2", "INS SimpleName: handlingSpills to ConditionalExpression at 0", "INS StringLiteral: \"spill\" to ConditionalExpression at 1", "INS ConditionalExpression to MethodInvocation at 3"]}, {"root": "INS SimpleName: memAllocAfterNext to MethodInvocation at 6", "operations": ["INS SimpleName: memAllocAfterNext to MethodInvocation at 6"]}, {"root": "INS SimpleName: prefix to InfixExpression: + at 0", "operations": ["INS SimpleName: prefix to InfixExpression: + at 0"]}, {"root": "UPDATE from \"OOM at \" to \" OOM at \"", "operations": ["UPD StringLiteral: \"OOM at \" from \"OOM at \" to \" OOM at \""]}, {"root": "INS InfixExpression: + to MethodInvocation at 1", "operations": ["INS InfixExpression: + to MethodInvocation at 1", "INS StringLiteral: \"HT was: \" to InfixExpression: + at 0", "INS SimpleName: allocatedBeforeHTput to InfixExpression: + at 1"]}, {"root": "UPDATE from \"MEMORY CHECK AGG: added {}  total (with HT) added {}\" to \"MEMORY CHECK AGG: allocated now {}, added {}  total (with HT) added {}\"", "operations": ["UPD StringLiteral: \"MEMORY CHECK AGG: added {}  total (with HT) added {}\" from \"MEMORY CHECK AGG: added {}  total (with HT) added {}\" to \"MEMORY CHECK AGG: allocated now {}, added {}  total (with HT) added {}\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS BooleanLiteral: true to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: needToCheckIfSpillIsNeeded to Assignment: = at 0", "INS ExpressionStatement to Block at 2"]}, {"root": "UPDATE from hashTableDoublingSizeNeeded to maxSize", "operations": ["UPD SimpleName: hashTableDoublingSizeNeeded from hashTableDoublingSizeNeeded to maxSize"]}, {"root": "INS MethodInvocation to Assignment: += at 1", "operations": ["INS SimpleName: Math to MethodInvocation at 0", "INS MethodInvocation to Assignment: += at 1", "INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: batchHolders to ArrayAccess at 0", "INS SimpleName: maxSize to MethodInvocation at 2", "INS SimpleName: insp to ArrayAccess at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: max to MethodInvocation at 1"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS SimpleName: is2ndPhase to InfixExpression: && at 0", "INS InfixExpression: > to InfixExpression: && at 1", "INS SimpleName: getWriteBytes to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: > at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS SimpleName: spillSet to MethodInvocation at 0", "INS InfixExpression: && to IfStatement at 0"]}, {"root": "UPDATE from 8 to 2", "operations": ["UPD NumberLiteral: 8 from 8 to 2"]}, {"root": "INS StringLiteral: \"AGGR\" to MethodInvocation at 1", "operations": ["INS StringLiteral: \"AGGR\" to MethodInvocation at 1"]}, {"root": "UPDATE from extraMemoryNeededForResize to size", "operations": ["UPD SimpleName: extraMemoryNeededForResize from extraMemoryNeededForResize to size"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: extraMemoryNeededForResize to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.expression.ErrorCollector"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.expression.ErrorCollectorImpl"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL IfStatement"]}, {"root": "DEL SimpleName: is2ndPhase", "operations": ["DEL SimpleName: is2ndPhase"]}, {"root": "DEL InfixExpression: -", "operations": ["DEL SimpleName: allocatedBefore", "DEL InfixExpression: -"]}, {"root": "DEL IfStatement", "operations": ["DEL NumberLiteral: 0", "DEL SimpleName: addedMem", "DEL SimpleName: logger", "DEL InfixExpression: >", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: trace", "DEL MethodInvocation", "DEL IfStatement", "DEL StringLiteral: \"MEMORY CHECK HT: allocated {}  added {} partition {}\"", "DEL SimpleName: allocatedBefore", "DEL SimpleName: addedMem", "DEL SimpleName: currentPartition"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL PrimitiveType: long", "DEL VariableDeclarationStatement"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: HashTable", "DEL EnhancedForStatement", "DEL SimpleType: HashTable", "DEL SimpleName: htables", "DEL SimpleName: ht"]}, {"root": "DEL SimpleName: plannedBatches", "operations": ["DEL SimpleName: plannedBatches"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL SimpleName: hashTableDoublingSizeNeeded", "DEL InfixExpression: +"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: ht", "DEL MethodInvocation"]}]}}, {"HashAggTemplate_diff": {"operations": ["Insert SingleVariableDeclaration(3758) into MethodDeclaration(3825) at 4", "Move VariableDeclarationStatement(3944) into Block(4324) at 14", "Update SimpleName: RESIZING_TIME(557) to RESIZING_TIME_MS", "Insert TagElement: @param(3749) into Javadoc(3750) at 2", "Insert SimpleType: String(3756) into SingleVariableDeclaration(3758) at 0", "Insert SimpleName: prefix(3757) into SingleVariableDeclaration(3758) at 1", "Move VariableDeclarationStatement(3976) into Block(4324) at 11", "Insert ExpressionStatement(4440) into Block(4474) at 9", "Insert SimpleName: prefix(3748) into TagElement: @param(3749) at 0", "Insert SimpleName: String(3755) into SimpleType: String(3756) at 0", "Update PrimitiveType: long(3945) to boolean", "Insert IfStatement(4076) into IfStatement(4077) at 2", "Insert MethodInvocation(4439) into ExpressionStatement(4440) at 0", "Move VariableDeclarationStatement(1989) into Block(2130) at 5", "Insert IfStatement(1995) into Block(2130) at 6", "Move VariableDeclarationStatement(2004) into Block(2130) at 7", "Move VariableDeclarationStatement(2011) into Block(2130) at 8", "Move IfStatement(2027) into Block(2130) at 9", "Insert SimpleName: numPendingOutput(3570) into MethodInvocation(3571) at 6", "Update SimpleName: allocatedBefore(3896) to allocatedBeforeHTput", "Update SimpleName: addedMem(3946) to needToCheckIfSpillIsNeeded", "Insert BooleanLiteral: false(3961) into VariableDeclarationFragment(3962) at 1", "Move InfixExpression: ==(4077) into IfStatement(4076) at 0", "Insert Block(4056) into IfStatement(4076) at 1", "Insert IfStatement(4075) into IfStatement(4076) at 2", "Update SimpleName: putStatus(4075) to needToCheckIfSpillIsNeeded", "Move SimpleName: putStatus(4075) into InfixExpression: &&(4118) at 0", "Insert VariableDeclarationStatement(4143) into Block(4322) at 1", "Insert ForStatement(4167) into Block(4322) at 2", "Insert ExpressionStatement(4176) into Block(4322) at 3", "Update QualifiedName: Metric.RESIZING_TIME(4363) to Metric.RESIZING_TIME_MS", "Insert FieldAccess(4435) into MethodInvocation(4439) at 0", "Insert SimpleName: setLongStat(4436) into MethodInvocation(4439) at 1", "Insert QualifiedName: Metric.SPILL_CYCLE(4437) into MethodInvocation(4439) at 2", "Insert SimpleName: cycleNum(4438) into MethodInvocation(4439) at 3", "Move SimpleName: handlingSpills(1970) into IfStatement(1995) at 0", "Move Block(1982) into IfStatement(1995) at 1", "Insert Block(1994) into IfStatement(1995) at 2", "Insert SimpleName: putStatus(4046) into InfixExpression: ==(4048) at 0", "Move ExpressionStatement(4082) into Block(4056) at 0", "Insert ExpressionStatement(4055) into Block(4056) at 1", "Insert InfixExpression: >(4059) into IfStatement(4075) at 0", "Insert Block(4074) into IfStatement(4075) at 1", "Insert PrimitiveType: int(4139) into VariableDeclarationStatement(4143) at 0", "Insert VariableDeclarationFragment(4142) into VariableDeclarationStatement(4143) at 1", "Insert VariableDeclarationExpression(4148) into ForStatement(4167) at 0", "Insert InfixExpression: <(4151) into ForStatement(4167) at 1", "Insert PostfixExpression: ++(4153) into ForStatement(4167) at 2", "Insert Block(4166) into ForStatement(4167) at 3", "Insert Assignment: +=(4175) into ExpressionStatement(4176) at 0", "Insert ThisExpression(4433) into FieldAccess(4435) at 0", "Insert SimpleName: stats(4434) into FieldAccess(4435) at 1", "Update SimpleName: beforeAlloc(1984) to memAllocBeforeNext", "Move ExpressionStatement(1997) into Block(1994) at 0", "Update SimpleName: afterAlloc(1999) to memAllocAfterNext", "Insert SimpleName: numPendingOutput(2939) into MethodInvocation(2940) at 6", "Insert Assignment: =(4054) into ExpressionStatement(4055) at 0", "Insert SimpleName: allocatedBeforeAggCol(4057) into InfixExpression: >(4059) at 0", "Insert SimpleName: allocatedBeforeHTput(4058) into InfixExpression: >(4059) at 1", "Insert ExpressionStatement(4063) into Block(4074) at 0", "Insert ExpressionStatement(4073) into Block(4074) at 1", "Move InfixExpression: *(4114) into VariableDeclarationFragment(4137) at 1", "Insert SimpleName: maxSize(4140) into VariableDeclarationFragment(4142) at 0", "Insert NumberLiteral: 1(4141) into VariableDeclarationFragment(4142) at 1", "Insert PrimitiveType: int(4144) into VariableDeclarationExpression(4148) at 0", "Insert VariableDeclarationFragment(4147) into VariableDeclarationExpression(4148) at 1", "Insert SimpleName: insp(4149) into InfixExpression: <(4151) at 0", "Insert SimpleName: numPartitions(4150) into InfixExpression: <(4151) at 1", "Insert SimpleName: insp(4152) into PostfixExpression: ++(4153) at 0", "Move ExpressionStatement(4098) into Block(4166) at 0", "Insert SimpleName: maxMemoryNeeded(4168) into Assignment: +=(4175) at 0", "Insert InfixExpression: *(4174) into Assignment: +=(4175) at 1", "Update SimpleName: trace(4120) to debug", "Update SimpleName: afterAlloc(2007) to memAllocAfterNext", "Update SimpleName: beforeAlloc(2008) to memAllocBeforeNext", "Insert SimpleName: needToCheckIfSpillIsNeeded(4052) into Assignment: =(4054) at 0", "Insert BooleanLiteral: true(4053) into Assignment: =(4054) at 1", "Insert Assignment: =(4062) into ExpressionStatement(4063) at 0", "Insert MethodInvocation(4072) into ExpressionStatement(4073) at 0", "Insert MethodInvocation(4126) into InfixExpression: *(4136) at 1", "Update SimpleName: hashTableDoublingSizeNeeded(4084) to insp", "Move SimpleName: hashTableDoublingSizeNeeded(4084) into VariableDeclarationFragment(4147) at 0", "Move NumberLiteral: 0(4085) into VariableDeclarationFragment(4147) at 1", "Update Assignment: +=(4097) to =", "Insert SimpleName: MAX_BATCH_SIZE(4169) into InfixExpression: *(4174) at 0", "Insert NumberLiteral: 2(4170) into InfixExpression: *(4174) at 1", "Insert NumberLiteral: 2(4171) into InfixExpression: *(4174) at 2", "Insert NumberLiteral: 4(4172) into InfixExpression: *(4174) at 3", "Insert SimpleName: maxSize(4173) into InfixExpression: *(4174) at 4", "Update StringLiteral: \"Memory needed {}, Est batch size {}, mem limit {}\"(4122) to \"Max memory needed {}, Est batch size {}, mem limit {}\"", "Update SimpleName: trace(2016) to debug", "Update StringLiteral: \"Found a bigger incoming batch: {} , prior estimate was: {}\"(2017) to \"Found a bigger next {} batch: {} , prior estimate was: {}, mem allocated {}\"", "Insert ConditionalExpression(2019) into MethodInvocation(2023) at 3", "Insert SimpleName: memAllocAfterNext(2022) into MethodInvocation(2023) at 6", "Insert SimpleName: prefix(3779) into InfixExpression: +(3792) at 0", "Update StringLiteral: \"OOM at \"(3764) to \" OOM at \"", "Insert InfixExpression: +(3939) into MethodInvocation(3940) at 1", "Update StringLiteral: \"MEMORY CHECK AGG: added {}  total (with HT) added {}\"(4000) to \"MEMORY CHECK AGG: allocated now {}, added {}  total (with HT) added {}\"", "Move MethodInvocation(3949) into MethodInvocation(4007) at 3", "Insert ExpressionStatement(4026) into Block(4027) at 2", "Insert SimpleName: needToCheckIfSpillIsNeeded(4060) into Assignment: =(4062) at 0", "Insert BooleanLiteral: true(4061) into Assignment: =(4062) at 1", "Insert SimpleName: logger(4064) into MethodInvocation(4072) at 0", "Insert SimpleName: trace(4065) into MethodInvocation(4072) at 1", "Insert StringLiteral: \"MEMORY CHECK HT: was allocated {}  added {} partition {}\"(4066) into MethodInvocation(4072) at 2", "Insert SimpleName: allocatedBeforeHTput(4067) into MethodInvocation(4072) at 3", "Insert InfixExpression: -(4070) into MethodInvocation(4072) at 4", "Insert SimpleName: currentPartition(4071) into MethodInvocation(4072) at 5", "Insert SimpleName: Math(4122) into MethodInvocation(4126) at 0", "Insert SimpleName: max(4123) into MethodInvocation(4126) at 1", "Insert NumberLiteral: 1(4124) into MethodInvocation(4126) at 2", "Insert SimpleName: plannedBatches(4125) into MethodInvocation(4126) at 3", "Update SimpleName: hashTableDoublingSizeNeeded(4093) to maxSize", "Insert MethodInvocation(4163) into Assignment: =(4164) at 1", "Insert SimpleName: handlingSpills(2016) into ConditionalExpression(2019) at 0", "Insert StringLiteral: \"spill\"(2017) into ConditionalExpression(2019) at 1", "Insert StringLiteral: \"incoming\"(2018) into ConditionalExpression(2019) at 2", "Insert InfixExpression: &&(3325) into IfStatement(3343) at 0", "Insert StringLiteral: \"HT was: \"(3937) into InfixExpression: +(3939) at 0", "Insert SimpleName: allocatedBeforeHTput(3938) into InfixExpression: +(3939) at 1", "Update SimpleName: allocatedBefore(3994) to allocatedBeforeHTput", "Insert Assignment: =(4025) into ExpressionStatement(4026) at 0", "Insert SimpleName: allocatedBeforeAggCol(4068) into InfixExpression: -(4070) at 0", "Insert SimpleName: allocatedBeforeHTput(4069) into InfixExpression: -(4070) at 1", "Insert SimpleName: Math(4155) into MethodInvocation(4163) at 0", "Insert SimpleName: max(4156) into MethodInvocation(4163) at 1", "Insert SimpleName: maxSize(4157) into MethodInvocation(4163) at 2", "Insert MethodInvocation(4162) into MethodInvocation(4163) at 3", "Update NumberLiteral: 8(1384) to 2", "Insert SimpleName: is2ndPhase(3319) into InfixExpression: &&(3325) at 0", "Insert InfixExpression: >(3324) into InfixExpression: &&(3325) at 1", "Insert SimpleName: needToCheckIfSpillIsNeeded(4023) into Assignment: =(4025) at 0", "Insert BooleanLiteral: true(4024) into Assignment: =(4025) at 1", "Insert StringLiteral: \"AGGR\"(4037) into MethodInvocation(4038) at 1", "Insert ArrayAccess(4160) into MethodInvocation(4162) at 0", "Update SimpleName: extraMemoryNeededForResize(4095) to size", "Move SimpleName: extraMemoryNeededForResize(4095) into MethodInvocation(4162) at 1", "Insert MethodInvocation(3322) into InfixExpression: >(3324) at 0", "Insert NumberLiteral: 0(3323) into InfixExpression: >(3324) at 1", "Insert SimpleName: batchHolders(4158) into ArrayAccess(4160) at 0", "Insert SimpleName: insp(4159) into ArrayAccess(4160) at 1", "Insert SimpleName: spillSet(3320) into MethodInvocation(3322) at 0", "Insert SimpleName: getWriteBytes(3321) into MethodInvocation(3322) at 1", "Delete QualifiedName: org.apache.drill.common.expression.ErrorCollector(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: org.apache.drill.common.expression.ErrorCollectorImpl(22)", "Delete ImportDeclaration(23)", "Delete Block(2028)", "Delete IfStatement(2029)", "Delete SimpleName: is2ndPhase(3317)", "Delete SimpleName: allocatedBefore(3950)", "Delete InfixExpression: -(3951)", "Delete SimpleName: addedMem(3954)", "Delete NumberLiteral: 0(3955)", "Delete InfixExpression: >(3956)", "Delete SimpleName: logger(3957)", "Delete SimpleName: trace(3958)", "Delete StringLiteral: \"MEMORY CHECK HT: allocated {}  added {} partition {}\"(3959)", "Delete SimpleName: allocatedBefore(3960)", "Delete SimpleName: addedMem(3961)", "Delete SimpleName: currentPartition(3962)", "Delete MethodInvocation(3963)", "Delete ExpressionStatement(3964)", "Delete Block(3965)", "Delete IfStatement(3966)", "Delete PrimitiveType: long(4083)", "Delete VariableDeclarationFragment(4086)", "Delete VariableDeclarationStatement(4087)", "Delete SimpleName: HashTable(4088)", "Delete SimpleType: HashTable(4089)", "Delete SimpleName: ht(4090)", "Delete SingleVariableDeclaration(4091)", "Delete SimpleName: htables(4092)", "Delete Block(4099)", "Delete EnhancedForStatement(4100)", "Delete SimpleName: plannedBatches(4104)", "Delete SimpleName: hashTableDoublingSizeNeeded(4115)", "Delete InfixExpression: +(4116)", "Delete SimpleName: ht(4094)", "Delete MethodInvocation(4096)"]}}, {"HashTable_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SimpleName: numExpectedRecords to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS PrimitiveType: int to SingleVariableDeclaration at 0"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL PrimitiveType: long", "DEL SimpleName: extraMemoryNeededForResize", "DEL Modifier: public"]}]}}, {"HashTable_diff": {"operations": ["Insert SingleVariableDeclaration(258) into MethodDeclaration(259) at 7", "Insert PrimitiveType: int(256) into SingleVariableDeclaration(258) at 0", "Insert SimpleName: numExpectedRecords(257) into SingleVariableDeclaration(258) at 1", "Delete Modifier: public(209)", "Delete PrimitiveType: long(210)", "Delete SimpleName: extraMemoryNeededForResize(211)", "Delete MethodDeclaration(212)"]}}, {"HashTableTemplate_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 46", "operations": ["INS SimpleName: numExpectedRecords to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 46", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS PrimitiveType: int to SingleVariableDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 7", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Block to MethodDeclaration at 9"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 1", "MOV SimpleName: extraMemoryNeededForResize to MethodDeclaration at 3", "MOV PrimitiveType: long to MethodDeclaration at 2"]}, {"root": "UPDATE from long to boolean", "operations": ["UPD PrimitiveType: long from long to boolean"]}, {"root": "UPDATE from extraMemoryNeededForResize to outputKeys", "operations": ["UPD SimpleName: extraMemoryNeededForResize from extraMemoryNeededForResize to outputKeys"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SimpleName: numExpectedRecords to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS PrimitiveType: int to SingleVariableDeclaration at 0"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS SimpleName: numExpectedRecords to MethodInvocation at 5", "INS ReturnStatement to Block at 1", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: numRecords to MethodInvocation at 4", "MOV SimpleName: outContainer to MethodInvocation at 2", "MOV SimpleName: outStartIndex to MethodInvocation at 3", "MOV MethodInvocation to MethodInvocation at 0", "MOV SimpleName: outputKeys to MethodInvocation at 1"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS Block to IfStatement at 2", "INS SimpleName: numRecords to MethodInvocation at 4", "INS IfStatement to Block at 3", "INS SimpleName: numExpectedRecords to MethodInvocation at 5", "INS SimpleName: transfer to MethodInvocation at 1", "INS StringLiteral: \"Performing partial output of keys, from index {}, num {} (out of {})\" to MethodInvocation at 2", "INS SimpleName: numExpectedRecords to InfixExpression: == at 1", "INS SimpleName: outStartIndex to InfixExpression: == at 0", "INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: == to InfixExpression: && at 1", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS SimpleName: debug to MethodInvocation at 1", "INS InfixExpression: == to InfixExpression: && at 0", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: logger to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: numRecords to InfixExpression: == at 0", "INS SimpleName: tp to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: outStartIndex to MethodInvocation at 3"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL Block", "DEL InfixExpression: >", "DEL ReturnStatement", "DEL SimpleName: newSize", "DEL NumberLiteral: 2", "DEL SimpleName: tableSize", "DEL TagElement: @return", "DEL SimpleName: Override", "DEL SimpleName: tableSize", "DEL MarkerAnnotation", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL PrimitiveType: int", "DEL SimpleName: newSize", "DEL InfixExpression: *", "DEL TextElement:  Size of extra memory needed if the HT (i.e. startIndices) is doubled", "DEL SimpleName: MAXIMUM_CAPACITY", "DEL Assignment: =", "DEL Block", "DEL Block", "DEL NumberLiteral: 4", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleName: newSize", "DEL IfStatement", "DEL ReturnStatement", "DEL SimpleName: MAXIMUM_CAPACITY", "DEL ExpressionStatement", "DEL SimpleName: roundUpToPowerOf2", "DEL IfStatement", "DEL NumberLiteral: 0", "DEL VariableDeclarationStatement", "DEL InfixExpression: *", "DEL SimpleName: MAXIMUM_CAPACITY", "DEL SimpleName: newSize"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL ReturnStatement", "DEL Block", "DEL PrefixExpression: !", "DEL IfStatement", "DEL BooleanLiteral: false"]}, {"root": "DEL ReturnStatement", "operations": ["DEL BooleanLiteral: true", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL PrimitiveType: boolean", "DEL SimpleName: outputKeys", "DEL MethodDeclaration"]}]}}, {"HashTableTemplate_diff": {"operations": ["Insert MethodDeclaration(2548) into TypeDeclaration: class(2669) at 45", "Move MarkerAnnotation(2524) into MethodDeclaration(2548) at 0", "Move Modifier: public(1651) into MethodDeclaration(2548) at 1", "Update PrimitiveType: long(1652) to boolean", "Move PrimitiveType: long(1652) into MethodDeclaration(2548) at 2", "Update SimpleName: extraMemoryNeededForResize(1653) to outputKeys", "Move SimpleName: extraMemoryNeededForResize(1653) into MethodDeclaration(2548) at 3", "Move SingleVariableDeclaration(2530) into MethodDeclaration(2548) at 4", "Move SingleVariableDeclaration(2534) into MethodDeclaration(2548) at 5", "Move SingleVariableDeclaration(2537) into MethodDeclaration(2548) at 6", "Move SingleVariableDeclaration(2540) into MethodDeclaration(2548) at 7", "Insert SingleVariableDeclaration(2529) into MethodDeclaration(2548) at 8", "Move Block(2563) into MethodDeclaration(2548) at 9", "Insert SingleVariableDeclaration(1042) into MethodDeclaration(1132) at 6", "Insert PrimitiveType: int(2527) into SingleVariableDeclaration(2529) at 0", "Insert SimpleName: numExpectedRecords(2528) into SingleVariableDeclaration(2529) at 1", "Insert ReturnStatement(2546) into Block(2547) at 1", "Insert PrimitiveType: int(1040) into SingleVariableDeclaration(1042) at 0", "Insert SimpleName: numExpectedRecords(1041) into SingleVariableDeclaration(1042) at 1", "Insert MethodInvocation(2545) into ReturnStatement(2546) at 0", "Move MethodInvocation(2550) into MethodInvocation(2545) at 0", "Move SimpleName: outputKeys(2551) into MethodInvocation(2545) at 1", "Move SimpleName: outContainer(2552) into MethodInvocation(2545) at 2", "Move SimpleName: outStartIndex(2553) into MethodInvocation(2545) at 3", "Move SimpleName: numRecords(2554) into MethodInvocation(2545) at 4", "Insert SimpleName: numExpectedRecords(2544) into MethodInvocation(2545) at 5", "Insert IfStatement(1126) into Block(1127) at 3", "Insert InfixExpression: &&(1105) into IfStatement(1126) at 0", "Insert Block(1110) into IfStatement(1126) at 1", "Insert Block(1125) into IfStatement(1126) at 2", "Insert InfixExpression: ==(1101) into InfixExpression: &&(1105) at 0", "Insert InfixExpression: ==(1104) into InfixExpression: &&(1105) at 1", "Insert ExpressionStatement(1109) into Block(1110) at 0", "Insert ExpressionStatement(1118) into Block(1125) at 0", "Move ExpressionStatement(1101) into Block(1125) at 1", "Insert SimpleName: outStartIndex(1099) into InfixExpression: ==(1101) at 0", "Insert NumberLiteral: 0(1100) into InfixExpression: ==(1101) at 1", "Insert SimpleName: numRecords(1102) into InfixExpression: ==(1104) at 0", "Insert SimpleName: numExpectedRecords(1103) into InfixExpression: ==(1104) at 1", "Insert MethodInvocation(1108) into ExpressionStatement(1109) at 0", "Insert MethodInvocation(1117) into ExpressionStatement(1118) at 0", "Insert SimpleName: tp(1106) into MethodInvocation(1108) at 0", "Insert SimpleName: transfer(1107) into MethodInvocation(1108) at 1", "Insert SimpleName: logger(1111) into MethodInvocation(1117) at 0", "Insert SimpleName: debug(1112) into MethodInvocation(1117) at 1", "Insert StringLiteral: \"Performing partial output of keys, from index {}, num {} (out of {})\"(1113) into MethodInvocation(1117) at 2", "Insert SimpleName: outStartIndex(1114) into MethodInvocation(1117) at 3", "Insert SimpleName: numRecords(1115) into MethodInvocation(1117) at 4", "Insert SimpleName: numExpectedRecords(1116) into MethodInvocation(1117) at 5", "Delete TextElement:  Size of extra memory needed if the HT (i.e. startIndices) is doubled(1646)", "Delete TagElement: @return(1647)", "Delete Javadoc(1648)", "Delete SimpleName: Override(1649)", "Delete MarkerAnnotation(1650)", "Delete SimpleName: tableSize(1654)", "Delete SimpleName: MAXIMUM_CAPACITY(1655)", "Delete InfixExpression: ==(1656)", "Delete NumberLiteral: 0(1657)", "Delete ReturnStatement(1658)", "Delete Block(1659)", "Delete IfStatement(1660)", "Delete PrimitiveType: int(1661)", "Delete SimpleName: newSize(1662)", "Delete SimpleName: roundUpToPowerOf2(1663)", "Delete NumberLiteral: 2(1664)", "Delete SimpleName: tableSize(1665)", "Delete InfixExpression: *(1666)", "Delete MethodInvocation(1667)", "Delete VariableDeclarationFragment(1668)", "Delete VariableDeclarationStatement(1669)", "Delete SimpleName: newSize(1670)", "Delete SimpleName: MAXIMUM_CAPACITY(1671)", "Delete InfixExpression: >(1672)", "Delete SimpleName: newSize(1673)", "Delete SimpleName: MAXIMUM_CAPACITY(1674)", "Delete Assignment: =(1675)", "Delete ExpressionStatement(1676)", "Delete Block(1677)", "Delete IfStatement(1678)", "Delete SimpleName: newSize(1679)", "Delete NumberLiteral: 4(1680)", "Delete InfixExpression: *(1681)", "Delete ReturnStatement(1682)", "Delete Block(1683)", "Delete MethodDeclaration(1684)", "Delete MethodInvocation(2555)", "Delete PrefixExpression: !(2556)", "Delete BooleanLiteral: false(2557)", "Delete ReturnStatement(2558)", "Delete Block(2559)", "Delete IfStatement(2560)", "Delete BooleanLiteral: true(2561)", "Delete ReturnStatement(2562)", "Delete Modifier: public(2525)", "Delete PrimitiveType: boolean(2526)", "Delete SimpleName: outputKeys(2527)", "Delete MethodDeclaration(2564)"]}}, {"HashJoinBatch_cluster": {"actions": [{"root": "UPDATE from RESIZING_TIME to RESIZING_TIME_MS", "operations": ["UPD SimpleName: RESIZING_TIME from RESIZING_TIME to RESIZING_TIME_MS"]}, {"root": "UPDATE from Metric.RESIZING_TIME to Metric.RESIZING_TIME_MS", "operations": ["UPD QualifiedName: Metric.RESIZING_TIME from Metric.RESIZING_TIME to Metric.RESIZING_TIME_MS"]}]}}, {"HashJoinBatch_diff": {"operations": ["Update SimpleName: RESIZING_TIME(335) to RESIZING_TIME_MS", "Update QualifiedName: Metric.RESIZING_TIME(1762) to Metric.RESIZING_TIME_MS"]}}], "commit_stats": [{"total_files": 4, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}