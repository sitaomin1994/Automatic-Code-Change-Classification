{"application": "google-closure-templates", "csha": "4c17a4bc30da3279ad9b7fd136c138685db94bfa", "files": [{"ErrorNodes_cluster": {"actions": [{"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: LET_CONTENT_NODE", "DEL ClassInstanceCreation", "DEL SimpleType: LetContentNode", "DEL Modifier: final", "DEL StringLiteral: \"$error\"", "DEL VariableDeclarationFragment", "DEL BooleanLiteral: true", "DEL SimpleName: LetContentNode", "DEL Modifier: static", "DEL FieldDeclaration", "DEL NumberLiteral: 1", "DEL SimpleType: LetContentNode", "DEL SimpleName: LetContentNode", "DEL PrefixExpression: -"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL StringLiteral: \"$error: 1\"", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL SimpleType: LetValueNode", "DEL SimpleType: LetValueNode", "DEL ClassInstanceCreation", "DEL PrefixExpression: -", "DEL SimpleName: LetValueNode", "DEL SimpleName: LET_VALUE_NODE", "DEL Modifier: static", "DEL NumberLiteral: 1", "DEL SimpleName: LetValueNode", "DEL BooleanLiteral: true"]}]}}, {"ErrorNodes_diff": {"operations": ["Delete Modifier: static(42)", "Delete Modifier: final(43)", "Delete SimpleName: LetContentNode(44)", "Delete SimpleType: LetContentNode(45)", "Delete SimpleName: LET_CONTENT_NODE(46)", "Delete SimpleName: LetContentNode(47)", "Delete SimpleType: LetContentNode(48)", "Delete NumberLiteral: 1(49)", "Delete PrefixExpression: -(50)", "Delete BooleanLiteral: true(51)", "Delete StringLiteral: \"$error\"(52)", "Delete ClassInstanceCreation(53)", "Delete VariableDeclarationFragment(54)", "Delete FieldDeclaration(55)", "Delete Modifier: static(56)", "Delete Modifier: final(57)", "Delete SimpleName: LetValueNode(58)", "Delete SimpleType: LetValueNode(59)", "Delete SimpleName: LET_VALUE_NODE(60)", "Delete SimpleName: LetValueNode(61)", "Delete SimpleType: LetValueNode(62)", "Delete NumberLiteral: 1(63)", "Delete PrefixExpression: -(64)", "Delete BooleanLiteral: true(65)", "Delete StringLiteral: \"$error: 1\"(66)", "Delete ClassInstanceCreation(67)", "Delete VariableDeclarationFragment(68)", "Delete FieldDeclaration(69)"]}}, {"LetContentNode_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: com.google.template.soy.base.SourceLocation to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: com.google.template.soy.soyparse.ErrorReporter.Checkpoint to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: com.google.template.soy.soyparse.TransitionalThrowingErrorReporter to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "UPDATE from com.google.template.soy.soytree.defn.LocalVar to com.google.template.soy.soyparse.ErrorReporter", "operations": ["UPD QualifiedName: com.google.template.soy.soytree.defn.LocalVar from com.google.template.soy.soytree.defn.LocalVar to com.google.template.soy.soyparse.ErrorReporter"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleName: contentKind to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: contentKind to FieldAccess at 1", "INS ExpressionStatement to Block at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: ContentKind to SimpleType: ContentKind at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Block to MethodDeclaration at 6", "INS FieldAccess to Assignment: = at 0", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleName: localVarName to SingleVariableDeclaration at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: contentKind to Assignment: = at 1", "INS SimpleType: ContentKind to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: localVarName to SuperConstructorInvocation at 1", "INS SimpleName: LetContentNode to MethodDeclaration at 1", "INS SimpleName: commandText to SuperConstructorInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: id to SuperConstructorInvocation at 0", "INS SuperConstructorInvocation to Block at 0"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 32", "operations": ["INS SimpleName: TransitionalThrowingErrorReporter to SimpleType: TransitionalThrowingErrorReporter at 0", "INS Modifier: public to TypeDeclaration: class at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: commandText to VariableDeclarationFragment at 0", "INS SimpleType: LetContentNode to MethodDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS TagElement: @link to TagElement at 1", "INS SimpleName: id to ClassInstanceCreation at 1", "INS Javadoc to TypeDeclaration: class at 0", "INS SimpleType: TransitionalThrowingErrorReporter to VariableDeclarationStatement at 0", "INS SimpleName: node to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 5", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS Block to MethodDeclaration at 6", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: LetContentNode to SimpleType: LetContentNode at 0", "INS Modifier: final to FieldDeclaration at 1", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: LetContentNode to SimpleType: LetContentNode at 0", "INS ExpressionStatement to Block at 2", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: ErrorReporter to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 3", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: id to Assignment: = at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS Block to MethodDeclaration at 3", "INS TagElement to Javadoc at 0", "INS ReturnStatement to Block at 6", "INS SimpleName: sourceLocation to Assignment: = at 1", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: sourceLocation to VariableDeclarationFragment at 0", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS Block to MethodDeclaration at 5", "INS TypeDeclaration: class to TypeDeclaration: class at 32", "INS SimpleName: checkpoint to MethodInvocation at 1", "INS IfStatement to Block at 3", "INS SimpleName: Checkpoint to SimpleType: Checkpoint at 0", "INS Modifier: public to FieldDeclaration at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: commandText to Assignment: = at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: LetContentNode to SimpleType: LetContentNode at 0", "INS SimpleType: LetContentNode to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: LetContentNode to TagElement: @link at 0", "INS SimpleType: LetContentNode to MethodDeclaration at 2", "INS SimpleName: build to MethodInvocation at 0", "INS Modifier: private to MethodDeclaration at 0", "INS Modifier: static to TypeDeclaration: class at 2", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS TagElement: @code to TagElement at 4", "INS ThisExpression to FieldAccess at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Block to IfStatement at 1", "INS SimpleName: node to ReturnStatement at 0", "INS QualifiedName: LetContentNode.Builder to SimpleType: LetContentNode.Builder at 0", "INS FieldAccess to Assignment: = at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: setSourceLocation to MethodInvocation at 1", "INS SimpleName: checkpoint to VariableDeclarationFragment at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: errorReporter to SingleVariableDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: int to FieldDeclaration at 2", "INS TextElement: . to TagElement at 2", "INS SimpleType: LetContentNode to FieldDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS Modifier: final to TypeDeclaration: class at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: ERROR to ReturnStatement at 0", "INS SimpleName: ERROR to VariableDeclarationFragment at 0", "INS SimpleName: TransitionalThrowingErrorReporter to SimpleType: TransitionalThrowingErrorReporter at 0", "INS SimpleName: errorReporter to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 4", "INS Modifier: public to MethodDeclaration at 1", "INS TagElement: @link to TagElement at 1", "INS SimpleName: LetContentNode to SimpleType: LetContentNode at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS SimpleName: buildAndThrowIfInvalid to MethodInvocation at 1", "INS SimpleName: sourceLocation to FieldAccess at 1", "INS SimpleName: commandText to ClassInstanceCreation at 3", "INS StringLiteral: \"$error\" to ClassInstanceCreation at 2", "INS SimpleType: SourceLocation to FieldDeclaration at 2", "INS SimpleName: ErrorReporter to SimpleType: ErrorReporter at 0", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS SimpleType: String to FieldDeclaration at 2", "INS SimpleName: throwIfErrorsPresent to MethodInvocation at 1", "INS PrefixExpression: - to ClassInstanceCreation at 1", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Builder to TypeDeclaration: class at 4", "INS SimpleType: LetContentNode to VariableDeclarationStatement at 0", "INS SimpleName: LetContentNode to SimpleType: LetContentNode at 0", "INS TextElement:  and {Builder#ERROR} is returned. to TagElement at 5", "INS Modifier: final to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: commandText to FieldAccess at 1", "INS QualifiedName: parseResult.contentKind to ClassInstanceCreation at 4", "INS TextElement: Returns a new  to TagElement at 0", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: sourceLocation to SingleVariableDeclaration at 1", "INS TextElement:  built from the builder's state. If the builder's state to TagElement at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: buildAndThrowIfInvalid to MethodDeclaration at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: errorsSince to MethodInvocation at 1", "INS ReturnStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: LetContentNode to TagElement: @link at 0", "INS SimpleName: SourceLocation to SimpleType: SourceLocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: SourceLocation to SimpleType: SourceLocation at 0", "INS SimpleType: Checkpoint to VariableDeclarationStatement at 0", "INS SimpleName: errorReporter to VariableDeclarationFragment at 0", "INS TagElement to Javadoc at 0", "INS ExpressionStatement to Block at 0", "INS QualifiedName: SourceLocation.UNKNOWN to ClassInstanceCreation at 3", "INS SimpleName: build to MethodDeclaration at 3", "INS SimpleType: TransitionalThrowingErrorReporter to ClassInstanceCreation at 0", "INS SimpleName: commandText to SingleVariableDeclaration at 1", "INS SimpleName: checkpoint to MethodInvocation at 2", "INS ClassInstanceCreation to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: node to ReturnStatement at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: id to VariableDeclarationFragment at 0", "INS TextElement:  errorManager to TagElement: @code at 0", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: node to VariableDeclarationFragment at 0", "INS Javadoc to MethodDeclaration at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: node to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS TextElement: is invalid, errors are reported to the  to TagElement at 3", "INS SimpleName: sourceLocation to MethodInvocation at 2", "INS SimpleName: errorReporter to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS SimpleType: SourceLocation to SingleVariableDeclaration at 0", "INS FieldAccess to Assignment: = at 0", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleType: LetContentNode.Builder to ClassInstanceCreation at 0", "INS SimpleName: errorReporter to MethodInvocation at 1", "INS SimpleName: id to FieldAccess at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Modifier: public to MethodDeclaration at 1", "MOV SimpleName: LetContentNode to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 1", "MOV IfStatement to Block at 2"]}, {"root": "UPDATE from LetContentNode to Builder", "operations": ["UPD SimpleName: LetContentNode from LetContentNode to Builder"]}, {"root": "UPDATE from  The id for this node. to Builder for ", "operations": ["UPD TextElement:  The id for this node. from  The id for this node. to Builder for "]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  The id for this node. to TagElement at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @param to Javadoc at 0", "MOV TagElement: @throws to Javadoc at 2", "MOV TagElement: @param to Javadoc at 1"]}, {"root": "UPDATE from @throws to @param", "operations": ["UPD TagElement: @throws from @throws to @param"]}, {"root": "UPDATE from boolean to int", "operations": ["UPD PrimitiveType: boolean from boolean to int"]}, {"root": "UPDATE from isLocalVarNameUniquified to id", "operations": ["UPD SimpleName: isLocalVarNameUniquified from isLocalVarNameUniquified to id", "UPD SimpleName: isLocalVarNameUniquified from isLocalVarNameUniquified to id"]}, {"root": "UPDATE from appending node id). to  The node's id.", "operations": ["UPD TextElement: appending node id). from appending node id). to  The node's id."]}, {"root": "UPDATE from  The command text. to  The node's command text.", "operations": ["UPD TextElement:  The command text. from  The command text. to  The node's command text."]}, {"root": "UPDATE from SoySyntaxException to sourceLocation", "operations": ["UPD SimpleName: SoySyntaxException from SoySyntaxException to sourceLocation"]}, {"root": "UPDATE from  If a syntax error is found. to  The node's source location.", "operations": ["UPD TextElement:  If a syntax error is found. from  If a syntax error is found. to  The node's source location."]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: errorReporter to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: sourceLocation to MethodInvocation at 3", "INS SimpleName: report to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from setVar to errorReporter", "operations": ["UPD SimpleName: setVar from setVar to errorReporter"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setVar to MethodInvocation at 0"]}, {"root": "INS SimpleName: errorReporter to MethodInvocation at 2", "operations": ["INS SimpleName: errorReporter to MethodInvocation at 2"]}, {"root": "INS SimpleName: sourceLocation to MethodInvocation at 3", "operations": ["INS SimpleName: sourceLocation to MethodInvocation at 3"]}, {"root": "UPDATE from LocalVar to LetContentNode", "operations": ["UPD SimpleName: LocalVar from LocalVar to LetContentNode", "UPD SimpleType: LocalVar from LocalVar to LetContentNode"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV QualifiedName: parseResult.localVarName to ClassInstanceCreation at 2", "MOV SimpleType: LocalVar to ClassInstanceCreation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: createWithoutMetaInfo to MethodInvocation at 1", "MOV SimpleName: SoySyntaxException to MethodInvocation at 0"]}, {"root": "UPDATE from createWithoutMetaInfo to createWithMetaInfo", "operations": ["UPD SimpleName: createWithoutMetaInfo from createWithoutMetaInfo to createWithMetaInfo"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV StringLiteral: \"A 'let' tag should contain a value if and only if it is also self-ending (with a\" to InfixExpression: + at 0", "MOV StringLiteral: \" trailing '/') (invalid tag is {let \" to InfixExpression: + at 1"]}, {"root": "UPDATE from \" trailing '/') (invalid tag is {let \" to \" trailing '/').\"", "operations": ["UPD StringLiteral: \" trailing '/') (invalid tag is {let \" from \" trailing '/') (invalid tag is {let \" to \" trailing '/').\""]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: contentKind", "DEL Block", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: isLocalVarNameUniquified", "DEL ClassInstanceCreation", "DEL ThisExpression", "DEL SimpleName: commandText", "DEL SimpleName: id", "DEL SimpleName: id", "DEL QualifiedName: parseResult.contentKind", "DEL TagElement: @param", "DEL NullLiteral", "DEL ExpressionStatement", "DEL Javadoc", "DEL SuperConstructorInvocation", "DEL MethodInvocation", "DEL Assignment: ="]}, {"root": "DEL TextElement:  Whether the local var name is already uniquified (e.g. by", "operations": ["DEL TextElement:  Whether the local var name is already uniquified (e.g. by"]}, {"root": "DEL ThrowStatement", "operations": ["DEL InfixExpression: +", "DEL MethodInvocation", "DEL SimpleName: commandText", "DEL ThrowStatement", "DEL InfixExpression: +", "DEL StringLiteral: \"}).\""]}]}}, {"LetContentNode_diff": {"operations": ["Move ImportDeclaration(9) into CompilationUnit(695) at 6", "Insert ImportDeclaration(3) into CompilationUnit(695) at 1", "Insert ImportDeclaration(13) into CompilationUnit(695) at 6", "Insert ImportDeclaration(15) into CompilationUnit(695) at 7", "Insert QualifiedName: com.google.template.soy.base.SourceLocation(2) into ImportDeclaration(3) at 0", "Update QualifiedName: com.google.template.soy.soytree.defn.LocalVar(10) to com.google.template.soy.soyparse.ErrorReporter", "Insert QualifiedName: com.google.template.soy.soyparse.ErrorReporter.Checkpoint(12) into ImportDeclaration(13) at 0", "Insert QualifiedName: com.google.template.soy.soyparse.TransitionalThrowingErrorReporter(14) into ImportDeclaration(15) at 0", "Insert Modifier: final(27) into TypeDeclaration: class(694) at 2", "Insert MethodDeclaration(94) into TypeDeclaration: class(694) at 8", "Insert TypeDeclaration: class(693) into TypeDeclaration: class(694) at 31", "Insert Modifier: private(58) into MethodDeclaration(94) at 0", "Insert SimpleName: LetContentNode(59) into MethodDeclaration(94) at 1", "Move SingleVariableDeclaration(69) into MethodDeclaration(94) at 2", "Insert SingleVariableDeclaration(66) into MethodDeclaration(94) at 3", "Move SingleVariableDeclaration(76) into MethodDeclaration(94) at 4", "Insert SingleVariableDeclaration(74) into MethodDeclaration(94) at 5", "Insert Block(93) into MethodDeclaration(94) at 6", "Insert Javadoc(499) into TypeDeclaration: class(693) at 0", "Insert Modifier: public(500) into TypeDeclaration: class(693) at 1", "Insert Modifier: static(501) into TypeDeclaration: class(693) at 2", "Insert Modifier: final(502) into TypeDeclaration: class(693) at 3", "Insert SimpleName: Builder(503) into TypeDeclaration: class(693) at 4", "Insert FieldDeclaration(520) into TypeDeclaration: class(693) at 5", "Insert FieldDeclaration(526) into TypeDeclaration: class(693) at 6", "Insert FieldDeclaration(533) into TypeDeclaration: class(693) at 7", "Insert FieldDeclaration(540) into TypeDeclaration: class(693) at 8", "Insert MethodDeclaration(583) into TypeDeclaration: class(693) at 9", "Insert MethodDeclaration(664) into TypeDeclaration: class(693) at 10", "Insert MethodDeclaration(692) into TypeDeclaration: class(693) at 11", "Insert SimpleType: String(64) into SingleVariableDeclaration(66) at 0", "Insert SimpleName: localVarName(65) into SingleVariableDeclaration(66) at 1", "Insert SimpleType: ContentKind(72) into SingleVariableDeclaration(74) at 0", "Insert SimpleName: contentKind(73) into SingleVariableDeclaration(74) at 1", "Insert SuperConstructorInvocation(78) into Block(93) at 0", "Insert ExpressionStatement(84) into Block(93) at 1", "Move ExpressionStatement(88) into Block(93) at 2", "Insert TagElement(498) into Javadoc(499) at 0", "Insert Modifier: public(504) into FieldDeclaration(520) at 0", "Insert Modifier: static(505) into FieldDeclaration(520) at 1", "Insert Modifier: final(506) into FieldDeclaration(520) at 2", "Insert SimpleType: LetContentNode(508) into FieldDeclaration(520) at 3", "Insert VariableDeclarationFragment(519) into FieldDeclaration(520) at 4", "Insert Modifier: private(521) into FieldDeclaration(526) at 0", "Insert Modifier: final(522) into FieldDeclaration(526) at 1", "Insert PrimitiveType: int(523) into FieldDeclaration(526) at 2", "Insert VariableDeclarationFragment(525) into FieldDeclaration(526) at 3", "Insert Modifier: private(527) into FieldDeclaration(533) at 0", "Insert Modifier: final(528) into FieldDeclaration(533) at 1", "Insert SimpleType: String(530) into FieldDeclaration(533) at 2", "Insert VariableDeclarationFragment(532) into FieldDeclaration(533) at 3", "Insert Modifier: private(534) into FieldDeclaration(540) at 0", "Insert Modifier: final(535) into FieldDeclaration(540) at 1", "Insert SimpleType: SourceLocation(537) into FieldDeclaration(540) at 2", "Insert VariableDeclarationFragment(539) into FieldDeclaration(540) at 3", "Insert Javadoc(550) into MethodDeclaration(583) at 0", "Move Modifier: public(65) into MethodDeclaration(583) at 1", "Update SimpleName: LetContentNode(66) to Builder", "Move SimpleName: LetContentNode(66) into MethodDeclaration(583) at 2", "Move SingleVariableDeclaration(72) into MethodDeclaration(583) at 3", "Insert SingleVariableDeclaration(559) into MethodDeclaration(583) at 4", "Insert SingleVariableDeclaration(563) into MethodDeclaration(583) at 5", "Insert Block(582) into MethodDeclaration(583) at 6", "Insert Javadoc(593) into MethodDeclaration(664) at 0", "Insert Modifier: public(594) into MethodDeclaration(664) at 1", "Insert SimpleType: LetContentNode(596) into MethodDeclaration(664) at 2", "Insert SimpleName: build(597) into MethodDeclaration(664) at 3", "Insert SingleVariableDeclaration(601) into MethodDeclaration(664) at 4", "Insert Block(663) into MethodDeclaration(664) at 5", "Insert Modifier: private(665) into MethodDeclaration(692) at 0", "Insert SimpleType: LetContentNode(667) into MethodDeclaration(692) at 1", "Insert SimpleName: buildAndThrowIfInvalid(668) into MethodDeclaration(692) at 2", "Insert Block(691) into MethodDeclaration(692) at 3", "Insert SimpleName: String(63) into SimpleType: String(64) at 0", "Insert SimpleName: ContentKind(71) into SimpleType: ContentKind(72) at 0", "Insert SimpleName: id(75) into SuperConstructorInvocation(78) at 0", "Insert SimpleName: localVarName(76) into SuperConstructorInvocation(78) at 1", "Insert SimpleName: commandText(77) into SuperConstructorInvocation(78) at 2", "Insert Assignment: =(83) into ExpressionStatement(84) at 0", "Update TextElement:  The id for this node.(52) to Builder for ", "Move TextElement:  The id for this node.(52) into TagElement(498) at 0", "Insert TagElement: @link(496) into TagElement(498) at 1", "Insert TextElement: .(497) into TagElement(498) at 2", "Insert SimpleName: LetContentNode(507) into SimpleType: LetContentNode(508) at 0", "Insert SimpleName: ERROR(509) into VariableDeclarationFragment(519) at 0", "Insert MethodInvocation(518) into VariableDeclarationFragment(519) at 1", "Insert SimpleName: id(524) into VariableDeclarationFragment(525) at 0", "Insert SimpleName: String(529) into SimpleType: String(530) at 0", "Insert SimpleName: commandText(531) into VariableDeclarationFragment(532) at 0", "Insert SimpleName: SourceLocation(536) into SimpleType: SourceLocation(537) at 0", "Insert SimpleName: sourceLocation(538) into VariableDeclarationFragment(539) at 0", "Move TagElement: @param(57) into Javadoc(550) at 0", "Move TagElement: @param(60) into Javadoc(550) at 1", "Update TagElement: @throws(63) to @param", "Move TagElement: @throws(63) into Javadoc(550) at 2", "Update PrimitiveType: boolean(70) to int", "Update SimpleName: isLocalVarNameUniquified(71) to id", "Insert SimpleType: String(557) into SingleVariableDeclaration(559) at 0", "Insert SimpleName: commandText(558) into SingleVariableDeclaration(559) at 1", "Insert SimpleType: SourceLocation(561) into SingleVariableDeclaration(563) at 0", "Insert SimpleName: sourceLocation(562) into SingleVariableDeclaration(563) at 1", "Insert ExpressionStatement(569) into Block(582) at 0", "Insert ExpressionStatement(575) into Block(582) at 1", "Insert ExpressionStatement(581) into Block(582) at 2", "Insert TagElement(592) into Javadoc(593) at 0", "Insert SimpleName: LetContentNode(595) into SimpleType: LetContentNode(596) at 0", "Insert SimpleType: ErrorReporter(599) into SingleVariableDeclaration(601) at 0", "Insert SimpleName: errorReporter(600) into SingleVariableDeclaration(601) at 1", "Insert VariableDeclarationStatement(609) into Block(663) at 0", "Move VariableDeclarationStatement(96) into Block(663) at 1", "Move IfStatement(115) into Block(663) at 2", "Insert IfStatement(643) into Block(663) at 3", "Insert VariableDeclarationStatement(655) into Block(663) at 4", "Insert ExpressionStatement(660) into Block(663) at 5", "Insert ReturnStatement(662) into Block(663) at 6", "Insert SimpleName: LetContentNode(666) into SimpleType: LetContentNode(667) at 0", "Insert VariableDeclarationStatement(676) into Block(691) at 0", "Insert VariableDeclarationStatement(684) into Block(691) at 1", "Insert ExpressionStatement(688) into Block(691) at 2", "Insert ReturnStatement(690) into Block(691) at 3", "Insert FieldAccess(81) into Assignment: =(83) at 0", "Insert SimpleName: contentKind(82) into Assignment: =(83) at 1", "Insert SimpleName: LetContentNode(495) into TagElement: @link(496) at 0", "Insert ClassInstanceCreation(516) into MethodInvocation(518) at 0", "Insert SimpleName: buildAndThrowIfInvalid(517) into MethodInvocation(518) at 1", "Update SimpleName: isLocalVarNameUniquified(54) to id", "Update TextElement: appending node id).(56) to  The node's id.", "Update TextElement:  The command text.(59) to  The node's command text.", "Update SimpleName: SoySyntaxException(61) to sourceLocation", "Update TextElement:  If a syntax error is found.(62) to  The node's source location.", "Insert SimpleName: String(556) into SimpleType: String(557) at 0", "Insert SimpleName: SourceLocation(560) into SimpleType: SourceLocation(561) at 0", "Insert Assignment: =(568) into ExpressionStatement(569) at 0", "Insert Assignment: =(574) into ExpressionStatement(575) at 0", "Insert Assignment: =(580) into ExpressionStatement(581) at 0", "Insert TextElement: Returns a new (584) into TagElement(592) at 0", "Insert TagElement: @link(586) into TagElement(592) at 1", "Insert TextElement:  built from the builder's state. If the builder's state(587) into TagElement(592) at 2", "Insert TextElement: is invalid, errors are reported to the (588) into TagElement(592) at 3", "Insert TagElement: @code(590) into TagElement(592) at 4", "Insert TextElement:  and {Builder#ERROR} is returned.(591) into TagElement(592) at 5", "Insert SimpleName: ErrorReporter(598) into SimpleType: ErrorReporter(599) at 0", "Insert SimpleType: Checkpoint(603) into VariableDeclarationStatement(609) at 0", "Insert VariableDeclarationFragment(608) into VariableDeclarationStatement(609) at 1", "Insert MethodInvocation(639) into IfStatement(643) at 0", "Insert Block(642) into IfStatement(643) at 1", "Insert SimpleType: LetContentNode(645) into VariableDeclarationStatement(655) at 0", "Insert VariableDeclarationFragment(654) into VariableDeclarationStatement(655) at 1", "Insert MethodInvocation(659) into ExpressionStatement(660) at 0", "Insert SimpleName: node(661) into ReturnStatement(662) at 0", "Insert SimpleType: TransitionalThrowingErrorReporter(670) into VariableDeclarationStatement(676) at 0", "Insert VariableDeclarationFragment(675) into VariableDeclarationStatement(676) at 1", "Insert SimpleType: LetContentNode(678) into VariableDeclarationStatement(684) at 0", "Insert VariableDeclarationFragment(683) into VariableDeclarationStatement(684) at 1", "Insert MethodInvocation(687) into ExpressionStatement(688) at 0", "Insert SimpleName: node(689) into ReturnStatement(690) at 0", "Insert ThisExpression(79) into FieldAccess(81) at 0", "Insert SimpleName: contentKind(80) into FieldAccess(81) at 1", "Insert SimpleType: LetContentNode.Builder(511) into ClassInstanceCreation(516) at 0", "Insert PrefixExpression: -(513) into ClassInstanceCreation(516) at 1", "Insert StringLiteral: \"$error\"(514) into ClassInstanceCreation(516) at 2", "Insert QualifiedName: SourceLocation.UNKNOWN(515) into ClassInstanceCreation(516) at 3", "Insert FieldAccess(566) into Assignment: =(568) at 0", "Insert SimpleName: id(567) into Assignment: =(568) at 1", "Insert FieldAccess(572) into Assignment: =(574) at 0", "Insert SimpleName: commandText(573) into Assignment: =(574) at 1", "Insert FieldAccess(578) into Assignment: =(580) at 0", "Insert SimpleName: sourceLocation(579) into Assignment: =(580) at 1", "Insert SimpleName: LetContentNode(585) into TagElement: @link(586) at 0", "Insert TextElement:  errorManager(589) into TagElement: @code(590) at 0", "Insert SimpleName: Checkpoint(602) into SimpleType: Checkpoint(603) at 0", "Insert SimpleName: checkpoint(604) into VariableDeclarationFragment(608) at 0", "Insert MethodInvocation(607) into VariableDeclarationFragment(608) at 1", "Insert ExpressionStatement(633) into Block(634) at 0", "Update SimpleName: setVar(116) to errorReporter", "Move SimpleName: setVar(116) into MethodInvocation(639) at 0", "Insert SimpleName: errorsSince(637) into MethodInvocation(639) at 1", "Insert SimpleName: checkpoint(638) into MethodInvocation(639) at 2", "Insert ReturnStatement(641) into Block(642) at 0", "Insert SimpleName: LetContentNode(644) into SimpleType: LetContentNode(645) at 0", "Insert SimpleName: node(646) into VariableDeclarationFragment(654) at 0", "Insert ClassInstanceCreation(653) into VariableDeclarationFragment(654) at 1", "Insert SimpleName: node(656) into MethodInvocation(659) at 0", "Insert SimpleName: setSourceLocation(657) into MethodInvocation(659) at 1", "Insert SimpleName: sourceLocation(658) into MethodInvocation(659) at 2", "Insert SimpleName: TransitionalThrowingErrorReporter(669) into SimpleType: TransitionalThrowingErrorReporter(670) at 0", "Insert SimpleName: errorReporter(671) into VariableDeclarationFragment(675) at 0", "Insert ClassInstanceCreation(674) into VariableDeclarationFragment(675) at 1", "Insert SimpleName: LetContentNode(677) into SimpleType: LetContentNode(678) at 0", "Insert SimpleName: node(679) into VariableDeclarationFragment(683) at 0", "Insert MethodInvocation(682) into VariableDeclarationFragment(683) at 1", "Insert SimpleName: errorReporter(685) into MethodInvocation(687) at 0", "Insert SimpleName: throwIfErrorsPresent(686) into MethodInvocation(687) at 1", "Insert QualifiedName: LetContentNode.Builder(510) into SimpleType: LetContentNode.Builder(511) at 0", "Insert NumberLiteral: 1(512) into PrefixExpression: -(513) at 0", "Insert ThisExpression(564) into FieldAccess(566) at 0", "Insert SimpleName: id(565) into FieldAccess(566) at 1", "Insert ThisExpression(570) into FieldAccess(572) at 0", "Insert SimpleName: commandText(571) into FieldAccess(572) at 1", "Insert ThisExpression(576) into FieldAccess(578) at 0", "Insert SimpleName: sourceLocation(577) into FieldAccess(578) at 1", "Insert SimpleName: errorReporter(605) into MethodInvocation(607) at 0", "Insert SimpleName: checkpoint(606) into MethodInvocation(607) at 1", "Insert SimpleName: errorReporter(615) into MethodInvocation(617) at 2", "Insert SimpleName: sourceLocation(616) into MethodInvocation(617) at 3", "Insert MethodInvocation(632) into ExpressionStatement(633) at 0", "Insert SimpleName: ERROR(640) into ReturnStatement(641) at 0", "Update SimpleType: LocalVar(118) to LetContentNode", "Move SimpleType: LocalVar(118) into ClassInstanceCreation(653) at 0", "Insert SimpleName: id(649) into ClassInstanceCreation(653) at 1", "Move QualifiedName: parseResult.localVarName(119) into ClassInstanceCreation(653) at 2", "Insert SimpleName: commandText(651) into ClassInstanceCreation(653) at 3", "Insert QualifiedName: parseResult.contentKind(652) into ClassInstanceCreation(653) at 4", "Insert SimpleType: TransitionalThrowingErrorReporter(673) into ClassInstanceCreation(674) at 0", "Insert SimpleName: build(680) into MethodInvocation(682) at 0", "Insert SimpleName: errorReporter(681) into MethodInvocation(682) at 1", "Insert SimpleName: errorReporter(623) into MethodInvocation(632) at 0", "Insert SimpleName: report(624) into MethodInvocation(632) at 1", "Insert MethodInvocation(631) into MethodInvocation(632) at 2", "Update SimpleName: LocalVar(117) to LetContentNode", "Insert SimpleName: TransitionalThrowingErrorReporter(672) into SimpleType: TransitionalThrowingErrorReporter(673) at 0", "Move SimpleName: SoySyntaxException(104) into MethodInvocation(631) at 0", "Update SimpleName: createWithoutMetaInfo(105) to createWithMetaInfo", "Move SimpleName: createWithoutMetaInfo(105) into MethodInvocation(631) at 1", "Insert InfixExpression: +(629) into MethodInvocation(631) at 2", "Insert SimpleName: sourceLocation(630) into MethodInvocation(631) at 3", "Move StringLiteral: \"A 'let' tag should contain a value if and only if it is also self-ending (with a\"(106) into InfixExpression: +(629) at 0", "Update StringLiteral: \" trailing '/') (invalid tag is {let \"(107) to \" trailing '/').\"", "Move StringLiteral: \" trailing '/') (invalid tag is {let \"(107) into InfixExpression: +(629) at 1", "Delete SimpleName: id(51)", "Delete TagElement: @param(53)", "Delete Javadoc(64)", "Delete SimpleName: id(77)", "Delete SimpleName: isLocalVarNameUniquified(78)", "Delete SimpleName: commandText(79)", "Delete SuperConstructorInvocation(80)", "Delete SimpleName: contentKind(97)", "Delete QualifiedName: parseResult.contentKind(98)", "Delete Assignment: =(99)", "Delete ExpressionStatement(100)", "Delete ThisExpression(120)", "Delete NullLiteral(121)", "Delete ClassInstanceCreation(122)", "Delete MethodInvocation(123)", "Delete ExpressionStatement(124)", "Delete Block(125)", "Delete MethodDeclaration(126)", "Delete TextElement:  Whether the local var name is already uniquified (e.g. by(55)", "Delete InfixExpression: +(108)", "Delete SimpleName: commandText(109)", "Delete StringLiteral: \"}).\"(110)", "Delete InfixExpression: +(111)", "Delete MethodInvocation(112)", "Delete ThrowStatement(113)"]}}, {"LetNode_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: com.google.template.soy.base.SourceLocation to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS QualifiedName: com.google.template.soy.soyparse.ErrorReporter to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 8"]}, {"root": "INS Modifier: final to FieldDeclaration at 2", "operations": ["INS Modifier: final to FieldDeclaration at 2"]}, {"root": "INS Modifier: static to MethodDeclaration at 2", "operations": ["INS Modifier: static to MethodDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SimpleName: errorReporter to SingleVariableDeclaration at 1", "INS SimpleName: ErrorReporter to SimpleType: ErrorReporter at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleType: ErrorReporter to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SimpleType: SourceLocation to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleName: sourceLocation to SingleVariableDeclaration at 1"]}, {"root": "INS SimpleType: String to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "UPDATE from isVarNameUnique to localVarName", "operations": ["UPD SimpleName: isVarNameUnique from isVarNameUnique to localVarName"]}, {"root": "UPDATE from SoySyntaxException to SourceLocation", "operations": ["UPD SimpleName: SoySyntaxException from SoySyntaxException to SourceLocation"]}, {"root": "MOVE from SimpleType: SourceLocation", "operations": ["MOV SimpleName: SoySyntaxException to SimpleType: SourceLocation at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV InfixExpression: + to ReturnStatement at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV FieldAccess to Assignment: = at 0"]}, {"root": "INS ClassInstanceCreation to Assignment: = at 1", "operations": ["INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: localVarName to ClassInstanceCreation at 1", "INS NullLiteral to ClassInstanceCreation at 3", "INS ThisExpression to ClassInstanceCreation at 2"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: report to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS StringLiteral: \"Invalid 'let' command text.\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: errorReporter to MethodInvocation at 0", "INS SimpleName: sourceLocation to MethodInvocation at 3"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS SimpleName: CommandTextParseResult to SimpleType: CommandTextParseResult at 0", "INS NullLiteral to ClassInstanceCreation at 3", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleType: CommandTextParseResult to ClassInstanceCreation at 0", "INS ReturnStatement to Block at 1", "INS StringLiteral: \"error\" to ClassInstanceCreation at 1", "INS NullLiteral to ClassInstanceCreation at 2"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: LocalVar to ClassInstanceCreation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: createWithoutMetaInfo to MethodInvocation at 1", "MOV SimpleName: SoySyntaxException to MethodInvocation at 0"]}, {"root": "UPDATE from createWithoutMetaInfo to createWithMetaInfo", "operations": ["UPD SimpleName: createWithoutMetaInfo from createWithoutMetaInfo to createWithMetaInfo"]}, {"root": "INS SimpleName: errorReporter to MethodInvocation at 3", "operations": ["INS SimpleName: errorReporter to MethodInvocation at 3"]}, {"root": "INS SimpleName: sourceLocation to MethodInvocation at 4", "operations": ["INS SimpleName: sourceLocation to MethodInvocation at 4"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL TextElement: Whether the local var name is already unique (e.g. node id has already been appended). ", "DEL TagElement", "DEL Modifier: private", "DEL PrimitiveType: boolean", "DEL SimpleName: isVarNameUnique", "DEL Javadoc", "DEL Modifier: final", "DEL VariableDeclarationFragment"]}, {"root": "DEL TagElement: @param", "operations": ["DEL TextElement:  Whether the local var name is already unique (e.g. node id has already", "DEL SimpleName: isVarNameUnique", "DEL TextElement: been appended).", "DEL TagElement: @param"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL FieldAccess", "operations": ["DEL ThisExpression", "DEL FieldAccess", "DEL SimpleName: isVarNameUnique"]}, {"root": "DEL SimpleName: isVarNameUnique", "operations": ["DEL SimpleName: isVarNameUnique"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL QualifiedName: orig.isVarNameUnique", "DEL SimpleName: isVarNameUnique", "DEL ThisExpression", "DEL ExpressionStatement", "DEL FieldAccess", "DEL Assignment: ="]}, {"root": "DEL TagElement: @throws", "operations": ["DEL SimpleName: SoySyntaxException", "DEL TagElement: @throws", "DEL TextElement:  If a syntax error is found."]}, {"root": "DEL SimpleType: SoySyntaxException", "operations": ["DEL SimpleType: SoySyntaxException"]}, {"root": "DEL ThrowStatement", "operations": ["DEL InfixExpression: +", "DEL SimpleName: commandText", "DEL StringLiteral: \"\\\".\"", "DEL StringLiteral: \"Invalid 'let' command text \\\"\"", "DEL MethodInvocation", "DEL ThrowStatement"]}, {"root": "DEL ConditionalExpression", "operations": ["DEL SimpleName: isVarNameUnique", "DEL ConditionalExpression", "DEL SimpleName: getVarName", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: var", "DEL SimpleName: var", "DEL SimpleName: var", "DEL Modifier: final", "DEL TagElement: @param", "DEL TextElement: Set the local variable defined by this node.", "DEL ExpressionStatement", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL TextElement:  the variable to set", "DEL Modifier: protected", "DEL Block", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: setVar", "DEL Assignment: =", "DEL PrimitiveType: void"]}]}}, {"LetNode_diff": {"operations": ["Insert ImportDeclaration(5) into CompilationUnit(474) at 2", "Insert ImportDeclaration(17) into CompilationUnit(474) at 8", "Insert QualifiedName: com.google.template.soy.base.SourceLocation(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: com.google.template.soy.soyparse.ErrorReporter(16) into ImportDeclaration(17) at 0", "Insert Modifier: final(179) into FieldDeclaration(184) at 2", "Insert Modifier: static(255) into MethodDeclaration(430) at 2", "Insert SingleVariableDeclaration(266) into MethodDeclaration(430) at 6", "Insert SingleVariableDeclaration(270) into MethodDeclaration(430) at 7", "Insert SimpleType: String(198) into SingleVariableDeclaration(200) at 0", "Update SimpleName: isVarNameUnique(209) to localVarName", "Insert SimpleType: ErrorReporter(264) into SingleVariableDeclaration(266) at 0", "Insert SimpleName: errorReporter(265) into SingleVariableDeclaration(266) at 1", "Insert SimpleType: SourceLocation(268) into SingleVariableDeclaration(270) at 0", "Insert SimpleName: sourceLocation(269) into SingleVariableDeclaration(270) at 1", "Insert SimpleName: String(197) into SimpleType: String(198) at 0", "Insert SimpleName: ErrorReporter(263) into SimpleType: ErrorReporter(264) at 0", "Update SimpleName: SoySyntaxException(276) to SourceLocation", "Move SimpleName: SoySyntaxException(276) into SimpleType: SourceLocation(268) at 0", "Move InfixExpression: +(443) into ReturnStatement(444) at 0", "Move FieldAccess(490) into Assignment: =(218) at 0", "Insert ClassInstanceCreation(217) into Assignment: =(218) at 1", "Insert ExpressionStatement(292) into Block(300) at 0", "Insert ReturnStatement(299) into Block(300) at 1", "Move SimpleType: LocalVar(485) into ClassInstanceCreation(217) at 0", "Insert SimpleName: localVarName(214) into ClassInstanceCreation(217) at 1", "Insert ThisExpression(215) into ClassInstanceCreation(217) at 2", "Insert NullLiteral(216) into ClassInstanceCreation(217) at 3", "Insert MethodInvocation(291) into ExpressionStatement(292) at 0", "Insert ClassInstanceCreation(298) into ReturnStatement(299) at 0", "Insert SimpleName: errorReporter(284) into MethodInvocation(291) at 0", "Insert SimpleName: report(285) into MethodInvocation(291) at 1", "Insert MethodInvocation(290) into MethodInvocation(291) at 2", "Insert SimpleType: CommandTextParseResult(294) into ClassInstanceCreation(298) at 0", "Insert StringLiteral: \"error\"(295) into ClassInstanceCreation(298) at 1", "Insert NullLiteral(296) into ClassInstanceCreation(298) at 2", "Insert NullLiteral(297) into ClassInstanceCreation(298) at 3", "Move SimpleName: SoySyntaxException(291) into MethodInvocation(290) at 0", "Update SimpleName: createWithoutMetaInfo(292) to createWithMetaInfo", "Move SimpleName: createWithoutMetaInfo(292) into MethodInvocation(290) at 1", "Insert StringLiteral: \"Invalid 'let' command text.\"(288) into MethodInvocation(290) at 2", "Insert SimpleName: sourceLocation(289) into MethodInvocation(290) at 3", "Insert SimpleName: CommandTextParseResult(293) into SimpleType: CommandTextParseResult(294) at 0", "Insert SimpleName: errorReporter(391) into MethodInvocation(393) at 3", "Insert SimpleName: sourceLocation(392) into MethodInvocation(393) at 4", "Delete Modifier: public(59)", "Delete Modifier: public(71)", "Delete Modifier: public(85)", "Delete TextElement: Whether the local var name is already unique (e.g. node id has already been appended). (174)", "Delete TagElement(175)", "Delete Javadoc(176)", "Delete Modifier: private(177)", "Delete Modifier: final(178)", "Delete PrimitiveType: boolean(179)", "Delete SimpleName: isVarNameUnique(180)", "Delete VariableDeclarationFragment(181)", "Delete FieldDeclaration(182)", "Delete SimpleName: isVarNameUnique(195)", "Delete TextElement:  Whether the local var name is already unique (e.g. node id has already(196)", "Delete TextElement: been appended).(197)", "Delete TagElement: @param(198)", "Delete PrimitiveType: boolean(208)", "Delete ThisExpression(219)", "Delete SimpleName: isVarNameUnique(220)", "Delete FieldAccess(221)", "Delete SimpleName: isVarNameUnique(222)", "Delete ThisExpression(241)", "Delete SimpleName: isVarNameUnique(242)", "Delete FieldAccess(243)", "Delete QualifiedName: orig.isVarNameUnique(244)", "Delete Assignment: =(245)", "Delete ExpressionStatement(246)", "Delete SimpleName: SoySyntaxException(264)", "Delete TextElement:  If a syntax error is found.(265)", "Delete TagElement: @throws(266)", "Delete SimpleType: SoySyntaxException(277)", "Delete StringLiteral: \"Invalid 'let' command text \\\"\"(293)", "Delete SimpleName: commandText(294)", "Delete StringLiteral: \"\\\".\"(295)", "Delete InfixExpression: +(296)", "Delete MethodInvocation(297)", "Delete ThrowStatement(298)", "Delete SimpleName: isVarNameUnique(435)", "Delete SimpleName: getVarName(436)", "Delete MethodInvocation(437)", "Delete ConditionalExpression(444)", "Delete TextElement: Set the local variable defined by this node.(474)", "Delete TagElement(475)", "Delete SimpleName: var(476)", "Delete TextElement:  the variable to set(477)", "Delete TagElement: @param(478)", "Delete Javadoc(479)", "Delete Modifier: protected(480)", "Delete Modifier: final(481)", "Delete PrimitiveType: void(482)", "Delete SimpleName: setVar(483)", "Delete SimpleName: var(486)", "Delete SingleVariableDeclaration(487)", "Delete SimpleName: var(491)", "Delete Assignment: =(492)", "Delete ExpressionStatement(493)", "Delete Block(494)", "Delete MethodDeclaration(495)"]}}, {"LetValueNode_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: com.google.template.soy.base.SourceLocation to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS ImportDeclaration to CompilationUnit at 6", "INS QualifiedName: com.google.template.soy.soyparse.ErrorReporter.Checkpoint to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS ImportDeclaration to CompilationUnit at 7", "INS QualifiedName: com.google.template.soy.soyparse.TransitionalThrowingErrorReporter to ImportDeclaration at 0"]}, {"root": "INS TypeDeclaration: class to CompilationUnit at 10", "operations": ["INS FieldAccess to Assignment: = at 0", "INS Modifier: static to TypeDeclaration: class at 2", "INS SimpleType: TransitionalThrowingErrorReporter to VariableDeclarationStatement at 0", "INS SimpleName: localVarName to SuperConstructorInvocation at 1", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS Javadoc to TypeDeclaration: class at 0", "INS FieldAccess to Assignment: = at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleType: ExprRootNode to ParameterizedType: ExprRootNode<?> at 0", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS SimpleType: LetValueNode to FieldDeclaration at 3", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: SourceLocation to FieldDeclaration at 2", "INS SimpleName: commandText to SingleVariableDeclaration at 1", "INS SimpleName: commandText to SuperConstructorInvocation at 2", "INS ThisExpression to FieldAccess at 0", "INS TypeDeclaration: class to TypeDeclaration: class at 13", "INS SimpleName: errorReporter to MethodInvocation at 1", "INS TextElement: Builder for  to TagElement at 0", "INS SimpleName: id to FieldAccess at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS Block to MethodDeclaration at 6", "INS SimpleName: sourceLocation to FieldAccess at 1", "INS SimpleName: valueExpr to Assignment: = at 1", "INS SimpleName: LetValueNode to TypeDeclaration: class at 2", "INS Modifier: final to FieldDeclaration at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: ExprRootNode to SimpleType: ExprRootNode at 0", "INS SimpleName: build to MethodInvocation at 0", "INS SimpleName: buildAndThrowIfInvalid to MethodDeclaration at 2", "INS SimpleName: id to SuperConstructorInvocation at 0", "INS SimpleName: valueExpr to FieldAccess at 1", "INS Javadoc to MethodDeclaration at 0", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: private to FieldDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ExpressionStatement to Block at 2", "INS PrimitiveType: int to FieldDeclaration at 2", "INS SimpleName: LetValueNode to SimpleType: LetValueNode at 0", "INS SimpleName: LetValueNode to TagElement: @link at 0", "INS SimpleName: valueExpr to SingleVariableDeclaration at 1", "INS FieldAccess to Assignment: = at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS TagElement: @link to TagElement at 1", "INS Modifier: public to FieldDeclaration at 0", "INS SimpleName: Builder to SimpleType: Builder at 0", "INS TypeDeclaration: class to CompilationUnit at 10", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS SimpleName: sourceLocation to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS SimpleName: id to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS ParameterizedType: ExprRootNode<?> to SingleVariableDeclaration at 0", "INS SimpleName: commandText to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 1", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleType: LetValueNode to MethodDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: localVarName to SingleVariableDeclaration at 1", "INS ClassInstanceCreation to MethodInvocation at 0", "INS Modifier: final to TypeDeclaration: class at 3", "INS SimpleName: node to VariableDeclarationFragment at 0", "INS SimpleName: LetValueNode to MethodDeclaration at 1", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS SimpleType: SourceLocation to SingleVariableDeclaration at 0", "INS SimpleName: commandText to FieldAccess at 1", "INS SimpleName: LetValueNode to SimpleType: LetValueNode at 0", "INS Block to MethodDeclaration at 6", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: errorReporter to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: SourceLocation to SimpleType: SourceLocation at 0", "INS Modifier: final to FieldDeclaration at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: String to SimpleType: String at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: Builder to MethodDeclaration at 2", "INS QualifiedName: SourceLocation.UNKNOWN to ClassInstanceCreation at 3", "INS ExpressionStatement to Block at 1", "INS Block to MethodDeclaration at 3", "INS Modifier: public to TypeDeclaration: class at 1", "INS SimpleName: TransitionalThrowingErrorReporter to SimpleType: TransitionalThrowingErrorReporter at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: commandText to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS TagElement to Javadoc at 0", "INS Modifier: final to FieldDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: build to MethodDeclaration at 3", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: TransitionalThrowingErrorReporter to ClassInstanceCreation at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: sourceLocation to SingleVariableDeclaration at 1", "INS SimpleName: ERROR to VariableDeclarationFragment at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleType: String to FieldDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS Javadoc to MethodDeclaration at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: buildAndThrowIfInvalid to MethodInvocation at 1", "INS WildcardType: ? to ParameterizedType: ExprRootNode<?> at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: LetValueNode to SimpleType: LetValueNode at 0", "INS SimpleName: SourceLocation to SimpleType: SourceLocation at 0", "INS SimpleType: LetValueNode to MethodDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS PrefixExpression: - to ClassInstanceCreation at 1", "INS SimpleName: id to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: sourceLocation to Assignment: = at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: LetValueNode to VariableDeclarationStatement at 0", "INS SimpleType: Builder to ClassInstanceCreation at 0", "INS SimpleName: throwIfErrorsPresent to MethodInvocation at 1", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: id to Assignment: = at 1", "INS SuperConstructorInvocation to Block at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: node to ReturnStatement at 0", "INS SimpleName: errorReporter to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS ThisExpression to FieldAccess at 0", "INS TextElement: . to TagElement at 2", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: TransitionalThrowingErrorReporter to SimpleType: TransitionalThrowingErrorReporter at 0", "INS SimpleName: String to SimpleType: String at 0", "INS StringLiteral: \"$error: 1\" to ClassInstanceCreation at 2", "INS SimpleName: LetValueNode to SimpleType: LetValueNode at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: Builder to TypeDeclaration: class at 4", "INS Modifier: public to MethodDeclaration at 1", "INS ReturnStatement to Block at 3"]}, {"root": "UPDATE from com.google.template.soy.soytree.defn.LocalVar to com.google.template.soy.soyparse.ErrorReporter", "operations": ["UPD QualifiedName: com.google.template.soy.soytree.defn.LocalVar from com.google.template.soy.soytree.defn.LocalVar to com.google.template.soy.soyparse.ErrorReporter"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 8", "MOV SimpleType: LetNode to TypeDeclaration: class at 3", "MOV MethodDeclaration to TypeDeclaration: class at 9", "MOV Modifier: public to TypeDeclaration: class at 1", "MOV MethodDeclaration to TypeDeclaration: class at 12", "MOV SimpleType: ExprHolderNode to TypeDeclaration: class at 4", "MOV MethodDeclaration to TypeDeclaration: class at 10", "MOV MethodDeclaration to TypeDeclaration: class at 7", "MOV Javadoc to TypeDeclaration: class at 0", "MOV FieldDeclaration to TypeDeclaration: class at 5", "MOV MethodDeclaration to TypeDeclaration: class at 11"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Modifier: public to MethodDeclaration at 1", "MOV Block to MethodDeclaration at 5"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 5"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @param to Javadoc at 0", "MOV TagElement: @param to Javadoc at 2", "MOV TagElement: @param to Javadoc at 1", "MOV TagElement: @throws to Javadoc at 0"]}, {"root": "UPDATE from @throws to ", "operations": ["UPD TagElement: @throws from @throws to "]}, {"root": "INS SimpleType: ErrorReporter to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: ErrorReporter to SimpleType: ErrorReporter at 0", "INS SimpleType: ErrorReporter to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleName: errorReporter to SingleVariableDeclaration at 1", "operations": ["INS SimpleName: errorReporter to SingleVariableDeclaration at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Checkpoint to SimpleType: Checkpoint at 0", "INS SimpleName: errorReporter to MethodInvocation at 0", "INS SimpleType: Checkpoint to VariableDeclarationStatement at 0", "INS SimpleName: checkpoint to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: checkpoint to VariableDeclarationFragment at 0"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS IfStatement to Block at 3", "INS InfixExpression: == to IfStatement at 0", "INS QualifiedName: parseResult.valueExpr to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 7", "operations": ["INS SimpleName: id to ClassInstanceCreation at 1", "INS QualifiedName: parseResult.valueExpr to ClassInstanceCreation at 4", "INS SimpleType: LetValueNode to VariableDeclarationStatement at 0", "INS SimpleName: LetValueNode to SimpleType: LetValueNode at 0", "INS SimpleName: commandText to ClassInstanceCreation at 3", "INS VariableDeclarationStatement to Block at 7", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: node to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "INS ExpressionStatement to Block at 8", "operations": ["INS SimpleName: node to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 8", "INS SimpleName: setSourceLocation to MethodInvocation at 1", "INS SimpleName: sourceLocation to MethodInvocation at 2"]}, {"root": "INS ReturnStatement to Block at 9", "operations": ["INS SimpleName: node to ReturnStatement at 0", "INS ReturnStatement to Block at 9"]}, {"root": "UPDATE from  The id for this node. to  The node's id.", "operations": ["UPD TextElement:  The id for this node. from  The id for this node. to  The node's id."]}, {"root": "UPDATE from isLocalVarNameUniquified to commandText", "operations": ["UPD SimpleName: isLocalVarNameUniquified from isLocalVarNameUniquified to commandText"]}, {"root": "UPDATE from appending node id). to  The node's command text.", "operations": ["UPD TextElement: appending node id). from appending node id). to  The node's command text."]}, {"root": "UPDATE from commandText to sourceLocation", "operations": ["UPD SimpleName: commandText from commandText to sourceLocation"]}, {"root": "UPDATE from  The command text. to  The node's source location.", "operations": ["UPD TextElement:  The command text. from  The command text. to  The node's source location."]}, {"root": "INS TextElement: Returns a new  to TagElement: @throws at 0", "operations": ["INS TextElement: Returns a new  to TagElement: @throws at 0"]}, {"root": "INS TagElement: @link to TagElement: @throws at 1", "operations": ["INS TagElement: @link to TagElement: @throws at 1"]}, {"root": "INS TextElement:  built from the builder's state. If the builder's state to TagElement: @throws at 2", "operations": ["INS TextElement:  built from the builder's state. If the builder's state to TagElement: @throws at 2"]}, {"root": "INS TextElement: is invalid, errors are reported to the  to TagElement: @throws at 3", "operations": ["INS TextElement: is invalid, errors are reported to the  to TagElement: @throws at 3"]}, {"root": "INS TagElement: @code to TagElement: @throws at 4", "operations": ["INS TagElement: @code to TagElement: @throws at 4"]}, {"root": "INS TextElement:  and {Builder#ERROR} is returned. to TagElement: @throws at 5", "operations": ["INS TextElement:  and {Builder#ERROR} is returned. to TagElement: @throws at 5"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS MethodInvocation to IfStatement at 0", "INS SimpleName: checkpoint to MethodInvocation at 2", "INS SimpleName: errorReporter to MethodInvocation at 0", "INS SimpleName: errorsSince to MethodInvocation at 1"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS Block to IfStatement at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: ERROR to ReturnStatement at 0"]}, {"root": "UPDATE from LocalVar to LetValueNode", "operations": ["UPD SimpleName: LocalVar from LocalVar to LetValueNode", "UPD SimpleType: LocalVar from LocalVar to LetValueNode", "UPD SimpleName: SoySyntaxException from SoySyntaxException to LetValueNode"]}, {"root": "MOVE from TagElement: @code", "operations": ["MOV TextElement:  If a syntax error is found. to TagElement: @code at 0", "MOV SimpleName: SoySyntaxException to TagElement: @link at 0"]}, {"root": "UPDATE from  If a syntax error is found. to  errorManager", "operations": ["UPD TextElement:  If a syntax error is found. from  If a syntax error is found. to  errorManager"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: errorReporter to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: report to MethodInvocation at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: report to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: errorReporter to MethodInvocation at 0"]}, {"root": "INS SimpleName: errorReporter to MethodInvocation at 2", "operations": ["INS SimpleName: errorReporter to MethodInvocation at 2"]}, {"root": "INS SimpleName: sourceLocation to MethodInvocation at 3", "operations": ["INS SimpleName: sourceLocation to MethodInvocation at 3"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: LocalVar to ClassInstanceCreation at 0", "MOV QualifiedName: parseResult.localVarName to ClassInstanceCreation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from createWithoutMetaInfo to createWithMetaInfo", "operations": ["UPD SimpleName: createWithoutMetaInfo from createWithoutMetaInfo to createWithMetaInfo", "UPD SimpleName: createWithoutMetaInfo from createWithoutMetaInfo to createWithMetaInfo"]}, {"root": "INS SimpleName: sourceLocation to MethodInvocation at 3", "operations": ["INS SimpleName: sourceLocation to MethodInvocation at 3"]}, {"root": "INS SimpleName: sourceLocation to MethodInvocation at 3", "operations": ["INS SimpleName: sourceLocation to MethodInvocation at 3"]}, {"root": "DEL TextElement:  Whether the local var name is already uniquified (e.g. by", "operations": ["DEL TextElement:  Whether the local var name is already uniquified (e.g. by"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL SimpleName: isLocalVarNameUniquified", "operations": ["DEL SimpleName: isLocalVarNameUniquified"]}, {"root": "DEL SuperConstructorInvocation", "operations": ["DEL SimpleName: id", "DEL SimpleName: commandText", "DEL SimpleName: isLocalVarNameUniquified", "DEL SuperConstructorInvocation"]}, {"root": "DEL ThrowStatement", "operations": ["DEL ThrowStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: valueExpr", "DEL QualifiedName: parseResult.valueExpr", "DEL Assignment: ="]}, {"root": "DEL ThrowStatement", "operations": ["DEL ThrowStatement"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL SimpleName: valueExpr", "DEL NullLiteral", "DEL InfixExpression: =="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: setVar", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL ThisExpression"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodDeclaration", "DEL TypeDeclaration: class", "DEL SimpleName: LetValueNode", "DEL SimpleName: LetValueNode", "DEL Javadoc"]}]}}, {"LetValueNode_diff": {"operations": ["Move ImportDeclaration(9) into CompilationUnit(391) at 6", "Insert ImportDeclaration(5) into CompilationUnit(391) at 2", "Insert ImportDeclaration(13) into CompilationUnit(391) at 6", "Insert ImportDeclaration(15) into CompilationUnit(391) at 7", "Insert TypeDeclaration: class(390) into CompilationUnit(391) at 10", "Insert QualifiedName: com.google.template.soy.base.SourceLocation(4) into ImportDeclaration(5) at 0", "Update QualifiedName: com.google.template.soy.soytree.defn.LocalVar(10) to com.google.template.soy.soyparse.ErrorReporter", "Insert QualifiedName: com.google.template.soy.soyparse.ErrorReporter.Checkpoint(12) into ImportDeclaration(13) at 0", "Insert QualifiedName: com.google.template.soy.soyparse.TransitionalThrowingErrorReporter(14) into ImportDeclaration(15) at 0", "Move Javadoc(17) into TypeDeclaration: class(390) at 0", "Insert Modifier: public(24) into TypeDeclaration: class(390) at 1", "Insert SimpleName: LetValueNode(25) into TypeDeclaration: class(390) at 2", "Move SimpleType: LetNode(21) into TypeDeclaration: class(390) at 3", "Move SimpleType: ExprHolderNode(23) into TypeDeclaration: class(390) at 4", "Move FieldDeclaration(35) into TypeDeclaration: class(390) at 5", "Insert MethodDeclaration(72) into TypeDeclaration: class(390) at 6", "Move MethodDeclaration(142) into TypeDeclaration: class(390) at 7", "Move MethodDeclaration(152) into TypeDeclaration: class(390) at 8", "Move MethodDeclaration(168) into TypeDeclaration: class(390) at 9", "Move MethodDeclaration(181) into TypeDeclaration: class(390) at 10", "Move MethodDeclaration(200) into TypeDeclaration: class(390) at 11", "Move MethodDeclaration(213) into TypeDeclaration: class(390) at 12", "Insert TypeDeclaration: class(389) into TypeDeclaration: class(390) at 13", "Insert Modifier: private(42) into MethodDeclaration(72) at 0", "Insert SimpleName: LetValueNode(43) into MethodDeclaration(72) at 1", "Insert SingleVariableDeclaration(46) into MethodDeclaration(72) at 2", "Insert SingleVariableDeclaration(50) into MethodDeclaration(72) at 3", "Move SingleVariableDeclaration(61) into MethodDeclaration(72) at 4", "Insert SingleVariableDeclaration(60) into MethodDeclaration(72) at 5", "Insert Block(71) into MethodDeclaration(72) at 6", "Insert Javadoc(173) into TypeDeclaration: class(389) at 0", "Move Modifier: public(18) into TypeDeclaration: class(389) at 1", "Insert Modifier: static(175) into TypeDeclaration: class(389) at 2", "Insert Modifier: final(176) into TypeDeclaration: class(389) at 3", "Insert SimpleName: Builder(177) into TypeDeclaration: class(389) at 4", "Insert FieldDeclaration(194) into TypeDeclaration: class(389) at 5", "Insert FieldDeclaration(200) into TypeDeclaration: class(389) at 6", "Insert FieldDeclaration(207) into TypeDeclaration: class(389) at 7", "Insert FieldDeclaration(214) into TypeDeclaration: class(389) at 8", "Insert MethodDeclaration(257) into TypeDeclaration: class(389) at 9", "Insert MethodDeclaration(360) into TypeDeclaration: class(389) at 10", "Insert MethodDeclaration(388) into TypeDeclaration: class(389) at 11", "Insert PrimitiveType: int(44) into SingleVariableDeclaration(46) at 0", "Insert SimpleName: id(45) into SingleVariableDeclaration(46) at 1", "Insert SimpleType: String(48) into SingleVariableDeclaration(50) at 0", "Insert SimpleName: localVarName(49) into SingleVariableDeclaration(50) at 1", "Insert ParameterizedType: ExprRootNode<?>(58) into SingleVariableDeclaration(60) at 0", "Insert SimpleName: valueExpr(59) into SingleVariableDeclaration(60) at 1", "Insert SuperConstructorInvocation(64) into Block(71) at 0", "Insert ExpressionStatement(70) into Block(71) at 1", "Insert TagElement(172) into Javadoc(173) at 0", "Insert Modifier: public(178) into FieldDeclaration(194) at 0", "Insert Modifier: static(179) into FieldDeclaration(194) at 1", "Insert Modifier: final(180) into FieldDeclaration(194) at 2", "Insert SimpleType: LetValueNode(182) into FieldDeclaration(194) at 3", "Insert VariableDeclarationFragment(193) into FieldDeclaration(194) at 4", "Insert Modifier: private(195) into FieldDeclaration(200) at 0", "Insert Modifier: final(196) into FieldDeclaration(200) at 1", "Insert PrimitiveType: int(197) into FieldDeclaration(200) at 2", "Insert VariableDeclarationFragment(199) into FieldDeclaration(200) at 3", "Insert Modifier: private(201) into FieldDeclaration(207) at 0", "Insert Modifier: final(202) into FieldDeclaration(207) at 1", "Insert SimpleType: String(204) into FieldDeclaration(207) at 2", "Insert VariableDeclarationFragment(206) into FieldDeclaration(207) at 3", "Insert Modifier: private(208) into FieldDeclaration(214) at 0", "Insert Modifier: final(209) into FieldDeclaration(214) at 1", "Insert SimpleType: SourceLocation(211) into FieldDeclaration(214) at 2", "Insert VariableDeclarationFragment(213) into FieldDeclaration(214) at 3", "Insert Javadoc(224) into MethodDeclaration(257) at 0", "Insert Modifier: public(225) into MethodDeclaration(257) at 1", "Insert SimpleName: Builder(226) into MethodDeclaration(257) at 2", "Move SingleVariableDeclaration(54) into MethodDeclaration(257) at 3", "Insert SingleVariableDeclaration(233) into MethodDeclaration(257) at 4", "Insert SingleVariableDeclaration(237) into MethodDeclaration(257) at 5", "Insert Block(256) into MethodDeclaration(257) at 6", "Insert Javadoc(267) into MethodDeclaration(360) at 0", "Move Modifier: public(50) into MethodDeclaration(360) at 1", "Insert SimpleType: LetValueNode(270) into MethodDeclaration(360) at 2", "Insert SimpleName: build(271) into MethodDeclaration(360) at 3", "Move SingleVariableDeclaration(57) into MethodDeclaration(360) at 4", "Move Block(117) into MethodDeclaration(360) at 5", "Move IfStatement(92) into Block(359) at 5", "Insert Modifier: private(361) into MethodDeclaration(388) at 0", "Insert SimpleType: LetValueNode(363) into MethodDeclaration(388) at 1", "Insert SimpleName: buildAndThrowIfInvalid(364) into MethodDeclaration(388) at 2", "Insert Block(387) into MethodDeclaration(388) at 3", "Insert SimpleName: String(47) into SimpleType: String(48) at 0", "Insert SimpleType: ExprRootNode(56) into ParameterizedType: ExprRootNode<?>(58) at 0", "Insert WildcardType: ?(57) into ParameterizedType: ExprRootNode<?>(58) at 1", "Insert SimpleName: id(61) into SuperConstructorInvocation(64) at 0", "Insert SimpleName: localVarName(62) into SuperConstructorInvocation(64) at 1", "Insert SimpleName: commandText(63) into SuperConstructorInvocation(64) at 2", "Insert Assignment: =(69) into ExpressionStatement(70) at 0", "Insert TextElement: Builder for (168) into TagElement(172) at 0", "Insert TagElement: @link(170) into TagElement(172) at 1", "Insert TextElement: .(171) into TagElement(172) at 2", "Insert SimpleName: LetValueNode(181) into SimpleType: LetValueNode(182) at 0", "Insert SimpleName: ERROR(183) into VariableDeclarationFragment(193) at 0", "Insert MethodInvocation(192) into VariableDeclarationFragment(193) at 1", "Insert SimpleName: id(198) into VariableDeclarationFragment(199) at 0", "Insert SimpleName: String(203) into SimpleType: String(204) at 0", "Insert SimpleName: commandText(205) into VariableDeclarationFragment(206) at 0", "Insert SimpleName: SourceLocation(210) into SimpleType: SourceLocation(211) at 0", "Insert SimpleName: sourceLocation(212) into VariableDeclarationFragment(213) at 0", "Move TagElement: @param(38) into Javadoc(224) at 0", "Move TagElement: @param(42) into Javadoc(224) at 1", "Move TagElement: @param(45) into Javadoc(224) at 2", "Insert SimpleType: String(231) into SingleVariableDeclaration(233) at 0", "Insert SimpleName: commandText(232) into SingleVariableDeclaration(233) at 1", "Insert SimpleType: SourceLocation(235) into SingleVariableDeclaration(237) at 0", "Insert SimpleName: sourceLocation(236) into SingleVariableDeclaration(237) at 1", "Insert ExpressionStatement(243) into Block(256) at 0", "Insert ExpressionStatement(249) into Block(256) at 1", "Insert ExpressionStatement(255) into Block(256) at 2", "Update TagElement: @throws(48) to ", "Move TagElement: @throws(48) into Javadoc(267) at 0", "Insert SimpleName: LetValueNode(269) into SimpleType: LetValueNode(270) at 0", "Insert SimpleType: ErrorReporter(273) into SingleVariableDeclaration(275) at 0", "Insert SimpleName: errorReporter(274) into SingleVariableDeclaration(275) at 1", "Insert VariableDeclarationStatement(283) into Block(359) at 0", "Insert IfStatement(312) into Block(359) at 2", "Insert VariableDeclarationStatement(351) into Block(359) at 5", "Insert ExpressionStatement(356) into Block(359) at 6", "Insert ReturnStatement(358) into Block(359) at 7", "Insert SimpleName: LetValueNode(362) into SimpleType: LetValueNode(363) at 0", "Insert VariableDeclarationStatement(372) into Block(387) at 0", "Insert VariableDeclarationStatement(380) into Block(387) at 1", "Insert ExpressionStatement(384) into Block(387) at 2", "Insert ReturnStatement(386) into Block(387) at 3", "Insert SimpleName: ExprRootNode(55) into SimpleType: ExprRootNode(56) at 0", "Insert FieldAccess(67) into Assignment: =(69) at 0", "Insert SimpleName: valueExpr(68) into Assignment: =(69) at 1", "Insert SimpleName: LetValueNode(169) into TagElement: @link(170) at 0", "Insert ClassInstanceCreation(190) into MethodInvocation(192) at 0", "Insert SimpleName: buildAndThrowIfInvalid(191) into MethodInvocation(192) at 1", "Update TextElement:  The id for this node.(37) to  The node's id.", "Update SimpleName: isLocalVarNameUniquified(39) to commandText", "Update TextElement: appending node id).(41) to  The node's command text.", "Update SimpleName: commandText(43) to sourceLocation", "Update TextElement:  The command text.(44) to  The node's source location.", "Insert SimpleName: String(230) into SimpleType: String(231) at 0", "Insert SimpleName: SourceLocation(234) into SimpleType: SourceLocation(235) at 0", "Insert Assignment: =(242) into ExpressionStatement(243) at 0", "Insert Assignment: =(248) into ExpressionStatement(249) at 0", "Insert Assignment: =(254) into ExpressionStatement(255) at 0", "Insert TextElement: Returns a new (258) into TagElement(266) at 0", "Insert TagElement: @link(260) into TagElement(266) at 1", "Insert TextElement:  built from the builder's state. If the builder's state(261) into TagElement(266) at 2", "Insert TextElement: is invalid, errors are reported to the (262) into TagElement(266) at 3", "Insert TagElement: @code(264) into TagElement(266) at 4", "Insert TextElement:  and {Builder#ERROR} is returned.(265) into TagElement(266) at 5", "Insert SimpleName: ErrorReporter(272) into SimpleType: ErrorReporter(273) at 0", "Insert SimpleType: Checkpoint(277) into VariableDeclarationStatement(283) at 0", "Insert VariableDeclarationFragment(282) into VariableDeclarationStatement(283) at 1", "Insert InfixExpression: ==(296) into IfStatement(312) at 0", "Move Block(91) into IfStatement(312) at 1", "Insert MethodInvocation(335) into IfStatement(339) at 0", "Insert Block(338) into IfStatement(339) at 1", "Insert SimpleType: LetValueNode(341) into VariableDeclarationStatement(351) at 0", "Insert VariableDeclarationFragment(350) into VariableDeclarationStatement(351) at 1", "Insert MethodInvocation(355) into ExpressionStatement(356) at 0", "Insert SimpleName: node(357) into ReturnStatement(358) at 0", "Insert SimpleType: TransitionalThrowingErrorReporter(366) into VariableDeclarationStatement(372) at 0", "Insert VariableDeclarationFragment(371) into VariableDeclarationStatement(372) at 1", "Insert SimpleType: LetValueNode(374) into VariableDeclarationStatement(380) at 0", "Insert VariableDeclarationFragment(379) into VariableDeclarationStatement(380) at 1", "Insert MethodInvocation(383) into ExpressionStatement(384) at 0", "Insert SimpleName: node(385) into ReturnStatement(386) at 0", "Insert ThisExpression(65) into FieldAccess(67) at 0", "Insert SimpleName: valueExpr(66) into FieldAccess(67) at 1", "Insert SimpleType: Builder(185) into ClassInstanceCreation(190) at 0", "Insert PrefixExpression: -(187) into ClassInstanceCreation(190) at 1", "Insert StringLiteral: \"$error: 1\"(188) into ClassInstanceCreation(190) at 2", "Insert QualifiedName: SourceLocation.UNKNOWN(189) into ClassInstanceCreation(190) at 3", "Insert FieldAccess(240) into Assignment: =(242) at 0", "Insert SimpleName: id(241) into Assignment: =(242) at 1", "Insert FieldAccess(246) into Assignment: =(248) at 0", "Insert SimpleName: commandText(247) into Assignment: =(248) at 1", "Insert FieldAccess(252) into Assignment: =(254) at 0", "Insert SimpleName: sourceLocation(253) into Assignment: =(254) at 1", "Update SimpleName: SoySyntaxException(46) to LetValueNode", "Move SimpleName: SoySyntaxException(46) into TagElement: @link(260) at 0", "Update TextElement:  If a syntax error is found.(47) to  errorManager", "Move TextElement:  If a syntax error is found.(47) into TagElement: @code(264) at 0", "Insert SimpleName: Checkpoint(276) into SimpleType: Checkpoint(277) at 0", "Insert SimpleName: checkpoint(278) into VariableDeclarationFragment(282) at 0", "Insert MethodInvocation(281) into VariableDeclarationFragment(282) at 1", "Insert QualifiedName: parseResult.valueExpr(294) into InfixExpression: ==(296) at 0", "Insert NullLiteral(295) into InfixExpression: ==(296) at 1", "Insert ExpressionStatement(310) into Block(311) at 0", "Insert ExpressionStatement(329) into Block(330) at 0", "Insert SimpleName: errorReporter(332) into MethodInvocation(335) at 0", "Insert SimpleName: errorsSince(333) into MethodInvocation(335) at 1", "Insert SimpleName: checkpoint(334) into MethodInvocation(335) at 2", "Insert ReturnStatement(337) into Block(338) at 0", "Insert SimpleName: LetValueNode(340) into SimpleType: LetValueNode(341) at 0", "Insert SimpleName: node(342) into VariableDeclarationFragment(350) at 0", "Insert ClassInstanceCreation(349) into VariableDeclarationFragment(350) at 1", "Insert SimpleName: node(352) into MethodInvocation(355) at 0", "Insert SimpleName: setSourceLocation(353) into MethodInvocation(355) at 1", "Insert SimpleName: sourceLocation(354) into MethodInvocation(355) at 2", "Insert SimpleName: TransitionalThrowingErrorReporter(365) into SimpleType: TransitionalThrowingErrorReporter(366) at 0", "Insert SimpleName: errorReporter(367) into VariableDeclarationFragment(371) at 0", "Insert ClassInstanceCreation(370) into VariableDeclarationFragment(371) at 1", "Insert SimpleName: LetValueNode(373) into SimpleType: LetValueNode(374) at 0", "Insert SimpleName: node(375) into VariableDeclarationFragment(379) at 0", "Insert MethodInvocation(378) into VariableDeclarationFragment(379) at 1", "Insert SimpleName: errorReporter(381) into MethodInvocation(383) at 0", "Insert SimpleName: throwIfErrorsPresent(382) into MethodInvocation(383) at 1", "Insert SimpleName: Builder(184) into SimpleType: Builder(185) at 0", "Insert NumberLiteral: 1(186) into PrefixExpression: -(187) at 0", "Insert ThisExpression(238) into FieldAccess(240) at 0", "Insert SimpleName: id(239) into FieldAccess(240) at 1", "Insert ThisExpression(244) into FieldAccess(246) at 0", "Insert SimpleName: commandText(245) into FieldAccess(246) at 1", "Insert ThisExpression(250) into FieldAccess(252) at 0", "Insert SimpleName: sourceLocation(251) into FieldAccess(252) at 1", "Insert SimpleName: errorReporter(279) into MethodInvocation(281) at 0", "Insert SimpleName: checkpoint(280) into MethodInvocation(281) at 1", "Insert SimpleName: errorReporter(289) into MethodInvocation(291) at 2", "Insert SimpleName: sourceLocation(290) into MethodInvocation(291) at 3", "Insert MethodInvocation(309) into ExpressionStatement(310) at 0", "Insert MethodInvocation(328) into ExpressionStatement(329) at 0", "Insert SimpleName: ERROR(336) into ReturnStatement(337) at 0", "Update SimpleType: LocalVar(110) to LetValueNode", "Move SimpleType: LocalVar(110) into ClassInstanceCreation(349) at 0", "Insert SimpleName: id(345) into ClassInstanceCreation(349) at 1", "Move QualifiedName: parseResult.localVarName(111) into ClassInstanceCreation(349) at 2", "Insert SimpleName: commandText(347) into ClassInstanceCreation(349) at 3", "Insert QualifiedName: parseResult.valueExpr(348) into ClassInstanceCreation(349) at 4", "Insert SimpleType: TransitionalThrowingErrorReporter(369) into ClassInstanceCreation(370) at 0", "Insert SimpleName: build(376) into MethodInvocation(378) at 0", "Insert SimpleName: errorReporter(377) into MethodInvocation(378) at 1", "Insert SimpleName: errorReporter(297) into MethodInvocation(309) at 0", "Insert SimpleName: report(298) into MethodInvocation(309) at 1", "Move MethodInvocation(89) into MethodInvocation(309) at 2", "Insert SimpleName: errorReporter(316) into MethodInvocation(328) at 0", "Insert SimpleName: report(317) into MethodInvocation(328) at 1", "Move MethodInvocation(104) into MethodInvocation(328) at 2", "Update SimpleName: LocalVar(109) to LetValueNode", "Insert SimpleName: TransitionalThrowingErrorReporter(368) into SimpleType: TransitionalThrowingErrorReporter(369) at 0", "Update SimpleName: createWithoutMetaInfo(82) to createWithMetaInfo", "Insert SimpleName: sourceLocation(307) into MethodInvocation(308) at 3", "Update SimpleName: createWithoutMetaInfo(97) to createWithMetaInfo", "Insert SimpleName: sourceLocation(326) into MethodInvocation(327) at 3", "Delete TextElement:  Whether the local var name is already uniquified (e.g. by(40)", "Delete PrimitiveType: boolean(55)", "Delete SimpleName: isLocalVarNameUniquified(56)", "Delete SimpleName: id(62)", "Delete SimpleName: isLocalVarNameUniquified(63)", "Delete SimpleName: commandText(64)", "Delete SuperConstructorInvocation(65)", "Delete ThrowStatement(90)", "Delete SimpleName: valueExpr(74)", "Delete QualifiedName: parseResult.valueExpr(75)", "Delete Assignment: =(76)", "Delete ExpressionStatement(77)", "Delete ThrowStatement(105)", "Delete SimpleName: valueExpr(78)", "Delete NullLiteral(79)", "Delete InfixExpression: ==(80)", "Delete SimpleName: setVar(108)", "Delete ThisExpression(112)", "Delete NullLiteral(113)", "Delete ClassInstanceCreation(114)", "Delete MethodInvocation(115)", "Delete ExpressionStatement(116)", "Delete SimpleName: LetValueNode(19)", "Delete Javadoc(49)", "Delete SimpleName: LetValueNode(51)", "Delete MethodDeclaration(118)", "Delete TypeDeclaration: class(214)"]}}], "commit_stats": [{"total_files": 8, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}