{"application": "apache-nutch", "csha": "845b73ab2773037a793302b45ba263b7c69506a5", "files": [{"SegmentMerger_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 39", "operations": ["INS ImportDeclaration to CompilationUnit at 39", "INS QualifiedName: org.apache.nutch.net.URLNormalizers to ImportDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS NullLiteral to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: URLNormalizers to SimpleType: URLNormalizers at 0", "INS SimpleName: normalizers to VariableDeclarationFragment at 0", "INS SimpleType: URLNormalizers to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 10", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 6", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: normalize to SingleVariableDeclaration at 1"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: conf to ClassInstanceCreation at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: URLNormalizers to SimpleType: URLNormalizers at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to IfStatement at 1", "INS BooleanLiteral: false to MethodInvocation at 3", "INS SimpleName: getBoolean to MethodInvocation at 1", "INS QualifiedName: URLNormalizers.SCOPE_DEFAULT to ClassInstanceCreation at 2", "INS SimpleType: URLNormalizers to ClassInstanceCreation at 0", "INS StringLiteral: \"segment.merger.normalizer\" to MethodInvocation at 2", "INS IfStatement to Block at 3", "INS SimpleName: conf to MethodInvocation at 0", "INS SimpleName: normalizers to Assignment: = at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: url to VariableDeclarationFragment at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS NullLiteral to InfixExpression: != at 1", "INS IfStatement to Block at 3", "INS SimpleName: url to MethodInvocation at 2", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: newKey to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: url to InfixExpression: != at 0", "INS SimpleName: set to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setBoolean to MethodInvocation at 1", "INS SimpleName: normalize to MethodInvocation at 3", "INS SimpleName: job to MethodInvocation at 0", "INS StringLiteral: \"segment.merger.normalizer\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 5"]}, {"root": "INS VariableDeclarationStatement to Block at 7", "operations": ["INS BooleanLiteral: false to VariableDeclarationFragment at 1", "INS SimpleName: normalize to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 7", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0"]}, {"root": "INS InfixExpression: != to IfStatement at 0", "operations": ["INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: normalizers to InfixExpression: != at 0", "INS InfixExpression: != to IfStatement at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS SimpleName: normalizers to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS CatchClause to TryStatement at 1", "INS Block to TryStatement at 0", "INS Block to CatchClause at 1", "INS SimpleName: normalize to MethodInvocation at 1", "INS QualifiedName: URLNormalizers.SCOPE_DEFAULT to MethodInvocation at 3", "INS SimpleName: url to Assignment: = at 0", "INS Block to IfStatement at 1", "INS SimpleName: url to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS TryStatement to Block at 0"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS SimpleName: url to InfixExpression: != at 0", "INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: != to InfixExpression: && at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "INS SimpleName: normalize to MethodInvocation at 5", "operations": ["INS SimpleName: normalize to MethodInvocation at 5"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS SimpleName: url to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: url to Assignment: = at 0"]}, {"root": "INS SingleVariableDeclaration to CatchClause at 0", "operations": ["INS SimpleName: Exception to SimpleType: Exception at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleType: Exception to SingleVariableDeclaration at 0"]}, {"root": "INS Block to CatchClause at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS NullLiteral to Assignment: = at 1", "INS Block to CatchClause at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: url to Assignment: = at 0"]}, {"root": "UPDATE from key to newKey", "operations": ["UPD SimpleName: key from key to newKey"]}, {"root": "INS IfStatement to IfStatement at 2", "operations": ["INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: i to ArrayAccess at 1", "INS BooleanLiteral: true to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS StringLiteral: \"-normalize\" to MethodInvocation at 2", "INS SimpleName: normalize to Assignment: = at 0", "INS MethodInvocation to IfStatement at 0", "INS IfStatement to IfStatement at 2", "INS SimpleName: args to ArrayAccess at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV IfStatement to IfStatement at 2"]}, {"root": "UPDATE from newKey to LOG", "operations": ["UPD SimpleName: newKey from newKey to LOG"]}, {"root": "UPDATE from set to warn", "operations": ["UPD SimpleName: set from set to warn"]}, {"root": "INS InfixExpression: + to MethodInvocation at 2", "operations": ["INS SimpleName: url to InfixExpression: + at 1", "INS StringLiteral: \":\" to InfixExpression: + at 2", "INS StringLiteral: \"Skipping \" to InfixExpression: + at 0", "INS InfixExpression: + to MethodInvocation at 2"]}, {"root": "UPDATE from key to url", "operations": ["UPD SimpleName: key from key to url", "UPD SimpleName: key from key to url"]}, {"root": "INS NullLiteral to Assignment: = at 1", "operations": ["INS NullLiteral to Assignment: = at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: filter to MethodInvocation at 1", "MOV SimpleName: filters to MethodInvocation at 0"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV MethodInvocation to InfixExpression: + at 3"]}, {"root": "UPDATE from \"Cannot filter key \" to \"Skipping key \"", "operations": ["UPD StringLiteral: \"Cannot filter key \" from \"Cannot filter key \" to \"Skipping key \""]}, {"root": "INS MethodInvocation to InfixExpression: + at 3", "operations": ["INS SimpleName: getMessage to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: + at 3", "INS SimpleName: e to MethodInvocation at 0"]}, {"root": "DEL SimpleName: newKey", "operations": ["DEL SimpleName: newKey"]}, {"root": "DEL InstanceofExpression", "operations": ["DEL SimpleName: UTF8", "DEL InstanceofExpression", "DEL SimpleType: UTF8", "DEL SimpleName: key"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: Text", "DEL NullLiteral", "DEL InfixExpression: ==", "DEL SimpleType: Text", "DEL SimpleName: key", "DEL Block", "DEL IfStatement", "DEL SimpleName: toString", "DEL CastExpression", "DEL MethodInvocation", "DEL ReturnStatement", "DEL ParenthesizedExpression", "DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: LOG", "DEL Block", "DEL IfStatement", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: isWarnEnabled"]}]}}, {"SegmentMerger_diff": {"operations": ["Insert ImportDeclaration(93) into CompilationUnit(3008) at 39", "Insert QualifiedName: org.apache.nutch.net.URLNormalizers(92) into ImportDeclaration(93) at 0", "Insert FieldDeclaration(205) into TypeDeclaration: class(3007) at 10", "Insert Modifier: private(199) into FieldDeclaration(205) at 0", "Insert SimpleType: URLNormalizers(201) into FieldDeclaration(205) at 1", "Insert VariableDeclarationFragment(204) into FieldDeclaration(205) at 2", "Insert SingleVariableDeclaration(2147) into MethodDeclaration(2715) at 6", "Insert SimpleName: URLNormalizers(200) into SimpleType: URLNormalizers(201) at 0", "Insert SimpleName: normalizers(202) into VariableDeclarationFragment(204) at 0", "Insert NullLiteral(203) into VariableDeclarationFragment(204) at 1", "Insert IfStatement(1139) into Block(1168) at 3", "Insert VariableDeclarationStatement(1240) into Block(1332) at 0", "Insert IfStatement(1331) into Block(1332) at 3", "Insert PrimitiveType: boolean(2145) into SingleVariableDeclaration(2147) at 0", "Insert SimpleName: normalize(2146) into SingleVariableDeclaration(2147) at 1", "Insert ExpressionStatement(2207) into Block(2714) at 5", "Insert VariableDeclarationStatement(2824) into Block(3005) at 7", "Insert MethodInvocation(1130) into IfStatement(1139) at 0", "Insert ExpressionStatement(1138) into IfStatement(1139) at 1", "Insert SimpleType: String(1234) into VariableDeclarationStatement(1240) at 0", "Insert VariableDeclarationFragment(1239) into VariableDeclarationStatement(1240) at 1", "Insert InfixExpression: !=(1243) into IfStatement(1276) at 0", "Insert Block(1275) into IfStatement(1276) at 1", "Insert InfixExpression: &&(1283) into IfStatement(1315) at 0", "Insert InfixExpression: !=(1318) into IfStatement(1331) at 0", "Insert Block(1330) into IfStatement(1331) at 1", "Insert MethodInvocation(2206) into ExpressionStatement(2207) at 0", "Insert PrimitiveType: boolean(2820) into VariableDeclarationStatement(2824) at 0", "Insert VariableDeclarationFragment(2823) into VariableDeclarationStatement(2824) at 1", "Insert SimpleName: conf(1126) into MethodInvocation(1130) at 0", "Insert SimpleName: getBoolean(1127) into MethodInvocation(1130) at 1", "Insert StringLiteral: \"segment.merger.normalizer\"(1128) into MethodInvocation(1130) at 2", "Insert BooleanLiteral: false(1129) into MethodInvocation(1130) at 3", "Insert Assignment: =(1137) into ExpressionStatement(1138) at 0", "Insert SimpleName: String(1233) into SimpleType: String(1234) at 0", "Insert SimpleName: url(1235) into VariableDeclarationFragment(1239) at 0", "Move MethodInvocation(1218) into VariableDeclarationFragment(1239) at 1", "Insert SimpleName: normalizers(1241) into InfixExpression: !=(1243) at 0", "Insert NullLiteral(1242) into InfixExpression: !=(1243) at 1", "Insert TryStatement(1274) into Block(1275) at 0", "Insert InfixExpression: !=(1279) into InfixExpression: &&(1283) at 0", "Move InfixExpression: !=(1229) into InfixExpression: &&(1283) at 1", "Insert SimpleName: url(1316) into InfixExpression: !=(1318) at 0", "Insert NullLiteral(1317) into InfixExpression: !=(1318) at 1", "Insert ExpressionStatement(1323) into Block(1330) at 0", "Move ExpressionStatement(1276) into Block(1330) at 1", "Insert SimpleName: job(2202) into MethodInvocation(2206) at 0", "Insert SimpleName: setBoolean(2203) into MethodInvocation(2206) at 1", "Insert StringLiteral: \"segment.merger.normalizer\"(2204) into MethodInvocation(2206) at 2", "Insert SimpleName: normalize(2205) into MethodInvocation(2206) at 3", "Insert SimpleName: normalize(2821) into VariableDeclarationFragment(2823) at 0", "Insert BooleanLiteral: false(2822) into VariableDeclarationFragment(2823) at 1", "Insert SimpleName: normalize(3001) into MethodInvocation(3003) at 5", "Insert SimpleName: normalizers(1131) into Assignment: =(1137) at 0", "Insert ClassInstanceCreation(1136) into Assignment: =(1137) at 1", "Insert Block(1252) into TryStatement(1274) at 0", "Insert CatchClause(1273) into TryStatement(1274) at 1", "Insert SimpleName: url(1277) into InfixExpression: !=(1279) at 0", "Insert NullLiteral(1278) into InfixExpression: !=(1279) at 1", "Insert MethodInvocation(1322) into ExpressionStatement(1323) at 0", "Insert SimpleType: URLNormalizers(1133) into ClassInstanceCreation(1136) at 0", "Insert SimpleName: conf(1134) into ClassInstanceCreation(1136) at 1", "Insert QualifiedName: URLNormalizers.SCOPE_DEFAULT(1135) into ClassInstanceCreation(1136) at 2", "Insert ExpressionStatement(1251) into Block(1252) at 0", "Move SingleVariableDeclaration(1249) into CatchClause(1273) at 0", "Insert Block(1272) into CatchClause(1273) at 1", "Insert ExpressionStatement(1290) into Block(1291) at 0", "Insert SingleVariableDeclaration(1295) into CatchClause(1312) at 0", "Insert Block(1311) into CatchClause(1312) at 1", "Insert SimpleName: newKey(1319) into MethodInvocation(1322) at 0", "Insert SimpleName: set(1320) into MethodInvocation(1322) at 1", "Insert SimpleName: url(1321) into MethodInvocation(1322) at 2", "Update SimpleName: key(1273) to newKey", "Insert IfStatement(2959) into IfStatement(2960) at 2", "Insert SimpleName: URLNormalizers(1132) into SimpleType: URLNormalizers(1133) at 0", "Insert Assignment: =(1250) into ExpressionStatement(1251) at 0", "Move ExpressionStatement(1220) into Block(1272) at 0", "Move ExpressionStatement(1224) into Block(1272) at 1", "Insert Assignment: =(1289) into ExpressionStatement(1290) at 0", "Insert SimpleType: Exception(1293) into SingleVariableDeclaration(1295) at 0", "Insert SimpleName: e(1294) into SingleVariableDeclaration(1295) at 1", "Move ExpressionStatement(1263) into Block(1311) at 0", "Insert ExpressionStatement(1310) into Block(1311) at 1", "Insert MethodInvocation(2924) into IfStatement(2959) at 0", "Insert Block(2929) into IfStatement(2959) at 1", "Move IfStatement(2878) into IfStatement(2959) at 2", "Insert SimpleName: url(1244) into Assignment: =(1250) at 0", "Insert MethodInvocation(1249) into Assignment: =(1250) at 1", "Insert SimpleName: url(1284) into Assignment: =(1289) at 0", "Insert MethodInvocation(1288) into Assignment: =(1289) at 1", "Insert SimpleName: Exception(1292) into SimpleType: Exception(1293) at 0", "Insert Assignment: =(1309) into ExpressionStatement(1310) at 0", "Insert ArrayAccess(2921) into MethodInvocation(2924) at 0", "Insert SimpleName: equals(2922) into MethodInvocation(2924) at 1", "Insert StringLiteral: \"-normalize\"(2923) into MethodInvocation(2924) at 2", "Insert ExpressionStatement(2928) into Block(2929) at 0", "Insert SimpleName: normalizers(1245) into MethodInvocation(1249) at 0", "Insert SimpleName: normalize(1246) into MethodInvocation(1249) at 1", "Insert SimpleName: url(1247) into MethodInvocation(1249) at 2", "Insert QualifiedName: URLNormalizers.SCOPE_DEFAULT(1248) into MethodInvocation(1249) at 3", "Update SimpleName: newKey(1214) to LOG", "Update SimpleName: set(1215) to warn", "Insert InfixExpression: +(1265) into MethodInvocation(1266) at 2", "Update SimpleName: key(1221) to url", "Insert NullLiteral(1269) into Assignment: =(1270) at 1", "Move SimpleName: filters(1230) into MethodInvocation(1288) at 0", "Move SimpleName: filter(1231) into MethodInvocation(1288) at 1", "Insert SimpleName: url(1287) into MethodInvocation(1288) at 2", "Insert SimpleName: url(1307) into Assignment: =(1309) at 0", "Insert NullLiteral(1308) into Assignment: =(1309) at 1", "Insert SimpleName: args(2919) into ArrayAccess(2921) at 0", "Insert SimpleName: i(2920) into ArrayAccess(2921) at 1", "Insert Assignment: =(2927) into ExpressionStatement(2928) at 0", "Insert StringLiteral: \"Skipping \"(1259) into InfixExpression: +(1265) at 0", "Insert SimpleName: url(1260) into InfixExpression: +(1265) at 1", "Insert StringLiteral: \":\"(1261) into InfixExpression: +(1265) at 2", "Move MethodInvocation(1260) into InfixExpression: +(1265) at 3", "Update StringLiteral: \"Cannot filter key \"(1255) to \"Skipping key \"", "Update SimpleName: key(1256) to url", "Insert MethodInvocation(1303) into InfixExpression: +(1304) at 3", "Insert SimpleName: normalize(2925) into Assignment: =(2927) at 0", "Insert BooleanLiteral: true(2926) into Assignment: =(2927) at 1", "Insert SimpleName: e(1301) into MethodInvocation(1303) at 0", "Insert SimpleName: getMessage(1302) into MethodInvocation(1303) at 1", "Delete SimpleName: newKey(1222)", "Delete SimpleName: key(1210)", "Delete SimpleName: UTF8(1211)", "Delete SimpleType: UTF8(1212)", "Delete InstanceofExpression(1213)", "Delete Block(1225)", "Delete SimpleName: Text(1232)", "Delete SimpleType: Text(1233)", "Delete SimpleName: key(1234)", "Delete CastExpression(1235)", "Delete ParenthesizedExpression(1236)", "Delete SimpleName: toString(1237)", "Delete MethodInvocation(1238)", "Delete MethodInvocation(1239)", "Delete NullLiteral(1240)", "Delete InfixExpression: ==(1241)", "Delete ReturnStatement(1242)", "Delete Block(1243)", "Delete IfStatement(1244)", "Delete SimpleName: LOG(1250)", "Delete SimpleName: isWarnEnabled(1251)", "Delete MethodInvocation(1252)", "Delete Block(1264)", "Delete IfStatement(1265)", "Delete Block(1266)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}