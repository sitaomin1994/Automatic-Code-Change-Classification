{"application": "apache-phoenix", "csha": "b2b5788d9dd96dc5fa2f0ac0d0b2a792d9bb26b2", "files": [{"ExpressionCompiler_cluster": {"actions": [{"root": "INS Modifier: public to MethodDeclaration at 0", "operations": ["INS Modifier: public to MethodDeclaration at 0"]}]}}, {"ExpressionCompiler_diff": {"operations": ["Insert Modifier: public(263) into MethodDeclaration(274) at 0"]}}, {"IndexStatementRewriter_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS TagElement to Javadoc at 0", "INS TextElement:  new parse node or the same one if nothing was rewritten. to TagElement: @return at 0", "INS TagElement: @param to Javadoc at 2", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: dataResolver to SingleVariableDeclaration at 1", "INS SimpleName: node to MethodInvocation at 1", "INS SimpleName: node to TagElement: @param at 0", "INS SimpleType: IndexStatementRewriter to ClassInstanceCreation at 0", "INS SimpleType: ParseNode to MethodDeclaration at 3", "INS Block to MethodDeclaration at 8", "INS TextElement:  the parse node to TagElement: @param at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleType: SQLException to MethodDeclaration at 7", "INS Javadoc to MethodDeclaration at 0", "INS NullLiteral to ClassInstanceCreation at 2", "INS TextElement: Rewrite the parse node by translating all data table column references to to TagElement at 0", "INS TagElement: @throws to Javadoc at 4", "INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS TextElement: references to the corresponding index column. to TagElement at 1", "INS TextElement:   to TagElement: @throws at 1", "INS SimpleName: SQLException to TagElement: @throws at 0", "INS SimpleName: translate to MethodDeclaration at 4", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: dataResolver to ClassInstanceCreation at 1", "INS TagElement: @return to Javadoc at 3", "INS Modifier: public to MethodDeclaration at 1", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: dataResolver to TagElement: @param at 0", "INS TextElement:  the column resolver to TagElement: @param at 1", "INS ReturnStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: rewrite to MethodInvocation at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: ColumnResolver to SimpleType: ColumnResolver at 0", "INS SimpleName: IndexStatementRewriter to SimpleType: IndexStatementRewriter at 0", "INS Modifier: static to MethodDeclaration at 2", "INS SimpleType: ColumnResolver to SingleVariableDeclaration at 0"]}]}}, {"IndexStatementRewriter_diff": {"operations": ["Insert MethodDeclaration(139) into TypeDeclaration: class(579) at 7", "Insert Javadoc(113) into MethodDeclaration(139) at 0", "Insert Modifier: public(114) into MethodDeclaration(139) at 1", "Insert Modifier: static(115) into MethodDeclaration(139) at 2", "Insert SimpleType: ParseNode(117) into MethodDeclaration(139) at 3", "Insert SimpleName: translate(118) into MethodDeclaration(139) at 4", "Insert SingleVariableDeclaration(122) into MethodDeclaration(139) at 5", "Insert SingleVariableDeclaration(126) into MethodDeclaration(139) at 6", "Insert SimpleType: SQLException(128) into MethodDeclaration(139) at 7", "Insert Block(138) into MethodDeclaration(139) at 8", "Insert TagElement(101) into Javadoc(113) at 0", "Insert TagElement: @param(104) into Javadoc(113) at 1", "Insert TagElement: @param(107) into Javadoc(113) at 2", "Insert TagElement: @return(109) into Javadoc(113) at 3", "Insert TagElement: @throws(112) into Javadoc(113) at 4", "Insert SimpleName: ParseNode(116) into SimpleType: ParseNode(117) at 0", "Insert SimpleType: ParseNode(120) into SingleVariableDeclaration(122) at 0", "Insert SimpleName: node(121) into SingleVariableDeclaration(122) at 1", "Insert SimpleType: ColumnResolver(124) into SingleVariableDeclaration(126) at 0", "Insert SimpleName: dataResolver(125) into SingleVariableDeclaration(126) at 1", "Insert SimpleName: SQLException(127) into SimpleType: SQLException(128) at 0", "Insert ReturnStatement(137) into Block(138) at 0", "Insert TextElement: Rewrite the parse node by translating all data table column references to(99) into TagElement(101) at 0", "Insert TextElement: references to the corresponding index column.(100) into TagElement(101) at 1", "Insert SimpleName: node(102) into TagElement: @param(104) at 0", "Insert TextElement:  the parse node(103) into TagElement: @param(104) at 1", "Insert SimpleName: dataResolver(105) into TagElement: @param(107) at 0", "Insert TextElement:  the column resolver(106) into TagElement: @param(107) at 1", "Insert TextElement:  new parse node or the same one if nothing was rewritten.(108) into TagElement: @return(109) at 0", "Insert SimpleName: SQLException(110) into TagElement: @throws(112) at 0", "Insert TextElement:  (111) into TagElement: @throws(112) at 1", "Insert SimpleName: ParseNode(119) into SimpleType: ParseNode(120) at 0", "Insert SimpleName: ColumnResolver(123) into SimpleType: ColumnResolver(124) at 0", "Insert MethodInvocation(136) into ReturnStatement(137) at 0", "Insert SimpleName: rewrite(129) into MethodInvocation(136) at 0", "Insert SimpleName: node(130) into MethodInvocation(136) at 1", "Insert ClassInstanceCreation(135) into MethodInvocation(136) at 2", "Insert SimpleType: IndexStatementRewriter(132) into ClassInstanceCreation(135) at 0", "Insert SimpleName: dataResolver(133) into ClassInstanceCreation(135) at 1", "Insert NullLiteral(134) into ClassInstanceCreation(135) at 2", "Insert SimpleName: IndexStatementRewriter(131) into SimpleType: IndexStatementRewriter(132) at 0"]}}, {"ProjectionCompiler_cluster": {"actions": [{"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: ExpressionProjector to VariableDeclarationStatement at 0", "MOV MethodInvocation to ConditionalExpression at 1"]}, {"root": "INS ConditionalExpression to ClassInstanceCreation at 2", "operations": ["INS MethodInvocation to InfixExpression: == at 0", "INS InfixExpression: == to ConditionalExpression at 0", "INS ConditionalExpression to ClassInstanceCreation at 2", "INS SimpleName: getTableAlias to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: tableRef to MethodInvocation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ExpressionProjector to ClassInstanceCreation at 0"]}, {"root": "INS ConditionalExpression to ClassInstanceCreation at 2", "operations": ["INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: tableRef to MethodInvocation at 0", "INS SimpleName: getTableAlias to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS ConditionalExpression to ClassInstanceCreation at 2", "INS InfixExpression: == to ConditionalExpression at 0"]}, {"root": "INS ConditionalExpression to ClassInstanceCreation at 2", "operations": ["INS SimpleName: getTableAlias to MethodInvocation at 1", "INS ConditionalExpression to ClassInstanceCreation at 2", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: getTableAlias to MethodInvocation at 1", "INS SimpleName: tableRef to MethodInvocation at 0", "INS NullLiteral to InfixExpression: == at 1", "INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: tableRef to MethodInvocation at 0", "INS InfixExpression: == to ConditionalExpression at 0"]}, {"root": "INS ConditionalExpression to ClassInstanceCreation at 2", "operations": ["INS SimpleName: getTableAlias to MethodInvocation at 1", "INS InfixExpression: == to ConditionalExpression at 0", "INS NullLiteral to InfixExpression: == at 1", "INS ConditionalExpression to ClassInstanceCreation at 2", "INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: tableRef to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: getTableAlias to MethodInvocation at 1", "INS SimpleName: tableRef to MethodInvocation at 0"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 1"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 2"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 2"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 1"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 1"]}, {"root": "INS ConditionalExpression to ClassInstanceCreation at 2", "operations": ["INS InfixExpression: == to ConditionalExpression at 0", "INS SimpleName: getTableAlias to MethodInvocation at 1", "INS SimpleName: getTableAlias to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: tableRef to MethodInvocation at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: tableRef to MethodInvocation at 0", "INS MethodInvocation to ConditionalExpression at 2", "INS ConditionalExpression to ClassInstanceCreation at 2"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 1"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: SchemaUtil", "DEL ExpressionStatement", "DEL SimpleName: colName", "DEL SimpleName: colName", "DEL SimpleName: getColumnName"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: table", "DEL MethodInvocation", "DEL SimpleName: SchemaUtil", "DEL ExpressionStatement", "DEL SimpleName: getString", "DEL SimpleName: colName", "DEL SimpleName: colName", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: getName", "DEL SimpleName: getColumnName"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: SchemaUtil", "DEL SimpleName: colName", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: colName", "DEL MethodInvocation", "DEL SimpleName: getColumnName"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: getName", "DEL SimpleName: table", "DEL Assignment: =", "DEL SimpleName: colName", "DEL SimpleName: getString", "DEL SimpleName: colName", "DEL SimpleName: SchemaUtil", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: getColumnName"]}]}}, {"ProjectionCompiler_diff": {"operations": ["Move SimpleType: ExpressionProjector(1008) into VariableDeclarationStatement(993) at 0", "Insert ConditionalExpression(564) into ClassInstanceCreation(567) at 2", "Move SimpleType: ExpressionProjector(1005) into ClassInstanceCreation(991) at 0", "Insert ConditionalExpression(988) into ClassInstanceCreation(991) at 2", "Insert ConditionalExpression(1124) into ClassInstanceCreation(1127) at 2", "Insert ConditionalExpression(1358) into ClassInstanceCreation(1361) at 2", "Insert InfixExpression: ==(555) into ConditionalExpression(564) at 0", "Move MethodInvocation(577) into ConditionalExpression(564) at 1", "Move MethodInvocation(449) into ConditionalExpression(564) at 2", "Insert InfixExpression: ==(979) into ConditionalExpression(988) at 0", "Move MethodInvocation(1014) into ConditionalExpression(988) at 1", "Move MethodInvocation(915) into ConditionalExpression(988) at 2", "Insert InfixExpression: ==(1115) into ConditionalExpression(1124) at 0", "Move MethodInvocation(1141) into ConditionalExpression(1124) at 1", "Insert MethodInvocation(1123) into ConditionalExpression(1124) at 2", "Insert InfixExpression: ==(1349) into ConditionalExpression(1358) at 0", "Move MethodInvocation(1366) into ConditionalExpression(1358) at 1", "Insert MethodInvocation(1357) into ConditionalExpression(1358) at 2", "Insert MethodInvocation(553) into InfixExpression: ==(555) at 0", "Insert NullLiteral(554) into InfixExpression: ==(555) at 1", "Insert MethodInvocation(977) into InfixExpression: ==(979) at 0", "Insert NullLiteral(978) into InfixExpression: ==(979) at 1", "Insert MethodInvocation(1113) into InfixExpression: ==(1115) at 0", "Insert NullLiteral(1114) into InfixExpression: ==(1115) at 1", "Insert SimpleName: tableRef(1121) into MethodInvocation(1123) at 0", "Insert SimpleName: getTableAlias(1122) into MethodInvocation(1123) at 1", "Insert MethodInvocation(1347) into InfixExpression: ==(1349) at 0", "Insert NullLiteral(1348) into InfixExpression: ==(1349) at 1", "Insert SimpleName: tableRef(1355) into MethodInvocation(1357) at 0", "Insert SimpleName: getTableAlias(1356) into MethodInvocation(1357) at 1", "Insert SimpleName: tableRef(551) into MethodInvocation(553) at 0", "Insert SimpleName: getTableAlias(552) into MethodInvocation(553) at 1", "Insert SimpleName: tableRef(975) into MethodInvocation(977) at 0", "Insert SimpleName: getTableAlias(976) into MethodInvocation(977) at 1", "Insert SimpleName: tableRef(1111) into MethodInvocation(1113) at 0", "Insert SimpleName: getTableAlias(1112) into MethodInvocation(1113) at 1", "Insert SimpleName: tableRef(1345) into MethodInvocation(1347) at 0", "Insert SimpleName: getTableAlias(1346) into MethodInvocation(1347) at 1", "Insert ConditionalExpression(1994) into ClassInstanceCreation(1997) at 2", "Insert InfixExpression: ==(1985) into ConditionalExpression(1994) at 0", "Move MethodInvocation(1993) into ConditionalExpression(1994) at 1", "Insert MethodInvocation(1993) into ConditionalExpression(1994) at 2", "Insert MethodInvocation(1983) into InfixExpression: ==(1985) at 0", "Insert NullLiteral(1984) into InfixExpression: ==(1985) at 1", "Insert SimpleName: tableRef(1991) into MethodInvocation(1993) at 0", "Insert SimpleName: getTableAlias(1992) into MethodInvocation(1993) at 1", "Insert SimpleName: tableRef(1981) into MethodInvocation(1983) at 0", "Insert SimpleName: getTableAlias(1982) into MethodInvocation(1983) at 1", "Delete SimpleName: colName(444)", "Delete SimpleName: SchemaUtil(445)", "Delete SimpleName: getColumnName(446)", "Delete SimpleName: colName(450)", "Delete MethodInvocation(451)", "Delete Assignment: =(452)", "Delete ExpressionStatement(453)", "Delete SimpleName: colName(485)", "Delete SimpleName: SchemaUtil(486)", "Delete SimpleName: getColumnName(487)", "Delete SimpleName: table(488)", "Delete SimpleName: getName(489)", "Delete MethodInvocation(490)", "Delete SimpleName: getString(491)", "Delete MethodInvocation(492)", "Delete SimpleName: colName(493)", "Delete MethodInvocation(494)", "Delete Assignment: =(495)", "Delete ExpressionStatement(496)", "Delete SimpleName: colName(910)", "Delete SimpleName: SchemaUtil(911)", "Delete SimpleName: getColumnName(912)", "Delete SimpleName: colName(916)", "Delete MethodInvocation(917)", "Delete Assignment: =(918)", "Delete ExpressionStatement(919)", "Delete SimpleName: colName(951)", "Delete SimpleName: SchemaUtil(952)", "Delete SimpleName: getColumnName(953)", "Delete SimpleName: table(954)", "Delete SimpleName: getName(955)", "Delete MethodInvocation(956)", "Delete SimpleName: getString(957)", "Delete MethodInvocation(958)", "Delete SimpleName: colName(959)", "Delete MethodInvocation(960)", "Delete Assignment: =(961)", "Delete ExpressionStatement(962)"]}}, {"RowProjector_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS QualifiedName: org.apache.phoenix.schema.AmbiguousColumnException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS ImportDeclaration to CompilationUnit at 8", "INS QualifiedName: com.google.common.collect.ArrayListMultimap to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS QualifiedName: com.google.common.collect.ListMultimap to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 9"]}, {"root": "UPDATE from Map<String,Integer> to ListMultimap<String,Integer>", "operations": ["UPD ParameterizedType: Map<String,Integer> from Map<String,Integer> to ListMultimap<String,Integer>"]}, {"root": "UPDATE from Map to ListMultimap", "operations": ["UPD SimpleName: Map from Map to ListMultimap", "UPD SimpleType: Map from Map to ListMultimap"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS IfStatement to Block at 3", "INS InfixExpression: > to IfStatement at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: name to ClassInstanceCreation at 1", "INS SimpleName: AmbiguousColumnException to SimpleType: AmbiguousColumnException at 0", "INS SimpleName: index to MethodInvocation at 0", "INS SimpleType: AmbiguousColumnException to ClassInstanceCreation at 0", "INS Block to IfStatement at 1", "INS SimpleName: size to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: > at 0", "INS NumberLiteral: 1 to InfixExpression: > at 1", "INS ThrowStatement to Block at 0"]}, {"root": "INS ParameterizedType: List<Integer> to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: List to ParameterizedType: List<Integer> at 0", "INS ParameterizedType: List<Integer> to VariableDeclarationStatement at 0"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS SimpleName: index to MethodInvocation at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS MethodInvocation to IfStatement at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS SimpleName: index to MethodInvocation at 0", "INS SimpleName: get to MethodInvocation at 1"]}, {"root": "INS IfStatement to Block at 4", "operations": ["INS SimpleName: colProjector to MethodInvocation at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: getTableName to MethodInvocation at 1", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: reverseIndex to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleName: SchemaUtil to MethodInvocation at 0", "INS SimpleName: position to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: colProjector to MethodInvocation at 0", "INS SimpleName: getTableName to MethodInvocation at 1", "INS IfStatement to Block at 4", "INS SimpleName: getColumnName to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getName to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: colProjector to MethodInvocation at 0"]}, {"root": "MOVE from ParameterizedType: List<Integer>", "operations": ["MOV SimpleType: Integer to ParameterizedType: List<Integer> at 1"]}, {"root": "UPDATE from Maps to ArrayListMultimap", "operations": ["UPD SimpleName: Maps from Maps to ArrayListMultimap"]}, {"root": "INS SimpleType: String to MethodInvocation at 1", "operations": ["INS SimpleType: String to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "INS SimpleType: Integer to MethodInvocation at 2", "operations": ["INS SimpleType: Integer to MethodInvocation at 2", "INS SimpleName: Integer to SimpleType: Integer at 0"]}, {"root": "INS SimpleName: create to MethodInvocation at 3", "operations": ["INS SimpleName: create to MethodInvocation at 3"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS MethodInvocation to IfStatement at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS SimpleName: index to MethodInvocation at 0"]}, {"root": "DEL SimpleName: newHashMapWithExpectedSize", "operations": ["DEL SimpleName: newHashMapWithExpectedSize"]}, {"root": "DEL SimpleName: position", "operations": ["DEL SimpleName: position"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL NullLiteral", "DEL InfixExpression: ==", "DEL SimpleName: index"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL SimpleName: index", "DEL InfixExpression: ==", "DEL NullLiteral"]}, {"root": "DEL SimpleName: index", "operations": ["DEL SimpleName: index"]}]}}, {"RowProjector_diff": {"operations": ["Insert ImportDeclaration(11) into CompilationUnit(468) at 5", "Insert ImportDeclaration(17) into CompilationUnit(468) at 8", "Insert ImportDeclaration(19) into CompilationUnit(468) at 9", "Insert QualifiedName: org.apache.phoenix.schema.AmbiguousColumnException(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: com.google.common.collect.ArrayListMultimap(16) into ImportDeclaration(17) at 0", "Insert QualifiedName: com.google.common.collect.ListMultimap(18) into ImportDeclaration(19) at 0", "Update ParameterizedType: Map<String,Integer>(69) to ListMultimap<String,Integer>", "Update SimpleType: Map(64) to ListMultimap", "Insert IfStatement(368) into Block(374) at 3", "Update SimpleName: Map(63) to ListMultimap", "Insert ParameterizedType: List<Integer>(314) into VariableDeclarationStatement(321) at 0", "Insert MethodInvocation(324) into IfStatement(356) at 0", "Insert InfixExpression: >(361) into IfStatement(368) at 0", "Insert Block(367) into IfStatement(368) at 1", "Insert MethodInvocation(372) into ReturnStatement(373) at 0", "Insert IfStatement(242) into Block(243) at 4", "Insert SimpleType: List(311) into ParameterizedType: List<Integer>(314) at 0", "Move SimpleType: Integer(280) into ParameterizedType: List<Integer>(314) at 1", "Insert SimpleName: index(322) into MethodInvocation(324) at 0", "Insert SimpleName: isEmpty(323) into MethodInvocation(324) at 1", "Insert MethodInvocation(359) into InfixExpression: >(361) at 0", "Insert NumberLiteral: 1(360) into InfixExpression: >(361) at 1", "Insert ThrowStatement(366) into Block(367) at 0", "Insert SimpleName: index(369) into MethodInvocation(372) at 0", "Insert SimpleName: get(370) into MethodInvocation(372) at 1", "Insert NumberLiteral: 0(371) into MethodInvocation(372) at 2", "Update SimpleName: Maps(160) to ArrayListMultimap", "Insert SimpleType: String(168) into MethodInvocation(172) at 1", "Insert SimpleType: Integer(170) into MethodInvocation(172) at 2", "Insert SimpleName: create(171) into MethodInvocation(172) at 3", "Insert PrefixExpression: !(226) into IfStatement(242) at 0", "Insert Block(241) into IfStatement(242) at 1", "Insert SimpleName: List(310) into SimpleType: List(311) at 0", "Insert MethodInvocation(347) into IfStatement(354) at 0", "Insert SimpleName: index(357) into MethodInvocation(359) at 0", "Insert SimpleName: size(358) into MethodInvocation(359) at 1", "Insert ClassInstanceCreation(365) into ThrowStatement(366) at 0", "Insert SimpleName: String(167) into SimpleType: String(168) at 0", "Insert SimpleName: Integer(169) into SimpleType: Integer(170) at 0", "Insert MethodInvocation(225) into PrefixExpression: !(226) at 0", "Insert ExpressionStatement(240) into Block(241) at 0", "Insert SimpleName: index(345) into MethodInvocation(347) at 0", "Insert SimpleName: isEmpty(346) into MethodInvocation(347) at 1", "Insert SimpleType: AmbiguousColumnException(363) into ClassInstanceCreation(365) at 0", "Insert SimpleName: name(364) into ClassInstanceCreation(365) at 1", "Insert MethodInvocation(223) into MethodInvocation(225) at 0", "Insert SimpleName: isEmpty(224) into MethodInvocation(225) at 1", "Insert MethodInvocation(239) into ExpressionStatement(240) at 0", "Insert SimpleName: AmbiguousColumnException(362) into SimpleType: AmbiguousColumnException(363) at 0", "Insert SimpleName: colProjector(221) into MethodInvocation(223) at 0", "Insert SimpleName: getTableName(222) into MethodInvocation(223) at 1", "Insert SimpleName: reverseIndex(227) into MethodInvocation(239) at 0", "Insert SimpleName: put(228) into MethodInvocation(239) at 1", "Insert MethodInvocation(237) into MethodInvocation(239) at 2", "Insert SimpleName: position(238) into MethodInvocation(239) at 3", "Insert SimpleName: SchemaUtil(229) into MethodInvocation(237) at 0", "Insert SimpleName: getColumnName(230) into MethodInvocation(237) at 1", "Insert MethodInvocation(233) into MethodInvocation(237) at 2", "Insert MethodInvocation(236) into MethodInvocation(237) at 3", "Insert SimpleName: colProjector(231) into MethodInvocation(233) at 0", "Insert SimpleName: getTableName(232) into MethodInvocation(233) at 1", "Insert SimpleName: colProjector(234) into MethodInvocation(236) at 0", "Insert SimpleName: getName(235) into MethodInvocation(236) at 1", "Delete SimpleName: newHashMapWithExpectedSize(161)", "Delete SimpleName: position(162)", "Delete SimpleName: index(288)", "Delete NullLiteral(289)", "Delete InfixExpression: ==(290)", "Delete SimpleName: index(311)", "Delete NullLiteral(312)", "Delete InfixExpression: ==(313)", "Delete SimpleName: index(323)"]}}, {"SubqueryRewriter_cluster": {"actions": [{"root": "INS PrefixExpression: ! to MethodInvocation at 3", "operations": ["INS PrefixExpression: ! to MethodInvocation at 3", "INS SimpleName: node to MethodInvocation at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: isSubqueryDistinct to MethodInvocation at 1"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}]}}, {"SubqueryRewriter_diff": {"operations": ["Insert PrefixExpression: !(449) into MethodInvocation(451) at 3", "Insert MethodInvocation(448) into PrefixExpression: !(449) at 0", "Insert SimpleName: node(446) into MethodInvocation(448) at 0", "Insert SimpleName: isSubqueryDistinct(447) into MethodInvocation(448) at 1", "Delete BooleanLiteral: true(446)"]}}, {"BaseQueryPlan_cluster": {"actions": [{"root": "INS ReturnStatement to Block at 2", "operations": ["INS ReturnStatement to Block at 2", "INS SimpleType: BaseQueryPlan to InstanceofExpression at 1", "INS SimpleName: getPlanSteps to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: plan to InstanceofExpression at 0", "INS MethodInvocation to ConditionalExpression at 2", "INS InstanceofExpression to ConditionalExpression at 0", "INS ClassInstanceCreation to ConditionalExpression at 1", "INS ConditionalExpression to ReturnStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ExplainPlan to ClassInstanceCreation at 0"]}, {"root": "UPDATE from getPlanSteps to plan", "operations": ["UPD SimpleName: getPlanSteps from getPlanSteps to plan"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: iterator to MethodInvocation at 1", "MOV SimpleName: getPlanSteps to MethodInvocation at 0"]}, {"root": "UPDATE from iterator to getExplainPlan", "operations": ["UPD SimpleName: iterator from iterator to getExplainPlan"]}, {"root": "UPDATE from ResultIterator to BaseQueryPlan", "operations": ["UPD SimpleName: ResultIterator from ResultIterator to BaseQueryPlan"]}, {"root": "MOVE from SimpleType: BaseQueryPlan", "operations": ["MOV SimpleName: ResultIterator to SimpleType: BaseQueryPlan at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 1"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleType: ResultIterator", "DEL SimpleName: iterator"]}, {"root": "DEL ReturnStatement", "operations": ["DEL MethodInvocation", "DEL ReturnStatement", "DEL ClassInstanceCreation"]}]}}, {"BaseQueryPlan_diff": {"operations": ["Insert ReturnStatement(1410) into Block(1411) at 2", "Insert ConditionalExpression(1409) into ReturnStatement(1410) at 0", "Insert InstanceofExpression(1397) into ConditionalExpression(1409) at 0", "Insert ClassInstanceCreation(1405) into ConditionalExpression(1409) at 1", "Insert MethodInvocation(1408) into ConditionalExpression(1409) at 2", "Insert SimpleName: plan(1394) into InstanceofExpression(1397) at 0", "Insert SimpleType: BaseQueryPlan(1396) into InstanceofExpression(1397) at 1", "Move SimpleType: ExplainPlan(1403) into ClassInstanceCreation(1405) at 0", "Insert MethodInvocation(1404) into ClassInstanceCreation(1405) at 1", "Update SimpleName: getPlanSteps(1404) to plan", "Move SimpleName: getPlanSteps(1404) into MethodInvocation(1408) at 0", "Update SimpleName: iterator(1405) to getExplainPlan", "Move SimpleName: iterator(1405) into MethodInvocation(1408) at 1", "Update SimpleName: ResultIterator(1394) to BaseQueryPlan", "Move SimpleName: ResultIterator(1394) into SimpleType: BaseQueryPlan(1396) at 0", "Insert SimpleName: getPlanSteps(1400) into MethodInvocation(1404) at 0", "Move MethodInvocation(1399) into MethodInvocation(1404) at 1", "Delete SimpleType: ResultIterator(1395)", "Delete SimpleName: iterator(1396)", "Delete VariableDeclarationFragment(1400)", "Delete VariableDeclarationStatement(1401)", "Delete MethodInvocation(1406)", "Delete ClassInstanceCreation(1407)", "Delete ReturnStatement(1408)"]}}, {"HashJoinPlan_cluster": {"actions": [{"root": "INS BooleanLiteral: false to MethodInvocation at 5", "operations": ["INS BooleanLiteral: false to MethodInvocation at 5"]}, {"root": "DEL IfStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: LiteralExpression", "DEL SimpleName: maxValue", "DEL MethodInvocation", "DEL SimpleName: minValue", "DEL SimpleName: create", "DEL SimpleName: type", "DEL SimpleName: toObject", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL QualifiedName: CompareOp.EQUAL", "DEL SimpleName: minValue", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: ComparisonExpression", "DEL SimpleName: type", "DEL MethodInvocation", "DEL SimpleName: Lists", "DEL SimpleName: newArrayList", "DEL SimpleName: lhsExpression", "DEL MethodInvocation", "DEL SimpleName: newConstant", "DEL SimpleName: ptr"]}]}}, {"HashJoinPlan_diff": {"operations": ["Insert BooleanLiteral: false(1023) into MethodInvocation(1024) at 5", "Delete SimpleName: minValue(944)", "Delete SimpleName: equals(945)", "Delete SimpleName: maxValue(946)", "Delete MethodInvocation(947)", "Delete SimpleName: ComparisonExpression(948)", "Delete SimpleName: create(949)", "Delete QualifiedName: CompareOp.EQUAL(950)", "Delete SimpleName: Lists(951)", "Delete SimpleName: newArrayList(952)", "Delete SimpleName: lhsExpression(953)", "Delete SimpleName: LiteralExpression(954)", "Delete SimpleName: newConstant(955)", "Delete SimpleName: type(956)", "Delete SimpleName: toObject(957)", "Delete SimpleName: minValue(958)", "Delete MethodInvocation(959)", "Delete SimpleName: type(960)", "Delete MethodInvocation(961)", "Delete MethodInvocation(962)", "Delete SimpleName: ptr(963)", "Delete MethodInvocation(964)", "Delete ReturnStatement(965)", "Delete IfStatement(966)"]}}, {"InListExpression_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS ParameterizedType: List<Expression> to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: SQLException to MethodDeclaration at 7", "INS SimpleType: Expression to MethodDeclaration at 2", "INS SimpleType: ImmutableBytesWritable to SingleVariableDeclaration at 0", "INS SimpleName: List to SimpleType: List at 0", "INS ReturnStatement to Block at 0", "INS SimpleType: List to ParameterizedType: List<Expression> at 0", "INS SimpleName: ptr to SingleVariableDeclaration at 1", "INS SimpleName: ptr to MethodInvocation at 3", "INS BooleanLiteral: true to MethodInvocation at 4", "INS SimpleName: create to MethodDeclaration at 3", "INS SimpleName: Expression to SimpleType: Expression at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: isNegate to SingleVariableDeclaration at 1", "INS SimpleName: children to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: isNegate to MethodInvocation at 2", "INS SimpleName: Expression to SimpleType: Expression at 0", "INS SimpleName: create to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleType: Expression to ParameterizedType: List<Expression> at 1", "INS SimpleName: ImmutableBytesWritable to SimpleType: ImmutableBytesWritable at 0", "INS SimpleName: children to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 8", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: SQLException to SimpleType: SQLException at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleName: allowShortcut to SingleVariableDeclaration at 1", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS SimpleName: allowShortcut to InfixExpression: && at 0", "INS InfixExpression: && to IfStatement at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: == to InfixExpression: && at 1"]}]}}, {"InListExpression_diff": {"operations": ["Insert MethodDeclaration(123) into TypeDeclaration: class(1197) at 9", "Insert Modifier: public(94) into MethodDeclaration(123) at 0", "Insert Modifier: static(95) into MethodDeclaration(123) at 1", "Insert SimpleType: Expression(97) into MethodDeclaration(123) at 2", "Insert SimpleName: create(98) into MethodDeclaration(123) at 3", "Insert SingleVariableDeclaration(105) into MethodDeclaration(123) at 4", "Insert SingleVariableDeclaration(108) into MethodDeclaration(123) at 5", "Insert SingleVariableDeclaration(112) into MethodDeclaration(123) at 6", "Insert SimpleType: SQLException(114) into MethodDeclaration(123) at 7", "Insert Block(122) into MethodDeclaration(123) at 8", "Insert SingleVariableDeclaration(145) into MethodDeclaration(339) at 7", "Insert SimpleName: Expression(96) into SimpleType: Expression(97) at 0", "Insert ParameterizedType: List<Expression>(103) into SingleVariableDeclaration(105) at 0", "Insert SimpleName: children(104) into SingleVariableDeclaration(105) at 1", "Insert PrimitiveType: boolean(106) into SingleVariableDeclaration(108) at 0", "Insert SimpleName: isNegate(107) into SingleVariableDeclaration(108) at 1", "Insert SimpleType: ImmutableBytesWritable(110) into SingleVariableDeclaration(112) at 0", "Insert SimpleName: ptr(111) into SingleVariableDeclaration(112) at 1", "Insert SimpleName: SQLException(113) into SimpleType: SQLException(114) at 0", "Insert ReturnStatement(121) into Block(122) at 0", "Insert PrimitiveType: boolean(143) into SingleVariableDeclaration(145) at 0", "Insert SimpleName: allowShortcut(144) into SingleVariableDeclaration(145) at 1", "Insert SimpleType: List(100) into ParameterizedType: List<Expression>(103) at 0", "Insert SimpleType: Expression(102) into ParameterizedType: List<Expression>(103) at 1", "Insert SimpleName: ImmutableBytesWritable(109) into SimpleType: ImmutableBytesWritable(110) at 0", "Insert MethodInvocation(120) into ReturnStatement(121) at 0", "Insert InfixExpression: &&(191) into IfStatement(203) at 0", "Insert SimpleName: List(99) into SimpleType: List(100) at 0", "Insert SimpleName: Expression(101) into SimpleType: Expression(102) at 0", "Insert SimpleName: create(115) into MethodInvocation(120) at 0", "Insert SimpleName: children(116) into MethodInvocation(120) at 1", "Insert SimpleName: isNegate(117) into MethodInvocation(120) at 2", "Insert SimpleName: ptr(118) into MethodInvocation(120) at 3", "Insert BooleanLiteral: true(119) into MethodInvocation(120) at 4", "Insert SimpleName: allowShortcut(185) into InfixExpression: &&(191) at 0", "Move InfixExpression: ==(156) into InfixExpression: &&(191) at 1"]}}, {"QueryOptimizer_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS ImportDeclaration to CompilationUnit at 7", "INS QualifiedName: org.apache.phoenix.compile.ExpressionCompiler to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 13", "operations": ["INS ImportDeclaration to CompilationUnit at 13", "INS QualifiedName: org.apache.phoenix.compile.StatementContext to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS QualifiedName: org.apache.phoenix.compile.StatementNormalizer to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 14"]}, {"root": "INS ImportDeclaration to CompilationUnit at 15", "operations": ["INS ImportDeclaration to CompilationUnit at 15", "INS QualifiedName: org.apache.phoenix.compile.SubqueryRewriter to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 18", "operations": ["INS QualifiedName: org.apache.phoenix.parse.AliasedNode to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 18"]}, {"root": "INS ImportDeclaration to CompilationUnit at 21", "operations": ["INS QualifiedName: org.apache.phoenix.parse.AndParseNode to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 21"]}, {"root": "INS ImportDeclaration to CompilationUnit at 22", "operations": ["INS QualifiedName: org.apache.phoenix.parse.BooleanParseNodeVisitor to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 22"]}, {"root": "INS ImportDeclaration to CompilationUnit at 23", "operations": ["INS ImportDeclaration to CompilationUnit at 23", "INS QualifiedName: org.apache.phoenix.parse.ColumnParseNode to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 24", "operations": ["INS QualifiedName: org.apache.phoenix.parse.ParseNode to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 24"]}, {"root": "INS ImportDeclaration to CompilationUnit at 36", "operations": ["INS ImportDeclaration to CompilationUnit at 36", "INS QualifiedName: org.apache.phoenix.schema.types.PDataType to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 38", "operations": ["INS ImportDeclaration to CompilationUnit at 38", "INS QualifiedName: org.apache.phoenix.schema.SaltingUtil to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 39", "operations": ["INS QualifiedName: org.apache.phoenix.util.IndexUtil to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 39"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 18", "operations": ["INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS IfStatement to Block at 0", "INS SimpleType: SQLException to MethodDeclaration at 6", "INS SimpleType: ParseNode to MethodInvocation at 1", "INS Block to TryStatement at 0", "INS SimpleName: enterBooleanNode to MethodDeclaration at 3", "INS SimpleName: dataResolver to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleType: ParseNode to VariableDeclarationStatement at 0", "INS SimpleType: AndParseNode to SingleVariableDeclaration at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: StatementContext to SimpleType: StatementContext at 0", "INS SimpleType: ParseNode to ParameterizedType: BooleanParseNodeVisitor<ParseNode> at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS FieldAccess to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS Modifier: public to MethodDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: l to MethodInvocation at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: BooleanParseNodeVisitor to SimpleType: BooleanParseNodeVisitor at 0", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: extractedConditions to FieldAccess at 1", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleName: and to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: size to SingleVariableDeclaration at 1", "INS IfStatement to Block at 0", "INS ReturnStatement to IfStatement at 1", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: l to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleType: ExpressionCompiler to ClassInstanceCreation at 0", "INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS SimpleName: node to MethodInvocation at 2", "INS SimpleName: Lists to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ParameterizedType: List<ParseNode> to SingleVariableDeclaration at 0", "INS NullLiteral to ReturnStatement at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleType: SQLException to MethodDeclaration at 6", "INS SimpleName: ColumnResolver to SimpleType: ColumnResolver at 0", "INS SimpleName: leaveBooleanNode to MethodDeclaration at 3", "INS SimpleType: List to ParameterizedType: List<ParseNode> at 0", "INS SimpleName: get to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: ParseNode to ParameterizedType: List<ParseNode> at 1", "INS ParameterizedType: List<ParseNode> to FieldDeclaration at 1", "INS Block to MethodDeclaration at 7", "INS SimpleName: node to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS SimpleName: enterNonBooleanNode to MethodDeclaration at 3", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS Block to MethodDeclaration at 3", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS Modifier: final to FieldDeclaration at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: add to MethodInvocation at 1", "INS ParameterizedType: BooleanParseNodeVisitor<ParseNode> to TypeDeclaration: class at 3", "INS SimpleType: SQLException to MethodDeclaration at 5", "INS ExpressionStatement to Block at 0", "INS FieldAccess to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: expressionCompiler to FieldAccess at 1", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS SimpleName: dataResolver to FieldAccess at 1", "INS SimpleType: ParseNode to MethodDeclaration at 2", "INS SimpleName: node to MethodInvocation at 2", "INS SimpleName: extractedConditions to MethodInvocation at 0", "INS NumberLiteral: 1 to InfixExpression: == at 1", "INS SimpleName: newElementList to MethodDeclaration at 3", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: ColumnResolver to FieldDeclaration at 2", "INS SimpleName: and to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS MethodInvocation to ReturnStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS SimpleType: ParseNode to MethodInvocation at 1", "INS TypeDeclaration: class to TypeDeclaration: class at 18", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: WhereConditionRewriter to TypeDeclaration: class at 2", "INS SimpleType: SQLException to MethodDeclaration at 4", "INS SimpleName: visitLeave to MethodDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS Block to MethodDeclaration at 6", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleName: ColumnNotFoundException to SimpleType: ColumnNotFoundException at 0", "INS SimpleName: l to SingleVariableDeclaration at 1", "INS Modifier: protected to MethodDeclaration at 1", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleType: List to ParameterizedType: List<ParseNode> at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: translatedNode to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ReturnStatement to Block at 0", "INS SimpleType: List to ParameterizedType: List<ParseNode> at 0", "INS SimpleName: FACTORY to MethodInvocation at 0", "INS SimpleType: List to ParameterizedType: List<ParseNode> at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleType: AndParseNode to SingleVariableDeclaration at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Modifier: static to TypeDeclaration: class at 1", "INS Block to MethodDeclaration at 7", "INS VariableDeclarationStatement to Block at 0", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS ReturnStatement to IfStatement at 1", "INS FieldAccess to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS NullLiteral to InfixExpression: != at 1", "INS ThisExpression to FieldAccess at 0", "INS Block to MethodDeclaration at 6", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Block to CatchClause at 1", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: ColumnResolver to SimpleType: ColumnResolver at 0", "INS SimpleName: l to SingleVariableDeclaration at 1", "INS SimpleName: AndParseNode to SimpleType: AndParseNode at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: element to MethodInvocation at 2", "INS SimpleName: expressionCompiler to MethodInvocation at 0", "INS ThisExpression to FieldAccess at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: newArrayList to MethodInvocation at 2", "INS SimpleName: getExtractedCondition to MethodDeclaration at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: SQLException to MethodDeclaration at 5", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS SimpleName: translatedNode to ReturnStatement at 0", "INS SimpleName: extractedConditions to FieldAccess at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS IfStatement to Block at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: element to InfixExpression: != at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: StatementContext to SingleVariableDeclaration at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS ReturnStatement to Block at 3", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS SimpleName: size to MethodInvocation at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleType: BooleanParseNodeVisitor to ParameterizedType: BooleanParseNodeVisitor<ParseNode> at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: newArrayListWithExpectedSize to MethodInvocation at 2", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: accept to MethodInvocation at 1", "INS Modifier: private to FieldDeclaration at 0", "INS TryStatement to Block at 2", "INS ReturnStatement to Block at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS ReturnStatement to IfStatement at 1", "INS SimpleName: ExpressionCompiler to SimpleType: ExpressionCompiler at 0", "INS SimpleType: ParseNode to MethodDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: visitEnter to MethodDeclaration at 3", "INS SimpleName: leaveNonBooleanNode to MethodDeclaration at 3", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: getChildren to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: SQLException to MethodDeclaration at 5", "INS SimpleName: l to MethodInvocation at 0", "INS SimpleName: node to ReturnStatement at 0", "INS SimpleName: extractedConditions to VariableDeclarationFragment at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleType: ParseNode to MethodDeclaration at 2", "INS SimpleType: SQLException to MethodDeclaration at 6", "INS Modifier: public to MethodDeclaration at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: dataResolver to MethodInvocation at 3", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS Modifier: protected to MethodDeclaration at 1", "INS SimpleType: ColumnResolver to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 2", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodInvocation to Assignment: = at 1", "INS NullLiteral to ReturnStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: context to SingleVariableDeclaration at 1", "INS SimpleName: l to MethodInvocation at 2", "INS SimpleName: expressionCompiler to VariableDeclarationFragment at 0", "INS SimpleName: l to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleType: ParseNode to ParameterizedType: List<ParseNode> at 1", "INS SimpleType: List to ParameterizedType: List<ParseNode> at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS MethodInvocation to ReturnStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: ExpressionCompiler to SimpleType: ExpressionCompiler at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleType: ExpressionCompiler to FieldDeclaration at 2", "INS BooleanLiteral: false to ReturnStatement at 0", "INS SimpleName: Lists to MethodInvocation at 0", "INS SimpleName: IndexStatementRewriter to MethodInvocation at 0", "INS SimpleName: extractedConditions to FieldAccess at 1", "INS SimpleName: l to MethodInvocation at 0", "INS SimpleName: WhereConditionRewriter to MethodDeclaration at 1", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS BooleanLiteral: false to ReturnStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS CatchClause to TryStatement at 1", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS ExpressionStatement to Block at 1", "INS ReturnStatement to Block at 3", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: reset to MethodInvocation at 1", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: context to ClassInstanceCreation at 1", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: extractedConditions to FieldAccess at 1", "INS SimpleName: expressionCompiler to MethodInvocation at 2", "INS ParameterizedType: List<ParseNode> to SingleVariableDeclaration at 0", "INS ParameterizedType: List<ParseNode> to SingleVariableDeclaration at 0", "INS Modifier: private to FieldDeclaration at 0", "INS IfStatement to Block at 1", "INS BooleanLiteral: true to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS IfStatement to Block at 1", "INS SimpleType: ParseNode to ParameterizedType: List<ParseNode> at 1", "INS ParameterizedType: List<ParseNode> to MethodDeclaration at 2", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: ParseNode to MethodDeclaration at 2", "INS ReturnStatement to IfStatement at 1", "INS SimpleName: extractedConditions to FieldAccess at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: l to MethodInvocation at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleType: ParseNode to ParameterizedType: List<ParseNode> at 1", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS Modifier: protected to MethodDeclaration at 1", "INS Block to MethodDeclaration at 6", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS IfStatement to Block at 2", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleType: ColumnNotFoundException to SingleVariableDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleType: ParseNode to ParameterizedType: List<ParseNode> at 1", "INS SimpleName: AndParseNode to SimpleType: AndParseNode at 0", "INS SimpleName: size to MethodInvocation at 3", "INS MethodInvocation to IfStatement at 0", "INS ReturnStatement to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: protected to MethodDeclaration at 1", "INS Block to MethodDeclaration at 7", "INS SimpleType: ParseNode to ParameterizedType: List<ParseNode> at 1", "INS SimpleType: List to ParameterizedType: List<ParseNode> at 0", "INS Block to IfStatement at 1", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS Modifier: public to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: element to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 1", "INS ParameterizedType: List<ParseNode> to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to IfStatement at 0", "INS ExpressionStatement to Block at 2", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: node to MethodInvocation at 0", "INS SimpleName: List to SimpleType: List at 0", "INS NullLiteral to ReturnStatement at 0", "INS SimpleName: translatedNode to MethodInvocation at 0", "INS SimpleName: addElement to MethodDeclaration at 3", "INS SimpleName: FACTORY to MethodInvocation at 0", "INS FieldAccess to MethodInvocation at 0", "INS SimpleName: List to SimpleType: List at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: dataResolver to SingleVariableDeclaration at 1", "INS NumberLiteral: 1 to InfixExpression: == at 1", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS FieldAccess to Assignment: = at 0", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS Modifier: private to TypeDeclaration: class at 0", "INS SimpleName: size to MethodInvocation at 1", "INS SimpleName: l to SingleVariableDeclaration at 1", "INS SimpleName: translate to MethodInvocation at 1", "INS SimpleName: dataResolver to VariableDeclarationFragment at 0", "INS SimpleName: List to SimpleType: List at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 10", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: isHinted to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 10"]}, {"root": "INS Block to MethodDeclaration at 12", "operations": ["INS IfStatement to Block at 8", "INS Block to MethodDeclaration at 12", "INS Block to IfStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 5", "MOV VariableDeclarationStatement to Block at 1", "MOV ExpressionStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 4", "MOV ReturnStatement to Block at 9", "MOV TryStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 6", "MOV IfStatement to Block at 5", "MOV VariableDeclarationStatement to Block at 7"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0", "MOV Block to TryStatement at 0"]}, {"root": "INS CatchClause to TryStatement at 1", "operations": ["INS SimpleName: List to SimpleType: List at 0", "INS Assignment: = to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 10", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS CharacterLiteral: '\"' to InfixExpression: + at 0", "INS SimpleType: List to ParameterizedType: List<AliasedNode> at 0", "INS SimpleName: isMultiTenant to MethodInvocation at 1", "INS IfStatement to Block at 2", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: dataSelect to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: newArrayListWithExpectedSize to MethodInvocation at 2", "INS SimpleName: pkColumns to MethodInvocation at 0", "INS SimpleName: getFrom to MethodInvocation at 1", "INS SimpleName: dataColType to VariableDeclarationFragment at 0", "INS QualifiedName: Hint.RANGE_SCAN_HASH_JOIN to ArrayInitializer at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS InfixExpression: && to IfStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: IndexUtil to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS BooleanLiteral: false to MethodInvocation at 12", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 17", "INS Block to IfStatement at 1", "INS NullLiteral to ClassInstanceCreation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getHint to MethodInvocation at 1", "INS SimpleName: FACTORY to MethodInvocation at 0", "INS ConditionalExpression to ParenthesizedExpression at 0", "INS SimpleName: get to MethodInvocation at 1", "INS BooleanLiteral: false to MethodInvocation at 4", "INS VariableDeclarationStatement to Block at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: hasSequence to MethodInvocation at 1", "INS SimpleName: ColumnParseNode to SimpleType: ColumnParseNode at 0", "INS SimpleName: AliasedNode to SimpleType: AliasedNode at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: and to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: query to MethodInvocation at 2", "INS SimpleName: IndexUtil to MethodInvocation at 0", "INS SimpleType: AliasedNode to ParameterizedType: List<AliasedNode> at 1", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getConnection to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 14", "INS SimpleName: column to MethodInvocation at 0", "INS SimpleName: Lists to MethodInvocation at 0", "INS SimpleName: getLimit to MethodInvocation at 1", "INS SimpleName: FACTORY to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: getConnection to MethodInvocation at 1", "INS SimpleName: WhereConditionRewriter to SimpleType: WhereConditionRewriter at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS ExpressionStatement to Block at 16", "INS SimpleName: getConnection to MethodInvocation at 1", "INS SimpleName: getTable to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: getIndexColumnDataType to MethodInvocation at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: compile to MethodInvocation at 1", "INS SimpleName: SelectStatement to SimpleType: SelectStatement at 0", "INS SimpleType: WhereConditionRewriter to VariableDeclarationStatement at 0", "INS ParenthesizedExpression to InfixExpression: + at 0", "INS SimpleName: getBindCount to MethodInvocation at 1", "INS SimpleName: pkColumns to MethodInvocation at 0", "INS MethodInvocation to ConditionalExpression at 1", "INS SimpleName: context to ClassInstanceCreation at 2", "INS ExpressionStatement to Block at 7", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to InfixExpression: != at 0", "INS SimpleName: HintNode to MethodInvocation at 0", "INS SimpleName: getConnection to MethodInvocation at 1", "INS Block to ForStatement at 3", "INS SimpleName: statement to ClassInstanceCreation at 1", "INS ParenthesizedExpression to InfixExpression: + at 1", "INS SimpleName: dataSelect to MethodInvocation at 2", "INS NullLiteral to MethodInvocation at 8", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: context to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: statement to MethodInvocation at 0", "INS StringLiteral: \"NO_INDEX SKIP_SCAN_HASH_JOIN\" to MethodInvocation at 2", "INS SimpleName: where to MethodInvocation at 0", "INS SimpleType: HintNode to VariableDeclarationStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: indexSelect to MethodInvocation at 0", "INS SimpleName: PDataType to SimpleType: PDataType at 0", "INS SimpleName: StatementContext to SimpleType: StatementContext at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: indexColNode to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: indexSelect to MethodInvocation at 0", "INS SimpleName: queryResolver to MethodInvocation at 3", "INS SimpleName: dataPlan to MethodInvocation at 0", "INS SimpleName: query to MethodInvocation at 2", "INS ParameterizedType: List<PColumn> to VariableDeclarationStatement at 0", "INS SimpleName: in to MethodInvocation at 1", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: HintNode to SimpleType: HintNode at 0", "INS SimpleName: outerWhere to Assignment: = at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: isTenantSpecific to ConditionalExpression at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Lists to MethodInvocation at 0", "INS SimpleName: FACTORY to MethodInvocation at 0", "INS IfStatement to Block at 11", "INS SimpleType: ParseNode to ParameterizedType: List<ParseNode> at 1", "INS SimpleName: getContext to MethodInvocation at 1", "INS SimpleType: PTable to VariableDeclarationStatement at 0", "INS ConditionalExpression to ParenthesizedExpression at 0", "INS SimpleType: ColumnResolver to VariableDeclarationStatement at 0", "INS CatchClause to TryStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: SelectStatement to SimpleType: SelectStatement at 0", "INS SimpleName: queryResolver to Assignment: = at 0", "INS SimpleName: pkColumns to MethodInvocation at 0", "INS QualifiedName: Hint.INDEX to ArrayInitializer at 0", "INS SimpleName: where to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: getDataType to MethodInvocation at 1", "INS SimpleName: size to MethodInvocation at 1", "INS SimpleName: where to MethodInvocation at 6", "INS PostfixExpression: ++ to ForStatement at 2", "INS SimpleName: getName to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS BooleanLiteral: false to MethodInvocation at 4", "INS SimpleName: indexColName to InfixExpression: + at 1", "INS SimpleType: List to ParameterizedType: List<ParseNode> at 0", "INS SimpleName: query to ClassInstanceCreation at 2", "INS SimpleName: statement to ClassInstanceCreation at 1", "INS SimpleName: getPKColumns to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getTenantId to MethodInvocation at 1", "INS SimpleName: SelectStatement to SimpleType: SelectStatement at 0", "INS SimpleName: subquery to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 6", "INS SimpleName: getStatement to MethodInvocation at 1", "INS MethodInvocation to ConditionalExpression at 2", "INS VariableDeclarationStatement to Block at 18", "INS SimpleName: PColumn to SimpleType: PColumn at 0", "INS ExpressionStatement to Block at 6", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: aliasedNode to MethodInvocation at 1", "INS SimpleName: dataTable to MethodInvocation at 0", "INS SimpleName: normalize to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleType: StatementContext to ClassInstanceCreation at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS MethodInvocation to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: HintNode to MethodInvocation at 0", "INS CharacterLiteral: '\"' to InfixExpression: + at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: newArrayList to MethodInvocation at 1", "INS SimpleName: indexSelect to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: FACTORY to MethodInvocation at 0", "INS SimpleName: query to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: PColumn to ParameterizedType: List<PColumn> at 1", "INS SimpleName: ColumnParseNode to SimpleType: ColumnParseNode at 0", "INS SimpleName: nodes to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: dataTable to MethodInvocation at 0", "INS SimpleName: transform to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: query to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: nodes to MethodInvocation at 2", "INS SimpleName: hint to MethodInvocation at 3", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationStatement to Block at 4", "INS SimpleName: QueryPlan to SimpleType: QueryPlan at 0", "INS SimpleName: query to Assignment: = at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: List to ParameterizedType: List<PColumn> at 0", "INS ConditionalExpression to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 4", "INS SimpleName: query to Assignment: = at 0", "INS SimpleName: whereRewriter to MethodInvocation at 0", "INS SimpleName: getExtractedCondition to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: aliasedNodes to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 5", "INS SimpleName: FACTORY to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: QueryCompiler to SimpleType: QueryCompiler at 0", "INS SimpleName: hint to VariableDeclarationFragment at 0", "INS ParameterizedType: List<ParseNode> to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 8", "INS SimpleName: pkColumns to VariableDeclarationFragment at 0", "INS SimpleName: column to MethodInvocation at 2", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: nodes to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS SimpleName: PColumn to SimpleType: PColumn at 0", "INS SimpleName: outerWhere to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleName: queryResolver to VariableDeclarationFragment at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: indexColType to VariableDeclarationFragment at 0", "INS SimpleName: size to MethodInvocation at 1", "INS SimpleName: PTable to SimpleType: PTable at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: aliasedNodes to MethodInvocation at 5", "INS SimpleName: nodes to MethodInvocation at 0", "INS SimpleName: outerWhere to MethodInvocation at 2", "INS SimpleName: size to MethodInvocation at 1", "INS InfixExpression: != to InfixExpression: && at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: where to InfixExpression: != at 0", "INS VariableDeclarationStatement to Block at 13", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: query to VariableDeclarationFragment at 0", "INS NumberLiteral: 1 to InfixExpression: == at 1", "INS SimpleName: extractedCondition to MethodInvocation at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS NullLiteral to MethodInvocation at 7", "INS SimpleName: getBucketNum to MethodInvocation at 1", "INS SimpleType: SelectStatement to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 13", "INS SimpleName: indexColName to VariableDeclarationFragment at 0", "INS ParameterizedType: List<AliasedNode> to VariableDeclarationStatement at 0", "INS SimpleName: AliasedNode to SimpleType: AliasedNode at 0", "INS SimpleType: PDataType to VariableDeclarationStatement at 0", "INS NullLiteral to MethodInvocation at 9", "INS SimpleType: PColumn to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: select to MethodInvocation at 1", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleName: column to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: add to MethodInvocation at 1", "INS ClassInstanceCreation to MethodInvocation at 0", "INS SimpleName: extractedCondition to VariableDeclarationFragment at 0", "INS SimpleName: dataTable to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to InfixExpression: && at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to InfixExpression: && at 1", "INS CharacterLiteral: '\"' to InfixExpression: + at 2", "INS SimpleName: indexSelect to MethodInvocation at 0", "INS NumberLiteral: 0 to ConditionalExpression at 2", "INS MethodInvocation to MethodInvocation at 11", "INS SimpleName: isHinted to InfixExpression: && at 0", "INS ArrayInitializer to ArrayCreation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to InfixExpression: != at 1", "INS NumberLiteral: 1 to ConditionalExpression at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: accept to MethodInvocation at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS InfixExpression: && to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 15", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleType: StatementContext to VariableDeclarationStatement at 0", "INS SimpleName: innerSelect to MethodInvocation at 2", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS SimpleName: whereRewriter to VariableDeclarationFragment at 0", "INS BooleanLiteral: false to MethodInvocation at 3", "INS VariableDeclarationStatement to Block at 9", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleType: ParseNode to VariableDeclarationStatement at 0", "INS SimpleName: getResolver to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: pkColumns to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 12", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS NumberLiteral: 1 to ConditionalExpression at 1", "INS SimpleName: getTableRef to MethodInvocation at 1", "INS NullLiteral to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: FACTORY to MethodInvocation at 0", "INS SimpleName: Lists to MethodInvocation at 0", "INS SimpleType: ParseNode to MethodInvocation at 1", "INS SimpleName: queryResolver to ClassInstanceCreation at 3", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: combine to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS SimpleType: ParseNode to VariableDeclarationStatement at 0", "INS CharacterLiteral: '\"' to InfixExpression: + at 2", "INS SimpleName: indexSelect to MethodInvocation at 0", "INS SimpleName: SelectStatement to SimpleType: SelectStatement at 0", "INS SimpleName: dataPlan to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: getResolverForQuery to MethodInvocation at 1", "INS SimpleType: Hint to ArrayType: Hint[] at 0", "INS SimpleName: extractedCondition to InfixExpression: != at 0", "INS SimpleType: PDataType to VariableDeclarationStatement at 0", "INS SimpleName: newArrayListWithExpectedSize to MethodInvocation at 2", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: isTenantSpecific to VariableDeclarationFragment at 0", "INS SimpleName: size to MethodInvocation at 1", "INS SimpleName: innerSelect to VariableDeclarationFragment at 0", "INS ReturnStatement to Block at 19", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: ColumnResolver to SimpleType: ColumnResolver at 0", "INS BooleanLiteral: true to MethodInvocation at 5", "INS SimpleName: dataTable to VariableDeclarationFragment at 0", "INS SimpleName: select to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: < at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: posOffset to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: ColumnParseNode to ClassInstanceCreation at 0", "INS SimpleName: where to InfixExpression: != at 0", "INS SimpleName: outerWhere to MethodInvocation at 4", "INS SimpleName: WhereConditionRewriter to SimpleType: WhereConditionRewriter at 0", "INS SimpleName: indexColName to ClassInstanceCreation at 3", "INS SimpleType: ColumnParseNode to ClassInstanceCreation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: indexSelect to MethodInvocation at 0", "INS SimpleName: dataPlan to MethodInvocation at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS ArrayCreation to MethodInvocation at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: column to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: QueryCompiler to ClassInstanceCreation at 0", "INS SimpleName: SubqueryRewriter to MethodInvocation at 0", "INS SimpleName: plan to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to ConditionalExpression at 2", "INS SimpleType: ParseNode to VariableDeclarationStatement at 0", "INS SimpleType: AliasedNode to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getHint to MethodInvocation at 1", "INS SimpleName: getWhere to MethodInvocation at 1", "INS SimpleName: StatementNormalizer to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: column to VariableDeclarationFragment at 0", "INS SimpleName: rowValueConstructor to MethodInvocation at 1", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: queryResolver to MethodInvocation at 3", "INS SimpleName: whereRewriter to MethodInvocation at 2", "INS NullLiteral to ClassInstanceCreation at 1", "INS SimpleName: where to Assignment: = at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: subtract to MethodInvocation at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to Assignment: = at 1", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS SimpleName: FromCompiler to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: SelectStatement to VariableDeclarationStatement at 0", "INS SimpleName: FACTORY to MethodInvocation at 0", "INS SimpleName: String to SimpleType: String at 0", "INS InfixExpression: != to VariableDeclarationFragment at 1", "INS SimpleName: StatementContext to SimpleType: StatementContext at 0", "INS SimpleName: FACTORY to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: QueryPlan to VariableDeclarationStatement at 0", "INS SimpleName: plan to ReturnStatement at 0", "INS MethodInvocation to MethodInvocation at 10", "INS SimpleName: nodes to MethodInvocation at 0", "INS Block to CatchClause at 1", "INS SimpleName: getResolverForQuery to MethodInvocation at 1", "INS SimpleName: getIndexColumnName to MethodInvocation at 1", "INS InfixExpression: + to ClassInstanceCreation at 2", "INS SimpleName: Hint to SimpleType: Hint at 0", "INS InfixExpression: + to ClassInstanceCreation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ForStatement to Block at 7", "INS MethodInvocation to Assignment: = at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: i to MethodInvocation at 2", "INS SimpleName: isSalted to VariableDeclarationFragment at 0", "INS InfixExpression: == to ConditionalExpression at 0", "INS Dimension to ArrayType: Hint[] at 1", "INS SimpleName: posOffset to VariableDeclarationFragment at 1", "INS SimpleType: SelectStatement to VariableDeclarationStatement at 0", "INS SimpleType: SelectStatement to CastExpression at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: PDataType to SimpleType: PDataType at 0", "INS SimpleType: WhereConditionRewriter to ClassInstanceCreation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: FromCompiler to MethodInvocation at 0", "INS SimpleName: indexColNode to MethodInvocation at 3", "INS SimpleName: aliasedNodes to MethodInvocation at 0", "INS IfStatement to Block at 3", "INS SimpleType: ParseNode to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to InfixExpression: + at 1", "INS ArrayType: Hint[] to ArrayCreation at 0", "INS SimpleName: isSalted to ConditionalExpression at 0", "INS SimpleName: dataSelect to VariableDeclarationFragment at 0", "INS SimpleName: hint to MethodInvocation at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: resolver to ClassInstanceCreation at 2", "INS MethodInvocation to MethodInvocation at 3", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: getString to MethodInvocation at 1"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "INS BooleanLiteral: false to MethodInvocation at 7", "operations": ["INS BooleanLiteral: false to MethodInvocation at 7"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0", "MOV InfixExpression: == to IfStatement at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS IfStatement to IfStatement at 2", "INS Block to IfStatement at 1", "INS IfStatement to Block at 0", "INS SimpleType: ColumnNotFoundException to ClassInstanceCreation at 0", "INS StringLiteral: \"*\" to ClassInstanceCreation at 1", "INS Block to IfStatement at 1", "INS SimpleName: ColumnNotFoundException to SimpleType: ColumnNotFoundException at 0", "INS ThrowStatement to Block at 0", "INS ClassInstanceCreation to ThrowStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: && to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "UPDATE from && to ==", "operations": ["UPD InfixExpression: && from && to =="]}, {"root": "INS BooleanLiteral: true to MethodInvocation at 7", "operations": ["INS BooleanLiteral: true to MethodInvocation at 7"]}, {"root": "INS MethodInvocation to InfixExpression: && at 0", "operations": ["INS SimpleName: getIndexType to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: && at 0", "INS SimpleName: index to MethodInvocation at 0"]}, {"root": "INS QualifiedName: IndexType.GLOBAL to InfixExpression: && at 1", "operations": ["INS QualifiedName: IndexType.GLOBAL to InfixExpression: && at 1"]}, {"root": "INS InfixExpression: != to IfStatement at 0", "operations": ["INS SimpleName: indexColType to InfixExpression: != at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: dataColType to InfixExpression: != at 1"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS NullLiteral to MethodInvocation at 4", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: cast to MethodInvocation at 1", "INS SimpleName: dataColType to MethodInvocation at 3", "INS Assignment: = to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS NullLiteral to MethodInvocation at 5", "INS ExpressionStatement to Block at 0", "INS SimpleName: indexColNode to MethodInvocation at 2", "INS SimpleName: indexColNode to Assignment: = at 0", "INS SimpleName: FACTORY to MethodInvocation at 0"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL CatchClause", "operations": ["DEL Block", "DEL CatchClause"]}, {"root": "DEL Block", "operations": ["DEL Block"]}]}}, {"QueryOptimizer_diff": {"operations": ["Insert ImportDeclaration(15) into CompilationUnit(2593) at 7", "Insert ImportDeclaration(27) into CompilationUnit(2593) at 13", "Insert ImportDeclaration(29) into CompilationUnit(2593) at 14", "Insert ImportDeclaration(31) into CompilationUnit(2593) at 15", "Insert ImportDeclaration(37) into CompilationUnit(2593) at 18", "Insert ImportDeclaration(43) into CompilationUnit(2593) at 21", "Insert ImportDeclaration(45) into CompilationUnit(2593) at 22", "Insert ImportDeclaration(47) into CompilationUnit(2593) at 23", "Insert ImportDeclaration(49) into CompilationUnit(2593) at 24", "Insert ImportDeclaration(73) into CompilationUnit(2593) at 36", "Insert ImportDeclaration(77) into CompilationUnit(2593) at 38", "Insert ImportDeclaration(79) into CompilationUnit(2593) at 39", "Insert QualifiedName: org.apache.phoenix.compile.ExpressionCompiler(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: org.apache.phoenix.compile.StatementContext(26) into ImportDeclaration(27) at 0", "Insert QualifiedName: org.apache.phoenix.compile.StatementNormalizer(28) into ImportDeclaration(29) at 0", "Insert QualifiedName: org.apache.phoenix.compile.SubqueryRewriter(30) into ImportDeclaration(31) at 0", "Insert QualifiedName: org.apache.phoenix.parse.AliasedNode(36) into ImportDeclaration(37) at 0", "Insert QualifiedName: org.apache.phoenix.parse.AndParseNode(42) into ImportDeclaration(43) at 0", "Insert QualifiedName: org.apache.phoenix.parse.BooleanParseNodeVisitor(44) into ImportDeclaration(45) at 0", "Insert QualifiedName: org.apache.phoenix.parse.ColumnParseNode(46) into ImportDeclaration(47) at 0", "Insert QualifiedName: org.apache.phoenix.parse.ParseNode(48) into ImportDeclaration(49) at 0", "Insert QualifiedName: org.apache.phoenix.schema.types.PDataType(72) into ImportDeclaration(73) at 0", "Insert QualifiedName: org.apache.phoenix.schema.SaltingUtil(76) into ImportDeclaration(77) at 0", "Insert QualifiedName: org.apache.phoenix.util.IndexUtil(78) into ImportDeclaration(79) at 0", "Insert TypeDeclaration: class(2591) into TypeDeclaration: class(2592) at 18", "Insert SingleVariableDeclaration(1156) into MethodDeclaration(1797) at 10", "Insert Block(1796) into MethodDeclaration(1797) at 12", "Insert Modifier: private(2259) into TypeDeclaration: class(2591) at 0", "Insert Modifier: static(2260) into TypeDeclaration: class(2591) at 1", "Insert SimpleName: WhereConditionRewriter(2261) into TypeDeclaration: class(2591) at 2", "Insert ParameterizedType: BooleanParseNodeVisitor<ParseNode>(2266) into TypeDeclaration: class(2591) at 3", "Insert FieldDeclaration(2273) into TypeDeclaration: class(2591) at 4", "Insert FieldDeclaration(2280) into TypeDeclaration: class(2591) at 5", "Insert FieldDeclaration(2289) into TypeDeclaration: class(2591) at 6", "Insert MethodDeclaration(2328) into TypeDeclaration: class(2591) at 7", "Insert MethodDeclaration(2364) into TypeDeclaration: class(2591) at 8", "Insert MethodDeclaration(2385) into TypeDeclaration: class(2591) at 9", "Insert MethodDeclaration(2413) into TypeDeclaration: class(2591) at 10", "Insert MethodDeclaration(2428) into TypeDeclaration: class(2591) at 11", "Insert MethodDeclaration(2480) into TypeDeclaration: class(2591) at 12", "Insert MethodDeclaration(2495) into TypeDeclaration: class(2591) at 13", "Insert MethodDeclaration(2552) into TypeDeclaration: class(2591) at 14", "Insert MethodDeclaration(2567) into TypeDeclaration: class(2591) at 15", "Insert MethodDeclaration(2590) into TypeDeclaration: class(2591) at 16", "Insert PrimitiveType: boolean(1154) into SingleVariableDeclaration(1156) at 0", "Insert SimpleName: isHinted(1155) into SingleVariableDeclaration(1156) at 1", "Move VariableDeclarationStatement(1138) into Block(1796) at 0", "Move VariableDeclarationStatement(1151) into Block(1796) at 1", "Move VariableDeclarationStatement(1161) into Block(1796) at 2", "Move ExpressionStatement(1175) into Block(1796) at 3", "Move VariableDeclarationStatement(1188) into Block(1796) at 4", "Move VariableDeclarationStatement(1202) into Block(1796) at 5", "Move VariableDeclarationStatement(1212) into Block(1796) at 6", "Move VariableDeclarationStatement(1224) into Block(1796) at 7", "Insert IfStatement(1793) into Block(1796) at 8", "Move ReturnStatement(1320) into Block(1796) at 9", "Insert SimpleType: BooleanParseNodeVisitor(2263) into ParameterizedType: BooleanParseNodeVisitor<ParseNode>(2266) at 0", "Insert SimpleType: ParseNode(2265) into ParameterizedType: BooleanParseNodeVisitor<ParseNode>(2266) at 1", "Insert Modifier: private(2267) into FieldDeclaration(2273) at 0", "Insert Modifier: final(2268) into FieldDeclaration(2273) at 1", "Insert SimpleType: ColumnResolver(2270) into FieldDeclaration(2273) at 2", "Insert VariableDeclarationFragment(2272) into FieldDeclaration(2273) at 3", "Insert Modifier: private(2274) into FieldDeclaration(2280) at 0", "Insert Modifier: final(2275) into FieldDeclaration(2280) at 1", "Insert SimpleType: ExpressionCompiler(2277) into FieldDeclaration(2280) at 2", "Insert VariableDeclarationFragment(2279) into FieldDeclaration(2280) at 3", "Insert Modifier: private(2281) into FieldDeclaration(2289) at 0", "Insert ParameterizedType: List<ParseNode>(2286) into FieldDeclaration(2289) at 1", "Insert VariableDeclarationFragment(2288) into FieldDeclaration(2289) at 2", "Insert Modifier: public(2290) into MethodDeclaration(2328) at 0", "Insert SimpleName: WhereConditionRewriter(2291) into MethodDeclaration(2328) at 1", "Insert SingleVariableDeclaration(2295) into MethodDeclaration(2328) at 2", "Insert SingleVariableDeclaration(2299) into MethodDeclaration(2328) at 3", "Insert SimpleType: SQLException(2301) into MethodDeclaration(2328) at 4", "Insert Block(2327) into MethodDeclaration(2328) at 5", "Insert Modifier: public(2329) into MethodDeclaration(2364) at 0", "Insert SimpleType: ParseNode(2331) into MethodDeclaration(2364) at 1", "Insert SimpleName: getExtractedCondition(2332) into MethodDeclaration(2364) at 2", "Insert Block(2363) into MethodDeclaration(2364) at 3", "Insert MarkerAnnotation(2366) into MethodDeclaration(2385) at 0", "Insert Modifier: public(2367) into MethodDeclaration(2385) at 1", "Insert ParameterizedType: List<ParseNode>(2372) into MethodDeclaration(2385) at 2", "Insert SimpleName: newElementList(2373) into MethodDeclaration(2385) at 3", "Insert SingleVariableDeclaration(2376) into MethodDeclaration(2385) at 4", "Insert Block(2384) into MethodDeclaration(2385) at 5", "Insert MarkerAnnotation(2387) into MethodDeclaration(2413) at 0", "Insert Modifier: public(2388) into MethodDeclaration(2413) at 1", "Insert PrimitiveType: void(2389) into MethodDeclaration(2413) at 2", "Insert SimpleName: addElement(2390) into MethodDeclaration(2413) at 3", "Insert SingleVariableDeclaration(2397) into MethodDeclaration(2413) at 4", "Insert SingleVariableDeclaration(2401) into MethodDeclaration(2413) at 5", "Insert Block(2412) into MethodDeclaration(2413) at 6", "Insert MarkerAnnotation(2415) into MethodDeclaration(2428) at 0", "Insert Modifier: public(2416) into MethodDeclaration(2428) at 1", "Insert PrimitiveType: boolean(2417) into MethodDeclaration(2428) at 2", "Insert SimpleName: visitEnter(2418) into MethodDeclaration(2428) at 3", "Insert SingleVariableDeclaration(2422) into MethodDeclaration(2428) at 4", "Insert SimpleType: SQLException(2424) into MethodDeclaration(2428) at 5", "Insert Block(2427) into MethodDeclaration(2428) at 6", "Insert MarkerAnnotation(2430) into MethodDeclaration(2480) at 0", "Insert Modifier: public(2431) into MethodDeclaration(2480) at 1", "Insert SimpleType: ParseNode(2433) into MethodDeclaration(2480) at 2", "Insert SimpleName: visitLeave(2434) into MethodDeclaration(2480) at 3", "Insert SingleVariableDeclaration(2438) into MethodDeclaration(2480) at 4", "Insert SingleVariableDeclaration(2445) into MethodDeclaration(2480) at 5", "Insert SimpleType: SQLException(2447) into MethodDeclaration(2480) at 6", "Insert Block(2479) into MethodDeclaration(2480) at 7", "Insert MarkerAnnotation(2482) into MethodDeclaration(2495) at 0", "Insert Modifier: protected(2483) into MethodDeclaration(2495) at 1", "Insert PrimitiveType: boolean(2484) into MethodDeclaration(2495) at 2", "Insert SimpleName: enterBooleanNode(2485) into MethodDeclaration(2495) at 3", "Insert SingleVariableDeclaration(2489) into MethodDeclaration(2495) at 4", "Insert SimpleType: SQLException(2491) into MethodDeclaration(2495) at 5", "Insert Block(2494) into MethodDeclaration(2495) at 6", "Insert MarkerAnnotation(2497) into MethodDeclaration(2552) at 0", "Insert Modifier: protected(2498) into MethodDeclaration(2552) at 1", "Insert SimpleType: ParseNode(2500) into MethodDeclaration(2552) at 2", "Insert SimpleName: leaveBooleanNode(2501) into MethodDeclaration(2552) at 3", "Insert SingleVariableDeclaration(2505) into MethodDeclaration(2552) at 4", "Insert SingleVariableDeclaration(2512) into MethodDeclaration(2552) at 5", "Insert SimpleType: SQLException(2514) into MethodDeclaration(2552) at 6", "Insert Block(2551) into MethodDeclaration(2552) at 7", "Insert MarkerAnnotation(2554) into MethodDeclaration(2567) at 0", "Insert Modifier: protected(2555) into MethodDeclaration(2567) at 1", "Insert PrimitiveType: boolean(2556) into MethodDeclaration(2567) at 2", "Insert SimpleName: enterNonBooleanNode(2557) into MethodDeclaration(2567) at 3", "Insert SingleVariableDeclaration(2561) into MethodDeclaration(2567) at 4", "Insert SimpleType: SQLException(2563) into MethodDeclaration(2567) at 5", "Insert Block(2566) into MethodDeclaration(2567) at 6", "Insert MarkerAnnotation(2569) into MethodDeclaration(2590) at 0", "Insert Modifier: protected(2570) into MethodDeclaration(2590) at 1", "Insert SimpleType: ParseNode(2572) into MethodDeclaration(2590) at 2", "Insert SimpleName: leaveNonBooleanNode(2573) into MethodDeclaration(2590) at 3", "Insert SingleVariableDeclaration(2577) into MethodDeclaration(2590) at 4", "Insert SingleVariableDeclaration(2584) into MethodDeclaration(2590) at 5", "Insert SimpleType: SQLException(2586) into MethodDeclaration(2590) at 6", "Insert Block(2589) into MethodDeclaration(2590) at 7", "Move MethodInvocation(1237) into IfStatement(1793) at 0", "Insert Block(1792) into IfStatement(1793) at 1", "Insert SimpleName: BooleanParseNodeVisitor(2262) into SimpleType: BooleanParseNodeVisitor(2263) at 0", "Insert SimpleName: ParseNode(2264) into SimpleType: ParseNode(2265) at 0", "Insert SimpleName: ColumnResolver(2269) into SimpleType: ColumnResolver(2270) at 0", "Insert SimpleName: dataResolver(2271) into VariableDeclarationFragment(2272) at 0", "Insert SimpleName: ExpressionCompiler(2276) into SimpleType: ExpressionCompiler(2277) at 0", "Insert SimpleName: expressionCompiler(2278) into VariableDeclarationFragment(2279) at 0", "Insert SimpleType: List(2283) into ParameterizedType: List<ParseNode>(2286) at 0", "Insert SimpleType: ParseNode(2285) into ParameterizedType: List<ParseNode>(2286) at 1", "Insert SimpleName: extractedConditions(2287) into VariableDeclarationFragment(2288) at 0", "Insert SimpleType: ColumnResolver(2293) into SingleVariableDeclaration(2295) at 0", "Insert SimpleName: dataResolver(2294) into SingleVariableDeclaration(2295) at 1", "Insert SimpleType: StatementContext(2297) into SingleVariableDeclaration(2299) at 0", "Insert SimpleName: context(2298) into SingleVariableDeclaration(2299) at 1", "Insert SimpleName: SQLException(2300) into SimpleType: SQLException(2301) at 0", "Insert ExpressionStatement(2307) into Block(2327) at 0", "Insert ExpressionStatement(2316) into Block(2327) at 1", "Insert ExpressionStatement(2326) into Block(2327) at 2", "Insert SimpleName: ParseNode(2330) into SimpleType: ParseNode(2331) at 0", "Insert IfStatement(2340) into Block(2363) at 0", "Insert IfStatement(2355) into Block(2363) at 1", "Insert ReturnStatement(2362) into Block(2363) at 2", "Insert SimpleName: Override(2365) into MarkerAnnotation(2366) at 0", "Insert SimpleType: List(2369) into ParameterizedType: List<ParseNode>(2372) at 0", "Insert SimpleType: ParseNode(2371) into ParameterizedType: List<ParseNode>(2372) at 1", "Insert PrimitiveType: int(2374) into SingleVariableDeclaration(2376) at 0", "Insert SimpleName: size(2375) into SingleVariableDeclaration(2376) at 1", "Insert ReturnStatement(2383) into Block(2384) at 0", "Insert SimpleName: Override(2386) into MarkerAnnotation(2387) at 0", "Insert ParameterizedType: List<ParseNode>(2395) into SingleVariableDeclaration(2397) at 0", "Insert SimpleName: l(2396) into SingleVariableDeclaration(2397) at 1", "Insert SimpleType: ParseNode(2399) into SingleVariableDeclaration(2401) at 0", "Insert SimpleName: element(2400) into SingleVariableDeclaration(2401) at 1", "Insert IfStatement(2411) into Block(2412) at 0", "Insert SimpleName: Override(2414) into MarkerAnnotation(2415) at 0", "Insert SimpleType: AndParseNode(2420) into SingleVariableDeclaration(2422) at 0", "Insert SimpleName: node(2421) into SingleVariableDeclaration(2422) at 1", "Insert SimpleName: SQLException(2423) into SimpleType: SQLException(2424) at 0", "Insert ReturnStatement(2426) into Block(2427) at 0", "Insert SimpleName: Override(2429) into MarkerAnnotation(2430) at 0", "Insert SimpleName: ParseNode(2432) into SimpleType: ParseNode(2433) at 0", "Insert SimpleType: AndParseNode(2436) into SingleVariableDeclaration(2438) at 0", "Insert SimpleName: node(2437) into SingleVariableDeclaration(2438) at 1", "Insert ParameterizedType: List<ParseNode>(2443) into SingleVariableDeclaration(2445) at 0", "Insert SimpleName: l(2444) into SingleVariableDeclaration(2445) at 1", "Insert SimpleName: SQLException(2446) into SimpleType: SQLException(2447) at 0", "Insert IfStatement(2456) into Block(2479) at 0", "Insert IfStatement(2462) into Block(2479) at 1", "Insert IfStatement(2473) into Block(2479) at 2", "Insert ReturnStatement(2478) into Block(2479) at 3", "Insert SimpleName: Override(2481) into MarkerAnnotation(2482) at 0", "Insert SimpleType: ParseNode(2487) into SingleVariableDeclaration(2489) at 0", "Insert SimpleName: node(2488) into SingleVariableDeclaration(2489) at 1", "Insert SimpleName: SQLException(2490) into SimpleType: SQLException(2491) at 0", "Insert ReturnStatement(2493) into Block(2494) at 0", "Insert SimpleName: Override(2496) into MarkerAnnotation(2497) at 0", "Insert SimpleName: ParseNode(2499) into SimpleType: ParseNode(2500) at 0", "Insert SimpleType: ParseNode(2503) into SingleVariableDeclaration(2505) at 0", "Insert SimpleName: node(2504) into SingleVariableDeclaration(2505) at 1", "Insert ParameterizedType: List<ParseNode>(2510) into SingleVariableDeclaration(2512) at 0", "Insert SimpleName: l(2511) into SingleVariableDeclaration(2512) at 1", "Insert SimpleName: SQLException(2513) into SimpleType: SQLException(2514) at 0", "Insert VariableDeclarationStatement(2524) into Block(2551) at 0", "Insert ExpressionStatement(2528) into Block(2551) at 1", "Insert TryStatement(2548) into Block(2551) at 2", "Insert ReturnStatement(2550) into Block(2551) at 3", "Insert SimpleName: Override(2553) into MarkerAnnotation(2554) at 0", "Insert SimpleType: ParseNode(2559) into SingleVariableDeclaration(2561) at 0", "Insert SimpleName: node(2560) into SingleVariableDeclaration(2561) at 1", "Insert SimpleName: SQLException(2562) into SimpleType: SQLException(2563) at 0", "Insert ReturnStatement(2565) into Block(2566) at 0", "Insert SimpleName: Override(2568) into MarkerAnnotation(2569) at 0", "Insert SimpleName: ParseNode(2571) into SimpleType: ParseNode(2572) at 0", "Insert SimpleType: ParseNode(2575) into SingleVariableDeclaration(2577) at 0", "Insert SimpleName: node(2576) into SingleVariableDeclaration(2577) at 1", "Insert ParameterizedType: List<ParseNode>(2582) into SingleVariableDeclaration(2584) at 0", "Insert SimpleName: l(2583) into SingleVariableDeclaration(2584) at 1", "Insert SimpleName: SQLException(2585) into SimpleType: SQLException(2586) at 0", "Insert ReturnStatement(2588) into Block(2589) at 0", "Move TryStatement(1318) into Block(1792) at 0", "Insert SimpleName: List(2282) into SimpleType: List(2283) at 0", "Insert SimpleName: ParseNode(2284) into SimpleType: ParseNode(2285) at 0", "Insert SimpleName: ColumnResolver(2292) into SimpleType: ColumnResolver(2293) at 0", "Insert SimpleName: StatementContext(2296) into SimpleType: StatementContext(2297) at 0", "Insert Assignment: =(2306) into ExpressionStatement(2307) at 0", "Insert Assignment: =(2315) into ExpressionStatement(2316) at 0", "Insert Assignment: =(2325) into ExpressionStatement(2326) at 0", "Insert MethodInvocation(2337) into IfStatement(2340) at 0", "Insert ReturnStatement(2339) into IfStatement(2340) at 1", "Insert InfixExpression: ==(2347) into IfStatement(2355) at 0", "Insert ReturnStatement(2354) into IfStatement(2355) at 1", "Insert MethodInvocation(2361) into ReturnStatement(2362) at 0", "Insert SimpleName: List(2368) into SimpleType: List(2369) at 0", "Insert SimpleName: ParseNode(2370) into SimpleType: ParseNode(2371) at 0", "Insert MethodInvocation(2382) into ReturnStatement(2383) at 0", "Insert SimpleType: List(2392) into ParameterizedType: List<ParseNode>(2395) at 0", "Insert SimpleType: ParseNode(2394) into ParameterizedType: List<ParseNode>(2395) at 1", "Insert SimpleName: ParseNode(2398) into SimpleType: ParseNode(2399) at 0", "Insert InfixExpression: !=(2404) into IfStatement(2411) at 0", "Insert Block(2410) into IfStatement(2411) at 1", "Insert SimpleName: AndParseNode(2419) into SimpleType: AndParseNode(2420) at 0", "Insert BooleanLiteral: true(2425) into ReturnStatement(2426) at 0", "Insert SimpleName: AndParseNode(2435) into SimpleType: AndParseNode(2436) at 0", "Insert SimpleType: List(2440) into ParameterizedType: List<ParseNode>(2443) at 0", "Insert SimpleType: ParseNode(2442) into ParameterizedType: List<ParseNode>(2443) at 1", "Insert MethodInvocation(2453) into IfStatement(2456) at 0", "Insert ReturnStatement(2455) into IfStatement(2456) at 1", "Insert MethodInvocation(2459) into IfStatement(2462) at 0", "Insert ReturnStatement(2461) into IfStatement(2462) at 1", "Insert InfixExpression: ==(2467) into IfStatement(2473) at 0", "Insert ReturnStatement(2472) into IfStatement(2473) at 1", "Insert MethodInvocation(2477) into ReturnStatement(2478) at 0", "Insert SimpleName: ParseNode(2486) into SimpleType: ParseNode(2487) at 0", "Insert BooleanLiteral: false(2492) into ReturnStatement(2493) at 0", "Insert SimpleName: ParseNode(2502) into SimpleType: ParseNode(2503) at 0", "Insert SimpleType: List(2507) into ParameterizedType: List<ParseNode>(2510) at 0", "Insert SimpleType: ParseNode(2509) into ParameterizedType: List<ParseNode>(2510) at 1", "Insert SimpleType: ParseNode(2516) into VariableDeclarationStatement(2524) at 0", "Insert VariableDeclarationFragment(2523) into VariableDeclarationStatement(2524) at 1", "Insert MethodInvocation(2527) into ExpressionStatement(2528) at 0", "Insert Block(2534) into TryStatement(2548) at 0", "Insert CatchClause(2547) into TryStatement(2548) at 1", "Insert SimpleName: translatedNode(2549) into ReturnStatement(2550) at 0", "Insert SimpleName: ParseNode(2558) into SimpleType: ParseNode(2559) at 0", "Insert BooleanLiteral: false(2564) into ReturnStatement(2565) at 0", "Insert SimpleName: ParseNode(2574) into SimpleType: ParseNode(2575) at 0", "Insert SimpleType: List(2579) into ParameterizedType: List<ParseNode>(2582) at 0", "Insert SimpleType: ParseNode(2581) into ParameterizedType: List<ParseNode>(2582) at 1", "Insert SimpleName: node(2587) into ReturnStatement(2588) at 0", "Move Block(1309) into TryStatement(1791) at 0", "Insert CatchClause(1790) into TryStatement(1791) at 1", "Insert FieldAccess(2304) into Assignment: =(2306) at 0", "Insert SimpleName: dataResolver(2305) into Assignment: =(2306) at 1", "Insert FieldAccess(2310) into Assignment: =(2315) at 0", "Insert ClassInstanceCreation(2314) into Assignment: =(2315) at 1", "Insert FieldAccess(2319) into Assignment: =(2325) at 0", "Insert MethodInvocation(2324) into Assignment: =(2325) at 1", "Insert FieldAccess(2335) into MethodInvocation(2337) at 0", "Insert SimpleName: isEmpty(2336) into MethodInvocation(2337) at 1", "Insert NullLiteral(2338) into ReturnStatement(2339) at 0", "Insert MethodInvocation(2345) into InfixExpression: ==(2347) at 0", "Insert NumberLiteral: 1(2346) into InfixExpression: ==(2347) at 1", "Insert MethodInvocation(2353) into ReturnStatement(2354) at 0", "Insert SimpleName: FACTORY(2356) into MethodInvocation(2361) at 0", "Insert SimpleName: and(2357) into MethodInvocation(2361) at 1", "Insert FieldAccess(2360) into MethodInvocation(2361) at 2", "Insert SimpleName: Lists(2377) into MethodInvocation(2382) at 0", "Insert SimpleType: ParseNode(2379) into MethodInvocation(2382) at 1", "Insert SimpleName: newArrayListWithExpectedSize(2380) into MethodInvocation(2382) at 2", "Insert SimpleName: size(2381) into MethodInvocation(2382) at 3", "Insert SimpleName: List(2391) into SimpleType: List(2392) at 0", "Insert SimpleName: ParseNode(2393) into SimpleType: ParseNode(2394) at 0", "Insert SimpleName: element(2402) into InfixExpression: !=(2404) at 0", "Insert NullLiteral(2403) into InfixExpression: !=(2404) at 1", "Insert ExpressionStatement(2409) into Block(2410) at 0", "Insert SimpleName: List(2439) into SimpleType: List(2440) at 0", "Insert SimpleName: ParseNode(2441) into SimpleType: ParseNode(2442) at 0", "Insert SimpleName: l(2448) into MethodInvocation(2453) at 0", "Insert SimpleName: equals(2449) into MethodInvocation(2453) at 1", "Insert MethodInvocation(2452) into MethodInvocation(2453) at 2", "Insert SimpleName: node(2454) into ReturnStatement(2455) at 0", "Insert SimpleName: l(2457) into MethodInvocation(2459) at 0", "Insert SimpleName: isEmpty(2458) into MethodInvocation(2459) at 1", "Insert NullLiteral(2460) into ReturnStatement(2461) at 0", "Insert MethodInvocation(2465) into InfixExpression: ==(2467) at 0", "Insert NumberLiteral: 1(2466) into InfixExpression: ==(2467) at 1", "Insert MethodInvocation(2471) into ReturnStatement(2472) at 0", "Insert SimpleName: FACTORY(2474) into MethodInvocation(2477) at 0", "Insert SimpleName: and(2475) into MethodInvocation(2477) at 1", "Insert SimpleName: l(2476) into MethodInvocation(2477) at 2", "Insert SimpleName: List(2506) into SimpleType: List(2507) at 0", "Insert SimpleName: ParseNode(2508) into SimpleType: ParseNode(2509) at 0", "Insert SimpleName: ParseNode(2515) into SimpleType: ParseNode(2516) at 0", "Insert SimpleName: translatedNode(2517) into VariableDeclarationFragment(2523) at 0", "Insert MethodInvocation(2522) into VariableDeclarationFragment(2523) at 1", "Insert SimpleName: expressionCompiler(2525) into MethodInvocation(2527) at 0", "Insert SimpleName: reset(2526) into MethodInvocation(2527) at 1", "Insert ExpressionStatement(2533) into Block(2534) at 0", "Insert SingleVariableDeclaration(2538) into CatchClause(2547) at 0", "Insert Block(2546) into CatchClause(2547) at 1", "Insert SimpleName: List(2578) into SimpleType: List(2579) at 0", "Insert SimpleName: ParseNode(2580) into SimpleType: ParseNode(2581) at 0", "Move SingleVariableDeclaration(1315) into CatchClause(1790) at 0", "Insert Block(1789) into CatchClause(1790) at 1", "Insert ThisExpression(2302) into FieldAccess(2304) at 0", "Insert SimpleName: dataResolver(2303) into FieldAccess(2304) at 1", "Insert ThisExpression(2308) into FieldAccess(2310) at 0", "Insert SimpleName: expressionCompiler(2309) into FieldAccess(2310) at 1", "Insert SimpleType: ExpressionCompiler(2312) into ClassInstanceCreation(2314) at 0", "Insert SimpleName: context(2313) into ClassInstanceCreation(2314) at 1", "Insert ThisExpression(2317) into FieldAccess(2319) at 0", "Insert SimpleName: extractedConditions(2318) into FieldAccess(2319) at 1", "Insert SimpleName: Lists(2320) into MethodInvocation(2324) at 0", "Insert SimpleType: ParseNode(2322) into MethodInvocation(2324) at 1", "Insert SimpleName: newArrayList(2323) into MethodInvocation(2324) at 2", "Insert ThisExpression(2333) into FieldAccess(2335) at 0", "Insert SimpleName: extractedConditions(2334) into FieldAccess(2335) at 1", "Insert FieldAccess(2343) into MethodInvocation(2345) at 0", "Insert SimpleName: size(2344) into MethodInvocation(2345) at 1", "Insert FieldAccess(2350) into MethodInvocation(2353) at 0", "Insert SimpleName: get(2351) into MethodInvocation(2353) at 1", "Insert NumberLiteral: 0(2352) into MethodInvocation(2353) at 2", "Insert ThisExpression(2358) into FieldAccess(2360) at 0", "Insert SimpleName: extractedConditions(2359) into FieldAccess(2360) at 1", "Insert SimpleName: ParseNode(2378) into SimpleType: ParseNode(2379) at 0", "Insert MethodInvocation(2408) into ExpressionStatement(2409) at 0", "Insert SimpleName: node(2450) into MethodInvocation(2452) at 0", "Insert SimpleName: getChildren(2451) into MethodInvocation(2452) at 1", "Insert SimpleName: l(2463) into MethodInvocation(2465) at 0", "Insert SimpleName: size(2464) into MethodInvocation(2465) at 1", "Insert SimpleName: l(2468) into MethodInvocation(2471) at 0", "Insert SimpleName: get(2469) into MethodInvocation(2471) at 1", "Insert NumberLiteral: 0(2470) into MethodInvocation(2471) at 2", "Insert SimpleName: IndexStatementRewriter(2518) into MethodInvocation(2522) at 0", "Insert SimpleName: translate(2519) into MethodInvocation(2522) at 1", "Insert SimpleName: node(2520) into MethodInvocation(2522) at 2", "Insert SimpleName: dataResolver(2521) into MethodInvocation(2522) at 3", "Insert MethodInvocation(2532) into ExpressionStatement(2533) at 0", "Insert SimpleType: ColumnNotFoundException(2536) into SingleVariableDeclaration(2538) at 0", "Insert SimpleName: e(2537) into SingleVariableDeclaration(2538) at 1", "Insert ExpressionStatement(2543) into Block(2546) at 0", "Insert ReturnStatement(2545) into Block(2546) at 1", "Insert BooleanLiteral: false(743) into MethodInvocation(744) at 7", "Move InfixExpression: ==(1296) into IfStatement(1350) at 0", "Insert Block(1349) into IfStatement(1350) at 1", "Insert VariableDeclarationStatement(1366) into Block(1789) at 0", "Insert VariableDeclarationStatement(1374) into Block(1789) at 1", "Insert IfStatement(1788) into Block(1789) at 2", "Insert SimpleName: ExpressionCompiler(2311) into SimpleType: ExpressionCompiler(2312) at 0", "Insert SimpleName: ParseNode(2321) into SimpleType: ParseNode(2322) at 0", "Insert ThisExpression(2341) into FieldAccess(2343) at 0", "Insert SimpleName: extractedConditions(2342) into FieldAccess(2343) at 1", "Insert ThisExpression(2348) into FieldAccess(2350) at 0", "Insert SimpleName: extractedConditions(2349) into FieldAccess(2350) at 1", "Insert SimpleName: l(2405) into MethodInvocation(2408) at 0", "Insert SimpleName: add(2406) into MethodInvocation(2408) at 1", "Insert SimpleName: element(2407) into MethodInvocation(2408) at 2", "Insert SimpleName: translatedNode(2529) into MethodInvocation(2532) at 0", "Insert SimpleName: accept(2530) into MethodInvocation(2532) at 1", "Insert SimpleName: expressionCompiler(2531) into MethodInvocation(2532) at 2", "Insert SimpleName: ColumnNotFoundException(2535) into SimpleType: ColumnNotFoundException(2536) at 0", "Insert MethodInvocation(2542) into ExpressionStatement(2543) at 0", "Insert NullLiteral(2544) into ReturnStatement(2545) at 0", "Insert IfStatement(1348) into Block(1349) at 0", "Insert SimpleType: SelectStatement(1357) into VariableDeclarationStatement(1366) at 0", "Insert VariableDeclarationFragment(1365) into VariableDeclarationStatement(1366) at 1", "Insert SimpleType: ParseNode(1368) into VariableDeclarationStatement(1374) at 0", "Insert VariableDeclarationFragment(1373) into VariableDeclarationStatement(1374) at 1", "Insert InfixExpression: &&(1379) into IfStatement(1788) at 0", "Insert Block(1787) into IfStatement(1788) at 1", "Insert SimpleName: extractedConditions(2539) into MethodInvocation(2542) at 0", "Insert SimpleName: add(2540) into MethodInvocation(2542) at 1", "Insert SimpleName: node(2541) into MethodInvocation(2542) at 2", "Move InfixExpression: ==(1303) into IfStatement(1348) at 0", "Move Block(1307) into IfStatement(1348) at 1", "Insert IfStatement(1347) into IfStatement(1348) at 2", "Insert SimpleName: SelectStatement(1356) into SimpleType: SelectStatement(1357) at 0", "Insert SimpleName: dataSelect(1358) into VariableDeclarationFragment(1365) at 0", "Insert CastExpression(1364) into VariableDeclarationFragment(1365) at 1", "Insert SimpleName: ParseNode(1367) into SimpleType: ParseNode(1368) at 0", "Insert SimpleName: where(1369) into VariableDeclarationFragment(1373) at 0", "Insert MethodInvocation(1372) into VariableDeclarationFragment(1373) at 1", "Insert SimpleName: isHinted(1375) into InfixExpression: &&(1379) at 0", "Insert InfixExpression: !=(1378) into InfixExpression: &&(1379) at 1", "Insert VariableDeclarationStatement(1389) into Block(1787) at 0", "Insert VariableDeclarationStatement(1403) into Block(1787) at 1", "Insert ExpressionStatement(1410) into Block(1787) at 2", "Insert IfStatement(1786) into Block(1787) at 3", "Update InfixExpression: &&(1304) to ==", "Move InfixExpression: &&(1304) into IfStatement(1347) at 0", "Insert Block(1346) into IfStatement(1347) at 1", "Insert SimpleType: SelectStatement(1360) into CastExpression(1364) at 0", "Insert MethodInvocation(1363) into CastExpression(1364) at 1", "Insert SimpleName: dataSelect(1370) into MethodInvocation(1372) at 0", "Insert SimpleName: getWhere(1371) into MethodInvocation(1372) at 1", "Insert SimpleName: where(1376) into InfixExpression: !=(1378) at 0", "Insert NullLiteral(1377) into InfixExpression: !=(1378) at 1", "Insert SimpleType: StatementContext(1381) into VariableDeclarationStatement(1389) at 0", "Insert VariableDeclarationFragment(1388) into VariableDeclarationStatement(1389) at 1", "Insert SimpleType: WhereConditionRewriter(1391) into VariableDeclarationStatement(1403) at 0", "Insert VariableDeclarationFragment(1402) into VariableDeclarationStatement(1403) at 1", "Insert Assignment: =(1409) into ExpressionStatement(1410) at 0", "Insert InfixExpression: !=(1413) into IfStatement(1786) at 0", "Insert Block(1785) into IfStatement(1786) at 1", "Insert BooleanLiteral: true(1045) into MethodInvocation(1046) at 7", "Insert MethodInvocation(1338) into InfixExpression: ==(1340) at 0", "Insert QualifiedName: IndexType.GLOBAL(1339) into InfixExpression: ==(1340) at 1", "Insert ThrowStatement(1345) into Block(1346) at 0", "Insert SimpleName: SelectStatement(1359) into SimpleType: SelectStatement(1360) at 0", "Insert SimpleName: dataPlan(1361) into MethodInvocation(1363) at 0", "Insert SimpleName: getStatement(1362) into MethodInvocation(1363) at 1", "Insert SimpleName: StatementContext(1380) into SimpleType: StatementContext(1381) at 0", "Insert SimpleName: context(1382) into VariableDeclarationFragment(1388) at 0", "Insert ClassInstanceCreation(1387) into VariableDeclarationFragment(1388) at 1", "Insert SimpleName: WhereConditionRewriter(1390) into SimpleType: WhereConditionRewriter(1391) at 0", "Insert SimpleName: whereRewriter(1392) into VariableDeclarationFragment(1402) at 0", "Insert ClassInstanceCreation(1401) into VariableDeclarationFragment(1402) at 1", "Insert SimpleName: where(1404) into Assignment: =(1409) at 0", "Insert MethodInvocation(1408) into Assignment: =(1409) at 1", "Insert SimpleName: where(1411) into InfixExpression: !=(1413) at 0", "Insert NullLiteral(1412) into InfixExpression: !=(1413) at 1", "Insert VariableDeclarationStatement(1423) into Block(1785) at 0", "Insert VariableDeclarationStatement(1434) into Block(1785) at 1", "Insert VariableDeclarationStatement(1450) into Block(1785) at 2", "Insert VariableDeclarationStatement(1466) into Block(1785) at 3", "Insert VariableDeclarationStatement(1475) into Block(1785) at 4", "Insert VariableDeclarationStatement(1490) into Block(1785) at 5", "Insert VariableDeclarationStatement(1505) into Block(1785) at 6", "Insert ForStatement(1608) into Block(1785) at 7", "Insert VariableDeclarationStatement(1638) into Block(1785) at 8", "Insert VariableDeclarationStatement(1667) into Block(1785) at 9", "Insert VariableDeclarationStatement(1675) into Block(1785) at 10", "Insert IfStatement(1691) into Block(1785) at 11", "Insert VariableDeclarationStatement(1717) into Block(1785) at 12", "Insert VariableDeclarationStatement(1728) into Block(1785) at 13", "Insert VariableDeclarationStatement(1740) into Block(1785) at 14", "Insert ExpressionStatement(1751) into Block(1785) at 15", "Insert ExpressionStatement(1761) into Block(1785) at 16", "Insert ExpressionStatement(1769) into Block(1785) at 17", "Insert VariableDeclarationStatement(1782) into Block(1785) at 18", "Insert ReturnStatement(1784) into Block(1785) at 19", "Insert SimpleName: index(1336) into MethodInvocation(1338) at 0", "Insert SimpleName: getIndexType(1337) into MethodInvocation(1338) at 1", "Insert ClassInstanceCreation(1344) into ThrowStatement(1345) at 0", "Insert SimpleType: StatementContext(1384) into ClassInstanceCreation(1387) at 0", "Insert SimpleName: statement(1385) into ClassInstanceCreation(1387) at 1", "Insert SimpleName: resolver(1386) into ClassInstanceCreation(1387) at 2", "Insert SimpleType: WhereConditionRewriter(1394) into ClassInstanceCreation(1401) at 0", "Insert MethodInvocation(1399) into ClassInstanceCreation(1401) at 1", "Insert SimpleName: context(1400) into ClassInstanceCreation(1401) at 2", "Insert SimpleName: where(1405) into MethodInvocation(1408) at 0", "Insert SimpleName: accept(1406) into MethodInvocation(1408) at 1", "Insert SimpleName: whereRewriter(1407) into MethodInvocation(1408) at 2", "Insert SimpleType: PTable(1415) into VariableDeclarationStatement(1423) at 0", "Insert VariableDeclarationFragment(1422) into VariableDeclarationStatement(1423) at 1", "Insert ParameterizedType: List<PColumn>(1428) into VariableDeclarationStatement(1434) at 0", "Insert VariableDeclarationFragment(1433) into VariableDeclarationStatement(1434) at 1", "Insert ParameterizedType: List<AliasedNode>(1439) into VariableDeclarationStatement(1450) at 0", "Insert VariableDeclarationFragment(1449) into VariableDeclarationStatement(1450) at 1", "Insert ParameterizedType: List<ParseNode>(1455) into VariableDeclarationStatement(1466) at 0", "Insert VariableDeclarationFragment(1465) into VariableDeclarationStatement(1466) at 1", "Insert PrimitiveType: boolean(1467) into VariableDeclarationStatement(1475) at 0", "Insert VariableDeclarationFragment(1474) into VariableDeclarationStatement(1475) at 1", "Insert PrimitiveType: boolean(1476) into VariableDeclarationStatement(1490) at 0", "Insert VariableDeclarationFragment(1489) into VariableDeclarationStatement(1490) at 1", "Insert PrimitiveType: int(1491) into VariableDeclarationStatement(1505) at 0", "Insert VariableDeclarationFragment(1504) into VariableDeclarationStatement(1505) at 1", "Insert VariableDeclarationExpression(1510) into ForStatement(1608) at 0", "Insert InfixExpression: <(1515) into ForStatement(1608) at 1", "Insert PostfixExpression: ++(1517) into ForStatement(1608) at 2", "Insert Block(1607) into ForStatement(1608) at 3", "Insert SimpleType: SelectStatement(1610) into VariableDeclarationStatement(1638) at 0", "Insert VariableDeclarationFragment(1637) into VariableDeclarationStatement(1638) at 1", "Insert SimpleType: ParseNode(1640) into VariableDeclarationStatement(1667) at 0", "Insert VariableDeclarationFragment(1666) into VariableDeclarationStatement(1667) at 1", "Insert SimpleType: ParseNode(1669) into VariableDeclarationStatement(1675) at 0", "Insert VariableDeclarationFragment(1674) into VariableDeclarationStatement(1675) at 1", "Insert InfixExpression: !=(1678) into IfStatement(1691) at 0", "Insert Block(1690) into IfStatement(1691) at 1", "Insert SimpleType: HintNode(1693) into VariableDeclarationStatement(1717) at 0", "Insert VariableDeclarationFragment(1716) into VariableDeclarationStatement(1717) at 1", "Insert SimpleType: SelectStatement(1719) into VariableDeclarationStatement(1728) at 0", "Insert VariableDeclarationFragment(1727) into VariableDeclarationStatement(1728) at 1", "Insert SimpleType: ColumnResolver(1730) into VariableDeclarationStatement(1740) at 0", "Insert VariableDeclarationFragment(1739) into VariableDeclarationStatement(1740) at 1", "Insert Assignment: =(1750) into ExpressionStatement(1751) at 0", "Insert Assignment: =(1760) into ExpressionStatement(1761) at 0", "Insert Assignment: =(1768) into ExpressionStatement(1769) at 0", "Insert SimpleType: QueryPlan(1771) into VariableDeclarationStatement(1782) at 0", "Insert VariableDeclarationFragment(1781) into VariableDeclarationStatement(1782) at 1", "Insert SimpleName: plan(1783) into ReturnStatement(1784) at 0", "Insert SimpleType: ColumnNotFoundException(1342) into ClassInstanceCreation(1344) at 0", "Insert StringLiteral: \"*\"(1343) into ClassInstanceCreation(1344) at 1", "Insert SimpleName: StatementContext(1383) into SimpleType: StatementContext(1384) at 0", "Insert SimpleName: WhereConditionRewriter(1393) into SimpleType: WhereConditionRewriter(1394) at 0", "Insert MethodInvocation(1397) into MethodInvocation(1399) at 0", "Insert SimpleName: getResolver(1398) into MethodInvocation(1399) at 1", "Insert SimpleName: PTable(1414) into SimpleType: PTable(1415) at 0", "Insert SimpleName: dataTable(1416) into VariableDeclarationFragment(1422) at 0", "Insert MethodInvocation(1421) into VariableDeclarationFragment(1422) at 1", "Insert SimpleType: List(1425) into ParameterizedType: List<PColumn>(1428) at 0", "Insert SimpleType: PColumn(1427) into ParameterizedType: List<PColumn>(1428) at 1", "Insert SimpleName: pkColumns(1429) into VariableDeclarationFragment(1433) at 0", "Insert MethodInvocation(1432) into VariableDeclarationFragment(1433) at 1", "Insert SimpleType: List(1436) into ParameterizedType: List<AliasedNode>(1439) at 0", "Insert SimpleType: AliasedNode(1438) into ParameterizedType: List<AliasedNode>(1439) at 1", "Insert SimpleName: aliasedNodes(1440) into VariableDeclarationFragment(1449) at 0", "Insert MethodInvocation(1448) into VariableDeclarationFragment(1449) at 1", "Insert SimpleType: List(1452) into ParameterizedType: List<ParseNode>(1455) at 0", "Insert SimpleType: ParseNode(1454) into ParameterizedType: List<ParseNode>(1455) at 1", "Insert SimpleName: nodes(1456) into VariableDeclarationFragment(1465) at 0", "Insert MethodInvocation(1464) into VariableDeclarationFragment(1465) at 1", "Insert SimpleName: isSalted(1468) into VariableDeclarationFragment(1474) at 0", "Insert InfixExpression: !=(1473) into VariableDeclarationFragment(1474) at 1", "Insert SimpleName: isTenantSpecific(1477) into VariableDeclarationFragment(1489) at 0", "Insert InfixExpression: &&(1488) into VariableDeclarationFragment(1489) at 1", "Insert SimpleName: posOffset(1492) into VariableDeclarationFragment(1504) at 0", "Insert InfixExpression: +(1503) into VariableDeclarationFragment(1504) at 1", "Insert PrimitiveType: int(1506) into VariableDeclarationExpression(1510) at 0", "Insert VariableDeclarationFragment(1509) into VariableDeclarationExpression(1510) at 1", "Insert SimpleName: i(1511) into InfixExpression: <(1515) at 0", "Insert MethodInvocation(1514) into InfixExpression: <(1515) at 1", "Insert SimpleName: i(1516) into PostfixExpression: ++(1517) at 0", "Insert VariableDeclarationStatement(1526) into Block(1607) at 0", "Insert VariableDeclarationStatement(1535) into Block(1607) at 1", "Insert VariableDeclarationStatement(1549) into Block(1607) at 2", "Insert VariableDeclarationStatement(1558) into Block(1607) at 3", "Insert VariableDeclarationStatement(1566) into Block(1607) at 4", "Move IfStatement(1310) into Block(1607) at 5", "Insert ExpressionStatement(1590) into Block(1607) at 6", "Insert ExpressionStatement(1606) into Block(1607) at 7", "Insert SimpleName: SelectStatement(1609) into SimpleType: SelectStatement(1610) at 0", "Insert SimpleName: innerSelect(1611) into VariableDeclarationFragment(1637) at 0", "Insert MethodInvocation(1636) into VariableDeclarationFragment(1637) at 1", "Insert SimpleName: ParseNode(1639) into SimpleType: ParseNode(1640) at 0", "Insert SimpleName: outerWhere(1641) into VariableDeclarationFragment(1666) at 0", "Insert MethodInvocation(1665) into VariableDeclarationFragment(1666) at 1", "Insert SimpleName: ParseNode(1668) into SimpleType: ParseNode(1669) at 0", "Insert SimpleName: extractedCondition(1670) into VariableDeclarationFragment(1674) at 0", "Insert MethodInvocation(1673) into VariableDeclarationFragment(1674) at 1", "Insert SimpleName: extractedCondition(1676) into InfixExpression: !=(1678) at 0", "Insert NullLiteral(1677) into InfixExpression: !=(1678) at 1", "Insert ExpressionStatement(1689) into Block(1690) at 0", "Insert SimpleName: HintNode(1692) into SimpleType: HintNode(1693) at 0", "Insert SimpleName: hint(1694) into VariableDeclarationFragment(1716) at 0", "Insert MethodInvocation(1715) into VariableDeclarationFragment(1716) at 1", "Insert SimpleName: SelectStatement(1718) into SimpleType: SelectStatement(1719) at 0", "Insert SimpleName: query(1720) into VariableDeclarationFragment(1727) at 0", "Insert MethodInvocation(1726) into VariableDeclarationFragment(1727) at 1", "Insert SimpleName: ColumnResolver(1729) into SimpleType: ColumnResolver(1730) at 0", "Insert SimpleName: queryResolver(1731) into VariableDeclarationFragment(1739) at 0", "Insert MethodInvocation(1738) into VariableDeclarationFragment(1739) at 1", "Insert SimpleName: query(1741) into Assignment: =(1750) at 0", "Insert MethodInvocation(1749) into Assignment: =(1750) at 1", "Insert SimpleName: queryResolver(1752) into Assignment: =(1760) at 0", "Insert MethodInvocation(1759) into Assignment: =(1760) at 1", "Insert SimpleName: query(1762) into Assignment: =(1768) at 0", "Insert MethodInvocation(1767) into Assignment: =(1768) at 1", "Insert SimpleName: QueryPlan(1770) into SimpleType: QueryPlan(1771) at 0", "Insert SimpleName: plan(1772) into VariableDeclarationFragment(1781) at 0", "Insert MethodInvocation(1780) into VariableDeclarationFragment(1781) at 1", "Insert SimpleName: ColumnNotFoundException(1341) into SimpleType: ColumnNotFoundException(1342) at 0", "Insert SimpleName: dataPlan(1395) into MethodInvocation(1397) at 0", "Insert SimpleName: getContext(1396) into MethodInvocation(1397) at 1", "Insert MethodInvocation(1419) into MethodInvocation(1421) at 0", "Insert SimpleName: getTable(1420) into MethodInvocation(1421) at 1", "Insert SimpleName: List(1424) into SimpleType: List(1425) at 0", "Insert SimpleName: PColumn(1426) into SimpleType: PColumn(1427) at 0", "Insert SimpleName: dataTable(1430) into MethodInvocation(1432) at 0", "Insert SimpleName: getPKColumns(1431) into MethodInvocation(1432) at 1", "Insert SimpleName: List(1435) into SimpleType: List(1436) at 0", "Insert SimpleName: AliasedNode(1437) into SimpleType: AliasedNode(1438) at 0", "Insert SimpleName: Lists(1441) into MethodInvocation(1448) at 0", "Insert SimpleType: AliasedNode(1443) into MethodInvocation(1448) at 1", "Insert SimpleName: newArrayListWithExpectedSize(1444) into MethodInvocation(1448) at 2", "Insert MethodInvocation(1447) into MethodInvocation(1448) at 3", "Insert SimpleName: List(1451) into SimpleType: List(1452) at 0", "Insert SimpleName: ParseNode(1453) into SimpleType: ParseNode(1454) at 0", "Insert SimpleName: Lists(1457) into MethodInvocation(1464) at 0", "Insert SimpleType: ParseNode(1459) into MethodInvocation(1464) at 1", "Insert SimpleName: newArrayListWithExpectedSize(1460) into MethodInvocation(1464) at 2", "Insert MethodInvocation(1463) into MethodInvocation(1464) at 3", "Insert MethodInvocation(1471) into InfixExpression: !=(1473) at 0", "Insert NullLiteral(1472) into InfixExpression: !=(1473) at 1", "Insert MethodInvocation(1480) into InfixExpression: &&(1488) at 0", "Insert InfixExpression: !=(1487) into InfixExpression: &&(1488) at 1", "Insert ParenthesizedExpression(1497) into InfixExpression: +(1503) at 0", "Insert ParenthesizedExpression(1502) into InfixExpression: +(1503) at 1", "Insert SimpleName: i(1507) into VariableDeclarationFragment(1509) at 0", "Insert SimpleName: posOffset(1508) into VariableDeclarationFragment(1509) at 1", "Insert SimpleName: pkColumns(1512) into MethodInvocation(1514) at 0", "Insert SimpleName: size(1513) into MethodInvocation(1514) at 1", "Insert SimpleType: PColumn(1519) into VariableDeclarationStatement(1526) at 0", "Insert VariableDeclarationFragment(1525) into VariableDeclarationStatement(1526) at 1", "Insert SimpleType: String(1528) into VariableDeclarationStatement(1535) at 0", "Insert VariableDeclarationFragment(1534) into VariableDeclarationStatement(1535) at 1", "Insert SimpleType: ParseNode(1537) into VariableDeclarationStatement(1549) at 0", "Insert VariableDeclarationFragment(1548) into VariableDeclarationStatement(1549) at 1", "Insert SimpleType: PDataType(1551) into VariableDeclarationStatement(1558) at 0", "Insert VariableDeclarationFragment(1557) into VariableDeclarationStatement(1558) at 1", "Insert SimpleType: PDataType(1560) into VariableDeclarationStatement(1566) at 0", "Insert VariableDeclarationFragment(1565) into VariableDeclarationStatement(1566) at 1", "Insert InfixExpression: !=(1569) into IfStatement(1581) at 0", "Insert Block(1580) into IfStatement(1581) at 1", "Insert MethodInvocation(1589) into ExpressionStatement(1590) at 0", "Insert MethodInvocation(1605) into ExpressionStatement(1606) at 0", "Insert SimpleName: FACTORY(1612) into MethodInvocation(1636) at 0", "Insert SimpleName: select(1613) into MethodInvocation(1636) at 1", "Insert MethodInvocation(1616) into MethodInvocation(1636) at 2", "Insert MethodInvocation(1619) into MethodInvocation(1636) at 3", "Insert BooleanLiteral: false(1620) into MethodInvocation(1636) at 4", "Insert SimpleName: aliasedNodes(1621) into MethodInvocation(1636) at 5", "Insert SimpleName: where(1622) into MethodInvocation(1636) at 6", "Insert NullLiteral(1623) into MethodInvocation(1636) at 7", "Insert NullLiteral(1624) into MethodInvocation(1636) at 8", "Insert NullLiteral(1625) into MethodInvocation(1636) at 9", "Insert MethodInvocation(1628) into MethodInvocation(1636) at 10", "Insert MethodInvocation(1631) into MethodInvocation(1636) at 11", "Insert BooleanLiteral: false(1632) into MethodInvocation(1636) at 12", "Insert MethodInvocation(1635) into MethodInvocation(1636) at 13", "Insert SimpleName: FACTORY(1642) into MethodInvocation(1665) at 0", "Insert SimpleName: in(1643) into MethodInvocation(1665) at 1", "Insert ConditionalExpression(1657) into MethodInvocation(1665) at 2", "Insert MethodInvocation(1662) into MethodInvocation(1665) at 3", "Insert BooleanLiteral: false(1663) into MethodInvocation(1665) at 4", "Insert BooleanLiteral: true(1664) into MethodInvocation(1665) at 5", "Insert SimpleName: whereRewriter(1671) into MethodInvocation(1673) at 0", "Insert SimpleName: getExtractedCondition(1672) into MethodInvocation(1673) at 1", "Insert Assignment: =(1688) into ExpressionStatement(1689) at 0", "Insert SimpleName: HintNode(1695) into MethodInvocation(1715) at 0", "Insert SimpleName: combine(1696) into MethodInvocation(1715) at 1", "Insert MethodInvocation(1710) into MethodInvocation(1715) at 2", "Insert MethodInvocation(1714) into MethodInvocation(1715) at 3", "Insert SimpleName: FACTORY(1721) into MethodInvocation(1726) at 0", "Insert SimpleName: select(1722) into MethodInvocation(1726) at 1", "Insert SimpleName: dataSelect(1723) into MethodInvocation(1726) at 2", "Insert SimpleName: hint(1724) into MethodInvocation(1726) at 3", "Insert SimpleName: outerWhere(1725) into MethodInvocation(1726) at 4", "Insert SimpleName: FromCompiler(1732) into MethodInvocation(1738) at 0", "Insert SimpleName: getResolverForQuery(1733) into MethodInvocation(1738) at 1", "Insert SimpleName: query(1734) into MethodInvocation(1738) at 2", "Insert MethodInvocation(1737) into MethodInvocation(1738) at 3", "Insert SimpleName: SubqueryRewriter(1742) into MethodInvocation(1749) at 0", "Insert SimpleName: transform(1743) into MethodInvocation(1749) at 1", "Insert SimpleName: query(1744) into MethodInvocation(1749) at 2", "Insert SimpleName: queryResolver(1745) into MethodInvocation(1749) at 3", "Insert MethodInvocation(1748) into MethodInvocation(1749) at 4", "Insert SimpleName: FromCompiler(1753) into MethodInvocation(1759) at 0", "Insert SimpleName: getResolverForQuery(1754) into MethodInvocation(1759) at 1", "Insert SimpleName: query(1755) into MethodInvocation(1759) at 2", "Insert MethodInvocation(1758) into MethodInvocation(1759) at 3", "Insert SimpleName: StatementNormalizer(1763) into MethodInvocation(1767) at 0", "Insert SimpleName: normalize(1764) into MethodInvocation(1767) at 1", "Insert SimpleName: query(1765) into MethodInvocation(1767) at 2", "Insert SimpleName: queryResolver(1766) into MethodInvocation(1767) at 3", "Insert ClassInstanceCreation(1778) into MethodInvocation(1780) at 0", "Insert SimpleName: compile(1779) into MethodInvocation(1780) at 1", "Insert SimpleName: dataPlan(1417) into MethodInvocation(1419) at 0", "Insert SimpleName: getTableRef(1418) into MethodInvocation(1419) at 1", "Insert SimpleName: AliasedNode(1442) into SimpleType: AliasedNode(1443) at 0", "Insert SimpleName: pkColumns(1445) into MethodInvocation(1447) at 0", "Insert SimpleName: size(1446) into MethodInvocation(1447) at 1", "Insert SimpleName: ParseNode(1458) into SimpleType: ParseNode(1459) at 0", "Insert SimpleName: pkColumns(1461) into MethodInvocation(1463) at 0", "Insert SimpleName: size(1462) into MethodInvocation(1463) at 1", "Insert SimpleName: dataTable(1469) into MethodInvocation(1471) at 0", "Insert SimpleName: getBucketNum(1470) into MethodInvocation(1471) at 1", "Insert SimpleName: dataTable(1478) into MethodInvocation(1480) at 0", "Insert SimpleName: isMultiTenant(1479) into MethodInvocation(1480) at 1", "Insert MethodInvocation(1485) into InfixExpression: !=(1487) at 0", "Insert NullLiteral(1486) into InfixExpression: !=(1487) at 1", "Insert ConditionalExpression(1496) into ParenthesizedExpression(1497) at 0", "Insert ConditionalExpression(1501) into ParenthesizedExpression(1502) at 0", "Insert SimpleName: PColumn(1518) into SimpleType: PColumn(1519) at 0", "Insert SimpleName: column(1520) into VariableDeclarationFragment(1525) at 0", "Insert MethodInvocation(1524) into VariableDeclarationFragment(1525) at 1", "Insert SimpleName: String(1527) into SimpleType: String(1528) at 0", "Insert SimpleName: indexColName(1529) into VariableDeclarationFragment(1534) at 0", "Insert MethodInvocation(1533) into VariableDeclarationFragment(1534) at 1", "Insert SimpleName: ParseNode(1536) into SimpleType: ParseNode(1537) at 0", "Insert SimpleName: indexColNode(1538) into VariableDeclarationFragment(1548) at 0", "Insert ClassInstanceCreation(1547) into VariableDeclarationFragment(1548) at 1", "Insert SimpleName: PDataType(1550) into SimpleType: PDataType(1551) at 0", "Insert SimpleName: indexColType(1552) into VariableDeclarationFragment(1557) at 0", "Insert MethodInvocation(1556) into VariableDeclarationFragment(1557) at 1", "Insert SimpleName: PDataType(1559) into SimpleType: PDataType(1560) at 0", "Insert SimpleName: dataColType(1561) into VariableDeclarationFragment(1565) at 0", "Insert MethodInvocation(1564) into VariableDeclarationFragment(1565) at 1", "Insert SimpleName: indexColType(1567) into InfixExpression: !=(1569) at 0", "Insert SimpleName: dataColType(1568) into InfixExpression: !=(1569) at 1", "Insert ExpressionStatement(1579) into Block(1580) at 0", "Insert SimpleName: aliasedNodes(1582) into MethodInvocation(1589) at 0", "Insert SimpleName: add(1583) into MethodInvocation(1589) at 1", "Insert MethodInvocation(1588) into MethodInvocation(1589) at 2", "Insert SimpleName: nodes(1591) into MethodInvocation(1605) at 0", "Insert SimpleName: add(1592) into MethodInvocation(1605) at 1", "Insert ClassInstanceCreation(1604) into MethodInvocation(1605) at 2", "Insert SimpleName: indexSelect(1614) into MethodInvocation(1616) at 0", "Insert SimpleName: getFrom(1615) into MethodInvocation(1616) at 1", "Insert SimpleName: indexSelect(1617) into MethodInvocation(1619) at 0", "Insert SimpleName: getHint(1618) into MethodInvocation(1619) at 1", "Insert SimpleName: indexSelect(1626) into MethodInvocation(1628) at 0", "Insert SimpleName: getLimit(1627) into MethodInvocation(1628) at 1", "Insert SimpleName: indexSelect(1629) into MethodInvocation(1631) at 0", "Insert SimpleName: getBindCount(1630) into MethodInvocation(1631) at 1", "Insert SimpleName: indexSelect(1633) into MethodInvocation(1635) at 0", "Insert SimpleName: hasSequence(1634) into MethodInvocation(1635) at 1", "Insert InfixExpression: ==(1648) into ConditionalExpression(1657) at 0", "Insert MethodInvocation(1652) into ConditionalExpression(1657) at 1", "Insert MethodInvocation(1656) into ConditionalExpression(1657) at 2", "Insert SimpleName: FACTORY(1658) into MethodInvocation(1662) at 0", "Insert SimpleName: subquery(1659) into MethodInvocation(1662) at 1", "Insert SimpleName: innerSelect(1660) into MethodInvocation(1662) at 2", "Insert BooleanLiteral: false(1661) into MethodInvocation(1662) at 3", "Insert SimpleName: outerWhere(1679) into Assignment: =(1688) at 0", "Insert MethodInvocation(1687) into Assignment: =(1688) at 1", "Insert SimpleName: HintNode(1697) into MethodInvocation(1710) at 0", "Insert SimpleName: subtract(1698) into MethodInvocation(1710) at 1", "Insert MethodInvocation(1701) into MethodInvocation(1710) at 2", "Insert ArrayCreation(1709) into MethodInvocation(1710) at 3", "Insert SimpleName: FACTORY(1711) into MethodInvocation(1714) at 0", "Insert SimpleName: hint(1712) into MethodInvocation(1714) at 1", "Insert StringLiteral: \"NO_INDEX SKIP_SCAN_HASH_JOIN\"(1713) into MethodInvocation(1714) at 2", "Insert SimpleName: statement(1735) into MethodInvocation(1737) at 0", "Insert SimpleName: getConnection(1736) into MethodInvocation(1737) at 1", "Insert SimpleName: statement(1746) into MethodInvocation(1748) at 0", "Insert SimpleName: getConnection(1747) into MethodInvocation(1748) at 1", "Insert SimpleName: statement(1756) into MethodInvocation(1758) at 0", "Insert SimpleName: getConnection(1757) into MethodInvocation(1758) at 1", "Insert SimpleType: QueryCompiler(1774) into ClassInstanceCreation(1778) at 0", "Insert SimpleName: statement(1775) into ClassInstanceCreation(1778) at 1", "Insert SimpleName: query(1776) into ClassInstanceCreation(1778) at 2", "Insert SimpleName: queryResolver(1777) into ClassInstanceCreation(1778) at 3", "Insert MethodInvocation(1483) into MethodInvocation(1485) at 0", "Insert SimpleName: getTenantId(1484) into MethodInvocation(1485) at 1", "Insert SimpleName: isSalted(1493) into ConditionalExpression(1496) at 0", "Insert NumberLiteral: 1(1494) into ConditionalExpression(1496) at 1", "Insert NumberLiteral: 0(1495) into ConditionalExpression(1496) at 2", "Insert SimpleName: isTenantSpecific(1498) into ConditionalExpression(1501) at 0", "Insert NumberLiteral: 1(1499) into ConditionalExpression(1501) at 1", "Insert NumberLiteral: 0(1500) into ConditionalExpression(1501) at 2", "Insert SimpleName: pkColumns(1521) into MethodInvocation(1524) at 0", "Insert SimpleName: get(1522) into MethodInvocation(1524) at 1", "Insert SimpleName: i(1523) into MethodInvocation(1524) at 2", "Insert SimpleName: IndexUtil(1530) into MethodInvocation(1533) at 0", "Insert SimpleName: getIndexColumnName(1531) into MethodInvocation(1533) at 1", "Insert SimpleName: column(1532) into MethodInvocation(1533) at 2", "Insert SimpleType: ColumnParseNode(1540) into ClassInstanceCreation(1547) at 0", "Insert NullLiteral(1541) into ClassInstanceCreation(1547) at 1", "Insert InfixExpression: +(1545) into ClassInstanceCreation(1547) at 2", "Insert SimpleName: indexColName(1546) into ClassInstanceCreation(1547) at 3", "Insert SimpleName: IndexUtil(1553) into MethodInvocation(1556) at 0", "Insert SimpleName: getIndexColumnDataType(1554) into MethodInvocation(1556) at 1", "Insert SimpleName: column(1555) into MethodInvocation(1556) at 2", "Insert SimpleName: column(1562) into MethodInvocation(1564) at 0", "Insert SimpleName: getDataType(1563) into MethodInvocation(1564) at 1", "Insert Assignment: =(1578) into ExpressionStatement(1579) at 0", "Insert SimpleName: FACTORY(1584) into MethodInvocation(1588) at 0", "Insert SimpleName: aliasedNode(1585) into MethodInvocation(1588) at 1", "Insert NullLiteral(1586) into MethodInvocation(1588) at 2", "Insert SimpleName: indexColNode(1587) into MethodInvocation(1588) at 3", "Insert SimpleType: ColumnParseNode(1594) into ClassInstanceCreation(1604) at 0", "Insert NullLiteral(1595) into ClassInstanceCreation(1604) at 1", "Insert InfixExpression: +(1603) into ClassInstanceCreation(1604) at 2", "Insert MethodInvocation(1646) into InfixExpression: ==(1648) at 0", "Insert NumberLiteral: 1(1647) into InfixExpression: ==(1648) at 1", "Insert SimpleName: nodes(1649) into MethodInvocation(1652) at 0", "Insert SimpleName: get(1650) into MethodInvocation(1652) at 1", "Insert NumberLiteral: 0(1651) into MethodInvocation(1652) at 2", "Insert SimpleName: FACTORY(1653) into MethodInvocation(1656) at 0", "Insert SimpleName: rowValueConstructor(1654) into MethodInvocation(1656) at 1", "Insert SimpleName: nodes(1655) into MethodInvocation(1656) at 2", "Insert SimpleName: FACTORY(1680) into MethodInvocation(1687) at 0", "Insert SimpleName: and(1681) into MethodInvocation(1687) at 1", "Insert MethodInvocation(1686) into MethodInvocation(1687) at 2", "Insert SimpleName: indexSelect(1699) into MethodInvocation(1701) at 0", "Insert SimpleName: getHint(1700) into MethodInvocation(1701) at 1", "Insert ArrayType: Hint[](1705) into ArrayCreation(1709) at 0", "Insert ArrayInitializer(1708) into ArrayCreation(1709) at 1", "Insert SimpleName: QueryCompiler(1773) into SimpleType: QueryCompiler(1774) at 0", "Insert SimpleName: statement(1481) into MethodInvocation(1483) at 0", "Insert SimpleName: getConnection(1482) into MethodInvocation(1483) at 1", "Insert SimpleName: ColumnParseNode(1539) into SimpleType: ColumnParseNode(1540) at 0", "Insert CharacterLiteral: '\"'(1542) into InfixExpression: +(1545) at 0", "Insert SimpleName: indexColName(1543) into InfixExpression: +(1545) at 1", "Insert CharacterLiteral: '\"'(1544) into InfixExpression: +(1545) at 2", "Insert SimpleName: indexColNode(1570) into Assignment: =(1578) at 0", "Insert MethodInvocation(1577) into Assignment: =(1578) at 1", "Insert SimpleName: ColumnParseNode(1593) into SimpleType: ColumnParseNode(1594) at 0", "Insert CharacterLiteral: '\"'(1596) into InfixExpression: +(1603) at 0", "Insert MethodInvocation(1601) into InfixExpression: +(1603) at 1", "Insert CharacterLiteral: '\"'(1602) into InfixExpression: +(1603) at 2", "Insert SimpleName: nodes(1644) into MethodInvocation(1646) at 0", "Insert SimpleName: size(1645) into MethodInvocation(1646) at 1", "Insert SimpleName: Lists(1682) into MethodInvocation(1686) at 0", "Insert SimpleName: newArrayList(1683) into MethodInvocation(1686) at 1", "Insert SimpleName: outerWhere(1684) into MethodInvocation(1686) at 2", "Insert SimpleName: extractedCondition(1685) into MethodInvocation(1686) at 3", "Insert SimpleType: Hint(1703) into ArrayType: Hint[](1705) at 0", "Insert Dimension(1704) into ArrayType: Hint[](1705) at 1", "Insert QualifiedName: Hint.INDEX(1706) into ArrayInitializer(1708) at 0", "Insert QualifiedName: Hint.RANGE_SCAN_HASH_JOIN(1707) into ArrayInitializer(1708) at 1", "Insert SimpleName: FACTORY(1571) into MethodInvocation(1577) at 0", "Insert SimpleName: cast(1572) into MethodInvocation(1577) at 1", "Insert SimpleName: indexColNode(1573) into MethodInvocation(1577) at 2", "Insert SimpleName: dataColType(1574) into MethodInvocation(1577) at 3", "Insert NullLiteral(1575) into MethodInvocation(1577) at 4", "Insert NullLiteral(1576) into MethodInvocation(1577) at 5", "Insert MethodInvocation(1599) into MethodInvocation(1601) at 0", "Insert SimpleName: getString(1600) into MethodInvocation(1601) at 1", "Insert SimpleName: Hint(1702) into SimpleType: Hint(1703) at 0", "Insert SimpleName: column(1597) into MethodInvocation(1599) at 0", "Insert SimpleName: getName(1598) into MethodInvocation(1599) at 1", "Delete Block(1311)", "Delete Block(1316)", "Delete CatchClause(1317)", "Delete Block(1321)"]}}, {"HintNode_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS EnhancedForStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Hint to SimpleType: Hint at 0", "INS SimpleName: hint to SingleVariableDeclaration at 1", "INS SimpleName: HashMap to SimpleType: HashMap at 0", "INS SimpleName: remove to MethodInvocation at 1", "INS SimpleType: HintNode to MethodDeclaration at 2", "INS SimpleName: remove to EnhancedForStatement at 1", "INS ParameterizedType: Map<Hint,String> to VariableDeclarationStatement at 0", "INS SimpleType: HintNode to SingleVariableDeclaration at 0", "INS SimpleType: Hint to SingleVariableDeclaration at 0", "INS VariableDeclarationStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Hint to SimpleType: Hint at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: hintNode to SingleVariableDeclaration at 1", "INS SimpleName: hints to MethodInvocation at 0", "INS SimpleName: Hint to SimpleType: Hint at 0", "INS SimpleName: String to SimpleType: String at 0", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleType: Hint to ParameterizedType: Map<Hint,String> at 1", "INS Dimension to ArrayType: Hint[] at 1", "INS SimpleName: hints to VariableDeclarationFragment at 0", "INS Modifier: static to MethodDeclaration at 1", "INS ReturnStatement to Block at 2", "INS Block to MethodDeclaration at 6", "INS SimpleName: HintNode to SimpleType: HintNode at 0", "INS SimpleName: hint to MethodInvocation at 2", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: Hint to ParameterizedType: HashMap<Hint,String> at 1", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: remove to SingleVariableDeclaration at 1", "INS SimpleName: hints to ClassInstanceCreation at 1", "INS SimpleType: Hint to ArrayType: Hint[] at 0", "INS SimpleName: String to SimpleType: String at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleType: HintNode to ClassInstanceCreation at 0", "INS QualifiedName: hintNode.hints to ClassInstanceCreation at 1", "INS SimpleType: HashMap to ParameterizedType: HashMap<Hint,String> at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS ArrayType: Hint[] to SingleVariableDeclaration at 0", "INS SimpleName: Hint to SimpleType: Hint at 0", "INS SimpleName: subtract to MethodDeclaration at 3", "INS ParameterizedType: HashMap<Hint,String> to ClassInstanceCreation at 0", "INS SimpleType: Map to ParameterizedType: Map<Hint,String> at 0", "INS SimpleType: String to ParameterizedType: Map<Hint,String> at 2", "INS ExpressionStatement to Block at 0", "INS SimpleType: String to ParameterizedType: HashMap<Hint,String> at 2", "INS SimpleName: HintNode to SimpleType: HintNode at 0", "INS SimpleName: HintNode to SimpleType: HintNode at 0"]}]}}, {"HintNode_diff": {"operations": ["Insert MethodDeclaration(330) into TypeDeclaration: class(627) at 13", "Insert Modifier: public(278) into MethodDeclaration(330) at 0", "Insert Modifier: static(279) into MethodDeclaration(330) at 1", "Insert SimpleType: HintNode(281) into MethodDeclaration(330) at 2", "Insert SimpleName: subtract(282) into MethodDeclaration(330) at 3", "Insert SingleVariableDeclaration(286) into MethodDeclaration(330) at 4", "Insert SingleVariableDeclaration(292) into MethodDeclaration(330) at 5", "Insert Block(329) into MethodDeclaration(330) at 6", "Insert SimpleName: HintNode(280) into SimpleType: HintNode(281) at 0", "Insert SimpleType: HintNode(284) into SingleVariableDeclaration(286) at 0", "Insert SimpleName: hintNode(285) into SingleVariableDeclaration(286) at 1", "Insert ArrayType: Hint[](290) into SingleVariableDeclaration(292) at 0", "Insert SimpleName: remove(291) into SingleVariableDeclaration(292) at 1", "Insert VariableDeclarationStatement(311) into Block(329) at 0", "Insert EnhancedForStatement(323) into Block(329) at 1", "Insert ReturnStatement(328) into Block(329) at 2", "Insert SimpleName: HintNode(283) into SimpleType: HintNode(284) at 0", "Insert SimpleType: Hint(288) into ArrayType: Hint[](290) at 0", "Insert Dimension(289) into ArrayType: Hint[](290) at 1", "Insert ParameterizedType: Map<Hint,String>(299) into VariableDeclarationStatement(311) at 0", "Insert VariableDeclarationFragment(310) into VariableDeclarationStatement(311) at 1", "Insert SingleVariableDeclaration(315) into EnhancedForStatement(323) at 0", "Insert SimpleName: remove(316) into EnhancedForStatement(323) at 1", "Insert Block(322) into EnhancedForStatement(323) at 2", "Insert ClassInstanceCreation(327) into ReturnStatement(328) at 0", "Insert SimpleName: Hint(287) into SimpleType: Hint(288) at 0", "Insert SimpleType: Map(294) into ParameterizedType: Map<Hint,String>(299) at 0", "Insert SimpleType: Hint(296) into ParameterizedType: Map<Hint,String>(299) at 1", "Insert SimpleType: String(298) into ParameterizedType: Map<Hint,String>(299) at 2", "Insert SimpleName: hints(300) into VariableDeclarationFragment(310) at 0", "Insert ClassInstanceCreation(309) into VariableDeclarationFragment(310) at 1", "Insert SimpleType: Hint(313) into SingleVariableDeclaration(315) at 0", "Insert SimpleName: hint(314) into SingleVariableDeclaration(315) at 1", "Insert ExpressionStatement(321) into Block(322) at 0", "Insert SimpleType: HintNode(325) into ClassInstanceCreation(327) at 0", "Insert SimpleName: hints(326) into ClassInstanceCreation(327) at 1", "Insert SimpleName: Map(293) into SimpleType: Map(294) at 0", "Insert SimpleName: Hint(295) into SimpleType: Hint(296) at 0", "Insert SimpleName: String(297) into SimpleType: String(298) at 0", "Insert ParameterizedType: HashMap<Hint,String>(307) into ClassInstanceCreation(309) at 0", "Insert QualifiedName: hintNode.hints(308) into ClassInstanceCreation(309) at 1", "Insert SimpleName: Hint(312) into SimpleType: Hint(313) at 0", "Insert MethodInvocation(320) into ExpressionStatement(321) at 0", "Insert SimpleName: HintNode(324) into SimpleType: HintNode(325) at 0", "Insert SimpleType: HashMap(302) into ParameterizedType: HashMap<Hint,String>(307) at 0", "Insert SimpleType: Hint(304) into ParameterizedType: HashMap<Hint,String>(307) at 1", "Insert SimpleType: String(306) into ParameterizedType: HashMap<Hint,String>(307) at 2", "Insert SimpleName: hints(317) into MethodInvocation(320) at 0", "Insert SimpleName: remove(318) into MethodInvocation(320) at 1", "Insert SimpleName: hint(319) into MethodInvocation(320) at 2", "Insert SimpleName: HashMap(301) into SimpleType: HashMap(302) at 0", "Insert SimpleName: Hint(303) into SimpleType: Hint(304) at 0", "Insert SimpleName: String(305) into SimpleType: String(306) at 0"]}}, {"InParseNode_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS SimpleName: isSubqueryDistinct to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: private to FieldDeclaration at 0", "INS PrimitiveType: boolean to FieldDeclaration at 2", "INS Modifier: final to FieldDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS Modifier: public to MethodDeclaration at 0", "INS Block to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS SimpleName: isSubqueryDistinct to ReturnStatement at 0", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleName: isSubqueryDistinct to MethodDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: isSubqueryDistinct to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: isSubqueryDistinct to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: isSubqueryDistinct to FieldAccess at 1"]}]}}, {"InParseNode_diff": {"operations": ["Insert FieldDeclaration(28) into TypeDeclaration: class(123) at 5", "Insert MethodDeclaration(74) into TypeDeclaration: class(123) at 8", "Insert Modifier: private(23) into FieldDeclaration(28) at 0", "Insert Modifier: final(24) into FieldDeclaration(28) at 1", "Insert PrimitiveType: boolean(25) into FieldDeclaration(28) at 2", "Insert VariableDeclarationFragment(27) into FieldDeclaration(28) at 3", "Insert SingleVariableDeclaration(43) into MethodDeclaration(60) at 4", "Insert Modifier: public(68) into MethodDeclaration(74) at 0", "Insert PrimitiveType: boolean(69) into MethodDeclaration(74) at 1", "Insert SimpleName: isSubqueryDistinct(70) into MethodDeclaration(74) at 2", "Insert Block(73) into MethodDeclaration(74) at 3", "Insert SimpleName: isSubqueryDistinct(26) into VariableDeclarationFragment(27) at 0", "Insert PrimitiveType: boolean(41) into SingleVariableDeclaration(43) at 0", "Insert SimpleName: isSubqueryDistinct(42) into SingleVariableDeclaration(43) at 1", "Insert ExpressionStatement(58) into Block(59) at 2", "Insert ReturnStatement(72) into Block(73) at 0", "Insert Assignment: =(57) into ExpressionStatement(58) at 0", "Insert SimpleName: isSubqueryDistinct(71) into ReturnStatement(72) at 0", "Insert FieldAccess(55) into Assignment: =(57) at 0", "Insert SimpleName: isSubqueryDistinct(56) into Assignment: =(57) at 1", "Insert ThisExpression(53) into FieldAccess(55) at 0", "Insert SimpleName: isSubqueryDistinct(54) into FieldAccess(55) at 1"]}}, {"ParseNodeFactory_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 105", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: getOrderBy to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 105", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: getHaving to MethodInvocation at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: select to MethodDeclaration at 2", "INS SimpleName: getSelect to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 4", "INS MethodInvocation to MethodInvocation at 6", "INS SimpleName: select to MethodInvocation at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: where to MethodInvocation at 5", "INS SimpleName: hasSequence to MethodInvocation at 1", "INS SimpleType: SelectStatement to MethodDeclaration at 1", "INS SimpleName: getFrom to MethodInvocation at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: getLimit to MethodInvocation at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: statement to SingleVariableDeclaration at 1", "INS SimpleName: isDistinct to MethodInvocation at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: hint to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: SelectStatement to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: where to SingleVariableDeclaration at 1", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS SimpleName: hint to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 10", "INS SimpleName: statement to MethodInvocation at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: statement to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 8", "INS MethodInvocation to MethodInvocation at 7", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: isAggregate to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 12", "INS Modifier: public to MethodDeclaration at 0", "INS MethodInvocation to MethodInvocation at 11", "INS SimpleName: SelectStatement to SimpleType: SelectStatement at 0", "INS MethodInvocation to MethodInvocation at 9", "INS SimpleName: HintNode to SimpleType: HintNode at 0", "INS SimpleName: getGroupBy to MethodInvocation at 1", "INS SimpleName: SelectStatement to SimpleType: SelectStatement at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleType: HintNode to SingleVariableDeclaration at 0", "INS SimpleName: getBindCount to MethodInvocation at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SimpleName: isSubqueryDistinct to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleName: isSubqueryDistinct to ClassInstanceCreation at 4", "operations": ["INS SimpleName: isSubqueryDistinct to ClassInstanceCreation at 4"]}]}}, {"ParseNodeFactory_diff": {"operations": ["Insert MethodDeclaration(3578) into TypeDeclaration: class(3679) at 105", "Insert SingleVariableDeclaration(1969) into MethodDeclaration(1979) at 6", "Insert Modifier: public(3526) into MethodDeclaration(3578) at 0", "Insert SimpleType: SelectStatement(3528) into MethodDeclaration(3578) at 1", "Insert SimpleName: select(3529) into MethodDeclaration(3578) at 2", "Insert SingleVariableDeclaration(3533) into MethodDeclaration(3578) at 3", "Insert SingleVariableDeclaration(3537) into MethodDeclaration(3578) at 4", "Insert SingleVariableDeclaration(3541) into MethodDeclaration(3578) at 5", "Insert Block(3577) into MethodDeclaration(3578) at 6", "Insert PrimitiveType: boolean(1967) into SingleVariableDeclaration(1969) at 0", "Insert SimpleName: isSubqueryDistinct(1968) into SingleVariableDeclaration(1969) at 1", "Insert SimpleName: SelectStatement(3527) into SimpleType: SelectStatement(3528) at 0", "Insert SimpleType: SelectStatement(3531) into SingleVariableDeclaration(3533) at 0", "Insert SimpleName: statement(3532) into SingleVariableDeclaration(3533) at 1", "Insert SimpleType: HintNode(3535) into SingleVariableDeclaration(3537) at 0", "Insert SimpleName: hint(3536) into SingleVariableDeclaration(3537) at 1", "Insert SimpleType: ParseNode(3539) into SingleVariableDeclaration(3541) at 0", "Insert SimpleName: where(3540) into SingleVariableDeclaration(3541) at 1", "Insert ReturnStatement(3576) into Block(3577) at 0", "Insert SimpleName: SelectStatement(3530) into SimpleType: SelectStatement(3531) at 0", "Insert SimpleName: HintNode(3534) into SimpleType: HintNode(3535) at 0", "Insert SimpleName: ParseNode(3538) into SimpleType: ParseNode(3539) at 0", "Insert MethodInvocation(3575) into ReturnStatement(3576) at 0", "Insert SimpleName: isSubqueryDistinct(1975) into ClassInstanceCreation(1976) at 4", "Insert SimpleName: select(3542) into MethodInvocation(3575) at 0", "Insert MethodInvocation(3545) into MethodInvocation(3575) at 1", "Insert SimpleName: hint(3546) into MethodInvocation(3575) at 2", "Insert MethodInvocation(3549) into MethodInvocation(3575) at 3", "Insert MethodInvocation(3552) into MethodInvocation(3575) at 4", "Insert SimpleName: where(3553) into MethodInvocation(3575) at 5", "Insert MethodInvocation(3556) into MethodInvocation(3575) at 6", "Insert MethodInvocation(3559) into MethodInvocation(3575) at 7", "Insert MethodInvocation(3562) into MethodInvocation(3575) at 8", "Insert MethodInvocation(3565) into MethodInvocation(3575) at 9", "Insert MethodInvocation(3568) into MethodInvocation(3575) at 10", "Insert MethodInvocation(3571) into MethodInvocation(3575) at 11", "Insert MethodInvocation(3574) into MethodInvocation(3575) at 12", "Insert SimpleName: statement(3543) into MethodInvocation(3545) at 0", "Insert SimpleName: getFrom(3544) into MethodInvocation(3545) at 1", "Insert SimpleName: statement(3547) into MethodInvocation(3549) at 0", "Insert SimpleName: isDistinct(3548) into MethodInvocation(3549) at 1", "Insert SimpleName: statement(3550) into MethodInvocation(3552) at 0", "Insert SimpleName: getSelect(3551) into MethodInvocation(3552) at 1", "Insert SimpleName: statement(3554) into MethodInvocation(3556) at 0", "Insert SimpleName: getGroupBy(3555) into MethodInvocation(3556) at 1", "Insert SimpleName: statement(3557) into MethodInvocation(3559) at 0", "Insert SimpleName: getHaving(3558) into MethodInvocation(3559) at 1", "Insert SimpleName: statement(3560) into MethodInvocation(3562) at 0", "Insert SimpleName: getOrderBy(3561) into MethodInvocation(3562) at 1", "Insert SimpleName: statement(3563) into MethodInvocation(3565) at 0", "Insert SimpleName: getLimit(3564) into MethodInvocation(3565) at 1", "Insert SimpleName: statement(3566) into MethodInvocation(3568) at 0", "Insert SimpleName: getBindCount(3567) into MethodInvocation(3568) at 1", "Insert SimpleName: statement(3569) into MethodInvocation(3571) at 0", "Insert SimpleName: isAggregate(3570) into MethodInvocation(3571) at 1", "Insert SimpleName: statement(3572) into MethodInvocation(3574) at 0", "Insert SimpleName: hasSequence(3573) into MethodInvocation(3574) at 1"]}}, {"ParseNodeRewriter_cluster": {"actions": [{"root": "INS MethodInvocation to MethodInvocation at 5", "operations": ["INS SimpleName: node to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 5", "INS SimpleName: isSubqueryDistinct to MethodInvocation at 1"]}]}}, {"ParseNodeRewriter_diff": {"operations": ["Insert MethodInvocation(1631) into MethodInvocation(1632) at 5", "Insert SimpleName: node(1629) into MethodInvocation(1631) at 0", "Insert SimpleName: isSubqueryDistinct(1630) into MethodInvocation(1631) at 1"]}}], "commit_stats": [{"total_files": 15, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}