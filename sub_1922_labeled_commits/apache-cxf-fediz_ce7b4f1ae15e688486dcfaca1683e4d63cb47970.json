{"application": "apache-cxf-fediz", "csha": "ce7b4f1ae15e688486dcfaca1683e4d63cb47970", "files": [{"SigninHandler_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: HttpServletRequest to SingleVariableDeclaration at 0", "INS SimpleName: request to SingleVariableDeclaration at 1", "INS SimpleName: HttpServletRequest to SimpleType: HttpServletRequest at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleType: HttpServletResponse to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: HttpServletResponse to SimpleType: HttpServletResponse at 0", "INS SimpleName: response to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SimpleName: federationResponse to SingleVariableDeclaration at 1", "INS SimpleName: FedizResponse to SimpleType: FedizResponse at 0", "INS SimpleType: FedizResponse to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: federationResponse to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: FedizResponse to SimpleType: FedizResponse at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: FedizResponse to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleName: request to MethodInvocation at 1", "operations": ["INS SimpleName: request to MethodInvocation at 1"]}, {"root": "INS SimpleName: response to MethodInvocation at 2", "operations": ["INS SimpleName: response to MethodInvocation at 2"]}, {"root": "INS SimpleName: federationResponse to MethodInvocation at 3", "operations": ["INS SimpleName: federationResponse to MethodInvocation at 3"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement"]}]}}, {"SigninHandler_diff": {"operations": ["Insert SingleVariableDeclaration(221) into MethodDeclaration(230) at 4", "Insert SingleVariableDeclaration(225) into MethodDeclaration(230) at 5", "Insert SingleVariableDeclaration(229) into MethodDeclaration(230) at 6", "Insert SimpleType: HttpServletRequest(219) into SingleVariableDeclaration(221) at 0", "Insert SimpleName: request(220) into SingleVariableDeclaration(221) at 1", "Insert SimpleType: HttpServletResponse(223) into SingleVariableDeclaration(225) at 0", "Insert SimpleName: response(224) into SingleVariableDeclaration(225) at 1", "Insert SimpleType: FedizResponse(227) into SingleVariableDeclaration(229) at 0", "Insert SimpleName: federationResponse(228) into SingleVariableDeclaration(229) at 1", "Insert SimpleName: HttpServletRequest(218) into SimpleType: HttpServletRequest(219) at 0", "Insert SimpleName: HttpServletResponse(222) into SimpleType: HttpServletResponse(223) at 0", "Insert SimpleName: FedizResponse(226) into SimpleType: FedizResponse(227) at 0", "Insert VariableDeclarationStatement(167) into Block(181) at 0", "Insert SimpleType: FedizResponse(160) into VariableDeclarationStatement(167) at 0", "Insert VariableDeclarationFragment(166) into VariableDeclarationStatement(167) at 1", "Insert SimpleName: FedizResponse(159) into SimpleType: FedizResponse(160) at 0", "Insert SimpleName: federationResponse(161) into VariableDeclarationFragment(166) at 0", "Move MethodInvocation(162) into VariableDeclarationFragment(166) at 1", "Insert SimpleName: request(174) into MethodInvocation(177) at 1", "Insert SimpleName: response(175) into MethodInvocation(177) at 2", "Insert SimpleName: federationResponse(176) into MethodInvocation(177) at 3", "Delete ExpressionStatement(163)"]}}, {"FedizInterceptor_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 33", "MOV ImportDeclaration to CompilationUnit at 33", "MOV ImportDeclaration to CompilationUnit at 22", "MOV ImportDeclaration to CompilationUnit at 33", "MOV ImportDeclaration to CompilationUnit at 7", "MOV ImportDeclaration to CompilationUnit at 33"]}, {"root": "INS ImportDeclaration to CompilationUnit at 19", "operations": ["INS QualifiedName: com.ibm.websphere.security.WSSecurityException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 19"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 23"]}, {"root": "UPDATE from java.util.HashSet to java.util.Iterator", "operations": ["UPD QualifiedName: java.util.HashSet from java.util.HashSet to java.util.Iterator"]}, {"root": "UPDATE from java.util.Set to com.ibm.websphere.security.auth.WSSubject", "operations": ["UPD QualifiedName: java.util.Set from java.util.Set to com.ibm.websphere.security.auth.WSSubject"]}, {"root": "UPDATE from org.apache.cxf.fediz.core.SAMLSSOConstants to org.apache.cxf.fediz.core.handler.LogoutHandler", "operations": ["UPD QualifiedName: org.apache.cxf.fediz.core.SAMLSSOConstants from org.apache.cxf.fediz.core.SAMLSSOConstants to org.apache.cxf.fediz.core.handler.LogoutHandler"]}, {"root": "UPDATE from org.apache.cxf.fediz.core.config.FederationProtocol to org.apache.cxf.fediz.core.handler.RequestHandler", "operations": ["UPD QualifiedName: org.apache.cxf.fediz.core.config.FederationProtocol from org.apache.cxf.fediz.core.config.FederationProtocol to org.apache.cxf.fediz.core.handler.RequestHandler"]}, {"root": "UPDATE from org.apache.cxf.fediz.core.config.SAMLProtocol to org.apache.cxf.fediz.core.handler.SigninHandler", "operations": ["UPD QualifiedName: org.apache.cxf.fediz.core.config.SAMLProtocol from org.apache.cxf.fediz.core.config.SAMLProtocol to org.apache.cxf.fediz.core.handler.SigninHandler"]}, {"root": "UPDATE from org.apache.cxf.fediz.core.processor.FedizRequest to org.apache.cxf.fediz.core.metadata.MetadataDocumentHandler", "operations": ["UPD QualifiedName: org.apache.cxf.fediz.core.processor.FedizRequest from org.apache.cxf.fediz.core.processor.FedizRequest to org.apache.cxf.fediz.core.metadata.MetadataDocumentHandler"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 14", "INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Deprecated to MarkerAnnotation at 0", "INS Block to MethodDeclaration at 7"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS Block to MethodDeclaration at 7", "INS SimpleName: Deprecated to MarkerAnnotation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 21", "operations": ["INS SimpleName: negotiateValidateandEstablishTrust to MethodDeclaration at 3", "INS SimpleName: taiResult to ReturnStatement at 0", "INS VariableDeclarationStatement to Block at 2", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: federationResponse to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 8", "INS Block to TryStatement at 0", "INS SimpleName: taiResult to InfixExpression: != at 0", "INS Block to IfStatement at 2", "INS SimpleName: fedCtx to ClassInstanceCreation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS NullLiteral to InfixExpression: != at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: principal to MethodInvocation at 4", "INS ConditionalExpression to MethodInvocation at 2", "INS IfStatement to Block at 5", "INS IfStatement to Block at 1", "INS VariableDeclarationStatement to Block at 4", "INS Block to CatchClause at 1", "INS TryStatement to Block at 3", "INS SimpleName: WSSubject to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: LogoutHandler to ClassInstanceCreation at 0", "INS SimpleName: resumeRequest to MethodDeclaration at 3", "INS Block to TryStatement at 0", "INS MethodInvocation to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: getCallerSubject to MethodInvocation at 1", "INS SimpleName: error to MethodInvocation at 1", "INS Block to MethodDeclaration at 7", "INS AnonymousClassDeclaration to ClassInstanceCreation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS IfStatement to Block at 11", "INS SimpleName: mddHandler to VariableDeclarationFragment at 0", "INS InfixExpression: && to IfStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: signinHandler to MethodInvocation at 0", "INS SimpleName: RequestHandler to SimpleType: RequestHandler at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: success to ConditionalExpression at 0", "INS QualifiedName: HttpServletResponse.SC_INTERNAL_SERVER_ERROR to ConditionalExpression at 2", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleType: RequestHandler to VariableDeclarationStatement at 0", "INS ReturnStatement to Block at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: principal to InfixExpression: != at 0", "INS SimpleType: MetadataDocumentHandler to ClassInstanceCreation at 0", "INS QualifiedName: HttpServletResponse.SC_OK to ConditionalExpression at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: SigninHandler to SimpleType: SigninHandler at 0", "INS Block to MethodDeclaration at 7", "INS MethodInvocation to IfStatement at 0", "INS ExpressionStatement to Block at 10", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS Block to IfStatement at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: subject to VariableDeclarationFragment at 0", "INS InfixExpression: != to InfixExpression: && at 1", "INS SimpleName: subject to Assignment: = at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: LogoutHandler to SimpleType: LogoutHandler at 0", "INS SimpleName: canHandleRequest to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleType: SigninHandler to VariableDeclarationStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: req to MethodInvocation at 2", "INS SimpleName: fedCtx to ClassInstanceCreation at 1", "INS SimpleName: LogoutHandler to SimpleType: LogoutHandler at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleType: LogoutHandler to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 13", "INS SimpleName: MetadataDocumentHandler to SimpleType: MetadataDocumentHandler at 0", "INS SimpleName: subject to InfixExpression: != at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: logoutHandler to VariableDeclarationFragment at 0", "INS TryStatement to Block at 9", "INS SimpleType: FedizResponse to SingleVariableDeclaration at 0", "INS SimpleType: Subject to VariableDeclarationStatement at 0", "INS SimpleName: signinHandler to VariableDeclarationFragment at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS VariableDeclarationStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: subject to MethodInvocation at 5", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS CatchClause to TryStatement at 1", "INS StringLiteral: \"Could not read subject\" to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: SigninHandler to ClassInstanceCreation at 0", "INS StringLiteral: \"Remote User: {}, Principal: {}, Subject {}\" to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: LOG to MethodInvocation at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: resp to MethodInvocation at 2", "INS SimpleName: fedCtx to ClassInstanceCreation at 1", "INS IfStatement to Block at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 26", "operations": ["INS SimpleType: Subject to SingleVariableDeclaration at 0", "INS WhileStatement to Block at 1", "INS SimpleType: Object to VariableDeclarationStatement at 0", "INS SimpleName: Subject to SimpleType: Subject at 0", "INS SimpleName: getCachedFederationResponse to MethodDeclaration at 2", "INS VariableDeclarationStatement to Block at 0", "INS ParameterizedType: Iterator<?> to VariableDeclarationStatement at 0", "INS Block to WhileStatement at 1", "INS Block to IfStatement at 1", "INS SimpleName: o to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS MethodDeclaration to TypeDeclaration: class at 26", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: Hashtable to InstanceofExpression at 1", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: Iterator to SimpleType: Iterator at 0", "INS MethodInvocation to WhileStatement at 0", "INS SimpleType: Iterator to ParameterizedType: Iterator<?> at 0", "INS SimpleName: Hashtable to SimpleType: Hashtable at 0", "INS SimpleName: o to InstanceofExpression at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: subject to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 0", "INS IfStatement to Block at 1", "INS Block to MethodDeclaration at 4", "INS WildcardType: ? to ParameterizedType: Iterator<?> at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV PrimitiveType: void to MethodDeclaration at 4", "MOV Modifier: public to MethodDeclaration at 2", "MOV SimpleName: registerContext to MethodDeclaration at 5", "MOV Modifier: static to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: static to MethodDeclaration at 3", "MOV SimpleName: deRegisterContext to MethodDeclaration at 5", "MOV Modifier: public to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV Javadoc to MethodDeclaration at 0", "MOV PrimitiveType: void to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: WebTrustAssociationFailedException to MethodDeclaration at 6", "MOV SimpleType: TAIResult to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SimpleName: checkUserAuthentication to MethodDeclaration at 2", "operations": ["INS SimpleName: checkUserAuthentication to MethodDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: fedCtx to SingleVariableDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: FedizResponse to MethodDeclaration at 1"]}, {"root": "INS PrimitiveType: boolean to MethodDeclaration at 1", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 1"]}, {"root": "UPDATE from warn to checkSecurityToken", "operations": ["UPD SimpleName: warn from warn to checkSecurityToken", "UPD SimpleName: getResponseToken from getResponseToken to checkSecurityToken"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5", "MOV Block to TryStatement at 2"]}, {"root": "INS TagElement: @deprecated to Javadoc at 1", "operations": ["INS TextElement:  Not used/needed any longer since version 1.2.0 to TagElement: @deprecated at 0", "INS TagElement: @deprecated to Javadoc at 1"]}, {"root": "INS TagElement: @deprecated to Javadoc at 1", "operations": ["INS TagElement: @deprecated to Javadoc at 1", "INS TextElement:  Not used/needed any longer since version 1.2.0 to TagElement: @deprecated at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV IfStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: FedizContext to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 2"]}, {"root": "UPDATE from FedizContext to FedizResponse", "operations": ["UPD SimpleName: FedizContext from FedizContext to FedizResponse", "UPD SimpleName: ProcessingException from ProcessingException to FedizResponse", "UPD SimpleType: FedizContext from FedizContext to FedizResponse"]}, {"root": "UPDATE from resp to response", "operations": ["UPD SimpleName: resp from resp to response", "UPD SimpleName: fedConfig from fedConfig to response", "UPD SimpleName: fedConfig from fedConfig to response", "UPD SimpleName: resp from resp to response"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: currentTime to VariableDeclarationFragment at 0"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS MethodInvocation to InfixExpression: > at 0", "INS InfixExpression: > to ReturnStatement at 0", "INS ReturnStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: currentTime to InfixExpression: > at 1", "INS SimpleName: getTime to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 3"]}, {"root": "INS TryStatement to Block at 4", "operations": ["INS SimpleName: addAll to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: groupIds to MethodInvocation at 0", "INS Block to TryStatement at 0", "INS StringLiteral: \"User Registry could not be loaded via JNDI context.\" to MethodInvocation at 2", "INS TryStatement to Block at 4", "INS Block to CatchClause at 1", "INS SimpleName: localGroups to MethodInvocation at 2", "INS CatchClause to TryStatement at 1"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: debug to MethodInvocation at 1", "INS StringLiteral: \"Group list: {}\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 5", "INS SimpleName: groupIds to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from TryStatement", "operations": ["MOV CatchClause to TryStatement at 1"]}, {"root": "UPDATE from == to !=", "operations": ["UPD InfixExpression: == from == to !="]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV IfStatement to Block at 3"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 3", "MOV ReturnStatement to Block at 14", "MOV IfStatement to Block at 4", "MOV ExpressionStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 6", "MOV ExpressionStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 7"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 12"]}, {"root": "UPDATE from req to i", "operations": ["UPD SimpleName: req from req to i", "UPD SimpleName: req from req to i"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getParameter to MethodInvocation at 1", "MOV SimpleName: req to MethodInvocation at 0"]}, {"root": "UPDATE from getParameter to hasNext", "operations": ["UPD SimpleName: getParameter from getParameter to hasNext"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from setState to iterator", "operations": ["UPD SimpleName: setState from setState to iterator"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setState to MethodInvocation at 1", "MOV SimpleName: federationRequest to MethodInvocation at 1"]}, {"root": "UPDATE from request to System", "operations": ["UPD SimpleName: request from request to System"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getParameter to MethodInvocation at 1", "MOV SimpleName: request to MethodInvocation at 0"]}, {"root": "UPDATE from getParameter to currentTimeMillis", "operations": ["UPD SimpleName: getParameter from getParameter to currentTimeMillis"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS SimpleName: size to MethodInvocation at 1", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: localGroups to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from authorizedWebApps to mddHandler", "operations": ["UPD SimpleName: authorizedWebApps from authorizedWebApps to mddHandler"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: contextPath to MethodInvocation at 2", "MOV SimpleName: authorizedWebApps to MethodInvocation at 0", "MOV SimpleName: remove to MethodInvocation at 1"]}, {"root": "UPDATE from remove to canHandleRequest", "operations": ["UPD SimpleName: remove from remove to canHandleRequest", "UPD SimpleName: req from req to canHandleRequest"]}, {"root": "UPDATE from contextPath to req", "operations": ["UPD SimpleName: contextPath from contextPath to req", "UPD SimpleName: resp from resp to req"]}, {"root": "UPDATE from handleNoWA to logoutHandler", "operations": ["UPD SimpleName: handleNoWA from handleNoWA to logoutHandler", "UPD SimpleName: wa from wa to logoutHandler"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: handleNoWA to MethodInvocation at 0", "MOV SimpleName: req to MethodInvocation at 1", "MOV SimpleName: resp to MethodInvocation at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: success to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS ReturnStatement to Block at 1", "INS SimpleName: create to MethodInvocation at 1", "INS QualifiedName: HttpServletResponse.SC_OK to ConditionalExpression at 1", "INS MethodInvocation to ReturnStatement at 0", "INS ConditionalExpression to MethodInvocation at 2", "INS QualifiedName: HttpServletResponse.SC_INTERNAL_SERVER_ERROR to ConditionalExpression at 2", "INS SimpleName: TAIResult to MethodInvocation at 0", "INS SimpleName: success to ConditionalExpression at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "UPDATE from req to user", "operations": ["UPD SimpleName: req from req to user", "UPD SimpleName: federationResponse from federationResponse to user"]}, {"root": "UPDATE from session to principal", "operations": ["UPD SimpleName: session from session to principal"]}, {"root": "UPDATE from Exception to Subject", "operations": ["UPD SimpleName: Exception from Exception to Subject"]}, {"root": "MOVE from SimpleType: Subject", "operations": ["MOV SimpleName: Exception to SimpleType: Subject at 0"]}, {"root": "UPDATE from getFederationContext to info", "operations": ["UPD SimpleName: getFederationContext from getFederationContext to info"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: req to MethodInvocation at 3", "MOV SimpleName: getFederationContext to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "UPDATE from getResponseToken to redirectToIdp", "operations": ["UPD SimpleName: getResponseToken from getResponseToken to redirectToIdp"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: fedCtx to MethodInvocation at 3", "MOV SimpleName: getResponseToken to MethodInvocation at 0", "MOV SimpleName: req to MethodInvocation at 1"]}, {"root": "UPDATE from responseToken to subject", "operations": ["UPD SimpleName: responseToken from responseToken to subject"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: responseToken to MethodInvocation at 0"]}, {"root": "UPDATE from federationRequest to getPublicCredentials", "operations": ["UPD SimpleName: federationRequest from federationRequest to getPublicCredentials"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getProtocol to MethodInvocation at 1", "MOV SimpleName: fedConfig to MethodInvocation at 0"]}, {"root": "UPDATE from getProtocol to getTokenExpires", "operations": ["UPD SimpleName: getProtocol from getProtocol to getTokenExpires"]}, {"root": "INS SingleMemberAnnotation to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS StringLiteral: \"deprecation\" to SingleMemberAnnotation at 1", "INS SingleMemberAnnotation to VariableDeclarationStatement at 0"]}, {"root": "INS SingleMemberAnnotation to VariableDeclarationStatement at 0", "operations": ["INS SingleMemberAnnotation to VariableDeclarationStatement at 0", "INS StringLiteral: \"deprecation\" to SingleMemberAnnotation at 1", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0"]}, {"root": "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "operations": ["INS PrimitiveType: boolean to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from resp to getRemoteUser", "operations": ["UPD SimpleName: resp from resp to getRemoteUser"]}, {"root": "UPDATE from req to WSSubject", "operations": ["UPD SimpleName: req from req to WSSubject"]}, {"root": "UPDATE from getSession to getCallerPrincipal", "operations": ["UPD SimpleName: getSession from getSession to getCallerPrincipal"]}, {"root": "UPDATE from HttpServletResponse to WSSecurityException", "operations": ["UPD SimpleName: HttpServletResponse from HttpServletResponse to WSSecurityException", "UPD SimpleType: HttpServletResponse from HttpServletResponse to WSSecurityException"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: HttpServletResponse to SingleVariableDeclaration at 0", "MOV SimpleName: resp to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from resp to e", "operations": ["UPD SimpleName: resp from resp to e"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: TAIResult to VariableDeclarationStatement at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: req to MethodInvocation at 0"]}, {"root": "UPDATE from LOG to next", "operations": ["UPD SimpleName: LOG from LOG to next"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: LOG to MethodInvocation at 1"]}, {"root": "INS ParameterizedType: Map<?,?> to VariableDeclarationStatement at 0", "operations": ["INS WildcardType: ? to ParameterizedType: Map<?,?> at 1", "INS SimpleType: Map to ParameterizedType: Map<?,?> at 0", "INS WildcardType: ? to ParameterizedType: Map<?,?> at 2", "INS ParameterizedType: Map<?,?> to VariableDeclarationStatement at 0"]}, {"root": "INS CastExpression to ReturnStatement at 0", "operations": ["INS QualifiedName: Constants.SUBJECT_TOKEN_KEY to MethodInvocation at 2", "INS CastExpression to ReturnStatement at 0", "INS MethodInvocation to CastExpression at 1"]}, {"root": "INS Block to EnhancedForStatement at 2", "operations": ["INS CatchClause to TryStatement at 1", "INS TryStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: localGroup to MethodInvocation at 3", "INS Block to EnhancedForStatement at 2", "INS StringLiteral: \"Group entry could not be found in UserRegistry: {}\" to MethodInvocation at 2", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleType: EntryNotFoundException to SingleVariableDeclaration at 0", "INS SimpleName: EntryNotFoundException to SimpleType: EntryNotFoundException at 0", "INS Block to CatchClause at 1", "INS SimpleName: warn to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: LOG to MethodInvocation at 0", "MOV SimpleName: isInfoEnabled to MethodInvocation at 1"]}, {"root": "UPDATE from isInfoEnabled to error", "operations": ["UPD SimpleName: isInfoEnabled from isInfoEnabled to error"]}, {"root": "UPDATE from info to warn", "operations": ["UPD SimpleName: info from info to warn"]}, {"root": "INS StringLiteral: \"GroupIDs from mapping will be used instead of UserRegistry mapping for user: {}\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"GroupIDs from mapping will be used instead of UserRegistry mapping for user: {}\" to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "UPDATE from wa to success", "operations": ["UPD SimpleName: wa from wa to success"]}, {"root": "UPDATE from LOG to TAIResult", "operations": ["UPD SimpleName: LOG from LOG to TAIResult"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: LOG to MethodInvocation at 0", "MOV SimpleName: isDebugEnabled to MethodInvocation at 1"]}, {"root": "UPDATE from isDebugEnabled to create", "operations": ["UPD SimpleName: isDebugEnabled from isDebugEnabled to create"]}, {"root": "UPDATE from HttpServletRequest to SigninHandler", "operations": ["UPD SimpleName: HttpServletRequest from HttpServletRequest to SigninHandler"]}, {"root": "MOVE from SimpleType: SigninHandler", "operations": ["MOV SimpleName: HttpServletRequest to SimpleType: SigninHandler at 0"]}, {"root": "UPDATE from LOG to signinHandler", "operations": ["UPD SimpleName: LOG from LOG to signinHandler"]}, {"root": "UPDATE from debug to handleRequest", "operations": ["UPD SimpleName: debug from debug to handleRequest", "UPD SimpleName: handleSignIn from handleSignIn to handleRequest"]}, {"root": "INS SimpleName: req to MethodInvocation at 2", "operations": ["INS SimpleName: req to MethodInvocation at 2"]}, {"root": "INS SimpleName: resp to MethodInvocation at 3", "operations": ["INS SimpleName: resp to MethodInvocation at 3"]}, {"root": "UPDATE from wa to taiResult", "operations": ["UPD SimpleName: wa from wa to taiResult"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: warn to MethodInvocation at 0"]}, {"root": "UPDATE from req to federationResponse", "operations": ["UPD SimpleName: req from req to federationResponse", "UPD SimpleName: groupIds from groupIds to federationResponse"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: req to MethodInvocation at 1"]}, {"root": "UPDATE from processor to table", "operations": ["UPD SimpleName: processor from processor to table", "UPD SimpleName: processor from processor to table"]}, {"root": "INS CastExpression to VariableDeclarationFragment at 1", "operations": ["INS WildcardType: ? to ParameterizedType: Hashtable<?,?> at 2", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleName: o to CastExpression at 1", "INS SimpleType: Hashtable to ParameterizedType: Hashtable<?,?> at 0", "INS ParameterizedType: Hashtable<?,?> to CastExpression at 0", "INS WildcardType: ? to ParameterizedType: Hashtable<?,?> at 1"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: FedizResponse to CastExpression at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: groupIds to MethodInvocation at 0"]}, {"root": "INS SimpleName: mddHandler to MethodInvocation at 0", "operations": ["INS SimpleName: mddHandler to MethodInvocation at 0"]}, {"root": "INS SimpleName: handleRequest to MethodInvocation at 1", "operations": ["INS SimpleName: handleRequest to MethodInvocation at 1"]}, {"root": "UPDATE from getParameter to resp", "operations": ["UPD SimpleName: getParameter from getParameter to resp"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: wa to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: req to MethodInvocation at 2", "MOV SimpleName: handleSignIn to MethodInvocation at 1", "MOV SimpleName: resp to MethodInvocation at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SimpleName: checkUserAuthentication to MethodInvocation at 0", "operations": ["INS SimpleName: checkUserAuthentication to MethodInvocation at 0"]}, {"root": "UPDATE from FedizProcessor to Map", "operations": ["UPD SimpleName: FedizProcessor from FedizProcessor to Map"]}, {"root": "MOVE from SimpleType: Map", "operations": ["MOV SimpleName: FedizProcessor to SimpleType: Map at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: processRequest to MethodInvocation at 1", "MOV SimpleName: processor to MethodInvocation at 0"]}, {"root": "UPDATE from processRequest to get", "operations": ["UPD SimpleName: processRequest from processRequest to get"]}, {"root": "MOVE from TryStatement", "operations": ["MOV Block to TryStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 1"]}, {"root": "MOVE from SimpleType: FedizResponse", "operations": ["MOV SimpleName: ProcessingException to SimpleType: FedizResponse at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: HttpSession to VariableDeclarationStatement at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS ExpressionStatement to Block at 0", "INS Block to TryStatement at 0", "INS TryStatement to Block at 1", "INS CatchClause to TryStatement at 1", "INS StringLiteral: \"Cannot resume with original request.\" to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS Block to CatchClause at 1", "INS SimpleName: error to MethodInvocation at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: e to MethodInvocation at 3"]}, {"root": "UPDATE from FederationProcessorImpl to Hashtable", "operations": ["UPD SimpleName: FederationProcessorImpl from FederationProcessorImpl to Hashtable"]}, {"root": "MOVE from SimpleType: Hashtable", "operations": ["MOV SimpleName: FederationProcessorImpl to SimpleType: Hashtable at 0"]}, {"root": "UPDATE from wresult to wctx", "operations": ["UPD SimpleName: wresult from wresult to wctx"]}, {"root": "UPDATE from wctx to session", "operations": ["UPD SimpleName: wctx from wctx to session"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from req to request", "operations": ["UPD SimpleName: req from req to request", "UPD SimpleName: req from req to request"]}, {"root": "UPDATE from FederationConstants.PARAM_RESULT to FederationConstants.PARAM_CONTEXT", "operations": ["UPD QualifiedName: FederationConstants.PARAM_RESULT from FederationConstants.PARAM_RESULT to FederationConstants.PARAM_CONTEXT"]}, {"root": "UPDATE from getParameter to getSession", "operations": ["UPD SimpleName: getParameter from getParameter to getSession"]}, {"root": "INS BooleanLiteral: true to MethodInvocation at 2", "operations": ["INS BooleanLiteral: true to MethodInvocation at 2"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: IOException to SingleVariableDeclaration at 0"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL NumberLiteral: 15", "DEL SimpleName: authorizedWebApps", "DEL ClassInstanceCreation", "DEL SimpleName: Set", "DEL Modifier: private", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleType: HashSet", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL Modifier: static", "DEL SimpleType: Set", "DEL ParameterizedType: HashSet<String>", "DEL SimpleName: HashSet", "DEL ParameterizedType: Set<String>", "DEL SimpleName: String"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: contextPath", "DEL ExpressionStatement", "DEL SimpleName: debug", "DEL SimpleName: add", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: authorizedWebApps", "DEL SimpleName: contextPath", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: LOG", "DEL StringLiteral: \"Registering secured context-path: {}\"", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SynchronizedStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: contains", "DEL Block", "DEL SimpleName: contextPath", "DEL ExpressionStatement", "DEL Block", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: debug", "DEL SimpleName: LOG", "DEL StringLiteral: \"De-registering secured context-path {}\"", "DEL MethodInvocation", "DEL SimpleName: authorizedWebApps", "DEL SimpleName: authorizedWebApps", "DEL SimpleName: contextPath", "DEL IfStatement", "DEL ExpressionStatement"]}, {"root": "DEL QualifiedName: FederationConstants.PARAM_ACTION", "operations": ["DEL QualifiedName: FederationConstants.PARAM_ACTION"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL SimpleName: wa", "DEL InfixExpression: ==", "DEL NullLiteral"]}, {"root": "DEL Block", "operations": ["DEL MethodInvocation", "DEL Block", "DEL ReturnStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL StringLiteral: \"Unsupported WS-Federation action [\"", "DEL MethodInvocation", "DEL QualifiedName: FederationConstants.ACTION_SIGNIN", "DEL SimpleName: wa", "DEL SimpleType: Exception", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL StringLiteral: \"]\"", "DEL Block", "DEL ThrowStatement", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL SimpleName: Exception", "DEL Block", "DEL SimpleName: equals", "DEL ReturnStatement"]}, {"root": "DEL QualifiedName: FederationConstants.PARAM_CONTEXT", "operations": ["DEL QualifiedName: FederationConstants.PARAM_CONTEXT"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL StringLiteral: \"Validating RSTR...\"", "operations": ["DEL StringLiteral: \"Validating RSTR...\""]}, {"root": "DEL SimpleName: processSigninRequest", "operations": ["DEL SimpleName: processSigninRequest"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL SimpleType: String", "operations": ["DEL SimpleName: String", "DEL SimpleType: String"]}, {"root": "DEL SimpleName: getParameter", "operations": ["DEL SimpleName: getParameter"]}, {"root": "DEL QualifiedName: FederationConstants.PARAM_ACTION", "operations": ["DEL QualifiedName: FederationConstants.PARAM_ACTION"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL SimpleName: wa", "DEL MethodInvocation", "DEL StringLiteral: \"WS-Federation action: \"", "DEL SimpleName: LOG", "DEL ParenthesizedExpression", "DEL InfixExpression: +", "DEL NullLiteral", "DEL SimpleName: negotiateValidateandEstablishTrust", "DEL Block", "DEL StringLiteral: \"<not set>\"", "DEL SimpleName: wa", "DEL Block", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL IfStatement", "DEL Modifier: public", "DEL TryStatement", "DEL ConditionalExpression", "DEL SimpleName: debug"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: req", "DEL SimpleType: IOException", "DEL ThrowStatement", "DEL SimpleType: HttpServletRequest", "DEL StringLiteral: \"Missing required parameter [wctx or wresult]\"", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL InfixExpression: !=", "DEL Block", "DEL QualifiedName: Constants.HTTP_POST_METHOD", "DEL SimpleName: req", "DEL MethodInvocation", "DEL SimpleType: Exception", "DEL SimpleName: LOG", "DEL SimpleName: WebTrustAssociationFailedException", "DEL InfixExpression: &&", "DEL SimpleName: debug", "DEL StringLiteral: \"Incorrect method GET for Sign-In-Response\"", "DEL ExpressionStatement", "DEL Block", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL Block", "DEL SimpleName: Exception", "DEL NullLiteral", "DEL SimpleName: IOException", "DEL SimpleName: equals", "DEL SimpleType: ProcessingException", "DEL MethodInvocation", "DEL SimpleName: wresult", "DEL StringLiteral: \"RSTR validated successfully\"", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleType: Exception", "DEL SimpleName: info", "DEL SimpleType: WebTrustAssociationFailedException", "DEL StringLiteral: \"Sign-In-Response received\"", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleType: Exception", "DEL Modifier: private", "DEL ThrowStatement", "DEL NullLiteral", "DEL SimpleName: wctx", "DEL SimpleName: Exception", "DEL SimpleName: LOG", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL Block", "DEL SimpleName: getMethod", "DEL Block", "DEL SimpleName: handleSignIn"]}, {"root": "DEL SimpleName: handleNoWA", "operations": ["DEL SimpleName: handleNoWA"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: HttpServletResponse", "DEL SimpleName: HttpServletResponse", "DEL SimpleName: resp", "DEL SingleVariableDeclaration"]}, {"root": "DEL SimpleType: WebTrustAssociationFailedException", "operations": ["DEL SimpleName: WebTrustAssociationFailedException", "DEL SimpleType: WebTrustAssociationFailedException"]}, {"root": "DEL Block", "operations": ["DEL ExpressionStatement", "DEL StringLiteral: \"No session found. Sending a token request\"", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: LOG", "DEL MethodInvocation", "DEL SimpleName: req", "DEL SimpleName: resp", "DEL MethodInvocation", "DEL SimpleName: debug", "DEL SimpleName: redirectToIdp"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: contains", "DEL SimpleName: getContextPath", "DEL SimpleName: authorizedWebApps", "DEL SimpleName: req", "DEL MethodInvocation", "DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL MethodInvocation", "DEL SimpleName: TAIResult", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: LOG", "DEL QualifiedName: HttpServletResponse.SC_INTERNAL_SERVER_ERROR", "DEL ExpressionStatement", "DEL SimpleName: create", "DEL StringLiteral: \"No Security Filter configured for {}\"", "DEL Block", "DEL SimpleName: result", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: getContextPath"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: removeAttribute", "DEL SimpleName: session", "DEL ExpressionStatement", "DEL QualifiedName: Constants.SECURITY_TOKEN_SESSION_ATTRIBUTE_KEY", "DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL MethodInvocation", "DEL SimpleName: redirectToIdp", "DEL SimpleName: req", "DEL MethodInvocation", "DEL SimpleName: create", "DEL ExpressionStatement", "DEL SimpleName: resp", "DEL SimpleName: TAIResult", "DEL ReturnStatement", "DEL Block", "DEL QualifiedName: HttpServletResponse.SC_FOUND"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: String", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: request", "DEL VariableDeclarationStatement", "DEL SimpleName: contextName", "DEL SimpleName: String", "DEL SimpleName: getContextPath"]}, {"root": "DEL IfStatement", "operations": ["DEL InfixExpression: ==", "DEL Block", "DEL NullLiteral", "DEL SimpleName: contextName", "DEL InfixExpression: ||", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: contextName", "DEL IfStatement", "DEL SimpleName: isEmpty", "DEL StringLiteral: \"/\"", "DEL SimpleName: contextName", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: request", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: getFederationContext", "DEL SimpleName: fedCtx", "DEL MethodInvocation"]}, {"root": "DEL SimpleType: FedizProcessor", "operations": ["DEL SimpleType: FedizProcessor"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleType: FederationProcessorImpl", "DEL ClassInstanceCreation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: fedCtx", "DEL SimpleName: federationRequest"]}, {"root": "DEL SimpleType: String", "operations": ["DEL SimpleName: String", "DEL SimpleType: String"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL MethodInvocation", "DEL ReturnStatement", "DEL InstanceofExpression", "DEL SimpleName: FederationProtocol", "DEL SimpleName: getParameter", "DEL SimpleType: FederationProtocol", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: fedConfig", "DEL IfStatement", "DEL InstanceofExpression", "DEL Block", "DEL ReturnStatement", "DEL QualifiedName: SAMLSSOConstants.SAML_RESPONSE", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getProtocol", "DEL SimpleName: request", "DEL SimpleType: SAMLProtocol", "DEL QualifiedName: FederationConstants.PARAM_RESULT", "DEL SimpleName: SAMLProtocol"]}, {"root": "DEL NumberLiteral: 1", "operations": ["DEL NumberLiteral: 1"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL InfixExpression: +", "DEL StringLiteral: \"Group list: \"", "DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL IfStatement", "DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: LOG", "DEL SimpleName: LOG", "DEL CatchClause", "DEL SimpleType: String", "DEL ReturnStatement", "DEL MethodInvocation", "DEL StringLiteral: \"No groups/roles could be mapped for user: {}\"", "DEL Block", "DEL SimpleName: error", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ParameterizedType: ArrayList<String>", "DEL StringLiteral: \"User Registry could not be loaded from JNDI context.\"", "DEL Block", "DEL SimpleName: warn", "DEL SimpleName: String", "DEL SimpleName: ArrayList", "DEL SimpleType: ArrayList", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL TryStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL SimpleName: processSigninRequest", "DEL SimpleType: ProcessingException", "DEL VariableDeclarationFragment", "DEL SimpleType: FedizRequest", "DEL ExpressionStatement", "DEL SimpleName: debug", "DEL VariableDeclarationStatement", "DEL SimpleName: federationRequest", "DEL MethodInvocation", "DEL SimpleName: responseToken", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: federationRequest", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: FedizContext", "DEL SimpleType: HttpServletRequest", "DEL ClassInstanceCreation", "DEL SimpleName: federationRequest", "DEL SimpleName: FedizRequest", "DEL MethodInvocation", "DEL SimpleName: HttpServletRequest", "DEL StringLiteral: \"FederationRequest: {}\"", "DEL SimpleType: FedizRequest", "DEL SimpleName: federationRequest", "DEL SingleVariableDeclaration", "DEL SimpleType: FedizContext", "DEL MethodInvocation", "DEL StringLiteral: \"RelayState\"", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: wa", "DEL SimpleName: fedCtx", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: setAction", "DEL SimpleName: ProcessingException", "DEL SimpleName: federationRequest", "DEL ExpressionStatement", "DEL SimpleName: setResponseToken", "DEL SimpleName: setRequest", "DEL SimpleName: FedizRequest", "DEL MethodInvocation", "DEL SimpleName: req", "DEL ExpressionStatement", "DEL MethodInvocation"]}]}}, {"FedizInterceptor_diff": {"operations": ["Move ImportDeclaration(27) into CompilationUnit(1553) at 7", "Move ImportDeclaration(37) into CompilationUnit(1553) at 22", "Move ImportDeclaration(71) into CompilationUnit(1553) at 33", "Move ImportDeclaration(73) into CompilationUnit(1553) at 33", "Move ImportDeclaration(79) into CompilationUnit(1553) at 33", "Move ImportDeclaration(87) into CompilationUnit(1553) at 33", "Insert ImportDeclaration(55) into CompilationUnit(1553) at 19", "Move MethodDeclaration(1605) into TypeDeclaration: class(1552) at 23", "Update QualifiedName: java.util.HashSet(26) to java.util.Iterator", "Insert QualifiedName: com.ibm.websphere.security.WSSecurityException(54) into ImportDeclaration(55) at 0", "Update QualifiedName: java.util.Set(36) to com.ibm.websphere.security.auth.WSSubject", "Update QualifiedName: org.apache.cxf.fediz.core.SAMLSSOConstants(70) to org.apache.cxf.fediz.core.handler.LogoutHandler", "Update QualifiedName: org.apache.cxf.fediz.core.config.FederationProtocol(72) to org.apache.cxf.fediz.core.handler.RequestHandler", "Update QualifiedName: org.apache.cxf.fediz.core.config.SAMLProtocol(78) to org.apache.cxf.fediz.core.handler.SigninHandler", "Update QualifiedName: org.apache.cxf.fediz.core.processor.FedizRequest(86) to org.apache.cxf.fediz.core.metadata.MetadataDocumentHandler", "Insert MethodDeclaration(227) into TypeDeclaration: class(1552) at 13", "Insert MethodDeclaration(247) into TypeDeclaration: class(1552) at 14", "Insert MethodDeclaration(875) into TypeDeclaration: class(1552) at 18", "Insert MethodDeclaration(1209) into TypeDeclaration: class(1552) at 21", "Move Javadoc(228) into MethodDeclaration(227) at 0", "Insert MarkerAnnotation(217) into MethodDeclaration(227) at 1", "Move Modifier: public(229) into MethodDeclaration(227) at 2", "Move Modifier: static(230) into MethodDeclaration(227) at 3", "Move PrimitiveType: void(231) into MethodDeclaration(227) at 4", "Move SimpleName: registerContext(232) into MethodDeclaration(227) at 5", "Move SingleVariableDeclaration(236) into MethodDeclaration(227) at 6", "Insert Block(226) into MethodDeclaration(227) at 7", "Move Javadoc(255) into MethodDeclaration(247) at 0", "Insert MarkerAnnotation(237) into MethodDeclaration(247) at 1", "Move Modifier: public(256) into MethodDeclaration(247) at 2", "Move Modifier: static(257) into MethodDeclaration(247) at 3", "Move PrimitiveType: void(258) into MethodDeclaration(247) at 4", "Move SimpleName: deRegisterContext(259) into MethodDeclaration(247) at 5", "Move SingleVariableDeclaration(263) into MethodDeclaration(247) at 6", "Insert Block(246) into MethodDeclaration(247) at 7", "Move MarkerAnnotation(555) into MethodDeclaration(875) at 0", "Insert Modifier: public(524) into MethodDeclaration(875) at 1", "Move SimpleType: TAIResult(558) into MethodDeclaration(875) at 2", "Insert SimpleName: negotiateValidateandEstablishTrust(527) into MethodDeclaration(875) at 3", "Move SingleVariableDeclaration(563) into MethodDeclaration(875) at 4", "Move SingleVariableDeclaration(567) into MethodDeclaration(875) at 5", "Move SimpleType: WebTrustAssociationFailedException(569) into MethodDeclaration(875) at 6", "Insert Block(874) into MethodDeclaration(875) at 7", "Insert SimpleName: checkUserAuthentication(879) into MethodDeclaration(986) at 2", "Insert SingleVariableDeclaration(1001) into MethodDeclaration(1143) at 5", "Insert Modifier: protected(1144) into MethodDeclaration(1209) at 0", "Move SimpleType: FedizResponse(1473) into MethodDeclaration(1209) at 1", "Insert SimpleName: getCachedFederationResponse(1147) into MethodDeclaration(1209) at 2", "Insert SingleVariableDeclaration(1151) into MethodDeclaration(1209) at 3", "Insert Block(1208) into MethodDeclaration(1209) at 4", "Insert PrimitiveType: boolean(1211) into MethodDeclaration(1233) at 1", "Update SimpleName: getResponseToken(1567) to checkSecurityToken", "Move Block(1317) into MethodDeclaration(1393) at 5", "Insert TagElement: @deprecated(212) into Javadoc(215) at 1", "Insert SimpleName: Deprecated(216) into MarkerAnnotation(217) at 0", "Insert TagElement: @deprecated(232) into Javadoc(235) at 1", "Insert SimpleName: Deprecated(236) into MarkerAnnotation(237) at 0", "Move ExpressionStatement(577) into Block(874) at 0", "Move VariableDeclarationStatement(585) into Block(874) at 1", "Move IfStatement(603) into Block(874) at 2", "Insert TryStatement(873) into Block(874) at 3", "Move VariableDeclarationStatement(923) into Block(985) at 0", "Move ReturnStatement(993) into Block(985) at 3", "Move SimpleType: FedizContext(1061) into SingleVariableDeclaration(1001) at 0", "Insert SimpleName: fedCtx(1000) into SingleVariableDeclaration(1001) at 1", "Insert SimpleType: Subject(1149) into SingleVariableDeclaration(1151) at 0", "Insert SimpleName: subject(1150) into SingleVariableDeclaration(1151) at 1", "Insert VariableDeclarationStatement(1163) into Block(1208) at 0", "Insert WhileStatement(1205) into Block(1208) at 1", "Move ReturnStatement(1603) into Block(1208) at 2", "Update SimpleType: FedizContext(1573) to FedizResponse", "Update SimpleName: fedConfig(1574) to response", "Insert VariableDeclarationStatement(1223) into Block(1232) at 0", "Insert ReturnStatement(1231) into Block(1232) at 1", "Move VariableDeclarationStatement(1218) into Block(1392) at 3", "Insert TryStatement(1383) into Block(1392) at 3", "Insert ExpressionStatement(1389) into Block(1392) at 4", "Insert TextElement:  Not used/needed any longer since version 1.2.0(211) into TagElement: @deprecated(212) at 0", "Insert TextElement:  Not used/needed any longer since version 1.2.0(231) into TagElement: @deprecated(232) at 0", "Insert Block(853) into TryStatement(873) at 0", "Move CatchClause(681) into TryStatement(873) at 1", "Update InfixExpression: ==(870) to !=", "Insert SimpleName: Subject(1148) into SimpleType: Subject(1149) at 0", "Insert ParameterizedType: Iterator<?>(1155) into VariableDeclarationStatement(1163) at 0", "Insert VariableDeclarationFragment(1162) into VariableDeclarationStatement(1163) at 1", "Insert MethodInvocation(1166) into WhileStatement(1205) at 0", "Insert Block(1204) into WhileStatement(1205) at 1", "Update SimpleName: FedizContext(1572) to FedizResponse", "Insert PrimitiveType: long(1217) into VariableDeclarationStatement(1223) at 0", "Insert VariableDeclarationFragment(1222) into VariableDeclarationStatement(1223) at 1", "Insert InfixExpression: >(1230) into ReturnStatement(1231) at 0", "Insert Block(1353) into TryStatement(1383) at 0", "Insert CatchClause(1377) into TryStatement(1383) at 1", "Move Block(1348) into TryStatement(1383) at 2", "Insert MethodInvocation(1388) into ExpressionStatement(1389) at 0", "Insert VariableDeclarationStatement(580) into Block(853) at 0", "Insert IfStatement(603) into Block(853) at 1", "Insert VariableDeclarationStatement(612) into Block(853) at 2", "Move IfStatement(661) into Block(853) at 3", "Insert VariableDeclarationStatement(745) into Block(853) at 4", "Insert IfStatement(762) into Block(853) at 5", "Move VariableDeclarationStatement(754) into Block(853) at 6", "Move VariableDeclarationStatement(768) into Block(853) at 7", "Insert VariableDeclarationStatement(784) into Block(853) at 8", "Insert TryStatement(803) into Block(853) at 9", "Insert ExpressionStatement(811) into Block(853) at 10", "Insert IfStatement(836) into Block(853) at 11", "Move ExpressionStatement(999) into Block(853) at 12", "Insert ExpressionStatement(847) into Block(853) at 13", "Move ReturnStatement(822) into Block(853) at 14", "Insert SimpleType: Iterator(1153) into ParameterizedType: Iterator<?>(1155) at 0", "Insert WildcardType: ?(1154) into ParameterizedType: Iterator<?>(1155) at 1", "Insert SimpleName: i(1156) into VariableDeclarationFragment(1162) at 0", "Insert MethodInvocation(1161) into VariableDeclarationFragment(1162) at 1", "Update SimpleName: req(1531) to i", "Move SimpleName: req(1531) into MethodInvocation(1166) at 0", "Update SimpleName: getParameter(1532) to hasNext", "Move SimpleName: getParameter(1532) into MethodInvocation(1166) at 1", "Insert VariableDeclarationStatement(1174) into Block(1204) at 0", "Insert IfStatement(1203) into Block(1204) at 1", "Insert SimpleName: currentTime(1218) into VariableDeclarationFragment(1222) at 0", "Insert MethodInvocation(1221) into VariableDeclarationFragment(1222) at 1", "Insert MethodInvocation(1228) into InfixExpression: >(1230) at 0", "Insert SimpleName: currentTime(1229) into InfixExpression: >(1230) at 1", "Move VariableDeclarationStatement(1230) into Block(1353) at 0", "Move IfStatement(1300) into Block(1353) at 1", "Move SingleVariableDeclaration(1321) into CatchClause(1377) at 0", "Insert Block(1376) into CatchClause(1377) at 1", "Insert SimpleName: LOG(1384) into MethodInvocation(1388) at 0", "Insert SimpleName: debug(1385) into MethodInvocation(1388) at 1", "Insert StringLiteral: \"Group list: {}\"(1386) into MethodInvocation(1388) at 2", "Insert SimpleName: groupIds(1387) into MethodInvocation(1388) at 3", "Insert SimpleType: RequestHandler(573) into VariableDeclarationStatement(580) at 0", "Insert VariableDeclarationFragment(579) into VariableDeclarationStatement(580) at 1", "Insert MethodInvocation(584) into IfStatement(603) at 0", "Insert Block(602) into IfStatement(603) at 1", "Insert SimpleType: LogoutHandler(605) into VariableDeclarationStatement(612) at 0", "Insert VariableDeclarationFragment(611) into VariableDeclarationStatement(612) at 1", "Insert MethodInvocation(616) into IfStatement(635) at 0", "Insert SimpleType: SigninHandler(637) into VariableDeclarationStatement(745) at 0", "Insert VariableDeclarationFragment(744) into VariableDeclarationStatement(745) at 1", "Insert MethodInvocation(749) into IfStatement(762) at 0", "Insert Block(761) into IfStatement(762) at 1", "Move SimpleType: String(726) into VariableDeclarationStatement(770) at 0", "Move SimpleType: String(717) into VariableDeclarationStatement(778) at 0", "Insert SimpleType: Subject(780) into VariableDeclarationStatement(784) at 0", "Insert VariableDeclarationFragment(783) into VariableDeclarationStatement(784) at 1", "Insert Block(791) into TryStatement(803) at 0", "Insert CatchClause(802) into TryStatement(803) at 1", "Insert MethodInvocation(810) into ExpressionStatement(811) at 0", "Insert InfixExpression: &&(818) into IfStatement(836) at 0", "Insert Block(819) into IfStatement(836) at 1", "Insert Block(835) into IfStatement(836) at 2", "Insert MethodInvocation(846) into ExpressionStatement(847) at 0", "Insert SimpleName: Iterator(1152) into SimpleType: Iterator(1153) at 0", "Insert MethodInvocation(1159) into MethodInvocation(1161) at 0", "Update SimpleName: setState(1530) to iterator", "Move SimpleName: setState(1530) into MethodInvocation(1161) at 1", "Insert SimpleType: Object(1168) into VariableDeclarationStatement(1174) at 0", "Insert VariableDeclarationFragment(1173) into VariableDeclarationStatement(1174) at 1", "Insert InstanceofExpression(1178) into IfStatement(1203) at 0", "Insert Block(1202) into IfStatement(1203) at 1", "Update SimpleName: request(1582) to System", "Move SimpleName: request(1582) into MethodInvocation(1221) at 0", "Update SimpleName: getParameter(1583) to currentTimeMillis", "Move SimpleName: getParameter(1583) into MethodInvocation(1221) at 1", "Insert MethodInvocation(1226) into MethodInvocation(1228) at 0", "Insert SimpleName: getTime(1227) into MethodInvocation(1228) at 1", "Insert MethodInvocation(1274) into ClassInstanceCreation(1275) at 1", "Insert ExpressionStatement(1362) into Block(1376) at 0", "Move ExpressionStatement(1312) into Block(1376) at 1", "Insert ExpressionStatement(1375) into Block(1376) at 2", "Insert SimpleName: RequestHandler(572) into SimpleType: RequestHandler(573) at 0", "Insert SimpleName: mddHandler(574) into VariableDeclarationFragment(579) at 0", "Insert ClassInstanceCreation(578) into VariableDeclarationFragment(579) at 1", "Update SimpleName: authorizedWebApps(275) to mddHandler", "Move SimpleName: authorizedWebApps(275) into MethodInvocation(584) at 0", "Update SimpleName: remove(276) to canHandleRequest", "Move SimpleName: remove(276) into MethodInvocation(584) at 1", "Update SimpleName: contextPath(277) to req", "Move SimpleName: contextPath(277) into MethodInvocation(584) at 2", "Move VariableDeclarationStatement(612) into Block(602) at 0", "Insert ReturnStatement(601) into Block(602) at 1", "Insert SimpleName: LogoutHandler(604) into SimpleType: LogoutHandler(605) at 0", "Insert SimpleName: logoutHandler(606) into VariableDeclarationFragment(611) at 0", "Insert ClassInstanceCreation(610) into VariableDeclarationFragment(611) at 1", "Update SimpleName: handleNoWA(634) to logoutHandler", "Move SimpleName: handleNoWA(634) into MethodInvocation(616) at 0", "Update SimpleName: req(635) to canHandleRequest", "Move SimpleName: req(635) into MethodInvocation(616) at 1", "Update SimpleName: resp(636) to req", "Move SimpleName: resp(636) into MethodInvocation(616) at 2", "Insert VariableDeclarationStatement(625) into Block(634) at 0", "Insert ReturnStatement(633) into Block(634) at 1", "Insert SimpleName: SigninHandler(636) into SimpleType: SigninHandler(637) at 0", "Insert SimpleName: signinHandler(638) into VariableDeclarationFragment(744) at 0", "Insert ClassInstanceCreation(743) into VariableDeclarationFragment(744) at 1", "Insert SimpleName: signinHandler(746) into MethodInvocation(749) at 0", "Insert SimpleName: canHandleRequest(747) into MethodInvocation(749) at 1", "Insert SimpleName: req(748) into MethodInvocation(749) at 2", "Move ExpressionStatement(745) into Block(761) at 0", "Move ReturnStatement(885) into Block(761) at 1", "Update SimpleName: federationResponse(748) to user", "Update SimpleName: session(762) to principal", "Update SimpleName: Exception(824) to Subject", "Move SimpleName: Exception(824) into SimpleType: Subject(780) at 0", "Insert SimpleName: subject(781) into VariableDeclarationFragment(783) at 0", "Insert NullLiteral(782) into VariableDeclarationFragment(783) at 1", "Insert ExpressionStatement(790) into Block(791) at 0", "Insert SingleVariableDeclaration(795) into CatchClause(802) at 0", "Insert Block(801) into CatchClause(802) at 1", "Insert SimpleName: LOG(804) into MethodInvocation(810) at 0", "Update SimpleName: getFederationContext(1488) to info", "Move SimpleName: getFederationContext(1488) into MethodInvocation(810) at 1", "Insert StringLiteral: \"Remote User: {}, Principal: {}, Subject {}\"(806) into MethodInvocation(810) at 2", "Update SimpleName: req(1489) to user", "Move SimpleName: req(1489) into MethodInvocation(810) at 3", "Insert SimpleName: principal(808) into MethodInvocation(810) at 4", "Insert SimpleName: subject(809) into MethodInvocation(810) at 5", "Insert InfixExpression: !=(814) into InfixExpression: &&(818) at 0", "Insert InfixExpression: !=(817) into InfixExpression: &&(818) at 1", "Move VariableDeclarationStatement(1509) into Block(835) at 0", "Insert IfStatement(834) into Block(835) at 1", "Update SimpleName: getResponseToken(1513) to redirectToIdp", "Move SimpleName: getResponseToken(1513) into MethodInvocation(846) at 0", "Move SimpleName: req(1514) into MethodInvocation(846) at 1", "Insert SimpleName: resp(844) into MethodInvocation(846) at 2", "Move SimpleName: fedCtx(1515) into MethodInvocation(846) at 3", "Update SimpleName: responseToken(1526) to subject", "Move SimpleName: responseToken(1526) into MethodInvocation(1159) at 0", "Update SimpleName: federationRequest(1529) to getPublicCredentials", "Move SimpleName: federationRequest(1529) into MethodInvocation(1159) at 1", "Insert SimpleName: Object(1167) into SimpleType: Object(1168) at 0", "Insert SimpleName: o(1169) into VariableDeclarationFragment(1173) at 0", "Insert MethodInvocation(1172) into VariableDeclarationFragment(1173) at 1", "Insert SimpleName: o(1175) into InstanceofExpression(1178) at 0", "Insert SimpleType: Hashtable(1177) into InstanceofExpression(1178) at 1", "Move VariableDeclarationStatement(1555) into Block(1202) at 0", "Move ReturnStatement(1561) into Block(1202) at 1", "Update SimpleName: fedConfig(1588) to response", "Move SimpleName: fedConfig(1588) into MethodInvocation(1226) at 0", "Update SimpleName: getProtocol(1589) to getTokenExpires", "Move SimpleName: getProtocol(1589) into MethodInvocation(1226) at 1", "Insert SimpleName: localGroups(1272) into MethodInvocation(1274) at 0", "Insert SimpleName: size(1273) into MethodInvocation(1274) at 1", "Insert MethodInvocation(1361) into ExpressionStatement(1362) at 0", "Insert MethodInvocation(1374) into ExpressionStatement(1375) at 0", "Insert SingleMemberAnnotation(264) into VariableDeclarationStatement(282) at 0", "Insert SingleMemberAnnotation(353) into VariableDeclarationStatement(371) at 0", "Insert SimpleType: MetadataDocumentHandler(576) into ClassInstanceCreation(578) at 0", "Insert SimpleName: fedCtx(577) into ClassInstanceCreation(578) at 1", "Insert PrimitiveType: boolean(585) into VariableDeclarationStatement(593) at 0", "Insert MethodInvocation(600) into ReturnStatement(601) at 0", "Insert SimpleType: LogoutHandler(608) into ClassInstanceCreation(610) at 0", "Insert SimpleName: fedCtx(609) into ClassInstanceCreation(610) at 1", "Insert PrimitiveType: boolean(617) into VariableDeclarationStatement(625) at 0", "Insert VariableDeclarationFragment(624) into VariableDeclarationStatement(625) at 1", "Insert MethodInvocation(632) into ReturnStatement(633) at 0", "Insert SimpleType: SigninHandler(640) into ClassInstanceCreation(743) at 0", "Insert SimpleName: fedCtx(641) into ClassInstanceCreation(743) at 1", "Insert AnonymousClassDeclaration(742) into ClassInstanceCreation(743) at 2", "Update SimpleName: resp(751) to getRemoteUser", "Update SimpleName: req(763) to WSSubject", "Update SimpleName: getSession(764) to getCallerPrincipal", "Insert Assignment: =(789) into ExpressionStatement(790) at 0", "Update SimpleType: HttpServletResponse(1480) to WSSecurityException", "Move SimpleType: HttpServletResponse(1480) into SingleVariableDeclaration(795) at 0", "Update SimpleName: resp(1481) to e", "Move SimpleName: resp(1481) into SingleVariableDeclaration(795) at 1", "Insert ExpressionStatement(800) into Block(801) at 0", "Insert SimpleName: principal(812) into InfixExpression: !=(814) at 0", "Insert NullLiteral(813) into InfixExpression: !=(814) at 1", "Insert SimpleName: subject(815) into InfixExpression: !=(817) at 0", "Insert NullLiteral(816) into InfixExpression: !=(817) at 1", "Move SimpleType: TAIResult(687) into VariableDeclarationStatement(827) at 0", "Insert InfixExpression: !=(830) into IfStatement(834) at 0", "Insert Block(833) into IfStatement(834) at 1", "Insert MethodInvocation(937) into IfStatement(978) at 0", "Update SimpleName: req(1539) to i", "Move SimpleName: req(1539) into MethodInvocation(1172) at 0", "Update SimpleName: LOG(1542) to next", "Move SimpleName: LOG(1542) into MethodInvocation(1172) at 1", "Insert SimpleName: Hashtable(1176) into SimpleType: Hashtable(1177) at 0", "Insert ParameterizedType: Map<?,?>(1183) into VariableDeclarationStatement(1193) at 0", "Insert CastExpression(1200) into ReturnStatement(1201) at 0", "Insert Block(1349) into EnhancedForStatement(1350) at 2", "Move SimpleName: LOG(1301) into MethodInvocation(1361) at 0", "Update SimpleName: isInfoEnabled(1302) to error", "Move SimpleName: isInfoEnabled(1302) into MethodInvocation(1361) at 1", "Insert StringLiteral: \"User Registry could not be loaded via JNDI context.\"(1360) into MethodInvocation(1361) at 2", "Update SimpleName: info(1305) to warn", "Insert StringLiteral: \"GroupIDs from mapping will be used instead of UserRegistry mapping for user: {}\"(1365) into MethodInvocation(1369) at 2", "Move MethodInvocation(1332) into MethodInvocation(1369) at 3", "Insert SimpleName: groupIds(1371) into MethodInvocation(1374) at 0", "Insert SimpleName: addAll(1372) into MethodInvocation(1374) at 1", "Insert SimpleName: localGroups(1373) into MethodInvocation(1374) at 2", "Insert SimpleName: SuppressWarnings(262) into SingleMemberAnnotation(264) at 0", "Insert StringLiteral: \"deprecation\"(263) into SingleMemberAnnotation(264) at 1", "Insert SimpleName: SuppressWarnings(351) into SingleMemberAnnotation(353) at 0", "Insert StringLiteral: \"deprecation\"(352) into SingleMemberAnnotation(353) at 1", "Insert SimpleName: MetadataDocumentHandler(575) into SimpleType: MetadataDocumentHandler(576) at 0", "Update SimpleName: wa(606) to success", "Update SimpleName: LOG(613) to TAIResult", "Move SimpleName: LOG(613) into MethodInvocation(600) at 0", "Update SimpleName: isDebugEnabled(614) to create", "Move SimpleName: isDebugEnabled(614) into MethodInvocation(600) at 1", "Insert ConditionalExpression(599) into MethodInvocation(600) at 2", "Insert SimpleName: LogoutHandler(607) into SimpleType: LogoutHandler(608) at 0", "Insert SimpleName: success(618) into VariableDeclarationFragment(624) at 0", "Insert MethodInvocation(623) into VariableDeclarationFragment(624) at 1", "Insert SimpleName: TAIResult(626) into MethodInvocation(632) at 0", "Insert SimpleName: create(627) into MethodInvocation(632) at 1", "Insert ConditionalExpression(631) into MethodInvocation(632) at 2", "Update SimpleName: HttpServletRequest(689) to SigninHandler", "Move SimpleName: HttpServletRequest(689) into SimpleType: SigninHandler(640) at 0", "Insert MethodDeclaration(741) into AnonymousClassDeclaration(742) at 0", "Update SimpleName: LOG(741) to signinHandler", "Update SimpleName: debug(742) to handleRequest", "Insert SimpleName: req(752) into MethodInvocation(754) at 2", "Insert SimpleName: resp(753) into MethodInvocation(754) at 3", "Insert SimpleName: subject(785) into Assignment: =(789) at 0", "Insert MethodInvocation(788) into Assignment: =(789) at 1", "Update SimpleName: HttpServletResponse(1479) to WSSecurityException", "Insert MethodInvocation(799) into ExpressionStatement(800) at 0", "Update SimpleName: wa(1503) to taiResult", "Insert SimpleName: taiResult(828) into InfixExpression: !=(830) at 0", "Insert NullLiteral(829) into InfixExpression: !=(830) at 1", "Insert ReturnStatement(832) into Block(833) at 0", "Update SimpleName: warn(978) to checkSecurityToken", "Move SimpleName: warn(978) into MethodInvocation(937) at 0", "Update SimpleName: req(980) to federationResponse", "Move SimpleName: req(980) into MethodInvocation(937) at 1", "Insert SimpleType: Map(1180) into ParameterizedType: Map<?,?>(1183) at 0", "Insert WildcardType: ?(1181) into ParameterizedType: Map<?,?>(1183) at 1", "Insert WildcardType: ?(1182) into ParameterizedType: Map<?,?>(1183) at 2", "Update SimpleName: processor(1550) to table", "Insert CastExpression(1191) into VariableDeclarationFragment(1192) at 1", "Move SimpleType: FedizResponse(747) into CastExpression(1200) at 0", "Insert MethodInvocation(1199) into CastExpression(1200) at 1", "Insert TryStatement(1348) into Block(1349) at 0", "Update SimpleName: groupIds(1307) to federationResponse", "Move SimpleName: groupIds(1307) into MethodInvocation(1368) at 0", "Update SimpleName: toString(1308) to getUsername", "Move SimpleName: toString(1308) into MethodInvocation(1368) at 1", "Insert SimpleName: mddHandler(587) into MethodInvocation(591) at 0", "Insert SimpleName: handleRequest(588) into MethodInvocation(591) at 1", "Update SimpleName: getParameter(608) to resp", "Insert SimpleName: success(596) into ConditionalExpression(599) at 0", "Insert QualifiedName: HttpServletResponse.SC_OK(597) into ConditionalExpression(599) at 1", "Insert QualifiedName: HttpServletResponse.SC_INTERNAL_SERVER_ERROR(598) into ConditionalExpression(599) at 2", "Update SimpleName: wa(642) to logoutHandler", "Move SimpleName: wa(642) into MethodInvocation(623) at 0", "Update SimpleName: handleSignIn(644) to handleRequest", "Move SimpleName: handleSignIn(644) into MethodInvocation(623) at 1", "Move SimpleName: req(645) into MethodInvocation(623) at 2", "Move SimpleName: resp(646) into MethodInvocation(623) at 3", "Insert SimpleName: success(628) into ConditionalExpression(631) at 0", "Insert QualifiedName: HttpServletResponse.SC_OK(629) into ConditionalExpression(631) at 1", "Insert QualifiedName: HttpServletResponse.SC_INTERNAL_SERVER_ERROR(630) into ConditionalExpression(631) at 2", "Insert MarkerAnnotation(643) into MethodDeclaration(741) at 0", "Insert Modifier: public(644) into MethodDeclaration(741) at 1", "Insert PrimitiveType: void(645) into MethodDeclaration(741) at 2", "Insert SimpleName: resumeRequest(646) into MethodDeclaration(741) at 3", "Move SingleVariableDeclaration(1571) into MethodDeclaration(741) at 4", "Move SingleVariableDeclaration(696) into MethodDeclaration(741) at 5", "Insert SingleVariableDeclaration(658) into MethodDeclaration(741) at 6", "Insert Block(740) into MethodDeclaration(741) at 7", "Insert SimpleName: WSSubject(786) into MethodInvocation(788) at 0", "Insert SimpleName: getCallerSubject(787) into MethodInvocation(788) at 1", "Insert SimpleName: LOG(796) into MethodInvocation(799) at 0", "Insert SimpleName: error(797) into MethodInvocation(799) at 1", "Insert StringLiteral: \"Could not read subject\"(798) into MethodInvocation(799) at 2", "Insert SimpleName: checkUserAuthentication(823) into MethodInvocation(825) at 0", "Insert SimpleName: taiResult(831) into ReturnStatement(832) at 0", "Update SimpleName: FedizProcessor(1548) to Map", "Move SimpleName: FedizProcessor(1548) into SimpleType: Map(1180) at 0", "Insert ParameterizedType: Hashtable<?,?>(1189) into CastExpression(1191) at 0", "Insert SimpleName: o(1190) into CastExpression(1191) at 1", "Update SimpleName: processor(1556) to table", "Move SimpleName: processor(1556) into MethodInvocation(1199) at 0", "Update SimpleName: processRequest(1557) to get", "Move SimpleName: processRequest(1557) into MethodInvocation(1199) at 1", "Insert QualifiedName: Constants.SUBJECT_TOKEN_KEY(1198) into MethodInvocation(1199) at 2", "Move Block(1297) into TryStatement(1348) at 0", "Insert CatchClause(1347) into TryStatement(1348) at 1", "Insert SimpleName: Override(642) into MarkerAnnotation(643) at 0", "Update SimpleName: resp(695) to response", "Insert SimpleType: FedizResponse(656) into SingleVariableDeclaration(658) at 0", "Insert SimpleName: federationResponse(657) into SingleVariableDeclaration(658) at 1", "Move VariableDeclarationStatement(724) into Block(740) at 0", "Move VariableDeclarationStatement(733) into Block(740) at 1", "Move ExpressionStatement(774) into Block(740) at 2", "Move VariableDeclarationStatement(786) into Block(740) at 3", "Move IfStatement(817) into Block(740) at 4", "Insert SimpleType: Hashtable(1186) into ParameterizedType: Hashtable<?,?>(1189) at 0", "Insert WildcardType: ?(1187) into ParameterizedType: Hashtable<?,?>(1189) at 1", "Insert WildcardType: ?(1188) into ParameterizedType: Hashtable<?,?>(1189) at 2", "Insert SingleVariableDeclaration(1339) into CatchClause(1347) at 0", "Insert Block(1346) into CatchClause(1347) at 1", "Update SimpleName: ProcessingException(697) to FedizResponse", "Move SimpleName: ProcessingException(697) into SimpleType: FedizResponse(656) at 0", "Move SimpleType: String(605) into VariableDeclarationStatement(667) at 0", "Move SimpleType: HttpSession(761) into VariableDeclarationStatement(676) at 0", "Insert Block(738) into IfStatement(739) at 1", "Update SimpleName: FederationProcessorImpl(1551) to Hashtable", "Move SimpleName: FederationProcessorImpl(1551) into SimpleType: Hashtable(1186) at 0", "Insert SimpleType: EntryNotFoundException(1337) into SingleVariableDeclaration(1339) at 0", "Insert SimpleName: e(1338) into SingleVariableDeclaration(1339) at 1", "Insert ExpressionStatement(1345) into Block(1346) at 0", "Update SimpleName: wresult(718) to wctx", "Update SimpleName: wctx(727) to session", "Move ExpressionStatement(803) into Block(738) at 0", "Insert TryStatement(732) into Block(738) at 1", "Move ExpressionStatement(815) into Block(738) at 2", "Insert SimpleName: EntryNotFoundException(1336) into SimpleType: EntryNotFoundException(1337) at 0", "Insert MethodInvocation(1344) into ExpressionStatement(1345) at 0", "Update SimpleName: req(719) to request", "Update QualifiedName: FederationConstants.PARAM_RESULT(721) to FederationConstants.PARAM_CONTEXT", "Update SimpleName: req(728) to request", "Update SimpleName: getParameter(729) to getSession", "Insert BooleanLiteral: true(673) into MethodInvocation(674) at 2", "Insert Block(719) into TryStatement(732) at 0", "Insert CatchClause(731) into TryStatement(732) at 1", "Insert SimpleName: LOG(1340) into MethodInvocation(1344) at 0", "Insert SimpleName: warn(1341) into MethodInvocation(1344) at 1", "Insert StringLiteral: \"Group entry could not be found in UserRegistry: {}\"(1342) into MethodInvocation(1344) at 2", "Insert SimpleName: localGroup(1343) into MethodInvocation(1344) at 3", "Move ExpressionStatement(810) into Block(719) at 0", "Insert SingleVariableDeclaration(723) into CatchClause(731) at 0", "Insert Block(730) into CatchClause(731) at 1", "Move SimpleType: IOException(854) into SingleVariableDeclaration(723) at 0", "Insert SimpleName: e(722) into SingleVariableDeclaration(723) at 1", "Insert ExpressionStatement(729) into Block(730) at 0", "Update SimpleName: resp(804) to response", "Insert MethodInvocation(728) into ExpressionStatement(729) at 0", "Insert SimpleName: LOG(724) into MethodInvocation(728) at 0", "Insert SimpleName: error(725) into MethodInvocation(728) at 1", "Insert StringLiteral: \"Cannot resume with original request.\"(726) into MethodInvocation(728) at 2", "Insert SimpleName: e(727) into MethodInvocation(728) at 3", "Delete Modifier: private(126)", "Delete Modifier: static(127)", "Delete SimpleName: Set(128)", "Delete SimpleType: Set(129)", "Delete SimpleName: String(130)", "Delete SimpleType: String(131)", "Delete ParameterizedType: Set<String>(132)", "Delete SimpleName: authorizedWebApps(133)", "Delete SimpleName: HashSet(134)", "Delete SimpleType: HashSet(135)", "Delete SimpleName: String(136)", "Delete SimpleType: String(137)", "Delete ParameterizedType: HashSet<String>(138)", "Delete NumberLiteral: 15(139)", "Delete ClassInstanceCreation(140)", "Delete VariableDeclarationFragment(141)", "Delete FieldDeclaration(142)", "Delete SimpleName: LOG(237)", "Delete SimpleName: debug(238)", "Delete StringLiteral: \"Registering secured context-path: {}\"(239)", "Delete SimpleName: contextPath(240)", "Delete MethodInvocation(241)", "Delete ExpressionStatement(242)", "Delete SimpleName: authorizedWebApps(243)", "Delete SimpleName: add(244)", "Delete SimpleName: contextPath(245)", "Delete MethodInvocation(246)", "Delete ExpressionStatement(247)", "Delete Block(248)", "Delete MethodDeclaration(249)", "Delete SimpleName: authorizedWebApps(264)", "Delete SimpleName: contains(265)", "Delete SimpleName: contextPath(266)", "Delete MethodInvocation(267)", "Delete SimpleName: LOG(268)", "Delete SimpleName: debug(269)", "Delete StringLiteral: \"De-registering secured context-path {}\"(270)", "Delete SimpleName: contextPath(271)", "Delete MethodInvocation(272)", "Delete ExpressionStatement(273)", "Delete SimpleName: authorizedWebApps(274)", "Delete MethodInvocation(278)", "Delete ExpressionStatement(279)", "Delete Block(280)", "Delete SynchronizedStatement(281)", "Delete Block(282)", "Delete IfStatement(283)", "Delete Block(284)", "Delete MethodDeclaration(285)", "Delete QualifiedName: FederationConstants.PARAM_ACTION(609)", "Delete SimpleName: wa(631)", "Delete NullLiteral(632)", "Delete InfixExpression: ==(633)", "Delete MethodInvocation(637)", "Delete ReturnStatement(638)", "Delete Block(639)", "Delete QualifiedName: FederationConstants.ACTION_SIGNIN(640)", "Delete SimpleName: equals(641)", "Delete MethodInvocation(643)", "Delete MethodInvocation(647)", "Delete ReturnStatement(648)", "Delete Block(649)", "Delete SimpleName: Exception(650)", "Delete SimpleType: Exception(651)", "Delete StringLiteral: \"Unsupported WS-Federation action [\"(652)", "Delete SimpleName: wa(653)", "Delete StringLiteral: \"]\"(654)", "Delete InfixExpression: +(655)", "Delete ClassInstanceCreation(656)", "Delete ThrowStatement(657)", "Delete Block(658)", "Delete IfStatement(659)", "Delete QualifiedName: FederationConstants.PARAM_CONTEXT(730)", "Delete Block(816)", "Delete StringLiteral: \"Validating RSTR...\"(743)", "Delete SimpleName: processSigninRequest(749)", "Delete BooleanLiteral: true(765)", "Delete SimpleName: String(1501)", "Delete SimpleType: String(1502)", "Delete SimpleName: getParameter(1505)", "Delete QualifiedName: FederationConstants.PARAM_ACTION(1506)", "Delete Modifier: public(556)", "Delete SimpleName: negotiateValidateandEstablishTrust(559)", "Delete MethodInvocation(615)", "Delete SimpleName: LOG(616)", "Delete SimpleName: debug(617)", "Delete StringLiteral: \"WS-Federation action: \"(618)", "Delete SimpleName: wa(619)", "Delete NullLiteral(620)", "Delete InfixExpression: ==(621)", "Delete StringLiteral: \"<not set>\"(622)", "Delete SimpleName: wa(623)", "Delete ConditionalExpression(624)", "Delete ParenthesizedExpression(625)", "Delete InfixExpression: +(626)", "Delete MethodInvocation(627)", "Delete ExpressionStatement(628)", "Delete Block(629)", "Delete IfStatement(630)", "Delete Block(662)", "Delete TryStatement(682)", "Delete Block(683)", "Delete MethodDeclaration(684)", "Delete Modifier: private(685)", "Delete SimpleName: handleSignIn(688)", "Delete SimpleType: HttpServletRequest(690)", "Delete SimpleName: req(691)", "Delete SingleVariableDeclaration(692)", "Delete SimpleType: ProcessingException(698)", "Delete SimpleName: IOException(699)", "Delete SimpleType: IOException(700)", "Delete SimpleName: WebTrustAssociationFailedException(701)", "Delete SimpleType: WebTrustAssociationFailedException(702)", "Delete SimpleName: Exception(703)", "Delete SimpleType: Exception(704)", "Delete SimpleName: req(705)", "Delete SimpleName: getMethod(706)", "Delete MethodInvocation(707)", "Delete SimpleName: equals(708)", "Delete QualifiedName: Constants.HTTP_POST_METHOD(709)", "Delete MethodInvocation(710)", "Delete SimpleName: LOG(711)", "Delete SimpleName: debug(712)", "Delete StringLiteral: \"Sign-In-Response received\"(713)", "Delete MethodInvocation(714)", "Delete ExpressionStatement(715)", "Delete SimpleName: wresult(734)", "Delete NullLiteral(735)", "Delete InfixExpression: !=(736)", "Delete SimpleName: wctx(737)", "Delete NullLiteral(738)", "Delete InfixExpression: !=(739)", "Delete InfixExpression: &&(740)", "Delete SimpleName: LOG(755)", "Delete SimpleName: info(756)", "Delete StringLiteral: \"RSTR validated successfully\"(757)", "Delete MethodInvocation(758)", "Delete ExpressionStatement(759)", "Delete Block(823)", "Delete SimpleType: Exception(825)", "Delete StringLiteral: \"Missing required parameter [wctx or wresult]\"(826)", "Delete ClassInstanceCreation(827)", "Delete ThrowStatement(828)", "Delete Block(829)", "Delete IfStatement(830)", "Delete Block(831)", "Delete SimpleName: Exception(832)", "Delete SimpleType: Exception(833)", "Delete StringLiteral: \"Incorrect method GET for Sign-In-Response\"(834)", "Delete ClassInstanceCreation(835)", "Delete ThrowStatement(836)", "Delete Block(837)", "Delete IfStatement(838)", "Delete Block(839)", "Delete MethodDeclaration(840)", "Delete SimpleName: handleNoWA(844)", "Delete SimpleName: HttpServletResponse(849)", "Delete SimpleType: HttpServletResponse(850)", "Delete SimpleName: resp(851)", "Delete SingleVariableDeclaration(852)", "Delete SimpleName: WebTrustAssociationFailedException(855)", "Delete SimpleType: WebTrustAssociationFailedException(856)", "Delete SimpleName: LOG(871)", "Delete SimpleName: debug(872)", "Delete StringLiteral: \"No session found. Sending a token request\"(873)", "Delete MethodInvocation(874)", "Delete ExpressionStatement(875)", "Delete SimpleName: redirectToIdp(876)", "Delete SimpleName: req(877)", "Delete SimpleName: resp(878)", "Delete MethodInvocation(879)", "Delete ExpressionStatement(880)", "Delete Block(886)", "Delete SimpleName: authorizedWebApps(924)", "Delete SimpleName: contains(925)", "Delete SimpleName: req(926)", "Delete SimpleName: getContextPath(927)", "Delete MethodInvocation(928)", "Delete MethodInvocation(929)", "Delete SimpleName: result(970)", "Delete SimpleName: TAIResult(971)", "Delete SimpleName: create(972)", "Delete QualifiedName: HttpServletResponse.SC_INTERNAL_SERVER_ERROR(973)", "Delete MethodInvocation(974)", "Delete Assignment: =(975)", "Delete ExpressionStatement(976)", "Delete SimpleName: LOG(977)", "Delete StringLiteral: \"No Security Filter configured for {}\"(979)", "Delete SimpleName: getContextPath(981)", "Delete MethodInvocation(982)", "Delete MethodInvocation(983)", "Delete ExpressionStatement(984)", "Delete Block(985)", "Delete SimpleName: session(987)", "Delete SimpleName: removeAttribute(988)", "Delete QualifiedName: Constants.SECURITY_TOKEN_SESSION_ATTRIBUTE_KEY(989)", "Delete MethodInvocation(990)", "Delete ExpressionStatement(991)", "Delete SimpleName: redirectToIdp(1000)", "Delete SimpleName: req(1001)", "Delete SimpleName: resp(1002)", "Delete MethodInvocation(1003)", "Delete ExpressionStatement(1004)", "Delete SimpleName: TAIResult(1005)", "Delete SimpleName: create(1006)", "Delete QualifiedName: HttpServletResponse.SC_FOUND(1007)", "Delete MethodInvocation(1008)", "Delete ReturnStatement(1009)", "Delete Block(1010)", "Delete SimpleName: String(1039)", "Delete SimpleType: String(1040)", "Delete SimpleName: contextName(1041)", "Delete SimpleName: request(1042)", "Delete SimpleName: getContextPath(1043)", "Delete MethodInvocation(1044)", "Delete VariableDeclarationFragment(1045)", "Delete VariableDeclarationStatement(1046)", "Delete SimpleName: contextName(1047)", "Delete NullLiteral(1048)", "Delete InfixExpression: ==(1049)", "Delete SimpleName: contextName(1050)", "Delete SimpleName: isEmpty(1051)", "Delete MethodInvocation(1052)", "Delete InfixExpression: ||(1053)", "Delete SimpleName: contextName(1054)", "Delete StringLiteral: \"/\"(1055)", "Delete Assignment: =(1056)", "Delete ExpressionStatement(1057)", "Delete Block(1058)", "Delete IfStatement(1059)", "Delete SimpleName: fedCtx(1062)", "Delete SimpleName: getFederationContext(1063)", "Delete SimpleName: request(1064)", "Delete MethodInvocation(1065)", "Delete VariableDeclarationFragment(1066)", "Delete VariableDeclarationStatement(1067)", "Delete SimpleType: FedizProcessor(1549)", "Delete SimpleType: FederationProcessorImpl(1552)", "Delete ClassInstanceCreation(1553)", "Delete SimpleName: federationRequest(1558)", "Delete SimpleName: fedCtx(1559)", "Delete MethodInvocation(1560)", "Delete SimpleName: String(1565)", "Delete SimpleType: String(1566)", "Delete SimpleName: fedConfig(1576)", "Delete SimpleName: getProtocol(1577)", "Delete MethodInvocation(1578)", "Delete SimpleName: FederationProtocol(1579)", "Delete SimpleType: FederationProtocol(1580)", "Delete InstanceofExpression(1581)", "Delete QualifiedName: FederationConstants.PARAM_RESULT(1584)", "Delete MethodInvocation(1585)", "Delete ReturnStatement(1586)", "Delete Block(1587)", "Delete MethodInvocation(1590)", "Delete SimpleName: SAMLProtocol(1591)", "Delete SimpleType: SAMLProtocol(1592)", "Delete InstanceofExpression(1593)", "Delete SimpleName: request(1594)", "Delete SimpleName: getParameter(1595)", "Delete QualifiedName: SAMLSSOConstants.SAML_RESPONSE(1596)", "Delete MethodInvocation(1597)", "Delete ReturnStatement(1598)", "Delete Block(1599)", "Delete IfStatement(1600)", "Delete IfStatement(1601)", "Delete NumberLiteral: 1(1256)", "Delete StringLiteral: \"Group list: \"(1306)", "Delete MethodInvocation(1309)", "Delete InfixExpression: +(1310)", "Delete MethodInvocation(1303)", "Delete Block(1313)", "Delete IfStatement(1314)", "Delete SimpleName: LOG(1322)", "Delete SimpleName: error(1323)", "Delete StringLiteral: \"User Registry could not be loaded from JNDI context.\"(1324)", "Delete MethodInvocation(1325)", "Delete ExpressionStatement(1326)", "Delete SimpleName: LOG(1327)", "Delete SimpleName: warn(1328)", "Delete StringLiteral: \"No groups/roles could be mapped for user: {}\"(1329)", "Delete MethodInvocation(1333)", "Delete ExpressionStatement(1334)", "Delete SimpleName: ArrayList(1335)", "Delete SimpleType: ArrayList(1336)", "Delete SimpleName: String(1337)", "Delete SimpleType: String(1338)", "Delete ParameterizedType: ArrayList<String>(1339)", "Delete ClassInstanceCreation(1340)", "Delete ReturnStatement(1341)", "Delete Block(1342)", "Delete CatchClause(1343)", "Delete TryStatement(1349)", "Delete Block(1350)", "Delete Modifier: public(1471)", "Delete SimpleName: processSigninRequest(1474)", "Delete SimpleName: HttpServletRequest(1475)", "Delete SimpleType: HttpServletRequest(1476)", "Delete SimpleName: req(1477)", "Delete SingleVariableDeclaration(1478)", "Delete SingleVariableDeclaration(1482)", "Delete SimpleName: ProcessingException(1483)", "Delete SimpleType: ProcessingException(1484)", "Delete SimpleName: FedizContext(1485)", "Delete SimpleType: FedizContext(1486)", "Delete SimpleName: fedCtx(1487)", "Delete MethodInvocation(1490)", "Delete VariableDeclarationFragment(1491)", "Delete VariableDeclarationStatement(1492)", "Delete SimpleName: FedizRequest(1493)", "Delete SimpleType: FedizRequest(1494)", "Delete SimpleName: federationRequest(1495)", "Delete SimpleName: FedizRequest(1496)", "Delete SimpleType: FedizRequest(1497)", "Delete ClassInstanceCreation(1498)", "Delete VariableDeclarationFragment(1499)", "Delete VariableDeclarationStatement(1500)", "Delete SimpleName: String(1510)", "Delete SimpleType: String(1511)", "Delete SimpleName: responseToken(1512)", "Delete MethodInvocation(1516)", "Delete VariableDeclarationFragment(1517)", "Delete VariableDeclarationStatement(1518)", "Delete SimpleName: federationRequest(1519)", "Delete SimpleName: setAction(1520)", "Delete SimpleName: wa(1521)", "Delete MethodInvocation(1522)", "Delete ExpressionStatement(1523)", "Delete SimpleName: federationRequest(1524)", "Delete SimpleName: setResponseToken(1525)", "Delete MethodInvocation(1527)", "Delete ExpressionStatement(1528)", "Delete StringLiteral: \"RelayState\"(1533)", "Delete MethodInvocation(1534)", "Delete MethodInvocation(1535)", "Delete ExpressionStatement(1536)", "Delete SimpleName: federationRequest(1537)", "Delete SimpleName: setRequest(1538)", "Delete MethodInvocation(1540)", "Delete ExpressionStatement(1541)", "Delete SimpleName: debug(1543)", "Delete StringLiteral: \"FederationRequest: {}\"(1544)", "Delete SimpleName: federationRequest(1545)", "Delete MethodInvocation(1546)", "Delete ExpressionStatement(1547)", "Delete Block(1562)", "Delete MethodDeclaration(1563)"]}}, {"SecurityContextTTLChecker_cluster": {"actions": [{"root": "INS MarkerAnnotation to TypeDeclaration: class at 0", "operations": ["INS MarkerAnnotation to TypeDeclaration: class at 0", "INS SimpleName: Deprecated to MarkerAnnotation at 0"]}]}}, {"SecurityContextTTLChecker_diff": {"operations": ["Insert MarkerAnnotation(65) into TypeDeclaration: class(431) at 0", "Insert SimpleName: Deprecated(64) into MarkerAnnotation(65) at 0"]}}], "commit_stats": [{"total_files": 13, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "True"}]}