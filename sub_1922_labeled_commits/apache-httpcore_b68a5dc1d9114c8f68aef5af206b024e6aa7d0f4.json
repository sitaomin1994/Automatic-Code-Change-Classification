{"application": "apache-httpcore", "csha": "b68a5dc1d9114c8f68aef5af206b024e6aa7d0f4", "files": [{"HttpClientConnection_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 4", "operations": ["INS TextElement:  true to TagElement: @code at 0", "INS MethodRefParameter to MethodRef at 1", "INS MethodDeclaration to TypeDeclaration: interface at 4", "INS TagElement: @since to Javadoc at 3", "INS SimpleType: HttpRequest to MethodRefParameter at 0", "INS SimpleName: HttpRequest to SimpleType: HttpRequest at 0", "INS TextElement:    to TagElement: @return at 0", "INS MethodRef to TagElement: @see at 0", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS TagElement: @see to Javadoc at 2", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: isConsistent to MethodDeclaration at 2", "INS TextElement: in a inconsistent state and cannot be re-used. to TagElement: @return at 3", "INS SimpleName: terminateRequest to MethodRef at 0", "INS TagElement to Javadoc at 0", "INS TextElement: Checks whether this connection is in a consistent state. to TagElement at 0", "INS TagElement: @return to Javadoc at 1", "INS TextElement:  5.0 to TagElement: @since at 0", "INS TagElement: @code to TagElement: @return at 1", "INS TextElement:  if the connection is known to be to TagElement: @return at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 6", "operations": ["INS SimpleType: HttpException to MethodDeclaration at 4", "INS MethodRef to TagElement: @see at 0", "INS MethodDeclaration to TypeDeclaration: interface at 6", "INS SimpleName: terminateRequest to MethodDeclaration at 2", "INS TextElement: the connection in a inconsistent state. to TagElement at 1", "INS SimpleType: HttpRequest to SingleVariableDeclaration at 0", "INS SimpleName: request to TagElement: @param at 0", "INS SimpleName: isConsistent to MethodRef at 0", "INS TagElement: @since to Javadoc at 5", "INS TagElement: @throws to Javadoc at 2", "INS TextElement:  the request to be terminated prematurely. to TagElement: @param at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS TextElement: Terminates request prematurely potentially leaving to TagElement at 0", "INS SimpleName: request to SingleVariableDeclaration at 1", "INS SimpleName: HttpRequest to SimpleType: HttpRequest at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: IOException to TagElement: @throws at 0", "INS TagElement: @param to Javadoc at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS TextElement:  5.0 to TagElement: @since at 0", "INS TagElement: @throws to Javadoc at 3", "INS TagElement to Javadoc at 0", "INS SimpleName: HttpException to TagElement: @throws at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: HttpException to SimpleType: HttpException at 0", "INS SimpleType: IOException to MethodDeclaration at 5", "INS TagElement: @see to Javadoc at 4"]}]}}, {"HttpClientConnection_diff": {"operations": ["Insert MethodDeclaration(33) into TypeDeclaration: interface(153) at 4", "Insert MethodDeclaration(83) into TypeDeclaration: interface(153) at 6", "Insert Javadoc(30) into MethodDeclaration(33) at 0", "Insert PrimitiveType: boolean(31) into MethodDeclaration(33) at 1", "Insert SimpleName: isConsistent(32) into MethodDeclaration(33) at 2", "Insert Javadoc(72) into MethodDeclaration(83) at 0", "Insert PrimitiveType: void(73) into MethodDeclaration(83) at 1", "Insert SimpleName: terminateRequest(74) into MethodDeclaration(83) at 2", "Insert SingleVariableDeclaration(78) into MethodDeclaration(83) at 3", "Insert SimpleType: HttpException(80) into MethodDeclaration(83) at 4", "Insert SimpleType: IOException(82) into MethodDeclaration(83) at 5", "Insert TagElement(15) into Javadoc(30) at 0", "Insert TagElement: @return(21) into Javadoc(30) at 1", "Insert TagElement: @see(27) into Javadoc(30) at 2", "Insert TagElement: @since(29) into Javadoc(30) at 3", "Insert TagElement(59) into Javadoc(72) at 0", "Insert TagElement: @param(62) into Javadoc(72) at 1", "Insert TagElement: @throws(64) into Javadoc(72) at 2", "Insert TagElement: @throws(66) into Javadoc(72) at 3", "Insert TagElement: @see(69) into Javadoc(72) at 4", "Insert TagElement: @since(71) into Javadoc(72) at 5", "Insert SimpleType: HttpRequest(76) into SingleVariableDeclaration(78) at 0", "Insert SimpleName: request(77) into SingleVariableDeclaration(78) at 1", "Insert SimpleName: HttpException(79) into SimpleType: HttpException(80) at 0", "Insert SimpleName: IOException(81) into SimpleType: IOException(82) at 0", "Insert TextElement: Checks whether this connection is in a consistent state.(14) into TagElement(15) at 0", "Insert TextElement:   (16) into TagElement: @return(21) at 0", "Insert TagElement: @code(18) into TagElement: @return(21) at 1", "Insert TextElement:  if the connection is known to be(19) into TagElement: @return(21) at 2", "Insert TextElement: in a inconsistent state and cannot be re-used.(20) into TagElement: @return(21) at 3", "Insert MethodRef(26) into TagElement: @see(27) at 0", "Insert TextElement:  5.0(28) into TagElement: @since(29) at 0", "Insert TextElement: Terminates request prematurely potentially leaving(57) into TagElement(59) at 0", "Insert TextElement: the connection in a inconsistent state.(58) into TagElement(59) at 1", "Insert SimpleName: request(60) into TagElement: @param(62) at 0", "Insert TextElement:  the request to be terminated prematurely.(61) into TagElement: @param(62) at 1", "Insert SimpleName: HttpException(63) into TagElement: @throws(64) at 0", "Insert SimpleName: IOException(65) into TagElement: @throws(66) at 0", "Insert MethodRef(68) into TagElement: @see(69) at 0", "Insert TextElement:  5.0(70) into TagElement: @since(71) at 0", "Insert SimpleName: HttpRequest(75) into SimpleType: HttpRequest(76) at 0", "Insert TextElement:  true(17) into TagElement: @code(18) at 0", "Insert SimpleName: terminateRequest(22) into MethodRef(26) at 0", "Insert MethodRefParameter(25) into MethodRef(26) at 1", "Insert SimpleName: isConsistent(67) into MethodRef(68) at 0", "Insert SimpleType: HttpRequest(24) into MethodRefParameter(25) at 0", "Insert SimpleName: HttpRequest(23) into SimpleType: HttpRequest(24) at 0"]}}, {"HttpResponseFactory_cluster": {"actions": [{"root": "DEL TagElement: @param", "operations": ["DEL TextElement:        the protocol version", "DEL SimpleName: ver", "DEL TagElement: @param"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: ProtocolVersion", "DEL SingleVariableDeclaration", "DEL SimpleName: ver", "DEL SimpleType: ProtocolVersion"]}]}}, {"HttpResponseFactory_diff": {"operations": ["Delete SimpleName: ver(17)", "Delete TextElement:        the protocol version(18)", "Delete TagElement: @param(19)", "Delete SimpleName: ProtocolVersion(36)", "Delete SimpleType: ProtocolVersion(37)", "Delete SimpleName: ver(38)", "Delete SingleVariableDeclaration(39)"]}}, {"BenchmarkWorker_cluster": {"actions": [{"root": "INS PrefixExpression: ! to InfixExpression: || at 1", "operations": ["INS SimpleName: isConsistent to MethodInvocation at 1", "INS PrefixExpression: ! to InfixExpression: || at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: conn to MethodInvocation at 0"]}]}}, {"BenchmarkWorker_diff": {"operations": ["Insert PrefixExpression: !(661) into InfixExpression: ||(673) at 1", "Insert MethodInvocation(660) into PrefixExpression: !(661) at 0", "Insert SimpleName: conn(658) into MethodInvocation(660) at 0", "Insert SimpleName: isConsistent(659) into MethodInvocation(660) at 1"]}}, {"NHttpReverseProxy_cluster": {"actions": [{"root": "INS ExpressionStatement to Block at 11", "operations": ["INS SimpleName: outhttpproc to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 11"]}, {"root": "MOVE from SuperConstructorInvocation", "operations": ["MOV ClassInstanceCreation to SuperConstructorInvocation at 1", "MOV SimpleType: HttpAsyncRequester to VariableDeclarationStatement at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV ClassInstanceCreation to Assignment: = at 1"]}, {"root": "INS QualifiedName: HttpAsyncRequestExecutor.DEFAULT_WAIT_FOR_CONTINUE to SuperConstructorInvocation at 0", "operations": ["INS QualifiedName: HttpAsyncRequestExecutor.DEFAULT_WAIT_FOR_CONTINUE to SuperConstructorInvocation at 0"]}, {"root": "INS NullLiteral to SuperConstructorInvocation at 2", "operations": ["INS NullLiteral to SuperConstructorInvocation at 2"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV ClassInstanceCreation to ClassInstanceCreation at 2", "MOV ClassInstanceCreation to ClassInstanceCreation at 3", "MOV ClassInstanceCreation to ClassInstanceCreation at 4", "MOV ClassInstanceCreation to ClassInstanceCreation at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: HttpAsyncRequester to ClassInstanceCreation at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.http.HttpResponseInterceptor"]}, {"root": "DEL ArrayCreation", "operations": ["DEL ArrayType: HttpResponseInterceptor[]", "DEL SimpleType: HttpResponseInterceptor", "DEL Dimension", "DEL SimpleName: HttpResponseInterceptor", "DEL ArrayInitializer", "DEL ArrayCreation"]}]}}, {"NHttpReverseProxy_diff": {"operations": ["Insert ExpressionStatement(324) into Block(537) at 11", "Insert Assignment: =(323) into ExpressionStatement(324) at 0", "Move SimpleType: HttpAsyncRequester(342) into VariableDeclarationStatement(341) at 0", "Insert SimpleName: outhttpproc(297) into Assignment: =(323) at 0", "Move ClassInstanceCreation(327) into Assignment: =(323) at 1", "Insert QualifiedName: HttpAsyncRequestExecutor.DEFAULT_WAIT_FOR_CONTINUE(3119) into SuperConstructorInvocation(3124) at 0", "Move ClassInstanceCreation(346) into SuperConstructorInvocation(3124) at 1", "Insert NullLiteral(3123) into SuperConstructorInvocation(3124) at 2", "Move ClassInstanceCreation(284) into ClassInstanceCreation(289) at 1", "Move ClassInstanceCreation(288) into ClassInstanceCreation(289) at 2", "Move ClassInstanceCreation(291) into ClassInstanceCreation(289) at 3", "Move ClassInstanceCreation(294) into ClassInstanceCreation(289) at 4", "Move SimpleType: HttpAsyncRequester(339) into ClassInstanceCreation(339) at 0", "Delete QualifiedName: org.apache.http.HttpResponseInterceptor(28)", "Delete ImportDeclaration(29)", "Delete SimpleName: HttpResponseInterceptor(278)", "Delete SimpleType: HttpResponseInterceptor(279)", "Delete Dimension(280)", "Delete ArrayType: HttpResponseInterceptor[](281)", "Delete ArrayInitializer(295)", "Delete ArrayCreation(296)"]}}, {"DefaultBHttpClientConnection_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 10", "INS PrimitiveType: boolean to FieldDeclaration at 2", "INS Modifier: volatile to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: consistent to VariableDeclarationFragment at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS ThisExpression to FieldAccess at 0", "INS SimpleName: consistent to FieldAccess at 1", "INS ReturnStatement to Block at 0", "INS FieldAccess to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS SimpleName: isConsistent to MethodDeclaration at 3", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Block to MethodDeclaration at 4", "INS Modifier: public to MethodDeclaration at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS SimpleName: request to SingleVariableDeclaration at 2", "INS SimpleName: request to MethodInvocation at 0", "INS SimpleName: len to InfixExpression: <= at 0", "INS SimpleType: HttpException to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: len to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: Args to MethodInvocation at 0", "INS FieldAccess to MethodInvocation at 2", "INS SimpleName: consistent to FieldAccess at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: long to VariableDeclarationStatement at 1", "INS SimpleName: len to VariableDeclarationFragment at 0", "INS IfStatement to IfStatement at 2", "INS SimpleName: Override to MarkerAnnotation at 0", "INS VariableDeclarationStatement to Block at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleType: HttpEntity to VariableDeclarationStatement at 1", "INS Block to IfStatement at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: close to MethodInvocation at 1", "INS SimpleName: notNull to MethodInvocation at 1", "INS SimpleName: request to MethodInvocation at 2", "INS SimpleName: outstream to VariableDeclarationFragment at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: terminateRequest to MethodDeclaration at 3", "INS SimpleName: close to MethodInvocation at 1", "INS SimpleName: len to InfixExpression: == at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleType: OutputStream to VariableDeclarationStatement at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: outbuffer to FieldAccess at 1", "INS SimpleName: outstream to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 2", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS ThisExpression to FieldAccess at 0", "INS Block to IfStatement at 1", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS InfixExpression: == to IfStatement at 0", "INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS SimpleName: len to MethodInvocation at 1", "INS FieldAccess to MethodInvocation at 2", "INS SimpleName: outgoingContentStrategy to FieldAccess at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: entity to MethodInvocation at 0", "INS SimpleName: HttpEntity to SimpleType: HttpEntity at 0", "INS ExpressionStatement to Block at 1", "INS SimpleType: IOException to MethodDeclaration at 6", "INS SimpleName: ensureOpen to MethodInvocation at 0", "INS SimpleName: OutputStream to SimpleType: OutputStream at 0", "INS SimpleName: entity to VariableDeclarationFragment at 0", "INS FieldAccess to MethodInvocation at 0", "INS SimpleName: outstream to MethodInvocation at 0", "INS SimpleName: HttpRequest to SimpleType: HttpRequest at 0", "INS SimpleName: createContentOutputStream to MethodInvocation at 0", "INS NumberLiteral: 1024 to InfixExpression: <= at 1", "INS IfStatement to Block at 5", "INS SimpleName: request to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 7", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: outbuffer to FieldAccess at 1", "INS InfixExpression: <= to InfixExpression: && at 1", "INS SimpleName: outstream to MethodInvocation at 0", "INS SimpleName: entity to InfixExpression: == at 0", "INS QualifiedName: ContentLengthStrategy.CHUNKED to InfixExpression: == at 1", "INS ThisExpression to FieldAccess at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: createContentOutputStream to MethodInvocation at 0", "INS SimpleType: OutputStream to VariableDeclarationStatement at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS InfixExpression: == to IfStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS FieldAccess to Assignment: = at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS ExpressionStatement to Block at 2", "INS SimpleName: writeTo to MethodInvocation at 1", "INS IfStatement to Block at 3", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \"HTTP request\" to MethodInvocation at 3", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleType: HttpRequest to SingleVariableDeclaration at 1", "INS BooleanLiteral: false to Assignment: = at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: HttpException to SimpleType: HttpException at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: determineLength to MethodInvocation at 1", "INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: OutputStream to SimpleType: OutputStream at 0", "INS SimpleName: len to InfixExpression: >= at 0", "INS InfixExpression: >= to InfixExpression: && at 0", "INS SimpleName: outstream to VariableDeclarationFragment at 0", "INS Block to IfStatement at 2", "INS SimpleName: getEntity to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 4"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS FieldAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 5", "INS SimpleName: consistent to FieldAccess at 1", "INS BooleanLiteral: true to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0"]}]}}, {"DefaultBHttpClientConnection_diff": {"operations": ["Insert FieldDeclaration(103) into TypeDeclaration: class(726) at 10", "Insert MethodDeclaration(516) into TypeDeclaration: class(726) at 19", "Insert MethodDeclaration(625) into TypeDeclaration: class(726) at 20", "Insert Modifier: private(98) into FieldDeclaration(103) at 0", "Insert Modifier: volatile(99) into FieldDeclaration(103) at 1", "Insert PrimitiveType: boolean(100) into FieldDeclaration(103) at 2", "Insert VariableDeclarationFragment(102) into FieldDeclaration(103) at 3", "Insert MarkerAnnotation(507) into MethodDeclaration(516) at 0", "Insert Modifier: public(508) into MethodDeclaration(516) at 1", "Insert PrimitiveType: boolean(509) into MethodDeclaration(516) at 2", "Insert SimpleName: isConsistent(510) into MethodDeclaration(516) at 3", "Insert Block(515) into MethodDeclaration(516) at 4", "Insert MarkerAnnotation(518) into MethodDeclaration(625) at 0", "Insert Modifier: public(519) into MethodDeclaration(625) at 1", "Insert PrimitiveType: void(520) into MethodDeclaration(625) at 2", "Insert SimpleName: terminateRequest(521) into MethodDeclaration(625) at 3", "Insert SingleVariableDeclaration(526) into MethodDeclaration(625) at 4", "Insert SimpleType: HttpException(528) into MethodDeclaration(625) at 5", "Insert SimpleType: IOException(530) into MethodDeclaration(625) at 6", "Insert Block(624) into MethodDeclaration(625) at 7", "Insert SimpleName: consistent(101) into VariableDeclarationFragment(102) at 0", "Insert ExpressionStatement(290) into Block(291) at 5", "Insert SimpleName: Override(506) into MarkerAnnotation(507) at 0", "Insert ReturnStatement(514) into Block(515) at 0", "Insert SimpleName: Override(517) into MarkerAnnotation(518) at 0", "Insert Modifier: final(522) into SingleVariableDeclaration(526) at 0", "Insert SimpleType: HttpRequest(524) into SingleVariableDeclaration(526) at 1", "Insert SimpleName: request(525) into SingleVariableDeclaration(526) at 2", "Insert SimpleName: HttpException(527) into SimpleType: HttpException(528) at 0", "Insert SimpleName: IOException(529) into SimpleType: IOException(530) at 0", "Insert ExpressionStatement(536) into Block(624) at 0", "Insert ExpressionStatement(539) into Block(624) at 1", "Insert VariableDeclarationStatement(548) into Block(624) at 2", "Insert IfStatement(554) into Block(624) at 3", "Insert VariableDeclarationStatement(565) into Block(624) at 4", "Insert IfStatement(623) into Block(624) at 5", "Insert Assignment: =(289) into ExpressionStatement(290) at 0", "Insert FieldAccess(513) into ReturnStatement(514) at 0", "Insert SimpleName: HttpRequest(523) into SimpleType: HttpRequest(524) at 0", "Insert MethodInvocation(535) into ExpressionStatement(536) at 0", "Insert MethodInvocation(538) into ExpressionStatement(539) at 0", "Insert Modifier: final(540) into VariableDeclarationStatement(548) at 0", "Insert SimpleType: HttpEntity(542) into VariableDeclarationStatement(548) at 1", "Insert VariableDeclarationFragment(547) into VariableDeclarationStatement(548) at 2", "Insert InfixExpression: ==(551) into IfStatement(554) at 0", "Insert Block(553) into IfStatement(554) at 1", "Insert Modifier: final(555) into VariableDeclarationStatement(565) at 0", "Insert PrimitiveType: long(556) into VariableDeclarationStatement(565) at 1", "Insert VariableDeclarationFragment(564) into VariableDeclarationStatement(565) at 2", "Insert InfixExpression: ==(568) into IfStatement(623) at 0", "Insert Block(585) into IfStatement(623) at 1", "Insert IfStatement(622) into IfStatement(623) at 2", "Insert FieldAccess(287) into Assignment: =(289) at 0", "Insert BooleanLiteral: true(288) into Assignment: =(289) at 1", "Insert ThisExpression(511) into FieldAccess(513) at 0", "Insert SimpleName: consistent(512) into FieldAccess(513) at 1", "Insert SimpleName: Args(531) into MethodInvocation(535) at 0", "Insert SimpleName: notNull(532) into MethodInvocation(535) at 1", "Insert SimpleName: request(533) into MethodInvocation(535) at 2", "Insert StringLiteral: \"HTTP request\"(534) into MethodInvocation(535) at 3", "Insert SimpleName: ensureOpen(537) into MethodInvocation(538) at 0", "Insert SimpleName: HttpEntity(541) into SimpleType: HttpEntity(542) at 0", "Insert SimpleName: entity(543) into VariableDeclarationFragment(547) at 0", "Insert MethodInvocation(546) into VariableDeclarationFragment(547) at 1", "Insert SimpleName: entity(549) into InfixExpression: ==(551) at 0", "Insert NullLiteral(550) into InfixExpression: ==(551) at 1", "Insert ReturnStatement(552) into Block(553) at 0", "Insert SimpleName: len(557) into VariableDeclarationFragment(564) at 0", "Insert MethodInvocation(563) into VariableDeclarationFragment(564) at 1", "Insert SimpleName: len(566) into InfixExpression: ==(568) at 0", "Insert QualifiedName: ContentLengthStrategy.CHUNKED(567) into InfixExpression: ==(568) at 1", "Insert VariableDeclarationStatement(580) into Block(585) at 0", "Insert ExpressionStatement(584) into Block(585) at 1", "Insert InfixExpression: &&(592) into IfStatement(622) at 0", "Insert Block(614) into IfStatement(622) at 1", "Insert Block(621) into IfStatement(622) at 2", "Insert ThisExpression(285) into FieldAccess(287) at 0", "Insert SimpleName: consistent(286) into FieldAccess(287) at 1", "Insert SimpleName: request(544) into MethodInvocation(546) at 0", "Insert SimpleName: getEntity(545) into MethodInvocation(546) at 1", "Insert FieldAccess(560) into MethodInvocation(563) at 0", "Insert SimpleName: determineLength(561) into MethodInvocation(563) at 1", "Insert SimpleName: request(562) into MethodInvocation(563) at 2", "Insert Modifier: final(569) into VariableDeclarationStatement(580) at 0", "Insert SimpleType: OutputStream(571) into VariableDeclarationStatement(580) at 1", "Insert VariableDeclarationFragment(579) into VariableDeclarationStatement(580) at 2", "Insert MethodInvocation(583) into ExpressionStatement(584) at 0", "Insert InfixExpression: >=(588) into InfixExpression: &&(592) at 0", "Insert InfixExpression: <=(591) into InfixExpression: &&(592) at 1", "Insert VariableDeclarationStatement(604) into Block(614) at 0", "Insert ExpressionStatement(609) into Block(614) at 1", "Insert ExpressionStatement(613) into Block(614) at 2", "Insert ExpressionStatement(620) into Block(621) at 0", "Insert ThisExpression(558) into FieldAccess(560) at 0", "Insert SimpleName: outgoingContentStrategy(559) into FieldAccess(560) at 1", "Insert SimpleName: OutputStream(570) into SimpleType: OutputStream(571) at 0", "Insert SimpleName: outstream(572) into VariableDeclarationFragment(579) at 0", "Insert MethodInvocation(578) into VariableDeclarationFragment(579) at 1", "Insert SimpleName: outstream(581) into MethodInvocation(583) at 0", "Insert SimpleName: close(582) into MethodInvocation(583) at 1", "Insert SimpleName: len(586) into InfixExpression: >=(588) at 0", "Insert NumberLiteral: 0(587) into InfixExpression: >=(588) at 1", "Insert SimpleName: len(589) into InfixExpression: <=(591) at 0", "Insert NumberLiteral: 1024(590) into InfixExpression: <=(591) at 1", "Insert Modifier: final(593) into VariableDeclarationStatement(604) at 0", "Insert SimpleType: OutputStream(595) into VariableDeclarationStatement(604) at 1", "Insert VariableDeclarationFragment(603) into VariableDeclarationStatement(604) at 2", "Insert MethodInvocation(608) into ExpressionStatement(609) at 0", "Insert MethodInvocation(612) into ExpressionStatement(613) at 0", "Insert Assignment: =(619) into ExpressionStatement(620) at 0", "Insert SimpleName: createContentOutputStream(573) into MethodInvocation(578) at 0", "Insert SimpleName: len(574) into MethodInvocation(578) at 1", "Insert FieldAccess(577) into MethodInvocation(578) at 2", "Insert SimpleName: OutputStream(594) into SimpleType: OutputStream(595) at 0", "Insert SimpleName: outstream(596) into VariableDeclarationFragment(603) at 0", "Insert MethodInvocation(602) into VariableDeclarationFragment(603) at 1", "Insert SimpleName: entity(605) into MethodInvocation(608) at 0", "Insert SimpleName: writeTo(606) into MethodInvocation(608) at 1", "Insert SimpleName: outstream(607) into MethodInvocation(608) at 2", "Insert SimpleName: outstream(610) into MethodInvocation(612) at 0", "Insert SimpleName: close(611) into MethodInvocation(612) at 1", "Insert FieldAccess(617) into Assignment: =(619) at 0", "Insert BooleanLiteral: false(618) into Assignment: =(619) at 1", "Insert ThisExpression(575) into FieldAccess(577) at 0", "Insert SimpleName: outbuffer(576) into FieldAccess(577) at 1", "Insert SimpleName: createContentOutputStream(597) into MethodInvocation(602) at 0", "Insert SimpleName: len(598) into MethodInvocation(602) at 1", "Insert FieldAccess(601) into MethodInvocation(602) at 2", "Insert ThisExpression(615) into FieldAccess(617) at 0", "Insert SimpleName: consistent(616) into FieldAccess(617) at 1", "Insert ThisExpression(599) into FieldAccess(601) at 0", "Insert SimpleName: outbuffer(600) into FieldAccess(601) at 1"]}}, {"DefaultConnectionReuseStrategy_cluster": {"actions": [{"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: Args", "DEL StringLiteral: \"HTTP context\"", "DEL SimpleName: context", "DEL SimpleName: notNull", "DEL ExpressionStatement", "DEL MethodInvocation"]}]}}, {"DefaultConnectionReuseStrategy_diff": {"operations": ["Delete SimpleName: Args(124)", "Delete SimpleName: notNull(125)", "Delete SimpleName: context(126)", "Delete StringLiteral: \"HTTP context\"(127)", "Delete MethodInvocation(128)", "Delete ExpressionStatement(129)"]}}, {"DefaultHttpResponseFactory_cluster": {"actions": [{"root": "UPDATE from org.apache.http.ProtocolVersion to org.apache.http.HttpVersion", "operations": ["UPD QualifiedName: org.apache.http.ProtocolVersion from org.apache.http.ProtocolVersion to org.apache.http.HttpVersion"]}, {"root": "INS QualifiedName: HttpVersion.HTTP_1_1 to ClassInstanceCreation at 1", "operations": ["INS QualifiedName: HttpVersion.HTTP_1_1 to ClassInstanceCreation at 1"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: ProtocolVersion", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: ProtocolVersion", "DEL SimpleName: ver"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: Args", "DEL MethodInvocation", "DEL StringLiteral: \"HTTP version\"", "DEL ExpressionStatement", "DEL SimpleName: notNull", "DEL SimpleName: ver"]}, {"root": "DEL SimpleName: ver", "operations": ["DEL SimpleName: ver"]}]}}, {"DefaultHttpResponseFactory_diff": {"operations": ["Update QualifiedName: org.apache.http.ProtocolVersion(8) to org.apache.http.HttpVersion", "Insert QualifiedName: HttpVersion.HTTP_1_1(140) into ClassInstanceCreation(143) at 1", "Delete Modifier: final(103)", "Delete SimpleName: ProtocolVersion(104)", "Delete SimpleType: ProtocolVersion(105)", "Delete SimpleName: ver(106)", "Delete SingleVariableDeclaration(107)", "Delete SimpleName: Args(117)", "Delete SimpleName: notNull(118)", "Delete SimpleName: ver(119)", "Delete StringLiteral: \"HTTP version\"(120)", "Delete MethodInvocation(121)", "Delete ExpressionStatement(122)", "Delete SimpleName: ver(151)"]}}, {"BasicHttpResponse_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS TextElement: The response will not have a reason phrase catalog and to TagElement at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: reason to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1", "INS TextElement: use the system default locale. to TagElement at 2", "INS QualifiedName: HttpVersion.HTTP_1_1 to ConstructorInvocation at 0", "INS SimpleName: code to ConstructorInvocation at 1", "INS TagElement: @param to Javadoc at 2", "INS SimpleName: reason to ConstructorInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS Javadoc to MethodDeclaration at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: code to SingleVariableDeclaration at 2", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS TextElement:  null to TagElement: @code at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS TagElement: @code to TagElement: @param at 2", "INS SimpleType: String to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS TextElement:       the status code of the response to TagElement: @param at 1", "INS SimpleName: code to TagElement: @param at 0", "INS ConstructorInvocation to Block at 0", "INS TextElement:     the reason phrase to the status code, or to TagElement: @param at 1", "INS SimpleName: BasicHttpResponse to MethodDeclaration at 2", "INS SimpleName: String to SimpleType: String at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: reason to SingleVariableDeclaration at 2", "INS TextElement: Creates a response from elements of a status line. to TagElement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}]}}, {"BasicHttpResponse_diff": {"operations": ["Insert MethodDeclaration(328) into TypeDeclaration: class(734) at 15", "Insert Javadoc(311) into MethodDeclaration(328) at 0", "Insert Modifier: public(312) into MethodDeclaration(328) at 1", "Insert SimpleName: BasicHttpResponse(313) into MethodDeclaration(328) at 2", "Insert SingleVariableDeclaration(317) into MethodDeclaration(328) at 3", "Insert SingleVariableDeclaration(322) into MethodDeclaration(328) at 4", "Insert Block(327) into MethodDeclaration(328) at 5", "Insert TagElement(302) into Javadoc(311) at 0", "Insert TagElement: @param(305) into Javadoc(311) at 1", "Insert TagElement: @param(310) into Javadoc(311) at 2", "Insert Modifier: final(314) into SingleVariableDeclaration(317) at 0", "Insert PrimitiveType: int(315) into SingleVariableDeclaration(317) at 1", "Insert SimpleName: code(316) into SingleVariableDeclaration(317) at 2", "Insert Modifier: final(318) into SingleVariableDeclaration(322) at 0", "Insert SimpleType: String(320) into SingleVariableDeclaration(322) at 1", "Insert SimpleName: reason(321) into SingleVariableDeclaration(322) at 2", "Insert ConstructorInvocation(326) into Block(327) at 0", "Insert TextElement: Creates a response from elements of a status line.(299) into TagElement(302) at 0", "Insert TextElement: The response will not have a reason phrase catalog and(300) into TagElement(302) at 1", "Insert TextElement: use the system default locale.(301) into TagElement(302) at 2", "Insert SimpleName: code(303) into TagElement: @param(305) at 0", "Insert TextElement:       the status code of the response(304) into TagElement: @param(305) at 1", "Insert SimpleName: reason(306) into TagElement: @param(310) at 0", "Insert TextElement:     the reason phrase to the status code, or(307) into TagElement: @param(310) at 1", "Insert TagElement: @code(309) into TagElement: @param(310) at 2", "Insert SimpleName: String(319) into SimpleType: String(320) at 0", "Insert QualifiedName: HttpVersion.HTTP_1_1(323) into ConstructorInvocation(326) at 0", "Insert SimpleName: code(324) into ConstructorInvocation(326) at 1", "Insert SimpleName: reason(325) into ConstructorInvocation(326) at 2", "Insert TextElement:  null(308) into TagElement: @code(309) at 0"]}}, {"HttpRequestExecutor_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 9"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0"]}, {"root": "UPDATE from protected to public", "operations": ["UPD Modifier: protected from protected to public"]}, {"root": "UPDATE from doSendRequest to execute", "operations": ["UPD SimpleName: doSendRequest from doSendRequest to execute"]}, {"root": "INS Block to MethodDeclaration at 10", "operations": ["INS TryStatement to Block at 3", "INS Block to MethodDeclaration at 10"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from TryStatement", "operations": ["MOV Block to TryStatement at 0"]}, {"root": "MOVE from TryStatement", "operations": ["MOV CatchClause to TryStatement at 1"]}, {"root": "INS WhileStatement to Block at 9", "operations": ["INS InfixExpression: < to InfixExpression: || at 1", "INS InfixExpression: || to WhileStatement at 0", "INS QualifiedName: HttpStatus.SC_OK to InfixExpression: < at 1", "INS WhileStatement to Block at 9", "INS Block to WhileStatement at 1"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS IfStatement to Block at 3", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: request to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 1", "INS Block to IfStatement at 2", "INS SimpleName: sendRequestEntity to MethodInvocation at 1"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: == to InfixExpression: || at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 1", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV SimpleName: expectContinue to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "MOVE from InfixExpression: <", "operations": ["MOV MethodInvocation to InfixExpression: < at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV Block to IfStatement at 1", "MOV InfixExpression: < to IfStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: sendRequestEntity to MethodInvocation at 1", "INS SimpleName: request to MethodInvocation at 2", "INS ExpressionStatement to Block at 2"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: request to MethodInvocation at 2", "INS SimpleName: terminateRequest to MethodInvocation at 1", "INS SimpleName: conn to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement: @param", "DEL TagElement: @param", "DEL SimpleName: HttpException", "DEL TextElement:  in case of an I/O error.", "DEL TextElement: This method also handles the expect-continue handshake if necessary.", "DEL SimpleName: preProcess", "DEL TagElement: @throws", "DEL TextElement: <p>", "DEL TagElement: @link", "DEL TextElement:  in case of HTTP protocol violation or a processing", "DEL Javadoc", "DEL TextElement: not use the connection for reading or anything else that depends on", "DEL TextElement:    the context for sending the request", "DEL TextElement:  null", "DEL TextElement:       the connection over which to send the request,", "DEL TextElement: If it does not have to handle an expect-continue handshake, it will", "DEL TextElement: data coming in over the connection.", "DEL TextElement: Send the given request over the given connection.", "DEL TextElement: handshake, or", "DEL TextElement:    the request to send, already", "DEL TagElement: @code", "DEL MemberRef", "DEL TextElement:  if the expect-continue handshake is not used", "DEL TagElement: @param", "DEL SimpleName: request", "DEL SimpleName: IOException", "DEL TextElement: problem.", "DEL TextElement:  preprocessed", "DEL SimpleName: conn", "DEL SimpleName: context", "DEL TagElement", "DEL TextElement:   a terminal response received as part of an expect-continue", "DEL TextElement: already established", "DEL TagElement: @throws", "DEL TagElement: @return"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: sendentity", "DEL VariableDeclarationStatement", "DEL PrimitiveType: boolean", "DEL BooleanLiteral: true"]}, {"root": "DEL Assignment: =", "operations": ["DEL SimpleName: sendentity", "DEL BooleanLiteral: false", "DEL Assignment: ="]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL SimpleName: sendentity"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: HttpClientConnection", "DEL TryStatement", "DEL Block", "DEL Modifier: public", "DEL SimpleName: execute", "DEL Block", "DEL SimpleName: HttpRequest", "DEL SimpleName: response", "DEL IfStatement", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: context", "DEL SimpleName: HttpException", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: HttpContext", "DEL SimpleType: HttpRequest", "DEL Block", "DEL Modifier: final", "DEL SimpleName: response", "DEL SimpleType: HttpException", "DEL SimpleName: context", "DEL MethodInvocation", "DEL SimpleName: response", "DEL SimpleType: IOException", "DEL SimpleName: conn", "DEL VariableDeclarationStatement", "DEL SimpleName: HttpClientConnection", "DEL SimpleName: conn", "DEL SimpleName: doReceiveResponse", "DEL SimpleType: HttpResponse", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SimpleName: HttpContext", "DEL MethodInvocation", "DEL SimpleName: IOException", "DEL VariableDeclarationFragment", "DEL SimpleName: context", "DEL SimpleName: HttpResponse", "DEL SimpleName: doSendRequest", "DEL SimpleName: request", "DEL SimpleName: conn", "DEL Assignment: =", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: HttpResponse", "DEL SimpleName: request", "DEL SimpleType: HttpResponse", "DEL SimpleName: request"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: conn", "DEL TextElement:   the terminal response, not yet post-processed", "DEL TagElement: @throws", "DEL NullLiteral", "DEL SimpleType: HttpClientConnection", "DEL TagElement: @param", "DEL SimpleName: context", "DEL ExpressionStatement", "DEL SimpleName: HttpRequest", "DEL SimpleName: IOException", "DEL VariableDeclarationStatement", "DEL SimpleName: IOException", "DEL SimpleName: request", "DEL SimpleName: HttpException", "DEL NullLiteral", "DEL StringLiteral: \"HTTP request\"", "DEL TagElement", "DEL SimpleType: HttpException", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: request", "DEL Modifier: protected", "DEL SimpleName: response", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL StringLiteral: \"HTTP context\"", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL WhileStatement", "DEL SimpleName: request", "DEL SimpleName: response", "DEL SimpleName: conn", "DEL SimpleName: conn", "DEL Modifier: final", "DEL SimpleName: notNull", "DEL SimpleName: statusCode", "DEL SingleVariableDeclaration", "DEL SimpleName: HttpResponse", "DEL SimpleName: HttpClientConnection", "DEL TextElement: Waits for and receives a response.", "DEL TagElement: @throws", "DEL InfixExpression: ==", "DEL SimpleName: statusCode", "DEL SimpleName: HttpContext", "DEL Block", "DEL TagElement: @param", "DEL SimpleName: doReceiveResponse", "DEL TagElement: @return", "DEL TextElement:  in case of HTTP protocol violation or a processing", "DEL ExpressionStatement", "DEL InfixExpression: <", "DEL TextElement: problem.", "DEL SimpleName: HttpException", "DEL SimpleType: HttpRequest", "DEL SimpleName: context", "DEL TextElement:    the request for which to obtain the response", "DEL ExpressionStatement", "DEL SimpleType: HttpContext", "DEL SimpleName: statusCode", "DEL TextElement:    the context for receiving the response", "DEL SimpleType: HttpResponse", "DEL SimpleName: notNull", "DEL StringLiteral: \"Client connection\"", "DEL TextElement:  in case of an I/O error.", "DEL Modifier: final", "DEL SimpleName: Args", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: Args", "DEL NumberLiteral: 0", "DEL SimpleName: context", "DEL ExpressionStatement", "DEL SimpleName: notNull", "DEL Assignment: =", "DEL TextElement: This method will automatically ignore intermediate responses", "DEL TagElement: @param", "DEL QualifiedName: HttpStatus.SC_OK", "DEL VariableDeclarationFragment", "DEL SimpleType: IOException", "DEL MethodInvocation", "DEL TextElement:       the connection over which the request was sent", "DEL SimpleType: HttpResponse", "DEL SimpleName: response", "DEL TextElement: with status code 1xx.", "DEL Block", "DEL SimpleName: Args", "DEL InfixExpression: ||", "DEL SingleVariableDeclaration", "DEL SimpleName: HttpResponse"]}]}}, {"HttpRequestExecutor_diff": {"operations": ["Move MethodDeclaration(589) into TypeDeclaration: class(626) at 9", "Move Javadoc(180) into MethodDeclaration(441) at 0", "Update Modifier: protected(402) to public", "Update SimpleName: doSendRequest(405) to execute", "Insert Block(440) into MethodDeclaration(441) at 9", "Move ExpressionStatement(209) into Block(440) at 0", "Move ExpressionStatement(215) into Block(440) at 1", "Move ExpressionStatement(221) into Block(440) at 2", "Insert TryStatement(439) into Block(440) at 3", "Move Block(588) into TryStatement(439) at 0", "Move CatchClause(265) into TryStatement(439) at 1", "Insert WhileStatement(417) into Block(420) at 9", "Insert InfixExpression: ||(398) into WhileStatement(417) at 0", "Insert Block(416) into WhileStatement(417) at 1", "Insert IfStatement(381) into Block(382) at 2", "Move InfixExpression: ==(234) into InfixExpression: ||(398) at 0", "Insert InfixExpression: <(397) into InfixExpression: ||(398) at 1", "Move ExpressionStatement(677) into Block(416) at 0", "Move IfStatement(529) into Block(416) at 1", "Move SimpleName: expectContinue(502) into IfStatement(381) at 0", "Insert Block(374) into IfStatement(381) at 1", "Move Block(578) into IfStatement(381) at 2", "Move MethodInvocation(694) into InfixExpression: <(397) at 0", "Insert QualifiedName: HttpStatus.SC_OK(396) into InfixExpression: <(397) at 1", "Move ExpressionStatement(506) into Block(374) at 0", "Insert IfStatement(373) into Block(374) at 1", "Move MethodInvocation(512) into IfStatement(373) at 0", "Move Block(570) into IfStatement(373) at 1", "Insert Block(372) into IfStatement(373) at 2", "Move ExpressionStatement(518) into Block(366) at 0", "Move VariableDeclarationStatement(539) into Block(366) at 1", "Insert ExpressionStatement(371) into Block(372) at 0", "Move InfixExpression: <(542) into IfStatement(365) at 0", "Move Block(561) into IfStatement(365) at 1", "Insert MethodInvocation(370) into ExpressionStatement(371) at 0", "Insert ExpressionStatement(346) into Block(347) at 2", "Insert ExpressionStatement(363) into Block(364) at 1", "Insert SimpleName: conn(367) into MethodInvocation(370) at 0", "Insert SimpleName: sendRequestEntity(368) into MethodInvocation(370) at 1", "Insert SimpleName: request(369) into MethodInvocation(370) at 2", "Insert MethodInvocation(345) into ExpressionStatement(346) at 0", "Move MethodInvocation(681) into IfStatement(358) at 0", "Move Block(687) into IfStatement(358) at 1", "Insert MethodInvocation(362) into ExpressionStatement(363) at 0", "Insert SimpleName: conn(342) into MethodInvocation(345) at 0", "Insert SimpleName: sendRequestEntity(343) into MethodInvocation(345) at 1", "Insert SimpleName: request(344) into MethodInvocation(345) at 2", "Insert SimpleName: conn(359) into MethodInvocation(362) at 0", "Insert SimpleName: terminateRequest(360) into MethodInvocation(362) at 1", "Insert SimpleName: request(361) into MethodInvocation(362) at 2", "Delete TextElement: Send the given request over the given connection.(367)", "Delete TextElement: <p>(368)", "Delete TextElement: This method also handles the expect-continue handshake if necessary.(369)", "Delete TextElement: If it does not have to handle an expect-continue handshake, it will(370)", "Delete TextElement: not use the connection for reading or anything else that depends on(371)", "Delete TextElement: data coming in over the connection.(372)", "Delete TagElement(373)", "Delete SimpleName: request(374)", "Delete TextElement:    the request to send, already(375)", "Delete SimpleName: preProcess(376)", "Delete MemberRef(377)", "Delete TextElement:  preprocessed(378)", "Delete TagElement: @link(379)", "Delete TagElement: @param(380)", "Delete SimpleName: conn(381)", "Delete TextElement:       the connection over which to send the request,(382)", "Delete TextElement: already established(383)", "Delete TagElement: @param(384)", "Delete SimpleName: context(385)", "Delete TextElement:    the context for sending the request(386)", "Delete TagElement: @param(387)", "Delete TextElement:   a terminal response received as part of an expect-continue(388)", "Delete TextElement: handshake, or(389)", "Delete TextElement:  null(390)", "Delete TagElement: @code(391)", "Delete TextElement:  if the expect-continue handshake is not used(392)", "Delete TagElement: @return(393)", "Delete SimpleName: IOException(394)", "Delete TextElement:  in case of an I/O error.(395)", "Delete TagElement: @throws(396)", "Delete SimpleName: HttpException(397)", "Delete TextElement:  in case of HTTP protocol violation or a processing(398)", "Delete TextElement: problem.(399)", "Delete TagElement: @throws(400)", "Delete Javadoc(401)", "Delete PrimitiveType: boolean(472)", "Delete SimpleName: sendentity(473)", "Delete BooleanLiteral: true(474)", "Delete VariableDeclarationFragment(475)", "Delete VariableDeclarationStatement(476)", "Delete SimpleName: sendentity(562)", "Delete BooleanLiteral: false(563)", "Delete Assignment: =(564)", "Delete IfStatement(571)", "Delete SimpleName: sendentity(572)", "Delete IfStatement(579)", "Delete Modifier: public(181)", "Delete SimpleName: HttpResponse(182)", "Delete SimpleType: HttpResponse(183)", "Delete SimpleName: execute(184)", "Delete Modifier: final(185)", "Delete SimpleName: HttpRequest(186)", "Delete SimpleType: HttpRequest(187)", "Delete SimpleName: request(188)", "Delete SingleVariableDeclaration(189)", "Delete Modifier: final(190)", "Delete SimpleName: HttpClientConnection(191)", "Delete SimpleType: HttpClientConnection(192)", "Delete SimpleName: conn(193)", "Delete SingleVariableDeclaration(194)", "Delete Modifier: final(195)", "Delete SimpleName: HttpContext(196)", "Delete SimpleType: HttpContext(197)", "Delete SimpleName: context(198)", "Delete SingleVariableDeclaration(199)", "Delete SimpleName: IOException(200)", "Delete SimpleType: IOException(201)", "Delete SimpleName: HttpException(202)", "Delete SimpleType: HttpException(203)", "Delete SimpleName: HttpResponse(222)", "Delete SimpleType: HttpResponse(223)", "Delete SimpleName: response(224)", "Delete SimpleName: doSendRequest(225)", "Delete SimpleName: request(226)", "Delete SimpleName: conn(227)", "Delete SimpleName: context(228)", "Delete MethodInvocation(229)", "Delete VariableDeclarationFragment(230)", "Delete VariableDeclarationStatement(231)", "Delete SimpleName: response(235)", "Delete SimpleName: doReceiveResponse(236)", "Delete SimpleName: request(237)", "Delete SimpleName: conn(238)", "Delete SimpleName: context(239)", "Delete MethodInvocation(240)", "Delete Assignment: =(241)", "Delete ExpressionStatement(242)", "Delete Block(243)", "Delete IfStatement(244)", "Delete SimpleName: response(245)", "Delete ReturnStatement(246)", "Delete Block(247)", "Delete TryStatement(266)", "Delete Block(267)", "Delete MethodDeclaration(268)", "Delete TextElement: Waits for and receives a response.(590)", "Delete TextElement: This method will automatically ignore intermediate responses(591)", "Delete TextElement: with status code 1xx.(592)", "Delete TagElement(593)", "Delete SimpleName: request(594)", "Delete TextElement:    the request for which to obtain the response(595)", "Delete TagElement: @param(596)", "Delete SimpleName: conn(597)", "Delete TextElement:       the connection over which the request was sent(598)", "Delete TagElement: @param(599)", "Delete SimpleName: context(600)", "Delete TextElement:    the context for receiving the response(601)", "Delete TagElement: @param(602)", "Delete TextElement:   the terminal response, not yet post-processed(603)", "Delete TagElement: @return(604)", "Delete SimpleName: IOException(605)", "Delete TextElement:  in case of an I/O error.(606)", "Delete TagElement: @throws(607)", "Delete SimpleName: HttpException(608)", "Delete TextElement:  in case of HTTP protocol violation or a processing(609)", "Delete TextElement: problem.(610)", "Delete TagElement: @throws(611)", "Delete Javadoc(612)", "Delete Modifier: protected(613)", "Delete SimpleName: HttpResponse(614)", "Delete SimpleType: HttpResponse(615)", "Delete SimpleName: doReceiveResponse(616)", "Delete Modifier: final(617)", "Delete SimpleName: HttpRequest(618)", "Delete SimpleType: HttpRequest(619)", "Delete SimpleName: request(620)", "Delete SingleVariableDeclaration(621)", "Delete Modifier: final(622)", "Delete SimpleName: HttpClientConnection(623)", "Delete SimpleType: HttpClientConnection(624)", "Delete SimpleName: conn(625)", "Delete SingleVariableDeclaration(626)", "Delete Modifier: final(627)", "Delete SimpleName: HttpContext(628)", "Delete SimpleType: HttpContext(629)", "Delete SimpleName: context(630)", "Delete SingleVariableDeclaration(631)", "Delete SimpleName: HttpException(632)", "Delete SimpleType: HttpException(633)", "Delete SimpleName: IOException(634)", "Delete SimpleType: IOException(635)", "Delete SimpleName: Args(636)", "Delete SimpleName: notNull(637)", "Delete SimpleName: request(638)", "Delete StringLiteral: \"HTTP request\"(639)", "Delete MethodInvocation(640)", "Delete ExpressionStatement(641)", "Delete SimpleName: Args(642)", "Delete SimpleName: notNull(643)", "Delete SimpleName: conn(644)", "Delete StringLiteral: \"Client connection\"(645)", "Delete MethodInvocation(646)", "Delete ExpressionStatement(647)", "Delete SimpleName: Args(648)", "Delete SimpleName: notNull(649)", "Delete SimpleName: context(650)", "Delete StringLiteral: \"HTTP context\"(651)", "Delete MethodInvocation(652)", "Delete ExpressionStatement(653)", "Delete SimpleName: HttpResponse(654)", "Delete SimpleType: HttpResponse(655)", "Delete SimpleName: response(656)", "Delete NullLiteral(657)", "Delete VariableDeclarationFragment(658)", "Delete VariableDeclarationStatement(659)", "Delete PrimitiveType: int(660)", "Delete SimpleName: statusCode(661)", "Delete NumberLiteral: 0(662)", "Delete VariableDeclarationFragment(663)", "Delete VariableDeclarationStatement(664)", "Delete SimpleName: response(665)", "Delete NullLiteral(666)", "Delete InfixExpression: ==(667)", "Delete SimpleName: statusCode(668)", "Delete QualifiedName: HttpStatus.SC_OK(669)", "Delete InfixExpression: <(670)", "Delete InfixExpression: ||(671)", "Delete SimpleName: statusCode(689)", "Delete Assignment: =(695)", "Delete ExpressionStatement(696)", "Delete Block(697)", "Delete WhileStatement(698)", "Delete SimpleName: response(699)", "Delete ReturnStatement(700)", "Delete Block(701)", "Delete MethodDeclaration(702)"]}}, {"HttpService_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 5", "MOV ExpressionStatement to Block at 13", "MOV VariableDeclarationStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 12", "MOV VariableDeclarationStatement to Block at 2", "MOV ExpressionStatement to Block at 1"]}, {"root": "INS Modifier: final to VariableDeclarationStatement at 0", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "INS Block to TryStatement at 0", "operations": ["INS Block to TryStatement at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: response to MethodInvocation at 2", "INS SimpleName: setAttribute to MethodInvocation at 1", "INS SimpleName: response to MethodInvocation at 2", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: response to MethodInvocation at 3", "INS SimpleName: context to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: flush to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS QualifiedName: HttpCoreContext.HTTP_RESPONSE to MethodInvocation at 2", "INS SimpleName: context to MethodInvocation at 3", "INS ExpressionStatement to Block at 5", "INS ReturnStatement to Block at 7", "INS SimpleName: context to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: processor to FieldAccess at 1", "INS Block to IfStatement at 2", "INS SimpleName: setAttribute to MethodInvocation at 1", "INS QualifiedName: HttpCoreContext.HTTP_REQUEST to MethodInvocation at 2", "INS FieldAccess to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: process to MethodInvocation at 1", "INS IfStatement to Block at 2", "INS SimpleName: sendResponseHeader to MethodInvocation at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: request to MethodInvocation at 3"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 3"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 6", "MOV ExpressionStatement to Block at 5"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: < to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2", "INS SimpleName: setAttribute to MethodInvocation at 1", "INS SimpleName: context to MethodInvocation at 0", "INS QualifiedName: HttpCoreContext.HTTP_RESPONSE to MethodInvocation at 2", "INS SimpleName: response to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: response to MethodInvocation at 2", "INS SimpleName: process to MethodInvocation at 1", "INS SimpleName: processor to FieldAccess at 1", "INS ExpressionStatement to Block at 3", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to MethodInvocation at 0", "INS SimpleName: context to MethodInvocation at 3"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 4"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 6"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS SimpleName: canResponseHaveBody to MethodInvocation at 0", "INS SimpleName: response to MethodInvocation at 2", "INS SimpleName: request to MethodInvocation at 1", "INS MethodInvocation to IfStatement at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: response to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: sendResponseEntity to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV FieldAccess to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV FieldAccess to MethodInvocation at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.http.HttpVersion", "DEL ImportDeclaration"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL QualifiedName: HttpVersion.HTTP_1_1", "operations": ["DEL QualifiedName: HttpVersion.HTTP_1_1"]}, {"root": "DEL QualifiedName: HttpVersion.HTTP_1_0", "operations": ["DEL QualifiedName: HttpVersion.HTTP_1_0"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL QualifiedName: HttpVersion.HTTP_1_1", "operations": ["DEL QualifiedName: HttpVersion.HTTP_1_1"]}, {"root": "DEL Block", "operations": ["DEL IfStatement", "DEL Block", "DEL NullLiteral", "DEL Assignment: =", "DEL ExpressionStatement", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: response", "DEL SimpleName: request"]}, {"root": "DEL QualifiedName: HttpVersion.HTTP_1_0", "operations": ["DEL QualifiedName: HttpVersion.HTTP_1_0"]}]}}, {"HttpService_diff": {"operations": ["Move VariableDeclarationStatement(392) into Block(661) at 2", "Move VariableDeclarationStatement(407) into Block(661) at 3", "Move IfStatement(495) into Block(661) at 5", "Move VariableDeclarationStatement(540) into Block(661) at 12", "Move ExpressionStatement(545) into Block(661) at 13", "Insert Modifier: final(363) into VariableDeclarationStatement(371) at 0", "Insert Block(574) into TryStatement(611) at 0", "Move MethodInvocation(380) into VariableDeclarationFragment(370) at 1", "Insert IfStatement(522) into Block(523) at 2", "Move ExpressionStatement(493) into Block(574) at 0", "Move ExpressionStatement(501) into Block(574) at 1", "Move ExpressionStatement(523) into Block(574) at 2", "Move ExpressionStatement(515) into Block(574) at 3", "Move ExpressionStatement(529) into Block(574) at 4", "Move ExpressionStatement(576) into Block(574) at 5", "Move ExpressionStatement(584) into Block(574) at 6", "Move InfixExpression: <(467) into IfStatement(522) at 0", "Move Block(486) into IfStatement(522) at 1", "Insert Block(521) into IfStatement(522) at 2", "Insert ExpressionStatement(600) into Block(609) at 2", "Insert ExpressionStatement(608) into Block(609) at 3", "Insert ExpressionStatement(480) into Block(521) at 0", "Insert ExpressionStatement(486) into Block(521) at 1", "Insert ExpressionStatement(494) into Block(521) at 2", "Insert ExpressionStatement(499) into Block(521) at 3", "Move IfStatement(487) into Block(521) at 4", "Insert ExpressionStatement(514) into Block(521) at 5", "Move ExpressionStatement(485) into Block(521) at 6", "Insert ReturnStatement(520) into Block(521) at 7", "Insert MethodInvocation(599) into ExpressionStatement(600) at 0", "Insert MethodInvocation(607) into ExpressionStatement(608) at 0", "Insert MethodInvocation(479) into ExpressionStatement(480) at 0", "Insert MethodInvocation(485) into ExpressionStatement(486) at 0", "Insert MethodInvocation(493) into ExpressionStatement(494) at 0", "Insert MethodInvocation(498) into ExpressionStatement(499) at 0", "Insert MethodInvocation(503) into IfStatement(510) at 0", "Insert Block(509) into IfStatement(510) at 1", "Insert MethodInvocation(513) into ExpressionStatement(514) at 0", "Move FieldAccess(555) into MethodInvocation(551) at 0", "Insert SimpleName: context(595) into MethodInvocation(599) at 0", "Insert SimpleName: setAttribute(596) into MethodInvocation(599) at 1", "Insert QualifiedName: HttpCoreContext.HTTP_RESPONSE(597) into MethodInvocation(599) at 2", "Insert SimpleName: response(598) into MethodInvocation(599) at 3", "Insert FieldAccess(603) into MethodInvocation(607) at 0", "Insert SimpleName: process(604) into MethodInvocation(607) at 1", "Insert SimpleName: response(605) into MethodInvocation(607) at 2", "Insert SimpleName: context(606) into MethodInvocation(607) at 3", "Insert SimpleName: context(475) into MethodInvocation(479) at 0", "Insert SimpleName: setAttribute(476) into MethodInvocation(479) at 1", "Insert QualifiedName: HttpCoreContext.HTTP_REQUEST(477) into MethodInvocation(479) at 2", "Insert SimpleName: request(478) into MethodInvocation(479) at 3", "Insert SimpleName: context(481) into MethodInvocation(485) at 0", "Insert SimpleName: setAttribute(482) into MethodInvocation(485) at 1", "Insert QualifiedName: HttpCoreContext.HTTP_RESPONSE(483) into MethodInvocation(485) at 2", "Insert SimpleName: response(484) into MethodInvocation(485) at 3", "Insert FieldAccess(489) into MethodInvocation(493) at 0", "Insert SimpleName: process(490) into MethodInvocation(493) at 1", "Insert SimpleName: response(491) into MethodInvocation(493) at 2", "Insert SimpleName: context(492) into MethodInvocation(493) at 3", "Insert SimpleName: conn(495) into MethodInvocation(498) at 0", "Insert SimpleName: sendResponseHeader(496) into MethodInvocation(498) at 1", "Insert SimpleName: response(497) into MethodInvocation(498) at 2", "Insert SimpleName: canResponseHaveBody(500) into MethodInvocation(503) at 0", "Insert SimpleName: request(501) into MethodInvocation(503) at 1", "Insert SimpleName: response(502) into MethodInvocation(503) at 2", "Insert ExpressionStatement(508) into Block(509) at 0", "Insert SimpleName: conn(511) into MethodInvocation(513) at 0", "Insert SimpleName: flush(512) into MethodInvocation(513) at 1", "Move FieldAccess(508) into MethodInvocation(587) at 0", "Insert ThisExpression(601) into FieldAccess(603) at 0", "Insert SimpleName: processor(602) into FieldAccess(603) at 1", "Insert ThisExpression(487) into FieldAccess(489) at 0", "Insert SimpleName: processor(488) into FieldAccess(489) at 1", "Insert MethodInvocation(507) into ExpressionStatement(508) at 0", "Insert SimpleName: conn(504) into MethodInvocation(507) at 0", "Insert SimpleName: sendResponseEntity(505) into MethodInvocation(507) at 1", "Insert SimpleName: response(506) into MethodInvocation(507) at 2", "Delete QualifiedName: org.apache.http.HttpVersion(24)", "Delete ImportDeclaration(25)", "Delete NullLiteral(368)", "Delete QualifiedName: HttpVersion.HTTP_1_1(414)", "Delete QualifiedName: HttpVersion.HTTP_1_0(445)", "Delete Block(494)", "Delete QualifiedName: HttpVersion.HTTP_1_1(510)", "Delete SimpleName: request(377)", "Delete Assignment: =(381)", "Delete ExpressionStatement(382)", "Delete SimpleName: response(502)", "Delete NullLiteral(503)", "Delete InfixExpression: ==(504)", "Delete Block(530)", "Delete IfStatement(531)", "Delete Block(546)", "Delete QualifiedName: HttpVersion.HTTP_1_0(557)"]}}, {"DefaultNHttpClientConnection_cluster": {"actions": [{"root": "DEL IfStatement", "operations": ["DEL FieldAccess", "DEL MethodInvocation", "DEL SimpleName: clearEvent", "DEL NullLiteral", "DEL InfixExpression: &&", "DEL ExpressionStatement", "DEL SimpleName: session", "DEL ThisExpression", "DEL SimpleName: contentEncoder", "DEL ThisExpression", "DEL SimpleName: CLOSED", "DEL InfixExpression: !=", "DEL InfixExpression: ==", "DEL QualifiedName: EventMask.WRITE", "DEL ThisExpression", "DEL Block", "DEL FieldAccess", "DEL IfStatement", "DEL FieldAccess", "DEL SimpleName: status"]}]}}, {"DefaultNHttpClientConnection_diff": {"operations": ["Delete ThisExpression(858)", "Delete SimpleName: contentEncoder(859)", "Delete FieldAccess(860)", "Delete NullLiteral(861)", "Delete InfixExpression: ==(862)", "Delete ThisExpression(863)", "Delete SimpleName: status(864)", "Delete FieldAccess(865)", "Delete SimpleName: CLOSED(866)", "Delete InfixExpression: !=(867)", "Delete InfixExpression: &&(868)", "Delete ThisExpression(869)", "Delete SimpleName: session(870)", "Delete FieldAccess(871)", "Delete SimpleName: clearEvent(872)", "Delete QualifiedName: EventMask.WRITE(873)", "Delete MethodInvocation(874)", "Delete ExpressionStatement(875)", "Delete Block(876)", "Delete IfStatement(877)"]}}, {"BasicAsyncClientExchangeHandler_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS Block to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: localContext to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: getContext to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS SimpleType: HttpContext to MethodDeclaration at 2"]}, {"root": "UPDATE from ConnectionReuseStrategy to HttpContext", "operations": ["UPD SimpleName: ConnectionReuseStrategy from ConnectionReuseStrategy to HttpContext"]}, {"root": "MOVE from SimpleType: HttpContext", "operations": ["MOV SimpleName: ConnectionReuseStrategy to SimpleType: HttpContext at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.http.ConnectionReuseStrategy", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.http.impl.DefaultConnectionReuseStrategy"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: connReuseStrategy", "DEL Modifier: final", "DEL Modifier: private", "DEL FieldDeclaration", "DEL SimpleType: ConnectionReuseStrategy", "DEL VariableDeclarationFragment"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL SimpleName: AtomicBoolean", "DEL SimpleType: AtomicBoolean", "DEL Modifier: final", "DEL FieldDeclaration", "DEL SimpleName: keepAlive"]}, {"root": "DEL TagElement: @param", "operations": ["DEL TagElement: @param", "DEL TextElement:  the connection re-use strategy.", "DEL SimpleName: connReuseStrategy"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: connReuseStrategy", "DEL SimpleName: ConnectionReuseStrategy", "DEL SimpleType: ConnectionReuseStrategy", "DEL Modifier: final"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ConditionalExpression", "DEL Assignment: =", "DEL SimpleName: connReuseStrategy", "DEL NullLiteral", "DEL InfixExpression: !=", "DEL SimpleName: connReuseStrategy", "DEL ThisExpression", "DEL QualifiedName: DefaultConnectionReuseStrategy.INSTANCE", "DEL ExpressionStatement", "DEL SimpleName: connReuseStrategy", "DEL FieldAccess"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL SimpleName: keepAlive", "DEL ClassInstanceCreation", "DEL BooleanLiteral: false", "DEL SimpleName: AtomicBoolean", "DEL ThisExpression", "DEL FieldAccess", "DEL ExpressionStatement", "DEL SimpleType: AtomicBoolean"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: localContext", "DEL FieldAccess", "DEL ThisExpression", "DEL SimpleName: keepAlive", "DEL SimpleName: response", "DEL MethodInvocation", "DEL SimpleName: keepAlive", "DEL SimpleName: connReuseStrategy", "DEL FieldAccess", "DEL ThisExpression", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: set", "DEL FieldAccess", "DEL ThisExpression", "DEL NullLiteral"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: get", "DEL FieldAccess", "DEL SimpleName: close", "DEL MethodInvocation", "DEL ThisExpression", "DEL FieldAccess", "DEL SimpleName: conn", "DEL PrefixExpression: !", "DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleName: keepAlive"]}]}}, {"BasicAsyncClientExchangeHandler_diff": {"operations": ["Insert MethodDeclaration(407) into TypeDeclaration: class(797) at 18", "Insert MarkerAnnotation(399) into MethodDeclaration(407) at 0", "Insert Modifier: public(400) into MethodDeclaration(407) at 1", "Insert SimpleType: HttpContext(402) into MethodDeclaration(407) at 2", "Insert SimpleName: getContext(403) into MethodDeclaration(407) at 3", "Insert Block(406) into MethodDeclaration(407) at 4", "Insert SimpleName: Override(398) into MarkerAnnotation(399) at 0", "Update SimpleName: ConnectionReuseStrategy(110) to HttpContext", "Move SimpleName: ConnectionReuseStrategy(110) into SimpleType: HttpContext(402) at 0", "Insert ReturnStatement(405) into Block(406) at 0", "Insert SimpleName: localContext(404) into ReturnStatement(405) at 0", "Delete QualifiedName: org.apache.http.ConnectionReuseStrategy(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: org.apache.http.impl.DefaultConnectionReuseStrategy(22)", "Delete ImportDeclaration(23)", "Delete Modifier: private(108)", "Delete Modifier: final(109)", "Delete SimpleType: ConnectionReuseStrategy(111)", "Delete SimpleName: connReuseStrategy(112)", "Delete VariableDeclarationFragment(113)", "Delete FieldDeclaration(114)", "Delete Modifier: private(122)", "Delete Modifier: final(123)", "Delete SimpleName: AtomicBoolean(124)", "Delete SimpleType: AtomicBoolean(125)", "Delete SimpleName: keepAlive(126)", "Delete VariableDeclarationFragment(127)", "Delete FieldDeclaration(128)", "Delete SimpleName: connReuseStrategy(156)", "Delete TextElement:  the connection re-use strategy.(157)", "Delete TagElement: @param(158)", "Delete Modifier: final(198)", "Delete SimpleName: ConnectionReuseStrategy(199)", "Delete SimpleType: ConnectionReuseStrategy(200)", "Delete SimpleName: connReuseStrategy(201)", "Delete SingleVariableDeclaration(202)", "Delete ThisExpression(264)", "Delete SimpleName: connReuseStrategy(265)", "Delete FieldAccess(266)", "Delete SimpleName: connReuseStrategy(267)", "Delete NullLiteral(268)", "Delete InfixExpression: !=(269)", "Delete SimpleName: connReuseStrategy(270)", "Delete QualifiedName: DefaultConnectionReuseStrategy.INSTANCE(271)", "Delete ConditionalExpression(272)", "Delete Assignment: =(273)", "Delete ExpressionStatement(274)", "Delete ThisExpression(284)", "Delete SimpleName: keepAlive(285)", "Delete FieldAccess(286)", "Delete SimpleName: AtomicBoolean(287)", "Delete SimpleType: AtomicBoolean(288)", "Delete BooleanLiteral: false(289)", "Delete ClassInstanceCreation(290)", "Delete Assignment: =(291)", "Delete ExpressionStatement(292)", "Delete NullLiteral(358)", "Delete ThisExpression(593)", "Delete SimpleName: keepAlive(594)", "Delete FieldAccess(595)", "Delete SimpleName: set(596)", "Delete ThisExpression(597)", "Delete SimpleName: connReuseStrategy(598)", "Delete FieldAccess(599)", "Delete SimpleName: keepAlive(600)", "Delete NullLiteral(601)", "Delete SimpleName: response(602)", "Delete ThisExpression(603)", "Delete SimpleName: localContext(604)", "Delete FieldAccess(605)", "Delete MethodInvocation(606)", "Delete MethodInvocation(607)", "Delete ExpressionStatement(608)", "Delete ThisExpression(645)", "Delete SimpleName: keepAlive(646)", "Delete FieldAccess(647)", "Delete SimpleName: get(648)", "Delete MethodInvocation(649)", "Delete PrefixExpression: !(650)", "Delete ThisExpression(651)", "Delete SimpleName: conn(652)", "Delete FieldAccess(653)", "Delete SimpleName: close(654)", "Delete MethodInvocation(655)", "Delete ExpressionStatement(656)", "Delete Block(657)", "Delete IfStatement(658)"]}}, {"HttpAsyncClientExchangeHandler_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS QualifiedName: org.apache.http.protocol.HttpContext to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 10"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 5", "operations": ["INS MethodDeclaration to TypeDeclaration: interface at 5", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @since to Javadoc at 1", "INS SimpleType: HttpContext to MethodDeclaration at 1", "INS TagElement to Javadoc at 0", "INS SimpleName: getContext to MethodDeclaration at 2", "INS TextElement:  5.0 to TagElement: @since at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 6", "operations": ["INS TagElement to Javadoc at 0", "INS MethodDeclaration to TypeDeclaration: interface at 6", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleName: generateRequest to MethodDeclaration at 2", "MOV SimpleType: IOException to MethodDeclaration at 3", "MOV SimpleType: HttpException to MethodDeclaration at 4", "MOV SimpleType: HttpRequest to MethodDeclaration at 1"]}, {"root": "UPDATE from ContentEncoder to HttpContext", "operations": ["UPD SimpleName: ContentEncoder from ContentEncoder to HttpContext"]}, {"root": "MOVE from SimpleType: HttpContext", "operations": ["MOV SimpleName: ContentEncoder to SimpleType: HttpContext at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @throws to Javadoc at 3", "MOV TagElement: @return to Javadoc at 1", "MOV TagElement: @throws to Javadoc at 2"]}, {"root": "UPDATE from Invoked to generate a HTTP request message head. The message is expected to Returns actual HTTP context.", "operations": ["UPD TextElement: Invoked to generate a HTTP request message head. The message is expected from Invoked to generate a HTTP request message head. The message is expected to Returns actual HTTP context."]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement: Invoked to generate a HTTP request message head. The message is expected to TagElement at 0"]}, {"root": "UPDATE from  null to Invoked to generate a HTTP request message head.", "operations": ["UPD TextElement:  null from  null to Invoked to generate a HTTP request message head."]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  null to TagElement at 0"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: produceContent", "DEL SimpleName: getEntity", "DEL TextElement:  method will not be invoked if", "DEL TagElement", "DEL TextElement:  interface if it is", "DEL TagElement: @link", "DEL TagElement: @link", "DEL QualifiedName: org.apache.http.HttpEntityEnclosingRequest", "DEL TagElement: @code", "DEL MethodRef", "DEL TextElement: to implement the ", "DEL TextElement: to enclose a content entity. The ", "DEL MethodRef", "DEL Javadoc", "DEL TagElement: @link", "DEL TextElement:  returns", "DEL SimpleType: ContentEncoder", "DEL SimpleName: IOControl", "DEL TextElement: .", "DEL MethodDeclaration", "DEL QualifiedName: org.apache.http.HttpEntityEnclosingRequest", "DEL MethodRefParameter", "DEL SimpleType: IOControl", "DEL MethodRefParameter"]}]}}, {"HttpAsyncClientExchangeHandler_diff": {"operations": ["Insert ImportDeclaration(21) into CompilationUnit(271) at 10", "Insert QualifiedName: org.apache.http.protocol.HttpContext(20) into ImportDeclaration(21) at 0", "Insert MethodDeclaration(67) into TypeDeclaration: interface(270) at 5", "Insert MethodDeclaration(86) into TypeDeclaration: interface(270) at 6", "Insert Javadoc(63) into MethodDeclaration(67) at 0", "Insert SimpleType: HttpContext(65) into MethodDeclaration(67) at 1", "Insert SimpleName: getContext(66) into MethodDeclaration(67) at 2", "Insert Javadoc(78) into MethodDeclaration(86) at 0", "Move SimpleType: HttpRequest(92) into MethodDeclaration(86) at 1", "Move SimpleName: generateRequest(93) into MethodDeclaration(86) at 2", "Move SimpleType: IOException(95) into MethodDeclaration(86) at 3", "Move SimpleType: HttpException(97) into MethodDeclaration(86) at 4", "Insert TagElement(60) into Javadoc(63) at 0", "Insert TagElement: @since(62) into Javadoc(63) at 1", "Update SimpleName: ContentEncoder(64) to HttpContext", "Move SimpleName: ContentEncoder(64) into SimpleType: HttpContext(65) at 0", "Insert TagElement(69) into Javadoc(78) at 0", "Move TagElement: @return(83) into Javadoc(78) at 1", "Move TagElement: @throws(86) into Javadoc(78) at 2", "Move TagElement: @throws(89) into Javadoc(78) at 3", "Update TextElement: Invoked to generate a HTTP request message head. The message is expected(57) to Returns actual HTTP context.", "Move TextElement: Invoked to generate a HTTP request message head. The message is expected(57) into TagElement(60) at 0", "Insert TextElement:  5.0(61) into TagElement: @since(62) at 0", "Update TextElement:  null(78) to Invoked to generate a HTTP request message head.", "Move TextElement:  null(78) into TagElement(69) at 0", "Delete TextElement: to implement the (58)", "Delete QualifiedName: org.apache.http.HttpEntityEnclosingRequest(59)", "Delete TagElement: @link(60)", "Delete TextElement:  interface if it is(61)", "Delete TextElement: to enclose a content entity. The (62)", "Delete SimpleName: produceContent(63)", "Delete SimpleType: ContentEncoder(65)", "Delete MethodRefParameter(66)", "Delete SimpleName: IOControl(67)", "Delete SimpleType: IOControl(68)", "Delete MethodRefParameter(69)", "Delete MethodRef(70)", "Delete TagElement: @link(71)", "Delete TextElement:  method will not be invoked if(72)", "Delete QualifiedName: org.apache.http.HttpEntityEnclosingRequest(73)", "Delete SimpleName: getEntity(74)", "Delete MethodRef(75)", "Delete TagElement: @link(76)", "Delete TextElement:  returns(77)", "Delete TagElement: @code(79)", "Delete TextElement: .(80)", "Delete TagElement(81)", "Delete Javadoc(90)", "Delete MethodDeclaration(98)"]}}, {"HttpAsyncRequestExecutor_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: org.apache.http.ConnectionReuseStrategy to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS QualifiedName: org.apache.http.HeaderElements to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 9"]}, {"root": "INS ImportDeclaration to CompilationUnit at 20", "operations": ["INS ImportDeclaration to CompilationUnit at 20", "INS QualifiedName: org.apache.http.impl.DefaultConnectionReuseStrategy to ImportDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleType: ConnectionReuseStrategy to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: connReuseStrategy to VariableDeclarationFragment at 0", "INS SimpleName: ConnectionReuseStrategy to SimpleType: ConnectionReuseStrategy at 0", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS Modifier: final to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 9"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS Modifier: final to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: ConnectionReuseStrategy to SingleVariableDeclaration at 1", "INS SimpleName: ConnectionReuseStrategy to SimpleType: ConnectionReuseStrategy at 0", "INS SimpleName: connReuseStrategy to SingleVariableDeclaration at 2"]}, {"root": "INS Block to MethodDeclaration at 8", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: equalsIgnoreCase to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: conn to MethodInvocation at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS IfStatement to Block at 5", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: conn to MethodInvocation at 3", "INS Block to IfStatement at 1", "INS SimpleName: chunked to VariableDeclarationFragment at 0", "INS SimpleName: getFirstHeader to MethodInvocation at 1", "INS SimpleName: handler to MethodInvocation at 3", "INS Block to IfStatement at 1", "INS SimpleType: HttpRequest to VariableDeclarationStatement at 1", "INS SimpleName: request to MethodInvocation at 0", "INS SimpleName: header to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 0", "INS NullLiteral to InfixExpression: != at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS PrefixExpression: ! to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: produceContent to MethodInvocation at 1", "INS SimpleName: state to MethodInvocation at 0", "INS SimpleName: header to MethodInvocation at 0", "INS SimpleName: encoder to MethodInvocation at 0", "INS IfStatement to Block at 1", "INS Block to IfStatement at 1", "INS SimpleName: handler to MethodInvocation at 0", "INS QualifiedName: HeaderElements.CHUNKED_ENCODING to MethodInvocation at 0", "INS SimpleName: Header to SimpleType: Header at 0", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: request to VariableDeclarationFragment at 0", "INS SimpleName: isEarlyResponse to MethodInvocation at 1", "INS SimpleName: getValue to MethodInvocation at 1", "INS SimpleName: encoder to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 2", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: state to MethodInvocation at 0", "INS SimpleName: complete to MethodInvocation at 1", "INS Block to MethodDeclaration at 8", "INS IfStatement to Block at 6", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: state to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: encoder to MethodInvocation at 0", "INS IfStatement to Block at 1", "INS IfStatement to Block at 3", "INS Block to IfStatement at 2", "INS SimpleName: getResponseState to MethodInvocation at 1", "INS SimpleName: chunked to IfStatement at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 1", "INS QualifiedName: MessageState.COMPLETED to InfixExpression: == at 1", "INS Block to IfStatement at 2", "INS InfixExpression: && to VariableDeclarationFragment at 1", "INS SimpleName: header to InfixExpression: != at 0", "INS SimpleName: getRequest to MethodInvocation at 1", "INS SimpleName: processResponse to MethodInvocation at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: HttpRequest to SimpleType: HttpRequest at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleType: Header to VariableDeclarationStatement at 1", "INS Block to IfStatement at 1", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: state to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: isCompleted to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 1", "INS QualifiedName: HttpHeaders.TRANSFER_ENCODING to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS Block to IfStatement at 1", "INS MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 15", "MOV VariableDeclarationStatement to Block at 15"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleName: earlyResponse to VariableDeclarationFragment at 0", "INS PrimitiveType: boolean to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS Modifier: volatile to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 22", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 22", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: earlyResponse to FieldAccess at 1", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS FieldAccess to ReturnStatement at 0", "INS Block to MethodDeclaration at 3", "INS ReturnStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 1", "INS SimpleName: b to SingleVariableDeclaration at 2", "INS SimpleName: setEarlyResponse to MethodDeclaration at 2", "INS ExpressionStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 23", "INS PrimitiveType: void to MethodDeclaration at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: b to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: earlyResponse to FieldAccess at 1", "INS Block to MethodDeclaration at 4", "INS Modifier: public to MethodDeclaration at 0", "INS Modifier: final to SingleVariableDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 26", "operations": ["INS Block to IfStatement at 1", "INS SimpleName: earlyResponse to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS Block to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 26", "INS Modifier: public to MethodDeclaration at 1", "INS IfStatement to Block at 7", "INS FieldAccess to IfStatement at 0", "INS SimpleName: toString to MethodDeclaration at 3"]}, {"root": "INS TagElement: @param to Javadoc at 2", "operations": ["INS TextElement:  will be used. to TagElement: @param at 4", "INS TextElement:  null to TagElement: @code at 0", "INS SimpleName: INSTANCE to MemberRef at 1", "INS TextElement:  Connection re-use strategy. If  to TagElement: @param at 1", "INS SimpleName: DefaultConnectionReuseStrategy to MemberRef at 0", "INS TagElement: @code to TagElement: @param at 2", "INS TagElement: @link to TagElement: @param at 3", "INS TagElement: @param to Javadoc at 2", "INS MemberRef to TagElement: @link at 0", "INS SimpleName: connReuseStrategy to TagElement: @param at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS QualifiedName: DefaultConnectionReuseStrategy.INSTANCE to ConditionalExpression at 2", "INS SimpleName: connReuseStrategy to ConditionalExpression at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: connReuseStrategy to FieldAccess at 1", "INS ExpressionStatement to Block at 2", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: connReuseStrategy to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS ConditionalExpression to Assignment: = at 1", "INS InfixExpression: != to ConditionalExpression at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2", "MOV ExpressionStatement to Block at 1", "MOV IfStatement to Block at 5", "MOV VariableDeclarationStatement to Block at 3", "MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 15", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS StringLiteral: \"HTTP request\" to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS Block to IfStatement at 1", "INS SimpleName: request to Assignment: = at 0", "INS SimpleName: notNull to MethodInvocation at 1", "INS SimpleName: peek to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getRequestQueue to MethodInvocation at 1", "INS IfStatement to Block at 15", "INS SimpleName: Asserts to MethodInvocation at 0", "INS SimpleName: pipelined to IfStatement at 0", "INS SimpleName: state to MethodInvocation at 0", "INS SimpleName: request to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "INS IfStatement to Block at 16", "operations": ["INS SimpleName: handler to MethodInvocation at 3", "INS MethodInvocation to PrefixExpression: ! at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 16", "INS ExpressionStatement to Block at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: conn to MethodInvocation at 1", "INS SimpleName: isEarlyResponse to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: state to MethodInvocation at 2", "INS Block to IfStatement at 2", "INS SimpleName: state to MethodInvocation at 0", "INS SimpleName: state to MethodInvocation at 0", "INS QualifiedName: MessageState.COMPLETED to MethodInvocation at 2", "INS SimpleName: processResponse to MethodInvocation at 0", "INS IfStatement to Block at 2", "INS SimpleName: setResponseState to MethodInvocation at 1", "INS Block to IfStatement at 1"]}, {"root": "INS IfStatement to Block at 6", "operations": ["INS IfStatement to Block at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: processResponse to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: setResponseState to MethodInvocation at 1", "INS SimpleName: isEarlyResponse to MethodInvocation at 1", "INS SimpleName: state to MethodInvocation at 0", "INS SimpleName: state to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS QualifiedName: MessageState.COMPLETED to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to Block at 6", "INS ExpressionStatement to Block at 0", "INS SimpleName: handler to MethodInvocation at 3", "INS SimpleName: conn to MethodInvocation at 1", "INS SimpleName: state to MethodInvocation at 0", "INS Block to IfStatement at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: state to MethodInvocation at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: HttpResponse to VariableDeclarationStatement at 1", "INS SimpleName: response to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getResponse to MethodInvocation at 1", "INS SimpleName: HttpResponse to SimpleType: HttpResponse at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleType: HttpContext to VariableDeclarationStatement at 1", "INS SimpleName: handler to MethodInvocation at 0", "INS SimpleName: getContext to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: context to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: HttpContext to SimpleType: HttpContext at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS SimpleName: request to VariableDeclarationFragment at 0", "INS SimpleType: HttpRequest to VariableDeclarationStatement at 1", "INS SimpleName: HttpRequest to SimpleType: HttpRequest at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS VariableDeclarationStatement to Block at 3", "INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 5"]}, {"root": "INS IfStatement to Block at 6", "operations": ["INS SimpleName: connReuseStrategy to FieldAccess at 1", "INS PrefixExpression: ! to InfixExpression: || at 1", "INS SimpleName: request to MethodInvocation at 2", "INS SimpleName: response to MethodInvocation at 3", "INS IfStatement to Block at 6", "INS InfixExpression: || to IfStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS FieldAccess to MethodInvocation at 0", "INS SimpleName: context to MethodInvocation at 4", "INS SimpleName: keepAlive to MethodInvocation at 1", "INS ThisExpression to FieldAccess at 0"]}, {"root": "INS IfStatement to Block at 8", "operations": ["INS IfStatement to Block at 8", "INS SimpleName: close to MethodInvocation at 1", "INS SimpleName: isDone to MethodInvocation at 1", "INS SimpleName: handler to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: handler to MethodInvocation at 0", "INS MethodInvocation to IfStatement at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 12", "operations": ["INS SimpleName: setEarlyResponse to MethodInvocation at 1", "INS ExpressionStatement to Block at 12", "INS BooleanLiteral: false to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: state to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 0", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: String to MethodDeclaration at 2", "MOV SimpleName: toString to MethodDeclaration at 2"]}, {"root": "UPDATE from toString to isEarlyResponse", "operations": ["UPD SimpleName: toString from toString to isEarlyResponse"]}, {"root": "UPDATE from  4.4 to  5.0", "operations": ["UPD TextElement:  4.4 from  4.4 to  5.0"]}, {"root": "INS NullLiteral to ConstructorInvocation at 2", "operations": ["INS NullLiteral to ConstructorInvocation at 2"]}, {"root": "INS NullLiteral to ConstructorInvocation at 2", "operations": ["INS NullLiteral to ConstructorInvocation at 2"]}, {"root": "INS Block to IfStatement at 2", "operations": ["INS IfStatement to Block at 2", "INS Block to IfStatement at 2", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: MessageState.COMPLETED to MethodInvocation at 2", "INS SimpleName: state to MethodInvocation at 0", "INS SimpleName: setRequestState to MethodInvocation at 1", "INS SimpleName: pipelined to IfStatement at 0", "INS Block to IfStatement at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2", "MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "INS SimpleName: pipelined to IfStatement at 0", "operations": ["INS SimpleName: pipelined to IfStatement at 0"]}, {"root": "INS Block to IfStatement at 2", "operations": ["INS Block to IfStatement at 2", "INS SimpleName: request to Assignment: = at 0", "INS SimpleName: state to MethodInvocation at 0", "INS SimpleName: getRequest to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV PrefixExpression: ! to InfixExpression: || at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 5", "MOV IfStatement to Block at 6", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1", "MOV IfStatement to Block at 3", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 4", "MOV ReturnStatement to Block at 9", "MOV ExpressionStatement to Block at 8"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 4"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: requestOutput to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setEarlyResponse to MethodInvocation at 1", "INS SimpleName: state to MethodInvocation at 0", "INS ExpressionStatement to Block at 3", "INS BooleanLiteral: true to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS QualifiedName: MessageState.BODY_STREAM to MethodInvocation at 2", "INS SimpleName: setRequestState to MethodInvocation at 1", "INS ExpressionStatement to Block at 4", "INS SimpleName: state to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from \"; response: \" to \"[outgoing \"", "operations": ["UPD StringLiteral: \"; response: \" from \"; response: \" to \"[outgoing \""]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: buf to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \" \" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: append to MethodInvocation at 1"]}, {"root": "UPDATE from \"; valid: \" to \"; incoming \"", "operations": ["UPD StringLiteral: \"; valid: \" from \"; valid: \" to \"; incoming \""]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: buf to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: append to MethodInvocation at 1", "INS StringLiteral: \" \" to MethodInvocation at 2"]}, {"root": "UPDATE from \";\" to \"]\"", "operations": ["UPD StringLiteral: \";\" from \";\" to \"]\""]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: state to MethodInvocation at 0", "INS SimpleName: setRequest to MethodInvocation at 1", "INS NullLiteral to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 1", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1"]}, {"root": "INS SimpleName: pipelined to IfStatement at 0", "operations": ["INS SimpleName: pipelined to IfStatement at 0"]}, {"root": "INS Block to IfStatement at 3", "operations": ["INS Block to IfStatement at 3"]}, {"root": "UPDATE from resetOutput to requestOutput", "operations": ["UPD SimpleName: resetOutput from resetOutput to requestOutput"]}, {"root": "UPDATE from conn to state", "operations": ["UPD SimpleName: conn from conn to state"]}, {"root": "UPDATE from suspendOutput to setEarlyResponse", "operations": ["UPD SimpleName: suspendOutput from suspendOutput to setEarlyResponse"]}, {"root": "INS BooleanLiteral: true to MethodInvocation at 2", "operations": ["INS BooleanLiteral: true to MethodInvocation at 2"]}, {"root": "INS InfixExpression: == to IfStatement at 0", "operations": ["INS InfixExpression: == to IfStatement at 0", "INS QualifiedName: MessageState.COMPLETED to InfixExpression: == at 1"]}, {"root": "INS InfixExpression: == to IfStatement at 0", "operations": ["INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: getRequestState to MethodInvocation at 1", "INS SimpleName: state to MethodInvocation at 0", "INS InfixExpression: == to IfStatement at 0", "INS QualifiedName: MessageState.COMPLETED to InfixExpression: == at 1"]}, {"root": "INS InfixExpression: == to IfStatement at 0", "operations": ["INS MethodInvocation to InfixExpression: == at 0", "INS QualifiedName: MessageState.READY to InfixExpression: == at 1", "INS InfixExpression: == to IfStatement at 0"]}, {"root": "INS StringLiteral: \" (early response)\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \" (early response)\" to MethodInvocation at 2"]}, {"root": "INS QualifiedName: MessageState.READY to MethodInvocation at 2", "operations": ["INS QualifiedName: MessageState.READY to MethodInvocation at 2"]}, {"root": "MOVE from PrefixExpression: !", "operations": ["MOV MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS SimpleName: state to MethodInvocation at 0", "INS SimpleName: setRequest to MethodInvocation at 1", "INS NullLiteral to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV MethodInvocation to InfixExpression: == at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: state to MethodInvocation at 0", "MOV SimpleName: isValid to MethodInvocation at 1"]}, {"root": "UPDATE from isValid to getRequestState", "operations": ["UPD SimpleName: isValid from isValid to getRequestState"]}, {"root": "INS QualifiedName: MessageState.READY to MethodInvocation at 2", "operations": ["INS QualifiedName: MessageState.READY to MethodInvocation at 2"]}, {"root": "DEL IfStatement", "operations": ["DEL StringLiteral: \"Expect-continue handshake cannot be used with request pipelining\"", "DEL SimpleType: ProtocolException", "DEL SimpleName: ProtocolException", "DEL ThrowStatement", "DEL Block", "DEL IfStatement", "DEL SimpleName: pipelined", "DEL InfixExpression: &&", "DEL ClassInstanceCreation", "DEL SimpleName: expectContinue"]}, {"root": "DEL ConditionalExpression", "operations": ["DEL ConditionalExpression", "DEL QualifiedName: MessageState.READY", "DEL QualifiedName: MessageState.COMPLETED", "DEL SimpleName: pipelined"]}, {"root": "DEL ConditionalExpression", "operations": ["DEL SimpleName: pipelined", "DEL ConditionalExpression", "DEL QualifiedName: MessageState.READY", "DEL QualifiedName: MessageState.COMPLETED"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: pipelined", "DEL IfStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL QualifiedName: MessageState.READY", "DEL NumberLiteral: 0", "DEL Block", "DEL SimpleName: compareTo"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL SimpleName: valid", "DEL ThisExpression"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL StringLiteral: \"; response state: \"", "DEL SimpleName: append", "DEL SimpleName: buf", "DEL ExpressionStatement", "DEL StringLiteral: \"; request: \"", "DEL MethodInvocation", "DEL SimpleName: buf", "DEL ExpressionStatement", "DEL StringLiteral: \"request state: \"", "DEL MethodInvocation", "DEL SimpleName: append", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: buf", "DEL Block", "DEL SimpleName: append"]}]}}, {"HttpAsyncRequestExecutor_diff": {"operations": ["Insert ImportDeclaration(13) into CompilationUnit(2303) at 6", "Insert ImportDeclaration(19) into CompilationUnit(2303) at 9", "Insert ImportDeclaration(41) into CompilationUnit(2303) at 20", "Insert QualifiedName: org.apache.http.ConnectionReuseStrategy(12) into ImportDeclaration(13) at 0", "Insert QualifiedName: org.apache.http.HeaderElements(18) into ImportDeclaration(19) at 0", "Insert QualifiedName: org.apache.http.impl.DefaultConnectionReuseStrategy(40) into ImportDeclaration(41) at 0", "Insert FieldDeclaration(156) into TypeDeclaration: class(2302) at 8", "Move FieldDeclaration(1720) into TypeDeclaration: class(2301) at 9", "Insert Modifier: private(150) into FieldDeclaration(156) at 0", "Insert Modifier: final(151) into FieldDeclaration(156) at 1", "Insert SimpleType: ConnectionReuseStrategy(153) into FieldDeclaration(156) at 2", "Insert VariableDeclarationFragment(155) into FieldDeclaration(156) at 3", "Insert SingleVariableDeclaration(212) into MethodDeclaration(252) at 4", "Insert Block(944) into MethodDeclaration(945) at 8", "Move VariableDeclarationStatement(878) into Block(1238) at 15", "Move VariableDeclarationStatement(884) into Block(1238) at 15", "Move VariableDeclarationStatement(1554) into Block(1843) at 0", "Insert FieldDeclaration(1970) into TypeDeclaration: class(2301) at 7", "Insert MethodDeclaration(2163) into TypeDeclaration: class(2301) at 22", "Insert MethodDeclaration(2178) into TypeDeclaration: class(2301) at 23", "Insert MethodDeclaration(2300) into TypeDeclaration: class(2301) at 26", "Insert SimpleName: ConnectionReuseStrategy(152) into SimpleType: ConnectionReuseStrategy(153) at 0", "Insert SimpleName: connReuseStrategy(154) into VariableDeclarationFragment(155) at 0", "Insert TagElement: @param(181) into Javadoc(201) at 2", "Insert Modifier: final(208) into SingleVariableDeclaration(212) at 0", "Insert SimpleType: ConnectionReuseStrategy(210) into SingleVariableDeclaration(212) at 1", "Insert SimpleName: connReuseStrategy(211) into SingleVariableDeclaration(212) at 2", "Insert ExpressionStatement(239) into Block(251) at 2", "Move VariableDeclarationStatement(714) into Block(944) at 0", "Move ExpressionStatement(720) into Block(944) at 1", "Move ExpressionStatement(739) into Block(944) at 2", "Move VariableDeclarationStatement(748) into Block(944) at 3", "Move ExpressionStatement(754) into Block(944) at 4", "Move IfStatement(766) into Block(944) at 5", "Insert IfStatement(943) into Block(944) at 6", "Insert IfStatement(1190) into Block(1238) at 14", "Insert IfStatement(1237) into Block(1238) at 15", "Insert IfStatement(1343) into Block(1344) at 6", "Insert VariableDeclarationStatement(1712) into Block(1843) at 0", "Insert VariableDeclarationStatement(1721) into Block(1843) at 1", "Insert VariableDeclarationStatement(1742) into Block(1843) at 3", "Move ExpressionStatement(899) into Block(1843) at 5", "Insert IfStatement(1786) into Block(1843) at 6", "Insert IfStatement(1799) into Block(1843) at 8", "Insert ExpressionStatement(1828) into Block(1843) at 12", "Insert Modifier: private(1965) into FieldDeclaration(1970) at 0", "Insert Modifier: volatile(1966) into FieldDeclaration(1970) at 1", "Insert PrimitiveType: boolean(1967) into FieldDeclaration(1970) at 2", "Insert VariableDeclarationFragment(1969) into FieldDeclaration(1970) at 3", "Move ExpressionStatement(1743) into Block(2012) at 5", "Move Modifier: public(1921) into MethodDeclaration(2163) at 0", "Insert PrimitiveType: boolean(2156) into MethodDeclaration(2163) at 1", "Update SimpleName: toString(1924) to isEarlyResponse", "Move SimpleName: toString(1924) into MethodDeclaration(2163) at 2", "Insert Block(2162) into MethodDeclaration(2163) at 3", "Insert Modifier: public(2164) into MethodDeclaration(2178) at 0", "Insert PrimitiveType: void(2165) into MethodDeclaration(2178) at 1", "Insert SimpleName: setEarlyResponse(2166) into MethodDeclaration(2178) at 2", "Insert SingleVariableDeclaration(2170) into MethodDeclaration(2178) at 3", "Insert Block(2177) into MethodDeclaration(2178) at 4", "Move MarkerAnnotation(1920) into MethodDeclaration(2300) at 0", "Insert Modifier: public(2201) into MethodDeclaration(2300) at 1", "Move SimpleType: String(1923) into MethodDeclaration(2300) at 2", "Insert SimpleName: toString(2204) into MethodDeclaration(2300) at 3", "Insert Block(2299) into MethodDeclaration(2300) at 4", "Insert SimpleName: connReuseStrategy(172) into TagElement: @param(181) at 0", "Insert TextElement:  Connection re-use strategy. If (173) into TagElement: @param(181) at 1", "Insert TagElement: @code(175) into TagElement: @param(181) at 2", "Insert TagElement: @link(179) into TagElement: @param(181) at 3", "Insert TextElement:  will be used.(180) into TagElement: @param(181) at 4", "Update TextElement:  4.4(176) to  5.0", "Insert SimpleName: ConnectionReuseStrategy(209) into SimpleType: ConnectionReuseStrategy(210) at 0", "Insert Assignment: =(238) into ExpressionStatement(239) at 0", "Insert NullLiteral(266) into ConstructorInvocation(267) at 2", "Insert NullLiteral(274) into ConstructorInvocation(275) at 2", "Insert Block(725) into IfStatement(726) at 2", "Insert MethodInvocation(811) into IfStatement(943) at 0", "Insert Block(892) into IfStatement(943) at 1", "Insert Block(942) into IfStatement(943) at 2", "Insert SimpleName: pipelined(1157) into IfStatement(1190) at 0", "Insert Block(1172) into IfStatement(1190) at 1", "Move Block(917) into IfStatement(1190) at 2", "Move PrefixExpression: !(1059) into IfStatement(1237) at 0", "Insert Block(1236) into IfStatement(1237) at 1", "Move MethodInvocation(1149) into IfStatement(1343) at 0", "Insert Block(1342) into IfStatement(1343) at 1", "Insert Modifier: final(1704) into VariableDeclarationStatement(1712) at 0", "Insert SimpleType: HttpResponse(1706) into VariableDeclarationStatement(1712) at 1", "Insert VariableDeclarationFragment(1711) into VariableDeclarationStatement(1712) at 2", "Insert Modifier: final(1713) into VariableDeclarationStatement(1721) at 0", "Insert SimpleType: HttpContext(1715) into VariableDeclarationStatement(1721) at 1", "Insert VariableDeclarationFragment(1720) into VariableDeclarationStatement(1721) at 2", "Insert Modifier: final(1737) into VariableDeclarationStatement(1742) at 0", "Insert SimpleType: HttpRequest(1739) into VariableDeclarationStatement(1742) at 1", "Insert VariableDeclarationFragment(1741) into VariableDeclarationStatement(1742) at 2", "Insert SimpleName: pipelined(1743) into IfStatement(1760) at 0", "Move Block(900) into IfStatement(1760) at 1", "Insert Block(1759) into IfStatement(1760) at 2", "Insert InfixExpression: ||(1780) into IfStatement(1786) at 0", "Move Block(1534) into IfStatement(1786) at 1", "Insert MethodInvocation(1793) into IfStatement(1799) at 0", "Insert Block(1798) into IfStatement(1799) at 1", "Insert MethodInvocation(1827) into ExpressionStatement(1828) at 0", "Insert SimpleName: earlyResponse(1968) into VariableDeclarationFragment(1969) at 0", "Insert ReturnStatement(2161) into Block(2162) at 0", "Insert Modifier: final(2167) into SingleVariableDeclaration(2170) at 0", "Insert PrimitiveType: boolean(2168) into SingleVariableDeclaration(2170) at 1", "Insert SimpleName: b(2169) into SingleVariableDeclaration(2170) at 2", "Insert ExpressionStatement(2176) into Block(2177) at 0", "Move VariableDeclarationStatement(1933) into Block(2299) at 0", "Move ExpressionStatement(1983) into Block(2299) at 1", "Move ExpressionStatement(1945) into Block(2299) at 2", "Move IfStatement(1966) into Block(2299) at 3", "Move ExpressionStatement(2004) into Block(2299) at 4", "Move ExpressionStatement(1978) into Block(2299) at 5", "Move IfStatement(1999) into Block(2299) at 6", "Insert IfStatement(2289) into Block(2299) at 7", "Move ExpressionStatement(2016) into Block(2299) at 8", "Move ReturnStatement(2020) into Block(2299) at 9", "Insert TextElement:  null(174) into TagElement: @code(175) at 0", "Insert MemberRef(178) into TagElement: @link(179) at 0", "Insert FieldAccess(231) into Assignment: =(238) at 0", "Insert ConditionalExpression(237) into Assignment: =(238) at 1", "Move ExpressionStatement(670) into Block(725) at 0", "Move ExpressionStatement(674) into Block(725) at 1", "Insert IfStatement(724) into Block(725) at 2", "Insert SimpleName: state(809) into MethodInvocation(811) at 0", "Insert SimpleName: isEarlyResponse(810) into MethodInvocation(811) at 1", "Insert VariableDeclarationStatement(820) into Block(892) at 0", "Insert VariableDeclarationStatement(830) into Block(892) at 1", "Insert VariableDeclarationStatement(845) into Block(892) at 2", "Insert IfStatement(873) into Block(892) at 3", "Move ExpressionStatement(1018) into Block(892) at 4", "Insert IfStatement(891) into Block(892) at 5", "Insert ExpressionStatement(898) into Block(942) at 0", "Insert IfStatement(941) into Block(942) at 1", "Insert ExpressionStatement(1097) into Block(1108) at 2", "Insert ExpressionStatement(1102) into Block(1108) at 3", "Insert ExpressionStatement(1107) into Block(1108) at 4", "Insert ExpressionStatement(1165) into Block(1172) at 0", "Insert ExpressionStatement(1171) into Block(1172) at 1", "Move ExpressionStatement(1064) into Block(1236) at 0", "Move ExpressionStatement(1068) into Block(1236) at 1", "Insert IfStatement(1235) into Block(1236) at 2", "Insert IfStatement(1341) into Block(1342) at 0", "Insert SimpleName: HttpResponse(1705) into SimpleType: HttpResponse(1706) at 0", "Insert SimpleName: response(1707) into VariableDeclarationFragment(1711) at 0", "Insert MethodInvocation(1710) into VariableDeclarationFragment(1711) at 1", "Insert SimpleName: HttpContext(1714) into SimpleType: HttpContext(1715) at 0", "Insert SimpleName: context(1716) into VariableDeclarationFragment(1720) at 0", "Insert MethodInvocation(1719) into VariableDeclarationFragment(1720) at 1", "Insert SimpleName: HttpRequest(1738) into SimpleType: HttpRequest(1739) at 0", "Insert SimpleName: request(1740) into VariableDeclarationFragment(1741) at 0", "Insert ExpressionStatement(1758) into Block(1759) at 0", "Move PrefixExpression: !(1529) into InfixExpression: ||(1780) at 0", "Insert PrefixExpression: !(1779) into InfixExpression: ||(1780) at 1", "Insert SimpleName: handler(1791) into MethodInvocation(1793) at 0", "Insert SimpleName: isDone(1792) into MethodInvocation(1793) at 1", "Insert ExpressionStatement(1797) into Block(1798) at 0", "Insert SimpleName: state(1824) into MethodInvocation(1827) at 0", "Insert SimpleName: setEarlyResponse(1825) into MethodInvocation(1827) at 1", "Insert BooleanLiteral: false(1826) into MethodInvocation(1827) at 2", "Insert FieldAccess(2160) into ReturnStatement(2161) at 0", "Insert Assignment: =(2175) into ExpressionStatement(2176) at 0", "Insert FieldAccess(2282) into IfStatement(2289) at 0", "Insert Block(2288) into IfStatement(2289) at 1", "Insert SimpleName: DefaultConnectionReuseStrategy(176) into MemberRef(178) at 0", "Insert SimpleName: INSTANCE(177) into MemberRef(178) at 1", "Insert ThisExpression(229) into FieldAccess(231) at 0", "Insert SimpleName: connReuseStrategy(230) into FieldAccess(231) at 1", "Insert InfixExpression: !=(234) into ConditionalExpression(237) at 0", "Insert SimpleName: connReuseStrategy(235) into ConditionalExpression(237) at 1", "Insert QualifiedName: DefaultConnectionReuseStrategy.INSTANCE(236) into ConditionalExpression(237) at 2", "Insert SimpleName: pipelined(706) into IfStatement(724) at 0", "Move Block(683) into IfStatement(724) at 1", "Insert Block(723) into IfStatement(724) at 2", "Insert Modifier: final(812) into VariableDeclarationStatement(820) at 0", "Insert SimpleType: HttpRequest(814) into VariableDeclarationStatement(820) at 1", "Insert VariableDeclarationFragment(819) into VariableDeclarationStatement(820) at 2", "Insert Modifier: final(821) into VariableDeclarationStatement(830) at 0", "Insert SimpleType: Header(823) into VariableDeclarationStatement(830) at 1", "Insert VariableDeclarationFragment(829) into VariableDeclarationStatement(830) at 2", "Insert Modifier: final(831) into VariableDeclarationStatement(845) at 0", "Insert PrimitiveType: boolean(832) into VariableDeclarationStatement(845) at 1", "Insert VariableDeclarationFragment(844) into VariableDeclarationStatement(845) at 2", "Insert SimpleName: chunked(846) into IfStatement(873) at 0", "Insert Block(851) into IfStatement(873) at 1", "Insert Block(872) into IfStatement(873) at 2", "Insert InfixExpression: ==(883) into IfStatement(891) at 0", "Insert Block(890) into IfStatement(891) at 1", "Insert MethodInvocation(897) into ExpressionStatement(898) at 0", "Insert MethodInvocation(901) into IfStatement(941) at 0", "Insert Block(940) into IfStatement(941) at 1", "Insert MethodInvocation(1096) into ExpressionStatement(1097) at 0", "Insert MethodInvocation(1101) into ExpressionStatement(1102) at 0", "Insert MethodInvocation(1106) into ExpressionStatement(1107) at 0", "Insert Assignment: =(1164) into ExpressionStatement(1165) at 0", "Insert MethodInvocation(1170) into ExpressionStatement(1171) at 0", "Insert PrefixExpression: !(1208) into IfStatement(1235) at 0", "Insert Block(1215) into IfStatement(1235) at 1", "Insert Block(1234) into IfStatement(1235) at 2", "Insert PrefixExpression: !(1314) into IfStatement(1341) at 0", "Insert Block(1321) into IfStatement(1341) at 1", "Insert Block(1340) into IfStatement(1341) at 2", "Insert SimpleName: state(1708) into MethodInvocation(1710) at 0", "Insert SimpleName: getResponse(1709) into MethodInvocation(1710) at 1", "Insert SimpleName: handler(1717) into MethodInvocation(1719) at 0", "Insert SimpleName: getContext(1718) into MethodInvocation(1719) at 1", "Insert Assignment: =(1757) into ExpressionStatement(1758) at 0", "Insert MethodInvocation(1778) into PrefixExpression: !(1779) at 0", "Insert MethodInvocation(1796) into ExpressionStatement(1797) at 0", "Insert ThisExpression(2158) into FieldAccess(2160) at 0", "Insert SimpleName: earlyResponse(2159) into FieldAccess(2160) at 1", "Insert FieldAccess(2173) into Assignment: =(2175) at 0", "Insert SimpleName: b(2174) into Assignment: =(2175) at 1", "Update StringLiteral: \"; response: \"(1981) to \"[outgoing \"", "Insert ExpressionStatement(2235) into Block(2245) at 0", "Update StringLiteral: \"; valid: \"(2002) to \"; incoming \"", "Insert ExpressionStatement(2268) into Block(2278) at 0", "Insert ThisExpression(2280) into FieldAccess(2282) at 0", "Insert SimpleName: earlyResponse(2281) into FieldAccess(2282) at 1", "Move ExpressionStatement(2011) into Block(2288) at 0", "Update StringLiteral: \";\"(2014) to \"]\"", "Insert SimpleName: connReuseStrategy(232) into InfixExpression: !=(234) at 0", "Insert NullLiteral(233) into InfixExpression: !=(234) at 1", "Insert ExpressionStatement(716) into Block(717) at 1", "Insert ExpressionStatement(722) into Block(723) at 0", "Insert SimpleName: HttpRequest(813) into SimpleType: HttpRequest(814) at 0", "Insert SimpleName: request(815) into VariableDeclarationFragment(819) at 0", "Insert MethodInvocation(818) into VariableDeclarationFragment(819) at 1", "Insert SimpleName: Header(822) into SimpleType: Header(823) at 0", "Insert SimpleName: header(824) into VariableDeclarationFragment(829) at 0", "Insert MethodInvocation(828) into VariableDeclarationFragment(829) at 1", "Insert SimpleName: chunked(833) into VariableDeclarationFragment(844) at 0", "Insert InfixExpression: &&(843) into VariableDeclarationFragment(844) at 1", "Insert ExpressionStatement(850) into Block(851) at 0", "Move ExpressionStatement(772) into Block(872) at 0", "Insert IfStatement(871) into Block(872) at 1", "Insert MethodInvocation(881) into InfixExpression: ==(883) at 0", "Insert QualifiedName: MessageState.COMPLETED(882) into InfixExpression: ==(883) at 1", "Insert ExpressionStatement(889) into Block(890) at 0", "Insert SimpleName: handler(893) into MethodInvocation(897) at 0", "Insert SimpleName: produceContent(894) into MethodInvocation(897) at 1", "Insert SimpleName: encoder(895) into MethodInvocation(897) at 2", "Insert SimpleName: conn(896) into MethodInvocation(897) at 3", "Insert SimpleName: encoder(899) into MethodInvocation(901) at 0", "Insert SimpleName: isCompleted(900) into MethodInvocation(901) at 1", "Move ExpressionStatement(779) into Block(940) at 0", "Move VariableDeclarationStatement(794) into Block(940) at 1", "Move IfStatement(804) into Block(940) at 2", "Insert SimpleName: conn(1094) into MethodInvocation(1096) at 0", "Insert SimpleName: requestOutput(1095) into MethodInvocation(1096) at 1", "Insert SimpleName: state(1098) into MethodInvocation(1101) at 0", "Insert SimpleName: setEarlyResponse(1099) into MethodInvocation(1101) at 1", "Insert BooleanLiteral: true(1100) into MethodInvocation(1101) at 2", "Insert SimpleName: state(1103) into MethodInvocation(1106) at 0", "Insert SimpleName: setRequestState(1104) into MethodInvocation(1106) at 1", "Insert QualifiedName: MessageState.BODY_STREAM(1105) into MethodInvocation(1106) at 2", "Insert SimpleName: request(1158) into Assignment: =(1164) at 0", "Insert MethodInvocation(1163) into Assignment: =(1164) at 1", "Insert SimpleName: Asserts(1166) into MethodInvocation(1170) at 0", "Insert SimpleName: notNull(1167) into MethodInvocation(1170) at 1", "Insert SimpleName: request(1168) into MethodInvocation(1170) at 2", "Insert StringLiteral: \"HTTP request\"(1169) into MethodInvocation(1170) at 3", "Insert MethodInvocation(1207) into PrefixExpression: !(1208) at 0", "Insert ExpressionStatement(1214) into Block(1215) at 0", "Insert ExpressionStatement(1220) into Block(1234) at 0", "Move IfStatement(1076) into Block(1234) at 1", "Insert MethodInvocation(1313) into PrefixExpression: !(1314) at 0", "Insert ExpressionStatement(1320) into Block(1321) at 0", "Insert ExpressionStatement(1326) into Block(1340) at 0", "Move IfStatement(1157) into Block(1340) at 1", "Insert SimpleName: request(1753) into Assignment: =(1757) at 0", "Insert MethodInvocation(1756) into Assignment: =(1757) at 1", "Insert FieldAccess(1773) into MethodInvocation(1778) at 0", "Insert SimpleName: keepAlive(1774) into MethodInvocation(1778) at 1", "Insert SimpleName: request(1775) into MethodInvocation(1778) at 2", "Insert SimpleName: response(1776) into MethodInvocation(1778) at 3", "Insert SimpleName: context(1777) into MethodInvocation(1778) at 4", "Insert SimpleName: handler(1794) into MethodInvocation(1796) at 0", "Insert SimpleName: close(1795) into MethodInvocation(1796) at 1", "Insert ThisExpression(2171) into FieldAccess(2173) at 0", "Insert SimpleName: earlyResponse(2172) into FieldAccess(2173) at 1", "Insert MethodInvocation(2234) into ExpressionStatement(2235) at 0", "Insert MethodInvocation(2267) into ExpressionStatement(2268) at 0", "Insert MethodInvocation(715) into ExpressionStatement(716) at 0", "Insert MethodInvocation(721) into ExpressionStatement(722) at 0", "Insert SimpleName: state(816) into MethodInvocation(818) at 0", "Insert SimpleName: getRequest(817) into MethodInvocation(818) at 1", "Insert SimpleName: request(825) into MethodInvocation(828) at 0", "Insert SimpleName: getFirstHeader(826) into MethodInvocation(828) at 1", "Insert QualifiedName: HttpHeaders.TRANSFER_ENCODING(827) into MethodInvocation(828) at 2", "Insert InfixExpression: !=(836) into InfixExpression: &&(843) at 0", "Insert MethodInvocation(842) into InfixExpression: &&(843) at 1", "Insert MethodInvocation(849) into ExpressionStatement(850) at 0", "Insert PrefixExpression: !(861) into IfStatement(871) at 0", "Insert Block(870) into IfStatement(871) at 1", "Insert SimpleName: state(879) into MethodInvocation(881) at 0", "Insert SimpleName: getResponseState(880) into MethodInvocation(881) at 1", "Insert MethodInvocation(888) into ExpressionStatement(889) at 0", "Insert SimpleName: pipelined(921) into IfStatement(939) at 0", "Insert Block(938) into IfStatement(939) at 2", "Update SimpleName: resetOutput(1026) to requestOutput", "Update SimpleName: conn(1029) to state", "Update SimpleName: suspendOutput(1030) to setEarlyResponse", "Insert BooleanLiteral: true(1120) into MethodInvocation(1121) at 2", "Insert MethodInvocation(1161) into MethodInvocation(1163) at 0", "Insert SimpleName: peek(1162) into MethodInvocation(1163) at 1", "Insert SimpleName: state(1205) into MethodInvocation(1207) at 0", "Insert SimpleName: isEarlyResponse(1206) into MethodInvocation(1207) at 1", "Insert MethodInvocation(1213) into ExpressionStatement(1214) at 0", "Insert MethodInvocation(1219) into ExpressionStatement(1220) at 0", "Insert InfixExpression: ==(1225) into IfStatement(1233) at 0", "Insert SimpleName: state(1311) into MethodInvocation(1313) at 0", "Insert SimpleName: isEarlyResponse(1312) into MethodInvocation(1313) at 1", "Insert MethodInvocation(1319) into ExpressionStatement(1320) at 0", "Insert MethodInvocation(1325) into ExpressionStatement(1326) at 0", "Insert InfixExpression: ==(1331) into IfStatement(1339) at 0", "Insert InfixExpression: ==(1386) into IfStatement(1405) at 0", "Insert SimpleName: state(1754) into MethodInvocation(1756) at 0", "Insert SimpleName: getRequest(1755) into MethodInvocation(1756) at 1", "Insert ThisExpression(1771) into FieldAccess(1773) at 0", "Insert SimpleName: connReuseStrategy(1772) into FieldAccess(1773) at 1", "Insert SimpleName: buf(2231) into MethodInvocation(2234) at 0", "Insert SimpleName: append(2232) into MethodInvocation(2234) at 1", "Insert StringLiteral: \" \"(2233) into MethodInvocation(2234) at 2", "Insert SimpleName: buf(2264) into MethodInvocation(2267) at 0", "Insert SimpleName: append(2265) into MethodInvocation(2267) at 1", "Insert StringLiteral: \" \"(2266) into MethodInvocation(2267) at 2", "Insert StringLiteral: \" (early response)\"(2285) into MethodInvocation(2286) at 2", "Insert QualifiedName: MessageState.READY(709) into MethodInvocation(710) at 2", "Insert SimpleName: state(712) into MethodInvocation(715) at 0", "Insert SimpleName: setRequest(713) into MethodInvocation(715) at 1", "Insert NullLiteral(714) into MethodInvocation(715) at 2", "Insert SimpleName: state(718) into MethodInvocation(721) at 0", "Insert SimpleName: setRequestState(719) into MethodInvocation(721) at 1", "Insert QualifiedName: MessageState.COMPLETED(720) into MethodInvocation(721) at 2", "Insert SimpleName: header(834) into InfixExpression: !=(836) at 0", "Insert NullLiteral(835) into InfixExpression: !=(836) at 1", "Insert QualifiedName: HeaderElements.CHUNKED_ENCODING(837) into MethodInvocation(842) at 0", "Insert SimpleName: equalsIgnoreCase(838) into MethodInvocation(842) at 1", "Insert MethodInvocation(841) into MethodInvocation(842) at 2", "Insert SimpleName: encoder(847) into MethodInvocation(849) at 0", "Insert SimpleName: complete(848) into MethodInvocation(849) at 1", "Move MethodInvocation(775) into PrefixExpression: !(861) at 0", "Move ExpressionStatement(1041) into Block(870) at 0", "Move ExpressionStatement(1013) into Block(870) at 1", "Insert SimpleName: processResponse(884) into MethodInvocation(888) at 0", "Insert SimpleName: conn(885) into MethodInvocation(888) at 1", "Insert SimpleName: state(886) into MethodInvocation(888) at 2", "Insert SimpleName: handler(887) into MethodInvocation(888) at 3", "Insert ExpressionStatement(931) into Block(932) at 1", "Move ExpressionStatement(1037) into Block(938) at 0", "Insert SimpleName: state(1159) into MethodInvocation(1161) at 0", "Insert SimpleName: getRequestQueue(1160) into MethodInvocation(1161) at 1", "Insert SimpleName: processResponse(1209) into MethodInvocation(1213) at 0", "Insert SimpleName: conn(1210) into MethodInvocation(1213) at 1", "Insert SimpleName: state(1211) into MethodInvocation(1213) at 2", "Insert SimpleName: handler(1212) into MethodInvocation(1213) at 3", "Insert SimpleName: state(1216) into MethodInvocation(1219) at 0", "Insert SimpleName: setResponseState(1217) into MethodInvocation(1219) at 1", "Insert QualifiedName: MessageState.COMPLETED(1218) into MethodInvocation(1219) at 2", "Move MethodInvocation(1186) into InfixExpression: ==(1225) at 0", "Insert QualifiedName: MessageState.COMPLETED(1224) into InfixExpression: ==(1225) at 1", "Insert SimpleName: processResponse(1315) into MethodInvocation(1319) at 0", "Insert SimpleName: conn(1316) into MethodInvocation(1319) at 1", "Insert SimpleName: state(1317) into MethodInvocation(1319) at 2", "Insert SimpleName: handler(1318) into MethodInvocation(1319) at 3", "Insert SimpleName: state(1322) into MethodInvocation(1325) at 0", "Insert SimpleName: setResponseState(1323) into MethodInvocation(1325) at 1", "Insert QualifiedName: MessageState.COMPLETED(1324) into MethodInvocation(1325) at 2", "Insert MethodInvocation(1329) into InfixExpression: ==(1331) at 0", "Insert QualifiedName: MessageState.COMPLETED(1330) into InfixExpression: ==(1331) at 1", "Insert MethodInvocation(1384) into InfixExpression: ==(1386) at 0", "Insert QualifiedName: MessageState.READY(1385) into InfixExpression: ==(1386) at 1", "Move ExpressionStatement(1195) into Block(1404) at 0", "Insert SimpleName: header(839) into MethodInvocation(841) at 0", "Insert SimpleName: getValue(840) into MethodInvocation(841) at 1", "Insert MethodInvocation(930) into ExpressionStatement(931) at 0", "Insert SimpleName: state(1327) into MethodInvocation(1329) at 0", "Insert SimpleName: getRequestState(1328) into MethodInvocation(1329) at 1", "Move SimpleName: state(1210) into MethodInvocation(1384) at 0", "Update SimpleName: isValid(1211) to getRequestState", "Move SimpleName: isValid(1211) into MethodInvocation(1384) at 1", "Insert QualifiedName: MessageState.READY(924) into MethodInvocation(925) at 2", "Insert SimpleName: state(927) into MethodInvocation(930) at 0", "Insert SimpleName: setRequest(928) into MethodInvocation(930) at 1", "Insert NullLiteral(929) into MethodInvocation(930) at 2", "Delete SimpleName: expectContinue(616)", "Delete SimpleName: pipelined(617)", "Delete InfixExpression: &&(618)", "Delete SimpleName: ProtocolException(619)", "Delete SimpleType: ProtocolException(620)", "Delete StringLiteral: \"Expect-continue handshake cannot be used with request pipelining\"(621)", "Delete ClassInstanceCreation(622)", "Delete ThrowStatement(623)", "Delete Block(624)", "Delete IfStatement(625)", "Delete SimpleName: pipelined(677)", "Delete QualifiedName: MessageState.READY(678)", "Delete QualifiedName: MessageState.COMPLETED(679)", "Delete ConditionalExpression(680)", "Delete SimpleName: pipelined(797)", "Delete QualifiedName: MessageState.READY(798)", "Delete QualifiedName: MessageState.COMPLETED(799)", "Delete ConditionalExpression(800)", "Delete Block(805)", "Delete SimpleName: pipelined(885)", "Delete IfStatement(918)", "Delete SimpleName: compareTo(1187)", "Delete QualifiedName: MessageState.READY(1188)", "Delete MethodInvocation(1189)", "Delete NumberLiteral: 0(1190)", "Delete InfixExpression: !=(1191)", "Delete Block(1196)", "Delete IfStatement(1197)", "Delete MethodInvocation(1212)", "Delete ThisExpression(2007)", "Delete SimpleName: valid(2008)", "Delete FieldAccess(2009)", "Delete SimpleName: buf(1934)", "Delete SimpleName: append(1935)", "Delete StringLiteral: \"request state: \"(1936)", "Delete MethodInvocation(1937)", "Delete ExpressionStatement(1938)", "Delete SimpleName: buf(1946)", "Delete SimpleName: append(1947)", "Delete StringLiteral: \"; request: \"(1948)", "Delete MethodInvocation(1949)", "Delete ExpressionStatement(1950)", "Delete SimpleName: buf(1967)", "Delete SimpleName: append(1968)", "Delete StringLiteral: \"; response state: \"(1969)", "Delete MethodInvocation(1970)", "Delete ExpressionStatement(1971)", "Delete Block(2021)", "Delete MethodDeclaration(2022)"]}}, {"HttpAsyncRequester_cluster": {"actions": [{"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.http.ConnectionReuseStrategy", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.http.impl.DefaultConnectionReuseStrategy"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: connReuseStrategy", "DEL Modifier: private", "DEL SimpleName: ConnectionReuseStrategy", "DEL Modifier: final", "DEL FieldDeclaration", "DEL SimpleType: ConnectionReuseStrategy"]}, {"root": "DEL TagElement: @param", "operations": ["DEL TextElement:  Connection re-use strategy. If ", "DEL TextElement:  will be used.", "DEL TagElement: @link", "DEL SimpleName: INSTANCE", "DEL SimpleName: connReuseStrategy", "DEL TagElement: @code", "DEL TextElement:  null", "DEL TagElement: @param", "DEL SimpleName: DefaultConnectionReuseStrategy", "DEL MemberRef"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: ConnectionReuseStrategy", "DEL SimpleType: ConnectionReuseStrategy", "DEL Modifier: final", "DEL SimpleName: connReuseStrategy"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL NullLiteral", "DEL ExpressionStatement", "DEL SimpleName: connReuseStrategy", "DEL ThisExpression", "DEL SimpleName: connReuseStrategy", "DEL SimpleName: connReuseStrategy", "DEL FieldAccess", "DEL Assignment: =", "DEL ConditionalExpression", "DEL QualifiedName: DefaultConnectionReuseStrategy.INSTANCE", "DEL InfixExpression: !="]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL CastExpression", "DEL Modifier: public", "DEL SimpleType: HttpProcessor", "DEL SimpleType: ConnectionReuseStrategy", "DEL SimpleName: connReuseStrategy", "DEL SimpleName: HttpAsyncRequester", "DEL SimpleName: connReuseStrategy", "DEL TextElement:  4.3", "DEL TagElement: @since", "DEL SimpleName: httpprocessor", "DEL Modifier: final", "DEL TagElement", "DEL SimpleName: ExceptionLogger", "DEL Modifier: final", "DEL SimpleName: httpprocessor", "DEL Block", "DEL TextElement: Creates new instance of HttpAsyncRequester.", "DEL SimpleName: ConnectionReuseStrategy", "DEL SimpleName: HttpProcessor", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL Javadoc", "DEL NullLiteral", "DEL ConstructorInvocation", "DEL SimpleType: ExceptionLogger"]}, {"root": "DEL FieldAccess", "operations": ["DEL ThisExpression", "DEL SimpleName: connReuseStrategy", "DEL FieldAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL ThisExpression", "DEL SimpleName: connReuseStrategy"]}, {"root": "DEL FieldAccess", "operations": ["DEL ThisExpression", "DEL SimpleName: connReuseStrategy", "DEL FieldAccess"]}, {"root": "DEL SimpleName: connReuseStrategy", "operations": ["DEL SimpleName: connReuseStrategy"]}, {"root": "DEL SimpleName: connReuseStrategy", "operations": ["DEL SimpleName: connReuseStrategy"]}]}}, {"HttpAsyncRequester_diff": {"operations": ["Delete QualifiedName: org.apache.http.ConnectionReuseStrategy(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: org.apache.http.impl.DefaultConnectionReuseStrategy(24)", "Delete ImportDeclaration(25)", "Delete Modifier: private(65)", "Delete Modifier: final(66)", "Delete SimpleName: ConnectionReuseStrategy(67)", "Delete SimpleType: ConnectionReuseStrategy(68)", "Delete SimpleName: connReuseStrategy(69)", "Delete VariableDeclarationFragment(70)", "Delete FieldDeclaration(71)", "Delete SimpleName: connReuseStrategy(87)", "Delete TextElement:  Connection re-use strategy. If (88)", "Delete TextElement:  null(89)", "Delete TagElement: @code(90)", "Delete SimpleName: DefaultConnectionReuseStrategy(91)", "Delete SimpleName: INSTANCE(92)", "Delete MemberRef(93)", "Delete TagElement: @link(94)", "Delete TextElement:  will be used.(95)", "Delete TagElement: @param(96)", "Delete Modifier: final(124)", "Delete SimpleName: ConnectionReuseStrategy(125)", "Delete SimpleType: ConnectionReuseStrategy(126)", "Delete SimpleName: connReuseStrategy(127)", "Delete SingleVariableDeclaration(128)", "Delete ThisExpression(145)", "Delete SimpleName: connReuseStrategy(146)", "Delete FieldAccess(147)", "Delete SimpleName: connReuseStrategy(148)", "Delete NullLiteral(149)", "Delete InfixExpression: !=(150)", "Delete SimpleName: connReuseStrategy(151)", "Delete QualifiedName: DefaultConnectionReuseStrategy.INSTANCE(152)", "Delete ConditionalExpression(153)", "Delete Assignment: =(154)", "Delete ExpressionStatement(155)", "Delete TextElement: Creates new instance of HttpAsyncRequester.(169)", "Delete TagElement(170)", "Delete TextElement:  4.3(171)", "Delete TagElement: @since(172)", "Delete Javadoc(173)", "Delete Modifier: public(174)", "Delete SimpleName: HttpAsyncRequester(175)", "Delete Modifier: final(176)", "Delete SimpleName: HttpProcessor(177)", "Delete SimpleType: HttpProcessor(178)", "Delete SimpleName: httpprocessor(179)", "Delete SingleVariableDeclaration(180)", "Delete Modifier: final(181)", "Delete SimpleName: ConnectionReuseStrategy(182)", "Delete SimpleType: ConnectionReuseStrategy(183)", "Delete SimpleName: connReuseStrategy(184)", "Delete SingleVariableDeclaration(185)", "Delete SimpleName: httpprocessor(186)", "Delete SimpleName: connReuseStrategy(187)", "Delete SimpleName: ExceptionLogger(188)", "Delete SimpleType: ExceptionLogger(189)", "Delete NullLiteral(190)", "Delete CastExpression(191)", "Delete ConstructorInvocation(192)", "Delete Block(193)", "Delete MethodDeclaration(194)", "Delete ThisExpression(319)", "Delete SimpleName: connReuseStrategy(320)", "Delete FieldAccess(321)", "Delete ThisExpression(1028)", "Delete SimpleName: connReuseStrategy(1029)", "Delete FieldAccess(1030)", "Delete ThisExpression(1231)", "Delete SimpleName: connReuseStrategy(1232)", "Delete FieldAccess(1233)", "Delete SimpleName: connReuseStrategy(1605)", "Delete SimpleName: connReuseStrategy(1916)"]}}, {"HttpAsyncService_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 3"]}, {"root": "UPDATE from org.apache.http.HttpVersion to java.nio.ByteBuffer", "operations": ["UPD QualifiedName: org.apache.http.HttpVersion from org.apache.http.HttpVersion to java.nio.ByteBuffer"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 2", "INS Block to MethodDeclaration at 8", "INS IfStatement to Block at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: completeRequest to MethodInvocation at 0", "INS MethodInvocation to IfStatement at 0", "INS Block to IfStatement at 1", "INS ReturnStatement to Block at 4", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS IfStatement to Block at 3", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setIncoming to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS IfStatement to Block at 6", "INS IfStatement to Block at 8", "INS NullLiteral to MethodInvocation at 2", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: state to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to IfStatement at 0", "INS Block to IfStatement at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 21", "operations": ["INS SimpleName: responseReady to MethodDeclaration at 3", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Block to MethodDeclaration at 7", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 6", "MOV PrimitiveType: void to MethodDeclaration at 2", "MOV SimpleName: inputReady to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Modifier: public to MethodDeclaration at 1", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SimpleType: HttpException to MethodDeclaration at 7", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: HttpException to MethodDeclaration at 6", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: IOException to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: requestQueue to SingleVariableDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Modifier: final to SingleVariableDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS Modifier: volatile to FieldDeclaration at 1", "INS SimpleName: earlyResponse to VariableDeclarationFragment at 0", "INS PrimitiveType: boolean to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 12", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: isEarlyResponse to MethodDeclaration at 2", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS SimpleName: earlyResponse to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS Block to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: setEarlyResponse to MethodDeclaration at 2", "INS SimpleName: b to SingleVariableDeclaration at 2", "INS Modifier: final to SingleVariableDeclaration at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: earlyResponse to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: b to Assignment: = at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS PrimitiveType: boolean to SingleVariableDeclaration at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 3", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: Incoming to SimpleType: Incoming at 0", "INS SimpleType: Incoming to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 3", "INS Modifier: final to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: incoming to VariableDeclarationFragment at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 10", "INS ConstructorInvocation to Block at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleType: HttpContext to SingleVariableDeclaration at 1", "INS SimpleName: response to SingleVariableDeclaration at 2", "INS SimpleName: HttpResponse to SimpleType: HttpResponse at 0", "INS SimpleName: response to ConstructorInvocation at 2", "INS SimpleName: state to ConstructorInvocation at 3", "INS SimpleName: HttpAsyncExchangeImpl to MethodDeclaration at 1", "INS SimpleName: conn to ConstructorInvocation at 4", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: request to SingleVariableDeclaration at 2", "INS Block to MethodDeclaration at 7", "INS SimpleType: HttpRequest to SingleVariableDeclaration at 1", "INS SimpleName: request to ConstructorInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: HttpContext to SimpleType: HttpContext at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS NullLiteral to ConstructorInvocation at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleType: HttpResponse to SingleVariableDeclaration at 1", "INS SimpleName: context to SingleVariableDeclaration at 2", "INS SimpleName: context to ConstructorInvocation at 5", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: HttpRequest to SimpleType: HttpRequest at 0", "INS Modifier: public to MethodDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 5", "MOV VariableDeclarationStatement to Block at 3", "MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 7", "MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 4", "MOV IfStatement to Block at 3"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV ParameterizedType: Queue<PipelineEntry> to SingleVariableDeclaration at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 5", "MOV ExpressionStatement to Block at 6"]}, {"root": "UPDATE from setEntity to getRequestQueue", "operations": ["UPD SimpleName: setEntity from setEntity to getRequestQueue", "UPD SimpleName: getPipeline from getPipeline to getRequestQueue", "UPD SimpleName: getPipeline from getPipeline to getRequestQueue", "UPD SimpleName: state from state to getRequestQueue", "UPD SimpleName: getPipeline from getPipeline to getRequestQueue"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 2", "operations": ["INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleType: Incoming to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: incoming to SingleVariableDeclaration at 2", "INS SimpleName: Incoming to SimpleType: Incoming at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 7", "MOV VariableDeclarationStatement to Block at 6"]}, {"root": "UPDATE from pipeline to requestQueue", "operations": ["UPD SimpleName: pipeline from pipeline to requestQueue", "UPD SimpleName: pipeline from pipeline to requestQueue", "UPD SimpleName: pipeline from pipeline to requestQueue", "UPD SimpleName: pipeline from pipeline to requestQueue", "UPD SimpleName: pipeline from pipeline to requestQueue", "UPD SimpleName: pipeline from pipeline to requestQueue"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: incoming to Assignment: = at 1", "INS ExpressionStatement to Block at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: incoming to FieldAccess at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: state to MethodInvocation at 0", "INS QualifiedName: MessageState.READY to MethodInvocation at 2", "INS SimpleName: setRequestState to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "INS InfixExpression: || to MethodInvocation at 2", "operations": ["INS InfixExpression: || to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: state to MethodInvocation at 1", "MOV SimpleName: incoming to MethodInvocation at 0"]}, {"root": "UPDATE from state to isEarlyResponse", "operations": ["UPD SimpleName: state from state to isEarlyResponse"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 1", "MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from response to decoder", "operations": ["UPD SimpleName: response from response to decoder", "UPD SimpleName: outgoing from outgoing to decoder"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getContext to MethodInvocation at 1", "MOV SimpleName: outgoing to MethodInvocation at 0"]}, {"root": "UPDATE from getContext to isCompleted", "operations": ["UPD SimpleName: getContext from getContext to isCompleted"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: == to InfixExpression: || at 0"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: == to InfixExpression: || at 1"]}, {"root": "UPDATE from HttpResponse to ByteBuffer", "operations": ["UPD SimpleName: HttpResponse from HttpResponse to ByteBuffer", "UPD SimpleName: outgoing from outgoing to ByteBuffer", "UPD SimpleType: HttpResponse from HttpResponse to ByteBuffer"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from state to consumer", "operations": ["UPD SimpleName: state from state to consumer", "UPD SimpleName: Asserts from Asserts to consumer"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getOutgoing to MethodInvocation at 1", "MOV SimpleName: state to MethodInvocation at 0"]}, {"root": "UPDATE from getOutgoing to isDone", "operations": ["UPD SimpleName: getOutgoing from getOutgoing to isDone"]}, {"root": "UPDATE from response to tmp", "operations": ["UPD SimpleName: response from response to tmp", "UPD SimpleName: getStatusCode from getStatusCode to tmp"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getStatusLine to MethodInvocation at 1", "MOV SimpleName: response to MethodInvocation at 0"]}, {"root": "UPDATE from getStatusLine to read", "operations": ["UPD SimpleName: getStatusLine from getStatusLine to read"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getStatusCode to MethodInvocation at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from outgoing to incoming", "operations": ["UPD SimpleName: outgoing from outgoing to incoming"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: outgoing to MethodInvocation at 1"]}, {"root": "UPDATE from requestInput to requestOutput", "operations": ["UPD SimpleName: requestInput from requestInput to requestOutput"]}, {"root": "UPDATE from result to requestResult", "operations": ["UPD SimpleName: result from result to requestResult", "UPD SimpleName: result from result to requestResult", "UPD SimpleName: result from result to requestResult"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS MethodInvocation to InfixExpression: >= at 0", "INS FieldAccess to InfixExpression: != at 0", "INS SimpleName: incoming to FieldAccess at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: incoming to FieldAccess at 1", "INS InfixExpression: >= to InfixExpression: && at 0", "INS ThisExpression to FieldAccess at 0", "INS IfStatement to Block at 2", "INS Block to IfStatement at 1", "INS SimpleName: getStatusCode to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS BooleanLiteral: true to MethodInvocation at 2", "INS SimpleName: setEarlyResponse to MethodInvocation at 1", "INS ThisExpression to FieldAccess at 0", "INS InfixExpression: && to IfStatement at 0", "INS FieldAccess to MethodInvocation at 0", "INS NumberLiteral: 200 to InfixExpression: >= at 1", "INS InfixExpression: != to InfixExpression: && at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3"]}, {"root": "UPDATE from conn to state", "operations": ["UPD SimpleName: conn from conn to state", "UPD SimpleName: pipeline from pipeline to state", "UPD SimpleName: response from response to state"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: conn to MethodInvocation at 0", "MOV SimpleName: state to MethodInvocation at 1"]}, {"root": "UPDATE from getResponse to allocate", "operations": ["UPD SimpleName: getResponse from getResponse to allocate"]}, {"root": "INS InfixExpression: * to MethodInvocation at 2", "operations": ["INS NumberLiteral: 1024 to InfixExpression: * at 1", "INS InfixExpression: * to MethodInvocation at 2", "INS NumberLiteral: 4 to InfixExpression: * at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setEntity to MethodInvocation at 1", "MOV SimpleName: response to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getRequestQueue to MethodInvocation at 1"]}, {"root": "INS SimpleType: HttpResponse to VariableDeclarationStatement at 1", "operations": ["INS SimpleName: HttpResponse to SimpleType: HttpResponse at 0", "INS SimpleType: HttpResponse to VariableDeclarationStatement at 1"]}, {"root": "INS FieldAccess to MethodInvocation at 2", "operations": ["INS FieldAccess to MethodInvocation at 2", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: context to FieldAccess at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS QualifiedName: MessageState.INIT to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: state to MethodInvocation at 0", "INS ExpressionStatement to Block at 4", "INS SimpleName: setResponseState to MethodInvocation at 1"]}, {"root": "UPDATE from notNull to close", "operations": ["UPD SimpleName: notNull from notNull to close"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: pipeline to MethodInvocation at 0"]}, {"root": "INS NullLiteral to ClassInstanceCreation at 1", "operations": ["INS NullLiteral to ClassInstanceCreation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: responseProducer to VariableDeclarationFragment at 0", "INS SimpleName: handleException to MethodInvocation at 0", "INS SimpleName: HttpAsyncResponseProducer to SimpleType: HttpAsyncResponseProducer at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: ex to MethodInvocation at 1", "INS SimpleName: context to MethodInvocation at 2", "INS SimpleType: HttpAsyncResponseProducer to VariableDeclarationStatement at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleName: generateResponse to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: responseProducer to MethodInvocation at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: error to VariableDeclarationFragment at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: HttpResponse to VariableDeclarationStatement at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS SimpleName: incoming to ClassInstanceCreation at 1", "operations": ["INS SimpleName: incoming to ClassInstanceCreation at 1"]}, {"root": "INS SimpleName: state to MethodInvocation at 0", "operations": ["INS SimpleName: state to MethodInvocation at 0"]}, {"root": "INS SimpleName: setOutgoing to MethodInvocation at 1", "operations": ["INS SimpleName: setOutgoing to MethodInvocation at 1"]}, {"root": "INS ClassInstanceCreation to MethodInvocation at 2", "operations": ["INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: context to ClassInstanceCreation at 4", "INS SimpleName: error to ClassInstanceCreation at 2", "INS SimpleName: request to ClassInstanceCreation at 1", "INS SimpleName: responseProducer to ClassInstanceCreation at 3"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Outgoing to ClassInstanceCreation at 0"]}, {"root": "DEL QualifiedName: HttpVersion.HTTP_1_1", "operations": ["DEL QualifiedName: HttpVersion.HTTP_1_1"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: conn", "DEL SimpleName: suspendInput", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL SimpleName: outgoing", "operations": ["DEL SimpleName: outgoing"]}, {"root": "DEL StringLiteral: \"Outgoing response\"", "operations": ["DEL StringLiteral: \"Outgoing response\""]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: PipelineEntry", "DEL SimpleName: Queue", "DEL SimpleName: pipeline", "DEL Modifier: final", "DEL SimpleName: getPipeline", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: Queue", "DEL MethodInvocation", "DEL SimpleName: PipelineEntry", "DEL SimpleName: state", "DEL ParameterizedType: Queue<PipelineEntry>"]}, {"root": "DEL QualifiedName: HttpVersion.HTTP_1_1", "operations": ["DEL QualifiedName: HttpVersion.HTTP_1_1"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: pipeline", "DEL SimpleName: add", "DEL SimpleType: PipelineEntry", "DEL ClassInstanceCreation", "DEL SimpleName: PipelineEntry", "DEL SimpleName: context", "DEL SimpleName: handler", "DEL SimpleName: ex", "DEL SimpleName: request", "DEL NullLiteral", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL SimpleName: responseReady", "operations": ["DEL SimpleName: responseReady"]}, {"root": "DEL SimpleName: conn", "operations": ["DEL SimpleName: conn"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement"]}, {"root": "DEL ThrowStatement", "operations": ["DEL ClassInstanceCreation", "DEL SimpleName: HttpException", "DEL SimpleType: HttpException", "DEL InfixExpression: +", "DEL ThrowStatement", "DEL StringLiteral: \"Invalid response: \""]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL IfStatement", "DEL SimpleName: completeRequest", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: conn", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: final", "DEL SimpleName: commitFinalResponse", "DEL VariableDeclarationStatement", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL InfixExpression: >=", "DEL VariableDeclarationFragment", "DEL SimpleName: context", "DEL Modifier: public", "DEL IfStatement", "DEL Block", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: responseProducer", "DEL SimpleName: response", "DEL Modifier: final", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: status", "DEL ExpressionStatement", "DEL Modifier: final", "DEL SimpleType: HttpException", "DEL PrimitiveType: int", "DEL SimpleName: outgoing", "DEL SimpleName: status", "DEL NumberLiteral: 100", "DEL MethodDeclaration", "DEL InfixExpression: +", "DEL VariableDeclarationFragment", "DEL SimpleType: HttpContext", "DEL Block", "DEL Block", "DEL SimpleName: state", "DEL PrimitiveType: void", "DEL ThrowStatement", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL IfStatement", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: status", "DEL MethodInvocation", "DEL NumberLiteral: 400", "DEL SimpleName: conn", "DEL SimpleType: HttpAsyncResponseProducer", "DEL SimpleName: responseReady", "DEL SimpleName: responseCompleted", "DEL SimpleName: getStatusLine", "DEL Modifier: final", "DEL SimpleName: responseProducer", "DEL VariableDeclarationExpression", "DEL NullLiteral", "DEL MethodInvocation", "DEL TryStatement", "DEL StringLiteral: \"Invalid response: \"", "DEL SimpleName: HttpAsyncResponseProducer", "DEL SimpleName: resetInput", "DEL SimpleName: context", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: HttpContext", "DEL MethodInvocation", "DEL SimpleName: getProducer", "DEL MethodInvocation", "DEL SimpleName: HttpException", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: conn"]}, {"root": "DEL QualifiedName: HttpVersion.HTTP_1_1", "operations": ["DEL QualifiedName: HttpVersion.HTTP_1_1"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL SimpleName: state", "DEL VariableDeclarationFragment", "DEL SimpleName: pipeline", "DEL SimpleName: getPipeline", "DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL QualifiedName: MessageState.READY", "DEL SimpleName: getResponseState", "DEL SimpleName: state", "DEL InfixExpression: ==", "DEL IfStatement", "DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL MethodInvocation", "DEL Block", "DEL SimpleName: requestInput", "DEL ExpressionStatement", "DEL SimpleName: conn"]}, {"root": "DEL SimpleName: context", "operations": ["DEL SimpleName: context"]}]}}, {"HttpAsyncService_diff": {"operations": ["Move ImportDeclaration(33) into CompilationUnit(3869) at 3", "Update QualifiedName: org.apache.http.HttpVersion(32) to java.nio.ByteBuffer", "Insert MethodDeclaration(1261) into TypeDeclaration: class(3868) at 20", "Insert MethodDeclaration(1598) into TypeDeclaration: class(3868) at 21", "Move MarkerAnnotation(1086) into MethodDeclaration(1261) at 0", "Move Modifier: public(1087) into MethodDeclaration(1261) at 1", "Move PrimitiveType: void(1088) into MethodDeclaration(1261) at 2", "Move SimpleName: inputReady(1089) into MethodDeclaration(1261) at 3", "Move SingleVariableDeclaration(1094) into MethodDeclaration(1261) at 4", "Move SingleVariableDeclaration(1099) into MethodDeclaration(1261) at 5", "Move SimpleType: IOException(1101) into MethodDeclaration(1261) at 6", "Move SimpleType: HttpException(1103) into MethodDeclaration(1261) at 7", "Insert Block(1260) into MethodDeclaration(1261) at 8", "Move MarkerAnnotation(1178) into MethodDeclaration(1598) at 0", "Insert Modifier: public(1264) into MethodDeclaration(1598) at 1", "Insert PrimitiveType: void(1265) into MethodDeclaration(1598) at 2", "Insert SimpleName: responseReady(1266) into MethodDeclaration(1598) at 3", "Move SingleVariableDeclaration(1186) into MethodDeclaration(1598) at 4", "Move SimpleType: IOException(1188) into MethodDeclaration(1598) at 5", "Move SimpleType: HttpException(1190) into MethodDeclaration(1598) at 6", "Insert Block(1597) into MethodDeclaration(1598) at 7", "Insert SingleVariableDeclaration(2314) into MethodDeclaration(2377) at 4", "Insert FieldDeclaration(2708) into TypeDeclaration: class(2830) at 6", "Insert MethodDeclaration(2814) into TypeDeclaration: class(2830) at 12", "Insert MethodDeclaration(2829) into TypeDeclaration: class(2830) at 13", "Insert FieldDeclaration(3461) into TypeDeclaration: class(3867) at 3", "Insert MethodDeclaration(3603) into TypeDeclaration: class(3867) at 10", "Move VariableDeclarationStatement(1112) into Block(1260) at 0", "Move ExpressionStatement(1118) into Block(1260) at 1", "Move ExpressionStatement(1131) into Block(1260) at 2", "Move VariableDeclarationStatement(1140) into Block(1260) at 3", "Move ExpressionStatement(1146) into Block(1260) at 4", "Move VariableDeclarationStatement(1157) into Block(1260) at 5", "Insert IfStatement(1221) into Block(1260) at 6", "Move ExpressionStatement(1163) into Block(1260) at 7", "Insert IfStatement(1259) into Block(1260) at 8", "Move VariableDeclarationStatement(1199) into Block(1597) at 0", "Move ExpressionStatement(1205) into Block(1597) at 1", "Move ExpressionStatement(1224) into Block(1597) at 2", "Move IfStatement(1559) into Block(1597) at 3", "Move IfStatement(1630) into Block(1597) at 4", "Insert Modifier: final(2307) into SingleVariableDeclaration(2314) at 0", "Move ParameterizedType: Queue<PipelineEntry>(2425) into SingleVariableDeclaration(2314) at 1", "Insert SimpleName: requestQueue(2313) into SingleVariableDeclaration(2314) at 2", "Move ExpressionStatement(2642) into Block(2598) at 4", "Move ExpressionStatement(2647) into Block(2598) at 5", "Move ExpressionStatement(2652) into Block(2598) at 6", "Insert Modifier: private(2703) into FieldDeclaration(2708) at 0", "Insert Modifier: volatile(2704) into FieldDeclaration(2708) at 1", "Insert PrimitiveType: boolean(2705) into FieldDeclaration(2708) at 2", "Insert VariableDeclarationFragment(2707) into FieldDeclaration(2708) at 3", "Insert Modifier: public(2808) into MethodDeclaration(2814) at 0", "Insert PrimitiveType: boolean(2809) into MethodDeclaration(2814) at 1", "Insert SimpleName: isEarlyResponse(2810) into MethodDeclaration(2814) at 2", "Insert Block(2813) into MethodDeclaration(2814) at 3", "Insert Modifier: public(2815) into MethodDeclaration(2829) at 0", "Insert PrimitiveType: void(2816) into MethodDeclaration(2829) at 1", "Insert SimpleName: setEarlyResponse(2817) into MethodDeclaration(2829) at 2", "Insert SingleVariableDeclaration(2821) into MethodDeclaration(2829) at 3", "Insert Block(2828) into MethodDeclaration(2829) at 4", "Update SimpleName: getPipeline(3387) to getRequestQueue", "Insert Modifier: private(3455) into FieldDeclaration(3461) at 0", "Insert Modifier: final(3456) into FieldDeclaration(3461) at 1", "Insert SimpleType: Incoming(3458) into FieldDeclaration(3461) at 2", "Insert VariableDeclarationFragment(3460) into FieldDeclaration(3461) at 3", "Insert SingleVariableDeclaration(3503) into MethodDeclaration(3567) at 2", "Insert Modifier: public(3568) into MethodDeclaration(3603) at 0", "Insert SimpleName: HttpAsyncExchangeImpl(3569) into MethodDeclaration(3603) at 1", "Insert SingleVariableDeclaration(3574) into MethodDeclaration(3603) at 2", "Insert SingleVariableDeclaration(3579) into MethodDeclaration(3603) at 3", "Move SingleVariableDeclaration(2353) into MethodDeclaration(3603) at 4", "Move SingleVariableDeclaration(2348) into MethodDeclaration(3603) at 5", "Insert SingleVariableDeclaration(3594) into MethodDeclaration(3603) at 6", "Insert Block(3602) into MethodDeclaration(3603) at 7", "Insert MethodInvocation(1177) into IfStatement(1221) at 0", "Insert Block(1220) into IfStatement(1221) at 1", "Insert MethodInvocation(1230) into IfStatement(1259) at 0", "Insert Block(1252) into IfStatement(1259) at 1", "Insert Block(1258) into IfStatement(1259) at 2", "Move ExpressionStatement(1388) into Block(1518) at 7", "Move VariableDeclarationStatement(1397) into Block(1518) at 6", "Insert SimpleName: earlyResponse(2706) into VariableDeclarationFragment(2707) at 0", "Insert ReturnStatement(2812) into Block(2813) at 0", "Insert Modifier: final(2818) into SingleVariableDeclaration(2821) at 0", "Insert PrimitiveType: boolean(2819) into SingleVariableDeclaration(2821) at 1", "Insert SimpleName: b(2820) into SingleVariableDeclaration(2821) at 2", "Insert ExpressionStatement(2827) into Block(2828) at 0", "Update SimpleName: pipeline(3162) to requestQueue", "Insert SimpleName: Incoming(3457) into SimpleType: Incoming(3458) at 0", "Insert SimpleName: incoming(3459) into VariableDeclarationFragment(3460) at 0", "Insert Modifier: final(3499) into SingleVariableDeclaration(3503) at 0", "Insert SimpleType: Incoming(3501) into SingleVariableDeclaration(3503) at 1", "Insert SimpleName: incoming(3502) into SingleVariableDeclaration(3503) at 2", "Insert ExpressionStatement(3535) into Block(3566) at 1", "Insert Modifier: final(3570) into SingleVariableDeclaration(3574) at 0", "Insert SimpleType: HttpRequest(3572) into SingleVariableDeclaration(3574) at 1", "Insert SimpleName: request(3573) into SingleVariableDeclaration(3574) at 2", "Insert Modifier: final(3575) into SingleVariableDeclaration(3579) at 0", "Insert SimpleType: HttpResponse(3577) into SingleVariableDeclaration(3579) at 1", "Insert SimpleName: response(3578) into SingleVariableDeclaration(3579) at 2", "Insert Modifier: final(3590) into SingleVariableDeclaration(3594) at 0", "Insert SimpleType: HttpContext(3592) into SingleVariableDeclaration(3594) at 1", "Insert SimpleName: context(3593) into SingleVariableDeclaration(3594) at 2", "Insert ConstructorInvocation(3601) into Block(3602) at 0", "Update SimpleName: pipeline(665) to requestQueue", "Move ExpressionStatement(943) into Block(1075) at 0", "Insert ExpressionStatement(1080) into Block(1092) at 0", "Move ExpressionStatement(2445) into Block(1092) at 2", "Insert InfixExpression: ||(1142) into MethodInvocation(1147) at 2", "Move SimpleName: incoming(1168) into MethodInvocation(1177) at 0", "Update SimpleName: state(1170) to isEarlyResponse", "Move SimpleName: state(1170) into MethodInvocation(1177) at 1", "Insert IfStatement(1186) into Block(1220) at 0", "Move VariableDeclarationStatement(1253) into Block(1220) at 1", "Insert ExpressionStatement(1203) into Block(1220) at 2", "Insert IfStatement(1218) into Block(1220) at 3", "Insert ReturnStatement(1219) into Block(1220) at 4", "Update SimpleName: outgoing(1271) to decoder", "Move SimpleName: outgoing(1271) into MethodInvocation(1230) at 0", "Update SimpleName: getContext(1272) to isCompleted", "Move SimpleName: getContext(1272) into MethodInvocation(1230) at 1", "Move ExpressionStatement(2362) into Block(1252) at 0", "Move ExpressionStatement(2367) into Block(1252) at 1", "Insert ExpressionStatement(1247) into Block(1252) at 2", "Move ExpressionStatement(1293) into Block(1252) at 3", "Move ExpressionStatement(1298) into Block(1258) at 0", "Update SimpleName: pipeline(2432) to requestQueue", "Insert SimpleName: earlyResponse(2811) into ReturnStatement(2812) at 0", "Insert Assignment: =(2826) into ExpressionStatement(2827) at 0", "Insert SimpleName: Incoming(3500) into SimpleType: Incoming(3501) at 0", "Insert Assignment: =(3534) into ExpressionStatement(3535) at 0", "Insert SimpleName: HttpRequest(3571) into SimpleType: HttpRequest(3572) at 0", "Insert SimpleName: HttpResponse(3576) into SimpleType: HttpResponse(3577) at 0", "Insert SimpleName: HttpContext(3591) into SimpleType: HttpContext(3592) at 0", "Insert NullLiteral(3595) into ConstructorInvocation(3601) at 0", "Insert SimpleName: request(3596) into ConstructorInvocation(3601) at 1", "Insert SimpleName: response(3597) into ConstructorInvocation(3601) at 2", "Insert SimpleName: state(3598) into ConstructorInvocation(3601) at 3", "Insert SimpleName: conn(3599) into ConstructorInvocation(3601) at 4", "Insert SimpleName: context(3600) into ConstructorInvocation(3601) at 5", "Update SimpleName: getPipeline(667) to getRequestQueue", "Insert MethodInvocation(1079) into ExpressionStatement(1080) at 0", "Move InfixExpression: ==(1229) into InfixExpression: ||(1142) at 0", "Move InfixExpression: ==(1125) into InfixExpression: ||(1142) at 1", "Insert MethodInvocation(1180) into IfStatement(1186) at 0", "Insert Block(1185) into IfStatement(1186) at 1", "Update SimpleType: HttpResponse(1247) to ByteBuffer", "Insert MethodInvocation(1202) into ExpressionStatement(1203) at 0", "Move MethodInvocation(1166) into IfStatement(1218) at 0", "Insert Block(1217) into IfStatement(1218) at 1", "Insert MethodInvocation(1246) into ExpressionStatement(1247) at 0", "Move VariableDeclarationStatement(1458) into Block(1468) at 0", "Insert FieldAccess(2824) into Assignment: =(2826) at 0", "Insert SimpleName: b(2825) into Assignment: =(2826) at 1", "Update SimpleName: pipeline(3389) to requestQueue", "Insert FieldAccess(3532) into Assignment: =(3534) at 0", "Insert SimpleName: incoming(3533) into Assignment: =(3534) at 1", "Update SimpleName: pipeline(671) to requestQueue", "Insert SimpleName: state(1076) into MethodInvocation(1079) at 0", "Insert SimpleName: setRequestState(1077) into MethodInvocation(1079) at 1", "Insert QualifiedName: MessageState.READY(1078) into MethodInvocation(1079) at 2", "Insert MethodInvocation(1085) into MethodInvocation(1086) at 2", "Update SimpleName: state(1234) to consumer", "Move SimpleName: state(1234) into MethodInvocation(1180) at 0", "Update SimpleName: getOutgoing(1235) to isDone", "Move SimpleName: getOutgoing(1235) into MethodInvocation(1180) at 1", "Move ExpressionStatement(1244) into Block(1185) at 0", "Update SimpleName: HttpResponse(1246) to ByteBuffer", "Update SimpleName: response(1248) to tmp", "Update SimpleName: response(1257) to decoder", "Move SimpleName: response(1257) into MethodInvocation(1202) at 0", "Update SimpleName: getStatusLine(1258) to read", "Move SimpleName: getStatusLine(1258) into MethodInvocation(1202) at 1", "Update SimpleName: getStatusCode(1260) to tmp", "Move SimpleName: getStatusCode(1260) into MethodInvocation(1202) at 2", "Move ExpressionStatement(1328) into Block(1217) at 0", "Insert ExpressionStatement(1216) into Block(1217) at 1", "Insert SimpleName: completeRequest(1241) into MethodInvocation(1246) at 0", "Update SimpleName: outgoing(1280) to incoming", "Move SimpleName: outgoing(1280) into MethodInvocation(1246) at 1", "Insert MethodInvocation(1245) into MethodInvocation(1246) at 2", "Update SimpleName: requestInput(1291) to requestOutput", "Update SimpleName: result(1392) to requestResult", "Update SimpleName: result(1416) to requestResult", "Move ExpressionStatement(1308) into Block(1593) at 0", "Move ExpressionStatement(1499) into Block(1593) at 1", "Move ExpressionStatement(1303) into Block(1593) at 2", "Insert ThisExpression(2822) into FieldAccess(2824) at 0", "Insert SimpleName: earlyResponse(2823) into FieldAccess(2824) at 1", "Update SimpleName: pipeline(3209) to requestQueue", "Insert ThisExpression(3530) into FieldAccess(3532) at 0", "Insert SimpleName: incoming(3531) into FieldAccess(3532) at 1", "Insert IfStatement(3758) into Block(3784) at 2", "Move ExpressionStatement(1030) into Block(1054) at 3", "Update SimpleName: conn(1077) to state", "Move SimpleName: conn(1077) into MethodInvocation(1085) at 0", "Update SimpleName: state(1078) to getRequestQueue", "Move SimpleName: state(1078) into MethodInvocation(1085) at 1", "Update SimpleName: outgoing(1249) to ByteBuffer", "Update SimpleName: getResponse(1250) to allocate", "Insert InfixExpression: *(1195) into MethodInvocation(1196) at 2", "Insert MethodInvocation(1215) into ExpressionStatement(1216) at 0", "Update SimpleName: response(1285) to state", "Move SimpleName: response(1285) into MethodInvocation(1245) at 0", "Update SimpleName: setEntity(1286) to getRequestQueue", "Move SimpleName: setEntity(1286) into MethodInvocation(1245) at 1", "Insert MethodInvocation(1321) into MethodInvocation(1323) at 0", "Insert SimpleType: HttpResponse(1385) into VariableDeclarationStatement(1395) at 1", "Insert FieldAccess(3701) into MethodInvocation(3702) at 2", "Insert InfixExpression: &&(3749) into IfStatement(3758) at 0", "Insert Block(3757) into IfStatement(3758) at 1", "Move ExpressionStatement(1003) into Block(1054) at 3", "Insert ExpressionStatement(1045) into Block(1054) at 3", "Update SimpleName: Asserts(1239) to consumer", "Update SimpleName: notNull(1240) to close", "Insert NumberLiteral: 4(1193) into InfixExpression: *(1195) at 0", "Insert NumberLiteral: 1024(1194) into InfixExpression: *(1195) at 1", "Insert SimpleName: state(1212) into MethodInvocation(1215) at 0", "Insert SimpleName: setIncoming(1213) into MethodInvocation(1215) at 1", "Insert NullLiteral(1214) into MethodInvocation(1215) at 2", "Update SimpleName: pipeline(1369) to state", "Move SimpleName: pipeline(1369) into MethodInvocation(1321) at 0", "Insert SimpleName: getRequestQueue(1320) into MethodInvocation(1321) at 1", "Insert SimpleName: HttpResponse(1384) into SimpleType: HttpResponse(1385) at 0", "Insert ThisExpression(3699) into FieldAccess(3701) at 0", "Insert SimpleName: context(3700) into FieldAccess(3701) at 1", "Insert InfixExpression: >=(3743) into InfixExpression: &&(3749) at 0", "Insert InfixExpression: !=(3748) into InfixExpression: &&(3749) at 1", "Insert ExpressionStatement(3756) into Block(3757) at 0", "Update SimpleName: getPipeline(989) to getRequestQueue", "Insert MethodInvocation(1044) into ExpressionStatement(1045) at 0", "Insert NullLiteral(1402) into ClassInstanceCreation(1408) at 1", "Insert VariableDeclarationStatement(1444) into Block(1465) at 0", "Insert VariableDeclarationStatement(1453) into Block(1465) at 1", "Insert MethodInvocation(3741) into InfixExpression: >=(3743) at 0", "Insert NumberLiteral: 200(3742) into InfixExpression: >=(3743) at 1", "Insert FieldAccess(3746) into InfixExpression: !=(3748) at 0", "Insert NullLiteral(3747) into InfixExpression: !=(3748) at 1", "Insert MethodInvocation(3755) into ExpressionStatement(3756) at 0", "Insert SimpleName: state(1041) into MethodInvocation(1044) at 0", "Insert SimpleName: setResponseState(1042) into MethodInvocation(1044) at 1", "Insert QualifiedName: MessageState.INIT(1043) into MethodInvocation(1044) at 2", "Update SimpleName: result(1465) to requestResult", "Insert Modifier: final(1435) into VariableDeclarationStatement(1444) at 0", "Insert SimpleType: HttpAsyncResponseProducer(1437) into VariableDeclarationStatement(1444) at 1", "Insert VariableDeclarationFragment(1443) into VariableDeclarationStatement(1444) at 2", "Insert Modifier: final(1445) into VariableDeclarationStatement(1453) at 0", "Move SimpleType: HttpResponse(1421) into VariableDeclarationStatement(1453) at 1", "Insert VariableDeclarationFragment(1452) into VariableDeclarationStatement(1453) at 2", "Move MethodInvocation(1623) into MethodInvocation(3741) at 0", "Insert SimpleName: getStatusCode(3740) into MethodInvocation(3741) at 1", "Insert ThisExpression(3744) into FieldAccess(3746) at 0", "Insert SimpleName: incoming(3745) into FieldAccess(3746) at 1", "Insert FieldAccess(3752) into MethodInvocation(3755) at 0", "Insert SimpleName: setEarlyResponse(3753) into MethodInvocation(3755) at 1", "Insert BooleanLiteral: true(3754) into MethodInvocation(3755) at 2", "Insert SimpleName: incoming(1023) into ClassInstanceCreation(1029) at 1", "Insert SimpleName: HttpAsyncResponseProducer(1436) into SimpleType: HttpAsyncResponseProducer(1437) at 0", "Insert SimpleName: responseProducer(1438) into VariableDeclarationFragment(1443) at 0", "Insert MethodInvocation(1442) into VariableDeclarationFragment(1443) at 1", "Insert SimpleName: error(1448) into VariableDeclarationFragment(1452) at 0", "Insert MethodInvocation(1451) into VariableDeclarationFragment(1452) at 1", "Insert SimpleName: state(1454) into MethodInvocation(1463) at 0", "Insert SimpleName: setOutgoing(1455) into MethodInvocation(1463) at 1", "Insert ClassInstanceCreation(1462) into MethodInvocation(1463) at 2", "Insert ThisExpression(3750) into FieldAccess(3752) at 0", "Insert SimpleName: incoming(3751) into FieldAccess(3752) at 1", "Insert SimpleName: handleException(1439) into MethodInvocation(1442) at 0", "Insert SimpleName: ex(1440) into MethodInvocation(1442) at 1", "Insert SimpleName: context(1441) into MethodInvocation(1442) at 2", "Insert SimpleName: responseProducer(1449) into MethodInvocation(1451) at 0", "Insert SimpleName: generateResponse(1450) into MethodInvocation(1451) at 1", "Move SimpleType: Outgoing(1232) into ClassInstanceCreation(1462) at 0", "Insert SimpleName: request(1458) into ClassInstanceCreation(1462) at 1", "Insert SimpleName: error(1459) into ClassInstanceCreation(1462) at 2", "Insert SimpleName: responseProducer(1460) into ClassInstanceCreation(1462) at 3", "Insert SimpleName: context(1461) into ClassInstanceCreation(1462) at 4", "Delete QualifiedName: HttpVersion.HTTP_1_1(1012)", "Delete SimpleName: conn(1023)", "Delete SimpleName: suspendInput(1024)", "Delete MethodInvocation(1025)", "Delete ExpressionStatement(1026)", "Delete SimpleName: outgoing(1241)", "Delete StringLiteral: \"Outgoing response\"(1242)", "Delete Modifier: final(1353)", "Delete SimpleName: Queue(1354)", "Delete SimpleType: Queue(1355)", "Delete SimpleName: PipelineEntry(1356)", "Delete SimpleType: PipelineEntry(1357)", "Delete ParameterizedType: Queue<PipelineEntry>(1358)", "Delete SimpleName: pipeline(1359)", "Delete SimpleName: state(1360)", "Delete SimpleName: getPipeline(1361)", "Delete MethodInvocation(1362)", "Delete VariableDeclarationFragment(1363)", "Delete VariableDeclarationStatement(1364)", "Delete QualifiedName: HttpVersion.HTTP_1_1(1427)", "Delete SimpleName: pipeline(1483)", "Delete SimpleName: add(1484)", "Delete SimpleName: PipelineEntry(1485)", "Delete SimpleType: PipelineEntry(1486)", "Delete SimpleName: request(1487)", "Delete NullLiteral(1488)", "Delete SimpleName: ex(1489)", "Delete SimpleName: handler(1490)", "Delete SimpleName: context(1491)", "Delete ClassInstanceCreation(1492)", "Delete MethodInvocation(1493)", "Delete ExpressionStatement(1494)", "Delete SimpleName: responseReady(1500)", "Delete SimpleName: conn(1501)", "Delete ReturnStatement(1504)", "Delete SimpleName: HttpException(1618)", "Delete SimpleType: HttpException(1619)", "Delete StringLiteral: \"Invalid response: \"(1620)", "Delete InfixExpression: +(1624)", "Delete ClassInstanceCreation(1625)", "Delete ThrowStatement(1626)", "Delete SimpleName: completeRequest(1167)", "Delete SimpleName: conn(1169)", "Delete MethodInvocation(1171)", "Delete ExpressionStatement(1172)", "Delete Block(1173)", "Delete IfStatement(1174)", "Delete Block(1175)", "Delete MethodDeclaration(1176)", "Delete Modifier: public(1179)", "Delete PrimitiveType: void(1180)", "Delete SimpleName: responseReady(1181)", "Delete Modifier: final(1230)", "Delete SimpleName: outgoing(1233)", "Delete MethodInvocation(1236)", "Delete VariableDeclarationFragment(1237)", "Delete VariableDeclarationStatement(1238)", "Delete Modifier: final(1254)", "Delete PrimitiveType: int(1255)", "Delete SimpleName: status(1256)", "Delete MethodInvocation(1259)", "Delete MethodInvocation(1261)", "Delete VariableDeclarationFragment(1262)", "Delete VariableDeclarationStatement(1263)", "Delete SimpleName: status(1264)", "Delete NumberLiteral: 100(1265)", "Delete InfixExpression: ==(1266)", "Delete Modifier: final(1267)", "Delete SimpleName: HttpContext(1268)", "Delete SimpleType: HttpContext(1269)", "Delete SimpleName: context(1270)", "Delete MethodInvocation(1273)", "Delete VariableDeclarationFragment(1274)", "Delete VariableDeclarationStatement(1275)", "Delete Modifier: final(1276)", "Delete SimpleName: HttpAsyncResponseProducer(1277)", "Delete SimpleType: HttpAsyncResponseProducer(1278)", "Delete SimpleName: responseProducer(1279)", "Delete SimpleName: getProducer(1281)", "Delete MethodInvocation(1282)", "Delete VariableDeclarationFragment(1283)", "Delete VariableDeclarationExpression(1284)", "Delete NullLiteral(1287)", "Delete MethodInvocation(1288)", "Delete ExpressionStatement(1289)", "Delete SimpleName: responseProducer(1309)", "Delete SimpleName: responseCompleted(1310)", "Delete SimpleName: context(1311)", "Delete MethodInvocation(1312)", "Delete ExpressionStatement(1313)", "Delete Block(1314)", "Delete TryStatement(1315)", "Delete Block(1316)", "Delete SimpleName: status(1317)", "Delete NumberLiteral: 400(1318)", "Delete InfixExpression: >=(1319)", "Delete SimpleName: conn(1320)", "Delete SimpleName: resetInput(1321)", "Delete MethodInvocation(1322)", "Delete ExpressionStatement(1323)", "Delete SimpleName: commitFinalResponse(1329)", "Delete SimpleName: conn(1330)", "Delete SimpleName: state(1331)", "Delete MethodInvocation(1332)", "Delete ExpressionStatement(1333)", "Delete Block(1334)", "Delete SimpleName: HttpException(1335)", "Delete SimpleType: HttpException(1336)", "Delete StringLiteral: \"Invalid response: \"(1337)", "Delete SimpleName: response(1338)", "Delete SimpleName: getStatusLine(1339)", "Delete MethodInvocation(1340)", "Delete InfixExpression: +(1341)", "Delete ClassInstanceCreation(1342)", "Delete ThrowStatement(1343)", "Delete Block(1344)", "Delete IfStatement(1345)", "Delete IfStatement(1346)", "Delete Block(1347)", "Delete Block(1631)", "Delete IfStatement(1632)", "Delete Block(1633)", "Delete MethodDeclaration(1634)", "Delete QualifiedName: HttpVersion.HTTP_1_1(2197)", "Delete Modifier: final(2420)", "Delete SimpleName: pipeline(2426)", "Delete SimpleName: state(2427)", "Delete SimpleName: getPipeline(2428)", "Delete MethodInvocation(2429)", "Delete VariableDeclarationFragment(2430)", "Delete VariableDeclarationStatement(2431)", "Delete SimpleName: state(2437)", "Delete SimpleName: getResponseState(2438)", "Delete MethodInvocation(2439)", "Delete QualifiedName: MessageState.READY(2440)", "Delete InfixExpression: ==(2441)", "Delete Block(2446)", "Delete IfStatement(2447)", "Delete SimpleName: conn(2669)", "Delete SimpleName: requestInput(2670)", "Delete MethodInvocation(2671)", "Delete ExpressionStatement(2672)", "Delete Block(2673)", "Delete SimpleName: context(3694)"]}}, {"PipeliningClientExchangeHandler_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 25", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 25", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: getContext to MethodDeclaration at 3", "INS SimpleType: HttpContext to MethodDeclaration at 2", "INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS SimpleName: localContext to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from ConnectionReuseStrategy to HttpContext", "operations": ["UPD SimpleName: ConnectionReuseStrategy from ConnectionReuseStrategy to HttpContext"]}, {"root": "MOVE from SimpleType: HttpContext", "operations": ["MOV SimpleName: ConnectionReuseStrategy to SimpleType: HttpContext at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.http.ConnectionReuseStrategy", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.http.impl.DefaultConnectionReuseStrategy", "DEL ImportDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL Modifier: final", "DEL FieldDeclaration", "DEL SimpleName: connReuseStrategy", "DEL SimpleType: ConnectionReuseStrategy", "DEL VariableDeclarationFragment"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: keepAlive", "DEL SimpleType: AtomicBoolean", "DEL Modifier: private", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: AtomicBoolean", "DEL FieldDeclaration"]}, {"root": "DEL TagElement: @param", "operations": ["DEL SimpleName: connReuseStrategy", "DEL TagElement: @param", "DEL TextElement:  the connection re-use strategy."]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: ConnectionReuseStrategy", "DEL SimpleType: ConnectionReuseStrategy", "DEL SimpleName: connReuseStrategy", "DEL SingleVariableDeclaration", "DEL Modifier: final"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ThisExpression", "DEL QualifiedName: DefaultConnectionReuseStrategy.INSTANCE", "DEL FieldAccess", "DEL ConditionalExpression", "DEL NullLiteral", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL SimpleName: connReuseStrategy", "DEL SimpleName: connReuseStrategy", "DEL SimpleName: connReuseStrategy", "DEL Assignment: ="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleType: AtomicBoolean", "DEL SimpleName: AtomicBoolean", "DEL BooleanLiteral: false", "DEL ThisExpression", "DEL ExpressionStatement", "DEL FieldAccess", "DEL Assignment: =", "DEL ClassInstanceCreation", "DEL SimpleName: keepAlive"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: connReuseStrategy", "DEL SimpleName: response", "DEL ThisExpression", "DEL SimpleName: keepAlive", "DEL ExpressionStatement", "DEL ThisExpression", "DEL FieldAccess", "DEL FieldAccess", "DEL SimpleName: request", "DEL MethodInvocation", "DEL FieldAccess", "DEL ThisExpression", "DEL SimpleName: keepAlive", "DEL SimpleName: set", "DEL MethodInvocation", "DEL SimpleName: localContext"]}, {"root": "DEL IfStatement", "operations": ["DEL FieldAccess", "DEL MethodInvocation", "DEL SimpleName: keepAlive", "DEL PrefixExpression: !", "DEL SimpleName: conn", "DEL ThisExpression", "DEL ExpressionStatement", "DEL FieldAccess", "DEL IfStatement", "DEL SimpleName: close", "DEL Block", "DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleName: get"]}]}}, {"PipeliningClientExchangeHandler_diff": {"operations": ["Insert MethodDeclaration(619) into TypeDeclaration: class(1242) at 23", "Insert MarkerAnnotation(611) into MethodDeclaration(619) at 0", "Insert Modifier: public(612) into MethodDeclaration(619) at 1", "Insert SimpleType: HttpContext(614) into MethodDeclaration(619) at 2", "Insert SimpleName: getContext(615) into MethodDeclaration(619) at 3", "Insert Block(618) into MethodDeclaration(619) at 4", "Insert SimpleName: Override(610) into MarkerAnnotation(611) at 0", "Update SimpleName: ConnectionReuseStrategy(154) to HttpContext", "Move SimpleName: ConnectionReuseStrategy(154) into SimpleType: HttpContext(614) at 0", "Insert ReturnStatement(617) into Block(618) at 0", "Insert SimpleName: localContext(616) into ReturnStatement(617) at 0", "Delete QualifiedName: org.apache.http.ConnectionReuseStrategy(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: org.apache.http.impl.DefaultConnectionReuseStrategy(34)", "Delete ImportDeclaration(35)", "Delete Modifier: private(152)", "Delete Modifier: final(153)", "Delete SimpleType: ConnectionReuseStrategy(155)", "Delete SimpleName: connReuseStrategy(156)", "Delete VariableDeclarationFragment(157)", "Delete FieldDeclaration(158)", "Delete Modifier: private(182)", "Delete Modifier: final(183)", "Delete SimpleName: AtomicBoolean(184)", "Delete SimpleType: AtomicBoolean(185)", "Delete SimpleName: keepAlive(186)", "Delete VariableDeclarationFragment(187)", "Delete FieldDeclaration(188)", "Delete SimpleName: connReuseStrategy(219)", "Delete TextElement:  the connection re-use strategy.(220)", "Delete TagElement: @param(221)", "Delete Modifier: final(272)", "Delete SimpleName: ConnectionReuseStrategy(273)", "Delete SimpleType: ConnectionReuseStrategy(274)", "Delete SimpleName: connReuseStrategy(275)", "Delete SingleVariableDeclaration(276)", "Delete ThisExpression(380)", "Delete SimpleName: connReuseStrategy(381)", "Delete FieldAccess(382)", "Delete SimpleName: connReuseStrategy(383)", "Delete NullLiteral(384)", "Delete InfixExpression: !=(385)", "Delete SimpleName: connReuseStrategy(386)", "Delete QualifiedName: DefaultConnectionReuseStrategy.INSTANCE(387)", "Delete ConditionalExpression(388)", "Delete Assignment: =(389)", "Delete ExpressionStatement(390)", "Delete ThisExpression(421)", "Delete SimpleName: keepAlive(422)", "Delete FieldAccess(423)", "Delete SimpleName: AtomicBoolean(424)", "Delete SimpleType: AtomicBoolean(425)", "Delete BooleanLiteral: false(426)", "Delete ClassInstanceCreation(427)", "Delete Assignment: =(428)", "Delete ExpressionStatement(429)", "Delete NullLiteral(506)", "Delete ThisExpression(917)", "Delete SimpleName: keepAlive(918)", "Delete FieldAccess(919)", "Delete SimpleName: set(920)", "Delete ThisExpression(921)", "Delete SimpleName: connReuseStrategy(922)", "Delete FieldAccess(923)", "Delete SimpleName: keepAlive(924)", "Delete SimpleName: request(925)", "Delete SimpleName: response(926)", "Delete ThisExpression(927)", "Delete SimpleName: localContext(928)", "Delete FieldAccess(929)", "Delete MethodInvocation(930)", "Delete MethodInvocation(931)", "Delete ExpressionStatement(932)", "Delete ThisExpression(1012)", "Delete SimpleName: keepAlive(1013)", "Delete FieldAccess(1014)", "Delete SimpleName: get(1015)", "Delete MethodInvocation(1016)", "Delete PrefixExpression: !(1017)", "Delete ThisExpression(1018)", "Delete SimpleName: conn(1019)", "Delete FieldAccess(1020)", "Delete SimpleName: close(1021)", "Delete MethodInvocation(1022)", "Delete ExpressionStatement(1023)", "Delete Block(1024)", "Delete IfStatement(1025)"]}}], "commit_stats": [{"total_files": 30, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}