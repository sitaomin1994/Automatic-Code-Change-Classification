{"application": "google-FreeBuilder", "csha": "3da4c4f95f873d4037fb6b90f820d579ade10283", "files": [{"CodeGenerator_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 27", "operations": ["INS QualifiedName: java.util.LinkedHashSet to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 27"]}, {"root": "INS ImportDeclaration to CompilationUnit at 29", "operations": ["INS ImportDeclaration to CompilationUnit at 29", "INS QualifiedName: java.util.Set to ImportDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 22", "operations": ["INS Block to MethodDeclaration at 6", "INS PrefixExpression: ! to VariableDeclarationFragment at 1", "INS IfStatement to Block at 2", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: Iterables to MethodInvocation at 0", "INS SimpleName: metadata to SingleVariableDeclaration at 1", "INS SimpleName: noDefaults to IfStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 22", "INS MethodInvocation to MethodInvocation at 4", "INS MethodInvocation to MethodInvocation at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Property to SimpleType: Property at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: code to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleType: Property to VariableDeclarationStatement at 0", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: OPTIONAL to SwitchCase at 0", "INS SimpleName: code to MethodInvocation at 0", "INS ExpressionStatement to Block at 7", "INS SimpleName: property to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: seenDefault to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getProperties to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: REQUIRED to SwitchCase at 0", "INS SwitchStatement to Block at 1", "INS SimpleName: addLine to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to SwitchStatement at 2", "INS SimpleName: code to SingleVariableDeclaration at 1", "INS StringLiteral: \"result.append(\\\", \\\");\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS IfStatement to Block at 2", "INS MethodInvocation to SwitchStatement at 0", "INS SimpleName: any to MethodInvocation at 0", "INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: Property to VariableDeclarationStatement at 0", "INS ExpressionStatement to SwitchStatement at 5", "INS StringLiteral: \"if (%s != null) {\" to MethodInvocation at 2", "INS InfixExpression: && to IfStatement at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: metadata to MethodInvocation at 0", "INS SimpleName: Metadata to SimpleType: Metadata at 0", "INS SimpleName: Property to SimpleType: Property at 0", "INS SimpleName: seenDefault to VariableDeclarationFragment at 1", "INS BreakStatement to SwitchStatement at 3", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS SimpleName: property to InfixExpression: != at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: getType to MethodInvocation at 1", "INS SimpleName: getCodeGenerator to MethodInvocation at 1", "INS Block to EnhancedForStatement at 2", "INS SimpleName: property to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 3", "INS IfStatement to IfStatement at 2", "INS SimpleName: addLine to MethodInvocation at 1", "INS EnhancedForStatement to Block at 6", "INS BreakStatement to SwitchStatement at 6", "INS SimpleName: code to MethodInvocation at 0", "INS StringLiteral: \"String separator = \\\"\\\";\" to MethodInvocation at 2", "INS SwitchStatement to Block at 5", "INS SwitchCase to SwitchStatement at 4", "INS ExpressionStatement to Block at 3", "INS SwitchCase to SwitchStatement at 7", "INS SimpleName: seenDefault to Assignment: = at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: first to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 0", "INS SwitchCase to SwitchStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: property to MethodInvocation at 0", "INS SimpleName: OPTIONAL to SwitchCase at 0", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS SimpleName: metadata to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: REQUIRED to SwitchCase at 0", "INS ExpressionStatement to Block at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS StringLiteral: \"result.append(\\\"}\\\");\" to MethodInvocation at 2", "INS SimpleName: getCodeGenerator to MethodInvocation at 1", "INS SimpleName: getPropertyEnum to MethodInvocation at 1", "INS SimpleName: addLine to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: hadSeenDefault to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: writePartialToStringWithBuilder to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ExpressionStatement to Block at 0", "INS SwitchCase to SwitchStatement at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: noDefaults to InfixExpression: && at 0", "INS VariableDeclarationStatement to Block at 5", "INS Block to IfStatement at 1", "INS SimpleName: code to MethodInvocation at 0", "INS ExpressionStatement to SwitchStatement at 8", "INS SimpleName: addLine to MethodInvocation at 1", "INS Modifier: static to MethodDeclaration at 1", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: seenDefault to PrefixExpression: ! at 0", "INS SimpleName: last to InfixExpression: != at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: SourceBuilder to SimpleType: SourceBuilder at 0", "INS SimpleName: getProperties to MethodInvocation at 1", "INS SimpleName: Property to SimpleType: Property at 0", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: property to MethodInvocation at 0", "INS StringLiteral: \"if (!_unsetProperties.contains(%s.%s)) {\" to MethodInvocation at 2", "INS SimpleType: Metadata to SingleVariableDeclaration at 0", "INS StringLiteral: \"result.append(\\\", \\\");\" to MethodInvocation at 2", "INS BreakStatement to SwitchStatement at 6", "INS TypeLiteral to MethodInvocation at 3", "INS SimpleName: noDefaults to InfixExpression: && at 0", "INS SimpleName: getProperties to MethodInvocation at 1", "INS SimpleName: property to InfixExpression: != at 0", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: code to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: last to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 4", "INS SimpleName: metadata to MethodInvocation at 0", "INS MethodInvocation to SwitchStatement at 0", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS BreakStatement to SwitchStatement at 2", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: getLast to MethodInvocation at 1", "INS SimpleName: metadata to MethodInvocation at 0", "INS InfixExpression: != to InfixExpression: && at 1", "INS SimpleName: addLine to MethodInvocation at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS MethodInvocation to PrefixExpression: ! at 0", "INS StringLiteral: \"separator = \\\", \\\";\" to MethodInvocation at 2", "INS SimpleType: StringBuilder to TypeLiteral at 0", "INS SimpleName: code to MethodInvocation at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS Assignment: = to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: HAS_DEFAULT to SwitchCase at 0", "INS SimpleName: property to SingleVariableDeclaration at 1", "INS SimpleName: addLine to MethodInvocation at 1", "INS SwitchCase to SwitchStatement at 3", "INS SimpleName: noDefaults to PrefixExpression: ! at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS SimpleName: property to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleName: getType to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: noDefaults to PrefixExpression: ! at 0", "INS ExpressionStatement to SwitchStatement at 5", "INS MethodInvocation to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS StringLiteral: \"}\" to MethodInvocation at 2", "INS SimpleType: Property to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to Block at 4", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"result.append(separator);\" to MethodInvocation at 2", "INS SimpleName: getAllCapsName to MethodInvocation at 1", "INS StringLiteral: \"return result.toString();\" to MethodInvocation at 2", "INS SimpleName: getProperties to MethodInvocation at 1", "INS SimpleType: SourceBuilder to SingleVariableDeclaration at 0", "INS BooleanLiteral: false to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: metadata to MethodInvocation at 0", "INS StringLiteral: \"%1$s result = new %1$s(\\\"partial %2$s{\\\");\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: noDefaults to VariableDeclarationFragment at 0", "INS SimpleName: HAS_DEFAULT to MethodInvocation at 2", "INS SimpleName: first to InfixExpression: != at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS IfStatement to IfStatement at 2", "INS SimpleName: metadata to MethodInvocation at 0", "INS SimpleName: hadSeenDefault to InfixExpression: && at 1", "INS SwitchCase to SwitchStatement at 4", "INS BooleanLiteral: true to Assignment: = at 1", "INS BreakStatement to SwitchStatement at 9", "INS InfixExpression: != to InfixExpression: && at 1", "INS MethodInvocation to EnhancedForStatement at 1", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: HAS_DEFAULT to SwitchCase at 0", "INS StringLiteral: \"result.append(\\\"%1$s=\\\").append(%1$s);\" to MethodInvocation at 2", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: addLine to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS SimpleName: writePartialToStringWithConcatenation to MethodDeclaration at 3", "INS SimpleType: Metadata to SingleVariableDeclaration at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: metadata to SingleVariableDeclaration at 1", "INS SimpleName: SourceBuilder to SimpleType: SourceBuilder at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS Modifier: static to MethodDeclaration at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: SourceBuilder to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 23", "INS SimpleName: code to SingleVariableDeclaration at 1", "INS SimpleName: Metadata to SimpleType: Metadata at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 24", "operations": ["INS SimpleName: getStaticMethods to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: Excerpt to SimpleType: Excerpt at 0", "INS SimpleName: staticMethod to MethodInvocation at 3", "INS SimpleName: getProperties to MethodInvocation at 1", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleName: addStaticMethods to MethodDeclaration at 3", "INS ParameterizedType: Set<Excerpt> to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: property to SingleVariableDeclaration at 1", "INS SimpleType: Property to SingleVariableDeclaration at 0", "INS Block to EnhancedForStatement at 2", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: Excerpt to SimpleType: Excerpt at 0", "INS SimpleName: Property to SimpleType: Property at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: SourceBuilder to SimpleType: SourceBuilder at 0", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: LinkedHashSet to SimpleType: LinkedHashSet at 0", "INS ExpressionStatement to Block at 0", "INS EnhancedForStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Excerpt to SimpleType: Excerpt at 0", "INS EnhancedForStatement to Block at 1", "INS SimpleType: Excerpt to SingleVariableDeclaration at 0", "INS StringLiteral: \"%s\" to MethodInvocation at 2", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: SourceBuilder to SingleVariableDeclaration at 0", "INS SimpleName: property to MethodInvocation at 0", "INS SimpleName: getCodeGenerator to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: staticMethods to EnhancedForStatement at 1", "INS SimpleName: metadata to MethodInvocation at 0", "INS SimpleName: addAll to MethodInvocation at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: staticMethods to VariableDeclarationFragment at 0", "INS SimpleType: Set to ParameterizedType: Set<Excerpt> at 0", "INS SimpleName: code to SingleVariableDeclaration at 1", "INS SimpleType: LinkedHashSet to ParameterizedType: LinkedHashSet<Excerpt> at 0", "INS VariableDeclarationStatement to Block at 0", "INS Block to MethodDeclaration at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Excerpt to ParameterizedType: Set<Excerpt> at 1", "INS ParameterizedType: LinkedHashSet<Excerpt> to ClassInstanceCreation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: metadata to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 24", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: Metadata to SimpleType: Metadata at 0", "INS MethodInvocation to MethodInvocation at 2", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleType: Excerpt to ParameterizedType: LinkedHashSet<Excerpt> at 1", "INS SimpleName: staticMethod to SingleVariableDeclaration at 1", "INS SimpleName: staticMethods to MethodInvocation at 0", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleType: Metadata to SingleVariableDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 31", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: Property to SimpleType: Property at 0", "INS SimpleName: Property to SimpleType: Property at 0", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleType: Property to ParameterizedType: Predicate<Property> at 1", "INS SimpleName: getCodeGenerator to MethodInvocation at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS InfixExpression: == to ReturnStatement at 0", "INS ParameterizedType: Predicate<Property> to ClassInstanceCreation at 0", "INS SimpleName: apply to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: Property to ParameterizedType: Predicate<Property> at 1", "INS SimpleName: getType to MethodInvocation at 1", "INS SimpleName: property to MethodInvocation at 0", "INS SimpleType: Predicate to ParameterizedType: Predicate<Property> at 0", "INS QualifiedName: Type.HAS_DEFAULT to InfixExpression: == at 1", "INS SimpleType: Property to SingleVariableDeclaration at 0", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: static to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 31", "INS SimpleName: Property to SimpleType: Property at 0", "INS SimpleName: Predicate to SimpleType: Predicate at 0", "INS SimpleName: Predicate to SimpleType: Predicate at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleType: Predicate to ParameterizedType: Predicate<Property> at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ParameterizedType: Predicate<Property> to FieldDeclaration at 3", "INS SimpleName: HAS_DEFAULT to VariableDeclarationFragment at 0", "INS SimpleName: property to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 6", "MOV InfixExpression: != to IfStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 15", "operations": ["INS ExpressionStatement to Block at 15", "INS SimpleName: addStaticMethods to MethodInvocation at 0", "INS SimpleName: code to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: metadata to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS IfStatement to Block at 3", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: isGuavaAvailable to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: code to MethodInvocation at 0", "INS StringLiteral: \"@%s()\" to MethodInvocation at 2", "INS MethodInvocation to IfStatement at 0"]}, {"root": "INS IfStatement to Block at 11", "operations": ["INS Block to IfStatement at 1", "INS IfStatement to Block at 11"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS MethodInvocation to InfixExpression: && at 0", "INS SimpleName: body to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: > at 0", "INS SimpleName: getProperties to MethodInvocation at 1", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: metadata to MethodInvocation at 0", "INS SimpleName: size to MethodInvocation at 1", "INS SimpleName: isGuavaAvailable to MethodInvocation at 1", "INS InfixExpression: > to InfixExpression: && at 1", "INS MethodInvocation to MethodInvocation at 0", "INS NumberLiteral: 1 to InfixExpression: > at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV TypeLiteral to MethodInvocation at 3", "MOV SimpleName: addLine to MethodInvocation at 0", "MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: isGuavaAvailable to MethodInvocation at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: code to MethodInvocation at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: writePartialToStringWithBuilder to MethodInvocation at 0", "INS SimpleName: metadata to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: code to MethodInvocation at 1", "INS Block to IfStatement at 1"]}, {"root": "INS Block to IfStatement at 2", "operations": ["INS SimpleName: code to MethodInvocation at 1", "INS SimpleName: metadata to MethodInvocation at 2", "INS Block to IfStatement at 2", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: writePartialToStringWithConcatenation to MethodInvocation at 0"]}, {"root": "UPDATE from addLine to code", "operations": ["UPD SimpleName: addLine from addLine to code"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: > to InfixExpression: && at 0"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL StringLiteral: \"@%s()\""]}]}}, {"CodeGenerator_diff": {"operations": ["Insert ImportDeclaration(55) into CompilationUnit(3953) at 27", "Insert ImportDeclaration(59) into CompilationUnit(3953) at 29", "Insert QualifiedName: java.util.LinkedHashSet(54) into ImportDeclaration(55) at 0", "Insert QualifiedName: java.util.Set(58) into ImportDeclaration(59) at 0", "Insert MethodDeclaration(3381) into TypeDeclaration: class(3952) at 22", "Insert MethodDeclaration(3598) into TypeDeclaration: class(3952) at 23", "Insert MethodDeclaration(3657) into TypeDeclaration: class(3952) at 24", "Insert FieldDeclaration(3951) into TypeDeclaration: class(3952) at 31", "Insert Modifier: private(3175) into MethodDeclaration(3381) at 0", "Insert Modifier: static(3176) into MethodDeclaration(3381) at 1", "Insert PrimitiveType: void(3177) into MethodDeclaration(3381) at 2", "Insert SimpleName: writePartialToStringWithBuilder(3178) into MethodDeclaration(3381) at 3", "Insert SingleVariableDeclaration(3182) into MethodDeclaration(3381) at 4", "Insert SingleVariableDeclaration(3186) into MethodDeclaration(3381) at 5", "Insert Block(3380) into MethodDeclaration(3381) at 6", "Insert Modifier: private(3382) into MethodDeclaration(3598) at 0", "Insert Modifier: static(3383) into MethodDeclaration(3598) at 1", "Insert PrimitiveType: void(3384) into MethodDeclaration(3598) at 2", "Insert SimpleName: writePartialToStringWithConcatenation(3385) into MethodDeclaration(3598) at 3", "Insert SingleVariableDeclaration(3389) into MethodDeclaration(3598) at 4", "Insert SingleVariableDeclaration(3393) into MethodDeclaration(3598) at 5", "Move Block(3322) into MethodDeclaration(3598) at 6", "Insert Modifier: private(3599) into MethodDeclaration(3657) at 0", "Insert Modifier: static(3600) into MethodDeclaration(3657) at 1", "Insert PrimitiveType: void(3601) into MethodDeclaration(3657) at 2", "Insert SimpleName: addStaticMethods(3602) into MethodDeclaration(3657) at 3", "Insert SingleVariableDeclaration(3606) into MethodDeclaration(3657) at 4", "Insert SingleVariableDeclaration(3610) into MethodDeclaration(3657) at 5", "Insert Block(3656) into MethodDeclaration(3657) at 6", "Insert Modifier: private(3915) into FieldDeclaration(3951) at 0", "Insert Modifier: static(3916) into FieldDeclaration(3951) at 1", "Insert Modifier: final(3917) into FieldDeclaration(3951) at 2", "Insert ParameterizedType: Predicate<Property>(3922) into FieldDeclaration(3951) at 3", "Insert VariableDeclarationFragment(3950) into FieldDeclaration(3951) at 4", "Insert ExpressionStatement(241) into Block(247) at 15", "Insert ExpressionStatement(1052) into Block(1085) at 2", "Insert IfStatement(1065) into Block(1085) at 3", "Insert IfStatement(3167) into Block(3173) at 11", "Insert SimpleType: SourceBuilder(3180) into SingleVariableDeclaration(3182) at 0", "Insert SimpleName: code(3181) into SingleVariableDeclaration(3182) at 1", "Insert SimpleType: Metadata(3184) into SingleVariableDeclaration(3186) at 0", "Insert SimpleName: metadata(3185) into SingleVariableDeclaration(3186) at 1", "Insert ExpressionStatement(3199) into Block(3380) at 0", "Insert VariableDeclarationStatement(3210) into Block(3380) at 1", "Insert IfStatement(3218) into Block(3380) at 2", "Insert VariableDeclarationStatement(3223) into Block(3380) at 3", "Insert VariableDeclarationStatement(3234) into Block(3380) at 4", "Insert VariableDeclarationStatement(3245) into Block(3380) at 5", "Insert EnhancedForStatement(3371) into Block(3380) at 6", "Insert ExpressionStatement(3379) into Block(3380) at 7", "Insert SimpleType: SourceBuilder(3387) into SingleVariableDeclaration(3389) at 0", "Insert SimpleName: code(3388) into SingleVariableDeclaration(3389) at 1", "Insert SimpleType: Metadata(3391) into SingleVariableDeclaration(3393) at 0", "Insert SimpleName: metadata(3392) into SingleVariableDeclaration(3393) at 1", "Insert SimpleType: SourceBuilder(3604) into SingleVariableDeclaration(3606) at 0", "Insert SimpleName: code(3605) into SingleVariableDeclaration(3606) at 1", "Insert SimpleType: Metadata(3608) into SingleVariableDeclaration(3610) at 0", "Insert SimpleName: metadata(3609) into SingleVariableDeclaration(3610) at 1", "Insert VariableDeclarationStatement(3624) into Block(3656) at 0", "Insert EnhancedForStatement(3642) into Block(3656) at 1", "Insert EnhancedForStatement(3655) into Block(3656) at 2", "Insert SimpleType: Predicate(3919) into ParameterizedType: Predicate<Property>(3922) at 0", "Insert SimpleType: Property(3921) into ParameterizedType: Predicate<Property>(3922) at 1", "Insert SimpleName: HAS_DEFAULT(3923) into VariableDeclarationFragment(3950) at 0", "Insert ClassInstanceCreation(3949) into VariableDeclarationFragment(3950) at 1", "Insert MethodInvocation(240) into ExpressionStatement(241) at 0", "Insert InfixExpression: &&(355) into IfStatement(368) at 0", "Move MethodInvocation(1038) into ExpressionStatement(1052) at 0", "Insert MethodInvocation(1055) into IfStatement(1065) at 0", "Insert Block(1064) into IfStatement(1065) at 1", "Move InfixExpression: !=(3096) into IfStatement(3167) at 0", "Insert Block(3166) into IfStatement(3167) at 1", "Insert SimpleName: SourceBuilder(3179) into SimpleType: SourceBuilder(3180) at 0", "Insert SimpleName: Metadata(3183) into SimpleType: Metadata(3184) at 0", "Insert MethodInvocation(3198) into ExpressionStatement(3199) at 0", "Insert PrimitiveType: boolean(3200) into VariableDeclarationStatement(3210) at 0", "Insert VariableDeclarationFragment(3209) into VariableDeclarationStatement(3210) at 1", "Insert SimpleName: noDefaults(3211) into IfStatement(3218) at 0", "Insert Block(3217) into IfStatement(3218) at 1", "Insert PrimitiveType: boolean(3219) into VariableDeclarationStatement(3223) at 0", "Insert VariableDeclarationFragment(3222) into VariableDeclarationStatement(3223) at 1", "Insert SimpleType: Property(3225) into VariableDeclarationStatement(3234) at 0", "Insert VariableDeclarationFragment(3233) into VariableDeclarationStatement(3234) at 1", "Insert SimpleType: Property(3236) into VariableDeclarationStatement(3245) at 0", "Insert VariableDeclarationFragment(3244) into VariableDeclarationStatement(3245) at 1", "Insert SingleVariableDeclaration(3249) into EnhancedForStatement(3371) at 0", "Insert MethodInvocation(3252) into EnhancedForStatement(3371) at 1", "Insert Block(3370) into EnhancedForStatement(3371) at 2", "Insert MethodInvocation(3378) into ExpressionStatement(3379) at 0", "Insert SimpleName: SourceBuilder(3386) into SimpleType: SourceBuilder(3387) at 0", "Insert SimpleName: Metadata(3390) into SimpleType: Metadata(3391) at 0", "Insert SimpleName: SourceBuilder(3603) into SimpleType: SourceBuilder(3604) at 0", "Insert SimpleName: Metadata(3607) into SimpleType: Metadata(3608) at 0", "Insert ParameterizedType: Set<Excerpt>(3615) into VariableDeclarationStatement(3624) at 0", "Insert VariableDeclarationFragment(3623) into VariableDeclarationStatement(3624) at 1", "Insert SingleVariableDeclaration(3628) into EnhancedForStatement(3642) at 0", "Insert MethodInvocation(3631) into EnhancedForStatement(3642) at 1", "Insert Block(3641) into EnhancedForStatement(3642) at 2", "Insert SingleVariableDeclaration(3646) into EnhancedForStatement(3655) at 0", "Insert SimpleName: staticMethods(3647) into EnhancedForStatement(3655) at 1", "Insert Block(3654) into EnhancedForStatement(3655) at 2", "Insert SimpleName: Predicate(3918) into SimpleType: Predicate(3919) at 0", "Insert SimpleName: Property(3920) into SimpleType: Property(3921) at 0", "Insert ParameterizedType: Predicate<Property>(3928) into ClassInstanceCreation(3949) at 0", "Insert AnonymousClassDeclaration(3948) into ClassInstanceCreation(3949) at 1", "Insert SimpleName: addStaticMethods(237) into MethodInvocation(240) at 0", "Insert SimpleName: code(238) into MethodInvocation(240) at 1", "Insert SimpleName: metadata(239) into MethodInvocation(240) at 2", "Insert MethodInvocation(347) into InfixExpression: &&(355) at 0", "Insert InfixExpression: >(354) into InfixExpression: &&(355) at 1", "Insert SimpleName: code(1053) into MethodInvocation(1055) at 0", "Insert SimpleName: isGuavaAvailable(1054) into MethodInvocation(1055) at 1", "Insert ExpressionStatement(1063) into Block(1064) at 0", "Move ExpressionStatement(3113) into Block(3166) at 0", "Move IfStatement(3323) into Block(3166) at 1", "Move ExpressionStatement(3321) into Block(3166) at 2", "Insert SimpleName: code(3187) into MethodInvocation(3198) at 0", "Insert SimpleName: addLine(3188) into MethodInvocation(3198) at 1", "Insert StringLiteral: \"%1$s result = new %1$s(\\\"partial %2$s{\\\");\"(3189) into MethodInvocation(3198) at 2", "Insert TypeLiteral(3192) into MethodInvocation(3198) at 3", "Insert MethodInvocation(3197) into MethodInvocation(3198) at 4", "Insert SimpleName: noDefaults(3201) into VariableDeclarationFragment(3209) at 0", "Insert PrefixExpression: !(3208) into VariableDeclarationFragment(3209) at 1", "Insert ExpressionStatement(3216) into Block(3217) at 0", "Insert SimpleName: seenDefault(3220) into VariableDeclarationFragment(3222) at 0", "Insert BooleanLiteral: false(3221) into VariableDeclarationFragment(3222) at 1", "Insert SimpleName: Property(3224) into SimpleType: Property(3225) at 0", "Insert SimpleName: first(3226) into VariableDeclarationFragment(3233) at 0", "Insert MethodInvocation(3232) into VariableDeclarationFragment(3233) at 1", "Insert SimpleName: Property(3235) into SimpleType: Property(3236) at 0", "Insert SimpleName: last(3237) into VariableDeclarationFragment(3244) at 0", "Insert MethodInvocation(3243) into VariableDeclarationFragment(3244) at 1", "Insert SimpleType: Property(3247) into SingleVariableDeclaration(3249) at 0", "Insert SimpleName: property(3248) into SingleVariableDeclaration(3249) at 1", "Insert SimpleName: metadata(3250) into MethodInvocation(3252) at 0", "Insert SimpleName: getProperties(3251) into MethodInvocation(3252) at 1", "Insert VariableDeclarationStatement(3257) into Block(3370) at 0", "Insert SwitchStatement(3295) into Block(3370) at 1", "Insert IfStatement(3318) into Block(3370) at 2", "Insert ExpressionStatement(3326) into Block(3370) at 3", "Insert IfStatement(3350) into Block(3370) at 4", "Insert SwitchStatement(3369) into Block(3370) at 5", "Insert MethodInvocation(3375) into MethodInvocation(3378) at 0", "Insert SimpleName: addLine(3376) into MethodInvocation(3378) at 1", "Insert StringLiteral: \"return result.toString();\"(3377) into MethodInvocation(3378) at 2", "Insert SimpleType: Set(3612) into ParameterizedType: Set<Excerpt>(3615) at 0", "Insert SimpleType: Excerpt(3614) into ParameterizedType: Set<Excerpt>(3615) at 1", "Insert SimpleName: staticMethods(3616) into VariableDeclarationFragment(3623) at 0", "Insert ClassInstanceCreation(3622) into VariableDeclarationFragment(3623) at 1", "Insert SimpleType: Property(3626) into SingleVariableDeclaration(3628) at 0", "Insert SimpleName: property(3627) into SingleVariableDeclaration(3628) at 1", "Insert SimpleName: metadata(3629) into MethodInvocation(3631) at 0", "Insert SimpleName: getProperties(3630) into MethodInvocation(3631) at 1", "Insert ExpressionStatement(3640) into Block(3641) at 0", "Insert SimpleType: Excerpt(3644) into SingleVariableDeclaration(3646) at 0", "Insert SimpleName: staticMethod(3645) into SingleVariableDeclaration(3646) at 1", "Insert ExpressionStatement(3653) into Block(3654) at 0", "Insert SimpleType: Predicate(3925) into ParameterizedType: Predicate<Property>(3928) at 0", "Insert SimpleType: Property(3927) into ParameterizedType: Predicate<Property>(3928) at 1", "Insert MethodDeclaration(3947) into AnonymousClassDeclaration(3948) at 0", "Insert SimpleName: body(345) into MethodInvocation(347) at 0", "Insert SimpleName: isGuavaAvailable(346) into MethodInvocation(347) at 1", "Insert MethodInvocation(352) into InfixExpression: >(354) at 0", "Insert NumberLiteral: 1(353) into InfixExpression: >(354) at 1", "Insert MethodInvocation(1062) into ExpressionStatement(1063) at 0", "Insert InfixExpression: &&(3147) into IfStatement(3160) at 0", "Insert Block(3153) into IfStatement(3160) at 1", "Insert Block(3159) into IfStatement(3160) at 2", "Insert SimpleType: StringBuilder(3191) into TypeLiteral(3192) at 0", "Insert MethodInvocation(3195) into MethodInvocation(3197) at 0", "Insert SimpleName: getSimpleName(3196) into MethodInvocation(3197) at 1", "Insert MethodInvocation(3207) into PrefixExpression: !(3208) at 0", "Insert MethodInvocation(3215) into ExpressionStatement(3216) at 0", "Insert MethodInvocation(3229) into MethodInvocation(3232) at 0", "Insert SimpleName: get(3230) into MethodInvocation(3232) at 1", "Insert NumberLiteral: 0(3231) into MethodInvocation(3232) at 2", "Insert SimpleName: Iterables(3238) into MethodInvocation(3243) at 0", "Insert SimpleName: getLast(3239) into MethodInvocation(3243) at 1", "Insert MethodInvocation(3242) into MethodInvocation(3243) at 2", "Insert SimpleName: Property(3246) into SimpleType: Property(3247) at 0", "Insert PrimitiveType: boolean(3253) into VariableDeclarationStatement(3257) at 0", "Insert VariableDeclarationFragment(3256) into VariableDeclarationStatement(3257) at 1", "Insert MethodInvocation(3262) into SwitchStatement(3295) at 0", "Insert SwitchCase(3264) into SwitchStatement(3295) at 1", "Insert ExpressionStatement(3268) into SwitchStatement(3295) at 2", "Insert BreakStatement(3269) into SwitchStatement(3295) at 3", "Insert SwitchCase(3271) into SwitchStatement(3295) at 4", "Insert ExpressionStatement(3279) into SwitchStatement(3295) at 5", "Insert BreakStatement(3280) into SwitchStatement(3295) at 6", "Insert SwitchCase(3282) into SwitchStatement(3295) at 7", "Insert ExpressionStatement(3293) into SwitchStatement(3295) at 8", "Insert BreakStatement(3294) into SwitchStatement(3295) at 9", "Insert InfixExpression: &&(3300) into IfStatement(3318) at 0", "Insert Block(3306) into IfStatement(3318) at 1", "Insert IfStatement(3317) into IfStatement(3318) at 2", "Insert MethodInvocation(3325) into ExpressionStatement(3326) at 0", "Insert InfixExpression: &&(3331) into IfStatement(3350) at 0", "Insert Block(3337) into IfStatement(3350) at 1", "Insert IfStatement(3349) into IfStatement(3350) at 2", "Insert MethodInvocation(3355) into SwitchStatement(3369) at 0", "Insert SwitchCase(3357) into SwitchStatement(3369) at 1", "Insert BreakStatement(3358) into SwitchStatement(3369) at 2", "Insert SwitchCase(3360) into SwitchStatement(3369) at 3", "Insert SwitchCase(3362) into SwitchStatement(3369) at 4", "Insert ExpressionStatement(3367) into SwitchStatement(3369) at 5", "Insert BreakStatement(3368) into SwitchStatement(3369) at 6", "Insert SimpleName: code(3372) into MethodInvocation(3375) at 0", "Insert SimpleName: addLine(3373) into MethodInvocation(3375) at 1", "Insert StringLiteral: \"result.append(\\\"}\\\");\"(3374) into MethodInvocation(3375) at 2", "Insert SimpleName: Set(3611) into SimpleType: Set(3612) at 0", "Insert SimpleName: Excerpt(3613) into SimpleType: Excerpt(3614) at 0", "Insert ParameterizedType: LinkedHashSet<Excerpt>(3621) into ClassInstanceCreation(3622) at 0", "Insert SimpleName: Property(3625) into SimpleType: Property(3626) at 0", "Insert MethodInvocation(3639) into ExpressionStatement(3640) at 0", "Insert SimpleName: Excerpt(3643) into SimpleType: Excerpt(3644) at 0", "Insert MethodInvocation(3652) into ExpressionStatement(3653) at 0", "Insert SimpleName: Predicate(3924) into SimpleType: Predicate(3925) at 0", "Insert SimpleName: Property(3926) into SimpleType: Property(3927) at 0", "Insert MarkerAnnotation(3930) into MethodDeclaration(3947) at 0", "Insert Modifier: public(3931) into MethodDeclaration(3947) at 1", "Insert PrimitiveType: boolean(3932) into MethodDeclaration(3947) at 2", "Insert SimpleName: apply(3933) into MethodDeclaration(3947) at 3", "Insert SingleVariableDeclaration(3937) into MethodDeclaration(3947) at 4", "Insert Block(3946) into MethodDeclaration(3947) at 5", "Insert MethodInvocation(350) into MethodInvocation(352) at 0", "Insert SimpleName: size(351) into MethodInvocation(352) at 1", "Insert SimpleName: code(1056) into MethodInvocation(1062) at 0", "Insert SimpleName: addLine(1057) into MethodInvocation(1062) at 1", "Insert StringLiteral: \"@%s()\"(1058) into MethodInvocation(1062) at 2", "Move TypeLiteral(1043) into MethodInvocation(1062) at 3", "Update SimpleName: addLine(1039) to code", "Move SimpleName: addLine(1039) into MethodInvocation(1072) at 0", "Move InfixExpression: >(342) into InfixExpression: &&(3147) at 0", "Insert PrefixExpression: !(3146) into InfixExpression: &&(3147) at 1", "Insert ExpressionStatement(3152) into Block(3153) at 0", "Insert ExpressionStatement(3158) into Block(3159) at 0", "Insert SimpleName: StringBuilder(3190) into SimpleType: StringBuilder(3191) at 0", "Insert SimpleName: metadata(3193) into MethodInvocation(3195) at 0", "Insert SimpleName: getType(3194) into MethodInvocation(3195) at 1", "Insert SimpleName: any(3202) into MethodInvocation(3207) at 0", "Insert MethodInvocation(3205) into MethodInvocation(3207) at 1", "Insert SimpleName: HAS_DEFAULT(3206) into MethodInvocation(3207) at 2", "Insert SimpleName: code(3212) into MethodInvocation(3215) at 0", "Insert SimpleName: addLine(3213) into MethodInvocation(3215) at 1", "Insert StringLiteral: \"String separator = \\\"\\\";\"(3214) into MethodInvocation(3215) at 2", "Insert SimpleName: metadata(3227) into MethodInvocation(3229) at 0", "Insert SimpleName: getProperties(3228) into MethodInvocation(3229) at 1", "Insert SimpleName: metadata(3240) into MethodInvocation(3242) at 0", "Insert SimpleName: getProperties(3241) into MethodInvocation(3242) at 1", "Insert SimpleName: hadSeenDefault(3254) into VariableDeclarationFragment(3256) at 0", "Insert SimpleName: seenDefault(3255) into VariableDeclarationFragment(3256) at 1", "Insert MethodInvocation(3260) into MethodInvocation(3262) at 0", "Insert SimpleName: getType(3261) into MethodInvocation(3262) at 1", "Insert SimpleName: HAS_DEFAULT(3263) into SwitchCase(3264) at 0", "Insert Assignment: =(3267) into ExpressionStatement(3268) at 0", "Insert SimpleName: OPTIONAL(3270) into SwitchCase(3271) at 0", "Insert MethodInvocation(3278) into ExpressionStatement(3279) at 0", "Insert SimpleName: REQUIRED(3281) into SwitchCase(3282) at 0", "Insert MethodInvocation(3292) into ExpressionStatement(3293) at 0", "Insert SimpleName: noDefaults(3296) into InfixExpression: &&(3300) at 0", "Insert InfixExpression: !=(3299) into InfixExpression: &&(3300) at 1", "Insert ExpressionStatement(3305) into Block(3306) at 0", "Insert InfixExpression: &&(3310) into IfStatement(3317) at 0", "Insert Block(3316) into IfStatement(3317) at 1", "Insert SimpleName: code(3319) into MethodInvocation(3325) at 0", "Insert SimpleName: addLine(3320) into MethodInvocation(3325) at 1", "Insert StringLiteral: \"result.append(\\\"%1$s=\\\").append(%1$s);\"(3321) into MethodInvocation(3325) at 2", "Insert MethodInvocation(3324) into MethodInvocation(3325) at 3", "Insert PrefixExpression: !(3328) into InfixExpression: &&(3331) at 0", "Insert PrefixExpression: !(3330) into InfixExpression: &&(3331) at 1", "Insert ExpressionStatement(3336) into Block(3337) at 0", "Insert InfixExpression: &&(3342) into IfStatement(3349) at 0", "Insert Block(3348) into IfStatement(3349) at 1", "Insert MethodInvocation(3353) into MethodInvocation(3355) at 0", "Insert SimpleName: getType(3354) into MethodInvocation(3355) at 1", "Insert SimpleName: HAS_DEFAULT(3356) into SwitchCase(3357) at 0", "Insert SimpleName: OPTIONAL(3359) into SwitchCase(3360) at 0", "Insert SimpleName: REQUIRED(3361) into SwitchCase(3362) at 0", "Insert MethodInvocation(3366) into ExpressionStatement(3367) at 0", "Insert SimpleType: LinkedHashSet(3618) into ParameterizedType: LinkedHashSet<Excerpt>(3621) at 0", "Insert SimpleType: Excerpt(3620) into ParameterizedType: LinkedHashSet<Excerpt>(3621) at 1", "Insert SimpleName: staticMethods(3632) into MethodInvocation(3639) at 0", "Insert SimpleName: addAll(3633) into MethodInvocation(3639) at 1", "Insert MethodInvocation(3638) into MethodInvocation(3639) at 2", "Insert SimpleName: code(3648) into MethodInvocation(3652) at 0", "Insert SimpleName: add(3649) into MethodInvocation(3652) at 1", "Insert StringLiteral: \"%s\"(3650) into MethodInvocation(3652) at 2", "Insert SimpleName: staticMethod(3651) into MethodInvocation(3652) at 3", "Insert SimpleName: Override(3929) into MarkerAnnotation(3930) at 0", "Insert SimpleType: Property(3935) into SingleVariableDeclaration(3937) at 0", "Insert SimpleName: property(3936) into SingleVariableDeclaration(3937) at 1", "Insert ReturnStatement(3945) into Block(3946) at 0", "Insert SimpleName: metadata(348) into MethodInvocation(350) at 0", "Insert SimpleName: getProperties(349) into MethodInvocation(350) at 1", "Insert MethodInvocation(3145) into PrefixExpression: !(3146) at 0", "Insert MethodInvocation(3151) into ExpressionStatement(3152) at 0", "Insert MethodInvocation(3157) into ExpressionStatement(3158) at 0", "Insert SimpleName: metadata(3203) into MethodInvocation(3205) at 0", "Insert SimpleName: getProperties(3204) into MethodInvocation(3205) at 1", "Insert SimpleName: property(3258) into MethodInvocation(3260) at 0", "Insert SimpleName: getCodeGenerator(3259) into MethodInvocation(3260) at 1", "Insert SimpleName: seenDefault(3265) into Assignment: =(3267) at 0", "Insert BooleanLiteral: true(3266) into Assignment: =(3267) at 1", "Insert SimpleName: code(3272) into MethodInvocation(3278) at 0", "Insert SimpleName: addLine(3273) into MethodInvocation(3278) at 1", "Insert StringLiteral: \"if (%s != null) {\"(3274) into MethodInvocation(3278) at 2", "Insert MethodInvocation(3277) into MethodInvocation(3278) at 3", "Insert SimpleName: code(3283) into MethodInvocation(3292) at 0", "Insert SimpleName: addLine(3284) into MethodInvocation(3292) at 1", "Insert StringLiteral: \"if (!_unsetProperties.contains(%s.%s)) {\"(3285) into MethodInvocation(3292) at 2", "Insert MethodInvocation(3288) into MethodInvocation(3292) at 3", "Insert MethodInvocation(3291) into MethodInvocation(3292) at 4", "Insert SimpleName: property(3297) into InfixExpression: !=(3299) at 0", "Insert SimpleName: first(3298) into InfixExpression: !=(3299) at 1", "Insert MethodInvocation(3304) into ExpressionStatement(3305) at 0", "Insert PrefixExpression: !(3308) into InfixExpression: &&(3310) at 0", "Insert SimpleName: hadSeenDefault(3309) into InfixExpression: &&(3310) at 1", "Insert ExpressionStatement(3315) into Block(3316) at 0", "Insert SimpleName: property(3322) into MethodInvocation(3324) at 0", "Insert SimpleName: getName(3323) into MethodInvocation(3324) at 1", "Insert SimpleName: noDefaults(3327) into PrefixExpression: !(3328) at 0", "Insert SimpleName: seenDefault(3329) into PrefixExpression: !(3330) at 0", "Insert MethodInvocation(3335) into ExpressionStatement(3336) at 0", "Insert SimpleName: noDefaults(3338) into InfixExpression: &&(3342) at 0", "Insert InfixExpression: !=(3341) into InfixExpression: &&(3342) at 1", "Insert ExpressionStatement(3347) into Block(3348) at 0", "Insert SimpleName: property(3351) into MethodInvocation(3353) at 0", "Insert SimpleName: getCodeGenerator(3352) into MethodInvocation(3353) at 1", "Insert SimpleName: code(3363) into MethodInvocation(3366) at 0", "Insert SimpleName: addLine(3364) into MethodInvocation(3366) at 1", "Insert StringLiteral: \"}\"(3365) into MethodInvocation(3366) at 2", "Insert SimpleName: LinkedHashSet(3617) into SimpleType: LinkedHashSet(3618) at 0", "Insert SimpleName: Excerpt(3619) into SimpleType: Excerpt(3620) at 0", "Insert MethodInvocation(3636) into MethodInvocation(3638) at 0", "Insert SimpleName: getStaticMethods(3637) into MethodInvocation(3638) at 1", "Insert SimpleName: Property(3934) into SimpleType: Property(3935) at 0", "Insert InfixExpression: ==(3944) into ReturnStatement(3945) at 0", "Insert SimpleName: code(3143) into MethodInvocation(3145) at 0", "Insert SimpleName: isGuavaAvailable(3144) into MethodInvocation(3145) at 1", "Insert SimpleName: writePartialToStringWithBuilder(3148) into MethodInvocation(3151) at 0", "Insert SimpleName: code(3149) into MethodInvocation(3151) at 1", "Insert SimpleName: metadata(3150) into MethodInvocation(3151) at 2", "Insert SimpleName: writePartialToStringWithConcatenation(3154) into MethodInvocation(3157) at 0", "Insert SimpleName: code(3155) into MethodInvocation(3157) at 1", "Insert SimpleName: metadata(3156) into MethodInvocation(3157) at 2", "Insert SimpleName: property(3275) into MethodInvocation(3277) at 0", "Insert SimpleName: getName(3276) into MethodInvocation(3277) at 1", "Insert SimpleName: metadata(3286) into MethodInvocation(3288) at 0", "Insert SimpleName: getPropertyEnum(3287) into MethodInvocation(3288) at 1", "Insert SimpleName: property(3289) into MethodInvocation(3291) at 0", "Insert SimpleName: getAllCapsName(3290) into MethodInvocation(3291) at 1", "Insert SimpleName: code(3301) into MethodInvocation(3304) at 0", "Insert SimpleName: addLine(3302) into MethodInvocation(3304) at 1", "Insert StringLiteral: \"result.append(separator);\"(3303) into MethodInvocation(3304) at 2", "Insert SimpleName: noDefaults(3307) into PrefixExpression: !(3308) at 0", "Insert MethodInvocation(3314) into ExpressionStatement(3315) at 0", "Insert SimpleName: code(3332) into MethodInvocation(3335) at 0", "Insert SimpleName: addLine(3333) into MethodInvocation(3335) at 1", "Insert StringLiteral: \"result.append(\\\", \\\");\"(3334) into MethodInvocation(3335) at 2", "Insert SimpleName: property(3339) into InfixExpression: !=(3341) at 0", "Insert SimpleName: last(3340) into InfixExpression: !=(3341) at 1", "Insert MethodInvocation(3346) into ExpressionStatement(3347) at 0", "Insert SimpleName: property(3634) into MethodInvocation(3636) at 0", "Insert SimpleName: getCodeGenerator(3635) into MethodInvocation(3636) at 1", "Insert MethodInvocation(3942) into InfixExpression: ==(3944) at 0", "Insert QualifiedName: Type.HAS_DEFAULT(3943) into InfixExpression: ==(3944) at 1", "Insert SimpleName: code(3311) into MethodInvocation(3314) at 0", "Insert SimpleName: addLine(3312) into MethodInvocation(3314) at 1", "Insert StringLiteral: \"result.append(\\\", \\\");\"(3313) into MethodInvocation(3314) at 2", "Insert SimpleName: code(3343) into MethodInvocation(3346) at 0", "Insert SimpleName: addLine(3344) into MethodInvocation(3346) at 1", "Insert StringLiteral: \"separator = \\\", \\\";\"(3345) into MethodInvocation(3346) at 2", "Insert MethodInvocation(3940) into MethodInvocation(3942) at 0", "Insert SimpleName: getType(3941) into MethodInvocation(3942) at 1", "Insert SimpleName: property(3938) into MethodInvocation(3940) at 0", "Insert SimpleName: getCodeGenerator(3939) into MethodInvocation(3940) at 1", "Delete StringLiteral: \"@%s()\"(1040)", "Delete MethodInvocation(1044)"]}}, {"ListPropertyFactory_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS ImportDeclaration to CompilationUnit at 8", "INS QualifiedName: com.google.common.collect.ImmutableSet to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS ImportDeclaration to CompilationUnit at 11", "INS QualifiedName: org.inferred.freebuilder.processor.util.Excerpt to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 13", "operations": ["INS QualifiedName: java.lang.reflect.Array to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 13"]}, {"root": "INS ImportDeclaration to CompilationUnit at 15", "operations": ["INS QualifiedName: java.util.Arrays to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 15"]}, {"root": "INS ImportDeclaration to CompilationUnit at 19", "operations": ["INS QualifiedName: java.util.Set to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 19"]}, {"root": "INS EnumDeclaration to TypeDeclaration: class at 10", "operations": ["INS SimpleName: addLine to MethodInvocation at 1", "INS StringLiteral: \"private static <E> %1$s<E> immutableList(%1$s<E> elements, %2$s<E> type) {\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 3", "INS SimpleName: Collections to SimpleType: Collections at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"  }\" to MethodInvocation at 2", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: isGuavaAvailable to MethodInvocation at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: Collections to SimpleType: Collections at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: Array to SimpleType: Array at 0", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"\" to MethodInvocation at 2", "INS SimpleName: Excerpt to SimpleType: Excerpt at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleType: SourceBuilder to SingleVariableDeclaration at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: List to SimpleType: List at 0", "INS StringLiteral: \"    return %s.emptyList();\" to MethodInvocation at 2", "INS Block to MethodDeclaration at 5", "INS TypeLiteral to MethodInvocation at 3", "INS StringLiteral: \"        (E[]) %s.newInstance(type, elements.size()))));\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 3", "INS StringLiteral: \"  switch (elements.size()) {\" to MethodInvocation at 2", "INS StringLiteral: \"}\" to MethodInvocation at 2", "INS SimpleName: StaticMethod to EnumDeclaration at 2", "INS SimpleType: Excerpt to EnumDeclaration at 3", "INS StringLiteral: \"  default:\" to MethodInvocation at 2", "INS SimpleType: Collections to TypeLiteral at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS IfStatement to Block at 0", "INS SimpleName: code to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS EnumDeclaration to TypeDeclaration: class at 10", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: Arrays to SimpleType: Arrays at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: SourceBuilder to SimpleType: SourceBuilder at 0", "INS StringLiteral: \"    return %s.singletonList(elements.get(0));\" to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: code to SingleVariableDeclaration at 1", "INS TypeLiteral to MethodInvocation at 3", "INS SimpleType: Array to TypeLiteral at 0", "INS StringLiteral: \"@%s(\\\"unchecked\\\")\" to MethodInvocation at 2", "INS Modifier: static to EnumDeclaration at 1", "INS SimpleName: addTo to MethodDeclaration at 3", "INS SimpleName: addLine to MethodInvocation at 1", "INS PrefixExpression: ! to IfStatement at 0", "INS TypeLiteral to MethodInvocation at 4", "INS Modifier: private to EnumDeclaration at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: SuppressWarnings to TypeLiteral at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: addLine to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleType: Arrays to TypeLiteral at 0", "INS StringLiteral: \"    return %s.unmodifiableList(%s.asList(elements.toArray(\" to MethodInvocation at 2", "INS SimpleName: Override to MarkerAnnotation at 0", "INS EnumConstantDeclaration to EnumDeclaration at 4", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: code to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: Collections to TypeLiteral at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: Collections to TypeLiteral at 0", "INS SimpleName: SuppressWarnings to SimpleType: SuppressWarnings at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleType: Class to TypeLiteral at 0", "INS AnonymousClassDeclaration to EnumConstantDeclaration at 1", "INS StringLiteral: \"  case 1:\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 3", "INS SimpleType: List to TypeLiteral at 0", "INS SimpleName: Collections to SimpleType: Collections at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS StringLiteral: \"  case 0:\" to MethodInvocation at 2", "INS SimpleName: IMMUTABLE_LIST to EnumConstantDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS SimpleName: getStaticMethods to MethodDeclaration at 3", "INS SimpleType: StaticMethod to ParameterizedType: Set<StaticMethod> at 1", "INS SimpleName: StaticMethod to MethodInvocation at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: StaticMethod to SimpleType: StaticMethod at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleName: copyOf to MethodInvocation at 1", "INS SimpleName: ImmutableSet to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS SimpleType: Set to ParameterizedType: Set<StaticMethod> at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: values to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS ParameterizedType: Set<StaticMethod> to MethodDeclaration at 2", "INS MethodInvocation to MethodInvocation at 2", "INS ReturnStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS MethodInvocation to IfStatement at 0", "INS SimpleName: add to MethodInvocation at 1", "INS Block to IfStatement at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: isGuavaAvailable to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: code to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: add to MethodInvocation at 1", "INS StringLiteral: \"%s.copyOf\" to MethodInvocation at 2", "INS IfStatement to Block at 1", "INS SimpleName: code to MethodInvocation at 0", "INS StringLiteral: \"immutableList\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"(%s.%s\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 2", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: add to MethodInvocation at 1"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS SimpleName: add to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS PrefixExpression: ! to IfStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: isGuavaAvailable to MethodInvocation at 1", "INS IfStatement to Block at 3", "INS StringLiteral: \", %s.class\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: code to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: elementType to MethodInvocation at 3"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS ExpressionStatement to Block at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \");\\n\" to MethodInvocation at 2", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: code to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: addLine to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 4", "MOV SimpleName: builder to MethodInvocation at 3", "MOV StringLiteral: \"%s = %s.copyOf(%s.%s);\" to MethodInvocation at 2", "MOV TypeLiteral to MethodInvocation at 3", "MOV SimpleName: code to MethodInvocation at 0", "MOV SimpleName: finalField to MethodInvocation at 3"]}, {"root": "UPDATE from addLine to add", "operations": ["UPD SimpleName: addLine from addLine to add"]}, {"root": "UPDATE from \"%s = %s.copyOf(%s.%s);\" to \"%s = \"", "operations": ["UPD StringLiteral: \"%s = %s.copyOf(%s.%s);\" from \"%s = %s.copyOf(%s.%s);\" to \"%s = \""]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation"]}]}}, {"ListPropertyFactory_diff": {"operations": ["Insert ImportDeclaration(17) into CompilationUnit(1072) at 8", "Insert ImportDeclaration(23) into CompilationUnit(1072) at 11", "Insert ImportDeclaration(27) into CompilationUnit(1072) at 13", "Insert ImportDeclaration(31) into CompilationUnit(1072) at 15", "Insert ImportDeclaration(39) into CompilationUnit(1072) at 19", "Insert QualifiedName: com.google.common.collect.ImmutableSet(16) into ImportDeclaration(17) at 0", "Insert QualifiedName: org.inferred.freebuilder.processor.util.Excerpt(22) into ImportDeclaration(23) at 0", "Insert QualifiedName: java.lang.reflect.Array(26) into ImportDeclaration(27) at 0", "Insert QualifiedName: java.util.Arrays(30) into ImportDeclaration(31) at 0", "Insert QualifiedName: java.util.Set(38) into ImportDeclaration(39) at 0", "Insert EnumDeclaration(1070) into TypeDeclaration: class(1071) at 10", "Insert MethodDeclaration(978) into TypeDeclaration: class(979) at 16", "Insert Modifier: private(980) into EnumDeclaration(1070) at 0", "Insert Modifier: static(981) into EnumDeclaration(1070) at 1", "Insert SimpleName: StaticMethod(982) into EnumDeclaration(1070) at 2", "Insert SimpleType: Excerpt(984) into EnumDeclaration(1070) at 3", "Insert EnumConstantDeclaration(1069) into EnumDeclaration(1070) at 4", "Insert MarkerAnnotation(962) into MethodDeclaration(978) at 0", "Insert Modifier: public(963) into MethodDeclaration(978) at 1", "Insert ParameterizedType: Set<StaticMethod>(968) into MethodDeclaration(978) at 2", "Insert SimpleName: getStaticMethods(969) into MethodDeclaration(978) at 3", "Insert Block(977) into MethodDeclaration(978) at 4", "Insert SimpleName: Excerpt(983) into SimpleType: Excerpt(984) at 0", "Insert SimpleName: IMMUTABLE_LIST(985) into EnumConstantDeclaration(1069) at 0", "Insert AnonymousClassDeclaration(1068) into EnumConstantDeclaration(1069) at 1", "Insert ExpressionStatement(769) into Block(815) at 0", "Insert IfStatement(788) into Block(815) at 1", "Insert ExpressionStatement(797) into Block(815) at 2", "Insert IfStatement(809) into Block(815) at 3", "Insert ExpressionStatement(814) into Block(815) at 4", "Insert SimpleName: Override(961) into MarkerAnnotation(962) at 0", "Insert SimpleType: Set(965) into ParameterizedType: Set<StaticMethod>(968) at 0", "Insert SimpleType: StaticMethod(967) into ParameterizedType: Set<StaticMethod>(968) at 1", "Insert ReturnStatement(976) into Block(977) at 0", "Insert MethodDeclaration(1067) into AnonymousClassDeclaration(1068) at 0", "Insert MethodInvocation(768) into ExpressionStatement(769) at 0", "Insert MethodInvocation(772) into IfStatement(788) at 0", "Insert Block(781) into IfStatement(788) at 1", "Insert Block(787) into IfStatement(788) at 2", "Insert MethodInvocation(796) into ExpressionStatement(797) at 0", "Insert PrefixExpression: !(801) into IfStatement(809) at 0", "Insert Block(808) into IfStatement(809) at 1", "Insert MethodInvocation(813) into ExpressionStatement(814) at 0", "Insert SimpleName: Set(964) into SimpleType: Set(965) at 0", "Insert SimpleName: StaticMethod(966) into SimpleType: StaticMethod(967) at 0", "Insert MethodInvocation(975) into ReturnStatement(976) at 0", "Insert MarkerAnnotation(987) into MethodDeclaration(1067) at 0", "Insert Modifier: public(988) into MethodDeclaration(1067) at 1", "Insert PrimitiveType: void(989) into MethodDeclaration(1067) at 2", "Insert SimpleName: addTo(990) into MethodDeclaration(1067) at 3", "Insert SingleVariableDeclaration(994) into MethodDeclaration(1067) at 4", "Insert Block(1066) into MethodDeclaration(1067) at 5", "Move SimpleName: code(754) into MethodInvocation(768) at 0", "Update SimpleName: addLine(755) to add", "Move SimpleName: addLine(755) into MethodInvocation(768) at 1", "Update StringLiteral: \"%s = %s.copyOf(%s.%s);\"(756) to \"%s = \"", "Move StringLiteral: \"%s = %s.copyOf(%s.%s);\"(756) into MethodInvocation(768) at 2", "Move SimpleName: finalField(757) into MethodInvocation(768) at 3", "Insert SimpleName: code(770) into MethodInvocation(772) at 0", "Insert SimpleName: isGuavaAvailable(771) into MethodInvocation(772) at 1", "Insert ExpressionStatement(780) into Block(781) at 0", "Insert ExpressionStatement(786) into Block(787) at 0", "Insert SimpleName: code(789) into MethodInvocation(796) at 0", "Insert SimpleName: add(790) into MethodInvocation(796) at 1", "Insert StringLiteral: \"(%s.%s\"(791) into MethodInvocation(796) at 2", "Move SimpleName: builder(761) into MethodInvocation(796) at 3", "Move MethodInvocation(764) into MethodInvocation(796) at 4", "Insert MethodInvocation(800) into PrefixExpression: !(801) at 0", "Insert ExpressionStatement(807) into Block(808) at 0", "Insert SimpleName: code(810) into MethodInvocation(813) at 0", "Insert SimpleName: add(811) into MethodInvocation(813) at 1", "Insert StringLiteral: \");\\n\"(812) into MethodInvocation(813) at 2", "Insert SimpleName: ImmutableSet(970) into MethodInvocation(975) at 0", "Insert SimpleName: copyOf(971) into MethodInvocation(975) at 1", "Insert MethodInvocation(974) into MethodInvocation(975) at 2", "Insert SimpleName: Override(986) into MarkerAnnotation(987) at 0", "Insert SimpleType: SourceBuilder(992) into SingleVariableDeclaration(994) at 0", "Insert SimpleName: code(993) into SingleVariableDeclaration(994) at 1", "Insert IfStatement(1065) into Block(1066) at 0", "Insert MethodInvocation(779) into ExpressionStatement(780) at 0", "Insert MethodInvocation(785) into ExpressionStatement(786) at 0", "Insert SimpleName: code(798) into MethodInvocation(800) at 0", "Insert SimpleName: isGuavaAvailable(799) into MethodInvocation(800) at 1", "Insert MethodInvocation(806) into ExpressionStatement(807) at 0", "Insert SimpleName: StaticMethod(972) into MethodInvocation(974) at 0", "Insert SimpleName: values(973) into MethodInvocation(974) at 1", "Insert SimpleName: SourceBuilder(991) into SimpleType: SourceBuilder(992) at 0", "Insert PrefixExpression: !(998) into IfStatement(1065) at 0", "Insert Block(1064) into IfStatement(1065) at 1", "Insert SimpleName: code(773) into MethodInvocation(779) at 0", "Insert SimpleName: add(774) into MethodInvocation(779) at 1", "Insert StringLiteral: \"%s.copyOf\"(775) into MethodInvocation(779) at 2", "Move TypeLiteral(760) into MethodInvocation(779) at 3", "Insert SimpleName: code(782) into MethodInvocation(785) at 0", "Insert SimpleName: add(783) into MethodInvocation(785) at 1", "Insert StringLiteral: \"immutableList\"(784) into MethodInvocation(785) at 2", "Insert SimpleName: code(802) into MethodInvocation(806) at 0", "Insert SimpleName: add(803) into MethodInvocation(806) at 1", "Insert StringLiteral: \", %s.class\"(804) into MethodInvocation(806) at 2", "Insert SimpleName: elementType(805) into MethodInvocation(806) at 3", "Insert MethodInvocation(997) into PrefixExpression: !(998) at 0", "Insert ExpressionStatement(1063) into Block(1064) at 0", "Insert SimpleName: code(995) into MethodInvocation(997) at 0", "Insert SimpleName: isGuavaAvailable(996) into MethodInvocation(997) at 1", "Insert MethodInvocation(1062) into ExpressionStatement(1063) at 0", "Insert MethodInvocation(1059) into MethodInvocation(1062) at 0", "Insert SimpleName: addLine(1060) into MethodInvocation(1062) at 1", "Insert StringLiteral: \"}\"(1061) into MethodInvocation(1062) at 2", "Insert MethodInvocation(1056) into MethodInvocation(1059) at 0", "Insert SimpleName: addLine(1057) into MethodInvocation(1059) at 1", "Insert StringLiteral: \"  }\"(1058) into MethodInvocation(1059) at 2", "Insert MethodInvocation(1050) into MethodInvocation(1056) at 0", "Insert SimpleName: addLine(1051) into MethodInvocation(1056) at 1", "Insert StringLiteral: \"        (E[]) %s.newInstance(type, elements.size()))));\"(1052) into MethodInvocation(1056) at 2", "Insert TypeLiteral(1055) into MethodInvocation(1056) at 3", "Insert MethodInvocation(1041) into MethodInvocation(1050) at 0", "Insert SimpleName: addLine(1042) into MethodInvocation(1050) at 1", "Insert StringLiteral: \"    return %s.unmodifiableList(%s.asList(elements.toArray(\"(1043) into MethodInvocation(1050) at 2", "Insert TypeLiteral(1046) into MethodInvocation(1050) at 3", "Insert TypeLiteral(1049) into MethodInvocation(1050) at 4", "Insert SimpleType: Array(1054) into TypeLiteral(1055) at 0", "Insert MethodInvocation(1038) into MethodInvocation(1041) at 0", "Insert SimpleName: addLine(1039) into MethodInvocation(1041) at 1", "Insert StringLiteral: \"  default:\"(1040) into MethodInvocation(1041) at 2", "Insert SimpleType: Collections(1045) into TypeLiteral(1046) at 0", "Insert SimpleType: Arrays(1048) into TypeLiteral(1049) at 0", "Insert SimpleName: Array(1053) into SimpleType: Array(1054) at 0", "Insert MethodInvocation(1032) into MethodInvocation(1038) at 0", "Insert SimpleName: addLine(1033) into MethodInvocation(1038) at 1", "Insert StringLiteral: \"    return %s.singletonList(elements.get(0));\"(1034) into MethodInvocation(1038) at 2", "Insert TypeLiteral(1037) into MethodInvocation(1038) at 3", "Insert SimpleName: Collections(1044) into SimpleType: Collections(1045) at 0", "Insert SimpleName: Arrays(1047) into SimpleType: Arrays(1048) at 0", "Insert MethodInvocation(1029) into MethodInvocation(1032) at 0", "Insert SimpleName: addLine(1030) into MethodInvocation(1032) at 1", "Insert StringLiteral: \"  case 1:\"(1031) into MethodInvocation(1032) at 2", "Insert SimpleType: Collections(1036) into TypeLiteral(1037) at 0", "Insert MethodInvocation(1023) into MethodInvocation(1029) at 0", "Insert SimpleName: addLine(1024) into MethodInvocation(1029) at 1", "Insert StringLiteral: \"    return %s.emptyList();\"(1025) into MethodInvocation(1029) at 2", "Insert TypeLiteral(1028) into MethodInvocation(1029) at 3", "Insert SimpleName: Collections(1035) into SimpleType: Collections(1036) at 0", "Insert MethodInvocation(1020) into MethodInvocation(1023) at 0", "Insert SimpleName: addLine(1021) into MethodInvocation(1023) at 1", "Insert StringLiteral: \"  case 0:\"(1022) into MethodInvocation(1023) at 2", "Insert SimpleType: Collections(1027) into TypeLiteral(1028) at 0", "Insert MethodInvocation(1017) into MethodInvocation(1020) at 0", "Insert SimpleName: addLine(1018) into MethodInvocation(1020) at 1", "Insert StringLiteral: \"  switch (elements.size()) {\"(1019) into MethodInvocation(1020) at 2", "Insert SimpleName: Collections(1026) into SimpleType: Collections(1027) at 0", "Insert MethodInvocation(1008) into MethodInvocation(1017) at 0", "Insert SimpleName: addLine(1009) into MethodInvocation(1017) at 1", "Insert StringLiteral: \"private static <E> %1$s<E> immutableList(%1$s<E> elements, %2$s<E> type) {\"(1010) into MethodInvocation(1017) at 2", "Insert TypeLiteral(1013) into MethodInvocation(1017) at 3", "Insert TypeLiteral(1016) into MethodInvocation(1017) at 4", "Insert MethodInvocation(1002) into MethodInvocation(1008) at 0", "Insert SimpleName: addLine(1003) into MethodInvocation(1008) at 1", "Insert StringLiteral: \"@%s(\\\"unchecked\\\")\"(1004) into MethodInvocation(1008) at 2", "Insert TypeLiteral(1007) into MethodInvocation(1008) at 3", "Insert SimpleType: List(1012) into TypeLiteral(1013) at 0", "Insert SimpleType: Class(1015) into TypeLiteral(1016) at 0", "Insert SimpleName: code(999) into MethodInvocation(1002) at 0", "Insert SimpleName: addLine(1000) into MethodInvocation(1002) at 1", "Insert StringLiteral: \"\"(1001) into MethodInvocation(1002) at 2", "Insert SimpleType: SuppressWarnings(1006) into TypeLiteral(1007) at 0", "Insert SimpleName: List(1011) into SimpleType: List(1012) at 0", "Insert SimpleName: Class(1014) into SimpleType: Class(1015) at 0", "Insert SimpleName: SuppressWarnings(1005) into SimpleType: SuppressWarnings(1006) at 0", "Delete MethodInvocation(765)", "Delete ExpressionStatement(766)"]}}, {"MapPropertyFactory_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: com.google.common.collect.ImmutableSet to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 15", "operations": ["INS QualifiedName: java.util.Set to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 15"]}, {"root": "INS EnumDeclaration to TypeDeclaration: class at 12", "operations": ["INS StringLiteral: \"    %s<K, V> entry = entries.entrySet().iterator().next();\" to MethodInvocation at 2", "INS StringLiteral: \"  case 1:\" to MethodInvocation at 2", "INS MethodInvocation to PrefixExpression: ! at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"K, V\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: Map.Entry to SimpleType: Map.Entry at 0", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"}\" to MethodInvocation at 2", "INS SimpleName: Collections to SimpleType: Collections at 0", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleType: Collections to TypeLiteral at 0", "INS Block to MethodDeclaration at 5", "INS EnumConstantDeclaration to EnumDeclaration at 3", "INS Modifier: private to EnumDeclaration at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"  switch (entries.size()) {\" to MethodInvocation at 2", "INS SimpleType: LinkedHashMap to TypeLiteral at 0", "INS SimpleName: code to MethodInvocation at 0", "INS StringLiteral: \"\" to MethodInvocation at 2", "INS TypeLiteral to MethodInvocation at 3", "INS StringLiteral: \"  }\" to MethodInvocation at 2", "INS TypeLiteral to MethodInvocation at 3", "INS AnonymousClassDeclaration to EnumConstantDeclaration at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: Collections to SimpleType: Collections at 0", "INS SimpleName: isGuavaAvailable to MethodInvocation at 1", "INS SimpleType: Collections to TypeLiteral at 0", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleType: Collections to TypeLiteral at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleType: SourceBuilder to SingleVariableDeclaration at 0", "INS TypeLiteral to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS SimpleType: Map to TypeLiteral at 0", "INS SimpleType: Map.Entry to TypeLiteral at 0", "INS SimpleName: supportsDiamondOperator to MethodInvocation at 1", "INS SimpleName: addLine to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS TypeLiteral to MethodInvocation at 3", "INS SimpleName: addLine to MethodInvocation at 1", "INS StringLiteral: \"  case 0:\" to MethodInvocation at 2", "INS SimpleName: add to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS StringLiteral: \"    return %s.emptyMap();\" to MethodInvocation at 2", "INS SimpleName: add to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 3", "INS SimpleName: LinkedHashMap to SimpleType: LinkedHashMap at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS SimpleName: addTo to MethodDeclaration at 3", "INS StringLiteral: \"    return %s.unmodifiableMap(new %s<\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: code to SingleVariableDeclaration at 1", "INS PrefixExpression: ! to IfStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: add to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 4", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: StaticMethod to EnumDeclaration at 1", "INS SimpleName: Excerpt to SimpleType: Excerpt at 0", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \"private static <K, V> %1$s<K, V> immutableMap(%1$s<K, V> entries) {\" to MethodInvocation at 2", "INS IfStatement to Block at 1", "INS SimpleType: Excerpt to EnumDeclaration at 2", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: addLine to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS StringLiteral: \"    return %s.singletonMap(entry.getKey(), entry.getValue());\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 2", "INS SimpleName: IMMUTABLE_MAP to EnumConstantDeclaration at 0", "INS SimpleName: Collections to SimpleType: Collections at 0", "INS StringLiteral: \"  default:\" to MethodInvocation at 2", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: addLine to MethodInvocation at 1", "INS StringLiteral: \">(entries));\\n\" to MethodInvocation at 2", "INS PrefixExpression: ! to IfStatement at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: getSourceLevel to MethodInvocation at 1", "INS SimpleName: SourceBuilder to SimpleType: SourceBuilder at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: code to MethodInvocation at 0", "INS EnumDeclaration to TypeDeclaration: class at 12", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS SimpleName: values to MethodInvocation at 1", "INS ParameterizedType: Set<StaticMethod> to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS ReturnStatement to Block at 0", "INS SimpleName: copyOf to MethodInvocation at 1", "INS Block to MethodDeclaration at 4", "INS SimpleType: StaticMethod to ParameterizedType: Set<StaticMethod> at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: Set to ParameterizedType: Set<StaticMethod> at 0", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleName: StaticMethod to SimpleType: StaticMethod at 0", "INS SimpleName: StaticMethod to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: ImmutableSet to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: getStaticMethods to MethodDeclaration at 3", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: isGuavaAvailable to MethodInvocation at 1", "INS Block to IfStatement at 2", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: code to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \"immutableMap\" to MethodInvocation at 2", "INS SimpleName: add to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS StringLiteral: \"%s.copyOf\" to MethodInvocation at 2", "INS IfStatement to Block at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: add to MethodInvocation at 1", "INS StringLiteral: \"(%s.%s);\\n\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: finalField to MethodInvocation at 3", "MOV StringLiteral: \"%s = %s.copyOf(%s.%s);\" to MethodInvocation at 2", "MOV SimpleName: code to MethodInvocation at 0", "MOV SimpleName: builder to MethodInvocation at 3", "MOV TypeLiteral to MethodInvocation at 3", "MOV MethodInvocation to MethodInvocation at 4", "MOV SimpleName: addLine to MethodInvocation at 1"]}, {"root": "UPDATE from addLine to add", "operations": ["UPD SimpleName: addLine from addLine to add"]}, {"root": "UPDATE from \"%s = %s.copyOf(%s.%s);\" to \"%s = \"", "operations": ["UPD StringLiteral: \"%s = %s.copyOf(%s.%s);\" from \"%s = %s.copyOf(%s.%s);\" to \"%s = \""]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation"]}]}}, {"MapPropertyFactory_diff": {"operations": ["Insert ImportDeclaration(13) into CompilationUnit(1307) at 6", "Insert ImportDeclaration(31) into CompilationUnit(1307) at 15", "Insert QualifiedName: com.google.common.collect.ImmutableSet(12) into ImportDeclaration(13) at 0", "Insert QualifiedName: java.util.Set(30) into ImportDeclaration(31) at 0", "Insert EnumDeclaration(1305) into TypeDeclaration: class(1306) at 12", "Insert MethodDeclaration(1151) into TypeDeclaration: class(1152) at 18", "Insert Modifier: private(1207) into EnumDeclaration(1305) at 0", "Insert SimpleName: StaticMethod(1208) into EnumDeclaration(1305) at 1", "Insert SimpleType: Excerpt(1210) into EnumDeclaration(1305) at 2", "Insert EnumConstantDeclaration(1304) into EnumDeclaration(1305) at 3", "Insert MarkerAnnotation(1135) into MethodDeclaration(1151) at 0", "Insert Modifier: public(1136) into MethodDeclaration(1151) at 1", "Insert ParameterizedType: Set<StaticMethod>(1141) into MethodDeclaration(1151) at 2", "Insert SimpleName: getStaticMethods(1142) into MethodDeclaration(1151) at 3", "Insert Block(1150) into MethodDeclaration(1151) at 4", "Insert SimpleName: Excerpt(1209) into SimpleType: Excerpt(1210) at 0", "Insert SimpleName: IMMUTABLE_MAP(1211) into EnumConstantDeclaration(1304) at 0", "Insert AnonymousClassDeclaration(1303) into EnumConstantDeclaration(1304) at 1", "Insert ExpressionStatement(959) into Block(988) at 0", "Insert IfStatement(978) into Block(988) at 1", "Insert ExpressionStatement(987) into Block(988) at 2", "Insert SimpleName: Override(1134) into MarkerAnnotation(1135) at 0", "Insert SimpleType: Set(1138) into ParameterizedType: Set<StaticMethod>(1141) at 0", "Insert SimpleType: StaticMethod(1140) into ParameterizedType: Set<StaticMethod>(1141) at 1", "Insert ReturnStatement(1149) into Block(1150) at 0", "Insert MethodDeclaration(1302) into AnonymousClassDeclaration(1303) at 0", "Insert MethodInvocation(958) into ExpressionStatement(959) at 0", "Insert MethodInvocation(962) into IfStatement(978) at 0", "Insert Block(971) into IfStatement(978) at 1", "Insert Block(977) into IfStatement(978) at 2", "Insert MethodInvocation(986) into ExpressionStatement(987) at 0", "Insert SimpleName: Set(1137) into SimpleType: Set(1138) at 0", "Insert SimpleName: StaticMethod(1139) into SimpleType: StaticMethod(1140) at 0", "Insert MethodInvocation(1148) into ReturnStatement(1149) at 0", "Insert MarkerAnnotation(1213) into MethodDeclaration(1302) at 0", "Insert Modifier: public(1214) into MethodDeclaration(1302) at 1", "Insert PrimitiveType: void(1215) into MethodDeclaration(1302) at 2", "Insert SimpleName: addTo(1216) into MethodDeclaration(1302) at 3", "Insert SingleVariableDeclaration(1220) into MethodDeclaration(1302) at 4", "Insert Block(1301) into MethodDeclaration(1302) at 5", "Move SimpleName: code(950) into MethodInvocation(958) at 0", "Update SimpleName: addLine(951) to add", "Move SimpleName: addLine(951) into MethodInvocation(958) at 1", "Update StringLiteral: \"%s = %s.copyOf(%s.%s);\"(952) to \"%s = \"", "Move StringLiteral: \"%s = %s.copyOf(%s.%s);\"(952) into MethodInvocation(958) at 2", "Move SimpleName: finalField(953) into MethodInvocation(958) at 3", "Insert SimpleName: code(960) into MethodInvocation(962) at 0", "Insert SimpleName: isGuavaAvailable(961) into MethodInvocation(962) at 1", "Insert ExpressionStatement(970) into Block(971) at 0", "Insert ExpressionStatement(976) into Block(977) at 0", "Insert SimpleName: code(979) into MethodInvocation(986) at 0", "Insert SimpleName: add(980) into MethodInvocation(986) at 1", "Insert StringLiteral: \"(%s.%s);\\n\"(981) into MethodInvocation(986) at 2", "Move SimpleName: builder(957) into MethodInvocation(986) at 3", "Move MethodInvocation(960) into MethodInvocation(986) at 4", "Insert SimpleName: ImmutableSet(1143) into MethodInvocation(1148) at 0", "Insert SimpleName: copyOf(1144) into MethodInvocation(1148) at 1", "Insert MethodInvocation(1147) into MethodInvocation(1148) at 2", "Insert SimpleName: Override(1212) into MarkerAnnotation(1213) at 0", "Insert SimpleType: SourceBuilder(1218) into SingleVariableDeclaration(1220) at 0", "Insert SimpleName: code(1219) into SingleVariableDeclaration(1220) at 1", "Insert IfStatement(1300) into Block(1301) at 0", "Insert MethodInvocation(969) into ExpressionStatement(970) at 0", "Insert MethodInvocation(975) into ExpressionStatement(976) at 0", "Insert SimpleName: StaticMethod(1145) into MethodInvocation(1147) at 0", "Insert SimpleName: values(1146) into MethodInvocation(1147) at 1", "Insert SimpleName: SourceBuilder(1217) into SimpleType: SourceBuilder(1218) at 0", "Insert PrefixExpression: !(1224) into IfStatement(1300) at 0", "Insert Block(1299) into IfStatement(1300) at 1", "Insert SimpleName: code(963) into MethodInvocation(969) at 0", "Insert SimpleName: add(964) into MethodInvocation(969) at 1", "Insert StringLiteral: \"%s.copyOf\"(965) into MethodInvocation(969) at 2", "Move TypeLiteral(956) into MethodInvocation(969) at 3", "Insert SimpleName: code(972) into MethodInvocation(975) at 0", "Insert SimpleName: add(973) into MethodInvocation(975) at 1", "Insert StringLiteral: \"immutableMap\"(974) into MethodInvocation(975) at 2", "Insert MethodInvocation(1223) into PrefixExpression: !(1224) at 0", "Insert ExpressionStatement(1274) into Block(1299) at 0", "Insert IfStatement(1287) into Block(1299) at 1", "Insert ExpressionStatement(1298) into Block(1299) at 2", "Insert SimpleName: code(1221) into MethodInvocation(1223) at 0", "Insert SimpleName: isGuavaAvailable(1222) into MethodInvocation(1223) at 1", "Insert MethodInvocation(1273) into ExpressionStatement(1274) at 0", "Insert PrefixExpression: !(1280) into IfStatement(1287) at 0", "Insert Block(1286) into IfStatement(1287) at 1", "Insert MethodInvocation(1297) into ExpressionStatement(1298) at 0", "Insert MethodInvocation(1264) into MethodInvocation(1273) at 0", "Insert SimpleName: add(1265) into MethodInvocation(1273) at 1", "Insert StringLiteral: \"    return %s.unmodifiableMap(new %s<\"(1266) into MethodInvocation(1273) at 2", "Insert TypeLiteral(1269) into MethodInvocation(1273) at 3", "Insert TypeLiteral(1272) into MethodInvocation(1273) at 4", "Insert MethodInvocation(1279) into PrefixExpression: !(1280) at 0", "Insert ExpressionStatement(1285) into Block(1286) at 0", "Insert MethodInvocation(1294) into MethodInvocation(1297) at 0", "Insert SimpleName: addLine(1295) into MethodInvocation(1297) at 1", "Insert StringLiteral: \"}\"(1296) into MethodInvocation(1297) at 2", "Insert MethodInvocation(1261) into MethodInvocation(1264) at 0", "Insert SimpleName: addLine(1262) into MethodInvocation(1264) at 1", "Insert StringLiteral: \"  default:\"(1263) into MethodInvocation(1264) at 2", "Insert SimpleType: Collections(1268) into TypeLiteral(1269) at 0", "Insert SimpleType: LinkedHashMap(1271) into TypeLiteral(1272) at 0", "Insert MethodInvocation(1277) into MethodInvocation(1279) at 0", "Insert SimpleName: supportsDiamondOperator(1278) into MethodInvocation(1279) at 1", "Insert MethodInvocation(1284) into ExpressionStatement(1285) at 0", "Insert MethodInvocation(1291) into MethodInvocation(1294) at 0", "Insert SimpleName: addLine(1292) into MethodInvocation(1294) at 1", "Insert StringLiteral: \"  }\"(1293) into MethodInvocation(1294) at 2", "Insert MethodInvocation(1255) into MethodInvocation(1261) at 0", "Insert SimpleName: addLine(1256) into MethodInvocation(1261) at 1", "Insert StringLiteral: \"    return %s.singletonMap(entry.getKey(), entry.getValue());\"(1257) into MethodInvocation(1261) at 2", "Insert TypeLiteral(1260) into MethodInvocation(1261) at 3", "Insert SimpleName: Collections(1267) into SimpleType: Collections(1268) at 0", "Insert SimpleName: LinkedHashMap(1270) into SimpleType: LinkedHashMap(1271) at 0", "Insert SimpleName: code(1275) into MethodInvocation(1277) at 0", "Insert SimpleName: getSourceLevel(1276) into MethodInvocation(1277) at 1", "Insert SimpleName: code(1281) into MethodInvocation(1284) at 0", "Insert SimpleName: add(1282) into MethodInvocation(1284) at 1", "Insert StringLiteral: \"K, V\"(1283) into MethodInvocation(1284) at 2", "Insert SimpleName: code(1288) into MethodInvocation(1291) at 0", "Insert SimpleName: add(1289) into MethodInvocation(1291) at 1", "Insert StringLiteral: \">(entries));\\n\"(1290) into MethodInvocation(1291) at 2", "Insert MethodInvocation(1249) into MethodInvocation(1255) at 0", "Insert SimpleName: addLine(1250) into MethodInvocation(1255) at 1", "Insert StringLiteral: \"    %s<K, V> entry = entries.entrySet().iterator().next();\"(1251) into MethodInvocation(1255) at 2", "Insert TypeLiteral(1254) into MethodInvocation(1255) at 3", "Insert SimpleType: Collections(1259) into TypeLiteral(1260) at 0", "Insert MethodInvocation(1246) into MethodInvocation(1249) at 0", "Insert SimpleName: addLine(1247) into MethodInvocation(1249) at 1", "Insert StringLiteral: \"  case 1:\"(1248) into MethodInvocation(1249) at 2", "Insert SimpleType: Map.Entry(1253) into TypeLiteral(1254) at 0", "Insert SimpleName: Collections(1258) into SimpleType: Collections(1259) at 0", "Insert MethodInvocation(1240) into MethodInvocation(1246) at 0", "Insert SimpleName: addLine(1241) into MethodInvocation(1246) at 1", "Insert StringLiteral: \"    return %s.emptyMap();\"(1242) into MethodInvocation(1246) at 2", "Insert TypeLiteral(1245) into MethodInvocation(1246) at 3", "Insert QualifiedName: Map.Entry(1252) into SimpleType: Map.Entry(1253) at 0", "Insert MethodInvocation(1237) into MethodInvocation(1240) at 0", "Insert SimpleName: addLine(1238) into MethodInvocation(1240) at 1", "Insert StringLiteral: \"  case 0:\"(1239) into MethodInvocation(1240) at 2", "Insert SimpleType: Collections(1244) into TypeLiteral(1245) at 0", "Insert MethodInvocation(1234) into MethodInvocation(1237) at 0", "Insert SimpleName: addLine(1235) into MethodInvocation(1237) at 1", "Insert StringLiteral: \"  switch (entries.size()) {\"(1236) into MethodInvocation(1237) at 2", "Insert SimpleName: Collections(1243) into SimpleType: Collections(1244) at 0", "Insert MethodInvocation(1228) into MethodInvocation(1234) at 0", "Insert SimpleName: addLine(1229) into MethodInvocation(1234) at 1", "Insert StringLiteral: \"private static <K, V> %1$s<K, V> immutableMap(%1$s<K, V> entries) {\"(1230) into MethodInvocation(1234) at 2", "Insert TypeLiteral(1233) into MethodInvocation(1234) at 3", "Insert SimpleName: code(1225) into MethodInvocation(1228) at 0", "Insert SimpleName: addLine(1226) into MethodInvocation(1228) at 1", "Insert StringLiteral: \"\"(1227) into MethodInvocation(1228) at 2", "Insert SimpleType: Map(1232) into TypeLiteral(1233) at 0", "Insert SimpleName: Map(1231) into SimpleType: Map(1232) at 0", "Delete MethodInvocation(961)", "Delete ExpressionStatement(962)"]}}, {"Processor_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS ImportDeclaration to CompilationUnit at 14", "INS QualifiedName: org.inferred.freebuilder.processor.util.Shading to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 18", "operations": ["INS QualifiedName: com.google.common.collect.ImmutableList to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 18"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS SimpleName: element to InfixExpression: != at 0", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: element to VariableDeclarationFragment at 0", "INS TypeLiteral to MethodInvocation at 0", "INS SimpleName: getTypeElement to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: unshadedName to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS MethodInvocation to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: getElementUtils to MethodInvocation at 1", "INS ReturnStatement to Block at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: TypeElement to SimpleType: TypeElement at 0", "INS Modifier: private to MethodDeclaration at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: isGuavaAvailable to MethodDeclaration at 2", "INS ParenthesizedExpression to ReturnStatement at 0", "INS SimpleName: name to VariableDeclarationFragment at 0", "INS InfixExpression: != to ParenthesizedExpression at 0", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: processingEnv to MethodInvocation at 0", "INS Block to MethodDeclaration at 3", "INS SimpleName: name to MethodInvocation at 2", "INS SimpleType: TypeElement to VariableDeclarationStatement at 0", "INS SimpleName: Shading to MethodInvocation at 0", "INS SimpleType: ImmutableList to TypeLiteral at 0", "INS SimpleName: ImmutableList to SimpleType: ImmutableList at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 4", "operations": ["INS SimpleName: isGuavaAvailable to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 4"]}]}}, {"Processor_diff": {"operations": ["Insert ImportDeclaration(29) into CompilationUnit(332) at 14", "Insert ImportDeclaration(37) into CompilationUnit(332) at 18", "Insert QualifiedName: org.inferred.freebuilder.processor.util.Shading(28) into ImportDeclaration(29) at 0", "Insert QualifiedName: com.google.common.collect.ImmutableList(36) into ImportDeclaration(37) at 0", "Insert MethodDeclaration(330) into TypeDeclaration: class(331) at 11", "Insert Modifier: private(297) into MethodDeclaration(330) at 0", "Insert PrimitiveType: boolean(298) into MethodDeclaration(330) at 1", "Insert SimpleName: isGuavaAvailable(299) into MethodDeclaration(330) at 2", "Insert Block(329) into MethodDeclaration(330) at 3", "Insert VariableDeclarationStatement(312) into Block(329) at 0", "Insert VariableDeclarationStatement(323) into Block(329) at 1", "Insert ReturnStatement(328) into Block(329) at 2", "Insert SimpleType: String(301) into VariableDeclarationStatement(312) at 0", "Insert VariableDeclarationFragment(311) into VariableDeclarationStatement(312) at 1", "Insert SimpleType: TypeElement(314) into VariableDeclarationStatement(323) at 0", "Insert VariableDeclarationFragment(322) into VariableDeclarationStatement(323) at 1", "Insert ParenthesizedExpression(327) into ReturnStatement(328) at 0", "Insert SimpleName: String(300) into SimpleType: String(301) at 0", "Insert SimpleName: name(302) into VariableDeclarationFragment(311) at 0", "Insert MethodInvocation(310) into VariableDeclarationFragment(311) at 1", "Insert SimpleName: TypeElement(313) into SimpleType: TypeElement(314) at 0", "Insert SimpleName: element(315) into VariableDeclarationFragment(322) at 0", "Insert MethodInvocation(321) into VariableDeclarationFragment(322) at 1", "Insert InfixExpression: !=(326) into ParenthesizedExpression(327) at 0", "Insert SimpleName: Shading(303) into MethodInvocation(310) at 0", "Insert SimpleName: unshadedName(304) into MethodInvocation(310) at 1", "Insert MethodInvocation(309) into MethodInvocation(310) at 2", "Insert MethodInvocation(318) into MethodInvocation(321) at 0", "Insert SimpleName: getTypeElement(319) into MethodInvocation(321) at 1", "Insert SimpleName: name(320) into MethodInvocation(321) at 2", "Insert SimpleName: element(324) into InfixExpression: !=(326) at 0", "Insert NullLiteral(325) into InfixExpression: !=(326) at 1", "Insert TypeLiteral(307) into MethodInvocation(309) at 0", "Insert SimpleName: getName(308) into MethodInvocation(309) at 1", "Insert SimpleName: processingEnv(316) into MethodInvocation(318) at 0", "Insert SimpleName: getElementUtils(317) into MethodInvocation(318) at 1", "Insert SimpleType: ImmutableList(306) into TypeLiteral(307) at 0", "Insert SimpleName: ImmutableList(305) into SimpleType: ImmutableList(306) at 0", "Insert MethodInvocation(206) into ClassInstanceCreation(216) at 4", "Insert SimpleName: isGuavaAvailable(205) into MethodInvocation(206) at 0"]}}, {"PropertyCodeGenerator_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 1", "MOV ImportDeclaration to CompilationUnit at 2", "MOV ImportDeclaration to CompilationUnit at 2", "MOV ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: com.google.common.collect.ImmutableSet to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS QualifiedName: org.inferred.freebuilder.processor.util.Excerpt to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 22", "operations": ["INS Block to MethodDeclaration at 4", "INS SimpleName: of to MethodInvocation at 1", "INS ReturnStatement to Block at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleType: Set to ParameterizedType: Set<? extends Excerpt> at 0", "INS SimpleType: Excerpt to WildcardType: ? extends Excerpt at 0", "INS TextElement: Returns excerpts for any static methods added by this generator.  to TagElement at 0", "INS SimpleName: ImmutableSet to MethodInvocation at 0", "INS SimpleName: Excerpt to SimpleType: Excerpt at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: getStaticMethods to MethodDeclaration at 3", "INS TagElement to Javadoc at 0", "INS WildcardType: ? extends Excerpt to ParameterizedType: Set<? extends Excerpt> at 1", "INS SimpleName: Set to SimpleType: Set at 0", "INS MethodDeclaration to TypeDeclaration: class at 22", "INS ParameterizedType: Set<? extends Excerpt> to MethodDeclaration at 2", "INS MethodInvocation to ReturnStatement at 0"]}]}}, {"PropertyCodeGenerator_diff": {"operations": ["Move ImportDeclaration(11) into CompilationUnit(450) at 1", "Move ImportDeclaration(13) into CompilationUnit(450) at 2", "Move ImportDeclaration(15) into CompilationUnit(450) at 1", "Move ImportDeclaration(17) into CompilationUnit(450) at 2", "Insert ImportDeclaration(7) into CompilationUnit(450) at 3", "Insert ImportDeclaration(11) into CompilationUnit(450) at 5", "Insert QualifiedName: com.google.common.collect.ImmutableSet(6) into ImportDeclaration(7) at 0", "Insert QualifiedName: org.inferred.freebuilder.processor.util.Excerpt(10) into ImportDeclaration(11) at 0", "Insert MethodDeclaration(391) into TypeDeclaration: class(449) at 22", "Insert Javadoc(377) into MethodDeclaration(391) at 0", "Insert Modifier: public(378) into MethodDeclaration(391) at 1", "Insert ParameterizedType: Set<? extends Excerpt>(384) into MethodDeclaration(391) at 2", "Insert SimpleName: getStaticMethods(385) into MethodDeclaration(391) at 3", "Insert Block(390) into MethodDeclaration(391) at 4", "Insert TagElement(376) into Javadoc(377) at 0", "Insert SimpleType: Set(380) into ParameterizedType: Set<? extends Excerpt>(384) at 0", "Insert WildcardType: ? extends Excerpt(383) into ParameterizedType: Set<? extends Excerpt>(384) at 1", "Insert ReturnStatement(389) into Block(390) at 0", "Insert TextElement: Returns excerpts for any static methods added by this generator. (375) into TagElement(376) at 0", "Insert SimpleName: Set(379) into SimpleType: Set(380) at 0", "Insert SimpleType: Excerpt(382) into WildcardType: ? extends Excerpt(383) at 0", "Insert MethodInvocation(388) into ReturnStatement(389) at 0", "Insert SimpleName: Excerpt(381) into SimpleType: Excerpt(382) at 0", "Insert SimpleName: ImmutableSet(386) into MethodInvocation(388) at 0", "Insert SimpleName: of(387) into MethodInvocation(388) at 1"]}}, {"SetPropertyFactory_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS ImportDeclaration to CompilationUnit at 10", "INS QualifiedName: org.inferred.freebuilder.processor.util.Excerpt to ImportDeclaration at 0"]}, {"root": "INS EnumDeclaration to TypeDeclaration: class at 10", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS StringLiteral: \"  default:\" to MethodInvocation at 2", "INS SimpleType: LinkedHashSet to TypeLiteral at 0", "INS SimpleName: Collections to SimpleType: Collections at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: Set to TypeLiteral at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS Block to MethodDeclaration at 5", "INS StringLiteral: \"    return %s.emptySet();\" to MethodInvocation at 2", "INS SimpleType: Class to TypeLiteral at 0", "INS MethodInvocation to MethodInvocation at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: Collections to TypeLiteral at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: code to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: addTo to MethodDeclaration at 3", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: StaticMethod to EnumDeclaration at 1", "INS SimpleName: add to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 4", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: code to MethodInvocation at 0", "INS IfStatement to Block at 1", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS EnumDeclaration to TypeDeclaration: class at 10", "INS TypeLiteral to MethodInvocation at 3", "INS TypeLiteral to MethodInvocation at 4", "INS SimpleType: SourceBuilder to SingleVariableDeclaration at 0", "INS SimpleType: Excerpt to EnumDeclaration at 2", "INS TypeLiteral to MethodInvocation at 3", "INS TypeLiteral to MethodInvocation at 3", "INS PrefixExpression: ! to IfStatement at 0", "INS StringLiteral: \">(elements));\\n\" to MethodInvocation at 2", "INS StringLiteral: \"private static <E> %1$s<E> immutableSet(%1$s<E> elements) {\" to MethodInvocation at 2", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleType: Collections to TypeLiteral at 0", "INS StringLiteral: \"E\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: supportsDiamondOperator to MethodInvocation at 1", "INS StringLiteral: \"}\" to MethodInvocation at 2", "INS SimpleName: Collections to SimpleType: Collections at 0", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \"    return %s.unmodifiableSet(new %s<\" to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: add to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS StringLiteral: \"  case 1:\" to MethodInvocation at 2", "INS SimpleName: Excerpt to SimpleType: Excerpt at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: IMMUTABLE_SET to EnumConstantDeclaration at 0", "INS IfStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS AnonymousClassDeclaration to EnumConstantDeclaration at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: getSourceLevel to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 3", "INS StringLiteral: \"\" to MethodInvocation at 2", "INS StringLiteral: \"  }\" to MethodInvocation at 2", "INS StringLiteral: \"    return %s.singleton(elements.iterator().next());\" to MethodInvocation at 2", "INS SimpleName: add to MethodInvocation at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: isGuavaAvailable to MethodInvocation at 1", "INS EnumConstantDeclaration to EnumDeclaration at 3", "INS StringLiteral: \"  switch (elements.size()) {\" to MethodInvocation at 2", "INS SimpleName: Collections to SimpleType: Collections at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: SourceBuilder to SimpleType: SourceBuilder at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: addLine to MethodInvocation at 1", "INS SimpleType: Collections to TypeLiteral at 0", "INS SimpleName: code to MethodInvocation at 0", "INS Modifier: private to EnumDeclaration at 0", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"  case 0:\" to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS SimpleName: LinkedHashSet to SimpleType: LinkedHashSet at 0", "INS SimpleName: Set to SimpleType: Set at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS SimpleType: Set to ParameterizedType: Set<StaticMethod> at 0", "INS SimpleName: values to MethodInvocation at 1", "INS SimpleName: StaticMethod to SimpleType: StaticMethod at 0", "INS SimpleName: StaticMethod to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Block to MethodDeclaration at 4", "INS ParameterizedType: Set<StaticMethod> to MethodDeclaration at 2", "INS SimpleName: copyOf to MethodInvocation at 1", "INS SimpleType: StaticMethod to ParameterizedType: Set<StaticMethod> at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: ImmutableSet to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: Set to SimpleType: Set at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: getStaticMethods to MethodDeclaration at 3"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 2", "INS SimpleName: code to MethodInvocation at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: isGuavaAvailable to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: code to MethodInvocation at 0", "INS StringLiteral: \"immutableSet\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: code to MethodInvocation at 0", "INS IfStatement to Block at 1", "INS StringLiteral: \"%s.copyOf\" to MethodInvocation at 2", "INS Block to IfStatement at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: code to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: add to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS StringLiteral: \"(%s.%s);\\n\" to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: addLine to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 4", "MOV TypeLiteral to MethodInvocation at 3", "MOV SimpleName: finalField to MethodInvocation at 3", "MOV SimpleName: code to MethodInvocation at 0", "MOV StringLiteral: \"%s = %s.copyOf(%s.%s);\" to MethodInvocation at 2", "MOV SimpleName: builder to MethodInvocation at 3"]}, {"root": "UPDATE from addLine to add", "operations": ["UPD SimpleName: addLine from addLine to add"]}, {"root": "UPDATE from \"%s = %s.copyOf(%s.%s);\" to \"%s = \"", "operations": ["UPD StringLiteral: \"%s = %s.copyOf(%s.%s);\" from \"%s = %s.copyOf(%s.%s);\" to \"%s = \""]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation"]}]}}, {"SetPropertyFactory_diff": {"operations": ["Insert ImportDeclaration(21) into CompilationUnit(1036) at 10", "Insert QualifiedName: org.inferred.freebuilder.processor.util.Excerpt(20) into ImportDeclaration(21) at 0", "Insert EnumDeclaration(1034) into TypeDeclaration: class(1035) at 10", "Insert MethodDeclaration(937) into TypeDeclaration: class(938) at 16", "Insert Modifier: private(939) into EnumDeclaration(1034) at 0", "Insert SimpleName: StaticMethod(940) into EnumDeclaration(1034) at 1", "Insert SimpleType: Excerpt(942) into EnumDeclaration(1034) at 2", "Insert EnumConstantDeclaration(1033) into EnumDeclaration(1034) at 3", "Insert MarkerAnnotation(921) into MethodDeclaration(937) at 0", "Insert Modifier: public(922) into MethodDeclaration(937) at 1", "Insert ParameterizedType: Set<StaticMethod>(927) into MethodDeclaration(937) at 2", "Insert SimpleName: getStaticMethods(928) into MethodDeclaration(937) at 3", "Insert Block(936) into MethodDeclaration(937) at 4", "Insert SimpleName: Excerpt(941) into SimpleType: Excerpt(942) at 0", "Insert SimpleName: IMMUTABLE_SET(943) into EnumConstantDeclaration(1033) at 0", "Insert AnonymousClassDeclaration(1032) into EnumConstantDeclaration(1033) at 1", "Insert ExpressionStatement(745) into Block(774) at 0", "Insert IfStatement(764) into Block(774) at 1", "Insert ExpressionStatement(773) into Block(774) at 2", "Insert SimpleName: Override(920) into MarkerAnnotation(921) at 0", "Insert SimpleType: Set(924) into ParameterizedType: Set<StaticMethod>(927) at 0", "Insert SimpleType: StaticMethod(926) into ParameterizedType: Set<StaticMethod>(927) at 1", "Insert ReturnStatement(935) into Block(936) at 0", "Insert MethodDeclaration(1031) into AnonymousClassDeclaration(1032) at 0", "Insert MethodInvocation(744) into ExpressionStatement(745) at 0", "Insert MethodInvocation(748) into IfStatement(764) at 0", "Insert Block(757) into IfStatement(764) at 1", "Insert Block(763) into IfStatement(764) at 2", "Insert MethodInvocation(772) into ExpressionStatement(773) at 0", "Insert SimpleName: Set(923) into SimpleType: Set(924) at 0", "Insert SimpleName: StaticMethod(925) into SimpleType: StaticMethod(926) at 0", "Insert MethodInvocation(934) into ReturnStatement(935) at 0", "Insert MarkerAnnotation(945) into MethodDeclaration(1031) at 0", "Insert Modifier: public(946) into MethodDeclaration(1031) at 1", "Insert PrimitiveType: void(947) into MethodDeclaration(1031) at 2", "Insert SimpleName: addTo(948) into MethodDeclaration(1031) at 3", "Insert SingleVariableDeclaration(952) into MethodDeclaration(1031) at 4", "Insert Block(1030) into MethodDeclaration(1031) at 5", "Move SimpleName: code(738) into MethodInvocation(744) at 0", "Update SimpleName: addLine(739) to add", "Move SimpleName: addLine(739) into MethodInvocation(744) at 1", "Update StringLiteral: \"%s = %s.copyOf(%s.%s);\"(740) to \"%s = \"", "Move StringLiteral: \"%s = %s.copyOf(%s.%s);\"(740) into MethodInvocation(744) at 2", "Move SimpleName: finalField(741) into MethodInvocation(744) at 3", "Insert SimpleName: code(746) into MethodInvocation(748) at 0", "Insert SimpleName: isGuavaAvailable(747) into MethodInvocation(748) at 1", "Insert ExpressionStatement(756) into Block(757) at 0", "Insert ExpressionStatement(762) into Block(763) at 0", "Insert SimpleName: code(765) into MethodInvocation(772) at 0", "Insert SimpleName: add(766) into MethodInvocation(772) at 1", "Insert StringLiteral: \"(%s.%s);\\n\"(767) into MethodInvocation(772) at 2", "Move SimpleName: builder(745) into MethodInvocation(772) at 3", "Move MethodInvocation(748) into MethodInvocation(772) at 4", "Insert SimpleName: ImmutableSet(929) into MethodInvocation(934) at 0", "Insert SimpleName: copyOf(930) into MethodInvocation(934) at 1", "Insert MethodInvocation(933) into MethodInvocation(934) at 2", "Insert SimpleName: Override(944) into MarkerAnnotation(945) at 0", "Insert SimpleType: SourceBuilder(950) into SingleVariableDeclaration(952) at 0", "Insert SimpleName: code(951) into SingleVariableDeclaration(952) at 1", "Insert IfStatement(1029) into Block(1030) at 0", "Insert MethodInvocation(755) into ExpressionStatement(756) at 0", "Insert MethodInvocation(761) into ExpressionStatement(762) at 0", "Insert SimpleName: StaticMethod(931) into MethodInvocation(933) at 0", "Insert SimpleName: values(932) into MethodInvocation(933) at 1", "Insert SimpleName: SourceBuilder(949) into SimpleType: SourceBuilder(950) at 0", "Insert PrefixExpression: !(956) into IfStatement(1029) at 0", "Insert Block(1028) into IfStatement(1029) at 1", "Insert SimpleName: code(749) into MethodInvocation(755) at 0", "Insert SimpleName: add(750) into MethodInvocation(755) at 1", "Insert StringLiteral: \"%s.copyOf\"(751) into MethodInvocation(755) at 2", "Move TypeLiteral(744) into MethodInvocation(755) at 3", "Insert SimpleName: code(758) into MethodInvocation(761) at 0", "Insert SimpleName: add(759) into MethodInvocation(761) at 1", "Insert StringLiteral: \"immutableSet\"(760) into MethodInvocation(761) at 2", "Insert MethodInvocation(955) into PrefixExpression: !(956) at 0", "Insert ExpressionStatement(1003) into Block(1028) at 0", "Insert IfStatement(1016) into Block(1028) at 1", "Insert ExpressionStatement(1027) into Block(1028) at 2", "Insert SimpleName: code(953) into MethodInvocation(955) at 0", "Insert SimpleName: isGuavaAvailable(954) into MethodInvocation(955) at 1", "Insert MethodInvocation(1002) into ExpressionStatement(1003) at 0", "Insert PrefixExpression: !(1009) into IfStatement(1016) at 0", "Insert Block(1015) into IfStatement(1016) at 1", "Insert MethodInvocation(1026) into ExpressionStatement(1027) at 0", "Insert MethodInvocation(993) into MethodInvocation(1002) at 0", "Insert SimpleName: add(994) into MethodInvocation(1002) at 1", "Insert StringLiteral: \"    return %s.unmodifiableSet(new %s<\"(995) into MethodInvocation(1002) at 2", "Insert TypeLiteral(998) into MethodInvocation(1002) at 3", "Insert TypeLiteral(1001) into MethodInvocation(1002) at 4", "Insert MethodInvocation(1008) into PrefixExpression: !(1009) at 0", "Insert ExpressionStatement(1014) into Block(1015) at 0", "Insert MethodInvocation(1023) into MethodInvocation(1026) at 0", "Insert SimpleName: addLine(1024) into MethodInvocation(1026) at 1", "Insert StringLiteral: \"}\"(1025) into MethodInvocation(1026) at 2", "Insert MethodInvocation(990) into MethodInvocation(993) at 0", "Insert SimpleName: addLine(991) into MethodInvocation(993) at 1", "Insert StringLiteral: \"  default:\"(992) into MethodInvocation(993) at 2", "Insert SimpleType: Collections(997) into TypeLiteral(998) at 0", "Insert SimpleType: LinkedHashSet(1000) into TypeLiteral(1001) at 0", "Insert MethodInvocation(1006) into MethodInvocation(1008) at 0", "Insert SimpleName: supportsDiamondOperator(1007) into MethodInvocation(1008) at 1", "Insert MethodInvocation(1013) into ExpressionStatement(1014) at 0", "Insert MethodInvocation(1020) into MethodInvocation(1023) at 0", "Insert SimpleName: addLine(1021) into MethodInvocation(1023) at 1", "Insert StringLiteral: \"  }\"(1022) into MethodInvocation(1023) at 2", "Insert MethodInvocation(984) into MethodInvocation(990) at 0", "Insert SimpleName: addLine(985) into MethodInvocation(990) at 1", "Insert StringLiteral: \"    return %s.singleton(elements.iterator().next());\"(986) into MethodInvocation(990) at 2", "Insert TypeLiteral(989) into MethodInvocation(990) at 3", "Insert SimpleName: Collections(996) into SimpleType: Collections(997) at 0", "Insert SimpleName: LinkedHashSet(999) into SimpleType: LinkedHashSet(1000) at 0", "Insert SimpleName: code(1004) into MethodInvocation(1006) at 0", "Insert SimpleName: getSourceLevel(1005) into MethodInvocation(1006) at 1", "Insert SimpleName: code(1010) into MethodInvocation(1013) at 0", "Insert SimpleName: add(1011) into MethodInvocation(1013) at 1", "Insert StringLiteral: \"E\"(1012) into MethodInvocation(1013) at 2", "Insert SimpleName: code(1017) into MethodInvocation(1020) at 0", "Insert SimpleName: add(1018) into MethodInvocation(1020) at 1", "Insert StringLiteral: \">(elements));\\n\"(1019) into MethodInvocation(1020) at 2", "Insert MethodInvocation(981) into MethodInvocation(984) at 0", "Insert SimpleName: addLine(982) into MethodInvocation(984) at 1", "Insert StringLiteral: \"  case 1:\"(983) into MethodInvocation(984) at 2", "Insert SimpleType: Collections(988) into TypeLiteral(989) at 0", "Insert MethodInvocation(975) into MethodInvocation(981) at 0", "Insert SimpleName: addLine(976) into MethodInvocation(981) at 1", "Insert StringLiteral: \"    return %s.emptySet();\"(977) into MethodInvocation(981) at 2", "Insert TypeLiteral(980) into MethodInvocation(981) at 3", "Insert SimpleName: Collections(987) into SimpleType: Collections(988) at 0", "Insert MethodInvocation(972) into MethodInvocation(975) at 0", "Insert SimpleName: addLine(973) into MethodInvocation(975) at 1", "Insert StringLiteral: \"  case 0:\"(974) into MethodInvocation(975) at 2", "Insert SimpleType: Collections(979) into TypeLiteral(980) at 0", "Insert MethodInvocation(969) into MethodInvocation(972) at 0", "Insert SimpleName: addLine(970) into MethodInvocation(972) at 1", "Insert StringLiteral: \"  switch (elements.size()) {\"(971) into MethodInvocation(972) at 2", "Insert SimpleName: Collections(978) into SimpleType: Collections(979) at 0", "Insert MethodInvocation(960) into MethodInvocation(969) at 0", "Insert SimpleName: addLine(961) into MethodInvocation(969) at 1", "Insert StringLiteral: \"private static <E> %1$s<E> immutableSet(%1$s<E> elements) {\"(962) into MethodInvocation(969) at 2", "Insert TypeLiteral(965) into MethodInvocation(969) at 3", "Insert TypeLiteral(968) into MethodInvocation(969) at 4", "Insert SimpleName: code(957) into MethodInvocation(960) at 0", "Insert SimpleName: addLine(958) into MethodInvocation(960) at 1", "Insert StringLiteral: \"\"(959) into MethodInvocation(960) at 2", "Insert SimpleType: Set(964) into TypeLiteral(965) at 0", "Insert SimpleType: Class(967) into TypeLiteral(968) at 0", "Insert SimpleName: Set(963) into SimpleType: Set(964) at 0", "Insert SimpleName: Class(966) into SimpleType: Class(967) at 0", "Delete MethodInvocation(749)", "Delete ExpressionStatement(750)"]}}], "commit_stats": [{"total_files": 20, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}