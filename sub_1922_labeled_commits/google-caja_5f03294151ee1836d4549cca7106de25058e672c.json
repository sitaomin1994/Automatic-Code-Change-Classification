{"application": "google-caja", "csha": "5f03294151ee1836d4549cca7106de25058e672c", "files": [{"JsOptimizer_cluster": {"actions": [{"root": "UPDATE from optMq to mq", "operations": ["UPD SimpleName: optMq from optMq to mq", "UPD SimpleName: optMq from optMq to mq"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL ClassInstanceCreation", "DEL SimpleName: SimpleMessageQueue", "DEL SimpleType: SimpleMessageQueue", "DEL VariableDeclarationFragment", "DEL SimpleName: SimpleMessageQueue", "DEL VariableDeclarationStatement", "DEL SimpleType: SimpleMessageQueue", "DEL SimpleName: optMq"]}]}}, {"JsOptimizer_diff": {"operations": ["Update SimpleName: optMq(356) to mq", "Update SimpleName: optMq(373) to mq", "Delete SimpleName: SimpleMessageQueue(326)", "Delete SimpleType: SimpleMessageQueue(327)", "Delete SimpleName: optMq(328)", "Delete SimpleName: SimpleMessageQueue(329)", "Delete SimpleType: SimpleMessageQueue(330)", "Delete ClassInstanceCreation(331)", "Delete VariableDeclarationFragment(332)", "Delete VariableDeclarationStatement(333)"]}}, {"package-info_cluster": {"actions": [{"root": "UPDATE from file hold in a container, and in the presence of the cajita supporting to file hold in a container, and in the presence of the caja support", "operations": ["UPD TextElement: file hold in a container, and in the presence of the cajita supporting from file hold in a container, and in the presence of the cajita supporting to file hold in a container, and in the presence of the caja support"]}, {"root": "UPDATE from <li>Load the container and/or cajita supporting code</li> to <li>Load the container and/or caja support code</li>", "operations": ["UPD TextElement: <li>Load the container and/or cajita supporting code</li> from <li>Load the container and/or cajita supporting code</li> to <li>Load the container and/or caja support code</li>"]}]}}, {"package-info_diff": {"operations": ["Update TextElement: file hold in a container, and in the presence of the cajita supporting(106) to file hold in a container, and in the presence of the caja support", "Update TextElement: <li>Load the container and/or cajita supporting code</li>(109) to <li>Load the container and/or caja support code</li>"]}}, {"CajoledModule_cluster": {"actions": [{"root": "UPDATE from  cajita.js to  es53.js", "operations": ["UPD TextElement:  cajita.js from  cajita.js to  es53.js"]}]}}, {"CajoledModule_diff": {"operations": ["Update TextElement:  cajita.js(366) to  es53.js"]}}, {"Directive_cluster": {"actions": [{"root": "DEL EnumConstantDeclaration", "operations": ["DEL TextElement: String value of a directive invoking Cajita mode.", "DEL EnumConstantDeclaration", "DEL StringLiteral: \"use cajita\"", "DEL SimpleName: USE_CAJITA", "DEL Javadoc", "DEL TagElement"]}]}}, {"Directive_diff": {"operations": ["Delete TextElement: String value of a directive invoking Cajita mode.(64)", "Delete TagElement(65)", "Delete Javadoc(66)", "Delete SimpleName: USE_CAJITA(67)", "Delete StringLiteral: \"use cajita\"(68)", "Delete EnumConstantDeclaration(69)"]}}, {"DirectivePrologue_cluster": {"actions": [{"root": "UPDATE from 'use strict'; 'use cajita'; to 'use strict';", "operations": ["UPD TextElement: 'use strict'; 'use cajita'; from 'use strict'; 'use cajita'; to 'use strict';", "UPD TextElement: 'use strict'; 'use cajita'; from 'use strict'; 'use cajita'; to 'use strict';"]}]}}, {"DirectivePrologue_diff": {"operations": ["Update TextElement: 'use strict'; 'use cajita';(37) to 'use strict';", "Update TextElement: 'use strict'; 'use cajita';(43) to 'use strict';"]}}, {"DirectivePrologueQuasiNode_cluster": {"actions": [{"root": "UPDATE from  'use strict'; 'use cajita'; to  'use strict'; 'use strict';", "operations": ["UPD TextElement:  'use strict'; 'use cajita'; from  'use strict'; 'use cajita'; to  'use strict'; 'use strict';"]}]}}, {"DirectivePrologueQuasiNode_diff": {"operations": ["Update TextElement:  'use strict'; 'use cajita';(33) to  'use strict'; 'use strict';"]}}, {"Permit_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.google.caja.parser.quasiliteral"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.LinkedHashMap", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.ParseTreeNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.js.Identifier"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.js.Reference", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: canCall", "DEL InfixExpression: !=", "DEL SimpleType: Identifier", "DEL SimpleName: template", "DEL Modifier: private", "DEL Assignment: =", "DEL SimpleName: name", "DEL SimpleName: result", "DEL TextElement: Answer queries about what static paths are permitted, and report", "DEL VariableDeclarationFragment", "DEL QualifiedName: Map.Entry", "DEL SimpleName: assoc", "DEL Block", "DEL SimpleName: Permit", "DEL SimpleName: ParseTreeNode", "DEL SimpleType: PermitTemplate", "DEL SimpleName: sep", "DEL Block", "DEL SimpleName: subTemplate", "DEL ReturnStatement", "DEL SimpleType: Reference", "DEL SimpleName: String", "DEL SimpleName: append", "DEL SimpleName: result", "DEL IfStatement", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: StringBuilder", "DEL SimpleType: PermitTemplate", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: Permit", "DEL SimpleName: Permit", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL StringLiteral: \"\\\"\"", "DEL SimpleName: name", "DEL Block", "DEL SimpleName: name", "DEL SimpleName: String", "DEL ReturnStatement", "DEL SimpleName: myBuf", "DEL ExpressionStatement", "DEL SimpleType: ParseTreeNode", "DEL SimpleName: sep", "DEL SimpleName: assoc", "DEL StringLiteral: \"{\"", "DEL SimpleName: append", "DEL StringLiteral: \"\\\":\"", "DEL QualifiedName: template.templates", "DEL SimpleName: ParseTreeNode", "DEL SimpleName: path", "DEL SimpleName: String", "DEL SimpleName: canRead", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL TextElement:  erights", "DEL NullLiteral", "DEL TextElement: which static paths were checked.", "DEL SimpleType: LinkedHashMap", "DEL Block", "DEL TagElement: @author", "DEL ReturnStatement", "DEL SimpleName: result", "DEL CastExpression", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: myBuf", "DEL SimpleType: StringBuilder", "DEL VariableDeclarationFragment", "DEL BooleanLiteral: true", "DEL MethodDeclaration", "DEL CastExpression", "DEL Modifier: final", "DEL SimpleName: get", "DEL SimpleName: myBuf", "DEL StringLiteral: \",\\n  \"", "DEL SimpleName: getPermitsUsedAsJSONString", "DEL SimpleName: permitsUsed", "DEL SimpleName: result", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: sep", "DEL IfStatement", "DEL SimpleName: result", "DEL SimpleType: Permit", "DEL SimpleName: has", "DEL SimpleName: append", "DEL SimpleName: Identifier", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleName: getPermitsUsedAsJSONString", "DEL SimpleName: PermitTemplate", "DEL ExpressionStatement", "DEL SimpleName: p", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: permitsUsed", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: template", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL SimpleName: StringBuilder", "DEL SimpleName: myBuf", "DEL SimpleName: Reference", "DEL ParenthesizedExpression", "DEL NullLiteral", "DEL SimpleName: Identifier", "DEL Modifier: private", "DEL Modifier: final", "DEL SimpleName: Permit", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: myBuf", "DEL Block", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL SimpleName: myBuf", "DEL ExpressionStatement", "DEL IfStatement", "DEL StringLiteral: \"  \"", "DEL ThisExpression", "DEL SimpleName: path", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: append", "DEL SimpleType: Permit", "DEL SimpleType: String", "DEL SimpleName: Reference", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleType: Permit", "DEL SimpleType: Permit", "DEL SimpleName: path", "DEL ParenthesizedExpression", "DEL SimpleType: Map", "DEL SimpleName: first", "DEL MethodInvocation", "DEL SimpleName: Map", "DEL SimpleType: Reference", "DEL SingleVariableDeclaration", "DEL ParameterizedType: LinkedHashMap<String,Permit>", "DEL SimpleName: has", "DEL Javadoc", "DEL SimpleName: Permit", "DEL MethodDeclaration", "DEL InstanceofExpression", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: has", "DEL MethodInvocation", "DEL SimpleName: subTemplate", "DEL InstanceofExpression", "DEL SimpleName: Permit", "DEL SimpleName: canRead", "DEL SimpleName: Permit", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL TypeDeclaration: class", "DEL EnhancedForStatement", "DEL SimpleName: path", "DEL SimpleType: Permit", "DEL SimpleName: permitsUsed", "DEL Block", "DEL SimpleType: Map.Entry", "DEL SimpleName: String", "DEL SimpleName: append", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: entrySet", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL SimpleName: result", "DEL SimpleType: PermitTemplate", "DEL StringLiteral: \"()\"", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: ParseTreeNode", "DEL SimpleName: Permit", "DEL InfixExpression: !=", "DEL SimpleName: permitsUsed", "DEL MethodInvocation", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: has", "DEL SimpleName: getKey", "DEL VariableDeclarationFragment", "DEL SimpleName: PermitTemplate", "DEL SimpleType: StringBuilder", "DEL SimpleName: LinkedHashMap", "DEL SimpleName: toString", "DEL PrimitiveType: void", "DEL StringLiteral: \"}\"", "DEL Assignment: =", "DEL SimpleName: getName", "DEL SimpleType: Permit", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL SimpleName: first", "DEL SimpleType: Permit", "DEL SimpleType: StringBuilder", "DEL SimpleType: Identifier", "DEL BooleanLiteral: false", "DEL SimpleName: template", "DEL SimpleType: Permit", "DEL FieldAccess", "DEL ClassInstanceCreation", "DEL SimpleName: path", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: p", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL Modifier: private", "DEL Modifier: private", "DEL ExpressionStatement", "DEL SimpleName: Permit", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleType: Permit", "DEL Assignment: =", "DEL ExpressionStatement", "DEL Block", "DEL VariableDeclarationStatement", "DEL FieldDeclaration", "DEL SimpleName: name", "DEL ConstructorInvocation", "DEL Block", "DEL SimpleName: PermitTemplate", "DEL MethodInvocation", "DEL QualifiedName: PermitTemplate.DefaultTemplate", "DEL SimpleName: first", "DEL PrimitiveType: boolean", "DEL SimpleName: myBuf", "DEL SimpleName: myBuf", "DEL SimpleType: String", "DEL Block", "DEL PrefixExpression: !", "DEL SimpleName: permitsUsed", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TagElement", "DEL Block", "DEL NullLiteral", "DEL IfStatement", "DEL ReturnStatement", "DEL NullLiteral", "DEL SimpleName: path", "DEL ParameterizedType: Map<String,Permit>", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: path", "DEL SimpleName: StringBuilder", "DEL Assignment: =", "DEL InfixExpression: ==", "DEL IfStatement", "DEL SimpleType: String", "DEL SimpleName: p", "DEL SimpleName: template", "DEL SingleVariableDeclaration", "DEL SimpleName: Permit", "DEL SimpleName: subTemplate", "DEL SimpleName: getIdentifierName", "DEL SimpleName: get", "DEL SimpleName: put", "DEL SimpleName: getPermitsUsedAsJSONString", "DEL SimpleName: Permit", "DEL NullLiteral", "DEL SimpleName: getValue", "DEL SimpleName: assoc", "DEL SimpleName: Permit", "DEL SimpleName: getPermitsUsedAsJSONString", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL ParameterizedType: Map.Entry<String,Permit>", "DEL MethodInvocation", "DEL SimpleName: myBuf"]}]}}, {"Permit_diff": {"operations": ["Delete QualifiedName: com.google.caja.parser.quasiliteral(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.LinkedHashMap(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Map(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.google.caja.parser.ParseTreeNode(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.google.caja.parser.js.Identifier(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.google.caja.parser.js.Reference(10)", "Delete ImportDeclaration(11)", "Delete TextElement: Answer queries about what static paths are permitted, and report(12)", "Delete TextElement: which static paths were checked.(13)", "Delete TagElement(14)", "Delete TextElement:  erights(15)", "Delete TagElement: @author(16)", "Delete Javadoc(17)", "Delete Modifier: final(18)", "Delete SimpleName: Permit(19)", "Delete Modifier: final(20)", "Delete Modifier: private(21)", "Delete SimpleName: Map(22)", "Delete SimpleType: Map(23)", "Delete SimpleName: String(24)", "Delete SimpleType: String(25)", "Delete SimpleName: Permit(26)", "Delete SimpleType: Permit(27)", "Delete ParameterizedType: Map<String,Permit>(28)", "Delete SimpleName: permitsUsed(29)", "Delete VariableDeclarationFragment(30)", "Delete FieldDeclaration(31)", "Delete Modifier: final(32)", "Delete Modifier: private(33)", "Delete SimpleName: PermitTemplate(34)", "Delete SimpleType: PermitTemplate(35)", "Delete SimpleName: template(36)", "Delete VariableDeclarationFragment(37)", "Delete FieldDeclaration(38)", "Delete SimpleName: Permit(39)", "Delete QualifiedName: PermitTemplate.DefaultTemplate(40)", "Delete ConstructorInvocation(41)", "Delete Block(42)", "Delete MethodDeclaration(43)", "Delete SimpleName: Permit(44)", "Delete SimpleName: PermitTemplate(45)", "Delete SimpleType: PermitTemplate(46)", "Delete SimpleName: template(47)", "Delete SingleVariableDeclaration(48)", "Delete SimpleName: permitsUsed(49)", "Delete SimpleName: LinkedHashMap(50)", "Delete SimpleType: LinkedHashMap(51)", "Delete SimpleName: String(52)", "Delete SimpleType: String(53)", "Delete SimpleName: Permit(54)", "Delete SimpleType: Permit(55)", "Delete ParameterizedType: LinkedHashMap<String,Permit>(56)", "Delete ClassInstanceCreation(57)", "Delete Assignment: =(58)", "Delete ExpressionStatement(59)", "Delete ThisExpression(60)", "Delete SimpleName: template(61)", "Delete FieldAccess(62)", "Delete SimpleName: template(63)", "Delete Assignment: =(64)", "Delete ExpressionStatement(65)", "Delete Block(66)", "Delete MethodDeclaration(67)", "Delete Modifier: private(68)", "Delete SimpleName: Permit(69)", "Delete SimpleType: Permit(70)", "Delete SimpleName: has(71)", "Delete SimpleName: String(72)", "Delete SimpleType: String(73)", "Delete SimpleName: name(74)", "Delete SingleVariableDeclaration(75)", "Delete SimpleName: Permit(76)", "Delete SimpleType: Permit(77)", "Delete SimpleName: result(78)", "Delete SimpleName: permitsUsed(79)", "Delete SimpleName: get(80)", "Delete SimpleName: name(81)", "Delete MethodInvocation(82)", "Delete VariableDeclarationFragment(83)", "Delete VariableDeclarationStatement(84)", "Delete NullLiteral(85)", "Delete SimpleName: result(86)", "Delete InfixExpression: !=(87)", "Delete SimpleName: result(88)", "Delete ReturnStatement(89)", "Delete Block(90)", "Delete IfStatement(91)", "Delete SimpleName: PermitTemplate(92)", "Delete SimpleType: PermitTemplate(93)", "Delete SimpleName: subTemplate(94)", "Delete QualifiedName: template.templates(95)", "Delete SimpleName: get(96)", "Delete SimpleName: name(97)", "Delete MethodInvocation(98)", "Delete VariableDeclarationFragment(99)", "Delete VariableDeclarationStatement(100)", "Delete NullLiteral(101)", "Delete SimpleName: subTemplate(102)", "Delete InfixExpression: !=(103)", "Delete SimpleName: result(104)", "Delete SimpleName: Permit(105)", "Delete SimpleType: Permit(106)", "Delete SimpleName: subTemplate(107)", "Delete ClassInstanceCreation(108)", "Delete Assignment: =(109)", "Delete ExpressionStatement(110)", "Delete SimpleName: permitsUsed(111)", "Delete SimpleName: put(112)", "Delete SimpleName: name(113)", "Delete SimpleName: result(114)", "Delete MethodInvocation(115)", "Delete ExpressionStatement(116)", "Delete SimpleName: result(117)", "Delete ReturnStatement(118)", "Delete Block(119)", "Delete IfStatement(120)", "Delete NullLiteral(121)", "Delete ReturnStatement(122)", "Delete Block(123)", "Delete MethodDeclaration(124)", "Delete SimpleName: Permit(125)", "Delete SimpleType: Permit(126)", "Delete SimpleName: canRead(127)", "Delete SimpleName: ParseTreeNode(128)", "Delete SimpleType: ParseTreeNode(129)", "Delete SimpleName: path(130)", "Delete SingleVariableDeclaration(131)", "Delete SimpleName: path(132)", "Delete SimpleName: Reference(133)", "Delete SimpleType: Reference(134)", "Delete InstanceofExpression(135)", "Delete SimpleName: has(136)", "Delete SimpleName: Reference(137)", "Delete SimpleType: Reference(138)", "Delete SimpleName: path(139)", "Delete CastExpression(140)", "Delete ParenthesizedExpression(141)", "Delete SimpleName: getIdentifierName(142)", "Delete MethodInvocation(143)", "Delete MethodInvocation(144)", "Delete ReturnStatement(145)", "Delete Block(146)", "Delete IfStatement(147)", "Delete SimpleName: path(148)", "Delete SimpleName: Identifier(149)", "Delete SimpleType: Identifier(150)", "Delete InstanceofExpression(151)", "Delete SimpleName: has(152)", "Delete SimpleName: Identifier(153)", "Delete SimpleType: Identifier(154)", "Delete SimpleName: path(155)", "Delete CastExpression(156)", "Delete ParenthesizedExpression(157)", "Delete SimpleName: getName(158)", "Delete MethodInvocation(159)", "Delete MethodInvocation(160)", "Delete ReturnStatement(161)", "Delete Block(162)", "Delete IfStatement(163)", "Delete NullLiteral(164)", "Delete ReturnStatement(165)", "Delete Block(166)", "Delete MethodDeclaration(167)", "Delete SimpleName: Permit(168)", "Delete SimpleType: Permit(169)", "Delete SimpleName: canCall(170)", "Delete SimpleName: ParseTreeNode(171)", "Delete SimpleType: ParseTreeNode(172)", "Delete SimpleName: path(173)", "Delete SingleVariableDeclaration(174)", "Delete SimpleName: Permit(175)", "Delete SimpleType: Permit(176)", "Delete SimpleName: p(177)", "Delete SimpleName: canRead(178)", "Delete SimpleName: path(179)", "Delete MethodInvocation(180)", "Delete VariableDeclarationFragment(181)", "Delete VariableDeclarationStatement(182)", "Delete NullLiteral(183)", "Delete SimpleName: p(184)", "Delete InfixExpression: ==(185)", "Delete NullLiteral(186)", "Delete ReturnStatement(187)", "Delete Block(188)", "Delete IfStatement(189)", "Delete SimpleName: p(190)", "Delete SimpleName: has(191)", "Delete StringLiteral: \"()\"(192)", "Delete MethodInvocation(193)", "Delete ReturnStatement(194)", "Delete Block(195)", "Delete MethodDeclaration(196)", "Delete Modifier: public(197)", "Delete SimpleName: String(198)", "Delete SimpleType: String(199)", "Delete SimpleName: getPermitsUsedAsJSONString(200)", "Delete SimpleName: StringBuilder(201)", "Delete SimpleType: StringBuilder(202)", "Delete SimpleName: myBuf(203)", "Delete SimpleName: StringBuilder(204)", "Delete SimpleType: StringBuilder(205)", "Delete ClassInstanceCreation(206)", "Delete VariableDeclarationFragment(207)", "Delete VariableDeclarationStatement(208)", "Delete SimpleName: getPermitsUsedAsJSONString(209)", "Delete SimpleName: myBuf(210)", "Delete StringLiteral: \",\\n  \"(211)", "Delete MethodInvocation(212)", "Delete ExpressionStatement(213)", "Delete SimpleName: myBuf(214)", "Delete SimpleName: toString(215)", "Delete MethodInvocation(216)", "Delete ReturnStatement(217)", "Delete Block(218)", "Delete MethodDeclaration(219)", "Delete Modifier: private(220)", "Delete PrimitiveType: void(221)", "Delete SimpleName: getPermitsUsedAsJSONString(222)", "Delete SimpleName: StringBuilder(223)", "Delete SimpleType: StringBuilder(224)", "Delete SimpleName: myBuf(225)", "Delete SingleVariableDeclaration(226)", "Delete SimpleName: String(227)", "Delete SimpleType: String(228)", "Delete SimpleName: sep(229)", "Delete SingleVariableDeclaration(230)", "Delete SimpleName: myBuf(231)", "Delete SimpleName: append(232)", "Delete StringLiteral: \"{\"(233)", "Delete MethodInvocation(234)", "Delete ExpressionStatement(235)", "Delete PrimitiveType: boolean(236)", "Delete SimpleName: first(237)", "Delete BooleanLiteral: true(238)", "Delete VariableDeclarationFragment(239)", "Delete VariableDeclarationStatement(240)", "Delete QualifiedName: Map.Entry(241)", "Delete SimpleType: Map.Entry(242)", "Delete SimpleName: String(243)", "Delete SimpleType: String(244)", "Delete SimpleName: Permit(245)", "Delete SimpleType: Permit(246)", "Delete ParameterizedType: Map.Entry<String,Permit>(247)", "Delete SimpleName: assoc(248)", "Delete SingleVariableDeclaration(249)", "Delete SimpleName: permitsUsed(250)", "Delete SimpleName: entrySet(251)", "Delete MethodInvocation(252)", "Delete SimpleName: first(253)", "Delete PrefixExpression: !(254)", "Delete SimpleName: myBuf(255)", "Delete SimpleName: append(256)", "Delete SimpleName: sep(257)", "Delete MethodInvocation(258)", "Delete ExpressionStatement(259)", "Delete Block(260)", "Delete IfStatement(261)", "Delete SimpleName: myBuf(262)", "Delete SimpleName: append(263)", "Delete StringLiteral: \"\\\"\"(264)", "Delete MethodInvocation(265)", "Delete SimpleName: append(266)", "Delete SimpleName: assoc(267)", "Delete SimpleName: getKey(268)", "Delete MethodInvocation(269)", "Delete MethodInvocation(270)", "Delete SimpleName: append(271)", "Delete StringLiteral: \"\\\":\"(272)", "Delete MethodInvocation(273)", "Delete ExpressionStatement(274)", "Delete SimpleName: assoc(275)", "Delete SimpleName: getValue(276)", "Delete MethodInvocation(277)", "Delete SimpleName: getPermitsUsedAsJSONString(278)", "Delete SimpleName: myBuf(279)", "Delete SimpleName: sep(280)", "Delete StringLiteral: \"  \"(281)", "Delete InfixExpression: +(282)", "Delete MethodInvocation(283)", "Delete ExpressionStatement(284)", "Delete SimpleName: first(285)", "Delete BooleanLiteral: false(286)", "Delete Assignment: =(287)", "Delete ExpressionStatement(288)", "Delete Block(289)", "Delete EnhancedForStatement(290)", "Delete SimpleName: myBuf(291)", "Delete SimpleName: append(292)", "Delete StringLiteral: \"}\"(293)", "Delete MethodInvocation(294)", "Delete ExpressionStatement(295)", "Delete Block(296)", "Delete MethodDeclaration(297)", "Delete TypeDeclaration: class(298)"]}}, {"PermitTemplate_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.google.caja.parser.quasiliteral"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.HashMap", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL SimpleName: CanRead", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL SimpleName: CanRead", "DEL ThisExpression", "DEL SimpleName: CanRead", "DEL SimpleName: CanCall", "DEL StringLiteral: \"Error\"", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL StringLiteral: \"tr\"", "DEL StringLiteral: \"canDeletePub\"", "DEL Javadoc", "DEL StringLiteral: \"keys\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"min\"", "DEL SimpleType: PermitTemplate", "DEL SimpleName: PermitTemplate", "DEL SimpleName: PermitTemplate", "DEL StringLiteral: \"encodeURI\"", "DEL ClassInstanceCreation", "DEL SimpleType: PermitTemplate", "DEL SimpleType: String", "DEL ParameterizedType: Map<String,PermitTemplate>", "DEL SimpleName: templates", "DEL StringLiteral: \"canInnocentEnum\"", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL StringLiteral: \"slice\"", "DEL SimpleName: PermitTemplate", "DEL StringLiteral: \"stringify\"", "DEL SimpleType: PermitTemplate", "DEL NumberLiteral: 0", "DEL SimpleName: CanCall", "DEL SimpleName: CanRead", "DEL StringLiteral: \"log\"", "DEL Modifier: final", "DEL StringLiteral: \"UTC\"", "DEL StringLiteral: \"construct\"", "DEL StringLiteral: \"cm\"", "DEL StringLiteral: \"fromCharCode\"", "DEL Assignment: +=", "DEL StringLiteral: \"null\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"SyntaxError\"", "DEL SimpleName: CanRead", "DEL SimpleName: CanCall", "DEL StringLiteral: \"snapshot\"", "DEL SimpleName: CanCall", "DEL ClassInstanceCreation", "DEL SimpleName: CanCall", "DEL SimpleName: i", "DEL StringLiteral: \"getProtoPropertyValue\"", "DEL StringLiteral: \"copy\"", "DEL TagElement", "DEL StringLiteral: \"sqrt\"", "DEL SimpleType: Map", "DEL StringLiteral: \"isInstanceOf\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"URIError\"", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"remove\"", "DEL VariableDeclarationFragment", "DEL SimpleName: Map", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL SimpleName: CanRead", "DEL StringLiteral: \"construct\"", "DEL SimpleName: HashMap", "DEL StringLiteral: \"makeSealerUnsealerPair\"", "DEL StringLiteral: \"BREAK\"", "DEL StringLiteral: \"GuardT\"", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL ClassInstanceCreation", "DEL SimpleName: CanCall", "DEL StringLiteral: \"r\"", "DEL StringLiteral: \"Boolean\"", "DEL SimpleName: CanRead", "DEL SimpleName: CanCall", "DEL StringLiteral: \"undefined\"", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL StringLiteral: \"dis\"", "DEL StringLiteral: \"()\"", "DEL SimpleName: CanCall", "DEL SimpleName: pairs", "DEL SimpleName: CanCall", "DEL ClassInstanceCreation", "DEL SimpleName: CanCall", "DEL SimpleName: Permit", "DEL StringLiteral: \"enforceType\"", "DEL ClassInstanceCreation", "DEL StringLiteral: \"ro\"", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL StringLiteral: \"toString\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"()\"", "DEL StringLiteral: \"MAX_VALUE\"", "DEL StringLiteral: \"canReadRev\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"LN2\"", "DEL SimpleName: CanCall", "DEL FieldDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: CanRead", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL SimpleName: CanRead", "DEL SimpleName: CanRead", "DEL StringLiteral: \"parse\"", "DEL SimpleName: PermitTemplate", "DEL StringLiteral: \"isArray\"", "DEL SimpleName: CanRead", "DEL StringLiteral: \"manifest\"", "DEL ClassInstanceCreation", "DEL SimpleName: CanCall", "DEL TextElement: <p>", "DEL SimpleName: PermitTemplate", "DEL StringLiteral: \"instanceOf\"", "DEL StringLiteral: \"max\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"log\"", "DEL SimpleName: CanCall", "DEL SimpleName: CanRead", "DEL FieldAccess", "DEL StringLiteral: \"LN10\"", "DEL ArrayAccess", "DEL StringLiteral: \"ceil\"", "DEL Modifier: static", "DEL SimpleName: Map", "DEL TypeDeclaration: class", "DEL SimpleName: PermitTemplate", "DEL SimpleName: CanRead", "DEL StringLiteral: \"Number\"", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL StringLiteral: \"NaN\"", "DEL SimpleType: Object", "DEL SimpleName: CanCall", "DEL StringLiteral: \"TypeError\"", "DEL SimpleName: CanCall", "DEL SimpleName: PermitTemplate", "DEL StringLiteral: \"callPub\"", "DEL SimpleName: CanRead", "DEL StringLiteral: \"floor\"", "DEL ArrayAccess", "DEL SimpleName: CanCall", "DEL SimpleName: CanRead", "DEL StringLiteral: \"newTable\"", "DEL StringLiteral: \"encodeURIComponent\"", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL ParameterizedType: HashMap<String,PermitTemplate>", "DEL SimpleName: CanCall", "DEL StringLiteral: \"pow\"", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"()\"", "DEL TagElement: @link", "DEL Modifier: static", "DEL SimpleType: PermitTemplate", "DEL SimpleName: CanRead", "DEL SimpleName: CanCall", "DEL SimpleType: PermitTemplate", "DEL SimpleName: PermitTemplate", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL VariableDeclarationFragment", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL StringLiteral: \"deletePub\"", "DEL StringLiteral: \"abs\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"decodeURIComponent\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"guard\"", "DEL VariableDeclarationExpression", "DEL StringLiteral: \"coerce\"", "DEL StringLiteral: \"readOwn\"", "DEL StringLiteral: \"hasOwnPropertyOf\"", "DEL FieldDeclaration", "DEL SimpleName: i", "DEL SimpleName: CanCall", "DEL SimpleType: String", "DEL SimpleName: CanCall", "DEL StringLiteral: \"canSetPub\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"POSITIVE_INFINITY\"", "DEL StringLiteral: \"canEnumOwn\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"isNaN\"", "DEL StringLiteral: \"random\"", "DEL ParameterizedType: Map<String,PermitTemplate>", "DEL StringLiteral: \"SQRT2\"", "DEL StringLiteral: \"s\"", "DEL StringLiteral: \"readPub\"", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL StringLiteral: \"enforce\"", "DEL SimpleName: CanCall", "DEL SimpleName: String", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: CanCall", "DEL SimpleName: DefaultTemplate", "DEL Assignment: =", "DEL StringLiteral: \"Object\"", "DEL SimpleName: CanCall", "DEL SimpleType: String", "DEL SimpleName: CanRead", "DEL SimpleName: i", "DEL SimpleName: CanCall", "DEL StringLiteral: \"RangeError\"", "DEL SimpleType: PermitTemplate", "DEL SimpleName: CanCall", "DEL SimpleName: PermitTemplate", "DEL Modifier: static", "DEL SimpleName: PermitTemplate", "DEL NumberLiteral: 2", "DEL SimpleType: PermitTemplate", "DEL SimpleName: PermitTemplate", "DEL CastExpression", "DEL ExpressionStatement", "DEL SimpleName: CanCall", "DEL StringLiteral: \"forOwnKeys\"", "DEL SimpleName: CanCall", "DEL SimpleName: CanRead", "DEL SimpleName: PermitTemplate", "DEL SimpleName: PermitTemplate", "DEL SimpleName: CanCall", "DEL StringLiteral: \"NaN\"", "DEL SimpleName: CanRead", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL SimpleType: PermitTemplate", "DEL StringLiteral: \"Token\"", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL TextElement: inquiries should go through Permit.", "DEL StringLiteral: \"parseFloat\"", "DEL StringLiteral: \"false\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"exp\"", "DEL StringLiteral: \"asin\"", "DEL StringLiteral: \"sin\"", "DEL SimpleName: CanCall", "DEL SimpleName: PermitTemplate", "DEL StringLiteral: \"parse\"", "DEL StringLiteral: \"()\"", "DEL Modifier: final", "DEL SimpleType: PermitTemplate", "DEL QualifiedName: pairs.length", "DEL SimpleType: PermitTemplate", "DEL FieldDeclaration", "DEL SimpleName: CanCall", "DEL StringLiteral: \"getOwnPropertyNames\"", "DEL SimpleName: PermitTemplate", "DEL SimpleName: PermitTemplate", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL StringLiteral: \"beget\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"NEGATIVE_INFINITY\"", "DEL SimpleName: templates", "DEL SimpleType: PermitTemplate", "DEL StringLiteral: \"disArgs\"", "DEL SimpleName: CanRead", "DEL SimpleName: CanCall", "DEL ClassInstanceCreation", "DEL SimpleName: CanCall", "DEL StringLiteral: \"Trademark\"", "DEL SimpleType: HashMap", "DEL StringLiteral: \"Math\"", "DEL CastExpression", "DEL SimpleName: put", "DEL SimpleName: CanRead", "DEL StringLiteral: \"SQRT1_2\"", "DEL StringLiteral: \"eject\"", "DEL StringLiteral: \"getOuters\"", "DEL StringLiteral: \"isFrozen\"", "DEL StringLiteral: \"LOG2E\"", "DEL Block", "DEL StringLiteral: \"decodeURI\"", "DEL StringLiteral: \"args\"", "DEL StringLiteral: \"getSuperCtor\"", "DEL StringLiteral: \"$v\"", "DEL SimpleName: CanRead", "DEL SimpleName: pairs", "DEL ClassInstanceCreation", "DEL TextElement:  erights", "DEL StringLiteral: \"Infinity\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"true\"", "DEL StringLiteral: \"stamp\"", "DEL SimpleType: PermitTemplate", "DEL StringLiteral: \"Date\"", "DEL StringLiteral: \"()\"", "DEL MethodInvocation", "DEL SimpleName: templates", "DEL StringLiteral: \"isJSONContainer\"", "DEL SimpleName: CanCall", "DEL ClassInstanceCreation", "DEL ClassInstanceCreation", "DEL TextElement:  should access PermitTemplate directly. All other", "DEL SimpleType: PermitTemplate", "DEL SimpleName: CanCall", "DEL StringLiteral: \"freeze\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"initOuter\"", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL StringLiteral: \"LOG10E\"", "DEL StringLiteral: \"passesGuard\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"identical\"", "DEL StringLiteral: \"JSON\"", "DEL SimpleName: CanCall", "DEL SimpleType: Map", "DEL SimpleName: CanCall", "DEL SimpleName: CanRead", "DEL NumberLiteral: 1", "DEL StringLiteral: \"canReadPub\"", "DEL StringLiteral: \"cajita\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"ts\"", "DEL SimpleName: i", "DEL SimpleName: CanCall", "DEL SimpleName: CanRead", "DEL StringLiteral: \"ownKeys\"", "DEL SimpleName: PermitTemplate", "DEL StringLiteral: \"EvalError\"", "DEL StringLiteral: \"parseInt\"", "DEL StringLiteral: \"USELESS\"", "DEL SimpleName: String", "DEL Modifier: final", "DEL StringLiteral: \"inheritsFrom\"", "DEL FieldDeclaration", "DEL Modifier: final", "DEL SimpleName: CanCall", "DEL StringLiteral: \"RegExp\"", "DEL StringLiteral: \"cos\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"getFuncCategory\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"getProtoPropertyNames\"", "DEL VariableDeclarationFragment", "DEL SimpleName: CanCall", "DEL SingleVariableDeclaration", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL ClassInstanceCreation", "DEL StringLiteral: \"canCallPub\"", "DEL SimpleName: PermitTemplate", "DEL SimpleName: CanCall", "DEL StringLiteral: \"callWithEjector\"", "DEL SimpleType: String", "DEL StringLiteral: \"cf\"", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL SimpleName: pairs", "DEL MethodDeclaration", "DEL StringLiteral: \"round\"", "DEL SimpleName: String", "DEL SimpleName: templates", "DEL StringLiteral: \"acos\"", "DEL SimpleType: PermitTemplate", "DEL StringLiteral: \"ReferenceError\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"isFinite\"", "DEL SimpleName: CanCall", "DEL StringLiteral: \"forAllKeys\"", "DEL StringLiteral: \"atan2\"", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL SimpleName: CanCall", "DEL StringLiteral: \"isRecord\"", "DEL StringLiteral: \"String\"", "DEL TagElement: @author", "DEL SimpleName: CanCall", "DEL PrimitiveType: int", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL SimpleName: CanCall", "DEL StringLiteral: \"E\"", "DEL StringLiteral: \"MIN_VALUE\"", "DEL SimpleName: PermitTemplate", "DEL StringLiteral: \"identity\"", "DEL SimpleType: PermitTemplate", "DEL StringLiteral: \"directConstructor\"", "DEL SimpleName: String", "DEL SimpleName: CanRead", "DEL SimpleName: templates", "DEL SimpleType: PermitTemplate", "DEL StringLiteral: \"atan\"", "DEL ClassInstanceCreation", "DEL StringLiteral: \"setPub\"", "DEL StringLiteral: \"PI\"", "DEL StringLiteral: \"isDirectInstanceOf\"", "DEL StringLiteral: \"ros\"", "DEL StringLiteral: \"Array\"", "DEL TextElement: Represent which static access paths are presumed safe.", "DEL StringLiteral: \"typeOf\"", "DEL SimpleType: PermitTemplate", "DEL SimpleName: CanCall", "DEL ClassInstanceCreation", "DEL StringLiteral: \"so\"", "DEL StringLiteral: \"allKeys\"", "DEL SimpleName: PermitTemplate", "DEL SimpleType: PermitTemplate", "DEL SimpleName: CanRead", "DEL SimpleName: CanCall", "DEL InfixExpression: <", "DEL ForStatement", "DEL StringLiteral: \"fail\"", "DEL StringLiteral: \"tan\"", "DEL SimpleName: CanRead", "DEL StringLiteral: \"canEnumPub\"", "DEL SimpleType: PermitTemplate", "DEL TextElement: Only ", "DEL SimpleName: PermitTemplate"]}]}}, {"PermitTemplate_diff": {"operations": ["Delete QualifiedName: com.google.caja.parser.quasiliteral(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.HashMap(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Map(4)", "Delete ImportDeclaration(5)", "Delete TextElement: Represent which static access paths are presumed safe.(6)", "Delete TextElement: <p>(7)", "Delete TextElement: Only (8)", "Delete SimpleName: Permit(9)", "Delete TagElement: @link(10)", "Delete TextElement:  should access PermitTemplate directly. All other(11)", "Delete TextElement: inquiries should go through Permit.(12)", "Delete TagElement(13)", "Delete TextElement:  erights(14)", "Delete TagElement: @author(15)", "Delete Javadoc(16)", "Delete Modifier: final(17)", "Delete SimpleName: PermitTemplate(18)", "Delete Modifier: final(19)", "Delete Modifier: static(20)", "Delete SimpleName: PermitTemplate(21)", "Delete SimpleType: PermitTemplate(22)", "Delete SimpleName: CanRead(23)", "Delete SimpleName: PermitTemplate(24)", "Delete SimpleType: PermitTemplate(25)", "Delete ClassInstanceCreation(26)", "Delete VariableDeclarationFragment(27)", "Delete FieldDeclaration(28)", "Delete Modifier: final(29)", "Delete Modifier: static(30)", "Delete SimpleName: PermitTemplate(31)", "Delete SimpleType: PermitTemplate(32)", "Delete SimpleName: CanCall(33)", "Delete SimpleName: PermitTemplate(34)", "Delete SimpleType: PermitTemplate(35)", "Delete StringLiteral: \"()\"(36)", "Delete SimpleName: CanRead(37)", "Delete ClassInstanceCreation(38)", "Delete VariableDeclarationFragment(39)", "Delete FieldDeclaration(40)", "Delete Modifier: final(41)", "Delete SimpleName: Map(42)", "Delete SimpleType: Map(43)", "Delete SimpleName: String(44)", "Delete SimpleType: String(45)", "Delete SimpleName: PermitTemplate(46)", "Delete SimpleType: PermitTemplate(47)", "Delete ParameterizedType: Map<String,PermitTemplate>(48)", "Delete SimpleName: templates(49)", "Delete VariableDeclarationFragment(50)", "Delete FieldDeclaration(51)", "Delete SimpleName: PermitTemplate(52)", "Delete SimpleName: Object(53)", "Delete SimpleType: Object(54)", "Delete SimpleName: pairs(55)", "Delete SingleVariableDeclaration(56)", "Delete SimpleName: Map(57)", "Delete SimpleType: Map(58)", "Delete SimpleName: String(59)", "Delete SimpleType: String(60)", "Delete SimpleName: PermitTemplate(61)", "Delete SimpleType: PermitTemplate(62)", "Delete ParameterizedType: Map<String,PermitTemplate>(63)", "Delete SimpleName: templates(64)", "Delete SimpleName: HashMap(65)", "Delete SimpleType: HashMap(66)", "Delete SimpleName: String(67)", "Delete SimpleType: String(68)", "Delete SimpleName: PermitTemplate(69)", "Delete SimpleType: PermitTemplate(70)", "Delete ParameterizedType: HashMap<String,PermitTemplate>(71)", "Delete ClassInstanceCreation(72)", "Delete VariableDeclarationFragment(73)", "Delete VariableDeclarationStatement(74)", "Delete PrimitiveType: int(75)", "Delete SimpleName: i(76)", "Delete NumberLiteral: 0(77)", "Delete VariableDeclarationFragment(78)", "Delete VariableDeclarationExpression(79)", "Delete SimpleName: i(80)", "Delete QualifiedName: pairs.length(81)", "Delete InfixExpression: <(82)", "Delete SimpleName: i(83)", "Delete NumberLiteral: 2(84)", "Delete Assignment: +=(85)", "Delete SimpleName: templates(86)", "Delete SimpleName: put(87)", "Delete SimpleName: String(88)", "Delete SimpleType: String(89)", "Delete SimpleName: pairs(90)", "Delete SimpleName: i(91)", "Delete ArrayAccess(92)", "Delete CastExpression(93)", "Delete SimpleName: PermitTemplate(94)", "Delete SimpleType: PermitTemplate(95)", "Delete SimpleName: pairs(96)", "Delete SimpleName: i(97)", "Delete NumberLiteral: 1(98)", "Delete InfixExpression: +(99)", "Delete ArrayAccess(100)", "Delete CastExpression(101)", "Delete MethodInvocation(102)", "Delete ExpressionStatement(103)", "Delete Block(104)", "Delete ForStatement(105)", "Delete ThisExpression(106)", "Delete SimpleName: templates(107)", "Delete FieldAccess(108)", "Delete SimpleName: templates(109)", "Delete Assignment: =(110)", "Delete ExpressionStatement(111)", "Delete Block(112)", "Delete MethodDeclaration(113)", "Delete Modifier: static(114)", "Delete SimpleName: PermitTemplate(115)", "Delete SimpleType: PermitTemplate(116)", "Delete SimpleName: DefaultTemplate(117)", "Delete SimpleName: PermitTemplate(118)", "Delete SimpleType: PermitTemplate(119)", "Delete StringLiteral: \"$v\"(120)", "Delete SimpleName: PermitTemplate(121)", "Delete SimpleType: PermitTemplate(122)", "Delete StringLiteral: \"typeOf\"(123)", "Delete SimpleName: CanCall(124)", "Delete StringLiteral: \"instanceOf\"(125)", "Delete SimpleName: CanCall(126)", "Delete StringLiteral: \"tr\"(127)", "Delete SimpleName: CanCall(128)", "Delete StringLiteral: \"ts\"(129)", "Delete SimpleName: CanCall(130)", "Delete StringLiteral: \"r\"(131)", "Delete SimpleName: CanCall(132)", "Delete StringLiteral: \"s\"(133)", "Delete SimpleName: CanCall(134)", "Delete StringLiteral: \"cf\"(135)", "Delete SimpleName: CanCall(136)", "Delete StringLiteral: \"cm\"(137)", "Delete SimpleName: CanCall(138)", "Delete StringLiteral: \"construct\"(139)", "Delete SimpleName: CanCall(140)", "Delete StringLiteral: \"getOuters\"(141)", "Delete SimpleName: CanCall(142)", "Delete StringLiteral: \"ro\"(143)", "Delete SimpleName: CanCall(144)", "Delete StringLiteral: \"ros\"(145)", "Delete SimpleName: CanCall(146)", "Delete StringLiteral: \"so\"(147)", "Delete SimpleName: CanCall(148)", "Delete StringLiteral: \"initOuter\"(149)", "Delete SimpleName: CanCall(150)", "Delete StringLiteral: \"remove\"(151)", "Delete SimpleName: CanCall(152)", "Delete StringLiteral: \"keys\"(153)", "Delete SimpleName: CanCall(154)", "Delete StringLiteral: \"canReadRev\"(155)", "Delete SimpleName: CanCall(156)", "Delete StringLiteral: \"disArgs\"(157)", "Delete SimpleName: CanCall(158)", "Delete StringLiteral: \"dis\"(159)", "Delete SimpleName: CanCall(160)", "Delete ClassInstanceCreation(161)", "Delete StringLiteral: \"cajita\"(162)", "Delete SimpleName: PermitTemplate(163)", "Delete SimpleType: PermitTemplate(164)", "Delete StringLiteral: \"BREAK\"(165)", "Delete SimpleName: CanRead(166)", "Delete StringLiteral: \"USELESS\"(167)", "Delete SimpleName: CanRead(168)", "Delete StringLiteral: \"GuardT\"(169)", "Delete SimpleName: PermitTemplate(170)", "Delete SimpleType: PermitTemplate(171)", "Delete StringLiteral: \"toString\"(172)", "Delete SimpleName: CanCall(173)", "Delete StringLiteral: \"coerce\"(174)", "Delete SimpleName: CanCall(175)", "Delete ClassInstanceCreation(176)", "Delete StringLiteral: \"log\"(177)", "Delete SimpleName: CanCall(178)", "Delete StringLiteral: \"fail\"(179)", "Delete SimpleName: CanCall(180)", "Delete StringLiteral: \"enforce\"(181)", "Delete SimpleName: CanCall(182)", "Delete StringLiteral: \"enforceType\"(183)", "Delete SimpleName: CanCall(184)", "Delete StringLiteral: \"directConstructor\"(185)", "Delete SimpleName: CanCall(186)", "Delete StringLiteral: \"getFuncCategory\"(187)", "Delete SimpleName: CanCall(188)", "Delete StringLiteral: \"isDirectInstanceOf\"(189)", "Delete SimpleName: CanCall(190)", "Delete StringLiteral: \"isInstanceOf\"(191)", "Delete SimpleName: CanCall(192)", "Delete StringLiteral: \"isRecord\"(193)", "Delete SimpleName: CanCall(194)", "Delete StringLiteral: \"isArray\"(195)", "Delete SimpleName: CanCall(196)", "Delete StringLiteral: \"isJSONContainer\"(197)", "Delete SimpleName: CanCall(198)", "Delete StringLiteral: \"freeze\"(199)", "Delete SimpleName: CanCall(200)", "Delete StringLiteral: \"isFrozen\"(201)", "Delete SimpleName: CanCall(202)", "Delete StringLiteral: \"copy\"(203)", "Delete SimpleName: CanCall(204)", "Delete StringLiteral: \"snapshot\"(205)", "Delete SimpleName: CanCall(206)", "Delete StringLiteral: \"canReadPub\"(207)", "Delete SimpleName: CanCall(208)", "Delete StringLiteral: \"readPub\"(209)", "Delete SimpleName: CanCall(210)", "Delete StringLiteral: \"hasOwnPropertyOf\"(211)", "Delete SimpleName: CanCall(212)", "Delete StringLiteral: \"readOwn\"(213)", "Delete SimpleName: CanCall(214)", "Delete StringLiteral: \"canEnumPub\"(215)", "Delete SimpleName: CanCall(216)", "Delete StringLiteral: \"canEnumOwn\"(217)", "Delete SimpleName: CanCall(218)", "Delete StringLiteral: \"canInnocentEnum\"(219)", "Delete SimpleName: CanCall(220)", "Delete StringLiteral: \"allKeys\"(221)", "Delete SimpleName: CanCall(222)", "Delete StringLiteral: \"forAllKeys\"(223)", "Delete SimpleName: CanCall(224)", "Delete StringLiteral: \"ownKeys\"(225)", "Delete SimpleName: CanCall(226)", "Delete StringLiteral: \"forOwnKeys\"(227)", "Delete SimpleName: CanCall(228)", "Delete StringLiteral: \"canCallPub\"(229)", "Delete SimpleName: CanCall(230)", "Delete StringLiteral: \"callPub\"(231)", "Delete SimpleName: CanCall(232)", "Delete StringLiteral: \"canSetPub\"(233)", "Delete SimpleName: CanCall(234)", "Delete StringLiteral: \"setPub\"(235)", "Delete SimpleName: CanCall(236)", "Delete StringLiteral: \"canDeletePub\"(237)", "Delete SimpleName: CanCall(238)", "Delete StringLiteral: \"deletePub\"(239)", "Delete SimpleName: CanCall(240)", "Delete StringLiteral: \"Token\"(241)", "Delete SimpleName: CanCall(242)", "Delete StringLiteral: \"identical\"(243)", "Delete SimpleName: CanCall(244)", "Delete StringLiteral: \"newTable\"(245)", "Delete SimpleName: CanCall(246)", "Delete StringLiteral: \"identity\"(247)", "Delete SimpleName: CanCall(248)", "Delete StringLiteral: \"callWithEjector\"(249)", "Delete SimpleName: CanCall(250)", "Delete StringLiteral: \"eject\"(251)", "Delete SimpleName: CanCall(252)", "Delete StringLiteral: \"Trademark\"(253)", "Delete SimpleName: CanCall(254)", "Delete StringLiteral: \"guard\"(255)", "Delete SimpleName: CanCall(256)", "Delete StringLiteral: \"passesGuard\"(257)", "Delete SimpleName: CanCall(258)", "Delete StringLiteral: \"stamp\"(259)", "Delete SimpleName: CanCall(260)", "Delete StringLiteral: \"makeSealerUnsealerPair\"(261)", "Delete SimpleName: CanCall(262)", "Delete StringLiteral: \"manifest\"(263)", "Delete SimpleName: CanCall(264)", "Delete StringLiteral: \"args\"(265)", "Delete SimpleName: CanCall(266)", "Delete StringLiteral: \"construct\"(267)", "Delete SimpleName: CanCall(268)", "Delete StringLiteral: \"inheritsFrom\"(269)", "Delete SimpleName: CanCall(270)", "Delete StringLiteral: \"getSuperCtor\"(271)", "Delete SimpleName: CanCall(272)", "Delete StringLiteral: \"getOwnPropertyNames\"(273)", "Delete SimpleName: CanCall(274)", "Delete StringLiteral: \"getProtoPropertyNames\"(275)", "Delete SimpleName: CanCall(276)", "Delete StringLiteral: \"getProtoPropertyValue\"(277)", "Delete SimpleName: CanCall(278)", "Delete StringLiteral: \"beget\"(279)", "Delete SimpleName: CanCall(280)", "Delete ClassInstanceCreation(281)", "Delete StringLiteral: \"null\"(282)", "Delete SimpleName: CanRead(283)", "Delete StringLiteral: \"false\"(284)", "Delete SimpleName: CanRead(285)", "Delete StringLiteral: \"true\"(286)", "Delete SimpleName: CanRead(287)", "Delete StringLiteral: \"NaN\"(288)", "Delete SimpleName: CanRead(289)", "Delete StringLiteral: \"Infinity\"(290)", "Delete SimpleName: CanRead(291)", "Delete StringLiteral: \"undefined\"(292)", "Delete SimpleName: CanRead(293)", "Delete StringLiteral: \"parseInt\"(294)", "Delete SimpleName: CanCall(295)", "Delete StringLiteral: \"parseFloat\"(296)", "Delete SimpleName: CanCall(297)", "Delete StringLiteral: \"isNaN\"(298)", "Delete SimpleName: CanCall(299)", "Delete StringLiteral: \"isFinite\"(300)", "Delete SimpleName: CanCall(301)", "Delete StringLiteral: \"decodeURI\"(302)", "Delete SimpleName: CanCall(303)", "Delete StringLiteral: \"decodeURIComponent\"(304)", "Delete SimpleName: CanCall(305)", "Delete StringLiteral: \"encodeURI\"(306)", "Delete SimpleName: CanCall(307)", "Delete StringLiteral: \"encodeURIComponent\"(308)", "Delete SimpleName: CanCall(309)", "Delete StringLiteral: \"Math\"(310)", "Delete SimpleName: PermitTemplate(311)", "Delete SimpleType: PermitTemplate(312)", "Delete StringLiteral: \"E\"(313)", "Delete SimpleName: CanRead(314)", "Delete StringLiteral: \"LN10\"(315)", "Delete SimpleName: CanRead(316)", "Delete StringLiteral: \"LN2\"(317)", "Delete SimpleName: CanRead(318)", "Delete StringLiteral: \"LOG2E\"(319)", "Delete SimpleName: CanRead(320)", "Delete StringLiteral: \"LOG10E\"(321)", "Delete SimpleName: CanRead(322)", "Delete StringLiteral: \"PI\"(323)", "Delete SimpleName: CanRead(324)", "Delete StringLiteral: \"SQRT1_2\"(325)", "Delete SimpleName: CanRead(326)", "Delete StringLiteral: \"SQRT2\"(327)", "Delete SimpleName: CanRead(328)", "Delete StringLiteral: \"abs\"(329)", "Delete SimpleName: CanCall(330)", "Delete StringLiteral: \"acos\"(331)", "Delete SimpleName: CanCall(332)", "Delete StringLiteral: \"asin\"(333)", "Delete SimpleName: CanCall(334)", "Delete StringLiteral: \"atan\"(335)", "Delete SimpleName: CanCall(336)", "Delete StringLiteral: \"atan2\"(337)", "Delete SimpleName: CanCall(338)", "Delete StringLiteral: \"ceil\"(339)", "Delete SimpleName: CanCall(340)", "Delete StringLiteral: \"cos\"(341)", "Delete SimpleName: CanCall(342)", "Delete StringLiteral: \"exp\"(343)", "Delete SimpleName: CanCall(344)", "Delete StringLiteral: \"floor\"(345)", "Delete SimpleName: CanCall(346)", "Delete StringLiteral: \"log\"(347)", "Delete SimpleName: CanCall(348)", "Delete StringLiteral: \"max\"(349)", "Delete SimpleName: CanCall(350)", "Delete StringLiteral: \"min\"(351)", "Delete SimpleName: CanCall(352)", "Delete StringLiteral: \"pow\"(353)", "Delete SimpleName: CanCall(354)", "Delete StringLiteral: \"random\"(355)", "Delete SimpleName: CanCall(356)", "Delete StringLiteral: \"round\"(357)", "Delete SimpleName: CanCall(358)", "Delete StringLiteral: \"sin\"(359)", "Delete SimpleName: CanCall(360)", "Delete StringLiteral: \"sqrt\"(361)", "Delete SimpleName: CanCall(362)", "Delete StringLiteral: \"tan\"(363)", "Delete SimpleName: CanCall(364)", "Delete ClassInstanceCreation(365)", "Delete StringLiteral: \"JSON\"(366)", "Delete SimpleName: PermitTemplate(367)", "Delete SimpleType: PermitTemplate(368)", "Delete StringLiteral: \"parse\"(369)", "Delete SimpleName: CanCall(370)", "Delete StringLiteral: \"stringify\"(371)", "Delete SimpleName: CanCall(372)", "Delete ClassInstanceCreation(373)", "Delete StringLiteral: \"Object\"(374)", "Delete SimpleName: CanCall(375)", "Delete StringLiteral: \"Array\"(376)", "Delete SimpleName: PermitTemplate(377)", "Delete SimpleType: PermitTemplate(378)", "Delete StringLiteral: \"()\"(379)", "Delete SimpleName: CanRead(380)", "Delete StringLiteral: \"slice\"(381)", "Delete SimpleName: CanCall(382)", "Delete ClassInstanceCreation(383)", "Delete StringLiteral: \"String\"(384)", "Delete SimpleName: PermitTemplate(385)", "Delete SimpleType: PermitTemplate(386)", "Delete StringLiteral: \"()\"(387)", "Delete SimpleName: CanRead(388)", "Delete StringLiteral: \"fromCharCode\"(389)", "Delete SimpleName: CanCall(390)", "Delete ClassInstanceCreation(391)", "Delete StringLiteral: \"Boolean\"(392)", "Delete SimpleName: CanCall(393)", "Delete StringLiteral: \"Number\"(394)", "Delete SimpleName: PermitTemplate(395)", "Delete SimpleType: PermitTemplate(396)", "Delete StringLiteral: \"()\"(397)", "Delete SimpleName: CanRead(398)", "Delete StringLiteral: \"MAX_VALUE\"(399)", "Delete SimpleName: CanRead(400)", "Delete StringLiteral: \"MIN_VALUE\"(401)", "Delete SimpleName: CanRead(402)", "Delete StringLiteral: \"NaN\"(403)", "Delete SimpleName: CanRead(404)", "Delete StringLiteral: \"NEGATIVE_INFINITY\"(405)", "Delete SimpleName: CanRead(406)", "Delete StringLiteral: \"POSITIVE_INFINITY\"(407)", "Delete SimpleName: CanRead(408)", "Delete ClassInstanceCreation(409)", "Delete StringLiteral: \"Date\"(410)", "Delete SimpleName: PermitTemplate(411)", "Delete SimpleType: PermitTemplate(412)", "Delete StringLiteral: \"()\"(413)", "Delete SimpleName: CanRead(414)", "Delete StringLiteral: \"parse\"(415)", "Delete SimpleName: CanCall(416)", "Delete StringLiteral: \"UTC\"(417)", "Delete SimpleName: CanCall(418)", "Delete ClassInstanceCreation(419)", "Delete StringLiteral: \"RegExp\"(420)", "Delete SimpleName: CanCall(421)", "Delete StringLiteral: \"Error\"(422)", "Delete SimpleName: CanCall(423)", "Delete StringLiteral: \"EvalError\"(424)", "Delete SimpleName: CanCall(425)", "Delete StringLiteral: \"RangeError\"(426)", "Delete SimpleName: CanCall(427)", "Delete StringLiteral: \"ReferenceError\"(428)", "Delete SimpleName: CanCall(429)", "Delete StringLiteral: \"SyntaxError\"(430)", "Delete SimpleName: CanCall(431)", "Delete StringLiteral: \"TypeError\"(432)", "Delete SimpleName: CanCall(433)", "Delete StringLiteral: \"URIError\"(434)", "Delete SimpleName: CanCall(435)", "Delete ClassInstanceCreation(436)", "Delete VariableDeclarationFragment(437)", "Delete FieldDeclaration(438)", "Delete TypeDeclaration: class(439)"]}}, {"RewriterMessageType_cluster": {"actions": [{"root": "DEL EnumConstantDeclaration", "operations": ["DEL EnumConstantDeclaration", "DEL SimpleName: FOR_IN_NOT_IN_CAJITA", "DEL QualifiedName: MessageLevel.FATAL_ERROR", "DEL StringLiteral: \"%s: for-in construct not allowed in Cajita: %s, %s\""]}, {"root": "DEL EnumConstantDeclaration", "operations": ["DEL EnumConstantDeclaration", "DEL SimpleName: THIS_NOT_IN_CAJITA", "DEL StringLiteral: \"%s: 'this' variable not allowed in Cajita: %s, %s\"", "DEL QualifiedName: MessageLevel.FATAL_ERROR"]}, {"root": "DEL EnumConstantDeclaration", "operations": ["DEL QualifiedName: MessageLevel.FATAL_ERROR", "DEL StringLiteral: \"%s: regex literals not allowed in Cajita. \"", "DEL SimpleName: REGEX_LITERALS_NOT_IN_CAJITA", "DEL EnumConstantDeclaration", "DEL InfixExpression: +", "DEL StringLiteral: \"Call new RegeExp() instead: %s, %s\""]}, {"root": "DEL EnumConstantDeclaration", "operations": ["DEL StringLiteral: \"The \\\"prototype\\\" property of a function is always \"", "DEL QualifiedName: MessageLevel.LINT", "DEL InfixExpression: +", "DEL EnumConstantDeclaration", "DEL StringLiteral: \"\\\"undefined\\\": %s, %s\"", "DEL StringLiteral: \"%s: Prototypical inheritance is not supported in Cajita. \"", "DEL SimpleName: PROTOTYPICAL_INHERITANCE_NOT_IN_CAJITA"]}, {"root": "DEL EnumConstantDeclaration", "operations": ["DEL EnumConstantDeclaration", "DEL SimpleName: CANNOT_LOAD_A_DYNAMIC_CAJITA_MODULE", "DEL QualifiedName: MessageLevel.FATAL_ERROR", "DEL StringLiteral: \"%s: Dynamically computed names should use load.async()\""]}, {"root": "DEL EnumConstantDeclaration", "operations": ["DEL EnumConstantDeclaration", "DEL SimpleName: CANNOT_LOAD_A_DYNAMIC_VALIJA_MODULE", "DEL QualifiedName: MessageLevel.FATAL_ERROR", "DEL StringLiteral: \"%s: Dynamically computed names should use includeScript.async()\""]}]}}, {"RewriterMessageType_diff": {"operations": ["Delete SimpleName: FOR_IN_NOT_IN_CAJITA(159)", "Delete StringLiteral: \"%s: for-in construct not allowed in Cajita: %s, %s\"(160)", "Delete QualifiedName: MessageLevel.FATAL_ERROR(161)", "Delete EnumConstantDeclaration(162)", "Delete SimpleName: THIS_NOT_IN_CAJITA(163)", "Delete StringLiteral: \"%s: 'this' variable not allowed in Cajita: %s, %s\"(164)", "Delete QualifiedName: MessageLevel.FATAL_ERROR(165)", "Delete EnumConstantDeclaration(166)", "Delete SimpleName: REGEX_LITERALS_NOT_IN_CAJITA(167)", "Delete StringLiteral: \"%s: regex literals not allowed in Cajita. \"(168)", "Delete StringLiteral: \"Call new RegeExp() instead: %s, %s\"(169)", "Delete InfixExpression: +(170)", "Delete QualifiedName: MessageLevel.FATAL_ERROR(171)", "Delete EnumConstantDeclaration(172)", "Delete SimpleName: PROTOTYPICAL_INHERITANCE_NOT_IN_CAJITA(185)", "Delete StringLiteral: \"%s: Prototypical inheritance is not supported in Cajita. \"(186)", "Delete StringLiteral: \"The \\\"prototype\\\" property of a function is always \"(187)", "Delete StringLiteral: \"\\\"undefined\\\": %s, %s\"(188)", "Delete InfixExpression: +(189)", "Delete QualifiedName: MessageLevel.LINT(190)", "Delete EnumConstantDeclaration(191)", "Delete SimpleName: CANNOT_LOAD_A_DYNAMIC_CAJITA_MODULE(208)", "Delete StringLiteral: \"%s: Dynamically computed names should use load.async()\"(209)", "Delete QualifiedName: MessageLevel.FATAL_ERROR(210)", "Delete EnumConstantDeclaration(211)", "Delete SimpleName: CANNOT_LOAD_A_DYNAMIC_VALIJA_MODULE(216)", "Delete StringLiteral: \"%s: Dynamically computed names should use includeScript.async()\"(217)", "Delete QualifiedName: MessageLevel.FATAL_ERROR(218)", "Delete EnumConstantDeclaration(219)"]}}, {"Scope_cluster": {"actions": [{"root": "UPDATE from Is a given symbol imported by this Cajita module? to Is a given symbol imported by this module?", "operations": ["UPD TextElement: Is a given symbol imported by this Cajita module? from Is a given symbol imported by this Cajita module? to Is a given symbol imported by this module?"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.js.Expression", "DEL ImportDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: Permit", "DEL SimpleName: permitsUsed", "DEL SimpleType: Permit", "DEL Modifier: private", "DEL FieldDeclaration"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ClassInstanceCreation", "DEL SimpleName: Permit", "DEL ExpressionStatement", "DEL ThisExpression", "DEL Assignment: =", "DEL SimpleName: permitsUsed", "DEL SimpleType: Permit", "DEL FieldAccess"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL FieldAccess", "DEL SimpleName: permitsUsed", "DEL ThisExpression", "DEL QualifiedName: parent.permitsUsed", "DEL ExpressionStatement", "DEL Assignment: ="]}, {"root": "DEL StringLiteral: \"cajita\"", "operations": ["DEL StringLiteral: \"cajita\""]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement", "DEL SimpleName: Expression", "DEL SimpleType: Identifier", "DEL SimpleName: Identifier", "DEL StringLiteral: \")\"", "DEL VariableDeclarationFragment", "DEL SimpleName: permitsUsed", "DEL ReturnStatement", "DEL SimpleName: getPermitsUsedAsJSONString", "DEL Block", "DEL SimpleType: Expression", "DEL TextElement: otherwise return a JSON description of all the statically", "DEL ReturnStatement", "DEL NullLiteral", "DEL Block", "DEL MethodDeclaration", "DEL StringLiteral: \"(\"", "DEL TextElement: permitted paths rooted in varName which this module's compilation", "DEL InfixExpression: +", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: subPermit", "DEL TextElement: If varName is not a statically permitted base name, return null;", "DEL SingleVariableDeclaration", "DEL SimpleName: getPermitsUsed", "DEL Javadoc", "DEL SimpleType: Permit", "DEL SimpleName: Permit", "DEL MethodInvocation", "DEL SimpleName: canRead", "DEL SimpleType: Expression", "DEL NullLiteral", "DEL Modifier: public", "DEL SimpleName: subPermit", "DEL SimpleName: varName", "DEL TextElement: assumed were safe.", "DEL SimpleName: varName", "DEL SimpleName: Expression", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL CastExpression", "DEL IfStatement", "DEL SimpleName: subPermit", "DEL SimpleName: substV"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: permitRead", "DEL SimpleType: Reference", "DEL SimpleName: o", "DEL MethodInvocation", "DEL SimpleName: o", "DEL NullLiteral", "DEL SimpleType: Permit", "DEL SimpleName: r", "DEL SimpleName: ParseTreeNode", "DEL SimpleName: isImported", "DEL ReturnStatement", "DEL SimpleName: o", "DEL Modifier: public", "DEL SimpleName: r", "DEL SimpleName: getIdentifierName", "DEL VariableDeclarationStatement", "DEL SimpleName: o", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL IfStatement", "DEL CastExpression", "DEL SimpleName: Reference", "DEL SimpleName: canRead", "DEL SimpleType: Reference", "DEL InstanceofExpression", "DEL SimpleName: Reference", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: permitsUsed", "DEL Block", "DEL SimpleName: Reference", "DEL SimpleType: ParseTreeNode", "DEL ReturnStatement", "DEL SimpleName: Permit", "DEL Block", "DEL Block", "DEL SimpleType: Reference"]}]}}, {"Scope_diff": {"operations": ["Update TextElement: Is a given symbol imported by this Cajita module?(1281) to Is a given symbol imported by this module?", "Delete QualifiedName: com.google.caja.parser.js.Expression(22)", "Delete ImportDeclaration(23)", "Delete Modifier: private(267)", "Delete Modifier: final(268)", "Delete SimpleName: Permit(269)", "Delete SimpleType: Permit(270)", "Delete SimpleName: permitsUsed(271)", "Delete VariableDeclarationFragment(272)", "Delete FieldDeclaration(273)", "Delete ThisExpression(483)", "Delete SimpleName: permitsUsed(484)", "Delete FieldAccess(485)", "Delete SimpleName: Permit(486)", "Delete SimpleType: Permit(487)", "Delete ClassInstanceCreation(488)", "Delete Assignment: =(489)", "Delete ExpressionStatement(490)", "Delete ThisExpression(521)", "Delete SimpleName: permitsUsed(522)", "Delete FieldAccess(523)", "Delete QualifiedName: parent.permitsUsed(524)", "Delete Assignment: =(525)", "Delete ExpressionStatement(526)", "Delete StringLiteral: \"cajita\"(1952)", "Delete TextElement: If varName is not a statically permitted base name, return null;(2163)", "Delete TextElement: otherwise return a JSON description of all the statically(2164)", "Delete TextElement: permitted paths rooted in varName which this module's compilation(2165)", "Delete TextElement: assumed were safe.(2166)", "Delete TagElement(2167)", "Delete Javadoc(2168)", "Delete Modifier: public(2169)", "Delete SimpleName: Expression(2170)", "Delete SimpleType: Expression(2171)", "Delete SimpleName: getPermitsUsed(2172)", "Delete SimpleName: Identifier(2173)", "Delete SimpleType: Identifier(2174)", "Delete SimpleName: varName(2175)", "Delete SingleVariableDeclaration(2176)", "Delete SimpleName: Permit(2177)", "Delete SimpleType: Permit(2178)", "Delete SimpleName: subPermit(2179)", "Delete SimpleName: permitsUsed(2180)", "Delete SimpleName: canRead(2181)", "Delete SimpleName: varName(2182)", "Delete MethodInvocation(2183)", "Delete VariableDeclarationFragment(2184)", "Delete VariableDeclarationStatement(2185)", "Delete NullLiteral(2186)", "Delete SimpleName: subPermit(2187)", "Delete InfixExpression: ==(2188)", "Delete NullLiteral(2189)", "Delete ReturnStatement(2190)", "Delete Block(2191)", "Delete IfStatement(2192)", "Delete SimpleName: Expression(2193)", "Delete SimpleType: Expression(2194)", "Delete SimpleName: substV(2195)", "Delete StringLiteral: \"(\"(2196)", "Delete SimpleName: subPermit(2197)", "Delete SimpleName: getPermitsUsedAsJSONString(2198)", "Delete MethodInvocation(2199)", "Delete StringLiteral: \")\"(2200)", "Delete InfixExpression: +(2201)", "Delete MethodInvocation(2202)", "Delete CastExpression(2203)", "Delete ReturnStatement(2204)", "Delete Block(2205)", "Delete MethodDeclaration(2206)", "Delete Modifier: public(2207)", "Delete SimpleName: Permit(2208)", "Delete SimpleType: Permit(2209)", "Delete SimpleName: permitRead(2210)", "Delete SimpleName: ParseTreeNode(2211)", "Delete SimpleType: ParseTreeNode(2212)", "Delete SimpleName: o(2213)", "Delete SingleVariableDeclaration(2214)", "Delete SimpleName: o(2215)", "Delete SimpleName: Reference(2216)", "Delete SimpleType: Reference(2217)", "Delete InstanceofExpression(2218)", "Delete SimpleName: Reference(2219)", "Delete SimpleType: Reference(2220)", "Delete SimpleName: r(2221)", "Delete SimpleName: Reference(2222)", "Delete SimpleType: Reference(2223)", "Delete SimpleName: o(2224)", "Delete CastExpression(2225)", "Delete VariableDeclarationFragment(2226)", "Delete VariableDeclarationStatement(2227)", "Delete SimpleName: isImported(2228)", "Delete SimpleName: r(2229)", "Delete SimpleName: getIdentifierName(2230)", "Delete MethodInvocation(2231)", "Delete MethodInvocation(2232)", "Delete SimpleName: permitsUsed(2233)", "Delete SimpleName: canRead(2234)", "Delete SimpleName: o(2235)", "Delete MethodInvocation(2236)", "Delete ReturnStatement(2237)", "Delete Block(2238)", "Delete IfStatement(2239)", "Delete Block(2240)", "Delete IfStatement(2241)", "Delete NullLiteral(2242)", "Delete ReturnStatement(2243)", "Delete Block(2244)", "Delete MethodDeclaration(2245)"]}}, {"package-info_cluster": {"actions": [{"root": "UPDATE from file hold in a container, and in the presence of the cajita supporting to file hold in a container, and in the presence of the caja support", "operations": ["UPD TextElement: file hold in a container, and in the presence of the cajita supporting from file hold in a container, and in the presence of the cajita supporting to file hold in a container, and in the presence of the caja support"]}, {"root": "UPDATE from <li>Load the container and/or cajita supporting code</li> to <li>Load the container and/or caja support code</li>", "operations": ["UPD TextElement: <li>Load the container and/or cajita supporting code</li> from <li>Load the container and/or cajita supporting code</li> to <li>Load the container and/or caja support code</li>"]}]}}, {"package-info_diff": {"operations": ["Update TextElement: file hold in a container, and in the presence of the cajita supporting(106) to file hold in a container, and in the presence of the caja support", "Update TextElement: <li>Load the container and/or cajita supporting code</li>(109) to <li>Load the container and/or caja support code</li>"]}}, {"HtmlToJsStage_cluster": {"actions": [{"root": "UPDATE from \"'use strict'; 'use cajita'; @stmt;\" to \"'use strict'; @stmt;\"", "operations": ["UPD StringLiteral: \"'use strict'; 'use cajita'; @stmt;\" from \"'use strict'; 'use cajita'; @stmt;\" to \"'use strict'; @stmt;\""]}]}}, {"HtmlToJsStage_diff": {"operations": ["Update StringLiteral: \"'use strict'; 'use cajita'; @stmt;\"(104) to \"'use strict'; @stmt;\""]}}, {"SafeHtmlMaker_cluster": {"actions": [{"root": "INS Block to MethodDeclaration at 5", "operations": ["INS Block to MethodDeclaration at 5"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.js.Directive", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.js.DirectivePrologue", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.js.Noop", "DEL ImportDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL PrimitiveType: boolean", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL BooleanLiteral: false", "DEL SimpleName: cajita"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: translated", "DEL SimpleName: cajita", "DEL Assignment: ="]}, {"root": "DEL Block", "operations": ["DEL Assignment: =", "DEL SimpleName: cajita", "DEL BooleanLiteral: false", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: handler", "DEL SimpleName: hasNonStrictFn", "DEL Block", "DEL MethodInvocation", "DEL IfStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleType: DirectivePrologue", "DEL SimpleType: Directive", "DEL QualifiedName: FilePosition.UNKNOWN", "DEL SimpleName: appendChild", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: Directive", "DEL MethodInvocation", "DEL QualifiedName: FilePosition.UNKNOWN", "DEL SimpleName: Lists", "DEL SimpleName: wrapper", "DEL SimpleName: DirectivePrologue", "DEL SimpleName: newArrayList", "DEL ClassInstanceCreation", "DEL StringLiteral: \"use cajita\""]}, {"root": "DEL Block", "operations": ["DEL SimpleName: wrapper", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleName: appendChild", "DEL IfStatement", "DEL SimpleName: cajita", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: Noop", "DEL MethodInvocation", "DEL SimpleType: Noop", "DEL QualifiedName: FilePosition.UNKNOWN"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL BooleanLiteral: true", "DEL Block", "DEL SimpleName: dp", "DEL Block", "DEL SimpleName: s0", "DEL SimpleName: n", "DEL SimpleType: DirectivePrologue", "DEL InstanceofExpression", "DEL CastExpression", "DEL SimpleName: body", "DEL SimpleName: children", "DEL IfStatement", "DEL SimpleName: s0", "DEL SimpleName: ParseTreeNode", "DEL MethodInvocation", "DEL SimpleName: getBody", "DEL EnhancedForStatement", "DEL ReturnStatement", "DEL SimpleName: body", "DEL Block", "DEL SimpleName: dp", "DEL MethodInvocation", "DEL SimpleName: Block", "DEL SimpleName: d", "DEL IfStatement", "DEL SimpleName: getDirectiveString", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleType: DirectivePrologue", "DEL MethodInvocation", "DEL EnhancedForStatement", "DEL SimpleName: n", "DEL SimpleName: get", "DEL Modifier: static", "DEL SimpleName: n", "DEL SimpleName: child", "DEL SimpleName: children", "DEL SingleVariableDeclaration", "DEL Block", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL SimpleType: ParseTreeNode", "DEL VariableDeclarationFragment", "DEL PrimitiveType: boolean", "DEL SimpleName: Statement", "DEL SimpleName: n", "DEL CastExpression", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleType: DirectivePrologue", "DEL BooleanLiteral: false", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: d", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleType: ParseTreeNode", "DEL IfStatement", "DEL InstanceofExpression", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: s0", "DEL MethodInvocation", "DEL SimpleName: child", "DEL SimpleType: FunctionConstructor", "DEL SimpleName: DirectivePrologue", "DEL SimpleName: isEmpty", "DEL VariableDeclarationStatement", "DEL SimpleName: ParseTreeNode", "DEL SimpleName: body", "DEL Block", "DEL Block", "DEL MethodInvocation", "DEL IfStatement", "DEL BooleanLiteral: false", "DEL Block", "DEL VariableDeclarationStatement", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: children", "DEL SimpleName: hasNonStrictFn", "DEL SimpleName: DirectivePrologue", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL SimpleName: children", "DEL StringLiteral: \"use cajita\"", "DEL PrefixExpression: !", "DEL SimpleType: FunctionConstructor", "DEL SimpleType: Directive", "DEL SimpleName: FunctionConstructor", "DEL SimpleName: DirectivePrologue", "DEL SimpleName: hasNonStrictFn", "DEL SimpleName: Directive", "DEL SimpleType: Block", "DEL SimpleType: Statement", "DEL SimpleName: FunctionConstructor"]}]}}, {"SafeHtmlMaker_diff": {"operations": ["Insert Block(2418) into MethodDeclaration(2419) at 5", "Move ExpressionStatement(2433) into Block(2418) at 0", "Move Block(2494) into IfStatement(2480) at 1", "Move VariableDeclarationStatement(2476) into Block(2469) at 0", "Move ExpressionStatement(2512) into Block(2469) at 1", "Move ExpressionStatement(2521) into Block(2469) at 2", "Delete QualifiedName: com.google.caja.parser.js.Directive(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: com.google.caja.parser.js.DirectivePrologue(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: com.google.caja.parser.js.Noop(36)", "Delete ImportDeclaration(37)", "Delete Modifier: private(359)", "Delete PrimitiveType: boolean(360)", "Delete SimpleName: cajita(361)", "Delete BooleanLiteral: false(362)", "Delete VariableDeclarationFragment(363)", "Delete FieldDeclaration(364)", "Delete SimpleName: cajita(2358)", "Delete SimpleName: translated(2359)", "Delete Assignment: =(2360)", "Delete ExpressionStatement(2361)", "Delete SimpleName: hasNonStrictFn(2434)", "Delete SimpleName: handler(2435)", "Delete MethodInvocation(2436)", "Delete SimpleName: cajita(2437)", "Delete BooleanLiteral: false(2438)", "Delete Assignment: =(2439)", "Delete ExpressionStatement(2440)", "Delete Block(2441)", "Delete IfStatement(2442)", "Delete Block(2443)", "Delete SimpleName: wrapper(2478)", "Delete SimpleName: appendChild(2479)", "Delete SimpleName: DirectivePrologue(2480)", "Delete SimpleType: DirectivePrologue(2481)", "Delete QualifiedName: FilePosition.UNKNOWN(2482)", "Delete SimpleName: Lists(2483)", "Delete SimpleName: newArrayList(2484)", "Delete SimpleName: Directive(2485)", "Delete SimpleType: Directive(2486)", "Delete QualifiedName: FilePosition.UNKNOWN(2487)", "Delete StringLiteral: \"use cajita\"(2488)", "Delete ClassInstanceCreation(2489)", "Delete MethodInvocation(2490)", "Delete ClassInstanceCreation(2491)", "Delete MethodInvocation(2492)", "Delete ExpressionStatement(2493)", "Delete SimpleName: cajita(2477)", "Delete SimpleName: wrapper(2495)", "Delete SimpleName: appendChild(2496)", "Delete SimpleName: Noop(2497)", "Delete SimpleType: Noop(2498)", "Delete QualifiedName: FilePosition.UNKNOWN(2499)", "Delete ClassInstanceCreation(2500)", "Delete MethodInvocation(2501)", "Delete ExpressionStatement(2502)", "Delete Block(2503)", "Delete IfStatement(2504)", "Delete Block(2522)", "Delete Modifier: private(2540)", "Delete Modifier: static(2541)", "Delete PrimitiveType: boolean(2542)", "Delete SimpleName: hasNonStrictFn(2543)", "Delete SimpleName: ParseTreeNode(2544)", "Delete SimpleType: ParseTreeNode(2545)", "Delete SimpleName: n(2546)", "Delete SingleVariableDeclaration(2547)", "Delete SimpleName: n(2548)", "Delete SimpleName: FunctionConstructor(2549)", "Delete SimpleType: FunctionConstructor(2550)", "Delete InstanceofExpression(2551)", "Delete SimpleName: Block(2552)", "Delete SimpleType: Block(2553)", "Delete SimpleName: body(2554)", "Delete SimpleName: FunctionConstructor(2555)", "Delete SimpleType: FunctionConstructor(2556)", "Delete SimpleName: n(2557)", "Delete CastExpression(2558)", "Delete ParenthesizedExpression(2559)", "Delete SimpleName: getBody(2560)", "Delete MethodInvocation(2561)", "Delete VariableDeclarationFragment(2562)", "Delete VariableDeclarationStatement(2563)", "Delete SimpleName: body(2564)", "Delete SimpleName: children(2565)", "Delete MethodInvocation(2566)", "Delete SimpleName: isEmpty(2567)", "Delete MethodInvocation(2568)", "Delete PrefixExpression: !(2569)", "Delete SimpleName: Statement(2570)", "Delete SimpleType: Statement(2571)", "Delete SimpleName: s0(2572)", "Delete SimpleName: body(2573)", "Delete SimpleName: children(2574)", "Delete MethodInvocation(2575)", "Delete SimpleName: get(2576)", "Delete NumberLiteral: 0(2577)", "Delete MethodInvocation(2578)", "Delete VariableDeclarationFragment(2579)", "Delete VariableDeclarationStatement(2580)", "Delete SimpleName: s0(2581)", "Delete SimpleName: DirectivePrologue(2582)", "Delete SimpleType: DirectivePrologue(2583)", "Delete InstanceofExpression(2584)", "Delete SimpleName: DirectivePrologue(2585)", "Delete SimpleType: DirectivePrologue(2586)", "Delete SimpleName: dp(2587)", "Delete SimpleName: DirectivePrologue(2588)", "Delete SimpleType: DirectivePrologue(2589)", "Delete SimpleName: s0(2590)", "Delete CastExpression(2591)", "Delete VariableDeclarationFragment(2592)", "Delete VariableDeclarationStatement(2593)", "Delete SimpleName: Directive(2594)", "Delete SimpleType: Directive(2595)", "Delete SimpleName: d(2596)", "Delete SingleVariableDeclaration(2597)", "Delete SimpleName: dp(2598)", "Delete SimpleName: children(2599)", "Delete MethodInvocation(2600)", "Delete StringLiteral: \"use cajita\"(2601)", "Delete SimpleName: equals(2602)", "Delete SimpleName: d(2603)", "Delete SimpleName: getDirectiveString(2604)", "Delete MethodInvocation(2605)", "Delete MethodInvocation(2606)", "Delete BooleanLiteral: false(2607)", "Delete ReturnStatement(2608)", "Delete Block(2609)", "Delete IfStatement(2610)", "Delete Block(2611)", "Delete EnhancedForStatement(2612)", "Delete Block(2613)", "Delete IfStatement(2614)", "Delete Block(2615)", "Delete IfStatement(2616)", "Delete BooleanLiteral: true(2617)", "Delete ReturnStatement(2618)", "Delete Block(2619)", "Delete SimpleName: ParseTreeNode(2620)", "Delete SimpleType: ParseTreeNode(2621)", "Delete SimpleName: child(2622)", "Delete SingleVariableDeclaration(2623)", "Delete SimpleName: n(2624)", "Delete SimpleName: children(2625)", "Delete MethodInvocation(2626)", "Delete SimpleName: hasNonStrictFn(2627)", "Delete SimpleName: child(2628)", "Delete MethodInvocation(2629)", "Delete BooleanLiteral: true(2630)", "Delete ReturnStatement(2631)", "Delete Block(2632)", "Delete IfStatement(2633)", "Delete Block(2634)", "Delete EnhancedForStatement(2635)", "Delete BooleanLiteral: false(2636)", "Delete ReturnStatement(2637)", "Delete Block(2638)", "Delete IfStatement(2639)", "Delete Block(2640)", "Delete MethodDeclaration(2641)"]}}, {"TemplateCompiler_cluster": {"actions": [{"root": "UPDATE from the CajitaRewriter. to the cajoler.", "operations": ["UPD TextElement: the CajitaRewriter. from the CajitaRewriter. to the cajoler."]}]}}, {"TemplateCompiler_diff": {"operations": ["Update TextElement: the CajitaRewriter.(69) to the cajoler."]}}], "commit_stats": [{"total_files": 58, "deleted_files": 23, "testing": "True", "maintenance": "True", "build": "False"}]}