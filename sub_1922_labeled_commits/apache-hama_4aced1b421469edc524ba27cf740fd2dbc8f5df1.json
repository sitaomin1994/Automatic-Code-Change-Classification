{"application": "apache-hama", "csha": "4aced1b421469edc524ba27cf740fd2dbc8f5df1", "files": [{"BSPJobClient_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS SimpleName: numOfSplits to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 3", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS IfStatement to Block at 4", "operations": ["INS Block to IfStatement at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS InfixExpression: || to IfStatement at 0", "INS IfStatement to Block at 4", "INS PrefixExpression: ! to InfixExpression: || at 1", "INS StringLiteral: \"hama.force.set.bsp.tasks\" to MethodInvocation at 2", "INS SimpleName: numOfSplits to InfixExpression: > at 0", "INS InfixExpression: > to InfixExpression: || at 0", "INS SimpleName: getBoolean to MethodInvocation at 1", "INS BooleanLiteral: false to MethodInvocation at 3", "INS SimpleName: configured to InfixExpression: > at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS SimpleName: numOfSplits to MethodInvocation at 2", "operations": ["INS SimpleName: numOfSplits to MethodInvocation at 2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.io.MapWritable"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hama.bsp.message.MessageManager"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.hama.bsp.message.OutgoingMessageManager", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hama.bsp.message.OutgoingPOJOMessageBundle"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hama.bsp.message.queue.MessageQueue"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hama.bsp.message.queue.SortedMemoryQueue"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: IOException", "DEL SimpleName: inputPath", "DEL ClassInstanceCreation", "DEL SimpleName: job", "DEL MethodInvocation", "DEL SimpleName: SortedMemoryQueue", "DEL StringLiteral: \"true\"", "DEL SimpleName: numSplits", "DEL IfStatement", "DEL SimpleName: job", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: e", "DEL SimpleName: setInt", "DEL QualifiedName: Constants.RUNTIME_PARTITIONING_CLASS", "DEL SimpleType: NonSplitSequenceFileInputFormat", "DEL ExpressionStatement", "DEL SimpleName: job", "DEL SingleVariableDeclaration", "DEL SimpleName: getConfiguration", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: MessageQueue", "DEL SimpleName: getClass", "DEL SimpleName: setInputKeyClass", "DEL SimpleName: getInputFormat", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: splits", "DEL IfStatement", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: getConfiguration", "DEL SimpleName: getInputKeyClass", "DEL NumberLiteral: 0", "DEL Block", "DEL SimpleType: BSPJob", "DEL SimpleName: MapWritable", "DEL SimpleName: set", "DEL SimpleType: HamaConfiguration", "DEL BooleanLiteral: true", "DEL TypeLiteral", "DEL StringLiteral: \"Runtime partitioning job for \"", "DEL QualifiedName: splits.length", "DEL MethodInvocation", "DEL SimpleName: error", "DEL SimpleName: job", "DEL SimpleName: partitioningJob", "DEL QualifiedName: Constants.RUNTIME_DESIRED_PEERS_COUNT", "DEL SimpleName: getConfiguration", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: exists", "DEL StringLiteral: \"bsp.peers.num\"", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: e", "DEL SimpleName: partitioningJob", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL SimpleName: HamaConfiguration", "DEL QualifiedName: MessageManager.RECEIVE_QUEUE_TYPE_CLASS", "DEL VariableDeclarationStatement", "DEL SimpleName: partitioningJob", "DEL QualifiedName: Constants.JOB_INPUT_DIR", "DEL SimpleName: setClass", "DEL SimpleName: LOG", "DEL ReturnStatement", "DEL SimpleName: setInputPath", "DEL PrimitiveType: int", "DEL SimpleName: InputSplit", "DEL SimpleName: partitioningJob", "DEL TypeLiteral", "DEL QualifiedName: MessageManager.OUTGOING_MESSAGE_MANAGER_CLASS", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: setBspClass", "DEL SimpleName: getConfiguration", "DEL TryStatement", "DEL SingleVariableDeclaration", "DEL StringLiteral: \" enable = \"", "DEL SimpleName: partitioningJob", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: setJobName", "DEL Block", "DEL StringLiteral: \"Error partitioning the input path.\"", "DEL SimpleName: numTasks", "DEL MethodInvocation", "DEL SimpleName: job", "DEL MethodInvocation", "DEL SimpleName: job", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: BSPJob", "DEL IfStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: job", "DEL Block", "DEL SimpleName: partitionDir", "DEL MethodInvocation", "DEL SimpleName: e", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleType: BSPJob", "DEL IfStatement", "DEL SimpleName: partitioningJob", "DEL SimpleName: Path", "DEL ClassInstanceCreation", "DEL SimpleName: partitioningJob", "DEL SimpleName: partitioningJob", "DEL SimpleName: getInt", "DEL SimpleType: Path", "DEL SimpleName: partitionDir", "DEL SimpleName: numSplits", "DEL QualifiedName: Constants.JOB_INPUT_DIR", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: ClassNotFoundException", "DEL QualifiedName: Constants.RUNTIME_PARTITIONING_DIR", "DEL SimpleName: numTasks", "DEL SimpleName: getConfiguration", "DEL TypeLiteral", "DEL SimpleName: get", "DEL SimpleName: isPartitioned", "DEL SimpleName: fs", "DEL MethodInvocation", "DEL SimpleName: debug", "DEL MethodInvocation", "DEL SimpleName: BSPJob", "DEL ExpressionStatement", "DEL SimpleName: error", "DEL MethodInvocation", "DEL SimpleType: IOException", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL CatchClause", "DEL NullLiteral", "DEL SimpleName: NonSplitSequenceFileInputFormat", "DEL SimpleName: getInputValueClass", "DEL SimpleName: InterruptedException", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: setInputPath", "DEL SimpleType: SequenceFileOutputFormat", "DEL SimpleName: getJobID", "DEL MethodInvocation", "DEL SimpleName: partitioningJob", "DEL TypeLiteral", "DEL SimpleName: partitioningJob", "DEL SimpleName: job", "DEL BooleanLiteral: true", "DEL StringLiteral: \" numSplits = \"", "DEL MethodInvocation", "DEL SimpleName: partitionDir", "DEL SimpleName: String", "DEL QualifiedName: Constants.RUNTIME_PARTITIONING_CLASS", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL StringLiteral: \"bsp.partitioning.runner.job\"", "DEL SimpleName: setBoolean", "DEL SimpleName: getInputValueClass", "DEL InfixExpression: +", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: setBoolean", "DEL SimpleType: OutgoingPOJOMessageBundle", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL ClassInstanceCreation", "DEL SimpleName: get", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: get", "DEL SimpleName: partitionDir", "DEL SimpleName: getJobName", "DEL SimpleName: error", "DEL InfixExpression: !=", "DEL Assignment: =", "DEL SimpleName: conf", "DEL QualifiedName: Constants.ENABLE_RUNTIME_PARTITIONING", "DEL SimpleName: job", "DEL SimpleName: get", "DEL TypeLiteral", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL IfStatement", "DEL Block", "DEL SimpleName: BSPJob", "DEL SimpleName: isPartitioned", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL SimpleName: setOutputKeyClass", "DEL SimpleName: job", "DEL SimpleName: numTasks", "DEL SimpleType: SortedMemoryQueue", "DEL SimpleName: conf", "DEL SimpleName: job", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"bsp.partitioning.runner.job\"", "DEL SimpleName: SequenceFileOutputFormat", "DEL SimpleName: conf", "DEL IfStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: InputSplit", "DEL StringLiteral: \"input.has.partitioned\"", "DEL StringLiteral: \"partitioningJob input: \"", "DEL SimpleName: PartitioningRunner", "DEL SimpleName: set", "DEL SimpleName: HamaConfiguration", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: partitioningJob", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: isPartitioned", "DEL NullLiteral", "DEL SimpleName: setInputFormat", "DEL StringLiteral: \"Interrupted partitioning run-time.\"", "DEL SimpleType: ClassNotFoundException", "DEL BooleanLiteral: true", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleName: job", "DEL SimpleName: setInputFormat", "DEL Assignment: =", "DEL SimpleName: LOG", "DEL SimpleName: get", "DEL SimpleName: getInputKeyClass", "DEL SimpleType: Path", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: job", "DEL SimpleName: job", "DEL QualifiedName: Constants.ENABLE_RUNTIME_PARTITIONING", "DEL SimpleName: get", "DEL SimpleName: isDebugEnabled", "DEL SimpleName: set", "DEL Block", "DEL InfixExpression: +", "DEL QualifiedName: Constants.RUNTIME_PARTITIONING_DIR", "DEL SimpleName: job", "DEL ExpressionStatement", "DEL SimpleName: job", "DEL MethodInvocation", "DEL SimpleName: partitioningJob", "DEL SimpleType: MapWritable", "DEL QualifiedName: Constants.RUNTIME_PARTITIONING_CLASS", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: partitionDir", "DEL SimpleName: getConfiguration", "DEL SimpleName: job", "DEL ExpressionStatement", "DEL SimpleName: conf", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleType: OutgoingMessageManager", "DEL SimpleName: waitForCompletion", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: job", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL SimpleName: inputPath", "DEL VariableDeclarationStatement", "DEL ThrowStatement", "DEL ArrayType: InputSplit[]", "DEL ExpressionStatement", "DEL SimpleName: setOutputPath", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: getBoolean", "DEL SimpleName: BSPJob", "DEL QualifiedName: Constants.ENABLE_RUNTIME_PARTITIONING", "DEL Block", "DEL StringLiteral: \"Runtime partition failed for the job.\"", "DEL InfixExpression: &&", "DEL ExpressionStatement", "DEL SimpleName: setOutputValueClass", "DEL QualifiedName: Constants.RUNTIME_PARTITIONING_CLASS", "DEL SimpleName: partitioningJob", "DEL SimpleName: numSplits", "DEL MethodInvocation", "DEL SimpleName: OutgoingMessageManager", "DEL SimpleName: MessageQueue", "DEL SimpleName: get", "DEL ExpressionStatement", "DEL SimpleType: BSPJob", "DEL SimpleName: getBoolean", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: IOException", "DEL StringLiteral: \"/tmp/hama-parts/\"", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TypeLiteral", "DEL SimpleName: conf", "DEL SimpleType: String", "DEL MethodInvocation", "DEL StringLiteral: \"/\"", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: get", "DEL BooleanLiteral: false", "DEL SimpleName: partition", "DEL SimpleType: HamaConfiguration", "DEL SimpleName: partitioningJob", "DEL SingleVariableDeclaration", "DEL SimpleName: maxTasks", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL SimpleName: getConfiguration", "DEL SimpleName: get", "DEL SimpleName: partitioningJob", "DEL SimpleName: LOG", "DEL Block", "DEL CatchClause", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: setMessageClass", "DEL Dimension", "DEL SimpleName: getConfiguration", "DEL ExpressionStatement", "DEL SimpleName: e", "DEL SimpleName: Path", "DEL MethodInvocation", "DEL SimpleType: Path", "DEL MethodInvocation", "DEL StringLiteral: \" class = \"", "DEL StringLiteral: \" numTasks = \"", "DEL QualifiedName: Constants.RUNTIME_PARTITIONING_DIR", "DEL SimpleName: getConfiguration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: getConfiguration", "DEL SimpleName: job", "DEL QualifiedName: Constants.RUNTIME_PARTITIONING_DIR", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: partitioningJob", "DEL SimpleName: job", "DEL SimpleName: conf", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: setOutputFormat", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: debug", "DEL SimpleName: LOG", "DEL SimpleName: Path", "DEL SimpleName: OutgoingPOJOMessageBundle", "DEL SimpleName: partitioningJob", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: setClass", "DEL Modifier: protected", "DEL InfixExpression: !=", "DEL Block", "DEL SimpleName: delete", "DEL SimpleName: job", "DEL Block", "DEL TypeLiteral", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: LOG", "DEL SimpleName: fs", "DEL SimpleName: partitioningJob", "DEL ExpressionStatement", "DEL SimpleType: IOException", "DEL SimpleType: PartitioningRunner", "DEL SimpleName: job", "DEL MethodInvocation", "DEL SimpleName: getConfiguration", "DEL SimpleName: setInputValueClass", "DEL Block", "DEL InfixExpression: !=", "DEL SimpleName: LOG", "DEL SimpleName: BSPJob", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: getConfiguration", "DEL SimpleName: numTasks", "DEL QualifiedName: Constants.RUNTIME_PARTITIONING_DIR", "DEL TypeLiteral", "DEL MethodInvocation", "DEL SimpleType: InterruptedException", "DEL ExpressionStatement", "DEL StringLiteral: \"Class not found error partitioning run-time.\"", "DEL SimpleName: job", "DEL SimpleName: numTasks", "DEL SimpleName: job", "DEL SimpleName: get", "DEL InfixExpression: !=", "DEL MethodInvocation"]}]}}, {"BSPJobClient_diff": {"operations": ["Insert VariableDeclarationStatement(1108) into Block(1136) at 3", "Insert IfStatement(1127) into Block(1136) at 4", "Insert PrimitiveType: int(1099) into VariableDeclarationStatement(1108) at 0", "Insert VariableDeclarationFragment(1107) into VariableDeclarationStatement(1108) at 1", "Insert InfixExpression: ||(1120) into IfStatement(1127) at 0", "Insert Block(1126) into IfStatement(1127) at 1", "Insert SimpleName: numOfSplits(1100) into VariableDeclarationFragment(1107) at 0", "Move MethodInvocation(1118) into VariableDeclarationFragment(1107) at 1", "Insert InfixExpression: >(1111) into InfixExpression: ||(1120) at 0", "Insert PrefixExpression: !(1119) into InfixExpression: ||(1120) at 1", "Move ExpressionStatement(1120) into Block(1126) at 0", "Insert SimpleName: numOfSplits(1109) into InfixExpression: >(1111) at 0", "Insert SimpleName: configured(1110) into InfixExpression: >(1111) at 1", "Insert MethodInvocation(1118) into PrefixExpression: !(1119) at 0", "Move MethodInvocation(1290) into MethodInvocation(1118) at 0", "Insert SimpleName: getBoolean(1115) into MethodInvocation(1118) at 1", "Insert StringLiteral: \"hama.force.set.bsp.tasks\"(1116) into MethodInvocation(1118) at 2", "Insert BooleanLiteral: false(1117) into MethodInvocation(1118) at 3", "Insert SimpleName: numOfSplits(1123) into MethodInvocation(1124) at 2", "Delete QualifiedName: org.apache.hadoop.io.MapWritable(71)", "Delete ImportDeclaration(72)", "Delete QualifiedName: org.apache.hama.bsp.message.MessageManager(97)", "Delete ImportDeclaration(98)", "Delete QualifiedName: org.apache.hama.bsp.message.OutgoingMessageManager(99)", "Delete ImportDeclaration(100)", "Delete QualifiedName: org.apache.hama.bsp.message.OutgoingPOJOMessageBundle(101)", "Delete ImportDeclaration(102)", "Delete QualifiedName: org.apache.hama.bsp.message.queue.MessageQueue(103)", "Delete ImportDeclaration(104)", "Delete QualifiedName: org.apache.hama.bsp.message.queue.SortedMemoryQueue(105)", "Delete ImportDeclaration(106)", "Delete Modifier: protected(1266)", "Delete SimpleName: BSPJob(1267)", "Delete SimpleType: BSPJob(1268)", "Delete SimpleName: partition(1269)", "Delete SimpleName: BSPJob(1270)", "Delete SimpleType: BSPJob(1271)", "Delete SimpleName: job(1272)", "Delete SingleVariableDeclaration(1273)", "Delete SimpleName: InputSplit(1274)", "Delete SimpleType: InputSplit(1275)", "Delete Dimension(1276)", "Delete ArrayType: InputSplit[](1277)", "Delete SimpleName: splits(1278)", "Delete SingleVariableDeclaration(1279)", "Delete PrimitiveType: int(1280)", "Delete SimpleName: maxTasks(1281)", "Delete SingleVariableDeclaration(1282)", "Delete SimpleName: IOException(1283)", "Delete SimpleType: IOException(1284)", "Delete SimpleName: String(1285)", "Delete SimpleType: String(1286)", "Delete SimpleName: inputPath(1287)", "Delete SimpleName: get(1291)", "Delete QualifiedName: Constants.JOB_INPUT_DIR(1292)", "Delete MethodInvocation(1293)", "Delete VariableDeclarationFragment(1294)", "Delete VariableDeclarationStatement(1295)", "Delete SimpleName: Path(1296)", "Delete SimpleType: Path(1297)", "Delete SimpleName: partitionDir(1298)", "Delete SimpleName: Path(1299)", "Delete SimpleType: Path(1300)", "Delete StringLiteral: \"/tmp/hama-parts/\"(1301)", "Delete SimpleName: job(1302)", "Delete SimpleName: getJobID(1303)", "Delete MethodInvocation(1304)", "Delete StringLiteral: \"/\"(1305)", "Delete InfixExpression: +(1306)", "Delete ClassInstanceCreation(1307)", "Delete VariableDeclarationFragment(1308)", "Delete VariableDeclarationStatement(1309)", "Delete SimpleName: fs(1310)", "Delete SimpleName: exists(1311)", "Delete SimpleName: partitionDir(1312)", "Delete MethodInvocation(1313)", "Delete SimpleName: fs(1314)", "Delete SimpleName: delete(1315)", "Delete SimpleName: partitionDir(1316)", "Delete BooleanLiteral: true(1317)", "Delete MethodInvocation(1318)", "Delete ExpressionStatement(1319)", "Delete Block(1320)", "Delete IfStatement(1321)", "Delete SimpleName: job(1322)", "Delete SimpleName: get(1323)", "Delete StringLiteral: \"bsp.partitioning.runner.job\"(1324)", "Delete MethodInvocation(1325)", "Delete NullLiteral(1326)", "Delete InfixExpression: !=(1327)", "Delete SimpleName: job(1328)", "Delete ReturnStatement(1329)", "Delete Block(1330)", "Delete IfStatement(1331)", "Delete SimpleName: inputPath(1332)", "Delete NullLiteral(1333)", "Delete InfixExpression: !=(1334)", "Delete PrimitiveType: int(1335)", "Delete SimpleName: numSplits(1336)", "Delete QualifiedName: splits.length(1337)", "Delete VariableDeclarationFragment(1338)", "Delete VariableDeclarationStatement(1339)", "Delete PrimitiveType: int(1340)", "Delete SimpleName: numTasks(1341)", "Delete SimpleName: job(1342)", "Delete SimpleName: getConfiguration(1343)", "Delete MethodInvocation(1344)", "Delete SimpleName: getInt(1345)", "Delete StringLiteral: \"bsp.peers.num\"(1346)", "Delete NumberLiteral: 0(1347)", "Delete MethodInvocation(1348)", "Delete VariableDeclarationFragment(1349)", "Delete VariableDeclarationStatement(1350)", "Delete SimpleName: LOG(1351)", "Delete SimpleName: isDebugEnabled(1352)", "Delete MethodInvocation(1353)", "Delete SimpleName: LOG(1354)", "Delete SimpleName: debug(1355)", "Delete StringLiteral: \" numTasks = \"(1356)", "Delete SimpleName: numTasks(1357)", "Delete StringLiteral: \" numSplits = \"(1358)", "Delete SimpleName: numSplits(1359)", "Delete StringLiteral: \" enable = \"(1360)", "Delete SimpleName: job(1361)", "Delete SimpleName: getConfiguration(1362)", "Delete MethodInvocation(1363)", "Delete SimpleName: getBoolean(1364)", "Delete QualifiedName: Constants.ENABLE_RUNTIME_PARTITIONING(1365)", "Delete BooleanLiteral: false(1366)", "Delete MethodInvocation(1367)", "Delete StringLiteral: \" class = \"(1368)", "Delete SimpleName: job(1369)", "Delete SimpleName: getConfiguration(1370)", "Delete MethodInvocation(1371)", "Delete SimpleName: get(1372)", "Delete QualifiedName: Constants.RUNTIME_PARTITIONING_CLASS(1373)", "Delete MethodInvocation(1374)", "Delete InfixExpression: +(1375)", "Delete ParenthesizedExpression(1376)", "Delete InfixExpression: +(1377)", "Delete MethodInvocation(1378)", "Delete ExpressionStatement(1379)", "Delete Block(1380)", "Delete IfStatement(1381)", "Delete SimpleName: numTasks(1382)", "Delete NumberLiteral: 0(1383)", "Delete InfixExpression: ==(1384)", "Delete SimpleName: numTasks(1385)", "Delete SimpleName: numSplits(1386)", "Delete Assignment: =(1387)", "Delete ExpressionStatement(1388)", "Delete Block(1389)", "Delete IfStatement(1390)", "Delete SimpleName: job(1391)", "Delete SimpleName: getConfiguration(1392)", "Delete MethodInvocation(1393)", "Delete SimpleName: getBoolean(1394)", "Delete QualifiedName: Constants.ENABLE_RUNTIME_PARTITIONING(1395)", "Delete BooleanLiteral: false(1396)", "Delete MethodInvocation(1397)", "Delete SimpleName: job(1398)", "Delete SimpleName: getConfiguration(1399)", "Delete MethodInvocation(1400)", "Delete SimpleName: get(1401)", "Delete QualifiedName: Constants.RUNTIME_PARTITIONING_CLASS(1402)", "Delete MethodInvocation(1403)", "Delete NullLiteral(1404)", "Delete InfixExpression: !=(1405)", "Delete InfixExpression: &&(1406)", "Delete SimpleName: HamaConfiguration(1407)", "Delete SimpleType: HamaConfiguration(1408)", "Delete SimpleName: conf(1409)", "Delete SimpleName: HamaConfiguration(1410)", "Delete SimpleType: HamaConfiguration(1411)", "Delete SimpleName: job(1412)", "Delete SimpleName: getConfiguration(1413)", "Delete MethodInvocation(1414)", "Delete ClassInstanceCreation(1415)", "Delete VariableDeclarationFragment(1416)", "Delete VariableDeclarationStatement(1417)", "Delete SimpleName: conf(1418)", "Delete SimpleName: setInt(1419)", "Delete QualifiedName: Constants.RUNTIME_DESIRED_PEERS_COUNT(1420)", "Delete SimpleName: numTasks(1421)", "Delete MethodInvocation(1422)", "Delete ExpressionStatement(1423)", "Delete SimpleName: job(1424)", "Delete SimpleName: getConfiguration(1425)", "Delete MethodInvocation(1426)", "Delete SimpleName: get(1427)", "Delete QualifiedName: Constants.RUNTIME_PARTITIONING_DIR(1428)", "Delete MethodInvocation(1429)", "Delete NullLiteral(1430)", "Delete InfixExpression: !=(1431)", "Delete SimpleName: conf(1432)", "Delete SimpleName: set(1433)", "Delete QualifiedName: Constants.RUNTIME_PARTITIONING_DIR(1434)", "Delete SimpleName: job(1435)", "Delete SimpleName: getConfiguration(1436)", "Delete MethodInvocation(1437)", "Delete SimpleName: get(1438)", "Delete QualifiedName: Constants.RUNTIME_PARTITIONING_DIR(1439)", "Delete MethodInvocation(1440)", "Delete MethodInvocation(1441)", "Delete ExpressionStatement(1442)", "Delete Block(1443)", "Delete IfStatement(1444)", "Delete SimpleName: conf(1445)", "Delete SimpleName: set(1446)", "Delete QualifiedName: Constants.RUNTIME_PARTITIONING_CLASS(1447)", "Delete SimpleName: job(1448)", "Delete SimpleName: get(1449)", "Delete QualifiedName: Constants.RUNTIME_PARTITIONING_CLASS(1450)", "Delete MethodInvocation(1451)", "Delete MethodInvocation(1452)", "Delete ExpressionStatement(1453)", "Delete SimpleName: BSPJob(1454)", "Delete SimpleType: BSPJob(1455)", "Delete SimpleName: partitioningJob(1456)", "Delete SimpleName: BSPJob(1457)", "Delete SimpleType: BSPJob(1458)", "Delete SimpleName: conf(1459)", "Delete ClassInstanceCreation(1460)", "Delete VariableDeclarationFragment(1461)", "Delete VariableDeclarationStatement(1462)", "Delete SimpleName: partitioningJob(1463)", "Delete SimpleName: setJobName(1464)", "Delete StringLiteral: \"Runtime partitioning job for \"(1465)", "Delete SimpleName: partitioningJob(1466)", "Delete SimpleName: getJobName(1467)", "Delete MethodInvocation(1468)", "Delete InfixExpression: +(1469)", "Delete MethodInvocation(1470)", "Delete ExpressionStatement(1471)", "Delete SimpleName: LOG(1472)", "Delete SimpleName: debug(1473)", "Delete StringLiteral: \"partitioningJob input: \"(1474)", "Delete SimpleName: partitioningJob(1475)", "Delete SimpleName: get(1476)", "Delete QualifiedName: Constants.JOB_INPUT_DIR(1477)", "Delete MethodInvocation(1478)", "Delete InfixExpression: +(1479)", "Delete MethodInvocation(1480)", "Delete ExpressionStatement(1481)", "Delete SimpleName: partitioningJob(1482)", "Delete SimpleName: getConfiguration(1483)", "Delete MethodInvocation(1484)", "Delete SimpleName: setClass(1485)", "Delete QualifiedName: MessageManager.OUTGOING_MESSAGE_MANAGER_CLASS(1486)", "Delete SimpleName: OutgoingPOJOMessageBundle(1487)", "Delete SimpleType: OutgoingPOJOMessageBundle(1488)", "Delete TypeLiteral(1489)", "Delete SimpleName: OutgoingMessageManager(1490)", "Delete SimpleType: OutgoingMessageManager(1491)", "Delete TypeLiteral(1492)", "Delete MethodInvocation(1493)", "Delete ExpressionStatement(1494)", "Delete SimpleName: partitioningJob(1495)", "Delete SimpleName: getConfiguration(1496)", "Delete MethodInvocation(1497)", "Delete SimpleName: setClass(1498)", "Delete QualifiedName: MessageManager.RECEIVE_QUEUE_TYPE_CLASS(1499)", "Delete SimpleName: SortedMemoryQueue(1500)", "Delete SimpleType: SortedMemoryQueue(1501)", "Delete TypeLiteral(1502)", "Delete SimpleName: MessageQueue(1503)", "Delete SimpleType: MessageQueue(1504)", "Delete TypeLiteral(1505)", "Delete MethodInvocation(1506)", "Delete ExpressionStatement(1507)", "Delete SimpleName: partitioningJob(1508)", "Delete SimpleName: setInputFormat(1509)", "Delete SimpleName: job(1510)", "Delete SimpleName: getInputFormat(1511)", "Delete MethodInvocation(1512)", "Delete SimpleName: getClass(1513)", "Delete MethodInvocation(1514)", "Delete MethodInvocation(1515)", "Delete ExpressionStatement(1516)", "Delete SimpleName: partitioningJob(1517)", "Delete SimpleName: setInputKeyClass(1518)", "Delete SimpleName: job(1519)", "Delete SimpleName: getInputKeyClass(1520)", "Delete MethodInvocation(1521)", "Delete MethodInvocation(1522)", "Delete ExpressionStatement(1523)", "Delete SimpleName: partitioningJob(1524)", "Delete SimpleName: setInputValueClass(1525)", "Delete SimpleName: job(1526)", "Delete SimpleName: getInputValueClass(1527)", "Delete MethodInvocation(1528)", "Delete MethodInvocation(1529)", "Delete ExpressionStatement(1530)", "Delete SimpleName: partitioningJob(1531)", "Delete SimpleName: setOutputFormat(1532)", "Delete SimpleName: SequenceFileOutputFormat(1533)", "Delete SimpleType: SequenceFileOutputFormat(1534)", "Delete TypeLiteral(1535)", "Delete MethodInvocation(1536)", "Delete ExpressionStatement(1537)", "Delete SimpleName: partitioningJob(1538)", "Delete SimpleName: setOutputKeyClass(1539)", "Delete SimpleName: job(1540)", "Delete SimpleName: getInputKeyClass(1541)", "Delete MethodInvocation(1542)", "Delete MethodInvocation(1543)", "Delete ExpressionStatement(1544)", "Delete SimpleName: partitioningJob(1545)", "Delete SimpleName: setOutputValueClass(1546)", "Delete SimpleName: job(1547)", "Delete SimpleName: getInputValueClass(1548)", "Delete MethodInvocation(1549)", "Delete MethodInvocation(1550)", "Delete ExpressionStatement(1551)", "Delete SimpleName: partitioningJob(1552)", "Delete SimpleName: setBspClass(1553)", "Delete SimpleName: PartitioningRunner(1554)", "Delete SimpleType: PartitioningRunner(1555)", "Delete TypeLiteral(1556)", "Delete MethodInvocation(1557)", "Delete ExpressionStatement(1558)", "Delete SimpleName: partitioningJob(1559)", "Delete SimpleName: setMessageClass(1560)", "Delete SimpleName: MapWritable(1561)", "Delete SimpleType: MapWritable(1562)", "Delete TypeLiteral(1563)", "Delete MethodInvocation(1564)", "Delete ExpressionStatement(1565)", "Delete SimpleName: partitioningJob(1566)", "Delete SimpleName: set(1567)", "Delete StringLiteral: \"bsp.partitioning.runner.job\"(1568)", "Delete StringLiteral: \"true\"(1569)", "Delete MethodInvocation(1570)", "Delete ExpressionStatement(1571)", "Delete SimpleName: partitioningJob(1572)", "Delete SimpleName: getConfiguration(1573)", "Delete MethodInvocation(1574)", "Delete SimpleName: setBoolean(1575)", "Delete QualifiedName: Constants.ENABLE_RUNTIME_PARTITIONING(1576)", "Delete BooleanLiteral: false(1577)", "Delete MethodInvocation(1578)", "Delete ExpressionStatement(1579)", "Delete SimpleName: partitioningJob(1580)", "Delete SimpleName: setOutputPath(1581)", "Delete SimpleName: partitionDir(1582)", "Delete MethodInvocation(1583)", "Delete ExpressionStatement(1584)", "Delete PrimitiveType: boolean(1585)", "Delete SimpleName: isPartitioned(1586)", "Delete BooleanLiteral: false(1587)", "Delete VariableDeclarationFragment(1588)", "Delete VariableDeclarationStatement(1589)", "Delete SimpleName: isPartitioned(1590)", "Delete SimpleName: partitioningJob(1591)", "Delete SimpleName: waitForCompletion(1592)", "Delete BooleanLiteral: true(1593)", "Delete MethodInvocation(1594)", "Delete Assignment: =(1595)", "Delete ExpressionStatement(1596)", "Delete Block(1597)", "Delete SimpleName: InterruptedException(1598)", "Delete SimpleType: InterruptedException(1599)", "Delete SimpleName: e(1600)", "Delete SingleVariableDeclaration(1601)", "Delete SimpleName: LOG(1602)", "Delete SimpleName: error(1603)", "Delete StringLiteral: \"Interrupted partitioning run-time.\"(1604)", "Delete SimpleName: e(1605)", "Delete MethodInvocation(1606)", "Delete ExpressionStatement(1607)", "Delete Block(1608)", "Delete CatchClause(1609)", "Delete SimpleName: ClassNotFoundException(1610)", "Delete SimpleType: ClassNotFoundException(1611)", "Delete SimpleName: e(1612)", "Delete SingleVariableDeclaration(1613)", "Delete SimpleName: LOG(1614)", "Delete SimpleName: error(1615)", "Delete StringLiteral: \"Class not found error partitioning run-time.\"(1616)", "Delete SimpleName: e(1617)", "Delete MethodInvocation(1618)", "Delete ExpressionStatement(1619)", "Delete Block(1620)", "Delete CatchClause(1621)", "Delete TryStatement(1622)", "Delete SimpleName: isPartitioned(1623)", "Delete SimpleName: job(1624)", "Delete SimpleName: getConfiguration(1625)", "Delete MethodInvocation(1626)", "Delete SimpleName: get(1627)", "Delete QualifiedName: Constants.RUNTIME_PARTITIONING_DIR(1628)", "Delete MethodInvocation(1629)", "Delete NullLiteral(1630)", "Delete InfixExpression: !=(1631)", "Delete SimpleName: job(1632)", "Delete SimpleName: setInputPath(1633)", "Delete SimpleName: Path(1634)", "Delete SimpleType: Path(1635)", "Delete SimpleName: conf(1636)", "Delete SimpleName: get(1637)", "Delete QualifiedName: Constants.RUNTIME_PARTITIONING_DIR(1638)", "Delete MethodInvocation(1639)", "Delete ClassInstanceCreation(1640)", "Delete MethodInvocation(1641)", "Delete ExpressionStatement(1642)", "Delete Block(1643)", "Delete SimpleName: job(1644)", "Delete SimpleName: setInputPath(1645)", "Delete SimpleName: partitionDir(1646)", "Delete MethodInvocation(1647)", "Delete ExpressionStatement(1648)", "Delete Block(1649)", "Delete IfStatement(1650)", "Delete SimpleName: job(1651)", "Delete SimpleName: setBoolean(1652)", "Delete StringLiteral: \"input.has.partitioned\"(1653)", "Delete BooleanLiteral: true(1654)", "Delete MethodInvocation(1655)", "Delete ExpressionStatement(1656)", "Delete SimpleName: job(1657)", "Delete SimpleName: setInputFormat(1658)", "Delete SimpleName: NonSplitSequenceFileInputFormat(1659)", "Delete SimpleType: NonSplitSequenceFileInputFormat(1660)", "Delete TypeLiteral(1661)", "Delete MethodInvocation(1662)", "Delete ExpressionStatement(1663)", "Delete Block(1664)", "Delete SimpleName: LOG(1665)", "Delete SimpleName: error(1666)", "Delete StringLiteral: \"Error partitioning the input path.\"(1667)", "Delete MethodInvocation(1668)", "Delete ExpressionStatement(1669)", "Delete SimpleName: IOException(1670)", "Delete SimpleType: IOException(1671)", "Delete StringLiteral: \"Runtime partition failed for the job.\"(1672)", "Delete ClassInstanceCreation(1673)", "Delete ThrowStatement(1674)", "Delete Block(1675)", "Delete IfStatement(1676)", "Delete Block(1677)", "Delete IfStatement(1678)", "Delete Block(1679)", "Delete IfStatement(1680)", "Delete SimpleName: job(1681)", "Delete ReturnStatement(1682)", "Delete Block(1683)", "Delete MethodDeclaration(1684)"]}}, {"BSPPeerImpl_cluster": {"actions": [{"root": "INS IfStatement to Block at 0", "operations": ["INS IfStatement to Block at 0", "INS SimpleName: in to InfixExpression: != at 0", "INS InfixExpression: != to IfStatement at 0", "INS ReturnStatement to IfStatement at 2", "INS BooleanLiteral: false to ReturnStatement at 0", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS NullLiteral to InfixExpression: == at 1", "INS ReturnStatement to IfStatement at 1", "INS InfixExpression: == to IfStatement at 0", "INS IfStatement to Block at 0", "INS SimpleName: split to InfixExpression: == at 0", "INS NullLiteral to ReturnStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV ReturnStatement to IfStatement at 1"]}]}}, {"BSPPeerImpl_diff": {"operations": ["Insert IfStatement(2211) into Block(2212) at 0", "Insert IfStatement(2233) into Block(2276) at 0", "Insert InfixExpression: !=(2202) into IfStatement(2211) at 0", "Move ReturnStatement(2205) into IfStatement(2211) at 1", "Insert ReturnStatement(2210) into IfStatement(2211) at 2", "Insert InfixExpression: ==(2230) into IfStatement(2233) at 0", "Insert ReturnStatement(2232) into IfStatement(2233) at 1", "Insert SimpleName: in(2200) into InfixExpression: !=(2202) at 0", "Insert NullLiteral(2201) into InfixExpression: !=(2202) at 1", "Insert BooleanLiteral: false(2209) into ReturnStatement(2210) at 0", "Insert SimpleName: split(2228) into InfixExpression: ==(2230) at 0", "Insert NullLiteral(2229) into InfixExpression: ==(2230) at 1", "Insert NullLiteral(2231) into ReturnStatement(2232) at 0"]}}, {"JobInProgress_cluster": {"actions": [{"root": "UPDATE from Gets the task for the first <code>TaskInProgress</code> that is not already running to Gets the task for the first <code>TaskInProgress</code> that is not already", "operations": ["UPD TextElement: Gets the task for the first <code>TaskInProgress</code> that is not already running from Gets the task for the first <code>TaskInProgress</code> that is not already running to Gets the task for the first <code>TaskInProgress</code> that is not already"]}, {"root": "INS TextElement: running to TagElement at 1", "operations": ["INS TextElement: running to TagElement at 1"]}, {"root": "INS ForStatement to Block at 7", "operations": ["INS Block to ForStatement at 3", "INS ThisExpression to ClassInstanceCreation at 5", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to MethodInvocation at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS PostfixExpression: ++ to ForStatement at 2", "INS FieldAccess to ClassInstanceCreation at 4", "INS SimpleName: i to ArrayAccess at 1", "INS ClassInstanceCreation to Assignment: = at 1", "INS MethodInvocation to ClassInstanceCreation at 2", "INS ThisExpression to FieldAccess at 0", "INS NullLiteral to ClassInstanceCreation at 3", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: getJobID to MethodInvocation at 0", "INS SimpleName: jobFile to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ArrayAccess to Assignment: = at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS SimpleName: TaskInProgress to SimpleType: TaskInProgress at 0", "INS QualifiedName: splits.length to VariableDeclarationFragment at 1", "INS SimpleType: TaskInProgress to ClassInstanceCreation at 0", "INS ForStatement to Block at 7", "INS SimpleName: i to ClassInstanceCreation at 6", "INS SimpleName: conf to FieldAccess at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS SimpleName: tasks to ArrayAccess at 0"]}, {"root": "INS InfixExpression: < to ForStatement at 1", "operations": ["INS QualifiedName: splits.length to InfixExpression: < at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS InfixExpression: < to ForStatement at 1"]}, {"root": "MOVE from ForStatement", "operations": ["MOV InfixExpression: < to ForStatement at 1"]}, {"root": "UPDATE from info to debug", "operations": ["UPD SimpleName: info from info to debug"]}, {"root": "UPDATE from \"num BSPTasks: \" to \"numBSPTasks: \"", "operations": ["UPD StringLiteral: \"num BSPTasks: \" from \"num BSPTasks: \" to \"numBSPTasks: \""]}, {"root": "INS StringLiteral: \", splits.length: \" to InfixExpression: + at 2", "operations": ["INS StringLiteral: \", splits.length: \" to InfixExpression: + at 2"]}, {"root": "INS QualifiedName: splits.length to InfixExpression: + at 3", "operations": ["INS QualifiedName: splits.length to InfixExpression: + at 3"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: numBSPTasks", "DEL QualifiedName: splits.length"]}]}}, {"JobInProgress_diff": {"operations": ["Update TextElement: Gets the task for the first <code>TaskInProgress</code> that is not already running(1157) to Gets the task for the first <code>TaskInProgress</code> that is not already", "Insert TextElement: running(1189) into TagElement(1190) at 1", "Insert ForStatement(904) into Block(905) at 6", "Insert InfixExpression: <(844) into ForStatement(871) at 1", "Insert VariableDeclarationExpression(876) into ForStatement(904) at 0", "Move InfixExpression: <(846) into ForStatement(904) at 1", "Insert PostfixExpression: ++(881) into ForStatement(904) at 2", "Insert Block(903) into ForStatement(904) at 3", "Update SimpleName: info(822) to debug", "Insert SimpleName: i(842) into InfixExpression: <(844) at 0", "Insert QualifiedName: splits.length(843) into InfixExpression: <(844) at 1", "Insert PrimitiveType: int(872) into VariableDeclarationExpression(876) at 0", "Insert VariableDeclarationFragment(875) into VariableDeclarationExpression(876) at 1", "Insert SimpleName: i(880) into PostfixExpression: ++(881) at 0", "Insert ExpressionStatement(902) into Block(903) at 0", "Update StringLiteral: \"num BSPTasks: \"(823) to \"numBSPTasks: \"", "Insert StringLiteral: \", splits.length: \"(821) into InfixExpression: +(823) at 2", "Insert QualifiedName: splits.length(822) into InfixExpression: +(823) at 3", "Insert SimpleName: i(873) into VariableDeclarationFragment(875) at 0", "Insert QualifiedName: splits.length(874) into VariableDeclarationFragment(875) at 1", "Insert Assignment: =(901) into ExpressionStatement(902) at 0", "Insert ArrayAccess(884) into Assignment: =(901) at 0", "Insert ClassInstanceCreation(900) into Assignment: =(901) at 1", "Insert SimpleName: tasks(882) into ArrayAccess(884) at 0", "Insert SimpleName: i(883) into ArrayAccess(884) at 1", "Insert SimpleType: TaskInProgress(886) into ClassInstanceCreation(900) at 0", "Insert MethodInvocation(888) into ClassInstanceCreation(900) at 1", "Insert MethodInvocation(893) into ClassInstanceCreation(900) at 2", "Insert NullLiteral(894) into ClassInstanceCreation(900) at 3", "Insert FieldAccess(897) into ClassInstanceCreation(900) at 4", "Insert ThisExpression(898) into ClassInstanceCreation(900) at 5", "Insert SimpleName: i(899) into ClassInstanceCreation(900) at 6", "Insert SimpleName: TaskInProgress(885) into SimpleType: TaskInProgress(886) at 0", "Insert SimpleName: getJobID(887) into MethodInvocation(888) at 0", "Insert FieldAccess(891) into MethodInvocation(893) at 0", "Insert SimpleName: toString(892) into MethodInvocation(893) at 1", "Insert ThisExpression(895) into FieldAccess(897) at 0", "Insert SimpleName: conf(896) into FieldAccess(897) at 1", "Insert ThisExpression(889) into FieldAccess(891) at 0", "Insert SimpleName: jobFile(890) into FieldAccess(891) at 1", "Delete SimpleName: numBSPTasks(817)", "Delete QualifiedName: splits.length(818)", "Delete Assignment: =(819)", "Delete ExpressionStatement(820)"]}}, {"LocalBSPRunner_cluster": {"actions": [{"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: > to InfixExpression: && at 1", "INS QualifiedName: splits.length to InfixExpression: > at 0", "INS SimpleName: id to InfixExpression: > at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: != to InfixExpression: && at 0"]}]}}, {"LocalBSPRunner_diff": {"operations": ["Insert InfixExpression: &&(840) into IfStatement(858) at 0", "Move InfixExpression: !=(836) into InfixExpression: &&(840) at 0", "Insert InfixExpression: >(839) into InfixExpression: &&(840) at 1", "Insert QualifiedName: splits.length(837) into InfixExpression: >(839) at 0", "Insert SimpleName: id(838) into InfixExpression: >(839) at 1"]}}, {"GraphJob_cluster": {"actions": [{"root": "INS ExpressionStatement to Block at 2", "operations": ["INS BooleanLiteral: true to MethodInvocation at 3", "INS ExpressionStatement to Block at 2", "INS StringLiteral: \"hama.bsp.force.set.tasks\" to MethodInvocation at 2", "INS SimpleName: setBoolean to MethodInvocation at 1", "INS SimpleName: conf to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}]}}, {"GraphJob_diff": {"operations": ["Insert ExpressionStatement(154) into Block(200) at 2", "Insert MethodInvocation(153) into ExpressionStatement(154) at 0", "Insert SimpleName: conf(149) into MethodInvocation(153) at 0", "Insert SimpleName: setBoolean(150) into MethodInvocation(153) at 1", "Insert StringLiteral: \"hama.bsp.force.set.tasks\"(151) into MethodInvocation(153) at 2", "Insert BooleanLiteral: true(152) into MethodInvocation(153) at 3"]}}], "commit_stats": [{"total_files": 9, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}