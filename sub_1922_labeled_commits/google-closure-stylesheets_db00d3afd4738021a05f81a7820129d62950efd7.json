{"application": "google-closure-stylesheets", "csha": "db00d3afd4738021a05f81a7820129d62950efd7", "files": [{"AtRuleHandler_cluster": {"actions": [{"root": "DEL MethodDeclaration", "operations": ["DEL WildcardType: ? extends CssNode", "DEL PrimitiveType: boolean", "DEL SimpleName: enterMediaTypeListDelimiter", "DEL Javadoc", "DEL SimpleName: node", "DEL SimpleName: CssNode", "DEL SimpleName: CssNodesListNode", "DEL SingleVariableDeclaration", "DEL ParameterizedType: CssNodesListNode<? extends CssNode>", "DEL TextElement: Called between adjacent nodes in a media type list ", "DEL MethodDeclaration", "DEL SimpleType: CssNodesListNode", "DEL SimpleType: CssNode", "DEL TagElement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL PrimitiveType: void", "DEL SimpleName: CssNodesListNode", "DEL SimpleName: node", "DEL TextElement: Called between adjacent nodes in a media type list ", "DEL MethodDeclaration", "DEL ParameterizedType: CssNodesListNode<? extends CssNode>", "DEL SingleVariableDeclaration", "DEL SimpleName: CssNode", "DEL SimpleName: leaveMediaTypeListDelimiter", "DEL SimpleType: CssNode", "DEL WildcardType: ? extends CssNode", "DEL Javadoc", "DEL SimpleType: CssNodesListNode", "DEL TagElement"]}]}}, {"AtRuleHandler_diff": {"operations": ["Delete TextElement: Called between adjacent nodes in a media type list (231)", "Delete TagElement(232)", "Delete Javadoc(233)", "Delete PrimitiveType: boolean(234)", "Delete SimpleName: enterMediaTypeListDelimiter(235)", "Delete SimpleName: CssNodesListNode(236)", "Delete SimpleType: CssNodesListNode(237)", "Delete SimpleName: CssNode(238)", "Delete SimpleType: CssNode(239)", "Delete WildcardType: ? extends CssNode(240)", "Delete ParameterizedType: CssNodesListNode<? extends CssNode>(241)", "Delete SimpleName: node(242)", "Delete SingleVariableDeclaration(243)", "Delete MethodDeclaration(244)", "Delete TextElement: Called between adjacent nodes in a media type list (245)", "Delete TagElement(246)", "Delete Javadoc(247)", "Delete PrimitiveType: void(248)", "Delete SimpleName: leaveMediaTypeListDelimiter(249)", "Delete SimpleName: CssNodesListNode(250)", "Delete SimpleType: CssNodesListNode(251)", "Delete SimpleName: CssNode(252)", "Delete SimpleType: CssNode(253)", "Delete WildcardType: ? extends CssNode(254)", "Delete ParameterizedType: CssNodesListNode<? extends CssNode>(255)", "Delete SimpleName: node(256)", "Delete SingleVariableDeclaration(257)", "Delete MethodDeclaration(258)"]}}, {"CssCompositeValueNode_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS ReturnStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: getValue to MethodDeclaration at 3", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS ThisExpression to MethodInvocation at 0", "INS SimpleType: String to MethodDeclaration at 2", "INS SimpleName: String to SimpleType: String at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodInvocation to ReturnStatement at 0"]}]}}, {"CssCompositeValueNode_diff": {"operations": ["Insert MethodDeclaration(287) into TypeDeclaration: class(306) at 13", "Insert MarkerAnnotation(277) into MethodDeclaration(287) at 0", "Insert Modifier: public(278) into MethodDeclaration(287) at 1", "Insert SimpleType: String(280) into MethodDeclaration(287) at 2", "Insert SimpleName: getValue(281) into MethodDeclaration(287) at 3", "Insert Block(286) into MethodDeclaration(287) at 4", "Insert SimpleName: Override(276) into MarkerAnnotation(277) at 0", "Insert SimpleName: String(279) into SimpleType: String(280) at 0", "Insert ReturnStatement(285) into Block(286) at 0", "Insert MethodInvocation(284) into ReturnStatement(285) at 0", "Insert ThisExpression(282) into MethodInvocation(284) at 0", "Insert SimpleName: toString(283) into MethodInvocation(284) at 1"]}}, {"CssTreeVisitor_cluster": {"actions": [{"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 1"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 1"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement", "DEL PrimitiveType: boolean", "DEL TextElement:  ", "DEL SimpleName: CssCompositeValueNode", "DEL SimpleName: value", "DEL SimpleType: CssCompositeValueNode", "DEL SingleVariableDeclaration", "DEL TextElement: Called before visiting a ", "DEL SimpleName: enterCompositeValueNode", "DEL TagElement: @code", "DEL TextElement:  that is a", "DEL MethodDeclaration", "DEL TextElement:  CssCompositeValueNode", "DEL Javadoc"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL SimpleType: CssCompositeValueNode", "DEL TextElement: Called after visiting a ", "DEL TextElement:  ", "DEL SimpleName: value", "DEL TagElement: @code", "DEL SimpleName: leaveCompositeValueNode", "DEL TextElement:  that is a", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: CssCompositeValueNode", "DEL TagElement", "DEL TextElement:  CssCompositeValueNode", "DEL PrimitiveType: void"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  CssValueNode"]}, {"root": "DEL TextElement:  that is not a", "operations": ["DEL TextElement:  that is not a"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  CssCompositeValueNode", "DEL TagElement: @code"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  CssValueNode"]}, {"root": "DEL TextElement:  that is not a", "operations": ["DEL TextElement:  that is not a"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  CssCompositeValueNode"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement", "DEL TextElement: Called between values in a ", "DEL TagElement: @code", "DEL SimpleName: enterCompositeValueNodeOperator", "DEL PrimitiveType: boolean", "DEL SimpleName: parent", "DEL TextElement:  ", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: CssCompositeValueNode", "DEL SimpleType: CssCompositeValueNode", "DEL Javadoc", "DEL TextElement:  CssCompositeValueNode"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: CssCompositeValueNode", "DEL TextElement:  CssCompositeValueNode", "DEL SingleVariableDeclaration", "DEL TextElement: Called between values in a ", "DEL PrimitiveType: void", "DEL SimpleName: leaveCompositeValueNodeOperator", "DEL SimpleName: CssCompositeValueNode", "DEL SimpleName: parent", "DEL TagElement", "DEL Javadoc", "DEL TagElement: @code", "DEL MethodDeclaration", "DEL TextElement:  "]}]}}, {"CssTreeVisitor_diff": {"operations": ["Move SingleVariableDeclaration(463) into MethodDeclaration(413) at 3", "Move SingleVariableDeclaration(447) into MethodDeclaration(426) at 3", "Move TagElement: @code(403) into TagElement(405) at 1", "Move TagElement: @code(419) into TagElement(418) at 1", "Delete TextElement: Called before visiting a (401)", "Delete TextElement:  that is a(404)", "Delete TextElement:  CssCompositeValueNode(405)", "Delete TagElement: @code(406)", "Delete TextElement:  (407)", "Delete TagElement(408)", "Delete Javadoc(409)", "Delete PrimitiveType: boolean(410)", "Delete SimpleName: enterCompositeValueNode(411)", "Delete SimpleName: CssCompositeValueNode(412)", "Delete SimpleType: CssCompositeValueNode(413)", "Delete SimpleName: value(414)", "Delete SingleVariableDeclaration(415)", "Delete MethodDeclaration(416)", "Delete TextElement: Called after visiting a (417)", "Delete TextElement:  that is a(420)", "Delete TextElement:  CssCompositeValueNode(421)", "Delete TagElement: @code(422)", "Delete TextElement:  (423)", "Delete TagElement(424)", "Delete Javadoc(425)", "Delete PrimitiveType: void(426)", "Delete SimpleName: leaveCompositeValueNode(427)", "Delete SimpleName: CssCompositeValueNode(428)", "Delete SimpleType: CssCompositeValueNode(429)", "Delete SimpleName: value(430)", "Delete SingleVariableDeclaration(431)", "Delete MethodDeclaration(432)", "Delete TextElement:  CssValueNode(434)", "Delete TagElement: @code(435)", "Delete TextElement:  that is not a(436)", "Delete TextElement:  CssCompositeValueNode(437)", "Delete TagElement: @code(438)", "Delete TextElement:  CssValueNode(450)", "Delete TagElement: @code(451)", "Delete TextElement:  that is not a(452)", "Delete TextElement:  CssCompositeValueNode(453)", "Delete TagElement: @code(454)", "Delete TextElement: Called between values in a (465)", "Delete TextElement:  CssCompositeValueNode(466)", "Delete TagElement: @code(467)", "Delete TextElement:  (468)", "Delete TagElement(469)", "Delete Javadoc(470)", "Delete PrimitiveType: boolean(471)", "Delete SimpleName: enterCompositeValueNodeOperator(472)", "Delete SimpleName: CssCompositeValueNode(473)", "Delete SimpleType: CssCompositeValueNode(474)", "Delete SimpleName: parent(475)", "Delete SingleVariableDeclaration(476)", "Delete MethodDeclaration(477)", "Delete TextElement: Called between values in a (478)", "Delete TextElement:  CssCompositeValueNode(479)", "Delete TagElement: @code(480)", "Delete TextElement:  (481)", "Delete TagElement(482)", "Delete Javadoc(483)", "Delete PrimitiveType: void(484)", "Delete SimpleName: leaveCompositeValueNodeOperator(485)", "Delete SimpleName: CssCompositeValueNode(486)", "Delete SimpleType: CssCompositeValueNode(487)", "Delete SimpleName: parent(488)", "Delete SingleVariableDeclaration(489)", "Delete MethodDeclaration(490)"]}}, {"DefaultTreeVisitor_cluster": {"actions": [{"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: enterCompositeValueNode", "DEL SimpleName: value", "DEL Block", "DEL PrimitiveType: boolean", "DEL BooleanLiteral: true", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL MarkerAnnotation", "DEL SimpleType: CssCompositeValueNode", "DEL SimpleName: CssCompositeValueNode"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: leaveCompositeValueNode", "DEL SimpleType: CssCompositeValueNode", "DEL Modifier: public", "DEL SimpleName: CssCompositeValueNode", "DEL PrimitiveType: void", "DEL MarkerAnnotation", "DEL SimpleName: value", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL Block", "DEL SingleVariableDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: parent", "DEL SimpleName: CssCompositeValueNode", "DEL MarkerAnnotation", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL Block", "DEL SimpleName: Override", "DEL SimpleType: CssCompositeValueNode", "DEL MethodDeclaration", "DEL BooleanLiteral: true", "DEL SimpleName: enterCompositeValueNodeOperator", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: parent", "DEL SimpleName: Override", "DEL SimpleName: CssCompositeValueNode", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: leaveCompositeValueNodeOperator", "DEL Block", "DEL MarkerAnnotation", "DEL SimpleType: CssCompositeValueNode", "DEL PrimitiveType: void"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL SimpleType: CssNode", "DEL SimpleName: enterMediaTypeListDelimiter", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: node", "DEL ParameterizedType: CssNodesListNode<? extends CssNode>", "DEL BooleanLiteral: true", "DEL ReturnStatement", "DEL SimpleName: CssNodesListNode", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL WildcardType: ? extends CssNode", "DEL SimpleName: CssNode", "DEL SimpleType: CssNodesListNode", "DEL SimpleName: Override"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ParameterizedType: CssNodesListNode<? extends CssNode>", "DEL PrimitiveType: void", "DEL SimpleName: CssNodesListNode", "DEL SimpleType: CssNode", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL SimpleName: CssNode", "DEL WildcardType: ? extends CssNode", "DEL SimpleType: CssNodesListNode", "DEL Modifier: public", "DEL SimpleName: leaveMediaTypeListDelimiter", "DEL Block", "DEL MarkerAnnotation", "DEL SimpleName: Override"]}]}}, {"DefaultTreeVisitor_diff": {"operations": ["Delete SimpleName: Override(249)", "Delete MarkerAnnotation(250)", "Delete Modifier: public(251)", "Delete PrimitiveType: boolean(252)", "Delete SimpleName: enterCompositeValueNode(253)", "Delete SimpleName: CssCompositeValueNode(254)", "Delete SimpleType: CssCompositeValueNode(255)", "Delete SimpleName: value(256)", "Delete SingleVariableDeclaration(257)", "Delete BooleanLiteral: true(258)", "Delete ReturnStatement(259)", "Delete Block(260)", "Delete MethodDeclaration(261)", "Delete SimpleName: Override(262)", "Delete MarkerAnnotation(263)", "Delete Modifier: public(264)", "Delete PrimitiveType: void(265)", "Delete SimpleName: leaveCompositeValueNode(266)", "Delete SimpleName: CssCompositeValueNode(267)", "Delete SimpleType: CssCompositeValueNode(268)", "Delete SimpleName: value(269)", "Delete SingleVariableDeclaration(270)", "Delete Block(271)", "Delete MethodDeclaration(272)", "Delete SimpleName: Override(297)", "Delete MarkerAnnotation(298)", "Delete Modifier: public(299)", "Delete PrimitiveType: boolean(300)", "Delete SimpleName: enterCompositeValueNodeOperator(301)", "Delete SimpleName: CssCompositeValueNode(302)", "Delete SimpleType: CssCompositeValueNode(303)", "Delete SimpleName: parent(304)", "Delete SingleVariableDeclaration(305)", "Delete BooleanLiteral: true(306)", "Delete ReturnStatement(307)", "Delete Block(308)", "Delete MethodDeclaration(309)", "Delete SimpleName: Override(310)", "Delete MarkerAnnotation(311)", "Delete Modifier: public(312)", "Delete PrimitiveType: void(313)", "Delete SimpleName: leaveCompositeValueNodeOperator(314)", "Delete SimpleName: CssCompositeValueNode(315)", "Delete SimpleType: CssCompositeValueNode(316)", "Delete SimpleName: parent(317)", "Delete SingleVariableDeclaration(318)", "Delete Block(319)", "Delete MethodDeclaration(320)", "Delete SimpleName: Override(513)", "Delete MarkerAnnotation(514)", "Delete Modifier: public(515)", "Delete PrimitiveType: boolean(516)", "Delete SimpleName: enterMediaTypeListDelimiter(517)", "Delete SimpleName: CssNodesListNode(518)", "Delete SimpleType: CssNodesListNode(519)", "Delete SimpleName: CssNode(520)", "Delete SimpleType: CssNode(521)", "Delete WildcardType: ? extends CssNode(522)", "Delete ParameterizedType: CssNodesListNode<? extends CssNode>(523)", "Delete SimpleName: node(524)", "Delete SingleVariableDeclaration(525)", "Delete BooleanLiteral: true(526)", "Delete ReturnStatement(527)", "Delete Block(528)", "Delete MethodDeclaration(529)", "Delete SimpleName: Override(530)", "Delete MarkerAnnotation(531)", "Delete Modifier: public(532)", "Delete PrimitiveType: void(533)", "Delete SimpleName: leaveMediaTypeListDelimiter(534)", "Delete SimpleName: CssNodesListNode(535)", "Delete SimpleType: CssNodesListNode(536)", "Delete SimpleName: CssNode(537)", "Delete SimpleType: CssNode(538)", "Delete WildcardType: ? extends CssNode(539)", "Delete ParameterizedType: CssNodesListNode<? extends CssNode>(540)", "Delete SimpleName: node(541)", "Delete SingleVariableDeclaration(542)", "Delete Block(543)", "Delete MethodDeclaration(544)"]}}, {"DefaultVisitController_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 5"]}, {"root": "MOVE from IfStatement", "operations": ["MOV PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 3"]}, {"root": "UPDATE from || to &&", "operations": ["UPD InfixExpression: || from || to &&", "UPD InfixExpression: || from || to &&"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS SimpleName: visitedChildren to PrefixExpression: ! at 0", "INS PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 3"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "INS PrefixExpression: ! to InfixExpression: || at 0", "operations": ["INS PrefixExpression: ! to InfixExpression: || at 0", "INS SimpleName: visitedChildren to PrefixExpression: ! at 0"]}, {"root": "INS SimpleName: shouldVisitChildren to InfixExpression: || at 1", "operations": ["INS SimpleName: shouldVisitChildren to InfixExpression: || at 1"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV PrefixExpression: ! to InfixExpression: || at 0"]}, {"root": "INS SimpleName: shouldVisitChildren to InfixExpression: || at 1", "operations": ["INS SimpleName: shouldVisitChildren to InfixExpression: || at 1"]}, {"root": "UPDATE from enterCompositeValueNode to enterValueNode", "operations": ["UPD SimpleName: enterCompositeValueNode from enterCompositeValueNode to enterValueNode"]}, {"root": "UPDATE from leaveCompositeValueNode to leaveValueNode", "operations": ["UPD SimpleName: leaveCompositeValueNode from leaveCompositeValueNode to leaveValueNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Iterator", "DEL ImportDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: Iterator", "DEL SimpleName: parameters", "DEL SimpleType: Iterator", "DEL SimpleName: CssValueNode", "DEL ParameterizedType: Iterator<CssValueNode>", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL Modifier: private", "DEL SimpleType: CssValueNode"]}, {"root": "DEL InfixExpression: &&", "operations": ["DEL InfixExpression: ==", "DEL InfixExpression: &&", "DEL SimpleName: parameters", "DEL NullLiteral"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL SimpleName: visitedChildren"]}, {"root": "DEL SimpleName: visitedChildren", "operations": ["DEL SimpleName: visitedChildren"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL SimpleName: shouldVisitChildren", "DEL PrefixExpression: !"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: stateStack", "DEL Block", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: pop", "DEL ReturnStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: parameters", "DEL InfixExpression: ==", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: getParameters", "DEL SimpleName: iterator", "DEL SimpleName: parameters", "DEL Block", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: node", "DEL IfStatement", "DEL ExpressionStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL ClassInstanceCreation", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: getVisitState", "DEL SimpleName: stateStack", "DEL SimpleType: VisitMediaTypeListDelimiterState", "DEL SimpleName: CssValueNode", "DEL SimpleName: next", "DEL VariableDeclarationFragment", "DEL SimpleName: hasNext", "DEL SimpleName: mediaType", "DEL SimpleName: mediaType", "DEL SimpleName: parameters", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: parameters", "DEL MethodInvocation", "DEL SimpleName: node", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: push", "DEL ExpressionStatement", "DEL SimpleName: hasNext", "DEL MethodInvocation", "DEL SimpleName: parameters", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: stateStack", "DEL SimpleName: VisitMediaTypeListDelimiterState", "DEL SimpleName: push", "DEL SimpleType: CssValueNode"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL SimpleType: VisitState", "DEL SimpleType: CssValueNode", "DEL SimpleName: VisitState", "DEL SimpleType: CssCompositeValueNode", "DEL SimpleName: VisitCompositeValueState", "DEL SimpleName: CssCompositeValueNode", "DEL SimpleType: CssCompositeValueNode", "DEL SimpleName: node", "DEL SimpleType: CssNode", "DEL Block", "DEL WildcardType: ? extends CssNode", "DEL ClassInstanceCreation", "DEL SimpleType: VisitCompositeValueState", "DEL SimpleName: node", "DEL Block", "DEL SimpleName: CssNode", "DEL SimpleType: VisitValueNodeState", "DEL SimpleName: VisitValueNodeState", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleName: node", "DEL InstanceofExpression", "DEL SimpleName: CssCompositeValueNode", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: CssValueNode", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleName: getVisitState", "DEL CastExpression", "DEL ParameterizedType: VisitState<? extends CssNode>", "DEL SimpleName: node", "DEL ClassInstanceCreation"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleType: CssNodesListNode", "DEL ExpressionStatement", "DEL SimpleName: CssNodesListNode", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL ParameterizedType: BaseVisitState<CssNode>", "DEL SimpleType: CssNode", "DEL WildcardType: ? extends CssNode", "DEL Modifier: private", "DEL SimpleName: enterMediaTypeListDelimiter", "DEL SimpleName: visitor", "DEL SimpleName: visitor", "DEL SimpleType: CssNodesListNode", "DEL SingleVariableDeclaration", "DEL ParameterizedType: CssNodesListNode<? extends CssNode>", "DEL Assignment: =", "DEL MarkerAnnotation", "DEL SimpleName: node", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MarkerAnnotation", "DEL SimpleName: node", "DEL ThisExpression", "DEL Modifier: public", "DEL SimpleType: BaseVisitState", "DEL Modifier: private", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: CssNodesListNode", "DEL MethodDeclaration", "DEL SimpleName: doVisit", "DEL Modifier: public", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL ParameterizedType: CssNodesListNode<? extends CssNode>", "DEL SimpleName: node", "DEL FieldAccess", "DEL SimpleName: transitionToNextState", "DEL SimpleType: CssNode", "DEL TypeDeclaration: class", "DEL PrimitiveType: void", "DEL SimpleName: Override", "DEL Modifier: public", "DEL SimpleName: node", "DEL SimpleName: leaveMediaTypeListDelimiter", "DEL SimpleName: node", "DEL SimpleName: BaseVisitState", "DEL Block", "DEL Block", "DEL SimpleName: Override", "DEL SimpleName: VisitMediaTypeListDelimiterState", "DEL PrimitiveType: void", "DEL SimpleName: CssNode", "DEL SimpleName: CssNode", "DEL SimpleName: VisitMediaTypeListDelimiterState", "DEL SimpleName: CssNode", "DEL SimpleType: CssNode", "DEL WildcardType: ? extends CssNode"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL FieldDeclaration", "DEL PrimitiveType: boolean", "DEL VariableDeclarationFragment", "DEL BooleanLiteral: false", "DEL SimpleName: intervalueStateIsNext"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: stateStack", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL SimpleName: IntervalueState", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL SimpleName: push", "DEL ClassInstanceCreation", "DEL SimpleType: IntervalueState", "DEL IfStatement", "DEL SimpleName: intervalueStateIsNext", "DEL SimpleName: intervalueStateIsNext", "DEL Block"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL BooleanLiteral: true", "DEL ExpressionStatement", "DEL SimpleName: intervalueStateIsNext"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: parent", "DEL SimpleName: Override", "DEL PrimitiveType: void", "DEL SimpleName: transitionToNextState", "DEL Block", "DEL SimpleName: visitor", "DEL SimpleType: BaseVisitState", "DEL SimpleName: Override", "DEL SimpleName: IntervalueState", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: parent", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL SimpleName: parent", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleType: CssCompositeValueNode", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL SimpleName: CssNode", "DEL TypeDeclaration: class", "DEL FieldDeclaration", "DEL Modifier: public", "DEL Modifier: final", "DEL SimpleName: doVisit", "DEL SimpleName: parent", "DEL Block", "DEL Modifier: private", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL ParameterizedType: BaseVisitState<CssNode>", "DEL ExpressionStatement", "DEL SimpleName: enterCompositeValueNodeOperator", "DEL SimpleName: parent", "DEL Assignment: =", "DEL SimpleType: CssCompositeValueNode", "DEL SimpleName: CssCompositeValueNode", "DEL SimpleName: CssCompositeValueNode", "DEL FieldAccess", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: IntervalueState", "DEL ThisExpression", "DEL SimpleType: CssNode", "DEL SimpleName: visitor", "DEL SimpleName: BaseVisitState", "DEL SimpleName: leaveCompositeValueNodeOperator", "DEL SimpleName: parent"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL PrimitiveType: int", "DEL SimpleName: currentIndex", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 1", "DEL FieldDeclaration", "DEL PrefixExpression: -", "DEL Modifier: private"]}, {"root": "DEL InfixExpression: &&", "operations": ["DEL SimpleName: currentIndex", "DEL InfixExpression: &&", "DEL PrefixExpression: -", "DEL NumberLiteral: 1", "DEL InfixExpression: =="]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL SimpleName: visitedChildren"]}, {"root": "DEL SimpleName: visitedChildren", "operations": ["DEL SimpleName: visitedChildren"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !", "DEL SimpleName: shouldVisitChildren"]}, {"root": "DEL Block", "operations": ["DEL MethodInvocation", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: pop", "DEL ExpressionStatement", "DEL SimpleName: stateStack"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: currentIndex", "DEL PrefixExpression: ++", "DEL ExpressionStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL PrimitiveType: int", "DEL SimpleName: parametersCount", "DEL SimpleName: getParameters", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: node", "DEL Modifier: final", "DEL SimpleName: size", "DEL VariableDeclarationFragment"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: currentIndex", "DEL SimpleName: getVisitState", "DEL SimpleName: parametersCount", "DEL IfStatement", "DEL SimpleName: push", "DEL SimpleName: node", "DEL SimpleName: parametersCount", "DEL SimpleName: getParameters", "DEL ExpressionStatement", "DEL SimpleName: currentIndex", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SimpleName: push", "DEL InfixExpression: <", "DEL SimpleType: VisitMediaTypeListDelimiterState", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL SimpleName: currentIndex", "DEL InfixExpression: <", "DEL SimpleName: get", "DEL MethodInvocation", "DEL SimpleName: stateStack", "DEL SimpleName: VisitMediaTypeListDelimiterState", "DEL Block", "DEL InfixExpression: -", "DEL MethodInvocation", "DEL Block", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: stateStack"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL IfStatement", "DEL CastExpression", "DEL SimpleName: CssCompositeValueNode", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL SimpleType: VisitState", "DEL SimpleName: CssNode", "DEL SimpleName: VisitValueNodeState", "DEL Modifier: public", "DEL Block", "DEL TextElement: Returns a visit state for a given child node.", "DEL SimpleName: getVisitState", "DEL TagElement", "DEL ReturnStatement", "DEL SimpleName: node", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL TextElement:  child node for which to create visit state", "DEL TagElement: @param", "DEL TextElement:  new visit state", "DEL SimpleName: CssValueNode", "DEL Block", "DEL SimpleName: VisitCompositeValueState", "DEL ParameterizedType: VisitState<? extends CssNode>", "DEL Block", "DEL SimpleType: CssNode", "DEL ClassInstanceCreation", "DEL TagElement: @return", "DEL SimpleName: VisitState", "DEL SimpleType: CssCompositeValueNode", "DEL ReturnStatement", "DEL Javadoc", "DEL InstanceofExpression", "DEL SimpleName: node", "DEL WildcardType: ? extends CssNode", "DEL SimpleType: CssValueNode", "DEL SimpleName: node", "DEL SimpleType: CssCompositeValueNode", "DEL SimpleType: VisitValueNodeState", "DEL SimpleName: CssCompositeValueNode", "DEL ClassInstanceCreation", "DEL SimpleType: VisitCompositeValueState"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: Preconditions", "DEL ExpressionStatement", "DEL SimpleName: checkNotNull", "DEL SimpleName: state"]}]}}, {"DefaultVisitController_diff": {"operations": ["Move ReturnStatement(4013) into Block(3854) at 5", "Move PrefixExpression: !(1429) into IfStatement(1432) at 0", "Move Block(1448) into IfStatement(1432) at 3", "Update InfixExpression: ||(1461) to &&", "Move Block(1528) into IfStatement(1464) at 1", "Move Block(1628) into IfStatement(1464) at 2", "Insert PrefixExpression: !(4457) into IfStatement(4472) at 0", "Move Block(4728) into IfStatement(4472) at 3", "Update InfixExpression: ||(4741) to &&", "Move Block(4814) into IfStatement(4511) at 1", "Move Block(4262) into IfStatement(4511) at 2", "Insert PrefixExpression: !(1441) into InfixExpression: &&(1443) at 0", "Insert SimpleName: shouldVisitChildren(1442) into InfixExpression: &&(1443) at 1", "Insert SimpleName: visitedChildren(4456) into PrefixExpression: !(4457) at 0", "Move PrefixExpression: !(4708) into InfixExpression: &&(4483) at 0", "Insert SimpleName: shouldVisitChildren(4482) into InfixExpression: &&(4483) at 1", "Insert SimpleName: visitedChildren(1440) into PrefixExpression: !(1441) at 0", "Update SimpleName: enterCompositeValueNode(4099) to enterValueNode", "Update SimpleName: leaveCompositeValueNode(4113) to leaveValueNode", "Delete QualifiedName: java.util.Iterator(10)", "Delete ImportDeclaration(11)", "Delete Modifier: private(1400)", "Delete SimpleName: Iterator(1401)", "Delete SimpleType: Iterator(1402)", "Delete SimpleName: CssValueNode(1403)", "Delete SimpleType: CssValueNode(1404)", "Delete ParameterizedType: Iterator<CssValueNode>(1405)", "Delete SimpleName: parameters(1406)", "Delete NullLiteral(1407)", "Delete VariableDeclarationFragment(1408)", "Delete FieldDeclaration(1409)", "Delete SimpleName: parameters(1430)", "Delete NullLiteral(1431)", "Delete InfixExpression: ==(1432)", "Delete InfixExpression: &&(1433)", "Delete SimpleName: visitedChildren(1442)", "Delete IfStatement(1449)", "Delete SimpleName: visitedChildren(1458)", "Delete SimpleName: shouldVisitChildren(1459)", "Delete PrefixExpression: !(1460)", "Delete SimpleName: stateStack(1462)", "Delete SimpleName: pop(1463)", "Delete MethodInvocation(1464)", "Delete ExpressionStatement(1465)", "Delete ReturnStatement(1466)", "Delete Block(1467)", "Delete SimpleName: parameters(1469)", "Delete NullLiteral(1470)", "Delete InfixExpression: ==(1471)", "Delete SimpleName: parameters(1472)", "Delete SimpleName: node(1473)", "Delete SimpleName: getParameters(1474)", "Delete MethodInvocation(1475)", "Delete SimpleName: iterator(1476)", "Delete MethodInvocation(1477)", "Delete Assignment: =(1478)", "Delete ExpressionStatement(1479)", "Delete Block(1480)", "Delete IfStatement(1481)", "Delete SimpleName: parameters(1482)", "Delete SimpleName: hasNext(1483)", "Delete MethodInvocation(1484)", "Delete SimpleName: CssValueNode(1485)", "Delete SimpleType: CssValueNode(1486)", "Delete SimpleName: mediaType(1487)", "Delete SimpleName: parameters(1488)", "Delete SimpleName: next(1489)", "Delete MethodInvocation(1490)", "Delete VariableDeclarationFragment(1491)", "Delete VariableDeclarationStatement(1492)", "Delete SimpleName: parameters(1493)", "Delete SimpleName: hasNext(1494)", "Delete MethodInvocation(1495)", "Delete SimpleName: stateStack(1496)", "Delete SimpleName: push(1497)", "Delete SimpleName: VisitMediaTypeListDelimiterState(1498)", "Delete SimpleType: VisitMediaTypeListDelimiterState(1499)", "Delete SimpleName: node(1500)", "Delete ClassInstanceCreation(1501)", "Delete MethodInvocation(1502)", "Delete ExpressionStatement(1503)", "Delete Block(1504)", "Delete IfStatement(1505)", "Delete SimpleName: stateStack(1506)", "Delete SimpleName: push(1507)", "Delete SimpleName: getVisitState(1508)", "Delete SimpleName: mediaType(1509)", "Delete MethodInvocation(1510)", "Delete MethodInvocation(1511)", "Delete ExpressionStatement(1512)", "Delete Block(1513)", "Delete IfStatement(1529)", "Delete Modifier: public(1532)", "Delete SimpleName: VisitState(1533)", "Delete SimpleType: VisitState(1534)", "Delete SimpleName: CssNode(1535)", "Delete SimpleType: CssNode(1536)", "Delete WildcardType: ? extends CssNode(1537)", "Delete ParameterizedType: VisitState<? extends CssNode>(1538)", "Delete SimpleName: getVisitState(1539)", "Delete SimpleName: CssValueNode(1540)", "Delete SimpleType: CssValueNode(1541)", "Delete SimpleName: node(1542)", "Delete SingleVariableDeclaration(1543)", "Delete SimpleName: node(1544)", "Delete SimpleName: CssCompositeValueNode(1545)", "Delete SimpleType: CssCompositeValueNode(1546)", "Delete InstanceofExpression(1547)", "Delete SimpleName: VisitCompositeValueState(1548)", "Delete SimpleType: VisitCompositeValueState(1549)", "Delete SimpleName: CssCompositeValueNode(1550)", "Delete SimpleType: CssCompositeValueNode(1551)", "Delete SimpleName: node(1552)", "Delete CastExpression(1553)", "Delete ClassInstanceCreation(1554)", "Delete ReturnStatement(1555)", "Delete Block(1556)", "Delete SimpleName: VisitValueNodeState(1557)", "Delete SimpleType: VisitValueNodeState(1558)", "Delete SimpleName: node(1559)", "Delete ClassInstanceCreation(1560)", "Delete ReturnStatement(1561)", "Delete Block(1562)", "Delete IfStatement(1563)", "Delete Block(1564)", "Delete MethodDeclaration(1565)", "Delete Modifier: private(1567)", "Delete SimpleName: VisitMediaTypeListDelimiterState(1568)", "Delete SimpleName: BaseVisitState(1569)", "Delete SimpleType: BaseVisitState(1570)", "Delete SimpleName: CssNode(1571)", "Delete SimpleType: CssNode(1572)", "Delete ParameterizedType: BaseVisitState<CssNode>(1573)", "Delete Modifier: private(1574)", "Delete SimpleName: CssNodesListNode(1575)", "Delete SimpleType: CssNodesListNode(1576)", "Delete SimpleName: CssNode(1577)", "Delete SimpleType: CssNode(1578)", "Delete WildcardType: ? extends CssNode(1579)", "Delete ParameterizedType: CssNodesListNode<? extends CssNode>(1580)", "Delete SimpleName: node(1581)", "Delete VariableDeclarationFragment(1582)", "Delete FieldDeclaration(1583)", "Delete Modifier: public(1584)", "Delete SimpleName: VisitMediaTypeListDelimiterState(1585)", "Delete SimpleName: CssNodesListNode(1586)", "Delete SimpleType: CssNodesListNode(1587)", "Delete SimpleName: CssNode(1588)", "Delete SimpleType: CssNode(1589)", "Delete WildcardType: ? extends CssNode(1590)", "Delete ParameterizedType: CssNodesListNode<? extends CssNode>(1591)", "Delete SimpleName: node(1592)", "Delete SingleVariableDeclaration(1593)", "Delete ThisExpression(1594)", "Delete SimpleName: node(1595)", "Delete FieldAccess(1596)", "Delete SimpleName: node(1597)", "Delete Assignment: =(1598)", "Delete ExpressionStatement(1599)", "Delete Block(1600)", "Delete MethodDeclaration(1601)", "Delete SimpleName: Override(1602)", "Delete MarkerAnnotation(1603)", "Delete Modifier: public(1604)", "Delete PrimitiveType: void(1605)", "Delete SimpleName: doVisit(1606)", "Delete SimpleName: visitor(1607)", "Delete SimpleName: enterMediaTypeListDelimiter(1608)", "Delete SimpleName: node(1609)", "Delete MethodInvocation(1610)", "Delete ExpressionStatement(1611)", "Delete SimpleName: visitor(1612)", "Delete SimpleName: leaveMediaTypeListDelimiter(1613)", "Delete SimpleName: node(1614)", "Delete MethodInvocation(1615)", "Delete ExpressionStatement(1616)", "Delete Block(1617)", "Delete MethodDeclaration(1618)", "Delete SimpleName: Override(1619)", "Delete MarkerAnnotation(1620)", "Delete Modifier: public(1621)", "Delete PrimitiveType: void(1622)", "Delete SimpleName: transitionToNextState(1623)", "Delete MethodDeclaration(1629)", "Delete TypeDeclaration: class(1630)", "Delete Modifier: private(3940)", "Delete PrimitiveType: boolean(3941)", "Delete SimpleName: intervalueStateIsNext(3942)", "Delete BooleanLiteral: false(3943)", "Delete VariableDeclarationFragment(3944)", "Delete FieldDeclaration(3945)", "Delete SimpleName: intervalueStateIsNext(4000)", "Delete SimpleName: stateStack(4001)", "Delete SimpleName: push(4002)", "Delete SimpleName: IntervalueState(4003)", "Delete SimpleType: IntervalueState(4004)", "Delete SimpleName: node(4005)", "Delete ClassInstanceCreation(4006)", "Delete MethodInvocation(4007)", "Delete ExpressionStatement(4008)", "Delete SimpleName: intervalueStateIsNext(4009)", "Delete BooleanLiteral: false(4010)", "Delete Assignment: =(4011)", "Delete ExpressionStatement(4012)", "Delete Block(4014)", "Delete IfStatement(4015)", "Delete SimpleName: intervalueStateIsNext(4038)", "Delete BooleanLiteral: true(4039)", "Delete Assignment: =(4040)", "Delete ExpressionStatement(4041)", "Delete ReturnStatement(4042)", "Delete SimpleName: IntervalueState(4210)", "Delete SimpleName: BaseVisitState(4211)", "Delete SimpleType: BaseVisitState(4212)", "Delete SimpleName: CssNode(4213)", "Delete SimpleType: CssNode(4214)", "Delete ParameterizedType: BaseVisitState<CssNode>(4215)", "Delete Modifier: private(4216)", "Delete Modifier: final(4217)", "Delete SimpleName: CssCompositeValueNode(4218)", "Delete SimpleType: CssCompositeValueNode(4219)", "Delete SimpleName: parent(4220)", "Delete VariableDeclarationFragment(4221)", "Delete FieldDeclaration(4222)", "Delete SimpleName: IntervalueState(4223)", "Delete SimpleName: CssCompositeValueNode(4224)", "Delete SimpleType: CssCompositeValueNode(4225)", "Delete SimpleName: parent(4226)", "Delete SingleVariableDeclaration(4227)", "Delete ThisExpression(4228)", "Delete SimpleName: parent(4229)", "Delete FieldAccess(4230)", "Delete SimpleName: parent(4231)", "Delete Assignment: =(4232)", "Delete ExpressionStatement(4233)", "Delete Block(4234)", "Delete MethodDeclaration(4235)", "Delete SimpleName: Override(4236)", "Delete MarkerAnnotation(4237)", "Delete Modifier: public(4238)", "Delete PrimitiveType: void(4239)", "Delete SimpleName: doVisit(4240)", "Delete SimpleName: visitor(4241)", "Delete SimpleName: enterCompositeValueNodeOperator(4242)", "Delete SimpleName: parent(4243)", "Delete MethodInvocation(4244)", "Delete ExpressionStatement(4245)", "Delete SimpleName: visitor(4246)", "Delete SimpleName: leaveCompositeValueNodeOperator(4247)", "Delete SimpleName: parent(4248)", "Delete MethodInvocation(4249)", "Delete ExpressionStatement(4250)", "Delete Block(4251)", "Delete MethodDeclaration(4252)", "Delete SimpleName: Override(4253)", "Delete MarkerAnnotation(4254)", "Delete Modifier: public(4255)", "Delete PrimitiveType: void(4256)", "Delete SimpleName: transitionToNextState(4257)", "Delete MethodDeclaration(4263)", "Delete TypeDeclaration: class(4264)", "Delete Modifier: private(4682)", "Delete PrimitiveType: int(4683)", "Delete SimpleName: currentIndex(4684)", "Delete NumberLiteral: 1(4685)", "Delete PrefixExpression: -(4686)", "Delete VariableDeclarationFragment(4687)", "Delete FieldDeclaration(4688)", "Delete SimpleName: currentIndex(4709)", "Delete NumberLiteral: 1(4710)", "Delete PrefixExpression: -(4711)", "Delete InfixExpression: ==(4712)", "Delete InfixExpression: &&(4713)", "Delete SimpleName: visitedChildren(4722)", "Delete IfStatement(4729)", "Delete SimpleName: visitedChildren(4738)", "Delete SimpleName: shouldVisitChildren(4739)", "Delete PrefixExpression: !(4740)", "Delete SimpleName: stateStack(4742)", "Delete SimpleName: pop(4743)", "Delete MethodInvocation(4744)", "Delete ExpressionStatement(4745)", "Delete ReturnStatement(4746)", "Delete Block(4747)", "Delete SimpleName: currentIndex(4749)", "Delete PrefixExpression: ++(4750)", "Delete ExpressionStatement(4751)", "Delete Modifier: final(4752)", "Delete PrimitiveType: int(4753)", "Delete SimpleName: parametersCount(4754)", "Delete SimpleName: node(4755)", "Delete SimpleName: getParameters(4756)", "Delete MethodInvocation(4757)", "Delete SimpleName: size(4758)", "Delete MethodInvocation(4759)", "Delete VariableDeclarationFragment(4760)", "Delete VariableDeclarationStatement(4761)", "Delete SimpleName: currentIndex(4762)", "Delete SimpleName: parametersCount(4763)", "Delete InfixExpression: <(4764)", "Delete SimpleName: currentIndex(4765)", "Delete SimpleName: parametersCount(4766)", "Delete NumberLiteral: 1(4767)", "Delete InfixExpression: -(4768)", "Delete InfixExpression: <(4769)", "Delete SimpleName: stateStack(4770)", "Delete SimpleName: push(4771)", "Delete SimpleName: VisitMediaTypeListDelimiterState(4772)", "Delete SimpleType: VisitMediaTypeListDelimiterState(4773)", "Delete SimpleName: node(4774)", "Delete ClassInstanceCreation(4775)", "Delete MethodInvocation(4776)", "Delete ExpressionStatement(4777)", "Delete Block(4778)", "Delete IfStatement(4779)", "Delete SimpleName: stateStack(4780)", "Delete SimpleName: push(4781)", "Delete SimpleName: getVisitState(4782)", "Delete SimpleName: node(4783)", "Delete SimpleName: getParameters(4784)", "Delete MethodInvocation(4785)", "Delete SimpleName: get(4786)", "Delete SimpleName: currentIndex(4787)", "Delete MethodInvocation(4788)", "Delete MethodInvocation(4789)", "Delete MethodInvocation(4790)", "Delete ExpressionStatement(4791)", "Delete Block(4792)", "Delete IfStatement(4815)", "Delete TextElement: Returns a visit state for a given child node.(4818)", "Delete TagElement(4819)", "Delete SimpleName: node(4820)", "Delete TextElement:  child node for which to create visit state(4821)", "Delete TagElement: @param(4822)", "Delete TextElement:  new visit state(4823)", "Delete TagElement: @return(4824)", "Delete Javadoc(4825)", "Delete Modifier: public(4826)", "Delete SimpleName: VisitState(4827)", "Delete SimpleType: VisitState(4828)", "Delete SimpleName: CssNode(4829)", "Delete SimpleType: CssNode(4830)", "Delete WildcardType: ? extends CssNode(4831)", "Delete ParameterizedType: VisitState<? extends CssNode>(4832)", "Delete SimpleName: getVisitState(4833)", "Delete SimpleName: CssValueNode(4834)", "Delete SimpleType: CssValueNode(4835)", "Delete SimpleName: node(4836)", "Delete SingleVariableDeclaration(4837)", "Delete SimpleName: node(4838)", "Delete SimpleName: CssCompositeValueNode(4839)", "Delete SimpleType: CssCompositeValueNode(4840)", "Delete InstanceofExpression(4841)", "Delete SimpleName: VisitCompositeValueState(4842)", "Delete SimpleType: VisitCompositeValueState(4843)", "Delete SimpleName: CssCompositeValueNode(4844)", "Delete SimpleType: CssCompositeValueNode(4845)", "Delete SimpleName: node(4846)", "Delete CastExpression(4847)", "Delete ClassInstanceCreation(4848)", "Delete ReturnStatement(4849)", "Delete Block(4850)", "Delete SimpleName: VisitValueNodeState(4851)", "Delete SimpleType: VisitValueNodeState(4852)", "Delete SimpleName: node(4853)", "Delete ClassInstanceCreation(4854)", "Delete ReturnStatement(4855)", "Delete Block(4856)", "Delete IfStatement(4857)", "Delete Block(4858)", "Delete MethodDeclaration(4859)", "Delete SimpleName: Preconditions(5233)", "Delete SimpleName: checkNotNull(5234)", "Delete SimpleName: state(5235)", "Delete MethodInvocation(5236)", "Delete ExpressionStatement(5237)"]}}, {"CompactPrinter_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS CharacterLiteral: '{' to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS Block to IfStatement at 2", "INS Block to MethodDeclaration at 5", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS Block to EnhancedForStatement at 2", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS EnhancedForStatement to Block at 1", "INS IfStatement to Block at 1", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: sb to MethodInvocation at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 39", "operations": ["INS SimpleName: deleteCharAt to MethodInvocation at 1", "INS IfStatement to Block at 0", "INS ReturnStatement to Block at 2", "INS Block to IfStatement at 1", "INS InfixExpression: - to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: - at 0", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS SimpleName: node to InstanceofExpression at 0", "INS InstanceofExpression to ParenthesizedExpression at 0", "INS SimpleName: sb to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS PrefixExpression: ! to ReturnStatement at 0", "INS ExpressionStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 39", "INS Block to MethodDeclaration at 5", "INS ParenthesizedExpression to PrefixExpression: ! at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 40", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 40"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 50", "operations": ["INS InstanceofExpression to ParenthesizedExpression at 0", "INS EnhancedForStatement to Block at 1", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: && at 0", "INS SimpleName: append to MethodInvocation at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: node to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS InfixExpression: && to IfStatement at 0", "INS ParenthesizedExpression to PrefixExpression: ! at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: param to SingleVariableDeclaration at 1", "INS SimpleType: CssValueNode to SingleVariableDeclaration at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: hasBlock to MethodInvocation at 1", "INS SimpleName: enterUnknownAtRule to MethodDeclaration at 3", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 50", "INS CharacterLiteral: '@' to MethodInvocation at 2", "INS Modifier: public to MethodDeclaration at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS IfStatement to Block at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 62", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to InfixExpression: - at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: String to SimpleType: String at 0", "INS EnhancedForStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 3", "INS Block to EnhancedForStatement at 2", "INS InfixExpression: - to MethodInvocation at 2", "INS SimpleName: compositeNode to VariableDeclarationFragment at 0", "INS SimpleName: sb to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 62", "INS SimpleName: node to CastExpression at 1", "INS Block to IfStatement at 1", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS MethodInvocation to InfixExpression: - at 1", "INS MethodInvocation to EnhancedForStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: setLength to MethodInvocation at 1", "INS SimpleName: operatorName to VariableDeclarationFragment at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: value to SingleVariableDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: sb to MethodInvocation at 0", "INS SimpleType: CssValueNode to SingleVariableDeclaration at 0", "INS IfStatement to Block at 0", "INS SimpleName: CssValueNode to SimpleType: CssValueNode at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleName: enterMediaRule to MethodDeclaration at 3", "MOV PrimitiveType: boolean to MethodDeclaration at 2", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleName: enterBlock to MethodDeclaration at 3", "MOV PrimitiveType: boolean to MethodDeclaration at 2", "MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "UPDATE from enterBlock to enterValueNode", "operations": ["UPD SimpleName: enterBlock from enterBlock to enterValueNode"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleName: leaveCompositeValueNode to MethodDeclaration at 3", "MOV PrimitiveType: void to MethodDeclaration at 2", "MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "UPDATE from leaveCompositeValueNode to leaveValueNode", "operations": ["UPD SimpleName: leaveCompositeValueNode from leaveCompositeValueNode to leaveValueNode"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "UPDATE from public to protected", "operations": ["UPD Modifier: public from public to protected"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleName: enterCompositeValueNodeOperator to MethodDeclaration at 3", "MOV Modifier: public to MethodDeclaration at 1", "MOV PrimitiveType: boolean to MethodDeclaration at 2"]}, {"root": "UPDATE from boolean to void", "operations": ["UPD PrimitiveType: boolean from boolean to void"]}, {"root": "UPDATE from append to appendValueNode", "operations": ["UPD SimpleName: append from append to appendValueNode", "UPD SimpleName: enterCompositeValueNodeOperator from enterCompositeValueNodeOperator to appendValueNode"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ReturnStatement to Block at 3"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 3"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV MethodInvocation to EnhancedForStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InstanceofExpression to IfStatement at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV MethodInvocation to EnhancedForStatement at 1", "MOV SimpleName: size to MethodInvocation at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InstanceofExpression to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "UPDATE from CssCompositeValueNode to CssValueNode", "operations": ["UPD SimpleName: CssCompositeValueNode from CssCompositeValueNode to CssValueNode", "UPD SimpleName: CssPropertyValueNode from CssPropertyValueNode to CssValueNode", "UPD SimpleType: CssCompositeValueNode from CssCompositeValueNode to CssValueNode"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleName: c to SingleVariableDeclaration at 1", "MOV SimpleType: CssCompositeValueNode to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from c to param", "operations": ["UPD SimpleName: c from c to param", "UPD SimpleName: getOperator from getOperator to param", "UPD SimpleName: deleteLastCharIfCharIs from deleteLastCharIfCharIs to param", "UPD SimpleName: c from c to param", "UPD SimpleName: node from node to param"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: append to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InstanceofExpression to IfStatement at 0"]}, {"root": "UPDATE from node to sb", "operations": ["UPD SimpleName: node from node to sb", "UPD SimpleName: getOperatorName from getOperatorName to sb", "UPD SimpleName: block from block to sb"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: node to MethodInvocation at 0", "MOV SimpleName: getParent to MethodInvocation at 1"]}, {"root": "UPDATE from appendTo to append", "operations": ["UPD SimpleName: appendTo from appendTo to append", "UPD SimpleName: getParent from getParent to append"]}, {"root": "MOVE from SimpleType: CssValueNode", "operations": ["MOV SimpleName: CssPropertyValueNode to SimpleType: CssValueNode at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: sb to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: getValue to MethodInvocation at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: CssCompositeValueNode to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from CssMediaRuleNode to CssCompositeValueNode", "operations": ["UPD SimpleName: CssMediaRuleNode from CssMediaRuleNode to CssCompositeValueNode", "UPD SimpleType: CssMediaRuleNode from CssMediaRuleNode to CssCompositeValueNode"]}, {"root": "MOVE from InstanceofExpression", "operations": ["MOV SimpleType: CssMediaRuleNode to InstanceofExpression at 1"]}, {"root": "UPDATE from ' ' to '{'", "operations": ["UPD CharacterLiteral: ' ' from ' ' to '{'"]}, {"root": "UPDATE from sb to compositeNode", "operations": ["UPD SimpleName: sb from sb to compositeNode", "UPD SimpleName: parent from parent to compositeNode"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: sb to MethodInvocation at 0", "MOV SimpleName: append to MethodInvocation at 1"]}, {"root": "UPDATE from append to getValues", "operations": ["UPD SimpleName: append from append to getValues"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: deleteLastCharIfCharIs to MethodInvocation at 0"]}, {"root": "MOVE from InstanceofExpression", "operations": ["MOV MethodInvocation to InstanceofExpression at 0", "MOV SimpleType: CssPropertyValueNode to InstanceofExpression at 1"]}, {"root": "UPDATE from CssPropertyValueNode to CssDeclarationBlockNode", "operations": ["UPD SimpleName: CssPropertyValueNode from CssPropertyValueNode to CssDeclarationBlockNode", "UPD SimpleType: CssPropertyValueNode from CssPropertyValueNode to CssDeclarationBlockNode"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: CssCompositeValueNode to CastExpression at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0", "MOV SimpleName: getOperatorName to MethodInvocation at 1"]}, {"root": "UPDATE from c to appendMediaParameterWithParentheses", "operations": ["UPD SimpleName: c from c to appendMediaParameterWithParentheses"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: c to MethodInvocation at 0", "MOV SimpleName: getOperator to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getOperatorName to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: appendTo to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: block to MethodInvocation at 0", "MOV SimpleName: getParent to MethodInvocation at 1"]}, {"root": "UPDATE from getParent to length", "operations": ["UPD SimpleName: getParent from getParent to length", "UPD SimpleName: getParent from getParent to length"]}, {"root": "UPDATE from getParent to getBlock", "operations": ["UPD SimpleName: getParent from getParent to getBlock"]}, {"root": "UPDATE from size to value", "operations": ["UPD SimpleName: size from size to value"]}, {"root": "INS SimpleName: operatorName to MethodInvocation at 2", "operations": ["INS SimpleName: operatorName to MethodInvocation at 2"]}, {"root": "UPDATE from node to operatorName", "operations": ["UPD SimpleName: node from node to operatorName"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: node to MethodInvocation at 0", "MOV SimpleName: getParent to MethodInvocation at 1"]}, {"root": "UPDATE from getValues to getValue", "operations": ["UPD SimpleName: getValues from getValues to getValue"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.base.Joiner"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.css.compiler.ast.CssBlockNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.css.compiler.ast.CssNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.css.compiler.ast.CssNodesListNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.css.compiler.ast.CssPropertyValueNode"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL IfStatement", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL SimpleName: size", "DEL MethodDeclaration", "DEL InfixExpression: >", "DEL Block", "DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL SimpleName: appendCompositeValueNode", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: private", "DEL MethodInvocation", "DEL SimpleName: Joiner", "DEL Block", "DEL SimpleName: sb", "DEL SimpleName: on", "DEL PrimitiveType: void"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ExpressionStatement", "DEL InstanceofExpression", "DEL SimpleName: block", "DEL MarkerAnnotation", "DEL SimpleType: CssUnknownAtRuleNode", "DEL MethodInvocation", "DEL StringLiteral: \"{\"", "DEL SimpleName: append", "DEL SimpleName: sb", "DEL IfStatement", "DEL SimpleName: getParent", "DEL InstanceofExpression", "DEL MethodInvocation", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL SimpleName: block", "DEL Block", "DEL Block", "DEL SimpleName: CssBlockNode", "DEL SimpleName: Override", "DEL BooleanLiteral: true", "DEL SimpleType: CssBlockNode", "DEL SimpleName: CssUnknownAtRuleNode", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL IfStatement", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL SimpleType: CssPropertyValueNode", "DEL SimpleName: node", "DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL BooleanLiteral: true", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL Block", "DEL PrimitiveType: boolean", "DEL SimpleName: enterValueNode", "DEL IfStatement", "DEL Modifier: public"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: leaveValueNode", "DEL Block", "DEL IfStatement", "DEL MarkerAnnotation", "DEL PrimitiveType: void", "DEL SimpleName: Override", "DEL InstanceofExpression"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL MethodInvocation", "DEL CharacterLiteral: ' '", "DEL SimpleName: sb", "DEL BooleanLiteral: true", "DEL Block", "DEL SimpleName: parent", "DEL SimpleName: deleteLastCharIfCharIs", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL CharacterLiteral: ' '"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL InfixExpression: >", "DEL Block", "DEL Modifier: public", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL PrimitiveType: boolean", "DEL SimpleName: enterUnknownAtRule", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL StringLiteral: \"@\"", "DEL IfStatement", "DEL Block", "DEL MethodDeclaration", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: enterMediaTypeListDelimiter", "DEL SimpleName: CssNode", "DEL ReturnStatement", "DEL SimpleName: CssNodesListNode", "DEL SimpleName: Override", "DEL Block", "DEL MarkerAnnotation", "DEL WildcardType: ? extends CssNode", "DEL PrimitiveType: boolean", "DEL SimpleName: node", "DEL SimpleType: CssNode", "DEL MethodDeclaration", "DEL ParameterizedType: CssNodesListNode<? extends CssNode>", "DEL Modifier: public", "DEL BooleanLiteral: true", "DEL SimpleType: CssNodesListNode"]}, {"root": "DEL StringLiteral: \" \"", "operations": ["DEL StringLiteral: \" \""]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: appendMediaParameterWithParentheses", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL MethodInvocation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL SimpleType: CssMediaRuleNode", "DEL ReturnStatement", "DEL SimpleName: CssMediaRuleNode", "DEL MethodInvocation", "DEL Block", "DEL IfStatement", "DEL PrimitiveType: void", "DEL Block", "DEL Modifier: protected", "DEL IfStatement", "DEL SimpleName: appendValueNode", "DEL InfixExpression: &&", "DEL InstanceofExpression"]}]}}, {"CompactPrinter_diff": {"operations": ["Insert MethodDeclaration(290) into TypeDeclaration: class(1472) at 14", "Insert MethodDeclaration(905) into TypeDeclaration: class(1472) at 36", "Insert MethodDeclaration(921) into TypeDeclaration: class(1472) at 37", "Insert MethodDeclaration(1123) into TypeDeclaration: class(1472) at 43", "Insert MethodDeclaration(1471) into TypeDeclaration: class(1472) at 53", "Move MarkerAnnotation(243) into MethodDeclaration(290) at 0", "Move Modifier: public(244) into MethodDeclaration(290) at 1", "Move PrimitiveType: boolean(245) into MethodDeclaration(290) at 2", "Move SimpleName: enterMediaRule(246) into MethodDeclaration(290) at 3", "Move SingleVariableDeclaration(250) into MethodDeclaration(290) at 4", "Insert Block(289) into MethodDeclaration(290) at 5", "Move MarkerAnnotation(938) into MethodDeclaration(905) at 0", "Move Modifier: public(825) into MethodDeclaration(905) at 1", "Move PrimitiveType: boolean(826) into MethodDeclaration(905) at 2", "Update SimpleName: enterBlock(827) to enterValueNode", "Move SimpleName: enterBlock(827) into MethodDeclaration(905) at 3", "Move SingleVariableDeclaration(945) into MethodDeclaration(905) at 4", "Insert Block(904) into MethodDeclaration(905) at 5", "Move MarkerAnnotation(914) into MethodDeclaration(921) at 0", "Move Modifier: public(915) into MethodDeclaration(921) at 1", "Move PrimitiveType: void(916) into MethodDeclaration(921) at 2", "Update SimpleName: leaveCompositeValueNode(917) to leaveValueNode", "Move SimpleName: leaveCompositeValueNode(917) into MethodDeclaration(921) at 3", "Move SingleVariableDeclaration(972) into MethodDeclaration(921) at 4", "Move Block(933) into MethodDeclaration(921) at 5", "Move MarkerAnnotation(1150) into MethodDeclaration(1123) at 0", "Insert Modifier: public(1059) into MethodDeclaration(1123) at 1", "Insert PrimitiveType: boolean(1060) into MethodDeclaration(1123) at 2", "Insert SimpleName: enterUnknownAtRule(1061) into MethodDeclaration(1123) at 3", "Move SingleVariableDeclaration(1157) into MethodDeclaration(1123) at 4", "Insert Block(1122) into MethodDeclaration(1123) at 5", "Move Javadoc(1486) into MethodDeclaration(1471) at 0", "Update Modifier: public(990) to protected", "Move Modifier: public(990) into MethodDeclaration(1471) at 1", "Update PrimitiveType: boolean(991) to void", "Move PrimitiveType: boolean(991) into MethodDeclaration(1471) at 2", "Update SimpleName: enterCompositeValueNodeOperator(992) to appendValueNode", "Move SimpleName: enterCompositeValueNodeOperator(992) into MethodDeclaration(1471) at 3", "Move SingleVariableDeclaration(1493) into MethodDeclaration(1471) at 4", "Insert Block(1470) into MethodDeclaration(1471) at 5", "Move ExpressionStatement(259) into Block(289) at 0", "Insert EnhancedForStatement(281) into Block(289) at 1", "Insert ExpressionStatement(286) into Block(289) at 2", "Move ReturnStatement(275) into Block(289) at 3", "Insert IfStatement(892) into Block(904) at 0", "Move ExpressionStatement(959) into Block(904) at 1", "Insert ReturnStatement(903) into Block(904) at 2", "Insert ExpressionStatement(1077) into Block(1122) at 0", "Insert EnhancedForStatement(1098) into Block(1122) at 1", "Insert IfStatement(1119) into Block(1122) at 2", "Move ReturnStatement(1185) into Block(1122) at 3", "Insert IfStatement(1469) into Block(1470) at 0", "Insert SingleVariableDeclaration(253) into EnhancedForStatement(281) at 0", "Move MethodInvocation(262) into EnhancedForStatement(281) at 1", "Insert Block(280) into EnhancedForStatement(281) at 2", "Insert MethodInvocation(285) into ExpressionStatement(286) at 0", "Move InstanceofExpression(949) into IfStatement(892) at 0", "Insert Block(891) into IfStatement(892) at 1", "Insert PrefixExpression: !(902) into ReturnStatement(903) at 0", "Insert MethodInvocation(1076) into ExpressionStatement(1077) at 0", "Insert SingleVariableDeclaration(1081) into EnhancedForStatement(1098) at 0", "Move MethodInvocation(1172) into EnhancedForStatement(1098) at 1", "Insert Block(1097) into EnhancedForStatement(1098) at 2", "Insert InfixExpression: &&(1112) into IfStatement(1119) at 0", "Move Block(984) into IfStatement(1119) at 1", "Move InstanceofExpression(1497) into IfStatement(1469) at 0", "Insert Block(1460) into IfStatement(1469) at 1", "Move Block(1517) into IfStatement(1469) at 2", "Update SimpleType: CssCompositeValueNode(282) to CssValueNode", "Move SimpleType: CssCompositeValueNode(282) into SingleVariableDeclaration(253) at 0", "Update SimpleName: c(283) to param", "Move SimpleName: c(283) into SingleVariableDeclaration(253) at 1", "Move ExpressionStatement(271) into Block(280) at 0", "Insert IfStatement(279) into Block(280) at 1", "Insert SimpleName: sb(282) into MethodInvocation(285) at 0", "Insert SimpleName: append(283) into MethodInvocation(285) at 1", "Insert CharacterLiteral: '{'(284) into MethodInvocation(285) at 2", "Insert ExpressionStatement(890) into Block(891) at 0", "Insert ParenthesizedExpression(901) into PrefixExpression: !(902) at 0", "Insert MethodInvocation(1069) into MethodInvocation(1076) at 0", "Insert SimpleName: append(1070) into MethodInvocation(1076) at 1", "Move MethodInvocation(1167) into MethodInvocation(1076) at 2", "Insert SimpleType: CssValueNode(1079) into SingleVariableDeclaration(1081) at 0", "Insert SimpleName: param(1080) into SingleVariableDeclaration(1081) at 1", "Move ExpressionStatement(1205) into Block(1097) at 0", "Move ExpressionStatement(953) into Block(1097) at 1", "Insert MethodInvocation(1103) into InfixExpression: &&(1112) at 0", "Insert PrefixExpression: !(1111) into InfixExpression: &&(1112) at 1", "Insert VariableDeclarationStatement(1420) into Block(1460) at 0", "Insert VariableDeclarationStatement(1430) into Block(1460) at 1", "Insert EnhancedForStatement(1448) into Block(1460) at 2", "Insert ExpressionStatement(1459) into Block(1460) at 3", "Move ExpressionStatement(1525) into Block(1468) at 0", "Update SimpleName: CssCompositeValueNode(281) to CssValueNode", "Move InstanceofExpression(1504) into IfStatement(279) at 0", "Insert Block(270) into IfStatement(279) at 1", "Insert Block(278) into IfStatement(279) at 2", "Insert MethodInvocation(889) into ExpressionStatement(890) at 0", "Insert InstanceofExpression(900) into ParenthesizedExpression(901) at 0", "Update SimpleName: node(922) to sb", "Move SimpleName: node(922) into MethodInvocation(1069) at 0", "Update SimpleName: getParent(923) to append", "Move SimpleName: getParent(923) into MethodInvocation(1069) at 1", "Insert CharacterLiteral: '@'(1068) into MethodInvocation(1069) at 2", "Update SimpleName: CssPropertyValueNode(925) to CssValueNode", "Move SimpleName: CssPropertyValueNode(925) into SimpleType: CssValueNode(1079) at 0", "Insert MethodInvocation(1095) into ExpressionStatement(1096) at 0", "Insert MethodInvocation(1101) into MethodInvocation(1103) at 0", "Insert SimpleName: hasBlock(1102) into MethodInvocation(1103) at 1", "Insert ParenthesizedExpression(1110) into PrefixExpression: !(1111) at 0", "Move SimpleType: CssCompositeValueNode(994) into VariableDeclarationStatement(1420) at 0", "Insert VariableDeclarationFragment(1419) into VariableDeclarationStatement(1420) at 1", "Insert SimpleType: String(1422) into VariableDeclarationStatement(1430) at 0", "Insert VariableDeclarationFragment(1429) into VariableDeclarationStatement(1430) at 1", "Insert SingleVariableDeclaration(1434) into EnhancedForStatement(1448) at 0", "Insert MethodInvocation(1437) into EnhancedForStatement(1448) at 1", "Insert Block(1447) into EnhancedForStatement(1448) at 2", "Insert MethodInvocation(1458) into ExpressionStatement(1459) at 0", "Update SimpleName: node(1501) to param", "Insert ExpressionStatement(269) into Block(270) at 0", "Insert ExpressionStatement(277) into Block(278) at 0", "Insert SimpleName: sb(882) into MethodInvocation(889) at 0", "Insert SimpleName: deleteCharAt(883) into MethodInvocation(889) at 1", "Insert InfixExpression: -(888) into MethodInvocation(889) at 2", "Insert SimpleName: node(897) into InstanceofExpression(900) at 0", "Update SimpleType: CssMediaRuleNode(842) to CssCompositeValueNode", "Move SimpleType: CssMediaRuleNode(842) into InstanceofExpression(900) at 1", "Insert SimpleName: sb(1090) into MethodInvocation(1095) at 0", "Insert SimpleName: append(1091) into MethodInvocation(1095) at 1", "Insert MethodInvocation(1094) into MethodInvocation(1095) at 2", "Insert SimpleName: node(1099) into MethodInvocation(1101) at 0", "Insert SimpleName: getType(1100) into MethodInvocation(1101) at 1", "Insert InstanceofExpression(1109) into ParenthesizedExpression(1110) at 0", "Update CharacterLiteral: ' '(981) to '{'", "Insert SimpleName: compositeNode(1414) into VariableDeclarationFragment(1419) at 0", "Insert CastExpression(1418) into VariableDeclarationFragment(1419) at 1", "Insert SimpleName: String(1421) into SimpleType: String(1422) at 0", "Insert SimpleName: operatorName(1423) into VariableDeclarationFragment(1429) at 0", "Insert MethodInvocation(1428) into VariableDeclarationFragment(1429) at 1", "Insert SimpleType: CssValueNode(1432) into SingleVariableDeclaration(1434) at 0", "Insert SimpleName: value(1433) into SingleVariableDeclaration(1434) at 1", "Update SimpleName: sb(1158) to compositeNode", "Move SimpleName: sb(1158) into MethodInvocation(1437) at 0", "Update SimpleName: append(1159) to getValues", "Move SimpleName: append(1159) into MethodInvocation(1437) at 1", "Insert ExpressionStatement(1441) into Block(1447) at 0", "Move ExpressionStatement(1181) into Block(1447) at 1", "Insert SimpleName: sb(1449) into MethodInvocation(1458) at 0", "Insert SimpleName: setLength(1450) into MethodInvocation(1458) at 1", "Insert InfixExpression: -(1457) into MethodInvocation(1458) at 2", "Insert MethodInvocation(268) into ExpressionStatement(269) at 0", "Insert MethodInvocation(276) into ExpressionStatement(277) at 0", "Insert MethodInvocation(886) into InfixExpression: -(888) at 0", "Insert NumberLiteral: 1(887) into InfixExpression: -(888) at 1", "Update SimpleName: CssMediaRuleNode(841) to CssCompositeValueNode", "Update SimpleName: deleteLastCharIfCharIs(950) to param", "Move SimpleName: deleteLastCharIfCharIs(950) into MethodInvocation(1094) at 0", "Insert SimpleName: getValue(1093) into MethodInvocation(1094) at 1", "Move MethodInvocation(975) into InstanceofExpression(1109) at 0", "Update SimpleType: CssPropertyValueNode(977) to CssDeclarationBlockNode", "Move SimpleType: CssPropertyValueNode(977) into InstanceofExpression(1109) at 1", "Move SimpleType: CssCompositeValueNode(919) into CastExpression(1418) at 0", "Insert SimpleName: node(1417) into CastExpression(1418) at 1", "Move MethodInvocation(1005) into MethodInvocation(1428) at 0", "Move SimpleName: getOperatorName(1006) into MethodInvocation(1428) at 1", "Insert SimpleName: CssValueNode(1431) into SimpleType: CssValueNode(1432) at 0", "Insert MethodInvocation(1440) into ExpressionStatement(1441) at 0", "Insert MethodInvocation(1453) into InfixExpression: -(1457) at 0", "Insert MethodInvocation(1456) into InfixExpression: -(1457) at 1", "Update SimpleName: c(287) to appendMediaParameterWithParentheses", "Move SimpleName: c(287) into MethodInvocation(268) at 0", "Update SimpleName: getOperator(288) to param", "Move SimpleName: getOperator(288) into MethodInvocation(268) at 1", "Update SimpleName: getOperatorName(290) to sb", "Move SimpleName: getOperatorName(290) into MethodInvocation(276) at 0", "Update SimpleName: appendTo(293) to append", "Move SimpleName: appendTo(293) into MethodInvocation(276) at 1", "Move MethodInvocation(297) into MethodInvocation(276) at 2", "Update SimpleName: block(832) to sb", "Move SimpleName: block(832) into MethodInvocation(886) at 0", "Update SimpleName: getParent(833) to length", "Move SimpleName: getParent(833) into MethodInvocation(886) at 1", "Update SimpleName: getParent(974) to getBlock", "Update SimpleName: CssPropertyValueNode(976) to CssDeclarationBlockNode", "Update SimpleName: parent(1003) to compositeNode", "Update SimpleName: append(1162) to appendValueNode", "Move SimpleName: append(1162) into MethodInvocation(1440) at 0", "Update SimpleName: size(1173) to value", "Move SimpleName: size(1173) into MethodInvocation(1440) at 1", "Insert SimpleName: operatorName(1444) into MethodInvocation(1445) at 2", "Insert SimpleName: sb(1451) into MethodInvocation(1453) at 0", "Insert SimpleName: length(1452) into MethodInvocation(1453) at 1", "Update SimpleName: node(1505) to operatorName", "Move SimpleName: node(1505) into MethodInvocation(1456) at 0", "Update SimpleName: getParent(1506) to length", "Move SimpleName: getParent(1506) into MethodInvocation(1456) at 1", "Update SimpleName: c(295) to param", "Update SimpleName: getValues(296) to getValue", "Delete QualifiedName: com.google.common.base.Joiner(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.common.css.compiler.ast.CssBlockNode(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.google.common.css.compiler.ast.CssNode(44)", "Delete ImportDeclaration(45)", "Delete QualifiedName: com.google.common.css.compiler.ast.CssNodesListNode(46)", "Delete ImportDeclaration(47)", "Delete QualifiedName: com.google.common.css.compiler.ast.CssPropertyValueNode(54)", "Delete ImportDeclaration(55)", "Delete SimpleName: size(263)", "Delete MethodInvocation(264)", "Delete NumberLiteral: 0(265)", "Delete InfixExpression: >(266)", "Delete Block(272)", "Delete IfStatement(273)", "Delete Block(276)", "Delete MethodDeclaration(277)", "Delete Modifier: private(278)", "Delete PrimitiveType: void(279)", "Delete SimpleName: appendCompositeValueNode(280)", "Delete SingleVariableDeclaration(284)", "Delete SimpleName: Joiner(285)", "Delete SimpleName: on(286)", "Delete MethodInvocation(289)", "Delete MethodInvocation(291)", "Delete MethodInvocation(292)", "Delete SimpleName: sb(294)", "Delete MethodInvocation(298)", "Delete ExpressionStatement(299)", "Delete Block(300)", "Delete MethodDeclaration(301)", "Delete SimpleName: Override(823)", "Delete MarkerAnnotation(824)", "Delete SimpleName: CssBlockNode(828)", "Delete SimpleType: CssBlockNode(829)", "Delete SimpleName: block(830)", "Delete SingleVariableDeclaration(831)", "Delete MethodInvocation(834)", "Delete SimpleName: CssUnknownAtRuleNode(835)", "Delete SimpleType: CssUnknownAtRuleNode(836)", "Delete InstanceofExpression(837)", "Delete SimpleName: block(838)", "Delete SimpleName: getParent(839)", "Delete MethodInvocation(840)", "Delete InstanceofExpression(843)", "Delete InfixExpression: ||(844)", "Delete SimpleName: sb(845)", "Delete SimpleName: append(846)", "Delete StringLiteral: \"{\"(847)", "Delete MethodInvocation(848)", "Delete ExpressionStatement(849)", "Delete Block(850)", "Delete IfStatement(851)", "Delete BooleanLiteral: true(852)", "Delete ReturnStatement(853)", "Delete Block(854)", "Delete MethodDeclaration(855)", "Delete SimpleName: node(920)", "Delete SingleVariableDeclaration(921)", "Delete MethodInvocation(924)", "Delete SimpleType: CssPropertyValueNode(926)", "Delete InstanceofExpression(927)", "Delete IfStatement(934)", "Delete Block(935)", "Delete MethodDeclaration(936)", "Delete Modifier: public(939)", "Delete PrimitiveType: boolean(940)", "Delete SimpleName: enterValueNode(941)", "Delete Block(954)", "Delete IfStatement(955)", "Delete BooleanLiteral: true(960)", "Delete ReturnStatement(961)", "Delete Block(962)", "Delete MethodDeclaration(963)", "Delete SimpleName: Override(964)", "Delete MarkerAnnotation(965)", "Delete Modifier: public(966)", "Delete PrimitiveType: void(967)", "Delete SimpleName: leaveValueNode(968)", "Delete InstanceofExpression(978)", "Delete IfStatement(985)", "Delete Block(986)", "Delete MethodDeclaration(987)", "Delete SimpleName: Override(988)", "Delete MarkerAnnotation(989)", "Delete SimpleName: parent(995)", "Delete SingleVariableDeclaration(996)", "Delete SimpleName: deleteLastCharIfCharIs(997)", "Delete CharacterLiteral: ' '(998)", "Delete MethodInvocation(999)", "Delete ExpressionStatement(1000)", "Delete SimpleName: sb(1001)", "Delete SimpleName: append(1002)", "Delete MethodInvocation(1007)", "Delete MethodInvocation(1008)", "Delete ExpressionStatement(1009)", "Delete BooleanLiteral: true(1010)", "Delete ReturnStatement(1011)", "Delete Block(1012)", "Delete MethodDeclaration(1013)", "Delete CharacterLiteral: ' '(951)", "Delete MethodInvocation(952)", "Delete Modifier: public(1151)", "Delete PrimitiveType: boolean(1152)", "Delete SimpleName: enterUnknownAtRule(1153)", "Delete StringLiteral: \"@\"(1160)", "Delete MethodInvocation(1161)", "Delete MethodInvocation(1168)", "Delete ExpressionStatement(1169)", "Delete MethodInvocation(1174)", "Delete NumberLiteral: 0(1175)", "Delete InfixExpression: >(1176)", "Delete Block(1182)", "Delete IfStatement(1183)", "Delete Block(1186)", "Delete MethodDeclaration(1187)", "Delete SimpleName: Override(1188)", "Delete MarkerAnnotation(1189)", "Delete Modifier: public(1190)", "Delete PrimitiveType: boolean(1191)", "Delete SimpleName: enterMediaTypeListDelimiter(1192)", "Delete SimpleName: CssNodesListNode(1193)", "Delete SimpleType: CssNodesListNode(1194)", "Delete SimpleName: CssNode(1195)", "Delete SimpleType: CssNode(1196)", "Delete WildcardType: ? extends CssNode(1197)", "Delete ParameterizedType: CssNodesListNode<? extends CssNode>(1198)", "Delete SimpleName: node(1199)", "Delete SingleVariableDeclaration(1200)", "Delete BooleanLiteral: true(1206)", "Delete ReturnStatement(1207)", "Delete Block(1208)", "Delete MethodDeclaration(1209)", "Delete StringLiteral: \" \"(1179)", "Delete SimpleName: appendMediaParameterWithParentheses(1512)", "Delete SimpleName: node(1513)", "Delete MethodInvocation(1514)", "Delete ExpressionStatement(1515)", "Delete ReturnStatement(1516)", "Delete Modifier: protected(1487)", "Delete PrimitiveType: void(1488)", "Delete SimpleName: appendValueNode(1489)", "Delete ReturnStatement(1498)", "Delete Block(1499)", "Delete IfStatement(1500)", "Delete MethodInvocation(1507)", "Delete SimpleName: CssMediaRuleNode(1508)", "Delete SimpleType: CssMediaRuleNode(1509)", "Delete InstanceofExpression(1510)", "Delete InfixExpression: &&(1511)", "Delete IfStatement(1518)", "Delete Block(1526)", "Delete MethodDeclaration(1527)"]}}, {"PrettyPrinter_cluster": {"actions": [{"root": "UPDATE from com.google.common.css.compiler.ast.CssBlockNode to com.google.common.css.compiler.ast.CssBooleanExpressionNode", "operations": ["UPD QualifiedName: com.google.common.css.compiler.ast.CssBlockNode from com.google.common.css.compiler.ast.CssBlockNode to com.google.common.css.compiler.ast.CssBooleanExpressionNode"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS StringLiteral: \"  \" to Assignment: += at 1", "INS SimpleType: CssValueNode to SingleVariableDeclaration at 0", "INS SimpleType: CssBooleanExpressionNode to InstanceofExpression at 1", "INS SimpleName: CssBooleanExpressionNode to SimpleType: CssBooleanExpressionNode at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: param to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: indent to Assignment: += at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS IfStatement to Block at 1", "INS SimpleName: appendMediaParamterWithParentheses to MethodInvocation at 0", "INS SimpleName: CssValueNode to SimpleType: CssValueNode at 0", "INS SimpleName: param to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: param to InstanceofExpression at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS ExpressionStatement to Block at 0", "INS Assignment: += to ExpressionStatement at 0", "INS StringLiteral: \" {\\n\" to MethodInvocation at 2", "INS InstanceofExpression to IfStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS EnhancedForStatement to Block at 1", "INS Block to EnhancedForStatement at 2", "INS Block to IfStatement at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 32", "operations": ["INS IfStatement to Block at 1", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: enterValueNode to MethodInvocation at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: getOperatorName to MethodInvocation at 1", "INS SimpleName: compositeNode to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: node to CastExpression at 1", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS CastExpression to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: node to InstanceofExpression at 0", "INS SimpleName: value to MethodInvocation at 1", "INS Block to EnhancedForStatement at 2", "INS EnhancedForStatement to Block at 2", "INS ExpressionStatement to Block at 0", "INS ParenthesizedExpression to PrefixExpression: ! at 0", "INS VariableDeclarationStatement to Block at 1", "INS IfStatement to Block at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 32", "INS SimpleName: operatorName to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 54", "operations": ["INS Block to MethodDeclaration at 5", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: sb to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \" \" to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS EnhancedForStatement to Block at 2", "INS MethodDeclaration to TypeDeclaration: class at 54", "INS SimpleName: append to MethodInvocation at 1", "INS Block to EnhancedForStatement at 2", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 1", "MOV PrimitiveType: boolean to MethodDeclaration at 2", "MOV SimpleName: enterMediaRule to MethodDeclaration at 3", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "UPDATE from appendMediaParameterWithParentheses to appendMediaParamterWithParentheses", "operations": ["UPD SimpleName: appendMediaParameterWithParentheses from appendMediaParameterWithParentheses to appendMediaParamterWithParentheses"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Block to IfStatement at 2", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV PrimitiveType: boolean to MethodDeclaration at 2", "MOV SimpleName: enterBlock to MethodDeclaration at 3", "MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "UPDATE from enterBlock to enterValueNode", "operations": ["UPD SimpleName: enterBlock from enterBlock to enterValueNode"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from private to public", "operations": ["UPD Modifier: private from private to public"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleName: inFunargs to MethodDeclaration at 3", "MOV Modifier: private to MethodDeclaration at 1", "MOV PrimitiveType: boolean to MethodDeclaration at 2"]}, {"root": "UPDATE from inFunargs to enterUnknownAtRule", "operations": ["UPD SimpleName: inFunargs from inFunargs to enterUnknownAtRule"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ReturnStatement to Block at 4"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2", "MOV ReturnStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 4", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 0", "MOV IfStatement to Block at 3"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV MethodInvocation to EnhancedForStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV PrefixExpression: ! to ReturnStatement at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV MethodInvocation to EnhancedForStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: && to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: sb to MethodInvocation at 0"]}, {"root": "UPDATE from c to append", "operations": ["UPD SimpleName: c from c to append", "UPD SimpleName: on from on to append", "UPD SimpleName: getParent from getParent to append"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: c to MethodInvocation at 1"]}, {"root": "MOVE from InstanceofExpression", "operations": ["MOV SimpleType: CssCompositeValueNode to InstanceofExpression at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleName: node to SingleVariableDeclaration at 1", "MOV SimpleType: CssValueNode to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from node to param", "operations": ["UPD SimpleName: node from node to param", "UPD SimpleName: c from c to param", "UPD SimpleName: node from node to param"]}, {"root": "INS PrefixExpression: ! to InfixExpression: && at 1", "operations": ["INS InstanceofExpression to ParenthesizedExpression at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: CssDeclarationBlockNode to SimpleType: CssDeclarationBlockNode at 0", "INS SimpleType: CssDeclarationBlockNode to InstanceofExpression at 1", "INS ParenthesizedExpression to PrefixExpression: ! at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: CssCompositeValueNode to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV InstanceofExpression to ParenthesizedExpression at 0"]}, {"root": "UPDATE from CssUnknownAtRuleNode to String", "operations": ["UPD SimpleName: CssUnknownAtRuleNode from CssUnknownAtRuleNode to String"]}, {"root": "MOVE from SimpleType: String", "operations": ["MOV SimpleName: CssUnknownAtRuleNode to SimpleType: String at 0"]}, {"root": "UPDATE from CssBlockNode to CssValueNode", "operations": ["UPD SimpleType: CssBlockNode from CssBlockNode to CssValueNode", "UPD SimpleName: CssBlockNode from CssBlockNode to CssValueNode"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleName: block to SingleVariableDeclaration at 1", "MOV SimpleType: CssBlockNode to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from block to value", "operations": ["UPD SimpleName: block from block to value"]}, {"root": "UPDATE from block to compositeNode", "operations": ["UPD SimpleName: block from block to compositeNode", "UPD SimpleName: sb from sb to compositeNode"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getParent to MethodInvocation at 1", "MOV SimpleName: block to MethodInvocation at 0"]}, {"root": "UPDATE from getParent to getValues", "operations": ["UPD SimpleName: getParent from getParent to getValues"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from sb to deleteEndingIfEndingIs", "operations": ["UPD SimpleName: sb from sb to deleteEndingIfEndingIs"]}, {"root": "UPDATE from append to operatorName", "operations": ["UPD SimpleName: append from append to operatorName", "UPD SimpleName: getOperatorName from getOperatorName to operatorName"]}, {"root": "UPDATE from Joiner to sb", "operations": ["UPD SimpleName: Joiner from Joiner to sb", "UPD SimpleName: node from node to sb"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: node to MethodInvocation at 0", "MOV SimpleName: getParent to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from \" \" to \" {\\n\"", "operations": ["UPD StringLiteral: \" \" from \" \" to \" {\\n\""]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: CssCompositeValueNode to CastExpression at 0"]}, {"root": "UPDATE from getOperatorName to getValue", "operations": ["UPD SimpleName: getOperatorName from getOperatorName to getValue", "UPD SimpleName: getParent from getParent to getValue"]}, {"root": "MOVE from InstanceofExpression", "operations": ["MOV MethodInvocation to InstanceofExpression at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Joiner to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: on to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: sb to MethodInvocation at 0", "MOV SimpleName: append to MethodInvocation at 1"]}, {"root": "UPDATE from append to getOperator", "operations": ["UPD SimpleName: append from append to getOperator"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getOperatorName to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: c to MethodInvocation at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Preconditions.checkArgument", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Joiner", "DEL ImportDeclaration"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getOperator"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: getBlock", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL SimpleName: hasBlock", "DEL MethodInvocation", "DEL SimpleName: getType", "DEL MethodInvocation", "DEL IfStatement", "DEL InfixExpression: ||", "DEL SimpleName: node", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL NullLiteral", "DEL Block", "DEL SimpleName: size", "DEL Block", "DEL SimpleName: node", "DEL NumberLiteral: 0", "DEL MethodDeclaration", "DEL ParenthesizedExpression", "DEL InfixExpression: &&"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL PrimitiveType: void", "DEL SimpleName: appendTo", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: c", "DEL SimpleName: appendCompositeValueNode", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleName: getValues", "DEL Block", "DEL MethodDeclaration"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Override", "DEL MarkerAnnotation"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: block", "DEL SimpleName: block", "DEL SimpleName: Override", "DEL SimpleName: CssBlockNode", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: block", "DEL InstanceofExpression", "DEL Block", "DEL MarkerAnnotation", "DEL SimpleType: CssUnknownAtRuleNode", "DEL SimpleType: CssMediaRuleNode", "DEL BooleanLiteral: true", "DEL SimpleName: CssMediaRuleNode", "DEL ReturnStatement", "DEL InfixExpression: ||", "DEL InstanceofExpression", "DEL MethodInvocation", "DEL SimpleName: getParent", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: CssBlockNode", "DEL IfStatement", "DEL SimpleName: getParent", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL StringLiteral: \"{\\n\""]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL SimpleName: leaveBlock", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: CssMediaRuleNode", "DEL Block", "DEL PrimitiveType: void", "DEL SimpleType: CssMediaRuleNode", "DEL MethodDeclaration", "DEL InstanceofExpression"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: parent", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getOperator"]}, {"root": "DEL StringLiteral: \" \"", "operations": ["DEL StringLiteral: \" \""]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: checkArgument", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: node", "DEL IfStatement", "DEL SimpleName: inFunargs"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL BooleanLiteral: true"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: enterValueNode", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL Modifier: public"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: enterCompositeValueNodeOperator", "DEL Block", "DEL Block", "DEL SingleVariableDeclaration", "DEL PrefixExpression: !", "DEL SimpleName: parent", "DEL IfStatement", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL PrimitiveType: boolean", "DEL Modifier: public", "DEL SimpleName: parent", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL SimpleName: inFunargs"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: getParent", "DEL SimpleType: CssFunctionArgumentsNode", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL InstanceofExpression", "DEL TextElement: Returns true when @{code node}'s parent or grandparent is a function", "DEL InfixExpression: ||", "DEL SimpleName: CssFunctionArgumentsNode", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL TagElement", "DEL InfixExpression: &&", "DEL InstanceofExpression", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL TextElement: arguments node.", "DEL Block"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL InfixExpression: !=", "DEL NullLiteral"]}, {"root": "DEL InfixExpression: ||", "operations": ["DEL SimpleName: size", "DEL InfixExpression: >", "DEL NumberLiteral: 0", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL InfixExpression: ||"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: enterUnknownAtRule", "DEL PrimitiveType: boolean", "DEL MethodDeclaration", "DEL Modifier: public", "DEL Block"]}]}}, {"PrettyPrinter_diff": {"operations": ["Update QualifiedName: com.google.common.css.compiler.ast.CssBlockNode(10) to com.google.common.css.compiler.ast.CssBooleanExpressionNode", "Insert MethodDeclaration(279) into TypeDeclaration: class(1797) at 14", "Insert MethodDeclaration(789) into TypeDeclaration: class(1797) at 28", "Insert MethodDeclaration(1437) into TypeDeclaration: class(1797) at 47", "Move MarkerAnnotation(222) into MethodDeclaration(279) at 0", "Move Modifier: public(223) into MethodDeclaration(279) at 1", "Move PrimitiveType: boolean(224) into MethodDeclaration(279) at 2", "Move SimpleName: enterMediaRule(225) into MethodDeclaration(279) at 3", "Move SingleVariableDeclaration(229) into MethodDeclaration(279) at 4", "Insert Block(278) into MethodDeclaration(279) at 5", "Update SimpleName: appendMediaParameterWithParentheses(303) to appendMediaParamterWithParentheses", "Move MarkerAnnotation(649) into MethodDeclaration(340) at 0", "Move Block(680) into MethodDeclaration(340) at 6", "Move MarkerAnnotation(747) into MethodDeclaration(789) at 0", "Move Modifier: public(613) into MethodDeclaration(789) at 1", "Move PrimitiveType: boolean(614) into MethodDeclaration(789) at 2", "Update SimpleName: enterBlock(615) to enterValueNode", "Move SimpleName: enterBlock(615) into MethodDeclaration(789) at 3", "Move SingleVariableDeclaration(754) into MethodDeclaration(789) at 4", "Insert Block(788) into MethodDeclaration(789) at 5", "Move MarkerAnnotation(1451) into MethodDeclaration(1437) at 0", "Update Modifier: private(845) to public", "Move Modifier: private(845) into MethodDeclaration(1437) at 1", "Move PrimitiveType: boolean(846) into MethodDeclaration(1437) at 2", "Update SimpleName: inFunargs(847) to enterUnknownAtRule", "Move SimpleName: inFunargs(847) into MethodDeclaration(1437) at 3", "Move SingleVariableDeclaration(1458) into MethodDeclaration(1437) at 4", "Insert Block(1436) into MethodDeclaration(1437) at 5", "Move ExpressionStatement(238) into Block(278) at 0", "Insert EnhancedForStatement(266) into Block(278) at 1", "Insert ExpressionStatement(271) into Block(278) at 2", "Insert ExpressionStatement(275) into Block(278) at 3", "Move ReturnStatement(267) into Block(278) at 4", "Insert IfStatement(765) into Block(788) at 0", "Insert IfStatement(780) into Block(788) at 1", "Move ReturnStatement(838) into Block(788) at 2", "Move ExpressionStatement(1463) into Block(1436) at 0", "Move ExpressionStatement(1475) into Block(1436) at 1", "Insert EnhancedForStatement(1408) into Block(1436) at 2", "Move IfStatement(1502) into Block(1436) at 3", "Move ReturnStatement(1504) into Block(1436) at 4", "Insert SingleVariableDeclaration(238) into EnhancedForStatement(266) at 0", "Move MethodInvocation(241) into EnhancedForStatement(266) at 1", "Insert Block(265) into EnhancedForStatement(266) at 2", "Insert MethodInvocation(270) into ExpressionStatement(271) at 0", "Insert Assignment: +=(274) into ExpressionStatement(275) at 0", "Insert InstanceofExpression(688) into IfStatement(765) at 0", "Insert Block(734) into IfStatement(765) at 1", "Move Block(806) into IfStatement(765) at 2", "Insert PrefixExpression: !(773) into IfStatement(780) at 0", "Move Block(802) into IfStatement(780) at 1", "Move PrefixExpression: !(761) into ReturnStatement(787) at 0", "Insert SingleVariableDeclaration(1391) into EnhancedForStatement(1408) at 0", "Move MethodInvocation(1478) into EnhancedForStatement(1408) at 1", "Insert Block(1407) into EnhancedForStatement(1408) at 2", "Move InfixExpression: &&(1493) into IfStatement(1433) at 0", "Insert SimpleType: CssValueNode(236) into SingleVariableDeclaration(238) at 0", "Insert SimpleName: param(237) into SingleVariableDeclaration(238) at 1", "Move ExpressionStatement(263) into Block(265) at 0", "Insert IfStatement(264) into Block(265) at 1", "Move SimpleName: sb(286) into MethodInvocation(270) at 0", "Update SimpleName: c(287) to append", "Move SimpleName: c(287) into MethodInvocation(270) at 1", "Insert StringLiteral: \" {\\n\"(269) into MethodInvocation(270) at 2", "Insert SimpleName: indent(272) into Assignment: +=(274) at 0", "Insert StringLiteral: \"  \"(273) into Assignment: +=(274) at 1", "Insert SimpleName: node(685) into InstanceofExpression(688) at 0", "Move SimpleType: CssCompositeValueNode(862) into InstanceofExpression(688) at 1", "Insert VariableDeclarationStatement(697) into Block(734) at 0", "Insert VariableDeclarationStatement(707) into Block(734) at 1", "Insert EnhancedForStatement(729) into Block(734) at 2", "Move ExpressionStatement(834) into Block(734) at 3", "Insert ParenthesizedExpression(772) into PrefixExpression: !(773) at 0", "Move SimpleType: CssValueNode(849) into SingleVariableDeclaration(1391) at 0", "Update SimpleName: node(850) to param", "Move SimpleName: node(850) into SingleVariableDeclaration(1391) at 1", "Insert ExpressionStatement(1399) into Block(1407) at 0", "Insert ExpressionStatement(1406) into Block(1407) at 1", "Insert PrefixExpression: !(1421) into InfixExpression: &&(1422) at 1", "Move ExpressionStatement(641) into Block(1432) at 1", "Insert SimpleName: CssValueNode(235) into SimpleType: CssValueNode(236) at 0", "Insert InstanceofExpression(250) into IfStatement(264) at 0", "Insert Block(255) into IfStatement(264) at 1", "Insert Block(263) into IfStatement(264) at 2", "Move SimpleType: CssCompositeValueNode(274) into VariableDeclarationStatement(697) at 0", "Insert VariableDeclarationFragment(696) into VariableDeclarationStatement(697) at 1", "Insert SimpleType: String(699) into VariableDeclarationStatement(707) at 0", "Insert VariableDeclarationFragment(706) into VariableDeclarationStatement(707) at 1", "Insert SingleVariableDeclaration(711) into EnhancedForStatement(729) at 0", "Insert MethodInvocation(714) into EnhancedForStatement(729) at 1", "Insert Block(728) into EnhancedForStatement(729) at 2", "Move InstanceofExpression(857) into ParenthesizedExpression(772) at 0", "Insert MethodInvocation(1398) into ExpressionStatement(1399) at 0", "Insert MethodInvocation(1405) into ExpressionStatement(1406) at 0", "Insert ParenthesizedExpression(1420) into PrefixExpression: !(1421) at 0", "Insert SimpleName: param(247) into InstanceofExpression(250) at 0", "Insert SimpleType: CssBooleanExpressionNode(249) into InstanceofExpression(250) at 1", "Insert ExpressionStatement(254) into Block(255) at 0", "Insert ExpressionStatement(262) into Block(263) at 0", "Insert SimpleName: compositeNode(691) into VariableDeclarationFragment(696) at 0", "Insert CastExpression(695) into VariableDeclarationFragment(696) at 1", "Update SimpleName: CssUnknownAtRuleNode(623) to String", "Move SimpleName: CssUnknownAtRuleNode(623) into SimpleType: String(699) at 0", "Insert SimpleName: operatorName(700) into VariableDeclarationFragment(706) at 0", "Insert MethodInvocation(705) into VariableDeclarationFragment(706) at 1", "Update SimpleType: CssBlockNode(654) to CssValueNode", "Move SimpleType: CssBlockNode(654) into SingleVariableDeclaration(711) at 0", "Update SimpleName: block(655) to value", "Move SimpleName: block(655) into SingleVariableDeclaration(711) at 1", "Update SimpleName: block(657) to compositeNode", "Move SimpleName: block(657) into MethodInvocation(714) at 0", "Update SimpleName: getParent(658) to getValues", "Move SimpleName: getParent(658) into MethodInvocation(714) at 1", "Insert ExpressionStatement(718) into Block(728) at 0", "Move ExpressionStatement(1557) into Block(728) at 1", "Move ExpressionStatement(825) into Block(728) at 2", "Update SimpleName: sb(830) to deleteEndingIfEndingIs", "Update SimpleName: append(831) to operatorName", "Update SimpleName: node(858) to sb", "Move SimpleName: node(858) into MethodInvocation(1398) at 0", "Update SimpleName: getParent(859) to append", "Move SimpleName: getParent(859) into MethodInvocation(1398) at 1", "Insert StringLiteral: \" \"(1397) into MethodInvocation(1398) at 2", "Insert SimpleName: sb(1400) into MethodInvocation(1405) at 0", "Insert SimpleName: append(1401) into MethodInvocation(1405) at 1", "Move MethodInvocation(866) into MethodInvocation(1405) at 2", "Insert InstanceofExpression(1419) into ParenthesizedExpression(1420) at 0", "Update StringLiteral: \" \"(1498) to \" {\\n\"", "Insert SimpleName: CssBooleanExpressionNode(248) into SimpleType: CssBooleanExpressionNode(249) at 0", "Insert MethodInvocation(253) into ExpressionStatement(254) at 0", "Insert MethodInvocation(261) into ExpressionStatement(262) at 0", "Move SimpleType: CssCompositeValueNode(814) into CastExpression(695) at 0", "Insert SimpleName: node(694) into CastExpression(695) at 1", "Insert MethodInvocation(703) into MethodInvocation(705) at 0", "Insert SimpleName: getOperatorName(704) into MethodInvocation(705) at 1", "Update SimpleName: CssBlockNode(653) to CssValueNode", "Insert MethodInvocation(717) into ExpressionStatement(718) at 0", "Update SimpleName: node(864) to param", "Update SimpleName: getParent(865) to getValue", "Move MethodInvocation(1490) into InstanceofExpression(1419) at 0", "Insert SimpleType: CssDeclarationBlockNode(1418) into InstanceofExpression(1419) at 1", "Insert SimpleName: appendMediaParamterWithParentheses(251) into MethodInvocation(253) at 0", "Insert SimpleName: param(252) into MethodInvocation(253) at 1", "Update SimpleName: Joiner(277) to sb", "Move SimpleName: Joiner(277) into MethodInvocation(261) at 0", "Update SimpleName: on(278) to append", "Move SimpleName: on(278) into MethodInvocation(261) at 1", "Move MethodInvocation(283) into MethodInvocation(261) at 2", "Update SimpleName: sb(633) to compositeNode", "Move SimpleName: sb(633) into MethodInvocation(703) at 0", "Update SimpleName: append(634) to getOperator", "Move SimpleName: append(634) into MethodInvocation(703) at 1", "Insert SimpleName: enterValueNode(715) into MethodInvocation(717) at 0", "Insert SimpleName: value(716) into MethodInvocation(717) at 1", "Update SimpleName: getOperatorName(822) to operatorName", "Move SimpleName: getOperatorName(822) into MethodInvocation(726) at 2", "Insert SimpleName: CssDeclarationBlockNode(1417) into SimpleType: CssDeclarationBlockNode(1418) at 0", "Update SimpleName: c(279) to param", "Move SimpleName: c(279) into MethodInvocation(260) at 0", "Update SimpleName: getOperatorName(282) to getValue", "Delete QualifiedName: com.google.common.base.Preconditions.checkArgument(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.common.base.Joiner(4)", "Delete ImportDeclaration(5)", "Delete SimpleName: getOperator(280)", "Delete MethodInvocation(281)", "Delete SimpleName: size(242)", "Delete MethodInvocation(243)", "Delete NumberLiteral: 0(244)", "Delete InfixExpression: >(245)", "Delete SimpleName: node(246)", "Delete SimpleName: getType(247)", "Delete MethodInvocation(248)", "Delete SimpleName: hasBlock(249)", "Delete MethodInvocation(250)", "Delete SimpleName: node(251)", "Delete SimpleName: getBlock(252)", "Delete MethodInvocation(253)", "Delete NullLiteral(254)", "Delete InfixExpression: !=(255)", "Delete InfixExpression: &&(256)", "Delete ParenthesizedExpression(257)", "Delete InfixExpression: ||(258)", "Delete Block(264)", "Delete IfStatement(265)", "Delete Block(268)", "Delete MethodDeclaration(269)", "Delete Modifier: private(270)", "Delete PrimitiveType: void(271)", "Delete SimpleName: appendCompositeValueNode(272)", "Delete SimpleName: c(275)", "Delete SingleVariableDeclaration(276)", "Delete MethodInvocation(284)", "Delete SimpleName: appendTo(285)", "Delete SimpleName: getValues(288)", "Delete MethodInvocation(289)", "Delete MethodInvocation(290)", "Delete ExpressionStatement(291)", "Delete Block(292)", "Delete MethodDeclaration(293)", "Delete SimpleName: Override(327)", "Delete MarkerAnnotation(328)", "Delete Block(336)", "Delete SimpleName: Override(611)", "Delete MarkerAnnotation(612)", "Delete SimpleName: CssBlockNode(616)", "Delete SimpleType: CssBlockNode(617)", "Delete SimpleName: block(618)", "Delete SingleVariableDeclaration(619)", "Delete SimpleName: block(620)", "Delete SimpleName: getParent(621)", "Delete MethodInvocation(622)", "Delete SimpleType: CssUnknownAtRuleNode(624)", "Delete InstanceofExpression(625)", "Delete SimpleName: block(626)", "Delete SimpleName: getParent(627)", "Delete MethodInvocation(628)", "Delete SimpleName: CssMediaRuleNode(629)", "Delete SimpleType: CssMediaRuleNode(630)", "Delete InstanceofExpression(631)", "Delete InfixExpression: ||(632)", "Delete StringLiteral: \"{\\n\"(635)", "Delete MethodInvocation(636)", "Delete ExpressionStatement(637)", "Delete Block(642)", "Delete IfStatement(643)", "Delete BooleanLiteral: true(644)", "Delete ReturnStatement(645)", "Delete Block(646)", "Delete MethodDeclaration(647)", "Delete Modifier: public(650)", "Delete PrimitiveType: void(651)", "Delete SimpleName: leaveBlock(652)", "Delete SingleVariableDeclaration(656)", "Delete MethodInvocation(659)", "Delete SimpleName: CssMediaRuleNode(660)", "Delete SimpleType: CssMediaRuleNode(661)", "Delete InstanceofExpression(662)", "Delete IfStatement(681)", "Delete Block(682)", "Delete MethodDeclaration(683)", "Delete SimpleName: parent(819)", "Delete SimpleName: getOperator(820)", "Delete MethodInvocation(821)", "Delete MethodInvocation(823)", "Delete StringLiteral: \" \"(832)", "Delete SimpleName: checkArgument(755)", "Delete MethodInvocation(762)", "Delete ExpressionStatement(763)", "Delete SimpleName: inFunargs(793)", "Delete SimpleName: node(794)", "Delete MethodInvocation(795)", "Delete PrefixExpression: !(796)", "Delete IfStatement(803)", "Delete BooleanLiteral: true(804)", "Delete ReturnStatement(805)", "Delete BooleanLiteral: true(837)", "Delete Modifier: public(748)", "Delete PrimitiveType: boolean(749)", "Delete SimpleName: enterValueNode(750)", "Delete MethodDeclaration(807)", "Delete SimpleName: Override(808)", "Delete MarkerAnnotation(809)", "Delete Modifier: public(810)", "Delete PrimitiveType: boolean(811)", "Delete SimpleName: enterCompositeValueNodeOperator(812)", "Delete SimpleName: parent(815)", "Delete SingleVariableDeclaration(816)", "Delete SimpleName: inFunargs(826)", "Delete SimpleName: parent(827)", "Delete MethodInvocation(828)", "Delete PrefixExpression: !(829)", "Delete Block(835)", "Delete IfStatement(836)", "Delete Block(839)", "Delete MethodDeclaration(840)", "Delete TextElement: Returns true when @{code node}'s parent or grandparent is a function(841)", "Delete TextElement: arguments node.(842)", "Delete TagElement(843)", "Delete Javadoc(844)", "Delete SingleVariableDeclaration(851)", "Delete MethodInvocation(860)", "Delete InstanceofExpression(863)", "Delete SimpleName: getParent(867)", "Delete MethodInvocation(868)", "Delete SimpleName: CssFunctionArgumentsNode(869)", "Delete SimpleType: CssFunctionArgumentsNode(870)", "Delete InstanceofExpression(871)", "Delete InfixExpression: &&(872)", "Delete ParenthesizedExpression(873)", "Delete InfixExpression: ||(874)", "Delete ReturnStatement(875)", "Delete Block(876)", "Delete MethodDeclaration(877)", "Delete NullLiteral(1491)", "Delete InfixExpression: !=(1492)", "Delete SimpleName: size(1479)", "Delete MethodInvocation(1480)", "Delete NumberLiteral: 0(1481)", "Delete InfixExpression: >(1482)", "Delete ParenthesizedExpression(1494)", "Delete InfixExpression: ||(1495)", "Delete Modifier: public(1452)", "Delete PrimitiveType: boolean(1453)", "Delete SimpleName: enterUnknownAtRule(1454)", "Delete Block(1505)", "Delete MethodDeclaration(1506)"]}}, {"RemoveDefaultDeclarations_cluster": {"actions": [{"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from private to public", "operations": ["UPD Modifier: private from private to public"]}, {"root": "UPDATE from void to boolean", "operations": ["UPD PrimitiveType: void from void to boolean"]}, {"root": "UPDATE from removeDefault to enterValueNode", "operations": ["UPD SimpleName: removeDefault from removeDefault to enterValueNode"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.css.compiler.ast.CssCompositeValueNode", "DEL ImportDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: node", "DEL SimpleName: CssCompositeValueNode", "DEL SimpleName: removeDefault", "DEL ExpressionStatement", "DEL SimpleType: CssCompositeValueNode", "DEL MethodDeclaration", "DEL SimpleName: enterCompositeValueNode", "DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Override", "DEL Block", "DEL SimpleName: enterValueNode", "DEL Modifier: public", "DEL SimpleName: CssValueNode", "DEL SimpleType: CssValueNode", "DEL ReturnStatement", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL MarkerAnnotation", "DEL SimpleName: node", "DEL SimpleName: removeDefault", "DEL PrimitiveType: boolean", "DEL BooleanLiteral: true", "DEL MethodInvocation"]}]}}, {"RemoveDefaultDeclarations_diff": {"operations": ["Move MarkerAnnotation(56) into MethodDeclaration(76) at 0", "Update Modifier: private(89) to public", "Update PrimitiveType: void(90) to boolean", "Update SimpleName: removeDefault(91) to enterValueNode", "Move ReturnStatement(69) into Block(75) at 1", "Delete QualifiedName: com.google.common.css.compiler.ast.CssCompositeValueNode(4)", "Delete ImportDeclaration(5)", "Delete Modifier: public(57)", "Delete PrimitiveType: boolean(58)", "Delete SimpleName: enterCompositeValueNode(59)", "Delete SimpleName: CssCompositeValueNode(60)", "Delete SimpleType: CssCompositeValueNode(61)", "Delete SimpleName: node(62)", "Delete SingleVariableDeclaration(63)", "Delete SimpleName: removeDefault(64)", "Delete SimpleName: node(65)", "Delete MethodInvocation(66)", "Delete ExpressionStatement(67)", "Delete Block(70)", "Delete MethodDeclaration(71)", "Delete SimpleName: Override(72)", "Delete MarkerAnnotation(73)", "Delete Modifier: public(74)", "Delete PrimitiveType: boolean(75)", "Delete SimpleName: enterValueNode(76)", "Delete SimpleName: CssValueNode(77)", "Delete SimpleType: CssValueNode(78)", "Delete SimpleName: node(79)", "Delete SingleVariableDeclaration(80)", "Delete SimpleName: removeDefault(81)", "Delete SimpleName: node(82)", "Delete MethodInvocation(83)", "Delete ExpressionStatement(84)", "Delete BooleanLiteral: true(85)", "Delete ReturnStatement(86)", "Delete Block(87)", "Delete MethodDeclaration(88)"]}}, {"SExprPrinter_cluster": {"actions": [{"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.css.compiler.ast.CssNodesListNode", "DEL ImportDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ExpressionStatement", "DEL SimpleType: CssNodesListNode", "DEL ParameterizedType: CssNodesListNode<? extends CssNode>", "DEL SimpleName: node", "DEL WildcardType: ? extends CssNode", "DEL SimpleName: enter", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL SimpleType: CssNode", "DEL TextElement: Called between adjacent nodes in a media type list ", "DEL SimpleName: enterMediaTypeListDelimiter", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL Javadoc", "DEL SimpleName: CssNodesListNode", "DEL SimpleName: CssNode", "DEL TagElement", "DEL ReturnStatement", "DEL BooleanLiteral: true", "DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement", "DEL SimpleName: leaveMediaTypeListDelimiter", "DEL ParameterizedType: CssNodesListNode<? extends CssNode>", "DEL ExpressionStatement", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL TextElement: Called between adjacent nodes in a media type list ", "DEL MethodInvocation", "DEL SimpleName: leave", "DEL SimpleName: node", "DEL Modifier: public", "DEL Block", "DEL PrimitiveType: void", "DEL SimpleName: node", "DEL SimpleType: CssNode", "DEL MethodDeclaration", "DEL WildcardType: ? extends CssNode", "DEL SimpleName: CssNode", "DEL SimpleType: CssNodesListNode", "DEL SimpleName: CssNodesListNode"]}]}}, {"SExprPrinter_diff": {"operations": ["Delete QualifiedName: com.google.common.css.compiler.ast.CssNodesListNode(50)", "Delete ImportDeclaration(51)", "Delete TextElement: Called between adjacent nodes in a media type list (530)", "Delete TagElement(531)", "Delete Javadoc(532)", "Delete Modifier: public(533)", "Delete PrimitiveType: boolean(534)", "Delete SimpleName: enterMediaTypeListDelimiter(535)", "Delete SimpleName: CssNodesListNode(536)", "Delete SimpleType: CssNodesListNode(537)", "Delete SimpleName: CssNode(538)", "Delete SimpleType: CssNode(539)", "Delete WildcardType: ? extends CssNode(540)", "Delete ParameterizedType: CssNodesListNode<? extends CssNode>(541)", "Delete SimpleName: node(542)", "Delete SingleVariableDeclaration(543)", "Delete SimpleName: enter(544)", "Delete SimpleName: node(545)", "Delete MethodInvocation(546)", "Delete ExpressionStatement(547)", "Delete BooleanLiteral: true(548)", "Delete ReturnStatement(549)", "Delete Block(550)", "Delete MethodDeclaration(551)", "Delete TextElement: Called between adjacent nodes in a media type list (552)", "Delete TagElement(553)", "Delete Javadoc(554)", "Delete Modifier: public(555)", "Delete PrimitiveType: void(556)", "Delete SimpleName: leaveMediaTypeListDelimiter(557)", "Delete SimpleName: CssNodesListNode(558)", "Delete SimpleType: CssNodesListNode(559)", "Delete SimpleName: CssNode(560)", "Delete SimpleType: CssNode(561)", "Delete WildcardType: ? extends CssNode(562)", "Delete ParameterizedType: CssNodesListNode<? extends CssNode>(563)", "Delete SimpleName: node(564)", "Delete SingleVariableDeclaration(565)", "Delete SimpleName: leave(566)", "Delete SimpleName: node(567)", "Delete MethodInvocation(568)", "Delete ExpressionStatement(569)", "Delete Block(570)", "Delete MethodDeclaration(571)"]}}], "commit_stats": [{"total_files": 24, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}