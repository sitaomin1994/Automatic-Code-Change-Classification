{"application": "google-guice", "csha": "c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12", "files": [{"Errors_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 4"]}, {"root": "UPDATE from java.util.Collections to com.google.common.collect.Ordering", "operations": ["UPD QualifiedName: java.util.Collections from java.util.Collections to com.google.common.collect.Ordering"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: sort to MethodInvocation at 4"]}, {"root": "UPDATE from sort to sortedCopy", "operations": ["UPD SimpleName: sort from sort to sortedCopy"]}, {"root": "INS QualifiedName: root.errors to MethodInvocation at 4", "operations": ["INS QualifiedName: root.errors to MethodInvocation at 4"]}, {"root": "UPDATE from Comparator<Message> to Ordering<Message>", "operations": ["UPD ParameterizedType: Comparator<Message> from Comparator<Message> to Ordering<Message>"]}, {"root": "UPDATE from Comparator to Ordering", "operations": ["UPD SimpleType: Comparator from Comparator to Ordering", "UPD SimpleName: Comparator from Comparator to Ordering"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Comparator"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL QualifiedName: root.errors", "DEL SimpleType: List", "DEL SimpleName: result", "DEL SimpleName: newArrayList", "DEL VariableDeclarationFragment", "DEL SimpleType: Message", "DEL SimpleName: Lists", "DEL ParameterizedType: List<Message>", "DEL VariableDeclarationStatement", "DEL SimpleName: Message", "DEL SimpleName: List", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement"]}, {"root": "DEL SimpleName: Collections", "operations": ["DEL SimpleName: Collections"]}, {"root": "DEL SimpleName: result", "operations": ["DEL SimpleName: result"]}, {"root": "DEL SimpleName: result", "operations": ["DEL SimpleName: result"]}]}}, {"Errors_diff": {"operations": ["Move ImportDeclaration(79) into CompilationUnit(3111) at 4", "Update QualifiedName: java.util.Collections(78) to com.google.common.collect.Ordering", "Move MethodInvocation(2010) into ReturnStatement(1998) at 0", "Move SimpleName: sort(1979) into MethodInvocation(1997) at 4", "Update SimpleName: sort(1979) to sortedCopy", "Insert QualifiedName: root.errors(1996) into MethodInvocation(1997) at 2", "Update ParameterizedType: Comparator<Message>(1985) to Ordering<Message>", "Update SimpleType: Comparator(1982) to Ordering", "Update SimpleName: Comparator(1981) to Ordering", "Insert MarkerAnnotation(1970) into MethodDeclaration(1992) at 0", "Insert SimpleName: Override(1969) into MarkerAnnotation(1970) at 0", "Delete QualifiedName: java.util.Comparator(80)", "Delete ImportDeclaration(81)", "Delete SimpleName: List(1966)", "Delete SimpleType: List(1967)", "Delete SimpleName: Message(1968)", "Delete SimpleType: Message(1969)", "Delete ParameterizedType: List<Message>(1970)", "Delete SimpleName: result(1971)", "Delete SimpleName: Lists(1972)", "Delete SimpleName: newArrayList(1973)", "Delete QualifiedName: root.errors(1974)", "Delete MethodInvocation(1975)", "Delete VariableDeclarationFragment(1976)", "Delete VariableDeclarationStatement(1977)", "Delete ExpressionStatement(2011)", "Delete SimpleName: Collections(1978)", "Delete SimpleName: result(1980)", "Delete SimpleName: result(2012)"]}}, {"InjectorImpl_cluster": {"actions": [{"root": "UPDATE from != to ==", "operations": ["UPD InfixExpression: != from != to =="]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: != to InfixExpression: && at 1"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !", "DEL ParenthesizedExpression"]}]}}, {"InjectorImpl_diff": {"operations": ["Update InfixExpression: !=(1124) to ==", "Move InfixExpression: !=(1124) into InfixExpression: &&(1125) at 1", "Delete ParenthesizedExpression(1125)", "Delete PrefixExpression: !(1126)"]}}, {"InjectorShell_cluster": {"actions": [{"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Preconditions.checkNotNull", "DEL ImportDeclaration"]}]}}, {"InjectorShell_diff": {"operations": ["Delete QualifiedName: com.google.common.base.Preconditions.checkNotNull(14)", "Delete ImportDeclaration(15)"]}}, {"ProviderMethod_cluster": {"actions": [{"root": "MOVE from InfixExpression: +", "operations": ["MOV MethodInvocation to InfixExpression: + at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: toString", "DEL MethodInvocation"]}]}}, {"ProviderMethod_diff": {"operations": ["Move MethodInvocation(661) into InfixExpression: +(662) at 1", "Delete SimpleName: toString(662)", "Delete MethodInvocation(663)"]}}, {"Matchers_cluster": {"actions": [{"root": "INS StringLiteral: \"Annotation %s is missing RUNTIME retention\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"Annotation %s is missing RUNTIME retention\" to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getAnnotation to MethodInvocation at 1", "MOV SimpleName: annotationType to MethodInvocation at 2", "MOV SimpleName: element to MethodInvocation at 0"]}, {"root": "UPDATE from getAnnotation to isAnnotationPresent", "operations": ["UPD SimpleName: getAnnotation from getAnnotation to isAnnotationPresent"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL InfixExpression: +", "DEL StringLiteral: \" is missing RUNTIME retention\"", "DEL StringLiteral: \"Annotation \""]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL NullLiteral", "DEL InfixExpression: !=", "DEL MethodInvocation"]}]}}, {"Matchers_diff": {"operations": ["Insert StringLiteral: \"Annotation %s is missing RUNTIME retention\"(303) into MethodInvocation(307) at 2", "Move MethodInvocation(306) into MethodInvocation(307) at 3", "Insert MethodInvocation(395) into ReturnStatement(396) at 0", "Move SimpleName: element(394) into MethodInvocation(395) at 0", "Update SimpleName: getAnnotation(395) to isAnnotationPresent", "Move SimpleName: getAnnotation(395) into MethodInvocation(395) at 1", "Move SimpleName: annotationType(396) into MethodInvocation(395) at 2", "Delete StringLiteral: \"Annotation \"(303)", "Delete StringLiteral: \" is missing RUNTIME retention\"(307)", "Delete InfixExpression: +(308)", "Delete MethodInvocation(397)", "Delete NullLiteral(398)", "Delete InfixExpression: !=(399)"]}}, {"FactoryProvider_cluster": {"actions": [{"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getAnnotation to MethodInvocation at 1", "MOV TypeLiteral to MethodInvocation at 2", "MOV SimpleName: constructor to MethodInvocation at 0"]}, {"root": "UPDATE from getAnnotation to isAnnotationPresent", "operations": ["UPD SimpleName: getAnnotation from getAnnotation to isAnnotationPresent"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL InfixExpression: !=", "DEL MethodInvocation", "DEL NullLiteral"]}]}}, {"FactoryProvider_diff": {"operations": ["Insert MethodInvocation(754) into IfStatement(776) at 0", "Move SimpleName: constructor(749) into MethodInvocation(754) at 0", "Update SimpleName: getAnnotation(750) to isAnnotationPresent", "Move SimpleName: getAnnotation(750) into MethodInvocation(754) at 1", "Move TypeLiteral(753) into MethodInvocation(754) at 2", "Delete MethodInvocation(754)", "Delete NullLiteral(755)", "Delete InfixExpression: !=(756)"]}}, {"FactoryProvider2_cluster": {"actions": [{"root": "UPDATE from equals to isEmpty", "operations": ["UPD SimpleName: equals from equals to isEmpty"]}, {"root": "DEL StringLiteral: \"\"", "operations": ["DEL StringLiteral: \"\""]}]}}, {"FactoryProvider2_diff": {"operations": ["Update SimpleName: equals(226) to isEmpty", "Delete StringLiteral: \"\"(227)"]}}, {"Parameter_cluster": {"actions": [{"root": "INS ReturnStatement to Block at 3", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 3", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: type to MethodInvocation at 2", "MOV SimpleName: toString to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: append to MethodInvocation at 1", "MOV SimpleName: result to MethodInvocation at 0"]}, {"root": "UPDATE from \"@Assisted\" to \"@Assisted \"", "operations": ["UPD StringLiteral: \"@Assisted\" from \"@Assisted\" to \"@Assisted \""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: append to MethodInvocation at 1", "MOV StringLiteral: \" \" to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: result to MethodInvocation at 0", "MOV SimpleName: append to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: bindingAnnotation to MethodInvocation at 2"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL StringLiteral: \" \"", "DEL SimpleName: result", "DEL MethodInvocation", "DEL SimpleName: append"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: toString", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: result"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: result", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: toString"]}]}}, {"Parameter_diff": {"operations": ["Insert ReturnStatement(177) into Block(178) at 3", "Insert MethodInvocation(176) into ReturnStatement(177) at 0", "Insert ExpressionStatement(168) into Block(169) at 0", "Insert MethodInvocation(174) into MethodInvocation(176) at 0", "Move SimpleName: toString(183) into MethodInvocation(176) at 1", "Insert MethodInvocation(167) into ExpressionStatement(168) at 0", "Move SimpleName: result(180) into MethodInvocation(174) at 0", "Move SimpleName: append(181) into MethodInvocation(174) at 1", "Move SimpleName: type(182) into MethodInvocation(174) at 2", "Update StringLiteral: \"@Assisted\"(153) to \"@Assisted \"", "Insert MethodInvocation(164) into MethodInvocation(167) at 0", "Move SimpleName: append(174) into MethodInvocation(167) at 1", "Move StringLiteral: \" \"(175) into MethodInvocation(167) at 2", "Move SimpleName: result(166) into MethodInvocation(164) at 0", "Move SimpleName: append(167) into MethodInvocation(164) at 1", "Move SimpleName: bindingAnnotation(168) into MethodInvocation(164) at 2", "Delete SimpleName: result(156)", "Delete SimpleName: append(157)", "Delete StringLiteral: \" \"(158)", "Delete MethodInvocation(159)", "Delete ExpressionStatement(160)", "Delete SimpleName: toString(169)", "Delete MethodInvocation(170)", "Delete MethodInvocation(171)", "Delete ExpressionStatement(172)", "Delete SimpleName: result(173)", "Delete MethodInvocation(176)", "Delete ExpressionStatement(177)", "Delete MethodInvocation(184)", "Delete MethodInvocation(185)", "Delete ExpressionStatement(186)", "Delete SimpleName: result(187)", "Delete SimpleName: toString(188)", "Delete MethodInvocation(189)", "Delete ReturnStatement(190)"]}}, {"MiniGuice_cluster": {"actions": [{"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: method to MethodInvocation at 0", "MOV SimpleName: getAnnotation to MethodInvocation at 1", "MOV TypeLiteral to MethodInvocation at 2"]}, {"root": "UPDATE from getAnnotation to isAnnotationPresent", "operations": ["UPD SimpleName: getAnnotation from getAnnotation to isAnnotationPresent", "UPD SimpleName: getAnnotation from getAnnotation to isAnnotationPresent", "UPD SimpleName: getAnnotation from getAnnotation to isAnnotationPresent", "UPD SimpleName: getAnnotation from getAnnotation to isAnnotationPresent", "UPD SimpleName: getAnnotation from getAnnotation to isAnnotationPresent", "UPD SimpleName: getAnnotation from getAnnotation to isAnnotationPresent"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS PrefixExpression: ! to IfStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getAnnotation to MethodInvocation at 1", "MOV TypeLiteral to MethodInvocation at 2", "MOV SimpleName: type to MethodInvocation at 0"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from PrefixExpression: !", "operations": ["MOV MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS MethodInvocation to IfStatement at 0"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS PrefixExpression: ! to IfStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getAnnotation to MethodInvocation at 1", "MOV SimpleName: constructor to MethodInvocation at 0", "MOV TypeLiteral to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV TypeLiteral to MethodInvocation at 2", "MOV SimpleName: method to MethodInvocation at 0", "MOV SimpleName: getAnnotation to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getAnnotation to MethodInvocation at 1", "MOV TypeLiteral to MethodInvocation at 2", "MOV SimpleName: field to MethodInvocation at 0"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL InfixExpression: !=", "DEL NullLiteral", "DEL MethodInvocation"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL NullLiteral", "DEL InfixExpression: !=", "DEL MethodInvocation"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL MethodInvocation", "DEL InfixExpression: ==", "DEL NullLiteral"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL MethodInvocation", "DEL NullLiteral", "DEL InfixExpression: =="]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL NullLiteral", "DEL InfixExpression: !=", "DEL MethodInvocation"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL NullLiteral", "DEL InfixExpression: =="]}]}}, {"MiniGuice_diff": {"operations": ["Insert MethodInvocation(695) into VariableDeclarationFragment(696) at 1", "Insert MethodInvocation(1148) into VariableDeclarationFragment(1149) at 1", "Move SimpleName: method(692) into MethodInvocation(695) at 0", "Update SimpleName: getAnnotation(693) to isAnnotationPresent", "Move SimpleName: getAnnotation(693) into MethodInvocation(695) at 1", "Move TypeLiteral(696) into MethodInvocation(695) at 2", "Insert PrefixExpression: !(931) into IfStatement(934) at 0", "Move SimpleName: type(1149) into MethodInvocation(1148) at 0", "Update SimpleName: getAnnotation(1150) to isAnnotationPresent", "Move SimpleName: getAnnotation(1150) into MethodInvocation(1148) at 1", "Move TypeLiteral(1153) into MethodInvocation(1148) at 2", "Insert PrefixExpression: !(1426) into IfStatement(1429) at 0", "Insert MethodInvocation(930) into PrefixExpression: !(931) at 0", "Move MethodInvocation(1433) into PrefixExpression: !(1426) at 0", "Insert MethodInvocation(541) into IfStatement(567) at 0", "Insert PrefixExpression: !(847) into IfStatement(850) at 0", "Move SimpleName: constructor(930) into MethodInvocation(930) at 0", "Update SimpleName: getAnnotation(931) to isAnnotationPresent", "Move SimpleName: getAnnotation(931) into MethodInvocation(930) at 1", "Move TypeLiteral(934) into MethodInvocation(930) at 2", "Update SimpleName: getAnnotation(1429) to isAnnotationPresent", "Move SimpleName: method(536) into MethodInvocation(541) at 0", "Update SimpleName: getAnnotation(537) to isAnnotationPresent", "Move SimpleName: getAnnotation(537) into MethodInvocation(541) at 1", "Move TypeLiteral(540) into MethodInvocation(541) at 2", "Insert MethodInvocation(846) into PrefixExpression: !(847) at 0", "Move SimpleName: field(845) into MethodInvocation(846) at 0", "Update SimpleName: getAnnotation(846) to isAnnotationPresent", "Move SimpleName: getAnnotation(846) into MethodInvocation(846) at 1", "Move TypeLiteral(849) into MethodInvocation(846) at 2", "Delete MethodInvocation(541)", "Delete NullLiteral(542)", "Delete InfixExpression: !=(543)", "Delete MethodInvocation(697)", "Delete NullLiteral(698)", "Delete InfixExpression: !=(699)", "Delete MethodInvocation(850)", "Delete NullLiteral(851)", "Delete InfixExpression: ==(852)", "Delete MethodInvocation(935)", "Delete NullLiteral(936)", "Delete InfixExpression: ==(937)", "Delete MethodInvocation(1154)", "Delete NullLiteral(1155)", "Delete InfixExpression: !=(1156)", "Delete NullLiteral(1434)", "Delete InfixExpression: ==(1435)"]}}, {"Multibinder_cluster": {"actions": [{"root": "INS InfixExpression: + to ReturnStatement at 0", "operations": ["INS MethodInvocation to ConditionalExpression at 0", "INS InfixExpression: + to ReturnStatement at 0", "INS StringLiteral: \" \" to InfixExpression: + at 1", "INS StringLiteral: \"Multibinder<\" to InfixExpression: + at 1", "INS ParenthesizedExpression to InfixExpression: + at 0", "INS ConditionalExpression to ParenthesizedExpression at 0", "INS SimpleName: elementType to InfixExpression: + at 2", "INS InfixExpression: + to ConditionalExpression at 2", "INS StringLiteral: \">\" to InfixExpression: + at 3", "INS SimpleName: setName to InfixExpression: + at 0"]}, {"root": "UPDATE from \" \" to \"\"", "operations": ["UPD StringLiteral: \" \" from \" \" to \"\""]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV StringLiteral: \" \" to ConditionalExpression at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: length to MethodInvocation at 1", "MOV SimpleName: setName to MethodInvocation at 0"]}, {"root": "UPDATE from length to isEmpty", "operations": ["UPD SimpleName: length from length to isEmpty"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: elementType", "DEL StringLiteral: \"\"", "DEL SimpleName: setName", "DEL SimpleName: append", "DEL MethodInvocation", "DEL StringLiteral: \"Multibinder<\"", "DEL NumberLiteral: 0", "DEL ClassInstanceCreation", "DEL SimpleType: StringBuilder", "DEL SimpleName: append", "DEL MethodInvocation", "DEL MethodInvocation", "DEL StringLiteral: \">\"", "DEL SimpleName: append", "DEL MethodInvocation", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: toString", "DEL ConditionalExpression", "DEL SimpleName: StringBuilder", "DEL SimpleName: append", "DEL MethodInvocation", "DEL MethodInvocation"]}]}}, {"Multibinder_diff": {"operations": ["Insert InfixExpression: +(1501) into ReturnStatement(1502) at 0", "Insert ParenthesizedExpression(1497) into InfixExpression: +(1501) at 0", "Insert StringLiteral: \"Multibinder<\"(1498) into InfixExpression: +(1501) at 1", "Insert SimpleName: elementType(1499) into InfixExpression: +(1501) at 2", "Insert StringLiteral: \">\"(1500) into InfixExpression: +(1501) at 3", "Insert ConditionalExpression(1496) into ParenthesizedExpression(1497) at 0", "Insert MethodInvocation(1491) into ConditionalExpression(1496) at 0", "Update StringLiteral: \" \"(1501) to \"\"", "Move StringLiteral: \" \"(1501) into ConditionalExpression(1496) at 1", "Insert InfixExpression: +(1495) into ConditionalExpression(1496) at 2", "Move SimpleName: setName(1496) into MethodInvocation(1491) at 0", "Update SimpleName: length(1497) to isEmpty", "Move SimpleName: length(1497) into MethodInvocation(1491) at 1", "Insert SimpleName: setName(1493) into InfixExpression: +(1495) at 0", "Insert StringLiteral: \" \"(1494) into InfixExpression: +(1495) at 1", "Delete SimpleName: StringBuilder(1489)", "Delete SimpleType: StringBuilder(1490)", "Delete ClassInstanceCreation(1491)", "Delete SimpleName: append(1492)", "Delete SimpleName: setName(1493)", "Delete MethodInvocation(1494)", "Delete SimpleName: append(1495)", "Delete MethodInvocation(1498)", "Delete NumberLiteral: 0(1499)", "Delete InfixExpression: >(1500)", "Delete StringLiteral: \"\"(1502)", "Delete ConditionalExpression(1503)", "Delete MethodInvocation(1504)", "Delete SimpleName: append(1505)", "Delete StringLiteral: \"Multibinder<\"(1506)", "Delete MethodInvocation(1507)", "Delete SimpleName: append(1508)", "Delete SimpleName: elementType(1509)", "Delete MethodInvocation(1510)", "Delete SimpleName: append(1511)", "Delete StringLiteral: \">\"(1512)", "Delete MethodInvocation(1513)", "Delete SimpleName: toString(1514)", "Delete MethodInvocation(1515)"]}}, {"AsyncService_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: com.google.common.util.concurrent.Runnables to ImportDeclaration at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS SimpleName: Runnables to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: doNothing to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS SimpleName: Runnables to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: doNothing to MethodInvocation at 1"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Block", "DEL Modifier: final", "DEL PrimitiveType: void", "DEL SimpleName: NOOP", "DEL Modifier: public", "DEL TextElement: A runnable that does nothing.", "DEL Modifier: private", "DEL TagElement", "DEL SimpleType: Runnable", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL AnonymousClassDeclaration", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: Runnable", "DEL SimpleType: Runnable", "DEL SimpleName: run", "DEL Modifier: static", "DEL SimpleName: Runnable", "DEL Javadoc"]}, {"root": "DEL SimpleName: NOOP", "operations": ["DEL SimpleName: NOOP"]}, {"root": "DEL SimpleName: NOOP", "operations": ["DEL SimpleName: NOOP"]}]}}, {"AsyncService_diff": {"operations": ["Insert ImportDeclaration(17) into CompilationUnit(229) at 2", "Insert QualifiedName: com.google.common.util.concurrent.Runnables(16) into ImportDeclaration(17) at 0", "Insert MethodInvocation(94) into ClassInstanceCreation(96) at 1", "Insert MethodInvocation(170) into ClassInstanceCreation(172) at 1", "Insert SimpleName: Runnables(92) into MethodInvocation(94) at 0", "Insert SimpleName: doNothing(93) into MethodInvocation(94) at 1", "Insert SimpleName: Runnables(168) into MethodInvocation(170) at 0", "Insert SimpleName: doNothing(169) into MethodInvocation(170) at 1", "Delete TextElement: A runnable that does nothing.(44)", "Delete TagElement(45)", "Delete Javadoc(46)", "Delete Modifier: private(47)", "Delete Modifier: static(48)", "Delete Modifier: final(49)", "Delete SimpleName: Runnable(50)", "Delete SimpleType: Runnable(51)", "Delete SimpleName: NOOP(52)", "Delete SimpleName: Runnable(53)", "Delete SimpleType: Runnable(54)", "Delete Modifier: public(55)", "Delete PrimitiveType: void(56)", "Delete SimpleName: run(57)", "Delete Block(58)", "Delete MethodDeclaration(59)", "Delete AnonymousClassDeclaration(60)", "Delete ClassInstanceCreation(61)", "Delete VariableDeclarationFragment(62)", "Delete FieldDeclaration(63)", "Delete SimpleName: NOOP(110)", "Delete SimpleName: NOOP(184)"]}}, {"ManagedFilterPipeline_cluster": {"actions": [{"root": "UPDATE from newIdentityHashMap to newIdentityHashSet", "operations": ["UPD SimpleName: newIdentityHashMap from newIdentityHashMap to newIdentityHashSet", "UPD SimpleName: newIdentityHashMap from newIdentityHashMap to newIdentityHashSet"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: newIdentityHashMap to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: newIdentityHashMap to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.Maps"]}, {"root": "DEL SimpleName: newSetFromMap", "operations": ["DEL SimpleName: newSetFromMap"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: Maps", "DEL SimpleName: Boolean", "DEL SimpleName: Filter", "DEL MethodInvocation", "DEL SimpleType: Filter", "DEL SimpleType: Boolean"]}, {"root": "DEL SimpleName: newSetFromMap", "operations": ["DEL SimpleName: newSetFromMap"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleType: Filter", "DEL SimpleName: Maps", "DEL SimpleName: Boolean", "DEL SimpleName: Filter", "DEL MethodInvocation", "DEL SimpleType: Boolean"]}]}}, {"ManagedFilterPipeline_diff": {"operations": ["Update SimpleName: newIdentityHashMap(267) to newIdentityHashSet", "Move SimpleName: newIdentityHashMap(267) into MethodInvocation(260) at 1", "Update SimpleName: newIdentityHashMap(447) to newIdentityHashSet", "Move SimpleName: newIdentityHashMap(447) into MethodInvocation(433) at 1", "Delete QualifiedName: com.google.common.collect.Maps(16)", "Delete ImportDeclaration(17)", "Delete SimpleName: newSetFromMap(261)", "Delete SimpleName: Maps(262)", "Delete SimpleName: Filter(263)", "Delete SimpleType: Filter(264)", "Delete SimpleName: Boolean(265)", "Delete SimpleType: Boolean(266)", "Delete MethodInvocation(268)", "Delete SimpleName: newSetFromMap(441)", "Delete SimpleName: Maps(442)", "Delete SimpleName: Filter(443)", "Delete SimpleType: Filter(444)", "Delete SimpleName: Boolean(445)", "Delete SimpleType: Boolean(446)", "Delete MethodInvocation(448)"]}}, {"ManagedServletPipeline_cluster": {"actions": [{"root": "UPDATE from newIdentityHashMap to newIdentityHashSet", "operations": ["UPD SimpleName: newIdentityHashMap from newIdentityHashMap to newIdentityHashSet", "UPD SimpleName: newIdentityHashMap from newIdentityHashMap to newIdentityHashSet"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: newIdentityHashMap to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: newIdentityHashMap to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.Maps"]}, {"root": "DEL SimpleName: newSetFromMap", "operations": ["DEL SimpleName: newSetFromMap"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleType: HttpServlet", "DEL SimpleName: Maps", "DEL SimpleName: Boolean", "DEL SimpleType: Boolean", "DEL SimpleName: HttpServlet"]}, {"root": "DEL SimpleName: newSetFromMap", "operations": ["DEL SimpleName: newSetFromMap"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleType: HttpServlet", "DEL SimpleName: HttpServlet", "DEL SimpleName: Maps", "DEL SimpleName: Boolean", "DEL SimpleType: Boolean", "DEL MethodInvocation"]}]}}, {"ManagedServletPipeline_diff": {"operations": ["Update SimpleName: newIdentityHashMap(214) to newIdentityHashSet", "Move SimpleName: newIdentityHashMap(214) into MethodInvocation(207) at 1", "Update SimpleName: newIdentityHashMap(286) to newIdentityHashSet", "Move SimpleName: newIdentityHashMap(286) into MethodInvocation(272) at 1", "Delete QualifiedName: com.google.common.collect.Maps(18)", "Delete ImportDeclaration(19)", "Delete SimpleName: newSetFromMap(208)", "Delete SimpleName: Maps(209)", "Delete SimpleName: HttpServlet(210)", "Delete SimpleType: HttpServlet(211)", "Delete SimpleName: Boolean(212)", "Delete SimpleType: Boolean(213)", "Delete MethodInvocation(215)", "Delete SimpleName: newSetFromMap(280)", "Delete SimpleName: Maps(281)", "Delete SimpleName: HttpServlet(282)", "Delete SimpleType: HttpServlet(283)", "Delete SimpleName: Boolean(284)", "Delete SimpleType: Boolean(285)", "Delete MethodInvocation(287)"]}}, {"ServletDefinition_cluster": {"actions": [{"root": "UPDATE from != to ==", "operations": ["UPD InfixExpression: != from != to ==", "UPD InfixExpression: != from != to =="]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: != to InfixExpression: && at 1"]}, {"root": "MOVE from InfixExpression: !=", "operations": ["MOV NullLiteral to InfixExpression: != at 2"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: != to InfixExpression: && at 1"]}, {"root": "MOVE from InfixExpression: !=", "operations": ["MOV NullLiteral to InfixExpression: != at 2"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL ParenthesizedExpression", "DEL PrefixExpression: !"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL ParenthesizedExpression", "DEL PrefixExpression: !"]}]}}, {"ServletDefinition_diff": {"operations": ["Update InfixExpression: !=(700) to ==", "Move InfixExpression: !=(700) into InfixExpression: &&(701) at 1", "Move NullLiteral(695) into InfixExpression: ==(700) at 2", "Update InfixExpression: !=(716) to ==", "Move InfixExpression: !=(716) into InfixExpression: &&(715) at 1", "Move NullLiteral(711) into InfixExpression: ==(714) at 2", "Delete ParenthesizedExpression(701)", "Delete PrefixExpression: !(702)", "Delete ParenthesizedExpression(717)", "Delete PrefixExpression: !(718)"]}}, {"CheckedProviderMethod_cluster": {"actions": [{"root": "MOVE from InfixExpression: +", "operations": ["MOV MethodInvocation to InfixExpression: + at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: toString", "DEL MethodInvocation"]}]}}, {"CheckedProviderMethod_diff": {"operations": ["Move MethodInvocation(528) into InfixExpression: +(529) at 1", "Delete SimpleName: toString(529)", "Delete MethodInvocation(530)"]}}, {"Manager_cluster": {"actions": [{"root": "INS SimpleName: name to InfixExpression: + at 1", "operations": ["INS SimpleName: name to InfixExpression: + at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: toString", "DEL MethodInvocation", "DEL SimpleName: name"]}]}}, {"Manager_diff": {"operations": ["Insert SimpleName: name(223) into InfixExpression: +(224) at 1", "Delete SimpleName: name(223)", "Delete SimpleName: toString(224)", "Delete MethodInvocation(225)"]}}], "commit_stats": [{"total_files": 38, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}