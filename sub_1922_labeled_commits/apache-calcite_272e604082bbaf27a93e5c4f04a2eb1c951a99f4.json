{"application": "apache-calcite", "csha": "272e604082bbaf27a93e5c4f04a2eb1c951a99f4", "files": [{"SqlTimeLiteral_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: com.google.common.base.Preconditions to ImportDeclaration at 0"]}, {"root": "UPDATE from hasTZ to hasTimeZone", "operations": ["UPD SimpleName: hasTZ from hasTZ to hasTimeZone", "UPD SimpleName: hasTZ from hasTZ to hasTimeZone", "UPD SimpleName: hasTZ from hasTZ to hasTimeZone"]}, {"root": "INS ConstructorInvocation to Block at 0", "operations": ["INS SimpleName: t to ConstructorInvocation at 0", "INS SimpleName: precision to ConstructorInvocation at 1", "INS SimpleName: hasTimeZone to ConstructorInvocation at 2", "INS ConstructorInvocation to Block at 0", "INS SimpleName: pos to ConstructorInvocation at 4", "INS QualifiedName: DateTimeUtils.TIME_FORMAT_STRING to ConstructorInvocation at 3"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS InfixExpression: && to MethodInvocation at 2", "INS InfixExpression: >= to InfixExpression: && at 0", "INS FieldAccess to InfixExpression: >= at 0", "INS FieldAccess to InfixExpression: <= at 0", "INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS InfixExpression: <= to InfixExpression: && at 1", "INS ExpressionStatement to Block at 1", "INS ThisExpression to FieldAccess at 0", "INS NumberLiteral: 3 to InfixExpression: <= at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: precision to FieldAccess at 1", "INS SimpleName: precision to FieldAccess at 1", "INS SimpleName: checkArgument to MethodInvocation at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: Preconditions to MethodInvocation at 0"]}, {"root": "DEL SuperConstructorInvocation", "operations": ["DEL SuperConstructorInvocation", "DEL SimpleName: hasTZ", "DEL SimpleName: t", "DEL QualifiedName: DateTimeUtils.TIME_FORMAT_STRING", "DEL SimpleName: pos", "DEL QualifiedName: SqlTypeName.TIME", "DEL SimpleName: precision"]}, {"root": "DEL AssertStatement", "operations": ["DEL AssertStatement", "DEL NumberLiteral: 3", "DEL SimpleName: precision", "DEL InfixExpression: <="]}]}}, {"SqlTimeLiteral_diff": {"operations": ["Insert ImportDeclaration(9) into CompilationUnit(201) at 4", "Insert QualifiedName: com.google.common.base.Preconditions(8) into ImportDeclaration(9) at 0", "Update SimpleName: hasTZ(33) to hasTimeZone", "Insert ConstructorInvocation(46) into Block(47) at 0", "Update SimpleName: hasTZ(57) to hasTimeZone", "Insert ExpressionStatement(89) into Block(90) at 1", "Insert SimpleName: t(41) into ConstructorInvocation(46) at 0", "Insert SimpleName: precision(42) into ConstructorInvocation(46) at 1", "Insert SimpleName: hasTimeZone(43) into ConstructorInvocation(46) at 2", "Insert QualifiedName: DateTimeUtils.TIME_FORMAT_STRING(44) into ConstructorInvocation(46) at 3", "Insert SimpleName: pos(45) into ConstructorInvocation(46) at 4", "Update SimpleName: hasTZ(68) to hasTimeZone", "Insert MethodInvocation(88) into ExpressionStatement(89) at 0", "Insert SimpleName: Preconditions(75) into MethodInvocation(88) at 0", "Insert SimpleName: checkArgument(76) into MethodInvocation(88) at 1", "Insert InfixExpression: &&(87) into MethodInvocation(88) at 2", "Insert InfixExpression: >=(81) into InfixExpression: &&(87) at 0", "Insert InfixExpression: <=(86) into InfixExpression: &&(87) at 1", "Insert FieldAccess(79) into InfixExpression: >=(81) at 0", "Insert NumberLiteral: 0(80) into InfixExpression: >=(81) at 1", "Insert FieldAccess(84) into InfixExpression: <=(86) at 0", "Insert NumberLiteral: 3(85) into InfixExpression: <=(86) at 1", "Insert ThisExpression(77) into FieldAccess(79) at 0", "Insert SimpleName: precision(78) into FieldAccess(79) at 1", "Insert ThisExpression(82) into FieldAccess(84) at 0", "Insert SimpleName: precision(83) into FieldAccess(84) at 1", "Delete SimpleName: t(39)", "Delete SimpleName: hasTZ(40)", "Delete QualifiedName: SqlTypeName.TIME(41)", "Delete SimpleName: precision(42)", "Delete QualifiedName: DateTimeUtils.TIME_FORMAT_STRING(43)", "Delete SimpleName: pos(44)", "Delete SuperConstructorInvocation(45)", "Delete SimpleName: precision(138)", "Delete NumberLiteral: 3(139)", "Delete InfixExpression: <=(140)", "Delete AssertStatement(141)"]}}, {"SqlTimestampLiteral_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: com.google.common.base.Preconditions to ImportDeclaration at 0"]}, {"root": "INS ConstructorInvocation to Block at 0", "operations": ["INS ConstructorInvocation to Block at 0", "INS SimpleName: cal to ConstructorInvocation at 0", "INS QualifiedName: DateTimeUtils.TIMESTAMP_FORMAT_STRING to ConstructorInvocation at 3", "INS SimpleName: pos to ConstructorInvocation at 4", "INS SimpleName: precision to ConstructorInvocation at 1", "INS SimpleName: hasTimeZone to ConstructorInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: Preconditions to MethodInvocation at 0", "INS SimpleName: precision to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS InfixExpression: <= to InfixExpression: && at 1", "INS SimpleName: checkArgument to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS ExpressionStatement to Block at 1", "INS InfixExpression: >= to InfixExpression: && at 0", "INS SimpleName: precision to FieldAccess at 1", "INS NumberLiteral: 3 to InfixExpression: <= at 1", "INS FieldAccess to InfixExpression: <= at 0", "INS ThisExpression to FieldAccess at 0", "INS InfixExpression: && to MethodInvocation at 2", "INS FieldAccess to InfixExpression: >= at 0"]}, {"root": "DEL SuperConstructorInvocation", "operations": ["DEL SimpleName: cal", "DEL SimpleName: precision", "DEL QualifiedName: DateTimeUtils.TIMESTAMP_FORMAT_STRING", "DEL SimpleName: hasTimeZone", "DEL SuperConstructorInvocation", "DEL QualifiedName: SqlTypeName.TIMESTAMP", "DEL SimpleName: pos"]}]}}, {"SqlTimestampLiteral_diff": {"operations": ["Insert ImportDeclaration(9) into CompilationUnit(250) at 4", "Insert QualifiedName: com.google.common.base.Preconditions(8) into ImportDeclaration(9) at 0", "Insert ConstructorInvocation(47) into Block(48) at 0", "Insert ExpressionStatement(91) into Block(92) at 1", "Insert SimpleName: cal(42) into ConstructorInvocation(47) at 0", "Insert SimpleName: precision(43) into ConstructorInvocation(47) at 1", "Insert SimpleName: hasTimeZone(44) into ConstructorInvocation(47) at 2", "Insert QualifiedName: DateTimeUtils.TIMESTAMP_FORMAT_STRING(45) into ConstructorInvocation(47) at 3", "Insert SimpleName: pos(46) into ConstructorInvocation(47) at 4", "Insert MethodInvocation(90) into ExpressionStatement(91) at 0", "Insert SimpleName: Preconditions(77) into MethodInvocation(90) at 0", "Insert SimpleName: checkArgument(78) into MethodInvocation(90) at 1", "Insert InfixExpression: &&(89) into MethodInvocation(90) at 2", "Insert InfixExpression: >=(83) into InfixExpression: &&(89) at 0", "Insert InfixExpression: <=(88) into InfixExpression: &&(89) at 1", "Insert FieldAccess(81) into InfixExpression: >=(83) at 0", "Insert NumberLiteral: 0(82) into InfixExpression: >=(83) at 1", "Insert FieldAccess(86) into InfixExpression: <=(88) at 0", "Insert NumberLiteral: 3(87) into InfixExpression: <=(88) at 1", "Insert ThisExpression(79) into FieldAccess(81) at 0", "Insert SimpleName: precision(80) into FieldAccess(81) at 1", "Insert ThisExpression(84) into FieldAccess(86) at 0", "Insert SimpleName: precision(85) into FieldAccess(86) at 1", "Delete SimpleName: cal(40)", "Delete SimpleName: hasTimeZone(41)", "Delete QualifiedName: SqlTypeName.TIMESTAMP(42)", "Delete SimpleName: precision(43)", "Delete QualifiedName: DateTimeUtils.TIMESTAMP_FORMAT_STRING(44)", "Delete SimpleName: pos(45)", "Delete SuperConstructorInvocation(46)"]}}, {"SqlToRelConverter_cluster": {"actions": [{"root": "INS MethodInvocation to MethodInvocation at 4", "operations": ["INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleName: leftKeys to MethodInvocation at 0", "INS SimpleName: ensureType to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS BooleanLiteral: true to MethodInvocation at 4", "INS SimpleName: rexBuilder to MethodInvocation at 0", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS SimpleName: getType to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "INS MethodInvocation to MethodInvocation at 4", "operations": ["INS BooleanLiteral: true to MethodInvocation at 4", "INS SimpleName: getType to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleName: rexBuilder to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: ensureType to MethodInvocation at 1", "INS QualifiedName: pair.left to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}]}}, {"SqlToRelConverter_diff": {"operations": ["Insert MethodInvocation(4118) into MethodInvocation(4119) at 4", "Insert SimpleName: rexBuilder(4105) into MethodInvocation(4118) at 0", "Insert SimpleName: ensureType(4106) into MethodInvocation(4118) at 1", "Insert MethodInvocation(4112) into MethodInvocation(4118) at 2", "Move MethodInvocation(4108) into MethodInvocation(4118) at 3", "Insert BooleanLiteral: true(4117) into MethodInvocation(4118) at 4", "Insert MethodInvocation(4110) into MethodInvocation(4112) at 0", "Insert SimpleName: getType(4111) into MethodInvocation(4112) at 1", "Insert SimpleName: leftKeys(4107) into MethodInvocation(4110) at 0", "Insert SimpleName: get(4108) into MethodInvocation(4110) at 1", "Insert NumberLiteral: 0(4109) into MethodInvocation(4110) at 2", "Insert MethodInvocation(4208) into MethodInvocation(4209) at 4", "Insert SimpleName: rexBuilder(4198) into MethodInvocation(4208) at 0", "Insert SimpleName: ensureType(4199) into MethodInvocation(4208) at 1", "Insert MethodInvocation(4202) into MethodInvocation(4208) at 2", "Move MethodInvocation(4191) into MethodInvocation(4208) at 3", "Insert BooleanLiteral: true(4207) into MethodInvocation(4208) at 4", "Insert QualifiedName: pair.left(4200) into MethodInvocation(4202) at 0", "Insert SimpleName: getType(4201) into MethodInvocation(4202) at 1"]}}, {"StandardConvertletTable_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 56"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS ImportDeclaration to CompilationUnit at 7", "INS QualifiedName: org.apache.calcite.rel.type.RelDataTypeFamily to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 49", "operations": ["INS QualifiedName: org.apache.calcite.sql.type.SqlTypeFamily to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 49"]}, {"root": "INS ImportDeclaration to CompilationUnit at 53", "operations": ["INS ImportDeclaration to CompilationUnit at 53", "INS QualifiedName: com.google.common.collect.Lists to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 54", "operations": ["INS QualifiedName: com.google.common.collect.Sets to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 54"]}, {"root": "UPDATE from org.apache.calcite.sql.type.OperandTypes to org.apache.calcite.sql.type.SqlOperandTypeChecker", "operations": ["UPD QualifiedName: org.apache.calcite.sql.type.OperandTypes from org.apache.calcite.sql.type.OperandTypes to org.apache.calcite.sql.type.SqlOperandTypeChecker"]}, {"root": "UPDATE from java.util.AbstractList to java.util.Set", "operations": ["UPD QualifiedName: java.util.AbstractList from java.util.AbstractList to java.util.Set"]}, {"root": "INS Modifier: static to MethodDeclaration at 1", "operations": ["INS Modifier: static to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: List<RexNode> to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "UPDATE from ensureSameType to convertExpressionList", "operations": ["UPD SimpleName: ensureSameType from ensureSameType to convertExpressionList", "UPD SimpleName: ensureSameType from ensureSameType to convertExpressionList"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 7", "INS QualifiedName: SqlOperandTypeChecker.Consistency to SimpleType: SqlOperandTypeChecker.Consistency at 0", "INS SimpleType: SqlOperandTypeChecker.Consistency to SingleVariableDeclaration at 0", "INS SimpleName: consistency to SingleVariableDeclaration at 1"]}, {"root": "INS Block to MethodDeclaration at 8", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleType: List to ParameterizedType: List<RexNode> at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: exprs to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ParameterizedType: List<RexNode> to VariableDeclarationStatement at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: expr to SingleVariableDeclaration at 1", "INS SimpleName: consistency to MethodInvocation at 2", "INS SimpleName: Lists to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS EnhancedForStatement to Block at 2", "INS Block to MethodDeclaration at 8", "INS SimpleName: exprs to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS InfixExpression: != to IfStatement at 0", "INS ExpressionStatement to Block at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: newArrayList to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: newArrayList to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: RexNode to ParameterizedType: List<RexNode> at 1", "INS Block to EnhancedForStatement at 2", "INS SimpleName: RexNode to SimpleType: RexNode at 0", "INS IfStatement to Block at 2", "INS SimpleName: cx to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: Lists to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: consistentType to MethodInvocation at 0", "INS IfStatement to Block at 1", "INS SimpleName: type to InfixExpression: != at 0", "INS SimpleName: oldExprs to EnhancedForStatement at 1", "INS NumberLiteral: 1 to InfixExpression: > at 1", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: List to SimpleType: List at 0", "INS InfixExpression: > to IfStatement at 0"]}, {"root": "INS SimpleType: RelDataType to MethodDeclaration at 2", "operations": ["INS SimpleType: RelDataType to MethodDeclaration at 2", "INS SimpleName: RelDataType to SimpleType: RelDataType at 0"]}, {"root": "INS SimpleName: consistentType to MethodDeclaration at 3", "operations": ["INS SimpleName: consistentType to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleType: SqlOperandTypeChecker.Consistency to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS QualifiedName: SqlOperandTypeChecker.Consistency to SimpleType: SqlOperandTypeChecker.Consistency at 0", "INS SimpleName: consistency to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SimpleName: types to SingleVariableDeclaration at 1", "INS SimpleType: List to ParameterizedType: List<RelDataType> at 0", "INS ParameterizedType: List<RelDataType> to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: List to SimpleType: List at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 12"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS VariableDeclarationStatement to Block at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: consistency to MethodInvocation at 3", "INS Modifier: final to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: exprs to VariableDeclarationFragment at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 3", "MOV EnhancedForStatement to Block at 1"]}, {"root": "INS SwitchStatement to Block at 0", "operations": ["INS SimpleType: SqlTypeFamily to InstanceofExpression at 1", "INS InfixExpression: < to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SwitchStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleType: Set to ParameterizedType: Set<RelDataTypeFamily> at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS IfStatement to SwitchStatement at 6", "INS SimpleName: createSqlType to MethodInvocation at 1", "INS SimpleName: consistency to SwitchStatement at 0", "INS NullLiteral to ReturnStatement at 0", "INS ParameterizedType: Set<RelDataTypeFamily> to VariableDeclarationStatement at 1", "INS SimpleName: nonCharacterTypes to MethodInvocation at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: nonCharacterTypes to MethodInvocation at 0", "INS SimpleName: types to MethodInvocation at 0", "INS SimpleName: RexUtil to MethodInvocation at 0", "INS SimpleName: types to Assignment: = at 0", "INS SimpleName: getFamily to MethodInvocation at 1", "INS SimpleName: get to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS IfStatement to SwitchStatement at 3", "INS SimpleName: Sets to MethodInvocation at 0", "INS SimpleType: RelDataTypeFamily to VariableDeclarationStatement at 1", "INS QualifiedName: SqlTypeFamily.CHARACTER to InfixExpression: != at 1", "INS SimpleName: SqlTypeFamily to SimpleType: SqlTypeFamily at 0", "INS SimpleName: type to MethodInvocation at 2", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS SimpleName: typeCount to InfixExpression: < at 1", "INS IfStatement to Block at 0", "INS SimpleName: SqlTypeFamily to SimpleType: SqlTypeFamily at 0", "INS Block to IfStatement at 1", "INS SimpleName: getTypeFactory to MethodInvocation at 1", "INS PrefixExpression: ! to IfStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: family to CastExpression at 1", "INS SimpleName: RelDataTypeFamily to SimpleType: RelDataTypeFamily at 0", "INS QualifiedName: SqlTypeName.BIGINT to MethodInvocation at 2", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: families to MethodInvocation at 0", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: types to MethodInvocation at 2", "INS VariableDeclarationStatement to SwitchStatement at 2", "INS SimpleName: types to EnhancedForStatement at 1", "INS SimpleName: family to VariableDeclarationFragment at 0", "INS MethodInvocation to InfixExpression: < at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: nonCharacterTypes to Assignment: = at 1", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: getFamily to MethodInvocation at 1", "INS SimpleName: RelDataTypeFamily to SimpleType: RelDataTypeFamily at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: RelDataTypeFamily to ParameterizedType: Set<RelDataTypeFamily> at 1", "INS SimpleName: type to SingleVariableDeclaration at 1", "INS SimpleName: Set to SimpleType: Set at 0", "INS SwitchStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: typeCount to VariableDeclarationFragment at 0", "INS IfStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: LEAST_RESTRICTIVE to SwitchCase at 0", "INS SimpleName: leastRestrictive to MethodInvocation at 1", "INS EnhancedForStatement to SwitchStatement at 5", "INS IfStatement to Block at 2", "INS ExpressionStatement to SwitchStatement at 3", "INS SimpleName: size to MethodInvocation at 1", "INS SimpleType: SqlTypeFamily to CastExpression at 0", "INS SimpleName: cx to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SwitchCase to SwitchStatement at 1", "INS CastExpression to SwitchStatement at 0", "INS SimpleName: INTEGER to SwitchCase at 0", "INS VariableDeclarationStatement to SwitchStatement at 4", "INS SimpleName: NUMERIC to SwitchCase at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ReturnStatement to SwitchStatement at 8", "INS NullLiteral to ReturnStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS MethodInvocation to InfixExpression: < at 0", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SwitchCase to SwitchStatement at 2", "INS ReturnStatement to SwitchStatement at 10", "INS SwitchCase to SwitchStatement at 7", "INS PrimitiveType: int to VariableDeclarationStatement at 1", "INS InfixExpression: < to IfStatement at 0", "INS SwitchCase to SwitchStatement at 9", "INS NumberLiteral: 2 to InfixExpression: < at 1", "INS Block to EnhancedForStatement at 2", "INS Modifier: final to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: nonCharacterTypes to MethodInvocation at 0", "INS SimpleName: COMPARE to SwitchCase at 0", "INS SimpleName: type to MethodInvocation at 0", "INS SimpleName: nonCharacterTypes to MethodInvocation at 0", "INS SimpleName: size to MethodInvocation at 1", "INS SimpleName: families to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: newHashSet to MethodInvocation at 1", "INS SimpleName: types to MethodInvocation at 2", "INS SimpleName: family to InstanceofExpression at 0", "INS ReturnStatement to Block at 0", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: nonCharacterTypes to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SwitchCase to SwitchStatement at 1", "INS SimpleName: families to MethodInvocation at 1", "INS SimpleName: size to MethodInvocation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS ParameterizedType: List<RexNode> to VariableDeclarationStatement at 1", "INS SimpleName: convertExpressionList to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: RexNode to ParameterizedType: List<RexNode> at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: cx to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleType: List to ParameterizedType: List<RexNode> at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS SimpleType: SqlOperandTypeChecker.Consistency to VariableDeclarationStatement at 1", "operations": ["INS QualifiedName: SqlOperandTypeChecker.Consistency to SimpleType: SqlOperandTypeChecker.Consistency at 0", "INS SimpleType: SqlOperandTypeChecker.Consistency to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: List<RexNode> to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: List<RexNode> to VariableDeclarationStatement at 1"]}, {"root": "MOVE from ParameterizedType: List<RelDataType>", "operations": ["MOV SimpleType: RelDataType to ParameterizedType: List<RelDataType> at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: RexNode to VariableDeclarationStatement at 1"]}, {"root": "INS Modifier: final to VariableDeclarationStatement at 0", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: RexNode to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: RexNode to VariableDeclarationStatement at 1"]}, {"root": "UPDATE from exprs to consistency", "operations": ["UPD SimpleName: exprs from exprs to consistency"]}, {"root": "INS ConditionalExpression to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to ConditionalExpression at 2", "INS QualifiedName: SqlOperandTypeChecker.Consistency.NONE to ConditionalExpression at 1", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from InfixExpression: >", "operations": ["MOV MethodInvocation to InfixExpression: > at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 2", "MOV Modifier: final to VariableDeclarationStatement at 0", "MOV ParameterizedType: ArrayList<RexNode> to VariableDeclarationStatement at 1"]}, {"root": "UPDATE from ArrayList<RexNode> to List<RelDataType>", "operations": ["UPD ParameterizedType: ArrayList<RexNode> from ArrayList<RexNode> to List<RelDataType>"]}, {"root": "UPDATE from call to list", "operations": ["UPD SimpleName: call from call to list", "UPD SimpleName: cx from cx to list", "UPD SimpleName: value from value to list", "UPD SimpleName: call from call to list"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: value to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from lower to x", "operations": ["UPD SimpleName: lower from lower to x"]}, {"root": "UPDATE from upper to z", "operations": ["UPD SimpleName: upper from upper to z"]}, {"root": "INS QualifiedName: SqlOperandTypeChecker.Consistency.NONE to MethodInvocation at 3", "operations": ["INS QualifiedName: SqlOperandTypeChecker.Consistency.NONE to MethodInvocation at 3"]}, {"root": "INS QualifiedName: SqlOperandTypeChecker.Consistency.NONE to MethodInvocation at 3", "operations": ["INS QualifiedName: SqlOperandTypeChecker.Consistency.NONE to MethodInvocation at 3"]}, {"root": "INS QualifiedName: SqlOperandTypeChecker.Consistency.NONE to MethodInvocation at 3", "operations": ["INS QualifiedName: SqlOperandTypeChecker.Consistency.NONE to MethodInvocation at 3"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV InfixExpression: == to ConditionalExpression at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ensureSameType to MethodInvocation at 0", "MOV SimpleName: cx to MethodInvocation at 1", "MOV SimpleName: exprs to MethodInvocation at 2"]}, {"root": "UPDATE from exprs to operands", "operations": ["UPD SimpleName: exprs from exprs to operands"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: RelDataType to VariableDeclarationStatement at 1"]}, {"root": "UPDATE from ArrayList to List", "operations": ["UPD SimpleName: ArrayList from ArrayList to List", "UPD SimpleType: ArrayList from ArrayList to List"]}, {"root": "INS SimpleType: RelDataType to ParameterizedType: ArrayList<RexNode> at 1", "operations": ["INS SimpleType: RelDataType to ParameterizedType: ArrayList<RexNode> at 1", "INS SimpleName: RelDataType to SimpleType: RelDataType at 0"]}, {"root": "INS SimpleName: nonCharacterTypes to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: nonCharacterTypes to VariableDeclarationFragment at 0"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: newArrayList to MethodInvocation at 1", "INS SimpleName: Lists to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: RelDataType to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from SqlNode to RexNode", "operations": ["UPD SimpleName: SqlNode from SqlNode to RexNode"]}, {"root": "MOVE from SimpleType: RexNode", "operations": ["MOV SimpleName: SqlNode to SimpleType: RexNode at 0"]}, {"root": "UPDATE from convertExpression to get", "operations": ["UPD SimpleName: convertExpression from convertExpression to get", "UPD SimpleName: operand from operand to get", "UPD SimpleName: operand from operand to get"]}, {"root": "UPDATE from SqlBetweenOperator.LOWER_OPERAND to SqlBetweenOperator.VALUE_OPERAND", "operations": ["UPD QualifiedName: SqlBetweenOperator.LOWER_OPERAND from SqlBetweenOperator.LOWER_OPERAND to SqlBetweenOperator.VALUE_OPERAND"]}, {"root": "INS QualifiedName: SqlBetweenOperator.LOWER_OPERAND to MethodInvocation at 2", "operations": ["INS QualifiedName: SqlBetweenOperator.LOWER_OPERAND to MethodInvocation at 2"]}, {"root": "INS NullLiteral to InfixExpression: == at 1", "operations": ["INS NullLiteral to InfixExpression: == at 1"]}, {"root": "UPDATE from operands to getConsistency", "operations": ["UPD SimpleName: operands from operands to getConsistency", "UPD SimpleName: value from value to getConsistency"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: convertExpressionList to MethodInvocation at 0", "MOV SimpleName: operands to MethodInvocation at 1", "MOV SimpleName: cx to MethodInvocation at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: type to VariableDeclarationFragment at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: operand to MethodInvocation at 1", "MOV SimpleName: call to MethodInvocation at 0"]}, {"root": "UPDATE from operand to getOperandList", "operations": ["UPD SimpleName: operand from operand to getOperandList"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: cx to MethodInvocation at 0", "MOV SimpleName: convertExpression to MethodInvocation at 1", "MOV SimpleName: value to MethodInvocation at 1"]}, {"root": "INS QualifiedName: SqlOperandTypeChecker.Consistency.NONE to MethodInvocation at 3", "operations": ["INS QualifiedName: SqlOperandTypeChecker.Consistency.NONE to MethodInvocation at 3"]}, {"root": "UPDATE from cx to op", "operations": ["UPD SimpleName: cx from cx to op", "UPD SimpleName: convertExpressionList from convertExpressionList to op"]}, {"root": "UPDATE from cx to getOperandTypeChecker", "operations": ["UPD SimpleName: cx from cx to getOperandTypeChecker", "UPD SimpleName: convertExpression from convertExpression to getOperandTypeChecker"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "UPDATE from exprs to RexUtil", "operations": ["UPD SimpleName: exprs from exprs to RexUtil"]}, {"root": "UPDATE from get to types", "operations": ["UPD SimpleName: get from get to types"]}, {"root": "UPDATE from index to exprs", "operations": ["UPD SimpleName: index from index to exprs"]}, {"root": "UPDATE from i to oldExprs", "operations": ["UPD SimpleName: i from i to oldExprs"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: i to VariableDeclarationFragment at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: size to MethodInvocation at 1", "MOV SimpleName: exprs to MethodInvocation at 0"]}, {"root": "UPDATE from size to clear", "operations": ["UPD SimpleName: size from size to clear"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: RexNode to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from set to add", "operations": ["UPD SimpleName: set from set to add"]}, {"root": "UPDATE from exprs to expr", "operations": ["UPD SimpleName: exprs from exprs to expr"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: exprs to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "DEL QualifiedName: OperandTypes.COMPARABLE_UNORDERED_COMPARABLE_UNORDERED", "operations": ["DEL QualifiedName: OperandTypes.COMPARABLE_UNORDERED_COMPARABLE_UNORDERED"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement"]}, {"root": "DEL PrimitiveType: void", "operations": ["DEL PrimitiveType: void"]}, {"root": "DEL SimpleName: i", "operations": ["DEL SimpleName: i"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: i", "DEL SimpleName: get"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SimpleName: exprs"]}, {"root": "DEL Block", "operations": ["DEL NumberLiteral: 0", "DEL VariableDeclarationFragment", "DEL SimpleType: AbstractList", "DEL MethodInvocation", "DEL SimpleName: size", "DEL AnonymousClassDeclaration", "DEL SimpleName: index", "DEL ParameterizedType: AbstractList<RelDataType>", "DEL Block", "DEL SimpleName: getType", "DEL Modifier: public", "DEL PrimitiveType: int", "DEL SimpleName: i", "DEL PrimitiveType: int", "DEL InfixExpression: <", "DEL ForStatement", "DEL PrimitiveType: int", "DEL Block", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: get", "DEL VariableDeclarationExpression", "DEL MethodInvocation", "DEL SimpleName: AbstractList", "DEL SimpleName: i", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL PostfixExpression: ++", "DEL Block", "DEL Block", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleName: leastRestrictive", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment"]}, {"root": "DEL SimpleName: convertExpressionList", "operations": ["DEL SimpleName: convertExpressionList"]}, {"root": "DEL SimpleName: exprs", "operations": ["DEL SimpleName: exprs"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleType: ArrayList", "DEL ParameterizedType: ArrayList<RexNode>", "DEL ClassInstanceCreation", "DEL SimpleName: ArrayList"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: SqlNode", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL QualifiedName: SqlBetweenOperator.VALUE_OPERAND"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: x", "DEL VariableDeclarationStatement"]}, {"root": "DEL SimpleType: SqlNode", "operations": ["DEL SimpleType: SqlNode", "DEL SimpleName: SqlNode"]}, {"root": "DEL SimpleType: RexNode", "operations": ["DEL SimpleType: RexNode", "DEL SimpleName: RexNode"]}, {"root": "DEL SimpleName: lower", "operations": ["DEL SimpleName: lower"]}, {"root": "DEL SimpleType: SqlNode", "operations": ["DEL SimpleType: SqlNode", "DEL SimpleName: SqlNode"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: upper", "DEL MethodInvocation", "DEL SimpleName: cx", "DEL SimpleName: z", "DEL SimpleName: convertExpression"]}]}}, {"StandardConvertletTable_diff": {"operations": ["Move ImportDeclaration(107) into CompilationUnit(4402) at 56", "Insert ImportDeclaration(15) into CompilationUnit(4402) at 7", "Insert ImportDeclaration(99) into CompilationUnit(4402) at 49", "Insert ImportDeclaration(107) into CompilationUnit(4402) at 53", "Insert ImportDeclaration(109) into CompilationUnit(4402) at 54", "Insert QualifiedName: org.apache.calcite.rel.type.RelDataTypeFamily(14) into ImportDeclaration(15) at 0", "Update QualifiedName: org.apache.calcite.sql.type.OperandTypes(94) to org.apache.calcite.sql.type.SqlOperandTypeChecker", "Insert QualifiedName: org.apache.calcite.sql.type.SqlTypeFamily(98) into ImportDeclaration(99) at 0", "Insert QualifiedName: com.google.common.collect.Lists(106) into ImportDeclaration(107) at 0", "Insert QualifiedName: com.google.common.collect.Sets(108) into ImportDeclaration(109) at 0", "Update QualifiedName: java.util.AbstractList(106) to java.util.Set", "Insert Modifier: static(2886) into MethodDeclaration(3000) at 1", "Move ParameterizedType: List<RexNode>(2961) into MethodDeclaration(3000) at 2", "Update SimpleName: ensureSameType(2868) to convertExpressionList", "Move SingleVariableDeclaration(2966) into MethodDeclaration(3000) at 5", "Move SingleVariableDeclaration(2973) into MethodDeclaration(3000) at 6", "Insert SingleVariableDeclaration(2907) into MethodDeclaration(3000) at 6", "Insert Block(2999) into MethodDeclaration(3000) at 7", "Insert SimpleType: RelDataType(3004) into MethodDeclaration(3156) at 2", "Insert SimpleName: consistentType(3005) into MethodDeclaration(3156) at 3", "Move SingleVariableDeclaration(2872) into MethodDeclaration(3156) at 4", "Insert SingleVariableDeclaration(3013) into MethodDeclaration(3156) at 5", "Insert SingleVariableDeclaration(3020) into MethodDeclaration(3156) at 6", "Move VariableDeclarationStatement(3149) into Block(3464) at 12", "Insert VariableDeclarationStatement(2802) into Block(2824) at 3", "Insert SimpleType: SqlOperandTypeChecker.Consistency(2905) into SingleVariableDeclaration(2907) at 0", "Insert SimpleName: consistency(2906) into SingleVariableDeclaration(2907) at 1", "Insert VariableDeclarationStatement(2919) into Block(2999) at 0", "Move EnhancedForStatement(3003) into Block(2999) at 1", "Insert IfStatement(2996) into Block(2999) at 2", "Move ReturnStatement(3005) into Block(2999) at 3", "Insert SimpleName: RelDataType(3003) into SimpleType: RelDataType(3004) at 0", "Insert SimpleType: SqlOperandTypeChecker.Consistency(3011) into SingleVariableDeclaration(3013) at 0", "Insert SimpleName: consistency(3012) into SingleVariableDeclaration(3013) at 1", "Insert ParameterizedType: List<RelDataType>(3018) into SingleVariableDeclaration(3020) at 0", "Insert SimpleName: types(3019) into SingleVariableDeclaration(3020) at 1", "Insert SwitchStatement(3154) into Block(3155) at 0", "Insert VariableDeclarationStatement(3292) into Block(3464) at 0", "Insert SimpleType: SqlOperandTypeChecker.Consistency(2773) into VariableDeclarationStatement(2788) at 1", "Insert Modifier: final(2789) into VariableDeclarationStatement(2802) at 0", "Move ParameterizedType: List<RexNode>(2764) into VariableDeclarationStatement(2802) at 1", "Insert VariableDeclarationFragment(2801) into VariableDeclarationStatement(2802) at 2", "Insert QualifiedName: SqlOperandTypeChecker.Consistency(2904) into SimpleType: SqlOperandTypeChecker.Consistency(2905) at 0", "Insert Modifier: final(2908) into VariableDeclarationStatement(2919) at 0", "Move ParameterizedType: List<RexNode>(2878) into VariableDeclarationStatement(2919) at 1", "Insert VariableDeclarationFragment(2918) into VariableDeclarationStatement(2919) at 2", "Insert InfixExpression: >(2939) into IfStatement(2996) at 0", "Insert Block(2995) into IfStatement(2996) at 1", "Insert QualifiedName: SqlOperandTypeChecker.Consistency(3010) into SimpleType: SqlOperandTypeChecker.Consistency(3011) at 0", "Insert SimpleType: List(3015) into ParameterizedType: List<RelDataType>(3018) at 0", "Move SimpleType: RelDataType(2891) into ParameterizedType: List<RelDataType>(3018) at 1", "Insert SimpleName: consistency(3021) into SwitchStatement(3154) at 0", "Insert SwitchCase(3023) into SwitchStatement(3154) at 1", "Insert VariableDeclarationStatement(3039) into SwitchStatement(3154) at 2", "Insert IfStatement(3048) into SwitchStatement(3154) at 3", "Insert VariableDeclarationStatement(3060) into SwitchStatement(3154) at 4", "Insert EnhancedForStatement(3079) into SwitchStatement(3154) at 5", "Insert IfStatement(3141) into SwitchStatement(3154) at 6", "Insert SwitchCase(3143) into SwitchStatement(3154) at 7", "Insert ReturnStatement(3150) into SwitchStatement(3154) at 8", "Insert SwitchCase(3151) into SwitchStatement(3154) at 9", "Insert ReturnStatement(3153) into SwitchStatement(3154) at 10", "Move Modifier: final(3124) into VariableDeclarationStatement(3292) at 0", "Insert ParameterizedType: List<RexNode>(3278) into VariableDeclarationStatement(3292) at 1", "Insert VariableDeclarationFragment(3291) into VariableDeclarationStatement(3292) at 2", "Move SimpleType: RexNode(2984) into VariableDeclarationStatement(3302) at 1", "Insert Modifier: final(3303) into VariableDeclarationStatement(3312) at 0", "Move SimpleType: RexNode(2978) into VariableDeclarationStatement(3312) at 1", "Move SimpleType: RexNode(3180) into VariableDeclarationStatement(3322) at 1", "Insert QualifiedName: SqlOperandTypeChecker.Consistency(2772) into SimpleType: SqlOperandTypeChecker.Consistency(2773) at 0", "Update SimpleName: exprs(2765) to consistency", "Insert ConditionalExpression(2786) into VariableDeclarationFragment(2787) at 1", "Insert SimpleName: exprs(2795) into VariableDeclarationFragment(2801) at 0", "Insert MethodInvocation(2800) into VariableDeclarationFragment(2801) at 1", "Insert SimpleName: exprs(2914) into VariableDeclarationFragment(2918) at 0", "Insert MethodInvocation(2917) into VariableDeclarationFragment(2918) at 1", "Move MethodInvocation(2914) into InfixExpression: >(2939) at 0", "Insert NumberLiteral: 1(2938) into InfixExpression: >(2939) at 1", "Insert VariableDeclarationStatement(2953) into Block(2995) at 0", "Insert IfStatement(2994) into Block(2995) at 1", "Insert SimpleName: List(3014) into SimpleType: List(3015) at 0", "Insert SimpleName: COMPARE(3022) into SwitchCase(3023) at 0", "Insert Modifier: final(3024) into VariableDeclarationStatement(3039) at 0", "Insert ParameterizedType: Set<RelDataTypeFamily>(3029) into VariableDeclarationStatement(3039) at 1", "Insert VariableDeclarationFragment(3038) into VariableDeclarationStatement(3039) at 2", "Insert InfixExpression: <(3044) into IfStatement(3048) at 0", "Insert Block(3047) into IfStatement(3048) at 1", "Move Modifier: final(2974) into VariableDeclarationStatement(3060) at 0", "Update ParameterizedType: ArrayList<RexNode>(2979) to List<RelDataType>", "Move ParameterizedType: ArrayList<RexNode>(2979) into VariableDeclarationStatement(3060) at 1", "Move VariableDeclarationFragment(2987) into VariableDeclarationStatement(3060) at 2", "Insert SingleVariableDeclaration(3064) into EnhancedForStatement(3079) at 0", "Insert SimpleName: types(3065) into EnhancedForStatement(3079) at 1", "Insert Block(3078) into EnhancedForStatement(3079) at 2", "Insert PrefixExpression: !(3083) into IfStatement(3141) at 0", "Insert Block(3140) into IfStatement(3141) at 1", "Insert SimpleName: LEAST_RESTRICTIVE(3142) into SwitchCase(3143) at 0", "Insert MethodInvocation(3149) into ReturnStatement(3150) at 0", "Insert NullLiteral(3152) into ReturnStatement(3153) at 0", "Insert SimpleType: List(3275) into ParameterizedType: List<RexNode>(3278) at 0", "Insert SimpleType: RexNode(3277) into ParameterizedType: List<RexNode>(3278) at 1", "Update SimpleName: value(3127) to list", "Move SimpleName: value(3127) into VariableDeclarationFragment(3291) at 0", "Insert MethodInvocation(3290) into VariableDeclarationFragment(3291) at 1", "Update SimpleName: lower(3153) to x", "Update SimpleName: upper(3172) to z", "Insert QualifiedName: SqlOperandTypeChecker.Consistency.NONE(1676) into MethodInvocation(1677) at 3", "Insert QualifiedName: SqlOperandTypeChecker.Consistency.NONE(2138) into MethodInvocation(2139) at 3", "Insert QualifiedName: SqlOperandTypeChecker.Consistency.NONE(2313) into MethodInvocation(2314) at 3", "Move InfixExpression: ==(2776) into ConditionalExpression(2786) at 0", "Insert QualifiedName: SqlOperandTypeChecker.Consistency.NONE(2780) into ConditionalExpression(2786) at 1", "Insert MethodInvocation(2785) into ConditionalExpression(2786) at 2", "Update SimpleName: ensureSameType(2777) to convertExpressionList", "Move SimpleName: ensureSameType(2777) into MethodInvocation(2800) at 0", "Move SimpleName: cx(2778) into MethodInvocation(2800) at 1", "Update SimpleName: exprs(2779) to operands", "Move SimpleName: exprs(2779) into MethodInvocation(2800) at 2", "Insert SimpleName: consistency(2799) into MethodInvocation(2800) at 3", "Insert SimpleName: Lists(2915) into MethodInvocation(2917) at 0", "Insert SimpleName: newArrayList(2916) into MethodInvocation(2917) at 1", "Insert Modifier: final(2940) into VariableDeclarationStatement(2953) at 0", "Move SimpleType: RelDataType(2895) into VariableDeclarationStatement(2953) at 1", "Insert VariableDeclarationFragment(2952) into VariableDeclarationStatement(2953) at 2", "Insert InfixExpression: !=(2956) into IfStatement(2994) at 0", "Insert Block(2993) into IfStatement(2994) at 1", "Insert SimpleType: Set(3026) into ParameterizedType: Set<RelDataTypeFamily>(3029) at 0", "Insert SimpleType: RelDataTypeFamily(3028) into ParameterizedType: Set<RelDataTypeFamily>(3029) at 1", "Insert SimpleName: families(3030) into VariableDeclarationFragment(3038) at 0", "Insert MethodInvocation(3037) into VariableDeclarationFragment(3038) at 1", "Insert MethodInvocation(3042) into InfixExpression: <(3044) at 0", "Insert NumberLiteral: 2(3043) into InfixExpression: <(3044) at 1", "Insert ReturnStatement(3046) into Block(3047) at 0", "Update SimpleType: ArrayList(2976) to List", "Insert SimpleType: RelDataType(3053) into ParameterizedType: List<RelDataType>(3054) at 1", "Insert SimpleName: nonCharacterTypes(3055) into VariableDeclarationFragment(3059) at 0", "Insert MethodInvocation(3058) into VariableDeclarationFragment(3059) at 1", "Move SimpleType: RelDataType(2882) into SingleVariableDeclaration(3064) at 0", "Insert SimpleName: type(3063) into SingleVariableDeclaration(3064) at 1", "Insert IfStatement(3077) into Block(3078) at 0", "Insert MethodInvocation(3082) into PrefixExpression: !(3083) at 0", "Insert VariableDeclarationStatement(3091) into Block(3140) at 0", "Insert ExpressionStatement(3095) into Block(3140) at 1", "Insert IfStatement(3139) into Block(3140) at 2", "Insert MethodInvocation(3146) into MethodInvocation(3149) at 0", "Insert SimpleName: leastRestrictive(3147) into MethodInvocation(3149) at 1", "Insert SimpleName: types(3148) into MethodInvocation(3149) at 2", "Insert SimpleName: List(3274) into SimpleType: List(3275) at 0", "Update SimpleName: SqlNode(3125) to RexNode", "Move SimpleName: SqlNode(3125) into SimpleType: RexNode(3277) at 0", "Insert SimpleName: convertExpressionList(3280) into MethodInvocation(3290) at 0", "Insert SimpleName: cx(3281) into MethodInvocation(3290) at 1", "Insert MethodInvocation(3284) into MethodInvocation(3290) at 2", "Insert MethodInvocation(3289) into MethodInvocation(3290) at 3", "Update SimpleName: call(3154) to list", "Update SimpleName: operand(3155) to get", "Update QualifiedName: SqlBetweenOperator.LOWER_OPERAND(3156) to SqlBetweenOperator.VALUE_OPERAND", "Update SimpleName: cx(3163) to list", "Update SimpleName: convertExpression(3164) to get", "Insert QualifiedName: SqlBetweenOperator.LOWER_OPERAND(3309) into MethodInvocation(3310) at 2", "Update SimpleName: call(3173) to list", "Update SimpleName: operand(3174) to get", "Insert NullLiteral(2778) into InfixExpression: ==(2779) at 1", "Insert MethodInvocation(2783) into MethodInvocation(2785) at 0", "Update SimpleName: operands(2768) to getConsistency", "Move SimpleName: operands(2768) into MethodInvocation(2785) at 1", "Move SimpleName: type(2883) into VariableDeclarationFragment(2952) at 0", "Insert MethodInvocation(2951) into VariableDeclarationFragment(2952) at 1", "Insert SimpleName: type(2954) into InfixExpression: !=(2956) at 0", "Insert NullLiteral(2955) into InfixExpression: !=(2956) at 1", "Insert VariableDeclarationStatement(2969) into Block(2993) at 0", "Insert ExpressionStatement(2973) into Block(2993) at 1", "Insert EnhancedForStatement(2992) into Block(2993) at 2", "Insert SimpleName: Set(3025) into SimpleType: Set(3026) at 0", "Insert SimpleName: RelDataTypeFamily(3027) into SimpleType: RelDataTypeFamily(3028) at 0", "Insert SimpleName: Sets(3031) into MethodInvocation(3037) at 0", "Insert SimpleName: newHashSet(3032) into MethodInvocation(3037) at 1", "Insert MethodInvocation(3036) into MethodInvocation(3037) at 2", "Insert SimpleName: families(3040) into MethodInvocation(3042) at 0", "Insert SimpleName: size(3041) into MethodInvocation(3042) at 1", "Insert NullLiteral(3045) into ReturnStatement(3046) at 0", "Update SimpleName: ArrayList(2975) to List", "Insert SimpleName: RelDataType(3052) into SimpleType: RelDataType(3053) at 0", "Insert SimpleName: Lists(3056) into MethodInvocation(3058) at 0", "Insert SimpleName: newArrayList(3057) into MethodInvocation(3058) at 1", "Insert InfixExpression: !=(3070) into IfStatement(3077) at 0", "Insert Block(3076) into IfStatement(3077) at 1", "Insert SimpleName: nonCharacterTypes(3080) into MethodInvocation(3082) at 0", "Insert SimpleName: isEmpty(3081) into MethodInvocation(3082) at 1", "Insert Modifier: final(3084) into VariableDeclarationStatement(3091) at 0", "Insert PrimitiveType: int(3085) into VariableDeclarationStatement(3091) at 1", "Insert VariableDeclarationFragment(3090) into VariableDeclarationStatement(3091) at 2", "Insert Assignment: =(3094) into ExpressionStatement(3095) at 0", "Insert InfixExpression: <(3100) into IfStatement(3139) at 0", "Insert Block(3138) into IfStatement(3139) at 1", "Insert SimpleName: cx(3144) into MethodInvocation(3146) at 0", "Insert SimpleName: getTypeFactory(3145) into MethodInvocation(3146) at 1", "Move SimpleName: call(3128) into MethodInvocation(3284) at 0", "Update SimpleName: operand(3129) to getOperandList", "Move SimpleName: operand(3129) into MethodInvocation(3284) at 1", "Insert MethodInvocation(3287) into MethodInvocation(3289) at 0", "Update SimpleName: value(3139) to getConsistency", "Move SimpleName: value(3139) into MethodInvocation(3289) at 1", "Insert QualifiedName: SqlOperandTypeChecker.Consistency.NONE(2509) into MethodInvocation(2510) at 3", "Update SimpleName: convertExpressionList(2766) to op", "Move SimpleName: convertExpressionList(2766) into MethodInvocation(2783) at 0", "Update SimpleName: cx(2767) to getOperandTypeChecker", "Move SimpleName: cx(2767) into MethodInvocation(2783) at 1", "Insert SimpleName: consistentType(2944) into MethodInvocation(2951) at 0", "Insert SimpleName: cx(2945) into MethodInvocation(2951) at 1", "Insert SimpleName: consistency(2946) into MethodInvocation(2951) at 2", "Move MethodInvocation(2903) into MethodInvocation(2951) at 3", "Insert Modifier: final(2957) into VariableDeclarationStatement(2969) at 0", "Insert ParameterizedType: List<RexNode>(2962) into VariableDeclarationStatement(2969) at 1", "Insert VariableDeclarationFragment(2968) into VariableDeclarationStatement(2969) at 2", "Insert MethodInvocation(2972) into ExpressionStatement(2973) at 0", "Insert SingleVariableDeclaration(2977) into EnhancedForStatement(2992) at 0", "Insert SimpleName: oldExprs(2978) into EnhancedForStatement(2992) at 1", "Insert Block(2991) into EnhancedForStatement(2992) at 2", "Insert SimpleName: RexUtil(3033) into MethodInvocation(3036) at 0", "Insert SimpleName: families(3034) into MethodInvocation(3036) at 1", "Insert SimpleName: types(3035) into MethodInvocation(3036) at 2", "Insert MethodInvocation(3068) into InfixExpression: !=(3070) at 0", "Insert QualifiedName: SqlTypeFamily.CHARACTER(3069) into InfixExpression: !=(3070) at 1", "Insert ExpressionStatement(3075) into Block(3076) at 0", "Insert SimpleName: typeCount(3086) into VariableDeclarationFragment(3090) at 0", "Insert MethodInvocation(3089) into VariableDeclarationFragment(3090) at 1", "Insert SimpleName: types(3092) into Assignment: =(3094) at 0", "Insert SimpleName: nonCharacterTypes(3093) into Assignment: =(3094) at 1", "Insert MethodInvocation(3098) into InfixExpression: <(3100) at 0", "Insert SimpleName: typeCount(3099) into InfixExpression: <(3100) at 1", "Insert VariableDeclarationStatement(3112) into Block(3138) at 0", "Insert IfStatement(3137) into Block(3138) at 1", "Update SimpleName: cx(3137) to op", "Move SimpleName: cx(3137) into MethodInvocation(3287) at 0", "Update SimpleName: convertExpression(3138) to getOperandTypeChecker", "Move SimpleName: convertExpression(3138) into MethodInvocation(3287) at 1", "Update SimpleName: exprs(2900) to RexUtil", "Update SimpleName: get(2901) to types", "Update SimpleName: index(2902) to exprs", "Insert SimpleType: List(2959) into ParameterizedType: List<RexNode>(2962) at 0", "Insert SimpleType: RexNode(2961) into ParameterizedType: List<RexNode>(2962) at 1", "Update SimpleName: i(2924) to oldExprs", "Move SimpleName: i(2924) into VariableDeclarationFragment(2968) at 0", "Insert MethodInvocation(2967) into VariableDeclarationFragment(2968) at 1", "Move SimpleName: exprs(2929) into MethodInvocation(2972) at 0", "Update SimpleName: size(2930) to clear", "Move SimpleName: size(2930) into MethodInvocation(2972) at 1", "Move SimpleType: RexNode(3135) into SingleVariableDeclaration(2977) at 0", "Insert SimpleName: expr(2976) into SingleVariableDeclaration(2977) at 1", "Move ExpressionStatement(2950) into Block(2991) at 0", "Insert SimpleName: type(3066) into MethodInvocation(3068) at 0", "Insert SimpleName: getFamily(3067) into MethodInvocation(3068) at 1", "Insert MethodInvocation(3074) into ExpressionStatement(3075) at 0", "Insert SimpleName: types(3087) into MethodInvocation(3089) at 0", "Insert SimpleName: size(3088) into MethodInvocation(3089) at 1", "Insert SimpleName: nonCharacterTypes(3096) into MethodInvocation(3098) at 0", "Insert SimpleName: size(3097) into MethodInvocation(3098) at 1", "Insert Modifier: final(3101) into VariableDeclarationStatement(3112) at 0", "Insert SimpleType: RelDataTypeFamily(3103) into VariableDeclarationStatement(3112) at 1", "Insert VariableDeclarationFragment(3111) into VariableDeclarationStatement(3112) at 2", "Insert InstanceofExpression(3116) into IfStatement(3137) at 0", "Insert Block(3136) into IfStatement(3137) at 1", "Insert SimpleName: List(2958) into SimpleType: List(2959) at 0", "Insert SimpleName: RexNode(2960) into SimpleType: RexNode(2961) at 0", "Insert SimpleName: Lists(2964) into MethodInvocation(2967) at 0", "Insert SimpleName: newArrayList(2965) into MethodInvocation(2967) at 1", "Insert SimpleName: exprs(2966) into MethodInvocation(2967) at 2", "Insert SimpleName: nonCharacterTypes(3071) into MethodInvocation(3074) at 0", "Insert SimpleName: add(3072) into MethodInvocation(3074) at 1", "Insert SimpleName: type(3073) into MethodInvocation(3074) at 2", "Insert SimpleName: RelDataTypeFamily(3102) into SimpleType: RelDataTypeFamily(3103) at 0", "Insert SimpleName: family(3104) into VariableDeclarationFragment(3111) at 0", "Insert MethodInvocation(3110) into VariableDeclarationFragment(3111) at 1", "Insert SimpleName: family(3113) into InstanceofExpression(3116) at 0", "Insert SimpleType: SqlTypeFamily(3115) into InstanceofExpression(3116) at 1", "Insert SwitchStatement(3135) into Block(3136) at 0", "Update SimpleName: set(2936) to add", "Insert MethodInvocation(3108) into MethodInvocation(3110) at 0", "Insert SimpleName: getFamily(3109) into MethodInvocation(3110) at 1", "Insert SimpleName: SqlTypeFamily(3114) into SimpleType: SqlTypeFamily(3115) at 0", "Insert CastExpression(3120) into SwitchStatement(3135) at 0", "Insert SwitchCase(3122) into SwitchStatement(3135) at 1", "Insert SwitchCase(3124) into SwitchStatement(3135) at 2", "Insert ExpressionStatement(3134) into SwitchStatement(3135) at 3", "Update SimpleName: exprs(2943) to expr", "Move SimpleName: exprs(2943) into MethodInvocation(2988) at 3", "Insert SimpleName: nonCharacterTypes(3105) into MethodInvocation(3108) at 0", "Insert SimpleName: get(3106) into MethodInvocation(3108) at 1", "Insert NumberLiteral: 0(3107) into MethodInvocation(3108) at 2", "Insert SimpleType: SqlTypeFamily(3118) into CastExpression(3120) at 0", "Insert SimpleName: family(3119) into CastExpression(3120) at 1", "Insert SimpleName: INTEGER(3121) into SwitchCase(3122) at 0", "Insert SimpleName: NUMERIC(3123) into SwitchCase(3124) at 0", "Insert MethodInvocation(3133) into ExpressionStatement(3134) at 0", "Insert SimpleName: SqlTypeFamily(3117) into SimpleType: SqlTypeFamily(3118) at 0", "Insert SimpleName: nonCharacterTypes(3125) into MethodInvocation(3133) at 0", "Insert SimpleName: add(3126) into MethodInvocation(3133) at 1", "Insert MethodInvocation(3132) into MethodInvocation(3133) at 2", "Move MethodInvocation(2886) into MethodInvocation(3132) at 0", "Insert SimpleName: createSqlType(3130) into MethodInvocation(3132) at 1", "Insert QualifiedName: SqlTypeName.BIGINT(3131) into MethodInvocation(3132) at 2", "Delete QualifiedName: OperandTypes.COMPARABLE_UNORDERED_COMPARABLE_UNORDERED(2775)", "Delete MethodInvocation(2769)", "Delete MethodInvocation(2780)", "Delete ExpressionStatement(2781)", "Delete Block(2782)", "Delete IfStatement(2783)", "Delete PrimitiveType: void(2867)", "Delete SimpleName: i(2937)", "Delete SimpleName: get(2944)", "Delete SimpleName: i(2945)", "Delete MethodInvocation(2946)", "Delete Modifier: final(2873)", "Delete SimpleName: exprs(2879)", "Delete SingleVariableDeclaration(2880)", "Delete SimpleName: leastRestrictive(2887)", "Delete SimpleName: AbstractList(2888)", "Delete SimpleType: AbstractList(2889)", "Delete ParameterizedType: AbstractList<RelDataType>(2892)", "Delete Modifier: public(2893)", "Delete SimpleName: get(2896)", "Delete PrimitiveType: int(2897)", "Delete SimpleName: index(2898)", "Delete SingleVariableDeclaration(2899)", "Delete SimpleName: getType(2904)", "Delete MethodInvocation(2905)", "Delete ReturnStatement(2906)", "Delete Block(2907)", "Delete MethodDeclaration(2908)", "Delete Modifier: public(2909)", "Delete PrimitiveType: int(2910)", "Delete SimpleName: size(2911)", "Delete ReturnStatement(2915)", "Delete Block(2916)", "Delete MethodDeclaration(2917)", "Delete AnonymousClassDeclaration(2918)", "Delete ClassInstanceCreation(2919)", "Delete MethodInvocation(2920)", "Delete VariableDeclarationFragment(2921)", "Delete VariableDeclarationStatement(2922)", "Delete PrimitiveType: int(2923)", "Delete NumberLiteral: 0(2925)", "Delete VariableDeclarationFragment(2926)", "Delete VariableDeclarationExpression(2927)", "Delete SimpleName: i(2928)", "Delete MethodInvocation(2931)", "Delete InfixExpression: <(2932)", "Delete SimpleName: i(2933)", "Delete PostfixExpression: ++(2934)", "Delete Block(2951)", "Delete ForStatement(2952)", "Delete Block(2953)", "Delete SimpleName: convertExpressionList(2962)", "Delete SimpleName: exprs(2980)", "Delete SimpleName: ArrayList(2981)", "Delete SimpleType: ArrayList(2982)", "Delete ParameterizedType: ArrayList<RexNode>(2985)", "Delete ClassInstanceCreation(2986)", "Delete VariableDeclarationStatement(2988)", "Delete SimpleType: SqlNode(3126)", "Delete QualifiedName: SqlBetweenOperator.VALUE_OPERAND(3130)", "Delete MethodInvocation(3131)", "Delete VariableDeclarationFragment(3132)", "Delete VariableDeclarationStatement(3133)", "Delete SimpleName: x(3136)", "Delete MethodInvocation(3140)", "Delete VariableDeclarationFragment(3141)", "Delete VariableDeclarationStatement(3142)", "Delete SimpleName: SqlNode(3151)", "Delete SimpleType: SqlNode(3152)", "Delete SimpleName: RexNode(3160)", "Delete SimpleType: RexNode(3161)", "Delete SimpleName: lower(3165)", "Delete SimpleName: SqlNode(3170)", "Delete SimpleType: SqlNode(3171)", "Delete SimpleName: z(3181)", "Delete SimpleName: cx(3182)", "Delete SimpleName: convertExpression(3183)", "Delete SimpleName: upper(3184)", "Delete MethodInvocation(3185)", "Delete VariableDeclarationFragment(3186)", "Delete VariableDeclarationStatement(3187)"]}}, {"JdbcSchema_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: org.apache.calcite.avatica.SqlType to ImportDeclaration at 0"]}, {"root": "INS SwitchStatement to Block at 5", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS SimpleName: dataType to MethodInvocation at 2", "INS ExpressionStatement to SwitchStatement at 7", "INS BreakStatement to SwitchStatement at 9", "INS ExpressionStatement to SwitchStatement at 8", "INS NumberLiteral: 0 to Assignment: = at 1", "INS SimpleName: scale to Assignment: = at 0", "INS SimpleName: SqlType to MethodInvocation at 0", "INS MethodInvocation to SwitchStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to SwitchStatement at 3", "INS SimpleName: precision to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getInt to MethodInvocation at 1", "INS SimpleName: valueOf to MethodInvocation at 1", "INS SwitchCase to SwitchStatement at 6", "INS SwitchCase to SwitchStatement at 2", "INS SimpleName: scale to Assignment: = at 0", "INS SimpleName: TIME to SwitchCase at 0", "INS NumberLiteral: 9 to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: precision to Assignment: = at 0", "INS BreakStatement to SwitchStatement at 5", "INS ExpressionStatement to SwitchStatement at 4", "INS SwitchStatement to Block at 5", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: TIMESTAMP to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 1", "INS SimpleName: resultSet to MethodInvocation at 0"]}, {"root": "UPDATE from size to precision", "operations": ["UPD SimpleName: size from size to precision", "UPD SimpleName: size from size to precision"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}]}}, {"JdbcSchema_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(1566) at 1", "Insert QualifiedName: org.apache.calcite.avatica.SqlType(2) into ImportDeclaration(3) at 0", "Insert SwitchStatement(1038) into Block(1068) at 5", "Insert MethodInvocation(1005) into SwitchStatement(1038) at 0", "Insert SwitchCase(1007) into SwitchStatement(1038) at 1", "Insert SwitchCase(1009) into SwitchStatement(1038) at 2", "Insert ExpressionStatement(1016) into SwitchStatement(1038) at 3", "Insert ExpressionStatement(1020) into SwitchStatement(1038) at 4", "Insert BreakStatement(1021) into SwitchStatement(1038) at 5", "Insert SwitchCase(1022) into SwitchStatement(1038) at 6", "Insert ExpressionStatement(1029) into SwitchStatement(1038) at 7", "Insert ExpressionStatement(1036) into SwitchStatement(1038) at 8", "Insert BreakStatement(1037) into SwitchStatement(1038) at 9", "Update SimpleName: size(992) to precision", "Insert SimpleName: SqlType(1002) into MethodInvocation(1005) at 0", "Insert SimpleName: valueOf(1003) into MethodInvocation(1005) at 1", "Insert SimpleName: dataType(1004) into MethodInvocation(1005) at 2", "Insert SimpleName: TIMESTAMP(1006) into SwitchCase(1007) at 0", "Insert SimpleName: TIME(1008) into SwitchCase(1009) at 0", "Insert Assignment: =(1015) into ExpressionStatement(1016) at 0", "Insert Assignment: =(1019) into ExpressionStatement(1020) at 0", "Insert Assignment: =(1028) into ExpressionStatement(1029) at 0", "Insert Assignment: =(1035) into ExpressionStatement(1036) at 0", "Insert SimpleName: precision(1010) into Assignment: =(1015) at 0", "Move MethodInvocation(1005) into Assignment: =(1015) at 1", "Insert SimpleName: scale(1017) into Assignment: =(1019) at 0", "Insert NumberLiteral: 0(1018) into Assignment: =(1019) at 1", "Insert SimpleName: precision(1023) into Assignment: =(1028) at 0", "Move MethodInvocation(996) into Assignment: =(1028) at 1", "Insert SimpleName: scale(1030) into Assignment: =(1035) at 0", "Insert MethodInvocation(1034) into Assignment: =(1035) at 1", "Update SimpleName: size(1014) to precision", "Insert SimpleName: resultSet(1031) into MethodInvocation(1034) at 0", "Insert SimpleName: getInt(1032) into MethodInvocation(1034) at 1", "Insert NumberLiteral: 9(1033) into MethodInvocation(1034) at 2"]}}, {"SqlBetweenOperator_cluster": {"actions": [{"root": "INS QualifiedName: SqlOperandTypeChecker.Consistency.COMPARE to ClassInstanceCreation at 3", "operations": ["INS QualifiedName: SqlOperandTypeChecker.Consistency.COMPARE to ClassInstanceCreation at 3"]}]}}, {"SqlBetweenOperator_diff": {"operations": ["Insert QualifiedName: SqlOperandTypeChecker.Consistency.COMPARE(139) into ClassInstanceCreation(140) at 3"]}}, {"AssignableOperandTypeChecker_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS QualifiedName: Consistency.NONE to ReturnStatement at 0", "INS SimpleName: getConsistency to MethodDeclaration at 2", "INS SimpleType: Consistency to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS SimpleName: Consistency to SimpleType: Consistency at 0", "INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 0", "INS Block to MethodDeclaration at 3"]}]}}, {"AssignableOperandTypeChecker_diff": {"operations": ["Insert MethodDeclaration(246) into TypeDeclaration: class(247) at 9", "Insert Modifier: public(239) into MethodDeclaration(246) at 0", "Insert SimpleType: Consistency(241) into MethodDeclaration(246) at 1", "Insert SimpleName: getConsistency(242) into MethodDeclaration(246) at 2", "Insert Block(245) into MethodDeclaration(246) at 3", "Insert SimpleName: Consistency(240) into SimpleType: Consistency(241) at 0", "Insert ReturnStatement(244) into Block(245) at 0", "Insert QualifiedName: Consistency.NONE(243) into ReturnStatement(244) at 0"]}}, {"ComparableOperandTypeChecker_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: com.google.common.base.Preconditions to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS SimpleType: Consistency to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: final to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS SimpleName: consistency to VariableDeclarationFragment at 0", "INS SimpleName: Consistency to SimpleType: Consistency at 0", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleType: Consistency to SingleVariableDeclaration at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: consistency to FieldAccess at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: consistency to MethodInvocation at 2", "INS SimpleName: ComparableOperandTypeChecker to MethodDeclaration at 1", "INS SimpleName: Preconditions to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS Block to MethodDeclaration at 5", "INS SimpleName: Consistency to SimpleType: Consistency at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: consistency to SingleVariableDeclaration at 1", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: checkNotNull to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleType: Consistency to MethodDeclaration at 2", "INS Block to MethodDeclaration at 4", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Consistency to SimpleType: Consistency at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: consistency to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: getConsistency to MethodDeclaration at 3"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Deprecated to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 3", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: nOperands to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: RelDataTypeComparability to SimpleType: RelDataTypeComparability at 0", "INS SimpleName: requiredComparability to SingleVariableDeclaration at 1", "INS SimpleType: RelDataTypeComparability to SingleVariableDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "INS ConstructorInvocation to Block at 0", "operations": ["INS SimpleName: requiredComparability to ConstructorInvocation at 1", "INS SimpleName: nOperands to ConstructorInvocation at 0", "INS QualifiedName: Consistency.NONE to ConstructorInvocation at 2", "INS ConstructorInvocation to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV SuperConstructorInvocation to Block at 0"]}]}}, {"ComparableOperandTypeChecker_diff": {"operations": ["Insert ImportDeclaration(15) into CompilationUnit(328) at 7", "Insert QualifiedName: com.google.common.base.Preconditions(14) into ImportDeclaration(15) at 0", "Insert FieldDeclaration(39) into TypeDeclaration: class(327) at 5", "Insert MethodDeclaration(88) into TypeDeclaration: class(327) at 7", "Insert MethodDeclaration(326) into TypeDeclaration: class(327) at 12", "Insert Modifier: private(33) into FieldDeclaration(39) at 0", "Insert Modifier: final(34) into FieldDeclaration(39) at 1", "Insert SimpleType: Consistency(36) into FieldDeclaration(39) at 2", "Insert VariableDeclarationFragment(38) into FieldDeclaration(39) at 3", "Insert MarkerAnnotation(41) into MethodDeclaration(56) at 0", "Insert SingleVariableDeclaration(46) into MethodDeclaration(56) at 3", "Insert SingleVariableDeclaration(50) into MethodDeclaration(56) at 4", "Insert Modifier: public(57) into MethodDeclaration(88) at 0", "Insert SimpleName: ComparableOperandTypeChecker(58) into MethodDeclaration(88) at 1", "Move SingleVariableDeclaration(35) into MethodDeclaration(88) at 2", "Move SingleVariableDeclaration(39) into MethodDeclaration(88) at 3", "Insert SingleVariableDeclaration(69) into MethodDeclaration(88) at 4", "Insert Block(87) into MethodDeclaration(88) at 5", "Insert MarkerAnnotation(318) into MethodDeclaration(326) at 0", "Insert Modifier: public(319) into MethodDeclaration(326) at 1", "Insert SimpleType: Consistency(321) into MethodDeclaration(326) at 2", "Insert SimpleName: getConsistency(322) into MethodDeclaration(326) at 3", "Insert Block(325) into MethodDeclaration(326) at 4", "Insert SimpleName: Consistency(35) into SimpleType: Consistency(36) at 0", "Insert SimpleName: consistency(37) into VariableDeclarationFragment(38) at 0", "Insert SimpleName: Deprecated(40) into MarkerAnnotation(41) at 0", "Insert PrimitiveType: int(44) into SingleVariableDeclaration(46) at 0", "Insert SimpleName: nOperands(45) into SingleVariableDeclaration(46) at 1", "Insert SimpleType: RelDataTypeComparability(48) into SingleVariableDeclaration(50) at 0", "Insert SimpleName: requiredComparability(49) into SingleVariableDeclaration(50) at 1", "Insert ConstructorInvocation(54) into Block(55) at 0", "Insert SimpleType: Consistency(67) into SingleVariableDeclaration(69) at 0", "Insert SimpleName: consistency(68) into SingleVariableDeclaration(69) at 1", "Move SuperConstructorInvocation(41) into Block(87) at 0", "Move ExpressionStatement(47) into Block(87) at 1", "Insert ExpressionStatement(86) into Block(87) at 2", "Insert SimpleName: Override(317) into MarkerAnnotation(318) at 0", "Insert SimpleName: Consistency(320) into SimpleType: Consistency(321) at 0", "Insert ReturnStatement(324) into Block(325) at 0", "Insert SimpleName: RelDataTypeComparability(47) into SimpleType: RelDataTypeComparability(48) at 0", "Insert SimpleName: nOperands(51) into ConstructorInvocation(54) at 0", "Insert SimpleName: requiredComparability(52) into ConstructorInvocation(54) at 1", "Insert QualifiedName: Consistency.NONE(53) into ConstructorInvocation(54) at 2", "Insert SimpleName: Consistency(66) into SimpleType: Consistency(67) at 0", "Insert Assignment: =(85) into ExpressionStatement(86) at 0", "Insert SimpleName: consistency(323) into ReturnStatement(324) at 0", "Insert FieldAccess(80) into Assignment: =(85) at 0", "Insert MethodInvocation(84) into Assignment: =(85) at 1", "Insert ThisExpression(78) into FieldAccess(80) at 0", "Insert SimpleName: consistency(79) into FieldAccess(80) at 1", "Insert SimpleName: Preconditions(81) into MethodInvocation(84) at 0", "Insert SimpleName: checkNotNull(82) into MethodInvocation(84) at 1", "Insert SimpleName: consistency(83) into MethodInvocation(84) at 2"]}}, {"CompositeOperandTypeChecker_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleName: Consistency to SimpleType: Consistency at 0", "INS QualifiedName: Consistency.NONE to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS SimpleName: getConsistency to MethodDeclaration at 2", "INS Block to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleType: Consistency to MethodDeclaration at 1"]}]}}, {"CompositeOperandTypeChecker_diff": {"operations": ["Insert MethodDeclaration(182) into TypeDeclaration: class(727) at 10", "Insert Modifier: public(175) into MethodDeclaration(182) at 0", "Insert SimpleType: Consistency(177) into MethodDeclaration(182) at 1", "Insert SimpleName: getConsistency(178) into MethodDeclaration(182) at 2", "Insert Block(181) into MethodDeclaration(182) at 3", "Insert SimpleName: Consistency(176) into SimpleType: Consistency(177) at 0", "Insert ReturnStatement(180) into Block(181) at 0", "Insert QualifiedName: Consistency.NONE(179) into ReturnStatement(180) at 0"]}}, {"FamilyOperandTypeChecker_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS Modifier: public to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: getConsistency to MethodDeclaration at 2", "INS Block to MethodDeclaration at 3", "INS SimpleType: Consistency to MethodDeclaration at 1", "INS SimpleName: Consistency to SimpleType: Consistency at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS QualifiedName: Consistency.NONE to ReturnStatement at 0"]}]}}, {"FamilyOperandTypeChecker_diff": {"operations": ["Insert MethodDeclaration(270) into TypeDeclaration: class(271) at 10", "Insert Modifier: public(263) into MethodDeclaration(270) at 0", "Insert SimpleType: Consistency(265) into MethodDeclaration(270) at 1", "Insert SimpleName: getConsistency(266) into MethodDeclaration(270) at 2", "Insert Block(269) into MethodDeclaration(270) at 3", "Insert SimpleName: Consistency(264) into SimpleType: Consistency(265) at 0", "Insert ReturnStatement(268) into Block(269) at 0", "Insert QualifiedName: Consistency.NONE(267) into ReturnStatement(268) at 0"]}}, {"LiteralOperandTypeChecker_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS ReturnStatement to Block at 0", "INS QualifiedName: Consistency.NONE to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: Consistency to SimpleType: Consistency at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS SimpleType: Consistency to MethodDeclaration at 1", "INS Block to MethodDeclaration at 3", "INS SimpleName: getConsistency to MethodDeclaration at 2"]}]}}, {"LiteralOperandTypeChecker_diff": {"operations": ["Insert MethodDeclaration(187) into TypeDeclaration: class(188) at 10", "Insert Modifier: public(180) into MethodDeclaration(187) at 0", "Insert SimpleType: Consistency(182) into MethodDeclaration(187) at 1", "Insert SimpleName: getConsistency(183) into MethodDeclaration(187) at 2", "Insert Block(186) into MethodDeclaration(187) at 3", "Insert SimpleName: Consistency(181) into SimpleType: Consistency(182) at 0", "Insert ReturnStatement(185) into Block(186) at 0", "Insert QualifiedName: Consistency.NONE(184) into ReturnStatement(185) at 0"]}}, {"MultisetOperandTypeChecker_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 3", "INS SimpleName: getConsistency to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: Consistency to SimpleType: Consistency at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleType: Consistency to MethodDeclaration at 1", "INS QualifiedName: Consistency.NONE to ReturnStatement at 0"]}]}}, {"MultisetOperandTypeChecker_diff": {"operations": ["Insert MethodDeclaration(195) into TypeDeclaration: class(196) at 7", "Insert Modifier: public(188) into MethodDeclaration(195) at 0", "Insert SimpleType: Consistency(190) into MethodDeclaration(195) at 1", "Insert SimpleName: getConsistency(191) into MethodDeclaration(195) at 2", "Insert Block(194) into MethodDeclaration(195) at 3", "Insert SimpleName: Consistency(189) into SimpleType: Consistency(190) at 0", "Insert ReturnStatement(193) into Block(194) at 0", "Insert QualifiedName: Consistency.NONE(192) into ReturnStatement(193) at 0"]}}, {"OperandTypes_cluster": {"actions": [{"root": "INS QualifiedName: SqlOperandTypeChecker.Consistency.COMPARE to ClassInstanceCreation at 3", "operations": ["INS QualifiedName: SqlOperandTypeChecker.Consistency.COMPARE to ClassInstanceCreation at 3"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ComparableOperandTypeChecker to ClassInstanceCreation at 0"]}, {"root": "INS QualifiedName: SqlOperandTypeChecker.Consistency.NONE to ClassInstanceCreation at 4", "operations": ["INS QualifiedName: SqlOperandTypeChecker.Consistency.NONE to ClassInstanceCreation at 4"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ComparableOperandTypeChecker to ClassInstanceCreation at 0"]}, {"root": "INS QualifiedName: SqlOperandTypeChecker.Consistency.LEAST_RESTRICTIVE to ClassInstanceCreation at 3", "operations": ["INS QualifiedName: SqlOperandTypeChecker.Consistency.LEAST_RESTRICTIVE to ClassInstanceCreation at 3"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 4", "operations": ["INS SimpleType: Consistency to MethodDeclaration at 1", "INS QualifiedName: Consistency.NONE to ReturnStatement at 0", "INS SimpleName: getConsistency to MethodDeclaration at 2", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS SimpleName: Consistency to SimpleType: Consistency at 0", "INS Block to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 4", "operations": ["INS ReturnStatement to Block at 0", "INS QualifiedName: Consistency.NONE to ReturnStatement at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS SimpleType: Consistency to MethodDeclaration at 1", "INS SimpleName: Consistency to SimpleType: Consistency at 0", "INS Block to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: getConsistency to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 3", "operations": ["INS Block to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS SimpleType: Consistency to MethodDeclaration at 1", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: Consistency to SimpleType: Consistency at 0", "INS QualifiedName: Consistency.NONE to ReturnStatement at 0", "INS SimpleName: getConsistency to MethodDeclaration at 2", "INS MethodDeclaration to AnonymousClassDeclaration at 3"]}]}}, {"OperandTypes_diff": {"operations": ["Insert QualifiedName: SqlOperandTypeChecker.Consistency.COMPARE(828) into ClassInstanceCreation(829) at 3", "Move SimpleType: ComparableOperandTypeChecker(852) into ClassInstanceCreation(848) at 0", "Insert QualifiedName: SqlOperandTypeChecker.Consistency.NONE(847) into ClassInstanceCreation(848) at 3", "Move SimpleType: ComparableOperandTypeChecker(835) into ClassInstanceCreation(866) at 0", "Insert QualifiedName: SqlOperandTypeChecker.Consistency.LEAST_RESTRICTIVE(865) into ClassInstanceCreation(866) at 3", "Insert MethodDeclaration(1344) into AnonymousClassDeclaration(1345) at 4", "Insert MethodDeclaration(1543) into AnonymousClassDeclaration(1544) at 4", "Insert MethodDeclaration(339) into AnonymousClassDeclaration(340) at 3", "Insert Modifier: public(1337) into MethodDeclaration(1344) at 0", "Insert SimpleType: Consistency(1339) into MethodDeclaration(1344) at 1", "Insert SimpleName: getConsistency(1340) into MethodDeclaration(1344) at 2", "Insert Block(1343) into MethodDeclaration(1344) at 3", "Insert Modifier: public(1536) into MethodDeclaration(1543) at 0", "Insert SimpleType: Consistency(1538) into MethodDeclaration(1543) at 1", "Insert SimpleName: getConsistency(1539) into MethodDeclaration(1543) at 2", "Insert Block(1542) into MethodDeclaration(1543) at 3", "Insert Modifier: public(332) into MethodDeclaration(339) at 0", "Insert SimpleType: Consistency(334) into MethodDeclaration(339) at 1", "Insert SimpleName: getConsistency(335) into MethodDeclaration(339) at 2", "Insert Block(338) into MethodDeclaration(339) at 3", "Insert SimpleName: Consistency(1338) into SimpleType: Consistency(1339) at 0", "Insert ReturnStatement(1342) into Block(1343) at 0", "Insert SimpleName: Consistency(1537) into SimpleType: Consistency(1538) at 0", "Insert ReturnStatement(1541) into Block(1542) at 0", "Insert SimpleName: Consistency(333) into SimpleType: Consistency(334) at 0", "Insert ReturnStatement(337) into Block(338) at 0", "Insert QualifiedName: Consistency.NONE(1341) into ReturnStatement(1342) at 0", "Insert QualifiedName: Consistency.NONE(1540) into ReturnStatement(1541) at 0", "Insert QualifiedName: Consistency.NONE(336) into ReturnStatement(337) at 0"]}}, {"SameOperandTypeChecker_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 6", "operations": ["INS QualifiedName: Consistency.NONE to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS SimpleName: getConsistency to MethodDeclaration at 2", "INS Block to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleType: Consistency to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: Consistency to SimpleType: Consistency at 0"]}]}}, {"SameOperandTypeChecker_diff": {"operations": ["Insert MethodDeclaration(59) into TypeDeclaration: class(375) at 6", "Insert Modifier: public(52) into MethodDeclaration(59) at 0", "Insert SimpleType: Consistency(54) into MethodDeclaration(59) at 1", "Insert SimpleName: getConsistency(55) into MethodDeclaration(59) at 2", "Insert Block(58) into MethodDeclaration(59) at 3", "Insert SimpleName: Consistency(53) into SimpleType: Consistency(54) at 0", "Insert ReturnStatement(57) into Block(58) at 0", "Insert QualifiedName: Consistency.NONE(56) into ReturnStatement(57) at 0"]}}, {"SetopOperandTypeChecker_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: Consistency to SimpleType: Consistency at 0", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 3", "INS QualifiedName: Consistency.NONE to ReturnStatement at 0", "INS SimpleName: getConsistency to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleType: Consistency to MethodDeclaration at 1"]}]}}, {"SetopOperandTypeChecker_diff": {"operations": ["Insert MethodDeclaration(350) into TypeDeclaration: class(351) at 7", "Insert Modifier: public(343) into MethodDeclaration(350) at 0", "Insert SimpleType: Consistency(345) into MethodDeclaration(350) at 1", "Insert SimpleName: getConsistency(346) into MethodDeclaration(350) at 2", "Insert Block(349) into MethodDeclaration(350) at 3", "Insert SimpleName: Consistency(344) into SimpleType: Consistency(345) at 0", "Insert ReturnStatement(348) into Block(349) at 0", "Insert QualifiedName: Consistency.NONE(347) into ReturnStatement(348) at 0"]}}, {"SqlOperandTypeChecker_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 6", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS SimpleName: getConsistency to MethodDeclaration at 2", "INS TagElement to Javadoc at 0", "INS TextElement: Returns the strategy for making the arguments have consistency types.  to TagElement at 0", "INS SimpleType: Consistency to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: interface at 6", "INS SimpleName: Consistency to SimpleType: Consistency at 0"]}, {"root": "INS EnumDeclaration to TypeDeclaration: interface at 7", "operations": ["INS EnumDeclaration to TypeDeclaration: interface at 7", "INS TagElement to Javadoc at 0", "INS TextElement: or boolean.  to TagElement at 2", "INS TagElement to Javadoc at 0", "INS Javadoc to EnumDeclaration at 0", "INS Javadoc to EnumConstantDeclaration at 0", "INS TagElement to Javadoc at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: Consistency to EnumDeclaration at 1", "INS SimpleName: NONE to EnumConstantDeclaration at 1", "INS EnumConstantDeclaration to EnumDeclaration at 2", "INS EnumConstantDeclaration to EnumDeclaration at 3", "INS TextElement: Do not try to make arguments consistent.  to TagElement at 0", "INS EnumConstantDeclaration to EnumDeclaration at 4", "INS TextElement: Make arguments of consistent type using comparison semantics. to TagElement at 0", "INS SimpleName: COMPARE to EnumConstantDeclaration at 1", "INS TextElement: Strategy used to make arguments consistent.  to TagElement at 0", "INS TextElement: Convert all arguments to the least restrictive type.  to TagElement at 0", "INS Javadoc to EnumConstantDeclaration at 0", "INS SimpleName: LEAST_RESTRICTIVE to EnumConstantDeclaration at 1", "INS TextElement: Character values are implicitly converted to numeric, date-time, interval to TagElement at 1", "INS Javadoc to EnumConstantDeclaration at 0"]}]}}, {"SqlOperandTypeChecker_diff": {"operations": ["Insert MethodDeclaration(79) into TypeDeclaration: interface(102) at 6", "Insert EnumDeclaration(101) into TypeDeclaration: interface(102) at 7", "Insert Javadoc(75) into MethodDeclaration(79) at 0", "Insert SimpleType: Consistency(77) into MethodDeclaration(79) at 1", "Insert SimpleName: getConsistency(78) into MethodDeclaration(79) at 2", "Insert Javadoc(82) into EnumDeclaration(101) at 0", "Insert SimpleName: Consistency(83) into EnumDeclaration(101) at 1", "Insert EnumConstantDeclaration(88) into EnumDeclaration(101) at 2", "Insert EnumConstantDeclaration(95) into EnumDeclaration(101) at 3", "Insert EnumConstantDeclaration(100) into EnumDeclaration(101) at 4", "Insert TagElement(74) into Javadoc(75) at 0", "Insert SimpleName: Consistency(76) into SimpleType: Consistency(77) at 0", "Insert TagElement(81) into Javadoc(82) at 0", "Insert Javadoc(86) into EnumConstantDeclaration(88) at 0", "Insert SimpleName: NONE(87) into EnumConstantDeclaration(88) at 1", "Insert Javadoc(93) into EnumConstantDeclaration(95) at 0", "Insert SimpleName: COMPARE(94) into EnumConstantDeclaration(95) at 1", "Insert Javadoc(98) into EnumConstantDeclaration(100) at 0", "Insert SimpleName: LEAST_RESTRICTIVE(99) into EnumConstantDeclaration(100) at 1", "Insert TextElement: Returns the strategy for making the arguments have consistency types. (73) into TagElement(74) at 0", "Insert TextElement: Strategy used to make arguments consistent. (80) into TagElement(81) at 0", "Insert TagElement(85) into Javadoc(86) at 0", "Insert TagElement(92) into Javadoc(93) at 0", "Insert TagElement(97) into Javadoc(98) at 0", "Insert TextElement: Do not try to make arguments consistent. (84) into TagElement(85) at 0", "Insert TextElement: Make arguments of consistent type using comparison semantics.(89) into TagElement(92) at 0", "Insert TextElement: Character values are implicitly converted to numeric, date-time, interval(90) into TagElement(92) at 1", "Insert TextElement: or boolean. (91) into TagElement(92) at 2", "Insert TextElement: Convert all arguments to the least restrictive type. (96) into TagElement(97) at 0"]}}], "commit_stats": [{"total_files": 22, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}