{"application": "apache-shiro", "csha": "1c01f3f8b01a4fb1cbe23e327e91260152efb3e8", "files": [{"AbstractAuthenticator_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 1", "MOV ImportDeclaration to CompilationUnit at 5", "MOV ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS TextElement: s that should be notified during authentication to TagElement: @return at 2", "INS TextElement:  AuthenticationListener to TagElement: @link at 1", "INS SimpleType: Collection to ParameterizedType: Collection<AuthenticationListener> at 0", "INS SimpleName: getAuthenticationListeners to MethodDeclaration at 4", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS TextElement: Returns the  to TagElement at 0", "INS SimpleName: AuthenticationListener to TagElement: @link at 0", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS TagElement to Javadoc at 0", "INS ArrayInitializer to SingleMemberAnnotation at 1", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS TextElement:  the  to TagElement: @return at 0", "INS TagElement: @link to TagElement: @return at 1", "INS SimpleType: AuthenticationListener to ParameterizedType: Collection<AuthenticationListener> at 1", "INS TextElement: attempts. to TagElement: @return at 3", "INS StringLiteral: \"UnusedDeclaration\" to ArrayInitializer at 0", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: s that should be notified during authentication to TagElement at 2", "INS SingleMemberAnnotation to MethodDeclaration at 1", "INS ParameterizedType: Collection<AuthenticationListener> to MethodDeclaration at 3", "INS SimpleName: AuthenticationListener to TagElement: @link at 0", "INS TextElement:  AuthenticationListener to TagElement: @link at 1", "INS TagElement: @return to Javadoc at 1", "INS TagElement: @link to TagElement at 1", "INS TextElement: attempts. to TagElement at 3"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement: authentication attempt. to TagElement: @param at 4", "INS TagElement to Javadoc at 0", "INS TagElement: @code to TagElement: @param at 2", "INS TextElement:  one or more  to TagElement: @param at 1", "INS TextElement: Sets the  to TagElement at 0", "INS TextElement: s that should be notified due to an to TagElement: @param at 3", "INS TextElement:  AuthenticationListener to TagElement: @code at 0", "INS TextElement:  AuthenticationListener to TagElement: @link at 1", "INS SimpleName: listeners to TagElement: @param at 0", "INS TextElement: s that should be notified during authentication to TagElement at 2", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: AuthenticationListener to TagElement: @link at 0", "INS TextElement: attempts. to TagElement at 3", "INS TagElement: @link to TagElement at 1"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 1", "operations": ["INS ArrayInitializer to SingleMemberAnnotation at 1", "INS SingleMemberAnnotation to MethodDeclaration at 1", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS StringLiteral: \"UnusedDeclaration\" to ArrayInitializer at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5", "MOV Modifier: public to MethodDeclaration at 2"]}, {"root": "UPDATE from <p>This class delegates the actual authentication attempt to subclasses but supports notification for to This class delegates the actual authentication attempt to subclasses but supports notification for", "operations": ["UPD TextElement: <p>This class delegates the actual authentication attempt to subclasses but supports notification for from <p>This class delegates the actual authentication attempt to subclasses but supports notification for to This class delegates the actual authentication attempt to subclasses but supports notification for"]}, {"root": "UPDATE from <p>In most cases, the only thing a subclass needs to do (via its  to In most cases, the only thing a subclass needs to do (via its ", "operations": ["UPD TextElement: <p>In most cases, the only thing a subclass needs to do (via its  from <p>In most cases, the only thing a subclass needs to do (via its  to In most cases, the only thing a subclass needs to do (via its "]}, {"root": "UPDATE from is perform the actual principal/credential verification process for the submitted <tt>AuthenticationToken</tt>. to is perform the actual principal/credential verification process for the submitted ", "operations": ["UPD TextElement: is perform the actual principal/credential verification process for the submitted <tt>AuthenticationToken</tt>. from is perform the actual principal/credential verification process for the submitted <tt>AuthenticationToken</tt>. to is perform the actual principal/credential verification process for the submitted "]}, {"root": "INS TagElement: @code to TagElement at 15", "operations": ["INS TextElement:  AuthenticationToken to TagElement: @code at 0", "INS TagElement: @code to TagElement at 15"]}, {"root": "INS TextElement: . to TagElement at 16", "operations": ["INS TextElement: . to TagElement at 16"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @link to TagElement at 12", "MOV TextElement: <li>If an <tt>AuthenticationException</tt> is thrown during <tt>doAuthenticate</tt>, to TagElement: @code at 0", "MOV TagElement: @link to TagElement at 18", "MOV TextElement: <li>Return the <tt>AuthenticationInfo</tt></li> to TagElement: @code at 0"]}, {"root": "UPDATE from Private class log instance.  to Private class log instance.", "operations": ["UPD TextElement: Private class log instance.  from Private class log instance.  to Private class log instance."]}, {"root": "UPDATE from Any registered listeners that wish to know about things during the authentication process.  to Any registered listeners that wish to know about things during the authentication process.", "operations": ["UPD TextElement: Any registered listeners that wish to know about things during the authentication process.  from Any registered listeners that wish to know about things during the authentication process.  to Any registered listeners that wish to know about things during the authentication process."]}, {"root": "UPDATE from  collection is a non-null <code>ArrayList</code>. to  collection is a non-null ", "operations": ["UPD TextElement:  collection is a non-null <code>ArrayList</code>. from  collection is a non-null <code>ArrayList</code>. to  collection is a non-null "]}, {"root": "INS TagElement: @code to TagElement at 3", "operations": ["INS TagElement: @code to TagElement at 3", "INS TextElement:  ArrayList to TagElement: @code at 0"]}, {"root": "INS TextElement: . to TagElement at 4", "operations": ["INS TextElement: . to TagElement at 4"]}, {"root": "MOVE from SimpleType: AuthenticationListener", "operations": ["MOV SimpleName: AuthenticationListener to SimpleType: AuthenticationListener at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV FieldAccess to ReturnStatement at 0"]}, {"root": "UPDATE from authentication was successful for the specified <code>token</code> which resulted in the specified to authentication was successful for the specified ", "operations": ["UPD TextElement: authentication was successful for the specified <code>token</code> which resulted in the specified from authentication was successful for the specified <code>token</code> which resulted in the specified to authentication was successful for the specified "]}, {"root": "INS TagElement: @code to TagElement at 4", "operations": ["INS TextElement:  token to TagElement: @code at 0", "INS TagElement: @code to TagElement at 4"]}, {"root": "INS TextElement:  which resulted in the specified to TagElement at 5", "operations": ["INS TextElement:  which resulted in the specified to TagElement at 5"]}, {"root": "INS TagElement: @code to TagElement at 6", "operations": ["INS TextElement:  info to TagElement: @code at 0", "INS TagElement: @code to TagElement at 6"]}, {"root": "UPDATE from <code>info</code>.  This implementation merely iterates over the internal <code>listeners</code> collection and to .  This implementation merely iterates over the internal ", "operations": ["UPD TextElement: <code>info</code>.  This implementation merely iterates over the internal <code>listeners</code> collection and from <code>info</code>.  This implementation merely iterates over the internal <code>listeners</code> collection and to .  This implementation merely iterates over the internal "]}, {"root": "INS TagElement: @code to TagElement at 8", "operations": ["INS TagElement: @code to TagElement at 8", "INS TextElement:  listeners to TagElement: @code at 0"]}, {"root": "INS TextElement:  collection and to TagElement at 9", "operations": ["INS TextElement:  collection and to TagElement at 9"]}, {"root": "INS TextElement:  the submitted  to TagElement: @param at 1", "operations": ["INS TextElement:  the submitted  to TagElement: @param at 1"]}, {"root": "INS TagElement: @code to TagElement: @param at 2", "operations": ["INS TextElement:  AuthenticationToken to TagElement: @code at 0", "INS TagElement: @code to TagElement: @param at 2"]}, {"root": "UPDATE from  the submitted <code>AuthenticationToken</code> that resulted in a successful authentication. to  that resulted in a successful authentication.", "operations": ["UPD TextElement:  the submitted <code>AuthenticationToken</code> that resulted in a successful authentication. from  the submitted <code>AuthenticationToken</code> that resulted in a successful authentication. to  that resulted in a successful authentication."]}, {"root": "INS TextElement:   the returned  to TagElement: @param at 1", "operations": ["INS TextElement:   the returned  to TagElement: @param at 1"]}, {"root": "INS TagElement: @code to TagElement: @param at 2", "operations": ["INS TextElement:  AuthenticationInfo to TagElement: @code at 0", "INS TagElement: @code to TagElement: @param at 2"]}, {"root": "UPDATE from   the returned <code>AuthenticationInfo</code> resulting from the successful authentication. to  resulting from the successful authentication.", "operations": ["UPD TextElement:   the returned <code>AuthenticationInfo</code> resulting from the successful authentication. from   the returned <code>AuthenticationInfo</code> resulting from the successful authentication. to  resulting from the successful authentication."]}, {"root": "INS TextElement: specified  to TagElement at 4", "operations": ["INS TextElement: specified  to TagElement at 4"]}, {"root": "INS TagElement: @code to TagElement at 5", "operations": ["INS TagElement: @code to TagElement at 5", "INS TextElement:  token to TagElement: @code at 0"]}, {"root": "INS TextElement:  which resulted in the specified  to TagElement at 6", "operations": ["INS TextElement:  which resulted in the specified  to TagElement at 6"]}, {"root": "INS TagElement: @code to TagElement at 7", "operations": ["INS TextElement:  ae to TagElement: @code at 0", "INS TagElement: @code to TagElement at 7"]}, {"root": "UPDATE from specified <code>token</code> which resulted in the specified <code>ae</code> exception.  This implementation merely to  exception.  This implementation merely", "operations": ["UPD TextElement: specified <code>token</code> which resulted in the specified <code>ae</code> exception.  This implementation merely from specified <code>token</code> which resulted in the specified <code>ae</code> exception.  This implementation merely to  exception.  This implementation merely"]}, {"root": "UPDATE from iterates over the internal <code>listeners</code> collection and calls to iterates over the internal ", "operations": ["UPD TextElement: iterates over the internal <code>listeners</code> collection and calls from iterates over the internal <code>listeners</code> collection and calls to iterates over the internal ", "UPD TextElement: iterates over the internal <code>listeners</code> collection and calls from iterates over the internal <code>listeners</code> collection and calls to iterates over the internal "]}, {"root": "INS TagElement: @code to TagElement at 10", "operations": ["INS TagElement: @code to TagElement at 10", "INS TextElement:  listeners to TagElement: @code at 0"]}, {"root": "INS TextElement:  collection and calls to TagElement at 11", "operations": ["INS TextElement:  collection and calls to TagElement at 11"]}, {"root": "INS TextElement:  the submitted  to TagElement: @param at 1", "operations": ["INS TextElement:  the submitted  to TagElement: @param at 1"]}, {"root": "INS TagElement: @code to TagElement: @param at 2", "operations": ["INS TagElement: @code to TagElement: @param at 2", "INS TextElement:  AuthenticationToken to TagElement: @code at 0"]}, {"root": "UPDATE from  the submitted <code>AuthenticationToken</code> that resulted in a failed authentication. to  that resulted in a failed authentication.", "operations": ["UPD TextElement:  the submitted <code>AuthenticationToken</code> that resulted in a failed authentication. from  the submitted <code>AuthenticationToken</code> that resulted in a failed authentication. to  that resulted in a failed authentication."]}, {"root": "INS TextElement:     the resulting  to TagElement: @param at 1", "operations": ["INS TextElement:     the resulting  to TagElement: @param at 1"]}, {"root": "INS TagElement: @code to TagElement: @param at 2", "operations": ["INS TextElement:  AuthenticationException to TagElement: @code at 0", "INS TagElement: @code to TagElement: @param at 2"]}, {"root": "UPDATE from     the resulting <code>AuthenticationException<code> that caused the authentication to fail. to  that caused the authentication to fail.", "operations": ["UPD TextElement:     the resulting <code>AuthenticationException<code> that caused the authentication to fail. from     the resulting <code>AuthenticationException<code> that caused the authentication to fail. to  that caused the authentication to fail."]}, {"root": "INS TagElement: @code to TagElement at 3", "operations": ["INS TagElement: @code to TagElement at 3", "INS TextElement:  Subject to TagElement: @code at 0"]}, {"root": "UPDATE from <code>Subject</code> has logged-out.  This implementation merely to  has logged-out.  This implementation merely", "operations": ["UPD TextElement: <code>Subject</code> has logged-out.  This implementation merely from <code>Subject</code> has logged-out.  This implementation merely to  has logged-out.  This implementation merely"]}, {"root": "INS TagElement: @code to TagElement at 6", "operations": ["INS TagElement: @code to TagElement at 6", "INS TextElement:  listeners to TagElement: @code at 0"]}, {"root": "INS TextElement:  collection and calls to TagElement at 7", "operations": ["INS TextElement:  collection and calls to TagElement at 7"]}, {"root": "UPDATE from  the identifying principals of the <code>Subject</code>/account logging out. to  the identifying principals of the ", "operations": ["UPD TextElement:  the identifying principals of the <code>Subject</code>/account logging out. from  the identifying principals of the <code>Subject</code>/account logging out. to  the identifying principals of the ", "UPD TextElement:  the identifying principals of the <code>Subject</code>/account logging out. from  the identifying principals of the <code>Subject</code>/account logging out. to  the identifying principals of the "]}, {"root": "INS TagElement: @code to TagElement: @param at 2", "operations": ["INS TextElement:  Subject to TagElement: @code at 0", "INS TagElement: @code to TagElement: @param at 2"]}, {"root": "INS TextElement: /account logging out. to TagElement: @param at 3", "operations": ["INS TextElement: /account logging out. to TagElement: @param at 3"]}, {"root": "INS TagElement: @code to TagElement: @param at 2", "operations": ["INS TagElement: @code to TagElement: @param at 2", "INS TextElement:  Subject to TagElement: @code at 0"]}, {"root": "INS TextElement: /account logging out. to TagElement: @param at 3", "operations": ["INS TextElement: /account logging out. to TagElement: @param at 3"]}, {"root": "INS TextElement: <li>If an  to TagElement at 9", "operations": ["INS TextElement: <li>If an  to TagElement at 9"]}, {"root": "INS TagElement: @code to TagElement at 10", "operations": ["INS TagElement: @code to TagElement at 10"]}, {"root": "INS TextElement:  is thrown during  to TagElement at 11", "operations": ["INS TextElement:  is thrown during  to TagElement at 11"]}, {"root": "INS TagElement: @code to TagElement at 12", "operations": ["INS TagElement: @code to TagElement at 12", "INS TextElement:  doAuthenticate to TagElement: @code at 0"]}, {"root": "INS TextElement: , to TagElement at 13", "operations": ["INS TextElement: , to TagElement at 13"]}, {"root": "INS TextElement: <li>Return the  to TagElement at 25", "operations": ["INS TextElement: <li>Return the  to TagElement at 25"]}, {"root": "INS TagElement: @code to TagElement at 26", "operations": ["INS TagElement: @code to TagElement at 26"]}, {"root": "INS TextElement: </li> to TagElement at 27", "operations": ["INS TextElement: </li> to TagElement at 27"]}, {"root": "UPDATE from <p>Common behavior for most authentication attempts is encapsulated in the to Common behavior for most authentication attempts is encapsulated in the", "operations": ["UPD TextElement: <p>Common behavior for most authentication attempts is encapsulated in the from <p>Common behavior for most authentication attempts is encapsulated in the to Common behavior for most authentication attempts is encapsulated in the"]}, {"root": "UPDATE from <p><b>N.B.</b> Subclasses <em>should</em> throw some kind of to <b>N.B.</b> Subclasses <em>should</em> throw some kind of", "operations": ["UPD TextElement: <p><b>N.B.</b> Subclasses <em>should</em> throw some kind of from <p><b>N.B.</b> Subclasses <em>should</em> throw some kind of to <b>N.B.</b> Subclasses <em>should</em> throw some kind of"]}, {"root": "INS TagElement: @code to TagElement at 7", "operations": ["INS TagElement: @code to TagElement at 7", "INS TextElement:  AuthenticationException to TagElement: @code at 0"]}, {"root": "UPDATE from <tt>AuthenticationException</tt> if there is a problem during to  if there is a problem during", "operations": ["UPD TextElement: <tt>AuthenticationException</tt> if there is a problem during from <tt>AuthenticationException</tt> if there is a problem during to  if there is a problem during"]}, {"root": "UPDATE from authentication instead of returning <tt>null</tt>.  A <tt>null</tt> return value indicates to authentication instead of returning ", "operations": ["UPD TextElement: authentication instead of returning <tt>null</tt>.  A <tt>null</tt> return value indicates from authentication instead of returning <tt>null</tt>.  A <tt>null</tt> return value indicates to authentication instead of returning "]}, {"root": "INS TagElement: @code to TagElement at 10", "operations": ["INS TagElement: @code to TagElement at 10", "INS TextElement:  null to TagElement: @code at 0"]}, {"root": "INS TextElement: .  A  to TagElement at 11", "operations": ["INS TextElement: .  A  to TagElement at 11"]}, {"root": "INS TagElement: @code to TagElement at 12", "operations": ["INS TextElement:  null to TagElement: @code at 0", "INS TagElement: @code to TagElement at 12"]}, {"root": "INS TextElement:  return value indicates to TagElement at 13", "operations": ["INS TextElement:  return value indicates to TagElement at 13"]}, {"root": "UPDATE from a configuration or programming error, since <tt>AuthenticationException</tt>s should to a configuration or programming error, since ", "operations": ["UPD TextElement: a configuration or programming error, since <tt>AuthenticationException</tt>s should from a configuration or programming error, since <tt>AuthenticationException</tt>s should to a configuration or programming error, since "]}, {"root": "INS TagElement: @code to TagElement at 15", "operations": ["INS TagElement: @code to TagElement at 15", "INS TextElement:  AuthenticationException to TagElement: @code at 0"]}, {"root": "INS TextElement: s should to TagElement at 16", "operations": ["INS TextElement: s should to TagElement at 16"]}, {"root": "INS TextElement:  an  to TagElement: @return at 0", "operations": ["INS TextElement:  an  to TagElement: @return at 0"]}, {"root": "INS TagElement: @code to TagElement: @return at 1", "operations": ["INS TagElement: @code to TagElement: @return at 1", "INS TextElement:  AuthenticationInfo to TagElement: @code at 0"]}, {"root": "UPDATE from  an <tt>AuthenticationInfo</tt> object encapsulating the user's account information to  object encapsulating the user's account information", "operations": ["UPD TextElement:  an <tt>AuthenticationInfo</tt> object encapsulating the user's account information from  an <tt>AuthenticationInfo</tt> object encapsulating the user's account information to  object encapsulating the user's account information"]}, {"root": "UPDATE from <li>If an <tt>AuthenticationException</tt> is thrown during <tt>doAuthenticate</tt>, to  AuthenticationException", "operations": ["UPD TextElement: <li>If an <tt>AuthenticationException</tt> is thrown during <tt>doAuthenticate</tt>, from <li>If an <tt>AuthenticationException</tt> is thrown during <tt>doAuthenticate</tt>, to  AuthenticationException"]}, {"root": "UPDATE from <li>Return the <tt>AuthenticationInfo</tt></li> to  AuthenticationInfo", "operations": ["UPD TextElement: <li>Return the <tt>AuthenticationInfo</tt></li> from <li>Return the <tt>AuthenticationInfo</tt></li> to  AuthenticationInfo"]}, {"root": "DEL SimpleType: AuthenticationListenerRegistrar", "operations": ["DEL SimpleType: AuthenticationListenerRegistrar", "DEL SimpleName: AuthenticationListenerRegistrar"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: remove", "DEL MethodInvocation", "DEL SimpleName: listener"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL PrimitiveType: void", "DEL SimpleName: AuthenticationListener", "DEL SimpleName: listener", "DEL SimpleName: listener", "DEL SimpleName: add", "DEL ThisExpression", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL FieldAccess", "DEL MethodDeclaration", "DEL SimpleName: add", "DEL MethodInvocation", "DEL SimpleName: listeners", "DEL Block", "DEL ExpressionStatement", "DEL SimpleType: AuthenticationListener"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: listener", "DEL MethodDeclaration", "DEL SimpleName: remove", "DEL SimpleType: AuthenticationListener", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean"]}, {"root": "DEL TextElement: <p/>", "operations": ["DEL TextElement: <p/>"]}]}}, {"AbstractAuthenticator_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(689) at 5", "Move ImportDeclaration(5) into CompilationUnit(689) at 5", "Move ImportDeclaration(11) into CompilationUnit(689) at 1", "Insert MethodDeclaration(187) into TypeDeclaration: class(688) at 10", "Insert Javadoc(116) into MethodDeclaration(155) at 0", "Insert SingleMemberAnnotation(120) into MethodDeclaration(155) at 1", "Insert Javadoc(170) into MethodDeclaration(187) at 0", "Insert SingleMemberAnnotation(174) into MethodDeclaration(187) at 1", "Move Modifier: public(149) into MethodDeclaration(187) at 2", "Insert ParameterizedType: Collection<AuthenticationListener>(180) into MethodDeclaration(187) at 3", "Insert SimpleName: getAuthenticationListeners(181) into MethodDeclaration(187) at 4", "Move Block(163) into MethodDeclaration(187) at 5", "Update TextElement: <p>This class delegates the actual authentication attempt to subclasses but supports notification for(18) to This class delegates the actual authentication attempt to subclasses but supports notification for", "Update TextElement: <p>In most cases, the only thing a subclass needs to do (via its (26) to In most cases, the only thing a subclass needs to do (via its ", "Update TextElement: is perform the actual principal/credential verification process for the submitted <tt>AuthenticationToken</tt>.(31) to is perform the actual principal/credential verification process for the submitted ", "Insert TagElement: @code(33) into TagElement(35) at 15", "Insert TextElement: .(34) into TagElement(35) at 16", "Insert TagElement(108) into Javadoc(116) at 0", "Insert TagElement: @param(115) into Javadoc(116) at 1", "Insert SimpleName: SuppressWarnings(117) into SingleMemberAnnotation(120) at 0", "Insert ArrayInitializer(119) into SingleMemberAnnotation(120) at 1", "Insert TagElement(162) into Javadoc(170) at 0", "Insert TagElement: @return(169) into Javadoc(170) at 1", "Insert SimpleName: SuppressWarnings(171) into SingleMemberAnnotation(174) at 0", "Insert ArrayInitializer(173) into SingleMemberAnnotation(174) at 1", "Insert SimpleType: Collection(177) into ParameterizedType: Collection<AuthenticationListener>(180) at 0", "Insert SimpleType: AuthenticationListener(179) into ParameterizedType: Collection<AuthenticationListener>(180) at 1", "Move TagElement: @link(376) into TagElement(468) at 18", "Move TagElement: @link(393) into TagElement(468) at 12", "Insert TextElement:  AuthenticationToken(32) into TagElement: @code(33) at 0", "Update TextElement: Private class log instance. (49) to Private class log instance.", "Update TextElement: Any registered listeners that wish to know about things during the authentication process. (66) to Any registered listeners that wish to know about things during the authentication process.", "Update TextElement:  collection is a non-null <code>ArrayList</code>.(82) to  collection is a non-null ", "Insert TagElement: @code(85) into TagElement(87) at 3", "Insert TextElement: .(86) into TagElement(87) at 4", "Insert TextElement: Sets the (102) into TagElement(108) at 0", "Insert TagElement: @link(105) into TagElement(108) at 1", "Insert TextElement: s that should be notified during authentication(106) into TagElement(108) at 2", "Insert TextElement: attempts.(107) into TagElement(108) at 3", "Insert SimpleName: listeners(109) into TagElement: @param(115) at 0", "Insert TextElement:  one or more (110) into TagElement: @param(115) at 1", "Insert TagElement: @code(112) into TagElement: @param(115) at 2", "Insert TextElement: s that should be notified due to an(113) into TagElement: @param(115) at 3", "Insert TextElement: authentication attempt.(114) into TagElement: @param(115) at 4", "Insert StringLiteral: \"UnusedDeclaration\"(118) into ArrayInitializer(119) at 0", "Insert TextElement: Returns the (156) into TagElement(162) at 0", "Insert TagElement: @link(159) into TagElement(162) at 1", "Insert TextElement: s that should be notified during authentication(160) into TagElement(162) at 2", "Insert TextElement: attempts.(161) into TagElement(162) at 3", "Insert TextElement:  the (163) into TagElement: @return(169) at 0", "Insert TagElement: @link(166) into TagElement: @return(169) at 1", "Insert TextElement: s that should be notified during authentication(167) into TagElement: @return(169) at 2", "Insert TextElement: attempts.(168) into TagElement: @return(169) at 3", "Insert StringLiteral: \"UnusedDeclaration\"(172) into ArrayInitializer(173) at 0", "Insert SimpleName: Collection(176) into SimpleType: Collection(177) at 0", "Move SimpleName: AuthenticationListener(152) into SimpleType: AuthenticationListener(179) at 0", "Move FieldAccess(158) into ReturnStatement(185) at 0", "Update TextElement: authentication was successful for the specified <code>token</code> which resulted in the specified(170) to authentication was successful for the specified ", "Insert TagElement: @code(195) into TagElement(216) at 4", "Insert TextElement:  which resulted in the specified(196) into TagElement(216) at 5", "Insert TagElement: @code(198) into TagElement(216) at 6", "Update TextElement: <code>info</code>.  This implementation merely iterates over the internal <code>listeners</code> collection and(171) to .  This implementation merely iterates over the internal ", "Insert TagElement: @code(201) into TagElement(216) at 8", "Insert TextElement:  collection and(202) into TagElement(216) at 9", "Insert TextElement:  the submitted (218) into TagElement: @param(222) at 1", "Insert TagElement: @code(220) into TagElement: @param(222) at 2", "Update TextElement:  the submitted <code>AuthenticationToken</code> that resulted in a successful authentication.(187) to  that resulted in a successful authentication.", "Insert TextElement:   the returned (224) into TagElement: @param(228) at 1", "Insert TagElement: @code(226) into TagElement: @param(228) at 2", "Update TextElement:   the returned <code>AuthenticationInfo</code> resulting from the successful authentication.(190) to  resulting from the successful authentication.", "Insert TextElement: specified (264) into TagElement(287) at 4", "Insert TagElement: @code(266) into TagElement(287) at 5", "Insert TextElement:  which resulted in the specified (267) into TagElement(287) at 6", "Insert TagElement: @code(269) into TagElement(287) at 7", "Update TextElement: specified <code>token</code> which resulted in the specified <code>ae</code> exception.  This implementation merely(227) to  exception.  This implementation merely", "Update TextElement: iterates over the internal <code>listeners</code> collection and calls(228) to iterates over the internal ", "Insert TagElement: @code(273) into TagElement(287) at 10", "Insert TextElement:  collection and calls(274) into TagElement(287) at 11", "Insert TextElement:  the submitted (289) into TagElement: @param(293) at 1", "Insert TagElement: @code(291) into TagElement: @param(293) at 2", "Update TextElement:  the submitted <code>AuthenticationToken</code> that resulted in a failed authentication.(243) to  that resulted in a failed authentication.", "Insert TextElement:     the resulting (295) into TagElement: @param(299) at 1", "Insert TagElement: @code(297) into TagElement: @param(299) at 2", "Update TextElement:     the resulting <code>AuthenticationException<code> that caused the authentication to fail.(246) to  that caused the authentication to fail.", "Insert TagElement: @code(335) into TagElement(350) at 3", "Update TextElement: <code>Subject</code> has logged-out.  This implementation merely(282) to  has logged-out.  This implementation merely", "Update TextElement: iterates over the internal <code>listeners</code> collection and calls(283) to iterates over the internal ", "Insert TagElement: @code(339) into TagElement(350) at 6", "Insert TextElement:  collection and calls(340) into TagElement(350) at 7", "Update TextElement:  the identifying principals of the <code>Subject</code>/account logging out.(295) to  the identifying principals of the ", "Insert TagElement: @code(354) into TagElement: @param(356) at 2", "Insert TextElement: /account logging out.(355) into TagElement: @param(356) at 3", "Update TextElement:  the identifying principals of the <code>Subject</code>/account logging out.(333) to  the identifying principals of the ", "Insert TagElement: @code(395) into TagElement: @param(397) at 2", "Insert TextElement: /account logging out.(396) into TagElement: @param(397) at 3", "Insert TextElement: <li>If an (424) into TagElement(468) at 8", "Insert TagElement: @code(426) into TagElement(468) at 9", "Insert TextElement:  is thrown during (427) into TagElement(468) at 10", "Insert TagElement: @code(429) into TagElement(468) at 11", "Insert TextElement: ,(430) into TagElement(468) at 12", "Insert TextElement: <li>Return the (463) into TagElement(468) at 23", "Insert TagElement: @code(465) into TagElement(468) at 24", "Insert TextElement: </li>(466) into TagElement(468) at 25", "Update TextElement: <p>Common behavior for most authentication attempts is encapsulated in the(569) to Common behavior for most authentication attempts is encapsulated in the", "Update TextElement: <p><b>N.B.</b> Subclasses <em>should</em> throw some kind of(575) to <b>N.B.</b> Subclasses <em>should</em> throw some kind of", "Insert TagElement: @code(648) into TagElement(662) at 7", "Update TextElement: <tt>AuthenticationException</tt> if there is a problem during(576) to  if there is a problem during", "Update TextElement: authentication instead of returning <tt>null</tt>.  A <tt>null</tt> return value indicates(577) to authentication instead of returning ", "Insert TagElement: @code(652) into TagElement(662) at 10", "Insert TextElement: .  A (653) into TagElement(662) at 11", "Insert TagElement: @code(655) into TagElement(662) at 12", "Insert TextElement:  return value indicates(656) into TagElement(662) at 13", "Update TextElement: a configuration or programming error, since <tt>AuthenticationException</tt>s should(578) to a configuration or programming error, since ", "Insert TagElement: @code(659) into TagElement(662) at 15", "Insert TextElement: s should(660) into TagElement(662) at 16", "Insert TextElement:  an (666) into TagElement: @return(671) at 0", "Insert TagElement: @code(668) into TagElement: @return(671) at 1", "Update TextElement:  an <tt>AuthenticationInfo</tt> object encapsulating the user's account information(584) to  object encapsulating the user's account information", "Insert TextElement:  ArrayList(84) into TagElement: @code(85) at 0", "Insert SimpleName: AuthenticationListener(103) into TagElement: @link(105) at 0", "Insert TextElement:  AuthenticationListener(104) into TagElement: @link(105) at 1", "Insert TextElement:  AuthenticationListener(111) into TagElement: @code(112) at 0", "Insert SimpleName: AuthenticationListener(157) into TagElement: @link(159) at 0", "Insert TextElement:  AuthenticationListener(158) into TagElement: @link(159) at 1", "Insert SimpleName: AuthenticationListener(164) into TagElement: @link(166) at 0", "Insert TextElement:  AuthenticationListener(165) into TagElement: @link(166) at 1", "Insert TextElement:  token(194) into TagElement: @code(195) at 0", "Insert TextElement:  info(197) into TagElement: @code(198) at 0", "Insert TextElement:  listeners(200) into TagElement: @code(201) at 0", "Insert TextElement:  AuthenticationToken(219) into TagElement: @code(220) at 0", "Insert TextElement:  AuthenticationInfo(225) into TagElement: @code(226) at 0", "Insert TextElement:  token(265) into TagElement: @code(266) at 0", "Insert TextElement:  ae(268) into TagElement: @code(269) at 0", "Insert TextElement:  listeners(272) into TagElement: @code(273) at 0", "Insert TextElement:  AuthenticationToken(290) into TagElement: @code(291) at 0", "Insert TextElement:  AuthenticationException(296) into TagElement: @code(297) at 0", "Insert TextElement:  Subject(334) into TagElement: @code(335) at 0", "Insert TextElement:  listeners(338) into TagElement: @code(339) at 0", "Insert TextElement:  Subject(353) into TagElement: @code(354) at 0", "Insert TextElement:  Subject(394) into TagElement: @code(395) at 0", "Update TextElement: <li>If an <tt>AuthenticationException</tt> is thrown during <tt>doAuthenticate</tt>,(362) to  AuthenticationException", "Move TextElement: <li>If an <tt>AuthenticationException</tt> is thrown during <tt>doAuthenticate</tt>,(362) into TagElement: @code(426) at 0", "Insert TextElement:  doAuthenticate(428) into TagElement: @code(429) at 0", "Update TextElement: <li>Return the <tt>AuthenticationInfo</tt></li>(395) to  AuthenticationInfo", "Move TextElement: <li>Return the <tt>AuthenticationInfo</tt></li>(395) into TagElement: @code(465) at 0", "Insert TextElement:  AuthenticationException(647) into TagElement: @code(648) at 0", "Insert TextElement:  null(651) into TagElement: @code(652) at 0", "Insert TextElement:  null(654) into TagElement: @code(655) at 0", "Insert TextElement:  AuthenticationException(658) into TagElement: @code(659) at 0", "Insert TextElement:  AuthenticationInfo(667) into TagElement: @code(668) at 0", "Delete SimpleName: AuthenticationListenerRegistrar(47)", "Delete SimpleType: AuthenticationListenerRegistrar(48)", "Delete SimpleName: remove(159)", "Delete SimpleName: listener(160)", "Delete MethodInvocation(161)", "Delete Modifier: public(133)", "Delete PrimitiveType: void(134)", "Delete SimpleName: add(135)", "Delete SimpleName: AuthenticationListener(136)", "Delete SimpleType: AuthenticationListener(137)", "Delete SimpleName: listener(138)", "Delete SingleVariableDeclaration(139)", "Delete ThisExpression(140)", "Delete SimpleName: listeners(141)", "Delete FieldAccess(142)", "Delete SimpleName: add(143)", "Delete SimpleName: listener(144)", "Delete MethodInvocation(145)", "Delete ExpressionStatement(146)", "Delete Block(147)", "Delete MethodDeclaration(148)", "Delete PrimitiveType: boolean(150)", "Delete SimpleName: remove(151)", "Delete SimpleType: AuthenticationListener(153)", "Delete SimpleName: listener(154)", "Delete SingleVariableDeclaration(155)", "Delete MethodDeclaration(164)", "Delete TextElement: <p/>(353)"]}}, {"AuthenticationListener_cluster": {"actions": []}}, {"AuthenticationListener_diff": {"operations": []}}, {"AuthenticationListenerRegistrar_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.shiro.authc", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collection"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: add", "DEL SimpleName: Collection", "DEL TextElement: An <code>AuthenticationListenerRegistrar</code> is a component that is capable of registering interested", "DEL TextElement:  <code>true</code> if the listener was removed (i.e. it was previously registered), or <code>false</code>", "DEL SimpleName: listener", "DEL SimpleName: remove", "DEL SingleVariableDeclaration", "DEL SimpleName: listeners", "DEL SimpleName: listeners", "DEL TextElement:  Les Hazlewood", "DEL TextElement: if the listener was not removed (i.e. it wasn't registered yet, effectively a no-op).", "DEL SimpleType: AuthenticationListener", "DEL TextElement: Removes a single <code>listener</code> that no longer wishes to be notified during the authentication process.", "DEL SimpleName: listener", "DEL TypeDeclaration: interface", "DEL TagElement", "DEL SimpleName: AuthenticationListener", "DEL Javadoc", "DEL TextElement:  the single <code>listener</code> that wishes to be notified during the authentication process.", "DEL TextElement: <p/>", "DEL SimpleName: setAuthenticationListeners", "DEL TextElement: Sets the <code>AuthenticationListener</code>(s) that wish to be notified during the", "DEL TagElement: @author", "DEL Javadoc", "DEL SimpleName: AuthenticationListener", "DEL TextElement: authentication process.", "DEL TagElement: @link", "DEL TextElement:  0.9", "DEL TagElement: @since", "DEL SingleVariableDeclaration", "DEL TextElement: How that notification occurs is implementation specific (e.g. iteration over a collection, JMS, etc.).", "DEL PrimitiveType: void", "DEL SimpleType: Collection", "DEL SimpleName: AuthenticationListener", "DEL TextElement: process.", "DEL TextElement:  the single <code>listener</code> that no longer wishes to be notified during the authentication process.", "DEL TextElement: This interface only guarantees that registered listeners will be notified during the authentication process.", "DEL ParameterizedType: Collection<AuthenticationListener>", "DEL TextElement: Registeres a single <code>listener</code> that wishes to be notified during the authentication process.", "DEL SimpleName: listener", "DEL SimpleName: AuthenticationListenerRegistrar", "DEL SimpleType: AuthenticationListener", "DEL SimpleName: AuthenticationListener", "DEL PrimitiveType: void", "DEL TextElement: s that wish to be notified during the authentication", "DEL SimpleType: AuthenticationListener", "DEL TagElement", "DEL Javadoc", "DEL TagElement: @param", "DEL TextElement:  one or more <code>AuthenticationListener</code>s that should be notified during the", "DEL TextElement: authentication process.", "DEL TagElement", "DEL Javadoc", "DEL PrimitiveType: boolean", "DEL Modifier: public", "DEL TagElement: @return", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL TextElement:  AuthenticationListener", "DEL MethodDeclaration", "DEL SimpleName: listener"]}]}}, {"AuthenticationListenerRegistrar_diff": {"operations": ["Delete QualifiedName: org.apache.shiro.authc(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.Collection(2)", "Delete ImportDeclaration(3)", "Delete TextElement: An <code>AuthenticationListenerRegistrar</code> is a component that is capable of registering interested(4)", "Delete SimpleName: AuthenticationListener(5)", "Delete TextElement:  AuthenticationListener(6)", "Delete TagElement: @link(7)", "Delete TextElement: s that wish to be notified during the authentication(8)", "Delete TextElement: process.(9)", "Delete TextElement: <p/>(10)", "Delete TextElement: This interface only guarantees that registered listeners will be notified during the authentication process.(11)", "Delete TextElement: How that notification occurs is implementation specific (e.g. iteration over a collection, JMS, etc.).(12)", "Delete TagElement(13)", "Delete TextElement:  Les Hazlewood(14)", "Delete TagElement: @author(15)", "Delete TextElement:  0.9(16)", "Delete TagElement: @since(17)", "Delete Javadoc(18)", "Delete Modifier: public(19)", "Delete SimpleName: AuthenticationListenerRegistrar(20)", "Delete TextElement: Sets the <code>AuthenticationListener</code>(s) that wish to be notified during the(21)", "Delete TextElement: authentication process.(22)", "Delete TagElement(23)", "Delete SimpleName: listeners(24)", "Delete TextElement:  one or more <code>AuthenticationListener</code>s that should be notified during the(25)", "Delete TextElement: authentication process.(26)", "Delete TagElement: @param(27)", "Delete Javadoc(28)", "Delete PrimitiveType: void(29)", "Delete SimpleName: setAuthenticationListeners(30)", "Delete SimpleName: Collection(31)", "Delete SimpleType: Collection(32)", "Delete SimpleName: AuthenticationListener(33)", "Delete SimpleType: AuthenticationListener(34)", "Delete ParameterizedType: Collection<AuthenticationListener>(35)", "Delete SimpleName: listeners(36)", "Delete SingleVariableDeclaration(37)", "Delete MethodDeclaration(38)", "Delete TextElement: Registeres a single <code>listener</code> that wishes to be notified during the authentication process.(39)", "Delete TagElement(40)", "Delete SimpleName: listener(41)", "Delete TextElement:  the single <code>listener</code> that wishes to be notified during the authentication process.(42)", "Delete TagElement: @param(43)", "Delete Javadoc(44)", "Delete PrimitiveType: void(45)", "Delete SimpleName: add(46)", "Delete SimpleName: AuthenticationListener(47)", "Delete SimpleType: AuthenticationListener(48)", "Delete SimpleName: listener(49)", "Delete SingleVariableDeclaration(50)", "Delete MethodDeclaration(51)", "Delete TextElement: Removes a single <code>listener</code> that no longer wishes to be notified during the authentication process.(52)", "Delete TagElement(53)", "Delete SimpleName: listener(54)", "Delete TextElement:  the single <code>listener</code> that no longer wishes to be notified during the authentication process.(55)", "Delete TagElement: @param(56)", "Delete TextElement:  <code>true</code> if the listener was removed (i.e. it was previously registered), or <code>false</code>(57)", "Delete TextElement: if the listener was not removed (i.e. it wasn't registered yet, effectively a no-op).(58)", "Delete TagElement: @return(59)", "Delete Javadoc(60)", "Delete PrimitiveType: boolean(61)", "Delete SimpleName: remove(62)", "Delete SimpleName: AuthenticationListener(63)", "Delete SimpleType: AuthenticationListener(64)", "Delete SimpleName: listener(65)", "Delete SingleVariableDeclaration(66)", "Delete MethodDeclaration(67)", "Delete TypeDeclaration: interface(68)"]}}, {"SimpleAuthenticationInfo_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 7", "MOV ImportDeclaration to CompilationUnit at 7", "MOV ImportDeclaration to CompilationUnit at 7"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @see to Javadoc at 5", "MOV TagElement: @since to Javadoc at 5"]}, {"root": "UPDATE from  the 'primary' principal associated with the specified realm. to    the 'primary' principal associated with the specified realm.", "operations": ["UPD TextElement:  the 'primary' principal associated with the specified realm. from  the 'primary' principal associated with the specified realm. to    the 'primary' principal associated with the specified realm."]}, {"root": "UPDATE from  the realm from where the principal and credentials were acquired. to    the realm from where the principal and credentials were acquired.", "operations": ["UPD TextElement:  the realm from where the principal and credentials were acquired. from  the realm from where the principal and credentials were acquired. to    the realm from where the principal and credentials were acquired."]}, {"root": "UPDATE from  a Realm's account's identifying principal(s) to   a Realm's account's identifying principal(s)", "operations": ["UPD TextElement:  a Realm's account's identifying principal(s) from  a Realm's account's identifying principal(s) to   a Realm's account's identifying principal(s)"]}]}}, {"SimpleAuthenticationInfo_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(504) at 7", "Move ImportDeclaration(5) into CompilationUnit(504) at 7", "Move ImportDeclaration(7) into CompilationUnit(504) at 7", "Move TagElement: @see(21) into Javadoc(28) at 5", "Move TagElement: @since(23) into Javadoc(28) at 5", "Update TextElement:  the 'primary' principal associated with the specified realm.(69) to    the 'primary' principal associated with the specified realm.", "Update TextElement:  the realm from where the principal and credentials were acquired.(75) to    the realm from where the principal and credentials were acquired.", "Update TextElement:  a Realm's account's identifying principal(s)(114) to   a Realm's account's identifying principal(s)"]}}, {"ReflectionBuilder_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: org.apache.shiro.codec.Base64 to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS QualifiedName: org.apache.shiro.codec.Hex to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 4"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 27"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 8", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 8", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: static to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS StringLiteral: \"0x\" to VariableDeclarationFragment at 1", "INS SimpleType: String to FieldDeclaration at 3"]}, {"root": "UPDATE from isSetProperty to isTypedProperty", "operations": ["UPD SimpleName: isSetProperty from isSetProperty to isTypedProperty", "UPD SimpleName: isMapProperty from isMapProperty to isTypedProperty", "UPD SimpleName: isSetProperty from isSetProperty to isTypedProperty", "UPD SimpleName: isListProperty from isListProperty to isTypedProperty"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: clazz to SingleVariableDeclaration at 1"]}, {"root": "INS ArrayType: byte[] to MethodDeclaration at 1", "operations": ["INS ArrayType: byte[] to MethodDeclaration at 1", "INS Dimension to ArrayType: byte[] at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0"]}, {"root": "UPDATE from isMapProperty to toBytes", "operations": ["UPD SimpleName: isMapProperty from isMapProperty to toBytes"]}, {"root": "MOVE from SimpleType: String", "operations": ["MOV SimpleName: String to SimpleType: String at 0"]}, {"root": "UPDATE from msg to HEX_BEGIN_TOKEN", "operations": ["UPD SimpleName: msg from msg to HEX_BEGIN_TOKEN", "UPD SimpleName: object from object to HEX_BEGIN_TOKEN", "UPD SimpleName: descriptor from descriptor to HEX_BEGIN_TOKEN"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: msg to VariableDeclarationFragment at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Class to SingleVariableDeclaration at 0"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS IfStatement to Block at 0", "INS ThrowStatement to Block at 0", "INS StringLiteral: \"type (class) argument cannot be null.\" to ClassInstanceCreation at 1", "INS SimpleName: clazz to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: NullPointerException to SimpleType: NullPointerException at 0", "INS InfixExpression: == to IfStatement at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Block to IfStatement at 1", "INS SimpleType: NullPointerException to ClassInstanceCreation at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: String to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from propertyName to sValue", "operations": ["UPD SimpleName: propertyName from propertyName to sValue", "UPD SimpleName: PropertyUtils from PropertyUtils to sValue"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS IfStatement to Block at 0", "INS NullLiteral to InfixExpression: == at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: sValue to InfixExpression: == at 0", "INS ReturnStatement to Block at 0", "INS NullLiteral to ReturnStatement at 0", "INS Block to IfStatement at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS ArrayType: byte[] to VariableDeclarationStatement at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Dimension to ArrayType: byte[] at 1", "INS VariableDeclarationStatement to Block at 1"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS SimpleName: sValue to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: bytes to Assignment: = at 0", "INS ExpressionStatement to Block at 1", "INS Block to IfStatement at 2", "INS Assignment: = to ExpressionStatement at 0", "INS IfStatement to Block at 2", "INS SimpleName: Base64 to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to Assignment: = at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: decode to MethodInvocation at 1", "INS SimpleName: hex to MethodInvocation at 2", "INS SimpleName: bytes to Assignment: = at 0", "INS SimpleName: decode to MethodInvocation at 1"]}, {"root": "INS ReturnStatement to Block at 3", "operations": ["INS SimpleName: bytes to ReturnStatement at 0", "INS ReturnStatement to Block at 3"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS IfStatement to Block at 1", "INS IfStatement to IfStatement at 2", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: object to MethodInvocation at 1", "INS SimpleName: isTypedProperty to MethodInvocation at 0", "INS SimpleName: propertyName to MethodInvocation at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0", "MOV Block to IfStatement at 1", "MOV IfStatement to IfStatement at 2"]}, {"root": "UPDATE from descriptor to bytes", "operations": ["UPD SimpleName: descriptor from descriptor to bytes"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: descriptor to VariableDeclarationFragment at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: object to MethodInvocation at 2", "MOV SimpleName: PropertyUtils to MethodInvocation at 0", "MOV SimpleName: getPropertyDescriptor to MethodInvocation at 1"]}, {"root": "UPDATE from getPropertyDescriptor to startsWith", "operations": ["UPD SimpleName: getPropertyDescriptor from getPropertyDescriptor to startsWith"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV TypeLiteral to MethodInvocation at 3"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Class to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: sValue to MethodInvocation at 0", "INS SimpleName: hex to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: substring to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV TypeLiteral to MethodInvocation at 3", "MOV SimpleName: clazz to MethodInvocation at 0"]}, {"root": "INS InfixExpression: || to IfStatement at 0", "operations": ["INS SimpleName: isTypedProperty to MethodInvocation at 0", "INS SimpleName: propertyName to MethodInvocation at 2", "INS InfixExpression: || to IfStatement at 0", "INS SimpleType: Collection to TypeLiteral at 0", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS MethodInvocation to InfixExpression: || at 0", "INS SimpleName: object to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 3", "INS MethodInvocation to InfixExpression: || at 1"]}, {"root": "UPDATE from clazz to propertyClazz", "operations": ["UPD SimpleName: clazz from clazz to propertyClazz", "UPD SimpleName: clazz from clazz to propertyClazz"]}, {"root": "INS SimpleName: clazz to MethodInvocation at 0", "operations": ["INS SimpleName: clazz to MethodInvocation at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS SimpleName: value to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: toBytes to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS Block to IfStatement at 1", "INS SimpleName: stringValue to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "UPDATE from clazz to Hex", "operations": ["UPD SimpleName: clazz from clazz to Hex"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: isListProperty to MethodInvocation at 0", "MOV SimpleName: object to MethodInvocation at 1", "MOV SimpleName: propertyName to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV TypeLiteral to MethodInvocation at 3"]}, {"root": "INS TypeLiteral to MethodInvocation at 3", "operations": ["INS ArrayType: byte[] to TypeLiteral at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS TypeLiteral to MethodInvocation at 3", "INS Dimension to ArrayType: byte[] at 1"]}, {"root": "UPDATE from \"] represents a java.util.Set\" to \"] represents a \"", "operations": ["UPD StringLiteral: \"] represents a java.util.Set\" from \"] represents a java.util.Set\" to \"] represents a \""]}, {"root": "INS MethodInvocation to InfixExpression: + at 3", "operations": ["INS SimpleName: clazz to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: + at 3", "INS SimpleName: getName to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: descriptor to MethodInvocation at 0", "MOV SimpleName: getPropertyType to MethodInvocation at 1"]}, {"root": "UPDATE from getPropertyType to length", "operations": ["UPD SimpleName: getPropertyType from getPropertyType to length"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL CatchClause", "DEL SimpleType: Object", "DEL SimpleName: propertyName", "DEL SimpleName: clazz", "DEL VariableDeclarationStatement", "DEL SimpleName: propertyName", "DEL SimpleName: e", "DEL SingleVariableDeclaration", "DEL SimpleName: getPropertyType", "DEL SimpleType: ConfigurationException", "DEL Modifier: protected", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL TryStatement", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL ReturnStatement", "DEL SimpleName: descriptor", "DEL SimpleName: ConfigurationException", "DEL SimpleName: PropertyUtils", "DEL SimpleName: object", "DEL SimpleName: isAssignableFrom", "DEL SimpleName: object", "DEL SimpleName: PropertyDescriptor", "DEL Block", "DEL SimpleType: String", "DEL SimpleType: Exception", "DEL SimpleName: propertyName", "DEL Block", "DEL SimpleName: descriptor", "DEL SimpleName: msg", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: PropertyDescriptor", "DEL SimpleName: clazz", "DEL SimpleName: Object", "DEL SimpleName: Exception", "DEL SimpleName: e", "DEL ThrowStatement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: getPropertyDescriptor", "DEL StringLiteral: \"Unable to determine if property [\"", "DEL StringLiteral: \"] represents a java.util.List\"", "DEL SimpleName: isListProperty"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: object", "DEL SimpleName: Object", "DEL SimpleType: Object"]}, {"root": "DEL SimpleType: String", "operations": ["DEL SimpleName: String", "DEL SimpleType: String"]}, {"root": "DEL SimpleType: Class", "operations": ["DEL SimpleType: Class", "DEL SimpleName: Class"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: clazz", "DEL MethodInvocation"]}, {"root": "DEL TryStatement", "operations": ["DEL SimpleType: Exception", "DEL VariableDeclarationFragment", "DEL SimpleName: propertyName", "DEL SimpleName: e", "DEL ReturnStatement", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL InfixExpression: +", "DEL SimpleName: propertyName", "DEL Block", "DEL ThrowStatement", "DEL TryStatement", "DEL SimpleName: msg", "DEL SimpleName: PropertyDescriptor", "DEL VariableDeclarationStatement", "DEL CatchClause", "DEL SimpleType: PropertyDescriptor", "DEL SimpleName: Exception", "DEL SimpleName: e", "DEL VariableDeclarationFragment", "DEL SimpleName: msg", "DEL StringLiteral: \"] represents a java.util.Map\"", "DEL SimpleName: ConfigurationException", "DEL MethodInvocation", "DEL SimpleType: ConfigurationException", "DEL SimpleName: isAssignableFrom", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"Unable to determine if property [\"", "DEL Block"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement"]}]}}, {"ReflectionBuilder_diff": {"operations": ["Insert ImportDeclaration(7) into CompilationUnit(1624) at 3", "Insert ImportDeclaration(9) into CompilationUnit(1624) at 4", "Move MethodDeclaration(1460) into TypeDeclaration: class(1623) at 27", "Insert QualifiedName: org.apache.shiro.codec.Base64(6) into ImportDeclaration(7) at 0", "Insert QualifiedName: org.apache.shiro.codec.Hex(8) into ImportDeclaration(9) at 0", "Insert FieldDeclaration(96) into TypeDeclaration: class(1623) at 8", "Insert Modifier: private(88) into FieldDeclaration(96) at 0", "Insert Modifier: static(89) into FieldDeclaration(96) at 1", "Insert Modifier: final(90) into FieldDeclaration(96) at 2", "Insert SimpleType: String(92) into FieldDeclaration(96) at 3", "Insert VariableDeclarationFragment(95) into FieldDeclaration(96) at 4", "Update SimpleName: isSetProperty(941) to isTypedProperty", "Insert SingleVariableDeclaration(966) into MethodDeclaration(1027) at 5", "Insert ArrayType: byte[](1370) into MethodDeclaration(1424) at 1", "Update SimpleName: isMapProperty(1225) to toBytes", "Move SimpleName: String(1098) into SimpleType: String(92) at 0", "Update SimpleName: msg(1134) to HEX_BEGIN_TOKEN", "Move SimpleName: msg(1134) into VariableDeclarationFragment(95) at 0", "Insert StringLiteral: \"0x\"(94) into VariableDeclarationFragment(95) at 1", "Move SimpleType: Class(961) into SingleVariableDeclaration(966) at 0", "Insert SimpleName: clazz(965) into SingleVariableDeclaration(966) at 1", "Insert IfStatement(976) into Block(1026) at 0", "Insert PrimitiveType: byte(1368) into ArrayType: byte[](1370) at 0", "Insert Dimension(1369) into ArrayType: byte[](1370) at 1", "Move SimpleType: String(1265) into SingleVariableDeclaration(1375) at 0", "Update SimpleName: propertyName(1232) to sValue", "Insert IfStatement(1382) into Block(1423) at 0", "Insert VariableDeclarationStatement(1388) into Block(1423) at 1", "Insert IfStatement(1420) into Block(1423) at 2", "Insert ReturnStatement(1422) into Block(1423) at 3", "Insert IfStatement(1555) into Block(1621) at 1", "Insert InfixExpression: ==(969) into IfStatement(976) at 0", "Insert Block(975) into IfStatement(976) at 1", "Insert InfixExpression: ==(1378) into IfStatement(1382) at 0", "Insert Block(1381) into IfStatement(1382) at 1", "Insert ArrayType: byte[](1385) into VariableDeclarationStatement(1388) at 0", "Insert VariableDeclarationFragment(1387) into VariableDeclarationStatement(1388) at 1", "Insert MethodInvocation(1392) into IfStatement(1420) at 0", "Insert Block(1411) into IfStatement(1420) at 1", "Insert Block(1419) into IfStatement(1420) at 2", "Insert SimpleName: bytes(1421) into ReturnStatement(1422) at 0", "Insert MethodInvocation(1486) into IfStatement(1555) at 0", "Move Block(1526) into IfStatement(1555) at 1", "Insert IfStatement(1554) into IfStatement(1555) at 2", "Insert SimpleName: clazz(967) into InfixExpression: ==(969) at 0", "Insert NullLiteral(968) into InfixExpression: ==(969) at 1", "Insert ThrowStatement(974) into Block(975) at 0", "Insert SimpleName: sValue(1376) into InfixExpression: ==(1378) at 0", "Insert NullLiteral(1377) into InfixExpression: ==(1378) at 1", "Insert ReturnStatement(1380) into Block(1381) at 0", "Insert PrimitiveType: byte(1383) into ArrayType: byte[](1385) at 0", "Insert Dimension(1384) into ArrayType: byte[](1385) at 1", "Update SimpleName: descriptor(1236) to bytes", "Move SimpleName: descriptor(1236) into VariableDeclarationFragment(1387) at 0", "Update SimpleName: PropertyUtils(1237) to sValue", "Move SimpleName: PropertyUtils(1237) into MethodInvocation(1392) at 0", "Update SimpleName: getPropertyDescriptor(1238) to startsWith", "Move SimpleName: getPropertyDescriptor(1238) into MethodInvocation(1392) at 1", "Update SimpleName: object(1239) to HEX_BEGIN_TOKEN", "Move SimpleName: object(1239) into MethodInvocation(1392) at 2", "Move VariableDeclarationStatement(1251) into Block(1411) at 0", "Insert ExpressionStatement(1410) into Block(1411) at 1", "Insert ExpressionStatement(1418) into Block(1419) at 0", "Insert SimpleName: isTypedProperty(1480) into MethodInvocation(1486) at 0", "Insert SimpleName: object(1481) into MethodInvocation(1486) at 1", "Insert SimpleName: propertyName(1482) into MethodInvocation(1486) at 2", "Move TypeLiteral(970) into MethodInvocation(1486) at 3", "Move MethodInvocation(1519) into IfStatement(1554) at 0", "Move Block(1548) into IfStatement(1554) at 1", "Move IfStatement(1557) into IfStatement(1554) at 2", "Insert ClassInstanceCreation(973) into ThrowStatement(974) at 0", "Move SimpleType: Class(1113) into VariableDeclarationStatement(994) at 0", "Insert NullLiteral(1379) into ReturnStatement(1380) at 0", "Move SimpleType: String(1133) into VariableDeclarationStatement(1403) at 0", "Insert VariableDeclarationFragment(1402) into VariableDeclarationStatement(1403) at 1", "Insert Assignment: =(1409) into ExpressionStatement(1410) at 0", "Insert Assignment: =(1417) into ExpressionStatement(1418) at 0", "Update SimpleName: isSetProperty(1516) to isTypedProperty", "Move TypeLiteral(1254) into MethodInvocation(1500) at 3", "Insert InfixExpression: ||(1522) into IfStatement(1553) at 0", "Insert SimpleType: NullPointerException(971) into ClassInstanceCreation(973) at 0", "Insert StringLiteral: \"type (class) argument cannot be null.\"(972) into ClassInstanceCreation(973) at 1", "Update SimpleName: clazz(962) to propertyClazz", "Insert SimpleName: clazz(995) into MethodInvocation(998) at 0", "Update SimpleName: clazz(972) to propertyClazz", "Insert SimpleName: hex(1395) into VariableDeclarationFragment(1402) at 0", "Insert MethodInvocation(1401) into VariableDeclarationFragment(1402) at 1", "Insert SimpleName: bytes(1404) into Assignment: =(1409) at 0", "Insert MethodInvocation(1408) into Assignment: =(1409) at 1", "Insert SimpleName: bytes(1412) into Assignment: =(1417) at 0", "Insert MethodInvocation(1416) into Assignment: =(1417) at 1", "Insert MethodInvocation(1514) into InfixExpression: ||(1522) at 0", "Insert MethodInvocation(1521) into InfixExpression: ||(1522) at 1", "Insert Block(1544) into IfStatement(1552) at 1", "Insert SimpleName: NullPointerException(970) into SimpleType: NullPointerException(971) at 0", "Insert SimpleName: sValue(1396) into MethodInvocation(1401) at 0", "Insert SimpleName: substring(1397) into MethodInvocation(1401) at 1", "Insert MethodInvocation(1400) into MethodInvocation(1401) at 2", "Update SimpleName: clazz(1256) to Hex", "Move SimpleName: clazz(1256) into MethodInvocation(1408) at 0", "Insert SimpleName: decode(1406) into MethodInvocation(1408) at 1", "Insert SimpleName: hex(1407) into MethodInvocation(1408) at 2", "Insert SimpleName: Base64(1413) into MethodInvocation(1416) at 0", "Insert SimpleName: decode(1414) into MethodInvocation(1416) at 1", "Insert SimpleName: sValue(1415) into MethodInvocation(1416) at 2", "Update SimpleName: isListProperty(1527) to isTypedProperty", "Move SimpleName: isListProperty(1527) into MethodInvocation(1514) at 0", "Move SimpleName: object(1528) into MethodInvocation(1514) at 1", "Move SimpleName: propertyName(1529) into MethodInvocation(1514) at 2", "Move TypeLiteral(1122) into MethodInvocation(1514) at 3", "Insert SimpleName: isTypedProperty(1515) into MethodInvocation(1521) at 0", "Insert SimpleName: object(1516) into MethodInvocation(1521) at 1", "Insert SimpleName: propertyName(1517) into MethodInvocation(1521) at 2", "Insert TypeLiteral(1520) into MethodInvocation(1521) at 3", "Update SimpleName: isMapProperty(1538) to isTypedProperty", "Insert TypeLiteral(1536) into MethodInvocation(1537) at 3", "Insert ExpressionStatement(1543) into Block(1544) at 0", "Update StringLiteral: \"] represents a java.util.Set\"(985) to \"] represents a \"", "Insert MethodInvocation(1013) into InfixExpression: +(1014) at 3", "Update SimpleName: descriptor(1247) to HEX_BEGIN_TOKEN", "Move SimpleName: descriptor(1247) into MethodInvocation(1400) at 0", "Update SimpleName: getPropertyType(1248) to length", "Move SimpleName: getPropertyType(1248) into MethodInvocation(1400) at 1", "Insert SimpleType: Collection(1519) into TypeLiteral(1520) at 0", "Insert ArrayType: byte[](1535) into TypeLiteral(1536) at 0", "Insert Assignment: =(1542) into ExpressionStatement(1543) at 0", "Insert SimpleName: clazz(1011) into MethodInvocation(1013) at 0", "Insert SimpleName: getName(1012) into MethodInvocation(1013) at 1", "Insert SimpleName: Collection(1518) into SimpleType: Collection(1519) at 0", "Insert PrimitiveType: byte(1533) into ArrayType: byte[](1535) at 0", "Insert Dimension(1534) into ArrayType: byte[](1535) at 1", "Insert SimpleName: value(1538) into Assignment: =(1542) at 0", "Insert MethodInvocation(1541) into Assignment: =(1542) at 1", "Insert SimpleName: toBytes(1539) into MethodInvocation(1541) at 0", "Insert SimpleName: stringValue(1540) into MethodInvocation(1541) at 1", "Delete Modifier: protected(1091)", "Delete PrimitiveType: boolean(1092)", "Delete SimpleName: isListProperty(1093)", "Delete SimpleName: Object(1094)", "Delete SimpleType: Object(1095)", "Delete SimpleName: object(1096)", "Delete SingleVariableDeclaration(1097)", "Delete SimpleType: String(1099)", "Delete SimpleName: propertyName(1100)", "Delete SingleVariableDeclaration(1101)", "Delete SimpleName: PropertyDescriptor(1102)", "Delete SimpleType: PropertyDescriptor(1103)", "Delete SimpleName: descriptor(1104)", "Delete SimpleName: PropertyUtils(1105)", "Delete SimpleName: getPropertyDescriptor(1106)", "Delete SimpleName: object(1107)", "Delete SimpleName: propertyName(1108)", "Delete MethodInvocation(1109)", "Delete VariableDeclarationFragment(1110)", "Delete VariableDeclarationStatement(1111)", "Delete SimpleName: clazz(1114)", "Delete SimpleName: descriptor(1115)", "Delete SimpleName: getPropertyType(1116)", "Delete MethodInvocation(1117)", "Delete VariableDeclarationFragment(1118)", "Delete VariableDeclarationStatement(1119)", "Delete SimpleName: isAssignableFrom(1123)", "Delete SimpleName: clazz(1124)", "Delete MethodInvocation(1125)", "Delete ReturnStatement(1126)", "Delete Block(1127)", "Delete SimpleName: Exception(1128)", "Delete SimpleType: Exception(1129)", "Delete SimpleName: e(1130)", "Delete SingleVariableDeclaration(1131)", "Delete StringLiteral: \"Unable to determine if property [\"(1135)", "Delete SimpleName: propertyName(1136)", "Delete StringLiteral: \"] represents a java.util.List\"(1137)", "Delete InfixExpression: +(1138)", "Delete VariableDeclarationFragment(1139)", "Delete VariableDeclarationStatement(1140)", "Delete SimpleName: ConfigurationException(1141)", "Delete SimpleType: ConfigurationException(1142)", "Delete SimpleName: msg(1143)", "Delete SimpleName: e(1144)", "Delete ClassInstanceCreation(1145)", "Delete ThrowStatement(1146)", "Delete Block(1147)", "Delete CatchClause(1148)", "Delete TryStatement(1149)", "Delete Block(1150)", "Delete MethodDeclaration(1151)", "Delete PrimitiveType: boolean(1224)", "Delete SimpleName: Object(1226)", "Delete SimpleType: Object(1227)", "Delete SimpleName: object(1228)", "Delete SingleVariableDeclaration(1229)", "Delete SimpleName: String(1230)", "Delete SimpleType: String(1231)", "Delete SimpleName: Class(1244)", "Delete SimpleType: Class(1245)", "Delete SimpleName: clazz(1246)", "Delete MethodInvocation(1249)", "Delete VariableDeclarationFragment(1250)", "Delete SimpleName: PropertyDescriptor(1234)", "Delete SimpleType: PropertyDescriptor(1235)", "Delete SimpleName: propertyName(1240)", "Delete MethodInvocation(1241)", "Delete VariableDeclarationFragment(1242)", "Delete VariableDeclarationStatement(1243)", "Delete SimpleName: isAssignableFrom(1255)", "Delete MethodInvocation(1257)", "Delete ReturnStatement(1258)", "Delete Block(1259)", "Delete SimpleName: Exception(1260)", "Delete SimpleType: Exception(1261)", "Delete SimpleName: e(1262)", "Delete SingleVariableDeclaration(1263)", "Delete SimpleName: msg(1266)", "Delete StringLiteral: \"Unable to determine if property [\"(1267)", "Delete SimpleName: propertyName(1268)", "Delete StringLiteral: \"] represents a java.util.Map\"(1269)", "Delete InfixExpression: +(1270)", "Delete VariableDeclarationFragment(1271)", "Delete VariableDeclarationStatement(1272)", "Delete SimpleName: ConfigurationException(1273)", "Delete SimpleType: ConfigurationException(1274)", "Delete SimpleName: msg(1275)", "Delete SimpleName: e(1276)", "Delete ClassInstanceCreation(1277)", "Delete ThrowStatement(1278)", "Delete Block(1279)", "Delete CatchClause(1280)", "Delete TryStatement(1281)", "Delete MethodInvocation(1530)", "Delete IfStatement(1558)"]}}, {"AbstractRememberMeManager_cluster": {"actions": [{"root": "MOVE from TagElement", "operations": ["MOV TextElement: Similarly, you can set the decryption key via one of these methods: to TagElement at 36", "MOV TextElement: <ul> to TagElement at 10", "MOV TextElement: <ul> to TagElement at 24"]}, {"root": "UPDATE from should set your key via one of the three following methods: to should set your key via the ", "operations": ["UPD TextElement: should set your key via one of the three following methods: from should set your key via one of the three following methods: to should set your key via the "]}, {"root": "UPDATE from <ul> to  method.", "operations": ["UPD TextElement: <ul> from <ul> to  method."]}, {"root": "UPDATE from public/private key pairs), you should set your encryption key via one of these methods: to public/private key pairs), you should set your encryption and decryption key via the respective", "operations": ["UPD TextElement: public/private key pairs), you should set your encryption key via one of these methods: from public/private key pairs), you should set your encryption key via one of these methods: to public/private key pairs), you should set your encryption and decryption key via the respective"]}, {"root": "UPDATE from <ul> to  and ", "operations": ["UPD TextElement: <ul> from <ul> to  and "]}, {"root": "UPDATE from Similarly, you can set the decryption key via one of these methods: to  methods.", "operations": ["UPD TextElement: Similarly, you can set the decryption key via one of these methods: from Similarly, you can set the decryption key via one of these methods: to  methods."]}, {"root": "UPDATE from Sets the encryption key to use for encryption operations.  If setting the key via text configuration mechanisms, to Sets the encryption key to use for encryption operations.", "operations": ["UPD TextElement: Sets the encryption key to use for encryption operations.  If setting the key via text configuration mechanisms, from Sets the encryption key to use for encryption operations.  If setting the key via text configuration mechanisms, to Sets the encryption key to use for encryption operations."]}, {"root": "UPDATE from Sets the decryption key to use for decryption operations.  If setting the key via text configuration mechanisms, to Sets the decryption key to use for decryption operations.", "operations": ["UPD TextElement: Sets the decryption key to use for decryption operations.  If setting the key via text configuration mechanisms, from Sets the decryption key to use for decryption operations.  If setting the key via text configuration mechanisms, to Sets the decryption key to use for decryption operations."]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.shiro.codec.Hex"]}, {"root": "DEL TextElement: <li>", "operations": ["DEL TextElement: <li>"]}, {"root": "DEL TextElement: </li>", "operations": ["DEL TextElement: </li>"]}, {"root": "DEL TextElement: <li>", "operations": ["DEL TextElement: <li>"]}, {"root": "DEL TagElement: @link", "operations": ["DEL SimpleName: String", "DEL SimpleName: setCipherKeyBase64", "DEL MethodRefParameter", "DEL TagElement: @link", "DEL SimpleType: String", "DEL MethodRef"]}, {"root": "DEL TextElement: , or</li>", "operations": ["DEL TextElement: , or</li>"]}, {"root": "DEL TextElement: <li>", "operations": ["DEL TextElement: <li>"]}, {"root": "DEL TagElement: @link", "operations": ["DEL SimpleName: String", "DEL MethodRef", "DEL TagElement: @link", "DEL MethodRefParameter", "DEL SimpleName: setCipherKeyHex", "DEL SimpleType: String"]}, {"root": "DEL TextElement: </li>", "operations": ["DEL TextElement: </li>"]}, {"root": "DEL TextElement: </ul>", "operations": ["DEL TextElement: </ul>"]}, {"root": "DEL TextElement: <li>", "operations": ["DEL TextElement: <li>"]}, {"root": "DEL TextElement: </li>", "operations": ["DEL TextElement: </li>"]}, {"root": "DEL TextElement: <li>", "operations": ["DEL TextElement: <li>"]}, {"root": "DEL TagElement: @link", "operations": ["DEL MethodRefParameter", "DEL MethodRef", "DEL SimpleName: String", "DEL TagElement: @link", "DEL SimpleName: setEncryptionCipherKeyHex", "DEL SimpleType: String"]}, {"root": "DEL TextElement: , or</li>", "operations": ["DEL TextElement: , or</li>"]}, {"root": "DEL TextElement: <li>", "operations": ["DEL TextElement: <li>"]}, {"root": "DEL TagElement: @link", "operations": ["DEL MethodRef", "DEL MethodRefParameter", "DEL TagElement: @link", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleName: setEncryptionCipherKeyBase64"]}, {"root": "DEL TextElement: </li>", "operations": ["DEL TextElement: </li>"]}, {"root": "DEL TextElement: </ul>", "operations": ["DEL TextElement: </ul>"]}, {"root": "DEL TextElement: <ul>", "operations": ["DEL TextElement: <ul>"]}, {"root": "DEL TextElement: <li>", "operations": ["DEL TextElement: <li>"]}, {"root": "DEL TextElement: </li>", "operations": ["DEL TextElement: </li>"]}, {"root": "DEL TextElement: <li>", "operations": ["DEL TextElement: <li>"]}, {"root": "DEL TagElement: @link", "operations": ["DEL MethodRef", "DEL MethodRefParameter", "DEL SimpleType: String", "DEL SimpleName: setDecryptionCipherKeyHex", "DEL SimpleName: String", "DEL TagElement: @link"]}, {"root": "DEL TextElement: , or</li>", "operations": ["DEL TextElement: , or</li>"]}, {"root": "DEL TextElement: <li>", "operations": ["DEL TextElement: <li>"]}, {"root": "DEL TagElement: @link", "operations": ["DEL SimpleType: String", "DEL SimpleName: setDecryptionCipherKeyBase64", "DEL SimpleName: String", "DEL TagElement: @link", "DEL MethodRef", "DEL MethodRefParameter"]}, {"root": "DEL TextElement: </li>", "operations": ["DEL TextElement: </li>"]}, {"root": "DEL TextElement: </ul>", "operations": ["DEL TextElement: </ul>"]}, {"root": "DEL TextElement: the ", "operations": ["DEL TextElement: the "]}, {"root": "DEL TagElement: @link", "operations": ["DEL SimpleType: String", "DEL SimpleName: setEncryptionCipherKeyHex", "DEL TextElement:  encryptionCipherKeyHex", "DEL TagElement: @link", "DEL MethodRefParameter", "DEL MethodRef", "DEL SimpleName: String"]}, {"root": "DEL TextElement:  or", "operations": ["DEL TextElement:  or"]}, {"root": "DEL TagElement: @link", "operations": ["DEL MethodRefParameter", "DEL SimpleName: setEncryptionCipherKeyBase64", "DEL TextElement:  encryptionCipherKeyBase64", "DEL SimpleType: String", "DEL MethodRef", "DEL SimpleName: String", "DEL TagElement: @link"]}, {"root": "DEL TextElement:  methods are probably more convenient.", "operations": ["DEL TextElement:  methods are probably more convenient."]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL SimpleName: hex", "DEL TextElement:  get/set*Key", "DEL SimpleType: String", "DEL Javadoc", "DEL TextElement:  encryptionCipherKey", "DEL TagElement: @link", "DEL PrimitiveType: byte", "DEL SimpleName: setEncryptionCipherKeyHex", "DEL MemberRef", "DEL MethodInvocation", "DEL TagElement: @code", "DEL TextElement: -decoded and the resulting byte array is used", "DEL TagElement: @code", "DEL TextElement: .", "DEL TagElement: @param", "DEL MethodRefParameter", "DEL TextElement: as the ", "DEL ArrayType: byte[]", "DEL SimpleName: String", "DEL SimpleName: Hex", "DEL TextElement:  hex", "DEL MethodRef", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: setCipherService", "DEL TextElement:  hex-encoded encryption cipher key to decode into the raw encryption cipher key bytes.", "DEL TextElement: -encoded string.  The string is ", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL SimpleName: setEncryptionCipherKey", "DEL SimpleName: setEncryptionCipherKey", "DEL SimpleName: decode", "DEL TextElement:  hex", "DEL PrimitiveType: void", "DEL TextElement:  for a description of the various ", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: hex", "DEL SimpleName: hex", "DEL TagElement: @code", "DEL ExpressionStatement", "DEL TextElement: Convenience method that allows configuration of the encryption cipher key by specifying a", "DEL TagElement: @see", "DEL TextElement:  methods."]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: Base64", "DEL TagElement", "DEL TextElement: Convenience method that allows configuration of the encryption cipher key by specifying a", "DEL Javadoc", "DEL TextElement:  BASE 64", "DEL MethodInvocation", "DEL TextElement:  base64-encoded encryption cipher key to decode into the raw encryption cipher key bytes", "DEL SimpleName: setEncryptionCipherKeyBase64", "DEL SimpleName: String", "DEL MethodInvocation", "DEL TagElement: @param", "DEL MethodRef", "DEL SimpleType: String", "DEL PrimitiveType: void", "DEL TextElement:  encryptionCipherKey", "DEL SimpleName: setCipherService", "DEL Dimension", "DEL Block", "DEL TagElement: @code", "DEL SimpleName: setEncryptionCipherKey", "DEL TagElement: @code", "DEL TextElement: -decoded and the resulting byte array is used", "DEL TagElement: @link", "DEL TextElement:  get/set*Key", "DEL ArrayType: byte[]", "DEL TextElement: -encoded string.  The string is ", "DEL SimpleName: base64", "DEL SimpleName: decode", "DEL TextElement: .", "DEL MethodDeclaration", "DEL TextElement:  for a description of the various ", "DEL PrimitiveType: byte", "DEL SimpleName: base64", "DEL MemberRef", "DEL TextElement:  methods.", "DEL TextElement: as the ", "DEL TagElement: @code", "DEL SimpleName: setEncryptionCipherKey", "DEL ExpressionStatement", "DEL TextElement:  BASE 64", "DEL MethodRefParameter", "DEL TagElement: @see", "DEL Modifier: public", "DEL SimpleName: base64"]}, {"root": "DEL TextElement: the ", "operations": ["DEL TextElement: the "]}, {"root": "DEL TagElement: @link", "operations": ["DEL SimpleName: setDecryptionCipherKeyHex", "DEL MethodRef", "DEL TextElement:  decryptionCipherKeyHex", "DEL MethodRefParameter", "DEL SimpleType: String", "DEL SimpleName: String", "DEL TagElement: @link"]}, {"root": "DEL TextElement:  or", "operations": ["DEL TextElement:  or"]}, {"root": "DEL TagElement: @link", "operations": ["DEL TextElement:  decryptionCipherKeyBase64", "DEL MethodRef", "DEL MethodRefParameter", "DEL TagElement: @link", "DEL SimpleName: String", "DEL SimpleType: String", "DEL SimpleName: setDecryptionCipherKeyBase64"]}, {"root": "DEL TextElement:  methods are probably more convenient.", "operations": ["DEL TextElement:  methods are probably more convenient."]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodRef", "DEL TagElement", "DEL TagElement: @code", "DEL SimpleName: setDecryptionCipherKeyHex", "DEL TextElement:  get/set*Key", "DEL TextElement:  hex-encoded decryption cipher key to decode into the raw decryption cipher key bytes.", "DEL Dimension", "DEL SimpleName: hex", "DEL Javadoc", "DEL TextElement: as the ", "DEL SimpleName: hex", "DEL TextElement: .", "DEL PrimitiveType: void", "DEL TagElement: @code", "DEL PrimitiveType: byte", "DEL TagElement: @code", "DEL ExpressionStatement", "DEL TextElement:  hex", "DEL SimpleName: String", "DEL Modifier: public", "DEL SimpleName: setDecryptionCipherKey", "DEL TextElement:  hex", "DEL ArrayType: byte[]", "DEL MethodDeclaration", "DEL SimpleName: decode", "DEL TagElement: @param", "DEL TextElement: -encoded string.  The string is ", "DEL MemberRef", "DEL SimpleName: hex", "DEL SimpleName: setDecryptionCipherKey", "DEL MethodInvocation", "DEL TextElement: -decoded and the resulting byte array is used", "DEL TagElement: @link", "DEL Block", "DEL SimpleName: Hex", "DEL SingleVariableDeclaration", "DEL MethodRefParameter", "DEL TextElement:  decryptionCipherKey", "DEL TextElement:  methods.", "DEL SimpleType: String", "DEL MethodInvocation", "DEL TagElement: @see", "DEL TextElement: Convenience method that allows configuration of the decryption cipher key by specifying a", "DEL TextElement:  for a description of the various ", "DEL SimpleName: setCipherService"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL SimpleName: base64", "DEL TextElement:  BASE 64", "DEL Dimension", "DEL TagElement: @link", "DEL TextElement:  decryptionCipherKey", "DEL TagElement: @param", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleName: setDecryptionCipherKey", "DEL SimpleName: decode", "DEL Block", "DEL TextElement:  base64-encoded decryption cipher key to decode into the raw decryption cipher key bytes", "DEL SimpleName: base64", "DEL SingleVariableDeclaration", "DEL TextElement:  methods.", "DEL TextElement: -encoded string.  The string is ", "DEL ArrayType: byte[]", "DEL PrimitiveType: void", "DEL SimpleName: setCipherService", "DEL TextElement:  for a description of the various ", "DEL MethodInvocation", "DEL TagElement: @code", "DEL TextElement: Convenience method that allows configuration of the decryption cipher key by specifying a", "DEL ExpressionStatement", "DEL TextElement: as the ", "DEL SimpleName: setDecryptionCipherKey", "DEL TextElement:  BASE 64", "DEL SimpleName: base64", "DEL SimpleName: Base64", "DEL SimpleName: setDecryptionCipherKeyBase64", "DEL TagElement: @code", "DEL MethodDeclaration", "DEL MemberRef", "DEL TagElement: @see", "DEL TagElement: @code", "DEL Javadoc", "DEL TextElement:  get/set*Key", "DEL MethodRefParameter", "DEL TextElement: .", "DEL PrimitiveType: byte", "DEL MethodRef", "DEL MethodInvocation", "DEL TextElement: -decoded and the resulting byte array is used", "DEL TagElement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement:  encryption key and the", "DEL TextElement: Convenience method that allows configuration of the (symmetric) cipher key by specifying a", "DEL SimpleName: setEncryptionCipherKeyHex", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleName: AesCipherService", "DEL SimpleType: String", "DEL TextElement:  instance is a symmetric CipherService, so this method can be used if you are", "DEL SimpleType: String", "DEL MethodInvocation", "DEL TextElement: <p/>", "DEL SimpleName: hex", "DEL TextElement:  and ", "DEL MethodRef", "DEL Modifier: public", "DEL Block", "DEL TextElement:  hex", "DEL SimpleName: Hex", "DEL TagElement: @link", "DEL SimpleName: setCipherKey", "DEL TagElement", "DEL MethodRef", "DEL ArrayType: byte[]", "DEL SimpleName: setCipherKey", "DEL TextElement: as the ", "DEL MethodRefParameter", "DEL TagElement: @code", "DEL TextElement: -decoded and the resulting byte array is used", "DEL TextElement:  hex", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL MethodRefParameter", "DEL TextElement: .", "DEL TextElement: using the default.", "DEL MethodRefParameter", "DEL TextElement: (such as a public/private key pair) you cannot call this method and instead should use the", "DEL SimpleName: String", "DEL SimpleName: setCipherKeyHex", "DEL MethodInvocation", "DEL TagElement: @code", "DEL TextElement: <p/>", "DEL TextElement:  cipherKey", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleName: hex", "DEL SimpleName: CipherService", "DEL TagElement: @link", "DEL SimpleType: String", "DEL TextElement:  hex-encoded symmetric cipher key to decode into the raw cipher key bytes.", "DEL TextElement: decryption key and should only be called if using a symmetric CipherService.  If using an asymmetric CipherService", "DEL PrimitiveType: void", "DEL SimpleName: String", "DEL TagElement: @link", "DEL Dimension", "DEL TagElement: @link", "DEL TextElement: -encoded string.  The string is ", "DEL TextElement: The default ", "DEL SimpleName: hex", "DEL TextElement: <b>N.B.</b> This is a convenience method to set <em>both</em> the ", "DEL PrimitiveType: byte", "DEL SimpleName: decode", "DEL TextElement:  methods instead.", "DEL TagElement: @link", "DEL SimpleName: setDecryptionCipherKeyHex", "DEL MethodRef"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL PrimitiveType: void", "DEL TextElement:  BASE 64", "DEL TagElement: @param", "DEL TextElement: <p/>", "DEL MethodRef", "DEL TextElement: -decoded and the resulting byte", "DEL TextElement:  encryption key and the", "DEL TextElement: -encoded string.  The string is ", "DEL TextElement:  instance is a symmetric CipherService, so this method can be used if you are", "DEL TextElement:  BASE 64", "DEL SimpleType: String", "DEL TextElement: <b>N.B.</b> This is a convenience method to set <em>both</em> the ", "DEL Javadoc", "DEL SimpleName: String", "DEL TagElement", "DEL TextElement: using the default.", "DEL Block", "DEL SimpleName: CipherService", "DEL TextElement:  base64-encoded symmetric cipher key to decode into the raw cipher key bytes.", "DEL SimpleName: AesCipherService", "DEL SimpleName: setDecryptionCipherKeyBase64", "DEL TagElement: @code", "DEL Modifier: public", "DEL ArrayType: byte[]", "DEL SingleVariableDeclaration", "DEL TextElement: Convenience method that allows configuration of the (symmetric) cipher key", "DEL MethodRef", "DEL SimpleName: setEncryptionCipherKeyBase64", "DEL TagElement: @link", "DEL TextElement: CipherService, you cannot call this method and instead should use the ", "DEL TextElement:  cipherKey", "DEL MethodRefParameter", "DEL MethodInvocation", "DEL TextElement: .", "DEL TextElement: by specifying a ", "DEL SimpleName: setCipherKey", "DEL MethodRefParameter", "DEL MethodInvocation", "DEL Dimension", "DEL TextElement: <p/>", "DEL SimpleName: String", "DEL TagElement: @link", "DEL TextElement: and ", "DEL TextElement:  methods instead.", "DEL SimpleName: base64", "DEL TagElement: @link", "DEL SimpleType: String", "DEL MethodRef", "DEL TextElement: array is used as the ", "DEL MethodRefParameter", "DEL SimpleName: base64", "DEL TagElement: @link", "DEL SimpleName: setCipherKeyBase64", "DEL SimpleName: base64", "DEL MethodDeclaration", "DEL PrimitiveType: byte", "DEL SimpleName: Base64", "DEL TagElement: @link", "DEL TagElement: @code", "DEL SimpleName: setCipherKey", "DEL ExpressionStatement", "DEL TextElement: The default ", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleName: decode", "DEL TextElement: decryption key and should only be called if using a symmetric CipherService.  If using an asymmetric"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement:  instance.", "DEL SimpleName: Subject", "DEL SimpleName: forgetIdentity", "DEL SimpleType: SubjectContext", "DEL SimpleName: subjectContext", "DEL TagElement: @link", "DEL TagElement: @link", "DEL PrimitiveType: void", "DEL Modifier: protected", "DEL QualifiedName: Subject.Builder", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: subjectContext", "DEL TextElement: argument.  The context map is usually populated by a ", "DEL TextElement:  context", "DEL SimpleName: SubjectContext", "DEL TextElement:  the contextual data, usually provided by a ", "DEL TextElement: Forgets (removes) any remembered identity data for the subject being built by the specified ", "DEL QualifiedName: Subject.Builder", "DEL SingleVariableDeclaration", "DEL Modifier: abstract", "DEL TagElement: @code", "DEL Javadoc", "DEL TextElement:  implementation, that", "DEL TagElement: @link", "DEL TextElement:  implementation.", "DEL TextElement: is being used to construct a "]}]}}, {"AbstractRememberMeManager_diff": {"operations": ["Move TextElement: <ul>(364) into TagElement(399) at 10", "Move TextElement: <ul>(394) into TagElement(399) at 24", "Move TextElement: Similarly, you can set the decryption key via one of these methods:(421) into TagElement(399) at 36", "Update TextElement: should set your key via one of the three following methods:(363) to should set your key via the ", "Update TextElement: <ul>(364) to  method.", "Update TextElement: public/private key pairs), you should set your encryption key via one of these methods:(393) to public/private key pairs), you should set your encryption and decryption key via the respective", "Update TextElement: <ul>(394) to  and ", "Update TextElement: Similarly, you can set the decryption key via one of these methods:(421) to  methods.", "Update TextElement: Sets the encryption key to use for encryption operations.  If setting the key via text configuration mechanisms,(504) to Sets the encryption key to use for encryption operations.", "Update TextElement: Sets the decryption key to use for decryption operations.  If setting the key via text configuration mechanisms,(661) to Sets the decryption key to use for decryption operations.", "Delete QualifiedName: org.apache.shiro.codec.Hex(12)", "Delete ImportDeclaration(13)", "Delete TextElement: <li>(365)", "Delete TextElement: </li>(373)", "Delete TextElement: <li>(374)", "Delete SimpleName: setCipherKeyBase64(375)", "Delete SimpleName: String(376)", "Delete SimpleType: String(377)", "Delete MethodRefParameter(378)", "Delete MethodRef(379)", "Delete TagElement: @link(380)", "Delete TextElement: , or</li>(381)", "Delete TextElement: <li>(382)", "Delete SimpleName: setCipherKeyHex(383)", "Delete SimpleName: String(384)", "Delete SimpleType: String(385)", "Delete MethodRefParameter(386)", "Delete MethodRef(387)", "Delete TagElement: @link(388)", "Delete TextElement: </li>(389)", "Delete TextElement: </ul>(390)", "Delete TextElement: <li>(395)", "Delete TextElement: </li>(403)", "Delete TextElement: <li>(404)", "Delete SimpleName: setEncryptionCipherKeyHex(405)", "Delete SimpleName: String(406)", "Delete SimpleType: String(407)", "Delete MethodRefParameter(408)", "Delete MethodRef(409)", "Delete TagElement: @link(410)", "Delete TextElement: , or</li>(411)", "Delete TextElement: <li>(412)", "Delete SimpleName: setEncryptionCipherKeyBase64(413)", "Delete SimpleName: String(414)", "Delete SimpleType: String(415)", "Delete MethodRefParameter(416)", "Delete MethodRef(417)", "Delete TagElement: @link(418)", "Delete TextElement: </li>(419)", "Delete TextElement: </ul>(420)", "Delete TextElement: <ul>(422)", "Delete TextElement: <li>(423)", "Delete TextElement: </li>(431)", "Delete TextElement: <li>(432)", "Delete SimpleName: setDecryptionCipherKeyHex(433)", "Delete SimpleName: String(434)", "Delete SimpleType: String(435)", "Delete MethodRefParameter(436)", "Delete MethodRef(437)", "Delete TagElement: @link(438)", "Delete TextElement: , or</li>(439)", "Delete TextElement: <li>(440)", "Delete SimpleName: setDecryptionCipherKeyBase64(441)", "Delete SimpleName: String(442)", "Delete SimpleType: String(443)", "Delete MethodRefParameter(444)", "Delete MethodRef(445)", "Delete TagElement: @link(446)", "Delete TextElement: </li>(447)", "Delete TextElement: </ul>(448)", "Delete TextElement: the (505)", "Delete SimpleName: setEncryptionCipherKeyHex(506)", "Delete SimpleName: String(507)", "Delete SimpleType: String(508)", "Delete MethodRefParameter(509)", "Delete MethodRef(510)", "Delete TextElement:  encryptionCipherKeyHex(511)", "Delete TagElement: @link(512)", "Delete TextElement:  or(513)", "Delete SimpleName: setEncryptionCipherKeyBase64(514)", "Delete SimpleName: String(515)", "Delete SimpleType: String(516)", "Delete MethodRefParameter(517)", "Delete MethodRef(518)", "Delete TextElement:  encryptionCipherKeyBase64(519)", "Delete TagElement: @link(520)", "Delete TextElement:  methods are probably more convenient.(521)", "Delete TextElement: Convenience method that allows configuration of the encryption cipher key by specifying a(550)", "Delete TextElement:  hex(551)", "Delete TagElement: @code(552)", "Delete TextElement: -encoded string.  The string is (553)", "Delete TextElement:  hex(554)", "Delete TagElement: @code(555)", "Delete TextElement: -decoded and the resulting byte array is used(556)", "Delete TextElement: as the (557)", "Delete SimpleName: setEncryptionCipherKey(558)", "Delete PrimitiveType: byte(559)", "Delete Dimension(560)", "Delete ArrayType: byte[](561)", "Delete MethodRefParameter(562)", "Delete MethodRef(563)", "Delete TextElement:  encryptionCipherKey(564)", "Delete TagElement: @link(565)", "Delete TextElement: .(566)", "Delete TagElement(567)", "Delete SimpleName: hex(568)", "Delete TextElement:  hex-encoded encryption cipher key to decode into the raw encryption cipher key bytes.(569)", "Delete TagElement: @param(570)", "Delete SimpleName: setCipherService(571)", "Delete MemberRef(572)", "Delete TextElement:  for a description of the various (573)", "Delete TextElement:  get/set*Key(574)", "Delete TagElement: @code(575)", "Delete TextElement:  methods.(576)", "Delete TagElement: @see(577)", "Delete Javadoc(578)", "Delete Modifier: public(579)", "Delete PrimitiveType: void(580)", "Delete SimpleName: setEncryptionCipherKeyHex(581)", "Delete SimpleName: String(582)", "Delete SimpleType: String(583)", "Delete SimpleName: hex(584)", "Delete SingleVariableDeclaration(585)", "Delete SimpleName: setEncryptionCipherKey(586)", "Delete SimpleName: Hex(587)", "Delete SimpleName: decode(588)", "Delete SimpleName: hex(589)", "Delete MethodInvocation(590)", "Delete MethodInvocation(591)", "Delete ExpressionStatement(592)", "Delete Block(593)", "Delete MethodDeclaration(594)", "Delete TextElement: Convenience method that allows configuration of the encryption cipher key by specifying a(595)", "Delete TextElement:  BASE 64(596)", "Delete TagElement: @code(597)", "Delete TextElement: -encoded string.  The string is (598)", "Delete TextElement:  BASE 64(599)", "Delete TagElement: @code(600)", "Delete TextElement: -decoded and the resulting byte array is used(601)", "Delete TextElement: as the (602)", "Delete SimpleName: setEncryptionCipherKey(603)", "Delete PrimitiveType: byte(604)", "Delete Dimension(605)", "Delete ArrayType: byte[](606)", "Delete MethodRefParameter(607)", "Delete MethodRef(608)", "Delete TextElement:  encryptionCipherKey(609)", "Delete TagElement: @link(610)", "Delete TextElement: .(611)", "Delete TagElement(612)", "Delete SimpleName: base64(613)", "Delete TextElement:  base64-encoded encryption cipher key to decode into the raw encryption cipher key bytes(614)", "Delete TagElement: @param(615)", "Delete SimpleName: setCipherService(616)", "Delete MemberRef(617)", "Delete TextElement:  for a description of the various (618)", "Delete TextElement:  get/set*Key(619)", "Delete TagElement: @code(620)", "Delete TextElement:  methods.(621)", "Delete TagElement: @see(622)", "Delete Javadoc(623)", "Delete Modifier: public(624)", "Delete PrimitiveType: void(625)", "Delete SimpleName: setEncryptionCipherKeyBase64(626)", "Delete SimpleName: String(627)", "Delete SimpleType: String(628)", "Delete SimpleName: base64(629)", "Delete SingleVariableDeclaration(630)", "Delete SimpleName: setEncryptionCipherKey(631)", "Delete SimpleName: Base64(632)", "Delete SimpleName: decode(633)", "Delete SimpleName: base64(634)", "Delete MethodInvocation(635)", "Delete MethodInvocation(636)", "Delete ExpressionStatement(637)", "Delete Block(638)", "Delete MethodDeclaration(639)", "Delete TextElement: the (662)", "Delete SimpleName: setDecryptionCipherKeyHex(663)", "Delete SimpleName: String(664)", "Delete SimpleType: String(665)", "Delete MethodRefParameter(666)", "Delete MethodRef(667)", "Delete TextElement:  decryptionCipherKeyHex(668)", "Delete TagElement: @link(669)", "Delete TextElement:  or(670)", "Delete SimpleName: setDecryptionCipherKeyBase64(671)", "Delete SimpleName: String(672)", "Delete SimpleType: String(673)", "Delete MethodRefParameter(674)", "Delete MethodRef(675)", "Delete TextElement:  decryptionCipherKeyBase64(676)", "Delete TagElement: @link(677)", "Delete TextElement:  methods are probably more convenient.(678)", "Delete TextElement: Convenience method that allows configuration of the decryption cipher key by specifying a(707)", "Delete TextElement:  hex(708)", "Delete TagElement: @code(709)", "Delete TextElement: -encoded string.  The string is (710)", "Delete TextElement:  hex(711)", "Delete TagElement: @code(712)", "Delete TextElement: -decoded and the resulting byte array is used(713)", "Delete TextElement: as the (714)", "Delete SimpleName: setDecryptionCipherKey(715)", "Delete PrimitiveType: byte(716)", "Delete Dimension(717)", "Delete ArrayType: byte[](718)", "Delete MethodRefParameter(719)", "Delete MethodRef(720)", "Delete TextElement:  decryptionCipherKey(721)", "Delete TagElement: @link(722)", "Delete TextElement: .(723)", "Delete TagElement(724)", "Delete SimpleName: hex(725)", "Delete TextElement:  hex-encoded decryption cipher key to decode into the raw decryption cipher key bytes.(726)", "Delete TagElement: @param(727)", "Delete SimpleName: setCipherService(728)", "Delete MemberRef(729)", "Delete TextElement:  for a description of the various (730)", "Delete TextElement:  get/set*Key(731)", "Delete TagElement: @code(732)", "Delete TextElement:  methods.(733)", "Delete TagElement: @see(734)", "Delete Javadoc(735)", "Delete Modifier: public(736)", "Delete PrimitiveType: void(737)", "Delete SimpleName: setDecryptionCipherKeyHex(738)", "Delete SimpleName: String(739)", "Delete SimpleType: String(740)", "Delete SimpleName: hex(741)", "Delete SingleVariableDeclaration(742)", "Delete SimpleName: setDecryptionCipherKey(743)", "Delete SimpleName: Hex(744)", "Delete SimpleName: decode(745)", "Delete SimpleName: hex(746)", "Delete MethodInvocation(747)", "Delete MethodInvocation(748)", "Delete ExpressionStatement(749)", "Delete Block(750)", "Delete MethodDeclaration(751)", "Delete TextElement: Convenience method that allows configuration of the decryption cipher key by specifying a(752)", "Delete TextElement:  BASE 64(753)", "Delete TagElement: @code(754)", "Delete TextElement: -encoded string.  The string is (755)", "Delete TextElement:  BASE 64(756)", "Delete TagElement: @code(757)", "Delete TextElement: -decoded and the resulting byte array is used(758)", "Delete TextElement: as the (759)", "Delete SimpleName: setDecryptionCipherKey(760)", "Delete PrimitiveType: byte(761)", "Delete Dimension(762)", "Delete ArrayType: byte[](763)", "Delete MethodRefParameter(764)", "Delete MethodRef(765)", "Delete TextElement:  decryptionCipherKey(766)", "Delete TagElement: @link(767)", "Delete TextElement: .(768)", "Delete TagElement(769)", "Delete SimpleName: base64(770)", "Delete TextElement:  base64-encoded decryption cipher key to decode into the raw decryption cipher key bytes(771)", "Delete TagElement: @param(772)", "Delete SimpleName: setCipherService(773)", "Delete MemberRef(774)", "Delete TextElement:  for a description of the various (775)", "Delete TextElement:  get/set*Key(776)", "Delete TagElement: @code(777)", "Delete TextElement:  methods.(778)", "Delete TagElement: @see(779)", "Delete Javadoc(780)", "Delete Modifier: public(781)", "Delete PrimitiveType: void(782)", "Delete SimpleName: setDecryptionCipherKeyBase64(783)", "Delete SimpleName: String(784)", "Delete SimpleType: String(785)", "Delete SimpleName: base64(786)", "Delete SingleVariableDeclaration(787)", "Delete SimpleName: setDecryptionCipherKey(788)", "Delete SimpleName: Base64(789)", "Delete SimpleName: decode(790)", "Delete SimpleName: base64(791)", "Delete MethodInvocation(792)", "Delete MethodInvocation(793)", "Delete ExpressionStatement(794)", "Delete Block(795)", "Delete MethodDeclaration(796)", "Delete TextElement: Convenience method that allows configuration of the (symmetric) cipher key by specifying a(891)", "Delete TextElement:  hex(892)", "Delete TagElement: @code(893)", "Delete TextElement: -encoded string.  The string is (894)", "Delete TextElement:  hex(895)", "Delete TagElement: @code(896)", "Delete TextElement: -decoded and the resulting byte array is used(897)", "Delete TextElement: as the (898)", "Delete SimpleName: setCipherKey(899)", "Delete PrimitiveType: byte(900)", "Delete Dimension(901)", "Delete ArrayType: byte[](902)", "Delete MethodRefParameter(903)", "Delete MethodRef(904)", "Delete TextElement:  cipherKey(905)", "Delete TagElement: @link(906)", "Delete TextElement: .(907)", "Delete TextElement: <p/>(908)", "Delete TextElement: <b>N.B.</b> This is a convenience method to set <em>both</em> the (909)", "Delete SimpleName: CipherService(910)", "Delete TagElement: @link(911)", "Delete TextElement:  encryption key and the(912)", "Delete TextElement: decryption key and should only be called if using a symmetric CipherService.  If using an asymmetric CipherService(913)", "Delete TextElement: (such as a public/private key pair) you cannot call this method and instead should use the(914)", "Delete SimpleName: setEncryptionCipherKeyHex(915)", "Delete SimpleName: String(916)", "Delete SimpleType: String(917)", "Delete MethodRefParameter(918)", "Delete MethodRef(919)", "Delete TagElement: @link(920)", "Delete TextElement:  and (921)", "Delete SimpleName: setDecryptionCipherKeyHex(922)", "Delete SimpleName: String(923)", "Delete SimpleType: String(924)", "Delete MethodRefParameter(925)", "Delete MethodRef(926)", "Delete TagElement: @link(927)", "Delete TextElement:  methods instead.(928)", "Delete TextElement: <p/>(929)", "Delete TextElement: The default (930)", "Delete SimpleName: AesCipherService(931)", "Delete TagElement: @link(932)", "Delete TextElement:  instance is a symmetric CipherService, so this method can be used if you are(933)", "Delete TextElement: using the default.(934)", "Delete TagElement(935)", "Delete SimpleName: hex(936)", "Delete TextElement:  hex-encoded symmetric cipher key to decode into the raw cipher key bytes.(937)", "Delete TagElement: @param(938)", "Delete Javadoc(939)", "Delete Modifier: public(940)", "Delete PrimitiveType: void(941)", "Delete SimpleName: setCipherKeyHex(942)", "Delete SimpleName: String(943)", "Delete SimpleType: String(944)", "Delete SimpleName: hex(945)", "Delete SingleVariableDeclaration(946)", "Delete SimpleName: setCipherKey(947)", "Delete SimpleName: Hex(948)", "Delete SimpleName: decode(949)", "Delete SimpleName: hex(950)", "Delete MethodInvocation(951)", "Delete MethodInvocation(952)", "Delete ExpressionStatement(953)", "Delete Block(954)", "Delete MethodDeclaration(955)", "Delete TextElement: Convenience method that allows configuration of the (symmetric) cipher key(956)", "Delete TextElement: by specifying a (957)", "Delete TextElement:  BASE 64(958)", "Delete TagElement: @code(959)", "Delete TextElement: -encoded string.  The string is (960)", "Delete TextElement:  BASE 64(961)", "Delete TagElement: @code(962)", "Delete TextElement: -decoded and the resulting byte(963)", "Delete TextElement: array is used as the (964)", "Delete SimpleName: setCipherKey(965)", "Delete PrimitiveType: byte(966)", "Delete Dimension(967)", "Delete ArrayType: byte[](968)", "Delete MethodRefParameter(969)", "Delete MethodRef(970)", "Delete TextElement:  cipherKey(971)", "Delete TagElement: @link(972)", "Delete TextElement: .(973)", "Delete TextElement: <p/>(974)", "Delete TextElement: <b>N.B.</b> This is a convenience method to set <em>both</em> the (975)", "Delete SimpleName: CipherService(976)", "Delete TagElement: @link(977)", "Delete TextElement:  encryption key and the(978)", "Delete TextElement: decryption key and should only be called if using a symmetric CipherService.  If using an asymmetric(979)", "Delete TextElement: CipherService, you cannot call this method and instead should use the (980)", "Delete SimpleName: setEncryptionCipherKeyBase64(981)", "Delete SimpleName: String(982)", "Delete SimpleType: String(983)", "Delete MethodRefParameter(984)", "Delete MethodRef(985)", "Delete TagElement: @link(986)", "Delete TextElement: and (987)", "Delete SimpleName: setDecryptionCipherKeyBase64(988)", "Delete SimpleName: String(989)", "Delete SimpleType: String(990)", "Delete MethodRefParameter(991)", "Delete MethodRef(992)", "Delete TagElement: @link(993)", "Delete TextElement:  methods instead.(994)", "Delete TextElement: <p/>(995)", "Delete TextElement: The default (996)", "Delete SimpleName: AesCipherService(997)", "Delete TagElement: @link(998)", "Delete TextElement:  instance is a symmetric CipherService, so this method can be used if you are(999)", "Delete TextElement: using the default.(1000)", "Delete TagElement(1001)", "Delete SimpleName: base64(1002)", "Delete TextElement:  base64-encoded symmetric cipher key to decode into the raw cipher key bytes.(1003)", "Delete TagElement: @param(1004)", "Delete Javadoc(1005)", "Delete Modifier: public(1006)", "Delete PrimitiveType: void(1007)", "Delete SimpleName: setCipherKeyBase64(1008)", "Delete SimpleName: String(1009)", "Delete SimpleType: String(1010)", "Delete SimpleName: base64(1011)", "Delete SingleVariableDeclaration(1012)", "Delete SimpleName: setCipherKey(1013)", "Delete SimpleName: Base64(1014)", "Delete SimpleName: decode(1015)", "Delete SimpleName: base64(1016)", "Delete MethodInvocation(1017)", "Delete MethodInvocation(1018)", "Delete ExpressionStatement(1019)", "Delete Block(1020)", "Delete MethodDeclaration(1021)", "Delete TextElement: Forgets (removes) any remembered identity data for the subject being built by the specified (1022)", "Delete TextElement:  context(1023)", "Delete TagElement: @code(1024)", "Delete TextElement: argument.  The context map is usually populated by a (1025)", "Delete QualifiedName: Subject.Builder(1026)", "Delete TagElement: @link(1027)", "Delete TextElement:  implementation.(1028)", "Delete TagElement(1029)", "Delete SimpleName: subjectContext(1030)", "Delete TextElement:  the contextual data, usually provided by a (1031)", "Delete QualifiedName: Subject.Builder(1032)", "Delete TagElement: @link(1033)", "Delete TextElement:  implementation, that(1034)", "Delete TextElement: is being used to construct a (1035)", "Delete SimpleName: Subject(1036)", "Delete TagElement: @link(1037)", "Delete TextElement:  instance.(1038)", "Delete TagElement: @param(1039)", "Delete Javadoc(1040)", "Delete Modifier: protected(1041)", "Delete Modifier: abstract(1042)", "Delete PrimitiveType: void(1043)", "Delete SimpleName: forgetIdentity(1044)", "Delete SimpleName: SubjectContext(1045)", "Delete SimpleType: SubjectContext(1046)", "Delete SimpleName: subjectContext(1047)", "Delete SingleVariableDeclaration(1048)", "Delete MethodDeclaration(1049)"]}}, {"AuthenticatingSecurityManager_cluster": {"actions": [{"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.shiro.authc.AuthenticationListener", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.shiro.authc.AuthenticationListenerRegistrar", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.shiro.authc.pam.AuthenticationStrategy", "DEL ImportDeclaration"]}, {"root": "DEL SimpleType: AuthenticationListenerRegistrar", "operations": ["DEL SimpleName: AuthenticationListenerRegistrar", "DEL SimpleType: AuthenticationListenerRegistrar"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL SimpleType: String", "DEL QualifiedName: org.apache.shiro.authc.pam.AuthenticationStrategy", "DEL MethodInvocation", "DEL TagElement: @link", "DEL CastExpression", "DEL SimpleType: ModularRealmAuthenticator", "DEL SimpleName: IllegalStateException", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL SimpleName: msg", "DEL InstanceofExpression", "DEL FieldAccess", "DEL ThisExpression", "DEL SimpleName: getName", "DEL SimpleName: ModularRealmAuthenticator", "DEL SimpleType: AuthenticationStrategy", "DEL SimpleName: AuthenticationStrategy", "DEL SimpleName: getClass", "DEL SingleVariableDeclaration", "DEL SimpleName: setAuthenticationStrategy", "DEL StringLiteral: \"Authenticator implementation is a \"", "DEL ThisExpression", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL SimpleName: msg", "DEL SimpleName: strategy", "DEL InfixExpression: +", "DEL ThisExpression", "DEL TagElement", "DEL FieldAccess", "DEL SimpleName: ModularRealmAuthenticator", "DEL TextElement:  the <code>AuthenticationStrategy</code> to use in multi-realm environments.", "DEL ParenthesizedExpression", "DEL SimpleType: ModularRealmAuthenticator", "DEL MethodDeclaration", "DEL SimpleName: setAuthenticationStrategy", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: strategy", "DEL ThrowStatement", "DEL TypeLiteral", "DEL PrimitiveType: void", "DEL FieldAccess", "DEL StringLiteral: \" implementation.  This SecurityManager has been configured with an Authenticator of type \"", "DEL SimpleType: ModularRealmAuthenticator", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SimpleName: authenticator", "DEL Javadoc", "DEL ExpressionStatement", "DEL PrefixExpression: !", "DEL ParenthesizedExpression", "DEL SimpleName: strategy", "DEL SimpleName: ModularRealmAuthenticator", "DEL TextElement: in multi-realm environments.", "DEL StringLiteral: \"Configuring a AuthenticationStrategy is only applicable when the underlying \"", "DEL TextElement: Sets the ", "DEL SimpleName: authenticator", "DEL TextElement:  to use", "DEL Block", "DEL SimpleType: IllegalStateException", "DEL SimpleName: getName", "DEL SimpleName: authenticator"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Javadoc", "DEL TagElement: @link", "DEL SimpleName: msg", "DEL MethodDeclaration", "DEL SimpleType: AuthenticationListenerRegistrar", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: authenticator", "DEL PrefixExpression: !", "DEL StringLiteral: \" implementation.  This SecurityManager has been configured with an Authenticator of type \"", "DEL ParenthesizedExpression", "DEL ThisExpression", "DEL TextElement: delegate Authenticator instance.", "DEL SimpleName: assertAuthenticatorListenerSupport", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL SimpleName: setAuthenticationListeners", "DEL SimpleName: AuthenticationListenerRegistrar", "DEL TextElement: <tt>Authenticator</tt>.", "DEL SimpleType: String", "DEL SimpleType: IllegalStateException", "DEL SingleVariableDeclaration", "DEL SimpleName: msg", "DEL SimpleName: setAuthenticationListeners", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL SimpleName: Collection", "DEL SimpleName: listeners", "DEL SimpleName: AuthenticationListenerRegistrar", "DEL TextElement:  AuthenticationListenerRegistrar", "DEL MethodInvocation", "DEL FieldAccess", "DEL TextElement: <p>All of Shiro's <tt>Authenticator</tt> implementations implement the", "DEL SimpleType: AuthenticationListener", "DEL CastExpression", "DEL SimpleName: AuthenticationListenerRegistrar", "DEL TextElement: <tt>AuthenticationListenerRegistrar</tt> interface, so you would only need", "DEL QualifiedName: org.apache.shiro.authc.AuthenticationListenerRegistrar", "DEL ParameterizedType: Collection<AuthenticationListener>", "DEL TextElement: interface in order for these listeners to be applied.  If it does not implement this interface, it is", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: getName", "DEL SimpleType: Collection", "DEL StringLiteral: \"Authenticator implementation is a \"", "DEL TextElement: implement it.", "DEL VariableDeclarationStatement", "DEL SimpleName: authenticator", "DEL IfStatement", "DEL SimpleName: authenticator", "DEL TextElement: This is a convenience method that allows registration of AuthenticationListeners with the underlying", "DEL SimpleName: String", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: getName", "DEL ClassInstanceCreation", "DEL ThisExpression", "DEL ThrowStatement", "DEL Modifier: public", "DEL SimpleType: AuthenticationListenerRegistrar", "DEL SimpleName: listeners", "DEL SimpleType: AuthenticationListenerRegistrar", "DEL TextElement: it, and then set that Authenticator instance as an attribute of this class.  Instead, you can just rely", "DEL TextElement: <p>One notice however: The underlying Authenticator delegate must implement the", "DEL SimpleName: getClass", "DEL TextElement: <p>This is more convenient than having to configure your own Authenticator instance, inject the listeners on", "DEL FieldAccess", "DEL ThisExpression", "DEL StringLiteral: \"Configuring a AuthenticationStrategy is only applicable when the underlying \"", "DEL SimpleName: AuthenticationListener", "DEL TextElement: considered a configuration error and an exception will be thrown.", "DEL SimpleName: IllegalStateException", "DEL TagElement: @param", "DEL FieldAccess", "DEL TextElement:  the <tt>AuthenticationListener</tt>s to register with the underlying delegate", "DEL TypeLiteral", "DEL TagElement", "DEL TextElement: to worry about an exception being thrown if you provided your own Authenticator instance and did not", "DEL StringLiteral: \", which does not implement that interface.\"", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL TextElement: on the <tt>SecurityManager</tt>'s default initialization logic to create the Authenticator instance for you", "DEL InstanceofExpression", "DEL InfixExpression: +", "DEL SimpleName: listeners", "DEL TextElement: and then apply these <tt>AuthenticationListener</tt>s on your behalf."]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: assertAuthenticatorListenerSupport", "DEL SimpleName: add", "DEL CastExpression", "DEL FieldAccess", "DEL MethodInvocation", "DEL SimpleName: listener", "DEL ThisExpression", "DEL SimpleType: AuthenticationListener", "DEL SimpleName: add", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL PrimitiveType: void", "DEL SimpleType: AuthenticationListenerRegistrar", "DEL Block", "DEL SimpleName: AuthenticationListener", "DEL SimpleName: AuthenticationListenerRegistrar", "DEL SimpleName: listener", "DEL SimpleName: authenticator", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL ParenthesizedExpression"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: AuthenticationListenerRegistrar", "DEL SimpleName: remove", "DEL FieldAccess", "DEL SimpleName: authenticator", "DEL MethodDeclaration", "DEL SimpleName: AuthenticationListener", "DEL InstanceofExpression", "DEL CastExpression", "DEL ThisExpression", "DEL InfixExpression: &&", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: listener", "DEL SimpleName: remove", "DEL SimpleType: AuthenticationListenerRegistrar", "DEL Block", "DEL SimpleType: AuthenticationListenerRegistrar", "DEL ThisExpression", "DEL SimpleType: AuthenticationListener", "DEL ParenthesizedExpression", "DEL SimpleName: AuthenticationListenerRegistrar", "DEL SimpleName: listener", "DEL PrimitiveType: boolean", "DEL SimpleName: authenticator", "DEL ParenthesizedExpression", "DEL FieldAccess"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL SimpleName: authenticator", "DEL ParenthesizedExpression", "DEL SimpleName: AuthenticationListenerRegistrar", "DEL SimpleType: AuthenticationListenerRegistrar", "DEL TextElement: listeners can be registered.", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL SimpleType: AuthenticationListenerRegistrar", "DEL ThrowStatement", "DEL SimpleType: String", "DEL SimpleName: assertAuthenticatorListenerSupport", "DEL SimpleName: String", "DEL SimpleName: IllegalStateException", "DEL TextElement:  AuthenticationListenerRegistrar", "DEL TagElement: @link", "DEL StringLiteral: \"type [\"", "DEL SimpleName: msg", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: getClass", "DEL InstanceofExpression", "DEL StringLiteral: \"] does not implement the \"", "DEL TextElement: Ensures that <code>this.authenticator</code> implements the", "DEL TypeLiteral", "DEL Modifier: private", "DEL StringLiteral: \" interface and therefore cannot support \"", "DEL StringLiteral: \"runtime registration of AuthenticationListeners.\"", "DEL Block", "DEL ThisExpression", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL ThisExpression", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: authenticator", "DEL FieldAccess", "DEL StringLiteral: \"AuthenticationListener registration failed:  The underlying Authenticator instance of \"", "DEL MethodDeclaration", "DEL SimpleType: IllegalStateException", "DEL FieldAccess", "DEL QualifiedName: org.apache.shiro.authc.AuthenticationListenerRegistrar", "DEL InfixExpression: +", "DEL PrefixExpression: !", "DEL SimpleName: msg", "DEL InfixExpression: +", "DEL SimpleName: AuthenticationListenerRegistrar", "DEL SimpleName: getName", "DEL SimpleName: getName", "DEL TextElement:  interface to ensure"]}]}}, {"AuthenticatingSecurityManager_diff": {"operations": ["Delete QualifiedName: java.util.Collection(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.apache.shiro.authc.AuthenticationListener(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: org.apache.shiro.authc.AuthenticationListenerRegistrar(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: org.apache.shiro.authc.pam.AuthenticationStrategy(16)", "Delete ImportDeclaration(17)", "Delete SimpleName: AuthenticationListenerRegistrar(51)", "Delete SimpleType: AuthenticationListenerRegistrar(52)", "Delete TextElement: Sets the (159)", "Delete QualifiedName: org.apache.shiro.authc.pam.AuthenticationStrategy(160)", "Delete TagElement: @link(161)", "Delete TextElement:  to use(162)", "Delete TextElement: in multi-realm environments.(163)", "Delete TagElement(164)", "Delete SimpleName: strategy(165)", "Delete TextElement:  the <code>AuthenticationStrategy</code> to use in multi-realm environments.(166)", "Delete TagElement: @param(167)", "Delete Javadoc(168)", "Delete Modifier: public(169)", "Delete PrimitiveType: void(170)", "Delete SimpleName: setAuthenticationStrategy(171)", "Delete SimpleName: AuthenticationStrategy(172)", "Delete SimpleType: AuthenticationStrategy(173)", "Delete SimpleName: strategy(174)", "Delete SingleVariableDeclaration(175)", "Delete ThisExpression(176)", "Delete SimpleName: authenticator(177)", "Delete FieldAccess(178)", "Delete SimpleName: ModularRealmAuthenticator(179)", "Delete SimpleType: ModularRealmAuthenticator(180)", "Delete InstanceofExpression(181)", "Delete ParenthesizedExpression(182)", "Delete PrefixExpression: !(183)", "Delete SimpleName: String(184)", "Delete SimpleType: String(185)", "Delete SimpleName: msg(186)", "Delete StringLiteral: \"Configuring a AuthenticationStrategy is only applicable when the underlying \"(187)", "Delete StringLiteral: \"Authenticator implementation is a \"(188)", "Delete InfixExpression: +(189)", "Delete SimpleName: ModularRealmAuthenticator(190)", "Delete SimpleType: ModularRealmAuthenticator(191)", "Delete TypeLiteral(192)", "Delete SimpleName: getName(193)", "Delete MethodInvocation(194)", "Delete StringLiteral: \" implementation.  This SecurityManager has been configured with an Authenticator of type \"(195)", "Delete ThisExpression(196)", "Delete SimpleName: authenticator(197)", "Delete FieldAccess(198)", "Delete SimpleName: getClass(199)", "Delete MethodInvocation(200)", "Delete SimpleName: getName(201)", "Delete MethodInvocation(202)", "Delete InfixExpression: +(203)", "Delete VariableDeclarationFragment(204)", "Delete VariableDeclarationStatement(205)", "Delete SimpleName: IllegalStateException(206)", "Delete SimpleType: IllegalStateException(207)", "Delete SimpleName: msg(208)", "Delete ClassInstanceCreation(209)", "Delete ThrowStatement(210)", "Delete Block(211)", "Delete IfStatement(212)", "Delete SimpleName: ModularRealmAuthenticator(213)", "Delete SimpleType: ModularRealmAuthenticator(214)", "Delete ThisExpression(215)", "Delete SimpleName: authenticator(216)", "Delete FieldAccess(217)", "Delete CastExpression(218)", "Delete ParenthesizedExpression(219)", "Delete SimpleName: setAuthenticationStrategy(220)", "Delete SimpleName: strategy(221)", "Delete MethodInvocation(222)", "Delete ExpressionStatement(223)", "Delete Block(224)", "Delete MethodDeclaration(225)", "Delete TextElement: This is a convenience method that allows registration of AuthenticationListeners with the underlying(226)", "Delete TextElement: delegate Authenticator instance.(227)", "Delete TextElement: <p>This is more convenient than having to configure your own Authenticator instance, inject the listeners on(228)", "Delete TextElement: it, and then set that Authenticator instance as an attribute of this class.  Instead, you can just rely(229)", "Delete TextElement: on the <tt>SecurityManager</tt>'s default initialization logic to create the Authenticator instance for you(230)", "Delete TextElement: and then apply these <tt>AuthenticationListener</tt>s on your behalf.(231)", "Delete TextElement: <p>One notice however: The underlying Authenticator delegate must implement the(232)", "Delete QualifiedName: org.apache.shiro.authc.AuthenticationListenerRegistrar(233)", "Delete TextElement:  AuthenticationListenerRegistrar(234)", "Delete TagElement: @link(235)", "Delete TextElement: interface in order for these listeners to be applied.  If it does not implement this interface, it is(236)", "Delete TextElement: considered a configuration error and an exception will be thrown.(237)", "Delete TextElement: <p>All of Shiro's <tt>Authenticator</tt> implementations implement the(238)", "Delete TextElement: <tt>AuthenticationListenerRegistrar</tt> interface, so you would only need(239)", "Delete TextElement: to worry about an exception being thrown if you provided your own Authenticator instance and did not(240)", "Delete TextElement: implement it.(241)", "Delete TagElement(242)", "Delete SimpleName: listeners(243)", "Delete TextElement:  the <tt>AuthenticationListener</tt>s to register with the underlying delegate(244)", "Delete TextElement: <tt>Authenticator</tt>.(245)", "Delete TagElement: @param(246)", "Delete Javadoc(247)", "Delete Modifier: public(248)", "Delete PrimitiveType: void(249)", "Delete SimpleName: setAuthenticationListeners(250)", "Delete SimpleName: Collection(251)", "Delete SimpleType: Collection(252)", "Delete SimpleName: AuthenticationListener(253)", "Delete SimpleType: AuthenticationListener(254)", "Delete ParameterizedType: Collection<AuthenticationListener>(255)", "Delete SimpleName: listeners(256)", "Delete SingleVariableDeclaration(257)", "Delete SimpleName: assertAuthenticatorListenerSupport(258)", "Delete MethodInvocation(259)", "Delete ExpressionStatement(260)", "Delete ThisExpression(261)", "Delete SimpleName: authenticator(262)", "Delete FieldAccess(263)", "Delete SimpleName: AuthenticationListenerRegistrar(264)", "Delete SimpleType: AuthenticationListenerRegistrar(265)", "Delete InstanceofExpression(266)", "Delete ParenthesizedExpression(267)", "Delete PrefixExpression: !(268)", "Delete SimpleName: String(269)", "Delete SimpleType: String(270)", "Delete SimpleName: msg(271)", "Delete StringLiteral: \"Configuring a AuthenticationStrategy is only applicable when the underlying \"(272)", "Delete StringLiteral: \"Authenticator implementation is a \"(273)", "Delete InfixExpression: +(274)", "Delete SimpleName: AuthenticationListenerRegistrar(275)", "Delete SimpleType: AuthenticationListenerRegistrar(276)", "Delete TypeLiteral(277)", "Delete SimpleName: getName(278)", "Delete MethodInvocation(279)", "Delete StringLiteral: \" implementation.  This SecurityManager has been configured with an Authenticator of type \"(280)", "Delete ThisExpression(281)", "Delete SimpleName: authenticator(282)", "Delete FieldAccess(283)", "Delete SimpleName: getClass(284)", "Delete MethodInvocation(285)", "Delete SimpleName: getName(286)", "Delete MethodInvocation(287)", "Delete StringLiteral: \", which does not implement that interface.\"(288)", "Delete InfixExpression: +(289)", "Delete VariableDeclarationFragment(290)", "Delete VariableDeclarationStatement(291)", "Delete SimpleName: IllegalStateException(292)", "Delete SimpleType: IllegalStateException(293)", "Delete SimpleName: msg(294)", "Delete ClassInstanceCreation(295)", "Delete ThrowStatement(296)", "Delete Block(297)", "Delete IfStatement(298)", "Delete SimpleName: AuthenticationListenerRegistrar(299)", "Delete SimpleType: AuthenticationListenerRegistrar(300)", "Delete ThisExpression(301)", "Delete SimpleName: authenticator(302)", "Delete FieldAccess(303)", "Delete CastExpression(304)", "Delete ParenthesizedExpression(305)", "Delete SimpleName: setAuthenticationListeners(306)", "Delete SimpleName: listeners(307)", "Delete MethodInvocation(308)", "Delete ExpressionStatement(309)", "Delete Block(310)", "Delete MethodDeclaration(311)", "Delete Modifier: public(312)", "Delete PrimitiveType: void(313)", "Delete SimpleName: add(314)", "Delete SimpleName: AuthenticationListener(315)", "Delete SimpleType: AuthenticationListener(316)", "Delete SimpleName: listener(317)", "Delete SingleVariableDeclaration(318)", "Delete SimpleName: assertAuthenticatorListenerSupport(319)", "Delete MethodInvocation(320)", "Delete ExpressionStatement(321)", "Delete SimpleName: AuthenticationListenerRegistrar(322)", "Delete SimpleType: AuthenticationListenerRegistrar(323)", "Delete ThisExpression(324)", "Delete SimpleName: authenticator(325)", "Delete FieldAccess(326)", "Delete CastExpression(327)", "Delete ParenthesizedExpression(328)", "Delete SimpleName: add(329)", "Delete SimpleName: listener(330)", "Delete MethodInvocation(331)", "Delete ExpressionStatement(332)", "Delete Block(333)", "Delete MethodDeclaration(334)", "Delete Modifier: public(335)", "Delete PrimitiveType: boolean(336)", "Delete SimpleName: remove(337)", "Delete SimpleName: AuthenticationListener(338)", "Delete SimpleType: AuthenticationListener(339)", "Delete SimpleName: listener(340)", "Delete SingleVariableDeclaration(341)", "Delete ThisExpression(342)", "Delete SimpleName: authenticator(343)", "Delete FieldAccess(344)", "Delete SimpleName: AuthenticationListenerRegistrar(345)", "Delete SimpleType: AuthenticationListenerRegistrar(346)", "Delete InstanceofExpression(347)", "Delete ParenthesizedExpression(348)", "Delete SimpleName: AuthenticationListenerRegistrar(349)", "Delete SimpleType: AuthenticationListenerRegistrar(350)", "Delete ThisExpression(351)", "Delete SimpleName: authenticator(352)", "Delete FieldAccess(353)", "Delete CastExpression(354)", "Delete ParenthesizedExpression(355)", "Delete SimpleName: remove(356)", "Delete SimpleName: listener(357)", "Delete MethodInvocation(358)", "Delete InfixExpression: &&(359)", "Delete ReturnStatement(360)", "Delete Block(361)", "Delete MethodDeclaration(362)", "Delete TextElement: Ensures that <code>this.authenticator</code> implements the(363)", "Delete QualifiedName: org.apache.shiro.authc.AuthenticationListenerRegistrar(364)", "Delete TextElement:  AuthenticationListenerRegistrar(365)", "Delete TagElement: @link(366)", "Delete TextElement:  interface to ensure(367)", "Delete TextElement: listeners can be registered.(368)", "Delete TagElement(369)", "Delete Javadoc(370)", "Delete Modifier: private(371)", "Delete PrimitiveType: void(372)", "Delete SimpleName: assertAuthenticatorListenerSupport(373)", "Delete ThisExpression(374)", "Delete SimpleName: authenticator(375)", "Delete FieldAccess(376)", "Delete SimpleName: AuthenticationListenerRegistrar(377)", "Delete SimpleType: AuthenticationListenerRegistrar(378)", "Delete InstanceofExpression(379)", "Delete ParenthesizedExpression(380)", "Delete PrefixExpression: !(381)", "Delete SimpleName: String(382)", "Delete SimpleType: String(383)", "Delete SimpleName: msg(384)", "Delete StringLiteral: \"AuthenticationListener registration failed:  The underlying Authenticator instance of \"(385)", "Delete StringLiteral: \"type [\"(386)", "Delete InfixExpression: +(387)", "Delete ThisExpression(388)", "Delete SimpleName: authenticator(389)", "Delete FieldAccess(390)", "Delete SimpleName: getClass(391)", "Delete MethodInvocation(392)", "Delete SimpleName: getName(393)", "Delete MethodInvocation(394)", "Delete StringLiteral: \"] does not implement the \"(395)", "Delete SimpleName: AuthenticationListenerRegistrar(396)", "Delete SimpleType: AuthenticationListenerRegistrar(397)", "Delete TypeLiteral(398)", "Delete SimpleName: getName(399)", "Delete MethodInvocation(400)", "Delete StringLiteral: \" interface and therefore cannot support \"(401)", "Delete StringLiteral: \"runtime registration of AuthenticationListeners.\"(402)", "Delete InfixExpression: +(403)", "Delete VariableDeclarationFragment(404)", "Delete VariableDeclarationStatement(405)", "Delete SimpleName: IllegalStateException(406)", "Delete SimpleType: IllegalStateException(407)", "Delete SimpleName: msg(408)", "Delete ClassInstanceCreation(409)", "Delete ThrowStatement(410)", "Delete Block(411)", "Delete IfStatement(412)", "Delete Block(413)", "Delete MethodDeclaration(414)"]}}, {"AuthorizingSecurityManager_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 11", "MOV ImportDeclaration to CompilationUnit at 11"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.shiro.authz.permission.PermissionResolver", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.shiro.authz.permission.PermissionResolverAware"]}, {"root": "DEL SimpleType: PermissionResolverAware", "operations": ["DEL SimpleName: PermissionResolverAware", "DEL SimpleType: PermissionResolverAware"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleName: PermissionResolverAware", "DEL SimpleName: getAuthorizer", "DEL SimpleName: authz", "DEL SimpleName: permissionResolver", "DEL SimpleType: PermissionResolverAware", "DEL Block", "DEL Block", "DEL TagElement: @link", "DEL InfixExpression: +", "DEL SimpleName: String", "DEL SimpleName: authz", "DEL SimpleName: PermissionResolverAware", "DEL ThrowStatement", "DEL TagElement", "DEL PrimitiveType: void", "DEL TextElement: Sets the <tt>PermissionResolver</tt> instance that will be passed on to the underlying default wrapped", "DEL TextElement: than constructing your own object graph just to configure a <tt>PermissionResolver</tt> instance on objects", "DEL SimpleName: Authorizer", "DEL MethodInvocation", "DEL SimpleName: IllegalStateException", "DEL TextElement:  Authorizer", "DEL TextElement:  the <tt>PermissionResolver</tt> instance to set on the wrapped <tt>Authorizer</tt>", "DEL SimpleType: PermissionResolverAware", "DEL SimpleName: PermissionResolver", "DEL SimpleName: setPermissionResolver", "DEL ExpressionStatement", "DEL StringLiteral: \" interface.  This is required to support \"", "DEL SimpleName: getName", "DEL TextElement: .", "DEL SimpleName: setPermissionResolver", "DEL SimpleName: PermissionResolverAware", "DEL SimpleType: PermissionResolver", "DEL SimpleName: PermissionResolverAware", "DEL SimpleName: permissionResolver", "DEL ParenthesizedExpression", "DEL StringLiteral: \"Underlying Authorizer instance does not implement the \"", "DEL SimpleType: Authorizer", "DEL TextElement:  PermissionResolverAware", "DEL Javadoc", "DEL StringLiteral: \"passthrough configuration of a PermissionResolver.\"", "DEL VariableDeclarationFragment", "DEL TextElement:  interface, which ensures that the resolver can be registered.", "DEL SimpleName: IllegalStateException", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleType: IllegalStateException", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL TextElement: 'real' authorizer and/or underlying Realms.  This is easier to configure at the <tt>SecurityManager</tt> level", "DEL TextElement:  if the underlying <code>Authorizer</code> does not implement the", "DEL TypeLiteral", "DEL InstanceofExpression", "DEL MethodInvocation", "DEL CastExpression", "DEL TextElement: <p>This is a convenience method:  it allows you to configure an application-wide", "DEL TextElement: deep in the graph.", "DEL TagElement: @link", "DEL SimpleName: permissionResolver", "DEL IfStatement", "DEL SimpleName: msg", "DEL Block", "DEL SingleVariableDeclaration", "DEL TagElement: @throws", "DEL SimpleType: PermissionResolverAware", "DEL SimpleType: String", "DEL SimpleName: authz", "DEL VariableDeclarationFragment", "DEL SimpleName: msg", "DEL SimpleName: Authorizer", "DEL TextElement: <tt>PermissionResolver</tt> on the <tt>SecurityManager</tt> instance, and it will trickle its way down to the"]}]}}, {"AuthorizingSecurityManager_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(548) at 11", "Move ImportDeclaration(5) into CompilationUnit(548) at 11", "Delete QualifiedName: org.apache.shiro.authz.permission.PermissionResolver(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: org.apache.shiro.authz.permission.PermissionResolverAware(16)", "Delete ImportDeclaration(17)", "Delete SimpleName: PermissionResolverAware(52)", "Delete SimpleType: PermissionResolverAware(53)", "Delete TextElement: Sets the <tt>PermissionResolver</tt> instance that will be passed on to the underlying default wrapped(136)", "Delete SimpleName: Authorizer(137)", "Delete TextElement:  Authorizer(138)", "Delete TagElement: @link(139)", "Delete TextElement: .(140)", "Delete TextElement: <p>This is a convenience method:  it allows you to configure an application-wide(141)", "Delete TextElement: <tt>PermissionResolver</tt> on the <tt>SecurityManager</tt> instance, and it will trickle its way down to the(142)", "Delete TextElement: 'real' authorizer and/or underlying Realms.  This is easier to configure at the <tt>SecurityManager</tt> level(143)", "Delete TextElement: than constructing your own object graph just to configure a <tt>PermissionResolver</tt> instance on objects(144)", "Delete TextElement: deep in the graph.(145)", "Delete TagElement(146)", "Delete SimpleName: permissionResolver(147)", "Delete TextElement:  the <tt>PermissionResolver</tt> instance to set on the wrapped <tt>Authorizer</tt>(148)", "Delete TagElement: @param(149)", "Delete SimpleName: IllegalStateException(150)", "Delete TextElement:  if the underlying <code>Authorizer</code> does not implement the(151)", "Delete SimpleName: PermissionResolverAware(152)", "Delete TextElement:  PermissionResolverAware(153)", "Delete TagElement: @link(154)", "Delete TextElement:  interface, which ensures that the resolver can be registered.(155)", "Delete TagElement: @throws(156)", "Delete Javadoc(157)", "Delete Modifier: public(158)", "Delete PrimitiveType: void(159)", "Delete SimpleName: setPermissionResolver(160)", "Delete SimpleName: PermissionResolver(161)", "Delete SimpleType: PermissionResolver(162)", "Delete SimpleName: permissionResolver(163)", "Delete SingleVariableDeclaration(164)", "Delete SimpleName: Authorizer(165)", "Delete SimpleType: Authorizer(166)", "Delete SimpleName: authz(167)", "Delete SimpleName: getAuthorizer(168)", "Delete MethodInvocation(169)", "Delete VariableDeclarationFragment(170)", "Delete VariableDeclarationStatement(171)", "Delete SimpleName: authz(172)", "Delete SimpleName: PermissionResolverAware(173)", "Delete SimpleType: PermissionResolverAware(174)", "Delete InstanceofExpression(175)", "Delete SimpleName: PermissionResolverAware(176)", "Delete SimpleType: PermissionResolverAware(177)", "Delete SimpleName: authz(178)", "Delete CastExpression(179)", "Delete ParenthesizedExpression(180)", "Delete SimpleName: setPermissionResolver(181)", "Delete SimpleName: permissionResolver(182)", "Delete MethodInvocation(183)", "Delete ExpressionStatement(184)", "Delete Block(185)", "Delete SimpleName: String(186)", "Delete SimpleType: String(187)", "Delete SimpleName: msg(188)", "Delete StringLiteral: \"Underlying Authorizer instance does not implement the \"(189)", "Delete SimpleName: PermissionResolverAware(190)", "Delete SimpleType: PermissionResolverAware(191)", "Delete TypeLiteral(192)", "Delete SimpleName: getName(193)", "Delete MethodInvocation(194)", "Delete StringLiteral: \" interface.  This is required to support \"(195)", "Delete StringLiteral: \"passthrough configuration of a PermissionResolver.\"(196)", "Delete InfixExpression: +(197)", "Delete VariableDeclarationFragment(198)", "Delete VariableDeclarationStatement(199)", "Delete SimpleName: IllegalStateException(200)", "Delete SimpleType: IllegalStateException(201)", "Delete SimpleName: msg(202)", "Delete ClassInstanceCreation(203)", "Delete ThrowStatement(204)", "Delete Block(205)", "Delete IfStatement(206)", "Delete Block(207)", "Delete MethodDeclaration(208)"]}}, {"DefaultSecurityManager_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: SubjectContext to SimpleType: SubjectContext at 0", "INS SimpleType: SubjectContext to SingleVariableDeclaration at 0", "INS SimpleName: subjectContext to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS SimpleName: subjectContext to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1", "INS TextElement:  the subjectContext from where the sessionId was discovered to TagElement: @param at 1"]}, {"root": "UPDATE from  the session id that was discovered to be invalid (no session, expired, etc). to       the session id that was discovered to be invalid (no session, expired, etc).", "operations": ["UPD TextElement:  the session id that was discovered to be invalid (no session, expired, etc). from  the session id that was discovered to be invalid (no session, expired, etc). to       the session id that was discovered to be invalid (no session, expired, etc)."]}, {"root": "UPDATE from          the exception thrown upon encountering the invalid session id to               the exception thrown upon encountering the invalid session id", "operations": ["UPD TextElement:          the exception thrown upon encountering the invalid session id from          the exception thrown upon encountering the invalid session id to               the exception thrown upon encountering the invalid session id"]}, {"root": "INS SimpleName: context to MethodInvocation at 1", "operations": ["INS SimpleName: context to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.shiro.crypto.CipherService"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.Exception", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.IllegalArgumentException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.IllegalStateException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.String"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.SuppressWarnings", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.shiro.mgt.SecurityManager"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationStatement", "DEL ThisExpression", "DEL InfixExpression: +", "DEL ThrowStatement", "DEL StringLiteral: \"are only available when the underlying RememberMeManager implementation is a subclass of \"", "DEL SimpleName: AbstractRememberMeManager", "DEL SimpleType: AbstractRememberMeManager", "DEL IfStatement", "DEL SimpleType: AbstractRememberMeManager", "DEL FieldAccess", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleType: AbstractRememberMeManager", "DEL ParenthesizedExpression", "DEL StringLiteral: \"The convenience passthrough methods for setting remember me cipher attributes \"", "DEL SimpleName: AbstractRememberMeManager", "DEL FieldAccess", "DEL SimpleType: IllegalStateException", "DEL SimpleName: IllegalStateException", "DEL Block", "DEL SimpleName: msg", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: AbstractRememberMeManager", "DEL Modifier: private", "DEL SimpleName: rememberMeManager", "DEL CastExpression", "DEL InstanceofExpression", "DEL SimpleName: msg", "DEL ClassInstanceCreation", "DEL ThisExpression", "DEL SimpleName: getRememberMeManagerForCipherAttributes", "DEL SimpleName: AbstractRememberMeManager", "DEL StringLiteral: \".\"", "DEL SimpleType: AbstractRememberMeManager", "DEL ReturnStatement", "DEL PrefixExpression: !", "DEL SimpleType: String", "DEL SimpleName: rememberMeManager", "DEL InfixExpression: +", "DEL TypeLiteral", "DEL SimpleName: getName", "DEL MethodDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL SimpleName: setCipherService", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleType: CipherService", "DEL SimpleName: setRememberMeCipherService", "DEL SimpleName: cipherService", "DEL ExpressionStatement", "DEL SimpleName: CipherService", "DEL SimpleName: cipherService", "DEL Modifier: public", "DEL SimpleName: getRememberMeManagerForCipherAttributes"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL PrimitiveType: void", "DEL ArrayType: byte[]", "DEL PrimitiveType: byte", "DEL Modifier: public", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: bytes", "DEL MethodDeclaration", "DEL SimpleName: bytes", "DEL SimpleName: getRememberMeManagerForCipherAttributes", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: setRememberMeCipherKey", "DEL Dimension", "DEL SimpleName: setCipherKey"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: setCipherKeyHex", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL SimpleName: hex", "DEL Block", "DEL SimpleName: String", "DEL SimpleName: getRememberMeManagerForCipherAttributes", "DEL Modifier: public", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL SimpleName: hex", "DEL SimpleName: setRememberMeCipherKeyHex"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: String", "DEL SimpleName: base64", "DEL SimpleName: setCipherKeyBase64", "DEL SimpleName: base64", "DEL MethodInvocation", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: getRememberMeManagerForCipherAttributes", "DEL SimpleType: String", "DEL Block", "DEL Modifier: public", "DEL SimpleName: setRememberMeCipherKeyBase64", "DEL SingleVariableDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: bytes", "DEL MethodInvocation", "DEL Block", "DEL Modifier: public", "DEL SimpleName: setEncryptionCipherKey", "DEL ExpressionStatement", "DEL SimpleName: getRememberMeManagerForCipherAttributes", "DEL SimpleName: setRememberMeEncryptionCipherKey", "DEL PrimitiveType: byte", "DEL ArrayType: byte[]", "DEL SimpleName: bytes", "DEL PrimitiveType: void", "DEL Dimension"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL SimpleName: hex", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: setEncryptionCipherKeyHex", "DEL PrimitiveType: void", "DEL SimpleName: setRememberMeEncryptionCipherKeyHex", "DEL Modifier: public", "DEL SimpleName: getRememberMeManagerForCipherAttributes", "DEL MethodInvocation", "DEL SimpleName: hex", "DEL Block", "DEL MethodInvocation", "DEL SimpleType: String"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL SimpleName: setRememberMeEncryptionCipherKeyBase64", "DEL MethodInvocation", "DEL SimpleName: setEncryptionCipherKeyBase64", "DEL MethodInvocation", "DEL SimpleName: getRememberMeManagerForCipherAttributes", "DEL SimpleName: base64", "DEL PrimitiveType: void", "DEL SimpleName: String", "DEL Block", "DEL SimpleName: base64", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL Modifier: public", "DEL ExpressionStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL ArrayType: byte[]", "DEL SimpleName: bytes", "DEL PrimitiveType: byte", "DEL MethodDeclaration", "DEL SimpleName: setDecryptionCipherKey", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL SimpleName: getRememberMeManagerForCipherAttributes", "DEL Dimension", "DEL SimpleName: setRememberMeDecryptionCipherKey", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: bytes", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: String", "DEL SimpleName: setRememberMeDecryptionCipherKeyHex", "DEL Modifier: public", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL SimpleName: hex", "DEL SimpleName: getRememberMeManagerForCipherAttributes", "DEL Block", "DEL SimpleType: String", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: setDecryptionCipherKeyHex", "DEL SimpleName: hex"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL SimpleName: String", "DEL Modifier: public", "DEL SimpleName: base64", "DEL PrimitiveType: void", "DEL SimpleName: setDecryptionCipherKeyBase64", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SimpleName: setRememberMeDecryptionCipherKeyBase64", "DEL Block", "DEL SimpleName: getRememberMeManagerForCipherAttributes", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: base64", "DEL ExpressionStatement"]}]}}, {"DefaultSecurityManager_diff": {"operations": ["Insert SingleVariableDeclaration(1328) into MethodDeclaration(1338) at 4", "Insert TagElement: @param(1312) into Javadoc(1321) at 1", "Insert SimpleType: SubjectContext(1326) into SingleVariableDeclaration(1328) at 0", "Insert SimpleName: subjectContext(1327) into SingleVariableDeclaration(1328) at 1", "Insert SimpleName: subjectContext(1310) into TagElement: @param(1312) at 0", "Insert TextElement:  the subjectContext from where the sessionId was discovered(1311) into TagElement: @param(1312) at 1", "Update TextElement:  the session id that was discovered to be invalid (no session, expired, etc).(1520) to       the session id that was discovered to be invalid (no session, expired, etc).", "Update TextElement:          the exception thrown upon encountering the invalid session id(1523) to               the exception thrown upon encountering the invalid session id", "Insert SimpleName: SubjectContext(1325) into SimpleType: SubjectContext(1326) at 0", "Insert SimpleName: context(1167) into MethodInvocation(1170) at 1", "Delete QualifiedName: org.apache.shiro.crypto.CipherService(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.lang.Exception(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: java.lang.IllegalArgumentException(36)", "Delete ImportDeclaration(37)", "Delete QualifiedName: java.lang.IllegalStateException(38)", "Delete ImportDeclaration(39)", "Delete QualifiedName: java.lang.String(40)", "Delete ImportDeclaration(41)", "Delete QualifiedName: java.lang.SuppressWarnings(42)", "Delete ImportDeclaration(43)", "Delete QualifiedName: org.apache.shiro.mgt.SecurityManager(46)", "Delete ImportDeclaration(47)", "Delete Modifier: private(268)", "Delete SimpleName: AbstractRememberMeManager(269)", "Delete SimpleType: AbstractRememberMeManager(270)", "Delete SimpleName: getRememberMeManagerForCipherAttributes(271)", "Delete ThisExpression(272)", "Delete SimpleName: rememberMeManager(273)", "Delete FieldAccess(274)", "Delete SimpleName: AbstractRememberMeManager(275)", "Delete SimpleType: AbstractRememberMeManager(276)", "Delete InstanceofExpression(277)", "Delete ParenthesizedExpression(278)", "Delete PrefixExpression: !(279)", "Delete SimpleName: String(280)", "Delete SimpleType: String(281)", "Delete SimpleName: msg(282)", "Delete StringLiteral: \"The convenience passthrough methods for setting remember me cipher attributes \"(283)", "Delete StringLiteral: \"are only available when the underlying RememberMeManager implementation is a subclass of \"(284)", "Delete InfixExpression: +(285)", "Delete SimpleName: AbstractRememberMeManager(286)", "Delete SimpleType: AbstractRememberMeManager(287)", "Delete TypeLiteral(288)", "Delete SimpleName: getName(289)", "Delete MethodInvocation(290)", "Delete StringLiteral: \".\"(291)", "Delete InfixExpression: +(292)", "Delete VariableDeclarationFragment(293)", "Delete VariableDeclarationStatement(294)", "Delete SimpleName: IllegalStateException(295)", "Delete SimpleType: IllegalStateException(296)", "Delete SimpleName: msg(297)", "Delete ClassInstanceCreation(298)", "Delete ThrowStatement(299)", "Delete Block(300)", "Delete IfStatement(301)", "Delete SimpleName: AbstractRememberMeManager(302)", "Delete SimpleType: AbstractRememberMeManager(303)", "Delete ThisExpression(304)", "Delete SimpleName: rememberMeManager(305)", "Delete FieldAccess(306)", "Delete CastExpression(307)", "Delete ReturnStatement(308)", "Delete Block(309)", "Delete MethodDeclaration(310)", "Delete Modifier: public(311)", "Delete PrimitiveType: void(312)", "Delete SimpleName: setRememberMeCipherService(313)", "Delete SimpleName: CipherService(314)", "Delete SimpleType: CipherService(315)", "Delete SimpleName: cipherService(316)", "Delete SingleVariableDeclaration(317)", "Delete SimpleName: getRememberMeManagerForCipherAttributes(318)", "Delete MethodInvocation(319)", "Delete SimpleName: setCipherService(320)", "Delete SimpleName: cipherService(321)", "Delete MethodInvocation(322)", "Delete ExpressionStatement(323)", "Delete Block(324)", "Delete MethodDeclaration(325)", "Delete Modifier: public(326)", "Delete PrimitiveType: void(327)", "Delete SimpleName: setRememberMeCipherKey(328)", "Delete PrimitiveType: byte(329)", "Delete Dimension(330)", "Delete ArrayType: byte[](331)", "Delete SimpleName: bytes(332)", "Delete SingleVariableDeclaration(333)", "Delete SimpleName: getRememberMeManagerForCipherAttributes(334)", "Delete MethodInvocation(335)", "Delete SimpleName: setCipherKey(336)", "Delete SimpleName: bytes(337)", "Delete MethodInvocation(338)", "Delete ExpressionStatement(339)", "Delete Block(340)", "Delete MethodDeclaration(341)", "Delete Modifier: public(342)", "Delete PrimitiveType: void(343)", "Delete SimpleName: setRememberMeCipherKeyHex(344)", "Delete SimpleName: String(345)", "Delete SimpleType: String(346)", "Delete SimpleName: hex(347)", "Delete SingleVariableDeclaration(348)", "Delete SimpleName: getRememberMeManagerForCipherAttributes(349)", "Delete MethodInvocation(350)", "Delete SimpleName: setCipherKeyHex(351)", "Delete SimpleName: hex(352)", "Delete MethodInvocation(353)", "Delete ExpressionStatement(354)", "Delete Block(355)", "Delete MethodDeclaration(356)", "Delete Modifier: public(357)", "Delete PrimitiveType: void(358)", "Delete SimpleName: setRememberMeCipherKeyBase64(359)", "Delete SimpleName: String(360)", "Delete SimpleType: String(361)", "Delete SimpleName: base64(362)", "Delete SingleVariableDeclaration(363)", "Delete SimpleName: getRememberMeManagerForCipherAttributes(364)", "Delete MethodInvocation(365)", "Delete SimpleName: setCipherKeyBase64(366)", "Delete SimpleName: base64(367)", "Delete MethodInvocation(368)", "Delete ExpressionStatement(369)", "Delete Block(370)", "Delete MethodDeclaration(371)", "Delete Modifier: public(372)", "Delete PrimitiveType: void(373)", "Delete SimpleName: setRememberMeEncryptionCipherKey(374)", "Delete PrimitiveType: byte(375)", "Delete Dimension(376)", "Delete ArrayType: byte[](377)", "Delete SimpleName: bytes(378)", "Delete SingleVariableDeclaration(379)", "Delete SimpleName: getRememberMeManagerForCipherAttributes(380)", "Delete MethodInvocation(381)", "Delete SimpleName: setEncryptionCipherKey(382)", "Delete SimpleName: bytes(383)", "Delete MethodInvocation(384)", "Delete ExpressionStatement(385)", "Delete Block(386)", "Delete MethodDeclaration(387)", "Delete Modifier: public(388)", "Delete PrimitiveType: void(389)", "Delete SimpleName: setRememberMeEncryptionCipherKeyHex(390)", "Delete SimpleName: String(391)", "Delete SimpleType: String(392)", "Delete SimpleName: hex(393)", "Delete SingleVariableDeclaration(394)", "Delete SimpleName: getRememberMeManagerForCipherAttributes(395)", "Delete MethodInvocation(396)", "Delete SimpleName: setEncryptionCipherKeyHex(397)", "Delete SimpleName: hex(398)", "Delete MethodInvocation(399)", "Delete ExpressionStatement(400)", "Delete Block(401)", "Delete MethodDeclaration(402)", "Delete Modifier: public(403)", "Delete PrimitiveType: void(404)", "Delete SimpleName: setRememberMeEncryptionCipherKeyBase64(405)", "Delete SimpleName: String(406)", "Delete SimpleType: String(407)", "Delete SimpleName: base64(408)", "Delete SingleVariableDeclaration(409)", "Delete SimpleName: getRememberMeManagerForCipherAttributes(410)", "Delete MethodInvocation(411)", "Delete SimpleName: setEncryptionCipherKeyBase64(412)", "Delete SimpleName: base64(413)", "Delete MethodInvocation(414)", "Delete ExpressionStatement(415)", "Delete Block(416)", "Delete MethodDeclaration(417)", "Delete Modifier: public(418)", "Delete PrimitiveType: void(419)", "Delete SimpleName: setRememberMeDecryptionCipherKey(420)", "Delete PrimitiveType: byte(421)", "Delete Dimension(422)", "Delete ArrayType: byte[](423)", "Delete SimpleName: bytes(424)", "Delete SingleVariableDeclaration(425)", "Delete SimpleName: getRememberMeManagerForCipherAttributes(426)", "Delete MethodInvocation(427)", "Delete SimpleName: setDecryptionCipherKey(428)", "Delete SimpleName: bytes(429)", "Delete MethodInvocation(430)", "Delete ExpressionStatement(431)", "Delete Block(432)", "Delete MethodDeclaration(433)", "Delete Modifier: public(434)", "Delete PrimitiveType: void(435)", "Delete SimpleName: setRememberMeDecryptionCipherKeyHex(436)", "Delete SimpleName: String(437)", "Delete SimpleType: String(438)", "Delete SimpleName: hex(439)", "Delete SingleVariableDeclaration(440)", "Delete SimpleName: getRememberMeManagerForCipherAttributes(441)", "Delete MethodInvocation(442)", "Delete SimpleName: setDecryptionCipherKeyHex(443)", "Delete SimpleName: hex(444)", "Delete MethodInvocation(445)", "Delete ExpressionStatement(446)", "Delete Block(447)", "Delete MethodDeclaration(448)", "Delete Modifier: public(449)", "Delete PrimitiveType: void(450)", "Delete SimpleName: setRememberMeDecryptionCipherKeyBase64(451)", "Delete SimpleName: String(452)", "Delete SimpleType: String(453)", "Delete SimpleName: base64(454)", "Delete SingleVariableDeclaration(455)", "Delete SimpleName: getRememberMeManagerForCipherAttributes(456)", "Delete MethodInvocation(457)", "Delete SimpleName: setDecryptionCipherKeyBase64(458)", "Delete SimpleName: base64(459)", "Delete MethodInvocation(460)", "Delete ExpressionStatement(461)", "Delete Block(462)", "Delete MethodDeclaration(463)"]}}, {"RememberMeManager_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 4", "operations": ["INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: forgetIdentity to MethodDeclaration at 2", "INS TagElement: @link to TagElement: @param at 5", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @link to TagElement at 3", "INS QualifiedName: Subject.Builder to TagElement: @link at 0", "INS SimpleName: subjectContext to SingleVariableDeclaration at 1", "INS SimpleName: SubjectFactory to TagElement: @link at 0", "INS TextElement:  implementation. to TagElement at 4", "INS SimpleType: SubjectContext to SingleVariableDeclaration at 0", "INS TextElement: See the  to TagElement at 5", "INS MethodDeclaration to TypeDeclaration: interface at 4", "INS SimpleName: SubjectContext to SimpleType: SubjectContext at 0", "INS TagElement: @since to Javadoc at 2", "INS TagElement: @link to TagElement at 6", "INS TextElement:  1.0 to TagElement: @since at 0", "INS TextElement:  the contextual data, usually provided by a  to TagElement: @param at 1", "INS TextElement: is being used to construct a  to TagElement: @param at 4", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: subjectContext to TagElement: @param at 0", "INS TextElement: The context map is usually populated by a  to TagElement at 2", "INS TextElement:  instance. to TagElement: @param at 6", "INS TextElement:  class constants for Shiro's known map keys. to TagElement at 7", "INS QualifiedName: Subject.Builder to TagElement: @link at 0", "INS TagElement: @link to TagElement: @param at 2", "INS TextElement:  implementation, that to TagElement: @param at 3", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: Subject to TagElement: @link at 0", "INS TagElement to Javadoc at 0", "INS TextElement: Forgets any remembered identity corresponding to the subject context map being used to build a subject instance. to TagElement at 0", "INS TextElement: <p/> to TagElement at 1"]}]}}, {"RememberMeManager_diff": {"operations": ["Insert MethodDeclaration(92) into TypeDeclaration: interface(169) at 4", "Insert Javadoc(85) into MethodDeclaration(92) at 0", "Insert PrimitiveType: void(86) into MethodDeclaration(92) at 1", "Insert SimpleName: forgetIdentity(87) into MethodDeclaration(92) at 2", "Insert SingleVariableDeclaration(91) into MethodDeclaration(92) at 3", "Insert TagElement(72) into Javadoc(85) at 0", "Insert TagElement: @param(82) into Javadoc(85) at 1", "Insert TagElement: @since(84) into Javadoc(85) at 2", "Insert SimpleType: SubjectContext(89) into SingleVariableDeclaration(91) at 0", "Insert SimpleName: subjectContext(90) into SingleVariableDeclaration(91) at 1", "Insert TextElement: Forgets any remembered identity corresponding to the subject context map being used to build a subject instance.(62) into TagElement(72) at 0", "Insert TextElement: <p/>(63) into TagElement(72) at 1", "Insert TextElement: The context map is usually populated by a (64) into TagElement(72) at 2", "Insert TagElement: @link(66) into TagElement(72) at 3", "Insert TextElement:  implementation.(67) into TagElement(72) at 4", "Insert TextElement: See the (68) into TagElement(72) at 5", "Insert TagElement: @link(70) into TagElement(72) at 6", "Insert TextElement:  class constants for Shiro's known map keys.(71) into TagElement(72) at 7", "Insert SimpleName: subjectContext(73) into TagElement: @param(82) at 0", "Insert TextElement:  the contextual data, usually provided by a (74) into TagElement: @param(82) at 1", "Insert TagElement: @link(76) into TagElement: @param(82) at 2", "Insert TextElement:  implementation, that(77) into TagElement: @param(82) at 3", "Insert TextElement: is being used to construct a (78) into TagElement: @param(82) at 4", "Insert TagElement: @link(80) into TagElement: @param(82) at 5", "Insert TextElement:  instance.(81) into TagElement: @param(82) at 6", "Insert TextElement:  1.0(83) into TagElement: @since(84) at 0", "Insert SimpleName: SubjectContext(88) into SimpleType: SubjectContext(89) at 0", "Insert QualifiedName: Subject.Builder(65) into TagElement: @link(66) at 0", "Insert SimpleName: SubjectFactory(69) into TagElement: @link(70) at 0", "Insert QualifiedName: Subject.Builder(75) into TagElement: @link(76) at 0", "Insert SimpleName: Subject(79) into TagElement: @link(80) at 0"]}}, {"SecurityManagerAware_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.shiro.mgt", "DEL PackageDeclaration"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL MethodDeclaration", "DEL SimpleName: securityManager", "DEL TextElement:  if they require one.  This is mostly used by core", "DEL PrimitiveType: void", "DEL TextElement:  SecurityManager", "DEL TagElement: @link", "DEL TagElement: @link", "DEL QualifiedName: org.apache.shiro.mgt.SecurityManager", "DEL TextElement:  SecurityManager", "DEL TagElement: @since", "DEL TagElement: @code", "DEL TextElement: the ", "DEL SimpleName: securityManager", "DEL SimpleName: SecurityManager", "DEL TextElement:  the application's ", "DEL TextElement:  instance if it requires one.", "DEL SimpleType: SecurityManager", "DEL SimpleName: setSecurityManager", "DEL TextElement: implementation classes for framework code and is rarely necessary for software developers enabling Shiro in their", "DEL TagElement: @author", "DEL Modifier: public", "DEL SimpleName: SecurityManagerAware", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL TextElement: Callback method that allows a component to receive the", "DEL TagElement", "DEL TextElement:  Les Hazlewood", "DEL TextElement: Interface providing a callback method that allows an implementation of this interface to receive a reference to", "DEL QualifiedName: org.apache.shiro.mgt.SecurityManager", "DEL TextElement:  SecurityManager", "DEL TextElement:  1.0", "DEL TextElement: applications.", "DEL TypeDeclaration: interface", "DEL Javadoc", "DEL Javadoc", "DEL TagElement: @param"]}]}}, {"SecurityManagerAware_diff": {"operations": ["Delete QualifiedName: org.apache.shiro.mgt(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Interface providing a callback method that allows an implementation of this interface to receive a reference to(2)", "Delete TextElement: the (3)", "Delete QualifiedName: org.apache.shiro.mgt.SecurityManager(4)", "Delete TextElement:  SecurityManager(5)", "Delete TagElement: @link(6)", "Delete TextElement:  if they require one.  This is mostly used by core(7)", "Delete TextElement: implementation classes for framework code and is rarely necessary for software developers enabling Shiro in their(8)", "Delete TextElement: applications.(9)", "Delete TagElement(10)", "Delete TextElement:  Les Hazlewood(11)", "Delete TagElement: @author(12)", "Delete TextElement:  1.0(13)", "Delete TagElement: @since(14)", "Delete Javadoc(15)", "Delete Modifier: public(16)", "Delete SimpleName: SecurityManagerAware(17)", "Delete TextElement: Callback method that allows a component to receive the(18)", "Delete QualifiedName: org.apache.shiro.mgt.SecurityManager(19)", "Delete TextElement:  SecurityManager(20)", "Delete TagElement: @link(21)", "Delete TextElement:  instance if it requires one.(22)", "Delete TagElement(23)", "Delete SimpleName: securityManager(24)", "Delete TextElement:  the application's (25)", "Delete TextElement:  SecurityManager(26)", "Delete TagElement: @code(27)", "Delete TagElement: @param(28)", "Delete Javadoc(29)", "Delete PrimitiveType: void(30)", "Delete SimpleName: setSecurityManager(31)", "Delete SimpleName: SecurityManager(32)", "Delete SimpleType: SecurityManager(33)", "Delete SimpleName: securityManager(34)", "Delete SingleVariableDeclaration(35)", "Delete MethodDeclaration(36)", "Delete TypeDeclaration: interface(37)"]}}, {"SessionsSecurityManager_cluster": {"actions": [{"root": "UPDATE from org.apache.shiro.session.mgt to org.apache.shiro.session.mgt.DefaultSessionManager", "operations": ["UPD QualifiedName: org.apache.shiro.session.mgt from org.apache.shiro.session.mgt to org.apache.shiro.session.mgt.DefaultSessionManager"]}, {"root": "UPDATE from org.apache.shiro.session.mgt.eis.SessionDAO to org.apache.shiro.session.mgt.SessionManager", "operations": ["UPD QualifiedName: org.apache.shiro.session.mgt.eis.SessionDAO from org.apache.shiro.session.mgt.eis.SessionDAO to org.apache.shiro.session.mgt.SessionManager"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.shiro.session.SessionListener", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.shiro.session.SessionListenerRegistrar"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.shiro.session.mgt.eis.SessionDAOAware"]}, {"root": "DEL SimpleType: SessionListenerRegistrar", "operations": ["DEL SimpleType: SessionListenerRegistrar", "DEL SimpleName: SessionListenerRegistrar"]}, {"root": "DEL SimpleType: SessionFactoryAware", "operations": ["DEL SimpleName: SessionFactoryAware", "DEL SimpleType: SessionFactoryAware"]}, {"root": "DEL SimpleType: SessionDAOAware", "operations": ["DEL SimpleType: SessionDAOAware", "DEL SimpleName: SessionDAOAware"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: SessionFactoryAware", "DEL Block", "DEL SimpleType: IllegalArgumentException", "DEL SimpleType: SessionFactory", "DEL MethodInvocation", "DEL SimpleName: SessionFactory", "DEL SimpleName: setSessionFactory", "DEL SimpleName: String", "DEL ClassInstanceCreation", "DEL InstanceofExpression", "DEL ParenthesizedExpression", "DEL SimpleName: sessionFactory", "DEL VariableDeclarationFragment", "DEL SimpleName: sm", "DEL SimpleName: getSessionManager", "DEL TypeLiteral", "DEL IfStatement", "DEL CastExpression", "DEL Modifier: public", "DEL Block", "DEL SimpleName: SessionFactoryAware", "DEL SimpleName: sm", "DEL Block", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: SessionManager", "DEL PrimitiveType: void", "DEL SimpleType: SessionFactoryAware", "DEL SimpleType: SessionFactory", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SimpleName: sessionFactory", "DEL SimpleName: setSessionFactory", "DEL SimpleName: getName", "DEL MethodDeclaration", "DEL SimpleType: SessionManager", "DEL ExpressionStatement", "DEL SimpleName: IllegalArgumentException", "DEL TagElement: @since", "DEL SimpleName: SessionFactory", "DEL TextElement:  1.0", "DEL SimpleName: msg", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: SessionFactoryAware", "DEL InfixExpression: +", "DEL SimpleName: msg", "DEL StringLiteral: \"The underlying session manager is null or does not implement the \"", "DEL SimpleName: sm", "DEL VariableDeclarationStatement", "DEL ThrowStatement", "DEL MethodInvocation", "DEL StringLiteral: \" interface, which is required if the underlying \"", "DEL StringLiteral: \"instance is to receive the sessionFactory argument.\""]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL SimpleName: msg", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleType: SessionDAOAware", "DEL PrimitiveType: void", "DEL SimpleName: setSessionDAO", "DEL TagElement: @since", "DEL SimpleName: msg", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: sessionDAO", "DEL SimpleName: String", "DEL InstanceofExpression", "DEL SimpleName: SessionDAOAware", "DEL CastExpression", "DEL TextElement:  1.0", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleType: SessionDAOAware", "DEL SimpleName: getSessionManager", "DEL Block", "DEL SimpleType: String", "DEL TypeLiteral", "DEL SimpleName: SessionDAOAware", "DEL SimpleName: sm", "DEL SimpleType: SessionDAOAware", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL StringLiteral: \"The underlying SessionManager is null or does not implement the \"", "DEL InfixExpression: +", "DEL SimpleName: sm", "DEL SimpleType: SessionDAO", "DEL SimpleName: sm", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: getName", "DEL SimpleName: sessionDAO", "DEL SimpleName: setSessionDAO", "DEL StringLiteral: \" interface, which is required if it is \"", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: SessionDAOAware", "DEL SimpleName: SessionManager", "DEL VariableDeclarationStatement", "DEL SimpleType: SessionManager", "DEL ClassInstanceCreation", "DEL SimpleName: IllegalArgumentException", "DEL ThrowStatement", "DEL MethodInvocation", "DEL SimpleName: SessionDAO", "DEL StringLiteral: \"to receive the sessionDAO argument.\"", "DEL VariableDeclarationFragment"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: One notice however: The underlying SessionManager delegate must implement the", "DEL SimpleName: sessionListeners", "DEL SingleVariableDeclaration", "DEL SimpleName: sessionListeners", "DEL SimpleType: SessionListenerRegistrar", "DEL TextElement:  interface in order for these listeners to", "DEL ThisExpression", "DEL ParenthesizedExpression", "DEL TextElement: <p/>", "DEL Block", "DEL TagElement: @param", "DEL TextElement: will be thrown.", "DEL TextElement: <p/>", "DEL SimpleName: setSessionListeners", "DEL TagElement: @link", "DEL SimpleType: SessionListener", "DEL TextElement: <tt>SessionManager</tt> at startup.", "DEL SimpleType: Collection", "DEL TextElement: This is more convenient than having to configure your own SessionManager instance, inject the listeners on", "DEL SimpleName: Collection", "DEL SimpleName: SessionListenerRegistrar", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: SessionListener", "DEL SimpleName: setSessionListeners", "DEL TextElement: it, and then set that SessionManager instance as an attribute of this class.  Instead, you can just rely", "DEL TextElement:  the <tt>SessionListener</tt>s to register with the underlying delegate", "DEL ExpressionStatement", "DEL TextElement: This is a convenience method that allows registration of SessionListeners with the underlying delegate", "DEL Modifier: public", "DEL CastExpression", "DEL PrimitiveType: void", "DEL SimpleName: sessionManager", "DEL SimpleName: SessionListenerRegistrar", "DEL TextElement: be applied.  If it does not implement this interface, it is considered a configuration error and an exception", "DEL MethodInvocation", "DEL SimpleName: assertSessionListenerSupport", "DEL TextElement:  SessionListenerRegistrar", "DEL FieldAccess", "DEL TextElement: SessionManager at startup.", "DEL ParameterizedType: Collection<SessionListener>", "DEL TextElement: on the <tt>SecurityManager</tt> to apply these <tt>SessionListener</tt>s on your behalf.", "DEL SimpleName: sessionListeners", "DEL ExpressionStatement", "DEL Javadoc", "DEL TagElement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: sessionManager", "DEL SimpleName: requiredType", "DEL PrefixExpression: !", "DEL SimpleName: msg", "DEL StringLiteral: \"] class hierarchy.  \"", "DEL ThrowStatement", "DEL StringLiteral: \"underlying SessionManager instance is a part of the \"", "DEL SimpleName: requiredType", "DEL ClassInstanceCreation", "DEL SimpleName: getName", "DEL InfixExpression: +", "DEL SimpleName: assertSessionManager", "DEL MethodInvocation", "DEL FieldAccess", "DEL FieldAccess", "DEL StringLiteral: \"].  \"", "DEL SimpleName: getName", "DEL ThisExpression", "DEL ThrowStatement", "DEL SimpleName: String", "DEL ParameterizedType: Class<? extends SessionManager>", "DEL IfStatement", "DEL ThisExpression", "DEL SimpleName: isInstance", "DEL SimpleType: IllegalStateException", "DEL Block", "DEL WildcardType: ? extends SessionManager", "DEL StringLiteral: \"creation in a servlet container-backed session environment ('http' session mode).  If that is \"", "DEL Block", "DEL StringLiteral: \"SessionManager is null - cannot configure property!\"", "DEL FieldAccess", "DEL SimpleName: getClass", "DEL SimpleType: String", "DEL SimpleName: SessionManager", "DEL ThisExpression", "DEL InfixExpression: ==", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL SimpleName: IllegalStateException", "DEL StringLiteral: \"Property configuration failed.  The target property is only configurable when the \"", "DEL MethodDeclaration", "DEL PrimitiveType: void", "DEL VariableDeclarationFragment", "DEL SimpleName: msg", "DEL MethodInvocation", "DEL StringLiteral: \"[\"", "DEL SimpleType: Class", "DEL SimpleType: IllegalStateException", "DEL InfixExpression: +", "DEL ClassInstanceCreation", "DEL StringLiteral: \"This might occur for example if you're trying to set the validation interval or auto session \"", "DEL SimpleType: SessionManager", "DEL SimpleName: sessionManager", "DEL NullLiteral", "DEL StringLiteral: \"The current SessionManager is of type [\"", "DEL Block", "DEL StringLiteral: \"the case however, that property is only useful when using 'native' session mode and using \"", "DEL SimpleName: IllegalStateException", "DEL SimpleName: requiredType", "DEL SimpleName: Class", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: sessionManager", "DEL StringLiteral: \"Shiro enterprise sessions which do not rely on a servlet container.\"", "DEL MethodInvocation", "DEL ParenthesizedExpression"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ThisExpression", "DEL MethodDeclaration", "DEL TextElement:  if the underlying ", "DEL SimpleName: AbstractSessionManager", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: sessionManager", "DEL SimpleName: AbstractSessionManager", "DEL CastExpression", "DEL MethodInvocation", "DEL SimpleName: AbstractSessionManager", "DEL FieldAccess", "DEL TagElement: @code", "DEL SimpleName: AbstractSessionManager", "DEL ReturnStatement", "DEL TextElement: instance.  Please read the", "DEL TypeLiteral", "DEL TextElement:  AbstractSessionManager", "DEL SimpleType: AbstractSessionManager", "DEL TextElement: for more.", "DEL TagElement: @return", "DEL SimpleName: getGlobalSessionTimeout", "DEL TextElement:  Session", "DEL TextElement: .", "DEL TextElement: Passthrough configuration property to the underlying ", "DEL TagElement", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL TextElement:  the time in milliseconds that any ", "DEL SimpleName: getGlobalSessionTimeout", "DEL SimpleName: getGlobalSessionTimeout", "DEL TagElement: @link", "DEL SimpleType: AbstractSessionManager", "DEL MethodRef", "DEL TagElement: @link", "DEL MethodRef", "DEL SimpleName: getGlobalSessionTimeout", "DEL QualifiedName: org.apache.shiro.session.mgt.AbstractSessionManager", "DEL TagElement: @throws", "DEL SimpleName: Session", "DEL TextElement:  AbstractSessionManager.getGlobalSessionTimeout()", "DEL PrimitiveType: long", "DEL QualifiedName: org.apache.shiro.session.mgt.AbstractSessionManager", "DEL SimpleName: IllegalStateException", "DEL TagElement: @see", "DEL TextElement:  SessionManager", "DEL TagElement: @link", "DEL TagElement: @link", "DEL SimpleName: assertSessionManager", "DEL TextElement:  instance is not a subclass of", "DEL Modifier: public", "DEL TextElement:  AbstractSessionManager", "DEL Javadoc", "DEL TextElement:  may remain idle before expiring."]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement: @code", "DEL SimpleName: setGlobalSessionTimeout", "DEL SimpleName: setGlobalSessionTimeout", "DEL TextElement:  AbstractSessionManager.setGlobalSessionTimeout(long)", "DEL SimpleName: globalSessionTimeout", "DEL SimpleName: Session", "DEL TextElement:  SessionManager", "DEL TextElement:  may remain idle before expiring.", "DEL MethodInvocation", "DEL SimpleName: setGlobalSessionTimeout", "DEL TagElement", "DEL SimpleName: AbstractSessionManager", "DEL TagElement: @param", "DEL PrimitiveType: long", "DEL TextElement: for more.", "DEL Block", "DEL CastExpression", "DEL MethodDeclaration", "DEL QualifiedName: org.apache.shiro.session.mgt.AbstractSessionManager", "DEL QualifiedName: org.apache.shiro.session.mgt.AbstractSessionManager", "DEL MethodRefParameter", "DEL TagElement: @link", "DEL TextElement: .", "DEL TextElement: instance.  Please read the", "DEL TagElement: @link", "DEL SimpleName: AbstractSessionManager", "DEL QualifiedName: org.apache.shiro.session.mgt.AbstractSessionManager", "DEL Javadoc", "DEL TextElement:  AbstractSessionManager", "DEL PrimitiveType: long", "DEL SimpleName: assertSessionManager", "DEL SimpleName: globalSessionTimeout", "DEL ExpressionStatement", "DEL FieldAccess", "DEL ParenthesizedExpression", "DEL SimpleType: AbstractSessionManager", "DEL ThisExpression", "DEL TextElement:  Session", "DEL TagElement: @see", "DEL MethodRef", "DEL TextElement:  instance is not a subclass of", "DEL TextElement:  AbstractSessionManager", "DEL PrimitiveType: long", "DEL SingleVariableDeclaration", "DEL MethodRefParameter", "DEL PrimitiveType: void", "DEL TextElement:  if the underlying ", "DEL MethodInvocation", "DEL SimpleName: AbstractSessionManager", "DEL SimpleName: sessionManager", "DEL TagElement: @throws", "DEL TextElement: Passthrough configuration property to the underlying ", "DEL SimpleName: globalSessionTimeout", "DEL Modifier: public", "DEL SimpleType: AbstractSessionManager", "DEL ExpressionStatement", "DEL TagElement: @link", "DEL TextElement:  the time in milliseconds that any ", "DEL TypeLiteral", "DEL MethodRef", "DEL SimpleName: IllegalStateException", "DEL SimpleName: setGlobalSessionTimeout", "DEL TagElement: @link"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: getName", "DEL StringLiteral: \"session notifications.\"", "DEL ThrowStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: assertSessionListenerSupport", "DEL TagElement: @throws", "DEL PrimitiveType: void", "DEL SimpleName: sessionManager", "DEL TextElement: Ensures the internal SessionManager instance is an <code>instanceof</code>", "DEL MethodDeclaration", "DEL FieldAccess", "DEL MethodInvocation", "DEL StringLiteral: \"type [\"", "DEL MethodInvocation", "DEL TagElement: @link", "DEL SimpleType: SessionListenerRegistrar", "DEL SimpleName: IllegalStateException", "DEL QualifiedName: org.apache.shiro.session.SessionListenerRegistrar", "DEL TextElement:  to ensure that any", "DEL SimpleName: msg", "DEL SimpleType: SessionListenerRegistrar", "DEL TextElement: listeners attempting to be registered can actually do so with the internal delegate instance.", "DEL ThisExpression", "DEL TypeLiteral", "DEL SimpleName: IllegalStateException", "DEL SimpleName: SessionListenerRegistrar", "DEL StringLiteral: \"] does not implement the \"", "DEL SimpleName: IllegalStateException", "DEL SimpleType: String", "DEL SimpleName: SessionListenerRegistrar", "DEL SimpleName: getName", "DEL SimpleType: IllegalStateException", "DEL Block", "DEL ParenthesizedExpression", "DEL InfixExpression: +", "DEL PrefixExpression: !", "DEL SimpleType: IllegalStateException", "DEL TagElement", "DEL IfStatement", "DEL InfixExpression: +", "DEL SimpleName: sessionManager", "DEL SimpleName: String", "DEL Javadoc", "DEL TextElement:  if the internal delegate SessionManager instance does not implement the", "DEL StringLiteral: \" interface and therefore cannot support \"", "DEL Block", "DEL VariableDeclarationStatement", "DEL TextElement:  SessionListenerRegistrar", "DEL SimpleName: getClass", "DEL Modifier: private", "DEL ClassInstanceCreation", "DEL TextElement: <code>SessionListenerRegistrar</code> interface.", "DEL SimpleName: msg", "DEL StringLiteral: \"SessionListener registration failed:  The underlying SessionManager instance of \"", "DEL InstanceofExpression", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement: @link", "DEL TagElement: @param", "DEL Javadoc", "DEL MethodRef", "DEL ParenthesizedExpression", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL CastExpression", "DEL SimpleName: assertSessionListenerSupport", "DEL SimpleType: SessionListener", "DEL SimpleName: SessionListenerRegistrar", "DEL SimpleName: add", "DEL TextElement:  the listener to the", "DEL MemberRef", "DEL TextElement:  and then", "DEL SimpleName: assertSessionListenerSupport", "DEL TextElement:  adds", "DEL Block", "DEL TextElement: delegate instance.", "DEL TextElement: Asserts the internal delegate <code>SessionManager</code> instance", "DEL TextElement:  the <code>SessionListener</code> to register for session events.", "DEL SimpleName: listener", "DEL SimpleName: sessionManager", "DEL MethodInvocation", "DEL SimpleName: add", "DEL SimpleName: listener", "DEL TagElement: @link", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TextElement:  supports session listener registration", "DEL SimpleName: add", "DEL SimpleType: SessionListenerRegistrar", "DEL Modifier: public", "DEL ThisExpression", "DEL TagElement", "DEL PrimitiveType: void", "DEL SimpleName: SessionListenerRegistrar", "DEL SimpleName: listener", "DEL FieldAccess", "DEL SimpleName: SessionListener"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Javadoc", "DEL TagElement: @link", "DEL TextElement:  the listener to remove that no longer wishes to be notified of session events.", "DEL SimpleType: SessionListener", "DEL InstanceofExpression", "DEL TextElement: instance, <code>false</code> otherwise.", "DEL FieldAccess", "DEL CastExpression", "DEL SimpleName: listener", "DEL SimpleName: remove", "DEL SingleVariableDeclaration", "DEL SimpleType: SessionListenerRegistrar", "DEL SimpleName: sessionManager", "DEL SimpleName: SessionListenerRegistrar", "DEL Modifier: public", "DEL PrimitiveType: boolean", "DEL Block", "DEL ThisExpression", "DEL TextElement:  instance.", "DEL SimpleName: sessionManager", "DEL SimpleType: SessionListenerRegistrar", "DEL TagElement: @param", "DEL InfixExpression: &&", "DEL MethodDeclaration", "DEL SimpleName: listener", "DEL FieldAccess", "DEL ParenthesizedExpression", "DEL TextElement: Removes the specified listener from receiving session events from the internal delegate", "DEL TagElement: @return", "DEL MethodInvocation", "DEL SimpleName: SessionListenerRegistrar", "DEL ThisExpression", "DEL SimpleName: remove", "DEL QualifiedName: org.apache.shiro.session.mgt.SessionManager", "DEL ReturnStatement", "DEL SimpleName: SessionListener", "DEL ParenthesizedExpression", "DEL SimpleName: listener", "DEL TagElement", "DEL TextElement:  <code>true</code> if the listener was removed from the internal delegate <code>SessionManager</code>"]}]}}, {"SessionsSecurityManager_diff": {"operations": ["Update QualifiedName: org.apache.shiro.session.mgt(14) to org.apache.shiro.session.mgt.DefaultSessionManager", "Update QualifiedName: org.apache.shiro.session.mgt.eis.SessionDAO(16) to org.apache.shiro.session.mgt.SessionManager", "Delete QualifiedName: org.apache.shiro.session.SessionListener(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: org.apache.shiro.session.SessionListenerRegistrar(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: org.apache.shiro.session.mgt.eis.SessionDAOAware(18)", "Delete ImportDeclaration(19)", "Delete SimpleName: SessionListenerRegistrar(70)", "Delete SimpleType: SessionListenerRegistrar(71)", "Delete SimpleName: SessionFactoryAware(72)", "Delete SimpleType: SessionFactoryAware(73)", "Delete SimpleName: SessionDAOAware(74)", "Delete SimpleType: SessionDAOAware(75)", "Delete TextElement:  1.0(213)", "Delete TagElement: @since(214)", "Delete Javadoc(215)", "Delete Modifier: public(216)", "Delete PrimitiveType: void(217)", "Delete SimpleName: setSessionFactory(218)", "Delete SimpleName: SessionFactory(219)", "Delete SimpleType: SessionFactory(220)", "Delete SimpleName: sessionFactory(221)", "Delete SingleVariableDeclaration(222)", "Delete SimpleName: SessionManager(223)", "Delete SimpleType: SessionManager(224)", "Delete SimpleName: sm(225)", "Delete SimpleName: getSessionManager(226)", "Delete MethodInvocation(227)", "Delete VariableDeclarationFragment(228)", "Delete VariableDeclarationStatement(229)", "Delete SimpleName: sm(230)", "Delete SimpleName: SessionFactoryAware(231)", "Delete SimpleType: SessionFactoryAware(232)", "Delete InstanceofExpression(233)", "Delete SimpleName: SessionFactoryAware(234)", "Delete SimpleType: SessionFactoryAware(235)", "Delete SimpleName: sm(236)", "Delete CastExpression(237)", "Delete ParenthesizedExpression(238)", "Delete SimpleName: setSessionFactory(239)", "Delete SimpleName: sessionFactory(240)", "Delete MethodInvocation(241)", "Delete ExpressionStatement(242)", "Delete Block(243)", "Delete SimpleName: String(244)", "Delete SimpleType: String(245)", "Delete SimpleName: msg(246)", "Delete StringLiteral: \"The underlying session manager is null or does not implement the \"(247)", "Delete SimpleName: SessionFactory(248)", "Delete SimpleType: SessionFactory(249)", "Delete TypeLiteral(250)", "Delete SimpleName: getName(251)", "Delete MethodInvocation(252)", "Delete StringLiteral: \" interface, which is required if the underlying \"(253)", "Delete StringLiteral: \"instance is to receive the sessionFactory argument.\"(254)", "Delete InfixExpression: +(255)", "Delete VariableDeclarationFragment(256)", "Delete VariableDeclarationStatement(257)", "Delete SimpleName: IllegalArgumentException(258)", "Delete SimpleType: IllegalArgumentException(259)", "Delete SimpleName: msg(260)", "Delete ClassInstanceCreation(261)", "Delete ThrowStatement(262)", "Delete Block(263)", "Delete IfStatement(264)", "Delete Block(265)", "Delete MethodDeclaration(266)", "Delete TextElement:  1.0(267)", "Delete TagElement: @since(268)", "Delete Javadoc(269)", "Delete Modifier: public(270)", "Delete PrimitiveType: void(271)", "Delete SimpleName: setSessionDAO(272)", "Delete SimpleName: SessionDAO(273)", "Delete SimpleType: SessionDAO(274)", "Delete SimpleName: sessionDAO(275)", "Delete SingleVariableDeclaration(276)", "Delete SimpleName: SessionManager(277)", "Delete SimpleType: SessionManager(278)", "Delete SimpleName: sm(279)", "Delete SimpleName: getSessionManager(280)", "Delete MethodInvocation(281)", "Delete VariableDeclarationFragment(282)", "Delete VariableDeclarationStatement(283)", "Delete SimpleName: sm(284)", "Delete SimpleName: SessionDAOAware(285)", "Delete SimpleType: SessionDAOAware(286)", "Delete InstanceofExpression(287)", "Delete SimpleName: SessionDAOAware(288)", "Delete SimpleType: SessionDAOAware(289)", "Delete SimpleName: sm(290)", "Delete CastExpression(291)", "Delete ParenthesizedExpression(292)", "Delete SimpleName: setSessionDAO(293)", "Delete SimpleName: sessionDAO(294)", "Delete MethodInvocation(295)", "Delete ExpressionStatement(296)", "Delete Block(297)", "Delete SimpleName: String(298)", "Delete SimpleType: String(299)", "Delete SimpleName: msg(300)", "Delete StringLiteral: \"The underlying SessionManager is null or does not implement the \"(301)", "Delete SimpleName: SessionDAOAware(302)", "Delete SimpleType: SessionDAOAware(303)", "Delete TypeLiteral(304)", "Delete SimpleName: getName(305)", "Delete MethodInvocation(306)", "Delete StringLiteral: \" interface, which is required if it is \"(307)", "Delete StringLiteral: \"to receive the sessionDAO argument.\"(308)", "Delete InfixExpression: +(309)", "Delete VariableDeclarationFragment(310)", "Delete VariableDeclarationStatement(311)", "Delete SimpleName: IllegalArgumentException(312)", "Delete SimpleType: IllegalArgumentException(313)", "Delete SimpleName: msg(314)", "Delete ClassInstanceCreation(315)", "Delete ThrowStatement(316)", "Delete Block(317)", "Delete IfStatement(318)", "Delete Block(319)", "Delete MethodDeclaration(320)", "Delete TextElement: This is a convenience method that allows registration of SessionListeners with the underlying delegate(361)", "Delete TextElement: SessionManager at startup.(362)", "Delete TextElement: <p/>(363)", "Delete TextElement: This is more convenient than having to configure your own SessionManager instance, inject the listeners on(364)", "Delete TextElement: it, and then set that SessionManager instance as an attribute of this class.  Instead, you can just rely(365)", "Delete TextElement: on the <tt>SecurityManager</tt> to apply these <tt>SessionListener</tt>s on your behalf.(366)", "Delete TextElement: <p/>(367)", "Delete TextElement: One notice however: The underlying SessionManager delegate must implement the(368)", "Delete SimpleName: SessionListenerRegistrar(369)", "Delete TextElement:  SessionListenerRegistrar(370)", "Delete TagElement: @link(371)", "Delete TextElement:  interface in order for these listeners to(372)", "Delete TextElement: be applied.  If it does not implement this interface, it is considered a configuration error and an exception(373)", "Delete TextElement: will be thrown.(374)", "Delete TagElement(375)", "Delete SimpleName: sessionListeners(376)", "Delete TextElement:  the <tt>SessionListener</tt>s to register with the underlying delegate(377)", "Delete TextElement: <tt>SessionManager</tt> at startup.(378)", "Delete TagElement: @param(379)", "Delete Javadoc(380)", "Delete Modifier: public(381)", "Delete PrimitiveType: void(382)", "Delete SimpleName: setSessionListeners(383)", "Delete SimpleName: Collection(384)", "Delete SimpleType: Collection(385)", "Delete SimpleName: SessionListener(386)", "Delete SimpleType: SessionListener(387)", "Delete ParameterizedType: Collection<SessionListener>(388)", "Delete SimpleName: sessionListeners(389)", "Delete SingleVariableDeclaration(390)", "Delete SimpleName: assertSessionListenerSupport(391)", "Delete MethodInvocation(392)", "Delete ExpressionStatement(393)", "Delete SimpleName: SessionListenerRegistrar(394)", "Delete SimpleType: SessionListenerRegistrar(395)", "Delete ThisExpression(396)", "Delete SimpleName: sessionManager(397)", "Delete FieldAccess(398)", "Delete CastExpression(399)", "Delete ParenthesizedExpression(400)", "Delete SimpleName: setSessionListeners(401)", "Delete SimpleName: sessionListeners(402)", "Delete MethodInvocation(403)", "Delete ExpressionStatement(404)", "Delete Block(405)", "Delete MethodDeclaration(406)", "Delete Modifier: private(407)", "Delete PrimitiveType: void(408)", "Delete SimpleName: assertSessionManager(409)", "Delete SimpleName: Class(410)", "Delete SimpleType: Class(411)", "Delete SimpleName: SessionManager(412)", "Delete SimpleType: SessionManager(413)", "Delete WildcardType: ? extends SessionManager(414)", "Delete ParameterizedType: Class<? extends SessionManager>(415)", "Delete SimpleName: requiredType(416)", "Delete SingleVariableDeclaration(417)", "Delete ThisExpression(418)", "Delete SimpleName: sessionManager(419)", "Delete FieldAccess(420)", "Delete NullLiteral(421)", "Delete InfixExpression: ==(422)", "Delete SimpleName: IllegalStateException(423)", "Delete SimpleType: IllegalStateException(424)", "Delete StringLiteral: \"SessionManager is null - cannot configure property!\"(425)", "Delete ClassInstanceCreation(426)", "Delete ThrowStatement(427)", "Delete Block(428)", "Delete IfStatement(429)", "Delete SimpleName: requiredType(430)", "Delete SimpleName: isInstance(431)", "Delete ThisExpression(432)", "Delete SimpleName: sessionManager(433)", "Delete FieldAccess(434)", "Delete MethodInvocation(435)", "Delete ParenthesizedExpression(436)", "Delete PrefixExpression: !(437)", "Delete SimpleName: String(438)", "Delete SimpleType: String(439)", "Delete SimpleName: msg(440)", "Delete StringLiteral: \"Property configuration failed.  The target property is only configurable when the \"(441)", "Delete StringLiteral: \"underlying SessionManager instance is a part of the \"(442)", "Delete StringLiteral: \"[\"(443)", "Delete InfixExpression: +(444)", "Delete SimpleName: requiredType(445)", "Delete SimpleName: getName(446)", "Delete MethodInvocation(447)", "Delete StringLiteral: \"] class hierarchy.  \"(448)", "Delete StringLiteral: \"The current SessionManager is of type [\"(449)", "Delete ThisExpression(450)", "Delete SimpleName: sessionManager(451)", "Delete FieldAccess(452)", "Delete SimpleName: getClass(453)", "Delete MethodInvocation(454)", "Delete SimpleName: getName(455)", "Delete MethodInvocation(456)", "Delete StringLiteral: \"].  \"(457)", "Delete StringLiteral: \"This might occur for example if you're trying to set the validation interval or auto session \"(458)", "Delete StringLiteral: \"creation in a servlet container-backed session environment ('http' session mode).  If that is \"(459)", "Delete StringLiteral: \"the case however, that property is only useful when using 'native' session mode and using \"(460)", "Delete StringLiteral: \"Shiro enterprise sessions which do not rely on a servlet container.\"(461)", "Delete InfixExpression: +(462)", "Delete VariableDeclarationFragment(463)", "Delete VariableDeclarationStatement(464)", "Delete SimpleName: IllegalStateException(465)", "Delete SimpleType: IllegalStateException(466)", "Delete SimpleName: msg(467)", "Delete ClassInstanceCreation(468)", "Delete ThrowStatement(469)", "Delete Block(470)", "Delete IfStatement(471)", "Delete Block(472)", "Delete MethodDeclaration(473)", "Delete TextElement: Passthrough configuration property to the underlying (474)", "Delete SimpleName: AbstractSessionManager(475)", "Delete TextElement:  AbstractSessionManager(476)", "Delete TagElement: @link(477)", "Delete TextElement: instance.  Please read the(478)", "Delete QualifiedName: org.apache.shiro.session.mgt.AbstractSessionManager(479)", "Delete SimpleName: getGlobalSessionTimeout(480)", "Delete MethodRef(481)", "Delete TextElement:  AbstractSessionManager.getGlobalSessionTimeout()(482)", "Delete TagElement: @link(483)", "Delete TextElement: for more.(484)", "Delete TagElement(485)", "Delete TextElement:  the time in milliseconds that any (486)", "Delete SimpleName: Session(487)", "Delete TextElement:  Session(488)", "Delete TagElement: @link(489)", "Delete TextElement:  may remain idle before expiring.(490)", "Delete TagElement: @return(491)", "Delete SimpleName: IllegalStateException(492)", "Delete TextElement:  if the underlying (493)", "Delete TextElement:  SessionManager(494)", "Delete TagElement: @code(495)", "Delete TextElement:  instance is not a subclass of(496)", "Delete SimpleName: AbstractSessionManager(497)", "Delete TextElement:  AbstractSessionManager(498)", "Delete TagElement: @link(499)", "Delete TextElement: .(500)", "Delete TagElement: @throws(501)", "Delete QualifiedName: org.apache.shiro.session.mgt.AbstractSessionManager(502)", "Delete SimpleName: getGlobalSessionTimeout(503)", "Delete MethodRef(504)", "Delete TagElement: @see(505)", "Delete Javadoc(506)", "Delete Modifier: public(507)", "Delete PrimitiveType: long(508)", "Delete SimpleName: getGlobalSessionTimeout(509)", "Delete SimpleName: assertSessionManager(510)", "Delete SimpleName: AbstractSessionManager(511)", "Delete SimpleType: AbstractSessionManager(512)", "Delete TypeLiteral(513)", "Delete MethodInvocation(514)", "Delete ExpressionStatement(515)", "Delete SimpleName: AbstractSessionManager(516)", "Delete SimpleType: AbstractSessionManager(517)", "Delete ThisExpression(518)", "Delete SimpleName: sessionManager(519)", "Delete FieldAccess(520)", "Delete CastExpression(521)", "Delete ParenthesizedExpression(522)", "Delete SimpleName: getGlobalSessionTimeout(523)", "Delete MethodInvocation(524)", "Delete ReturnStatement(525)", "Delete Block(526)", "Delete MethodDeclaration(527)", "Delete TextElement: Passthrough configuration property to the underlying (528)", "Delete SimpleName: AbstractSessionManager(529)", "Delete TextElement:  AbstractSessionManager(530)", "Delete TagElement: @link(531)", "Delete TextElement: instance.  Please read the(532)", "Delete QualifiedName: org.apache.shiro.session.mgt.AbstractSessionManager(533)", "Delete SimpleName: setGlobalSessionTimeout(534)", "Delete PrimitiveType: long(535)", "Delete MethodRefParameter(536)", "Delete MethodRef(537)", "Delete TextElement:  AbstractSessionManager.setGlobalSessionTimeout(long)(538)", "Delete TagElement: @link(539)", "Delete TextElement: for more.(540)", "Delete TagElement(541)", "Delete SimpleName: globalSessionTimeout(542)", "Delete TextElement:  the time in milliseconds that any (543)", "Delete SimpleName: Session(544)", "Delete TextElement:  Session(545)", "Delete TagElement: @link(546)", "Delete TextElement:  may remain idle before expiring.(547)", "Delete TagElement: @param(548)", "Delete SimpleName: IllegalStateException(549)", "Delete TextElement:  if the underlying (550)", "Delete TextElement:  SessionManager(551)", "Delete TagElement: @code(552)", "Delete TextElement:  instance is not a subclass of(553)", "Delete QualifiedName: org.apache.shiro.session.mgt.AbstractSessionManager(554)", "Delete TextElement:  AbstractSessionManager(555)", "Delete TagElement: @link(556)", "Delete TextElement: .(557)", "Delete TagElement: @throws(558)", "Delete QualifiedName: org.apache.shiro.session.mgt.AbstractSessionManager(559)", "Delete SimpleName: setGlobalSessionTimeout(560)", "Delete PrimitiveType: long(561)", "Delete MethodRefParameter(562)", "Delete MethodRef(563)", "Delete TagElement: @see(564)", "Delete Javadoc(565)", "Delete Modifier: public(566)", "Delete PrimitiveType: void(567)", "Delete SimpleName: setGlobalSessionTimeout(568)", "Delete PrimitiveType: long(569)", "Delete SimpleName: globalSessionTimeout(570)", "Delete SingleVariableDeclaration(571)", "Delete SimpleName: assertSessionManager(572)", "Delete SimpleName: AbstractSessionManager(573)", "Delete SimpleType: AbstractSessionManager(574)", "Delete TypeLiteral(575)", "Delete MethodInvocation(576)", "Delete ExpressionStatement(577)", "Delete SimpleName: AbstractSessionManager(578)", "Delete SimpleType: AbstractSessionManager(579)", "Delete ThisExpression(580)", "Delete SimpleName: sessionManager(581)", "Delete FieldAccess(582)", "Delete CastExpression(583)", "Delete ParenthesizedExpression(584)", "Delete SimpleName: setGlobalSessionTimeout(585)", "Delete SimpleName: globalSessionTimeout(586)", "Delete MethodInvocation(587)", "Delete ExpressionStatement(588)", "Delete Block(589)", "Delete MethodDeclaration(590)", "Delete TextElement: Ensures the internal SessionManager instance is an <code>instanceof</code>(591)", "Delete QualifiedName: org.apache.shiro.session.SessionListenerRegistrar(592)", "Delete TextElement:  SessionListenerRegistrar(593)", "Delete TagElement: @link(594)", "Delete TextElement:  to ensure that any(595)", "Delete TextElement: listeners attempting to be registered can actually do so with the internal delegate instance.(596)", "Delete TagElement(597)", "Delete SimpleName: IllegalStateException(598)", "Delete TextElement:  if the internal delegate SessionManager instance does not implement the(599)", "Delete TextElement: <code>SessionListenerRegistrar</code> interface.(600)", "Delete TagElement: @throws(601)", "Delete Javadoc(602)", "Delete Modifier: private(603)", "Delete PrimitiveType: void(604)", "Delete SimpleName: assertSessionListenerSupport(605)", "Delete SimpleName: IllegalStateException(606)", "Delete SimpleType: IllegalStateException(607)", "Delete ThisExpression(608)", "Delete SimpleName: sessionManager(609)", "Delete FieldAccess(610)", "Delete SimpleName: SessionListenerRegistrar(611)", "Delete SimpleType: SessionListenerRegistrar(612)", "Delete InstanceofExpression(613)", "Delete ParenthesizedExpression(614)", "Delete PrefixExpression: !(615)", "Delete SimpleName: String(616)", "Delete SimpleType: String(617)", "Delete SimpleName: msg(618)", "Delete StringLiteral: \"SessionListener registration failed:  The underlying SessionManager instance of \"(619)", "Delete StringLiteral: \"type [\"(620)", "Delete InfixExpression: +(621)", "Delete SimpleName: sessionManager(622)", "Delete SimpleName: getClass(623)", "Delete MethodInvocation(624)", "Delete SimpleName: getName(625)", "Delete MethodInvocation(626)", "Delete StringLiteral: \"] does not implement the \"(627)", "Delete SimpleName: SessionListenerRegistrar(628)", "Delete SimpleType: SessionListenerRegistrar(629)", "Delete TypeLiteral(630)", "Delete SimpleName: getName(631)", "Delete MethodInvocation(632)", "Delete StringLiteral: \" interface and therefore cannot support \"(633)", "Delete StringLiteral: \"session notifications.\"(634)", "Delete InfixExpression: +(635)", "Delete VariableDeclarationFragment(636)", "Delete VariableDeclarationStatement(637)", "Delete SimpleName: IllegalStateException(638)", "Delete SimpleType: IllegalStateException(639)", "Delete SimpleName: msg(640)", "Delete ClassInstanceCreation(641)", "Delete ThrowStatement(642)", "Delete Block(643)", "Delete IfStatement(644)", "Delete Block(645)", "Delete MethodDeclaration(646)", "Delete TextElement: Asserts the internal delegate <code>SessionManager</code> instance(647)", "Delete SimpleName: assertSessionListenerSupport(648)", "Delete MethodRef(649)", "Delete TextElement:  supports session listener registration(650)", "Delete TagElement: @link(651)", "Delete TextElement:  and then(652)", "Delete SimpleName: SessionListenerRegistrar(653)", "Delete SimpleName: add(654)", "Delete MemberRef(655)", "Delete TextElement:  adds(656)", "Delete TagElement: @link(657)", "Delete TextElement:  the listener to the(658)", "Delete TextElement: delegate instance.(659)", "Delete TagElement(660)", "Delete SimpleName: listener(661)", "Delete TextElement:  the <code>SessionListener</code> to register for session events.(662)", "Delete TagElement: @param(663)", "Delete Javadoc(664)", "Delete Modifier: public(665)", "Delete PrimitiveType: void(666)", "Delete SimpleName: add(667)", "Delete SimpleName: SessionListener(668)", "Delete SimpleType: SessionListener(669)", "Delete SimpleName: listener(670)", "Delete SingleVariableDeclaration(671)", "Delete SimpleName: assertSessionListenerSupport(672)", "Delete MethodInvocation(673)", "Delete ExpressionStatement(674)", "Delete SimpleName: SessionListenerRegistrar(675)", "Delete SimpleType: SessionListenerRegistrar(676)", "Delete ThisExpression(677)", "Delete SimpleName: sessionManager(678)", "Delete FieldAccess(679)", "Delete CastExpression(680)", "Delete ParenthesizedExpression(681)", "Delete SimpleName: add(682)", "Delete SimpleName: listener(683)", "Delete MethodInvocation(684)", "Delete ExpressionStatement(685)", "Delete Block(686)", "Delete MethodDeclaration(687)", "Delete TextElement: Removes the specified listener from receiving session events from the internal delegate(688)", "Delete QualifiedName: org.apache.shiro.session.mgt.SessionManager(689)", "Delete TagElement: @link(690)", "Delete TextElement:  instance.(691)", "Delete TagElement(692)", "Delete SimpleName: listener(693)", "Delete TextElement:  the listener to remove that no longer wishes to be notified of session events.(694)", "Delete TagElement: @param(695)", "Delete TextElement:  <code>true</code> if the listener was removed from the internal delegate <code>SessionManager</code>(696)", "Delete TextElement: instance, <code>false</code> otherwise.(697)", "Delete TagElement: @return(698)", "Delete Javadoc(699)", "Delete Modifier: public(700)", "Delete PrimitiveType: boolean(701)", "Delete SimpleName: remove(702)", "Delete SimpleName: SessionListener(703)", "Delete SimpleType: SessionListener(704)", "Delete SimpleName: listener(705)", "Delete SingleVariableDeclaration(706)", "Delete ThisExpression(707)", "Delete SimpleName: sessionManager(708)", "Delete FieldAccess(709)", "Delete SimpleName: SessionListenerRegistrar(710)", "Delete SimpleType: SessionListenerRegistrar(711)", "Delete InstanceofExpression(712)", "Delete ParenthesizedExpression(713)", "Delete SimpleName: SessionListenerRegistrar(714)", "Delete SimpleType: SessionListenerRegistrar(715)", "Delete ThisExpression(716)", "Delete SimpleName: sessionManager(717)", "Delete FieldAccess(718)", "Delete CastExpression(719)", "Delete ParenthesizedExpression(720)", "Delete SimpleName: remove(721)", "Delete SimpleName: listener(722)", "Delete MethodInvocation(723)", "Delete InfixExpression: &&(724)", "Delete ReturnStatement(725)", "Delete Block(726)", "Delete MethodDeclaration(727)"]}}, {"AuthorizingRealm_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 25", "MOV ImportDeclaration to CompilationUnit at 24", "MOV ImportDeclaration to CompilationUnit at 21"]}, {"root": "UPDATE from org.apache.shiro.authz.AuthorizationInfo to org.apache.shiro.authz", "operations": ["UPD QualifiedName: org.apache.shiro.authz.AuthorizationInfo from org.apache.shiro.authz.AuthorizationInfo to org.apache.shiro.authz"]}, {"root": "UPDATE from org.apache.shiro.authz.Permission to org.apache.shiro.authz.permission", "operations": ["UPD QualifiedName: org.apache.shiro.authz.Permission from org.apache.shiro.authz.Permission to org.apache.shiro.authz.permission"]}, {"root": "UPDATE from org.apache.shiro.authz.UnauthorizedException to org.apache.shiro.util.CollectionUtils", "operations": ["UPD QualifiedName: org.apache.shiro.authz.UnauthorizedException from org.apache.shiro.authz.UnauthorizedException to org.apache.shiro.util.CollectionUtils"]}, {"root": "UPDATE from org.apache.shiro.authz.permission.PermissionResolver to java.util", "operations": ["UPD QualifiedName: org.apache.shiro.authz.permission.PermissionResolver from org.apache.shiro.authz.permission.PermissionResolver to java.util"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 40", "operations": ["INS ParameterizedType: Collection<Permission> to VariableDeclarationStatement at 0", "INS SimpleName: perms to VariableDeclarationFragment at 0", "INS SimpleName: perms to Assignment: = at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: perms to MethodInvocation at 2", "INS Block to MethodDeclaration at 5", "INS Block to IfStatement at 1", "INS SimpleName: permissions to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: permissions to MethodInvocation at 0", "INS SimpleName: perms to MethodInvocation at 2", "INS SimpleName: perms to Assignment: = at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to Assignment: = at 1", "INS IfStatement to Block at 1", "INS SimpleName: CollectionUtils to MethodInvocation at 0", "INS IfStatement to Block at 3", "INS SimpleName: CollectionUtils to MethodInvocation at 0", "INS SimpleName: addAll to MethodInvocation at 1", "INS SimpleName: perms to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: Permission to SimpleType: Permission at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS SimpleName: addAll to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 40", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS SimpleName: resolvePermissions to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Collection to ParameterizedType: Collection<Permission> at 0", "INS SimpleType: Permission to ParameterizedType: Collection<Permission> at 1", "INS ExpressionStatement to Block at 2", "INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 4", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: perms to MethodInvocation at 2", "INS IfStatement to Block at 5", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: resolveRolePermissions to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 41", "operations": ["INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleName: PermissionResolver to SimpleType: PermissionResolver at 0", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: Collection to ParameterizedType: Collection<Permission> at 0", "INS ParameterizedType: Collection<String> to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 41", "INS SimpleName: stringPerms to SingleVariableDeclaration at 1", "INS SimpleName: getPermissionResolver to MethodInvocation at 0", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleType: Collection to ParameterizedType: Collection<String> at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: perms to VariableDeclarationFragment at 0", "INS SimpleName: Collections to MethodInvocation at 0", "INS SimpleName: emptySet to MethodInvocation at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleType: PermissionResolver to VariableDeclarationStatement at 0", "INS ReturnStatement to Block at 3", "INS Block to MethodDeclaration at 4", "INS SimpleType: Permission to ParameterizedType: Collection<Permission> at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ParameterizedType: Collection<Permission> to MethodDeclaration at 1", "INS SimpleName: resolvePermissions to MethodDeclaration at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: resolver to VariableDeclarationFragment at 0", "INS SimpleName: Permission to SimpleType: Permission at 0", "INS SimpleType: String to ParameterizedType: Collection<String> at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: perms to ReturnStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 42", "operations": ["INS ParameterizedType: Collection<Permission> to MethodDeclaration at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: emptySet to MethodInvocation at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleType: Collection to ParameterizedType: Collection<Permission> at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: roleNames to SingleVariableDeclaration at 1", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleName: Permission to SimpleType: Permission at 0", "INS SimpleName: perms to ReturnStatement at 0", "INS SimpleName: perms to VariableDeclarationFragment at 0", "INS ParameterizedType: Collection<Permission> to VariableDeclarationStatement at 0", "INS SimpleName: resolveRolePermissions to MethodDeclaration at 2", "INS SimpleType: Permission to ParameterizedType: Collection<Permission> at 1", "INS SimpleType: RolePermissionResolver to VariableDeclarationStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ParameterizedType: Collection<String> to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 42", "INS SimpleType: Permission to ParameterizedType: Collection<Permission> at 1", "INS SimpleType: String to ParameterizedType: Collection<String> at 1", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleName: Permission to SimpleType: Permission at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Collections to MethodInvocation at 0", "INS Block to MethodDeclaration at 4", "INS SimpleType: Collection to ParameterizedType: Collection<Permission> at 0", "INS SimpleName: resolver to VariableDeclarationFragment at 0", "INS SimpleType: Collection to ParameterizedType: Collection<String> at 0", "INS SimpleName: RolePermissionResolver to SimpleType: RolePermissionResolver at 0", "INS ReturnStatement to Block at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 1", "operations": ["INS StringLiteral: \"UnusedDeclaration\" to ArrayInitializer at 0", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS SingleMemberAnnotation to MethodDeclaration at 1", "INS ArrayInitializer to SingleMemberAnnotation at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: private to MethodDeclaration at 1", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SimpleName: getPermissions to MethodDeclaration at 3", "MOV SingleMemberAnnotation to MethodDeclaration at 0", "MOV ParameterizedType: Collection<Permission> to MethodDeclaration at 2"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: authorizationCachingEnabled to FieldAccess at 1", "INS BooleanLiteral: true to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS FieldAccess to Assignment: = at 0", "INS SimpleName: permissionResolver to FieldAccess at 1", "INS ExpressionStatement to Block at 1", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2", "MOV IfStatement to Block at 2", "MOV IfStatement to Block at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: Collection<Permission> to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from != to &&", "operations": ["UPD InfixExpression: != from != to &&"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV ClassInstanceCreation to Assignment: = at 1"]}, {"root": "INS InfixExpression: != to InfixExpression: != at 0", "operations": ["INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to InfixExpression: != at 0", "INS SimpleName: resolver to InfixExpression: != at 0"]}, {"root": "INS PrefixExpression: ! to InfixExpression: != at 1", "operations": ["INS MethodInvocation to PrefixExpression: ! at 0", "INS PrefixExpression: ! to InfixExpression: != at 1", "INS SimpleName: CollectionUtils to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: Permission to SimpleType: Permission at 0", "INS SimpleType: LinkedHashSet to ParameterizedType: LinkedHashSet<Permission> at 0", "INS ParameterizedType: LinkedHashSet<Permission> to ClassInstanceCreation at 0", "INS SimpleName: perms to Assignment: = at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: LinkedHashSet to SimpleType: LinkedHashSet at 0", "INS SimpleType: Permission to ParameterizedType: LinkedHashSet<Permission> at 1", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: stringPerms to MethodInvocation at 0", "INS SimpleName: size to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS PrefixExpression: ! to InfixExpression: && at 1", "operations": ["INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: CollectionUtils to MethodInvocation at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: isEmpty to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleType: LinkedHashSet to ParameterizedType: LinkedHashSet<Permission> at 0", "INS SimpleType: Permission to ParameterizedType: LinkedHashSet<Permission> at 1", "INS SimpleName: Permission to SimpleType: Permission at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: LinkedHashSet to SimpleType: LinkedHashSet at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: perms to Assignment: = at 0", "INS ParameterizedType: LinkedHashSet<Permission> to ClassInstanceCreation at 0", "INS SimpleName: roleNames to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: size to MethodInvocation at 1"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: CollectionUtils to MethodInvocation at 0", "INS MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "INS SimpleName: stringPerms to EnhancedForStatement at 1", "operations": ["INS SimpleName: stringPerms to EnhancedForStatement at 1"]}, {"root": "INS SimpleName: resolver to InfixExpression: != at 0", "operations": ["INS SimpleName: resolver to InfixExpression: != at 0"]}, {"root": "INS SimpleName: roleNames to EnhancedForStatement at 1", "operations": ["INS SimpleName: roleNames to EnhancedForStatement at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from info to isEmpty", "operations": ["UPD SimpleName: info from info to isEmpty", "UPD SimpleName: info from info to isEmpty"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: info to MethodInvocation at 1", "MOV SimpleName: getStringPermissions to MethodInvocation at 2"]}, {"root": "UPDATE from getStringPermissions to stringPerms", "operations": ["UPD SimpleName: getStringPermissions from getStringPermissions to stringPerms"]}, {"root": "UPDATE from getRolePermissionResolver to roleNames", "operations": ["UPD SimpleName: getRolePermissionResolver from getRolePermissionResolver to roleNames"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getRolePermissionResolver to MethodInvocation at 2"]}, {"root": "UPDATE from role to roleName", "operations": ["UPD SimpleName: role from role to roleName", "UPD SimpleName: role from role to roleName"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS MethodInvocation to PrefixExpression: ! at 0", "INS IfStatement to Block at 1", "INS PrefixExpression: ! to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS SimpleName: CollectionUtils to MethodInvocation at 0", "INS SimpleName: resolved to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getObjectPermissions to MethodInvocation at 2", "MOV SimpleName: info to MethodInvocation at 1"]}, {"root": "UPDATE from permissions to perms", "operations": ["UPD SimpleName: permissions from permissions to perms", "UPD SimpleName: permissions from permissions to perms", "UPD SimpleName: getObjectPermissions from getObjectPermissions to perms"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 1"]}, {"root": "INS ParameterizedType: Collection<Permission> to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleType: Collection to ParameterizedType: Collection<Permission> at 0", "INS ParameterizedType: Collection<Permission> to VariableDeclarationStatement at 0", "INS SimpleType: Permission to ParameterizedType: Collection<Permission> at 1", "INS SimpleName: Permission to SimpleType: Permission at 0"]}, {"root": "INS SimpleName: perms to MethodInvocation at 2", "operations": ["INS SimpleName: perms to MethodInvocation at 2"]}, {"root": "UPDATE from rolesPermissions to resolved", "operations": ["UPD SimpleName: rolesPermissions from rolesPermissions to resolved", "UPD SimpleName: rolesPermissions from rolesPermissions to resolved"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS SimpleName: resolver to MethodInvocation at 0", "operations": ["INS SimpleName: resolver to MethodInvocation at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.ArrayList", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collections", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.HashSet", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.shiro.authz.AuthorizationException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.shiro.authz.AuthorizingAccount", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.shiro.authz.permission.PermissionResolverAware", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.shiro.authz.permission.RolePermissionResolver", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.shiro.authz.permission.RolePermissionResolverAware"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.shiro.authz.permission.WildcardPermissionResolver", "DEL ImportDeclaration"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL NullLiteral", "DEL InfixExpression: !=", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getRoles", "DEL SimpleName: info", "DEL MethodInvocation"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL MethodInvocation", "DEL NullLiteral", "DEL InfixExpression: !="]}, {"root": "DEL MethodDeclaration", "operations": ["DEL IfStatement", "DEL Block", "DEL Block", "DEL MethodDeclaration"]}]}}, {"AuthorizingRealm_diff": {"operations": ["Move ImportDeclaration(15) into CompilationUnit(2627) at 25", "Move ImportDeclaration(27) into CompilationUnit(2627) at 21", "Move ImportDeclaration(29) into CompilationUnit(2627) at 24", "Update QualifiedName: org.apache.shiro.authz.AuthorizationInfo(20) to org.apache.shiro.authz", "Update QualifiedName: org.apache.shiro.authz.Permission(24) to org.apache.shiro.authz.permission", "Update QualifiedName: org.apache.shiro.authz.UnauthorizedException(26) to org.apache.shiro.util.CollectionUtils", "Update QualifiedName: org.apache.shiro.authz.permission.PermissionResolver(28) to java.util", "Insert MethodDeclaration(1132) into TypeDeclaration: class(2626) at 40", "Insert MethodDeclaration(1213) into TypeDeclaration: class(2626) at 41", "Insert MethodDeclaration(1303) into TypeDeclaration: class(2626) at 42", "Insert SingleMemberAnnotation(338) into MethodDeclaration(359) at 1", "Move SingleMemberAnnotation(1037) into MethodDeclaration(1132) at 0", "Move Modifier: private(1038) into MethodDeclaration(1132) at 1", "Move ParameterizedType: Collection<Permission>(1043) into MethodDeclaration(1132) at 2", "Move SimpleName: getPermissions(1044) into MethodDeclaration(1132) at 3", "Move SingleVariableDeclaration(1048) into MethodDeclaration(1132) at 4", "Insert Block(1131) into MethodDeclaration(1132) at 5", "Insert Modifier: private(1133) into MethodDeclaration(1213) at 0", "Insert ParameterizedType: Collection<Permission>(1138) into MethodDeclaration(1213) at 1", "Insert SimpleName: resolvePermissions(1139) into MethodDeclaration(1213) at 2", "Insert SingleVariableDeclaration(1146) into MethodDeclaration(1213) at 3", "Insert Block(1212) into MethodDeclaration(1213) at 4", "Insert Modifier: private(1214) into MethodDeclaration(1303) at 0", "Insert ParameterizedType: Collection<Permission>(1219) into MethodDeclaration(1303) at 1", "Insert SimpleName: resolveRolePermissions(1220) into MethodDeclaration(1303) at 2", "Insert SingleVariableDeclaration(1227) into MethodDeclaration(1303) at 3", "Insert Block(1302) into MethodDeclaration(1303) at 4", "Insert ExpressionStatement(163) into Block(172) at 0", "Insert ExpressionStatement(171) into Block(172) at 1", "Insert SimpleName: SuppressWarnings(335) into SingleMemberAnnotation(338) at 0", "Insert ArrayInitializer(337) into SingleMemberAnnotation(338) at 1", "Move VariableDeclarationStatement(1062) into Block(1131) at 0", "Insert IfStatement(1117) into Block(1131) at 1", "Move IfStatement(1164) into Block(1131) at 2", "Insert SimpleType: Collection(1135) into ParameterizedType: Collection<Permission>(1138) at 0", "Insert SimpleType: Permission(1137) into ParameterizedType: Collection<Permission>(1138) at 1", "Insert ParameterizedType: Collection<String>(1144) into SingleVariableDeclaration(1146) at 0", "Insert SimpleName: stringPerms(1145) into SingleVariableDeclaration(1146) at 1", "Insert VariableDeclarationStatement(1157) into Block(1212) at 0", "Insert VariableDeclarationStatement(1164) into Block(1212) at 1", "Move IfStatement(1110) into Block(1212) at 2", "Insert ReturnStatement(1211) into Block(1212) at 3", "Insert SimpleType: Collection(1216) into ParameterizedType: Collection<Permission>(1219) at 0", "Insert SimpleType: Permission(1218) into ParameterizedType: Collection<Permission>(1219) at 1", "Insert ParameterizedType: Collection<String>(1225) into SingleVariableDeclaration(1227) at 0", "Insert SimpleName: roleNames(1226) into SingleVariableDeclaration(1227) at 1", "Insert VariableDeclarationStatement(1238) into Block(1302) at 0", "Insert VariableDeclarationStatement(1245) into Block(1302) at 1", "Move IfStatement(1149) into Block(1302) at 2", "Insert ReturnStatement(1301) into Block(1302) at 3", "Insert Assignment: =(162) into ExpressionStatement(163) at 0", "Insert Assignment: =(170) into ExpressionStatement(171) at 0", "Insert StringLiteral: \"UnusedDeclaration\"(336) into ArrayInitializer(337) at 0", "Move InfixExpression: !=(1065) into IfStatement(1117) at 0", "Insert Block(1116) into IfStatement(1117) at 1", "Insert SimpleName: Collection(1134) into SimpleType: Collection(1135) at 0", "Insert SimpleName: Permission(1136) into SimpleType: Permission(1137) at 0", "Insert SimpleType: Collection(1141) into ParameterizedType: Collection<String>(1144) at 0", "Insert SimpleType: String(1143) into ParameterizedType: Collection<String>(1144) at 1", "Move ParameterizedType: Collection<Permission>(1132) into VariableDeclarationStatement(1157) at 0", "Insert VariableDeclarationFragment(1156) into VariableDeclarationStatement(1157) at 1", "Insert SimpleType: PermissionResolver(1159) into VariableDeclarationStatement(1164) at 0", "Insert VariableDeclarationFragment(1163) into VariableDeclarationStatement(1164) at 1", "Update InfixExpression: !=(1084) to &&", "Insert SimpleName: perms(1210) into ReturnStatement(1211) at 0", "Insert SimpleName: Collection(1215) into SimpleType: Collection(1216) at 0", "Insert SimpleName: Permission(1217) into SimpleType: Permission(1218) at 0", "Insert SimpleType: Collection(1222) into ParameterizedType: Collection<String>(1225) at 0", "Insert SimpleType: String(1224) into ParameterizedType: Collection<String>(1225) at 1", "Insert ParameterizedType: Collection<Permission>(1232) into VariableDeclarationStatement(1238) at 0", "Insert VariableDeclarationFragment(1237) into VariableDeclarationStatement(1238) at 1", "Insert SimpleType: RolePermissionResolver(1240) into VariableDeclarationStatement(1245) at 0", "Insert VariableDeclarationFragment(1244) into VariableDeclarationStatement(1245) at 1", "Insert SimpleName: perms(1300) into ReturnStatement(1301) at 0", "Insert FieldAccess(160) into Assignment: =(162) at 0", "Insert BooleanLiteral: true(161) into Assignment: =(162) at 1", "Insert FieldAccess(166) into Assignment: =(170) at 0", "Move ClassInstanceCreation(177) into Assignment: =(170) at 1", "Insert VariableDeclarationStatement(1063) into Block(1116) at 0", "Move IfStatement(1079) into Block(1116) at 1", "Insert ExpressionStatement(1083) into Block(1116) at 2", "Insert IfStatement(1095) into Block(1116) at 3", "Insert ExpressionStatement(1103) into Block(1116) at 4", "Insert IfStatement(1115) into Block(1116) at 5", "Insert SimpleName: Collection(1140) into SimpleType: Collection(1141) at 0", "Insert SimpleName: String(1142) into SimpleType: String(1143) at 0", "Insert SimpleName: perms(1152) into VariableDeclarationFragment(1156) at 0", "Insert MethodInvocation(1155) into VariableDeclarationFragment(1156) at 1", "Insert SimpleName: PermissionResolver(1158) into SimpleType: PermissionResolver(1159) at 0", "Insert SimpleName: resolver(1160) into VariableDeclarationFragment(1163) at 0", "Insert MethodInvocation(1162) into VariableDeclarationFragment(1163) at 1", "Insert InfixExpression: !=(1167) into InfixExpression: &&(1173) at 0", "Insert PrefixExpression: !(1172) into InfixExpression: &&(1173) at 1", "Insert ExpressionStatement(1185) into Block(1208) at 0", "Insert SimpleName: Collection(1221) into SimpleType: Collection(1222) at 0", "Insert SimpleName: String(1223) into SimpleType: String(1224) at 0", "Insert SimpleType: Collection(1229) into ParameterizedType: Collection<Permission>(1232) at 0", "Insert SimpleType: Permission(1231) into ParameterizedType: Collection<Permission>(1232) at 1", "Insert SimpleName: perms(1233) into VariableDeclarationFragment(1237) at 0", "Insert MethodInvocation(1236) into VariableDeclarationFragment(1237) at 1", "Insert SimpleName: RolePermissionResolver(1239) into SimpleType: RolePermissionResolver(1240) at 0", "Insert SimpleName: resolver(1241) into VariableDeclarationFragment(1244) at 0", "Move MethodInvocation(1135) into VariableDeclarationFragment(1244) at 1", "Insert PrefixExpression: !(1253) into InfixExpression: &&(1254) at 1", "Insert ExpressionStatement(1266) into Block(1298) at 0", "Insert ThisExpression(158) into FieldAccess(160) at 0", "Insert SimpleName: authorizationCachingEnabled(159) into FieldAccess(160) at 1", "Insert ThisExpression(164) into FieldAccess(166) at 0", "Insert SimpleName: permissionResolver(165) into FieldAccess(166) at 1", "Insert ParameterizedType: Collection<Permission>(1057) into VariableDeclarationStatement(1063) at 0", "Insert VariableDeclarationFragment(1062) into VariableDeclarationStatement(1063) at 1", "Insert PrefixExpression: !(1068) into IfStatement(1075) at 0", "Insert Assignment: =(1082) into ExpressionStatement(1083) at 0", "Insert PrefixExpression: !(1088) into IfStatement(1095) at 0", "Insert Block(1094) into IfStatement(1095) at 1", "Insert Assignment: =(1102) into ExpressionStatement(1103) at 0", "Insert PrefixExpression: !(1108) into IfStatement(1115) at 0", "Insert Block(1114) into IfStatement(1115) at 1", "Insert SimpleName: Collections(1153) into MethodInvocation(1155) at 0", "Insert SimpleName: emptySet(1154) into MethodInvocation(1155) at 1", "Insert SimpleName: getPermissionResolver(1161) into MethodInvocation(1162) at 0", "Insert SimpleName: resolver(1165) into InfixExpression: !=(1167) at 0", "Insert NullLiteral(1166) into InfixExpression: !=(1167) at 1", "Insert MethodInvocation(1171) into PrefixExpression: !(1172) at 0", "Insert Assignment: =(1184) into ExpressionStatement(1185) at 0", "Insert SimpleName: stringPerms(1190) into EnhancedForStatement(1207) at 1", "Insert SimpleName: Collection(1228) into SimpleType: Collection(1229) at 0", "Insert SimpleName: Permission(1230) into SimpleType: Permission(1231) at 0", "Insert SimpleName: Collections(1234) into MethodInvocation(1236) at 0", "Insert SimpleName: emptySet(1235) into MethodInvocation(1236) at 1", "Insert SimpleName: resolver(1246) into InfixExpression: !=(1248) at 0", "Insert MethodInvocation(1252) into PrefixExpression: !(1253) at 0", "Insert Assignment: =(1265) into ExpressionStatement(1266) at 0", "Insert SimpleName: roleNames(1271) into EnhancedForStatement(1297) at 1", "Insert SimpleType: Collection(1054) into ParameterizedType: Collection<Permission>(1057) at 0", "Insert SimpleType: Permission(1056) into ParameterizedType: Collection<Permission>(1057) at 1", "Insert SimpleName: perms(1058) into VariableDeclarationFragment(1062) at 0", "Move MethodInvocation(1075) into VariableDeclarationFragment(1062) at 1", "Insert MethodInvocation(1067) into PrefixExpression: !(1068) at 0", "Insert SimpleName: perms(1076) into Assignment: =(1082) at 0", "Insert MethodInvocation(1081) into Assignment: =(1082) at 1", "Insert MethodInvocation(1087) into PrefixExpression: !(1088) at 0", "Insert ExpressionStatement(1093) into Block(1094) at 0", "Insert SimpleName: perms(1096) into Assignment: =(1102) at 0", "Insert MethodInvocation(1101) into Assignment: =(1102) at 1", "Insert MethodInvocation(1107) into PrefixExpression: !(1108) at 0", "Insert ExpressionStatement(1113) into Block(1114) at 0", "Insert SimpleName: CollectionUtils(1168) into MethodInvocation(1171) at 0", "Update SimpleName: info(1080) to isEmpty", "Move SimpleName: info(1080) into MethodInvocation(1171) at 1", "Update SimpleName: getStringPermissions(1081) to stringPerms", "Move SimpleName: getStringPermissions(1081) into MethodInvocation(1171) at 2", "Insert SimpleName: perms(1174) into Assignment: =(1184) at 0", "Insert ClassInstanceCreation(1183) into Assignment: =(1184) at 1", "Insert SimpleName: CollectionUtils(1249) into MethodInvocation(1252) at 0", "Insert SimpleName: isEmpty(1250) into MethodInvocation(1252) at 1", "Update SimpleName: getRolePermissionResolver(1116) to roleNames", "Move SimpleName: getRolePermissionResolver(1116) into MethodInvocation(1252) at 2", "Insert SimpleName: perms(1255) into Assignment: =(1265) at 0", "Insert ClassInstanceCreation(1264) into Assignment: =(1265) at 1", "Update SimpleName: role(1123) to roleName", "Insert IfStatement(1295) into Block(1296) at 1", "Insert SimpleName: Collection(1053) into SimpleType: Collection(1054) at 0", "Insert SimpleName: Permission(1055) into SimpleType: Permission(1056) at 0", "Insert SimpleName: CollectionUtils(1064) into MethodInvocation(1067) at 0", "Update SimpleName: info(1066) to isEmpty", "Move SimpleName: info(1066) into MethodInvocation(1067) at 1", "Update SimpleName: getObjectPermissions(1067) to perms", "Move SimpleName: getObjectPermissions(1067) into MethodInvocation(1067) at 2", "Insert SimpleName: resolvePermissions(1077) into MethodInvocation(1081) at 0", "Move MethodInvocation(1091) into MethodInvocation(1081) at 1", "Insert SimpleName: CollectionUtils(1084) into MethodInvocation(1087) at 0", "Insert SimpleName: isEmpty(1085) into MethodInvocation(1087) at 1", "Insert SimpleName: perms(1086) into MethodInvocation(1087) at 2", "Insert MethodInvocation(1092) into ExpressionStatement(1093) at 0", "Insert SimpleName: resolveRolePermissions(1097) into MethodInvocation(1101) at 0", "Move MethodInvocation(1127) into MethodInvocation(1101) at 1", "Insert SimpleName: CollectionUtils(1104) into MethodInvocation(1107) at 0", "Insert SimpleName: isEmpty(1105) into MethodInvocation(1107) at 1", "Insert SimpleName: perms(1106) into MethodInvocation(1107) at 2", "Insert MethodInvocation(1112) into ExpressionStatement(1113) at 0", "Insert ParameterizedType: LinkedHashSet<Permission>(1179) into ClassInstanceCreation(1183) at 0", "Insert MethodInvocation(1182) into ClassInstanceCreation(1183) at 1", "Insert ParameterizedType: LinkedHashSet<Permission>(1260) into ClassInstanceCreation(1264) at 0", "Insert MethodInvocation(1263) into ClassInstanceCreation(1264) at 1", "Insert ParameterizedType: Collection<Permission>(1276) into VariableDeclarationStatement(1283) at 0", "Insert PrefixExpression: !(1288) into IfStatement(1295) at 0", "Insert Block(1294) into IfStatement(1295) at 1", "Insert SimpleName: perms(1071) into MethodInvocation(1072) at 2", "Insert SimpleName: permissions(1089) into MethodInvocation(1092) at 0", "Insert SimpleName: addAll(1090) into MethodInvocation(1092) at 1", "Insert SimpleName: perms(1091) into MethodInvocation(1092) at 2", "Insert SimpleName: permissions(1109) into MethodInvocation(1112) at 0", "Insert SimpleName: addAll(1110) into MethodInvocation(1112) at 1", "Insert SimpleName: perms(1111) into MethodInvocation(1112) at 2", "Insert SimpleType: LinkedHashSet(1176) into ParameterizedType: LinkedHashSet<Permission>(1179) at 0", "Insert SimpleType: Permission(1178) into ParameterizedType: LinkedHashSet<Permission>(1179) at 1", "Insert SimpleName: stringPerms(1180) into MethodInvocation(1182) at 0", "Insert SimpleName: size(1181) into MethodInvocation(1182) at 1", "Update SimpleName: permissions(1102) to perms", "Insert SimpleType: LinkedHashSet(1257) into ParameterizedType: LinkedHashSet<Permission>(1260) at 0", "Insert SimpleType: Permission(1259) into ParameterizedType: LinkedHashSet<Permission>(1260) at 1", "Insert SimpleName: roleNames(1261) into MethodInvocation(1263) at 0", "Insert SimpleName: size(1262) into MethodInvocation(1263) at 1", "Insert SimpleType: Collection(1273) into ParameterizedType: Collection<Permission>(1276) at 0", "Insert SimpleType: Permission(1275) into ParameterizedType: Collection<Permission>(1276) at 1", "Update SimpleName: rolesPermissions(1133) to resolved", "Insert MethodInvocation(1287) into PrefixExpression: !(1288) at 0", "Move ExpressionStatement(1145) into Block(1294) at 0", "Insert SimpleName: LinkedHashSet(1175) into SimpleType: LinkedHashSet(1176) at 0", "Insert SimpleName: Permission(1177) into SimpleType: Permission(1178) at 0", "Insert SimpleName: LinkedHashSet(1256) into SimpleType: LinkedHashSet(1257) at 0", "Insert SimpleName: Permission(1258) into SimpleType: Permission(1259) at 0", "Insert SimpleName: Collection(1272) into SimpleType: Collection(1273) at 0", "Insert SimpleName: Permission(1274) into SimpleType: Permission(1275) at 0", "Insert SimpleName: resolver(1278) into MethodInvocation(1281) at 0", "Update SimpleName: role(1137) to roleName", "Insert SimpleName: CollectionUtils(1284) into MethodInvocation(1287) at 0", "Insert SimpleName: isEmpty(1285) into MethodInvocation(1287) at 1", "Insert SimpleName: resolved(1286) into MethodInvocation(1287) at 2", "Update SimpleName: permissions(1141) to perms", "Update SimpleName: rolesPermissions(1143) to resolved", "Delete QualifiedName: java.util.ArrayList(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Collection(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Collections(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.HashSet(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.List(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.Set(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: org.apache.shiro.authz.AuthorizationException(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: org.apache.shiro.authz.AuthorizingAccount(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: org.apache.shiro.authz.permission.PermissionResolverAware(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: org.apache.shiro.authz.permission.RolePermissionResolver(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: org.apache.shiro.authz.permission.RolePermissionResolverAware(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: org.apache.shiro.authz.permission.WildcardPermissionResolver(36)", "Delete ImportDeclaration(37)", "Delete BooleanLiteral: true(154)", "Delete NullLiteral(161)", "Delete NullLiteral(168)", "Delete NullLiteral(184)", "Delete MethodInvocation(1068)", "Delete NullLiteral(1069)", "Delete InfixExpression: !=(1070)", "Delete MethodInvocation(1082)", "Delete NullLiteral(1083)", "Delete SimpleName: info(1111)", "Delete SimpleName: getRoles(1112)", "Delete MethodInvocation(1113)", "Delete MethodInvocation(1117)", "Delete NullLiteral(1118)", "Delete InfixExpression: !=(1119)", "Delete Block(1150)", "Delete IfStatement(1151)", "Delete Block(1165)", "Delete MethodDeclaration(1166)"]}}, {"CachingRealm_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 20"]}, {"root": "INS Block to MethodDeclaration at 2", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: cachingEnabled to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS BooleanLiteral: true to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS Block to MethodDeclaration at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS SimpleName: name to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV InfixExpression: + to Assignment: = at 1"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: CachingRealm", "DEL Block"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: cacheManager", "DEL SimpleName: setCacheManager"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleType: CacheManager", "DEL SimpleName: CacheManager", "DEL SimpleName: cacheManager"]}, {"root": "DEL Block", "operations": ["DEL Block"]}]}}, {"CachingRealm_diff": {"operations": ["Move MethodDeclaration(212) into TypeDeclaration: class(234) at 20", "Insert Block(81) into MethodDeclaration(82) at 2", "Insert ExpressionStatement(66) into Block(81) at 0", "Move ExpressionStatement(82) into Block(81) at 1", "Insert Assignment: =(65) into ExpressionStatement(66) at 0", "Insert Assignment: =(79) into ExpressionStatement(80) at 0", "Insert FieldAccess(63) into Assignment: =(65) at 0", "Insert BooleanLiteral: true(64) into Assignment: =(65) at 1", "Insert FieldAccess(69) into Assignment: =(79) at 0", "Move InfixExpression: +(54) into Assignment: =(79) at 1", "Insert ThisExpression(61) into FieldAccess(63) at 0", "Insert SimpleName: cachingEnabled(62) into FieldAccess(63) at 1", "Insert ThisExpression(67) into FieldAccess(69) at 0", "Insert SimpleName: name(68) into FieldAccess(69) at 1", "Delete BooleanLiteral: true(60)", "Delete Modifier: public(69)", "Delete SimpleName: CachingRealm(70)", "Delete Block(71)", "Delete MethodDeclaration(72)", "Delete SimpleName: setCacheManager(79)", "Delete SimpleName: cacheManager(80)", "Delete MethodInvocation(81)", "Delete SimpleName: CacheManager(75)", "Delete SimpleType: CacheManager(76)", "Delete SimpleName: cacheManager(77)", "Delete SingleVariableDeclaration(78)", "Delete Block(83)"]}}, {"SessionListenerRegistrar_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.shiro.session"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collection"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL TagElement: @code", "DEL TextElement:  false", "DEL SimpleName: remove", "DEL TextElement:  the single ", "DEL TextElement: Registers a single ", "DEL SimpleName: listener", "DEL SimpleName: listener", "DEL TextElement:  Les Hazlewood", "DEL TextElement: s that should be notified during ", "DEL TagElement: @code", "DEL MethodDeclaration", "DEL TagElement: @code", "DEL TextElement:  Session", "DEL TextElement:  one or more ", "DEL TextElement:  SessionListener", "DEL Javadoc", "DEL TextElement:  ", "DEL Javadoc", "DEL Modifier: public", "DEL TextElement:  listener", "DEL TagElement: @code", "DEL TextElement:  that wishes to be notified during ", "DEL SimpleName: add", "DEL TagElement: @code", "DEL SimpleName: SessionListener", "DEL TagElement", "DEL TextElement:  that no longer wishes to be notified during ", "DEL TagElement: @link", "DEL TextElement:  Session", "DEL TagElement: @code", "DEL TagElement: @return", "DEL TextElement:  Session", "DEL MethodDeclaration", "DEL TextElement: events.", "DEL TextElement:  that no longer wishes to be notified during ", "DEL TextElement:  Session", "DEL SimpleName: SessionListenerRegistrar", "DEL TagElement: @code", "DEL TextElement:  listener", "DEL TextElement: Sets the ", "DEL SimpleName: setSessionListeners", "DEL SimpleName: listener", "DEL SimpleName: SessionListener", "DEL TagElement", "DEL TextElement:  Session", "DEL TextElement: This interface only specifies that registered listeners will be notified during a ", "DEL TypeDeclaration: interface", "DEL TextElement:  lifecycle events.", "DEL PrimitiveType: boolean", "DEL SimpleType: SessionListener", "DEL TextElement: lifecycle.  How that notification occurs is implementation specific (e.g. synchronous iteration over a collection of", "DEL SimpleName: SessionListener", "DEL TextElement:  that wishes to be notified during ", "DEL TagElement: @code", "DEL TagElement: @code", "DEL TextElement:  SessionListener", "DEL TextElement: (s) that wish to be notified during ", "DEL TagElement: @code", "DEL SimpleName: Session", "DEL TextElement:  the single ", "DEL ParameterizedType: Collection<SessionListener>", "DEL TextElement: s that wish to be notified during ", "DEL TagElement", "DEL Javadoc", "DEL TextElement:  lifecycle events.", "DEL TagElement: @param", "DEL TagElement: @author", "DEL TextElement:  lifecycle events.", "DEL SimpleType: Collection", "DEL SimpleType: SessionListener", "DEL TextElement:  is a component that is capable of registering interested", "DEL SimpleType: SessionListener", "DEL TextElement:  Session", "DEL TextElement:  Session", "DEL TagElement: @code", "DEL TextElement:  listener", "DEL TagElement: @link", "DEL SimpleName: SessionListener", "DEL TextElement: A ", "DEL SingleVariableDeclaration", "DEL TextElement:  lifecycle", "DEL TextElement:  0.9", "DEL TextElement:  lifecycle events.", "DEL TextElement:  lifecycle events.", "DEL SimpleName: Collection", "DEL TagElement: @code", "DEL TagElement: @code", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL TextElement:  SessionListener", "DEL TagElement: @code", "DEL TagElement: @param", "DEL TextElement:  lifecycle events.", "DEL TextElement:  SessionListenerRegistrar", "DEL TextElement: <p/>", "DEL Javadoc", "DEL TagElement: @code", "DEL PrimitiveType: void", "DEL TextElement:  true", "DEL PrimitiveType: void", "DEL SimpleName: listeners", "DEL TextElement:  listener", "DEL TagElement", "DEL TagElement: @since", "DEL TextElement: listeners, or asynchronous JMS, etc.).", "DEL MethodDeclaration", "DEL TextElement: Removes a single ", "DEL TextElement:  Session", "DEL TagElement: @code", "DEL TextElement:  if the listener was removed (i.e. it was previously registered), or ", "DEL TextElement: 's", "DEL TagElement: @param", "DEL SimpleName: listeners", "DEL SimpleName: listener", "DEL TextElement: if the listener was not removed (i.e. it wasn't registered yet, effectively a no-op)."]}]}}, {"SessionListenerRegistrar_diff": {"operations": ["Delete QualifiedName: org.apache.shiro.session(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.Collection(2)", "Delete ImportDeclaration(3)", "Delete TextElement: A (4)", "Delete TextElement:  SessionListenerRegistrar(5)", "Delete TagElement: @code(6)", "Delete TextElement:  is a component that is capable of registering interested(7)", "Delete SimpleName: SessionListener(8)", "Delete TextElement:  SessionListener(9)", "Delete TagElement: @link(10)", "Delete TextElement: s that wish to be notified during (11)", "Delete SimpleName: Session(12)", "Delete TextElement:  Session(13)", "Delete TagElement: @link(14)", "Delete TextElement:  lifecycle events.(15)", "Delete TextElement: <p/>(16)", "Delete TextElement: This interface only specifies that registered listeners will be notified during a (17)", "Delete TextElement:  Session(18)", "Delete TagElement: @code(19)", "Delete TextElement: 's(20)", "Delete TextElement: lifecycle.  How that notification occurs is implementation specific (e.g. synchronous iteration over a collection of(21)", "Delete TextElement: listeners, or asynchronous JMS, etc.).(22)", "Delete TagElement(23)", "Delete TextElement:  Les Hazlewood(24)", "Delete TagElement: @author(25)", "Delete TextElement:  0.9(26)", "Delete TagElement: @since(27)", "Delete Javadoc(28)", "Delete Modifier: public(29)", "Delete SimpleName: SessionListenerRegistrar(30)", "Delete TextElement: Sets the (31)", "Delete TextElement:  SessionListener(32)", "Delete TagElement: @code(33)", "Delete TextElement: (s) that wish to be notified during (34)", "Delete TextElement:  Session(35)", "Delete TagElement: @code(36)", "Delete TextElement:  lifecycle events.(37)", "Delete TagElement(38)", "Delete SimpleName: listeners(39)", "Delete TextElement:  one or more (40)", "Delete TextElement:  SessionListener(41)", "Delete TagElement: @code(42)", "Delete TextElement: s that should be notified during (43)", "Delete TextElement:  Session(44)", "Delete TagElement: @code(45)", "Delete TextElement:  lifecycle events.(46)", "Delete TagElement: @param(47)", "Delete Javadoc(48)", "Delete PrimitiveType: void(49)", "Delete SimpleName: setSessionListeners(50)", "Delete SimpleName: Collection(51)", "Delete SimpleType: Collection(52)", "Delete SimpleName: SessionListener(53)", "Delete SimpleType: SessionListener(54)", "Delete ParameterizedType: Collection<SessionListener>(55)", "Delete SimpleName: listeners(56)", "Delete SingleVariableDeclaration(57)", "Delete MethodDeclaration(58)", "Delete TextElement: Registers a single (59)", "Delete TextElement:  listener(60)", "Delete TagElement: @code(61)", "Delete TextElement:  that wishes to be notified during (62)", "Delete TextElement:  Session(63)", "Delete TagElement: @code(64)", "Delete TextElement:  lifecycle events.(65)", "Delete TagElement(66)", "Delete SimpleName: listener(67)", "Delete TextElement:  the single (68)", "Delete TextElement:  listener(69)", "Delete TagElement: @code(70)", "Delete TextElement:  that wishes to be notified during (71)", "Delete TextElement:  Session(72)", "Delete TagElement: @code(73)", "Delete TextElement:  lifecycle events.(74)", "Delete TagElement: @param(75)", "Delete Javadoc(76)", "Delete PrimitiveType: void(77)", "Delete SimpleName: add(78)", "Delete SimpleName: SessionListener(79)", "Delete SimpleType: SessionListener(80)", "Delete SimpleName: listener(81)", "Delete SingleVariableDeclaration(82)", "Delete MethodDeclaration(83)", "Delete TextElement: Removes a single (84)", "Delete TextElement:  listener(85)", "Delete TagElement: @code(86)", "Delete TextElement:  that no longer wishes to be notified during (87)", "Delete TextElement:  Session(88)", "Delete TagElement: @code(89)", "Delete TextElement:  lifecycle events.(90)", "Delete TagElement(91)", "Delete SimpleName: listener(92)", "Delete TextElement:  the single (93)", "Delete TextElement:  listener(94)", "Delete TagElement: @code(95)", "Delete TextElement:  that no longer wishes to be notified during (96)", "Delete TextElement:  Session(97)", "Delete TagElement: @code(98)", "Delete TextElement:  lifecycle(99)", "Delete TextElement: events.(100)", "Delete TagElement: @param(101)", "Delete TextElement:  (102)", "Delete TextElement:  true(103)", "Delete TagElement: @code(104)", "Delete TextElement:  if the listener was removed (i.e. it was previously registered), or (105)", "Delete TextElement:  false(106)", "Delete TagElement: @code(107)", "Delete TextElement: if the listener was not removed (i.e. it wasn't registered yet, effectively a no-op).(108)", "Delete TagElement: @return(109)", "Delete Javadoc(110)", "Delete PrimitiveType: boolean(111)", "Delete SimpleName: remove(112)", "Delete SimpleName: SessionListener(113)", "Delete SimpleType: SessionListener(114)", "Delete SimpleName: listener(115)", "Delete SingleVariableDeclaration(116)", "Delete MethodDeclaration(117)", "Delete TypeDeclaration: interface(118)"]}}, {"DefaultWebSecurityManager_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: org.apache.shiro.session.InvalidSessionException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS SimpleName: forgetIdentity to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: sessionId to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Block to MethodDeclaration at 7", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: onInvalidSessionId to MethodDeclaration at 3", "INS Modifier: protected to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Serializable to SimpleType: Serializable at 0", "INS SimpleName: InvalidSessionException to SimpleType: InvalidSessionException at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: getRememberMeManager to MethodInvocation at 0", "INS SimpleName: subjectContext to SingleVariableDeclaration at 1", "INS SimpleName: subjectContext to MethodInvocation at 2", "INS SimpleType: SubjectContext to SingleVariableDeclaration at 0", "INS SimpleName: SubjectContext to SimpleType: SubjectContext at 0", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS SimpleType: Serializable to SingleVariableDeclaration at 0", "INS SimpleType: InvalidSessionException to SingleVariableDeclaration at 0", "INS SimpleName: e to SingleVariableDeclaration at 1"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS StringLiteral: \"UnusedDeclaration\" to ArrayInitializer at 0", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS ArrayInitializer to SingleMemberAnnotation at 1", "INS SingleMemberAnnotation to MethodDeclaration at 0"]}]}}, {"DefaultWebSecurityManager_diff": {"operations": ["Insert ImportDeclaration(7) into CompilationUnit(556) at 3", "Insert QualifiedName: org.apache.shiro.session.InvalidSessionException(6) into ImportDeclaration(7) at 0", "Insert MethodDeclaration(492) into TypeDeclaration: class(555) at 19", "Insert SingleMemberAnnotation(195) into MethodDeclaration(203) at 0", "Insert MarkerAnnotation(469) into MethodDeclaration(492) at 0", "Insert Modifier: protected(470) into MethodDeclaration(492) at 1", "Insert PrimitiveType: void(471) into MethodDeclaration(492) at 2", "Insert SimpleName: onInvalidSessionId(472) into MethodDeclaration(492) at 3", "Insert SingleVariableDeclaration(476) into MethodDeclaration(492) at 4", "Insert SingleVariableDeclaration(480) into MethodDeclaration(492) at 5", "Insert SingleVariableDeclaration(484) into MethodDeclaration(492) at 6", "Insert Block(491) into MethodDeclaration(492) at 7", "Insert SimpleName: SuppressWarnings(192) into SingleMemberAnnotation(195) at 0", "Insert ArrayInitializer(194) into SingleMemberAnnotation(195) at 1", "Insert SimpleName: Override(468) into MarkerAnnotation(469) at 0", "Insert SimpleType: SubjectContext(474) into SingleVariableDeclaration(476) at 0", "Insert SimpleName: subjectContext(475) into SingleVariableDeclaration(476) at 1", "Insert SimpleType: Serializable(478) into SingleVariableDeclaration(480) at 0", "Insert SimpleName: sessionId(479) into SingleVariableDeclaration(480) at 1", "Insert SimpleType: InvalidSessionException(482) into SingleVariableDeclaration(484) at 0", "Insert SimpleName: e(483) into SingleVariableDeclaration(484) at 1", "Insert ExpressionStatement(490) into Block(491) at 0", "Insert StringLiteral: \"UnusedDeclaration\"(193) into ArrayInitializer(194) at 0", "Insert SimpleName: SubjectContext(473) into SimpleType: SubjectContext(474) at 0", "Insert SimpleName: Serializable(477) into SimpleType: Serializable(478) at 0", "Insert SimpleName: InvalidSessionException(481) into SimpleType: InvalidSessionException(482) at 0", "Insert MethodInvocation(489) into ExpressionStatement(490) at 0", "Insert MethodInvocation(486) into MethodInvocation(489) at 0", "Insert SimpleName: forgetIdentity(487) into MethodInvocation(489) at 1", "Insert SimpleName: subjectContext(488) into MethodInvocation(489) at 2", "Insert SimpleName: getRememberMeManager(485) into MethodInvocation(486) at 0"]}}, {"WebRememberMeManager_cluster": {"actions": [{"root": "UPDATE from protected to public", "operations": ["UPD Modifier: protected from protected to public"]}]}}, {"WebRememberMeManager_diff": {"operations": ["Update Modifier: protected(914) to public"]}}, {"ModularRealmAuthenticator_cluster": {"actions": [{"root": "UPDATE from <p>Using this Authenticator allows you to &quot;plug-in&quot; your own to Using this Authenticator allows you to &quot;plug-in&quot; your own", "operations": ["UPD TextElement: <p>Using this Authenticator allows you to &quot;plug-in&quot; your own from <p>Using this Authenticator allows you to &quot;plug-in&quot; your own to Using this Authenticator allows you to &quot;plug-in&quot; your own"]}, {"root": "UPDATE from <p>If only one realm is configured (this is often the case for most applications), authentication success is naturally to If only one realm is configured (this is often the case for most applications), authentication success is naturally", "operations": ["UPD TextElement: <p>If only one realm is configured (this is often the case for most applications), authentication success is naturally from <p>If only one realm is configured (this is often the case for most applications), authentication success is naturally to If only one realm is configured (this is often the case for most applications), authentication success is naturally"]}, {"root": "UPDATE from <p>But if two or more realms are configured, PAM behavior is implemented by iterating over the collection of realms to But if two or more realms are configured, PAM behavior is implemented by iterating over the collection of realms", "operations": ["UPD TextElement: <p>But if two or more realms are configured, PAM behavior is implemented by iterating over the collection of realms from <p>But if two or more realms are configured, PAM behavior is implemented by iterating over the collection of realms to But if two or more realms are configured, PAM behavior is implemented by iterating over the collection of realms"]}, {"root": "UPDATE from <p>The strategy object provides callback methods that allow you to to The strategy object provides callback methods that allow you to", "operations": ["UPD TextElement: <p>The strategy object provides callback methods that allow you to from <p>The strategy object provides callback methods that allow you to to The strategy object provides callback methods that allow you to"]}, {"root": "UPDATE from <p>As most multi-realm applications require at least one Realm authenticates successfully, the default to As most multi-realm applications require at least one Realm authenticates successfully, the default", "operations": ["UPD TextElement: <p>As most multi-realm applications require at least one Realm authenticates successfully, the default from <p>As most multi-realm applications require at least one Realm authenticates successfully, the default to As most multi-realm applications require at least one Realm authenticates successfully, the default"]}, {"root": "UPDATE from by default. to  by default.", "operations": ["UPD TextElement: by default. from by default. to  by default."]}, {"root": "UPDATE from <p>Unless overridden by to Unless overridden by", "operations": ["UPD TextElement: <p>Unless overridden by from <p>Unless overridden by to Unless overridden by"]}, {"root": "UPDATE from <p>Attempts to authenticate the given token by iterating over the internal collection of to Attempts to authenticate the given token by iterating over the internal collection of", "operations": ["UPD TextElement: <p>Attempts to authenticate the given token by iterating over the internal collection of from <p>Attempts to authenticate the given token by iterating over the internal collection of to Attempts to authenticate the given token by iterating over the internal collection of"]}, {"root": "UPDATE from <p>After all realms have been consulted, the information from each realm is aggregated into a single to After all realms have been consulted, the information from each realm is aggregated into a single", "operations": ["UPD TextElement: <p>After all realms have been consulted, the information from each realm is aggregated into a single from <p>After all realms have been consulted, the information from each realm is aggregated into a single to After all realms have been consulted, the information from each realm is aggregated into a single"]}, {"root": "UPDATE from <p>Shiro's Realm implementations all implement the  to Shiro's Realm implementations all implement the ", "operations": ["UPD TextElement: <p>Shiro's Realm implementations all implement the  from <p>Shiro's Realm implementations all implement the  to Shiro's Realm implementations all implement the "]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.ArrayList"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: realm", "DEL SimpleName: AuthenticationStrategy", "DEL TagElement: @link", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL TextElement: AuthenticationStrategy", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodRefParameter", "DEL SimpleName: realm", "DEL SimpleName: realm", "DEL TextElement: this would set a single realm, no ", "DEL TextElement:  the realm to consult during an authentication attempt.", "DEL SimpleName: setAuthenticationStrategy", "DEL SimpleName: ModularRealmAuthenticator", "DEL Block", "DEL SimpleName: setRealm", "DEL TextElement: Constructor which initializes this ", "DEL TextElement:  with a single realm to use during", "DEL SimpleType: Realm", "DEL SimpleName: Realm", "DEL TextElement:  Authenticator", "DEL Modifier: public", "DEL TagElement", "DEL TagElement: @param", "DEL MethodRef", "DEL SimpleType: AuthenticationStrategy", "DEL MethodDeclaration", "DEL TextElement: an authentiation attempt.  Because", "DEL TagElement: @code", "DEL TextElement:  would be used during authentication attempts."]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement: @link", "DEL SimpleName: setRealms", "DEL ParameterizedType: List<Realm>", "DEL TagElement: @param", "DEL SimpleType: Realm", "DEL Block", "DEL TextElement:  the realms to consult during an authentication attempt.", "DEL TagElement", "DEL SimpleName: List", "DEL SimpleName: AuthenticationStrategy", "DEL TextElement: consulted during an authentication attempt, effectively enabling PAM (Pluggable Authentication Module)", "DEL SimpleType: AuthenticationStrategy", "DEL MethodInvocation", "DEL SimpleName: realms", "DEL MethodRefParameter", "DEL TextElement: Constructor which initializes this ", "DEL ExpressionStatement", "DEL SimpleType: List", "DEL MethodRef", "DEL SimpleName: realms", "DEL SimpleName: setAuthenticationStrategy", "DEL TagElement: @code", "DEL TextElement:  Authenticator", "DEL TextElement:  with multiple realms that will be", "DEL SimpleName: Realm", "DEL Modifier: public", "DEL TextElement: behavior according to the configured", "DEL SingleVariableDeclaration", "DEL TextElement: .", "DEL MethodDeclaration", "DEL Javadoc", "DEL TextElement:  AuthenticationStrategy", "DEL SimpleName: realms", "DEL SimpleName: ModularRealmAuthenticator"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleName: Realm", "DEL SimpleName: add", "DEL TextElement: .", "DEL SimpleName: setRealm", "DEL SimpleName: setRealms", "DEL SimpleType: Realm", "DEL NumberLiteral: 1", "DEL ExpressionStatement", "DEL Block", "DEL TagElement", "DEL SimpleName: Realm", "DEL SimpleType: List", "DEL TagElement: @param", "DEL VariableDeclarationStatement", "DEL SimpleName: realm", "DEL ParameterizedType: ArrayList<Realm>", "DEL SimpleName: setRealms", "DEL SimpleName: realms", "DEL TextElement: Convenience setter for single-realm environments (fairly common).  This method just wraps the realm in a", "DEL Javadoc", "DEL SimpleType: Realm", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: Realm", "DEL TextElement: collection and then calls ", "DEL TagElement: @link", "DEL SimpleName: List", "DEL SimpleName: realms", "DEL SimpleName: Realm", "DEL SimpleName: ArrayList", "DEL SimpleName: realm", "DEL SimpleName: realm", "DEL ExpressionStatement", "DEL SimpleName: realms", "DEL SimpleType: ArrayList", "DEL TextElement:  the realm to consult during authentication attempts.", "DEL MemberRef", "DEL PrimitiveType: void", "DEL ParameterizedType: List<Realm>"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement:  property is configured incorrectly.", "DEL TextElement:  realms", "DEL TextElement:  implementation to ensure that the ", "DEL TextElement: Used by the internal ", "DEL TagElement: @link", "DEL TagElement: @throws", "DEL TextElement:  property", "DEL TagElement", "DEL MemberRef", "DEL TextElement:  if the ", "DEL TagElement: @code", "DEL SimpleName: IllegalStateException", "DEL Javadoc", "DEL TextElement: has been set.  The default implementation ensures the property is not null and not empty.", "DEL TagElement: @code", "DEL SimpleName: doAuthenticate", "DEL TextElement:  realms"]}]}}, {"ModularRealmAuthenticator_diff": {"operations": ["Update TextElement: <p>Using this Authenticator allows you to &quot;plug-in&quot; your own(27) to Using this Authenticator allows you to &quot;plug-in&quot; your own", "Update TextElement: <p>If only one realm is configured (this is often the case for most applications), authentication success is naturally(33) to If only one realm is configured (this is often the case for most applications), authentication success is naturally", "Update TextElement: <p>But if two or more realms are configured, PAM behavior is implemented by iterating over the collection of realms(44) to But if two or more realms are configured, PAM behavior is implemented by iterating over the collection of realms", "Update TextElement: <p>The strategy object provides callback methods that allow you to(59) to The strategy object provides callback methods that allow you to", "Update TextElement: <p>As most multi-realm applications require at least one Realm authenticates successfully, the default(63) to As most multi-realm applications require at least one Realm authenticates successfully, the default", "Update TextElement: by default.(138) to  by default.", "Update TextElement: <p>Unless overridden by(316) to Unless overridden by", "Update TextElement: <p>Attempts to authenticate the given token by iterating over the internal collection of(683) to Attempts to authenticate the given token by iterating over the internal collection of", "Update TextElement: <p>After all realms have been consulted, the information from each realm is aggregated into a single(719) to After all realms have been consulted, the information from each realm is aggregated into a single", "Update TextElement: <p>Shiro's Realm implementations all implement the (797) to Shiro's Realm implementations all implement the ", "Delete QualifiedName: java.util.ArrayList(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.util.List(16)", "Delete ImportDeclaration(17)", "Delete TextElement: Constructor which initializes this (153)", "Delete TextElement:  Authenticator(154)", "Delete TagElement: @code(155)", "Delete TextElement:  with a single realm to use during(156)", "Delete TextElement: an authentiation attempt.  Because(157)", "Delete TextElement: this would set a single realm, no (158)", "Delete SimpleName: setAuthenticationStrategy(159)", "Delete SimpleName: AuthenticationStrategy(160)", "Delete SimpleType: AuthenticationStrategy(161)", "Delete MethodRefParameter(162)", "Delete MethodRef(163)", "Delete TextElement: AuthenticationStrategy(164)", "Delete TagElement: @link(165)", "Delete TextElement:  would be used during authentication attempts.(166)", "Delete TagElement(167)", "Delete SimpleName: realm(168)", "Delete TextElement:  the realm to consult during an authentication attempt.(169)", "Delete TagElement: @param(170)", "Delete Javadoc(171)", "Delete Modifier: public(172)", "Delete SimpleName: ModularRealmAuthenticator(173)", "Delete SimpleName: Realm(174)", "Delete SimpleType: Realm(175)", "Delete SimpleName: realm(176)", "Delete SingleVariableDeclaration(177)", "Delete SimpleName: setRealm(178)", "Delete SimpleName: realm(179)", "Delete MethodInvocation(180)", "Delete ExpressionStatement(181)", "Delete Block(182)", "Delete MethodDeclaration(183)", "Delete TextElement: Constructor which initializes this (184)", "Delete TextElement:  Authenticator(185)", "Delete TagElement: @code(186)", "Delete TextElement:  with multiple realms that will be(187)", "Delete TextElement: consulted during an authentication attempt, effectively enabling PAM (Pluggable Authentication Module)(188)", "Delete TextElement: behavior according to the configured(189)", "Delete SimpleName: setAuthenticationStrategy(190)", "Delete SimpleName: AuthenticationStrategy(191)", "Delete SimpleType: AuthenticationStrategy(192)", "Delete MethodRefParameter(193)", "Delete MethodRef(194)", "Delete TextElement:  AuthenticationStrategy(195)", "Delete TagElement: @link(196)", "Delete TextElement: .(197)", "Delete TagElement(198)", "Delete SimpleName: realms(199)", "Delete TextElement:  the realms to consult during an authentication attempt.(200)", "Delete TagElement: @param(201)", "Delete Javadoc(202)", "Delete Modifier: public(203)", "Delete SimpleName: ModularRealmAuthenticator(204)", "Delete SimpleName: List(205)", "Delete SimpleType: List(206)", "Delete SimpleName: Realm(207)", "Delete SimpleType: Realm(208)", "Delete ParameterizedType: List<Realm>(209)", "Delete SimpleName: realms(210)", "Delete SingleVariableDeclaration(211)", "Delete SimpleName: setRealms(212)", "Delete SimpleName: realms(213)", "Delete MethodInvocation(214)", "Delete ExpressionStatement(215)", "Delete Block(216)", "Delete MethodDeclaration(217)", "Delete TextElement: Convenience setter for single-realm environments (fairly common).  This method just wraps the realm in a(218)", "Delete TextElement: collection and then calls (219)", "Delete SimpleName: setRealms(220)", "Delete MemberRef(221)", "Delete TagElement: @link(222)", "Delete TextElement: .(223)", "Delete TagElement(224)", "Delete SimpleName: realm(225)", "Delete TextElement:  the realm to consult during authentication attempts.(226)", "Delete TagElement: @param(227)", "Delete Javadoc(228)", "Delete Modifier: public(229)", "Delete PrimitiveType: void(230)", "Delete SimpleName: setRealm(231)", "Delete SimpleName: Realm(232)", "Delete SimpleType: Realm(233)", "Delete SimpleName: realm(234)", "Delete SingleVariableDeclaration(235)", "Delete SimpleName: List(236)", "Delete SimpleType: List(237)", "Delete SimpleName: Realm(238)", "Delete SimpleType: Realm(239)", "Delete ParameterizedType: List<Realm>(240)", "Delete SimpleName: realms(241)", "Delete SimpleName: ArrayList(242)", "Delete SimpleType: ArrayList(243)", "Delete SimpleName: Realm(244)", "Delete SimpleType: Realm(245)", "Delete ParameterizedType: ArrayList<Realm>(246)", "Delete NumberLiteral: 1(247)", "Delete ClassInstanceCreation(248)", "Delete VariableDeclarationFragment(249)", "Delete VariableDeclarationStatement(250)", "Delete SimpleName: realms(251)", "Delete SimpleName: add(252)", "Delete SimpleName: realm(253)", "Delete MethodInvocation(254)", "Delete ExpressionStatement(255)", "Delete SimpleName: setRealms(256)", "Delete SimpleName: realms(257)", "Delete MethodInvocation(258)", "Delete ExpressionStatement(259)", "Delete Block(260)", "Delete MethodDeclaration(261)", "Delete TextElement: Used by the internal (373)", "Delete SimpleName: doAuthenticate(374)", "Delete MemberRef(375)", "Delete TagElement: @link(376)", "Delete TextElement:  implementation to ensure that the (377)", "Delete TextElement:  realms(378)", "Delete TagElement: @code(379)", "Delete TextElement:  property(380)", "Delete TextElement: has been set.  The default implementation ensures the property is not null and not empty.(381)", "Delete TagElement(382)", "Delete SimpleName: IllegalStateException(383)", "Delete TextElement:  if the (384)", "Delete TextElement:  realms(385)", "Delete TagElement: @code(386)", "Delete TextElement:  property is configured incorrectly.(387)", "Delete TagElement: @throws(388)", "Delete Javadoc(389)"]}}, {"RolePermissionResolver_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 3"]}, {"root": "UPDATE from <p>A RolePermissionResolver resolves a String value and converts it into a Collection of to A RolePermissionResolver resolves a String value and converts it into a Collection of", "operations": ["UPD TextElement: <p>A RolePermissionResolver resolves a String value and converts it into a Collection of from <p>A RolePermissionResolver resolves a String value and converts it into a Collection of to A RolePermissionResolver resolves a String value and converts it into a Collection of"]}, {"root": "UPDATE from <BR/> to <p/>", "operations": ["UPD TextElement: <BR/> from <BR/> to <p/>"]}, {"root": "UPDATE from  my only be able to return a list of roles.  This  to  my only be able to return a list of roles.  This", "operations": ["UPD TextElement:  my only be able to return a list of roles.  This  from  my only be able to return a list of roles.  This  to  my only be able to return a list of roles.  This"]}, {"root": "INS TextElement:  a Collection of Permissions based on the given String representation. to TagElement: @return at 0", "operations": ["INS TextElement:  a Collection of Permissions based on the given String representation. to TagElement: @return at 0"]}, {"root": "DEL TextElement: <BR/>", "operations": ["DEL TextElement: <BR/>"]}]}}, {"RolePermissionResolver_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(42) at 3", "Update TextElement: <p>A RolePermissionResolver resolves a String value and converts it into a Collection of(6) to A RolePermissionResolver resolves a String value and converts it into a Collection of", "Update TextElement: <BR/>(10) to <p/>", "Update TextElement:  my only be able to return a list of roles.  This (14) to  my only be able to return a list of roles.  This", "Insert TextElement:  a Collection of Permissions based on the given String representation.(27) into TagElement: @return(28) at 0", "Delete TextElement: <BR/>(16)"]}}, {"RolePermissionResolverAware_cluster": {"actions": [{"root": "UPDATE from pr to rpr", "operations": ["UPD SimpleName: pr from pr to rpr"]}]}}, {"RolePermissionResolverAware_diff": {"operations": ["Update SimpleName: pr(28) to rpr"]}}, {"AbstractSessionManager_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: org.apache.shiro.session.InvalidSessionException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: org.apache.shiro.session.SessionListener to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: org.apache.shiro.session.UnknownSessionException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "UPDATE from org.apache.shiro.session to org.apache.shiro.session.Session", "operations": ["UPD QualifiedName: org.apache.shiro.session from org.apache.shiro.session to org.apache.shiro.session.Session"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 17", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 17", "INS SingleMemberAnnotation to MethodDeclaration at 0", "INS ParameterizedType: Collection<SessionListener> to MethodDeclaration at 2", "INS SimpleName: getSessionListeners to MethodDeclaration at 3", "INS SimpleType: Collection to ParameterizedType: Collection<SessionListener> at 0", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS ArrayInitializer to SingleMemberAnnotation at 1", "INS StringLiteral: \"UnusedDeclaration\" to ArrayInitializer at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 4"]}, {"root": "MOVE from ParameterizedType: Collection<SessionListener>", "operations": ["MOV SimpleType: SessionListener to ParameterizedType: Collection<SessionListener> at 1"]}, {"root": "UPDATE from SessionListener to Collection", "operations": ["UPD SimpleName: SessionListener from SessionListener to Collection"]}, {"root": "MOVE from SimpleType: Collection", "operations": ["MOV SimpleName: SessionListener to SimpleType: Collection at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV FieldAccess to ReturnStatement at 0"]}, {"root": "DEL SimpleType: SessionListenerRegistrar", "operations": ["DEL SimpleName: SessionListenerRegistrar", "DEL SimpleType: SessionListenerRegistrar"]}, {"root": "DEL MethodInvocation", "operations": ["DEL FieldAccess", "DEL SimpleName: listeners", "DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleName: remove", "DEL SimpleName: listener"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL SimpleName: add", "DEL SimpleName: listener", "DEL SimpleName: listener", "DEL SimpleName: add", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Block", "DEL PrimitiveType: void"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL SimpleName: remove", "DEL SimpleType: SessionListener", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL PrimitiveType: boolean", "DEL SimpleName: listener"]}]}}, {"AbstractSessionManager_diff": {"operations": ["Insert ImportDeclaration(7) into CompilationUnit(1038) at 3", "Insert ImportDeclaration(11) into CompilationUnit(1038) at 5", "Insert ImportDeclaration(13) into CompilationUnit(1038) at 6", "Insert QualifiedName: org.apache.shiro.session.InvalidSessionException(6) into ImportDeclaration(7) at 0", "Update QualifiedName: org.apache.shiro.session(6) to org.apache.shiro.session.Session", "Insert QualifiedName: org.apache.shiro.session.SessionListener(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: org.apache.shiro.session.UnknownSessionException(12) into ImportDeclaration(13) at 0", "Insert MethodDeclaration(240) into TypeDeclaration: class(1037) at 16", "Insert SingleMemberAnnotation(227) into MethodDeclaration(240) at 0", "Move Modifier: public(220) into MethodDeclaration(240) at 1", "Insert ParameterizedType: Collection<SessionListener>(233) into MethodDeclaration(240) at 2", "Insert SimpleName: getSessionListeners(234) into MethodDeclaration(240) at 3", "Move Block(250) into MethodDeclaration(240) at 4", "Insert SimpleName: SuppressWarnings(224) into SingleMemberAnnotation(227) at 0", "Insert ArrayInitializer(226) into SingleMemberAnnotation(227) at 1", "Insert SimpleType: Collection(230) into ParameterizedType: Collection<SessionListener>(233) at 0", "Move SimpleType: SessionListener(224) into ParameterizedType: Collection<SessionListener>(233) at 1", "Insert StringLiteral: \"UnusedDeclaration\"(225) into ArrayInitializer(226) at 0", "Update SimpleName: SessionListener(239) to Collection", "Move SimpleName: SessionListener(239) into SimpleType: Collection(230) at 0", "Move FieldAccess(229) into ReturnStatement(238) at 0", "Delete SimpleName: SessionListenerRegistrar(30)", "Delete SimpleType: SessionListenerRegistrar(31)", "Delete ThisExpression(243)", "Delete SimpleName: listeners(244)", "Delete FieldAccess(245)", "Delete SimpleName: remove(246)", "Delete SimpleName: listener(247)", "Delete MethodInvocation(248)", "Delete PrimitiveType: void(221)", "Delete SimpleName: add(222)", "Delete SimpleName: listener(225)", "Delete SingleVariableDeclaration(226)", "Delete SimpleName: add(230)", "Delete SimpleName: listener(231)", "Delete MethodInvocation(232)", "Delete ExpressionStatement(233)", "Delete Block(234)", "Delete MethodDeclaration(235)", "Delete Modifier: public(236)", "Delete PrimitiveType: boolean(237)", "Delete SimpleName: remove(238)", "Delete SimpleType: SessionListener(240)", "Delete SimpleName: listener(241)", "Delete SingleVariableDeclaration(242)", "Delete MethodDeclaration(251)"]}}, {"AbstractValidatingSessionManager_cluster": {"actions": [{"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: sessionValidationSchedulerEnabled to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS BooleanLiteral: true to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: sessionValidationInterval to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: DEFAULT_SESSION_VALIDATION_INTERVAL to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 1", "INS FieldAccess to Assignment: = at 0"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL SimpleName: DEFAULT_SESSION_VALIDATION_INTERVAL", "operations": ["DEL SimpleName: DEFAULT_SESSION_VALIDATION_INTERVAL"]}]}}, {"AbstractValidatingSessionManager_diff": {"operations": ["Insert ExpressionStatement(104) into Block(111) at 0", "Insert ExpressionStatement(110) into Block(111) at 1", "Insert Assignment: =(103) into ExpressionStatement(104) at 0", "Insert Assignment: =(109) into ExpressionStatement(110) at 0", "Insert FieldAccess(101) into Assignment: =(103) at 0", "Insert BooleanLiteral: true(102) into Assignment: =(103) at 1", "Insert FieldAccess(107) into Assignment: =(109) at 0", "Insert SimpleName: DEFAULT_SESSION_VALIDATION_INTERVAL(108) into Assignment: =(109) at 1", "Insert ThisExpression(99) into FieldAccess(101) at 0", "Insert SimpleName: sessionValidationSchedulerEnabled(100) into FieldAccess(101) at 1", "Insert ThisExpression(105) into FieldAccess(107) at 0", "Insert SimpleName: sessionValidationInterval(106) into FieldAccess(107) at 1", "Delete BooleanLiteral: true(81)", "Delete NullLiteral(91)", "Delete SimpleName: DEFAULT_SESSION_VALIDATION_INTERVAL(97)"]}}, {"DefaultSessionManager_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 13"]}, {"root": "UPDATE from org.apache.shiro.util.CollectionUtils to java.util.Collections", "operations": ["UPD QualifiedName: org.apache.shiro.util.CollectionUtils from org.apache.shiro.util.CollectionUtils to java.util.Collections"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS StringLiteral: \"UnusedDeclaration\" to ArrayInitializer at 0", "INS ArrayInitializer to SingleMemberAnnotation at 1", "INS SingleMemberAnnotation to MethodDeclaration at 0", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 1", "operations": ["INS SingleMemberAnnotation to MethodDeclaration at 1", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS ArrayInitializer to SingleMemberAnnotation at 1", "INS StringLiteral: \"UnusedDeclaration\" to ArrayInitializer at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: deleteInvalidSessions to FieldAccess at 1", "INS BooleanLiteral: true to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "UPDATE from CollectionUtils to Collections", "operations": ["UPD SimpleName: CollectionUtils from CollectionUtils to Collections"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleType: Session to MethodInvocation at 1"]}, {"root": "UPDATE from emptyCollection to emptySet", "operations": ["UPD SimpleName: emptyCollection from emptyCollection to emptySet"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.shiro.session.mgt.eis.SessionDAOAware"]}, {"root": "DEL SimpleType: SessionFactoryAware", "operations": ["DEL SimpleName: SessionFactoryAware", "DEL SimpleType: SessionFactoryAware"]}, {"root": "DEL SimpleType: SessionDAOAware", "operations": ["DEL SimpleType: SessionDAOAware", "DEL SimpleName: SessionDAOAware"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL TypeLiteral", "operations": ["DEL TypeLiteral"]}]}}, {"DefaultSessionManager_diff": {"operations": ["Move ImportDeclaration(17) into CompilationUnit(620) at 13", "Update QualifiedName: org.apache.shiro.util.CollectionUtils(16) to java.util.Collections", "Insert SingleMemberAnnotation(123) into MethodDeclaration(133) at 0", "Insert SingleMemberAnnotation(276) into MethodDeclaration(290) at 1", "Insert ExpressionStatement(86) into Block(103) at 0", "Insert SimpleName: SuppressWarnings(120) into SingleMemberAnnotation(123) at 0", "Insert ArrayInitializer(122) into SingleMemberAnnotation(123) at 1", "Insert SimpleName: SuppressWarnings(273) into SingleMemberAnnotation(276) at 0", "Insert ArrayInitializer(275) into SingleMemberAnnotation(276) at 1", "Insert Assignment: =(85) into ExpressionStatement(86) at 0", "Insert StringLiteral: \"UnusedDeclaration\"(121) into ArrayInitializer(122) at 0", "Insert StringLiteral: \"UnusedDeclaration\"(274) into ArrayInitializer(275) at 0", "Insert FieldAccess(83) into Assignment: =(85) at 0", "Insert BooleanLiteral: true(84) into Assignment: =(85) at 1", "Insert ThisExpression(81) into FieldAccess(83) at 0", "Insert SimpleName: deleteInvalidSessions(82) into FieldAccess(83) at 1", "Update SimpleName: CollectionUtils(603) to Collections", "Move SimpleType: Session(606) into MethodInvocation(614) at 1", "Update SimpleName: emptyCollection(604) to emptySet", "Delete QualifiedName: org.apache.shiro.session.mgt.eis.SessionDAOAware(14)", "Delete ImportDeclaration(15)", "Delete SimpleName: SessionFactoryAware(50)", "Delete SimpleType: SessionFactoryAware(51)", "Delete SimpleName: SessionDAOAware(52)", "Delete SimpleType: SessionDAOAware(53)", "Delete BooleanLiteral: true(83)", "Delete TypeLiteral(607)"]}}, {"SessionFactoryAware_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.shiro.session.mgt", "DEL PackageDeclaration"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL SimpleName: setSessionFactory", "DEL TextElement:  instance.", "DEL TypeDeclaration: interface", "DEL Modifier: public", "DEL SimpleType: SessionFactory", "DEL TagElement: @link", "DEL TextElement: Allows interested components to receive a configured ", "DEL Javadoc", "DEL TagElement: @param", "DEL TagElement: @link", "DEL TagElement: @since", "DEL TagElement", "DEL SimpleName: sessionFactory", "DEL TagElement: @author", "DEL SimpleName: SessionFactory", "DEL SimpleName: SessionFactory", "DEL Javadoc", "DEL SimpleName: SessionFactoryAware", "DEL TagElement: @link", "DEL PrimitiveType: void", "DEL TextElement:  the session factory to use to generate ", "DEL QualifiedName: org.apache.shiro.session.Session", "DEL TagElement", "DEL TextElement:  Session", "DEL QualifiedName: org.apache.shiro.session.Session", "DEL TextElement:  Session", "DEL TextElement:  Les Hazlewood", "DEL TextElement:  1.0", "DEL TextElement: s.", "DEL TextElement: s.", "DEL TextElement: Sets the session factory to use to generate ", "DEL MethodDeclaration", "DEL SimpleName: sessionFactory", "DEL SingleVariableDeclaration"]}]}}, {"SessionFactoryAware_diff": {"operations": ["Delete QualifiedName: org.apache.shiro.session.mgt(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Allows interested components to receive a configured (2)", "Delete SimpleName: SessionFactory(3)", "Delete TagElement: @link(4)", "Delete TextElement:  instance.(5)", "Delete TagElement(6)", "Delete TextElement:  Les Hazlewood(7)", "Delete TagElement: @author(8)", "Delete TextElement:  1.0(9)", "Delete TagElement: @since(10)", "Delete Javadoc(11)", "Delete Modifier: public(12)", "Delete SimpleName: SessionFactoryAware(13)", "Delete TextElement: Sets the session factory to use to generate (14)", "Delete QualifiedName: org.apache.shiro.session.Session(15)", "Delete TextElement:  Session(16)", "Delete TagElement: @link(17)", "Delete TextElement: s.(18)", "Delete TagElement(19)", "Delete SimpleName: sessionFactory(20)", "Delete TextElement:  the session factory to use to generate (21)", "Delete QualifiedName: org.apache.shiro.session.Session(22)", "Delete TextElement:  Session(23)", "Delete TagElement: @link(24)", "Delete TextElement: s.(25)", "Delete TagElement: @param(26)", "Delete Javadoc(27)", "Delete PrimitiveType: void(28)", "Delete SimpleName: setSessionFactory(29)", "Delete SimpleName: SessionFactory(30)", "Delete SimpleType: SessionFactory(31)", "Delete SimpleName: sessionFactory(32)", "Delete SingleVariableDeclaration(33)", "Delete MethodDeclaration(34)", "Delete TypeDeclaration: interface(35)"]}}, {"IniFilterChainResolverFactory_cluster": {"actions": [{"root": "UPDATE from \"The [{}] section is being removed in the upcoming releae!  Please immediately \" to \"The [{}] section is being removed in the upcoming release!  Please immediately \"", "operations": ["UPD StringLiteral: \"The [{}] section is being removed in the upcoming releae!  Please immediately \" from \"The [{}] section is being removed in the upcoming releae!  Please immediately \" to \"The [{}] section is being removed in the upcoming release!  Please immediately \""]}]}}, {"IniFilterChainResolverFactory_diff": {"operations": ["Update StringLiteral: \"The [{}] section is being removed in the upcoming releae!  Please immediately \"(269) to \"The [{}] section is being removed in the upcoming release!  Please immediately \""]}}, {"CookieRememberMeManager_cluster": {"actions": [{"root": "INS SingleMemberAnnotation to MethodDeclaration at 1", "operations": ["INS ArrayInitializer to SingleMemberAnnotation at 1", "INS SingleMemberAnnotation to MethodDeclaration at 1", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS StringLiteral: \"UnusedDeclaration\" to ArrayInitializer at 0"]}, {"root": "UPDATE from protected to public", "operations": ["UPD Modifier: protected from protected to public"]}]}}, {"CookieRememberMeManager_diff": {"operations": ["Insert SingleMemberAnnotation(243) into MethodDeclaration(258) at 1", "Update Modifier: protected(766) to public", "Insert SimpleName: SuppressWarnings(240) into SingleMemberAnnotation(243) at 0", "Insert ArrayInitializer(242) into SingleMemberAnnotation(243) at 1", "Insert StringLiteral: \"UnusedDeclaration\"(241) into ArrayInitializer(242) at 0"]}}, {"DelegatingWebSessionManager_cluster": {"actions": [{"root": "INS TextElement: WARNING: THIS IS A WORK IN PROGRESS AND IS NOT RECOMMENDED FOR USE! to TagElement at 0", "operations": ["INS TextElement: WARNING: THIS IS A WORK IN PROGRESS AND IS NOT RECOMMENDED FOR USE! to TagElement at 0"]}]}}, {"DelegatingWebSessionManager_diff": {"operations": ["Insert TextElement: WARNING: THIS IS A WORK IN PROGRESS AND IS NOT RECOMMENDED FOR USE!(28) into TagElement(67) at 0"]}}, {"SessionDAOAware_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.shiro.session.mgt.eis"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL Javadoc", "DEL SimpleName: sessionDAO", "DEL Javadoc", "DEL TextElement:  to use for ", "DEL SingleVariableDeclaration", "DEL SimpleName: SessionDAOAware", "DEL SimpleType: SessionDAO", "DEL SimpleName: SessionDAO", "DEL TypeDeclaration: interface", "DEL SimpleName: setSessionDAO", "DEL TagElement: @link", "DEL TagElement", "DEL TagElement: @author", "DEL TextElement: Sets the ", "DEL MethodDeclaration", "DEL TextElement:  Session", "DEL TextElement:  to use for ", "DEL TextElement:  CRUD operations.", "DEL TextElement:  Session", "DEL QualifiedName: org.apache.shiro.session.Session", "DEL Modifier: public", "DEL TextElement:  1.0", "DEL TagElement: @link", "DEL QualifiedName: org.apache.shiro.session.Session", "DEL TextElement:  CRUD operations.", "DEL TagElement: @link", "DEL TagElement: @since", "DEL SimpleName: SessionDAO", "DEL PrimitiveType: void", "DEL TagElement", "DEL TextElement:  instance.", "DEL SimpleName: SessionDAO", "DEL TagElement: @link", "DEL TextElement:  Les Hazlewood", "DEL TagElement: @param", "DEL TextElement:  the ", "DEL TagElement: @link", "DEL TextElement: Allows interested components to receive a configured ", "DEL SimpleName: sessionDAO", "DEL SimpleName: SessionDAO"]}]}}, {"SessionDAOAware_diff": {"operations": ["Delete QualifiedName: org.apache.shiro.session.mgt.eis(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Allows interested components to receive a configured (2)", "Delete SimpleName: SessionDAO(3)", "Delete TagElement: @link(4)", "Delete TextElement:  instance.(5)", "Delete TagElement(6)", "Delete TextElement:  Les Hazlewood(7)", "Delete TagElement: @author(8)", "Delete TextElement:  1.0(9)", "Delete TagElement: @since(10)", "Delete Javadoc(11)", "Delete Modifier: public(12)", "Delete SimpleName: SessionDAOAware(13)", "Delete TextElement: Sets the (14)", "Delete SimpleName: SessionDAO(15)", "Delete TagElement: @link(16)", "Delete TextElement:  to use for (17)", "Delete QualifiedName: org.apache.shiro.session.Session(18)", "Delete TextElement:  Session(19)", "Delete TagElement: @link(20)", "Delete TextElement:  CRUD operations.(21)", "Delete TagElement(22)", "Delete SimpleName: sessionDAO(23)", "Delete TextElement:  the (24)", "Delete SimpleName: SessionDAO(25)", "Delete TagElement: @link(26)", "Delete TextElement:  to use for (27)", "Delete QualifiedName: org.apache.shiro.session.Session(28)", "Delete TextElement:  Session(29)", "Delete TagElement: @link(30)", "Delete TextElement:  CRUD operations.(31)", "Delete TagElement: @param(32)", "Delete Javadoc(33)", "Delete PrimitiveType: void(34)", "Delete SimpleName: setSessionDAO(35)", "Delete SimpleName: SessionDAO(36)", "Delete SimpleType: SessionDAO(37)", "Delete SimpleName: sessionDAO(38)", "Delete SingleVariableDeclaration(39)", "Delete MethodDeclaration(40)", "Delete TypeDeclaration: interface(41)"]}}, {"Account_cluster": {"actions": [{"root": "INS Modifier: volatile to FieldDeclaration at 1", "operations": ["INS Modifier: volatile to FieldDeclaration at 1"]}, {"root": "INS Modifier: final to FieldDeclaration at 1", "operations": ["INS Modifier: final to FieldDeclaration at 1"]}]}}, {"Account_diff": {"operations": ["Insert Modifier: volatile(36) into FieldDeclaration(40) at 1", "Insert Modifier: final(47) into FieldDeclaration(55) at 1"]}}, {"AccountTransaction_cluster": {"actions": [{"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: AccountTransaction to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: AccountTransaction to MethodDeclaration at 2"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "DEL SimpleType: AccountTransaction", "operations": ["DEL SimpleType: AccountTransaction", "DEL SimpleName: AccountTransaction"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: tx", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement"]}, {"root": "DEL SimpleName: tx", "operations": ["DEL SimpleName: tx"]}, {"root": "DEL SimpleType: AccountTransaction", "operations": ["DEL SimpleType: AccountTransaction", "DEL SimpleName: AccountTransaction"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: tx", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment"]}, {"root": "DEL SimpleName: tx", "operations": ["DEL SimpleName: tx"]}]}}, {"AccountTransaction_diff": {"operations": ["Move SimpleType: AccountTransaction(70) into MethodDeclaration(77) at 2", "Move SimpleType: AccountTransaction(96) into MethodDeclaration(97) at 2", "Move ClassInstanceCreation(77) into ReturnStatement(75) at 0", "Move ClassInstanceCreation(103) into ReturnStatement(95) at 0", "Delete SimpleName: AccountTransaction(60)", "Delete SimpleType: AccountTransaction(61)", "Delete SimpleName: tx(71)", "Delete VariableDeclarationFragment(78)", "Delete VariableDeclarationStatement(79)", "Delete SimpleName: tx(80)", "Delete SimpleName: AccountTransaction(86)", "Delete SimpleType: AccountTransaction(87)", "Delete SimpleName: tx(97)", "Delete VariableDeclarationFragment(104)", "Delete VariableDeclarationStatement(105)", "Delete SimpleName: tx(106)"]}}, {"SecureBankService_cluster": {"actions": [{"root": "INS Modifier: volatile to FieldDeclaration at 1", "operations": ["INS Modifier: volatile to FieldDeclaration at 1"]}, {"root": "INS Modifier: final to FieldDeclaration at 1", "operations": ["INS Modifier: final to FieldDeclaration at 1"]}]}}, {"SecureBankService_diff": {"operations": ["Insert Modifier: volatile(31) into FieldDeclaration(35) at 1", "Insert Modifier: final(37) into FieldDeclaration(45) at 1"]}}], "commit_stats": [{"total_files": 41, "deleted_files": 6, "testing": "True", "maintenance": "True", "build": "False"}]}