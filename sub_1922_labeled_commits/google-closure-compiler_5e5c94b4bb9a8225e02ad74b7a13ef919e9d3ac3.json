{"application": "google-closure-compiler", "csha": "5e5c94b4bb9a8225e02ad74b7a13ef919e9d3ac3", "files": [{"InlineProperties_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 9"]}, {"root": "INS SimpleType: InvalidatingTypes to FieldDeclaration at 2", "operations": ["INS SimpleType: InvalidatingTypes to FieldDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleName: InlineProperties to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 2"]}, {"root": "UPDATE from TypeI to InvalidatingTypes", "operations": ["UPD SimpleName: TypeI from TypeI to InvalidatingTypes"]}, {"root": "MOVE from SimpleType: InvalidatingTypes", "operations": ["MOV SimpleName: TypeI to SimpleType: InvalidatingTypes at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3", "MOV ExpressionStatement to Block at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS FieldAccess to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: invalidatingTypes to FieldAccess at 1", "INS ClassInstanceCreation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: InvalidatingTypes.Builder to ClassInstanceCreation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS QualifiedName: InvalidatingTypes.Builder to SimpleType: InvalidatingTypes.Builder at 0"]}, {"root": "UPDATE from registry to build", "operations": ["UPD SimpleName: registry from registry to build"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: registry to MethodInvocation at 1"]}, {"root": "UPDATE from getNativeType to addAllTypeMismatches", "operations": ["UPD SimpleName: getNativeType from getNativeType to addAllTypeMismatches"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getNativeType to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "INS SimpleName: invalidatingTypes to MethodInvocation at 0", "operations": ["INS SimpleName: invalidatingTypes to MethodInvocation at 0"]}, {"root": "UPDATE from isInvalidatingType to isInvalidating", "operations": ["UPD SimpleName: isInvalidatingType from isInvalidatingType to isInvalidating", "UPD SimpleName: isInvalidatingType from isInvalidatingType to isInvalidating"]}, {"root": "UPDATE from getNativeType to addTypesInvalidForPropertyRenaming", "operations": ["UPD SimpleName: getNativeType from getNativeType to addTypesInvalidForPropertyRenaming"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getNativeType to MethodInvocation at 1"]}, {"root": "INS SimpleName: invalidatingTypes to MethodInvocation at 0", "operations": ["INS SimpleName: invalidatingTypes to MethodInvocation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.ImmutableList"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.javascript.rhino.ObjectTypeI"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.javascript.rhino.TypeIRegistry", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashSet"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Set", "DEL ImportDeclaration"]}, {"root": "DEL ParameterizedType: Set<TypeI>", "operations": ["DEL SimpleType: TypeI", "DEL SimpleType: Set", "DEL ParameterizedType: Set<TypeI>", "DEL SimpleName: Set"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: HashSet", "DEL ParameterizedType: HashSet<>", "DEL SimpleType: HashSet", "DEL ClassInstanceCreation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: TypeIRegistry", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: registry", "DEL SimpleName: TypeIRegistry"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL QualifiedName: JSTypeNative.UNKNOWN_TYPE", "DEL SimpleName: of", "DEL MethodInvocation", "DEL SimpleName: registry", "DEL MethodInvocation", "DEL QualifiedName: JSTypeNative.NULL_TYPE", "DEL SimpleName: registry", "DEL QualifiedName: JSTypeNative.VOID_TYPE", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getNativeType", "DEL SimpleName: getNativeType", "DEL QualifiedName: JSTypeNative.FUNCTION_PROTOTYPE", "DEL SimpleName: addAll", "DEL SimpleName: getNativeType", "DEL SimpleName: registry", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: registry", "DEL SimpleName: getNativeType", "DEL QualifiedName: JSTypeNative.FUNCTION_INSTANCE_TYPE", "DEL SimpleName: getNativeType", "DEL SimpleName: registry", "DEL MethodInvocation", "DEL SimpleName: registry", "DEL SimpleName: getNativeType", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: registry", "DEL MethodInvocation", "DEL SimpleName: getNativeType", "DEL QualifiedName: JSTypeNative.OBJECT_PROTOTYPE", "DEL SimpleName: registry", "DEL SimpleName: registry", "DEL MethodInvocation", "DEL QualifiedName: JSTypeNative.FUNCTION_FUNCTION_TYPE", "DEL SimpleName: registry", "DEL SimpleName: registry", "DEL SimpleName: getNativeType", "DEL MethodInvocation", "DEL SimpleName: registry", "DEL SimpleName: invalidatingTypes", "DEL MethodInvocation", "DEL QualifiedName: JSTypeNative.NO_TYPE", "DEL SimpleName: getNativeType", "DEL SimpleName: getNativeType", "DEL QualifiedName: JSTypeNative.NO_OBJECT_TYPE", "DEL SimpleName: getNativeType", "DEL QualifiedName: JSTypeNative.OBJECT_FUNCTION_TYPE", "DEL MethodInvocation", "DEL SimpleName: getNativeType", "DEL QualifiedName: JSTypeNative.ALL_TYPE", "DEL QualifiedName: JSTypeNative.OBJECT_TYPE", "DEL QualifiedName: JSTypeNative.GLOBAL_THIS", "DEL SimpleName: ImmutableList", "DEL QualifiedName: JSTypeNative.TOP_LEVEL_PROTOTYPE", "DEL MethodInvocation", "DEL SimpleName: registry"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL ExpressionStatement", "DEL EnhancedForStatement", "DEL SimpleName: mis", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleType: TypeMismatch", "DEL QualifiedName: mis.typeA", "DEL QualifiedName: mis.typeB", "DEL SimpleName: addInvalidatingType", "DEL SimpleName: addInvalidatingType", "DEL SimpleName: TypeMismatch", "DEL Block", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL SimpleName: buildInvalidatingTypeSet", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: buildInvalidatingTypeSet", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL Modifier: private"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: addInvalidatingType", "DEL Block", "DEL SimpleName: type", "DEL SimpleName: alt", "DEL SimpleName: invalidatingTypes", "DEL SimpleName: getUnionMembers", "DEL SimpleName: TypeI", "DEL NullLiteral", "DEL SimpleName: isInstanceType", "DEL ExpressionStatement", "DEL SimpleName: type", "DEL Modifier: private", "DEL EnhancedForStatement", "DEL ExpressionStatement", "DEL SimpleName: objType", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: type", "DEL InfixExpression: !=", "DEL SimpleName: restrictByNotNullOrUndefined", "DEL SimpleType: ObjectTypeI", "DEL SimpleName: objType", "DEL SimpleName: TypeI", "DEL SimpleName: objType", "DEL Javadoc", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: type", "DEL SimpleName: type", "DEL MethodInvocation", "DEL Assignment: =", "DEL InfixExpression: &&", "DEL VariableDeclarationFragment", "DEL SimpleName: add", "DEL SimpleName: toMaybeObjectType", "DEL SimpleType: TypeI", "DEL SimpleName: getPrototypeObject", "DEL Block", "DEL MethodInvocation", "DEL TextElement: Invalidates the given type, so that no properties on it will be inlined. ", "DEL SingleVariableDeclaration", "DEL SimpleName: alt", "DEL SimpleName: invalidatingTypes", "DEL Block", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: add", "DEL VariableDeclarationStatement", "DEL SimpleName: isUnionType", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: ObjectTypeI", "DEL SimpleName: objType", "DEL IfStatement", "DEL PrimitiveType: void", "DEL SimpleType: TypeI", "DEL IfStatement", "DEL TagElement", "DEL SimpleName: type", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: type", "DEL SimpleName: addInvalidatingType"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: isInvalidatingType", "DEL SimpleType: TypeI", "DEL SimpleName: invalidatingTypes", "DEL InfixExpression: ||", "DEL SimpleName: type", "DEL NullLiteral", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL EnhancedForStatement", "DEL ParenthesizedExpression", "DEL SimpleName: objType", "DEL Block", "DEL SimpleName: restrictByNotNullOrUndefined", "DEL MethodInvocation", "DEL SimpleName: type", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL InfixExpression: ==", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: getUnionMembers", "DEL SimpleName: objType", "DEL SimpleName: alt", "DEL SimpleName: isInvalidatingType", "DEL ReturnStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: ObjectTypeI", "DEL SimpleName: type", "DEL SimpleName: type", "DEL InfixExpression: ||", "DEL IfStatement", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL SimpleName: isBottom", "DEL Modifier: private", "DEL SimpleName: alt", "DEL SimpleName: isUnionType", "DEL SimpleName: TypeI", "DEL InfixExpression: ||", "DEL InfixExpression: ||", "DEL SimpleName: type", "DEL SimpleName: TypeI", "DEL MethodInvocation", "DEL SimpleType: TypeI", "DEL SimpleName: isBoxableScalar", "DEL ExpressionStatement", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL PrefixExpression: !", "DEL SimpleName: objType", "DEL SimpleName: toMaybeObjectType", "DEL Block", "DEL SimpleName: type", "DEL ReturnStatement", "DEL SimpleName: isUnknownObject", "DEL SimpleName: type", "DEL SimpleName: type", "DEL TagElement", "DEL SimpleName: objType", "DEL SimpleName: objType", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL SimpleName: isUnknownType", "DEL SimpleName: isInstanceType", "DEL SimpleName: isConstructor", "DEL SimpleName: objType", "DEL SingleVariableDeclaration", "DEL SimpleName: isEnumObject", "DEL SimpleName: objType", "DEL IfStatement", "DEL SimpleName: objType", "DEL Assignment: =", "DEL SimpleName: isUnionType", "DEL SimpleName: contains", "DEL InfixExpression: ||", "DEL SimpleType: ObjectTypeI", "DEL InfixExpression: ||", "DEL ReturnStatement", "DEL SimpleName: objType", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL TextElement: Returns true if properties on this type should not be inlined. ", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block"]}]}}, {"InlineProperties_diff": {"operations": ["Insert MethodDeclaration(156) into TypeDeclaration: class(828) at 9", "Insert SimpleType: InvalidatingTypes(117) into FieldDeclaration(120) at 2", "Move SimpleName: InlineProperties(138) into MethodDeclaration(156) at 0", "Move SingleVariableDeclaration(142) into MethodDeclaration(156) at 1", "Move Block(248) into MethodDeclaration(156) at 2", "Update SimpleName: TypeI(128) to InvalidatingTypes", "Move SimpleName: TypeI(128) into SimpleType: InvalidatingTypes(117) at 0", "Move ExpressionStatement(148) into Block(155) at 0", "Move ExpressionStatement(154) into Block(155) at 3", "Insert Assignment: =(150) into ExpressionStatement(151) at 0", "Insert FieldAccess(134) into Assignment: =(150) at 0", "Insert MethodInvocation(149) into Assignment: =(150) at 1", "Insert ThisExpression(132) into FieldAccess(134) at 0", "Insert SimpleName: invalidatingTypes(133) into FieldAccess(134) at 1", "Insert MethodInvocation(147) into MethodInvocation(149) at 0", "Update SimpleName: registry(192) to build", "Move SimpleName: registry(192) into MethodInvocation(149) at 1", "Insert MethodInvocation(142) into MethodInvocation(147) at 0", "Update SimpleName: getNativeType(189) to addAllTypeMismatches", "Move SimpleName: getNativeType(189) into MethodInvocation(147) at 1", "Move MethodInvocation(237) into MethodInvocation(147) at 2", "Insert SimpleName: invalidatingTypes(796) into MethodInvocation(799) at 0", "Update SimpleName: isInvalidatingType(1046) to isInvalidating", "Insert ClassInstanceCreation(140) into MethodInvocation(142) at 0", "Update SimpleName: getNativeType(185) to addTypesInvalidForPropertyRenaming", "Move SimpleName: getNativeType(185) into MethodInvocation(142) at 1", "Insert SimpleName: invalidatingTypes(580) into MethodInvocation(583) at 0", "Update SimpleName: isInvalidatingType(831) to isInvalidating", "Insert SimpleType: InvalidatingTypes.Builder(136) into ClassInstanceCreation(140) at 0", "Move MethodInvocation(165) into ClassInstanceCreation(140) at 1", "Insert QualifiedName: InvalidatingTypes.Builder(135) into SimpleType: InvalidatingTypes.Builder(136) at 0", "Delete QualifiedName: com.google.common.collect.ImmutableList(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.google.javascript.rhino.ObjectTypeI(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: com.google.javascript.rhino.TypeIRegistry(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: java.util.HashSet(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: java.util.Set(32)", "Delete ImportDeclaration(33)", "Delete SimpleName: Set(126)", "Delete SimpleType: Set(127)", "Delete SimpleType: TypeI(129)", "Delete ParameterizedType: Set<TypeI>(130)", "Delete SimpleName: HashSet(132)", "Delete SimpleType: HashSet(133)", "Delete ParameterizedType: HashSet<>(134)", "Delete ClassInstanceCreation(135)", "Delete SimpleName: TypeIRegistry(160)", "Delete SimpleType: TypeIRegistry(161)", "Delete SimpleName: registry(162)", "Delete VariableDeclarationFragment(166)", "Delete VariableDeclarationStatement(167)", "Delete SimpleName: invalidatingTypes(168)", "Delete SimpleName: addAll(169)", "Delete SimpleName: ImmutableList(170)", "Delete SimpleName: of(171)", "Delete SimpleName: registry(172)", "Delete SimpleName: getNativeType(173)", "Delete QualifiedName: JSTypeNative.ALL_TYPE(174)", "Delete MethodInvocation(175)", "Delete SimpleName: registry(176)", "Delete SimpleName: getNativeType(177)", "Delete QualifiedName: JSTypeNative.NO_OBJECT_TYPE(178)", "Delete MethodInvocation(179)", "Delete SimpleName: registry(180)", "Delete SimpleName: getNativeType(181)", "Delete QualifiedName: JSTypeNative.NO_TYPE(182)", "Delete MethodInvocation(183)", "Delete SimpleName: registry(184)", "Delete QualifiedName: JSTypeNative.NULL_TYPE(186)", "Delete MethodInvocation(187)", "Delete SimpleName: registry(188)", "Delete QualifiedName: JSTypeNative.VOID_TYPE(190)", "Delete MethodInvocation(191)", "Delete SimpleName: getNativeType(193)", "Delete QualifiedName: JSTypeNative.FUNCTION_FUNCTION_TYPE(194)", "Delete MethodInvocation(195)", "Delete SimpleName: registry(196)", "Delete SimpleName: getNativeType(197)", "Delete QualifiedName: JSTypeNative.FUNCTION_INSTANCE_TYPE(198)", "Delete MethodInvocation(199)", "Delete SimpleName: registry(200)", "Delete SimpleName: getNativeType(201)", "Delete QualifiedName: JSTypeNative.FUNCTION_PROTOTYPE(202)", "Delete MethodInvocation(203)", "Delete SimpleName: registry(204)", "Delete SimpleName: getNativeType(205)", "Delete QualifiedName: JSTypeNative.GLOBAL_THIS(206)", "Delete MethodInvocation(207)", "Delete SimpleName: registry(208)", "Delete SimpleName: getNativeType(209)", "Delete QualifiedName: JSTypeNative.OBJECT_TYPE(210)", "Delete MethodInvocation(211)", "Delete SimpleName: registry(212)", "Delete SimpleName: getNativeType(213)", "Delete QualifiedName: JSTypeNative.OBJECT_PROTOTYPE(214)", "Delete MethodInvocation(215)", "Delete SimpleName: registry(216)", "Delete SimpleName: getNativeType(217)", "Delete QualifiedName: JSTypeNative.OBJECT_FUNCTION_TYPE(218)", "Delete MethodInvocation(219)", "Delete SimpleName: registry(220)", "Delete SimpleName: getNativeType(221)", "Delete QualifiedName: JSTypeNative.TOP_LEVEL_PROTOTYPE(222)", "Delete MethodInvocation(223)", "Delete SimpleName: registry(224)", "Delete SimpleName: getNativeType(225)", "Delete QualifiedName: JSTypeNative.UNKNOWN_TYPE(226)", "Delete MethodInvocation(227)", "Delete MethodInvocation(228)", "Delete MethodInvocation(229)", "Delete SimpleName: TypeMismatch(231)", "Delete SimpleType: TypeMismatch(232)", "Delete SimpleName: mis(233)", "Delete SingleVariableDeclaration(234)", "Delete SimpleName: addInvalidatingType(238)", "Delete QualifiedName: mis.typeA(239)", "Delete MethodInvocation(240)", "Delete ExpressionStatement(241)", "Delete SimpleName: addInvalidatingType(242)", "Delete QualifiedName: mis.typeB(243)", "Delete MethodInvocation(244)", "Delete ExpressionStatement(245)", "Delete Block(246)", "Delete EnhancedForStatement(247)", "Delete SimpleName: buildInvalidatingTypeSet(149)", "Delete MethodInvocation(150)", "Delete ExpressionStatement(151)", "Delete Block(155)", "Delete MethodDeclaration(156)", "Delete Modifier: private(157)", "Delete PrimitiveType: void(158)", "Delete SimpleName: buildInvalidatingTypeSet(159)", "Delete MethodDeclaration(249)", "Delete TextElement: Invalidates the given type, so that no properties on it will be inlined. (270)", "Delete TagElement(271)", "Delete Javadoc(272)", "Delete Modifier: private(273)", "Delete PrimitiveType: void(274)", "Delete SimpleName: addInvalidatingType(275)", "Delete SimpleName: TypeI(276)", "Delete SimpleType: TypeI(277)", "Delete SimpleName: type(278)", "Delete SingleVariableDeclaration(279)", "Delete SimpleName: type(280)", "Delete SimpleName: type(281)", "Delete SimpleName: restrictByNotNullOrUndefined(282)", "Delete MethodInvocation(283)", "Delete Assignment: =(284)", "Delete ExpressionStatement(285)", "Delete SimpleName: type(286)", "Delete SimpleName: isUnionType(287)", "Delete MethodInvocation(288)", "Delete SimpleName: TypeI(289)", "Delete SimpleType: TypeI(290)", "Delete SimpleName: alt(291)", "Delete SingleVariableDeclaration(292)", "Delete SimpleName: type(293)", "Delete SimpleName: getUnionMembers(294)", "Delete MethodInvocation(295)", "Delete SimpleName: addInvalidatingType(296)", "Delete SimpleName: alt(297)", "Delete MethodInvocation(298)", "Delete ExpressionStatement(299)", "Delete Block(300)", "Delete EnhancedForStatement(301)", "Delete Block(302)", "Delete IfStatement(303)", "Delete SimpleName: invalidatingTypes(304)", "Delete SimpleName: add(305)", "Delete SimpleName: type(306)", "Delete MethodInvocation(307)", "Delete ExpressionStatement(308)", "Delete SimpleName: ObjectTypeI(309)", "Delete SimpleType: ObjectTypeI(310)", "Delete SimpleName: objType(311)", "Delete SimpleName: type(312)", "Delete SimpleName: toMaybeObjectType(313)", "Delete MethodInvocation(314)", "Delete VariableDeclarationFragment(315)", "Delete VariableDeclarationStatement(316)", "Delete SimpleName: objType(317)", "Delete NullLiteral(318)", "Delete InfixExpression: !=(319)", "Delete SimpleName: objType(320)", "Delete SimpleName: isInstanceType(321)", "Delete MethodInvocation(322)", "Delete InfixExpression: &&(323)", "Delete SimpleName: invalidatingTypes(324)", "Delete SimpleName: add(325)", "Delete SimpleName: objType(326)", "Delete SimpleName: getPrototypeObject(327)", "Delete MethodInvocation(328)", "Delete MethodInvocation(329)", "Delete ExpressionStatement(330)", "Delete Block(331)", "Delete IfStatement(332)", "Delete Block(333)", "Delete MethodDeclaration(334)", "Delete TextElement: Returns true if properties on this type should not be inlined. (335)", "Delete TagElement(336)", "Delete Javadoc(337)", "Delete Modifier: private(338)", "Delete PrimitiveType: boolean(339)", "Delete SimpleName: isInvalidatingType(340)", "Delete SimpleName: TypeI(341)", "Delete SimpleType: TypeI(342)", "Delete SimpleName: type(343)", "Delete SingleVariableDeclaration(344)", "Delete SimpleName: type(345)", "Delete SimpleName: isUnionType(346)", "Delete MethodInvocation(347)", "Delete SimpleName: type(348)", "Delete SimpleName: type(349)", "Delete SimpleName: restrictByNotNullOrUndefined(350)", "Delete MethodInvocation(351)", "Delete Assignment: =(352)", "Delete ExpressionStatement(353)", "Delete SimpleName: type(354)", "Delete SimpleName: isUnionType(355)", "Delete MethodInvocation(356)", "Delete SimpleName: TypeI(357)", "Delete SimpleType: TypeI(358)", "Delete SimpleName: alt(359)", "Delete SingleVariableDeclaration(360)", "Delete SimpleName: type(361)", "Delete SimpleName: getUnionMembers(362)", "Delete MethodInvocation(363)", "Delete SimpleName: isInvalidatingType(364)", "Delete SimpleName: alt(365)", "Delete MethodInvocation(366)", "Delete BooleanLiteral: true(367)", "Delete ReturnStatement(368)", "Delete Block(369)", "Delete IfStatement(370)", "Delete Block(371)", "Delete EnhancedForStatement(372)", "Delete BooleanLiteral: false(373)", "Delete ReturnStatement(374)", "Delete Block(375)", "Delete IfStatement(376)", "Delete Block(377)", "Delete IfStatement(378)", "Delete SimpleName: ObjectTypeI(379)", "Delete SimpleType: ObjectTypeI(380)", "Delete SimpleName: objType(381)", "Delete SimpleName: type(382)", "Delete SimpleName: toMaybeObjectType(383)", "Delete MethodInvocation(384)", "Delete VariableDeclarationFragment(385)", "Delete VariableDeclarationStatement(386)", "Delete SimpleName: objType(387)", "Delete NullLiteral(388)", "Delete InfixExpression: ==(389)", "Delete SimpleName: invalidatingTypes(390)", "Delete SimpleName: contains(391)", "Delete SimpleName: objType(392)", "Delete MethodInvocation(393)", "Delete InfixExpression: ||(394)", "Delete SimpleName: objType(395)", "Delete SimpleName: isUnknownObject(396)", "Delete MethodInvocation(397)", "Delete InfixExpression: ||(398)", "Delete SimpleName: objType(399)", "Delete SimpleName: isUnknownType(400)", "Delete MethodInvocation(401)", "Delete InfixExpression: ||(402)", "Delete SimpleName: objType(403)", "Delete SimpleName: isBottom(404)", "Delete MethodInvocation(405)", "Delete InfixExpression: ||(406)", "Delete SimpleName: objType(407)", "Delete SimpleName: isEnumObject(408)", "Delete MethodInvocation(409)", "Delete InfixExpression: ||(410)", "Delete SimpleName: objType(411)", "Delete SimpleName: isBoxableScalar(412)", "Delete MethodInvocation(413)", "Delete InfixExpression: ||(414)", "Delete SimpleName: type(415)", "Delete SimpleName: isConstructor(416)", "Delete MethodInvocation(417)", "Delete SimpleName: objType(418)", "Delete SimpleName: isInstanceType(419)", "Delete MethodInvocation(420)", "Delete InfixExpression: ||(421)", "Delete ParenthesizedExpression(422)", "Delete PrefixExpression: !(423)", "Delete InfixExpression: ||(424)", "Delete ReturnStatement(425)", "Delete Block(426)", "Delete MethodDeclaration(427)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}