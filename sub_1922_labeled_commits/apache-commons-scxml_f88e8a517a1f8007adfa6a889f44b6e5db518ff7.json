{"application": "apache-commons-scxml", "csha": "f88e8a517a1f8007adfa6a889f44b6e5db518ff7", "files": [{"ModelUpdater_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 9"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: s", "DEL SimpleName: p", "DEL SimpleName: Parallel", "DEL VariableDeclarationFragment", "DEL SimpleType: Parallel", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: getParallel"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: isEmpty", "DEL NullLiteral", "DEL SimpleName: c", "DEL ArrayCreation", "DEL SimpleName: c", "DEL InfixExpression: &&", "DEL SimpleName: getStateName", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: ||", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL PrefixExpression: !", "DEL InfixExpression: !=", "DEL ParenthesizedExpression", "DEL Dimension", "DEL InfixExpression: &&", "DEL InfixExpression: &&", "DEL ParenthesizedExpression", "DEL NullLiteral", "DEL SimpleName: isEmpty", "DEL SimpleType: Object", "DEL NullLiteral", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: logAndThrowModelError", "DEL Block", "DEL SimpleName: s", "DEL SimpleName: p", "DEL ArrayInitializer", "DEL SimpleName: inv", "DEL NullLiteral", "DEL InfixExpression: !=", "DEL SimpleName: inv", "DEL PrefixExpression: !", "DEL InfixExpression: !=", "DEL ArrayType: Object[]", "DEL SimpleName: ERR_STATE_BAD_CONTENTS", "DEL SimpleName: p", "DEL IfStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL NullLiteral", "DEL SimpleName: updateParallel", "DEL SimpleName: p", "DEL Block", "DEL SimpleName: targets", "DEL SimpleName: p", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL StringLiteral: \"<state> children.\"", "DEL TagElement", "DEL FieldDeclaration", "DEL Modifier: final", "DEL TextElement: Error message when a state element contains anything other than", "DEL TextElement: one &lt;parallel&gt;, one &lt;invoke&gt; or any number of", "DEL Javadoc", "DEL SimpleName: String", "DEL InfixExpression: +", "DEL TextElement: &lt;state&gt; children.", "DEL Modifier: static", "DEL SimpleType: String", "DEL SimpleName: ERR_STATE_BAD_CONTENTS", "DEL StringLiteral: \"contain either one <parallel>, one <invoke> or any number of \"", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"{0} should \""]}]}}, {"ModelUpdater_diff": {"operations": ["Move IfStatement(780) into Block(722) at 9", "Delete SimpleName: Parallel(551)", "Delete SimpleType: Parallel(552)", "Delete SimpleName: p(553)", "Delete SimpleName: s(554)", "Delete SimpleName: getParallel(555)", "Delete MethodInvocation(556)", "Delete VariableDeclarationFragment(557)", "Delete VariableDeclarationStatement(558)", "Delete SimpleName: inv(567)", "Delete NullLiteral(568)", "Delete InfixExpression: !=(569)", "Delete SimpleName: p(570)", "Delete NullLiteral(571)", "Delete InfixExpression: !=(572)", "Delete InfixExpression: &&(573)", "Delete ParenthesizedExpression(574)", "Delete SimpleName: inv(575)", "Delete NullLiteral(576)", "Delete InfixExpression: !=(577)", "Delete SimpleName: c(578)", "Delete SimpleName: isEmpty(579)", "Delete MethodInvocation(580)", "Delete PrefixExpression: !(581)", "Delete InfixExpression: &&(582)", "Delete ParenthesizedExpression(583)", "Delete SimpleName: p(584)", "Delete NullLiteral(585)", "Delete InfixExpression: !=(586)", "Delete SimpleName: c(587)", "Delete SimpleName: isEmpty(588)", "Delete MethodInvocation(589)", "Delete PrefixExpression: !(590)", "Delete InfixExpression: &&(591)", "Delete ParenthesizedExpression(592)", "Delete InfixExpression: ||(593)", "Delete SimpleName: logAndThrowModelError(594)", "Delete SimpleName: ERR_STATE_BAD_CONTENTS(595)", "Delete SimpleName: Object(596)", "Delete SimpleType: Object(597)", "Delete Dimension(598)", "Delete ArrayType: Object[](599)", "Delete SimpleName: getStateName(600)", "Delete SimpleName: s(601)", "Delete MethodInvocation(602)", "Delete ArrayInitializer(603)", "Delete ArrayCreation(604)", "Delete MethodInvocation(605)", "Delete ExpressionStatement(606)", "Delete Block(607)", "Delete IfStatement(608)", "Delete SimpleName: p(609)", "Delete NullLiteral(610)", "Delete InfixExpression: !=(611)", "Delete SimpleName: updateParallel(612)", "Delete SimpleName: p(613)", "Delete SimpleName: targets(614)", "Delete MethodInvocation(615)", "Delete ExpressionStatement(616)", "Delete Block(617)", "Delete IfStatement(781)", "Delete TextElement: Error message when a state element contains anything other than(1306)", "Delete TextElement: one &lt;parallel&gt;, one &lt;invoke&gt; or any number of(1307)", "Delete TextElement: &lt;state&gt; children.(1308)", "Delete TagElement(1309)", "Delete Javadoc(1310)", "Delete Modifier: private(1311)", "Delete Modifier: static(1312)", "Delete Modifier: final(1313)", "Delete SimpleName: String(1314)", "Delete SimpleType: String(1315)", "Delete SimpleName: ERR_STATE_BAD_CONTENTS(1316)", "Delete StringLiteral: \"{0} should \"(1317)", "Delete StringLiteral: \"contain either one <parallel>, one <invoke> or any number of \"(1318)", "Delete StringLiteral: \"<state> children.\"(1319)", "Delete InfixExpression: +(1320)", "Delete VariableDeclarationFragment(1321)", "Delete FieldDeclaration(1322)"]}}, {"SCXMLSerializer_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 15"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 6"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: getParallel", "DEL SimpleName: p", "DEL SimpleType: Parallel", "DEL MethodInvocation", "DEL SimpleName: Parallel", "DEL SimpleName: s"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL SimpleName: p", "DEL SimpleName: serializeParallel", "DEL SimpleName: INDENT", "DEL SimpleName: p", "DEL SimpleName: b", "DEL ExpressionStatement", "DEL InfixExpression: +", "DEL SimpleName: indent", "DEL NullLiteral", "DEL IfStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: isStringEmpty", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: getNext", "DEL SimpleName: SCXMLHelper", "DEL VariableDeclarationFragment", "DEL SimpleName: t", "DEL SimpleName: next", "DEL PrimitiveType: boolean", "DEL VariableDeclarationStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL SimpleName: next", "DEL Block"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getNext", "DEL MethodInvocation", "DEL StringLiteral: \" target=\\\"\"", "DEL InfixExpression: +", "DEL SimpleName: t", "DEL SimpleName: append", "DEL MethodInvocation", "DEL StringLiteral: \"\\\"\"", "DEL SimpleName: b"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: exit", "DEL VariableDeclarationStatement", "DEL PrimitiveType: boolean"]}, {"root": "DEL IfStatement", "operations": ["DEL InfixExpression: &&", "DEL SimpleName: serializeTarget", "DEL InfixExpression: +", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: INDENT", "DEL IfStatement", "DEL SimpleName: b", "DEL SimpleName: indent", "DEL SimpleName: t", "DEL PrefixExpression: !", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: exit", "DEL SimpleName: next"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Javadoc", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: t", "DEL SimpleName: Transition", "DEL SimpleName: StringBuffer", "DEL SimpleType: Transition", "DEL Block", "DEL SimpleName: Deprecated", "DEL SimpleName: serializeState", "DEL IfStatement", "DEL CastExpression", "DEL SimpleName: String", "DEL StringLiteral: \"</target>\"", "DEL TagElement: @param", "DEL Modifier: final", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: indent", "DEL SimpleName: b", "DEL PrimitiveType: void", "DEL SimpleName: append", "DEL TextElement: Serialize this Transition's Target.", "DEL MethodInvocation", "DEL TextElement:  Inline &lt;target&gt; element has been deprecated", "DEL SimpleType: StringBuffer", "DEL ExpressionStatement", "DEL SimpleName: getTarget", "DEL Modifier: final", "DEL SimpleName: INDENT", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL SimpleName: append", "DEL Modifier: final", "DEL InfixExpression: !=", "DEL SimpleName: indent", "DEL SimpleName: b", "DEL MethodDeclaration", "DEL MarkerAnnotation", "DEL SimpleName: indent", "DEL MethodInvocation", "DEL TextElement:  The Transition whose Target needs to be serialized", "DEL SimpleType: String", "DEL SimpleName: b", "DEL SimpleName: indent", "DEL Modifier: static", "DEL SimpleName: b", "DEL TextElement:  The indent for this XML element", "DEL ExpressionStatement", "DEL TagElement: @deprecated", "DEL SimpleName: t", "DEL SimpleName: getTarget", "DEL SimpleName: indent", "DEL SingleVariableDeclaration", "DEL SimpleName: append", "DEL TagElement: @param", "DEL SimpleName: serializeTarget", "DEL MethodInvocation", "DEL StringLiteral: \"<target>\"", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: t", "DEL TextElement: in the SCXML WD", "DEL SimpleName: b", "DEL MethodInvocation", "DEL SimpleType: State", "DEL TagElement: @param", "DEL SimpleName: State", "DEL NullLiteral", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL TextElement:  The buffer to append the serialization to", "DEL SimpleName: t"]}]}}, {"SCXMLSerializer_diff": {"operations": ["Move IfStatement(579) into Block(576) at 15", "Move ExpressionStatement(1201) into Block(1182) at 6", "Move MethodInvocation(1219) into ExpressionStatement(1173) at 0", "Delete SimpleName: Parallel(482)", "Delete SimpleType: Parallel(483)", "Delete SimpleName: p(484)", "Delete SimpleName: s(485)", "Delete SimpleName: getParallel(486)", "Delete MethodInvocation(487)", "Delete VariableDeclarationFragment(488)", "Delete VariableDeclarationStatement(489)", "Delete SimpleName: p(498)", "Delete NullLiteral(499)", "Delete InfixExpression: !=(500)", "Delete SimpleName: serializeParallel(501)", "Delete SimpleName: b(502)", "Delete SimpleName: p(503)", "Delete SimpleName: indent(504)", "Delete SimpleName: INDENT(505)", "Delete InfixExpression: +(506)", "Delete MethodInvocation(507)", "Delete ExpressionStatement(508)", "Delete Block(509)", "Delete IfStatement(580)", "Delete PrimitiveType: boolean(1180)", "Delete SimpleName: next(1181)", "Delete SimpleName: SCXMLHelper(1182)", "Delete SimpleName: isStringEmpty(1183)", "Delete SimpleName: t(1184)", "Delete SimpleName: getNext(1185)", "Delete MethodInvocation(1186)", "Delete MethodInvocation(1187)", "Delete PrefixExpression: !(1188)", "Delete VariableDeclarationFragment(1189)", "Delete VariableDeclarationStatement(1190)", "Delete SimpleName: next(1191)", "Delete Block(1202)", "Delete IfStatement(1203)", "Delete SimpleName: b(1192)", "Delete SimpleName: append(1193)", "Delete StringLiteral: \" target=\\\"\"(1194)", "Delete SimpleName: t(1195)", "Delete SimpleName: getNext(1196)", "Delete MethodInvocation(1197)", "Delete StringLiteral: \"\\\"\"(1198)", "Delete InfixExpression: +(1199)", "Delete MethodInvocation(1200)", "Delete PrimitiveType: boolean(1209)", "Delete SimpleName: exit(1210)", "Delete VariableDeclarationFragment(1220)", "Delete VariableDeclarationStatement(1221)", "Delete SimpleName: next(1222)", "Delete PrefixExpression: !(1223)", "Delete SimpleName: exit(1224)", "Delete PrefixExpression: !(1225)", "Delete InfixExpression: &&(1226)", "Delete SimpleName: serializeTarget(1227)", "Delete SimpleName: b(1228)", "Delete SimpleName: t(1229)", "Delete SimpleName: indent(1230)", "Delete SimpleName: INDENT(1231)", "Delete InfixExpression: +(1232)", "Delete MethodInvocation(1233)", "Delete ExpressionStatement(1234)", "Delete Block(1235)", "Delete IfStatement(1236)", "Delete TextElement: Serialize this Transition's Target.(1247)", "Delete TagElement(1248)", "Delete SimpleName: b(1249)", "Delete TextElement:  The buffer to append the serialization to(1250)", "Delete TagElement: @param(1251)", "Delete SimpleName: t(1252)", "Delete TextElement:  The Transition whose Target needs to be serialized(1253)", "Delete TagElement: @param(1254)", "Delete SimpleName: indent(1255)", "Delete TextElement:  The indent for this XML element(1256)", "Delete TagElement: @param(1257)", "Delete TextElement:  Inline &lt;target&gt; element has been deprecated(1258)", "Delete TextElement: in the SCXML WD(1259)", "Delete TagElement: @deprecated(1260)", "Delete Javadoc(1261)", "Delete SimpleName: Deprecated(1262)", "Delete MarkerAnnotation(1263)", "Delete Modifier: public(1264)", "Delete Modifier: static(1265)", "Delete PrimitiveType: void(1266)", "Delete SimpleName: serializeTarget(1267)", "Delete Modifier: final(1268)", "Delete SimpleName: StringBuffer(1269)", "Delete SimpleType: StringBuffer(1270)", "Delete SimpleName: b(1271)", "Delete SingleVariableDeclaration(1272)", "Delete Modifier: final(1273)", "Delete SimpleName: Transition(1274)", "Delete SimpleType: Transition(1275)", "Delete SimpleName: t(1276)", "Delete SingleVariableDeclaration(1277)", "Delete Modifier: final(1278)", "Delete SimpleName: String(1279)", "Delete SimpleType: String(1280)", "Delete SimpleName: indent(1281)", "Delete SingleVariableDeclaration(1282)", "Delete SimpleName: t(1283)", "Delete SimpleName: getTarget(1284)", "Delete MethodInvocation(1285)", "Delete NullLiteral(1286)", "Delete InfixExpression: !=(1287)", "Delete SimpleName: b(1288)", "Delete SimpleName: append(1289)", "Delete SimpleName: indent(1290)", "Delete MethodInvocation(1291)", "Delete SimpleName: append(1292)", "Delete StringLiteral: \"<target>\"(1293)", "Delete MethodInvocation(1294)", "Delete ExpressionStatement(1295)", "Delete SimpleName: serializeState(1296)", "Delete SimpleName: b(1297)", "Delete SimpleName: State(1298)", "Delete SimpleType: State(1299)", "Delete SimpleName: t(1300)", "Delete SimpleName: getTarget(1301)", "Delete MethodInvocation(1302)", "Delete CastExpression(1303)", "Delete SimpleName: indent(1304)", "Delete SimpleName: INDENT(1305)", "Delete InfixExpression: +(1306)", "Delete MethodInvocation(1307)", "Delete ExpressionStatement(1308)", "Delete SimpleName: b(1309)", "Delete SimpleName: append(1310)", "Delete SimpleName: indent(1311)", "Delete MethodInvocation(1312)", "Delete SimpleName: append(1313)", "Delete StringLiteral: \"</target>\"(1314)", "Delete MethodInvocation(1315)", "Delete ExpressionStatement(1316)", "Delete Block(1317)", "Delete IfStatement(1318)", "Delete Block(1319)", "Delete MethodDeclaration(1320)"]}}, {"State_cluster": {"actions": [{"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Parallel", "DEL Modifier: final", "DEL TextElement: &lt;state&gt; element.", "DEL TagElement: @deprecated", "DEL TagElement: @return", "DEL SimpleType: Parallel", "DEL Modifier: public", "DEL TextElement:  &lt;parallel&gt; no longer needs an enclosing", "DEL SimpleName: parallel", "DEL TextElement:  Parallel Returns the parallel.", "DEL MarkerAnnotation", "DEL SimpleName: getParallel", "DEL SimpleName: Deprecated", "DEL ReturnStatement", "DEL Javadoc", "DEL TagElement", "DEL MethodDeclaration", "DEL Block", "DEL TextElement: Get the Parallel child (may be null)."]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: final", "DEL SimpleName: isOrthogonal", "DEL TagElement", "DEL InfixExpression: !=", "DEL MarkerAnnotation", "DEL Modifier: public", "DEL TextElement:  &lt;parallel&gt; now represents an orthogonal state, rather", "DEL TagElement: @deprecated", "DEL TextElement: it did in previous SCXML WDs.", "DEL SimpleName: parallel", "DEL NullLiteral", "DEL ReturnStatement", "DEL TextElement: than denoting that the enclosing state is orthogonal, as", "DEL TextElement:  true if this is a orthogonal state, otherwise false", "DEL IfStatement", "DEL TagElement: @return", "DEL Javadoc", "DEL TextElement: (UML terminology).", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: Deprecated", "DEL Block", "DEL BooleanLiteral: true", "DEL TextElement: Checks whether it is a orthogonal state, that is, it owns a parallel", "DEL BooleanLiteral: false"]}]}}, {"State_diff": {"operations": ["Delete TextElement: Get the Parallel child (may be null).(143)", "Delete TagElement(144)", "Delete TextElement:  Parallel Returns the parallel.(145)", "Delete TagElement: @return(146)", "Delete TextElement:  &lt;parallel&gt; no longer needs an enclosing(147)", "Delete TextElement: &lt;state&gt; element.(148)", "Delete TagElement: @deprecated(149)", "Delete Javadoc(150)", "Delete SimpleName: Deprecated(151)", "Delete MarkerAnnotation(152)", "Delete Modifier: public(153)", "Delete Modifier: final(154)", "Delete SimpleName: Parallel(155)", "Delete SimpleType: Parallel(156)", "Delete SimpleName: getParallel(157)", "Delete SimpleName: parallel(158)", "Delete ReturnStatement(159)", "Delete Block(160)", "Delete MethodDeclaration(161)", "Delete TextElement: Checks whether it is a orthogonal state, that is, it owns a parallel(446)", "Delete TextElement: (UML terminology).(447)", "Delete TagElement(448)", "Delete TextElement:  true if this is a orthogonal state, otherwise false(449)", "Delete TagElement: @return(450)", "Delete TextElement:  &lt;parallel&gt; now represents an orthogonal state, rather(451)", "Delete TextElement: than denoting that the enclosing state is orthogonal, as(452)", "Delete TextElement: it did in previous SCXML WDs.(453)", "Delete TagElement: @deprecated(454)", "Delete Javadoc(455)", "Delete SimpleName: Deprecated(456)", "Delete MarkerAnnotation(457)", "Delete Modifier: public(458)", "Delete Modifier: final(459)", "Delete PrimitiveType: boolean(460)", "Delete SimpleName: isOrthogonal(461)", "Delete SimpleName: parallel(462)", "Delete NullLiteral(463)", "Delete InfixExpression: !=(464)", "Delete BooleanLiteral: true(465)", "Delete ReturnStatement(466)", "Delete Block(467)", "Delete IfStatement(468)", "Delete BooleanLiteral: false(469)", "Delete ReturnStatement(470)", "Delete Block(471)", "Delete MethodDeclaration(472)"]}}, {"Transition_cluster": {"actions": [{"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: getTarget", "DEL SimpleName: Deprecated", "DEL NullLiteral", "DEL Javadoc", "DEL TextElement:  Returns the target as specified in SCXML markup.", "DEL SimpleName: TransitionTarget", "DEL TagElement", "DEL InfixExpression: >", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: get", "DEL TextElement: use getTargets() instead.", "DEL TextElement: <p>Remarks: Is <code>null</code> for &quot;stay&quot; transitions.", "DEL TextElement: Get the transition target (may be null).", "DEL TagElement: @deprecated", "DEL TextElement: Returns parent (the source node) for &quot;self&quot; transitions.</p>", "DEL ReturnStatement", "DEL Modifier: public", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL TextElement:  A transition may have multiple targets,", "DEL NumberLiteral: 0", "DEL SimpleName: targets", "DEL TagElement: @return", "DEL ReturnStatement", "DEL Block", "DEL Modifier: final", "DEL SimpleType: TransitionTarget", "DEL NumberLiteral: 0", "DEL IfStatement", "DEL SimpleName: targets", "DEL MethodInvocation", "DEL SimpleName: size"]}]}}, {"Transition_diff": {"operations": ["Delete TextElement: Get the transition target (may be null).(258)", "Delete TagElement(259)", "Delete TextElement:  Returns the target as specified in SCXML markup.(260)", "Delete TextElement: <p>Remarks: Is <code>null</code> for &quot;stay&quot; transitions.(261)", "Delete TextElement: Returns parent (the source node) for &quot;self&quot; transitions.</p>(262)", "Delete TagElement: @return(263)", "Delete TextElement:  A transition may have multiple targets,(264)", "Delete TextElement: use getTargets() instead.(265)", "Delete TagElement: @deprecated(266)", "Delete Javadoc(267)", "Delete SimpleName: Deprecated(268)", "Delete MarkerAnnotation(269)", "Delete Modifier: public(270)", "Delete Modifier: final(271)", "Delete SimpleName: TransitionTarget(272)", "Delete SimpleType: TransitionTarget(273)", "Delete SimpleName: getTarget(274)", "Delete SimpleName: targets(275)", "Delete SimpleName: size(276)", "Delete MethodInvocation(277)", "Delete NumberLiteral: 0(278)", "Delete InfixExpression: >(279)", "Delete SimpleName: targets(280)", "Delete SimpleName: get(281)", "Delete NumberLiteral: 0(282)", "Delete MethodInvocation(283)", "Delete ReturnStatement(284)", "Delete Block(285)", "Delete IfStatement(286)", "Delete NullLiteral(287)", "Delete ReturnStatement(288)", "Delete Block(289)", "Delete MethodDeclaration(290)"]}}, {"SCXMLSemanticsImpl_cluster": {"actions": [{"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0", "MOV Block to IfStatement at 1", "MOV IfStatement to Block at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: st", "DEL MethodInvocation", "DEL SimpleName: isOrthogonal"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL SimpleName: addLast", "DEL ExpressionStatement", "DEL SimpleName: wrkSet", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: st", "DEL SimpleName: getParallel"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement"]}]}}, {"SCXMLSemanticsImpl_diff": {"operations": ["Move IfStatement(2008) into Block(1998) at 1", "Move MethodInvocation(1969) into IfStatement(1997) at 0", "Move Block(1975) into IfStatement(1997) at 1", "Delete SimpleName: st(1976)", "Delete SimpleName: isOrthogonal(1977)", "Delete MethodInvocation(1978)", "Delete SimpleName: wrkSet(1979)", "Delete SimpleName: addLast(1980)", "Delete SimpleName: st(1981)", "Delete SimpleName: getParallel(1982)", "Delete MethodInvocation(1983)", "Delete MethodInvocation(1984)", "Delete ExpressionStatement(1985)", "Delete Block(1986)", "Delete IfStatement(2009)"]}}], "commit_stats": [{"total_files": 5, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}