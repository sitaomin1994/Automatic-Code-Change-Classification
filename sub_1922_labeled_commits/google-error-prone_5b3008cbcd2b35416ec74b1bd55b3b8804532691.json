{"application": "google-error-prone", "csha": "5b3008cbcd2b35416ec74b1bd55b3b8804532691", "files": [{"InvalidTargetingOnScopingAnnotation_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 9", "MOV ImportDeclaration to CompilationUnit at 8", "MOV ImportDeclaration to CompilationUnit at 12", "MOV ImportDeclaration to CompilationUnit at 13"]}, {"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: com.google.common.collect.Sets.immutableEnumSet to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS QualifiedName: com.google.errorprone.matchers.ChildMultiMatcher.MatchType.AT_LEAST_ONE to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS QualifiedName: com.google.errorprone.matchers.Matchers.allOf to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 8"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS QualifiedName: com.google.errorprone.matchers.Matchers.annotations to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 9"]}, {"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS ImportDeclaration to CompilationUnit at 12", "INS QualifiedName: com.google.errorprone.matchers.Matchers.isType to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 13", "operations": ["INS ImportDeclaration to CompilationUnit at 13", "INS QualifiedName: com.google.errorprone.matchers.Matchers.kindIs to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 24", "operations": ["INS ImportDeclaration to CompilationUnit at 24", "INS QualifiedName: com.google.errorprone.fixes.Fix to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 26", "operations": ["INS QualifiedName: com.google.errorprone.fixes.SuggestedFix.Builder to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 26"]}, {"root": "INS ImportDeclaration to CompilationUnit at 29", "operations": ["INS QualifiedName: com.google.errorprone.matchers.MultiMatcher to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 29"]}, {"root": "INS ImportDeclaration to CompilationUnit at 34", "operations": ["INS ImportDeclaration to CompilationUnit at 34", "INS QualifiedName: java.util.Arrays to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 35", "operations": ["INS ImportDeclaration to CompilationUnit at 35", "INS QualifiedName: java.util.EnumSet to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 36", "operations": ["INS ImportDeclaration to CompilationUnit at 36", "INS QualifiedName: java.util.Set to ImportDeclaration at 0"]}, {"root": "UPDATE from com.google.errorprone.util.ASTHelpers to com.google.errorprone.util.ASTHelpers.getAnnotation", "operations": ["UPD QualifiedName: com.google.errorprone.util.ASTHelpers from com.google.errorprone.util.ASTHelpers to com.google.errorprone.util.ASTHelpers.getAnnotation"]}, {"root": "UPDATE from com.sun.tools.javac.code.Attribute.Compound to com.sun.source.tree.Tree.Kind.ANNOTATION_TYPE", "operations": ["UPD QualifiedName: com.sun.tools.javac.code.Attribute.Compound from com.sun.tools.javac.code.Attribute.Compound to com.sun.source.tree.Tree.Kind.ANNOTATION_TYPE"]}, {"root": "UPDATE from com.sun.tools.javac.code.Flags to com.google.common.base.Joiner", "operations": ["UPD QualifiedName: com.sun.tools.javac.code.Flags from com.sun.tools.javac.code.Flags to com.google.common.base.Joiner"]}, {"root": "UPDATE from com.sun.tools.javac.code.Symbol to com.google.common.collect.ImmutableSet", "operations": ["UPD QualifiedName: com.sun.tools.javac.code.Symbol from com.sun.tools.javac.code.Symbol to com.google.common.collect.ImmutableSet"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleType: ClassTree to ParameterizedType: MultiMatcher<ClassTree,AnnotationTree> at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: MultiMatcher to SimpleType: MultiMatcher at 0", "INS SimpleName: ClassTree to SimpleType: ClassTree at 0", "INS Modifier: final to FieldDeclaration at 2", "INS ParameterizedType: MultiMatcher<ClassTree,AnnotationTree> to FieldDeclaration at 3", "INS SimpleType: AnnotationTree to ParameterizedType: MultiMatcher<ClassTree,AnnotationTree> at 2", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: MultiMatcher to ParameterizedType: MultiMatcher<ClassTree,AnnotationTree> at 0", "INS Modifier: static to FieldDeclaration at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 9", "operations": ["INS SimpleName: REQUIRED_ELEMENT_TYPES to VariableDeclarationFragment at 0", "INS SimpleType: ElementType to ParameterizedType: ImmutableSet<ElementType> at 1", "INS FieldDeclaration to TypeDeclaration: class at 9", "INS SimpleType: ImmutableSet to ParameterizedType: ImmutableSet<ElementType> at 0", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: static to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: ElementType to SimpleType: ElementType at 0", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: METHOD to MethodInvocation at 2", "INS ParameterizedType: ImmutableSet<ElementType> to FieldDeclaration at 3", "INS SimpleName: ImmutableSet to SimpleType: ImmutableSet at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS Block to MethodDeclaration at 7", "INS Modifier: public to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS Modifier: final to MethodDeclaration at 2", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: matchClass to MethodDeclaration at 4", "INS IfStatement to Block at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SimpleType: Description to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement to Javadoc at 0", "INS TextElement: value (and reordering them to their declaration order in ElementType). to TagElement at 1", "INS TextElement: Rewrite the annotation with static imports, adding TYPE and METHOD to the @Target annotation to TagElement at 0", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "UPDATE from Description to Fix", "operations": ["UPD SimpleType: Description from Description to Fix", "UPD SimpleName: Description from Description to Fix"]}, {"root": "UPDATE from describe to replaceTargetAnnotation", "operations": ["UPD SimpleName: describe from describe to replaceTargetAnnotation"]}, {"root": "UPDATE from  sgoldfeder@google.com (Steven Goldfeder) to  sgoldfeder@google.com (Steven Goldfeder) ", "operations": ["UPD TextElement:  sgoldfeder@google.com (Steven Goldfeder) from  sgoldfeder@google.com (Steven Goldfeder) to  sgoldfeder@google.com (Steven Goldfeder) "]}, {"root": "UPDATE from \"The target of a scoping annotation must be set to METHOD and/or TYPE.\" to \"A scoping annotation's Target should include TYPE and METHOD.\"", "operations": ["UPD StringLiteral: \"The target of a scoping annotation must be set to METHOD and/or TYPE.\" from \"The target of a scoping annotation must be set to METHOD and/or TYPE.\" to \"A scoping annotation's Target should include TYPE and METHOD.\""]}, {"root": "UPDATE from ASTHelpers to HAS_TARGET_ANNOTATION", "operations": ["UPD SimpleName: ASTHelpers from ASTHelpers to HAS_TARGET_ANNOTATION", "UPD SimpleName: classSymbol from classSymbol to HAS_TARGET_ANNOTATION"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1", "MOV SimpleName: classSymbol to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from SCOPE_ANNOTATION_MATCHER to ANNOTATION_WITH_SCOPE_AND_TARGET", "operations": ["UPD SimpleName: SCOPE_ANNOTATION_MATCHER from SCOPE_ANNOTATION_MATCHER to ANNOTATION_WITH_SCOPE_AND_TARGET", "UPD SimpleName: SCOPE_ANNOTATION_MATCHER from SCOPE_ANNOTATION_MATCHER to ANNOTATION_WITH_SCOPE_AND_TARGET"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: ANNOTATION_TYPE to MethodInvocation at 1", "INS SimpleName: kindIs to MethodInvocation at 0", "INS SimpleName: allOf to MethodInvocation at 0", "INS SimpleName: HAS_TARGET_ANNOTATION to MethodInvocation at 3"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "UPDATE from ClassTree to Target", "operations": ["UPD SimpleName: ClassTree from ClassTree to Target", "UPD SimpleType: ClassTree from ClassTree to Target"]}, {"root": "UPDATE from addStaticImport to annotation", "operations": ["UPD SimpleName: addStaticImport from addStaticImport to annotation", "UPD SimpleName: classTree from classTree to annotation"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: AnnotationTree to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from state to targetAnnotationTree", "operations": ["UPD SimpleName: state from state to targetAnnotationTree", "UPD SimpleName: getAnnotations from getAnnotations to targetAnnotationTree"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS InfixExpression: + to MethodInvocation at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Builder to SimpleType: Builder at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS StringLiteral: \"})\" to InfixExpression: + at 2", "INS VariableDeclarationStatement to Block at 2", "INS StringLiteral: \"@Target({\" to InfixExpression: + at 0", "INS SimpleType: Builder to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: builder to VariableDeclarationFragment at 0"]}, {"root": "INS EnhancedForStatement to Block at 3", "operations": ["INS SimpleName: type to InfixExpression: + at 1", "INS EnhancedForStatement to Block at 3", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \"java.lang.annotation.ElementType.\" to InfixExpression: + at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: types to EnhancedForStatement at 1"]}, {"root": "INS ReturnStatement to Block at 4", "operations": ["INS ReturnStatement to Block at 4", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "UPDATE from \"Scoping annotations are only appropriate for provision and therefore are only \" to \"`@Scope` annotations should be applicable to TYPE (annotating classes that should\"", "operations": ["UPD StringLiteral: \"Scoping annotations are only appropriate for provision and therefore are only \" from \"Scoping annotations are only appropriate for provision and therefore are only \" to \"`@Scope` annotations should be applicable to TYPE (annotating classes that should\""]}, {"root": "UPDATE from \"appropriate on @Provides methods and classes that will be provided just-in-time.\" to \" be scoped) and to METHOD (annotating `@Provides` methods to apply scoping to the\"", "operations": ["UPD StringLiteral: \"appropriate on @Provides methods and classes that will be provided just-in-time.\" from \"appropriate on @Provides methods and classes that will be provided just-in-time.\" to \" be scoped) and to METHOD (annotating `@Provides` methods to apply scoping to the\""]}, {"root": "INS StringLiteral: \" returned object.\\n\\n\" to InfixExpression: + at 2", "operations": ["INS StringLiteral: \" returned object.\\n\\n\" to InfixExpression: + at 2"]}, {"root": "INS StringLiteral: \" If an annotation's use is restricted by `@Target` and it doesn't include those two\" to InfixExpression: + at 3", "operations": ["INS StringLiteral: \" If an annotation's use is restricted by `@Target` and it doesn't include those two\" to InfixExpression: + at 3"]}, {"root": "INS StringLiteral: \" element types, the annotation can't be used where it should be able to be used.\" to InfixExpression: + at 4", "operations": ["INS StringLiteral: \" element types, the annotation can't be used where it should be able to be used.\" to InfixExpression: + at 4"]}, {"root": "UPDATE from Symbol to AnnotationTree", "operations": ["UPD SimpleName: Symbol from Symbol to AnnotationTree"]}, {"root": "MOVE from SimpleType: AnnotationTree", "operations": ["MOV SimpleName: Symbol to SimpleType: AnnotationTree at 0"]}, {"root": "UPDATE from ASTHelpers to annotations", "operations": ["UPD SimpleName: ASTHelpers from ASTHelpers to annotations"]}, {"root": "UPDATE from getSymbol to AT_LEAST_ONE", "operations": ["UPD SimpleName: getSymbol from getSymbol to AT_LEAST_ONE"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: TARGET_ANNOTATION to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from classSymbol to immutableEnumSet", "operations": ["UPD SimpleName: classSymbol from classSymbol to immutableEnumSet"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: classSymbol to MethodInvocation at 0", "MOV SimpleName: flags to MethodInvocation at 1"]}, {"root": "UPDATE from flags to TYPE", "operations": ["UPD SimpleName: flags from flags to TYPE"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS ParameterizedType: Set<ElementType> to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: Set to ParameterizedType: Set<ElementType> at 0", "INS ParameterizedType: Set<ElementType> to VariableDeclarationStatement at 0", "INS SimpleType: ElementType to ParameterizedType: Set<ElementType> at 1", "INS SimpleName: ElementType to SimpleType: ElementType at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from classTree to isType", "operations": ["UPD SimpleName: classTree from classTree to isType"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: classTree to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: classTree to MethodInvocation at 2", "MOV SimpleName: state to MethodInvocation at 3", "MOV SimpleName: SCOPE_ANNOTATION_MATCHER to MethodInvocation at 0", "MOV SimpleName: matches to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2"]}, {"root": "UPDATE from target to types", "operations": ["UPD SimpleName: target from target to types", "UPD SimpleName: describeMatch from describeMatch to types", "UPD SimpleName: state from state to types"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: describeMatch to MethodInvocation at 0", "MOV SimpleName: classTree to MethodInvocation at 1"]}, {"root": "UPDATE from classTree to addAll", "operations": ["UPD SimpleName: classTree from classTree to addAll"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from elementType to type", "operations": ["UPD SimpleName: elementType from elementType to type"]}, {"root": "UPDATE from addImport to builder", "operations": ["UPD SimpleName: addImport from addImport to builder", "UPD SimpleName: replace from replace to builder"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: replace to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: build to MethodInvocation at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: AnnotationTree to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Target to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from Compound to Set", "operations": ["UPD SimpleName: Compound from Compound to Set"]}, {"root": "MOVE from SimpleType: Set", "operations": ["MOV SimpleName: Compound to SimpleType: Set at 0"]}, {"root": "UPDATE from ASTHelpers to EnumSet", "operations": ["UPD SimpleName: ASTHelpers from ASTHelpers to EnumSet"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ASTHelpers to MethodInvocation at 0", "MOV SimpleName: classTree to MethodInvocation at 1"]}, {"root": "UPDATE from classTree to copyOf", "operations": ["UPD SimpleName: classTree from classTree to copyOf"]}, {"root": "UPDATE from attribute to REQUIRED_ELEMENT_TYPES", "operations": ["UPD SimpleName: attribute from attribute to REQUIRED_ELEMENT_TYPES"]}, {"root": "UPDATE from SuggestedFix to Arrays", "operations": ["UPD SimpleName: SuggestedFix from SuggestedFix to Arrays"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: SuggestedFix to MethodInvocation at 0"]}, {"root": "UPDATE from addImport to asList", "operations": ["UPD SimpleName: addImport from addImport to asList"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: addImport to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: addImport to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from classTree to replace", "operations": ["UPD SimpleName: classTree from classTree to replace"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: classTree to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getAnnotations to MethodInvocation at 2"]}, {"root": "UPDATE from classTree to targetTree", "operations": ["UPD SimpleName: classTree from classTree to targetTree", "UPD SimpleName: target from target to targetTree", "UPD SimpleName: state from state to targetTree"]}, {"root": "UPDATE from hasExclusivelyTypeAndOrMethodTargeting to target", "operations": ["UPD SimpleName: hasExclusivelyTypeAndOrMethodTargeting from hasExclusivelyTypeAndOrMethodTargeting to target"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: classTree to MethodInvocation at 1", "INS SimpleName: getAnnotation to MethodInvocation at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: != to InfixExpression: && at 0"]}, {"root": "INS PrefixExpression: ! to InfixExpression: && at 1", "operations": ["INS SimpleName: asList to MethodInvocation at 1", "INS SimpleName: Arrays to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: REQUIRED_ELEMENT_TYPES to MethodInvocation at 2", "INS SimpleName: containsAll to MethodInvocation at 1", "INS MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: addStaticImport to MethodInvocation at 0"]}, {"root": "UPDATE from classTree to value", "operations": ["UPD SimpleName: classTree from classTree to value"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: classTree to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: addStaticImport to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from classSymbol to get", "operations": ["UPD SimpleName: classSymbol from classSymbol to get"]}, {"root": "INS NumberLiteral: 0 to MethodInvocation at 4", "operations": ["INS NumberLiteral: 0 to MethodInvocation at 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ASTHelpers to MethodInvocation at 0", "MOV SimpleName: getAnnotation to MethodInvocation at 1", "MOV TypeLiteral to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: equals to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from equals to join", "operations": ["UPD SimpleName: equals from equals to join"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: state to MethodInvocation at 2"]}, {"root": "UPDATE from getAnnotation to getMatchingNodes", "operations": ["UPD SimpleName: getAnnotation from getAnnotation to getMatchingNodes"]}, {"root": "UPDATE from describe to describeMatch", "operations": ["UPD SimpleName: describe from describe to describeMatch"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: target to MethodInvocation at 1", "INS SimpleName: replaceTargetAnnotation to MethodInvocation at 0"]}, {"root": "UPDATE from ASTHelpers to Joiner", "operations": ["UPD SimpleName: ASTHelpers from ASTHelpers to Joiner"]}, {"root": "UPDATE from annotation to on", "operations": ["UPD SimpleName: annotation from annotation to on"]}, {"root": "INS StringLiteral: \", \" to MethodInvocation at 3", "operations": ["INS StringLiteral: \", \" to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: state to MethodInvocation at 2"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement", "DEL Javadoc", "DEL TextElement: Matches classes that are annotated with @Scope or @ScopeAnnotation. "]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL SimpleName: elementType", "DEL InfixExpression: !=", "DEL SimpleName: METHOD"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL SimpleName: elementType", "DEL InfixExpression: !=", "DEL SimpleName: TYPE"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: elementType", "DEL Block", "DEL ExpressionStatement", "DEL IfStatement", "DEL InfixExpression: ||", "DEL InfixExpression: ==", "DEL BooleanLiteral: true", "DEL SimpleName: TYPE", "DEL SimpleName: METHOD", "DEL SimpleName: elementType", "DEL SimpleName: hasExclusivelyTypeAndOrMethodTargeting", "DEL InfixExpression: ==", "DEL Assignment: ="]}, {"root": "DEL IfStatement", "operations": ["DEL EnhancedForStatement", "DEL IfStatement", "DEL Block", "DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL IfStatement", "DEL Block", "DEL SimpleName: describe", "DEL SimpleName: state", "DEL PrefixExpression: !", "DEL SimpleName: classTree", "DEL SimpleName: hasExclusivelyTypeAndOrMethodTargeting", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL InfixExpression: &&", "DEL SimpleName: matchClass", "DEL Modifier: final", "DEL Block", "DEL IfStatement", "DEL Modifier: public", "DEL SimpleType: Symbol", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL InfixExpression: &", "DEL MethodInvocation", "DEL QualifiedName: Flags.ANNOTATION", "DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL InfixExpression: !=", "DEL ParenthesizedExpression"]}, {"root": "DEL SimpleType: VisitorState", "operations": ["DEL SimpleName: VisitorState", "DEL SimpleType: VisitorState"]}, {"root": "DEL SimpleType: Compound", "operations": ["DEL SimpleType: Compound"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getSymbol"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getSymbolFromString", "DEL SimpleName: state", "DEL SimpleName: TARGET_ANNOTATION", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL StringLiteral: \"java.lang.annotation.Target\"", "DEL MethodInvocation", "DEL StringLiteral: \"java.lang.annotation.ElementType.TYPE\"", "DEL StringLiteral: \"java.lang.annotation.ElementType.METHOD\"", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: addStaticImport", "DEL SimpleName: builder"]}, {"root": "DEL SimpleName: prefixWith", "operations": ["DEL SimpleName: prefixWith"]}, {"root": "DEL StringLiteral: \"@Target({TYPE, METHOD})\\n\"", "operations": ["DEL StringLiteral: \"@Target({TYPE, METHOD})\\n\""]}, {"root": "DEL SimpleName: getSymbol", "operations": ["DEL SimpleName: getSymbol"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL IfStatement", "DEL Block", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: build", "DEL SimpleName: target", "DEL InfixExpression: ==", "DEL NullLiteral"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: targetNode", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL SimpleName: annotation", "DEL SimpleName: getSymbolFromString", "DEL Assignment: =", "DEL SimpleName: annotation", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: targetNode", "DEL EnhancedForStatement", "DEL SimpleName: getModifiers", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: TARGET_ANNOTATION", "DEL Block", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration"]}, {"root": "DEL ReturnStatement", "operations": ["DEL StringLiteral: \"java.lang.annotation.ElementType.TYPE\"", "DEL SimpleName: targetNode", "DEL MethodInvocation", "DEL ReturnStatement", "DEL StringLiteral: \"java.lang.annotation.ElementType.METHOD\"", "DEL MethodInvocation", "DEL SimpleName: targetNode", "DEL MethodInvocation", "DEL StringLiteral: \"java.lang.annotation.Target\"", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: describeMatch", "DEL SimpleName: addStaticImport", "DEL StringLiteral: \"@Target({TYPE, METHOD})\"", "DEL MethodInvocation"]}]}}, {"InvalidTargetingOnScopingAnnotation_diff": {"operations": ["Move ImportDeclaration(35) into CompilationUnit(328) at 8", "Move ImportDeclaration(41) into CompilationUnit(328) at 9", "Move ImportDeclaration(43) into CompilationUnit(328) at 12", "Move ImportDeclaration(45) into CompilationUnit(328) at 13", "Insert ImportDeclaration(3) into CompilationUnit(328) at 1", "Insert ImportDeclaration(11) into CompilationUnit(328) at 5", "Insert ImportDeclaration(17) into CompilationUnit(328) at 8", "Insert ImportDeclaration(19) into CompilationUnit(328) at 9", "Insert ImportDeclaration(25) into CompilationUnit(328) at 12", "Insert ImportDeclaration(27) into CompilationUnit(328) at 13", "Insert ImportDeclaration(49) into CompilationUnit(328) at 24", "Insert ImportDeclaration(53) into CompilationUnit(328) at 26", "Insert ImportDeclaration(59) into CompilationUnit(328) at 29", "Insert ImportDeclaration(69) into CompilationUnit(328) at 34", "Insert ImportDeclaration(71) into CompilationUnit(328) at 35", "Insert ImportDeclaration(73) into CompilationUnit(328) at 36", "Insert QualifiedName: com.google.common.collect.Sets.immutableEnumSet(2) into ImportDeclaration(3) at 0", "Update QualifiedName: com.google.errorprone.util.ASTHelpers(34) to com.google.errorprone.util.ASTHelpers.getAnnotation", "Update QualifiedName: com.sun.tools.javac.code.Attribute.Compound(40) to com.sun.source.tree.Tree.Kind.ANNOTATION_TYPE", "Update QualifiedName: com.sun.tools.javac.code.Flags(42) to com.google.common.base.Joiner", "Update QualifiedName: com.sun.tools.javac.code.Symbol(44) to com.google.common.collect.ImmutableSet", "Insert QualifiedName: com.google.errorprone.fixes.Fix(48) into ImportDeclaration(49) at 0", "Insert QualifiedName: com.google.errorprone.fixes.SuggestedFix.Builder(52) into ImportDeclaration(53) at 0", "Insert QualifiedName: java.util.Arrays(68) into ImportDeclaration(69) at 0", "Insert QualifiedName: java.util.EnumSet(70) into ImportDeclaration(71) at 0", "Insert QualifiedName: java.util.Set(72) into ImportDeclaration(73) at 0", "Insert FieldDeclaration(135) into TypeDeclaration: class(327) at 7", "Insert FieldDeclaration(175) into TypeDeclaration: class(327) at 9", "Insert MethodDeclaration(247) into TypeDeclaration: class(327) at 10", "Insert Modifier: private(117) into FieldDeclaration(135) at 0", "Insert Modifier: static(118) into FieldDeclaration(135) at 1", "Insert Modifier: final(119) into FieldDeclaration(135) at 2", "Insert VariableDeclarationFragment(134) into FieldDeclaration(135) at 4", "Insert Modifier: private(161) into FieldDeclaration(175) at 0", "Insert Modifier: static(162) into FieldDeclaration(175) at 1", "Insert Modifier: final(163) into FieldDeclaration(175) at 2", "Insert ParameterizedType: ImmutableSet<ElementType>(168) into FieldDeclaration(175) at 3", "Insert VariableDeclarationFragment(174) into FieldDeclaration(175) at 4", "Move MarkerAnnotation(113) into MethodDeclaration(247) at 0", "Insert Modifier: public(178) into MethodDeclaration(247) at 1", "Insert Modifier: final(179) into MethodDeclaration(247) at 2", "Move SimpleType: Description(117) into MethodDeclaration(247) at 3", "Insert SimpleName: matchClass(182) into MethodDeclaration(247) at 4", "Move SingleVariableDeclaration(122) into MethodDeclaration(247) at 5", "Move SingleVariableDeclaration(126) into MethodDeclaration(247) at 6", "Insert Block(246) into MethodDeclaration(247) at 7", "Insert Javadoc(251) into MethodDeclaration(326) at 0", "Update Modifier: public(223) to private", "Update SimpleType: Description(225) to Fix", "Update SimpleName: describe(226) to replaceTargetAnnotation", "Update TextElement:  sgoldfeder@google.com (Steven Goldfeder)(50) to  sgoldfeder@google.com (Steven Goldfeder) ", "Update StringLiteral: \"The target of a scoping annotation must be set to METHOD and/or TYPE.\"(58) to \"A scoping annotation's Target should include TYPE and METHOD.\"", "Update SimpleName: classSymbol(129) to HAS_TARGET_ANNOTATION", "Move SimpleName: classSymbol(129) into VariableDeclarationFragment(134) at 0", "Move MethodInvocation(133) into VariableDeclarationFragment(134) at 1", "Update SimpleName: SCOPE_ANNOTATION_MATCHER(101) to ANNOTATION_WITH_SCOPE_AND_TARGET", "Insert MethodInvocation(158) into VariableDeclarationFragment(159) at 1", "Insert SimpleType: ImmutableSet(165) into ParameterizedType: ImmutableSet<ElementType>(168) at 0", "Insert SimpleType: ElementType(167) into ParameterizedType: ImmutableSet<ElementType>(168) at 1", "Insert SimpleName: REQUIRED_ELEMENT_TYPES(169) into VariableDeclarationFragment(174) at 0", "Insert MethodInvocation(173) into VariableDeclarationFragment(174) at 1", "Insert IfStatement(243) into Block(246) at 0", "Move ReturnStatement(220) into Block(246) at 1", "Insert TagElement(250) into Javadoc(251) at 0", "Update SimpleName: Description(224) to Fix", "Update SimpleType: ClassTree(228) to Target", "Update SimpleName: classTree(229) to annotation", "Move SimpleType: AnnotationTree(278) into SingleVariableDeclaration(263) at 0", "Update SimpleName: state(233) to targetAnnotationTree", "Insert ExpressionStatement(285) into Block(325) at 1", "Insert VariableDeclarationStatement(306) into Block(325) at 2", "Insert EnhancedForStatement(320) into Block(325) at 3", "Insert ReturnStatement(324) into Block(325) at 4", "Update StringLiteral: \"Scoping annotations are only appropriate for provision and therefore are only \"(61) to \"`@Scope` annotations should be applicable to TYPE (annotating classes that should\"", "Update StringLiteral: \"appropriate on @Provides methods and classes that will be provided just-in-time.\"(62) to \" be scoped) and to METHOD (annotating `@Provides` methods to apply scoping to the\"", "Insert StringLiteral: \" returned object.\\n\\n\"(87) into InfixExpression: +(90) at 2", "Insert StringLiteral: \" If an annotation's use is restricted by `@Target` and it doesn't include those two\"(88) into InfixExpression: +(90) at 3", "Insert StringLiteral: \" element types, the annotation can't be used where it should be able to be used.\"(89) into InfixExpression: +(90) at 4", "Insert SimpleName: ClassTree(122) into SimpleType: ClassTree(123) at 0", "Update SimpleName: Symbol(127) to AnnotationTree", "Move SimpleName: Symbol(127) into SimpleType: AnnotationTree(125) at 0", "Update SimpleName: ASTHelpers(130) to annotations", "Update SimpleName: getSymbol(131) to AT_LEAST_ONE", "Insert MethodInvocation(132) into MethodInvocation(133) at 2", "Insert SimpleName: allOf(145) into MethodInvocation(158) at 0", "Insert MethodInvocation(148) into MethodInvocation(158) at 1", "Move MethodInvocation(109) into MethodInvocation(158) at 2", "Insert SimpleName: HAS_TARGET_ANNOTATION(157) into MethodInvocation(158) at 3", "Insert SimpleName: ImmutableSet(164) into SimpleType: ImmutableSet(165) at 0", "Insert SimpleName: ElementType(166) into SimpleType: ElementType(167) at 0", "Update SimpleName: classSymbol(136) to immutableEnumSet", "Move SimpleName: classSymbol(136) into MethodInvocation(173) at 0", "Update SimpleName: flags(137) to TYPE", "Move SimpleName: flags(137) into MethodInvocation(173) at 1", "Insert SimpleName: METHOD(172) into MethodInvocation(173) at 2", "Insert MethodInvocation(195) into IfStatement(243) at 0", "Move Block(217) into IfStatement(243) at 1", "Insert TextElement: Rewrite the annotation with static imports, adding TYPE and METHOD to the @Target annotation(248) into TagElement(250) at 0", "Insert TextElement: value (and reordering them to their declaration order in ElementType).(249) into TagElement(250) at 1", "Update SimpleName: ClassTree(227) to Target", "Insert ParameterizedType: Set<ElementType>(268) into VariableDeclarationStatement(275) at 0", "Insert MethodInvocation(284) into ExpressionStatement(285) at 0", "Insert SimpleType: Builder(287) into VariableDeclarationStatement(306) at 0", "Insert VariableDeclarationFragment(305) into VariableDeclarationStatement(306) at 1", "Move SingleVariableDeclaration(173) into EnhancedForStatement(320) at 0", "Insert SimpleName: types(311) into EnhancedForStatement(320) at 1", "Insert Block(319) into EnhancedForStatement(320) at 2", "Insert MethodInvocation(323) into ReturnStatement(324) at 0", "Update SimpleName: classTree(132) to isType", "Move SimpleName: classTree(132) into MethodInvocation(132) at 0", "Insert SimpleName: TARGET_ANNOTATION(131) into MethodInvocation(132) at 1", "Insert SimpleName: kindIs(146) into MethodInvocation(148) at 0", "Insert SimpleName: ANNOTATION_TYPE(147) into MethodInvocation(148) at 1", "Update SimpleName: SCOPE_ANNOTATION_MATCHER(144) to ANNOTATION_WITH_SCOPE_AND_TARGET", "Move SimpleName: SCOPE_ANNOTATION_MATCHER(144) into MethodInvocation(195) at 0", "Move SimpleName: matches(145) into MethodInvocation(195) at 1", "Move SimpleName: classTree(146) into MethodInvocation(195) at 2", "Move SimpleName: state(147) into MethodInvocation(195) at 3", "Move IfStatement(203) into Block(242) at 2", "Insert SimpleType: Set(265) into ParameterizedType: Set<ElementType>(268) at 0", "Insert SimpleType: ElementType(267) into ParameterizedType: Set<ElementType>(268) at 1", "Update SimpleName: target(237) to types", "Update SimpleName: classTree(254) to addAll", "Move SimpleName: classTree(254) into MethodInvocation(284) at 1", "Move MethodInvocation(270) into MethodInvocation(284) at 2", "Insert SimpleName: Builder(286) into SimpleType: Builder(287) at 0", "Insert SimpleName: builder(288) into VariableDeclarationFragment(305) at 0", "Insert MethodInvocation(304) into VariableDeclarationFragment(305) at 1", "Update SimpleName: elementType(172) to type", "Insert ExpressionStatement(318) into Block(319) at 0", "Update SimpleName: replace(324) to builder", "Move SimpleName: replace(324) into MethodInvocation(323) at 0", "Move SimpleName: build(328) into MethodInvocation(323) at 1", "Move SimpleType: AnnotationTree(284) into VariableDeclarationStatement(206) at 0", "Move SimpleType: Target(151) into VariableDeclarationStatement(217) at 0", "Update SimpleName: Compound(235) to Set", "Move SimpleName: Compound(235) into SimpleType: Set(265) at 0", "Insert SimpleName: ElementType(266) into SimpleType: ElementType(267) at 0", "Update SimpleName: ASTHelpers(238) to EnumSet", "Move SimpleName: ASTHelpers(238) into MethodInvocation(273) at 0", "Update SimpleName: classTree(240) to copyOf", "Move SimpleName: classTree(240) into MethodInvocation(273) at 1", "Update SimpleName: attribute(242) to REQUIRED_ELEMENT_TYPES", "Update SimpleName: SuggestedFix(255) to Arrays", "Move SimpleName: SuggestedFix(255) into MethodInvocation(283) at 0", "Update SimpleName: addImport(258) to asList", "Move SimpleName: addImport(258) into MethodInvocation(283) at 1", "Insert MethodInvocation(282) into MethodInvocation(283) at 2", "Move MethodInvocation(314) into MethodInvocation(304) at 0", "Update SimpleName: classTree(287) to replace", "Move SimpleName: classTree(287) into MethodInvocation(304) at 1", "Update SimpleName: getAnnotations(290) to targetAnnotationTree", "Move SimpleName: getAnnotations(290) into MethodInvocation(304) at 2", "Insert InfixExpression: +(303) into MethodInvocation(304) at 3", "Insert MethodInvocation(317) into ExpressionStatement(318) at 0", "Update SimpleName: target(152) to targetTree", "Update SimpleName: hasExclusivelyTypeAndOrMethodTargeting(163) to target", "Insert MethodInvocation(215) into VariableDeclarationFragment(216) at 1", "Move InfixExpression: !=(169) into InfixExpression: &&(231) at 0", "Insert PrefixExpression: !(230) into InfixExpression: &&(231) at 1", "Update SimpleName: addStaticImport(261) to annotation", "Move SimpleName: addStaticImport(261) into MethodInvocation(282) at 0", "Update SimpleName: classTree(268) to value", "Move SimpleName: classTree(268) into MethodInvocation(282) at 1", "Insert StringLiteral: \"@Target({\"(294) into InfixExpression: +(303) at 0", "Insert MethodInvocation(301) into InfixExpression: +(303) at 1", "Insert StringLiteral: \"})\"(302) into InfixExpression: +(303) at 2", "Update SimpleName: addImport(315) to builder", "Move SimpleName: addImport(315) into MethodInvocation(317) at 0", "Move SimpleName: addStaticImport(318) into MethodInvocation(317) at 1", "Insert InfixExpression: +(316) into MethodInvocation(317) at 2", "Insert MethodInvocation(201) into MethodInvocation(204) at 0", "Update SimpleName: classSymbol(155) to get", "Insert NumberLiteral: 0(203) into MethodInvocation(204) at 2", "Insert SimpleName: getAnnotation(210) into MethodInvocation(215) at 0", "Insert SimpleName: classTree(211) into MethodInvocation(215) at 1", "Move TypeLiteral(158) into MethodInvocation(215) at 2", "Insert MethodInvocation(229) into PrefixExpression: !(230) at 0", "Move MethodInvocation(295) into MethodInvocation(301) at 0", "Update SimpleName: equals(296) to join", "Move SimpleName: equals(296) into MethodInvocation(301) at 1", "Update SimpleName: state(297) to types", "Move SimpleName: state(297) into MethodInvocation(301) at 2", "Insert StringLiteral: \"java.lang.annotation.ElementType.\"(314) into InfixExpression: +(316) at 0", "Insert SimpleName: type(315) into InfixExpression: +(316) at 1", "Update SimpleName: ASTHelpers(153) to HAS_TARGET_ANNOTATION", "Move SimpleName: ASTHelpers(153) into MethodInvocation(201) at 0", "Move SimpleName: getAnnotation(154) into MethodInvocation(201) at 1", "Insert MethodInvocation(226) into MethodInvocation(229) at 0", "Insert SimpleName: containsAll(227) into MethodInvocation(229) at 1", "Insert SimpleName: REQUIRED_ELEMENT_TYPES(228) into MethodInvocation(229) at 2", "Update SimpleName: classTree(185) to targetTree", "Insert MethodInvocation(237) into MethodInvocation(238) at 2", "Update SimpleName: ASTHelpers(292) to Joiner", "Update SimpleName: annotation(294) to on", "Insert StringLiteral: \", \"(297) into MethodInvocation(298) at 2", "Insert SimpleName: Arrays(221) into MethodInvocation(226) at 0", "Insert SimpleName: asList(222) into MethodInvocation(226) at 1", "Move MethodInvocation(176) into MethodInvocation(226) at 2", "Insert SimpleName: replaceTargetAnnotation(234) into MethodInvocation(237) at 0", "Insert SimpleName: target(235) into MethodInvocation(237) at 1", "Update SimpleName: state(186) to targetTree", "Move SimpleName: state(186) into MethodInvocation(237) at 2", "Delete TagElement(91)", "Delete Javadoc(92)", "Delete PrimitiveType: boolean(162)", "Delete BooleanLiteral: false(164)", "Delete SimpleName: elementType(177)", "Delete SimpleName: METHOD(178)", "Delete InfixExpression: !=(179)", "Delete SimpleName: elementType(180)", "Delete SimpleName: TYPE(181)", "Delete InfixExpression: !=(182)", "Delete SimpleName: elementType(190)", "Delete SimpleName: METHOD(191)", "Delete InfixExpression: ==(192)", "Delete SimpleName: elementType(193)", "Delete SimpleName: TYPE(194)", "Delete InfixExpression: ==(195)", "Delete InfixExpression: ||(196)", "Delete SimpleName: hasExclusivelyTypeAndOrMethodTargeting(197)", "Delete BooleanLiteral: true(198)", "Delete Assignment: =(199)", "Delete ExpressionStatement(200)", "Delete Block(201)", "Delete IfStatement(202)", "Delete Block(204)", "Delete EnhancedForStatement(205)", "Delete Block(206)", "Delete IfStatement(207)", "Delete SimpleName: hasExclusivelyTypeAndOrMethodTargeting(208)", "Delete PrefixExpression: !(209)", "Delete SimpleName: describe(210)", "Delete SimpleName: classTree(211)", "Delete SimpleName: state(212)", "Delete MethodInvocation(213)", "Delete ReturnStatement(214)", "Delete Block(215)", "Delete IfStatement(216)", "Delete Modifier: public(114)", "Delete Modifier: final(115)", "Delete SimpleName: matchClass(118)", "Delete SimpleType: Symbol(128)", "Delete VariableDeclarationFragment(134)", "Delete VariableDeclarationStatement(135)", "Delete MethodInvocation(138)", "Delete QualifiedName: Flags.ANNOTATION(139)", "Delete InfixExpression: &(140)", "Delete ParenthesizedExpression(141)", "Delete NumberLiteral: 0(142)", "Delete InfixExpression: !=(143)", "Delete MethodInvocation(148)", "Delete InfixExpression: &&(149)", "Delete IfStatement(218)", "Delete Block(221)", "Delete MethodDeclaration(222)", "Delete SimpleName: VisitorState(231)", "Delete SimpleType: VisitorState(232)", "Delete SimpleType: Compound(236)", "Delete SimpleName: getSymbol(239)", "Delete MethodInvocation(241)", "Delete SimpleName: state(243)", "Delete SimpleName: getSymbolFromString(244)", "Delete SimpleName: TARGET_ANNOTATION(245)", "Delete MethodInvocation(246)", "Delete SimpleName: builder(256)", "Delete MethodInvocation(257)", "Delete StringLiteral: \"java.lang.annotation.Target\"(259)", "Delete MethodInvocation(260)", "Delete StringLiteral: \"java.lang.annotation.ElementType.TYPE\"(262)", "Delete MethodInvocation(263)", "Delete SimpleName: addStaticImport(264)", "Delete StringLiteral: \"java.lang.annotation.ElementType.METHOD\"(265)", "Delete MethodInvocation(266)", "Delete SimpleName: prefixWith(267)", "Delete StringLiteral: \"@Target({TYPE, METHOD})\\n\"(269)", "Delete SimpleName: getSymbol(293)", "Delete SimpleName: target(250)", "Delete NullLiteral(251)", "Delete InfixExpression: ==(252)", "Delete SimpleName: build(271)", "Delete MethodInvocation(272)", "Delete MethodInvocation(273)", "Delete ReturnStatement(274)", "Delete Block(275)", "Delete IfStatement(276)", "Delete SimpleName: targetNode(279)", "Delete NullLiteral(280)", "Delete VariableDeclarationFragment(281)", "Delete VariableDeclarationStatement(282)", "Delete SimpleName: annotation(285)", "Delete SingleVariableDeclaration(286)", "Delete SimpleName: getModifiers(288)", "Delete MethodInvocation(289)", "Delete MethodInvocation(291)", "Delete SimpleName: getSymbolFromString(298)", "Delete SimpleName: TARGET_ANNOTATION(299)", "Delete MethodInvocation(300)", "Delete MethodInvocation(301)", "Delete SimpleName: targetNode(302)", "Delete SimpleName: annotation(303)", "Delete Assignment: =(304)", "Delete ExpressionStatement(305)", "Delete Block(306)", "Delete IfStatement(307)", "Delete Block(308)", "Delete EnhancedForStatement(309)", "Delete SimpleName: targetNode(311)", "Delete StringLiteral: \"java.lang.annotation.Target\"(316)", "Delete MethodInvocation(317)", "Delete StringLiteral: \"java.lang.annotation.ElementType.TYPE\"(319)", "Delete MethodInvocation(320)", "Delete SimpleName: addStaticImport(321)", "Delete StringLiteral: \"java.lang.annotation.ElementType.METHOD\"(322)", "Delete MethodInvocation(323)", "Delete SimpleName: targetNode(325)", "Delete StringLiteral: \"@Target({TYPE, METHOD})\"(326)", "Delete MethodInvocation(327)", "Delete MethodInvocation(329)", "Delete MethodInvocation(330)", "Delete ReturnStatement(331)"]}}], "commit_stats": [{"total_files": 3, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}