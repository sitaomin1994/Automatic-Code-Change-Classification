{"application": "apache-phoenix", "csha": "9b9c86808e61382fc14306ea0aa5762815cc2ebf", "files": [{"SequenceIT_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS ImportDeclaration to CompilationUnit at 10", "INS QualifiedName: java.util.List to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 21", "operations": ["INS ImportDeclaration to CompilationUnit at 21", "INS QualifiedName: org.apache.phoenix.util.SequenceUtil to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 27", "operations": ["INS QualifiedName: com.google.common.collect.Lists to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 27"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 15"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS SimpleType: String to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS Modifier: final to FieldDeclaration at 2", "INS Modifier: static to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS StringLiteral: \"SELECT NEXT VALUE FOR foo.bar FROM SYSTEM.\\\"SEQUENCE\\\"\" to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: NEXT_VAL_SQL to VariableDeclarationFragment at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS Block to MethodDeclaration at 5", "INS SimpleName: testSelectNextValueFor to MethodDeclaration at 3", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS NumberLiteral: 5 to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS NumberLiteral: 3 to MethodInvocation at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS NumberLiteral: 7 to MethodInvocation at 3", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS ExpressionStatement to Block at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: sqlEx2 to MethodInvocation at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS StringLiteral: \"CREATE SEQUENCE alpha.zeta START WITH 4 INCREMENT BY 7 MAXVALUE 24\" to MethodInvocation at 2", "INS SimpleName: rs to MethodInvocation at 0", "INS StringLiteral: \"ZETA\" to MethodInvocation at 3", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS ExpressionStatement to Block at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getException to MethodInvocation at 1", "INS SimpleName: query to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 12", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MIN_VALUE to MethodInvocation at 4", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: getInt to MethodInvocation at 1", "INS SimpleName: getInt to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 4", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: rs to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS SimpleName: assertFalse to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 13", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Exception to MethodDeclaration at 4", "INS InfixExpression: - to MethodInvocation at 1", "INS NumberLiteral: 7 to InfixExpression: + at 1", "INS Block to TryStatement at 0", "INS StringLiteral: \"SELECT NEXT VALUE FOR alpha.zeta, NEXT VALUE FOR alpha.kappa FROM SYSTEM.\\\"SEQUENCE\\\"\" to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 16", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 14", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS SimpleName: next to MethodInvocation at 1", "INS Block to CatchClause at 1", "INS ExpressionStatement to Block at 11", "INS InfixExpression: - to MethodInvocation at 1", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS NumberLiteral: 2 to InfixExpression: * at 1", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \"KAPPA\" to MethodInvocation at 3", "INS ExpressionStatement to Block at 10", "INS ExpressionStatement to Block at 18", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: SQLException to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 6", "INS NumberLiteral: 2 to InfixExpression: * at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: newArrayList to MethodInvocation at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS StringLiteral: \"ALPHA\" to MethodInvocation at 2", "INS SimpleName: getException to MethodInvocation at 1", "INS InfixExpression: * to InfixExpression: - at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getMessage to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: fail to MethodInvocation at 0", "INS SimpleName: close to MethodInvocation at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: next to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS NumberLiteral: 9 to MethodInvocation at 1", "INS NumberLiteral: 4 to InfixExpression: + at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: e to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MAX_VALUE to MethodInvocation at 4", "INS SimpleName: SequenceUtil to MethodInvocation at 0", "INS ExpressionStatement to Block at 20", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleType: SQLException to VariableDeclarationStatement at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: verifyExceptions to MethodInvocation at 0", "INS TryStatement to Block at 19", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: close to MethodInvocation at 1", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS NumberLiteral: 9 to InfixExpression: - at 0", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS NumberLiteral: 9 to InfixExpression: - at 0", "INS SimpleName: Lists to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: sqlEx1 to MethodInvocation at 0", "INS SimpleName: getInt to MethodInvocation at 1", "INS SimpleName: Test to MarkerAnnotation at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: getMessage to MethodInvocation at 1", "INS NumberLiteral: 2 to InfixExpression: - at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS NumberLiteral: 7 to InfixExpression: * at 0", "INS SimpleName: next to MethodInvocation at 1", "INS InfixExpression: * to InfixExpression: + at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 8", "INS SimpleName: next to MethodInvocation at 1", "INS StringLiteral: \"ALPHA\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 17", "INS NumberLiteral: 4 to InfixExpression: + at 0", "INS SimpleName: SequenceUtil to MethodInvocation at 0", "INS SimpleName: sqlEx2 to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS CatchClause to TryStatement at 1", "INS NumberLiteral: 2 to InfixExpression: * at 1", "INS InfixExpression: + to MethodInvocation at 1", "INS SimpleName: sqlEx1 to VariableDeclarationFragment at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 21", "operations": ["INS SimpleName: getInt to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: getInt to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 5", "INS MarkerAnnotation to MethodDeclaration at 0", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS NumberLiteral: 9 to MethodInvocation at 1", "INS SimpleName: getInt to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: assertFalse to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: next to MethodInvocation at 1", "INS NumberLiteral: 4 to InfixExpression: + at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ExpressionStatement to Block at 10", "INS SimpleName: String to SimpleType: String at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Test to MarkerAnnotation at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: getInt to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: next to MethodInvocation at 1", "INS NumberLiteral: 9 to InfixExpression: - at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS ExpressionStatement to Block at 19", "INS ExpressionStatement to Block at 8", "INS ExpressionStatement to Block at 14", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS ExpressionStatement to Block at 16", "INS SimpleName: createStatement to MethodInvocation at 1", "INS ExpressionStatement to Block at 22", "INS VariableDeclarationStatement to Block at 4", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS NumberLiteral: 2 to InfixExpression: - at 1", "INS InfixExpression: - to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS NumberLiteral: 7 to InfixExpression: + at 1", "INS StringLiteral: \"CREATE SEQUENCE alpha.zeta START WITH 4 INCREMENT BY 7 MINVALUE 4 MAXVALUE 19 CYCLE\" to MethodInvocation at 2", "INS StringLiteral: \"CREATE SEQUENCE alpha.kappa START WITH 9 INCREMENT BY -2 MINVALUE 5 MAXVALUE 9 CYCLE\" to MethodInvocation at 2", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: query to VariableDeclarationFragment at 0", "INS NumberLiteral: 4 to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS ExpressionStatement to Block at 11", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: close to MethodInvocation at 1", "INS SimpleName: close to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: testMultipleSequencesCycle to MethodDeclaration at 3", "INS ExpressionStatement to Block at 13", "INS SimpleType: Exception to MethodDeclaration at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"SELECT NEXT VALUE FOR alpha.zeta, NEXT VALUE FOR alpha.kappa FROM SYSTEM.\\\"SEQUENCE\\\"\" to VariableDeclarationFragment at 1", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS ExpressionStatement to Block at 7", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: next to MethodInvocation at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS ExpressionStatement to Block at 12", "INS SimpleName: execute to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 36", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS ExpressionStatement to Block at 18", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 28", "INS StringLiteral: \"DROP SEQUENCE foo.bar\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 14", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS NumberLiteral: 11 to MethodInvocation at 2", "INS InfixExpression: - to MethodInvocation at 3", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS NumberLiteral: 2 to PrefixExpression: - at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"DROP SEQUENCE foo.bar\" to MethodInvocation at 2", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS ExpressionStatement to Block at 8", "INS SimpleName: conn to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to MethodInvocation at 0", "INS QualifiedName: Long.MIN_VALUE to InfixExpression: + at 0", "INS NumberLiteral: 2 to InfixExpression: - at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 12", "INS SimpleName: testSequenceDefault to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"CREATE SEQUENCE foo.bar INCREMENT BY -1\" to MethodInvocation at 2", "INS SimpleName: conn to MethodInvocation at 0", "INS ExpressionStatement to Block at 4", "INS SimpleName: createStatement to MethodInvocation at 1", "INS ExpressionStatement to Block at 24", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS NumberLiteral: 1 to MethodInvocation at 1", "INS SimpleName: execute to MethodInvocation at 1", "INS ExpressionStatement to Block at 21", "INS SimpleName: createStatement to MethodInvocation at 1", "INS ExpressionStatement to Block at 25", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS QualifiedName: Long.MIN_VALUE to InfixExpression: + at 0", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 36", "INS ExpressionStatement to Block at 23", "INS ExpressionStatement to Block at 5", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: Test to MarkerAnnotation at 0", "INS StringLiteral: \"DROP SEQUENCE foo.bar\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS ExpressionStatement to Block at 3", "INS QualifiedName: Long.MIN_VALUE to MethodInvocation at 1", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS ExpressionStatement to Block at 11", "INS StringLiteral: \"DROP SEQUENCE foo.bar\" to MethodInvocation at 2", "INS SimpleName: conn to MethodInvocation at 0", "INS PrefixExpression: - to MethodInvocation at 3", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleType: Exception to MethodDeclaration at 4", "INS StringLiteral: \"CREATE SEQUENCE foo.bar MINVALUE 10\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: execute to MethodInvocation at 1", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS PrefixExpression: - to MethodInvocation at 3", "INS SimpleName: execute to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS NumberLiteral: 0 to MethodInvocation at 1", "INS ExpressionStatement to Block at 7", "INS ExpressionStatement to Block at 27", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 26", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS StringLiteral: \"CREATE SEQUENCE foo.bar INCREMENT BY -1 MAXVALUE 0\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS QualifiedName: Long.MAX_VALUE to MethodInvocation at 1", "INS NumberLiteral: 1 to MethodInvocation at 1", "INS ExpressionStatement to Block at 20", "INS MethodInvocation to ExpressionStatement at 0", "INS PrefixExpression: - to MethodInvocation at 2", "INS NumberLiteral: 12 to MethodInvocation at 3", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS ExpressionStatement to Block at 17", "INS ExpressionStatement to Block at 19", "INS ExpressionStatement to Block at 10", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 16", "INS QualifiedName: Long.MAX_VALUE to InfixExpression: - at 0", "INS ExpressionStatement to Block at 15", "INS NumberLiteral: 10 to MethodInvocation at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS ExpressionStatement to Block at 9", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS NumberLiteral: 2 to InfixExpression: + at 1", "INS NumberLiteral: 3 to MethodInvocation at 3", "INS SimpleName: execute to MethodInvocation at 1", "INS ExpressionStatement to Block at 13", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS StringLiteral: \"CREATE SEQUENCE foo.bar INCREMENT BY -1 MINVALUE 10 \" to MethodInvocation at 2", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"CREATE SEQUENCE foo.bar MAXVALUE 0\" to MethodInvocation at 2", "INS StringLiteral: \"DROP SEQUENCE foo.bar\" to MethodInvocation at 2", "INS StringLiteral: \"CREATE SEQUENCE foo.bar\" to MethodInvocation at 2", "INS SimpleName: execute to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 3", "INS InfixExpression: - to MethodInvocation at 2", "INS SimpleName: createStatement to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 22", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS QualifiedName: Long.MAX_VALUE to InfixExpression: - at 0", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 37", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getNextException to MethodInvocation at 1", "INS CatchClause to TryStatement at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: fail to MethodInvocation at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS QualifiedName: SQLExceptionCode.STARTS_WITH_MUST_BE_BETWEEN_MIN_MAX_VALUE to MethodInvocation at 0", "INS SimpleName: testSequenceValidateStartValue to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 37", "INS StringLiteral: \"CREATE SEQUENCE foo.bar2 START WITH 4 INCREMENT BY 1 MINVALUE 2 MAXVALUE 3\" to MethodInvocation at 2", "INS StringLiteral: \"CREATE SEQUENCE foo.bar1 START WITH 1 INCREMENT BY 1 MINVALUE 2 MAXVALUE 3\" to MethodInvocation at 2", "INS SimpleName: createStatement to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: == to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: Test to MarkerAnnotation at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS ExpressionStatement to Block at 0", "INS CatchClause to TryStatement at 1", "INS SimpleName: execute to MethodInvocation at 1", "INS Block to TryStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleType: Exception to MethodDeclaration at 4", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS Block to CatchClause at 1", "INS InfixExpression: == to MethodInvocation at 1", "INS SimpleName: getNextException to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS TryStatement to Block at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS QualifiedName: SQLExceptionCode.STARTS_WITH_MUST_BE_BETWEEN_MIN_MAX_VALUE to MethodInvocation at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: e to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS NullLiteral to InfixExpression: == at 1", "INS Block to CatchClause at 1", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: == at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: fail to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS TryStatement to Block at 2", "INS Block to TryStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: e to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 38", "operations": ["INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS ExpressionStatement to Block at 0", "INS Block to MethodDeclaration at 5", "INS SingleVariableDeclaration to CatchClause at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 2", "INS CatchClause to TryStatement at 1", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS TryStatement to Block at 1", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: fail to MethodInvocation at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleName: Test to MarkerAnnotation at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: testSequenceValidateMinValue to MethodDeclaration at 3", "INS QualifiedName: SQLExceptionCode.MINVALUE_MUST_BE_CONSTANT to MethodInvocation at 0", "INS SimpleName: e to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS Block to CatchClause at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 38", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS ExpressionStatement to Block at 1", "INS SimpleType: Exception to MethodDeclaration at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getNextException to MethodInvocation at 1", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS InfixExpression: == to MethodInvocation at 1", "INS Block to TryStatement at 0", "INS StringLiteral: \"CREATE SEQUENCE foo.bar MINVALUE abc\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 39", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS Block to TryStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS StringLiteral: \"CREATE SEQUENCE foo.bar MAXVALUE null\" to MethodInvocation at 2", "INS MarkerAnnotation to MethodDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS InfixExpression: == to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS CatchClause to TryStatement at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleType: Exception to MethodDeclaration at 4", "INS SimpleName: fail to MethodInvocation at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 39", "INS NullLiteral to InfixExpression: == at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: SQLExceptionCode.MAXVALUE_MUST_BE_CONSTANT to MethodInvocation at 0", "INS SimpleName: Test to MarkerAnnotation at 0", "INS TryStatement to Block at 1", "INS SimpleName: e to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS Block to CatchClause at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: getNextException to MethodInvocation at 1", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS Modifier: public to MethodDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: testSequenceValidateMaxValue to MethodDeclaration at 3", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS Block to MethodDeclaration at 5", "INS PrimitiveType: void to MethodDeclaration at 2", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 40", "operations": ["INS SimpleName: assertEquals to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to TryStatement at 0", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to CatchClause at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS QualifiedName: SQLExceptionCode.MINVALUE_MUST_BE_LESS_THAN_OR_EQUAL_TO_MAXVALUE to MethodInvocation at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: fail to MethodInvocation at 0", "INS SimpleName: getNextException to MethodInvocation at 1", "INS SimpleName: testSequenceValidateMinValueLessThanOrEqualToMaxValue to MethodDeclaration at 3", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: Exception to MethodDeclaration at 4", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS CatchClause to TryStatement at 1", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS TryStatement to Block at 1", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: Test to MarkerAnnotation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 40", "INS MethodInvocation to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: == to MethodInvocation at 1", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \"CREATE SEQUENCE foo.bar MINVALUE 2 MAXVALUE 1\" to MethodInvocation at 2", "INS NullLiteral to InfixExpression: == at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 41", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getNextException to MethodInvocation at 1", "INS CatchClause to TryStatement at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: testSequenceValidateIncrementConstant to MethodDeclaration at 3", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS TryStatement to Block at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS Block to TryStatement at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleType: Exception to MethodDeclaration at 4", "INS MethodInvocation to MethodInvocation at 0", "INS Block to CatchClause at 1", "INS ExpressionStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS InfixExpression: == to MethodInvocation at 1", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 5", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: Test to MarkerAnnotation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: e to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS QualifiedName: SQLExceptionCode.INCREMENT_BY_MUST_BE_CONSTANT to MethodInvocation at 0", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: fail to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"CREATE SEQUENCE foo.bar INCREMENT null\" to MethodInvocation at 2", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 41", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS NullLiteral to InfixExpression: == at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 42", "operations": ["INS SimpleName: e to MethodInvocation at 0", "INS NullLiteral to InfixExpression: == at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: execute to MethodInvocation at 1", "INS TryStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: testSequenceValidateIncrementNotEqualToZero to MethodDeclaration at 3", "INS ExpressionStatement to Block at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS MethodDeclaration to TypeDeclaration: class at 42", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Exception to MethodDeclaration at 4", "INS CatchClause to TryStatement at 1", "INS ExpressionStatement to Block at 1", "INS Block to CatchClause at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: createStatement to MethodInvocation at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: getNextException to MethodInvocation at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \"CREATE SEQUENCE foo.bar INCREMENT 0\" to MethodInvocation at 2", "INS QualifiedName: SQLExceptionCode.INCREMENT_BY_MUST_NOT_BE_ZERO to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS InfixExpression: == to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: fail to MethodInvocation at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Test to MarkerAnnotation at 0", "INS ExpressionStatement to Block at 0", "INS Block to TryStatement at 0", "INS SimpleName: assertEquals to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 43", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Test to MarkerAnnotation at 0", "INS SimpleType: Exception to MethodDeclaration at 4", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 43", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS NumberLiteral: 3 to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: testSequenceStartWithMinMaxSameValueIncreasingCycle to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS NumberLiteral: 3 to MethodInvocation at 3", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 2", "INS ExpressionStatement to Block at 3", "INS StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 3 INCREMENT BY 1 MINVALUE 3 MAXVALUE 3 CYCLE CACHE 1\" to MethodInvocation at 2", "INS SimpleName: createStatement to MethodInvocation at 1", "INS NumberLiteral: 3 to MethodInvocation at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 44", "operations": ["INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: Test to MarkerAnnotation at 0", "INS SimpleName: testSequenceStartWithMinMaxSameValueDecreasingCycle to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 44", "INS ExpressionStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS NumberLiteral: 3 to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS NumberLiteral: 3 to MethodInvocation at 2", "INS PrimitiveType: void to MethodDeclaration at 2", "INS ExpressionStatement to Block at 2", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS SimpleType: Exception to MethodDeclaration at 4", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS NumberLiteral: 3 to MethodInvocation at 3", "INS StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 3 INCREMENT BY -1 MINVALUE 3 MAXVALUE 3 CYCLE CACHE 2\" to MethodInvocation at 2", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 45", "operations": ["INS StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 3 INCREMENT BY 1 MINVALUE 3 MAXVALUE 3 CACHE 1\" to MethodInvocation at 2", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS SimpleName: fail to MethodInvocation at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS ExpressionStatement to Block at 0", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS ExpressionStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: NEXT_VAL_SQL to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: Exception to MethodDeclaration at 4", "INS ExpressionStatement to Block at 1", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: rs to VariableDeclarationFragment at 0", "INS InfixExpression: == to MethodInvocation at 1", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 2", "INS CatchClause to TryStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: getNextException to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS TryStatement to Block at 4", "INS SimpleName: conn to MethodInvocation at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS Block to CatchClause at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Test to MarkerAnnotation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MAX_VALUE to MethodInvocation at 0", "INS SimpleType: ResultSet to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS NumberLiteral: 3 to MethodInvocation at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to TryStatement at 0", "INS SimpleName: e to MethodInvocation at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: ResultSet to SimpleType: ResultSet at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: testSequenceStartWithMinMaxSameValueIncreasingNoCycle to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS Modifier: public to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 45", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: next to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 46", "operations": ["INS SimpleName: testSequenceStartWithMinMaxSameValueDecreasingNoCycle to MethodDeclaration at 3", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS InfixExpression: == to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: getNextException to MethodInvocation at 1", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MIN_VALUE to MethodInvocation at 0", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 0", "INS TryStatement to Block at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Block to TryStatement at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS ExpressionStatement to Block at 3", "INS SimpleType: ResultSet to VariableDeclarationStatement at 0", "INS SimpleName: ResultSet to SimpleType: ResultSet at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 3 INCREMENT BY -1 MINVALUE 3 MAXVALUE 3 CACHE 2\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: e to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS CatchClause to TryStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: conn to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS NumberLiteral: 3 to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS Block to CatchClause at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: next to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleName: Test to MarkerAnnotation at 0", "INS SimpleName: rs to VariableDeclarationFragment at 0", "INS SimpleType: Exception to MethodDeclaration at 4", "INS SimpleName: rs to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 46", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: fail to MethodInvocation at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: NEXT_VAL_SQL to MethodInvocation at 2", "INS SimpleName: e to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 47", "operations": ["INS ExpressionStatement to Block at 1", "INS NumberLiteral: 5 to MethodInvocation at 2", "INS NumberLiteral: 2 to MethodInvocation at 1", "INS NumberLiteral: 4 to MethodInvocation at 9", "INS SimpleName: execute to MethodInvocation at 1", "INS NumberLiteral: 8 to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 2 INCREMENT BY 3 MINVALUE 1 MAXVALUE 10 CYCLE CACHE 2\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 2", "INS SimpleName: createStatement to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS NumberLiteral: 4 to MethodInvocation at 5", "INS SimpleName: conn to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS NumberLiteral: 7 to MethodInvocation at 6", "INS MethodDeclaration to TypeDeclaration: class at 47", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 1 to MethodInvocation at 4", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS NumberLiteral: 10 to MethodInvocation at 7", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS NumberLiteral: 1 to MethodInvocation at 8", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleType: Exception to MethodDeclaration at 4", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: testSequenceIncreasingCycle to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS SimpleName: Test to MarkerAnnotation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 48", "operations": ["INS SimpleName: nextConnection to MethodInvocation at 0", "INS NumberLiteral: 10 to MethodInvocation at 3", "INS NumberLiteral: 8 to MethodInvocation at 4", "INS SimpleName: Test to MarkerAnnotation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 3 INCREMENT BY -2 MINVALUE 1 MAXVALUE 10 CYCLE CACHE 2\" to MethodInvocation at 2", "INS SimpleType: Exception to MethodDeclaration at 4", "INS NumberLiteral: 4 to MethodInvocation at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 48", "INS NumberLiteral: 10 to MethodInvocation at 8", "INS ExpressionStatement to Block at 3", "INS NumberLiteral: 2 to MethodInvocation at 7", "INS NumberLiteral: 3 to MethodInvocation at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: testSequenceDecreasingCycle to MethodDeclaration at 3", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS NumberLiteral: 8 to MethodInvocation at 9", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS NumberLiteral: 6 to MethodInvocation at 5", "INS SimpleName: createStatement to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 49", "operations": ["INS SimpleName: Test to MarkerAnnotation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: getNextException to MethodInvocation at 1", "INS InfixExpression: == to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS TryStatement to Block at 4", "INS QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MAX_VALUE to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleName: e to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS Block to TryStatement at 0", "INS NumberLiteral: 8 to MethodInvocation at 3", "INS Block to CatchClause at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 2 INCREMENT BY 3 MINVALUE 1 MAXVALUE 10 CACHE 100\" to MethodInvocation at 2", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS SimpleName: rs to VariableDeclarationFragment at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: NEXT_VAL_SQL to MethodInvocation at 2", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleType: ResultSet to VariableDeclarationStatement at 0", "INS NumberLiteral: 5 to MethodInvocation at 2", "INS SimpleName: next to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS CatchClause to TryStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: testSequenceIncreasingNoCycle to MethodDeclaration at 3", "INS SimpleType: Exception to MethodDeclaration at 4", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: ResultSet to SimpleType: ResultSet at 0", "INS MethodDeclaration to TypeDeclaration: class at 49", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 2", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS SimpleName: fail to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS NumberLiteral: 2 to MethodInvocation at 1", "INS ExpressionStatement to Block at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 50", "operations": ["INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS CatchClause to TryStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS ExpressionStatement to Block at 2", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: NEXT_VAL_SQL to MethodInvocation at 2", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: ResultSet to SimpleType: ResultSet at 0", "INS SimpleName: next to MethodInvocation at 1", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS NumberLiteral: 8 to MethodInvocation at 1", "INS SimpleName: Test to MarkerAnnotation at 0", "INS ExpressionStatement to Block at 1", "INS Modifier: public to MethodDeclaration at 1", "INS NumberLiteral: 10 to MethodInvocation at 2", "INS SingleVariableDeclaration to CatchClause at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: fail to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: testSequenceIncreasingUsingMaxValueNoCycle to MethodDeclaration at 3", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS InfixExpression: == to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MAX_VALUE to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: ResultSet to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 8 INCREMENT BY 2 MINVALUE 1 MAXVALUE 10 CACHE 2\" to MethodInvocation at 2", "INS SimpleName: getNextException to MethodInvocation at 1", "INS Block to TryStatement at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS ExpressionStatement to Block at 3", "INS Block to CatchClause at 1", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleType: Exception to MethodDeclaration at 4", "INS SimpleName: e to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: rs to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 0", "INS TryStatement to Block at 4", "INS SimpleName: conn to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS MethodDeclaration to TypeDeclaration: class at 50", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 51", "operations": ["INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: Test to MarkerAnnotation at 0", "INS ExpressionStatement to Block at 3", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS SimpleName: NEXT_VAL_SQL to MethodInvocation at 2", "INS SimpleName: createStatement to MethodInvocation at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getNextException to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleType: Exception to MethodDeclaration at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: == to MethodInvocation at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: rs to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS TryStatement to Block at 4", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS SimpleName: ResultSet to SimpleType: ResultSet at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS Block to CatchClause at 1", "INS QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MIN_VALUE to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 4 INCREMENT BY -2 MINVALUE 1 MAXVALUE 10 CACHE 100\" to MethodInvocation at 2", "INS SimpleType: ResultSet to VariableDeclarationStatement at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: next to MethodInvocation at 1", "INS SimpleName: testSequenceDecreasingNoCycle to MethodDeclaration at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS NumberLiteral: 4 to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS ExpressionStatement to Block at 2", "INS MethodDeclaration to TypeDeclaration: class at 51", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: fail to MethodInvocation at 0", "INS Block to TryStatement at 0", "INS CatchClause to TryStatement at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 52", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: == to MethodInvocation at 1", "INS SimpleName: e to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: NEXT_VAL_SQL to MethodInvocation at 2", "INS SimpleName: fail to MethodInvocation at 0", "INS SimpleName: testSequenceDecreasingUsingMinValueNoCycle to MethodDeclaration at 3", "INS NumberLiteral: 3 to MethodInvocation at 1", "INS TryStatement to Block at 4", "INS ExpressionStatement to Block at 1", "INS SimpleName: rs to VariableDeclarationFragment at 0", "INS SimpleType: ResultSet to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: next to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: Test to MarkerAnnotation at 0", "INS NullLiteral to InfixExpression: == at 1", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS VariableDeclarationStatement to Block at 0", "INS ExpressionStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 52", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS SimpleName: getNextException to MethodInvocation at 1", "INS SimpleName: ResultSet to SimpleType: ResultSet at 0", "INS Block to MethodDeclaration at 5", "INS CatchClause to TryStatement at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 3 INCREMENT BY -2 MINVALUE 1 MAXVALUE 10 CACHE 2\" to MethodInvocation at 2", "INS SimpleName: createStatement to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS Block to TryStatement at 0", "INS Block to CatchClause at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleType: Exception to MethodDeclaration at 4", "INS ExpressionStatement to Block at 3", "INS QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MIN_VALUE to MethodInvocation at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: conn to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 53", "operations": ["INS ExpressionStatement to Block at 1", "INS SimpleName: testSequenceIncreasingOverflowNoCycle to MethodDeclaration at 3", "INS Block to TryStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: e to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS Block to MethodDeclaration at 5", "INS ExpressionStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: ResultSet to SimpleType: ResultSet at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS Block to CatchClause at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS CatchClause to TryStatement at 1", "INS StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 9223372036854775807 INCREMENT BY 1 CACHE 10\" to MethodInvocation at 2", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MAX_VALUE to MethodInvocation at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Test to MarkerAnnotation at 0", "INS ExpressionStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 53", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: next to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: rs to VariableDeclarationFragment at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS QualifiedName: Long.MAX_VALUE to MethodInvocation at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: NEXT_VAL_SQL to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: fail to MethodInvocation at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS TryStatement to Block at 4", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS SimpleName: e to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS InfixExpression: == to MethodInvocation at 1", "INS SimpleName: getNextException to MethodInvocation at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: ResultSet to VariableDeclarationStatement at 0", "INS SimpleType: Exception to MethodDeclaration at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 54", "operations": ["INS Block to MethodDeclaration at 5", "INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: Long.MIN_VALUE to MethodInvocation at 2", "INS StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 9223372036854775807 INCREMENT BY 9223372036854775807 CYCLE CACHE 10\" to MethodInvocation at 2", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS InfixExpression: - to MethodInvocation at 4", "INS QualifiedName: Long.MAX_VALUE to MethodInvocation at 1", "INS SimpleType: Exception to MethodDeclaration at 4", "INS PrefixExpression: - to MethodInvocation at 6", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: testSequenceIncreasingOverflowCycle to MethodDeclaration at 3", "INS ExpressionStatement to Block at 2", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 54", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS SimpleName: Test to MarkerAnnotation at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS PrefixExpression: - to MethodInvocation at 3", "INS Modifier: public to MethodDeclaration at 1", "INS QualifiedName: Long.MIN_VALUE to MethodInvocation at 5", "INS QualifiedName: Long.MAX_VALUE to InfixExpression: - at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 55", "operations": ["INS SimpleName: next to MethodInvocation at 1", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: testSequenceDecreasingOverflowNoCycle to MethodDeclaration at 3", "INS ExpressionStatement to Block at 2", "INS QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MIN_VALUE to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: == to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 55", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS SimpleName: e to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS StringLiteral: \"CREATE SEQUENCE foo.bar START WITH -9223372036854775807 INCREMENT BY -1 CACHE 10\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 2", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS NullLiteral to InfixExpression: == at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: fail to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: getNextException to MethodInvocation at 1", "INS QualifiedName: Long.MIN_VALUE to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: NEXT_VAL_SQL to MethodInvocation at 2", "INS Block to MethodDeclaration at 5", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS CatchClause to TryStatement at 1", "INS SimpleName: e to MethodInvocation at 0", "INS TryStatement to Block at 4", "INS Block to TryStatement at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS SimpleName: ResultSet to SimpleType: ResultSet at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS Block to CatchClause at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: Test to MarkerAnnotation at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: rs to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Exception to MethodDeclaration at 4", "INS SimpleType: ResultSet to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: Long.MIN_VALUE to InfixExpression: + at 0", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: rs to VariableDeclarationFragment at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS ExpressionStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: conn to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 56", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS QualifiedName: Long.MIN_VALUE to InfixExpression: + at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertSequenceValuesForSingleRow to MethodInvocation at 0", "INS SimpleName: Test to MarkerAnnotation at 0", "INS SimpleName: testSequenceDecreasingOverflowCycle to MethodDeclaration at 3", "INS NumberLiteral: 0 to MethodInvocation at 6", "INS ExpressionStatement to Block at 3", "INS MethodDeclaration to TypeDeclaration: class at 56", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"CREATE SEQUENCE foo.bar START WITH -9223372036854775807 INCREMENT BY -9223372036854775807 CYCLE CACHE 10\" to MethodInvocation at 2", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS ExpressionStatement to Block at 2", "INS Block to MethodDeclaration at 5", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleType: Exception to MethodDeclaration at 4", "INS QualifiedName: Long.MAX_VALUE to MethodInvocation at 5", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS QualifiedName: Long.MIN_VALUE to InfixExpression: + at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS QualifiedName: Long.MAX_VALUE to MethodInvocation at 2", "INS NumberLiteral: 0 to MethodInvocation at 3", "INS InfixExpression: + to MethodInvocation at 4", "INS InfixExpression: + to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 57", "operations": ["INS StringLiteral: \"CREATE SEQUENCE foo.bar2\" to MethodInvocation at 2", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS ExpressionStatement to Block at 7", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleName: getNextException to MethodInvocation at 1", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS Block to CatchClause at 1", "INS SimpleName: e to MethodInvocation at 0", "INS Block to CatchClause at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: rs to Assignment: = at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 0", "INS NumberLiteral: 1 to MethodInvocation at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS ExpressionStatement to Block at 8", "INS SimpleName: rs to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS SimpleName: getNextException to MethodInvocation at 1", "INS ExpressionStatement to Block at 3", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: assertSequenceValuesMultipleSeq to MethodInvocation at 0", "INS TryStatement to Block at 10", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: prepareStatement to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: e to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: assertSequenceValuesMultipleSeq to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: next to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 57", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: next to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: next to MethodInvocation at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: e to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: execute to MethodInvocation at 1", "INS Block to TryStatement at 0", "INS Block to TryStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: execute to MethodInvocation at 1", "INS NumberLiteral: 5 to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleType: Exception to MethodDeclaration at 4", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: fail to MethodInvocation at 0", "INS SimpleName: getInt to MethodInvocation at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS ExpressionStatement to Block at 4", "INS ExpressionStatement to Block at 5", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS CatchClause to TryStatement at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS SimpleType: ResultSet to VariableDeclarationStatement at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: NEXT_VAL_SQL to MethodInvocation at 2", "INS CatchClause to TryStatement at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS VariableDeclarationStatement to Block at 6", "INS NumberLiteral: 7 to MethodInvocation at 2", "INS SimpleName: NEXT_VAL_SQL to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MAX_VALUE to MethodInvocation at 0", "INS NumberLiteral: 9 to MethodInvocation at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: Test to MarkerAnnotation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS TryStatement to Block at 9", "INS MethodInvocation to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: rs to VariableDeclarationFragment at 0", "INS SimpleName: ResultSet to SimpleType: ResultSet at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: prepareStatement to MethodInvocation at 1", "INS QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MAX_VALUE to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 1 INCREMENT BY 2 MINVALUE 1 MAXVALUE 10 CACHE 2\" to MethodInvocation at 2", "INS SimpleName: fail to MethodInvocation at 0", "INS SimpleName: testMultipleSequenceValuesNoCycle to MethodDeclaration at 3", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS InfixExpression: == to MethodInvocation at 1", "INS NumberLiteral: 3 to MethodInvocation at 2", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS InfixExpression: == to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 58", "operations": ["INS NumberLiteral: 7 to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS NumberLiteral: 1 to MethodInvocation at 1", "INS NumberLiteral: 5 to MethodInvocation at 2", "INS ExpressionStatement to Block at 2", "INS SimpleType: Exception to MethodDeclaration at 4", "INS NumberLiteral: 5 to MethodInvocation at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS NumberLiteral: 7 to MethodInvocation at 2", "INS NumberLiteral: 3 to MethodInvocation at 2", "INS SimpleName: Test to MarkerAnnotation at 0", "INS ExpressionStatement to Block at 8", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \"CREATE SEQUENCE foo.bar2\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: assertSequenceValuesMultipleSeq to MethodInvocation at 0", "INS ExpressionStatement to Block at 10", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS NumberLiteral: 3 to MethodInvocation at 2", "INS NumberLiteral: 1 to MethodInvocation at 1", "INS SimpleName: assertSequenceValuesMultipleSeq to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS ExpressionStatement to Block at 6", "INS MethodInvocation to MethodInvocation at 0", "INS NumberLiteral: 5 to MethodInvocation at 1", "INS SimpleName: assertSequenceValuesMultipleSeq to MethodInvocation at 0", "INS SimpleName: assertSequenceValuesMultipleSeq to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 58", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertSequenceValuesMultipleSeq to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS NumberLiteral: 9 to MethodInvocation at 2", "INS SimpleName: assertSequenceValuesMultipleSeq to MethodInvocation at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 3", "INS ExpressionStatement to Block at 7", "INS NumberLiteral: 7 to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertSequenceValuesMultipleSeq to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: createStatement to MethodInvocation at 1", "INS ExpressionStatement to Block at 4", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS NumberLiteral: 9 to MethodInvocation at 1", "INS ExpressionStatement to Block at 9", "INS SimpleName: testMultipleSequenceValuesCycle to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 1 INCREMENT BY 2 MINVALUE 1 MAXVALUE 10 CYCLE CACHE 2\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 5", "INS NumberLiteral: 3 to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 59", "operations": ["INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: getLong to MethodInvocation at 1", "INS ExpressionStatement to Block at 29", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: prepareStatement to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 59", "INS StringLiteral: \"agg_id\" to MethodInvocation at 2", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: getString to MethodInvocation at 1", "INS StringLiteral: \"user2\" to MethodInvocation at 2", "INS StringLiteral: \"metric_val\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: ResultSet to SimpleType: ResultSet at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: insertEvent to MethodInvocation at 0", "INS NumberLiteral: 3 to MethodInvocation at 1", "INS SimpleName: stmt to VariableDeclarationFragment at 0", "INS SimpleName: getString to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: insertEvent to MethodInvocation at 0", "INS SimpleName: getLong to MethodInvocation at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS StringLiteral: \"SELECT metric_id, agg_id, metric_val FROM METRICS\" to MethodInvocation at 2", "INS NumberLiteral: 1 to MethodInvocation at 3", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS NumberLiteral: 2 to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: PreparedStatement to VariableDeclarationStatement at 0", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleName: commit to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS StringLiteral: \"metric_id\" to MethodInvocation at 2", "INS NumberLiteral: 3 to MethodInvocation at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS NumberLiteral: 1 to MethodInvocation at 3", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS StringLiteral: \"metric_val\" to MethodInvocation at 2", "INS StringLiteral: \"metric_id\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 15", "INS SimpleName: next to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: PreparedStatement to SimpleType: PreparedStatement at 0", "INS StringLiteral: \"CREATE TABLE METRICS (metric_id char(15) NOT NULL PRIMARY KEY, agg_id char(15), metric_val INTEGER )\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS SimpleName: insertEvent to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS ExpressionStatement to Block at 7", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 18", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NumberLiteral: 1 to MethodInvocation at 3", "INS ExpressionStatement to Block at 22", "INS ExpressionStatement to Block at 11", "INS ExpressionStatement to Block at 9", "INS StringLiteral: \"METRIC_00002\" to MethodInvocation at 1", "INS SimpleName: getLong to MethodInvocation at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS ExpressionStatement to Block at 8", "INS MethodInvocation to MethodInvocation at 2", "INS ExpressionStatement to Block at 6", "INS ExpressionStatement to Block at 27", "INS ExpressionStatement to Block at 14", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: insertEvent to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS ExpressionStatement to Block at 20", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 2 to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 17", "INS SimpleName: insertEvent to MethodInvocation at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 12", "INS StringLiteral: \"user2\" to MethodInvocation at 2", "INS NumberLiteral: 1 to MethodInvocation at 3", "INS SimpleName: rs to MethodInvocation at 0", "INS ExpressionStatement to Block at 4", "INS ExpressionStatement to Block at 3", "INS ExpressionStatement to Block at 16", "INS SimpleName: testUpsertSelectGroupByWithSequence to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS StringLiteral: \"user3\" to MethodInvocation at 1", "INS StringLiteral: \"user2\" to MethodInvocation at 2", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: next to MethodInvocation at 1", "INS ExpressionStatement to Block at 24", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: rs to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: Test to MarkerAnnotation at 0", "INS NumberLiteral: 5 to MethodInvocation at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS ExpressionStatement to Block at 19", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: insertEvent to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS ExpressionStatement to Block at 13", "INS NumberLiteral: 1 to MethodInvocation at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 23", "INS StringLiteral: \"user3\" to MethodInvocation at 2", "INS SimpleName: rs to MethodInvocation at 0", "INS StringLiteral: \"user1\" to MethodInvocation at 2", "INS SimpleName: next to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 5", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: stmt to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 10", "INS StringLiteral: \"CREATE SEQUENCE foo.bar\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 30", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS NumberLiteral: 6 to MethodInvocation at 1", "INS SimpleType: Exception to MethodDeclaration at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertFalse to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 28", "INS SimpleName: next to MethodInvocation at 1", "INS NumberLiteral: 1 to MethodInvocation at 3", "INS StringLiteral: \"UPSERT INTO METRICS SELECT 'METRIC_'||(LPAD(ENCODE(NEXT VALUE FOR foo.bar,'base62'),5,'0')), user_id, sum(val) FROM events GROUP BY user_id ORDER BY user_id\" to MethodInvocation at 2", "INS NumberLiteral: 1 to MethodInvocation at 1", "INS SimpleName: commit to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS StringLiteral: \"metric_id\" to MethodInvocation at 2", "INS StringLiteral: \"metric_val\" to MethodInvocation at 2", "INS NumberLiteral: 1 to MethodInvocation at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS StringLiteral: \"METRIC_00001\" to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS SimpleName: nextConnection to MethodInvocation at 0", "INS StringLiteral: \"CREATE TABLE EVENTS (event_id BIGINT NOT NULL PRIMARY KEY, user_id char(15), val BIGINT )\" to MethodInvocation at 2", "INS StringLiteral: \"user1\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: ResultSet to VariableDeclarationStatement at 0", "INS StringLiteral: \"METRIC_00003\" to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 4 to MethodInvocation at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS ExpressionStatement to Block at 26", "INS SimpleName: execute to MethodInvocation at 1", "INS ExpressionStatement to Block at 31", "INS SimpleName: rs to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 60", "operations": ["INS SimpleName: val to SingleVariableDeclaration at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: stmt to MethodInvocation at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: SQLException to MethodDeclaration at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: setLong to MethodInvocation at 1", "INS StringLiteral: \"UPSERT INTO events VALUES(?,?,?)\" to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: insertEvent to MethodDeclaration at 2", "INS ExpressionStatement to Block at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: PreparedStatement to SimpleType: PreparedStatement at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodDeclaration to TypeDeclaration: class at 60", "INS ExpressionStatement to Block at 1", "INS SimpleName: setString to MethodInvocation at 1", "INS SimpleName: id to SingleVariableDeclaration at 1", "INS SimpleName: id to MethodInvocation at 3", "INS ExpressionStatement to Block at 2", "INS SimpleName: userId to MethodInvocation at 3", "INS SimpleName: val to MethodInvocation at 3", "INS SimpleName: stmt to VariableDeclarationFragment at 0", "INS NumberLiteral: 3 to MethodInvocation at 2", "INS SimpleName: execute to MethodInvocation at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: prepareStatement to MethodInvocation at 1", "INS SimpleName: stmt to MethodInvocation at 0", "INS SimpleName: stmt to MethodInvocation at 0", "INS SimpleName: setLong to MethodInvocation at 1", "INS SimpleName: stmt to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: PreparedStatement to VariableDeclarationStatement at 0", "INS SimpleName: userId to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 7", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 61", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: prepareStatement to MethodInvocation at 1", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 3", "INS ExpressionStatement to Block at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS TextElement:  expected sequence values (one per ResultSet) to TagElement: @param at 1", "INS SimpleName: PreparedStatement to SimpleType: PreparedStatement at 0", "INS SimpleName: stmt to MethodInvocation at 0", "INS SimpleName: ResultSet to SimpleType: ResultSet at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS EnhancedForStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: next to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: next to MethodInvocation at 1", "INS SimpleName: seqVal to MethodInvocation at 1", "INS SimpleName: close to MethodInvocation at 1", "INS SimpleType: ResultSet to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: seqVals to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: rs to VariableDeclarationFragment at 0", "INS SimpleName: assertSequenceValuesForSingleRow to MethodDeclaration at 3", "INS Block to MethodDeclaration at 6", "INS SimpleName: stmt to MethodInvocation at 0", "INS SimpleName: NEXT_VAL_SQL to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Modifier: private to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS TagElement to Javadoc at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 61", "INS SimpleType: SQLException to MethodDeclaration at 5", "INS SimpleName: seqVals to TagElement: @param at 0", "INS TextElement: Helper to verify the sequence values returned in multiple ResultSets each containing one row to TagElement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: close to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: assertFalse to MethodInvocation at 0", "INS SimpleType: PreparedStatement to VariableDeclarationStatement at 0", "INS TagElement: @param to Javadoc at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: seqVal to SingleVariableDeclaration at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: stmt to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: seqVals to EnhancedForStatement at 1", "INS SimpleName: getLong to MethodInvocation at 1", "INS ExpressionStatement to Block at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 62", "operations": ["INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: close to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: assertSequenceValuesMultipleSeq to MethodDeclaration at 3", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS SimpleName: assertFalse to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 62", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: next to MethodInvocation at 1", "INS TextElement: Helper to verify the sequence values returned in a single ResultSet containing multiple row to TagElement at 0", "INS SimpleName: seqVal to MethodInvocation at 1", "INS SimpleName: stmt to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SimpleName: stmt to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: stmt to VariableDeclarationFragment at 0", "INS SimpleName: prepareStatement to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to EnhancedForStatement at 2", "INS SimpleName: rs to MethodInvocation at 0", "INS ExpressionStatement to Block at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleType: ResultSet to VariableDeclarationStatement at 0", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleType: PreparedStatement to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: seqVal to SingleVariableDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS TagElement to Javadoc at 0", "INS EnhancedForStatement to Block at 2", "INS SimpleName: getLong to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: PreparedStatement to SimpleType: PreparedStatement at 0", "INS ExpressionStatement to Block at 4", "INS SimpleName: ResultSet to SimpleType: ResultSet at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: NEXT_VAL_SQL to MethodInvocation at 2", "INS SimpleName: seqVals to TagElement: @param at 0", "INS SimpleName: rs to VariableDeclarationFragment at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: next to MethodInvocation at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: seqVals to EnhancedForStatement at 1", "INS Javadoc to MethodDeclaration at 0", "INS Modifier: private to MethodDeclaration at 1", "INS SimpleName: close to MethodInvocation at 1", "INS Block to MethodDeclaration at 6", "INS SimpleName: seqVals to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 3", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SimpleType: SQLException to MethodDeclaration at 5", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS TextElement:  expected sequence values (from one ResultSet) to TagElement: @param at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 63", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 0 to InfixExpression: != at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS NumberLiteral: 0 to InfixExpression: != at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: expectedExceptions to MethodInvocation at 2", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: expectedExceptions to MethodInvocation at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: Lists to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Block to IfStatement at 1", "INS SimpleName: missingExceptions to MethodInvocation at 0", "INS SimpleName: missingExceptions to MethodInvocation at 0", "INS SimpleName: fail to MethodInvocation at 0", "INS ParameterizedType: List<String> to SingleVariableDeclaration at 0", "INS SimpleName: List to SimpleType: List at 0", "INS ParameterizedType: List<String> to VariableDeclarationStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS InfixExpression: && to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: unexpectedExceptions to InfixExpression: + at 1", "INS InfixExpression: + to MethodInvocation at 1", "INS DoStatement to Block at 2", "INS SimpleName: newArrayList to MethodInvocation at 1", "INS SimpleType: List to ParameterizedType: List<String> at 0", "INS StringLiteral: \"Actual exceptions does not match expected exceptions. Unexpected exceptions : \" to InfixExpression: + at 0", "INS SimpleType: String to ParameterizedType: List<String> at 1", "INS SimpleType: String to ParameterizedType: List<String> at 1", "INS VariableDeclarationStatement to Block at 0", "INS StringLiteral: \" missing exceptions : \" to InfixExpression: + at 2", "INS SimpleName: size to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 63", "INS SimpleName: List to SimpleType: List at 0", "INS ParenthesizedExpression to InfixExpression: != at 0", "INS SimpleName: getNextException to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS InfixExpression: != to InfixExpression: && at 1", "INS IfStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getMessage to MethodInvocation at 1", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS SimpleName: unexpectedExceptions to MethodInvocation at 0", "INS SimpleName: Lists to MethodInvocation at 0", "INS SimpleName: getMessage to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: String to SimpleType: String at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: unexpectedExceptions to VariableDeclarationFragment at 0", "INS SimpleName: sqlE to MethodInvocation at 0", "INS SimpleType: List to ParameterizedType: List<String> at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: sqlE to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: remove to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: != to DoStatement at 1", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: size to MethodInvocation at 1", "INS Block to DoStatement at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS SimpleName: newArrayList to MethodInvocation at 1", "INS SimpleName: sqlE to MethodInvocation at 0", "INS SimpleName: expectedExceptions to SingleVariableDeclaration at 1", "INS SimpleName: contains to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: String to SimpleType: String at 0", "INS Assignment: = to ParenthesizedExpression at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: sqlE to MethodInvocation at 0", "INS SimpleName: getMessage to MethodInvocation at 1", "INS IfStatement to Block at 0", "INS ParameterizedType: List<String> to VariableDeclarationStatement at 0", "INS SimpleName: sqlE to Assignment: = at 0", "INS SimpleName: sqlE to MethodInvocation at 0", "INS SimpleName: missingExceptions to InfixExpression: + at 3", "INS SimpleName: missingExceptions to VariableDeclarationFragment at 0", "INS SimpleName: unexpectedExceptions to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: List to ParameterizedType: List<String> at 0", "INS SimpleName: verifyExceptions to MethodDeclaration at 2", "INS SimpleType: String to ParameterizedType: List<String> at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: Exception to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV PrimitiveType: void to MethodDeclaration at 2", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: Exception to MethodDeclaration at 4", "MOV SimpleName: testSequenceCreation to MethodDeclaration at 3", "MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "UPDATE from testSelectNextValueFor to testSequenceCreation", "operations": ["UPD SimpleName: testSelectNextValueFor from testSelectNextValueFor to testSequenceCreation"]}, {"root": "UPDATE from testSequenceCreation to testMultipleSequencesNoCycle", "operations": ["UPD SimpleName: testSequenceCreation from testSequenceCreation to testMultipleSequencesNoCycle"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 7", "MOV ExpressionStatement to Block at 9", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 15", "MOV ExpressionStatement to Block at 15", "MOV ExpressionStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 5", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 6", "MOV ExpressionStatement to Block at 9"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 23", "MOV ExpressionStatement to Block at 27", "MOV VariableDeclarationStatement to Block at 5", "MOV ExpressionStatement to Block at 19", "MOV ExpressionStatement to Block at 25", "MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 21", "MOV ExpressionStatement to Block at 28", "MOV ExpressionStatement to Block at 24", "MOV ExpressionStatement to Block at 25", "MOV ExpressionStatement to Block at 26", "MOV ExpressionStatement to Block at 20", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 18", "MOV ExpressionStatement to Block at 17", "MOV ExpressionStatement to Block at 21", "MOV ExpressionStatement to Block at 21", "MOV ExpressionStatement to Block at 22", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 18"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: execute to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS StringLiteral: \"CREATE SEQUENCE alpha.gamma START WITH 2 INCREMENT BY 3 MINVALUE 0 MAXVALUE 10 CYCLE CACHE 5\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getLong to MethodInvocation at 1", "INS ExpressionStatement to Block at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 2 to MethodInvocation at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS StringLiteral: \"start_with\" to MethodInvocation at 2", "INS SimpleName: rs to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS NullLiteral to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getBytes to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS StringLiteral: \"current_value\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 6"]}, {"root": "INS ExpressionStatement to Block at 13", "operations": ["INS SimpleName: assertEquals to MethodInvocation at 0", "INS NumberLiteral: 0 to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS ExpressionStatement to Block at 13", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getLong to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"min_value\" to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 14", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: getLong to MethodInvocation at 1", "INS StringLiteral: \"max_value\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 14", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS NumberLiteral: 10 to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 15", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS StringLiteral: \"cycle_flag\" to MethodInvocation at 2", "INS BooleanLiteral: true to MethodInvocation at 1", "INS ExpressionStatement to Block at 15", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: getBoolean to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertEquals to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 16", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS StringLiteral: \"ALPHA\" to MethodInvocation at 1", "INS ExpressionStatement to Block at 16", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"sequence_schema\" to MethodInvocation at 2", "INS SimpleName: assertEquals to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 17", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS StringLiteral: \"GAMMA\" to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS StringLiteral: \"sequence_name\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 17"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 20"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS StringLiteral: \"00003\" to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS SimpleName: getString to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS ExpressionStatement to Block at 6", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: ResultSet to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleType: ResultSet to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: ResultSet to SimpleType: ResultSet at 0", "INS SimpleType: ResultSet to VariableDeclarationStatement at 0"]}, {"root": "INS NullLiteral to MethodInvocation at 1", "operations": ["INS NullLiteral to MethodInvocation at 1"]}, {"root": "INS NullLiteral to MethodInvocation at 1", "operations": ["INS NullLiteral to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS SimpleName: rs to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: rs to VariableDeclarationFragment at 0"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS StringLiteral: \"SELECT start_with, current_value, increment_by, cache_size, min_value, max_value, cycle_flag, sequence_schema, sequence_name FROM SYSTEM.\\\"SEQUENCE\\\"\" to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS StringLiteral: \"increment_by\" to MethodInvocation at 2", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: getLong to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: getLong to MethodInvocation at 1", "INS StringLiteral: \"cache_size\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from \"CREATE SEQUENCE alpha.gamma START WITH 2 INCREMENT BY 3 CACHE 5\" to \"CREATE SEQUENCE alpha.kappa START WITH 9 INCREMENT BY -2 MINVALUE 5\"", "operations": ["UPD StringLiteral: \"CREATE SEQUENCE alpha.gamma START WITH 2 INCREMENT BY 3 CACHE 5\" from \"CREATE SEQUENCE alpha.gamma START WITH 2 INCREMENT BY 3 CACHE 5\" to \"CREATE SEQUENCE alpha.kappa START WITH 9 INCREMENT BY -2 MINVALUE 5\""]}, {"root": "UPDATE from 3 to 4", "operations": ["UPD NumberLiteral: 3 from 3 to 4", "UPD NumberLiteral: 7 from 7 to 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "INS InfixExpression: + to MethodInvocation at 1", "operations": ["INS NumberLiteral: 7 to InfixExpression: * at 0", "INS NumberLiteral: 4 to InfixExpression: + at 0", "INS InfixExpression: + to MethodInvocation at 1", "INS InfixExpression: * to InfixExpression: + at 1", "INS NumberLiteral: 2 to InfixExpression: * at 1"]}, {"root": "INS InfixExpression: - to MethodInvocation at 1", "operations": ["INS NumberLiteral: 9 to InfixExpression: - at 0", "INS NumberLiteral: 2 to InfixExpression: * at 1", "INS InfixExpression: - to MethodInvocation at 1", "INS NumberLiteral: 2 to InfixExpression: * at 0", "INS InfixExpression: * to InfixExpression: - at 1"]}, {"root": "UPDATE from 5 to 9", "operations": ["UPD NumberLiteral: 5 from 5 to 9"]}, {"root": "UPDATE from conn1 to conn2", "operations": ["UPD SimpleName: conn1 from conn1 to conn2"]}, {"root": "INS NullLiteral to MethodInvocation at 1", "operations": ["INS NullLiteral to MethodInvocation at 1"]}, {"root": "UPDATE from \"SELECT COALESCE(NEXT VALUE FOR foo.bar,1) FROM SYSTEM.\\\"SEQUENCE\\\"\" to \"SELECT LPAD(ENCODE(NEXT VALUE FOR foo.bar,'base62'),5,'0') FROM SYSTEM.\\\"SEQUENCE\\\"\"", "operations": ["UPD StringLiteral: \"SELECT COALESCE(NEXT VALUE FOR foo.bar,1) FROM SYSTEM.\\\"SEQUENCE\\\"\" from \"SELECT COALESCE(NEXT VALUE FOR foo.bar,1) FROM SYSTEM.\\\"SEQUENCE\\\"\" to \"SELECT LPAD(ENCODE(NEXT VALUE FOR foo.bar,'base62'),5,'0') FROM SYSTEM.\\\"SEQUENCE\\\"\""]}, {"root": "UPDATE from \"ALPHA\" to \"user1\"", "operations": ["UPD StringLiteral: \"ALPHA\" from \"ALPHA\" to \"user1\""]}, {"root": "UPDATE from \"GAMMA\" to \"user2\"", "operations": ["UPD StringLiteral: \"GAMMA\" from \"GAMMA\" to \"user2\""]}, {"root": "UPDATE from getInt to getBytes", "operations": ["UPD SimpleName: getInt from getInt to getBytes", "UPD SimpleName: getLong from getLong to getBytes", "UPD SimpleName: getInt from getInt to getBytes"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS InfixExpression: == to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: getNextException to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: assertTrue to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: prepareStatement to MethodInvocation at 1", "INS SimpleName: query to MethodInvocation at 2", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from getLong to getInt", "operations": ["UPD SimpleName: getLong from getLong to getInt", "UPD SimpleName: getLong from getLong to getInt", "UPD SimpleName: getLong from getLong to getInt"]}, {"root": "UPDATE from 3 to 2", "operations": ["UPD NumberLiteral: 3 from 3 to 2"]}, {"root": "INS StringLiteral: \"agg_id\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"agg_id\" to MethodInvocation at 2"]}, {"root": "INS StringLiteral: \"agg_id\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"agg_id\" to MethodInvocation at 2"]}, {"root": "DEL NumberLiteral: 2", "operations": ["DEL NumberLiteral: 2"]}, {"root": "DEL NumberLiteral: 2", "operations": ["DEL NumberLiteral: 2"]}, {"root": "DEL SimpleName: query", "operations": ["DEL SimpleName: query"]}, {"root": "DEL StringLiteral: \"SELECT NEXT VALUE FOR foo.bar FROM SYSTEM.\\\"SEQUENCE\\\"\"", "operations": ["DEL StringLiteral: \"SELECT NEXT VALUE FOR foo.bar FROM SYSTEM.\\\"SEQUENCE\\\"\""]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL Block"]}, {"root": "DEL StringLiteral: \"SELECT start_with, increment_by, cache_size, sequence_schema, sequence_name FROM SYSTEM.\\\"SEQUENCE\\\"\"", "operations": ["DEL StringLiteral: \"SELECT start_with, increment_by, cache_size, sequence_schema, sequence_name FROM SYSTEM.\\\"SEQUENCE\\\"\""]}, {"root": "DEL NumberLiteral: 2", "operations": ["DEL NumberLiteral: 2"]}, {"root": "DEL NumberLiteral: 3", "operations": ["DEL NumberLiteral: 3"]}, {"root": "DEL NumberLiteral: 1", "operations": ["DEL NumberLiteral: 1"]}, {"root": "DEL NumberLiteral: 4", "operations": ["DEL NumberLiteral: 4"]}, {"root": "DEL NumberLiteral: 5", "operations": ["DEL NumberLiteral: 5"]}]}}, {"SequenceIT_diff": {"operations": ["Insert ImportDeclaration(21) into CompilationUnit(5130) at 10", "Insert ImportDeclaration(43) into CompilationUnit(5130) at 21", "Insert ImportDeclaration(55) into CompilationUnit(5130) at 27", "Move MethodDeclaration(659) into TypeDeclaration: class(5129) at 15", "Insert QualifiedName: java.util.List(20) into ImportDeclaration(21) at 0", "Insert QualifiedName: org.apache.phoenix.util.SequenceUtil(42) into ImportDeclaration(43) at 0", "Insert QualifiedName: com.google.common.collect.Lists(54) into ImportDeclaration(55) at 0", "Insert FieldDeclaration(75) into TypeDeclaration: class(5129) at 4", "Insert MethodDeclaration(611) into TypeDeclaration: class(5129) at 14", "Insert MethodDeclaration(1354) into TypeDeclaration: class(5129) at 19", "Insert MethodDeclaration(1526) into TypeDeclaration: class(5129) at 20", "Insert MethodDeclaration(3370) into TypeDeclaration: class(5129) at 35", "Insert MethodDeclaration(3452) into TypeDeclaration: class(5129) at 36", "Insert MethodDeclaration(3499) into TypeDeclaration: class(5129) at 37", "Insert MethodDeclaration(3546) into TypeDeclaration: class(5129) at 38", "Insert MethodDeclaration(3593) into TypeDeclaration: class(5129) at 39", "Insert MethodDeclaration(3640) into TypeDeclaration: class(5129) at 40", "Insert MethodDeclaration(3687) into TypeDeclaration: class(5129) at 41", "Insert MethodDeclaration(3715) into TypeDeclaration: class(5129) at 42", "Insert MethodDeclaration(3743) into TypeDeclaration: class(5129) at 43", "Insert MethodDeclaration(3812) into TypeDeclaration: class(5129) at 44", "Insert MethodDeclaration(3881) into TypeDeclaration: class(5129) at 45", "Insert MethodDeclaration(3915) into TypeDeclaration: class(5129) at 46", "Insert MethodDeclaration(3949) into TypeDeclaration: class(5129) at 47", "Insert MethodDeclaration(4020) into TypeDeclaration: class(5129) at 48", "Insert MethodDeclaration(4090) into TypeDeclaration: class(5129) at 49", "Insert MethodDeclaration(4160) into TypeDeclaration: class(5129) at 50", "Insert MethodDeclaration(4230) into TypeDeclaration: class(5129) at 51", "Insert MethodDeclaration(4299) into TypeDeclaration: class(5129) at 52", "Insert MethodDeclaration(4334) into TypeDeclaration: class(5129) at 53", "Insert MethodDeclaration(4406) into TypeDeclaration: class(5129) at 54", "Insert MethodDeclaration(4441) into TypeDeclaration: class(5129) at 55", "Insert MethodDeclaration(4580) into TypeDeclaration: class(5129) at 56", "Insert MethodDeclaration(4644) into TypeDeclaration: class(5129) at 57", "Insert MethodDeclaration(4853) into TypeDeclaration: class(5129) at 58", "Insert MethodDeclaration(4901) into TypeDeclaration: class(5129) at 59", "Insert MethodDeclaration(4968) into TypeDeclaration: class(5129) at 60", "Insert MethodDeclaration(5035) into TypeDeclaration: class(5129) at 61", "Insert MethodDeclaration(5128) into TypeDeclaration: class(5129) at 62", "Insert Modifier: private(67) into FieldDeclaration(75) at 0", "Insert Modifier: static(68) into FieldDeclaration(75) at 1", "Insert Modifier: final(69) into FieldDeclaration(75) at 2", "Insert SimpleType: String(71) into FieldDeclaration(75) at 3", "Insert VariableDeclarationFragment(74) into FieldDeclaration(75) at 4", "Move MarkerAnnotation(562) into MethodDeclaration(611) at 0", "Insert Modifier: public(586) into MethodDeclaration(611) at 1", "Insert PrimitiveType: void(587) into MethodDeclaration(611) at 2", "Insert SimpleName: testSelectNextValueFor(588) into MethodDeclaration(611) at 3", "Move SimpleType: Exception(567) into MethodDeclaration(611) at 4", "Insert Block(610) into MethodDeclaration(611) at 5", "Move MarkerAnnotation(756) into MethodDeclaration(897) at 0", "Update SimpleName: testSelectNextValueFor(565) to testSequenceCreation", "Move SimpleType: Exception(761) into MethodDeclaration(897) at 4", "Insert MarkerAnnotation(1156) into MethodDeclaration(1354) at 0", "Move Modifier: public(757) into MethodDeclaration(1354) at 1", "Move PrimitiveType: void(758) into MethodDeclaration(1354) at 2", "Update SimpleName: testSequenceCreation(759) to testMultipleSequencesNoCycle", "Move SimpleName: testSequenceCreation(759) into MethodDeclaration(1354) at 3", "Insert SimpleType: Exception(1161) into MethodDeclaration(1354) at 4", "Insert Block(1353) into MethodDeclaration(1354) at 5", "Insert MarkerAnnotation(1356) into MethodDeclaration(1526) at 0", "Insert Modifier: public(1357) into MethodDeclaration(1526) at 1", "Insert PrimitiveType: void(1358) into MethodDeclaration(1526) at 2", "Insert SimpleName: testMultipleSequencesCycle(1359) into MethodDeclaration(1526) at 3", "Insert SimpleType: Exception(1361) into MethodDeclaration(1526) at 4", "Insert Block(1525) into MethodDeclaration(1526) at 5", "Insert MarkerAnnotation(3203) into MethodDeclaration(3370) at 0", "Insert Modifier: public(3204) into MethodDeclaration(3370) at 1", "Insert PrimitiveType: void(3205) into MethodDeclaration(3370) at 2", "Insert SimpleName: testSequenceDefault(3206) into MethodDeclaration(3370) at 3", "Insert SimpleType: Exception(3208) into MethodDeclaration(3370) at 4", "Insert Block(3369) into MethodDeclaration(3370) at 5", "Insert MarkerAnnotation(3372) into MethodDeclaration(3452) at 0", "Insert Modifier: public(3373) into MethodDeclaration(3452) at 1", "Insert PrimitiveType: void(3374) into MethodDeclaration(3452) at 2", "Insert SimpleName: testSequenceValidateStartValue(3375) into MethodDeclaration(3452) at 3", "Insert SimpleType: Exception(3377) into MethodDeclaration(3452) at 4", "Insert Block(3451) into MethodDeclaration(3452) at 5", "Insert MarkerAnnotation(3454) into MethodDeclaration(3499) at 0", "Insert Modifier: public(3455) into MethodDeclaration(3499) at 1", "Insert PrimitiveType: void(3456) into MethodDeclaration(3499) at 2", "Insert SimpleName: testSequenceValidateMinValue(3457) into MethodDeclaration(3499) at 3", "Insert SimpleType: Exception(3459) into MethodDeclaration(3499) at 4", "Insert Block(3498) into MethodDeclaration(3499) at 5", "Insert MarkerAnnotation(3501) into MethodDeclaration(3546) at 0", "Insert Modifier: public(3502) into MethodDeclaration(3546) at 1", "Insert PrimitiveType: void(3503) into MethodDeclaration(3546) at 2", "Insert SimpleName: testSequenceValidateMaxValue(3504) into MethodDeclaration(3546) at 3", "Insert SimpleType: Exception(3506) into MethodDeclaration(3546) at 4", "Insert Block(3545) into MethodDeclaration(3546) at 5", "Insert MarkerAnnotation(3548) into MethodDeclaration(3593) at 0", "Insert Modifier: public(3549) into MethodDeclaration(3593) at 1", "Insert PrimitiveType: void(3550) into MethodDeclaration(3593) at 2", "Insert SimpleName: testSequenceValidateMinValueLessThanOrEqualToMaxValue(3551) into MethodDeclaration(3593) at 3", "Insert SimpleType: Exception(3553) into MethodDeclaration(3593) at 4", "Insert Block(3592) into MethodDeclaration(3593) at 5", "Insert MarkerAnnotation(3595) into MethodDeclaration(3640) at 0", "Insert Modifier: public(3596) into MethodDeclaration(3640) at 1", "Insert PrimitiveType: void(3597) into MethodDeclaration(3640) at 2", "Insert SimpleName: testSequenceValidateIncrementConstant(3598) into MethodDeclaration(3640) at 3", "Insert SimpleType: Exception(3600) into MethodDeclaration(3640) at 4", "Insert Block(3639) into MethodDeclaration(3640) at 5", "Insert MarkerAnnotation(3642) into MethodDeclaration(3687) at 0", "Insert Modifier: public(3643) into MethodDeclaration(3687) at 1", "Insert PrimitiveType: void(3644) into MethodDeclaration(3687) at 2", "Insert SimpleName: testSequenceValidateIncrementNotEqualToZero(3645) into MethodDeclaration(3687) at 3", "Insert SimpleType: Exception(3647) into MethodDeclaration(3687) at 4", "Insert Block(3686) into MethodDeclaration(3687) at 5", "Insert MarkerAnnotation(3689) into MethodDeclaration(3715) at 0", "Insert Modifier: public(3690) into MethodDeclaration(3715) at 1", "Insert PrimitiveType: void(3691) into MethodDeclaration(3715) at 2", "Insert SimpleName: testSequenceStartWithMinMaxSameValueIncreasingCycle(3692) into MethodDeclaration(3715) at 3", "Insert SimpleType: Exception(3694) into MethodDeclaration(3715) at 4", "Insert Block(3714) into MethodDeclaration(3715) at 5", "Insert MarkerAnnotation(3717) into MethodDeclaration(3743) at 0", "Insert Modifier: public(3718) into MethodDeclaration(3743) at 1", "Insert PrimitiveType: void(3719) into MethodDeclaration(3743) at 2", "Insert SimpleName: testSequenceStartWithMinMaxSameValueDecreasingCycle(3720) into MethodDeclaration(3743) at 3", "Insert SimpleType: Exception(3722) into MethodDeclaration(3743) at 4", "Insert Block(3742) into MethodDeclaration(3743) at 5", "Insert MarkerAnnotation(3745) into MethodDeclaration(3812) at 0", "Insert Modifier: public(3746) into MethodDeclaration(3812) at 1", "Insert PrimitiveType: void(3747) into MethodDeclaration(3812) at 2", "Insert SimpleName: testSequenceStartWithMinMaxSameValueIncreasingNoCycle(3748) into MethodDeclaration(3812) at 3", "Insert SimpleType: Exception(3750) into MethodDeclaration(3812) at 4", "Insert Block(3811) into MethodDeclaration(3812) at 5", "Insert MarkerAnnotation(3814) into MethodDeclaration(3881) at 0", "Insert Modifier: public(3815) into MethodDeclaration(3881) at 1", "Insert PrimitiveType: void(3816) into MethodDeclaration(3881) at 2", "Insert SimpleName: testSequenceStartWithMinMaxSameValueDecreasingNoCycle(3817) into MethodDeclaration(3881) at 3", "Insert SimpleType: Exception(3819) into MethodDeclaration(3881) at 4", "Insert Block(3880) into MethodDeclaration(3881) at 5", "Insert MarkerAnnotation(3883) into MethodDeclaration(3915) at 0", "Insert Modifier: public(3884) into MethodDeclaration(3915) at 1", "Insert PrimitiveType: void(3885) into MethodDeclaration(3915) at 2", "Insert SimpleName: testSequenceIncreasingCycle(3886) into MethodDeclaration(3915) at 3", "Insert SimpleType: Exception(3888) into MethodDeclaration(3915) at 4", "Insert Block(3914) into MethodDeclaration(3915) at 5", "Insert MarkerAnnotation(3917) into MethodDeclaration(3949) at 0", "Insert Modifier: public(3918) into MethodDeclaration(3949) at 1", "Insert PrimitiveType: void(3919) into MethodDeclaration(3949) at 2", "Insert SimpleName: testSequenceDecreasingCycle(3920) into MethodDeclaration(3949) at 3", "Insert SimpleType: Exception(3922) into MethodDeclaration(3949) at 4", "Insert Block(3948) into MethodDeclaration(3949) at 5", "Insert MarkerAnnotation(3951) into MethodDeclaration(4020) at 0", "Insert Modifier: public(3952) into MethodDeclaration(4020) at 1", "Insert PrimitiveType: void(3953) into MethodDeclaration(4020) at 2", "Insert SimpleName: testSequenceIncreasingNoCycle(3954) into MethodDeclaration(4020) at 3", "Insert SimpleType: Exception(3956) into MethodDeclaration(4020) at 4", "Insert Block(4019) into MethodDeclaration(4020) at 5", "Insert MarkerAnnotation(4022) into MethodDeclaration(4090) at 0", "Insert Modifier: public(4023) into MethodDeclaration(4090) at 1", "Insert PrimitiveType: void(4024) into MethodDeclaration(4090) at 2", "Insert SimpleName: testSequenceIncreasingUsingMaxValueNoCycle(4025) into MethodDeclaration(4090) at 3", "Insert SimpleType: Exception(4027) into MethodDeclaration(4090) at 4", "Insert Block(4089) into MethodDeclaration(4090) at 5", "Insert MarkerAnnotation(4092) into MethodDeclaration(4160) at 0", "Insert Modifier: public(4093) into MethodDeclaration(4160) at 1", "Insert PrimitiveType: void(4094) into MethodDeclaration(4160) at 2", "Insert SimpleName: testSequenceDecreasingNoCycle(4095) into MethodDeclaration(4160) at 3", "Insert SimpleType: Exception(4097) into MethodDeclaration(4160) at 4", "Insert Block(4159) into MethodDeclaration(4160) at 5", "Insert MarkerAnnotation(4162) into MethodDeclaration(4230) at 0", "Insert Modifier: public(4163) into MethodDeclaration(4230) at 1", "Insert PrimitiveType: void(4164) into MethodDeclaration(4230) at 2", "Insert SimpleName: testSequenceDecreasingUsingMinValueNoCycle(4165) into MethodDeclaration(4230) at 3", "Insert SimpleType: Exception(4167) into MethodDeclaration(4230) at 4", "Insert Block(4229) into MethodDeclaration(4230) at 5", "Insert MarkerAnnotation(4232) into MethodDeclaration(4299) at 0", "Insert Modifier: public(4233) into MethodDeclaration(4299) at 1", "Insert PrimitiveType: void(4234) into MethodDeclaration(4299) at 2", "Insert SimpleName: testSequenceIncreasingOverflowNoCycle(4235) into MethodDeclaration(4299) at 3", "Insert SimpleType: Exception(4237) into MethodDeclaration(4299) at 4", "Insert Block(4298) into MethodDeclaration(4299) at 5", "Insert MarkerAnnotation(4301) into MethodDeclaration(4334) at 0", "Insert Modifier: public(4302) into MethodDeclaration(4334) at 1", "Insert PrimitiveType: void(4303) into MethodDeclaration(4334) at 2", "Insert SimpleName: testSequenceIncreasingOverflowCycle(4304) into MethodDeclaration(4334) at 3", "Insert SimpleType: Exception(4306) into MethodDeclaration(4334) at 4", "Insert Block(4333) into MethodDeclaration(4334) at 5", "Insert MarkerAnnotation(4336) into MethodDeclaration(4406) at 0", "Insert Modifier: public(4337) into MethodDeclaration(4406) at 1", "Insert PrimitiveType: void(4338) into MethodDeclaration(4406) at 2", "Insert SimpleName: testSequenceDecreasingOverflowNoCycle(4339) into MethodDeclaration(4406) at 3", "Insert SimpleType: Exception(4341) into MethodDeclaration(4406) at 4", "Insert Block(4405) into MethodDeclaration(4406) at 5", "Insert MarkerAnnotation(4408) into MethodDeclaration(4441) at 0", "Insert Modifier: public(4409) into MethodDeclaration(4441) at 1", "Insert PrimitiveType: void(4410) into MethodDeclaration(4441) at 2", "Insert SimpleName: testSequenceDecreasingOverflowCycle(4411) into MethodDeclaration(4441) at 3", "Insert SimpleType: Exception(4413) into MethodDeclaration(4441) at 4", "Insert Block(4440) into MethodDeclaration(4441) at 5", "Insert MarkerAnnotation(4443) into MethodDeclaration(4580) at 0", "Insert Modifier: public(4444) into MethodDeclaration(4580) at 1", "Insert PrimitiveType: void(4445) into MethodDeclaration(4580) at 2", "Insert SimpleName: testMultipleSequenceValuesNoCycle(4446) into MethodDeclaration(4580) at 3", "Insert SimpleType: Exception(4448) into MethodDeclaration(4580) at 4", "Insert Block(4579) into MethodDeclaration(4580) at 5", "Insert MarkerAnnotation(4582) into MethodDeclaration(4644) at 0", "Insert Modifier: public(4583) into MethodDeclaration(4644) at 1", "Insert PrimitiveType: void(4584) into MethodDeclaration(4644) at 2", "Insert SimpleName: testMultipleSequenceValuesCycle(4585) into MethodDeclaration(4644) at 3", "Insert SimpleType: Exception(4587) into MethodDeclaration(4644) at 4", "Insert Block(4643) into MethodDeclaration(4644) at 5", "Insert MarkerAnnotation(4646) into MethodDeclaration(4853) at 0", "Insert Modifier: public(4647) into MethodDeclaration(4853) at 1", "Insert PrimitiveType: void(4648) into MethodDeclaration(4853) at 2", "Insert SimpleName: testUpsertSelectGroupByWithSequence(4649) into MethodDeclaration(4853) at 3", "Insert SimpleType: Exception(4651) into MethodDeclaration(4853) at 4", "Insert Block(4852) into MethodDeclaration(4853) at 5", "Insert Modifier: private(4854) into MethodDeclaration(4901) at 0", "Insert PrimitiveType: void(4855) into MethodDeclaration(4901) at 1", "Insert SimpleName: insertEvent(4856) into MethodDeclaration(4901) at 2", "Insert SingleVariableDeclaration(4859) into MethodDeclaration(4901) at 3", "Insert SingleVariableDeclaration(4863) into MethodDeclaration(4901) at 4", "Insert SingleVariableDeclaration(4866) into MethodDeclaration(4901) at 5", "Insert SimpleType: SQLException(4868) into MethodDeclaration(4901) at 6", "Insert Block(4900) into MethodDeclaration(4901) at 7", "Insert Javadoc(4907) into MethodDeclaration(4968) at 0", "Insert Modifier: private(4908) into MethodDeclaration(4968) at 1", "Insert PrimitiveType: void(4909) into MethodDeclaration(4968) at 2", "Insert SimpleName: assertSequenceValuesForSingleRow(4910) into MethodDeclaration(4968) at 3", "Insert SingleVariableDeclaration(4913) into MethodDeclaration(4968) at 4", "Insert SimpleType: SQLException(4915) into MethodDeclaration(4968) at 5", "Insert Block(4967) into MethodDeclaration(4968) at 6", "Insert Javadoc(4974) into MethodDeclaration(5035) at 0", "Insert Modifier: private(4975) into MethodDeclaration(5035) at 1", "Insert PrimitiveType: void(4976) into MethodDeclaration(5035) at 2", "Insert SimpleName: assertSequenceValuesMultipleSeq(4977) into MethodDeclaration(5035) at 3", "Insert SingleVariableDeclaration(4980) into MethodDeclaration(5035) at 4", "Insert SimpleType: SQLException(4982) into MethodDeclaration(5035) at 5", "Insert Block(5034) into MethodDeclaration(5035) at 6", "Insert Modifier: private(5036) into MethodDeclaration(5128) at 0", "Insert PrimitiveType: void(5037) into MethodDeclaration(5128) at 1", "Insert SimpleName: verifyExceptions(5038) into MethodDeclaration(5128) at 2", "Insert SingleVariableDeclaration(5042) into MethodDeclaration(5128) at 3", "Insert SingleVariableDeclaration(5049) into MethodDeclaration(5128) at 4", "Insert Block(5127) into MethodDeclaration(5128) at 5", "Insert SimpleName: String(70) into SimpleType: String(71) at 0", "Insert SimpleName: NEXT_VAL_SQL(72) into VariableDeclarationFragment(74) at 0", "Insert StringLiteral: \"SELECT NEXT VALUE FOR foo.bar FROM SYSTEM.\\\"SEQUENCE\\\"\"(73) into VariableDeclarationFragment(74) at 1", "Move ExpressionStatement(570) into Block(610) at 0", "Move ExpressionStatement(577) into Block(610) at 1", "Move ExpressionStatement(580) into Block(610) at 2", "Insert ExpressionStatement(609) into Block(610) at 3", "Move ExpressionStatement(764) into Block(896) at 0", "Insert ExpressionStatement(723) into Block(896) at 1", "Move ExpressionStatement(774) into Block(896) at 2", "Move ExpressionStatement(791) into Block(896) at 4", "Insert ExpressionStatement(751) into Block(896) at 5", "Insert ExpressionStatement(759) into Block(896) at 6", "Insert ExpressionStatement(783) into Block(896) at 9", "Insert ExpressionStatement(791) into Block(896) at 10", "Insert ExpressionStatement(799) into Block(896) at 11", "Insert ExpressionStatement(807) into Block(896) at 12", "Insert ExpressionStatement(815) into Block(896) at 13", "Move ExpressionStatement(874) into Block(896) at 18", "Move ExpressionStatement(846) into Block(896) at 19", "Move ExpressionStatement(889) into Block(896) at 20", "Move ExpressionStatement(860) into Block(896) at 21", "Move ExpressionStatement(868) into Block(896) at 22", "Move ExpressionStatement(911) into Block(896) at 23", "Move ExpressionStatement(883) into Block(896) at 24", "Move ExpressionStatement(852) into Block(896) at 25", "Move ExpressionStatement(897) into Block(896) at 26", "Move ExpressionStatement(905) into Block(896) at 27", "Move ExpressionStatement(837) into Block(896) at 28", "Insert SimpleName: Test(1155) into MarkerAnnotation(1156) at 0", "Insert SimpleName: Exception(1160) into SimpleType: Exception(1161) at 0", "Insert ExpressionStatement(1164) into Block(1353) at 0", "Insert ExpressionStatement(1171) into Block(1353) at 1", "Move ExpressionStatement(771) into Block(1353) at 2", "Insert ExpressionStatement(1181) into Block(1353) at 3", "Insert VariableDeclarationStatement(1187) into Block(1353) at 4", "Move VariableDeclarationStatement(785) into Block(1353) at 5", "Insert ExpressionStatement(1204) into Block(1353) at 6", "Move ExpressionStatement(657) into Block(1353) at 7", "Insert ExpressionStatement(1220) into Block(1353) at 8", "Move ExpressionStatement(649) into Block(1353) at 9", "Insert ExpressionStatement(1236) into Block(1353) at 10", "Insert ExpressionStatement(1246) into Block(1353) at 11", "Insert ExpressionStatement(1252) into Block(1353) at 12", "Insert ExpressionStatement(1256) into Block(1353) at 13", "Insert ExpressionStatement(1259) into Block(1353) at 14", "Move ExpressionStatement(620) into Block(1353) at 15", "Insert ExpressionStatement(1274) into Block(1353) at 16", "Insert ExpressionStatement(1286) into Block(1353) at 17", "Insert ExpressionStatement(1298) into Block(1353) at 18", "Insert TryStatement(1348) into Block(1353) at 19", "Insert ExpressionStatement(1352) into Block(1353) at 20", "Insert SimpleName: Test(1355) into MarkerAnnotation(1356) at 0", "Insert SimpleName: Exception(1360) into SimpleType: Exception(1361) at 0", "Insert ExpressionStatement(1364) into Block(1525) at 0", "Insert ExpressionStatement(1371) into Block(1525) at 1", "Insert ExpressionStatement(1378) into Block(1525) at 2", "Insert ExpressionStatement(1381) into Block(1525) at 3", "Insert VariableDeclarationStatement(1387) into Block(1525) at 4", "Move VariableDeclarationStatement(597) into Block(1525) at 5", "Move ExpressionStatement(603) into Block(1525) at 6", "Insert ExpressionStatement(1412) into Block(1525) at 7", "Insert ExpressionStatement(1420) into Block(1525) at 8", "Move ExpressionStatement(626) into Block(1525) at 9", "Insert ExpressionStatement(1436) into Block(1525) at 10", "Insert ExpressionStatement(1446) into Block(1525) at 11", "Insert ExpressionStatement(1452) into Block(1525) at 12", "Insert ExpressionStatement(1456) into Block(1525) at 13", "Insert ExpressionStatement(1459) into Block(1525) at 14", "Move ExpressionStatement(643) into Block(1525) at 15", "Insert ExpressionStatement(1474) into Block(1525) at 16", "Move ExpressionStatement(799) into Block(1525) at 17", "Move ExpressionStatement(807) into Block(1525) at 18", "Insert ExpressionStatement(1504) into Block(1525) at 19", "Move ExpressionStatement(2742) into Block(1525) at 20", "Move ExpressionStatement(815) into Block(1525) at 21", "Insert ExpressionStatement(1524) into Block(1525) at 22", "Insert ExpressionStatement(3098) into Block(3099) at 6", "Insert SimpleName: Test(3202) into MarkerAnnotation(3203) at 0", "Insert SimpleName: Exception(3207) into SimpleType: Exception(3208) at 0", "Insert ExpressionStatement(3211) into Block(3369) at 0", "Insert ExpressionStatement(3218) into Block(3369) at 1", "Insert ExpressionStatement(3221) into Block(3369) at 2", "Insert ExpressionStatement(3227) into Block(3369) at 3", "Insert ExpressionStatement(3234) into Block(3369) at 4", "Insert ExpressionStatement(3237) into Block(3369) at 5", "Insert ExpressionStatement(3244) into Block(3369) at 6", "Insert ExpressionStatement(3247) into Block(3369) at 7", "Insert ExpressionStatement(3254) into Block(3369) at 8", "Insert ExpressionStatement(3261) into Block(3369) at 9", "Insert ExpressionStatement(3264) into Block(3369) at 10", "Insert ExpressionStatement(3271) into Block(3369) at 11", "Insert ExpressionStatement(3274) into Block(3369) at 12", "Insert ExpressionStatement(3280) into Block(3369) at 13", "Insert ExpressionStatement(3287) into Block(3369) at 14", "Insert ExpressionStatement(3290) into Block(3369) at 15", "Insert ExpressionStatement(3297) into Block(3369) at 16", "Insert ExpressionStatement(3300) into Block(3369) at 17", "Insert ExpressionStatement(3310) into Block(3369) at 18", "Insert ExpressionStatement(3317) into Block(3369) at 19", "Insert ExpressionStatement(3320) into Block(3369) at 20", "Insert ExpressionStatement(3327) into Block(3369) at 21", "Insert ExpressionStatement(3330) into Block(3369) at 22", "Insert ExpressionStatement(3340) into Block(3369) at 23", "Insert ExpressionStatement(3347) into Block(3369) at 24", "Insert ExpressionStatement(3350) into Block(3369) at 25", "Insert ExpressionStatement(3357) into Block(3369) at 26", "Insert ExpressionStatement(3360) into Block(3369) at 27", "Insert ExpressionStatement(3368) into Block(3369) at 28", "Insert SimpleName: Test(3371) into MarkerAnnotation(3372) at 0", "Insert SimpleName: Exception(3376) into SimpleType: Exception(3377) at 0", "Insert ExpressionStatement(3380) into Block(3451) at 0", "Insert TryStatement(3415) into Block(3451) at 1", "Insert TryStatement(3450) into Block(3451) at 2", "Insert SimpleName: Test(3453) into MarkerAnnotation(3454) at 0", "Insert SimpleName: Exception(3458) into SimpleType: Exception(3459) at 0", "Insert ExpressionStatement(3462) into Block(3498) at 0", "Insert TryStatement(3497) into Block(3498) at 1", "Insert SimpleName: Test(3500) into MarkerAnnotation(3501) at 0", "Insert SimpleName: Exception(3505) into SimpleType: Exception(3506) at 0", "Insert ExpressionStatement(3509) into Block(3545) at 0", "Insert TryStatement(3544) into Block(3545) at 1", "Insert SimpleName: Test(3547) into MarkerAnnotation(3548) at 0", "Insert SimpleName: Exception(3552) into SimpleType: Exception(3553) at 0", "Insert ExpressionStatement(3556) into Block(3592) at 0", "Insert TryStatement(3591) into Block(3592) at 1", "Insert SimpleName: Test(3594) into MarkerAnnotation(3595) at 0", "Insert SimpleName: Exception(3599) into SimpleType: Exception(3600) at 0", "Insert ExpressionStatement(3603) into Block(3639) at 0", "Insert TryStatement(3638) into Block(3639) at 1", "Insert SimpleName: Test(3641) into MarkerAnnotation(3642) at 0", "Insert SimpleName: Exception(3646) into SimpleType: Exception(3647) at 0", "Insert ExpressionStatement(3650) into Block(3686) at 0", "Insert TryStatement(3685) into Block(3686) at 1", "Insert SimpleName: Test(3688) into MarkerAnnotation(3689) at 0", "Insert SimpleName: Exception(3693) into SimpleType: Exception(3694) at 0", "Insert ExpressionStatement(3697) into Block(3714) at 0", "Insert ExpressionStatement(3704) into Block(3714) at 1", "Insert ExpressionStatement(3707) into Block(3714) at 2", "Insert ExpressionStatement(3713) into Block(3714) at 3", "Insert SimpleName: Test(3716) into MarkerAnnotation(3717) at 0", "Insert SimpleName: Exception(3721) into SimpleType: Exception(3722) at 0", "Insert ExpressionStatement(3725) into Block(3742) at 0", "Insert ExpressionStatement(3732) into Block(3742) at 1", "Insert ExpressionStatement(3735) into Block(3742) at 2", "Insert ExpressionStatement(3741) into Block(3742) at 3", "Insert SimpleName: Test(3744) into MarkerAnnotation(3745) at 0", "Insert SimpleName: Exception(3749) into SimpleType: Exception(3750) at 0", "Insert ExpressionStatement(3753) into Block(3811) at 0", "Insert ExpressionStatement(3760) into Block(3811) at 1", "Insert ExpressionStatement(3763) into Block(3811) at 2", "Insert ExpressionStatement(3767) into Block(3811) at 3", "Insert TryStatement(3810) into Block(3811) at 4", "Insert SimpleName: Test(3813) into MarkerAnnotation(3814) at 0", "Insert SimpleName: Exception(3818) into SimpleType: Exception(3819) at 0", "Insert ExpressionStatement(3822) into Block(3880) at 0", "Insert ExpressionStatement(3829) into Block(3880) at 1", "Insert ExpressionStatement(3832) into Block(3880) at 2", "Insert ExpressionStatement(3836) into Block(3880) at 3", "Insert TryStatement(3879) into Block(3880) at 4", "Insert SimpleName: Test(3882) into MarkerAnnotation(3883) at 0", "Insert SimpleName: Exception(3887) into SimpleType: Exception(3888) at 0", "Insert ExpressionStatement(3891) into Block(3914) at 0", "Insert ExpressionStatement(3898) into Block(3914) at 1", "Insert ExpressionStatement(3901) into Block(3914) at 2", "Insert ExpressionStatement(3913) into Block(3914) at 3", "Insert SimpleName: Test(3916) into MarkerAnnotation(3917) at 0", "Insert SimpleName: Exception(3921) into SimpleType: Exception(3922) at 0", "Insert ExpressionStatement(3925) into Block(3948) at 0", "Insert ExpressionStatement(3932) into Block(3948) at 1", "Insert ExpressionStatement(3935) into Block(3948) at 2", "Insert ExpressionStatement(3947) into Block(3948) at 3", "Insert SimpleName: Test(3950) into MarkerAnnotation(3951) at 0", "Insert SimpleName: Exception(3955) into SimpleType: Exception(3956) at 0", "Insert ExpressionStatement(3959) into Block(4019) at 0", "Insert ExpressionStatement(3966) into Block(4019) at 1", "Insert ExpressionStatement(3969) into Block(4019) at 2", "Insert ExpressionStatement(3975) into Block(4019) at 3", "Insert TryStatement(4018) into Block(4019) at 4", "Insert SimpleName: Test(4021) into MarkerAnnotation(4022) at 0", "Insert SimpleName: Exception(4026) into SimpleType: Exception(4027) at 0", "Insert ExpressionStatement(4030) into Block(4089) at 0", "Insert ExpressionStatement(4037) into Block(4089) at 1", "Insert ExpressionStatement(4040) into Block(4089) at 2", "Insert ExpressionStatement(4045) into Block(4089) at 3", "Insert TryStatement(4088) into Block(4089) at 4", "Insert SimpleName: Test(4091) into MarkerAnnotation(4092) at 0", "Insert SimpleName: Exception(4096) into SimpleType: Exception(4097) at 0", "Insert ExpressionStatement(4100) into Block(4159) at 0", "Insert ExpressionStatement(4107) into Block(4159) at 1", "Insert ExpressionStatement(4110) into Block(4159) at 2", "Insert ExpressionStatement(4115) into Block(4159) at 3", "Insert TryStatement(4158) into Block(4159) at 4", "Insert SimpleName: Test(4161) into MarkerAnnotation(4162) at 0", "Insert SimpleName: Exception(4166) into SimpleType: Exception(4167) at 0", "Insert ExpressionStatement(4170) into Block(4229) at 0", "Insert ExpressionStatement(4177) into Block(4229) at 1", "Insert ExpressionStatement(4180) into Block(4229) at 2", "Insert ExpressionStatement(4185) into Block(4229) at 3", "Insert TryStatement(4228) into Block(4229) at 4", "Insert SimpleName: Test(4231) into MarkerAnnotation(4232) at 0", "Insert SimpleName: Exception(4236) into SimpleType: Exception(4237) at 0", "Insert ExpressionStatement(4240) into Block(4298) at 0", "Insert ExpressionStatement(4247) into Block(4298) at 1", "Insert ExpressionStatement(4250) into Block(4298) at 2", "Insert ExpressionStatement(4254) into Block(4298) at 3", "Insert TryStatement(4297) into Block(4298) at 4", "Insert SimpleName: Test(4300) into MarkerAnnotation(4301) at 0", "Insert SimpleName: Exception(4305) into SimpleType: Exception(4306) at 0", "Insert ExpressionStatement(4309) into Block(4333) at 0", "Insert ExpressionStatement(4316) into Block(4333) at 1", "Insert ExpressionStatement(4319) into Block(4333) at 2", "Insert ExpressionStatement(4332) into Block(4333) at 3", "Insert SimpleName: Test(4335) into MarkerAnnotation(4336) at 0", "Insert SimpleName: Exception(4340) into SimpleType: Exception(4341) at 0", "Insert ExpressionStatement(4344) into Block(4405) at 0", "Insert ExpressionStatement(4351) into Block(4405) at 1", "Insert ExpressionStatement(4354) into Block(4405) at 2", "Insert ExpressionStatement(4361) into Block(4405) at 3", "Insert TryStatement(4404) into Block(4405) at 4", "Insert SimpleName: Test(4407) into MarkerAnnotation(4408) at 0", "Insert SimpleName: Exception(4412) into SimpleType: Exception(4413) at 0", "Insert ExpressionStatement(4416) into Block(4440) at 0", "Insert ExpressionStatement(4423) into Block(4440) at 1", "Insert ExpressionStatement(4426) into Block(4440) at 2", "Insert ExpressionStatement(4439) into Block(4440) at 3", "Insert SimpleName: Test(4442) into MarkerAnnotation(4443) at 0", "Insert SimpleName: Exception(4447) into SimpleType: Exception(4448) at 0", "Insert ExpressionStatement(4451) into Block(4579) at 0", "Insert ExpressionStatement(4458) into Block(4579) at 1", "Insert ExpressionStatement(4465) into Block(4579) at 2", "Insert ExpressionStatement(4468) into Block(4579) at 3", "Insert ExpressionStatement(4473) into Block(4579) at 4", "Insert ExpressionStatement(4478) into Block(4579) at 5", "Insert VariableDeclarationStatement(4489) into Block(4579) at 6", "Insert ExpressionStatement(4495) into Block(4579) at 7", "Insert ExpressionStatement(4503) into Block(4579) at 8", "Insert TryStatement(4537) into Block(4579) at 9", "Insert TryStatement(4578) into Block(4579) at 10", "Insert SimpleName: Test(4581) into MarkerAnnotation(4582) at 0", "Insert SimpleName: Exception(4586) into SimpleType: Exception(4587) at 0", "Insert ExpressionStatement(4590) into Block(4643) at 0", "Insert ExpressionStatement(4597) into Block(4643) at 1", "Insert ExpressionStatement(4604) into Block(4643) at 2", "Insert ExpressionStatement(4607) into Block(4643) at 3", "Insert ExpressionStatement(4612) into Block(4643) at 4", "Insert ExpressionStatement(4617) into Block(4643) at 5", "Insert ExpressionStatement(4622) into Block(4643) at 6", "Insert ExpressionStatement(4627) into Block(4643) at 7", "Insert ExpressionStatement(4632) into Block(4643) at 8", "Insert ExpressionStatement(4637) into Block(4643) at 9", "Insert ExpressionStatement(4642) into Block(4643) at 10", "Insert SimpleName: Test(4645) into MarkerAnnotation(4646) at 0", "Insert SimpleName: Exception(4650) into SimpleType: Exception(4651) at 0", "Insert ExpressionStatement(4654) into Block(4852) at 0", "Insert ExpressionStatement(4661) into Block(4852) at 1", "Insert ExpressionStatement(4664) into Block(4852) at 2", "Insert ExpressionStatement(4671) into Block(4852) at 3", "Insert ExpressionStatement(4678) into Block(4852) at 4", "Insert ExpressionStatement(4681) into Block(4852) at 5", "Insert ExpressionStatement(4687) into Block(4852) at 6", "Insert ExpressionStatement(4693) into Block(4852) at 7", "Insert ExpressionStatement(4699) into Block(4852) at 8", "Insert ExpressionStatement(4705) into Block(4852) at 9", "Insert ExpressionStatement(4711) into Block(4852) at 10", "Insert ExpressionStatement(4717) into Block(4852) at 11", "Insert ExpressionStatement(4721) into Block(4852) at 12", "Insert ExpressionStatement(4724) into Block(4852) at 13", "Insert ExpressionStatement(4731) into Block(4852) at 14", "Insert ExpressionStatement(4735) into Block(4852) at 15", "Insert ExpressionStatement(4738) into Block(4852) at 16", "Insert VariableDeclarationStatement(4747) into Block(4852) at 17", "Insert VariableDeclarationStatement(4755) into Block(4852) at 18", "Insert ExpressionStatement(4761) into Block(4852) at 19", "Insert ExpressionStatement(4769) into Block(4852) at 20", "Move ExpressionStatement(823) into Block(4852) at 21", "Insert ExpressionStatement(4785) into Block(4852) at 22", "Insert ExpressionStatement(4791) into Block(4852) at 23", "Insert ExpressionStatement(4799) into Block(4852) at 24", "Move ExpressionStatement(831) into Block(4852) at 25", "Insert ExpressionStatement(4815) into Block(4852) at 26", "Insert ExpressionStatement(4821) into Block(4852) at 27", "Insert ExpressionStatement(4829) into Block(4852) at 28", "Insert ExpressionStatement(4837) into Block(4852) at 29", "Insert ExpressionStatement(4845) into Block(4852) at 30", "Insert ExpressionStatement(4851) into Block(4852) at 31", "Insert PrimitiveType: long(4857) into SingleVariableDeclaration(4859) at 0", "Insert SimpleName: id(4858) into SingleVariableDeclaration(4859) at 1", "Insert SimpleType: String(4861) into SingleVariableDeclaration(4863) at 0", "Insert SimpleName: userId(4862) into SingleVariableDeclaration(4863) at 1", "Insert PrimitiveType: long(4864) into SingleVariableDeclaration(4866) at 0", "Insert SimpleName: val(4865) into SingleVariableDeclaration(4866) at 1", "Insert SimpleName: SQLException(4867) into SimpleType: SQLException(4868) at 0", "Insert VariableDeclarationStatement(4877) into Block(4900) at 0", "Insert ExpressionStatement(4883) into Block(4900) at 1", "Insert ExpressionStatement(4889) into Block(4900) at 2", "Insert ExpressionStatement(4895) into Block(4900) at 3", "Insert ExpressionStatement(4899) into Block(4900) at 4", "Insert TagElement(4903) into Javadoc(4907) at 0", "Insert TagElement: @param(4906) into Javadoc(4907) at 1", "Insert PrimitiveType: long(4911) into SingleVariableDeclaration(4913) at 0", "Insert SimpleName: seqVals(4912) into SingleVariableDeclaration(4913) at 1", "Insert SimpleName: SQLException(4914) into SimpleType: SQLException(4915) at 0", "Insert VariableDeclarationStatement(4924) into Block(4967) at 0", "Insert EnhancedForStatement(4962) into Block(4967) at 1", "Insert ExpressionStatement(4966) into Block(4967) at 2", "Insert TagElement(4970) into Javadoc(4974) at 0", "Insert TagElement: @param(4973) into Javadoc(4974) at 1", "Insert PrimitiveType: long(4978) into SingleVariableDeclaration(4980) at 0", "Insert SimpleName: seqVals(4979) into SingleVariableDeclaration(4980) at 1", "Insert SimpleName: SQLException(4981) into SimpleType: SQLException(4982) at 0", "Insert VariableDeclarationStatement(4991) into Block(5034) at 0", "Insert VariableDeclarationStatement(4999) into Block(5034) at 1", "Insert EnhancedForStatement(5019) into Block(5034) at 2", "Insert ExpressionStatement(5025) into Block(5034) at 3", "Insert ExpressionStatement(5029) into Block(5034) at 4", "Insert ExpressionStatement(5033) into Block(5034) at 5", "Insert SimpleType: SQLException(5040) into SingleVariableDeclaration(5042) at 0", "Insert SimpleName: sqlE(5041) into SingleVariableDeclaration(5042) at 1", "Insert ParameterizedType: List<String>(5047) into SingleVariableDeclaration(5049) at 0", "Insert SimpleName: expectedExceptions(5048) into SingleVariableDeclaration(5049) at 1", "Insert VariableDeclarationStatement(5061) into Block(5127) at 0", "Insert VariableDeclarationStatement(5072) into Block(5127) at 1", "Insert DoStatement(5105) into Block(5127) at 2", "Insert IfStatement(5126) into Block(5127) at 3", "Insert MethodInvocation(608) into ExpressionStatement(609) at 0", "Insert MethodInvocation(722) into ExpressionStatement(723) at 0", "Move SimpleType: ResultSet(776) into VariableDeclarationStatement(737) at 0", "Insert MethodInvocation(750) into ExpressionStatement(751) at 0", "Insert MethodInvocation(758) into ExpressionStatement(759) at 0", "Insert MethodInvocation(782) into ExpressionStatement(783) at 0", "Insert MethodInvocation(790) into ExpressionStatement(791) at 0", "Insert MethodInvocation(798) into ExpressionStatement(799) at 0", "Insert MethodInvocation(806) into ExpressionStatement(807) at 0", "Insert MethodInvocation(814) into ExpressionStatement(815) at 0", "Insert MethodInvocation(1163) into ExpressionStatement(1164) at 0", "Insert MethodInvocation(1170) into ExpressionStatement(1171) at 0", "Insert MethodInvocation(1180) into ExpressionStatement(1181) at 0", "Move SimpleType: String(582) into VariableDeclarationStatement(1187) at 0", "Insert VariableDeclarationFragment(1186) into VariableDeclarationStatement(1187) at 1", "Insert SimpleType: ResultSet(1189) into VariableDeclarationStatement(1198) at 0", "Insert MethodInvocation(1203) into ExpressionStatement(1204) at 0", "Insert MethodInvocation(1219) into ExpressionStatement(1220) at 0", "Insert MethodInvocation(1235) into ExpressionStatement(1236) at 0", "Insert MethodInvocation(1245) into ExpressionStatement(1246) at 0", "Insert MethodInvocation(1251) into ExpressionStatement(1252) at 0", "Insert MethodInvocation(1255) into ExpressionStatement(1256) at 0", "Insert MethodInvocation(1258) into ExpressionStatement(1259) at 0", "Insert MethodInvocation(1273) into ExpressionStatement(1274) at 0", "Insert MethodInvocation(1285) into ExpressionStatement(1286) at 0", "Insert MethodInvocation(1297) into ExpressionStatement(1298) at 0", "Insert Block(1306) into TryStatement(1348) at 0", "Insert CatchClause(1347) into TryStatement(1348) at 1", "Insert MethodInvocation(1351) into ExpressionStatement(1352) at 0", "Insert MethodInvocation(1363) into ExpressionStatement(1364) at 0", "Insert MethodInvocation(1370) into ExpressionStatement(1371) at 0", "Insert MethodInvocation(1377) into ExpressionStatement(1378) at 0", "Insert MethodInvocation(1380) into ExpressionStatement(1381) at 0", "Insert SimpleType: String(1383) into VariableDeclarationStatement(1387) at 0", "Insert VariableDeclarationFragment(1386) into VariableDeclarationStatement(1387) at 1", "Insert MethodInvocation(1411) into ExpressionStatement(1412) at 0", "Insert MethodInvocation(1419) into ExpressionStatement(1420) at 0", "Insert MethodInvocation(1435) into ExpressionStatement(1436) at 0", "Insert MethodInvocation(1445) into ExpressionStatement(1446) at 0", "Insert MethodInvocation(1451) into ExpressionStatement(1452) at 0", "Insert MethodInvocation(1455) into ExpressionStatement(1456) at 0", "Insert MethodInvocation(1458) into ExpressionStatement(1459) at 0", "Insert MethodInvocation(1473) into ExpressionStatement(1474) at 0", "Insert MethodInvocation(1503) into ExpressionStatement(1504) at 0", "Insert MethodInvocation(1523) into ExpressionStatement(1524) at 0", "Insert MethodInvocation(3097) into ExpressionStatement(3098) at 0", "Insert MethodInvocation(3210) into ExpressionStatement(3211) at 0", "Insert MethodInvocation(3217) into ExpressionStatement(3218) at 0", "Insert MethodInvocation(3220) into ExpressionStatement(3221) at 0", "Insert MethodInvocation(3226) into ExpressionStatement(3227) at 0", "Insert MethodInvocation(3233) into ExpressionStatement(3234) at 0", "Insert MethodInvocation(3236) into ExpressionStatement(3237) at 0", "Insert MethodInvocation(3243) into ExpressionStatement(3244) at 0", "Insert MethodInvocation(3246) into ExpressionStatement(3247) at 0", "Insert MethodInvocation(3253) into ExpressionStatement(3254) at 0", "Insert MethodInvocation(3260) into ExpressionStatement(3261) at 0", "Insert MethodInvocation(3263) into ExpressionStatement(3264) at 0", "Insert MethodInvocation(3270) into ExpressionStatement(3271) at 0", "Insert MethodInvocation(3273) into ExpressionStatement(3274) at 0", "Insert MethodInvocation(3279) into ExpressionStatement(3280) at 0", "Insert MethodInvocation(3286) into ExpressionStatement(3287) at 0", "Insert MethodInvocation(3289) into ExpressionStatement(3290) at 0", "Insert MethodInvocation(3296) into ExpressionStatement(3297) at 0", "Insert MethodInvocation(3299) into ExpressionStatement(3300) at 0", "Insert MethodInvocation(3309) into ExpressionStatement(3310) at 0", "Insert MethodInvocation(3316) into ExpressionStatement(3317) at 0", "Insert MethodInvocation(3319) into ExpressionStatement(3320) at 0", "Insert MethodInvocation(3326) into ExpressionStatement(3327) at 0", "Insert MethodInvocation(3329) into ExpressionStatement(3330) at 0", "Insert MethodInvocation(3339) into ExpressionStatement(3340) at 0", "Insert MethodInvocation(3346) into ExpressionStatement(3347) at 0", "Insert MethodInvocation(3349) into ExpressionStatement(3350) at 0", "Insert MethodInvocation(3356) into ExpressionStatement(3357) at 0", "Insert MethodInvocation(3359) into ExpressionStatement(3360) at 0", "Insert MethodInvocation(3367) into ExpressionStatement(3368) at 0", "Insert MethodInvocation(3379) into ExpressionStatement(3380) at 0", "Insert Block(3391) into TryStatement(3415) at 0", "Insert CatchClause(3414) into TryStatement(3415) at 1", "Insert Block(3426) into TryStatement(3450) at 0", "Insert CatchClause(3449) into TryStatement(3450) at 1", "Insert MethodInvocation(3461) into ExpressionStatement(3462) at 0", "Insert Block(3473) into TryStatement(3497) at 0", "Insert CatchClause(3496) into TryStatement(3497) at 1", "Insert MethodInvocation(3508) into ExpressionStatement(3509) at 0", "Insert Block(3520) into TryStatement(3544) at 0", "Insert CatchClause(3543) into TryStatement(3544) at 1", "Insert MethodInvocation(3555) into ExpressionStatement(3556) at 0", "Insert Block(3567) into TryStatement(3591) at 0", "Insert CatchClause(3590) into TryStatement(3591) at 1", "Insert MethodInvocation(3602) into ExpressionStatement(3603) at 0", "Insert Block(3614) into TryStatement(3638) at 0", "Insert CatchClause(3637) into TryStatement(3638) at 1", "Insert MethodInvocation(3649) into ExpressionStatement(3650) at 0", "Insert Block(3661) into TryStatement(3685) at 0", "Insert CatchClause(3684) into TryStatement(3685) at 1", "Insert MethodInvocation(3696) into ExpressionStatement(3697) at 0", "Insert MethodInvocation(3703) into ExpressionStatement(3704) at 0", "Insert MethodInvocation(3706) into ExpressionStatement(3707) at 0", "Insert MethodInvocation(3712) into ExpressionStatement(3713) at 0", "Insert MethodInvocation(3724) into ExpressionStatement(3725) at 0", "Insert MethodInvocation(3731) into ExpressionStatement(3732) at 0", "Insert MethodInvocation(3734) into ExpressionStatement(3735) at 0", "Insert MethodInvocation(3740) into ExpressionStatement(3741) at 0", "Insert MethodInvocation(3752) into ExpressionStatement(3753) at 0", "Insert MethodInvocation(3759) into ExpressionStatement(3760) at 0", "Insert MethodInvocation(3762) into ExpressionStatement(3763) at 0", "Insert MethodInvocation(3766) into ExpressionStatement(3767) at 0", "Insert Block(3786) into TryStatement(3810) at 0", "Insert CatchClause(3809) into TryStatement(3810) at 1", "Insert MethodInvocation(3821) into ExpressionStatement(3822) at 0", "Insert MethodInvocation(3828) into ExpressionStatement(3829) at 0", "Insert MethodInvocation(3831) into ExpressionStatement(3832) at 0", "Insert MethodInvocation(3835) into ExpressionStatement(3836) at 0", "Insert Block(3855) into TryStatement(3879) at 0", "Insert CatchClause(3878) into TryStatement(3879) at 1", "Insert MethodInvocation(3890) into ExpressionStatement(3891) at 0", "Insert MethodInvocation(3897) into ExpressionStatement(3898) at 0", "Insert MethodInvocation(3900) into ExpressionStatement(3901) at 0", "Insert MethodInvocation(3912) into ExpressionStatement(3913) at 0", "Insert MethodInvocation(3924) into ExpressionStatement(3925) at 0", "Insert MethodInvocation(3931) into ExpressionStatement(3932) at 0", "Insert MethodInvocation(3934) into ExpressionStatement(3935) at 0", "Insert MethodInvocation(3946) into ExpressionStatement(3947) at 0", "Insert MethodInvocation(3958) into ExpressionStatement(3959) at 0", "Insert MethodInvocation(3965) into ExpressionStatement(3966) at 0", "Insert MethodInvocation(3968) into ExpressionStatement(3969) at 0", "Insert MethodInvocation(3974) into ExpressionStatement(3975) at 0", "Insert Block(3994) into TryStatement(4018) at 0", "Insert CatchClause(4017) into TryStatement(4018) at 1", "Insert MethodInvocation(4029) into ExpressionStatement(4030) at 0", "Insert MethodInvocation(4036) into ExpressionStatement(4037) at 0", "Insert MethodInvocation(4039) into ExpressionStatement(4040) at 0", "Insert MethodInvocation(4044) into ExpressionStatement(4045) at 0", "Insert Block(4064) into TryStatement(4088) at 0", "Insert CatchClause(4087) into TryStatement(4088) at 1", "Insert MethodInvocation(4099) into ExpressionStatement(4100) at 0", "Insert MethodInvocation(4106) into ExpressionStatement(4107) at 0", "Insert MethodInvocation(4109) into ExpressionStatement(4110) at 0", "Insert MethodInvocation(4114) into ExpressionStatement(4115) at 0", "Insert Block(4134) into TryStatement(4158) at 0", "Insert CatchClause(4157) into TryStatement(4158) at 1", "Insert MethodInvocation(4169) into ExpressionStatement(4170) at 0", "Insert MethodInvocation(4176) into ExpressionStatement(4177) at 0", "Insert MethodInvocation(4179) into ExpressionStatement(4180) at 0", "Insert MethodInvocation(4184) into ExpressionStatement(4185) at 0", "Insert Block(4204) into TryStatement(4228) at 0", "Insert CatchClause(4227) into TryStatement(4228) at 1", "Insert MethodInvocation(4239) into ExpressionStatement(4240) at 0", "Insert MethodInvocation(4246) into ExpressionStatement(4247) at 0", "Insert MethodInvocation(4249) into ExpressionStatement(4250) at 0", "Insert MethodInvocation(4253) into ExpressionStatement(4254) at 0", "Insert Block(4273) into TryStatement(4297) at 0", "Insert CatchClause(4296) into TryStatement(4297) at 1", "Insert MethodInvocation(4308) into ExpressionStatement(4309) at 0", "Insert MethodInvocation(4315) into ExpressionStatement(4316) at 0", "Insert MethodInvocation(4318) into ExpressionStatement(4319) at 0", "Insert MethodInvocation(4331) into ExpressionStatement(4332) at 0", "Insert MethodInvocation(4343) into ExpressionStatement(4344) at 0", "Insert MethodInvocation(4350) into ExpressionStatement(4351) at 0", "Insert MethodInvocation(4353) into ExpressionStatement(4354) at 0", "Insert MethodInvocation(4360) into ExpressionStatement(4361) at 0", "Insert Block(4380) into TryStatement(4404) at 0", "Insert CatchClause(4403) into TryStatement(4404) at 1", "Insert MethodInvocation(4415) into ExpressionStatement(4416) at 0", "Insert MethodInvocation(4422) into ExpressionStatement(4423) at 0", "Insert MethodInvocation(4425) into ExpressionStatement(4426) at 0", "Insert MethodInvocation(4438) into ExpressionStatement(4439) at 0", "Insert MethodInvocation(4450) into ExpressionStatement(4451) at 0", "Insert MethodInvocation(4457) into ExpressionStatement(4458) at 0", "Insert MethodInvocation(4464) into ExpressionStatement(4465) at 0", "Insert MethodInvocation(4467) into ExpressionStatement(4468) at 0", "Insert MethodInvocation(4472) into ExpressionStatement(4473) at 0", "Insert MethodInvocation(4477) into ExpressionStatement(4478) at 0", "Insert SimpleType: ResultSet(4480) into VariableDeclarationStatement(4489) at 0", "Insert VariableDeclarationFragment(4488) into VariableDeclarationStatement(4489) at 1", "Insert MethodInvocation(4494) into ExpressionStatement(4495) at 0", "Insert MethodInvocation(4502) into ExpressionStatement(4503) at 0", "Insert Block(4513) into TryStatement(4537) at 0", "Insert CatchClause(4536) into TryStatement(4537) at 1", "Insert Block(4554) into TryStatement(4578) at 0", "Insert CatchClause(4577) into TryStatement(4578) at 1", "Insert MethodInvocation(4589) into ExpressionStatement(4590) at 0", "Insert MethodInvocation(4596) into ExpressionStatement(4597) at 0", "Insert MethodInvocation(4603) into ExpressionStatement(4604) at 0", "Insert MethodInvocation(4606) into ExpressionStatement(4607) at 0", "Insert MethodInvocation(4611) into ExpressionStatement(4612) at 0", "Insert MethodInvocation(4616) into ExpressionStatement(4617) at 0", "Insert MethodInvocation(4621) into ExpressionStatement(4622) at 0", "Insert MethodInvocation(4626) into ExpressionStatement(4627) at 0", "Insert MethodInvocation(4631) into ExpressionStatement(4632) at 0", "Insert MethodInvocation(4636) into ExpressionStatement(4637) at 0", "Insert MethodInvocation(4641) into ExpressionStatement(4642) at 0", "Insert MethodInvocation(4653) into ExpressionStatement(4654) at 0", "Insert MethodInvocation(4660) into ExpressionStatement(4661) at 0", "Insert MethodInvocation(4663) into ExpressionStatement(4664) at 0", "Insert MethodInvocation(4670) into ExpressionStatement(4671) at 0", "Insert MethodInvocation(4677) into ExpressionStatement(4678) at 0", "Insert MethodInvocation(4680) into ExpressionStatement(4681) at 0", "Insert MethodInvocation(4686) into ExpressionStatement(4687) at 0", "Insert MethodInvocation(4692) into ExpressionStatement(4693) at 0", "Insert MethodInvocation(4698) into ExpressionStatement(4699) at 0", "Insert MethodInvocation(4704) into ExpressionStatement(4705) at 0", "Insert MethodInvocation(4710) into ExpressionStatement(4711) at 0", "Insert MethodInvocation(4716) into ExpressionStatement(4717) at 0", "Insert MethodInvocation(4720) into ExpressionStatement(4721) at 0", "Insert MethodInvocation(4723) into ExpressionStatement(4724) at 0", "Insert MethodInvocation(4730) into ExpressionStatement(4731) at 0", "Insert MethodInvocation(4734) into ExpressionStatement(4735) at 0", "Insert MethodInvocation(4737) into ExpressionStatement(4738) at 0", "Insert SimpleType: PreparedStatement(4740) into VariableDeclarationStatement(4747) at 0", "Insert VariableDeclarationFragment(4746) into VariableDeclarationStatement(4747) at 1", "Insert SimpleType: ResultSet(4749) into VariableDeclarationStatement(4755) at 0", "Insert VariableDeclarationFragment(4754) into VariableDeclarationStatement(4755) at 1", "Insert MethodInvocation(4760) into ExpressionStatement(4761) at 0", "Insert MethodInvocation(4768) into ExpressionStatement(4769) at 0", "Insert MethodInvocation(4784) into ExpressionStatement(4785) at 0", "Insert MethodInvocation(4790) into ExpressionStatement(4791) at 0", "Insert MethodInvocation(4798) into ExpressionStatement(4799) at 0", "Insert MethodInvocation(4814) into ExpressionStatement(4815) at 0", "Insert MethodInvocation(4820) into ExpressionStatement(4821) at 0", "Insert MethodInvocation(4828) into ExpressionStatement(4829) at 0", "Insert MethodInvocation(4836) into ExpressionStatement(4837) at 0", "Insert MethodInvocation(4844) into ExpressionStatement(4845) at 0", "Insert MethodInvocation(4850) into ExpressionStatement(4851) at 0", "Insert SimpleName: String(4860) into SimpleType: String(4861) at 0", "Insert SimpleType: PreparedStatement(4870) into VariableDeclarationStatement(4877) at 0", "Insert VariableDeclarationFragment(4876) into VariableDeclarationStatement(4877) at 1", "Insert MethodInvocation(4882) into ExpressionStatement(4883) at 0", "Insert MethodInvocation(4888) into ExpressionStatement(4889) at 0", "Insert MethodInvocation(4894) into ExpressionStatement(4895) at 0", "Insert MethodInvocation(4898) into ExpressionStatement(4899) at 0", "Insert TextElement: Helper to verify the sequence values returned in multiple ResultSets each containing one row(4902) into TagElement(4903) at 0", "Insert SimpleName: seqVals(4904) into TagElement: @param(4906) at 0", "Insert TextElement:  expected sequence values (one per ResultSet)(4905) into TagElement: @param(4906) at 1", "Insert SimpleType: PreparedStatement(4917) into VariableDeclarationStatement(4924) at 0", "Insert VariableDeclarationFragment(4923) into VariableDeclarationStatement(4924) at 1", "Insert SingleVariableDeclaration(4927) into EnhancedForStatement(4962) at 0", "Insert SimpleName: seqVals(4928) into EnhancedForStatement(4962) at 1", "Insert Block(4961) into EnhancedForStatement(4962) at 2", "Insert MethodInvocation(4965) into ExpressionStatement(4966) at 0", "Insert TextElement: Helper to verify the sequence values returned in a single ResultSet containing multiple row(4969) into TagElement(4970) at 0", "Insert SimpleName: seqVals(4971) into TagElement: @param(4973) at 0", "Insert TextElement:  expected sequence values (from one ResultSet)(4972) into TagElement: @param(4973) at 1", "Insert SimpleType: PreparedStatement(4984) into VariableDeclarationStatement(4991) at 0", "Insert VariableDeclarationFragment(4990) into VariableDeclarationStatement(4991) at 1", "Insert SimpleType: ResultSet(4993) into VariableDeclarationStatement(4999) at 0", "Insert VariableDeclarationFragment(4998) into VariableDeclarationStatement(4999) at 1", "Insert SingleVariableDeclaration(5002) into EnhancedForStatement(5019) at 0", "Insert SimpleName: seqVals(5003) into EnhancedForStatement(5019) at 1", "Insert Block(5018) into EnhancedForStatement(5019) at 2", "Insert MethodInvocation(5024) into ExpressionStatement(5025) at 0", "Insert MethodInvocation(5028) into ExpressionStatement(5029) at 0", "Insert MethodInvocation(5032) into ExpressionStatement(5033) at 0", "Insert SimpleName: SQLException(5039) into SimpleType: SQLException(5040) at 0", "Insert SimpleType: List(5044) into ParameterizedType: List<String>(5047) at 0", "Insert SimpleType: String(5046) into ParameterizedType: List<String>(5047) at 1", "Insert ParameterizedType: List<String>(5054) into VariableDeclarationStatement(5061) at 0", "Insert VariableDeclarationFragment(5060) into VariableDeclarationStatement(5061) at 1", "Insert ParameterizedType: List<String>(5066) into VariableDeclarationStatement(5072) at 0", "Insert VariableDeclarationFragment(5071) into VariableDeclarationStatement(5072) at 1", "Insert Block(5096) into DoStatement(5105) at 0", "Insert InfixExpression: !=(5104) into DoStatement(5105) at 1", "Insert InfixExpression: &&(5116) into IfStatement(5126) at 0", "Insert Block(5125) into IfStatement(5126) at 1", "Insert NullLiteral(317) into MethodInvocation(322) at 1", "Insert NullLiteral(514) into MethodInvocation(519) at 1", "Insert SimpleName: assertSequenceValuesForSingleRow(604) into MethodInvocation(608) at 0", "Insert NumberLiteral: 3(605) into MethodInvocation(608) at 1", "Insert NumberLiteral: 5(606) into MethodInvocation(608) at 2", "Insert NumberLiteral: 7(607) into MethodInvocation(608) at 3", "Move MethodInvocation(780) into MethodInvocation(722) at 0", "Insert SimpleName: execute(720) into MethodInvocation(722) at 1", "Insert StringLiteral: \"CREATE SEQUENCE alpha.gamma START WITH 2 INCREMENT BY 3 MINVALUE 0 MAXVALUE 10 CYCLE CACHE 5\"(721) into MethodInvocation(722) at 2", "Insert SimpleName: rs(729) into VariableDeclarationFragment(736) at 0", "Insert MethodInvocation(735) into VariableDeclarationFragment(736) at 1", "Insert SimpleName: assertEquals(744) into MethodInvocation(750) at 0", "Insert NumberLiteral: 2(745) into MethodInvocation(750) at 1", "Insert MethodInvocation(749) into MethodInvocation(750) at 2", "Insert SimpleName: assertEquals(752) into MethodInvocation(758) at 0", "Insert NullLiteral(753) into MethodInvocation(758) at 1", "Insert MethodInvocation(757) into MethodInvocation(758) at 2", "Insert MethodInvocation(765) into MethodInvocation(766) at 2", "Insert MethodInvocation(773) into MethodInvocation(774) at 2", "Insert SimpleName: assertEquals(776) into MethodInvocation(782) at 0", "Insert NumberLiteral: 0(777) into MethodInvocation(782) at 1", "Insert MethodInvocation(781) into MethodInvocation(782) at 2", "Insert SimpleName: assertEquals(784) into MethodInvocation(790) at 0", "Insert NumberLiteral: 10(785) into MethodInvocation(790) at 1", "Insert MethodInvocation(789) into MethodInvocation(790) at 2", "Insert SimpleName: assertEquals(792) into MethodInvocation(798) at 0", "Insert BooleanLiteral: true(793) into MethodInvocation(798) at 1", "Insert MethodInvocation(797) into MethodInvocation(798) at 2", "Insert SimpleName: assertEquals(800) into MethodInvocation(806) at 0", "Insert StringLiteral: \"ALPHA\"(801) into MethodInvocation(806) at 1", "Insert MethodInvocation(805) into MethodInvocation(806) at 2", "Insert SimpleName: assertEquals(808) into MethodInvocation(814) at 0", "Insert StringLiteral: \"GAMMA\"(809) into MethodInvocation(814) at 1", "Insert MethodInvocation(813) into MethodInvocation(814) at 2", "Insert SimpleName: nextConnection(1162) into MethodInvocation(1163) at 0", "Insert MethodInvocation(1167) into MethodInvocation(1170) at 0", "Insert SimpleName: execute(1168) into MethodInvocation(1170) at 1", "Insert StringLiteral: \"CREATE SEQUENCE alpha.zeta START WITH 4 INCREMENT BY 7 MAXVALUE 24\"(1169) into MethodInvocation(1170) at 2", "Insert MethodInvocation(1174) into MethodInvocation(1177) at 0", "Update StringLiteral: \"CREATE SEQUENCE alpha.gamma START WITH 2 INCREMENT BY 3 CACHE 5\"(769) to \"CREATE SEQUENCE alpha.kappa START WITH 9 INCREMENT BY -2 MINVALUE 5\"", "Insert SimpleName: nextConnection(1179) into MethodInvocation(1180) at 0", "Insert SimpleName: query(1184) into VariableDeclarationFragment(1186) at 0", "Insert StringLiteral: \"SELECT NEXT VALUE FOR alpha.zeta, NEXT VALUE FOR alpha.kappa FROM SYSTEM.\\\"SEQUENCE\\\"\"(1185) into VariableDeclarationFragment(1186) at 1", "Insert SimpleName: ResultSet(1188) into SimpleType: ResultSet(1189) at 0", "Insert SimpleName: assertTrue(1199) into MethodInvocation(1203) at 0", "Insert MethodInvocation(1202) into MethodInvocation(1203) at 1", "Update NumberLiteral: 7(651) to 4", "Insert SimpleName: assertEquals(1213) into MethodInvocation(1219) at 0", "Insert NumberLiteral: 9(1214) into MethodInvocation(1219) at 1", "Insert MethodInvocation(1218) into MethodInvocation(1219) at 2", "Insert SimpleName: assertEquals(1227) into MethodInvocation(1235) at 0", "Insert InfixExpression: +(1230) into MethodInvocation(1235) at 1", "Move MethodInvocation(632) into MethodInvocation(1235) at 2", "Insert SimpleName: assertEquals(1237) into MethodInvocation(1245) at 0", "Insert InfixExpression: -(1240) into MethodInvocation(1245) at 1", "Insert MethodInvocation(1244) into MethodInvocation(1245) at 2", "Insert SimpleName: assertFalse(1247) into MethodInvocation(1251) at 0", "Insert MethodInvocation(1250) into MethodInvocation(1251) at 1", "Insert SimpleName: conn(1253) into MethodInvocation(1255) at 0", "Insert SimpleName: close(1254) into MethodInvocation(1255) at 1", "Insert SimpleName: nextConnection(1257) into MethodInvocation(1258) at 0", "Insert SimpleName: assertTrue(1269) into MethodInvocation(1273) at 0", "Insert MethodInvocation(1272) into MethodInvocation(1273) at 1", "Insert SimpleName: assertEquals(1275) into MethodInvocation(1285) at 0", "Insert InfixExpression: +(1280) into MethodInvocation(1285) at 1", "Move MethodInvocation(609) into MethodInvocation(1285) at 2", "Insert SimpleName: assertEquals(1287) into MethodInvocation(1297) at 0", "Insert InfixExpression: -(1292) into MethodInvocation(1297) at 1", "Insert MethodInvocation(1296) into MethodInvocation(1297) at 2", "Insert ExpressionStatement(1302) into Block(1306) at 0", "Insert ExpressionStatement(1305) into Block(1306) at 1", "Insert SingleVariableDeclaration(1310) into CatchClause(1347) at 0", "Insert Block(1346) into CatchClause(1347) at 1", "Insert SimpleName: conn(1349) into MethodInvocation(1351) at 0", "Insert SimpleName: close(1350) into MethodInvocation(1351) at 1", "Insert SimpleName: nextConnection(1362) into MethodInvocation(1363) at 0", "Insert MethodInvocation(1367) into MethodInvocation(1370) at 0", "Insert SimpleName: execute(1368) into MethodInvocation(1370) at 1", "Insert StringLiteral: \"CREATE SEQUENCE alpha.zeta START WITH 4 INCREMENT BY 7 MINVALUE 4 MAXVALUE 19 CYCLE\"(1369) into MethodInvocation(1370) at 2", "Insert MethodInvocation(1374) into MethodInvocation(1377) at 0", "Insert SimpleName: execute(1375) into MethodInvocation(1377) at 1", "Insert StringLiteral: \"CREATE SEQUENCE alpha.kappa START WITH 9 INCREMENT BY -2 MINVALUE 5 MAXVALUE 9 CYCLE\"(1376) into MethodInvocation(1377) at 2", "Insert SimpleName: nextConnection(1379) into MethodInvocation(1380) at 0", "Insert SimpleName: String(1382) into SimpleType: String(1383) at 0", "Insert SimpleName: query(1384) into VariableDeclarationFragment(1386) at 0", "Insert StringLiteral: \"SELECT NEXT VALUE FOR alpha.zeta, NEXT VALUE FOR alpha.kappa FROM SYSTEM.\\\"SEQUENCE\\\"\"(1385) into VariableDeclarationFragment(1386) at 1", "Insert SimpleName: assertEquals(1405) into MethodInvocation(1411) at 0", "Insert NumberLiteral: 4(1406) into MethodInvocation(1411) at 1", "Insert MethodInvocation(1410) into MethodInvocation(1411) at 2", "Insert SimpleName: assertEquals(1413) into MethodInvocation(1419) at 0", "Insert NumberLiteral: 9(1414) into MethodInvocation(1419) at 1", "Insert MethodInvocation(1418) into MethodInvocation(1419) at 2", "Insert SimpleName: assertEquals(1427) into MethodInvocation(1435) at 0", "Insert InfixExpression: +(1430) into MethodInvocation(1435) at 1", "Insert MethodInvocation(1434) into MethodInvocation(1435) at 2", "Insert SimpleName: assertEquals(1437) into MethodInvocation(1445) at 0", "Insert InfixExpression: -(1440) into MethodInvocation(1445) at 1", "Insert MethodInvocation(1444) into MethodInvocation(1445) at 2", "Insert SimpleName: assertFalse(1447) into MethodInvocation(1451) at 0", "Insert MethodInvocation(1450) into MethodInvocation(1451) at 1", "Insert SimpleName: conn(1453) into MethodInvocation(1455) at 0", "Insert SimpleName: close(1454) into MethodInvocation(1455) at 1", "Insert SimpleName: nextConnection(1457) into MethodInvocation(1458) at 0", "Insert SimpleName: assertTrue(1469) into MethodInvocation(1473) at 0", "Insert MethodInvocation(1472) into MethodInvocation(1473) at 1", "Insert InfixExpression: +(1480) into MethodInvocation(1485) at 1", "Insert InfixExpression: -(1492) into MethodInvocation(1497) at 1", "Insert SimpleName: assertTrue(1499) into MethodInvocation(1503) at 0", "Insert MethodInvocation(1502) into MethodInvocation(1503) at 1", "Update NumberLiteral: 3(2736) to 4", "Update NumberLiteral: 5(809) to 9", "Insert SimpleName: conn(1521) into MethodInvocation(1523) at 0", "Insert SimpleName: close(1522) into MethodInvocation(1523) at 1", "Update SimpleName: conn1(2183) to conn2", "Insert NullLiteral(3006) into MethodInvocation(3011) at 1", "Update StringLiteral: \"SELECT COALESCE(NEXT VALUE FOR foo.bar,1) FROM SYSTEM.\\\"SEQUENCE\\\"\"(2715) to \"SELECT LPAD(ENCODE(NEXT VALUE FOR foo.bar,'base62'),5,'0') FROM SYSTEM.\\\"SEQUENCE\\\"\"", "Insert SimpleName: assertEquals(3091) into MethodInvocation(3097) at 0", "Insert StringLiteral: \"00003\"(3092) into MethodInvocation(3097) at 1", "Insert MethodInvocation(3096) into MethodInvocation(3097) at 2", "Insert SimpleName: nextConnection(3209) into MethodInvocation(3210) at 0", "Insert MethodInvocation(3214) into MethodInvocation(3217) at 0", "Insert SimpleName: execute(3215) into MethodInvocation(3217) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar\"(3216) into MethodInvocation(3217) at 2", "Insert SimpleName: nextConnection(3219) into MethodInvocation(3220) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(3222) into MethodInvocation(3226) at 0", "Insert NumberLiteral: 1(3223) into MethodInvocation(3226) at 1", "Insert NumberLiteral: 2(3224) into MethodInvocation(3226) at 2", "Insert NumberLiteral: 3(3225) into MethodInvocation(3226) at 3", "Insert MethodInvocation(3230) into MethodInvocation(3233) at 0", "Insert SimpleName: execute(3231) into MethodInvocation(3233) at 1", "Insert StringLiteral: \"DROP SEQUENCE foo.bar\"(3232) into MethodInvocation(3233) at 2", "Insert SimpleName: nextConnection(3235) into MethodInvocation(3236) at 0", "Insert MethodInvocation(3240) into MethodInvocation(3243) at 0", "Insert SimpleName: execute(3241) into MethodInvocation(3243) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar INCREMENT BY -1\"(3242) into MethodInvocation(3243) at 2", "Insert SimpleName: nextConnection(3245) into MethodInvocation(3246) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(3248) into MethodInvocation(3253) at 0", "Insert NumberLiteral: 1(3249) into MethodInvocation(3253) at 1", "Insert NumberLiteral: 0(3250) into MethodInvocation(3253) at 2", "Insert PrefixExpression: -(3252) into MethodInvocation(3253) at 3", "Insert MethodInvocation(3257) into MethodInvocation(3260) at 0", "Insert SimpleName: execute(3258) into MethodInvocation(3260) at 1", "Insert StringLiteral: \"DROP SEQUENCE foo.bar\"(3259) into MethodInvocation(3260) at 2", "Insert SimpleName: nextConnection(3262) into MethodInvocation(3263) at 0", "Insert MethodInvocation(3267) into MethodInvocation(3270) at 0", "Insert SimpleName: execute(3268) into MethodInvocation(3270) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar MINVALUE 10\"(3269) into MethodInvocation(3270) at 2", "Insert SimpleName: nextConnection(3272) into MethodInvocation(3273) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(3275) into MethodInvocation(3279) at 0", "Insert NumberLiteral: 10(3276) into MethodInvocation(3279) at 1", "Insert NumberLiteral: 11(3277) into MethodInvocation(3279) at 2", "Insert NumberLiteral: 12(3278) into MethodInvocation(3279) at 3", "Insert MethodInvocation(3283) into MethodInvocation(3286) at 0", "Insert SimpleName: execute(3284) into MethodInvocation(3286) at 1", "Insert StringLiteral: \"DROP SEQUENCE foo.bar\"(3285) into MethodInvocation(3286) at 2", "Insert SimpleName: nextConnection(3288) into MethodInvocation(3289) at 0", "Insert MethodInvocation(3293) into MethodInvocation(3296) at 0", "Insert SimpleName: execute(3294) into MethodInvocation(3296) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar INCREMENT BY -1 MINVALUE 10 \"(3295) into MethodInvocation(3296) at 2", "Insert SimpleName: nextConnection(3298) into MethodInvocation(3299) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(3301) into MethodInvocation(3309) at 0", "Insert QualifiedName: Long.MAX_VALUE(3302) into MethodInvocation(3309) at 1", "Insert InfixExpression: -(3305) into MethodInvocation(3309) at 2", "Insert InfixExpression: -(3308) into MethodInvocation(3309) at 3", "Insert MethodInvocation(3313) into MethodInvocation(3316) at 0", "Insert SimpleName: execute(3314) into MethodInvocation(3316) at 1", "Insert StringLiteral: \"DROP SEQUENCE foo.bar\"(3315) into MethodInvocation(3316) at 2", "Insert SimpleName: nextConnection(3318) into MethodInvocation(3319) at 0", "Insert MethodInvocation(3323) into MethodInvocation(3326) at 0", "Insert SimpleName: execute(3324) into MethodInvocation(3326) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar MAXVALUE 0\"(3325) into MethodInvocation(3326) at 2", "Insert SimpleName: nextConnection(3328) into MethodInvocation(3329) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(3331) into MethodInvocation(3339) at 0", "Insert QualifiedName: Long.MIN_VALUE(3332) into MethodInvocation(3339) at 1", "Insert InfixExpression: +(3335) into MethodInvocation(3339) at 2", "Insert InfixExpression: +(3338) into MethodInvocation(3339) at 3", "Insert MethodInvocation(3343) into MethodInvocation(3346) at 0", "Insert SimpleName: execute(3344) into MethodInvocation(3346) at 1", "Insert StringLiteral: \"DROP SEQUENCE foo.bar\"(3345) into MethodInvocation(3346) at 2", "Insert SimpleName: nextConnection(3348) into MethodInvocation(3349) at 0", "Insert MethodInvocation(3353) into MethodInvocation(3356) at 0", "Insert SimpleName: execute(3354) into MethodInvocation(3356) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar INCREMENT BY -1 MAXVALUE 0\"(3355) into MethodInvocation(3356) at 2", "Insert SimpleName: nextConnection(3358) into MethodInvocation(3359) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(3361) into MethodInvocation(3367) at 0", "Insert NumberLiteral: 0(3362) into MethodInvocation(3367) at 1", "Insert PrefixExpression: -(3364) into MethodInvocation(3367) at 2", "Insert PrefixExpression: -(3366) into MethodInvocation(3367) at 3", "Insert SimpleName: nextConnection(3378) into MethodInvocation(3379) at 0", "Insert ExpressionStatement(3387) into Block(3391) at 0", "Insert ExpressionStatement(3390) into Block(3391) at 1", "Insert SingleVariableDeclaration(3395) into CatchClause(3414) at 0", "Insert Block(3413) into CatchClause(3414) at 1", "Insert ExpressionStatement(3422) into Block(3426) at 0", "Insert ExpressionStatement(3425) into Block(3426) at 1", "Insert SingleVariableDeclaration(3430) into CatchClause(3449) at 0", "Insert Block(3448) into CatchClause(3449) at 1", "Insert SimpleName: nextConnection(3460) into MethodInvocation(3461) at 0", "Insert ExpressionStatement(3469) into Block(3473) at 0", "Insert ExpressionStatement(3472) into Block(3473) at 1", "Insert SingleVariableDeclaration(3477) into CatchClause(3496) at 0", "Insert Block(3495) into CatchClause(3496) at 1", "Insert SimpleName: nextConnection(3507) into MethodInvocation(3508) at 0", "Insert ExpressionStatement(3516) into Block(3520) at 0", "Insert ExpressionStatement(3519) into Block(3520) at 1", "Insert SingleVariableDeclaration(3524) into CatchClause(3543) at 0", "Insert Block(3542) into CatchClause(3543) at 1", "Insert SimpleName: nextConnection(3554) into MethodInvocation(3555) at 0", "Insert ExpressionStatement(3563) into Block(3567) at 0", "Insert ExpressionStatement(3566) into Block(3567) at 1", "Insert SingleVariableDeclaration(3571) into CatchClause(3590) at 0", "Insert Block(3589) into CatchClause(3590) at 1", "Insert SimpleName: nextConnection(3601) into MethodInvocation(3602) at 0", "Insert ExpressionStatement(3610) into Block(3614) at 0", "Insert ExpressionStatement(3613) into Block(3614) at 1", "Insert SingleVariableDeclaration(3618) into CatchClause(3637) at 0", "Insert Block(3636) into CatchClause(3637) at 1", "Insert SimpleName: nextConnection(3648) into MethodInvocation(3649) at 0", "Insert ExpressionStatement(3657) into Block(3661) at 0", "Insert ExpressionStatement(3660) into Block(3661) at 1", "Insert SingleVariableDeclaration(3665) into CatchClause(3684) at 0", "Insert Block(3683) into CatchClause(3684) at 1", "Insert SimpleName: nextConnection(3695) into MethodInvocation(3696) at 0", "Insert MethodInvocation(3700) into MethodInvocation(3703) at 0", "Insert SimpleName: execute(3701) into MethodInvocation(3703) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 3 INCREMENT BY 1 MINVALUE 3 MAXVALUE 3 CYCLE CACHE 1\"(3702) into MethodInvocation(3703) at 2", "Insert SimpleName: nextConnection(3705) into MethodInvocation(3706) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(3708) into MethodInvocation(3712) at 0", "Insert NumberLiteral: 3(3709) into MethodInvocation(3712) at 1", "Insert NumberLiteral: 3(3710) into MethodInvocation(3712) at 2", "Insert NumberLiteral: 3(3711) into MethodInvocation(3712) at 3", "Insert SimpleName: nextConnection(3723) into MethodInvocation(3724) at 0", "Insert MethodInvocation(3728) into MethodInvocation(3731) at 0", "Insert SimpleName: execute(3729) into MethodInvocation(3731) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 3 INCREMENT BY -1 MINVALUE 3 MAXVALUE 3 CYCLE CACHE 2\"(3730) into MethodInvocation(3731) at 2", "Insert SimpleName: nextConnection(3733) into MethodInvocation(3734) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(3736) into MethodInvocation(3740) at 0", "Insert NumberLiteral: 3(3737) into MethodInvocation(3740) at 1", "Insert NumberLiteral: 3(3738) into MethodInvocation(3740) at 2", "Insert NumberLiteral: 3(3739) into MethodInvocation(3740) at 3", "Insert SimpleName: nextConnection(3751) into MethodInvocation(3752) at 0", "Insert MethodInvocation(3756) into MethodInvocation(3759) at 0", "Insert SimpleName: execute(3757) into MethodInvocation(3759) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 3 INCREMENT BY 1 MINVALUE 3 MAXVALUE 3 CACHE 1\"(3758) into MethodInvocation(3759) at 2", "Insert SimpleName: nextConnection(3761) into MethodInvocation(3762) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(3764) into MethodInvocation(3766) at 0", "Insert NumberLiteral: 3(3765) into MethodInvocation(3766) at 1", "Insert VariableDeclarationStatement(3778) into Block(3786) at 0", "Insert ExpressionStatement(3782) into Block(3786) at 1", "Insert ExpressionStatement(3785) into Block(3786) at 2", "Insert SingleVariableDeclaration(3790) into CatchClause(3809) at 0", "Insert Block(3808) into CatchClause(3809) at 1", "Insert SimpleName: nextConnection(3820) into MethodInvocation(3821) at 0", "Insert MethodInvocation(3825) into MethodInvocation(3828) at 0", "Insert SimpleName: execute(3826) into MethodInvocation(3828) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 3 INCREMENT BY -1 MINVALUE 3 MAXVALUE 3 CACHE 2\"(3827) into MethodInvocation(3828) at 2", "Insert SimpleName: nextConnection(3830) into MethodInvocation(3831) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(3833) into MethodInvocation(3835) at 0", "Insert NumberLiteral: 3(3834) into MethodInvocation(3835) at 1", "Insert VariableDeclarationStatement(3847) into Block(3855) at 0", "Insert ExpressionStatement(3851) into Block(3855) at 1", "Insert ExpressionStatement(3854) into Block(3855) at 2", "Insert SingleVariableDeclaration(3859) into CatchClause(3878) at 0", "Insert Block(3877) into CatchClause(3878) at 1", "Insert SimpleName: nextConnection(3889) into MethodInvocation(3890) at 0", "Insert MethodInvocation(3894) into MethodInvocation(3897) at 0", "Insert SimpleName: execute(3895) into MethodInvocation(3897) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 2 INCREMENT BY 3 MINVALUE 1 MAXVALUE 10 CYCLE CACHE 2\"(3896) into MethodInvocation(3897) at 2", "Insert SimpleName: nextConnection(3899) into MethodInvocation(3900) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(3902) into MethodInvocation(3912) at 0", "Insert NumberLiteral: 2(3903) into MethodInvocation(3912) at 1", "Insert NumberLiteral: 5(3904) into MethodInvocation(3912) at 2", "Insert NumberLiteral: 8(3905) into MethodInvocation(3912) at 3", "Insert NumberLiteral: 1(3906) into MethodInvocation(3912) at 4", "Insert NumberLiteral: 4(3907) into MethodInvocation(3912) at 5", "Insert NumberLiteral: 7(3908) into MethodInvocation(3912) at 6", "Insert NumberLiteral: 10(3909) into MethodInvocation(3912) at 7", "Insert NumberLiteral: 1(3910) into MethodInvocation(3912) at 8", "Insert NumberLiteral: 4(3911) into MethodInvocation(3912) at 9", "Insert SimpleName: nextConnection(3923) into MethodInvocation(3924) at 0", "Insert MethodInvocation(3928) into MethodInvocation(3931) at 0", "Insert SimpleName: execute(3929) into MethodInvocation(3931) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 3 INCREMENT BY -2 MINVALUE 1 MAXVALUE 10 CYCLE CACHE 2\"(3930) into MethodInvocation(3931) at 2", "Insert SimpleName: nextConnection(3933) into MethodInvocation(3934) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(3936) into MethodInvocation(3946) at 0", "Insert NumberLiteral: 3(3937) into MethodInvocation(3946) at 1", "Insert NumberLiteral: 1(3938) into MethodInvocation(3946) at 2", "Insert NumberLiteral: 10(3939) into MethodInvocation(3946) at 3", "Insert NumberLiteral: 8(3940) into MethodInvocation(3946) at 4", "Insert NumberLiteral: 6(3941) into MethodInvocation(3946) at 5", "Insert NumberLiteral: 4(3942) into MethodInvocation(3946) at 6", "Insert NumberLiteral: 2(3943) into MethodInvocation(3946) at 7", "Insert NumberLiteral: 10(3944) into MethodInvocation(3946) at 8", "Insert NumberLiteral: 8(3945) into MethodInvocation(3946) at 9", "Insert SimpleName: nextConnection(3957) into MethodInvocation(3958) at 0", "Insert MethodInvocation(3962) into MethodInvocation(3965) at 0", "Insert SimpleName: execute(3963) into MethodInvocation(3965) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 2 INCREMENT BY 3 MINVALUE 1 MAXVALUE 10 CACHE 100\"(3964) into MethodInvocation(3965) at 2", "Insert SimpleName: nextConnection(3967) into MethodInvocation(3968) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(3970) into MethodInvocation(3974) at 0", "Insert NumberLiteral: 2(3971) into MethodInvocation(3974) at 1", "Insert NumberLiteral: 5(3972) into MethodInvocation(3974) at 2", "Insert NumberLiteral: 8(3973) into MethodInvocation(3974) at 3", "Insert VariableDeclarationStatement(3986) into Block(3994) at 0", "Insert ExpressionStatement(3990) into Block(3994) at 1", "Insert ExpressionStatement(3993) into Block(3994) at 2", "Insert SingleVariableDeclaration(3998) into CatchClause(4017) at 0", "Insert Block(4016) into CatchClause(4017) at 1", "Insert SimpleName: nextConnection(4028) into MethodInvocation(4029) at 0", "Insert MethodInvocation(4033) into MethodInvocation(4036) at 0", "Insert SimpleName: execute(4034) into MethodInvocation(4036) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 8 INCREMENT BY 2 MINVALUE 1 MAXVALUE 10 CACHE 2\"(4035) into MethodInvocation(4036) at 2", "Insert SimpleName: nextConnection(4038) into MethodInvocation(4039) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(4041) into MethodInvocation(4044) at 0", "Insert NumberLiteral: 8(4042) into MethodInvocation(4044) at 1", "Insert NumberLiteral: 10(4043) into MethodInvocation(4044) at 2", "Insert VariableDeclarationStatement(4056) into Block(4064) at 0", "Insert ExpressionStatement(4060) into Block(4064) at 1", "Insert ExpressionStatement(4063) into Block(4064) at 2", "Insert SingleVariableDeclaration(4068) into CatchClause(4087) at 0", "Insert Block(4086) into CatchClause(4087) at 1", "Insert SimpleName: nextConnection(4098) into MethodInvocation(4099) at 0", "Insert MethodInvocation(4103) into MethodInvocation(4106) at 0", "Insert SimpleName: execute(4104) into MethodInvocation(4106) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 4 INCREMENT BY -2 MINVALUE 1 MAXVALUE 10 CACHE 100\"(4105) into MethodInvocation(4106) at 2", "Insert SimpleName: nextConnection(4108) into MethodInvocation(4109) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(4111) into MethodInvocation(4114) at 0", "Insert NumberLiteral: 4(4112) into MethodInvocation(4114) at 1", "Insert NumberLiteral: 2(4113) into MethodInvocation(4114) at 2", "Insert VariableDeclarationStatement(4126) into Block(4134) at 0", "Insert ExpressionStatement(4130) into Block(4134) at 1", "Insert ExpressionStatement(4133) into Block(4134) at 2", "Insert SingleVariableDeclaration(4138) into CatchClause(4157) at 0", "Insert Block(4156) into CatchClause(4157) at 1", "Insert SimpleName: nextConnection(4168) into MethodInvocation(4169) at 0", "Insert MethodInvocation(4173) into MethodInvocation(4176) at 0", "Insert SimpleName: execute(4174) into MethodInvocation(4176) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 3 INCREMENT BY -2 MINVALUE 1 MAXVALUE 10 CACHE 2\"(4175) into MethodInvocation(4176) at 2", "Insert SimpleName: nextConnection(4178) into MethodInvocation(4179) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(4181) into MethodInvocation(4184) at 0", "Insert NumberLiteral: 3(4182) into MethodInvocation(4184) at 1", "Insert NumberLiteral: 1(4183) into MethodInvocation(4184) at 2", "Insert VariableDeclarationStatement(4196) into Block(4204) at 0", "Insert ExpressionStatement(4200) into Block(4204) at 1", "Insert ExpressionStatement(4203) into Block(4204) at 2", "Insert SingleVariableDeclaration(4208) into CatchClause(4227) at 0", "Insert Block(4226) into CatchClause(4227) at 1", "Insert SimpleName: nextConnection(4238) into MethodInvocation(4239) at 0", "Insert MethodInvocation(4243) into MethodInvocation(4246) at 0", "Insert SimpleName: execute(4244) into MethodInvocation(4246) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 9223372036854775807 INCREMENT BY 1 CACHE 10\"(4245) into MethodInvocation(4246) at 2", "Insert SimpleName: nextConnection(4248) into MethodInvocation(4249) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(4251) into MethodInvocation(4253) at 0", "Insert QualifiedName: Long.MAX_VALUE(4252) into MethodInvocation(4253) at 1", "Insert VariableDeclarationStatement(4265) into Block(4273) at 0", "Insert ExpressionStatement(4269) into Block(4273) at 1", "Insert ExpressionStatement(4272) into Block(4273) at 2", "Insert SingleVariableDeclaration(4277) into CatchClause(4296) at 0", "Insert Block(4295) into CatchClause(4296) at 1", "Insert SimpleName: nextConnection(4307) into MethodInvocation(4308) at 0", "Insert MethodInvocation(4312) into MethodInvocation(4315) at 0", "Insert SimpleName: execute(4313) into MethodInvocation(4315) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 9223372036854775807 INCREMENT BY 9223372036854775807 CYCLE CACHE 10\"(4314) into MethodInvocation(4315) at 2", "Insert SimpleName: nextConnection(4317) into MethodInvocation(4318) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(4320) into MethodInvocation(4331) at 0", "Insert QualifiedName: Long.MAX_VALUE(4321) into MethodInvocation(4331) at 1", "Insert QualifiedName: Long.MIN_VALUE(4322) into MethodInvocation(4331) at 2", "Insert PrefixExpression: -(4324) into MethodInvocation(4331) at 3", "Insert InfixExpression: -(4327) into MethodInvocation(4331) at 4", "Insert QualifiedName: Long.MIN_VALUE(4328) into MethodInvocation(4331) at 5", "Insert PrefixExpression: -(4330) into MethodInvocation(4331) at 6", "Insert SimpleName: nextConnection(4342) into MethodInvocation(4343) at 0", "Insert MethodInvocation(4347) into MethodInvocation(4350) at 0", "Insert SimpleName: execute(4348) into MethodInvocation(4350) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar START WITH -9223372036854775807 INCREMENT BY -1 CACHE 10\"(4349) into MethodInvocation(4350) at 2", "Insert SimpleName: nextConnection(4352) into MethodInvocation(4353) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(4355) into MethodInvocation(4360) at 0", "Insert InfixExpression: +(4358) into MethodInvocation(4360) at 1", "Insert QualifiedName: Long.MIN_VALUE(4359) into MethodInvocation(4360) at 2", "Insert VariableDeclarationStatement(4372) into Block(4380) at 0", "Insert ExpressionStatement(4376) into Block(4380) at 1", "Insert ExpressionStatement(4379) into Block(4380) at 2", "Insert SingleVariableDeclaration(4384) into CatchClause(4403) at 0", "Insert Block(4402) into CatchClause(4403) at 1", "Insert SimpleName: nextConnection(4414) into MethodInvocation(4415) at 0", "Insert MethodInvocation(4419) into MethodInvocation(4422) at 0", "Insert SimpleName: execute(4420) into MethodInvocation(4422) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar START WITH -9223372036854775807 INCREMENT BY -9223372036854775807 CYCLE CACHE 10\"(4421) into MethodInvocation(4422) at 2", "Insert SimpleName: nextConnection(4424) into MethodInvocation(4425) at 0", "Insert SimpleName: assertSequenceValuesForSingleRow(4427) into MethodInvocation(4438) at 0", "Insert InfixExpression: +(4430) into MethodInvocation(4438) at 1", "Insert QualifiedName: Long.MAX_VALUE(4431) into MethodInvocation(4438) at 2", "Insert NumberLiteral: 0(4432) into MethodInvocation(4438) at 3", "Insert InfixExpression: +(4435) into MethodInvocation(4438) at 4", "Insert QualifiedName: Long.MAX_VALUE(4436) into MethodInvocation(4438) at 5", "Insert NumberLiteral: 0(4437) into MethodInvocation(4438) at 6", "Insert SimpleName: nextConnection(4449) into MethodInvocation(4450) at 0", "Insert MethodInvocation(4454) into MethodInvocation(4457) at 0", "Insert SimpleName: execute(4455) into MethodInvocation(4457) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 1 INCREMENT BY 2 MINVALUE 1 MAXVALUE 10 CACHE 2\"(4456) into MethodInvocation(4457) at 2", "Insert MethodInvocation(4461) into MethodInvocation(4464) at 0", "Insert SimpleName: execute(4462) into MethodInvocation(4464) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar2\"(4463) into MethodInvocation(4464) at 2", "Insert SimpleName: nextConnection(4466) into MethodInvocation(4467) at 0", "Insert SimpleName: assertSequenceValuesMultipleSeq(4469) into MethodInvocation(4472) at 0", "Insert NumberLiteral: 1(4470) into MethodInvocation(4472) at 1", "Insert NumberLiteral: 3(4471) into MethodInvocation(4472) at 2", "Insert SimpleName: assertSequenceValuesMultipleSeq(4474) into MethodInvocation(4477) at 0", "Insert NumberLiteral: 5(4475) into MethodInvocation(4477) at 1", "Insert NumberLiteral: 7(4476) into MethodInvocation(4477) at 2", "Insert SimpleName: ResultSet(4479) into SimpleType: ResultSet(4480) at 0", "Insert SimpleName: rs(4481) into VariableDeclarationFragment(4488) at 0", "Insert MethodInvocation(4487) into VariableDeclarationFragment(4488) at 1", "Insert SimpleName: assertTrue(4490) into MethodInvocation(4494) at 0", "Insert MethodInvocation(4493) into MethodInvocation(4494) at 1", "Insert SimpleName: assertEquals(4496) into MethodInvocation(4502) at 0", "Insert NumberLiteral: 9(4497) into MethodInvocation(4502) at 1", "Insert MethodInvocation(4501) into MethodInvocation(4502) at 2", "Insert ExpressionStatement(4509) into Block(4513) at 0", "Insert ExpressionStatement(4512) into Block(4513) at 1", "Insert SingleVariableDeclaration(4517) into CatchClause(4536) at 0", "Insert Block(4535) into CatchClause(4536) at 1", "Insert ExpressionStatement(4546) into Block(4554) at 0", "Insert ExpressionStatement(4550) into Block(4554) at 1", "Insert ExpressionStatement(4553) into Block(4554) at 2", "Insert SingleVariableDeclaration(4558) into CatchClause(4577) at 0", "Insert Block(4576) into CatchClause(4577) at 1", "Insert SimpleName: nextConnection(4588) into MethodInvocation(4589) at 0", "Insert MethodInvocation(4593) into MethodInvocation(4596) at 0", "Insert SimpleName: execute(4594) into MethodInvocation(4596) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar START WITH 1 INCREMENT BY 2 MINVALUE 1 MAXVALUE 10 CYCLE CACHE 2\"(4595) into MethodInvocation(4596) at 2", "Insert MethodInvocation(4600) into MethodInvocation(4603) at 0", "Insert SimpleName: execute(4601) into MethodInvocation(4603) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar2\"(4602) into MethodInvocation(4603) at 2", "Insert SimpleName: nextConnection(4605) into MethodInvocation(4606) at 0", "Insert SimpleName: assertSequenceValuesMultipleSeq(4608) into MethodInvocation(4611) at 0", "Insert NumberLiteral: 1(4609) into MethodInvocation(4611) at 1", "Insert NumberLiteral: 3(4610) into MethodInvocation(4611) at 2", "Insert SimpleName: assertSequenceValuesMultipleSeq(4613) into MethodInvocation(4616) at 0", "Insert NumberLiteral: 5(4614) into MethodInvocation(4616) at 1", "Insert NumberLiteral: 7(4615) into MethodInvocation(4616) at 2", "Insert SimpleName: assertSequenceValuesMultipleSeq(4618) into MethodInvocation(4621) at 0", "Insert NumberLiteral: 9(4619) into MethodInvocation(4621) at 1", "Insert NumberLiteral: 1(4620) into MethodInvocation(4621) at 2", "Insert SimpleName: assertSequenceValuesMultipleSeq(4623) into MethodInvocation(4626) at 0", "Insert NumberLiteral: 3(4624) into MethodInvocation(4626) at 1", "Insert NumberLiteral: 5(4625) into MethodInvocation(4626) at 2", "Insert SimpleName: assertSequenceValuesMultipleSeq(4628) into MethodInvocation(4631) at 0", "Insert NumberLiteral: 7(4629) into MethodInvocation(4631) at 1", "Insert NumberLiteral: 9(4630) into MethodInvocation(4631) at 2", "Insert SimpleName: assertSequenceValuesMultipleSeq(4633) into MethodInvocation(4636) at 0", "Insert NumberLiteral: 1(4634) into MethodInvocation(4636) at 1", "Insert NumberLiteral: 3(4635) into MethodInvocation(4636) at 2", "Insert SimpleName: assertSequenceValuesMultipleSeq(4638) into MethodInvocation(4641) at 0", "Insert NumberLiteral: 5(4639) into MethodInvocation(4641) at 1", "Insert NumberLiteral: 7(4640) into MethodInvocation(4641) at 2", "Insert SimpleName: nextConnection(4652) into MethodInvocation(4653) at 0", "Insert MethodInvocation(4657) into MethodInvocation(4660) at 0", "Insert SimpleName: execute(4658) into MethodInvocation(4660) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar\"(4659) into MethodInvocation(4660) at 2", "Insert SimpleName: nextConnection(4662) into MethodInvocation(4663) at 0", "Insert MethodInvocation(4667) into MethodInvocation(4670) at 0", "Insert SimpleName: execute(4668) into MethodInvocation(4670) at 1", "Insert StringLiteral: \"CREATE TABLE EVENTS (event_id BIGINT NOT NULL PRIMARY KEY, user_id char(15), val BIGINT )\"(4669) into MethodInvocation(4670) at 2", "Insert MethodInvocation(4674) into MethodInvocation(4677) at 0", "Insert SimpleName: execute(4675) into MethodInvocation(4677) at 1", "Insert StringLiteral: \"CREATE TABLE METRICS (metric_id char(15) NOT NULL PRIMARY KEY, agg_id char(15), metric_val INTEGER )\"(4676) into MethodInvocation(4677) at 2", "Insert SimpleName: nextConnection(4679) into MethodInvocation(4680) at 0", "Insert SimpleName: insertEvent(4682) into MethodInvocation(4686) at 0", "Insert NumberLiteral: 1(4683) into MethodInvocation(4686) at 1", "Insert StringLiteral: \"user1\"(4684) into MethodInvocation(4686) at 2", "Insert NumberLiteral: 1(4685) into MethodInvocation(4686) at 3", "Insert SimpleName: insertEvent(4688) into MethodInvocation(4692) at 0", "Insert NumberLiteral: 2(4689) into MethodInvocation(4692) at 1", "Insert StringLiteral: \"user2\"(4690) into MethodInvocation(4692) at 2", "Insert NumberLiteral: 1(4691) into MethodInvocation(4692) at 3", "Insert SimpleName: insertEvent(4694) into MethodInvocation(4698) at 0", "Insert NumberLiteral: 3(4695) into MethodInvocation(4698) at 1", "Insert StringLiteral: \"user1\"(4696) into MethodInvocation(4698) at 2", "Insert NumberLiteral: 1(4697) into MethodInvocation(4698) at 3", "Insert SimpleName: insertEvent(4700) into MethodInvocation(4704) at 0", "Insert NumberLiteral: 4(4701) into MethodInvocation(4704) at 1", "Insert StringLiteral: \"user2\"(4702) into MethodInvocation(4704) at 2", "Insert NumberLiteral: 1(4703) into MethodInvocation(4704) at 3", "Insert SimpleName: insertEvent(4706) into MethodInvocation(4710) at 0", "Insert NumberLiteral: 5(4707) into MethodInvocation(4710) at 1", "Insert StringLiteral: \"user2\"(4708) into MethodInvocation(4710) at 2", "Insert NumberLiteral: 1(4709) into MethodInvocation(4710) at 3", "Insert SimpleName: insertEvent(4712) into MethodInvocation(4716) at 0", "Insert NumberLiteral: 6(4713) into MethodInvocation(4716) at 1", "Insert StringLiteral: \"user3\"(4714) into MethodInvocation(4716) at 2", "Insert NumberLiteral: 1(4715) into MethodInvocation(4716) at 3", "Insert SimpleName: conn(4718) into MethodInvocation(4720) at 0", "Insert SimpleName: commit(4719) into MethodInvocation(4720) at 1", "Insert SimpleName: nextConnection(4722) into MethodInvocation(4723) at 0", "Insert MethodInvocation(4727) into MethodInvocation(4730) at 0", "Insert SimpleName: execute(4728) into MethodInvocation(4730) at 1", "Insert StringLiteral: \"UPSERT INTO METRICS SELECT 'METRIC_'||(LPAD(ENCODE(NEXT VALUE FOR foo.bar,'base62'),5,'0')), user_id, sum(val) FROM events GROUP BY user_id ORDER BY user_id\"(4729) into MethodInvocation(4730) at 2", "Insert SimpleName: conn(4732) into MethodInvocation(4734) at 0", "Insert SimpleName: commit(4733) into MethodInvocation(4734) at 1", "Insert SimpleName: nextConnection(4736) into MethodInvocation(4737) at 0", "Insert SimpleName: PreparedStatement(4739) into SimpleType: PreparedStatement(4740) at 0", "Insert SimpleName: stmt(4741) into VariableDeclarationFragment(4746) at 0", "Insert MethodInvocation(4745) into VariableDeclarationFragment(4746) at 1", "Insert SimpleName: ResultSet(4748) into SimpleType: ResultSet(4749) at 0", "Insert SimpleName: rs(4750) into VariableDeclarationFragment(4754) at 0", "Insert MethodInvocation(4753) into VariableDeclarationFragment(4754) at 1", "Insert SimpleName: assertTrue(4756) into MethodInvocation(4760) at 0", "Insert MethodInvocation(4759) into MethodInvocation(4760) at 1", "Insert SimpleName: assertEquals(4762) into MethodInvocation(4768) at 0", "Insert StringLiteral: \"METRIC_00001\"(4763) into MethodInvocation(4768) at 1", "Insert MethodInvocation(4767) into MethodInvocation(4768) at 2", "Update StringLiteral: \"ALPHA\"(817) to \"user1\"", "Insert SimpleName: assertEquals(4778) into MethodInvocation(4784) at 0", "Insert NumberLiteral: 2(4779) into MethodInvocation(4784) at 1", "Insert MethodInvocation(4783) into MethodInvocation(4784) at 2", "Insert SimpleName: assertTrue(4786) into MethodInvocation(4790) at 0", "Insert MethodInvocation(4789) into MethodInvocation(4790) at 1", "Insert SimpleName: assertEquals(4792) into MethodInvocation(4798) at 0", "Insert StringLiteral: \"METRIC_00002\"(4793) into MethodInvocation(4798) at 1", "Insert MethodInvocation(4797) into MethodInvocation(4798) at 2", "Update StringLiteral: \"GAMMA\"(825) to \"user2\"", "Insert SimpleName: assertEquals(4808) into MethodInvocation(4814) at 0", "Insert NumberLiteral: 3(4809) into MethodInvocation(4814) at 1", "Insert MethodInvocation(4813) into MethodInvocation(4814) at 2", "Insert SimpleName: assertTrue(4816) into MethodInvocation(4820) at 0", "Insert MethodInvocation(4819) into MethodInvocation(4820) at 1", "Insert SimpleName: assertEquals(4822) into MethodInvocation(4828) at 0", "Insert StringLiteral: \"METRIC_00003\"(4823) into MethodInvocation(4828) at 1", "Insert MethodInvocation(4827) into MethodInvocation(4828) at 2", "Insert SimpleName: assertEquals(4830) into MethodInvocation(4836) at 0", "Insert StringLiteral: \"user3\"(4831) into MethodInvocation(4836) at 1", "Insert MethodInvocation(4835) into MethodInvocation(4836) at 2", "Insert SimpleName: assertEquals(4838) into MethodInvocation(4844) at 0", "Insert NumberLiteral: 1(4839) into MethodInvocation(4844) at 1", "Insert MethodInvocation(4843) into MethodInvocation(4844) at 2", "Insert SimpleName: assertFalse(4846) into MethodInvocation(4850) at 0", "Insert MethodInvocation(4849) into MethodInvocation(4850) at 1", "Insert SimpleName: PreparedStatement(4869) into SimpleType: PreparedStatement(4870) at 0", "Insert SimpleName: stmt(4871) into VariableDeclarationFragment(4876) at 0", "Insert MethodInvocation(4875) into VariableDeclarationFragment(4876) at 1", "Insert SimpleName: stmt(4878) into MethodInvocation(4882) at 0", "Insert SimpleName: setLong(4879) into MethodInvocation(4882) at 1", "Insert NumberLiteral: 1(4880) into MethodInvocation(4882) at 2", "Insert SimpleName: id(4881) into MethodInvocation(4882) at 3", "Insert SimpleName: stmt(4884) into MethodInvocation(4888) at 0", "Insert SimpleName: setString(4885) into MethodInvocation(4888) at 1", "Insert NumberLiteral: 2(4886) into MethodInvocation(4888) at 2", "Insert SimpleName: userId(4887) into MethodInvocation(4888) at 3", "Insert SimpleName: stmt(4890) into MethodInvocation(4894) at 0", "Insert SimpleName: setLong(4891) into MethodInvocation(4894) at 1", "Insert NumberLiteral: 3(4892) into MethodInvocation(4894) at 2", "Insert SimpleName: val(4893) into MethodInvocation(4894) at 3", "Insert SimpleName: stmt(4896) into MethodInvocation(4898) at 0", "Insert SimpleName: execute(4897) into MethodInvocation(4898) at 1", "Insert SimpleName: PreparedStatement(4916) into SimpleType: PreparedStatement(4917) at 0", "Insert SimpleName: stmt(4918) into VariableDeclarationFragment(4923) at 0", "Insert MethodInvocation(4922) into VariableDeclarationFragment(4923) at 1", "Insert PrimitiveType: long(4925) into SingleVariableDeclaration(4927) at 0", "Insert SimpleName: seqVal(4926) into SingleVariableDeclaration(4927) at 1", "Insert VariableDeclarationStatement(4936) into Block(4961) at 0", "Insert ExpressionStatement(4942) into Block(4961) at 1", "Insert ExpressionStatement(4950) into Block(4961) at 2", "Insert ExpressionStatement(4956) into Block(4961) at 3", "Insert ExpressionStatement(4960) into Block(4961) at 4", "Insert SimpleName: stmt(4963) into MethodInvocation(4965) at 0", "Insert SimpleName: close(4964) into MethodInvocation(4965) at 1", "Insert SimpleName: PreparedStatement(4983) into SimpleType: PreparedStatement(4984) at 0", "Insert SimpleName: stmt(4985) into VariableDeclarationFragment(4990) at 0", "Insert MethodInvocation(4989) into VariableDeclarationFragment(4990) at 1", "Insert SimpleName: ResultSet(4992) into SimpleType: ResultSet(4993) at 0", "Insert SimpleName: rs(4994) into VariableDeclarationFragment(4998) at 0", "Insert MethodInvocation(4997) into VariableDeclarationFragment(4998) at 1", "Insert PrimitiveType: long(5000) into SingleVariableDeclaration(5002) at 0", "Insert SimpleName: seqVal(5001) into SingleVariableDeclaration(5002) at 1", "Insert ExpressionStatement(5009) into Block(5018) at 0", "Insert ExpressionStatement(5017) into Block(5018) at 1", "Insert SimpleName: assertFalse(5020) into MethodInvocation(5024) at 0", "Insert MethodInvocation(5023) into MethodInvocation(5024) at 1", "Insert SimpleName: rs(5026) into MethodInvocation(5028) at 0", "Insert SimpleName: close(5027) into MethodInvocation(5028) at 1", "Insert SimpleName: stmt(5030) into MethodInvocation(5032) at 0", "Insert SimpleName: close(5031) into MethodInvocation(5032) at 1", "Insert SimpleName: List(5043) into SimpleType: List(5044) at 0", "Insert SimpleName: String(5045) into SimpleType: String(5046) at 0", "Insert SimpleType: List(5051) into ParameterizedType: List<String>(5054) at 0", "Insert SimpleType: String(5053) into ParameterizedType: List<String>(5054) at 1", "Insert SimpleName: missingExceptions(5055) into VariableDeclarationFragment(5060) at 0", "Insert MethodInvocation(5059) into VariableDeclarationFragment(5060) at 1", "Insert SimpleType: List(5063) into ParameterizedType: List<String>(5066) at 0", "Insert SimpleType: String(5065) into ParameterizedType: List<String>(5066) at 1", "Insert SimpleName: unexpectedExceptions(5067) into VariableDeclarationFragment(5071) at 0", "Insert MethodInvocation(5070) into VariableDeclarationFragment(5071) at 1", "Insert IfStatement(5088) into Block(5096) at 0", "Insert ExpressionStatement(5095) into Block(5096) at 1", "Insert ParenthesizedExpression(5102) into InfixExpression: !=(5104) at 0", "Insert NullLiteral(5103) into InfixExpression: !=(5104) at 1", "Insert InfixExpression: !=(5110) into InfixExpression: &&(5116) at 0", "Insert InfixExpression: !=(5115) into InfixExpression: &&(5116) at 1", "Insert ExpressionStatement(5124) into Block(5125) at 0", "Update SimpleName: getInt(304) to getBytes", "Insert ExpressionStatement(402) into Block(403) at 1", "Update SimpleName: getInt(493) to getBytes", "Move MethodInvocation(767) into MethodInvocation(735) at 0", "Insert SimpleName: executeQuery(733) into MethodInvocation(735) at 1", "Insert StringLiteral: \"SELECT start_with, current_value, increment_by, cache_size, min_value, max_value, cycle_flag, sequence_schema, sequence_name FROM SYSTEM.\\\"SEQUENCE\\\"\"(734) into MethodInvocation(735) at 2", "Insert SimpleName: rs(746) into MethodInvocation(749) at 0", "Insert SimpleName: getLong(747) into MethodInvocation(749) at 1", "Insert StringLiteral: \"start_with\"(748) into MethodInvocation(749) at 2", "Insert SimpleName: rs(754) into MethodInvocation(757) at 0", "Insert SimpleName: getBytes(755) into MethodInvocation(757) at 1", "Insert StringLiteral: \"current_value\"(756) into MethodInvocation(757) at 2", "Insert SimpleName: rs(762) into MethodInvocation(765) at 0", "Insert SimpleName: getLong(763) into MethodInvocation(765) at 1", "Insert StringLiteral: \"increment_by\"(764) into MethodInvocation(765) at 2", "Insert SimpleName: rs(770) into MethodInvocation(773) at 0", "Insert SimpleName: getLong(771) into MethodInvocation(773) at 1", "Insert StringLiteral: \"cache_size\"(772) into MethodInvocation(773) at 2", "Insert SimpleName: rs(778) into MethodInvocation(781) at 0", "Insert SimpleName: getLong(779) into MethodInvocation(781) at 1", "Insert StringLiteral: \"min_value\"(780) into MethodInvocation(781) at 2", "Insert SimpleName: rs(786) into MethodInvocation(789) at 0", "Insert SimpleName: getLong(787) into MethodInvocation(789) at 1", "Insert StringLiteral: \"max_value\"(788) into MethodInvocation(789) at 2", "Insert SimpleName: rs(794) into MethodInvocation(797) at 0", "Insert SimpleName: getBoolean(795) into MethodInvocation(797) at 1", "Insert StringLiteral: \"cycle_flag\"(796) into MethodInvocation(797) at 2", "Insert SimpleName: rs(802) into MethodInvocation(805) at 0", "Insert SimpleName: getString(803) into MethodInvocation(805) at 1", "Insert StringLiteral: \"sequence_schema\"(804) into MethodInvocation(805) at 2", "Insert SimpleName: rs(810) into MethodInvocation(813) at 0", "Insert SimpleName: getString(811) into MethodInvocation(813) at 1", "Insert StringLiteral: \"sequence_name\"(812) into MethodInvocation(813) at 2", "Insert SimpleName: conn(1165) into MethodInvocation(1167) at 0", "Insert SimpleName: createStatement(1166) into MethodInvocation(1167) at 1", "Insert SimpleName: conn(1172) into MethodInvocation(1174) at 0", "Insert SimpleName: createStatement(1173) into MethodInvocation(1174) at 1", "Insert MethodInvocation(1194) into MethodInvocation(1196) at 0", "Insert SimpleName: rs(1200) into MethodInvocation(1202) at 0", "Insert SimpleName: next(1201) into MethodInvocation(1202) at 1", "Insert SimpleName: rs(1215) into MethodInvocation(1218) at 0", "Insert SimpleName: getInt(1216) into MethodInvocation(1218) at 1", "Insert NumberLiteral: 2(1217) into MethodInvocation(1218) at 2", "Insert NumberLiteral: 4(1228) into InfixExpression: +(1230) at 0", "Insert NumberLiteral: 7(1229) into InfixExpression: +(1230) at 1", "Insert NumberLiteral: 9(1238) into InfixExpression: -(1240) at 0", "Insert NumberLiteral: 2(1239) into InfixExpression: -(1240) at 1", "Insert SimpleName: rs(1241) into MethodInvocation(1244) at 0", "Insert SimpleName: getInt(1242) into MethodInvocation(1244) at 1", "Insert NumberLiteral: 2(1243) into MethodInvocation(1244) at 2", "Insert SimpleName: rs(1248) into MethodInvocation(1250) at 0", "Insert SimpleName: next(1249) into MethodInvocation(1250) at 1", "Insert SimpleName: rs(1270) into MethodInvocation(1272) at 0", "Insert SimpleName: next(1271) into MethodInvocation(1272) at 1", "Insert NumberLiteral: 4(1276) into InfixExpression: +(1280) at 0", "Insert InfixExpression: *(1279) into InfixExpression: +(1280) at 1", "Insert NumberLiteral: 9(1288) into InfixExpression: -(1292) at 0", "Insert InfixExpression: *(1291) into InfixExpression: -(1292) at 1", "Insert SimpleName: rs(1293) into MethodInvocation(1296) at 0", "Insert SimpleName: getInt(1294) into MethodInvocation(1296) at 1", "Insert NumberLiteral: 2(1295) into MethodInvocation(1296) at 2", "Insert MethodInvocation(1301) into ExpressionStatement(1302) at 0", "Insert MethodInvocation(1304) into ExpressionStatement(1305) at 0", "Insert SimpleType: SQLException(1308) into SingleVariableDeclaration(1310) at 0", "Insert SimpleName: e(1309) into SingleVariableDeclaration(1310) at 1", "Insert VariableDeclarationStatement(1321) into Block(1346) at 0", "Insert VariableDeclarationStatement(1332) into Block(1346) at 1", "Insert ExpressionStatement(1345) into Block(1346) at 2", "Insert SimpleName: conn(1365) into MethodInvocation(1367) at 0", "Insert SimpleName: createStatement(1366) into MethodInvocation(1367) at 1", "Insert SimpleName: conn(1372) into MethodInvocation(1374) at 0", "Insert SimpleName: createStatement(1373) into MethodInvocation(1374) at 1", "Insert SimpleName: rs(1407) into MethodInvocation(1410) at 0", "Insert SimpleName: getInt(1408) into MethodInvocation(1410) at 1", "Insert NumberLiteral: 1(1409) into MethodInvocation(1410) at 2", "Insert SimpleName: rs(1415) into MethodInvocation(1418) at 0", "Insert SimpleName: getInt(1416) into MethodInvocation(1418) at 1", "Insert NumberLiteral: 2(1417) into MethodInvocation(1418) at 2", "Insert NumberLiteral: 4(1428) into InfixExpression: +(1430) at 0", "Insert NumberLiteral: 7(1429) into InfixExpression: +(1430) at 1", "Insert SimpleName: rs(1431) into MethodInvocation(1434) at 0", "Insert SimpleName: getInt(1432) into MethodInvocation(1434) at 1", "Insert NumberLiteral: 1(1433) into MethodInvocation(1434) at 2", "Insert NumberLiteral: 9(1438) into InfixExpression: -(1440) at 0", "Insert NumberLiteral: 2(1439) into InfixExpression: -(1440) at 1", "Insert SimpleName: rs(1441) into MethodInvocation(1444) at 0", "Insert SimpleName: getInt(1442) into MethodInvocation(1444) at 1", "Insert NumberLiteral: 2(1443) into MethodInvocation(1444) at 2", "Insert SimpleName: rs(1448) into MethodInvocation(1450) at 0", "Insert SimpleName: next(1449) into MethodInvocation(1450) at 1", "Insert SimpleName: rs(1470) into MethodInvocation(1472) at 0", "Insert SimpleName: next(1471) into MethodInvocation(1472) at 1", "Insert NumberLiteral: 4(1476) into InfixExpression: +(1480) at 0", "Insert InfixExpression: *(1479) into InfixExpression: +(1480) at 1", "Update SimpleName: getLong(795) to getInt", "Insert NumberLiteral: 9(1488) into InfixExpression: -(1492) at 0", "Insert InfixExpression: *(1491) into InfixExpression: -(1492) at 1", "Update SimpleName: getLong(803) to getInt", "Insert SimpleName: rs(1500) into MethodInvocation(1502) at 0", "Insert SimpleName: next(1501) into MethodInvocation(1502) at 1", "Update SimpleName: getLong(811) to getInt", "Update NumberLiteral: 3(812) to 2", "Update SimpleName: getLong(2652) to getBytes", "Insert SimpleName: rs(3093) into MethodInvocation(3096) at 0", "Insert SimpleName: getString(3094) into MethodInvocation(3096) at 1", "Insert NumberLiteral: 1(3095) into MethodInvocation(3096) at 2", "Insert SimpleName: conn(3212) into MethodInvocation(3214) at 0", "Insert SimpleName: createStatement(3213) into MethodInvocation(3214) at 1", "Insert SimpleName: conn(3228) into MethodInvocation(3230) at 0", "Insert SimpleName: createStatement(3229) into MethodInvocation(3230) at 1", "Insert SimpleName: conn(3238) into MethodInvocation(3240) at 0", "Insert SimpleName: createStatement(3239) into MethodInvocation(3240) at 1", "Insert NumberLiteral: 1(3251) into PrefixExpression: -(3252) at 0", "Insert SimpleName: conn(3255) into MethodInvocation(3257) at 0", "Insert SimpleName: createStatement(3256) into MethodInvocation(3257) at 1", "Insert SimpleName: conn(3265) into MethodInvocation(3267) at 0", "Insert SimpleName: createStatement(3266) into MethodInvocation(3267) at 1", "Insert SimpleName: conn(3281) into MethodInvocation(3283) at 0", "Insert SimpleName: createStatement(3282) into MethodInvocation(3283) at 1", "Insert SimpleName: conn(3291) into MethodInvocation(3293) at 0", "Insert SimpleName: createStatement(3292) into MethodInvocation(3293) at 1", "Insert QualifiedName: Long.MAX_VALUE(3303) into InfixExpression: -(3305) at 0", "Insert NumberLiteral: 1(3304) into InfixExpression: -(3305) at 1", "Insert QualifiedName: Long.MAX_VALUE(3306) into InfixExpression: -(3308) at 0", "Insert NumberLiteral: 2(3307) into InfixExpression: -(3308) at 1", "Insert SimpleName: conn(3311) into MethodInvocation(3313) at 0", "Insert SimpleName: createStatement(3312) into MethodInvocation(3313) at 1", "Insert SimpleName: conn(3321) into MethodInvocation(3323) at 0", "Insert SimpleName: createStatement(3322) into MethodInvocation(3323) at 1", "Insert QualifiedName: Long.MIN_VALUE(3333) into InfixExpression: +(3335) at 0", "Insert NumberLiteral: 1(3334) into InfixExpression: +(3335) at 1", "Insert QualifiedName: Long.MIN_VALUE(3336) into InfixExpression: +(3338) at 0", "Insert NumberLiteral: 2(3337) into InfixExpression: +(3338) at 1", "Insert SimpleName: conn(3341) into MethodInvocation(3343) at 0", "Insert SimpleName: createStatement(3342) into MethodInvocation(3343) at 1", "Insert SimpleName: conn(3351) into MethodInvocation(3353) at 0", "Insert SimpleName: createStatement(3352) into MethodInvocation(3353) at 1", "Insert NumberLiteral: 1(3363) into PrefixExpression: -(3364) at 0", "Insert NumberLiteral: 2(3365) into PrefixExpression: -(3366) at 0", "Insert MethodInvocation(3386) into ExpressionStatement(3387) at 0", "Insert MethodInvocation(3389) into ExpressionStatement(3390) at 0", "Insert SimpleType: SQLException(3393) into SingleVariableDeclaration(3395) at 0", "Insert SimpleName: e(3394) into SingleVariableDeclaration(3395) at 1", "Insert ExpressionStatement(3404) into Block(3413) at 0", "Insert ExpressionStatement(3412) into Block(3413) at 1", "Insert MethodInvocation(3421) into ExpressionStatement(3422) at 0", "Insert MethodInvocation(3424) into ExpressionStatement(3425) at 0", "Insert SimpleType: SQLException(3428) into SingleVariableDeclaration(3430) at 0", "Insert SimpleName: e(3429) into SingleVariableDeclaration(3430) at 1", "Insert ExpressionStatement(3439) into Block(3448) at 0", "Insert ExpressionStatement(3447) into Block(3448) at 1", "Insert MethodInvocation(3468) into ExpressionStatement(3469) at 0", "Insert MethodInvocation(3471) into ExpressionStatement(3472) at 0", "Insert SimpleType: SQLException(3475) into SingleVariableDeclaration(3477) at 0", "Insert SimpleName: e(3476) into SingleVariableDeclaration(3477) at 1", "Insert ExpressionStatement(3486) into Block(3495) at 0", "Insert ExpressionStatement(3494) into Block(3495) at 1", "Insert MethodInvocation(3515) into ExpressionStatement(3516) at 0", "Insert MethodInvocation(3518) into ExpressionStatement(3519) at 0", "Insert SimpleType: SQLException(3522) into SingleVariableDeclaration(3524) at 0", "Insert SimpleName: e(3523) into SingleVariableDeclaration(3524) at 1", "Insert ExpressionStatement(3533) into Block(3542) at 0", "Insert ExpressionStatement(3541) into Block(3542) at 1", "Insert MethodInvocation(3562) into ExpressionStatement(3563) at 0", "Insert MethodInvocation(3565) into ExpressionStatement(3566) at 0", "Insert SimpleType: SQLException(3569) into SingleVariableDeclaration(3571) at 0", "Insert SimpleName: e(3570) into SingleVariableDeclaration(3571) at 1", "Insert ExpressionStatement(3580) into Block(3589) at 0", "Insert ExpressionStatement(3588) into Block(3589) at 1", "Insert MethodInvocation(3609) into ExpressionStatement(3610) at 0", "Insert MethodInvocation(3612) into ExpressionStatement(3613) at 0", "Insert SimpleType: SQLException(3616) into SingleVariableDeclaration(3618) at 0", "Insert SimpleName: e(3617) into SingleVariableDeclaration(3618) at 1", "Insert ExpressionStatement(3627) into Block(3636) at 0", "Insert ExpressionStatement(3635) into Block(3636) at 1", "Insert MethodInvocation(3656) into ExpressionStatement(3657) at 0", "Insert MethodInvocation(3659) into ExpressionStatement(3660) at 0", "Insert SimpleType: SQLException(3663) into SingleVariableDeclaration(3665) at 0", "Insert SimpleName: e(3664) into SingleVariableDeclaration(3665) at 1", "Insert ExpressionStatement(3674) into Block(3683) at 0", "Insert ExpressionStatement(3682) into Block(3683) at 1", "Insert SimpleName: conn(3698) into MethodInvocation(3700) at 0", "Insert SimpleName: createStatement(3699) into MethodInvocation(3700) at 1", "Insert SimpleName: conn(3726) into MethodInvocation(3728) at 0", "Insert SimpleName: createStatement(3727) into MethodInvocation(3728) at 1", "Insert SimpleName: conn(3754) into MethodInvocation(3756) at 0", "Insert SimpleName: createStatement(3755) into MethodInvocation(3756) at 1", "Insert SimpleType: ResultSet(3769) into VariableDeclarationStatement(3778) at 0", "Insert VariableDeclarationFragment(3777) into VariableDeclarationStatement(3778) at 1", "Insert MethodInvocation(3781) into ExpressionStatement(3782) at 0", "Insert MethodInvocation(3784) into ExpressionStatement(3785) at 0", "Insert SimpleType: SQLException(3788) into SingleVariableDeclaration(3790) at 0", "Insert SimpleName: e(3789) into SingleVariableDeclaration(3790) at 1", "Insert ExpressionStatement(3799) into Block(3808) at 0", "Insert ExpressionStatement(3807) into Block(3808) at 1", "Insert SimpleName: conn(3823) into MethodInvocation(3825) at 0", "Insert SimpleName: createStatement(3824) into MethodInvocation(3825) at 1", "Insert SimpleType: ResultSet(3838) into VariableDeclarationStatement(3847) at 0", "Insert VariableDeclarationFragment(3846) into VariableDeclarationStatement(3847) at 1", "Insert MethodInvocation(3850) into ExpressionStatement(3851) at 0", "Insert MethodInvocation(3853) into ExpressionStatement(3854) at 0", "Insert SimpleType: SQLException(3857) into SingleVariableDeclaration(3859) at 0", "Insert SimpleName: e(3858) into SingleVariableDeclaration(3859) at 1", "Insert ExpressionStatement(3868) into Block(3877) at 0", "Insert ExpressionStatement(3876) into Block(3877) at 1", "Insert SimpleName: conn(3892) into MethodInvocation(3894) at 0", "Insert SimpleName: createStatement(3893) into MethodInvocation(3894) at 1", "Insert SimpleName: conn(3926) into MethodInvocation(3928) at 0", "Insert SimpleName: createStatement(3927) into MethodInvocation(3928) at 1", "Insert SimpleName: conn(3960) into MethodInvocation(3962) at 0", "Insert SimpleName: createStatement(3961) into MethodInvocation(3962) at 1", "Insert SimpleType: ResultSet(3977) into VariableDeclarationStatement(3986) at 0", "Insert VariableDeclarationFragment(3985) into VariableDeclarationStatement(3986) at 1", "Insert MethodInvocation(3989) into ExpressionStatement(3990) at 0", "Insert MethodInvocation(3992) into ExpressionStatement(3993) at 0", "Insert SimpleType: SQLException(3996) into SingleVariableDeclaration(3998) at 0", "Insert SimpleName: e(3997) into SingleVariableDeclaration(3998) at 1", "Insert ExpressionStatement(4007) into Block(4016) at 0", "Insert ExpressionStatement(4015) into Block(4016) at 1", "Insert SimpleName: conn(4031) into MethodInvocation(4033) at 0", "Insert SimpleName: createStatement(4032) into MethodInvocation(4033) at 1", "Insert SimpleType: ResultSet(4047) into VariableDeclarationStatement(4056) at 0", "Insert VariableDeclarationFragment(4055) into VariableDeclarationStatement(4056) at 1", "Insert MethodInvocation(4059) into ExpressionStatement(4060) at 0", "Insert MethodInvocation(4062) into ExpressionStatement(4063) at 0", "Insert SimpleType: SQLException(4066) into SingleVariableDeclaration(4068) at 0", "Insert SimpleName: e(4067) into SingleVariableDeclaration(4068) at 1", "Insert ExpressionStatement(4077) into Block(4086) at 0", "Insert ExpressionStatement(4085) into Block(4086) at 1", "Insert SimpleName: conn(4101) into MethodInvocation(4103) at 0", "Insert SimpleName: createStatement(4102) into MethodInvocation(4103) at 1", "Insert SimpleType: ResultSet(4117) into VariableDeclarationStatement(4126) at 0", "Insert VariableDeclarationFragment(4125) into VariableDeclarationStatement(4126) at 1", "Insert MethodInvocation(4129) into ExpressionStatement(4130) at 0", "Insert MethodInvocation(4132) into ExpressionStatement(4133) at 0", "Insert SimpleType: SQLException(4136) into SingleVariableDeclaration(4138) at 0", "Insert SimpleName: e(4137) into SingleVariableDeclaration(4138) at 1", "Insert ExpressionStatement(4147) into Block(4156) at 0", "Insert ExpressionStatement(4155) into Block(4156) at 1", "Insert SimpleName: conn(4171) into MethodInvocation(4173) at 0", "Insert SimpleName: createStatement(4172) into MethodInvocation(4173) at 1", "Insert SimpleType: ResultSet(4187) into VariableDeclarationStatement(4196) at 0", "Insert VariableDeclarationFragment(4195) into VariableDeclarationStatement(4196) at 1", "Insert MethodInvocation(4199) into ExpressionStatement(4200) at 0", "Insert MethodInvocation(4202) into ExpressionStatement(4203) at 0", "Insert SimpleType: SQLException(4206) into SingleVariableDeclaration(4208) at 0", "Insert SimpleName: e(4207) into SingleVariableDeclaration(4208) at 1", "Insert ExpressionStatement(4217) into Block(4226) at 0", "Insert ExpressionStatement(4225) into Block(4226) at 1", "Insert SimpleName: conn(4241) into MethodInvocation(4243) at 0", "Insert SimpleName: createStatement(4242) into MethodInvocation(4243) at 1", "Insert SimpleType: ResultSet(4256) into VariableDeclarationStatement(4265) at 0", "Insert VariableDeclarationFragment(4264) into VariableDeclarationStatement(4265) at 1", "Insert MethodInvocation(4268) into ExpressionStatement(4269) at 0", "Insert MethodInvocation(4271) into ExpressionStatement(4272) at 0", "Insert SimpleType: SQLException(4275) into SingleVariableDeclaration(4277) at 0", "Insert SimpleName: e(4276) into SingleVariableDeclaration(4277) at 1", "Insert ExpressionStatement(4286) into Block(4295) at 0", "Insert ExpressionStatement(4294) into Block(4295) at 1", "Insert SimpleName: conn(4310) into MethodInvocation(4312) at 0", "Insert SimpleName: createStatement(4311) into MethodInvocation(4312) at 1", "Insert NumberLiteral: 1(4323) into PrefixExpression: -(4324) at 0", "Insert QualifiedName: Long.MAX_VALUE(4325) into InfixExpression: -(4327) at 0", "Insert NumberLiteral: 1(4326) into InfixExpression: -(4327) at 1", "Insert NumberLiteral: 1(4329) into PrefixExpression: -(4330) at 0", "Insert SimpleName: conn(4345) into MethodInvocation(4347) at 0", "Insert SimpleName: createStatement(4346) into MethodInvocation(4347) at 1", "Insert QualifiedName: Long.MIN_VALUE(4356) into InfixExpression: +(4358) at 0", "Insert NumberLiteral: 1(4357) into InfixExpression: +(4358) at 1", "Insert SimpleType: ResultSet(4363) into VariableDeclarationStatement(4372) at 0", "Insert VariableDeclarationFragment(4371) into VariableDeclarationStatement(4372) at 1", "Insert MethodInvocation(4375) into ExpressionStatement(4376) at 0", "Insert MethodInvocation(4378) into ExpressionStatement(4379) at 0", "Insert SimpleType: SQLException(4382) into SingleVariableDeclaration(4384) at 0", "Insert SimpleName: e(4383) into SingleVariableDeclaration(4384) at 1", "Insert ExpressionStatement(4393) into Block(4402) at 0", "Insert ExpressionStatement(4401) into Block(4402) at 1", "Insert SimpleName: conn(4417) into MethodInvocation(4419) at 0", "Insert SimpleName: createStatement(4418) into MethodInvocation(4419) at 1", "Insert QualifiedName: Long.MIN_VALUE(4428) into InfixExpression: +(4430) at 0", "Insert NumberLiteral: 1(4429) into InfixExpression: +(4430) at 1", "Insert QualifiedName: Long.MIN_VALUE(4433) into InfixExpression: +(4435) at 0", "Insert NumberLiteral: 1(4434) into InfixExpression: +(4435) at 1", "Insert SimpleName: conn(4452) into MethodInvocation(4454) at 0", "Insert SimpleName: createStatement(4453) into MethodInvocation(4454) at 1", "Insert SimpleName: conn(4459) into MethodInvocation(4461) at 0", "Insert SimpleName: createStatement(4460) into MethodInvocation(4461) at 1", "Insert MethodInvocation(4485) into MethodInvocation(4487) at 0", "Insert SimpleName: executeQuery(4486) into MethodInvocation(4487) at 1", "Insert SimpleName: rs(4491) into MethodInvocation(4493) at 0", "Insert SimpleName: next(4492) into MethodInvocation(4493) at 1", "Insert SimpleName: rs(4498) into MethodInvocation(4501) at 0", "Insert SimpleName: getInt(4499) into MethodInvocation(4501) at 1", "Insert NumberLiteral: 1(4500) into MethodInvocation(4501) at 2", "Insert MethodInvocation(4508) into ExpressionStatement(4509) at 0", "Insert MethodInvocation(4511) into ExpressionStatement(4512) at 0", "Insert SimpleType: SQLException(4515) into SingleVariableDeclaration(4517) at 0", "Insert SimpleName: e(4516) into SingleVariableDeclaration(4517) at 1", "Insert ExpressionStatement(4526) into Block(4535) at 0", "Insert ExpressionStatement(4534) into Block(4535) at 1", "Insert Assignment: =(4545) into ExpressionStatement(4546) at 0", "Insert MethodInvocation(4549) into ExpressionStatement(4550) at 0", "Insert MethodInvocation(4552) into ExpressionStatement(4553) at 0", "Insert SimpleType: SQLException(4556) into SingleVariableDeclaration(4558) at 0", "Insert SimpleName: e(4557) into SingleVariableDeclaration(4558) at 1", "Insert ExpressionStatement(4567) into Block(4576) at 0", "Insert ExpressionStatement(4575) into Block(4576) at 1", "Insert SimpleName: conn(4591) into MethodInvocation(4593) at 0", "Insert SimpleName: createStatement(4592) into MethodInvocation(4593) at 1", "Insert SimpleName: conn(4598) into MethodInvocation(4600) at 0", "Insert SimpleName: createStatement(4599) into MethodInvocation(4600) at 1", "Insert SimpleName: conn(4655) into MethodInvocation(4657) at 0", "Insert SimpleName: createStatement(4656) into MethodInvocation(4657) at 1", "Insert SimpleName: conn(4665) into MethodInvocation(4667) at 0", "Insert SimpleName: createStatement(4666) into MethodInvocation(4667) at 1", "Insert SimpleName: conn(4672) into MethodInvocation(4674) at 0", "Insert SimpleName: createStatement(4673) into MethodInvocation(4674) at 1", "Insert SimpleName: conn(4725) into MethodInvocation(4727) at 0", "Insert SimpleName: createStatement(4726) into MethodInvocation(4727) at 1", "Insert SimpleName: conn(4742) into MethodInvocation(4745) at 0", "Insert SimpleName: prepareStatement(4743) into MethodInvocation(4745) at 1", "Insert StringLiteral: \"SELECT metric_id, agg_id, metric_val FROM METRICS\"(4744) into MethodInvocation(4745) at 2", "Insert SimpleName: stmt(4751) into MethodInvocation(4753) at 0", "Insert SimpleName: executeQuery(4752) into MethodInvocation(4753) at 1", "Insert SimpleName: rs(4757) into MethodInvocation(4759) at 0", "Insert SimpleName: next(4758) into MethodInvocation(4759) at 1", "Insert SimpleName: rs(4764) into MethodInvocation(4767) at 0", "Insert SimpleName: getString(4765) into MethodInvocation(4767) at 1", "Insert StringLiteral: \"metric_id\"(4766) into MethodInvocation(4767) at 2", "Insert StringLiteral: \"agg_id\"(4774) into MethodInvocation(4775) at 2", "Insert SimpleName: rs(4780) into MethodInvocation(4783) at 0", "Insert SimpleName: getLong(4781) into MethodInvocation(4783) at 1", "Insert StringLiteral: \"metric_val\"(4782) into MethodInvocation(4783) at 2", "Insert SimpleName: rs(4787) into MethodInvocation(4789) at 0", "Insert SimpleName: next(4788) into MethodInvocation(4789) at 1", "Insert SimpleName: rs(4794) into MethodInvocation(4797) at 0", "Insert SimpleName: getString(4795) into MethodInvocation(4797) at 1", "Insert StringLiteral: \"metric_id\"(4796) into MethodInvocation(4797) at 2", "Insert StringLiteral: \"agg_id\"(4804) into MethodInvocation(4805) at 2", "Insert SimpleName: rs(4810) into MethodInvocation(4813) at 0", "Insert SimpleName: getLong(4811) into MethodInvocation(4813) at 1", "Insert StringLiteral: \"metric_val\"(4812) into MethodInvocation(4813) at 2", "Insert SimpleName: rs(4817) into MethodInvocation(4819) at 0", "Insert SimpleName: next(4818) into MethodInvocation(4819) at 1", "Insert SimpleName: rs(4824) into MethodInvocation(4827) at 0", "Insert SimpleName: getString(4825) into MethodInvocation(4827) at 1", "Insert StringLiteral: \"metric_id\"(4826) into MethodInvocation(4827) at 2", "Insert SimpleName: rs(4832) into MethodInvocation(4835) at 0", "Insert SimpleName: getString(4833) into MethodInvocation(4835) at 1", "Insert StringLiteral: \"agg_id\"(4834) into MethodInvocation(4835) at 2", "Insert SimpleName: rs(4840) into MethodInvocation(4843) at 0", "Insert SimpleName: getLong(4841) into MethodInvocation(4843) at 1", "Insert StringLiteral: \"metric_val\"(4842) into MethodInvocation(4843) at 2", "Insert SimpleName: rs(4847) into MethodInvocation(4849) at 0", "Insert SimpleName: next(4848) into MethodInvocation(4849) at 1", "Insert SimpleName: conn(4872) into MethodInvocation(4875) at 0", "Insert SimpleName: prepareStatement(4873) into MethodInvocation(4875) at 1", "Insert StringLiteral: \"UPSERT INTO events VALUES(?,?,?)\"(4874) into MethodInvocation(4875) at 2", "Insert SimpleName: conn(4919) into MethodInvocation(4922) at 0", "Insert SimpleName: prepareStatement(4920) into MethodInvocation(4922) at 1", "Insert SimpleName: NEXT_VAL_SQL(4921) into MethodInvocation(4922) at 2", "Insert SimpleType: ResultSet(4930) into VariableDeclarationStatement(4936) at 0", "Insert VariableDeclarationFragment(4935) into VariableDeclarationStatement(4936) at 1", "Insert MethodInvocation(4941) into ExpressionStatement(4942) at 0", "Insert MethodInvocation(4949) into ExpressionStatement(4950) at 0", "Insert MethodInvocation(4955) into ExpressionStatement(4956) at 0", "Insert MethodInvocation(4959) into ExpressionStatement(4960) at 0", "Insert SimpleName: conn(4986) into MethodInvocation(4989) at 0", "Insert SimpleName: prepareStatement(4987) into MethodInvocation(4989) at 1", "Insert SimpleName: NEXT_VAL_SQL(4988) into MethodInvocation(4989) at 2", "Insert SimpleName: stmt(4995) into MethodInvocation(4997) at 0", "Insert SimpleName: executeQuery(4996) into MethodInvocation(4997) at 1", "Insert MethodInvocation(5008) into ExpressionStatement(5009) at 0", "Insert MethodInvocation(5016) into ExpressionStatement(5017) at 0", "Insert SimpleName: rs(5021) into MethodInvocation(5023) at 0", "Insert SimpleName: next(5022) into MethodInvocation(5023) at 1", "Insert SimpleName: List(5050) into SimpleType: List(5051) at 0", "Insert SimpleName: String(5052) into SimpleType: String(5053) at 0", "Insert SimpleName: Lists(5056) into MethodInvocation(5059) at 0", "Insert SimpleName: newArrayList(5057) into MethodInvocation(5059) at 1", "Insert SimpleName: expectedExceptions(5058) into MethodInvocation(5059) at 2", "Insert SimpleName: List(5062) into SimpleType: List(5063) at 0", "Insert SimpleName: String(5064) into SimpleType: String(5065) at 0", "Insert SimpleName: Lists(5068) into MethodInvocation(5070) at 0", "Insert SimpleName: newArrayList(5069) into MethodInvocation(5070) at 1", "Insert PrefixExpression: !(5079) into IfStatement(5088) at 0", "Insert Block(5087) into IfStatement(5088) at 1", "Insert MethodInvocation(5094) into ExpressionStatement(5095) at 0", "Insert Assignment: =(5101) into ParenthesizedExpression(5102) at 0", "Insert MethodInvocation(5108) into InfixExpression: !=(5110) at 0", "Insert NumberLiteral: 0(5109) into InfixExpression: !=(5110) at 1", "Insert MethodInvocation(5113) into InfixExpression: !=(5115) at 0", "Insert NumberLiteral: 0(5114) into InfixExpression: !=(5115) at 1", "Insert MethodInvocation(5123) into ExpressionStatement(5124) at 0", "Insert MethodInvocation(401) into ExpressionStatement(402) at 0", "Insert SimpleName: conn(1191) into MethodInvocation(1194) at 0", "Insert SimpleName: prepareStatement(1192) into MethodInvocation(1194) at 1", "Insert SimpleName: query(1193) into MethodInvocation(1194) at 2", "Insert NumberLiteral: 7(1277) into InfixExpression: *(1279) at 0", "Insert NumberLiteral: 2(1278) into InfixExpression: *(1279) at 1", "Insert NumberLiteral: 2(1289) into InfixExpression: *(1291) at 0", "Insert NumberLiteral: 2(1290) into InfixExpression: *(1291) at 1", "Insert SimpleName: rs(1299) into MethodInvocation(1301) at 0", "Insert SimpleName: next(1300) into MethodInvocation(1301) at 1", "Insert SimpleName: fail(1303) into MethodInvocation(1304) at 0", "Insert SimpleName: SQLException(1307) into SimpleType: SQLException(1308) at 0", "Insert SimpleType: SQLException(1312) into VariableDeclarationStatement(1321) at 0", "Insert VariableDeclarationFragment(1320) into VariableDeclarationStatement(1321) at 1", "Insert SimpleType: SQLException(1323) into VariableDeclarationStatement(1332) at 0", "Insert VariableDeclarationFragment(1331) into VariableDeclarationStatement(1332) at 1", "Insert MethodInvocation(1344) into ExpressionStatement(1345) at 0", "Insert NumberLiteral: 7(1477) into InfixExpression: *(1479) at 0", "Insert NumberLiteral: 2(1478) into InfixExpression: *(1479) at 1", "Insert NumberLiteral: 2(1489) into InfixExpression: *(1491) at 0", "Insert NumberLiteral: 2(1490) into InfixExpression: *(1491) at 1", "Insert MethodInvocation(3383) into MethodInvocation(3386) at 0", "Insert SimpleName: execute(3384) into MethodInvocation(3386) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar1 START WITH 1 INCREMENT BY 1 MINVALUE 2 MAXVALUE 3\"(3385) into MethodInvocation(3386) at 2", "Insert SimpleName: fail(3388) into MethodInvocation(3389) at 0", "Insert SimpleName: SQLException(3392) into SimpleType: SQLException(3393) at 0", "Insert MethodInvocation(3403) into ExpressionStatement(3404) at 0", "Insert MethodInvocation(3411) into ExpressionStatement(3412) at 0", "Insert MethodInvocation(3418) into MethodInvocation(3421) at 0", "Insert SimpleName: execute(3419) into MethodInvocation(3421) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar2 START WITH 4 INCREMENT BY 1 MINVALUE 2 MAXVALUE 3\"(3420) into MethodInvocation(3421) at 2", "Insert SimpleName: fail(3423) into MethodInvocation(3424) at 0", "Insert SimpleName: SQLException(3427) into SimpleType: SQLException(3428) at 0", "Insert MethodInvocation(3438) into ExpressionStatement(3439) at 0", "Insert MethodInvocation(3446) into ExpressionStatement(3447) at 0", "Insert MethodInvocation(3465) into MethodInvocation(3468) at 0", "Insert SimpleName: execute(3466) into MethodInvocation(3468) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar MINVALUE abc\"(3467) into MethodInvocation(3468) at 2", "Insert SimpleName: fail(3470) into MethodInvocation(3471) at 0", "Insert SimpleName: SQLException(3474) into SimpleType: SQLException(3475) at 0", "Insert MethodInvocation(3485) into ExpressionStatement(3486) at 0", "Insert MethodInvocation(3493) into ExpressionStatement(3494) at 0", "Insert MethodInvocation(3512) into MethodInvocation(3515) at 0", "Insert SimpleName: execute(3513) into MethodInvocation(3515) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar MAXVALUE null\"(3514) into MethodInvocation(3515) at 2", "Insert SimpleName: fail(3517) into MethodInvocation(3518) at 0", "Insert SimpleName: SQLException(3521) into SimpleType: SQLException(3522) at 0", "Insert MethodInvocation(3532) into ExpressionStatement(3533) at 0", "Insert MethodInvocation(3540) into ExpressionStatement(3541) at 0", "Insert MethodInvocation(3559) into MethodInvocation(3562) at 0", "Insert SimpleName: execute(3560) into MethodInvocation(3562) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar MINVALUE 2 MAXVALUE 1\"(3561) into MethodInvocation(3562) at 2", "Insert SimpleName: fail(3564) into MethodInvocation(3565) at 0", "Insert SimpleName: SQLException(3568) into SimpleType: SQLException(3569) at 0", "Insert MethodInvocation(3579) into ExpressionStatement(3580) at 0", "Insert MethodInvocation(3587) into ExpressionStatement(3588) at 0", "Insert MethodInvocation(3606) into MethodInvocation(3609) at 0", "Insert SimpleName: execute(3607) into MethodInvocation(3609) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar INCREMENT null\"(3608) into MethodInvocation(3609) at 2", "Insert SimpleName: fail(3611) into MethodInvocation(3612) at 0", "Insert SimpleName: SQLException(3615) into SimpleType: SQLException(3616) at 0", "Insert MethodInvocation(3626) into ExpressionStatement(3627) at 0", "Insert MethodInvocation(3634) into ExpressionStatement(3635) at 0", "Insert MethodInvocation(3653) into MethodInvocation(3656) at 0", "Insert SimpleName: execute(3654) into MethodInvocation(3656) at 1", "Insert StringLiteral: \"CREATE SEQUENCE foo.bar INCREMENT 0\"(3655) into MethodInvocation(3656) at 2", "Insert SimpleName: fail(3658) into MethodInvocation(3659) at 0", "Insert SimpleName: SQLException(3662) into SimpleType: SQLException(3663) at 0", "Insert MethodInvocation(3673) into ExpressionStatement(3674) at 0", "Insert MethodInvocation(3681) into ExpressionStatement(3682) at 0", "Insert SimpleName: ResultSet(3768) into SimpleType: ResultSet(3769) at 0", "Insert SimpleName: rs(3770) into VariableDeclarationFragment(3777) at 0", "Insert MethodInvocation(3776) into VariableDeclarationFragment(3777) at 1", "Insert SimpleName: rs(3779) into MethodInvocation(3781) at 0", "Insert SimpleName: next(3780) into MethodInvocation(3781) at 1", "Insert SimpleName: fail(3783) into MethodInvocation(3784) at 0", "Insert SimpleName: SQLException(3787) into SimpleType: SQLException(3788) at 0", "Insert MethodInvocation(3798) into ExpressionStatement(3799) at 0", "Insert MethodInvocation(3806) into ExpressionStatement(3807) at 0", "Insert SimpleName: ResultSet(3837) into SimpleType: ResultSet(3838) at 0", "Insert SimpleName: rs(3839) into VariableDeclarationFragment(3846) at 0", "Insert MethodInvocation(3845) into VariableDeclarationFragment(3846) at 1", "Insert SimpleName: rs(3848) into MethodInvocation(3850) at 0", "Insert SimpleName: next(3849) into MethodInvocation(3850) at 1", "Insert SimpleName: fail(3852) into MethodInvocation(3853) at 0", "Insert SimpleName: SQLException(3856) into SimpleType: SQLException(3857) at 0", "Insert MethodInvocation(3867) into ExpressionStatement(3868) at 0", "Insert MethodInvocation(3875) into ExpressionStatement(3876) at 0", "Insert SimpleName: ResultSet(3976) into SimpleType: ResultSet(3977) at 0", "Insert SimpleName: rs(3978) into VariableDeclarationFragment(3985) at 0", "Insert MethodInvocation(3984) into VariableDeclarationFragment(3985) at 1", "Insert SimpleName: rs(3987) into MethodInvocation(3989) at 0", "Insert SimpleName: next(3988) into MethodInvocation(3989) at 1", "Insert SimpleName: fail(3991) into MethodInvocation(3992) at 0", "Insert SimpleName: SQLException(3995) into SimpleType: SQLException(3996) at 0", "Insert MethodInvocation(4006) into ExpressionStatement(4007) at 0", "Insert MethodInvocation(4014) into ExpressionStatement(4015) at 0", "Insert SimpleName: ResultSet(4046) into SimpleType: ResultSet(4047) at 0", "Insert SimpleName: rs(4048) into VariableDeclarationFragment(4055) at 0", "Insert MethodInvocation(4054) into VariableDeclarationFragment(4055) at 1", "Insert SimpleName: rs(4057) into MethodInvocation(4059) at 0", "Insert SimpleName: next(4058) into MethodInvocation(4059) at 1", "Insert SimpleName: fail(4061) into MethodInvocation(4062) at 0", "Insert SimpleName: SQLException(4065) into SimpleType: SQLException(4066) at 0", "Insert MethodInvocation(4076) into ExpressionStatement(4077) at 0", "Insert MethodInvocation(4084) into ExpressionStatement(4085) at 0", "Insert SimpleName: ResultSet(4116) into SimpleType: ResultSet(4117) at 0", "Insert SimpleName: rs(4118) into VariableDeclarationFragment(4125) at 0", "Insert MethodInvocation(4124) into VariableDeclarationFragment(4125) at 1", "Insert SimpleName: rs(4127) into MethodInvocation(4129) at 0", "Insert SimpleName: next(4128) into MethodInvocation(4129) at 1", "Insert SimpleName: fail(4131) into MethodInvocation(4132) at 0", "Insert SimpleName: SQLException(4135) into SimpleType: SQLException(4136) at 0", "Insert MethodInvocation(4146) into ExpressionStatement(4147) at 0", "Insert MethodInvocation(4154) into ExpressionStatement(4155) at 0", "Insert SimpleName: ResultSet(4186) into SimpleType: ResultSet(4187) at 0", "Insert SimpleName: rs(4188) into VariableDeclarationFragment(4195) at 0", "Insert MethodInvocation(4194) into VariableDeclarationFragment(4195) at 1", "Insert SimpleName: rs(4197) into MethodInvocation(4199) at 0", "Insert SimpleName: next(4198) into MethodInvocation(4199) at 1", "Insert SimpleName: fail(4201) into MethodInvocation(4202) at 0", "Insert SimpleName: SQLException(4205) into SimpleType: SQLException(4206) at 0", "Insert MethodInvocation(4216) into ExpressionStatement(4217) at 0", "Insert MethodInvocation(4224) into ExpressionStatement(4225) at 0", "Insert SimpleName: ResultSet(4255) into SimpleType: ResultSet(4256) at 0", "Insert SimpleName: rs(4257) into VariableDeclarationFragment(4264) at 0", "Insert MethodInvocation(4263) into VariableDeclarationFragment(4264) at 1", "Insert SimpleName: rs(4266) into MethodInvocation(4268) at 0", "Insert SimpleName: next(4267) into MethodInvocation(4268) at 1", "Insert SimpleName: fail(4270) into MethodInvocation(4271) at 0", "Insert SimpleName: SQLException(4274) into SimpleType: SQLException(4275) at 0", "Insert MethodInvocation(4285) into ExpressionStatement(4286) at 0", "Insert MethodInvocation(4293) into ExpressionStatement(4294) at 0", "Insert SimpleName: ResultSet(4362) into SimpleType: ResultSet(4363) at 0", "Insert SimpleName: rs(4364) into VariableDeclarationFragment(4371) at 0", "Insert MethodInvocation(4370) into VariableDeclarationFragment(4371) at 1", "Insert SimpleName: rs(4373) into MethodInvocation(4375) at 0", "Insert SimpleName: next(4374) into MethodInvocation(4375) at 1", "Insert SimpleName: fail(4377) into MethodInvocation(4378) at 0", "Insert SimpleName: SQLException(4381) into SimpleType: SQLException(4382) at 0", "Insert MethodInvocation(4392) into ExpressionStatement(4393) at 0", "Insert MethodInvocation(4400) into ExpressionStatement(4401) at 0", "Insert SimpleName: conn(4482) into MethodInvocation(4485) at 0", "Insert SimpleName: prepareStatement(4483) into MethodInvocation(4485) at 1", "Insert SimpleName: NEXT_VAL_SQL(4484) into MethodInvocation(4485) at 2", "Insert SimpleName: assertTrue(4504) into MethodInvocation(4508) at 0", "Insert MethodInvocation(4507) into MethodInvocation(4508) at 1", "Insert SimpleName: fail(4510) into MethodInvocation(4511) at 0", "Insert SimpleName: SQLException(4514) into SimpleType: SQLException(4515) at 0", "Insert MethodInvocation(4525) into ExpressionStatement(4526) at 0", "Insert MethodInvocation(4533) into ExpressionStatement(4534) at 0", "Insert SimpleName: rs(4538) into Assignment: =(4545) at 0", "Insert MethodInvocation(4544) into Assignment: =(4545) at 1", "Insert SimpleName: rs(4547) into MethodInvocation(4549) at 0", "Insert SimpleName: next(4548) into MethodInvocation(4549) at 1", "Insert SimpleName: fail(4551) into MethodInvocation(4552) at 0", "Insert SimpleName: SQLException(4555) into SimpleType: SQLException(4556) at 0", "Insert MethodInvocation(4566) into ExpressionStatement(4567) at 0", "Insert MethodInvocation(4574) into ExpressionStatement(4575) at 0", "Insert SimpleName: ResultSet(4929) into SimpleType: ResultSet(4930) at 0", "Insert SimpleName: rs(4931) into VariableDeclarationFragment(4935) at 0", "Insert MethodInvocation(4934) into VariableDeclarationFragment(4935) at 1", "Insert SimpleName: assertTrue(4937) into MethodInvocation(4941) at 0", "Insert MethodInvocation(4940) into MethodInvocation(4941) at 1", "Insert SimpleName: assertEquals(4943) into MethodInvocation(4949) at 0", "Insert SimpleName: seqVal(4944) into MethodInvocation(4949) at 1", "Insert MethodInvocation(4948) into MethodInvocation(4949) at 2", "Insert SimpleName: assertFalse(4951) into MethodInvocation(4955) at 0", "Insert MethodInvocation(4954) into MethodInvocation(4955) at 1", "Insert SimpleName: rs(4957) into MethodInvocation(4959) at 0", "Insert SimpleName: close(4958) into MethodInvocation(4959) at 1", "Insert SimpleName: assertTrue(5004) into MethodInvocation(5008) at 0", "Insert MethodInvocation(5007) into MethodInvocation(5008) at 1", "Insert SimpleName: assertEquals(5010) into MethodInvocation(5016) at 0", "Insert SimpleName: seqVal(5011) into MethodInvocation(5016) at 1", "Insert MethodInvocation(5015) into MethodInvocation(5016) at 2", "Insert MethodInvocation(5078) into PrefixExpression: !(5079) at 0", "Insert ExpressionStatement(5086) into Block(5087) at 0", "Insert SimpleName: missingExceptions(5089) into MethodInvocation(5094) at 0", "Insert SimpleName: remove(5090) into MethodInvocation(5094) at 1", "Insert MethodInvocation(5093) into MethodInvocation(5094) at 2", "Insert SimpleName: sqlE(5097) into Assignment: =(5101) at 0", "Insert MethodInvocation(5100) into Assignment: =(5101) at 1", "Insert SimpleName: unexpectedExceptions(5106) into MethodInvocation(5108) at 0", "Insert SimpleName: size(5107) into MethodInvocation(5108) at 1", "Insert SimpleName: missingExceptions(5111) into MethodInvocation(5113) at 0", "Insert SimpleName: size(5112) into MethodInvocation(5113) at 1", "Insert SimpleName: fail(5117) into MethodInvocation(5123) at 0", "Insert InfixExpression: +(5122) into MethodInvocation(5123) at 1", "Insert SimpleName: assertTrue(395) into MethodInvocation(401) at 0", "Insert InfixExpression: ==(400) into MethodInvocation(401) at 1", "Insert SimpleName: SQLException(1311) into SimpleType: SQLException(1312) at 0", "Insert SimpleName: sqlEx1(1313) into VariableDeclarationFragment(1320) at 0", "Insert MethodInvocation(1319) into VariableDeclarationFragment(1320) at 1", "Insert SimpleName: SQLException(1322) into SimpleType: SQLException(1323) at 0", "Insert SimpleName: sqlEx2(1324) into VariableDeclarationFragment(1331) at 0", "Insert MethodInvocation(1330) into VariableDeclarationFragment(1331) at 1", "Insert SimpleName: verifyExceptions(1333) into MethodInvocation(1344) at 0", "Insert SimpleName: e(1334) into MethodInvocation(1344) at 1", "Insert MethodInvocation(1343) into MethodInvocation(1344) at 2", "Insert SimpleName: conn(3381) into MethodInvocation(3383) at 0", "Insert SimpleName: createStatement(3382) into MethodInvocation(3383) at 1", "Insert SimpleName: assertEquals(3396) into MethodInvocation(3403) at 0", "Insert MethodInvocation(3399) into MethodInvocation(3403) at 1", "Insert MethodInvocation(3402) into MethodInvocation(3403) at 2", "Insert SimpleName: assertTrue(3405) into MethodInvocation(3411) at 0", "Insert InfixExpression: ==(3410) into MethodInvocation(3411) at 1", "Insert SimpleName: conn(3416) into MethodInvocation(3418) at 0", "Insert SimpleName: createStatement(3417) into MethodInvocation(3418) at 1", "Insert SimpleName: assertEquals(3431) into MethodInvocation(3438) at 0", "Insert MethodInvocation(3434) into MethodInvocation(3438) at 1", "Insert MethodInvocation(3437) into MethodInvocation(3438) at 2", "Insert SimpleName: assertTrue(3440) into MethodInvocation(3446) at 0", "Insert InfixExpression: ==(3445) into MethodInvocation(3446) at 1", "Insert SimpleName: conn(3463) into MethodInvocation(3465) at 0", "Insert SimpleName: createStatement(3464) into MethodInvocation(3465) at 1", "Insert SimpleName: assertEquals(3478) into MethodInvocation(3485) at 0", "Insert MethodInvocation(3481) into MethodInvocation(3485) at 1", "Insert MethodInvocation(3484) into MethodInvocation(3485) at 2", "Insert SimpleName: assertTrue(3487) into MethodInvocation(3493) at 0", "Insert InfixExpression: ==(3492) into MethodInvocation(3493) at 1", "Insert SimpleName: conn(3510) into MethodInvocation(3512) at 0", "Insert SimpleName: createStatement(3511) into MethodInvocation(3512) at 1", "Insert SimpleName: assertEquals(3525) into MethodInvocation(3532) at 0", "Insert MethodInvocation(3528) into MethodInvocation(3532) at 1", "Insert MethodInvocation(3531) into MethodInvocation(3532) at 2", "Insert SimpleName: assertTrue(3534) into MethodInvocation(3540) at 0", "Insert InfixExpression: ==(3539) into MethodInvocation(3540) at 1", "Insert SimpleName: conn(3557) into MethodInvocation(3559) at 0", "Insert SimpleName: createStatement(3558) into MethodInvocation(3559) at 1", "Insert SimpleName: assertEquals(3572) into MethodInvocation(3579) at 0", "Insert MethodInvocation(3575) into MethodInvocation(3579) at 1", "Insert MethodInvocation(3578) into MethodInvocation(3579) at 2", "Insert SimpleName: assertTrue(3581) into MethodInvocation(3587) at 0", "Insert InfixExpression: ==(3586) into MethodInvocation(3587) at 1", "Insert SimpleName: conn(3604) into MethodInvocation(3606) at 0", "Insert SimpleName: createStatement(3605) into MethodInvocation(3606) at 1", "Insert SimpleName: assertEquals(3619) into MethodInvocation(3626) at 0", "Insert MethodInvocation(3622) into MethodInvocation(3626) at 1", "Insert MethodInvocation(3625) into MethodInvocation(3626) at 2", "Insert SimpleName: assertTrue(3628) into MethodInvocation(3634) at 0", "Insert InfixExpression: ==(3633) into MethodInvocation(3634) at 1", "Insert SimpleName: conn(3651) into MethodInvocation(3653) at 0", "Insert SimpleName: createStatement(3652) into MethodInvocation(3653) at 1", "Insert SimpleName: assertEquals(3666) into MethodInvocation(3673) at 0", "Insert MethodInvocation(3669) into MethodInvocation(3673) at 1", "Insert MethodInvocation(3672) into MethodInvocation(3673) at 2", "Insert SimpleName: assertTrue(3675) into MethodInvocation(3681) at 0", "Insert InfixExpression: ==(3680) into MethodInvocation(3681) at 1", "Insert MethodInvocation(3773) into MethodInvocation(3776) at 0", "Insert SimpleName: executeQuery(3774) into MethodInvocation(3776) at 1", "Insert SimpleName: NEXT_VAL_SQL(3775) into MethodInvocation(3776) at 2", "Insert SimpleName: assertEquals(3791) into MethodInvocation(3798) at 0", "Insert MethodInvocation(3794) into MethodInvocation(3798) at 1", "Insert MethodInvocation(3797) into MethodInvocation(3798) at 2", "Insert SimpleName: assertTrue(3800) into MethodInvocation(3806) at 0", "Insert InfixExpression: ==(3805) into MethodInvocation(3806) at 1", "Insert MethodInvocation(3842) into MethodInvocation(3845) at 0", "Insert SimpleName: executeQuery(3843) into MethodInvocation(3845) at 1", "Insert SimpleName: NEXT_VAL_SQL(3844) into MethodInvocation(3845) at 2", "Insert SimpleName: assertEquals(3860) into MethodInvocation(3867) at 0", "Insert MethodInvocation(3863) into MethodInvocation(3867) at 1", "Insert MethodInvocation(3866) into MethodInvocation(3867) at 2", "Insert SimpleName: assertTrue(3869) into MethodInvocation(3875) at 0", "Insert InfixExpression: ==(3874) into MethodInvocation(3875) at 1", "Insert MethodInvocation(3981) into MethodInvocation(3984) at 0", "Insert SimpleName: executeQuery(3982) into MethodInvocation(3984) at 1", "Insert SimpleName: NEXT_VAL_SQL(3983) into MethodInvocation(3984) at 2", "Insert SimpleName: assertEquals(3999) into MethodInvocation(4006) at 0", "Insert MethodInvocation(4002) into MethodInvocation(4006) at 1", "Insert MethodInvocation(4005) into MethodInvocation(4006) at 2", "Insert SimpleName: assertTrue(4008) into MethodInvocation(4014) at 0", "Insert InfixExpression: ==(4013) into MethodInvocation(4014) at 1", "Insert MethodInvocation(4051) into MethodInvocation(4054) at 0", "Insert SimpleName: executeQuery(4052) into MethodInvocation(4054) at 1", "Insert SimpleName: NEXT_VAL_SQL(4053) into MethodInvocation(4054) at 2", "Insert SimpleName: assertEquals(4069) into MethodInvocation(4076) at 0", "Insert MethodInvocation(4072) into MethodInvocation(4076) at 1", "Insert MethodInvocation(4075) into MethodInvocation(4076) at 2", "Insert SimpleName: assertTrue(4078) into MethodInvocation(4084) at 0", "Insert InfixExpression: ==(4083) into MethodInvocation(4084) at 1", "Insert MethodInvocation(4121) into MethodInvocation(4124) at 0", "Insert SimpleName: executeQuery(4122) into MethodInvocation(4124) at 1", "Insert SimpleName: NEXT_VAL_SQL(4123) into MethodInvocation(4124) at 2", "Insert SimpleName: assertEquals(4139) into MethodInvocation(4146) at 0", "Insert MethodInvocation(4142) into MethodInvocation(4146) at 1", "Insert MethodInvocation(4145) into MethodInvocation(4146) at 2", "Insert SimpleName: assertTrue(4148) into MethodInvocation(4154) at 0", "Insert InfixExpression: ==(4153) into MethodInvocation(4154) at 1", "Insert MethodInvocation(4191) into MethodInvocation(4194) at 0", "Insert SimpleName: executeQuery(4192) into MethodInvocation(4194) at 1", "Insert SimpleName: NEXT_VAL_SQL(4193) into MethodInvocation(4194) at 2", "Insert SimpleName: assertEquals(4209) into MethodInvocation(4216) at 0", "Insert MethodInvocation(4212) into MethodInvocation(4216) at 1", "Insert MethodInvocation(4215) into MethodInvocation(4216) at 2", "Insert SimpleName: assertTrue(4218) into MethodInvocation(4224) at 0", "Insert InfixExpression: ==(4223) into MethodInvocation(4224) at 1", "Insert MethodInvocation(4260) into MethodInvocation(4263) at 0", "Insert SimpleName: executeQuery(4261) into MethodInvocation(4263) at 1", "Insert SimpleName: NEXT_VAL_SQL(4262) into MethodInvocation(4263) at 2", "Insert SimpleName: assertEquals(4278) into MethodInvocation(4285) at 0", "Insert MethodInvocation(4281) into MethodInvocation(4285) at 1", "Insert MethodInvocation(4284) into MethodInvocation(4285) at 2", "Insert SimpleName: assertTrue(4287) into MethodInvocation(4293) at 0", "Insert InfixExpression: ==(4292) into MethodInvocation(4293) at 1", "Insert MethodInvocation(4367) into MethodInvocation(4370) at 0", "Insert SimpleName: executeQuery(4368) into MethodInvocation(4370) at 1", "Insert SimpleName: NEXT_VAL_SQL(4369) into MethodInvocation(4370) at 2", "Insert SimpleName: assertEquals(4385) into MethodInvocation(4392) at 0", "Insert MethodInvocation(4388) into MethodInvocation(4392) at 1", "Insert MethodInvocation(4391) into MethodInvocation(4392) at 2", "Insert SimpleName: assertTrue(4394) into MethodInvocation(4400) at 0", "Insert InfixExpression: ==(4399) into MethodInvocation(4400) at 1", "Insert SimpleName: rs(4505) into MethodInvocation(4507) at 0", "Insert SimpleName: next(4506) into MethodInvocation(4507) at 1", "Insert SimpleName: assertEquals(4518) into MethodInvocation(4525) at 0", "Insert MethodInvocation(4521) into MethodInvocation(4525) at 1", "Insert MethodInvocation(4524) into MethodInvocation(4525) at 2", "Insert SimpleName: assertTrue(4527) into MethodInvocation(4533) at 0", "Insert InfixExpression: ==(4532) into MethodInvocation(4533) at 1", "Insert MethodInvocation(4542) into MethodInvocation(4544) at 0", "Insert SimpleName: executeQuery(4543) into MethodInvocation(4544) at 1", "Insert SimpleName: assertEquals(4559) into MethodInvocation(4566) at 0", "Insert MethodInvocation(4562) into MethodInvocation(4566) at 1", "Insert MethodInvocation(4565) into MethodInvocation(4566) at 2", "Insert SimpleName: assertTrue(4568) into MethodInvocation(4574) at 0", "Insert InfixExpression: ==(4573) into MethodInvocation(4574) at 1", "Insert SimpleName: stmt(4932) into MethodInvocation(4934) at 0", "Insert SimpleName: executeQuery(4933) into MethodInvocation(4934) at 1", "Insert SimpleName: rs(4938) into MethodInvocation(4940) at 0", "Insert SimpleName: next(4939) into MethodInvocation(4940) at 1", "Insert SimpleName: rs(4945) into MethodInvocation(4948) at 0", "Insert SimpleName: getLong(4946) into MethodInvocation(4948) at 1", "Insert NumberLiteral: 1(4947) into MethodInvocation(4948) at 2", "Insert SimpleName: rs(4952) into MethodInvocation(4954) at 0", "Insert SimpleName: next(4953) into MethodInvocation(4954) at 1", "Insert SimpleName: rs(5005) into MethodInvocation(5007) at 0", "Insert SimpleName: next(5006) into MethodInvocation(5007) at 1", "Insert SimpleName: rs(5012) into MethodInvocation(5015) at 0", "Insert SimpleName: getLong(5013) into MethodInvocation(5015) at 1", "Insert NumberLiteral: 1(5014) into MethodInvocation(5015) at 2", "Insert SimpleName: expectedExceptions(5073) into MethodInvocation(5078) at 0", "Insert SimpleName: contains(5074) into MethodInvocation(5078) at 1", "Insert MethodInvocation(5077) into MethodInvocation(5078) at 2", "Insert MethodInvocation(5085) into ExpressionStatement(5086) at 0", "Insert SimpleName: sqlE(5091) into MethodInvocation(5093) at 0", "Insert SimpleName: getMessage(5092) into MethodInvocation(5093) at 1", "Insert SimpleName: sqlE(5098) into MethodInvocation(5100) at 0", "Insert SimpleName: getNextException(5099) into MethodInvocation(5100) at 1", "Insert StringLiteral: \"Actual exceptions does not match expected exceptions. Unexpected exceptions : \"(5118) into InfixExpression: +(5122) at 0", "Insert SimpleName: unexpectedExceptions(5119) into InfixExpression: +(5122) at 1", "Insert StringLiteral: \" missing exceptions : \"(5120) into InfixExpression: +(5122) at 2", "Insert SimpleName: missingExceptions(5121) into InfixExpression: +(5122) at 3", "Insert MethodInvocation(398) into InfixExpression: ==(400) at 0", "Insert NullLiteral(399) into InfixExpression: ==(400) at 1", "Insert SimpleName: SequenceUtil(1314) into MethodInvocation(1319) at 0", "Insert SimpleName: getException(1315) into MethodInvocation(1319) at 1", "Insert StringLiteral: \"ALPHA\"(1316) into MethodInvocation(1319) at 2", "Insert StringLiteral: \"ZETA\"(1317) into MethodInvocation(1319) at 3", "Insert QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MAX_VALUE(1318) into MethodInvocation(1319) at 4", "Insert SimpleName: SequenceUtil(1325) into MethodInvocation(1330) at 0", "Insert SimpleName: getException(1326) into MethodInvocation(1330) at 1", "Insert StringLiteral: \"ALPHA\"(1327) into MethodInvocation(1330) at 2", "Insert StringLiteral: \"KAPPA\"(1328) into MethodInvocation(1330) at 3", "Insert QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MIN_VALUE(1329) into MethodInvocation(1330) at 4", "Insert SimpleName: Lists(1335) into MethodInvocation(1343) at 0", "Insert SimpleName: newArrayList(1336) into MethodInvocation(1343) at 1", "Insert MethodInvocation(1339) into MethodInvocation(1343) at 2", "Insert MethodInvocation(1342) into MethodInvocation(1343) at 3", "Insert QualifiedName: SQLExceptionCode.STARTS_WITH_MUST_BE_BETWEEN_MIN_MAX_VALUE(3397) into MethodInvocation(3399) at 0", "Insert SimpleName: getErrorCode(3398) into MethodInvocation(3399) at 1", "Insert SimpleName: e(3400) into MethodInvocation(3402) at 0", "Insert SimpleName: getErrorCode(3401) into MethodInvocation(3402) at 1", "Insert MethodInvocation(3408) into InfixExpression: ==(3410) at 0", "Insert NullLiteral(3409) into InfixExpression: ==(3410) at 1", "Insert QualifiedName: SQLExceptionCode.STARTS_WITH_MUST_BE_BETWEEN_MIN_MAX_VALUE(3432) into MethodInvocation(3434) at 0", "Insert SimpleName: getErrorCode(3433) into MethodInvocation(3434) at 1", "Insert SimpleName: e(3435) into MethodInvocation(3437) at 0", "Insert SimpleName: getErrorCode(3436) into MethodInvocation(3437) at 1", "Insert MethodInvocation(3443) into InfixExpression: ==(3445) at 0", "Insert NullLiteral(3444) into InfixExpression: ==(3445) at 1", "Insert QualifiedName: SQLExceptionCode.MINVALUE_MUST_BE_CONSTANT(3479) into MethodInvocation(3481) at 0", "Insert SimpleName: getErrorCode(3480) into MethodInvocation(3481) at 1", "Insert SimpleName: e(3482) into MethodInvocation(3484) at 0", "Insert SimpleName: getErrorCode(3483) into MethodInvocation(3484) at 1", "Insert MethodInvocation(3490) into InfixExpression: ==(3492) at 0", "Insert NullLiteral(3491) into InfixExpression: ==(3492) at 1", "Insert QualifiedName: SQLExceptionCode.MAXVALUE_MUST_BE_CONSTANT(3526) into MethodInvocation(3528) at 0", "Insert SimpleName: getErrorCode(3527) into MethodInvocation(3528) at 1", "Insert SimpleName: e(3529) into MethodInvocation(3531) at 0", "Insert SimpleName: getErrorCode(3530) into MethodInvocation(3531) at 1", "Insert MethodInvocation(3537) into InfixExpression: ==(3539) at 0", "Insert NullLiteral(3538) into InfixExpression: ==(3539) at 1", "Insert QualifiedName: SQLExceptionCode.MINVALUE_MUST_BE_LESS_THAN_OR_EQUAL_TO_MAXVALUE(3573) into MethodInvocation(3575) at 0", "Insert SimpleName: getErrorCode(3574) into MethodInvocation(3575) at 1", "Insert SimpleName: e(3576) into MethodInvocation(3578) at 0", "Insert SimpleName: getErrorCode(3577) into MethodInvocation(3578) at 1", "Insert MethodInvocation(3584) into InfixExpression: ==(3586) at 0", "Insert NullLiteral(3585) into InfixExpression: ==(3586) at 1", "Insert QualifiedName: SQLExceptionCode.INCREMENT_BY_MUST_BE_CONSTANT(3620) into MethodInvocation(3622) at 0", "Insert SimpleName: getErrorCode(3621) into MethodInvocation(3622) at 1", "Insert SimpleName: e(3623) into MethodInvocation(3625) at 0", "Insert SimpleName: getErrorCode(3624) into MethodInvocation(3625) at 1", "Insert MethodInvocation(3631) into InfixExpression: ==(3633) at 0", "Insert NullLiteral(3632) into InfixExpression: ==(3633) at 1", "Insert QualifiedName: SQLExceptionCode.INCREMENT_BY_MUST_NOT_BE_ZERO(3667) into MethodInvocation(3669) at 0", "Insert SimpleName: getErrorCode(3668) into MethodInvocation(3669) at 1", "Insert SimpleName: e(3670) into MethodInvocation(3672) at 0", "Insert SimpleName: getErrorCode(3671) into MethodInvocation(3672) at 1", "Insert MethodInvocation(3678) into InfixExpression: ==(3680) at 0", "Insert NullLiteral(3679) into InfixExpression: ==(3680) at 1", "Insert SimpleName: conn(3771) into MethodInvocation(3773) at 0", "Insert SimpleName: createStatement(3772) into MethodInvocation(3773) at 1", "Insert QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MAX_VALUE(3792) into MethodInvocation(3794) at 0", "Insert SimpleName: getErrorCode(3793) into MethodInvocation(3794) at 1", "Insert SimpleName: e(3795) into MethodInvocation(3797) at 0", "Insert SimpleName: getErrorCode(3796) into MethodInvocation(3797) at 1", "Insert MethodInvocation(3803) into InfixExpression: ==(3805) at 0", "Insert NullLiteral(3804) into InfixExpression: ==(3805) at 1", "Insert SimpleName: conn(3840) into MethodInvocation(3842) at 0", "Insert SimpleName: createStatement(3841) into MethodInvocation(3842) at 1", "Insert QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MIN_VALUE(3861) into MethodInvocation(3863) at 0", "Insert SimpleName: getErrorCode(3862) into MethodInvocation(3863) at 1", "Insert SimpleName: e(3864) into MethodInvocation(3866) at 0", "Insert SimpleName: getErrorCode(3865) into MethodInvocation(3866) at 1", "Insert MethodInvocation(3872) into InfixExpression: ==(3874) at 0", "Insert NullLiteral(3873) into InfixExpression: ==(3874) at 1", "Insert SimpleName: conn(3979) into MethodInvocation(3981) at 0", "Insert SimpleName: createStatement(3980) into MethodInvocation(3981) at 1", "Insert QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MAX_VALUE(4000) into MethodInvocation(4002) at 0", "Insert SimpleName: getErrorCode(4001) into MethodInvocation(4002) at 1", "Insert SimpleName: e(4003) into MethodInvocation(4005) at 0", "Insert SimpleName: getErrorCode(4004) into MethodInvocation(4005) at 1", "Insert MethodInvocation(4011) into InfixExpression: ==(4013) at 0", "Insert NullLiteral(4012) into InfixExpression: ==(4013) at 1", "Insert SimpleName: conn(4049) into MethodInvocation(4051) at 0", "Insert SimpleName: createStatement(4050) into MethodInvocation(4051) at 1", "Insert QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MAX_VALUE(4070) into MethodInvocation(4072) at 0", "Insert SimpleName: getErrorCode(4071) into MethodInvocation(4072) at 1", "Insert SimpleName: e(4073) into MethodInvocation(4075) at 0", "Insert SimpleName: getErrorCode(4074) into MethodInvocation(4075) at 1", "Insert MethodInvocation(4081) into InfixExpression: ==(4083) at 0", "Insert NullLiteral(4082) into InfixExpression: ==(4083) at 1", "Insert SimpleName: conn(4119) into MethodInvocation(4121) at 0", "Insert SimpleName: createStatement(4120) into MethodInvocation(4121) at 1", "Insert QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MIN_VALUE(4140) into MethodInvocation(4142) at 0", "Insert SimpleName: getErrorCode(4141) into MethodInvocation(4142) at 1", "Insert SimpleName: e(4143) into MethodInvocation(4145) at 0", "Insert SimpleName: getErrorCode(4144) into MethodInvocation(4145) at 1", "Insert MethodInvocation(4151) into InfixExpression: ==(4153) at 0", "Insert NullLiteral(4152) into InfixExpression: ==(4153) at 1", "Insert SimpleName: conn(4189) into MethodInvocation(4191) at 0", "Insert SimpleName: createStatement(4190) into MethodInvocation(4191) at 1", "Insert QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MIN_VALUE(4210) into MethodInvocation(4212) at 0", "Insert SimpleName: getErrorCode(4211) into MethodInvocation(4212) at 1", "Insert SimpleName: e(4213) into MethodInvocation(4215) at 0", "Insert SimpleName: getErrorCode(4214) into MethodInvocation(4215) at 1", "Insert MethodInvocation(4221) into InfixExpression: ==(4223) at 0", "Insert NullLiteral(4222) into InfixExpression: ==(4223) at 1", "Insert SimpleName: conn(4258) into MethodInvocation(4260) at 0", "Insert SimpleName: createStatement(4259) into MethodInvocation(4260) at 1", "Insert QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MAX_VALUE(4279) into MethodInvocation(4281) at 0", "Insert SimpleName: getErrorCode(4280) into MethodInvocation(4281) at 1", "Insert SimpleName: e(4282) into MethodInvocation(4284) at 0", "Insert SimpleName: getErrorCode(4283) into MethodInvocation(4284) at 1", "Insert MethodInvocation(4290) into InfixExpression: ==(4292) at 0", "Insert NullLiteral(4291) into InfixExpression: ==(4292) at 1", "Insert SimpleName: conn(4365) into MethodInvocation(4367) at 0", "Insert SimpleName: createStatement(4366) into MethodInvocation(4367) at 1", "Insert QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MIN_VALUE(4386) into MethodInvocation(4388) at 0", "Insert SimpleName: getErrorCode(4387) into MethodInvocation(4388) at 1", "Insert SimpleName: e(4389) into MethodInvocation(4391) at 0", "Insert SimpleName: getErrorCode(4390) into MethodInvocation(4391) at 1", "Insert MethodInvocation(4397) into InfixExpression: ==(4399) at 0", "Insert NullLiteral(4398) into InfixExpression: ==(4399) at 1", "Insert QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MAX_VALUE(4519) into MethodInvocation(4521) at 0", "Insert SimpleName: getErrorCode(4520) into MethodInvocation(4521) at 1", "Insert SimpleName: e(4522) into MethodInvocation(4524) at 0", "Insert SimpleName: getErrorCode(4523) into MethodInvocation(4524) at 1", "Insert MethodInvocation(4530) into InfixExpression: ==(4532) at 0", "Insert NullLiteral(4531) into InfixExpression: ==(4532) at 1", "Insert SimpleName: conn(4539) into MethodInvocation(4542) at 0", "Insert SimpleName: prepareStatement(4540) into MethodInvocation(4542) at 1", "Insert SimpleName: NEXT_VAL_SQL(4541) into MethodInvocation(4542) at 2", "Insert QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MAX_VALUE(4560) into MethodInvocation(4562) at 0", "Insert SimpleName: getErrorCode(4561) into MethodInvocation(4562) at 1", "Insert SimpleName: e(4563) into MethodInvocation(4565) at 0", "Insert SimpleName: getErrorCode(4564) into MethodInvocation(4565) at 1", "Insert MethodInvocation(4571) into InfixExpression: ==(4573) at 0", "Insert NullLiteral(4572) into InfixExpression: ==(4573) at 1", "Insert SimpleName: sqlE(5075) into MethodInvocation(5077) at 0", "Insert SimpleName: getMessage(5076) into MethodInvocation(5077) at 1", "Insert SimpleName: unexpectedExceptions(5080) into MethodInvocation(5085) at 0", "Insert SimpleName: add(5081) into MethodInvocation(5085) at 1", "Insert MethodInvocation(5084) into MethodInvocation(5085) at 2", "Insert SimpleName: e(396) into MethodInvocation(398) at 0", "Insert SimpleName: getNextException(397) into MethodInvocation(398) at 1", "Insert SimpleName: sqlEx1(1337) into MethodInvocation(1339) at 0", "Insert SimpleName: getMessage(1338) into MethodInvocation(1339) at 1", "Insert SimpleName: sqlEx2(1340) into MethodInvocation(1342) at 0", "Insert SimpleName: getMessage(1341) into MethodInvocation(1342) at 1", "Insert SimpleName: e(3406) into MethodInvocation(3408) at 0", "Insert SimpleName: getNextException(3407) into MethodInvocation(3408) at 1", "Insert SimpleName: e(3441) into MethodInvocation(3443) at 0", "Insert SimpleName: getNextException(3442) into MethodInvocation(3443) at 1", "Insert SimpleName: e(3488) into MethodInvocation(3490) at 0", "Insert SimpleName: getNextException(3489) into MethodInvocation(3490) at 1", "Insert SimpleName: e(3535) into MethodInvocation(3537) at 0", "Insert SimpleName: getNextException(3536) into MethodInvocation(3537) at 1", "Insert SimpleName: e(3582) into MethodInvocation(3584) at 0", "Insert SimpleName: getNextException(3583) into MethodInvocation(3584) at 1", "Insert SimpleName: e(3629) into MethodInvocation(3631) at 0", "Insert SimpleName: getNextException(3630) into MethodInvocation(3631) at 1", "Insert SimpleName: e(3676) into MethodInvocation(3678) at 0", "Insert SimpleName: getNextException(3677) into MethodInvocation(3678) at 1", "Insert SimpleName: e(3801) into MethodInvocation(3803) at 0", "Insert SimpleName: getNextException(3802) into MethodInvocation(3803) at 1", "Insert SimpleName: e(3870) into MethodInvocation(3872) at 0", "Insert SimpleName: getNextException(3871) into MethodInvocation(3872) at 1", "Insert SimpleName: e(4009) into MethodInvocation(4011) at 0", "Insert SimpleName: getNextException(4010) into MethodInvocation(4011) at 1", "Insert SimpleName: e(4079) into MethodInvocation(4081) at 0", "Insert SimpleName: getNextException(4080) into MethodInvocation(4081) at 1", "Insert SimpleName: e(4149) into MethodInvocation(4151) at 0", "Insert SimpleName: getNextException(4150) into MethodInvocation(4151) at 1", "Insert SimpleName: e(4219) into MethodInvocation(4221) at 0", "Insert SimpleName: getNextException(4220) into MethodInvocation(4221) at 1", "Insert SimpleName: e(4288) into MethodInvocation(4290) at 0", "Insert SimpleName: getNextException(4289) into MethodInvocation(4290) at 1", "Insert SimpleName: e(4395) into MethodInvocation(4397) at 0", "Insert SimpleName: getNextException(4396) into MethodInvocation(4397) at 1", "Insert SimpleName: e(4528) into MethodInvocation(4530) at 0", "Insert SimpleName: getNextException(4529) into MethodInvocation(4530) at 1", "Insert SimpleName: e(4569) into MethodInvocation(4571) at 0", "Insert SimpleName: getNextException(4570) into MethodInvocation(4571) at 1", "Insert SimpleName: sqlE(5082) into MethodInvocation(5084) at 0", "Insert SimpleName: getMessage(5083) into MethodInvocation(5084) at 1", "Delete NumberLiteral: 2(302)", "Delete NumberLiteral: 2(491)", "Delete SimpleName: query(583)", "Delete StringLiteral: \"SELECT NEXT VALUE FOR foo.bar FROM SYSTEM.\\\"SEQUENCE\\\"\"(584)", "Delete Block(912)", "Delete MethodDeclaration(913)", "Delete StringLiteral: \"SELECT start_with, increment_by, cache_size, sequence_schema, sequence_name FROM SYSTEM.\\\"SEQUENCE\\\"\"(782)", "Delete NumberLiteral: 2(793)", "Delete NumberLiteral: 3(801)", "Delete NumberLiteral: 1(2650)", "Delete NumberLiteral: 4(820)", "Delete NumberLiteral: 5(828)"]}}, {"CreateSequenceCompiler_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 15", "operations": ["INS QualifiedName: org.apache.phoenix.parse.TableName to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 15"]}, {"root": "INS ImportDeclaration to CompilationUnit at 21", "operations": ["INS QualifiedName: org.apache.phoenix.util.SequenceUtil to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 21"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleType: SQLExceptionCode to SingleVariableDeclaration at 0", "INS SimpleName: SQLExceptionCode to SimpleType: SQLExceptionCode at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleName: code to SingleVariableDeclaration at 1", "INS SimpleName: CreateSequenceStatement to SimpleType: CreateSequenceStatement at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS SimpleType: CreateSequenceStatement to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleType: SQLException to MethodDeclaration at 6", "INS SimpleName: sequence to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 7", "INS SimpleName: validateNodeIsStateless to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS SimpleName: evalExpression to MethodDeclaration at 2", "INS SimpleName: evaluate to MethodInvocation at 1", "INS SimpleType: StatementContext to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 3", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS SimpleName: CreateSequenceStatement to SimpleType: CreateSequenceStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: expression to SingleVariableDeclaration at 1", "INS SimpleName: StatementContext to SimpleType: StatementContext at 0", "INS MethodInvocation to MethodInvocation at 3", "INS ExpressionStatement to Block at 1", "INS SimpleName: ptr to MethodInvocation at 3", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleType: CreateSequenceStatement to SingleVariableDeclaration at 0", "INS SimpleName: ptr to MethodInvocation at 2", "INS SimpleName: context to SingleVariableDeclaration at 1", "INS SimpleType: SQLExceptionCode to SingleVariableDeclaration at 0", "INS SimpleName: sequence to SingleVariableDeclaration at 1", "INS SimpleName: expression to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: long to MethodDeclaration at 1", "INS SimpleName: SQLExceptionCode to SimpleType: SQLExceptionCode at 0", "INS MethodInvocation to CastExpression at 1", "INS NullLiteral to MethodInvocation at 2", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS Block to MethodDeclaration at 8", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS CastExpression to ReturnStatement at 0", "INS SimpleType: SQLException to MethodDeclaration at 7", "INS SimpleName: code to SingleVariableDeclaration at 1", "INS SimpleName: getDataType to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS QualifiedName: PDataType.LONG to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS PrimitiveType: long to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: BindParseNode to CastExpression at 0", "INS SimpleName: maxValue to InfixExpression: > at 1", "INS SimpleType: BindParseNode to CastExpression at 0", "INS SimpleName: sequenceName to MethodInvocation at 0", "INS SimpleName: compile to MethodDeclaration at 2", "INS SimpleName: minValue to ConditionalExpression at 1", "INS SimpleName: context to MethodInvocation at 2", "INS IfStatement to Block at 14", "INS SimpleName: getSequenceName to MethodInvocation at 1", "INS SimpleName: maxValue to ConditionalExpression at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: sequence to MethodInvocation at 0", "INS SimpleName: sequenceName to MethodInvocation at 0", "INS SimpleName: getException to MethodInvocation at 1", "INS IfStatement to Block at 9", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleType: BindParseNode to InstanceofExpression at 1", "INS SimpleName: startsWithValue to InfixExpression: > at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 3", "INS Block to IfStatement at 1", "INS SimpleName: minValueNode to MethodInvocation at 2", "INS ConditionalExpression to Assignment: = at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS QualifiedName: SQLExceptionCode.MINVALUE_MUST_BE_CONSTANT to MethodInvocation at 4", "INS SimpleName: minValueNode to InstanceofExpression at 0", "INS PrimitiveType: long to VariableDeclarationStatement at 1", "INS SimpleType: TableName to VariableDeclarationStatement at 0", "INS IfStatement to Block at 5", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: sequenceName to VariableDeclarationFragment at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS InfixExpression: || to IfStatement at 0", "INS IfStatement to Block at 1", "INS SimpleName: LONG_DATUM to MethodInvocation at 3", "INS SimpleName: SequenceUtil to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: ParseNode to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to ThrowStatement at 0", "INS SimpleName: cacheSizeValue to InfixExpression: < at 0", "INS SimpleName: sequence to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS IfStatement to Block at 1", "INS ThrowStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: maxValue to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: accept to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS SimpleName: maxValueNode to VariableDeclarationFragment at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: maxValueNode to MethodInvocation at 0", "INS SimpleName: startsWithNode to MethodInvocation at 2", "INS SimpleName: minValue to InfixExpression: < at 1", "INS InfixExpression: < to InfixExpression: || at 0", "INS IfStatement to Block at 24", "INS ExpressionStatement to Block at 0", "INS SimpleName: expressionCompiler to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: cacheSizeValue to Assignment: = at 0", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: BindParseNode to SimpleType: BindParseNode at 0", "INS Block to IfStatement at 2", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: minValueNode to MethodInvocation at 0", "INS SimpleName: evalExpression to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS QualifiedName: SQLExceptionCode.MINVALUE_MUST_BE_LESS_THAN_OR_EQUAL_TO_MAXVALUE to MethodInvocation at 4", "INS SimpleName: getSchemaName to MethodInvocation at 1", "INS SimpleName: cacheNode to InfixExpression: == at 0", "INS MethodInvocation to ThrowStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: minValue to InfixExpression: > at 0", "INS SimpleName: BindParseNode to SimpleType: BindParseNode at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: startsWithValue to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: ParseNode to VariableDeclarationStatement at 0", "INS SimpleName: validateNodeIsStateless to MethodInvocation at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: minValueNode to VariableDeclarationFragment at 0", "INS SimpleName: startsWithValue to Assignment: = at 0", "INS IfStatement to Block at 15", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: startsWith to VariableDeclarationFragment at 0", "INS SimpleName: maxValueNode to InstanceofExpression at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS CastExpression to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: TableName to VariableDeclarationStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: startsWithValue to InfixExpression: < at 0", "INS Block to IfStatement at 1", "INS SimpleName: cacheSizeValue to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS Block to IfStatement at 1", "INS QualifiedName: SQLExceptionCode.INCREMENT_BY_MUST_BE_CONSTANT to MethodInvocation at 4", "INS VariableDeclarationStatement to Block at 26", "INS QualifiedName: SQLExceptionCode.START_WITH_MUST_BE_CONSTANT to MethodInvocation at 3", "INS SimpleName: accept to MethodInvocation at 1", "INS IfStatement to Block at 27", "INS SimpleName: addParamMetaData to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 0", "INS VariableDeclarationStatement to Block at 20", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: incrementBy to InfixExpression: > at 0", "INS SimpleName: expressionCompiler to MethodInvocation at 2", "INS SimpleName: TableName to SimpleType: TableName at 0", "INS SimpleName: incrementBy to InfixExpression: == at 0", "INS SimpleName: context to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: sequenceName to VariableDeclarationFragment at 0", "INS InstanceofExpression to IfStatement at 0", "INS QualifiedName: SQLExceptionCode.MINVALUE_MUST_BE_CONSTANT to MethodInvocation at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS PrimitiveType: long to VariableDeclarationStatement at 1", "INS CastExpression to MethodInvocation at 2", "INS SimpleName: startsWithNode to InfixExpression: != at 0", "INS VariableDeclarationStatement to Block at 18", "INS VariableDeclarationStatement to Block at 25", "INS ThrowStatement to Block at 1", "INS SimpleName: maxValueNode to CastExpression at 1", "INS VariableDeclarationStatement to Block at 21", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: sequence to MethodInvocation at 1", "INS InfixExpression: < to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: > to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS InfixExpression: > to InfixExpression: || at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: maxValue to InfixExpression: > at 1", "INS MethodInvocation to MethodInvocation at 3", "INS Block to IfStatement at 1", "INS QualifiedName: SQLExceptionCode.CACHE_MUST_BE_NON_NEGATIVE_CONSTANT to MethodInvocation at 4", "INS SimpleName: LONG_DATUM to MethodInvocation at 3", "INS QualifiedName: SQLExceptionCode.CACHE_MUST_BE_NON_NEGATIVE_CONSTANT to MethodInvocation at 3", "INS Modifier: final to VariableDeclarationStatement at 0", "INS IfStatement to Block at 22", "INS Block to IfStatement at 2", "INS ExpressionStatement to Block at 8", "INS IfStatement to Block at 19", "INS Block to MethodDeclaration at 5", "INS InfixExpression: > to ConditionalExpression at 0", "INS SimpleType: BindParseNode to InstanceofExpression at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: BindParseNode to SimpleType: BindParseNode at 0", "INS SimpleName: cacheSizeValue to Assignment: = at 0", "INS ExpressionStatement to Block at 7", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS InfixExpression: == to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: minValueNode to CastExpression at 1"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SimpleType: MutationPlan to MethodDeclaration at 1", "MOV SimpleType: SQLException to MethodDeclaration at 4"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 13", "MOV VariableDeclarationStatement to Block at 29", "MOV IfStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 11", "MOV IfStatement to Block at 16", "MOV ReturnStatement to Block at 30", "MOV ExpressionStatement to Block at 6", "MOV IfStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 17", "MOV VariableDeclarationStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 10", "MOV VariableDeclarationStatement to Block at 28", "MOV VariableDeclarationStatement to Block at 23", "MOV VariableDeclarationStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 0", "MOV IfStatement to Block at 12", "MOV VariableDeclarationStatement to Block at 4"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Expression to SingleVariableDeclaration at 0"]}, {"root": "INS InfixExpression: || to IfStatement at 0", "operations": ["INS PrefixExpression: ! to InfixExpression: || at 1", "INS InfixExpression: || to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV Modifier: final to VariableDeclarationStatement at 0", "MOV PrimitiveType: long to VariableDeclarationStatement at 1"]}, {"root": "UPDATE from != to ==", "operations": ["UPD InfixExpression: != from != to =="]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS SimpleType: TableName to VariableDeclarationStatement at 0", "INS SimpleName: sequenceName to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: TableName to SimpleType: TableName at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS ThrowStatement to Block at 1", "operations": ["INS MethodInvocation to ThrowStatement at 0", "INS ThrowStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 3"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: == to InfixExpression: || at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: sequenceName to VariableDeclarationFragment at 0", "INS SimpleType: TableName to VariableDeclarationStatement at 0", "INS SimpleName: TableName to SimpleType: TableName at 0", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS ThrowStatement to Block at 1", "operations": ["INS ThrowStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to ThrowStatement at 0"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: Long to CastExpression at 0"]}, {"root": "UPDATE from startsWithExpr to validateNodeIsStateless", "operations": ["UPD SimpleName: startsWithExpr from startsWithExpr to validateNodeIsStateless", "UPD SimpleName: startsWithExpr from startsWithExpr to validateNodeIsStateless", "UPD SimpleName: build from build to validateNodeIsStateless", "UPD SimpleName: setSchemaName from setSchemaName to validateNodeIsStateless"]}, {"root": "UPDATE from evaluate to sequence", "operations": ["UPD SimpleName: evaluate from evaluate to sequence", "UPD SimpleName: ptr from ptr to sequence", "UPD SimpleName: buildException from buildException to sequence", "UPD SimpleName: evaluate from evaluate to sequence", "UPD SimpleName: getDataType from getDataType to sequence", "UPD SimpleName: getDataType from getDataType to sequence", "UPD SimpleName: evaluate from evaluate to sequence", "UPD SimpleName: getDataType from getDataType to sequence"]}, {"root": "UPDATE from ptr to incrementByNode", "operations": ["UPD SimpleName: ptr from ptr to incrementByNode"]}, {"root": "INS QualifiedName: SQLExceptionCode.INCREMENT_BY_MUST_BE_CONSTANT to MethodInvocation at 4", "operations": ["INS QualifiedName: SQLExceptionCode.INCREMENT_BY_MUST_BE_CONSTANT to MethodInvocation at 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: startsWithExpr to MethodInvocation at 0", "MOV SimpleName: getDataType to MethodInvocation at 1"]}, {"root": "UPDATE from isCoercibleTo to maxValueNode", "operations": ["UPD SimpleName: isCoercibleTo from isCoercibleTo to maxValueNode"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: isCoercibleTo to MethodInvocation at 2", "MOV QualifiedName: PDataType.LONG to MethodInvocation at 3"]}, {"root": "UPDATE from PDataType.LONG to SQLExceptionCode.MAXVALUE_MUST_BE_CONSTANT", "operations": ["UPD QualifiedName: PDataType.LONG from PDataType.LONG to SQLExceptionCode.MAXVALUE_MUST_BE_CONSTANT", "UPD QualifiedName: PDataType.LONG from PDataType.LONG to SQLExceptionCode.MAXVALUE_MUST_BE_CONSTANT"]}, {"root": "UPDATE from incrementByExpr to incrementBy", "operations": ["UPD SimpleName: incrementByExpr from incrementByExpr to incrementBy"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: incrementByExpr to VariableDeclarationFragment at 0", "MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV NumberLiteral: 0 to InfixExpression: == at 1"]}, {"root": "UPDATE from incrementBy to minValue", "operations": ["UPD SimpleName: incrementBy from incrementBy to minValue"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: incrementBy to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from cacheSizeValue to startsWithValue", "operations": ["UPD SimpleName: cacheSizeValue from cacheSizeValue to startsWithValue"]}, {"root": "UPDATE from cacheNode to startsWithNode", "operations": ["UPD SimpleName: cacheNode from cacheNode to startsWithNode"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from startsWithNode to node", "operations": ["UPD SimpleName: startsWithNode from startsWithNode to node"]}, {"root": "MOVE from PrefixExpression: !", "operations": ["MOV MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "UPDATE from cacheNode to toObject", "operations": ["UPD SimpleName: cacheNode from cacheNode to toObject"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: cacheNode to MethodInvocation at 1", "MOV SimpleName: isStateless to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: sequence to MethodInvocation at 0", "MOV SimpleName: getSequenceName to MethodInvocation at 1"]}, {"root": "UPDATE from getSequenceName to getMaxValue", "operations": ["UPD SimpleName: getSequenceName from getSequenceName to getMaxValue"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: sequence to MethodInvocation at 0", "MOV SimpleName: getSequenceName to MethodInvocation at 1"]}, {"root": "UPDATE from getSequenceName to getMinValue", "operations": ["UPD SimpleName: getSequenceName from getSequenceName to getMinValue"]}, {"root": "UPDATE from incrementByExpr to evalExpression", "operations": ["UPD SimpleName: incrementByExpr from incrementByExpr to evalExpression", "UPD SimpleName: cacheSizeExpr from cacheSizeExpr to evalExpression", "UPD SimpleName: incrementByExpr from incrementByExpr to evalExpression", "UPD SimpleName: cacheSizeExpr from cacheSizeExpr to evalExpression"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: evaluate to MethodInvocation at 1", "MOV SimpleName: incrementByExpr to MethodInvocation at 0", "MOV SimpleName: ptr to MethodInvocation at 2"]}, {"root": "UPDATE from ptr to context", "operations": ["UPD SimpleName: ptr from ptr to context", "UPD SimpleName: isCoercibleTo from isCoercibleTo to context", "UPD SimpleName: startsWithExpr from startsWithExpr to context", "UPD SimpleName: sequence from sequence to context", "UPD SimpleName: ptr from ptr to context"]}, {"root": "MOVE from ThrowStatement", "operations": ["MOV MethodInvocation to ThrowStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: incrementByExpr to MethodInvocation at 0", "MOV SimpleName: getDataType to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: isCoercibleTo to MethodInvocation at 2", "MOV QualifiedName: PDataType.LONG to MethodInvocation at 4"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS SimpleName: startsWithValue to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1", "INS QualifiedName: SQLExceptionCode.START_WITH_MUST_BE_CONSTANT to MethodInvocation at 4", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from getSchemaName to SequenceUtil", "operations": ["UPD SimpleName: getSchemaName from getSchemaName to SequenceUtil", "UPD SimpleName: getSchemaName from getSchemaName to SequenceUtil", "UPD SimpleName: getSchemaName from getSchemaName to SequenceUtil", "UPD SimpleName: setSchemaName from setSchemaName to SequenceUtil", "UPD SimpleName: toObject from toObject to SequenceUtil"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getSchemaName to MethodInvocation at 0"]}, {"root": "UPDATE from setTableName to getException", "operations": ["UPD SimpleName: setTableName from setTableName to getException", "UPD SimpleName: setTableName from setTableName to getException", "UPD SimpleName: setTableName from setTableName to getException", "UPD SimpleName: setTableName from setTableName to getException", "UPD SimpleName: ptr from ptr to getException"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setTableName to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getTableName to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from buildException to code", "operations": ["UPD SimpleName: buildException from buildException to code", "UPD SimpleName: buildException from buildException to code"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: buildException to MethodInvocation at 4"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: expression to MethodInvocation at 0"]}, {"root": "UPDATE from isStateless to isCoercibleTo", "operations": ["UPD SimpleName: isStateless from isStateless to isCoercibleTo"]}, {"root": "INS QualifiedName: PDataType.LONG to MethodInvocation at 3", "operations": ["INS QualifiedName: PDataType.LONG to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getSchemaName to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setTableName to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getTableName to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: buildException to MethodInvocation at 4"]}, {"root": "UPDATE from isStateless to expression", "operations": ["UPD SimpleName: isStateless from isStateless to expression"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: build to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: buildException to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setSchemaName to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getSequenceName to MethodInvocation at 2", "MOV SimpleName: sequence to MethodInvocation at 1"]}, {"root": "UPDATE from getSequenceName to cacheNode", "operations": ["UPD SimpleName: getSequenceName from getSequenceName to cacheNode"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0", "MOV SimpleName: getTableName to MethodInvocation at 1"]}, {"root": "UPDATE from getTableName to addParamMetaData", "operations": ["UPD SimpleName: getTableName from getTableName to addParamMetaData"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3", "MOV SimpleName: setSchemaName to MethodInvocation at 0"]}, {"root": "INS QualifiedName: SQLExceptionCode.INCREMENT_BY_MUST_NOT_BE_ZERO to MethodInvocation at 5", "operations": ["INS QualifiedName: SQLExceptionCode.INCREMENT_BY_MUST_NOT_BE_ZERO to MethodInvocation at 5"]}, {"root": "UPDATE from Long to TableName", "operations": ["UPD SimpleName: Long from Long to TableName"]}, {"root": "MOVE from SimpleType: TableName", "operations": ["MOV SimpleName: Long to SimpleType: TableName at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toObject to MethodInvocation at 0", "MOV SimpleName: ptr to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from InfixExpression: <", "operations": ["MOV NumberLiteral: 0 to InfixExpression: < at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleType: TableName to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: TableName to SimpleType: TableName at 0", "INS SimpleName: sequenceName to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "INS ThrowStatement to Block at 1", "operations": ["INS QualifiedName: SQLExceptionCode.CACHE_MUST_BE_NON_NEGATIVE_CONSTANT to MethodInvocation at 4", "INS ThrowStatement to Block at 1", "INS MethodInvocation to ThrowStatement at 0", "INS MethodInvocation to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getSequenceName to MethodInvocation at 1", "MOV SimpleName: sequence to MethodInvocation at 0"]}, {"root": "UPDATE from cacheSizeExpr to sequenceName", "operations": ["UPD SimpleName: cacheSizeExpr from cacheSizeExpr to sequenceName", "UPD SimpleName: getTableName from getTableName to sequenceName", "UPD SimpleName: incrementByExpr from incrementByExpr to sequenceName", "UPD SimpleName: getTableName from getTableName to sequenceName", "UPD SimpleName: sequence from sequence to sequenceName", "UPD SimpleName: sequence from sequence to sequenceName", "UPD SimpleName: sequence from sequence to sequenceName", "UPD SimpleName: getTableName from getTableName to sequenceName"]}, {"root": "UPDATE from getSequenceName to getSchemaName", "operations": ["UPD SimpleName: getSequenceName from getSequenceName to getSchemaName", "UPD SimpleName: getSequenceName from getSequenceName to getSchemaName", "UPD SimpleName: getDataType from getDataType to getSchemaName", "UPD SimpleName: getSequenceName from getSequenceName to getSchemaName"]}, {"root": "UPDATE from getDataType to getTableName", "operations": ["UPD SimpleName: getDataType from getDataType to getTableName", "UPD SimpleName: build from build to getTableName", "UPD SimpleName: build from build to getTableName", "UPD SimpleName: isCoercibleTo from isCoercibleTo to getTableName", "UPD SimpleName: build from build to getTableName"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: build to MethodInvocation at 1"]}, {"root": "UPDATE from incrementByNode to getDataType", "operations": ["UPD SimpleName: incrementByNode from incrementByNode to getDataType"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: incrementByNode to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getSequenceName to MethodInvocation at 1", "MOV SimpleName: sequence to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: build to MethodInvocation at 1"]}, {"root": "UPDATE from getDataType to getBindManager", "operations": ["UPD SimpleName: getDataType from getDataType to getBindManager", "UPD SimpleName: getSequenceName from getSequenceName to getBindManager"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: evaluate to MethodInvocation at 1", "MOV SimpleName: ptr to MethodInvocation at 2", "MOV SimpleName: cacheSizeExpr to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: cacheSizeExpr to MethodInvocation at 0", "MOV SimpleName: getDataType to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "UPDATE from Expression to BindParseNode", "operations": ["UPD SimpleName: Expression from Expression to BindParseNode"]}, {"root": "MOVE from SimpleType: BindParseNode", "operations": ["MOV SimpleName: Expression to SimpleType: BindParseNode at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV QualifiedName: PDataType.LONG to MethodInvocation at 4", "MOV SimpleName: isCoercibleTo to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from PDataType.LONG to SQLExceptionCode.STARTS_WITH_MUST_BE_BETWEEN_MIN_MAX_VALUE", "operations": ["UPD QualifiedName: PDataType.LONG from PDataType.LONG to SQLExceptionCode.STARTS_WITH_MUST_BE_BETWEEN_MIN_MAX_VALUE"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getSchemaName to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setTableName to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getTableName to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getLength to MethodInvocation at 1", "MOV SimpleName: ptr to MethodInvocation at 0"]}, {"root": "UPDATE from getLength to getSequenceName", "operations": ["UPD SimpleName: getLength from getLength to getSequenceName"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getSequenceName to MethodInvocation at 1", "MOV SimpleName: sequence to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: build to MethodInvocation at 1"]}, {"root": "INS SimpleName: minValue to MethodInvocation at 6", "operations": ["INS SimpleName: minValue to MethodInvocation at 6"]}, {"root": "INS SimpleName: maxValue to MethodInvocation at 7", "operations": ["INS SimpleName: maxValue to MethodInvocation at 7"]}, {"root": "DEL ThrowStatement", "operations": ["DEL MethodInvocation", "DEL SimpleType: SQLExceptionInfo.Builder", "DEL ThrowStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: setSchemaName", "DEL MethodInvocation", "DEL QualifiedName: SQLExceptionCode.STARTS_WITH_MUST_BE_CONSTANT", "DEL QualifiedName: SQLExceptionInfo.Builder"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !"]}, {"root": "DEL ThrowStatement", "operations": ["DEL QualifiedName: SQLExceptionInfo.Builder", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL QualifiedName: SQLExceptionCode.INCREMENT_BY_MUST_BE_CONSTANT", "DEL ThrowStatement", "DEL SimpleName: setSchemaName", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: SQLExceptionInfo.Builder"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL MethodInvocation", "operations": ["DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleType: SQLExceptionInfo.Builder", "DEL QualifiedName: SQLExceptionCode.INCREMENT_BY_MUST_BE_CONSTANT", "DEL QualifiedName: SQLExceptionInfo.Builder"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: buildException", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: build"]}, {"root": "DEL MethodInvocation", "operations": ["DEL NullLiteral", "DEL MethodInvocation"]}, {"root": "DEL ThrowStatement", "operations": ["DEL SimpleType: SQLExceptionInfo.Builder", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: buildException", "DEL ThrowStatement", "DEL QualifiedName: SQLExceptionCode.CACHE_MUST_BE_NON_NEGATIVE_CONSTANT", "DEL MethodInvocation", "DEL QualifiedName: SQLExceptionInfo.Builder", "DEL ClassInstanceCreation", "DEL SimpleName: setSchemaName", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: toObject", "DEL NullLiteral", "DEL Block", "DEL ThrowStatement", "DEL InfixExpression: ||", "DEL SimpleType: SQLExceptionInfo.Builder", "DEL QualifiedName: SQLExceptionInfo.Builder", "DEL SimpleType: Expression", "DEL MethodInvocation", "DEL SimpleName: build", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: cacheSizeValue", "DEL NumberLiteral: 0", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: getSchemaName", "DEL PrefixExpression: !", "DEL QualifiedName: SQLExceptionCode.STARTS_WITH_MUST_BE_CONSTANT", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodDeclaration", "DEL InfixExpression: &&", "DEL SimpleName: compile", "DEL SimpleType: Long", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL IfStatement", "DEL InfixExpression: ==", "DEL QualifiedName: SQLExceptionCode.CACHE_MUST_BE_NON_NEGATIVE_CONSTANT", "DEL PrefixExpression: !", "DEL SimpleName: toObject", "DEL IfStatement", "DEL SimpleType: Long", "DEL PrefixExpression: !", "DEL ClassInstanceCreation", "DEL SimpleName: buildException", "DEL MethodInvocation", "DEL InfixExpression: <", "DEL MethodInvocation", "DEL InfixExpression: ||", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL ThrowStatement", "DEL MethodInvocation", "DEL SimpleName: ptr", "DEL MethodInvocation", "DEL Assignment: =", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: setTableName", "DEL QualifiedName: PDataType.LONG", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: setSchemaName", "DEL MethodInvocation", "DEL Modifier: final", "DEL QualifiedName: SQLExceptionInfo.Builder", "DEL SimpleName: startsWith", "DEL SimpleName: ptr", "DEL SimpleName: Long", "DEL Block", "DEL SimpleName: cacheSizeExpr", "DEL CastExpression", "DEL MethodInvocation", "DEL SimpleName: startsWithExpr", "DEL IfStatement", "DEL SimpleName: setTableName", "DEL InfixExpression: !=", "DEL VariableDeclarationStatement", "DEL SimpleName: ptr", "DEL PrimitiveType: long", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: SQLExceptionInfo.Builder", "DEL MethodInvocation", "DEL Block", "DEL QualifiedName: PDataType.LONG", "DEL VariableDeclarationStatement", "DEL ParenthesizedExpression", "DEL VariableDeclarationStatement", "DEL SimpleName: getSchemaName", "DEL SimpleName: getTableName", "DEL InfixExpression: &&", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: getLength", "DEL CastExpression", "DEL QualifiedName: PDataType.LONG", "DEL SimpleType: Expression", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Expression", "DEL CastExpression"]}]}}, {"CreateSequenceCompiler_diff": {"operations": ["Insert ImportDeclaration(31) into CompilationUnit(842) at 15", "Insert ImportDeclaration(43) into CompilationUnit(842) at 21", "Insert QualifiedName: org.apache.phoenix.parse.TableName(30) into ImportDeclaration(31) at 0", "Insert QualifiedName: org.apache.phoenix.util.SequenceUtil(42) into ImportDeclaration(43) at 0", "Insert MethodDeclaration(246) into TypeDeclaration: class(841) at 8", "Insert MethodDeclaration(328) into TypeDeclaration: class(841) at 9", "Insert MethodDeclaration(840) into TypeDeclaration: class(841) at 10", "Update Modifier: public(199) to private", "Move Modifier: public(199) into MethodDeclaration(246) at 0", "Insert PrimitiveType: void(204) into MethodDeclaration(246) at 1", "Insert SimpleName: validateNodeIsStateless(205) into MethodDeclaration(246) at 2", "Insert SingleVariableDeclaration(209) into MethodDeclaration(246) at 3", "Insert SingleVariableDeclaration(213) into MethodDeclaration(246) at 4", "Insert SingleVariableDeclaration(217) into MethodDeclaration(246) at 5", "Insert SimpleType: SQLException(219) into MethodDeclaration(246) at 6", "Insert Block(245) into MethodDeclaration(246) at 7", "Insert Modifier: private(247) into MethodDeclaration(328) at 0", "Insert PrimitiveType: long(248) into MethodDeclaration(328) at 1", "Insert SimpleName: evalExpression(249) into MethodDeclaration(328) at 2", "Insert SingleVariableDeclaration(253) into MethodDeclaration(328) at 3", "Insert SingleVariableDeclaration(257) into MethodDeclaration(328) at 4", "Insert SingleVariableDeclaration(261) into MethodDeclaration(328) at 5", "Insert SingleVariableDeclaration(265) into MethodDeclaration(328) at 6", "Insert SimpleType: SQLException(267) into MethodDeclaration(328) at 7", "Insert Block(327) into MethodDeclaration(328) at 8", "Insert Modifier: public(329) into MethodDeclaration(840) at 0", "Move SimpleType: MutationPlan(201) into MethodDeclaration(840) at 1", "Insert SimpleName: compile(332) into MethodDeclaration(840) at 2", "Move SingleVariableDeclaration(207) into MethodDeclaration(840) at 3", "Move SimpleType: SQLException(209) into MethodDeclaration(840) at 4", "Insert Block(839) into MethodDeclaration(840) at 5", "Insert SimpleType: CreateSequenceStatement(207) into SingleVariableDeclaration(209) at 0", "Insert SimpleName: sequence(208) into SingleVariableDeclaration(209) at 1", "Insert SimpleType: ParseNode(211) into SingleVariableDeclaration(213) at 0", "Insert SimpleName: node(212) into SingleVariableDeclaration(213) at 1", "Insert SimpleType: SQLExceptionCode(215) into SingleVariableDeclaration(217) at 0", "Insert SimpleName: code(216) into SingleVariableDeclaration(217) at 1", "Insert SimpleName: SQLException(218) into SimpleType: SQLException(219) at 0", "Move IfStatement(254) into Block(245) at 0", "Insert SimpleType: CreateSequenceStatement(251) into SingleVariableDeclaration(253) at 0", "Insert SimpleName: sequence(252) into SingleVariableDeclaration(253) at 1", "Insert SimpleType: StatementContext(255) into SingleVariableDeclaration(257) at 0", "Insert SimpleName: context(256) into SingleVariableDeclaration(257) at 1", "Move SimpleType: Expression(405) into SingleVariableDeclaration(261) at 0", "Insert SimpleName: expression(260) into SingleVariableDeclaration(261) at 1", "Insert SimpleType: SQLExceptionCode(263) into SingleVariableDeclaration(265) at 0", "Insert SimpleName: code(264) into SingleVariableDeclaration(265) at 1", "Insert SimpleName: SQLException(266) into SimpleType: SQLException(267) at 0", "Move VariableDeclarationStatement(420) into Block(327) at 0", "Insert ExpressionStatement(281) into Block(327) at 1", "Move IfStatement(283) into Block(327) at 2", "Insert ReturnStatement(326) into Block(327) at 3", "Move VariableDeclarationStatement(217) into Block(839) at 0", "Move VariableDeclarationStatement(225) into Block(839) at 1", "Insert VariableDeclarationStatement(363) into Block(839) at 2", "Insert VariableDeclarationStatement(371) into Block(839) at 3", "Move VariableDeclarationStatement(291) into Block(839) at 4", "Insert IfStatement(390) into Block(839) at 5", "Move ExpressionStatement(426) into Block(839) at 6", "Insert ExpressionStatement(402) into Block(839) at 7", "Insert ExpressionStatement(408) into Block(839) at 8", "Insert IfStatement(419) into Block(839) at 9", "Move VariableDeclarationStatement(333) into Block(839) at 10", "Move VariableDeclarationStatement(343) into Block(839) at 11", "Move IfStatement(360) into Block(839) at 12", "Move IfStatement(377) into Block(839) at 13", "Insert IfStatement(489) into Block(839) at 14", "Insert IfStatement(506) into Block(839) at 15", "Move IfStatement(394) into Block(839) at 16", "Move VariableDeclarationStatement(403) into Block(839) at 17", "Insert VariableDeclarationStatement(546) into Block(839) at 18", "Insert IfStatement(566) into Block(839) at 19", "Insert VariableDeclarationStatement(580) into Block(839) at 20", "Insert VariableDeclarationStatement(594) into Block(839) at 21", "Insert IfStatement(618) into Block(839) at 22", "Move VariableDeclarationStatement(560) into Block(839) at 23", "Insert IfStatement(677) into Block(839) at 24", "Insert VariableDeclarationStatement(683) into Block(839) at 25", "Insert VariableDeclarationStatement(687) into Block(839) at 26", "Insert IfStatement(741) into Block(839) at 27", "Move VariableDeclarationStatement(645) into Block(839) at 28", "Move VariableDeclarationStatement(655) into Block(839) at 29", "Move ReturnStatement(730) into Block(839) at 30", "Insert SimpleName: CreateSequenceStatement(206) into SimpleType: CreateSequenceStatement(207) at 0", "Insert SimpleName: ParseNode(210) into SimpleType: ParseNode(211) at 0", "Insert SimpleName: SQLExceptionCode(214) into SimpleType: SQLExceptionCode(215) at 0", "Insert SimpleName: CreateSequenceStatement(250) into SimpleType: CreateSequenceStatement(251) at 0", "Insert SimpleName: StatementContext(254) into SimpleType: StatementContext(255) at 0", "Insert SimpleName: SQLExceptionCode(262) into SimpleType: SQLExceptionCode(263) at 0", "Insert MethodInvocation(280) into ExpressionStatement(281) at 0", "Insert InfixExpression: ||(294) into IfStatement(315) at 0", "Insert CastExpression(325) into ReturnStatement(326) at 0", "Insert SimpleType: ParseNode(357) into VariableDeclarationStatement(363) at 0", "Insert VariableDeclarationFragment(362) into VariableDeclarationStatement(363) at 1", "Insert SimpleType: ParseNode(365) into VariableDeclarationStatement(371) at 0", "Insert VariableDeclarationFragment(370) into VariableDeclarationStatement(371) at 1", "Insert InfixExpression: !=(382) into IfStatement(390) at 0", "Insert Block(389) into IfStatement(390) at 1", "Insert MethodInvocation(401) into ExpressionStatement(402) at 0", "Insert MethodInvocation(407) into ExpressionStatement(408) at 0", "Move InfixExpression: !=(294) into IfStatement(419) at 0", "Insert Block(418) into IfStatement(419) at 1", "Insert InstanceofExpression(476) into IfStatement(489) at 0", "Insert Block(488) into IfStatement(489) at 1", "Insert InstanceofExpression(493) into IfStatement(506) at 0", "Insert Block(505) into IfStatement(506) at 1", "Insert Modifier: final(533) into VariableDeclarationStatement(546) at 0", "Insert PrimitiveType: long(534) into VariableDeclarationStatement(546) at 1", "Insert VariableDeclarationFragment(545) into VariableDeclarationStatement(546) at 2", "Insert InfixExpression: ==(549) into IfStatement(566) at 0", "Move Block(531) into IfStatement(566) at 1", "Insert Modifier: final(567) into VariableDeclarationStatement(580) at 0", "Insert PrimitiveType: long(568) into VariableDeclarationStatement(580) at 1", "Insert VariableDeclarationFragment(579) into VariableDeclarationStatement(580) at 2", "Move Modifier: final(533) into VariableDeclarationStatement(594) at 0", "Move PrimitiveType: long(534) into VariableDeclarationStatement(594) at 1", "Insert VariableDeclarationFragment(593) into VariableDeclarationStatement(594) at 2", "Insert InfixExpression: >(597) into IfStatement(618) at 0", "Insert Block(617) into IfStatement(618) at 1", "Update InfixExpression: !=(563) to ==", "Move InfixExpression: !=(563) into IfStatement(677) at 0", "Insert Block(635) into IfStatement(677) at 1", "Insert Block(676) into IfStatement(677) at 2", "Insert Modifier: final(678) into VariableDeclarationStatement(683) at 0", "Insert PrimitiveType: long(679) into VariableDeclarationStatement(683) at 1", "Insert VariableDeclarationFragment(682) into VariableDeclarationStatement(683) at 2", "Insert PrimitiveType: long(684) into VariableDeclarationStatement(687) at 0", "Insert VariableDeclarationFragment(686) into VariableDeclarationStatement(687) at 1", "Insert InfixExpression: ==(690) into IfStatement(741) at 0", "Insert Block(703) into IfStatement(741) at 1", "Insert Block(740) into IfStatement(741) at 2", "Insert VariableDeclarationStatement(231) into Block(243) at 0", "Insert ThrowStatement(242) into Block(243) at 1", "Insert SimpleName: expression(276) into MethodInvocation(280) at 0", "Insert SimpleName: evaluate(277) into MethodInvocation(280) at 1", "Insert NullLiteral(278) into MethodInvocation(280) at 2", "Insert SimpleName: ptr(279) into MethodInvocation(280) at 3", "Move InfixExpression: ==(431) into InfixExpression: ||(294) at 0", "Insert PrefixExpression: !(293) into InfixExpression: ||(294) at 1", "Insert VariableDeclarationStatement(302) into Block(314) at 0", "Insert ThrowStatement(313) into Block(314) at 1", "Move SimpleType: Long(469) into CastExpression(325) at 0", "Insert MethodInvocation(324) into CastExpression(325) at 1", "Insert SimpleName: ParseNode(356) into SimpleType: ParseNode(357) at 0", "Insert SimpleName: maxValueNode(358) into VariableDeclarationFragment(362) at 0", "Insert MethodInvocation(361) into VariableDeclarationFragment(362) at 1", "Insert SimpleName: ParseNode(364) into SimpleType: ParseNode(365) at 0", "Insert SimpleName: minValueNode(366) into VariableDeclarationFragment(370) at 0", "Insert MethodInvocation(369) into VariableDeclarationFragment(370) at 1", "Insert SimpleName: startsWithNode(380) into InfixExpression: !=(382) at 0", "Insert NullLiteral(381) into InfixExpression: !=(382) at 1", "Insert ExpressionStatement(388) into Block(389) at 0", "Update SimpleName: startsWithExpr(421) to validateNodeIsStateless", "Update SimpleName: evaluate(422) to sequence", "Update SimpleName: ptr(424) to incrementByNode", "Insert QualifiedName: SQLExceptionCode.INCREMENT_BY_MUST_BE_CONSTANT(394) into MethodInvocation(395) at 3", "Update SimpleName: startsWithExpr(432) to validateNodeIsStateless", "Move SimpleName: startsWithExpr(432) into MethodInvocation(401) at 0", "Update SimpleName: getDataType(433) to sequence", "Move SimpleName: getDataType(433) into MethodInvocation(401) at 1", "Update SimpleName: isCoercibleTo(435) to maxValueNode", "Move SimpleName: isCoercibleTo(435) into MethodInvocation(401) at 2", "Update QualifiedName: PDataType.LONG(436) to SQLExceptionCode.MAXVALUE_MUST_BE_CONSTANT", "Move QualifiedName: PDataType.LONG(436) into MethodInvocation(401) at 3", "Insert SimpleName: validateNodeIsStateless(403) into MethodInvocation(407) at 0", "Insert SimpleName: sequence(404) into MethodInvocation(407) at 1", "Insert SimpleName: minValueNode(405) into MethodInvocation(407) at 2", "Insert QualifiedName: SQLExceptionCode.MINVALUE_MUST_BE_CONSTANT(406) into MethodInvocation(407) at 3", "Insert ExpressionStatement(417) into Block(418) at 0", "Insert SimpleName: maxValueNode(473) into InstanceofExpression(476) at 0", "Insert SimpleType: BindParseNode(475) into InstanceofExpression(476) at 1", "Insert ExpressionStatement(487) into Block(488) at 0", "Insert SimpleName: minValueNode(490) into InstanceofExpression(493) at 0", "Insert SimpleType: BindParseNode(492) into InstanceofExpression(493) at 1", "Insert ExpressionStatement(504) into Block(505) at 0", "Update SimpleName: incrementByExpr(482) to incrementBy", "Move SimpleName: incrementByExpr(482) into VariableDeclarationFragment(545) at 0", "Insert MethodInvocation(544) into VariableDeclarationFragment(545) at 1", "Insert SimpleName: incrementBy(547) into InfixExpression: ==(549) at 0", "Move NumberLiteral: 0(498) into InfixExpression: ==(549) at 1", "Insert SimpleName: maxValue(569) into VariableDeclarationFragment(579) at 0", "Insert MethodInvocation(578) into VariableDeclarationFragment(579) at 1", "Update SimpleName: incrementBy(535) to minValue", "Move SimpleName: incrementBy(535) into VariableDeclarationFragment(593) at 0", "Insert MethodInvocation(592) into VariableDeclarationFragment(593) at 1", "Insert SimpleName: minValue(595) into InfixExpression: >(597) at 0", "Insert SimpleName: maxValue(596) into InfixExpression: >(597) at 1", "Insert VariableDeclarationStatement(605) into Block(617) at 0", "Insert ThrowStatement(616) into Block(617) at 1", "Update SimpleName: cacheSizeValue(549) to startsWithValue", "Update SimpleName: cacheNode(561) to startsWithNode", "Insert ExpressionStatement(634) into Block(635) at 0", "Move ExpressionStatement(578) into Block(676) at 0", "Insert IfStatement(675) into Block(676) at 1", "Insert SimpleName: startsWith(680) into VariableDeclarationFragment(682) at 0", "Insert SimpleName: startsWithValue(681) into VariableDeclarationFragment(682) at 1", "Insert SimpleName: cacheSizeValue(685) into VariableDeclarationFragment(686) at 0", "Insert SimpleName: cacheNode(688) into InfixExpression: ==(690) at 0", "Insert NullLiteral(689) into InfixExpression: ==(690) at 1", "Insert ExpressionStatement(702) into Block(703) at 0", "Insert ExpressionStatement(715) into Block(740) at 0", "Insert IfStatement(739) into Block(740) at 1", "Update SimpleName: startsWithNode(226) to node", "Insert SimpleType: TableName(225) into VariableDeclarationStatement(231) at 0", "Insert VariableDeclarationFragment(230) into VariableDeclarationStatement(231) at 1", "Insert MethodInvocation(241) into ThrowStatement(242) at 0", "Move MethodInvocation(257) into PrefixExpression: !(293) at 0", "Insert SimpleType: TableName(296) into VariableDeclarationStatement(302) at 0", "Insert VariableDeclarationFragment(301) into VariableDeclarationStatement(302) at 1", "Insert MethodInvocation(312) into ThrowStatement(313) at 0", "Insert QualifiedName: PDataType.LONG(318) into MethodInvocation(324) at 0", "Update SimpleName: cacheNode(295) to toObject", "Move SimpleName: cacheNode(295) into MethodInvocation(324) at 1", "Insert SimpleName: ptr(320) into MethodInvocation(324) at 2", "Insert MethodInvocation(323) into MethodInvocation(324) at 3", "Move SimpleName: sequence(305) into MethodInvocation(361) at 0", "Update SimpleName: getSequenceName(306) to getMaxValue", "Move SimpleName: getSequenceName(306) into MethodInvocation(361) at 1", "Move SimpleName: sequence(312) into MethodInvocation(369) at 0", "Update SimpleName: getSequenceName(313) to getMinValue", "Move SimpleName: getSequenceName(313) into MethodInvocation(369) at 1", "Insert MethodInvocation(387) into ExpressionStatement(388) at 0", "Insert MethodInvocation(416) into ExpressionStatement(417) at 0", "Insert SimpleName: BindParseNode(474) into SimpleType: BindParseNode(475) at 0", "Insert MethodInvocation(486) into ExpressionStatement(487) at 0", "Insert SimpleName: BindParseNode(491) into SimpleType: BindParseNode(492) at 0", "Insert MethodInvocation(503) into ExpressionStatement(504) at 0", "Update SimpleName: incrementByExpr(489) to evalExpression", "Move SimpleName: incrementByExpr(489) into MethodInvocation(544) at 0", "Update SimpleName: evaluate(490) to sequence", "Move SimpleName: evaluate(490) into MethodInvocation(544) at 1", "Update SimpleName: ptr(492) to context", "Move SimpleName: ptr(492) into MethodInvocation(544) at 2", "Move MethodInvocation(486) into MethodInvocation(544) at 3", "Insert QualifiedName: SQLExceptionCode.INCREMENT_BY_MUST_BE_CONSTANT(543) into MethodInvocation(544) at 4", "Move MethodInvocation(525) into ThrowStatement(564) at 0", "Update SimpleName: incrementByExpr(500) to evalExpression", "Move SimpleName: incrementByExpr(500) into MethodInvocation(578) at 0", "Update SimpleName: getDataType(501) to sequence", "Move SimpleName: getDataType(501) into MethodInvocation(578) at 1", "Update SimpleName: isCoercibleTo(503) to context", "Move SimpleName: isCoercibleTo(503) into MethodInvocation(578) at 2", "Insert MethodInvocation(576) into MethodInvocation(578) at 3", "Update QualifiedName: PDataType.LONG(504) to SQLExceptionCode.MAXVALUE_MUST_BE_CONSTANT", "Move QualifiedName: PDataType.LONG(504) into MethodInvocation(578) at 4", "Insert SimpleName: evalExpression(584) into MethodInvocation(592) at 0", "Insert SimpleName: sequence(585) into MethodInvocation(592) at 1", "Insert SimpleName: context(586) into MethodInvocation(592) at 2", "Insert MethodInvocation(590) into MethodInvocation(592) at 3", "Insert QualifiedName: SQLExceptionCode.MINVALUE_MUST_BE_CONSTANT(591) into MethodInvocation(592) at 4", "Insert SimpleType: TableName(599) into VariableDeclarationStatement(605) at 0", "Insert VariableDeclarationFragment(604) into VariableDeclarationStatement(605) at 1", "Insert MethodInvocation(615) into ThrowStatement(616) at 0", "Insert Assignment: =(633) into ExpressionStatement(634) at 0", "Insert Assignment: =(646) into ExpressionStatement(647) at 0", "Insert InfixExpression: ||(654) into IfStatement(675) at 0", "Insert Block(674) into IfStatement(675) at 1", "Insert Assignment: =(701) into ExpressionStatement(702) at 0", "Insert Assignment: =(714) into ExpressionStatement(715) at 0", "Insert InfixExpression: <(718) into IfStatement(739) at 0", "Move Block(632) into IfStatement(739) at 1", "Insert SimpleName: TableName(224) into SimpleType: TableName(225) at 0", "Insert SimpleName: sequenceName(226) into VariableDeclarationFragment(230) at 0", "Insert MethodInvocation(229) into VariableDeclarationFragment(230) at 1", "Update SimpleName: getSchemaName(238) to SequenceUtil", "Move SimpleName: getSchemaName(238) into MethodInvocation(241) at 0", "Update SimpleName: setTableName(241) to getException", "Move SimpleName: setTableName(241) into MethodInvocation(241) at 1", "Move MethodInvocation(244) into MethodInvocation(241) at 2", "Insert MethodInvocation(239) into MethodInvocation(241) at 3", "Update SimpleName: buildException(250) to code", "Move SimpleName: buildException(250) into MethodInvocation(241) at 4", "Insert MethodInvocation(289) into MethodInvocation(292) at 0", "Update SimpleName: isStateless(256) to isCoercibleTo", "Insert QualifiedName: PDataType.LONG(291) into MethodInvocation(292) at 2", "Insert SimpleName: TableName(295) into SimpleType: TableName(296) at 0", "Insert SimpleName: sequenceName(297) into VariableDeclarationFragment(301) at 0", "Insert MethodInvocation(300) into VariableDeclarationFragment(301) at 1", "Update SimpleName: getSchemaName(267) to SequenceUtil", "Move SimpleName: getSchemaName(267) into MethodInvocation(312) at 0", "Update SimpleName: setTableName(270) to getException", "Move SimpleName: setTableName(270) into MethodInvocation(312) at 1", "Move MethodInvocation(273) into MethodInvocation(312) at 2", "Insert MethodInvocation(310) into MethodInvocation(312) at 3", "Update SimpleName: buildException(279) to code", "Move SimpleName: buildException(279) into MethodInvocation(312) at 4", "Update SimpleName: isStateless(296) to expression", "Move SimpleName: isStateless(296) into MethodInvocation(323) at 0", "Insert SimpleName: getDataType(322) into MethodInvocation(323) at 1", "Update SimpleName: build(318) to validateNodeIsStateless", "Move SimpleName: build(318) into MethodInvocation(387) at 0", "Update SimpleName: buildException(320) to sequence", "Move SimpleName: buildException(320) into MethodInvocation(387) at 1", "Insert SimpleName: startsWithNode(385) into MethodInvocation(387) at 2", "Insert QualifiedName: SQLExceptionCode.START_WITH_MUST_BE_CONSTANT(386) into MethodInvocation(387) at 3", "Update SimpleName: setSchemaName(444) to validateNodeIsStateless", "Move SimpleName: setSchemaName(444) into MethodInvocation(416) at 0", "Move SimpleName: sequence(445) into MethodInvocation(416) at 1", "Update SimpleName: getSequenceName(446) to cacheNode", "Move SimpleName: getSequenceName(446) into MethodInvocation(416) at 2", "Insert QualifiedName: SQLExceptionCode.CACHE_MUST_BE_NON_NEGATIVE_CONSTANT(415) into MethodInvocation(416) at 3", "Move MethodInvocation(454) into MethodInvocation(486) at 0", "Update SimpleName: getTableName(455) to addParamMetaData", "Move SimpleName: getTableName(455) into MethodInvocation(486) at 1", "Insert CastExpression(484) into MethodInvocation(486) at 2", "Insert SimpleName: LONG_DATUM(485) into MethodInvocation(486) at 3", "Move MethodInvocation(475) into MethodInvocation(503) at 0", "Insert SimpleName: addParamMetaData(497) into MethodInvocation(503) at 1", "Insert CastExpression(501) into MethodInvocation(503) at 2", "Insert SimpleName: LONG_DATUM(502) into MethodInvocation(503) at 3", "Update SimpleName: setSchemaName(512) to SequenceUtil", "Move SimpleName: setSchemaName(512) into MethodInvocation(563) at 0", "Update SimpleName: setTableName(519) to getException", "Move MethodInvocation(517) into MethodInvocation(563) at 3", "Insert QualifiedName: SQLExceptionCode.INCREMENT_BY_MUST_NOT_BE_ZERO(562) into MethodInvocation(563) at 4", "Insert SimpleName: maxValueNode(573) into MethodInvocation(576) at 0", "Insert SimpleName: accept(574) into MethodInvocation(576) at 1", "Insert SimpleName: expressionCompiler(575) into MethodInvocation(576) at 2", "Insert SimpleName: minValueNode(587) into MethodInvocation(590) at 0", "Insert SimpleName: accept(588) into MethodInvocation(590) at 1", "Insert SimpleName: expressionCompiler(589) into MethodInvocation(590) at 2", "Update SimpleName: Long(536) to TableName", "Move SimpleName: Long(536) into SimpleType: TableName(599) at 0", "Insert SimpleName: sequenceName(600) into VariableDeclarationFragment(604) at 0", "Insert MethodInvocation(603) into VariableDeclarationFragment(604) at 1", "Update SimpleName: toObject(539) to SequenceUtil", "Move SimpleName: toObject(539) into MethodInvocation(615) at 0", "Update SimpleName: ptr(540) to getException", "Move SimpleName: ptr(540) into MethodInvocation(615) at 1", "Insert MethodInvocation(610) into MethodInvocation(615) at 2", "Move MethodInvocation(543) into MethodInvocation(615) at 3", "Insert QualifiedName: SQLExceptionCode.MINVALUE_MUST_BE_LESS_THAN_OR_EQUAL_TO_MAXVALUE(614) into MethodInvocation(615) at 4", "Insert SimpleName: startsWithValue(626) into Assignment: =(633) at 0", "Insert ConditionalExpression(632) into Assignment: =(633) at 1", "Insert SimpleName: startsWithValue(636) into Assignment: =(646) at 0", "Insert MethodInvocation(645) into Assignment: =(646) at 1", "Insert InfixExpression: <(650) into InfixExpression: ||(654) at 0", "Insert InfixExpression: >(653) into InfixExpression: ||(654) at 1", "Insert VariableDeclarationStatement(662) into Block(674) at 0", "Insert ThrowStatement(673) into Block(674) at 1", "Insert SimpleName: cacheSizeValue(691) into Assignment: =(701) at 0", "Move MethodInvocation(558) into Assignment: =(701) at 1", "Insert SimpleName: cacheSizeValue(704) into Assignment: =(714) at 0", "Insert MethodInvocation(713) into Assignment: =(714) at 1", "Insert SimpleName: cacheSizeValue(716) into InfixExpression: <(718) at 0", "Move NumberLiteral: 0(604) into InfixExpression: <(718) at 1", "Insert VariableDeclarationStatement(726) into Block(738) at 0", "Insert ThrowStatement(737) into Block(738) at 1", "Move SimpleName: sequence(235) into MethodInvocation(229) at 0", "Move SimpleName: getSequenceName(236) into MethodInvocation(229) at 1", "Update SimpleName: sequence(242) to sequenceName", "Update SimpleName: getSequenceName(243) to getSchemaName", "Update SimpleName: getTableName(245) to sequenceName", "Move SimpleName: getTableName(245) into MethodInvocation(239) at 0", "Update SimpleName: build(248) to getTableName", "Move SimpleName: build(248) into MethodInvocation(239) at 1", "Insert SimpleName: expression(287) into MethodInvocation(289) at 0", "Update SimpleName: incrementByNode(255) to getDataType", "Move SimpleName: incrementByNode(255) into MethodInvocation(289) at 1", "Move SimpleName: sequence(264) into MethodInvocation(300) at 0", "Move SimpleName: getSequenceName(265) into MethodInvocation(300) at 1", "Update SimpleName: sequence(271) to sequenceName", "Update SimpleName: getSequenceName(272) to getSchemaName", "Update SimpleName: getTableName(274) to sequenceName", "Move SimpleName: getTableName(274) into MethodInvocation(310) at 0", "Update SimpleName: build(277) to getTableName", "Move SimpleName: build(277) into MethodInvocation(310) at 1", "Update SimpleName: sequence(452) to context", "Update SimpleName: getSequenceName(453) to getBindManager", "Insert SimpleType: BindParseNode(482) into CastExpression(484) at 0", "Insert SimpleName: maxValueNode(483) into CastExpression(484) at 1", "Update SimpleName: startsWithExpr(473) to context", "Update SimpleName: getDataType(474) to getBindManager", "Insert SimpleType: BindParseNode(499) into CastExpression(501) at 0", "Insert SimpleName: minValueNode(500) into CastExpression(501) at 1", "Insert SimpleName: sequence(601) into MethodInvocation(603) at 0", "Insert SimpleName: getSequenceName(602) into MethodInvocation(603) at 1", "Insert SimpleName: sequenceName(608) into MethodInvocation(610) at 0", "Insert SimpleName: getSchemaName(609) into MethodInvocation(610) at 1", "Update SimpleName: incrementByExpr(541) to sequenceName", "Update SimpleName: getDataType(542) to getTableName", "Insert InfixExpression: >(629) into ConditionalExpression(632) at 0", "Insert SimpleName: minValue(630) into ConditionalExpression(632) at 1", "Insert SimpleName: maxValue(631) into ConditionalExpression(632) at 2", "Update SimpleName: cacheSizeExpr(573) to evalExpression", "Move SimpleName: cacheSizeExpr(573) into MethodInvocation(645) at 0", "Update SimpleName: evaluate(574) to sequence", "Move SimpleName: evaluate(574) into MethodInvocation(645) at 1", "Update SimpleName: ptr(576) to context", "Move SimpleName: ptr(576) into MethodInvocation(645) at 2", "Move MethodInvocation(410) into MethodInvocation(645) at 3", "Insert QualifiedName: SQLExceptionCode.START_WITH_MUST_BE_CONSTANT(644) into MethodInvocation(645) at 4", "Insert SimpleName: startsWithValue(648) into InfixExpression: <(650) at 0", "Insert SimpleName: minValue(649) into InfixExpression: <(650) at 1", "Insert SimpleName: startsWithValue(651) into InfixExpression: >(653) at 0", "Insert SimpleName: maxValue(652) into InfixExpression: >(653) at 1", "Insert SimpleType: TableName(656) into VariableDeclarationStatement(662) at 0", "Insert VariableDeclarationFragment(661) into VariableDeclarationStatement(662) at 1", "Insert MethodInvocation(672) into ThrowStatement(673) at 0", "Update SimpleName: cacheSizeExpr(597) to evalExpression", "Move SimpleName: cacheSizeExpr(597) into MethodInvocation(713) at 0", "Update SimpleName: getDataType(598) to sequence", "Move SimpleName: getDataType(598) into MethodInvocation(713) at 1", "Insert SimpleName: context(707) into MethodInvocation(713) at 2", "Move MethodInvocation(570) into MethodInvocation(713) at 3", "Insert QualifiedName: SQLExceptionCode.CACHE_MUST_BE_NON_NEGATIVE_CONSTANT(712) into MethodInvocation(713) at 4", "Insert SimpleType: TableName(720) into VariableDeclarationStatement(726) at 0", "Insert VariableDeclarationFragment(725) into VariableDeclarationStatement(726) at 1", "Insert MethodInvocation(736) into ThrowStatement(737) at 0", "Insert SimpleName: BindParseNode(481) into SimpleType: BindParseNode(482) at 0", "Update SimpleName: Expression(480) to BindParseNode", "Move SimpleName: Expression(480) into SimpleType: BindParseNode(499) at 0", "Insert SimpleName: incrementBy(627) into InfixExpression: >(629) at 0", "Insert NumberLiteral: 0(628) into InfixExpression: >(629) at 1", "Insert SimpleName: TableName(655) into SimpleType: TableName(656) at 0", "Insert SimpleName: sequenceName(657) into VariableDeclarationFragment(661) at 0", "Insert MethodInvocation(660) into VariableDeclarationFragment(661) at 1", "Insert SimpleName: SequenceUtil(663) into MethodInvocation(672) at 0", "Insert SimpleName: getException(664) into MethodInvocation(672) at 1", "Move MethodInvocation(586) into MethodInvocation(672) at 2", "Insert MethodInvocation(670) into MethodInvocation(672) at 3", "Update QualifiedName: PDataType.LONG(588) to SQLExceptionCode.STARTS_WITH_MUST_BE_BETWEEN_MIN_MAX_VALUE", "Move QualifiedName: PDataType.LONG(588) into MethodInvocation(672) at 4", "Insert SimpleName: TableName(719) into SimpleType: TableName(720) at 0", "Insert SimpleName: sequenceName(721) into VariableDeclarationFragment(725) at 0", "Insert MethodInvocation(724) into VariableDeclarationFragment(725) at 1", "Update SimpleName: getSchemaName(617) to SequenceUtil", "Move SimpleName: getSchemaName(617) into MethodInvocation(736) at 0", "Update SimpleName: setTableName(620) to getException", "Move SimpleName: setTableName(620) into MethodInvocation(736) at 1", "Move MethodInvocation(623) into MethodInvocation(736) at 2", "Insert MethodInvocation(734) into MethodInvocation(736) at 3", "Insert QualifiedName: SQLExceptionCode.CACHE_MUST_BE_NON_NEGATIVE_CONSTANT(735) into MethodInvocation(736) at 4", "Update SimpleName: ptr(579) to sequence", "Move SimpleName: ptr(579) into MethodInvocation(660) at 0", "Update SimpleName: getLength(580) to getSequenceName", "Move SimpleName: getLength(580) into MethodInvocation(660) at 1", "Update SimpleName: cacheSizeExpr(584) to sequenceName", "Update SimpleName: getDataType(585) to getSchemaName", "Insert SimpleName: sequenceName(668) into MethodInvocation(670) at 0", "Update SimpleName: isCoercibleTo(587) to getTableName", "Move SimpleName: isCoercibleTo(587) into MethodInvocation(670) at 1", "Move SimpleName: sequence(614) into MethodInvocation(724) at 0", "Move SimpleName: getSequenceName(615) into MethodInvocation(724) at 1", "Update SimpleName: sequence(621) to sequenceName", "Update SimpleName: getSequenceName(622) to getSchemaName", "Update SimpleName: getTableName(624) to sequenceName", "Move SimpleName: getTableName(624) into MethodInvocation(734) at 0", "Update SimpleName: build(627) to getTableName", "Move SimpleName: build(627) into MethodInvocation(734) at 1", "Insert SimpleName: minValue(778) into MethodInvocation(780) at 6", "Insert SimpleName: maxValue(779) into MethodInvocation(780) at 7", "Delete QualifiedName: SQLExceptionInfo.Builder(230)", "Delete SimpleType: SQLExceptionInfo.Builder(231)", "Delete QualifiedName: SQLExceptionCode.STARTS_WITH_MUST_BE_CONSTANT(232)", "Delete ClassInstanceCreation(233)", "Delete SimpleName: setSchemaName(234)", "Delete MethodInvocation(237)", "Delete MethodInvocation(239)", "Delete MethodInvocation(240)", "Delete MethodInvocation(246)", "Delete MethodInvocation(247)", "Delete MethodInvocation(249)", "Delete MethodInvocation(251)", "Delete ThrowStatement(252)", "Delete PrefixExpression: !(258)", "Delete QualifiedName: SQLExceptionInfo.Builder(259)", "Delete SimpleType: SQLExceptionInfo.Builder(260)", "Delete QualifiedName: SQLExceptionCode.INCREMENT_BY_MUST_BE_CONSTANT(261)", "Delete ClassInstanceCreation(262)", "Delete SimpleName: setSchemaName(263)", "Delete MethodInvocation(266)", "Delete MethodInvocation(268)", "Delete MethodInvocation(269)", "Delete MethodInvocation(275)", "Delete MethodInvocation(276)", "Delete MethodInvocation(278)", "Delete MethodInvocation(280)", "Delete ThrowStatement(281)", "Delete NullLiteral(423)", "Delete QualifiedName: SQLExceptionInfo.Builder(508)", "Delete SimpleType: SQLExceptionInfo.Builder(509)", "Delete QualifiedName: SQLExceptionCode.INCREMENT_BY_MUST_BE_CONSTANT(510)", "Delete ClassInstanceCreation(511)", "Delete MethodInvocation(518)", "Delete SimpleName: build(526)", "Delete MethodInvocation(527)", "Delete SimpleName: buildException(528)", "Delete MethodInvocation(529)", "Delete NullLiteral(575)", "Delete MethodInvocation(577)", "Delete QualifiedName: SQLExceptionInfo.Builder(609)", "Delete SimpleType: SQLExceptionInfo.Builder(610)", "Delete QualifiedName: SQLExceptionCode.CACHE_MUST_BE_NON_NEGATIVE_CONSTANT(611)", "Delete ClassInstanceCreation(612)", "Delete SimpleName: setSchemaName(613)", "Delete MethodInvocation(616)", "Delete MethodInvocation(618)", "Delete MethodInvocation(619)", "Delete MethodInvocation(625)", "Delete MethodInvocation(626)", "Delete MethodInvocation(628)", "Delete SimpleName: buildException(629)", "Delete MethodInvocation(630)", "Delete ThrowStatement(631)", "Delete SimpleName: compile(202)", "Delete MethodInvocation(297)", "Delete PrefixExpression: !(298)", "Delete InfixExpression: &&(299)", "Delete QualifiedName: SQLExceptionInfo.Builder(300)", "Delete SimpleType: SQLExceptionInfo.Builder(301)", "Delete QualifiedName: SQLExceptionCode.CACHE_MUST_BE_NON_NEGATIVE_CONSTANT(302)", "Delete ClassInstanceCreation(303)", "Delete SimpleName: setSchemaName(304)", "Delete MethodInvocation(307)", "Delete SimpleName: getSchemaName(308)", "Delete MethodInvocation(309)", "Delete MethodInvocation(310)", "Delete SimpleName: setTableName(311)", "Delete MethodInvocation(314)", "Delete SimpleName: getTableName(315)", "Delete MethodInvocation(316)", "Delete MethodInvocation(317)", "Delete MethodInvocation(319)", "Delete MethodInvocation(321)", "Delete ThrowStatement(322)", "Delete Block(323)", "Delete IfStatement(324)", "Delete SimpleName: startsWithExpr(406)", "Delete VariableDeclarationFragment(411)", "Delete VariableDeclarationStatement(412)", "Delete MethodInvocation(434)", "Delete MethodInvocation(437)", "Delete PrefixExpression: !(438)", "Delete InfixExpression: ||(439)", "Delete QualifiedName: SQLExceptionInfo.Builder(440)", "Delete SimpleType: SQLExceptionInfo.Builder(441)", "Delete QualifiedName: SQLExceptionCode.STARTS_WITH_MUST_BE_CONSTANT(442)", "Delete ClassInstanceCreation(443)", "Delete MethodInvocation(447)", "Delete SimpleName: getSchemaName(448)", "Delete MethodInvocation(449)", "Delete MethodInvocation(450)", "Delete SimpleName: setTableName(451)", "Delete MethodInvocation(456)", "Delete MethodInvocation(457)", "Delete SimpleName: build(458)", "Delete MethodInvocation(459)", "Delete SimpleName: buildException(460)", "Delete MethodInvocation(461)", "Delete ThrowStatement(462)", "Delete Block(463)", "Delete IfStatement(464)", "Delete Modifier: final(465)", "Delete PrimitiveType: long(466)", "Delete SimpleName: startsWith(467)", "Delete QualifiedName: PDataType.LONG(470)", "Delete SimpleName: toObject(471)", "Delete SimpleName: ptr(472)", "Delete MethodInvocation(476)", "Delete CastExpression(477)", "Delete VariableDeclarationFragment(478)", "Delete VariableDeclarationStatement(479)", "Delete SimpleType: Expression(481)", "Delete VariableDeclarationFragment(487)", "Delete VariableDeclarationStatement(488)", "Delete NullLiteral(491)", "Delete MethodInvocation(493)", "Delete ExpressionStatement(494)", "Delete SimpleName: ptr(495)", "Delete SimpleName: getLength(496)", "Delete MethodInvocation(497)", "Delete InfixExpression: ==(499)", "Delete MethodInvocation(502)", "Delete MethodInvocation(505)", "Delete PrefixExpression: !(506)", "Delete InfixExpression: ||(507)", "Delete IfStatement(532)", "Delete SimpleType: Long(537)", "Delete QualifiedName: PDataType.LONG(538)", "Delete MethodInvocation(544)", "Delete CastExpression(545)", "Delete VariableDeclarationFragment(546)", "Delete VariableDeclarationStatement(547)", "Delete SimpleName: Expression(564)", "Delete SimpleType: Expression(565)", "Delete SimpleName: cacheSizeExpr(566)", "Delete VariableDeclarationFragment(571)", "Delete VariableDeclarationStatement(572)", "Delete MethodInvocation(581)", "Delete NumberLiteral: 0(582)", "Delete InfixExpression: !=(583)", "Delete MethodInvocation(589)", "Delete PrefixExpression: !(590)", "Delete SimpleName: cacheSizeValue(591)", "Delete SimpleName: Long(592)", "Delete SimpleType: Long(593)", "Delete QualifiedName: PDataType.LONG(594)", "Delete SimpleName: toObject(595)", "Delete SimpleName: ptr(596)", "Delete MethodInvocation(599)", "Delete MethodInvocation(600)", "Delete CastExpression(601)", "Delete Assignment: =(602)", "Delete ParenthesizedExpression(603)", "Delete InfixExpression: <(605)", "Delete InfixExpression: ||(606)", "Delete ParenthesizedExpression(607)", "Delete InfixExpression: &&(608)", "Delete IfStatement(633)", "Delete Block(634)", "Delete IfStatement(635)", "Delete Block(731)", "Delete MethodDeclaration(732)"]}}, {"SequenceRegionObserver_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: java.sql.SQLException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS ImportDeclaration to CompilationUnit at 34", "operations": ["INS ImportDeclaration to CompilationUnit at 34", "INS QualifiedName: org.apache.phoenix.util.SequenceUtil to ImportDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 11", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 10", "MOV VariableDeclarationStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 14"]}, {"root": "INS VariableDeclarationStatement to Block at 11", "operations": ["INS SimpleName: Sequence to MethodInvocation at 0", "INS SimpleName: KeyValue to SimpleType: KeyValue at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: result to MethodInvocation at 2", "INS SimpleName: cycleKV to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: KeyValue to VariableDeclarationStatement at 0", "INS SimpleName: getCycleKV to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 11"]}, {"root": "INS VariableDeclarationStatement to Block at 12", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: result to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 12", "INS SimpleName: KeyValue to SimpleType: KeyValue at 0", "INS SimpleName: minValueKV to VariableDeclarationFragment at 0", "INS SimpleName: getMinValueKV to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: KeyValue to VariableDeclarationStatement at 0", "INS SimpleName: Sequence to MethodInvocation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 13", "operations": ["INS SimpleName: result to MethodInvocation at 2", "INS SimpleName: KeyValue to SimpleType: KeyValue at 0", "INS SimpleName: getMaxValueKV to MethodInvocation at 1", "INS SimpleType: KeyValue to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Sequence to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 13", "INS SimpleName: maxValueKV to VariableDeclarationFragment at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 15", "operations": ["INS SimpleName: getCells to MethodInvocation at 1", "INS SimpleType: Cell to ParameterizedType: List<Cell> at 1", "INS VariableDeclarationStatement to Block at 15", "INS SimpleName: result to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: Cell to SimpleType: Cell at 0", "INS SimpleName: Sequence to MethodInvocation at 0", "INS SimpleType: List to ParameterizedType: List<Cell> at 0", "INS SimpleName: newkvs to VariableDeclarationFragment at 0", "INS ParameterizedType: List<Cell> to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS IfStatement to Block at 19", "operations": ["INS QualifiedName: Long.MIN_VALUE to Assignment: = at 1", "INS SimpleName: encodeLong to MethodInvocation at 1", "INS NumberLiteral: 0 to MethodInvocation at 4", "INS ExpressionStatement to Block at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: put to MethodInvocation at 0", "INS QualifiedName: PhoenixDatabaseMetaData.MIN_VALUE_BYTES to MethodInvocation at 4", "INS SimpleName: replaceMinValueKV to MethodInvocation at 1", "INS SimpleName: newMinValueBuffer to MethodInvocation at 3", "INS Assignment: = to ExpressionStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: Sequence to MethodInvocation at 0", "INS Block to IfStatement at 2", "INS SimpleName: KeyValueUtil to MethodInvocation at 0", "INS QualifiedName: PhoenixDatabaseMetaData.SEQUENCE_FAMILY_BYTES to MethodInvocation at 3", "INS SimpleName: minValue to Assignment: = at 0", "INS SimpleName: newKeyValue to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: row to MethodInvocation at 2", "INS IfStatement to Block at 19", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: newMinValueKV to MethodInvocation at 2", "INS SimpleName: minValueKV to InfixExpression: == at 0", "INS InfixExpression: == to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: minValue to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: newMinValueKV to VariableDeclarationFragment at 0", "INS SimpleName: newMinValueBuffer to MethodInvocation at 6", "INS SimpleName: newkvs to MethodInvocation at 2", "INS SimpleName: newMinValueKV to MethodInvocation at 3", "INS ExpressionStatement to Block at 5", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 20", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 20", "INS SimpleName: maxValue to VariableDeclarationFragment at 0"]}, {"root": "INS IfStatement to Block at 21", "operations": ["INS ArrayType: byte[] to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: decodeLong to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: KeyValue to SimpleType: KeyValue at 0", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to ArrayCreation at 1", "INS Block to IfStatement at 2", "INS SimpleName: Sequence to MethodInvocation at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: maxValueKV to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: getValueOffset to MethodInvocation at 1", "INS ExpressionStatement to Block at 5", "INS QualifiedName: Long.MAX_VALUE to Assignment: = at 1", "INS SimpleName: SortOrder to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: maxValue to Assignment: = at 0", "INS ArrayCreation to VariableDeclarationFragment at 1", "INS InfixExpression: == to IfStatement at 0", "INS ArrayType: byte[] to ArrayCreation at 0", "INS IfStatement to Block at 21", "INS QualifiedName: PhoenixDatabaseMetaData.MAX_VALUE_BYTES to MethodInvocation at 4", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: replaceMaxValueKV to MethodInvocation at 1", "INS SimpleName: getDefault to MethodInvocation at 1", "INS SimpleName: maxValueKV to MethodInvocation at 0", "INS SimpleName: put to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS Dimension to ArrayType: byte[] at 1", "INS Dimension to ArrayType: byte[] at 1", "INS QualifiedName: PDataType.LONG to MethodInvocation at 0", "INS SimpleName: newkvs to MethodInvocation at 2", "INS ExpressionStatement to Block at 4", "INS SimpleName: maxValue to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: newMaxValueBuffer to MethodInvocation at 6", "INS SimpleName: newMaxValueKV to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: add to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getCodec to MethodInvocation at 1", "INS SimpleName: getValueArray to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 4", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: getByteSize to MethodInvocation at 1", "INS QualifiedName: PDataType.LONG to MethodInvocation at 0", "INS SimpleName: newMaxValueBuffer to VariableDeclarationFragment at 0", "INS SimpleName: maxValueKV to MethodInvocation at 0", "INS SimpleType: KeyValue to VariableDeclarationStatement at 0", "INS SimpleName: newMaxValueKV to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 22", "operations": ["INS SimpleName: cycle to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 22", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0"]}, {"root": "INS IfStatement to Block at 23", "operations": ["INS QualifiedName: PhoenixDatabaseMetaData.CYCLE_FLAG_BYTES to MethodInvocation at 4", "INS Assignment: = to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to CastExpression at 1", "INS QualifiedName: PDataType.BOOLEAN to MethodInvocation at 0", "INS QualifiedName: PhoenixDatabaseMetaData.SEQUENCE_FAMILY_BYTES to MethodInvocation at 3", "INS SimpleName: replaceCycleValueKV to MethodInvocation at 1", "INS SimpleName: cycleKV to MethodInvocation at 0", "INS SimpleName: cycleKV to InfixExpression: == at 0", "INS ExpressionStatement to Block at 0", "INS QualifiedName: PDataType.FALSE_BYTES to MethodInvocation at 6", "INS SimpleName: newCycleKV to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: KeyValue to SimpleType: KeyValue at 0", "INS SimpleName: cycleKV to MethodInvocation at 0", "INS SimpleName: newkvs to MethodInvocation at 2", "INS SimpleName: getValueOffset to MethodInvocation at 1", "INS SimpleName: newCycleKV to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: cycle to Assignment: = at 0", "INS SimpleName: toObject to MethodInvocation at 1", "INS BooleanLiteral: false to Assignment: = at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: cycleKV to MethodInvocation at 0", "INS SimpleName: newCycleKV to VariableDeclarationFragment at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Block to IfStatement at 2", "INS ExpressionStatement to Block at 2", "INS SimpleName: put to MethodInvocation at 0", "INS SimpleName: newKeyValue to MethodInvocation at 1", "INS SimpleName: Sequence to MethodInvocation at 0", "INS SimpleName: row to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 3", "INS ExpressionStatement to Block at 3", "INS SimpleName: Boolean to SimpleType: Boolean at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: KeyValue to VariableDeclarationStatement at 0", "INS InfixExpression: == to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleType: Boolean to CastExpression at 0", "INS SimpleName: getValueArray to MethodInvocation at 1", "INS IfStatement to Block at 23", "INS SimpleName: KeyValueUtil to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS CastExpression to Assignment: = at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: cycle to Assignment: = at 0", "INS SimpleName: getValueLength to MethodInvocation at 1", "INS Block to IfStatement at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 24", "operations": ["INS SimpleName: currentValue to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 24"]}, {"root": "INS IfStatement to Block at 25", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: Sequence to MethodInvocation at 0", "INS SimpleName: cacheSize to MethodInvocation at 6", "INS SimpleName: incrementBy to MethodInvocation at 5", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleName: row to MethodInvocation at 1", "INS SimpleName: currentValue to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getCodec to MethodInvocation at 1", "INS SimpleName: getErrorResult to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: SortOrder to MethodInvocation at 0", "INS SimpleName: getDefault to MethodInvocation at 1", "INS SimpleName: maxValue to MethodInvocation at 4", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS TryStatement to Block at 1", "INS SimpleName: startValueKV to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS SimpleName: getStartValueKV to MethodInvocation at 1", "INS SimpleName: sqlE to SingleVariableDeclaration at 1", "INS SimpleName: maxTimestamp to MethodInvocation at 2", "INS Block to TryStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: cycle to MethodInvocation at 7", "INS SimpleName: currentValue to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: SequenceUtil to MethodInvocation at 0", "INS SimpleName: currentValue to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS ReturnStatement to Block at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleType: KeyValue to VariableDeclarationStatement at 0", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: decodeLong to MethodInvocation at 1", "INS CatchClause to TryStatement at 1", "INS Block to IfStatement at 2", "INS Block to CatchClause at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: sqlE to MethodInvocation at 0", "INS SimpleName: result to MethodInvocation at 2", "INS QualifiedName: PDataType.LONG to MethodInvocation at 0", "INS IfStatement to Block at 25", "INS SimpleName: KeyValue to SimpleType: KeyValue at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: getNextValue to MethodInvocation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 26", "operations": ["INS Dimension to ArrayType: byte[] at 1", "INS VariableDeclarationStatement to Block at 26", "INS QualifiedName: PDataType.LONG to MethodInvocation at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: getByteSize to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: newCurrentValueBuffer to VariableDeclarationFragment at 0", "INS MethodInvocation to ArrayCreation at 1", "INS ArrayType: byte[] to VariableDeclarationStatement at 0", "INS Dimension to ArrayType: byte[] at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS ArrayCreation to VariableDeclarationFragment at 1", "INS ArrayType: byte[] to ArrayCreation at 0"]}, {"root": "INS ExpressionStatement to Block at 27", "operations": ["INS QualifiedName: PDataType.LONG to MethodInvocation at 0", "INS SimpleName: newCurrentValueBuffer to MethodInvocation at 3", "INS SimpleName: currentValue to MethodInvocation at 2", "INS SimpleName: encodeLong to MethodInvocation at 1", "INS SimpleName: getCodec to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 27", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 28", "operations": ["INS SimpleName: row to MethodInvocation at 2", "INS SimpleName: newKeyValue to MethodInvocation at 1", "INS SimpleName: KeyValue to SimpleType: KeyValue at 0", "INS SimpleName: newCurrentValueBuffer to MethodInvocation at 4", "INS VariableDeclarationStatement to Block at 28", "INS SimpleName: KeyValueUtil to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: newCurrentValueKV to VariableDeclarationFragment at 0", "INS SimpleType: KeyValue to VariableDeclarationStatement at 0", "INS SimpleName: currentValueKV to MethodInvocation at 3"]}, {"root": "INS ExpressionStatement to Block at 34", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 34"]}, {"root": "INS ReturnStatement to Block at 37", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: Result to MethodInvocation at 0", "INS ReturnStatement to Block at 37", "INS SimpleName: create to MethodInvocation at 1", "INS SimpleName: newkvs to MethodInvocation at 2"]}, {"root": "UPDATE from int to long", "operations": ["UPD PrimitiveType: int from int to long"]}, {"root": "UPDATE from getQualifierLength to minValue", "operations": ["UPD SimpleName: getQualifierLength from getQualifierLength to minValue", "UPD SimpleName: value from value to minValue", "UPD SimpleName: value from value to minValue"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: KeyValueUtil to MethodInvocation at 0", "MOV SimpleName: row to MethodInvocation at 2", "MOV MethodInvocation to MethodInvocation at 3", "MOV MethodInvocation to MethodInvocation at 5", "MOV SimpleName: newKeyValue to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 5", "MOV MethodInvocation to MethodInvocation at 5", "MOV NumberLiteral: 0 to MethodInvocation at 4", "MOV MethodInvocation to MethodInvocation at 2", "MOV QualifiedName: row.length to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: result to MethodInvocation at 2", "MOV SimpleName: replaceCurrentValueKV to MethodInvocation at 1", "MOV SimpleName: Sequence to MethodInvocation at 0", "MOV SimpleName: newCurrentValueKV to MethodInvocation at 3"]}, {"root": "UPDATE from result to newkvs", "operations": ["UPD SimpleName: result from result to newkvs"]}, {"root": "UPDATE from decodeInt to decodeLong", "operations": ["UPD SimpleName: decodeInt from decodeInt to decodeLong"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: KeyValue to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from += to =", "operations": ["UPD Assignment: += from += to ="]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getFamilyLength to MethodInvocation at 1", "MOV SimpleName: currentValueKV to MethodInvocation at 0"]}, {"root": "UPDATE from getFamilyLength to getValueLength", "operations": ["UPD SimpleName: getFamilyLength from getFamilyLength to getValueLength"]}, {"root": "UPDATE from valueBuffer to newMinValueBuffer", "operations": ["UPD SimpleName: valueBuffer from valueBuffer to newMinValueBuffer"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to Assignment: += at 1", "operations": ["INS SimpleName: minValueKV to MethodInvocation at 0", "INS SimpleName: getDefault to MethodInvocation at 1", "INS SimpleName: decodeLong to MethodInvocation at 1", "INS SimpleName: SortOrder to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: minValueKV to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getValueOffset to MethodInvocation at 1", "INS MethodInvocation to Assignment: += at 1", "INS MethodInvocation to MethodInvocation at 3", "INS QualifiedName: PDataType.LONG to MethodInvocation at 0", "INS SimpleName: getCodec to MethodInvocation at 1", "INS SimpleName: getValueArray to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 4"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getCodec to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS QualifiedName: PDataType.LONG to MethodInvocation at 0"]}, {"root": "UPDATE from value to maxValue", "operations": ["UPD SimpleName: value from value to maxValue"]}, {"root": "UPDATE from valueBuffer to newMaxValueBuffer", "operations": ["UPD SimpleName: valueBuffer from valueBuffer to newMaxValueBuffer"]}, {"root": "UPDATE from newCurrentValueKV to newMaxValueKV", "operations": ["UPD SimpleName: newCurrentValueKV from newCurrentValueKV to newMaxValueKV"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: newCurrentValueKV to VariableDeclarationFragment at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from row.length to PhoenixDatabaseMetaData.SEQUENCE_FAMILY_BYTES", "operations": ["UPD QualifiedName: row.length from row.length to PhoenixDatabaseMetaData.SEQUENCE_FAMILY_BYTES"]}, {"root": "UPDATE from getFamilyArray to getTimestamp", "operations": ["UPD SimpleName: getFamilyArray from getFamilyArray to getTimestamp", "UPD SimpleName: getFamilyOffset from getFamilyOffset to getTimestamp"]}, {"root": "UPDATE from currentValueKV to startValueKV", "operations": ["UPD SimpleName: currentValueKV from currentValueKV to startValueKV", "UPD SimpleName: currentValueKV from currentValueKV to startValueKV"]}, {"root": "UPDATE from getQualifierArray to getValueArray", "operations": ["UPD SimpleName: getQualifierArray from getQualifierArray to getValueArray"]}, {"root": "UPDATE from getQualifierOffset to getValueOffset", "operations": ["UPD SimpleName: getQualifierOffset from getQualifierOffset to getValueOffset"]}, {"root": "UPDATE from currentValueKV to currentValue", "operations": ["UPD SimpleName: currentValueKV from currentValueKV to currentValue"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getQualifierLength to MethodInvocation at 3", "MOV SimpleName: currentValueKV to MethodInvocation at 2"]}, {"root": "DEL InfixExpression: *", "operations": ["DEL SimpleName: incrementBy", "DEL InfixExpression: *", "DEL SimpleName: cacheSize"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL QualifiedName: valueBuffer.length", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: valueBuffer", "DEL VariableDeclarationStatement"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL MethodInvocation"]}]}}, {"SequenceRegionObserver_diff": {"operations": ["Insert ImportDeclaration(5) into CompilationUnit(1563) at 2", "Insert ImportDeclaration(69) into CompilationUnit(1563) at 34", "Insert QualifiedName: java.sql.SQLException(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: org.apache.phoenix.util.SequenceUtil(68) into ImportDeclaration(69) at 0", "Move VariableDeclarationStatement(473) into Block(950) at 10", "Move VariableDeclarationStatement(509) into Block(950) at 14", "Move VariableDeclarationStatement(585) into Block(950) at 11", "Insert VariableDeclarationStatement(504) into Block(950) at 11", "Insert VariableDeclarationStatement(513) into Block(950) at 12", "Insert VariableDeclarationStatement(522) into Block(950) at 13", "Insert VariableDeclarationStatement(546) into Block(950) at 15", "Insert IfStatement(661) into Block(950) at 19", "Insert VariableDeclarationStatement(665) into Block(950) at 20", "Insert IfStatement(740) into Block(950) at 21", "Insert VariableDeclarationStatement(744) into Block(950) at 22", "Insert IfStatement(798) into Block(950) at 23", "Insert VariableDeclarationStatement(802) into Block(950) at 24", "Insert IfStatement(881) into Block(950) at 25", "Insert VariableDeclarationStatement(894) into Block(950) at 26", "Insert ExpressionStatement(903) into Block(950) at 27", "Insert VariableDeclarationStatement(914) into Block(950) at 28", "Insert ExpressionStatement(925) into Block(950) at 30", "Insert ReturnStatement(949) into Block(950) at 33", "Insert SimpleType: KeyValue(497) into VariableDeclarationStatement(504) at 0", "Insert VariableDeclarationFragment(503) into VariableDeclarationStatement(504) at 1", "Insert SimpleType: KeyValue(506) into VariableDeclarationStatement(513) at 0", "Insert VariableDeclarationFragment(512) into VariableDeclarationStatement(513) at 1", "Insert SimpleType: KeyValue(515) into VariableDeclarationStatement(522) at 0", "Insert VariableDeclarationFragment(521) into VariableDeclarationStatement(522) at 1", "Insert ParameterizedType: List<Cell>(539) into VariableDeclarationStatement(546) at 0", "Insert VariableDeclarationFragment(545) into VariableDeclarationStatement(546) at 1", "Update PrimitiveType: int(528) to long", "Insert InfixExpression: ==(589) into IfStatement(661) at 0", "Insert Block(642) into IfStatement(661) at 1", "Insert Block(660) into IfStatement(661) at 2", "Insert PrimitiveType: long(662) into VariableDeclarationStatement(665) at 0", "Insert VariableDeclarationFragment(664) into VariableDeclarationStatement(665) at 1", "Insert InfixExpression: ==(668) into IfStatement(740) at 0", "Insert Block(721) into IfStatement(740) at 1", "Insert Block(739) into IfStatement(740) at 2", "Insert PrimitiveType: boolean(741) into VariableDeclarationStatement(744) at 0", "Insert VariableDeclarationFragment(743) into VariableDeclarationStatement(744) at 1", "Insert InfixExpression: ==(747) into IfStatement(798) at 0", "Insert Block(778) into IfStatement(798) at 1", "Insert Block(797) into IfStatement(798) at 2", "Insert PrimitiveType: long(799) into VariableDeclarationStatement(802) at 0", "Insert VariableDeclarationFragment(801) into VariableDeclarationStatement(802) at 1", "Insert InfixExpression: ==(807) into IfStatement(881) at 0", "Insert Block(834) into IfStatement(881) at 1", "Insert Block(880) into IfStatement(881) at 2", "Insert ArrayType: byte[](884) into VariableDeclarationStatement(894) at 0", "Insert VariableDeclarationFragment(893) into VariableDeclarationStatement(894) at 1", "Insert MethodInvocation(902) into ExpressionStatement(903) at 0", "Insert SimpleType: KeyValue(905) into VariableDeclarationStatement(914) at 0", "Insert VariableDeclarationFragment(913) into VariableDeclarationStatement(914) at 1", "Insert MethodInvocation(924) into ExpressionStatement(925) at 0", "Insert MethodInvocation(948) into ReturnStatement(949) at 0", "Insert SimpleName: KeyValue(496) into SimpleType: KeyValue(497) at 0", "Insert SimpleName: cycleKV(498) into VariableDeclarationFragment(503) at 0", "Insert MethodInvocation(502) into VariableDeclarationFragment(503) at 1", "Insert SimpleName: KeyValue(505) into SimpleType: KeyValue(506) at 0", "Insert SimpleName: minValueKV(507) into VariableDeclarationFragment(512) at 0", "Insert MethodInvocation(511) into VariableDeclarationFragment(512) at 1", "Insert SimpleName: KeyValue(514) into SimpleType: KeyValue(515) at 0", "Insert SimpleName: maxValueKV(516) into VariableDeclarationFragment(521) at 0", "Insert MethodInvocation(520) into VariableDeclarationFragment(521) at 1", "Insert SimpleType: List(536) into ParameterizedType: List<Cell>(539) at 0", "Insert SimpleType: Cell(538) into ParameterizedType: List<Cell>(539) at 1", "Insert SimpleName: newkvs(540) into VariableDeclarationFragment(545) at 0", "Insert MethodInvocation(544) into VariableDeclarationFragment(545) at 1", "Update SimpleName: value(493) to minValue", "Insert SimpleName: minValueKV(587) into InfixExpression: ==(589) at 0", "Insert NullLiteral(588) into InfixExpression: ==(589) at 1", "Insert ExpressionStatement(593) into Block(642) at 0", "Move VariableDeclarationStatement(564) into Block(642) at 1", "Insert ExpressionStatement(615) into Block(642) at 2", "Insert VariableDeclarationStatement(630) into Block(642) at 3", "Insert ExpressionStatement(635) into Block(642) at 4", "Insert ExpressionStatement(641) into Block(642) at 5", "Move ExpressionStatement(551) into Block(660) at 0", "Insert SimpleName: maxValue(663) into VariableDeclarationFragment(664) at 0", "Insert SimpleName: maxValueKV(666) into InfixExpression: ==(668) at 0", "Insert NullLiteral(667) into InfixExpression: ==(668) at 1", "Insert ExpressionStatement(672) into Block(721) at 0", "Insert VariableDeclarationStatement(685) into Block(721) at 1", "Move ExpressionStatement(573) into Block(721) at 2", "Insert VariableDeclarationStatement(709) into Block(721) at 3", "Insert ExpressionStatement(714) into Block(721) at 4", "Insert ExpressionStatement(720) into Block(721) at 5", "Insert ExpressionStatement(738) into Block(739) at 0", "Insert SimpleName: cycle(742) into VariableDeclarationFragment(743) at 0", "Insert SimpleName: cycleKV(745) into InfixExpression: ==(747) at 0", "Insert NullLiteral(746) into InfixExpression: ==(747) at 1", "Insert ExpressionStatement(751) into Block(778) at 0", "Insert VariableDeclarationStatement(766) into Block(778) at 1", "Insert ExpressionStatement(771) into Block(778) at 2", "Insert ExpressionStatement(777) into Block(778) at 3", "Insert ExpressionStatement(796) into Block(797) at 0", "Insert SimpleName: currentValue(800) into VariableDeclarationFragment(801) at 0", "Insert MethodInvocation(805) into InfixExpression: ==(807) at 0", "Insert NumberLiteral: 0(806) into InfixExpression: ==(807) at 1", "Insert VariableDeclarationStatement(816) into Block(834) at 0", "Insert ExpressionStatement(833) into Block(834) at 1", "Insert ExpressionStatement(851) into Block(880) at 0", "Insert TryStatement(879) into Block(880) at 1", "Insert PrimitiveType: byte(882) into ArrayType: byte[](884) at 0", "Insert Dimension(883) into ArrayType: byte[](884) at 1", "Insert SimpleName: newCurrentValueBuffer(885) into VariableDeclarationFragment(893) at 0", "Insert ArrayCreation(892) into VariableDeclarationFragment(893) at 1", "Insert MethodInvocation(897) into MethodInvocation(902) at 0", "Insert SimpleName: encodeLong(898) into MethodInvocation(902) at 1", "Insert SimpleName: currentValue(899) into MethodInvocation(902) at 2", "Insert SimpleName: newCurrentValueBuffer(900) into MethodInvocation(902) at 3", "Move NumberLiteral: 0(616) into MethodInvocation(902) at 4", "Insert SimpleName: KeyValue(904) into SimpleType: KeyValue(905) at 0", "Insert SimpleName: newCurrentValueKV(906) into VariableDeclarationFragment(913) at 0", "Insert MethodInvocation(912) into VariableDeclarationFragment(913) at 1", "Move SimpleName: Sequence(645) into MethodInvocation(924) at 0", "Move SimpleName: replaceCurrentValueKV(646) into MethodInvocation(924) at 1", "Update SimpleName: result(647) to newkvs", "Move SimpleName: result(647) into MethodInvocation(924) at 2", "Move SimpleName: newCurrentValueKV(648) into MethodInvocation(924) at 3", "Insert SimpleName: Result(945) into MethodInvocation(948) at 0", "Insert SimpleName: create(946) into MethodInvocation(948) at 1", "Insert SimpleName: newkvs(947) into MethodInvocation(948) at 2", "Insert SimpleName: Sequence(499) into MethodInvocation(502) at 0", "Insert SimpleName: getCycleKV(500) into MethodInvocation(502) at 1", "Insert SimpleName: result(501) into MethodInvocation(502) at 2", "Insert SimpleName: Sequence(508) into MethodInvocation(511) at 0", "Insert SimpleName: getMinValueKV(509) into MethodInvocation(511) at 1", "Insert SimpleName: result(510) into MethodInvocation(511) at 2", "Insert SimpleName: Sequence(517) into MethodInvocation(520) at 0", "Insert SimpleName: getMaxValueKV(518) into MethodInvocation(520) at 1", "Insert SimpleName: result(519) into MethodInvocation(520) at 2", "Insert SimpleName: List(535) into SimpleType: List(536) at 0", "Insert SimpleName: Cell(537) into SimpleType: Cell(538) at 0", "Insert SimpleName: Sequence(541) into MethodInvocation(544) at 0", "Insert SimpleName: getCells(542) into MethodInvocation(544) at 1", "Insert SimpleName: result(543) into MethodInvocation(544) at 2", "Update SimpleName: decodeInt(533) to decodeLong", "Insert Assignment: =(592) into ExpressionStatement(593) at 0", "Insert MethodInvocation(614) into ExpressionStatement(615) at 0", "Move SimpleType: KeyValue(587) into VariableDeclarationStatement(630) at 0", "Insert VariableDeclarationFragment(629) into VariableDeclarationStatement(630) at 1", "Insert MethodInvocation(634) into ExpressionStatement(635) at 0", "Insert MethodInvocation(640) into ExpressionStatement(641) at 0", "Update Assignment: +=(550) to =", "Insert Assignment: =(671) into ExpressionStatement(672) at 0", "Insert ArrayType: byte[](675) into VariableDeclarationStatement(685) at 0", "Insert VariableDeclarationFragment(684) into VariableDeclarationStatement(685) at 1", "Insert SimpleType: KeyValue(696) into VariableDeclarationStatement(709) at 0", "Insert VariableDeclarationFragment(708) into VariableDeclarationStatement(709) at 1", "Insert MethodInvocation(713) into ExpressionStatement(714) at 0", "Insert MethodInvocation(719) into ExpressionStatement(720) at 0", "Insert Assignment: =(737) into ExpressionStatement(738) at 0", "Insert Assignment: =(750) into ExpressionStatement(751) at 0", "Insert SimpleType: KeyValue(753) into VariableDeclarationStatement(766) at 0", "Insert VariableDeclarationFragment(765) into VariableDeclarationStatement(766) at 1", "Insert MethodInvocation(770) into ExpressionStatement(771) at 0", "Insert MethodInvocation(776) into ExpressionStatement(777) at 0", "Insert Assignment: =(795) into ExpressionStatement(796) at 0", "Move SimpleName: currentValueKV(600) into MethodInvocation(805) at 0", "Update SimpleName: getFamilyLength(601) to getValueLength", "Move SimpleName: getFamilyLength(601) into MethodInvocation(805) at 1", "Insert SimpleType: KeyValue(809) into VariableDeclarationStatement(816) at 0", "Insert VariableDeclarationFragment(815) into VariableDeclarationStatement(816) at 1", "Insert Assignment: =(832) into ExpressionStatement(833) at 0", "Insert Assignment: =(850) into ExpressionStatement(851) at 0", "Insert Block(864) into TryStatement(879) at 0", "Insert CatchClause(878) into TryStatement(879) at 1", "Insert ArrayType: byte[](888) into ArrayCreation(892) at 0", "Insert MethodInvocation(891) into ArrayCreation(892) at 1", "Insert QualifiedName: PDataType.LONG(895) into MethodInvocation(897) at 0", "Insert SimpleName: getCodec(896) into MethodInvocation(897) at 1", "Insert SimpleName: KeyValueUtil(907) into MethodInvocation(912) at 0", "Insert SimpleName: newKeyValue(908) into MethodInvocation(912) at 1", "Insert SimpleName: row(909) into MethodInvocation(912) at 2", "Insert SimpleName: currentValueKV(910) into MethodInvocation(912) at 3", "Insert SimpleName: newCurrentValueBuffer(911) into MethodInvocation(912) at 4", "Insert SimpleName: minValue(590) into Assignment: =(592) at 0", "Insert QualifiedName: Long.MIN_VALUE(591) into Assignment: =(592) at 1", "Update SimpleName: valueBuffer(555) to newMinValueBuffer", "Move MethodInvocation(567) into MethodInvocation(614) at 0", "Insert SimpleName: encodeLong(610) into MethodInvocation(614) at 1", "Insert SimpleName: minValue(611) into MethodInvocation(614) at 2", "Insert SimpleName: newMinValueBuffer(612) into MethodInvocation(614) at 3", "Insert NumberLiteral: 0(613) into MethodInvocation(614) at 4", "Insert SimpleName: newMinValueKV(618) into VariableDeclarationFragment(629) at 0", "Insert MethodInvocation(628) into VariableDeclarationFragment(629) at 1", "Insert SimpleName: put(631) into MethodInvocation(634) at 0", "Insert SimpleName: add(632) into MethodInvocation(634) at 1", "Insert SimpleName: newMinValueKV(633) into MethodInvocation(634) at 2", "Insert SimpleName: Sequence(636) into MethodInvocation(640) at 0", "Insert SimpleName: replaceMinValueKV(637) into MethodInvocation(640) at 1", "Insert SimpleName: newkvs(638) into MethodInvocation(640) at 2", "Insert SimpleName: newMinValueKV(639) into MethodInvocation(640) at 3", "Update SimpleName: value(546) to minValue", "Insert MethodInvocation(657) into Assignment: =(658) at 1", "Insert SimpleName: maxValue(669) into Assignment: =(671) at 0", "Insert QualifiedName: Long.MAX_VALUE(670) into Assignment: =(671) at 1", "Insert PrimitiveType: byte(673) into ArrayType: byte[](675) at 0", "Insert Dimension(674) into ArrayType: byte[](675) at 1", "Insert SimpleName: newMaxValueBuffer(676) into VariableDeclarationFragment(684) at 0", "Insert ArrayCreation(683) into VariableDeclarationFragment(684) at 1", "Insert MethodInvocation(688) into MethodInvocation(693) at 0", "Update SimpleName: value(569) to maxValue", "Update SimpleName: valueBuffer(570) to newMaxValueBuffer", "Insert SimpleName: KeyValue(695) into SimpleType: KeyValue(696) at 0", "Update SimpleName: newCurrentValueKV(588) to newMaxValueKV", "Move SimpleName: newCurrentValueKV(588) into VariableDeclarationFragment(708) at 0", "Insert MethodInvocation(707) into VariableDeclarationFragment(708) at 1", "Insert SimpleName: put(710) into MethodInvocation(713) at 0", "Insert SimpleName: add(711) into MethodInvocation(713) at 1", "Insert SimpleName: newMaxValueKV(712) into MethodInvocation(713) at 2", "Insert SimpleName: Sequence(715) into MethodInvocation(719) at 0", "Insert SimpleName: replaceMaxValueKV(716) into MethodInvocation(719) at 1", "Insert SimpleName: newkvs(717) into MethodInvocation(719) at 2", "Insert SimpleName: newMaxValueKV(718) into MethodInvocation(719) at 3", "Insert SimpleName: maxValue(722) into Assignment: =(737) at 0", "Insert MethodInvocation(736) into Assignment: =(737) at 1", "Insert SimpleName: cycle(748) into Assignment: =(750) at 0", "Insert BooleanLiteral: false(749) into Assignment: =(750) at 1", "Insert SimpleName: KeyValue(752) into SimpleType: KeyValue(753) at 0", "Insert SimpleName: newCycleKV(754) into VariableDeclarationFragment(765) at 0", "Insert MethodInvocation(764) into VariableDeclarationFragment(765) at 1", "Insert SimpleName: put(767) into MethodInvocation(770) at 0", "Insert SimpleName: add(768) into MethodInvocation(770) at 1", "Insert SimpleName: newCycleKV(769) into MethodInvocation(770) at 2", "Insert SimpleName: Sequence(772) into MethodInvocation(776) at 0", "Insert SimpleName: replaceCycleValueKV(773) into MethodInvocation(776) at 1", "Insert SimpleName: newkvs(774) into MethodInvocation(776) at 2", "Insert SimpleName: newCycleKV(775) into MethodInvocation(776) at 3", "Insert SimpleName: cycle(779) into Assignment: =(795) at 0", "Insert CastExpression(794) into Assignment: =(795) at 1", "Insert SimpleName: KeyValue(808) into SimpleType: KeyValue(809) at 0", "Insert SimpleName: startValueKV(810) into VariableDeclarationFragment(815) at 0", "Insert MethodInvocation(814) into VariableDeclarationFragment(815) at 1", "Insert SimpleName: currentValue(817) into Assignment: =(832) at 0", "Insert MethodInvocation(831) into Assignment: =(832) at 1", "Insert SimpleName: currentValue(835) into Assignment: =(850) at 0", "Move MethodInvocation(507) into Assignment: =(850) at 1", "Insert ExpressionStatement(863) into Block(864) at 0", "Insert SingleVariableDeclaration(868) into CatchClause(878) at 0", "Insert Block(877) into CatchClause(878) at 1", "Insert PrimitiveType: byte(886) into ArrayType: byte[](888) at 0", "Insert Dimension(887) into ArrayType: byte[](888) at 1", "Insert QualifiedName: PDataType.LONG(889) into MethodInvocation(891) at 0", "Insert SimpleName: getByteSize(890) into MethodInvocation(891) at 1", "Insert SimpleName: KeyValueUtil(619) into MethodInvocation(628) at 0", "Insert SimpleName: newKeyValue(620) into MethodInvocation(628) at 1", "Insert SimpleName: row(621) into MethodInvocation(628) at 2", "Insert QualifiedName: PhoenixDatabaseMetaData.SEQUENCE_FAMILY_BYTES(622) into MethodInvocation(628) at 3", "Insert QualifiedName: PhoenixDatabaseMetaData.MIN_VALUE_BYTES(623) into MethodInvocation(628) at 4", "Move MethodInvocation(614) into MethodInvocation(628) at 5", "Insert SimpleName: newMinValueBuffer(627) into MethodInvocation(628) at 6", "Insert MethodInvocation(646) into MethodInvocation(657) at 0", "Insert SimpleName: decodeLong(647) into MethodInvocation(657) at 1", "Insert MethodInvocation(650) into MethodInvocation(657) at 2", "Insert MethodInvocation(653) into MethodInvocation(657) at 3", "Insert MethodInvocation(656) into MethodInvocation(657) at 4", "Insert ArrayType: byte[](679) into ArrayCreation(683) at 0", "Insert MethodInvocation(682) into ArrayCreation(683) at 1", "Insert QualifiedName: PDataType.LONG(686) into MethodInvocation(688) at 0", "Insert SimpleName: getCodec(687) into MethodInvocation(688) at 1", "Move SimpleName: KeyValueUtil(589) into MethodInvocation(707) at 0", "Move SimpleName: newKeyValue(590) into MethodInvocation(707) at 1", "Move SimpleName: row(591) into MethodInvocation(707) at 2", "Update QualifiedName: row.length(593) to PhoenixDatabaseMetaData.SEQUENCE_FAMILY_BYTES", "Move QualifiedName: row.length(593) into MethodInvocation(707) at 3", "Insert QualifiedName: PhoenixDatabaseMetaData.MAX_VALUE_BYTES(702) into MethodInvocation(707) at 4", "Move MethodInvocation(596) into MethodInvocation(707) at 5", "Insert SimpleName: newMaxValueBuffer(706) into MethodInvocation(707) at 6", "Insert MethodInvocation(725) into MethodInvocation(736) at 0", "Insert SimpleName: decodeLong(726) into MethodInvocation(736) at 1", "Insert MethodInvocation(729) into MethodInvocation(736) at 2", "Insert MethodInvocation(732) into MethodInvocation(736) at 3", "Insert MethodInvocation(735) into MethodInvocation(736) at 4", "Insert SimpleName: KeyValueUtil(755) into MethodInvocation(764) at 0", "Insert SimpleName: newKeyValue(756) into MethodInvocation(764) at 1", "Insert SimpleName: row(757) into MethodInvocation(764) at 2", "Insert QualifiedName: PhoenixDatabaseMetaData.SEQUENCE_FAMILY_BYTES(758) into MethodInvocation(764) at 3", "Insert QualifiedName: PhoenixDatabaseMetaData.CYCLE_FLAG_BYTES(759) into MethodInvocation(764) at 4", "Move MethodInvocation(599) into MethodInvocation(764) at 5", "Insert QualifiedName: PDataType.FALSE_BYTES(763) into MethodInvocation(764) at 6", "Insert SimpleType: Boolean(781) into CastExpression(794) at 0", "Insert MethodInvocation(793) into CastExpression(794) at 1", "Insert SimpleName: Sequence(811) into MethodInvocation(814) at 0", "Insert SimpleName: getStartValueKV(812) into MethodInvocation(814) at 1", "Insert SimpleName: result(813) into MethodInvocation(814) at 2", "Insert MethodInvocation(820) into MethodInvocation(831) at 0", "Insert SimpleName: decodeLong(821) into MethodInvocation(831) at 1", "Move MethodInvocation(605) into MethodInvocation(831) at 2", "Move MethodInvocation(608) into MethodInvocation(831) at 3", "Insert MethodInvocation(830) into MethodInvocation(831) at 4", "Insert Assignment: =(862) into ExpressionStatement(863) at 0", "Insert SimpleType: SQLException(866) into SingleVariableDeclaration(868) at 0", "Insert SimpleName: sqlE(867) into SingleVariableDeclaration(868) at 1", "Insert ReturnStatement(876) into Block(877) at 0", "Insert QualifiedName: PDataType.LONG(644) into MethodInvocation(646) at 0", "Insert SimpleName: getCodec(645) into MethodInvocation(646) at 1", "Insert SimpleName: minValueKV(648) into MethodInvocation(650) at 0", "Insert SimpleName: getValueArray(649) into MethodInvocation(650) at 1", "Insert SimpleName: minValueKV(651) into MethodInvocation(653) at 0", "Insert SimpleName: getValueOffset(652) into MethodInvocation(653) at 1", "Insert SimpleName: SortOrder(654) into MethodInvocation(656) at 0", "Insert SimpleName: getDefault(655) into MethodInvocation(656) at 1", "Insert PrimitiveType: byte(677) into ArrayType: byte[](679) at 0", "Insert Dimension(678) into ArrayType: byte[](679) at 1", "Insert QualifiedName: PDataType.LONG(680) into MethodInvocation(682) at 0", "Insert SimpleName: getByteSize(681) into MethodInvocation(682) at 1", "Update SimpleName: getFamilyArray(595) to getTimestamp", "Insert QualifiedName: PDataType.LONG(723) into MethodInvocation(725) at 0", "Insert SimpleName: getCodec(724) into MethodInvocation(725) at 1", "Insert SimpleName: maxValueKV(727) into MethodInvocation(729) at 0", "Insert SimpleName: getValueArray(728) into MethodInvocation(729) at 1", "Insert SimpleName: maxValueKV(730) into MethodInvocation(732) at 0", "Insert SimpleName: getValueOffset(731) into MethodInvocation(732) at 1", "Insert SimpleName: SortOrder(733) into MethodInvocation(735) at 0", "Insert SimpleName: getDefault(734) into MethodInvocation(735) at 1", "Update SimpleName: getFamilyOffset(598) to getTimestamp", "Insert SimpleName: Boolean(780) into SimpleType: Boolean(781) at 0", "Insert QualifiedName: PDataType.BOOLEAN(782) into MethodInvocation(793) at 0", "Insert SimpleName: toObject(783) into MethodInvocation(793) at 1", "Insert MethodInvocation(786) into MethodInvocation(793) at 2", "Insert MethodInvocation(789) into MethodInvocation(793) at 3", "Insert MethodInvocation(792) into MethodInvocation(793) at 4", "Insert QualifiedName: PDataType.LONG(818) into MethodInvocation(820) at 0", "Insert SimpleName: getCodec(819) into MethodInvocation(820) at 1", "Update SimpleName: currentValueKV(603) to startValueKV", "Update SimpleName: getQualifierArray(604) to getValueArray", "Update SimpleName: currentValueKV(606) to startValueKV", "Update SimpleName: getQualifierOffset(607) to getValueOffset", "Insert SimpleName: SortOrder(828) into MethodInvocation(830) at 0", "Insert SimpleName: getDefault(829) into MethodInvocation(830) at 1", "Insert SimpleName: currentValue(852) into Assignment: =(862) at 0", "Insert MethodInvocation(861) into Assignment: =(862) at 1", "Insert SimpleName: SQLException(865) into SimpleType: SQLException(866) at 0", "Insert MethodInvocation(875) into ReturnStatement(876) at 0", "Insert SimpleName: cycleKV(784) into MethodInvocation(786) at 0", "Insert SimpleName: getValueArray(785) into MethodInvocation(786) at 1", "Insert SimpleName: cycleKV(787) into MethodInvocation(789) at 0", "Insert SimpleName: getValueOffset(788) into MethodInvocation(789) at 1", "Insert SimpleName: cycleKV(790) into MethodInvocation(792) at 0", "Insert SimpleName: getValueLength(791) into MethodInvocation(792) at 1", "Insert SimpleName: SequenceUtil(853) into MethodInvocation(861) at 0", "Insert SimpleName: getNextValue(854) into MethodInvocation(861) at 1", "Update SimpleName: currentValueKV(609) to currentValue", "Move SimpleName: currentValueKV(609) into MethodInvocation(861) at 2", "Update SimpleName: getQualifierLength(610) to minValue", "Move SimpleName: getQualifierLength(610) into MethodInvocation(861) at 3", "Insert SimpleName: maxValue(857) into MethodInvocation(861) at 4", "Insert SimpleName: incrementBy(858) into MethodInvocation(861) at 5", "Insert SimpleName: cacheSize(859) into MethodInvocation(861) at 6", "Insert SimpleName: cycle(860) into MethodInvocation(861) at 7", "Insert SimpleName: getErrorResult(869) into MethodInvocation(875) at 0", "Insert SimpleName: row(870) into MethodInvocation(875) at 1", "Insert SimpleName: maxTimestamp(871) into MethodInvocation(875) at 2", "Insert MethodInvocation(874) into MethodInvocation(875) at 3", "Insert SimpleName: sqlE(872) into MethodInvocation(874) at 0", "Insert SimpleName: getErrorCode(873) into MethodInvocation(874) at 1", "Delete SimpleName: incrementBy(547)", "Delete SimpleName: cacheSize(548)", "Delete InfixExpression: *(549)", "Delete NumberLiteral: 0(592)", "Delete MethodInvocation(602)", "Delete MethodInvocation(611)", "Delete SimpleName: valueBuffer(615)", "Delete QualifiedName: valueBuffer.length(617)", "Delete MethodInvocation(618)", "Delete VariableDeclarationFragment(619)", "Delete VariableDeclarationStatement(620)", "Delete MethodInvocation(649)", "Delete ReturnStatement(650)"]}}, {"SQLExceptionCode_cluster": {"actions": [{"root": "INS EnumConstantDeclaration to EnumDeclaration at 89", "operations": ["INS StringLiteral: \"42Z08\" to EnumConstantDeclaration at 2", "INS EnumConstantDeclaration to EnumDeclaration at 89", "INS SimpleName: MINVALUE_MUST_BE_CONSTANT to EnumConstantDeclaration at 0", "INS StringLiteral: \"Sequence MINVALUE must be an integer or long constant.\" to EnumConstantDeclaration at 3", "INS NumberLiteral: 1208 to EnumConstantDeclaration at 1"]}, {"root": "INS EnumConstantDeclaration to EnumDeclaration at 90", "operations": ["INS StringLiteral: \"Sequence MAXVALUE must be an integer or long constant.\" to EnumConstantDeclaration at 3", "INS SimpleName: MAXVALUE_MUST_BE_CONSTANT to EnumConstantDeclaration at 0", "INS EnumConstantDeclaration to EnumDeclaration at 90", "INS NumberLiteral: 1209 to EnumConstantDeclaration at 1", "INS StringLiteral: \"42Z09\" to EnumConstantDeclaration at 2"]}, {"root": "INS EnumConstantDeclaration to EnumDeclaration at 91", "operations": ["INS NumberLiteral: 1210 to EnumConstantDeclaration at 1", "INS StringLiteral: \"Sequence MINVALUE must be less than or equal to MAXVALUE.\" to EnumConstantDeclaration at 3", "INS SimpleName: MINVALUE_MUST_BE_LESS_THAN_OR_EQUAL_TO_MAXVALUE to EnumConstantDeclaration at 0", "INS EnumConstantDeclaration to EnumDeclaration at 91", "INS StringLiteral: \"42Z10\" to EnumConstantDeclaration at 2"]}, {"root": "INS EnumConstantDeclaration to EnumDeclaration at 92", "operations": ["INS StringLiteral: \"42Z11\" to EnumConstantDeclaration at 2", "INS SimpleName: STARTS_WITH_MUST_BE_BETWEEN_MIN_MAX_VALUE to EnumConstantDeclaration at 0", "INS EnumConstantDeclaration to EnumDeclaration at 92", "INS NumberLiteral: 1211 to EnumConstantDeclaration at 1", "INS StringLiteral: \"STARTS WITH value must be greater than or equal to MINVALUE and less than or equal to MAXVALUE\" to EnumConstantDeclaration at 3"]}, {"root": "INS EnumConstantDeclaration to EnumDeclaration at 93", "operations": ["INS StringLiteral: \"42Z12\" to EnumConstantDeclaration at 2", "INS EnumConstantDeclaration to EnumDeclaration at 93", "INS SimpleName: SEQUENCE_VAL_REACHED_MAX_VALUE to EnumConstantDeclaration at 0", "INS NumberLiteral: 1212 to EnumConstantDeclaration at 1", "INS StringLiteral: \"Reached MAXVALUE of sequence\" to EnumConstantDeclaration at 3"]}, {"root": "INS EnumConstantDeclaration to EnumDeclaration at 94", "operations": ["INS SimpleName: SEQUENCE_VAL_REACHED_MIN_VALUE to EnumConstantDeclaration at 0", "INS StringLiteral: \"Reached MINVALUE of sequence\" to EnumConstantDeclaration at 3", "INS EnumConstantDeclaration to EnumDeclaration at 94", "INS StringLiteral: \"42Z13\" to EnumConstantDeclaration at 2", "INS NumberLiteral: 1213 to EnumConstantDeclaration at 1"]}, {"root": "INS EnumConstantDeclaration to EnumDeclaration at 95", "operations": ["INS NumberLiteral: 1214 to EnumConstantDeclaration at 1", "INS SimpleName: INCREMENT_BY_MUST_NOT_BE_ZERO to EnumConstantDeclaration at 0", "INS StringLiteral: \"42Z14\" to EnumConstantDeclaration at 2", "INS StringLiteral: \"Sequence INCREMENT BY value cannot be zero\" to EnumConstantDeclaration at 3", "INS EnumConstantDeclaration to EnumDeclaration at 95"]}, {"root": "UPDATE from STARTS_WITH_MUST_BE_CONSTANT to START_WITH_MUST_BE_CONSTANT", "operations": ["UPD SimpleName: STARTS_WITH_MUST_BE_CONSTANT from STARTS_WITH_MUST_BE_CONSTANT to START_WITH_MUST_BE_CONSTANT"]}, {"root": "UPDATE from \"Sequence STARTS WITH value must be an integer or long constant.\" to \"Sequence START WITH value must be an integer or long constant.\"", "operations": ["UPD StringLiteral: \"Sequence STARTS WITH value must be an integer or long constant.\" from \"Sequence STARTS WITH value must be an integer or long constant.\" to \"Sequence START WITH value must be an integer or long constant.\""]}]}}, {"SQLExceptionCode_diff": {"operations": ["Insert EnumConstantDeclaration(839) into EnumDeclaration(1329) at 89", "Insert EnumConstantDeclaration(844) into EnumDeclaration(1329) at 90", "Insert EnumConstantDeclaration(849) into EnumDeclaration(1329) at 91", "Insert EnumConstantDeclaration(854) into EnumDeclaration(1329) at 92", "Insert EnumConstantDeclaration(859) into EnumDeclaration(1329) at 93", "Insert EnumConstantDeclaration(864) into EnumDeclaration(1329) at 94", "Insert EnumConstantDeclaration(869) into EnumDeclaration(1329) at 95", "Update SimpleName: STARTS_WITH_MUST_BE_CONSTANT(805) to START_WITH_MUST_BE_CONSTANT", "Update StringLiteral: \"Sequence STARTS WITH value must be an integer or long constant.\"(808) to \"Sequence START WITH value must be an integer or long constant.\"", "Insert SimpleName: MINVALUE_MUST_BE_CONSTANT(835) into EnumConstantDeclaration(839) at 0", "Insert NumberLiteral: 1208(836) into EnumConstantDeclaration(839) at 1", "Insert StringLiteral: \"42Z08\"(837) into EnumConstantDeclaration(839) at 2", "Insert StringLiteral: \"Sequence MINVALUE must be an integer or long constant.\"(838) into EnumConstantDeclaration(839) at 3", "Insert SimpleName: MAXVALUE_MUST_BE_CONSTANT(840) into EnumConstantDeclaration(844) at 0", "Insert NumberLiteral: 1209(841) into EnumConstantDeclaration(844) at 1", "Insert StringLiteral: \"42Z09\"(842) into EnumConstantDeclaration(844) at 2", "Insert StringLiteral: \"Sequence MAXVALUE must be an integer or long constant.\"(843) into EnumConstantDeclaration(844) at 3", "Insert SimpleName: MINVALUE_MUST_BE_LESS_THAN_OR_EQUAL_TO_MAXVALUE(845) into EnumConstantDeclaration(849) at 0", "Insert NumberLiteral: 1210(846) into EnumConstantDeclaration(849) at 1", "Insert StringLiteral: \"42Z10\"(847) into EnumConstantDeclaration(849) at 2", "Insert StringLiteral: \"Sequence MINVALUE must be less than or equal to MAXVALUE.\"(848) into EnumConstantDeclaration(849) at 3", "Insert SimpleName: STARTS_WITH_MUST_BE_BETWEEN_MIN_MAX_VALUE(850) into EnumConstantDeclaration(854) at 0", "Insert NumberLiteral: 1211(851) into EnumConstantDeclaration(854) at 1", "Insert StringLiteral: \"42Z11\"(852) into EnumConstantDeclaration(854) at 2", "Insert StringLiteral: \"STARTS WITH value must be greater than or equal to MINVALUE and less than or equal to MAXVALUE\"(853) into EnumConstantDeclaration(854) at 3", "Insert SimpleName: SEQUENCE_VAL_REACHED_MAX_VALUE(855) into EnumConstantDeclaration(859) at 0", "Insert NumberLiteral: 1212(856) into EnumConstantDeclaration(859) at 1", "Insert StringLiteral: \"42Z12\"(857) into EnumConstantDeclaration(859) at 2", "Insert StringLiteral: \"Reached MAXVALUE of sequence\"(858) into EnumConstantDeclaration(859) at 3", "Insert SimpleName: SEQUENCE_VAL_REACHED_MIN_VALUE(860) into EnumConstantDeclaration(864) at 0", "Insert NumberLiteral: 1213(861) into EnumConstantDeclaration(864) at 1", "Insert StringLiteral: \"42Z13\"(862) into EnumConstantDeclaration(864) at 2", "Insert StringLiteral: \"Reached MINVALUE of sequence\"(863) into EnumConstantDeclaration(864) at 3", "Insert SimpleName: INCREMENT_BY_MUST_NOT_BE_ZERO(865) into EnumConstantDeclaration(869) at 0", "Insert NumberLiteral: 1214(866) into EnumConstantDeclaration(869) at 1", "Insert StringLiteral: \"42Z14\"(867) into EnumConstantDeclaration(869) at 2", "Insert StringLiteral: \"Sequence INCREMENT BY value cannot be zero\"(868) into EnumConstantDeclaration(869) at 3"]}}, {"PhoenixDatabaseMetaData_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 106", "operations": ["INS Modifier: public to FieldDeclaration at 0", "INS StringLiteral: \"MIN_VALUE\" to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 106", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: MIN_VALUE to VariableDeclarationFragment at 0", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleType: String to FieldDeclaration at 3", "INS Modifier: final to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 107", "operations": ["INS Dimension to ArrayType: byte[] at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: toBytes to MethodInvocation at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: MIN_VALUE to MethodInvocation at 2", "INS SimpleName: MIN_VALUE_BYTES to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: public to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 107", "INS Modifier: final to FieldDeclaration at 2", "INS Modifier: static to FieldDeclaration at 1", "INS ArrayType: byte[] to FieldDeclaration at 3", "INS SimpleName: Bytes to MethodInvocation at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 108", "operations": ["INS StringLiteral: \"MAX_VALUE\" to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 108", "INS Modifier: public to FieldDeclaration at 0", "INS Modifier: static to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: MAX_VALUE to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to FieldDeclaration at 3"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 109", "operations": ["INS Dimension to ArrayType: byte[] at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: MAX_VALUE to MethodInvocation at 2", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: MAX_VALUE_BYTES to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: public to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 109", "INS SimpleName: Bytes to MethodInvocation at 0", "INS SimpleName: toBytes to MethodInvocation at 1", "INS Modifier: static to FieldDeclaration at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS ArrayType: byte[] to FieldDeclaration at 3"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 114", "operations": ["INS SimpleName: CYCLE_FLAG to VariableDeclarationFragment at 0", "INS Modifier: public to FieldDeclaration at 0", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleType: String to FieldDeclaration at 3", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS StringLiteral: \"CYCLE_FLAG\" to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 114"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 115", "operations": ["INS Modifier: final to FieldDeclaration at 2", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: CYCLE_FLAG_BYTES to VariableDeclarationFragment at 0", "INS Dimension to ArrayType: byte[] at 1", "INS FieldDeclaration to TypeDeclaration: class at 115", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: Bytes to MethodInvocation at 0", "INS SimpleName: toBytes to MethodInvocation at 1", "INS Modifier: static to FieldDeclaration at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ArrayType: byte[] to FieldDeclaration at 3", "INS Modifier: public to FieldDeclaration at 0", "INS SimpleName: CYCLE_FLAG to MethodInvocation at 2"]}]}}, {"PhoenixDatabaseMetaData_diff": {"operations": ["Insert FieldDeclaration(1271) into TypeDeclaration: class(5320) at 106", "Insert FieldDeclaration(1284) into TypeDeclaration: class(5320) at 107", "Insert FieldDeclaration(1293) into TypeDeclaration: class(5320) at 108", "Insert FieldDeclaration(1306) into TypeDeclaration: class(5320) at 109", "Insert FieldDeclaration(1359) into TypeDeclaration: class(5320) at 114", "Insert FieldDeclaration(1372) into TypeDeclaration: class(5320) at 115", "Insert Modifier: public(1263) into FieldDeclaration(1271) at 0", "Insert Modifier: static(1264) into FieldDeclaration(1271) at 1", "Insert Modifier: final(1265) into FieldDeclaration(1271) at 2", "Insert SimpleType: String(1267) into FieldDeclaration(1271) at 3", "Insert VariableDeclarationFragment(1270) into FieldDeclaration(1271) at 4", "Insert Modifier: public(1272) into FieldDeclaration(1284) at 0", "Insert Modifier: static(1273) into FieldDeclaration(1284) at 1", "Insert Modifier: final(1274) into FieldDeclaration(1284) at 2", "Insert ArrayType: byte[](1277) into FieldDeclaration(1284) at 3", "Insert VariableDeclarationFragment(1283) into FieldDeclaration(1284) at 4", "Insert Modifier: public(1285) into FieldDeclaration(1293) at 0", "Insert Modifier: static(1286) into FieldDeclaration(1293) at 1", "Insert Modifier: final(1287) into FieldDeclaration(1293) at 2", "Insert SimpleType: String(1289) into FieldDeclaration(1293) at 3", "Insert VariableDeclarationFragment(1292) into FieldDeclaration(1293) at 4", "Insert Modifier: public(1294) into FieldDeclaration(1306) at 0", "Insert Modifier: static(1295) into FieldDeclaration(1306) at 1", "Insert Modifier: final(1296) into FieldDeclaration(1306) at 2", "Insert ArrayType: byte[](1299) into FieldDeclaration(1306) at 3", "Insert VariableDeclarationFragment(1305) into FieldDeclaration(1306) at 4", "Insert Modifier: public(1351) into FieldDeclaration(1359) at 0", "Insert Modifier: static(1352) into FieldDeclaration(1359) at 1", "Insert Modifier: final(1353) into FieldDeclaration(1359) at 2", "Insert SimpleType: String(1355) into FieldDeclaration(1359) at 3", "Insert VariableDeclarationFragment(1358) into FieldDeclaration(1359) at 4", "Insert Modifier: public(1360) into FieldDeclaration(1372) at 0", "Insert Modifier: static(1361) into FieldDeclaration(1372) at 1", "Insert Modifier: final(1362) into FieldDeclaration(1372) at 2", "Insert ArrayType: byte[](1365) into FieldDeclaration(1372) at 3", "Insert VariableDeclarationFragment(1371) into FieldDeclaration(1372) at 4", "Insert SimpleName: String(1266) into SimpleType: String(1267) at 0", "Insert SimpleName: MIN_VALUE(1268) into VariableDeclarationFragment(1270) at 0", "Insert StringLiteral: \"MIN_VALUE\"(1269) into VariableDeclarationFragment(1270) at 1", "Insert PrimitiveType: byte(1275) into ArrayType: byte[](1277) at 0", "Insert Dimension(1276) into ArrayType: byte[](1277) at 1", "Insert SimpleName: MIN_VALUE_BYTES(1278) into VariableDeclarationFragment(1283) at 0", "Insert MethodInvocation(1282) into VariableDeclarationFragment(1283) at 1", "Insert SimpleName: String(1288) into SimpleType: String(1289) at 0", "Insert SimpleName: MAX_VALUE(1290) into VariableDeclarationFragment(1292) at 0", "Insert StringLiteral: \"MAX_VALUE\"(1291) into VariableDeclarationFragment(1292) at 1", "Insert PrimitiveType: byte(1297) into ArrayType: byte[](1299) at 0", "Insert Dimension(1298) into ArrayType: byte[](1299) at 1", "Insert SimpleName: MAX_VALUE_BYTES(1300) into VariableDeclarationFragment(1305) at 0", "Insert MethodInvocation(1304) into VariableDeclarationFragment(1305) at 1", "Insert SimpleName: String(1354) into SimpleType: String(1355) at 0", "Insert SimpleName: CYCLE_FLAG(1356) into VariableDeclarationFragment(1358) at 0", "Insert StringLiteral: \"CYCLE_FLAG\"(1357) into VariableDeclarationFragment(1358) at 1", "Insert PrimitiveType: byte(1363) into ArrayType: byte[](1365) at 0", "Insert Dimension(1364) into ArrayType: byte[](1365) at 1", "Insert SimpleName: CYCLE_FLAG_BYTES(1366) into VariableDeclarationFragment(1371) at 0", "Insert MethodInvocation(1370) into VariableDeclarationFragment(1371) at 1", "Insert SimpleName: Bytes(1279) into MethodInvocation(1282) at 0", "Insert SimpleName: toBytes(1280) into MethodInvocation(1282) at 1", "Insert SimpleName: MIN_VALUE(1281) into MethodInvocation(1282) at 2", "Insert SimpleName: Bytes(1301) into MethodInvocation(1304) at 0", "Insert SimpleName: toBytes(1302) into MethodInvocation(1304) at 1", "Insert SimpleName: MAX_VALUE(1303) into MethodInvocation(1304) at 2", "Insert SimpleName: Bytes(1367) into MethodInvocation(1370) at 0", "Insert SimpleName: toBytes(1368) into MethodInvocation(1370) at 1", "Insert SimpleName: CYCLE_FLAG(1369) into MethodInvocation(1370) at 2"]}}, {"PhoenixStatement_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SimpleName: minValue to SingleVariableDeclaration at 1", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: maxValue to SingleVariableDeclaration at 1", "INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: cycle to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 8"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS SimpleName: minValue to SingleVariableDeclaration at 1", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 9", "operations": ["INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS SimpleName: maxValue to SingleVariableDeclaration at 1", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SingleVariableDeclaration to MethodDeclaration at 9"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 10", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 10", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: cycle to SingleVariableDeclaration at 1"]}, {"root": "INS SimpleName: minValue to SuperConstructorInvocation at 4", "operations": ["INS SimpleName: minValue to SuperConstructorInvocation at 4"]}, {"root": "INS SimpleName: maxValue to SuperConstructorInvocation at 5", "operations": ["INS SimpleName: maxValue to SuperConstructorInvocation at 5"]}, {"root": "INS SimpleName: cycle to SuperConstructorInvocation at 6", "operations": ["INS SimpleName: cycle to SuperConstructorInvocation at 6"]}, {"root": "INS SimpleName: minValue to ClassInstanceCreation at 5", "operations": ["INS SimpleName: minValue to ClassInstanceCreation at 5"]}, {"root": "INS SimpleName: maxValue to ClassInstanceCreation at 6", "operations": ["INS SimpleName: maxValue to ClassInstanceCreation at 6"]}, {"root": "INS SimpleName: cycle to ClassInstanceCreation at 7", "operations": ["INS SimpleName: cycle to ClassInstanceCreation at 7"]}]}}, {"PhoenixStatement_diff": {"operations": ["Insert SingleVariableDeclaration(1849) into MethodDeclaration(1874) at 6", "Insert SingleVariableDeclaration(1853) into MethodDeclaration(1874) at 7", "Insert SingleVariableDeclaration(1856) into MethodDeclaration(1874) at 8", "Insert SingleVariableDeclaration(3003) into MethodDeclaration(3031) at 8", "Insert SingleVariableDeclaration(3007) into MethodDeclaration(3031) at 9", "Insert SingleVariableDeclaration(3010) into MethodDeclaration(3031) at 10", "Insert SimpleType: ParseNode(1847) into SingleVariableDeclaration(1849) at 0", "Insert SimpleName: minValue(1848) into SingleVariableDeclaration(1849) at 1", "Insert SimpleType: ParseNode(1851) into SingleVariableDeclaration(1853) at 0", "Insert SimpleName: maxValue(1852) into SingleVariableDeclaration(1853) at 1", "Insert PrimitiveType: boolean(1854) into SingleVariableDeclaration(1856) at 0", "Insert SimpleName: cycle(1855) into SingleVariableDeclaration(1856) at 1", "Insert SimpleType: ParseNode(3001) into SingleVariableDeclaration(3003) at 0", "Insert SimpleName: minValue(3002) into SingleVariableDeclaration(3003) at 1", "Insert SimpleType: ParseNode(3005) into SingleVariableDeclaration(3007) at 0", "Insert SimpleName: maxValue(3006) into SingleVariableDeclaration(3007) at 1", "Insert PrimitiveType: boolean(3008) into SingleVariableDeclaration(3010) at 0", "Insert SimpleName: cycle(3009) into SingleVariableDeclaration(3010) at 1", "Insert SimpleName: ParseNode(1846) into SimpleType: ParseNode(1847) at 0", "Insert SimpleName: ParseNode(1850) into SimpleType: ParseNode(1851) at 0", "Insert SimpleName: minValue(1867) into SuperConstructorInvocation(1872) at 4", "Insert SimpleName: maxValue(1868) into SuperConstructorInvocation(1872) at 5", "Insert SimpleName: cycle(1869) into SuperConstructorInvocation(1872) at 6", "Insert SimpleName: ParseNode(3000) into SimpleType: ParseNode(3001) at 0", "Insert SimpleName: ParseNode(3004) into SimpleType: ParseNode(3005) at 0", "Insert SimpleName: minValue(3023) into ClassInstanceCreation(3028) at 5", "Insert SimpleName: maxValue(3024) into ClassInstanceCreation(3028) at 6", "Insert SimpleName: cycle(3025) into ClassInstanceCreation(3028) at 7"]}}, {"CreateSequenceStatement_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleType: ParseNode to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: minValue to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 9", "operations": ["INS SimpleType: ParseNode to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS FieldDeclaration to TypeDeclaration: class at 9", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: maxValue to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: cycle to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 10", "INS Modifier: final to FieldDeclaration at 1", "INS PrimitiveType: boolean to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS Modifier: public to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS Block to MethodDeclaration at 3", "INS SimpleName: minValue to ReturnStatement at 0", "INS SimpleType: ParseNode to MethodDeclaration at 1", "INS SimpleName: getMinValue to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 19", "INS Block to MethodDeclaration at 3", "INS SimpleType: ParseNode to MethodDeclaration at 1", "INS SimpleName: getMaxValue to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: maxValue to ReturnStatement at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS Modifier: public to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS SimpleName: cycle to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: getCycle to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: minValue to SingleVariableDeclaration at 1", "INS SimpleType: ParseNode to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: maxValue to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 7"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS SimpleName: cycle to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4"]}, {"root": "UPDATE from startsWith to startWith", "operations": ["UPD SimpleName: startsWith from startsWith to startWith", "UPD SimpleName: startsWith from startsWith to startWith", "UPD SimpleName: startsWith from startsWith to startWith"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS ClassInstanceCreation to ConditionalExpression at 1", "INS FieldAccess to Assignment: = at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleType: LiteralParseNode to ClassInstanceCreation at 0", "INS SimpleName: maxValue to InfixExpression: == at 0", "INS ConditionalExpression to Assignment: = at 1", "INS InfixExpression: == to ConditionalExpression at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: maxValue to ConditionalExpression at 2", "INS ExpressionStatement to Block at 3", "INS SimpleName: maxValue to FieldAccess at 1", "INS QualifiedName: Long.MAX_VALUE to ClassInstanceCreation at 1", "INS SimpleName: LiteralParseNode to SimpleType: LiteralParseNode at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: cacheSize to Assignment: = at 1", "INS ExpressionStatement to Block at 5"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS ThisExpression to FieldAccess at 0", "INS SimpleName: cycle to FieldAccess at 1", "INS ExpressionStatement to Block at 6", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: cycle to Assignment: = at 1"]}, {"root": "INS NullLiteral to ClassInstanceCreation at 5", "operations": ["INS NullLiteral to ClassInstanceCreation at 5"]}, {"root": "INS NullLiteral to ClassInstanceCreation at 6", "operations": ["INS NullLiteral to ClassInstanceCreation at 6"]}, {"root": "INS BooleanLiteral: false to ClassInstanceCreation at 7", "operations": ["INS BooleanLiteral: false to ClassInstanceCreation at 7"]}, {"root": "INS FieldAccess to Assignment: = at 0", "operations": ["INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: minValue to FieldAccess at 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV FieldAccess to Assignment: = at 0"]}, {"root": "INS ParenthesizedExpression to ConditionalExpression at 0", "operations": ["INS ParenthesizedExpression to ConditionalExpression at 0", "INS InfixExpression: && to InfixExpression: && at 0", "INS InfixExpression: && to ParenthesizedExpression at 0", "INS SimpleName: minValue to InfixExpression: == at 0", "INS InfixExpression: == to InfixExpression: && at 1", "INS SimpleName: maxValue to InfixExpression: == at 0", "INS InfixExpression: == to InfixExpression: && at 1", "INS NullLiteral to InfixExpression: == at 1", "INS InfixExpression: == to InfixExpression: && at 0", "INS NullLiteral to InfixExpression: == at 1"]}, {"root": "INS ClassInstanceCreation to ConditionalExpression at 1", "operations": ["INS QualifiedName: Long.MIN_VALUE to ClassInstanceCreation at 1", "INS ClassInstanceCreation to ConditionalExpression at 1", "INS SimpleName: LiteralParseNode to SimpleType: LiteralParseNode at 0", "INS SimpleType: LiteralParseNode to ClassInstanceCreation at 0"]}, {"root": "UPDATE from cacheSize to minValue", "operations": ["UPD SimpleName: cacheSize from cacheSize to minValue", "UPD SimpleName: cacheSize from cacheSize to minValue"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV NullLiteral to InfixExpression: == at 1", "MOV SimpleName: startsWith to InfixExpression: == at 0"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL InfixExpression: =="]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}]}}, {"CreateSequenceStatement_diff": {"operations": ["Insert FieldDeclaration(64) into TypeDeclaration: class(289) at 8", "Insert FieldDeclaration(71) into TypeDeclaration: class(289) at 9", "Insert FieldDeclaration(77) into TypeDeclaration: class(289) at 10", "Insert MethodDeclaration(258) into TypeDeclaration: class(289) at 18", "Insert MethodDeclaration(266) into TypeDeclaration: class(289) at 19", "Insert MethodDeclaration(273) into TypeDeclaration: class(289) at 20", "Insert Modifier: private(58) into FieldDeclaration(64) at 0", "Insert Modifier: final(59) into FieldDeclaration(64) at 1", "Insert SimpleType: ParseNode(61) into FieldDeclaration(64) at 2", "Insert VariableDeclarationFragment(63) into FieldDeclaration(64) at 3", "Insert Modifier: private(65) into FieldDeclaration(71) at 0", "Insert Modifier: final(66) into FieldDeclaration(71) at 1", "Insert SimpleType: ParseNode(68) into FieldDeclaration(71) at 2", "Insert VariableDeclarationFragment(70) into FieldDeclaration(71) at 3", "Insert Modifier: private(72) into FieldDeclaration(77) at 0", "Insert Modifier: final(73) into FieldDeclaration(77) at 1", "Insert PrimitiveType: boolean(74) into FieldDeclaration(77) at 2", "Insert VariableDeclarationFragment(76) into FieldDeclaration(77) at 3", "Insert SingleVariableDeclaration(111) into MethodDeclaration(215) at 6", "Insert SingleVariableDeclaration(115) into MethodDeclaration(215) at 7", "Insert SingleVariableDeclaration(118) into MethodDeclaration(215) at 8", "Move ExpressionStatement(118) into Block(214) at 4", "Insert Modifier: public(251) into MethodDeclaration(258) at 0", "Insert SimpleType: ParseNode(253) into MethodDeclaration(258) at 1", "Insert SimpleName: getMinValue(254) into MethodDeclaration(258) at 2", "Insert Block(257) into MethodDeclaration(258) at 3", "Insert Modifier: public(259) into MethodDeclaration(266) at 0", "Insert SimpleType: ParseNode(261) into MethodDeclaration(266) at 1", "Insert SimpleName: getMaxValue(262) into MethodDeclaration(266) at 2", "Insert Block(265) into MethodDeclaration(266) at 3", "Insert Modifier: public(267) into MethodDeclaration(273) at 0", "Insert PrimitiveType: boolean(268) into MethodDeclaration(273) at 1", "Insert SimpleName: getCycle(269) into MethodDeclaration(273) at 2", "Insert Block(272) into MethodDeclaration(273) at 3", "Insert SimpleName: ParseNode(60) into SimpleType: ParseNode(61) at 0", "Insert SimpleName: minValue(62) into VariableDeclarationFragment(63) at 0", "Insert SimpleName: ParseNode(67) into SimpleType: ParseNode(68) at 0", "Insert SimpleName: maxValue(69) into VariableDeclarationFragment(70) at 0", "Insert SimpleName: cycle(75) into VariableDeclarationFragment(76) at 0", "Update SimpleName: startsWith(75) to startWith", "Insert SimpleType: ParseNode(109) into SingleVariableDeclaration(111) at 0", "Insert SimpleName: minValue(110) into SingleVariableDeclaration(111) at 1", "Insert SimpleType: ParseNode(113) into SingleVariableDeclaration(115) at 0", "Insert SimpleName: maxValue(114) into SingleVariableDeclaration(115) at 1", "Insert PrimitiveType: boolean(116) into SingleVariableDeclaration(118) at 0", "Insert SimpleName: cycle(117) into SingleVariableDeclaration(118) at 1", "Insert ExpressionStatement(178) into Block(214) at 3", "Insert ExpressionStatement(195) into Block(214) at 5", "Insert ExpressionStatement(201) into Block(214) at 6", "Insert SimpleName: ParseNode(252) into SimpleType: ParseNode(253) at 0", "Insert ReturnStatement(256) into Block(257) at 0", "Insert SimpleName: ParseNode(260) into SimpleType: ParseNode(261) at 0", "Insert ReturnStatement(264) into Block(265) at 0", "Insert ReturnStatement(271) into Block(272) at 0", "Insert SimpleName: ParseNode(108) into SimpleType: ParseNode(109) at 0", "Insert SimpleName: ParseNode(112) into SimpleType: ParseNode(113) at 0", "Insert Assignment: =(177) into ExpressionStatement(178) at 0", "Insert Assignment: =(194) into ExpressionStatement(195) at 0", "Insert Assignment: =(200) into ExpressionStatement(201) at 0", "Insert SimpleName: minValue(255) into ReturnStatement(256) at 0", "Insert SimpleName: maxValue(263) into ReturnStatement(264) at 0", "Insert SimpleName: cycle(270) into ReturnStatement(271) at 0", "Insert NullLiteral(21) into ClassInstanceCreation(26) at 5", "Insert NullLiteral(22) into ClassInstanceCreation(26) at 6", "Insert BooleanLiteral: false(23) into ClassInstanceCreation(26) at 7", "Insert FieldAccess(153) into Assignment: =(163) at 0", "Insert FieldAccess(167) into Assignment: =(177) at 0", "Insert ConditionalExpression(176) into Assignment: =(177) at 1", "Move FieldAccess(121) into Assignment: =(194) at 0", "Insert SimpleName: cacheSize(193) into Assignment: =(194) at 1", "Insert FieldAccess(198) into Assignment: =(200) at 0", "Insert SimpleName: cycle(199) into Assignment: =(200) at 1", "Insert ParenthesizedExpression(145) into ConditionalExpression(148) at 0", "Update SimpleName: startsWith(104) to startWith", "Insert ThisExpression(151) into FieldAccess(153) at 0", "Insert SimpleName: minValue(152) into FieldAccess(153) at 1", "Insert ClassInstanceCreation(160) into ConditionalExpression(162) at 1", "Update SimpleName: cacheSize(126) to minValue", "Insert ThisExpression(165) into FieldAccess(167) at 0", "Insert SimpleName: maxValue(166) into FieldAccess(167) at 1", "Insert InfixExpression: ==(170) into ConditionalExpression(176) at 0", "Insert ClassInstanceCreation(174) into ConditionalExpression(176) at 1", "Insert SimpleName: maxValue(175) into ConditionalExpression(176) at 2", "Insert ThisExpression(196) into FieldAccess(198) at 0", "Insert SimpleName: cycle(197) into FieldAccess(198) at 1", "Insert InfixExpression: &&(144) into ParenthesizedExpression(145) at 0", "Update SimpleName: cacheSize(122) to minValue", "Insert SimpleType: LiteralParseNode(158) into ClassInstanceCreation(160) at 0", "Insert QualifiedName: Long.MIN_VALUE(159) into ClassInstanceCreation(160) at 1", "Insert SimpleName: maxValue(168) into InfixExpression: ==(170) at 0", "Insert NullLiteral(169) into InfixExpression: ==(170) at 1", "Insert SimpleType: LiteralParseNode(172) into ClassInstanceCreation(174) at 0", "Insert QualifiedName: Long.MAX_VALUE(173) into ClassInstanceCreation(174) at 1", "Insert InfixExpression: &&(140) into InfixExpression: &&(144) at 0", "Insert InfixExpression: ==(143) into InfixExpression: &&(144) at 1", "Insert SimpleName: LiteralParseNode(157) into SimpleType: LiteralParseNode(158) at 0", "Insert SimpleName: LiteralParseNode(171) into SimpleType: LiteralParseNode(172) at 0", "Insert InfixExpression: ==(136) into InfixExpression: &&(140) at 0", "Insert InfixExpression: ==(139) into InfixExpression: &&(140) at 1", "Update SimpleName: startsWith(100) to startWith", "Move SimpleName: startsWith(100) into InfixExpression: ==(143) at 0", "Move NullLiteral(101) into InfixExpression: ==(143) at 1", "Insert SimpleName: minValue(134) into InfixExpression: ==(136) at 0", "Insert NullLiteral(135) into InfixExpression: ==(136) at 1", "Insert SimpleName: maxValue(137) into InfixExpression: ==(139) at 0", "Insert NullLiteral(138) into InfixExpression: ==(139) at 1", "Delete InfixExpression: ==(102)", "Delete NullLiteral(125)"]}}, {"ParseNodeFactory_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SimpleName: minValue to SingleVariableDeclaration at 1", "INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 8", "INS SimpleName: maxValue to SingleVariableDeclaration at 1", "INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 9", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 9", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: cycle to SingleVariableDeclaration at 1"]}, {"root": "INS SimpleName: minValue to ClassInstanceCreation at 5", "operations": ["INS SimpleName: minValue to ClassInstanceCreation at 5"]}, {"root": "INS SimpleName: maxValue to ClassInstanceCreation at 6", "operations": ["INS SimpleName: maxValue to ClassInstanceCreation at 6"]}, {"root": "INS SimpleName: cycle to ClassInstanceCreation at 7", "operations": ["INS SimpleName: cycle to ClassInstanceCreation at 7"]}]}}, {"ParseNodeFactory_diff": {"operations": ["Insert SingleVariableDeclaration(1244) into MethodDeclaration(1272) at 7", "Insert SingleVariableDeclaration(1248) into MethodDeclaration(1272) at 8", "Insert SingleVariableDeclaration(1251) into MethodDeclaration(1272) at 9", "Insert SimpleType: ParseNode(1242) into SingleVariableDeclaration(1244) at 0", "Insert SimpleName: minValue(1243) into SingleVariableDeclaration(1244) at 1", "Insert SimpleType: ParseNode(1246) into SingleVariableDeclaration(1248) at 0", "Insert SimpleName: maxValue(1247) into SingleVariableDeclaration(1248) at 1", "Insert PrimitiveType: boolean(1249) into SingleVariableDeclaration(1251) at 0", "Insert SimpleName: cycle(1250) into SingleVariableDeclaration(1251) at 1", "Insert SimpleName: ParseNode(1241) into SimpleType: ParseNode(1242) at 0", "Insert SimpleName: ParseNode(1245) into SimpleType: ParseNode(1246) at 0", "Insert SimpleName: minValue(1264) into ClassInstanceCreation(1269) at 5", "Insert SimpleName: maxValue(1265) into ClassInstanceCreation(1269) at 6", "Insert SimpleName: cycle(1266) into ClassInstanceCreation(1269) at 7"]}}, {"SelectStatement_cluster": {"actions": [{"root": "INS QualifiedName: LiteralParseNode.ONE to ClassInstanceCreation at 2", "operations": ["INS QualifiedName: LiteralParseNode.ONE to ClassInstanceCreation at 2"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ClassInstanceCreation", "DEL SimpleName: LiteralParseNode", "DEL NumberLiteral: 1", "DEL SimpleType: LiteralParseNode"]}]}}, {"SelectStatement_diff": {"operations": ["Insert QualifiedName: LiteralParseNode.ONE(47) into ClassInstanceCreation(48) at 2", "Delete SimpleName: LiteralParseNode(47)", "Delete SimpleType: LiteralParseNode(48)", "Delete NumberLiteral: 1(49)", "Delete ClassInstanceCreation(50)"]}}, {"ConnectionQueryServices_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 8", "INS SimpleName: minValue to SingleVariableDeclaration at 1", "INS PrimitiveType: long to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 9", "operations": ["INS SimpleName: maxValue to SingleVariableDeclaration at 1", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 9"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 10", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 10", "INS SimpleName: cycle to SingleVariableDeclaration at 1"]}]}}, {"ConnectionQueryServices_diff": {"operations": ["Insert SingleVariableDeclaration(394) into MethodDeclaration(406) at 8", "Insert SingleVariableDeclaration(397) into MethodDeclaration(406) at 9", "Insert SingleVariableDeclaration(400) into MethodDeclaration(406) at 10", "Insert PrimitiveType: long(392) into SingleVariableDeclaration(394) at 0", "Insert SimpleName: minValue(393) into SingleVariableDeclaration(394) at 1", "Insert PrimitiveType: long(395) into SingleVariableDeclaration(397) at 0", "Insert SimpleName: maxValue(396) into SingleVariableDeclaration(397) at 1", "Insert PrimitiveType: boolean(398) into SingleVariableDeclaration(400) at 0", "Insert SimpleName: cycle(399) into SingleVariableDeclaration(400) at 1"]}}, {"ConnectionQueryServicesImpl_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.CYCLE_FLAG to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 16", "operations": ["INS ImportDeclaration to CompilationUnit at 16", "INS QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.MAX_VALUE to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 17", "operations": ["INS QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.MIN_VALUE to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 17"]}, {"root": "UPDATE from private to protected", "operations": ["UPD Modifier: private from private to protected"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 10", "operations": ["INS SimpleName: minValue to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 10", "INS PrimitiveType: long to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 11", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 11", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SimpleName: maxValue to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 12", "operations": ["INS SimpleName: cycle to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 12", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleName: minValue to MethodInvocation at 6", "operations": ["INS SimpleName: minValue to MethodInvocation at 6"]}, {"root": "INS SimpleName: maxValue to MethodInvocation at 7", "operations": ["INS SimpleName: maxValue to MethodInvocation at 7"]}, {"root": "INS SimpleName: cycle to MethodInvocation at 8", "operations": ["INS SimpleName: cycle to MethodInvocation at 8"]}, {"root": "INS CatchClause to TryStatement at 2", "operations": ["INS ExpressionStatement to Block at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS SimpleName: i to ArrayAccess at 1", "INS ArrayAccess to Assignment: = at 0", "INS SimpleName: exceptions to ArrayAccess at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS CatchClause to TryStatement at 2", "INS Block to CatchClause at 1", "INS SimpleName: e to Assignment: = at 1"]}, {"root": "INS SimpleName: minValue to MethodInvocation at 3", "operations": ["INS SimpleName: minValue to MethodInvocation at 3"]}, {"root": "INS SimpleName: maxValue to MethodInvocation at 4", "operations": ["INS SimpleName: maxValue to MethodInvocation at 4"]}, {"root": "INS SimpleName: cycle to MethodInvocation at 5", "operations": ["INS SimpleName: cycle to MethodInvocation at 5"]}, {"root": "INS CatchClause to TryStatement at 2", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS StringLiteral: \" \" to InfixExpression: + at 5", "INS SimpleName: addColumnsIfNotExists to MethodInvocation at 0", "INS SimpleName: ignore to SingleVariableDeclaration at 1", "INS SimpleName: newColumns to VariableDeclarationFragment at 0", "INS SimpleName: CYCLE_FLAG to InfixExpression: + at 8", "INS QualifiedName: MetaDataProtocol.MIN_SYSTEM_TABLE_TIMESTAMP to MethodInvocation at 3", "INS StringLiteral: \", \" to InfixExpression: + at 7", "INS SimpleName: getSqlTypeName to MethodInvocation at 1", "INS SimpleName: getSqlTypeName to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: MIN_VALUE to InfixExpression: + at 0", "INS Block to CatchClause at 1", "INS SimpleName: metaConnection to MethodInvocation at 1", "INS QualifiedName: PDataType.BOOLEAN to MethodInvocation at 0", "INS CatchClause to TryStatement at 2", "INS SingleVariableDeclaration to CatchClause at 0", "INS QualifiedName: PhoenixDatabaseMetaData.SEQUENCE_TABLE_NAME to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: + at 2", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS StringLiteral: \" \" to InfixExpression: + at 1", "INS SimpleName: metaConnection to Assignment: = at 0", "INS QualifiedName: PDataType.LONG to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: MAX_VALUE to InfixExpression: + at 4", "INS StringLiteral: \", \" to InfixExpression: + at 3", "INS MethodInvocation to InfixExpression: + at 6", "INS MethodInvocation to InfixExpression: + at 10", "INS StringLiteral: \" \" to InfixExpression: + at 9", "INS SimpleName: TableAlreadyExistsException to SimpleType: TableAlreadyExistsException at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: TableAlreadyExistsException to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS SimpleName: getSqlTypeName to MethodInvocation at 1", "INS SimpleName: newColumns to MethodInvocation at 4", "INS QualifiedName: PDataType.LONG to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}]}}, {"ConnectionQueryServicesImpl_diff": {"operations": ["Insert ImportDeclaration(13) into CompilationUnit(11323) at 6", "Insert ImportDeclaration(33) into CompilationUnit(11323) at 16", "Insert ImportDeclaration(35) into CompilationUnit(11323) at 17", "Insert QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.CYCLE_FLAG(12) into ImportDeclaration(13) at 0", "Insert QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.MAX_VALUE(32) into ImportDeclaration(33) at 0", "Insert QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.MIN_VALUE(34) into ImportDeclaration(35) at 0", "Update Modifier: private(533) to protected", "Insert SingleVariableDeclaration(8043) into MethodDeclaration(8169) at 10", "Insert SingleVariableDeclaration(8046) into MethodDeclaration(8169) at 11", "Insert SingleVariableDeclaration(8049) into MethodDeclaration(8169) at 12", "Insert PrimitiveType: long(8041) into SingleVariableDeclaration(8043) at 0", "Insert SimpleName: minValue(8042) into SingleVariableDeclaration(8043) at 1", "Insert PrimitiveType: long(8044) into SingleVariableDeclaration(8046) at 0", "Insert SimpleName: maxValue(8045) into SingleVariableDeclaration(8046) at 1", "Insert PrimitiveType: boolean(8047) into SingleVariableDeclaration(8049) at 0", "Insert SimpleName: cycle(8048) into SingleVariableDeclaration(8049) at 1", "Insert SimpleName: minValue(8109) into MethodInvocation(8112) at 6", "Insert SimpleName: maxValue(8110) into MethodInvocation(8112) at 7", "Insert SimpleName: cycle(8111) into MethodInvocation(8112) at 8", "Insert CatchClause(8726) into TryStatement(8727) at 2", "Insert SimpleName: minValue(8136) into MethodInvocation(8139) at 3", "Insert SimpleName: maxValue(8137) into MethodInvocation(8139) at 4", "Insert SimpleName: cycle(8138) into MethodInvocation(8139) at 5", "Insert SingleVariableDeclaration(8718) into CatchClause(8726) at 0", "Insert Block(8725) into CatchClause(8726) at 1", "Insert SimpleType: SQLException(8716) into SingleVariableDeclaration(8718) at 0", "Insert SimpleName: e(8717) into SingleVariableDeclaration(8718) at 1", "Insert ExpressionStatement(8724) into Block(8725) at 0", "Insert SimpleName: SQLException(8715) into SimpleType: SQLException(8716) at 0", "Insert Assignment: =(8723) into ExpressionStatement(8724) at 0", "Insert ArrayAccess(8721) into Assignment: =(8723) at 0", "Insert SimpleName: e(8722) into Assignment: =(8723) at 1", "Insert SimpleName: exceptions(8719) into ArrayAccess(8721) at 0", "Insert SimpleName: i(8720) into ArrayAccess(8721) at 1", "Insert CatchClause(7424) into TryStatement(7425) at 2", "Insert SingleVariableDeclaration(7390) into CatchClause(7424) at 0", "Insert Block(7423) into CatchClause(7424) at 1", "Insert SimpleType: TableAlreadyExistsException(7388) into SingleVariableDeclaration(7390) at 0", "Insert SimpleName: ignore(7389) into SingleVariableDeclaration(7390) at 1", "Insert VariableDeclarationStatement(7413) into Block(7423) at 0", "Insert ExpressionStatement(7422) into Block(7423) at 1", "Insert SimpleName: TableAlreadyExistsException(7387) into SimpleType: TableAlreadyExistsException(7388) at 0", "Insert SimpleType: String(7392) into VariableDeclarationStatement(7413) at 0", "Insert VariableDeclarationFragment(7412) into VariableDeclarationStatement(7413) at 1", "Insert Assignment: =(7421) into ExpressionStatement(7422) at 0", "Insert SimpleName: String(7391) into SimpleType: String(7392) at 0", "Insert SimpleName: newColumns(7393) into VariableDeclarationFragment(7412) at 0", "Insert InfixExpression: +(7411) into VariableDeclarationFragment(7412) at 1", "Insert SimpleName: metaConnection(7414) into Assignment: =(7421) at 0", "Insert MethodInvocation(7420) into Assignment: =(7421) at 1", "Insert SimpleName: MIN_VALUE(7394) into InfixExpression: +(7411) at 0", "Insert StringLiteral: \" \"(7395) into InfixExpression: +(7411) at 1", "Insert MethodInvocation(7398) into InfixExpression: +(7411) at 2", "Insert StringLiteral: \", \"(7399) into InfixExpression: +(7411) at 3", "Insert SimpleName: MAX_VALUE(7400) into InfixExpression: +(7411) at 4", "Insert StringLiteral: \" \"(7401) into InfixExpression: +(7411) at 5", "Insert MethodInvocation(7404) into InfixExpression: +(7411) at 6", "Insert StringLiteral: \", \"(7405) into InfixExpression: +(7411) at 7", "Insert SimpleName: CYCLE_FLAG(7406) into InfixExpression: +(7411) at 8", "Insert StringLiteral: \" \"(7407) into InfixExpression: +(7411) at 9", "Insert MethodInvocation(7410) into InfixExpression: +(7411) at 10", "Insert SimpleName: addColumnsIfNotExists(7415) into MethodInvocation(7420) at 0", "Insert SimpleName: metaConnection(7416) into MethodInvocation(7420) at 1", "Insert QualifiedName: PhoenixDatabaseMetaData.SEQUENCE_TABLE_NAME(7417) into MethodInvocation(7420) at 2", "Insert QualifiedName: MetaDataProtocol.MIN_SYSTEM_TABLE_TIMESTAMP(7418) into MethodInvocation(7420) at 3", "Insert SimpleName: newColumns(7419) into MethodInvocation(7420) at 4", "Insert QualifiedName: PDataType.LONG(7396) into MethodInvocation(7398) at 0", "Insert SimpleName: getSqlTypeName(7397) into MethodInvocation(7398) at 1", "Insert QualifiedName: PDataType.LONG(7402) into MethodInvocation(7404) at 0", "Insert SimpleName: getSqlTypeName(7403) into MethodInvocation(7404) at 1", "Insert QualifiedName: PDataType.BOOLEAN(7408) into MethodInvocation(7410) at 0", "Insert SimpleName: getSqlTypeName(7409) into MethodInvocation(7410) at 1"]}}, {"ConnectionlessQueryServicesImpl_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 43", "operations": ["INS QualifiedName: org.apache.phoenix.schema.SequenceInfo to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 43"]}, {"root": "INS ImportDeclaration to CompilationUnit at 53", "operations": ["INS QualifiedName: org.apache.phoenix.util.SequenceUtil to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 53"]}, {"root": "UPDATE from Map<SequenceKey,Long> to Map<SequenceKey,SequenceInfo>", "operations": ["UPD ParameterizedType: Map<SequenceKey,Long> from Map<SequenceKey,Long> to Map<SequenceKey,SequenceInfo>"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 10", "operations": ["INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SimpleName: minValue to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 10"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 11", "operations": ["INS SimpleName: maxValue to SingleVariableDeclaration at 1", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 11"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 12", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 12", "INS SimpleName: cycle to SingleVariableDeclaration at 1", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from Long to SequenceInfo", "operations": ["UPD SimpleName: Long from Long to SequenceInfo", "UPD SimpleName: Long from Long to SequenceInfo", "UPD SimpleType: Long from Long to SequenceInfo", "UPD SimpleName: Long from Long to SequenceInfo", "UPD SimpleName: Long from Long to SequenceInfo", "UPD SimpleType: Long from Long to SequenceInfo", "UPD SimpleType: Long from Long to SequenceInfo", "UPD SimpleType: Long from Long to SequenceInfo"]}, {"root": "INS QualifiedName: info.sequenceValue to ReturnStatement at 0", "operations": ["INS QualifiedName: info.sequenceValue to ReturnStatement at 0"]}, {"root": "INS ClassInstanceCreation to MethodInvocation at 3", "operations": ["INS SimpleName: maxValue to ClassInstanceCreation at 4", "INS SimpleType: SequenceInfo to ClassInstanceCreation at 0", "INS NumberLiteral: 1l to ClassInstanceCreation at 5", "INS ClassInstanceCreation to MethodInvocation at 3", "INS SimpleName: incrementBy to ClassInstanceCreation at 2", "INS SimpleName: SequenceInfo to SimpleType: SequenceInfo at 0", "INS SimpleName: startWith to ClassInstanceCreation at 1", "INS SimpleName: minValue to ClassInstanceCreation at 3", "INS SimpleName: cycle to ClassInstanceCreation at 6"]}, {"root": "UPDATE from value to info", "operations": ["UPD SimpleName: value from value to info", "UPD SimpleName: value from value to info", "UPD SimpleName: value from value to info", "UPD SimpleName: value from value to info", "UPD SimpleName: value from value to info", "UPD SimpleName: value from value to info"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS QualifiedName: info.sequenceValue to Assignment: = at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: getNextValue to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: info to MethodInvocation at 3", "INS SimpleName: SequenceUtil to MethodInvocation at 0", "INS SimpleName: key to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS QualifiedName: info.sequenceValue to Assignment: = at 1", "operations": ["INS QualifiedName: info.sequenceValue to Assignment: = at 1"]}, {"root": "INS QualifiedName: info.sequenceValue to Assignment: = at 1", "operations": ["INS QualifiedName: info.sequenceValue to Assignment: = at 1"]}, {"root": "DEL SimpleName: startWith", "operations": ["DEL SimpleName: startWith"]}, {"root": "DEL SimpleName: value", "operations": ["DEL SimpleName: value"]}, {"root": "DEL PostfixExpression: ++", "operations": ["DEL SimpleName: value", "DEL PostfixExpression: ++"]}, {"root": "DEL SimpleName: value", "operations": ["DEL SimpleName: value"]}]}}, {"ConnectionlessQueryServicesImpl_diff": {"operations": ["Insert ImportDeclaration(87) into CompilationUnit(1663) at 43", "Insert ImportDeclaration(107) into CompilationUnit(1663) at 53", "Insert QualifiedName: org.apache.phoenix.schema.SequenceInfo(86) into ImportDeclaration(87) at 0", "Insert QualifiedName: org.apache.phoenix.util.SequenceUtil(106) into ImportDeclaration(107) at 0", "Update ParameterizedType: Map<SequenceKey,Long>(132) to Map<SequenceKey,SequenceInfo>", "Insert SingleVariableDeclaration(1230) into MethodDeclaration(1284) at 10", "Insert SingleVariableDeclaration(1233) into MethodDeclaration(1284) at 11", "Insert SingleVariableDeclaration(1236) into MethodDeclaration(1284) at 12", "Update SimpleType: Long(131) to SequenceInfo", "Insert PrimitiveType: long(1228) into SingleVariableDeclaration(1230) at 0", "Insert SimpleName: minValue(1229) into SingleVariableDeclaration(1230) at 1", "Insert PrimitiveType: long(1231) into SingleVariableDeclaration(1233) at 0", "Insert SimpleName: maxValue(1232) into SingleVariableDeclaration(1233) at 1", "Insert PrimitiveType: boolean(1234) into SingleVariableDeclaration(1236) at 0", "Insert SimpleName: cycle(1235) into SingleVariableDeclaration(1236) at 1", "Update SimpleName: Long(130) to SequenceInfo", "Update SimpleType: Long(1522) to SequenceInfo", "Insert QualifiedName: info.sequenceValue(1582) into ReturnStatement(1583) at 0", "Insert ClassInstanceCreation(1278) into MethodInvocation(1279) at 3", "Update SimpleName: Long(1521) to SequenceInfo", "Update SimpleName: value(1523) to info", "Update SimpleName: value(1530) to info", "Insert SimpleType: SequenceInfo(1271) into ClassInstanceCreation(1278) at 0", "Insert SimpleName: startWith(1272) into ClassInstanceCreation(1278) at 1", "Insert SimpleName: incrementBy(1273) into ClassInstanceCreation(1278) at 2", "Insert SimpleName: minValue(1274) into ClassInstanceCreation(1278) at 3", "Insert SimpleName: maxValue(1275) into ClassInstanceCreation(1278) at 4", "Insert NumberLiteral: 1l(1276) into ClassInstanceCreation(1278) at 5", "Insert SimpleName: cycle(1277) into ClassInstanceCreation(1278) at 6", "Update SimpleType: Long(1358) to SequenceInfo", "Update SimpleType: Long(1438) to SequenceInfo", "Insert SimpleName: SequenceInfo(1270) into SimpleType: SequenceInfo(1271) at 0", "Update SimpleName: Long(1357) to SequenceInfo", "Update SimpleName: value(1359) to info", "Update SimpleName: value(1366) to info", "Update SimpleName: Long(1437) to SequenceInfo", "Update SimpleName: value(1439) to info", "Update SimpleName: value(1446) to info", "Insert ExpressionStatement(1498) into Block(1499) at 1", "Insert Assignment: =(1497) into ExpressionStatement(1498) at 0", "Insert QualifiedName: info.sequenceValue(1408) into Assignment: =(1409) at 1", "Insert QualifiedName: info.sequenceValue(1488) into Assignment: =(1489) at 1", "Insert QualifiedName: info.sequenceValue(1491) into Assignment: =(1497) at 0", "Insert MethodInvocation(1496) into Assignment: =(1497) at 1", "Insert SimpleName: SequenceUtil(1492) into MethodInvocation(1496) at 0", "Insert SimpleName: getNextValue(1493) into MethodInvocation(1496) at 1", "Insert SimpleName: key(1494) into MethodInvocation(1496) at 2", "Insert SimpleName: info(1495) into MethodInvocation(1496) at 3", "Delete SimpleName: startWith(1257)", "Delete SimpleName: value(1387)", "Delete SimpleName: value(1467)", "Delete PostfixExpression: ++(1468)", "Delete SimpleName: value(1554)"]}}, {"DelegateConnectionQueryServices_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 10", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 10", "INS SimpleName: minValue to SingleVariableDeclaration at 1", "INS PrimitiveType: long to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 11", "operations": ["INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SimpleName: maxValue to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 11"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 12", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 12", "INS SimpleName: cycle to SingleVariableDeclaration at 1"]}, {"root": "INS SimpleName: minValue to MethodInvocation at 8", "operations": ["INS SimpleName: minValue to MethodInvocation at 8"]}, {"root": "INS SimpleName: maxValue to MethodInvocation at 9", "operations": ["INS SimpleName: maxValue to MethodInvocation at 9"]}, {"root": "INS SimpleName: cycle to MethodInvocation at 10", "operations": ["INS SimpleName: cycle to MethodInvocation at 10"]}]}}, {"DelegateConnectionQueryServices_diff": {"operations": ["Insert SingleVariableDeclaration(705) into MethodDeclaration(733) at 10", "Insert SingleVariableDeclaration(708) into MethodDeclaration(733) at 11", "Insert SingleVariableDeclaration(711) into MethodDeclaration(733) at 12", "Insert PrimitiveType: long(703) into SingleVariableDeclaration(705) at 0", "Insert SimpleName: minValue(704) into SingleVariableDeclaration(705) at 1", "Insert PrimitiveType: long(706) into SingleVariableDeclaration(708) at 0", "Insert SimpleName: maxValue(707) into SingleVariableDeclaration(708) at 1", "Insert PrimitiveType: boolean(709) into SingleVariableDeclaration(711) at 0", "Insert SimpleName: cycle(710) into SingleVariableDeclaration(711) at 1", "Insert SimpleName: minValue(726) into MethodInvocation(730) at 8", "Insert SimpleName: maxValue(727) into MethodInvocation(730) at 9", "Insert SimpleName: cycle(728) into MethodInvocation(730) at 10"]}}, {"QueryConstants_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.CYCLE_FLAG to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 11"]}, {"root": "INS ImportDeclaration to CompilationUnit at 26", "operations": ["INS ImportDeclaration to CompilationUnit at 26", "INS QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.MAX_VALUE to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 27", "operations": ["INS QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.MIN_VALUE to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 27"]}, {"root": "UPDATE from \"CREATE TABLE IF NOT EXISTS \" to \"CREATE TABLE \"", "operations": ["UPD StringLiteral: \"CREATE TABLE IF NOT EXISTS \" from \"CREATE TABLE IF NOT EXISTS \" to \"CREATE TABLE \""]}, {"root": "UPDATE from \" BIGINT \\n\" to \" BIGINT, \\n\"", "operations": ["UPD StringLiteral: \" BIGINT \\n\" from \" BIGINT \\n\" to \" BIGINT, \\n\""]}, {"root": "INS SimpleName: MIN_VALUE to InfixExpression: + at 19", "operations": ["INS SimpleName: MIN_VALUE to InfixExpression: + at 19"]}, {"root": "INS StringLiteral: \" BIGINT, \\n\" to InfixExpression: + at 20", "operations": ["INS StringLiteral: \" BIGINT, \\n\" to InfixExpression: + at 20"]}, {"root": "INS SimpleName: MAX_VALUE to InfixExpression: + at 21", "operations": ["INS SimpleName: MAX_VALUE to InfixExpression: + at 21"]}, {"root": "INS StringLiteral: \" BIGINT, \\n\" to InfixExpression: + at 22", "operations": ["INS StringLiteral: \" BIGINT, \\n\" to InfixExpression: + at 22"]}, {"root": "INS SimpleName: CYCLE_FLAG to InfixExpression: + at 23", "operations": ["INS SimpleName: CYCLE_FLAG to InfixExpression: + at 23"]}, {"root": "INS StringLiteral: \" BOOLEAN \\n\" to InfixExpression: + at 24", "operations": ["INS StringLiteral: \" BOOLEAN \\n\" to InfixExpression: + at 24"]}]}}, {"QueryConstants_diff": {"operations": ["Insert ImportDeclaration(23) into CompilationUnit(723) at 11", "Insert ImportDeclaration(53) into CompilationUnit(723) at 26", "Insert ImportDeclaration(55) into CompilationUnit(723) at 27", "Insert QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.CYCLE_FLAG(22) into ImportDeclaration(23) at 0", "Insert QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.MAX_VALUE(52) into ImportDeclaration(53) at 0", "Insert QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.MIN_VALUE(54) into ImportDeclaration(55) at 0", "Update StringLiteral: \"CREATE TABLE IF NOT EXISTS \"(675) to \"CREATE TABLE \"", "Update StringLiteral: \" BIGINT \\n\"(693) to \" BIGINT, \\n\"", "Insert SimpleName: MIN_VALUE(700) into InfixExpression: +(719) at 19", "Insert StringLiteral: \" BIGINT, \\n\"(701) into InfixExpression: +(719) at 20", "Insert SimpleName: MAX_VALUE(702) into InfixExpression: +(719) at 21", "Insert StringLiteral: \" BIGINT, \\n\"(703) into InfixExpression: +(719) at 22", "Insert SimpleName: CYCLE_FLAG(704) into InfixExpression: +(719) at 23", "Insert StringLiteral: \" BOOLEAN \\n\"(705) into InfixExpression: +(719) at 24"]}}, {"MetaDataClient_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SimpleName: minValue to SingleVariableDeclaration at 1", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 8", "INS SimpleName: maxValue to SingleVariableDeclaration at 1", "INS PrimitiveType: long to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 10", "operations": ["INS SimpleName: cycle to SingleVariableDeclaration at 1", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 10"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 11", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 11", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SimpleName: minValue to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 12", "operations": ["INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SimpleName: maxValue to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 12"]}, {"root": "INS MethodInvocation to MethodInvocation at 8", "operations": ["INS SimpleName: getCycle to MethodInvocation at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 8"]}, {"root": "INS SimpleName: minValue to MethodInvocation at 9", "operations": ["INS SimpleName: minValue to MethodInvocation at 9"]}, {"root": "INS SimpleName: maxValue to MethodInvocation at 10", "operations": ["INS SimpleName: maxValue to MethodInvocation at 10"]}, {"root": "INS SimpleName: minValue to MethodInvocation at 8", "operations": ["INS SimpleName: minValue to MethodInvocation at 8"]}, {"root": "INS SimpleName: maxValue to MethodInvocation at 9", "operations": ["INS SimpleName: maxValue to MethodInvocation at 9"]}, {"root": "INS SimpleName: cycle to MethodInvocation at 10", "operations": ["INS SimpleName: cycle to MethodInvocation at 10"]}, {"root": "INS BooleanLiteral: false to MethodInvocation at 8", "operations": ["INS BooleanLiteral: false to MethodInvocation at 8"]}, {"root": "INS QualifiedName: Long.MIN_VALUE to MethodInvocation at 9", "operations": ["INS QualifiedName: Long.MIN_VALUE to MethodInvocation at 9"]}, {"root": "INS QualifiedName: Long.MAX_VALUE to MethodInvocation at 10", "operations": ["INS QualifiedName: Long.MAX_VALUE to MethodInvocation at 10"]}]}}, {"MetaDataClient_diff": {"operations": ["Insert SingleVariableDeclaration(3395) into MethodDeclaration(3463) at 7", "Insert SingleVariableDeclaration(3398) into MethodDeclaration(3463) at 8", "Insert SingleVariableDeclaration(3494) into MethodDeclaration(3548) at 10", "Insert SingleVariableDeclaration(3497) into MethodDeclaration(3548) at 11", "Insert SingleVariableDeclaration(3500) into MethodDeclaration(3548) at 12", "Insert PrimitiveType: long(3393) into SingleVariableDeclaration(3395) at 0", "Insert SimpleName: minValue(3394) into SingleVariableDeclaration(3395) at 1", "Insert PrimitiveType: long(3396) into SingleVariableDeclaration(3398) at 0", "Insert SimpleName: maxValue(3397) into SingleVariableDeclaration(3398) at 1", "Insert PrimitiveType: boolean(3492) into SingleVariableDeclaration(3494) at 0", "Insert SimpleName: cycle(3493) into SingleVariableDeclaration(3494) at 1", "Insert PrimitiveType: long(3495) into SingleVariableDeclaration(3497) at 0", "Insert SimpleName: minValue(3496) into SingleVariableDeclaration(3497) at 1", "Insert PrimitiveType: long(3498) into SingleVariableDeclaration(3500) at 0", "Insert SimpleName: maxValue(3499) into SingleVariableDeclaration(3500) at 1", "Insert MethodInvocation(3456) into MethodInvocation(3460) at 8", "Insert SimpleName: minValue(3457) into MethodInvocation(3460) at 9", "Insert SimpleName: maxValue(3458) into MethodInvocation(3460) at 10", "Insert SimpleName: statement(3454) into MethodInvocation(3456) at 0", "Insert SimpleName: getCycle(3455) into MethodInvocation(3456) at 1", "Insert SimpleName: minValue(3516) into MethodInvocation(3520) at 8", "Insert SimpleName: maxValue(3517) into MethodInvocation(3520) at 9", "Insert SimpleName: cycle(3518) into MethodInvocation(3520) at 10", "Insert BooleanLiteral: false(3042) into MethodInvocation(3048) at 8", "Insert QualifiedName: Long.MIN_VALUE(3043) into MethodInvocation(3048) at 9", "Insert QualifiedName: Long.MAX_VALUE(3044) into MethodInvocation(3048) at 10"]}}, {"Sequence_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.CYCLE_FLAG_BYTES to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.MAX_VALUE_BYTES to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.MIN_VALUE_BYTES to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS ImportDeclaration to CompilationUnit at 8", "INS QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.START_WITH_BYTES to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 32", "operations": ["INS ImportDeclaration to CompilationUnit at 32", "INS QualifiedName: org.apache.phoenix.util.SequenceUtil to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 34", "operations": ["INS QualifiedName: com.google.common.math.LongMath to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 34"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleName: KeyValue to SimpleType: KeyValue at 0", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: SEQUENCE_FAMILY_BYTES to MethodInvocation at 3", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: START_WITH_BYTES to MethodInvocation at 4", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: START_WITH_KV to VariableDeclarationFragment at 0", "INS QualifiedName: ByteUtil.EMPTY_BYTE_ARRAY to MethodInvocation at 2", "INS SimpleName: createFirstOnRow to MethodInvocation at 1", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: KeyValue to MethodInvocation at 0", "INS SimpleType: KeyValue to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 8"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 9", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 9", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: createFirstOnRow to MethodInvocation at 1", "INS SimpleName: MIN_VALUE_BYTES to MethodInvocation at 4", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleType: KeyValue to FieldDeclaration at 3", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: KeyValue to SimpleType: KeyValue at 0", "INS SimpleName: MIN_VALUE_KV to VariableDeclarationFragment at 0", "INS SimpleName: KeyValue to MethodInvocation at 0", "INS SimpleName: SEQUENCE_FAMILY_BYTES to MethodInvocation at 3", "INS QualifiedName: ByteUtil.EMPTY_BYTE_ARRAY to MethodInvocation at 2", "INS Modifier: static to FieldDeclaration at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS SimpleName: KeyValue to SimpleType: KeyValue at 0", "INS SimpleName: KeyValue to MethodInvocation at 0", "INS SimpleName: createFirstOnRow to MethodInvocation at 1", "INS QualifiedName: ByteUtil.EMPTY_BYTE_ARRAY to MethodInvocation at 2", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: MAX_VALUE_KV to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 10", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: KeyValue to FieldDeclaration at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: SEQUENCE_FAMILY_BYTES to MethodInvocation at 3", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: MAX_VALUE_BYTES to MethodInvocation at 4", "INS VariableDeclarationFragment to FieldDeclaration at 4"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 11", "operations": ["INS QualifiedName: ByteUtil.EMPTY_BYTE_ARRAY to MethodInvocation at 2", "INS SimpleName: SEQUENCE_FAMILY_BYTES to MethodInvocation at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: KeyValue to MethodInvocation at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: CYCLE_KV to VariableDeclarationFragment at 0", "INS Modifier: static to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleType: KeyValue to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 11", "INS SimpleName: createFirstOnRow to MethodInvocation at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: KeyValue to SimpleType: KeyValue at 0", "INS SimpleName: CYCLE_FLAG_BYTES to MethodInvocation at 4"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 18", "operations": ["INS SimpleName: MIN_VALUE_INDEX to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0", "INS PrimitiveType: int to FieldDeclaration at 3", "INS SimpleName: SEQUENCE_KV_COLUMNS to MethodInvocation at 0", "INS FieldDeclaration to TypeDeclaration: class at 18", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: indexOf to MethodInvocation at 1", "INS Modifier: final to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: MIN_VALUE_KV to MethodInvocation at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 19", "operations": ["INS SimpleName: MAX_VALUE_INDEX to VariableDeclarationFragment at 0", "INS PrimitiveType: int to FieldDeclaration at 3", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: indexOf to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: SEQUENCE_KV_COLUMNS to MethodInvocation at 0", "INS FieldDeclaration to TypeDeclaration: class at 19", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: MAX_VALUE_KV to MethodInvocation at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 20", "operations": ["INS Modifier: static to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS PrimitiveType: int to FieldDeclaration at 3", "INS SimpleName: indexOf to MethodInvocation at 1", "INS SimpleName: CYCLE_INDEX to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 20", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: SEQUENCE_KV_COLUMNS to MethodInvocation at 0", "INS SimpleName: CYCLE_KV to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 21", "operations": ["INS Modifier: final to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0", "INS PrimitiveType: int to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 21", "INS Modifier: static to FieldDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 29", "operations": ["INS Block to MethodDeclaration at 6", "INS SimpleName: overflowOrUnderflow to InfixExpression: || at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: < to InfixExpression: && at 1", "INS FieldAccess to MethodInvocation at 0", "INS SimpleName: key to FieldAccess at 1", "INS Block to IfStatement at 2", "INS SimpleName: ArithmeticException to SimpleType: ArithmeticException at 0", "INS IfStatement to Block at 3", "INS SimpleName: code to MethodInvocation at 4", "INS QualifiedName: value.currentValue to InfixExpression: < at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: factor to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS InfixExpression: || to IfStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS QualifiedName: value.limitReached to Assignment: = at 0", "INS TryStatement to Block at 2", "INS SimpleType: SequenceValue to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: getSchemaName to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleType: ArithmeticException to SingleVariableDeclaration at 0", "INS QualifiedName: value.maxValue to InfixExpression: > at 1", "INS Block to IfStatement at 1", "INS SimpleName: factor to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 2", "INS QualifiedName: value.limitReached to Assignment: = at 0", "INS BooleanLiteral: true to Assignment: = at 1", "INS PrimitiveType: long to MethodDeclaration at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS QualifiedName: value.currentValue to Assignment: = at 0", "INS FieldAccess to MethodInvocation at 0", "INS SimpleName: factor to InfixExpression: != at 0", "INS SimpleName: key to FieldAccess at 1", "INS SimpleName: SequenceValue to SimpleType: SequenceValue at 0", "INS SimpleName: overflowOrUnderflow to Assignment: = at 0", "INS MethodDeclaration to TypeDeclaration: class at 29", "INS Block to IfStatement at 1", "INS ParenthesizedExpression to InfixExpression: || at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: LongMath to MethodInvocation at 0", "INS ThrowStatement to Block at 1", "INS QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MAX_VALUE to ConditionalExpression at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS MethodInvocation to Assignment: = at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: increasingSeq to PrefixExpression: ! at 0", "INS SimpleName: code to VariableDeclarationFragment at 0", "INS SimpleName: increasingSeq to VariableDeclarationFragment at 0", "INS Block to IfStatement at 1", "INS SimpleName: SequenceUtil to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS QualifiedName: value.unusedValues to PrefixExpression: -- at 0", "INS ExpressionStatement to Block at 0", "INS InfixExpression: && to ParenthesizedExpression at 0", "INS BooleanLiteral: true to Assignment: = at 1", "INS InfixExpression: != to IfStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: SQLExceptionCode to SimpleType: SQLExceptionCode at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to ThrowStatement at 0", "INS Block to TryStatement at 0", "INS SimpleName: getException to MethodInvocation at 1", "INS CatchClause to TryStatement at 1", "INS SimpleType: SQLExceptionCode to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 3", "INS BooleanLiteral: false to VariableDeclarationFragment at 1", "INS NumberLiteral: 0 to InfixExpression: != at 1", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS IfStatement to Block at 0", "INS IfStatement to Block at 3", "INS QualifiedName: value.currentValue to MethodInvocation at 2", "INS SimpleName: checkedMultiply to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: increasingSeq to InfixExpression: && at 0", "INS Assignment: = to ExpressionStatement at 0", "INS BooleanLiteral: false to Assignment: = at 1", "INS QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MIN_VALUE to ConditionalExpression at 2", "INS QualifiedName: value.incrementBy to InfixExpression: > at 0", "INS SimpleName: EMPTY_SEQUENCE_CACHE_EXCEPTION to ThrowStatement at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS ThrowStatement to Block at 1", "INS SimpleName: incrementValue to MethodInvocation at 3", "INS VariableDeclarationStatement to Block at 1", "INS Block to CatchClause at 1", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: getSequenceName to MethodInvocation at 1", "INS QualifiedName: value.cycle to IfStatement at 0", "INS SimpleName: incrementValue to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS QualifiedName: value.currentValue to InfixExpression: > at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: increment to MethodDeclaration at 2", "INS SimpleType: SQLException to MethodDeclaration at 5", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: checkedAdd to MethodInvocation at 1", "INS QualifiedName: value.incrementBy to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrefixExpression: -- to ExpressionStatement at 0", "INS QualifiedName: value.limitReached to IfStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS ThisExpression to FieldAccess at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: LongMath to MethodInvocation at 0", "INS InfixExpression: && to ParenthesizedExpression at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ParenthesizedExpression to InfixExpression: || at 2", "INS IfStatement to Block at 1", "INS InfixExpression: > to VariableDeclarationFragment at 1", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS QualifiedName: value.minValue to InfixExpression: < at 1", "INS SimpleName: value to SingleVariableDeclaration at 1", "INS InfixExpression: > to InfixExpression: && at 1", "INS SimpleName: increasingSeq to ConditionalExpression at 0", "INS SimpleName: overflowOrUnderflow to VariableDeclarationFragment at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 40", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: indexOf to MethodInvocation at 1", "INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 3", "INS Block to MethodDeclaration at 6", "INS SimpleName: getKeyValue to MethodInvocation at 0", "INS SimpleName: kv to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 40", "INS SimpleName: r to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 41", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 41", "INS Modifier: public to MethodDeclaration at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: getKeyValue to MethodInvocation at 0", "INS SimpleName: CURRENT_VALUE_INDEX to MethodInvocation at 3", "INS SimpleName: CURRENT_VALUE_KV to MethodInvocation at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: getCurrentValueKV to MethodDeclaration at 3", "INS Modifier: static to MethodDeclaration at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: r to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 42", "operations": ["INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: getIncrementByKV to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 42", "INS Block to MethodDeclaration at 5", "INS Modifier: public to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 43", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: CACHE_SIZE_KV to MethodInvocation at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: getKeyValue to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 43", "INS SimpleName: r to MethodInvocation at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: CACHE_SIZE_INDEX to MethodInvocation at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 44", "operations": ["INS SimpleName: r to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0", "INS Block to MethodDeclaration at 5", "INS MethodDeclaration to TypeDeclaration: class at 44", "INS SimpleName: getStartValueKV to MethodDeclaration at 3", "INS SimpleName: START_WITH_KV to MethodInvocation at 2", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleType: Result to SingleVariableDeclaration at 0", "INS SimpleName: START_WITH_INDEX to MethodInvocation at 3", "INS SimpleName: getKeyValue to MethodInvocation at 0", "INS Modifier: static to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: r to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 45", "operations": ["INS SimpleName: getKeyValue to MethodInvocation at 0", "INS SimpleType: Result to SingleVariableDeclaration at 0", "INS SimpleName: getMinValueKV to MethodDeclaration at 3", "INS SimpleName: MIN_VALUE_KV to MethodInvocation at 2", "INS SimpleName: Result to SimpleType: Result at 0", "INS SimpleName: r to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 45", "INS SimpleName: MIN_VALUE_INDEX to MethodInvocation at 3", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: r to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 0", "INS Block to MethodDeclaration at 5", "INS Modifier: static to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 46", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: r to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 46", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: MAX_VALUE_KV to MethodInvocation at 2", "INS SimpleName: getMaxValueKV to MethodDeclaration at 3", "INS SimpleName: MAX_VALUE_INDEX to MethodInvocation at 3", "INS Modifier: static to MethodDeclaration at 1", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: Result to SimpleType: Result at 0", "INS ReturnStatement to Block at 0", "INS SimpleType: Result to SingleVariableDeclaration at 0", "INS SimpleType: KeyValue to MethodDeclaration at 2", "INS Block to MethodDeclaration at 5"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 47", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Result to SimpleType: Result at 0", "INS MethodDeclaration to TypeDeclaration: class at 47", "INS Modifier: static to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: KeyValue to SimpleType: KeyValue at 0", "INS SimpleName: getKeyValue to MethodInvocation at 0", "INS SimpleName: r to MethodInvocation at 1", "INS SimpleName: CYCLE_INDEX to MethodInvocation at 3", "INS SimpleName: getCycleKV to MethodDeclaration at 3", "INS SimpleType: Result to SingleVariableDeclaration at 0", "INS SimpleName: CYCLE_KV to MethodInvocation at 2", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleType: KeyValue to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: r to SingleVariableDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 48", "operations": ["INS Block to MethodDeclaration at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: kvs to SingleVariableDeclaration at 1", "INS SimpleName: replaceCurrentValueKV to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Modifier: static to MethodDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: currentValueKV to MethodInvocation at 3", "INS MethodDeclaration to TypeDeclaration: class at 48"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 11", "MOV FieldDeclaration to TypeDeclaration: class at 8"]}, {"root": "INS VariableDeclarationFragment to FieldDeclaration at 4", "operations": ["INS SimpleName: indexOf to MethodInvocation at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: START_WITH_KV to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: START_WITH_INDEX to VariableDeclarationFragment at 0", "INS SimpleName: SEQUENCE_KV_COLUMNS to MethodInvocation at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 4"]}, {"root": "UPDATE from EmptySequenceCacheException to SQLException", "operations": ["UPD SimpleType: EmptySequenceCacheException from EmptySequenceCacheException to SQLException", "UPD SimpleName: EmptySequenceCacheException from EmptySequenceCacheException to SQLException"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS TagElement: @param to Javadoc at 1", "INS TagElement: @return to Javadoc at 3", "INS TextElement:  an empty KeyValue used only to get the column family and column qualifier of the to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 2", "INS SimpleName: kv to TagElement: @param at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: cellIndex to TagElement: @param at 0", "INS TextElement:  index of the KeyValue to be returned (if the sequence row is from a previous version to TagElement: @param at 1", "INS TextElement: key value to be returned (if the sequence row is from a previous version) to TagElement: @param at 2", "INS TextElement: Returns a KeyValue from the input result row to TagElement at 0", "INS TextElement:  KeyValue to TagElement: @return at 0"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private", "UPD Modifier: public from public to private"]}, {"root": "INS SimpleType: KeyValue to MethodDeclaration at 3", "operations": ["INS SimpleType: KeyValue to MethodDeclaration at 3", "INS SimpleName: KeyValue to SimpleType: KeyValue at 0"]}, {"root": "UPDATE from kvs to getKeyValue", "operations": ["UPD SimpleName: kvs from kvs to getKeyValue", "UPD SimpleName: getIncrementByKV from getIncrementByKV to getKeyValue", "UPD SimpleName: getCurrentValueKV from getCurrentValueKV to getKeyValue", "UPD SimpleName: CURRENT_VALUE_INDEX from CURRENT_VALUE_INDEX to getKeyValue", "UPD SimpleName: kvs from kvs to getKeyValue"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SimpleName: r to SingleVariableDeclaration at 1", "INS SimpleType: Result to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SimpleType: KeyValue to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 8", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: cellIndex to SingleVariableDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV Modifier: static to MethodDeclaration at 1", "MOV SimpleType: KeyValue to MethodDeclaration at 2", "MOV SimpleName: getIncrementByKV to MethodDeclaration at 3", "MOV Modifier: public to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SimpleType: KeyValue to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SimpleType: KeyValue to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SimpleType: KeyValue to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: KeyValue to MethodDeclaration at 2", "MOV Modifier: public to MethodDeclaration at 0", "MOV Modifier: static to MethodDeclaration at 1", "MOV SimpleName: getCacheSizeKV to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: KeyValue to MethodDeclaration at 2"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 2", "operations": ["INS PrimitiveType: void to MethodDeclaration at 2"]}, {"root": "UPDATE from getCurrentValueKV to replaceMinValueKV", "operations": ["UPD SimpleName: getCurrentValueKV from getCurrentValueKV to replaceMinValueKV"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleType: Cell to ParameterizedType: List<Cell> at 1", "INS ParameterizedType: List<Cell> to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: kvs to SingleVariableDeclaration at 1", "INS SimpleType: List to ParameterizedType: List<Cell> at 0", "INS SimpleName: List to SimpleType: List at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: KeyValue to SimpleType: KeyValue at 0", "INS SimpleName: minValueKV to SingleVariableDeclaration at 1", "INS SimpleType: KeyValue to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS SimpleName: MIN_VALUE_INDEX to MethodInvocation at 2", "INS SimpleName: set to MethodInvocation at 1", "INS Block to MethodDeclaration at 6", "INS SimpleName: minValueKV to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: kvs to MethodInvocation at 0"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 2", "operations": ["INS PrimitiveType: void to MethodDeclaration at 2"]}, {"root": "UPDATE from getIncrementByKV to replaceMaxValueKV", "operations": ["UPD SimpleName: getIncrementByKV from getIncrementByKV to replaceMaxValueKV"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: kvs to SingleVariableDeclaration at 1", "INS SimpleType: Cell to ParameterizedType: List<Cell> at 1", "INS ParameterizedType: List<Cell> to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: List to ParameterizedType: List<Cell> at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: KeyValue to SingleVariableDeclaration at 0", "INS SimpleName: KeyValue to SimpleType: KeyValue at 0", "INS SimpleName: maxValueKV to SingleVariableDeclaration at 1"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS Block to MethodDeclaration at 6", "INS ExpressionStatement to Block at 0", "INS SimpleName: MAX_VALUE_INDEX to MethodInvocation at 2", "INS SimpleName: maxValueKV to MethodInvocation at 3", "INS SimpleName: set to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: kvs to MethodInvocation at 0"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 2", "operations": ["INS PrimitiveType: void to MethodDeclaration at 2"]}, {"root": "UPDATE from getCacheSizeKV to replaceCycleValueKV", "operations": ["UPD SimpleName: getCacheSizeKV from getCacheSizeKV to replaceCycleValueKV"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS ParameterizedType: List<Cell> to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: kvs to SingleVariableDeclaration at 1", "INS SimpleType: Cell to ParameterizedType: List<Cell> at 1", "INS SimpleType: List to ParameterizedType: List<Cell> at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: cycleValueKV to SingleVariableDeclaration at 1", "INS SimpleType: KeyValue to SingleVariableDeclaration at 0", "INS SimpleName: KeyValue to SimpleType: KeyValue at 0"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: cycleValueKV to MethodInvocation at 3", "INS SimpleName: kvs to MethodInvocation at 0", "INS SimpleName: CYCLE_INDEX to MethodInvocation at 2", "INS Block to MethodDeclaration at 6", "INS SimpleName: set to MethodInvocation at 1"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement to Javadoc at 0", "INS TextElement: KeyValues if the sequence row is from a previous version  to TagElement at 1", "INS TextElement: Returns a Cell[] for the result row. Handles empty MIN_VALUE, MAX_VALUE and CYCLE to TagElement at 0", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "INS ParameterizedType: List<Cell> to MethodDeclaration at 3", "operations": ["INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: Cell to SimpleType: Cell at 0", "INS SimpleType: List to ParameterizedType: List<Cell> at 0", "INS ParameterizedType: List<Cell> to MethodDeclaration at 3", "INS SimpleType: Cell to ParameterizedType: List<Cell> at 1"]}, {"root": "INS SimpleName: getCells to MethodDeclaration at 4", "operations": ["INS SimpleName: getCells to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: r to SingleVariableDeclaration at 1", "INS SimpleType: Result to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 9", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 9", "INS Modifier: public to FieldDeclaration at 0", "INS PrimitiveType: long to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: maxValue to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS PrimitiveType: boolean to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: cycle to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 10", "INS Modifier: public to FieldDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 11", "operations": ["INS SimpleName: unusedValues to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 11", "INS Modifier: public to FieldDeclaration at 0", "INS PrimitiveType: long to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 12", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 2", "INS Modifier: public to FieldDeclaration at 0", "INS SimpleName: isDeleted to VariableDeclarationFragment at 0", "INS PrimitiveType: boolean to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 12"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 13", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 2", "INS Modifier: public to FieldDeclaration at 0", "INS PrimitiveType: boolean to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 13", "INS SimpleName: limitReached to VariableDeclarationFragment at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SimpleName: minValue to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 7"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS SimpleName: maxValue to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 9", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 9", "INS SimpleName: cycle to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SimpleName: minValue to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: maxValue to SingleVariableDeclaration at 1", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: cycle to SingleVariableDeclaration at 1", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from SEQUENCE_KEY_VALUES to NUM_SEQUENCE_KEY_VALUES", "operations": ["UPD SimpleName: SEQUENCE_KEY_VALUES from SEQUENCE_KEY_VALUES to NUM_SEQUENCE_KEY_VALUES", "UPD SimpleName: kvs from kvs to NUM_SEQUENCE_KEY_VALUES"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2", "MOV ReturnStatement to Block at 4"]}, {"root": "INS ReturnStatement to Block at 3", "operations": ["INS SimpleName: increment to MethodInvocation at 0", "INS ReturnStatement to Block at 3", "INS SimpleName: value to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: factor to MethodInvocation at 2"]}, {"root": "INS ReturnStatement to Block at 3", "operations": ["INS SimpleName: factor to MethodInvocation at 2", "INS ReturnStatement to Block at 3", "INS SimpleName: increment to MethodInvocation at 0", "INS SimpleName: value to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "UPDATE from kvs to kv", "operations": ["UPD SimpleName: kvs from kvs to kv", "UPD SimpleName: kvs from kvs to kv", "UPD SimpleName: kvs from kvs to kv", "UPD SimpleName: kvs from kvs to kv"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleName: kvs to SingleVariableDeclaration at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleName: kv to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 1", "INS QualifiedName: cells.length to InfixExpression: != at 0", "INS SimpleName: NUM_SEQUENCE_KEY_VALUES to InfixExpression: != at 1", "INS SimpleName: kv to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: cell to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 6", "INS SimpleName: kv to MethodInvocation at 0", "INS InfixExpression: != to ConditionalExpression at 0", "INS ArrayAccess to ParenthesizedExpression at 0", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 7", "INS SimpleName: getFamilyOffset to MethodInvocation at 1", "INS SimpleName: getColumnLatestCell to MethodInvocation at 1", "INS MethodInvocation to ConditionalExpression at 1", "INS SimpleName: getQualifierOffset to MethodInvocation at 1", "INS SimpleName: r to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 5", "INS SimpleName: getFamilyLength to MethodInvocation at 1", "INS ParenthesizedExpression to ConditionalExpression at 2", "INS SimpleName: kv to MethodInvocation at 0", "INS SimpleName: getQualifierArray to MethodInvocation at 1", "INS SimpleName: kv to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleName: cells to ArrayAccess at 0", "INS SimpleName: cellIndex to ArrayAccess at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getQualifierLength to MethodInvocation at 1"]}, {"root": "INS SimpleType: KeyValue to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: KeyValue to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0"]}, {"root": "MOVE from SimpleType: KeyValue", "operations": ["MOV SimpleName: KeyValue to SimpleType: KeyValue at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV ParameterizedType: List<Cell> to SingleVariableDeclaration at 0"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS SimpleName: NUM_SEQUENCE_KEY_VALUES to InfixExpression: == at 1", "INS IfStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: length to FieldAccess at 1", "INS FieldAccess to InfixExpression: == at 0", "INS ReturnStatement to IfStatement at 1", "INS SimpleName: Lists to MethodInvocation at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: newArrayList to MethodInvocation at 1"]}, {"root": "INS EnhancedForStatement to Block at 2", "operations": ["INS SimpleName: SEQUENCE_KV_COLUMNS to EnhancedForStatement at 1", "INS Block to EnhancedForStatement at 2", "INS SimpleType: KeyValue to SingleVariableDeclaration at 0", "INS EnhancedForStatement to Block at 2", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: kv to SingleVariableDeclaration at 1", "INS SimpleName: KeyValue to SimpleType: KeyValue at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SimpleName: minValue to SingleVariableDeclaration at 1", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: maxValue to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: long to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: cycle to SingleVariableDeclaration at 1", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleName: SequenceValue to MethodDeclaration at 1", "operations": ["INS SimpleName: SequenceValue to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS NumberLiteral: 0 to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: limitReached to FieldAccess at 1", "INS SimpleName: isDeleted to Assignment: = at 1", "INS SimpleName: isDeleted to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS Block to MethodDeclaration at 4", "INS Assignment: = to ExpressionStatement at 0", "INS BooleanLiteral: false to Assignment: = at 1", "INS ExpressionStatement to Block at 2", "INS ExpressionStatement to Block at 3", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0"]}, {"root": "INS SimpleName: START_WITH_KV to MethodInvocation at 6", "operations": ["INS SimpleName: START_WITH_KV to MethodInvocation at 6"]}, {"root": "INS SimpleName: MIN_VALUE_KV to MethodInvocation at 7", "operations": ["INS SimpleName: MIN_VALUE_KV to MethodInvocation at 7"]}, {"root": "INS SimpleName: MAX_VALUE_KV to MethodInvocation at 8", "operations": ["INS SimpleName: MAX_VALUE_KV to MethodInvocation at 8"]}, {"root": "INS SimpleName: CYCLE_KV to MethodInvocation at 9", "operations": ["INS SimpleName: CYCLE_KV to MethodInvocation at 9"]}, {"root": "UPDATE from List to Result", "operations": ["UPD SimpleName: List from List to Result", "UPD SimpleName: List from List to Result"]}, {"root": "MOVE from SimpleType: Result", "operations": ["MOV SimpleName: List to SimpleType: Result at 0"]}, {"root": "MOVE from SimpleType: KeyValue", "operations": ["MOV SimpleName: KeyValue to SimpleType: KeyValue at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Cell to VariableDeclarationStatement at 0"]}, {"root": "MOVE from SimpleType: KeyValue", "operations": ["MOV SimpleName: KeyValue to SimpleType: KeyValue at 0"]}, {"root": "MOVE from SimpleType: Result", "operations": ["MOV SimpleName: List to SimpleType: Result at 0"]}, {"root": "MOVE from SimpleType: Result", "operations": ["MOV SimpleName: Result to SimpleType: Result at 0"]}, {"root": "INS ParameterizedType: List<Cell> to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: Cell to SimpleType: Cell at 0", "INS ParameterizedType: List<Cell> to VariableDeclarationStatement at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: Cell to ParameterizedType: List<Cell> at 1", "INS SimpleType: List to ParameterizedType: List<Cell> at 0"]}, {"root": "INS SimpleName: cellList to ReturnStatement at 0", "operations": ["INS SimpleName: cellList to ReturnStatement at 0"]}, {"root": "UPDATE from cacheSize to startValue", "operations": ["UPD SimpleName: cacheSize from cacheSize to startValue"]}, {"root": "UPDATE from nextValue to minValue", "operations": ["UPD SimpleName: nextValue from nextValue to minValue"]}, {"root": "MOVE from Block", "operations": ["MOV ConstructorInvocation to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS ExpressionStatement to Block at 3", "INS SimpleName: maxValue to FieldAccess at 1", "INS SimpleName: maxValue to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: minValueKV to VariableDeclarationFragment at 0", "INS SimpleName: r to MethodInvocation at 1", "INS SimpleType: KeyValue to VariableDeclarationStatement at 0", "INS SimpleName: KeyValue to SimpleType: KeyValue at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getMinValueKV to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 3"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS SimpleType: KeyValue to VariableDeclarationStatement at 0", "INS SimpleName: getMaxValueKV to MethodInvocation at 0", "INS SimpleName: KeyValue to SimpleType: KeyValue at 0", "INS VariableDeclarationStatement to Block at 4", "INS SimpleName: maxValueKV to VariableDeclarationFragment at 0", "INS SimpleName: r to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 5", "operations": ["INS SimpleName: getCycleKV to MethodInvocation at 0", "INS SimpleName: KeyValue to SimpleType: KeyValue at 0", "INS VariableDeclarationStatement to Block at 5", "INS SimpleType: KeyValue to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: cycleKV to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: r to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 11", "operations": ["INS SimpleName: maxValueKV to MethodInvocation at 0", "INS ExpressionStatement to Block at 11", "INS SimpleName: getCodec to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 4", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: SortOrder to MethodInvocation at 0", "INS QualifiedName: PDataType.LONG to MethodInvocation at 0", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: maxValue to FieldAccess at 1", "INS SimpleName: maxValueKV to MethodInvocation at 0", "INS SimpleName: getValueOffset to MethodInvocation at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: getValueArray to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: decodeLong to MethodInvocation at 1", "INS SimpleName: getDefault to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 12", "operations": ["INS MethodInvocation to CastExpression at 1", "INS QualifiedName: PDataType.BOOLEAN to MethodInvocation at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: Boolean to SimpleType: Boolean at 0", "INS SimpleName: getValueArray to MethodInvocation at 1", "INS SimpleName: cycleKV to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS FieldAccess to Assignment: = at 0", "INS SimpleType: Boolean to CastExpression at 0", "INS SimpleName: cycleKV to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS ExpressionStatement to Block at 12", "INS SimpleName: getValueLength to MethodInvocation at 1", "INS SimpleName: getValueOffset to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: cycle to FieldAccess at 1", "INS SimpleName: toObject to MethodInvocation at 1", "INS SimpleName: cycleKV to MethodInvocation at 0", "INS CastExpression to Assignment: = at 1", "INS MethodInvocation to MethodInvocation at 4"]}, {"root": "INS ExpressionStatement to Block at 13", "operations": ["INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS BooleanLiteral: false to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: limitReached to FieldAccess at 1", "INS ExpressionStatement to Block at 13"]}, {"root": "INS ExpressionStatement to Block at 14", "operations": ["INS SimpleName: startValue to FieldAccess at 1", "INS ExpressionStatement to Block at 14", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: currentValue to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 1"]}, {"root": "INS QualifiedName: value.isDeleted to ConditionalExpression at 0", "operations": ["INS QualifiedName: value.isDeleted to ConditionalExpression at 0"]}, {"root": "UPDATE from value.nextValue to value.unusedValues", "operations": ["UPD QualifiedName: value.nextValue from value.nextValue to value.unusedValues", "UPD QualifiedName: value.nextValue from value.nextValue to value.unusedValues", "UPD QualifiedName: value.nextValue from value.nextValue to value.unusedValues"]}, {"root": "INS NumberLiteral: 0 to InfixExpression: == at 2", "operations": ["INS NumberLiteral: 0 to InfixExpression: == at 2"]}, {"root": "INS NumberLiteral: 0 to InfixExpression: == at 2", "operations": ["INS NumberLiteral: 0 to InfixExpression: == at 2"]}, {"root": "UPDATE from kvs to cells", "operations": ["UPD SimpleName: kvs from kvs to cells"]}, {"root": "INS QualifiedName: org.apache.hadoop.hbase.KeyValueUtil to MethodInvocation at 0", "operations": ["INS QualifiedName: org.apache.hadoop.hbase.KeyValueUtil to MethodInvocation at 0"]}, {"root": "UPDATE from kvs to ensureKeyValue", "operations": ["UPD SimpleName: kvs from kvs to ensureKeyValue"]}, {"root": "UPDATE from get to cell", "operations": ["UPD SimpleName: get from get to cell"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: kvs to MethodInvocation at 2", "MOV SimpleName: size to MethodInvocation at 0"]}, {"root": "UPDATE from get to r", "operations": ["UPD SimpleName: get from get to r", "UPD SimpleName: currentValueKV from currentValueKV to r", "UPD SimpleName: size from size to r"]}, {"root": "INS SimpleName: INCREMENT_BY_KV to MethodInvocation at 2", "operations": ["INS SimpleName: INCREMENT_BY_KV to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: kvs to MethodInvocation at 0", "MOV SimpleName: size to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: get to MethodInvocation at 1", "MOV SimpleName: CACHE_SIZE_INDEX to MethodInvocation at 2", "MOV SimpleName: kvs to MethodInvocation at 0"]}, {"root": "UPDATE from get to set", "operations": ["UPD SimpleName: get from get to set"]}, {"root": "UPDATE from CACHE_SIZE_INDEX to CURRENT_VALUE_INDEX", "operations": ["UPD SimpleName: CACHE_SIZE_INDEX from CACHE_SIZE_INDEX to CURRENT_VALUE_INDEX"]}, {"root": "MOVE from SimpleType: Cell", "operations": ["MOV SimpleName: Cell to SimpleType: Cell at 0"]}, {"root": "MOVE from SimpleType: Cell", "operations": ["MOV SimpleName: Cell to SimpleType: Cell at 0"]}, {"root": "MOVE from SimpleType: Cell", "operations": ["MOV SimpleName: Cell to SimpleType: Cell at 0"]}, {"root": "UPDATE from newkvs to cellList", "operations": ["UPD SimpleName: newkvs from newkvs to cellList", "UPD SimpleName: newkvs from newkvs to cellList"]}, {"root": "UPDATE from > to !=", "operations": ["UPD InfixExpression: > from > to !="]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV CastExpression to MethodInvocation at 8"]}, {"root": "UPDATE from value.nextValue to value.startValue", "operations": ["UPD QualifiedName: value.nextValue from value.nextValue to value.startValue"]}, {"root": "INS CastExpression to MethodInvocation at 4", "operations": ["INS QualifiedName: PhoenixDatabaseMetaData.START_WITH_BYTES to MethodInvocation at 4", "INS QualifiedName: value.timestamp to MethodInvocation at 5", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: key to MethodInvocation at 2", "INS SimpleName: KeyValueUtil to MethodInvocation at 0", "INS CastExpression to MethodInvocation at 4", "INS QualifiedName: PhoenixDatabaseMetaData.SEQUENCE_FAMILY_BYTES to MethodInvocation at 3", "INS SimpleName: newKeyValue to MethodInvocation at 1"]}, {"root": "UPDATE from size to SEQUENCE_KV_COLUMNS", "operations": ["UPD SimpleName: size from size to SEQUENCE_KV_COLUMNS"]}, {"root": "MOVE from FieldAccess", "operations": ["MOV MethodInvocation to FieldAccess at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from newArrayList to newArrayListWithCapacity", "operations": ["UPD SimpleName: newArrayList from newArrayList to newArrayListWithCapacity"]}, {"root": "INS FieldAccess to Assignment: = at 0", "operations": ["INS ThisExpression to FieldAccess at 0", "INS SimpleName: minValue to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0"]}, {"root": "INS SimpleName: minValue to Assignment: = at 1", "operations": ["INS SimpleName: minValue to Assignment: = at 1"]}, {"root": "INS SimpleName: cycle to Assignment: = at 1", "operations": ["INS SimpleName: cycle to Assignment: = at 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV FieldAccess to Assignment: = at 0"]}, {"root": "INS FieldAccess to Assignment: = at 0", "operations": ["INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: timestamp to FieldAccess at 1"]}, {"root": "INS FieldAccess to Assignment: = at 0", "operations": ["INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: currentValue to FieldAccess at 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV FieldAccess to Assignment: = at 0"]}, {"root": "INS FieldAccess to Assignment: = at 0", "operations": ["INS ThisExpression to FieldAccess at 0", "INS SimpleName: unusedValues to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0"]}, {"root": "INS FieldAccess to Assignment: = at 0", "operations": ["INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: minValue to FieldAccess at 1"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS SimpleName: getValueOffset to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 4", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: minValueKV to MethodInvocation at 0", "INS SimpleName: decodeLong to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: SortOrder to MethodInvocation at 0", "INS SimpleName: minValueKV to MethodInvocation at 0", "INS SimpleName: getCodec to MethodInvocation at 1", "INS SimpleName: getValueArray to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getDefault to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS QualifiedName: PDataType.LONG to MethodInvocation at 0"]}, {"root": "INS CastExpression to MethodInvocation at 4", "operations": ["INS MethodInvocation to CastExpression at 1", "INS SimpleName: timestamp to MethodInvocation at 5", "INS QualifiedName: ByteUtil.EMPTY_BYTE_ARRAY to MethodInvocation at 6", "INS SimpleName: key to MethodInvocation at 2", "INS SimpleName: Cell to SimpleType: Cell at 0", "INS SimpleName: newKeyValue to MethodInvocation at 1", "INS CastExpression to MethodInvocation at 4", "INS SimpleName: KeyValueUtil to MethodInvocation at 0", "INS QualifiedName: PhoenixDatabaseMetaData.SEQUENCE_FAMILY_BYTES to MethodInvocation at 3", "INS SimpleType: Cell to CastExpression at 0", "INS QualifiedName: PhoenixDatabaseMetaData.CURRENT_VALUE_BYTES to MethodInvocation at 4"]}, {"root": "INS CastExpression to MethodInvocation at 9", "operations": ["INS SimpleName: toBytes to MethodInvocation at 1", "INS SimpleType: Cell to CastExpression at 0", "INS SimpleName: KeyValueUtil to MethodInvocation at 0", "INS QualifiedName: PDataType.LONG to MethodInvocation at 0", "INS SimpleName: newKeyValue to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 6", "INS QualifiedName: PhoenixDatabaseMetaData.SEQUENCE_FAMILY_BYTES to MethodInvocation at 3", "INS SimpleName: maxValue to MethodInvocation at 2", "INS MethodInvocation to CastExpression at 1", "INS QualifiedName: PhoenixDatabaseMetaData.MAX_VALUE_BYTES to MethodInvocation at 4", "INS SimpleName: timestamp to MethodInvocation at 5", "INS SimpleName: Cell to SimpleType: Cell at 0", "INS SimpleName: key to MethodInvocation at 2", "INS CastExpression to MethodInvocation at 9"]}, {"root": "INS CastExpression to MethodInvocation at 10", "operations": ["INS SimpleName: Cell to SimpleType: Cell at 0", "INS MethodInvocation to CastExpression at 1", "INS QualifiedName: PhoenixDatabaseMetaData.SEQUENCE_FAMILY_BYTES to MethodInvocation at 3", "INS SimpleName: cycle to MethodInvocation at 2", "INS SimpleName: toBytes to MethodInvocation at 1", "INS SimpleName: KeyValueUtil to MethodInvocation at 0", "INS SimpleName: newKeyValue to MethodInvocation at 1", "INS CastExpression to MethodInvocation at 10", "INS SimpleName: key to MethodInvocation at 2", "INS QualifiedName: PhoenixDatabaseMetaData.CYCLE_FLAG_BYTES to MethodInvocation at 4", "INS QualifiedName: PDataType.BOOLEAN to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 6", "INS SimpleName: timestamp to MethodInvocation at 5", "INS SimpleType: Cell to CastExpression at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: SequenceValue to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from != to >", "operations": ["UPD InfixExpression: != from != to >"]}, {"root": "INS SimpleType: Cell to CastExpression at 0", "operations": ["INS SimpleType: Cell to CastExpression at 0", "INS SimpleName: Cell to SimpleType: Cell at 0"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: Cell to CastExpression at 0"]}, {"root": "UPDATE from set to add", "operations": ["UPD SimpleName: set from set to add"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: kv to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from cacheSize to cycle", "operations": ["UPD SimpleName: cacheSize from cacheSize to cycle"]}, {"root": "INS SimpleType: Cell to CastExpression at 0", "operations": ["INS SimpleName: Cell to SimpleType: Cell at 0", "INS SimpleType: Cell to CastExpression at 0"]}, {"root": "INS FieldAccess to IfStatement at 0", "operations": ["INS SimpleName: isDeleted to FieldAccess at 1", "INS FieldAccess to IfStatement at 0"]}, {"root": "INS NumberLiteral: 0 to InfixExpression: != at 2", "operations": ["INS NumberLiteral: 0 to InfixExpression: != at 2"]}, {"root": "INS QualifiedName: ByteUtil.EMPTY_BYTE_ARRAY to MethodInvocation at 6", "operations": ["INS QualifiedName: ByteUtil.EMPTY_BYTE_ARRAY to MethodInvocation at 6"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 6"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: size to MethodInvocation at 1", "MOV SimpleName: kvs to MethodInvocation at 0"]}, {"root": "UPDATE from size to getFamilyArray", "operations": ["UPD SimpleName: size from size to getFamilyArray"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: currentValueKV to MethodInvocation at 1", "MOV SimpleName: CURRENT_VALUE_INDEX to MethodInvocation at 0"]}, {"root": "UPDATE from PhoenixDatabaseMetaData.CURRENT_VALUE_BYTES to PhoenixDatabaseMetaData.MIN_VALUE_BYTES", "operations": ["UPD QualifiedName: PhoenixDatabaseMetaData.CURRENT_VALUE_BYTES from PhoenixDatabaseMetaData.CURRENT_VALUE_BYTES to PhoenixDatabaseMetaData.MIN_VALUE_BYTES"]}, {"root": "INS MethodInvocation to MethodInvocation at 6", "operations": ["INS QualifiedName: PDataType.LONG to MethodInvocation at 0", "INS SimpleName: minValue to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 6"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: SequenceValue to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: minValue to ClassInstanceCreation at 2", "operations": ["INS SimpleName: minValue to ClassInstanceCreation at 2"]}, {"root": "INS SimpleName: maxValue to ClassInstanceCreation at 3", "operations": ["INS SimpleName: maxValue to ClassInstanceCreation at 3"]}, {"root": "INS SimpleName: cycle to ClassInstanceCreation at 4", "operations": ["INS SimpleName: cycle to ClassInstanceCreation at 4"]}, {"root": "MOVE from FieldAccess", "operations": ["MOV MethodInvocation to FieldAccess at 0"]}, {"root": "UPDATE from startWithBuf to toBytes", "operations": ["UPD SimpleName: startWithBuf from startWithBuf to toBytes"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: startWithBuf to MethodInvocation at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: isDeleted", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: value", "DEL SimpleName: isDeleted", "DEL MethodInvocation"]}, {"root": "DEL QualifiedName: value.currentValue", "operations": ["DEL QualifiedName: value.currentValue"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: factor", "DEL Assignment: +=", "DEL InfixExpression: *", "DEL QualifiedName: value.incrementBy", "DEL QualifiedName: value.currentValue", "DEL ExpressionStatement"]}, {"root": "DEL QualifiedName: value.currentValue", "operations": ["DEL QualifiedName: value.currentValue"]}, {"root": "DEL QualifiedName: value.currentValue", "operations": ["DEL QualifiedName: value.currentValue"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL PrimitiveType: long", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: currentValue", "DEL QualifiedName: value.currentValue"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL InfixExpression: *", "DEL ExpressionStatement", "DEL SimpleName: factor", "DEL QualifiedName: value.currentValue", "DEL Assignment: +=", "DEL QualifiedName: value.incrementBy"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: currentValue", "DEL ReturnStatement"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL ParameterizedType: List<KeyValue>", "DEL SingleVariableDeclaration", "DEL SimpleType: List", "DEL SimpleType: KeyValue"]}, {"root": "DEL AssertStatement", "operations": ["DEL InfixExpression: ==", "DEL SimpleName: SEQUENCE_KEY_VALUES", "DEL ParenthesizedExpression", "DEL AssertStatement", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: CURRENT_VALUE_INDEX", "operations": ["DEL SimpleName: CURRENT_VALUE_INDEX"]}, {"root": "DEL ParameterizedType: List<KeyValue>", "operations": ["DEL SimpleType: KeyValue", "DEL SimpleType: List", "DEL SimpleName: List", "DEL ParameterizedType: List<KeyValue>"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL MethodDeclaration", "DEL InfixExpression: ==", "DEL Block", "DEL AssertStatement", "DEL ParenthesizedExpression", "DEL SimpleName: SEQUENCE_KEY_VALUES"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ReturnStatement", "DEL SimpleName: kvs", "DEL SimpleType: List", "DEL SingleVariableDeclaration", "DEL ParameterizedType: List<KeyValue>", "DEL Block", "DEL MethodDeclaration", "DEL SimpleType: KeyValue", "DEL MethodInvocation", "DEL AssertStatement", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: SEQUENCE_KEY_VALUES", "DEL ParenthesizedExpression"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: rawCells", "DEL SimpleName: r", "DEL AssertStatement", "DEL ArrayAccess", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: kvs", "DEL SimpleName: SEQUENCE_KEY_VALUES", "DEL Dimension", "DEL SimpleName: kvs", "DEL QualifiedName: org.apache.hadoop.hbase.KeyValueUtil", "DEL SimpleName: ensureKeyValue", "DEL ArrayType: Cell[]", "DEL MethodInvocation", "DEL SimpleType: Cell", "DEL QualifiedName: kvs.length", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL SimpleName: CURRENT_VALUE_INDEX"]}, {"root": "DEL Block", "operations": ["DEL ArrayAccess", "DEL InfixExpression: ==", "DEL Dimension", "DEL ParenthesizedExpression", "DEL ArrayType: Cell[]", "DEL QualifiedName: kvs.length", "DEL SimpleName: SEQUENCE_KEY_VALUES", "DEL QualifiedName: org.apache.hadoop.hbase.KeyValueUtil", "DEL AssertStatement", "DEL SimpleName: INCREMENT_BY_INDEX", "DEL SimpleName: ensureKeyValue", "DEL Block", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleType: Cell", "DEL ReturnStatement", "DEL SimpleName: kvs", "DEL SimpleName: kvs"]}, {"root": "DEL Block", "operations": ["DEL MethodInvocation", "DEL SimpleName: CACHE_SIZE_INDEX", "DEL SimpleType: Cell", "DEL SimpleName: kvs", "DEL SimpleName: SEQUENCE_KEY_VALUES", "DEL SimpleName: ensureKeyValue", "DEL QualifiedName: org.apache.hadoop.hbase.KeyValueUtil", "DEL VariableDeclarationStatement", "DEL ArrayAccess", "DEL QualifiedName: kvs.length", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL Block", "DEL InfixExpression: ==", "DEL AssertStatement", "DEL Dimension", "DEL ArrayType: Cell[]", "DEL ParenthesizedExpression", "DEL SimpleName: kvs"]}, {"root": "DEL SimpleType: Result", "operations": ["DEL SimpleType: Result"]}, {"root": "DEL SimpleName: replaceCurrentValueKV", "operations": ["DEL SimpleName: replaceCurrentValueKV"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: newkvs", "DEL SimpleName: Result", "DEL SimpleName: create", "DEL MethodInvocation"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL Block", "DEL SimpleName: SequenceValue", "DEL Modifier: public"]}, {"root": "DEL ConditionalExpression", "operations": ["DEL NumberLiteral: 1", "DEL SimpleName: isDeleted", "DEL NumberLiteral: 0", "DEL PrefixExpression: -", "DEL ConditionalExpression"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL SimpleName: isDeleted", "operations": ["DEL SimpleName: isDeleted"]}, {"root": "DEL Block", "operations": ["DEL InfixExpression: <", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL Block"]}, {"root": "DEL SimpleName: timestamp", "operations": ["DEL SimpleName: timestamp"]}, {"root": "DEL SimpleName: nextValue", "operations": ["DEL SimpleName: nextValue"]}, {"root": "DEL SimpleName: incrementBy", "operations": ["DEL SimpleName: incrementBy"]}, {"root": "DEL SimpleName: cacheSize", "operations": ["DEL SimpleName: cacheSize"]}, {"root": "DEL SimpleName: currentValue", "operations": ["DEL SimpleName: currentValue"]}, {"root": "DEL InfixExpression: -", "operations": ["DEL SimpleName: nextValue", "DEL InfixExpression: -", "DEL InfixExpression: *", "DEL SimpleName: incrementBy", "DEL SimpleName: cacheSize"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL QualifiedName: value.nextValue", "DEL Assignment: =", "DEL QualifiedName: value.currentValue"]}]}}, {"Sequence_diff": {"operations": ["Insert ImportDeclaration(7) into CompilationUnit(2538) at 3", "Insert ImportDeclaration(11) into CompilationUnit(2538) at 5", "Insert ImportDeclaration(13) into CompilationUnit(2538) at 6", "Insert ImportDeclaration(17) into CompilationUnit(2538) at 8", "Insert ImportDeclaration(65) into CompilationUnit(2538) at 32", "Insert ImportDeclaration(69) into CompilationUnit(2538) at 34", "Insert QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.CYCLE_FLAG_BYTES(6) into ImportDeclaration(7) at 0", "Insert QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.MAX_VALUE_BYTES(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.MIN_VALUE_BYTES(12) into ImportDeclaration(13) at 0", "Insert QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.START_WITH_BYTES(16) into ImportDeclaration(17) at 0", "Insert QualifiedName: org.apache.phoenix.util.SequenceUtil(64) into ImportDeclaration(65) at 0", "Insert QualifiedName: com.google.common.math.LongMath(68) into ImportDeclaration(69) at 0", "Insert FieldDeclaration(151) into TypeDeclaration: class(2537) at 8", "Insert FieldDeclaration(165) into TypeDeclaration: class(2537) at 9", "Insert FieldDeclaration(179) into TypeDeclaration: class(2537) at 10", "Insert FieldDeclaration(193) into TypeDeclaration: class(2537) at 11", "Insert FieldDeclaration(280) into TypeDeclaration: class(2537) at 18", "Insert FieldDeclaration(291) into TypeDeclaration: class(2537) at 19", "Insert FieldDeclaration(302) into TypeDeclaration: class(2537) at 20", "Insert FieldDeclaration(312) into TypeDeclaration: class(2537) at 21", "Insert MethodDeclaration(666) into TypeDeclaration: class(2537) at 29", "Insert MethodDeclaration(1265) into TypeDeclaration: class(2537) at 40", "Insert MethodDeclaration(1282) into TypeDeclaration: class(2537) at 41", "Insert MethodDeclaration(1299) into TypeDeclaration: class(2537) at 42", "Insert MethodDeclaration(1316) into TypeDeclaration: class(2537) at 43", "Insert MethodDeclaration(1333) into TypeDeclaration: class(2537) at 44", "Insert MethodDeclaration(1350) into TypeDeclaration: class(2537) at 45", "Insert MethodDeclaration(1367) into TypeDeclaration: class(2537) at 46", "Insert MethodDeclaration(1384) into TypeDeclaration: class(2537) at 47", "Insert MethodDeclaration(1407) into TypeDeclaration: class(2537) at 48", "Move FieldDeclaration(1166) into TypeDeclaration: class(1881) at 8", "Move MethodDeclaration(1257) into TypeDeclaration: class(1881) at 11", "Insert Modifier: private(138) into FieldDeclaration(151) at 0", "Insert Modifier: static(139) into FieldDeclaration(151) at 1", "Insert Modifier: final(140) into FieldDeclaration(151) at 2", "Insert SimpleType: KeyValue(142) into FieldDeclaration(151) at 3", "Insert VariableDeclarationFragment(150) into FieldDeclaration(151) at 4", "Insert Modifier: private(152) into FieldDeclaration(165) at 0", "Insert Modifier: static(153) into FieldDeclaration(165) at 1", "Insert Modifier: final(154) into FieldDeclaration(165) at 2", "Insert SimpleType: KeyValue(156) into FieldDeclaration(165) at 3", "Insert VariableDeclarationFragment(164) into FieldDeclaration(165) at 4", "Insert Modifier: private(166) into FieldDeclaration(179) at 0", "Insert Modifier: static(167) into FieldDeclaration(179) at 1", "Insert Modifier: final(168) into FieldDeclaration(179) at 2", "Insert SimpleType: KeyValue(170) into FieldDeclaration(179) at 3", "Insert VariableDeclarationFragment(178) into FieldDeclaration(179) at 4", "Insert Modifier: private(180) into FieldDeclaration(193) at 0", "Insert Modifier: static(181) into FieldDeclaration(193) at 1", "Insert Modifier: final(182) into FieldDeclaration(193) at 2", "Insert SimpleType: KeyValue(184) into FieldDeclaration(193) at 3", "Insert VariableDeclarationFragment(192) into FieldDeclaration(193) at 4", "Insert VariableDeclarationFragment(268) into FieldDeclaration(269) at 4", "Insert Modifier: private(270) into FieldDeclaration(280) at 0", "Insert Modifier: static(271) into FieldDeclaration(280) at 1", "Insert Modifier: final(272) into FieldDeclaration(280) at 2", "Insert PrimitiveType: int(273) into FieldDeclaration(280) at 3", "Insert VariableDeclarationFragment(279) into FieldDeclaration(280) at 4", "Insert Modifier: private(281) into FieldDeclaration(291) at 0", "Insert Modifier: static(282) into FieldDeclaration(291) at 1", "Insert Modifier: final(283) into FieldDeclaration(291) at 2", "Insert PrimitiveType: int(284) into FieldDeclaration(291) at 3", "Insert VariableDeclarationFragment(290) into FieldDeclaration(291) at 4", "Insert Modifier: private(292) into FieldDeclaration(302) at 0", "Insert Modifier: static(293) into FieldDeclaration(302) at 1", "Insert Modifier: final(294) into FieldDeclaration(302) at 2", "Insert PrimitiveType: int(295) into FieldDeclaration(302) at 3", "Insert VariableDeclarationFragment(301) into FieldDeclaration(302) at 4", "Insert Modifier: private(303) into FieldDeclaration(312) at 0", "Insert Modifier: static(304) into FieldDeclaration(312) at 1", "Insert Modifier: final(305) into FieldDeclaration(312) at 2", "Insert PrimitiveType: int(306) into FieldDeclaration(312) at 3", "Move VariableDeclarationFragment(195) into FieldDeclaration(312) at 4", "Insert Modifier: private(539) into MethodDeclaration(666) at 0", "Insert PrimitiveType: long(540) into MethodDeclaration(666) at 1", "Insert SimpleName: increment(541) into MethodDeclaration(666) at 2", "Insert SingleVariableDeclaration(545) into MethodDeclaration(666) at 3", "Insert SingleVariableDeclaration(548) into MethodDeclaration(666) at 4", "Insert SimpleType: SQLException(550) into MethodDeclaration(666) at 5", "Insert Block(665) into MethodDeclaration(666) at 6", "Update SimpleType: EmptySequenceCacheException(439) to SQLException", "Insert Javadoc(1174) into MethodDeclaration(1241) at 0", "Update Modifier: public(926) to private", "Insert SimpleType: KeyValue(1178) into MethodDeclaration(1241) at 3", "Update SimpleName: getCurrentValueKV(930) to getKeyValue", "Insert SingleVariableDeclaration(1183) into MethodDeclaration(1241) at 5", "Insert SingleVariableDeclaration(1187) into MethodDeclaration(1241) at 6", "Insert SingleVariableDeclaration(1190) into MethodDeclaration(1241) at 7", "Update Modifier: public(952) to private", "Move Modifier: public(952) into MethodDeclaration(1265) at 0", "Move Modifier: static(953) into MethodDeclaration(1265) at 1", "Move SimpleType: KeyValue(1073) into MethodDeclaration(1265) at 2", "Update SimpleName: getIncrementByKV(956) to getKeyValue", "Move SimpleName: getIncrementByKV(956) into MethodDeclaration(1265) at 3", "Move SingleVariableDeclaration(1111) into MethodDeclaration(1265) at 4", "Move SingleVariableDeclaration(963) into MethodDeclaration(1265) at 5", "Insert Block(1264) into MethodDeclaration(1265) at 6", "Insert Modifier: public(1266) into MethodDeclaration(1282) at 0", "Insert Modifier: static(1267) into MethodDeclaration(1282) at 1", "Move SimpleType: KeyValue(1040) into MethodDeclaration(1282) at 2", "Insert SimpleName: getCurrentValueKV(1270) into MethodDeclaration(1282) at 3", "Move SingleVariableDeclaration(1078) into MethodDeclaration(1282) at 4", "Insert Block(1281) into MethodDeclaration(1282) at 5", "Insert Modifier: public(1283) into MethodDeclaration(1299) at 0", "Insert Modifier: static(1284) into MethodDeclaration(1299) at 1", "Move SimpleType: KeyValue(1007) into MethodDeclaration(1299) at 2", "Insert SimpleName: getIncrementByKV(1287) into MethodDeclaration(1299) at 3", "Move SingleVariableDeclaration(1045) into MethodDeclaration(1299) at 4", "Insert Block(1298) into MethodDeclaration(1299) at 5", "Move Modifier: public(978) into MethodDeclaration(1316) at 0", "Move Modifier: static(979) into MethodDeclaration(1316) at 1", "Move SimpleType: KeyValue(981) into MethodDeclaration(1316) at 2", "Move SimpleName: getCacheSizeKV(982) into MethodDeclaration(1316) at 3", "Move SingleVariableDeclaration(1012) into MethodDeclaration(1316) at 4", "Insert Block(1315) into MethodDeclaration(1316) at 5", "Insert Modifier: public(1317) into MethodDeclaration(1333) at 0", "Insert Modifier: static(1318) into MethodDeclaration(1333) at 1", "Move SimpleType: KeyValue(955) into MethodDeclaration(1333) at 2", "Insert SimpleName: getStartValueKV(1321) into MethodDeclaration(1333) at 3", "Insert SingleVariableDeclaration(1325) into MethodDeclaration(1333) at 4", "Insert Block(1332) into MethodDeclaration(1333) at 5", "Insert Modifier: public(1334) into MethodDeclaration(1350) at 0", "Insert Modifier: static(1335) into MethodDeclaration(1350) at 1", "Move SimpleType: KeyValue(929) into MethodDeclaration(1350) at 2", "Insert SimpleName: getMinValueKV(1338) into MethodDeclaration(1350) at 3", "Insert SingleVariableDeclaration(1342) into MethodDeclaration(1350) at 4", "Insert Block(1349) into MethodDeclaration(1350) at 5", "Insert Modifier: public(1351) into MethodDeclaration(1367) at 0", "Insert Modifier: static(1352) into MethodDeclaration(1367) at 1", "Insert SimpleType: KeyValue(1354) into MethodDeclaration(1367) at 2", "Insert SimpleName: getMaxValueKV(1355) into MethodDeclaration(1367) at 3", "Insert SingleVariableDeclaration(1359) into MethodDeclaration(1367) at 4", "Insert Block(1366) into MethodDeclaration(1367) at 5", "Insert Modifier: public(1368) into MethodDeclaration(1384) at 0", "Insert Modifier: static(1369) into MethodDeclaration(1384) at 1", "Insert SimpleType: KeyValue(1371) into MethodDeclaration(1384) at 2", "Insert SimpleName: getCycleKV(1372) into MethodDeclaration(1384) at 3", "Insert SingleVariableDeclaration(1376) into MethodDeclaration(1384) at 4", "Insert Block(1383) into MethodDeclaration(1384) at 5", "Insert Modifier: public(1385) into MethodDeclaration(1407) at 0", "Insert Modifier: static(1386) into MethodDeclaration(1407) at 1", "Insert PrimitiveType: void(1387) into MethodDeclaration(1407) at 2", "Insert SimpleName: replaceCurrentValueKV(1388) into MethodDeclaration(1407) at 3", "Insert SingleVariableDeclaration(1395) into MethodDeclaration(1407) at 4", "Move SingleVariableDeclaration(1115) into MethodDeclaration(1407) at 5", "Insert Block(1406) into MethodDeclaration(1407) at 6", "Insert PrimitiveType: void(1410) into MethodDeclaration(1430) at 2", "Update SimpleName: getCurrentValueKV(1008) to replaceMinValueKV", "Insert SingleVariableDeclaration(1418) into MethodDeclaration(1430) at 4", "Insert SingleVariableDeclaration(1422) into MethodDeclaration(1430) at 5", "Insert Block(1429) into MethodDeclaration(1430) at 6", "Insert PrimitiveType: void(1433) into MethodDeclaration(1453) at 2", "Update SimpleName: getIncrementByKV(1041) to replaceMaxValueKV", "Insert SingleVariableDeclaration(1441) into MethodDeclaration(1453) at 4", "Insert SingleVariableDeclaration(1445) into MethodDeclaration(1453) at 5", "Insert Block(1452) into MethodDeclaration(1453) at 6", "Insert PrimitiveType: void(1456) into MethodDeclaration(1476) at 2", "Update SimpleName: getCacheSizeKV(1074) to replaceCycleValueKV", "Insert SingleVariableDeclaration(1464) into MethodDeclaration(1476) at 4", "Insert SingleVariableDeclaration(1468) into MethodDeclaration(1476) at 5", "Insert Block(1475) into MethodDeclaration(1476) at 6", "Insert Javadoc(1480) into MethodDeclaration(1538) at 0", "Insert ParameterizedType: List<Cell>(1487) into MethodDeclaration(1538) at 3", "Insert SimpleName: getCells(1488) into MethodDeclaration(1538) at 4", "Insert SingleVariableDeclaration(1492) into MethodDeclaration(1538) at 5", "Insert FieldDeclaration(1574) into TypeDeclaration: class(1881) at 9", "Insert FieldDeclaration(1579) into TypeDeclaration: class(1881) at 10", "Insert FieldDeclaration(1584) into TypeDeclaration: class(1881) at 11", "Insert FieldDeclaration(1589) into TypeDeclaration: class(1881) at 12", "Insert FieldDeclaration(1594) into TypeDeclaration: class(1881) at 13", "Insert SingleVariableDeclaration(2013) into MethodDeclaration(2225) at 7", "Insert SingleVariableDeclaration(2016) into MethodDeclaration(2225) at 8", "Insert SingleVariableDeclaration(2019) into MethodDeclaration(2225) at 9", "Insert SingleVariableDeclaration(2235) into MethodDeclaration(2331) at 4", "Insert SingleVariableDeclaration(2238) into MethodDeclaration(2331) at 5", "Insert SingleVariableDeclaration(2241) into MethodDeclaration(2331) at 6", "Insert SimpleName: KeyValue(141) into SimpleType: KeyValue(142) at 0", "Insert SimpleName: START_WITH_KV(143) into VariableDeclarationFragment(150) at 0", "Insert MethodInvocation(149) into VariableDeclarationFragment(150) at 1", "Insert SimpleName: KeyValue(155) into SimpleType: KeyValue(156) at 0", "Insert SimpleName: MIN_VALUE_KV(157) into VariableDeclarationFragment(164) at 0", "Insert MethodInvocation(163) into VariableDeclarationFragment(164) at 1", "Insert SimpleName: KeyValue(169) into SimpleType: KeyValue(170) at 0", "Insert SimpleName: MAX_VALUE_KV(171) into VariableDeclarationFragment(178) at 0", "Insert MethodInvocation(177) into VariableDeclarationFragment(178) at 1", "Insert SimpleName: KeyValue(183) into SimpleType: KeyValue(184) at 0", "Insert SimpleName: CYCLE_KV(185) into VariableDeclarationFragment(192) at 0", "Insert MethodInvocation(191) into VariableDeclarationFragment(192) at 1", "Insert SimpleName: START_WITH_INDEX(263) into VariableDeclarationFragment(268) at 0", "Insert MethodInvocation(267) into VariableDeclarationFragment(268) at 1", "Insert SimpleName: MIN_VALUE_INDEX(274) into VariableDeclarationFragment(279) at 0", "Insert MethodInvocation(278) into VariableDeclarationFragment(279) at 1", "Insert SimpleName: MAX_VALUE_INDEX(285) into VariableDeclarationFragment(290) at 0", "Insert MethodInvocation(289) into VariableDeclarationFragment(290) at 1", "Insert SimpleName: CYCLE_INDEX(296) into VariableDeclarationFragment(301) at 0", "Insert MethodInvocation(300) into VariableDeclarationFragment(301) at 1", "Update SimpleName: SEQUENCE_KEY_VALUES(191) to NUM_SEQUENCE_KEY_VALUES", "Insert SimpleType: SequenceValue(543) into SingleVariableDeclaration(545) at 0", "Insert SimpleName: value(544) into SingleVariableDeclaration(545) at 1", "Insert PrimitiveType: int(546) into SingleVariableDeclaration(548) at 0", "Insert SimpleName: factor(547) into SingleVariableDeclaration(548) at 1", "Insert SimpleName: SQLException(549) into SimpleType: SQLException(550) at 0", "Insert VariableDeclarationStatement(557) into Block(665) at 0", "Insert IfStatement(594) into Block(665) at 1", "Move VariableDeclarationStatement(473) into Block(665) at 2", "Insert IfStatement(662) into Block(665) at 3", "Move ReturnStatement(481) into Block(665) at 4", "Update SimpleName: EmptySequenceCacheException(438) to SQLException", "Insert ReturnStatement(715) into Block(716) at 3", "Insert ReturnStatement(1083) into Block(1084) at 3", "Insert TagElement(1164) into Javadoc(1174) at 0", "Insert TagElement: @param(1168) into Javadoc(1174) at 1", "Insert TagElement: @param(1171) into Javadoc(1174) at 2", "Insert TagElement: @return(1173) into Javadoc(1174) at 3", "Insert SimpleName: KeyValue(1177) into SimpleType: KeyValue(1178) at 0", "Insert SimpleType: Result(1181) into SingleVariableDeclaration(1183) at 0", "Insert SimpleName: r(1182) into SingleVariableDeclaration(1183) at 1", "Insert SimpleType: KeyValue(1185) into SingleVariableDeclaration(1187) at 0", "Update SimpleName: kvs(936) to kv", "Move SimpleName: kvs(936) into SingleVariableDeclaration(1187) at 1", "Insert PrimitiveType: int(1188) into SingleVariableDeclaration(1190) at 0", "Insert SimpleName: cellIndex(1189) into SingleVariableDeclaration(1190) at 1", "Move VariableDeclarationStatement(1125) into Block(1240) at 0", "Insert VariableDeclarationStatement(1234) into Block(1240) at 1", "Insert SimpleType: KeyValue(1252) into SingleVariableDeclaration(1254) at 0", "Update SimpleName: kvs(962) to kv", "Insert ReturnStatement(1263) into Block(1264) at 0", "Insert ReturnStatement(1280) into Block(1281) at 0", "Move ReturnStatement(975) into Block(1298) at 0", "Insert ReturnStatement(1314) into Block(1315) at 0", "Insert SimpleType: Result(1323) into SingleVariableDeclaration(1325) at 0", "Insert SimpleName: r(1324) into SingleVariableDeclaration(1325) at 1", "Insert ReturnStatement(1331) into Block(1332) at 0", "Insert SimpleType: Result(1340) into SingleVariableDeclaration(1342) at 0", "Insert SimpleName: r(1341) into SingleVariableDeclaration(1342) at 1", "Insert ReturnStatement(1348) into Block(1349) at 0", "Move SimpleName: KeyValue(985) into SimpleType: KeyValue(1354) at 0", "Insert SimpleType: Result(1357) into SingleVariableDeclaration(1359) at 0", "Insert SimpleName: r(1358) into SingleVariableDeclaration(1359) at 1", "Insert ReturnStatement(1365) into Block(1366) at 0", "Insert SimpleName: KeyValue(1370) into SimpleType: KeyValue(1371) at 0", "Insert SimpleType: Result(1374) into SingleVariableDeclaration(1376) at 0", "Insert SimpleName: r(1375) into SingleVariableDeclaration(1376) at 1", "Insert ReturnStatement(1382) into Block(1383) at 0", "Move ParameterizedType: List<Cell>(1130) into SingleVariableDeclaration(1395) at 0", "Insert SimpleName: kvs(1394) into SingleVariableDeclaration(1395) at 1", "Insert ExpressionStatement(1405) into Block(1406) at 0", "Insert ParameterizedType: List<Cell>(1416) into SingleVariableDeclaration(1418) at 0", "Insert SimpleName: kvs(1417) into SingleVariableDeclaration(1418) at 1", "Insert SimpleType: KeyValue(1420) into SingleVariableDeclaration(1422) at 0", "Insert SimpleName: minValueKV(1421) into SingleVariableDeclaration(1422) at 1", "Insert ExpressionStatement(1428) into Block(1429) at 0", "Insert ParameterizedType: List<Cell>(1439) into SingleVariableDeclaration(1441) at 0", "Insert SimpleName: kvs(1440) into SingleVariableDeclaration(1441) at 1", "Insert SimpleType: KeyValue(1443) into SingleVariableDeclaration(1445) at 0", "Insert SimpleName: maxValueKV(1444) into SingleVariableDeclaration(1445) at 1", "Insert ExpressionStatement(1451) into Block(1452) at 0", "Insert ParameterizedType: List<Cell>(1462) into SingleVariableDeclaration(1464) at 0", "Insert SimpleName: kvs(1463) into SingleVariableDeclaration(1464) at 1", "Insert SimpleType: KeyValue(1466) into SingleVariableDeclaration(1468) at 0", "Insert SimpleName: cycleValueKV(1467) into SingleVariableDeclaration(1468) at 1", "Insert ExpressionStatement(1474) into Block(1475) at 0", "Insert TagElement(1479) into Javadoc(1480) at 0", "Insert SimpleType: List(1484) into ParameterizedType: List<Cell>(1487) at 0", "Insert SimpleType: Cell(1486) into ParameterizedType: List<Cell>(1487) at 1", "Insert SimpleType: Result(1490) into SingleVariableDeclaration(1492) at 0", "Insert SimpleName: r(1491) into SingleVariableDeclaration(1492) at 1", "Insert IfStatement(1507) into Block(1537) at 0", "Insert EnhancedForStatement(1534) into Block(1537) at 2", "Insert Modifier: public(1570) into FieldDeclaration(1574) at 0", "Insert PrimitiveType: long(1571) into FieldDeclaration(1574) at 1", "Insert VariableDeclarationFragment(1573) into FieldDeclaration(1574) at 2", "Insert Modifier: public(1575) into FieldDeclaration(1579) at 0", "Insert PrimitiveType: boolean(1576) into FieldDeclaration(1579) at 1", "Insert VariableDeclarationFragment(1578) into FieldDeclaration(1579) at 2", "Insert Modifier: public(1580) into FieldDeclaration(1584) at 0", "Insert PrimitiveType: long(1581) into FieldDeclaration(1584) at 1", "Insert VariableDeclarationFragment(1583) into FieldDeclaration(1584) at 2", "Insert Modifier: public(1585) into FieldDeclaration(1589) at 0", "Insert PrimitiveType: boolean(1586) into FieldDeclaration(1589) at 1", "Insert VariableDeclarationFragment(1588) into FieldDeclaration(1589) at 2", "Insert Modifier: public(1590) into FieldDeclaration(1594) at 0", "Insert PrimitiveType: boolean(1591) into FieldDeclaration(1594) at 1", "Insert VariableDeclarationFragment(1593) into FieldDeclaration(1594) at 2", "Move SingleVariableDeclaration(1187) into MethodDeclaration(1631) at 2", "Insert SingleVariableDeclaration(1602) into MethodDeclaration(1631) at 3", "Insert SingleVariableDeclaration(1605) into MethodDeclaration(1631) at 4", "Insert SingleVariableDeclaration(1608) into MethodDeclaration(1631) at 5", "Insert SimpleName: SequenceValue(1633) into MethodDeclaration(1665) at 1", "Move SingleVariableDeclaration(1197) into MethodDeclaration(1665) at 2", "Move SingleVariableDeclaration(1200) into MethodDeclaration(1665) at 3", "Insert Block(1664) into MethodDeclaration(1665) at 4", "Insert PrimitiveType: long(2011) into SingleVariableDeclaration(2013) at 0", "Insert SimpleName: minValue(2012) into SingleVariableDeclaration(2013) at 1", "Insert PrimitiveType: long(2014) into SingleVariableDeclaration(2016) at 0", "Insert SimpleName: maxValue(2015) into SingleVariableDeclaration(2016) at 1", "Insert PrimitiveType: boolean(2017) into SingleVariableDeclaration(2019) at 0", "Insert SimpleName: cycle(2018) into SingleVariableDeclaration(2019) at 1", "Insert PrimitiveType: long(2233) into SingleVariableDeclaration(2235) at 0", "Insert SimpleName: minValue(2234) into SingleVariableDeclaration(2235) at 1", "Insert PrimitiveType: long(2236) into SingleVariableDeclaration(2238) at 0", "Insert SimpleName: maxValue(2237) into SingleVariableDeclaration(2238) at 1", "Insert PrimitiveType: boolean(2239) into SingleVariableDeclaration(2241) at 0", "Insert SimpleName: cycle(2240) into SingleVariableDeclaration(2241) at 1", "Insert SimpleName: KeyValue(144) into MethodInvocation(149) at 0", "Insert SimpleName: createFirstOnRow(145) into MethodInvocation(149) at 1", "Insert QualifiedName: ByteUtil.EMPTY_BYTE_ARRAY(146) into MethodInvocation(149) at 2", "Insert SimpleName: SEQUENCE_FAMILY_BYTES(147) into MethodInvocation(149) at 3", "Insert SimpleName: START_WITH_BYTES(148) into MethodInvocation(149) at 4", "Insert SimpleName: KeyValue(158) into MethodInvocation(163) at 0", "Insert SimpleName: createFirstOnRow(159) into MethodInvocation(163) at 1", "Insert QualifiedName: ByteUtil.EMPTY_BYTE_ARRAY(160) into MethodInvocation(163) at 2", "Insert SimpleName: SEQUENCE_FAMILY_BYTES(161) into MethodInvocation(163) at 3", "Insert SimpleName: MIN_VALUE_BYTES(162) into MethodInvocation(163) at 4", "Insert SimpleName: KeyValue(172) into MethodInvocation(177) at 0", "Insert SimpleName: createFirstOnRow(173) into MethodInvocation(177) at 1", "Insert QualifiedName: ByteUtil.EMPTY_BYTE_ARRAY(174) into MethodInvocation(177) at 2", "Insert SimpleName: SEQUENCE_FAMILY_BYTES(175) into MethodInvocation(177) at 3", "Insert SimpleName: MAX_VALUE_BYTES(176) into MethodInvocation(177) at 4", "Insert SimpleName: KeyValue(186) into MethodInvocation(191) at 0", "Insert SimpleName: createFirstOnRow(187) into MethodInvocation(191) at 1", "Insert QualifiedName: ByteUtil.EMPTY_BYTE_ARRAY(188) into MethodInvocation(191) at 2", "Insert SimpleName: SEQUENCE_FAMILY_BYTES(189) into MethodInvocation(191) at 3", "Insert SimpleName: CYCLE_FLAG_BYTES(190) into MethodInvocation(191) at 4", "Insert SimpleName: START_WITH_KV(210) into MethodInvocation(214) at 6", "Insert SimpleName: MIN_VALUE_KV(211) into MethodInvocation(214) at 7", "Insert SimpleName: MAX_VALUE_KV(212) into MethodInvocation(214) at 8", "Insert SimpleName: CYCLE_KV(213) into MethodInvocation(214) at 9", "Insert SimpleName: SEQUENCE_KV_COLUMNS(264) into MethodInvocation(267) at 0", "Insert SimpleName: indexOf(265) into MethodInvocation(267) at 1", "Insert SimpleName: START_WITH_KV(266) into MethodInvocation(267) at 2", "Insert SimpleName: SEQUENCE_KV_COLUMNS(275) into MethodInvocation(278) at 0", "Insert SimpleName: indexOf(276) into MethodInvocation(278) at 1", "Insert SimpleName: MIN_VALUE_KV(277) into MethodInvocation(278) at 2", "Insert SimpleName: SEQUENCE_KV_COLUMNS(286) into MethodInvocation(289) at 0", "Insert SimpleName: indexOf(287) into MethodInvocation(289) at 1", "Insert SimpleName: MAX_VALUE_KV(288) into MethodInvocation(289) at 2", "Insert SimpleName: SEQUENCE_KV_COLUMNS(297) into MethodInvocation(300) at 0", "Insert SimpleName: indexOf(298) into MethodInvocation(300) at 1", "Insert SimpleName: CYCLE_KV(299) into MethodInvocation(300) at 2", "Insert SimpleName: SequenceValue(542) into SimpleType: SequenceValue(543) at 0", "Insert PrimitiveType: boolean(551) into VariableDeclarationStatement(557) at 0", "Insert VariableDeclarationFragment(556) into VariableDeclarationStatement(557) at 1", "Insert QualifiedName: value.limitReached(558) into IfStatement(594) at 0", "Insert Block(593) into IfStatement(594) at 1", "Insert InfixExpression: !=(602) into IfStatement(662) at 0", "Insert Block(661) into IfStatement(662) at 1", "Insert MethodInvocation(714) into ReturnStatement(715) at 0", "Insert MethodInvocation(1082) into ReturnStatement(1083) at 0", "Insert TextElement: Returns a KeyValue from the input result row(1163) into TagElement(1164) at 0", "Insert SimpleName: kv(1165) into TagElement: @param(1168) at 0", "Insert TextElement:  an empty KeyValue used only to get the column family and column qualifier of the(1166) into TagElement: @param(1168) at 1", "Insert TextElement: key value to be returned (if the sequence row is from a previous version)(1167) into TagElement: @param(1168) at 2", "Insert SimpleName: cellIndex(1169) into TagElement: @param(1171) at 0", "Insert TextElement:  index of the KeyValue to be returned (if the sequence row is from a previous version(1170) into TagElement: @param(1171) at 1", "Insert TextElement:  KeyValue(1172) into TagElement: @return(1173) at 0", "Update SimpleName: List(931) to Result", "Move SimpleName: List(931) into SimpleType: Result(1181) at 0", "Move SimpleName: KeyValue(933) into SimpleType: KeyValue(1185) at 0", "Move SimpleType: Cell(1597) into VariableDeclarationStatement(1234) at 0", "Insert VariableDeclarationFragment(1233) into VariableDeclarationStatement(1234) at 1", "Move SimpleName: KeyValue(959) into SimpleType: KeyValue(1252) at 0", "Insert MethodInvocation(1262) into ReturnStatement(1263) at 0", "Insert MethodInvocation(1279) into ReturnStatement(1280) at 0", "Insert MethodInvocation(1313) into ReturnStatement(1314) at 0", "Update SimpleName: List(983) to Result", "Move SimpleName: List(983) into SimpleType: Result(1323) at 0", "Insert MethodInvocation(1330) into ReturnStatement(1331) at 0", "Insert SimpleName: Result(1339) into SimpleType: Result(1340) at 0", "Insert MethodInvocation(1347) into ReturnStatement(1348) at 0", "Insert SimpleName: Result(1356) into SimpleType: Result(1357) at 0", "Insert MethodInvocation(1364) into ReturnStatement(1365) at 0", "Insert SimpleName: Result(1373) into SimpleType: Result(1374) at 0", "Insert MethodInvocation(1381) into ReturnStatement(1382) at 0", "Insert MethodInvocation(1404) into ExpressionStatement(1405) at 0", "Insert SimpleType: List(1413) into ParameterizedType: List<Cell>(1416) at 0", "Insert SimpleType: Cell(1415) into ParameterizedType: List<Cell>(1416) at 1", "Insert SimpleName: KeyValue(1419) into SimpleType: KeyValue(1420) at 0", "Insert MethodInvocation(1427) into ExpressionStatement(1428) at 0", "Insert SimpleType: List(1436) into ParameterizedType: List<Cell>(1439) at 0", "Insert SimpleType: Cell(1438) into ParameterizedType: List<Cell>(1439) at 1", "Insert SimpleName: KeyValue(1442) into SimpleType: KeyValue(1443) at 0", "Insert MethodInvocation(1450) into ExpressionStatement(1451) at 0", "Insert SimpleType: List(1459) into ParameterizedType: List<Cell>(1462) at 0", "Insert SimpleType: Cell(1461) into ParameterizedType: List<Cell>(1462) at 1", "Insert SimpleName: KeyValue(1465) into SimpleType: KeyValue(1466) at 0", "Insert MethodInvocation(1473) into ExpressionStatement(1474) at 0", "Insert TextElement: Returns a Cell[] for the result row. Handles empty MIN_VALUE, MAX_VALUE and CYCLE(1477) into TagElement(1479) at 0", "Insert TextElement: KeyValues if the sequence row is from a previous version (1478) into TagElement(1479) at 1", "Insert SimpleName: List(1483) into SimpleType: List(1484) at 0", "Insert SimpleName: Cell(1485) into SimpleType: Cell(1486) at 0", "Move SimpleName: Result(1105) into SimpleType: Result(1490) at 0", "Insert InfixExpression: ==(1499) into IfStatement(1507) at 0", "Insert ReturnStatement(1506) into IfStatement(1507) at 1", "Insert ParameterizedType: List<Cell>(1512) into VariableDeclarationStatement(1519) at 0", "Insert SingleVariableDeclaration(1523) into EnhancedForStatement(1534) at 0", "Insert SimpleName: SEQUENCE_KV_COLUMNS(1524) into EnhancedForStatement(1534) at 1", "Insert Block(1533) into EnhancedForStatement(1534) at 2", "Insert SimpleName: cellList(1535) into ReturnStatement(1536) at 0", "Update SimpleName: cacheSize(1164) to startValue", "Update SimpleName: nextValue(1180) to minValue", "Insert SimpleName: maxValue(1572) into VariableDeclarationFragment(1573) at 0", "Insert SimpleName: cycle(1577) into VariableDeclarationFragment(1578) at 0", "Insert SimpleName: unusedValues(1582) into VariableDeclarationFragment(1583) at 0", "Insert SimpleName: isDeleted(1587) into VariableDeclarationFragment(1588) at 0", "Insert SimpleName: limitReached(1592) into VariableDeclarationFragment(1593) at 0", "Insert PrimitiveType: long(1600) into SingleVariableDeclaration(1602) at 0", "Insert SimpleName: minValue(1601) into SingleVariableDeclaration(1602) at 1", "Insert PrimitiveType: long(1603) into SingleVariableDeclaration(1605) at 0", "Insert SimpleName: maxValue(1604) into SingleVariableDeclaration(1605) at 1", "Insert PrimitiveType: boolean(1606) into SingleVariableDeclaration(1608) at 0", "Insert SimpleName: cycle(1607) into SingleVariableDeclaration(1608) at 1", "Move ConstructorInvocation(1190) into Block(1630) at 0", "Insert ExpressionStatement(1623) into Block(1630) at 2", "Move ExpressionStatement(1206) into Block(1664) at 0", "Insert ExpressionStatement(1651) into Block(1664) at 1", "Insert ExpressionStatement(1657) into Block(1664) at 2", "Insert ExpressionStatement(1663) into Block(1664) at 3", "Insert VariableDeclarationStatement(1725) into Block(1879) at 3", "Insert VariableDeclarationStatement(1733) into Block(1879) at 4", "Insert VariableDeclarationStatement(1741) into Block(1879) at 5", "Insert ExpressionStatement(1844) into Block(1879) at 11", "Insert ExpressionStatement(1864) into Block(1879) at 12", "Insert ExpressionStatement(1870) into Block(1879) at 13", "Insert ExpressionStatement(1878) into Block(1879) at 14", "Insert QualifiedName: value.isDeleted(532) into ConditionalExpression(535) at 0", "Insert SimpleName: increasingSeq(552) into VariableDeclarationFragment(556) at 0", "Insert InfixExpression: >(555) into VariableDeclarationFragment(556) at 1", "Insert IfStatement(592) into Block(593) at 0", "Insert SimpleName: factor(600) into InfixExpression: !=(602) at 0", "Insert NumberLiteral: 0(601) into InfixExpression: !=(602) at 1", "Insert ExpressionStatement(605) into Block(661) at 0", "Insert VariableDeclarationStatement(610) into Block(661) at 1", "Insert TryStatement(639) into Block(661) at 2", "Insert IfStatement(660) into Block(661) at 3", "Update QualifiedName: value.nextValue(456) to value.unusedValues", "Insert NumberLiteral: 0(698) into InfixExpression: ==(699) at 1", "Insert SimpleName: increment(711) into MethodInvocation(714) at 0", "Insert SimpleName: value(712) into MethodInvocation(714) at 1", "Insert SimpleName: factor(713) into MethodInvocation(714) at 2", "Update QualifiedName: value.nextValue(566) to value.unusedValues", "Insert NumberLiteral: 0(800) into InfixExpression: ==(801) at 1", "Insert SimpleName: increment(1079) into MethodInvocation(1082) at 0", "Insert SimpleName: value(1080) into MethodInvocation(1082) at 1", "Insert SimpleName: factor(1081) into MethodInvocation(1082) at 2", "Update SimpleName: kvs(1120) to cells", "Insert SimpleName: cell(1203) into VariableDeclarationFragment(1233) at 0", "Insert ConditionalExpression(1232) into VariableDeclarationFragment(1233) at 1", "Insert QualifiedName: org.apache.hadoop.hbase.KeyValueUtil(1235) into MethodInvocation(1238) at 0", "Update SimpleName: kvs(945) to ensureKeyValue", "Update SimpleName: get(946) to cell", "Insert SimpleName: getKeyValue(1255) into MethodInvocation(1262) at 0", "Insert SimpleName: r(1256) into MethodInvocation(1262) at 1", "Update SimpleName: kvs(964) to kv", "Move SimpleName: kvs(964) into MethodInvocation(1262) at 2", "Insert MethodInvocation(1261) into MethodInvocation(1262) at 3", "Insert SimpleName: getKeyValue(1275) into MethodInvocation(1279) at 0", "Insert SimpleName: r(1276) into MethodInvocation(1279) at 1", "Insert SimpleName: CURRENT_VALUE_KV(1277) into MethodInvocation(1279) at 2", "Insert SimpleName: CURRENT_VALUE_INDEX(1278) into MethodInvocation(1279) at 3", "Update SimpleName: kvs(971) to getKeyValue", "Update SimpleName: get(972) to r", "Insert SimpleName: INCREMENT_BY_KV(1294) into MethodInvocation(1296) at 2", "Insert SimpleName: getKeyValue(1309) into MethodInvocation(1313) at 0", "Insert SimpleName: r(1310) into MethodInvocation(1313) at 1", "Insert SimpleName: CACHE_SIZE_KV(1311) into MethodInvocation(1313) at 2", "Insert SimpleName: CACHE_SIZE_INDEX(1312) into MethodInvocation(1313) at 3", "Insert SimpleName: getKeyValue(1326) into MethodInvocation(1330) at 0", "Insert SimpleName: r(1327) into MethodInvocation(1330) at 1", "Insert SimpleName: START_WITH_KV(1328) into MethodInvocation(1330) at 2", "Insert SimpleName: START_WITH_INDEX(1329) into MethodInvocation(1330) at 3", "Insert SimpleName: getKeyValue(1343) into MethodInvocation(1347) at 0", "Insert SimpleName: r(1344) into MethodInvocation(1347) at 1", "Insert SimpleName: MIN_VALUE_KV(1345) into MethodInvocation(1347) at 2", "Insert SimpleName: MIN_VALUE_INDEX(1346) into MethodInvocation(1347) at 3", "Update SimpleName: kvs(990) to getKeyValue", "Move SimpleName: kvs(990) into MethodInvocation(1364) at 0", "Update SimpleName: size(991) to r", "Move SimpleName: size(991) into MethodInvocation(1364) at 1", "Insert SimpleName: MAX_VALUE_KV(1362) into MethodInvocation(1364) at 2", "Insert SimpleName: MAX_VALUE_INDEX(1363) into MethodInvocation(1364) at 3", "Insert SimpleName: getKeyValue(1377) into MethodInvocation(1381) at 0", "Insert SimpleName: r(1378) into MethodInvocation(1381) at 1", "Insert SimpleName: CYCLE_KV(1379) into MethodInvocation(1381) at 2", "Insert SimpleName: CYCLE_INDEX(1380) into MethodInvocation(1381) at 3", "Move SimpleName: kvs(997) into MethodInvocation(1404) at 0", "Update SimpleName: get(998) to set", "Move SimpleName: get(998) into MethodInvocation(1404) at 1", "Update SimpleName: CACHE_SIZE_INDEX(999) to CURRENT_VALUE_INDEX", "Move SimpleName: CACHE_SIZE_INDEX(999) into MethodInvocation(1404) at 2", "Insert SimpleName: currentValueKV(1403) into MethodInvocation(1404) at 3", "Insert SimpleName: List(1412) into SimpleType: List(1413) at 0", "Move SimpleName: Cell(1013) into SimpleType: Cell(1415) at 0", "Insert SimpleName: kvs(1423) into MethodInvocation(1427) at 0", "Insert SimpleName: set(1424) into MethodInvocation(1427) at 1", "Insert SimpleName: MIN_VALUE_INDEX(1425) into MethodInvocation(1427) at 2", "Insert SimpleName: minValueKV(1426) into MethodInvocation(1427) at 3", "Insert SimpleName: List(1435) into SimpleType: List(1436) at 0", "Move SimpleName: Cell(1046) into SimpleType: Cell(1438) at 0", "Insert SimpleName: kvs(1446) into MethodInvocation(1450) at 0", "Insert SimpleName: set(1447) into MethodInvocation(1450) at 1", "Insert SimpleName: MAX_VALUE_INDEX(1448) into MethodInvocation(1450) at 2", "Insert SimpleName: maxValueKV(1449) into MethodInvocation(1450) at 3", "Insert SimpleName: List(1458) into SimpleType: List(1459) at 0", "Move SimpleName: Cell(1079) into SimpleType: Cell(1461) at 0", "Insert SimpleName: kvs(1469) into MethodInvocation(1473) at 0", "Insert SimpleName: set(1470) into MethodInvocation(1473) at 1", "Insert SimpleName: CYCLE_INDEX(1471) into MethodInvocation(1473) at 2", "Insert SimpleName: cycleValueKV(1472) into MethodInvocation(1473) at 3", "Insert FieldAccess(1497) into InfixExpression: ==(1499) at 0", "Insert SimpleName: NUM_SEQUENCE_KEY_VALUES(1498) into InfixExpression: ==(1499) at 1", "Insert MethodInvocation(1505) into ReturnStatement(1506) at 0", "Insert SimpleType: List(1509) into ParameterizedType: List<Cell>(1512) at 0", "Insert SimpleType: Cell(1511) into ParameterizedType: List<Cell>(1512) at 1", "Update SimpleName: newkvs(1131) to cellList", "Insert SimpleType: KeyValue(1521) into SingleVariableDeclaration(1523) at 0", "Insert SimpleName: kv(1522) into SingleVariableDeclaration(1523) at 1", "Move ExpressionStatement(1143) into Block(1533) at 0", "Insert Assignment: =(1622) into ExpressionStatement(1623) at 0", "Insert Assignment: =(1650) into ExpressionStatement(1651) at 0", "Insert Assignment: =(1656) into ExpressionStatement(1657) at 0", "Insert Assignment: =(1662) into ExpressionStatement(1663) at 0", "Update InfixExpression: >(1232) to !=", "Insert SimpleType: KeyValue(1719) into VariableDeclarationStatement(1725) at 0", "Insert VariableDeclarationFragment(1724) into VariableDeclarationStatement(1725) at 1", "Insert SimpleType: KeyValue(1727) into VariableDeclarationStatement(1733) at 0", "Insert VariableDeclarationFragment(1732) into VariableDeclarationStatement(1733) at 1", "Insert SimpleType: KeyValue(1735) into VariableDeclarationStatement(1741) at 0", "Insert VariableDeclarationFragment(1740) into VariableDeclarationStatement(1741) at 1", "Insert Assignment: =(1843) into ExpressionStatement(1844) at 0", "Insert Assignment: =(1863) into ExpressionStatement(1864) at 0", "Insert Assignment: =(1869) into ExpressionStatement(1870) at 0", "Insert Assignment: =(1877) into ExpressionStatement(1878) at 0", "Move CastExpression(1606) into MethodInvocation(2219) at 8", "Insert QualifiedName: value.incrementBy(553) into InfixExpression: >(555) at 0", "Insert NumberLiteral: 0(554) into InfixExpression: >(555) at 1", "Insert QualifiedName: value.cycle(559) into IfStatement(592) at 0", "Insert Block(566) into IfStatement(592) at 1", "Insert Block(591) into IfStatement(592) at 2", "Insert PrefixExpression: --(604) into ExpressionStatement(605) at 0", "Insert PrimitiveType: boolean(606) into VariableDeclarationStatement(610) at 0", "Insert VariableDeclarationFragment(609) into VariableDeclarationStatement(610) at 1", "Insert Block(628) into TryStatement(639) at 0", "Insert CatchClause(638) into TryStatement(639) at 1", "Insert InfixExpression: ||(654) into IfStatement(660) at 0", "Insert Block(659) into IfStatement(660) at 1", "Update QualifiedName: value.nextValue(646) to value.startValue", "Insert CastExpression(932) into MethodInvocation(933) at 4", "Insert InfixExpression: !=(1206) into ConditionalExpression(1232) at 0", "Insert MethodInvocation(1227) into ConditionalExpression(1232) at 1", "Insert ParenthesizedExpression(1231) into ConditionalExpression(1232) at 2", "Update SimpleName: size(965) to SEQUENCE_KV_COLUMNS", "Move SimpleName: size(965) into MethodInvocation(1261) at 0", "Insert SimpleName: indexOf(1259) into MethodInvocation(1261) at 1", "Insert SimpleName: kv(1260) into MethodInvocation(1261) at 2", "Move MethodInvocation(1053) into FieldAccess(1497) at 0", "Insert SimpleName: length(1496) into FieldAccess(1497) at 1", "Insert SimpleName: Lists(1500) into MethodInvocation(1505) at 0", "Insert SimpleName: newArrayList(1501) into MethodInvocation(1505) at 1", "Move MethodInvocation(1086) into MethodInvocation(1505) at 2", "Insert SimpleName: List(1508) into SimpleType: List(1509) at 0", "Insert SimpleName: Cell(1510) into SimpleType: Cell(1511) at 0", "Update SimpleName: newArrayList(1133) to newArrayListWithCapacity", "Update SimpleName: kvs(1134) to NUM_SEQUENCE_KEY_VALUES", "Insert SimpleName: KeyValue(1520) into SimpleType: KeyValue(1521) at 0", "Insert FieldAccess(1614) into Assignment: =(1616) at 0", "Insert SimpleName: minValue(1615) into Assignment: =(1616) at 1", "Insert FieldAccess(1620) into Assignment: =(1622) at 0", "Insert SimpleName: maxValue(1621) into Assignment: =(1622) at 1", "Insert SimpleName: cycle(1627) into Assignment: =(1628) at 1", "Insert FieldAccess(1648) into Assignment: =(1650) at 0", "Insert SimpleName: isDeleted(1649) into Assignment: =(1650) at 1", "Move FieldAccess(1252) into Assignment: =(1656) at 0", "Insert NumberLiteral: 0(1655) into Assignment: =(1656) at 1", "Insert FieldAccess(1660) into Assignment: =(1662) at 0", "Insert BooleanLiteral: false(1661) into Assignment: =(1662) at 1", "Insert SimpleName: KeyValue(1718) into SimpleType: KeyValue(1719) at 0", "Insert SimpleName: minValueKV(1720) into VariableDeclarationFragment(1724) at 0", "Insert MethodInvocation(1723) into VariableDeclarationFragment(1724) at 1", "Insert SimpleName: KeyValue(1726) into SimpleType: KeyValue(1727) at 0", "Insert SimpleName: maxValueKV(1728) into VariableDeclarationFragment(1732) at 0", "Insert MethodInvocation(1731) into VariableDeclarationFragment(1732) at 1", "Insert SimpleName: KeyValue(1734) into SimpleType: KeyValue(1735) at 0", "Insert SimpleName: cycleKV(1736) into VariableDeclarationFragment(1740) at 0", "Insert MethodInvocation(1739) into VariableDeclarationFragment(1740) at 1", "Insert FieldAccess(1744) into Assignment: =(1748) at 0", "Insert FieldAccess(1752) into Assignment: =(1767) at 0", "Move FieldAccess(1209) into Assignment: =(1786) at 0", "Insert FieldAccess(1790) into Assignment: =(1805) at 0", "Insert FieldAccess(1809) into Assignment: =(1824) at 0", "Insert MethodInvocation(1823) into Assignment: =(1824) at 1", "Insert FieldAccess(1828) into Assignment: =(1843) at 0", "Insert MethodInvocation(1842) into Assignment: =(1843) at 1", "Insert FieldAccess(1847) into Assignment: =(1863) at 0", "Insert CastExpression(1862) into Assignment: =(1863) at 1", "Insert FieldAccess(1867) into Assignment: =(1869) at 0", "Insert BooleanLiteral: false(1868) into Assignment: =(1869) at 1", "Insert FieldAccess(1873) into Assignment: =(1877) at 0", "Insert FieldAccess(1876) into Assignment: =(1877) at 1", "Insert CastExpression(2137) into MethodInvocation(2219) at 4", "Insert CastExpression(2204) into MethodInvocation(2219) at 9", "Insert CastExpression(2218) into MethodInvocation(2219) at 10", "Move SimpleType: SequenceValue(1704) into VariableDeclarationStatement(2293) at 0", "Insert ExpressionStatement(563) into Block(566) at 0", "Insert ThrowStatement(565) into Block(566) at 1", "Insert VariableDeclarationStatement(575) into Block(591) at 0", "Insert ThrowStatement(590) into Block(591) at 1", "Insert QualifiedName: value.unusedValues(603) into PrefixExpression: --(604) at 0", "Insert SimpleName: overflowOrUnderflow(607) into VariableDeclarationFragment(609) at 0", "Insert BooleanLiteral: false(608) into VariableDeclarationFragment(609) at 1", "Insert VariableDeclarationStatement(619) into Block(628) at 0", "Insert ExpressionStatement(627) into Block(628) at 1", "Insert SingleVariableDeclaration(632) into CatchClause(638) at 0", "Insert Block(637) into CatchClause(638) at 1", "Insert SimpleName: overflowOrUnderflow(640) into InfixExpression: ||(654) at 0", "Insert ParenthesizedExpression(646) into InfixExpression: ||(654) at 1", "Insert ParenthesizedExpression(653) into InfixExpression: ||(654) at 2", "Insert ExpressionStatement(658) into Block(659) at 0", "Update InfixExpression: !=(524) to >", "Insert SimpleType: Cell(909) into CastExpression(918) at 0", "Move SimpleType: Cell(675) into CastExpression(932) at 0", "Insert MethodInvocation(931) into CastExpression(932) at 1", "Insert QualifiedName: cells.length(1204) into InfixExpression: !=(1206) at 0", "Insert SimpleName: NUM_SEQUENCE_KEY_VALUES(1205) into InfixExpression: !=(1206) at 1", "Insert SimpleName: r(1207) into MethodInvocation(1227) at 0", "Insert SimpleName: getColumnLatestCell(1208) into MethodInvocation(1227) at 1", "Insert MethodInvocation(1211) into MethodInvocation(1227) at 2", "Insert MethodInvocation(1214) into MethodInvocation(1227) at 3", "Insert MethodInvocation(1217) into MethodInvocation(1227) at 4", "Insert MethodInvocation(1220) into MethodInvocation(1227) at 5", "Insert MethodInvocation(1223) into MethodInvocation(1227) at 6", "Insert MethodInvocation(1226) into MethodInvocation(1227) at 7", "Insert ArrayAccess(1230) into ParenthesizedExpression(1231) at 0", "Update SimpleName: newkvs(1138) to cellList", "Update SimpleName: set(1139) to add", "Insert MethodInvocation(1530) into MethodInvocation(1531) at 2", "Insert ThisExpression(1612) into FieldAccess(1614) at 0", "Insert SimpleName: minValue(1613) into FieldAccess(1614) at 1", "Insert ThisExpression(1618) into FieldAccess(1620) at 0", "Insert SimpleName: maxValue(1619) into FieldAccess(1620) at 1", "Update SimpleName: cacheSize(1218) to cycle", "Insert ThisExpression(1646) into FieldAccess(1648) at 0", "Insert SimpleName: isDeleted(1647) into FieldAccess(1648) at 1", "Insert ThisExpression(1658) into FieldAccess(1660) at 0", "Insert SimpleName: limitReached(1659) into FieldAccess(1660) at 1", "Insert SimpleName: getMinValueKV(1721) into MethodInvocation(1723) at 0", "Insert SimpleName: r(1722) into MethodInvocation(1723) at 1", "Insert SimpleName: getMaxValueKV(1729) into MethodInvocation(1731) at 0", "Insert SimpleName: r(1730) into MethodInvocation(1731) at 1", "Insert SimpleName: getCycleKV(1737) into MethodInvocation(1739) at 0", "Insert SimpleName: r(1738) into MethodInvocation(1739) at 1", "Insert ThisExpression(1742) into FieldAccess(1744) at 0", "Insert SimpleName: timestamp(1743) into FieldAccess(1744) at 1", "Insert ThisExpression(1750) into FieldAccess(1752) at 0", "Insert SimpleName: currentValue(1751) into FieldAccess(1752) at 1", "Insert ThisExpression(1788) into FieldAccess(1790) at 0", "Insert SimpleName: unusedValues(1789) into FieldAccess(1790) at 1", "Insert ThisExpression(1807) into FieldAccess(1809) at 0", "Insert SimpleName: minValue(1808) into FieldAccess(1809) at 1", "Insert MethodInvocation(1812) into MethodInvocation(1823) at 0", "Insert SimpleName: decodeLong(1813) into MethodInvocation(1823) at 1", "Insert MethodInvocation(1816) into MethodInvocation(1823) at 2", "Insert MethodInvocation(1819) into MethodInvocation(1823) at 3", "Insert MethodInvocation(1822) into MethodInvocation(1823) at 4", "Insert ThisExpression(1826) into FieldAccess(1828) at 0", "Insert SimpleName: maxValue(1827) into FieldAccess(1828) at 1", "Insert MethodInvocation(1831) into MethodInvocation(1842) at 0", "Insert SimpleName: decodeLong(1832) into MethodInvocation(1842) at 1", "Insert MethodInvocation(1835) into MethodInvocation(1842) at 2", "Insert MethodInvocation(1838) into MethodInvocation(1842) at 3", "Insert MethodInvocation(1841) into MethodInvocation(1842) at 4", "Insert ThisExpression(1845) into FieldAccess(1847) at 0", "Insert SimpleName: cycle(1846) into FieldAccess(1847) at 1", "Insert SimpleType: Boolean(1849) into CastExpression(1862) at 0", "Insert MethodInvocation(1861) into CastExpression(1862) at 1", "Insert ThisExpression(1865) into FieldAccess(1867) at 0", "Insert SimpleName: limitReached(1866) into FieldAccess(1867) at 1", "Insert ThisExpression(1871) into FieldAccess(1873) at 0", "Insert SimpleName: startValue(1872) into FieldAccess(1873) at 1", "Insert ThisExpression(1874) into FieldAccess(1876) at 0", "Insert SimpleName: currentValue(1875) into FieldAccess(1876) at 1", "Insert SimpleType: Cell(2128) into CastExpression(2137) at 0", "Insert MethodInvocation(2136) into CastExpression(2137) at 1", "Insert SimpleType: Cell(2178) into CastExpression(2190) at 0", "Insert SimpleType: Cell(2192) into CastExpression(2204) at 0", "Insert MethodInvocation(2203) into CastExpression(2204) at 1", "Insert SimpleType: Cell(2206) into CastExpression(2218) at 0", "Insert MethodInvocation(2217) into CastExpression(2218) at 1", "Insert FieldAccess(443) into IfStatement(454) at 0", "Insert Assignment: =(562) into ExpressionStatement(563) at 0", "Insert SimpleName: EMPTY_SEQUENCE_CACHE_EXCEPTION(564) into ThrowStatement(565) at 0", "Insert SimpleType: SQLExceptionCode(568) into VariableDeclarationStatement(575) at 0", "Insert VariableDeclarationFragment(574) into VariableDeclarationStatement(575) at 1", "Insert MethodInvocation(589) into ThrowStatement(590) at 0", "Insert PrimitiveType: long(611) into VariableDeclarationStatement(619) at 0", "Insert VariableDeclarationFragment(618) into VariableDeclarationStatement(619) at 1", "Insert Assignment: =(626) into ExpressionStatement(627) at 0", "Insert SimpleType: ArithmeticException(630) into SingleVariableDeclaration(632) at 0", "Insert SimpleName: e(631) into SingleVariableDeclaration(632) at 1", "Insert ExpressionStatement(636) into Block(637) at 0", "Insert InfixExpression: &&(645) into ParenthesizedExpression(646) at 0", "Insert InfixExpression: &&(652) into ParenthesizedExpression(653) at 0", "Insert Assignment: =(657) into ExpressionStatement(658) at 0", "Update QualifiedName: value.nextValue(523) to value.unusedValues", "Insert NumberLiteral: 0(757) into InfixExpression: >(758) at 1", "Insert SimpleName: Cell(908) into SimpleType: Cell(909) at 0", "Insert QualifiedName: ByteUtil.EMPTY_BYTE_ARRAY(916) into MethodInvocation(917) at 6", "Insert SimpleName: KeyValueUtil(921) into MethodInvocation(931) at 0", "Insert SimpleName: newKeyValue(922) into MethodInvocation(931) at 1", "Insert SimpleName: key(923) into MethodInvocation(931) at 2", "Insert QualifiedName: PhoenixDatabaseMetaData.SEQUENCE_FAMILY_BYTES(924) into MethodInvocation(931) at 3", "Insert QualifiedName: PhoenixDatabaseMetaData.START_WITH_BYTES(925) into MethodInvocation(931) at 4", "Insert QualifiedName: value.timestamp(926) into MethodInvocation(931) at 5", "Move MethodInvocation(685) into MethodInvocation(931) at 6", "Update SimpleName: kvs(938) to kv", "Move SimpleName: kvs(938) into MethodInvocation(1211) at 0", "Update SimpleName: size(939) to getFamilyArray", "Move SimpleName: size(939) into MethodInvocation(1211) at 1", "Insert SimpleName: kv(1212) into MethodInvocation(1214) at 0", "Insert SimpleName: getFamilyOffset(1213) into MethodInvocation(1214) at 1", "Insert SimpleName: kv(1215) into MethodInvocation(1217) at 0", "Insert SimpleName: getFamilyLength(1216) into MethodInvocation(1217) at 1", "Insert SimpleName: kv(1218) into MethodInvocation(1220) at 0", "Insert SimpleName: getQualifierArray(1219) into MethodInvocation(1220) at 1", "Insert SimpleName: kv(1221) into MethodInvocation(1223) at 0", "Insert SimpleName: getQualifierOffset(1222) into MethodInvocation(1223) at 1", "Insert SimpleName: kv(1224) into MethodInvocation(1226) at 0", "Insert SimpleName: getQualifierLength(1225) into MethodInvocation(1226) at 1", "Insert SimpleName: cells(1228) into ArrayAccess(1230) at 0", "Insert SimpleName: cellIndex(1229) into ArrayAccess(1230) at 1", "Update SimpleName: CURRENT_VALUE_INDEX(1140) to getKeyValue", "Move SimpleName: CURRENT_VALUE_INDEX(1140) into MethodInvocation(1530) at 0", "Update SimpleName: currentValueKV(1141) to r", "Move SimpleName: currentValueKV(1141) into MethodInvocation(1530) at 1", "Insert SimpleName: kv(1529) into MethodInvocation(1530) at 2", "Insert QualifiedName: PDataType.LONG(1810) into MethodInvocation(1812) at 0", "Insert SimpleName: getCodec(1811) into MethodInvocation(1812) at 1", "Insert SimpleName: minValueKV(1814) into MethodInvocation(1816) at 0", "Insert SimpleName: getValueArray(1815) into MethodInvocation(1816) at 1", "Insert SimpleName: minValueKV(1817) into MethodInvocation(1819) at 0", "Insert SimpleName: getValueOffset(1818) into MethodInvocation(1819) at 1", "Insert SimpleName: SortOrder(1820) into MethodInvocation(1822) at 0", "Insert SimpleName: getDefault(1821) into MethodInvocation(1822) at 1", "Insert QualifiedName: PDataType.LONG(1829) into MethodInvocation(1831) at 0", "Insert SimpleName: getCodec(1830) into MethodInvocation(1831) at 1", "Insert SimpleName: maxValueKV(1833) into MethodInvocation(1835) at 0", "Insert SimpleName: getValueArray(1834) into MethodInvocation(1835) at 1", "Insert SimpleName: maxValueKV(1836) into MethodInvocation(1838) at 0", "Insert SimpleName: getValueOffset(1837) into MethodInvocation(1838) at 1", "Insert SimpleName: SortOrder(1839) into MethodInvocation(1841) at 0", "Insert SimpleName: getDefault(1840) into MethodInvocation(1841) at 1", "Insert SimpleName: Boolean(1848) into SimpleType: Boolean(1849) at 0", "Insert QualifiedName: PDataType.BOOLEAN(1850) into MethodInvocation(1861) at 0", "Insert SimpleName: toObject(1851) into MethodInvocation(1861) at 1", "Insert MethodInvocation(1854) into MethodInvocation(1861) at 2", "Insert MethodInvocation(1857) into MethodInvocation(1861) at 3", "Insert MethodInvocation(1860) into MethodInvocation(1861) at 4", "Insert SimpleName: Cell(2127) into SimpleType: Cell(2128) at 0", "Insert SimpleName: KeyValueUtil(2129) into MethodInvocation(2136) at 0", "Insert SimpleName: newKeyValue(2130) into MethodInvocation(2136) at 1", "Insert SimpleName: key(2131) into MethodInvocation(2136) at 2", "Insert QualifiedName: PhoenixDatabaseMetaData.SEQUENCE_FAMILY_BYTES(2132) into MethodInvocation(2136) at 3", "Insert QualifiedName: PhoenixDatabaseMetaData.CURRENT_VALUE_BYTES(2133) into MethodInvocation(2136) at 4", "Insert SimpleName: timestamp(2134) into MethodInvocation(2136) at 5", "Insert QualifiedName: ByteUtil.EMPTY_BYTE_ARRAY(2135) into MethodInvocation(2136) at 6", "Insert SimpleName: Cell(2177) into SimpleType: Cell(2178) at 0", "Update QualifiedName: PhoenixDatabaseMetaData.CURRENT_VALUE_BYTES(1602) to PhoenixDatabaseMetaData.MIN_VALUE_BYTES", "Insert MethodInvocation(2188) into MethodInvocation(2189) at 6", "Insert SimpleName: Cell(2191) into SimpleType: Cell(2192) at 0", "Insert SimpleName: KeyValueUtil(2193) into MethodInvocation(2203) at 0", "Insert SimpleName: newKeyValue(2194) into MethodInvocation(2203) at 1", "Insert SimpleName: key(2195) into MethodInvocation(2203) at 2", "Insert QualifiedName: PhoenixDatabaseMetaData.SEQUENCE_FAMILY_BYTES(2196) into MethodInvocation(2203) at 3", "Insert QualifiedName: PhoenixDatabaseMetaData.MAX_VALUE_BYTES(2197) into MethodInvocation(2203) at 4", "Insert SimpleName: timestamp(2198) into MethodInvocation(2203) at 5", "Insert MethodInvocation(2202) into MethodInvocation(2203) at 6", "Insert SimpleName: Cell(2205) into SimpleType: Cell(2206) at 0", "Insert SimpleName: KeyValueUtil(2207) into MethodInvocation(2217) at 0", "Insert SimpleName: newKeyValue(2208) into MethodInvocation(2217) at 1", "Insert SimpleName: key(2209) into MethodInvocation(2217) at 2", "Insert QualifiedName: PhoenixDatabaseMetaData.SEQUENCE_FAMILY_BYTES(2210) into MethodInvocation(2217) at 3", "Insert QualifiedName: PhoenixDatabaseMetaData.CYCLE_FLAG_BYTES(2211) into MethodInvocation(2217) at 4", "Insert SimpleName: timestamp(2212) into MethodInvocation(2217) at 5", "Insert MethodInvocation(2216) into MethodInvocation(2217) at 6", "Move SimpleType: SequenceValue(1701) into ClassInstanceCreation(2291) at 0", "Insert SimpleName: minValue(2288) into ClassInstanceCreation(2291) at 2", "Insert SimpleName: maxValue(2289) into ClassInstanceCreation(2291) at 3", "Insert SimpleName: cycle(2290) into ClassInstanceCreation(2291) at 4", "Move MethodInvocation(325) into FieldAccess(443) at 0", "Insert SimpleName: isDeleted(442) into FieldAccess(443) at 1", "Insert QualifiedName: value.limitReached(560) into Assignment: =(562) at 0", "Insert BooleanLiteral: false(561) into Assignment: =(562) at 1", "Insert SimpleName: SQLExceptionCode(567) into SimpleType: SQLExceptionCode(568) at 0", "Insert SimpleName: code(569) into VariableDeclarationFragment(574) at 0", "Insert ConditionalExpression(573) into VariableDeclarationFragment(574) at 1", "Insert SimpleName: SequenceUtil(576) into MethodInvocation(589) at 0", "Insert SimpleName: getException(577) into MethodInvocation(589) at 1", "Insert MethodInvocation(582) into MethodInvocation(589) at 2", "Insert MethodInvocation(587) into MethodInvocation(589) at 3", "Insert SimpleName: code(588) into MethodInvocation(589) at 4", "Insert SimpleName: incrementValue(612) into VariableDeclarationFragment(618) at 0", "Insert MethodInvocation(617) into VariableDeclarationFragment(618) at 1", "Insert QualifiedName: value.currentValue(620) into Assignment: =(626) at 0", "Insert MethodInvocation(625) into Assignment: =(626) at 1", "Insert SimpleName: ArithmeticException(629) into SimpleType: ArithmeticException(630) at 0", "Insert Assignment: =(635) into ExpressionStatement(636) at 0", "Insert SimpleName: increasingSeq(641) into InfixExpression: &&(645) at 0", "Insert InfixExpression: >(644) into InfixExpression: &&(645) at 1", "Insert PrefixExpression: !(648) into InfixExpression: &&(652) at 0", "Insert InfixExpression: <(651) into InfixExpression: &&(652) at 1", "Insert QualifiedName: value.limitReached(655) into Assignment: =(657) at 0", "Insert BooleanLiteral: true(656) into Assignment: =(657) at 1", "Insert SimpleName: cycleKV(1852) into MethodInvocation(1854) at 0", "Insert SimpleName: getValueArray(1853) into MethodInvocation(1854) at 1", "Insert SimpleName: cycleKV(1855) into MethodInvocation(1857) at 0", "Insert SimpleName: getValueOffset(1856) into MethodInvocation(1857) at 1", "Insert SimpleName: cycleKV(1858) into MethodInvocation(1860) at 0", "Insert SimpleName: getValueLength(1859) into MethodInvocation(1860) at 1", "Insert QualifiedName: PDataType.LONG(2185) into MethodInvocation(2188) at 0", "Update SimpleName: startWithBuf(1604) to toBytes", "Move SimpleName: startWithBuf(1604) into MethodInvocation(2188) at 1", "Insert SimpleName: minValue(2187) into MethodInvocation(2188) at 2", "Insert QualifiedName: PDataType.LONG(2199) into MethodInvocation(2202) at 0", "Insert SimpleName: toBytes(2200) into MethodInvocation(2202) at 1", "Insert SimpleName: maxValue(2201) into MethodInvocation(2202) at 2", "Insert QualifiedName: PDataType.BOOLEAN(2213) into MethodInvocation(2216) at 0", "Insert SimpleName: toBytes(2214) into MethodInvocation(2216) at 1", "Insert SimpleName: cycle(2215) into MethodInvocation(2216) at 2", "Insert SimpleName: increasingSeq(570) into ConditionalExpression(573) at 0", "Insert QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MAX_VALUE(571) into ConditionalExpression(573) at 1", "Insert QualifiedName: SQLExceptionCode.SEQUENCE_VAL_REACHED_MIN_VALUE(572) into ConditionalExpression(573) at 2", "Insert FieldAccess(580) into MethodInvocation(582) at 0", "Insert SimpleName: getSchemaName(581) into MethodInvocation(582) at 1", "Insert FieldAccess(585) into MethodInvocation(587) at 0", "Insert SimpleName: getSequenceName(586) into MethodInvocation(587) at 1", "Insert SimpleName: LongMath(613) into MethodInvocation(617) at 0", "Insert SimpleName: checkedMultiply(614) into MethodInvocation(617) at 1", "Insert QualifiedName: value.incrementBy(615) into MethodInvocation(617) at 2", "Insert SimpleName: factor(616) into MethodInvocation(617) at 3", "Insert SimpleName: LongMath(621) into MethodInvocation(625) at 0", "Insert SimpleName: checkedAdd(622) into MethodInvocation(625) at 1", "Insert QualifiedName: value.currentValue(623) into MethodInvocation(625) at 2", "Insert SimpleName: incrementValue(624) into MethodInvocation(625) at 3", "Insert SimpleName: overflowOrUnderflow(633) into Assignment: =(635) at 0", "Insert BooleanLiteral: true(634) into Assignment: =(635) at 1", "Insert QualifiedName: value.currentValue(642) into InfixExpression: >(644) at 0", "Insert QualifiedName: value.maxValue(643) into InfixExpression: >(644) at 1", "Insert SimpleName: increasingSeq(647) into PrefixExpression: !(648) at 0", "Insert QualifiedName: value.currentValue(649) into InfixExpression: <(651) at 0", "Insert QualifiedName: value.minValue(650) into InfixExpression: <(651) at 1", "Insert ThisExpression(578) into FieldAccess(580) at 0", "Insert SimpleName: key(579) into FieldAccess(580) at 1", "Insert ThisExpression(583) into FieldAccess(585) at 0", "Insert SimpleName: key(584) into FieldAccess(585) at 1", "Delete SimpleName: isDeleted(326)", "Delete MethodInvocation(327)", "Delete SimpleName: value(416)", "Delete SimpleName: isDeleted(417)", "Delete MethodInvocation(418)", "Delete QualifiedName: value.currentValue(455)", "Delete QualifiedName: value.currentValue(474)", "Delete SimpleName: factor(475)", "Delete QualifiedName: value.incrementBy(476)", "Delete InfixExpression: *(477)", "Delete Assignment: +=(478)", "Delete ExpressionStatement(479)", "Delete QualifiedName: value.currentValue(522)", "Delete QualifiedName: value.currentValue(565)", "Delete PrimitiveType: long(834)", "Delete SimpleName: currentValue(835)", "Delete QualifiedName: value.currentValue(836)", "Delete VariableDeclarationFragment(837)", "Delete VariableDeclarationStatement(838)", "Delete QualifiedName: value.currentValue(839)", "Delete SimpleName: factor(840)", "Delete QualifiedName: value.incrementBy(841)", "Delete InfixExpression: *(842)", "Delete Assignment: +=(843)", "Delete ExpressionStatement(844)", "Delete SimpleName: currentValue(845)", "Delete ReturnStatement(846)", "Delete SimpleType: List(932)", "Delete SimpleType: KeyValue(934)", "Delete ParameterizedType: List<KeyValue>(935)", "Delete SingleVariableDeclaration(937)", "Delete MethodInvocation(940)", "Delete SimpleName: SEQUENCE_KEY_VALUES(941)", "Delete InfixExpression: ==(942)", "Delete ParenthesizedExpression(943)", "Delete AssertStatement(944)", "Delete SimpleName: CURRENT_VALUE_INDEX(947)", "Delete SimpleName: List(957)", "Delete SimpleType: List(958)", "Delete SimpleType: KeyValue(960)", "Delete ParameterizedType: List<KeyValue>(961)", "Delete MethodInvocation(966)", "Delete SimpleName: SEQUENCE_KEY_VALUES(967)", "Delete InfixExpression: ==(968)", "Delete ParenthesizedExpression(969)", "Delete AssertStatement(970)", "Delete Block(976)", "Delete MethodDeclaration(977)", "Delete SimpleType: List(984)", "Delete SimpleType: KeyValue(986)", "Delete ParameterizedType: List<KeyValue>(987)", "Delete SimpleName: kvs(988)", "Delete SingleVariableDeclaration(989)", "Delete MethodInvocation(992)", "Delete SimpleName: SEQUENCE_KEY_VALUES(993)", "Delete InfixExpression: ==(994)", "Delete ParenthesizedExpression(995)", "Delete AssertStatement(996)", "Delete MethodInvocation(1000)", "Delete ReturnStatement(1001)", "Delete Block(1002)", "Delete MethodDeclaration(1003)", "Delete SimpleType: Cell(1014)", "Delete Dimension(1015)", "Delete ArrayType: Cell[](1016)", "Delete SimpleName: kvs(1017)", "Delete SimpleName: r(1018)", "Delete SimpleName: rawCells(1019)", "Delete MethodInvocation(1020)", "Delete VariableDeclarationFragment(1021)", "Delete VariableDeclarationStatement(1022)", "Delete QualifiedName: kvs.length(1023)", "Delete SimpleName: SEQUENCE_KEY_VALUES(1024)", "Delete InfixExpression: ==(1025)", "Delete ParenthesizedExpression(1026)", "Delete AssertStatement(1027)", "Delete QualifiedName: org.apache.hadoop.hbase.KeyValueUtil(1028)", "Delete SimpleName: ensureKeyValue(1029)", "Delete SimpleName: kvs(1030)", "Delete SimpleName: CURRENT_VALUE_INDEX(1031)", "Delete ArrayAccess(1032)", "Delete MethodInvocation(1033)", "Delete ReturnStatement(1034)", "Delete Block(1035)", "Delete SimpleType: Cell(1047)", "Delete Dimension(1048)", "Delete ArrayType: Cell[](1049)", "Delete SimpleName: kvs(1050)", "Delete VariableDeclarationFragment(1054)", "Delete VariableDeclarationStatement(1055)", "Delete QualifiedName: kvs.length(1056)", "Delete SimpleName: SEQUENCE_KEY_VALUES(1057)", "Delete InfixExpression: ==(1058)", "Delete ParenthesizedExpression(1059)", "Delete AssertStatement(1060)", "Delete QualifiedName: org.apache.hadoop.hbase.KeyValueUtil(1061)", "Delete SimpleName: ensureKeyValue(1062)", "Delete SimpleName: kvs(1063)", "Delete SimpleName: INCREMENT_BY_INDEX(1064)", "Delete ArrayAccess(1065)", "Delete MethodInvocation(1066)", "Delete ReturnStatement(1067)", "Delete Block(1068)", "Delete SimpleType: Cell(1080)", "Delete Dimension(1081)", "Delete ArrayType: Cell[](1082)", "Delete SimpleName: kvs(1083)", "Delete VariableDeclarationFragment(1087)", "Delete VariableDeclarationStatement(1088)", "Delete QualifiedName: kvs.length(1089)", "Delete SimpleName: SEQUENCE_KEY_VALUES(1090)", "Delete InfixExpression: ==(1091)", "Delete ParenthesizedExpression(1092)", "Delete AssertStatement(1093)", "Delete QualifiedName: org.apache.hadoop.hbase.KeyValueUtil(1094)", "Delete SimpleName: ensureKeyValue(1095)", "Delete SimpleName: kvs(1096)", "Delete SimpleName: CACHE_SIZE_INDEX(1097)", "Delete ArrayAccess(1098)", "Delete MethodInvocation(1099)", "Delete ReturnStatement(1100)", "Delete Block(1101)", "Delete SimpleType: Result(1106)", "Delete SimpleName: replaceCurrentValueKV(1107)", "Delete SimpleName: Result(1144)", "Delete SimpleName: create(1145)", "Delete SimpleName: newkvs(1146)", "Delete MethodInvocation(1147)", "Delete Modifier: final(1162)", "Delete Modifier: public(1183)", "Delete SimpleName: SequenceValue(1184)", "Delete Block(1191)", "Delete MethodDeclaration(1192)", "Delete SimpleName: isDeleted(1210)", "Delete NumberLiteral: 1(1211)", "Delete PrefixExpression: -(1212)", "Delete NumberLiteral: 0(1213)", "Delete ConditionalExpression(1214)", "Delete NumberLiteral: 0(1220)", "Delete PrimitiveType: boolean(1248)", "Delete SimpleName: isDeleted(1249)", "Delete NumberLiteral: 0(1253)", "Delete InfixExpression: <(1254)", "Delete ReturnStatement(1255)", "Delete Block(1256)", "Delete SimpleName: timestamp(1288)", "Delete SimpleName: nextValue(1294)", "Delete SimpleName: incrementBy(1311)", "Delete SimpleName: cacheSize(1328)", "Delete SimpleName: currentValue(1345)", "Delete SimpleName: nextValue(1346)", "Delete SimpleName: incrementBy(1347)", "Delete SimpleName: cacheSize(1348)", "Delete InfixExpression: *(1349)", "Delete InfixExpression: -(1350)", "Delete QualifiedName: value.nextValue(1435)", "Delete QualifiedName: value.currentValue(1436)", "Delete Assignment: =(1437)", "Delete ExpressionStatement(1438)"]}}], "commit_stats": [{"total_files": 25, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}