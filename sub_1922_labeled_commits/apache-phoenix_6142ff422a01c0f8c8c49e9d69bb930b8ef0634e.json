{"application": "apache-phoenix", "csha": "6142ff422a01c0f8c8c49e9d69bb930b8ef0634e", "files": [{"PhoenixIndexFailurePolicy_cluster": {"actions": [{"root": "UPDATE from PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES to PhoenixDatabaseMetaData.SYSTEM_CATALOG_BYTES", "operations": ["UPD QualifiedName: PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES from PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES to PhoenixDatabaseMetaData.SYSTEM_CATALOG_BYTES"]}]}}, {"PhoenixIndexFailurePolicy_diff": {"operations": ["Update QualifiedName: PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES(186) to PhoenixDatabaseMetaData.SYSTEM_CATALOG_BYTES"]}}, {"PhoenixDatabaseMetaData_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 35", "operations": ["INS ImportDeclaration to CompilationUnit at 35", "INS QualifiedName: org.apache.phoenix.schema.PTable.LinkType to ImportDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 111", "operations": ["INS Modifier: final to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 111", "INS Modifier: static to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: public to FieldDeclaration at 0", "INS SimpleName: SUPERTABLE_NAME to VariableDeclarationFragment at 0", "INS StringLiteral: \"SUPERTABLE_NAME\" to VariableDeclarationFragment at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 132", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleName: StringEscapeUtils to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: pattern to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS Modifier: private to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 132", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: escapePattern to MethodDeclaration at 3", "INS SimpleName: escapeSql to MethodInvocation at 1", "INS SimpleName: pattern to MethodInvocation at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 133", "operations": ["INS SimpleName: GLOBAL_TENANANTS_ONLY to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 133", "INS StringLiteral: \"null\" to VariableDeclarationFragment at 1", "INS Modifier: static to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: final to FieldDeclaration at 2", "INS Modifier: public to FieldDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 135", "operations": ["INS StringLiteral: \" and \" to ConditionalExpression at 2", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS ExpressionStatement to Block at 0", "INS Modifier: private to MethodDeclaration at 0", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: buf to MethodInvocation at 0", "INS SimpleName: buf to SingleVariableDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleType: StringBuilder to SingleVariableDeclaration at 0", "INS SimpleName: appendConjunction to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 135", "INS Block to MethodDeclaration at 5", "INS SimpleName: buf to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS InfixExpression: == to ConditionalExpression at 0", "INS SimpleName: append to MethodInvocation at 1", "INS StringLiteral: \" where \" to ConditionalExpression at 1", "INS SimpleName: length to MethodInvocation at 1", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS ConditionalExpression to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: String to FieldDeclaration at 3"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: String to FieldDeclaration at 3"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV ArrayType: byte[] to FieldDeclaration at 3"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV ArrayType: byte[] to FieldDeclaration at 3"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: String to FieldDeclaration at 3"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV ArrayType: byte[] to FieldDeclaration at 3"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: String to FieldDeclaration at 3"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: String to FieldDeclaration at 3"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: String to FieldDeclaration at 3"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS VariableDeclarationStatement to Block at 3", "INS SimpleName: buf to VariableDeclarationFragment at 0", "INS StringLiteral: \" from \" to InfixExpression: + at 7", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: stmt to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: COLUMN_NAME to InfixExpression: + at 12", "INS QualifiedName: Hint.NO_INTRA_REGION_PARALLELIZATION to InfixExpression: + at 1", "INS SimpleName: buf to MethodInvocation at 1", "INS StringLiteral: \" DISTINCT \" to InfixExpression: + at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: connection to MethodInvocation at 0", "INS SimpleName: TABLE_CAT to InfixExpression: + at 6", "INS StringLiteral: \"select /*+\" to InfixExpression: + at 0", "INS StringLiteral: \" \" to InfixExpression: + at 5", "INS StringLiteral: \" and \" to InfixExpression: + at 17", "INS SimpleName: append to MethodInvocation at 1", "INS StringLiteral: \" is null\" to InfixExpression: + at 13", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS SimpleName: TENANT_ID to InfixExpression: + at 18", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS NullLiteral to MethodInvocation at 2", "INS SimpleName: Statement to SimpleType: Statement at 0", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS SimpleName: addTenantIdFilter to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS StringLiteral: \" is null\" to InfixExpression: + at 16", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: buf to MethodInvocation at 0", "INS ReturnStatement to Block at 4", "INS SimpleName: TENANT_ID to InfixExpression: + at 1", "INS SimpleType: StringBuilder to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: buf to MethodInvocation at 0", "INS SimpleName: COLUMN_FAMILY to InfixExpression: + at 15", "INS MethodInvocation to ReturnStatement at 0", "INS StringLiteral: \" order by \" to InfixExpression: + at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: stmt to MethodInvocation at 0", "INS StringLiteral: \" where \" to InfixExpression: + at 11", "INS SimpleName: toString to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: SYSTEM_CATALOG to InfixExpression: + at 8", "INS StringLiteral: \" is not null\" to InfixExpression: + at 19", "INS StringLiteral: \" \" to InfixExpression: + at 9", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: TENANT_ID to InfixExpression: + at 4", "INS SimpleType: Statement to VariableDeclarationStatement at 0", "INS StringLiteral: \"*/\\n\" to InfixExpression: + at 2", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS SimpleName: SYSTEM_CATALOG_ALIAS to InfixExpression: + at 10", "INS SimpleType: StringBuilder to ClassInstanceCreation at 0", "INS StringLiteral: \" and \" to InfixExpression: + at 14"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 2"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: String to FieldDeclaration at 3"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 1", "operations": ["INS PrimitiveType: void to MethodDeclaration at 1"]}, {"root": "UPDATE from getTenantIdWhereClause to addTenantIdFilter", "operations": ["UPD SimpleName: getTenantIdWhereClause from getTenantIdWhereClause to addTenantIdFilter", "UPD SimpleName: buf from buf to addTenantIdFilter"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SimpleType: StringBuilder to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: buf to SingleVariableDeclaration at 1", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleType: String to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: tenantIdPattern to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SimpleType: SQLException to MethodDeclaration at 8", "MOV SimpleType: ResultSet to MethodDeclaration at 2", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from private to public", "operations": ["UPD Modifier: private from private to public"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SimpleType: ResultSet to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 7"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: SQLException to MethodDeclaration at 7"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 8"]}, {"root": "INS TagElement: @link to TagElement at 18", "operations": ["INS SimpleType: String to MethodRefParameter at 0", "INS MethodRef to TagElement: @link at 0", "INS TagElement: @link to TagElement at 18", "INS SimpleName: getSuperTables to MethodRef at 0", "INS SimpleType: String to MethodRefParameter at 0", "INS MethodRefParameter to MethodRef at 2", "INS SimpleName: String to SimpleType: String at 0", "INS MethodRefParameter to MethodRef at 1", "INS SimpleName: String to SimpleType: String at 0", "INS MethodRefParameter to MethodRef at 3"]}, {"root": "INS TagElement: @link to TagElement at 19", "operations": ["INS MethodRef to TagElement: @link at 0", "INS SimpleName: getCatalogs to MethodRef at 0", "INS TagElement: @link to TagElement at 19"]}, {"root": "UPDATE from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "operations": ["UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA"]}, {"root": "UPDATE from TYPE_TABLE to SYSTEM_CATALOG_TABLE", "operations": ["UPD SimpleName: TYPE_TABLE from TYPE_TABLE to SYSTEM_CATALOG_TABLE", "UPD SimpleName: TYPE_TABLE from TYPE_TABLE to SYSTEM_CATALOG_TABLE", "UPD SimpleName: TYPE_TABLE from TYPE_TABLE to SYSTEM_CATALOG_TABLE"]}, {"root": "UPDATE from TYPE_SCHEMA_AND_TABLE to SYSTEM_CATALOG", "operations": ["UPD SimpleName: TYPE_SCHEMA_AND_TABLE from TYPE_SCHEMA_AND_TABLE to SYSTEM_CATALOG", "UPD SimpleName: TYPE_SCHEMA_AND_TABLE_ALIAS from TYPE_SCHEMA_AND_TABLE_ALIAS to SYSTEM_CATALOG", "UPD SimpleName: TYPE_SCHEMA_AND_TABLE from TYPE_SCHEMA_AND_TABLE to SYSTEM_CATALOG", "UPD SimpleName: TYPE_SCHEMA_AND_TABLE from TYPE_SCHEMA_AND_TABLE to SYSTEM_CATALOG", "UPD SimpleName: TYPE_SCHEMA_AND_TABLE from TYPE_SCHEMA_AND_TABLE to SYSTEM_CATALOG", "UPD SimpleName: TYPE_SCHEMA_AND_TABLE from TYPE_SCHEMA_AND_TABLE to SYSTEM_CATALOG", "UPD SimpleName: TYPE_SCHEMA_AND_TABLE from TYPE_SCHEMA_AND_TABLE to SYSTEM_CATALOG", "UPD SimpleName: TYPE_SCHEMA_AND_TABLE from TYPE_SCHEMA_AND_TABLE to SYSTEM_CATALOG"]}, {"root": "UPDATE from TYPE_TABLE_BYTES to SYSTEM_CATALOG_SCHEMA_BYTES", "operations": ["UPD SimpleName: TYPE_TABLE_BYTES from TYPE_TABLE_BYTES to SYSTEM_CATALOG_SCHEMA_BYTES", "UPD SimpleName: TYPE_TABLE_BYTES from TYPE_TABLE_BYTES to SYSTEM_CATALOG_SCHEMA_BYTES"]}, {"root": "UPDATE from TYPE_SCHEMA_BYTES to SYSTEM_CATALOG_TABLE_BYTES", "operations": ["UPD SimpleName: TYPE_SCHEMA_BYTES from TYPE_SCHEMA_BYTES to SYSTEM_CATALOG_TABLE_BYTES", "UPD SimpleName: TYPE_SCHEMA_BYTES from TYPE_SCHEMA_BYTES to SYSTEM_CATALOG_TABLE_BYTES"]}, {"root": "UPDATE from TYPE_TABLE_NAME to SYSTEM_CATALOG_NAME", "operations": ["UPD SimpleName: TYPE_TABLE_NAME from TYPE_TABLE_NAME to SYSTEM_CATALOG_NAME"]}, {"root": "UPDATE from TYPE_TABLE_NAME_BYTES to SYSTEM_CATALOG_BYTES", "operations": ["UPD SimpleName: TYPE_TABLE_NAME_BYTES from TYPE_TABLE_NAME_BYTES to SYSTEM_CATALOG_BYTES"]}, {"root": "INS SimpleName: SYSTEM_CATALOG_ALIAS to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: SYSTEM_CATALOG_ALIAS to VariableDeclarationFragment at 0"]}, {"root": "INS StringLiteral: \"\\\"SYSTEM.TABLE\\\"\" to VariableDeclarationFragment at 1", "operations": ["INS StringLiteral: \"\\\"SYSTEM.TABLE\\\"\" to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from TABLE_NAME_NAME to TABLE_NAME", "operations": ["UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_TYPE_NAME from TABLE_TYPE_NAME to TABLE_NAME", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME"]}, {"root": "UPDATE from TABLE_TYPE_NAME to TABLE_TYPE", "operations": ["UPD SimpleName: TABLE_TYPE_NAME from TABLE_TYPE_NAME to TABLE_TYPE", "UPD SimpleName: TABLE_TYPE_NAME from TABLE_TYPE_NAME to TABLE_TYPE", "UPD SimpleName: TABLE_TYPE_NAME from TABLE_TYPE_NAME to TABLE_TYPE", "UPD SimpleName: TABLE_TYPE_NAME from TABLE_TYPE_NAME to TABLE_TYPE", "UPD SimpleName: TABLE_TYPE_NAME from TABLE_TYPE_NAME to TABLE_TYPE", "UPD SimpleName: TABLE_TYPE_NAME from TABLE_TYPE_NAME to TABLE_TYPE"]}, {"root": "UPDATE from TABLE_CAT_NAME to COLUMN_FAMILY", "operations": ["UPD SimpleName: TABLE_CAT_NAME from TABLE_CAT_NAME to COLUMN_FAMILY", "UPD SimpleName: TYPE_SCHEMA_AND_TABLE from TYPE_SCHEMA_AND_TABLE to COLUMN_FAMILY", "UPD SimpleName: REMARKS_NAME from REMARKS_NAME to COLUMN_FAMILY", "UPD SimpleName: TABLE_CAT_NAME from TABLE_CAT_NAME to COLUMN_FAMILY", "UPD SimpleName: TABLE_CAT_NAME from TABLE_CAT_NAME to COLUMN_FAMILY", "UPD SimpleName: TABLE_CAT_NAME from TABLE_CAT_NAME to COLUMN_FAMILY", "UPD SimpleName: TABLE_CAT_NAME from TABLE_CAT_NAME to COLUMN_FAMILY"]}, {"root": "UPDATE from \"TABLE_CAT\" to \"COLUMN_FAMILY\"", "operations": ["UPD StringLiteral: \"TABLE_CAT\" from \"TABLE_CAT\" to \"COLUMN_FAMILY\""]}, {"root": "UPDATE from TABLE_CAT_NAME to TABLE_CAT", "operations": ["UPD SimpleName: TABLE_CAT_NAME from TABLE_CAT_NAME to TABLE_CAT", "UPD SimpleName: TABLE_CAT_NAME from TABLE_CAT_NAME to TABLE_CAT", "UPD SimpleName: TABLE_CAT_NAME from TABLE_CAT_NAME to TABLE_CAT", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_CAT", "UPD SimpleName: TABLE_CATALOG_NAME from TABLE_CATALOG_NAME to TABLE_CAT", "UPD SimpleName: TABLE_CAT_NAME from TABLE_CAT_NAME to TABLE_CAT"]}, {"root": "UPDATE from \"TABLE_CATALOG\" to \"TABLE_CAT\"", "operations": ["UPD StringLiteral: \"TABLE_CATALOG\" from \"TABLE_CATALOG\" to \"TABLE_CAT\""]}, {"root": "UPDATE from TABLE_SCHEM_NAME to TABLE_CATALOG", "operations": ["UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_CATALOG", "UPD SimpleName: TABLE_CATALOG_NAME from TABLE_CATALOG_NAME to TABLE_CATALOG"]}, {"root": "UPDATE from \"TABLE_SCHEM\" to \"TABLE_CATALOG\"", "operations": ["UPD StringLiteral: \"TABLE_SCHEM\" from \"TABLE_SCHEM\" to \"TABLE_CATALOG\""]}, {"root": "UPDATE from TABLE_SCHEM_NAME to TABLE_SCHEM", "operations": ["UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: REMARKS_NAME from REMARKS_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TYPE_SCHEMA_AND_TABLE from TYPE_SCHEMA_AND_TABLE to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM"]}, {"root": "UPDATE from \"REMARKS\" to \"TABLE_SCHEM\"", "operations": ["UPD StringLiteral: \"REMARKS\" from \"REMARKS\" to \"TABLE_SCHEM\""]}, {"root": "UPDATE from REMARKS_NAME to REMARKS", "operations": ["UPD SimpleName: REMARKS_NAME from REMARKS_NAME to REMARKS", "UPD SimpleName: TYPE_CAT_NAME from TYPE_CAT_NAME to REMARKS"]}, {"root": "UPDATE from \"TYPE_CAT\" to \"REMARKS\"", "operations": ["UPD StringLiteral: \"TYPE_CAT\" from \"TYPE_CAT\" to \"REMARKS\""]}, {"root": "UPDATE from TYPE_SCHEM_NAME to TYPE_SCHEM", "operations": ["UPD SimpleName: TYPE_SCHEM_NAME from TYPE_SCHEM_NAME to TYPE_SCHEM"]}, {"root": "UPDATE from SELF_REFERENCING_COL_NAME_NAME to SELF_REFERENCING_COL_NAME", "operations": ["UPD SimpleName: SELF_REFERENCING_COL_NAME_NAME from SELF_REFERENCING_COL_NAME_NAME to SELF_REFERENCING_COL_NAME", "UPD SimpleName: SELF_REFERENCING_COL_NAME_NAME from SELF_REFERENCING_COL_NAME_NAME to SELF_REFERENCING_COL_NAME"]}, {"root": "UPDATE from REF_GENERATION_NAME to REF_GENERATION", "operations": ["UPD SimpleName: REF_GENERATION_NAME from REF_GENERATION_NAME to REF_GENERATION", "UPD SimpleName: REF_GENERATION_NAME from REF_GENERATION_NAME to REF_GENERATION"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS StringLiteral: \" TENANT_ID LIKE '\" to InfixExpression: + at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: buf to MethodInvocation at 1", "INS StringLiteral: \" = '\" to InfixExpression: + at 5", "INS Block to IfStatement at 1", "INS IfStatement to Block at 0", "INS SimpleName: buf to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: tenantIdPattern to MethodInvocation at 0", "INS SimpleName: escapePattern to MethodInvocation at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: buf to MethodInvocation at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS InfixExpression: + to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 1", "INS StringLiteral: \"') \" to InfixExpression: + at 7", "INS SimpleName: append to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: escapePattern to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: buf to MethodInvocation at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: getString to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS ExpressionStatement to Block at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \"' \" to InfixExpression: + at 2", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS MethodInvocation to InfixExpression: + at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: TENANT_ID to InfixExpression: + at 4", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleName: tenantId to InfixExpression: != at 0", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \" IS NULL \" to InfixExpression: + at 1", "INS Block to IfStatement at 1", "INS IfStatement to Block at 2", "INS SimpleName: buf to MethodInvocation at 1", "INS SimpleName: buf to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 1", "INS SimpleName: tenantId to MethodInvocation at 0", "INS IfStatement to IfStatement at 2", "INS Block to IfStatement at 1", "INS SimpleName: appendConjunction to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS MethodInvocation to InfixExpression: + at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 2", "INS ExpressionStatement to Block at 1", "INS InfixExpression: == to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: appendConjunction to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: buf to MethodInvocation at 0", "INS SimpleName: TENANT_ID to InfixExpression: + at 0", "INS StringLiteral: \" OR \" to InfixExpression: + at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: appendConjunction to MethodInvocation at 0", "INS SimpleName: tenantId to InfixExpression: != at 0", "INS SimpleName: tenantIdPattern to InfixExpression: == at 0", "INS SimpleName: tenantIdPattern to MethodInvocation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: where to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 5", "operations": ["INS VariableDeclarationStatement to Block at 5", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: colPattern to VariableDeclarationFragment at 0"]}, {"root": "INS IfStatement to Block at 6", "operations": ["INS SimpleName: index to InfixExpression: + at 0", "INS VariableDeclarationStatement to Block at 1", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS IfStatement to Block at 2", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS InfixExpression: + to InfixExpression: > at 1", "INS Block to IfStatement at 2", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: substring to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: > at 0", "INS SimpleName: columnNamePattern to MethodInvocation at 0", "INS SimpleName: columnNamePattern to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: index to InfixExpression: + at 0", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleName: columnNamePattern to MethodInvocation at 0", "INS NumberLiteral: 0 to InfixExpression: <= at 1", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS SimpleName: colPattern to InfixExpression: != at 0", "INS SimpleName: substring to MethodInvocation at 1", "INS IfStatement to Block at 1", "INS ExpressionStatement to Block at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS Block to IfStatement at 1", "INS IfStatement to Block at 4", "INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS InfixExpression: <= to IfStatement at 0", "INS SimpleName: colPattern to MethodInvocation at 0", "INS SimpleName: colPattern to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: colPattern to Assignment: = at 0", "INS CharacterLiteral: '.' to MethodInvocation at 2", "INS SimpleName: cfPattern to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleName: indexOf to MethodInvocation at 1", "INS SimpleName: columnNamePattern to MethodInvocation at 0", "INS InfixExpression: > to InfixExpression: && at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to InfixExpression: > at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: index to MethodInvocation at 3", "INS SimpleName: index to InfixExpression: <= at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: index to VariableDeclarationFragment at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: length to MethodInvocation at 1", "INS InfixExpression: > to IfStatement at 0", "INS SimpleName: cfPattern to Assignment: = at 0", "INS SimpleName: columnNamePattern to MethodInvocation at 0", "INS IfStatement to Block at 6", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS NullLiteral to InfixExpression: != at 1", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 7", "operations": ["INS SimpleName: colPattern to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS InfixExpression: == to IfStatement at 0", "INS IfStatement to Block at 7"]}, {"root": "INS ExpressionStatement to Block at 8", "operations": ["INS SimpleName: buf to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: where to MethodInvocation at 2", "INS ExpressionStatement to Block at 8", "INS SimpleName: append to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 7", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: addTenantIdFilter to MethodInvocation at 0", "INS ExpressionStatement to Block at 7", "INS SimpleName: buf to MethodInvocation at 1", "INS SimpleName: catalog to MethodInvocation at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS VariableDeclarationStatement to Block at 4", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS SimpleType: StringBuilder to VariableDeclarationStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 10", "operations": ["INS ExpressionStatement to Block at 10", "INS SimpleName: addTenantIdFilter to MethodInvocation at 0", "INS SimpleName: catalog to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: buf to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: catalog to MethodInvocation at 3", "INS SimpleName: addTenantIdFilter to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ThisExpression to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: buf to MethodInvocation at 2"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 5", "MOV ExpressionStatement to Block at 2"]}, {"root": "UPDATE from TYPE_SCHEMA to Bytes", "operations": ["UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to Bytes", "UPD SimpleName: TYPE_TABLE from TYPE_TABLE to Bytes"]}, {"root": "UPDATE from getBytes to toBytes", "operations": ["UPD SimpleName: getBytes from getBytes to toBytes", "UPD SimpleName: getBytes from getBytes to toBytes"]}, {"root": "INS SimpleName: SYSTEM_CATALOG_TABLE to MethodInvocation at 2", "operations": ["INS SimpleName: SYSTEM_CATALOG_TABLE to MethodInvocation at 2"]}, {"root": "INS SimpleName: SYSTEM_CATALOG_SCHEMA to MethodInvocation at 2", "operations": ["INS SimpleName: SYSTEM_CATALOG_SCHEMA to MethodInvocation at 2"]}, {"root": "UPDATE from \"Catalog\" to \"Tenant\"", "operations": ["UPD StringLiteral: \"Catalog\" from \"Catalog\" to \"Tenant\""]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: StringBuilder to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV Block to IfStatement at 1", "MOV InfixExpression: && to IfStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: StringBuilder to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: StringBuilder to ClassInstanceCreation at 0", "MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: StringBuilder to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: StringBuilder to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: StringBuilder to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: && to IfStatement at 0"]}, {"root": "UPDATE from buf to where", "operations": ["UPD SimpleName: buf from buf to where", "UPD SimpleName: buf from buf to where", "UPD SimpleName: buf from buf to where", "UPD SimpleName: append from append to where", "UPD SimpleName: buf from buf to where", "UPD SimpleName: buf from buf to where"]}, {"root": "UPDATE from append to catalog", "operations": ["UPD SimpleName: append from append to catalog", "UPD SimpleName: getTenantIdWhereClause from getTenantIdWhereClause to catalog", "UPD SimpleName: append from append to catalog"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getTenantIdWhereClause to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: appendConjunction to MethodInvocation at 0", "INS SimpleName: where to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: appendConjunction to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: where to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 3"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: appendConjunction to MethodInvocation at 0", "INS SimpleName: where to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS SimpleName: addTenantIdFilter to MethodInvocation at 0", "operations": ["INS SimpleName: addTenantIdFilter to MethodInvocation at 0"]}, {"root": "INS SimpleName: addTenantIdFilter to MethodInvocation at 0", "operations": ["INS SimpleName: addTenantIdFilter to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: buf to MethodInvocation at 0", "INS SimpleName: TABLE_TYPE to InfixExpression: + at 1", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \" and \" to InfixExpression: + at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \" IN (\" to InfixExpression: + at 2"]}, {"root": "MOVE from MethodRefParameter", "operations": ["MOV SimpleType: String to MethodRefParameter at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: StringBuilder to ClassInstanceCreation at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleName: TENANT_ID to InfixExpression: + at 1", "operations": ["INS SimpleName: TENANT_ID to InfixExpression: + at 1"]}, {"root": "INS StringLiteral: \",\" to InfixExpression: + at 2", "operations": ["INS StringLiteral: \",\" to InfixExpression: + at 2"]}, {"root": "INS SimpleType: StringBuilder to ClassInstanceCreation at 0", "operations": ["INS SimpleType: StringBuilder to ClassInstanceCreation at 0", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0"]}, {"root": "INS SimpleName: TENANT_ID to InfixExpression: + at 1", "operations": ["INS SimpleName: TENANT_ID to InfixExpression: + at 1"]}, {"root": "INS StringLiteral: \",\" to InfixExpression: + at 2", "operations": ["INS StringLiteral: \",\" to InfixExpression: + at 2"]}, {"root": "INS SimpleName: TABLE_SCHEM to InfixExpression: + at 3", "operations": ["INS SimpleName: TABLE_SCHEM to InfixExpression: + at 3"]}, {"root": "INS StringLiteral: \",\" to InfixExpression: + at 4", "operations": ["INS StringLiteral: \",\" to InfixExpression: + at 4"]}, {"root": "INS SimpleName: TABLE_NAME to InfixExpression: + at 5", "operations": ["INS SimpleName: TABLE_NAME to InfixExpression: + at 5"]}, {"root": "INS StringLiteral: \" ,\" to InfixExpression: + at 6", "operations": ["INS StringLiteral: \" ,\" to InfixExpression: + at 6"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: StringBuilder to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: StringBuilder to ClassInstanceCreation at 0"]}, {"root": "UPDATE from TYPE_NAME to SUPERTABLE_NAME", "operations": ["UPD SimpleName: TYPE_NAME from TYPE_NAME to SUPERTABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to SUPERTABLE_NAME"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: StringBuilder to ClassInstanceCreation at 0"]}, {"root": "UPDATE from TYPE_SCHEMA_AND_TABLE_ALIAS to SYSTEM_CATALOG_ALIAS", "operations": ["UPD SimpleName: TYPE_SCHEMA_AND_TABLE_ALIAS from TYPE_SCHEMA_AND_TABLE_ALIAS to SYSTEM_CATALOG_ALIAS", "UPD SimpleName: TYPE_SCHEMA_AND_TABLE_ALIAS from TYPE_SCHEMA_AND_TABLE_ALIAS to SYSTEM_CATALOG_ALIAS", "UPD SimpleName: TYPE_SCHEMA_AND_TABLE_ALIAS from TYPE_SCHEMA_AND_TABLE_ALIAS to SYSTEM_CATALOG_ALIAS", "UPD SimpleName: TYPE_SCHEMA_AND_TABLE from TYPE_SCHEMA_AND_TABLE to SYSTEM_CATALOG_ALIAS", "UPD SimpleName: TYPE_SCHEMA_AND_TABLE_ALIAS from TYPE_SCHEMA_AND_TABLE_ALIAS to SYSTEM_CATALOG_ALIAS"]}, {"root": "INS SimpleName: TENANT_ID to InfixExpression: + at 5", "operations": ["INS SimpleName: TENANT_ID to InfixExpression: + at 5"]}, {"root": "INS StringLiteral: \",\" to InfixExpression: + at 6", "operations": ["INS StringLiteral: \",\" to InfixExpression: + at 6"]}, {"root": "UPDATE from \"*/\" to \"*/\\n \"", "operations": ["UPD StringLiteral: \"*/\" from \"*/\" to \"*/\\n \""]}, {"root": "INS SimpleName: TENANT_ID to InfixExpression: + at 3", "operations": ["INS SimpleName: TENANT_ID to InfixExpression: + at 3"]}, {"root": "INS StringLiteral: \" \" to InfixExpression: + at 4", "operations": ["INS StringLiteral: \" \" to InfixExpression: + at 4"]}, {"root": "UPDATE from \" ,\" to \",\"", "operations": ["UPD StringLiteral: \" ,\" from \" ,\" to \",\"", "UPD StringLiteral: \" from \" from \" from \" to \",\""]}, {"root": "INS StringLiteral: \",\" to InfixExpression: + at 67", "operations": ["INS StringLiteral: \",\" to InfixExpression: + at 67"]}, {"root": "INS SimpleName: VIEW_CONSTANT to InfixExpression: + at 68", "operations": ["INS SimpleName: VIEW_CONSTANT to InfixExpression: + at 68"]}, {"root": "UPDATE from \" \" to \" from \"", "operations": ["UPD StringLiteral: \" \" from \" \" to \" from \""]}, {"root": "UPDATE from \",\" to \" \"", "operations": ["UPD StringLiteral: \",\" from \",\" to \" \"", "UPD StringLiteral: \" where \" from \" where \" to \" \"", "UPD StringLiteral: \"null \" from \"null \" to \" \"", "UPD StringLiteral: \"null \" from \"null \" to \" \"", "UPD StringLiteral: \" ,\" from \" ,\" to \" \""]}, {"root": "INS SimpleName: SYSTEM_CATALOG_ALIAS to InfixExpression: + at 72", "operations": ["INS SimpleName: SYSTEM_CATALOG_ALIAS to InfixExpression: + at 72"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: appendConjunction to MethodInvocation at 0", "INS SimpleName: where to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: appendConjunction to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: where to MethodInvocation at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "INS SimpleName: TENANT_ID to InfixExpression: + at 3", "operations": ["INS SimpleName: TENANT_ID to InfixExpression: + at 3"]}, {"root": "INS StringLiteral: \",\\n\" to InfixExpression: + at 40", "operations": ["INS StringLiteral: \",\\n\" to InfixExpression: + at 40"]}, {"root": "INS SimpleName: COLUMN_FAMILY to InfixExpression: + at 41", "operations": ["INS SimpleName: COLUMN_FAMILY to InfixExpression: + at 41"]}, {"root": "INS StringLiteral: \",\\n\" to InfixExpression: + at 42", "operations": ["INS StringLiteral: \",\\n\" to InfixExpression: + at 42"]}, {"root": "INS SimpleName: COLUMN_SIZE to InfixExpression: + at 43", "operations": ["INS SimpleName: COLUMN_SIZE to InfixExpression: + at 43"]}, {"root": "INS StringLiteral: \",\\n\" to InfixExpression: + at 44", "operations": ["INS StringLiteral: \",\\n\" to InfixExpression: + at 44"]}, {"root": "INS SimpleName: ARRAY_SIZE to InfixExpression: + at 45", "operations": ["INS SimpleName: ARRAY_SIZE to InfixExpression: + at 45"]}, {"root": "UPDATE from SchemaUtil to escapePattern", "operations": ["UPD SimpleName: SchemaUtil from SchemaUtil to escapePattern", "UPD SimpleName: SchemaUtil from SchemaUtil to escapePattern", "UPD SimpleName: SchemaUtil from SchemaUtil to escapePattern", "UPD SimpleName: SchemaUtil from SchemaUtil to escapePattern", "UPD SimpleName: SchemaUtil from SchemaUtil to escapePattern", "UPD SimpleName: SchemaUtil from SchemaUtil to escapePattern", "UPD SimpleName: SchemaUtil from SchemaUtil to escapePattern", "UPD SimpleName: SchemaUtil from SchemaUtil to escapePattern", "UPD SimpleName: escapeSql from escapeSql to escapePattern", "UPD SimpleName: SchemaUtil from SchemaUtil to escapePattern", "UPD SimpleName: SchemaUtil from SchemaUtil to escapePattern", "UPD SimpleName: SchemaUtil from SchemaUtil to escapePattern", "UPD SimpleName: SchemaUtil from SchemaUtil to escapePattern", "UPD SimpleName: SchemaUtil from SchemaUtil to escapePattern"]}, {"root": "UPDATE from \"*/\" to \"*/\\n\"", "operations": ["UPD StringLiteral: \"*/\" from \"*/\" to \"*/\\n\"", "UPD StringLiteral: \"*/\" from \"*/\" to \"*/\\n\"", "UPD StringLiteral: \"*/\" from \"*/\" to \"*/\\n\""]}, {"root": "INS SimpleName: TENANT_ID to InfixExpression: + at 3", "operations": ["INS SimpleName: TENANT_ID to InfixExpression: + at 3"]}, {"root": "INS StringLiteral: \" \" to InfixExpression: + at 4", "operations": ["INS StringLiteral: \" \" to InfixExpression: + at 4"]}, {"root": "UPDATE from \"*/ distinct \" to \"*/\\n distinct \"", "operations": ["UPD StringLiteral: \"*/ distinct \" from \"*/ distinct \" to \"*/\\n distinct \""]}, {"root": "INS SimpleName: TENANT_ID to InfixExpression: + at 3", "operations": ["INS SimpleName: TENANT_ID to InfixExpression: + at 3"]}, {"root": "UPDATE from TABLE_CAT_NAME to TENANT_ID", "operations": ["UPD SimpleName: TABLE_CAT_NAME from TABLE_CAT_NAME to TENANT_ID"]}, {"root": "UPDATE from TABLE_CAT_NAME to LINK_TYPE", "operations": ["UPD SimpleName: TABLE_CAT_NAME from TABLE_CAT_NAME to LINK_TYPE"]}, {"root": "UPDATE from \" is null\" to \" = \"", "operations": ["UPD StringLiteral: \" is null\" from \" is null\" to \" = \""]}, {"root": "INS MethodInvocation to InfixExpression: + at 52", "operations": ["INS QualifiedName: LinkType.PHYSICAL_TABLE to MethodInvocation at 0", "INS SimpleName: getSerializedValue to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: + at 52"]}, {"root": "INS SimpleName: TENANT_ID to InfixExpression: + at 3", "operations": ["INS SimpleName: TENANT_ID to InfixExpression: + at 3"]}, {"root": "INS StringLiteral: \" \" to InfixExpression: + at 4", "operations": ["INS StringLiteral: \" \" to InfixExpression: + at 4"]}, {"root": "UPDATE from catalog to cfPattern", "operations": ["UPD SimpleName: catalog from catalog to cfPattern", "UPD SimpleName: catalog from catalog to cfPattern", "UPD SimpleName: catalog from catalog to cfPattern"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV InfixExpression: || to ConditionalExpression at 0"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV InfixExpression: || to ConditionalExpression at 0"]}, {"root": "UPDATE from \"(\" to \" (\"", "operations": ["UPD StringLiteral: \"(\" from \"(\" to \" (\""]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV StringLiteral: \" IS NULL \" to InfixExpression: + at 2", "MOV SimpleName: TENANT_ID to InfixExpression: + at 1", "MOV StringLiteral: \"(\" to InfixExpression: + at 0"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV StringLiteral: \"') \" to InfixExpression: + at 2", "MOV MethodInvocation to InfixExpression: + at 6", "MOV StringLiteral: \" OR \" to InfixExpression: + at 0"]}, {"root": "UPDATE from \" OR \" to \" and TENANT_ID + = '\"", "operations": ["UPD StringLiteral: \" OR \" from \" OR \" to \" and TENANT_ID + = '\""]}, {"root": "UPDATE from \"') \" to \"' \"", "operations": ["UPD StringLiteral: \"') \" from \"') \" to \"' \""]}, {"root": "UPDATE from columnNamePattern to colPattern", "operations": ["UPD SimpleName: columnNamePattern from columnNamePattern to colPattern"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: TYPE_SCHEMA_ALIAS", "DEL Modifier: final", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL Modifier: public", "DEL StringLiteral: \"SYSTEM\""]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL Modifier: public", "DEL SimpleName: TYPE_TABLE_ALIAS", "DEL StringLiteral: \"TABLE\"", "DEL Modifier: static", "DEL FieldDeclaration", "DEL VariableDeclarationFragment"]}, {"root": "DEL SimpleName: TYPE_SCHEMA_AND_TABLE_ALIAS", "operations": ["DEL SimpleName: TYPE_SCHEMA_AND_TABLE_ALIAS"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL SimpleName: TYPE_TABLE_ALIAS", "DEL StringLiteral: \".\"", "DEL SimpleName: TYPE_SCHEMA_ALIAS", "DEL StringLiteral: \"\\\"\"", "DEL InfixExpression: +", "DEL StringLiteral: \"\\\"\""]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL Modifier: public", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: TYPE_NAME_NAME", "DEL StringLiteral: \"TYPE_NAME\""]}, {"root": "DEL SimpleName: StringEscapeUtils", "operations": ["DEL SimpleName: StringEscapeUtils"]}, {"root": "DEL ReturnStatement", "operations": ["DEL StringLiteral: \" = '\"", "DEL InfixExpression: ==", "DEL StringLiteral: \") \"", "DEL SimpleName: TENANT_ID", "DEL NullLiteral", "DEL InfixExpression: +", "DEL InfixExpression: +", "DEL SimpleName: tenantId", "DEL ConditionalExpression", "DEL ParenthesizedExpression", "DEL ReturnStatement"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL StringLiteral: \" and \"", "operations": ["DEL StringLiteral: \" and \""]}, {"root": "DEL SimpleName: normalizeIdentifier", "operations": ["DEL SimpleName: normalizeIdentifier"]}, {"root": "DEL StringLiteral: \" and \"", "operations": ["DEL StringLiteral: \" and \""]}, {"root": "DEL SimpleName: normalizeIdentifier", "operations": ["DEL SimpleName: normalizeIdentifier"]}, {"root": "DEL StringLiteral: \" and \"", "operations": ["DEL StringLiteral: \" and \""]}, {"root": "DEL SimpleName: normalizeIdentifier", "operations": ["DEL SimpleName: normalizeIdentifier"]}, {"root": "DEL StringLiteral: \" and \"", "operations": ["DEL StringLiteral: \" and \""]}, {"root": "DEL SimpleName: normalizeIdentifier", "operations": ["DEL SimpleName: normalizeIdentifier"]}, {"root": "DEL StringLiteral: \" and \"", "operations": ["DEL StringLiteral: \" and \""]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL InfixExpression: !=", "DEL NullLiteral", "DEL ReturnStatement", "DEL IfStatement", "DEL InfixExpression: &&", "DEL SimpleName: emptyResultSet", "DEL Block", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: catalog", "DEL InfixExpression: >", "DEL SimpleName: catalog", "DEL SimpleName: length"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: getTenantIdWhereClause", "DEL SimpleName: buf"]}, {"root": "DEL StringLiteral: \"\\nand \"", "operations": ["DEL StringLiteral: \"\\nand \""]}, {"root": "DEL SimpleName: normalizeIdentifier", "operations": ["DEL SimpleName: normalizeIdentifier"]}, {"root": "DEL SimpleName: normalizeIdentifier", "operations": ["DEL SimpleName: normalizeIdentifier"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: catalog", "DEL InfixExpression: >", "DEL Block", "DEL ReturnStatement", "DEL NullLiteral", "DEL SimpleName: length", "DEL SimpleName: catalog", "DEL NumberLiteral: 0", "DEL InfixExpression: &&", "DEL IfStatement", "DEL SimpleName: emptyResultSet", "DEL InfixExpression: !=", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: getTenantIdWhereClause", "DEL SimpleName: append", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: buf"]}, {"root": "DEL StringLiteral: \" and \"", "operations": ["DEL StringLiteral: \" and \""]}, {"root": "DEL SimpleName: normalizeIdentifier", "operations": ["DEL SimpleName: normalizeIdentifier"]}, {"root": "DEL SimpleName: normalizeIdentifier", "operations": ["DEL SimpleName: normalizeIdentifier"]}, {"root": "DEL IfStatement", "operations": ["DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL SimpleName: emptyResultSet", "DEL InfixExpression: !=", "DEL Block", "DEL SimpleName: length", "DEL IfStatement", "DEL SimpleName: catalog", "DEL NullLiteral", "DEL InfixExpression: &&", "DEL SimpleName: catalog", "DEL InfixExpression: >", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: normalizeIdentifier", "operations": ["DEL SimpleName: normalizeIdentifier"]}, {"root": "DEL SimpleType: ResultSet", "operations": ["DEL SimpleType: ResultSet", "DEL SimpleName: ResultSet"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: String", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleName: catalog"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: String", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: schemaPattern"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: String", "DEL SimpleName: tableNamePattern", "DEL SingleVariableDeclaration", "DEL SimpleType: String"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: String", "DEL SimpleName: typeNamePattern", "DEL SingleVariableDeclaration", "DEL SimpleType: String"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: length", "DEL InfixExpression: !=", "DEL SimpleName: catalog", "DEL ReturnStatement", "DEL InfixExpression: &&", "DEL NullLiteral", "DEL SimpleName: getTenantId", "DEL ParenthesizedExpression", "DEL InfixExpression: !=", "DEL SimpleName: connection", "DEL InfixExpression: ||", "DEL NumberLiteral: 0", "DEL NullLiteral", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: emptyResultSet", "DEL SimpleName: catalog", "DEL Block", "DEL InfixExpression: >"]}, {"root": "DEL QualifiedName: SQLTableTypeFunction.NAME", "operations": ["DEL QualifiedName: SQLTableTypeFunction.NAME"]}, {"root": "DEL StringLiteral: \"(\"", "operations": ["DEL StringLiteral: \"(\""]}, {"root": "DEL StringLiteral: \") AS \"", "operations": ["DEL StringLiteral: \") AS \""]}, {"root": "DEL SimpleName: TABLE_TYPE_NAME", "operations": ["DEL SimpleName: TABLE_TYPE_NAME"]}, {"root": "DEL StringLiteral: \",\"", "operations": ["DEL StringLiteral: \",\""]}, {"root": "DEL SimpleName: SELF_REFERENCING_COL_NAME_NAME", "operations": ["DEL SimpleName: SELF_REFERENCING_COL_NAME_NAME"]}, {"root": "DEL StringLiteral: \",\"", "operations": ["DEL StringLiteral: \",\""]}, {"root": "DEL SimpleName: REF_GENERATION_NAME", "operations": ["DEL SimpleName: REF_GENERATION_NAME"]}, {"root": "DEL StringLiteral: \",\"", "operations": ["DEL StringLiteral: \",\""]}, {"root": "DEL QualifiedName: IndexStateNameFunction.NAME", "operations": ["DEL QualifiedName: IndexStateNameFunction.NAME"]}, {"root": "DEL StringLiteral: \"(\"", "operations": ["DEL StringLiteral: \"(\""]}, {"root": "DEL SimpleName: INDEX_STATE", "operations": ["DEL SimpleName: INDEX_STATE"]}, {"root": "DEL StringLiteral: \") AS \"", "operations": ["DEL StringLiteral: \") AS \""]}, {"root": "DEL SimpleName: INDEX_STATE", "operations": ["DEL SimpleName: INDEX_STATE"]}, {"root": "DEL StringLiteral: \",\"", "operations": ["DEL StringLiteral: \",\""]}, {"root": "DEL SimpleName: IMMUTABLE_ROWS", "operations": ["DEL SimpleName: IMMUTABLE_ROWS"]}, {"root": "DEL StringLiteral: \",\"", "operations": ["DEL StringLiteral: \",\""]}, {"root": "DEL SimpleName: SALT_BUCKETS", "operations": ["DEL SimpleName: SALT_BUCKETS"]}, {"root": "DEL StringLiteral: \",\"", "operations": ["DEL StringLiteral: \",\""]}, {"root": "DEL SimpleName: TENANT_ID", "operations": ["DEL SimpleName: TENANT_ID"]}, {"root": "DEL StringLiteral: \",\"", "operations": ["DEL StringLiteral: \",\""]}, {"root": "DEL SimpleName: VIEW_STATEMENT", "operations": ["DEL SimpleName: VIEW_STATEMENT"]}, {"root": "DEL StringLiteral: \",\"", "operations": ["DEL StringLiteral: \",\""]}, {"root": "DEL QualifiedName: SQLViewTypeFunction.NAME", "operations": ["DEL QualifiedName: SQLViewTypeFunction.NAME"]}, {"root": "DEL StringLiteral: \"(\"", "operations": ["DEL StringLiteral: \"(\""]}, {"root": "DEL SimpleName: VIEW_TYPE", "operations": ["DEL SimpleName: VIEW_TYPE"]}, {"root": "DEL StringLiteral: \") AS \"", "operations": ["DEL StringLiteral: \") AS \""]}, {"root": "DEL SimpleName: VIEW_TYPE", "operations": ["DEL SimpleName: VIEW_TYPE"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL SimpleName: TENANT_ID", "DEL InfixExpression: +", "DEL StringLiteral: \" and \"", "DEL StringLiteral: \" IS NOT NULL \""]}, {"root": "DEL SimpleName: normalizeIdentifier", "operations": ["DEL SimpleName: normalizeIdentifier"]}, {"root": "DEL SimpleName: normalizeIdentifier", "operations": ["DEL SimpleName: normalizeIdentifier"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: buf", "DEL SimpleName: typeNamePattern", "DEL SimpleName: normalizeIdentifier", "DEL SimpleName: typeNamePattern", "DEL MethodInvocation", "DEL SimpleName: SchemaUtil", "DEL Block", "DEL StringLiteral: \") like '\"", "DEL NullLiteral", "DEL StringLiteral: \"(\"", "DEL StringLiteral: \"'\"", "DEL SimpleName: append", "DEL InfixExpression: +", "DEL SimpleName: TABLE_TYPE_NAME", "DEL MethodInvocation", "DEL StringLiteral: \" and \"", "DEL IfStatement", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL QualifiedName: SQLTableTypeFunction.NAME"]}, {"root": "DEL StringLiteral: \".\"", "operations": ["DEL StringLiteral: \".\""]}, {"root": "DEL SimpleName: TABLE_TYPE_NAME", "operations": ["DEL SimpleName: TABLE_TYPE_NAME"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: schemaPattern", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: SQLException", "DEL Modifier: public", "DEL SimpleType: SQLException", "DEL SimpleName: tableNamePattern", "DEL NullLiteral", "DEL TagElement", "DEL SimpleName: getSuperTables", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Javadoc", "DEL SimpleName: getSuperTables", "DEL SimpleName: catalog", "DEL TextElement: Use/abuse this to get the derived tables ordered by TENANT_ID, TABLE_TYPE, SCHEMA_NAME, TABLE_NAME"]}, {"root": "DEL Block", "operations": ["DEL NullLiteral", "DEL ReturnStatement", "DEL SimpleName: schemaPattern", "DEL SimpleName: typeNamePattern", "DEL SimpleName: getSuperTables", "DEL MethodInvocation", "DEL SimpleName: catalog", "DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: emptyResultSet", "DEL InfixExpression: &&", "DEL Block", "DEL NumberLiteral: 0", "DEL SimpleName: length", "DEL IfStatement", "DEL ReturnStatement", "DEL NullLiteral", "DEL SimpleName: catalog", "DEL InfixExpression: !=", "DEL SimpleName: catalog", "DEL InfixExpression: >"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL InfixExpression: +", "DEL MethodInvocation", "DEL StringLiteral: \" and \"", "DEL SimpleName: getTenantIdWhereClause"]}, {"root": "DEL SimpleName: normalizeIdentifier", "operations": ["DEL SimpleName: normalizeIdentifier"]}, {"root": "DEL SimpleName: normalizeIdentifier", "operations": ["DEL SimpleName: normalizeIdentifier"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL NumberLiteral: 1", "DEL SimpleName: length", "DEL InfixExpression: ==", "DEL ArrayAccess", "DEL SimpleName: types", "DEL MethodInvocation", "DEL NumberLiteral: 0"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: append", "DEL EnhancedForStatement", "DEL SimpleName: append", "DEL SimpleName: append", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: types", "DEL Block", "DEL MethodInvocation", "DEL CharacterLiteral: '\\''", "DEL SimpleName: buf", "DEL MethodInvocation", "DEL CharacterLiteral: ','", "DEL SimpleName: type", "DEL SimpleName: buf", "DEL CharacterLiteral: '\\''", "DEL SimpleName: type", "DEL ExpressionStatement", "DEL SimpleName: buf", "DEL SimpleName: append", "DEL SimpleName: buf", "DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL StringLiteral: \" and \"", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL StringLiteral: \" IN (\"", "DEL SimpleName: append", "DEL IfStatement", "DEL SimpleName: buf", "DEL SimpleName: TABLE_TYPE_NAME", "DEL Block", "DEL MethodInvocation"]}]}}, {"PhoenixDatabaseMetaData_diff": {"operations": ["Insert ImportDeclaration(71) into CompilationUnit(5518) at 35", "Insert QualifiedName: org.apache.phoenix.schema.PTable.LinkType(70) into ImportDeclaration(71) at 0", "Insert FieldDeclaration(1299) into TypeDeclaration: class(5517) at 108", "Insert MethodDeclaration(1668) into TypeDeclaration: class(5517) at 129", "Insert FieldDeclaration(1677) into TypeDeclaration: class(5517) at 130", "Insert MethodDeclaration(1801) into TypeDeclaration: class(5517) at 132", "Move SimpleType: String(275) into FieldDeclaration(278) at 3", "Move SimpleType: String(312) into FieldDeclaration(300) at 3", "Move ArrayType: byte[](301) into FieldDeclaration(313) at 3", "Move ArrayType: byte[](326) into FieldDeclaration(326) at 3", "Move SimpleType: String(339) into FieldDeclaration(339) at 3", "Move ArrayType: byte[](289) into FieldDeclaration(353) at 3", "Move SimpleType: String(456) into FieldDeclaration(456) at 3", "Move SimpleType: String(465) into FieldDeclaration(465) at 3", "Insert Modifier: public(1291) into FieldDeclaration(1299) at 0", "Insert Modifier: static(1292) into FieldDeclaration(1299) at 1", "Insert Modifier: final(1293) into FieldDeclaration(1299) at 2", "Move SimpleType: String(474) into FieldDeclaration(1299) at 3", "Insert VariableDeclarationFragment(1298) into FieldDeclaration(1299) at 4", "Insert Block(1611) into MethodDeclaration(1612) at 5", "Insert Modifier: private(1653) into MethodDeclaration(1668) at 0", "Insert Modifier: static(1654) into MethodDeclaration(1668) at 1", "Move SimpleType: String(1605) into MethodDeclaration(1668) at 2", "Insert SimpleName: escapePattern(1657) into MethodDeclaration(1668) at 3", "Insert SingleVariableDeclaration(1661) into MethodDeclaration(1668) at 4", "Insert Block(1667) into MethodDeclaration(1668) at 5", "Insert Modifier: public(1669) into FieldDeclaration(1677) at 0", "Insert Modifier: static(1670) into FieldDeclaration(1677) at 1", "Insert Modifier: final(1671) into FieldDeclaration(1677) at 2", "Move SimpleType: String(348) into FieldDeclaration(1677) at 3", "Insert VariableDeclarationFragment(1676) into FieldDeclaration(1677) at 4", "Insert PrimitiveType: void(1679) into MethodDeclaration(1779) at 1", "Update SimpleName: getTenantIdWhereClause(1606) to addTenantIdFilter", "Insert SingleVariableDeclaration(1684) into MethodDeclaration(1779) at 3", "Insert SingleVariableDeclaration(1688) into MethodDeclaration(1779) at 4", "Insert Modifier: private(1780) into MethodDeclaration(1801) at 0", "Insert Modifier: static(1781) into MethodDeclaration(1801) at 1", "Insert PrimitiveType: void(1782) into MethodDeclaration(1801) at 2", "Insert SimpleName: appendConjunction(1783) into MethodDeclaration(1801) at 3", "Insert SingleVariableDeclaration(1787) into MethodDeclaration(1801) at 4", "Insert Block(1800) into MethodDeclaration(1801) at 5", "Move MarkerAnnotation(3623) into MethodDeclaration(3753) at 0", "Update Modifier: private(3382) to public", "Move SimpleType: ResultSet(3626) into MethodDeclaration(3753) at 2", "Move SingleVariableDeclaration(3631) into MethodDeclaration(3753) at 5", "Move SingleVariableDeclaration(3635) into MethodDeclaration(3753) at 6", "Move SingleVariableDeclaration(3610) into MethodDeclaration(3753) at 7", "Move SimpleType: SQLException(3641) into MethodDeclaration(3753) at 8", "Move MarkerAnnotation(3594) into MethodDeclaration(3777) at 0", "Move SimpleType: ResultSet(3597) into MethodDeclaration(3777) at 2", "Move SingleVariableDeclaration(3602) into MethodDeclaration(3777) at 4", "Move SingleVariableDeclaration(3606) into MethodDeclaration(3777) at 5", "Move SimpleType: SQLException(3403) into MethodDeclaration(3777) at 7", "Move Block(1561) into MethodDeclaration(3777) at 8", "Insert TagElement: @link(207) into TagElement(212) at 18", "Insert TagElement: @link(210) into TagElement(212) at 19", "Update SimpleName: TYPE_SCHEMA(258) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TYPE_TABLE(267) to SYSTEM_CATALOG_TABLE", "Update SimpleName: TYPE_SCHEMA_AND_TABLE(276) to SYSTEM_CATALOG", "Update SimpleName: TYPE_TABLE_BYTES(290) to SYSTEM_CATALOG_SCHEMA_BYTES", "Update SimpleName: TYPE_SCHEMA_BYTES(302) to SYSTEM_CATALOG_TABLE_BYTES", "Update SimpleName: TYPE_TABLE_NAME(313) to SYSTEM_CATALOG_NAME", "Update SimpleName: TYPE_TABLE_NAME_BYTES(327) to SYSTEM_CATALOG_BYTES", "Insert SimpleName: SYSTEM_CATALOG_ALIAS(359) into VariableDeclarationFragment(361) at 0", "Insert StringLiteral: \"\\\"SYSTEM.TABLE\\\"\"(360) into VariableDeclarationFragment(361) at 1", "Update SimpleName: TABLE_NAME_NAME(372) to TABLE_NAME", "Update SimpleName: TABLE_TYPE_NAME(381) to TABLE_TYPE", "Update SimpleName: TABLE_CAT_NAME(403) to COLUMN_FAMILY", "Update StringLiteral: \"TABLE_CAT\"(404) to \"COLUMN_FAMILY\"", "Update SimpleName: TABLE_CATALOG_NAME(412) to TABLE_CAT", "Update StringLiteral: \"TABLE_CATALOG\"(413) to \"TABLE_CAT\"", "Update SimpleName: TABLE_SCHEM_NAME(421) to TABLE_CATALOG", "Update StringLiteral: \"TABLE_SCHEM\"(422) to \"TABLE_CATALOG\"", "Update SimpleName: REMARKS_NAME(430) to TABLE_SCHEM", "Update StringLiteral: \"REMARKS\"(431) to \"TABLE_SCHEM\"", "Update SimpleName: TYPE_CAT_NAME(439) to REMARKS", "Update StringLiteral: \"TYPE_CAT\"(440) to \"REMARKS\"", "Update SimpleName: TYPE_SCHEM_NAME(448) to TYPE_SCHEM", "Update SimpleName: SELF_REFERENCING_COL_NAME_NAME(466) to SELF_REFERENCING_COL_NAME", "Update SimpleName: REF_GENERATION_NAME(475) to REF_GENERATION", "Insert SimpleName: SUPERTABLE_NAME(1296) into VariableDeclarationFragment(1298) at 0", "Insert StringLiteral: \"SUPERTABLE_NAME\"(1297) into VariableDeclarationFragment(1298) at 1", "Insert VariableDeclarationStatement(1583) into Block(1611) at 0", "Insert ExpressionStatement(1588) into Block(1611) at 1", "Insert ExpressionStatement(1595) into Block(1611) at 2", "Insert VariableDeclarationStatement(1603) into Block(1611) at 3", "Insert ReturnStatement(1610) into Block(1611) at 4", "Insert SimpleType: String(1659) into SingleVariableDeclaration(1661) at 0", "Insert SimpleName: pattern(1660) into SingleVariableDeclaration(1661) at 1", "Insert ReturnStatement(1666) into Block(1667) at 0", "Insert SimpleName: GLOBAL_TENANANTS_ONLY(1674) into VariableDeclarationFragment(1676) at 0", "Insert StringLiteral: \"null\"(1675) into VariableDeclarationFragment(1676) at 1", "Insert SimpleType: StringBuilder(1682) into SingleVariableDeclaration(1684) at 0", "Insert SimpleName: buf(1683) into SingleVariableDeclaration(1684) at 1", "Insert SimpleType: String(1686) into SingleVariableDeclaration(1688) at 0", "Insert SimpleName: tenantIdPattern(1687) into SingleVariableDeclaration(1688) at 1", "Insert IfStatement(1777) into Block(1778) at 1", "Insert SimpleType: StringBuilder(1785) into SingleVariableDeclaration(1787) at 0", "Insert SimpleName: buf(1786) into SingleVariableDeclaration(1787) at 1", "Insert ExpressionStatement(1799) into Block(1800) at 0", "Insert VariableDeclarationStatement(1919) into Block(2148) at 1", "Insert VariableDeclarationStatement(1985) into Block(2148) at 5", "Insert IfStatement(2098) into Block(2148) at 6", "Insert IfStatement(2114) into Block(2148) at 7", "Insert ExpressionStatement(2119) into Block(2148) at 8", "Insert ExpressionStatement(2598) into Block(2621) at 5", "Insert VariableDeclarationStatement(2970) into Block(3375) at 3", "Insert ExpressionStatement(3019) into Block(3375) at 7", "Insert ExpressionStatement(3561) into Block(3594) at 1", "Move IfStatement(4117) into Block(4234) at 5", "Insert MethodRef(206) into TagElement: @link(207) at 0", "Insert MethodRef(209) into TagElement: @link(210) at 0", "Update SimpleName: TYPE_SCHEMA(277) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TYPE_TABLE(279) to SYSTEM_CATALOG_TABLE", "Update SimpleName: TYPE_TABLE(291) to Bytes", "Update SimpleName: getBytes(292) to toBytes", "Insert SimpleName: SYSTEM_CATALOG_TABLE(310) into MethodInvocation(311) at 2", "Update SimpleName: TYPE_SCHEMA(303) to Bytes", "Update SimpleName: getBytes(304) to toBytes", "Insert SimpleName: SYSTEM_CATALOG_SCHEMA(323) into MethodInvocation(324) at 2", "Update SimpleName: TYPE_SCHEMA(316) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TYPE_TABLE(317) to SYSTEM_CATALOG_TABLE", "Update SimpleName: TYPE_SCHEMA_BYTES(330) to SYSTEM_CATALOG_TABLE_BYTES", "Update SimpleName: TYPE_TABLE_BYTES(331) to SYSTEM_CATALOG_SCHEMA_BYTES", "Update SimpleName: TABLE_TYPE_NAME(394) to TABLE_TYPE", "Update SimpleName: TYPE_SCHEMA(1155) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TYPE_SCHEMA(1171) to SYSTEM_CATALOG_SCHEMA", "Update StringLiteral: \"Catalog\"(1547) to \"Tenant\"", "Insert SimpleType: StringBuilder(1556) into VariableDeclarationStatement(1583) at 0", "Insert VariableDeclarationFragment(1582) into VariableDeclarationStatement(1583) at 1", "Insert MethodInvocation(1587) into ExpressionStatement(1588) at 0", "Insert MethodInvocation(1594) into ExpressionStatement(1595) at 0", "Insert SimpleType: Statement(1597) into VariableDeclarationStatement(1603) at 0", "Insert VariableDeclarationFragment(1602) into VariableDeclarationStatement(1603) at 1", "Insert MethodInvocation(1609) into ReturnStatement(1610) at 0", "Insert SimpleName: String(1658) into SimpleType: String(1659) at 0", "Insert MethodInvocation(1665) into ReturnStatement(1666) at 0", "Insert SimpleName: StringBuilder(1681) into SimpleType: StringBuilder(1682) at 0", "Insert SimpleName: String(1685) into SimpleType: String(1686) at 0", "Insert InfixExpression: ==(1699) into IfStatement(1777) at 0", "Insert Block(1726) into IfStatement(1777) at 1", "Insert IfStatement(1776) into IfStatement(1777) at 2", "Insert SimpleName: StringBuilder(1784) into SimpleType: StringBuilder(1785) at 0", "Insert MethodInvocation(1798) into ExpressionStatement(1799) at 0", "Move SimpleType: StringBuilder(2242) into VariableDeclarationStatement(1919) at 0", "Insert VariableDeclarationFragment(1918) into VariableDeclarationStatement(1919) at 1", "Insert SimpleType: String(1981) into VariableDeclarationStatement(1985) at 0", "Insert VariableDeclarationFragment(1984) into VariableDeclarationStatement(1985) at 1", "Move InfixExpression: &&(1833) into IfStatement(2098) at 0", "Insert Block(2097) into IfStatement(2098) at 1", "Insert InfixExpression: ==(2101) into IfStatement(2114) at 0", "Move Block(1856) into IfStatement(2114) at 1", "Insert MethodInvocation(2118) into ExpressionStatement(2119) at 0", "Move SimpleType: StringBuilder(2685) into VariableDeclarationStatement(2549) at 0", "Insert MethodInvocation(2597) into ExpressionStatement(2598) at 0", "Insert SimpleType: StringBuilder(2923) into VariableDeclarationStatement(2970) at 0", "Move VariableDeclarationFragment(2726) into VariableDeclarationStatement(2970) at 1", "Insert MethodInvocation(3018) into ExpressionStatement(3019) at 0", "Move SimpleType: StringBuilder(3428) into VariableDeclarationStatement(3555) at 0", "Insert MethodInvocation(3560) into ExpressionStatement(3561) at 0", "Move InfixExpression: !=(3495) into IfStatement(3578) at 0", "Move SimpleType: StringBuilder(3304) into VariableDeclarationStatement(3675) at 0", "Move InfixExpression: !=(3325) into IfStatement(3706) at 0", "Move SimpleType: StringBuilder(3924) into VariableDeclarationStatement(4096) at 0", "Move InfixExpression: &&(4040) into IfStatement(4203) at 0", "Insert SimpleName: getSuperTables(196) into MethodRef(206) at 0", "Insert MethodRefParameter(199) into MethodRef(206) at 1", "Insert MethodRefParameter(202) into MethodRef(206) at 2", "Insert MethodRefParameter(205) into MethodRef(206) at 3", "Insert SimpleName: getCatalogs(208) into MethodRef(209) at 0", "Insert SimpleName: StringBuilder(1555) into SimpleType: StringBuilder(1556) at 0", "Insert SimpleName: buf(1557) into VariableDeclarationFragment(1582) at 0", "Insert ClassInstanceCreation(1581) into VariableDeclarationFragment(1582) at 1", "Insert SimpleName: addTenantIdFilter(1584) into MethodInvocation(1587) at 0", "Insert SimpleName: buf(1585) into MethodInvocation(1587) at 1", "Insert NullLiteral(1586) into MethodInvocation(1587) at 2", "Insert SimpleName: buf(1589) into MethodInvocation(1594) at 0", "Insert SimpleName: append(1590) into MethodInvocation(1594) at 1", "Insert InfixExpression: +(1593) into MethodInvocation(1594) at 2", "Insert SimpleName: Statement(1596) into SimpleType: Statement(1597) at 0", "Insert SimpleName: stmt(1598) into VariableDeclarationFragment(1602) at 0", "Insert MethodInvocation(1601) into VariableDeclarationFragment(1602) at 1", "Insert SimpleName: stmt(1604) into MethodInvocation(1609) at 0", "Insert SimpleName: executeQuery(1605) into MethodInvocation(1609) at 1", "Insert MethodInvocation(1608) into MethodInvocation(1609) at 2", "Insert SimpleName: StringEscapeUtils(1662) into MethodInvocation(1665) at 0", "Insert SimpleName: escapeSql(1663) into MethodInvocation(1665) at 1", "Insert SimpleName: pattern(1664) into MethodInvocation(1665) at 2", "Insert SimpleName: tenantIdPattern(1697) into InfixExpression: ==(1699) at 0", "Insert NullLiteral(1698) into InfixExpression: ==(1699) at 1", "Insert IfStatement(1725) into Block(1726) at 0", "Insert InfixExpression: ==(1731) into IfStatement(1776) at 0", "Insert Block(1743) into IfStatement(1776) at 1", "Insert Block(1775) into IfStatement(1776) at 2", "Insert SimpleName: buf(1788) into MethodInvocation(1798) at 0", "Insert SimpleName: append(1789) into MethodInvocation(1798) at 1", "Insert ConditionalExpression(1797) into MethodInvocation(1798) at 2", "Insert SimpleName: where(1914) into VariableDeclarationFragment(1918) at 0", "Insert ClassInstanceCreation(1917) into VariableDeclarationFragment(1918) at 1", "Update SimpleName: buf(1744) to addTenantIdFilter", "Update SimpleName: append(1745) to where", "Update SimpleName: getTenantIdWhereClause(1746) to catalog", "Move SimpleName: getTenantIdWhereClause(1746) into MethodInvocation(1923) at 2", "Insert ExpressionStatement(1931) into Block(1952) at 0", "Insert ExpressionStatement(1966) into Block(1978) at 0", "Insert SimpleName: String(1980) into SimpleType: String(1981) at 0", "Insert SimpleName: colPattern(1982) into VariableDeclarationFragment(1984) at 0", "Insert NullLiteral(1983) into VariableDeclarationFragment(1984) at 1", "Insert VariableDeclarationStatement(2000) into Block(2097) at 0", "Insert VariableDeclarationStatement(2008) into Block(2097) at 1", "Insert IfStatement(2044) into Block(2097) at 2", "Move IfStatement(1824) into Block(2097) at 3", "Insert IfStatement(2096) into Block(2097) at 4", "Insert SimpleName: colPattern(2099) into InfixExpression: ==(2101) at 0", "Insert NullLiteral(2100) into InfixExpression: ==(2101) at 1", "Insert ExpressionStatement(2105) into Block(2113) at 0", "Insert SimpleName: buf(2115) into MethodInvocation(2118) at 0", "Insert SimpleName: append(2116) into MethodInvocation(2118) at 1", "Insert SimpleName: where(2117) into MethodInvocation(2118) at 2", "Insert SimpleName: addTenantIdFilter(2594) into MethodInvocation(2597) at 0", "Insert SimpleName: buf(2595) into MethodInvocation(2597) at 1", "Insert SimpleName: catalog(2596) into MethodInvocation(2597) at 2", "Insert SimpleName: StringBuilder(2922) into SimpleType: StringBuilder(2923) at 0", "Insert SimpleName: addTenantIdFilter(3015) into MethodInvocation(3018) at 0", "Insert SimpleName: buf(3016) into MethodInvocation(3018) at 1", "Insert SimpleName: catalog(3017) into MethodInvocation(3018) at 2", "Insert ThisExpression(3556) into MethodInvocation(3560) at 0", "Insert SimpleName: addTenantIdFilter(3557) into MethodInvocation(3560) at 1", "Insert SimpleName: buf(3558) into MethodInvocation(3560) at 2", "Insert SimpleName: catalog(3559) into MethodInvocation(3560) at 3", "Insert SimpleName: addTenantIdFilter(3676) into MethodInvocation(3679) at 0", "Update SimpleName: append(3486) to catalog", "Insert SimpleName: addTenantIdFilter(4097) into MethodInvocation(4100) at 0", "Update SimpleName: append(3982) to catalog", "Insert ExpressionStatement(4159) into Block(4202) at 0", "Move ExpressionStatement(4127) into Block(4202) at 2", "Insert SimpleType: String(198) into MethodRefParameter(199) at 0", "Insert SimpleType: String(201) into MethodRefParameter(202) at 0", "Move SimpleType: String(257) into MethodRefParameter(205) at 0", "Insert SimpleType: StringBuilder(1559) into ClassInstanceCreation(1581) at 0", "Insert InfixExpression: +(1580) into ClassInstanceCreation(1581) at 1", "Insert StringLiteral: \" order by \"(1591) into InfixExpression: +(1593) at 0", "Insert SimpleName: TENANT_ID(1592) into InfixExpression: +(1593) at 1", "Insert SimpleName: connection(1599) into MethodInvocation(1601) at 0", "Insert SimpleName: createStatement(1600) into MethodInvocation(1601) at 1", "Insert SimpleName: buf(1606) into MethodInvocation(1608) at 0", "Insert SimpleName: toString(1607) into MethodInvocation(1608) at 1", "Insert InfixExpression: !=(1702) into IfStatement(1725) at 0", "Insert Block(1724) into IfStatement(1725) at 1", "Insert MethodInvocation(1729) into InfixExpression: ==(1731) at 0", "Insert NumberLiteral: 0(1730) into InfixExpression: ==(1731) at 1", "Insert ExpressionStatement(1735) into Block(1743) at 0", "Insert ExpressionStatement(1742) into Block(1743) at 1", "Insert ExpressionStatement(1747) into Block(1775) at 0", "Insert ExpressionStatement(1757) into Block(1775) at 1", "Insert IfStatement(1774) into Block(1775) at 2", "Insert InfixExpression: ==(1794) into ConditionalExpression(1797) at 0", "Insert StringLiteral: \" where \"(1795) into ConditionalExpression(1797) at 1", "Insert StringLiteral: \" and \"(1796) into ConditionalExpression(1797) at 2", "Move SimpleType: StringBuilder(2239) into ClassInstanceCreation(1917) at 0", "Insert MethodInvocation(1930) into ExpressionStatement(1931) at 0", "Insert MethodInvocation(1965) into ExpressionStatement(1966) at 0", "Move SimpleType: String(4057) into VariableDeclarationStatement(2000) at 0", "Insert VariableDeclarationFragment(1999) into VariableDeclarationStatement(2000) at 1", "Insert PrimitiveType: int(2001) into VariableDeclarationStatement(2008) at 0", "Insert VariableDeclarationFragment(2007) into VariableDeclarationStatement(2008) at 1", "Insert InfixExpression: <=(2011) into IfStatement(2044) at 0", "Insert Block(2016) into IfStatement(2044) at 1", "Insert Block(2043) into IfStatement(2044) at 2", "Insert InfixExpression: &&(2079) into IfStatement(2096) at 0", "Move Block(1847) into IfStatement(2096) at 1", "Insert MethodInvocation(2104) into ExpressionStatement(2105) at 0", "Insert SimpleName: TENANT_ID(2123) into InfixExpression: +(2130) at 1", "Insert StringLiteral: \",\"(2124) into InfixExpression: +(2130) at 2", "Update SimpleName: TABLE_SCHEM_NAME(1861) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(1863) to TABLE_NAME", "Move SimpleType: StringBuilder(2682) into ClassInstanceCreation(2547) at 0", "Update SimpleName: TABLE_SCHEM_NAME(2301) to TABLE_SCHEM", "Insert SimpleType: StringBuilder(2926) into ClassInstanceCreation(2968) at 0", "Update SimpleName: TABLE_SCHEM_NAME(2737) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(2763) to TABLE_NAME", "Update SimpleName: TABLE_CAT_NAME(2776) to COLUMN_FAMILY", "Insert SimpleName: TENANT_ID(3023) into InfixExpression: +(3030) at 1", "Insert StringLiteral: \",\"(3024) into InfixExpression: +(3030) at 2", "Insert SimpleName: TABLE_SCHEM(3025) into InfixExpression: +(3030) at 3", "Insert StringLiteral: \",\"(3026) into InfixExpression: +(3030) at 4", "Insert SimpleName: TABLE_NAME(3027) into InfixExpression: +(3030) at 5", "Insert StringLiteral: \" ,\"(3028) into InfixExpression: +(3030) at 6", "Move SimpleType: StringBuilder(3425) into ClassInstanceCreation(3553) at 0", "Move SimpleType: StringBuilder(3301) into ClassInstanceCreation(3673) at 0", "Update SimpleName: TYPE_SCHEMA_AND_TABLE(3563) to TABLE_SCHEM", "Update SimpleName: TABLE_SCHEM_NAME(3567) to TABLE_NAME", "Update SimpleName: TABLE_NAME_NAME(3569) to SUPERTABLE_NAME", "Update SimpleName: TABLE_TYPE_NAME(3774) to TABLE_TYPE", "Update SimpleName: TYPE_SCHEMA_AND_TABLE(3775) to SYSTEM_CATALOG", "Move SimpleType: StringBuilder(3921) into ClassInstanceCreation(4094) at 0", "Insert MethodInvocation(4158) into ExpressionStatement(4159) at 0", "Update SimpleName: TYPE_SCHEMA_AND_TABLE(4133) to SYSTEM_CATALOG_ALIAS", "Update SimpleName: TABLE_TYPE_NAME(4135) to TABLE_TYPE", "Insert SimpleName: TENANT_ID(4211) into InfixExpression: +(4216) at 5", "Insert StringLiteral: \",\"(4212) into InfixExpression: +(4216) at 6", "Update SimpleName: TABLE_SCHEM_NAME(4137) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(4139) to TABLE_NAME", "Insert SimpleName: String(197) into SimpleType: String(198) at 0", "Insert SimpleName: String(200) into SimpleType: String(201) at 0", "Insert SimpleName: StringBuilder(1558) into SimpleType: StringBuilder(1559) at 0", "Insert StringLiteral: \"select /*+\"(1560) into InfixExpression: +(1580) at 0", "Insert QualifiedName: Hint.NO_INTRA_REGION_PARALLELIZATION(1561) into InfixExpression: +(1580) at 1", "Insert StringLiteral: \"*/\\n\"(1562) into InfixExpression: +(1580) at 2", "Insert StringLiteral: \" DISTINCT \"(1563) into InfixExpression: +(1580) at 3", "Insert SimpleName: TENANT_ID(1564) into InfixExpression: +(1580) at 4", "Insert StringLiteral: \" \"(1565) into InfixExpression: +(1580) at 5", "Insert SimpleName: TABLE_CAT(1566) into InfixExpression: +(1580) at 6", "Insert StringLiteral: \" from \"(1567) into InfixExpression: +(1580) at 7", "Insert SimpleName: SYSTEM_CATALOG(1568) into InfixExpression: +(1580) at 8", "Insert StringLiteral: \" \"(1569) into InfixExpression: +(1580) at 9", "Insert SimpleName: SYSTEM_CATALOG_ALIAS(1570) into InfixExpression: +(1580) at 10", "Insert StringLiteral: \" where \"(1571) into InfixExpression: +(1580) at 11", "Insert SimpleName: COLUMN_NAME(1572) into InfixExpression: +(1580) at 12", "Insert StringLiteral: \" is null\"(1573) into InfixExpression: +(1580) at 13", "Insert StringLiteral: \" and \"(1574) into InfixExpression: +(1580) at 14", "Insert SimpleName: COLUMN_FAMILY(1575) into InfixExpression: +(1580) at 15", "Insert StringLiteral: \" is null\"(1576) into InfixExpression: +(1580) at 16", "Insert StringLiteral: \" and \"(1577) into InfixExpression: +(1580) at 17", "Insert SimpleName: TENANT_ID(1578) into InfixExpression: +(1580) at 18", "Insert StringLiteral: \" is not null\"(1579) into InfixExpression: +(1580) at 19", "Insert SimpleName: tenantId(1700) into InfixExpression: !=(1702) at 0", "Insert NullLiteral(1701) into InfixExpression: !=(1702) at 1", "Insert ExpressionStatement(1706) into Block(1724) at 0", "Insert ExpressionStatement(1723) into Block(1724) at 1", "Insert SimpleName: tenantIdPattern(1727) into MethodInvocation(1729) at 0", "Insert SimpleName: length(1728) into MethodInvocation(1729) at 1", "Insert MethodInvocation(1734) into ExpressionStatement(1735) at 0", "Insert MethodInvocation(1741) into ExpressionStatement(1742) at 0", "Insert MethodInvocation(1746) into ExpressionStatement(1747) at 0", "Insert MethodInvocation(1756) into ExpressionStatement(1757) at 0", "Insert InfixExpression: !=(1760) into IfStatement(1774) at 0", "Insert Block(1773) into IfStatement(1774) at 1", "Insert MethodInvocation(1792) into InfixExpression: ==(1794) at 0", "Insert NumberLiteral: 0(1793) into InfixExpression: ==(1794) at 1", "Update StringLiteral: \"*/\"(1670) to \"*/\\n \"", "Insert SimpleName: TENANT_ID(1834) into InfixExpression: +(1908) at 3", "Insert StringLiteral: \" \"(1835) into InfixExpression: +(1908) at 4", "Update SimpleName: TABLE_CAT_NAME(1671) to TABLE_CAT", "Update SimpleName: TABLE_SCHEM_NAME(1673) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(1675) to TABLE_NAME", "Update StringLiteral: \" from \"(1735) to \",\"", "Update SimpleName: TYPE_SCHEMA_AND_TABLE(1736) to COLUMN_FAMILY", "Insert StringLiteral: \",\"(1902) into InfixExpression: +(1908) at 67", "Insert SimpleName: VIEW_CONSTANT(1903) into InfixExpression: +(1908) at 68", "Update StringLiteral: \" \"(1737) to \" from \"", "Update SimpleName: TYPE_SCHEMA_AND_TABLE_ALIAS(1738) to SYSTEM_CATALOG", "Update StringLiteral: \" where \"(1739) to \" \"", "Insert SimpleName: SYSTEM_CATALOG_ALIAS(1907) into InfixExpression: +(1908) at 72", "Insert SimpleName: appendConjunction(1928) into MethodInvocation(1930) at 0", "Insert SimpleName: where(1929) into MethodInvocation(1930) at 1", "Update SimpleName: buf(1753) to where", "Insert SimpleName: appendConjunction(1963) into MethodInvocation(1965) at 0", "Insert SimpleName: where(1964) into MethodInvocation(1965) at 1", "Update SimpleName: buf(1786) to where", "Insert SimpleName: cfPattern(1997) into VariableDeclarationFragment(1999) at 0", "Insert NullLiteral(1998) into VariableDeclarationFragment(1999) at 1", "Insert SimpleName: index(2002) into VariableDeclarationFragment(2007) at 0", "Insert MethodInvocation(2006) into VariableDeclarationFragment(2007) at 1", "Insert SimpleName: index(2009) into InfixExpression: <=(2011) at 0", "Insert NumberLiteral: 0(2010) into InfixExpression: <=(2011) at 1", "Insert ExpressionStatement(2015) into Block(2016) at 0", "Insert ExpressionStatement(2024) into Block(2043) at 0", "Insert IfStatement(2042) into Block(2043) at 1", "Insert ExpressionStatement(2057) into Block(2069) at 0", "Insert InfixExpression: !=(2073) into InfixExpression: &&(2079) at 0", "Insert InfixExpression: >(2078) into InfixExpression: &&(2079) at 1", "Insert ExpressionStatement(2083) into Block(2095) at 0", "Insert SimpleName: appendConjunction(2102) into MethodInvocation(2104) at 0", "Insert SimpleName: where(2103) into MethodInvocation(2104) at 1", "Update SimpleName: buf(1848) to where", "Insert SimpleName: TENANT_ID(2497) into InfixExpression: +(2546) at 3", "Update StringLiteral: \"null \"(2246) to \" \"", "Update SimpleName: TABLE_CAT_NAME(2247) to TABLE_CAT", "Update SimpleName: TABLE_SCHEM_NAME(2249) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(2253) to TABLE_NAME", "Update SimpleName: TABLE_NAME_NAME(2257) to TABLE_NAME", "Update SimpleName: TABLE_CAT_NAME(2266) to COLUMN_FAMILY", "Insert StringLiteral: \",\\n\"(2537) into InfixExpression: +(2546) at 40", "Insert SimpleName: COLUMN_FAMILY(2538) into InfixExpression: +(2546) at 41", "Insert StringLiteral: \",\\n\"(2539) into InfixExpression: +(2546) at 42", "Insert SimpleName: COLUMN_SIZE(2540) into InfixExpression: +(2546) at 43", "Insert StringLiteral: \",\\n\"(2541) into InfixExpression: +(2546) at 44", "Insert SimpleName: ARRAY_SIZE(2542) into InfixExpression: +(2546) at 45", "Update SimpleName: TYPE_SCHEMA_AND_TABLE(2286) to SYSTEM_CATALOG", "Update SimpleName: SchemaUtil(2329) to escapePattern", "Insert SimpleName: StringBuilder(2925) into SimpleType: StringBuilder(2926) at 0", "Update StringLiteral: \"*/\"(2688) to \"*/\\n\"", "Insert SimpleName: TENANT_ID(2930) into InfixExpression: +(2967) at 3", "Insert StringLiteral: \" \"(2931) into InfixExpression: +(2967) at 4", "Update SimpleName: TABLE_CAT_NAME(2689) to TABLE_CAT", "Update SimpleName: TABLE_SCHEM_NAME(2691) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(2693) to TABLE_NAME", "Update SimpleName: TYPE_SCHEMA_AND_TABLE(2720) to SYSTEM_CATALOG", "Update SimpleName: TYPE_SCHEMA_AND_TABLE_ALIAS(2722) to SYSTEM_CATALOG_ALIAS", "Update SimpleName: SchemaUtil(2765) to escapePattern", "Update StringLiteral: \"*/ distinct \"(3307) to \"*/\\n distinct \"", "Insert SimpleName: TENANT_ID(3540) into InfixExpression: +(3552) at 3", "Update StringLiteral: \"null \"(3308) to \" \"", "Update SimpleName: TABLE_CATALOG_NAME(3309) to TABLE_CATALOG", "Update SimpleName: TABLE_SCHEM_NAME(3311) to TABLE_SCHEM", "Update SimpleName: TYPE_SCHEMA_AND_TABLE(3313) to SYSTEM_CATALOG", "Update SimpleName: TYPE_SCHEMA_AND_TABLE_ALIAS(3315) to SYSTEM_CATALOG_ALIAS", "Update StringLiteral: \"*/\"(3431) to \"*/\\n\"", "Update SimpleName: TABLE_CAT_NAME(3432) to TENANT_ID", "Update StringLiteral: \",\"(3433) to \" \"", "Update SimpleName: TABLE_SCHEM_NAME(3434) to TABLE_CAT", "Update SimpleName: TABLE_NAME_NAME(3436) to TABLE_SCHEM", "Update StringLiteral: \" ,\"(3437) to \",\"", "Update SimpleName: TABLE_TYPE_NAME(3440) to TABLE_NAME", "Update SimpleName: REMARKS_NAME(3444) to COLUMN_FAMILY", "Update StringLiteral: \" ,\"(3445) to \" \"", "Update SimpleName: TYPE_NAME(3446) to SUPERTABLE_NAME", "Update SimpleName: TYPE_SCHEMA_AND_TABLE(3472) to SYSTEM_CATALOG", "Update SimpleName: TYPE_SCHEMA_AND_TABLE_ALIAS(3474) to SYSTEM_CATALOG_ALIAS", "Update SimpleName: TABLE_CAT_NAME(3479) to LINK_TYPE", "Update StringLiteral: \" is null\"(3480) to \" = \"", "Insert MethodInvocation(3671) into InfixExpression: +(3672) at 24", "Update StringLiteral: \"*/\"(3927) to \"*/\\n\"", "Insert SimpleName: TENANT_ID(4042) into InfixExpression: +(4093) at 3", "Insert StringLiteral: \" \"(4043) into InfixExpression: +(4093) at 4", "Update SimpleName: TABLE_CAT_NAME(3928) to TABLE_CAT", "Update SimpleName: TABLE_SCHEM_NAME(3930) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(3932) to TABLE_NAME", "Update SimpleName: TABLE_TYPE_NAME(3936) to TABLE_TYPE", "Update SimpleName: TABLE_TYPE_NAME(3938) to TABLE_TYPE", "Update SimpleName: REMARKS_NAME(3940) to REMARKS", "Update SimpleName: SELF_REFERENCING_COL_NAME_NAME(3944) to SELF_REFERENCING_COL_NAME", "Update SimpleName: REF_GENERATION_NAME(3946) to REF_GENERATION", "Update SimpleName: TYPE_SCHEMA_AND_TABLE(3968) to SYSTEM_CATALOG", "Update SimpleName: TYPE_SCHEMA_AND_TABLE_ALIAS(3970) to SYSTEM_CATALOG_ALIAS", "Update SimpleName: TABLE_CAT_NAME(3975) to COLUMN_FAMILY", "Insert SimpleName: buf(4152) into MethodInvocation(4158) at 0", "Insert SimpleName: append(4153) into MethodInvocation(4158) at 1", "Insert InfixExpression: +(4157) into MethodInvocation(4158) at 2", "Insert MethodInvocation(1705) into ExpressionStatement(1706) at 0", "Insert MethodInvocation(1722) into ExpressionStatement(1723) at 0", "Insert SimpleName: appendConjunction(1732) into MethodInvocation(1734) at 0", "Insert SimpleName: buf(1733) into MethodInvocation(1734) at 1", "Insert SimpleName: buf(1736) into MethodInvocation(1741) at 0", "Insert SimpleName: append(1737) into MethodInvocation(1741) at 1", "Insert InfixExpression: +(1740) into MethodInvocation(1741) at 2", "Insert SimpleName: appendConjunction(1744) into MethodInvocation(1746) at 0", "Insert SimpleName: buf(1745) into MethodInvocation(1746) at 1", "Insert SimpleName: buf(1748) into MethodInvocation(1756) at 0", "Insert SimpleName: append(1749) into MethodInvocation(1756) at 1", "Insert InfixExpression: +(1755) into MethodInvocation(1756) at 2", "Insert SimpleName: tenantId(1758) into InfixExpression: !=(1760) at 0", "Insert NullLiteral(1759) into InfixExpression: !=(1760) at 1", "Insert ExpressionStatement(1772) into Block(1773) at 0", "Insert SimpleName: buf(1790) into MethodInvocation(1792) at 0", "Insert SimpleName: length(1791) into MethodInvocation(1792) at 1", "Update SimpleName: TABLE_SCHEM_NAME(1756) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(1789) to TABLE_NAME", "Insert SimpleName: columnNamePattern(2003) into MethodInvocation(2006) at 0", "Insert SimpleName: indexOf(2004) into MethodInvocation(2006) at 1", "Insert CharacterLiteral: '.'(2005) into MethodInvocation(2006) at 2", "Insert Assignment: =(2014) into ExpressionStatement(2015) at 0", "Insert Assignment: =(2023) into ExpressionStatement(2024) at 0", "Insert InfixExpression: >(2031) into IfStatement(2042) at 0", "Insert Block(2041) into IfStatement(2042) at 1", "Update SimpleName: catalog(1801) to cfPattern", "Insert MethodInvocation(2056) into ExpressionStatement(2057) at 0", "Insert SimpleName: colPattern(2071) into InfixExpression: !=(2073) at 0", "Insert NullLiteral(2072) into InfixExpression: !=(2073) at 1", "Insert MethodInvocation(2076) into InfixExpression: >(2078) at 0", "Insert NumberLiteral: 0(2077) into InfixExpression: >(2078) at 1", "Insert MethodInvocation(2082) into ExpressionStatement(2083) at 0", "Move InfixExpression: ||(2746) into ConditionalExpression(2569) at 0", "Move InfixExpression: ||(2310) into ConditionalExpression(2990) at 0", "Update SimpleName: TABLE_SCHEM_NAME(3329) to TABLE_SCHEM", "Insert QualifiedName: LinkType.PHYSICAL_TABLE(3669) into MethodInvocation(3671) at 0", "Insert SimpleName: getSerializedValue(3670) into MethodInvocation(3671) at 1", "Update SimpleName: TABLE_SCHEM_NAME(3499) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(3526) to TABLE_NAME", "Update SimpleName: TABLE_SCHEM_NAME(3995) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(4022) to TABLE_NAME", "Insert StringLiteral: \" and \"(4154) into InfixExpression: +(4157) at 0", "Insert SimpleName: TABLE_TYPE(4155) into InfixExpression: +(4157) at 1", "Insert StringLiteral: \" IN (\"(4156) into InfixExpression: +(4157) at 2", "Insert SimpleName: appendConjunction(1703) into MethodInvocation(1705) at 0", "Insert SimpleName: buf(1704) into MethodInvocation(1705) at 1", "Insert SimpleName: buf(1707) into MethodInvocation(1722) at 0", "Insert SimpleName: append(1708) into MethodInvocation(1722) at 1", "Insert InfixExpression: +(1721) into MethodInvocation(1722) at 2", "Insert SimpleName: TENANT_ID(1738) into InfixExpression: +(1740) at 0", "Insert StringLiteral: \" IS NULL \"(1739) into InfixExpression: +(1740) at 1", "Insert StringLiteral: \" TENANT_ID LIKE '\"(1750) into InfixExpression: +(1755) at 0", "Insert MethodInvocation(1753) into InfixExpression: +(1755) at 1", "Insert StringLiteral: \"' \"(1754) into InfixExpression: +(1755) at 2", "Insert MethodInvocation(1771) into ExpressionStatement(1772) at 0", "Update SimpleName: SchemaUtil(1791) to escapePattern", "Insert SimpleName: colPattern(2012) into Assignment: =(2014) at 0", "Insert SimpleName: columnNamePattern(2013) into Assignment: =(2014) at 1", "Insert SimpleName: cfPattern(2017) into Assignment: =(2023) at 0", "Insert MethodInvocation(2022) into Assignment: =(2023) at 1", "Insert MethodInvocation(2027) into InfixExpression: >(2031) at 0", "Insert InfixExpression: +(2030) into InfixExpression: >(2031) at 1", "Insert ExpressionStatement(2040) into Block(2041) at 0", "Update SimpleName: catalog(1804) to cfPattern", "Insert SimpleName: appendConjunction(2054) into MethodInvocation(2056) at 0", "Insert SimpleName: where(2055) into MethodInvocation(2056) at 1", "Update SimpleName: buf(1810) to where", "Insert SimpleName: colPattern(2074) into MethodInvocation(2076) at 0", "Insert SimpleName: length(2075) into MethodInvocation(2076) at 1", "Insert SimpleName: appendConjunction(2080) into MethodInvocation(2082) at 0", "Insert SimpleName: where(2081) into MethodInvocation(2082) at 1", "Update SimpleName: buf(1834) to where", "Update SimpleName: SchemaUtil(3331) to escapePattern", "Update SimpleName: SchemaUtil(3528) to escapePattern", "Update SimpleName: SchemaUtil(4024) to escapePattern", "Update StringLiteral: \"(\"(1615) to \" (\"", "Move StringLiteral: \"(\"(1615) into InfixExpression: +(1721) at 0", "Move SimpleName: TENANT_ID(1616) into InfixExpression: +(1721) at 1", "Move StringLiteral: \" IS NULL \"(1617) into InfixExpression: +(1721) at 2", "Insert StringLiteral: \" OR \"(1712) into InfixExpression: +(1721) at 3", "Insert SimpleName: TENANT_ID(1713) into InfixExpression: +(1721) at 4", "Insert StringLiteral: \" = '\"(1714) into InfixExpression: +(1721) at 5", "Move MethodInvocation(1630) into InfixExpression: +(1721) at 6", "Insert StringLiteral: \"') \"(1720) into InfixExpression: +(1721) at 7", "Insert SimpleName: escapePattern(1751) into MethodInvocation(1753) at 0", "Insert SimpleName: tenantIdPattern(1752) into MethodInvocation(1753) at 1", "Insert SimpleName: buf(1761) into MethodInvocation(1771) at 0", "Insert SimpleName: append(1762) into MethodInvocation(1771) at 1", "Insert InfixExpression: +(1770) into MethodInvocation(1771) at 2", "Insert SimpleName: columnNamePattern(2018) into MethodInvocation(2022) at 0", "Insert SimpleName: substring(2019) into MethodInvocation(2022) at 1", "Insert NumberLiteral: 0(2020) into MethodInvocation(2022) at 2", "Insert SimpleName: index(2021) into MethodInvocation(2022) at 3", "Insert SimpleName: columnNamePattern(2025) into MethodInvocation(2027) at 0", "Insert SimpleName: length(2026) into MethodInvocation(2027) at 1", "Insert SimpleName: index(2028) into InfixExpression: +(2030) at 0", "Insert NumberLiteral: 1(2029) into InfixExpression: +(2030) at 1", "Insert Assignment: =(2039) into ExpressionStatement(2040) at 0", "Update SimpleName: TABLE_CAT_NAME(1813) to COLUMN_FAMILY", "Update SimpleName: SchemaUtil(2313) to escapePattern", "Update SimpleName: SchemaUtil(2749) to escapePattern", "Update SimpleName: escapeSql(1626) to escapePattern", "Update StringLiteral: \" OR \"(1622) to \" and TENANT_ID + = '\"", "Move StringLiteral: \" OR \"(1622) into InfixExpression: +(1770) at 0", "Insert MethodInvocation(1768) into InfixExpression: +(1770) at 1", "Update StringLiteral: \"') \"(1631) to \"' \"", "Move StringLiteral: \"') \"(1631) into InfixExpression: +(1770) at 2", "Insert SimpleName: colPattern(2032) into Assignment: =(2039) at 0", "Insert MethodInvocation(2038) into Assignment: =(2039) at 1", "Update SimpleName: SchemaUtil(1815) to escapePattern", "Update SimpleName: catalog(1817) to cfPattern", "Update SimpleName: SchemaUtil(1839) to escapePattern", "Update SimpleName: columnNamePattern(1841) to colPattern", "Insert SimpleName: escapePattern(1764) into MethodInvocation(1768) at 0", "Insert MethodInvocation(1767) into MethodInvocation(1768) at 1", "Update SimpleName: SchemaUtil(1764) to escapePattern", "Insert SimpleName: columnNamePattern(2033) into MethodInvocation(2038) at 0", "Insert SimpleName: substring(2034) into MethodInvocation(2038) at 1", "Insert InfixExpression: +(2037) into MethodInvocation(2038) at 2", "Update SimpleName: SchemaUtil(3507) to escapePattern", "Update SimpleName: SchemaUtil(4003) to escapePattern", "Insert SimpleName: tenantId(1765) into MethodInvocation(1767) at 0", "Insert SimpleName: getString(1766) into MethodInvocation(1767) at 1", "Insert SimpleName: index(2035) into InfixExpression: +(2037) at 0", "Insert NumberLiteral: 1(2036) into InfixExpression: +(2037) at 1", "Delete Modifier: public(335)", "Delete Modifier: static(336)", "Delete Modifier: final(337)", "Delete SimpleName: TYPE_SCHEMA_ALIAS(340)", "Delete StringLiteral: \"SYSTEM\"(341)", "Delete VariableDeclarationFragment(342)", "Delete FieldDeclaration(343)", "Delete Modifier: public(344)", "Delete Modifier: static(345)", "Delete Modifier: final(346)", "Delete SimpleName: TYPE_TABLE_ALIAS(349)", "Delete StringLiteral: \"TABLE\"(350)", "Delete VariableDeclarationFragment(351)", "Delete FieldDeclaration(352)", "Delete SimpleName: TYPE_SCHEMA_AND_TABLE_ALIAS(358)", "Delete StringLiteral: \"\\\"\"(359)", "Delete SimpleName: TYPE_SCHEMA_ALIAS(360)", "Delete StringLiteral: \".\"(361)", "Delete SimpleName: TYPE_TABLE_ALIAS(362)", "Delete StringLiteral: \"\\\"\"(363)", "Delete InfixExpression: +(364)", "Delete Modifier: public(452)", "Delete Modifier: static(453)", "Delete Modifier: final(454)", "Delete SimpleName: TYPE_NAME_NAME(457)", "Delete StringLiteral: \"TYPE_NAME\"(458)", "Delete VariableDeclarationFragment(459)", "Delete FieldDeclaration(460)", "Delete SimpleName: StringEscapeUtils(1625)", "Delete SimpleName: tenantId(1618)", "Delete NullLiteral(1619)", "Delete InfixExpression: ==(1620)", "Delete StringLiteral: \") \"(1621)", "Delete SimpleName: TENANT_ID(1623)", "Delete StringLiteral: \" = '\"(1624)", "Delete InfixExpression: +(1632)", "Delete ConditionalExpression(1633)", "Delete ParenthesizedExpression(1634)", "Delete InfixExpression: +(1635)", "Delete ReturnStatement(1636)", "Delete MethodInvocation(1747)", "Delete StringLiteral: \" and \"(1755)", "Delete SimpleName: normalizeIdentifier(1765)", "Delete StringLiteral: \" and \"(1788)", "Delete SimpleName: normalizeIdentifier(1792)", "Delete StringLiteral: \" and \"(1812)", "Delete SimpleName: normalizeIdentifier(1816)", "Delete StringLiteral: \" and \"(1836)", "Delete SimpleName: normalizeIdentifier(1840)", "Delete StringLiteral: \" and \"(1850)", "Delete IfStatement(1857)", "Delete SimpleName: catalog(2220)", "Delete NullLiteral(2221)", "Delete InfixExpression: !=(2222)", "Delete SimpleName: catalog(2223)", "Delete SimpleName: length(2224)", "Delete MethodInvocation(2225)", "Delete NumberLiteral: 0(2226)", "Delete InfixExpression: >(2227)", "Delete InfixExpression: &&(2228)", "Delete SimpleName: emptyResultSet(2229)", "Delete ReturnStatement(2230)", "Delete Block(2231)", "Delete IfStatement(2232)", "Delete SimpleName: buf(2292)", "Delete SimpleName: append(2293)", "Delete SimpleName: getTenantIdWhereClause(2294)", "Delete MethodInvocation(2295)", "Delete MethodInvocation(2296)", "Delete ExpressionStatement(2297)", "Delete StringLiteral: \"\\nand \"(2300)", "Delete SimpleName: normalizeIdentifier(2314)", "Delete SimpleName: normalizeIdentifier(2330)", "Delete SimpleName: catalog(2643)", "Delete NullLiteral(2644)", "Delete InfixExpression: !=(2645)", "Delete SimpleName: catalog(2646)", "Delete SimpleName: length(2647)", "Delete MethodInvocation(2648)", "Delete NumberLiteral: 0(2649)", "Delete InfixExpression: >(2650)", "Delete InfixExpression: &&(2651)", "Delete SimpleName: emptyResultSet(2652)", "Delete ReturnStatement(2653)", "Delete Block(2654)", "Delete IfStatement(2655)", "Delete VariableDeclarationStatement(2727)", "Delete SimpleName: buf(2728)", "Delete SimpleName: append(2729)", "Delete SimpleName: getTenantIdWhereClause(2730)", "Delete MethodInvocation(2731)", "Delete MethodInvocation(2732)", "Delete ExpressionStatement(2733)", "Delete StringLiteral: \" and \"(2736)", "Delete SimpleName: normalizeIdentifier(2750)", "Delete SimpleName: normalizeIdentifier(2766)", "Delete SimpleName: catalog(3287)", "Delete NullLiteral(3288)", "Delete InfixExpression: !=(3289)", "Delete SimpleName: catalog(3290)", "Delete SimpleName: length(3291)", "Delete MethodInvocation(3292)", "Delete NumberLiteral: 0(3293)", "Delete InfixExpression: >(3294)", "Delete InfixExpression: &&(3295)", "Delete SimpleName: emptyResultSet(3296)", "Delete ReturnStatement(3297)", "Delete Block(3298)", "Delete IfStatement(3299)", "Delete SimpleName: normalizeIdentifier(3332)", "Delete SimpleName: ResultSet(3383)", "Delete SimpleType: ResultSet(3384)", "Delete SimpleName: String(3386)", "Delete SimpleType: String(3387)", "Delete SimpleName: catalog(3388)", "Delete SingleVariableDeclaration(3389)", "Delete SimpleName: String(3390)", "Delete SimpleType: String(3391)", "Delete SimpleName: schemaPattern(3392)", "Delete SingleVariableDeclaration(3393)", "Delete SimpleName: String(3394)", "Delete SimpleType: String(3395)", "Delete SimpleName: tableNamePattern(3396)", "Delete SingleVariableDeclaration(3397)", "Delete SimpleName: String(3398)", "Delete SimpleType: String(3399)", "Delete SimpleName: typeNamePattern(3400)", "Delete SingleVariableDeclaration(3401)", "Delete SimpleName: catalog(3404)", "Delete NullLiteral(3405)", "Delete InfixExpression: !=(3406)", "Delete SimpleName: catalog(3407)", "Delete SimpleName: length(3408)", "Delete MethodInvocation(3409)", "Delete NumberLiteral: 0(3410)", "Delete InfixExpression: >(3411)", "Delete InfixExpression: &&(3412)", "Delete SimpleName: connection(3413)", "Delete SimpleName: getTenantId(3414)", "Delete MethodInvocation(3415)", "Delete NullLiteral(3416)", "Delete InfixExpression: !=(3417)", "Delete ParenthesizedExpression(3418)", "Delete InfixExpression: ||(3419)", "Delete SimpleName: emptyResultSet(3420)", "Delete ReturnStatement(3421)", "Delete Block(3422)", "Delete IfStatement(3423)", "Delete QualifiedName: SQLTableTypeFunction.NAME(3438)", "Delete StringLiteral: \"(\"(3439)", "Delete StringLiteral: \") AS \"(3441)", "Delete SimpleName: TABLE_TYPE_NAME(3442)", "Delete StringLiteral: \",\"(3447)", "Delete SimpleName: SELF_REFERENCING_COL_NAME_NAME(3448)", "Delete StringLiteral: \",\"(3449)", "Delete SimpleName: REF_GENERATION_NAME(3450)", "Delete StringLiteral: \",\"(3451)", "Delete QualifiedName: IndexStateNameFunction.NAME(3452)", "Delete StringLiteral: \"(\"(3453)", "Delete SimpleName: INDEX_STATE(3454)", "Delete StringLiteral: \") AS \"(3455)", "Delete SimpleName: INDEX_STATE(3456)", "Delete StringLiteral: \",\"(3457)", "Delete SimpleName: IMMUTABLE_ROWS(3458)", "Delete StringLiteral: \",\"(3459)", "Delete SimpleName: SALT_BUCKETS(3460)", "Delete StringLiteral: \",\"(3461)", "Delete SimpleName: TENANT_ID(3462)", "Delete StringLiteral: \",\"(3463)", "Delete SimpleName: VIEW_STATEMENT(3464)", "Delete StringLiteral: \",\"(3465)", "Delete QualifiedName: SQLViewTypeFunction.NAME(3466)", "Delete StringLiteral: \"(\"(3467)", "Delete SimpleName: VIEW_TYPE(3468)", "Delete StringLiteral: \") AS \"(3469)", "Delete SimpleName: VIEW_TYPE(3470)", "Delete StringLiteral: \" and \"(3487)", "Delete SimpleName: TENANT_ID(3488)", "Delete StringLiteral: \" IS NOT NULL \"(3489)", "Delete InfixExpression: +(3490)", "Delete SimpleName: normalizeIdentifier(3508)", "Delete SimpleName: normalizeIdentifier(3529)", "Delete SimpleName: typeNamePattern(3538)", "Delete NullLiteral(3539)", "Delete InfixExpression: !=(3540)", "Delete SimpleName: buf(3541)", "Delete SimpleName: append(3542)", "Delete StringLiteral: \" and \"(3543)", "Delete QualifiedName: SQLTableTypeFunction.NAME(3544)", "Delete StringLiteral: \"(\"(3545)", "Delete SimpleName: TABLE_TYPE_NAME(3546)", "Delete StringLiteral: \") like '\"(3547)", "Delete SimpleName: SchemaUtil(3548)", "Delete SimpleName: normalizeIdentifier(3549)", "Delete SimpleName: typeNamePattern(3550)", "Delete MethodInvocation(3551)", "Delete StringLiteral: \"'\"(3552)", "Delete InfixExpression: +(3553)", "Delete MethodInvocation(3554)", "Delete ExpressionStatement(3555)", "Delete Block(3556)", "Delete IfStatement(3557)", "Delete StringLiteral: \".\"(3564)", "Delete SimpleName: TABLE_TYPE_NAME(3565)", "Delete TextElement: Use/abuse this to get the derived tables ordered by TENANT_ID, TABLE_TYPE, SCHEMA_NAME, TABLE_NAME(3590)", "Delete TagElement(3591)", "Delete Javadoc(3592)", "Delete Modifier: public(3595)", "Delete SimpleName: getSuperTables(3598)", "Delete SimpleName: SQLException(3611)", "Delete SimpleType: SQLException(3612)", "Delete SimpleName: getSuperTables(3613)", "Delete SimpleName: catalog(3614)", "Delete SimpleName: schemaPattern(3615)", "Delete SimpleName: tableNamePattern(3616)", "Delete NullLiteral(3617)", "Delete MethodInvocation(3618)", "Delete ReturnStatement(3619)", "Delete Block(3620)", "Delete MethodDeclaration(3621)", "Delete SimpleName: getSuperTables(3642)", "Delete SimpleName: catalog(3643)", "Delete SimpleName: schemaPattern(3644)", "Delete NullLiteral(3645)", "Delete SimpleName: typeNamePattern(3646)", "Delete MethodInvocation(3647)", "Delete ReturnStatement(3648)", "Delete Block(3649)", "Delete SimpleName: catalog(3907)", "Delete NullLiteral(3908)", "Delete InfixExpression: !=(3909)", "Delete SimpleName: catalog(3910)", "Delete SimpleName: length(3911)", "Delete MethodInvocation(3912)", "Delete NumberLiteral: 0(3913)", "Delete InfixExpression: >(3914)", "Delete InfixExpression: &&(3915)", "Delete SimpleName: emptyResultSet(3916)", "Delete ReturnStatement(3917)", "Delete Block(3918)", "Delete IfStatement(3919)", "Delete StringLiteral: \" and \"(3983)", "Delete SimpleName: getTenantIdWhereClause(3984)", "Delete MethodInvocation(3985)", "Delete InfixExpression: +(3986)", "Delete SimpleName: normalizeIdentifier(4004)", "Delete SimpleName: normalizeIdentifier(4025)", "Delete SimpleName: types(4049)", "Delete NumberLiteral: 0(4050)", "Delete ArrayAccess(4051)", "Delete SimpleName: length(4052)", "Delete MethodInvocation(4053)", "Delete NumberLiteral: 1(4054)", "Delete InfixExpression: ==(4055)", "Delete SimpleName: type(4058)", "Delete SingleVariableDeclaration(4059)", "Delete SimpleName: types(4060)", "Delete SimpleName: buf(4061)", "Delete SimpleName: append(4062)", "Delete CharacterLiteral: '\\''(4063)", "Delete MethodInvocation(4064)", "Delete ExpressionStatement(4065)", "Delete SimpleName: buf(4066)", "Delete SimpleName: append(4067)", "Delete SimpleName: type(4068)", "Delete MethodInvocation(4069)", "Delete ExpressionStatement(4070)", "Delete SimpleName: buf(4071)", "Delete SimpleName: append(4072)", "Delete CharacterLiteral: '\\''(4073)", "Delete MethodInvocation(4074)", "Delete ExpressionStatement(4075)", "Delete SimpleName: buf(4076)", "Delete SimpleName: append(4077)", "Delete CharacterLiteral: ','(4078)", "Delete MethodInvocation(4079)", "Delete ExpressionStatement(4080)", "Delete Block(4081)", "Delete EnhancedForStatement(4082)", "Delete Block(4083)", "Delete SimpleName: buf(4041)", "Delete SimpleName: append(4042)", "Delete StringLiteral: \" and \"(4043)", "Delete SimpleName: TABLE_TYPE_NAME(4044)", "Delete StringLiteral: \" IN (\"(4045)", "Delete InfixExpression: +(4046)", "Delete MethodInvocation(4047)", "Delete ExpressionStatement(4048)", "Delete Block(4128)", "Delete IfStatement(4129)"]}}, {"CreateTableStatement_cluster": {"actions": [{"root": "UPDATE from PhoenixDatabaseMetaData.TYPE_SCHEMA to PhoenixDatabaseMetaData.SYSTEM_CATALOG_SCHEMA", "operations": ["UPD QualifiedName: PhoenixDatabaseMetaData.TYPE_SCHEMA from PhoenixDatabaseMetaData.TYPE_SCHEMA to PhoenixDatabaseMetaData.SYSTEM_CATALOG_SCHEMA"]}]}}, {"CreateTableStatement_diff": {"operations": ["Update QualifiedName: PhoenixDatabaseMetaData.TYPE_SCHEMA(193) to PhoenixDatabaseMetaData.SYSTEM_CATALOG_SCHEMA"]}}, {"ConnectionQueryServicesImpl_cluster": {"actions": [{"root": "UPDATE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SYSTEM_CATALOG_BYTES", "operations": ["UPD QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SYSTEM_CATALOG_BYTES"]}, {"root": "UPDATE from PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES to PhoenixDatabaseMetaData.SYSTEM_CATALOG_BYTES", "operations": ["UPD QualifiedName: PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES from PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES to PhoenixDatabaseMetaData.SYSTEM_CATALOG_BYTES", "UPD QualifiedName: PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES from PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES to PhoenixDatabaseMetaData.SYSTEM_CATALOG_BYTES", "UPD QualifiedName: PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES from PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES to PhoenixDatabaseMetaData.SYSTEM_CATALOG_BYTES", "UPD QualifiedName: PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES from PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES to PhoenixDatabaseMetaData.SYSTEM_CATALOG_BYTES", "UPD QualifiedName: PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES from PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES to PhoenixDatabaseMetaData.SYSTEM_CATALOG_BYTES"]}, {"root": "UPDATE from TYPE_TABLE_NAME_BYTES to SYSTEM_CATALOG_BYTES", "operations": ["UPD SimpleName: TYPE_TABLE_NAME_BYTES from TYPE_TABLE_NAME_BYTES to SYSTEM_CATALOG_BYTES"]}, {"root": "UPDATE from PhoenixDatabaseMetaData.TYPE_SCHEMA_AND_TABLE to PhoenixDatabaseMetaData.SYSTEM_CATALOG", "operations": ["UPD QualifiedName: PhoenixDatabaseMetaData.TYPE_SCHEMA_AND_TABLE from PhoenixDatabaseMetaData.TYPE_SCHEMA_AND_TABLE to PhoenixDatabaseMetaData.SYSTEM_CATALOG"]}]}}, {"ConnectionQueryServicesImpl_diff": {"operations": ["Update QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES(2) to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SYSTEM_CATALOG_BYTES", "Update QualifiedName: PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES(3035) to PhoenixDatabaseMetaData.SYSTEM_CATALOG_BYTES", "Update SimpleName: TYPE_TABLE_NAME_BYTES(2927) to SYSTEM_CATALOG_BYTES", "Update QualifiedName: PhoenixDatabaseMetaData.TYPE_SCHEMA_AND_TABLE(5487) to PhoenixDatabaseMetaData.SYSTEM_CATALOG", "Update QualifiedName: PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES(5730) to PhoenixDatabaseMetaData.SYSTEM_CATALOG_BYTES", "Update QualifiedName: PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES(3326) to PhoenixDatabaseMetaData.SYSTEM_CATALOG_BYTES", "Update QualifiedName: PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES(3276) to PhoenixDatabaseMetaData.SYSTEM_CATALOG_BYTES", "Update QualifiedName: PhoenixDatabaseMetaData.TYPE_TABLE_NAME_BYTES(3281) to PhoenixDatabaseMetaData.SYSTEM_CATALOG_BYTES"]}}, {"QueryConstants_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 46", "MOV ImportDeclaration to CompilationUnit at 33", "MOV ImportDeclaration to CompilationUnit at 44", "MOV ImportDeclaration to CompilationUnit at 45", "MOV ImportDeclaration to CompilationUnit at 28", "MOV ImportDeclaration to CompilationUnit at 7"]}, {"root": "UPDATE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.REF_GENERATION_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.COLUMN_FAMILY", "operations": ["UPD QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.REF_GENERATION_NAME from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.REF_GENERATION_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.COLUMN_FAMILY"]}, {"root": "UPDATE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.REMARKS_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.REF_GENERATION", "operations": ["UPD QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.REMARKS_NAME from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.REMARKS_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.REF_GENERATION"]}, {"root": "UPDATE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SELF_REFERENCING_COL_NAME_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.REMARKS", "operations": ["UPD QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SELF_REFERENCING_COL_NAME_NAME from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SELF_REFERENCING_COL_NAME_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.REMARKS"]}, {"root": "UPDATE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_CAT_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SELF_REFERENCING_COL_NAME", "operations": ["UPD QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_CAT_NAME from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_CAT_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SELF_REFERENCING_COL_NAME"]}, {"root": "UPDATE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_NAME_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SYSTEM_CATALOG_SCHEMA", "operations": ["UPD QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_NAME_NAME from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_NAME_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SYSTEM_CATALOG_SCHEMA"]}, {"root": "UPDATE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_SCHEM_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SYSTEM_CATALOG_TABLE", "operations": ["UPD QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_SCHEM_NAME from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_SCHEM_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SYSTEM_CATALOG_TABLE"]}, {"root": "UPDATE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_TYPE_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_NAME", "operations": ["UPD QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_TYPE_NAME from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_TYPE_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_NAME"]}, {"root": "UPDATE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_SCHEMA to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_SCHEM", "operations": ["UPD QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_SCHEMA from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_SCHEMA to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_SCHEM"]}, {"root": "UPDATE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_TABLE to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_TYPE", "operations": ["UPD QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_TABLE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_TABLE to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_TYPE"]}, {"root": "UPDATE from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "operations": ["UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA"]}, {"root": "UPDATE from TYPE_TABLE to SYSTEM_CATALOG_TABLE", "operations": ["UPD SimpleName: TYPE_TABLE from TYPE_TABLE to SYSTEM_CATALOG_TABLE"]}, {"root": "UPDATE from TABLE_SCHEM_NAME to TABLE_SCHEM", "operations": ["UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM"]}, {"root": "UPDATE from TABLE_NAME_NAME to TABLE_NAME", "operations": ["UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME"]}, {"root": "UPDATE from TABLE_CAT_NAME to COLUMN_FAMILY", "operations": ["UPD SimpleName: TABLE_CAT_NAME from TABLE_CAT_NAME to COLUMN_FAMILY", "UPD SimpleName: TABLE_CAT_NAME from TABLE_CAT_NAME to COLUMN_FAMILY"]}, {"root": "UPDATE from TABLE_TYPE_NAME to TABLE_TYPE", "operations": ["UPD SimpleName: TABLE_TYPE_NAME from TABLE_TYPE_NAME to TABLE_TYPE"]}, {"root": "UPDATE from REMARKS_NAME to REMARKS", "operations": ["UPD SimpleName: REMARKS_NAME from REMARKS_NAME to REMARKS"]}, {"root": "UPDATE from SELF_REFERENCING_COL_NAME_NAME to SELF_REFERENCING_COL_NAME", "operations": ["UPD SimpleName: SELF_REFERENCING_COL_NAME_NAME from SELF_REFERENCING_COL_NAME_NAME to SELF_REFERENCING_COL_NAME"]}, {"root": "UPDATE from REF_GENERATION_NAME to REF_GENERATION", "operations": ["UPD SimpleName: REF_GENERATION_NAME from REF_GENERATION_NAME to REF_GENERATION"]}]}}, {"QueryConstants_diff": {"operations": ["Move ImportDeclaration(53) into CompilationUnit(695) at 7", "Move ImportDeclaration(65) into CompilationUnit(695) at 28", "Move ImportDeclaration(81) into CompilationUnit(695) at 33", "Move ImportDeclaration(87) into CompilationUnit(695) at 45", "Move ImportDeclaration(95) into CompilationUnit(695) at 44", "Move ImportDeclaration(99) into CompilationUnit(695) at 46", "Update QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.REF_GENERATION_NAME(52) to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.COLUMN_FAMILY", "Update QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.REMARKS_NAME(54) to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.REF_GENERATION", "Update QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SELF_REFERENCING_COL_NAME_NAME(64) to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.REMARKS", "Update QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_CAT_NAME(80) to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SELF_REFERENCING_COL_NAME", "Update QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_NAME_NAME(82) to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SYSTEM_CATALOG_SCHEMA", "Update QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_SCHEM_NAME(84) to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SYSTEM_CATALOG_TABLE", "Update QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_TYPE_NAME(88) to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_NAME", "Update QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_SCHEMA(94) to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_SCHEM", "Update QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_TABLE(98) to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_TYPE", "Update SimpleName: TYPE_SCHEMA(533) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TYPE_TABLE(535) to SYSTEM_CATALOG_TABLE", "Update SimpleName: TABLE_SCHEM_NAME(539) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(541) to TABLE_NAME", "Update SimpleName: TABLE_CAT_NAME(545) to COLUMN_FAMILY", "Update SimpleName: TABLE_TYPE_NAME(547) to TABLE_TYPE", "Update SimpleName: REMARKS_NAME(549) to REMARKS", "Update SimpleName: SELF_REFERENCING_COL_NAME_NAME(557) to SELF_REFERENCING_COL_NAME", "Update SimpleName: REF_GENERATION_NAME(559) to REF_GENERATION", "Update SimpleName: TABLE_SCHEM_NAME(630) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(632) to TABLE_NAME", "Update SimpleName: TABLE_CAT_NAME(636) to COLUMN_FAMILY", "Update SimpleName: TYPE_SCHEMA(660) to SYSTEM_CATALOG_SCHEMA"]}}, {"MetaDataClient_cluster": {"actions": [{"root": "UPDATE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_CAT_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.COLUMN_FAMILY", "operations": ["UPD QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_CAT_NAME from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_CAT_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.COLUMN_FAMILY"]}, {"root": "UPDATE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_NAME_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_NAME", "operations": ["UPD QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_NAME_NAME from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_NAME_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_NAME"]}, {"root": "UPDATE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_SCHEM_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_SCHEM", "operations": ["UPD QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_SCHEM_NAME from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_SCHEM_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_SCHEM"]}, {"root": "UPDATE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_TYPE_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_TYPE", "operations": ["UPD QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_TYPE_NAME from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_TYPE_NAME to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_TYPE"]}, {"root": "UPDATE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_SCHEMA to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SYSTEM_CATALOG_SCHEMA", "operations": ["UPD QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_SCHEMA from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_SCHEMA to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SYSTEM_CATALOG_SCHEMA"]}, {"root": "UPDATE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_TABLE to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SYSTEM_CATALOG_TABLE", "operations": ["UPD QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_TABLE from org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_TABLE to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SYSTEM_CATALOG_TABLE"]}, {"root": "UPDATE from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "operations": ["UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA", "UPD SimpleName: TYPE_SCHEMA from TYPE_SCHEMA to SYSTEM_CATALOG_SCHEMA"]}, {"root": "UPDATE from TYPE_TABLE to SYSTEM_CATALOG_TABLE", "operations": ["UPD SimpleName: TYPE_TABLE from TYPE_TABLE to SYSTEM_CATALOG_TABLE", "UPD SimpleName: TYPE_TABLE from TYPE_TABLE to SYSTEM_CATALOG_TABLE", "UPD SimpleName: TYPE_TABLE from TYPE_TABLE to SYSTEM_CATALOG_TABLE", "UPD SimpleName: TYPE_TABLE from TYPE_TABLE to SYSTEM_CATALOG_TABLE", "UPD SimpleName: TYPE_TABLE from TYPE_TABLE to SYSTEM_CATALOG_TABLE", "UPD SimpleName: TYPE_TABLE from TYPE_TABLE to SYSTEM_CATALOG_TABLE", "UPD SimpleName: TYPE_TABLE from TYPE_TABLE to SYSTEM_CATALOG_TABLE", "UPD SimpleName: TYPE_TABLE from TYPE_TABLE to SYSTEM_CATALOG_TABLE", "UPD SimpleName: TYPE_TABLE from TYPE_TABLE to SYSTEM_CATALOG_TABLE", "UPD SimpleName: TYPE_TABLE from TYPE_TABLE to SYSTEM_CATALOG_TABLE", "UPD SimpleName: TYPE_TABLE from TYPE_TABLE to SYSTEM_CATALOG_TABLE"]}, {"root": "UPDATE from TABLE_SCHEM_NAME to TABLE_SCHEM", "operations": ["UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM", "UPD SimpleName: TABLE_SCHEM_NAME from TABLE_SCHEM_NAME to TABLE_SCHEM"]}, {"root": "UPDATE from TABLE_NAME_NAME to TABLE_NAME", "operations": ["UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME", "UPD SimpleName: TABLE_NAME_NAME from TABLE_NAME_NAME to TABLE_NAME"]}, {"root": "UPDATE from TABLE_TYPE_NAME to TABLE_TYPE", "operations": ["UPD SimpleName: TABLE_TYPE_NAME from TABLE_TYPE_NAME to TABLE_TYPE", "UPD SimpleName: TABLE_TYPE_NAME from TABLE_TYPE_NAME to TABLE_TYPE"]}, {"root": "UPDATE from TABLE_CAT_NAME to COLUMN_FAMILY", "operations": ["UPD SimpleName: TABLE_CAT_NAME from TABLE_CAT_NAME to COLUMN_FAMILY", "UPD SimpleName: TABLE_CAT_NAME from TABLE_CAT_NAME to COLUMN_FAMILY", "UPD SimpleName: TABLE_CAT_NAME from TABLE_CAT_NAME to COLUMN_FAMILY", "UPD SimpleName: TABLE_CAT_NAME from TABLE_CAT_NAME to COLUMN_FAMILY"]}]}}, {"MetaDataClient_diff": {"operations": ["Update QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_CAT_NAME(46) to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.COLUMN_FAMILY", "Update QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_NAME_NAME(48) to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_NAME", "Update QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_SCHEM_NAME(50) to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_SCHEM", "Update QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_TYPE_NAME(54) to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_TYPE", "Update QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_SCHEMA(58) to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SYSTEM_CATALOG_SCHEMA", "Update QualifiedName: org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TYPE_TABLE(60) to org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.SYSTEM_CATALOG_TABLE", "Update SimpleName: TYPE_SCHEMA(262) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TYPE_TABLE(264) to SYSTEM_CATALOG_TABLE", "Update SimpleName: TABLE_SCHEM_NAME(268) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(270) to TABLE_NAME", "Update SimpleName: TABLE_TYPE_NAME(272) to TABLE_TYPE", "Update SimpleName: TYPE_SCHEMA(310) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TYPE_TABLE(312) to SYSTEM_CATALOG_TABLE", "Update SimpleName: TABLE_SCHEM_NAME(316) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(318) to TABLE_NAME", "Update SimpleName: TABLE_CAT_NAME(320) to COLUMN_FAMILY", "Update SimpleName: TYPE_SCHEMA(334) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TYPE_TABLE(336) to SYSTEM_CATALOG_TABLE", "Update SimpleName: TABLE_SCHEM_NAME(340) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(342) to TABLE_NAME", "Update SimpleName: TYPE_SCHEMA(356) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TYPE_TABLE(358) to SYSTEM_CATALOG_TABLE", "Update SimpleName: TABLE_SCHEM_NAME(362) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(364) to TABLE_NAME", "Update SimpleName: TABLE_TYPE_NAME(366) to TABLE_TYPE", "Update SimpleName: TYPE_SCHEMA(382) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TYPE_TABLE(384) to SYSTEM_CATALOG_TABLE", "Update SimpleName: TABLE_SCHEM_NAME(388) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(390) to TABLE_NAME", "Update SimpleName: TYPE_SCHEMA(404) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TYPE_TABLE(406) to SYSTEM_CATALOG_TABLE", "Update SimpleName: TABLE_SCHEM_NAME(410) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(412) to TABLE_NAME", "Update SimpleName: TYPE_SCHEMA(426) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TYPE_TABLE(428) to SYSTEM_CATALOG_TABLE", "Update SimpleName: TABLE_SCHEM_NAME(432) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(434) to TABLE_NAME", "Update SimpleName: TYPE_SCHEMA(448) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TYPE_TABLE(450) to SYSTEM_CATALOG_TABLE", "Update SimpleName: TABLE_SCHEM_NAME(454) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(456) to TABLE_NAME", "Update SimpleName: TYPE_SCHEMA(470) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TYPE_TABLE(472) to SYSTEM_CATALOG_TABLE", "Update SimpleName: TABLE_SCHEM_NAME(476) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(478) to TABLE_NAME", "Update SimpleName: TABLE_CAT_NAME(482) to COLUMN_FAMILY", "Update SimpleName: TYPE_SCHEMA(512) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TYPE_TABLE(514) to SYSTEM_CATALOG_TABLE", "Update SimpleName: TABLE_SCHEM_NAME(518) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(520) to TABLE_NAME", "Update SimpleName: TABLE_CAT_NAME(524) to COLUMN_FAMILY", "Update SimpleName: TYPE_SCHEMA(649) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TABLE_SCHEM_NAME(8444) to TABLE_SCHEM", "Update SimpleName: TABLE_NAME_NAME(8446) to TABLE_NAME", "Update SimpleName: TABLE_CAT_NAME(8450) to COLUMN_FAMILY", "Update SimpleName: TYPE_SCHEMA(803) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TYPE_SCHEMA(8431) to SYSTEM_CATALOG_SCHEMA", "Update SimpleName: TYPE_TABLE(8433) to SYSTEM_CATALOG_TABLE"]}}], "commit_stats": [{"total_files": 14, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}