{"application": "google-closure-compiler", "csha": "4ef85f94b011634ab1aac61158d0074e5b44ea54", "files": [{"AstChangeProxy_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.google.javascript.jscomp", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Preconditions.checkNotNull", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Preconditions.checkState", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.ImmutableList"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.javascript.rhino.IR"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.javascript.rhino.Node"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.javascript.rhino.Token"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.ArrayList", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL InfixExpression: ||", "DEL InfixExpression: ==", "DEL SimpleName: node", "DEL SimpleName: parent", "DEL SimpleName: node", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: replaceWith", "DEL TextElement: Removes a node from the parent's child list.", "DEL VariableDeclarationStatement", "DEL SimpleName: ArrayList", "DEL SimpleName: compiler", "DEL SimpleName: Node", "DEL Modifier: final", "DEL ParameterizedType: List<Node>", "DEL SimpleType: AbstractCompiler", "DEL SimpleName: block", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL SimpleName: listener", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: node", "DEL Javadoc", "DEL SimpleName: listeners", "DEL FieldAccess", "DEL SimpleName: List", "DEL SimpleName: node", "DEL SimpleName: parent", "DEL SimpleType: Node", "DEL Assignment: =", "DEL SimpleName: size", "DEL SingleVariableDeclaration", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL SimpleName: parent", "DEL SimpleName: listener", "DEL TagElement", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleName: get", "DEL SimpleType: Node", "DEL MethodInvocation", "DEL SimpleName: listener", "DEL NumberLiteral: 1", "DEL SimpleName: notifyOfRemoval", "DEL SimpleName: checkNotNull", "DEL SimpleName: replacements", "DEL SimpleName: parentType", "DEL Javadoc", "DEL Modifier: final", "DEL SimpleName: parent", "DEL SimpleName: AstChangeProxy", "DEL SimpleName: Node", "DEL InfixExpression: &&", "DEL TagElement: @param", "DEL SimpleName: node", "DEL TextElement: Unregisters a change listener.", "DEL SimpleName: addChildBefore", "DEL SimpleName: block", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL SimpleName: size", "DEL SimpleName: listeners", "DEL Javadoc", "DEL TextElement: Registers a change listener.", "DEL VariableDeclarationFragment", "DEL Block", "DEL VariableDeclarationStatement", "DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleName: Node", "DEL SimpleName: listeners", "DEL SimpleName: getToken", "DEL Javadoc", "DEL SimpleType: Node", "DEL FieldDeclaration", "DEL SimpleName: Node", "DEL NumberLiteral: 1", "DEL SimpleType: Node", "DEL ParameterizedType: List<ChangeListener>", "DEL EnhancedForStatement", "DEL SimpleName: Node", "DEL SimpleName: useSourceInfoIfMissingFrom", "DEL SimpleName: listener", "DEL MethodInvocation", "DEL SimpleName: removeChild", "DEL EnhancedForStatement", "DEL SimpleName: node", "DEL MethodDeclaration", "DEL SimpleName: Node", "DEL TextElement: Proxy that provides a high level interface that compiler passes can use to replace or remove", "DEL TagElement", "DEL Block", "DEL SimpleName: Node", "DEL SimpleType: Node", "DEL SimpleName: parent", "DEL SimpleName: ChangeListener", "DEL TypeDeclaration: class", "DEL SimpleName: parent", "DEL SingleVariableDeclaration", "DEL Block", "DEL Modifier: final", "DEL SimpleName: node", "DEL TagElement", "DEL SimpleName: compiler", "DEL MethodInvocation", "DEL SimpleName: replacements", "DEL PrimitiveType: void", "DEL StringLiteral: \"\\\"replacements\\\" is null.\"", "DEL FieldAccess", "DEL TextElement: Interface used to notify client code about changes done by", "DEL InfixExpression: &&", "DEL PrimitiveType: void", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL TextElement: Replaces a node from the parent's child list.", "DEL SimpleName: Node", "DEL SimpleName: compiler", "DEL ExpressionStatement", "DEL SimpleName: size", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: Node", "DEL SimpleName: Node", "DEL SimpleName: parentType", "DEL InfixExpression: ==", "DEL SimpleName: block", "DEL Modifier: final", "DEL FieldDeclaration", "DEL SimpleName: replaceWith", "DEL ExpressionStatement", "DEL SimpleType: ChangeListener", "DEL SimpleType: Node", "DEL Block", "DEL SimpleName: replacement", "DEL QualifiedName: Token.LABEL", "DEL SimpleName: parent", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: Token", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: parent", "DEL ExpressionStatement", "DEL SimpleName: ImmutableList", "DEL TagElement", "DEL NumberLiteral: 1", "DEL InfixExpression: ||", "DEL SimpleName: Node", "DEL SimpleName: parent", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: ChangeListener", "DEL SingleVariableDeclaration", "DEL EnhancedForStatement", "DEL Modifier: final", "DEL TextElement: Replaces a node with the provided list.", "DEL ParenthesizedExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL Block", "DEL Modifier: private", "DEL SimpleType: List", "DEL InfixExpression: ==", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleType: ChangeListener", "DEL InfixExpression: ==", "DEL SimpleName: checkState", "DEL SimpleType: Node", "DEL InfixExpression: !=", "DEL SimpleName: size", "DEL QualifiedName: Token.SCRIPT", "DEL SimpleName: parentType", "DEL Modifier: private", "DEL TagElement", "DEL SimpleType: Node", "DEL Block", "DEL SimpleName: parentType", "DEL SimpleType: Node", "DEL SimpleName: replacements", "DEL SimpleName: useSourceInfoIfMissingFrom", "DEL Block", "DEL SimpleName: AstChangeProxy", "DEL SimpleName: add", "DEL ParameterizedType: ArrayList<>", "DEL SimpleType: ArrayList", "DEL Javadoc", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: replaceChild", "DEL NumberLiteral: 0", "DEL TextElement: sections of the AST.", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: replaceWith", "DEL SimpleName: node", "DEL SimpleName: markFunctionsDeleted", "DEL SimpleType: Node", "DEL SimpleName: newChild", "DEL SimpleName: node", "DEL SimpleName: newChild", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: listeners", "DEL SimpleName: parent", "DEL PrimitiveType: void", "DEL SimpleName: newChild", "DEL ExpressionStatement", "DEL SimpleName: replacements", "DEL SimpleType: Node", "DEL MethodInvocation", "DEL SimpleName: nodeRemoved", "DEL SimpleName: Node", "DEL SimpleName: listener", "DEL Block", "DEL TypeDeclaration: interface", "DEL SimpleType: ChangeListener", "DEL SimpleName: parent", "DEL MethodInvocation", "DEL Block", "DEL Javadoc", "DEL SimpleName: replacement", "DEL SimpleName: unregisterListener", "DEL SimpleName: NodeUtil", "DEL MethodInvocation", "DEL SimpleName: listeners", "DEL SimpleName: isEquivalentTo", "DEL TagElement", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL TagElement", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: parent", "DEL SimpleName: Node", "DEL SimpleName: registerListener", "DEL SimpleType: Node", "DEL ExpressionStatement", "DEL SimpleType: Token", "DEL SimpleName: removeChild", "DEL SimpleType: List", "DEL SimpleName: ChangeListener", "DEL SimpleName: node", "DEL QualifiedName: Token.LABEL", "DEL ExpressionStatement", "DEL Modifier: final", "DEL TextElement: AstChangeProxy.", "DEL SimpleName: replacements", "DEL QualifiedName: Token.BLOCK", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleType: Node", "DEL SimpleName: List", "DEL SimpleName: node", "DEL SimpleName: addChildToBack", "DEL SingleVariableDeclaration", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: parent", "DEL SimpleName: newChild", "DEL Modifier: private", "DEL SimpleName: removeChild", "DEL Block", "DEL SimpleName: newChild", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: of", "DEL SimpleName: compiler", "DEL SimpleName: Node", "DEL SimpleType: ChangeListener", "DEL ExpressionStatement", "DEL SimpleName: parent", "DEL ReturnStatement", "DEL SimpleName: notifyOfRemoval", "DEL SimpleType: Node", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: newChild", "DEL TextElement: Notifies listeners about a removal.", "DEL SimpleType: AbstractCompiler", "DEL SimpleName: IR", "DEL SimpleName: Node", "DEL MethodInvocation", "DEL SimpleName: node", "DEL VariableDeclarationFragment", "DEL SimpleName: compiler", "DEL MethodInvocation", "DEL SimpleName: nodeRemoved", "DEL MethodDeclaration", "DEL SimpleName: parent", "DEL SimpleType: Node", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL SimpleName: parentType", "DEL TextElement: Notifies clients about node removals. ", "DEL SimpleName: markFunctionsDeleted", "DEL SimpleName: ChangeListener", "DEL InfixExpression: ==", "DEL SimpleName: AbstractCompiler", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: NodeUtil", "DEL MethodInvocation", "DEL SimpleName: block", "DEL SimpleName: replacements", "DEL SimpleName: compiler", "DEL SingleVariableDeclaration", "DEL SimpleName: notifyOfRemoval", "DEL ExpressionStatement", "DEL SimpleName: ChangeListener", "DEL SimpleName: size", "DEL PrimitiveType: void", "DEL VariableDeclarationFragment", "DEL SimpleName: listener", "DEL Block", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: AbstractCompiler", "DEL ExpressionStatement", "DEL SimpleName: remove", "DEL InfixExpression: ||", "DEL ThisExpression", "DEL MethodDeclaration", "DEL IfStatement", "DEL SimpleName: node"]}]}}, {"AstChangeProxy_diff": {"operations": ["Delete QualifiedName: com.google.javascript.jscomp(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.common.base.Preconditions.checkNotNull(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.common.base.Preconditions.checkState(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.google.common.collect.ImmutableList(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.google.javascript.rhino.IR(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.google.javascript.rhino.Node(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: com.google.javascript.rhino.Token(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.util.ArrayList(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.util.List(16)", "Delete ImportDeclaration(17)", "Delete TextElement: Proxy that provides a high level interface that compiler passes can use to replace or remove(18)", "Delete TextElement: sections of the AST.(19)", "Delete TagElement(20)", "Delete Javadoc(21)", "Delete SimpleName: AstChangeProxy(22)", "Delete TextElement: Interface used to notify client code about changes done by(23)", "Delete TextElement: AstChangeProxy.(24)", "Delete TagElement(25)", "Delete Javadoc(26)", "Delete SimpleName: ChangeListener(27)", "Delete TextElement: Notifies clients about node removals. (28)", "Delete TagElement(29)", "Delete Javadoc(30)", "Delete PrimitiveType: void(31)", "Delete SimpleName: nodeRemoved(32)", "Delete SimpleName: Node(33)", "Delete SimpleType: Node(34)", "Delete SimpleName: node(35)", "Delete SingleVariableDeclaration(36)", "Delete SimpleName: Node(37)", "Delete SimpleType: Node(38)", "Delete SimpleName: parent(39)", "Delete SingleVariableDeclaration(40)", "Delete MethodDeclaration(41)", "Delete TypeDeclaration: interface(42)", "Delete Modifier: private(43)", "Delete Modifier: final(44)", "Delete SimpleName: List(45)", "Delete SimpleType: List(46)", "Delete SimpleName: ChangeListener(47)", "Delete SimpleType: ChangeListener(48)", "Delete ParameterizedType: List<ChangeListener>(49)", "Delete SimpleName: listeners(50)", "Delete VariableDeclarationFragment(51)", "Delete FieldDeclaration(52)", "Delete Modifier: private(53)", "Delete Modifier: final(54)", "Delete SimpleName: AbstractCompiler(55)", "Delete SimpleType: AbstractCompiler(56)", "Delete SimpleName: compiler(57)", "Delete VariableDeclarationFragment(58)", "Delete FieldDeclaration(59)", "Delete SimpleName: AstChangeProxy(60)", "Delete SimpleName: AbstractCompiler(61)", "Delete SimpleType: AbstractCompiler(62)", "Delete SimpleName: compiler(63)", "Delete SingleVariableDeclaration(64)", "Delete ThisExpression(65)", "Delete SimpleName: listeners(66)", "Delete FieldAccess(67)", "Delete SimpleName: ArrayList(68)", "Delete SimpleType: ArrayList(69)", "Delete ParameterizedType: ArrayList<>(70)", "Delete ClassInstanceCreation(71)", "Delete Assignment: =(72)", "Delete ExpressionStatement(73)", "Delete ThisExpression(74)", "Delete SimpleName: compiler(75)", "Delete FieldAccess(76)", "Delete SimpleName: compiler(77)", "Delete Assignment: =(78)", "Delete ExpressionStatement(79)", "Delete Block(80)", "Delete MethodDeclaration(81)", "Delete TextElement: Registers a change listener.(82)", "Delete TagElement(83)", "Delete Javadoc(84)", "Delete Modifier: final(85)", "Delete PrimitiveType: void(86)", "Delete SimpleName: registerListener(87)", "Delete SimpleName: ChangeListener(88)", "Delete SimpleType: ChangeListener(89)", "Delete SimpleName: listener(90)", "Delete SingleVariableDeclaration(91)", "Delete SimpleName: listeners(92)", "Delete SimpleName: add(93)", "Delete SimpleName: listener(94)", "Delete MethodInvocation(95)", "Delete ExpressionStatement(96)", "Delete Block(97)", "Delete MethodDeclaration(98)", "Delete TextElement: Unregisters a change listener.(99)", "Delete TagElement(100)", "Delete Javadoc(101)", "Delete Modifier: final(102)", "Delete PrimitiveType: void(103)", "Delete SimpleName: unregisterListener(104)", "Delete SimpleName: ChangeListener(105)", "Delete SimpleType: ChangeListener(106)", "Delete SimpleName: listener(107)", "Delete SingleVariableDeclaration(108)", "Delete SimpleName: listeners(109)", "Delete SimpleName: remove(110)", "Delete SimpleName: listener(111)", "Delete MethodInvocation(112)", "Delete ExpressionStatement(113)", "Delete Block(114)", "Delete MethodDeclaration(115)", "Delete TextElement: Notifies listeners about a removal.(116)", "Delete TagElement(117)", "Delete SimpleName: parent(118)", "Delete TagElement: @param(119)", "Delete Javadoc(120)", "Delete Modifier: private(121)", "Delete PrimitiveType: void(122)", "Delete SimpleName: notifyOfRemoval(123)", "Delete SimpleName: Node(124)", "Delete SimpleType: Node(125)", "Delete SimpleName: node(126)", "Delete SingleVariableDeclaration(127)", "Delete SimpleName: Node(128)", "Delete SimpleType: Node(129)", "Delete SimpleName: parent(130)", "Delete SingleVariableDeclaration(131)", "Delete SimpleName: ChangeListener(132)", "Delete SimpleType: ChangeListener(133)", "Delete SimpleName: listener(134)", "Delete SingleVariableDeclaration(135)", "Delete SimpleName: listeners(136)", "Delete SimpleName: listener(137)", "Delete SimpleName: nodeRemoved(138)", "Delete SimpleName: node(139)", "Delete SimpleName: parent(140)", "Delete MethodInvocation(141)", "Delete ExpressionStatement(142)", "Delete Block(143)", "Delete EnhancedForStatement(144)", "Delete Block(145)", "Delete MethodDeclaration(146)", "Delete TextElement: Removes a node from the parent's child list.(147)", "Delete TagElement(148)", "Delete Javadoc(149)", "Delete Modifier: final(150)", "Delete PrimitiveType: void(151)", "Delete SimpleName: removeChild(152)", "Delete SimpleName: Node(153)", "Delete SimpleType: Node(154)", "Delete SimpleName: parent(155)", "Delete SingleVariableDeclaration(156)", "Delete SimpleName: Node(157)", "Delete SimpleType: Node(158)", "Delete SimpleName: node(159)", "Delete SingleVariableDeclaration(160)", "Delete SimpleName: parent(161)", "Delete SimpleName: removeChild(162)", "Delete SimpleName: node(163)", "Delete MethodInvocation(164)", "Delete ExpressionStatement(165)", "Delete SimpleName: NodeUtil(166)", "Delete SimpleName: markFunctionsDeleted(167)", "Delete SimpleName: node(168)", "Delete SimpleName: compiler(169)", "Delete MethodInvocation(170)", "Delete ExpressionStatement(171)", "Delete SimpleName: notifyOfRemoval(172)", "Delete SimpleName: node(173)", "Delete SimpleName: parent(174)", "Delete MethodInvocation(175)", "Delete ExpressionStatement(176)", "Delete Block(177)", "Delete MethodDeclaration(178)", "Delete TextElement: Replaces a node from the parent's child list.(179)", "Delete TagElement(180)", "Delete Javadoc(181)", "Delete Modifier: final(182)", "Delete PrimitiveType: void(183)", "Delete SimpleName: replaceWith(184)", "Delete SimpleName: Node(185)", "Delete SimpleType: Node(186)", "Delete SimpleName: parent(187)", "Delete SingleVariableDeclaration(188)", "Delete SimpleName: Node(189)", "Delete SimpleType: Node(190)", "Delete SimpleName: node(191)", "Delete SingleVariableDeclaration(192)", "Delete SimpleName: Node(193)", "Delete SimpleType: Node(194)", "Delete SimpleName: replacement(195)", "Delete SingleVariableDeclaration(196)", "Delete SimpleName: replaceWith(197)", "Delete SimpleName: parent(198)", "Delete SimpleName: node(199)", "Delete SimpleName: ImmutableList(200)", "Delete SimpleName: of(201)", "Delete SimpleName: replacement(202)", "Delete MethodInvocation(203)", "Delete MethodInvocation(204)", "Delete ExpressionStatement(205)", "Delete Block(206)", "Delete MethodDeclaration(207)", "Delete TextElement: Replaces a node with the provided list.(208)", "Delete TagElement(209)", "Delete Javadoc(210)", "Delete Modifier: final(211)", "Delete PrimitiveType: void(212)", "Delete SimpleName: replaceWith(213)", "Delete SimpleName: Node(214)", "Delete SimpleType: Node(215)", "Delete SimpleName: parent(216)", "Delete SingleVariableDeclaration(217)", "Delete SimpleName: Node(218)", "Delete SimpleType: Node(219)", "Delete SimpleName: node(220)", "Delete SingleVariableDeclaration(221)", "Delete SimpleName: List(222)", "Delete SimpleType: List(223)", "Delete SimpleName: Node(224)", "Delete SimpleType: Node(225)", "Delete ParameterizedType: List<Node>(226)", "Delete SimpleName: replacements(227)", "Delete SingleVariableDeclaration(228)", "Delete SimpleName: checkNotNull(229)", "Delete SimpleName: replacements(230)", "Delete StringLiteral: \"\\\"replacements\\\" is null.\"(231)", "Delete MethodInvocation(232)", "Delete ExpressionStatement(233)", "Delete PrimitiveType: int(234)", "Delete SimpleName: size(235)", "Delete SimpleName: replacements(236)", "Delete SimpleName: size(237)", "Delete MethodInvocation(238)", "Delete VariableDeclarationFragment(239)", "Delete VariableDeclarationStatement(240)", "Delete SimpleName: size(241)", "Delete NumberLiteral: 1(242)", "Delete InfixExpression: ==(243)", "Delete ParenthesizedExpression(244)", "Delete SimpleName: node(245)", "Delete SimpleName: isEquivalentTo(246)", "Delete SimpleName: replacements(247)", "Delete SimpleName: get(248)", "Delete NumberLiteral: 0(249)", "Delete MethodInvocation(250)", "Delete MethodInvocation(251)", "Delete InfixExpression: &&(252)", "Delete ReturnStatement(253)", "Delete Block(254)", "Delete IfStatement(255)", "Delete SimpleName: Token(256)", "Delete SimpleType: Token(257)", "Delete SimpleName: parentType(258)", "Delete SimpleName: parent(259)", "Delete SimpleName: getToken(260)", "Delete MethodInvocation(261)", "Delete VariableDeclarationFragment(262)", "Delete VariableDeclarationStatement(263)", "Delete SimpleName: checkState(264)", "Delete SimpleName: size(265)", "Delete NumberLiteral: 1(266)", "Delete InfixExpression: ==(267)", "Delete SimpleName: parentType(268)", "Delete QualifiedName: Token.BLOCK(269)", "Delete InfixExpression: ==(270)", "Delete InfixExpression: ||(271)", "Delete SimpleName: parentType(272)", "Delete QualifiedName: Token.SCRIPT(273)", "Delete InfixExpression: ==(274)", "Delete InfixExpression: ||(275)", "Delete SimpleName: parentType(276)", "Delete QualifiedName: Token.LABEL(277)", "Delete InfixExpression: ==(278)", "Delete InfixExpression: ||(279)", "Delete MethodInvocation(280)", "Delete ExpressionStatement(281)", "Delete SimpleName: parentType(282)", "Delete QualifiedName: Token.LABEL(283)", "Delete InfixExpression: ==(284)", "Delete SimpleName: size(285)", "Delete NumberLiteral: 1(286)", "Delete InfixExpression: !=(287)", "Delete InfixExpression: &&(288)", "Delete SimpleName: Node(289)", "Delete SimpleType: Node(290)", "Delete SimpleName: block(291)", "Delete SimpleName: IR(292)", "Delete SimpleName: block(293)", "Delete MethodInvocation(294)", "Delete VariableDeclarationFragment(295)", "Delete VariableDeclarationStatement(296)", "Delete SimpleName: Node(297)", "Delete SimpleType: Node(298)", "Delete SimpleName: newChild(299)", "Delete SingleVariableDeclaration(300)", "Delete SimpleName: replacements(301)", "Delete SimpleName: newChild(302)", "Delete SimpleName: useSourceInfoIfMissingFrom(303)", "Delete SimpleName: node(304)", "Delete MethodInvocation(305)", "Delete ExpressionStatement(306)", "Delete SimpleName: block(307)", "Delete SimpleName: addChildToBack(308)", "Delete SimpleName: newChild(309)", "Delete MethodInvocation(310)", "Delete ExpressionStatement(311)", "Delete Block(312)", "Delete EnhancedForStatement(313)", "Delete SimpleName: parent(314)", "Delete SimpleName: replaceChild(315)", "Delete SimpleName: node(316)", "Delete SimpleName: block(317)", "Delete MethodInvocation(318)", "Delete ExpressionStatement(319)", "Delete Block(320)", "Delete SimpleName: Node(321)", "Delete SimpleType: Node(322)", "Delete SimpleName: newChild(323)", "Delete SingleVariableDeclaration(324)", "Delete SimpleName: replacements(325)", "Delete SimpleName: newChild(326)", "Delete SimpleName: useSourceInfoIfMissingFrom(327)", "Delete SimpleName: node(328)", "Delete MethodInvocation(329)", "Delete ExpressionStatement(330)", "Delete SimpleName: parent(331)", "Delete SimpleName: addChildBefore(332)", "Delete SimpleName: newChild(333)", "Delete SimpleName: node(334)", "Delete MethodInvocation(335)", "Delete ExpressionStatement(336)", "Delete Block(337)", "Delete EnhancedForStatement(338)", "Delete SimpleName: parent(339)", "Delete SimpleName: removeChild(340)", "Delete SimpleName: node(341)", "Delete MethodInvocation(342)", "Delete ExpressionStatement(343)", "Delete Block(344)", "Delete IfStatement(345)", "Delete SimpleName: NodeUtil(346)", "Delete SimpleName: markFunctionsDeleted(347)", "Delete SimpleName: node(348)", "Delete SimpleName: compiler(349)", "Delete MethodInvocation(350)", "Delete ExpressionStatement(351)", "Delete SimpleName: notifyOfRemoval(352)", "Delete SimpleName: node(353)", "Delete SimpleName: parent(354)", "Delete MethodInvocation(355)", "Delete ExpressionStatement(356)", "Delete Block(357)", "Delete MethodDeclaration(358)", "Delete TypeDeclaration: class(359)"]}}, {"NameAnalyzer_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 67", "operations": ["INS SimpleType: Node to SingleVariableDeclaration at 0", "INS EnhancedForStatement to Block at 3", "INS Modifier: private to MethodDeclaration at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: deleteNode to MethodInvocation at 1", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS SimpleName: NodeUtil to MethodInvocation at 0", "INS SimpleName: n to MethodInvocation at 2", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 67", "INS ExpressionStatement to Block at 6", "INS SimpleName: compiler to MethodInvocation at 3", "INS Block to EnhancedForStatement at 2", "INS SimpleName: replacements to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 2", "INS Block to MethodDeclaration at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: r to SingleVariableDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS EnhancedForStatement to Block at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleName: nodeRemoved to MethodDeclaration at 3", "MOV PrimitiveType: void to MethodDeclaration at 2"]}, {"root": "UPDATE from nodeRemoved to replaceTopLevelExpressionWithRhs", "operations": ["UPD SimpleName: nodeRemoved from nodeRemoved to replaceTopLevelExpressionWithRhs"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: compiler to MethodInvocation at 0", "INS SimpleName: n to MethodInvocation at 2", "INS SimpleName: reportChangeToEnclosingScope to MethodInvocation at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV SwitchStatement to Block at 1", "MOV ExpressionStatement to Block at 5", "MOV SwitchStatement to Block at 0", "MOV IfStatement to Block at 4"]}, {"root": "UPDATE from List<Node> to Iterable<Node>", "operations": ["UPD ParameterizedType: List<Node> from List<Node> to Iterable<Node>"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: grandparent to MethodInvocation at 2", "INS SimpleName: reportChangeToEnclosingScope to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: compiler to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: compiler to MethodInvocation at 0", "INS SimpleName: reportChangeToEnclosingScope to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getParent to MethodInvocation at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV MethodInvocation to EnhancedForStatement at 1", "MOV SingleVariableDeclaration to EnhancedForStatement at 0", "MOV Block to EnhancedForStatement at 2"]}, {"root": "UPDATE from List to Iterable", "operations": ["UPD SimpleName: List from List to Iterable", "UPD SimpleType: List from List to Iterable"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: replaceWith to MethodInvocation at 4"]}, {"root": "MOVE from SimpleType: Node", "operations": ["MOV SimpleName: Node to SimpleType: Node at 0"]}, {"root": "UPDATE from changeProxy to parent", "operations": ["UPD SimpleName: changeProxy from changeProxy to parent", "UPD SimpleName: getGrandparent from getGrandparent to parent", "UPD SimpleName: changeProxy from changeProxy to parent"]}, {"root": "INS SimpleName: addChildrenAfter to MethodInvocation at 1", "operations": ["INS SimpleName: addChildrenAfter to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS SimpleName: compiler to MethodInvocation at 0", "operations": ["INS SimpleName: compiler to MethodInvocation at 0"]}, {"root": "INS SimpleName: reportChangeToEnclosingScope to MethodInvocation at 1", "operations": ["INS SimpleName: reportChangeToEnclosingScope to MethodInvocation at 1"]}, {"root": "UPDATE from compiler to IR", "operations": ["UPD SimpleName: compiler from compiler to IR"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: compiler to MethodInvocation at 0", "MOV SimpleName: reportChangeToEnclosingScope to MethodInvocation at 1"]}, {"root": "UPDATE from reportChangeToEnclosingScope to block", "operations": ["UPD SimpleName: reportChangeToEnclosingScope from reportChangeToEnclosingScope to block"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV MethodInvocation to EnhancedForStatement at 1"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS PrefixExpression: ! to IfStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "UPDATE from replaceWith to replacements", "operations": ["UPD SimpleName: replaceWith from replaceWith to replacements"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: parent to MethodInvocation at 1", "MOV SimpleName: replaceWith to MethodInvocation at 0"]}, {"root": "UPDATE from clear to removeChildren", "operations": ["UPD SimpleName: clear from clear to removeChildren", "UPD SimpleName: parent from parent to removeChildren"]}, {"root": "UPDATE from changeProxy to n", "operations": ["UPD SimpleName: changeProxy from changeProxy to n", "UPD SimpleName: changeProxy from changeProxy to n"]}, {"root": "UPDATE from \"AstChangeProxy::getRhs \" to \"getRhsSubexpressions \"", "operations": ["UPD StringLiteral: \"AstChangeProxy::getRhs \" from \"AstChangeProxy::getRhs \" to \"getRhsSubexpressions \""]}, {"root": "UPDATE from changeProxy to NodeUtil", "operations": ["UPD SimpleName: changeProxy from changeProxy to NodeUtil", "UPD SimpleName: changeProxy from changeProxy to NodeUtil"]}, {"root": "UPDATE from removeChild to deleteNode", "operations": ["UPD SimpleName: removeChild from removeChild to deleteNode", "UPD SimpleName: removeChild from removeChild to deleteNode"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: grandparent to MethodInvocation at 2", "MOV SimpleName: getParent to MethodInvocation at 3"]}, {"root": "UPDATE from getParent to compiler", "operations": ["UPD SimpleName: getParent from getParent to compiler", "UPD SimpleName: parent from parent to compiler"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getGrandparent to MethodInvocation at 2"]}, {"root": "UPDATE from changeProxy to node", "operations": ["UPD SimpleName: changeProxy from changeProxy to node"]}, {"root": "MOVE from SimpleType: Node", "operations": ["MOV SimpleName: Node to SimpleType: Node at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: isEmpty to MethodInvocation at 1", "MOV SimpleName: replacements to MethodInvocation at 0"]}, {"root": "UPDATE from isEmpty to hasChildren", "operations": ["UPD SimpleName: isEmpty from isEmpty to hasChildren"]}, {"root": "UPDATE from add to addChildToBack", "operations": ["UPD SimpleName: add from add to addChildToBack", "UPD SimpleName: add from add to addChildToBack", "UPD SimpleName: addAll from addAll to addChildToBack"]}, {"root": "INS SimpleName: r to MethodInvocation at 2", "operations": ["INS SimpleName: r to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: useSourceInfoFrom to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: n to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 1", "operations": ["INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: children to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: replacements to MethodInvocation at 0"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL TagElement", "DEL Javadoc", "DEL TextElement: Ast change helper ", "DEL Modifier: final", "DEL SimpleName: AstChangeProxy", "DEL SimpleName: changeProxy", "DEL FieldDeclaration", "DEL SimpleType: AstChangeProxy", "DEL Modifier: private"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: grandparent", "operations": ["DEL SimpleName: grandparent"]}, {"root": "DEL SimpleName: grandparent", "operations": ["DEL SimpleName: grandparent"]}, {"root": "DEL SimpleName: parent", "operations": ["DEL SimpleName: parent"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: parent", "operations": ["DEL SimpleName: parent"]}, {"root": "DEL SimpleName: node", "operations": ["DEL SimpleName: node"]}, {"root": "DEL SimpleName: changeProxy", "operations": ["DEL SimpleName: changeProxy"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getGrandparent", "DEL MethodInvocation"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MarkerAnnotation", "DEL Modifier: private", "DEL Block", "DEL SimpleType: Node", "DEL SimpleName: RemoveListener", "DEL SingleVariableDeclaration", "DEL SimpleName: parent", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: Node", "DEL SimpleType: Node", "DEL SimpleName: n", "DEL QualifiedName: AstChangeProxy.ChangeListener", "DEL SimpleName: Override", "DEL TypeDeclaration: class", "DEL SimpleType: AstChangeProxy.ChangeListener", "DEL Modifier: public"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleType: AstChangeProxy", "DEL ThisExpression", "DEL Assignment: =", "DEL ExpressionStatement", "DEL FieldAccess", "DEL SimpleName: AstChangeProxy", "DEL SimpleName: changeProxy", "DEL ClassInstanceCreation", "DEL SimpleName: compiler"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: listener", "DEL VariableDeclarationFragment", "DEL SimpleName: RemoveListener", "DEL ClassInstanceCreation", "DEL SimpleType: RemoveListener", "DEL VariableDeclarationStatement", "DEL SimpleName: RemoveListener", "DEL SimpleType: RemoveListener"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: listener", "DEL ExpressionStatement", "DEL SimpleName: registerListener", "DEL SimpleName: changeProxy"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: listener", "DEL SimpleName: changeProxy", "DEL SimpleName: unregisterListener", "DEL ExpressionStatement", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: parent", "operations": ["DEL SimpleName: parent"]}, {"root": "DEL SimpleName: n", "operations": ["DEL SimpleName: n"]}, {"root": "DEL SimpleName: parent", "operations": ["DEL SimpleName: parent"]}, {"root": "DEL SimpleName: n", "operations": ["DEL SimpleName: n"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: replacements", "operations": ["DEL SimpleName: replacements"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: replaceTopLevelExpressionWithRhs", "DEL ClassInstanceCreation", "DEL SimpleName: replacements", "DEL SimpleName: List", "DEL VariableDeclarationStatement", "DEL SimpleName: ArrayList", "DEL Modifier: private", "DEL EnhancedForStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: ArrayList", "DEL PrimitiveType: void", "DEL ParameterizedType: List<Node>", "DEL ParameterizedType: ArrayList<>", "DEL Block", "DEL SimpleType: Node", "DEL SimpleType: List", "DEL MethodDeclaration"]}]}}, {"NameAnalyzer_diff": {"operations": ["Insert MethodDeclaration(6411) into TypeDeclaration: class(6756) at 65", "Move Javadoc(6301) into MethodDeclaration(6411) at 0", "Insert Modifier: private(6247) into MethodDeclaration(6411) at 1", "Move PrimitiveType: void(3641) into MethodDeclaration(6411) at 2", "Update SimpleName: nodeRemoved(3642) to replaceTopLevelExpressionWithRhs", "Move SimpleName: nodeRemoved(3642) into MethodDeclaration(6411) at 3", "Move SingleVariableDeclaration(6308) into MethodDeclaration(6411) at 4", "Move SingleVariableDeclaration(6312) into MethodDeclaration(6411) at 5", "Insert Block(6410) into MethodDeclaration(6411) at 6", "Insert ExpressionStatement(6127) into Block(6241) at 0", "Move SwitchStatement(6339) into Block(6410) at 0", "Move SwitchStatement(6377) into Block(6410) at 1", "Insert VariableDeclarationStatement(6330) into Block(6410) at 2", "Insert EnhancedForStatement(6353) into Block(6410) at 3", "Move IfStatement(6441) into Block(6410) at 4", "Move ExpressionStatement(6448) into Block(6410) at 5", "Insert ExpressionStatement(6409) into Block(6410) at 6", "Update ParameterizedType: List<Node>(6550) to Iterable<Node>", "Insert ExpressionStatement(978) into Block(1000) at 1", "Move ExpressionStatement(3655) into Block(1174) at 2", "Insert ExpressionStatement(1230) into Block(1239) at 0", "Insert MethodInvocation(6126) into ExpressionStatement(6127) at 0", "Insert SimpleType: Node(6324) into VariableDeclarationStatement(6330) at 0", "Insert VariableDeclarationFragment(6329) into VariableDeclarationStatement(6330) at 1", "Move SingleVariableDeclaration(6393) into EnhancedForStatement(6353) at 0", "Move MethodInvocation(6396) into EnhancedForStatement(6353) at 1", "Insert Block(6352) into EnhancedForStatement(6353) at 2", "Insert MethodInvocation(6408) into ExpressionStatement(6409) at 0", "Update SimpleType: List(6547) to Iterable", "Insert MethodInvocation(977) into ExpressionStatement(978) at 0", "Insert MethodInvocation(1229) into ExpressionStatement(1230) at 0", "Move SimpleName: replaceWith(1233) into MethodInvocation(1237) at 4", "Insert SimpleName: compiler(6123) into MethodInvocation(6126) at 0", "Insert SimpleName: reportChangeToEnclosingScope(6124) into MethodInvocation(6126) at 1", "Insert SimpleName: n(6125) into MethodInvocation(6126) at 2", "Move SimpleName: Node(3643) into SimpleType: Node(6324) at 0", "Insert SimpleName: replacements(6325) into VariableDeclarationFragment(6329) at 0", "Insert MethodInvocation(6328) into VariableDeclarationFragment(6329) at 1", "Insert EnhancedForStatement(6351) into Block(6352) at 0", "Update SimpleName: changeProxy(6442) to parent", "Insert SimpleName: addChildrenAfter(6397) into MethodInvocation(6402) at 1", "Insert MethodInvocation(6400) into MethodInvocation(6402) at 2", "Insert SimpleName: NodeUtil(6404) into MethodInvocation(6408) at 0", "Insert SimpleName: deleteNode(6405) into MethodInvocation(6408) at 1", "Insert SimpleName: n(6406) into MethodInvocation(6408) at 2", "Insert SimpleName: compiler(6407) into MethodInvocation(6408) at 3", "Update SimpleName: List(6546) to Iterable", "Insert SimpleName: compiler(974) into MethodInvocation(977) at 0", "Insert SimpleName: reportChangeToEnclosingScope(975) into MethodInvocation(977) at 1", "Insert SimpleName: grandparent(976) into MethodInvocation(977) at 2", "Insert SimpleName: compiler(1146) into MethodInvocation(1149) at 0", "Insert SimpleName: reportChangeToEnclosingScope(1147) into MethodInvocation(1149) at 1", "Insert SimpleName: compiler(1225) into MethodInvocation(1229) at 0", "Insert SimpleName: reportChangeToEnclosingScope(1226) into MethodInvocation(1229) at 1", "Insert MethodInvocation(1228) into MethodInvocation(1229) at 2", "Update SimpleName: compiler(3651) to IR", "Move SimpleName: compiler(3651) into MethodInvocation(6328) at 0", "Update SimpleName: reportChangeToEnclosingScope(3652) to block", "Move SimpleName: reportChangeToEnclosingScope(3652) into MethodInvocation(6328) at 1", "Insert SingleVariableDeclaration(6341) into EnhancedForStatement(6351) at 0", "Move MethodInvocation(6401) into EnhancedForStatement(6351) at 1", "Move Block(6404) into EnhancedForStatement(6351) at 2", "Insert PrefixExpression: !(6361) into IfStatement(6393) at 0", "Update SimpleName: replaceWith(6443) to replacements", "Move SimpleName: replaceWith(6443) into MethodInvocation(6400) at 0", "Update SimpleName: parent(6444) to removeChildren", "Move SimpleName: parent(6444) into MethodInvocation(6400) at 1", "Insert SimpleName: getParent(1227) into MethodInvocation(1228) at 0", "Update SimpleName: changeProxy(6250) to n", "Insert SimpleType: Node(6339) into SingleVariableDeclaration(6341) at 0", "Insert SimpleName: r(6340) into SingleVariableDeclaration(6341) at 1", "Insert MethodInvocation(6360) into PrefixExpression: !(6361) at 0", "Update StringLiteral: \"AstChangeProxy::getRhs \"(6747) to \"getRhsSubexpressions \"", "Update SimpleName: changeProxy(987) to NodeUtil", "Update SimpleName: removeChild(988) to deleteNode", "Move SimpleName: grandparent(989) into MethodInvocation(986) at 2", "Update SimpleName: getParent(990) to compiler", "Move SimpleName: getParent(990) into MethodInvocation(986) at 3", "Update SimpleName: changeProxy(996) to parent", "Update SimpleName: changeProxy(1158) to NodeUtil", "Update SimpleName: removeChild(1159) to deleteNode", "Update SimpleName: getGrandparent(1160) to parent", "Move SimpleName: getGrandparent(1160) into MethodInvocation(1158) at 2", "Update SimpleName: parent(1162) to compiler", "Update SimpleName: changeProxy(1166) to node", "Update SimpleName: changeProxy(6280) to n", "Move SimpleName: Node(6380) into SimpleType: Node(6339) at 0", "Move SimpleName: replacements(6410) into MethodInvocation(6360) at 0", "Update SimpleName: isEmpty(6411) to hasChildren", "Move SimpleName: isEmpty(6411) into MethodInvocation(6360) at 1", "Update SimpleName: addAll(6398) to addChildToBack", "Insert SimpleName: r(6347) into MethodInvocation(6348) at 2", "Update SimpleName: add(6414) to addChildToBack", "Insert MethodInvocation(6369) into MethodInvocation(6370) at 2", "Update SimpleName: clear(6430) to removeChildren", "Update SimpleName: add(6434) to addChildToBack", "Move MethodInvocation(6417) into MethodInvocation(6369) at 0", "Insert SimpleName: useSourceInfoFrom(6367) into MethodInvocation(6369) at 1", "Insert SimpleName: n(6368) into MethodInvocation(6369) at 2", "Insert MethodInvocation(6379) into MethodInvocation(6380) at 1", "Move SimpleName: replacements(6425) into MethodInvocation(6379) at 0", "Insert SimpleName: children(6378) into MethodInvocation(6379) at 1", "Delete TextElement: Ast change helper (281)", "Delete TagElement(282)", "Delete Javadoc(283)", "Delete Modifier: private(284)", "Delete Modifier: final(285)", "Delete SimpleName: AstChangeProxy(286)", "Delete SimpleType: AstChangeProxy(287)", "Delete SimpleName: changeProxy(288)", "Delete VariableDeclarationFragment(289)", "Delete FieldDeclaration(290)", "Delete MethodInvocation(991)", "Delete SimpleName: grandparent(992)", "Delete SimpleName: grandparent(998)", "Delete SimpleName: parent(999)", "Delete MethodInvocation(1161)", "Delete SimpleName: parent(1168)", "Delete SimpleName: node(1169)", "Delete SimpleName: changeProxy(1232)", "Delete SimpleName: getGrandparent(1234)", "Delete MethodInvocation(1235)", "Delete Modifier: private(3634)", "Delete SimpleName: RemoveListener(3635)", "Delete QualifiedName: AstChangeProxy.ChangeListener(3636)", "Delete SimpleType: AstChangeProxy.ChangeListener(3637)", "Delete SimpleName: Override(3638)", "Delete MarkerAnnotation(3639)", "Delete Modifier: public(3640)", "Delete SimpleType: Node(3644)", "Delete SimpleName: n(3645)", "Delete SingleVariableDeclaration(3646)", "Delete SimpleName: Node(3647)", "Delete SimpleType: Node(3648)", "Delete SimpleName: parent(3649)", "Delete SingleVariableDeclaration(3650)", "Delete Block(3656)", "Delete MethodDeclaration(3657)", "Delete TypeDeclaration: class(3658)", "Delete ThisExpression(3709)", "Delete SimpleName: changeProxy(3710)", "Delete FieldAccess(3711)", "Delete SimpleName: AstChangeProxy(3712)", "Delete SimpleType: AstChangeProxy(3713)", "Delete SimpleName: compiler(3714)", "Delete ClassInstanceCreation(3715)", "Delete Assignment: =(3716)", "Delete ExpressionStatement(3717)", "Delete SimpleName: RemoveListener(4120)", "Delete SimpleType: RemoveListener(4121)", "Delete SimpleName: listener(4122)", "Delete SimpleName: RemoveListener(4123)", "Delete SimpleType: RemoveListener(4124)", "Delete ClassInstanceCreation(4125)", "Delete VariableDeclarationFragment(4126)", "Delete VariableDeclarationStatement(4127)", "Delete SimpleName: changeProxy(4128)", "Delete SimpleName: registerListener(4129)", "Delete SimpleName: listener(4130)", "Delete MethodInvocation(4131)", "Delete ExpressionStatement(4132)", "Delete SimpleName: changeProxy(4159)", "Delete SimpleName: unregisterListener(4160)", "Delete SimpleName: listener(4161)", "Delete MethodInvocation(4162)", "Delete ExpressionStatement(4163)", "Delete SimpleName: parent(6252)", "Delete SimpleName: n(6253)", "Delete SimpleName: parent(6282)", "Delete SimpleName: n(6283)", "Delete MethodInvocation(6412)", "Delete SimpleName: replacements(6446)", "Delete Modifier: private(6302)", "Delete PrimitiveType: void(6303)", "Delete SimpleName: replaceTopLevelExpressionWithRhs(6304)", "Delete SimpleName: List(6378)", "Delete SimpleType: List(6379)", "Delete SimpleType: Node(6381)", "Delete ParameterizedType: List<Node>(6382)", "Delete SimpleName: replacements(6383)", "Delete SimpleName: ArrayList(6384)", "Delete SimpleType: ArrayList(6385)", "Delete ParameterizedType: ArrayList<>(6386)", "Delete ClassInstanceCreation(6387)", "Delete VariableDeclarationFragment(6388)", "Delete VariableDeclarationStatement(6389)", "Delete EnhancedForStatement(6405)", "Delete Block(6449)", "Delete MethodDeclaration(6450)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 1, "testing": "False", "maintenance": "False", "build": "False"}]}