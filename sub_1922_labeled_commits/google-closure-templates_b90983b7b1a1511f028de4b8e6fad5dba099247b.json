{"application": "google-closure-templates", "csha": "b90983b7b1a1511f028de4b8e6fad5dba099247b", "files": [{"CodeChunk_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 13"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS SimpleName: value to SingleVariableDeclaration at 1", "INS QualifiedName: CodeChunk.WithValue to SimpleType: CodeChunk.WithValue at 0", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS SimpleName: declare to MethodDeclaration at 3", "INS SimpleType: CodeChunk.WithValue to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV Modifier: static to MethodDeclaration at 2", "MOV SimpleType: DeclarationBuilder to MethodDeclaration at 3", "MOV SimpleName: declare to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "UPDATE from DeclarationBuilder to CodeChunk.WithValue", "operations": ["UPD SimpleType: DeclarationBuilder from DeclarationBuilder to CodeChunk.WithValue", "UPD SimpleType: WithValue from WithValue to CodeChunk.WithValue"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV Block to MethodDeclaration at 7"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "UPDATE from public to static", "operations": ["UPD Modifier: public from public to static"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 7", "MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 8", "MOV SimpleType: CodeChunk.WithValue to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS QualifiedName: CodeChunk.WithValue to SimpleType: DeclarationBuilder at 0", "operations": ["INS QualifiedName: CodeChunk.WithValue to SimpleType: DeclarationBuilder at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS SimpleName: varName to MethodInvocation at 2", "INS SimpleName: create to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 0"]}, {"root": "UPDATE from Returns a code chunk that assigns a variable with the given name. to Creates a code chunk that assigns value to a preexisting variable with the given name. ", "operations": ["UPD TextElement: Returns a code chunk that assigns a variable with the given name. from Returns a code chunk that assigns a variable with the given name. to Creates a code chunk that assigns value to a preexisting variable with the given name. "]}, {"root": "UPDATE from Returns a builder for a new code chunk that declares a variable with the given name. to Creates a code chunk that declares a new variable and assigns a value to it. ", "operations": ["UPD TextElement: Returns a builder for a new code chunk that declares a variable with the given name. from Returns a builder for a new code chunk that declares a variable with the given name. to Creates a code chunk that declares a new variable and assigns a value to it. "]}, {"root": "INS QualifiedName: CodeChunk.WithValue to SimpleType: WithValue at 0", "operations": ["INS QualifiedName: CodeChunk.WithValue to SimpleType: WithValue at 0"]}, {"root": "UPDATE from checkState to Declaration", "operations": ["UPD SimpleName: checkState from checkState to Declaration"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: checkState to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: rhs to MethodInvocation at 3"]}, {"root": "INS SimpleName: value to MethodInvocation at 4", "operations": ["INS SimpleName: value to MethodInvocation at 4"]}, {"root": "UPDATE from of to typeExpr", "operations": ["UPD SimpleName: of from of to typeExpr"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: of to MethodInvocation at 5"]}, {"root": "INS SimpleName: requires to MethodInvocation at 6", "operations": ["INS SimpleName: requires to MethodInvocation at 6"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: declare to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: CodeChunk to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: rhs to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: CodeChunk to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: declare to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.base.Preconditions.checkNotNull"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Preconditions.checkState", "DEL ImportDeclaration"]}, {"root": "DEL TextElement: <p>Most callers should use ", "operations": ["DEL TextElement: <p>Most callers should use "]}, {"root": "DEL TagElement: @link", "operations": ["DEL MethodRefParameter", "DEL QualifiedName: CodeChunk.Generator", "DEL MethodRef", "DEL SimpleName: assign", "DEL SimpleName: WithValue", "DEL TagElement: @link", "DEL SimpleType: WithValue"]}, {"root": "DEL TextElement: . This method should", "operations": ["DEL TextElement: . This method should"]}, {"root": "DEL TextElement: only be used when this chunk is being inserted into foreign code that requires a variable of", "operations": ["DEL TextElement: only be used when this chunk is being inserted into foreign code that requires a variable of"]}, {"root": "DEL TextElement: the given name to exist.", "operations": ["DEL TextElement: the given name to exist."]}, {"root": "DEL TextElement: <p>Most callers should use ", "operations": ["DEL TextElement: <p>Most callers should use "]}, {"root": "DEL TagElement: @link", "operations": ["DEL TagElement: @link", "DEL QualifiedName: CodeChunk.Generator", "DEL MethodRef", "DEL MethodRefParameter", "DEL SimpleName: WithValue", "DEL SimpleName: declare", "DEL SimpleType: WithValue"]}, {"root": "DEL TextElement: . This method should", "operations": ["DEL TextElement: . This method should"]}, {"root": "DEL TextElement: only be used when this chunk is being inserted into foreign code that requires a variable of", "operations": ["DEL TextElement: only be used when this chunk is being inserted into foreign code that requires a variable of"]}, {"root": "DEL TextElement: the given name to exist.", "operations": ["DEL TextElement: the given name to exist."]}, {"root": "DEL SimpleName: DeclarationBuilder", "operations": ["DEL SimpleName: DeclarationBuilder"]}, {"root": "DEL SimpleName: WithValue", "operations": ["DEL SimpleName: WithValue"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL FieldAccess", "DEL ThisExpression", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: rhs", "DEL NullLiteral", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: rhs", "DEL FieldAccess", "DEL SimpleName: checkNotNull", "DEL ThisExpression"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL ThisExpression"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: checkState", "DEL InfixExpression: !=", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: rhs", "DEL StringLiteral: \"must set an initial value\"", "DEL ExpressionStatement"]}, {"root": "DEL SimpleName: typeExpr", "operations": ["DEL SimpleName: typeExpr"]}, {"root": "DEL SimpleName: rhs", "operations": ["DEL SimpleName: rhs"]}, {"root": "DEL ConditionalExpression", "operations": ["DEL SimpleName: requires", "DEL SimpleName: requires", "DEL SimpleName: GoogRequire", "DEL ConditionalExpression", "DEL SimpleName: ImmutableSet", "DEL NullLiteral", "DEL InfixExpression: ==", "DEL SimpleType: GoogRequire", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: DeclarationBuilder", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL SimpleName: DeclarationBuilder", "DEL SimpleName: varName", "DEL Block", "DEL MethodDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: requires", "DEL FieldDeclaration", "DEL Modifier: public", "DEL Modifier: static", "DEL MethodInvocation", "DEL Block", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: GoogRequire", "DEL SimpleName: DeclarationBuilder", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: ImmutableSet", "DEL ParameterizedType: ImmutableSet<GoogRequire>", "DEL Assignment: =", "DEL Modifier: public", "DEL FieldDeclaration", "DEL SimpleType: DeclarationBuilder", "DEL ExpressionStatement", "DEL SimpleName: ImmutableSet", "DEL MethodInvocation", "DEL TypeDeclaration: class", "DEL VariableDeclarationFragment", "DEL SimpleName: requires", "DEL Assignment: =", "DEL ExpressionStatement", "DEL FieldAccess", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: setInitialValue", "DEL NullLiteral", "DEL SimpleName: DeclarationBuilder", "DEL FieldAccess", "DEL FieldAccess", "DEL SimpleName: setGoogRequiresForType", "DEL SimpleName: checkState", "DEL SimpleName: checkNotNull", "DEL ThisExpression", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleType: String", "DEL ThisExpression", "DEL InfixExpression: ==", "DEL SimpleName: varName", "DEL SimpleName: DeclarationBuilder", "DEL SimpleName: varName", "DEL ThisExpression", "DEL FieldAccess", "DEL SimpleType: DeclarationBuilder", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: typeExpr", "DEL MarkerAnnotation", "DEL SimpleName: requires", "DEL SimpleType: String", "DEL SimpleName: String", "DEL FieldAccess", "DEL MethodDeclaration", "DEL Modifier: public", "DEL ThisExpression", "DEL TextElement: A builder for complex declarations. ", "DEL SimpleName: DeclarationBuilder", "DEL TagElement", "DEL SimpleName: WithValue", "DEL ThisExpression", "DEL Block", "DEL SimpleType: DeclarationBuilder", "DEL SimpleName: Nullable", "DEL SimpleName: rhs", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL InfixExpression: ==", "DEL SimpleName: requires", "DEL SimpleName: String", "DEL Javadoc", "DEL SimpleName: checkNotNull", "DEL Block", "DEL MarkerAnnotation", "DEL SimpleName: Nullable", "DEL SimpleName: build", "DEL NullLiteral", "DEL SimpleName: copyOf", "DEL Assignment: =", "DEL ThisExpression", "DEL FieldDeclaration", "DEL ReturnStatement", "DEL SimpleType: WithValue", "DEL SimpleName: typeExpr", "DEL ThisExpression", "DEL SimpleName: typeExpr", "DEL SimpleType: ImmutableSet", "DEL SimpleType: GoogRequire", "DEL SimpleName: varName", "DEL SimpleName: checkState", "DEL ExpressionStatement", "DEL Modifier: final", "DEL SimpleName: DeclarationBuilder", "DEL SimpleName: setTypeExpression", "DEL SimpleName: typeExpr"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: setInitialValue", "DEL MethodInvocation", "DEL SimpleName: build", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: setInitialValue", "operations": ["DEL SimpleName: setInitialValue"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: build", "DEL MethodInvocation"]}]}}, {"CodeChunk_diff": {"operations": ["Insert MethodDeclaration(416) into TypeDeclaration: class(2463) at 13", "Insert MethodDeclaration(450) into TypeDeclaration: class(2463) at 14", "Move Javadoc(421) into MethodDeclaration(416) at 0", "Move Modifier: public(422) into MethodDeclaration(416) at 1", "Move Modifier: static(423) into MethodDeclaration(416) at 2", "Update SimpleType: DeclarationBuilder(425) to CodeChunk.WithValue", "Move SimpleType: DeclarationBuilder(425) into MethodDeclaration(416) at 3", "Move SimpleName: declare(426) into MethodDeclaration(416) at 4", "Move SingleVariableDeclaration(430) into MethodDeclaration(416) at 5", "Move SingleVariableDeclaration(494) into MethodDeclaration(416) at 6", "Move Block(513) into MethodDeclaration(416) at 7", "Move Modifier: public(515) into MethodDeclaration(450) at 0", "Update Modifier: public(543) to static", "Move Modifier: public(543) into MethodDeclaration(450) at 1", "Move SimpleType: CodeChunk.WithValue(577) into MethodDeclaration(450) at 2", "Insert SimpleName: declare(421) into MethodDeclaration(450) at 3", "Move SingleVariableDeclaration(476) into MethodDeclaration(450) at 4", "Insert SingleVariableDeclaration(429) into MethodDeclaration(450) at 5", "Move SingleVariableDeclaration(522) into MethodDeclaration(450) at 6", "Move SingleVariableDeclaration(553) into MethodDeclaration(450) at 7", "Move Block(603) into MethodDeclaration(450) at 8", "Insert QualifiedName: CodeChunk.WithValue(398) into SimpleType: CodeChunk.WithValue(399) at 0", "Update SimpleType: WithValue(492) to CodeChunk.WithValue", "Insert ReturnStatement(414) into Block(415) at 0", "Insert SimpleType: CodeChunk.WithValue(427) into SingleVariableDeclaration(429) at 0", "Insert SimpleName: value(428) into SingleVariableDeclaration(429) at 1", "Update TextElement: Returns a code chunk that assigns a variable with the given name.(373) to Creates a code chunk that assigns value to a preexisting variable with the given name. ", "Update TextElement: Returns a builder for a new code chunk that declares a variable with the given name.(408) to Creates a code chunk that declares a new variable and assigns a value to it. ", "Insert QualifiedName: CodeChunk.WithValue(405) into SimpleType: CodeChunk.WithValue(406) at 0", "Insert MethodInvocation(413) into ReturnStatement(414) at 0", "Insert QualifiedName: CodeChunk.WithValue(426) into SimpleType: CodeChunk.WithValue(427) at 0", "Update SimpleName: checkState(495) to Declaration", "Move SimpleName: checkState(495) into MethodInvocation(413) at 0", "Insert SimpleName: create(410) into MethodInvocation(413) at 1", "Insert SimpleName: varName(411) into MethodInvocation(413) at 2", "Move SimpleName: rhs(507) into MethodInvocation(413) at 3", "Insert SimpleName: value(444) into MethodInvocation(447) at 3", "Update SimpleName: of(597) to typeExpr", "Move SimpleName: of(597) into MethodInvocation(447) at 5", "Insert SimpleName: requires(446) into MethodInvocation(447) at 5", "Insert MethodInvocation(1984) into ReturnStatement(1985) at 0", "Move SimpleName: CodeChunk(2134) into MethodInvocation(1984) at 0", "Move SimpleName: declare(2135) into MethodInvocation(1984) at 1", "Move MethodInvocation(2137) into MethodInvocation(1984) at 2", "Move SimpleName: rhs(2140) into MethodInvocation(1984) at 3", "Move MethodInvocation(2381) into MethodInvocation(2221) at 2", "Move SimpleName: CodeChunk(2374) into MethodInvocation(2220) at 0", "Move SimpleName: declare(2375) into MethodInvocation(2220) at 1", "Move MethodInvocation(2377) into MethodInvocation(2220) at 2", "Delete QualifiedName: com.google.common.base.Preconditions.checkNotNull(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.common.base.Preconditions.checkState(4)", "Delete ImportDeclaration(5)", "Delete TextElement: <p>Most callers should use (374)", "Delete QualifiedName: CodeChunk.Generator(375)", "Delete SimpleName: assign(376)", "Delete SimpleName: WithValue(377)", "Delete SimpleType: WithValue(378)", "Delete MethodRefParameter(379)", "Delete MethodRef(380)", "Delete TagElement: @link(381)", "Delete TextElement: . This method should(382)", "Delete TextElement: only be used when this chunk is being inserted into foreign code that requires a variable of(383)", "Delete TextElement: the given name to exist.(384)", "Delete TextElement: <p>Most callers should use (409)", "Delete QualifiedName: CodeChunk.Generator(410)", "Delete SimpleName: declare(411)", "Delete SimpleName: WithValue(412)", "Delete SimpleType: WithValue(413)", "Delete MethodRefParameter(414)", "Delete MethodRef(415)", "Delete TagElement: @link(416)", "Delete TextElement: . This method should(417)", "Delete TextElement: only be used when this chunk is being inserted into foreign code that requires a variable of(418)", "Delete TextElement: the given name to exist.(419)", "Delete SimpleName: DeclarationBuilder(424)", "Delete SimpleName: WithValue(491)", "Delete ThisExpression(496)", "Delete SimpleName: rhs(497)", "Delete FieldAccess(498)", "Delete NullLiteral(499)", "Delete InfixExpression: ==(500)", "Delete MethodInvocation(501)", "Delete ExpressionStatement(502)", "Delete ThisExpression(503)", "Delete SimpleName: rhs(504)", "Delete FieldAccess(505)", "Delete SimpleName: checkNotNull(506)", "Delete MethodInvocation(508)", "Delete Assignment: =(509)", "Delete ExpressionStatement(510)", "Delete ThisExpression(511)", "Delete ReturnStatement(512)", "Delete SimpleName: checkState(579)", "Delete SimpleName: rhs(580)", "Delete NullLiteral(581)", "Delete InfixExpression: !=(582)", "Delete StringLiteral: \"must set an initial value\"(583)", "Delete MethodInvocation(584)", "Delete ExpressionStatement(585)", "Delete SimpleName: typeExpr(588)", "Delete SimpleName: rhs(590)", "Delete SimpleName: requires(591)", "Delete NullLiteral(592)", "Delete InfixExpression: ==(593)", "Delete SimpleName: ImmutableSet(594)", "Delete SimpleName: GoogRequire(595)", "Delete SimpleType: GoogRequire(596)", "Delete MethodInvocation(598)", "Delete SimpleName: requires(599)", "Delete ConditionalExpression(600)", "Delete SimpleName: DeclarationBuilder(431)", "Delete SimpleType: DeclarationBuilder(432)", "Delete SimpleName: varName(433)", "Delete ClassInstanceCreation(434)", "Delete ReturnStatement(435)", "Delete Block(436)", "Delete MethodDeclaration(437)", "Delete TextElement: A builder for complex declarations. (438)", "Delete TagElement(439)", "Delete Javadoc(440)", "Delete Modifier: public(441)", "Delete Modifier: static(442)", "Delete Modifier: final(443)", "Delete SimpleName: DeclarationBuilder(444)", "Delete SimpleName: Nullable(445)", "Delete MarkerAnnotation(446)", "Delete SimpleName: String(447)", "Delete SimpleType: String(448)", "Delete SimpleName: typeExpr(449)", "Delete VariableDeclarationFragment(450)", "Delete FieldDeclaration(451)", "Delete SimpleName: Nullable(452)", "Delete MarkerAnnotation(453)", "Delete SimpleName: ImmutableSet(454)", "Delete SimpleType: ImmutableSet(455)", "Delete SimpleName: GoogRequire(456)", "Delete SimpleType: GoogRequire(457)", "Delete ParameterizedType: ImmutableSet<GoogRequire>(458)", "Delete SimpleName: requires(459)", "Delete VariableDeclarationFragment(460)", "Delete FieldDeclaration(461)", "Delete SimpleName: String(462)", "Delete SimpleType: String(463)", "Delete SimpleName: varName(464)", "Delete VariableDeclarationFragment(465)", "Delete FieldDeclaration(466)", "Delete SimpleName: WithValue(467)", "Delete SimpleType: WithValue(468)", "Delete SimpleName: rhs(469)", "Delete VariableDeclarationFragment(470)", "Delete FieldDeclaration(471)", "Delete SimpleName: DeclarationBuilder(472)", "Delete ThisExpression(477)", "Delete SimpleName: varName(478)", "Delete FieldAccess(479)", "Delete SimpleName: checkNotNull(480)", "Delete SimpleName: varName(481)", "Delete MethodInvocation(482)", "Delete Assignment: =(483)", "Delete ExpressionStatement(484)", "Delete Block(485)", "Delete MethodDeclaration(486)", "Delete Modifier: public(487)", "Delete SimpleName: DeclarationBuilder(488)", "Delete SimpleType: DeclarationBuilder(489)", "Delete SimpleName: setInitialValue(490)", "Delete MethodDeclaration(514)", "Delete SimpleName: DeclarationBuilder(516)", "Delete SimpleType: DeclarationBuilder(517)", "Delete SimpleName: setTypeExpression(518)", "Delete SimpleName: checkState(523)", "Delete ThisExpression(524)", "Delete SimpleName: typeExpr(525)", "Delete FieldAccess(526)", "Delete NullLiteral(527)", "Delete InfixExpression: ==(528)", "Delete MethodInvocation(529)", "Delete ExpressionStatement(530)", "Delete ThisExpression(531)", "Delete SimpleName: typeExpr(532)", "Delete FieldAccess(533)", "Delete SimpleName: checkNotNull(534)", "Delete SimpleName: typeExpr(535)", "Delete MethodInvocation(536)", "Delete Assignment: =(537)", "Delete ExpressionStatement(538)", "Delete ThisExpression(539)", "Delete ReturnStatement(540)", "Delete Block(541)", "Delete MethodDeclaration(542)", "Delete SimpleName: DeclarationBuilder(544)", "Delete SimpleType: DeclarationBuilder(545)", "Delete SimpleName: setGoogRequiresForType(546)", "Delete SimpleName: checkState(554)", "Delete ThisExpression(555)", "Delete SimpleName: requires(556)", "Delete FieldAccess(557)", "Delete NullLiteral(558)", "Delete InfixExpression: ==(559)", "Delete MethodInvocation(560)", "Delete ExpressionStatement(561)", "Delete ThisExpression(562)", "Delete SimpleName: requires(563)", "Delete FieldAccess(564)", "Delete SimpleName: ImmutableSet(565)", "Delete SimpleName: copyOf(566)", "Delete SimpleName: requires(567)", "Delete MethodInvocation(568)", "Delete Assignment: =(569)", "Delete ExpressionStatement(570)", "Delete ThisExpression(571)", "Delete ReturnStatement(572)", "Delete Block(573)", "Delete MethodDeclaration(574)", "Delete Modifier: public(575)", "Delete SimpleName: build(578)", "Delete MethodDeclaration(604)", "Delete TypeDeclaration: class(605)", "Delete MethodInvocation(2138)", "Delete SimpleName: setInitialValue(2139)", "Delete MethodInvocation(2141)", "Delete SimpleName: build(2142)", "Delete MethodInvocation(2143)", "Delete MethodInvocation(2378)", "Delete SimpleName: setInitialValue(2379)", "Delete SimpleName: build(2382)", "Delete MethodInvocation(2383)"]}}, {"Declaration_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS MethodInvocation to ClassInstanceCreation at 4", "INS ReturnStatement to Block at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: Declaration to SimpleType: Declaration at 0", "INS SimpleName: rhs to SingleVariableDeclaration at 1", "INS SimpleType: AutoValue_Declaration to ClassInstanceCreation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: ImmutableSet to MethodInvocation at 0", "INS NullLiteral to ClassInstanceCreation at 3", "INS SimpleName: varName to ClassInstanceCreation at 1", "INS Modifier: static to MethodDeclaration at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: rhs to ClassInstanceCreation at 2", "INS SimpleName: AutoValue_Declaration to SimpleType: AutoValue_Declaration at 0", "INS SimpleName: GoogRequire to SimpleType: GoogRequire at 0", "INS SimpleName: create to MethodDeclaration at 2", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleType: Declaration to MethodDeclaration at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: of to MethodInvocation at 2", "INS SimpleName: varName to SingleVariableDeclaration at 1", "INS QualifiedName: CodeChunk.WithValue to SimpleType: CodeChunk.WithValue at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: GoogRequire to MethodInvocation at 1", "INS SimpleType: CodeChunk.WithValue to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 9"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 6"]}]}}, {"Declaration_diff": {"operations": ["Insert MethodDeclaration(77) into TypeDeclaration: class(304) at 9", "Move SingleVariableDeclaration(61) into MethodDeclaration(115) at 6", "Insert Modifier: static(52) into MethodDeclaration(77) at 0", "Insert SimpleType: Declaration(54) into MethodDeclaration(77) at 1", "Insert SimpleName: create(55) into MethodDeclaration(77) at 2", "Insert SingleVariableDeclaration(59) into MethodDeclaration(77) at 3", "Insert SingleVariableDeclaration(63) into MethodDeclaration(77) at 4", "Insert Block(76) into MethodDeclaration(77) at 5", "Insert SimpleName: Declaration(53) into SimpleType: Declaration(54) at 0", "Insert SimpleType: String(57) into SingleVariableDeclaration(59) at 0", "Insert SimpleName: varName(58) into SingleVariableDeclaration(59) at 1", "Insert SimpleType: CodeChunk.WithValue(61) into SingleVariableDeclaration(63) at 0", "Insert SimpleName: rhs(62) into SingleVariableDeclaration(63) at 1", "Insert ReturnStatement(75) into Block(76) at 0", "Insert SimpleName: String(56) into SimpleType: String(57) at 0", "Insert QualifiedName: CodeChunk.WithValue(60) into SimpleType: CodeChunk.WithValue(61) at 0", "Insert ClassInstanceCreation(74) into ReturnStatement(75) at 0", "Insert SimpleType: AutoValue_Declaration(65) into ClassInstanceCreation(74) at 0", "Insert SimpleName: varName(66) into ClassInstanceCreation(74) at 1", "Insert SimpleName: rhs(67) into ClassInstanceCreation(74) at 2", "Insert NullLiteral(68) into ClassInstanceCreation(74) at 3", "Insert MethodInvocation(73) into ClassInstanceCreation(74) at 4", "Insert SimpleName: AutoValue_Declaration(64) into SimpleType: AutoValue_Declaration(65) at 0", "Insert SimpleName: ImmutableSet(69) into MethodInvocation(73) at 0", "Insert SimpleType: GoogRequire(71) into MethodInvocation(73) at 1", "Insert SimpleName: of(72) into MethodInvocation(73) at 2", "Insert SimpleName: GoogRequire(70) into SimpleType: GoogRequire(71) at 0"]}}, {"GoogRequire_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.declare to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.dottedIdNoRequire to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.dottedIdWithRequires to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.id to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.stringLiteral to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 5"]}, {"root": "UPDATE from a code chunk that will generate the  to A code chunk that will generate the ", "operations": ["UPD TextElement: a code chunk that will generate the  from a code chunk that will generate the  to A code chunk that will generate the "]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 2", "operations": ["INS MethodInvocation to ClassInstanceCreation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: alias to MethodInvocation at 1", "MOV SimpleName: declare to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "DEL SimpleName: CodeChunk", "operations": ["DEL SimpleName: CodeChunk"]}, {"root": "DEL SimpleName: CodeChunk", "operations": ["DEL SimpleName: CodeChunk"]}, {"root": "DEL SimpleName: CodeChunk", "operations": ["DEL SimpleName: CodeChunk"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: CodeChunk", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: setInitialValue", "DEL SimpleName: build"]}, {"root": "DEL SimpleName: CodeChunk", "operations": ["DEL SimpleName: CodeChunk"]}, {"root": "DEL SimpleName: CodeChunk", "operations": ["DEL SimpleName: CodeChunk"]}]}}, {"GoogRequire_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(235) at 1", "Insert ImportDeclaration(5) into CompilationUnit(235) at 2", "Insert ImportDeclaration(7) into CompilationUnit(235) at 3", "Insert ImportDeclaration(9) into CompilationUnit(235) at 4", "Insert ImportDeclaration(11) into CompilationUnit(235) at 5", "Insert QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.declare(2) into ImportDeclaration(3) at 0", "Insert QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.dottedIdNoRequire(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.dottedIdWithRequires(6) into ImportDeclaration(7) at 0", "Insert QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.id(8) into ImportDeclaration(9) at 0", "Insert QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.stringLiteral(10) into ImportDeclaration(11) at 0", "Update TextElement: a code chunk that will generate the (123) to A code chunk that will generate the ", "Insert MethodInvocation(111) into ClassInstanceCreation(112) at 2", "Move SimpleName: declare(96) into MethodInvocation(111) at 0", "Move SimpleName: alias(97) into MethodInvocation(111) at 1", "Move MethodInvocation(106) into MethodInvocation(111) at 2", "Delete SimpleName: CodeChunk(28)", "Delete SimpleName: CodeChunk(56)", "Delete SimpleName: CodeChunk(102)", "Delete SimpleName: CodeChunk(95)", "Delete MethodInvocation(98)", "Delete SimpleName: setInitialValue(99)", "Delete MethodInvocation(107)", "Delete SimpleName: build(108)", "Delete MethodInvocation(109)", "Delete SimpleName: CodeChunk(146)", "Delete SimpleName: CodeChunk(163)"]}}, {"GenJsCodeVisitor_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS ImportDeclaration to CompilationUnit at 11", "INS QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.switch_ to ImportDeclaration at 0"]}, {"root": "UPDATE from com.google.template.soy.jssrc.dsl.CodeChunk.DeclarationBuilder to com.google.template.soy.jssrc.dsl.CodeChunk.forLoop", "operations": ["UPD QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.DeclarationBuilder from com.google.template.soy.jssrc.dsl.CodeChunk.DeclarationBuilder to com.google.template.soy.jssrc.dsl.CodeChunk.forLoop"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS ExpressionStatement to Block at 13", "operations": ["INS ExpressionStatement to Block at 13", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: generatedVarName to MethodInvocation at 1", "MOV SimpleName: declare to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: declare to MethodInvocation at 0", "MOV SimpleName: listName to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: declare to MethodInvocation at 0", "MOV SimpleName: dataName to MethodInvocation at 1"]}, {"root": "UPDATE from DeclarationBuilder to String", "operations": ["UPD SimpleType: DeclarationBuilder from DeclarationBuilder to String", "UPD SimpleName: DeclarationBuilder from DeclarationBuilder to String"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from builder to closureTypeExpr", "operations": ["UPD SimpleName: builder from builder to closureTypeExpr", "UPD SimpleName: build from build to closureTypeExpr"]}, {"root": "INS ConditionalExpression to VariableDeclarationFragment at 1", "operations": ["INS ConditionalExpression to VariableDeclarationFragment at 1", "INS NullLiteral to ConditionalExpression at 2"]}, {"root": "UPDATE from builder to jsCodeBuilder", "operations": ["UPD SimpleName: builder from builder to jsCodeBuilder"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setTypeExpression to MethodInvocation at 1", "MOV MethodInvocation to ConditionalExpression at 1", "MOV SimpleName: builder to MethodInvocation at 0"]}, {"root": "UPDATE from setTypeExpression to append", "operations": ["UPD SimpleName: setTypeExpression from setTypeExpression to append"]}, {"root": "INS SimpleName: limit to MethodInvocation at 2", "operations": ["INS SimpleName: limit to MethodInvocation at 2"]}, {"root": "INS SimpleName: increment to MethodInvocation at 2", "operations": ["INS SimpleName: increment to MethodInvocation at 2"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 0"]}, {"root": "UPDATE from setGoogRequiresForType to declare", "operations": ["UPD SimpleName: setGoogRequiresForType from setGoogRequiresForType to declare"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 4", "MOV SimpleName: setGoogRequiresForType to MethodInvocation at 0"]}, {"root": "UPDATE from setInitialValue to paramAlias", "operations": ["UPD SimpleName: setInitialValue from setInitialValue to paramAlias"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setInitialValue to MethodInvocation at 1", "MOV SimpleName: value to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: build to MethodInvocation at 3"]}, {"root": "DEL SimpleName: CodeChunk", "operations": ["DEL SimpleName: CodeChunk"]}, {"root": "DEL SimpleName: CodeChunk", "operations": ["DEL SimpleName: CodeChunk"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: setInitialValue", "operations": ["DEL SimpleName: setInitialValue"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: build", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: CodeChunk", "operations": ["DEL SimpleName: CodeChunk"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: setInitialValue", "operations": ["DEL SimpleName: setInitialValue"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: build", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: build", "DEL SimpleName: setInitialValue", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: setInitialValue", "operations": ["DEL SimpleName: setInitialValue"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: build"]}, {"root": "DEL SimpleName: CodeChunk", "operations": ["DEL SimpleName: CodeChunk"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: setInitialValue", "DEL MethodInvocation", "DEL SimpleName: limit", "DEL SimpleName: build"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: build", "DEL MethodInvocation", "DEL SimpleName: increment", "DEL SimpleName: setInitialValue"]}, {"root": "DEL SimpleName: CodeChunk", "operations": ["DEL SimpleName: CodeChunk"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: declare", "DEL SimpleName: paramAlias"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL IfStatement", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: builder", "DEL MethodInvocation", "DEL SimpleType: CodeChunk.WithValue", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL QualifiedName: CodeChunk.WithValue", "DEL SimpleName: declaration", "DEL MethodInvocation", "DEL VariableDeclarationStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: declaration", "DEL SimpleName: jsCodeBuilder", "DEL SimpleName: append"]}]}}, {"GenJsCodeVisitor_diff": {"operations": ["Move ImportDeclaration(81) into CompilationUnit(4801) at 6", "Insert ImportDeclaration(23) into CompilationUnit(4801) at 11", "Update QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.DeclarationBuilder(80) to com.google.template.soy.jssrc.dsl.CodeChunk.forLoop", "Insert QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.switch_(22) into ImportDeclaration(23) at 0", "Move MethodInvocation(2894) into MethodInvocation(2893) at 2", "Move MethodInvocation(3584) into MethodInvocation(3578) at 2", "Move MethodInvocation(3593) into MethodInvocation(3590) at 2", "Move MethodInvocation(3819) into VariableDeclarationFragment(3805) at 1", "Insert ExpressionStatement(4701) into Block(4712) at 13", "Move SimpleName: declare(2889) into MethodInvocation(2892) at 0", "Move SimpleName: generatedVarName(2890) into MethodInvocation(2892) at 1", "Move SimpleName: declare(3579) into MethodInvocation(3577) at 0", "Move SimpleName: listName(3580) into MethodInvocation(3577) at 1", "Move MethodInvocation(3599) into MethodInvocation(3589) at 2", "Move SimpleName: declare(3809) into MethodInvocation(3804) at 0", "Move SimpleName: dataName(3810) into MethodInvocation(3804) at 1", "Update SimpleType: DeclarationBuilder(4705) to String", "Insert MethodInvocation(4700) into ExpressionStatement(4701) at 0", "Move MethodInvocation(3973) into Assignment: =(3957) at 1", "Move MethodInvocation(3998) into Assignment: =(3978) at 1", "Update SimpleName: DeclarationBuilder(4704) to String", "Update SimpleName: builder(4706) to closureTypeExpr", "Insert ConditionalExpression(4687) into VariableDeclarationFragment(4688) at 1", "Update SimpleName: builder(4715) to jsCodeBuilder", "Move SimpleName: builder(4715) into MethodInvocation(4700) at 0", "Update SimpleName: setTypeExpression(4716) to append", "Move SimpleName: setTypeExpression(4716) into MethodInvocation(4700) at 1", "Insert MethodInvocation(4699) into MethodInvocation(4700) at 2", "Insert SimpleName: limit(3955) into MethodInvocation(3956) at 2", "Insert SimpleName: increment(3976) into MethodInvocation(3977) at 2", "Move MethodInvocation(4714) into ConditionalExpression(4687) at 0", "Move MethodInvocation(4719) into ConditionalExpression(4687) at 1", "Insert NullLiteral(4686) into ConditionalExpression(4687) at 2", "Update SimpleName: setGoogRequiresForType(4728) to declare", "Move SimpleName: setGoogRequiresForType(4728) into MethodInvocation(4699) at 0", "Update SimpleName: setInitialValue(4733) to paramAlias", "Move SimpleName: setInitialValue(4733) into MethodInvocation(4699) at 1", "Move SimpleName: value(4734) into MethodInvocation(4699) at 2", "Update SimpleName: build(4736) to closureTypeExpr", "Move SimpleName: build(4736) into MethodInvocation(4699) at 3", "Move MethodInvocation(4731) into MethodInvocation(4699) at 4", "Delete SimpleName: CodeChunk(2418)", "Delete SimpleName: CodeChunk(2436)", "Delete MethodInvocation(2891)", "Delete SimpleName: setInitialValue(2892)", "Delete SimpleName: build(2895)", "Delete MethodInvocation(2896)", "Delete SimpleName: CodeChunk(3264)", "Delete MethodInvocation(3581)", "Delete SimpleName: setInitialValue(3582)", "Delete SimpleName: build(3585)", "Delete MethodInvocation(3586)", "Delete SimpleName: setInitialValue(3594)", "Delete MethodInvocation(3600)", "Delete SimpleName: build(3601)", "Delete MethodInvocation(3602)", "Delete MethodInvocation(3811)", "Delete SimpleName: setInitialValue(3812)", "Delete SimpleName: build(3820)", "Delete MethodInvocation(3821)", "Delete SimpleName: CodeChunk(3853)", "Delete SimpleName: setInitialValue(3974)", "Delete SimpleName: limit(3975)", "Delete MethodInvocation(3976)", "Delete SimpleName: build(3977)", "Delete MethodInvocation(3978)", "Delete SimpleName: setInitialValue(3999)", "Delete SimpleName: increment(4000)", "Delete MethodInvocation(4001)", "Delete SimpleName: build(4002)", "Delete MethodInvocation(4003)", "Delete SimpleName: CodeChunk(4029)", "Delete SimpleName: declare(4707)", "Delete SimpleName: paramAlias(4708)", "Delete MethodInvocation(4709)", "Delete MethodInvocation(4720)", "Delete ExpressionStatement(4721)", "Delete Block(4722)", "Delete IfStatement(4723)", "Delete QualifiedName: CodeChunk.WithValue(4724)", "Delete SimpleType: CodeChunk.WithValue(4725)", "Delete SimpleName: declaration(4726)", "Delete SimpleName: builder(4727)", "Delete MethodInvocation(4732)", "Delete MethodInvocation(4735)", "Delete MethodInvocation(4737)", "Delete VariableDeclarationFragment(4738)", "Delete VariableDeclarationStatement(4739)", "Delete SimpleName: jsCodeBuilder(4740)", "Delete SimpleName: append(4741)", "Delete SimpleName: declaration(4742)", "Delete MethodInvocation(4743)", "Delete ExpressionStatement(4744)"]}}, {"GenJsCodeVisitorAssistantForMsgs_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.declare to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.mapLiteral to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0", "MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "UPDATE from build to append", "operations": ["UPD SimpleName: build from build to append"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: declare to MethodInvocation at 0", "MOV QualifiedName: googMsgCodeGenInfo.googMsgVarName to MethodInvocation at 1"]}, {"root": "DEL SimpleName: CodeChunk", "operations": ["DEL SimpleName: CodeChunk"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: build", "DEL SimpleName: setInitialValue"]}, {"root": "DEL SimpleName: CodeChunk", "operations": ["DEL SimpleName: CodeChunk"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: setInitialValue", "DEL SimpleName: build", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: CodeChunk", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: setInitialValue", "operations": ["DEL SimpleName: setInitialValue"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: append", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: CodeChunk", "operations": ["DEL SimpleName: CodeChunk"]}]}}, {"GenJsCodeVisitorAssistantForMsgs_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(1913) at 1", "Insert ImportDeclaration(7) into CompilationUnit(1913) at 3", "Insert QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.declare(2) into ImportDeclaration(3) at 0", "Insert QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.mapLiteral(6) into ImportDeclaration(7) at 0", "Move MethodInvocation(461) into MethodInvocation(468) at 2", "Move MethodInvocation(465) into MethodInvocation(467) at 3", "Move MethodInvocation(826) into ExpressionStatement(817) at 0", "Move MethodInvocation(824) into MethodInvocation(816) at 2", "Move MethodInvocation(797) into MethodInvocation(800) at 2", "Move MethodInvocation(810) into MethodInvocation(816) at 0", "Update SimpleName: build(825) to append", "Move MethodInvocation(802) into MethodInvocation(799) at 3", "Move SimpleName: declare(813) into MethodInvocation(815) at 0", "Move QualifiedName: googMsgCodeGenInfo.googMsgVarName(814) into MethodInvocation(815) at 1", "Delete SimpleName: CodeChunk(458)", "Delete SimpleName: setInitialValue(462)", "Delete MethodInvocation(466)", "Delete SimpleName: build(467)", "Delete MethodInvocation(468)", "Delete SimpleName: CodeChunk(794)", "Delete SimpleName: setInitialValue(798)", "Delete MethodInvocation(803)", "Delete SimpleName: build(804)", "Delete MethodInvocation(805)", "Delete SimpleName: CodeChunk(812)", "Delete MethodInvocation(815)", "Delete SimpleName: setInitialValue(816)", "Delete SimpleName: append(811)", "Delete MethodInvocation(827)", "Delete SimpleName: CodeChunk(1911)"]}}, {"JsCodeBuilder_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.declare to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from setInitialValue to append", "operations": ["UPD SimpleName: setInitialValue from setInitialValue to append"]}, {"root": "INS SimpleName: rhs to MethodInvocation at 3", "operations": ["INS SimpleName: rhs to MethodInvocation at 3"]}, {"root": "DEL SimpleName: CodeChunk", "operations": ["DEL SimpleName: CodeChunk"]}, {"root": "DEL SimpleName: rhs", "operations": ["DEL SimpleName: rhs"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: build", "DEL MethodInvocation"]}]}}, {"JsCodeBuilder_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(925) at 1", "Insert QualifiedName: com.google.template.soy.jssrc.dsl.CodeChunk.declare(2) into ImportDeclaration(3) at 0", "Move MethodInvocation(393) into ExpressionStatement(394) at 0", "Move MethodInvocation(390) into MethodInvocation(393) at 2", "Update SimpleName: setInitialValue(391) to append", "Insert SimpleName: rhs(391) into MethodInvocation(392) at 2", "Delete SimpleName: CodeChunk(383)", "Delete SimpleName: rhs(392)", "Delete SimpleName: append(382)", "Delete SimpleName: build(394)", "Delete MethodInvocation(395)", "Delete MethodInvocation(396)"]}}], "commit_stats": [{"total_files": 7, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}