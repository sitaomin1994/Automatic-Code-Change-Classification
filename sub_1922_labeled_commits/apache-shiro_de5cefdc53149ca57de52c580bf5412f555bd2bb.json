{"application": "apache-shiro", "csha": "de5cefdc53149ca57de52c580bf5412f555bd2bb", "files": [{"DefaultSubjectDAO_cluster": {"actions": []}}, {"DefaultSubjectDAO_diff": {"operations": []}}, {"DelegatingSubject_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 25"]}, {"root": "UPDATE from java.util.ArrayList to java.util.concurrent.CopyOnWriteArrayList", "operations": ["UPD QualifiedName: java.util.ArrayList from java.util.ArrayList to java.util.concurrent.CopyOnWriteArrayList"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 47", "operations": ["INS Modifier: private to MethodDeclaration at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 47", "INS SimpleName: clearRunAsIdentitiesInternal to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 3"]}, {"root": "UPDATE from isRunAs to getRunAsPrincipalsStack", "operations": ["UPD SimpleName: isRunAs from isRunAs to getRunAsPrincipalsStack", "UPD SimpleName: getRunAsPrincipals from getRunAsPrincipals to getRunAsPrincipalsStack"]}, {"root": "UPDATE from where caching strategies are better suited. to where caching strategies are better managed.", "operations": ["UPD TextElement: where caching strategies are better suited. from where caching strategies are better suited. to where caching strategies are better managed."]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: getRunAsPrincipalsStack to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: runAsPrincipals to VariableDeclarationFragment at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: clearRunAsIdentitiesInternal to MethodInvocation at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS SimpleType: List to ParameterizedType: List<PrincipalCollection> at 0", "INS SimpleName: List to SimpleType: List at 0", "INS ParameterizedType: List<PrincipalCollection> to VariableDeclarationStatement at 0", "INS SimpleType: PrincipalCollection to ParameterizedType: List<PrincipalCollection> at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getRunAsPrincipalsStack to MethodInvocation at 0", "INS SimpleName: stack to VariableDeclarationFragment at 0", "INS SimpleName: PrincipalCollection to SimpleType: PrincipalCollection at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: previousPrincipals to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: PrincipalCollection to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: PrincipalCollection to SimpleType: PrincipalCollection at 0", "INS NullLiteral to VariableDeclarationFragment at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS ParameterizedType: List<PrincipalCollection> to VariableDeclarationStatement at 0", "INS SimpleName: PrincipalCollection to SimpleType: PrincipalCollection at 0", "INS SimpleName: List to SimpleType: List at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleType: List to ParameterizedType: List<PrincipalCollection> at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: PrincipalCollection to ParameterizedType: List<PrincipalCollection> at 1", "INS SimpleName: stack to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS InfixExpression: != to ConditionalExpression at 0", "INS VariableDeclarationStatement to Block at 2", "INS MethodInvocation to ConditionalExpression at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: stack to InfixExpression: != at 0", "INS SimpleName: size to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: stackSize to VariableDeclarationFragment at 0", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: stack to MethodInvocation at 0", "INS NumberLiteral: 0 to ConditionalExpression at 2"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS SimpleName: previousPrincipals to Assignment: = at 0", "INS NumberLiteral: 1 to InfixExpression: == at 1", "INS IfStatement to Block at 3", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS SimpleName: stackSize to InfixExpression: > at 0", "INS AssertStatement to Block at 0", "INS Block to IfStatement at 1", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: stack to InfixExpression: != at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: stackSize to InfixExpression: == at 0", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: > to IfStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS Block to IfStatement at 2", "INS Block to IfStatement at 1", "INS MethodInvocation to Assignment: = at 1", "INS IfStatement to Block at 0", "INS SimpleName: previousPrincipals to Assignment: = at 0", "INS InfixExpression: != to AssertStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: stack to MethodInvocation at 0"]}, {"root": "INS ReturnStatement to Block at 4", "operations": ["INS ReturnStatement to Block at 4", "INS SimpleName: previousPrincipals to ReturnStatement at 0"]}, {"root": "INS StringLiteral: \"unchecked\" to SingleMemberAnnotation at 1", "operations": ["INS StringLiteral: \"unchecked\" to SingleMemberAnnotation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: Session to SimpleType: Session at 0", "INS SimpleName: getSession to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: Session to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS BooleanLiteral: false to MethodInvocation at 1", "INS SimpleName: session to VariableDeclarationFragment at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationStatement to Block at 1", "INS ParameterizedType: List<PrincipalCollection> to VariableDeclarationStatement at 0", "INS SimpleName: PrincipalCollection to SimpleType: PrincipalCollection at 0", "INS SimpleType: PrincipalCollection to ParameterizedType: List<PrincipalCollection> at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: List to ParameterizedType: List<PrincipalCollection> at 0", "INS SimpleName: stack to VariableDeclarationFragment at 0", "INS SimpleName: getRunAsPrincipalsStack to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: List to SimpleType: List at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleName: List to SimpleType: List at 0", "INS ParameterizedType: List<PrincipalCollection> to VariableDeclarationStatement at 0", "INS SimpleType: List to ParameterizedType: List<PrincipalCollection> at 0", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: PrincipalCollection to ParameterizedType: List<PrincipalCollection> at 1", "INS SimpleName: stack to VariableDeclarationFragment at 0", "INS SimpleName: getRunAsPrincipalsStack to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: PrincipalCollection to SimpleType: PrincipalCollection at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: List<PrincipalCollection> to VariableDeclarationStatement at 0"]}, {"root": "INS Block to TryStatement at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: clearRunAsIdentitiesInternal to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to TryStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "INS SimpleName: stack to InfixExpression: == at 0", "operations": ["INS SimpleName: stack to InfixExpression: == at 0"]}, {"root": "INS SimpleName: stack to MethodInvocation at 0", "operations": ["INS SimpleName: stack to MethodInvocation at 0"]}, {"root": "INS SimpleName: stack to MethodInvocation at 3", "operations": ["INS SimpleName: stack to MethodInvocation at 3"]}, {"root": "INS SimpleName: runAsPrincipals to MethodInvocation at 2", "operations": ["INS SimpleName: runAsPrincipals to MethodInvocation at 2"]}, {"root": "INS SimpleName: runAsPrincipals to MethodInvocation at 0", "operations": ["INS SimpleName: runAsPrincipals to MethodInvocation at 0"]}, {"root": "INS SimpleName: stack to MethodInvocation at 2", "operations": ["INS SimpleName: stack to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: isRunAs to MethodInvocation at 0"]}, {"root": "INS SimpleName: stack to MethodInvocation at 2", "operations": ["INS SimpleName: stack to MethodInvocation at 2"]}, {"root": "INS SimpleName: stack to Assignment: = at 0", "operations": ["INS SimpleName: stack to Assignment: = at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from ArrayList<PrincipalCollection> to CopyOnWriteArrayList<PrincipalCollection>", "operations": ["UPD ParameterizedType: ArrayList<PrincipalCollection> from ArrayList<PrincipalCollection> to CopyOnWriteArrayList<PrincipalCollection>"]}, {"root": "INS SimpleName: stack to MethodInvocation at 0", "operations": ["INS SimpleName: stack to MethodInvocation at 0"]}, {"root": "INS SimpleName: stack to MethodInvocation at 2", "operations": ["INS SimpleName: stack to MethodInvocation at 2"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV FieldAccess to Assignment: = at 1"]}, {"root": "UPDATE from ArrayList to CopyOnWriteArrayList", "operations": ["UPD SimpleName: ArrayList from ArrayList to CopyOnWriteArrayList", "UPD SimpleType: ArrayList from ArrayList to CopyOnWriteArrayList"]}, {"root": "INS SimpleName: stack to MethodInvocation at 3", "operations": ["INS SimpleName: stack to MethodInvocation at 3"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL SimpleName: runAsPrincipals", "DEL FieldDeclaration"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: session", "DEL FieldAccess", "DEL SimpleName: getRunAsPrincipals", "DEL FieldAccess", "DEL ThisExpression", "DEL Assignment: =", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ThisExpression", "DEL SimpleName: runAsPrincipals"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL SimpleName: runAsPrincipals", "DEL ThisExpression"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL ThisExpression", "DEL SimpleName: runAsPrincipals"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: runAsPrincipals", "DEL SimpleName: getRunAsPrincipals", "DEL FieldAccess", "DEL SimpleName: session", "DEL FieldAccess", "DEL ThisExpression", "DEL ThisExpression", "DEL Assignment: =", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: runAsPrincipals", "DEL Assignment: =", "DEL ThisExpression", "DEL FieldAccess", "DEL ExpressionStatement", "DEL NullLiteral"]}, {"root": "DEL FieldAccess", "operations": ["DEL ThisExpression", "DEL SimpleName: runAsPrincipals", "DEL FieldAccess"]}, {"root": "DEL ReturnStatement", "operations": ["DEL MethodInvocation", "DEL ConditionalExpression", "DEL ReturnStatement", "DEL NullLiteral"]}, {"root": "DEL ArrayInitializer", "operations": ["DEL ArrayInitializer", "DEL StringLiteral: \"unchecked\""]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: session", "DEL SimpleName: Session", "DEL SingleVariableDeclaration", "DEL SimpleType: Session"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL ThisExpression", "DEL SimpleName: runAsPrincipals", "DEL NullLiteral", "DEL ExpressionStatement", "DEL FieldAccess"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: session", "DEL InfixExpression: !=", "DEL SimpleName: session", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: RUN_AS_PRINCIPALS_SESSION_KEY", "DEL SimpleName: removeAttribute", "DEL NullLiteral", "DEL ExpressionStatement", "DEL Block"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: runAsPrincipals", "DEL ThisExpression", "DEL FieldAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: runAsPrincipals", "DEL FieldAccess", "DEL ThisExpression"]}, {"root": "DEL FieldAccess", "operations": ["DEL ThisExpression", "DEL SimpleName: runAsPrincipals", "DEL FieldAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: runAsPrincipals", "DEL ThisExpression", "DEL FieldAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL SimpleName: runAsPrincipals", "DEL ThisExpression"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: runAsPrincipals", "DEL ThisExpression", "DEL FieldAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL ThisExpression", "DEL SimpleName: runAsPrincipals", "DEL FieldAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL ThisExpression", "DEL FieldAccess", "DEL SimpleName: runAsPrincipals"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: session", "DEL Assignment: =", "DEL SimpleName: getSession", "DEL BooleanLiteral: false", "DEL ExpressionStatement", "DEL MethodInvocation"]}]}}, {"DelegatingSubject_diff": {"operations": ["Move ImportDeclaration(43) into CompilationUnit(1777) at 25", "Update QualifiedName: java.util.ArrayList(42) to java.util.concurrent.CopyOnWriteArrayList", "Insert MethodDeclaration(1223) into TypeDeclaration: class(1776) at 46", "Insert Modifier: private(1200) into MethodDeclaration(1223) at 0", "Insert PrimitiveType: void(1201) into MethodDeclaration(1223) at 1", "Insert SimpleName: clearRunAsIdentitiesInternal(1202) into MethodDeclaration(1223) at 2", "Move Block(1252) into MethodDeclaration(1223) at 3", "Update SimpleName: getRunAsPrincipals(1552) to getRunAsPrincipalsStack", "Update TextElement: where caching strategies are better suited.(93) to where caching strategies are better managed.", "Insert VariableDeclarationStatement(409) into Block(423) at 0", "Insert ExpressionStatement(844) into Block(986) at 0", "Insert VariableDeclarationStatement(1497) into Block(1504) at 0", "Insert VariableDeclarationStatement(1515) into Block(1568) at 0", "Insert VariableDeclarationStatement(1525) into Block(1568) at 1", "Insert VariableDeclarationStatement(1537) into Block(1568) at 2", "Insert IfStatement(1565) into Block(1568) at 3", "Insert ReturnStatement(1567) into Block(1568) at 4", "Insert StringLiteral: \"unchecked\"(1580) into SingleMemberAnnotation(1581) at 1", "Insert VariableDeclarationStatement(1596) into Block(1615) at 0", "Move IfStatement(1742) into Block(1638) at 2", "Insert VariableDeclarationStatement(1675) into Block(1709) at 1", "Insert VariableDeclarationStatement(1730) into Block(1774) at 1", "Move ParameterizedType: List<PrincipalCollection>(171) into VariableDeclarationStatement(409) at 0", "Insert VariableDeclarationFragment(408) into VariableDeclarationStatement(409) at 1", "Insert MethodInvocation(843) into ExpressionStatement(844) at 0", "Insert Block(1237) into TryStatement(1257) at 0", "Insert ParameterizedType: List<PrincipalCollection>(1492) into VariableDeclarationStatement(1497) at 0", "Insert VariableDeclarationFragment(1496) into VariableDeclarationStatement(1497) at 1", "Insert SimpleType: PrincipalCollection(1511) into VariableDeclarationStatement(1515) at 0", "Insert VariableDeclarationFragment(1514) into VariableDeclarationStatement(1515) at 1", "Insert ParameterizedType: List<PrincipalCollection>(1520) into VariableDeclarationStatement(1525) at 0", "Insert VariableDeclarationFragment(1524) into VariableDeclarationStatement(1525) at 1", "Insert PrimitiveType: int(1526) into VariableDeclarationStatement(1537) at 0", "Insert VariableDeclarationFragment(1536) into VariableDeclarationStatement(1537) at 1", "Insert InfixExpression: >(1540) into IfStatement(1565) at 0", "Insert Block(1564) into IfStatement(1565) at 1", "Insert SimpleName: previousPrincipals(1566) into ReturnStatement(1567) at 0", "Insert SimpleType: Session(1590) into VariableDeclarationStatement(1596) at 0", "Insert VariableDeclarationFragment(1595) into VariableDeclarationStatement(1596) at 1", "Insert ParameterizedType: List<PrincipalCollection>(1670) into VariableDeclarationStatement(1675) at 0", "Insert VariableDeclarationFragment(1674) into VariableDeclarationStatement(1675) at 1", "Insert ParameterizedType: List<PrincipalCollection>(1725) into VariableDeclarationStatement(1730) at 0", "Insert VariableDeclarationFragment(1729) into VariableDeclarationStatement(1730) at 1", "Insert SimpleName: runAsPrincipals(405) into VariableDeclarationFragment(408) at 0", "Insert MethodInvocation(407) into VariableDeclarationFragment(408) at 1", "Insert SimpleName: clearRunAsIdentitiesInternal(842) into MethodInvocation(843) at 0", "Insert ExpressionStatement(1229) into Block(1237) at 0", "Move ExpressionStatement(1251) into Block(1237) at 1", "Insert SimpleType: List(1489) into ParameterizedType: List<PrincipalCollection>(1492) at 0", "Insert SimpleType: PrincipalCollection(1491) into ParameterizedType: List<PrincipalCollection>(1492) at 1", "Insert SimpleName: stack(1493) into VariableDeclarationFragment(1496) at 0", "Insert MethodInvocation(1495) into VariableDeclarationFragment(1496) at 1", "Insert SimpleName: PrincipalCollection(1510) into SimpleType: PrincipalCollection(1511) at 0", "Insert SimpleName: previousPrincipals(1512) into VariableDeclarationFragment(1514) at 0", "Insert NullLiteral(1513) into VariableDeclarationFragment(1514) at 1", "Insert SimpleType: List(1517) into ParameterizedType: List<PrincipalCollection>(1520) at 0", "Insert SimpleType: PrincipalCollection(1519) into ParameterizedType: List<PrincipalCollection>(1520) at 1", "Insert SimpleName: stack(1521) into VariableDeclarationFragment(1524) at 0", "Insert MethodInvocation(1523) into VariableDeclarationFragment(1524) at 1", "Insert SimpleName: stackSize(1527) into VariableDeclarationFragment(1536) at 0", "Insert ConditionalExpression(1535) into VariableDeclarationFragment(1536) at 1", "Insert SimpleName: stackSize(1538) into InfixExpression: >(1540) at 0", "Insert NumberLiteral: 0(1539) into InfixExpression: >(1540) at 1", "Insert IfStatement(1563) into Block(1564) at 0", "Insert SimpleName: Session(1589) into SimpleType: Session(1590) at 0", "Insert SimpleName: session(1591) into VariableDeclarationFragment(1595) at 0", "Insert MethodInvocation(1594) into VariableDeclarationFragment(1595) at 1", "Insert SimpleType: List(1667) into ParameterizedType: List<PrincipalCollection>(1670) at 0", "Insert SimpleType: PrincipalCollection(1669) into ParameterizedType: List<PrincipalCollection>(1670) at 1", "Insert SimpleName: stack(1671) into VariableDeclarationFragment(1674) at 0", "Insert MethodInvocation(1673) into VariableDeclarationFragment(1674) at 1", "Insert SimpleName: stack(1676) into InfixExpression: ==(1678) at 0", "Insert SimpleName: stack(1690) into MethodInvocation(1694) at 0", "Insert SimpleName: stack(1706) into MethodInvocation(1707) at 3", "Insert SimpleType: List(1722) into ParameterizedType: List<PrincipalCollection>(1725) at 0", "Insert SimpleType: PrincipalCollection(1724) into ParameterizedType: List<PrincipalCollection>(1725) at 1", "Insert SimpleName: stack(1726) into VariableDeclarationFragment(1729) at 0", "Insert MethodInvocation(1728) into VariableDeclarationFragment(1729) at 1", "Insert SimpleName: getRunAsPrincipalsStack(406) into MethodInvocation(407) at 0", "Insert SimpleName: runAsPrincipals(412) into MethodInvocation(413) at 2", "Insert SimpleName: runAsPrincipals(417) into MethodInvocation(420) at 0", "Insert MethodInvocation(1228) into ExpressionStatement(1229) at 0", "Insert SimpleName: List(1488) into SimpleType: List(1489) at 0", "Insert SimpleName: PrincipalCollection(1490) into SimpleType: PrincipalCollection(1491) at 0", "Insert SimpleName: getRunAsPrincipalsStack(1494) into MethodInvocation(1495) at 0", "Insert SimpleName: stack(1500) into MethodInvocation(1501) at 2", "Insert SimpleName: List(1516) into SimpleType: List(1517) at 0", "Insert SimpleName: PrincipalCollection(1518) into SimpleType: PrincipalCollection(1519) at 0", "Update SimpleName: isRunAs(1523) to getRunAsPrincipalsStack", "Move SimpleName: isRunAs(1523) into MethodInvocation(1523) at 0", "Insert InfixExpression: !=(1530) into ConditionalExpression(1535) at 0", "Insert MethodInvocation(1533) into ConditionalExpression(1535) at 1", "Insert NumberLiteral: 0(1534) into ConditionalExpression(1535) at 2", "Insert InfixExpression: ==(1543) into IfStatement(1563) at 0", "Insert Block(1550) into IfStatement(1563) at 1", "Insert Block(1562) into IfStatement(1563) at 2", "Insert SimpleName: getSession(1592) into MethodInvocation(1594) at 0", "Insert BooleanLiteral: false(1593) into MethodInvocation(1594) at 1", "Insert SimpleName: List(1666) into SimpleType: List(1667) at 0", "Insert SimpleName: PrincipalCollection(1668) into SimpleType: PrincipalCollection(1669) at 0", "Insert SimpleName: getRunAsPrincipalsStack(1672) into MethodInvocation(1673) at 0", "Insert SimpleName: List(1721) into SimpleType: List(1722) at 0", "Insert SimpleName: PrincipalCollection(1723) into SimpleType: PrincipalCollection(1724) at 0", "Insert SimpleName: getRunAsPrincipalsStack(1727) into MethodInvocation(1728) at 0", "Insert SimpleName: stack(1733) into MethodInvocation(1734) at 2", "Insert SimpleName: clearRunAsIdentitiesInternal(1227) into MethodInvocation(1228) at 0", "Insert SimpleName: stack(1528) into InfixExpression: !=(1530) at 0", "Insert NullLiteral(1529) into InfixExpression: !=(1530) at 1", "Insert SimpleName: stack(1531) into MethodInvocation(1533) at 0", "Insert SimpleName: size(1532) into MethodInvocation(1533) at 1", "Insert SimpleName: stackSize(1541) into InfixExpression: ==(1543) at 0", "Insert NumberLiteral: 1(1542) into InfixExpression: ==(1543) at 1", "Insert ExpressionStatement(1549) into Block(1550) at 0", "Insert AssertStatement(1554) into Block(1562) at 0", "Insert ExpressionStatement(1561) into Block(1562) at 1", "Insert SimpleName: stack(1679) into Assignment: =(1686) at 0", "Move ExpressionStatement(857) into Block(1768) at 0", "Insert Assignment: =(1548) into ExpressionStatement(1549) at 0", "Insert InfixExpression: !=(1553) into AssertStatement(1554) at 0", "Insert Assignment: =(1560) into ExpressionStatement(1561) at 0", "Update ParameterizedType: ArrayList<PrincipalCollection>(1644) to CopyOnWriteArrayList<PrincipalCollection>", "Insert SimpleName: stack(1737) into MethodInvocation(1740) at 0", "Insert SimpleName: stack(1750) into MethodInvocation(1751) at 2", "Insert SimpleName: previousPrincipals(1544) into Assignment: =(1548) at 0", "Move FieldAccess(1527) into Assignment: =(1548) at 1", "Insert SimpleName: stack(1551) into InfixExpression: !=(1553) at 0", "Insert NullLiteral(1552) into InfixExpression: !=(1553) at 1", "Insert SimpleName: previousPrincipals(1555) into Assignment: =(1560) at 0", "Insert MethodInvocation(1559) into Assignment: =(1560) at 1", "Update SimpleType: ArrayList(1641) to CopyOnWriteArrayList", "Insert SimpleName: stack(1761) into MethodInvocation(1762) at 3", "Insert SimpleName: stack(1556) into MethodInvocation(1559) at 0", "Insert SimpleName: get(1557) into MethodInvocation(1559) at 1", "Insert NumberLiteral: 1(1558) into MethodInvocation(1559) at 2", "Update SimpleName: ArrayList(1640) to CopyOnWriteArrayList", "Delete Modifier: private(166)", "Delete SimpleName: runAsPrincipals(172)", "Delete VariableDeclarationFragment(173)", "Delete FieldDeclaration(174)", "Delete ThisExpression(295)", "Delete SimpleName: runAsPrincipals(296)", "Delete FieldAccess(297)", "Delete SimpleName: getRunAsPrincipals(298)", "Delete ThisExpression(299)", "Delete SimpleName: session(300)", "Delete FieldAccess(301)", "Delete MethodInvocation(302)", "Delete Assignment: =(303)", "Delete ExpressionStatement(304)", "Delete ThisExpression(421)", "Delete SimpleName: runAsPrincipals(422)", "Delete FieldAccess(423)", "Delete ThisExpression(428)", "Delete SimpleName: runAsPrincipals(429)", "Delete FieldAccess(430)", "Delete ThisExpression(990)", "Delete SimpleName: runAsPrincipals(991)", "Delete FieldAccess(992)", "Delete SimpleName: getRunAsPrincipals(993)", "Delete ThisExpression(994)", "Delete SimpleName: session(995)", "Delete FieldAccess(996)", "Delete MethodInvocation(997)", "Delete Assignment: =(998)", "Delete ExpressionStatement(999)", "Delete ThisExpression(1271)", "Delete SimpleName: runAsPrincipals(1272)", "Delete FieldAccess(1273)", "Delete NullLiteral(1274)", "Delete Assignment: =(1275)", "Delete ExpressionStatement(1276)", "Delete ThisExpression(1511)", "Delete SimpleName: runAsPrincipals(1512)", "Delete FieldAccess(1513)", "Delete MethodInvocation(1524)", "Delete NullLiteral(1528)", "Delete ConditionalExpression(1529)", "Delete ReturnStatement(1530)", "Delete StringLiteral: \"unchecked\"(1543)", "Delete ArrayInitializer(1544)", "Delete SimpleName: Session(1553)", "Delete SimpleType: Session(1554)", "Delete SimpleName: session(1555)", "Delete SingleVariableDeclaration(1556)", "Delete ThisExpression(1580)", "Delete SimpleName: runAsPrincipals(1581)", "Delete FieldAccess(1582)", "Delete NullLiteral(1583)", "Delete Assignment: =(1584)", "Delete ExpressionStatement(1585)", "Delete SimpleName: session(1594)", "Delete NullLiteral(1595)", "Delete InfixExpression: !=(1596)", "Delete SimpleName: session(1597)", "Delete SimpleName: removeAttribute(1598)", "Delete SimpleName: RUN_AS_PRINCIPALS_SESSION_KEY(1599)", "Delete MethodInvocation(1600)", "Delete ExpressionStatement(1601)", "Delete Block(1602)", "Delete IfStatement(1603)", "Delete ThisExpression(1632)", "Delete SimpleName: runAsPrincipals(1633)", "Delete FieldAccess(1634)", "Delete ThisExpression(1637)", "Delete SimpleName: runAsPrincipals(1638)", "Delete FieldAccess(1639)", "Delete ThisExpression(1650)", "Delete SimpleName: runAsPrincipals(1651)", "Delete FieldAccess(1652)", "Delete ThisExpression(1668)", "Delete SimpleName: runAsPrincipals(1669)", "Delete FieldAccess(1670)", "Delete ThisExpression(1687)", "Delete SimpleName: runAsPrincipals(1688)", "Delete FieldAccess(1689)", "Delete ThisExpression(1693)", "Delete SimpleName: runAsPrincipals(1694)", "Delete FieldAccess(1695)", "Delete ThisExpression(1708)", "Delete SimpleName: runAsPrincipals(1709)", "Delete FieldAccess(1710)", "Delete ThisExpression(1721)", "Delete SimpleName: runAsPrincipals(1722)", "Delete FieldAccess(1723)", "Delete SimpleName: session(1727)", "Delete SimpleName: getSession(1728)", "Delete BooleanLiteral: false(1729)", "Delete MethodInvocation(1730)", "Delete Assignment: =(1731)", "Delete ExpressionStatement(1732)"]}}], "commit_stats": [{"total_files": 3, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}