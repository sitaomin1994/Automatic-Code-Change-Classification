{"application": "apache-calcite", "csha": "b822a0d0f17ef6643f3db7967d9a9eff4f11964b", "files": [{"Lattice_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 43"]}, {"root": "UPDATE from org.apache.calcite.util.Util to com.google.common.collect.Ordering", "operations": ["UPD QualifiedName: org.apache.calcite.util.Util from org.apache.calcite.util.Util to com.google.common.collect.Ordering"]}, {"root": "UPDATE from ImmutableList.Builder<Measure> to List<Measure>", "operations": ["UPD ParameterizedType: ImmutableList.Builder<Measure> from ImmutableList.Builder<Measure> to List<Measure>"]}, {"root": "UPDATE from ImmutableList.Builder<Column> to List<Column>", "operations": ["UPD ParameterizedType: ImmutableList.Builder<Column> from ImmutableList.Builder<Column> to List<Column>"]}, {"root": "UPDATE from ImmutableList.Builder to List", "operations": ["UPD SimpleType: ImmutableList.Builder from ImmutableList.Builder to List", "UPD SimpleType: ImmutableList.Builder from ImmutableList.Builder to List"]}, {"root": "INS SimpleName: List to SimpleType: ImmutableList.Builder at 0", "operations": ["INS SimpleName: List to SimpleType: ImmutableList.Builder at 0"]}, {"root": "UPDATE from ImmutableList to Lists", "operations": ["UPD SimpleName: ImmutableList from ImmutableList to Lists", "UPD SimpleName: ImmutableList from ImmutableList to Lists"]}, {"root": "UPDATE from builder to newArrayList", "operations": ["UPD SimpleName: builder from builder to newArrayList", "UPD SimpleName: builder from builder to newArrayList"]}, {"root": "INS SimpleName: List to SimpleType: ImmutableList.Builder at 0", "operations": ["INS SimpleName: List to SimpleType: ImmutableList.Builder at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: Ordering to MethodInvocation at 0"]}, {"root": "UPDATE from isStrictlySorted to isStrictlyOrdered", "operations": ["UPD SimpleName: isStrictlySorted from isStrictlySorted to isStrictlyOrdered", "UPD SimpleName: isStrictlySorted from isStrictlySorted to isStrictlyOrdered"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: Ordering to MethodInvocation at 0"]}, {"root": "UPDATE from Util to natural", "operations": ["UPD SimpleName: Util from Util to natural", "UPD SimpleName: Util from Util to natural", "UPD SimpleName: Util from Util to natural", "UPD SimpleName: Util from Util to natural"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Util to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Util to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from sort to immutableSortedCopy", "operations": ["UPD SimpleName: sort from sort to immutableSortedCopy", "UPD SimpleName: sort from sort to immutableSortedCopy"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: sort to MethodInvocation at 1", "MOV SimpleName: Util to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: measureBuilder to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Util to MethodInvocation at 1", "MOV SimpleName: sort to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: dimensionListBuilder to MethodInvocation at 2"]}, {"root": "UPDATE from ImmutableList to Ordering", "operations": ["UPD SimpleName: ImmutableList from ImmutableList to Ordering", "UPD SimpleName: ImmutableList from ImmutableList to Ordering"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ImmutableList to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ImmutableList to MethodInvocation at 0"]}, {"root": "DEL QualifiedName: ImmutableList.Builder", "operations": ["DEL QualifiedName: ImmutableList.Builder"]}, {"root": "DEL QualifiedName: ImmutableList.Builder", "operations": ["DEL QualifiedName: ImmutableList.Builder"]}, {"root": "DEL SimpleName: copyOf", "operations": ["DEL SimpleName: copyOf"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: build", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: copyOf", "operations": ["DEL SimpleName: copyOf"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: build", "DEL MethodInvocation"]}]}}, {"Lattice_diff": {"operations": ["Move ImportDeclaration(61) into CompilationUnit(3948) at 43", "Update QualifiedName: org.apache.calcite.util.Util(60) to com.google.common.collect.Ordering", "Update ParameterizedType: ImmutableList.Builder<Measure>(3872) to List<Measure>", "Update ParameterizedType: ImmutableList.Builder<Column>(3885) to List<Column>", "Update SimpleType: ImmutableList.Builder(3869) to List", "Update SimpleType: ImmutableList.Builder(3882) to List", "Insert SimpleName: List(3872) into SimpleType: List(3873) at 0", "Update SimpleName: ImmutableList(3874) to Lists", "Update SimpleName: builder(3875) to newArrayList", "Insert SimpleName: List(3885) into SimpleType: List(3886) at 0", "Update SimpleName: ImmutableList(3887) to Lists", "Update SimpleName: builder(3888) to newArrayList", "Insert MethodInvocation(3803) into MethodInvocation(3806) at 0", "Update SimpleName: isStrictlySorted(3802) to isStrictlyOrdered", "Insert MethodInvocation(3810) into MethodInvocation(3813) at 0", "Update SimpleName: isStrictlySorted(3807) to isStrictlyOrdered", "Insert SimpleName: Ordering(3801) into MethodInvocation(3803) at 0", "Update SimpleName: Util(3801) to natural", "Move SimpleName: Util(3801) into MethodInvocation(3803) at 1", "Insert SimpleName: Ordering(3808) into MethodInvocation(3810) at 0", "Update SimpleName: Util(3806) to natural", "Move SimpleName: Util(3806) into MethodInvocation(3810) at 1", "Insert MethodInvocation(3904) into MethodInvocation(3907) at 0", "Update SimpleName: sort(3901) to immutableSortedCopy", "Move SimpleName: sort(3901) into MethodInvocation(3907) at 1", "Move SimpleName: measureBuilder(3902) into MethodInvocation(3907) at 2", "Insert MethodInvocation(3910) into MethodInvocation(3913) at 0", "Update SimpleName: sort(3910) to immutableSortedCopy", "Move SimpleName: sort(3910) into MethodInvocation(3913) at 1", "Move SimpleName: dimensionListBuilder(3911) into MethodInvocation(3913) at 2", "Update SimpleName: ImmutableList(3898) to Ordering", "Move SimpleName: ImmutableList(3898) into MethodInvocation(3904) at 0", "Update SimpleName: Util(3900) to natural", "Move SimpleName: Util(3900) into MethodInvocation(3904) at 1", "Update SimpleName: ImmutableList(3907) to Ordering", "Move SimpleName: ImmutableList(3907) into MethodInvocation(3910) at 0", "Update SimpleName: Util(3909) to natural", "Move SimpleName: Util(3909) into MethodInvocation(3910) at 1", "Delete QualifiedName: ImmutableList.Builder(3868)", "Delete QualifiedName: ImmutableList.Builder(3881)", "Delete SimpleName: copyOf(3899)", "Delete SimpleName: build(3903)", "Delete MethodInvocation(3904)", "Delete MethodInvocation(3905)", "Delete SimpleName: copyOf(3908)", "Delete SimpleName: build(3912)", "Delete MethodInvocation(3913)", "Delete MethodInvocation(3914)"]}}, {"Aggregate_cluster": {"actions": [{"root": "INS Block to MethodDeclaration at 6", "operations": ["INS SimpleName: isStrictlyOrdered to MethodInvocation at 1", "INS QualifiedName: ImmutableBitSet.ORDERING to MethodInvocation at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: ImmutableBitSet to SimpleType: ImmutableBitSet at 0", "INS EnhancedForStatement to Block at 1", "INS SimpleName: checkRollup to LabeledStatement at 0", "INS Block to EnhancedForStatement at 2", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS StringLiteral: \"must be sorted: \" to InfixExpression: + at 0", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS Block to IfStatement at 1", "INS SimpleName: bitSet to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 6", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS IfStatement to Block at 0", "INS SimpleName: g to MethodInvocation at 0", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS SimpleName: groupSets to EnhancedForStatement at 1", "INS MethodInvocation to AssertStatement at 0", "INS LabeledStatement to Block at 3", "INS ThrowStatement to Block at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleType: ImmutableBitSet to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1", "INS AssertStatement to Block at 2", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS PrefixExpression: ! to IfStatement at 0", "INS IfStatement to LabeledStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2", "MOV IfStatement to Block at 1", "MOV ReturnStatement to Block at 4"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "INS QualifiedName: ImmutableBitSet.ORDERING to MethodInvocation at 0", "operations": ["INS QualifiedName: ImmutableBitSet.ORDERING to MethodInvocation at 0"]}, {"root": "UPDATE from isStrictlySorted to isStrictlyOrdered", "operations": ["UPD SimpleName: isStrictlySorted from isStrictlySorted to isStrictlyOrdered"]}, {"root": "UPDATE from i to groupSets", "operations": ["UPD SimpleName: i from i to groupSets", "UPD SimpleName: groupSet from groupSet to groupSets"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: groupSet to MethodInvocation at 2"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 3"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV SimpleName: i to InfixExpression: + at 1"]}, {"root": "INS SimpleName: g to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: g to VariableDeclarationFragment at 0"]}, {"root": "INS SimpleName: groupSet to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: groupSet to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS MethodInvocation to PrefixExpression: ! at 0", "INS PrefixExpression: ! to IfStatement at 0"]}, {"root": "INS BreakStatement to Block at 0", "operations": ["INS SimpleName: checkRollup to BreakStatement at 0", "INS BreakStatement to Block at 0"]}, {"root": "UPDATE from pos to g", "operations": ["UPD SimpleName: pos from pos to g", "UPD SimpleName: pos from pos to g"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS SimpleName: g to MethodInvocation at 0", "INS SimpleName: clear to MethodInvocation at 1", "INS InfixExpression: - to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1", "INS MethodInvocation to InfixExpression: - at 0", "INS SimpleName: g to MethodInvocation at 0", "INS SimpleName: length to MethodInvocation at 1"]}, {"root": "UPDATE from groupingSet to bitSet", "operations": ["UPD SimpleName: groupingSet from groupingSet to bitSet"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: pos to MethodInvocation at 2", "MOV SimpleName: groupingSet to MethodInvocation at 0", "MOV SimpleName: nextSetBit to MethodInvocation at 1"]}, {"root": "UPDATE from nextSetBit to equals", "operations": ["UPD SimpleName: nextSetBit from nextSetBit to equals"]}, {"root": "MOVE from InfixExpression: -", "operations": ["MOV NumberLiteral: 1 to InfixExpression: - at 1"]}, {"root": "DEL SimpleName: Util", "operations": ["DEL SimpleName: Util"]}, {"root": "DEL QualifiedName: ImmutableBitSet.COMPARATOR", "operations": ["DEL QualifiedName: ImmutableBitSet.COMPARATOR"]}, {"root": "DEL SimpleName: groupingSet", "operations": ["DEL SimpleName: groupingSet"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: groupSets", "DEL SimpleName: cardinality", "DEL MethodInvocation", "DEL SimpleName: i", "DEL SimpleName: get", "DEL InfixExpression: -", "DEL SimpleName: groupSet"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL MethodInvocation", "DEL SimpleName: nextPos", "DEL InfixExpression: !="]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: OTHER"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL InfixExpression: +", "DEL SimpleName: nextPos"]}, {"root": "DEL Block", "operations": ["DEL PostfixExpression: ++", "DEL SimpleName: i", "DEL SimpleName: j", "DEL NumberLiteral: 0", "DEL SimpleName: groupSet", "DEL ForStatement", "DEL IfStatement", "DEL SimpleName: pos", "DEL NumberLiteral: 0", "DEL PrimitiveType: int", "DEL VariableDeclarationExpression", "DEL SimpleName: j", "DEL VariableDeclarationStatement", "DEL SimpleName: pos", "DEL SimpleName: nextPos", "DEL MethodInvocation", "DEL Block", "DEL ForStatement", "DEL MethodInvocation", "DEL PostfixExpression: --", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: nextSetBit", "DEL VariableDeclarationFragment", "DEL Block", "DEL VariableDeclarationFragment", "DEL InfixExpression: !=", "DEL VariableDeclarationExpression", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: i", "DEL SimpleName: i", "DEL InfixExpression: >=", "DEL Block", "DEL SimpleName: groupingSet", "DEL SimpleName: cardinality", "DEL SimpleName: OTHER", "DEL SimpleName: i", "DEL IfStatement", "DEL Block", "DEL SimpleName: cardinality", "DEL InfixExpression: <", "DEL NumberLiteral: 0", "DEL VariableDeclarationFragment", "DEL SimpleName: j"]}]}}, {"Aggregate_diff": {"operations": ["Insert Block(1244) into MethodDeclaration(1245) at 6", "Insert IfStatement(1157) into Block(1244) at 0", "Move IfStatement(1161) into Block(1244) at 1", "Move IfStatement(1176) into Block(1244) at 2", "Insert LabeledStatement(1241) into Block(1244) at 3", "Move ReturnStatement(1266) into Block(1244) at 4", "Insert PrefixExpression: !(1148) into IfStatement(1157) at 0", "Insert Block(1156) into IfStatement(1157) at 1", "Insert SimpleName: checkRollup(1190) into LabeledStatement(1241) at 0", "Insert IfStatement(1240) into LabeledStatement(1241) at 1", "Insert MethodInvocation(1147) into PrefixExpression: !(1148) at 0", "Insert ThrowStatement(1155) into Block(1156) at 0", "Move InfixExpression: ==(1185) into IfStatement(1240) at 0", "Insert Block(1239) into IfStatement(1240) at 1", "Insert QualifiedName: ImmutableBitSet.ORDERING(331) into MethodInvocation(334) at 0", "Update SimpleName: isStrictlySorted(332) to isStrictlyOrdered", "Insert QualifiedName: ImmutableBitSet.ORDERING(1144) into MethodInvocation(1147) at 0", "Insert SimpleName: isStrictlyOrdered(1145) into MethodInvocation(1147) at 1", "Update SimpleName: groupSet(1188) to groupSets", "Move SimpleName: groupSet(1188) into MethodInvocation(1147) at 2", "Insert ClassInstanceCreation(1154) into ThrowStatement(1155) at 0", "Move VariableDeclarationStatement(1210) into Block(1239) at 0", "Insert EnhancedForStatement(1232) into Block(1239) at 1", "Insert AssertStatement(1236) into Block(1239) at 2", "Move ReturnStatement(1262) into Block(1239) at 3", "Insert SimpleType: IllegalArgumentException(1150) into ClassInstanceCreation(1154) at 0", "Insert InfixExpression: +(1153) into ClassInstanceCreation(1154) at 1", "Insert SingleVariableDeclaration(1209) into EnhancedForStatement(1232) at 0", "Insert SimpleName: groupSets(1210) into EnhancedForStatement(1232) at 1", "Insert Block(1231) into EnhancedForStatement(1232) at 2", "Insert MethodInvocation(1235) into AssertStatement(1236) at 0", "Insert SimpleName: IllegalArgumentException(1149) into SimpleType: IllegalArgumentException(1150) at 0", "Insert StringLiteral: \"must be sorted: \"(1151) into InfixExpression: +(1153) at 0", "Update SimpleName: i(1193) to groupSets", "Move SimpleName: i(1193) into InfixExpression: +(1153) at 1", "Insert SimpleName: g(1202) into VariableDeclarationFragment(1204) at 0", "Insert SimpleName: groupSet(1203) into VariableDeclarationFragment(1204) at 1", "Insert SimpleType: ImmutableBitSet(1207) into SingleVariableDeclaration(1209) at 0", "Insert SimpleName: bitSet(1208) into SingleVariableDeclaration(1209) at 1", "Move IfStatement(1250) into Block(1231) at 0", "Move ExpressionStatement(1256) into Block(1231) at 1", "Insert SimpleName: g(1233) into MethodInvocation(1235) at 0", "Insert SimpleName: isEmpty(1234) into MethodInvocation(1235) at 1", "Insert SimpleName: ImmutableBitSet(1206) into SimpleType: ImmutableBitSet(1207) at 0", "Insert PrefixExpression: !(1215) into IfStatement(1219) at 0", "Insert MethodInvocation(1214) into PrefixExpression: !(1215) at 0", "Insert BreakStatement(1217) into Block(1218) at 0", "Update SimpleName: pos(1251) to g", "Insert MethodInvocation(1228) into Assignment: =(1229) at 1", "Update SimpleName: groupingSet(1242) to bitSet", "Move SimpleName: groupingSet(1242) into MethodInvocation(1214) at 0", "Update SimpleName: nextSetBit(1243) to equals", "Move SimpleName: nextSetBit(1243) into MethodInvocation(1214) at 1", "Update SimpleName: pos(1244) to g", "Move SimpleName: pos(1244) into MethodInvocation(1214) at 2", "Insert SimpleName: checkRollup(1216) into BreakStatement(1217) at 0", "Insert SimpleName: g(1221) into MethodInvocation(1228) at 0", "Insert SimpleName: clear(1222) into MethodInvocation(1228) at 1", "Insert InfixExpression: -(1227) into MethodInvocation(1228) at 2", "Insert MethodInvocation(1225) into InfixExpression: -(1227) at 0", "Move NumberLiteral: 1(1253) into InfixExpression: -(1227) at 1", "Insert SimpleName: g(1223) into MethodInvocation(1225) at 0", "Insert SimpleName: length(1224) into MethodInvocation(1225) at 1", "Delete SimpleName: Util(331)", "Delete QualifiedName: ImmutableBitSet.COMPARATOR(334)", "Delete SimpleName: groupingSet(1200)", "Delete SimpleName: groupSets(1201)", "Delete SimpleName: get(1202)", "Delete SimpleName: groupSet(1203)", "Delete SimpleName: cardinality(1204)", "Delete MethodInvocation(1205)", "Delete SimpleName: i(1206)", "Delete InfixExpression: -(1207)", "Delete MethodInvocation(1208)", "Delete SimpleName: nextPos(1241)", "Delete MethodInvocation(1245)", "Delete InfixExpression: !=(1246)", "Delete SimpleName: OTHER(1247)", "Delete ReturnStatement(1248)", "Delete SimpleName: nextPos(1252)", "Delete InfixExpression: +(1254)", "Delete PrimitiveType: int(1186)", "Delete SimpleName: i(1187)", "Delete SimpleName: cardinality(1189)", "Delete MethodInvocation(1190)", "Delete VariableDeclarationFragment(1191)", "Delete VariableDeclarationExpression(1192)", "Delete NumberLiteral: 0(1194)", "Delete InfixExpression: >=(1195)", "Delete SimpleName: i(1196)", "Delete PostfixExpression: --(1197)", "Delete SimpleName: groupingSet(1211)", "Delete SimpleName: cardinality(1212)", "Delete MethodInvocation(1213)", "Delete SimpleName: i(1214)", "Delete InfixExpression: !=(1215)", "Delete SimpleName: OTHER(1216)", "Delete ReturnStatement(1217)", "Delete Block(1218)", "Delete IfStatement(1219)", "Delete PrimitiveType: int(1220)", "Delete SimpleName: j(1221)", "Delete NumberLiteral: 0(1222)", "Delete VariableDeclarationFragment(1223)", "Delete SimpleName: pos(1224)", "Delete NumberLiteral: 0(1225)", "Delete VariableDeclarationFragment(1226)", "Delete VariableDeclarationExpression(1227)", "Delete SimpleName: j(1228)", "Delete SimpleName: i(1229)", "Delete InfixExpression: <(1230)", "Delete SimpleName: j(1231)", "Delete PostfixExpression: ++(1232)", "Delete PrimitiveType: int(1233)", "Delete SimpleName: nextPos(1234)", "Delete SimpleName: groupSet(1235)", "Delete SimpleName: nextSetBit(1236)", "Delete SimpleName: pos(1237)", "Delete MethodInvocation(1238)", "Delete VariableDeclarationFragment(1239)", "Delete VariableDeclarationStatement(1240)", "Delete Block(1257)", "Delete ForStatement(1258)", "Delete Block(1259)", "Delete ForStatement(1260)", "Delete Block(1263)", "Delete IfStatement(1264)", "Delete Block(1267)"]}}], "commit_stats": [{"total_files": 6, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}