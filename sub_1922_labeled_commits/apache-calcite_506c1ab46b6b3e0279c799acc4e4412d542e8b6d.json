{"application": "apache-calcite", "csha": "506c1ab46b6b3e0279c799acc4e4412d542e8b6d", "files": [{"ScanNode_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS PostfixExpression: ++ to ForStatement at 2", "INS QualifiedName: is.length to InfixExpression: < at 1", "INS SimpleName: i to InfixExpression: != at 1", "INS Modifier: static to MethodDeclaration at 1", "INS IfStatement to Block at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: is to SingleVariableDeclaration at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS ForStatement to Block at 1", "INS BooleanLiteral: false to ReturnStatement at 0", "INS ArrayType: int[] to SingleVariableDeclaration at 0", "INS Dimension to ArrayType: int[] at 1", "INS SimpleName: is to ArrayAccess at 0", "INS QualifiedName: is.length to InfixExpression: != at 0", "INS SimpleName: count to InfixExpression: != at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: isIdentity to MethodDeclaration at 3", "INS Block to ForStatement at 3", "INS BooleanLiteral: true to ReturnStatement at 0", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS PrimitiveType: int to ArrayType: int[] at 0", "INS SimpleName: i to ArrayAccess at 1", "INS Block to MethodDeclaration at 6", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: count to SingleVariableDeclaration at 1", "INS InfixExpression: != to IfStatement at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 0", "INS ArrayAccess to InfixExpression: != at 0", "INS InfixExpression: < to ForStatement at 1", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS ReturnStatement to Block at 0", "INS Block to IfStatement at 1", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ReturnStatement to Block at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: i to InfixExpression: < at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS Dimension to ArrayType: int[] at 1", "INS SimpleName: rel to MethodInvocation at 0", "INS SimpleName: getFieldCount to MethodInvocation at 1", "INS SimpleName: isIdentity to MethodInvocation at 0", "INS SimpleName: projects1 to VariableDeclarationFragment at 0", "INS SimpleName: projects to ConditionalExpression at 2", "INS Modifier: final to VariableDeclarationStatement at 0", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS SimpleName: getRowType to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 1", "INS NullLiteral to ConditionalExpression at 1", "INS SimpleName: projects to MethodInvocation at 1", "INS ArrayType: int[] to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS PrimitiveType: int to ArrayType: int[] at 0", "INS MethodInvocation to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS MethodInvocation to ConditionalExpression at 0"]}, {"root": "UPDATE from projects to projects1", "operations": ["UPD SimpleName: projects from projects to projects1"]}]}}, {"ScanNode_diff": {"operations": ["Insert MethodDeclaration(726) into TypeDeclaration: class(727) at 12", "Insert Modifier: private(683) into MethodDeclaration(726) at 0", "Insert Modifier: static(684) into MethodDeclaration(726) at 1", "Insert PrimitiveType: boolean(685) into MethodDeclaration(726) at 2", "Insert SimpleName: isIdentity(686) into MethodDeclaration(726) at 3", "Insert SingleVariableDeclaration(691) into MethodDeclaration(726) at 4", "Insert SingleVariableDeclaration(694) into MethodDeclaration(726) at 5", "Insert Block(725) into MethodDeclaration(726) at 6", "Insert ArrayType: int[](689) into SingleVariableDeclaration(691) at 0", "Insert SimpleName: is(690) into SingleVariableDeclaration(691) at 1", "Insert PrimitiveType: int(692) into SingleVariableDeclaration(694) at 0", "Insert SimpleName: count(693) into SingleVariableDeclaration(694) at 1", "Insert IfStatement(701) into Block(725) at 0", "Insert ForStatement(722) into Block(725) at 1", "Insert ReturnStatement(724) into Block(725) at 2", "Insert PrimitiveType: int(687) into ArrayType: int[](689) at 0", "Insert Dimension(688) into ArrayType: int[](689) at 1", "Insert InfixExpression: !=(697) into IfStatement(701) at 0", "Insert Block(700) into IfStatement(701) at 1", "Insert VariableDeclarationExpression(706) into ForStatement(722) at 0", "Insert InfixExpression: <(709) into ForStatement(722) at 1", "Insert PostfixExpression: ++(711) into ForStatement(722) at 2", "Insert Block(721) into ForStatement(722) at 3", "Insert BooleanLiteral: true(723) into ReturnStatement(724) at 0", "Insert VariableDeclarationStatement(278) into Block(306) at 1", "Insert QualifiedName: is.length(695) into InfixExpression: !=(697) at 0", "Insert SimpleName: count(696) into InfixExpression: !=(697) at 1", "Insert ReturnStatement(699) into Block(700) at 0", "Insert PrimitiveType: int(702) into VariableDeclarationExpression(706) at 0", "Insert VariableDeclarationFragment(705) into VariableDeclarationExpression(706) at 1", "Insert SimpleName: i(707) into InfixExpression: <(709) at 0", "Insert QualifiedName: is.length(708) into InfixExpression: <(709) at 1", "Insert SimpleName: i(710) into PostfixExpression: ++(711) at 0", "Insert IfStatement(720) into Block(721) at 0", "Insert Modifier: final(261) into VariableDeclarationStatement(278) at 0", "Insert ArrayType: int[](264) into VariableDeclarationStatement(278) at 1", "Insert VariableDeclarationFragment(277) into VariableDeclarationStatement(278) at 2", "Insert BooleanLiteral: false(698) into ReturnStatement(699) at 0", "Insert SimpleName: i(703) into VariableDeclarationFragment(705) at 0", "Insert NumberLiteral: 0(704) into VariableDeclarationFragment(705) at 1", "Insert InfixExpression: !=(716) into IfStatement(720) at 0", "Insert Block(719) into IfStatement(720) at 1", "Insert PrimitiveType: int(262) into ArrayType: int[](264) at 0", "Insert Dimension(263) into ArrayType: int[](264) at 1", "Insert SimpleName: projects1(265) into VariableDeclarationFragment(277) at 0", "Insert ConditionalExpression(276) into VariableDeclarationFragment(277) at 1", "Insert ArrayAccess(714) into InfixExpression: !=(716) at 0", "Insert SimpleName: i(715) into InfixExpression: !=(716) at 1", "Insert ReturnStatement(718) into Block(719) at 0", "Insert MethodInvocation(273) into ConditionalExpression(276) at 0", "Insert NullLiteral(274) into ConditionalExpression(276) at 1", "Insert SimpleName: projects(275) into ConditionalExpression(276) at 2", "Update SimpleName: projects(274) to projects1", "Insert SimpleName: is(712) into ArrayAccess(714) at 0", "Insert SimpleName: i(713) into ArrayAccess(714) at 1", "Insert BooleanLiteral: false(717) into ReturnStatement(718) at 0", "Insert SimpleName: isIdentity(266) into MethodInvocation(273) at 0", "Insert SimpleName: projects(267) into MethodInvocation(273) at 1", "Insert MethodInvocation(272) into MethodInvocation(273) at 2", "Insert MethodInvocation(270) into MethodInvocation(272) at 0", "Insert SimpleName: getFieldCount(271) into MethodInvocation(272) at 1", "Insert SimpleName: rel(268) into MethodInvocation(270) at 0", "Insert SimpleName: getRowType(269) into MethodInvocation(270) at 1"]}}, {"Lattice_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS SimpleName: toString to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ReturnStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleType: String to MethodDeclaration at 2", "INS SimpleName: toString to MethodDeclaration at 3", "INS Block to MethodDeclaration at 4", "INS SimpleName: String to SimpleType: String at 0", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: identifiers to MethodInvocation at 0"]}]}}, {"Lattice_diff": {"operations": ["Insert MethodDeclaration(2646) into TypeDeclaration: class(2662) at 13", "Insert MarkerAnnotation(2635) into MethodDeclaration(2646) at 0", "Insert Modifier: public(2636) into MethodDeclaration(2646) at 1", "Insert SimpleType: String(2638) into MethodDeclaration(2646) at 2", "Insert SimpleName: toString(2639) into MethodDeclaration(2646) at 3", "Insert Block(2645) into MethodDeclaration(2646) at 4", "Insert SimpleName: Override(2634) into MarkerAnnotation(2635) at 0", "Insert SimpleName: String(2637) into SimpleType: String(2638) at 0", "Insert ReturnStatement(2644) into Block(2645) at 0", "Insert MethodInvocation(2643) into ReturnStatement(2644) at 0", "Insert MethodInvocation(2641) into MethodInvocation(2643) at 0", "Insert SimpleName: toString(2642) into MethodInvocation(2643) at 1", "Insert SimpleName: identifiers(2640) into MethodInvocation(2641) at 0"]}}, {"MaterializationService_cluster": {"actions": [{"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: best", "DEL VariableDeclarationStatement", "DEL SimpleName: TileKey", "DEL SimpleName: Pair", "DEL ParameterizedType: Pair<CalciteSchema.TableEntry,TileKey>", "DEL SimpleType: Pair", "DEL Modifier: final", "DEL SimpleType: CalciteSchema.TableEntry", "DEL SimpleType: TileKey", "DEL QualifiedName: CalciteSchema.TableEntry"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL SimpleName: queue", "DEL QualifiedName: pair.left", "DEL SimpleName: getRowCount", "DEL QualifiedName: CalciteSchema.TableEntry", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: TileKey", "DEL ExpressionStatement", "DEL ParameterizedType: Pair<CalciteSchema.TableEntry,TileKey>", "DEL EnhancedForStatement", "DEL StringLiteral: \" \"", "DEL SimpleType: CalciteSchema.TableEntry", "DEL StringLiteral: \"table=\"", "DEL SimpleName: path", "DEL SimpleName: getTable", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL SimpleName: println", "DEL Block", "DEL SimpleType: Pair", "DEL SimpleName: Pair", "DEL SimpleName: getStatistic", "DEL QualifiedName: System.out", "DEL SimpleType: TileKey", "DEL SimpleName: pair", "DEL QualifiedName: pair.left"]}, {"root": "DEL SimpleName: best", "operations": ["DEL SimpleName: best"]}]}}, {"MaterializationService_diff": {"operations": ["Move MethodInvocation(949) into ReturnStatement(941) at 0", "Delete Modifier: final(938)", "Delete SimpleName: Pair(939)", "Delete SimpleType: Pair(940)", "Delete QualifiedName: CalciteSchema.TableEntry(941)", "Delete SimpleType: CalciteSchema.TableEntry(942)", "Delete SimpleName: TileKey(943)", "Delete SimpleType: TileKey(944)", "Delete ParameterizedType: Pair<CalciteSchema.TableEntry,TileKey>(945)", "Delete SimpleName: best(946)", "Delete VariableDeclarationFragment(950)", "Delete VariableDeclarationStatement(951)", "Delete SimpleName: Pair(952)", "Delete SimpleType: Pair(953)", "Delete QualifiedName: CalciteSchema.TableEntry(954)", "Delete SimpleType: CalciteSchema.TableEntry(955)", "Delete SimpleName: TileKey(956)", "Delete SimpleType: TileKey(957)", "Delete ParameterizedType: Pair<CalciteSchema.TableEntry,TileKey>(958)", "Delete SimpleName: pair(959)", "Delete SingleVariableDeclaration(960)", "Delete SimpleName: queue(961)", "Delete QualifiedName: System.out(962)", "Delete SimpleName: println(963)", "Delete StringLiteral: \"table=\"(964)", "Delete QualifiedName: pair.left(965)", "Delete SimpleName: path(966)", "Delete MethodInvocation(967)", "Delete StringLiteral: \" \"(968)", "Delete QualifiedName: pair.left(969)", "Delete SimpleName: getTable(970)", "Delete MethodInvocation(971)", "Delete SimpleName: getStatistic(972)", "Delete MethodInvocation(973)", "Delete SimpleName: getRowCount(974)", "Delete MethodInvocation(975)", "Delete InfixExpression: +(976)", "Delete MethodInvocation(977)", "Delete ExpressionStatement(978)", "Delete Block(979)", "Delete EnhancedForStatement(980)", "Delete SimpleName: best(981)"]}}, {"TileKey_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: dimensions to InfixExpression: + at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS InfixExpression: + to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: String to SimpleType: String at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS StringLiteral: \", measures: \" to InfixExpression: + at 2", "INS SimpleName: toString to MethodDeclaration at 3", "INS SimpleName: measures to InfixExpression: + at 3", "INS SimpleType: String to MethodDeclaration at 2", "INS StringLiteral: \"dimensions: \" to InfixExpression: + at 0"]}]}}, {"TileKey_diff": {"operations": ["Insert MethodDeclaration(161) into TypeDeclaration: class(162) at 9", "Insert MarkerAnnotation(149) into MethodDeclaration(161) at 0", "Insert Modifier: public(150) into MethodDeclaration(161) at 1", "Insert SimpleType: String(152) into MethodDeclaration(161) at 2", "Insert SimpleName: toString(153) into MethodDeclaration(161) at 3", "Insert Block(160) into MethodDeclaration(161) at 4", "Insert SimpleName: Override(148) into MarkerAnnotation(149) at 0", "Insert SimpleName: String(151) into SimpleType: String(152) at 0", "Insert ReturnStatement(159) into Block(160) at 0", "Insert InfixExpression: +(158) into ReturnStatement(159) at 0", "Insert StringLiteral: \"dimensions: \"(154) into InfixExpression: +(158) at 0", "Insert SimpleName: dimensions(155) into InfixExpression: +(158) at 1", "Insert StringLiteral: \", measures: \"(156) into InfixExpression: +(158) at 2", "Insert SimpleName: measures(157) into InfixExpression: +(158) at 3"]}}, {"TileSuggester_cluster": {"actions": [{"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: println", "DEL QualifiedName: System.out", "DEL MethodInvocation", "DEL SimpleName: aggregate", "DEL ExpressionStatement"]}]}}, {"TileSuggester_diff": {"operations": ["Delete QualifiedName: System.out(256)", "Delete SimpleName: println(257)", "Delete SimpleName: aggregate(258)", "Delete MethodInvocation(259)", "Delete ExpressionStatement(260)"]}}, {"EnumerableJoin_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS ImportDeclaration to CompilationUnit at 10", "INS QualifiedName: org.apache.calcite.rel.RelNodes to ImportDeclaration at 0"]}, {"root": "INS NumberLiteral: 0 to InfixExpression: > at 1", "operations": ["INS NumberLiteral: 0 to InfixExpression: > at 1"]}, {"root": "INS QualifiedName: RelNodes.COMPARATOR to MethodInvocation at 0", "operations": ["INS QualifiedName: RelNodes.COMPARATOR to MethodInvocation at 0"]}, {"root": "INS SimpleName: compare to MethodInvocation at 1", "operations": ["INS SimpleName: compare to MethodInvocation at 1"]}, {"root": "UPDATE from getId to right", "operations": ["UPD SimpleName: getId from getId to right"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: right", "DEL SimpleName: getId", "DEL MethodInvocation"]}]}}, {"EnumerableJoin_diff": {"operations": ["Insert ImportDeclaration(21) into CompilationUnit(509) at 10", "Insert QualifiedName: org.apache.calcite.rel.RelNodes(20) into ImportDeclaration(21) at 0", "Insert NumberLiteral: 0(220) into InfixExpression: >(221) at 1", "Insert QualifiedName: RelNodes.COMPARATOR(215) into MethodInvocation(219) at 0", "Insert SimpleName: compare(216) into MethodInvocation(219) at 1", "Update SimpleName: getId(214) to right", "Delete SimpleName: right(216)", "Delete SimpleName: getId(217)", "Delete MethodInvocation(218)"]}}, {"JdbcConvention_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS TagElement to Javadoc at 0", "INS TextElement: Cost of a JDBC node versus implementing an equivalent node in a \"typical\" to TagElement at 0", "INS Modifier: public to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 3", "INS VariableDeclarationFragment to FieldDeclaration at 5", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS Modifier: static to FieldDeclaration at 2", "INS SimpleName: COST_MULTIPLIER to VariableDeclarationFragment at 0", "INS TextElement: calling convention.  to TagElement at 1", "INS Javadoc to FieldDeclaration at 0", "INS PrimitiveType: double to FieldDeclaration at 4", "INS NumberLiteral: 0.8d to VariableDeclarationFragment at 1"]}]}}, {"JdbcConvention_diff": {"operations": ["Insert FieldDeclaration(46) into TypeDeclaration: class(158) at 4", "Insert Javadoc(38) into FieldDeclaration(46) at 0", "Insert Modifier: public(39) into FieldDeclaration(46) at 1", "Insert Modifier: static(40) into FieldDeclaration(46) at 2", "Insert Modifier: final(41) into FieldDeclaration(46) at 3", "Insert PrimitiveType: double(42) into FieldDeclaration(46) at 4", "Insert VariableDeclarationFragment(45) into FieldDeclaration(46) at 5", "Insert TagElement(37) into Javadoc(38) at 0", "Insert SimpleName: COST_MULTIPLIER(43) into VariableDeclarationFragment(45) at 0", "Insert NumberLiteral: 0.8d(44) into VariableDeclarationFragment(45) at 1", "Insert TextElement: Cost of a JDBC node versus implementing an equivalent node in a \"typical\"(35) into TagElement(37) at 0", "Insert TextElement: calling convention. (36) into TagElement(37) at 1"]}}, {"JdbcRules_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: computeSelfCost to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SuperMethodInvocation to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: RelOptPlanner to SimpleType: RelOptPlanner at 0", "INS SimpleType: RelOptPlanner to SingleVariableDeclaration at 0", "INS SimpleName: RelOptCost to SimpleType: RelOptCost at 0", "INS SimpleName: multiplyBy to MethodInvocation at 1", "INS QualifiedName: JdbcConvention.COST_MULTIPLIER to MethodInvocation at 2", "INS SimpleName: computeSelfCost to SuperMethodInvocation at 0", "INS SimpleName: planner to SuperMethodInvocation at 1", "INS SimpleName: planner to SingleVariableDeclaration at 1", "INS SimpleType: RelOptCost to MethodDeclaration at 2", "INS Block to MethodDeclaration at 5"]}]}}, {"JdbcRules_diff": {"operations": ["Insert MethodDeclaration(1782) into TypeDeclaration: class(1878) at 8", "Insert MarkerAnnotation(1765) into MethodDeclaration(1782) at 0", "Insert Modifier: public(1766) into MethodDeclaration(1782) at 1", "Insert SimpleType: RelOptCost(1768) into MethodDeclaration(1782) at 2", "Insert SimpleName: computeSelfCost(1769) into MethodDeclaration(1782) at 3", "Insert SingleVariableDeclaration(1773) into MethodDeclaration(1782) at 4", "Insert Block(1781) into MethodDeclaration(1782) at 5", "Insert SimpleName: Override(1764) into MarkerAnnotation(1765) at 0", "Insert SimpleName: RelOptCost(1767) into SimpleType: RelOptCost(1768) at 0", "Insert SimpleType: RelOptPlanner(1771) into SingleVariableDeclaration(1773) at 0", "Insert SimpleName: planner(1772) into SingleVariableDeclaration(1773) at 1", "Insert ReturnStatement(1780) into Block(1781) at 0", "Insert SimpleName: RelOptPlanner(1770) into SimpleType: RelOptPlanner(1771) at 0", "Insert MethodInvocation(1779) into ReturnStatement(1780) at 0", "Insert SuperMethodInvocation(1776) into MethodInvocation(1779) at 0", "Insert SimpleName: multiplyBy(1777) into MethodInvocation(1779) at 1", "Insert QualifiedName: JdbcConvention.COST_MULTIPLIER(1778) into MethodInvocation(1779) at 2", "Insert SimpleName: computeSelfCost(1774) into SuperMethodInvocation(1776) at 0", "Insert SimpleName: planner(1775) into SuperMethodInvocation(1776) at 1"]}}, {"RelSet_cluster": {"actions": [{"root": "INS Block to MethodDeclaration at 4", "operations": ["INS Block to MethodDeclaration at 4"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ReturnStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 1", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 0", "MOV IfStatement to Block at 3"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.calcite.plan.Convention"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.calcite.plan.ConventionTraitDef", "DEL ImportDeclaration"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL InfixExpression: ==", "DEL SimpleName: getConvention", "DEL SimpleName: subset1", "DEL MethodInvocation", "DEL QualifiedName: Convention.NONE"]}, {"root": "DEL ContinueStatement", "operations": ["DEL ContinueStatement"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: subset1", "DEL IfStatement", "DEL SimpleName: converter", "DEL SimpleName: register", "DEL SimpleName: subsets", "DEL VariableDeclarationFragment", "DEL SimpleName: cluster", "DEL SimpleType: AbstractConverter", "DEL SimpleName: subset", "DEL SimpleName: AbstractConverter", "DEL SimpleType: AbstractConverter", "DEL SimpleName: cluster", "DEL SimpleName: subsets", "DEL ClassInstanceCreation", "DEL SimpleName: register", "DEL SimpleType: AbstractConverter", "DEL SimpleName: RelSubset", "DEL ExpressionStatement", "DEL ContinueStatement", "DEL SimpleName: subset1", "DEL SingleVariableDeclaration", "DEL EnhancedForStatement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: subset1", "DEL SimpleName: planner", "DEL IfStatement", "DEL SimpleType: RelSubset", "DEL InfixExpression: ==", "DEL QualifiedName: ConventionTraitDef.INSTANCE", "DEL SimpleName: converter", "DEL SimpleName: getTraitSet", "DEL SimpleName: subset1", "DEL SimpleName: subset1", "DEL Block", "DEL SimpleType: RelSubset", "DEL Block", "DEL SimpleName: AbstractConverter", "DEL Block", "DEL Block", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: subset1", "DEL SimpleName: AbstractConverter", "DEL SimpleName: converter", "DEL ExpressionStatement", "DEL SimpleName: RelSubset", "DEL VariableDeclarationFragment", "DEL QualifiedName: ConventionTraitDef.INSTANCE", "DEL SimpleName: subset", "DEL SimpleType: AbstractConverter", "DEL SimpleName: converter", "DEL SimpleName: traits", "DEL MethodInvocation", "DEL SimpleName: planner", "DEL SimpleName: subset", "DEL SimpleName: AbstractConverter", "DEL VariableDeclarationStatement", "DEL Block", "DEL EnhancedForStatement", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL Modifier: final"]}]}}, {"RelSet_diff": {"operations": ["Insert Block(396) into MethodDeclaration(397) at 4", "Move VariableDeclarationStatement(356) into Block(396) at 0", "Move IfStatement(393) into Block(396) at 1", "Move ReturnStatement(467) into Block(396) at 2", "Move InfixExpression: ==(359) into IfStatement(393) at 0", "Move ExpressionStatement(368) into Block(392) at 0", "Move VariableDeclarationStatement(380) into Block(392) at 1", "Move ExpressionStatement(421) into Block(392) at 2", "Move IfStatement(463) into Block(392) at 3", "Delete QualifiedName: org.apache.calcite.plan.Convention(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.apache.calcite.plan.ConventionTraitDef(4)", "Delete ImportDeclaration(5)", "Delete SimpleName: subset1(386)", "Delete SimpleName: getConvention(387)", "Delete MethodInvocation(388)", "Delete QualifiedName: Convention.NONE(389)", "Delete InfixExpression: ==(390)", "Delete ContinueStatement(391)", "Delete SimpleName: RelSubset(381)", "Delete SimpleType: RelSubset(382)", "Delete SimpleName: subset1(383)", "Delete SingleVariableDeclaration(384)", "Delete SimpleName: subsets(385)", "Delete Modifier: final(394)", "Delete SimpleName: AbstractConverter(395)", "Delete SimpleType: AbstractConverter(396)", "Delete SimpleName: converter(397)", "Delete SimpleName: AbstractConverter(398)", "Delete SimpleType: AbstractConverter(399)", "Delete SimpleName: cluster(400)", "Delete SimpleName: subset(401)", "Delete QualifiedName: ConventionTraitDef.INSTANCE(402)", "Delete SimpleName: subset1(403)", "Delete SimpleName: getTraitSet(404)", "Delete MethodInvocation(405)", "Delete ClassInstanceCreation(406)", "Delete VariableDeclarationFragment(407)", "Delete VariableDeclarationStatement(408)", "Delete SimpleName: planner(409)", "Delete SimpleName: register(410)", "Delete SimpleName: converter(411)", "Delete SimpleName: subset1(412)", "Delete MethodInvocation(413)", "Delete ExpressionStatement(414)", "Delete Block(415)", "Delete EnhancedForStatement(416)", "Delete SimpleName: RelSubset(422)", "Delete SimpleType: RelSubset(423)", "Delete SimpleName: subset1(424)", "Delete SingleVariableDeclaration(425)", "Delete SimpleName: subsets(426)", "Delete SimpleName: subset1(427)", "Delete SimpleName: subset(428)", "Delete InfixExpression: ==(429)", "Delete ContinueStatement(430)", "Delete Block(431)", "Delete IfStatement(432)", "Delete Modifier: final(433)", "Delete SimpleName: AbstractConverter(434)", "Delete SimpleType: AbstractConverter(435)", "Delete SimpleName: converter(436)", "Delete SimpleName: AbstractConverter(437)", "Delete SimpleType: AbstractConverter(438)", "Delete SimpleName: cluster(439)", "Delete SimpleName: subset1(440)", "Delete QualifiedName: ConventionTraitDef.INSTANCE(441)", "Delete SimpleName: traits(442)", "Delete ClassInstanceCreation(443)", "Delete VariableDeclarationFragment(444)", "Delete VariableDeclarationStatement(445)", "Delete SimpleName: planner(446)", "Delete SimpleName: register(447)", "Delete SimpleName: converter(448)", "Delete SimpleName: subset(449)", "Delete MethodInvocation(450)", "Delete ExpressionStatement(451)", "Delete Block(452)", "Delete EnhancedForStatement(453)", "Delete Block(464)", "Delete IfStatement(465)", "Delete Block(468)"]}}, {"RelSubset_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 18", "operations": ["INS ImportDeclaration to CompilationUnit at 18", "INS QualifiedName: com.google.common.collect.Iterables to ImportDeclaration at 0"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS Block to IfStatement at 1", "INS IfStatement to Block at 3", "INS SimpleName: input to InfixExpression: == at 0", "INS ReturnStatement to Block at 0", "INS NullLiteral to InfixExpression: == at 1", "INS InfixExpression: == to IfStatement at 0"]}, {"root": "UPDATE from iterator to Iterables", "operations": ["UPD SimpleName: iterator from iterator to Iterables"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3", "MOV SimpleName: iterator to MethodInvocation at 0"]}, {"root": "UPDATE from next to getFirst", "operations": ["UPD SimpleName: next from next to getFirst"]}, {"root": "INS NullLiteral to MethodInvocation at 4", "operations": ["INS NullLiteral to MethodInvocation at 4"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}]}}, {"RelSubset_diff": {"operations": ["Insert ImportDeclaration(37) into CompilationUnit(1547) at 18", "Insert QualifiedName: com.google.common.collect.Iterables(36) into ImportDeclaration(37) at 0", "Insert IfStatement(368) into Block(379) at 3", "Insert InfixExpression: ==(365) into IfStatement(368) at 0", "Insert Block(367) into IfStatement(368) at 1", "Insert SimpleName: input(363) into InfixExpression: ==(365) at 0", "Insert NullLiteral(364) into InfixExpression: ==(365) at 1", "Insert ReturnStatement(366) into Block(367) at 0", "Update SimpleName: iterator(354) to Iterables", "Move SimpleName: iterator(354) into MethodInvocation(359) at 0", "Update SimpleName: next(356) to getFirst", "Move MethodInvocation(353) into MethodInvocation(359) at 3", "Insert NullLiteral(358) into MethodInvocation(359) at 3", "Delete MethodInvocation(355)"]}}, {"RuleQueue_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: org.apache.calcite.rel.RelNodes to ImportDeclaration at 0"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 33", "operations": ["INS Block to MethodDeclaration at 5", "INS Modifier: static to TypeDeclaration: class at 2", "INS Modifier: public to MethodDeclaration at 0", "INS ReturnStatement to Block at 6", "INS TypeDeclaration: class to TypeDeclaration: class at 33", "INS SimpleName: RuleMatchImportanceComparator to TypeDeclaration: class at 3", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS SimpleName: RelNodes to MethodInvocation at 0", "INS Modifier: private to TypeDeclaration: class at 1", "INS PrefixExpression: - to ReturnStatement at 0", "INS MethodInvocation to PrefixExpression: - at 0"]}, {"root": "INS Modifier: static to FieldDeclaration at 2", "operations": ["INS Modifier: static to FieldDeclaration at 2"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV ParameterizedType: Comparator<VolcanoRuleMatch> to TypeDeclaration: class at 4", "MOV Javadoc to TypeDeclaration: class at 0"]}, {"root": "UPDATE from ruleMatchImportanceComparator to MATCH_COMPARATOR", "operations": ["UPD SimpleName: ruleMatchImportanceComparator from ruleMatchImportanceComparator to MATCH_COMPARATOR", "UPD SimpleName: ruleMatchImportanceComparator from ruleMatchImportanceComparator to MATCH_COMPARATOR", "UPD SimpleName: ruleMatchImportanceComparator from ruleMatchImportanceComparator to MATCH_COMPARATOR"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV PrimitiveType: int to MethodDeclaration at 1", "MOV SimpleName: compareRels to MethodDeclaration at 2"]}, {"root": "UPDATE from compareRels to compare", "operations": ["UPD SimpleName: compareRels from compareRels to compare"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 5", "MOV ExpressionStatement to Block at 4"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: compareTo to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS QualifiedName: match2.rule to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: getClass to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getClass to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS QualifiedName: match1.rule to MethodInvocation at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "INS PrefixExpression: - to ReturnStatement at 0", "operations": ["INS SimpleName: c to PrefixExpression: - at 0", "INS PrefixExpression: - to ReturnStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV QualifiedName: match1.rels to MethodInvocation at 2", "MOV SimpleName: compareRels to MethodInvocation at 1", "MOV QualifiedName: match2.rels to MethodInvocation at 3"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL PostfixExpression: ++", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL SimpleType: RelNode", "DEL QualifiedName: rels0.length", "DEL SimpleName: RelNode", "DEL InfixExpression: <", "DEL Modifier: static", "DEL SimpleName: i", "DEL SimpleName: i", "DEL Block", "DEL ArrayType: RelNode[]", "DEL Block", "DEL SimpleName: RelNode", "DEL SingleVariableDeclaration", "DEL SimpleType: RelNode", "DEL ArrayType: RelNode[]", "DEL ReturnStatement", "DEL VariableDeclarationExpression", "DEL ForStatement", "DEL SimpleName: rels0", "DEL NumberLiteral: 0", "DEL SimpleName: i", "DEL SimpleName: rels1", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL NumberLiteral: 0"]}, {"root": "DEL InfixExpression: -", "operations": ["DEL QualifiedName: rels0.length", "DEL QualifiedName: rels1.length", "DEL InfixExpression: -"]}, {"root": "DEL SimpleName: c", "operations": ["DEL SimpleName: c"]}, {"root": "DEL InfixExpression: -", "operations": ["DEL MethodInvocation", "DEL SimpleName: getId", "DEL ArrayAccess", "DEL SimpleName: i", "DEL InfixExpression: -", "DEL ArrayAccess", "DEL SimpleName: getId", "DEL SimpleName: rels1", "DEL SimpleName: rels0", "DEL SimpleName: i", "DEL MethodInvocation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: c"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Modifier: public", "DEL SimpleName: c", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL Block", "DEL Assignment: =", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL InfixExpression: ==", "DEL SimpleName: c", "DEL TypeDeclaration: class", "DEL IfStatement", "DEL SimpleName: c", "DEL SimpleName: RuleMatchImportanceComparator", "DEL SimpleName: compare", "DEL Block", "DEL VariableDeclarationStatement"]}]}}, {"RuleQueue_diff": {"operations": ["Insert ImportDeclaration(9) into CompilationUnit(2161) at 4", "Insert QualifiedName: org.apache.calcite.rel.RelNodes(8) into ImportDeclaration(9) at 0", "Insert TypeDeclaration: class(2022) into TypeDeclaration: class(2160) at 32", "Insert Modifier: static(188) into FieldDeclaration(200) at 2", "Move Javadoc(2002) into TypeDeclaration: class(2022) at 0", "Insert Modifier: private(1940) into TypeDeclaration: class(2022) at 1", "Insert Modifier: static(1941) into TypeDeclaration: class(2022) at 2", "Insert MethodDeclaration(2021) into TypeDeclaration: class(2022) at 5", "Insert Modifier: public(1948) into MethodDeclaration(2021) at 0", "Move PrimitiveType: int(1822) into MethodDeclaration(2021) at 1", "Update SimpleName: compareRels(1823) to compare", "Move SimpleName: compareRels(1823) into MethodDeclaration(2021) at 2", "Move SingleVariableDeclaration(2016) into MethodDeclaration(2021) at 3", "Move SingleVariableDeclaration(2020) into MethodDeclaration(2021) at 4", "Insert Block(2020) into MethodDeclaration(2021) at 5", "Move VariableDeclarationStatement(1842) into Block(2020) at 0", "Move IfStatement(1849) into Block(2020) at 1", "Move VariableDeclarationStatement(2027) into Block(2020) at 2", "Move VariableDeclarationStatement(2034) into Block(2020) at 3", "Move ExpressionStatement(1873) into Block(2020) at 4", "Move IfStatement(1880) into Block(2020) at 5", "Insert ReturnStatement(2019) into Block(2020) at 6", "Move InfixExpression: !=(1876) into IfStatement(1982) at 0", "Move InfixExpression: !=(1845) into IfStatement(2012) at 0", "Insert PrefixExpression: -(2018) into ReturnStatement(2019) at 0", "Insert MethodInvocation(1972) into VariableDeclarationFragment(1973) at 1", "Move MethodInvocation(2041) into Assignment: =(2003) at 1", "Move ReturnStatement(2058) into Block(2011) at 0", "Insert MethodInvocation(2017) into PrefixExpression: -(2018) at 0", "Insert MethodInvocation(1965) into MethodInvocation(1972) at 0", "Insert SimpleName: compareTo(1966) into MethodInvocation(1972) at 1", "Insert MethodInvocation(1971) into MethodInvocation(1972) at 2", "Insert PrefixExpression: -(1979) into ReturnStatement(1980) at 0", "Insert SimpleName: RelNodes(2013) into MethodInvocation(2017) at 0", "Move SimpleName: compareRels(2048) into MethodInvocation(2017) at 1", "Move QualifiedName: match1.rels(2049) into MethodInvocation(2017) at 2", "Move QualifiedName: match2.rels(2050) into MethodInvocation(2017) at 3", "Insert MethodInvocation(1963) into MethodInvocation(1965) at 0", "Insert SimpleName: getName(1964) into MethodInvocation(1965) at 1", "Insert MethodInvocation(1969) into MethodInvocation(1971) at 0", "Insert SimpleName: getName(1970) into MethodInvocation(1971) at 1", "Insert SimpleName: c(1978) into PrefixExpression: -(1979) at 0", "Insert QualifiedName: match1.rule(1961) into MethodInvocation(1963) at 0", "Insert SimpleName: getClass(1962) into MethodInvocation(1963) at 1", "Insert QualifiedName: match2.rule(1967) into MethodInvocation(1969) at 0", "Insert SimpleName: getClass(1968) into MethodInvocation(1969) at 1", "Delete Modifier: static(1821)", "Delete SimpleName: RelNode(1824)", "Delete SimpleType: RelNode(1825)", "Delete Dimension(1826)", "Delete ArrayType: RelNode[](1827)", "Delete SimpleName: rels0(1828)", "Delete SingleVariableDeclaration(1829)", "Delete SimpleName: RelNode(1830)", "Delete SimpleType: RelNode(1831)", "Delete Dimension(1832)", "Delete ArrayType: RelNode[](1833)", "Delete SimpleName: rels1(1834)", "Delete SingleVariableDeclaration(1835)", "Delete PrimitiveType: int(1850)", "Delete SimpleName: i(1851)", "Delete NumberLiteral: 0(1852)", "Delete VariableDeclarationFragment(1853)", "Delete VariableDeclarationExpression(1854)", "Delete SimpleName: i(1855)", "Delete QualifiedName: rels0.length(1856)", "Delete InfixExpression: <(1857)", "Delete SimpleName: i(1858)", "Delete PostfixExpression: ++(1859)", "Delete Block(1881)", "Delete ForStatement(1882)", "Delete NumberLiteral: 0(1883)", "Delete ReturnStatement(1884)", "Delete Block(1885)", "Delete MethodDeclaration(1886)", "Delete QualifiedName: rels0.length(1838)", "Delete QualifiedName: rels1.length(1839)", "Delete InfixExpression: -(1840)", "Delete SimpleName: c(1846)", "Delete SimpleName: rels0(1861)", "Delete SimpleName: i(1862)", "Delete ArrayAccess(1863)", "Delete SimpleName: getId(1864)", "Delete MethodInvocation(1865)", "Delete SimpleName: rels1(1866)", "Delete SimpleName: i(1867)", "Delete ArrayAccess(1868)", "Delete SimpleName: getId(1869)", "Delete MethodInvocation(1870)", "Delete InfixExpression: -(1871)", "Delete SimpleName: c(1877)", "Delete ReturnStatement(1878)", "Delete Modifier: private(2003)", "Delete Modifier: public(2010)", "Delete PrimitiveType: int(2011)", "Delete SimpleName: compare(2012)", "Delete PrimitiveType: int(2035)", "Delete SimpleName: c(2036)", "Delete VariableDeclarationFragment(2042)", "Delete VariableDeclarationStatement(2043)", "Delete SimpleName: c(2044)", "Delete NumberLiteral: 0(2045)", "Delete InfixExpression: ==(2046)", "Delete SimpleName: c(2047)", "Delete MethodInvocation(2051)", "Delete Assignment: =(2052)", "Delete ExpressionStatement(2053)", "Delete Block(2054)", "Delete IfStatement(2055)", "Delete Block(2059)", "Delete MethodDeclaration(2060)", "Delete TypeDeclaration: class(2061)"]}}, {"AggregateReduceFunctionsRule_cluster": {"actions": [{"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: getPlanner", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: oldAggRel", "DEL SimpleName: ruleCall", "DEL ExpressionStatement", "DEL SimpleName: setImportance", "DEL NumberLiteral: 0d"]}]}}, {"AggregateReduceFunctionsRule_diff": {"operations": ["Delete SimpleName: ruleCall(482)", "Delete SimpleName: getPlanner(483)", "Delete MethodInvocation(484)", "Delete SimpleName: setImportance(485)", "Delete SimpleName: oldAggRel(486)", "Delete NumberLiteral: 0d(487)", "Delete MethodInvocation(488)", "Delete ExpressionStatement(489)"]}}], "commit_stats": [{"total_files": 17, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}