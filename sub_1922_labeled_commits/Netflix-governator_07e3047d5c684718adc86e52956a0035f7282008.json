{"application": "Netflix-governator", "csha": "07e3047d5c684718adc86e52956a0035f7282008", "files": [{"RequiredAsset_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: java.lang.annotation.Documented to ImportDeclaration at 0"]}, {"root": "INS MarkerAnnotation to AnnotationTypeDeclaration at 0", "operations": ["INS MarkerAnnotation to AnnotationTypeDeclaration at 0", "INS SimpleName: Documented to MarkerAnnotation at 0"]}]}}, {"RequiredAsset_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(31) at 1", "Insert QualifiedName: java.lang.annotation.Documented(2) into ImportDeclaration(3) at 0", "Insert MarkerAnnotation(9) into AnnotationTypeDeclaration(30) at 0", "Insert SimpleName: Documented(8) into MarkerAnnotation(9) at 0"]}}, {"RequiredAssets_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: java.lang.annotation.Documented to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS MarkerAnnotation to AnnotationTypeDeclaration at 0", "operations": ["INS SimpleName: Documented to MarkerAnnotation at 0", "INS MarkerAnnotation to AnnotationTypeDeclaration at 0"]}]}}, {"RequiredAssets_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(25) at 1", "Insert QualifiedName: java.lang.annotation.Documented(2) into ImportDeclaration(3) at 0", "Insert MarkerAnnotation(9) into AnnotationTypeDeclaration(24) at 0", "Insert SimpleName: Documented(8) into MarkerAnnotation(9) at 0"]}}, {"Configuration_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: java.lang.annotation.Documented to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS MarkerAnnotation to AnnotationTypeDeclaration at 0", "operations": ["INS SimpleName: Documented to MarkerAnnotation at 0", "INS MarkerAnnotation to AnnotationTypeDeclaration at 0"]}]}}, {"Configuration_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(25) at 1", "Insert QualifiedName: java.lang.annotation.Documented(2) into ImportDeclaration(3) at 0", "Insert MarkerAnnotation(11) into AnnotationTypeDeclaration(24) at 0", "Insert SimpleName: Documented(10) into MarkerAnnotation(11) at 0"]}}, {"AutoBindSingleton_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: java.lang.annotation.Documented to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS MarkerAnnotation to AnnotationTypeDeclaration at 0", "operations": ["INS MarkerAnnotation to AnnotationTypeDeclaration at 0", "INS SimpleName: Documented to MarkerAnnotation at 0"]}]}}, {"AutoBindSingleton_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(19) at 1", "Insert QualifiedName: java.lang.annotation.Documented(2) into ImportDeclaration(3) at 0", "Insert MarkerAnnotation(9) into AnnotationTypeDeclaration(18) at 0", "Insert SimpleName: Documented(8) into MarkerAnnotation(9) at 0"]}}, {"ClasspathScanner_cluster": {"actions": [{"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: javax.inject.Singleton"]}]}}, {"ClasspathScanner_diff": {"operations": ["Delete QualifiedName: javax.inject.Singleton(14)", "Delete ImportDeclaration(15)"]}}, {"LifecycleManager_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 18"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS ImportDeclaration to CompilationUnit at 8", "INS QualifiedName: com.netflix.governator.warming.CoolDown to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS QualifiedName: com.netflix.governator.warming.WarmUp to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 9"]}, {"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS ImportDeclaration to CompilationUnit at 10", "INS QualifiedName: com.netflix.governator.warming.WarmUpManager to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 17", "operations": ["INS ImportDeclaration to CompilationUnit at 17", "INS QualifiedName: javax.xml.bind.DatatypeConverter to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 21", "operations": ["INS ImportDeclaration to CompilationUnit at 21", "INS QualifiedName: java.text.DateFormat to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 25", "operations": ["INS QualifiedName: java.util.Date to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 25"]}, {"root": "INS ImportDeclaration to CompilationUnit at 27", "operations": ["INS ImportDeclaration to CompilationUnit at 27", "INS QualifiedName: java.util.Locale to ImportDeclaration at 0"]}, {"root": "UPDATE from java.io.IOException to java.text.ParseException", "operations": ["UPD QualifiedName: java.io.IOException from java.io.IOException to java.text.ParseException"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 10", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 5", "INS MethodInvocation to InfixExpression: != at 0", "INS InfixExpression: != to InfixExpression: || at 1", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS BooleanLiteral: false to ReturnStatement at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS Modifier: private to TypeDeclaration: class at 1", "INS SimpleName: getClass to MethodInvocation at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: obj to SingleVariableDeclaration at 1", "INS SimpleName: o to InfixExpression: == at 1", "INS Block to MethodDeclaration at 3", "INS MethodInvocation to InfixExpression: != at 1", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS SimpleName: Object to SimpleType: Object at 0", "INS IfStatement to Block at 0", "INS SimpleName: hashCode to MethodDeclaration at 3", "INS PrimitiveType: int to MethodDeclaration at 2", "INS SimpleName: obj to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: StateKey to MethodDeclaration at 1", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodInvocation to InfixExpression: == at 1", "INS Modifier: static to TypeDeclaration: class at 2", "INS SimpleType: Object to FieldDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS InfixExpression: || to IfStatement at 0", "INS PrimitiveType: boolean to MethodDeclaration at 3", "INS Modifier: private to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: Object to SimpleType: Object at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: obj to MethodInvocation at 2", "INS SimpleName: obj to Assignment: = at 1", "INS TypeDeclaration: class to TypeDeclaration: class at 10", "INS Block to MethodDeclaration at 6", "INS FieldAccess to Assignment: = at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: obj to FieldAccess at 1", "INS Javadoc to TypeDeclaration: class at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: o to SingleVariableDeclaration at 1", "INS SimpleName: o to MethodInvocation at 0", "INS SimpleName: hashCode to MethodInvocation at 1", "INS Modifier: final to FieldDeclaration at 0", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleName: StateKey to TypeDeclaration: class at 3", "INS NullLiteral to InfixExpression: == at 1", "INS Modifier: public to MethodDeclaration at 2", "INS StringLiteral: \"SimplifiableIfStatement\" to SingleMemberAnnotation at 1", "INS SimpleName: o to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0", "INS ThisExpression to InfixExpression: == at 0", "INS Modifier: public to MethodDeclaration at 1", "INS ReturnStatement to Block at 2", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: System to MethodInvocation at 0", "INS IfStatement to Block at 1", "INS InfixExpression: == to InfixExpression: || at 0", "INS BooleanLiteral: true to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: identityHashCode to MethodInvocation at 1", "INS SingleMemberAnnotation to MethodDeclaration at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: hashCode to MethodInvocation at 0", "INS SimpleName: o to InfixExpression: == at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS SimpleName: equals to MethodDeclaration at 4", "INS TextElement: Lifecycle managed objects have to be referenced via Object identity not equals() to TagElement at 0", "INS InfixExpression: == to ReturnStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 21", "operations": ["INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleType: Exception to SingleVariableDeclaration at 0", "INS StringLiteral: \"While stopping instances\" to MethodInvocation at 2", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS SimpleType: Exception to SingleVariableDeclaration at 0", "INS SimpleName: log to MethodInvocation at 0", "INS StringLiteral: \"While cooling down instances\" to MethodInvocation at 2", "INS SimpleName: error to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS TryStatement to Block at 0", "INS Block to MethodDeclaration at 5", "INS IfStatement to Block at 0", "INS TryStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS CatchClause to TryStatement at 1", "INS ExpressionStatement to Block at 0", "INS CatchClause to TryStatement at 1", "INS SimpleName: invokings to MethodInvocation at 0", "INS SimpleName: doWarmingCooling to MethodInvocation at 0", "INS Block to TryStatement at 2", "INS SimpleName: e to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: log to MethodInvocation at 0", "INS BooleanLiteral: false to MethodInvocation at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: clear to MethodInvocation at 1", "INS Block to TryStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: e to MethodInvocation at 3", "INS Block to CatchClause at 1", "INS Block to CatchClause at 1", "INS SimpleName: error to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 22", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: runAll to MethodInvocation at 1", "INS NullLiteral to MethodInvocation at 4", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS QualifiedName: record.obj to ClassInstanceCreation at 1", "INS SimpleName: manager to MethodInvocation at 0", "INS SimpleName: size to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: warmUp to MethodInvocation at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: objectStates to MethodInvocation at 0", "INS SimpleName: warm to SingleVariableDeclaration at 1", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: invokings to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: invokings to ConditionalExpression at 1", "INS SimpleName: list to VariableDeclarationFragment at 0", "INS BooleanLiteral: true to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 22", "INS SimpleType: StateKey to ClassInstanceCreation at 0", "INS ExpressionStatement to Block at 0", "INS QualifiedName: record.warmUpMethods to EnhancedForStatement at 1", "INS SimpleName: doWarmingCooling to MethodDeclaration at 2", "INS SimpleName: identityHashCode to MethodInvocation at 1", "INS SimpleName: put to MethodInvocation at 1", "INS InfixExpression: && to IfStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleType: WarmUpManager to ClassInstanceCreation at 0", "INS MethodInvocation to ConditionalExpression at 2", "INS InfixExpression: && to IfStatement at 0", "INS IfStatement to Block at 3", "INS SimpleType: WarmUp to TypeLiteral at 0", "INS SimpleName: manager to MethodInvocation at 0", "INS EnhancedForStatement to Block at 2", "INS Block to MethodDeclaration at 5", "INS SimpleName: warm to InfixExpression: && at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: manager to MethodInvocation at 0", "INS Block to EnhancedForStatement at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to InfixExpression: > at 0", "INS VariableDeclarationStatement to Block at 0", "INS IfStatement to IfStatement at 2", "INS SimpleName: InvokeRecord to SimpleType: InvokeRecord at 0", "INS SimpleName: canBeParallel to MethodInvocation at 1", "INS ParenthesizedExpression to InfixExpression: && at 1", "INS SimpleName: WarmUp to SimpleType: WarmUp at 0", "INS SimpleName: debug to MethodInvocation at 1", "INS SimpleName: add to MethodInvocation at 1", "INS EnhancedForStatement to Block at 2", "INS ExpressionStatement to Block at 1", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleName: getAnnotation to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: InvokeRecord to SimpleType: InvokeRecord at 0", "INS MethodInvocation to InfixExpression: > at 0", "INS ParenthesizedExpression to InfixExpression: && at 1", "INS SimpleName: StateKey to SimpleType: StateKey at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: manager to VariableDeclarationFragment at 0", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS ParameterizedType: List<InvokeRecord> to VariableDeclarationStatement at 0", "INS SimpleType: InvokeRecord to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1", "INS QualifiedName: record.coolDownMethods to MethodInvocation at 0", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS Modifier: private to MethodDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: > to ParenthesizedExpression at 0", "INS SimpleName: Method to SimpleType: Method at 0", "INS StringLiteral: \"Warming up %s:%d\" to MethodInvocation at 2", "INS SimpleName: WarmUpManager to SimpleType: WarmUpManager at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: record.obj to MethodInvocation at 2", "INS SimpleType: WarmUp to VariableDeclarationStatement at 0", "INS SimpleName: WarmUpManager to SimpleType: WarmUpManager at 0", "INS SimpleName: getReversed to MethodInvocation at 0", "INS SimpleType: Exception to MethodDeclaration at 4", "INS SimpleName: m to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS QualifiedName: LifecycleState.WARMING_UP to MethodInvocation at 3", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleType: InvokeRecord to ParameterizedType: List<InvokeRecord> at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 0 to MethodInvocation at 3", "INS SimpleType: Method to SingleVariableDeclaration at 0", "INS SimpleName: m to MethodInvocation at 0", "INS SimpleName: record to SingleVariableDeclaration at 1", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS SimpleName: list to EnhancedForStatement at 1", "INS SimpleName: warmUp to VariableDeclarationFragment at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: warm to PrefixExpression: ! at 0", "INS SimpleName: System to MethodInvocation at 0", "INS SimpleName: runAll to MethodInvocation at 1", "INS SimpleType: WarmUpManager to VariableDeclarationStatement at 0", "INS InfixExpression: > to ParenthesizedExpression at 0", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleName: m to MethodInvocation at 3", "INS IfStatement to Block at 0", "INS SimpleName: warm to ConditionalExpression at 0", "INS TypeLiteral to MethodInvocation at 2", "INS Block to IfStatement at 2", "INS SimpleName: size to MethodInvocation at 1", "INS QualifiedName: record.warmUpMethods to MethodInvocation at 0", "INS SimpleName: warm to IfStatement at 0", "INS SimpleName: WarmUp to SimpleType: WarmUp at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: log to MethodInvocation at 0", "INS QualifiedName: record.obj to MethodInvocation at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 26", "operations": ["INS SimpleType: List to ParameterizedType: List<InvokeRecord> at 0", "INS SimpleName: List to SimpleType: List at 0", "INS ParameterizedType: List<InvokeRecord> to SingleVariableDeclaration at 0", "INS SimpleType: InvokeRecord to ParameterizedType: List<InvokeRecord> at 1", "INS SimpleName: List to SimpleType: List at 0", "INS MethodDeclaration to TypeDeclaration: class at 26", "INS SimpleName: List to SimpleType: List at 0", "INS ParameterizedType: List<InvokeRecord> to VariableDeclarationStatement at 0", "INS SimpleType: InvokeRecord to ParameterizedType: List<InvokeRecord> at 1", "INS SimpleType: List to ParameterizedType: List<InvokeRecord> at 0", "INS SimpleType: List to ParameterizedType: List<InvokeRecord> at 0", "INS ReturnStatement to Block at 2", "INS SimpleName: InvokeRecord to SimpleType: InvokeRecord at 0", "INS SimpleName: InvokeRecord to SimpleType: InvokeRecord at 0", "INS SimpleName: Lists to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: records to SingleVariableDeclaration at 1", "INS SimpleName: newArrayList to MethodInvocation at 1", "INS SimpleType: InvokeRecord to ParameterizedType: List<InvokeRecord> at 1", "INS SimpleName: reversed to ReturnStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: getReversed to MethodDeclaration at 2", "INS ParameterizedType: List<InvokeRecord> to MethodDeclaration at 1", "INS Modifier: private to MethodDeclaration at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: reversed to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: InvokeRecord to SimpleType: InvokeRecord at 0", "INS SimpleName: records to MethodInvocation at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 27", "operations": ["INS SimpleName: DateFormat to SimpleType: DateFormat at 0", "INS SimpleName: value to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setLenient to MethodInvocation at 1", "INS QualifiedName: DateFormat.SHORT to MethodInvocation at 2", "INS SimpleName: value to SingleVariableDeclaration at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS Block to CatchClause at 1", "INS SimpleName: parse to MethodInvocation at 1", "INS CatchClause to TryStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleType: ParseException to SingleVariableDeclaration at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: parseDate to MethodDeclaration at 2", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: parseDateTime to MethodInvocation at 1", "INS SimpleName: Date to SimpleType: Date at 0", "INS TryStatement to Block at 3", "INS ExpressionStatement to Block at 1", "INS SimpleName: DateFormat to MethodInvocation at 0", "INS SimpleName: DatatypeConverter to MethodInvocation at 0", "INS SimpleName: formatter to MethodInvocation at 0", "INS SimpleName: Locale to MethodInvocation at 0", "INS SimpleType: Date to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS ReturnStatement to Block at 0", "INS Block to CatchClause at 1", "INS SimpleName: getDateInstance to MethodInvocation at 1", "INS NullLiteral to ReturnStatement at 0", "INS SimpleName: ParseException to SimpleType: ParseException at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: formatter to VariableDeclarationFragment at 0", "INS SimpleName: value to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS TryStatement to Block at 2", "INS SimpleName: getDefault to MethodInvocation at 1", "INS BooleanLiteral: false to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: getTime to MethodInvocation at 1", "INS Block to TryStatement at 0", "INS SimpleType: IllegalArgumentException to SingleVariableDeclaration at 0", "INS Block to TryStatement at 0", "INS CatchClause to TryStatement at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 27", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 4", "INS SimpleType: DateFormat to VariableDeclarationStatement at 0", "INS SimpleName: formatter to MethodInvocation at 0"]}, {"root": "UPDATE from Map<Object,LifecycleState> to Map<StateKey,LifecycleState>", "operations": ["UPD ParameterizedType: Map<Object,LifecycleState> from Map<Object,LifecycleState> to Map<StateKey,LifecycleState>"]}, {"root": "UPDATE from List<PreDestroyRecord> to List<InvokeRecord>", "operations": ["UPD ParameterizedType: List<PreDestroyRecord> from List<PreDestroyRecord> to List<InvokeRecord>"]}, {"root": "UPDATE from PreDestroyRecord to InvokeRecord", "operations": ["UPD SimpleName: PreDestroyRecord from PreDestroyRecord to InvokeRecord", "UPD SimpleName: PreDestroyRecord from PreDestroyRecord to InvokeRecord", "UPD SimpleType: PreDestroyRecord from PreDestroyRecord to InvokeRecord", "UPD SimpleType: PreDestroyRecord from PreDestroyRecord to InvokeRecord", "UPD SimpleName: PreDestroyRecord from PreDestroyRecord to InvokeRecord", "UPD SimpleType: PreDestroyRecord from PreDestroyRecord to InvokeRecord", "UPD SimpleName: PreDestroyRecord from PreDestroyRecord to InvokeRecord", "UPD SimpleName: PreDestroyRecord from PreDestroyRecord to InvokeRecord", "UPD SimpleName: PreDestroyRecord from PreDestroyRecord to InvokeRecord", "UPD SimpleType: PreDestroyRecord from PreDestroyRecord to InvokeRecord"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS Modifier: final to FieldDeclaration at 0", "INS ParameterizedType: Collection<Method> to FieldDeclaration at 1", "INS SimpleName: Method to SimpleType: Method at 0", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleType: Method to ParameterizedType: Collection<Method> at 1", "INS SimpleType: Collection to ParameterizedType: Collection<Method> at 0", "INS SimpleName: warmUpMethods to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS Modifier: final to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleType: Collection to ParameterizedType: Collection<Method> at 0", "INS SimpleName: coolDownMethods to VariableDeclarationFragment at 0", "INS SimpleType: Method to ParameterizedType: Collection<Method> at 1", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS SimpleName: Method to SimpleType: Method at 0", "INS ParameterizedType: Collection<Method> to FieldDeclaration at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS PrimitiveType: boolean to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: hasAssets to VariableDeclarationFragment at 0"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS QualifiedName: record.warmUpMethods to MethodInvocation at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: doWarmingCooling to MethodInvocation at 0", "INS Block to MethodDeclaration at 4", "INS Block to EnhancedForStatement at 2", "INS EnhancedForStatement to Block at 2", "INS SimpleName: InvokeRecord to SimpleType: InvokeRecord at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: size to MethodInvocation at 1", "INS InfixExpression: > to IfStatement at 0", "INS BooleanLiteral: true to MethodInvocation at 1", "INS SimpleName: record to SingleVariableDeclaration at 1", "INS SimpleName: invokings to EnhancedForStatement at 1", "INS MethodInvocation to InfixExpression: > at 0", "INS IfStatement to Block at 0", "INS SimpleType: InvokeRecord to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 1", "MOV PrimitiveType: void to MethodDeclaration at 3", "MOV SimpleName: close to MethodDeclaration at 4", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV Modifier: synchronized to MethodDeclaration at 2"]}, {"root": "INS SimpleType: Exception to MethodDeclaration at 3", "operations": ["INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleType: Exception to MethodDeclaration at 3"]}, {"root": "INS SimpleType: StateKey to ParameterizedType: Map<Object,LifecycleState> at 1", "operations": ["INS SimpleType: StateKey to ParameterizedType: Map<Object,LifecycleState> at 1", "INS SimpleName: StateKey to SimpleType: StateKey at 0"]}, {"root": "UPDATE from preDestroyRecords to invokings", "operations": ["UPD SimpleName: preDestroyRecords from preDestroyRecords to invokings", "UPD SimpleName: preDestroyRecords from preDestroyRecords to invokings"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: warmUpMethods to SingleVariableDeclaration at 1", "INS SimpleType: Method to ParameterizedType: Collection<Method> at 1", "INS SimpleName: Method to SimpleType: Method at 0", "INS SimpleType: Collection to ParameterizedType: Collection<Method> at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ParameterizedType: Collection<Method> to SingleVariableDeclaration at 0", "INS SimpleName: Collection to SimpleType: Collection at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: coolDownMethods to SingleVariableDeclaration at 1", "INS SimpleType: Collection to ParameterizedType: Collection<Method> at 0", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS ParameterizedType: Collection<Method> to SingleVariableDeclaration at 0", "INS SimpleName: Method to SimpleType: Method at 0", "INS SimpleType: Method to ParameterizedType: Collection<Method> at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: hasAssets to SingleVariableDeclaration at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleName: key to VariableDeclarationFragment at 0", "INS SimpleName: obj to ClassInstanceCreation at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleType: StateKey to VariableDeclarationStatement at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: StateKey to SimpleType: StateKey at 0", "INS SimpleType: StateKey to ClassInstanceCreation at 0", "INS SimpleName: StateKey to SimpleType: StateKey at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 5", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: WarmUp to SimpleType: WarmUp at 0", "INS SimpleName: methods to MethodInvocation at 0", "INS SimpleType: Method to ParameterizedType: Collection<Method> at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: Collection to ParameterizedType: Collection<Method> at 0", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleType: WarmUp to TypeLiteral at 0", "INS SimpleName: warmUpMethods to VariableDeclarationFragment at 0", "INS SimpleName: Method to SimpleType: Method at 0", "INS VariableDeclarationStatement to Block at 5", "INS ParameterizedType: Collection<Method> to VariableDeclarationStatement at 0", "INS SimpleName: methodsFor to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 6", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: CoolDown to TypeLiteral at 0", "INS ParameterizedType: Collection<Method> to VariableDeclarationStatement at 0", "INS SimpleName: methodsFor to MethodInvocation at 1", "INS SimpleType: Method to ParameterizedType: Collection<Method> at 1", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: CoolDown to SimpleType: CoolDown at 0", "INS VariableDeclarationStatement to Block at 6", "INS SimpleName: methods to MethodInvocation at 0", "INS SimpleType: Collection to ParameterizedType: Collection<Method> at 0", "INS SimpleName: coolDownMethods to VariableDeclarationFragment at 0", "INS SimpleName: Method to SimpleType: Method at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Collection to SimpleType: Collection at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: String to SingleVariableDeclaration at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationStatement to Block at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: configurationName to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from CopyOnWriteArrayList<PreDestroyRecord> to CopyOnWriteArrayList<InvokeRecord>", "operations": ["UPD ParameterizedType: CopyOnWriteArrayList<PreDestroyRecord> from CopyOnWriteArrayList<PreDestroyRecord> to CopyOnWriteArrayList<InvokeRecord>"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Object to SingleVariableDeclaration at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: warmUpMethods to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: warmUpMethods to FieldAccess at 1"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS FieldAccess to Assignment: = at 0", "INS SimpleName: coolDownMethods to Assignment: = at 1", "INS SimpleName: coolDownMethods to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 3"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS SimpleName: hasAssets to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 4", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: hasAssets to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0"]}, {"root": "INS Block to IfStatement at 2", "operations": ["INS SimpleName: obj to MethodInvocation at 0", "INS SimpleName: getClass to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 2", "INS SimpleName: log to MethodInvocation at 0", "INS SimpleName: identityHashCode to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: format to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS StringLiteral: \"Object already completed lifecycle. class: %s - ID: %d\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleName: warn to MethodInvocation at 1", "INS SimpleName: obj to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: System to MethodInvocation at 0", "INS SimpleName: String to MethodInvocation at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV MethodInvocation to IfStatement at 0"]}, {"root": "INS MethodInvocation to EnhancedForStatement at 1", "operations": ["INS SimpleName: invokings to MethodInvocation at 1", "INS SimpleName: getReversed to MethodInvocation at 0", "INS MethodInvocation to EnhancedForStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4", "MOV TryStatement to Block at 0"]}, {"root": "MOVE from ParameterizedType: List<InvokeRecord>", "operations": ["MOV SimpleType: List to ParameterizedType: List<InvokeRecord> at 0"]}, {"root": "INS ParenthesizedExpression to InfixExpression: || at 2", "operations": ["INS ParenthesizedExpression to InfixExpression: || at 2", "INS SimpleName: warmUpMethods to MethodInvocation at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS SimpleName: size to MethodInvocation at 1", "INS InfixExpression: > to ParenthesizedExpression at 0", "INS MethodInvocation to InfixExpression: > at 0"]}, {"root": "INS ParenthesizedExpression to InfixExpression: || at 3", "operations": ["INS SimpleName: size to MethodInvocation at 1", "INS ParenthesizedExpression to InfixExpression: || at 3", "INS MethodInvocation to InfixExpression: > at 0", "INS InfixExpression: > to ParenthesizedExpression at 0", "INS SimpleName: coolDownMethods to MethodInvocation at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS QualifiedName: record.hasAssets to IfStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS QualifiedName: record.obj to MethodInvocation at 0", "INS SimpleName: identityHashCode to MethodInvocation at 1", "INS StringLiteral: \"Stopping %s:%d\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleName: debug to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: record.obj to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS SimpleName: System to MethodInvocation at 0", "INS SimpleName: log to MethodInvocation at 0", "INS SimpleName: getClass to MethodInvocation at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from configuration to configurationName", "operations": ["UPD SimpleName: configuration from configuration to configurationName", "UPD SimpleName: configuration from configuration to configurationName", "UPD SimpleName: configuration from configuration to configurationName", "UPD SimpleName: configuration from configuration to configurationName", "UPD SimpleName: configuration from configuration to configurationName"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: configuration to MethodInvocation at 2"]}, {"root": "UPDATE from obj to key", "operations": ["UPD SimpleName: obj from obj to key", "UPD SimpleName: obj from obj to key", "UPD SimpleName: obj from obj to key", "UPD SimpleName: obj from obj to key"]}, {"root": "INS ClassInstanceCreation to MethodInvocation at 2", "operations": ["INS SimpleName: obj to ClassInstanceCreation at 1", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: StateKey to SimpleType: StateKey at 0", "INS SimpleType: StateKey to ClassInstanceCreation at 0"]}, {"root": "MOVE from TryStatement", "operations": ["MOV Block to TryStatement at 0"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS MethodInvocation to IfStatement at 0", "INS SimpleName: isAssignableFrom to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 1"]}, {"root": "INS ClassInstanceCreation to MethodInvocation at 2", "operations": ["INS SimpleType: StateKey to ClassInstanceCreation at 0", "INS QualifiedName: record.obj to ClassInstanceCreation at 1", "INS SimpleName: StateKey to SimpleType: StateKey at 0", "INS ClassInstanceCreation to MethodInvocation at 2"]}, {"root": "UPDATE from log to objectStates", "operations": ["UPD SimpleName: log from log to objectStates"]}, {"root": "UPDATE from debug to remove", "operations": ["UPD SimpleName: debug from debug to remove"]}, {"root": "INS ClassInstanceCreation to MethodInvocation at 2", "operations": ["INS QualifiedName: record.obj to ClassInstanceCreation at 1", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleType: StateKey to ClassInstanceCreation at 0", "INS SimpleName: StateKey to SimpleType: StateKey at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV TypeLiteral to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to MethodInvocation at 4", "INS QualifiedName: record.obj to MethodInvocation at 0", "INS SimpleName: log to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getClass to MethodInvocation at 1", "INS QualifiedName: record.obj to MethodInvocation at 2", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: identityHashCode to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: debug to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: System to MethodInvocation at 0", "INS StringLiteral: \"Cooling down %s:%d\" to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: LifecycleState.COOLING_DOWN to MethodInvocation at 3", "INS QualifiedName: record.obj to ClassInstanceCreation at 1", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleName: objectStates to MethodInvocation at 0", "INS SimpleType: StateKey to ClassInstanceCreation at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: StateKey to SimpleType: StateKey at 0"]}, {"root": "INS EnhancedForStatement to Block at 2", "operations": ["INS EnhancedForStatement to Block at 2", "INS SimpleName: coolDown to VariableDeclarationFragment at 0", "INS SimpleType: CoolDown to TypeLiteral at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: Method to SingleVariableDeclaration at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: CoolDown to SimpleType: CoolDown at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: m to MethodInvocation at 0", "INS SimpleName: getAnnotation to MethodInvocation at 1", "INS SimpleName: Method to SimpleType: Method at 0", "INS QualifiedName: record.coolDownMethods to EnhancedForStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: m to SingleVariableDeclaration at 1", "INS SimpleName: CoolDown to SimpleType: CoolDown at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: CoolDown to VariableDeclarationStatement at 0", "INS TypeLiteral to MethodInvocation at 2"]}, {"root": "INS SimpleName: warmUpMethods to ClassInstanceCreation at 3", "operations": ["INS SimpleName: warmUpMethods to ClassInstanceCreation at 3"]}, {"root": "INS SimpleName: coolDownMethods to ClassInstanceCreation at 4", "operations": ["INS SimpleName: coolDownMethods to ClassInstanceCreation at 4"]}, {"root": "INS SimpleName: hasAssets to ClassInstanceCreation at 5", "operations": ["INS SimpleName: hasAssets to ClassInstanceCreation at 5"]}, {"root": "INS SimpleType: String to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "INS MethodInvocation to InfixExpression: || at 0", "operations": ["INS SimpleName: isAssignableFrom to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: || at 0"]}, {"root": "INS MethodInvocation to InfixExpression: || at 1", "operations": ["INS QualifiedName: Boolean.TYPE to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: isAssignableFrom to MethodInvocation at 1"]}, {"root": "UPDATE from IOException to Exception", "operations": ["UPD SimpleName: IOException from IOException to Exception"]}, {"root": "MOVE from SimpleType: Exception", "operations": ["MOV SimpleName: IOException to SimpleType: Exception at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV TypeLiteral to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to InfixExpression: || at 0", "operations": ["INS MethodInvocation to InfixExpression: || at 0", "INS SimpleName: isAssignableFrom to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to InfixExpression: || at 1", "operations": ["INS SimpleName: isAssignableFrom to MethodInvocation at 1", "INS QualifiedName: Integer.TYPE to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: || at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: configuration to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV TypeLiteral to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to InfixExpression: || at 0", "operations": ["INS SimpleName: isAssignableFrom to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: || at 0"]}, {"root": "INS MethodInvocation to InfixExpression: || at 1", "operations": ["INS MethodInvocation to InfixExpression: || at 1", "INS QualifiedName: Long.TYPE to MethodInvocation at 0", "INS SimpleName: isAssignableFrom to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: debug to MethodInvocation at 1", "INS StringLiteral: \"long %s = %d\" to MethodInvocation at 2", "INS SimpleName: value to MethodInvocation at 4", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: log to MethodInvocation at 0"]}, {"root": "INS IfStatement to IfStatement at 2", "operations": ["INS SimpleName: value to MethodInvocation at 4", "INS IfStatement to IfStatement at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: Date to TypeLiteral at 0", "INS MethodInvocation to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: field to MethodInvocation at 0", "INS SimpleName: obj to MethodInvocation at 2", "INS TypeLiteral to MethodInvocation at 0", "INS SimpleName: isAssignableFrom to MethodInvocation at 1", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleName: field to MethodInvocation at 0", "INS SimpleName: configurationProvider to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"Date %s = %f\" to MethodInvocation at 2", "INS SimpleName: value to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: log to MethodInvocation at 0", "INS SimpleName: parseDate to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS SimpleType: Date to VariableDeclarationStatement at 0", "INS SimpleName: Date to SimpleType: Date at 0", "INS SimpleName: configurationName to MethodInvocation at 2", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: debug to MethodInvocation at 1", "INS SimpleName: getType to MethodInvocation at 1", "INS SimpleName: set to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: field to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: value to VariableDeclarationFragment at 0", "INS SimpleName: Date to SimpleType: Date at 0", "INS SimpleName: getName to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: configuration to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV TypeLiteral to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to InfixExpression: || at 0", "operations": ["INS MethodInvocation to InfixExpression: || at 0", "INS SimpleName: isAssignableFrom to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to InfixExpression: || at 1", "operations": ["INS SimpleName: isAssignableFrom to MethodInvocation at 1", "INS QualifiedName: Double.TYPE to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: || at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "UPDATE from preDestroyRecords to manager", "operations": ["UPD SimpleName: preDestroyRecords from preDestroyRecords to manager"]}, {"root": "INS SimpleName: add to MethodInvocation at 1", "operations": ["INS SimpleName: add to MethodInvocation at 1"]}, {"root": "INS QualifiedName: record.obj to MethodInvocation at 2", "operations": ["INS QualifiedName: record.obj to MethodInvocation at 2"]}, {"root": "INS SimpleName: m to MethodInvocation at 3", "operations": ["INS SimpleName: m to MethodInvocation at 3"]}, {"root": "INS MethodInvocation to MethodInvocation at 4", "operations": ["INS SimpleName: canBeParallel to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: configuration to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV TypeLiteral to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from clear to coolDown", "operations": ["UPD SimpleName: clear from clear to coolDown"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: clear to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: configuration to MethodInvocation at 2"]}, {"root": "UPDATE from \"int %s = %f\" to \"double %s = %f\"", "operations": ["UPD StringLiteral: \"int %s = %f\" from \"int %s = %f\" to \"double %s = %f\""]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: field to MethodInvocation at 0"]}, {"root": "INS SimpleName: configurationName to MethodInvocation at 2", "operations": ["INS SimpleName: configurationName to MethodInvocation at 2"]}, {"root": "DEL SimpleName: obj", "operations": ["DEL SimpleName: obj"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL TryStatement", "operations": ["DEL TryStatement", "DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL IfStatement", "DEL SimpleType: IOException", "DEL MethodDeclaration"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: reversed", "DEL SimpleName: PreDestroyRecord", "DEL ParameterizedType: List<PreDestroyRecord>", "DEL SimpleType: PreDestroyRecord", "DEL VariableDeclarationStatement", "DEL SimpleName: Lists", "DEL SimpleName: newArrayList", "DEL MethodInvocation", "DEL SimpleName: preDestroyRecords", "DEL VariableDeclarationFragment"]}, {"root": "DEL SimpleName: reversed", "operations": ["DEL SimpleName: reversed"]}, {"root": "DEL QualifiedName: record.obj", "operations": ["DEL QualifiedName: record.obj"]}, {"root": "DEL StringLiteral: \"Stopping %s\"", "operations": ["DEL StringLiteral: \"Stopping %s\""]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: value", "DEL MethodInvocation"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL InfixExpression: =="]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: value"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL ParenthesizedExpression", "DEL InfixExpression: =="]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL QualifiedName: Boolean.TYPE", "DEL ParenthesizedExpression", "DEL InfixExpression: =="]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: value", "DEL MethodInvocation"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL InfixExpression: ==", "DEL ParenthesizedExpression"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL InfixExpression: ==", "DEL ParenthesizedExpression", "DEL QualifiedName: Integer.TYPE"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: value"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: getName", "DEL SimpleName: field", "DEL SimpleName: value", "DEL SimpleName: log", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: debug", "DEL StringLiteral: \"int %s = %d\"", "DEL MethodInvocation"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL ParenthesizedExpression", "DEL InfixExpression: =="]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL QualifiedName: Long.TYPE", "DEL InfixExpression: ==", "DEL ParenthesizedExpression"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: value"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL ParenthesizedExpression", "DEL InfixExpression: =="]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL ParenthesizedExpression", "DEL QualifiedName: Double.TYPE", "DEL InfixExpression: =="]}]}}, {"LifecycleManager_diff": {"operations": ["Move ImportDeclaration(31) into CompilationUnit(1462) at 18", "Insert ImportDeclaration(17) into CompilationUnit(1462) at 8", "Insert ImportDeclaration(19) into CompilationUnit(1462) at 9", "Insert ImportDeclaration(21) into CompilationUnit(1462) at 10", "Insert ImportDeclaration(35) into CompilationUnit(1462) at 17", "Insert ImportDeclaration(43) into CompilationUnit(1462) at 21", "Insert ImportDeclaration(51) into CompilationUnit(1462) at 25", "Insert ImportDeclaration(55) into CompilationUnit(1462) at 27", "Insert QualifiedName: com.netflix.governator.warming.CoolDown(16) into ImportDeclaration(17) at 0", "Insert QualifiedName: com.netflix.governator.warming.WarmUp(18) into ImportDeclaration(19) at 0", "Insert QualifiedName: com.netflix.governator.warming.WarmUpManager(20) into ImportDeclaration(21) at 0", "Insert QualifiedName: javax.xml.bind.DatatypeConverter(34) into ImportDeclaration(35) at 0", "Insert QualifiedName: java.text.DateFormat(42) into ImportDeclaration(43) at 0", "Update QualifiedName: java.io.IOException(30) to java.text.ParseException", "Insert QualifiedName: java.util.Date(50) into ImportDeclaration(51) at 0", "Insert QualifiedName: java.util.Locale(54) into ImportDeclaration(55) at 0", "Insert TypeDeclaration: class(222) into TypeDeclaration: class(1461) at 10", "Insert MethodDeclaration(650) into TypeDeclaration: class(1461) at 21", "Insert MethodDeclaration(825) into TypeDeclaration: class(1461) at 22", "Insert MethodDeclaration(1120) into TypeDeclaration: class(1461) at 25", "Insert MethodDeclaration(1177) into TypeDeclaration: class(1461) at 26", "Update ParameterizedType: Map<Object,LifecycleState>(74) to Map<StateKey,LifecycleState>", "Update ParameterizedType: List<PreDestroyRecord>(87) to List<InvokeRecord>", "Insert Javadoc(144) into TypeDeclaration: class(222) at 0", "Insert Modifier: private(145) into TypeDeclaration: class(222) at 1", "Insert Modifier: static(146) into TypeDeclaration: class(222) at 2", "Insert SimpleName: StateKey(147) into TypeDeclaration: class(222) at 3", "Insert FieldDeclaration(153) into TypeDeclaration: class(222) at 4", "Insert MethodDeclaration(167) into TypeDeclaration: class(222) at 5", "Insert MethodDeclaration(179) into TypeDeclaration: class(222) at 6", "Insert MethodDeclaration(221) into TypeDeclaration: class(222) at 7", "Update SimpleName: PreDestroyRecord(130) to InvokeRecord", "Insert FieldDeclaration(249) into TypeDeclaration: class(326) at 5", "Insert FieldDeclaration(258) into TypeDeclaration: class(326) at 6", "Insert FieldDeclaration(263) into TypeDeclaration: class(326) at 7", "Insert Block(590) into MethodDeclaration(591) at 4", "Move MarkerAnnotation(392) into MethodDeclaration(650) at 0", "Move Modifier: public(393) into MethodDeclaration(650) at 1", "Move Modifier: synchronized(394) into MethodDeclaration(650) at 2", "Move PrimitiveType: void(395) into MethodDeclaration(650) at 3", "Move SimpleName: close(396) into MethodDeclaration(650) at 4", "Insert Block(649) into MethodDeclaration(650) at 5", "Insert Modifier: private(651) into MethodDeclaration(825) at 0", "Insert PrimitiveType: void(652) into MethodDeclaration(825) at 1", "Insert SimpleName: doWarmingCooling(653) into MethodDeclaration(825) at 2", "Insert SingleVariableDeclaration(656) into MethodDeclaration(825) at 3", "Insert SimpleType: Exception(658) into MethodDeclaration(825) at 4", "Insert Block(824) into MethodDeclaration(825) at 5", "Insert SimpleType: Exception(981) into MethodDeclaration(1085) at 3", "Insert Modifier: private(1086) into MethodDeclaration(1120) at 0", "Insert ParameterizedType: List<InvokeRecord>(1091) into MethodDeclaration(1120) at 1", "Insert SimpleName: getReversed(1092) into MethodDeclaration(1120) at 2", "Insert SingleVariableDeclaration(1099) into MethodDeclaration(1120) at 3", "Insert Block(1119) into MethodDeclaration(1120) at 4", "Insert Modifier: private(1121) into MethodDeclaration(1177) at 0", "Insert SimpleType: Date(1123) into MethodDeclaration(1177) at 1", "Insert SimpleName: parseDate(1124) into MethodDeclaration(1177) at 2", "Insert SingleVariableDeclaration(1128) into MethodDeclaration(1177) at 3", "Insert Block(1176) into MethodDeclaration(1177) at 4", "Insert SimpleType: StateKey(85) into ParameterizedType: Map<StateKey,LifecycleState>(88) at 1", "Update SimpleType: PreDestroyRecord(86) to InvokeRecord", "Update SimpleName: preDestroyRecords(88) to invokings", "Insert TagElement(143) into Javadoc(144) at 0", "Insert Modifier: final(148) into FieldDeclaration(153) at 0", "Insert SimpleType: Object(150) into FieldDeclaration(153) at 1", "Insert VariableDeclarationFragment(152) into FieldDeclaration(153) at 2", "Insert Modifier: private(154) into MethodDeclaration(167) at 0", "Insert SimpleName: StateKey(155) into MethodDeclaration(167) at 1", "Insert SingleVariableDeclaration(159) into MethodDeclaration(167) at 2", "Insert Block(166) into MethodDeclaration(167) at 3", "Insert MarkerAnnotation(169) into MethodDeclaration(179) at 0", "Insert Modifier: public(170) into MethodDeclaration(179) at 1", "Insert PrimitiveType: int(171) into MethodDeclaration(179) at 2", "Insert SimpleName: hashCode(172) into MethodDeclaration(179) at 3", "Insert Block(178) into MethodDeclaration(179) at 4", "Insert SingleMemberAnnotation(182) into MethodDeclaration(221) at 0", "Insert MarkerAnnotation(184) into MethodDeclaration(221) at 1", "Insert Modifier: public(185) into MethodDeclaration(221) at 2", "Insert PrimitiveType: boolean(186) into MethodDeclaration(221) at 3", "Insert SimpleName: equals(187) into MethodDeclaration(221) at 4", "Insert SingleVariableDeclaration(191) into MethodDeclaration(221) at 5", "Insert Block(220) into MethodDeclaration(221) at 6", "Insert Modifier: final(241) into FieldDeclaration(249) at 0", "Insert ParameterizedType: Collection<Method>(246) into FieldDeclaration(249) at 1", "Insert VariableDeclarationFragment(248) into FieldDeclaration(249) at 2", "Insert Modifier: final(250) into FieldDeclaration(258) at 0", "Insert ParameterizedType: Collection<Method>(255) into FieldDeclaration(258) at 1", "Insert VariableDeclarationFragment(257) into FieldDeclaration(258) at 2", "Insert Modifier: final(259) into FieldDeclaration(263) at 0", "Insert PrimitiveType: boolean(260) into FieldDeclaration(263) at 1", "Insert VariableDeclarationFragment(262) into FieldDeclaration(263) at 2", "Update SimpleName: PreDestroyRecord(147) to InvokeRecord", "Insert SingleVariableDeclaration(283) into MethodDeclaration(325) at 4", "Insert SingleVariableDeclaration(290) into MethodDeclaration(325) at 5", "Insert SingleVariableDeclaration(293) into MethodDeclaration(325) at 6", "Insert VariableDeclarationStatement(466) into Block(524) at 1", "Move ExpressionStatement(388) into Block(590) at 0", "Insert ExpressionStatement(575) into Block(590) at 1", "Insert EnhancedForStatement(589) into Block(590) at 2", "Insert IfStatement(648) into Block(649) at 0", "Insert PrimitiveType: boolean(654) into SingleVariableDeclaration(656) at 0", "Insert SimpleName: warm(655) into SingleVariableDeclaration(656) at 1", "Insert SimpleName: Exception(657) into SimpleType: Exception(658) at 0", "Insert VariableDeclarationStatement(666) into Block(824) at 0", "Insert VariableDeclarationStatement(680) into Block(824) at 1", "Insert EnhancedForStatement(808) into Block(824) at 2", "Insert IfStatement(823) into Block(824) at 3", "Insert VariableDeclarationStatement(926) into Block(975) at 5", "Insert VariableDeclarationStatement(940) into Block(975) at 6", "Insert SimpleName: Exception(980) into SimpleType: Exception(981) at 0", "Insert SimpleType: List(1088) into ParameterizedType: List<InvokeRecord>(1091) at 0", "Insert SimpleType: InvokeRecord(1090) into ParameterizedType: List<InvokeRecord>(1091) at 1", "Insert ParameterizedType: List<InvokeRecord>(1097) into SingleVariableDeclaration(1099) at 0", "Insert SimpleName: records(1098) into SingleVariableDeclaration(1099) at 1", "Insert VariableDeclarationStatement(1111) into Block(1119) at 0", "Move ExpressionStatement(549) into Block(1119) at 1", "Insert ReturnStatement(1118) into Block(1119) at 2", "Insert SimpleName: Date(1122) into SimpleType: Date(1123) at 0", "Move SimpleType: String(672) into SingleVariableDeclaration(1128) at 0", "Insert SimpleName: value(1127) into SingleVariableDeclaration(1128) at 1", "Insert VariableDeclarationStatement(1140) into Block(1176) at 0", "Insert ExpressionStatement(1145) into Block(1176) at 1", "Insert TryStatement(1158) into Block(1176) at 2", "Insert TryStatement(1173) into Block(1176) at 3", "Insert ReturnStatement(1175) into Block(1176) at 4", "Insert VariableDeclarationStatement(1209) into Block(1459) at 1", "Insert SimpleName: StateKey(84) into SimpleType: StateKey(85) at 0", "Update SimpleName: PreDestroyRecord(85) to InvokeRecord", "Update ParameterizedType: CopyOnWriteArrayList<PreDestroyRecord>(93) to CopyOnWriteArrayList<InvokeRecord>", "Insert TextElement: Lifecycle managed objects have to be referenced via Object identity not equals()(142) into TagElement(143) at 0", "Insert SimpleName: Object(149) into SimpleType: Object(150) at 0", "Insert SimpleName: obj(151) into VariableDeclarationFragment(152) at 0", "Insert SimpleType: Object(157) into SingleVariableDeclaration(159) at 0", "Insert SimpleName: obj(158) into SingleVariableDeclaration(159) at 1", "Insert ExpressionStatement(165) into Block(166) at 0", "Insert SimpleName: Override(168) into MarkerAnnotation(169) at 0", "Insert ReturnStatement(177) into Block(178) at 0", "Insert SimpleName: SuppressWarnings(180) into SingleMemberAnnotation(182) at 0", "Insert StringLiteral: \"SimplifiableIfStatement\"(181) into SingleMemberAnnotation(182) at 1", "Insert SimpleName: Override(183) into MarkerAnnotation(184) at 0", "Move SimpleType: Object(71) into SingleVariableDeclaration(191) at 0", "Insert SimpleName: o(190) into SingleVariableDeclaration(191) at 1", "Insert IfStatement(198) into Block(220) at 0", "Insert IfStatement(212) into Block(220) at 1", "Insert ReturnStatement(219) into Block(220) at 2", "Insert SimpleType: Collection(243) into ParameterizedType: Collection<Method>(246) at 0", "Insert SimpleType: Method(245) into ParameterizedType: Collection<Method>(246) at 1", "Insert SimpleName: warmUpMethods(247) into VariableDeclarationFragment(248) at 0", "Insert SimpleType: Collection(252) into ParameterizedType: Collection<Method>(255) at 0", "Insert SimpleType: Method(254) into ParameterizedType: Collection<Method>(255) at 1", "Insert SimpleName: coolDownMethods(256) into VariableDeclarationFragment(257) at 0", "Insert SimpleName: hasAssets(261) into VariableDeclarationFragment(262) at 0", "Insert ParameterizedType: Collection<Method>(281) into SingleVariableDeclaration(283) at 0", "Insert SimpleName: warmUpMethods(282) into SingleVariableDeclaration(283) at 1", "Insert ParameterizedType: Collection<Method>(288) into SingleVariableDeclaration(290) at 0", "Insert SimpleName: coolDownMethods(289) into SingleVariableDeclaration(290) at 1", "Insert PrimitiveType: boolean(291) into SingleVariableDeclaration(293) at 0", "Insert SimpleName: hasAssets(292) into SingleVariableDeclaration(293) at 1", "Insert ExpressionStatement(311) into Block(324) at 2", "Insert ExpressionStatement(317) into Block(324) at 3", "Insert ExpressionStatement(323) into Block(324) at 4", "Insert SimpleType: StateKey(459) into VariableDeclarationStatement(466) at 0", "Insert VariableDeclarationFragment(465) into VariableDeclarationStatement(466) at 1", "Insert Block(522) into IfStatement(523) at 2", "Insert MethodInvocation(574) into ExpressionStatement(575) at 0", "Insert SingleVariableDeclaration(579) into EnhancedForStatement(589) at 0", "Insert SimpleName: invokings(580) into EnhancedForStatement(589) at 1", "Insert Block(588) into EnhancedForStatement(589) at 2", "Move MethodInvocation(403) into IfStatement(648) at 0", "Insert Block(647) into IfStatement(648) at 1", "Insert SimpleType: WarmUpManager(660) into VariableDeclarationStatement(666) at 0", "Insert VariableDeclarationFragment(665) into VariableDeclarationStatement(666) at 1", "Insert ParameterizedType: List<InvokeRecord>(671) into VariableDeclarationStatement(680) at 0", "Insert VariableDeclarationFragment(679) into VariableDeclarationStatement(680) at 1", "Insert SingleVariableDeclaration(684) into EnhancedForStatement(808) at 0", "Insert SimpleName: list(685) into EnhancedForStatement(808) at 1", "Insert Block(807) into EnhancedForStatement(808) at 2", "Insert SimpleName: warm(809) into IfStatement(823) at 0", "Insert Block(814) into IfStatement(823) at 1", "Insert Block(822) into IfStatement(823) at 2", "Insert ParameterizedType: Collection<Method>(917) into VariableDeclarationStatement(926) at 0", "Insert VariableDeclarationFragment(925) into VariableDeclarationStatement(926) at 1", "Insert ParameterizedType: Collection<Method>(931) into VariableDeclarationStatement(940) at 0", "Insert VariableDeclarationFragment(939) into VariableDeclarationStatement(940) at 1", "Insert MethodInvocation(988) into EnhancedForStatement(1083) at 1", "Move ExpressionStatement(595) into Block(1082) at 4", "Insert SimpleName: List(1087) into SimpleType: List(1088) at 0", "Insert SimpleName: InvokeRecord(1089) into SimpleType: InvokeRecord(1090) at 0", "Insert SimpleType: List(1094) into ParameterizedType: List<InvokeRecord>(1097) at 0", "Insert SimpleType: InvokeRecord(1096) into ParameterizedType: List<InvokeRecord>(1097) at 1", "Insert ParameterizedType: List<InvokeRecord>(1104) into VariableDeclarationStatement(1111) at 0", "Insert VariableDeclarationFragment(1110) into VariableDeclarationStatement(1111) at 1", "Insert SimpleName: reversed(1117) into ReturnStatement(1118) at 0", "Insert SimpleType: DateFormat(1130) into VariableDeclarationStatement(1140) at 0", "Insert VariableDeclarationFragment(1139) into VariableDeclarationStatement(1140) at 1", "Insert MethodInvocation(1144) into ExpressionStatement(1145) at 0", "Insert Block(1151) into TryStatement(1158) at 0", "Insert CatchClause(1157) into TryStatement(1158) at 1", "Insert Block(1166) into TryStatement(1173) at 0", "Insert CatchClause(1172) into TryStatement(1173) at 1", "Insert NullLiteral(1174) into ReturnStatement(1175) at 0", "Insert SimpleType: String(1203) into VariableDeclarationStatement(1209) at 0", "Insert VariableDeclarationFragment(1208) into VariableDeclarationStatement(1209) at 1", "Update SimpleType: PreDestroyRecord(92) to InvokeRecord", "Insert SimpleName: Object(156) into SimpleType: Object(157) at 0", "Insert Assignment: =(164) into ExpressionStatement(165) at 0", "Insert MethodInvocation(176) into ReturnStatement(177) at 0", "Insert InfixExpression: ==(194) into IfStatement(198) at 0", "Insert Block(197) into IfStatement(198) at 1", "Insert InfixExpression: ||(208) into IfStatement(212) at 0", "Insert Block(211) into IfStatement(212) at 1", "Insert InfixExpression: ==(218) into ReturnStatement(219) at 0", "Insert SimpleName: Collection(242) into SimpleType: Collection(243) at 0", "Insert SimpleName: Method(244) into SimpleType: Method(245) at 0", "Insert SimpleName: Collection(251) into SimpleType: Collection(252) at 0", "Insert SimpleName: Method(253) into SimpleType: Method(254) at 0", "Insert SimpleType: Collection(278) into ParameterizedType: Collection<Method>(281) at 0", "Insert SimpleType: Method(280) into ParameterizedType: Collection<Method>(281) at 1", "Insert SimpleType: Collection(285) into ParameterizedType: Collection<Method>(288) at 0", "Insert SimpleType: Method(287) into ParameterizedType: Collection<Method>(288) at 1", "Insert Assignment: =(310) into ExpressionStatement(311) at 0", "Insert Assignment: =(316) into ExpressionStatement(317) at 0", "Insert Assignment: =(322) into ExpressionStatement(323) at 0", "Insert SimpleName: StateKey(458) into SimpleType: StateKey(459) at 0", "Insert SimpleName: key(460) into VariableDeclarationFragment(465) at 0", "Insert ClassInstanceCreation(464) into VariableDeclarationFragment(465) at 1", "Insert ExpressionStatement(521) into Block(522) at 0", "Insert SimpleName: doWarmingCooling(572) into MethodInvocation(574) at 0", "Insert BooleanLiteral: true(573) into MethodInvocation(574) at 1", "Insert SimpleType: InvokeRecord(577) into SingleVariableDeclaration(579) at 0", "Insert SimpleName: record(578) into SingleVariableDeclaration(579) at 1", "Insert IfStatement(587) into Block(588) at 0", "Insert TryStatement(620) into Block(647) at 0", "Insert TryStatement(646) into Block(647) at 1", "Insert SimpleName: WarmUpManager(659) into SimpleType: WarmUpManager(660) at 0", "Insert SimpleName: manager(661) into VariableDeclarationFragment(665) at 0", "Insert ClassInstanceCreation(664) into VariableDeclarationFragment(665) at 1", "Move SimpleType: List(534) into ParameterizedType: List<InvokeRecord>(671) at 0", "Insert SimpleType: InvokeRecord(670) into ParameterizedType: List<InvokeRecord>(671) at 1", "Insert SimpleName: list(672) into VariableDeclarationFragment(679) at 0", "Insert ConditionalExpression(678) into VariableDeclarationFragment(679) at 1", "Insert SimpleType: InvokeRecord(682) into SingleVariableDeclaration(684) at 0", "Insert SimpleName: record(683) into SingleVariableDeclaration(684) at 1", "Insert IfStatement(806) into Block(807) at 0", "Insert ExpressionStatement(813) into Block(814) at 0", "Insert ExpressionStatement(821) into Block(822) at 0", "Insert SimpleType: Collection(914) into ParameterizedType: Collection<Method>(917) at 0", "Insert SimpleType: Method(916) into ParameterizedType: Collection<Method>(917) at 1", "Insert SimpleName: warmUpMethods(918) into VariableDeclarationFragment(925) at 0", "Insert MethodInvocation(924) into VariableDeclarationFragment(925) at 1", "Insert SimpleType: Collection(928) into ParameterizedType: Collection<Method>(931) at 0", "Insert SimpleType: Method(930) into ParameterizedType: Collection<Method>(931) at 1", "Insert SimpleName: coolDownMethods(932) into VariableDeclarationFragment(939) at 0", "Insert MethodInvocation(938) into VariableDeclarationFragment(939) at 1", "Insert ParenthesizedExpression(953) into InfixExpression: ||(960) at 2", "Insert ParenthesizedExpression(959) into InfixExpression: ||(960) at 3", "Update SimpleType: PreDestroyRecord(551) to InvokeRecord", "Insert SimpleName: getReversed(986) into MethodInvocation(988) at 0", "Insert SimpleName: invokings(987) into MethodInvocation(988) at 1", "Insert IfStatement(1016) into Block(1082) at 0", "Insert ExpressionStatement(1030) into Block(1082) at 1", "Insert SimpleName: List(1093) into SimpleType: List(1094) at 0", "Insert SimpleName: InvokeRecord(1095) into SimpleType: InvokeRecord(1096) at 0", "Insert SimpleType: List(1101) into ParameterizedType: List<InvokeRecord>(1104) at 0", "Insert SimpleType: InvokeRecord(1103) into ParameterizedType: List<InvokeRecord>(1104) at 1", "Insert SimpleName: reversed(1105) into VariableDeclarationFragment(1110) at 0", "Insert MethodInvocation(1109) into VariableDeclarationFragment(1110) at 1", "Insert SimpleName: DateFormat(1129) into SimpleType: DateFormat(1130) at 0", "Insert SimpleName: formatter(1131) into VariableDeclarationFragment(1139) at 0", "Insert MethodInvocation(1138) into VariableDeclarationFragment(1139) at 1", "Insert SimpleName: formatter(1141) into MethodInvocation(1144) at 0", "Insert SimpleName: setLenient(1142) into MethodInvocation(1144) at 1", "Insert BooleanLiteral: false(1143) into MethodInvocation(1144) at 2", "Insert ReturnStatement(1150) into Block(1151) at 0", "Insert SingleVariableDeclaration(1155) into CatchClause(1157) at 0", "Insert Block(1156) into CatchClause(1157) at 1", "Insert ReturnStatement(1165) into Block(1166) at 0", "Insert SingleVariableDeclaration(1170) into CatchClause(1172) at 0", "Insert Block(1171) into CatchClause(1172) at 1", "Insert SimpleName: String(1202) into SimpleType: String(1203) at 0", "Insert SimpleName: configurationName(1204) into VariableDeclarationFragment(1208) at 0", "Move MethodInvocation(845) into VariableDeclarationFragment(1208) at 1", "Update SimpleName: configuration(660) to configurationName", "Move SimpleName: configuration(660) into MethodInvocation(1213) at 2", "Update SimpleName: PreDestroyRecord(91) to InvokeRecord", "Insert FieldAccess(162) into Assignment: =(164) at 0", "Insert SimpleName: obj(163) into Assignment: =(164) at 1", "Insert SimpleName: System(173) into MethodInvocation(176) at 0", "Insert SimpleName: identityHashCode(174) into MethodInvocation(176) at 1", "Insert SimpleName: obj(175) into MethodInvocation(176) at 2", "Insert ThisExpression(192) into InfixExpression: ==(194) at 0", "Insert SimpleName: o(193) into InfixExpression: ==(194) at 1", "Insert ReturnStatement(196) into Block(197) at 0", "Insert InfixExpression: ==(201) into InfixExpression: ||(208) at 0", "Insert InfixExpression: !=(207) into InfixExpression: ||(208) at 1", "Insert ReturnStatement(210) into Block(211) at 0", "Insert MethodInvocation(214) into InfixExpression: ==(218) at 0", "Insert MethodInvocation(217) into InfixExpression: ==(218) at 1", "Insert SimpleName: Collection(277) into SimpleType: Collection(278) at 0", "Insert SimpleName: Method(279) into SimpleType: Method(280) at 0", "Insert SimpleName: Collection(284) into SimpleType: Collection(285) at 0", "Insert SimpleName: Method(286) into SimpleType: Method(287) at 0", "Insert FieldAccess(308) into Assignment: =(310) at 0", "Insert SimpleName: warmUpMethods(309) into Assignment: =(310) at 1", "Insert FieldAccess(314) into Assignment: =(316) at 0", "Insert SimpleName: coolDownMethods(315) into Assignment: =(316) at 1", "Insert FieldAccess(320) into Assignment: =(322) at 0", "Insert SimpleName: hasAssets(321) into Assignment: =(322) at 1", "Insert SimpleType: StateKey(462) into ClassInstanceCreation(464) at 0", "Insert SimpleName: obj(463) into ClassInstanceCreation(464) at 1", "Update SimpleName: obj(306) to key", "Insert MethodInvocation(520) into ExpressionStatement(521) at 0", "Insert ClassInstanceCreation(543) into MethodInvocation(544) at 2", "Insert SimpleName: InvokeRecord(576) into SimpleType: InvokeRecord(577) at 0", "Insert InfixExpression: >(585) into IfStatement(587) at 0", "Insert Block(586) into IfStatement(587) at 1", "Insert Block(607) into TryStatement(620) at 0", "Insert CatchClause(619) into TryStatement(620) at 1", "Move Block(407) into TryStatement(646) at 0", "Insert CatchClause(636) into TryStatement(646) at 1", "Insert Block(645) into TryStatement(646) at 2", "Insert SimpleType: WarmUpManager(663) into ClassInstanceCreation(664) at 0", "Insert SimpleName: InvokeRecord(669) into SimpleType: InvokeRecord(670) at 0", "Insert SimpleName: warm(673) into ConditionalExpression(678) at 0", "Insert SimpleName: invokings(674) into ConditionalExpression(678) at 1", "Insert MethodInvocation(677) into ConditionalExpression(678) at 2", "Insert SimpleName: InvokeRecord(681) into SimpleType: InvokeRecord(682) at 0", "Insert InfixExpression: &&(693) into IfStatement(806) at 0", "Insert Block(744) into IfStatement(806) at 1", "Insert IfStatement(805) into IfStatement(806) at 2", "Insert MethodInvocation(812) into ExpressionStatement(813) at 0", "Insert MethodInvocation(820) into ExpressionStatement(821) at 0", "Insert SimpleName: Collection(913) into SimpleType: Collection(914) at 0", "Insert SimpleName: Method(915) into SimpleType: Method(916) at 0", "Insert SimpleName: methods(919) into MethodInvocation(924) at 0", "Insert SimpleName: methodsFor(920) into MethodInvocation(924) at 1", "Insert TypeLiteral(923) into MethodInvocation(924) at 2", "Insert SimpleName: Collection(927) into SimpleType: Collection(928) at 0", "Insert SimpleName: Method(929) into SimpleType: Method(930) at 0", "Insert SimpleName: methods(933) into MethodInvocation(938) at 0", "Insert SimpleName: methodsFor(934) into MethodInvocation(938) at 1", "Insert TypeLiteral(937) into MethodInvocation(938) at 2", "Insert InfixExpression: >(952) into ParenthesizedExpression(953) at 0", "Insert InfixExpression: >(958) into ParenthesizedExpression(959) at 0", "Update SimpleName: PreDestroyRecord(550) to InvokeRecord", "Insert QualifiedName: record.hasAssets(989) into IfStatement(1016) at 0", "Insert Block(1015) into IfStatement(1016) at 1", "Insert MethodInvocation(1029) into ExpressionStatement(1030) at 0", "Insert SimpleName: List(1100) into SimpleType: List(1101) at 0", "Insert SimpleName: InvokeRecord(1102) into SimpleType: InvokeRecord(1103) at 0", "Insert SimpleName: Lists(1106) into MethodInvocation(1109) at 0", "Insert SimpleName: newArrayList(1107) into MethodInvocation(1109) at 1", "Insert SimpleName: records(1108) into MethodInvocation(1109) at 2", "Insert SimpleName: DateFormat(1132) into MethodInvocation(1138) at 0", "Insert SimpleName: getDateInstance(1133) into MethodInvocation(1138) at 1", "Insert QualifiedName: DateFormat.SHORT(1134) into MethodInvocation(1138) at 2", "Insert MethodInvocation(1137) into MethodInvocation(1138) at 3", "Insert MethodInvocation(1149) into ReturnStatement(1150) at 0", "Insert SimpleType: ParseException(1153) into SingleVariableDeclaration(1155) at 0", "Insert SimpleName: e(1154) into SingleVariableDeclaration(1155) at 1", "Insert MethodInvocation(1164) into ReturnStatement(1165) at 0", "Insert SimpleType: IllegalArgumentException(1168) into SingleVariableDeclaration(1170) at 0", "Insert SimpleName: e(1169) into SingleVariableDeclaration(1170) at 1", "Insert MethodInvocation(1221) into IfStatement(1456) at 0", "Insert ThisExpression(160) into FieldAccess(162) at 0", "Insert SimpleName: obj(161) into FieldAccess(162) at 1", "Insert BooleanLiteral: true(195) into ReturnStatement(196) at 0", "Insert SimpleName: o(199) into InfixExpression: ==(201) at 0", "Insert NullLiteral(200) into InfixExpression: ==(201) at 1", "Insert MethodInvocation(203) into InfixExpression: !=(207) at 0", "Insert MethodInvocation(206) into InfixExpression: !=(207) at 1", "Insert BooleanLiteral: false(209) into ReturnStatement(210) at 0", "Insert SimpleName: hashCode(213) into MethodInvocation(214) at 0", "Insert SimpleName: o(215) into MethodInvocation(217) at 0", "Insert SimpleName: hashCode(216) into MethodInvocation(217) at 1", "Insert ThisExpression(306) into FieldAccess(308) at 0", "Insert SimpleName: warmUpMethods(307) into FieldAccess(308) at 1", "Insert ThisExpression(312) into FieldAccess(314) at 0", "Insert SimpleName: coolDownMethods(313) into FieldAccess(314) at 1", "Insert ThisExpression(318) into FieldAccess(320) at 0", "Insert SimpleName: hasAssets(319) into FieldAccess(320) at 1", "Insert SimpleName: StateKey(461) into SimpleType: StateKey(462) at 0", "Update SimpleName: obj(312) to key", "Update SimpleName: obj(338) to key", "Insert SimpleName: log(505) into MethodInvocation(520) at 0", "Insert SimpleName: warn(506) into MethodInvocation(520) at 1", "Insert MethodInvocation(519) into MethodInvocation(520) at 2", "Insert SimpleType: StateKey(541) into ClassInstanceCreation(543) at 0", "Insert SimpleName: obj(542) into ClassInstanceCreation(543) at 1", "Insert MethodInvocation(583) into InfixExpression: >(585) at 0", "Insert NumberLiteral: 0(584) into InfixExpression: >(585) at 1", "Insert ExpressionStatement(606) into Block(607) at 0", "Insert SingleVariableDeclaration(611) into CatchClause(619) at 0", "Insert Block(618) into CatchClause(619) at 1", "Insert SingleVariableDeclaration(628) into CatchClause(636) at 0", "Insert Block(635) into CatchClause(636) at 1", "Insert ExpressionStatement(640) into Block(645) at 0", "Move ExpressionStatement(415) into Block(645) at 1", "Insert SimpleName: WarmUpManager(662) into SimpleType: WarmUpManager(663) at 0", "Insert SimpleName: getReversed(675) into MethodInvocation(677) at 0", "Insert SimpleName: invokings(676) into MethodInvocation(677) at 1", "Insert SimpleName: warm(686) into InfixExpression: &&(693) at 0", "Insert ParenthesizedExpression(692) into InfixExpression: &&(693) at 1", "Insert ExpressionStatement(707) into Block(744) at 0", "Insert ExpressionStatement(716) into Block(744) at 1", "Insert EnhancedForStatement(743) into Block(744) at 2", "Insert InfixExpression: &&(753) into IfStatement(805) at 0", "Move Block(418) into IfStatement(805) at 1", "Insert SimpleName: manager(810) into MethodInvocation(812) at 0", "Insert SimpleName: runAll(811) into MethodInvocation(812) at 1", "Insert SimpleName: manager(815) into MethodInvocation(820) at 0", "Insert SimpleName: runAll(816) into MethodInvocation(820) at 1", "Insert BooleanLiteral: true(817) into MethodInvocation(820) at 2", "Insert NumberLiteral: 0(818) into MethodInvocation(820) at 3", "Insert NullLiteral(819) into MethodInvocation(820) at 4", "Insert SimpleType: WarmUp(922) into TypeLiteral(923) at 0", "Insert SimpleType: CoolDown(936) into TypeLiteral(937) at 0", "Insert MethodInvocation(950) into InfixExpression: >(952) at 0", "Insert NumberLiteral: 0(951) into InfixExpression: >(952) at 1", "Insert MethodInvocation(956) into InfixExpression: >(958) at 0", "Insert NumberLiteral: 0(957) into InfixExpression: >(958) at 1", "Update SimpleName: preDestroyRecords(517) to invokings", "Move TryStatement(585) into Block(1015) at 0", "Insert SimpleName: log(1017) into MethodInvocation(1029) at 0", "Insert SimpleName: debug(1018) into MethodInvocation(1029) at 1", "Insert StringLiteral: \"Stopping %s:%d\"(1019) into MethodInvocation(1029) at 2", "Insert MethodInvocation(1024) into MethodInvocation(1029) at 3", "Insert MethodInvocation(1028) into MethodInvocation(1029) at 4", "Insert ClassInstanceCreation(1036) into MethodInvocation(1038) at 2", "Update SimpleName: log(586) to objectStates", "Update SimpleName: debug(587) to remove", "Insert ClassInstanceCreation(1079) into MethodInvocation(1080) at 2", "Insert SimpleName: Locale(1135) into MethodInvocation(1137) at 0", "Insert SimpleName: getDefault(1136) into MethodInvocation(1137) at 1", "Insert SimpleName: formatter(1146) into MethodInvocation(1149) at 0", "Insert SimpleName: parse(1147) into MethodInvocation(1149) at 1", "Insert SimpleName: value(1148) into MethodInvocation(1149) at 2", "Insert SimpleName: ParseException(1152) into SimpleType: ParseException(1153) at 0", "Insert MethodInvocation(1162) into MethodInvocation(1164) at 0", "Insert SimpleName: getTime(1163) into MethodInvocation(1164) at 1", "Insert SimpleName: IllegalArgumentException(1167) into SimpleType: IllegalArgumentException(1168) at 0", "Move TypeLiteral(669) into MethodInvocation(1221) at 0", "Insert SimpleName: isAssignableFrom(1217) into MethodInvocation(1221) at 1", "Move MethodInvocation(666) into MethodInvocation(1221) at 2", "Insert SimpleName: getClass(202) into MethodInvocation(203) at 0", "Insert SimpleName: o(204) into MethodInvocation(206) at 0", "Insert SimpleName: getClass(205) into MethodInvocation(206) at 1", "Insert SimpleName: String(507) into MethodInvocation(519) at 0", "Insert SimpleName: format(508) into MethodInvocation(519) at 1", "Insert StringLiteral: \"Object already completed lifecycle. class: %s - ID: %d\"(509) into MethodInvocation(519) at 2", "Insert MethodInvocation(514) into MethodInvocation(519) at 3", "Insert MethodInvocation(518) into MethodInvocation(519) at 4", "Insert SimpleName: StateKey(540) into SimpleType: StateKey(541) at 0", "Insert QualifiedName: record.warmUpMethods(581) into MethodInvocation(583) at 0", "Insert SimpleName: size(582) into MethodInvocation(583) at 1", "Insert MethodInvocation(605) into ExpressionStatement(606) at 0", "Insert SimpleType: Exception(609) into SingleVariableDeclaration(611) at 0", "Insert SimpleName: e(610) into SingleVariableDeclaration(611) at 1", "Insert ExpressionStatement(617) into Block(618) at 0", "Insert SimpleType: Exception(626) into SingleVariableDeclaration(628) at 0", "Insert SimpleName: e(627) into SingleVariableDeclaration(628) at 1", "Insert ExpressionStatement(634) into Block(635) at 0", "Insert MethodInvocation(639) into ExpressionStatement(640) at 0", "Insert InfixExpression: >(691) into ParenthesizedExpression(692) at 0", "Insert MethodInvocation(706) into ExpressionStatement(707) at 0", "Insert MethodInvocation(715) into ExpressionStatement(716) at 0", "Insert SingleVariableDeclaration(720) into EnhancedForStatement(743) at 0", "Insert QualifiedName: record.warmUpMethods(721) into EnhancedForStatement(743) at 1", "Insert Block(742) into EnhancedForStatement(743) at 2", "Insert PrefixExpression: !(746) into InfixExpression: &&(753) at 0", "Insert ParenthesizedExpression(752) into InfixExpression: &&(753) at 1", "Insert ExpressionStatement(767) into Block(804) at 0", "Insert ExpressionStatement(776) into Block(804) at 1", "Insert EnhancedForStatement(803) into Block(804) at 2", "Insert SimpleName: WarmUp(921) into SimpleType: WarmUp(922) at 0", "Insert SimpleName: CoolDown(935) into SimpleType: CoolDown(936) at 0", "Insert SimpleName: warmUpMethods(948) into MethodInvocation(950) at 0", "Insert SimpleName: size(949) into MethodInvocation(950) at 1", "Insert SimpleName: coolDownMethods(954) into MethodInvocation(956) at 0", "Insert SimpleName: size(955) into MethodInvocation(956) at 1", "Update SimpleType: PreDestroyRecord(520) to InvokeRecord", "Insert SimpleName: warmUpMethods(967) into ClassInstanceCreation(970) at 3", "Insert SimpleName: coolDownMethods(968) into ClassInstanceCreation(970) at 4", "Insert SimpleName: hasAssets(969) into ClassInstanceCreation(970) at 5", "Insert MethodInvocation(1022) into MethodInvocation(1024) at 0", "Insert SimpleName: getName(1023) into MethodInvocation(1024) at 1", "Insert SimpleName: System(1025) into MethodInvocation(1028) at 0", "Insert SimpleName: identityHashCode(1026) into MethodInvocation(1028) at 1", "Insert QualifiedName: record.obj(1027) into MethodInvocation(1028) at 2", "Insert SimpleType: StateKey(1034) into ClassInstanceCreation(1036) at 0", "Insert QualifiedName: record.obj(1035) into ClassInstanceCreation(1036) at 1", "Insert SimpleType: StateKey(1077) into ClassInstanceCreation(1079) at 0", "Insert QualifiedName: record.obj(1078) into ClassInstanceCreation(1079) at 1", "Insert SimpleName: DatatypeConverter(1159) into MethodInvocation(1162) at 0", "Insert SimpleName: parseDateTime(1160) into MethodInvocation(1162) at 1", "Insert SimpleName: value(1161) into MethodInvocation(1162) at 2", "Insert SimpleType: String(1223) into VariableDeclarationStatement(1230) at 0", "Insert MethodInvocation(1254) into InfixExpression: ||(1261) at 0", "Insert MethodInvocation(1260) into InfixExpression: ||(1261) at 1", "Insert MethodInvocation(512) into MethodInvocation(514) at 0", "Insert SimpleName: getName(513) into MethodInvocation(514) at 1", "Insert SimpleName: System(515) into MethodInvocation(518) at 0", "Insert SimpleName: identityHashCode(516) into MethodInvocation(518) at 1", "Insert SimpleName: obj(517) into MethodInvocation(518) at 2", "Insert SimpleName: doWarmingCooling(603) into MethodInvocation(605) at 0", "Insert BooleanLiteral: false(604) into MethodInvocation(605) at 1", "Update SimpleName: IOException(397) to Exception", "Move SimpleName: IOException(397) into SimpleType: Exception(609) at 0", "Insert MethodInvocation(616) into ExpressionStatement(617) at 0", "Insert SimpleName: Exception(625) into SimpleType: Exception(626) at 0", "Insert MethodInvocation(633) into ExpressionStatement(634) at 0", "Insert SimpleName: invokings(637) into MethodInvocation(639) at 0", "Insert SimpleName: clear(638) into MethodInvocation(639) at 1", "Insert MethodInvocation(689) into InfixExpression: >(691) at 0", "Insert NumberLiteral: 0(690) into InfixExpression: >(691) at 1", "Insert SimpleName: log(694) into MethodInvocation(706) at 0", "Insert SimpleName: debug(695) into MethodInvocation(706) at 1", "Insert StringLiteral: \"Warming up %s:%d\"(696) into MethodInvocation(706) at 2", "Move MethodInvocation(593) into MethodInvocation(706) at 3", "Insert MethodInvocation(705) into MethodInvocation(706) at 4", "Insert SimpleName: objectStates(708) into MethodInvocation(715) at 0", "Insert SimpleName: put(709) into MethodInvocation(715) at 1", "Insert ClassInstanceCreation(713) into MethodInvocation(715) at 2", "Insert QualifiedName: LifecycleState.WARMING_UP(714) into MethodInvocation(715) at 3", "Insert SimpleType: Method(718) into SingleVariableDeclaration(720) at 0", "Insert SimpleName: m(719) into SingleVariableDeclaration(720) at 1", "Insert VariableDeclarationStatement(732) into Block(742) at 0", "Insert ExpressionStatement(741) into Block(742) at 1", "Insert SimpleName: warm(745) into PrefixExpression: !(746) at 0", "Insert InfixExpression: >(751) into ParenthesizedExpression(752) at 0", "Insert MethodInvocation(766) into ExpressionStatement(767) at 0", "Insert MethodInvocation(775) into ExpressionStatement(776) at 0", "Insert SingleVariableDeclaration(780) into EnhancedForStatement(803) at 0", "Insert QualifiedName: record.coolDownMethods(781) into EnhancedForStatement(803) at 1", "Insert Block(802) into EnhancedForStatement(803) at 2", "Update SimpleName: PreDestroyRecord(519) to InvokeRecord", "Insert QualifiedName: record.obj(1020) into MethodInvocation(1022) at 0", "Insert SimpleName: getClass(1021) into MethodInvocation(1022) at 1", "Insert SimpleName: StateKey(1033) into SimpleType: StateKey(1034) at 0", "Insert SimpleName: StateKey(1076) into SimpleType: StateKey(1077) at 0", "Insert SimpleName: String(1222) into SimpleType: String(1223) at 0", "Move TypeLiteral(703) into MethodInvocation(1254) at 0", "Insert SimpleName: isAssignableFrom(1250) into MethodInvocation(1254) at 1", "Move MethodInvocation(700) into MethodInvocation(1254) at 2", "Insert QualifiedName: Boolean.TYPE(1255) into MethodInvocation(1260) at 0", "Insert SimpleName: isAssignableFrom(1256) into MethodInvocation(1260) at 1", "Move MethodInvocation(834) into MethodInvocation(1260) at 2", "Insert MethodInvocation(1296) into InfixExpression: ||(1303) at 0", "Insert MethodInvocation(1302) into InfixExpression: ||(1303) at 1", "Move ExpressionStatement(816) into Block(1327) at 1", "Move ExpressionStatement(863) into Block(1327) at 2", "Update SimpleName: obj(328) to key", "Insert SimpleName: obj(510) into MethodInvocation(512) at 0", "Insert SimpleName: getClass(511) into MethodInvocation(512) at 1", "Insert SimpleName: log(612) into MethodInvocation(616) at 0", "Insert SimpleName: error(613) into MethodInvocation(616) at 1", "Insert StringLiteral: \"While cooling down instances\"(614) into MethodInvocation(616) at 2", "Insert SimpleName: e(615) into MethodInvocation(616) at 3", "Insert SimpleName: log(629) into MethodInvocation(633) at 0", "Insert SimpleName: error(630) into MethodInvocation(633) at 1", "Insert StringLiteral: \"While stopping instances\"(631) into MethodInvocation(633) at 2", "Insert SimpleName: e(632) into MethodInvocation(633) at 3", "Insert QualifiedName: record.warmUpMethods(687) into MethodInvocation(689) at 0", "Insert SimpleName: size(688) into MethodInvocation(689) at 1", "Insert SimpleName: System(702) into MethodInvocation(705) at 0", "Insert SimpleName: identityHashCode(703) into MethodInvocation(705) at 1", "Insert QualifiedName: record.obj(704) into MethodInvocation(705) at 2", "Insert SimpleType: StateKey(711) into ClassInstanceCreation(713) at 0", "Insert QualifiedName: record.obj(712) into ClassInstanceCreation(713) at 1", "Insert SimpleName: Method(717) into SimpleType: Method(718) at 0", "Insert SimpleType: WarmUp(723) into VariableDeclarationStatement(732) at 0", "Insert VariableDeclarationFragment(731) into VariableDeclarationStatement(732) at 1", "Insert MethodInvocation(740) into ExpressionStatement(741) at 0", "Insert MethodInvocation(749) into InfixExpression: >(751) at 0", "Insert NumberLiteral: 0(750) into InfixExpression: >(751) at 1", "Insert SimpleName: log(754) into MethodInvocation(766) at 0", "Insert SimpleName: debug(755) into MethodInvocation(766) at 1", "Insert StringLiteral: \"Cooling down %s:%d\"(756) into MethodInvocation(766) at 2", "Insert MethodInvocation(761) into MethodInvocation(766) at 3", "Insert MethodInvocation(765) into MethodInvocation(766) at 4", "Insert SimpleName: objectStates(768) into MethodInvocation(775) at 0", "Insert SimpleName: put(769) into MethodInvocation(775) at 1", "Insert ClassInstanceCreation(773) into MethodInvocation(775) at 2", "Insert QualifiedName: LifecycleState.COOLING_DOWN(774) into MethodInvocation(775) at 3", "Insert SimpleType: Method(778) into SingleVariableDeclaration(780) at 0", "Insert SimpleName: m(779) into SingleVariableDeclaration(780) at 1", "Insert VariableDeclarationStatement(792) into Block(802) at 0", "Move ExpressionStatement(411) into Block(802) at 1", "Update SimpleName: configuration(676) to configurationName", "Move SimpleName: configuration(676) into MethodInvocation(1228) at 2", "Move TypeLiteral(747) into MethodInvocation(1296) at 0", "Insert SimpleName: isAssignableFrom(1292) into MethodInvocation(1296) at 1", "Move MethodInvocation(744) into MethodInvocation(1296) at 2", "Insert QualifiedName: Integer.TYPE(1297) into MethodInvocation(1302) at 0", "Insert SimpleName: isAssignableFrom(1298) into MethodInvocation(1302) at 1", "Move MethodInvocation(793) into MethodInvocation(1302) at 2", "Insert MethodInvocation(1335) into InfixExpression: ||(1342) at 0", "Insert MethodInvocation(1341) into InfixExpression: ||(1342) at 1", "Insert ExpressionStatement(1359) into Block(1366) at 1", "Insert IfStatement(1451) into IfStatement(1452) at 2", "Insert SimpleName: StateKey(710) into SimpleType: StateKey(711) at 0", "Insert SimpleName: WarmUp(722) into SimpleType: WarmUp(723) at 0", "Insert SimpleName: warmUp(724) into VariableDeclarationFragment(731) at 0", "Insert MethodInvocation(730) into VariableDeclarationFragment(731) at 1", "Insert SimpleName: manager(733) into MethodInvocation(740) at 0", "Insert SimpleName: add(734) into MethodInvocation(740) at 1", "Insert QualifiedName: record.obj(735) into MethodInvocation(740) at 2", "Insert SimpleName: m(736) into MethodInvocation(740) at 3", "Insert MethodInvocation(739) into MethodInvocation(740) at 4", "Insert QualifiedName: record.coolDownMethods(747) into MethodInvocation(749) at 0", "Insert SimpleName: size(748) into MethodInvocation(749) at 1", "Insert MethodInvocation(759) into MethodInvocation(761) at 0", "Insert SimpleName: getName(760) into MethodInvocation(761) at 1", "Insert SimpleName: System(762) into MethodInvocation(765) at 0", "Insert SimpleName: identityHashCode(763) into MethodInvocation(765) at 1", "Insert QualifiedName: record.obj(764) into MethodInvocation(765) at 2", "Insert SimpleType: StateKey(771) into ClassInstanceCreation(773) at 0", "Insert QualifiedName: record.obj(772) into ClassInstanceCreation(773) at 1", "Insert SimpleName: Method(777) into SimpleType: Method(778) at 0", "Insert SimpleType: CoolDown(783) into VariableDeclarationStatement(792) at 0", "Insert VariableDeclarationFragment(791) into VariableDeclarationStatement(792) at 1", "Update SimpleName: configuration(717) to configurationName", "Move SimpleName: configuration(717) into MethodInvocation(1267) at 2", "Move TypeLiteral(788) into MethodInvocation(1335) at 0", "Insert SimpleName: isAssignableFrom(1331) into MethodInvocation(1335) at 1", "Move MethodInvocation(785) into MethodInvocation(1335) at 2", "Insert QualifiedName: Long.TYPE(1336) into MethodInvocation(1341) at 0", "Insert SimpleName: isAssignableFrom(1337) into MethodInvocation(1341) at 1", "Move MethodInvocation(752) into MethodInvocation(1341) at 2", "Insert MethodInvocation(1358) into ExpressionStatement(1359) at 0", "Insert MethodInvocation(1374) into InfixExpression: ||(1381) at 0", "Insert MethodInvocation(1380) into InfixExpression: ||(1381) at 1", "Move ExpressionStatement(781) into Block(1405) at 2", "Insert MethodInvocation(1413) into IfStatement(1451) at 0", "Insert Block(1440) into IfStatement(1451) at 1", "Move Block(874) into IfStatement(1451) at 2", "Insert SimpleName: m(725) into MethodInvocation(730) at 0", "Insert SimpleName: getAnnotation(726) into MethodInvocation(730) at 1", "Insert TypeLiteral(729) into MethodInvocation(730) at 2", "Insert SimpleName: warmUp(737) into MethodInvocation(739) at 0", "Insert SimpleName: canBeParallel(738) into MethodInvocation(739) at 1", "Insert QualifiedName: record.obj(757) into MethodInvocation(759) at 0", "Insert SimpleName: getClass(758) into MethodInvocation(759) at 1", "Insert SimpleName: StateKey(770) into SimpleType: StateKey(771) at 0", "Insert SimpleName: CoolDown(782) into SimpleType: CoolDown(783) at 0", "Insert SimpleName: coolDown(784) into VariableDeclarationFragment(791) at 0", "Insert MethodInvocation(790) into VariableDeclarationFragment(791) at 1", "Update SimpleName: preDestroyRecords(408) to manager", "Insert SimpleName: add(794) into MethodInvocation(800) at 1", "Insert QualifiedName: record.obj(795) into MethodInvocation(800) at 2", "Insert SimpleName: m(796) into MethodInvocation(800) at 3", "Insert MethodInvocation(799) into MethodInvocation(800) at 4", "Update SimpleName: configuration(761) to configurationName", "Move SimpleName: configuration(761) into MethodInvocation(1309) at 2", "Insert SimpleName: log(1351) into MethodInvocation(1358) at 0", "Insert SimpleName: debug(1352) into MethodInvocation(1358) at 1", "Insert StringLiteral: \"long %s = %d\"(1353) into MethodInvocation(1358) at 2", "Move MethodInvocation(854) into MethodInvocation(1358) at 3", "Insert SimpleName: value(1357) into MethodInvocation(1358) at 4", "Move TypeLiteral(829) into MethodInvocation(1374) at 0", "Insert SimpleName: isAssignableFrom(1370) into MethodInvocation(1374) at 1", "Move MethodInvocation(826) into MethodInvocation(1374) at 2", "Insert QualifiedName: Double.TYPE(1375) into MethodInvocation(1380) at 0", "Insert SimpleName: isAssignableFrom(1376) into MethodInvocation(1380) at 1", "Move MethodInvocation(708) into MethodInvocation(1380) at 2", "Insert TypeLiteral(1408) into MethodInvocation(1413) at 0", "Insert SimpleName: isAssignableFrom(1409) into MethodInvocation(1413) at 1", "Insert MethodInvocation(1412) into MethodInvocation(1413) at 2", "Insert VariableDeclarationStatement(1424) into Block(1440) at 0", "Insert ExpressionStatement(1433) into Block(1440) at 1", "Insert ExpressionStatement(1439) into Block(1440) at 2", "Insert SimpleType: WarmUp(728) into TypeLiteral(729) at 0", "Insert SimpleName: m(785) into MethodInvocation(790) at 0", "Insert SimpleName: getAnnotation(786) into MethodInvocation(790) at 1", "Insert TypeLiteral(789) into MethodInvocation(790) at 2", "Update SimpleName: clear(409) to coolDown", "Move SimpleName: clear(409) into MethodInvocation(799) at 0", "Insert SimpleName: canBeParallel(798) into MethodInvocation(799) at 1", "Update SimpleName: configuration(802) to configurationName", "Move SimpleName: configuration(802) into MethodInvocation(1348) at 2", "Update StringLiteral: \"int %s = %f\"(851) to \"double %s = %f\"", "Insert MethodInvocation(1395) into MethodInvocation(1397) at 3", "Insert SimpleType: Date(1407) into TypeLiteral(1408) at 0", "Insert SimpleName: field(1410) into MethodInvocation(1412) at 0", "Insert SimpleName: getType(1411) into MethodInvocation(1412) at 1", "Insert SimpleType: Date(1415) into VariableDeclarationStatement(1424) at 0", "Insert VariableDeclarationFragment(1423) into VariableDeclarationStatement(1424) at 1", "Insert MethodInvocation(1432) into ExpressionStatement(1433) at 0", "Insert MethodInvocation(1438) into ExpressionStatement(1439) at 0", "Insert SimpleName: WarmUp(727) into SimpleType: WarmUp(728) at 0", "Insert SimpleType: CoolDown(788) into TypeLiteral(789) at 0", "Insert SimpleName: configurationName(1386) into MethodInvocation(1387) at 2", "Insert SimpleName: field(1393) into MethodInvocation(1395) at 0", "Insert SimpleName: getName(1394) into MethodInvocation(1395) at 1", "Insert SimpleName: Date(1406) into SimpleType: Date(1407) at 0", "Insert SimpleName: Date(1414) into SimpleType: Date(1415) at 0", "Insert SimpleName: value(1416) into VariableDeclarationFragment(1423) at 0", "Insert MethodInvocation(1422) into VariableDeclarationFragment(1423) at 1", "Insert SimpleName: log(1425) into MethodInvocation(1432) at 0", "Insert SimpleName: debug(1426) into MethodInvocation(1432) at 1", "Insert StringLiteral: \"Date %s = %f\"(1427) into MethodInvocation(1432) at 2", "Insert MethodInvocation(1430) into MethodInvocation(1432) at 3", "Insert SimpleName: value(1431) into MethodInvocation(1432) at 4", "Insert SimpleName: field(1434) into MethodInvocation(1438) at 0", "Insert SimpleName: set(1435) into MethodInvocation(1438) at 1", "Insert SimpleName: obj(1436) into MethodInvocation(1438) at 2", "Insert SimpleName: value(1437) into MethodInvocation(1438) at 3", "Insert SimpleName: CoolDown(787) into SimpleType: CoolDown(788) at 0", "Insert SimpleName: parseDate(1417) into MethodInvocation(1422) at 0", "Insert MethodInvocation(1421) into MethodInvocation(1422) at 1", "Insert SimpleName: field(1428) into MethodInvocation(1430) at 0", "Insert SimpleName: getName(1429) into MethodInvocation(1430) at 1", "Insert SimpleName: configurationProvider(1418) into MethodInvocation(1421) at 0", "Insert SimpleName: getString(1419) into MethodInvocation(1421) at 1", "Insert SimpleName: configurationName(1420) into MethodInvocation(1421) at 2", "Delete SimpleName: obj(360)", "Delete Block(389)", "Delete Block(416)", "Delete TryStatement(417)", "Delete SimpleType: IOException(398)", "Delete IfStatement(419)", "Delete Block(420)", "Delete MethodDeclaration(421)", "Delete SimpleName: PreDestroyRecord(535)", "Delete SimpleType: PreDestroyRecord(536)", "Delete ParameterizedType: List<PreDestroyRecord>(537)", "Delete SimpleName: reversed(538)", "Delete SimpleName: Lists(539)", "Delete SimpleName: newArrayList(540)", "Delete SimpleName: preDestroyRecords(541)", "Delete MethodInvocation(542)", "Delete VariableDeclarationFragment(543)", "Delete VariableDeclarationStatement(544)", "Delete SimpleName: reversed(554)", "Delete QualifiedName: record.obj(557)", "Delete StringLiteral: \"Stopping %s\"(588)", "Delete SimpleName: value(661)", "Delete MethodInvocation(662)", "Delete InfixExpression: ==(670)", "Delete SimpleName: value(677)", "Delete MethodInvocation(678)", "Delete InfixExpression: ==(704)", "Delete ParenthesizedExpression(705)", "Delete QualifiedName: Boolean.TYPE(709)", "Delete InfixExpression: ==(710)", "Delete ParenthesizedExpression(711)", "Delete SimpleName: value(718)", "Delete MethodInvocation(719)", "Delete InfixExpression: ==(748)", "Delete ParenthesizedExpression(749)", "Delete QualifiedName: Integer.TYPE(753)", "Delete InfixExpression: ==(754)", "Delete ParenthesizedExpression(755)", "Delete SimpleName: value(762)", "Delete MethodInvocation(763)", "Delete SimpleName: log(767)", "Delete SimpleName: debug(768)", "Delete StringLiteral: \"int %s = %d\"(769)", "Delete SimpleName: field(770)", "Delete SimpleName: getName(771)", "Delete MethodInvocation(772)", "Delete SimpleName: value(773)", "Delete MethodInvocation(774)", "Delete ExpressionStatement(775)", "Delete InfixExpression: ==(789)", "Delete ParenthesizedExpression(790)", "Delete QualifiedName: Long.TYPE(794)", "Delete InfixExpression: ==(795)", "Delete ParenthesizedExpression(796)", "Delete SimpleName: value(803)", "Delete MethodInvocation(804)", "Delete InfixExpression: ==(830)", "Delete ParenthesizedExpression(831)", "Delete QualifiedName: Double.TYPE(835)", "Delete InfixExpression: ==(836)", "Delete ParenthesizedExpression(837)"]}}, {"LifecycleMethods_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 6", "MOV ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS ImportDeclaration to CompilationUnit at 7", "INS QualifiedName: com.netflix.governator.warming.WarmUp to ImportDeclaration at 0"]}, {"root": "UPDATE from java.util.HashSet to com.google.common.collect.ImmutableSet", "operations": ["UPD QualifiedName: java.util.HashSet from java.util.HashSet to com.google.common.collect.ImmutableSet"]}, {"root": "UPDATE from java.util.Set to com.netflix.governator.warming.CoolDown", "operations": ["UPD QualifiedName: java.util.Set from java.util.Set to com.netflix.governator.warming.CoolDown"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS SimpleType: WarmUp to TypeLiteral at 0", "INS SimpleName: methodAnnotations to VariableDeclarationFragment at 0", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleType: CoolDown to TypeLiteral at 0", "INS TypeLiteral to MethodInvocation at 5", "INS SimpleType: Collection to ParameterizedType: Collection<Class<? extends Annotation>> at 0", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS SimpleName: CoolDown to SimpleType: CoolDown at 0", "INS ParameterizedType: Class<? extends Annotation> to ParameterizedType: Collection<Class<? extends Annotation>> at 1", "INS SimpleName: ImmutableSet to MethodInvocation at 0", "INS SimpleName: WarmUp to SimpleType: WarmUp at 0", "INS Modifier: static to FieldDeclaration at 1", "INS TypeLiteral to MethodInvocation at 4", "INS ParameterizedType: Collection<Class<? extends Annotation>> to FieldDeclaration at 3", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS SimpleName: of to MethodInvocation at 1"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS EnhancedForStatement to Block at 1", "INS SimpleName: methodAnnotations to EnhancedForStatement at 1", "INS Block to MethodDeclaration at 5", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS Block to EnhancedForStatement at 2", "INS EnhancedForStatement to Block at 2"]}, {"root": "UPDATE from Set<String> to Multimap<Class<? extends Annotation>,String>", "operations": ["UPD ParameterizedType: Set<String> from Set<String> to Multimap<Class<? extends Annotation>,String>", "UPD ParameterizedType: Set<String> from Set<String> to Multimap<Class<? extends Annotation>,String>", "UPD ParameterizedType: Set<String> from Set<String> to Multimap<Class<? extends Annotation>,String>"]}, {"root": "UPDATE from usedSet to usedNames", "operations": ["UPD SimpleName: usedSet from usedSet to usedNames", "UPD SimpleName: usedFieldNames from usedFieldNames to usedNames", "UPD SimpleName: usedFieldNames from usedFieldNames to usedNames", "UPD SimpleName: usedFieldNames from usedFieldNames to usedNames", "UPD SimpleName: usedSet from usedSet to usedNames", "UPD SimpleName: usedSet from usedSet to usedNames", "UPD SimpleName: usedSet from usedSet to usedNames", "UPD SimpleName: usedSet from usedSet to usedNames", "UPD SimpleName: usedConstructNames from usedConstructNames to usedNames", "UPD SimpleName: usedSet from usedSet to usedNames", "UPD SimpleName: usedDestroyNames from usedDestroyNames to usedNames"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0", "MOV ExpressionStatement to Block at 3", "MOV EnhancedForStatement to Block at 4", "MOV EnhancedForStatement to Block at 1"]}, {"root": "UPDATE from Class<Configuration> to Class<? extends Annotation>", "operations": ["UPD ParameterizedType: Class<Configuration> from Class<Configuration> to Class<? extends Annotation>", "UPD ParameterizedType: Set<String> from Set<String> to Class<? extends Annotation>"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV TypeLiteral to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV TypeLiteral to MethodInvocation at 3"]}, {"root": "UPDATE from Set to Multimap", "operations": ["UPD SimpleName: Set from Set to Multimap", "UPD SimpleType: Set from Set to Multimap", "UPD SimpleType: Set from Set to Multimap", "UPD SimpleType: Set from Set to Multimap", "UPD SimpleName: Set from Set to Multimap", "UPD SimpleName: Set from Set to Multimap"]}, {"root": "INS ParameterizedType: Class<? extends Annotation> to ParameterizedType: Set<String> at 1", "operations": ["INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS ParameterizedType: Class<? extends Annotation> to ParameterizedType: Set<String> at 1", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0"]}, {"root": "MOVE from ParameterizedType: Set<String>", "operations": ["MOV SimpleType: String to ParameterizedType: Set<String> at 2"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV MethodInvocation to EnhancedForStatement at 1", "MOV SingleVariableDeclaration to EnhancedForStatement at 0", "MOV Block to EnhancedForStatement at 2"]}, {"root": "INS SimpleType: Class to ParameterizedType: Class<Configuration> at 0", "operations": ["INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleType: Class to ParameterizedType: Class<Configuration> at 0"]}, {"root": "INS WildcardType: ? extends Annotation to ParameterizedType: Class<Configuration> at 1", "operations": ["INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<Configuration> at 1"]}, {"root": "INS ParameterizedType: Class<? extends Annotation> to ParameterizedType: Set<String> at 1", "operations": ["INS ParameterizedType: Class<? extends Annotation> to ParameterizedType: Set<String> at 1", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1"]}, {"root": "INS ParameterizedType: Class<? extends Annotation> to ParameterizedType: Set<String> at 1", "operations": ["INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS ParameterizedType: Class<? extends Annotation> to ParameterizedType: Set<String> at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS SimpleName: ArrayListMultimap to MethodInvocation at 0", "INS SimpleName: create to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS ParameterizedType: Class<? extends Annotation> to MethodInvocation at 1"]}, {"root": "UPDATE from Set to Class", "operations": ["UPD SimpleName: Set from Set to Class", "UPD SimpleName: HashSet from HashSet to Class", "UPD SimpleType: Set from Set to Class", "UPD SimpleType: String from String to Class", "UPD SimpleName: String from String to Class", "UPD SimpleType: HashSet from HashSet to Class"]}, {"root": "MOVE from ParameterizedType: Class<? extends Annotation>", "operations": ["MOV SimpleType: String to ParameterizedType: Class<? extends Annotation> at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "MOVE from ParameterizedType: Class<? extends Annotation>", "operations": ["MOV SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleType: String to MethodInvocation at 2"]}, {"root": "UPDATE from Configuration to Annotation", "operations": ["UPD SimpleName: Configuration from Configuration to Annotation", "UPD SimpleName: String from String to Annotation", "UPD SimpleName: String from String to Annotation"]}, {"root": "MOVE from SimpleType: Annotation", "operations": ["MOV SimpleName: Configuration to SimpleType: Annotation at 0"]}, {"root": "MOVE from ParameterizedType: Class<? extends Annotation>", "operations": ["MOV SimpleType: HashSet to ParameterizedType: Class<? extends Annotation> at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV ParameterizedType: Set<String> to SingleVariableDeclaration at 0", "MOV SimpleName: usedDestroyNames to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from add to annotationClass", "operations": ["UPD SimpleName: add from add to annotationClass", "UPD SimpleName: usedDestroyNames from usedDestroyNames to annotationClass", "UPD SimpleName: add from add to annotationClass"]}, {"root": "INS WildcardType: ? extends Annotation to ParameterizedType: Set<String> at 1", "operations": ["INS WildcardType: ? extends Annotation to ParameterizedType: Set<String> at 1", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: annotationClass to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: annotationClass to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: get to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "MOVE from SimpleType: Annotation", "operations": ["MOV SimpleName: String to SimpleType: Annotation at 0"]}, {"root": "INS SimpleName: annotationClass to MethodInvocation at 2", "operations": ["INS SimpleName: annotationClass to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3", "MOV SimpleName: usedSet to MethodInvocation at 0"]}, {"root": "INS SimpleName: put to MethodInvocation at 1", "operations": ["INS SimpleName: put to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: usedSet to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "INS SimpleName: put to MethodInvocation at 1", "operations": ["INS SimpleName: put to MethodInvocation at 1"]}, {"root": "MOVE from SimpleType: Annotation", "operations": ["MOV SimpleName: String to SimpleType: Annotation at 0"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: HashSet", "DEL ParameterizedType: HashSet<String>", "DEL ClassInstanceCreation", "DEL SimpleName: String", "DEL SimpleType: HashSet", "DEL SimpleType: String"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleType: String", "DEL ParameterizedType: HashSet<String>", "DEL ClassInstanceCreation"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ParameterizedType: HashSet<String>", "DEL ClassInstanceCreation", "DEL SimpleType: HashSet", "DEL SimpleName: HashSet"]}, {"root": "DEL SimpleType: String", "operations": ["DEL SimpleType: String"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: method", "DEL SimpleName: usedConstructNames", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: processMethod"]}, {"root": "DEL SimpleName: usedConstructNames", "operations": ["DEL SimpleName: usedConstructNames"]}, {"root": "DEL SimpleName: usedDestroyNames", "operations": ["DEL SimpleName: usedDestroyNames"]}, {"root": "DEL SimpleName: usedConstructNames", "operations": ["DEL SimpleName: usedConstructNames"]}, {"root": "DEL SimpleName: usedDestroyNames", "operations": ["DEL SimpleName: usedDestroyNames"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: Set", "DEL ParameterizedType: Set<String>", "DEL SimpleName: usedFieldNames", "DEL SingleVariableDeclaration", "DEL SimpleType: Set"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL EnhancedForStatement"]}, {"root": "DEL SimpleType: Configuration", "operations": ["DEL SimpleType: Configuration"]}]}}, {"LifecycleMethods_diff": {"operations": ["Move ImportDeclaration(23) into CompilationUnit(552) at 2", "Move ImportDeclaration(25) into CompilationUnit(552) at 6", "Insert ImportDeclaration(15) into CompilationUnit(552) at 7", "Update QualifiedName: java.util.HashSet(22) to com.google.common.collect.ImmutableSet", "Update QualifiedName: java.util.Set(24) to com.netflix.governator.warming.CoolDown", "Insert QualifiedName: com.netflix.governator.warming.WarmUp(14) into ImportDeclaration(15) at 0", "Insert FieldDeclaration(97) into TypeDeclaration: class(551) at 4", "Insert Modifier: private(68) into FieldDeclaration(97) at 0", "Insert Modifier: static(69) into FieldDeclaration(97) at 1", "Insert Modifier: final(70) into FieldDeclaration(97) at 2", "Insert ParameterizedType: Collection<Class<? extends Annotation>>(79) into FieldDeclaration(97) at 3", "Insert VariableDeclarationFragment(96) into FieldDeclaration(97) at 4", "Insert Block(387) into MethodDeclaration(388) at 5", "Insert SimpleType: Collection(72) into ParameterizedType: Collection<Class<? extends Annotation>>(79) at 0", "Insert ParameterizedType: Class<? extends Annotation>(78) into ParameterizedType: Collection<Class<? extends Annotation>>(79) at 1", "Insert SimpleName: methodAnnotations(80) into VariableDeclarationFragment(96) at 0", "Insert MethodInvocation(95) into VariableDeclarationFragment(96) at 1", "Update ParameterizedType: Set<String>(265) to Multimap<Class<? extends Annotation>,String>", "Update SimpleName: usedConstructNames(266) to usedNames", "Move IfStatement(287) into Block(387) at 0", "Move EnhancedForStatement(310) into Block(387) at 1", "Insert EnhancedForStatement(363) into Block(387) at 2", "Move ExpressionStatement(354) into Block(387) at 3", "Move EnhancedForStatement(372) into Block(387) at 4", "Update ParameterizedType: Class<Configuration>(386) to Class<? extends Annotation>", "Update ParameterizedType: Set<String>(393) to Multimap<Class<? extends Annotation>,String>", "Update SimpleName: usedSet(394) to usedNames", "Update ParameterizedType: Set<String>(450) to Multimap<Class<? extends Annotation>,String>", "Update SimpleName: usedSet(451) to usedNames", "Insert SimpleName: Collection(71) into SimpleType: Collection(72) at 0", "Insert SimpleType: Class(74) into ParameterizedType: Class<? extends Annotation>(78) at 0", "Insert WildcardType: ? extends Annotation(77) into ParameterizedType: Class<? extends Annotation>(78) at 1", "Insert SimpleName: ImmutableSet(81) into MethodInvocation(95) at 0", "Insert SimpleName: of(82) into MethodInvocation(95) at 1", "Move TypeLiteral(332) into MethodInvocation(95) at 2", "Move TypeLiteral(340) into MethodInvocation(95) at 3", "Insert TypeLiteral(91) into MethodInvocation(95) at 4", "Insert TypeLiteral(94) into MethodInvocation(95) at 5", "Update SimpleType: Set(262) to Multimap", "Insert ParameterizedType: Class<? extends Annotation>(293) into ParameterizedType: Multimap<Class<? extends Annotation>,String>(296) at 1", "Move SimpleType: String(278) into ParameterizedType: Multimap<Class<? extends Annotation>,String>(296) at 2", "Move SingleVariableDeclaration(314) into EnhancedForStatement(363) at 0", "Move MethodInvocation(317) into EnhancedForStatement(363) at 1", "Insert Block(362) into EnhancedForStatement(363) at 2", "Insert SimpleType: Class(397) into ParameterizedType: Class<? extends Annotation>(401) at 0", "Insert WildcardType: ? extends Annotation(400) into ParameterizedType: Class<? extends Annotation>(401) at 1", "Update SimpleType: Set(390) to Multimap", "Insert ParameterizedType: Class<? extends Annotation>(411) into ParameterizedType: Multimap<Class<? extends Annotation>,String>(414) at 1", "Update SimpleType: Set(447) to Multimap", "Insert ParameterizedType: Class<? extends Annotation>(478) into ParameterizedType: Multimap<Class<? extends Annotation>,String>(481) at 1", "Insert SimpleName: Class(73) into SimpleType: Class(74) at 0", "Insert SimpleType: Annotation(76) into WildcardType: ? extends Annotation(77) at 0", "Insert SimpleType: WarmUp(90) into TypeLiteral(91) at 0", "Insert SimpleType: CoolDown(93) into TypeLiteral(94) at 0", "Insert MethodInvocation(118) into MethodInvocation(119) at 2", "Update SimpleName: Set(261) to Multimap", "Update SimpleType: String(264) to Class", "Move SimpleType: String(264) into ParameterizedType: Class<? extends Annotation>(293) at 0", "Insert WildcardType: ? extends Annotation(292) into ParameterizedType: Class<? extends Annotation>(293) at 1", "Move IfStatement(327) into Block(362) at 0", "Insert EnhancedForStatement(361) into Block(362) at 1", "Update SimpleName: usedFieldNames(352) to usedNames", "Insert SimpleName: Class(396) into SimpleType: Class(397) at 0", "Insert SimpleType: Annotation(399) into WildcardType: ? extends Annotation(400) at 0", "Update SimpleName: Set(389) to Multimap", "Move SimpleType: Class(383) into ParameterizedType: Class<? extends Annotation>(411) at 0", "Insert WildcardType: ? extends Annotation(410) into ParameterizedType: Class<? extends Annotation>(411) at 1", "Update SimpleName: Set(446) to Multimap", "Insert SimpleType: Class(474) into ParameterizedType: Class<? extends Annotation>(478) at 0", "Insert WildcardType: ? extends Annotation(477) into ParameterizedType: Class<? extends Annotation>(478) at 1", "Insert SimpleName: Annotation(75) into SimpleType: Annotation(76) at 0", "Insert SimpleName: WarmUp(89) into SimpleType: WarmUp(90) at 0", "Insert SimpleName: CoolDown(92) into SimpleType: CoolDown(93) at 0", "Insert SimpleName: ArrayListMultimap(108) into MethodInvocation(118) at 0", "Insert ParameterizedType: Class<? extends Annotation>(114) into MethodInvocation(118) at 1", "Move SimpleType: String(91) into MethodInvocation(118) at 2", "Insert SimpleName: create(117) into MethodInvocation(118) at 3", "Update SimpleName: String(263) to Class", "Insert SimpleType: Annotation(291) into WildcardType: ? extends Annotation(292) at 0", "Insert SingleVariableDeclaration(352) into EnhancedForStatement(361) at 0", "Insert SimpleName: methodAnnotations(353) into EnhancedForStatement(361) at 1", "Move Block(344) into EnhancedForStatement(361) at 2", "Update SimpleName: Configuration(384) to Annotation", "Move SimpleName: Configuration(384) into SimpleType: Annotation(399) at 0", "Insert SimpleType: Annotation(409) into WildcardType: ? extends Annotation(410) at 0", "Insert SimpleName: Class(473) into SimpleType: Class(474) at 0", "Insert SimpleType: Annotation(476) into WildcardType: ? extends Annotation(477) at 0", "Update SimpleType: HashSet(83) to Class", "Move SimpleType: HashSet(83) into ParameterizedType: Class<? extends Annotation>(114) at 0", "Insert WildcardType: ? extends Annotation(113) into ParameterizedType: Class<? extends Annotation>(114) at 1", "Insert SimpleName: Annotation(290) into SimpleType: Annotation(291) at 0", "Update SimpleName: usedFieldNames(306) to usedNames", "Update ParameterizedType: Set<String>(272) to Class<? extends Annotation>", "Move ParameterizedType: Set<String>(272) into SingleVariableDeclaration(352) at 0", "Update SimpleName: usedDestroyNames(273) to annotationClass", "Move SimpleName: usedDestroyNames(273) into SingleVariableDeclaration(352) at 1", "Update SimpleName: usedFieldNames(368) to usedNames", "Insert SimpleName: Annotation(408) into SimpleType: Annotation(409) at 0", "Insert SimpleName: Annotation(475) into SimpleType: Annotation(476) at 0", "Update SimpleName: HashSet(82) to Class", "Insert SimpleType: Annotation(112) into WildcardType: ? extends Annotation(113) at 0", "Update SimpleType: Set(269) to Class", "Insert WildcardType: ? extends Annotation(349) into ParameterizedType: Class<? extends Annotation>(350) at 1", "Insert MethodInvocation(424) into MethodInvocation(429) at 0", "Move MethodInvocation(416) into MethodInvocation(429) at 3", "Insert MethodInvocation(491) into MethodInvocation(496) at 0", "Move MethodInvocation(501) into MethodInvocation(496) at 3", "Update SimpleName: String(84) to Annotation", "Move SimpleName: String(84) into SimpleType: Annotation(112) at 0", "Update SimpleName: Set(268) to Class", "Insert SimpleType: Annotation(348) into WildcardType: ? extends Annotation(349) at 0", "Insert SimpleName: annotationClass(356) into MethodInvocation(358) at 2", "Update SimpleName: usedDestroyNames(341) to usedNames", "Update SimpleName: usedSet(400) to usedNames", "Move SimpleName: usedSet(400) into MethodInvocation(424) at 0", "Insert SimpleName: get(422) into MethodInvocation(424) at 1", "Insert SimpleName: annotationClass(423) into MethodInvocation(424) at 2", "Update SimpleName: usedSet(412) to usedNames", "Insert SimpleName: put(437) into MethodInvocation(442) at 1", "Update SimpleName: add(413) to annotationClass", "Move MethodInvocation(404) into MethodInvocation(442) at 3", "Update SimpleName: usedSet(457) to usedNames", "Move SimpleName: usedSet(457) into MethodInvocation(491) at 0", "Insert SimpleName: get(489) into MethodInvocation(491) at 1", "Insert SimpleName: annotationClass(490) into MethodInvocation(491) at 2", "Update SimpleName: usedSet(497) to usedNames", "Insert SimpleName: put(532) into MethodInvocation(537) at 1", "Update SimpleName: add(498) to annotationClass", "Move MethodInvocation(461) into MethodInvocation(537) at 3", "Update SimpleName: String(270) to Annotation", "Move SimpleName: String(270) into SimpleType: Annotation(348) at 0", "Delete SimpleName: HashSet(76)", "Delete SimpleType: HashSet(77)", "Delete SimpleName: String(78)", "Delete SimpleType: String(79)", "Delete ParameterizedType: HashSet<String>(80)", "Delete ClassInstanceCreation(81)", "Delete SimpleType: String(85)", "Delete ParameterizedType: HashSet<String>(86)", "Delete ClassInstanceCreation(87)", "Delete SimpleName: HashSet(88)", "Delete SimpleType: HashSet(89)", "Delete ParameterizedType: HashSet<String>(92)", "Delete ClassInstanceCreation(93)", "Delete SimpleType: String(271)", "Delete SimpleName: processMethod(328)", "Delete SimpleName: method(329)", "Delete SimpleName: usedConstructNames(333)", "Delete MethodInvocation(334)", "Delete ExpressionStatement(335)", "Delete SimpleName: usedConstructNames(350)", "Delete SimpleName: usedDestroyNames(351)", "Delete SimpleName: usedConstructNames(366)", "Delete SimpleName: usedDestroyNames(367)", "Delete SingleVariableDeclaration(274)", "Delete SimpleName: Set(275)", "Delete SimpleType: Set(276)", "Delete ParameterizedType: Set<String>(279)", "Delete SimpleName: usedFieldNames(280)", "Delete SingleVariableDeclaration(281)", "Delete EnhancedForStatement(345)", "Delete Block(373)", "Delete SimpleType: Configuration(385)"]}}, {"LifecycleState_cluster": {"actions": [{"root": "INS EnumConstantDeclaration to EnumDeclaration at 4", "operations": ["INS SimpleName: WARMING_UP to EnumConstantDeclaration at 0", "INS EnumConstantDeclaration to EnumDeclaration at 4"]}, {"root": "INS EnumConstantDeclaration to EnumDeclaration at 6", "operations": ["INS EnumConstantDeclaration to EnumDeclaration at 6", "INS SimpleName: COOLING_DOWN to EnumConstantDeclaration at 0"]}]}}, {"LifecycleState_diff": {"operations": ["Insert EnumConstantDeclaration(9) into EnumDeclaration(16) at 4", "Insert EnumConstantDeclaration(13) into EnumDeclaration(16) at 6", "Insert SimpleName: WARMING_UP(8) into EnumConstantDeclaration(9) at 0", "Insert SimpleName: COOLING_DOWN(12) into EnumConstantDeclaration(13) at 0"]}}, {"ClassHolder_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.netflix.governator.inject.guice"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.BindingAnnotation"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.annotation.ElementType", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.annotation.Retention"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.annotation.Target", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.annotation.RetentionPolicy.RUNTIME", "DEL ImportDeclaration"]}, {"root": "DEL AnnotationTypeDeclaration", "operations": ["DEL QualifiedName: ElementType.FIELD", "DEL AnnotationTypeMemberDeclaration", "DEL SimpleName: Target", "DEL SimpleType: Class", "DEL Modifier: public", "DEL SimpleName: RUNTIME", "DEL SimpleName: ClassHolder", "DEL MarkerAnnotation", "DEL ParameterizedType: Class<?>", "DEL SimpleName: Class", "DEL SingleMemberAnnotation", "DEL SimpleName: clazz", "DEL SingleMemberAnnotation", "DEL SimpleName: BindingAnnotation", "DEL WildcardType: ?", "DEL AnnotationTypeDeclaration", "DEL SimpleName: Retention"]}]}}, {"ClassHolder_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.inject.guice(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.inject.BindingAnnotation(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.annotation.ElementType(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.lang.annotation.Retention(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.lang.annotation.Target(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.lang.annotation.RetentionPolicy.RUNTIME(10)", "Delete ImportDeclaration(11)", "Delete SimpleName: Retention(12)", "Delete SimpleName: RUNTIME(13)", "Delete SingleMemberAnnotation(14)", "Delete SimpleName: Target(15)", "Delete QualifiedName: ElementType.FIELD(16)", "Delete SingleMemberAnnotation(17)", "Delete SimpleName: BindingAnnotation(18)", "Delete MarkerAnnotation(19)", "Delete Modifier: public(20)", "Delete SimpleName: ClassHolder(21)", "Delete SimpleName: Class(22)", "Delete SimpleType: Class(23)", "Delete WildcardType: ?(24)", "Delete ParameterizedType: Class<?>(25)", "Delete SimpleName: clazz(26)", "Delete AnnotationTypeMemberDeclaration(27)", "Delete AnnotationTypeDeclaration(28)"]}}, {"ClassHolderImp_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.netflix.governator.inject.guice"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.Serializable"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.annotation.Annotation"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL ParameterizedType: Class<?>", "DEL WildcardType: ?", "DEL SimpleType: ClassHolder", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: Annotation", "DEL SimpleName: SuppressWarnings", "DEL MethodDeclaration", "DEL SimpleName: clazz", "DEL SimpleName: o", "DEL ExpressionStatement", "DEL SimpleType: ClassHolder", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL ParameterizedType: Class<?>", "DEL InfixExpression: !=", "DEL SimpleType: Serializable", "DEL SimpleName: ClassHolderImp", "DEL SimpleName: ClassHolderImp", "DEL SimpleName: clazz", "DEL SimpleType: Class", "DEL SimpleName: o", "DEL WildcardType: ?", "DEL ReturnStatement", "DEL SimpleType: Class", "DEL Block", "DEL CastExpression", "DEL SimpleName: clazz", "DEL TypeLiteral", "DEL MethodInvocation", "DEL Block", "DEL FieldAccess", "DEL NullLiteral", "DEL ParameterizedType: Class<? extends Annotation>", "DEL Block", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleType: ClassHolderImp", "DEL SimpleName: ClassHolderImp", "DEL BooleanLiteral: false", "DEL SimpleName: clazz", "DEL ReturnStatement", "DEL SimpleName: clazz", "DEL IfStatement", "DEL BooleanLiteral: false", "DEL MarkerAnnotation", "DEL SimpleName: getClass", "DEL SimpleName: Class", "DEL SimpleType: ClassHolderImp", "DEL MethodDeclaration", "DEL WildcardType: ?", "DEL Modifier: public", "DEL Assignment: =", "DEL SimpleName: Class", "DEL FieldDeclaration", "DEL SimpleName: clazz", "DEL SimpleName: Class", "DEL SimpleType: Class", "DEL MarkerAnnotation", "DEL Block", "DEL Block", "DEL InfixExpression: ==", "DEL ParameterizedType: Class<?>", "DEL MethodInvocation", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SingleMemberAnnotation", "DEL SimpleName: clazz", "DEL PrefixExpression: !", "DEL SimpleName: that", "DEL MethodInvocation", "DEL SimpleType: Annotation", "DEL MethodDeclaration", "DEL Modifier: public", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL ThisExpression", "DEL SimpleName: Override", "DEL Block", "DEL TypeDeclaration: class", "DEL SimpleType: Class", "DEL SimpleName: hashCode", "DEL SimpleName: o", "DEL Modifier: public", "DEL PrimitiveType: int", "DEL ThisExpression", "DEL BooleanLiteral: true", "DEL SimpleName: equals", "DEL Block", "DEL SimpleName: o", "DEL SimpleName: equals", "DEL SimpleName: ClassHolder", "DEL BooleanLiteral: true", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL SimpleName: o", "DEL StringLiteral: \"ClassExplicitlyAnnotation\"", "DEL SimpleName: Override", "DEL SimpleName: ClassHolderImp", "DEL IfStatement", "DEL InfixExpression: ||", "DEL SimpleName: Class", "DEL Block", "DEL SimpleName: getClass", "DEL VariableDeclarationFragment", "DEL PrimitiveType: boolean", "DEL InfixExpression: ==", "DEL IfStatement", "DEL SimpleName: ClassHolder", "DEL SimpleName: clazz", "DEL QualifiedName: that.clazz", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL SimpleName: Override", "DEL MarkerAnnotation", "DEL ReturnStatement", "DEL SimpleName: Serializable", "DEL SimpleType: Object", "DEL SimpleName: annotationType", "DEL ReturnStatement", "DEL Modifier: public", "DEL SimpleName: Override", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: hashCode"]}]}}, {"ClassHolderImp_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.inject.guice(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.io.Serializable(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.annotation.Annotation(4)", "Delete ImportDeclaration(5)", "Delete SimpleName: SuppressWarnings(6)", "Delete StringLiteral: \"ClassExplicitlyAnnotation\"(7)", "Delete SingleMemberAnnotation(8)", "Delete Modifier: public(9)", "Delete SimpleName: ClassHolderImp(10)", "Delete SimpleName: ClassHolder(11)", "Delete SimpleType: ClassHolder(12)", "Delete SimpleName: Serializable(13)", "Delete SimpleType: Serializable(14)", "Delete Modifier: private(15)", "Delete Modifier: final(16)", "Delete SimpleName: Class(17)", "Delete SimpleType: Class(18)", "Delete WildcardType: ?(19)", "Delete ParameterizedType: Class<?>(20)", "Delete SimpleName: clazz(21)", "Delete VariableDeclarationFragment(22)", "Delete FieldDeclaration(23)", "Delete Modifier: public(24)", "Delete SimpleName: ClassHolderImp(25)", "Delete SimpleName: Class(26)", "Delete SimpleType: Class(27)", "Delete WildcardType: ?(28)", "Delete ParameterizedType: Class<?>(29)", "Delete SimpleName: clazz(30)", "Delete SingleVariableDeclaration(31)", "Delete ThisExpression(32)", "Delete SimpleName: clazz(33)", "Delete FieldAccess(34)", "Delete SimpleName: clazz(35)", "Delete Assignment: =(36)", "Delete ExpressionStatement(37)", "Delete Block(38)", "Delete MethodDeclaration(39)", "Delete SimpleName: Override(40)", "Delete MarkerAnnotation(41)", "Delete Modifier: public(42)", "Delete SimpleName: Class(43)", "Delete SimpleType: Class(44)", "Delete WildcardType: ?(45)", "Delete ParameterizedType: Class<?>(46)", "Delete SimpleName: clazz(47)", "Delete SimpleName: clazz(48)", "Delete ReturnStatement(49)", "Delete Block(50)", "Delete MethodDeclaration(51)", "Delete SimpleName: Override(52)", "Delete MarkerAnnotation(53)", "Delete Modifier: public(54)", "Delete SimpleName: Class(55)", "Delete SimpleType: Class(56)", "Delete SimpleName: Annotation(57)", "Delete SimpleType: Annotation(58)", "Delete WildcardType: ? extends Annotation(59)", "Delete ParameterizedType: Class<? extends Annotation>(60)", "Delete SimpleName: annotationType(61)", "Delete SimpleName: ClassHolder(62)", "Delete SimpleType: ClassHolder(63)", "Delete TypeLiteral(64)", "Delete ReturnStatement(65)", "Delete Block(66)", "Delete MethodDeclaration(67)", "Delete SimpleName: Override(68)", "Delete MarkerAnnotation(69)", "Delete Modifier: public(70)", "Delete PrimitiveType: boolean(71)", "Delete SimpleName: equals(72)", "Delete SimpleName: Object(73)", "Delete SimpleType: Object(74)", "Delete SimpleName: o(75)", "Delete SingleVariableDeclaration(76)", "Delete ThisExpression(77)", "Delete SimpleName: o(78)", "Delete InfixExpression: ==(79)", "Delete BooleanLiteral: true(80)", "Delete ReturnStatement(81)", "Delete Block(82)", "Delete IfStatement(83)", "Delete SimpleName: o(84)", "Delete NullLiteral(85)", "Delete InfixExpression: ==(86)", "Delete SimpleName: getClass(87)", "Delete MethodInvocation(88)", "Delete SimpleName: o(89)", "Delete SimpleName: getClass(90)", "Delete MethodInvocation(91)", "Delete InfixExpression: !=(92)", "Delete InfixExpression: ||(93)", "Delete BooleanLiteral: false(94)", "Delete ReturnStatement(95)", "Delete Block(96)", "Delete IfStatement(97)", "Delete SimpleName: ClassHolderImp(98)", "Delete SimpleType: ClassHolderImp(99)", "Delete SimpleName: that(100)", "Delete SimpleName: ClassHolderImp(101)", "Delete SimpleType: ClassHolderImp(102)", "Delete SimpleName: o(103)", "Delete CastExpression(104)", "Delete VariableDeclarationFragment(105)", "Delete VariableDeclarationStatement(106)", "Delete SimpleName: clazz(107)", "Delete SimpleName: equals(108)", "Delete QualifiedName: that.clazz(109)", "Delete MethodInvocation(110)", "Delete PrefixExpression: !(111)", "Delete BooleanLiteral: false(112)", "Delete ReturnStatement(113)", "Delete Block(114)", "Delete IfStatement(115)", "Delete BooleanLiteral: true(116)", "Delete ReturnStatement(117)", "Delete Block(118)", "Delete MethodDeclaration(119)", "Delete SimpleName: Override(120)", "Delete MarkerAnnotation(121)", "Delete Modifier: public(122)", "Delete PrimitiveType: int(123)", "Delete SimpleName: hashCode(124)", "Delete SimpleName: clazz(125)", "Delete SimpleName: hashCode(126)", "Delete MethodInvocation(127)", "Delete ReturnStatement(128)", "Delete Block(129)", "Delete MethodDeclaration(130)", "Delete TypeDeclaration: class(131)"]}}, {"LifecycleModule_cluster": {"actions": []}}, {"LifecycleModule_diff": {"operations": []}}], "commit_stats": [{"total_files": 14, "deleted_files": 2, "testing": "True", "maintenance": "False", "build": "True"}]}