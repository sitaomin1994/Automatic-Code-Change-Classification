{"application": "apache-drill", "csha": "69a44ed79e4a9ea242df2d5ce7a9b3f042120676", "files": [{"AbstractPartitionDescriptor_cluster": {"actions": [{"root": "UPDATE from supportsSinglePartOptimization to supportsMetadataCachePruning", "operations": ["UPD SimpleName: supportsSinglePartOptimization from supportsSinglePartOptimization to supportsMetadataCachePruning"]}]}}, {"AbstractPartitionDescriptor_diff": {"operations": ["Update SimpleName: supportsSinglePartOptimization(111) to supportsMetadataCachePruning"]}}, {"FileSystemPartitionDescriptor_cluster": {"actions": [{"root": "UPDATE from supportsSinglePartOptimization to supportsMetadataCachePruning", "operations": ["UPD SimpleName: supportsSinglePartOptimization from supportsSinglePartOptimization to supportsMetadataCachePruning"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS IfStatement to Block at 1", "INS SimpleName: selection to CastExpression at 1", "INS SimpleName: FormatSelection to SimpleType: FormatSelection at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS InfixExpression: != to InfixExpression: && at 1", "INS MethodInvocation to InfixExpression: != at 0", "INS SimpleName: selection to InstanceofExpression at 0", "INS SimpleName: selection to VariableDeclarationFragment at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS SimpleName: FormatSelection to SimpleType: FormatSelection at 0", "INS InfixExpression: && to IfStatement at 0", "INS FieldAccess to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS NullLiteral to InfixExpression: != at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleType: FormatSelection to CastExpression at 0", "INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 2", "INS InstanceofExpression to InfixExpression: && at 0", "INS SimpleName: getSelection to MethodInvocation at 1", "INS SimpleType: Object to VariableDeclarationStatement at 1", "INS SimpleName: table to FieldAccess at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: FormatSelection to InstanceofExpression at 1", "INS SimpleName: getCacheFileRoot to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: getSelection to MethodInvocation at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}]}}, {"FileSystemPartitionDescriptor_diff": {"operations": ["Update SimpleName: supportsSinglePartOptimization(1179) to supportsMetadataCachePruning", "Insert Block(1213) into MethodDeclaration(1214) at 4", "Insert VariableDeclarationStatement(1190) into Block(1213) at 0", "Insert IfStatement(1210) into Block(1213) at 1", "Insert ReturnStatement(1212) into Block(1213) at 2", "Insert Modifier: final(1180) into VariableDeclarationStatement(1190) at 0", "Insert SimpleType: Object(1182) into VariableDeclarationStatement(1190) at 1", "Insert VariableDeclarationFragment(1189) into VariableDeclarationStatement(1190) at 2", "Insert InfixExpression: &&(1206) into IfStatement(1210) at 0", "Move Block(1182) into IfStatement(1210) at 1", "Insert BooleanLiteral: false(1211) into ReturnStatement(1212) at 0", "Insert SimpleName: Object(1181) into SimpleType: Object(1182) at 0", "Insert SimpleName: selection(1183) into VariableDeclarationFragment(1189) at 0", "Insert MethodInvocation(1188) into VariableDeclarationFragment(1189) at 1", "Insert InstanceofExpression(1194) into InfixExpression: &&(1206) at 0", "Insert InfixExpression: !=(1205) into InfixExpression: &&(1206) at 1", "Insert FieldAccess(1186) into MethodInvocation(1188) at 0", "Insert SimpleName: getSelection(1187) into MethodInvocation(1188) at 1", "Insert SimpleName: selection(1191) into InstanceofExpression(1194) at 0", "Insert SimpleType: FormatSelection(1193) into InstanceofExpression(1194) at 1", "Insert MethodInvocation(1203) into InfixExpression: !=(1205) at 0", "Insert NullLiteral(1204) into InfixExpression: !=(1205) at 1", "Insert ThisExpression(1184) into FieldAccess(1186) at 0", "Insert SimpleName: table(1185) into FieldAccess(1186) at 1", "Insert SimpleName: FormatSelection(1192) into SimpleType: FormatSelection(1193) at 0", "Insert MethodInvocation(1201) into MethodInvocation(1203) at 0", "Insert SimpleName: getCacheFileRoot(1202) into MethodInvocation(1203) at 1", "Insert ParenthesizedExpression(1199) into MethodInvocation(1201) at 0", "Insert SimpleName: getSelection(1200) into MethodInvocation(1201) at 1", "Insert CastExpression(1198) into ParenthesizedExpression(1199) at 0", "Insert SimpleType: FormatSelection(1196) into CastExpression(1198) at 0", "Insert SimpleName: selection(1197) into CastExpression(1198) at 1", "Insert SimpleName: FormatSelection(1195) into SimpleType: FormatSelection(1196) at 0"]}}, {"PartitionDescriptor_cluster": {"actions": [{"root": "UPDATE from supportsSinglePartOptimization to supportsMetadataCachePruning", "operations": ["UPD SimpleName: supportsSinglePartOptimization from supportsSinglePartOptimization to supportsMetadataCachePruning"]}]}}, {"PartitionDescriptor_diff": {"operations": ["Update SimpleName: supportsSinglePartOptimization(220) to supportsMetadataCachePruning"]}}, {"FileSelection_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 43", "operations": ["INS SimpleName: cacheFileRoot to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 43", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleType: String to MethodDeclaration at 1", "INS SimpleName: getCacheFileRoot to MethodDeclaration at 2", "INS SimpleName: String to SimpleType: String at 0", "INS Block to MethodDeclaration at 3", "INS ReturnStatement to Block at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleType: String to SingleVariableDeclaration at 1", "INS SimpleName: cacheFileRoot to SingleVariableDeclaration at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 8", "operations": ["INS BooleanLiteral: false to ClassInstanceCreation at 5", "INS SimpleName: cacheFileRoot to ClassInstanceCreation at 4", "INS VariableDeclarationStatement to Block at 8", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: FileSelection to SimpleType: FileSelection at 0", "INS SimpleName: fileSel to VariableDeclarationFragment at 0", "INS SimpleType: FileSelection to VariableDeclarationStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 9", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 9", "INS SimpleName: hadWildcard to MethodInvocation at 1", "INS SimpleName: setHadWildcard to MethodInvocation at 1", "INS SimpleName: fileSel to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: selection to MethodInvocation at 0"]}, {"root": "INS ReturnStatement to Block at 10", "operations": ["INS ReturnStatement to Block at 10", "INS SimpleName: fileSel to ReturnStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV NullLiteral to ClassInstanceCreation at 1", "MOV SimpleName: dirs to ClassInstanceCreation at 2", "MOV MethodInvocation to ClassInstanceCreation at 3", "MOV SimpleType: FileSelection to ClassInstanceCreation at 0"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ClassInstanceCreation", "DEL ReturnStatement"]}]}}, {"FileSelection_diff": {"operations": ["Insert MethodDeclaration(1846) into TypeDeclaration: class(1847) at 43", "Insert SingleVariableDeclaration(1539) into MethodDeclaration(1693) at 6", "Insert Modifier: public(1839) into MethodDeclaration(1846) at 0", "Insert SimpleType: String(1841) into MethodDeclaration(1846) at 1", "Insert SimpleName: getCacheFileRoot(1842) into MethodDeclaration(1846) at 2", "Insert Block(1845) into MethodDeclaration(1846) at 3", "Insert Modifier: final(1535) into SingleVariableDeclaration(1539) at 0", "Insert SimpleType: String(1537) into SingleVariableDeclaration(1539) at 1", "Insert SimpleName: cacheFileRoot(1538) into SingleVariableDeclaration(1539) at 2", "Insert VariableDeclarationStatement(1682) into Block(1692) at 8", "Insert ExpressionStatement(1689) into Block(1692) at 9", "Insert ReturnStatement(1691) into Block(1692) at 10", "Insert SimpleName: String(1840) into SimpleType: String(1841) at 0", "Insert ReturnStatement(1844) into Block(1845) at 0", "Insert SimpleName: String(1536) into SimpleType: String(1537) at 0", "Insert SimpleType: FileSelection(1669) into VariableDeclarationStatement(1682) at 0", "Insert VariableDeclarationFragment(1681) into VariableDeclarationStatement(1682) at 1", "Insert MethodInvocation(1688) into ExpressionStatement(1689) at 0", "Insert SimpleName: fileSel(1690) into ReturnStatement(1691) at 0", "Insert SimpleName: cacheFileRoot(1843) into ReturnStatement(1844) at 0", "Insert SimpleName: FileSelection(1668) into SimpleType: FileSelection(1669) at 0", "Insert SimpleName: fileSel(1670) into VariableDeclarationFragment(1681) at 0", "Insert ClassInstanceCreation(1680) into VariableDeclarationFragment(1681) at 1", "Insert SimpleName: fileSel(1683) into MethodInvocation(1688) at 0", "Insert SimpleName: setHadWildcard(1684) into MethodInvocation(1688) at 1", "Insert MethodInvocation(1687) into MethodInvocation(1688) at 2", "Move SimpleType: FileSelection(1664) into ClassInstanceCreation(1680) at 0", "Move NullLiteral(1665) into ClassInstanceCreation(1680) at 1", "Move SimpleName: dirs(1666) into ClassInstanceCreation(1680) at 2", "Move MethodInvocation(1669) into ClassInstanceCreation(1680) at 3", "Insert SimpleName: cacheFileRoot(1678) into ClassInstanceCreation(1680) at 4", "Insert BooleanLiteral: false(1679) into ClassInstanceCreation(1680) at 5", "Insert SimpleName: selection(1685) into MethodInvocation(1687) at 0", "Insert SimpleName: hadWildcard(1686) into MethodInvocation(1687) at 1", "Delete ClassInstanceCreation(1670)", "Delete ReturnStatement(1671)"]}}, {"ParquetFormatPlugin_cluster": {"actions": [{"root": "INS MethodInvocation to MethodInvocation at 4", "operations": ["INS SimpleName: selection to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleName: getSelectionRoot to MethodInvocation at 1"]}]}}, {"ParquetFormatPlugin_diff": {"operations": ["Insert MethodInvocation(817) into MethodInvocation(818) at 4", "Insert SimpleName: selection(815) into MethodInvocation(817) at 0", "Insert SimpleName: getSelectionRoot(816) into MethodInvocation(817) at 1"]}}, {"ParquetGroupScan_cluster": {"actions": [{"root": "INS PrefixExpression: ! to InfixExpression: && at 1", "operations": ["INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: hadWildcard to MethodInvocation at 1", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: selection to MethodInvocation at 0"]}]}}, {"ParquetGroupScan_diff": {"operations": ["Insert PrefixExpression: !(2402) into InfixExpression: &&(2406) at 1", "Insert MethodInvocation(2401) into PrefixExpression: !(2402) at 0", "Insert SimpleName: selection(2399) into MethodInvocation(2401) at 0", "Insert SimpleName: hadWildcard(2400) into MethodInvocation(2401) at 1"]}}, {"PruneScanRule_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 36"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement: then for 2015/Q1/Feb, this will have ['2015', 'Q1', null] to TagElement at 3", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: If the query filter condition is WHERE dir1 = 'Q2'  (i.e no dir0 condition) then the array will to TagElement at 4", "INS TextElement: Compose the array of partition values for the directories that are referenced by filter: to TagElement at 0", "INS TextElement: e.g suppose the dir hierarchy is year/quarter/month and the query is: to TagElement at 1", "INS TextElement: have [null, 'Q2', null] to TagElement at 5", "INS TagElement to Javadoc at 0", "INS TextElement: SELECT * FROM T WHERE dir0=2015 AND dir1 = 'Q1', to TagElement at 2"]}, {"root": "INS SimpleType: BitSet to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: BitSet to VariableDeclarationStatement at 0", "INS SimpleName: BitSet to SimpleType: BitSet at 0"]}, {"root": "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "operations": ["INS SimpleType: BitSet to ClassInstanceCreation at 0", "INS SimpleName: BitSet to SimpleType: BitSet at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: matchBitSet to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS PostfixExpression: ++ to ForStatement at 2", "INS PrefixExpression: - to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 0", "INS Block to ForStatement at 3", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS Assignment: = to ExpressionStatement at 0", "INS IfStatement to Block at 0", "INS SimpleName: length to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: j to PostfixExpression: ++ at 0", "INS SimpleName: canDropFilter to Assignment: = at 0", "INS SimpleName: matchBitSet to MethodInvocation at 0", "INS IfStatement to Block at 2", "INS InfixExpression: != to IfStatement at 0", "INS MethodInvocation to InfixExpression: < at 1", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: length to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: - at 0", "INS SimpleName: index to VariableDeclarationFragment at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS IfStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: j to MethodInvocation at 2", "INS PrefixExpression: ! to IfStatement at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS InfixExpression: - to Assignment: = at 1", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: matchBitSet to MethodInvocation at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: index to Assignment: = at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS SimpleName: matchBitSet to MethodInvocation at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS Block to IfStatement at 1", "INS ForStatement to Block at 2", "INS Block to IfStatement at 1", "INS SimpleName: maxIndex to InfixExpression: != at 1", "INS SimpleName: j to InfixExpression: < at 0", "INS SimpleName: j to VariableDeclarationFragment at 0", "INS SimpleName: index to InfixExpression: != at 0", "INS BooleanLiteral: false to Assignment: = at 1", "INS SimpleName: matchBitSet to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to InfixExpression: && at 0", "operations": ["INS SimpleName: descriptor to MethodInvocation at 0", "INS SimpleName: supportsMetadataCachePruning to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: && at 0"]}, {"root": "INS MethodInvocation to InfixExpression: && at 0", "operations": ["INS SimpleName: supportsMetadataCachePruning to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: && at 0", "INS SimpleName: descriptor to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 4", "MOV ForStatement to Block at 3"]}, {"root": "UPDATE from supportsSinglePartOptimization to supportsMetadataCachePruning", "operations": ["UPD SimpleName: supportsSinglePartOptimization from supportsSinglePartOptimization to supportsMetadataCachePruning"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1", "MOV ExpressionStatement to Block at 6", "MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from maxIndex to index", "operations": ["UPD SimpleName: maxIndex from maxIndex to index"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: && to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 5", "operations": ["INS SimpleName: j to ArrayAccess at 1", "INS Block to ForStatement at 3", "INS IfStatement to Block at 5", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: parts to ArrayAccess at 0", "INS Block to IfStatement at 1", "INS IfStatement to Block at 0", "INS ArrayAccess to InfixExpression: != at 0", "INS InfixExpression: <= to ForStatement at 1", "INS NullLiteral to InfixExpression: != at 1", "INS ForStatement to Block at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS InfixExpression: - to Assignment: = at 1", "INS SimpleName: index to Assignment: = at 0", "INS SimpleName: j to InfixExpression: - at 0"]}, {"root": "INS BreakStatement to Block at 1", "operations": ["INS BreakStatement to Block at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV Block to IfStatement at 2"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS SimpleName: Math to MethodInvocation at 0", "INS SimpleName: tmpIndex to MethodInvocation at 3", "INS SimpleName: maxIndex to MethodInvocation at 2", "INS SimpleName: max to MethodInvocation at 1"]}, {"root": "MOVE from ForStatement", "operations": ["MOV PostfixExpression: ++ to ForStatement at 2", "MOV VariableDeclarationExpression to ForStatement at 0"]}, {"root": "MOVE from ForStatement", "operations": ["MOV VariableDeclarationExpression to ForStatement at 0", "MOV InfixExpression: <= to ForStatement at 1", "MOV PostfixExpression: ++ to ForStatement at 2"]}, {"root": "INS Block to ForStatement at 3", "operations": ["INS Block to ForStatement at 3", "INS Block to IfStatement at 1", "INS NullLiteral to InfixExpression: == at 1", "INS Block to IfStatement at 2", "INS SimpleName: matchBitSet to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS InfixExpression: || to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: j to MethodInvocation at 2", "INS InfixExpression: == to InfixExpression: || at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: clear to MethodInvocation at 1"]}, {"root": "UPDATE from maxIndex to j", "operations": ["UPD SimpleName: maxIndex from maxIndex to j"]}, {"root": "MOVE from InfixExpression: <=", "operations": ["MOV SimpleName: maxIndex to InfixExpression: <= at 0", "MOV SimpleName: tmpIndex to InfixExpression: <= at 1"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: == to InfixExpression: || at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: set to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: matchBitSet to MethodInvocation at 0", "INS SimpleName: j to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: equals to MethodInvocation at 2", "MOV ArrayAccess to InfixExpression: == at 0"]}, {"root": "INS ArrayAccess to MethodInvocation at 2", "operations": ["INS ArrayAccess to MethodInvocation at 2", "INS SimpleName: j to ArrayAccess at 1", "INS SimpleName: spInfo to ArrayAccess at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: matchBitSet to MethodInvocation at 0", "INS SimpleName: clear to MethodInvocation at 1", "INS SimpleName: j to MethodInvocation at 2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.exec.planner.SimplePartitionLocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL PrimitiveType: boolean", "DEL VariableDeclarationStatement", "DEL BooleanLiteral: true", "DEL VariableDeclarationFragment", "DEL SimpleName: isSinglePartition"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL SimpleName: checkForSingle", "DEL VariableDeclarationFragment", "DEL SimpleName: descriptor", "DEL MethodInvocation", "DEL SimpleName: supportsSinglePartOptimization"]}, {"root": "DEL SimpleName: checkForSingle", "operations": ["DEL SimpleName: checkForSingle"]}, {"root": "DEL SimpleName: isSinglePartition", "operations": ["DEL SimpleName: isSinglePartition"]}, {"root": "DEL SimpleName: tmpIndex", "operations": ["DEL SimpleName: tmpIndex"]}, {"root": "DEL Assignment: =", "operations": ["DEL Assignment: =", "DEL SimpleName: isSinglePartition", "DEL BooleanLiteral: false"]}, {"root": "DEL Assignment: =", "operations": ["DEL Assignment: =", "DEL SimpleName: isSinglePartition", "DEL BooleanLiteral: false"]}, {"root": "DEL BreakStatement", "operations": ["DEL BreakStatement"]}, {"root": "DEL InfixExpression: <=", "operations": ["DEL SimpleName: j", "DEL InfixExpression: <=", "DEL SimpleName: maxIndex"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL InfixExpression: !=", "DEL BooleanLiteral: false", "DEL IfStatement", "DEL Block", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: isSinglePartition", "DEL BreakStatement", "DEL Block", "DEL ForStatement", "DEL Assignment: =", "DEL IfStatement", "DEL IfStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL Block"]}, {"root": "DEL SimpleName: checkForSingle", "operations": ["DEL SimpleName: checkForSingle"]}, {"root": "DEL SimpleName: isSinglePartition", "operations": ["DEL SimpleName: isSinglePartition"]}]}}, {"PruneScanRule_diff": {"operations": ["Move VariableDeclarationStatement(812) into Block(1690) at 36", "Insert Javadoc(1699) into MethodDeclaration(1829) at 0", "Insert TagElement(1698) into Javadoc(1699) at 0", "Insert SimpleType: BitSet(819) into VariableDeclarationStatement(825) at 0", "Insert VariableDeclarationFragment(824) into VariableDeclarationStatement(825) at 1", "Insert TextElement: Compose the array of partition values for the directories that are referenced by filter:(1692) into TagElement(1698) at 0", "Insert TextElement: e.g suppose the dir hierarchy is year/quarter/month and the query is:(1693) into TagElement(1698) at 1", "Insert TextElement: SELECT * FROM T WHERE dir0=2015 AND dir1 = 'Q1',(1694) into TagElement(1698) at 2", "Insert TextElement: then for 2015/Q1/Feb, this will have ['2015', 'Q1', null](1695) into TagElement(1698) at 3", "Insert TextElement: If the query filter condition is WHERE dir1 = 'Q2'  (i.e no dir0 condition) then the array will(1696) into TagElement(1698) at 4", "Insert TextElement: have [null, 'Q2', null](1697) into TagElement(1698) at 5", "Insert SimpleName: BitSet(818) into SimpleType: BitSet(819) at 0", "Insert SimpleName: matchBitSet(820) into VariableDeclarationFragment(824) at 0", "Insert ClassInstanceCreation(823) into VariableDeclarationFragment(824) at 1", "Insert SimpleType: BitSet(822) into ClassInstanceCreation(823) at 0", "Insert Block(1592) into IfStatement(1593) at 1", "Insert SimpleName: BitSet(821) into SimpleType: BitSet(822) at 0", "Insert MethodInvocation(1497) into InfixExpression: &&(1500) at 0", "Insert VariableDeclarationStatement(1506) into Block(1592) at 0", "Insert IfStatement(1582) into Block(1592) at 1", "Insert IfStatement(1591) into Block(1592) at 2", "Insert SimpleName: descriptor(1495) into MethodInvocation(1497) at 0", "Insert SimpleName: supportsMetadataCachePruning(1496) into MethodInvocation(1497) at 1", "Insert PrimitiveType: int(1501) into VariableDeclarationStatement(1506) at 0", "Insert VariableDeclarationFragment(1505) into VariableDeclarationStatement(1506) at 1", "Insert PrefixExpression: !(1510) into IfStatement(1582) at 0", "Insert Block(1581) into IfStatement(1582) at 1", "Insert InfixExpression: !=(1585) into IfStatement(1591) at 0", "Insert Block(1590) into IfStatement(1591) at 1", "Insert MethodInvocation(1075) into InfixExpression: &&(1082) at 0", "Insert SimpleName: index(1502) into VariableDeclarationFragment(1505) at 0", "Insert PrefixExpression: -(1504) into VariableDeclarationFragment(1505) at 1", "Insert MethodInvocation(1509) into PrefixExpression: !(1510) at 0", "Move VariableDeclarationStatement(1498) into Block(1581) at 0", "Insert ExpressionStatement(1524) into Block(1581) at 1", "Insert ForStatement(1552) into Block(1581) at 2", "Move ForStatement(1518) into Block(1581) at 3", "Move ExpressionStatement(1526) into Block(1581) at 4", "Insert SimpleName: index(1583) into InfixExpression: !=(1585) at 0", "Insert SimpleName: maxIndex(1584) into InfixExpression: !=(1585) at 1", "Insert ExpressionStatement(1589) into Block(1590) at 0", "Update SimpleName: supportsSinglePartOptimization(1533) to supportsMetadataCachePruning", "Insert SimpleName: descriptor(1073) into MethodInvocation(1075) at 0", "Insert SimpleName: supportsMetadataCachePruning(1074) into MethodInvocation(1075) at 1", "Insert NumberLiteral: 1(1503) into PrefixExpression: -(1504) at 0", "Insert SimpleName: matchBitSet(1507) into MethodInvocation(1509) at 0", "Insert SimpleName: isEmpty(1508) into MethodInvocation(1509) at 1", "Insert Assignment: =(1523) into ExpressionStatement(1524) at 0", "Insert VariableDeclarationExpression(1529) into ForStatement(1552) at 0", "Insert InfixExpression: <(1534) into ForStatement(1552) at 1", "Insert PostfixExpression: ++(1536) into ForStatement(1552) at 2", "Insert Block(1551) into ForStatement(1552) at 3", "Insert Assignment: =(1588) into ExpressionStatement(1589) at 0", "Move IfStatement(1229) into Block(1245) at 1", "Insert SimpleName: index(1517) into Assignment: =(1523) at 0", "Insert InfixExpression: -(1522) into Assignment: =(1523) at 1", "Insert PrimitiveType: int(1525) into VariableDeclarationExpression(1529) at 0", "Insert VariableDeclarationFragment(1528) into VariableDeclarationExpression(1529) at 1", "Insert SimpleName: j(1530) into InfixExpression: <(1534) at 0", "Insert MethodInvocation(1533) into InfixExpression: <(1534) at 1", "Insert SimpleName: j(1535) into PostfixExpression: ++(1536) at 0", "Insert IfStatement(1550) into Block(1551) at 0", "Update SimpleName: maxIndex(1505) to index", "Insert SimpleName: canDropFilter(1586) into Assignment: =(1588) at 0", "Insert BooleanLiteral: false(1587) into Assignment: =(1588) at 1", "Move InfixExpression: &&(1111) into IfStatement(1241) at 0", "Insert MethodInvocation(1520) into InfixExpression: -(1522) at 0", "Insert NumberLiteral: 1(1521) into InfixExpression: -(1522) at 1", "Insert SimpleName: j(1526) into VariableDeclarationFragment(1528) at 0", "Insert NumberLiteral: 0(1527) into VariableDeclarationFragment(1528) at 1", "Insert SimpleName: matchBitSet(1531) into MethodInvocation(1533) at 0", "Insert SimpleName: length(1532) into MethodInvocation(1533) at 1", "Insert PrefixExpression: !(1541) into IfStatement(1550) at 0", "Move Block(1527) into IfStatement(1550) at 1", "Move ExpressionStatement(1116) into Block(1240) at 0", "Move ExpressionStatement(1187) into Block(1240) at 4", "Insert IfStatement(1236) into Block(1240) at 5", "Move ExpressionStatement(1232) into Block(1240) at 6", "Insert SimpleName: matchBitSet(1518) into MethodInvocation(1520) at 0", "Insert SimpleName: length(1519) into MethodInvocation(1520) at 1", "Insert MethodInvocation(1540) into PrefixExpression: !(1541) at 0", "Insert ExpressionStatement(1547) into Block(1549) at 0", "Insert BreakStatement(1548) into Block(1549) at 1", "Move InfixExpression: ==(1155) into IfStatement(1236) at 0", "Insert Block(1187) into IfStatement(1236) at 1", "Move Block(1225) into IfStatement(1236) at 2", "Insert SimpleName: matchBitSet(1537) into MethodInvocation(1540) at 0", "Insert SimpleName: get(1538) into MethodInvocation(1540) at 1", "Insert SimpleName: j(1539) into MethodInvocation(1540) at 2", "Insert Assignment: =(1546) into ExpressionStatement(1547) at 0", "Insert MethodInvocation(1153) into Assignment: =(1154) at 1", "Move ExpressionStatement(1183) into Block(1187) at 0", "Insert ForStatement(1186) into Block(1187) at 1", "Insert SimpleName: index(1542) into Assignment: =(1546) at 0", "Insert InfixExpression: -(1545) into Assignment: =(1546) at 1", "Insert SimpleName: Math(1149) into MethodInvocation(1153) at 0", "Insert SimpleName: max(1150) into MethodInvocation(1153) at 1", "Insert SimpleName: maxIndex(1151) into MethodInvocation(1153) at 2", "Insert SimpleName: tmpIndex(1152) into MethodInvocation(1153) at 3", "Move VariableDeclarationExpression(1201) into ForStatement(1186) at 0", "Insert InfixExpression: <=(1170) into ForStatement(1186) at 1", "Move PostfixExpression: ++(1206) into ForStatement(1186) at 2", "Insert Block(1185) into ForStatement(1186) at 3", "Move VariableDeclarationExpression(1160) into ForStatement(1234) at 0", "Move InfixExpression: <=(1163) into ForStatement(1234) at 1", "Move PostfixExpression: ++(1165) into ForStatement(1234) at 2", "Insert Block(1233) into ForStatement(1234) at 3", "Insert SimpleName: j(1543) into InfixExpression: -(1545) at 0", "Insert NumberLiteral: 1(1544) into InfixExpression: -(1545) at 1", "Update SimpleName: maxIndex(1189) to j", "Move SimpleName: maxIndex(1189) into InfixExpression: <=(1170) at 0", "Move SimpleName: tmpIndex(1190) into InfixExpression: <=(1170) at 1", "Insert IfStatement(1184) into Block(1185) at 0", "Insert IfStatement(1232) into Block(1233) at 0", "Insert InfixExpression: !=(1177) into IfStatement(1184) at 0", "Move Block(1196) into IfStatement(1184) at 1", "Insert InfixExpression: ||(1208) into IfStatement(1232) at 0", "Insert Block(1214) into IfStatement(1232) at 1", "Insert Block(1231) into IfStatement(1232) at 2", "Insert ArrayAccess(1175) into InfixExpression: !=(1177) at 0", "Insert NullLiteral(1176) into InfixExpression: !=(1177) at 1", "Move InfixExpression: ==(1170) into InfixExpression: ||(1208) at 0", "Insert InfixExpression: ==(1207) into InfixExpression: ||(1208) at 1", "Insert ExpressionStatement(1213) into Block(1214) at 0", "Move IfStatement(1222) into Block(1231) at 0", "Insert SimpleName: parts(1173) into ArrayAccess(1175) at 0", "Insert SimpleName: j(1174) into ArrayAccess(1175) at 1", "Insert MethodInvocation(1181) into ExpressionStatement(1182) at 0", "Move ArrayAccess(1209) into InfixExpression: ==(1207) at 0", "Insert NullLiteral(1206) into InfixExpression: ==(1207) at 1", "Insert MethodInvocation(1212) into ExpressionStatement(1213) at 0", "Insert SimpleName: matchBitSet(1178) into MethodInvocation(1181) at 0", "Insert SimpleName: set(1179) into MethodInvocation(1181) at 1", "Insert SimpleName: j(1180) into MethodInvocation(1181) at 2", "Insert SimpleName: matchBitSet(1209) into MethodInvocation(1212) at 0", "Insert SimpleName: clear(1210) into MethodInvocation(1212) at 1", "Insert SimpleName: j(1211) into MethodInvocation(1212) at 2", "Move SimpleName: equals(1210) into MethodInvocation(1222) at 2", "Insert ArrayAccess(1221) into MethodInvocation(1222) at 2", "Insert MethodInvocation(1227) into ExpressionStatement(1228) at 0", "Insert SimpleName: spInfo(1219) into ArrayAccess(1221) at 0", "Insert SimpleName: j(1220) into ArrayAccess(1221) at 1", "Insert SimpleName: matchBitSet(1224) into MethodInvocation(1227) at 0", "Insert SimpleName: clear(1225) into MethodInvocation(1227) at 1", "Insert SimpleName: j(1226) into MethodInvocation(1227) at 2", "Delete QualifiedName: org.apache.drill.exec.planner.SimplePartitionLocation(75)", "Delete ImportDeclaration(76)", "Delete PrimitiveType: boolean(813)", "Delete SimpleName: isSinglePartition(814)", "Delete BooleanLiteral: true(815)", "Delete VariableDeclarationFragment(816)", "Delete VariableDeclarationStatement(817)", "Delete PrimitiveType: boolean(806)", "Delete SimpleName: checkForSingle(807)", "Delete SimpleName: descriptor(808)", "Delete SimpleName: supportsSinglePartOptimization(809)", "Delete MethodInvocation(810)", "Delete VariableDeclarationFragment(811)", "Delete SimpleName: checkForSingle(1079)", "Delete SimpleName: isSinglePartition(1117)", "Delete SimpleName: tmpIndex(1185)", "Delete SimpleName: isSinglePartition(1192)", "Delete BooleanLiteral: false(1193)", "Delete Assignment: =(1194)", "Delete SimpleName: isSinglePartition(1216)", "Delete BooleanLiteral: false(1217)", "Delete Assignment: =(1218)", "Delete BreakStatement(1220)", "Delete SimpleName: j(1202)", "Delete SimpleName: maxIndex(1203)", "Delete InfixExpression: <=(1204)", "Delete Block(1223)", "Delete SimpleName: isSinglePartition(1171)", "Delete BooleanLiteral: false(1172)", "Delete Assignment: =(1173)", "Delete ExpressionStatement(1174)", "Delete BreakStatement(1175)", "Delete Block(1176)", "Delete IfStatement(1177)", "Delete Block(1178)", "Delete ForStatement(1179)", "Delete Block(1188)", "Delete InfixExpression: !=(1191)", "Delete IfStatement(1226)", "Delete IfStatement(1227)", "Delete Block(1233)", "Delete IfStatement(1234)", "Delete SimpleName: checkForSingle(1488)", "Delete SimpleName: isSinglePartition(1489)"]}}], "commit_stats": [{"total_files": 8, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}