{"application": "google-gson", "csha": "7a7bbf754cfabbcb56d090b982bf4b128e15938d", "files": [{"Gson_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: com.google.gson.stream.JsonReader to ImportDeclaration at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: setLenient to MethodInvocation at 1", "INS SimpleName: jsonReader to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS BooleanLiteral: true to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS VariableDeclarationStatement to Block at 2"]}, {"root": "INS SimpleType: JsonReader to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: JsonReader to VariableDeclarationStatement at 0", "INS SimpleName: JsonReader to SimpleType: JsonReader at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: JsonElement to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV CastExpression to ReturnStatement at 0"]}, {"root": "UPDATE from root to jsonReader", "operations": ["UPD SimpleName: root from root to jsonReader"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: json to ClassInstanceCreation at 1"]}, {"root": "UPDATE from target to root", "operations": ["UPD SimpleName: target from target to root"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: GsonReader to MethodInvocation at 0", "INS SimpleName: parse to MethodInvocation at 1", "INS SimpleName: jsonReader to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from JsonParser to JsonReader", "operations": ["UPD SimpleType: JsonParser from JsonParser to JsonReader", "UPD SimpleName: JsonParser from JsonParser to JsonReader"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: JsonParser to ClassInstanceCreation at 0"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: parse", "DEL MethodInvocation", "DEL SimpleName: json", "DEL ClassInstanceCreation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleType: T", "DEL SimpleName: T"]}, {"root": "DEL SimpleName: target", "operations": ["DEL SimpleName: target"]}]}}, {"Gson_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(1814) at 1", "Insert QualifiedName: com.google.gson.stream.JsonReader(2) into ImportDeclaration(3) at 0", "Insert ExpressionStatement(1535) into Block(1553) at 1", "Insert VariableDeclarationStatement(1544) into Block(1553) at 2", "Insert SimpleType: JsonReader(1523) into VariableDeclarationStatement(1530) at 0", "Insert MethodInvocation(1534) into ExpressionStatement(1535) at 0", "Move SimpleType: JsonElement(1521) into VariableDeclarationStatement(1544) at 0", "Move VariableDeclarationFragment(1541) into VariableDeclarationStatement(1544) at 1", "Move CastExpression(1540) into ReturnStatement(1552) at 0", "Insert SimpleName: JsonReader(1522) into SimpleType: JsonReader(1523) at 0", "Update SimpleName: root(1522) to jsonReader", "Insert ClassInstanceCreation(1528) into VariableDeclarationFragment(1529) at 1", "Insert SimpleName: jsonReader(1531) into MethodInvocation(1534) at 0", "Insert SimpleName: setLenient(1532) into MethodInvocation(1534) at 1", "Insert BooleanLiteral: true(1533) into MethodInvocation(1534) at 2", "Update SimpleName: target(1533) to root", "Insert MethodInvocation(1542) into VariableDeclarationFragment(1543) at 1", "Update SimpleType: JsonParser(1524) to JsonReader", "Move SimpleType: JsonParser(1524) into ClassInstanceCreation(1528) at 0", "Insert SimpleName: json(1527) into ClassInstanceCreation(1528) at 1", "Insert SimpleName: GsonReader(1539) into MethodInvocation(1542) at 0", "Insert SimpleName: parse(1540) into MethodInvocation(1542) at 1", "Insert SimpleName: jsonReader(1541) into MethodInvocation(1542) at 2", "Update SimpleName: JsonParser(1523) to JsonReader", "Delete ClassInstanceCreation(1525)", "Delete SimpleName: parse(1526)", "Delete SimpleName: json(1527)", "Delete MethodInvocation(1528)", "Delete SimpleName: T(1531)", "Delete SimpleType: T(1532)", "Delete VariableDeclarationStatement(1542)", "Delete SimpleName: target(1543)"]}}, {"JsonParser_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: com.google.gson.stream.JsonReader to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS BooleanLiteral: true to MethodInvocation at 2", "INS SimpleName: setLenient to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: jsonReader to MethodInvocation at 0"]}, {"root": "INS ReturnStatement to Block at 2", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 2", "INS SimpleName: jsonReader to MethodInvocation at 2"]}, {"root": "UPDATE from JsonParserJavacc to JsonReader", "operations": ["UPD SimpleName: JsonParserJavacc from JsonParserJavacc to JsonReader", "UPD SimpleType: JsonParserJavacc from JsonParserJavacc to JsonReader", "UPD SimpleName: JsonParserJavacc from JsonParserJavacc to JsonReader", "UPD SimpleType: JsonParserJavacc from JsonParserJavacc to JsonReader"]}, {"root": "UPDATE from parser to jsonReader", "operations": ["UPD SimpleName: parser from parser to jsonReader"]}, {"root": "UPDATE from parser to GsonReader", "operations": ["UPD SimpleName: parser from parser to GsonReader"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: parse to MethodInvocation at 1", "MOV SimpleName: parser to MethodInvocation at 0"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: JsonElement", "DEL MethodInvocation", "DEL SimpleType: JsonElement", "DEL SimpleName: element", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: element"]}, {"root": "DEL CatchClause", "operations": ["DEL SingleVariableDeclaration", "DEL ThrowStatement", "DEL InfixExpression: +", "DEL SimpleName: e", "DEL ClassInstanceCreation", "DEL StringLiteral: \"Failed parsing JSON source: \"", "DEL SimpleName: e", "DEL Block", "DEL StringLiteral: \" to Json\"", "DEL SimpleName: json", "DEL CatchClause", "DEL SimpleType: JsonParseException", "DEL SimpleName: JsonParseException", "DEL SimpleType: TokenMgrError", "DEL SimpleName: TokenMgrError"]}, {"root": "DEL CatchClause", "operations": ["DEL StringLiteral: \" to Json\"", "DEL ThrowStatement", "DEL CatchClause", "DEL SingleVariableDeclaration", "DEL SimpleName: JsonParseException", "DEL SimpleType: ParseException", "DEL SimpleName: e", "DEL SimpleName: e", "DEL SimpleName: json", "DEL ClassInstanceCreation", "DEL SimpleType: JsonParseException", "DEL InfixExpression: +", "DEL StringLiteral: \"Failed parsing JSON source: \"", "DEL SimpleName: ParseException", "DEL Block"]}]}}, {"JsonParser_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(161) at 1", "Insert QualifiedName: com.google.gson.stream.JsonReader(2) into ImportDeclaration(3) at 0", "Insert ExpressionStatement(99) into Block(105) at 1", "Insert ReturnStatement(104) into Block(105) at 2", "Update SimpleType: JsonParserJavacc(85) to JsonReader", "Insert MethodInvocation(98) into ExpressionStatement(99) at 0", "Insert MethodInvocation(103) into ReturnStatement(104) at 0", "Update SimpleName: JsonParserJavacc(84) to JsonReader", "Update SimpleName: parser(86) to jsonReader", "Insert SimpleName: jsonReader(95) into MethodInvocation(98) at 0", "Insert SimpleName: setLenient(96) into MethodInvocation(98) at 1", "Insert BooleanLiteral: true(97) into MethodInvocation(98) at 2", "Update SimpleName: parser(96) to GsonReader", "Move SimpleName: parser(96) into MethodInvocation(103) at 0", "Move SimpleName: parse(97) into MethodInvocation(103) at 1", "Insert SimpleName: jsonReader(102) into MethodInvocation(103) at 2", "Update SimpleType: JsonParserJavacc(88) to JsonReader", "Update SimpleName: JsonParserJavacc(87) to JsonReader", "Delete SimpleName: JsonElement(93)", "Delete SimpleType: JsonElement(94)", "Delete SimpleName: element(95)", "Delete MethodInvocation(98)", "Delete VariableDeclarationFragment(99)", "Delete VariableDeclarationStatement(100)", "Delete SimpleName: element(101)", "Delete ReturnStatement(102)", "Delete SimpleName: TokenMgrError(104)", "Delete SimpleType: TokenMgrError(105)", "Delete SimpleName: e(106)", "Delete SingleVariableDeclaration(107)", "Delete SimpleName: JsonParseException(108)", "Delete SimpleType: JsonParseException(109)", "Delete StringLiteral: \"Failed parsing JSON source: \"(110)", "Delete SimpleName: json(111)", "Delete StringLiteral: \" to Json\"(112)", "Delete InfixExpression: +(113)", "Delete SimpleName: e(114)", "Delete ClassInstanceCreation(115)", "Delete ThrowStatement(116)", "Delete Block(117)", "Delete CatchClause(118)", "Delete SimpleName: ParseException(119)", "Delete SimpleType: ParseException(120)", "Delete SimpleName: e(121)", "Delete SingleVariableDeclaration(122)", "Delete SimpleName: JsonParseException(123)", "Delete SimpleType: JsonParseException(124)", "Delete StringLiteral: \"Failed parsing JSON source: \"(125)", "Delete SimpleName: json(126)", "Delete StringLiteral: \" to Json\"(127)", "Delete InfixExpression: +(128)", "Delete SimpleName: e(129)", "Delete ClassInstanceCreation(130)", "Delete ThrowStatement(131)", "Delete Block(132)", "Delete CatchClause(133)"]}}, {"JsonPrimitive_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS InfixExpression: >= to InfixExpression: && at 0", "INS ReturnStatement to Block at 0", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS SimpleName: NumberFormatException to SimpleType: NumberFormatException at 0", "INS CastExpression to ReturnStatement at 0", "INS SimpleName: Number to SimpleType: Number at 0", "INS SimpleName: BigDecimal to SimpleType: BigDecimal at 0", "INS Block to MethodDeclaration at 4", "INS MethodInvocation to ReturnStatement at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS CatchClause to TryStatement at 1", "INS Block to IfStatement at 1", "INS Modifier: static to MethodDeclaration at 0", "INS Block to IfStatement at 2", "INS SimpleName: Double to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS Block to TryStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS CatchClause to TryStatement at 1", "INS InfixExpression: <= to InfixExpression: && at 1", "INS SimpleName: String to SimpleType: String at 0", "INS Block to CatchClause at 1", "INS SimpleName: value to SingleVariableDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: && to IfStatement at 0", "INS QualifiedName: Integer.MIN_VALUE to InfixExpression: >= at 1", "INS Block to TryStatement at 0", "INS TryStatement to Block at 1", "INS SimpleType: NumberFormatException to SingleVariableDeclaration at 0", "INS SimpleName: ignored to SingleVariableDeclaration at 1", "INS IfStatement to Block at 1", "INS SimpleName: longValue to ReturnStatement at 0", "INS SimpleName: ignored to SingleVariableDeclaration at 1", "INS SimpleName: value to ClassInstanceCreation at 1", "INS SimpleName: parseLong to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: longValue to InfixExpression: <= at 0", "INS SimpleType: NumberFormatException to SingleVariableDeclaration at 0", "INS SimpleName: parseDouble to MethodInvocation at 1", "INS SimpleName: longValue to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleType: BigDecimal to ClassInstanceCreation at 0", "INS SimpleName: NumberFormatException to SimpleType: NumberFormatException at 0", "INS SimpleName: value to MethodInvocation at 2", "INS SimpleName: Long to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS PrimitiveType: int to CastExpression at 0", "INS SimpleName: longValue to CastExpression at 1", "INS Block to CatchClause at 1", "INS SimpleType: Number to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS QualifiedName: Integer.MAX_VALUE to InfixExpression: <= at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: longValue to InfixExpression: >= at 0", "INS SimpleName: value to MethodInvocation at 2", "INS TryStatement to Block at 0", "INS SimpleName: stringToNumber to MethodDeclaration at 2", "INS ReturnStatement to Block at 0"]}, {"root": "INS ConditionalExpression to ReturnStatement at 0", "operations": ["INS CastExpression to MethodInvocation at 1", "INS SimpleName: stringToNumber to MethodInvocation at 0", "INS SimpleType: String to CastExpression at 0", "INS InstanceofExpression to ConditionalExpression at 0", "INS SimpleType: String to InstanceofExpression at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: String to SimpleType: String at 0", "INS ConditionalExpression to ReturnStatement at 0", "INS MethodInvocation to ConditionalExpression at 1", "INS SimpleName: value to CastExpression at 1", "INS SimpleName: value to InstanceofExpression at 0"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV CastExpression to ConditionalExpression at 2"]}]}}, {"JsonPrimitive_diff": {"operations": ["Insert MethodDeclaration(433) into TypeDeclaration: class(1176) at 20", "Insert Modifier: static(374) into MethodDeclaration(433) at 0", "Insert SimpleType: Number(376) into MethodDeclaration(433) at 1", "Insert SimpleName: stringToNumber(377) into MethodDeclaration(433) at 2", "Insert SingleVariableDeclaration(381) into MethodDeclaration(433) at 3", "Insert Block(432) into MethodDeclaration(433) at 4", "Insert SimpleName: Number(375) into SimpleType: Number(376) at 0", "Insert SimpleType: String(379) into SingleVariableDeclaration(381) at 0", "Insert SimpleName: value(380) into SingleVariableDeclaration(381) at 1", "Insert TryStatement(413) into Block(432) at 0", "Insert TryStatement(431) into Block(432) at 1", "Insert ConditionalExpression(370) into ReturnStatement(371) at 0", "Insert SimpleName: String(378) into SimpleType: String(379) at 0", "Insert Block(406) into TryStatement(413) at 0", "Insert CatchClause(412) into TryStatement(413) at 1", "Insert Block(419) into TryStatement(431) at 0", "Insert CatchClause(430) into TryStatement(431) at 1", "Insert InstanceofExpression(359) into ConditionalExpression(370) at 0", "Insert MethodInvocation(365) into ConditionalExpression(370) at 1", "Move CastExpression(359) into ConditionalExpression(370) at 2", "Insert VariableDeclarationStatement(389) into Block(406) at 0", "Insert IfStatement(405) into Block(406) at 1", "Insert SingleVariableDeclaration(410) into CatchClause(412) at 0", "Insert Block(411) into CatchClause(412) at 1", "Insert ReturnStatement(418) into Block(419) at 0", "Insert SingleVariableDeclaration(423) into CatchClause(430) at 0", "Insert Block(429) into CatchClause(430) at 1", "Insert SimpleName: value(356) into InstanceofExpression(359) at 0", "Insert SimpleType: String(358) into InstanceofExpression(359) at 1", "Insert SimpleName: stringToNumber(360) into MethodInvocation(365) at 0", "Insert CastExpression(364) into MethodInvocation(365) at 1", "Insert PrimitiveType: long(382) into VariableDeclarationStatement(389) at 0", "Insert VariableDeclarationFragment(388) into VariableDeclarationStatement(389) at 1", "Insert InfixExpression: &&(396) into IfStatement(405) at 0", "Insert Block(401) into IfStatement(405) at 1", "Insert Block(404) into IfStatement(405) at 2", "Insert SimpleType: NumberFormatException(408) into SingleVariableDeclaration(410) at 0", "Insert SimpleName: ignored(409) into SingleVariableDeclaration(410) at 1", "Insert ClassInstanceCreation(417) into ReturnStatement(418) at 0", "Insert SimpleType: NumberFormatException(421) into SingleVariableDeclaration(423) at 0", "Insert SimpleName: ignored(422) into SingleVariableDeclaration(423) at 1", "Insert ReturnStatement(428) into Block(429) at 0", "Insert SimpleName: String(357) into SimpleType: String(358) at 0", "Insert SimpleType: String(362) into CastExpression(364) at 0", "Insert SimpleName: value(363) into CastExpression(364) at 1", "Insert SimpleName: longValue(383) into VariableDeclarationFragment(388) at 0", "Insert MethodInvocation(387) into VariableDeclarationFragment(388) at 1", "Insert InfixExpression: >=(392) into InfixExpression: &&(396) at 0", "Insert InfixExpression: <=(395) into InfixExpression: &&(396) at 1", "Insert ReturnStatement(400) into Block(401) at 0", "Insert ReturnStatement(403) into Block(404) at 0", "Insert SimpleName: NumberFormatException(407) into SimpleType: NumberFormatException(408) at 0", "Insert SimpleType: BigDecimal(415) into ClassInstanceCreation(417) at 0", "Insert SimpleName: value(416) into ClassInstanceCreation(417) at 1", "Insert SimpleName: NumberFormatException(420) into SimpleType: NumberFormatException(421) at 0", "Insert MethodInvocation(427) into ReturnStatement(428) at 0", "Insert SimpleName: String(361) into SimpleType: String(362) at 0", "Insert SimpleName: Long(384) into MethodInvocation(387) at 0", "Insert SimpleName: parseLong(385) into MethodInvocation(387) at 1", "Insert SimpleName: value(386) into MethodInvocation(387) at 2", "Insert SimpleName: longValue(390) into InfixExpression: >=(392) at 0", "Insert QualifiedName: Integer.MIN_VALUE(391) into InfixExpression: >=(392) at 1", "Insert SimpleName: longValue(393) into InfixExpression: <=(395) at 0", "Insert QualifiedName: Integer.MAX_VALUE(394) into InfixExpression: <=(395) at 1", "Insert CastExpression(399) into ReturnStatement(400) at 0", "Insert SimpleName: longValue(402) into ReturnStatement(403) at 0", "Insert SimpleName: BigDecimal(414) into SimpleType: BigDecimal(415) at 0", "Insert SimpleName: Double(424) into MethodInvocation(427) at 0", "Insert SimpleName: parseDouble(425) into MethodInvocation(427) at 1", "Insert SimpleName: value(426) into MethodInvocation(427) at 2", "Insert PrimitiveType: int(397) into CastExpression(399) at 0", "Insert SimpleName: longValue(398) into CastExpression(399) at 1"]}}, {"JsonStreamParser_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: com.google.gson.stream.JsonReader to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: com.google.gson.stream.JsonToken to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS QualifiedName: java.io.IOException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 4"]}, {"root": "UPDATE from JsonParserJavacc to JsonReader", "operations": ["UPD SimpleType: JsonParserJavacc from JsonParserJavacc to JsonReader", "UPD SimpleName: JsonParserJavacc from JsonParserJavacc to JsonReader", "UPD SimpleType: JsonParserJavacc from JsonParserJavacc to JsonReader", "UPD SimpleName: JsonParserJavacc from JsonParserJavacc to JsonReader"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS Block to MethodDeclaration at 5"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV TryStatement to Block at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS BooleanLiteral: true to MethodInvocation at 2", "INS SimpleName: setLenient to MethodInvocation at 1", "INS SimpleName: parser to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS SimpleName: hasNext to MethodInvocation at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "INS ThrowStatement to Block at 0", "operations": ["INS SimpleType: NoSuchElementException to ClassInstanceCreation at 0", "INS ThrowStatement to Block at 0", "INS ClassInstanceCreation to ThrowStatement at 0"]}, {"root": "INS SimpleName: GsonReader to MethodInvocation at 0", "operations": ["INS SimpleName: GsonReader to MethodInvocation at 0"]}, {"root": "UPDATE from parser to parse", "operations": ["UPD SimpleName: parser from parser to parse"]}, {"root": "UPDATE from parse to parser", "operations": ["UPD SimpleName: parse from parse to parser"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS SimpleName: parser to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS InfixExpression: != to ReturnStatement at 0", "INS QualifiedName: JsonToken.END_DOCUMENT to InfixExpression: != at 1", "INS ReturnStatement to Block at 0"]}, {"root": "UPDATE from JsonElement to NoSuchElementException", "operations": ["UPD SimpleName: JsonElement from JsonElement to NoSuchElementException"]}, {"root": "MOVE from SimpleType: NoSuchElementException", "operations": ["MOV SimpleName: JsonElement to SimpleType: NoSuchElementException at 0"]}, {"root": "UPDATE from NoSuchElementException to IOException", "operations": ["UPD SimpleType: NoSuchElementException from NoSuchElementException to IOException", "UPD SimpleName: NoSuchElementException from NoSuchElementException to IOException"]}, {"root": "INS ThrowStatement to Block at 0", "operations": ["INS SimpleName: e to ClassInstanceCreation at 1", "INS ThrowStatement to Block at 0", "INS ClassInstanceCreation to ThrowStatement at 0"]}, {"root": "UPDATE from next to peek", "operations": ["UPD SimpleName: next from next to peek"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: next to MethodInvocation at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: JsonParseException to ClassInstanceCreation at 0"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL SimpleName: JsonElement", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL SimpleType: JsonElement", "DEL SimpleName: nextElement"]}, {"root": "DEL Assignment: =", "operations": ["DEL NullLiteral", "DEL SimpleName: nextElement", "DEL Assignment: ="]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL InfixExpression: !=", "DEL SimpleName: nextElement", "DEL NullLiteral"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: nextElement", "DEL SimpleName: returnValue", "DEL SimpleType: JsonElement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL NullLiteral", "DEL SimpleName: nextElement", "DEL Assignment: ="]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: returnValue", "DEL ReturnStatement"]}, {"root": "DEL CatchClause", "operations": ["DEL SimpleType: TokenMgrError", "DEL CatchClause", "DEL SimpleName: JsonParseException", "DEL SimpleName: e", "DEL ThrowStatement", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleType: JsonParseException", "DEL StringLiteral: \"Failed parsing JSON source to Json\"", "DEL SimpleName: e", "DEL SimpleName: TokenMgrError", "DEL ClassInstanceCreation"]}, {"root": "DEL CatchClause", "operations": ["DEL StringLiteral: \"Failed parsing JSON source to Json\"", "DEL SimpleName: e", "DEL CatchClause", "DEL ClassInstanceCreation", "DEL SimpleName: ParseException", "DEL SimpleName: e", "DEL Block", "DEL SimpleType: ParseException", "DEL SingleVariableDeclaration", "DEL ThrowStatement"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL Block", "DEL SynchronizedStatement", "DEL SimpleName: lock"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: nextElement"]}, {"root": "DEL ReturnStatement", "operations": ["DEL BooleanLiteral: true", "DEL ReturnStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL NullLiteral", "DEL ExpressionStatement", "DEL SimpleName: nextElement", "DEL Assignment: ="]}, {"root": "DEL ReturnStatement", "operations": ["DEL BooleanLiteral: false", "DEL ReturnStatement"]}]}}, {"JsonStreamParser_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(260) at 1", "Insert ImportDeclaration(5) into CompilationUnit(260) at 2", "Insert ImportDeclaration(9) into CompilationUnit(260) at 4", "Insert QualifiedName: com.google.gson.stream.JsonReader(2) into ImportDeclaration(3) at 0", "Insert QualifiedName: com.google.gson.stream.JsonToken(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: java.io.IOException(8) into ImportDeclaration(9) at 0", "Update SimpleType: JsonParserJavacc(48) to JsonReader", "Move ExpressionStatement(108) into Block(114) at 3", "Insert Block(199) into MethodDeclaration(200) at 5", "Update SimpleName: JsonParserJavacc(47) to JsonReader", "Move IfStatement(154) into Block(199) at 0", "Move TryStatement(231) into Block(199) at 1", "Insert MethodInvocation(106) into ExpressionStatement(107) at 0", "Insert PrefixExpression: !(140) into IfStatement(146) at 0", "Insert SimpleName: parser(103) into MethodInvocation(106) at 0", "Insert SimpleName: setLenient(104) into MethodInvocation(106) at 1", "Insert BooleanLiteral: true(105) into MethodInvocation(106) at 2", "Insert MethodInvocation(139) into PrefixExpression: !(140) at 0", "Insert ThrowStatement(144) into Block(145) at 0", "Update SimpleType: JsonParserJavacc(98) to JsonReader", "Insert SimpleName: hasNext(138) into MethodInvocation(139) at 0", "Insert ClassInstanceCreation(143) into ThrowStatement(144) at 0", "Update SimpleName: JsonParserJavacc(97) to JsonReader", "Insert SimpleType: NoSuchElementException(142) into ClassInstanceCreation(143) at 0", "Insert SimpleName: GsonReader(147) into MethodInvocation(150) at 0", "Update SimpleName: parser(157) to parse", "Update SimpleName: parse(158) to parser", "Insert ReturnStatement(223) into Block(224) at 0", "Update SimpleName: JsonElement(141) to NoSuchElementException", "Move SimpleName: JsonElement(141) into SimpleType: NoSuchElementException(142) at 0", "Insert InfixExpression: !=(222) into ReturnStatement(223) at 0", "Update SimpleType: NoSuchElementException(260) to IOException", "Insert ThrowStatement(233) into Block(234) at 0", "Insert MethodInvocation(220) into InfixExpression: !=(222) at 0", "Insert QualifiedName: JsonToken.END_DOCUMENT(221) into InfixExpression: !=(222) at 1", "Update SimpleName: NoSuchElementException(259) to IOException", "Insert ClassInstanceCreation(232) into ThrowStatement(233) at 0", "Insert SimpleName: parser(218) into MethodInvocation(220) at 0", "Update SimpleName: next(252) to peek", "Move SimpleName: next(252) into MethodInvocation(220) at 1", "Move SimpleType: JsonParseException(179) into ClassInstanceCreation(232) at 0", "Insert SimpleName: e(231) into ClassInstanceCreation(232) at 1", "Delete Modifier: private(59)", "Delete SimpleName: JsonElement(60)", "Delete SimpleType: JsonElement(61)", "Delete SimpleName: nextElement(62)", "Delete VariableDeclarationFragment(63)", "Delete FieldDeclaration(64)", "Delete SimpleName: nextElement(109)", "Delete NullLiteral(110)", "Delete Assignment: =(111)", "Delete SimpleName: nextElement(138)", "Delete NullLiteral(139)", "Delete InfixExpression: !=(140)", "Delete SimpleType: JsonElement(142)", "Delete SimpleName: returnValue(143)", "Delete SimpleName: nextElement(144)", "Delete VariableDeclarationFragment(145)", "Delete VariableDeclarationStatement(146)", "Delete SimpleName: nextElement(147)", "Delete NullLiteral(148)", "Delete Assignment: =(149)", "Delete ExpressionStatement(150)", "Delete SimpleName: returnValue(151)", "Delete ReturnStatement(152)", "Delete SimpleName: TokenMgrError(162)", "Delete SimpleType: TokenMgrError(163)", "Delete SimpleName: e(164)", "Delete SingleVariableDeclaration(165)", "Delete SimpleName: JsonParseException(166)", "Delete SimpleType: JsonParseException(167)", "Delete StringLiteral: \"Failed parsing JSON source to Json\"(168)", "Delete SimpleName: e(169)", "Delete ClassInstanceCreation(170)", "Delete ThrowStatement(171)", "Delete Block(172)", "Delete CatchClause(173)", "Delete SimpleName: ParseException(174)", "Delete SimpleType: ParseException(175)", "Delete SimpleName: e(176)", "Delete SingleVariableDeclaration(177)", "Delete StringLiteral: \"Failed parsing JSON source to Json\"(180)", "Delete SimpleName: e(181)", "Delete ClassInstanceCreation(182)", "Delete ThrowStatement(183)", "Delete Block(184)", "Delete CatchClause(185)", "Delete SimpleName: lock(137)", "Delete Block(155)", "Delete SynchronizedStatement(156)", "Delete Block(232)", "Delete SimpleName: nextElement(251)", "Delete MethodInvocation(253)", "Delete Assignment: =(254)", "Delete ExpressionStatement(255)", "Delete BooleanLiteral: true(256)", "Delete ReturnStatement(257)", "Delete SimpleName: nextElement(263)", "Delete NullLiteral(264)", "Delete Assignment: =(265)", "Delete ExpressionStatement(266)", "Delete BooleanLiteral: false(267)", "Delete ReturnStatement(268)"]}}], "commit_stats": [{"total_files": 6, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}