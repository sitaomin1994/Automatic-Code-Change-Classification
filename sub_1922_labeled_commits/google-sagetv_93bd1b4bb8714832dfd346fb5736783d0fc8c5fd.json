{"application": "google-sagetv", "csha": "93bd1b4bb8714832dfd346fb5736783d0fc8c5fd", "files": [{"Agent_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS ImportDeclaration to CompilationUnit at 9", "INS QualifiedName: java.util.Collections to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS ImportDeclaration to CompilationUnit at 12", "INS QualifiedName: java.util.IdentityHashMap to ImportDeclaration at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 91"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 66", "operations": ["INS PrimitiveType: int to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 66", "INS VariableDeclarationFragment to FieldDeclaration at 1", "INS SimpleName: lastRealTotalCount to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 67", "operations": ["INS PrimitiveType: int to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 67", "INS SimpleName: lastTotalCount to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 68", "operations": ["INS PrimitiveType: float to FieldDeclaration at 0", "INS SimpleName: lastWatchCount to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 68"]}, {"root": "UPDATE from boolean to void", "operations": ["UPD PrimitiveType: boolean from boolean to void"]}, {"root": "UPDATE from add to addHash", "operations": ["UPD SimpleName: add from add to addHash", "UPD SimpleName: add from add to addHash", "UPD SimpleName: add from add to addHash", "UPD SimpleName: add from add to addHash", "UPD SimpleName: add from add to addHash", "UPD SimpleName: searchedHashes from searchedHashes to addHash", "UPD SimpleName: hasSpecificCriteria from hasSpecificCriteria to addHash", "UPD SimpleName: add from add to addHash", "UPD SimpleName: add from add to addHash", "UPD SimpleName: searchedHashes from searchedHashes to addHash"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: list to SingleVariableDeclaration at 1", "INS SimpleType: Integer to ParameterizedType: List<Integer> at 1", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS ParameterizedType: List<Integer> to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS ParameterizedType: List<Integer> to MethodDeclaration at 1", "operations": ["INS ParameterizedType: List<Integer> to MethodDeclaration at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 19", "operations": ["INS SimpleName: weakAgentLength to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 19", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS IfStatement to Block at 20", "operations": ["INS InfixExpression: == to IfStatement at 0", "INS SimpleName: weakAgents to Assignment: = at 0", "INS IfStatement to Block at 20", "INS ExpressionStatement to Block at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS Block to IfStatement at 1", "INS SimpleName: weakAgentLength to InfixExpression: == at 0", "INS Assignment: = to ExpressionStatement at 0", "INS QualifiedName: Pooler.EMPTY_INT_ARRAY to Assignment: = at 1", "INS Block to IfStatement at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS SimpleName: hashesSize to InfixExpression: == at 0", "INS SimpleName: fullCheck to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: == to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 3"]}, {"root": "INS VariableDeclarationStatement to Block at 10", "operations": ["INS SimpleName: channel to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 10", "INS SimpleType: Channel to VariableDeclarationStatement at 0", "INS SimpleName: Channel to SimpleType: Channel at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 6", "operations": ["INS SimpleType: Integer to ParameterizedType: List<Integer> at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ParameterizedType: List<Integer> to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS VariableDeclarationStatement to Block at 6", "INS SimpleName: getHashes to MethodInvocation at 0", "INS SimpleName: hashes to VariableDeclarationFragment at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 7", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS QualifiedName: cache.useMaps to PrefixExpression: ! at 0", "INS SimpleName: hashes to MethodInvocation at 0", "INS InfixExpression: == to InfixExpression: || at 0", "INS PrefixExpression: ! to InfixExpression: || at 1", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS VariableDeclarationStatement to Block at 7", "INS InfixExpression: || to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: size to MethodInvocation at 1"]}, {"root": "INS IfStatement to Block at 13", "operations": ["INS ExpressionStatement to IfStatement at 1", "INS SimpleName: unoptimized to IfStatement at 0", "INS ExpressionStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: currWaste to VariableDeclarationFragment at 0", "INS SimpleName: i to ArrayAccess at 1", "INS SimpleName: i to InfixExpression: % at 0", "INS IfStatement to Block at 1", "INS Block to TryStatement at 0", "INS SimpleName: wastedsLength to VariableDeclarationFragment at 0", "INS SimpleName: followsTrend to MethodInvocation at 0", "INS SimpleName: numWatchedAirs to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS QualifiedName: wasteds.length to VariableDeclarationFragment at 1", "INS IfStatement to Block at 1", "INS SimpleName: testW to VariableDeclarationFragment at 0", "INS InfixExpression: != to IfStatement at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleType: Wasted to SingleVariableDeclaration at 0", "INS InfixExpression: < to ForStatement at 1", "INS ArrayAccess to MethodInvocation at 2", "INS InfixExpression: && to IfStatement at 0", "INS EnhancedForStatement to Block at 2", "INS IfStatement to Block at 0", "INS InfixExpression: == to IfStatement at 0", "INS Block to IfStatement at 1", "INS QualifiedName: wasteds.length to InfixExpression: + at 1", "INS ParameterizedType: IdentityHashMap<Wasted,Boolean> to ClassInstanceCreation at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: testW to MethodInvocation at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS IfStatement to Block at 0", "INS ExpressionStatement to IfStatement at 1", "INS InfixExpression: == to IfStatement at 0", "INS ExpressionStatement to IfStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: add to MethodInvocation at 1", "INS QualifiedName: cache.airWorkCache to MethodInvocation at 0", "INS SimpleName: matchedWastedAirs to Assignment: = at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: i to InfixExpression: < at 0", "INS SimpleName: oneWastedLength to VariableDeclarationFragment at 0", "INS InfixExpression: != to IfStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 2", "INS VariableDeclarationStatement to Block at 0", "INS QualifiedName: wasteds.length to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: i to ArrayAccess at 1", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS QualifiedName: currWaste.manual to IfStatement at 0", "INS SimpleName: Collections to MethodInvocation at 0", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: matchedWastedAirs to MethodInvocation at 0", "INS IfStatement to Block at 3", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: IdentityHashMap to SimpleType: IdentityHashMap at 0", "INS SimpleName: hashes to EnhancedForStatement at 1", "INS Block to IfStatement at 1", "INS ParameterizedType: Set<Wasted> to VariableDeclarationStatement at 0", "INS PostfixExpression: ++ to ForStatement at 2", "INS SimpleName: currWaste to SingleVariableDeclaration at 1", "INS SimpleName: numManualWaste to PostfixExpression: ++ at 0", "INS InfixExpression: < to IfStatement at 0", "INS SimpleName: getAiring to MethodInvocation at 1", "INS SimpleName: wasteds to ArrayAccess at 0", "INS NumberLiteral: 0 to InfixExpression: < at 1", "INS ContinueStatement to IfStatement at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: oneWastedLength to InfixExpression: < at 1", "INS SimpleName: airingsLength to InfixExpression: < at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: wastedsLength to InfixExpression: < at 1", "INS SimpleName: binarySearch to MethodInvocation at 1", "INS SimpleName: oneWasted to VariableDeclarationFragment at 0", "INS SimpleType: IdentityHashMap to ParameterizedType: IdentityHashMap<Wasted,Boolean> at 0", "INS Block to ForStatement at 3", "INS TryStatement to IfStatement at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to InfixExpression: < at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: Wasted to SimpleType: Wasted at 0", "INS ParenthesizedExpression to InfixExpression: == at 0", "INS SimpleName: currWaste to MethodInvocation at 0", "INS SimpleName: testW to MethodInvocation at 1", "INS NumberLiteral: 0 to InfixExpression: < at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS IfStatement to Block at 2", "INS IfStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS QualifiedName: cache.airWorkCache to MethodInvocation at 0", "INS ArrayAccess to VariableDeclarationFragment at 1", "INS IfStatement to Block at 1", "INS SimpleName: testW to InfixExpression: == at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to ForStatement at 3", "INS Block to IfStatement at 2", "INS Block to IfStatement at 1", "INS SimpleName: testW to MethodInvocation at 1", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS ExpressionStatement to Block at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS NullLiteral to InfixExpression: == at 1", "INS Dimension to ArrayType: Wasted[] at 1", "INS ExpressionStatement to IfStatement at 1", "INS ForStatement to Block at 1", "INS ParenthesizedExpression to InfixExpression: == at 0", "INS QualifiedName: cache.airWorkCache to MethodInvocation at 0", "INS SimpleName: oneWasted to ArrayAccess at 0", "INS QualifiedName: currWaste.manual to IfStatement at 0", "INS Block to EnhancedForStatement at 2", "INS InfixExpression: == to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: Wasted to SimpleType: Wasted at 0", "INS SimpleName: currWaste to MethodInvocation at 0", "INS InfixExpression: == to InfixExpression: && at 1", "INS SimpleName: matchedWastedAirs to InfixExpression: != at 0", "INS SimpleType: Exception to SingleVariableDeclaration at 0", "INS QualifiedName: cache.airWorkCache to MethodInvocation at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleType: Boolean to ParameterizedType: IdentityHashMap<Wasted,Boolean> at 2", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: Wasted to SimpleType: Wasted at 0", "INS InfixExpression: < to IfStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS IfStatement to IfStatement at 2", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS InfixExpression: % to ParenthesizedExpression at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: oneWasted.length to InfixExpression: + at 0", "INS ExpressionStatement to Block at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS PostfixExpression: ++ to ExpressionStatement at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS MethodInvocation to InfixExpression: < at 0", "INS InfixExpression: == to InfixExpression: && at 1", "INS PostfixExpression: ++ to ForStatement at 2", "INS SimpleName: airingsLength to VariableDeclarationFragment at 0", "INS PostfixExpression: ++ to ExpressionStatement at 0", "INS SimpleName: i to InfixExpression: < at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS Block to ForStatement at 3", "INS SimpleName: wasteds to Assignment: = at 1", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS SimpleType: Wasted to VariableDeclarationStatement at 0", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS VariableDeclarationStatement to Block at 0", "INS ArrayType: Wasted[] to VariableDeclarationStatement at 0", "INS InfixExpression: % to ParenthesizedExpression at 0", "INS Dimension to ArrayType: Wasted[] at 1", "INS SimpleName: matchedWastedAirs to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS QualifiedName: oneWasted.length to VariableDeclarationFragment at 1", "INS ContinueStatement to IfStatement at 1", "INS SimpleName: CPU_CONTROL_MOD_COUNT to InfixExpression: % at 1", "INS SimpleName: testW to VariableDeclarationFragment at 0", "INS SimpleType: Wasted to ParameterizedType: IdentityHashMap<Wasted,Boolean> at 1", "INS SimpleType: Set to ParameterizedType: Set<Wasted> at 0", "INS SimpleName: binarySearch to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: controlCPUUsage to InfixExpression: && at 0", "INS SimpleName: newSetFromMap to MethodInvocation at 1", "INS IfStatement to Block at 1", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: ensureAddCapacity to MethodInvocation at 1", "INS SimpleName: testW to MethodInvocation at 2", "INS SimpleType: Wasted to ParameterizedType: Set<Wasted> at 1", "INS SimpleName: controlCPUUsage to InfixExpression: && at 0", "INS EnhancedForStatement to Block at 1", "INS SimpleName: oneWasted to InfixExpression: != at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: testW to MethodInvocation at 3", "INS IfStatement to Block at 3", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS Block to CatchClause at 1", "INS IfStatement to IfStatement at 2", "INS MethodInvocation to IfStatement at 0", "INS IfStatement to Block at 4", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: numWatchedAirs to MethodInvocation at 2", "INS SimpleName: sleep to MethodInvocation at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: ensureAddCapacity to MethodInvocation at 1", "INS PostfixExpression: ++ to InfixExpression: % at 0", "INS ArrayAccess to MethodInvocation at 2", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleName: getAiring to MethodInvocation at 1", "INS CatchClause to TryStatement at 1", "INS Block to IfStatement at 1", "INS QualifiedName: wasteds.length to MethodInvocation at 2", "INS QualifiedName: oneWasted.length to VariableDeclarationFragment at 1", "INS IfStatement to Block at 0", "INS SimpleName: hash to MethodInvocation at 2", "INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS Block to IfStatement at 1", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleName: Thread to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 2", "INS SimpleName: testW to InfixExpression: == at 0", "INS SimpleName: oneWasted to Assignment: = at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS NullLiteral to InfixExpression: != at 1", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: sbCache to MethodInvocation at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 0", "INS Block to EnhancedForStatement at 2", "INS ForStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to IfStatement at 1", "INS VariableDeclarationStatement to Block at 1", "INS IfStatement to Block at 3", "INS ArrayType: Wasted[] to VariableDeclarationStatement at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to IfStatement at 1", "INS IfStatement to Block at 0", "INS SimpleName: matchedWastedAirs to MethodInvocation at 0", "INS SimpleName: wasteds to VariableDeclarationFragment at 0", "INS QualifiedName: Carny.SLEEP_PERIOD to MethodInvocation at 2", "INS QualifiedName: cache.airWorkCache to MethodInvocation at 0", "INS SimpleName: Wasted to SimpleType: Wasted at 0", "INS InfixExpression: != to IfStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: CPU_CONTROL_MOD_COUNT to InfixExpression: % at 1", "INS IfStatement to Block at 13", "INS SimpleName: i to InfixExpression: < at 0", "INS SimpleName: matchedWastedAirs to EnhancedForStatement at 1", "INS Block to IfStatement at 1", "INS ForStatement to Block at 1", "INS SimpleName: wastedAirsMap to MethodInvocation at 0", "INS SimpleName: numManualWaste to PostfixExpression: ++ at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: i to ArrayAccess at 1", "INS SimpleName: Boolean to SimpleType: Boolean at 0", "INS SimpleName: hash to SingleVariableDeclaration at 1", "INS SimpleName: oneWasted to ArrayAccess at 0", "INS SimpleName: sbCache to MethodInvocation at 3"]}, {"root": "INS VariableDeclarationStatement to Block at 20", "operations": ["INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: cacheSize to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 20", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS QualifiedName: cache.airWorkCache.size to VariableDeclarationFragment at 1"]}, {"root": "INS ExpressionStatement to Block at 37", "operations": ["INS SimpleName: realTotalCount to Assignment: = at 1", "INS SimpleName: lastRealTotalCount to Assignment: = at 0", "INS ExpressionStatement to Block at 37", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 38", "operations": ["INS SimpleName: totalCount to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: lastTotalCount to Assignment: = at 0", "INS ExpressionStatement to Block at 38"]}, {"root": "INS ExpressionStatement to Block at 39", "operations": ["INS SimpleName: watchCount to Assignment: = at 1", "INS ExpressionStatement to Block at 39", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: lastWatchCount to Assignment: = at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: low to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS InfixExpression: - to VariableDeclarationFragment at 1", "INS SimpleName: high to VariableDeclarationFragment at 0", "INS NumberLiteral: 1 to InfixExpression: - at 1"]}, {"root": "INS WhileStatement to Block at 2", "operations": ["INS SimpleName: midVal to VariableDeclarationFragment at 0", "INS SimpleName: high to InfixExpression: + at 1", "INS VariableDeclarationStatement to Block at 0", "INS ReturnStatement to IfStatement at 2", "INS SimpleName: mid to MethodInvocation at 2", "INS WhileStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: high to InfixExpression: <= at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS IfStatement to IfStatement at 2", "INS SimpleName: mid to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: low to Assignment: = at 0", "INS SimpleName: mid to InfixExpression: + at 0", "INS InfixExpression: > to IfStatement at 0", "INS SimpleName: hash to InfixExpression: > at 1", "INS ParenthesizedExpression to InfixExpression: >>> at 0", "INS NumberLiteral: 1 to InfixExpression: >>> at 1", "INS SimpleName: high to Assignment: = at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS InfixExpression: + to Assignment: = at 1", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS SimpleName: hash to InfixExpression: < at 1", "INS Block to WhileStatement at 1", "INS InfixExpression: >>> to VariableDeclarationFragment at 1", "INS InfixExpression: < to IfStatement at 0", "INS ExpressionStatement to IfStatement at 1", "INS IfStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS InfixExpression: <= to WhileStatement at 0", "INS InfixExpression: + to ParenthesizedExpression at 0", "INS ExpressionStatement to IfStatement at 1", "INS InfixExpression: - to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS SimpleName: low to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: hash to MethodInvocation at 3", "INS SimpleName: list to MethodInvocation at 0", "INS SimpleName: add to MethodInvocation at 1", "INS ExpressionStatement to Block at 3"]}, {"root": "MOVE from ParameterizedType: List<Integer>", "operations": ["MOV SimpleType: List to ParameterizedType: List<Integer> at 0"]}, {"root": "MOVE from ParameterizedType: List<Integer>", "operations": ["MOV SimpleType: Integer to ParameterizedType: List<Integer> at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 12", "operations": ["INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 12", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: searchSize to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS IfStatement to Block at 13", "operations": ["INS SimpleName: searchSize to InfixExpression: == at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS InfixExpression: || to IfStatement at 0", "INS IfStatement to Block at 13", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS ReturnStatement to IfStatement at 1", "INS InfixExpression: == to InfixExpression: || at 0", "INS MethodInvocation to InfixExpression: || at 1", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS ReturnStatement to Block at 14", "operations": ["INS SimpleName: searchHashes to ReturnStatement at 0", "INS ReturnStatement to Block at 14"]}, {"root": "INS ParameterizedType: List<Integer> to VariableDeclarationStatement at 1", "operations": ["INS SimpleType: List to ParameterizedType: List<Integer> at 0", "INS ParameterizedType: List<Integer> to VariableDeclarationStatement at 1", "INS SimpleName: List to SimpleType: List at 0"]}, {"root": "UPDATE from boolean to int", "operations": ["UPD PrimitiveType: boolean from boolean to int"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV ReturnStatement to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV ReturnStatement to IfStatement at 1"]}, {"root": "UPDATE from Map<Integer,Airing[]> to Map<Integer,Wasted[]>", "operations": ["UPD ParameterizedType: Map<Integer,Airing[]> from Map<Integer,Airing[]> to Map<Integer,Wasted[]>"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV Modifier: final to VariableDeclarationStatement at 0", "MOV PrimitiveType: boolean to VariableDeclarationStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from ParameterizedType: List<Integer>", "operations": ["MOV SimpleType: List to ParameterizedType: List<Integer> at 0"]}, {"root": "UPDATE from Set<Integer> to List<Integer>", "operations": ["UPD ParameterizedType: Set<Integer> from Set<Integer> to List<Integer>"]}, {"root": "INS QualifiedName: Pooler.EMPTY_INT_ARRAY to Assignment: = at 1", "operations": ["INS QualifiedName: Pooler.EMPTY_INT_ARRAY to Assignment: = at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ForStatement to Block at 1"]}, {"root": "INS IfStatement to Block at 7", "operations": ["INS QualifiedName: newWeaks.length to InfixExpression: == at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to IfStatement at 1", "INS SimpleName: weakAgents to Assignment: = at 0", "INS IfStatement to Block at 7", "INS QualifiedName: Pooler.EMPTY_INT_ARRAY to Assignment: = at 1", "INS InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from ParameterizedType: List<Integer>", "operations": ["MOV SimpleType: Integer to ParameterizedType: List<Integer> at 1"]}, {"root": "UPDATE from fullCheck to hashesSize", "operations": ["UPD SimpleName: fullCheck from fullCheck to hashesSize"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "INS ConditionalExpression to Assignment: = at 1", "operations": ["INS InfixExpression: == to ConditionalExpression at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS QualifiedName: bond.weakAgents.length to InfixExpression: == at 0", "INS ConditionalExpression to Assignment: = at 1", "INS QualifiedName: Pooler.EMPTY_INT_ARRAY to ConditionalExpression at 1"]}, {"root": "UPDATE from Airing[] to Wasted[]", "operations": ["UPD ArrayType: Airing[] from Airing[] to Wasted[]"]}, {"root": "MOVE from ParameterizedType: List<Integer>", "operations": ["MOV SimpleType: List to ParameterizedType: List<Integer> at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: unoptimized to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from person to low", "operations": ["UPD SimpleName: person from person to low", "UPD SimpleName: category from category to low"]}, {"root": "MOVE from InfixExpression: <=", "operations": ["MOV SimpleName: person to InfixExpression: <= at 0"]}, {"root": "MOVE from ParameterizedType: Set<Integer>", "operations": ["MOV SimpleType: List to ParameterizedType: Set<Integer> at 0"]}, {"root": "MOVE from ParameterizedType: Set<Integer>", "operations": ["MOV SimpleType: Integer to ParameterizedType: Set<Integer> at 1"]}, {"root": "UPDATE from searchedHashes to searchHashes", "operations": ["UPD SimpleName: searchedHashes from searchedHashes to searchHashes", "UPD SimpleName: searchedHashes from searchedHashes to searchHashes", "UPD SimpleName: searchedHashes from searchedHashes to searchHashes", "UPD SimpleName: add from add to searchHashes", "UPD SimpleName: searchedHashes from searchedHashes to searchHashes", "UPD SimpleName: searchedHashes from searchedHashes to searchHashes", "UPD SimpleName: searchedHashes from searchedHashes to searchHashes", "UPD SimpleName: add from add to searchHashes"]}, {"root": "MOVE from IfStatement", "operations": ["MOV ExpressionStatement to IfStatement at 2"]}, {"root": "UPDATE from hash to hashes", "operations": ["UPD SimpleName: hash from hash to hashes", "UPD SimpleName: keyword from keyword to hashes"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: length to MethodInvocation at 1", "MOV SimpleName: keyword to MethodInvocation at 0"]}, {"root": "UPDATE from contains to size", "operations": ["UPD SimpleName: contains from contains to size", "UPD SimpleName: length from length to size"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 2"]}, {"root": "MOVE from ArrayType: Airing[]", "operations": ["MOV SimpleType: Wasted to ArrayType: Airing[] at 0"]}, {"root": "UPDATE from size to cacheSize", "operations": ["UPD SimpleName: size from size to cacheSize"]}, {"root": "INS IfStatement to Block at 6", "operations": ["INS IfStatement to Block at 6"]}, {"root": "MOVE from InfixExpression: -", "operations": ["MOV MethodInvocation to InfixExpression: - at 0"]}, {"root": "UPDATE from HashSet<> to ArrayList<>", "operations": ["UPD ParameterizedType: HashSet<> from HashSet<> to ArrayList<>"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: contains to MethodInvocation at 1", "MOV SimpleName: searchedHashes to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: searchedHashes to MethodInvocation at 0", "MOV SimpleName: toArray to MethodInvocation at 1"]}, {"root": "UPDATE from toArray to contains", "operations": ["UPD SimpleName: toArray from toArray to contains"]}, {"root": "UPDATE from searchedHashes to Collections", "operations": ["UPD SimpleName: searchedHashes from searchedHashes to Collections"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: size to MethodInvocation at 1", "MOV SimpleName: searchedHashes to MethodInvocation at 0"]}, {"root": "UPDATE from size to emptyList", "operations": ["UPD SimpleName: size from size to emptyList"]}, {"root": "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "operations": ["INS VariableDeclarationFragment to VariableDeclarationExpression at 1"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS InfixExpression: != to IfStatement at 0", "INS SimpleName: ensureAddCapacity to MethodInvocation at 1", "INS QualifiedName: cache.airWorkCache to MethodInvocation at 0", "INS ExpressionStatement to IfStatement at 1", "INS SimpleName: cache to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to Block at 1", "INS QualifiedName: airings.length to MethodInvocation at 2"]}, {"root": "INS ParenthesizedExpression to InfixExpression: || at 0", "operations": ["INS InfixExpression: && to ParenthesizedExpression at 0", "INS ParenthesizedExpression to InfixExpression: == at 0", "INS SimpleName: channel to Assignment: = at 0", "INS ParenthesizedExpression to InfixExpression: && at 1", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS NullLiteral to InfixExpression: == at 1", "INS ParenthesizedExpression to InfixExpression: || at 0", "INS Assignment: = to ParenthesizedExpression at 0"]}, {"root": "MOVE from ArrayType: Wasted[]", "operations": ["MOV SimpleType: Wasted to ArrayType: Wasted[] at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Integer to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from size to i", "operations": ["UPD SimpleName: size from size to i"]}, {"root": "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "operations": ["INS NumberLiteral: 0 to VariableDeclarationFragment at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV IfStatement to IfStatement at 2", "MOV InstanceofExpression to IfStatement at 0"]}, {"root": "UPDATE from testAgentFlag to list", "operations": ["UPD SimpleName: testAgentFlag from testAgentFlag to list", "UPD SimpleName: chanName from chanName to list"]}, {"root": "INS SimpleName: size to MethodInvocation at 1", "operations": ["INS SimpleName: size to MethodInvocation at 1"]}, {"root": "UPDATE from chanNames to midVal", "operations": ["UPD SimpleName: chanNames from chanNames to midVal", "UPD SimpleName: network from network to midVal"]}, {"root": "MOVE from InfixExpression: <", "operations": ["MOV SimpleName: chanNames to InfixExpression: < at 0"]}, {"root": "UPDATE from List to ArrayList", "operations": ["UPD SimpleName: List from List to ArrayList", "UPD SimpleType: List from List to ArrayList", "UPD SimpleName: HashSet from HashSet to ArrayList", "UPD SimpleType: HashSet from HashSet to ArrayList"]}, {"root": "INS SimpleName: searchHashes to MethodInvocation at 3", "operations": ["INS SimpleName: searchHashes to MethodInvocation at 3"]}, {"root": "INS SimpleName: searchHashes to MethodInvocation at 3", "operations": ["INS SimpleName: searchHashes to MethodInvocation at 3"]}, {"root": "INS SimpleName: searchHashes to MethodInvocation at 3", "operations": ["INS SimpleName: searchHashes to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 1"]}, {"root": "INS SimpleName: searchHashes to MethodInvocation at 3", "operations": ["INS SimpleName: searchHashes to MethodInvocation at 3"]}, {"root": "INS SimpleName: searchHashes to MethodInvocation at 3", "operations": ["INS SimpleName: searchHashes to MethodInvocation at 3"]}, {"root": "INS SimpleName: searchHashes to MethodInvocation at 3", "operations": ["INS SimpleName: searchHashes to MethodInvocation at 3"]}, {"root": "INS SimpleName: searchHashes to MethodInvocation at 3", "operations": ["INS SimpleName: searchHashes to MethodInvocation at 3"]}, {"root": "INS SimpleName: weakAgentLength to ArrayCreation at 1", "operations": ["INS SimpleName: weakAgentLength to ArrayCreation at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: i to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from hashes.length to cache.hashZero", "operations": ["UPD QualifiedName: hashes.length from hashes.length to cache.hashZero"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV QualifiedName: hashes.length to VariableDeclarationFragment at 1"]}, {"root": "INS ParenthesizedExpression to InfixExpression: == at 0", "operations": ["INS ParenthesizedExpression to InfixExpression: == at 0", "INS Assignment: = to ParenthesizedExpression at 0", "INS SimpleName: channel to Assignment: = at 0"]}, {"root": "INS QualifiedName: channel.network to InfixExpression: != at 1", "operations": ["INS QualifiedName: channel.network to InfixExpression: != at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "INS MethodInvocation to InfixExpression: || at 1", "operations": ["INS BooleanLiteral: false to MethodInvocation at 3", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: getBoolean to MethodInvocation at 1", "INS SimpleName: Sage to MethodInvocation at 0", "INS StringLiteral: \"aggressive_negative_profiling\" to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: length to MethodInvocation at 1", "MOV SimpleName: chanName to MethodInvocation at 0"]}, {"root": "UPDATE from length to get", "operations": ["UPD SimpleName: length from length to get"]}, {"root": "MOVE from InfixExpression: >", "operations": ["MOV SimpleName: network to InfixExpression: > at 0"]}, {"root": "INS QualifiedName: channel.name to MethodInvocation at 1", "operations": ["INS QualifiedName: channel.name to MethodInvocation at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: == to InfixExpression: && at 0"]}, {"root": "INS ConditionalExpression to MethodInvocation at 2", "operations": ["INS InfixExpression: != to ConditionalExpression at 0", "INS QualifiedName: channel.name to ConditionalExpression at 1", "INS ConditionalExpression to MethodInvocation at 2", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: channel to InfixExpression: != at 0"]}, {"root": "MOVE from ArrayType: Wasted[]", "operations": ["MOV SimpleType: Wasted to ArrayType: Wasted[] at 0"]}, {"root": "UPDATE from wastedAirs to oneWasted", "operations": ["UPD SimpleName: wastedAirs from wastedAirs to oneWasted"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV NullLiteral to InfixExpression: == at 1", "MOV SimpleName: wastedAirs to InfixExpression: == at 0"]}, {"root": "MOVE from ForStatement", "operations": ["MOV VariableDeclarationExpression to ForStatement at 0", "MOV PostfixExpression: ++ to ForStatement at 2"]}, {"root": "UPDATE from List<Airing> to ArrayList<Airing>", "operations": ["UPD ParameterizedType: List<Airing> from List<Airing> to ArrayList<Airing>"]}, {"root": "UPDATE from 0 to 1", "operations": ["UPD NumberLiteral: 0 from 0 to 1"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV NumberLiteral: 0 to InfixExpression: + at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 1"]}, {"root": "INS Block to ForStatement at 3", "operations": ["INS Block to ForStatement at 3"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "INS SimpleName: channel to InfixExpression: == at 0", "operations": ["INS SimpleName: channel to InfixExpression: == at 0"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 2"]}, {"root": "UPDATE from wastedAirsMap to wasteds", "operations": ["UPD SimpleName: wastedAirsMap from wastedAirsMap to wasteds", "UPD SimpleName: wastedAirs from wastedAirs to wasteds"]}, {"root": "MOVE from InfixExpression: !=", "operations": ["MOV NullLiteral to InfixExpression: != at 1", "MOV SimpleName: wastedAirsMap to InfixExpression: != at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Airing to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV TryStatement to IfStatement at 1"]}, {"root": "INS SimpleName: cacheSize to InfixExpression: / at 0", "operations": ["INS SimpleName: cacheSize to InfixExpression: / at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV CastExpression to MethodInvocation at 2"]}, {"root": "INS SimpleType: ArrayList to ParameterizedType: List<Airing> at 0", "operations": ["INS SimpleType: ArrayList to ParameterizedType: List<Airing> at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0"]}, {"root": "INS CastExpression to MethodInvocation at 2", "operations": ["INS SimpleType: Airing to CastExpression at 0", "INS CastExpression to MethodInvocation at 2", "INS SimpleName: airSet to CastExpression at 1", "INS SimpleName: Airing to SimpleType: Airing at 0"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV SimpleName: category to InfixExpression: + at 0"]}, {"root": "UPDATE from rated to mid", "operations": ["UPD SimpleName: rated from rated to mid"]}, {"root": "MOVE from InfixExpression: -", "operations": ["MOV SimpleName: rated to InfixExpression: - at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: i to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: hashes to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1", "MOV ExpressionStatement to Block at 1", "MOV IfStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 7", "operations": ["INS ExpressionStatement to Block at 7"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from InfixExpression: !=", "operations": ["MOV NullLiteral to InfixExpression: != at 1", "MOV SimpleName: wastedAirs to InfixExpression: != at 0"]}, {"root": "UPDATE from optimizedFollowsTrend to followsTrend", "operations": ["UPD SimpleName: optimizedFollowsTrend from optimizedFollowsTrend to followsTrend"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV BooleanLiteral: false to MethodInvocation at 2", "MOV SimpleName: optimizedFollowsTrend to MethodInvocation at 0", "MOV BooleanLiteral: true to MethodInvocation at 2"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Airing to VariableDeclarationStatement at 0"]}, {"root": "INS ExpressionStatement to IfStatement at 1", "operations": ["INS ExpressionStatement to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV ExpressionStatement to IfStatement at 2"]}, {"root": "INS ExpressionStatement to IfStatement at 1", "operations": ["INS ExpressionStatement to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV ExpressionStatement to IfStatement at 2"]}, {"root": "INS ExpressionStatement to IfStatement at 1", "operations": ["INS ExpressionStatement to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV ExpressionStatement to IfStatement at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from wastedAirsMap to matchedWastedAirs", "operations": ["UPD SimpleName: wastedAirsMap from wastedAirsMap to matchedWastedAirs"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV NullLiteral to InfixExpression: == at 1", "MOV SimpleName: wastedAirsMap to InfixExpression: == at 0"]}, {"root": "MOVE from VariableDeclarationExpression", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationExpression at 1"]}, {"root": "UPDATE from true to false", "operations": ["UPD BooleanLiteral: true from true to false"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from add to addAll", "operations": ["UPD SimpleName: add from add to addAll"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 3"]}, {"root": "INS ClassInstanceCreation to MethodInvocation at 3", "operations": ["INS NumberLiteral: 1 to ClassInstanceCreation at 1", "INS SimpleType: MutableInteger to ClassInstanceCreation at 0", "INS SimpleName: MutableInteger to SimpleType: MutableInteger at 0", "INS ClassInstanceCreation to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 3"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS SimpleType: ArrayList to CastExpression at 0", "operations": ["INS SimpleType: ArrayList to CastExpression at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0"]}, {"root": "INS QualifiedName: cache.airWorkCache to MethodInvocation at 0", "operations": ["INS QualifiedName: cache.airWorkCache to MethodInvocation at 0"]}, {"root": "UPDATE from cache to add", "operations": ["UPD SimpleName: cache from cache to add"]}, {"root": "UPDATE from resetNextAiringList to testW", "operations": ["UPD SimpleName: resetNextAiringList from resetNextAiringList to testW"]}, {"root": "INS SimpleType: ArrayList to CastExpression at 0", "operations": ["INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS SimpleType: ArrayList to CastExpression at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: thisAirHashes to MethodInvocation at 0", "INS SimpleName: entry to MethodInvocation at 0", "INS SimpleName: getKey to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: add to MethodInvocation at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "DEL ArrayCreation", "operations": ["DEL ArrayCreation", "DEL NumberLiteral: 0", "DEL Dimension", "DEL PrimitiveType: int", "DEL ArrayType: int[]"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL SimpleName: countManualWasted", "DEL SingleVariableDeclaration"]}, {"root": "DEL ArrayType: Integer[]", "operations": ["DEL Dimension", "DEL ArrayType: Integer[]"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL InfixExpression: &&", "DEL NumberLiteral: 0", "DEL QualifiedName: hashes.length", "DEL InfixExpression: >", "DEL NullLiteral", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL InfixExpression: !=", "DEL SimpleName: timeslots", "DEL QualifiedName: timeslots.length", "DEL InfixExpression: ||", "DEL InfixExpression: ==", "DEL NumberLiteral: 0", "DEL InfixExpression: &&", "DEL NumberLiteral: 0", "DEL InfixExpression: &&", "DEL InfixExpression: !=", "DEL ParenthesizedExpression", "DEL InfixExpression: >", "DEL SimpleName: slotType", "DEL ParenthesizedExpression"]}, {"root": "DEL IfStatement", "operations": ["DEL Assignment: =", "DEL QualifiedName: cache.manualWasted", "DEL ExpressionStatement", "DEL SimpleName: clear", "DEL IfStatement", "DEL MethodInvocation", "DEL QualifiedName: cache.processedWaste", "DEL ExpressionStatement", "DEL SimpleName: countManualWasted", "DEL NumberLiteral: 0", "DEL Block"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: Airing", "DEL VariableDeclarationStatement", "DEL InfixExpression: %", "DEL SimpleName: contains", "DEL SimpleName: controlCPUUsage", "DEL QualifiedName: cache.airWorkCache", "DEL Block", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: searchStart", "DEL InfixExpression: <", "DEL VariableDeclarationStatement", "DEL SimpleName: airing", "DEL SimpleName: searchEnd", "DEL IfStatement", "DEL SimpleName: wasted", "DEL Assignment: =", "DEL SimpleName: skipKeyword", "DEL SimpleName: contains", "DEL QualifiedName: cache.airWorkCache", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL SimpleName: i", "DEL NumberLiteral: 0", "DEL PostfixExpression: ++", "DEL BooleanLiteral: true", "DEL SimpleName: countManualWasted", "DEL PrefixExpression: !", "DEL SimpleName: i", "DEL SimpleName: isManual", "DEL MethodInvocation", "DEL SimpleName: i", "DEL Block", "DEL SimpleName: wiz", "DEL IfStatement", "DEL ArrayAccess", "DEL SimpleName: contains", "DEL Block", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: airing", "DEL VariableDeclarationFragment", "DEL SimpleName: airing", "DEL QualifiedName: cache.airWorkCache.offset", "DEL ExpressionStatement", "DEL SimpleName: add", "DEL ForStatement", "DEL CastExpression", "DEL SimpleName: mustBeViewable", "DEL NumberLiteral: 0", "DEL InfixExpression: &&", "DEL QualifiedName: cache.airWorkCache.size", "DEL PrimitiveType: int", "DEL InfixExpression: &&", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: getWastedForAiring", "DEL PrimitiveType: boolean", "DEL ParenthesizedExpression", "DEL SimpleName: contains", "DEL Block", "DEL SimpleName: CPU_CONTROL_MOD_COUNT", "DEL InfixExpression: >=", "DEL SimpleName: followsTrend", "DEL SimpleName: ignoreDisabledFlag", "DEL SimpleName: wasted", "DEL SimpleName: allAirings", "DEL VariableDeclarationStatement", "DEL SimpleName: airing", "DEL SimpleName: wasted", "DEL PrimitiveType: int", "DEL QualifiedName: allAirings.length", "DEL SimpleType: Airing", "DEL Block", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: airing", "DEL SimpleName: searchStart", "DEL QualifiedName: cache.manualWasted", "DEL SimpleName: binarySearch", "DEL SimpleName: sbCache", "DEL SimpleName: searchEnd", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL InfixExpression: !=", "DEL IfStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: processedWaste", "DEL VariableDeclarationStatement", "DEL SimpleType: Carny.CacheList", "DEL VariableDeclarationFragment", "DEL QualifiedName: cache.processedWaste", "DEL QualifiedName: Carny.CacheList"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL PrefixExpression: -", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 1"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: hashesSize"]}, {"root": "DEL ArrayAccess", "operations": ["DEL SimpleName: hashes", "DEL SimpleName: i", "DEL ArrayAccess"]}, {"root": "DEL SimpleName: countManualWasted", "operations": ["DEL SimpleName: countManualWasted"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: wasted", "DEL VariableDeclarationStatement", "DEL SimpleName: getWastedForAiring", "DEL SimpleName: airing", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: wiz"]}, {"root": "DEL IfStatement", "operations": ["DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: wasted", "DEL PostfixExpression: ++", "DEL QualifiedName: cache.manualWasted", "DEL IfStatement", "DEL SimpleName: isManual", "DEL SimpleName: wasted", "DEL InfixExpression: &&"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: add", "DEL ExpressionStatement", "DEL SimpleName: airing", "DEL SimpleName: processedWaste", "DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL IfStatement", "DEL Block", "DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL SimpleName: airing", "DEL MethodInvocation", "DEL SimpleName: airing", "DEL NumberLiteral: 0", "DEL SimpleName: processedWaste", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: wasted", "DEL SimpleName: wasted", "DEL ExpressionStatement", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: getWastedForAiring", "DEL SimpleName: binaryAdd", "DEL InfixExpression: !=", "DEL PostfixExpression: ++", "DEL SimpleName: countManualWasted", "DEL SimpleName: isManual", "DEL SimpleName: wiz", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL InfixExpression: >=", "DEL SimpleName: wasted", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL InfixExpression: &&", "DEL SimpleName: index", "DEL QualifiedName: cache.manualWasted"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL QualifiedName: cache.manualWasted", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL SimpleName: optManualWaste"]}, {"root": "DEL SimpleName: countManualWasted", "operations": ["DEL SimpleName: countManualWasted"]}, {"root": "DEL IfStatement", "operations": ["DEL QualifiedName: System.out", "DEL IfStatement", "DEL QualifiedName: cache.manualWasted", "DEL Block", "DEL IfStatement", "DEL StringLiteral: \"Optimized manual waste \"", "DEL StringLiteral: \" != full manual waste \"", "DEL MethodInvocation", "DEL SimpleName: optManualWaste", "DEL InfixExpression: +", "DEL QualifiedName: cache.manualWasted", "DEL QualifiedName: Sage.DBG", "DEL ExpressionStatement", "DEL SimpleName: optManualWaste", "DEL InfixExpression: !=", "DEL SimpleName: println"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: optManualWaste", "DEL Assignment: =", "DEL QualifiedName: cache.manualWasted", "DEL ExpressionStatement"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL SimpleName: hashes", "DEL EnhancedForStatement", "DEL ExpressionStatement"]}, {"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: name", "DEL FieldAccess"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: air", "DEL SimpleName: getChannel"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL MethodInvocation", "DEL SimpleName: getChannel", "DEL SimpleName: air", "DEL SimpleName: network"]}, {"root": "DEL SimpleType: Airing", "operations": ["DEL SimpleType: Airing", "DEL SimpleName: Airing"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL InfixExpression: ==", "DEL InfixExpression: ==", "DEL InfixExpression: ||", "DEL InfixExpression: ==", "DEL VariableDeclarationStatement", "DEL InfixExpression: ||", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL InfixExpression: ||"]}, {"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}, {"root": "DEL IfStatement", "operations": ["DEL ExpressionStatement", "DEL BooleanLiteral: false", "DEL SimpleName: cache", "DEL IfStatement", "DEL Assignment: =", "DEL QualifiedName: cache.manualWasted", "DEL SimpleName: unoptimized", "DEL ExpressionStatement", "DEL SimpleName: controlCPUUsage", "DEL Block", "DEL SimpleName: numManualWaste", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL SimpleName: wastedAirsMap", "DEL SimpleName: wastedAirs", "DEL StringLiteral: \"wastedAirsMap\""]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement"]}, {"root": "DEL QualifiedName: cache.airWorkCache.size", "operations": ["DEL QualifiedName: cache.airWorkCache.size"]}, {"root": "DEL QualifiedName: cache.airWorkCache.size", "operations": ["DEL QualifiedName: cache.airWorkCache.size"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: thisAiring"]}, {"root": "DEL SimpleName: thisAiring", "operations": ["DEL SimpleName: thisAiring"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: cache", "DEL SimpleName: getNextAiringList", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: thisAiring", "operations": ["DEL SimpleName: thisAiring"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: airSet", "DEL MethodInvocation", "DEL CastExpression", "DEL ParenthesizedExpression", "DEL SimpleName: add", "DEL ExpressionStatement", "DEL SimpleName: currAir"]}, {"root": "DEL Block", "operations": ["DEL ClassInstanceCreation", "DEL SimpleName: IllegalArgumentException", "DEL SimpleType: IllegalArgumentException", "DEL ThrowStatement", "DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL InfixExpression: ==", "DEL SimpleName: airSet", "DEL IfStatement", "DEL NullLiteral"]}, {"root": "DEL SimpleName: theFloat", "operations": ["DEL SimpleName: theFloat"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: theFloat", "DEL Block", "DEL ExpressionStatement", "DEL Assignment: =", "DEL ExpressionStatement"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL SimpleName: theInt", "operations": ["DEL SimpleName: theInt"]}, {"root": "DEL Block", "operations": ["DEL ExpressionStatement", "DEL SimpleName: MutableInteger", "DEL ExpressionStatement", "DEL SimpleType: MutableInteger", "DEL ClassInstanceCreation", "DEL SimpleName: theInt", "DEL Block", "DEL Assignment: ="]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL SimpleName: theInt", "operations": ["DEL SimpleName: theInt"]}, {"root": "DEL Block", "operations": ["DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: theInt", "DEL Assignment: ="]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL SimpleName: aggressiveNegativeProfiling", "operations": ["DEL SimpleName: aggressiveNegativeProfiling"]}, {"root": "DEL QualifiedName: Agent.RERUN_MASK", "operations": ["DEL QualifiedName: Agent.RERUN_MASK"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: subCategory", "DEL NullLiteral", "DEL InfixExpression: >", "DEL SimpleName: year", "DEL MethodInvocation", "DEL MethodInvocation", "DEL NullLiteral", "DEL InfixExpression: ||", "DEL SimpleName: pr", "DEL InfixExpression: &&", "DEL NullLiteral", "DEL InfixExpression: !=", "DEL InfixExpression: ||", "DEL NullLiteral", "DEL ParenthesizedExpression", "DEL NullLiteral", "DEL InfixExpression: ||", "DEL InfixExpression: !=", "DEL InfixExpression: !=", "DEL InfixExpression: ||", "DEL SimpleName: testAgentFlag", "DEL InfixExpression: ||", "DEL InfixExpression: ||", "DEL InfixExpression: ||", "DEL InfixExpression: ||", "DEL QualifiedName: chanNames.length", "DEL NullLiteral", "DEL SimpleName: title", "DEL NullLiteral", "DEL InfixExpression: ||", "DEL InfixExpression: !=", "DEL NullLiteral", "DEL InfixExpression: ||", "DEL InfixExpression: >", "DEL InfixExpression: !=", "DEL QualifiedName: Agent.FIRSTRUN_MASK", "DEL InfixExpression: !=", "DEL InfixExpression: !=", "DEL InfixExpression: ||", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL NullLiteral", "DEL InfixExpression: !=", "DEL InfixExpression: !="]}, {"root": "DEL ArrayType: Integer[]", "operations": ["DEL Dimension", "DEL ArrayType: Integer[]"]}, {"root": "DEL SimpleType: Set", "operations": ["DEL SimpleType: Set", "DEL SimpleName: Set"]}, {"root": "DEL SimpleType: Integer", "operations": ["DEL SimpleName: Integer", "DEL SimpleType: Integer"]}, {"root": "DEL SimpleName: searchedHashes", "operations": ["DEL SimpleName: searchedHashes"]}, {"root": "DEL SimpleName: searchedHashes", "operations": ["DEL SimpleName: searchedHashes"]}, {"root": "DEL SimpleName: searchedHashes", "operations": ["DEL SimpleName: searchedHashes"]}, {"root": "DEL SimpleName: searchedHashes", "operations": ["DEL SimpleName: searchedHashes"]}, {"root": "DEL SimpleName: searchedHashes", "operations": ["DEL SimpleName: searchedHashes"]}, {"root": "DEL SimpleName: searchedHashes", "operations": ["DEL SimpleName: searchedHashes"]}, {"root": "DEL SimpleName: searchedHashes", "operations": ["DEL SimpleName: searchedHashes"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL ArrayCreation", "DEL ArrayType: Integer[]", "DEL NumberLiteral: 0", "DEL IfStatement", "DEL Dimension"]}, {"root": "DEL ReturnStatement", "operations": ["DEL Dimension", "DEL MethodInvocation", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ArrayType: Integer[]", "DEL ArrayCreation"]}]}}, {"Agent_diff": {"operations": ["Insert ImportDeclaration(19) into CompilationUnit(7818) at 9", "Insert ImportDeclaration(25) into CompilationUnit(7818) at 12", "Move MethodDeclaration(2229) into TypeDeclaration: class(7817) at 91", "Insert QualifiedName: java.util.Collections(18) into ImportDeclaration(19) at 0", "Insert QualifiedName: java.util.IdentityHashMap(24) into ImportDeclaration(25) at 0", "Insert FieldDeclaration(6281) into TypeDeclaration: class(7817) at 66", "Insert FieldDeclaration(6285) into TypeDeclaration: class(7817) at 67", "Insert FieldDeclaration(6289) into TypeDeclaration: class(7817) at 68", "Insert PrimitiveType: int(6278) into FieldDeclaration(6281) at 0", "Insert VariableDeclarationFragment(6280) into FieldDeclaration(6281) at 1", "Insert PrimitiveType: int(6282) into FieldDeclaration(6285) at 0", "Insert VariableDeclarationFragment(6284) into FieldDeclaration(6285) at 1", "Insert PrimitiveType: float(6286) into FieldDeclaration(6289) at 0", "Insert VariableDeclarationFragment(6288) into FieldDeclaration(6289) at 1", "Update PrimitiveType: boolean(2171) to void", "Update SimpleName: hasSpecificCriteria(2172) to addHash", "Move SingleVariableDeclaration(3020) into MethodDeclaration(7457) at 3", "Insert SingleVariableDeclaration(7391) into MethodDeclaration(7457) at 4", "Insert ParameterizedType: List<Integer>(7463) into MethodDeclaration(7642) at 1", "Insert VariableDeclarationStatement(720) into Block(967) at 19", "Insert IfStatement(758) into Block(967) at 20", "Insert VariableDeclarationStatement(2263) into Block(2990) at 3", "Insert VariableDeclarationStatement(4143) into Block(4958) at 10", "Insert VariableDeclarationStatement(5064) into Block(6276) at 6", "Insert VariableDeclarationStatement(5077) into Block(6276) at 7", "Insert IfStatement(5617) into Block(6276) at 12", "Insert VariableDeclarationStatement(5733) into Block(6276) at 18", "Insert ExpressionStatement(6232) into Block(6276) at 34", "Insert ExpressionStatement(6236) into Block(6276) at 35", "Insert ExpressionStatement(6240) into Block(6276) at 36", "Insert SimpleName: lastRealTotalCount(6279) into VariableDeclarationFragment(6280) at 0", "Insert SimpleName: lastTotalCount(6283) into VariableDeclarationFragment(6284) at 0", "Insert SimpleName: lastWatchCount(6287) into VariableDeclarationFragment(6288) at 0", "Insert ParameterizedType: List<Integer>(7389) into SingleVariableDeclaration(7391) at 0", "Insert SimpleName: list(7390) into SingleVariableDeclaration(7391) at 1", "Insert VariableDeclarationStatement(7396) into Block(7456) at 0", "Insert VariableDeclarationStatement(7405) into Block(7456) at 1", "Insert WhileStatement(7449) into Block(7456) at 2", "Insert ExpressionStatement(7455) into Block(7456) at 3", "Move SimpleType: List(5896) into ParameterizedType: List<Integer>(7463) at 0", "Move SimpleType: Integer(7524) into ParameterizedType: List<Integer>(7463) at 1", "Insert VariableDeclarationStatement(7625) into Block(7641) at 12", "Insert IfStatement(7638) into Block(7641) at 13", "Insert ReturnStatement(7640) into Block(7641) at 14", "Insert PrimitiveType: int(714) into VariableDeclarationStatement(720) at 0", "Insert VariableDeclarationFragment(719) into VariableDeclarationStatement(720) at 1", "Insert InfixExpression: ==(723) into IfStatement(758) at 0", "Insert Block(728) into IfStatement(758) at 1", "Insert Block(757) into IfStatement(758) at 2", "Insert ParameterizedType: List<Integer>(2244) into VariableDeclarationStatement(2249) at 1", "Update PrimitiveType: boolean(2289) to int", "Insert PrimitiveType: boolean(2257) into VariableDeclarationStatement(2263) at 0", "Insert VariableDeclarationFragment(2262) into VariableDeclarationStatement(2263) at 1", "Move Block(2532) into IfStatement(2989) at 1", "Insert SimpleType: Channel(4139) into VariableDeclarationStatement(4143) at 0", "Insert VariableDeclarationFragment(4142) into VariableDeclarationStatement(4143) at 1", "Move ReturnStatement(4445) into IfStatement(4166) at 1", "Move ReturnStatement(4424) into IfStatement(4192) at 1", "Update ParameterizedType: Map<Integer,Airing[]>(5290) to Map<Integer,Wasted[]>", "Move Modifier: final(5303) into VariableDeclarationStatement(5064) at 0", "Insert ParameterizedType: List<Integer>(5059) into VariableDeclarationStatement(5064) at 1", "Insert VariableDeclarationFragment(5063) into VariableDeclarationStatement(5064) at 2", "Insert Modifier: final(5065) into VariableDeclarationStatement(5077) at 0", "Move PrimitiveType: boolean(5304) into VariableDeclarationStatement(5077) at 1", "Insert VariableDeclarationFragment(5076) into VariableDeclarationStatement(5077) at 2", "Insert SimpleName: unoptimized(5212) into IfStatement(5617) at 0", "Move Block(5558) into IfStatement(5617) at 1", "Insert Block(5616) into IfStatement(5617) at 2", "Insert PrimitiveType: int(5729) into VariableDeclarationStatement(5733) at 0", "Insert VariableDeclarationFragment(5732) into VariableDeclarationStatement(5733) at 1", "Insert Assignment: =(6231) into ExpressionStatement(6232) at 0", "Insert Assignment: =(6235) into ExpressionStatement(6236) at 0", "Insert Assignment: =(6239) into ExpressionStatement(6240) at 0", "Move SimpleType: List(5914) into ParameterizedType: List<Integer>(7389) at 0", "Insert SimpleType: Integer(7388) into ParameterizedType: List<Integer>(7389) at 1", "Insert PrimitiveType: int(7392) into VariableDeclarationStatement(7396) at 0", "Insert VariableDeclarationFragment(7395) into VariableDeclarationStatement(7396) at 1", "Insert PrimitiveType: int(7397) into VariableDeclarationStatement(7405) at 0", "Insert VariableDeclarationFragment(7404) into VariableDeclarationStatement(7405) at 1", "Insert InfixExpression: <=(7408) into WhileStatement(7449) at 0", "Insert Block(7448) into WhileStatement(7449) at 1", "Insert MethodInvocation(7454) into ExpressionStatement(7455) at 0", "Update ParameterizedType: Set<Integer>(7359) to List<Integer>", "Insert PrimitiveType: int(7619) into VariableDeclarationStatement(7625) at 0", "Insert VariableDeclarationFragment(7624) into VariableDeclarationStatement(7625) at 1", "Insert InfixExpression: ||(7633) into IfStatement(7638) at 0", "Insert ReturnStatement(7637) into IfStatement(7638) at 1", "Insert SimpleName: searchHashes(7639) into ReturnStatement(7640) at 0", "Insert QualifiedName: Pooler.EMPTY_INT_ARRAY(470) into Assignment: =(471) at 1", "Insert SimpleName: weakAgentLength(715) into VariableDeclarationFragment(719) at 0", "Move MethodInvocation(720) into VariableDeclarationFragment(719) at 1", "Insert SimpleName: weakAgentLength(721) into InfixExpression: ==(723) at 0", "Insert NumberLiteral: 0(722) into InfixExpression: ==(723) at 1", "Insert ExpressionStatement(727) into Block(728) at 0", "Move ExpressionStatement(723) into Block(757) at 0", "Move ForStatement(743) into Block(757) at 1", "Insert IfStatement(2176) into Block(2183) at 7", "Insert SimpleType: List(2241) into ParameterizedType: List<Integer>(2244) at 0", "Move SimpleType: Integer(2281) into ParameterizedType: List<Integer>(2244) at 1", "Update SimpleName: fullCheck(2290) to hashesSize", "Insert MethodInvocation(2254) into VariableDeclarationFragment(2255) at 1", "Insert SimpleName: fullCheck(2258) into VariableDeclarationFragment(2262) at 0", "Insert InfixExpression: ==(2261) into VariableDeclarationFragment(2262) at 1", "Move IfStatement(2349) into Block(2350) at 0", "Insert ConditionalExpression(3586) into Assignment: =(3587) at 1", "Insert SimpleName: Channel(4138) into SimpleType: Channel(4139) at 0", "Insert SimpleName: channel(4140) into VariableDeclarationFragment(4142) at 0", "Insert NullLiteral(4141) into VariableDeclarationFragment(4142) at 1", "Update ArrayType: Airing[](5289) to Wasted[]", "Move SimpleType: List(5844) into ParameterizedType: List<Integer>(5059) at 0", "Insert SimpleType: Integer(5058) into ParameterizedType: List<Integer>(5059) at 1", "Insert SimpleName: hashes(5060) into VariableDeclarationFragment(5063) at 0", "Insert MethodInvocation(5062) into VariableDeclarationFragment(5063) at 1", "Move SimpleName: unoptimized(5305) into VariableDeclarationFragment(5076) at 0", "Insert InfixExpression: ||(5075) into VariableDeclarationFragment(5076) at 1", "Insert VariableDeclarationStatement(5325) into Block(5616) at 0", "Insert VariableDeclarationStatement(5334) into Block(5616) at 1", "Insert EnhancedForStatement(5447) into Block(5616) at 2", "Insert IfStatement(5615) into Block(5616) at 3", "Insert SimpleName: cacheSize(5730) into VariableDeclarationFragment(5732) at 0", "Insert QualifiedName: cache.airWorkCache.size(5731) into VariableDeclarationFragment(5732) at 1", "Insert SimpleName: lastRealTotalCount(6229) into Assignment: =(6231) at 0", "Insert SimpleName: realTotalCount(6230) into Assignment: =(6231) at 1", "Insert SimpleName: lastTotalCount(6233) into Assignment: =(6235) at 0", "Insert SimpleName: totalCount(6234) into Assignment: =(6235) at 1", "Insert SimpleName: lastWatchCount(6237) into Assignment: =(6239) at 0", "Insert SimpleName: watchCount(6238) into Assignment: =(6239) at 1", "Insert SimpleName: Integer(7387) into SimpleType: Integer(7388) at 0", "Insert SimpleName: low(7393) into VariableDeclarationFragment(7395) at 0", "Insert NumberLiteral: 0(7394) into VariableDeclarationFragment(7395) at 1", "Insert SimpleName: high(7398) into VariableDeclarationFragment(7404) at 0", "Insert InfixExpression: -(7403) into VariableDeclarationFragment(7404) at 1", "Update SimpleName: person(2184) to low", "Move SimpleName: person(2184) into InfixExpression: <=(7408) at 0", "Insert SimpleName: high(7407) into InfixExpression: <=(7408) at 1", "Insert VariableDeclarationStatement(7418) into Block(7448) at 0", "Insert VariableDeclarationStatement(7426) into Block(7448) at 1", "Insert IfStatement(7447) into Block(7448) at 2", "Insert SimpleName: list(7450) into MethodInvocation(7454) at 0", "Insert SimpleName: add(7451) into MethodInvocation(7454) at 1", "Insert SimpleName: low(7452) into MethodInvocation(7454) at 2", "Insert SimpleName: hash(7453) into MethodInvocation(7454) at 3", "Move SimpleType: List(5882) into ParameterizedType: List<Integer>(7469) at 0", "Move SimpleType: Integer(7514) into ParameterizedType: List<Integer>(7469) at 1", "Update SimpleName: searchedHashes(7360) to searchHashes", "Insert SimpleName: searchSize(7620) into VariableDeclarationFragment(7624) at 0", "Insert MethodInvocation(7623) into VariableDeclarationFragment(7624) at 1", "Insert InfixExpression: ==(7628) into InfixExpression: ||(7633) at 0", "Insert MethodInvocation(7632) into InfixExpression: ||(7633) at 1", "Insert MethodInvocation(7636) into ReturnStatement(7637) at 0", "Insert Assignment: =(726) into ExpressionStatement(727) at 0", "Insert InfixExpression: ==(2167) into IfStatement(2176) at 0", "Insert ExpressionStatement(2171) into IfStatement(2176) at 1", "Move ExpressionStatement(2153) into IfStatement(2176) at 2", "Insert SimpleName: List(2240) into SimpleType: List(2241) at 0", "Update SimpleName: keyword(2291) to hashes", "Move SimpleName: keyword(2291) into MethodInvocation(2254) at 0", "Update SimpleName: length(2292) to size", "Move SimpleName: length(2292) into MethodInvocation(2254) at 1", "Insert SimpleName: hashesSize(2259) into InfixExpression: ==(2261) at 0", "Insert NumberLiteral: 0(2260) into InfixExpression: ==(2261) at 1", "Insert InfixExpression: ==(3581) into ConditionalExpression(3586) at 0", "Insert QualifiedName: Pooler.EMPTY_INT_ARRAY(3582) into ConditionalExpression(3586) at 1", "Move MethodInvocation(3850) into ConditionalExpression(3586) at 2", "Move SimpleType: Wasted(2776) into ArrayType: Wasted[](5040) at 0", "Insert SimpleName: Integer(5057) into SimpleType: Integer(5058) at 0", "Insert SimpleName: getHashes(5061) into MethodInvocation(5062) at 0", "Insert InfixExpression: ==(5072) into InfixExpression: ||(5075) at 0", "Insert PrefixExpression: !(5074) into InfixExpression: ||(5075) at 1", "Insert ArrayType: Wasted[](5321) into VariableDeclarationStatement(5325) at 0", "Insert VariableDeclarationFragment(5324) into VariableDeclarationStatement(5325) at 1", "Insert ParameterizedType: Set<Wasted>(5330) into VariableDeclarationStatement(5334) at 0", "Insert VariableDeclarationFragment(5333) into VariableDeclarationStatement(5334) at 1", "Insert SingleVariableDeclaration(5338) into EnhancedForStatement(5447) at 0", "Insert SimpleName: hashes(5339) into EnhancedForStatement(5447) at 1", "Insert Block(5446) into EnhancedForStatement(5447) at 2", "Insert InfixExpression: !=(5450) into IfStatement(5615) at 0", "Insert Block(5524) into IfStatement(5615) at 1", "Insert IfStatement(5614) into IfStatement(5615) at 2", "Update SimpleName: size(5765) to cacheSize", "Insert IfStatement(5949) into Block(6055) at 6", "Move MethodInvocation(2182) into InfixExpression: -(7403) at 0", "Insert NumberLiteral: 1(7402) into InfixExpression: -(7403) at 1", "Insert PrimitiveType: int(7409) into VariableDeclarationStatement(7418) at 0", "Insert VariableDeclarationFragment(7417) into VariableDeclarationStatement(7418) at 1", "Insert PrimitiveType: int(7419) into VariableDeclarationStatement(7426) at 0", "Insert VariableDeclarationFragment(7425) into VariableDeclarationStatement(7426) at 1", "Insert InfixExpression: <(7429) into IfStatement(7447) at 0", "Insert ExpressionStatement(7435) into IfStatement(7447) at 1", "Insert IfStatement(7446) into IfStatement(7447) at 2", "Update ParameterizedType: HashSet<>(7363) to ArrayList<>", "Update SimpleName: searchedHashes(7509) to searchHashes", "Move SimpleName: searchedHashes(7509) into MethodInvocation(7623) at 0", "Update SimpleName: contains(7510) to size", "Move SimpleName: contains(7510) into MethodInvocation(7623) at 1", "Insert SimpleName: searchSize(7626) into InfixExpression: ==(7628) at 0", "Insert NumberLiteral: 0(7627) into InfixExpression: ==(7628) at 1", "Update SimpleName: searchedHashes(7521) to searchHashes", "Move SimpleName: searchedHashes(7521) into MethodInvocation(7632) at 0", "Update SimpleName: toArray(7522) to contains", "Move SimpleName: toArray(7522) into MethodInvocation(7632) at 1", "Insert NumberLiteral: 0(7631) into MethodInvocation(7632) at 2", "Update SimpleName: searchedHashes(7527) to Collections", "Move SimpleName: searchedHashes(7527) into MethodInvocation(7636) at 0", "Update SimpleName: size(7528) to emptyList", "Move SimpleName: size(7528) into MethodInvocation(7636) at 1", "Insert SimpleName: weakAgents(724) into Assignment: =(726) at 0", "Insert QualifiedName: Pooler.EMPTY_INT_ARRAY(725) into Assignment: =(726) at 1", "Insert QualifiedName: newWeaks.length(2165) into InfixExpression: ==(2167) at 0", "Insert NumberLiteral: 0(2166) into InfixExpression: ==(2167) at 1", "Insert Assignment: =(2170) into ExpressionStatement(2171) at 0", "Insert VariableDeclarationFragment(2365) into VariableDeclarationExpression(2366) at 1", "Insert IfStatement(3221) into Block(3252) at 1", "Insert QualifiedName: bond.weakAgents.length(3579) into InfixExpression: ==(3581) at 0", "Insert NumberLiteral: 0(3580) into InfixExpression: ==(3581) at 1", "Insert ParenthesizedExpression(4183) into InfixExpression: ||(4187) at 0", "Insert MethodInvocation(5070) into InfixExpression: ==(5072) at 0", "Insert NumberLiteral: 0(5071) into InfixExpression: ==(5072) at 1", "Insert QualifiedName: cache.useMaps(5073) into PrefixExpression: !(5074) at 0", "Move SimpleType: Wasted(2669) into ArrayType: Wasted[](5321) at 0", "Insert Dimension(5320) into ArrayType: Wasted[](5321) at 1", "Insert SimpleName: oneWasted(5322) into VariableDeclarationFragment(5324) at 0", "Insert NullLiteral(5323) into VariableDeclarationFragment(5324) at 1", "Insert SimpleType: Set(5327) into ParameterizedType: Set<Wasted>(5330) at 0", "Insert SimpleType: Wasted(5329) into ParameterizedType: Set<Wasted>(5330) at 1", "Insert SimpleName: matchedWastedAirs(5331) into VariableDeclarationFragment(5333) at 0", "Insert NullLiteral(5332) into VariableDeclarationFragment(5333) at 1", "Move SimpleType: Integer(7351) into SingleVariableDeclaration(5338) at 0", "Insert SimpleName: hash(5337) into SingleVariableDeclaration(5338) at 1", "Insert VariableDeclarationStatement(5350) into Block(5446) at 0", "Insert IfStatement(5445) into Block(5446) at 1", "Insert SimpleName: matchedWastedAirs(5448) into InfixExpression: !=(5450) at 0", "Insert NullLiteral(5449) into InfixExpression: !=(5450) at 1", "Insert VariableDeclarationStatement(5455) into Block(5524) at 0", "Insert EnhancedForStatement(5523) into Block(5524) at 1", "Insert InfixExpression: !=(5527) into IfStatement(5614) at 0", "Insert Block(5613) into IfStatement(5614) at 1", "Update SimpleName: size(5760) to i", "Insert NumberLiteral: 0(5800) into VariableDeclarationFragment(5801) at 1", "Move InstanceofExpression(5824) into IfStatement(5949) at 0", "Move Block(5870) into IfStatement(5949) at 1", "Move IfStatement(5928) into IfStatement(5949) at 2", "Update SimpleName: testAgentFlag(2180) to list", "Insert SimpleName: size(7400) into MethodInvocation(7401) at 1", "Insert SimpleName: mid(7410) into VariableDeclarationFragment(7417) at 0", "Insert InfixExpression: >>>(7416) into VariableDeclarationFragment(7417) at 1", "Insert SimpleName: midVal(7420) into VariableDeclarationFragment(7425) at 0", "Insert MethodInvocation(7424) into VariableDeclarationFragment(7425) at 1", "Update SimpleName: chanNames(2202) to midVal", "Move SimpleName: chanNames(2202) into InfixExpression: <(7429) at 0", "Insert SimpleName: hash(7428) into InfixExpression: <(7429) at 1", "Insert Assignment: =(7434) into ExpressionStatement(7435) at 0", "Insert InfixExpression: >(7438) into IfStatement(7446) at 0", "Insert ExpressionStatement(7444) into IfStatement(7446) at 1", "Insert ReturnStatement(7445) into IfStatement(7446) at 2", "Update SimpleType: HashSet(7362) to ArrayList", "Update SimpleName: searchedHashes(7370) to searchHashes", "Update SimpleName: add(7406) to addHash", "Insert SimpleName: searchHashes(7517) into MethodInvocation(7518) at 2", "Update SimpleName: add(7416) to addHash", "Insert SimpleName: searchHashes(7527) into MethodInvocation(7528) at 2", "Update SimpleName: add(7426) to addHash", "Insert SimpleName: searchHashes(7537) into MethodInvocation(7538) at 2", "Update SimpleName: searchedHashes(7437) to addHash", "Move MethodInvocation(7462) into MethodInvocation(7552) at 1", "Update SimpleName: add(7438) to searchHashes", "Update SimpleName: add(7473) to addHash", "Insert SimpleName: searchHashes(7584) into MethodInvocation(7585) at 2", "Update SimpleName: add(7483) to addHash", "Insert SimpleName: searchHashes(7594) into MethodInvocation(7595) at 2", "Update SimpleName: add(7493) to addHash", "Insert SimpleName: searchHashes(7604) into MethodInvocation(7605) at 2", "Update SimpleName: add(7503) to addHash", "Insert SimpleName: searchHashes(7614) into MethodInvocation(7615) at 2", "Insert SimpleName: weakAgentLength(733) into ArrayCreation(734) at 1", "Insert SimpleName: weakAgents(2168) into Assignment: =(2170) at 0", "Insert QualifiedName: Pooler.EMPTY_INT_ARRAY(2169) into Assignment: =(2170) at 1", "Move SimpleName: i(2553) into VariableDeclarationFragment(2365) at 0", "Update QualifiedName: hashes.length(2558) to cache.hashZero", "Move QualifiedName: hashes.length(2558) into VariableDeclarationFragment(2365) at 1", "Insert InfixExpression: !=(3215) into IfStatement(3221) at 0", "Insert ExpressionStatement(3220) into IfStatement(3221) at 1", "Insert ParenthesizedExpression(4154) into InfixExpression: ==(4156) at 0", "Insert InfixExpression: &&(4182) into ParenthesizedExpression(4183) at 0", "Insert QualifiedName: channel.network(4185) into InfixExpression: !=(4186) at 1", "Insert SimpleName: hashes(5068) into MethodInvocation(5070) at 0", "Insert SimpleName: size(5069) into MethodInvocation(5070) at 1", "Insert SimpleName: Set(5326) into SimpleType: Set(5327) at 0", "Insert SimpleName: Wasted(5328) into SimpleType: Wasted(5329) at 0", "Insert ArrayType: Wasted[](5343) into VariableDeclarationStatement(5350) at 0", "Insert VariableDeclarationFragment(5349) into VariableDeclarationStatement(5350) at 1", "Insert InfixExpression: ==(5353) into IfStatement(5445) at 0", "Insert Block(5368) into IfStatement(5445) at 1", "Insert IfStatement(5444) into IfStatement(5445) at 2", "Insert PrimitiveType: int(5451) into VariableDeclarationStatement(5455) at 0", "Insert VariableDeclarationFragment(5454) into VariableDeclarationStatement(5455) at 1", "Insert SingleVariableDeclaration(5459) into EnhancedForStatement(5523) at 0", "Insert SimpleName: matchedWastedAirs(5460) into EnhancedForStatement(5523) at 1", "Insert Block(5522) into EnhancedForStatement(5523) at 2", "Insert SimpleName: oneWasted(5525) into InfixExpression: !=(5527) at 0", "Insert NullLiteral(5526) into InfixExpression: !=(5527) at 1", "Insert VariableDeclarationStatement(5532) into Block(5613) at 0", "Insert ForStatement(5612) into Block(5613) at 1", "Move Block(5820) into IfStatement(5948) at 2", "Insert MethodInvocation(6197) into InfixExpression: ||(6198) at 1", "Insert ParenthesizedExpression(7414) into InfixExpression: >>>(7416) at 0", "Insert NumberLiteral: 1(7415) into InfixExpression: >>>(7416) at 1", "Update SimpleName: chanName(2196) to list", "Move SimpleName: chanName(2196) into MethodInvocation(7424) at 0", "Update SimpleName: length(2197) to get", "Move SimpleName: length(2197) into MethodInvocation(7424) at 1", "Insert SimpleName: mid(7423) into MethodInvocation(7424) at 2", "Insert SimpleName: low(7430) into Assignment: =(7434) at 0", "Insert InfixExpression: +(7433) into Assignment: =(7434) at 1", "Update SimpleName: network(2211) to midVal", "Move SimpleName: network(2211) into InfixExpression: >(7438) at 0", "Insert SimpleName: hash(7437) into InfixExpression: >(7438) at 1", "Insert Assignment: =(7443) into ExpressionStatement(7444) at 0", "Update SimpleName: HashSet(7361) to ArrayList", "Insert SimpleName: cache(3213) into InfixExpression: !=(3215) at 0", "Insert NullLiteral(3214) into InfixExpression: !=(3215) at 1", "Insert MethodInvocation(3219) into ExpressionStatement(3220) at 0", "Insert Assignment: =(4153) into ParenthesizedExpression(4154) at 0", "Insert QualifiedName: channel.name(4158) into MethodInvocation(4159) at 1", "Move InfixExpression: ==(4433) into InfixExpression: &&(4182) at 0", "Insert ParenthesizedExpression(4181) into InfixExpression: &&(4182) at 1", "Insert ConditionalExpression(4559) into MethodInvocation(4560) at 2", "Move SimpleType: Wasted(2422) into ArrayType: Wasted[](5343) at 0", "Insert Dimension(5342) into ArrayType: Wasted[](5343) at 1", "Insert SimpleName: wasteds(5344) into VariableDeclarationFragment(5349) at 0", "Insert MethodInvocation(5348) into VariableDeclarationFragment(5349) at 1", "Update SimpleName: wastedAirs(5306) to oneWasted", "Move SimpleName: wastedAirs(5306) into InfixExpression: ==(5353) at 0", "Move NullLiteral(5307) into InfixExpression: ==(5353) at 1", "Insert IfStatement(5367) into Block(5368) at 0", "Insert InfixExpression: !=(5371) into IfStatement(5444) at 0", "Insert Block(5443) into IfStatement(5444) at 1", "Insert SimpleName: i(5452) into VariableDeclarationFragment(5454) at 0", "Insert NumberLiteral: 0(5453) into VariableDeclarationFragment(5454) at 1", "Insert SimpleType: Wasted(5457) into SingleVariableDeclaration(5459) at 0", "Insert SimpleName: currWaste(5458) into SingleVariableDeclaration(5459) at 1", "Insert VariableDeclarationStatement(5468) into Block(5522) at 0", "Insert IfStatement(5473) into Block(5522) at 1", "Insert IfStatement(5498) into Block(5522) at 2", "Insert IfStatement(5521) into Block(5522) at 3", "Insert PrimitiveType: int(5528) into VariableDeclarationStatement(5532) at 0", "Insert VariableDeclarationFragment(5531) into VariableDeclarationStatement(5532) at 1", "Move VariableDeclarationExpression(2365) into ForStatement(5612) at 0", "Insert InfixExpression: <(5540) into ForStatement(5612) at 1", "Insert PostfixExpression: ++(5542) into ForStatement(5612) at 2", "Insert Block(5611) into ForStatement(5612) at 3", "Update ParameterizedType: List<Airing>(5847) to ArrayList<Airing>", "Update SimpleType: List(5873) to ArrayList", "Insert SimpleName: Sage(6193) into MethodInvocation(6197) at 0", "Insert SimpleName: getBoolean(6194) into MethodInvocation(6197) at 1", "Insert StringLiteral: \"aggressive_negative_profiling\"(6195) into MethodInvocation(6197) at 2", "Insert BooleanLiteral: false(6196) into MethodInvocation(6197) at 3", "Insert InfixExpression: +(7413) into ParenthesizedExpression(7414) at 0", "Insert SimpleName: mid(7431) into InfixExpression: +(7433) at 0", "Update NumberLiteral: 0(2206) to 1", "Move NumberLiteral: 0(2206) into InfixExpression: +(7433) at 1", "Insert SimpleName: high(7439) into Assignment: =(7443) at 0", "Insert InfixExpression: -(7442) into Assignment: =(7443) at 1", "Update SimpleName: searchedHashes(7383) to searchHashes", "Update SimpleName: searchedHashes(7393) to searchHashes", "Update SimpleName: searchedHashes(7458) to addHash", "Move MethodInvocation(7441) into MethodInvocation(7573) at 1", "Update SimpleName: add(7459) to searchHashes", "Insert Block(2476) into ForStatement(2477) at 3", "Insert QualifiedName: cache.airWorkCache(3216) into MethodInvocation(3219) at 0", "Insert SimpleName: ensureAddCapacity(3217) into MethodInvocation(3219) at 1", "Insert QualifiedName: airings.length(3218) into MethodInvocation(3219) at 2", "Insert SimpleName: channel(4149) into Assignment: =(4153) at 0", "Move MethodInvocation(4415) into Assignment: =(4153) at 1", "Insert SimpleName: channel(4170) into InfixExpression: ==(4172) at 0", "Insert InfixExpression: ==(4180) into ParenthesizedExpression(4181) at 0", "Insert InfixExpression: !=(4554) into ConditionalExpression(4559) at 0", "Insert QualifiedName: channel.name(4555) into ConditionalExpression(4559) at 1", "Move MethodInvocation(4808) into ConditionalExpression(4559) at 2", "Insert SimpleName: wastedAirsMap(5345) into MethodInvocation(5348) at 0", "Insert SimpleName: get(5346) into MethodInvocation(5348) at 1", "Insert SimpleName: hash(5347) into MethodInvocation(5348) at 2", "Insert InfixExpression: !=(5356) into IfStatement(5367) at 0", "Insert Block(5366) into IfStatement(5367) at 1", "Update SimpleName: wastedAirsMap(5313) to wasteds", "Move SimpleName: wastedAirsMap(5313) into InfixExpression: !=(5371) at 0", "Move NullLiteral(5314) into InfixExpression: !=(5371) at 1", "Insert IfStatement(5415) into Block(5443) at 0", "Insert ForStatement(5437) into Block(5443) at 1", "Insert ExpressionStatement(5442) into Block(5443) at 2", "Insert SimpleName: Wasted(5456) into SimpleType: Wasted(5457) at 0", "Move SimpleType: Airing(2375) into VariableDeclarationStatement(5468) at 0", "Insert VariableDeclarationFragment(5467) into VariableDeclarationStatement(5468) at 1", "Insert InfixExpression: ==(5471) into IfStatement(5473) at 0", "Insert ContinueStatement(5472) into IfStatement(5473) at 1", "Insert MethodInvocation(5478) into IfStatement(5498) at 0", "Insert Block(5497) into IfStatement(5498) at 1", "Insert InfixExpression: &&(5507) into IfStatement(5521) at 0", "Move TryStatement(2463) into IfStatement(5521) at 1", "Insert SimpleName: airingsLength(5529) into VariableDeclarationFragment(5531) at 0", "Insert QualifiedName: oneWasted.length(5530) into VariableDeclarationFragment(5531) at 1", "Insert SimpleName: i(5538) into InfixExpression: <(5540) at 0", "Insert SimpleName: airingsLength(5539) into InfixExpression: <(5540) at 1", "Insert SimpleName: i(5541) into PostfixExpression: ++(5542) at 0", "Insert VariableDeclarationStatement(5550) into Block(5611) at 0", "Insert VariableDeclarationStatement(5558) into Block(5611) at 1", "Insert IfStatement(5563) into Block(5611) at 2", "Insert IfStatement(5588) into Block(5611) at 3", "Insert IfStatement(5610) into Block(5611) at 4", "Insert SimpleName: cacheSize(5746) into InfixExpression: /(5748) at 0", "Move CastExpression(5831) into MethodInvocation(5863) at 2", "Insert SimpleType: ArrayList(5867) into ParameterizedType: ArrayList<Airing>(5870) at 0", "Insert ClassInstanceCreation(5875) into VariableDeclarationFragment(5876) at 1", "Insert CastExpression(5883) into MethodInvocation(5884) at 2", "Update SimpleName: List(5872) to ArrayList", "Update SimpleName: category(2188) to low", "Move SimpleName: category(2188) into InfixExpression: +(7413) at 0", "Insert SimpleName: high(7412) into InfixExpression: +(7413) at 1", "Update SimpleName: rated(2215) to mid", "Move SimpleName: rated(2215) into InfixExpression: -(7442) at 0", "Insert NumberLiteral: 1(7441) into InfixExpression: -(7442) at 1", "Insert MethodInvocation(2410) into MethodInvocation(2411) at 2", "Move VariableDeclarationStatement(2644) into Block(2476) at 0", "Move IfStatement(2694) into Block(2476) at 1", "Insert ExpressionStatement(2743) into Block(2982) at 7", "Insert ParenthesizedExpression(4178) into InfixExpression: ==(4180) at 0", "Insert NullLiteral(4179) into InfixExpression: ==(4180) at 1", "Insert SimpleName: channel(4552) into InfixExpression: !=(4554) at 0", "Insert NullLiteral(4553) into InfixExpression: !=(4554) at 1", "Move ExpressionStatement(2408) into Block(5156) at 0", "Update SimpleName: wastedAirs(5309) to wasteds", "Move SimpleName: wastedAirs(5309) into InfixExpression: !=(5356) at 0", "Move NullLiteral(5310) into InfixExpression: !=(5356) at 1", "Insert ExpressionStatement(5360) into Block(5366) at 0", "Insert ExpressionStatement(5365) into Block(5366) at 1", "Insert InfixExpression: ==(5374) into IfStatement(5415) at 0", "Insert Block(5414) into IfStatement(5415) at 1", "Insert VariableDeclarationExpression(5423) into ForStatement(5437) at 0", "Insert InfixExpression: <(5426) into ForStatement(5437) at 1", "Insert PostfixExpression: ++(5428) into ForStatement(5437) at 2", "Insert Block(5436) into ForStatement(5437) at 3", "Insert MethodInvocation(5441) into ExpressionStatement(5442) at 0", "Insert SimpleName: testW(5463) into VariableDeclarationFragment(5467) at 0", "Insert MethodInvocation(5466) into VariableDeclarationFragment(5467) at 1", "Insert SimpleName: testW(5469) into InfixExpression: ==(5471) at 0", "Insert NullLiteral(5470) into InfixExpression: ==(5471) at 1", "Update SimpleName: optimizedFollowsTrend(5559) to followsTrend", "Move SimpleName: optimizedFollowsTrend(5559) into MethodInvocation(5478) at 0", "Insert SimpleName: testW(5475) into MethodInvocation(5478) at 1", "Move BooleanLiteral: false(5560) into MethodInvocation(5478) at 2", "Insert SimpleName: sbCache(5477) into MethodInvocation(5478) at 3", "Insert IfStatement(5483) into Block(5497) at 0", "Insert IfStatement(5496) into Block(5497) at 1", "Insert SimpleName: controlCPUUsage(5499) into InfixExpression: &&(5507) at 0", "Insert InfixExpression: ==(5506) into InfixExpression: &&(5507) at 1", "Insert SimpleType: Wasted(5544) into VariableDeclarationStatement(5550) at 0", "Insert VariableDeclarationFragment(5549) into VariableDeclarationStatement(5550) at 1", "Move SimpleType: Airing(5826) into VariableDeclarationStatement(5558) at 0", "Insert VariableDeclarationFragment(5557) into VariableDeclarationStatement(5558) at 1", "Insert InfixExpression: ==(5561) into IfStatement(5563) at 0", "Insert ContinueStatement(5562) into IfStatement(5563) at 1", "Insert MethodInvocation(5568) into IfStatement(5588) at 0", "Insert Block(5587) into IfStatement(5588) at 1", "Insert InfixExpression: &&(5596) into IfStatement(5610) at 0", "Insert TryStatement(5609) into IfStatement(5610) at 1", "Insert SimpleName: ArrayList(5866) into SimpleType: ArrayList(5867) at 0", "Insert ParameterizedType: ArrayList<>(5874) into ClassInstanceCreation(5875) at 0", "Insert SimpleType: Airing(5881) into CastExpression(5883) at 0", "Insert SimpleName: airSet(5882) into CastExpression(5883) at 1", "Insert ExpressionStatement(5974) into IfStatement(5980) at 1", "Move ExpressionStatement(5965) into IfStatement(5980) at 2", "Insert ExpressionStatement(6001) into IfStatement(6007) at 1", "Move ExpressionStatement(5997) into IfStatement(6007) at 2", "Insert ExpressionStatement(6040) into IfStatement(6046) at 1", "Move ExpressionStatement(6042) into IfStatement(6046) at 2", "Insert SimpleName: hashes(2407) into MethodInvocation(2410) at 0", "Insert SimpleName: get(2408) into MethodInvocation(2410) at 1", "Insert SimpleName: i(2409) into MethodInvocation(2410) at 2", "Move MethodInvocation(2651) into IfStatement(2475) at 0", "Move MethodInvocation(3025) into ExpressionStatement(2743) at 0", "Insert Assignment: =(4177) into ParenthesizedExpression(4178) at 0", "Insert Assignment: =(5359) into ExpressionStatement(5360) at 0", "Insert MethodInvocation(5364) into ExpressionStatement(5365) at 0", "Update SimpleName: wastedAirsMap(5317) to matchedWastedAirs", "Move SimpleName: wastedAirsMap(5317) into InfixExpression: ==(5374) at 0", "Move NullLiteral(5318) into InfixExpression: ==(5374) at 1", "Insert ExpressionStatement(5391) into Block(5414) at 0", "Insert ForStatement(5413) into Block(5414) at 1", "Insert PrimitiveType: int(5416) into VariableDeclarationExpression(5423) at 0", "Move VariableDeclarationFragment(5759) into VariableDeclarationExpression(5423) at 1", "Insert VariableDeclarationFragment(5422) into VariableDeclarationExpression(5423) at 2", "Insert SimpleName: i(5424) into InfixExpression: <(5426) at 0", "Insert SimpleName: wastedsLength(5425) into InfixExpression: <(5426) at 1", "Insert SimpleName: i(5427) into PostfixExpression: ++(5428) at 0", "Insert ExpressionStatement(5435) into Block(5436) at 0", "Insert QualifiedName: cache.airWorkCache(5438) into MethodInvocation(5441) at 0", "Insert SimpleName: ensureAddCapacity(5439) into MethodInvocation(5441) at 1", "Insert QualifiedName: wasteds.length(5440) into MethodInvocation(5441) at 2", "Insert SimpleName: currWaste(5464) into MethodInvocation(5466) at 0", "Insert SimpleName: getAiring(5465) into MethodInvocation(5466) at 1", "Insert QualifiedName: currWaste.manual(5479) into IfStatement(5483) at 0", "Insert ExpressionStatement(5482) into IfStatement(5483) at 1", "Insert InfixExpression: <(5490) into IfStatement(5496) at 0", "Insert ExpressionStatement(5495) into IfStatement(5496) at 1", "Insert ParenthesizedExpression(5504) into InfixExpression: ==(5506) at 0", "Insert NumberLiteral: 0(5505) into InfixExpression: ==(5506) at 1", "Insert SimpleName: Wasted(5543) into SimpleType: Wasted(5544) at 0", "Insert SimpleName: currWaste(5545) into VariableDeclarationFragment(5549) at 0", "Insert ArrayAccess(5548) into VariableDeclarationFragment(5549) at 1", "Insert SimpleName: testW(5553) into VariableDeclarationFragment(5557) at 0", "Insert MethodInvocation(5556) into VariableDeclarationFragment(5557) at 1", "Insert SimpleName: testW(5559) into InfixExpression: ==(5561) at 0", "Insert NullLiteral(5560) into InfixExpression: ==(5561) at 1", "Insert SimpleName: followsTrend(5564) into MethodInvocation(5568) at 0", "Insert SimpleName: testW(5565) into MethodInvocation(5568) at 1", "Update BooleanLiteral: true(5567) to false", "Move BooleanLiteral: true(5567) into MethodInvocation(5568) at 2", "Insert SimpleName: sbCache(5567) into MethodInvocation(5568) at 3", "Insert IfStatement(5573) into Block(5587) at 0", "Insert IfStatement(5586) into Block(5587) at 1", "Insert SimpleName: controlCPUUsage(5589) into InfixExpression: &&(5596) at 0", "Insert InfixExpression: ==(5595) into InfixExpression: &&(5596) at 1", "Insert Block(5602) into TryStatement(5609) at 0", "Insert CatchClause(5608) into TryStatement(5609) at 1", "Insert SimpleType: ArrayList(5873) into ParameterizedType: ArrayList<>(5874) at 0", "Insert SimpleName: Airing(5880) into SimpleType: Airing(5881) at 0", "Move MethodInvocation(5958) into ExpressionStatement(5974) at 0", "Move MethodInvocation(5990) into ExpressionStatement(6001) at 0", "Move MethodInvocation(6035) into ExpressionStatement(6040) at 0", "Move IfStatement(2661) into Block(2474) at 0", "Move ExpressionStatement(2666) into Block(2474) at 1", "Update SimpleName: add(3023) to addAll", "Update SimpleName: hash(3024) to hashes", "Insert SimpleName: channel(4173) into Assignment: =(4177) at 0", "Move MethodInvocation(4409) into Assignment: =(4177) at 1", "Insert SimpleName: oneWasted(5357) into Assignment: =(5359) at 0", "Insert SimpleName: wasteds(5358) into Assignment: =(5359) at 1", "Insert QualifiedName: cache.airWorkCache(5361) into MethodInvocation(5364) at 0", "Insert SimpleName: ensureAddCapacity(5362) into MethodInvocation(5364) at 1", "Insert QualifiedName: wasteds.length(5363) into MethodInvocation(5364) at 2", "Insert Assignment: =(5390) into ExpressionStatement(5391) at 0", "Insert VariableDeclarationExpression(5399) into ForStatement(5413) at 0", "Insert InfixExpression: <(5402) into ForStatement(5413) at 1", "Move PostfixExpression: ++(2370) into ForStatement(5413) at 2", "Insert Block(5412) into ForStatement(5413) at 3", "Insert SimpleName: wastedsLength(5420) into VariableDeclarationFragment(5422) at 0", "Insert QualifiedName: wasteds.length(5421) into VariableDeclarationFragment(5422) at 1", "Insert MethodInvocation(5434) into ExpressionStatement(5435) at 0", "Insert PostfixExpression: ++(5481) into ExpressionStatement(5482) at 0", "Insert MethodInvocation(5488) into InfixExpression: <(5490) at 0", "Insert NumberLiteral: 0(5489) into InfixExpression: <(5490) at 1", "Insert MethodInvocation(5494) into ExpressionStatement(5495) at 0", "Insert InfixExpression: %(5503) into ParenthesizedExpression(5504) at 0", "Insert SimpleName: oneWasted(5546) into ArrayAccess(5548) at 0", "Insert SimpleName: i(5547) into ArrayAccess(5548) at 1", "Insert SimpleName: currWaste(5554) into MethodInvocation(5556) at 0", "Insert SimpleName: getAiring(5555) into MethodInvocation(5556) at 1", "Insert QualifiedName: currWaste.manual(5569) into IfStatement(5573) at 0", "Insert ExpressionStatement(5572) into IfStatement(5573) at 1", "Insert InfixExpression: <(5580) into IfStatement(5586) at 0", "Insert ExpressionStatement(5585) into IfStatement(5586) at 1", "Insert ParenthesizedExpression(5593) into InfixExpression: ==(5595) at 0", "Insert NumberLiteral: 0(5594) into InfixExpression: ==(5595) at 1", "Insert ExpressionStatement(5601) into Block(5602) at 0", "Insert SingleVariableDeclaration(5606) into CatchClause(5608) at 0", "Insert Block(5607) into CatchClause(5608) at 1", "Insert SimpleName: ArrayList(5872) into SimpleType: ArrayList(5873) at 0", "Move ClassInstanceCreation(5951) into MethodInvocation(5973) at 3", "Insert ClassInstanceCreation(5999) into MethodInvocation(6000) at 3", "Move ClassInstanceCreation(6028) into MethodInvocation(6039) at 3", "Insert SimpleName: matchedWastedAirs(5375) into Assignment: =(5390) at 0", "Insert MethodInvocation(5389) into Assignment: =(5390) at 1", "Insert PrimitiveType: int(5392) into VariableDeclarationExpression(5399) at 0", "Insert VariableDeclarationFragment(5395) into VariableDeclarationExpression(5399) at 1", "Insert VariableDeclarationFragment(5398) into VariableDeclarationExpression(5399) at 2", "Insert SimpleName: i(5400) into InfixExpression: <(5402) at 0", "Insert SimpleName: oneWastedLength(5401) into InfixExpression: <(5402) at 1", "Insert ExpressionStatement(5411) into Block(5412) at 0", "Insert SimpleName: matchedWastedAirs(5429) into MethodInvocation(5434) at 0", "Insert SimpleName: add(5430) into MethodInvocation(5434) at 1", "Insert ArrayAccess(5433) into MethodInvocation(5434) at 2", "Insert SimpleName: numManualWaste(5480) into PostfixExpression: ++(5481) at 0", "Insert QualifiedName: cache.airWorkCache(5484) into MethodInvocation(5488) at 0", "Insert SimpleName: binarySearch(5485) into MethodInvocation(5488) at 1", "Insert SimpleName: numWatchedAirs(5486) into MethodInvocation(5488) at 2", "Insert SimpleName: testW(5487) into MethodInvocation(5488) at 3", "Insert QualifiedName: cache.airWorkCache(5491) into MethodInvocation(5494) at 0", "Insert SimpleName: add(5492) into MethodInvocation(5494) at 1", "Insert SimpleName: testW(5493) into MethodInvocation(5494) at 2", "Insert PostfixExpression: ++(5501) into InfixExpression: %(5503) at 0", "Insert SimpleName: CPU_CONTROL_MOD_COUNT(5502) into InfixExpression: %(5503) at 1", "Insert PostfixExpression: ++(5571) into ExpressionStatement(5572) at 0", "Insert MethodInvocation(5578) into InfixExpression: <(5580) at 0", "Insert NumberLiteral: 0(5579) into InfixExpression: <(5580) at 1", "Move MethodInvocation(5690) into ExpressionStatement(5585) at 0", "Insert InfixExpression: %(5592) into ParenthesizedExpression(5593) at 0", "Insert MethodInvocation(5600) into ExpressionStatement(5601) at 0", "Insert SimpleType: Exception(5604) into SingleVariableDeclaration(5606) at 0", "Insert SimpleName: e(5605) into SingleVariableDeclaration(5606) at 1", "Insert SimpleType: ArrayList(5909) into CastExpression(5911) at 0", "Insert SimpleType: MutableInteger(5997) into ClassInstanceCreation(5999) at 0", "Insert NumberLiteral: 1(5998) into ClassInstanceCreation(5999) at 1", "Insert SimpleName: Collections(5376) into MethodInvocation(5389) at 0", "Insert SimpleName: newSetFromMap(5377) into MethodInvocation(5389) at 1", "Insert ClassInstanceCreation(5388) into MethodInvocation(5389) at 2", "Insert SimpleName: i(5393) into VariableDeclarationFragment(5395) at 0", "Insert NumberLiteral: 0(5394) into VariableDeclarationFragment(5395) at 1", "Insert SimpleName: oneWastedLength(5396) into VariableDeclarationFragment(5398) at 0", "Insert QualifiedName: oneWasted.length(5397) into VariableDeclarationFragment(5398) at 1", "Insert MethodInvocation(5410) into ExpressionStatement(5411) at 0", "Insert SimpleName: wasteds(5431) into ArrayAccess(5433) at 0", "Insert SimpleName: i(5432) into ArrayAccess(5433) at 1", "Insert SimpleName: i(5500) into PostfixExpression: ++(5501) at 0", "Insert SimpleName: numManualWaste(5570) into PostfixExpression: ++(5571) at 0", "Insert QualifiedName: cache.airWorkCache(5574) into MethodInvocation(5578) at 0", "Insert SimpleName: binarySearch(5575) into MethodInvocation(5578) at 1", "Insert SimpleName: numWatchedAirs(5576) into MethodInvocation(5578) at 2", "Insert SimpleName: testW(5577) into MethodInvocation(5578) at 3", "Insert QualifiedName: cache.airWorkCache(5581) into MethodInvocation(5584) at 0", "Update SimpleName: cache(5688) to add", "Update SimpleName: resetNextAiringList(5689) to testW", "Insert SimpleName: i(5590) into InfixExpression: %(5592) at 0", "Insert SimpleName: CPU_CONTROL_MOD_COUNT(5591) into InfixExpression: %(5592) at 1", "Insert SimpleName: Thread(5597) into MethodInvocation(5600) at 0", "Insert SimpleName: sleep(5598) into MethodInvocation(5600) at 1", "Insert QualifiedName: Carny.SLEEP_PERIOD(5599) into MethodInvocation(5600) at 2", "Insert SimpleName: Exception(5603) into SimpleType: Exception(5604) at 0", "Insert SimpleName: ArrayList(5908) into SimpleType: ArrayList(5909) at 0", "Insert SimpleName: MutableInteger(5996) into SimpleType: MutableInteger(5997) at 0", "Insert ParameterizedType: IdentityHashMap<Wasted,Boolean>(5384) into ClassInstanceCreation(5388) at 0", "Insert InfixExpression: +(5387) into ClassInstanceCreation(5388) at 1", "Insert SimpleName: matchedWastedAirs(5405) into MethodInvocation(5410) at 0", "Insert SimpleName: add(5406) into MethodInvocation(5410) at 1", "Insert ArrayAccess(5409) into MethodInvocation(5410) at 2", "Insert SimpleType: IdentityHashMap(5379) into ParameterizedType: IdentityHashMap<Wasted,Boolean>(5384) at 0", "Insert SimpleType: Wasted(5381) into ParameterizedType: IdentityHashMap<Wasted,Boolean>(5384) at 1", "Insert SimpleType: Boolean(5383) into ParameterizedType: IdentityHashMap<Wasted,Boolean>(5384) at 2", "Insert QualifiedName: oneWasted.length(5385) into InfixExpression: +(5387) at 0", "Insert QualifiedName: wasteds.length(5386) into InfixExpression: +(5387) at 1", "Insert SimpleName: oneWasted(5407) into ArrayAccess(5409) at 0", "Insert SimpleName: i(5408) into ArrayAccess(5409) at 1", "Insert SimpleType: ArrayList(5923) into CastExpression(5925) at 0", "Insert ExpressionStatement(2837) into Block(2920) at 0", "Insert SimpleName: IdentityHashMap(5378) into SimpleType: IdentityHashMap(5379) at 0", "Insert SimpleName: Wasted(5380) into SimpleType: Wasted(5381) at 0", "Insert SimpleName: Boolean(5382) into SimpleType: Boolean(5383) at 0", "Insert SimpleName: ArrayList(5922) into SimpleType: ArrayList(5923) at 0", "Insert MethodInvocation(2836) into ExpressionStatement(2837) at 0", "Insert SimpleName: thisAirHashes(2831) into MethodInvocation(2836) at 0", "Insert SimpleName: add(2832) into MethodInvocation(2836) at 1", "Insert MethodInvocation(2835) into MethodInvocation(2836) at 2", "Insert SimpleName: entry(2833) into MethodInvocation(2835) at 0", "Insert SimpleName: getKey(2834) into MethodInvocation(2835) at 1", "Delete PrimitiveType: int(466)", "Delete Dimension(467)", "Delete ArrayType: int[](468)", "Delete NumberLiteral: 0(469)", "Delete ArrayCreation(470)", "Delete PrimitiveType: boolean(2265)", "Delete SimpleName: countManualWasted(2266)", "Delete SingleVariableDeclaration(2267)", "Delete Dimension(2282)", "Delete ArrayType: Integer[](2283)", "Delete MethodInvocation(2293)", "Delete NumberLiteral: 0(2294)", "Delete InfixExpression: >(2295)", "Delete SimpleName: slotType(2296)", "Delete NumberLiteral: 0(2297)", "Delete InfixExpression: !=(2298)", "Delete SimpleName: timeslots(2299)", "Delete NullLiteral(2300)", "Delete InfixExpression: !=(2301)", "Delete InfixExpression: &&(2302)", "Delete QualifiedName: timeslots.length(2303)", "Delete NumberLiteral: 0(2304)", "Delete InfixExpression: >(2305)", "Delete InfixExpression: &&(2306)", "Delete ParenthesizedExpression(2307)", "Delete InfixExpression: ||(2308)", "Delete ParenthesizedExpression(2309)", "Delete QualifiedName: hashes.length(2310)", "Delete NumberLiteral: 0(2311)", "Delete InfixExpression: ==(2312)", "Delete InfixExpression: &&(2313)", "Delete ParenthesizedExpression(2314)", "Delete SimpleName: countManualWasted(2317)", "Delete QualifiedName: cache.processedWaste(2318)", "Delete SimpleName: clear(2319)", "Delete MethodInvocation(2320)", "Delete ExpressionStatement(2321)", "Delete QualifiedName: cache.manualWasted(2322)", "Delete NumberLiteral: 0(2323)", "Delete Assignment: =(2324)", "Delete ExpressionStatement(2325)", "Delete Block(2326)", "Delete IfStatement(2327)", "Delete PrimitiveType: int(2350)", "Delete SimpleName: searchStart(2351)", "Delete QualifiedName: cache.airWorkCache.offset(2352)", "Delete VariableDeclarationFragment(2353)", "Delete VariableDeclarationStatement(2354)", "Delete PrimitiveType: int(2355)", "Delete SimpleName: searchEnd(2356)", "Delete QualifiedName: cache.airWorkCache.size(2357)", "Delete VariableDeclarationFragment(2358)", "Delete VariableDeclarationStatement(2359)", "Delete SimpleName: countManualWasted(2360)", "Delete SimpleName: i(2366)", "Delete QualifiedName: allAirings.length(2367)", "Delete InfixExpression: <(2368)", "Delete SimpleName: Airing(2371)", "Delete SimpleType: Airing(2372)", "Delete SimpleName: airing(2373)", "Delete SimpleName: allAirings(2376)", "Delete SimpleName: i(2377)", "Delete ArrayAccess(2378)", "Delete CastExpression(2379)", "Delete VariableDeclarationFragment(2380)", "Delete VariableDeclarationStatement(2381)", "Delete PrimitiveType: boolean(2382)", "Delete SimpleName: contains(2383)", "Delete QualifiedName: cache.airWorkCache(2384)", "Delete SimpleName: binarySearch(2385)", "Delete SimpleName: searchStart(2386)", "Delete SimpleName: searchEnd(2387)", "Delete SimpleName: airing(2388)", "Delete MethodInvocation(2389)", "Delete NumberLiteral: 0(2390)", "Delete InfixExpression: >=(2391)", "Delete VariableDeclarationFragment(2392)", "Delete VariableDeclarationStatement(2393)", "Delete SimpleName: contains(2394)", "Delete PrefixExpression: !(2395)", "Delete SimpleName: followsTrend(2396)", "Delete SimpleName: airing(2397)", "Delete SimpleName: mustBeViewable(2398)", "Delete SimpleName: sbCache(2399)", "Delete SimpleName: skipKeyword(2400)", "Delete SimpleName: ignoreDisabledFlag(2401)", "Delete MethodInvocation(2402)", "Delete InfixExpression: &&(2403)", "Delete QualifiedName: cache.airWorkCache(2409)", "Delete SimpleName: add(2410)", "Delete SimpleName: airing(2411)", "Delete MethodInvocation(2412)", "Delete ExpressionStatement(2413)", "Delete SimpleName: contains(2414)", "Delete BooleanLiteral: true(2415)", "Delete Assignment: =(2416)", "Delete ExpressionStatement(2417)", "Delete Block(2418)", "Delete IfStatement(2419)", "Delete SimpleName: contains(2420)", "Delete SimpleName: wasted(2423)", "Delete SimpleName: wiz(2424)", "Delete SimpleName: getWastedForAiring(2425)", "Delete SimpleName: airing(2426)", "Delete MethodInvocation(2427)", "Delete VariableDeclarationFragment(2428)", "Delete VariableDeclarationStatement(2429)", "Delete SimpleName: wasted(2430)", "Delete NullLiteral(2431)", "Delete InfixExpression: !=(2432)", "Delete SimpleName: wasted(2433)", "Delete SimpleName: isManual(2434)", "Delete MethodInvocation(2435)", "Delete InfixExpression: &&(2436)", "Delete QualifiedName: cache.manualWasted(2437)", "Delete PostfixExpression: ++(2438)", "Delete ExpressionStatement(2439)", "Delete IfStatement(2440)", "Delete Block(2441)", "Delete IfStatement(2442)", "Delete SimpleName: i(2443)", "Delete SimpleName: CPU_CONTROL_MOD_COUNT(2444)", "Delete InfixExpression: %(2445)", "Delete ParenthesizedExpression(2446)", "Delete NumberLiteral: 0(2447)", "Delete InfixExpression: ==(2448)", "Delete SimpleName: controlCPUUsage(2449)", "Delete InfixExpression: &&(2450)", "Delete IfStatement(2464)", "Delete Block(2465)", "Delete ForStatement(2466)", "Delete Block(2467)", "Delete IfStatement(2533)", "Delete Block(2534)", "Delete QualifiedName: Carny.CacheList(2546)", "Delete SimpleType: Carny.CacheList(2547)", "Delete SimpleName: processedWaste(2548)", "Delete QualifiedName: cache.processedWaste(2549)", "Delete VariableDeclarationFragment(2550)", "Delete VariableDeclarationStatement(2551)", "Delete NumberLiteral: 1(2554)", "Delete PrefixExpression: -(2555)", "Delete VariableDeclarationFragment(2556)", "Delete SimpleName: hashesSize(2557)", "Delete VariableDeclarationFragment(2559)", "Delete SimpleName: hashes(2601)", "Delete SimpleName: i(2602)", "Delete ArrayAccess(2603)", "Delete SimpleName: countManualWasted(2667)", "Delete SimpleName: wasted(2670)", "Delete SimpleName: wiz(2671)", "Delete SimpleName: getWastedForAiring(2672)", "Delete SimpleName: airing(2673)", "Delete MethodInvocation(2674)", "Delete VariableDeclarationFragment(2675)", "Delete VariableDeclarationStatement(2676)", "Delete SimpleName: wasted(2677)", "Delete NullLiteral(2678)", "Delete InfixExpression: !=(2679)", "Delete SimpleName: wasted(2680)", "Delete SimpleName: isManual(2681)", "Delete MethodInvocation(2682)", "Delete InfixExpression: &&(2683)", "Delete QualifiedName: cache.manualWasted(2684)", "Delete PostfixExpression: ++(2685)", "Delete ExpressionStatement(2686)", "Delete IfStatement(2687)", "Delete SimpleName: processedWaste(2688)", "Delete SimpleName: add(2689)", "Delete SimpleName: airing(2690)", "Delete MethodInvocation(2691)", "Delete ExpressionStatement(2692)", "Delete Block(2695)", "Delete IfStatement(2696)", "Delete Block(2697)", "Delete SimpleName: countManualWasted(2765)", "Delete SimpleName: index(2766)", "Delete NumberLiteral: 0(2767)", "Delete InfixExpression: >=(2768)", "Delete InfixExpression: &&(2769)", "Delete SimpleName: processedWaste(2770)", "Delete SimpleName: binaryAdd(2771)", "Delete SimpleName: airing(2772)", "Delete MethodInvocation(2773)", "Delete InfixExpression: &&(2774)", "Delete SimpleName: wasted(2777)", "Delete SimpleName: wiz(2778)", "Delete SimpleName: getWastedForAiring(2779)", "Delete SimpleName: airing(2780)", "Delete MethodInvocation(2781)", "Delete VariableDeclarationFragment(2782)", "Delete VariableDeclarationStatement(2783)", "Delete SimpleName: wasted(2784)", "Delete NullLiteral(2785)", "Delete InfixExpression: !=(2786)", "Delete SimpleName: wasted(2787)", "Delete SimpleName: isManual(2788)", "Delete MethodInvocation(2789)", "Delete InfixExpression: &&(2790)", "Delete QualifiedName: cache.manualWasted(2791)", "Delete PostfixExpression: ++(2792)", "Delete ExpressionStatement(2793)", "Delete IfStatement(2794)", "Delete Block(2795)", "Delete IfStatement(2796)", "Delete PrimitiveType: int(2804)", "Delete SimpleName: optManualWaste(2805)", "Delete QualifiedName: cache.manualWasted(2806)", "Delete VariableDeclarationFragment(2807)", "Delete VariableDeclarationStatement(2808)", "Delete SimpleName: countManualWasted(2827)", "Delete SimpleName: optManualWaste(2831)", "Delete QualifiedName: cache.manualWasted(2832)", "Delete InfixExpression: !=(2833)", "Delete QualifiedName: Sage.DBG(2834)", "Delete QualifiedName: System.out(2835)", "Delete SimpleName: println(2836)", "Delete StringLiteral: \"Optimized manual waste \"(2837)", "Delete SimpleName: optManualWaste(2838)", "Delete StringLiteral: \" != full manual waste \"(2839)", "Delete QualifiedName: cache.manualWasted(2840)", "Delete InfixExpression: +(2841)", "Delete MethodInvocation(2842)", "Delete ExpressionStatement(2843)", "Delete IfStatement(2844)", "Delete Block(2845)", "Delete IfStatement(2846)", "Delete QualifiedName: cache.manualWasted(2851)", "Delete SimpleName: optManualWaste(2852)", "Delete Assignment: =(2853)", "Delete ExpressionStatement(2854)", "Delete SimpleName: hashes(3021)", "Delete ExpressionStatement(3026)", "Delete EnhancedForStatement(3027)", "Delete BooleanLiteral: false(3534)", "Delete SimpleName: name(4416)", "Delete FieldAccess(4417)", "Delete SimpleName: air(4429)", "Delete SimpleName: getChannel(4430)", "Delete MethodInvocation(4431)", "Delete SimpleName: air(4435)", "Delete SimpleName: getChannel(4436)", "Delete MethodInvocation(4437)", "Delete SimpleName: network(4438)", "Delete FieldAccess(4439)", "Delete SimpleName: Airing(5286)", "Delete SimpleType: Airing(5287)", "Delete InfixExpression: ==(5308)", "Delete InfixExpression: ==(5311)", "Delete InfixExpression: ||(5312)", "Delete InfixExpression: ==(5315)", "Delete InfixExpression: ||(5316)", "Delete InfixExpression: ==(5319)", "Delete InfixExpression: ||(5320)", "Delete VariableDeclarationFragment(5321)", "Delete VariableDeclarationStatement(5322)", "Delete BooleanLiteral: false(5437)", "Delete SimpleName: unoptimized(5453)", "Delete SimpleName: controlCPUUsage(5561)", "Delete BooleanLiteral: false(5562)", "Delete BooleanLiteral: false(5563)", "Delete SimpleName: wastedAirsMap(5564)", "Delete SimpleName: wastedAirs(5565)", "Delete SimpleName: cache(5566)", "Delete StringLiteral: \"wastedAirsMap\"(5568)", "Delete MethodInvocation(5569)", "Delete ExpressionStatement(5570)", "Delete SimpleName: numManualWaste(5571)", "Delete QualifiedName: cache.manualWasted(5572)", "Delete Assignment: =(5573)", "Delete ExpressionStatement(5574)", "Delete Block(5575)", "Delete IfStatement(5576)", "Delete ExpressionStatement(5691)", "Delete QualifiedName: cache.airWorkCache.size(5704)", "Delete QualifiedName: cache.airWorkCache.size(5761)", "Delete SimpleName: thisAiring(5827)", "Delete VariableDeclarationFragment(5832)", "Delete VariableDeclarationStatement(5833)", "Delete SimpleName: thisAiring(5836)", "Delete SimpleName: cache(5849)", "Delete SimpleName: getNextAiringList(5850)", "Delete MethodInvocation(5851)", "Delete SimpleName: thisAiring(5856)", "Delete SimpleName: airSet(5915)", "Delete CastExpression(5916)", "Delete ParenthesizedExpression(5917)", "Delete SimpleName: add(5918)", "Delete SimpleName: currAir(5919)", "Delete MethodInvocation(5920)", "Delete ExpressionStatement(5921)", "Delete SimpleName: IllegalArgumentException(5923)", "Delete SimpleType: IllegalArgumentException(5924)", "Delete ClassInstanceCreation(5925)", "Delete ThrowStatement(5926)", "Delete Block(5927)", "Delete SimpleName: airSet(5811)", "Delete NullLiteral(5812)", "Delete InfixExpression: ==(5813)", "Delete IfStatement(5929)", "Delete IfStatement(5930)", "Delete SimpleName: theFloat(5957)", "Delete SimpleName: theFloat(5947)", "Delete Assignment: =(5952)", "Delete ExpressionStatement(5953)", "Delete ExpressionStatement(5959)", "Delete Block(5960)", "Delete Block(5966)", "Delete SimpleName: theInt(5989)", "Delete SimpleName: theInt(5980)", "Delete SimpleName: MutableInteger(5981)", "Delete SimpleType: MutableInteger(5982)", "Delete ClassInstanceCreation(5983)", "Delete Assignment: =(5984)", "Delete ExpressionStatement(5985)", "Delete ExpressionStatement(5991)", "Delete Block(5992)", "Delete Block(5998)", "Delete SimpleName: theInt(6034)", "Delete SimpleName: theInt(6024)", "Delete Assignment: =(6029)", "Delete ExpressionStatement(6030)", "Delete ExpressionStatement(6036)", "Delete Block(6037)", "Delete Block(6043)", "Delete SimpleName: aggressiveNegativeProfiling(6191)", "Delete QualifiedName: Agent.RERUN_MASK(2181)", "Delete SimpleName: title(2173)", "Delete NullLiteral(2174)", "Delete InfixExpression: !=(2175)", "Delete SimpleName: testAgentFlag(2176)", "Delete QualifiedName: Agent.FIRSTRUN_MASK(2177)", "Delete MethodInvocation(2178)", "Delete InfixExpression: ||(2179)", "Delete InfixExpression: ||(2183)", "Delete NullLiteral(2185)", "Delete InfixExpression: !=(2186)", "Delete InfixExpression: ||(2187)", "Delete NullLiteral(2189)", "Delete InfixExpression: !=(2190)", "Delete InfixExpression: ||(2191)", "Delete SimpleName: subCategory(2192)", "Delete NullLiteral(2193)", "Delete InfixExpression: !=(2194)", "Delete InfixExpression: ||(2195)", "Delete MethodInvocation(2198)", "Delete NumberLiteral: 0(2199)", "Delete InfixExpression: >(2200)", "Delete InfixExpression: ||(2201)", "Delete NullLiteral(2203)", "Delete InfixExpression: !=(2204)", "Delete QualifiedName: chanNames.length(2205)", "Delete InfixExpression: >(2207)", "Delete InfixExpression: &&(2208)", "Delete ParenthesizedExpression(2209)", "Delete InfixExpression: ||(2210)", "Delete NullLiteral(2212)", "Delete InfixExpression: !=(2213)", "Delete InfixExpression: ||(2214)", "Delete NullLiteral(2216)", "Delete InfixExpression: !=(2217)", "Delete InfixExpression: ||(2218)", "Delete SimpleName: year(2219)", "Delete NullLiteral(2220)", "Delete InfixExpression: !=(2221)", "Delete InfixExpression: ||(2222)", "Delete SimpleName: pr(2223)", "Delete NullLiteral(2224)", "Delete InfixExpression: !=(2225)", "Delete InfixExpression: ||(2226)", "Delete ReturnStatement(2227)", "Delete Dimension(7352)", "Delete ArrayType: Integer[](7353)", "Delete SimpleName: Set(7355)", "Delete SimpleType: Set(7356)", "Delete SimpleName: Integer(7357)", "Delete SimpleType: Integer(7358)", "Delete SimpleName: searchedHashes(7405)", "Delete SimpleName: searchedHashes(7415)", "Delete SimpleName: searchedHashes(7425)", "Delete SimpleName: searchedHashes(7472)", "Delete SimpleName: searchedHashes(7482)", "Delete SimpleName: searchedHashes(7492)", "Delete SimpleName: searchedHashes(7502)", "Delete NumberLiteral: 0(7511)", "Delete MethodInvocation(7512)", "Delete Dimension(7515)", "Delete ArrayType: Integer[](7516)", "Delete NumberLiteral: 0(7517)", "Delete ArrayCreation(7518)", "Delete ReturnStatement(7519)", "Delete IfStatement(7520)", "Delete Dimension(7525)", "Delete ArrayType: Integer[](7526)", "Delete MethodInvocation(7529)", "Delete ArrayCreation(7530)", "Delete MethodInvocation(7531)", "Delete ReturnStatement(7532)"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}