{"application": "google-error-prone", "csha": "b41d11442eb441cdcbe6bb54220af204c63a5301", "files": [{"PreconditionsExpensiveString_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 8", "MOV ImportDeclaration to CompilationUnit at 16", "MOV ImportDeclaration to CompilationUnit at 12"]}, {"root": "INS ImportDeclaration to CompilationUnit at 20", "operations": ["INS QualifiedName: com.sun.tools.javac.tree.JCTree to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 20"]}, {"root": "UPDATE from com.sun.source.tree.LiteralTree to com.google.common.collect.Iterables", "operations": ["UPD QualifiedName: com.sun.source.tree.LiteralTree from com.sun.source.tree.LiteralTree to com.google.common.collect.Iterables"]}, {"root": "UPDATE from com.sun.source.tree.MemberSelectTree to com.google.errorprone.fixes.SuggestedFix", "operations": ["UPD QualifiedName: com.sun.source.tree.MemberSelectTree from com.sun.source.tree.MemberSelectTree to com.google.errorprone.fixes.SuggestedFix"]}, {"root": "UPDATE from java.util.List to com.google.errorprone.util.ASTHelpers", "operations": ["UPD QualifiedName: java.util.List from java.util.List to com.google.errorprone.util.ASTHelpers"]}, {"root": "UPDATE from Error checker for calls to the Preconditions class in Guava which use to Error checker for calls to the Preconditions class in Guava which use 'expensive' methods of", "operations": ["UPD TextElement: Error checker for calls to the Preconditions class in Guava which use from Error checker for calls to the Preconditions class in Guava which use to Error checker for calls to the Preconditions class in Guava which use 'expensive' methods of"]}, {"root": "UPDATE from 'expensive' methods of producing the error string. In most cases, users are to producing the error string. In most cases, users are better off using the equivalent methods", "operations": ["UPD TextElement: 'expensive' methods of producing the error string. In most cases, users are from 'expensive' methods of producing the error string. In most cases, users are to producing the error string. In most cases, users are better off using the equivalent methods"]}, {"root": "UPDATE from string until the test actually fails. to which defer the computation of the string until the test actually fails.", "operations": ["UPD TextElement: string until the test actually fails. from string until the test actually fails. to which defer the computation of the string until the test actually fails."]}, {"root": "UPDATE from t to tree", "operations": ["UPD SimpleName: t from t to tree", "UPD SimpleName: t from t to tree", "UPD SimpleName: methodInvocationTree from methodInvocationTree to tree", "UPD SimpleName: methodInvocationTree from methodInvocationTree to tree", "UPD SimpleName: t from t to tree"]}, {"root": "INS ReturnStatement to Block at 2", "operations": ["INS SimpleName: stringFormat to CastExpression at 1", "INS SimpleName: stringFormat to MethodInvocation at 1", "INS SimpleName: getStartPosition to MethodInvocation at 1", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: JCTree to SimpleType: JCTree at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleType: JCTree to CastExpression at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getStartPosition to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: SuggestedFix to MethodInvocation at 0", "INS SimpleType: JCTree to CastExpression at 0", "INS StringLiteral: \"\" to MethodInvocation at 4", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: replace to MethodInvocation at 1", "INS SimpleName: builder to MethodInvocation at 1", "INS SimpleName: state to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getEndPosition to MethodInvocation at 1", "INS ParenthesizedExpression to MethodInvocation at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: stringFormat to MethodInvocation at 0", "INS SimpleName: getArguments to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: JCTree to SimpleType: JCTree at 0", "INS ReturnStatement to Block at 2", "INS SimpleName: getEndPosition to MethodInvocation at 1", "INS SimpleType: JCTree to CastExpression at 0", "INS StringLiteral: \"\" to MethodInvocation at 4", "INS SimpleType: JCTree to CastExpression at 0", "INS SimpleName: JCTree to SimpleType: JCTree at 0", "INS SimpleName: stringFormat to CastExpression at 1", "INS CastExpression to MethodInvocation at 2", "INS SimpleName: build to MethodInvocation at 1", "INS SimpleName: describeMatch to MethodInvocation at 0", "INS CastExpression to MethodInvocation at 2", "INS CastExpression to ParenthesizedExpression at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: JCTree to SimpleType: JCTree at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: MethodInvocationTree to VariableDeclarationStatement at 0", "MOV MethodInvocation to CastExpression at 1"]}, {"root": "INS IfStatement to Block at 4", "operations": ["INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: formatString to InfixExpression: == at 0", "INS InfixExpression: == to IfStatement at 0", "INS IfStatement to Block at 4"]}, {"root": "UPDATE from method to stringFormat", "operations": ["UPD SimpleName: method from method to stringFormat"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from LiteralTree to String", "operations": ["UPD SimpleName: LiteralTree from LiteralTree to String", "UPD SimpleType: LiteralTree from LiteralTree to String"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: MethodInvocationTree to CastExpression at 0"]}, {"root": "INS MethodInvocation to CastExpression at 1", "operations": ["INS NumberLiteral: 1 to MethodInvocation at 2", "INS MethodInvocation to CastExpression at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: tree to MethodInvocation at 0"]}, {"root": "UPDATE from firstArg to formatString", "operations": ["UPD SimpleName: firstArg from firstArg to formatString", "UPD SimpleName: literal from literal to formatString"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: constValue to MethodInvocation at 1", "INS SimpleName: ASTHelpers to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS TypeLiteral to MethodInvocation at 3"]}, {"root": "UPDATE from getMethodSelect to get", "operations": ["UPD SimpleName: getMethodSelect from getMethodSelect to get"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: methodInvocationTree to MethodInvocation at 1", "MOV SimpleName: getMethodSelect to MethodInvocation at 1"]}, {"root": "UPDATE from methodInvocationTree to getArguments", "operations": ["UPD SimpleName: methodInvocationTree from methodInvocationTree to getArguments", "UPD SimpleName: arguments from arguments to getArguments"]}, {"root": "UPDATE from methodInvocationTree to replace", "operations": ["UPD SimpleName: methodInvocationTree from methodInvocationTree to replace"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: methodInvocationTree to MethodInvocation at 1"]}, {"root": "UPDATE from describeMatch to state", "operations": ["UPD SimpleName: describeMatch from describeMatch to state"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: describeMatch to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0", "MOV SimpleName: get to MethodInvocation at 1", "MOV NumberLiteral: 0 to MethodInvocation at 2"]}, {"root": "MOVE from TypeLiteral", "operations": ["MOV SimpleType: String to TypeLiteral at 0"]}, {"root": "INS ParenthesizedExpression to MethodInvocation at 0", "operations": ["INS ParenthesizedExpression to MethodInvocation at 0"]}, {"root": "UPDATE from arguments to Iterables", "operations": ["UPD SimpleName: arguments from arguments to Iterables"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: get to MethodInvocation at 1", "MOV SimpleName: arguments to MethodInvocation at 0"]}, {"root": "UPDATE from get to getLast", "operations": ["UPD SimpleName: get from get to getLast"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV CastExpression to ParenthesizedExpression at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: stringFormat to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from 1 to 0", "operations": ["UPD NumberLiteral: 1 from 1 to 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: arguments to MethodInvocation at 1"]}, {"root": "DEL TextElement: better off using the equivalent methods which defer the computation of the", "operations": ["DEL TextElement: better off using the equivalent methods which defer the computation of the"]}, {"root": "DEL SimpleType: ExpressionTree", "operations": ["DEL SimpleType: ExpressionTree", "DEL SimpleName: ExpressionTree"]}, {"root": "DEL SimpleType: MemberSelectTree", "operations": ["DEL SimpleName: MemberSelectTree", "DEL SimpleType: MemberSelectTree"]}, {"root": "DEL SimpleType: MemberSelectTree", "operations": ["DEL SimpleName: MemberSelectTree", "DEL SimpleType: MemberSelectTree"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: getArguments", "DEL ParameterizedType: List<? extends ExpressionTree>", "DEL SimpleName: ExpressionTree", "DEL MethodInvocation", "DEL SimpleName: List", "DEL WildcardType: ? extends ExpressionTree", "DEL SimpleName: arguments", "DEL SimpleType: ExpressionTree", "DEL SimpleType: List", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL CastExpression", "DEL SimpleName: stringFormat", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL NumberLiteral: 1"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: MethodInvocationTree", "DEL SimpleName: MethodInvocationTree", "DEL SimpleName: stringFormatInvocation", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: get", "DEL NumberLiteral: 0", "DEL ParenthesizedExpression", "DEL InstanceofExpression", "DEL IfStatement", "DEL SimpleType: LiteralTree", "DEL MethodInvocation", "DEL SimpleName: getArguments", "DEL SimpleName: stringFormatInvocation", "DEL SimpleName: LiteralTree", "DEL MethodInvocation", "DEL PrefixExpression: !"]}, {"root": "DEL SimpleName: stringFormatInvocation", "operations": ["DEL SimpleName: stringFormatInvocation"]}, {"root": "DEL CastExpression", "operations": ["DEL CastExpression", "DEL MethodInvocation", "DEL SimpleName: LiteralTree", "DEL SimpleType: LiteralTree"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: toString", "DEL MethodInvocation", "DEL SimpleName: getValue", "DEL SimpleName: firstArg", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: literal"]}]}}, {"PreconditionsExpensiveString_diff": {"operations": ["Move ImportDeclaration(31) into CompilationUnit(338) at 8", "Move ImportDeclaration(33) into CompilationUnit(338) at 12", "Move ImportDeclaration(39) into CompilationUnit(338) at 16", "Insert ImportDeclaration(41) into CompilationUnit(338) at 20", "Update QualifiedName: com.sun.source.tree.LiteralTree(30) to com.google.common.collect.Iterables", "Update QualifiedName: com.sun.source.tree.MemberSelectTree(32) to com.google.errorprone.fixes.SuggestedFix", "Update QualifiedName: java.util.List(38) to com.google.errorprone.util.ASTHelpers", "Insert QualifiedName: com.sun.tools.javac.tree.JCTree(40) into ImportDeclaration(41) at 0", "Update TextElement: Error checker for calls to the Preconditions class in Guava which use(42) to Error checker for calls to the Preconditions class in Guava which use 'expensive' methods of", "Update TextElement: 'expensive' methods of producing the error string. In most cases, users are(43) to producing the error string. In most cases, users are better off using the equivalent methods", "Update TextElement: string until the test actually fails.(45) to which defer the computation of the string until the test actually fails.", "Update SimpleName: methodInvocationTree(163) to tree", "Insert ReturnStatement(244) into Block(245) at 2", "Move SimpleType: MethodInvocationTree(206) into VariableDeclarationStatement(191) at 0", "Insert MethodInvocation(243) into ReturnStatement(244) at 0", "Update SimpleName: t(258) to tree", "Insert IfStatement(325) into Block(334) at 2", "Update SimpleName: method(181) to stringFormat", "Insert SimpleName: stringFormat(193) into MethodInvocation(243) at 1", "Insert MethodInvocation(242) into MethodInvocation(243) at 2", "Move Block(296) into IfStatement(297) at 1", "Update SimpleType: LiteralTree(299) to String", "Insert InfixExpression: ==(321) into IfStatement(325) at 0", "Move Block(272) into IfStatement(325) at 1", "Update SimpleName: methodInvocationTree(171) to tree", "Move SimpleType: MethodInvocationTree(203) into CastExpression(189) at 0", "Insert MethodInvocation(188) into CastExpression(189) at 1", "Insert MethodInvocation(240) into MethodInvocation(242) at 0", "Insert SimpleName: build(241) into MethodInvocation(242) at 1", "Update SimpleName: LiteralTree(298) to String", "Update SimpleName: firstArg(300) to formatString", "Insert MethodInvocation(316) into VariableDeclarationFragment(317) at 1", "Insert SimpleName: formatString(319) into InfixExpression: ==(321) at 0", "Insert NullLiteral(320) into InfixExpression: ==(321) at 1", "Insert MethodInvocation(185) into MethodInvocation(188) at 0", "Update SimpleName: getMethodSelect(185) to get", "Move SimpleName: getMethodSelect(185) into MethodInvocation(188) at 1", "Insert NumberLiteral: 1(187) into MethodInvocation(188) at 2", "Insert MethodInvocation(218) into MethodInvocation(240) at 0", "Insert SimpleName: replace(219) into MethodInvocation(240) at 1", "Insert MethodInvocation(231) into MethodInvocation(240) at 2", "Insert MethodInvocation(238) into MethodInvocation(240) at 3", "Insert StringLiteral: \"\"(239) into MethodInvocation(240) at 4", "Insert SimpleName: ASTHelpers(301) into MethodInvocation(316) at 0", "Insert SimpleName: constValue(302) into MethodInvocation(316) at 1", "Insert MethodInvocation(312) into MethodInvocation(316) at 2", "Insert TypeLiteral(315) into MethodInvocation(316) at 3", "Insert SimpleName: tree(183) into MethodInvocation(185) at 0", "Update SimpleName: methodInvocationTree(184) to getArguments", "Move SimpleName: methodInvocationTree(184) into MethodInvocation(185) at 1", "Insert MethodInvocation(196) into MethodInvocation(218) at 0", "Update SimpleName: methodInvocationTree(197) to replace", "Move SimpleName: methodInvocationTree(197) into MethodInvocation(218) at 1", "Insert MethodInvocation(204) into MethodInvocation(218) at 2", "Insert MethodInvocation(216) into MethodInvocation(218) at 3", "Insert StringLiteral: \"\"(217) into MethodInvocation(218) at 4", "Insert SimpleName: getEndPosition(221) into MethodInvocation(231) at 1", "Insert CastExpression(230) into MethodInvocation(231) at 2", "Insert SimpleName: state(232) into MethodInvocation(238) at 0", "Insert SimpleName: getEndPosition(233) into MethodInvocation(238) at 1", "Insert CastExpression(237) into MethodInvocation(238) at 2", "Update SimpleName: t(264) to tree", "Move MethodInvocation(305) into MethodInvocation(312) at 0", "Move SimpleName: get(306) into MethodInvocation(312) at 1", "Move NumberLiteral: 0(307) into MethodInvocation(312) at 2", "Move SimpleType: String(313) into TypeLiteral(315) at 0", "Update SimpleName: literal(324) to formatString", "Insert SimpleName: SuggestedFix(194) into MethodInvocation(196) at 0", "Insert SimpleName: builder(195) into MethodInvocation(196) at 1", "Insert ParenthesizedExpression(202) into MethodInvocation(204) at 0", "Insert SimpleName: getStartPosition(203) into MethodInvocation(204) at 1", "Insert ParenthesizedExpression(214) into MethodInvocation(216) at 0", "Insert SimpleName: getStartPosition(215) into MethodInvocation(216) at 1", "Insert SimpleType: JCTree(223) into CastExpression(230) at 0", "Insert MethodInvocation(229) into CastExpression(230) at 1", "Insert SimpleType: JCTree(235) into CastExpression(237) at 0", "Insert SimpleName: stringFormat(236) into CastExpression(237) at 1", "Insert ParenthesizedExpression(307) into MethodInvocation(309) at 0", "Insert CastExpression(201) into ParenthesizedExpression(202) at 0", "Insert CastExpression(213) into ParenthesizedExpression(214) at 0", "Insert SimpleName: JCTree(222) into SimpleType: JCTree(223) at 0", "Update SimpleName: arguments(215) to Iterables", "Move SimpleName: arguments(215) into MethodInvocation(229) at 0", "Update SimpleName: get(216) to getLast", "Move SimpleName: get(216) into MethodInvocation(229) at 1", "Insert MethodInvocation(228) into MethodInvocation(229) at 2", "Insert SimpleName: JCTree(234) into SimpleType: JCTree(235) at 0", "Move CastExpression(280) into ParenthesizedExpression(307) at 0", "Insert SimpleType: JCTree(199) into CastExpression(201) at 0", "Insert SimpleName: stringFormat(200) into CastExpression(201) at 1", "Insert SimpleType: JCTree(206) into CastExpression(213) at 0", "Move MethodInvocation(210) into CastExpression(213) at 1", "Insert SimpleName: stringFormat(226) into MethodInvocation(228) at 0", "Insert SimpleName: getArguments(227) into MethodInvocation(228) at 1", "Update SimpleName: t(279) to tree", "Insert SimpleName: JCTree(198) into SimpleType: JCTree(199) at 0", "Insert SimpleName: JCTree(205) into SimpleType: JCTree(206) at 0", "Insert MethodInvocation(209) into MethodInvocation(212) at 0", "Update NumberLiteral: 1(209) to 0", "Insert SimpleName: stringFormat(207) into MethodInvocation(209) at 0", "Update SimpleName: arguments(207) to getArguments", "Move SimpleName: arguments(207) into MethodInvocation(209) at 1", "Delete TextElement: better off using the equivalent methods which defer the computation of the(44)", "Delete SimpleName: ExpressionTree(126)", "Delete SimpleType: ExpressionTree(127)", "Delete SimpleName: MemberSelectTree(179)", "Delete SimpleType: MemberSelectTree(180)", "Delete SimpleName: MemberSelectTree(182)", "Delete SimpleType: MemberSelectTree(183)", "Delete MethodInvocation(186)", "Delete SimpleName: List(190)", "Delete SimpleType: List(191)", "Delete SimpleName: ExpressionTree(192)", "Delete SimpleType: ExpressionTree(193)", "Delete WildcardType: ? extends ExpressionTree(194)", "Delete ParameterizedType: List<? extends ExpressionTree>(195)", "Delete SimpleName: arguments(196)", "Delete SimpleName: getArguments(198)", "Delete MethodInvocation(199)", "Delete VariableDeclarationFragment(200)", "Delete VariableDeclarationStatement(201)", "Delete SimpleName: stringFormat(204)", "Delete CastExpression(211)", "Delete VariableDeclarationFragment(212)", "Delete VariableDeclarationStatement(213)", "Delete NumberLiteral: 1(217)", "Delete MethodInvocation(218)", "Delete MethodInvocation(219)", "Delete ReturnStatement(220)", "Delete SimpleName: MethodInvocationTree(274)", "Delete SimpleType: MethodInvocationTree(275)", "Delete SimpleName: stringFormatInvocation(276)", "Delete VariableDeclarationFragment(281)", "Delete VariableDeclarationStatement(282)", "Delete SimpleName: stringFormatInvocation(283)", "Delete SimpleName: getArguments(284)", "Delete MethodInvocation(285)", "Delete SimpleName: get(286)", "Delete NumberLiteral: 0(287)", "Delete MethodInvocation(288)", "Delete SimpleName: LiteralTree(289)", "Delete SimpleType: LiteralTree(290)", "Delete InstanceofExpression(291)", "Delete ParenthesizedExpression(292)", "Delete PrefixExpression: !(293)", "Delete IfStatement(297)", "Delete SimpleName: stringFormatInvocation(303)", "Delete SimpleName: LiteralTree(301)", "Delete SimpleType: LiteralTree(302)", "Delete MethodInvocation(308)", "Delete CastExpression(309)", "Delete SimpleName: literal(314)", "Delete SimpleName: firstArg(315)", "Delete SimpleName: getValue(316)", "Delete MethodInvocation(317)", "Delete SimpleName: toString(318)", "Delete MethodInvocation(319)", "Delete VariableDeclarationFragment(320)", "Delete VariableDeclarationStatement(321)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}