{"application": "apache-commons-io", "csha": "506478890c3846f947a3b6e0569ddcb8693f9a21", "files": [{"TarBuffer_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.io.compress.tar", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.IOException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.InputStream"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.OutputStream", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TagElement", "DEL Modifier: final", "DEL Modifier: final", "DEL Modifier: public", "DEL Block", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL SimpleName: output", "DEL Block", "DEL SimpleName: arraycopy", "DEL Block", "DEL StringLiteral: \"TarBuffer.flushBlock() called.\"", "DEL SimpleName: IOException", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: blockSize", "DEL IfStatement", "DEL TextElement: stream. This concept goes back to the days of blocked tape drives and special", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: m_blockBuffer", "DEL VariableDeclarationFragment", "DEL SimpleName: System", "DEL SimpleName: m_recordSize", "DEL ExpressionStatement", "DEL Block", "DEL Javadoc", "DEL IfStatement", "DEL MethodDeclaration", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL FieldDeclaration", "DEL QualifiedName: buffer.length", "DEL SimpleName: IOException", "DEL SimpleName: String", "DEL SimpleName: readBlock", "DEL SimpleType: String", "DEL SimpleName: debug", "DEL Modifier: final", "DEL InfixExpression: +", "DEL TextElement:  false if End-Of-File, else true", "DEL ParenthesizedExpression", "DEL SimpleName: flush", "DEL IfStatement", "DEL ParenthesizedExpression", "DEL IfStatement", "DEL SimpleName: println", "DEL SimpleName: buffer", "DEL SimpleName: readBlock", "DEL NullLiteral", "DEL Modifier: public", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL ThrowStatement", "DEL StringLiteral: \"writing to an input buffer\"", "DEL BreakStatement", "DEL TextElement: io devices. In the Java universe, the only real function that this class", "DEL TagElement", "DEL Block", "DEL SimpleName: message", "DEL MethodInvocation", "DEL Modifier: final", "DEL StringLiteral: \"' which is not the record size of '\"", "DEL Assignment: =", "DEL NumberLiteral: 0", "DEL SimpleName: m_currRecIdx", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL PrimitiveType: int", "DEL SimpleName: m_blockSize", "DEL TagElement: @return", "DEL Dimension", "DEL Modifier: private", "DEL Assignment: =", "DEL QualifiedName: record.length", "DEL FieldDeclaration", "DEL Block", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: message", "DEL StringLiteral: \"' with offset '\"", "DEL PrimitiveType: void", "DEL SimpleName: m_blockBuffer", "DEL NumberLiteral: 0", "DEL SimpleName: recordSize", "DEL MethodInvocation", "DEL SimpleType: IOException", "DEL ExpressionStatement", "DEL SimpleType: InputStream", "DEL SimpleName: m_currRecIdx", "DEL SimpleName: m_output", "DEL StringLiteral: \"reading (via skip) from an output buffer\"", "DEL SimpleName: m_output", "DEL TextElement:  The record data to check.", "DEL SimpleName: m_recordSize", "DEL ThrowStatement", "DEL SimpleType: InputStream", "DEL Block", "DEL SimpleName: String", "DEL ArrayCreation", "DEL SimpleName: m_currBlkIdx", "DEL SimpleName: blockSize", "DEL MethodInvocation", "DEL PrefixExpression: -", "DEL SimpleName: writeBlock", "DEL SimpleType: String", "DEL FieldDeclaration", "DEL IfStatement", "DEL NullLiteral", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL PrimitiveType: byte", "DEL NumberLiteral: 1", "DEL ArrayType: byte[]", "DEL SimpleName: IOException", "DEL TagElement: @version", "DEL MethodInvocation", "DEL SimpleName: message", "DEL SimpleName: message", "DEL ExpressionStatement", "DEL SimpleName: bytesNeeded", "DEL Modifier: final", "DEL PostfixExpression: ++", "DEL TextElement: a larger array buffer. The buffer must be \"offset plus record size\" long.", "DEL StringLiteral: \"ReadBlock: INCOMPLETE READ \"", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL WhileStatement", "DEL SimpleName: message", "DEL SimpleName: String", "DEL TextElement: Determine if an archive record indicate End of Archive. End of archive is", "DEL Modifier: public", "DEL SimpleName: m_blockSize", "DEL SimpleName: output", "DEL SimpleName: m_currBlkIdx", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL TagElement: @exception", "DEL SimpleName: m_input", "DEL Block", "DEL SimpleName: writeRecord", "DEL Block", "DEL Javadoc", "DEL IfStatement", "DEL Modifier: final", "DEL SimpleName: m_currRecIdx", "DEL ThrowStatement", "DEL SimpleName: m_currBlkIdx", "DEL Dimension", "DEL PrimitiveType: int", "DEL Dimension", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleType: String", "DEL SimpleName: m_blockBuffer", "DEL VariableDeclarationExpression", "DEL InfixExpression: ==", "DEL SingleVariableDeclaration", "DEL SimpleName: message", "DEL ClassInstanceCreation", "DEL TextElement: The TarBuffer class implements the tar archive concept of a buffered input", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: m_blockSize", "DEL QualifiedName: TarBuffer.DEFAULT_BLOCKSIZE", "DEL Block", "DEL InfixExpression: +", "DEL BooleanLiteral: true", "DEL SimpleName: numBytes", "DEL SimpleName: TarBuffer", "DEL TextElement: Initialization common to all constructors.", "DEL SimpleType: IOException", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleType: String", "DEL ArrayType: byte[]", "DEL SimpleName: m_debug", "DEL Dimension", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL Block", "DEL SimpleType: IOException", "DEL VariableDeclarationFragment", "DEL SimpleName: message", "DEL InfixExpression: >=", "DEL SimpleName: message", "DEL ExpressionStatement", "DEL SimpleName: m_blockBuffer", "DEL SimpleName: m_currRecIdx", "DEL Assignment: =", "DEL SimpleName: InputStream", "DEL SimpleName: m_recordSize", "DEL TextElement: Get the TAR Buffer's record size.", "DEL ParenthesizedExpression", "DEL SimpleType: String", "DEL ClassInstanceCreation", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL IfStatement", "DEL SimpleName: offset", "DEL PrimitiveType: void", "DEL Dimension", "DEL Modifier: private", "DEL SimpleName: String", "DEL Modifier: public", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL Block", "DEL TagElement: @return", "DEL SimpleName: m_input", "DEL Modifier: private", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: recordSize", "DEL Modifier: public", "DEL Modifier: final", "DEL SimpleName: numBytes", "DEL PrimitiveType: void", "DEL ArrayType: byte[]", "DEL SimpleName: m_output", "DEL Block", "DEL SimpleName: IOException", "DEL QualifiedName: System.in", "DEL SimpleName: m_debug", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL InfixExpression: !=", "DEL SimpleName: IOException", "DEL SimpleName: getCurrentBlockNum", "DEL SimpleName: getRecordSize", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: TarBuffer", "DEL SimpleName: m_currRecIdx", "DEL SimpleType: String", "DEL SimpleName: m_output", "DEL Modifier: final", "DEL TagElement: @param", "DEL MethodInvocation", "DEL QualifiedName: buffer.length", "DEL SimpleName: message", "DEL SimpleName: m_currRecIdx", "DEL Assignment: -=", "DEL SimpleName: close", "DEL SimpleName: m_recordSize", "DEL Dimension", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: m_currRecIdx", "DEL TagElement: @param", "DEL NumberLiteral: 0", "DEL StringLiteral: \" blkIdx = \"", "DEL Modifier: public", "DEL QualifiedName: record.length", "DEL TextElement: Write a TarBuffer block to the archive.", "DEL SimpleName: IOException", "DEL PostfixExpression: ++", "DEL QualifiedName: System.err", "DEL ArrayType: byte[]", "DEL SimpleName: InputStream", "DEL BooleanLiteral: true", "DEL SimpleType: InputStream", "DEL Block", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL IfStatement", "DEL IfStatement", "DEL PrimitiveType: byte", "DEL NumberLiteral: 1", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL SimpleName: m_blockSize", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL TextElement: Get the TAR Buffer's block size. Blocks consist of multiple records.", "DEL StringLiteral: \"SkipRecord: recIdx = \"", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL StringLiteral: \" of \"", "DEL Block", "DEL Modifier: final", "DEL ExpressionStatement", "DEL IfStatement", "DEL ThrowStatement", "DEL Modifier: public", "DEL SimpleName: blockSize", "DEL SimpleName: record", "DEL SimpleName: String", "DEL TextElement: Get the current block number, zero based.", "DEL TextElement:  The RecordSize value", "DEL InfixExpression: ==", "DEL SimpleName: DEFAULT_RECORDSIZE", "DEL PrimitiveType: int", "DEL SimpleName: setDebug", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"writing to an input buffer\"", "DEL Assignment: =", "DEL NumberLiteral: 0", "DEL SimpleName: println", "DEL VariableDeclarationFragment", "DEL SimpleName: m_input", "DEL PrimitiveType: int", "DEL Modifier: static", "DEL NumberLiteral: 0", "DEL SimpleName: m_currRecIdx", "DEL StringLiteral: \"'\"", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL PostfixExpression: ++", "DEL SimpleName: message", "DEL IfStatement", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL NumberLiteral: 0", "DEL IfStatement", "DEL SimpleName: arraycopy", "DEL Block", "DEL Modifier: public", "DEL SimpleName: String", "DEL Modifier: final", "DEL SimpleName: bytesNeeded", "DEL SimpleName: String", "DEL SimpleName: record", "DEL SimpleType: IOException", "DEL TextElement: block before closing.", "DEL InfixExpression: *", "DEL Modifier: public", "DEL SimpleName: initialize", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL QualifiedName: System.out", "DEL SimpleName: m_recordSize", "DEL Modifier: private", "DEL InfixExpression: &&", "DEL VariableDeclarationFragment", "DEL SimpleName: m_currRecIdx", "DEL SimpleName: m_currBlkIdx", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 20", "DEL Modifier: final", "DEL SimpleType: String", "DEL SimpleName: message", "DEL SimpleName: message", "DEL Dimension", "DEL Modifier: private", "DEL NullLiteral", "DEL SimpleName: bytesNeeded", "DEL SimpleType: IOException", "DEL TextElement:  If true, print debugging output.", "DEL SimpleName: blockSize", "DEL Assignment: =", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: m_currBlkIdx", "DEL Javadoc", "DEL SimpleName: blockSize", "DEL SimpleName: close", "DEL SimpleType: IOException", "DEL VariableDeclarationFragment", "DEL SimpleName: m_debug", "DEL InfixExpression: >=", "DEL TextElement: Set the debugging flag for the buffer.", "DEL SimpleName: write", "DEL Assignment: =", "DEL Javadoc", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL Javadoc", "DEL SimpleType: IOException", "DEL SimpleName: record", "DEL SimpleName: DEFAULT_RECORDSIZE", "DEL StringLiteral: \"writing to an input buffer\"", "DEL StringLiteral: \"WriteRecord: recIdx = \"", "DEL SingleVariableDeclaration", "DEL Block", "DEL Assignment: =", "DEL ExpressionStatement", "DEL TextElement: Write an archive record to the archive, where the record may be inside of", "DEL SimpleName: m_output", "DEL PrimitiveType: boolean", "DEL Javadoc", "DEL SimpleName: blockSize", "DEL Block", "DEL ParenthesizedExpression", "DEL SimpleName: numBytes", "DEL SimpleName: DEFAULT_BLOCKSIZE", "DEL InfixExpression: +", "DEL TagElement", "DEL SimpleName: InputStream", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: IOException", "DEL Modifier: final", "DEL PrimitiveType: void", "DEL SimpleName: size", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Modifier: final", "DEL Assignment: =", "DEL ArrayType: byte[]", "DEL SimpleName: m_currRecIdx", "DEL VariableDeclarationFragment", "DEL TextElement: will complain. <p>", "DEL ExpressionStatement", "DEL NullLiteral", "DEL IfStatement", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL Modifier: private", "DEL PrimitiveType: int", "DEL SimpleName: message", "DEL InfixExpression: ==", "DEL SimpleName: offset", "DEL SimpleName: message", "DEL ExpressionStatement", "DEL PrefixExpression: !", "DEL PrimitiveType: byte", "DEL IfStatement", "DEL Modifier: final", "DEL Block", "DEL SimpleName: IOException", "DEL InfixExpression: <", "DEL StringLiteral: \"reading from an output buffer\"", "DEL MethodInvocation", "DEL ReturnStatement", "DEL Block", "DEL SimpleType: IOException", "DEL IfStatement", "DEL Block", "DEL InfixExpression: *", "DEL VariableDeclarationFragment", "DEL SimpleName: result", "DEL Block", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: m_output", "DEL SimpleName: TarBuffer", "DEL StringLiteral: \"ReadRecord: recIdx = \"", "DEL Javadoc", "DEL TagElement: @return", "DEL Block", "DEL SimpleName: m_input", "DEL SimpleName: m_currRecIdx", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL SimpleName: message", "DEL IfStatement", "DEL Block", "DEL SimpleName: flushBlock", "DEL SimpleName: m_currBlkIdx", "DEL SingleVariableDeclaration", "DEL SimpleName: debug", "DEL Block", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL SimpleName: m_currRecIdx", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL Modifier: final", "DEL MethodDeclaration", "DEL BooleanLiteral: false", "DEL MethodDeclaration", "DEL SimpleName: m_currBlkIdx", "DEL StringLiteral: \"WriteRecord: recIdx = \"", "DEL SimpleName: m_debug", "DEL SimpleName: recordSize", "DEL Block", "DEL TagElement: @param", "DEL ReturnStatement", "DEL SimpleName: m_input", "DEL ExpressionStatement", "DEL SimpleName: IOException", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL Modifier: protected", "DEL SimpleName: m_output", "DEL SimpleName: offset", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: debug", "DEL SimpleName: readBlock", "DEL SimpleName: offset", "DEL PrimitiveType: boolean", "DEL ExpressionStatement", "DEL IfStatement", "DEL FieldDeclaration", "DEL SimpleName: output", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL PrimitiveType: byte", "DEL SimpleName: debug", "DEL SimpleType: String", "DEL SimpleName: m_recsPerBlock", "DEL StringLiteral: \" blkIdx = \"", "DEL SimpleName: input", "DEL SimpleName: m_input", "DEL PostfixExpression: ++", "DEL QualifiedName: System.err", "DEL SimpleName: writeBlock", "DEL MethodDeclaration", "DEL SimpleName: debug", "DEL TagElement", "DEL SimpleName: TarBuffer", "DEL Assignment: =", "DEL TagElement", "DEL Modifier: final", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: recordSize", "DEL InfixExpression: /", "DEL Assignment: +=", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleName: numBytes", "DEL Modifier: final", "DEL Block", "DEL SimpleName: debug", "DEL ExpressionStatement", "DEL SimpleName: m_currRecIdx", "DEL SimpleType: OutputStream", "DEL SimpleType: String", "DEL SimpleName: message", "DEL SimpleName: m_recordSize", "DEL Block", "DEL Block", "DEL Modifier: final", "DEL SimpleName: m_debug", "DEL PrimitiveType: int", "DEL ConstructorInvocation", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: debug", "DEL TextElement:  Description of Exception", "DEL VariableDeclarationStatement", "DEL TextElement: Flush the current data block if it has any data in it.", "DEL ConstructorInvocation", "DEL MethodInvocation", "DEL Modifier: final", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleName: String", "DEL SimpleName: m_blockSize", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL SimpleName: m_currRecIdx", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: m_recsPerBlock", "DEL SimpleName: m_debug", "DEL SimpleType: String", "DEL TextElement:  The current zero based block number.", "DEL NullLiteral", "DEL InfixExpression: !=", "DEL ThrowStatement", "DEL SimpleType: IOException", "DEL IfStatement", "DEL SimpleName: result", "DEL Javadoc", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: m_recordSize", "DEL TextElement: Write an archive record to the archive.", "DEL SimpleName: IOException", "DEL SimpleName: input", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL ArrayType: byte[]", "DEL NullLiteral", "DEL NullLiteral", "DEL InfixExpression: *", "DEL SingleVariableDeclaration", "DEL TextElement: Read a record from the input stream and return the data.", "DEL Modifier: final", "DEL IfStatement", "DEL Modifier: final", "DEL SimpleName: m_recordSize", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"' which is less than the record size of '\"", "DEL Javadoc", "DEL SimpleName: IOException", "DEL StringLiteral: \"'\"", "DEL SimpleName: m_debug", "DEL SimpleName: m_recordSize", "DEL PrimitiveType: byte", "DEL VariableDeclarationFragment", "DEL SimpleName: offset", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL IfStatement", "DEL SimpleName: output", "DEL Block", "DEL SingleVariableDeclaration", "DEL TextElement: Skip over a record on the input stream.", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: String", "DEL SimpleName: m_currRecIdx", "DEL SimpleName: blockSize", "DEL InfixExpression: !=", "DEL Assignment: =", "DEL Modifier: private", "DEL InfixExpression: +", "DEL SimpleName: m_input", "DEL SimpleName: buffer", "DEL SingleVariableDeclaration", "DEL SimpleName: message", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: m_output", "DEL SimpleName: message", "DEL InfixExpression: >", "DEL SimpleName: initialize", "DEL Modifier: final", "DEL SimpleName: TarBuffer", "DEL TagElement", "DEL TagElement: @return", "DEL TextElement: indicated by a record that consists entirely of null bytes.", "DEL SimpleName: debug", "DEL SimpleName: output", "DEL Modifier: public", "DEL SimpleName: m_output", "DEL Block", "DEL SimpleName: m_currRecIdx", "DEL PrimitiveType: int", "DEL SimpleName: message", "DEL PrimitiveType: byte", "DEL Block", "DEL TextElement: Close the TarBuffer. If this is an output buffer, also flush the current", "DEL ThrowStatement", "DEL StringLiteral: \"WriteBlock: blkIdx = \"", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL InfixExpression: !=", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: System", "DEL InfixExpression: !=", "DEL SimpleName: debug", "DEL IfStatement", "DEL SimpleName: message", "DEL SingleVariableDeclaration", "DEL TextElement: You should never have a need to access this class directly. TarBuffers are", "DEL Block", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL TagElement: @author", "DEL SingleVariableDeclaration", "DEL ThrowStatement", "DEL SimpleName: writeBlock", "DEL PrimitiveType: int", "DEL SimpleName: blockSize", "DEL SimpleName: m_currBlkIdx", "DEL SimpleType: IOException", "DEL ClassInstanceCreation", "DEL TagElement", "DEL Modifier: final", "DEL SimpleName: m_recsPerBlock", "DEL InfixExpression: *", "DEL Modifier: public", "DEL SimpleName: m_currRecIdx", "DEL NumberLiteral: 0", "DEL InfixExpression: +", "DEL SimpleName: output", "DEL Assignment: =", "DEL MethodDeclaration", "DEL SimpleName: message", "DEL SimpleType: IOException", "DEL SimpleName: input", "DEL SimpleName: i", "DEL SimpleName: skipRecord", "DEL SimpleName: m_recordSize", "DEL Modifier: private", "DEL InfixExpression: -", "DEL SimpleName: numBytes", "DEL TagElement: @return", "DEL Block", "DEL Block", "DEL FieldDeclaration", "DEL StringLiteral: \"record has length '\"", "DEL SimpleType: InputStream", "DEL SimpleName: m_recordSize", "DEL SimpleName: m_blockBuffer", "DEL Modifier: final", "DEL SimpleType: OutputStream", "DEL SimpleName: message", "DEL ExpressionStatement", "DEL SimpleName: readRecord", "DEL ExpressionStatement", "DEL SimpleName: message", "DEL TagElement: @return", "DEL Javadoc", "DEL TextElement: performs is to ensure that files have the correct \"block\" size, or other tars", "DEL NumberLiteral: 512", "DEL SimpleName: m_blockSize", "DEL SimpleName: input", "DEL IfStatement", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: record", "DEL SimpleName: message", "DEL PrimitiveType: int", "DEL PrimitiveType: long", "DEL Modifier: final", "DEL PostfixExpression: ++", "DEL ConstructorInvocation", "DEL VariableDeclarationFragment", "DEL TextElement:  Description of Exception", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: InputStream", "DEL StringLiteral: \"reading from an output buffer\"", "DEL IfStatement", "DEL Block", "DEL ArrayAccess", "DEL MethodDeclaration", "DEL TextElement: Thus, current offset = (currentBlockNum * recsPerBlk) + currentRecNum.", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL TextElement:  The EOFRecord value", "DEL SimpleName: String", "DEL SimpleName: IOException", "DEL Block", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL SimpleName: numBytes", "DEL TagElement: @author", "DEL Block", "DEL SimpleType: OutputStream", "DEL SimpleName: m_debug", "DEL ReturnStatement", "DEL PrimitiveType: boolean", "DEL SimpleName: OutputStream", "DEL TypeDeclaration: class", "DEL ArrayType: byte[]", "DEL SimpleName: writeRecord", "DEL PrimitiveType: int", "DEL SimpleName: m_recordSize", "DEL SimpleName: m_currBlkIdx", "DEL VariableDeclarationStatement", "DEL SimpleName: m_currRecIdx", "DEL QualifiedName: TarBuffer.DEFAULT_BLOCKSIZE", "DEL SimpleName: result", "DEL SimpleName: m_blockBuffer", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL SimpleName: m_currRecIdx", "DEL IfStatement", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: m_input", "DEL ArrayType: byte[]", "DEL VariableDeclarationStatement", "DEL TagElement: @exception", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: m_blockBuffer", "DEL SimpleName: m_blockSize", "DEL TextElement:  The record data to write to the archive.", "DEL SimpleName: String", "DEL TextElement:  The offset of the record data within buf.", "DEL Modifier: private", "DEL SimpleName: message", "DEL Javadoc", "DEL SimpleName: buffer", "DEL SimpleName: m_input", "DEL SimpleName: m_recsPerBlock", "DEL SingleVariableDeclaration", "DEL Block", "DEL Modifier: final", "DEL TagElement: @return", "DEL SimpleName: m_currRecIdx", "DEL MethodInvocation", "DEL SimpleName: debug", "DEL SimpleName: writeBlock", "DEL PrimitiveType: int", "DEL Javadoc", "DEL SimpleName: IOException", "DEL MethodInvocation", "DEL SimpleName: message", "DEL StringLiteral: \"writing to an input buffer\"", "DEL Block", "DEL NumberLiteral: 0", "DEL SimpleName: message", "DEL SimpleName: m_debug", "DEL VariableDeclarationFragment", "DEL SimpleName: size", "DEL VariableDeclarationFragment", "DEL SimpleName: m_recordSize", "DEL InfixExpression: +", "DEL Modifier: public", "DEL SimpleName: isEOFRecord", "DEL SimpleType: IOException", "DEL SimpleName: m_currBlkIdx", "DEL SimpleName: blockSize", "DEL Block", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL TagElement", "DEL InfixExpression: ==", "DEL SimpleName: m_currRecIdx", "DEL PrimitiveType: void", "DEL ReturnStatement", "DEL SimpleName: arraycopy", "DEL SimpleName: m_debug", "DEL Modifier: public", "DEL PostfixExpression: ++", "DEL Block", "DEL SimpleName: getCurrentRecordNum", "DEL Block", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: m_input", "DEL VariableDeclarationStatement", "DEL TextElement:  <a href=\"mailto:peter@apache.org\">Peter Donald</a>", "DEL Javadoc", "DEL SimpleName: String", "DEL StringLiteral: \"ReadBlock: blkIdx = \"", "DEL SimpleName: OutputStream", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: IOException", "DEL SimpleName: record", "DEL IfStatement", "DEL StringLiteral: \" bytes read.\"", "DEL QualifiedName: System.err", "DEL PrimitiveType: byte", "DEL MethodDeclaration", "DEL SimpleName: i", "DEL NullLiteral", "DEL ArrayCreation", "DEL VariableDeclarationFragment", "DEL SimpleName: IOException", "DEL Modifier: final", "DEL Modifier: private", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL StringLiteral: \" blkIdx = \"", "DEL SimpleName: OutputStream", "DEL SimpleName: m_recsPerBlock", "DEL Modifier: public", "DEL SimpleName: OutputStream", "DEL SimpleName: message", "DEL PrimitiveType: void", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL Modifier: private", "DEL SimpleName: i", "DEL StringLiteral: \" blkIdx = \"", "DEL TagElement: @param", "DEL TextElement:  <a href=\"mailto:time@ice.com\">Timothy Gerard Endres</a>", "DEL SimpleName: String", "DEL SimpleType: String", "DEL SimpleName: IOException", "DEL Javadoc", "DEL SimpleName: m_blockSize", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL SimpleName: message", "DEL SimpleType: IOException", "DEL SimpleName: m_output", "DEL NullLiteral", "DEL SimpleName: record", "DEL TagElement", "DEL InfixExpression: !=", "DEL SimpleName: m_currBlkIdx", "DEL ForStatement", "DEL SimpleName: offset", "DEL SimpleName: System", "DEL MethodDeclaration", "DEL IfStatement", "DEL FieldDeclaration", "DEL SimpleName: getRecordSize", "DEL SimpleName: m_input", "DEL SimpleName: message", "DEL Modifier: final", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: m_recordSize", "DEL ParenthesizedExpression", "DEL Modifier: final", "DEL IfStatement", "DEL SimpleType: String", "DEL SimpleName: offset", "DEL SimpleName: m_output", "DEL NumberLiteral: 1", "DEL SimpleName: m_currBlkIdx", "DEL StringLiteral: \"record to write has length '\"", "DEL SimpleName: m_debug", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL SimpleName: m_recordSize", "DEL SimpleName: initialize", "DEL SimpleType: String", "DEL PrimitiveType: int", "DEL TagElement", "DEL SimpleName: TarBuffer", "DEL TextElement: created by Tar IO Streams.", "DEL Block", "DEL SimpleName: IOException", "DEL NumberLiteral: 0", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL ThrowStatement", "DEL MethodDeclaration", "DEL SimpleType: IOException", "DEL SimpleName: offset", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: input", "DEL Modifier: final", "DEL TagElement", "DEL QualifiedName: TarBuffer.DEFAULT_RECORDSIZE", "DEL Modifier: final", "DEL SimpleName: message", "DEL VariableDeclarationStatement", "DEL SimpleName: TarBuffer", "DEL Block", "DEL SimpleType: IOException", "DEL SimpleName: input", "DEL InfixExpression: +", "DEL SimpleName: m_output", "DEL InfixExpression: >", "DEL SimpleName: debug", "DEL SimpleName: IOException", "DEL InfixExpression: !=", "DEL Modifier: final", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: getBlockSize", "DEL ConstructorInvocation", "DEL Modifier: static", "DEL TagElement", "DEL PrefixExpression: !", "DEL SimpleName: IOException", "DEL SimpleName: m_debug", "DEL SimpleName: bytesNeeded", "DEL InfixExpression: >=", "DEL PrimitiveType: int", "DEL TagElement", "DEL Modifier: final", "DEL Modifier: private", "DEL InfixExpression: +", "DEL Block", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: read", "DEL Dimension", "DEL MethodDeclaration", "DEL SimpleType: OutputStream", "DEL TextElement: Get the current record number, within the current block, zero based.", "DEL PrimitiveType: byte", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: m_debug", "DEL NullLiteral", "DEL MethodInvocation", "DEL TextElement:  The current zero based record number.", "DEL SimpleName: blockSize", "DEL MethodDeclaration", "DEL Block", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL TextElement:  $Revision: 1.3 $ $Date: 2003/10/13 07:01:15 $", "DEL FieldDeclaration", "DEL SimpleName: debug", "DEL SimpleName: recordSize", "DEL ExpressionStatement", "DEL SimpleName: IOException", "DEL SimpleName: flushBlock", "DEL StringLiteral: \"TarBuffer.closeBuffer().\"", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: message", "DEL BooleanLiteral: false", "DEL Assignment: =", "DEL SimpleName: m_recsPerBlock", "DEL Block", "DEL Modifier: public", "DEL SimpleName: recordSize", "DEL SimpleName: message", "DEL PrimitiveType: int", "DEL SimpleName: message", "DEL NumberLiteral: 0", "DEL TextElement:  The record data.", "DEL SimpleType: IOException", "DEL SimpleName: m_currRecIdx", "DEL ThrowStatement", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL InfixExpression: !=", "DEL PrefixExpression: -", "DEL Modifier: private", "DEL InfixExpression: >", "DEL QualifiedName: TarBuffer.DEFAULT_RECORDSIZE", "DEL TextElement:  The BlockSize value", "DEL PrefixExpression: ++", "DEL SimpleName: m_output", "DEL SimpleName: close", "DEL SimpleName: m_recsPerBlock", "DEL SimpleName: m_blockSize", "DEL MethodInvocation", "DEL InfixExpression: >=", "DEL TextElement:  The buffer containing the record data to write.", "DEL Modifier: final", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL Modifier: public"]}]}}, {"TarBuffer_diff": {"operations": ["Delete QualifiedName: org.apache.commons.io.compress.tar(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.io.IOException(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.io.InputStream(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.io.OutputStream(6)", "Delete ImportDeclaration(7)", "Delete TextElement: The TarBuffer class implements the tar archive concept of a buffered input(8)", "Delete TextElement: stream. This concept goes back to the days of blocked tape drives and special(9)", "Delete TextElement: io devices. In the Java universe, the only real function that this class(10)", "Delete TextElement: performs is to ensure that files have the correct \"block\" size, or other tars(11)", "Delete TextElement: will complain. <p>(12)", "Delete TextElement: You should never have a need to access this class directly. TarBuffers are(13)", "Delete TextElement: created by Tar IO Streams.(14)", "Delete TagElement(15)", "Delete TextElement:  <a href=\"mailto:time@ice.com\">Timothy Gerard Endres</a>(16)", "Delete TagElement: @author(17)", "Delete TextElement:  <a href=\"mailto:peter@apache.org\">Peter Donald</a>(18)", "Delete TagElement: @author(19)", "Delete TextElement:  $Revision: 1.3 $ $Date: 2003/10/13 07:01:15 $(20)", "Delete TagElement: @version(21)", "Delete Javadoc(22)", "Delete SimpleName: TarBuffer(23)", "Delete Modifier: public(24)", "Delete Modifier: static(25)", "Delete Modifier: final(26)", "Delete PrimitiveType: int(27)", "Delete SimpleName: DEFAULT_RECORDSIZE(28)", "Delete NumberLiteral: 512(29)", "Delete ParenthesizedExpression(30)", "Delete VariableDeclarationFragment(31)", "Delete FieldDeclaration(32)", "Delete Modifier: public(33)", "Delete Modifier: static(34)", "Delete Modifier: final(35)", "Delete PrimitiveType: int(36)", "Delete SimpleName: DEFAULT_BLOCKSIZE(37)", "Delete SimpleName: DEFAULT_RECORDSIZE(38)", "Delete NumberLiteral: 20(39)", "Delete InfixExpression: *(40)", "Delete ParenthesizedExpression(41)", "Delete VariableDeclarationFragment(42)", "Delete FieldDeclaration(43)", "Delete Modifier: private(44)", "Delete PrimitiveType: byte(45)", "Delete Dimension(46)", "Delete ArrayType: byte[](47)", "Delete SimpleName: m_blockBuffer(48)", "Delete VariableDeclarationFragment(49)", "Delete FieldDeclaration(50)", "Delete Modifier: private(51)", "Delete PrimitiveType: int(52)", "Delete SimpleName: m_blockSize(53)", "Delete VariableDeclarationFragment(54)", "Delete FieldDeclaration(55)", "Delete Modifier: private(56)", "Delete PrimitiveType: int(57)", "Delete SimpleName: m_currBlkIdx(58)", "Delete VariableDeclarationFragment(59)", "Delete FieldDeclaration(60)", "Delete Modifier: private(61)", "Delete PrimitiveType: int(62)", "Delete SimpleName: m_currRecIdx(63)", "Delete VariableDeclarationFragment(64)", "Delete FieldDeclaration(65)", "Delete Modifier: private(66)", "Delete PrimitiveType: boolean(67)", "Delete SimpleName: m_debug(68)", "Delete VariableDeclarationFragment(69)", "Delete FieldDeclaration(70)", "Delete Modifier: private(71)", "Delete SimpleName: InputStream(72)", "Delete SimpleType: InputStream(73)", "Delete SimpleName: m_input(74)", "Delete VariableDeclarationFragment(75)", "Delete FieldDeclaration(76)", "Delete Modifier: private(77)", "Delete SimpleName: OutputStream(78)", "Delete SimpleType: OutputStream(79)", "Delete SimpleName: m_output(80)", "Delete VariableDeclarationFragment(81)", "Delete FieldDeclaration(82)", "Delete Modifier: private(83)", "Delete PrimitiveType: int(84)", "Delete SimpleName: m_recordSize(85)", "Delete VariableDeclarationFragment(86)", "Delete FieldDeclaration(87)", "Delete Modifier: private(88)", "Delete PrimitiveType: int(89)", "Delete SimpleName: m_recsPerBlock(90)", "Delete VariableDeclarationFragment(91)", "Delete FieldDeclaration(92)", "Delete Modifier: public(93)", "Delete SimpleName: TarBuffer(94)", "Delete Modifier: final(95)", "Delete SimpleName: InputStream(96)", "Delete SimpleType: InputStream(97)", "Delete SimpleName: input(98)", "Delete SingleVariableDeclaration(99)", "Delete SimpleName: input(100)", "Delete QualifiedName: TarBuffer.DEFAULT_BLOCKSIZE(101)", "Delete ConstructorInvocation(102)", "Delete Block(103)", "Delete MethodDeclaration(104)", "Delete Modifier: public(105)", "Delete SimpleName: TarBuffer(106)", "Delete Modifier: final(107)", "Delete SimpleName: InputStream(108)", "Delete SimpleType: InputStream(109)", "Delete SimpleName: input(110)", "Delete SingleVariableDeclaration(111)", "Delete Modifier: final(112)", "Delete PrimitiveType: int(113)", "Delete SimpleName: blockSize(114)", "Delete SingleVariableDeclaration(115)", "Delete SimpleName: input(116)", "Delete SimpleName: blockSize(117)", "Delete QualifiedName: TarBuffer.DEFAULT_RECORDSIZE(118)", "Delete ConstructorInvocation(119)", "Delete Block(120)", "Delete MethodDeclaration(121)", "Delete Modifier: public(122)", "Delete SimpleName: TarBuffer(123)", "Delete Modifier: final(124)", "Delete SimpleName: InputStream(125)", "Delete SimpleType: InputStream(126)", "Delete SimpleName: input(127)", "Delete SingleVariableDeclaration(128)", "Delete Modifier: final(129)", "Delete PrimitiveType: int(130)", "Delete SimpleName: blockSize(131)", "Delete SingleVariableDeclaration(132)", "Delete Modifier: final(133)", "Delete PrimitiveType: int(134)", "Delete SimpleName: recordSize(135)", "Delete SingleVariableDeclaration(136)", "Delete SimpleName: m_input(137)", "Delete SimpleName: input(138)", "Delete Assignment: =(139)", "Delete ExpressionStatement(140)", "Delete SimpleName: initialize(141)", "Delete SimpleName: blockSize(142)", "Delete SimpleName: recordSize(143)", "Delete MethodInvocation(144)", "Delete ExpressionStatement(145)", "Delete Block(146)", "Delete MethodDeclaration(147)", "Delete Modifier: public(148)", "Delete SimpleName: TarBuffer(149)", "Delete Modifier: final(150)", "Delete SimpleName: OutputStream(151)", "Delete SimpleType: OutputStream(152)", "Delete SimpleName: output(153)", "Delete SingleVariableDeclaration(154)", "Delete SimpleName: output(155)", "Delete QualifiedName: TarBuffer.DEFAULT_BLOCKSIZE(156)", "Delete ConstructorInvocation(157)", "Delete Block(158)", "Delete MethodDeclaration(159)", "Delete Modifier: public(160)", "Delete SimpleName: TarBuffer(161)", "Delete Modifier: final(162)", "Delete SimpleName: OutputStream(163)", "Delete SimpleType: OutputStream(164)", "Delete SimpleName: output(165)", "Delete SingleVariableDeclaration(166)", "Delete Modifier: final(167)", "Delete PrimitiveType: int(168)", "Delete SimpleName: blockSize(169)", "Delete SingleVariableDeclaration(170)", "Delete SimpleName: output(171)", "Delete SimpleName: blockSize(172)", "Delete QualifiedName: TarBuffer.DEFAULT_RECORDSIZE(173)", "Delete ConstructorInvocation(174)", "Delete Block(175)", "Delete MethodDeclaration(176)", "Delete Modifier: public(177)", "Delete SimpleName: TarBuffer(178)", "Delete Modifier: final(179)", "Delete SimpleName: OutputStream(180)", "Delete SimpleType: OutputStream(181)", "Delete SimpleName: output(182)", "Delete SingleVariableDeclaration(183)", "Delete Modifier: final(184)", "Delete PrimitiveType: int(185)", "Delete SimpleName: blockSize(186)", "Delete SingleVariableDeclaration(187)", "Delete Modifier: final(188)", "Delete PrimitiveType: int(189)", "Delete SimpleName: recordSize(190)", "Delete SingleVariableDeclaration(191)", "Delete SimpleName: m_output(192)", "Delete SimpleName: output(193)", "Delete Assignment: =(194)", "Delete ExpressionStatement(195)", "Delete SimpleName: initialize(196)", "Delete SimpleName: blockSize(197)", "Delete SimpleName: recordSize(198)", "Delete MethodInvocation(199)", "Delete ExpressionStatement(200)", "Delete Block(201)", "Delete MethodDeclaration(202)", "Delete TextElement: Set the debugging flag for the buffer.(203)", "Delete TagElement(204)", "Delete SimpleName: debug(205)", "Delete TextElement:  If true, print debugging output.(206)", "Delete TagElement: @param(207)", "Delete Javadoc(208)", "Delete Modifier: public(209)", "Delete PrimitiveType: void(210)", "Delete SimpleName: setDebug(211)", "Delete Modifier: final(212)", "Delete PrimitiveType: boolean(213)", "Delete SimpleName: debug(214)", "Delete SingleVariableDeclaration(215)", "Delete SimpleName: m_debug(216)", "Delete SimpleName: debug(217)", "Delete Assignment: =(218)", "Delete ExpressionStatement(219)", "Delete Block(220)", "Delete MethodDeclaration(221)", "Delete TextElement: Get the TAR Buffer's block size. Blocks consist of multiple records.(222)", "Delete TagElement(223)", "Delete TextElement:  The BlockSize value(224)", "Delete TagElement: @return(225)", "Delete Javadoc(226)", "Delete Modifier: public(227)", "Delete PrimitiveType: int(228)", "Delete SimpleName: getBlockSize(229)", "Delete SimpleName: m_blockSize(230)", "Delete ReturnStatement(231)", "Delete Block(232)", "Delete MethodDeclaration(233)", "Delete TextElement: Get the current block number, zero based.(234)", "Delete TagElement(235)", "Delete TextElement:  The current zero based block number.(236)", "Delete TagElement: @return(237)", "Delete Javadoc(238)", "Delete Modifier: public(239)", "Delete PrimitiveType: int(240)", "Delete SimpleName: getCurrentBlockNum(241)", "Delete SimpleName: m_currBlkIdx(242)", "Delete ReturnStatement(243)", "Delete Block(244)", "Delete MethodDeclaration(245)", "Delete TextElement: Get the current record number, within the current block, zero based.(246)", "Delete TextElement: Thus, current offset = (currentBlockNum * recsPerBlk) + currentRecNum.(247)", "Delete TagElement(248)", "Delete TextElement:  The current zero based record number.(249)", "Delete TagElement: @return(250)", "Delete Javadoc(251)", "Delete Modifier: public(252)", "Delete PrimitiveType: int(253)", "Delete SimpleName: getCurrentRecordNum(254)", "Delete SimpleName: m_currRecIdx(255)", "Delete NumberLiteral: 1(256)", "Delete InfixExpression: -(257)", "Delete ReturnStatement(258)", "Delete Block(259)", "Delete MethodDeclaration(260)", "Delete TextElement: Get the TAR Buffer's record size.(261)", "Delete TagElement(262)", "Delete TextElement:  The RecordSize value(263)", "Delete TagElement: @return(264)", "Delete Javadoc(265)", "Delete Modifier: public(266)", "Delete PrimitiveType: int(267)", "Delete SimpleName: getRecordSize(268)", "Delete SimpleName: m_recordSize(269)", "Delete ReturnStatement(270)", "Delete Block(271)", "Delete MethodDeclaration(272)", "Delete TextElement: Determine if an archive record indicate End of Archive. End of archive is(273)", "Delete TextElement: indicated by a record that consists entirely of null bytes.(274)", "Delete TagElement(275)", "Delete SimpleName: record(276)", "Delete TextElement:  The record data to check.(277)", "Delete TagElement: @param(278)", "Delete TextElement:  The EOFRecord value(279)", "Delete TagElement: @return(280)", "Delete Javadoc(281)", "Delete Modifier: public(282)", "Delete PrimitiveType: boolean(283)", "Delete SimpleName: isEOFRecord(284)", "Delete Modifier: final(285)", "Delete PrimitiveType: byte(286)", "Delete Dimension(287)", "Delete ArrayType: byte[](288)", "Delete SimpleName: record(289)", "Delete SingleVariableDeclaration(290)", "Delete Modifier: final(291)", "Delete PrimitiveType: int(292)", "Delete SimpleName: size(293)", "Delete SimpleName: getRecordSize(294)", "Delete MethodInvocation(295)", "Delete VariableDeclarationFragment(296)", "Delete VariableDeclarationStatement(297)", "Delete PrimitiveType: int(298)", "Delete SimpleName: i(299)", "Delete NumberLiteral: 0(300)", "Delete VariableDeclarationFragment(301)", "Delete VariableDeclarationExpression(302)", "Delete SimpleName: i(303)", "Delete SimpleName: size(304)", "Delete InfixExpression: <(305)", "Delete SimpleName: i(306)", "Delete PrefixExpression: ++(307)", "Delete SimpleName: record(308)", "Delete SimpleName: i(309)", "Delete ArrayAccess(310)", "Delete NumberLiteral: 0(311)", "Delete InfixExpression: !=(312)", "Delete BooleanLiteral: false(313)", "Delete ReturnStatement(314)", "Delete Block(315)", "Delete IfStatement(316)", "Delete Block(317)", "Delete ForStatement(318)", "Delete BooleanLiteral: true(319)", "Delete ReturnStatement(320)", "Delete Block(321)", "Delete MethodDeclaration(322)", "Delete TextElement: Close the TarBuffer. If this is an output buffer, also flush the current(323)", "Delete TextElement: block before closing.(324)", "Delete TagElement(325)", "Delete Javadoc(326)", "Delete Modifier: public(327)", "Delete PrimitiveType: void(328)", "Delete SimpleName: close(329)", "Delete SimpleName: IOException(330)", "Delete SimpleType: IOException(331)", "Delete SimpleName: m_debug(332)", "Delete SimpleName: debug(333)", "Delete StringLiteral: \"TarBuffer.closeBuffer().\"(334)", "Delete MethodInvocation(335)", "Delete ExpressionStatement(336)", "Delete Block(337)", "Delete IfStatement(338)", "Delete NullLiteral(339)", "Delete SimpleName: m_output(340)", "Delete InfixExpression: !=(341)", "Delete SimpleName: flushBlock(342)", "Delete MethodInvocation(343)", "Delete ExpressionStatement(344)", "Delete SimpleName: m_output(345)", "Delete QualifiedName: System.out(346)", "Delete InfixExpression: !=(347)", "Delete SimpleName: m_output(348)", "Delete QualifiedName: System.err(349)", "Delete InfixExpression: !=(350)", "Delete InfixExpression: &&(351)", "Delete SimpleName: m_output(352)", "Delete SimpleName: close(353)", "Delete MethodInvocation(354)", "Delete ExpressionStatement(355)", "Delete SimpleName: m_output(356)", "Delete NullLiteral(357)", "Delete Assignment: =(358)", "Delete ExpressionStatement(359)", "Delete Block(360)", "Delete IfStatement(361)", "Delete Block(362)", "Delete SimpleName: m_input(363)", "Delete NullLiteral(364)", "Delete InfixExpression: !=(365)", "Delete SimpleName: m_input(366)", "Delete QualifiedName: System.in(367)", "Delete InfixExpression: !=(368)", "Delete SimpleName: m_input(369)", "Delete SimpleName: close(370)", "Delete MethodInvocation(371)", "Delete ExpressionStatement(372)", "Delete SimpleName: m_input(373)", "Delete NullLiteral(374)", "Delete Assignment: =(375)", "Delete ExpressionStatement(376)", "Delete Block(377)", "Delete IfStatement(378)", "Delete Block(379)", "Delete IfStatement(380)", "Delete IfStatement(381)", "Delete Block(382)", "Delete MethodDeclaration(383)", "Delete TextElement: Read a record from the input stream and return the data.(384)", "Delete TagElement(385)", "Delete TextElement:  The record data.(386)", "Delete TagElement: @return(387)", "Delete SimpleName: IOException(388)", "Delete TextElement:  Description of Exception(389)", "Delete TagElement: @exception(390)", "Delete Javadoc(391)", "Delete Modifier: public(392)", "Delete PrimitiveType: byte(393)", "Delete Dimension(394)", "Delete ArrayType: byte[](395)", "Delete SimpleName: readRecord(396)", "Delete SimpleName: IOException(397)", "Delete SimpleType: IOException(398)", "Delete SimpleName: m_debug(399)", "Delete Modifier: final(400)", "Delete SimpleName: String(401)", "Delete SimpleType: String(402)", "Delete SimpleName: message(403)", "Delete StringLiteral: \"ReadRecord: recIdx = \"(404)", "Delete SimpleName: m_currRecIdx(405)", "Delete StringLiteral: \" blkIdx = \"(406)", "Delete SimpleName: m_currBlkIdx(407)", "Delete InfixExpression: +(408)", "Delete VariableDeclarationFragment(409)", "Delete VariableDeclarationStatement(410)", "Delete SimpleName: debug(411)", "Delete SimpleName: message(412)", "Delete MethodInvocation(413)", "Delete ExpressionStatement(414)", "Delete Block(415)", "Delete IfStatement(416)", "Delete NullLiteral(417)", "Delete SimpleName: m_input(418)", "Delete InfixExpression: ==(419)", "Delete Modifier: final(420)", "Delete SimpleName: String(421)", "Delete SimpleType: String(422)", "Delete SimpleName: message(423)", "Delete StringLiteral: \"reading from an output buffer\"(424)", "Delete VariableDeclarationFragment(425)", "Delete VariableDeclarationStatement(426)", "Delete SimpleName: IOException(427)", "Delete SimpleType: IOException(428)", "Delete SimpleName: message(429)", "Delete ClassInstanceCreation(430)", "Delete ThrowStatement(431)", "Delete Block(432)", "Delete IfStatement(433)", "Delete SimpleName: m_currRecIdx(434)", "Delete SimpleName: m_recsPerBlock(435)", "Delete InfixExpression: >=(436)", "Delete SimpleName: readBlock(437)", "Delete MethodInvocation(438)", "Delete PrefixExpression: !(439)", "Delete NullLiteral(440)", "Delete ReturnStatement(441)", "Delete Block(442)", "Delete IfStatement(443)", "Delete Block(444)", "Delete IfStatement(445)", "Delete Modifier: final(446)", "Delete PrimitiveType: byte(447)", "Delete Dimension(448)", "Delete ArrayType: byte[](449)", "Delete SimpleName: result(450)", "Delete PrimitiveType: byte(451)", "Delete Dimension(452)", "Delete ArrayType: byte[](453)", "Delete SimpleName: m_recordSize(454)", "Delete ArrayCreation(455)", "Delete VariableDeclarationFragment(456)", "Delete VariableDeclarationStatement(457)", "Delete SimpleName: System(458)", "Delete SimpleName: arraycopy(459)", "Delete SimpleName: m_blockBuffer(460)", "Delete SimpleName: m_currRecIdx(461)", "Delete SimpleName: m_recordSize(462)", "Delete InfixExpression: *(463)", "Delete ParenthesizedExpression(464)", "Delete SimpleName: result(465)", "Delete NumberLiteral: 0(466)", "Delete SimpleName: m_recordSize(467)", "Delete MethodInvocation(468)", "Delete ExpressionStatement(469)", "Delete SimpleName: m_currRecIdx(470)", "Delete PostfixExpression: ++(471)", "Delete ExpressionStatement(472)", "Delete SimpleName: result(473)", "Delete ReturnStatement(474)", "Delete Block(475)", "Delete MethodDeclaration(476)", "Delete TextElement: Skip over a record on the input stream.(477)", "Delete TagElement(478)", "Delete Javadoc(479)", "Delete Modifier: public(480)", "Delete PrimitiveType: void(481)", "Delete SimpleName: skipRecord(482)", "Delete SimpleName: IOException(483)", "Delete SimpleType: IOException(484)", "Delete SimpleName: m_debug(485)", "Delete Modifier: final(486)", "Delete SimpleName: String(487)", "Delete SimpleType: String(488)", "Delete SimpleName: message(489)", "Delete StringLiteral: \"SkipRecord: recIdx = \"(490)", "Delete SimpleName: m_currRecIdx(491)", "Delete StringLiteral: \" blkIdx = \"(492)", "Delete SimpleName: m_currBlkIdx(493)", "Delete InfixExpression: +(494)", "Delete VariableDeclarationFragment(495)", "Delete VariableDeclarationStatement(496)", "Delete SimpleName: debug(497)", "Delete SimpleName: message(498)", "Delete MethodInvocation(499)", "Delete ExpressionStatement(500)", "Delete Block(501)", "Delete IfStatement(502)", "Delete NullLiteral(503)", "Delete SimpleName: m_input(504)", "Delete InfixExpression: ==(505)", "Delete Modifier: final(506)", "Delete SimpleName: String(507)", "Delete SimpleType: String(508)", "Delete SimpleName: message(509)", "Delete StringLiteral: \"reading (via skip) from an output buffer\"(510)", "Delete VariableDeclarationFragment(511)", "Delete VariableDeclarationStatement(512)", "Delete SimpleName: IOException(513)", "Delete SimpleType: IOException(514)", "Delete SimpleName: message(515)", "Delete ClassInstanceCreation(516)", "Delete ThrowStatement(517)", "Delete Block(518)", "Delete IfStatement(519)", "Delete SimpleName: m_currRecIdx(520)", "Delete SimpleName: m_recsPerBlock(521)", "Delete InfixExpression: >=(522)", "Delete SimpleName: readBlock(523)", "Delete MethodInvocation(524)", "Delete PrefixExpression: !(525)", "Delete ReturnStatement(526)", "Delete Block(527)", "Delete IfStatement(528)", "Delete Block(529)", "Delete IfStatement(530)", "Delete SimpleName: m_currRecIdx(531)", "Delete PostfixExpression: ++(532)", "Delete ExpressionStatement(533)", "Delete Block(534)", "Delete MethodDeclaration(535)", "Delete TextElement: Write an archive record to the archive.(536)", "Delete TagElement(537)", "Delete SimpleName: record(538)", "Delete TextElement:  The record data to write to the archive.(539)", "Delete TagElement: @param(540)", "Delete Javadoc(541)", "Delete Modifier: public(542)", "Delete PrimitiveType: void(543)", "Delete SimpleName: writeRecord(544)", "Delete Modifier: final(545)", "Delete PrimitiveType: byte(546)", "Delete Dimension(547)", "Delete ArrayType: byte[](548)", "Delete SimpleName: record(549)", "Delete SingleVariableDeclaration(550)", "Delete SimpleName: IOException(551)", "Delete SimpleType: IOException(552)", "Delete SimpleName: m_debug(553)", "Delete Modifier: final(554)", "Delete SimpleName: String(555)", "Delete SimpleType: String(556)", "Delete SimpleName: message(557)", "Delete StringLiteral: \"WriteRecord: recIdx = \"(558)", "Delete SimpleName: m_currRecIdx(559)", "Delete StringLiteral: \" blkIdx = \"(560)", "Delete SimpleName: m_currBlkIdx(561)", "Delete InfixExpression: +(562)", "Delete VariableDeclarationFragment(563)", "Delete VariableDeclarationStatement(564)", "Delete SimpleName: debug(565)", "Delete SimpleName: message(566)", "Delete MethodInvocation(567)", "Delete ExpressionStatement(568)", "Delete Block(569)", "Delete IfStatement(570)", "Delete NullLiteral(571)", "Delete SimpleName: m_output(572)", "Delete InfixExpression: ==(573)", "Delete Modifier: final(574)", "Delete SimpleName: String(575)", "Delete SimpleType: String(576)", "Delete SimpleName: message(577)", "Delete StringLiteral: \"writing to an input buffer\"(578)", "Delete VariableDeclarationFragment(579)", "Delete VariableDeclarationStatement(580)", "Delete SimpleName: IOException(581)", "Delete SimpleType: IOException(582)", "Delete SimpleName: message(583)", "Delete ClassInstanceCreation(584)", "Delete ThrowStatement(585)", "Delete Block(586)", "Delete IfStatement(587)", "Delete QualifiedName: record.length(588)", "Delete SimpleName: m_recordSize(589)", "Delete InfixExpression: !=(590)", "Delete Modifier: final(591)", "Delete SimpleName: String(592)", "Delete SimpleType: String(593)", "Delete SimpleName: message(594)", "Delete StringLiteral: \"record to write has length '\"(595)", "Delete QualifiedName: record.length(596)", "Delete StringLiteral: \"' which is not the record size of '\"(597)", "Delete SimpleName: m_recordSize(598)", "Delete StringLiteral: \"'\"(599)", "Delete InfixExpression: +(600)", "Delete VariableDeclarationFragment(601)", "Delete VariableDeclarationStatement(602)", "Delete SimpleName: IOException(603)", "Delete SimpleType: IOException(604)", "Delete SimpleName: message(605)", "Delete ClassInstanceCreation(606)", "Delete ThrowStatement(607)", "Delete Block(608)", "Delete IfStatement(609)", "Delete SimpleName: m_currRecIdx(610)", "Delete SimpleName: m_recsPerBlock(611)", "Delete InfixExpression: >=(612)", "Delete SimpleName: writeBlock(613)", "Delete MethodInvocation(614)", "Delete ExpressionStatement(615)", "Delete Block(616)", "Delete IfStatement(617)", "Delete SimpleName: System(618)", "Delete SimpleName: arraycopy(619)", "Delete SimpleName: record(620)", "Delete NumberLiteral: 0(621)", "Delete SimpleName: m_blockBuffer(622)", "Delete SimpleName: m_currRecIdx(623)", "Delete SimpleName: m_recordSize(624)", "Delete InfixExpression: *(625)", "Delete ParenthesizedExpression(626)", "Delete SimpleName: m_recordSize(627)", "Delete MethodInvocation(628)", "Delete ExpressionStatement(629)", "Delete SimpleName: m_currRecIdx(630)", "Delete PostfixExpression: ++(631)", "Delete ExpressionStatement(632)", "Delete Block(633)", "Delete MethodDeclaration(634)", "Delete TextElement: Write an archive record to the archive, where the record may be inside of(635)", "Delete TextElement: a larger array buffer. The buffer must be \"offset plus record size\" long.(636)", "Delete TagElement(637)", "Delete SimpleName: buffer(638)", "Delete TextElement:  The buffer containing the record data to write.(639)", "Delete TagElement: @param(640)", "Delete SimpleName: offset(641)", "Delete TextElement:  The offset of the record data within buf.(642)", "Delete TagElement: @param(643)", "Delete Javadoc(644)", "Delete Modifier: public(645)", "Delete PrimitiveType: void(646)", "Delete SimpleName: writeRecord(647)", "Delete Modifier: final(648)", "Delete PrimitiveType: byte(649)", "Delete Dimension(650)", "Delete ArrayType: byte[](651)", "Delete SimpleName: buffer(652)", "Delete SingleVariableDeclaration(653)", "Delete Modifier: final(654)", "Delete PrimitiveType: int(655)", "Delete SimpleName: offset(656)", "Delete SingleVariableDeclaration(657)", "Delete SimpleName: IOException(658)", "Delete SimpleType: IOException(659)", "Delete SimpleName: m_debug(660)", "Delete Modifier: final(661)", "Delete SimpleName: String(662)", "Delete SimpleType: String(663)", "Delete SimpleName: message(664)", "Delete StringLiteral: \"WriteRecord: recIdx = \"(665)", "Delete SimpleName: m_currRecIdx(666)", "Delete StringLiteral: \" blkIdx = \"(667)", "Delete SimpleName: m_currBlkIdx(668)", "Delete InfixExpression: +(669)", "Delete VariableDeclarationFragment(670)", "Delete VariableDeclarationStatement(671)", "Delete SimpleName: debug(672)", "Delete SimpleName: message(673)", "Delete MethodInvocation(674)", "Delete ExpressionStatement(675)", "Delete Block(676)", "Delete IfStatement(677)", "Delete NullLiteral(678)", "Delete SimpleName: m_output(679)", "Delete InfixExpression: ==(680)", "Delete Modifier: final(681)", "Delete SimpleName: String(682)", "Delete SimpleType: String(683)", "Delete SimpleName: message(684)", "Delete StringLiteral: \"writing to an input buffer\"(685)", "Delete VariableDeclarationFragment(686)", "Delete VariableDeclarationStatement(687)", "Delete SimpleName: IOException(688)", "Delete SimpleType: IOException(689)", "Delete SimpleName: message(690)", "Delete ClassInstanceCreation(691)", "Delete ThrowStatement(692)", "Delete Block(693)", "Delete IfStatement(694)", "Delete SimpleName: offset(695)", "Delete SimpleName: m_recordSize(696)", "Delete InfixExpression: +(697)", "Delete ParenthesizedExpression(698)", "Delete QualifiedName: buffer.length(699)", "Delete InfixExpression: >(700)", "Delete Modifier: final(701)", "Delete SimpleName: String(702)", "Delete SimpleType: String(703)", "Delete SimpleName: message(704)", "Delete StringLiteral: \"record has length '\"(705)", "Delete QualifiedName: buffer.length(706)", "Delete StringLiteral: \"' with offset '\"(707)", "Delete SimpleName: offset(708)", "Delete StringLiteral: \"' which is less than the record size of '\"(709)", "Delete SimpleName: m_recordSize(710)", "Delete StringLiteral: \"'\"(711)", "Delete InfixExpression: +(712)", "Delete VariableDeclarationFragment(713)", "Delete VariableDeclarationStatement(714)", "Delete SimpleName: IOException(715)", "Delete SimpleType: IOException(716)", "Delete SimpleName: message(717)", "Delete ClassInstanceCreation(718)", "Delete ThrowStatement(719)", "Delete Block(720)", "Delete IfStatement(721)", "Delete SimpleName: m_currRecIdx(722)", "Delete SimpleName: m_recsPerBlock(723)", "Delete InfixExpression: >=(724)", "Delete SimpleName: writeBlock(725)", "Delete MethodInvocation(726)", "Delete ExpressionStatement(727)", "Delete Block(728)", "Delete IfStatement(729)", "Delete SimpleName: System(730)", "Delete SimpleName: arraycopy(731)", "Delete SimpleName: buffer(732)", "Delete SimpleName: offset(733)", "Delete SimpleName: m_blockBuffer(734)", "Delete SimpleName: m_currRecIdx(735)", "Delete SimpleName: m_recordSize(736)", "Delete InfixExpression: *(737)", "Delete ParenthesizedExpression(738)", "Delete SimpleName: m_recordSize(739)", "Delete MethodInvocation(740)", "Delete ExpressionStatement(741)", "Delete SimpleName: m_currRecIdx(742)", "Delete PostfixExpression: ++(743)", "Delete ExpressionStatement(744)", "Delete Block(745)", "Delete MethodDeclaration(746)", "Delete TextElement: Flush the current data block if it has any data in it.(747)", "Delete TagElement(748)", "Delete Javadoc(749)", "Delete Modifier: private(750)", "Delete PrimitiveType: void(751)", "Delete SimpleName: flushBlock(752)", "Delete SimpleName: IOException(753)", "Delete SimpleType: IOException(754)", "Delete SimpleName: m_debug(755)", "Delete Modifier: final(756)", "Delete SimpleName: String(757)", "Delete SimpleType: String(758)", "Delete SimpleName: message(759)", "Delete StringLiteral: \"TarBuffer.flushBlock() called.\"(760)", "Delete VariableDeclarationFragment(761)", "Delete VariableDeclarationStatement(762)", "Delete SimpleName: debug(763)", "Delete SimpleName: message(764)", "Delete MethodInvocation(765)", "Delete ExpressionStatement(766)", "Delete Block(767)", "Delete IfStatement(768)", "Delete SimpleName: m_output(769)", "Delete NullLiteral(770)", "Delete InfixExpression: ==(771)", "Delete Modifier: final(772)", "Delete SimpleName: String(773)", "Delete SimpleType: String(774)", "Delete SimpleName: message(775)", "Delete StringLiteral: \"writing to an input buffer\"(776)", "Delete VariableDeclarationFragment(777)", "Delete VariableDeclarationStatement(778)", "Delete SimpleName: IOException(779)", "Delete SimpleType: IOException(780)", "Delete SimpleName: message(781)", "Delete ClassInstanceCreation(782)", "Delete ThrowStatement(783)", "Delete Block(784)", "Delete IfStatement(785)", "Delete SimpleName: m_currRecIdx(786)", "Delete NumberLiteral: 0(787)", "Delete InfixExpression: >(788)", "Delete SimpleName: writeBlock(789)", "Delete MethodInvocation(790)", "Delete ExpressionStatement(791)", "Delete Block(792)", "Delete IfStatement(793)", "Delete Block(794)", "Delete MethodDeclaration(795)", "Delete TextElement: Initialization common to all constructors.(796)", "Delete TagElement(797)", "Delete Javadoc(798)", "Delete Modifier: private(799)", "Delete PrimitiveType: void(800)", "Delete SimpleName: initialize(801)", "Delete Modifier: final(802)", "Delete PrimitiveType: int(803)", "Delete SimpleName: blockSize(804)", "Delete SingleVariableDeclaration(805)", "Delete Modifier: final(806)", "Delete PrimitiveType: int(807)", "Delete SimpleName: recordSize(808)", "Delete SingleVariableDeclaration(809)", "Delete SimpleName: m_debug(810)", "Delete BooleanLiteral: false(811)", "Delete Assignment: =(812)", "Delete ExpressionStatement(813)", "Delete SimpleName: m_blockSize(814)", "Delete SimpleName: blockSize(815)", "Delete Assignment: =(816)", "Delete ExpressionStatement(817)", "Delete SimpleName: m_recordSize(818)", "Delete SimpleName: recordSize(819)", "Delete Assignment: =(820)", "Delete ExpressionStatement(821)", "Delete SimpleName: m_recsPerBlock(822)", "Delete SimpleName: m_blockSize(823)", "Delete SimpleName: m_recordSize(824)", "Delete InfixExpression: /(825)", "Delete ParenthesizedExpression(826)", "Delete Assignment: =(827)", "Delete ExpressionStatement(828)", "Delete SimpleName: m_blockBuffer(829)", "Delete PrimitiveType: byte(830)", "Delete Dimension(831)", "Delete ArrayType: byte[](832)", "Delete SimpleName: m_blockSize(833)", "Delete ArrayCreation(834)", "Delete Assignment: =(835)", "Delete ExpressionStatement(836)", "Delete NullLiteral(837)", "Delete SimpleName: m_input(838)", "Delete InfixExpression: !=(839)", "Delete SimpleName: m_currBlkIdx(840)", "Delete NumberLiteral: 1(841)", "Delete PrefixExpression: -(842)", "Delete Assignment: =(843)", "Delete ExpressionStatement(844)", "Delete SimpleName: m_currRecIdx(845)", "Delete SimpleName: m_recsPerBlock(846)", "Delete Assignment: =(847)", "Delete ExpressionStatement(848)", "Delete Block(849)", "Delete SimpleName: m_currBlkIdx(850)", "Delete NumberLiteral: 0(851)", "Delete Assignment: =(852)", "Delete ExpressionStatement(853)", "Delete SimpleName: m_currRecIdx(854)", "Delete NumberLiteral: 0(855)", "Delete Assignment: =(856)", "Delete ExpressionStatement(857)", "Delete Block(858)", "Delete IfStatement(859)", "Delete Block(860)", "Delete MethodDeclaration(861)", "Delete TextElement:  false if End-Of-File, else true(862)", "Delete TagElement: @return(863)", "Delete Javadoc(864)", "Delete Modifier: private(865)", "Delete PrimitiveType: boolean(866)", "Delete SimpleName: readBlock(867)", "Delete SimpleName: IOException(868)", "Delete SimpleType: IOException(869)", "Delete SimpleName: m_debug(870)", "Delete Modifier: final(871)", "Delete SimpleName: String(872)", "Delete SimpleType: String(873)", "Delete SimpleName: message(874)", "Delete StringLiteral: \"ReadBlock: blkIdx = \"(875)", "Delete SimpleName: m_currBlkIdx(876)", "Delete InfixExpression: +(877)", "Delete VariableDeclarationFragment(878)", "Delete VariableDeclarationStatement(879)", "Delete SimpleName: debug(880)", "Delete SimpleName: message(881)", "Delete MethodInvocation(882)", "Delete ExpressionStatement(883)", "Delete Block(884)", "Delete IfStatement(885)", "Delete NullLiteral(886)", "Delete SimpleName: m_input(887)", "Delete InfixExpression: ==(888)", "Delete Modifier: final(889)", "Delete SimpleName: String(890)", "Delete SimpleType: String(891)", "Delete SimpleName: message(892)", "Delete StringLiteral: \"reading from an output buffer\"(893)", "Delete VariableDeclarationFragment(894)", "Delete VariableDeclarationStatement(895)", "Delete SimpleName: IOException(896)", "Delete SimpleType: IOException(897)", "Delete SimpleName: message(898)", "Delete ClassInstanceCreation(899)", "Delete ThrowStatement(900)", "Delete Block(901)", "Delete IfStatement(902)", "Delete SimpleName: m_currRecIdx(903)", "Delete NumberLiteral: 0(904)", "Delete Assignment: =(905)", "Delete ExpressionStatement(906)", "Delete PrimitiveType: int(907)", "Delete SimpleName: offset(908)", "Delete NumberLiteral: 0(909)", "Delete VariableDeclarationFragment(910)", "Delete VariableDeclarationStatement(911)", "Delete PrimitiveType: int(912)", "Delete SimpleName: bytesNeeded(913)", "Delete SimpleName: m_blockSize(914)", "Delete VariableDeclarationFragment(915)", "Delete VariableDeclarationStatement(916)", "Delete SimpleName: bytesNeeded(917)", "Delete NumberLiteral: 0(918)", "Delete InfixExpression: >(919)", "Delete Modifier: final(920)", "Delete PrimitiveType: long(921)", "Delete SimpleName: numBytes(922)", "Delete SimpleName: m_input(923)", "Delete SimpleName: read(924)", "Delete SimpleName: m_blockBuffer(925)", "Delete SimpleName: offset(926)", "Delete SimpleName: bytesNeeded(927)", "Delete MethodInvocation(928)", "Delete VariableDeclarationFragment(929)", "Delete VariableDeclarationStatement(930)", "Delete SimpleName: numBytes(931)", "Delete NumberLiteral: 1(932)", "Delete PrefixExpression: -(933)", "Delete InfixExpression: ==(934)", "Delete BreakStatement(935)", "Delete Block(936)", "Delete IfStatement(937)", "Delete SimpleName: offset(938)", "Delete SimpleName: numBytes(939)", "Delete Assignment: +=(940)", "Delete ExpressionStatement(941)", "Delete SimpleName: bytesNeeded(942)", "Delete SimpleName: numBytes(943)", "Delete Assignment: -=(944)", "Delete ExpressionStatement(945)", "Delete SimpleName: numBytes(946)", "Delete SimpleName: m_blockSize(947)", "Delete InfixExpression: !=(948)", "Delete SimpleName: m_debug(949)", "Delete QualifiedName: System.err(950)", "Delete SimpleName: println(951)", "Delete StringLiteral: \"ReadBlock: INCOMPLETE READ \"(952)", "Delete SimpleName: numBytes(953)", "Delete StringLiteral: \" of \"(954)", "Delete SimpleName: m_blockSize(955)", "Delete StringLiteral: \" bytes read.\"(956)", "Delete InfixExpression: +(957)", "Delete MethodInvocation(958)", "Delete ExpressionStatement(959)", "Delete Block(960)", "Delete IfStatement(961)", "Delete Block(962)", "Delete IfStatement(963)", "Delete Block(964)", "Delete WhileStatement(965)", "Delete SimpleName: m_currBlkIdx(966)", "Delete PostfixExpression: ++(967)", "Delete ExpressionStatement(968)", "Delete BooleanLiteral: true(969)", "Delete ReturnStatement(970)", "Delete Block(971)", "Delete MethodDeclaration(972)", "Delete TextElement: Write a TarBuffer block to the archive.(973)", "Delete TagElement(974)", "Delete SimpleName: IOException(975)", "Delete TextElement:  Description of Exception(976)", "Delete TagElement: @exception(977)", "Delete Javadoc(978)", "Delete Modifier: private(979)", "Delete PrimitiveType: void(980)", "Delete SimpleName: writeBlock(981)", "Delete SimpleName: IOException(982)", "Delete SimpleType: IOException(983)", "Delete SimpleName: m_debug(984)", "Delete Modifier: final(985)", "Delete SimpleName: String(986)", "Delete SimpleType: String(987)", "Delete SimpleName: message(988)", "Delete StringLiteral: \"WriteBlock: blkIdx = \"(989)", "Delete SimpleName: m_currBlkIdx(990)", "Delete InfixExpression: +(991)", "Delete VariableDeclarationFragment(992)", "Delete VariableDeclarationStatement(993)", "Delete SimpleName: debug(994)", "Delete SimpleName: message(995)", "Delete MethodInvocation(996)", "Delete ExpressionStatement(997)", "Delete Block(998)", "Delete IfStatement(999)", "Delete NullLiteral(1000)", "Delete SimpleName: m_output(1001)", "Delete InfixExpression: ==(1002)", "Delete Modifier: final(1003)", "Delete SimpleName: String(1004)", "Delete SimpleType: String(1005)", "Delete SimpleName: message(1006)", "Delete StringLiteral: \"writing to an input buffer\"(1007)", "Delete VariableDeclarationFragment(1008)", "Delete VariableDeclarationStatement(1009)", "Delete SimpleName: IOException(1010)", "Delete SimpleType: IOException(1011)", "Delete SimpleName: message(1012)", "Delete ClassInstanceCreation(1013)", "Delete ThrowStatement(1014)", "Delete Block(1015)", "Delete IfStatement(1016)", "Delete SimpleName: m_output(1017)", "Delete SimpleName: write(1018)", "Delete SimpleName: m_blockBuffer(1019)", "Delete NumberLiteral: 0(1020)", "Delete SimpleName: m_blockSize(1021)", "Delete MethodInvocation(1022)", "Delete ExpressionStatement(1023)", "Delete SimpleName: m_output(1024)", "Delete SimpleName: flush(1025)", "Delete MethodInvocation(1026)", "Delete ExpressionStatement(1027)", "Delete SimpleName: m_currRecIdx(1028)", "Delete NumberLiteral: 0(1029)", "Delete Assignment: =(1030)", "Delete ExpressionStatement(1031)", "Delete SimpleName: m_currBlkIdx(1032)", "Delete PostfixExpression: ++(1033)", "Delete ExpressionStatement(1034)", "Delete Block(1035)", "Delete MethodDeclaration(1036)", "Delete Modifier: protected(1037)", "Delete PrimitiveType: void(1038)", "Delete SimpleName: debug(1039)", "Delete Modifier: final(1040)", "Delete SimpleName: String(1041)", "Delete SimpleType: String(1042)", "Delete SimpleName: message(1043)", "Delete SingleVariableDeclaration(1044)", "Delete SimpleName: m_debug(1045)", "Delete QualifiedName: System.err(1046)", "Delete SimpleName: println(1047)", "Delete SimpleName: message(1048)", "Delete MethodInvocation(1049)", "Delete ExpressionStatement(1050)", "Delete Block(1051)", "Delete IfStatement(1052)", "Delete Block(1053)", "Delete MethodDeclaration(1054)", "Delete TypeDeclaration: class(1055)"]}}, {"TarConstants_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.io.compress.tar"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: MODTIMELEN", "DEL CastExpression", "DEL Javadoc", "DEL SimpleName: LF_CONTIG", "DEL PrimitiveType: byte", "DEL CharacterLiteral: '5'", "DEL FieldDeclaration", "DEL TextElement: Character device file type.", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL PrimitiveType: int", "DEL SimpleType: String", "DEL TextElement: the \"entry type\". This is the \"old way\" of indicating a normal file.", "DEL PrimitiveType: byte", "DEL TextElement:  $Revision: 1.3 $ $Date: 2003/10/13 07:01:15 $", "DEL CharacterLiteral: 'L'", "DEL TextElement: Contiguous file type.", "DEL PrimitiveType: byte", "DEL PrimitiveType: byte", "DEL FieldDeclaration", "DEL FieldDeclaration", "DEL TagElement", "DEL SimpleName: LF_OLDNORM", "DEL FieldDeclaration", "DEL TagElement", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL TextElement: The length of the checksum field in a header buffer.", "DEL Javadoc", "DEL StringLiteral: \"ustar  \"", "DEL SimpleName: LF_GNUTYPE_LONGNAME", "DEL SimpleName: String", "DEL SimpleName: TarConstants", "DEL CastExpression", "DEL Javadoc", "DEL TextElement: LF_ constants represent the \"link flag\" of an entry, or more commonly,", "DEL TypeDeclaration: interface", "DEL Javadoc", "DEL SimpleName: LF_BLK", "DEL FieldDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: GNU_TMAGIC", "DEL CharacterLiteral: '0'", "DEL PrimitiveType: byte", "DEL CastExpression", "DEL Javadoc", "DEL TextElement: Block device file type.", "DEL Javadoc", "DEL NumberLiteral: 12", "DEL TextElement: The length of the user id field in a header buffer.", "DEL FieldDeclaration", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL SimpleName: UIDLEN", "DEL TagElement", "DEL CastExpression", "DEL TextElement: The length of the size field in a header buffer.", "DEL SimpleName: SIZELEN", "DEL TextElement: The length of the group id field in a header buffer.", "DEL Javadoc", "DEL TagElement", "DEL PrimitiveType: byte", "DEL CharacterLiteral: '7'", "DEL StringLiteral: \"ustar\"", "DEL Javadoc", "DEL PrimitiveType: byte", "DEL CharacterLiteral: '4'", "DEL PrimitiveType: byte", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL NumberLiteral: 8", "DEL TextElement: The length of the mode field in a header buffer.", "DEL SimpleName: GIDLEN", "DEL NumberLiteral: 8", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: LF_SYMLINK", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL TagElement: @author", "DEL PrimitiveType: int", "DEL Javadoc", "DEL NumberLiteral: 8", "DEL SimpleType: String", "DEL TextElement: The length of the group name field in a header buffer.", "DEL TagElement", "DEL FieldDeclaration", "DEL TagElement", "DEL PrimitiveType: byte", "DEL Javadoc", "DEL FieldDeclaration", "DEL TagElement", "DEL PrimitiveType: int", "DEL PrimitiveType: byte", "DEL VariableDeclarationFragment", "DEL TextElement: Normal file type.", "DEL TextElement:  <a href=\"mailto:time@ice.com\">Timothy Gerard Endres</a>", "DEL SimpleName: MAGICLEN", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: LF_NORMAL", "DEL SimpleName: LF_FIFO", "DEL PrimitiveType: byte", "DEL SimpleName: TMAGIC", "DEL Javadoc", "DEL PrimitiveType: int", "DEL TagElement: @version", "DEL TextElement: The length of the magic field in a header buffer.", "DEL FieldDeclaration", "DEL TextElement: Directory file type.", "DEL TextElement: The namr of the GNU tar entry which contains a long name.", "DEL VariableDeclarationFragment", "DEL SimpleName: LF_CHR", "DEL TagElement", "DEL TextElement: This interface contains all the definitions used in the package.", "DEL FieldDeclaration", "DEL PrimitiveType: byte", "DEL VariableDeclarationFragment", "DEL CastExpression", "DEL SimpleName: GNU_LONGLINK", "DEL TagElement: @author", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL CharacterLiteral: '3'", "DEL Javadoc", "DEL CastExpression", "DEL PrimitiveType: byte", "DEL TagElement", "DEL NumberLiteral: 12", "DEL SimpleName: LF_LINK", "DEL Javadoc", "DEL NumberLiteral: 8", "DEL PrimitiveType: byte", "DEL SimpleName: UNAMELEN", "DEL FieldDeclaration", "DEL TextElement: The magic tag representing a GNU tar archive.", "DEL SimpleName: String", "DEL NumberLiteral: 8", "DEL TextElement: Symbolic link file type.", "DEL TextElement: The length of the user name field in a header buffer.", "DEL PrimitiveType: byte", "DEL PrimitiveType: byte", "DEL Javadoc", "DEL NumberLiteral: 8", "DEL StringLiteral: \"././@LongLink\"", "DEL TagElement", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleType: String", "DEL CharacterLiteral: '2'", "DEL FieldDeclaration", "DEL TextElement: The length of the modification time field in a header buffer.", "DEL PrimitiveType: byte", "DEL TagElement", "DEL Javadoc", "DEL TagElement", "DEL NumberLiteral: 32", "DEL PrimitiveType: byte", "DEL CharacterLiteral: '6'", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL FieldDeclaration", "DEL CharacterLiteral: '1'", "DEL FieldDeclaration", "DEL TagElement", "DEL TextElement: The length of the devices field in a header buffer.", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL Javadoc", "DEL FieldDeclaration", "DEL FieldDeclaration", "DEL FieldDeclaration", "DEL Javadoc", "DEL TextElement: Link file type.", "DEL NumberLiteral: 32", "DEL TextElement:  <a href=\"mailto:stefano@apache.org\">Stefano Mazzocchi</a>", "DEL NumberLiteral: 0", "DEL SimpleName: DEVLEN", "DEL FieldDeclaration", "DEL TagElement", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL TextElement: Identifies the *next* file on the tape as having a long name.", "DEL PrimitiveType: int", "DEL SimpleName: MODELEN", "DEL TagElement", "DEL PrimitiveType: byte", "DEL Javadoc", "DEL SimpleName: CHKSUMLEN", "DEL PrimitiveType: int", "DEL TextElement: The magic tag representing a POSIX tar archive.", "DEL Javadoc", "DEL FieldDeclaration", "DEL CastExpression", "DEL TagElement", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: GNAMELEN", "DEL SimpleName: LF_DIR", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL PrimitiveType: int", "DEL Javadoc", "DEL TextElement: FIFO (pipe) file type."]}]}}, {"TarConstants_diff": {"operations": ["Delete QualifiedName: org.apache.commons.io.compress.tar(0)", "Delete PackageDeclaration(1)", "Delete TextElement: This interface contains all the definitions used in the package.(2)", "Delete TagElement(3)", "Delete TextElement:  <a href=\"mailto:time@ice.com\">Timothy Gerard Endres</a>(4)", "Delete TagElement: @author(5)", "Delete TextElement:  <a href=\"mailto:stefano@apache.org\">Stefano Mazzocchi</a>(6)", "Delete TagElement: @author(7)", "Delete TextElement:  $Revision: 1.3 $ $Date: 2003/10/13 07:01:15 $(8)", "Delete TagElement: @version(9)", "Delete Javadoc(10)", "Delete SimpleName: TarConstants(11)", "Delete TextElement: The length of the mode field in a header buffer.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete PrimitiveType: int(15)", "Delete SimpleName: MODELEN(16)", "Delete NumberLiteral: 8(17)", "Delete VariableDeclarationFragment(18)", "Delete FieldDeclaration(19)", "Delete TextElement: The length of the user id field in a header buffer.(20)", "Delete TagElement(21)", "Delete Javadoc(22)", "Delete PrimitiveType: int(23)", "Delete SimpleName: UIDLEN(24)", "Delete NumberLiteral: 8(25)", "Delete VariableDeclarationFragment(26)", "Delete FieldDeclaration(27)", "Delete TextElement: The length of the group id field in a header buffer.(28)", "Delete TagElement(29)", "Delete Javadoc(30)", "Delete PrimitiveType: int(31)", "Delete SimpleName: GIDLEN(32)", "Delete NumberLiteral: 8(33)", "Delete VariableDeclarationFragment(34)", "Delete FieldDeclaration(35)", "Delete TextElement: The length of the checksum field in a header buffer.(36)", "Delete TagElement(37)", "Delete Javadoc(38)", "Delete PrimitiveType: int(39)", "Delete SimpleName: CHKSUMLEN(40)", "Delete NumberLiteral: 8(41)", "Delete VariableDeclarationFragment(42)", "Delete FieldDeclaration(43)", "Delete TextElement: The length of the size field in a header buffer.(44)", "Delete TagElement(45)", "Delete Javadoc(46)", "Delete PrimitiveType: int(47)", "Delete SimpleName: SIZELEN(48)", "Delete NumberLiteral: 12(49)", "Delete VariableDeclarationFragment(50)", "Delete FieldDeclaration(51)", "Delete TextElement: The length of the magic field in a header buffer.(52)", "Delete TagElement(53)", "Delete Javadoc(54)", "Delete PrimitiveType: int(55)", "Delete SimpleName: MAGICLEN(56)", "Delete NumberLiteral: 8(57)", "Delete VariableDeclarationFragment(58)", "Delete FieldDeclaration(59)", "Delete TextElement: The length of the modification time field in a header buffer.(60)", "Delete TagElement(61)", "Delete Javadoc(62)", "Delete PrimitiveType: int(63)", "Delete SimpleName: MODTIMELEN(64)", "Delete NumberLiteral: 12(65)", "Delete VariableDeclarationFragment(66)", "Delete FieldDeclaration(67)", "Delete TextElement: The length of the user name field in a header buffer.(68)", "Delete TagElement(69)", "Delete Javadoc(70)", "Delete PrimitiveType: int(71)", "Delete SimpleName: UNAMELEN(72)", "Delete NumberLiteral: 32(73)", "Delete VariableDeclarationFragment(74)", "Delete FieldDeclaration(75)", "Delete TextElement: The length of the group name field in a header buffer.(76)", "Delete TagElement(77)", "Delete Javadoc(78)", "Delete PrimitiveType: int(79)", "Delete SimpleName: GNAMELEN(80)", "Delete NumberLiteral: 32(81)", "Delete VariableDeclarationFragment(82)", "Delete FieldDeclaration(83)", "Delete TextElement: The length of the devices field in a header buffer.(84)", "Delete TagElement(85)", "Delete Javadoc(86)", "Delete PrimitiveType: int(87)", "Delete SimpleName: DEVLEN(88)", "Delete NumberLiteral: 8(89)", "Delete VariableDeclarationFragment(90)", "Delete FieldDeclaration(91)", "Delete TextElement: LF_ constants represent the \"link flag\" of an entry, or more commonly,(92)", "Delete TextElement: the \"entry type\". This is the \"old way\" of indicating a normal file.(93)", "Delete TagElement(94)", "Delete Javadoc(95)", "Delete PrimitiveType: byte(96)", "Delete SimpleName: LF_OLDNORM(97)", "Delete NumberLiteral: 0(98)", "Delete VariableDeclarationFragment(99)", "Delete FieldDeclaration(100)", "Delete TextElement: Normal file type.(101)", "Delete TagElement(102)", "Delete Javadoc(103)", "Delete PrimitiveType: byte(104)", "Delete SimpleName: LF_NORMAL(105)", "Delete PrimitiveType: byte(106)", "Delete CharacterLiteral: '0'(107)", "Delete CastExpression(108)", "Delete VariableDeclarationFragment(109)", "Delete FieldDeclaration(110)", "Delete TextElement: Link file type.(111)", "Delete TagElement(112)", "Delete Javadoc(113)", "Delete PrimitiveType: byte(114)", "Delete SimpleName: LF_LINK(115)", "Delete PrimitiveType: byte(116)", "Delete CharacterLiteral: '1'(117)", "Delete CastExpression(118)", "Delete VariableDeclarationFragment(119)", "Delete FieldDeclaration(120)", "Delete TextElement: Symbolic link file type.(121)", "Delete TagElement(122)", "Delete Javadoc(123)", "Delete PrimitiveType: byte(124)", "Delete SimpleName: LF_SYMLINK(125)", "Delete PrimitiveType: byte(126)", "Delete CharacterLiteral: '2'(127)", "Delete CastExpression(128)", "Delete VariableDeclarationFragment(129)", "Delete FieldDeclaration(130)", "Delete TextElement: Character device file type.(131)", "Delete TagElement(132)", "Delete Javadoc(133)", "Delete PrimitiveType: byte(134)", "Delete SimpleName: LF_CHR(135)", "Delete PrimitiveType: byte(136)", "Delete CharacterLiteral: '3'(137)", "Delete CastExpression(138)", "Delete VariableDeclarationFragment(139)", "Delete FieldDeclaration(140)", "Delete TextElement: Block device file type.(141)", "Delete TagElement(142)", "Delete Javadoc(143)", "Delete PrimitiveType: byte(144)", "Delete SimpleName: LF_BLK(145)", "Delete PrimitiveType: byte(146)", "Delete CharacterLiteral: '4'(147)", "Delete CastExpression(148)", "Delete VariableDeclarationFragment(149)", "Delete FieldDeclaration(150)", "Delete TextElement: Directory file type.(151)", "Delete TagElement(152)", "Delete Javadoc(153)", "Delete PrimitiveType: byte(154)", "Delete SimpleName: LF_DIR(155)", "Delete PrimitiveType: byte(156)", "Delete CharacterLiteral: '5'(157)", "Delete CastExpression(158)", "Delete VariableDeclarationFragment(159)", "Delete FieldDeclaration(160)", "Delete TextElement: FIFO (pipe) file type.(161)", "Delete TagElement(162)", "Delete Javadoc(163)", "Delete PrimitiveType: byte(164)", "Delete SimpleName: LF_FIFO(165)", "Delete PrimitiveType: byte(166)", "Delete CharacterLiteral: '6'(167)", "Delete CastExpression(168)", "Delete VariableDeclarationFragment(169)", "Delete FieldDeclaration(170)", "Delete TextElement: Contiguous file type.(171)", "Delete TagElement(172)", "Delete Javadoc(173)", "Delete PrimitiveType: byte(174)", "Delete SimpleName: LF_CONTIG(175)", "Delete PrimitiveType: byte(176)", "Delete CharacterLiteral: '7'(177)", "Delete CastExpression(178)", "Delete VariableDeclarationFragment(179)", "Delete FieldDeclaration(180)", "Delete TextElement: The magic tag representing a POSIX tar archive.(181)", "Delete TagElement(182)", "Delete Javadoc(183)", "Delete SimpleName: String(184)", "Delete SimpleType: String(185)", "Delete SimpleName: TMAGIC(186)", "Delete StringLiteral: \"ustar\"(187)", "Delete VariableDeclarationFragment(188)", "Delete FieldDeclaration(189)", "Delete TextElement: The magic tag representing a GNU tar archive.(190)", "Delete TagElement(191)", "Delete Javadoc(192)", "Delete SimpleName: String(193)", "Delete SimpleType: String(194)", "Delete SimpleName: GNU_TMAGIC(195)", "Delete StringLiteral: \"ustar  \"(196)", "Delete VariableDeclarationFragment(197)", "Delete FieldDeclaration(198)", "Delete TextElement: The namr of the GNU tar entry which contains a long name.(199)", "Delete TagElement(200)", "Delete Javadoc(201)", "Delete SimpleName: String(202)", "Delete SimpleType: String(203)", "Delete SimpleName: GNU_LONGLINK(204)", "Delete StringLiteral: \"././@LongLink\"(205)", "Delete VariableDeclarationFragment(206)", "Delete FieldDeclaration(207)", "Delete TextElement: Identifies the *next* file on the tape as having a long name.(208)", "Delete TagElement(209)", "Delete Javadoc(210)", "Delete PrimitiveType: byte(211)", "Delete SimpleName: LF_GNUTYPE_LONGNAME(212)", "Delete PrimitiveType: byte(213)", "Delete CharacterLiteral: 'L'(214)", "Delete CastExpression(215)", "Delete VariableDeclarationFragment(216)", "Delete FieldDeclaration(217)", "Delete TypeDeclaration: interface(218)"]}}, {"TarEntry_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.io.compress.tar", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.File", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Date", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Locale", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Dimension", "DEL PrimitiveType: byte", "DEL SimpleName: offset", "DEL TextElement: are instantiated with the TarEntry( File ) constructor. These entries have", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL QualifiedName: TarConstants.GNAMELEN", "DEL Modifier: public", "DEL ConditionalExpression", "DEL SimpleName: other", "DEL Block", "DEL SimpleName: name", "DEL PrimitiveType: int", "DEL SimpleName: m_size", "DEL SimpleName: isDir", "DEL TagElement: @param", "DEL TagElement: @see", "DEL TextElement: construct the entry's header \"by hand\". File is set to null.", "DEL TextElement: is determined by the name of the descendant starting with this entry's", "DEL Modifier: final", "DEL PrimitiveType: long", "DEL SimpleName: computeCheckSum", "DEL SimpleName: TarUtils", "DEL TagElement: @author", "DEL TextElement:  This entry's new user id.", "DEL TextElement: Get this entry's name.", "DEL TextElement: header, as well as the entry's File. Entries can be instantiated in one of", "DEL TagElement: @param", "DEL TextElement:  The tar entry header buffer to fill in.", "DEL SimpleName: isGNULongNameEntry", "DEL ReturnStatement", "DEL SimpleName: m_file", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL SimpleName: TarUtils", "DEL SimpleName: groupName", "DEL SimpleName: header", "DEL SimpleType: File", "DEL SimpleName: StringBuffer", "DEL SimpleName: userId", "DEL TagElement", "DEL SimpleName: offset", "DEL CharacterLiteral: '/'", "DEL SimpleName: TarInputStream", "DEL Block", "DEL TextElement:  This entry's mode.", "DEL MethodInvocation", "DEL StringLiteral: \"\"", "DEL MethodDeclaration", "DEL CastExpression", "DEL SimpleName: m_groupName", "DEL IfStatement", "DEL Assignment: =", "DEL TagElement", "DEL PrefixExpression: -", "DEL SimpleName: m_linkFlag", "DEL PrimitiveType: int", "DEL SimpleName: m_linkFlag", "DEL TagElement: @return", "DEL IfStatement", "DEL Assignment: =", "DEL Modifier: public", "DEL SimpleName: getName", "DEL ExpressionStatement", "DEL Block", "DEL Assignment: =", "DEL NumberLiteral: 2", "DEL QualifiedName: TarConstants.LF_NORMAL", "DEL SimpleType: String", "DEL TextElement: Set this entry's user id.", "DEL PrimitiveType: void", "DEL SimpleName: setGroupId", "DEL MethodRef", "DEL SimpleName: time", "DEL Modifier: private", "DEL TagElement", "DEL SimpleName: TarUtils", "DEL SimpleName: length", "DEL Javadoc", "DEL SimpleName: TarUtils", "DEL Modifier: final", "DEL SimpleName: time", "DEL SimpleName: startsWith", "DEL ClassInstanceCreation", "DEL SimpleName: other", "DEL TextElement:  <a href=\"mailto:time@ice.com\">Timothy Gerard Endres</a>", "DEL Block", "DEL ReturnStatement", "DEL TextElement:  the name of the entry", "DEL SimpleName: parseOctal", "DEL SimpleName: setGroupName", "DEL PrimitiveType: boolean", "DEL TagElement: @param", "DEL StringLiteral: \"netware\"", "DEL MethodInvocation", "DEL MethodRefParameter", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL Javadoc", "DEL TextElement: Set this entry's modification time. The parameter passed to this method", "DEL MethodInvocation", "DEL Javadoc", "DEL TagElement", "DEL SimpleType: StringBuffer", "DEL ExpressionStatement", "DEL SimpleName: getMode", "DEL SimpleName: substring", "DEL SimpleName: offset", "DEL Javadoc", "DEL InfixExpression: *", "DEL MethodInvocation", "DEL TextElement: Set this entry's name.", "DEL SimpleName: setUserName", "DEL SimpleName: m_userID", "DEL Modifier: public", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL SimpleName: m_file", "DEL PrefixExpression: !", "DEL TagElement: @return", "DEL TextElement:  Entry to be checked as a descendent of", "DEL SimpleName: m_linkName", "DEL SimpleName: header", "DEL ExpressionStatement", "DEL SimpleName: StringBuffer", "DEL TextElement:  True if the entries are equal.", "DEL TagElement", "DEL SimpleName: i", "DEL ArrayType: byte[]", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL Modifier: private", "DEL ExpressionStatement", "DEL PrimitiveType: long", "DEL SimpleName: time", "DEL SimpleType: String", "DEL NumberLiteral: 0", "DEL PrimitiveType: int", "DEL SimpleName: offset", "DEL SimpleName: length", "DEL FieldDeclaration", "DEL SimpleName: setModTime", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL SimpleName: System", "DEL Modifier: private", "DEL SimpleName: getGroupName", "DEL SimpleName: time", "DEL FieldDeclaration", "DEL SimpleName: String", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: StringBuffer", "DEL TextElement: char gid[8];", "DEL SimpleName: getName", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: name", "DEL SimpleName: buffer", "DEL PrimitiveType: void", "DEL SimpleType: StringBuffer", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 1", "DEL PrimitiveType: int", "DEL TextElement: Set this entry's user id.", "DEL SimpleName: TarUtils", "DEL FieldDeclaration", "DEL SimpleType: String", "DEL Javadoc", "DEL TagElement: @param", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL SimpleName: getOctalBytes", "DEL SimpleName: TarEntry", "DEL Modifier: public", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: StringBuffer", "DEL MethodDeclaration", "DEL ArrayAccess", "DEL SimpleName: m_name", "DEL Assignment: =", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: toString", "DEL Javadoc", "DEL TagElement", "DEL StringLiteral: \"netware\"", "DEL SimpleName: String", "DEL SimpleName: getDirectoryEntries", "DEL SimpleName: linkFlag", "DEL TextElement:  This entry's new group id.", "DEL SimpleName: m_userID", "DEL FieldDeclaration", "DEL PrefixExpression: ++", "DEL SimpleName: StringBuffer", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL CharacterLiteral: 'Z'", "DEL ExpressionStatement", "DEL SimpleName: header", "DEL SimpleName: ch2", "DEL TextElement:  True if entry is a descendant of", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL QualifiedName: TarConstants.CHKSUMLEN", "DEL Modifier: public", "DEL SimpleName: String", "DEL TagElement", "DEL SimpleName: m_name", "DEL PrimitiveType: int", "DEL SimpleName: equals", "DEL Assignment: =", "DEL ReturnStatement", "DEL SimpleName: m_modTime", "DEL SimpleType: Date", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: getNameBytes", "DEL TextElement: char devmajor[8];", "DEL TextElement: Finally, TarEntries can be constructed from nothing but a name. This allows", "DEL SimpleType: StringBuffer", "DEL SimpleName: name", "DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL InfixExpression: >", "DEL SimpleName: m_name", "DEL Javadoc", "DEL Assignment: =", "DEL Modifier: static", "DEL SimpleName: m_linkFlag", "DEL CharacterLiteral: ':'", "DEL SimpleName: m_name", "DEL SimpleName: m_groupID", "DEL QualifiedName: TarConstants.UIDLEN", "DEL SimpleName: getLongOctalBytes", "DEL ExpressionStatement", "DEL Assignment: +=", "DEL SimpleName: TarUtils", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL SimpleName: m_devMinor", "DEL TextElement:  True if this entry is a directory.", "DEL PrimitiveType: int", "DEL Block", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL SimpleName: m_linkName", "DEL ClassInstanceCreation", "DEL SimpleName: getModTime", "DEL SimpleName: StringBuffer", "DEL SimpleName: groupId", "DEL MethodInvocation", "DEL MethodInvocation", "DEL NumberLiteral: 2", "DEL SimpleName: m_modTime", "DEL MethodDeclaration", "DEL SimpleName: m_checkSum", "DEL TextElement: char mode[8];", "DEL MethodDeclaration", "DEL TextElement: TarEntries that are created from the header bytes read from an archive are", "DEL SimpleType: String", "DEL NumberLiteral: 1", "DEL SimpleName: StringBuffer", "DEL Modifier: final", "DEL SimpleName: m_groupID", "DEL SimpleName: buffer", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL TextElement: The entry's link name.", "DEL SimpleName: other", "DEL TagElement: @return", "DEL MethodInvocation", "DEL Block", "DEL Javadoc", "DEL MethodDeclaration", "DEL Assignment: =", "DEL SimpleName: m_groupID", "DEL SimpleName: indexOf", "DEL PrimitiveType: int", "DEL TagElement: @return", "DEL SimpleName: m_modTime", "DEL SimpleName: TarEntry", "DEL SimpleName: linkFlag", "DEL SimpleName: m_groupName", "DEL SimpleName: offset", "DEL TextElement: char magic[8];", "DEL Modifier: final", "DEL InfixExpression: <=", "DEL MethodInvocation", "DEL SimpleName: offset", "DEL TagElement: @return", "DEL Assignment: +=", "DEL Block", "DEL SimpleName: i", "DEL MethodDeclaration", "DEL SimpleType: TarEntry", "DEL Modifier: public", "DEL SimpleName: getGroupID", "DEL ExpressionStatement", "DEL TagElement: @deprecated", "DEL WhileStatement", "DEL SimpleName: offset", "DEL PrimitiveType: char", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleName: getTime", "DEL SimpleName: colon", "DEL SimpleName: m_groupID", "DEL SimpleName: buffer", "DEL StringLiteral: \"\"", "DEL SimpleName: TarEntry", "DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: toLowerCase", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL ReturnStatement", "DEL Assignment: =", "DEL CastExpression", "DEL TagElement", "DEL SimpleName: isDirectory", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: i", "DEL QualifiedName: TarConstants.GIDLEN", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleName: offset", "DEL SimpleName: size", "DEL ExpressionStatement", "DEL SimpleName: TarEntry", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleType: TarEntry", "DEL SimpleType: TarEntry", "DEL SimpleType: StringBuffer", "DEL Assignment: =", "DEL SimpleName: time", "DEL Block", "DEL CharacterLiteral: '/'", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Dimension", "DEL TextElement: entries have their header filled in using the header bytes. They also set the", "DEL Javadoc", "DEL Block", "DEL TextElement: Get this entry's mode.", "DEL Block", "DEL Assignment: +=", "DEL SimpleName: name", "DEL Block", "DEL Block", "DEL SimpleName: m_file", "DEL Assignment: =", "DEL SimpleType: String", "DEL SimpleName: file", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: buffer", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL SimpleName: TarOutputStream", "DEL NumberLiteral: 0", "DEL SimpleName: offset", "DEL SimpleName: offset", "DEL SimpleName: offset", "DEL MethodInvocation", "DEL SimpleName: startsWith", "DEL SingleVariableDeclaration", "DEL SimpleName: header", "DEL SimpleName: osName", "DEL SimpleName: offset", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL Assignment: =", "DEL TextElement:  This entry's new file size.", "DEL PrimitiveType: long", "DEL SimpleName: buffer", "DEL NumberLiteral: 1000", "DEL Assignment: =", "DEL TextElement: Get this entry's user name.", "DEL QualifiedName: TarConstants.MODELEN", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleName: result", "DEL InfixExpression: ==", "DEL SimpleName: setModTime", "DEL TextElement: Construct an entry with a name an a link flag.", "DEL MethodDeclaration", "DEL Assignment: =", "DEL SimpleName: StringBuffer", "DEL SimpleName: setUserID", "DEL SimpleName: osName", "DEL QualifiedName: TarConstants.UIDLEN", "DEL TextElement: Return whether or not this entry represents a directory.", "DEL SimpleName: offset", "DEL MethodDeclaration", "DEL TagElement: @return", "DEL SimpleName: String", "DEL Modifier: private", "DEL TagElement", "DEL Block", "DEL Assignment: =", "DEL SimpleName: m_groupID", "DEL TextElement: char size[12];", "DEL ArrayAccess", "DEL SimpleName: header", "DEL SimpleName: m_mode", "DEL NumberLiteral: 0", "DEL SimpleType: StringBuffer", "DEL SimpleName: StringBuffer", "DEL SimpleName: m_userName", "DEL SimpleType: StringBuffer", "DEL Modifier: final", "DEL Assignment: =", "DEL SimpleName: offset", "DEL SimpleName: getUserId", "DEL SimpleName: checkSumOffset", "DEL ExpressionStatement", "DEL NumberLiteral: 1000", "DEL SimpleName: ch2", "DEL Javadoc", "DEL Javadoc", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: offset", "DEL Javadoc", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: parseOctal", "DEL Assignment: =", "DEL SimpleName: m_userName", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TextElement: The entry's permission mode.", "DEL Block", "DEL SimpleName: NAMELEN", "DEL QualifiedName: TarConstants.UNAMELEN", "DEL TagElement: @param", "DEL SimpleName: ch1", "DEL Assignment: +=", "DEL InfixExpression: >=", "DEL Block", "DEL SimpleName: groupId", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: groupId", "DEL ExpressionStatement", "DEL TextElement:  This entry's user id.", "DEL SimpleName: m_groupName", "DEL Block", "DEL SimpleName: Date", "DEL SimpleName: TarUtils", "DEL SimpleName: offset", "DEL TagElement", "DEL SimpleName: String", "DEL TagElement", "DEL QualifiedName: TarConstants.GIDLEN", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL Javadoc", "DEL StringLiteral: \"/\"", "DEL Javadoc", "DEL CharacterLiteral: ' '", "DEL TagElement", "DEL Javadoc", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL SimpleName: StringBuffer", "DEL Javadoc", "DEL ExpressionStatement", "DEL Modifier: public", "DEL Modifier: final", "DEL MethodInvocation", "DEL TextElement: char linkflag;", "DEL FieldDeclaration", "DEL Javadoc", "DEL SimpleName: isDir", "DEL TextElement: The entry's link flag.", "DEL TagElement: @author", "DEL SimpleName: getOctalBytes", "DEL SingleVariableDeclaration", "DEL Block", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: getProperty", "DEL SimpleName: isDirectory", "DEL Assignment: =", "DEL TextElement: char devminor[8];", "DEL Block", "DEL CastExpression", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL TextElement:  Entry to be checked for equality.", "DEL QualifiedName: TarConstants.MODTIMELEN", "DEL TagElement", "DEL ExpressionStatement", "DEL Modifier: public", "DEL TextElement:  This entry's user name.", "DEL InfixExpression: /", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL TextElement: fields are set to defaults and the File is set to null. <p>", "DEL SimpleName: TarEntry", "DEL Modifier: public", "DEL TextElement:  <a href=\"mailto:peter@apache.org\">Peter Donald</a>", "DEL ReturnStatement", "DEL TextElement: Get this entry's file size.", "DEL SimpleName: parseOctal", "DEL SimpleName: user", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL TextElement:  $Revision: 1.3 $ $Date: 2003/10/13 07:01:15 $", "DEL QualifiedName: TarConstants.MODTIMELEN", "DEL SimpleName: osName", "DEL SimpleName: getCheckSumOctalBytes", "DEL Modifier: public", "DEL MethodRef", "DEL Javadoc", "DEL SimpleName: setMode", "DEL TagElement: @see", "DEL SimpleName: i", "DEL PostfixExpression: ++", "DEL SimpleName: name", "DEL SimpleName: offset", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL Modifier: final", "DEL ExpressionStatement", "DEL TextElement: Set this entry's modification time.", "DEL Modifier: final", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: offset", "DEL ArrayType: TarEntry[]", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL Block", "DEL ExpressionStatement", "DEL TextElement: used when extracting from or listing the contents of an archive. These", "DEL Javadoc", "DEL SimpleName: m_linkFlag", "DEL Modifier: private", "DEL SimpleName: groupName", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: m_groupName", "DEL SimpleType: Date", "DEL TagElement: @param", "DEL PrimitiveType: void", "DEL VariableDeclarationFragment", "DEL Block", "DEL TagElement", "DEL ReturnStatement", "DEL IfStatement", "DEL ExpressionStatement", "DEL QualifiedName: list.length", "DEL MethodDeclaration", "DEL Assignment: =", "DEL PrimitiveType: int", "DEL InfixExpression: !=", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: TarUtils", "DEL SimpleName: m_file", "DEL Modifier: final", "DEL SimpleName: TarUtils", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL InfixExpression: ||", "DEL TagElement: @see", "DEL SimpleName: setUserID", "DEL Block", "DEL MethodRef", "DEL QualifiedName: TarConstants.LF_GNUTYPE_LONGNAME", "DEL Modifier: public", "DEL SimpleName: m_name", "DEL Block", "DEL TagElement", "DEL NumberLiteral: 0", "DEL QualifiedName: TarConstants.DEVLEN", "DEL Assignment: =", "DEL MethodDeclaration", "DEL SimpleName: m_linkFlag", "DEL TagElement: @param", "DEL Block", "DEL ArrayAccess", "DEL Modifier: public", "DEL QualifiedName: TarConstants.UNAMELEN", "DEL SimpleName: TarUtils", "DEL Modifier: public", "DEL TextElement:  This entry's new user id.", "DEL SimpleName: parseName", "DEL Modifier: public", "DEL SimpleName: groupId", "DEL Modifier: final", "DEL ArrayType: byte[]", "DEL SimpleName: offset", "DEL Javadoc", "DEL Modifier: final", "DEL ForStatement", "DEL Modifier: final", "DEL SimpleName: getName", "DEL InfixExpression: /", "DEL SimpleName: buffer", "DEL TextElement: char gname[TGNMLEN];", "DEL Block", "DEL NumberLiteral: 1", "DEL SimpleName: m_userID", "DEL TextElement: The entry's group id.", "DEL SimpleName: m_mode", "DEL SimpleName: checkSumOffset", "DEL TextElement: Construct an entry for a file. File is set to file, and the header is", "DEL SimpleName: m_modTime", "DEL MethodInvocation", "DEL Block", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL SimpleName: file", "DEL NumberLiteral: 1000", "DEL Block", "DEL Javadoc", "DEL SimpleType: StringBuffer", "DEL SimpleName: name", "DEL SimpleName: parseName", "DEL SimpleName: m_size", "DEL MethodDeclaration", "DEL SimpleName: File", "DEL SimpleName: m_name", "DEL TextElement: Parse an entry's header information from a header buffer.", "DEL ExpressionStatement", "DEL SimpleName: getProperty", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL PrimitiveType: int", "DEL CharacterLiteral: ':'", "DEL ExpressionStatement", "DEL TagElement: @return", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleName: m_userName", "DEL TextElement: Set this entry's group id.", "DEL SimpleName: ch1", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: String", "DEL TextElement: Set this entry's modification time.", "DEL MethodInvocation", "DEL SimpleType: TarEntry", "DEL TagElement: @deprecated", "DEL ExpressionStatement", "DEL NumberLiteral: 100", "DEL TextElement: information is constructed from other information. In this case the header", "DEL SimpleName: m_mode", "DEL IfStatement", "DEL MethodInvocation", "DEL TextElement: Get this entry's user id.", "DEL SimpleName: m_linkFlag", "DEL Modifier: private", "DEL SimpleName: endsWith", "DEL PrimitiveType: byte", "DEL InfixExpression: <", "DEL SimpleName: parseTarHeader", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL TextElement:  This entry's file size.", "DEL MethodInvocation", "DEL PrimitiveType: long", "DEL TextElement: three ways, depending on how they are to be used. <p>", "DEL SimpleName: File", "DEL QualifiedName: TarConstants.UNAMELEN", "DEL BooleanLiteral: true", "DEL PrimitiveType: boolean", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL Javadoc", "DEL PrimitiveType: int", "DEL TextElement:  This entry's new name.", "DEL ExpressionStatement", "DEL TextElement: Construct an entry from an archive's header bytes. File is set to null.", "DEL TagElement: @return", "DEL Assignment: =", "DEL NumberLiteral: 0", "DEL SimpleType: Date", "DEL SimpleType: StringBuffer", "DEL SimpleName: name", "DEL SimpleName: desc", "DEL QualifiedName: TarConstants.SIZELEN", "DEL TextElement: Construct an entry with only a name. This allows the programmer to", "DEL SimpleName: buffer", "DEL SimpleName: file", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL TagElement: @param", "DEL Modifier: private", "DEL ArrayCreation", "DEL Assignment: =", "DEL InfixExpression: /", "DEL TextElement:  An array of TarEntry's for this entry's children.", "DEL MethodInvocation", "DEL SimpleName: checkSum", "DEL TagElement: @deprecated", "DEL SimpleName: TarEntry", "DEL SimpleName: name", "DEL PostfixExpression: ++", "DEL SimpleName: m_checkSum", "DEL CharacterLiteral: 'A'", "DEL SimpleName: m_userName", "DEL ClassInstanceCreation", "DEL TagElement", "DEL TextElement: array of TarEntries for this entry's children.", "DEL PrimitiveType: int", "DEL SimpleName: offset", "DEL PrefixExpression: -", "DEL SimpleName: header", "DEL SimpleName: m_size", "DEL PrefixExpression: ++", "DEL SimpleName: m_devMinor", "DEL VariableDeclarationStatement", "DEL SimpleName: name", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SimpleName: TarUtils", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL TextElement:  <a href=\"mailto:stefano@apache.org\">Stefano Mazzocchi</a>", "DEL TagElement", "DEL ArrayType: TarEntry[]", "DEL ExpressionStatement", "DEL StringLiteral: \"\"", "DEL StringLiteral: \"/\"", "DEL SimpleType: String", "DEL TextElement:  This entry's user id.", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: m_size", "DEL SimpleName: String", "DEL SimpleName: header", "DEL VariableDeclarationStatement", "DEL SimpleName: m_size", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: name", "DEL Assignment: =", "DEL PrimitiveType: byte", "DEL SimpleName: name", "DEL TagElement: @see", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: userId", "DEL TagElement", "DEL SimpleName: append", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleName: equals", "DEL SimpleName: getName", "DEL Block", "DEL TextElement:  The file that the entry represents.", "DEL TextElement:  This entry's new modification time.", "DEL SimpleName: getNameBytes", "DEL ArrayCreation", "DEL InfixExpression: &&", "DEL QualifiedName: Locale.US", "DEL TextElement: struct header {", "DEL TagElement: @return", "DEL PrimitiveType: int", "DEL TextElement: instantiated with the TarEntry( byte[] ) constructor. These entries will be", "DEL FieldDeclaration", "DEL SimpleName: colon", "DEL SimpleName: File", "DEL ParenthesizedExpression", "DEL SimpleName: m_mode", "DEL MethodInvocation", "DEL ReturnStatement", "DEL CharacterLiteral: 'a'", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL Block", "DEL TagElement: @param", "DEL SimpleName: offset", "DEL SimpleName: m_checkSum", "DEL SimpleName: offset", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL InfixExpression: /", "DEL PrimitiveType: boolean", "DEL SimpleName: buffer", "DEL Modifier: private", "DEL TextElement: constructed from information from the file.", "DEL SimpleName: file", "DEL ExpressionStatement", "DEL SimpleName: getLongOctalBytes", "DEL SimpleName: buffer", "DEL SimpleName: offset", "DEL SimpleName: size", "DEL MethodInvocation", "DEL SimpleName: m_linkFlag", "DEL Assignment: =", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleName: m_linkName", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleType: StringBuffer", "DEL SimpleName: buffer", "DEL SimpleName: offset", "DEL SimpleName: buffer", "DEL Assignment: =", "DEL SimpleName: header", "DEL ConstructorInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: TarUtils", "DEL ArrayType: TarEntry[]", "DEL TagElement: @param", "DEL TagElement: @return", "DEL SimpleName: buffer", "DEL SimpleName: name", "DEL TextElement: The entry's magic tag.", "DEL NumberLiteral: 1", "DEL Assignment: =", "DEL MethodDeclaration", "DEL Assignment: =", "DEL Assignment: =", "DEL QualifiedName: TarConstants.CHKSUMLEN", "DEL SimpleName: m_file", "DEL SimpleType: File", "DEL Modifier: public", "DEL TextElement:  true if this is a long name extension provided by GNU tar", "DEL QualifiedName: TarConstants.LF_DIR", "DEL TextElement: File to null, since they reference an archive entry not a file. <p>", "DEL ConstructorInvocation", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL SimpleName: offset", "DEL SimpleName: isDir", "DEL TextElement:  Description of Parameter", "DEL TagElement", "DEL Javadoc", "DEL SimpleName: StringBuffer", "DEL VariableDeclarationExpression", "DEL SimpleName: m_modTime", "DEL SimpleName: TarUtils", "DEL PrimitiveType: void", "DEL TextElement: Get this entry's user id.", "DEL ExpressionStatement", "DEL Assignment: =", "DEL ArrayType: TarEntry[]", "DEL TextElement: The entry's name.", "DEL Javadoc", "DEL Assignment: =", "DEL SimpleName: TarUtils", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL SimpleName: String", "DEL SimpleName: writeEntryHeader", "DEL SimpleName: parseTarHeader", "DEL VariableDeclarationFragment", "DEL Block", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL SimpleName: groupId", "DEL VariableDeclarationFragment", "DEL SimpleType: StringBuffer", "DEL SimpleName: TarUtils", "DEL SimpleName: m_name", "DEL SimpleName: m_devMinor", "DEL TextElement:  This entry's checksum.", "DEL Block", "DEL IfStatement", "DEL Block", "DEL ReturnStatement", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleName: m_mode", "DEL QualifiedName: TarConstants.GIDLEN", "DEL SimpleName: result", "DEL SimpleName: buffer", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: userId", "DEL SimpleName: groupName", "DEL SimpleType: StringBuffer", "DEL BooleanLiteral: true", "DEL QualifiedName: TarConstants.DEVLEN", "DEL SimpleName: m_devMajor", "DEL SimpleName: TarEntry", "DEL MethodInvocation", "DEL QualifiedName: TarConstants.LF_NORMAL", "DEL TagElement: @return", "DEL NumberLiteral: 0100644", "DEL QualifiedName: TarConstants.MODELEN", "DEL SimpleName: parseName", "DEL SimpleType: StringBuffer", "DEL SimpleName: file", "DEL StringLiteral: \"\"", "DEL PrimitiveType: int", "DEL SimpleName: substring", "DEL QualifiedName: TarConstants.MAGICLEN", "DEL InfixExpression: ||", "DEL SimpleName: getUserName", "DEL Block", "DEL SimpleName: userName", "DEL SimpleName: linkFlag", "DEL SimpleName: name", "DEL Assignment: =", "DEL SimpleName: list", "DEL SimpleName: header", "DEL ClassInstanceCreation", "DEL SimpleName: StringBuffer", "DEL VariableDeclarationStatement", "DEL TextElement:  This entry's group id.", "DEL TagElement", "DEL PostfixExpression: ++", "DEL StringLiteral: \"os.name\"", "DEL SimpleName: offset", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL QualifiedName: TarConstants.DEVLEN", "DEL SimpleName: m_userID", "DEL SimpleName: getGroupID", "DEL PrimitiveType: int", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL TextElement: reference to the File for convenience when writing entries. <p>", "DEL Assignment: =", "DEL TextElement: Construct an empty entry and prepares the header values.", "DEL Assignment: =", "DEL Assignment: =", "DEL CastExpression", "DEL ExpressionStatement", "DEL SimpleName: NAMELEN", "DEL Javadoc", "DEL SimpleName: header", "DEL SimpleName: offset", "DEL SimpleName: charAt", "DEL TagElement", "DEL Javadoc", "DEL SimpleType: StringBuffer", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL InfixExpression: >=", "DEL SimpleType: String", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleName: file", "DEL MethodInvocation", "DEL TextElement:  The ModTime value", "DEL Assignment: =", "DEL SimpleName: userName", "DEL SimpleName: getFile", "DEL SimpleName: charAt", "DEL SimpleName: TarUtils", "DEL MethodRefParameter", "DEL SimpleName: mode", "DEL TextElement: The entry's major device number.", "DEL TextElement:  Use getUserID() instead", "DEL IfStatement", "DEL SimpleType: StringBuffer", "DEL SimpleName: m_magic", "DEL QualifiedName: TarConstants.MAGICLEN", "DEL Modifier: final", "DEL SimpleName: m_modTime", "DEL TextElement: } header;", "DEL Modifier: final", "DEL Assignment: =", "DEL PrimitiveType: boolean", "DEL TagElement", "DEL Assignment: =", "DEL ForStatement", "DEL SimpleName: TarUtils", "DEL Dimension", "DEL TextElement: char mtime[12];", "DEL MethodDeclaration", "DEL CastExpression", "DEL MethodDeclaration", "DEL SimpleName: TarUtils", "DEL SimpleName: buffer", "DEL SimpleName: offset", "DEL SimpleName: desc", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: Date", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL SimpleName: offset", "DEL TextElement: Get this entry's group id.", "DEL SimpleName: StringBuffer", "DEL TagElement", "DEL SimpleName: parseName", "DEL ArrayType: String[]", "DEL SingleVariableDeclaration", "DEL SimpleName: m_name", "DEL Javadoc", "DEL TextElement: header names being equal.", "DEL SimpleName: offset", "DEL SimpleName: name", "DEL SimpleName: substring", "DEL TextElement: Get this entry's file.", "DEL SimpleName: header", "DEL StringLiteral: \"\"", "DEL Modifier: private", "DEL SimpleName: offset", "DEL ClassInstanceCreation", "DEL QualifiedName: TarConstants.LF_DIR", "DEL SimpleName: size", "DEL SingleVariableDeclaration", "DEL SimpleName: length", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: buffer", "DEL PrimitiveType: int", "DEL ArrayAccess", "DEL TagElement: @author", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: m_modTime", "DEL TextElement: The entry's user name.", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: i", "DEL SimpleName: m_file", "DEL Javadoc", "DEL PrimitiveType: void", "DEL SimpleName: m_linkName", "DEL SimpleName: toString", "DEL MethodInvocation", "DEL SimpleType: StringBuffer", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL QualifiedName: TarConstants.GNAMELEN", "DEL Dimension", "DEL SimpleName: m_linkFlag", "DEL TextElement:  This entry's group id.", "DEL TextElement: Get this entry's group id.", "DEL ArrayAccess", "DEL Javadoc", "DEL PrimitiveType: int", "DEL SimpleName: equals", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: header", "DEL Assignment: =", "DEL ConstructorInvocation", "DEL ExpressionStatement", "DEL SimpleName: StringBuffer", "DEL SimpleName: TarEntry", "DEL PrimitiveType: int", "DEL SimpleName: StringBuffer", "DEL TextElement:  The new Mode value", "DEL SimpleName: offset", "DEL NumberLiteral: 040755", "DEL QualifiedName: TarConstants.MAGICLEN", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleName: m_groupID", "DEL InfixExpression: !=", "DEL SimpleName: mode", "DEL QualifiedName: TarConstants.MODTIMELEN", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL Modifier: private", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL QualifiedName: TarConstants.SIZELEN", "DEL Assignment: =", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: colon", "DEL SimpleName: offset", "DEL SimpleName: replace", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL Assignment: +=", "DEL Block", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL SimpleName: m_devMajor", "DEL Assignment: =", "DEL SimpleName: Date", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL Assignment: +=", "DEL SimpleName: TarUtils", "DEL SimpleName: m_groupName", "DEL SimpleType: StringBuffer", "DEL TagElement", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL SimpleName: indexOf", "DEL SimpleName: header", "DEL PrimitiveType: byte", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL TextElement:  The tar entry header buffer to get information from.", "DEL SimpleName: isDirectory", "DEL TagElement: @param", "DEL NumberLiteral: 0", "DEL Modifier: final", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: NAMELEN", "DEL SimpleName: offset", "DEL SimpleName: name", "DEL FieldDeclaration", "DEL Modifier: private", "DEL InfixExpression: !=", "DEL SimpleName: result", "DEL SimpleType: File", "DEL SimpleName: String", "DEL QualifiedName: TarConstants.CHKSUMLEN", "DEL Block", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL Block", "DEL TextElement: Set this entry's group id.", "DEL SimpleName: userId", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: parseName", "DEL SimpleName: TarEntry", "DEL MethodInvocation", "DEL SimpleName: ch1", "DEL PrimitiveType: void", "DEL SimpleName: name", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: toString", "DEL Block", "DEL PostfixExpression: ++", "DEL MethodInvocation", "DEL CharacterLiteral: 'z'", "DEL TagElement", "DEL TagElement: @version", "DEL SimpleName: offset", "DEL SimpleName: substring", "DEL SimpleName: name", "DEL SimpleName: getName", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: list", "DEL SimpleName: header", "DEL Block", "DEL SimpleType: TarEntry", "DEL SimpleName: endsWith", "DEL SimpleName: offset", "DEL SimpleName: offset", "DEL SimpleName: m_name", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL SimpleName: TarUtils", "DEL SingleVariableDeclaration", "DEL TextElement:  This entry's new user name.", "DEL SimpleName: m_linkName", "DEL SimpleName: file", "DEL ExpressionStatement", "DEL Javadoc", "DEL TextElement:  Use setUserID() instead", "DEL Block", "DEL MethodDeclaration", "DEL NumberLiteral: 0", "DEL Modifier: final", "DEL Dimension", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL NullLiteral", "DEL TextElement: Determine if the two entries are equal. Equality is determined by the", "DEL SimpleName: Date", "DEL SimpleName: offset", "DEL SimpleName: indexOf", "DEL TagElement: @param", "DEL SimpleName: TarUtils", "DEL VariableDeclarationFragment", "DEL SimpleType: StringBuffer", "DEL SimpleName: TarEntry", "DEL TagElement: @param", "DEL TextElement:  Description of Parameter", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: getUserID", "DEL SimpleName: getGroupId", "DEL Assignment: =", "DEL SimpleName: getUserID", "DEL SimpleName: StringBuffer", "DEL SimpleType: File", "DEL TagElement: @see", "DEL Modifier: final", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: ch1", "DEL TextElement: name.", "DEL SimpleName: name", "DEL ExpressionStatement", "DEL SimpleName: header", "DEL SimpleName: m_linkFlag", "DEL IfStatement", "DEL TextElement:  Use setGroupID() instead", "DEL MethodDeclaration", "DEL SimpleName: checkSum", "DEL SimpleName: offset", "DEL QualifiedName: TarConstants.UIDLEN", "DEL TextElement: Set this entry's user name.", "DEL SimpleName: m_devMajor", "DEL TextElement: The entry's user id.", "DEL InfixExpression: <=", "DEL SimpleName: offset", "DEL SimpleName: System", "DEL SimpleName: isDescendent", "DEL SimpleName: offset", "DEL SimpleName: offset", "DEL TextElement:  This entry's new modification time.", "DEL VariableDeclarationFragment", "DEL TextElement: Set the mode for this entry", "DEL SimpleName: setGroupID", "DEL TextElement: The entry's size.", "DEL ReturnStatement", "DEL Modifier: private", "DEL TextElement: Set this entry's group name.", "DEL WhileStatement", "DEL Modifier: final", "DEL TagElement", "DEL SimpleName: charAt", "DEL Block", "DEL SimpleName: m_mode", "DEL SimpleName: mode", "DEL SimpleName: name", "DEL Block", "DEL StringLiteral: \"/\"", "DEL SimpleName: StringBuffer", "DEL SimpleName: getNameBytes", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL Javadoc", "DEL MethodDeclaration", "DEL TextElement:  The header bytes from a tar archive entry.", "DEL StringLiteral: \"/\"", "DEL SimpleName: header", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL Block", "DEL Block", "DEL Assignment: =", "DEL PrimitiveType: boolean", "DEL TagElement", "DEL SimpleName: name", "DEL NumberLiteral: 040755", "DEL TextElement: The entry's minor device number.", "DEL QualifiedName: TarConstants.TMAGIC", "DEL SimpleName: buffer", "DEL Modifier: final", "DEL Modifier: public", "DEL TextElement: is in \"Java time\".", "DEL PrimitiveType: void", "DEL SimpleName: name", "DEL Assignment: =", "DEL SimpleName: m_name", "DEL MethodInvocation", "DEL Javadoc", "DEL Assignment: =", "DEL SimpleName: m_size", "DEL VariableDeclarationStatement", "DEL TextElement: char name[NAMSIZ];", "DEL Block", "DEL TagElement: @return", "DEL Assignment: =", "DEL TagElement", "DEL QualifiedName: TarConstants.SIZELEN", "DEL SimpleName: user", "DEL Javadoc", "DEL QualifiedName: list.length", "DEL SimpleName: parseOctal", "DEL NumberLiteral: 1", "DEL NumberLiteral: 0", "DEL TextElement: The entry's group name.", "DEL ExpressionStatement", "DEL NumberLiteral: 0100644", "DEL SimpleName: setSize", "DEL TextElement:  This entry's new group id.", "DEL SimpleType: TarEntry", "DEL Assignment: +=", "DEL InfixExpression: !=", "DEL Modifier: public", "DEL ParenthesizedExpression", "DEL SimpleName: m_name", "DEL TagElement", "DEL QualifiedName: TarConstants.MODELEN", "DEL SimpleName: buffer", "DEL Assignment: +=", "DEL ParenthesizedExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: offset", "DEL SimpleName: getSize", "DEL Javadoc", "DEL SimpleName: header", "DEL Modifier: final", "DEL SimpleName: m_linkName", "DEL TextElement: Set this entry's file size.", "DEL TextElement: The C structure for a Tar Entry's header is: <pre>", "DEL Assignment: =", "DEL SimpleName: m_groupName", "DEL Modifier: public", "DEL SimpleName: TarUtils", "DEL SimpleName: setUserId", "DEL Javadoc", "DEL BooleanLiteral: false", "DEL SimpleName: user", "DEL SimpleName: TarEntry", "DEL PrefixExpression: -", "DEL SimpleName: setName", "DEL TextElement: char linkname[NAMSIZ];", "DEL CastExpression", "DEL TagElement", "DEL PrimitiveType: char", "DEL PrimitiveType: int", "DEL Block", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL SimpleName: m_file", "DEL SimpleType: Date", "DEL TagElement", "DEL Dimension", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL SimpleType: StringBuffer", "DEL SingleVariableDeclaration", "DEL SimpleType: TarEntry", "DEL TextElement:  This entry's group name.", "DEL SimpleName: getOctalBytes", "DEL IfStatement", "DEL FieldDeclaration", "DEL Block", "DEL SimpleName: m_modTime", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: userName", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Modifier: public", "DEL ConditionalExpression", "DEL SimpleName: m_groupID", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: header", "DEL Assignment: =", "DEL TextElement: Get this entry's checksum.", "DEL Assignment: =", "DEL TagElement", "DEL TagElement: @see", "DEL StringLiteral: \"user.name\"", "DEL SimpleName: String", "DEL SimpleName: NAMELEN", "DEL TagElement", "DEL PrimitiveType: void", "DEL QualifiedName: buffer.length", "DEL ExpressionStatement", "DEL SimpleName: getTime", "DEL ReturnStatement", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SimpleName: m_userName", "DEL Modifier: public", "DEL SimpleName: getCheckSum", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL Assignment: +=", "DEL SimpleName: offset", "DEL SimpleName: offset", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: getPath", "DEL TagElement", "DEL SimpleName: m_groupName", "DEL TextElement: </pre>", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: i", "DEL SimpleName: lastModified", "DEL InfixExpression: ==", "DEL SimpleName: user", "DEL PrimitiveType: void", "DEL SimpleName: m_magic", "DEL ArrayAccess", "DEL InfixExpression: &&", "DEL QualifiedName: File.separatorChar", "DEL Modifier: final", "DEL MethodRef", "DEL NumberLiteral: 31", "DEL TagElement: @return", "DEL SimpleName: m_devMajor", "DEL SimpleName: TarUtils", "DEL Javadoc", "DEL QualifiedName: TarConstants.GNAMELEN", "DEL SimpleName: groupId", "DEL StringLiteral: \"\"", "DEL ExpressionStatement", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL TagElement", "DEL FieldDeclaration", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL Block", "DEL SimpleName: offset", "DEL TagElement: @param", "DEL TextElement: Determine if the given entry is a descendant of this entry. Descendancy", "DEL IfStatement", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL TextElement: the programmer to construct the entry by hand, for instance when only an", "DEL SimpleName: getName", "DEL TextElement:  This entry's file.", "DEL SimpleName: offset", "DEL SimpleName: offset", "DEL SimpleName: NAMELEN", "DEL SimpleName: name", "DEL TagElement", "DEL SimpleName: m_checkSum", "DEL SimpleName: TarUtils", "DEL IfStatement", "DEL InfixExpression: >", "DEL NumberLiteral: 0", "DEL SimpleName: list", "DEL Assignment: +=", "DEL NumberLiteral: 1000", "DEL SimpleName: m_mode", "DEL SimpleName: offset", "DEL Javadoc", "DEL Dimension", "DEL ReturnStatement", "DEL Assignment: =", "DEL SimpleName: File", "DEL Modifier: public", "DEL SimpleName: StringBuffer", "DEL InfixExpression: <", "DEL QualifiedName: TarConstants.LF_DIR", "DEL TagElement: @param", "DEL NumberLiteral: 31", "DEL TextElement: The length of the name field in a header buffer.", "DEL TextElement: The entry's checksum.", "DEL TextElement:  This entry's new group name.", "DEL TextElement:  This entry's name.", "DEL TypeDeclaration: class", "DEL TagElement: @param", "DEL TextElement: InputStream is available for writing to the archive, and the header", "DEL ExpressionStatement", "DEL TextElement: This class represents an entry in a Tar archive. It consists of the entry's", "DEL Assignment: +=", "DEL PrimitiveType: long", "DEL InfixExpression: -", "DEL InfixExpression: <", "DEL SimpleName: name", "DEL Modifier: final", "DEL SimpleName: StringBuffer", "DEL SimpleName: m_magic", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL QualifiedName: TarConstants.DEVLEN", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: buffer", "DEL ExpressionStatement", "DEL SimpleName: toString", "DEL Block", "DEL SimpleName: m_userName", "DEL Assignment: =", "DEL Javadoc", "DEL SimpleName: getNameBytes", "DEL SimpleName: m_userID", "DEL MethodInvocation", "DEL QualifiedName: TarConstants.DEVLEN", "DEL PrimitiveType: byte", "DEL Assignment: +=", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: userId", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL ArrayType: byte[]", "DEL ExpressionStatement", "DEL SimpleType: StringBuffer", "DEL Modifier: private", "DEL Assignment: =", "DEL TagElement: @return", "DEL VariableDeclarationFragment", "DEL SimpleName: TarEntry", "DEL SimpleName: m_userID", "DEL SimpleName: TarEntry", "DEL Modifier: public", "DEL SimpleName: offset", "DEL Modifier: private", "DEL NumberLiteral: 1", "DEL VariableDeclarationFragment", "DEL QualifiedName: TarConstants.GNU_LONGLINK", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: NAMELEN", "DEL MethodDeclaration", "DEL SimpleName: userId", "DEL SimpleName: parseOctal", "DEL SimpleName: length", "DEL SimpleName: name", "DEL SimpleName: NAMELEN", "DEL SimpleName: buffer", "DEL Assignment: =", "DEL ReturnStatement", "DEL PrimitiveType: long", "DEL TextElement: char uname[TUNMLEN];", "DEL TextElement: Indicate if this entry is a GNU long name block", "DEL TextElement: Write an entry's header information to a header buffer.", "DEL TextElement: Get this entry's group name.", "DEL QualifiedName: TarConstants.CHKSUMLEN", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: isDirectory", "DEL TextElement: If this entry represents a file, and the file is a directory, return an", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL InfixExpression: +", "DEL ClassInstanceCreation", "DEL SimpleName: parseOctal", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: m_userID", "DEL SimpleName: offset", "DEL MethodInvocation", "DEL SimpleName: user", "DEL SimpleName: m_devMinor", "DEL SimpleName: getNameBytes", "DEL SimpleName: TarUtils", "DEL InfixExpression: &&", "DEL TextElement: The entry's modification time.", "DEL ExpressionStatement", "DEL SimpleName: header", "DEL TextElement: char uid[8];", "DEL Modifier: final", "DEL SimpleName: m_mode", "DEL Modifier: private", "DEL VariableDeclarationExpression", "DEL TagElement", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL SimpleName: ch1", "DEL SimpleName: TarUtils", "DEL VariableDeclarationFragment", "DEL SimpleName: parseOctal", "DEL Assignment: =", "DEL SimpleName: time", "DEL TagElement: @return", "DEL SimpleName: parseOctal", "DEL TagElement: @return", "DEL SimpleName: i", "DEL SimpleName: setGroupID", "DEL SimpleName: getOctalBytes", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Block", "DEL Modifier: public", "DEL NumberLiteral: 1000", "DEL FieldDeclaration", "DEL PrimitiveType: byte", "DEL TextElement: their header filled in using the File's information. They also keep a", "DEL SimpleName: offset", "DEL TagElement: @deprecated", "DEL Javadoc", "DEL SimpleName: m_file", "DEL TagElement: @return", "DEL Block", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL ConstructorInvocation", "DEL Javadoc", "DEL ExpressionStatement", "DEL CastExpression", "DEL SimpleName: m_file", "DEL SimpleName: m_magic", "DEL SimpleName: m_userName", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL ClassInstanceCreation", "DEL SimpleName: TarUtils", "DEL TextElement: TarEntries that are created from Files that are to be written into an archive", "DEL TextElement: char chksum[8];", "DEL ReturnStatement", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL Assignment: =", "DEL TagElement", "DEL SimpleName: desc", "DEL TagElement", "DEL TextElement:  Use getGroupID() instead", "DEL SimpleName: m_name", "DEL SimpleName: name", "DEL Modifier: final", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL SimpleName: getOctalBytes"]}]}}, {"TarEntry_diff": {"operations": ["Delete QualifiedName: org.apache.commons.io.compress.tar(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.io.File(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Date(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Locale(6)", "Delete ImportDeclaration(7)", "Delete TextElement: This class represents an entry in a Tar archive. It consists of the entry's(8)", "Delete TextElement: header, as well as the entry's File. Entries can be instantiated in one of(9)", "Delete TextElement: three ways, depending on how they are to be used. <p>(10)", "Delete TextElement: TarEntries that are created from the header bytes read from an archive are(11)", "Delete TextElement: instantiated with the TarEntry( byte[] ) constructor. These entries will be(12)", "Delete TextElement: used when extracting from or listing the contents of an archive. These(13)", "Delete TextElement: entries have their header filled in using the header bytes. They also set the(14)", "Delete TextElement: File to null, since they reference an archive entry not a file. <p>(15)", "Delete TextElement: TarEntries that are created from Files that are to be written into an archive(16)", "Delete TextElement: are instantiated with the TarEntry( File ) constructor. These entries have(17)", "Delete TextElement: their header filled in using the File's information. They also keep a(18)", "Delete TextElement: reference to the File for convenience when writing entries. <p>(19)", "Delete TextElement: Finally, TarEntries can be constructed from nothing but a name. This allows(20)", "Delete TextElement: the programmer to construct the entry by hand, for instance when only an(21)", "Delete TextElement: InputStream is available for writing to the archive, and the header(22)", "Delete TextElement: information is constructed from other information. In this case the header(23)", "Delete TextElement: fields are set to defaults and the File is set to null. <p>(24)", "Delete TextElement: The C structure for a Tar Entry's header is: <pre>(25)", "Delete TextElement: struct header {(26)", "Delete TextElement: char name[NAMSIZ];(27)", "Delete TextElement: char mode[8];(28)", "Delete TextElement: char uid[8];(29)", "Delete TextElement: char gid[8];(30)", "Delete TextElement: char size[12];(31)", "Delete TextElement: char mtime[12];(32)", "Delete TextElement: char chksum[8];(33)", "Delete TextElement: char linkflag;(34)", "Delete TextElement: char linkname[NAMSIZ];(35)", "Delete TextElement: char magic[8];(36)", "Delete TextElement: char uname[TUNMLEN];(37)", "Delete TextElement: char gname[TGNMLEN];(38)", "Delete TextElement: char devmajor[8];(39)", "Delete TextElement: char devminor[8];(40)", "Delete TextElement: } header;(41)", "Delete TextElement: </pre>(42)", "Delete TagElement(43)", "Delete TextElement:  <a href=\"mailto:time@ice.com\">Timothy Gerard Endres</a>(44)", "Delete TagElement: @author(45)", "Delete TextElement:  <a href=\"mailto:stefano@apache.org\">Stefano Mazzocchi</a>(46)", "Delete TagElement: @author(47)", "Delete TextElement:  <a href=\"mailto:peter@apache.org\">Peter Donald</a>(48)", "Delete TagElement: @author(49)", "Delete TextElement:  $Revision: 1.3 $ $Date: 2003/10/13 07:01:15 $(50)", "Delete TagElement: @version(51)", "Delete SimpleName: TarInputStream(52)", "Delete TagElement: @see(53)", "Delete SimpleName: TarOutputStream(54)", "Delete TagElement: @see(55)", "Delete Javadoc(56)", "Delete Modifier: public(57)", "Delete SimpleName: TarEntry(58)", "Delete TextElement: The length of the name field in a header buffer.(59)", "Delete TagElement(60)", "Delete Javadoc(61)", "Delete Modifier: public(62)", "Delete Modifier: static(63)", "Delete Modifier: final(64)", "Delete PrimitiveType: int(65)", "Delete SimpleName: NAMELEN(66)", "Delete NumberLiteral: 100(67)", "Delete VariableDeclarationFragment(68)", "Delete FieldDeclaration(69)", "Delete TextElement: The entry's modification time.(70)", "Delete TagElement(71)", "Delete Javadoc(72)", "Delete Modifier: private(73)", "Delete PrimitiveType: int(74)", "Delete SimpleName: m_checkSum(75)", "Delete VariableDeclarationFragment(76)", "Delete FieldDeclaration(77)", "Delete TextElement: The entry's group name.(78)", "Delete TagElement(79)", "Delete Javadoc(80)", "Delete Modifier: private(81)", "Delete PrimitiveType: int(82)", "Delete SimpleName: m_devMajor(83)", "Delete VariableDeclarationFragment(84)", "Delete FieldDeclaration(85)", "Delete TextElement: The entry's major device number.(86)", "Delete TagElement(87)", "Delete Javadoc(88)", "Delete Modifier: private(89)", "Delete PrimitiveType: int(90)", "Delete SimpleName: m_devMinor(91)", "Delete VariableDeclarationFragment(92)", "Delete FieldDeclaration(93)", "Delete TextElement: The entry's minor device number.(94)", "Delete TagElement(95)", "Delete Javadoc(96)", "Delete Modifier: private(97)", "Delete SimpleName: File(98)", "Delete SimpleType: File(99)", "Delete SimpleName: m_file(100)", "Delete VariableDeclarationFragment(101)", "Delete FieldDeclaration(102)", "Delete TextElement: The entry's user id.(103)", "Delete TagElement(104)", "Delete Javadoc(105)", "Delete Modifier: private(106)", "Delete PrimitiveType: int(107)", "Delete SimpleName: m_groupID(108)", "Delete VariableDeclarationFragment(109)", "Delete FieldDeclaration(110)", "Delete TextElement: The entry's user name.(111)", "Delete TagElement(112)", "Delete Javadoc(113)", "Delete Modifier: private(114)", "Delete SimpleName: StringBuffer(115)", "Delete SimpleType: StringBuffer(116)", "Delete SimpleName: m_groupName(117)", "Delete VariableDeclarationFragment(118)", "Delete FieldDeclaration(119)", "Delete TextElement: The entry's checksum.(120)", "Delete TagElement(121)", "Delete Javadoc(122)", "Delete Modifier: private(123)", "Delete PrimitiveType: byte(124)", "Delete SimpleName: m_linkFlag(125)", "Delete VariableDeclarationFragment(126)", "Delete FieldDeclaration(127)", "Delete TextElement: The entry's link flag.(128)", "Delete TagElement(129)", "Delete Javadoc(130)", "Delete Modifier: private(131)", "Delete SimpleName: StringBuffer(132)", "Delete SimpleType: StringBuffer(133)", "Delete SimpleName: m_linkName(134)", "Delete VariableDeclarationFragment(135)", "Delete FieldDeclaration(136)", "Delete TextElement: The entry's link name.(137)", "Delete TagElement(138)", "Delete Javadoc(139)", "Delete Modifier: private(140)", "Delete SimpleName: StringBuffer(141)", "Delete SimpleType: StringBuffer(142)", "Delete SimpleName: m_magic(143)", "Delete VariableDeclarationFragment(144)", "Delete FieldDeclaration(145)", "Delete TextElement: The entry's size.(146)", "Delete TagElement(147)", "Delete Javadoc(148)", "Delete Modifier: private(149)", "Delete PrimitiveType: long(150)", "Delete SimpleName: m_modTime(151)", "Delete VariableDeclarationFragment(152)", "Delete FieldDeclaration(153)", "Delete TextElement: The entry's name.(154)", "Delete TagElement(155)", "Delete Javadoc(156)", "Delete Modifier: private(157)", "Delete PrimitiveType: int(158)", "Delete SimpleName: m_mode(159)", "Delete VariableDeclarationFragment(160)", "Delete FieldDeclaration(161)", "Delete Modifier: private(162)", "Delete SimpleName: StringBuffer(163)", "Delete SimpleType: StringBuffer(164)", "Delete SimpleName: m_name(165)", "Delete VariableDeclarationFragment(166)", "Delete FieldDeclaration(167)", "Delete TextElement: The entry's group id.(168)", "Delete TagElement(169)", "Delete Javadoc(170)", "Delete Modifier: private(171)", "Delete PrimitiveType: long(172)", "Delete SimpleName: m_size(173)", "Delete VariableDeclarationFragment(174)", "Delete FieldDeclaration(175)", "Delete TextElement: The entry's permission mode.(176)", "Delete TagElement(177)", "Delete Javadoc(178)", "Delete Modifier: private(179)", "Delete PrimitiveType: int(180)", "Delete SimpleName: m_userID(181)", "Delete VariableDeclarationFragment(182)", "Delete FieldDeclaration(183)", "Delete TextElement: The entry's magic tag.(184)", "Delete TagElement(185)", "Delete Javadoc(186)", "Delete Modifier: private(187)", "Delete SimpleName: StringBuffer(188)", "Delete SimpleType: StringBuffer(189)", "Delete SimpleName: m_userName(190)", "Delete VariableDeclarationFragment(191)", "Delete FieldDeclaration(192)", "Delete TextElement: Construct an entry with only a name. This allows the programmer to(193)", "Delete TextElement: construct the entry's header \"by hand\". File is set to null.(194)", "Delete TagElement(195)", "Delete SimpleName: name(196)", "Delete TextElement:  the name of the entry(197)", "Delete TagElement: @param(198)", "Delete Javadoc(199)", "Delete Modifier: public(200)", "Delete SimpleName: TarEntry(201)", "Delete Modifier: final(202)", "Delete SimpleName: String(203)", "Delete SimpleType: String(204)", "Delete SimpleName: name(205)", "Delete SingleVariableDeclaration(206)", "Delete ConstructorInvocation(207)", "Delete Modifier: final(208)", "Delete PrimitiveType: boolean(209)", "Delete SimpleName: isDir(210)", "Delete SimpleName: name(211)", "Delete SimpleName: endsWith(212)", "Delete StringLiteral: \"/\"(213)", "Delete MethodInvocation(214)", "Delete VariableDeclarationFragment(215)", "Delete VariableDeclarationStatement(216)", "Delete SimpleName: m_name(217)", "Delete SimpleName: StringBuffer(218)", "Delete SimpleType: StringBuffer(219)", "Delete SimpleName: name(220)", "Delete ClassInstanceCreation(221)", "Delete Assignment: =(222)", "Delete ExpressionStatement(223)", "Delete SimpleName: m_mode(224)", "Delete SimpleName: isDir(225)", "Delete NumberLiteral: 040755(226)", "Delete NumberLiteral: 0100644(227)", "Delete ConditionalExpression(228)", "Delete Assignment: =(229)", "Delete ExpressionStatement(230)", "Delete SimpleName: m_linkFlag(231)", "Delete SimpleName: isDir(232)", "Delete QualifiedName: TarConstants.LF_DIR(233)", "Delete QualifiedName: TarConstants.LF_NORMAL(234)", "Delete ConditionalExpression(235)", "Delete Assignment: =(236)", "Delete ExpressionStatement(237)", "Delete SimpleName: m_modTime(238)", "Delete SimpleName: Date(239)", "Delete SimpleType: Date(240)", "Delete ClassInstanceCreation(241)", "Delete ParenthesizedExpression(242)", "Delete SimpleName: getTime(243)", "Delete MethodInvocation(244)", "Delete NumberLiteral: 1000(245)", "Delete InfixExpression: /(246)", "Delete Assignment: =(247)", "Delete ExpressionStatement(248)", "Delete SimpleName: m_linkName(249)", "Delete SimpleName: StringBuffer(250)", "Delete SimpleType: StringBuffer(251)", "Delete StringLiteral: \"\"(252)", "Delete ClassInstanceCreation(253)", "Delete Assignment: =(254)", "Delete ExpressionStatement(255)", "Delete SimpleName: m_userName(256)", "Delete SimpleName: StringBuffer(257)", "Delete SimpleType: StringBuffer(258)", "Delete StringLiteral: \"\"(259)", "Delete ClassInstanceCreation(260)", "Delete Assignment: =(261)", "Delete ExpressionStatement(262)", "Delete SimpleName: m_groupName(263)", "Delete SimpleName: StringBuffer(264)", "Delete SimpleType: StringBuffer(265)", "Delete StringLiteral: \"\"(266)", "Delete ClassInstanceCreation(267)", "Delete Assignment: =(268)", "Delete ExpressionStatement(269)", "Delete Block(270)", "Delete MethodDeclaration(271)", "Delete TextElement: Construct an entry with a name an a link flag.(272)", "Delete TagElement(273)", "Delete SimpleName: name(274)", "Delete TextElement:  Description of Parameter(275)", "Delete TagElement: @param(276)", "Delete SimpleName: linkFlag(277)", "Delete TextElement:  Description of Parameter(278)", "Delete TagElement: @param(279)", "Delete Javadoc(280)", "Delete Modifier: public(281)", "Delete SimpleName: TarEntry(282)", "Delete Modifier: final(283)", "Delete SimpleName: String(284)", "Delete SimpleType: String(285)", "Delete SimpleName: name(286)", "Delete SingleVariableDeclaration(287)", "Delete Modifier: final(288)", "Delete PrimitiveType: byte(289)", "Delete SimpleName: linkFlag(290)", "Delete SingleVariableDeclaration(291)", "Delete SimpleName: name(292)", "Delete ConstructorInvocation(293)", "Delete SimpleName: m_linkFlag(294)", "Delete SimpleName: linkFlag(295)", "Delete Assignment: =(296)", "Delete ExpressionStatement(297)", "Delete Block(298)", "Delete MethodDeclaration(299)", "Delete TextElement: Construct an entry for a file. File is set to file, and the header is(300)", "Delete TextElement: constructed from information from the file.(301)", "Delete TagElement(302)", "Delete SimpleName: file(303)", "Delete TextElement:  The file that the entry represents.(304)", "Delete TagElement: @param(305)", "Delete Javadoc(306)", "Delete Modifier: public(307)", "Delete SimpleName: TarEntry(308)", "Delete Modifier: final(309)", "Delete SimpleName: File(310)", "Delete SimpleType: File(311)", "Delete SimpleName: file(312)", "Delete SingleVariableDeclaration(313)", "Delete ConstructorInvocation(314)", "Delete SimpleName: m_file(315)", "Delete SimpleName: file(316)", "Delete Assignment: =(317)", "Delete ExpressionStatement(318)", "Delete SimpleName: String(319)", "Delete SimpleType: String(320)", "Delete SimpleName: name(321)", "Delete SimpleName: file(322)", "Delete SimpleName: getPath(323)", "Delete MethodInvocation(324)", "Delete VariableDeclarationFragment(325)", "Delete VariableDeclarationStatement(326)", "Delete Modifier: final(327)", "Delete SimpleName: String(328)", "Delete SimpleType: String(329)", "Delete SimpleName: osName(330)", "Delete SimpleName: System(331)", "Delete SimpleName: getProperty(332)", "Delete StringLiteral: \"os.name\"(333)", "Delete MethodInvocation(334)", "Delete SimpleName: toLowerCase(335)", "Delete QualifiedName: Locale.US(336)", "Delete MethodInvocation(337)", "Delete VariableDeclarationFragment(338)", "Delete VariableDeclarationStatement(339)", "Delete NumberLiteral: 1(340)", "Delete PrefixExpression: -(341)", "Delete SimpleName: osName(342)", "Delete SimpleName: indexOf(343)", "Delete StringLiteral: \"netware\"(344)", "Delete MethodInvocation(345)", "Delete InfixExpression: !=(346)", "Delete SimpleName: name(347)", "Delete SimpleName: length(348)", "Delete MethodInvocation(349)", "Delete NumberLiteral: 2(350)", "Delete InfixExpression: >(351)", "Delete Modifier: final(352)", "Delete PrimitiveType: char(353)", "Delete SimpleName: ch1(354)", "Delete SimpleName: name(355)", "Delete SimpleName: charAt(356)", "Delete NumberLiteral: 0(357)", "Delete MethodInvocation(358)", "Delete VariableDeclarationFragment(359)", "Delete VariableDeclarationStatement(360)", "Delete Modifier: final(361)", "Delete PrimitiveType: char(362)", "Delete SimpleName: ch2(363)", "Delete SimpleName: name(364)", "Delete SimpleName: charAt(365)", "Delete NumberLiteral: 1(366)", "Delete MethodInvocation(367)", "Delete VariableDeclarationFragment(368)", "Delete VariableDeclarationStatement(369)", "Delete SimpleName: ch2(370)", "Delete CharacterLiteral: ':'(371)", "Delete InfixExpression: ==(372)", "Delete SimpleName: ch1(373)", "Delete CharacterLiteral: 'a'(374)", "Delete InfixExpression: >=(375)", "Delete SimpleName: ch1(376)", "Delete CharacterLiteral: 'z'(377)", "Delete InfixExpression: <=(378)", "Delete InfixExpression: &&(379)", "Delete ParenthesizedExpression(380)", "Delete SimpleName: ch1(381)", "Delete CharacterLiteral: 'A'(382)", "Delete InfixExpression: >=(383)", "Delete SimpleName: ch1(384)", "Delete CharacterLiteral: 'Z'(385)", "Delete InfixExpression: <=(386)", "Delete InfixExpression: &&(387)", "Delete ParenthesizedExpression(388)", "Delete InfixExpression: ||(389)", "Delete ParenthesizedExpression(390)", "Delete InfixExpression: &&(391)", "Delete SimpleName: name(392)", "Delete SimpleName: name(393)", "Delete SimpleName: substring(394)", "Delete NumberLiteral: 2(395)", "Delete MethodInvocation(396)", "Delete Assignment: =(397)", "Delete ExpressionStatement(398)", "Delete Block(399)", "Delete IfStatement(400)", "Delete Block(401)", "Delete IfStatement(402)", "Delete Block(403)", "Delete NumberLiteral: 1(404)", "Delete PrefixExpression: -(405)", "Delete SimpleName: osName(406)", "Delete SimpleName: indexOf(407)", "Delete StringLiteral: \"netware\"(408)", "Delete MethodInvocation(409)", "Delete InfixExpression: !=(410)", "Delete Modifier: final(411)", "Delete PrimitiveType: int(412)", "Delete SimpleName: colon(413)", "Delete SimpleName: name(414)", "Delete SimpleName: indexOf(415)", "Delete CharacterLiteral: ':'(416)", "Delete MethodInvocation(417)", "Delete VariableDeclarationFragment(418)", "Delete VariableDeclarationStatement(419)", "Delete SimpleName: colon(420)", "Delete NumberLiteral: 1(421)", "Delete PrefixExpression: -(422)", "Delete InfixExpression: !=(423)", "Delete SimpleName: name(424)", "Delete SimpleName: name(425)", "Delete SimpleName: substring(426)", "Delete SimpleName: colon(427)", "Delete NumberLiteral: 1(428)", "Delete InfixExpression: +(429)", "Delete MethodInvocation(430)", "Delete Assignment: =(431)", "Delete ExpressionStatement(432)", "Delete Block(433)", "Delete IfStatement(434)", "Delete Block(435)", "Delete IfStatement(436)", "Delete IfStatement(437)", "Delete SimpleName: name(438)", "Delete SimpleName: name(439)", "Delete SimpleName: replace(440)", "Delete QualifiedName: File.separatorChar(441)", "Delete CharacterLiteral: '/'(442)", "Delete MethodInvocation(443)", "Delete Assignment: =(444)", "Delete ExpressionStatement(445)", "Delete SimpleName: name(446)", "Delete SimpleName: startsWith(447)", "Delete StringLiteral: \"/\"(448)", "Delete MethodInvocation(449)", "Delete SimpleName: name(450)", "Delete SimpleName: name(451)", "Delete SimpleName: substring(452)", "Delete NumberLiteral: 1(453)", "Delete MethodInvocation(454)", "Delete Assignment: =(455)", "Delete ExpressionStatement(456)", "Delete Block(457)", "Delete WhileStatement(458)", "Delete SimpleName: m_linkName(459)", "Delete SimpleName: StringBuffer(460)", "Delete SimpleType: StringBuffer(461)", "Delete StringLiteral: \"\"(462)", "Delete ClassInstanceCreation(463)", "Delete Assignment: =(464)", "Delete ExpressionStatement(465)", "Delete SimpleName: m_name(466)", "Delete SimpleName: StringBuffer(467)", "Delete SimpleType: StringBuffer(468)", "Delete SimpleName: name(469)", "Delete ClassInstanceCreation(470)", "Delete Assignment: =(471)", "Delete ExpressionStatement(472)", "Delete SimpleName: file(473)", "Delete SimpleName: isDirectory(474)", "Delete MethodInvocation(475)", "Delete SimpleName: m_mode(476)", "Delete NumberLiteral: 040755(477)", "Delete Assignment: =(478)", "Delete ExpressionStatement(479)", "Delete SimpleName: m_linkFlag(480)", "Delete QualifiedName: TarConstants.LF_DIR(481)", "Delete Assignment: =(482)", "Delete ExpressionStatement(483)", "Delete SimpleName: m_name(484)", "Delete SimpleName: charAt(485)", "Delete SimpleName: m_name(486)", "Delete SimpleName: length(487)", "Delete MethodInvocation(488)", "Delete NumberLiteral: 1(489)", "Delete InfixExpression: -(490)", "Delete MethodInvocation(491)", "Delete CharacterLiteral: '/'(492)", "Delete InfixExpression: !=(493)", "Delete SimpleName: m_name(494)", "Delete SimpleName: append(495)", "Delete StringLiteral: \"/\"(496)", "Delete MethodInvocation(497)", "Delete ExpressionStatement(498)", "Delete Block(499)", "Delete IfStatement(500)", "Delete Block(501)", "Delete SimpleName: m_mode(502)", "Delete NumberLiteral: 0100644(503)", "Delete Assignment: =(504)", "Delete ExpressionStatement(505)", "Delete SimpleName: m_linkFlag(506)", "Delete QualifiedName: TarConstants.LF_NORMAL(507)", "Delete Assignment: =(508)", "Delete ExpressionStatement(509)", "Delete Block(510)", "Delete IfStatement(511)", "Delete SimpleName: m_size(512)", "Delete SimpleName: file(513)", "Delete SimpleName: length(514)", "Delete MethodInvocation(515)", "Delete Assignment: =(516)", "Delete ExpressionStatement(517)", "Delete SimpleName: m_modTime(518)", "Delete SimpleName: file(519)", "Delete SimpleName: lastModified(520)", "Delete MethodInvocation(521)", "Delete NumberLiteral: 1000(522)", "Delete InfixExpression: /(523)", "Delete Assignment: =(524)", "Delete ExpressionStatement(525)", "Delete SimpleName: m_checkSum(526)", "Delete NumberLiteral: 0(527)", "Delete Assignment: =(528)", "Delete ExpressionStatement(529)", "Delete SimpleName: m_devMajor(530)", "Delete NumberLiteral: 0(531)", "Delete Assignment: =(532)", "Delete ExpressionStatement(533)", "Delete SimpleName: m_devMinor(534)", "Delete NumberLiteral: 0(535)", "Delete Assignment: =(536)", "Delete ExpressionStatement(537)", "Delete Block(538)", "Delete MethodDeclaration(539)", "Delete TextElement: Construct an entry from an archive's header bytes. File is set to null.(540)", "Delete TagElement(541)", "Delete SimpleName: header(542)", "Delete TextElement:  The header bytes from a tar archive entry.(543)", "Delete TagElement: @param(544)", "Delete Javadoc(545)", "Delete Modifier: public(546)", "Delete SimpleName: TarEntry(547)", "Delete Modifier: final(548)", "Delete PrimitiveType: byte(549)", "Delete Dimension(550)", "Delete ArrayType: byte[](551)", "Delete SimpleName: header(552)", "Delete SingleVariableDeclaration(553)", "Delete ConstructorInvocation(554)", "Delete SimpleName: parseTarHeader(555)", "Delete SimpleName: header(556)", "Delete MethodInvocation(557)", "Delete ExpressionStatement(558)", "Delete Block(559)", "Delete MethodDeclaration(560)", "Delete TextElement: Construct an empty entry and prepares the header values.(561)", "Delete TagElement(562)", "Delete Javadoc(563)", "Delete Modifier: private(564)", "Delete SimpleName: TarEntry(565)", "Delete SimpleName: m_magic(566)", "Delete SimpleName: StringBuffer(567)", "Delete SimpleType: StringBuffer(568)", "Delete QualifiedName: TarConstants.TMAGIC(569)", "Delete ClassInstanceCreation(570)", "Delete Assignment: =(571)", "Delete ExpressionStatement(572)", "Delete SimpleName: m_name(573)", "Delete SimpleName: StringBuffer(574)", "Delete SimpleType: StringBuffer(575)", "Delete ClassInstanceCreation(576)", "Delete Assignment: =(577)", "Delete ExpressionStatement(578)", "Delete SimpleName: m_linkName(579)", "Delete SimpleName: StringBuffer(580)", "Delete SimpleType: StringBuffer(581)", "Delete ClassInstanceCreation(582)", "Delete Assignment: =(583)", "Delete ExpressionStatement(584)", "Delete SimpleName: String(585)", "Delete SimpleType: String(586)", "Delete SimpleName: user(587)", "Delete SimpleName: System(588)", "Delete SimpleName: getProperty(589)", "Delete StringLiteral: \"user.name\"(590)", "Delete StringLiteral: \"\"(591)", "Delete MethodInvocation(592)", "Delete VariableDeclarationFragment(593)", "Delete VariableDeclarationStatement(594)", "Delete SimpleName: user(595)", "Delete SimpleName: length(596)", "Delete MethodInvocation(597)", "Delete NumberLiteral: 31(598)", "Delete InfixExpression: >(599)", "Delete SimpleName: user(600)", "Delete SimpleName: user(601)", "Delete SimpleName: substring(602)", "Delete NumberLiteral: 0(603)", "Delete NumberLiteral: 31(604)", "Delete MethodInvocation(605)", "Delete Assignment: =(606)", "Delete ExpressionStatement(607)", "Delete Block(608)", "Delete IfStatement(609)", "Delete SimpleName: m_userName(610)", "Delete SimpleName: StringBuffer(611)", "Delete SimpleType: StringBuffer(612)", "Delete SimpleName: user(613)", "Delete ClassInstanceCreation(614)", "Delete Assignment: =(615)", "Delete ExpressionStatement(616)", "Delete SimpleName: m_groupName(617)", "Delete SimpleName: StringBuffer(618)", "Delete SimpleType: StringBuffer(619)", "Delete StringLiteral: \"\"(620)", "Delete ClassInstanceCreation(621)", "Delete Assignment: =(622)", "Delete ExpressionStatement(623)", "Delete Block(624)", "Delete MethodDeclaration(625)", "Delete TextElement: Set this entry's group id.(626)", "Delete TagElement(627)", "Delete SimpleName: groupId(628)", "Delete TextElement:  This entry's new group id.(629)", "Delete TagElement: @param(630)", "Delete Javadoc(631)", "Delete Modifier: public(632)", "Delete PrimitiveType: void(633)", "Delete SimpleName: setGroupID(634)", "Delete Modifier: final(635)", "Delete PrimitiveType: int(636)", "Delete SimpleName: groupId(637)", "Delete SingleVariableDeclaration(638)", "Delete SimpleName: m_groupID(639)", "Delete SimpleName: groupId(640)", "Delete Assignment: =(641)", "Delete ExpressionStatement(642)", "Delete Block(643)", "Delete MethodDeclaration(644)", "Delete TextElement: Set this entry's group id.(645)", "Delete TagElement(646)", "Delete SimpleName: groupId(647)", "Delete TextElement:  This entry's new group id.(648)", "Delete TagElement: @param(649)", "Delete TextElement:  Use setGroupID() instead(650)", "Delete TagElement: @deprecated(651)", "Delete SimpleName: setGroupID(652)", "Delete PrimitiveType: int(653)", "Delete MethodRefParameter(654)", "Delete MethodRef(655)", "Delete TagElement: @see(656)", "Delete Javadoc(657)", "Delete Modifier: public(658)", "Delete PrimitiveType: void(659)", "Delete SimpleName: setGroupId(660)", "Delete Modifier: final(661)", "Delete PrimitiveType: int(662)", "Delete SimpleName: groupId(663)", "Delete SingleVariableDeclaration(664)", "Delete SimpleName: m_groupID(665)", "Delete SimpleName: groupId(666)", "Delete Assignment: =(667)", "Delete ExpressionStatement(668)", "Delete Block(669)", "Delete MethodDeclaration(670)", "Delete TextElement: Set this entry's group name.(671)", "Delete TagElement(672)", "Delete SimpleName: groupName(673)", "Delete TextElement:  This entry's new group name.(674)", "Delete TagElement: @param(675)", "Delete Javadoc(676)", "Delete Modifier: public(677)", "Delete PrimitiveType: void(678)", "Delete SimpleName: setGroupName(679)", "Delete Modifier: final(680)", "Delete SimpleName: String(681)", "Delete SimpleType: String(682)", "Delete SimpleName: groupName(683)", "Delete SingleVariableDeclaration(684)", "Delete SimpleName: m_groupName(685)", "Delete SimpleName: StringBuffer(686)", "Delete SimpleType: StringBuffer(687)", "Delete SimpleName: groupName(688)", "Delete ClassInstanceCreation(689)", "Delete Assignment: =(690)", "Delete ExpressionStatement(691)", "Delete Block(692)", "Delete MethodDeclaration(693)", "Delete TextElement: Set this entry's modification time. The parameter passed to this method(694)", "Delete TextElement: is in \"Java time\".(695)", "Delete TagElement(696)", "Delete SimpleName: time(697)", "Delete TextElement:  This entry's new modification time.(698)", "Delete TagElement: @param(699)", "Delete Javadoc(700)", "Delete Modifier: public(701)", "Delete PrimitiveType: void(702)", "Delete SimpleName: setModTime(703)", "Delete Modifier: final(704)", "Delete PrimitiveType: long(705)", "Delete SimpleName: time(706)", "Delete SingleVariableDeclaration(707)", "Delete SimpleName: m_modTime(708)", "Delete SimpleName: time(709)", "Delete NumberLiteral: 1000(710)", "Delete InfixExpression: /(711)", "Delete Assignment: =(712)", "Delete ExpressionStatement(713)", "Delete Block(714)", "Delete MethodDeclaration(715)", "Delete TextElement: Set this entry's modification time.(716)", "Delete TagElement(717)", "Delete SimpleName: time(718)", "Delete TextElement:  This entry's new modification time.(719)", "Delete TagElement: @param(720)", "Delete Javadoc(721)", "Delete Modifier: public(722)", "Delete PrimitiveType: void(723)", "Delete SimpleName: setModTime(724)", "Delete Modifier: final(725)", "Delete SimpleName: Date(726)", "Delete SimpleType: Date(727)", "Delete SimpleName: time(728)", "Delete SingleVariableDeclaration(729)", "Delete SimpleName: m_modTime(730)", "Delete SimpleName: time(731)", "Delete SimpleName: getTime(732)", "Delete MethodInvocation(733)", "Delete NumberLiteral: 1000(734)", "Delete InfixExpression: /(735)", "Delete Assignment: =(736)", "Delete ExpressionStatement(737)", "Delete Block(738)", "Delete MethodDeclaration(739)", "Delete TextElement: Set the mode for this entry(740)", "Delete TagElement(741)", "Delete SimpleName: mode(742)", "Delete TextElement:  The new Mode value(743)", "Delete TagElement: @param(744)", "Delete Javadoc(745)", "Delete Modifier: public(746)", "Delete PrimitiveType: void(747)", "Delete SimpleName: setMode(748)", "Delete Modifier: final(749)", "Delete PrimitiveType: int(750)", "Delete SimpleName: mode(751)", "Delete SingleVariableDeclaration(752)", "Delete SimpleName: m_mode(753)", "Delete SimpleName: mode(754)", "Delete Assignment: =(755)", "Delete ExpressionStatement(756)", "Delete Block(757)", "Delete MethodDeclaration(758)", "Delete TextElement: Set this entry's name.(759)", "Delete TagElement(760)", "Delete SimpleName: name(761)", "Delete TextElement:  This entry's new name.(762)", "Delete TagElement: @param(763)", "Delete Javadoc(764)", "Delete Modifier: public(765)", "Delete PrimitiveType: void(766)", "Delete SimpleName: setName(767)", "Delete Modifier: final(768)", "Delete SimpleName: String(769)", "Delete SimpleType: String(770)", "Delete SimpleName: name(771)", "Delete SingleVariableDeclaration(772)", "Delete SimpleName: m_name(773)", "Delete SimpleName: StringBuffer(774)", "Delete SimpleType: StringBuffer(775)", "Delete SimpleName: name(776)", "Delete ClassInstanceCreation(777)", "Delete Assignment: =(778)", "Delete ExpressionStatement(779)", "Delete Block(780)", "Delete MethodDeclaration(781)", "Delete TextElement: Set this entry's file size.(782)", "Delete TagElement(783)", "Delete SimpleName: size(784)", "Delete TextElement:  This entry's new file size.(785)", "Delete TagElement: @param(786)", "Delete Javadoc(787)", "Delete Modifier: public(788)", "Delete PrimitiveType: void(789)", "Delete SimpleName: setSize(790)", "Delete Modifier: final(791)", "Delete PrimitiveType: long(792)", "Delete SimpleName: size(793)", "Delete SingleVariableDeclaration(794)", "Delete SimpleName: m_size(795)", "Delete SimpleName: size(796)", "Delete Assignment: =(797)", "Delete ExpressionStatement(798)", "Delete Block(799)", "Delete MethodDeclaration(800)", "Delete TextElement: Set this entry's user id.(801)", "Delete TagElement(802)", "Delete SimpleName: userId(803)", "Delete TextElement:  This entry's new user id.(804)", "Delete TagElement: @param(805)", "Delete Javadoc(806)", "Delete Modifier: public(807)", "Delete PrimitiveType: void(808)", "Delete SimpleName: setUserID(809)", "Delete Modifier: final(810)", "Delete PrimitiveType: int(811)", "Delete SimpleName: userId(812)", "Delete SingleVariableDeclaration(813)", "Delete SimpleName: m_userID(814)", "Delete SimpleName: userId(815)", "Delete Assignment: =(816)", "Delete ExpressionStatement(817)", "Delete Block(818)", "Delete MethodDeclaration(819)", "Delete TextElement: Set this entry's user id.(820)", "Delete TagElement(821)", "Delete SimpleName: userId(822)", "Delete TextElement:  This entry's new user id.(823)", "Delete TagElement: @param(824)", "Delete TextElement:  Use setUserID() instead(825)", "Delete TagElement: @deprecated(826)", "Delete SimpleName: setUserID(827)", "Delete PrimitiveType: int(828)", "Delete MethodRefParameter(829)", "Delete MethodRef(830)", "Delete TagElement: @see(831)", "Delete Javadoc(832)", "Delete Modifier: public(833)", "Delete PrimitiveType: void(834)", "Delete SimpleName: setUserId(835)", "Delete Modifier: final(836)", "Delete PrimitiveType: int(837)", "Delete SimpleName: userId(838)", "Delete SingleVariableDeclaration(839)", "Delete SimpleName: m_userID(840)", "Delete SimpleName: userId(841)", "Delete Assignment: =(842)", "Delete ExpressionStatement(843)", "Delete Block(844)", "Delete MethodDeclaration(845)", "Delete TextElement: Set this entry's user name.(846)", "Delete TagElement(847)", "Delete SimpleName: userName(848)", "Delete TextElement:  This entry's new user name.(849)", "Delete TagElement: @param(850)", "Delete Javadoc(851)", "Delete Modifier: public(852)", "Delete PrimitiveType: void(853)", "Delete SimpleName: setUserName(854)", "Delete Modifier: final(855)", "Delete SimpleName: String(856)", "Delete SimpleType: String(857)", "Delete SimpleName: userName(858)", "Delete SingleVariableDeclaration(859)", "Delete SimpleName: m_userName(860)", "Delete SimpleName: StringBuffer(861)", "Delete SimpleType: StringBuffer(862)", "Delete SimpleName: userName(863)", "Delete ClassInstanceCreation(864)", "Delete Assignment: =(865)", "Delete ExpressionStatement(866)", "Delete Block(867)", "Delete MethodDeclaration(868)", "Delete TextElement: If this entry represents a file, and the file is a directory, return an(869)", "Delete TextElement: array of TarEntries for this entry's children.(870)", "Delete TagElement(871)", "Delete TextElement:  An array of TarEntry's for this entry's children.(872)", "Delete TagElement: @return(873)", "Delete Javadoc(874)", "Delete Modifier: public(875)", "Delete SimpleName: TarEntry(876)", "Delete SimpleType: TarEntry(877)", "Delete Dimension(878)", "Delete ArrayType: TarEntry[](879)", "Delete SimpleName: getDirectoryEntries(880)", "Delete NullLiteral(881)", "Delete SimpleName: m_file(882)", "Delete InfixExpression: ==(883)", "Delete SimpleName: m_file(884)", "Delete SimpleName: isDirectory(885)", "Delete MethodInvocation(886)", "Delete PrefixExpression: !(887)", "Delete InfixExpression: ||(888)", "Delete SimpleName: TarEntry(889)", "Delete SimpleType: TarEntry(890)", "Delete Dimension(891)", "Delete ArrayType: TarEntry[](892)", "Delete NumberLiteral: 0(893)", "Delete ArrayCreation(894)", "Delete ReturnStatement(895)", "Delete Block(896)", "Delete IfStatement(897)", "Delete Modifier: final(898)", "Delete SimpleName: String(899)", "Delete SimpleType: String(900)", "Delete Dimension(901)", "Delete ArrayType: String[](902)", "Delete SimpleName: list(903)", "Delete SimpleName: m_file(904)", "Delete SimpleName: list(905)", "Delete MethodInvocation(906)", "Delete VariableDeclarationFragment(907)", "Delete VariableDeclarationStatement(908)", "Delete Modifier: final(909)", "Delete SimpleName: TarEntry(910)", "Delete SimpleType: TarEntry(911)", "Delete Dimension(912)", "Delete ArrayType: TarEntry[](913)", "Delete SimpleName: result(914)", "Delete SimpleName: TarEntry(915)", "Delete SimpleType: TarEntry(916)", "Delete Dimension(917)", "Delete ArrayType: TarEntry[](918)", "Delete QualifiedName: list.length(919)", "Delete ArrayCreation(920)", "Delete VariableDeclarationFragment(921)", "Delete VariableDeclarationStatement(922)", "Delete PrimitiveType: int(923)", "Delete SimpleName: i(924)", "Delete NumberLiteral: 0(925)", "Delete VariableDeclarationFragment(926)", "Delete VariableDeclarationExpression(927)", "Delete SimpleName: i(928)", "Delete QualifiedName: list.length(929)", "Delete InfixExpression: <(930)", "Delete SimpleName: i(931)", "Delete PrefixExpression: ++(932)", "Delete SimpleName: result(933)", "Delete SimpleName: i(934)", "Delete ArrayAccess(935)", "Delete SimpleName: TarEntry(936)", "Delete SimpleType: TarEntry(937)", "Delete SimpleName: File(938)", "Delete SimpleType: File(939)", "Delete SimpleName: m_file(940)", "Delete SimpleName: list(941)", "Delete SimpleName: i(942)", "Delete ArrayAccess(943)", "Delete ClassInstanceCreation(944)", "Delete ClassInstanceCreation(945)", "Delete Assignment: =(946)", "Delete ExpressionStatement(947)", "Delete Block(948)", "Delete ForStatement(949)", "Delete SimpleName: result(950)", "Delete ReturnStatement(951)", "Delete Block(952)", "Delete MethodDeclaration(953)", "Delete TextElement: Get this entry's file.(954)", "Delete TagElement(955)", "Delete TextElement:  This entry's file.(956)", "Delete TagElement: @return(957)", "Delete Javadoc(958)", "Delete Modifier: public(959)", "Delete SimpleName: File(960)", "Delete SimpleType: File(961)", "Delete SimpleName: getFile(962)", "Delete SimpleName: m_file(963)", "Delete ReturnStatement(964)", "Delete Block(965)", "Delete MethodDeclaration(966)", "Delete TextElement: Get this entry's group id.(967)", "Delete TagElement(968)", "Delete TextElement:  This entry's group id.(969)", "Delete TagElement: @return(970)", "Delete TextElement:  Use getGroupID() instead(971)", "Delete TagElement: @deprecated(972)", "Delete SimpleName: getGroupID(973)", "Delete MethodRef(974)", "Delete TagElement: @see(975)", "Delete Javadoc(976)", "Delete Modifier: public(977)", "Delete PrimitiveType: int(978)", "Delete SimpleName: getGroupId(979)", "Delete SimpleName: m_groupID(980)", "Delete ReturnStatement(981)", "Delete Block(982)", "Delete MethodDeclaration(983)", "Delete TextElement: Get this entry's group id.(984)", "Delete TagElement(985)", "Delete TextElement:  This entry's group id.(986)", "Delete TagElement: @return(987)", "Delete Javadoc(988)", "Delete Modifier: public(989)", "Delete PrimitiveType: int(990)", "Delete SimpleName: getGroupID(991)", "Delete SimpleName: m_groupID(992)", "Delete ReturnStatement(993)", "Delete Block(994)", "Delete MethodDeclaration(995)", "Delete TextElement: Get this entry's group name.(996)", "Delete TagElement(997)", "Delete TextElement:  This entry's group name.(998)", "Delete TagElement: @return(999)", "Delete Javadoc(1000)", "Delete Modifier: public(1001)", "Delete SimpleName: String(1002)", "Delete SimpleType: String(1003)", "Delete SimpleName: getGroupName(1004)", "Delete SimpleName: m_groupName(1005)", "Delete SimpleName: toString(1006)", "Delete MethodInvocation(1007)", "Delete ReturnStatement(1008)", "Delete Block(1009)", "Delete MethodDeclaration(1010)", "Delete TextElement: Set this entry's modification time.(1011)", "Delete TagElement(1012)", "Delete TextElement:  The ModTime value(1013)", "Delete TagElement: @return(1014)", "Delete Javadoc(1015)", "Delete Modifier: public(1016)", "Delete SimpleName: Date(1017)", "Delete SimpleType: Date(1018)", "Delete SimpleName: getModTime(1019)", "Delete SimpleName: Date(1020)", "Delete SimpleType: Date(1021)", "Delete SimpleName: m_modTime(1022)", "Delete NumberLiteral: 1000(1023)", "Delete InfixExpression: *(1024)", "Delete ClassInstanceCreation(1025)", "Delete ReturnStatement(1026)", "Delete Block(1027)", "Delete MethodDeclaration(1028)", "Delete TextElement: Get this entry's mode.(1029)", "Delete TagElement(1030)", "Delete TextElement:  This entry's mode.(1031)", "Delete TagElement: @return(1032)", "Delete Javadoc(1033)", "Delete Modifier: public(1034)", "Delete PrimitiveType: int(1035)", "Delete SimpleName: getMode(1036)", "Delete SimpleName: m_mode(1037)", "Delete ReturnStatement(1038)", "Delete Block(1039)", "Delete MethodDeclaration(1040)", "Delete TextElement: Get this entry's name.(1041)", "Delete TagElement(1042)", "Delete TextElement:  This entry's name.(1043)", "Delete TagElement: @return(1044)", "Delete Javadoc(1045)", "Delete Modifier: public(1046)", "Delete SimpleName: String(1047)", "Delete SimpleType: String(1048)", "Delete SimpleName: getName(1049)", "Delete SimpleName: m_name(1050)", "Delete SimpleName: toString(1051)", "Delete MethodInvocation(1052)", "Delete ReturnStatement(1053)", "Delete Block(1054)", "Delete MethodDeclaration(1055)", "Delete TextElement: Get this entry's file size.(1056)", "Delete TagElement(1057)", "Delete TextElement:  This entry's file size.(1058)", "Delete TagElement: @return(1059)", "Delete Javadoc(1060)", "Delete Modifier: public(1061)", "Delete PrimitiveType: long(1062)", "Delete SimpleName: getSize(1063)", "Delete SimpleName: m_size(1064)", "Delete ReturnStatement(1065)", "Delete Block(1066)", "Delete MethodDeclaration(1067)", "Delete TextElement: Get this entry's checksum.(1068)", "Delete TagElement(1069)", "Delete TextElement:  This entry's checksum.(1070)", "Delete TagElement: @return(1071)", "Delete Javadoc(1072)", "Delete Modifier: public(1073)", "Delete PrimitiveType: int(1074)", "Delete SimpleName: getCheckSum(1075)", "Delete SimpleName: m_checkSum(1076)", "Delete ReturnStatement(1077)", "Delete Block(1078)", "Delete MethodDeclaration(1079)", "Delete TextElement: Get this entry's user id.(1080)", "Delete TagElement(1081)", "Delete TextElement:  This entry's user id.(1082)", "Delete TagElement: @return(1083)", "Delete TextElement:  Use getUserID() instead(1084)", "Delete TagElement: @deprecated(1085)", "Delete SimpleName: getUserID(1086)", "Delete MethodRef(1087)", "Delete TagElement: @see(1088)", "Delete Javadoc(1089)", "Delete Modifier: public(1090)", "Delete PrimitiveType: int(1091)", "Delete SimpleName: getUserId(1092)", "Delete SimpleName: m_userID(1093)", "Delete ReturnStatement(1094)", "Delete Block(1095)", "Delete MethodDeclaration(1096)", "Delete TextElement: Get this entry's user id.(1097)", "Delete TagElement(1098)", "Delete TextElement:  This entry's user id.(1099)", "Delete TagElement: @return(1100)", "Delete Javadoc(1101)", "Delete Modifier: public(1102)", "Delete PrimitiveType: int(1103)", "Delete SimpleName: getUserID(1104)", "Delete SimpleName: m_userID(1105)", "Delete ReturnStatement(1106)", "Delete Block(1107)", "Delete MethodDeclaration(1108)", "Delete TextElement: Get this entry's user name.(1109)", "Delete TagElement(1110)", "Delete TextElement:  This entry's user name.(1111)", "Delete TagElement: @return(1112)", "Delete Javadoc(1113)", "Delete Modifier: public(1114)", "Delete SimpleName: String(1115)", "Delete SimpleType: String(1116)", "Delete SimpleName: getUserName(1117)", "Delete SimpleName: m_userName(1118)", "Delete SimpleName: toString(1119)", "Delete MethodInvocation(1120)", "Delete ReturnStatement(1121)", "Delete Block(1122)", "Delete MethodDeclaration(1123)", "Delete TextElement: Determine if the given entry is a descendant of this entry. Descendancy(1124)", "Delete TextElement: is determined by the name of the descendant starting with this entry's(1125)", "Delete TextElement: name.(1126)", "Delete TagElement(1127)", "Delete SimpleName: desc(1128)", "Delete TextElement:  Entry to be checked as a descendent of(1129)", "Delete TagElement: @param(1130)", "Delete TextElement:  True if entry is a descendant of(1131)", "Delete TagElement: @return(1132)", "Delete Javadoc(1133)", "Delete Modifier: public(1134)", "Delete PrimitiveType: boolean(1135)", "Delete SimpleName: isDescendent(1136)", "Delete Modifier: final(1137)", "Delete SimpleName: TarEntry(1138)", "Delete SimpleType: TarEntry(1139)", "Delete SimpleName: desc(1140)", "Delete SingleVariableDeclaration(1141)", "Delete SimpleName: desc(1142)", "Delete SimpleName: getName(1143)", "Delete MethodInvocation(1144)", "Delete SimpleName: startsWith(1145)", "Delete SimpleName: getName(1146)", "Delete MethodInvocation(1147)", "Delete MethodInvocation(1148)", "Delete ReturnStatement(1149)", "Delete Block(1150)", "Delete MethodDeclaration(1151)", "Delete TextElement: Return whether or not this entry represents a directory.(1152)", "Delete TagElement(1153)", "Delete TextElement:  True if this entry is a directory.(1154)", "Delete TagElement: @return(1155)", "Delete Javadoc(1156)", "Delete Modifier: public(1157)", "Delete PrimitiveType: boolean(1158)", "Delete SimpleName: isDirectory(1159)", "Delete SimpleName: m_file(1160)", "Delete NullLiteral(1161)", "Delete InfixExpression: !=(1162)", "Delete SimpleName: m_file(1163)", "Delete SimpleName: isDirectory(1164)", "Delete MethodInvocation(1165)", "Delete ReturnStatement(1166)", "Delete Block(1167)", "Delete IfStatement(1168)", "Delete SimpleName: m_linkFlag(1169)", "Delete QualifiedName: TarConstants.LF_DIR(1170)", "Delete InfixExpression: ==(1171)", "Delete BooleanLiteral: true(1172)", "Delete ReturnStatement(1173)", "Delete Block(1174)", "Delete IfStatement(1175)", "Delete SimpleName: getName(1176)", "Delete MethodInvocation(1177)", "Delete SimpleName: endsWith(1178)", "Delete StringLiteral: \"/\"(1179)", "Delete MethodInvocation(1180)", "Delete BooleanLiteral: true(1181)", "Delete ReturnStatement(1182)", "Delete Block(1183)", "Delete IfStatement(1184)", "Delete BooleanLiteral: false(1185)", "Delete ReturnStatement(1186)", "Delete Block(1187)", "Delete MethodDeclaration(1188)", "Delete TextElement: Indicate if this entry is a GNU long name block(1189)", "Delete TagElement(1190)", "Delete TextElement:  true if this is a long name extension provided by GNU tar(1191)", "Delete TagElement: @return(1192)", "Delete Javadoc(1193)", "Delete Modifier: public(1194)", "Delete PrimitiveType: boolean(1195)", "Delete SimpleName: isGNULongNameEntry(1196)", "Delete SimpleName: m_linkFlag(1197)", "Delete QualifiedName: TarConstants.LF_GNUTYPE_LONGNAME(1198)", "Delete InfixExpression: ==(1199)", "Delete SimpleName: m_name(1200)", "Delete SimpleName: toString(1201)", "Delete MethodInvocation(1202)", "Delete SimpleName: equals(1203)", "Delete QualifiedName: TarConstants.GNU_LONGLINK(1204)", "Delete MethodInvocation(1205)", "Delete InfixExpression: &&(1206)", "Delete ReturnStatement(1207)", "Delete Block(1208)", "Delete MethodDeclaration(1209)", "Delete TextElement: Determine if the two entries are equal. Equality is determined by the(1210)", "Delete TextElement: header names being equal.(1211)", "Delete TagElement(1212)", "Delete SimpleName: other(1213)", "Delete TextElement:  Entry to be checked for equality.(1214)", "Delete TagElement: @param(1215)", "Delete TextElement:  True if the entries are equal.(1216)", "Delete TagElement: @return(1217)", "Delete Javadoc(1218)", "Delete Modifier: public(1219)", "Delete PrimitiveType: boolean(1220)", "Delete SimpleName: equals(1221)", "Delete Modifier: final(1222)", "Delete SimpleName: TarEntry(1223)", "Delete SimpleType: TarEntry(1224)", "Delete SimpleName: other(1225)", "Delete SingleVariableDeclaration(1226)", "Delete SimpleName: getName(1227)", "Delete MethodInvocation(1228)", "Delete SimpleName: equals(1229)", "Delete SimpleName: other(1230)", "Delete SimpleName: getName(1231)", "Delete MethodInvocation(1232)", "Delete MethodInvocation(1233)", "Delete ReturnStatement(1234)", "Delete Block(1235)", "Delete MethodDeclaration(1236)", "Delete TextElement: Parse an entry's header information from a header buffer.(1237)", "Delete TagElement(1238)", "Delete SimpleName: header(1239)", "Delete TextElement:  The tar entry header buffer to get information from.(1240)", "Delete TagElement: @param(1241)", "Delete Javadoc(1242)", "Delete Modifier: private(1243)", "Delete PrimitiveType: void(1244)", "Delete SimpleName: parseTarHeader(1245)", "Delete Modifier: final(1246)", "Delete PrimitiveType: byte(1247)", "Delete Dimension(1248)", "Delete ArrayType: byte[](1249)", "Delete SimpleName: header(1250)", "Delete SingleVariableDeclaration(1251)", "Delete PrimitiveType: int(1252)", "Delete SimpleName: offset(1253)", "Delete NumberLiteral: 0(1254)", "Delete VariableDeclarationFragment(1255)", "Delete VariableDeclarationStatement(1256)", "Delete SimpleName: m_name(1257)", "Delete SimpleName: TarUtils(1258)", "Delete SimpleName: parseName(1259)", "Delete SimpleName: header(1260)", "Delete SimpleName: offset(1261)", "Delete SimpleName: NAMELEN(1262)", "Delete MethodInvocation(1263)", "Delete Assignment: =(1264)", "Delete ExpressionStatement(1265)", "Delete SimpleName: offset(1266)", "Delete SimpleName: NAMELEN(1267)", "Delete Assignment: +=(1268)", "Delete ExpressionStatement(1269)", "Delete SimpleName: m_mode(1270)", "Delete PrimitiveType: int(1271)", "Delete SimpleName: TarUtils(1272)", "Delete SimpleName: parseOctal(1273)", "Delete SimpleName: header(1274)", "Delete SimpleName: offset(1275)", "Delete QualifiedName: TarConstants.MODELEN(1276)", "Delete MethodInvocation(1277)", "Delete CastExpression(1278)", "Delete Assignment: =(1279)", "Delete ExpressionStatement(1280)", "Delete SimpleName: offset(1281)", "Delete QualifiedName: TarConstants.MODELEN(1282)", "Delete Assignment: +=(1283)", "Delete ExpressionStatement(1284)", "Delete SimpleName: m_userID(1285)", "Delete PrimitiveType: int(1286)", "Delete SimpleName: TarUtils(1287)", "Delete SimpleName: parseOctal(1288)", "Delete SimpleName: header(1289)", "Delete SimpleName: offset(1290)", "Delete QualifiedName: TarConstants.UIDLEN(1291)", "Delete MethodInvocation(1292)", "Delete CastExpression(1293)", "Delete Assignment: =(1294)", "Delete ExpressionStatement(1295)", "Delete SimpleName: offset(1296)", "Delete QualifiedName: TarConstants.UIDLEN(1297)", "Delete Assignment: +=(1298)", "Delete ExpressionStatement(1299)", "Delete SimpleName: m_groupID(1300)", "Delete PrimitiveType: int(1301)", "Delete SimpleName: TarUtils(1302)", "Delete SimpleName: parseOctal(1303)", "Delete SimpleName: header(1304)", "Delete SimpleName: offset(1305)", "Delete QualifiedName: TarConstants.GIDLEN(1306)", "Delete MethodInvocation(1307)", "Delete CastExpression(1308)", "Delete Assignment: =(1309)", "Delete ExpressionStatement(1310)", "Delete SimpleName: offset(1311)", "Delete QualifiedName: TarConstants.GIDLEN(1312)", "Delete Assignment: +=(1313)", "Delete ExpressionStatement(1314)", "Delete SimpleName: m_size(1315)", "Delete SimpleName: TarUtils(1316)", "Delete SimpleName: parseOctal(1317)", "Delete SimpleName: header(1318)", "Delete SimpleName: offset(1319)", "Delete QualifiedName: TarConstants.SIZELEN(1320)", "Delete MethodInvocation(1321)", "Delete Assignment: =(1322)", "Delete ExpressionStatement(1323)", "Delete SimpleName: offset(1324)", "Delete QualifiedName: TarConstants.SIZELEN(1325)", "Delete Assignment: +=(1326)", "Delete ExpressionStatement(1327)", "Delete SimpleName: m_modTime(1328)", "Delete SimpleName: TarUtils(1329)", "Delete SimpleName: parseOctal(1330)", "Delete SimpleName: header(1331)", "Delete SimpleName: offset(1332)", "Delete QualifiedName: TarConstants.MODTIMELEN(1333)", "Delete MethodInvocation(1334)", "Delete Assignment: =(1335)", "Delete ExpressionStatement(1336)", "Delete SimpleName: offset(1337)", "Delete QualifiedName: TarConstants.MODTIMELEN(1338)", "Delete Assignment: +=(1339)", "Delete ExpressionStatement(1340)", "Delete SimpleName: m_checkSum(1341)", "Delete PrimitiveType: int(1342)", "Delete SimpleName: TarUtils(1343)", "Delete SimpleName: parseOctal(1344)", "Delete SimpleName: header(1345)", "Delete SimpleName: offset(1346)", "Delete QualifiedName: TarConstants.CHKSUMLEN(1347)", "Delete MethodInvocation(1348)", "Delete CastExpression(1349)", "Delete Assignment: =(1350)", "Delete ExpressionStatement(1351)", "Delete SimpleName: offset(1352)", "Delete QualifiedName: TarConstants.CHKSUMLEN(1353)", "Delete Assignment: +=(1354)", "Delete ExpressionStatement(1355)", "Delete SimpleName: m_linkFlag(1356)", "Delete SimpleName: header(1357)", "Delete SimpleName: offset(1358)", "Delete PostfixExpression: ++(1359)", "Delete ArrayAccess(1360)", "Delete Assignment: =(1361)", "Delete ExpressionStatement(1362)", "Delete SimpleName: m_linkName(1363)", "Delete SimpleName: TarUtils(1364)", "Delete SimpleName: parseName(1365)", "Delete SimpleName: header(1366)", "Delete SimpleName: offset(1367)", "Delete SimpleName: NAMELEN(1368)", "Delete MethodInvocation(1369)", "Delete Assignment: =(1370)", "Delete ExpressionStatement(1371)", "Delete SimpleName: offset(1372)", "Delete SimpleName: NAMELEN(1373)", "Delete Assignment: +=(1374)", "Delete ExpressionStatement(1375)", "Delete SimpleName: m_magic(1376)", "Delete SimpleName: TarUtils(1377)", "Delete SimpleName: parseName(1378)", "Delete SimpleName: header(1379)", "Delete SimpleName: offset(1380)", "Delete QualifiedName: TarConstants.MAGICLEN(1381)", "Delete MethodInvocation(1382)", "Delete Assignment: =(1383)", "Delete ExpressionStatement(1384)", "Delete SimpleName: offset(1385)", "Delete QualifiedName: TarConstants.MAGICLEN(1386)", "Delete Assignment: +=(1387)", "Delete ExpressionStatement(1388)", "Delete SimpleName: m_userName(1389)", "Delete SimpleName: TarUtils(1390)", "Delete SimpleName: parseName(1391)", "Delete SimpleName: header(1392)", "Delete SimpleName: offset(1393)", "Delete QualifiedName: TarConstants.UNAMELEN(1394)", "Delete MethodInvocation(1395)", "Delete Assignment: =(1396)", "Delete ExpressionStatement(1397)", "Delete SimpleName: offset(1398)", "Delete QualifiedName: TarConstants.UNAMELEN(1399)", "Delete Assignment: +=(1400)", "Delete ExpressionStatement(1401)", "Delete SimpleName: m_groupName(1402)", "Delete SimpleName: TarUtils(1403)", "Delete SimpleName: parseName(1404)", "Delete SimpleName: header(1405)", "Delete SimpleName: offset(1406)", "Delete QualifiedName: TarConstants.GNAMELEN(1407)", "Delete MethodInvocation(1408)", "Delete Assignment: =(1409)", "Delete ExpressionStatement(1410)", "Delete SimpleName: offset(1411)", "Delete QualifiedName: TarConstants.GNAMELEN(1412)", "Delete Assignment: +=(1413)", "Delete ExpressionStatement(1414)", "Delete SimpleName: m_devMajor(1415)", "Delete PrimitiveType: int(1416)", "Delete SimpleName: TarUtils(1417)", "Delete SimpleName: parseOctal(1418)", "Delete SimpleName: header(1419)", "Delete SimpleName: offset(1420)", "Delete QualifiedName: TarConstants.DEVLEN(1421)", "Delete MethodInvocation(1422)", "Delete CastExpression(1423)", "Delete Assignment: =(1424)", "Delete ExpressionStatement(1425)", "Delete SimpleName: offset(1426)", "Delete QualifiedName: TarConstants.DEVLEN(1427)", "Delete Assignment: +=(1428)", "Delete ExpressionStatement(1429)", "Delete SimpleName: m_devMinor(1430)", "Delete PrimitiveType: int(1431)", "Delete SimpleName: TarUtils(1432)", "Delete SimpleName: parseOctal(1433)", "Delete SimpleName: header(1434)", "Delete SimpleName: offset(1435)", "Delete QualifiedName: TarConstants.DEVLEN(1436)", "Delete MethodInvocation(1437)", "Delete CastExpression(1438)", "Delete Assignment: =(1439)", "Delete ExpressionStatement(1440)", "Delete Block(1441)", "Delete MethodDeclaration(1442)", "Delete TextElement: Write an entry's header information to a header buffer.(1443)", "Delete TagElement(1444)", "Delete SimpleName: buffer(1445)", "Delete TextElement:  The tar entry header buffer to fill in.(1446)", "Delete TagElement: @param(1447)", "Delete Javadoc(1448)", "Delete Modifier: public(1449)", "Delete PrimitiveType: void(1450)", "Delete SimpleName: writeEntryHeader(1451)", "Delete Modifier: final(1452)", "Delete PrimitiveType: byte(1453)", "Delete Dimension(1454)", "Delete ArrayType: byte[](1455)", "Delete SimpleName: buffer(1456)", "Delete SingleVariableDeclaration(1457)", "Delete PrimitiveType: int(1458)", "Delete SimpleName: offset(1459)", "Delete NumberLiteral: 0(1460)", "Delete VariableDeclarationFragment(1461)", "Delete VariableDeclarationStatement(1462)", "Delete SimpleName: offset(1463)", "Delete SimpleName: TarUtils(1464)", "Delete SimpleName: getNameBytes(1465)", "Delete SimpleName: m_name(1466)", "Delete SimpleName: buffer(1467)", "Delete SimpleName: offset(1468)", "Delete SimpleName: NAMELEN(1469)", "Delete MethodInvocation(1470)", "Delete Assignment: =(1471)", "Delete ExpressionStatement(1472)", "Delete SimpleName: offset(1473)", "Delete SimpleName: TarUtils(1474)", "Delete SimpleName: getOctalBytes(1475)", "Delete SimpleName: m_mode(1476)", "Delete SimpleName: buffer(1477)", "Delete SimpleName: offset(1478)", "Delete QualifiedName: TarConstants.MODELEN(1479)", "Delete MethodInvocation(1480)", "Delete Assignment: =(1481)", "Delete ExpressionStatement(1482)", "Delete SimpleName: offset(1483)", "Delete SimpleName: TarUtils(1484)", "Delete SimpleName: getOctalBytes(1485)", "Delete SimpleName: m_userID(1486)", "Delete SimpleName: buffer(1487)", "Delete SimpleName: offset(1488)", "Delete QualifiedName: TarConstants.UIDLEN(1489)", "Delete MethodInvocation(1490)", "Delete Assignment: =(1491)", "Delete ExpressionStatement(1492)", "Delete SimpleName: offset(1493)", "Delete SimpleName: TarUtils(1494)", "Delete SimpleName: getOctalBytes(1495)", "Delete SimpleName: m_groupID(1496)", "Delete SimpleName: buffer(1497)", "Delete SimpleName: offset(1498)", "Delete QualifiedName: TarConstants.GIDLEN(1499)", "Delete MethodInvocation(1500)", "Delete Assignment: =(1501)", "Delete ExpressionStatement(1502)", "Delete SimpleName: offset(1503)", "Delete SimpleName: TarUtils(1504)", "Delete SimpleName: getLongOctalBytes(1505)", "Delete SimpleName: m_size(1506)", "Delete SimpleName: buffer(1507)", "Delete SimpleName: offset(1508)", "Delete QualifiedName: TarConstants.SIZELEN(1509)", "Delete MethodInvocation(1510)", "Delete Assignment: =(1511)", "Delete ExpressionStatement(1512)", "Delete SimpleName: offset(1513)", "Delete SimpleName: TarUtils(1514)", "Delete SimpleName: getLongOctalBytes(1515)", "Delete SimpleName: m_modTime(1516)", "Delete SimpleName: buffer(1517)", "Delete SimpleName: offset(1518)", "Delete QualifiedName: TarConstants.MODTIMELEN(1519)", "Delete MethodInvocation(1520)", "Delete Assignment: =(1521)", "Delete ExpressionStatement(1522)", "Delete Modifier: final(1523)", "Delete PrimitiveType: int(1524)", "Delete SimpleName: checkSumOffset(1525)", "Delete SimpleName: offset(1526)", "Delete VariableDeclarationFragment(1527)", "Delete VariableDeclarationStatement(1528)", "Delete PrimitiveType: int(1529)", "Delete SimpleName: i(1530)", "Delete NumberLiteral: 0(1531)", "Delete VariableDeclarationFragment(1532)", "Delete VariableDeclarationExpression(1533)", "Delete SimpleName: i(1534)", "Delete QualifiedName: TarConstants.CHKSUMLEN(1535)", "Delete InfixExpression: <(1536)", "Delete SimpleName: i(1537)", "Delete PrefixExpression: ++(1538)", "Delete SimpleName: buffer(1539)", "Delete SimpleName: offset(1540)", "Delete PostfixExpression: ++(1541)", "Delete ArrayAccess(1542)", "Delete PrimitiveType: byte(1543)", "Delete CharacterLiteral: ' '(1544)", "Delete CastExpression(1545)", "Delete Assignment: =(1546)", "Delete ExpressionStatement(1547)", "Delete Block(1548)", "Delete ForStatement(1549)", "Delete SimpleName: buffer(1550)", "Delete SimpleName: offset(1551)", "Delete PostfixExpression: ++(1552)", "Delete ArrayAccess(1553)", "Delete SimpleName: m_linkFlag(1554)", "Delete Assignment: =(1555)", "Delete ExpressionStatement(1556)", "Delete SimpleName: offset(1557)", "Delete SimpleName: TarUtils(1558)", "Delete SimpleName: getNameBytes(1559)", "Delete SimpleName: m_linkName(1560)", "Delete SimpleName: buffer(1561)", "Delete SimpleName: offset(1562)", "Delete SimpleName: NAMELEN(1563)", "Delete MethodInvocation(1564)", "Delete Assignment: =(1565)", "Delete ExpressionStatement(1566)", "Delete SimpleName: offset(1567)", "Delete SimpleName: TarUtils(1568)", "Delete SimpleName: getNameBytes(1569)", "Delete SimpleName: m_magic(1570)", "Delete SimpleName: buffer(1571)", "Delete SimpleName: offset(1572)", "Delete QualifiedName: TarConstants.MAGICLEN(1573)", "Delete MethodInvocation(1574)", "Delete Assignment: =(1575)", "Delete ExpressionStatement(1576)", "Delete SimpleName: offset(1577)", "Delete SimpleName: TarUtils(1578)", "Delete SimpleName: getNameBytes(1579)", "Delete SimpleName: m_userName(1580)", "Delete SimpleName: buffer(1581)", "Delete SimpleName: offset(1582)", "Delete QualifiedName: TarConstants.UNAMELEN(1583)", "Delete MethodInvocation(1584)", "Delete Assignment: =(1585)", "Delete ExpressionStatement(1586)", "Delete SimpleName: offset(1587)", "Delete SimpleName: TarUtils(1588)", "Delete SimpleName: getNameBytes(1589)", "Delete SimpleName: m_groupName(1590)", "Delete SimpleName: buffer(1591)", "Delete SimpleName: offset(1592)", "Delete QualifiedName: TarConstants.GNAMELEN(1593)", "Delete MethodInvocation(1594)", "Delete Assignment: =(1595)", "Delete ExpressionStatement(1596)", "Delete SimpleName: offset(1597)", "Delete SimpleName: TarUtils(1598)", "Delete SimpleName: getOctalBytes(1599)", "Delete SimpleName: m_devMajor(1600)", "Delete SimpleName: buffer(1601)", "Delete SimpleName: offset(1602)", "Delete QualifiedName: TarConstants.DEVLEN(1603)", "Delete MethodInvocation(1604)", "Delete Assignment: =(1605)", "Delete ExpressionStatement(1606)", "Delete SimpleName: offset(1607)", "Delete SimpleName: TarUtils(1608)", "Delete SimpleName: getOctalBytes(1609)", "Delete SimpleName: m_devMinor(1610)", "Delete SimpleName: buffer(1611)", "Delete SimpleName: offset(1612)", "Delete QualifiedName: TarConstants.DEVLEN(1613)", "Delete MethodInvocation(1614)", "Delete Assignment: =(1615)", "Delete ExpressionStatement(1616)", "Delete SimpleName: offset(1617)", "Delete QualifiedName: buffer.length(1618)", "Delete InfixExpression: <(1619)", "Delete SimpleName: buffer(1620)", "Delete SimpleName: offset(1621)", "Delete PostfixExpression: ++(1622)", "Delete ArrayAccess(1623)", "Delete NumberLiteral: 0(1624)", "Delete Assignment: =(1625)", "Delete ExpressionStatement(1626)", "Delete Block(1627)", "Delete WhileStatement(1628)", "Delete Modifier: final(1629)", "Delete PrimitiveType: long(1630)", "Delete SimpleName: checkSum(1631)", "Delete SimpleName: TarUtils(1632)", "Delete SimpleName: computeCheckSum(1633)", "Delete SimpleName: buffer(1634)", "Delete MethodInvocation(1635)", "Delete VariableDeclarationFragment(1636)", "Delete VariableDeclarationStatement(1637)", "Delete SimpleName: TarUtils(1638)", "Delete SimpleName: getCheckSumOctalBytes(1639)", "Delete SimpleName: checkSum(1640)", "Delete SimpleName: buffer(1641)", "Delete SimpleName: checkSumOffset(1642)", "Delete QualifiedName: TarConstants.CHKSUMLEN(1643)", "Delete MethodInvocation(1644)", "Delete ExpressionStatement(1645)", "Delete Block(1646)", "Delete MethodDeclaration(1647)", "Delete TypeDeclaration: class(1648)"]}}, {"TarInputStream_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.io.compress.tar"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.FilterInputStream"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.IOException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.InputStream"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.OutputStream", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL PrimitiveType: void", "DEL SimpleName: FilterInputStream", "DEL SimpleName: TarInputStream", "DEL SimpleType: StringBuffer", "DEL InfixExpression: ==", "DEL IfStatement", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL TagElement: @param", "DEL PrimitiveType: int", "DEL NumberLiteral: 1", "DEL NumberLiteral: 1", "DEL SimpleName: IOException", "DEL Dimension", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: m_buffer", "DEL ExpressionStatement", "DEL SimpleName: offset", "DEL SimpleName: headerBuf", "DEL InfixExpression: -", "DEL MethodInvocation", "DEL TagElement: @return", "DEL SimpleName: num", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: count", "DEL SimpleName: IOException", "DEL TagElement: @param", "DEL PrimitiveType: int", "DEL Block", "DEL TextElement: Since we do not support marking just yet, we return false.", "DEL MethodInvocation", "DEL TextElement: Capable of being overidden in sub-classes.", "DEL NumberLiteral: 0", "DEL SimpleName: m_buffer", "DEL MethodInvocation", "DEL InfixExpression: >", "DEL TextElement:  False.", "DEL InfixExpression: !=", "DEL Modifier: final", "DEL NumberLiteral: 0", "DEL InfixExpression: &&", "DEL MethodDeclaration", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL MethodInvocation", "DEL CharacterLiteral: 't'", "DEL TagElement: @param", "DEL TextElement:  The OutputStream into which to write the entry's data.", "DEL NumberLiteral: 0", "DEL SimpleName: buffer", "DEL CharacterLiteral: 's'", "DEL SimpleName: size", "DEL SimpleName: size", "DEL QualifiedName: m_readBuf.length", "DEL PrimitiveType: int", "DEL SimpleName: headerBuf", "DEL TagElement", "DEL SimpleName: IOException", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL CharacterLiteral: 'u'", "DEL ArrayAccess", "DEL PrimitiveType: int", "DEL InfixExpression: ==", "DEL InfixExpression: *", "DEL PrimitiveType: int", "DEL SimpleName: str", "DEL TextElement:  The number of available bytes for the current entry.", "DEL ExpressionStatement", "DEL TagElement", "DEL QualifiedName: TarBuffer.DEFAULT_RECORDSIZE", "DEL TextElement: archive. This does not indicate how much data is left in the entire", "DEL BooleanLiteral: false", "DEL SimpleName: recordLength", "DEL ArrayCreation", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL ArrayType: byte[]", "DEL Assignment: +=", "DEL Dimension", "DEL TextElement:  the block size to use", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: numToSkip", "DEL Dimension", "DEL StringLiteral: \"  skipping \"", "DEL Modifier: final", "DEL TextElement:  the message to use in debugging", "DEL SimpleName: count", "DEL SimpleType: IOException", "DEL PrimitiveType: void", "DEL Modifier: private", "DEL Block", "DEL SimpleName: count", "DEL SimpleName: IOException", "DEL Assignment: =", "DEL Modifier: final", "DEL IfStatement", "DEL SimpleName: IOException", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL Block", "DEL Modifier: final", "DEL Javadoc", "DEL TagElement: @return", "DEL SimpleName: IOException", "DEL TextElement:  The TarBuffer record size.", "DEL TagElement: @exception", "DEL ArrayType: byte[]", "DEL ReturnStatement", "DEL InfixExpression: -", "DEL CharacterLiteral: 'r'", "DEL Assignment: +=", "DEL Block", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 0", "DEL SimpleName: skip", "DEL SimpleName: size", "DEL SimpleName: buffer", "DEL SimpleName: totalRead", "DEL SimpleName: OutputStream", "DEL VariableDeclarationStatement", "DEL QualifiedName: buffer.length", "DEL SimpleName: numToRead", "DEL TagElement: @exception", "DEL VariableDeclarationStatement", "DEL SimpleName: recordLength", "DEL InfixExpression: >", "DEL TagElement: @exception", "DEL VariableDeclarationStatement", "DEL ArrayType: byte[]", "DEL Javadoc", "DEL SimpleType: TarEntry", "DEL SimpleName: num", "DEL SimpleName: rec", "DEL Javadoc", "DEL TagElement: @param", "DEL SimpleName: debug", "DEL TypeDeclaration: class", "DEL PrimitiveType: byte", "DEL PrimitiveType: byte", "DEL InfixExpression: >", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL ArrayType: byte[]", "DEL ArrayType: byte[]", "DEL VariableDeclarationFragment", "DEL SimpleName: read", "DEL ParenthesizedExpression", "DEL TextElement: entry's size header field and the amount of data already read from the", "DEL IfStatement", "DEL MemberRef", "DEL PrimitiveType: int", "DEL ArrayAccess", "DEL Block", "DEL SimpleName: m_buffer", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL TextElement:  Description of Exception", "DEL ExpressionStatement", "DEL TextElement:  <a href=\"mailto:stefano@apache.org\">Stefano Mazzocchi</a>", "DEL SimpleName: longName", "DEL MethodDeclaration", "DEL SimpleType: IOException", "DEL SimpleName: m_buffer", "DEL ExpressionStatement", "DEL TextElement:  <a href=\"mailto:peter@apache.org\">Peter Donald</a>", "DEL SimpleName: m_debug", "DEL VariableDeclarationFragment", "DEL Block", "DEL Modifier: final", "DEL NullLiteral", "DEL SimpleName: m_currEntry", "DEL TextElement:  The number of bytes read, or -1 at EOF.", "DEL SimpleName: numRead", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL SimpleName: size", "DEL PrefixExpression: !", "DEL SimpleName: num", "DEL NumberLiteral: 32", "DEL TagElement", "DEL InfixExpression: -", "DEL SimpleName: m_readBuf", "DEL MethodDeclaration", "DEL NullLiteral", "DEL NumberLiteral: 258", "DEL PrimitiveType: void", "DEL PrimitiveType: byte", "DEL TagElement: @see", "DEL SimpleName: message", "DEL PrimitiveType: byte", "DEL SimpleName: numToSkip", "DEL SimpleName: m_entryOffset", "DEL SimpleName: headerBuf", "DEL SimpleType: IOException", "DEL TagElement", "DEL SimpleName: m_currEntry", "DEL TagElement: @param", "DEL ArrayType: byte[]", "DEL SimpleName: num", "DEL SimpleName: setName", "DEL TagElement: @exception", "DEL SimpleName: buffer", "DEL SimpleName: count", "DEL MethodInvocation", "DEL TagElement: @return", "DEL ReturnStatement", "DEL SimpleName: m_oneBuf", "DEL ExpressionStatement", "DEL ParenthesizedExpression", "DEL Block", "DEL Assignment: =", "DEL Block", "DEL SimpleType: String", "DEL SimpleName: recordSize", "DEL SimpleName: buffer", "DEL InfixExpression: >", "DEL SimpleName: m_hasHitEOF", "DEL QualifiedName: skipBuf.length", "DEL SimpleName: readRecord", "DEL SimpleName: String", "DEL Assignment: =", "DEL Modifier: final", "DEL TextElement:  The offset at which to place bytes read.", "DEL TagElement", "DEL PrimitiveType: void", "DEL TextElement: each entry as a normal input stream using read().", "DEL ArrayType: byte[]", "DEL IfStatement", "DEL MethodDeclaration", "DEL TextElement:  stream to create TarInputStream from", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL MethodDeclaration", "DEL Modifier: final", "DEL Assignment: -=", "DEL SimpleName: recordLength", "DEL SimpleName: StringBuffer", "DEL ExpressionStatement", "DEL SimpleName: m_currEntry", "DEL SimpleName: markLimit", "DEL SimpleName: numToSkip", "DEL PrimitiveType: int", "DEL SimpleName: blockSize", "DEL TextElement: entry's data if the number to skip extends beyond that point.", "DEL TextElement: Sets the debugging flag.", "DEL InfixExpression: >=", "DEL Block", "DEL SimpleName: size", "DEL Modifier: public", "DEL SimpleName: InputStream", "DEL SimpleName: recordLength", "DEL IfStatement", "DEL SimpleName: m_oneBuf", "DEL PrimitiveType: boolean", "DEL SimpleName: markSupported", "DEL MemberRef", "DEL TextElement:  when an IO error causes operation to fail", "DEL MethodInvocation", "DEL PrimitiveType: byte", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: debug", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL Javadoc", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: available", "DEL SimpleName: m_debug", "DEL PrimitiveType: int", "DEL SimpleName: m_readBuf", "DEL SimpleType: IOException", "DEL WhileStatement", "DEL TextElement: Skip bytes in the input buffer. This skips bytes in the current entry's", "DEL NumberLiteral: 1024", "DEL FieldDeclaration", "DEL ClassInstanceCreation", "DEL PrimitiveType: void", "DEL SimpleName: IOException", "DEL Block", "DEL MethodInvocation", "DEL CharacterLiteral: 'a'", "DEL Assignment: -=", "DEL VariableDeclarationFragment", "DEL SimpleName: input", "DEL NumberLiteral: 256", "DEL SimpleName: offset", "DEL ReturnStatement", "DEL ReturnStatement", "DEL ArrayCreation", "DEL SimpleName: input", "DEL Block", "DEL SimpleName: message", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: rec", "DEL Modifier: public", "DEL ArrayAccess", "DEL ExpressionStatement", "DEL SimpleName: message", "DEL ExpressionStatement", "DEL TextElement: Utility method to do debugging.", "DEL SimpleName: numToRead", "DEL ArrayCreation", "DEL TextElement: The TarInputStream reads a UNIX tar archive as an InputStream. methods are", "DEL MemberRef", "DEL ExpressionStatement", "DEL WhileStatement", "DEL Modifier: final", "DEL Modifier: public", "DEL ArrayCreation", "DEL ConditionalExpression", "DEL VariableDeclarationStatement", "DEL SimpleName: blockSize", "DEL SimpleName: m_hasHitEOF", "DEL MethodInvocation", "DEL SimpleName: blockSize", "DEL MethodDeclaration", "DEL SimpleName: m_entryOffset", "DEL NullLiteral", "DEL SimpleName: m_entrySize", "DEL ParenthesizedExpression", "DEL SimpleName: m_entrySize", "DEL SingleVariableDeclaration", "DEL SimpleName: m_currEntry", "DEL InfixExpression: >=", "DEL NullLiteral", "DEL TagElement: @exception", "DEL MethodDeclaration", "DEL SimpleName: read", "DEL Assignment: =", "DEL SimpleName: m_currEntry", "DEL ExpressionStatement", "DEL IfStatement", "DEL TagElement: @param", "DEL Assignment: =", "DEL MethodDeclaration", "DEL SimpleName: newLength", "DEL Block", "DEL Block", "DEL SimpleName: getNextEntry", "DEL InfixExpression: -", "DEL SimpleName: m_currEntry", "DEL SimpleName: getName", "DEL Dimension", "DEL TagElement: @param", "DEL SimpleName: arraycopy", "DEL NumberLiteral: 0", "DEL SimpleName: position", "DEL SimpleName: debug", "DEL TagElement", "DEL IfStatement", "DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL StringLiteral: \"TarInputStream: SET CURRENTRY '\"", "DEL NumberLiteral: 0", "DEL Block", "DEL Modifier: public", "DEL SimpleName: headerBuf", "DEL SimpleName: arraycopy", "DEL PrimitiveType: int", "DEL ArrayType: byte[]", "DEL SimpleName: m_readBuf", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleType: InputStream", "DEL PrimitiveType: boolean", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL QualifiedName: buffer.length", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: size", "DEL SimpleName: TarBuffer", "DEL NumberLiteral: 0", "DEL TextElement: Get the available data that can be read from the current entry in the", "DEL ArrayAccess", "DEL ConstructorInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: IOException", "DEL SimpleName: TarInputStream", "DEL SimpleName: size", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: IOException", "DEL InfixExpression: !=", "DEL SingleVariableDeclaration", "DEL SimpleName: m_debug", "DEL SimpleName: getNextEntry", "DEL SimpleName: setDebug", "DEL TextElement: Since we do not support marking just yet, we do nothing.", "DEL InfixExpression: ==", "DEL SimpleName: numRead", "DEL VariableDeclarationFragment", "DEL PrimitiveType: byte", "DEL SimpleName: numToSkip", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: input", "DEL PrimitiveType: void", "DEL SimpleType: TarBuffer", "DEL Modifier: private", "DEL TextElement:  when an IO error causes operation to fail", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL SimpleName: String", "DEL Block", "DEL SimpleName: size", "DEL ExpressionStatement", "DEL ParenthesizedExpression", "DEL IfStatement", "DEL ArrayCreation", "DEL TagElement", "DEL TextElement:  when an IO error causes operation to fail", "DEL TextElement: data in the current entry, if there is one, and place the input stream at", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL TagElement", "DEL TextElement:  when an IO error causes operation to fail", "DEL Dimension", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: arraycopy", "DEL SimpleName: m_entrySize", "DEL ArrayType: byte[]", "DEL SimpleName: count", "DEL NumberLiteral: 1", "DEL TagElement", "DEL TextElement: Closes this stream. Calls the TarBuffer's close() method.", "DEL SimpleName: position", "DEL SimpleType: IOException", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: m_hasHitEOF", "DEL ArrayType: byte[]", "DEL InfixExpression: &&", "DEL SimpleName: length", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL TextElement:  The number of bytes to read.", "DEL Modifier: public", "DEL SimpleType: String", "DEL NumberLiteral: 257", "DEL Block", "DEL SimpleName: m_readBuf", "DEL Javadoc", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: debug", "DEL Modifier: private", "DEL SimpleName: output", "DEL TextElement: more entries in the archive, null will be returned to indicate that the", "DEL SimpleName: message", "DEL SimpleName: mark", "DEL Dimension", "DEL SuperConstructorInvocation", "DEL MethodInvocation", "DEL TagElement: @see", "DEL BooleanLiteral: true", "DEL SimpleName: length", "DEL SimpleName: TarBuffer", "DEL SimpleName: buffer", "DEL PrimitiveType: int", "DEL IfStatement", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL Modifier: public", "DEL SimpleName: System", "DEL PrimitiveType: int", "DEL Block", "DEL StringLiteral: \" bytes\"", "DEL SimpleName: m_currEntry", "DEL SimpleName: input", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleName: IOException", "DEL SimpleName: m_entryOffset", "DEL ClassInstanceCreation", "DEL SimpleName: numToRead", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL Modifier: final", "DEL Block", "DEL SimpleName: TarInputStream", "DEL SimpleName: m_readBuf", "DEL SimpleName: toString", "DEL SimpleName: getSize", "DEL SimpleName: DEFAULT_RECORDSIZE", "DEL SimpleName: m_entrySize", "DEL SimpleName: input", "DEL ThrowStatement", "DEL SimpleType: TarEntry", "DEL SimpleName: message", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL MethodDeclaration", "DEL IfStatement", "DEL PrefixExpression: -", "DEL SimpleName: numToRead", "DEL SimpleName: size", "DEL VariableDeclarationFragment", "DEL SimpleName: TarInputStream", "DEL Modifier: final", "DEL SimpleName: size", "DEL TextElement:  The number of bytes to skip.", "DEL VariableDeclarationFragment", "DEL SimpleName: markLimit", "DEL QualifiedName: m_readBuf.length", "DEL SimpleName: offset", "DEL PrimitiveType: int", "DEL Modifier: private", "DEL InfixExpression: >", "DEL PrimitiveType: int", "DEL SimpleName: append", "DEL Block", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL Modifier: public", "DEL InfixExpression: >=", "DEL SimpleName: numRead", "DEL Javadoc", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleName: copyEntryContents", "DEL Block", "DEL SimpleName: m_entryOffset", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL InfixExpression: &&", "DEL SimpleName: message", "DEL SimpleName: m_hasHitEOF", "DEL VariableDeclarationStatement", "DEL SimpleName: numToRead", "DEL Modifier: private", "DEL NullLiteral", "DEL ArrayType: byte[]", "DEL SimpleName: m_entryOffset", "DEL StringLiteral: \" bytes unread\"", "DEL Assignment: -=", "DEL NumberLiteral: 0", "DEL SimpleName: position", "DEL Assignment: =", "DEL SimpleName: headerBuf", "DEL SimpleName: num", "DEL StringLiteral: \"READ NULL RECORD\"", "DEL TextElement: current entry.", "DEL PrimitiveType: byte", "DEL Javadoc", "DEL MethodInvocation", "DEL TagElement: @author", "DEL Javadoc", "DEL TextElement: TarEntry from the header bytes and return that entry. If there are no", "DEL SimpleName: isGNULongNameEntry", "DEL Block", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: IOException", "DEL Dimension", "DEL Block", "DEL NumberLiteral: 0", "DEL VariableDeclarationStatement", "DEL TextElement:  The number of bytes read, or -1 at EOF.", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL TextElement:  The buffer into which to place bytes read.", "DEL SimpleName: TarBuffer", "DEL SimpleName: read", "DEL Javadoc", "DEL SimpleType: InputStream", "DEL SimpleName: StringBuffer", "DEL PrimitiveType: byte", "DEL SimpleName: IOException", "DEL SimpleName: message", "DEL Modifier: public", "DEL ParenthesizedExpression", "DEL PrimitiveType: byte", "DEL StringLiteral: \"' size = \"", "DEL NumberLiteral: 0", "DEL InfixExpression: ==", "DEL SimpleName: output", "DEL SimpleName: getSize", "DEL SimpleName: num", "DEL SimpleName: str", "DEL BooleanLiteral: true", "DEL TagElement: @param", "DEL SimpleType: TarBuffer", "DEL SimpleName: longName", "DEL TextElement: Get the next entry in this tar archive. This will skip over any remaining", "DEL Block", "DEL SimpleName: m_debug", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL PrefixExpression: -", "DEL QualifiedName: TarBuffer.DEFAULT_BLOCKSIZE", "DEL ExpressionStatement", "DEL SimpleType: InputStream", "DEL ConditionalExpression", "DEL StringLiteral: \" OFF \"", "DEL MethodDeclaration", "DEL Block", "DEL Dimension", "DEL Dimension", "DEL TextElement: Reads a byte from the current tar archive entry. This method simply calls", "DEL PrimitiveType: byte", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: setDebug", "DEL SimpleName: newBuffer", "DEL SimpleName: totalRead", "DEL CastExpression", "DEL SimpleName: blockSize", "DEL Dimension", "DEL ReturnStatement", "DEL Dimension", "DEL PrimitiveType: byte", "DEL SimpleName: TarBuffer", "DEL IfStatement", "DEL SimpleName: buffer", "DEL StringLiteral: \"' SZ \"", "DEL PrimitiveType: byte", "DEL Javadoc", "DEL NumberLiteral: 260", "DEL FieldDeclaration", "DEL SimpleName: buffer", "DEL VariableDeclarationStatement", "DEL SimpleName: num", "DEL Block", "DEL SimpleName: IOException", "DEL ExpressionStatement", "DEL PrefixExpression: -", "DEL Dimension", "DEL InfixExpression: *", "DEL SimpleName: buffer", "DEL SimpleName: read", "DEL SimpleName: TarInputStream", "DEL SimpleName: m_oneBuf", "DEL MethodDeclaration", "DEL Javadoc", "DEL Modifier: private", "DEL TextElement:  The buffer into which to place bytes read.", "DEL TextElement: provided to position at each successive entry in the archive, and the read", "DEL SimpleName: InputStream", "DEL Modifier: public", "DEL SimpleName: input", "DEL SimpleName: m_currEntry", "DEL SimpleName: input", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL SimpleName: m_readBuf", "DEL VariableDeclarationFragment", "DEL InfixExpression: &&", "DEL NumberLiteral: 261", "DEL NullLiteral", "DEL SimpleName: m_entryOffset", "DEL PrimitiveType: byte", "DEL SimpleName: rec", "DEL VariableDeclarationStatement", "DEL Block", "DEL ArrayType: byte[]", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleName: m_buffer", "DEL SimpleName: InputStream", "DEL TextElement: them as if they were this stream's start and EOF.", "DEL SimpleName: totalRead", "DEL Modifier: final", "DEL Modifier: public", "DEL InfixExpression: +", "DEL InfixExpression: -", "DEL Javadoc", "DEL Block", "DEL QualifiedName: rec.length", "DEL FieldDeclaration", "DEL SimpleName: read", "DEL PrefixExpression: -", "DEL TextElement: archive, only in the current entry. This value is determined from the", "DEL StringLiteral: \"READ EOF RECORD\"", "DEL Modifier: public", "DEL Modifier: public", "DEL Block", "DEL TextElement: Construct a TarInputStream using specified input", "DEL SimpleName: newBuffer", "DEL SimpleName: buffer", "DEL IfStatement", "DEL MethodDeclaration", "DEL SimpleName: DEFAULT_RECORDSIZE", "DEL FieldDeclaration", "DEL Modifier: public", "DEL TagElement: @author", "DEL TextElement:  The next TarEntry in the archive, or null.", "DEL VariableDeclarationStatement", "DEL SimpleName: m_entrySize", "DEL SingleVariableDeclaration", "DEL SimpleName: reset", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: blockSize", "DEL SimpleName: String", "DEL Javadoc", "DEL TextElement: stream, block size and record sizes.", "DEL PrimitiveType: boolean", "DEL TextElement:  <a href=\"mailto:time@ice.com\">Timothy Gerard Endres</a>", "DEL TagElement", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL TagElement", "DEL Javadoc", "DEL PrimitiveType: int", "DEL SimpleName: m_buffer", "DEL Modifier: public", "DEL TextElement: Construct a TarInputStream using specified input", "DEL SimpleName: m_debug", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL TagElement: @author", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL MethodDeclaration", "DEL Block", "DEL ArrayType: byte[]", "DEL TextElement: stream, block size and default record sizes.", "DEL SimpleName: newBuffer", "DEL SimpleName: DEFAULT_BLOCKSIZE", "DEL VariableDeclarationStatement", "DEL FieldDeclaration", "DEL Assignment: =", "DEL SimpleName: longName", "DEL TagElement: @see", "DEL SimpleName: size", "DEL SimpleName: newLength", "DEL SimpleName: m_readBuf", "DEL Modifier: final", "DEL SimpleName: println", "DEL SimpleType: IOException", "DEL TagElement: @version", "DEL SimpleName: input", "DEL SimpleName: size", "DEL PrimitiveType: int", "DEL SimpleName: debug", "DEL TagElement: @return", "DEL CastExpression", "DEL TextElement:  $Revision: 1.3 $ $Date: 2003/10/13 07:01:15 $", "DEL NumberLiteral: 0", "DEL SimpleName: TarEntry", "DEL MethodDeclaration", "DEL Dimension", "DEL SimpleName: size", "DEL Modifier: public", "DEL TextElement:  stream to create TarInputStream from", "DEL Block", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: input", "DEL TextElement: Since we do not support marking just yet, we do nothing.", "DEL MethodInvocation", "DEL PrimitiveType: byte", "DEL ConstructorInvocation", "DEL NumberLiteral: 1", "DEL Block", "DEL TextElement: end of the archive has been reached.", "DEL TextElement: output stream.", "DEL ArrayType: byte[]", "DEL InfixExpression: ==", "DEL TextElement: Copies the contents of the current tar archive entry directly into an", "DEL SimpleName: m_entryOffset", "DEL SimpleName: m_buffer", "DEL SimpleName: System", "DEL Assignment: =", "DEL PrimitiveType: byte", "DEL ExpressionStatement", "DEL ParenthesizedExpression", "DEL SimpleName: skipBuf", "DEL SimpleType: StringBuffer", "DEL SimpleName: totalRead", "DEL SimpleName: position", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: read", "DEL SimpleName: IOException", "DEL SimpleName: recordLength", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: buffer", "DEL InfixExpression: >", "DEL Modifier: final", "DEL NumberLiteral: 8", "DEL MethodInvocation", "DEL TextElement: data, not the entire archive, and will stop at the end of the current", "DEL SimpleName: output", "DEL VariableDeclarationStatement", "DEL SimpleName: IOException", "DEL SimpleName: m_debug", "DEL Assignment: +=", "DEL TagElement: @exception", "DEL QualifiedName: TarBuffer.DEFAULT_RECORDSIZE", "DEL Assignment: =", "DEL SimpleName: m_entryOffset", "DEL PrimitiveType: int", "DEL Block", "DEL SimpleName: close", "DEL SimpleType: FilterInputStream", "DEL TextElement:  The limit to mark.", "DEL PrimitiveType: int", "DEL TagElement: @return", "DEL SimpleName: arraycopy", "DEL TagElement: @return", "DEL TextElement: the boundaries of the current entry in the archive and will deal with", "DEL Block", "DEL SimpleName: readRecord", "DEL SimpleName: buffer", "DEL Javadoc", "DEL ExpressionStatement", "DEL TextElement: read( byte[], int, int ).", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: IOException", "DEL SingleVariableDeclaration", "DEL TagElement: @see", "DEL SimpleName: totalRead", "DEL ExpressionStatement", "DEL Assignment: +=", "DEL FieldDeclaration", "DEL NumberLiteral: 1", "DEL SimpleName: headerBuf", "DEL PrimitiveType: int", "DEL SimpleName: size", "DEL PrimitiveType: int", "DEL SimpleType: String", "DEL SimpleName: buffer", "DEL SimpleName: message", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleName: m_oneBuf", "DEL ArrayAccess", "DEL SimpleName: recordSize", "DEL Assignment: =", "DEL Dimension", "DEL SimpleName: size", "DEL IfStatement", "DEL SimpleName: size", "DEL TextElement:  the block size to use", "DEL SimpleName: arraycopy", "DEL SimpleName: position", "DEL SimpleName: input", "DEL TextElement:  when an IO error causes operation to fail", "DEL InfixExpression: +", "DEL SimpleName: headerBuf", "DEL SimpleType: String", "DEL SimpleName: m_currEntry", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: skip", "DEL VariableDeclarationStatement", "DEL TagElement: @exception", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: numRead", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL SimpleName: debug", "DEL SimpleName: numToRead", "DEL SimpleName: TarBuffer", "DEL SimpleName: numRead", "DEL VariableDeclarationFragment", "DEL SimpleName: position", "DEL WhileStatement", "DEL SimpleName: numToSkip", "DEL SimpleName: getRecordSize", "DEL Modifier: final", "DEL SimpleName: newLength", "DEL VariableDeclarationFragment", "DEL SimpleName: TarEntry", "DEL MethodInvocation", "DEL PrimitiveType: byte", "DEL MethodDeclaration", "DEL SimpleName: num", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL TextElement: read( byte[], int, int ).", "DEL NumberLiteral: 1024", "DEL IfStatement", "DEL MethodInvocation", "DEL TextElement: Get the record size being used by this stream's TarBuffer.", "DEL ExpressionStatement", "DEL TagElement", "DEL Block", "DEL SimpleName: headerBuf", "DEL SimpleType: OutputStream", "DEL NullLiteral", "DEL ExpressionStatement", "DEL SimpleName: numToRead", "DEL InfixExpression: !=", "DEL BooleanLiteral: true", "DEL NumberLiteral: 0", "DEL Modifier: protected", "DEL MethodInvocation", "DEL SimpleName: m_debug", "DEL TextElement: the header of the next entry, and read the header and instantiate a new", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: m_currEntry", "DEL SimpleName: TarEntry", "DEL PrimitiveType: int", "DEL SimpleName: buffer", "DEL VariableDeclarationFragment", "DEL Block", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: close", "DEL SimpleName: System", "DEL Block", "DEL SimpleName: rec", "DEL Assignment: =", "DEL NumberLiteral: 1", "DEL PrimitiveType: int", "DEL SimpleName: numRead", "DEL SingleVariableDeclaration", "DEL PrimitiveType: void", "DEL Modifier: public", "DEL SimpleName: read", "DEL TagElement: @param", "DEL SimpleName: debug", "DEL SimpleType: IOException", "DEL Javadoc", "DEL TagElement: @return", "DEL ArrayType: byte[]", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL SimpleName: m_currEntry", "DEL Assignment: =", "DEL SimpleName: debug", "DEL QualifiedName: m_readBuf.length", "DEL TextElement: Reads bytes from the current tar archive entry. This method is aware of", "DEL SimpleName: recordSize", "DEL QualifiedName: m_readBuf.length", "DEL ArrayCreation", "DEL SingleVariableDeclaration", "DEL SimpleName: m_readBuf", "DEL SimpleName: m_entrySize", "DEL TextElement: Construct a TarInputStream using specified input", "DEL VariableDeclarationFragment", "DEL TagElement: @see", "DEL IfStatement", "DEL SimpleName: size", "DEL BreakStatement", "DEL TextElement: stream and default block and record sizes.", "DEL IfStatement", "DEL TagElement: @param", "DEL PrimitiveType: boolean", "DEL SimpleName: m_entryOffset", "DEL SimpleName: numToSkip", "DEL TagElement", "DEL SimpleName: m_currEntry", "DEL SimpleName: numToRead", "DEL SimpleName: message", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: write", "DEL SimpleName: m_readBuf", "DEL TextElement:  the record size to use", "DEL TextElement:  stream to create TarInputStream from", "DEL InfixExpression: &&", "DEL WhileStatement", "DEL StringLiteral: \"TarInputStream: SKIP currENTRY '\"", "DEL InfixExpression: >", "DEL ArrayAccess", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL TextElement:  when an IO error causes operation to fail", "DEL Block", "DEL TextElement:  when an IO error causes operation to fail", "DEL SimpleName: skipBuf", "DEL SimpleName: read", "DEL TagElement: @param", "DEL IfStatement", "DEL IfStatement", "DEL Block", "DEL SimpleName: headerBuf", "DEL SimpleName: m_entrySize", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: isEOFRecord", "DEL Block", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL Block", "DEL SimpleName: numToRead", "DEL SimpleName: recordLength", "DEL ReturnStatement", "DEL SimpleName: m_buffer", "DEL Modifier: final", "DEL MethodDeclaration", "DEL Dimension", "DEL SimpleName: numToRead", "DEL TextElement:  The byte read, or -1 at EOF.", "DEL NumberLiteral: 0", "DEL SimpleName: blockSize", "DEL FieldDeclaration", "DEL SimpleName: m_entrySize", "DEL InfixExpression: ==", "DEL QualifiedName: System.err", "DEL TextElement: Reads bytes from the current tar archive entry. This method simply calls", "DEL SimpleName: getName", "DEL StringLiteral: \"unexpected EOF with \"", "DEL ExpressionStatement", "DEL SimpleName: rec", "DEL ReturnStatement", "DEL SimpleType: IOException", "DEL NumberLiteral: 259", "DEL SimpleName: numToSkip", "DEL TextElement:  The new Debug value", "DEL Modifier: final", "DEL SimpleName: IOException", "DEL SimpleName: System", "DEL Assignment: +=", "DEL SimpleName: m_hasHitEOF", "DEL IfStatement", "DEL BreakStatement", "DEL NumberLiteral: 0", "DEL TagElement: @exception", "DEL InfixExpression: -", "DEL SimpleName: System", "DEL SimpleName: buffer", "DEL Block", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL SimpleType: TarEntry", "DEL Dimension", "DEL ArrayType: byte[]", "DEL SimpleName: length", "DEL SimpleName: size", "DEL InfixExpression: +", "DEL SimpleType: IOException", "DEL SingleVariableDeclaration", "DEL SimpleName: TarEntry", "DEL SimpleName: getRecordSize", "DEL QualifiedName: skipBuf.length", "DEL SimpleName: debug"]}]}}, {"TarInputStream_diff": {"operations": ["Delete QualifiedName: org.apache.commons.io.compress.tar(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.io.FilterInputStream(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.io.IOException(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.io.InputStream(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.io.OutputStream(8)", "Delete ImportDeclaration(9)", "Delete TextElement: The TarInputStream reads a UNIX tar archive as an InputStream. methods are(10)", "Delete TextElement: provided to position at each successive entry in the archive, and the read(11)", "Delete TextElement: each entry as a normal input stream using read().(12)", "Delete TagElement(13)", "Delete TextElement:  <a href=\"mailto:time@ice.com\">Timothy Gerard Endres</a>(14)", "Delete TagElement: @author(15)", "Delete TextElement:  <a href=\"mailto:stefano@apache.org\">Stefano Mazzocchi</a>(16)", "Delete TagElement: @author(17)", "Delete TextElement:  <a href=\"mailto:peter@apache.org\">Peter Donald</a>(18)", "Delete TagElement: @author(19)", "Delete TextElement:  $Revision: 1.3 $ $Date: 2003/10/13 07:01:15 $(20)", "Delete TagElement: @version(21)", "Delete SimpleName: TarInputStream(22)", "Delete TagElement: @see(23)", "Delete SimpleName: TarEntry(24)", "Delete TagElement: @see(25)", "Delete Javadoc(26)", "Delete Modifier: public(27)", "Delete SimpleName: TarInputStream(28)", "Delete SimpleName: FilterInputStream(29)", "Delete SimpleType: FilterInputStream(30)", "Delete Modifier: private(31)", "Delete SimpleName: TarBuffer(32)", "Delete SimpleType: TarBuffer(33)", "Delete SimpleName: m_buffer(34)", "Delete VariableDeclarationFragment(35)", "Delete FieldDeclaration(36)", "Delete Modifier: private(37)", "Delete SimpleName: TarEntry(38)", "Delete SimpleType: TarEntry(39)", "Delete SimpleName: m_currEntry(40)", "Delete VariableDeclarationFragment(41)", "Delete FieldDeclaration(42)", "Delete Modifier: private(43)", "Delete PrimitiveType: boolean(44)", "Delete SimpleName: m_debug(45)", "Delete VariableDeclarationFragment(46)", "Delete FieldDeclaration(47)", "Delete Modifier: private(48)", "Delete PrimitiveType: int(49)", "Delete SimpleName: m_entryOffset(50)", "Delete VariableDeclarationFragment(51)", "Delete FieldDeclaration(52)", "Delete Modifier: private(53)", "Delete PrimitiveType: int(54)", "Delete SimpleName: m_entrySize(55)", "Delete VariableDeclarationFragment(56)", "Delete FieldDeclaration(57)", "Delete Modifier: private(58)", "Delete PrimitiveType: boolean(59)", "Delete SimpleName: m_hasHitEOF(60)", "Delete VariableDeclarationFragment(61)", "Delete FieldDeclaration(62)", "Delete Modifier: private(63)", "Delete PrimitiveType: byte(64)", "Delete Dimension(65)", "Delete ArrayType: byte[](66)", "Delete SimpleName: m_oneBuf(67)", "Delete VariableDeclarationFragment(68)", "Delete FieldDeclaration(69)", "Delete Modifier: private(70)", "Delete PrimitiveType: byte(71)", "Delete Dimension(72)", "Delete ArrayType: byte[](73)", "Delete SimpleName: m_readBuf(74)", "Delete VariableDeclarationFragment(75)", "Delete FieldDeclaration(76)", "Delete TextElement: Construct a TarInputStream using specified input(77)", "Delete TextElement: stream and default block and record sizes.(78)", "Delete TagElement(79)", "Delete SimpleName: input(80)", "Delete TextElement:  stream to create TarInputStream from(81)", "Delete TagElement: @param(82)", "Delete SimpleName: TarBuffer(83)", "Delete SimpleName: DEFAULT_BLOCKSIZE(84)", "Delete MemberRef(85)", "Delete TagElement: @see(86)", "Delete SimpleName: TarBuffer(87)", "Delete SimpleName: DEFAULT_RECORDSIZE(88)", "Delete MemberRef(89)", "Delete TagElement: @see(90)", "Delete Javadoc(91)", "Delete Modifier: public(92)", "Delete SimpleName: TarInputStream(93)", "Delete Modifier: final(94)", "Delete SimpleName: InputStream(95)", "Delete SimpleType: InputStream(96)", "Delete SimpleName: input(97)", "Delete SingleVariableDeclaration(98)", "Delete SimpleName: input(99)", "Delete QualifiedName: TarBuffer.DEFAULT_BLOCKSIZE(100)", "Delete QualifiedName: TarBuffer.DEFAULT_RECORDSIZE(101)", "Delete ConstructorInvocation(102)", "Delete Block(103)", "Delete MethodDeclaration(104)", "Delete TextElement: Construct a TarInputStream using specified input(105)", "Delete TextElement: stream, block size and default record sizes.(106)", "Delete TagElement(107)", "Delete SimpleName: input(108)", "Delete TextElement:  stream to create TarInputStream from(109)", "Delete TagElement: @param(110)", "Delete SimpleName: blockSize(111)", "Delete TextElement:  the block size to use(112)", "Delete TagElement: @param(113)", "Delete SimpleName: TarBuffer(114)", "Delete SimpleName: DEFAULT_RECORDSIZE(115)", "Delete MemberRef(116)", "Delete TagElement: @see(117)", "Delete Javadoc(118)", "Delete Modifier: public(119)", "Delete SimpleName: TarInputStream(120)", "Delete Modifier: final(121)", "Delete SimpleName: InputStream(122)", "Delete SimpleType: InputStream(123)", "Delete SimpleName: input(124)", "Delete SingleVariableDeclaration(125)", "Delete Modifier: final(126)", "Delete PrimitiveType: int(127)", "Delete SimpleName: blockSize(128)", "Delete SingleVariableDeclaration(129)", "Delete SimpleName: input(130)", "Delete SimpleName: blockSize(131)", "Delete QualifiedName: TarBuffer.DEFAULT_RECORDSIZE(132)", "Delete ConstructorInvocation(133)", "Delete Block(134)", "Delete MethodDeclaration(135)", "Delete TextElement: Construct a TarInputStream using specified input(136)", "Delete TextElement: stream, block size and record sizes.(137)", "Delete TagElement(138)", "Delete SimpleName: input(139)", "Delete TextElement:  stream to create TarInputStream from(140)", "Delete TagElement: @param(141)", "Delete SimpleName: blockSize(142)", "Delete TextElement:  the block size to use(143)", "Delete TagElement: @param(144)", "Delete SimpleName: recordSize(145)", "Delete TextElement:  the record size to use(146)", "Delete TagElement: @param(147)", "Delete Javadoc(148)", "Delete Modifier: public(149)", "Delete SimpleName: TarInputStream(150)", "Delete Modifier: final(151)", "Delete SimpleName: InputStream(152)", "Delete SimpleType: InputStream(153)", "Delete SimpleName: input(154)", "Delete SingleVariableDeclaration(155)", "Delete Modifier: final(156)", "Delete PrimitiveType: int(157)", "Delete SimpleName: blockSize(158)", "Delete SingleVariableDeclaration(159)", "Delete Modifier: final(160)", "Delete PrimitiveType: int(161)", "Delete SimpleName: recordSize(162)", "Delete SingleVariableDeclaration(163)", "Delete SimpleName: input(164)", "Delete SuperConstructorInvocation(165)", "Delete SimpleName: m_buffer(166)", "Delete SimpleName: TarBuffer(167)", "Delete SimpleType: TarBuffer(168)", "Delete SimpleName: input(169)", "Delete SimpleName: blockSize(170)", "Delete SimpleName: recordSize(171)", "Delete ClassInstanceCreation(172)", "Delete Assignment: =(173)", "Delete ExpressionStatement(174)", "Delete SimpleName: m_oneBuf(175)", "Delete PrimitiveType: byte(176)", "Delete Dimension(177)", "Delete ArrayType: byte[](178)", "Delete NumberLiteral: 1(179)", "Delete ArrayCreation(180)", "Delete Assignment: =(181)", "Delete ExpressionStatement(182)", "Delete Block(183)", "Delete MethodDeclaration(184)", "Delete TextElement: Sets the debugging flag.(185)", "Delete TagElement(186)", "Delete SimpleName: debug(187)", "Delete TextElement:  The new Debug value(188)", "Delete TagElement: @param(189)", "Delete Javadoc(190)", "Delete Modifier: public(191)", "Delete PrimitiveType: void(192)", "Delete SimpleName: setDebug(193)", "Delete Modifier: final(194)", "Delete PrimitiveType: boolean(195)", "Delete SimpleName: debug(196)", "Delete SingleVariableDeclaration(197)", "Delete SimpleName: m_debug(198)", "Delete SimpleName: debug(199)", "Delete Assignment: =(200)", "Delete ExpressionStatement(201)", "Delete SimpleName: m_buffer(202)", "Delete SimpleName: setDebug(203)", "Delete SimpleName: debug(204)", "Delete MethodInvocation(205)", "Delete ExpressionStatement(206)", "Delete Block(207)", "Delete MethodDeclaration(208)", "Delete TextElement: Get the next entry in this tar archive. This will skip over any remaining(209)", "Delete TextElement: data in the current entry, if there is one, and place the input stream at(210)", "Delete TextElement: the header of the next entry, and read the header and instantiate a new(211)", "Delete TextElement: TarEntry from the header bytes and return that entry. If there are no(212)", "Delete TextElement: more entries in the archive, null will be returned to indicate that the(213)", "Delete TextElement: end of the archive has been reached.(214)", "Delete TagElement(215)", "Delete TextElement:  The next TarEntry in the archive, or null.(216)", "Delete TagElement: @return(217)", "Delete SimpleName: IOException(218)", "Delete TextElement:  Description of Exception(219)", "Delete TagElement: @exception(220)", "Delete Javadoc(221)", "Delete Modifier: public(222)", "Delete SimpleName: TarEntry(223)", "Delete SimpleType: TarEntry(224)", "Delete SimpleName: getNextEntry(225)", "Delete SimpleName: IOException(226)", "Delete SimpleType: IOException(227)", "Delete SimpleName: m_hasHitEOF(228)", "Delete NullLiteral(229)", "Delete ReturnStatement(230)", "Delete Block(231)", "Delete IfStatement(232)", "Delete SimpleName: m_currEntry(233)", "Delete NullLiteral(234)", "Delete InfixExpression: !=(235)", "Delete Modifier: final(236)", "Delete PrimitiveType: int(237)", "Delete SimpleName: numToSkip(238)", "Delete SimpleName: m_entrySize(239)", "Delete SimpleName: m_entryOffset(240)", "Delete InfixExpression: -(241)", "Delete VariableDeclarationFragment(242)", "Delete VariableDeclarationStatement(243)", "Delete SimpleName: m_debug(244)", "Delete Modifier: final(245)", "Delete SimpleName: String(246)", "Delete SimpleType: String(247)", "Delete SimpleName: message(248)", "Delete StringLiteral: \"TarInputStream: SKIP currENTRY '\"(249)", "Delete SimpleName: m_currEntry(250)", "Delete SimpleName: getName(251)", "Delete MethodInvocation(252)", "Delete StringLiteral: \"' SZ \"(253)", "Delete SimpleName: m_entrySize(254)", "Delete StringLiteral: \" OFF \"(255)", "Delete SimpleName: m_entryOffset(256)", "Delete StringLiteral: \"  skipping \"(257)", "Delete SimpleName: numToSkip(258)", "Delete StringLiteral: \" bytes\"(259)", "Delete InfixExpression: +(260)", "Delete VariableDeclarationFragment(261)", "Delete VariableDeclarationStatement(262)", "Delete SimpleName: debug(263)", "Delete SimpleName: message(264)", "Delete MethodInvocation(265)", "Delete ExpressionStatement(266)", "Delete Block(267)", "Delete IfStatement(268)", "Delete SimpleName: numToSkip(269)", "Delete NumberLiteral: 0(270)", "Delete InfixExpression: >(271)", "Delete SimpleName: skip(272)", "Delete SimpleName: numToSkip(273)", "Delete MethodInvocation(274)", "Delete ExpressionStatement(275)", "Delete Block(276)", "Delete IfStatement(277)", "Delete SimpleName: m_readBuf(278)", "Delete NullLiteral(279)", "Delete Assignment: =(280)", "Delete ExpressionStatement(281)", "Delete Block(282)", "Delete IfStatement(283)", "Delete Modifier: final(284)", "Delete PrimitiveType: byte(285)", "Delete Dimension(286)", "Delete ArrayType: byte[](287)", "Delete SimpleName: headerBuf(288)", "Delete SimpleName: m_buffer(289)", "Delete SimpleName: readRecord(290)", "Delete MethodInvocation(291)", "Delete VariableDeclarationFragment(292)", "Delete VariableDeclarationStatement(293)", "Delete SimpleName: headerBuf(294)", "Delete NullLiteral(295)", "Delete InfixExpression: ==(296)", "Delete SimpleName: m_debug(297)", "Delete SimpleName: debug(298)", "Delete StringLiteral: \"READ NULL RECORD\"(299)", "Delete MethodInvocation(300)", "Delete ExpressionStatement(301)", "Delete Block(302)", "Delete IfStatement(303)", "Delete SimpleName: m_hasHitEOF(304)", "Delete BooleanLiteral: true(305)", "Delete Assignment: =(306)", "Delete ExpressionStatement(307)", "Delete Block(308)", "Delete SimpleName: m_buffer(309)", "Delete SimpleName: isEOFRecord(310)", "Delete SimpleName: headerBuf(311)", "Delete MethodInvocation(312)", "Delete SimpleName: m_debug(313)", "Delete SimpleName: debug(314)", "Delete StringLiteral: \"READ EOF RECORD\"(315)", "Delete MethodInvocation(316)", "Delete ExpressionStatement(317)", "Delete Block(318)", "Delete IfStatement(319)", "Delete SimpleName: m_hasHitEOF(320)", "Delete BooleanLiteral: true(321)", "Delete Assignment: =(322)", "Delete ExpressionStatement(323)", "Delete Block(324)", "Delete IfStatement(325)", "Delete IfStatement(326)", "Delete SimpleName: m_hasHitEOF(327)", "Delete SimpleName: m_currEntry(328)", "Delete NullLiteral(329)", "Delete Assignment: =(330)", "Delete ExpressionStatement(331)", "Delete Block(332)", "Delete SimpleName: m_currEntry(333)", "Delete SimpleName: TarEntry(334)", "Delete SimpleType: TarEntry(335)", "Delete SimpleName: headerBuf(336)", "Delete ClassInstanceCreation(337)", "Delete Assignment: =(338)", "Delete ExpressionStatement(339)", "Delete SimpleName: headerBuf(340)", "Delete NumberLiteral: 257(341)", "Delete ArrayAccess(342)", "Delete CharacterLiteral: 'u'(343)", "Delete InfixExpression: ==(344)", "Delete SimpleName: headerBuf(345)", "Delete NumberLiteral: 258(346)", "Delete ArrayAccess(347)", "Delete CharacterLiteral: 's'(348)", "Delete InfixExpression: ==(349)", "Delete InfixExpression: &&(350)", "Delete SimpleName: headerBuf(351)", "Delete NumberLiteral: 259(352)", "Delete ArrayAccess(353)", "Delete CharacterLiteral: 't'(354)", "Delete InfixExpression: ==(355)", "Delete InfixExpression: &&(356)", "Delete SimpleName: headerBuf(357)", "Delete NumberLiteral: 260(358)", "Delete ArrayAccess(359)", "Delete CharacterLiteral: 'a'(360)", "Delete InfixExpression: ==(361)", "Delete InfixExpression: &&(362)", "Delete SimpleName: headerBuf(363)", "Delete NumberLiteral: 261(364)", "Delete ArrayAccess(365)", "Delete CharacterLiteral: 'r'(366)", "Delete InfixExpression: ==(367)", "Delete InfixExpression: &&(368)", "Delete ParenthesizedExpression(369)", "Delete PrefixExpression: !(370)", "Delete Block(371)", "Delete IfStatement(372)", "Delete SimpleName: m_debug(373)", "Delete Modifier: final(374)", "Delete SimpleName: String(375)", "Delete SimpleType: String(376)", "Delete SimpleName: message(377)", "Delete StringLiteral: \"TarInputStream: SET CURRENTRY '\"(378)", "Delete SimpleName: m_currEntry(379)", "Delete SimpleName: getName(380)", "Delete MethodInvocation(381)", "Delete StringLiteral: \"' size = \"(382)", "Delete SimpleName: m_currEntry(383)", "Delete SimpleName: getSize(384)", "Delete MethodInvocation(385)", "Delete InfixExpression: +(386)", "Delete VariableDeclarationFragment(387)", "Delete VariableDeclarationStatement(388)", "Delete SimpleName: debug(389)", "Delete SimpleName: message(390)", "Delete MethodInvocation(391)", "Delete ExpressionStatement(392)", "Delete Block(393)", "Delete IfStatement(394)", "Delete SimpleName: m_entryOffset(395)", "Delete NumberLiteral: 0(396)", "Delete Assignment: =(397)", "Delete ExpressionStatement(398)", "Delete SimpleName: m_entrySize(399)", "Delete PrimitiveType: int(400)", "Delete SimpleName: m_currEntry(401)", "Delete SimpleName: getSize(402)", "Delete MethodInvocation(403)", "Delete CastExpression(404)", "Delete Assignment: =(405)", "Delete ExpressionStatement(406)", "Delete Block(407)", "Delete IfStatement(408)", "Delete NullLiteral(409)", "Delete SimpleName: m_currEntry(410)", "Delete InfixExpression: !=(411)", "Delete SimpleName: m_currEntry(412)", "Delete SimpleName: isGNULongNameEntry(413)", "Delete MethodInvocation(414)", "Delete InfixExpression: &&(415)", "Delete Modifier: final(416)", "Delete SimpleName: StringBuffer(417)", "Delete SimpleType: StringBuffer(418)", "Delete SimpleName: longName(419)", "Delete SimpleName: StringBuffer(420)", "Delete SimpleType: StringBuffer(421)", "Delete ClassInstanceCreation(422)", "Delete VariableDeclarationFragment(423)", "Delete VariableDeclarationStatement(424)", "Delete Modifier: final(425)", "Delete PrimitiveType: byte(426)", "Delete Dimension(427)", "Delete ArrayType: byte[](428)", "Delete SimpleName: buffer(429)", "Delete PrimitiveType: byte(430)", "Delete Dimension(431)", "Delete ArrayType: byte[](432)", "Delete NumberLiteral: 256(433)", "Delete ArrayCreation(434)", "Delete VariableDeclarationFragment(435)", "Delete VariableDeclarationStatement(436)", "Delete PrimitiveType: int(437)", "Delete SimpleName: length(438)", "Delete NumberLiteral: 0(439)", "Delete VariableDeclarationFragment(440)", "Delete VariableDeclarationStatement(441)", "Delete SimpleName: length(442)", "Delete SimpleName: read(443)", "Delete SimpleName: buffer(444)", "Delete MethodInvocation(445)", "Delete Assignment: =(446)", "Delete ParenthesizedExpression(447)", "Delete NumberLiteral: 0(448)", "Delete InfixExpression: >=(449)", "Delete Modifier: final(450)", "Delete SimpleName: String(451)", "Delete SimpleType: String(452)", "Delete SimpleName: str(453)", "Delete SimpleName: String(454)", "Delete SimpleType: String(455)", "Delete SimpleName: buffer(456)", "Delete NumberLiteral: 0(457)", "Delete SimpleName: length(458)", "Delete ClassInstanceCreation(459)", "Delete VariableDeclarationFragment(460)", "Delete VariableDeclarationStatement(461)", "Delete SimpleName: longName(462)", "Delete SimpleName: append(463)", "Delete SimpleName: str(464)", "Delete MethodInvocation(465)", "Delete ExpressionStatement(466)", "Delete Block(467)", "Delete WhileStatement(468)", "Delete SimpleName: getNextEntry(469)", "Delete MethodInvocation(470)", "Delete ExpressionStatement(471)", "Delete SimpleName: m_currEntry(472)", "Delete SimpleName: setName(473)", "Delete SimpleName: longName(474)", "Delete SimpleName: toString(475)", "Delete MethodInvocation(476)", "Delete MethodInvocation(477)", "Delete ExpressionStatement(478)", "Delete Block(479)", "Delete IfStatement(480)", "Delete SimpleName: m_currEntry(481)", "Delete ReturnStatement(482)", "Delete Block(483)", "Delete MethodDeclaration(484)", "Delete TextElement: Get the record size being used by this stream's TarBuffer.(485)", "Delete TagElement(486)", "Delete TextElement:  The TarBuffer record size.(487)", "Delete TagElement: @return(488)", "Delete Javadoc(489)", "Delete Modifier: public(490)", "Delete PrimitiveType: int(491)", "Delete SimpleName: getRecordSize(492)", "Delete SimpleName: m_buffer(493)", "Delete SimpleName: getRecordSize(494)", "Delete MethodInvocation(495)", "Delete ReturnStatement(496)", "Delete Block(497)", "Delete MethodDeclaration(498)", "Delete TextElement: Get the available data that can be read from the current entry in the(499)", "Delete TextElement: archive. This does not indicate how much data is left in the entire(500)", "Delete TextElement: archive, only in the current entry. This value is determined from the(501)", "Delete TextElement: entry's size header field and the amount of data already read from the(502)", "Delete TextElement: current entry.(503)", "Delete TagElement(504)", "Delete TextElement:  The number of available bytes for the current entry.(505)", "Delete TagElement: @return(506)", "Delete SimpleName: IOException(507)", "Delete TextElement:  when an IO error causes operation to fail(508)", "Delete TagElement: @exception(509)", "Delete Javadoc(510)", "Delete Modifier: public(511)", "Delete PrimitiveType: int(512)", "Delete SimpleName: available(513)", "Delete SimpleName: IOException(514)", "Delete SimpleType: IOException(515)", "Delete SimpleName: m_entrySize(516)", "Delete SimpleName: m_entryOffset(517)", "Delete InfixExpression: -(518)", "Delete ReturnStatement(519)", "Delete Block(520)", "Delete MethodDeclaration(521)", "Delete TextElement: Closes this stream. Calls the TarBuffer's close() method.(522)", "Delete TagElement(523)", "Delete SimpleName: IOException(524)", "Delete TextElement:  when an IO error causes operation to fail(525)", "Delete TagElement: @exception(526)", "Delete Javadoc(527)", "Delete Modifier: public(528)", "Delete PrimitiveType: void(529)", "Delete SimpleName: close(530)", "Delete SimpleName: IOException(531)", "Delete SimpleType: IOException(532)", "Delete SimpleName: m_buffer(533)", "Delete SimpleName: close(534)", "Delete MethodInvocation(535)", "Delete ExpressionStatement(536)", "Delete Block(537)", "Delete MethodDeclaration(538)", "Delete TextElement: Copies the contents of the current tar archive entry directly into an(539)", "Delete TextElement: output stream.(540)", "Delete TagElement(541)", "Delete SimpleName: output(542)", "Delete TextElement:  The OutputStream into which to write the entry's data.(543)", "Delete TagElement: @param(544)", "Delete SimpleName: IOException(545)", "Delete TextElement:  when an IO error causes operation to fail(546)", "Delete TagElement: @exception(547)", "Delete Javadoc(548)", "Delete Modifier: public(549)", "Delete PrimitiveType: void(550)", "Delete SimpleName: copyEntryContents(551)", "Delete Modifier: final(552)", "Delete SimpleName: OutputStream(553)", "Delete SimpleType: OutputStream(554)", "Delete SimpleName: output(555)", "Delete SingleVariableDeclaration(556)", "Delete SimpleName: IOException(557)", "Delete SimpleType: IOException(558)", "Delete Modifier: final(559)", "Delete PrimitiveType: byte(560)", "Delete Dimension(561)", "Delete ArrayType: byte[](562)", "Delete SimpleName: buffer(563)", "Delete PrimitiveType: byte(564)", "Delete Dimension(565)", "Delete ArrayType: byte[](566)", "Delete NumberLiteral: 32(567)", "Delete NumberLiteral: 1024(568)", "Delete InfixExpression: *(569)", "Delete ArrayCreation(570)", "Delete VariableDeclarationFragment(571)", "Delete VariableDeclarationStatement(572)", "Delete BooleanLiteral: true(573)", "Delete Modifier: final(574)", "Delete PrimitiveType: int(575)", "Delete SimpleName: numRead(576)", "Delete SimpleName: read(577)", "Delete SimpleName: buffer(578)", "Delete NumberLiteral: 0(579)", "Delete QualifiedName: buffer.length(580)", "Delete MethodInvocation(581)", "Delete VariableDeclarationFragment(582)", "Delete VariableDeclarationStatement(583)", "Delete SimpleName: numRead(584)", "Delete NumberLiteral: 1(585)", "Delete PrefixExpression: -(586)", "Delete InfixExpression: ==(587)", "Delete BreakStatement(588)", "Delete Block(589)", "Delete IfStatement(590)", "Delete SimpleName: output(591)", "Delete SimpleName: write(592)", "Delete SimpleName: buffer(593)", "Delete NumberLiteral: 0(594)", "Delete SimpleName: numRead(595)", "Delete MethodInvocation(596)", "Delete ExpressionStatement(597)", "Delete Block(598)", "Delete WhileStatement(599)", "Delete Block(600)", "Delete MethodDeclaration(601)", "Delete TextElement: Since we do not support marking just yet, we do nothing.(602)", "Delete TagElement(603)", "Delete SimpleName: markLimit(604)", "Delete TextElement:  The limit to mark.(605)", "Delete TagElement: @param(606)", "Delete Javadoc(607)", "Delete Modifier: public(608)", "Delete PrimitiveType: void(609)", "Delete SimpleName: mark(610)", "Delete PrimitiveType: int(611)", "Delete SimpleName: markLimit(612)", "Delete SingleVariableDeclaration(613)", "Delete Block(614)", "Delete MethodDeclaration(615)", "Delete TextElement: Since we do not support marking just yet, we return false.(616)", "Delete TagElement(617)", "Delete TextElement:  False.(618)", "Delete TagElement: @return(619)", "Delete Javadoc(620)", "Delete Modifier: public(621)", "Delete PrimitiveType: boolean(622)", "Delete SimpleName: markSupported(623)", "Delete BooleanLiteral: false(624)", "Delete ReturnStatement(625)", "Delete Block(626)", "Delete MethodDeclaration(627)", "Delete TextElement: Reads a byte from the current tar archive entry. This method simply calls(628)", "Delete TextElement: read( byte[], int, int ).(629)", "Delete TagElement(630)", "Delete TextElement:  The byte read, or -1 at EOF.(631)", "Delete TagElement: @return(632)", "Delete SimpleName: IOException(633)", "Delete TextElement:  when an IO error causes operation to fail(634)", "Delete TagElement: @exception(635)", "Delete Javadoc(636)", "Delete Modifier: public(637)", "Delete PrimitiveType: int(638)", "Delete SimpleName: read(639)", "Delete SimpleName: IOException(640)", "Delete SimpleType: IOException(641)", "Delete Modifier: final(642)", "Delete PrimitiveType: int(643)", "Delete SimpleName: num(644)", "Delete SimpleName: read(645)", "Delete SimpleName: m_oneBuf(646)", "Delete NumberLiteral: 0(647)", "Delete NumberLiteral: 1(648)", "Delete MethodInvocation(649)", "Delete VariableDeclarationFragment(650)", "Delete VariableDeclarationStatement(651)", "Delete SimpleName: num(652)", "Delete NumberLiteral: 1(653)", "Delete PrefixExpression: -(654)", "Delete InfixExpression: ==(655)", "Delete SimpleName: num(656)", "Delete ReturnStatement(657)", "Delete Block(658)", "Delete PrimitiveType: int(659)", "Delete SimpleName: m_oneBuf(660)", "Delete NumberLiteral: 0(661)", "Delete ArrayAccess(662)", "Delete CastExpression(663)", "Delete ReturnStatement(664)", "Delete Block(665)", "Delete IfStatement(666)", "Delete Block(667)", "Delete MethodDeclaration(668)", "Delete TextElement: Reads bytes from the current tar archive entry. This method simply calls(669)", "Delete TextElement: read( byte[], int, int ).(670)", "Delete TagElement(671)", "Delete SimpleName: buffer(672)", "Delete TextElement:  The buffer into which to place bytes read.(673)", "Delete TagElement: @param(674)", "Delete TextElement:  The number of bytes read, or -1 at EOF.(675)", "Delete TagElement: @return(676)", "Delete SimpleName: IOException(677)", "Delete TextElement:  when an IO error causes operation to fail(678)", "Delete TagElement: @exception(679)", "Delete Javadoc(680)", "Delete Modifier: public(681)", "Delete PrimitiveType: int(682)", "Delete SimpleName: read(683)", "Delete Modifier: final(684)", "Delete PrimitiveType: byte(685)", "Delete Dimension(686)", "Delete ArrayType: byte[](687)", "Delete SimpleName: buffer(688)", "Delete SingleVariableDeclaration(689)", "Delete SimpleName: IOException(690)", "Delete SimpleType: IOException(691)", "Delete SimpleName: read(692)", "Delete SimpleName: buffer(693)", "Delete NumberLiteral: 0(694)", "Delete QualifiedName: buffer.length(695)", "Delete MethodInvocation(696)", "Delete ReturnStatement(697)", "Delete Block(698)", "Delete MethodDeclaration(699)", "Delete TextElement: Reads bytes from the current tar archive entry. This method is aware of(700)", "Delete TextElement: the boundaries of the current entry in the archive and will deal with(701)", "Delete TextElement: them as if they were this stream's start and EOF.(702)", "Delete TagElement(703)", "Delete SimpleName: buffer(704)", "Delete TextElement:  The buffer into which to place bytes read.(705)", "Delete TagElement: @param(706)", "Delete SimpleName: offset(707)", "Delete TextElement:  The offset at which to place bytes read.(708)", "Delete TagElement: @param(709)", "Delete SimpleName: count(710)", "Delete TextElement:  The number of bytes to read.(711)", "Delete TagElement: @param(712)", "Delete TextElement:  The number of bytes read, or -1 at EOF.(713)", "Delete TagElement: @return(714)", "Delete SimpleName: IOException(715)", "Delete TextElement:  when an IO error causes operation to fail(716)", "Delete TagElement: @exception(717)", "Delete Javadoc(718)", "Delete Modifier: public(719)", "Delete PrimitiveType: int(720)", "Delete SimpleName: read(721)", "Delete Modifier: final(722)", "Delete PrimitiveType: byte(723)", "Delete Dimension(724)", "Delete ArrayType: byte[](725)", "Delete SimpleName: buffer(726)", "Delete SingleVariableDeclaration(727)", "Delete Modifier: final(728)", "Delete PrimitiveType: int(729)", "Delete SimpleName: offset(730)", "Delete SingleVariableDeclaration(731)", "Delete Modifier: final(732)", "Delete PrimitiveType: int(733)", "Delete SimpleName: count(734)", "Delete SingleVariableDeclaration(735)", "Delete SimpleName: IOException(736)", "Delete SimpleType: IOException(737)", "Delete PrimitiveType: int(738)", "Delete SimpleName: position(739)", "Delete SimpleName: offset(740)", "Delete VariableDeclarationFragment(741)", "Delete VariableDeclarationStatement(742)", "Delete PrimitiveType: int(743)", "Delete SimpleName: numToRead(744)", "Delete SimpleName: count(745)", "Delete VariableDeclarationFragment(746)", "Delete VariableDeclarationStatement(747)", "Delete PrimitiveType: int(748)", "Delete SimpleName: totalRead(749)", "Delete NumberLiteral: 0(750)", "Delete VariableDeclarationFragment(751)", "Delete VariableDeclarationStatement(752)", "Delete SimpleName: m_entryOffset(753)", "Delete SimpleName: m_entrySize(754)", "Delete InfixExpression: >=(755)", "Delete NumberLiteral: 1(756)", "Delete PrefixExpression: -(757)", "Delete ReturnStatement(758)", "Delete Block(759)", "Delete IfStatement(760)", "Delete SimpleName: numToRead(761)", "Delete SimpleName: m_entryOffset(762)", "Delete InfixExpression: +(763)", "Delete ParenthesizedExpression(764)", "Delete SimpleName: m_entrySize(765)", "Delete InfixExpression: >(766)", "Delete SimpleName: numToRead(767)", "Delete SimpleName: m_entrySize(768)", "Delete SimpleName: m_entryOffset(769)", "Delete InfixExpression: -(770)", "Delete ParenthesizedExpression(771)", "Delete Assignment: =(772)", "Delete ExpressionStatement(773)", "Delete Block(774)", "Delete IfStatement(775)", "Delete NullLiteral(776)", "Delete SimpleName: m_readBuf(777)", "Delete InfixExpression: !=(778)", "Delete Modifier: final(779)", "Delete PrimitiveType: int(780)", "Delete SimpleName: size(781)", "Delete SimpleName: numToRead(782)", "Delete QualifiedName: m_readBuf.length(783)", "Delete InfixExpression: >(784)", "Delete ParenthesizedExpression(785)", "Delete QualifiedName: m_readBuf.length(786)", "Delete SimpleName: numToRead(787)", "Delete ConditionalExpression(788)", "Delete VariableDeclarationFragment(789)", "Delete VariableDeclarationStatement(790)", "Delete SimpleName: System(791)", "Delete SimpleName: arraycopy(792)", "Delete SimpleName: m_readBuf(793)", "Delete NumberLiteral: 0(794)", "Delete SimpleName: buffer(795)", "Delete SimpleName: position(796)", "Delete SimpleName: size(797)", "Delete MethodInvocation(798)", "Delete ExpressionStatement(799)", "Delete SimpleName: size(800)", "Delete QualifiedName: m_readBuf.length(801)", "Delete InfixExpression: >=(802)", "Delete SimpleName: m_readBuf(803)", "Delete NullLiteral(804)", "Delete Assignment: =(805)", "Delete ExpressionStatement(806)", "Delete Block(807)", "Delete Modifier: final(808)", "Delete PrimitiveType: int(809)", "Delete SimpleName: newLength(810)", "Delete QualifiedName: m_readBuf.length(811)", "Delete SimpleName: size(812)", "Delete InfixExpression: -(813)", "Delete VariableDeclarationFragment(814)", "Delete VariableDeclarationStatement(815)", "Delete Modifier: final(816)", "Delete PrimitiveType: byte(817)", "Delete Dimension(818)", "Delete ArrayType: byte[](819)", "Delete SimpleName: newBuffer(820)", "Delete PrimitiveType: byte(821)", "Delete Dimension(822)", "Delete ArrayType: byte[](823)", "Delete SimpleName: newLength(824)", "Delete ArrayCreation(825)", "Delete VariableDeclarationFragment(826)", "Delete VariableDeclarationStatement(827)", "Delete SimpleName: System(828)", "Delete SimpleName: arraycopy(829)", "Delete SimpleName: m_readBuf(830)", "Delete SimpleName: size(831)", "Delete SimpleName: newBuffer(832)", "Delete NumberLiteral: 0(833)", "Delete SimpleName: newLength(834)", "Delete MethodInvocation(835)", "Delete ExpressionStatement(836)", "Delete SimpleName: m_readBuf(837)", "Delete SimpleName: newBuffer(838)", "Delete Assignment: =(839)", "Delete ExpressionStatement(840)", "Delete Block(841)", "Delete IfStatement(842)", "Delete SimpleName: totalRead(843)", "Delete SimpleName: size(844)", "Delete Assignment: +=(845)", "Delete ExpressionStatement(846)", "Delete SimpleName: numToRead(847)", "Delete SimpleName: size(848)", "Delete Assignment: -=(849)", "Delete ExpressionStatement(850)", "Delete SimpleName: position(851)", "Delete SimpleName: size(852)", "Delete Assignment: +=(853)", "Delete ExpressionStatement(854)", "Delete Block(855)", "Delete IfStatement(856)", "Delete SimpleName: numToRead(857)", "Delete NumberLiteral: 0(858)", "Delete InfixExpression: >(859)", "Delete Modifier: final(860)", "Delete PrimitiveType: byte(861)", "Delete Dimension(862)", "Delete ArrayType: byte[](863)", "Delete SimpleName: rec(864)", "Delete SimpleName: m_buffer(865)", "Delete SimpleName: readRecord(866)", "Delete MethodInvocation(867)", "Delete VariableDeclarationFragment(868)", "Delete VariableDeclarationStatement(869)", "Delete NullLiteral(870)", "Delete SimpleName: rec(871)", "Delete InfixExpression: ==(872)", "Delete Modifier: final(873)", "Delete SimpleName: String(874)", "Delete SimpleType: String(875)", "Delete SimpleName: message(876)", "Delete StringLiteral: \"unexpected EOF with \"(877)", "Delete SimpleName: numToRead(878)", "Delete StringLiteral: \" bytes unread\"(879)", "Delete InfixExpression: +(880)", "Delete VariableDeclarationFragment(881)", "Delete VariableDeclarationStatement(882)", "Delete SimpleName: IOException(883)", "Delete SimpleType: IOException(884)", "Delete SimpleName: message(885)", "Delete ClassInstanceCreation(886)", "Delete ThrowStatement(887)", "Delete Block(888)", "Delete IfStatement(889)", "Delete PrimitiveType: int(890)", "Delete SimpleName: size(891)", "Delete SimpleName: numToRead(892)", "Delete VariableDeclarationFragment(893)", "Delete VariableDeclarationStatement(894)", "Delete Modifier: final(895)", "Delete PrimitiveType: int(896)", "Delete SimpleName: recordLength(897)", "Delete QualifiedName: rec.length(898)", "Delete VariableDeclarationFragment(899)", "Delete VariableDeclarationStatement(900)", "Delete SimpleName: recordLength(901)", "Delete SimpleName: size(902)", "Delete InfixExpression: >(903)", "Delete SimpleName: System(904)", "Delete SimpleName: arraycopy(905)", "Delete SimpleName: rec(906)", "Delete NumberLiteral: 0(907)", "Delete SimpleName: buffer(908)", "Delete SimpleName: position(909)", "Delete SimpleName: size(910)", "Delete MethodInvocation(911)", "Delete ExpressionStatement(912)", "Delete SimpleName: m_readBuf(913)", "Delete PrimitiveType: byte(914)", "Delete Dimension(915)", "Delete ArrayType: byte[](916)", "Delete SimpleName: recordLength(917)", "Delete SimpleName: size(918)", "Delete InfixExpression: -(919)", "Delete ArrayCreation(920)", "Delete Assignment: =(921)", "Delete ExpressionStatement(922)", "Delete SimpleName: System(923)", "Delete SimpleName: arraycopy(924)", "Delete SimpleName: rec(925)", "Delete SimpleName: size(926)", "Delete SimpleName: m_readBuf(927)", "Delete NumberLiteral: 0(928)", "Delete SimpleName: recordLength(929)", "Delete SimpleName: size(930)", "Delete InfixExpression: -(931)", "Delete MethodInvocation(932)", "Delete ExpressionStatement(933)", "Delete Block(934)", "Delete SimpleName: size(935)", "Delete SimpleName: recordLength(936)", "Delete Assignment: =(937)", "Delete ExpressionStatement(938)", "Delete SimpleName: System(939)", "Delete SimpleName: arraycopy(940)", "Delete SimpleName: rec(941)", "Delete NumberLiteral: 0(942)", "Delete SimpleName: buffer(943)", "Delete SimpleName: position(944)", "Delete SimpleName: recordLength(945)", "Delete MethodInvocation(946)", "Delete ExpressionStatement(947)", "Delete Block(948)", "Delete IfStatement(949)", "Delete SimpleName: totalRead(950)", "Delete SimpleName: size(951)", "Delete Assignment: +=(952)", "Delete ExpressionStatement(953)", "Delete SimpleName: numToRead(954)", "Delete SimpleName: size(955)", "Delete Assignment: -=(956)", "Delete ExpressionStatement(957)", "Delete SimpleName: position(958)", "Delete SimpleName: size(959)", "Delete Assignment: +=(960)", "Delete ExpressionStatement(961)", "Delete Block(962)", "Delete WhileStatement(963)", "Delete SimpleName: m_entryOffset(964)", "Delete SimpleName: totalRead(965)", "Delete Assignment: +=(966)", "Delete ExpressionStatement(967)", "Delete SimpleName: totalRead(968)", "Delete ReturnStatement(969)", "Delete Block(970)", "Delete MethodDeclaration(971)", "Delete TextElement: Since we do not support marking just yet, we do nothing.(972)", "Delete TagElement(973)", "Delete Javadoc(974)", "Delete Modifier: public(975)", "Delete PrimitiveType: void(976)", "Delete SimpleName: reset(977)", "Delete Block(978)", "Delete MethodDeclaration(979)", "Delete TextElement: Skip bytes in the input buffer. This skips bytes in the current entry's(980)", "Delete TextElement: data, not the entire archive, and will stop at the end of the current(981)", "Delete TextElement: entry's data if the number to skip extends beyond that point.(982)", "Delete TagElement(983)", "Delete SimpleName: numToSkip(984)", "Delete TextElement:  The number of bytes to skip.(985)", "Delete TagElement: @param(986)", "Delete SimpleName: IOException(987)", "Delete TextElement:  when an IO error causes operation to fail(988)", "Delete TagElement: @exception(989)", "Delete Javadoc(990)", "Delete Modifier: public(991)", "Delete PrimitiveType: void(992)", "Delete SimpleName: skip(993)", "Delete Modifier: final(994)", "Delete PrimitiveType: int(995)", "Delete SimpleName: numToSkip(996)", "Delete SingleVariableDeclaration(997)", "Delete SimpleName: IOException(998)", "Delete SimpleType: IOException(999)", "Delete Modifier: final(1000)", "Delete PrimitiveType: byte(1001)", "Delete Dimension(1002)", "Delete ArrayType: byte[](1003)", "Delete SimpleName: skipBuf(1004)", "Delete PrimitiveType: byte(1005)", "Delete Dimension(1006)", "Delete ArrayType: byte[](1007)", "Delete NumberLiteral: 8(1008)", "Delete NumberLiteral: 1024(1009)", "Delete InfixExpression: *(1010)", "Delete ArrayCreation(1011)", "Delete VariableDeclarationFragment(1012)", "Delete VariableDeclarationStatement(1013)", "Delete PrimitiveType: int(1014)", "Delete SimpleName: num(1015)", "Delete SimpleName: numToSkip(1016)", "Delete VariableDeclarationFragment(1017)", "Delete VariableDeclarationStatement(1018)", "Delete SimpleName: num(1019)", "Delete NumberLiteral: 0(1020)", "Delete InfixExpression: >(1021)", "Delete Modifier: final(1022)", "Delete PrimitiveType: int(1023)", "Delete SimpleName: count(1024)", "Delete SimpleName: num(1025)", "Delete QualifiedName: skipBuf.length(1026)", "Delete InfixExpression: >(1027)", "Delete ParenthesizedExpression(1028)", "Delete QualifiedName: skipBuf.length(1029)", "Delete SimpleName: num(1030)", "Delete ConditionalExpression(1031)", "Delete VariableDeclarationFragment(1032)", "Delete VariableDeclarationStatement(1033)", "Delete Modifier: final(1034)", "Delete PrimitiveType: int(1035)", "Delete SimpleName: numRead(1036)", "Delete SimpleName: read(1037)", "Delete SimpleName: skipBuf(1038)", "Delete NumberLiteral: 0(1039)", "Delete SimpleName: count(1040)", "Delete MethodInvocation(1041)", "Delete VariableDeclarationFragment(1042)", "Delete VariableDeclarationStatement(1043)", "Delete SimpleName: numRead(1044)", "Delete NumberLiteral: 1(1045)", "Delete PrefixExpression: -(1046)", "Delete InfixExpression: ==(1047)", "Delete BreakStatement(1048)", "Delete Block(1049)", "Delete IfStatement(1050)", "Delete SimpleName: num(1051)", "Delete SimpleName: numRead(1052)", "Delete Assignment: -=(1053)", "Delete ExpressionStatement(1054)", "Delete Block(1055)", "Delete WhileStatement(1056)", "Delete Block(1057)", "Delete MethodDeclaration(1058)", "Delete TextElement: Utility method to do debugging.(1059)", "Delete TextElement: Capable of being overidden in sub-classes.(1060)", "Delete TagElement(1061)", "Delete SimpleName: message(1062)", "Delete TextElement:  the message to use in debugging(1063)", "Delete TagElement: @param(1064)", "Delete Javadoc(1065)", "Delete Modifier: protected(1066)", "Delete PrimitiveType: void(1067)", "Delete SimpleName: debug(1068)", "Delete Modifier: final(1069)", "Delete SimpleName: String(1070)", "Delete SimpleType: String(1071)", "Delete SimpleName: message(1072)", "Delete SingleVariableDeclaration(1073)", "Delete SimpleName: m_debug(1074)", "Delete QualifiedName: System.err(1075)", "Delete SimpleName: println(1076)", "Delete SimpleName: message(1077)", "Delete MethodInvocation(1078)", "Delete ExpressionStatement(1079)", "Delete Block(1080)", "Delete IfStatement(1081)", "Delete Block(1082)", "Delete MethodDeclaration(1083)", "Delete TypeDeclaration: class(1084)"]}}, {"TarOutputStream_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.io.compress.tar"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.FilterOutputStream", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.IOException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.InputStream", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.OutputStream"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL ExpressionStatement", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: length", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 0", "DEL SimpleName: setBufferDebug", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL SimpleName: m_currBytes", "DEL Javadoc", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: LONGFILE_ERROR", "DEL VariableDeclarationFragment", "DEL TextElement:  stream to create TarOutputStream from", "DEL TextElement:  when an IO error causes operation to fail", "DEL SimpleName: getBytes", "DEL ArrayCreation", "DEL Block", "DEL SimpleType: TarBuffer", "DEL FieldDeclaration", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL SimpleName: IOException", "DEL SimpleName: IOException", "DEL SimpleName: length", "DEL SimpleName: data", "DEL SingleVariableDeclaration", "DEL SimpleName: IOException", "DEL TagElement", "DEL SimpleName: LONGFILE_ERROR", "DEL SimpleName: IOException", "DEL TagElement: @version", "DEL TextElement: stream, block size and record sizes.", "DEL SimpleName: position", "DEL SimpleName: OutputStream", "DEL TextElement: POSIX limit.", "DEL SimpleName: IOException", "DEL TextElement: limit. Note that this makes the jar unreadable by", "DEL SimpleName: arraycopy", "DEL PrimitiveType: int", "DEL Assignment: -=", "DEL QualifiedName: TarBuffer.DEFAULT_RECORDSIZE", "DEL NumberLiteral: 0", "DEL SimpleName: position", "DEL TextElement:  the mode", "DEL Assignment: =", "DEL SimpleType: FilterOutputStream", "DEL SimpleName: message", "DEL SimpleName: m_currBytes", "DEL Assignment: =", "DEL InfixExpression: +", "DEL TextElement:  The TarEntry to be written to the archive.", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Modifier: public", "DEL ForStatement", "DEL InfixExpression: ==", "DEL PrimitiveType: void", "DEL TextElement: may be data fragments still being assembled that must be written to the", "DEL ThrowStatement", "DEL NumberLiteral: 1024", "DEL Modifier: final", "DEL ExpressionStatement", "DEL NumberLiteral: 1", "DEL SimpleName: m_currBytes", "DEL Block", "DEL FieldDeclaration", "DEL Javadoc", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: putNextEntry", "DEL VariableDeclarationStatement", "DEL SimpleName: position", "DEL SimpleName: buffer", "DEL ExpressionStatement", "DEL SimpleName: m_oneBuf", "DEL MethodDeclaration", "DEL SimpleName: longFileMode", "DEL SimpleName: LONGFILE_TRUNCATE", "DEL Modifier: final", "DEL Assignment: +=", "DEL SimpleName: message", "DEL SimpleName: message", "DEL TagElement: @exception", "DEL Modifier: final", "DEL TextElement:  when an IO error causes operation to fail", "DEL SimpleName: m_assemLen", "DEL StringLiteral: \"entry closed at '\"", "DEL Block", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL TextElement:  stream to create TarOutputStream from", "DEL CastExpression", "DEL SimpleName: blockSize", "DEL MethodInvocation", "DEL TextElement:  when an IO error causes operation to fail", "DEL Modifier: public", "DEL SimpleName: i", "DEL TextElement: write the entry's contents. Once the contents are written, closeEntry()", "DEL PrimitiveType: void", "DEL Block", "DEL SimpleName: finish", "DEL TagElement", "DEL SimpleName: writeRecord", "DEL Modifier: final", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL PrimitiveType: void", "DEL SimpleName: m_assemBuf", "DEL MethodInvocation", "DEL SimpleName: m_assemBuf", "DEL InfixExpression: +", "DEL SimpleName: output", "DEL TextElement: The TarOutputStream writes a UNIX tar archive as an OutputStream. Methods are", "DEL SingleVariableDeclaration", "DEL ArrayType: byte[]", "DEL VariableDeclarationStatement", "DEL SimpleName: m_assemLen", "DEL SimpleName: setSize", "DEL TextElement:  when an IO error causes operation to fail", "DEL Block", "DEL TagElement", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL TextElement:  The new BufferDebug value", "DEL TagElement: @see", "DEL SimpleName: System", "DEL SimpleName: position", "DEL Javadoc", "DEL TextElement: manages buffers that are not a multiple of recordsize in length,", "DEL SimpleName: entry", "DEL InfixExpression: &&", "DEL Assignment: +=", "DEL SimpleName: m_assemBuf", "DEL ExpressionStatement", "DEL SimpleName: InputStream", "DEL Javadoc", "DEL TextElement: Ends the TAR archive and closes the underlying OutputStream. This means", "DEL SimpleName: m_recordBuf", "DEL ExpressionStatement", "DEL InfixExpression: >", "DEL ExpressionStatement", "DEL QualifiedName: TarConstants.LF_GNUTYPE_LONGNAME", "DEL SimpleName: numToWrite", "DEL SimpleName: write", "DEL SimpleType: IOException", "DEL SimpleName: TarOutputStream", "DEL TextElement: provided to put entries, and then write their contents by writing to this", "DEL SimpleName: numToWrite", "DEL SimpleType: OutputStream", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: IOException", "DEL Modifier: final", "DEL QualifiedName: buffer.length", "DEL Assignment: +=", "DEL SimpleName: m_assemLen", "DEL SimpleName: numToWrite", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL TextElement: Set the mode used to work with entrys exceeding", "DEL MethodInvocation", "DEL TagElement", "DEL TextElement:  The InputStream from which to read entrys data", "DEL QualifiedName: TarConstants.GNU_LONGLINK", "DEL SimpleName: IOException", "DEL InfixExpression: >=", "DEL VariableDeclarationStatement", "DEL SimpleName: m_assemLen", "DEL InfixExpression: >", "DEL VariableDeclarationFragment", "DEL ArrayAccess", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleName: recordSize", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL SimpleName: m_oneBuf", "DEL Modifier: private", "DEL Assignment: =", "DEL SimpleName: numRead", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL VariableDeclarationFragment", "DEL TagElement: @see", "DEL SimpleName: OutputStream", "DEL PrimitiveType: int", "DEL Block", "DEL SimpleName: getName", "DEL NumberLiteral: 0", "DEL Modifier: final", "DEL FieldDeclaration", "DEL Assignment: =", "DEL StringLiteral: \"longFileMode\"", "DEL SimpleName: IOException", "DEL TagElement", "DEL SimpleName: LONGFILE_ERROR", "DEL SimpleName: buffer", "DEL SimpleName: write", "DEL SimpleName: m_recordBuf", "DEL SimpleName: i", "DEL SimpleName: writeRecord", "DEL TextElement:  The number of bytes to write.", "DEL PrimitiveType: int", "DEL SimpleName: m_longFileMode", "DEL SimpleName: TarEntry", "DEL TagElement", "DEL SimpleName: OutputStream", "DEL SimpleName: count", "DEL SimpleName: IOException", "DEL Block", "DEL Modifier: private", "DEL SimpleType: TarBuffer", "DEL Modifier: public", "DEL Modifier: public", "DEL TextElement:  Timothy Gerard Endres <a href=\"mailto:time@ice.com\">time@ice.com</a>", "DEL FieldDeclaration", "DEL SimpleName: data", "DEL Block", "DEL SimpleType: OutputStream", "DEL FieldDeclaration", "DEL SimpleName: m_assemBuf", "DEL PrimitiveType: int", "DEL TextElement: according to GNU tar extension if an attempt is made", "DEL IfStatement", "DEL SimpleName: length", "DEL PrimitiveType: int", "DEL SimpleName: LONGFILE_GNU", "DEL TextElement: Flag to indicate that entry name should be truncated if", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: TarEntry", "DEL TagElement: @param", "DEL PrefixExpression: -", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL PrimitiveType: byte", "DEL SimpleName: m_assemLen", "DEL TagElement: @exception", "DEL SimpleName: m_buffer", "DEL TagElement: @param", "DEL SimpleName: message", "DEL Block", "DEL Block", "DEL Modifier: final", "DEL Dimension", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL SimpleName: m_assemLen", "DEL PrimitiveType: byte", "DEL ClassInstanceCreation", "DEL InfixExpression: !=", "DEL Dimension", "DEL SimpleName: position", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL SimpleName: getRecordSize", "DEL SimpleName: m_assemLen", "DEL TextElement:  when an IO error causes operation to fail", "DEL SimpleName: LONGFILE_GNU", "DEL SimpleName: output", "DEL InfixExpression: -", "DEL QualifiedName: buffer.length", "DEL TextElement:  The offset in the buffer from which to get bytes.", "DEL Assignment: -=", "DEL SimpleName: m_assemLen", "DEL Modifier: public", "DEL IfStatement", "DEL TagElement: @see", "DEL SimpleName: TarOutputStream", "DEL Modifier: public", "DEL TextElement:  $Revision: 1.3 $ $Date: 2003/10/13 07:01:15 $", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleType: IOException", "DEL MethodDeclaration", "DEL SimpleName: output", "DEL SimpleName: numToWrite", "DEL TextElement: result is that the EOF record of nulls is written.", "DEL SimpleName: buffer", "DEL TagElement", "DEL SimpleName: recordSize", "DEL QualifiedName: TarBuffer.DEFAULT_RECORDSIZE", "DEL ArrayCreation", "DEL NumberLiteral: 0", "DEL Modifier: final", "DEL SimpleName: IOException", "DEL TextElement: Write an EOF (end of archive) record to the tar archive. An EOF record", "DEL PrimitiveType: void", "DEL TextElement: stream, block size and default record sizes.", "DEL SimpleName: position", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleType: IOException", "DEL InfixExpression: *", "DEL TextElement:  when an IO error causes operation to fail", "DEL SimpleName: output", "DEL SingleVariableDeclaration", "DEL Assignment: -=", "DEL TagElement", "DEL SimpleName: m_assemLen", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: longFileMode", "DEL TextElement: Ends the TAR archive without closing the underlying OutputStream. The", "DEL SimpleName: write", "DEL SimpleName: m_recordBuf", "DEL TextElement:  The buffer to write to the archive.", "DEL SimpleName: count", "DEL TextElement: stream using write().", "DEL ArrayType: byte[]", "DEL VariableDeclarationFragment", "DEL TextElement:  <a href=\"mailto:peter@apache.org\">Peter Donald</a>", "DEL TagElement: @param", "DEL TagElement", "DEL SimpleName: output", "DEL SimpleName: entry", "DEL InfixExpression: <", "DEL MethodDeclaration", "DEL Block", "DEL Modifier: final", "DEL SimpleName: System", "DEL Javadoc", "DEL NumberLiteral: 0", "DEL VariableDeclarationFragment", "DEL QualifiedName: m_recordBuf.length", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL Modifier: static", "DEL SimpleName: numToWrite", "DEL SimpleName: m_currSize", "DEL TextElement:  The buffer to write to the archive.", "DEL SimpleName: m_buffer", "DEL TagElement: @param", "DEL TextElement:  the block size", "DEL Block", "DEL SimpleName: blockSize", "DEL TextElement: and positions the output stream for writing the contents of the entry.", "DEL PrimitiveType: byte", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL Modifier: private", "DEL MethodInvocation", "DEL TextElement: consists of a record of all zeros.", "DEL Assignment: =", "DEL MethodInvocation", "DEL TextElement:  when an IO error causes operation to fail", "DEL SimpleName: write", "DEL SimpleName: m_recordBuf", "DEL TextElement: the current entry and will throw an exception if you attempt to write", "DEL SimpleType: InputStream", "DEL SimpleType: IOException", "DEL ExpressionStatement", "DEL SimpleName: write", "DEL MemberRef", "DEL QualifiedName: m_recordBuf.length", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL TextElement: Close an entry. This method MUST be called for all file entries that", "DEL TextElement: 100 chars (and thus break the POSIX standard).", "DEL MethodInvocation", "DEL SimpleName: System", "DEL PrimitiveType: int", "DEL SimpleName: i", "DEL TextElement: read( byte[], int, int ).", "DEL QualifiedName: TarEntry.NAMELEN", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleName: input", "DEL SimpleName: buffer", "DEL Modifier: final", "DEL SimpleName: longFileMode", "DEL SimpleName: buffer", "DEL TagElement: @param", "DEL PrimitiveType: int", "DEL PrimitiveType: byte", "DEL MethodInvocation", "DEL ThrowStatement", "DEL TextElement: an attempt is made to write an entry that exceeds the 100 char", "DEL SimpleName: IOException", "DEL Modifier: final", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL NumberLiteral: 0", "DEL SimpleName: arraycopy", "DEL SimpleName: entry", "DEL SimpleName: numToWrite", "DEL SimpleName: copyEntryContents", "DEL TagElement", "DEL PrimitiveType: byte", "DEL PrimitiveType: byte", "DEL SimpleName: m_assemLen", "DEL SimpleName: recordSize", "DEL TextElement: archive entry.", "DEL SimpleName: FilterOutputStream", "DEL NumberLiteral: 1", "DEL TagElement: @param", "DEL TagElement: @exception", "DEL TagElement: @exception", "DEL PrimitiveType: int", "DEL MemberRef", "DEL Block", "DEL SimpleName: closeEntry", "DEL SimpleName: writeEOFRecord", "DEL SimpleName: writeEntryHeader", "DEL SimpleName: offset", "DEL SimpleName: buffer", "DEL Block", "DEL Dimension", "DEL SimpleName: m_assemBuf", "DEL SimpleName: longLinkEntry", "DEL TextElement: POSIX limit.", "DEL SimpleName: TarOutputStream", "DEL PrimitiveType: int", "DEL Javadoc", "DEL SimpleName: i", "DEL SimpleName: m_buffer", "DEL ArrayCreation", "DEL SimpleName: position", "DEL StringLiteral: \"' before the '\"", "DEL InfixExpression: !=", "DEL PrimitiveType: int", "DEL InfixExpression: <", "DEL SimpleName: i", "DEL Assignment: +=", "DEL SimpleType: IOException", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL StringLiteral: \"' is too long ( > \"", "DEL VariableDeclarationFragment", "DEL PrimitiveType: boolean", "DEL TagElement: @see", "DEL SimpleName: entry", "DEL SimpleName: m_buffer", "DEL SimpleName: i", "DEL SimpleName: entry", "DEL TagElement", "DEL BreakStatement", "DEL SimpleName: writeRecord", "DEL SimpleName: message", "DEL Block", "DEL TextElement: Once this method is called, the stream is ready for calls to write() to", "DEL PrimitiveType: void", "DEL SuperConstructorInvocation", "DEL ExpressionStatement", "DEL SimpleName: entry", "DEL SimpleName: TarBuffer", "DEL SimpleName: m_currSize", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL TagElement", "DEL TextElement: written to the output stream.", "DEL ArrayType: byte[]", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL PrimitiveType: byte", "DEL StringLiteral: \"' bytes\"", "DEL Modifier: public", "DEL TextElement: Must be one of the LONGFILE_* constants.", "DEL TextElement: output stream before this entry is closed and the next entry written.", "DEL PrimitiveType: void", "DEL SimpleName: entry", "DEL SimpleName: TarEntry", "DEL Javadoc", "DEL BreakStatement", "DEL SimpleName: num", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL Assignment: +=", "DEL TagElement: @exception", "DEL PrimitiveType: int", "DEL Block", "DEL Dimension", "DEL SimpleName: m_assemBuf", "DEL ExpressionStatement", "DEL Block", "DEL QualifiedName: m_recordBuf.length", "DEL TagElement: @return", "DEL TextElement: Construct a TarOutputStream using specified input", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: TarBuffer", "DEL TagElement: @exception", "DEL SimpleName: setDebug", "DEL ExpressionStatement", "DEL SimpleName: numToWrite", "DEL SimpleName: LONGFILE_TRUNCATE", "DEL SimpleName: buffer", "DEL SimpleName: finish", "DEL StringLiteral: \"' bytes exceeds size in header of '\"", "DEL SimpleName: m_oneBuf", "DEL InfixExpression: +", "DEL Javadoc", "DEL IfStatement", "DEL ThrowStatement", "DEL Dimension", "DEL CastExpression", "DEL Modifier: private", "DEL TextElement: <B>MUST</B> be called to ensure that all buffered data is completely", "DEL VariableDeclarationFragment", "DEL SimpleName: blockSize", "DEL ExpressionStatement", "DEL QualifiedName: m_recordBuf.length", "DEL TagElement", "DEL SimpleName: m_longFileMode", "DEL TextElement:  The byte written.", "DEL Block", "DEL MethodInvocation", "DEL ArrayType: byte[]", "DEL Modifier: public", "DEL SimpleName: close", "DEL ConstructorInvocation", "DEL ConstructorInvocation", "DEL SimpleName: buffer", "DEL SimpleName: getName", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL SimpleName: TarBuffer", "DEL VariableDeclarationFragment", "DEL SimpleName: writeEOFRecord", "DEL SimpleName: num", "DEL TextElement: Copies the contents of the specified stream into current tar", "DEL Modifier: final", "DEL SimpleName: numToWrite", "DEL Modifier: public", "DEL TextElement:  when an IO error causes operation to fail", "DEL SimpleName: String", "DEL Modifier: public", "DEL SimpleName: m_longFileMode", "DEL SimpleName: m_assemLen", "DEL MethodInvocation", "DEL Javadoc", "DEL TagElement: @exception", "DEL SimpleName: output", "DEL VariableDeclarationStatement", "DEL InfixExpression: +", "DEL SimpleName: close", "DEL SimpleType: TarEntry", "DEL InfixExpression: ==", "DEL Assignment: =", "DEL Block", "DEL Modifier: public", "DEL SimpleName: m_buffer", "DEL Block", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: IOException", "DEL SimpleName: write", "DEL ArrayType: byte[]", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL QualifiedName: TarEntry.NAMELEN", "DEL SimpleName: num", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL SimpleName: position", "DEL SingleVariableDeclaration", "DEL SimpleName: m_currBytes", "DEL SimpleName: offset", "DEL TagElement", "DEL Javadoc", "DEL SimpleType: IOException", "DEL SimpleName: IOException", "DEL SimpleName: num", "DEL ArrayType: byte[]", "DEL SimpleName: numToWrite", "DEL Modifier: public", "DEL SimpleType: IOException", "DEL Dimension", "DEL IfStatement", "DEL SimpleName: numToWrite", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL SimpleName: m_recordBuf", "DEL SimpleType: String", "DEL SimpleName: length", "DEL SimpleName: output", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: m_recordBuf", "DEL TagElement: @param", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleName: m_recordBuf", "DEL Dimension", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL TagElement: @author", "DEL ForStatement", "DEL TagElement: @see", "DEL MethodInvocation", "DEL TagElement: @exception", "DEL SimpleName: read", "DEL VariableDeclarationExpression", "DEL SimpleName: TarOutputStream", "DEL BooleanLiteral: true", "DEL TextElement: Put an entry on the output stream. This writes the entry's header record", "DEL FieldDeclaration", "DEL ClassInstanceCreation", "DEL NumberLiteral: 0", "DEL Block", "DEL SimpleName: TarBuffer", "DEL SimpleName: entry", "DEL Dimension", "DEL StringLiteral: \"request to write '\"", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL MethodInvocation", "DEL IfStatement", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: IOException", "DEL PrimitiveType: byte", "DEL ClassInstanceCreation", "DEL SimpleName: longLinkEntry", "DEL TextElement: Flag to indicate that entry name should be formatted", "DEL Javadoc", "DEL WhileStatement", "DEL TextElement:  the block size", "DEL SimpleName: input", "DEL SimpleName: isDirectory", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL SimpleType: TarEntry", "DEL InfixExpression: >", "DEL SimpleName: m_currBytes", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: m_assemLen", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL Block", "DEL MethodInvocation", "DEL StringLiteral: \"file name '\"", "DEL SimpleName: DEFAULT_BLOCKSIZE", "DEL NumberLiteral: 1", "DEL ExpressionStatement", "DEL SimpleName: getName", "DEL SimpleName: m_recordBuf", "DEL SimpleType: IOException", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL SimpleName: m_buffer", "DEL Assignment: =", "DEL ExpressionStatement", "DEL InfixExpression: <", "DEL TagElement: @exception", "DEL NumberLiteral: 0", "DEL SimpleName: m_buffer", "DEL MethodDeclaration", "DEL NumberLiteral: 0", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL TextElement: to write an entry that exceeds the 100 char POSIX", "DEL ExpressionStatement", "DEL SimpleName: numToWrite", "DEL PrimitiveType: int", "DEL TextElement: an attempt is made to write an entry that exceeds the 100 char", "DEL SimpleName: LONGFILE_TRUNCATE", "DEL SimpleName: m_longFileMode", "DEL ArrayType: byte[]", "DEL TextElement: write( byte[], int, int ).", "DEL SimpleName: TarEntry", "DEL SimpleName: longFileMode", "DEL SimpleName: arraycopy", "DEL SimpleName: arraycopy", "DEL Assignment: +=", "DEL SimpleName: recordSize", "DEL SimpleName: m_assemLen", "DEL PrimitiveType: void", "DEL SimpleName: setLongFileMode", "DEL SimpleName: buffer", "DEL VariableDeclarationFragment", "DEL PrefixExpression: ++", "DEL SimpleName: m_currSize", "DEL Javadoc", "DEL SimpleName: count", "DEL SimpleType: TarEntry", "DEL Modifier: final", "DEL Block", "DEL SimpleName: data", "DEL ExpressionStatement", "DEL MemberRef", "DEL SimpleName: write", "DEL SimpleName: m_currBytes", "DEL SimpleType: IllegalArgumentException", "DEL ArrayCreation", "DEL ArrayType: byte[]", "DEL SimpleType: IOException", "DEL InfixExpression: >=", "DEL ArrayType: byte[]", "DEL TextElement: Writes bytes to the current tar archive entry. This method simply calls", "DEL SimpleName: numRead", "DEL SimpleName: debug", "DEL SimpleName: m_currSize", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SimpleName: length", "DEL SimpleName: buffer", "DEL TagElement: @param", "DEL NumberLiteral: 1", "DEL Assignment: +=", "DEL FieldDeclaration", "DEL InfixExpression: &&", "DEL ArrayAccess", "DEL SimpleName: writeRecord", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL SimpleName: DEFAULT_RECORDSIZE", "DEL SimpleType: IOException", "DEL SimpleName: blockSize", "DEL SimpleName: m_currSize", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: m_recordBuf", "DEL SimpleName: String", "DEL SimpleName: buffer", "DEL PrefixExpression: ++", "DEL Assignment: =", "DEL QualifiedName: m_recordBuf.length", "DEL SimpleName: i", "DEL TextElement: (painfully) aware of the record buffering required by TarBuffer, and", "DEL VariableDeclarationExpression", "DEL SingleVariableDeclaration", "DEL SimpleType: OutputStream", "DEL Javadoc", "DEL Block", "DEL PrimitiveType: void", "DEL SimpleName: IOException", "DEL VariableDeclarationFragment", "DEL PrimitiveType: byte", "DEL SimpleName: IOException", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL Modifier: public", "DEL PrimitiveType: int", "DEL SimpleName: m_assemLen", "DEL SimpleName: TarBuffer", "DEL SimpleName: m_currSize", "DEL NumberLiteral: 0", "DEL IfStatement", "DEL SimpleName: m_currSize", "DEL SimpleType: IOException", "DEL TagElement: @param", "DEL TextElement: that finish() is called followed by calling the TarBuffer's close().", "DEL SimpleName: getName", "DEL Javadoc", "DEL SimpleName: IOException", "DEL SimpleName: buffer", "DEL InfixExpression: <", "DEL MethodInvocation", "DEL SimpleName: m_buffer", "DEL Javadoc", "DEL Block", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL SimpleName: m_oneBuf", "DEL SimpleName: writeRecord", "DEL TextElement: including assembling records from small buffers.", "DEL TagElement", "DEL SimpleName: debug", "DEL TextElement:  The TarBuffer record size.", "DEL ClassInstanceCreation", "DEL SimpleName: IOException", "DEL Assignment: =", "DEL SimpleName: longLinkEntry", "DEL Modifier: public", "DEL TextElement: stream and default block and record sizes.", "DEL SimpleName: numToWrite", "DEL TypeDeclaration: class", "DEL SimpleName: closeEntry", "DEL MethodDeclaration", "DEL SimpleName: numToWrite", "DEL FieldDeclaration", "DEL Assignment: +=", "DEL SimpleName: output", "DEL Assignment: =", "DEL TextElement:  when an IO error causes operation to fail", "DEL MethodInvocation", "DEL SimpleName: longFileMode", "DEL TagElement: @param", "DEL ArrayAccess", "DEL SimpleName: m_assemBuf", "DEL ExpressionStatement", "DEL TextElement: Construct a TarOutputStream using specified input", "DEL SimpleName: blockSize", "DEL IfStatement", "DEL SimpleName: m_currBytes", "DEL QualifiedName: m_assemBuf.length", "DEL SimpleName: System", "DEL TextElement:  the record size", "DEL IfStatement", "DEL MethodDeclaration", "DEL SimpleName: numToWrite", "DEL SimpleName: DEFAULT_RECORDSIZE", "DEL SimpleName: TarInputStream", "DEL QualifiedName: TarBuffer.DEFAULT_BLOCKSIZE", "DEL TextElement: stream in order to satisfy the buffer's record based writes. Thus, there", "DEL SimpleName: longFileMode", "DEL Modifier: static", "DEL Block", "DEL IfStatement", "DEL StringLiteral: \" bytes)\"", "DEL SimpleType: IOException", "DEL TagElement", "DEL TagElement: @param", "DEL SimpleName: debug", "DEL Block", "DEL PrimitiveType: byte", "DEL ExpressionStatement", "DEL TextElement: bytes past the length specified for the current entry. The method is also", "DEL Modifier: private", "DEL TagElement", "DEL InfixExpression: !=", "DEL TextElement: Get the record size being used by this stream's TarBuffer.", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL TextElement: Flag to indicate that an error should be generated if", "DEL SimpleName: getRecordSize", "DEL PrimitiveType: int", "DEL Dimension", "DEL TextElement: contain data. The reason is that we must buffer data written to the", "DEL SingleVariableDeclaration", "DEL FieldDeclaration", "DEL SimpleName: offset", "DEL SimpleName: m_buffer", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"' bytes specified in the header were written\"", "DEL TagElement: @author", "DEL TagElement: @param", "DEL Modifier: static", "DEL SimpleName: numRead", "DEL SimpleName: m_assemLen", "DEL Javadoc", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleName: length", "DEL SimpleName: IOException", "DEL SimpleName: entry", "DEL Block", "DEL Modifier: public", "DEL PrimitiveType: int", "DEL QualifiedName: m_recordBuf.length", "DEL TagElement: @param", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: output", "DEL WhileStatement", "DEL ParenthesizedExpression", "DEL SimpleName: recordSize", "DEL NumberLiteral: 2", "DEL TextElement: Writes a byte to the current tar archive entry. This method simply calls", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleName: blockSize", "DEL SimpleName: message", "DEL SimpleName: LONGFILE_GNU", "DEL NumberLiteral: 32", "DEL Modifier: private", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleName: m_currBytes", "DEL Modifier: public", "DEL PrimitiveType: void", "DEL TextElement: Sets the debugging flag in this stream's TarBuffer.", "DEL Block", "DEL ArrayType: byte[]", "DEL TextElement: non-GNU tar commands.", "DEL TextElement: Writes bytes to the current tar archive entry. This method is aware of", "DEL ExpressionStatement", "DEL SimpleName: numToWrite", "DEL SingleVariableDeclaration", "DEL SimpleName: m_assemLen", "DEL PrimitiveType: byte", "DEL SimpleName: getSize", "DEL ReturnStatement", "DEL SimpleName: m_buffer", "DEL Modifier: final", "DEL Block", "DEL IfStatement", "DEL TextElement: Construct a TarOutputStream using specified input", "DEL ParenthesizedExpression", "DEL ThrowStatement", "DEL SimpleName: putNextEntry", "DEL SimpleName: IOException", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SimpleName: input", "DEL TextElement:  stream to create TarOutputStream from", "DEL NumberLiteral: 0", "DEL SimpleType: String", "DEL SimpleName: IOException", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: output", "DEL Modifier: public", "DEL Block"]}]}}, {"TarOutputStream_diff": {"operations": ["Delete QualifiedName: org.apache.commons.io.compress.tar(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.io.FilterOutputStream(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.io.IOException(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.io.InputStream(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.io.OutputStream(8)", "Delete ImportDeclaration(9)", "Delete TextElement: The TarOutputStream writes a UNIX tar archive as an OutputStream. Methods are(10)", "Delete TextElement: provided to put entries, and then write their contents by writing to this(11)", "Delete TextElement: stream using write().(12)", "Delete TagElement(13)", "Delete TextElement:  Timothy Gerard Endres <a href=\"mailto:time@ice.com\">time@ice.com</a>(14)", "Delete TagElement: @author(15)", "Delete TextElement:  <a href=\"mailto:peter@apache.org\">Peter Donald</a>(16)", "Delete TagElement: @author(17)", "Delete TextElement:  $Revision: 1.3 $ $Date: 2003/10/13 07:01:15 $(18)", "Delete TagElement: @version(19)", "Delete SimpleName: TarInputStream(20)", "Delete TagElement: @see(21)", "Delete SimpleName: TarEntry(22)", "Delete TagElement: @see(23)", "Delete Javadoc(24)", "Delete Modifier: public(25)", "Delete SimpleName: TarOutputStream(26)", "Delete SimpleName: FilterOutputStream(27)", "Delete SimpleType: FilterOutputStream(28)", "Delete TextElement: Flag to indicate that an error should be generated if(29)", "Delete TextElement: an attempt is made to write an entry that exceeds the 100 char(30)", "Delete TextElement: POSIX limit.(31)", "Delete TagElement(32)", "Delete Javadoc(33)", "Delete Modifier: public(34)", "Delete Modifier: static(35)", "Delete Modifier: final(36)", "Delete PrimitiveType: int(37)", "Delete SimpleName: LONGFILE_ERROR(38)", "Delete NumberLiteral: 0(39)", "Delete VariableDeclarationFragment(40)", "Delete FieldDeclaration(41)", "Delete TextElement: Flag to indicate that entry name should be truncated if(42)", "Delete TextElement: an attempt is made to write an entry that exceeds the 100 char(43)", "Delete TextElement: POSIX limit.(44)", "Delete TagElement(45)", "Delete Javadoc(46)", "Delete Modifier: public(47)", "Delete Modifier: static(48)", "Delete Modifier: final(49)", "Delete PrimitiveType: int(50)", "Delete SimpleName: LONGFILE_TRUNCATE(51)", "Delete NumberLiteral: 1(52)", "Delete VariableDeclarationFragment(53)", "Delete FieldDeclaration(54)", "Delete TextElement: Flag to indicate that entry name should be formatted(55)", "Delete TextElement: according to GNU tar extension if an attempt is made(56)", "Delete TextElement: to write an entry that exceeds the 100 char POSIX(57)", "Delete TextElement: limit. Note that this makes the jar unreadable by(58)", "Delete TextElement: non-GNU tar commands.(59)", "Delete TagElement(60)", "Delete Javadoc(61)", "Delete Modifier: public(62)", "Delete Modifier: static(63)", "Delete Modifier: final(64)", "Delete PrimitiveType: int(65)", "Delete SimpleName: LONGFILE_GNU(66)", "Delete NumberLiteral: 2(67)", "Delete VariableDeclarationFragment(68)", "Delete FieldDeclaration(69)", "Delete Modifier: private(70)", "Delete PrimitiveType: int(71)", "Delete SimpleName: m_longFileMode(72)", "Delete SimpleName: LONGFILE_ERROR(73)", "Delete VariableDeclarationFragment(74)", "Delete FieldDeclaration(75)", "Delete Modifier: private(76)", "Delete PrimitiveType: byte(77)", "Delete Dimension(78)", "Delete ArrayType: byte[](79)", "Delete SimpleName: m_assemBuf(80)", "Delete VariableDeclarationFragment(81)", "Delete FieldDeclaration(82)", "Delete Modifier: private(83)", "Delete PrimitiveType: int(84)", "Delete SimpleName: m_assemLen(85)", "Delete VariableDeclarationFragment(86)", "Delete FieldDeclaration(87)", "Delete Modifier: private(88)", "Delete SimpleName: TarBuffer(89)", "Delete SimpleType: TarBuffer(90)", "Delete SimpleName: m_buffer(91)", "Delete VariableDeclarationFragment(92)", "Delete FieldDeclaration(93)", "Delete Modifier: private(94)", "Delete PrimitiveType: int(95)", "Delete SimpleName: m_currBytes(96)", "Delete VariableDeclarationFragment(97)", "Delete FieldDeclaration(98)", "Delete Modifier: private(99)", "Delete PrimitiveType: int(100)", "Delete SimpleName: m_currSize(101)", "Delete VariableDeclarationFragment(102)", "Delete FieldDeclaration(103)", "Delete Modifier: private(104)", "Delete PrimitiveType: byte(105)", "Delete Dimension(106)", "Delete ArrayType: byte[](107)", "Delete SimpleName: m_oneBuf(108)", "Delete VariableDeclarationFragment(109)", "Delete FieldDeclaration(110)", "Delete Modifier: private(111)", "Delete PrimitiveType: byte(112)", "Delete Dimension(113)", "Delete ArrayType: byte[](114)", "Delete SimpleName: m_recordBuf(115)", "Delete VariableDeclarationFragment(116)", "Delete FieldDeclaration(117)", "Delete TextElement: Construct a TarOutputStream using specified input(118)", "Delete TextElement: stream and default block and record sizes.(119)", "Delete TagElement(120)", "Delete SimpleName: output(121)", "Delete TextElement:  stream to create TarOutputStream from(122)", "Delete TagElement: @param(123)", "Delete SimpleName: TarBuffer(124)", "Delete SimpleName: DEFAULT_BLOCKSIZE(125)", "Delete MemberRef(126)", "Delete TagElement: @see(127)", "Delete SimpleName: TarBuffer(128)", "Delete SimpleName: DEFAULT_RECORDSIZE(129)", "Delete MemberRef(130)", "Delete TagElement: @see(131)", "Delete Javadoc(132)", "Delete Modifier: public(133)", "Delete SimpleName: TarOutputStream(134)", "Delete Modifier: final(135)", "Delete SimpleName: OutputStream(136)", "Delete SimpleType: OutputStream(137)", "Delete SimpleName: output(138)", "Delete SingleVariableDeclaration(139)", "Delete SimpleName: output(140)", "Delete QualifiedName: TarBuffer.DEFAULT_BLOCKSIZE(141)", "Delete QualifiedName: TarBuffer.DEFAULT_RECORDSIZE(142)", "Delete ConstructorInvocation(143)", "Delete Block(144)", "Delete MethodDeclaration(145)", "Delete TextElement: Construct a TarOutputStream using specified input(146)", "Delete TextElement: stream, block size and default record sizes.(147)", "Delete TagElement(148)", "Delete SimpleName: output(149)", "Delete TextElement:  stream to create TarOutputStream from(150)", "Delete TagElement: @param(151)", "Delete SimpleName: blockSize(152)", "Delete TextElement:  the block size(153)", "Delete TagElement: @param(154)", "Delete SimpleName: TarBuffer(155)", "Delete SimpleName: DEFAULT_RECORDSIZE(156)", "Delete MemberRef(157)", "Delete TagElement: @see(158)", "Delete Javadoc(159)", "Delete Modifier: public(160)", "Delete SimpleName: TarOutputStream(161)", "Delete Modifier: final(162)", "Delete SimpleName: OutputStream(163)", "Delete SimpleType: OutputStream(164)", "Delete SimpleName: output(165)", "Delete SingleVariableDeclaration(166)", "Delete Modifier: final(167)", "Delete PrimitiveType: int(168)", "Delete SimpleName: blockSize(169)", "Delete SingleVariableDeclaration(170)", "Delete SimpleName: output(171)", "Delete SimpleName: blockSize(172)", "Delete QualifiedName: TarBuffer.DEFAULT_RECORDSIZE(173)", "Delete ConstructorInvocation(174)", "Delete Block(175)", "Delete MethodDeclaration(176)", "Delete TextElement: Construct a TarOutputStream using specified input(177)", "Delete TextElement: stream, block size and record sizes.(178)", "Delete TagElement(179)", "Delete SimpleName: output(180)", "Delete TextElement:  stream to create TarOutputStream from(181)", "Delete TagElement: @param(182)", "Delete SimpleName: blockSize(183)", "Delete TextElement:  the block size(184)", "Delete TagElement: @param(185)", "Delete SimpleName: recordSize(186)", "Delete TextElement:  the record size(187)", "Delete TagElement: @param(188)", "Delete Javadoc(189)", "Delete Modifier: public(190)", "Delete SimpleName: TarOutputStream(191)", "Delete Modifier: final(192)", "Delete SimpleName: OutputStream(193)", "Delete SimpleType: OutputStream(194)", "Delete SimpleName: output(195)", "Delete SingleVariableDeclaration(196)", "Delete Modifier: final(197)", "Delete PrimitiveType: int(198)", "Delete SimpleName: blockSize(199)", "Delete SingleVariableDeclaration(200)", "Delete Modifier: final(201)", "Delete PrimitiveType: int(202)", "Delete SimpleName: recordSize(203)", "Delete SingleVariableDeclaration(204)", "Delete SimpleName: output(205)", "Delete SuperConstructorInvocation(206)", "Delete SimpleName: m_buffer(207)", "Delete SimpleName: TarBuffer(208)", "Delete SimpleType: TarBuffer(209)", "Delete SimpleName: output(210)", "Delete SimpleName: blockSize(211)", "Delete SimpleName: recordSize(212)", "Delete ClassInstanceCreation(213)", "Delete Assignment: =(214)", "Delete ExpressionStatement(215)", "Delete SimpleName: m_assemLen(216)", "Delete NumberLiteral: 0(217)", "Delete Assignment: =(218)", "Delete ExpressionStatement(219)", "Delete SimpleName: m_assemBuf(220)", "Delete PrimitiveType: byte(221)", "Delete Dimension(222)", "Delete ArrayType: byte[](223)", "Delete SimpleName: recordSize(224)", "Delete ArrayCreation(225)", "Delete Assignment: =(226)", "Delete ExpressionStatement(227)", "Delete SimpleName: m_recordBuf(228)", "Delete PrimitiveType: byte(229)", "Delete Dimension(230)", "Delete ArrayType: byte[](231)", "Delete SimpleName: recordSize(232)", "Delete ArrayCreation(233)", "Delete Assignment: =(234)", "Delete ExpressionStatement(235)", "Delete SimpleName: m_oneBuf(236)", "Delete PrimitiveType: byte(237)", "Delete Dimension(238)", "Delete ArrayType: byte[](239)", "Delete NumberLiteral: 1(240)", "Delete ArrayCreation(241)", "Delete Assignment: =(242)", "Delete ExpressionStatement(243)", "Delete Block(244)", "Delete MethodDeclaration(245)", "Delete TextElement: Sets the debugging flag in this stream's TarBuffer.(246)", "Delete TagElement(247)", "Delete SimpleName: debug(248)", "Delete TextElement:  The new BufferDebug value(249)", "Delete TagElement: @param(250)", "Delete Javadoc(251)", "Delete Modifier: public(252)", "Delete PrimitiveType: void(253)", "Delete SimpleName: setBufferDebug(254)", "Delete PrimitiveType: boolean(255)", "Delete SimpleName: debug(256)", "Delete SingleVariableDeclaration(257)", "Delete SimpleName: m_buffer(258)", "Delete SimpleName: setDebug(259)", "Delete SimpleName: debug(260)", "Delete MethodInvocation(261)", "Delete ExpressionStatement(262)", "Delete Block(263)", "Delete MethodDeclaration(264)", "Delete TextElement: Set the mode used to work with entrys exceeding(265)", "Delete TextElement: 100 chars (and thus break the POSIX standard).(266)", "Delete TextElement: Must be one of the LONGFILE_* constants.(267)", "Delete TagElement(268)", "Delete SimpleName: longFileMode(269)", "Delete TextElement:  the mode(270)", "Delete TagElement: @param(271)", "Delete Javadoc(272)", "Delete Modifier: public(273)", "Delete PrimitiveType: void(274)", "Delete SimpleName: setLongFileMode(275)", "Delete Modifier: final(276)", "Delete PrimitiveType: int(277)", "Delete SimpleName: longFileMode(278)", "Delete SingleVariableDeclaration(279)", "Delete SimpleName: LONGFILE_ERROR(280)", "Delete SimpleName: longFileMode(281)", "Delete InfixExpression: !=(282)", "Delete SimpleName: LONGFILE_GNU(283)", "Delete SimpleName: longFileMode(284)", "Delete InfixExpression: !=(285)", "Delete InfixExpression: &&(286)", "Delete SimpleName: LONGFILE_TRUNCATE(287)", "Delete SimpleName: longFileMode(288)", "Delete InfixExpression: !=(289)", "Delete InfixExpression: &&(290)", "Delete SimpleName: IllegalArgumentException(291)", "Delete SimpleType: IllegalArgumentException(292)", "Delete StringLiteral: \"longFileMode\"(293)", "Delete ClassInstanceCreation(294)", "Delete ThrowStatement(295)", "Delete Block(296)", "Delete IfStatement(297)", "Delete SimpleName: m_longFileMode(298)", "Delete SimpleName: longFileMode(299)", "Delete Assignment: =(300)", "Delete ExpressionStatement(301)", "Delete Block(302)", "Delete MethodDeclaration(303)", "Delete TextElement: Get the record size being used by this stream's TarBuffer.(304)", "Delete TagElement(305)", "Delete TextElement:  The TarBuffer record size.(306)", "Delete TagElement: @return(307)", "Delete Javadoc(308)", "Delete Modifier: public(309)", "Delete PrimitiveType: int(310)", "Delete SimpleName: getRecordSize(311)", "Delete SimpleName: m_buffer(312)", "Delete SimpleName: getRecordSize(313)", "Delete MethodInvocation(314)", "Delete ReturnStatement(315)", "Delete Block(316)", "Delete MethodDeclaration(317)", "Delete TextElement: Ends the TAR archive and closes the underlying OutputStream. This means(318)", "Delete TextElement: that finish() is called followed by calling the TarBuffer's close().(319)", "Delete TagElement(320)", "Delete SimpleName: IOException(321)", "Delete TextElement:  when an IO error causes operation to fail(322)", "Delete TagElement: @exception(323)", "Delete Javadoc(324)", "Delete Modifier: public(325)", "Delete PrimitiveType: void(326)", "Delete SimpleName: close(327)", "Delete SimpleName: IOException(328)", "Delete SimpleType: IOException(329)", "Delete SimpleName: finish(330)", "Delete MethodInvocation(331)", "Delete ExpressionStatement(332)", "Delete SimpleName: m_buffer(333)", "Delete SimpleName: close(334)", "Delete MethodInvocation(335)", "Delete ExpressionStatement(336)", "Delete Block(337)", "Delete MethodDeclaration(338)", "Delete TextElement: Close an entry. This method MUST be called for all file entries that(339)", "Delete TextElement: contain data. The reason is that we must buffer data written to the(340)", "Delete TextElement: stream in order to satisfy the buffer's record based writes. Thus, there(341)", "Delete TextElement: may be data fragments still being assembled that must be written to the(342)", "Delete TextElement: output stream before this entry is closed and the next entry written.(343)", "Delete TagElement(344)", "Delete SimpleName: IOException(345)", "Delete TextElement:  when an IO error causes operation to fail(346)", "Delete TagElement: @exception(347)", "Delete Javadoc(348)", "Delete Modifier: public(349)", "Delete PrimitiveType: void(350)", "Delete SimpleName: closeEntry(351)", "Delete SimpleName: IOException(352)", "Delete SimpleType: IOException(353)", "Delete SimpleName: m_assemLen(354)", "Delete NumberLiteral: 0(355)", "Delete InfixExpression: >(356)", "Delete PrimitiveType: int(357)", "Delete SimpleName: i(358)", "Delete SimpleName: m_assemLen(359)", "Delete VariableDeclarationFragment(360)", "Delete VariableDeclarationExpression(361)", "Delete SimpleName: i(362)", "Delete QualifiedName: m_assemBuf.length(363)", "Delete InfixExpression: <(364)", "Delete SimpleName: i(365)", "Delete PrefixExpression: ++(366)", "Delete SimpleName: m_assemBuf(367)", "Delete SimpleName: i(368)", "Delete ArrayAccess(369)", "Delete NumberLiteral: 0(370)", "Delete Assignment: =(371)", "Delete ExpressionStatement(372)", "Delete Block(373)", "Delete ForStatement(374)", "Delete SimpleName: m_buffer(375)", "Delete SimpleName: writeRecord(376)", "Delete SimpleName: m_assemBuf(377)", "Delete MethodInvocation(378)", "Delete ExpressionStatement(379)", "Delete SimpleName: m_currBytes(380)", "Delete SimpleName: m_assemLen(381)", "Delete Assignment: +=(382)", "Delete ExpressionStatement(383)", "Delete SimpleName: m_assemLen(384)", "Delete NumberLiteral: 0(385)", "Delete Assignment: =(386)", "Delete ExpressionStatement(387)", "Delete Block(388)", "Delete IfStatement(389)", "Delete SimpleName: m_currBytes(390)", "Delete SimpleName: m_currSize(391)", "Delete InfixExpression: <(392)", "Delete Modifier: final(393)", "Delete SimpleName: String(394)", "Delete SimpleType: String(395)", "Delete SimpleName: message(396)", "Delete StringLiteral: \"entry closed at '\"(397)", "Delete SimpleName: m_currBytes(398)", "Delete StringLiteral: \"' before the '\"(399)", "Delete SimpleName: m_currSize(400)", "Delete StringLiteral: \"' bytes specified in the header were written\"(401)", "Delete InfixExpression: +(402)", "Delete VariableDeclarationFragment(403)", "Delete VariableDeclarationStatement(404)", "Delete SimpleName: IOException(405)", "Delete SimpleType: IOException(406)", "Delete SimpleName: message(407)", "Delete ClassInstanceCreation(408)", "Delete ThrowStatement(409)", "Delete Block(410)", "Delete IfStatement(411)", "Delete Block(412)", "Delete MethodDeclaration(413)", "Delete TextElement: Ends the TAR archive without closing the underlying OutputStream. The(414)", "Delete TextElement: result is that the EOF record of nulls is written.(415)", "Delete TagElement(416)", "Delete SimpleName: IOException(417)", "Delete TextElement:  when an IO error causes operation to fail(418)", "Delete TagElement: @exception(419)", "Delete Javadoc(420)", "Delete Modifier: public(421)", "Delete PrimitiveType: void(422)", "Delete SimpleName: finish(423)", "Delete SimpleName: IOException(424)", "Delete SimpleType: IOException(425)", "Delete SimpleName: writeEOFRecord(426)", "Delete MethodInvocation(427)", "Delete ExpressionStatement(428)", "Delete Block(429)", "Delete MethodDeclaration(430)", "Delete TextElement: Put an entry on the output stream. This writes the entry's header record(431)", "Delete TextElement: and positions the output stream for writing the contents of the entry.(432)", "Delete TextElement: Once this method is called, the stream is ready for calls to write() to(433)", "Delete TextElement: write the entry's contents. Once the contents are written, closeEntry()(434)", "Delete TextElement: <B>MUST</B> be called to ensure that all buffered data is completely(435)", "Delete TextElement: written to the output stream.(436)", "Delete TagElement(437)", "Delete SimpleName: entry(438)", "Delete TextElement:  The TarEntry to be written to the archive.(439)", "Delete TagElement: @param(440)", "Delete SimpleName: IOException(441)", "Delete TextElement:  when an IO error causes operation to fail(442)", "Delete TagElement: @exception(443)", "Delete Javadoc(444)", "Delete Modifier: public(445)", "Delete PrimitiveType: void(446)", "Delete SimpleName: putNextEntry(447)", "Delete Modifier: final(448)", "Delete SimpleName: TarEntry(449)", "Delete SimpleType: TarEntry(450)", "Delete SimpleName: entry(451)", "Delete SingleVariableDeclaration(452)", "Delete SimpleName: IOException(453)", "Delete SimpleType: IOException(454)", "Delete SimpleName: entry(455)", "Delete SimpleName: getName(456)", "Delete MethodInvocation(457)", "Delete SimpleName: length(458)", "Delete MethodInvocation(459)", "Delete QualifiedName: TarEntry.NAMELEN(460)", "Delete InfixExpression: >=(461)", "Delete SimpleName: m_longFileMode(462)", "Delete SimpleName: LONGFILE_GNU(463)", "Delete InfixExpression: ==(464)", "Delete Modifier: final(465)", "Delete SimpleName: TarEntry(466)", "Delete SimpleType: TarEntry(467)", "Delete SimpleName: longLinkEntry(468)", "Delete SimpleName: TarEntry(469)", "Delete SimpleType: TarEntry(470)", "Delete QualifiedName: TarConstants.GNU_LONGLINK(471)", "Delete QualifiedName: TarConstants.LF_GNUTYPE_LONGNAME(472)", "Delete ClassInstanceCreation(473)", "Delete VariableDeclarationFragment(474)", "Delete VariableDeclarationStatement(475)", "Delete SimpleName: longLinkEntry(476)", "Delete SimpleName: setSize(477)", "Delete SimpleName: entry(478)", "Delete SimpleName: getName(479)", "Delete MethodInvocation(480)", "Delete SimpleName: length(481)", "Delete MethodInvocation(482)", "Delete MethodInvocation(483)", "Delete ExpressionStatement(484)", "Delete SimpleName: putNextEntry(485)", "Delete SimpleName: longLinkEntry(486)", "Delete MethodInvocation(487)", "Delete ExpressionStatement(488)", "Delete SimpleName: write(489)", "Delete SimpleName: entry(490)", "Delete SimpleName: getName(491)", "Delete MethodInvocation(492)", "Delete SimpleName: getBytes(493)", "Delete MethodInvocation(494)", "Delete MethodInvocation(495)", "Delete ExpressionStatement(496)", "Delete SimpleName: closeEntry(497)", "Delete MethodInvocation(498)", "Delete ExpressionStatement(499)", "Delete Block(500)", "Delete SimpleName: m_longFileMode(501)", "Delete SimpleName: LONGFILE_TRUNCATE(502)", "Delete InfixExpression: !=(503)", "Delete Modifier: final(504)", "Delete SimpleName: String(505)", "Delete SimpleType: String(506)", "Delete SimpleName: message(507)", "Delete StringLiteral: \"file name '\"(508)", "Delete SimpleName: entry(509)", "Delete SimpleName: getName(510)", "Delete MethodInvocation(511)", "Delete StringLiteral: \"' is too long ( > \"(512)", "Delete QualifiedName: TarEntry.NAMELEN(513)", "Delete StringLiteral: \" bytes)\"(514)", "Delete InfixExpression: +(515)", "Delete VariableDeclarationFragment(516)", "Delete VariableDeclarationStatement(517)", "Delete SimpleName: IOException(518)", "Delete SimpleType: IOException(519)", "Delete SimpleName: message(520)", "Delete ClassInstanceCreation(521)", "Delete ThrowStatement(522)", "Delete Block(523)", "Delete IfStatement(524)", "Delete IfStatement(525)", "Delete Block(526)", "Delete IfStatement(527)", "Delete SimpleName: entry(528)", "Delete SimpleName: writeEntryHeader(529)", "Delete SimpleName: m_recordBuf(530)", "Delete MethodInvocation(531)", "Delete ExpressionStatement(532)", "Delete SimpleName: m_buffer(533)", "Delete SimpleName: writeRecord(534)", "Delete SimpleName: m_recordBuf(535)", "Delete MethodInvocation(536)", "Delete ExpressionStatement(537)", "Delete SimpleName: m_currBytes(538)", "Delete NumberLiteral: 0(539)", "Delete Assignment: =(540)", "Delete ExpressionStatement(541)", "Delete SimpleName: entry(542)", "Delete SimpleName: isDirectory(543)", "Delete MethodInvocation(544)", "Delete SimpleName: m_currSize(545)", "Delete NumberLiteral: 0(546)", "Delete Assignment: =(547)", "Delete ExpressionStatement(548)", "Delete Block(549)", "Delete SimpleName: m_currSize(550)", "Delete PrimitiveType: int(551)", "Delete SimpleName: entry(552)", "Delete SimpleName: getSize(553)", "Delete MethodInvocation(554)", "Delete CastExpression(555)", "Delete Assignment: =(556)", "Delete ExpressionStatement(557)", "Delete Block(558)", "Delete IfStatement(559)", "Delete Block(560)", "Delete MethodDeclaration(561)", "Delete TextElement: Copies the contents of the specified stream into current tar(562)", "Delete TextElement: archive entry.(563)", "Delete TagElement(564)", "Delete SimpleName: input(565)", "Delete TextElement:  The InputStream from which to read entrys data(566)", "Delete TagElement: @param(567)", "Delete SimpleName: IOException(568)", "Delete TextElement:  when an IO error causes operation to fail(569)", "Delete TagElement: @exception(570)", "Delete Javadoc(571)", "Delete Modifier: public(572)", "Delete PrimitiveType: void(573)", "Delete SimpleName: copyEntryContents(574)", "Delete Modifier: final(575)", "Delete SimpleName: InputStream(576)", "Delete SimpleType: InputStream(577)", "Delete SimpleName: input(578)", "Delete SingleVariableDeclaration(579)", "Delete SimpleName: IOException(580)", "Delete SimpleType: IOException(581)", "Delete Modifier: final(582)", "Delete PrimitiveType: byte(583)", "Delete Dimension(584)", "Delete ArrayType: byte[](585)", "Delete SimpleName: buffer(586)", "Delete PrimitiveType: byte(587)", "Delete Dimension(588)", "Delete ArrayType: byte[](589)", "Delete NumberLiteral: 32(590)", "Delete NumberLiteral: 1024(591)", "Delete InfixExpression: *(592)", "Delete ArrayCreation(593)", "Delete VariableDeclarationFragment(594)", "Delete VariableDeclarationStatement(595)", "Delete BooleanLiteral: true(596)", "Delete Modifier: final(597)", "Delete PrimitiveType: int(598)", "Delete SimpleName: numRead(599)", "Delete SimpleName: input(600)", "Delete SimpleName: read(601)", "Delete SimpleName: buffer(602)", "Delete NumberLiteral: 0(603)", "Delete QualifiedName: buffer.length(604)", "Delete MethodInvocation(605)", "Delete VariableDeclarationFragment(606)", "Delete VariableDeclarationStatement(607)", "Delete SimpleName: numRead(608)", "Delete NumberLiteral: 1(609)", "Delete PrefixExpression: -(610)", "Delete InfixExpression: ==(611)", "Delete BreakStatement(612)", "Delete Block(613)", "Delete IfStatement(614)", "Delete SimpleName: write(615)", "Delete SimpleName: buffer(616)", "Delete NumberLiteral: 0(617)", "Delete SimpleName: numRead(618)", "Delete MethodInvocation(619)", "Delete ExpressionStatement(620)", "Delete Block(621)", "Delete WhileStatement(622)", "Delete Block(623)", "Delete MethodDeclaration(624)", "Delete TextElement: Writes a byte to the current tar archive entry. This method simply calls(625)", "Delete TextElement: read( byte[], int, int ).(626)", "Delete TagElement(627)", "Delete SimpleName: data(628)", "Delete TextElement:  The byte written.(629)", "Delete TagElement: @param(630)", "Delete SimpleName: IOException(631)", "Delete TextElement:  when an IO error causes operation to fail(632)", "Delete TagElement: @exception(633)", "Delete Javadoc(634)", "Delete Modifier: public(635)", "Delete PrimitiveType: void(636)", "Delete SimpleName: write(637)", "Delete Modifier: final(638)", "Delete PrimitiveType: int(639)", "Delete SimpleName: data(640)", "Delete SingleVariableDeclaration(641)", "Delete SimpleName: IOException(642)", "Delete SimpleType: IOException(643)", "Delete SimpleName: m_oneBuf(644)", "Delete NumberLiteral: 0(645)", "Delete ArrayAccess(646)", "Delete PrimitiveType: byte(647)", "Delete SimpleName: data(648)", "Delete CastExpression(649)", "Delete Assignment: =(650)", "Delete ExpressionStatement(651)", "Delete SimpleName: write(652)", "Delete SimpleName: m_oneBuf(653)", "Delete NumberLiteral: 0(654)", "Delete NumberLiteral: 1(655)", "Delete MethodInvocation(656)", "Delete ExpressionStatement(657)", "Delete Block(658)", "Delete MethodDeclaration(659)", "Delete TextElement: Writes bytes to the current tar archive entry. This method simply calls(660)", "Delete TextElement: write( byte[], int, int ).(661)", "Delete TagElement(662)", "Delete SimpleName: buffer(663)", "Delete TextElement:  The buffer to write to the archive.(664)", "Delete TagElement: @param(665)", "Delete SimpleName: IOException(666)", "Delete TextElement:  when an IO error causes operation to fail(667)", "Delete TagElement: @exception(668)", "Delete Javadoc(669)", "Delete Modifier: public(670)", "Delete PrimitiveType: void(671)", "Delete SimpleName: write(672)", "Delete Modifier: final(673)", "Delete PrimitiveType: byte(674)", "Delete Dimension(675)", "Delete ArrayType: byte[](676)", "Delete SimpleName: buffer(677)", "Delete SingleVariableDeclaration(678)", "Delete SimpleName: IOException(679)", "Delete SimpleType: IOException(680)", "Delete SimpleName: write(681)", "Delete SimpleName: buffer(682)", "Delete NumberLiteral: 0(683)", "Delete QualifiedName: buffer.length(684)", "Delete MethodInvocation(685)", "Delete ExpressionStatement(686)", "Delete Block(687)", "Delete MethodDeclaration(688)", "Delete TextElement: Writes bytes to the current tar archive entry. This method is aware of(689)", "Delete TextElement: the current entry and will throw an exception if you attempt to write(690)", "Delete TextElement: bytes past the length specified for the current entry. The method is also(691)", "Delete TextElement: (painfully) aware of the record buffering required by TarBuffer, and(692)", "Delete TextElement: manages buffers that are not a multiple of recordsize in length,(693)", "Delete TextElement: including assembling records from small buffers.(694)", "Delete TagElement(695)", "Delete SimpleName: buffer(696)", "Delete TextElement:  The buffer to write to the archive.(697)", "Delete TagElement: @param(698)", "Delete SimpleName: offset(699)", "Delete TextElement:  The offset in the buffer from which to get bytes.(700)", "Delete TagElement: @param(701)", "Delete SimpleName: count(702)", "Delete TextElement:  The number of bytes to write.(703)", "Delete TagElement: @param(704)", "Delete SimpleName: IOException(705)", "Delete TextElement:  when an IO error causes operation to fail(706)", "Delete TagElement: @exception(707)", "Delete Javadoc(708)", "Delete Modifier: public(709)", "Delete PrimitiveType: void(710)", "Delete SimpleName: write(711)", "Delete Modifier: final(712)", "Delete PrimitiveType: byte(713)", "Delete Dimension(714)", "Delete ArrayType: byte[](715)", "Delete SimpleName: buffer(716)", "Delete SingleVariableDeclaration(717)", "Delete Modifier: final(718)", "Delete PrimitiveType: int(719)", "Delete SimpleName: offset(720)", "Delete SingleVariableDeclaration(721)", "Delete Modifier: final(722)", "Delete PrimitiveType: int(723)", "Delete SimpleName: count(724)", "Delete SingleVariableDeclaration(725)", "Delete SimpleName: IOException(726)", "Delete SimpleType: IOException(727)", "Delete PrimitiveType: int(728)", "Delete SimpleName: position(729)", "Delete SimpleName: offset(730)", "Delete VariableDeclarationFragment(731)", "Delete VariableDeclarationStatement(732)", "Delete PrimitiveType: int(733)", "Delete SimpleName: numToWrite(734)", "Delete SimpleName: count(735)", "Delete VariableDeclarationFragment(736)", "Delete VariableDeclarationStatement(737)", "Delete SimpleName: m_currBytes(738)", "Delete SimpleName: numToWrite(739)", "Delete InfixExpression: +(740)", "Delete ParenthesizedExpression(741)", "Delete SimpleName: m_currSize(742)", "Delete InfixExpression: >(743)", "Delete Modifier: final(744)", "Delete SimpleName: String(745)", "Delete SimpleType: String(746)", "Delete SimpleName: message(747)", "Delete StringLiteral: \"request to write '\"(748)", "Delete SimpleName: numToWrite(749)", "Delete StringLiteral: \"' bytes exceeds size in header of '\"(750)", "Delete SimpleName: m_currSize(751)", "Delete StringLiteral: \"' bytes\"(752)", "Delete InfixExpression: +(753)", "Delete VariableDeclarationFragment(754)", "Delete VariableDeclarationStatement(755)", "Delete SimpleName: IOException(756)", "Delete SimpleType: IOException(757)", "Delete SimpleName: message(758)", "Delete ClassInstanceCreation(759)", "Delete ThrowStatement(760)", "Delete Block(761)", "Delete IfStatement(762)", "Delete SimpleName: m_assemLen(763)", "Delete NumberLiteral: 0(764)", "Delete InfixExpression: >(765)", "Delete SimpleName: m_assemLen(766)", "Delete SimpleName: numToWrite(767)", "Delete InfixExpression: +(768)", "Delete ParenthesizedExpression(769)", "Delete QualifiedName: m_recordBuf.length(770)", "Delete InfixExpression: >=(771)", "Delete Modifier: final(772)", "Delete PrimitiveType: int(773)", "Delete SimpleName: length(774)", "Delete QualifiedName: m_recordBuf.length(775)", "Delete SimpleName: m_assemLen(776)", "Delete InfixExpression: -(777)", "Delete VariableDeclarationFragment(778)", "Delete VariableDeclarationStatement(779)", "Delete SimpleName: System(780)", "Delete SimpleName: arraycopy(781)", "Delete SimpleName: m_assemBuf(782)", "Delete NumberLiteral: 0(783)", "Delete SimpleName: m_recordBuf(784)", "Delete NumberLiteral: 0(785)", "Delete SimpleName: m_assemLen(786)", "Delete MethodInvocation(787)", "Delete ExpressionStatement(788)", "Delete SimpleName: System(789)", "Delete SimpleName: arraycopy(790)", "Delete SimpleName: buffer(791)", "Delete SimpleName: position(792)", "Delete SimpleName: m_recordBuf(793)", "Delete SimpleName: m_assemLen(794)", "Delete SimpleName: length(795)", "Delete MethodInvocation(796)", "Delete ExpressionStatement(797)", "Delete SimpleName: m_buffer(798)", "Delete SimpleName: writeRecord(799)", "Delete SimpleName: m_recordBuf(800)", "Delete MethodInvocation(801)", "Delete ExpressionStatement(802)", "Delete SimpleName: m_currBytes(803)", "Delete QualifiedName: m_recordBuf.length(804)", "Delete Assignment: +=(805)", "Delete ExpressionStatement(806)", "Delete SimpleName: position(807)", "Delete SimpleName: length(808)", "Delete Assignment: +=(809)", "Delete ExpressionStatement(810)", "Delete SimpleName: numToWrite(811)", "Delete SimpleName: length(812)", "Delete Assignment: -=(813)", "Delete ExpressionStatement(814)", "Delete SimpleName: m_assemLen(815)", "Delete NumberLiteral: 0(816)", "Delete Assignment: =(817)", "Delete ExpressionStatement(818)", "Delete Block(819)", "Delete SimpleName: System(820)", "Delete SimpleName: arraycopy(821)", "Delete SimpleName: buffer(822)", "Delete SimpleName: position(823)", "Delete SimpleName: m_assemBuf(824)", "Delete SimpleName: m_assemLen(825)", "Delete SimpleName: numToWrite(826)", "Delete MethodInvocation(827)", "Delete ExpressionStatement(828)", "Delete SimpleName: position(829)", "Delete SimpleName: numToWrite(830)", "Delete Assignment: +=(831)", "Delete ExpressionStatement(832)", "Delete SimpleName: m_assemLen(833)", "Delete SimpleName: numToWrite(834)", "Delete Assignment: +=(835)", "Delete ExpressionStatement(836)", "Delete SimpleName: numToWrite(837)", "Delete SimpleName: numToWrite(838)", "Delete Assignment: -=(839)", "Delete ExpressionStatement(840)", "Delete Block(841)", "Delete IfStatement(842)", "Delete Block(843)", "Delete IfStatement(844)", "Delete SimpleName: numToWrite(845)", "Delete NumberLiteral: 0(846)", "Delete InfixExpression: >(847)", "Delete SimpleName: numToWrite(848)", "Delete QualifiedName: m_recordBuf.length(849)", "Delete InfixExpression: <(850)", "Delete SimpleName: System(851)", "Delete SimpleName: arraycopy(852)", "Delete SimpleName: buffer(853)", "Delete SimpleName: position(854)", "Delete SimpleName: m_assemBuf(855)", "Delete SimpleName: m_assemLen(856)", "Delete SimpleName: numToWrite(857)", "Delete MethodInvocation(858)", "Delete ExpressionStatement(859)", "Delete SimpleName: m_assemLen(860)", "Delete SimpleName: numToWrite(861)", "Delete Assignment: +=(862)", "Delete ExpressionStatement(863)", "Delete BreakStatement(864)", "Delete Block(865)", "Delete IfStatement(866)", "Delete SimpleName: m_buffer(867)", "Delete SimpleName: writeRecord(868)", "Delete SimpleName: buffer(869)", "Delete SimpleName: position(870)", "Delete MethodInvocation(871)", "Delete ExpressionStatement(872)", "Delete PrimitiveType: int(873)", "Delete SimpleName: num(874)", "Delete QualifiedName: m_recordBuf.length(875)", "Delete VariableDeclarationFragment(876)", "Delete VariableDeclarationStatement(877)", "Delete SimpleName: m_currBytes(878)", "Delete SimpleName: num(879)", "Delete Assignment: +=(880)", "Delete ExpressionStatement(881)", "Delete SimpleName: numToWrite(882)", "Delete SimpleName: num(883)", "Delete Assignment: -=(884)", "Delete ExpressionStatement(885)", "Delete SimpleName: position(886)", "Delete SimpleName: num(887)", "Delete Assignment: +=(888)", "Delete ExpressionStatement(889)", "Delete Block(890)", "Delete WhileStatement(891)", "Delete Block(892)", "Delete MethodDeclaration(893)", "Delete TextElement: Write an EOF (end of archive) record to the tar archive. An EOF record(894)", "Delete TextElement: consists of a record of all zeros.(895)", "Delete TagElement(896)", "Delete SimpleName: IOException(897)", "Delete TextElement:  when an IO error causes operation to fail(898)", "Delete TagElement: @exception(899)", "Delete Javadoc(900)", "Delete Modifier: private(901)", "Delete PrimitiveType: void(902)", "Delete SimpleName: writeEOFRecord(903)", "Delete SimpleName: IOException(904)", "Delete SimpleType: IOException(905)", "Delete PrimitiveType: int(906)", "Delete SimpleName: i(907)", "Delete NumberLiteral: 0(908)", "Delete VariableDeclarationFragment(909)", "Delete VariableDeclarationExpression(910)", "Delete SimpleName: i(911)", "Delete QualifiedName: m_recordBuf.length(912)", "Delete InfixExpression: <(913)", "Delete SimpleName: i(914)", "Delete PrefixExpression: ++(915)", "Delete SimpleName: m_recordBuf(916)", "Delete SimpleName: i(917)", "Delete ArrayAccess(918)", "Delete NumberLiteral: 0(919)", "Delete Assignment: =(920)", "Delete ExpressionStatement(921)", "Delete Block(922)", "Delete ForStatement(923)", "Delete SimpleName: m_buffer(924)", "Delete SimpleName: writeRecord(925)", "Delete SimpleName: m_recordBuf(926)", "Delete MethodInvocation(927)", "Delete ExpressionStatement(928)", "Delete Block(929)", "Delete MethodDeclaration(930)", "Delete TypeDeclaration: class(931)"]}}, {"AsiExtraField_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.io.compress.zip"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.zip.CRC32", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.zip.ZipException", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleType: ZipShort", "DEL ReturnStatement", "DEL PrimitiveType: boolean", "DEL SimpleName: setDirectory", "DEL NumberLiteral: 4", "DEL Modifier: final", "DEL SimpleName: getLocalFileDataLength", "DEL SimpleName: result", "DEL Block", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL TextElement: CRC           Long            CRC-32 of the remaining data", "DEL SimpleName: setMode", "DEL SimpleName: AsiExtraField", "DEL MethodInvocation", "DEL TagElement", "DEL Modifier: private", "DEL TextElement:  The Link value", "DEL MethodInvocation", "DEL ArrayType: byte[]", "DEL NumberLiteral: 0x756E", "DEL SimpleName: getMode", "DEL SimpleName: getHeaderID", "DEL TextElement:  The new UserId value", "DEL SimpleName: System", "DEL NumberLiteral: 0", "DEL SimpleName: type", "DEL ClassInstanceCreation", "DEL NumberLiteral: 8", "DEL CastExpression", "DEL ReturnStatement", "DEL SimpleName: tmp", "DEL SimpleName: getGroupID", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL TagElement", "DEL TextElement:  1.1", "DEL Block", "DEL TagElement", "DEL TagElement: @return", "DEL PrimitiveType: void", "DEL SimpleName: getLinkedFile", "DEL MethodInvocation", "DEL SimpleType: CRC32", "DEL SimpleName: type", "DEL Modifier: public", "DEL TextElement:  1.1", "DEL SimpleName: ZipException", "DEL PrimitiveType: boolean", "DEL SimpleName: data", "DEL SimpleName: arraycopy", "DEL SimpleName: m_gid", "DEL SimpleName: DIR_FLAG", "DEL SimpleName: offset", "DEL TextElement: Name of linked file", "DEL SimpleName: offset", "DEL ReturnStatement", "DEL SimpleName: getValue", "DEL TextElement:  The new Directory value", "DEL TagElement: @return", "DEL TextElement:  1.1", "DEL SimpleName: reset", "DEL SimpleName: getLocalFileDataLength", "DEL SimpleName: dirFlag", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: ZipLong", "DEL TextElement: Value         Size            Description", "DEL SimpleType: String", "DEL SimpleName: name", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL SimpleName: System", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: ZipShort", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL SimpleType: ZipShort", "DEL SimpleName: linkArray", "DEL MethodInvocation", "DEL TextElement:  The CentralDirectoryData value", "DEL Javadoc", "DEL ReturnStatement", "DEL TagElement: @param", "DEL Javadoc", "DEL SimpleType: ZipExtraField", "DEL SimpleName: getBytes", "DEL Dimension", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL NumberLiteral: 10", "DEL SingleVariableDeclaration", "DEL QualifiedName: linkArray.length", "DEL Javadoc", "DEL TextElement: Delegate to local file data.", "DEL SimpleType: ZipShort", "DEL ArrayCreation", "DEL Modifier: public", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL TextElement: Indicate that this entry is a symbolic link to the given filename.", "DEL Dimension", "DEL Javadoc", "DEL NumberLiteral: 0", "DEL TagElement: @throws", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: buffer", "DEL Modifier: public", "DEL SimpleType: ZipLong", "DEL NumberLiteral: 0", "DEL TagElement: @since", "DEL FieldAccess", "DEL FieldDeclaration", "DEL SimpleName: ZipException", "DEL SimpleName: m_gid", "DEL MethodDeclaration", "DEL Assignment: =", "DEL StringLiteral: \"\"", "DEL SimpleName: String", "DEL TextElement:  The Directory value", "DEL ExpressionStatement", "DEL TextElement:  1.1", "DEL TextElement: (var.)        variable        symbolic link filename", "DEL SimpleType: ZipShort", "DEL SimpleName: update", "DEL SimpleName: ZipShort", "DEL ClassInstanceCreation", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL TextElement: GID           Short           group ID", "DEL ArrayType: byte[]", "DEL SimpleName: m_uid", "DEL TextElement:  The UserId value", "DEL SimpleType: String", "DEL MethodRef", "DEL ClassInstanceCreation", "DEL ArrayCreation", "DEL Modifier: private", "DEL TextElement: Adds Unix file permission and UID/GID fields as well as symbolic link", "DEL InfixExpression: +", "DEL Modifier: final", "DEL SimpleName: ZipShort", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL TextElement: Is this an entry for a directory?", "DEL Dimension", "DEL Modifier: public", "DEL SimpleName: getLocalFileDataLength", "DEL ExpressionStatement", "DEL TextElement:  1.1", "DEL SimpleName: tmp", "DEL TextElement:  The HeaderId value", "DEL SimpleType: ZipException", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: getValue", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL Block", "DEL NumberLiteral: 4", "DEL Block", "DEL ArrayCreation", "DEL SimpleName: PERM_MASK", "DEL ArrayType: byte[]", "DEL TextElement: Indicate whether this entry is a directory.", "DEL Block", "DEL SimpleType: Cloneable", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL SimpleName: mode", "DEL SimpleType: ZipShort", "DEL TextElement:  1.1", "DEL ThrowStatement", "DEL SimpleName: getLocalFileDataData", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SimpleName: arraycopy", "DEL SimpleName: givenChecksum", "DEL SimpleName: getValue", "DEL SimpleName: uid", "DEL MethodDeclaration", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: getUserId", "DEL Javadoc", "DEL TextElement:  The GroupId value", "DEL SimpleType: ZipShort", "DEL NumberLiteral: 4", "DEL SimpleName: setUserId", "DEL TagElement: @return", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL Modifier: public", "DEL TextElement: not a symbolic link.", "DEL SimpleName: m_gid", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL InfixExpression: &", "DEL SimpleName: String", "DEL TextElement:  Name of the file this entry links to, empty String if it is", "DEL SimpleName: getLinkedFile", "DEL TextElement:  1.1", "DEL TagElement: @deprecated", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL SimpleName: uid", "DEL SimpleName: length", "DEL SimpleName: String", "DEL TextElement: Set the group id.", "DEL TagElement: @since", "DEL SimpleName: getValue", "DEL SimpleName: getGroupId", "DEL TagElement", "DEL SimpleName: getBytes", "DEL VariableDeclarationFragment", "DEL SimpleName: getMode", "DEL ReturnStatement", "DEL Modifier: private", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleName: m_uid", "DEL SimpleName: ZipLong", "DEL SimpleType: ZipShort", "DEL StringLiteral: \" instead of \"", "DEL PrimitiveType: int", "DEL TagElement: @since", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: getMode", "DEL TagElement: @since", "DEL TagElement: @version", "DEL SimpleName: ZipShort", "DEL NumberLiteral: 4", "DEL SimpleName: ZipShort", "DEL SimpleName: name", "DEL StringLiteral: \"\"", "DEL SimpleName: m_crc", "DEL SimpleName: ZipShort", "DEL NumberLiteral: 0", "DEL Javadoc", "DEL SimpleType: UnixStat", "DEL SimpleType: ZipShort", "DEL QualifiedName: linkArray.length", "DEL TagElement", "DEL SimpleName: uid", "DEL VariableDeclarationStatement", "DEL MethodRef", "DEL NumberLiteral: 2", "DEL TextElement: TSize         Short           total data size for this block", "DEL NumberLiteral: 8", "DEL Javadoc", "DEL TextElement:  The new Mode value", "DEL SimpleName: tmp", "DEL SimpleName: setDirectory", "DEL TextElement:  1.1", "DEL SimpleName: arraycopy", "DEL SimpleName: ZipShort", "DEL Javadoc", "DEL MethodInvocation", "DEL TagElement: @param", "DEL TextElement:  1.1", "DEL Javadoc", "DEL SimpleName: getMode", "DEL MethodDeclaration", "DEL TextElement:  The Mode value", "DEL SimpleName: m_crc", "DEL NumberLiteral: 2", "DEL SimpleType: String", "DEL SimpleName: getMode", "DEL SimpleName: getLinkedFile", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SimpleName: length", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: buffer", "DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL NumberLiteral: 2", "DEL TagElement: @since", "DEL SimpleName: length", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL NumberLiteral: 0", "DEL SimpleName: m_uid", "DEL NumberLiteral: 4", "DEL TextElement: ftp://ftp.uu.net/pub/archiving/zip/doc/</a> </p> <p>", "DEL Modifier: final", "DEL ExpressionStatement", "DEL Javadoc", "DEL Block", "DEL SimpleName: update", "DEL Modifier: final", "DEL SimpleName: gid", "DEL SimpleName: getGroupID", "DEL ParenthesizedExpression", "DEL MethodDeclaration", "DEL Modifier: public", "DEL QualifiedName: data.length", "DEL NumberLiteral: 2", "DEL MethodDeclaration", "DEL TagElement: @since", "DEL TextElement:  Use getUserID()", "DEL ParenthesizedExpression", "DEL MethodRefParameter", "DEL TextElement:  1.1", "DEL Assignment: =", "DEL MethodInvocation", "DEL TextElement: File mode of this file.", "DEL IfStatement", "DEL SimpleName: ZipShort", "DEL Block", "DEL TextElement:  1.1", "DEL NumberLiteral: 0", "DEL TextElement: The Header-ID.", "DEL SimpleName: m_dirFlag", "DEL TextElement:  1.1", "DEL QualifiedName: linkArray.length", "DEL ReturnStatement", "DEL SimpleName: System", "DEL Block", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL SimpleName: tmp", "DEL ParenthesizedExpression", "DEL TagElement: @since", "DEL Assignment: =", "DEL Modifier: public", "DEL PrimitiveType: byte", "DEL VariableDeclarationFragment", "DEL SimpleName: tmp", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: isDirectory", "DEL SimpleName: dirFlag", "DEL NumberLiteral: 0", "DEL ClassInstanceCreation", "DEL TextElement:  the buffer", "DEL TextElement: UID           Short           user ID", "DEL TagElement: @see", "DEL NumberLiteral: 0", "DEL SimpleName: ZipShort", "DEL TextElement: empty string - if entry is not a symbolic link.</p>", "DEL TagElement", "DEL TextElement:  Description of Parameter", "DEL SimpleName: getBytes", "DEL InfixExpression: -", "DEL PrimitiveType: int", "DEL TextElement:  on error", "DEL NumberLiteral: 10", "DEL Modifier: public", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL SimpleName: name", "DEL SimpleName: m_uid", "DEL SimpleName: System", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SimpleName: offset", "DEL Block", "DEL ExpressionStatement", "DEL TextElement:  Use getGroupID() instead", "DEL SimpleName: m_dirFlag", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: data", "DEL ArrayType: byte[]", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL SimpleName: checksum", "DEL Block", "DEL SimpleName: parseFromLocalFileData", "DEL SimpleName: mode", "DEL MethodInvocation", "DEL Modifier: public", "DEL PrefixExpression: !", "DEL ExpressionStatement", "DEL TagElement", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL Dimension", "DEL SimpleName: arraycopy", "DEL PrimitiveType: long", "DEL TextElement: length specifier.", "DEL SimpleName: System", "DEL SimpleName: setUserID", "DEL Modifier: private", "DEL NumberLiteral: 4", "DEL TextElement:  the length of data in buffer", "DEL Block", "DEL SimpleName: getLocalFileDataData", "DEL SimpleName: buffer", "DEL SimpleName: mode", "DEL InfixExpression: -", "DEL MethodDeclaration", "DEL PrimitiveType: void", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 6", "DEL PrimitiveType: int", "DEL SimpleName: setLinkedFile", "DEL InfixExpression: |", "DEL TagElement: @since", "DEL Modifier: public", "DEL TagElement: @since", "DEL MethodInvocation", "DEL TagElement: @since", "DEL SimpleName: buffer", "DEL MethodDeclaration", "DEL Block", "DEL PrimitiveType: int", "DEL TextElement: Set the user id.", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: arraycopy", "DEL TagElement", "DEL IfStatement", "DEL SimpleName: ZipExtraField", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: getBytes", "DEL MethodInvocation", "DEL SimpleName: length", "DEL Modifier: public", "DEL SimpleName: getBytes", "DEL SimpleName: toHexString", "DEL FieldDeclaration", "DEL SimpleName: isDirectory", "DEL TextElement: Get the group id.", "DEL NumberLiteral: 4", "DEL MethodInvocation", "DEL Modifier: public", "DEL TagElement: @param", "DEL ParenthesizedExpression", "DEL PrimitiveType: byte", "DEL ExpressionStatement", "DEL TagElement", "DEL TextElement: Standard Unix stat(2) file mode.", "DEL TextElement:  The new UserId value", "DEL ClassInstanceCreation", "DEL SimpleName: System", "DEL SimpleName: m_link", "DEL ClassInstanceCreation", "DEL InfixExpression: +", "DEL Block", "DEL TagElement: @since", "DEL SimpleName: LINK_FLAG", "DEL MethodDeclaration", "DEL Dimension", "DEL Block", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL TagElement: @deprecated", "DEL Modifier: public", "DEL TextElement:  1.1", "DEL TagElement: @return", "DEL TagElement: @since", "DEL SimpleName: CRC32", "DEL ExpressionStatement", "DEL TagElement: @since", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TextElement: specifier.", "DEL PrimitiveType: byte", "DEL NumberLiteral: 2", "DEL SimpleName: linkArray", "DEL ArrayType: byte[]", "DEL SimpleName: data", "DEL PrimitiveType: int", "DEL TextElement: Is this entry a symbolic link?", "DEL TagElement: @since", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleName: toHexString", "DEL PrimitiveType: int", "DEL TextElement:  the offset into buffer", "DEL PrimitiveType: byte", "DEL SimpleType: CRC32", "DEL TagElement", "DEL SimpleName: FILE_FLAG", "DEL MethodDeclaration", "DEL TextElement: Get the user id.", "DEL TagElement: @since", "DEL MethodInvocation", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL TextElement:  name of the file this entry links to if it is a symbolic link,", "DEL InfixExpression: &&", "DEL ArrayType: byte[]", "DEL ParenthesizedExpression", "DEL TagElement: @param", "DEL TextElement: Get the group id.", "DEL TagElement: @return", "DEL SimpleName: linkArray", "DEL TextElement:  1.1", "DEL ReturnStatement", "DEL SimpleName: Long", "DEL VariableDeclarationFragment", "DEL SimpleName: realChecksum", "DEL TextElement:  1.1", "DEL SimpleName: setMode", "DEL PrimitiveType: byte", "DEL TagElement: @return", "DEL TextElement:  1.1", "DEL SimpleName: m_crc", "DEL InfixExpression: +", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: mode", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL TagElement: @since", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodInvocation", "DEL ReturnStatement", "DEL PrimitiveType: int", "DEL PrimitiveType: byte", "DEL TextElement: Delegate to local file data.", "DEL InfixExpression: -", "DEL SimpleName: m_mode", "DEL SimpleName: result", "DEL PrimitiveType: int", "DEL SimpleName: m_gid", "DEL ReturnStatement", "DEL InfixExpression: !=", "DEL TagElement: @since", "DEL Javadoc", "DEL NumberLiteral: 2", "DEL Modifier: final", "DEL TagElement", "DEL Javadoc", "DEL SimpleName: givenChecksum", "DEL SimpleName: realChecksum", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL NumberLiteral: 0", "DEL TagElement", "DEL SimpleName: checksum", "DEL MethodDeclaration", "DEL Block", "DEL Dimension", "DEL SimpleName: realChecksum", "DEL SimpleName: gid", "DEL SimpleName: getValue", "DEL TagElement: @return", "DEL TagElement: @since", "DEL TextElement: Is this entry a directory?", "DEL ParenthesizedExpression", "DEL SimpleType: ZipShort", "DEL SimpleName: isLink", "DEL PrimitiveType: int", "DEL PrimitiveType: void", "DEL TextElement: The actual data to put into local file data - without Header-ID or length", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: m_crc", "DEL NumberLiteral: 6", "DEL MethodInvocation", "DEL SimpleName: System", "DEL Javadoc", "DEL SimpleName: data", "DEL TextElement: User ID.", "DEL Block", "DEL TagElement: @return", "DEL NumberLiteral: 0", "DEL SimpleName: m_mode", "DEL PrimitiveType: int", "DEL TagElement: @return", "DEL SimpleName: getBytes", "DEL Modifier: private", "DEL SimpleName: length", "DEL SingleVariableDeclaration", "DEL TextElement:  1.1", "DEL PrimitiveType: int", "DEL SimpleName: isLink", "DEL MethodInvocation", "DEL SimpleName: isLink", "DEL SimpleName: linkArray", "DEL TextElement: the empty string otherwise.", "DEL Modifier: public", "DEL SimpleType: ZipShort", "DEL Block", "DEL SimpleName: uid", "DEL SimpleName: tmp", "DEL Javadoc", "DEL NumberLiteral: 2", "DEL ExpressionStatement", "DEL SimpleName: offset", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL SimpleName: System", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL TagElement: @param", "DEL SimpleName: tmp", "DEL PrimitiveType: void", "DEL TextElement:  1.1", "DEL ExpressionStatement", "DEL SimpleName: m_mode", "DEL Dimension", "DEL TagElement: @return", "DEL TextElement: href=\"ftp://ftp.uu.net/pub/archiving/zip/doc/\">", "DEL Assignment: =", "DEL SimpleName: ZipLong", "DEL TagElement", "DEL TextElement: Get the file mode for given permissions with the correct file type.", "DEL Assignment: =", "DEL Modifier: public", "DEL SimpleType: ZipLong", "DEL TagElement", "DEL PrimitiveType: void", "DEL TagElement", "DEL PrimitiveType: byte", "DEL SimpleName: m_link", "DEL SimpleName: Long", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: DIR_FLAG", "DEL SimpleName: getUserID", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ArrayType: byte[]", "DEL SimpleName: ZipLong", "DEL TagElement", "DEL ExpressionStatement", "DEL TextElement: handling. <p>", "DEL Block", "DEL TextElement: Length of the extra field in the local file data - without Header-ID or", "DEL SimpleName: getBytes", "DEL Modifier: private", "DEL TextElement:  The LocalFileDataData value", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL TextElement: Get the user id.", "DEL SimpleName: reset", "DEL MethodInvocation", "DEL SimpleName: m_mode", "DEL TextElement: device numbers are currently not supported.</p>", "DEL Block", "DEL TextElement: This class uses the ASi extra field in the format: <pre>", "DEL SimpleType: ZipException", "DEL Dimension", "DEL SimpleName: arraycopy", "DEL SimpleName: ZipException", "DEL TagElement", "DEL ArrayType: byte[]", "DEL Assignment: =", "DEL Modifier: final", "DEL TextElement:  1.1", "DEL Dimension", "DEL MethodRef", "DEL SimpleName: arraycopy", "DEL Modifier: private", "DEL TextElement: File this entry points to, if it is a symbolic link. <p>", "DEL ParenthesizedExpression", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL TagElement: @return", "DEL TextElement: SizDev        Long            symlink'd size OR major/minor dev num", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: getLinkedFile", "DEL FieldDeclaration", "DEL SimpleName: result", "DEL Block", "DEL SimpleName: result", "DEL InfixExpression: !=", "DEL InfixExpression: +", "DEL VariableDeclarationFragment", "DEL PrimitiveType: byte", "DEL SimpleName: String", "DEL Modifier: protected", "DEL Block", "DEL MethodInvocation", "DEL Modifier: static", "DEL SimpleName: getCentralDirectoryData", "DEL PrimitiveType: long", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL TagElement: @since", "DEL Assignment: =", "DEL SimpleName: data", "DEL TagElement: @see", "DEL SimpleName: uid", "DEL QualifiedName: data.length", "DEL PrimitiveType: long", "DEL Modifier: public", "DEL TextElement: Group ID.", "DEL TagElement", "DEL Modifier: public", "DEL TextElement:  1.1", "DEL ParenthesizedExpression", "DEL SimpleType: ZipShort", "DEL TextElement: Populate data from this array as if it was in local file data.", "DEL NumberLiteral: 2", "DEL Javadoc", "DEL SimpleName: System", "DEL TextElement:  $Revision: 1.3 $", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: setGroupId", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL TagElement: @since", "DEL Assignment: =", "DEL SimpleName: m_uid", "DEL QualifiedName: linkArray.length", "DEL SimpleName: linkArray", "DEL SimpleName: arraycopy", "DEL PrimitiveType: byte", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL InfixExpression: &", "DEL TagElement: @return", "DEL ClassInstanceCreation", "DEL SimpleName: getUserID", "DEL Javadoc", "DEL SimpleName: getValue", "DEL SimpleName: type", "DEL FieldDeclaration", "DEL Javadoc", "DEL ArrayType: byte[]", "DEL TextElement: Mode          Short           file permissions", "DEL Assignment: =", "DEL TextElement: </pre> taken from appnote.iz (Info-ZIP note, 981119) found at <a", "DEL TextElement:  1.1", "DEL SimpleName: m_gid", "DEL SimpleName: m_link", "DEL MethodInvocation", "DEL SimpleName: m_mode", "DEL PrimitiveType: byte", "DEL SimpleName: ZipShort", "DEL ExpressionStatement", "DEL Modifier: final", "DEL SimpleName: getValue", "DEL SimpleName: mode", "DEL TextElement: File mode of this file.", "DEL MethodInvocation", "DEL SimpleName: HEADER_ID", "DEL TagElement: @since", "DEL TextElement:  The CentralDirectoryLength value", "DEL SimpleName: UnixStat", "DEL NumberLiteral: 4", "DEL ArrayType: byte[]", "DEL TagElement: @deprecated", "DEL MethodInvocation", "DEL Javadoc", "DEL TagElement: @since", "DEL PrimitiveType: byte", "DEL VariableDeclarationStatement", "DEL SimpleName: m_crc", "DEL TagElement", "DEL SimpleName: newMode", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 4", "DEL TagElement: @param", "DEL SimpleName: getValue", "DEL ArrayType: byte[]", "DEL SimpleName: newMode", "DEL ArrayCreation", "DEL Javadoc", "DEL TextElement:  1.1", "DEL SimpleType: ZipLong", "DEL PrimitiveType: int", "DEL SimpleName: m_link", "DEL SimpleName: mode", "DEL MethodInvocation", "DEL SimpleName: length", "DEL TextElement: Instance used to calculate checksums.", "DEL SimpleName: getUserID", "DEL Modifier: final", "DEL SimpleName: gid", "DEL SimpleName: data", "DEL TagElement: @since", "DEL SimpleName: m_crc", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: ZipShort", "DEL TextElement:  Use setUserID(int)", "DEL TextElement:  The Mode value", "DEL ArrayType: byte[]", "DEL StringLiteral: \"bad CRC checksum \"", "DEL TextElement:  The LocalFileDataLength value", "DEL SimpleName: uid", "DEL TextElement:  The new GroupId value", "DEL TextElement:  The GroupId value", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: m_mode", "DEL NumberLiteral: 4", "DEL SimpleName: getGroupID", "DEL SimpleName: getCentralDirectoryLength", "DEL Assignment: =", "DEL SimpleName: CRC32", "DEL SimpleName: m_mode", "DEL MethodDeclaration", "DEL TagElement: @author", "DEL Block", "DEL SimpleType: ZipLong", "DEL VariableDeclarationStatement", "DEL SimpleName: HEADER_ID", "DEL TextElement: Short is two bytes and Long is four bytes in big endian byte and word order,", "DEL SimpleName: ZipShort", "DEL Block", "DEL TagElement: @since", "DEL TagElement: @param", "DEL NumberLiteral: 0", "DEL TextElement: Set the user id.", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL Javadoc", "DEL Block", "DEL Javadoc", "DEL TextElement:  The UserID value", "DEL SimpleName: tmp", "DEL VariableDeclarationFragment", "DEL TagElement: @see", "DEL TagElement", "DEL PrimitiveType: int", "DEL SimpleName: Cloneable", "DEL MethodInvocation", "DEL SimpleName: newMode", "DEL SimpleName: m_uid", "DEL TextElement:  <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>", "DEL SimpleName: data", "DEL Assignment: =", "DEL SimpleName: getMode", "DEL MethodInvocation", "DEL TextElement:  1.1", "DEL TextElement: (Unix3) 0x756e        Short           tag for this extra block type", "DEL MethodDeclaration", "DEL TextElement:  1.1", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL TextElement: -----         ----            -----------", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleName: ZipShort", "DEL SimpleName: m_link", "DEL PrimitiveType: boolean", "DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL TypeDeclaration: class", "DEL ReturnStatement", "DEL Assignment: =", "DEL SimpleName: data", "DEL TagElement: @since", "DEL SimpleName: m_crc", "DEL TagElement: @return", "DEL PrimitiveType: byte", "DEL SimpleName: givenChecksum", "DEL SimpleName: setUserID", "DEL ClassInstanceCreation", "DEL SimpleName: arraycopy", "DEL SimpleName: type", "DEL SimpleName: dirFlag", "DEL TextElement:  1.1", "DEL TagElement: @param", "DEL SimpleName: m_dirFlag", "DEL VariableDeclarationFragment", "DEL PrimitiveType: void", "DEL TagElement: @return", "DEL ParenthesizedExpression"]}]}}, {"AsiExtraField_diff": {"operations": ["Delete QualifiedName: org.apache.commons.io.compress.zip(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.zip.CRC32(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.zip.ZipException(4)", "Delete ImportDeclaration(5)", "Delete TextElement: Adds Unix file permission and UID/GID fields as well as symbolic link(6)", "Delete TextElement: handling. <p>(7)", "Delete TextElement: This class uses the ASi extra field in the format: <pre>(8)", "Delete TextElement: Value         Size            Description(9)", "Delete TextElement: -----         ----            -----------(10)", "Delete TextElement: (Unix3) 0x756e        Short           tag for this extra block type(11)", "Delete TextElement: TSize         Short           total data size for this block(12)", "Delete TextElement: CRC           Long            CRC-32 of the remaining data(13)", "Delete TextElement: Mode          Short           file permissions(14)", "Delete TextElement: SizDev        Long            symlink'd size OR major/minor dev num(15)", "Delete TextElement: UID           Short           user ID(16)", "Delete TextElement: GID           Short           group ID(17)", "Delete TextElement: (var.)        variable        symbolic link filename(18)", "Delete TextElement: </pre> taken from appnote.iz (Info-ZIP note, 981119) found at <a(19)", "Delete TextElement: href=\"ftp://ftp.uu.net/pub/archiving/zip/doc/\">(20)", "Delete TextElement: ftp://ftp.uu.net/pub/archiving/zip/doc/</a> </p> <p>(21)", "Delete TextElement: Short is two bytes and Long is four bytes in big endian byte and word order,(22)", "Delete TextElement: device numbers are currently not supported.</p>(23)", "Delete TagElement(24)", "Delete TextElement:  <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>(25)", "Delete TagElement: @author(26)", "Delete TextElement:  $Revision: 1.3 $(27)", "Delete TagElement: @version(28)", "Delete Javadoc(29)", "Delete Modifier: public(30)", "Delete SimpleName: AsiExtraField(31)", "Delete SimpleName: ZipExtraField(32)", "Delete SimpleType: ZipExtraField(33)", "Delete SimpleName: UnixStat(34)", "Delete SimpleType: UnixStat(35)", "Delete SimpleName: Cloneable(36)", "Delete SimpleType: Cloneable(37)", "Delete Modifier: private(38)", "Delete Modifier: static(39)", "Delete Modifier: final(40)", "Delete SimpleName: ZipShort(41)", "Delete SimpleType: ZipShort(42)", "Delete SimpleName: HEADER_ID(43)", "Delete SimpleName: ZipShort(44)", "Delete SimpleType: ZipShort(45)", "Delete NumberLiteral: 0x756E(46)", "Delete ClassInstanceCreation(47)", "Delete VariableDeclarationFragment(48)", "Delete FieldDeclaration(49)", "Delete TextElement: Standard Unix stat(2) file mode.(50)", "Delete TagElement(51)", "Delete TextElement:  1.1(52)", "Delete TagElement: @since(53)", "Delete Javadoc(54)", "Delete Modifier: private(55)", "Delete PrimitiveType: int(56)", "Delete SimpleName: m_mode(57)", "Delete VariableDeclarationFragment(58)", "Delete FieldDeclaration(59)", "Delete TextElement: User ID.(60)", "Delete TagElement(61)", "Delete TextElement:  1.1(62)", "Delete TagElement: @since(63)", "Delete Javadoc(64)", "Delete Modifier: private(65)", "Delete PrimitiveType: int(66)", "Delete SimpleName: m_uid(67)", "Delete VariableDeclarationFragment(68)", "Delete FieldDeclaration(69)", "Delete TextElement: Group ID.(70)", "Delete TagElement(71)", "Delete TextElement:  1.1(72)", "Delete TagElement: @since(73)", "Delete Javadoc(74)", "Delete Modifier: private(75)", "Delete PrimitiveType: int(76)", "Delete SimpleName: m_gid(77)", "Delete VariableDeclarationFragment(78)", "Delete FieldDeclaration(79)", "Delete TextElement: File this entry points to, if it is a symbolic link. <p>(80)", "Delete TextElement: empty string - if entry is not a symbolic link.</p>(81)", "Delete TagElement(82)", "Delete TextElement:  1.1(83)", "Delete TagElement: @since(84)", "Delete Javadoc(85)", "Delete Modifier: private(86)", "Delete SimpleName: String(87)", "Delete SimpleType: String(88)", "Delete SimpleName: m_link(89)", "Delete StringLiteral: \"\"(90)", "Delete VariableDeclarationFragment(91)", "Delete FieldDeclaration(92)", "Delete TextElement: Is this an entry for a directory?(93)", "Delete TagElement(94)", "Delete TextElement:  1.1(95)", "Delete TagElement: @since(96)", "Delete Javadoc(97)", "Delete Modifier: private(98)", "Delete PrimitiveType: boolean(99)", "Delete SimpleName: m_dirFlag(100)", "Delete VariableDeclarationFragment(101)", "Delete FieldDeclaration(102)", "Delete TextElement: Instance used to calculate checksums.(103)", "Delete TagElement(104)", "Delete TextElement:  1.1(105)", "Delete TagElement: @since(106)", "Delete Javadoc(107)", "Delete Modifier: private(108)", "Delete SimpleName: CRC32(109)", "Delete SimpleType: CRC32(110)", "Delete SimpleName: m_crc(111)", "Delete SimpleName: CRC32(112)", "Delete SimpleType: CRC32(113)", "Delete ClassInstanceCreation(114)", "Delete VariableDeclarationFragment(115)", "Delete FieldDeclaration(116)", "Delete TextElement: Indicate whether this entry is a directory.(117)", "Delete TagElement(118)", "Delete SimpleName: dirFlag(119)", "Delete TextElement:  The new Directory value(120)", "Delete TagElement: @param(121)", "Delete TextElement:  1.1(122)", "Delete TagElement: @since(123)", "Delete Javadoc(124)", "Delete Modifier: public(125)", "Delete PrimitiveType: void(126)", "Delete SimpleName: setDirectory(127)", "Delete Modifier: final(128)", "Delete PrimitiveType: boolean(129)", "Delete SimpleName: dirFlag(130)", "Delete SingleVariableDeclaration(131)", "Delete SimpleName: m_dirFlag(132)", "Delete SimpleName: dirFlag(133)", "Delete Assignment: =(134)", "Delete ExpressionStatement(135)", "Delete SimpleName: m_mode(136)", "Delete SimpleName: getMode(137)", "Delete SimpleName: m_mode(138)", "Delete MethodInvocation(139)", "Delete Assignment: =(140)", "Delete ExpressionStatement(141)", "Delete Block(142)", "Delete MethodDeclaration(143)", "Delete TextElement: Set the group id.(144)", "Delete TagElement(145)", "Delete SimpleName: gid(146)", "Delete TextElement:  The new GroupId value(147)", "Delete TagElement: @param(148)", "Delete TextElement:  1.1(149)", "Delete TagElement: @since(150)", "Delete Javadoc(151)", "Delete Modifier: public(152)", "Delete PrimitiveType: void(153)", "Delete SimpleName: setGroupId(154)", "Delete PrimitiveType: int(155)", "Delete SimpleName: gid(156)", "Delete SingleVariableDeclaration(157)", "Delete SimpleName: m_gid(158)", "Delete SimpleName: gid(159)", "Delete Assignment: =(160)", "Delete ExpressionStatement(161)", "Delete Block(162)", "Delete MethodDeclaration(163)", "Delete TextElement: Indicate that this entry is a symbolic link to the given filename.(164)", "Delete TagElement(165)", "Delete SimpleName: name(166)", "Delete TextElement:  Name of the file this entry links to, empty String if it is(167)", "Delete TextElement: not a symbolic link.(168)", "Delete TagElement: @param(169)", "Delete TextElement:  1.1(170)", "Delete TagElement: @since(171)", "Delete Javadoc(172)", "Delete Modifier: public(173)", "Delete PrimitiveType: void(174)", "Delete SimpleName: setLinkedFile(175)", "Delete Modifier: final(176)", "Delete SimpleName: String(177)", "Delete SimpleType: String(178)", "Delete SimpleName: name(179)", "Delete SingleVariableDeclaration(180)", "Delete SimpleName: m_link(181)", "Delete SimpleName: name(182)", "Delete Assignment: =(183)", "Delete ExpressionStatement(184)", "Delete SimpleName: m_mode(185)", "Delete SimpleName: getMode(186)", "Delete SimpleName: m_mode(187)", "Delete MethodInvocation(188)", "Delete Assignment: =(189)", "Delete ExpressionStatement(190)", "Delete Block(191)", "Delete MethodDeclaration(192)", "Delete TextElement: File mode of this file.(193)", "Delete TagElement(194)", "Delete SimpleName: mode(195)", "Delete TextElement:  The new Mode value(196)", "Delete TagElement: @param(197)", "Delete TextElement:  1.1(198)", "Delete TagElement: @since(199)", "Delete Javadoc(200)", "Delete Modifier: public(201)", "Delete PrimitiveType: void(202)", "Delete SimpleName: setMode(203)", "Delete Modifier: final(204)", "Delete PrimitiveType: int(205)", "Delete SimpleName: mode(206)", "Delete SingleVariableDeclaration(207)", "Delete SimpleName: m_mode(208)", "Delete SimpleName: getMode(209)", "Delete SimpleName: mode(210)", "Delete MethodInvocation(211)", "Delete Assignment: =(212)", "Delete ExpressionStatement(213)", "Delete Block(214)", "Delete MethodDeclaration(215)", "Delete TextElement: Set the user id.(216)", "Delete TagElement(217)", "Delete SimpleName: uid(218)", "Delete TextElement:  The new UserId value(219)", "Delete TagElement: @param(220)", "Delete TextElement:  1.1(221)", "Delete TagElement: @since(222)", "Delete TextElement:  Use setUserID(int)(223)", "Delete TagElement: @deprecated(224)", "Delete SimpleName: setUserID(225)", "Delete PrimitiveType: int(226)", "Delete MethodRefParameter(227)", "Delete MethodRef(228)", "Delete TagElement: @see(229)", "Delete Javadoc(230)", "Delete Modifier: public(231)", "Delete PrimitiveType: void(232)", "Delete SimpleName: setUserId(233)", "Delete Modifier: final(234)", "Delete PrimitiveType: int(235)", "Delete SimpleName: uid(236)", "Delete SingleVariableDeclaration(237)", "Delete SimpleName: m_uid(238)", "Delete SimpleName: uid(239)", "Delete Assignment: =(240)", "Delete ExpressionStatement(241)", "Delete Block(242)", "Delete MethodDeclaration(243)", "Delete TextElement: Set the user id.(244)", "Delete TagElement(245)", "Delete SimpleName: uid(246)", "Delete TextElement:  The new UserId value(247)", "Delete TagElement: @param(248)", "Delete Javadoc(249)", "Delete Modifier: public(250)", "Delete PrimitiveType: void(251)", "Delete SimpleName: setUserID(252)", "Delete Modifier: final(253)", "Delete PrimitiveType: int(254)", "Delete SimpleName: uid(255)", "Delete SingleVariableDeclaration(256)", "Delete SimpleName: m_uid(257)", "Delete SimpleName: uid(258)", "Delete Assignment: =(259)", "Delete ExpressionStatement(260)", "Delete Block(261)", "Delete MethodDeclaration(262)", "Delete TextElement: Delegate to local file data.(263)", "Delete TagElement(264)", "Delete TextElement:  The CentralDirectoryData value(265)", "Delete TagElement: @return(266)", "Delete TextElement:  1.1(267)", "Delete TagElement: @since(268)", "Delete Javadoc(269)", "Delete Modifier: public(270)", "Delete PrimitiveType: byte(271)", "Delete Dimension(272)", "Delete ArrayType: byte[](273)", "Delete SimpleName: getCentralDirectoryData(274)", "Delete SimpleName: getLocalFileDataData(275)", "Delete MethodInvocation(276)", "Delete ReturnStatement(277)", "Delete Block(278)", "Delete MethodDeclaration(279)", "Delete TextElement: Delegate to local file data.(280)", "Delete TagElement(281)", "Delete TextElement:  The CentralDirectoryLength value(282)", "Delete TagElement: @return(283)", "Delete TextElement:  1.1(284)", "Delete TagElement: @since(285)", "Delete Javadoc(286)", "Delete Modifier: public(287)", "Delete SimpleName: ZipShort(288)", "Delete SimpleType: ZipShort(289)", "Delete SimpleName: getCentralDirectoryLength(290)", "Delete SimpleName: getLocalFileDataLength(291)", "Delete MethodInvocation(292)", "Delete ReturnStatement(293)", "Delete Block(294)", "Delete MethodDeclaration(295)", "Delete TextElement: Get the group id.(296)", "Delete TagElement(297)", "Delete TextElement:  The GroupId value(298)", "Delete TagElement: @return(299)", "Delete TextElement:  1.1(300)", "Delete TagElement: @since(301)", "Delete Javadoc(302)", "Delete Modifier: public(303)", "Delete PrimitiveType: int(304)", "Delete SimpleName: getGroupID(305)", "Delete SimpleName: m_gid(306)", "Delete ReturnStatement(307)", "Delete Block(308)", "Delete MethodDeclaration(309)", "Delete TextElement: Get the group id.(310)", "Delete TagElement(311)", "Delete TextElement:  The GroupId value(312)", "Delete TagElement: @return(313)", "Delete TextElement:  1.1(314)", "Delete TagElement: @since(315)", "Delete TextElement:  Use getGroupID() instead(316)", "Delete TagElement: @deprecated(317)", "Delete SimpleName: getGroupID(318)", "Delete MethodRef(319)", "Delete TagElement: @see(320)", "Delete Javadoc(321)", "Delete Modifier: public(322)", "Delete PrimitiveType: int(323)", "Delete SimpleName: getGroupId(324)", "Delete SimpleName: m_gid(325)", "Delete ReturnStatement(326)", "Delete Block(327)", "Delete MethodDeclaration(328)", "Delete TextElement: The Header-ID.(329)", "Delete TagElement(330)", "Delete TextElement:  The HeaderId value(331)", "Delete TagElement: @return(332)", "Delete TextElement:  1.1(333)", "Delete TagElement: @since(334)", "Delete Javadoc(335)", "Delete Modifier: public(336)", "Delete SimpleName: ZipShort(337)", "Delete SimpleType: ZipShort(338)", "Delete SimpleName: getHeaderID(339)", "Delete SimpleName: HEADER_ID(340)", "Delete ReturnStatement(341)", "Delete Block(342)", "Delete MethodDeclaration(343)", "Delete TextElement: Name of linked file(344)", "Delete TagElement(345)", "Delete TextElement:  name of the file this entry links to if it is a symbolic link,(346)", "Delete TextElement: the empty string otherwise.(347)", "Delete TagElement: @return(348)", "Delete TextElement:  1.1(349)", "Delete TagElement: @since(350)", "Delete Javadoc(351)", "Delete Modifier: public(352)", "Delete SimpleName: String(353)", "Delete SimpleType: String(354)", "Delete SimpleName: getLinkedFile(355)", "Delete SimpleName: m_link(356)", "Delete ReturnStatement(357)", "Delete Block(358)", "Delete MethodDeclaration(359)", "Delete TextElement: The actual data to put into local file data - without Header-ID or length(360)", "Delete TextElement: specifier.(361)", "Delete TagElement(362)", "Delete TextElement:  The LocalFileDataData value(363)", "Delete TagElement: @return(364)", "Delete TextElement:  1.1(365)", "Delete TagElement: @since(366)", "Delete Javadoc(367)", "Delete Modifier: public(368)", "Delete PrimitiveType: byte(369)", "Delete Dimension(370)", "Delete ArrayType: byte[](371)", "Delete SimpleName: getLocalFileDataData(372)", "Delete PrimitiveType: byte(373)", "Delete Dimension(374)", "Delete ArrayType: byte[](375)", "Delete SimpleName: data(376)", "Delete PrimitiveType: byte(377)", "Delete Dimension(378)", "Delete ArrayType: byte[](379)", "Delete SimpleName: getLocalFileDataLength(380)", "Delete MethodInvocation(381)", "Delete SimpleName: getValue(382)", "Delete MethodInvocation(383)", "Delete NumberLiteral: 4(384)", "Delete InfixExpression: -(385)", "Delete ArrayCreation(386)", "Delete VariableDeclarationFragment(387)", "Delete VariableDeclarationStatement(388)", "Delete SimpleName: System(389)", "Delete SimpleName: arraycopy(390)", "Delete SimpleName: ZipShort(391)", "Delete SimpleType: ZipShort(392)", "Delete SimpleName: getMode(393)", "Delete MethodInvocation(394)", "Delete ClassInstanceCreation(395)", "Delete ParenthesizedExpression(396)", "Delete SimpleName: getBytes(397)", "Delete MethodInvocation(398)", "Delete NumberLiteral: 0(399)", "Delete SimpleName: data(400)", "Delete NumberLiteral: 0(401)", "Delete NumberLiteral: 2(402)", "Delete MethodInvocation(403)", "Delete ExpressionStatement(404)", "Delete PrimitiveType: byte(405)", "Delete Dimension(406)", "Delete ArrayType: byte[](407)", "Delete SimpleName: linkArray(408)", "Delete SimpleName: getLinkedFile(409)", "Delete MethodInvocation(410)", "Delete SimpleName: getBytes(411)", "Delete MethodInvocation(412)", "Delete VariableDeclarationFragment(413)", "Delete VariableDeclarationStatement(414)", "Delete SimpleName: System(415)", "Delete SimpleName: arraycopy(416)", "Delete SimpleName: ZipLong(417)", "Delete SimpleType: ZipLong(418)", "Delete QualifiedName: linkArray.length(419)", "Delete ClassInstanceCreation(420)", "Delete ParenthesizedExpression(421)", "Delete SimpleName: getBytes(422)", "Delete MethodInvocation(423)", "Delete NumberLiteral: 0(424)", "Delete SimpleName: data(425)", "Delete NumberLiteral: 2(426)", "Delete NumberLiteral: 4(427)", "Delete MethodInvocation(428)", "Delete ExpressionStatement(429)", "Delete SimpleName: System(430)", "Delete SimpleName: arraycopy(431)", "Delete SimpleName: ZipShort(432)", "Delete SimpleType: ZipShort(433)", "Delete SimpleName: getUserID(434)", "Delete MethodInvocation(435)", "Delete ClassInstanceCreation(436)", "Delete ParenthesizedExpression(437)", "Delete SimpleName: getBytes(438)", "Delete MethodInvocation(439)", "Delete NumberLiteral: 0(440)", "Delete SimpleName: data(441)", "Delete NumberLiteral: 6(442)", "Delete NumberLiteral: 2(443)", "Delete MethodInvocation(444)", "Delete ExpressionStatement(445)", "Delete SimpleName: System(446)", "Delete SimpleName: arraycopy(447)", "Delete SimpleName: ZipShort(448)", "Delete SimpleType: ZipShort(449)", "Delete SimpleName: getGroupID(450)", "Delete MethodInvocation(451)", "Delete ClassInstanceCreation(452)", "Delete ParenthesizedExpression(453)", "Delete SimpleName: getBytes(454)", "Delete MethodInvocation(455)", "Delete NumberLiteral: 0(456)", "Delete SimpleName: data(457)", "Delete NumberLiteral: 8(458)", "Delete NumberLiteral: 2(459)", "Delete MethodInvocation(460)", "Delete ExpressionStatement(461)", "Delete SimpleName: System(462)", "Delete SimpleName: arraycopy(463)", "Delete SimpleName: linkArray(464)", "Delete NumberLiteral: 0(465)", "Delete SimpleName: data(466)", "Delete NumberLiteral: 10(467)", "Delete QualifiedName: linkArray.length(468)", "Delete MethodInvocation(469)", "Delete ExpressionStatement(470)", "Delete SimpleName: m_crc(471)", "Delete SimpleName: reset(472)", "Delete MethodInvocation(473)", "Delete ExpressionStatement(474)", "Delete SimpleName: m_crc(475)", "Delete SimpleName: update(476)", "Delete SimpleName: data(477)", "Delete MethodInvocation(478)", "Delete ExpressionStatement(479)", "Delete PrimitiveType: long(480)", "Delete SimpleName: checksum(481)", "Delete SimpleName: m_crc(482)", "Delete SimpleName: getValue(483)", "Delete MethodInvocation(484)", "Delete VariableDeclarationFragment(485)", "Delete VariableDeclarationStatement(486)", "Delete PrimitiveType: byte(487)", "Delete Dimension(488)", "Delete ArrayType: byte[](489)", "Delete SimpleName: result(490)", "Delete PrimitiveType: byte(491)", "Delete Dimension(492)", "Delete ArrayType: byte[](493)", "Delete QualifiedName: data.length(494)", "Delete NumberLiteral: 4(495)", "Delete InfixExpression: +(496)", "Delete ArrayCreation(497)", "Delete VariableDeclarationFragment(498)", "Delete VariableDeclarationStatement(499)", "Delete SimpleName: System(500)", "Delete SimpleName: arraycopy(501)", "Delete SimpleName: ZipLong(502)", "Delete SimpleType: ZipLong(503)", "Delete SimpleName: checksum(504)", "Delete ClassInstanceCreation(505)", "Delete ParenthesizedExpression(506)", "Delete SimpleName: getBytes(507)", "Delete MethodInvocation(508)", "Delete NumberLiteral: 0(509)", "Delete SimpleName: result(510)", "Delete NumberLiteral: 0(511)", "Delete NumberLiteral: 4(512)", "Delete MethodInvocation(513)", "Delete ExpressionStatement(514)", "Delete SimpleName: System(515)", "Delete SimpleName: arraycopy(516)", "Delete SimpleName: data(517)", "Delete NumberLiteral: 0(518)", "Delete SimpleName: result(519)", "Delete NumberLiteral: 4(520)", "Delete QualifiedName: data.length(521)", "Delete MethodInvocation(522)", "Delete ExpressionStatement(523)", "Delete SimpleName: result(524)", "Delete ReturnStatement(525)", "Delete Block(526)", "Delete MethodDeclaration(527)", "Delete TextElement: Length of the extra field in the local file data - without Header-ID or(528)", "Delete TextElement: length specifier.(529)", "Delete TagElement(530)", "Delete TextElement:  The LocalFileDataLength value(531)", "Delete TagElement: @return(532)", "Delete TextElement:  1.1(533)", "Delete TagElement: @since(534)", "Delete Javadoc(535)", "Delete Modifier: public(536)", "Delete SimpleName: ZipShort(537)", "Delete SimpleType: ZipShort(538)", "Delete SimpleName: getLocalFileDataLength(539)", "Delete SimpleName: ZipShort(540)", "Delete SimpleType: ZipShort(541)", "Delete NumberLiteral: 4(542)", "Delete NumberLiteral: 2(543)", "Delete NumberLiteral: 4(544)", "Delete NumberLiteral: 2(545)", "Delete NumberLiteral: 2(546)", "Delete SimpleName: getLinkedFile(547)", "Delete MethodInvocation(548)", "Delete SimpleName: getBytes(549)", "Delete MethodInvocation(550)", "Delete SimpleName: length(551)", "Delete FieldAccess(552)", "Delete InfixExpression: +(553)", "Delete ClassInstanceCreation(554)", "Delete ReturnStatement(555)", "Delete Block(556)", "Delete MethodDeclaration(557)", "Delete TextElement: File mode of this file.(558)", "Delete TagElement(559)", "Delete TextElement:  The Mode value(560)", "Delete TagElement: @return(561)", "Delete TextElement:  1.1(562)", "Delete TagElement: @since(563)", "Delete Javadoc(564)", "Delete Modifier: public(565)", "Delete PrimitiveType: int(566)", "Delete SimpleName: getMode(567)", "Delete SimpleName: m_mode(568)", "Delete ReturnStatement(569)", "Delete Block(570)", "Delete MethodDeclaration(571)", "Delete TextElement: Get the user id.(572)", "Delete TagElement(573)", "Delete TextElement:  The UserId value(574)", "Delete TagElement: @return(575)", "Delete TextElement:  1.1(576)", "Delete TagElement: @since(577)", "Delete TextElement:  Use getUserID()(578)", "Delete TagElement: @deprecated(579)", "Delete SimpleName: getUserID(580)", "Delete MethodRef(581)", "Delete TagElement: @see(582)", "Delete Javadoc(583)", "Delete Modifier: public(584)", "Delete PrimitiveType: int(585)", "Delete SimpleName: getUserId(586)", "Delete SimpleName: m_uid(587)", "Delete ReturnStatement(588)", "Delete Block(589)", "Delete MethodDeclaration(590)", "Delete TextElement: Get the user id.(591)", "Delete TagElement(592)", "Delete TextElement:  The UserID value(593)", "Delete TagElement: @return(594)", "Delete Javadoc(595)", "Delete Modifier: public(596)", "Delete PrimitiveType: int(597)", "Delete SimpleName: getUserID(598)", "Delete SimpleName: m_uid(599)", "Delete ReturnStatement(600)", "Delete Block(601)", "Delete MethodDeclaration(602)", "Delete TextElement: Is this entry a directory?(603)", "Delete TagElement(604)", "Delete TextElement:  The Directory value(605)", "Delete TagElement: @return(606)", "Delete TextElement:  1.1(607)", "Delete TagElement: @since(608)", "Delete Javadoc(609)", "Delete Modifier: public(610)", "Delete PrimitiveType: boolean(611)", "Delete SimpleName: isDirectory(612)", "Delete SimpleName: m_dirFlag(613)", "Delete SimpleName: isLink(614)", "Delete MethodInvocation(615)", "Delete PrefixExpression: !(616)", "Delete InfixExpression: &&(617)", "Delete ReturnStatement(618)", "Delete Block(619)", "Delete MethodDeclaration(620)", "Delete TextElement: Is this entry a symbolic link?(621)", "Delete TagElement(622)", "Delete TextElement:  The Link value(623)", "Delete TagElement: @return(624)", "Delete TextElement:  1.1(625)", "Delete TagElement: @since(626)", "Delete Javadoc(627)", "Delete Modifier: public(628)", "Delete PrimitiveType: boolean(629)", "Delete SimpleName: isLink(630)", "Delete SimpleName: getLinkedFile(631)", "Delete MethodInvocation(632)", "Delete SimpleName: length(633)", "Delete MethodInvocation(634)", "Delete NumberLiteral: 0(635)", "Delete InfixExpression: !=(636)", "Delete ReturnStatement(637)", "Delete Block(638)", "Delete MethodDeclaration(639)", "Delete TextElement: Populate data from this array as if it was in local file data.(640)", "Delete TagElement(641)", "Delete SimpleName: buffer(642)", "Delete TextElement:  the buffer(643)", "Delete TagElement: @param(644)", "Delete SimpleName: offset(645)", "Delete TextElement:  the offset into buffer(646)", "Delete TagElement: @param(647)", "Delete SimpleName: length(648)", "Delete TextElement:  the length of data in buffer(649)", "Delete TagElement: @param(650)", "Delete SimpleName: ZipException(651)", "Delete TextElement:  on error(652)", "Delete TagElement: @throws(653)", "Delete TextElement:  1.1(654)", "Delete TagElement: @since(655)", "Delete Javadoc(656)", "Delete Modifier: public(657)", "Delete PrimitiveType: void(658)", "Delete SimpleName: parseFromLocalFileData(659)", "Delete Modifier: final(660)", "Delete PrimitiveType: byte(661)", "Delete Dimension(662)", "Delete ArrayType: byte[](663)", "Delete SimpleName: buffer(664)", "Delete SingleVariableDeclaration(665)", "Delete Modifier: final(666)", "Delete PrimitiveType: int(667)", "Delete SimpleName: offset(668)", "Delete SingleVariableDeclaration(669)", "Delete Modifier: final(670)", "Delete PrimitiveType: int(671)", "Delete SimpleName: length(672)", "Delete SingleVariableDeclaration(673)", "Delete SimpleName: ZipException(674)", "Delete SimpleType: ZipException(675)", "Delete PrimitiveType: long(676)", "Delete SimpleName: givenChecksum(677)", "Delete SimpleName: ZipLong(678)", "Delete SimpleType: ZipLong(679)", "Delete SimpleName: buffer(680)", "Delete SimpleName: offset(681)", "Delete ClassInstanceCreation(682)", "Delete ParenthesizedExpression(683)", "Delete SimpleName: getValue(684)", "Delete MethodInvocation(685)", "Delete VariableDeclarationFragment(686)", "Delete VariableDeclarationStatement(687)", "Delete PrimitiveType: byte(688)", "Delete Dimension(689)", "Delete ArrayType: byte[](690)", "Delete SimpleName: tmp(691)", "Delete PrimitiveType: byte(692)", "Delete Dimension(693)", "Delete ArrayType: byte[](694)", "Delete SimpleName: length(695)", "Delete NumberLiteral: 4(696)", "Delete InfixExpression: -(697)", "Delete ArrayCreation(698)", "Delete VariableDeclarationFragment(699)", "Delete VariableDeclarationStatement(700)", "Delete SimpleName: System(701)", "Delete SimpleName: arraycopy(702)", "Delete SimpleName: buffer(703)", "Delete SimpleName: offset(704)", "Delete NumberLiteral: 4(705)", "Delete InfixExpression: +(706)", "Delete SimpleName: tmp(707)", "Delete NumberLiteral: 0(708)", "Delete SimpleName: length(709)", "Delete NumberLiteral: 4(710)", "Delete InfixExpression: -(711)", "Delete MethodInvocation(712)", "Delete ExpressionStatement(713)", "Delete SimpleName: m_crc(714)", "Delete SimpleName: reset(715)", "Delete MethodInvocation(716)", "Delete ExpressionStatement(717)", "Delete SimpleName: m_crc(718)", "Delete SimpleName: update(719)", "Delete SimpleName: tmp(720)", "Delete MethodInvocation(721)", "Delete ExpressionStatement(722)", "Delete PrimitiveType: long(723)", "Delete SimpleName: realChecksum(724)", "Delete SimpleName: m_crc(725)", "Delete SimpleName: getValue(726)", "Delete MethodInvocation(727)", "Delete VariableDeclarationFragment(728)", "Delete VariableDeclarationStatement(729)", "Delete SimpleName: givenChecksum(730)", "Delete SimpleName: realChecksum(731)", "Delete InfixExpression: !=(732)", "Delete SimpleName: ZipException(733)", "Delete SimpleType: ZipException(734)", "Delete StringLiteral: \"bad CRC checksum \"(735)", "Delete SimpleName: Long(736)", "Delete SimpleName: toHexString(737)", "Delete SimpleName: givenChecksum(738)", "Delete MethodInvocation(739)", "Delete StringLiteral: \" instead of \"(740)", "Delete SimpleName: Long(741)", "Delete SimpleName: toHexString(742)", "Delete SimpleName: realChecksum(743)", "Delete MethodInvocation(744)", "Delete InfixExpression: +(745)", "Delete ClassInstanceCreation(746)", "Delete ThrowStatement(747)", "Delete Block(748)", "Delete IfStatement(749)", "Delete PrimitiveType: int(750)", "Delete SimpleName: newMode(751)", "Delete SimpleName: ZipShort(752)", "Delete SimpleType: ZipShort(753)", "Delete SimpleName: tmp(754)", "Delete NumberLiteral: 0(755)", "Delete ClassInstanceCreation(756)", "Delete ParenthesizedExpression(757)", "Delete SimpleName: getValue(758)", "Delete MethodInvocation(759)", "Delete VariableDeclarationFragment(760)", "Delete VariableDeclarationStatement(761)", "Delete PrimitiveType: byte(762)", "Delete Dimension(763)", "Delete ArrayType: byte[](764)", "Delete SimpleName: linkArray(765)", "Delete PrimitiveType: byte(766)", "Delete Dimension(767)", "Delete ArrayType: byte[](768)", "Delete PrimitiveType: int(769)", "Delete SimpleName: ZipLong(770)", "Delete SimpleType: ZipLong(771)", "Delete SimpleName: tmp(772)", "Delete NumberLiteral: 2(773)", "Delete ClassInstanceCreation(774)", "Delete ParenthesizedExpression(775)", "Delete SimpleName: getValue(776)", "Delete MethodInvocation(777)", "Delete CastExpression(778)", "Delete ArrayCreation(779)", "Delete VariableDeclarationFragment(780)", "Delete VariableDeclarationStatement(781)", "Delete SimpleName: m_uid(782)", "Delete SimpleName: ZipShort(783)", "Delete SimpleType: ZipShort(784)", "Delete SimpleName: tmp(785)", "Delete NumberLiteral: 6(786)", "Delete ClassInstanceCreation(787)", "Delete ParenthesizedExpression(788)", "Delete SimpleName: getValue(789)", "Delete MethodInvocation(790)", "Delete Assignment: =(791)", "Delete ExpressionStatement(792)", "Delete SimpleName: m_gid(793)", "Delete SimpleName: ZipShort(794)", "Delete SimpleType: ZipShort(795)", "Delete SimpleName: tmp(796)", "Delete NumberLiteral: 8(797)", "Delete ClassInstanceCreation(798)", "Delete ParenthesizedExpression(799)", "Delete SimpleName: getValue(800)", "Delete MethodInvocation(801)", "Delete Assignment: =(802)", "Delete ExpressionStatement(803)", "Delete QualifiedName: linkArray.length(804)", "Delete NumberLiteral: 0(805)", "Delete InfixExpression: ==(806)", "Delete SimpleName: m_link(807)", "Delete StringLiteral: \"\"(808)", "Delete Assignment: =(809)", "Delete ExpressionStatement(810)", "Delete Block(811)", "Delete SimpleName: System(812)", "Delete SimpleName: arraycopy(813)", "Delete SimpleName: tmp(814)", "Delete NumberLiteral: 10(815)", "Delete SimpleName: linkArray(816)", "Delete NumberLiteral: 0(817)", "Delete QualifiedName: linkArray.length(818)", "Delete MethodInvocation(819)", "Delete ExpressionStatement(820)", "Delete SimpleName: m_link(821)", "Delete SimpleName: String(822)", "Delete SimpleType: String(823)", "Delete SimpleName: linkArray(824)", "Delete ClassInstanceCreation(825)", "Delete Assignment: =(826)", "Delete ExpressionStatement(827)", "Delete Block(828)", "Delete IfStatement(829)", "Delete SimpleName: setDirectory(830)", "Delete SimpleName: newMode(831)", "Delete SimpleName: DIR_FLAG(832)", "Delete InfixExpression: &(833)", "Delete ParenthesizedExpression(834)", "Delete NumberLiteral: 0(835)", "Delete InfixExpression: !=(836)", "Delete MethodInvocation(837)", "Delete ExpressionStatement(838)", "Delete SimpleName: setMode(839)", "Delete SimpleName: newMode(840)", "Delete MethodInvocation(841)", "Delete ExpressionStatement(842)", "Delete Block(843)", "Delete MethodDeclaration(844)", "Delete TextElement: Get the file mode for given permissions with the correct file type.(845)", "Delete TagElement(846)", "Delete SimpleName: mode(847)", "Delete TextElement:  Description of Parameter(848)", "Delete TagElement: @param(849)", "Delete TextElement:  The Mode value(850)", "Delete TagElement: @return(851)", "Delete TextElement:  1.1(852)", "Delete TagElement: @since(853)", "Delete Javadoc(854)", "Delete Modifier: protected(855)", "Delete PrimitiveType: int(856)", "Delete SimpleName: getMode(857)", "Delete Modifier: final(858)", "Delete PrimitiveType: int(859)", "Delete SimpleName: mode(860)", "Delete SingleVariableDeclaration(861)", "Delete PrimitiveType: int(862)", "Delete SimpleName: type(863)", "Delete SimpleName: FILE_FLAG(864)", "Delete VariableDeclarationFragment(865)", "Delete VariableDeclarationStatement(866)", "Delete SimpleName: isLink(867)", "Delete MethodInvocation(868)", "Delete SimpleName: type(869)", "Delete SimpleName: LINK_FLAG(870)", "Delete Assignment: =(871)", "Delete ExpressionStatement(872)", "Delete Block(873)", "Delete SimpleName: isDirectory(874)", "Delete MethodInvocation(875)", "Delete SimpleName: type(876)", "Delete SimpleName: DIR_FLAG(877)", "Delete Assignment: =(878)", "Delete ExpressionStatement(879)", "Delete Block(880)", "Delete IfStatement(881)", "Delete IfStatement(882)", "Delete SimpleName: type(883)", "Delete SimpleName: mode(884)", "Delete SimpleName: PERM_MASK(885)", "Delete InfixExpression: &(886)", "Delete ParenthesizedExpression(887)", "Delete InfixExpression: |(888)", "Delete ReturnStatement(889)", "Delete Block(890)", "Delete MethodDeclaration(891)", "Delete TypeDeclaration: class(892)"]}}, {"UnixStat_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.io.compress.zip"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL PrimitiveType: int", "DEL TextElement: Indicates symbolic links.", "DEL TextElement:  $Revision: 1.3 $", "DEL NumberLiteral: 040000", "DEL SimpleName: DEFAULT_DIR_PERM", "DEL TagElement", "DEL TagElement", "DEL Javadoc", "DEL PrimitiveType: int", "DEL TextElement:  1.1", "DEL FieldDeclaration", "DEL SimpleName: FILE_FLAG", "DEL TextElement: Indicates directories.", "DEL TextElement: Bits used for permissions (and sticky bit)", "DEL TagElement", "DEL TextElement:  1.1", "DEL TagElement: @since", "DEL TextElement:  1.1", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: LINK_FLAG", "DEL SimpleName: DIR_FLAG", "DEL TextElement:  1.1", "DEL VariableDeclarationFragment", "DEL SimpleName: PERM_MASK", "DEL TagElement: @author", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL Javadoc", "DEL TagElement", "DEL TextElement: Default permissions for directories.", "DEL TagElement: @version", "DEL FieldDeclaration", "DEL NumberLiteral: 0100000", "DEL FieldDeclaration", "DEL SimpleName: UnixStat", "DEL TagElement: @since", "DEL NumberLiteral: 0644", "DEL FieldDeclaration", "DEL FieldDeclaration", "DEL TagElement: @since", "DEL TagElement: @since", "DEL Modifier: public", "DEL TagElement", "DEL TextElement:  <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0755", "DEL TextElement:  1.1", "DEL Javadoc", "DEL Javadoc", "DEL TagElement", "DEL TagElement", "DEL NumberLiteral: 07777", "DEL NumberLiteral: 0120000", "DEL PrimitiveType: int", "DEL TextElement:  1.1", "DEL TypeDeclaration: interface", "DEL TagElement: @since", "DEL TextElement: Default permissions for plain files.", "DEL SimpleName: DEFAULT_FILE_PERM", "DEL PrimitiveType: int", "DEL TagElement: @since", "DEL TextElement: Constants from stat.h on Unix systems.", "DEL FieldDeclaration", "DEL FieldDeclaration", "DEL TagElement", "DEL SimpleName: DEFAULT_LINK_PERM", "DEL TextElement: Indicates plain files.", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL NumberLiteral: 0777", "DEL TextElement:  1.1", "DEL TextElement: Default permissions for symbolic links.", "DEL TagElement: @since"]}]}}, {"UnixStat_diff": {"operations": ["Delete QualifiedName: org.apache.commons.io.compress.zip(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Constants from stat.h on Unix systems.(2)", "Delete TagElement(3)", "Delete TextElement:  <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>(4)", "Delete TagElement: @author(5)", "Delete TextElement:  $Revision: 1.3 $(6)", "Delete TagElement: @version(7)", "Delete Javadoc(8)", "Delete Modifier: public(9)", "Delete SimpleName: UnixStat(10)", "Delete TextElement: Bits used for permissions (and sticky bit)(11)", "Delete TagElement(12)", "Delete TextElement:  1.1(13)", "Delete TagElement: @since(14)", "Delete Javadoc(15)", "Delete PrimitiveType: int(16)", "Delete SimpleName: PERM_MASK(17)", "Delete NumberLiteral: 07777(18)", "Delete VariableDeclarationFragment(19)", "Delete FieldDeclaration(20)", "Delete TextElement: Indicates symbolic links.(21)", "Delete TagElement(22)", "Delete TextElement:  1.1(23)", "Delete TagElement: @since(24)", "Delete Javadoc(25)", "Delete PrimitiveType: int(26)", "Delete SimpleName: LINK_FLAG(27)", "Delete NumberLiteral: 0120000(28)", "Delete VariableDeclarationFragment(29)", "Delete FieldDeclaration(30)", "Delete TextElement: Indicates plain files.(31)", "Delete TagElement(32)", "Delete TextElement:  1.1(33)", "Delete TagElement: @since(34)", "Delete Javadoc(35)", "Delete PrimitiveType: int(36)", "Delete SimpleName: FILE_FLAG(37)", "Delete NumberLiteral: 0100000(38)", "Delete VariableDeclarationFragment(39)", "Delete FieldDeclaration(40)", "Delete TextElement: Indicates directories.(41)", "Delete TagElement(42)", "Delete TextElement:  1.1(43)", "Delete TagElement: @since(44)", "Delete Javadoc(45)", "Delete PrimitiveType: int(46)", "Delete SimpleName: DIR_FLAG(47)", "Delete NumberLiteral: 040000(48)", "Delete VariableDeclarationFragment(49)", "Delete FieldDeclaration(50)", "Delete TextElement: Default permissions for symbolic links.(51)", "Delete TagElement(52)", "Delete TextElement:  1.1(53)", "Delete TagElement: @since(54)", "Delete Javadoc(55)", "Delete PrimitiveType: int(56)", "Delete SimpleName: DEFAULT_LINK_PERM(57)", "Delete NumberLiteral: 0777(58)", "Delete VariableDeclarationFragment(59)", "Delete FieldDeclaration(60)", "Delete TextElement: Default permissions for directories.(61)", "Delete TagElement(62)", "Delete TextElement:  1.1(63)", "Delete TagElement: @since(64)", "Delete Javadoc(65)", "Delete PrimitiveType: int(66)", "Delete SimpleName: DEFAULT_DIR_PERM(67)", "Delete NumberLiteral: 0755(68)", "Delete VariableDeclarationFragment(69)", "Delete FieldDeclaration(70)", "Delete TextElement: Default permissions for plain files.(71)", "Delete TagElement(72)", "Delete TextElement:  1.1(73)", "Delete TagElement: @since(74)", "Delete Javadoc(75)", "Delete PrimitiveType: int(76)", "Delete SimpleName: DEFAULT_FILE_PERM(77)", "Delete NumberLiteral: 0644(78)", "Delete VariableDeclarationFragment(79)", "Delete FieldDeclaration(80)", "Delete TypeDeclaration: interface(81)"]}}, {"UnrecognizedExtraField_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.io.compress.zip"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL ExpressionStatement", "DEL TextElement:  the header ID", "DEL SimpleName: getLocalFileDataData", "DEL SimpleName: m_headerID", "DEL PrimitiveType: byte", "DEL Dimension", "DEL ExpressionStatement", "DEL SimpleName: headerID", "DEL TagElement: @since", "DEL ReturnStatement", "DEL Javadoc", "DEL TextElement:  the central directory data", "DEL Block", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL ArrayType: byte[]", "DEL SimpleName: getCentralDirectoryData", "DEL VariableDeclarationStatement", "DEL SimpleName: ZipShort", "DEL TagElement", "DEL SimpleName: ZipShort", "DEL SimpleName: localData", "DEL TextElement:  the buffer to use", "DEL SimpleName: headerID", "DEL Modifier: public", "DEL SimpleName: setHeaderID", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: ZipShort", "DEL SimpleName: m_localData", "DEL SimpleType: ZipShort", "DEL Block", "DEL TagElement: @see", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL PrimitiveType: byte", "DEL TagElement: @param", "DEL TagElement: @deprecated", "DEL Dimension", "DEL SimpleName: setLocalFileDataData", "DEL Javadoc", "DEL MethodDeclaration", "DEL Modifier: public", "DEL TextElement:  Use getHeaderID() instead", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL ReturnStatement", "DEL Modifier: final", "DEL TagElement: @return", "DEL SimpleName: System", "DEL ArrayType: byte[]", "DEL Modifier: public", "DEL MethodRef", "DEL Assignment: =", "DEL PrimitiveType: void", "DEL Modifier: final", "DEL SimpleName: headerID", "DEL Dimension", "DEL TextElement: told the opposite.</p>", "DEL Modifier: final", "DEL ReturnStatement", "DEL TextElement: Simple placeholder for all those extra fields we don't want to deal with. <p>", "DEL TextElement: specifier.", "DEL PrimitiveType: void", "DEL TagElement", "DEL Javadoc", "DEL SimpleName: localData", "DEL TagElement: @return", "DEL SimpleName: offset", "DEL SimpleName: getLocalFileDataLength", "DEL QualifiedName: m_localData.length", "DEL SimpleType: ZipShort", "DEL MethodDeclaration", "DEL ArrayType: byte[]", "DEL SimpleName: setLocalFileDataData", "DEL SimpleName: length", "DEL TagElement: @author", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: getHeaderID", "DEL SimpleType: ZipShort", "DEL Modifier: public", "DEL SimpleName: headerID", "DEL SimpleName: centralData", "DEL SimpleName: m_localData", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: setHeaderID", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL Assignment: =", "DEL MethodRef", "DEL SimpleName: getHeaderId", "DEL FieldDeclaration", "DEL TagElement", "DEL SimpleName: ZipShort", "DEL SimpleName: m_headerID", "DEL SimpleName: m_centralData", "DEL TextElement: Get the HeaderID.", "DEL IfStatement", "DEL SimpleName: ZipShort", "DEL Modifier: public", "DEL ReturnStatement", "DEL TextElement: Set the central directory data", "DEL TextElement:  1.1", "DEL MethodDeclaration", "DEL TagElement: @deprecated", "DEL SimpleName: ZipShort", "DEL TagElement", "DEL Modifier: final", "DEL NullLiteral", "DEL TextElement: Get the central directory data.", "DEL MethodInvocation", "DEL Javadoc", "DEL TagElement: @version", "DEL SingleVariableDeclaration", "DEL Block", "DEL MethodDeclaration", "DEL TextElement:  the local file data", "DEL SimpleName: buffer", "DEL SimpleType: ZipShort", "DEL SimpleName: ZipExtraField", "DEL TextElement: Set the header ID.", "DEL ExpressionStatement", "DEL TagElement", "DEL ArrayType: byte[]", "DEL SimpleName: m_centralData", "DEL Modifier: final", "DEL Javadoc", "DEL SimpleName: m_localData", "DEL Block", "DEL Javadoc", "DEL SimpleName: m_centralData", "DEL TagElement", "DEL TextElement: Get the length of local file data in bytes.", "DEL Javadoc", "DEL SimpleName: ZipShort", "DEL TextElement:  the header ID", "DEL SimpleName: setHeaderID", "DEL TextElement:  the length of local file data in bytes", "DEL Javadoc", "DEL TextElement: Set the local file data.", "DEL SimpleName: UnrecognizedExtraField", "DEL Dimension", "DEL TextElement:  then length of data", "DEL SimpleName: fileData", "DEL Modifier: public", "DEL Modifier: public", "DEL SimpleName: offset", "DEL SimpleName: m_headerID", "DEL Modifier: private", "DEL TagElement: @param", "DEL TextElement:  <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>", "DEL Modifier: private", "DEL SimpleName: headerID", "DEL Block", "DEL ArrayType: byte[]", "DEL ArrayType: byte[]", "DEL NumberLiteral: 0", "DEL SimpleName: setCentralDirectoryData", "DEL Modifier: public", "DEL SimpleName: headerID", "DEL TextElement:  the local file data", "DEL SimpleName: centralData", "DEL TagElement: @return", "DEL TextElement:  $Revision: 1.3 $", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL InfixExpression: !=", "DEL PrimitiveType: byte", "DEL ArrayCreation", "DEL TextElement:  the central directory data.", "DEL MethodDeclaration", "DEL Javadoc", "DEL TypeDeclaration: class", "DEL MethodDeclaration", "DEL Block", "DEL MethodInvocation", "DEL TextElement:  the offset into buffer", "DEL TextElement: Get the HeaderID.", "DEL SimpleType: ZipShort", "DEL SimpleType: ZipShort", "DEL SimpleName: getCentralDirectoryLength", "DEL SimpleName: ZipShort", "DEL SimpleName: m_centralData", "DEL SimpleType: ZipShort", "DEL Dimension", "DEL Block", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL TagElement: @since", "DEL SimpleType: ZipShort", "DEL TextElement:  1.1", "DEL TagElement: @param", "DEL Modifier: private", "DEL SimpleName: getLocalFileDataData", "DEL SimpleName: getLocalFileDataLength", "DEL MethodDeclaration", "DEL SimpleName: length", "DEL SimpleName: arraycopy", "DEL PrimitiveType: void", "DEL SimpleName: getHeaderID", "DEL SimpleName: ZipShort", "DEL TextElement: Extra field data in local file data - without Header-ID or length", "DEL SimpleName: length", "DEL Block", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: length", "DEL SimpleName: fileData", "DEL IfStatement", "DEL Dimension", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL TagElement: @return", "DEL SimpleName: m_headerID", "DEL TagElement", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL PrimitiveType: void", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: buffer", "DEL TextElement: Parse LocalFiledata out of supplied buffer.", "DEL ClassInstanceCreation", "DEL PrimitiveType: byte", "DEL TagElement: @return", "DEL TextElement:  the HeaderID", "DEL Javadoc", "DEL TagElement: @param", "DEL TextElement: Extra field data in central directory - without Header-ID or length", "DEL ArrayType: byte[]", "DEL Block", "DEL SimpleName: parseFromLocalFileData", "DEL TagElement", "DEL TextElement: specifier.", "DEL SimpleType: ZipShort", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL TagElement", "DEL TextElement:  1.1", "DEL Dimension", "DEL TagElement: @since", "DEL PrimitiveType: byte", "DEL TagElement", "DEL SimpleName: ZipShort", "DEL PrimitiveType: byte", "DEL SimpleName: buffer", "DEL Dimension", "DEL SimpleType: ZipExtraField", "DEL ArrayType: byte[]", "DEL SimpleType: ZipShort", "DEL FieldDeclaration", "DEL Dimension", "DEL Modifier: final", "DEL Modifier: public", "DEL PrimitiveType: byte", "DEL TextElement: Assumes local file data and central directory entries are identical - unless", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL TextElement:  Use setHeaderID() instead", "DEL QualifiedName: m_centralData.length", "DEL Modifier: final", "DEL Block", "DEL SimpleName: fileData", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL ReturnStatement", "DEL TagElement: @param", "DEL SimpleName: setHeaderId", "DEL SimpleName: centralData", "DEL SimpleName: localData", "DEL TextElement:  the HeaderID", "DEL ExpressionStatement", "DEL NullLiteral", "DEL TagElement", "DEL Block", "DEL TextElement:  the length of the central directory in bytes.", "DEL SimpleName: m_centralData", "DEL TextElement: Get the local file data.", "DEL TextElement: The Header-ID.", "DEL MethodRefParameter", "DEL PrimitiveType: byte", "DEL TagElement: @see", "DEL TextElement: Set the header ID.", "DEL ArrayType: byte[]", "DEL TextElement: Get the length of the central directory in bytes.", "DEL InfixExpression: !=", "DEL PrimitiveType: byte", "DEL TagElement: @param", "DEL Modifier: public", "DEL Modifier: public", "DEL Javadoc", "DEL Javadoc", "DEL TagElement: @return", "DEL SimpleName: offset", "DEL ReturnStatement"]}]}}, {"UnrecognizedExtraField_diff": {"operations": ["Delete QualifiedName: org.apache.commons.io.compress.zip(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Simple placeholder for all those extra fields we don't want to deal with. <p>(2)", "Delete TextElement: Assumes local file data and central directory entries are identical - unless(3)", "Delete TextElement: told the opposite.</p>(4)", "Delete TagElement(5)", "Delete TextElement:  <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>(6)", "Delete TagElement: @author(7)", "Delete TextElement:  $Revision: 1.3 $(8)", "Delete TagElement: @version(9)", "Delete Javadoc(10)", "Delete Modifier: public(11)", "Delete SimpleName: UnrecognizedExtraField(12)", "Delete SimpleName: ZipExtraField(13)", "Delete SimpleType: ZipExtraField(14)", "Delete TextElement: Extra field data in central directory - without Header-ID or length(15)", "Delete TextElement: specifier.(16)", "Delete TagElement(17)", "Delete TextElement:  1.1(18)", "Delete TagElement: @since(19)", "Delete Javadoc(20)", "Delete Modifier: private(21)", "Delete PrimitiveType: byte(22)", "Delete Dimension(23)", "Delete ArrayType: byte[](24)", "Delete SimpleName: m_centralData(25)", "Delete VariableDeclarationFragment(26)", "Delete FieldDeclaration(27)", "Delete TextElement: The Header-ID.(28)", "Delete TagElement(29)", "Delete TextElement:  1.1(30)", "Delete TagElement: @since(31)", "Delete Javadoc(32)", "Delete Modifier: private(33)", "Delete SimpleName: ZipShort(34)", "Delete SimpleType: ZipShort(35)", "Delete SimpleName: m_headerID(36)", "Delete VariableDeclarationFragment(37)", "Delete FieldDeclaration(38)", "Delete TextElement: Extra field data in local file data - without Header-ID or length(39)", "Delete TextElement: specifier.(40)", "Delete TagElement(41)", "Delete TextElement:  1.1(42)", "Delete TagElement: @since(43)", "Delete Javadoc(44)", "Delete Modifier: private(45)", "Delete PrimitiveType: byte(46)", "Delete Dimension(47)", "Delete ArrayType: byte[](48)", "Delete SimpleName: m_localData(49)", "Delete VariableDeclarationFragment(50)", "Delete FieldDeclaration(51)", "Delete TextElement: Set the central directory data(52)", "Delete TagElement(53)", "Delete SimpleName: centralData(54)", "Delete TextElement:  the central directory data(55)", "Delete TagElement: @param(56)", "Delete Javadoc(57)", "Delete Modifier: public(58)", "Delete PrimitiveType: void(59)", "Delete SimpleName: setCentralDirectoryData(60)", "Delete Modifier: final(61)", "Delete PrimitiveType: byte(62)", "Delete Dimension(63)", "Delete ArrayType: byte[](64)", "Delete SimpleName: centralData(65)", "Delete SingleVariableDeclaration(66)", "Delete SimpleName: m_centralData(67)", "Delete SimpleName: centralData(68)", "Delete Assignment: =(69)", "Delete ExpressionStatement(70)", "Delete Block(71)", "Delete MethodDeclaration(72)", "Delete TextElement: Set the header ID.(73)", "Delete TagElement(74)", "Delete SimpleName: headerID(75)", "Delete TextElement:  the header ID(76)", "Delete TagElement: @param(77)", "Delete TextElement:  Use setHeaderID() instead(78)", "Delete TagElement: @deprecated(79)", "Delete SimpleName: setHeaderID(80)", "Delete SimpleName: ZipShort(81)", "Delete SimpleType: ZipShort(82)", "Delete MethodRefParameter(83)", "Delete MethodRef(84)", "Delete TagElement: @see(85)", "Delete Javadoc(86)", "Delete Modifier: public(87)", "Delete PrimitiveType: void(88)", "Delete SimpleName: setHeaderId(89)", "Delete Modifier: final(90)", "Delete SimpleName: ZipShort(91)", "Delete SimpleType: ZipShort(92)", "Delete SimpleName: headerID(93)", "Delete SingleVariableDeclaration(94)", "Delete SimpleName: setHeaderID(95)", "Delete SimpleName: headerID(96)", "Delete MethodInvocation(97)", "Delete ExpressionStatement(98)", "Delete Block(99)", "Delete MethodDeclaration(100)", "Delete TextElement: Set the header ID.(101)", "Delete TagElement(102)", "Delete SimpleName: headerID(103)", "Delete TextElement:  the header ID(104)", "Delete TagElement: @param(105)", "Delete Javadoc(106)", "Delete Modifier: public(107)", "Delete PrimitiveType: void(108)", "Delete SimpleName: setHeaderID(109)", "Delete Modifier: final(110)", "Delete SimpleName: ZipShort(111)", "Delete SimpleType: ZipShort(112)", "Delete SimpleName: headerID(113)", "Delete SingleVariableDeclaration(114)", "Delete SimpleName: m_headerID(115)", "Delete SimpleName: headerID(116)", "Delete Assignment: =(117)", "Delete ExpressionStatement(118)", "Delete Block(119)", "Delete MethodDeclaration(120)", "Delete TextElement: Set the local file data.(121)", "Delete TagElement(122)", "Delete SimpleName: localData(123)", "Delete TextElement:  the local file data(124)", "Delete TagElement: @param(125)", "Delete Javadoc(126)", "Delete Modifier: public(127)", "Delete PrimitiveType: void(128)", "Delete SimpleName: setLocalFileDataData(129)", "Delete Modifier: final(130)", "Delete PrimitiveType: byte(131)", "Delete Dimension(132)", "Delete ArrayType: byte[](133)", "Delete SimpleName: localData(134)", "Delete SingleVariableDeclaration(135)", "Delete SimpleName: m_localData(136)", "Delete SimpleName: localData(137)", "Delete Assignment: =(138)", "Delete ExpressionStatement(139)", "Delete Block(140)", "Delete MethodDeclaration(141)", "Delete TextElement: Get the central directory data.(142)", "Delete TagElement(143)", "Delete TextElement:  the central directory data.(144)", "Delete TagElement: @return(145)", "Delete Javadoc(146)", "Delete Modifier: public(147)", "Delete PrimitiveType: byte(148)", "Delete Dimension(149)", "Delete ArrayType: byte[](150)", "Delete SimpleName: getCentralDirectoryData(151)", "Delete SimpleName: m_centralData(152)", "Delete NullLiteral(153)", "Delete InfixExpression: !=(154)", "Delete SimpleName: m_centralData(155)", "Delete ReturnStatement(156)", "Delete Block(157)", "Delete IfStatement(158)", "Delete SimpleName: getLocalFileDataData(159)", "Delete MethodInvocation(160)", "Delete ReturnStatement(161)", "Delete Block(162)", "Delete MethodDeclaration(163)", "Delete TextElement: Get the length of the central directory in bytes.(164)", "Delete TagElement(165)", "Delete TextElement:  the length of the central directory in bytes.(166)", "Delete TagElement: @return(167)", "Delete Javadoc(168)", "Delete Modifier: public(169)", "Delete SimpleName: ZipShort(170)", "Delete SimpleType: ZipShort(171)", "Delete SimpleName: getCentralDirectoryLength(172)", "Delete SimpleName: m_centralData(173)", "Delete NullLiteral(174)", "Delete InfixExpression: !=(175)", "Delete SimpleName: ZipShort(176)", "Delete SimpleType: ZipShort(177)", "Delete QualifiedName: m_centralData.length(178)", "Delete ClassInstanceCreation(179)", "Delete ReturnStatement(180)", "Delete Block(181)", "Delete IfStatement(182)", "Delete SimpleName: getLocalFileDataLength(183)", "Delete MethodInvocation(184)", "Delete ReturnStatement(185)", "Delete Block(186)", "Delete MethodDeclaration(187)", "Delete TextElement: Get the HeaderID.(188)", "Delete TagElement(189)", "Delete TextElement:  the HeaderID(190)", "Delete TagElement: @return(191)", "Delete TextElement:  Use getHeaderID() instead(192)", "Delete TagElement: @deprecated(193)", "Delete SimpleName: getHeaderID(194)", "Delete MethodRef(195)", "Delete TagElement: @see(196)", "Delete Javadoc(197)", "Delete Modifier: public(198)", "Delete SimpleName: ZipShort(199)", "Delete SimpleType: ZipShort(200)", "Delete SimpleName: getHeaderId(201)", "Delete SimpleName: m_headerID(202)", "Delete ReturnStatement(203)", "Delete Block(204)", "Delete MethodDeclaration(205)", "Delete TextElement: Get the HeaderID.(206)", "Delete TagElement(207)", "Delete TextElement:  the HeaderID(208)", "Delete TagElement: @return(209)", "Delete Javadoc(210)", "Delete Modifier: public(211)", "Delete SimpleName: ZipShort(212)", "Delete SimpleType: ZipShort(213)", "Delete SimpleName: getHeaderID(214)", "Delete SimpleName: m_headerID(215)", "Delete ReturnStatement(216)", "Delete Block(217)", "Delete MethodDeclaration(218)", "Delete TextElement: Get the local file data.(219)", "Delete TagElement(220)", "Delete TextElement:  the local file data(221)", "Delete TagElement: @return(222)", "Delete Javadoc(223)", "Delete Modifier: public(224)", "Delete PrimitiveType: byte(225)", "Delete Dimension(226)", "Delete ArrayType: byte[](227)", "Delete SimpleName: getLocalFileDataData(228)", "Delete SimpleName: m_localData(229)", "Delete ReturnStatement(230)", "Delete Block(231)", "Delete MethodDeclaration(232)", "Delete TextElement: Get the length of local file data in bytes.(233)", "Delete TagElement(234)", "Delete TextElement:  the length of local file data in bytes(235)", "Delete TagElement: @return(236)", "Delete Javadoc(237)", "Delete Modifier: public(238)", "Delete SimpleName: ZipShort(239)", "Delete SimpleType: ZipShort(240)", "Delete SimpleName: getLocalFileDataLength(241)", "Delete SimpleName: ZipShort(242)", "Delete SimpleType: ZipShort(243)", "Delete QualifiedName: m_localData.length(244)", "Delete ClassInstanceCreation(245)", "Delete ReturnStatement(246)", "Delete Block(247)", "Delete MethodDeclaration(248)", "Delete TextElement: Parse LocalFiledata out of supplied buffer.(249)", "Delete TagElement(250)", "Delete SimpleName: buffer(251)", "Delete TextElement:  the buffer to use(252)", "Delete TagElement: @param(253)", "Delete SimpleName: offset(254)", "Delete TextElement:  the offset into buffer(255)", "Delete TagElement: @param(256)", "Delete SimpleName: length(257)", "Delete TextElement:  then length of data(258)", "Delete TagElement: @param(259)", "Delete Javadoc(260)", "Delete Modifier: public(261)", "Delete PrimitiveType: void(262)", "Delete SimpleName: parseFromLocalFileData(263)", "Delete Modifier: final(264)", "Delete PrimitiveType: byte(265)", "Delete Dimension(266)", "Delete ArrayType: byte[](267)", "Delete SimpleName: buffer(268)", "Delete SingleVariableDeclaration(269)", "Delete Modifier: final(270)", "Delete PrimitiveType: int(271)", "Delete SimpleName: offset(272)", "Delete SingleVariableDeclaration(273)", "Delete Modifier: final(274)", "Delete PrimitiveType: int(275)", "Delete SimpleName: length(276)", "Delete SingleVariableDeclaration(277)", "Delete Modifier: final(278)", "Delete PrimitiveType: byte(279)", "Delete Dimension(280)", "Delete ArrayType: byte[](281)", "Delete SimpleName: fileData(282)", "Delete PrimitiveType: byte(283)", "Delete Dimension(284)", "Delete ArrayType: byte[](285)", "Delete SimpleName: length(286)", "Delete ArrayCreation(287)", "Delete VariableDeclarationFragment(288)", "Delete VariableDeclarationStatement(289)", "Delete SimpleName: System(290)", "Delete SimpleName: arraycopy(291)", "Delete SimpleName: buffer(292)", "Delete SimpleName: offset(293)", "Delete SimpleName: fileData(294)", "Delete NumberLiteral: 0(295)", "Delete SimpleName: length(296)", "Delete MethodInvocation(297)", "Delete ExpressionStatement(298)", "Delete SimpleName: setLocalFileDataData(299)", "Delete SimpleName: fileData(300)", "Delete MethodInvocation(301)", "Delete ExpressionStatement(302)", "Delete Block(303)", "Delete MethodDeclaration(304)", "Delete TypeDeclaration: class(305)"]}}, {"ZipEntry_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.io.compress.zip", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.InvocationTargetException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Method"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.ArrayList", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.zip.ZipException", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TextElement:  1.2", "DEL Modifier: private", "DEL SimpleName: setSize", "DEL SimpleName: getSize", "DEL MethodDeclaration", "DEL CatchClause", "DEL TagElement: @since", "DEL ExpressionStatement", "DEL TextElement: Replaces all currently attached extra fields with the new array.", "DEL Modifier: private", "DEL SimpleName: setExtraFields", "DEL SimpleName: ZipExtraField", "DEL TypeLiteral", "DEL VariableDeclarationExpression", "DEL InfixExpression: <", "DEL NullLiteral", "DEL TagElement", "DEL IfStatement", "DEL FieldDeclaration", "DEL BooleanLiteral: true", "DEL TextElement: Extension that adds better handling of extra fields and provides access to", "DEL SimpleName: String", "DEL Javadoc", "DEL SimpleName: getCompressedSize", "DEL TextElement:  The ExternalAttributes value", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL PrefixExpression: !", "DEL Block", "DEL TagElement", "DEL TagElement", "DEL MethodDeclaration", "DEL SimpleName: ZipException", "DEL ArrayType: byte[]", "DEL MethodInvocation", "DEL ArrayType: ZipExtraField[]", "DEL TextElement:  1.1", "DEL SimpleName: setExtraFields", "DEL SimpleName: getExtra", "DEL SimpleType: RuntimeException", "DEL SimpleName: getExternalAttributes", "DEL TextElement: Creates a new zip entry with the specified name.", "DEL Modifier: public", "DEL Dimension", "DEL TextElement: Unfortunately ", "DEL MethodInvocation", "DEL SimpleType: ZipExtraField", "DEL TextElement: Sets the external file attributes.", "DEL StringLiteral: \": \"", "DEL TextElement:  1.2", "DEL SimpleName: m_externalAttributes", "DEL SimpleType: java.util.NoSuchElementException", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL IfStatement", "DEL Modifier: private", "DEL MethodDeclaration", "DEL Modifier: public", "DEL PrimitiveType: boolean", "DEL Modifier: final", "DEL SimpleName: extra", "DEL TagElement: @since", "DEL SimpleName: getCrc", "DEL CastExpression", "DEL TextElement:  the JDK ZipEntry to adapt", "DEL SimpleName: m_compressedSize", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL TextElement:  seems to access the extra data directly,", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Javadoc", "DEL ExpressionStatement", "DEL Javadoc", "DEL TagElement: @since", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: getCentralDirectoryExtra", "DEL InfixExpression: !=", "DEL SingleVariableDeclaration", "DEL InfixExpression: &&", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL SimpleType: ZipEntry", "DEL SimpleName: size", "DEL SimpleName: extraField", "DEL SimpleName: entry", "DEL TextElement:  1.1", "DEL Modifier: final", "DEL Javadoc", "DEL SimpleName: c_triedToGetMethod", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: cSize", "DEL ExpressionStatement", "DEL SimpleName: ExtraFieldUtils", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL SimpleType: Exception", "DEL TagElement: @since", "DEL VariableDeclarationFragment", "DEL SimpleName: name", "DEL MethodDeclaration", "DEL Block", "DEL Block", "DEL SimpleName: add", "DEL SimpleName: ZipExtraField", "DEL SimpleName: Exception", "DEL PrimitiveType: long", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: i", "DEL SimpleName: type", "DEL TextElement:  <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>", "DEL InfixExpression: +", "DEL SimpleName: i", "DEL Dimension", "DEL Javadoc", "DEL QualifiedName: java.util.zip.ZipOutputStream", "DEL VariableDeclarationStatement", "DEL SimpleName: getHeaderID", "DEL SimpleName: i", "DEL SimpleName: setExtra", "DEL TextElement: Override to make this class work in JDK 1.1 like a 1.2 class.", "DEL TextElement:  Description of the Returned Value", "DEL SimpleName: getCompressedSize", "DEL MethodInvocation", "DEL Modifier: final", "DEL TagElement: @since", "DEL Block", "DEL SimpleName: crc", "DEL SimpleName: type", "DEL SimpleName: getExtra", "DEL Block", "DEL ExpressionStatement", "DEL Block", "DEL TextElement:  The feature to be added to the ExtraField attribute", "DEL SimpleName: setComprSize", "DEL SimpleName: mergeCentralDirectoryData", "DEL TextElement:  1.1", "DEL SimpleName: extra", "DEL Modifier: final", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleType: RuntimeException", "DEL SimpleName: ZipEntry", "DEL Modifier: private", "DEL SimpleName: getInternalAttributes", "DEL TagElement: @since", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL TextElement: Retrieves the external file attributes.", "DEL Modifier: final", "DEL SimpleType: java.util.zip.ZipEntry", "DEL SimpleName: setExtra", "DEL PrimitiveType: byte", "DEL ArrayType: Long[]", "DEL TextElement: java.util.zip.ZipOutputStream", "DEL MethodInvocation", "DEL ForStatement", "DEL Javadoc", "DEL SimpleName: ZipExtraField", "DEL SimpleName: setComprSize", "DEL SimpleName: externalAttributes", "DEL TextElement:  1.1", "DEL Modifier: public", "DEL SimpleType: ZipExtraField", "DEL TagElement", "DEL SimpleName: removeExtraField", "DEL InfixExpression: !=", "DEL SimpleType: Long", "DEL SimpleName: entry", "DEL SimpleName: size", "DEL SimpleName: Object", "DEL TagElement: @param", "DEL SuperMethodInvocation", "DEL QualifiedName: java.util.zip.ZipEntry", "DEL SimpleName: extra", "DEL SimpleName: c_setCompressedSizeMethod", "DEL IfStatement", "DEL CatchClause", "DEL SimpleName: entry", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL TextElement: Helper for JDK 1.1 <-> 1.2 incompatibility.", "DEL TextElement:  1.1", "DEL TextElement: Adds an extra fields - replacing an already present extra field of the", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL SimpleName: addExtraField", "DEL SimpleName: extra", "DEL SimpleName: ExtraFieldUtils", "DEL SimpleName: m_externalAttributes", "DEL SimpleName: i", "DEL ThisExpression", "DEL SynchronizedStatement", "DEL TagElement", "DEL TagElement: @since", "DEL Javadoc", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleType: Throwable", "DEL SimpleName: setComment", "DEL MethodInvocation", "DEL SimpleType: java.util.zip.ZipEntry", "DEL Assignment: =", "DEL Javadoc", "DEL SimpleName: setTime", "DEL SimpleType: ZipExtraField", "DEL PrefixExpression: !", "DEL NumberLiteral: 0", "DEL SimpleName: ZipEntry", "DEL ThrowStatement", "DEL SimpleName: message", "DEL TextElement: Helper for JDK 1.1", "DEL Dimension", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: c_lockReflection", "DEL SimpleName: value", "DEL TextElement:  The LocalFileDataExtra value", "DEL SimpleName: Throwable", "DEL SimpleName: extra", "DEL SimpleName: c_setCompressedSizeMethod", "DEL IfStatement", "DEL PrimitiveType: void", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL PrimitiveType: void", "DEL Block", "DEL TextElement: This either stores the size for later usage or invokes setCompressedSize", "DEL Block", "DEL SimpleName: getName", "DEL Modifier: private", "DEL SimpleType: ZipException", "DEL NullLiteral", "DEL MethodDeclaration", "DEL Modifier: public", "DEL Block", "DEL SimpleName: invoke", "DEL SimpleName: entry", "DEL InfixExpression: !=", "DEL Modifier: final", "DEL IfStatement", "DEL SimpleName: i", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL TextElement:  1.2", "DEL Block", "DEL SimpleName: mergeLocalFileDataData", "DEL Dimension", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL QualifiedName: java.util.zip.ZipEntry", "DEL TagElement: @return", "DEL Dimension", "DEL SimpleName: getMessage", "DEL TagElement: @since", "DEL SimpleName: i", "DEL TagElement: @param", "DEL Assignment: =", "DEL ArrayInitializer", "DEL Modifier: final", "DEL SimpleType: ZipEntry", "DEL SimpleName: m_compressedSize", "DEL TextElement:  1.2", "DEL Modifier: public", "DEL SimpleName: m_extraFields", "DEL ExpressionStatement", "DEL SimpleType: Exception", "DEL SuperConstructorInvocation", "DEL TagElement: @link", "DEL SimpleName: i", "DEL SimpleName: done", "DEL SimpleType: ZipShort", "DEL Javadoc", "DEL SimpleName: ZipExtraField", "DEL MethodInvocation", "DEL Block", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: c_triedToGetMethod", "DEL TagElement", "DEL CatchClause", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: setExternalAttributes", "DEL Javadoc", "DEL Javadoc", "DEL SimpleName: ZipEntry", "DEL TagElement: @since", "DEL TagElement", "DEL Modifier: final", "DEL SimpleName: Long", "DEL Javadoc", "DEL Modifier: public", "DEL Block", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL SimpleName: e", "DEL PrimitiveType: void", "DEL SimpleName: i", "DEL Block", "DEL Modifier: static", "DEL SimpleType: ZipExtraField", "DEL TextElement:  1.2", "DEL SimpleName: setInternalAttributes", "DEL SimpleName: size", "DEL TagElement: @return", "DEL MethodInvocation", "DEL SimpleName: setExtraFields", "DEL SimpleName: m_extraFields", "DEL TextElement: Invoke setCompressedSize via reflection.", "DEL MethodInvocation", "DEL TextElement: Make this class work in JDK 1.1 like a 1.2 class. <p>", "DEL SimpleType: ZipEntry", "DEL SimpleName: RuntimeException", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL SimpleName: ZipExtraField", "DEL TagElement", "DEL MethodInvocation", "DEL PrimitiveType: long", "DEL SimpleType: String", "DEL SimpleName: name", "DEL TextElement:  The new Extra value", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL PrimitiveType: void", "DEL Block", "DEL Modifier: final", "DEL QualifiedName: java.util.zip.ZipEntry", "DEL TagElement", "DEL SimpleName: m_extraFields", "DEL SimpleType: ZipExtraField", "DEL SimpleName: equals", "DEL SimpleName: entry", "DEL VariableDeclarationStatement", "DEL SimpleName: getInternalAttributes", "DEL SimpleName: m_extraFields", "DEL SimpleName: setInternalAttributes", "DEL SimpleType: ZipExtraField", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"Exception setting the compressed size \"", "DEL Javadoc", "DEL ArrayType: byte[]", "DEL Block", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL CastExpression", "DEL CastExpression", "DEL TextElement:  The new ExtraFields value", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: setExternalAttributes", "DEL SimpleName: haveSetCompressedSize", "DEL TagElement", "DEL SimpleName: m_compressedSize", "DEL TagElement: @since", "DEL TextElement: Retrieves the extra data for the local file data.", "DEL SimpleName: result", "DEL Dimension", "DEL SimpleName: Long", "DEL TagElement: @since", "DEL TextElement:  The ExtraFields value", "DEL TagElement: @since", "DEL VariableDeclarationStatement", "DEL SimpleName: getExternalAttributes", "DEL QualifiedName: Long.TYPE", "DEL MethodInvocation", "DEL ReturnStatement", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL ThrowStatement", "DEL SimpleType: Long", "DEL TextElement: directly.", "DEL SimpleName: t", "DEL SimpleName: ZipEntry", "DEL ArrayType: byte[]", "DEL SimpleName: getExtraFields", "DEL SimpleName: entry", "DEL ExpressionStatement", "DEL ThrowStatement", "DEL SimpleName: m_externalAttributes", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL QualifiedName: fields.length", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: e", "DEL TagElement: @param", "DEL SimpleName: ArrayList", "DEL Assignment: =", "DEL SimpleName: done", "DEL Javadoc", "DEL Block", "DEL TagElement: @param", "DEL SimpleName: name", "DEL SimpleName: m_compressedSize", "DEL Block", "DEL ArrayType: ZipExtraField[]", "DEL TextElement: via reflection.</p>", "DEL SimpleName: size", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL Dimension", "DEL SimpleName: performSetCompressedSize", "DEL IfStatement", "DEL SimpleName: performSetCompressedSize", "DEL SimpleName: entry", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleType: java.util.zip.ZipEntry", "DEL PrimitiveType: int", "DEL StringLiteral: \"of \"", "DEL SimpleName: getExternalAttributes", "DEL SimpleName: cSize", "DEL SimpleName: size", "DEL PrimitiveType: byte", "DEL PrimitiveType: byte", "DEL SimpleName: nse", "DEL SimpleType: Class", "DEL TagElement: @author", "DEL PrimitiveType: int", "DEL TagElement", "DEL MethodInvocation", "DEL ArrayAccess", "DEL TagElement: @since", "DEL ArrayType: Class[]", "DEL SimpleName: crc", "DEL ArrayType: ZipExtraField[]", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 0", "DEL SimpleName: entry", "DEL Dimension", "DEL PrimitiveType: long", "DEL SimpleType: Throwable", "DEL SimpleName: RuntimeException", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: entry", "DEL SimpleName: setCrc", "DEL ClassInstanceCreation", "DEL Assignment: =", "DEL SimpleName: done", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL TextElement:  The new InternalAttributes value", "DEL SimpleName: Object", "DEL SimpleName: extra", "DEL TextElement: Overwrite clone", "DEL Block", "DEL TextElement: Remove an extra fields.", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: ZipEntry", "DEL SimpleName: ZipException", "DEL SimpleType: InvocationTargetException", "DEL SimpleName: haveSetCompressedSize", "DEL MethodInvocation", "DEL SimpleName: getInternalAttributes", "DEL SimpleName: getExtraFields", "DEL VariableDeclarationStatement", "DEL TagElement: @exception", "DEL ExpressionStatement", "DEL SimpleName: extraField", "DEL SimpleName: checkSCS", "DEL IfStatement", "DEL TagElement: @param", "DEL TextElement: Helper for JDK 1.1", "DEL SimpleName: m_extraFields", "DEL ArrayType: byte[]", "DEL SimpleName: entry", "DEL TextElement:  Description of the Returned Value", "DEL SimpleName: extraField", "DEL Javadoc", "DEL SimpleName: ZipEntry", "DEL PrimitiveType: byte", "DEL StringLiteral: \"of \"", "DEL ExpressionStatement", "DEL SimpleName: setExtra", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: printStackTrace", "DEL TextElement:  The new ComprSize value", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL TagElement", "DEL MethodDeclaration", "DEL SimpleName: done", "DEL FieldDeclaration", "DEL TextElement:  1.1", "DEL SimpleName: setExtraFields", "DEL SimpleName: RuntimeException", "DEL VariableDeclarationFragment", "DEL SimpleName: e", "DEL SimpleName: m_extraFields", "DEL SimpleName: size", "DEL Modifier: static", "DEL Block", "DEL TextElement:  1.1", "DEL SimpleName: crc", "DEL NullLiteral", "DEL QualifiedName: java.util.NoSuchElementException", "DEL PrimitiveType: long", "DEL SimpleName: setExtra", "DEL SimpleType: String", "DEL Modifier: protected", "DEL Block", "DEL VariableDeclarationExpression", "DEL SimpleName: entry", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: extraField", "DEL InfixExpression: +", "DEL SimpleName: getExtraFields", "DEL SimpleName: setExtra", "DEL SimpleName: value", "DEL SuperConstructorInvocation", "DEL TagElement: @param", "DEL PrimitiveType: long", "DEL PostfixExpression: ++", "DEL SimpleName: getMessage", "DEL PrimitiveType: byte", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Javadoc", "DEL Block", "DEL SimpleName: result", "DEL TextElement: Creates a new zip entry with fields taken from the specified zip entry.", "DEL SimpleName: type", "DEL TagElement: @since", "DEL SimpleName: clone", "DEL Modifier: final", "DEL SimpleName: size", "DEL MethodInvocation", "DEL SimpleName: longValue", "DEL Modifier: public", "DEL TextElement:  1.2", "DEL SimpleName: i", "DEL SimpleName: ExtraFieldUtils", "DEL SimpleName: entry", "DEL SimpleType: ZipExtraField", "DEL TagElement", "DEL SimpleName: c_lockReflection", "DEL Block", "DEL ThrowStatement", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL SimpleName: s", "DEL VariableDeclarationFragment", "DEL TagElement: @throws", "DEL SimpleType: RuntimeException", "DEL TagElement", "DEL TagElement: @return", "DEL TagElement: @since", "DEL PostfixExpression: ++", "DEL InfixExpression: +", "DEL Block", "DEL ForStatement", "DEL TagElement", "DEL Block", "DEL SimpleName: RuntimeException", "DEL ExpressionStatement", "DEL TagElement: @since", "DEL SimpleName: t", "DEL SimpleName: RuntimeException", "DEL SimpleType: ZipShort", "DEL TextElement:  the entry to adapt", "DEL StringLiteral: \": \"", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: ite", "DEL Dimension", "DEL MethodDeclaration", "DEL PrimitiveType: byte", "DEL SimpleName: ZipExtraField", "DEL Modifier: public", "DEL ArrayType: byte[]", "DEL Block", "DEL SimpleName: getLocalFileDataExtra", "DEL NullLiteral", "DEL SimpleName: get", "DEL SimpleName: remove", "DEL BooleanLiteral: false", "DEL SimpleName: m_extraFields", "DEL ArrayCreation", "DEL ArrayType: byte[]", "DEL SimpleType: NoSuchMethodException", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL Dimension", "DEL SimpleName: i", "DEL SimpleName: InvocationTargetException", "DEL Modifier: static", "DEL TagElement: @param", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SimpleName: fields", "DEL Modifier: final", "DEL TextElement:  if can not create entry", "DEL Block", "DEL SimpleName: nested", "DEL TextElement:  if can not create entry", "DEL Block", "DEL Block", "DEL ArrayType: ZipExtraField[]", "DEL Block", "DEL VariableDeclarationFragment", "DEL InfixExpression: >", "DEL SimpleName: NoSuchMethodException", "DEL MethodDeclaration", "DEL TextElement: Retrieves the extra data for the central directory.", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL PrimitiveType: long", "DEL ExpressionStatement", "DEL PrefixExpression: !", "DEL TagElement: @return", "DEL SimpleName: c_triedToGetMethod", "DEL ExpressionStatement", "DEL SimpleName: entry", "DEL QualifiedName: java.util.zip.ZipEntry", "DEL Assignment: =", "DEL SimpleName: getTargetException", "DEL PrimitiveType: void", "DEL SimpleName: entry", "DEL SimpleName: entry", "DEL ClassInstanceCreation", "DEL SimpleName: setExternalAttributes", "DEL VariableDeclarationFragment", "DEL SimpleName: size", "DEL VariableDeclarationFragment", "DEL SimpleName: clear", "DEL Modifier: public", "DEL TagElement: @since", "DEL SimpleName: String", "DEL TextElement: Throws an Exception if extra data cannot be parsed into extra fields.", "DEL ExpressionStatement", "DEL SimpleName: setInternalAttributes", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL SimpleType: ArrayList", "DEL TagElement", "DEL Modifier: public", "DEL TryStatement", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL TextElement: same type.", "DEL Block", "DEL Modifier: final", "DEL SimpleName: cSize", "DEL TryStatement", "DEL SimpleName: ExtraFieldUtils", "DEL VariableDeclarationStatement", "DEL SimpleName: getCompressedSize", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL TextElement:  1.2", "DEL ExpressionStatement", "DEL SimpleName: entry", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL TextElement:  1.2", "DEL MethodInvocation", "DEL SimpleName: parse", "DEL Modifier: public", "DEL FieldDeclaration", "DEL Modifier: final", "DEL Block", "DEL SimpleName: equals", "DEL TextElement: Try to get a handle to the setCompressedSize method.", "DEL InfixExpression: <", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: extra", "DEL SimpleName: getTime", "DEL Block", "DEL SimpleName: m_extraFields", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL TagElement: @since", "DEL SimpleName: Throwable", "DEL TextElement:  The CompressedSize value", "DEL Block", "DEL SimpleName: getExtraFields", "DEL PrimitiveType: boolean", "DEL BooleanLiteral: true", "DEL FieldDeclaration", "DEL Modifier: final", "DEL TagElement: @return", "DEL ExpressionStatement", "DEL ForStatement", "DEL TextElement:  The CentralDirectoryExtra value", "DEL SimpleName: value", "DEL TextElement:  1.1", "DEL SimpleName: setExtraFields", "DEL TagElement: @since", "DEL MethodInvocation", "DEL SimpleName: parse", "DEL SimpleName: setExtra", "DEL PrimitiveType: long", "DEL SimpleName: getMethod", "DEL VariableDeclarationFragment", "DEL TryStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: done", "DEL SimpleName: Method", "DEL InfixExpression: +", "DEL SimpleName: other", "DEL SingleVariableDeclaration", "DEL SimpleName: entry", "DEL SimpleName: Class", "DEL Javadoc", "DEL ExpressionStatement", "DEL Modifier: static", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: size", "DEL SingleVariableDeclaration", "DEL SimpleName: other", "DEL Block", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL TextElement: Helper for JDK 1.1", "DEL InfixExpression: !=", "DEL Dimension", "DEL TagElement: @exception", "DEL NullLiteral", "DEL ExpressionStatement", "DEL ArrayType: ZipExtraField[]", "DEL SimpleName: ZipException", "DEL SimpleName: ZipShort", "DEL TagElement: @param", "DEL Modifier: public", "DEL TextElement:  Description of Parameter", "DEL SimpleName: externalAttributes", "DEL SimpleName: extra", "DEL Javadoc", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL PostfixExpression: ++", "DEL SimpleName: c_setCompressedSizeMethod", "DEL SimpleName: size", "DEL SimpleName: ZipExtraField", "DEL Modifier: final", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleType: java.util.zip.ZipEntry", "DEL TextElement:  Description of Parameter", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL Javadoc", "DEL Modifier: private", "DEL SimpleName: fields", "DEL SimpleName: getExtraFields", "DEL TextElement:  the name of entry", "DEL TextElement:  1.1", "DEL VariableDeclarationFragment", "DEL SimpleName: ZipExtraField", "DEL SimpleType: java.util.zip.ZipEntry", "DEL TagElement: @param", "DEL InfixExpression: >", "DEL TagElement: @param", "DEL TryStatement", "DEL SimpleName: e", "DEL Javadoc", "DEL TagElement", "DEL ReturnStatement", "DEL SimpleName: size", "DEL SimpleName: m_internalAttributes", "DEL TagElement: @return", "DEL SimpleName: ZipExtraField", "DEL MethodInvocation", "DEL TagElement: @since", "DEL SimpleName: set", "DEL SimpleName: m_internalAttributes", "DEL Block", "DEL SimpleName: type", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL SimpleName: getComment", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Block", "DEL QualifiedName: java.util.zip.ZipEntry", "DEL MethodInvocation", "DEL TagElement: @since", "DEL Block", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: s", "DEL TagElement", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL TextElement:  1.1", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL IfStatement", "DEL SimpleName: message", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL MethodDeclaration", "DEL Modifier: final", "DEL TextElement: Creates a new zip entry with fields taken from the specified zip entry.", "DEL PrimitiveType: void", "DEL InfixExpression: &&", "DEL SimpleType: Long", "DEL SimpleName: add", "DEL TextElement:  1.2", "DEL SimpleName: Long", "DEL TextElement: so overriding getExtra doesn't help - we need to modify super's data", "DEL Modifier: final", "DEL TagElement", "DEL TagElement: @since", "DEL SimpleType: ZipEntry", "DEL Modifier: static", "DEL Modifier: public", "DEL SimpleName: i", "DEL ArrayCreation", "DEL SuperMethodInvocation", "DEL TextElement: the internal and external file attributes.", "DEL MethodDeclaration", "DEL CatchClause", "DEL ExpressionStatement", "DEL SimpleName: ArrayList", "DEL CastExpression", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: ZipEntry", "DEL FieldDeclaration", "DEL SimpleType: ZipException", "DEL TagElement: @since", "DEL SimpleName: c_setCompressedSizeMethod", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: ZipException", "DEL Modifier: final", "DEL PrimitiveType: void", "DEL Modifier: final", "DEL SimpleType: ArrayList", "DEL SimpleName: entry", "DEL SimpleName: size", "DEL VariableDeclarationExpression", "DEL PrimitiveType: int", "DEL SimpleType: String", "DEL TextElement:  if fail to set extra data", "DEL Assignment: =", "DEL SimpleName: done", "DEL TextElement:  The new ExternalAttributes value", "DEL Block", "DEL Modifier: public", "DEL PrimitiveType: long", "DEL ReturnStatement", "DEL Dimension", "DEL ArrayCreation", "DEL Modifier: final", "DEL SimpleName: entry", "DEL StringLiteral: \"Exception setting the compressed size \"", "DEL MethodInvocation", "DEL TextElement:  Description of Parameter", "DEL VariableDeclarationStatement", "DEL SimpleName: toArray", "DEL TagElement: @param", "DEL SimpleName: m_internalAttributes", "DEL SimpleName: entry", "DEL Assignment: =", "DEL SimpleName: type", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: done", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL TagElement: @return", "DEL MethodDeclaration", "DEL Javadoc", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL CastExpression", "DEL SimpleName: extraField", "DEL SimpleName: String", "DEL SimpleName: done", "DEL ExpressionStatement", "DEL Javadoc", "DEL Javadoc", "DEL SimpleName: m_extraFields", "DEL TextElement:  1.1", "DEL SimpleName: ZipShort", "DEL Modifier: final", "DEL BooleanLiteral: false", "DEL SimpleName: m_extraFields", "DEL TagElement: @version", "DEL SimpleName: getMethod", "DEL MethodInvocation", "DEL InfixExpression: <", "DEL SimpleName: i", "DEL SimpleName: getHeaderID", "DEL SimpleName: entry", "DEL Modifier: static", "DEL TextElement:  1.1", "DEL ArrayInitializer", "DEL SimpleName: setExtra", "DEL TextElement:  The InternalAttributes value", "DEL TextElement: Retrieves the internal file attributes.", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL TextElement:  1.1", "DEL NumberLiteral: 0", "DEL PrimitiveType: long", "DEL SimpleName: message", "DEL SimpleName: extra", "DEL Modifier: public", "DEL TypeDeclaration: class", "DEL VariableDeclarationFragment", "DEL SimpleName: entry", "DEL TextElement:  $Revision: 1.3 $", "DEL SimpleName: ite", "DEL TextElement:  1.1", "DEL Javadoc", "DEL SimpleName: entry", "DEL Modifier: private", "DEL Block", "DEL SimpleName: externalAttributes", "DEL TextElement: Sets the internal file attributes.", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL ConstructorInvocation", "DEL SimpleName: entry", "DEL MethodDeclaration", "DEL Modifier: final", "DEL SimpleName: m_extraFields", "DEL PrimitiveType: void", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL SimpleType: Long", "DEL TagElement", "DEL StringLiteral: \"setCompressedSize\"", "DEL SimpleName: message", "DEL MethodInvocation", "DEL SimpleName: clone", "DEL MethodInvocation", "DEL SuperMethodInvocation", "DEL SimpleName: getHeaderID", "DEL Dimension", "DEL TextElement:  1.1", "DEL SingleVariableDeclaration", "DEL ConditionalExpression", "DEL Modifier: private", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: Long", "DEL Block", "DEL VariableDeclarationFragment", "DEL TagElement: @since", "DEL SimpleName: Exception", "DEL SimpleName: size", "DEL SimpleType: Object", "DEL Block", "DEL TextElement: Are we running JDK 1.2 or higher?", "DEL IfStatement", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: setMethod", "DEL Modifier: final", "DEL SimpleName: getMessage", "DEL TextElement: Retrieves extra fields.", "DEL SimpleName: get", "DEL SimpleType: RuntimeException", "DEL ExpressionStatement", "DEL Modifier: public", "DEL Modifier: private", "DEL ParenthesizedExpression", "DEL Modifier: final", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: ZipEntry", "DEL SimpleType: ZipExtraField", "DEL CatchClause", "DEL SimpleName: fields", "DEL SimpleName: m_extraFields", "DEL SimpleName: nested", "DEL TextElement:  1.1", "DEL SimpleType: ZipExtraField", "DEL VariableDeclarationFragment", "DEL SimpleType: Method", "DEL TagElement: @return", "DEL TagElement: @since", "DEL SimpleName: checkSCS"]}]}}, {"ZipEntry_diff": {"operations": ["Delete QualifiedName: org.apache.commons.io.compress.zip(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.InvocationTargetException(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.Method(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.ArrayList(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.zip.ZipException(8)", "Delete ImportDeclaration(9)", "Delete TextElement: Extension that adds better handling of extra fields and provides access to(10)", "Delete TextElement: the internal and external file attributes.(11)", "Delete TagElement(12)", "Delete TextElement:  <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>(13)", "Delete TagElement: @author(14)", "Delete TextElement:  $Revision: 1.3 $(15)", "Delete TagElement: @version(16)", "Delete Javadoc(17)", "Delete Modifier: public(18)", "Delete SimpleName: ZipEntry(19)", "Delete QualifiedName: java.util.zip.ZipEntry(20)", "Delete SimpleType: java.util.zip.ZipEntry(21)", "Delete TextElement: Helper for JDK 1.1(22)", "Delete TagElement(23)", "Delete TextElement:  1.2(24)", "Delete TagElement: @since(25)", "Delete Javadoc(26)", "Delete Modifier: private(27)", "Delete Modifier: static(28)", "Delete SimpleName: Method(29)", "Delete SimpleType: Method(30)", "Delete SimpleName: c_setCompressedSizeMethod(31)", "Delete VariableDeclarationFragment(32)", "Delete FieldDeclaration(33)", "Delete TextElement: Helper for JDK 1.1(34)", "Delete TagElement(35)", "Delete TextElement:  1.2(36)", "Delete TagElement: @since(37)", "Delete Javadoc(38)", "Delete Modifier: private(39)", "Delete Modifier: static(40)", "Delete Modifier: final(41)", "Delete SimpleName: Object(42)", "Delete SimpleType: Object(43)", "Delete SimpleName: c_lockReflection(44)", "Delete SimpleName: Object(45)", "Delete SimpleType: Object(46)", "Delete ClassInstanceCreation(47)", "Delete VariableDeclarationFragment(48)", "Delete FieldDeclaration(49)", "Delete TextElement: Helper for JDK 1.1(50)", "Delete TagElement(51)", "Delete TextElement:  1.2(52)", "Delete TagElement: @since(53)", "Delete Javadoc(54)", "Delete Modifier: private(55)", "Delete Modifier: static(56)", "Delete PrimitiveType: boolean(57)", "Delete SimpleName: c_triedToGetMethod(58)", "Delete VariableDeclarationFragment(59)", "Delete FieldDeclaration(60)", "Delete Modifier: private(61)", "Delete Modifier: final(62)", "Delete SimpleName: ArrayList(63)", "Delete SimpleType: ArrayList(64)", "Delete SimpleName: m_extraFields(65)", "Delete SimpleName: ArrayList(66)", "Delete SimpleType: ArrayList(67)", "Delete ClassInstanceCreation(68)", "Delete VariableDeclarationFragment(69)", "Delete FieldDeclaration(70)", "Delete Modifier: private(71)", "Delete PrimitiveType: int(72)", "Delete SimpleName: m_internalAttributes(73)", "Delete VariableDeclarationFragment(74)", "Delete FieldDeclaration(75)", "Delete Modifier: private(76)", "Delete PrimitiveType: long(77)", "Delete SimpleName: m_externalAttributes(78)", "Delete VariableDeclarationFragment(79)", "Delete FieldDeclaration(80)", "Delete TextElement: Helper for JDK 1.1 <-> 1.2 incompatibility.(81)", "Delete TagElement(82)", "Delete TextElement:  1.2(83)", "Delete TagElement: @since(84)", "Delete Javadoc(85)", "Delete Modifier: private(86)", "Delete SimpleName: Long(87)", "Delete SimpleType: Long(88)", "Delete SimpleName: m_compressedSize(89)", "Delete VariableDeclarationFragment(90)", "Delete FieldDeclaration(91)", "Delete TextElement: Creates a new zip entry with the specified name.(92)", "Delete TagElement(93)", "Delete SimpleName: name(94)", "Delete TextElement:  the name of entry(95)", "Delete TagElement: @param(96)", "Delete TextElement:  1.1(97)", "Delete TagElement: @since(98)", "Delete Javadoc(99)", "Delete Modifier: public(100)", "Delete SimpleName: ZipEntry(101)", "Delete Modifier: final(102)", "Delete SimpleName: String(103)", "Delete SimpleType: String(104)", "Delete SimpleName: name(105)", "Delete SingleVariableDeclaration(106)", "Delete SimpleName: name(107)", "Delete SuperConstructorInvocation(108)", "Delete Block(109)", "Delete MethodDeclaration(110)", "Delete TextElement: Creates a new zip entry with fields taken from the specified zip entry.(111)", "Delete TagElement(112)", "Delete SimpleName: entry(113)", "Delete TextElement:  the JDK ZipEntry to adapt(114)", "Delete TagElement: @param(115)", "Delete SimpleName: ZipException(116)", "Delete TextElement:  if can not create entry(117)", "Delete TagElement: @exception(118)", "Delete TextElement:  1.1(119)", "Delete TagElement: @since(120)", "Delete Javadoc(121)", "Delete Modifier: public(122)", "Delete SimpleName: ZipEntry(123)", "Delete QualifiedName: java.util.zip.ZipEntry(124)", "Delete SimpleType: java.util.zip.ZipEntry(125)", "Delete SimpleName: entry(126)", "Delete SingleVariableDeclaration(127)", "Delete SimpleName: ZipException(128)", "Delete SimpleType: ZipException(129)", "Delete SimpleName: entry(130)", "Delete SimpleName: getName(131)", "Delete MethodInvocation(132)", "Delete SuperConstructorInvocation(133)", "Delete SimpleName: setComment(134)", "Delete SimpleName: entry(135)", "Delete SimpleName: getComment(136)", "Delete MethodInvocation(137)", "Delete MethodInvocation(138)", "Delete ExpressionStatement(139)", "Delete SimpleName: setMethod(140)", "Delete SimpleName: entry(141)", "Delete SimpleName: getMethod(142)", "Delete MethodInvocation(143)", "Delete MethodInvocation(144)", "Delete ExpressionStatement(145)", "Delete SimpleName: setTime(146)", "Delete SimpleName: entry(147)", "Delete SimpleName: getTime(148)", "Delete MethodInvocation(149)", "Delete MethodInvocation(150)", "Delete ExpressionStatement(151)", "Delete Modifier: final(152)", "Delete PrimitiveType: long(153)", "Delete SimpleName: size(154)", "Delete SimpleName: entry(155)", "Delete SimpleName: getSize(156)", "Delete MethodInvocation(157)", "Delete VariableDeclarationFragment(158)", "Delete VariableDeclarationStatement(159)", "Delete SimpleName: size(160)", "Delete NumberLiteral: 0(161)", "Delete InfixExpression: >(162)", "Delete SimpleName: setSize(163)", "Delete SimpleName: size(164)", "Delete MethodInvocation(165)", "Delete ExpressionStatement(166)", "Delete Block(167)", "Delete IfStatement(168)", "Delete Modifier: final(169)", "Delete PrimitiveType: long(170)", "Delete SimpleName: cSize(171)", "Delete SimpleName: entry(172)", "Delete SimpleName: getCompressedSize(173)", "Delete MethodInvocation(174)", "Delete VariableDeclarationFragment(175)", "Delete VariableDeclarationStatement(176)", "Delete SimpleName: cSize(177)", "Delete NumberLiteral: 0(178)", "Delete InfixExpression: >(179)", "Delete SimpleName: setComprSize(180)", "Delete SimpleName: cSize(181)", "Delete MethodInvocation(182)", "Delete ExpressionStatement(183)", "Delete Block(184)", "Delete IfStatement(185)", "Delete Modifier: final(186)", "Delete PrimitiveType: long(187)", "Delete SimpleName: crc(188)", "Delete SimpleName: entry(189)", "Delete SimpleName: getCrc(190)", "Delete MethodInvocation(191)", "Delete VariableDeclarationFragment(192)", "Delete VariableDeclarationStatement(193)", "Delete SimpleName: crc(194)", "Delete NumberLiteral: 0(195)", "Delete InfixExpression: >(196)", "Delete SimpleName: setCrc(197)", "Delete SimpleName: crc(198)", "Delete MethodInvocation(199)", "Delete ExpressionStatement(200)", "Delete Block(201)", "Delete IfStatement(202)", "Delete Modifier: final(203)", "Delete PrimitiveType: byte(204)", "Delete Dimension(205)", "Delete ArrayType: byte[](206)", "Delete SimpleName: extra(207)", "Delete SimpleName: entry(208)", "Delete SimpleName: getExtra(209)", "Delete MethodInvocation(210)", "Delete VariableDeclarationFragment(211)", "Delete VariableDeclarationStatement(212)", "Delete SimpleName: extra(213)", "Delete NullLiteral(214)", "Delete InfixExpression: !=(215)", "Delete SimpleName: setExtraFields(216)", "Delete SimpleName: ExtraFieldUtils(217)", "Delete SimpleName: parse(218)", "Delete SimpleName: extra(219)", "Delete MethodInvocation(220)", "Delete MethodInvocation(221)", "Delete ExpressionStatement(222)", "Delete Block(223)", "Delete SimpleName: setExtra(224)", "Delete MethodInvocation(225)", "Delete ExpressionStatement(226)", "Delete Block(227)", "Delete IfStatement(228)", "Delete Block(229)", "Delete MethodDeclaration(230)", "Delete TextElement: Creates a new zip entry with fields taken from the specified zip entry.(231)", "Delete TagElement(232)", "Delete SimpleName: entry(233)", "Delete TextElement:  the entry to adapt(234)", "Delete TagElement: @param(235)", "Delete SimpleName: ZipException(236)", "Delete TextElement:  if can not create entry(237)", "Delete TagElement: @exception(238)", "Delete TextElement:  1.1(239)", "Delete TagElement: @since(240)", "Delete Javadoc(241)", "Delete Modifier: public(242)", "Delete SimpleName: ZipEntry(243)", "Delete Modifier: final(244)", "Delete SimpleName: ZipEntry(245)", "Delete SimpleType: ZipEntry(246)", "Delete SimpleName: entry(247)", "Delete SingleVariableDeclaration(248)", "Delete SimpleName: ZipException(249)", "Delete SimpleType: ZipException(250)", "Delete QualifiedName: java.util.zip.ZipEntry(251)", "Delete SimpleType: java.util.zip.ZipEntry(252)", "Delete SimpleName: entry(253)", "Delete CastExpression(254)", "Delete ConstructorInvocation(255)", "Delete SimpleName: setInternalAttributes(256)", "Delete SimpleName: entry(257)", "Delete SimpleName: getInternalAttributes(258)", "Delete MethodInvocation(259)", "Delete MethodInvocation(260)", "Delete ExpressionStatement(261)", "Delete SimpleName: setExternalAttributes(262)", "Delete SimpleName: entry(263)", "Delete SimpleName: getExternalAttributes(264)", "Delete MethodInvocation(265)", "Delete MethodInvocation(266)", "Delete ExpressionStatement(267)", "Delete SimpleName: setExtraFields(268)", "Delete SimpleName: entry(269)", "Delete SimpleName: getExtraFields(270)", "Delete MethodInvocation(271)", "Delete MethodInvocation(272)", "Delete ExpressionStatement(273)", "Delete Block(274)", "Delete MethodDeclaration(275)", "Delete TextElement: Try to get a handle to the setCompressedSize method.(276)", "Delete TagElement(277)", "Delete TextElement:  1.2(278)", "Delete TagElement: @since(279)", "Delete Javadoc(280)", "Delete Modifier: private(281)", "Delete Modifier: static(282)", "Delete PrimitiveType: void(283)", "Delete SimpleName: checkSCS(284)", "Delete SimpleName: c_triedToGetMethod(285)", "Delete PrefixExpression: !(286)", "Delete SimpleName: c_lockReflection(287)", "Delete SimpleName: c_triedToGetMethod(288)", "Delete BooleanLiteral: true(289)", "Delete Assignment: =(290)", "Delete ExpressionStatement(291)", "Delete SimpleName: c_setCompressedSizeMethod(292)", "Delete QualifiedName: java.util.zip.ZipEntry(293)", "Delete SimpleType: java.util.zip.ZipEntry(294)", "Delete TypeLiteral(295)", "Delete SimpleName: getMethod(296)", "Delete StringLiteral: \"setCompressedSize\"(297)", "Delete SimpleName: Class(298)", "Delete SimpleType: Class(299)", "Delete Dimension(300)", "Delete ArrayType: Class[](301)", "Delete QualifiedName: Long.TYPE(302)", "Delete ArrayInitializer(303)", "Delete ArrayCreation(304)", "Delete MethodInvocation(305)", "Delete Assignment: =(306)", "Delete ExpressionStatement(307)", "Delete Block(308)", "Delete SimpleName: NoSuchMethodException(309)", "Delete SimpleType: NoSuchMethodException(310)", "Delete SimpleName: nse(311)", "Delete SingleVariableDeclaration(312)", "Delete Block(313)", "Delete CatchClause(314)", "Delete TryStatement(315)", "Delete Block(316)", "Delete SynchronizedStatement(317)", "Delete Block(318)", "Delete IfStatement(319)", "Delete Block(320)", "Delete MethodDeclaration(321)", "Delete TextElement: Are we running JDK 1.2 or higher?(322)", "Delete TagElement(323)", "Delete TextElement:  Description of the Returned Value(324)", "Delete TagElement: @return(325)", "Delete TextElement:  1.2(326)", "Delete TagElement: @since(327)", "Delete Javadoc(328)", "Delete Modifier: private(329)", "Delete Modifier: static(330)", "Delete PrimitiveType: boolean(331)", "Delete SimpleName: haveSetCompressedSize(332)", "Delete SimpleName: checkSCS(333)", "Delete MethodInvocation(334)", "Delete ExpressionStatement(335)", "Delete SimpleName: c_setCompressedSizeMethod(336)", "Delete NullLiteral(337)", "Delete InfixExpression: !=(338)", "Delete ReturnStatement(339)", "Delete Block(340)", "Delete MethodDeclaration(341)", "Delete TextElement: Invoke setCompressedSize via reflection.(342)", "Delete TagElement(343)", "Delete SimpleName: entry(344)", "Delete TextElement:  Description of Parameter(345)", "Delete TagElement: @param(346)", "Delete SimpleName: size(347)", "Delete TextElement:  Description of Parameter(348)", "Delete TagElement: @param(349)", "Delete TextElement:  1.2(350)", "Delete TagElement: @since(351)", "Delete Javadoc(352)", "Delete Modifier: private(353)", "Delete Modifier: static(354)", "Delete PrimitiveType: void(355)", "Delete SimpleName: performSetCompressedSize(356)", "Delete Modifier: final(357)", "Delete SimpleName: ZipEntry(358)", "Delete SimpleType: ZipEntry(359)", "Delete SimpleName: entry(360)", "Delete SingleVariableDeclaration(361)", "Delete Modifier: final(362)", "Delete PrimitiveType: long(363)", "Delete SimpleName: size(364)", "Delete SingleVariableDeclaration(365)", "Delete Modifier: final(366)", "Delete SimpleName: Long(367)", "Delete SimpleType: Long(368)", "Delete Dimension(369)", "Delete ArrayType: Long[](370)", "Delete SimpleName: s(371)", "Delete SimpleName: Long(372)", "Delete SimpleType: Long(373)", "Delete SimpleName: size(374)", "Delete ClassInstanceCreation(375)", "Delete ArrayInitializer(376)", "Delete VariableDeclarationFragment(377)", "Delete VariableDeclarationStatement(378)", "Delete SimpleName: c_setCompressedSizeMethod(379)", "Delete SimpleName: invoke(380)", "Delete SimpleName: entry(381)", "Delete SimpleName: s(382)", "Delete MethodInvocation(383)", "Delete ExpressionStatement(384)", "Delete Block(385)", "Delete Modifier: final(386)", "Delete SimpleName: InvocationTargetException(387)", "Delete SimpleType: InvocationTargetException(388)", "Delete SimpleName: ite(389)", "Delete SingleVariableDeclaration(390)", "Delete Modifier: final(391)", "Delete SimpleName: Throwable(392)", "Delete SimpleType: Throwable(393)", "Delete SimpleName: nested(394)", "Delete SimpleName: ite(395)", "Delete SimpleName: getTargetException(396)", "Delete MethodInvocation(397)", "Delete VariableDeclarationFragment(398)", "Delete VariableDeclarationStatement(399)", "Delete Modifier: final(400)", "Delete SimpleName: String(401)", "Delete SimpleType: String(402)", "Delete SimpleName: message(403)", "Delete StringLiteral: \"Exception setting the compressed size \"(404)", "Delete StringLiteral: \"of \"(405)", "Delete InfixExpression: +(406)", "Delete SimpleName: entry(407)", "Delete StringLiteral: \": \"(408)", "Delete SimpleName: nested(409)", "Delete SimpleName: getMessage(410)", "Delete MethodInvocation(411)", "Delete InfixExpression: +(412)", "Delete VariableDeclarationFragment(413)", "Delete VariableDeclarationStatement(414)", "Delete SimpleName: RuntimeException(415)", "Delete SimpleType: RuntimeException(416)", "Delete SimpleName: message(417)", "Delete ClassInstanceCreation(418)", "Delete ThrowStatement(419)", "Delete Block(420)", "Delete CatchClause(421)", "Delete Modifier: final(422)", "Delete SimpleName: Throwable(423)", "Delete SimpleType: Throwable(424)", "Delete SimpleName: t(425)", "Delete SingleVariableDeclaration(426)", "Delete Modifier: final(427)", "Delete SimpleName: String(428)", "Delete SimpleType: String(429)", "Delete SimpleName: message(430)", "Delete StringLiteral: \"Exception setting the compressed size \"(431)", "Delete StringLiteral: \"of \"(432)", "Delete InfixExpression: +(433)", "Delete SimpleName: entry(434)", "Delete StringLiteral: \": \"(435)", "Delete SimpleName: t(436)", "Delete SimpleName: getMessage(437)", "Delete MethodInvocation(438)", "Delete InfixExpression: +(439)", "Delete VariableDeclarationFragment(440)", "Delete VariableDeclarationStatement(441)", "Delete SimpleName: RuntimeException(442)", "Delete SimpleType: RuntimeException(443)", "Delete SimpleName: message(444)", "Delete ClassInstanceCreation(445)", "Delete ThrowStatement(446)", "Delete Block(447)", "Delete CatchClause(448)", "Delete TryStatement(449)", "Delete Block(450)", "Delete MethodDeclaration(451)", "Delete TextElement: Make this class work in JDK 1.1 like a 1.2 class. <p>(452)", "Delete TextElement: This either stores the size for later usage or invokes setCompressedSize(453)", "Delete TextElement: via reflection.</p>(454)", "Delete TagElement(455)", "Delete SimpleName: size(456)", "Delete TextElement:  The new ComprSize value(457)", "Delete TagElement: @param(458)", "Delete TextElement:  1.2(459)", "Delete TagElement: @since(460)", "Delete Javadoc(461)", "Delete Modifier: public(462)", "Delete PrimitiveType: void(463)", "Delete SimpleName: setComprSize(464)", "Delete Modifier: final(465)", "Delete PrimitiveType: long(466)", "Delete SimpleName: size(467)", "Delete SingleVariableDeclaration(468)", "Delete SimpleName: haveSetCompressedSize(469)", "Delete MethodInvocation(470)", "Delete SimpleName: performSetCompressedSize(471)", "Delete ThisExpression(472)", "Delete SimpleName: size(473)", "Delete MethodInvocation(474)", "Delete ExpressionStatement(475)", "Delete Block(476)", "Delete SimpleName: m_compressedSize(477)", "Delete SimpleName: Long(478)", "Delete SimpleType: Long(479)", "Delete SimpleName: size(480)", "Delete ClassInstanceCreation(481)", "Delete Assignment: =(482)", "Delete ExpressionStatement(483)", "Delete Block(484)", "Delete IfStatement(485)", "Delete Block(486)", "Delete MethodDeclaration(487)", "Delete TextElement: Sets the external file attributes.(488)", "Delete TagElement(489)", "Delete SimpleName: externalAttributes(490)", "Delete TextElement:  The new ExternalAttributes value(491)", "Delete TagElement: @param(492)", "Delete TextElement:  1.1(493)", "Delete TagElement: @since(494)", "Delete Javadoc(495)", "Delete Modifier: public(496)", "Delete PrimitiveType: void(497)", "Delete SimpleName: setExternalAttributes(498)", "Delete Modifier: final(499)", "Delete PrimitiveType: long(500)", "Delete SimpleName: externalAttributes(501)", "Delete SingleVariableDeclaration(502)", "Delete SimpleName: m_externalAttributes(503)", "Delete SimpleName: externalAttributes(504)", "Delete Assignment: =(505)", "Delete ExpressionStatement(506)", "Delete Block(507)", "Delete MethodDeclaration(508)", "Delete TextElement: Throws an Exception if extra data cannot be parsed into extra fields.(509)", "Delete TagElement(510)", "Delete SimpleName: extra(511)", "Delete TextElement:  The new Extra value(512)", "Delete TagElement: @param(513)", "Delete SimpleName: RuntimeException(514)", "Delete TextElement:  if fail to set extra data(515)", "Delete TagElement: @throws(516)", "Delete TextElement:  1.1(517)", "Delete TagElement: @since(518)", "Delete Javadoc(519)", "Delete Modifier: public(520)", "Delete PrimitiveType: void(521)", "Delete SimpleName: setExtra(522)", "Delete Modifier: final(523)", "Delete PrimitiveType: byte(524)", "Delete Dimension(525)", "Delete ArrayType: byte[](526)", "Delete SimpleName: extra(527)", "Delete SingleVariableDeclaration(528)", "Delete SimpleName: RuntimeException(529)", "Delete SimpleType: RuntimeException(530)", "Delete SimpleName: setExtraFields(531)", "Delete SimpleName: ExtraFieldUtils(532)", "Delete SimpleName: parse(533)", "Delete SimpleName: extra(534)", "Delete MethodInvocation(535)", "Delete MethodInvocation(536)", "Delete ExpressionStatement(537)", "Delete Block(538)", "Delete Modifier: final(539)", "Delete SimpleName: Exception(540)", "Delete SimpleType: Exception(541)", "Delete SimpleName: e(542)", "Delete SingleVariableDeclaration(543)", "Delete SimpleName: RuntimeException(544)", "Delete SimpleType: RuntimeException(545)", "Delete SimpleName: e(546)", "Delete SimpleName: getMessage(547)", "Delete MethodInvocation(548)", "Delete ClassInstanceCreation(549)", "Delete ThrowStatement(550)", "Delete Block(551)", "Delete CatchClause(552)", "Delete TryStatement(553)", "Delete Block(554)", "Delete MethodDeclaration(555)", "Delete TextElement: Replaces all currently attached extra fields with the new array.(556)", "Delete TagElement(557)", "Delete SimpleName: fields(558)", "Delete TextElement:  The new ExtraFields value(559)", "Delete TagElement: @param(560)", "Delete TextElement:  1.1(561)", "Delete TagElement: @since(562)", "Delete Javadoc(563)", "Delete Modifier: public(564)", "Delete PrimitiveType: void(565)", "Delete SimpleName: setExtraFields(566)", "Delete Modifier: final(567)", "Delete SimpleName: ZipExtraField(568)", "Delete SimpleType: ZipExtraField(569)", "Delete Dimension(570)", "Delete ArrayType: ZipExtraField[](571)", "Delete SimpleName: fields(572)", "Delete SingleVariableDeclaration(573)", "Delete SimpleName: m_extraFields(574)", "Delete SimpleName: clear(575)", "Delete MethodInvocation(576)", "Delete ExpressionStatement(577)", "Delete PrimitiveType: int(578)", "Delete SimpleName: i(579)", "Delete NumberLiteral: 0(580)", "Delete VariableDeclarationFragment(581)", "Delete VariableDeclarationExpression(582)", "Delete SimpleName: i(583)", "Delete QualifiedName: fields.length(584)", "Delete InfixExpression: <(585)", "Delete SimpleName: i(586)", "Delete PostfixExpression: ++(587)", "Delete SimpleName: m_extraFields(588)", "Delete SimpleName: add(589)", "Delete SimpleName: fields(590)", "Delete SimpleName: i(591)", "Delete ArrayAccess(592)", "Delete MethodInvocation(593)", "Delete ExpressionStatement(594)", "Delete Block(595)", "Delete ForStatement(596)", "Delete SimpleName: setExtra(597)", "Delete MethodInvocation(598)", "Delete ExpressionStatement(599)", "Delete Block(600)", "Delete MethodDeclaration(601)", "Delete TextElement: Sets the internal file attributes.(602)", "Delete TagElement(603)", "Delete SimpleName: value(604)", "Delete TextElement:  The new InternalAttributes value(605)", "Delete TagElement: @param(606)", "Delete TextElement:  1.1(607)", "Delete TagElement: @since(608)", "Delete Javadoc(609)", "Delete Modifier: public(610)", "Delete PrimitiveType: void(611)", "Delete SimpleName: setInternalAttributes(612)", "Delete Modifier: final(613)", "Delete PrimitiveType: int(614)", "Delete SimpleName: value(615)", "Delete SingleVariableDeclaration(616)", "Delete SimpleName: m_internalAttributes(617)", "Delete SimpleName: value(618)", "Delete Assignment: =(619)", "Delete ExpressionStatement(620)", "Delete Block(621)", "Delete MethodDeclaration(622)", "Delete TextElement: Retrieves the extra data for the central directory.(623)", "Delete TagElement(624)", "Delete TextElement:  The CentralDirectoryExtra value(625)", "Delete TagElement: @return(626)", "Delete TextElement:  1.1(627)", "Delete TagElement: @since(628)", "Delete Javadoc(629)", "Delete Modifier: public(630)", "Delete PrimitiveType: byte(631)", "Delete Dimension(632)", "Delete ArrayType: byte[](633)", "Delete SimpleName: getCentralDirectoryExtra(634)", "Delete SimpleName: ExtraFieldUtils(635)", "Delete SimpleName: mergeCentralDirectoryData(636)", "Delete SimpleName: getExtraFields(637)", "Delete MethodInvocation(638)", "Delete MethodInvocation(639)", "Delete ReturnStatement(640)", "Delete Block(641)", "Delete MethodDeclaration(642)", "Delete TextElement: Override to make this class work in JDK 1.1 like a 1.2 class.(643)", "Delete TagElement(644)", "Delete TextElement:  The CompressedSize value(645)", "Delete TagElement: @return(646)", "Delete TextElement:  1.2(647)", "Delete TagElement: @since(648)", "Delete Javadoc(649)", "Delete Modifier: public(650)", "Delete PrimitiveType: long(651)", "Delete SimpleName: getCompressedSize(652)", "Delete SimpleName: m_compressedSize(653)", "Delete NullLiteral(654)", "Delete InfixExpression: !=(655)", "Delete SimpleName: m_compressedSize(656)", "Delete SimpleName: longValue(657)", "Delete MethodInvocation(658)", "Delete ReturnStatement(659)", "Delete Block(660)", "Delete IfStatement(661)", "Delete SimpleName: getCompressedSize(662)", "Delete SuperMethodInvocation(663)", "Delete ReturnStatement(664)", "Delete Block(665)", "Delete MethodDeclaration(666)", "Delete TextElement: Retrieves the external file attributes.(667)", "Delete TagElement(668)", "Delete TextElement:  The ExternalAttributes value(669)", "Delete TagElement: @return(670)", "Delete TextElement:  1.1(671)", "Delete TagElement: @since(672)", "Delete Javadoc(673)", "Delete Modifier: public(674)", "Delete PrimitiveType: long(675)", "Delete SimpleName: getExternalAttributes(676)", "Delete SimpleName: m_externalAttributes(677)", "Delete ReturnStatement(678)", "Delete Block(679)", "Delete MethodDeclaration(680)", "Delete TextElement: Retrieves extra fields.(681)", "Delete TagElement(682)", "Delete TextElement:  The ExtraFields value(683)", "Delete TagElement: @return(684)", "Delete TextElement:  1.1(685)", "Delete TagElement: @since(686)", "Delete Javadoc(687)", "Delete Modifier: public(688)", "Delete SimpleName: ZipExtraField(689)", "Delete SimpleType: ZipExtraField(690)", "Delete Dimension(691)", "Delete ArrayType: ZipExtraField[](692)", "Delete SimpleName: getExtraFields(693)", "Delete Modifier: final(694)", "Delete SimpleName: ZipExtraField(695)", "Delete SimpleType: ZipExtraField(696)", "Delete Dimension(697)", "Delete ArrayType: ZipExtraField[](698)", "Delete SimpleName: result(699)", "Delete SimpleName: ZipExtraField(700)", "Delete SimpleType: ZipExtraField(701)", "Delete Dimension(702)", "Delete ArrayType: ZipExtraField[](703)", "Delete SimpleName: m_extraFields(704)", "Delete SimpleName: size(705)", "Delete MethodInvocation(706)", "Delete ArrayCreation(707)", "Delete VariableDeclarationFragment(708)", "Delete VariableDeclarationStatement(709)", "Delete SimpleName: ZipExtraField(710)", "Delete SimpleType: ZipExtraField(711)", "Delete Dimension(712)", "Delete ArrayType: ZipExtraField[](713)", "Delete SimpleName: m_extraFields(714)", "Delete SimpleName: toArray(715)", "Delete SimpleName: result(716)", "Delete MethodInvocation(717)", "Delete CastExpression(718)", "Delete ReturnStatement(719)", "Delete Block(720)", "Delete MethodDeclaration(721)", "Delete TextElement: Retrieves the internal file attributes.(722)", "Delete TagElement(723)", "Delete TextElement:  The InternalAttributes value(724)", "Delete TagElement: @return(725)", "Delete TextElement:  1.1(726)", "Delete TagElement: @since(727)", "Delete Javadoc(728)", "Delete Modifier: public(729)", "Delete PrimitiveType: int(730)", "Delete SimpleName: getInternalAttributes(731)", "Delete SimpleName: m_internalAttributes(732)", "Delete ReturnStatement(733)", "Delete Block(734)", "Delete MethodDeclaration(735)", "Delete TextElement: Retrieves the extra data for the local file data.(736)", "Delete TagElement(737)", "Delete TextElement:  The LocalFileDataExtra value(738)", "Delete TagElement: @return(739)", "Delete TextElement:  1.1(740)", "Delete TagElement: @since(741)", "Delete Javadoc(742)", "Delete Modifier: public(743)", "Delete PrimitiveType: byte(744)", "Delete Dimension(745)", "Delete ArrayType: byte[](746)", "Delete SimpleName: getLocalFileDataExtra(747)", "Delete PrimitiveType: byte(748)", "Delete Dimension(749)", "Delete ArrayType: byte[](750)", "Delete SimpleName: extra(751)", "Delete SimpleName: getExtra(752)", "Delete MethodInvocation(753)", "Delete VariableDeclarationFragment(754)", "Delete VariableDeclarationStatement(755)", "Delete SimpleName: extra(756)", "Delete NullLiteral(757)", "Delete InfixExpression: !=(758)", "Delete SimpleName: extra(759)", "Delete PrimitiveType: byte(760)", "Delete Dimension(761)", "Delete ArrayType: byte[](762)", "Delete NumberLiteral: 0(763)", "Delete ArrayCreation(764)", "Delete ConditionalExpression(765)", "Delete ReturnStatement(766)", "Delete Block(767)", "Delete MethodDeclaration(768)", "Delete TextElement: Adds an extra fields - replacing an already present extra field of the(769)", "Delete TextElement: same type.(770)", "Delete TagElement(771)", "Delete SimpleName: extraField(772)", "Delete TextElement:  The feature to be added to the ExtraField attribute(773)", "Delete TagElement: @param(774)", "Delete TextElement:  1.1(775)", "Delete TagElement: @since(776)", "Delete Javadoc(777)", "Delete Modifier: public(778)", "Delete PrimitiveType: void(779)", "Delete SimpleName: addExtraField(780)", "Delete Modifier: final(781)", "Delete SimpleName: ZipExtraField(782)", "Delete SimpleType: ZipExtraField(783)", "Delete SimpleName: extraField(784)", "Delete SingleVariableDeclaration(785)", "Delete Modifier: final(786)", "Delete SimpleName: ZipShort(787)", "Delete SimpleType: ZipShort(788)", "Delete SimpleName: type(789)", "Delete SimpleName: extraField(790)", "Delete SimpleName: getHeaderID(791)", "Delete MethodInvocation(792)", "Delete VariableDeclarationFragment(793)", "Delete VariableDeclarationStatement(794)", "Delete PrimitiveType: boolean(795)", "Delete SimpleName: done(796)", "Delete BooleanLiteral: false(797)", "Delete VariableDeclarationFragment(798)", "Delete VariableDeclarationStatement(799)", "Delete PrimitiveType: int(800)", "Delete SimpleName: i(801)", "Delete NumberLiteral: 0(802)", "Delete VariableDeclarationFragment(803)", "Delete VariableDeclarationExpression(804)", "Delete SimpleName: done(805)", "Delete PrefixExpression: !(806)", "Delete SimpleName: i(807)", "Delete SimpleName: m_extraFields(808)", "Delete SimpleName: size(809)", "Delete MethodInvocation(810)", "Delete InfixExpression: <(811)", "Delete InfixExpression: &&(812)", "Delete SimpleName: i(813)", "Delete PostfixExpression: ++(814)", "Delete Modifier: final(815)", "Delete SimpleName: ZipExtraField(816)", "Delete SimpleType: ZipExtraField(817)", "Delete SimpleName: other(818)", "Delete SimpleName: ZipExtraField(819)", "Delete SimpleType: ZipExtraField(820)", "Delete SimpleName: m_extraFields(821)", "Delete SimpleName: get(822)", "Delete SimpleName: i(823)", "Delete MethodInvocation(824)", "Delete CastExpression(825)", "Delete VariableDeclarationFragment(826)", "Delete VariableDeclarationStatement(827)", "Delete SimpleName: other(828)", "Delete SimpleName: getHeaderID(829)", "Delete MethodInvocation(830)", "Delete SimpleName: equals(831)", "Delete SimpleName: type(832)", "Delete MethodInvocation(833)", "Delete SimpleName: m_extraFields(834)", "Delete SimpleName: set(835)", "Delete SimpleName: i(836)", "Delete SimpleName: extraField(837)", "Delete MethodInvocation(838)", "Delete ExpressionStatement(839)", "Delete SimpleName: done(840)", "Delete BooleanLiteral: true(841)", "Delete Assignment: =(842)", "Delete ExpressionStatement(843)", "Delete Block(844)", "Delete IfStatement(845)", "Delete Block(846)", "Delete ForStatement(847)", "Delete SimpleName: done(848)", "Delete PrefixExpression: !(849)", "Delete SimpleName: m_extraFields(850)", "Delete SimpleName: add(851)", "Delete SimpleName: extraField(852)", "Delete MethodInvocation(853)", "Delete ExpressionStatement(854)", "Delete Block(855)", "Delete IfStatement(856)", "Delete SimpleName: setExtra(857)", "Delete MethodInvocation(858)", "Delete ExpressionStatement(859)", "Delete Block(860)", "Delete MethodDeclaration(861)", "Delete TextElement: Overwrite clone(862)", "Delete TagElement(863)", "Delete TextElement:  Description of the Returned Value(864)", "Delete TagElement: @return(865)", "Delete TextElement:  1.1(866)", "Delete TagElement: @since(867)", "Delete Javadoc(868)", "Delete Modifier: public(869)", "Delete SimpleName: Object(870)", "Delete SimpleType: Object(871)", "Delete SimpleName: clone(872)", "Delete SimpleName: ZipEntry(873)", "Delete SimpleType: ZipEntry(874)", "Delete SimpleName: entry(875)", "Delete NullLiteral(876)", "Delete VariableDeclarationFragment(877)", "Delete VariableDeclarationStatement(878)", "Delete SimpleName: entry(879)", "Delete SimpleName: ZipEntry(880)", "Delete SimpleType: ZipEntry(881)", "Delete QualifiedName: java.util.zip.ZipEntry(882)", "Delete SimpleType: java.util.zip.ZipEntry(883)", "Delete SimpleName: clone(884)", "Delete SuperMethodInvocation(885)", "Delete CastExpression(886)", "Delete ClassInstanceCreation(887)", "Delete Assignment: =(888)", "Delete ExpressionStatement(889)", "Delete Block(890)", "Delete Modifier: final(891)", "Delete SimpleName: Exception(892)", "Delete SimpleType: Exception(893)", "Delete SimpleName: e(894)", "Delete SingleVariableDeclaration(895)", "Delete SimpleName: e(896)", "Delete SimpleName: printStackTrace(897)", "Delete MethodInvocation(898)", "Delete ExpressionStatement(899)", "Delete NullLiteral(900)", "Delete ReturnStatement(901)", "Delete Block(902)", "Delete CatchClause(903)", "Delete TryStatement(904)", "Delete SimpleName: entry(905)", "Delete SimpleName: setInternalAttributes(906)", "Delete SimpleName: getInternalAttributes(907)", "Delete MethodInvocation(908)", "Delete MethodInvocation(909)", "Delete ExpressionStatement(910)", "Delete SimpleName: entry(911)", "Delete SimpleName: setExternalAttributes(912)", "Delete SimpleName: getExternalAttributes(913)", "Delete MethodInvocation(914)", "Delete MethodInvocation(915)", "Delete ExpressionStatement(916)", "Delete SimpleName: entry(917)", "Delete SimpleName: setExtraFields(918)", "Delete SimpleName: getExtraFields(919)", "Delete MethodInvocation(920)", "Delete MethodInvocation(921)", "Delete ExpressionStatement(922)", "Delete SimpleName: entry(923)", "Delete ReturnStatement(924)", "Delete Block(925)", "Delete MethodDeclaration(926)", "Delete TextElement: Remove an extra fields.(927)", "Delete TagElement(928)", "Delete SimpleName: type(929)", "Delete TextElement:  Description of Parameter(930)", "Delete TagElement: @param(931)", "Delete TextElement:  1.1(932)", "Delete TagElement: @since(933)", "Delete Javadoc(934)", "Delete Modifier: public(935)", "Delete PrimitiveType: void(936)", "Delete SimpleName: removeExtraField(937)", "Delete Modifier: final(938)", "Delete SimpleName: ZipShort(939)", "Delete SimpleType: ZipShort(940)", "Delete SimpleName: type(941)", "Delete SingleVariableDeclaration(942)", "Delete PrimitiveType: boolean(943)", "Delete SimpleName: done(944)", "Delete BooleanLiteral: false(945)", "Delete VariableDeclarationFragment(946)", "Delete VariableDeclarationStatement(947)", "Delete PrimitiveType: int(948)", "Delete SimpleName: i(949)", "Delete NumberLiteral: 0(950)", "Delete VariableDeclarationFragment(951)", "Delete VariableDeclarationExpression(952)", "Delete SimpleName: done(953)", "Delete PrefixExpression: !(954)", "Delete SimpleName: i(955)", "Delete SimpleName: m_extraFields(956)", "Delete SimpleName: size(957)", "Delete MethodInvocation(958)", "Delete InfixExpression: <(959)", "Delete InfixExpression: &&(960)", "Delete SimpleName: i(961)", "Delete PostfixExpression: ++(962)", "Delete SimpleName: ZipExtraField(963)", "Delete SimpleType: ZipExtraField(964)", "Delete SimpleName: m_extraFields(965)", "Delete SimpleName: get(966)", "Delete SimpleName: i(967)", "Delete MethodInvocation(968)", "Delete CastExpression(969)", "Delete ParenthesizedExpression(970)", "Delete SimpleName: getHeaderID(971)", "Delete MethodInvocation(972)", "Delete SimpleName: equals(973)", "Delete SimpleName: type(974)", "Delete MethodInvocation(975)", "Delete SimpleName: m_extraFields(976)", "Delete SimpleName: remove(977)", "Delete SimpleName: i(978)", "Delete MethodInvocation(979)", "Delete ExpressionStatement(980)", "Delete SimpleName: done(981)", "Delete BooleanLiteral: true(982)", "Delete Assignment: =(983)", "Delete ExpressionStatement(984)", "Delete Block(985)", "Delete IfStatement(986)", "Delete Block(987)", "Delete ForStatement(988)", "Delete SimpleName: done(989)", "Delete PrefixExpression: !(990)", "Delete QualifiedName: java.util.NoSuchElementException(991)", "Delete SimpleType: java.util.NoSuchElementException(992)", "Delete ClassInstanceCreation(993)", "Delete ThrowStatement(994)", "Delete Block(995)", "Delete IfStatement(996)", "Delete SimpleName: setExtra(997)", "Delete MethodInvocation(998)", "Delete ExpressionStatement(999)", "Delete Block(1000)", "Delete MethodDeclaration(1001)", "Delete TextElement: Unfortunately (1002)", "Delete QualifiedName: java.util.zip.ZipOutputStream(1003)", "Delete TextElement: java.util.zip.ZipOutputStream(1004)", "Delete TagElement: @link(1005)", "Delete TextElement:  seems to access the extra data directly,(1006)", "Delete TextElement: so overriding getExtra doesn't help - we need to modify super's data(1007)", "Delete TextElement: directly.(1008)", "Delete TagElement(1009)", "Delete TextElement:  1.1(1010)", "Delete TagElement: @since(1011)", "Delete Javadoc(1012)", "Delete Modifier: protected(1013)", "Delete PrimitiveType: void(1014)", "Delete SimpleName: setExtra(1015)", "Delete SimpleName: setExtra(1016)", "Delete SimpleName: ExtraFieldUtils(1017)", "Delete SimpleName: mergeLocalFileDataData(1018)", "Delete SimpleName: getExtraFields(1019)", "Delete MethodInvocation(1020)", "Delete MethodInvocation(1021)", "Delete SuperMethodInvocation(1022)", "Delete ExpressionStatement(1023)", "Delete Block(1024)", "Delete MethodDeclaration(1025)", "Delete TypeDeclaration: class(1026)"]}}, {"ZipExtraField_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.io.compress.zip"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.zip.ZipException", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL SimpleName: ZipShort", "DEL SimpleType: ZipException", "DEL TagElement: @since", "DEL ArrayType: byte[]", "DEL TextElement:  1.1", "DEL TextElement:  offset into buffer to read data", "DEL MethodDeclaration", "DEL TagElement: @since", "DEL TextElement:  1.1", "DEL Dimension", "DEL TagElement: @exception", "DEL Dimension", "DEL TextElement:  The CentralDirectoryLength value", "DEL TextElement:  $Revision: 1.3 $", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL TextElement:  The LocalFileDataLength value", "DEL TagElement: @return", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL TextElement: Extra fields usually appear twice per file, once in the local file data and", "DEL Dimension", "DEL TextElement:  the buffer to read data from", "DEL TagElement: @since", "DEL TagElement: @return", "DEL TagElement: @return", "DEL TextElement:  on error", "DEL TextElement: The Header-ID.", "DEL TextElement: specifier.", "DEL TagElement", "DEL TextElement: to be. ", "DEL ArrayType: byte[]", "DEL SimpleName: length", "DEL SimpleName: offset", "DEL ArrayType: byte[]", "DEL SimpleName: buffer", "DEL TextElement:  1.1", "DEL PrimitiveType: byte", "DEL SimpleName: getLocalFileDataData", "DEL TextElement: once in the central directory. Usually they are the same, but they don't have", "DEL TagElement: @since", "DEL TextElement: specifier.", "DEL TagElement: @author", "DEL TextElement: length specifier.", "DEL SimpleName: ZipExtraField", "DEL TagElement: @return", "DEL TagElement: @since", "DEL TextElement:  1.1", "DEL SimpleName: ZipShort", "DEL TagElement: @param", "DEL TextElement: The actual data to put central directory - without Header-ID or length", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleType: ZipShort", "DEL SimpleName: ZipException", "DEL Modifier: public", "DEL SimpleName: parseFromLocalFileData", "DEL TagElement: @since", "DEL Javadoc", "DEL Javadoc", "DEL TagElement", "DEL TextElement:  The CentralDirectoryData value", "DEL SingleVariableDeclaration", "DEL TextElement: Length of the extra field in the local file data - without Header-ID or", "DEL TagElement", "DEL TextElement:  The LocalFileDataData value", "DEL SimpleName: offset", "DEL TextElement:  <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>", "DEL SimpleName: getLocalFileDataLength", "DEL MethodDeclaration", "DEL Javadoc", "DEL TextElement:  1.1", "DEL TagElement: @version", "DEL TagElement: @link", "DEL PrimitiveType: int", "DEL MethodDeclaration", "DEL SimpleType: ZipShort", "DEL TextElement: length specifier.", "DEL TextElement:  java.util.zip.ZipOutputStream", "DEL TagElement", "DEL SimpleName: getCentralDirectoryData", "DEL SingleVariableDeclaration", "DEL PrimitiveType: byte", "DEL TagElement: @param", "DEL TagElement: @return", "DEL SimpleName: ZipShort", "DEL SimpleName: getCentralDirectoryLength", "DEL TextElement: Length of the extra field in the central directory - without Header-ID or", "DEL TextElement: will only use the local file data in both places.</p>", "DEL TextElement:  The HeaderId value", "DEL TextElement: General format of extra field data. <p>", "DEL MethodDeclaration", "DEL TextElement: The actual data to put into local file data - without Header-ID or length", "DEL SimpleName: length", "DEL SimpleName: buffer", "DEL Javadoc", "DEL PrimitiveType: byte", "DEL SimpleName: getHeaderID", "DEL TagElement", "DEL SimpleType: ZipShort", "DEL TextElement:  the length of data", "DEL Javadoc", "DEL SimpleName: ZipException", "DEL TextElement:  1.1", "DEL Javadoc", "DEL QualifiedName: java.util.zip.ZipOutputStream", "DEL TypeDeclaration: interface", "DEL PrimitiveType: void", "DEL TagElement", "DEL TextElement: Populate data from this array as if it was in local file data."]}]}}, {"ZipExtraField_diff": {"operations": ["Delete QualifiedName: org.apache.commons.io.compress.zip(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.zip.ZipException(2)", "Delete ImportDeclaration(3)", "Delete TextElement: General format of extra field data. <p>(4)", "Delete TextElement: Extra fields usually appear twice per file, once in the local file data and(5)", "Delete TextElement: once in the central directory. Usually they are the same, but they don't have(6)", "Delete TextElement: to be. (7)", "Delete QualifiedName: java.util.zip.ZipOutputStream(8)", "Delete TextElement:  java.util.zip.ZipOutputStream(9)", "Delete TagElement: @link(10)", "Delete TextElement: will only use the local file data in both places.</p>(11)", "Delete TagElement(12)", "Delete TextElement:  <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>(13)", "Delete TagElement: @author(14)", "Delete TextElement:  $Revision: 1.3 $(15)", "Delete TagElement: @version(16)", "Delete Javadoc(17)", "Delete Modifier: public(18)", "Delete SimpleName: ZipExtraField(19)", "Delete TextElement: The Header-ID.(20)", "Delete TagElement(21)", "Delete TextElement:  The HeaderId value(22)", "Delete TagElement: @return(23)", "Delete TextElement:  1.1(24)", "Delete TagElement: @since(25)", "Delete Javadoc(26)", "Delete SimpleName: ZipShort(27)", "Delete SimpleType: ZipShort(28)", "Delete SimpleName: getHeaderID(29)", "Delete MethodDeclaration(30)", "Delete TextElement: Length of the extra field in the local file data - without Header-ID or(31)", "Delete TextElement: length specifier.(32)", "Delete TagElement(33)", "Delete TextElement:  The LocalFileDataLength value(34)", "Delete TagElement: @return(35)", "Delete TextElement:  1.1(36)", "Delete TagElement: @since(37)", "Delete Javadoc(38)", "Delete SimpleName: ZipShort(39)", "Delete SimpleType: ZipShort(40)", "Delete SimpleName: getLocalFileDataLength(41)", "Delete MethodDeclaration(42)", "Delete TextElement: Length of the extra field in the central directory - without Header-ID or(43)", "Delete TextElement: length specifier.(44)", "Delete TagElement(45)", "Delete TextElement:  The CentralDirectoryLength value(46)", "Delete TagElement: @return(47)", "Delete TextElement:  1.1(48)", "Delete TagElement: @since(49)", "Delete Javadoc(50)", "Delete SimpleName: ZipShort(51)", "Delete SimpleType: ZipShort(52)", "Delete SimpleName: getCentralDirectoryLength(53)", "Delete MethodDeclaration(54)", "Delete TextElement: The actual data to put into local file data - without Header-ID or length(55)", "Delete TextElement: specifier.(56)", "Delete TagElement(57)", "Delete TextElement:  The LocalFileDataData value(58)", "Delete TagElement: @return(59)", "Delete TextElement:  1.1(60)", "Delete TagElement: @since(61)", "Delete Javadoc(62)", "Delete PrimitiveType: byte(63)", "Delete Dimension(64)", "Delete ArrayType: byte[](65)", "Delete SimpleName: getLocalFileDataData(66)", "Delete MethodDeclaration(67)", "Delete TextElement: The actual data to put central directory - without Header-ID or length(68)", "Delete TextElement: specifier.(69)", "Delete TagElement(70)", "Delete TextElement:  The CentralDirectoryData value(71)", "Delete TagElement: @return(72)", "Delete TextElement:  1.1(73)", "Delete TagElement: @since(74)", "Delete Javadoc(75)", "Delete PrimitiveType: byte(76)", "Delete Dimension(77)", "Delete ArrayType: byte[](78)", "Delete SimpleName: getCentralDirectoryData(79)", "Delete MethodDeclaration(80)", "Delete TextElement: Populate data from this array as if it was in local file data.(81)", "Delete TagElement(82)", "Delete SimpleName: buffer(83)", "Delete TextElement:  the buffer to read data from(84)", "Delete TagElement: @param(85)", "Delete SimpleName: offset(86)", "Delete TextElement:  offset into buffer to read data(87)", "Delete TagElement: @param(88)", "Delete SimpleName: length(89)", "Delete TextElement:  the length of data(90)", "Delete TagElement: @param(91)", "Delete SimpleName: ZipException(92)", "Delete TextElement:  on error(93)", "Delete TagElement: @exception(94)", "Delete TextElement:  1.1(95)", "Delete TagElement: @since(96)", "Delete Javadoc(97)", "Delete PrimitiveType: void(98)", "Delete SimpleName: parseFromLocalFileData(99)", "Delete PrimitiveType: byte(100)", "Delete Dimension(101)", "Delete ArrayType: byte[](102)", "Delete SimpleName: buffer(103)", "Delete SingleVariableDeclaration(104)", "Delete PrimitiveType: int(105)", "Delete SimpleName: offset(106)", "Delete SingleVariableDeclaration(107)", "Delete PrimitiveType: int(108)", "Delete SimpleName: length(109)", "Delete SingleVariableDeclaration(110)", "Delete SimpleName: ZipException(111)", "Delete SimpleType: ZipException(112)", "Delete MethodDeclaration(113)", "Delete TypeDeclaration: interface(114)"]}}, {"ZipLong_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.io.compress.zip", "DEL PackageDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL NumberLiteral: 3", "DEL InfixExpression: >>", "DEL ArrayAccess", "DEL SimpleName: m_value", "DEL PrimitiveType: byte", "DEL TextElement: Create instance from the four bytes starting at offset.", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL InfixExpression: +", "DEL ConstructorInvocation", "DEL TextElement: Create instance from bytes.", "DEL SimpleName: value", "DEL TextElement:  1.1", "DEL InfixExpression: ==", "DEL TagElement: @return", "DEL InfixExpression: &", "DEL Modifier: final", "DEL ExpressionStatement", "DEL ArrayAccess", "DEL SimpleName: buffer", "DEL BooleanLiteral: false", "DEL ParenthesizedExpression", "DEL Modifier: public", "DEL SimpleName: m_value", "DEL Assignment: +=", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL PrimitiveType: byte", "DEL NumberLiteral: 0xFF", "DEL Block", "DEL ArrayType: byte[]", "DEL ArrayAccess", "DEL TextElement:  1.1", "DEL MethodInvocation", "DEL SimpleName: ZipLong", "DEL Modifier: final", "DEL TextElement:  1.1", "DEL TagElement: @return", "DEL TextElement: Override to make two instances with same value equal.", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL SimpleName: buffer", "DEL TagElement", "DEL ParenthesizedExpression", "DEL ArrayAccess", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL PrimitiveType: byte", "DEL SimpleName: o", "DEL PrimitiveType: byte", "DEL CastExpression", "DEL SimpleName: m_value", "DEL TextElement: Utility class that represents a four byte integer with conversion rules for", "DEL SimpleName: m_value", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL NumberLiteral: 2", "DEL VariableDeclarationFragment", "DEL TextElement:  the buffer to read data from", "DEL Assignment: =", "DEL ParenthesizedExpression", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL Dimension", "DEL TagElement: @param", "DEL SimpleName: getBytes", "DEL SimpleName: m_value", "DEL NumberLiteral: 2", "DEL Modifier: public", "DEL PrimitiveType: int", "DEL SimpleType: ZipLong", "DEL SimpleName: buffer", "DEL ParenthesizedExpression", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL TextElement:  $Revision: 1.3 $", "DEL TagElement: @since", "DEL Assignment: +=", "DEL InstanceofExpression", "DEL Modifier: public", "DEL PrimitiveType: byte", "DEL InfixExpression: &", "DEL SimpleName: o", "DEL InfixExpression: &", "DEL NumberLiteral: 0xFF000000l", "DEL NumberLiteral: 0xFF00", "DEL NumberLiteral: 8", "DEL ParenthesizedExpression", "DEL PrimitiveType: long", "DEL TextElement:  1.1", "DEL SimpleName: m_value", "DEL NumberLiteral: 8", "DEL TextElement:  true if equyal, false otherwise", "DEL PrimitiveType: boolean", "DEL SimpleName: offset", "DEL MethodDeclaration", "DEL SimpleName: value", "DEL SimpleName: ZipLong", "DEL SimpleName: equals", "DEL ReturnStatement", "DEL SimpleName: o", "DEL Javadoc", "DEL TagElement: @since", "DEL TagElement: @param", "DEL TextElement:  1.1", "DEL SimpleName: getValue", "DEL InfixExpression: <<", "DEL PrimitiveType: int", "DEL Block", "DEL TextElement:  the object to compare against", "DEL TagElement", "DEL Javadoc", "DEL SimpleName: m_value", "DEL SimpleName: result", "DEL InfixExpression: >>", "DEL Assignment: =", "DEL Javadoc", "DEL SimpleName: ZipLong", "DEL TagElement: @version", "DEL Modifier: public", "DEL ReturnStatement", "DEL NumberLiteral: 4", "DEL Modifier: private", "DEL IfStatement", "DEL Dimension", "DEL Dimension", "DEL SimpleName: offset", "DEL PrimitiveType: long", "DEL Block", "DEL NumberLiteral: 3", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 16", "DEL ParenthesizedExpression", "DEL InfixExpression: +", "DEL SimpleName: m_value", "DEL CastExpression", "DEL ParenthesizedExpression", "DEL MethodDeclaration", "DEL ParenthesizedExpression", "DEL TextElement: Get value as Java int.", "DEL Dimension", "DEL TextElement: Get value as two bytes in big endian byte order.", "DEL TagElement", "DEL ArrayAccess", "DEL PrimitiveType: byte", "DEL PrimitiveType: byte", "DEL TextElement:  <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>", "DEL SimpleName: value", "DEL CastExpression", "DEL Modifier: final", "DEL CastExpression", "DEL ParenthesizedExpression", "DEL SimpleName: m_value", "DEL ParenthesizedExpression", "DEL TextElement:  1.1", "DEL Modifier: public", "DEL ArrayType: byte[]", "DEL ParenthesizedExpression", "DEL InfixExpression: &", "DEL NumberLiteral: 16", "DEL CastExpression", "DEL SimpleName: offset", "DEL TagElement", "DEL InfixExpression: &", "DEL InfixExpression: <<", "DEL InfixExpression: >>", "DEL Javadoc", "DEL SimpleType: Object", "DEL Dimension", "DEL ParenthesizedExpression", "DEL SimpleName: result", "DEL SingleVariableDeclaration", "DEL TagElement: @since", "DEL PrimitiveType: long", "DEL Block", "DEL ReturnStatement", "DEL Block", "DEL TagElement", "DEL Javadoc", "DEL SimpleName: result", "DEL Assignment: =", "DEL NumberLiteral: 0xFF0000", "DEL Assignment: +=", "DEL TagElement: @since", "DEL NumberLiteral: 0xFF0000", "DEL Modifier: public", "DEL SimpleName: result", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL MethodDeclaration", "DEL SimpleName: getValue", "DEL Modifier: public", "DEL CastExpression", "DEL TagElement: @since", "DEL NumberLiteral: 0xFF", "DEL Block", "DEL TagElement: @param", "DEL InfixExpression: &", "DEL SimpleName: buffer", "DEL SimpleName: Object", "DEL InfixExpression: ==", "DEL TextElement: the big endian byte order of ZIP files.", "DEL PrimitiveType: byte", "DEL SimpleName: result", "DEL SimpleName: ZipLong", "DEL TagElement", "DEL ArrayCreation", "DEL ExpressionStatement", "DEL ArrayAccess", "DEL SimpleName: buffer", "DEL TextElement:  The value as bytes", "DEL NumberLiteral: 24", "DEL SimpleName: m_value", "DEL ArrayAccess", "DEL MethodDeclaration", "DEL TagElement: @return", "DEL InfixExpression: +", "DEL SimpleName: o", "DEL NullLiteral", "DEL Modifier: final", "DEL ArrayType: byte[]", "DEL ExpressionStatement", "DEL SimpleName: ZipLong", "DEL SimpleName: buffer", "DEL PrimitiveType: byte", "DEL SimpleName: m_value", "DEL SingleVariableDeclaration", "DEL ParenthesizedExpression", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL Block", "DEL Modifier: public", "DEL TextElement:  1.1", "DEL TextElement: Create instance from a number.", "DEL TagElement", "DEL TagElement: @since", "DEL SimpleType: Cloneable", "DEL PrimitiveType: int", "DEL TagElement: @param", "DEL SimpleName: o", "DEL TextElement:  the value", "DEL SimpleName: Cloneable", "DEL ArrayType: byte[]", "DEL SimpleName: hashCode", "DEL ArrayType: byte[]", "DEL ArrayAccess", "DEL SimpleType: ZipLong", "DEL SimpleName: m_value", "DEL SimpleName: buffer", "DEL NumberLiteral: 0xFF00", "DEL MethodDeclaration", "DEL NumberLiteral: 1", "DEL TextElement:  The value", "DEL InfixExpression: <<", "DEL SimpleName: result", "DEL NumberLiteral: 0", "DEL SimpleName: buffer", "DEL PrefixExpression: !", "DEL Assignment: =", "DEL NumberLiteral: 0xFF000000l", "DEL InfixExpression: &", "DEL ParenthesizedExpression", "DEL TextElement: Override to make two instances with same value equal.", "DEL TagElement: @return", "DEL Block", "DEL TypeDeclaration: class", "DEL InfixExpression: ||", "DEL NumberLiteral: 24", "DEL TagElement: @author", "DEL TextElement:  buffer to read data from", "DEL ReturnStatement", "DEL Javadoc", "DEL ExpressionStatement", "DEL TextElement:  offset into buffer", "DEL NumberLiteral: 1", "DEL SimpleName: buffer", "DEL Javadoc", "DEL InfixExpression: &", "DEL MethodDeclaration", "DEL SimpleName: m_value", "DEL TagElement: @since", "DEL SimpleName: ZipLong", "DEL Javadoc", "DEL TextElement:  the hashcode", "DEL Modifier: final"]}]}}, {"ZipLong_diff": {"operations": ["Delete QualifiedName: org.apache.commons.io.compress.zip(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Utility class that represents a four byte integer with conversion rules for(2)", "Delete TextElement: the big endian byte order of ZIP files.(3)", "Delete TagElement(4)", "Delete TextElement:  <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>(5)", "Delete TagElement: @author(6)", "Delete TextElement:  $Revision: 1.3 $(7)", "Delete TagElement: @version(8)", "Delete Javadoc(9)", "Delete Modifier: public(10)", "Delete Modifier: final(11)", "Delete SimpleName: ZipLong(12)", "Delete SimpleName: Cloneable(13)", "Delete SimpleType: Cloneable(14)", "Delete Modifier: private(15)", "Delete PrimitiveType: long(16)", "Delete SimpleName: m_value(17)", "Delete VariableDeclarationFragment(18)", "Delete FieldDeclaration(19)", "Delete TextElement: Create instance from a number.(20)", "Delete TagElement(21)", "Delete SimpleName: value(22)", "Delete TextElement:  the value(23)", "Delete TagElement: @param(24)", "Delete TextElement:  1.1(25)", "Delete TagElement: @since(26)", "Delete Javadoc(27)", "Delete Modifier: public(28)", "Delete SimpleName: ZipLong(29)", "Delete Modifier: final(30)", "Delete PrimitiveType: long(31)", "Delete SimpleName: value(32)", "Delete SingleVariableDeclaration(33)", "Delete SimpleName: m_value(34)", "Delete SimpleName: value(35)", "Delete Assignment: =(36)", "Delete ExpressionStatement(37)", "Delete Block(38)", "Delete MethodDeclaration(39)", "Delete TextElement: Create instance from bytes.(40)", "Delete TagElement(41)", "Delete SimpleName: buffer(42)", "Delete TextElement:  the buffer to read data from(43)", "Delete TagElement: @param(44)", "Delete TextElement:  1.1(45)", "Delete TagElement: @since(46)", "Delete Javadoc(47)", "Delete Modifier: public(48)", "Delete SimpleName: ZipLong(49)", "Delete Modifier: final(50)", "Delete PrimitiveType: byte(51)", "Delete Dimension(52)", "Delete ArrayType: byte[](53)", "Delete SimpleName: buffer(54)", "Delete SingleVariableDeclaration(55)", "Delete SimpleName: buffer(56)", "Delete NumberLiteral: 0(57)", "Delete ConstructorInvocation(58)", "Delete Block(59)", "Delete MethodDeclaration(60)", "Delete TextElement: Create instance from the four bytes starting at offset.(61)", "Delete TagElement(62)", "Delete SimpleName: buffer(63)", "Delete TextElement:  buffer to read data from(64)", "Delete TagElement: @param(65)", "Delete SimpleName: offset(66)", "Delete TextElement:  offset into buffer(67)", "Delete TagElement: @param(68)", "Delete TextElement:  1.1(69)", "Delete TagElement: @since(70)", "Delete Javadoc(71)", "Delete Modifier: public(72)", "Delete SimpleName: ZipLong(73)", "Delete Modifier: final(74)", "Delete PrimitiveType: byte(75)", "Delete Dimension(76)", "Delete ArrayType: byte[](77)", "Delete SimpleName: buffer(78)", "Delete SingleVariableDeclaration(79)", "Delete Modifier: final(80)", "Delete PrimitiveType: int(81)", "Delete SimpleName: offset(82)", "Delete SingleVariableDeclaration(83)", "Delete SimpleName: m_value(84)", "Delete SimpleName: buffer(85)", "Delete SimpleName: offset(86)", "Delete NumberLiteral: 3(87)", "Delete InfixExpression: +(88)", "Delete ArrayAccess(89)", "Delete NumberLiteral: 24(90)", "Delete InfixExpression: <<(91)", "Delete ParenthesizedExpression(92)", "Delete NumberLiteral: 0xFF000000l(93)", "Delete InfixExpression: &(94)", "Delete Assignment: =(95)", "Delete ExpressionStatement(96)", "Delete SimpleName: m_value(97)", "Delete SimpleName: buffer(98)", "Delete SimpleName: offset(99)", "Delete NumberLiteral: 2(100)", "Delete InfixExpression: +(101)", "Delete ArrayAccess(102)", "Delete NumberLiteral: 16(103)", "Delete InfixExpression: <<(104)", "Delete ParenthesizedExpression(105)", "Delete NumberLiteral: 0xFF0000(106)", "Delete InfixExpression: &(107)", "Delete Assignment: +=(108)", "Delete ExpressionStatement(109)", "Delete SimpleName: m_value(110)", "Delete SimpleName: buffer(111)", "Delete SimpleName: offset(112)", "Delete NumberLiteral: 1(113)", "Delete InfixExpression: +(114)", "Delete ArrayAccess(115)", "Delete NumberLiteral: 8(116)", "Delete InfixExpression: <<(117)", "Delete ParenthesizedExpression(118)", "Delete NumberLiteral: 0xFF00(119)", "Delete InfixExpression: &(120)", "Delete Assignment: +=(121)", "Delete ExpressionStatement(122)", "Delete SimpleName: m_value(123)", "Delete SimpleName: buffer(124)", "Delete SimpleName: offset(125)", "Delete ArrayAccess(126)", "Delete NumberLiteral: 0xFF(127)", "Delete InfixExpression: &(128)", "Delete ParenthesizedExpression(129)", "Delete Assignment: +=(130)", "Delete ExpressionStatement(131)", "Delete Block(132)", "Delete MethodDeclaration(133)", "Delete TextElement: Get value as two bytes in big endian byte order.(134)", "Delete TagElement(135)", "Delete TextElement:  The value as bytes(136)", "Delete TagElement: @return(137)", "Delete TextElement:  1.1(138)", "Delete TagElement: @since(139)", "Delete Javadoc(140)", "Delete Modifier: public(141)", "Delete PrimitiveType: byte(142)", "Delete Dimension(143)", "Delete ArrayType: byte[](144)", "Delete SimpleName: getBytes(145)", "Delete PrimitiveType: byte(146)", "Delete Dimension(147)", "Delete ArrayType: byte[](148)", "Delete SimpleName: result(149)", "Delete PrimitiveType: byte(150)", "Delete Dimension(151)", "Delete ArrayType: byte[](152)", "Delete NumberLiteral: 4(153)", "Delete ArrayCreation(154)", "Delete VariableDeclarationFragment(155)", "Delete VariableDeclarationStatement(156)", "Delete SimpleName: result(157)", "Delete NumberLiteral: 0(158)", "Delete ArrayAccess(159)", "Delete PrimitiveType: byte(160)", "Delete SimpleName: m_value(161)", "Delete NumberLiteral: 0xFF(162)", "Delete InfixExpression: &(163)", "Delete ParenthesizedExpression(164)", "Delete ParenthesizedExpression(165)", "Delete CastExpression(166)", "Delete Assignment: =(167)", "Delete ExpressionStatement(168)", "Delete SimpleName: result(169)", "Delete NumberLiteral: 1(170)", "Delete ArrayAccess(171)", "Delete PrimitiveType: byte(172)", "Delete SimpleName: m_value(173)", "Delete NumberLiteral: 0xFF00(174)", "Delete InfixExpression: &(175)", "Delete ParenthesizedExpression(176)", "Delete NumberLiteral: 8(177)", "Delete InfixExpression: >>(178)", "Delete ParenthesizedExpression(179)", "Delete CastExpression(180)", "Delete Assignment: =(181)", "Delete ExpressionStatement(182)", "Delete SimpleName: result(183)", "Delete NumberLiteral: 2(184)", "Delete ArrayAccess(185)", "Delete PrimitiveType: byte(186)", "Delete SimpleName: m_value(187)", "Delete NumberLiteral: 0xFF0000(188)", "Delete InfixExpression: &(189)", "Delete ParenthesizedExpression(190)", "Delete NumberLiteral: 16(191)", "Delete InfixExpression: >>(192)", "Delete ParenthesizedExpression(193)", "Delete CastExpression(194)", "Delete Assignment: =(195)", "Delete ExpressionStatement(196)", "Delete SimpleName: result(197)", "Delete NumberLiteral: 3(198)", "Delete ArrayAccess(199)", "Delete PrimitiveType: byte(200)", "Delete SimpleName: m_value(201)", "Delete NumberLiteral: 0xFF000000l(202)", "Delete InfixExpression: &(203)", "Delete ParenthesizedExpression(204)", "Delete NumberLiteral: 24(205)", "Delete InfixExpression: >>(206)", "Delete ParenthesizedExpression(207)", "Delete CastExpression(208)", "Delete Assignment: =(209)", "Delete ExpressionStatement(210)", "Delete SimpleName: result(211)", "Delete ReturnStatement(212)", "Delete Block(213)", "Delete MethodDeclaration(214)", "Delete TextElement: Get value as Java int.(215)", "Delete TagElement(216)", "Delete TextElement:  The value(217)", "Delete TagElement: @return(218)", "Delete TextElement:  1.1(219)", "Delete TagElement: @since(220)", "Delete Javadoc(221)", "Delete Modifier: public(222)", "Delete PrimitiveType: long(223)", "Delete SimpleName: getValue(224)", "Delete SimpleName: m_value(225)", "Delete ReturnStatement(226)", "Delete Block(227)", "Delete MethodDeclaration(228)", "Delete TextElement: Override to make two instances with same value equal.(229)", "Delete TagElement(230)", "Delete SimpleName: o(231)", "Delete TextElement:  the object to compare against(232)", "Delete TagElement: @param(233)", "Delete TextElement:  true if equyal, false otherwise(234)", "Delete TagElement: @return(235)", "Delete TextElement:  1.1(236)", "Delete TagElement: @since(237)", "Delete Javadoc(238)", "Delete Modifier: public(239)", "Delete PrimitiveType: boolean(240)", "Delete SimpleName: equals(241)", "Delete Modifier: final(242)", "Delete SimpleName: Object(243)", "Delete SimpleType: Object(244)", "Delete SimpleName: o(245)", "Delete SingleVariableDeclaration(246)", "Delete SimpleName: o(247)", "Delete NullLiteral(248)", "Delete InfixExpression: ==(249)", "Delete SimpleName: o(250)", "Delete SimpleName: ZipLong(251)", "Delete SimpleType: ZipLong(252)", "Delete InstanceofExpression(253)", "Delete ParenthesizedExpression(254)", "Delete PrefixExpression: !(255)", "Delete InfixExpression: ||(256)", "Delete BooleanLiteral: false(257)", "Delete ReturnStatement(258)", "Delete Block(259)", "Delete IfStatement(260)", "Delete SimpleName: m_value(261)", "Delete SimpleName: ZipLong(262)", "Delete SimpleType: ZipLong(263)", "Delete SimpleName: o(264)", "Delete CastExpression(265)", "Delete ParenthesizedExpression(266)", "Delete SimpleName: getValue(267)", "Delete MethodInvocation(268)", "Delete InfixExpression: ==(269)", "Delete ReturnStatement(270)", "Delete Block(271)", "Delete MethodDeclaration(272)", "Delete TextElement: Override to make two instances with same value equal.(273)", "Delete TagElement(274)", "Delete TextElement:  the hashcode(275)", "Delete TagElement: @return(276)", "Delete TextElement:  1.1(277)", "Delete TagElement: @since(278)", "Delete Javadoc(279)", "Delete Modifier: public(280)", "Delete PrimitiveType: int(281)", "Delete SimpleName: hashCode(282)", "Delete PrimitiveType: int(283)", "Delete SimpleName: m_value(284)", "Delete CastExpression(285)", "Delete ReturnStatement(286)", "Delete Block(287)", "Delete MethodDeclaration(288)", "Delete TypeDeclaration: class(289)"]}}, {"ZipOutputStream_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.io.compress.zip"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.IOException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.OutputStream", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.UnsupportedEncodingException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.ArrayList"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Date"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Calendar"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Hashtable"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.zip.CRC32", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.zip.Deflater"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.zip.DeflaterOutputStream", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.zip.ZipException", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL ArrayInitializer", "DEL SimpleName: m_entry", "DEL SimpleType: ZipLong", "DEL SimpleName: ZipShort", "DEL TextElement:  1.1", "DEL ExpressionStatement", "DEL SimpleName: ZipLong", "DEL MethodDeclaration", "DEL SimpleType: Date", "DEL SimpleName: getBytes", "DEL MethodDeclaration", "DEL SimpleName: out", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: out", "DEL ParenthesizedExpression", "DEL ArrayType: byte[]", "DEL InfixExpression: ==", "DEL TextElement:  the offset to write to", "DEL SimpleType: ZipShort", "DEL SimpleName: m_entries", "DEL SimpleType: IOException", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL InfixExpression: <", "DEL MethodDeclaration", "DEL SimpleType: ZipLong", "DEL SimpleName: i", "DEL SimpleName: m_entry", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: comment", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: level", "DEL PrefixExpression: -", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleType: CRC32", "DEL TextElement: The encoding to use for filenames and the file comment. <p>", "DEL MethodInvocation", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleName: String", "DEL Javadoc", "DEL TagElement: @since", "DEL TagElement: @exception", "DEL ExpressionStatement", "DEL SimpleName: getCrc", "DEL SimpleName: m_comment", "DEL InfixExpression: +", "DEL IfStatement", "DEL SimpleName: getBytes", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL SimpleName: output", "DEL ClassInstanceCreation", "DEL SimpleName: uee", "DEL IfStatement", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL SimpleName: write", "DEL SimpleName: put", "DEL ClassInstanceCreation", "DEL PrimitiveType: byte", "DEL SimpleName: value", "DEL Dimension", "DEL ParenthesizedExpression", "DEL SimpleName: setTime", "DEL TextElement:  Description of Parameter", "DEL SimpleName: ZipEntry", "DEL MethodInvocation", "DEL SimpleName: getBytes", "DEL SimpleName: Date", "DEL SimpleName: time", "DEL InfixExpression: >>", "DEL FieldDeclaration", "DEL SimpleName: m_entries", "DEL ParenthesizedExpression", "DEL NumberLiteral: 0", "DEL SimpleName: DEFLATED", "DEL TextElement:  1.1", "DEL SimpleName: m_written", "DEL ExpressionStatement", "DEL PrefixExpression: -", "DEL SimpleName: write", "DEL MethodInvocation", "DEL Block", "DEL Assignment: +=", "DEL TextElement: Length of central directory.", "DEL Dimension", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL Modifier: static", "DEL IfStatement", "DEL TagElement: @since", "DEL ArrayType: byte[]", "DEL SimpleName: ZipLong", "DEL MethodInvocation", "DEL SimpleName: getBytes", "DEL SimpleType: ZipLong", "DEL QualifiedName: Calendar.SECOND", "DEL SimpleName: ZipLong", "DEL SimpleName: getBytes", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL FieldDeclaration", "DEL SimpleName: getBytes", "DEL MethodInvocation", "DEL SimpleName: toDosTime", "DEL TagElement: @param", "DEL SimpleName: setLevel", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL ClassInstanceCreation", "DEL InfixExpression: ==", "DEL SimpleName: ZipEntry", "DEL TagElement: @exception", "DEL TextElement:  1.1", "DEL SimpleName: ZipLong", "DEL Modifier: final", "DEL SimpleName: write", "DEL SimpleName: CRC32", "DEL SimpleName: getMethod", "DEL Javadoc", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: out", "DEL TextElement: Helper, a 0 as ZipShort.", "DEL MethodInvocation", "DEL TagElement: @since", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: IOException", "DEL SimpleName: setComprSize", "DEL Assignment: +=", "DEL TagElement: @param", "DEL SimpleName: m_cdOffset", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL SimpleName: time", "DEL PrimitiveType: int", "DEL TextElement: Default is DEFLATED.</p>", "DEL Block", "DEL TypeDeclaration: class", "DEL SimpleName: getBytes", "DEL ReturnStatement", "DEL SimpleName: m_entry", "DEL SimpleName: getMethod", "DEL SimpleName: entry", "DEL VariableDeclarationFragment", "DEL TextElement:  1.1", "DEL Modifier: final", "DEL SimpleName: comm", "DEL ParenthesizedExpression", "DEL Dimension", "DEL TextElement: this package, especially internal/external file attributes and extra fields", "DEL ExpressionStatement", "DEL Javadoc", "DEL TagElement: @param", "DEL SimpleName: m_written", "DEL Modifier: public", "DEL TagElement", "DEL TagElement", "DEL TagElement: @since", "DEL NumberLiteral: 0", "DEL NumberLiteral: 20", "DEL SimpleName: getBytes", "DEL MethodInvocation", "DEL TagElement: @throws", "DEL Block", "DEL Modifier: final", "DEL SimpleName: size", "DEL QualifiedName: Calendar.MONTH", "DEL SimpleName: ZipShort", "DEL SimpleName: ZERO", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: name", "DEL SimpleName: getMethod", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TextElement: Compression method for deflated entries.", "DEL TagElement: @link", "DEL TextElement: href=\"http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html\">", "DEL IfStatement", "DEL SimpleName: m_comment", "DEL SimpleName: DD_SIG", "DEL TagElement", "DEL SimpleName: getBytes", "DEL SimpleName: write", "DEL ExpressionStatement", "DEL PrimitiveType: byte", "DEL SimpleType: ZipShort", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL TextElement:  $Revision: 1.3 $", "DEL Block", "DEL SimpleName: m_written", "DEL SimpleName: toDosTime", "DEL MethodInvocation", "DEL SimpleName: DEFLATED", "DEL Assignment: +=", "DEL InfixExpression: &", "DEL NumberLiteral: 1980", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL IfStatement", "DEL Assignment: +=", "DEL MethodInvocation", "DEL SimpleName: getBytes", "DEL MethodInvocation", "DEL SimpleName: getBytes", "DEL SimpleName: getCentralDirectoryExtra", "DEL TagElement", "DEL Modifier: final", "DEL SimpleName: Date", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleType: ZipLong", "DEL Javadoc", "DEL ArrayAccess", "DEL SimpleName: size", "DEL NumberLiteral: 4", "DEL Javadoc", "DEL SimpleName: reset", "DEL VariableDeclarationStatement", "DEL SimpleName: getName", "DEL Block", "DEL SimpleName: write", "DEL SimpleName: cal", "DEL ExpressionStatement", "DEL TagElement: @since", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: write", "DEL SimpleName: get", "DEL SimpleName: m_entry", "DEL QualifiedName: Calendar.MINUTE", "DEL VariableDeclarationFragment", "DEL SimpleName: entry", "DEL TextElement:  1.3", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ParenthesizedExpression", "DEL SimpleType: ZipShort", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: write", "DEL ReturnStatement", "DEL SimpleName: getSize", "DEL VariableDeclarationStatement", "DEL InfixExpression: ==", "DEL Modifier: final", "DEL TextElement: Compression method for deflated entries.", "DEL VariableDeclarationFragment", "DEL SimpleName: getSize", "DEL TagElement: @since", "DEL SimpleType: ZipShort", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL TextElement:  1.1", "DEL PrimitiveType: void", "DEL SimpleType: ZipLong", "DEL Modifier: public", "DEL ExpressionStatement", "DEL TagElement: @since", "DEL PrimitiveType: int", "DEL TextElement:  1.1", "DEL SimpleName: out", "DEL ClassInstanceCreation", "DEL SimpleName: DEFLATED", "DEL SimpleName: m_cdLength", "DEL SimpleName: m_written", "DEL SimpleName: DEFLATED", "DEL NumberLiteral: 4", "DEL SimpleName: m_written", "DEL TextElement: Convert a Date object to a DOS date/time field. <p>", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: out", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL SimpleName: write", "DEL SimpleName: EOCD_SIG", "DEL SimpleType: ZipLong", "DEL SimpleName: getBytes", "DEL TextElement:  The new Method value", "DEL Javadoc", "DEL Modifier: private", "DEL Modifier: private", "DEL ParenthesizedExpression", "DEL SimpleType: ZipLong", "DEL PrimitiveType: void", "DEL TryStatement", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: i", "DEL VariableDeclarationStatement", "DEL SimpleName: write", "DEL SimpleName: m_comment", "DEL PrimitiveType: byte", "DEL SimpleType: ZipLong", "DEL TextElement:  1.1", "DEL ParenthesizedExpression", "DEL SimpleName: IOException", "DEL VariableDeclarationFragment", "DEL SimpleName: comment", "DEL PrimitiveType: void", "DEL Modifier: public", "DEL TextElement: data descriptor signature", "DEL NumberLiteral: 0", "DEL TextElement: The file comment.", "DEL MethodInvocation", "DEL SimpleName: ZipLong", "DEL SimpleName: comm", "DEL SimpleName: get", "DEL Modifier: static", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: out", "DEL ExpressionStatement", "DEL SimpleName: name", "DEL Assignment: +=", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: ZipLong", "DEL SimpleName: num", "DEL SimpleName: out", "DEL SimpleName: STORED", "DEL SimpleName: ZipLong", "DEL CatchClause", "DEL MethodInvocation", "DEL SimpleName: uee", "DEL SimpleName: m_level", "DEL PrimitiveType: byte", "DEL NumberLiteral: 4", "DEL SimpleName: getBytes", "DEL QualifiedName: Calendar.HOUR_OF_DAY", "DEL MethodDeclaration", "DEL TextElement:  the length of data to write", "DEL TextElement: For a list of possible values see <a", "DEL SimpleName: m_written", "DEL SimpleName: extra", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: IOException", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: m_entry", "DEL SimpleName: getMethod", "DEL Block", "DEL ArrayType: byte[]", "DEL ParenthesizedExpression", "DEL TagElement: @since", "DEL SimpleName: m_written", "DEL CastExpression", "DEL TagElement", "DEL MethodInvocation", "DEL TagElement: @throws", "DEL SimpleName: ZERO", "DEL QualifiedName: comment.length", "DEL Dimension", "DEL SimpleName: DEFLATED", "DEL MethodInvocation", "DEL SimpleName: setComment", "DEL VariableDeclarationStatement", "DEL TextElement:  1.1", "DEL Javadoc", "DEL NullLiteral", "DEL SimpleName: UnsupportedEncodingException", "DEL Modifier: final", "DEL TextElement:  1.1", "DEL SimpleName: out", "DEL SimpleName: write", "DEL SimpleType: ZipLong", "DEL IfStatement", "DEL NumberLiteral: 24", "DEL MethodInvocation", "DEL SimpleName: ZERO", "DEL Modifier: private", "DEL Javadoc", "DEL TagElement: @since", "DEL NumberLiteral: 2", "DEL NumberLiteral: 0", "DEL SimpleName: realCrc", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: DEFLATED", "DEL SimpleName: m_dataStart", "DEL SimpleName: m_crc", "DEL PrimitiveType: int", "DEL SimpleName: write", "DEL Block", "DEL SimpleName: currentTimeMillis", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: String", "DEL Modifier: final", "DEL NumberLiteral: 1", "DEL SimpleName: length", "DEL SimpleName: result", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: def", "DEL Modifier: private", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: out", "DEL CastExpression", "DEL SimpleName: ZipLong", "DEL Assignment: =", "DEL SimpleType: ZipLong", "DEL TagElement", "DEL Block", "DEL ParenthesizedExpression", "DEL SimpleType: ZipEntry", "DEL Block", "DEL SimpleName: getBytes", "DEL ArrayType: byte[]", "DEL Modifier: public", "DEL SimpleName: m_written", "DEL TagElement: @since", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: out", "DEL ReturnStatement", "DEL SimpleName: cal", "DEL MethodInvocation", "DEL Javadoc", "DEL TextElement:  null if using the platform's default character encoding.", "DEL TextElement: central file header signature", "DEL SimpleName: entry", "DEL VariableDeclarationFragment", "DEL SimpleName: entry", "DEL SimpleName: getBytes", "DEL SimpleName: time", "DEL VariableDeclarationFragment", "DEL SimpleType: ZipLong", "DEL SimpleName: write", "DEL SimpleName: m_entry", "DEL InfixExpression: ==", "DEL NumberLiteral: 16", "DEL ExpressionStatement", "DEL SimpleName: entry", "DEL TextElement: The encoding to use for filenames and the file comment.", "DEL Modifier: static", "DEL SimpleName: closeEntry", "DEL MethodInvocation", "DEL TextElement: Start of central directory.", "DEL MethodInvocation", "DEL SimpleName: m_crc", "DEL InfixExpression: ==", "DEL Assignment: =", "DEL Modifier: static", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Block", "DEL Javadoc", "DEL ParenthesizedExpression", "DEL SimpleName: out", "DEL MethodInvocation", "DEL SimpleName: m_method", "DEL Modifier: protected", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: name", "DEL ArrayType: byte[]", "DEL InfixExpression: +", "DEL SimpleName: entry", "DEL SimpleType: Date", "DEL SimpleName: year", "DEL Assignment: =", "DEL ArrayType: byte[]", "DEL SimpleName: m_entry", "DEL StringLiteral: \" instead of \"", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL QualifiedName: extra.length", "DEL ParenthesizedExpression", "DEL Assignment: +=", "DEL ArrayAccess", "DEL Modifier: private", "DEL SimpleName: offset", "DEL SimpleName: m_written", "DEL ExpressionStatement", "DEL NumberLiteral: 2", "DEL SimpleType: ZipLong", "DEL TextElement: href=\"http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html\">", "DEL TagElement", "DEL SimpleType: ZipLong", "DEL NumberLiteral: 0xFF00", "DEL SimpleName: getExternalAttributes", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL SimpleName: cal", "DEL SimpleType: ZipLong", "DEL SimpleName: m_dataStart", "DEL SimpleName: out", "DEL SimpleName: get", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: out", "DEL MethodInvocation", "DEL SimpleName: ZipLong", "DEL SimpleName: closeEntry", "DEL SimpleName: m_written", "DEL Assignment: +=", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL NumberLiteral: 2", "DEL SimpleName: update", "DEL TextElement: Reimplementation of ", "DEL Block", "DEL SimpleType: ZipLong", "DEL MethodInvocation", "DEL SimpleName: ZipException", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: m_level", "DEL SimpleName: m_written", "DEL ParenthesizedExpression", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: comment", "DEL SimpleName: getBytes", "DEL NumberLiteral: 4", "DEL SimpleName: DeflaterOutputStream", "DEL PrimitiveType: void", "DEL SimpleType: IOException", "DEL TagElement", "DEL TagElement: @since", "DEL ArrayType: byte[]", "DEL TagElement: @param", "DEL ParenthesizedExpression", "DEL TextElement: Default compression method for next entry.", "DEL SimpleName: ZipShort", "DEL SimpleName: getBytes", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getBytes", "DEL SimpleType: ZipException", "DEL SimpleName: getSize", "DEL TextElement: Stolen from InfoZip's <code>fileio.c</code></p>", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL TextElement:  1.1", "DEL TagElement: @since", "DEL ExpressionStatement", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL TextElement:  if an IO error causes operation to fail", "DEL SimpleName: getName", "DEL MethodInvocation", "DEL PrimitiveType: long", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: writeCentralFileHeader", "DEL SimpleName: m_entry", "DEL IfStatement", "DEL TextElement: Sets the compression level for subsequent entries. <p>", "DEL SimpleType: ZipShort", "DEL SimpleName: ZipEntry", "DEL Javadoc", "DEL ExpressionStatement", "DEL Assignment: +=", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: getBytes", "DEL SimpleName: IOException", "DEL SimpleName: CRC32", "DEL Javadoc", "DEL TagElement: @since", "DEL SimpleName: getBytes", "DEL Modifier: private", "DEL Modifier: static", "DEL SimpleName: ZipLong", "DEL ParenthesizedExpression", "DEL SimpleName: buffer", "DEL SimpleName: getValue", "DEL ThrowStatement", "DEL ClassInstanceCreation", "DEL ParenthesizedExpression", "DEL SimpleName: write", "DEL ClassInstanceCreation", "DEL SimpleName: ZipLong", "DEL SimpleName: LZERO", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL SimpleName: encoding", "DEL SimpleName: name", "DEL InfixExpression: -", "DEL Dimension", "DEL TagElement: @param", "DEL TextElement: Sets the default compression method for subsequent entries. <p>", "DEL SimpleName: ZipShort", "DEL SimpleName: m_written", "DEL SimpleName: m_level", "DEL SimpleName: def", "DEL SimpleName: writeCentralDirectoryEnd", "DEL Dimension", "DEL IfStatement", "DEL SimpleName: out", "DEL TagElement: @param", "DEL TextElement:  1.3", "DEL SuperMethodInvocation", "DEL Modifier: protected", "DEL NumberLiteral: 12", "DEL MethodInvocation", "DEL PrimitiveType: byte", "DEL SimpleName: m_cdLength", "DEL SimpleName: month", "DEL ExpressionStatement", "DEL SimpleName: cal", "DEL SimpleType: ZipShort", "DEL SimpleType: ZipShort", "DEL SimpleName: entry", "DEL SimpleType: IOException", "DEL TextElement: http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html", "DEL SimpleName: add", "DEL SimpleName: write", "DEL ExpressionStatement", "DEL ArrayCreation", "DEL Modifier: static", "DEL TextElement:  the entry", "DEL Modifier: final", "DEL Javadoc", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL Modifier: private", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL Modifier: private", "DEL TextElement:  1.3", "DEL SimpleName: out", "DEL TextElement: Helper, a 0 as ZipLong.", "DEL TextElement: Writes the &quot;End of central dir record&quot;", "DEL TextElement:  if an IO failure causes operation to fail", "DEL ArrayType: byte[]", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SimpleName: ZipLong", "DEL ExpressionStatement", "DEL SimpleName: ZipOutputStream", "DEL SimpleName: getBytes", "DEL TextElement: Compression level for next entry.", "DEL MethodInvocation", "DEL Assignment: +=", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL Assignment: +=", "DEL Assignment: +=", "DEL MethodInvocation", "DEL SimpleName: m_entry", "DEL Modifier: static", "DEL Javadoc", "DEL ExpressionStatement", "DEL Assignment: +=", "DEL SimpleName: m_entry", "DEL SimpleName: LFH_SIG", "DEL TagElement: @param", "DEL SimpleName: m_offsets", "DEL SimpleName: entry", "DEL ExpressionStatement", "DEL SimpleType: ZipEntry", "DEL SimpleName: get", "DEL SimpleName: buffer", "DEL ParenthesizedExpression", "DEL SimpleName: writeDataDescriptor", "DEL SimpleName: m_entry", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL TextElement: local file header signature", "DEL SimpleType: ZipLong", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: ZipEntry", "DEL TagElement", "DEL SimpleName: extra", "DEL SimpleName: data", "DEL SimpleName: m_entries", "DEL MethodInvocation", "DEL PrefixExpression: -", "DEL SimpleName: m_written", "DEL TextElement:  1.1", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: m_written", "DEL ParenthesizedExpression", "DEL Block", "DEL SimpleName: clear", "DEL IfStatement", "DEL SimpleName: out", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL QualifiedName: name.length", "DEL QualifiedName: comment.length", "DEL MethodInvocation", "DEL NumberLiteral: 4", "DEL VariableDeclarationStatement", "DEL ArrayType: byte[]", "DEL SimpleName: getBytes", "DEL SimpleName: m_written", "DEL Assignment: =", "DEL PrimitiveType: byte", "DEL TagElement: @param", "DEL SimpleName: out", "DEL InfixExpression: ==", "DEL SimpleName: m_written", "DEL SimpleName: getInstance", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: entry", "DEL NumberLiteral: 1980", "DEL SimpleName: IOException", "DEL SimpleName: entry", "DEL SimpleName: m_encoding", "DEL TagElement", "DEL SimpleName: STORED", "DEL MethodDeclaration", "DEL TagElement: @since", "DEL SimpleName: Hashtable", "DEL PrimitiveType: void", "DEL StringLiteral: \": \"", "DEL ExpressionStatement", "DEL SimpleName: write", "DEL SimpleName: CFH_SIG", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL SimpleName: getCompressedSize", "DEL FieldDeclaration", "DEL Modifier: final", "DEL SimpleName: m_entry", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TextElement:  1.1", "DEL MethodInvocation", "DEL SimpleName: getBytes", "DEL TagElement: @since", "DEL MethodInvocation", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleName: m_written", "DEL SimpleName: IOException", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: getCrc", "DEL Block", "DEL TextElement: Current entry.", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: getSize", "DEL MethodInvocation", "DEL SimpleName: entry", "DEL TagElement", "DEL TagElement", "DEL TextElement: The encoding to use for filenames and the file comment. <p>", "DEL SimpleName: ZipLong", "DEL SimpleName: m_entry", "DEL TagElement: @since", "DEL NumberLiteral: 4", "DEL TagElement: @since", "DEL ExpressionStatement", "DEL Assignment: +=", "DEL Dimension", "DEL TextElement:  the buffer to write to", "DEL SimpleName: value", "DEL ArrayAccess", "DEL SimpleName: ZipEntry", "DEL SimpleName: ZipLong", "DEL ClassInstanceCreation", "DEL SimpleName: method", "DEL TagElement", "DEL Dimension", "DEL SimpleType: ZipLong", "DEL SimpleName: entry", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: write", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: out", "DEL QualifiedName: extra.length", "DEL SimpleName: IOException", "DEL SimpleType: ZipLong", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL ArrayInitializer", "DEL SimpleName: out", "DEL SimpleName: putNextEntry", "DEL SimpleName: out", "DEL TextElement:  if an IO failure causes operation to fail", "DEL MethodInvocation", "DEL SimpleName: LFH_SIG", "DEL NumberLiteral: 12", "DEL SimpleName: out", "DEL TextElement:  1.1", "DEL SimpleName: length", "DEL SimpleName: getBytes", "DEL SimpleName: def", "DEL MethodInvocation", "DEL PrimitiveType: byte", "DEL SimpleName: EOCD_SIG", "DEL TagElement: @exception", "DEL TextElement: them yourself. Unfortunately this is not possible for the STORED method, here", "DEL NumberLiteral: 3", "DEL MethodInvocation", "DEL SimpleName: length", "DEL WhileStatement", "DEL ExpressionStatement", "DEL SimpleName: out", "DEL VariableDeclarationFragment", "DEL SimpleName: buffer", "DEL SimpleName: finish", "DEL NumberLiteral: 5", "DEL PrimitiveType: int", "DEL SimpleName: method", "DEL NumberLiteral: 0", "DEL SimpleName: entry", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL SimpleName: String", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: Calendar", "DEL MethodInvocation", "DEL TextElement:  if fail to retrieve bytes for specified string", "DEL StringLiteral: \"\"", "DEL NumberLiteral: 0xFF0000", "DEL TextElement: stream.", "DEL SimpleName: m_method", "DEL SimpleName: m_cdOffset", "DEL MethodDeclaration", "DEL SimpleName: getMethod", "DEL VariableDeclarationFragment", "DEL TagElement: @throws", "DEL SimpleName: write", "DEL SimpleName: out", "DEL MethodInvocation", "DEL NumberLiteral: 0x00002100L", "DEL NumberLiteral: 4", "DEL SimpleType: ZipException", "DEL TextElement: For a list of possible values see <a", "DEL SingleVariableDeclaration", "DEL SimpleType: ZipLong", "DEL SimpleName: IOException", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleType: Deflater", "DEL SimpleName: length", "DEL TagElement: @throws", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: write", "DEL SimpleType: ZipLong", "DEL MethodInvocation", "DEL SimpleType: ZipLong", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: Calendar", "DEL SimpleName: IOException", "DEL QualifiedName: Deflater.DEFAULT_COMPRESSION", "DEL SimpleName: getBytes", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: getBytes", "DEL MethodDeclaration", "DEL Block", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL ReturnStatement", "DEL TagElement: @since", "DEL SimpleName: Hashtable", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleName: getMethod", "DEL Block", "DEL SimpleName: out", "DEL SimpleName: out", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: m_crc", "DEL TextElement: http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html", "DEL ThrowStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: write", "DEL SimpleName: setCrc", "DEL ParenthesizedExpression", "DEL NumberLiteral: 25", "DEL NumberLiteral: 2", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL IfStatement", "DEL TagElement: @param", "DEL SimpleName: m_entry", "DEL SimpleName: getBytes", "DEL InfixExpression: <<", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: write", "DEL SimpleName: def", "DEL TagElement: @author", "DEL MemberRef", "DEL NumberLiteral: 2", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: write", "DEL SimpleName: getMethod", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: offset", "DEL ParenthesizedExpression", "DEL ForStatement", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: write", "DEL Modifier: private", "DEL SimpleName: year", "DEL SimpleName: LZERO", "DEL SimpleName: out", "DEL SimpleName: ZipLong", "DEL ClassInstanceCreation", "DEL QualifiedName: ZipEntry.STORED", "DEL SimpleName: m_written", "DEL VariableDeclarationExpression", "DEL InfixExpression: >>", "DEL SimpleName: entry", "DEL SimpleName: ZipOutputStream", "DEL Assignment: +=", "DEL SimpleType: ZipLong", "DEL SimpleName: output", "DEL TextElement:  Description of the Returned Value", "DEL TagElement: @since", "DEL NumberLiteral: 8", "DEL NumberLiteral: 2", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: def", "DEL ReturnStatement", "DEL PrefixExpression: !", "DEL Dimension", "DEL SimpleName: getName", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: encoding", "DEL Modifier: private", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: m_crc", "DEL MethodDeclaration", "DEL SimpleName: m_entry", "DEL SimpleName: LZERO", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: out", "DEL SimpleName: getBytes", "DEL SimpleName: m_written", "DEL SimpleName: write", "DEL SimpleName: setComprSize", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: value", "DEL TextElement:  1.1", "DEL ExpressionStatement", "DEL SimpleName: ZipLong", "DEL SimpleName: ZipShort", "DEL MethodDeclaration", "DEL TextElement:  1.1", "DEL SimpleName: m_written", "DEL TextElement: setting the CRC and uncompressed size information is required before ", "DEL Javadoc", "DEL PrimitiveType: int", "DEL InfixExpression: |", "DEL SimpleName: write", "DEL TagElement", "DEL SimpleName: m_written", "DEL TagElement: @since", "DEL SimpleName: m_dataStart", "DEL SimpleName: cal", "DEL TextElement:  1.3", "DEL QualifiedName: java.util.zip.ZipOutputStream", "DEL Modifier: private", "DEL InfixExpression: !=", "DEL SimpleName: m_written", "DEL PrimitiveType: int", "DEL SimpleName: m_written", "DEL Modifier: static", "DEL Assignment: +=", "DEL SimpleName: ZipLong", "DEL SimpleName: m_written", "DEL QualifiedName: data.length", "DEL Assignment: =", "DEL InfixExpression: <<", "DEL PrimitiveType: void", "DEL Block", "DEL TextElement: Writes the central file header entry", "DEL QualifiedName: Calendar.DAY_OF_MONTH", "DEL SimpleType: ZipLong", "DEL SimpleName: write", "DEL TagElement", "DEL FieldDeclaration", "DEL TextElement: </a>. Defaults to the platform's default character encoding.</p>", "DEL SimpleName: m_written", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: IOException", "DEL TextElement: CRC automatically for DEFLATED entries.</p>", "DEL SimpleName: clear", "DEL SimpleName: write", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL TagElement", "DEL ParenthesizedExpression", "DEL TagElement: @since", "DEL SimpleName: out", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: m_entry", "DEL Javadoc", "DEL Assignment: +=", "DEL SimpleName: String", "DEL SimpleName: m_encoding", "DEL SimpleName: m_written", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL TextElement:  1.1", "DEL TagElement: @return", "DEL SimpleName: write", "DEL SimpleType: ZipException", "DEL ExpressionStatement", "DEL SimpleName: m_entry", "DEL SimpleName: result", "DEL StringLiteral: \" instead of \"", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: ze", "DEL TagElement", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SimpleName: offset", "DEL NumberLiteral: 0X06054B50L", "DEL Block", "DEL SimpleName: toDosTime", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: num", "DEL Modifier: protected", "DEL NumberLiteral: 0X04034B50L", "DEL SimpleName: out", "DEL ClassInstanceCreation", "DEL TagElement", "DEL SimpleName: length", "DEL TagElement", "DEL ParenthesizedExpression", "DEL SimpleName: ZipShort", "DEL SimpleName: DEFLATED", "DEL SimpleName: getBytes", "DEL SimpleName: write", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL TagElement: @since", "DEL InfixExpression: >>", "DEL TagElement: @return", "DEL TextElement: Count the bytes written to out.", "DEL MethodInvocation", "DEL CastExpression", "DEL SimpleName: getTotalOut", "DEL PrimitiveType: byte", "DEL NumberLiteral: 2", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL PrimitiveType: int", "DEL SimpleName: getLocalFileDataExtra", "DEL Block", "DEL CastExpression", "DEL TextElement: This implementation will use a Data Descriptor to store size and CRC", "DEL PrimitiveType: void", "DEL SimpleName: Long", "DEL SimpleName: method", "DEL SimpleName: ZipLong", "DEL SimpleName: write", "DEL Modifier: final", "DEL ExpressionStatement", "DEL TextElement: Smallest date/time ZIP can handle.", "DEL VariableDeclarationFragment", "DEL SimpleName: out", "DEL TagElement: @since", "DEL SimpleName: extra", "DEL TagElement", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL ParenthesizedExpression", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL Assignment: +=", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: getSize", "DEL TagElement", "DEL SimpleName: OutputStream", "DEL Block", "DEL Modifier: final", "DEL TextElement: Writes bytes to ZIP entry. <p>", "DEL InfixExpression: &", "DEL SimpleName: entry", "DEL ClassInstanceCreation", "DEL SimpleName: m_entry", "DEL SimpleName: out", "DEL Modifier: protected", "DEL ParenthesizedExpression", "DEL SimpleName: entry", "DEL Assignment: =", "DEL SimpleName: setMethod", "DEL TagElement: @exception", "DEL Modifier: public", "DEL TagElement: @link", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TagElement: @since", "DEL MethodInvocation", "DEL MethodInvocation", "DEL NumberLiteral: 2", "DEL SimpleName: month", "DEL SimpleName: m_entry", "DEL SimpleName: getTotalIn", "DEL SimpleName: getBytes", "DEL Assignment: +=", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: getComment", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: write", "DEL TextElement:  the name to decode", "DEL NumberLiteral: 4", "DEL SimpleName: out", "DEL VariableDeclarationStatement", "DEL SimpleType: UnsupportedEncodingException", "DEL TextElement: Retrieve the bytes for the given String in the encoding set for this", "DEL SimpleName: out", "DEL SimpleName: write", "DEL TextElement:  1.1", "DEL Block", "DEL SimpleName: Date", "DEL Block", "DEL ClassInstanceCreation", "DEL NumberLiteral: 10", "DEL Modifier: static", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: ZipException", "DEL SimpleType: ArrayList", "DEL SimpleName: realCrc", "DEL ClassInstanceCreation", "DEL SimpleName: cal", "DEL SimpleName: comment", "DEL TagElement: @since", "DEL TagElement", "DEL FieldDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: getBytes", "DEL Block", "DEL SimpleName: getBytes", "DEL TextElement:  1.1", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL SimpleName: write", "DEL QualifiedName: Calendar.YEAR", "DEL Javadoc", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL PrimitiveType: byte", "DEL TextElement: Begin writing next entry.", "DEL SimpleName: ZipException", "DEL SimpleName: m_entries", "DEL PrimitiveType: byte", "DEL SimpleName: realCrc", "DEL ClassInstanceCreation", "DEL InfixExpression: !=", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: ZipLong", "DEL ClassInstanceCreation", "DEL TagElement: @since", "DEL SimpleName: result", "DEL Assignment: =", "DEL SimpleType: CRC32", "DEL IfStatement", "DEL SimpleName: getBytes", "DEL SimpleName: m_written", "DEL PrimitiveType: byte", "DEL SimpleName: m_offsets", "DEL ClassInstanceCreation", "DEL SimpleName: result", "DEL ThrowStatement", "DEL InfixExpression: &", "DEL InfixExpression: ==", "DEL SimpleType: ZipEntry", "DEL SimpleName: out", "DEL MethodInvocation", "DEL SimpleName: writeLocalFileHeader", "DEL TextElement: Override is necessary to support STORED entries, as well as calculationg", "DEL SimpleName: result", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL InfixExpression: >>", "DEL SimpleName: i", "DEL TagElement: @since", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: m_encoding", "DEL VariableDeclarationFragment", "DEL TextElement:  The new Comment value", "DEL SimpleName: m_entry", "DEL TextElement:  1.1", "DEL Block", "DEL ParenthesizedExpression", "DEL Block", "DEL SimpleName: ZipShort", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: getMethod", "DEL VariableDeclarationStatement", "DEL SimpleType: Hashtable", "DEL SimpleName: ZERO", "DEL MethodInvocation", "DEL SimpleName: getBytes", "DEL ExpressionStatement", "DEL SimpleName: DOS_TIME_MIN", "DEL Assignment: +=", "DEL SimpleName: setSize", "DEL SimpleName: IOException", "DEL SingleVariableDeclaration", "DEL TagElement: @since", "DEL QualifiedName: ZipEntry.DEFLATED", "DEL SimpleType: ZipLong", "DEL SimpleName: entry", "DEL TagElement: @since", "DEL TextElement: with different layouts for local file data and central directory entries. <p>", "DEL TextElement:  the bytes for string", "DEL SimpleType: ZipShort", "DEL Assignment: +=", "DEL SimpleName: m_offsets", "DEL SimpleName: def", "DEL SimpleName: ZipLong", "DEL SimpleName: m_entry", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleName: setEncoding", "DEL ExpressionStatement", "DEL Assignment: =", "DEL Javadoc", "DEL SimpleType: DeflaterOutputStream", "DEL SimpleName: getMethod", "DEL SimpleType: OutputStream", "DEL TextElement:  the zip entry", "DEL SimpleName: m_written", "DEL ExpressionStatement", "DEL SimpleName: entry", "DEL SimpleName: m_encoding", "DEL QualifiedName: name.length", "DEL SimpleName: out", "DEL ExpressionStatement", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL SimpleName: m_entry", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL TextElement:  1.1", "DEL Modifier: protected", "DEL SimpleName: ArrayList", "DEL SimpleName: out", "DEL SimpleName: getBytes", "DEL SimpleName: IOException", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: ZipEntry", "DEL SimpleName: m_entry", "DEL Assignment: =", "DEL MethodInvocation", "DEL PrimitiveType: byte", "DEL ClassInstanceCreation", "DEL PrimitiveType: byte", "DEL SimpleName: ZipLong", "DEL Modifier: private", "DEL SimpleName: m_entry", "DEL SimpleName: getInternalAttributes", "DEL SimpleName: getCrc", "DEL SimpleName: extra", "DEL SimpleName: String", "DEL SimpleName: out", "DEL SimpleName: m_method", "DEL ParenthesizedExpression", "DEL ThrowStatement", "DEL TagElement: @version", "DEL MethodInvocation", "DEL SuperConstructorInvocation", "DEL SimpleName: write", "DEL MethodInvocation", "DEL NumberLiteral: 20", "DEL SimpleName: write", "DEL NumberLiteral: 21", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: cal", "DEL PrimitiveType: void", "DEL ClassInstanceCreation", "DEL SimpleName: getBytes", "DEL MethodInvocation", "DEL TextElement:  will be called.</p>", "DEL SimpleName: IOException", "DEL SimpleName: write", "DEL ExpressionStatement", "DEL TextElement:  when an IO error causes operation to fail", "DEL NumberLiteral: 1", "DEL ClassInstanceCreation", "DEL TextElement:  that does handle the extended functionality of", "DEL ExpressionStatement", "DEL TagElement: @since", "DEL ExpressionStatement", "DEL NumberLiteral: 0X08074B50L", "DEL TextElement:  1.1", "DEL InfixExpression: ==", "DEL SimpleName: out", "DEL PrimitiveType: long", "DEL SingleVariableDeclaration", "DEL SimpleType: ZipShort", "DEL SimpleType: ZipLong", "DEL Modifier: final", "DEL NumberLiteral: 1", "DEL ArrayType: byte[]", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: m_cdOffset", "DEL SimpleName: write", "DEL ExpressionStatement", "DEL TextElement: Default is Deflater.DEFAULT_COMPRESSION.</p>", "DEL Modifier: public", "DEL NullLiteral", "DEL ThrowStatement", "DEL Block", "DEL Assignment: +=", "DEL MethodInvocation", "DEL Dimension", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TagElement: @since", "DEL NumberLiteral: 1", "DEL TextElement:  if an IO failure causes operation to fail", "DEL SimpleName: reset", "DEL InfixExpression: -", "DEL ExpressionStatement", "DEL NumberLiteral: 1", "DEL IfStatement", "DEL SimpleName: m_entries", "DEL MethodInvocation", "DEL SimpleName: m_entry", "DEL PrimitiveType: void", "DEL TextElement: Stream.", "DEL TextElement:  1.1", "DEL SimpleName: entry", "DEL Assignment: +=", "DEL SimpleName: name", "DEL SimpleName: write", "DEL SimpleName: out", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: getCrc", "DEL SimpleName: size", "DEL ExpressionStatement", "DEL SimpleType: ZipEntry", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: write", "DEL SimpleName: writeCentralFileHeader", "DEL SimpleName: m_entry", "DEL SimpleName: ZipShort", "DEL SimpleName: out", "DEL PrimitiveType: byte", "DEL PrimitiveType: long", "DEL TextElement: Data for current entry started here.", "DEL SimpleType: IOException", "DEL SimpleName: writeLocalFileHeader", "DEL CastExpression", "DEL SimpleName: m_entry", "DEL SimpleName: result", "DEL ExpressionStatement", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL SimpleName: DOS_TIME_MIN", "DEL IfStatement", "DEL SimpleName: ZERO", "DEL TextElement:  1.1", "DEL ExpressionStatement", "DEL PrefixExpression: -", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: getBytes", "DEL SimpleName: ZipShort", "DEL ExpressionStatement", "DEL SimpleName: write", "DEL SimpleName: m_entry", "DEL TagElement: @since", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL TextElement: Writes all necessary data for this entry.", "DEL MethodInvocation", "DEL ArrayType: byte[]", "DEL QualifiedName: extra.length", "DEL FieldDeclaration", "DEL SimpleType: ZipShort", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL SimpleName: entry", "DEL PostfixExpression: ++", "DEL SimpleType: ZipEntry", "DEL FieldDeclaration", "DEL Block", "DEL SimpleType: Date", "DEL SimpleName: getTime", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL ExpressionStatement", "DEL SimpleType: ZipShort", "DEL SimpleName: setLevel", "DEL NumberLiteral: 0", "DEL InfixExpression: &", "DEL MethodInvocation", "DEL SimpleName: write", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL TextElement:  1.1", "DEL VariableDeclarationFragment", "DEL SimpleName: entry", "DEL SimpleType: ZipEntry", "DEL TagElement", "DEL ExpressionStatement", "DEL TextElement: Set the file comment.", "DEL InfixExpression: ==", "DEL TagElement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TagElement: @return", "DEL SimpleName: out", "DEL Assignment: +=", "DEL SimpleName: m_encoding", "DEL SimpleName: m_entries", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: toHexString", "DEL PrimitiveType: int", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL SimpleName: getBytes", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: ZipException", "DEL SingleVariableDeclaration", "DEL PrimitiveType: byte", "DEL Modifier: private", "DEL CastExpression", "DEL MethodInvocation", "DEL SimpleName: IOException", "DEL SimpleName: ZipShort", "DEL SimpleName: realCrc", "DEL FieldDeclaration", "DEL Block", "DEL SimpleName: getMessage", "DEL ClassInstanceCreation", "DEL FieldDeclaration", "DEL VariableDeclarationStatement", "DEL TextElement:  the zip entry", "DEL SimpleType: ZipEntry", "DEL SimpleName: System", "DEL NumberLiteral: 4", "DEL NumberLiteral: 20", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 10", "DEL FieldDeclaration", "DEL SimpleName: ZipEntry", "DEL Block", "DEL SimpleName: write", "DEL Javadoc", "DEL Block", "DEL NumberLiteral: 0", "DEL StringLiteral: \"bad size for entry \"", "DEL SimpleName: ZipLong", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL NumberLiteral: 2", "DEL Javadoc", "DEL QualifiedName: extra.length", "DEL TagElement: @param", "DEL Assignment: +=", "DEL SimpleName: getMethod", "DEL TextElement: Writes the data descriptor entry", "DEL NumberLiteral: 0", "DEL SimpleType: ZipLong", "DEL TextElement: java.util.zip.ZipOutputStream", "DEL Modifier: static", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: level", "DEL SimpleName: entry", "DEL Block", "DEL SimpleName: value", "DEL Modifier: final", "DEL SimpleName: m_entry", "DEL SimpleName: m_written", "DEL MethodInvocation", "DEL SimpleType: String", "DEL TextElement: List of ZipEntries written so far.", "DEL ParenthesizedExpression", "DEL ClassInstanceCreation", "DEL SimpleName: out", "DEL ArrayType: byte[]", "DEL SimpleName: ZipShort", "DEL TextElement:  1.1", "DEL SingleVariableDeclaration", "DEL Assignment: +=", "DEL SimpleName: buffer", "DEL SimpleName: ZipShort", "DEL ParenthesizedExpression", "DEL SimpleName: m_written", "DEL Assignment: =", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleType: ZipLong", "DEL SimpleName: write", "DEL SimpleName: comm", "DEL TagElement", "DEL SimpleName: entry", "DEL SimpleName: m_offsets", "DEL SimpleName: entry", "DEL SimpleName: ArrayList", "DEL SimpleName: m_dataStart", "DEL SimpleName: ZipLong", "DEL SimpleName: cal", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL QualifiedName: name.length", "DEL NumberLiteral: 8", "DEL TextElement:  1.1", "DEL SimpleName: putNextEntry", "DEL Modifier: protected", "DEL ArrayType: byte[]", "DEL ClassInstanceCreation", "DEL SimpleName: ZipShort", "DEL TagElement: @param", "DEL SimpleName: deflate", "DEL SimpleName: getSize", "DEL SimpleName: getBytes", "DEL ExpressionStatement", "DEL SimpleName: getBytes", "DEL Modifier: final", "DEL SimpleName: CFH_SIG", "DEL Block", "DEL SimpleName: write", "DEL SimpleType: ZipException", "DEL NumberLiteral: 16", "DEL SimpleName: name", "DEL TextElement: CRC instance to avoid parsing DEFLATED data twice.", "DEL TextElement:  The new Encoding value", "DEL SimpleName: Long", "DEL Modifier: final", "DEL TextElement: </a>. Defaults to the platform's default character encoding.</p>", "DEL SimpleName: getCompressedSize", "DEL SimpleName: ZipLong", "DEL TextElement:  1.1", "DEL Assignment: +=", "DEL SimpleName: offset", "DEL TextElement:  if an IO failure causes operation to fail", "DEL TextElement:  when an IO erro causes operation to fail", "DEL ParenthesizedExpression", "DEL TextElement: Writes the local file header entry", "DEL MethodInvocation", "DEL TagElement", "DEL Assignment: =", "DEL SimpleName: length", "DEL SimpleType: IOException", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: out", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL ParenthesizedExpression", "DEL StringLiteral: \"bad CRC checksum for entry \"", "DEL TagElement: @param", "DEL Assignment: +=", "DEL SimpleType: ZipShort", "DEL InfixExpression: -", "DEL Block", "DEL SimpleName: write", "DEL SimpleName: ZipLong", "DEL SimpleName: write", "DEL SimpleName: write", "DEL TagElement", "DEL SimpleName: ZipLong", "DEL SimpleName: name", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: write", "DEL PrimitiveType: long", "DEL SimpleName: out", "DEL VariableDeclarationFragment", "DEL SimpleName: out", "DEL Modifier: final", "DEL SimpleName: getTime", "DEL Block", "DEL SimpleName: getSize", "DEL TagElement: @since", "DEL SimpleType: ZipShort", "DEL SimpleName: getSize", "DEL ClassInstanceCreation", "DEL SimpleType: ArrayList", "DEL SimpleType: IOException", "DEL SimpleName: getName", "DEL TagElement", "DEL Modifier: protected", "DEL Modifier: final", "DEL SimpleName: finished", "DEL TagElement", "DEL ClassInstanceCreation", "DEL NumberLiteral: 1", "DEL TextElement:  Description of Parameter", "DEL IfStatement", "DEL ParenthesizedExpression", "DEL InfixExpression: !=", "DEL QualifiedName: name.length", "DEL Modifier: public", "DEL SimpleName: entry", "DEL SimpleName: ze", "DEL TextElement:  <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TagElement", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getBytes", "DEL TextElement:  1.1", "DEL SimpleName: write", "DEL SimpleName: getTime", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL TagElement", "DEL SimpleType: String", "DEL MethodInvocation", "DEL MethodInvocation", "DEL StringLiteral: \"crc checksum is required for STORED method\"", "DEL StringLiteral: \"\"", "DEL SimpleName: IOException", "DEL MethodInvocation", "DEL SimpleName: data", "DEL ParenthesizedExpression", "DEL SimpleName: num", "DEL SimpleType: IOException", "DEL SimpleName: encoding", "DEL Modifier: final", "DEL SimpleName: get", "DEL ParenthesizedExpression", "DEL TextElement:  when an IO error causes operation to fail", "DEL Modifier: final", "DEL SimpleName: Deflater", "DEL ParenthesizedExpression", "DEL SimpleName: level", "DEL SimpleName: m_written", "DEL SimpleName: IOException", "DEL ReturnStatement", "DEL SimpleName: writeCentralDirectoryEnd", "DEL NumberLiteral: 11", "DEL Modifier: private", "DEL SimpleName: ZipShort", "DEL TagElement: @param", "DEL SimpleName: comment", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TextElement:  putNextEntry", "DEL ReturnStatement", "DEL SimpleName: toHexString", "DEL SimpleType: ZipException", "DEL SimpleName: get", "DEL TextElement: Holds the offsets of the LFH starts for each entry", "DEL PrimitiveType: void", "DEL TagElement", "DEL SimpleName: year", "DEL Javadoc", "DEL SimpleName: write", "DEL SimpleName: ZipShort", "DEL SimpleName: m_entry", "DEL SimpleName: out", "DEL Modifier: protected", "DEL ExpressionStatement", "DEL NumberLiteral: 8", "DEL SimpleName: out", "DEL SimpleName: m_entry", "DEL MethodInvocation", "DEL SimpleType: ZipShort", "DEL SimpleName: write", "DEL SimpleName: size", "DEL SimpleName: getCrc", "DEL SimpleName: writeDataDescriptor", "DEL SimpleType: IOException", "DEL SimpleName: ZipException", "DEL Javadoc", "DEL FieldDeclaration", "DEL SimpleName: LZERO", "DEL VariableDeclarationFragment", "DEL SimpleType: ZipShort", "DEL SimpleName: getEncoding", "DEL SimpleName: ZipException", "DEL ClassInstanceCreation", "DEL SimpleName: ZipLong", "DEL SimpleType: ZipLong", "DEL InfixExpression: <", "DEL SimpleName: get", "DEL SimpleName: DD_SIG", "DEL ExpressionStatement", "DEL SimpleName: output", "DEL SimpleName: out", "DEL Modifier: private", "DEL SimpleName: out", "DEL VariableDeclarationFragment", "DEL SimpleName: finish", "DEL NumberLiteral: 16", "DEL Modifier: public", "DEL ArrayAccess", "DEL TagElement", "DEL SimpleName: closeEntry", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: write", "DEL TextElement: Creates a new ZIP OutputStream filtering the underlying stream.", "DEL PrimitiveType: void", "DEL NumberLiteral: 0X02014B50L", "DEL NumberLiteral: 2", "DEL FieldDeclaration", "DEL Javadoc", "DEL SimpleName: write", "DEL Javadoc", "DEL TextElement: information for DEFLATED entries, this means, you don't need to calculate", "DEL TextElement:  1.1", "DEL SimpleName: ZipException", "DEL SimpleName: m_written", "DEL SimpleName: getCompressedSize", "DEL SimpleName: ZipLong", "DEL SimpleName: buffer", "DEL SimpleName: value", "DEL VariableDeclarationFragment", "DEL SimpleType: ZipLong", "DEL ParenthesizedExpression", "DEL InfixExpression: <<", "DEL SimpleName: get", "DEL StringLiteral: \": \"", "DEL SimpleName: setMethod", "DEL MethodInvocation", "DEL SimpleName: m_cdOffset", "DEL ExpressionStatement", "DEL NumberLiteral: 2", "DEL SimpleType: ZipShort", "DEL ExpressionStatement", "DEL NullLiteral", "DEL Block", "DEL NumberLiteral: 0xFF000000l", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: getValue", "DEL SimpleName: out", "DEL ExpressionStatement", "DEL NumberLiteral: 0xFF", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL PrimitiveType: byte", "DEL TextElement: Finishs writing the contents and closes this as well as the underlying", "DEL SimpleName: entry", "DEL SimpleName: m_written", "DEL TagElement: @since", "DEL SimpleName: out", "DEL TagElement: @since", "DEL StringLiteral: \"uncompressed size is required for STORED method\"", "DEL SimpleName: getBytes", "DEL TextElement:  1.1", "DEL InfixExpression: <<", "DEL MethodInvocation", "DEL TextElement:  1.1", "DEL ExpressionStatement", "DEL TagElement", "DEL MethodInvocation", "DEL TextElement:  The new Level value", "DEL SimpleName: comm", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL SimpleName: name", "DEL Assignment: +=", "DEL Modifier: protected", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL InfixExpression: -", "DEL SimpleName: m_written", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: ZipShort", "DEL TextElement: end of central dir signature", "DEL Javadoc", "DEL SimpleName: ze", "DEL TextElement:  the output stream to write to", "DEL SimpleName: m_written", "DEL QualifiedName: Deflater.DEFAULT_COMPRESSION", "DEL Modifier: public", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleType: Hashtable", "DEL InfixExpression: <<", "DEL SimpleName: DEFLATED", "DEL SimpleType: ZipException", "DEL PrimitiveType: byte", "DEL SimpleName: getCrc", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: write", "DEL SimpleType: ZipShort", "DEL SimpleName: ZipLong", "DEL SimpleName: m_cdLength", "DEL SimpleName: getBytes", "DEL TagElement: @since", "DEL SimpleName: setTime", "DEL SimpleName: write", "DEL SimpleName: Calendar", "DEL SimpleName: ZipShort", "DEL SimpleType: ZipLong", "DEL SimpleName: ZipLong", "DEL Modifier: protected", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: out", "DEL SimpleName: ZERO", "DEL TagElement: @throws", "DEL TextElement:  1.1", "DEL SimpleName: entry"]}]}}, {"ZipOutputStream_diff": {"operations": ["Delete QualifiedName: org.apache.commons.io.compress.zip(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.io.IOException(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.io.OutputStream(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.io.UnsupportedEncodingException(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.ArrayList(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.Date(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.Calendar(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.util.Hashtable(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.util.zip.CRC32(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: java.util.zip.Deflater(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: java.util.zip.DeflaterOutputStream(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: java.util.zip.ZipException(22)", "Delete ImportDeclaration(23)", "Delete TextElement: Reimplementation of (24)", "Delete QualifiedName: java.util.zip.ZipOutputStream(25)", "Delete TextElement: java.util.zip.ZipOutputStream(26)", "Delete TagElement: @link(27)", "Delete TextElement:  that does handle the extended functionality of(28)", "Delete TextElement: this package, especially internal/external file attributes and extra fields(29)", "Delete TextElement: with different layouts for local file data and central directory entries. <p>(30)", "Delete TextElement: This implementation will use a Data Descriptor to store size and CRC(31)", "Delete TextElement: information for DEFLATED entries, this means, you don't need to calculate(32)", "Delete TextElement: them yourself. Unfortunately this is not possible for the STORED method, here(33)", "Delete TextElement: setting the CRC and uncompressed size information is required before (34)", "Delete SimpleName: putNextEntry(35)", "Delete MemberRef(36)", "Delete TextElement:  putNextEntry(37)", "Delete TagElement: @link(38)", "Delete TextElement:  will be called.</p>(39)", "Delete TagElement(40)", "Delete TextElement:  <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>(41)", "Delete TagElement: @author(42)", "Delete TextElement:  $Revision: 1.3 $(43)", "Delete TagElement: @version(44)", "Delete Javadoc(45)", "Delete Modifier: public(46)", "Delete SimpleName: ZipOutputStream(47)", "Delete SimpleName: DeflaterOutputStream(48)", "Delete SimpleType: DeflaterOutputStream(49)", "Delete TextElement: Helper, a 0 as ZipShort.(50)", "Delete TagElement(51)", "Delete TextElement:  1.1(52)", "Delete TagElement: @since(53)", "Delete Javadoc(54)", "Delete Modifier: private(55)", "Delete Modifier: static(56)", "Delete Modifier: final(57)", "Delete PrimitiveType: byte(58)", "Delete Dimension(59)", "Delete ArrayType: byte[](60)", "Delete SimpleName: ZERO(61)", "Delete NumberLiteral: 0(62)", "Delete NumberLiteral: 0(63)", "Delete ArrayInitializer(64)", "Delete VariableDeclarationFragment(65)", "Delete FieldDeclaration(66)", "Delete TextElement: Helper, a 0 as ZipLong.(67)", "Delete TagElement(68)", "Delete TextElement:  1.1(69)", "Delete TagElement: @since(70)", "Delete Javadoc(71)", "Delete Modifier: private(72)", "Delete Modifier: static(73)", "Delete Modifier: final(74)", "Delete PrimitiveType: byte(75)", "Delete Dimension(76)", "Delete ArrayType: byte[](77)", "Delete SimpleName: LZERO(78)", "Delete NumberLiteral: 0(79)", "Delete NumberLiteral: 0(80)", "Delete NumberLiteral: 0(81)", "Delete NumberLiteral: 0(82)", "Delete ArrayInitializer(83)", "Delete VariableDeclarationFragment(84)", "Delete FieldDeclaration(85)", "Delete TextElement: Compression method for deflated entries.(86)", "Delete TagElement(87)", "Delete TextElement:  1.1(88)", "Delete TagElement: @since(89)", "Delete Javadoc(90)", "Delete Modifier: public(91)", "Delete Modifier: static(92)", "Delete Modifier: final(93)", "Delete PrimitiveType: int(94)", "Delete SimpleName: DEFLATED(95)", "Delete QualifiedName: ZipEntry.DEFLATED(96)", "Delete VariableDeclarationFragment(97)", "Delete FieldDeclaration(98)", "Delete TextElement: Compression method for deflated entries.(99)", "Delete TagElement(100)", "Delete TextElement:  1.1(101)", "Delete TagElement: @since(102)", "Delete Javadoc(103)", "Delete Modifier: public(104)", "Delete Modifier: static(105)", "Delete Modifier: final(106)", "Delete PrimitiveType: int(107)", "Delete SimpleName: STORED(108)", "Delete QualifiedName: ZipEntry.STORED(109)", "Delete VariableDeclarationFragment(110)", "Delete FieldDeclaration(111)", "Delete TextElement: local file header signature(112)", "Delete TagElement(113)", "Delete TextElement:  1.1(114)", "Delete TagElement: @since(115)", "Delete Javadoc(116)", "Delete Modifier: protected(117)", "Delete Modifier: static(118)", "Delete Modifier: final(119)", "Delete SimpleName: ZipLong(120)", "Delete SimpleType: ZipLong(121)", "Delete SimpleName: LFH_SIG(122)", "Delete SimpleName: ZipLong(123)", "Delete SimpleType: ZipLong(124)", "Delete NumberLiteral: 0X04034B50L(125)", "Delete ClassInstanceCreation(126)", "Delete VariableDeclarationFragment(127)", "Delete FieldDeclaration(128)", "Delete TextElement: data descriptor signature(129)", "Delete TagElement(130)", "Delete TextElement:  1.1(131)", "Delete TagElement: @since(132)", "Delete Javadoc(133)", "Delete Modifier: protected(134)", "Delete Modifier: static(135)", "Delete Modifier: final(136)", "Delete SimpleName: ZipLong(137)", "Delete SimpleType: ZipLong(138)", "Delete SimpleName: DD_SIG(139)", "Delete SimpleName: ZipLong(140)", "Delete SimpleType: ZipLong(141)", "Delete NumberLiteral: 0X08074B50L(142)", "Delete ClassInstanceCreation(143)", "Delete VariableDeclarationFragment(144)", "Delete FieldDeclaration(145)", "Delete TextElement: central file header signature(146)", "Delete TagElement(147)", "Delete TextElement:  1.1(148)", "Delete TagElement: @since(149)", "Delete Javadoc(150)", "Delete Modifier: protected(151)", "Delete Modifier: static(152)", "Delete Modifier: final(153)", "Delete SimpleName: ZipLong(154)", "Delete SimpleType: ZipLong(155)", "Delete SimpleName: CFH_SIG(156)", "Delete SimpleName: ZipLong(157)", "Delete SimpleType: ZipLong(158)", "Delete NumberLiteral: 0X02014B50L(159)", "Delete ClassInstanceCreation(160)", "Delete VariableDeclarationFragment(161)", "Delete FieldDeclaration(162)", "Delete TextElement: end of central dir signature(163)", "Delete TagElement(164)", "Delete TextElement:  1.1(165)", "Delete TagElement: @since(166)", "Delete Javadoc(167)", "Delete Modifier: protected(168)", "Delete Modifier: static(169)", "Delete Modifier: final(170)", "Delete SimpleName: ZipLong(171)", "Delete SimpleType: ZipLong(172)", "Delete SimpleName: EOCD_SIG(173)", "Delete SimpleName: ZipLong(174)", "Delete SimpleType: ZipLong(175)", "Delete NumberLiteral: 0X06054B50L(176)", "Delete ClassInstanceCreation(177)", "Delete VariableDeclarationFragment(178)", "Delete FieldDeclaration(179)", "Delete TextElement: Smallest date/time ZIP can handle.(180)", "Delete TagElement(181)", "Delete TextElement:  1.1(182)", "Delete TagElement: @since(183)", "Delete Javadoc(184)", "Delete Modifier: private(185)", "Delete Modifier: static(186)", "Delete Modifier: final(187)", "Delete SimpleName: ZipLong(188)", "Delete SimpleType: ZipLong(189)", "Delete SimpleName: DOS_TIME_MIN(190)", "Delete SimpleName: ZipLong(191)", "Delete SimpleType: ZipLong(192)", "Delete NumberLiteral: 0x00002100L(193)", "Delete ClassInstanceCreation(194)", "Delete VariableDeclarationFragment(195)", "Delete FieldDeclaration(196)", "Delete TextElement: The file comment.(197)", "Delete TagElement(198)", "Delete TextElement:  1.1(199)", "Delete TagElement: @since(200)", "Delete Javadoc(201)", "Delete Modifier: private(202)", "Delete SimpleName: String(203)", "Delete SimpleType: String(204)", "Delete SimpleName: m_comment(205)", "Delete StringLiteral: \"\"(206)", "Delete VariableDeclarationFragment(207)", "Delete FieldDeclaration(208)", "Delete TextElement: Compression level for next entry.(209)", "Delete TagElement(210)", "Delete TextElement:  1.1(211)", "Delete TagElement: @since(212)", "Delete Javadoc(213)", "Delete Modifier: private(214)", "Delete PrimitiveType: int(215)", "Delete SimpleName: m_level(216)", "Delete QualifiedName: Deflater.DEFAULT_COMPRESSION(217)", "Delete VariableDeclarationFragment(218)", "Delete FieldDeclaration(219)", "Delete TextElement: Default compression method for next entry.(220)", "Delete TagElement(221)", "Delete TextElement:  1.1(222)", "Delete TagElement: @since(223)", "Delete Javadoc(224)", "Delete Modifier: private(225)", "Delete PrimitiveType: int(226)", "Delete SimpleName: m_method(227)", "Delete SimpleName: DEFLATED(228)", "Delete VariableDeclarationFragment(229)", "Delete FieldDeclaration(230)", "Delete TextElement: List of ZipEntries written so far.(231)", "Delete TagElement(232)", "Delete TextElement:  1.1(233)", "Delete TagElement: @since(234)", "Delete Javadoc(235)", "Delete Modifier: private(236)", "Delete Modifier: final(237)", "Delete SimpleName: ArrayList(238)", "Delete SimpleType: ArrayList(239)", "Delete SimpleName: m_entries(240)", "Delete SimpleName: ArrayList(241)", "Delete SimpleType: ArrayList(242)", "Delete ClassInstanceCreation(243)", "Delete VariableDeclarationFragment(244)", "Delete FieldDeclaration(245)", "Delete TextElement: CRC instance to avoid parsing DEFLATED data twice.(246)", "Delete TagElement(247)", "Delete TextElement:  1.1(248)", "Delete TagElement: @since(249)", "Delete Javadoc(250)", "Delete Modifier: private(251)", "Delete Modifier: final(252)", "Delete SimpleName: CRC32(253)", "Delete SimpleType: CRC32(254)", "Delete SimpleName: m_crc(255)", "Delete SimpleName: CRC32(256)", "Delete SimpleType: CRC32(257)", "Delete ClassInstanceCreation(258)", "Delete VariableDeclarationFragment(259)", "Delete FieldDeclaration(260)", "Delete TextElement: Count the bytes written to out.(261)", "Delete TagElement(262)", "Delete TextElement:  1.1(263)", "Delete TagElement: @since(264)", "Delete Javadoc(265)", "Delete Modifier: private(266)", "Delete PrimitiveType: long(267)", "Delete SimpleName: m_written(268)", "Delete VariableDeclarationFragment(269)", "Delete FieldDeclaration(270)", "Delete TextElement: Data for current entry started here.(271)", "Delete TagElement(272)", "Delete TextElement:  1.1(273)", "Delete TagElement: @since(274)", "Delete Javadoc(275)", "Delete Modifier: private(276)", "Delete PrimitiveType: long(277)", "Delete SimpleName: m_dataStart(278)", "Delete VariableDeclarationFragment(279)", "Delete FieldDeclaration(280)", "Delete TextElement: Start of central directory.(281)", "Delete TagElement(282)", "Delete TextElement:  1.1(283)", "Delete TagElement: @since(284)", "Delete Javadoc(285)", "Delete Modifier: private(286)", "Delete SimpleName: ZipLong(287)", "Delete SimpleType: ZipLong(288)", "Delete SimpleName: m_cdOffset(289)", "Delete SimpleName: ZipLong(290)", "Delete SimpleType: ZipLong(291)", "Delete NumberLiteral: 0(292)", "Delete ClassInstanceCreation(293)", "Delete VariableDeclarationFragment(294)", "Delete FieldDeclaration(295)", "Delete TextElement: Length of central directory.(296)", "Delete TagElement(297)", "Delete TextElement:  1.1(298)", "Delete TagElement: @since(299)", "Delete Javadoc(300)", "Delete Modifier: private(301)", "Delete SimpleName: ZipLong(302)", "Delete SimpleType: ZipLong(303)", "Delete SimpleName: m_cdLength(304)", "Delete SimpleName: ZipLong(305)", "Delete SimpleType: ZipLong(306)", "Delete NumberLiteral: 0(307)", "Delete ClassInstanceCreation(308)", "Delete VariableDeclarationFragment(309)", "Delete FieldDeclaration(310)", "Delete TextElement: Holds the offsets of the LFH starts for each entry(311)", "Delete TagElement(312)", "Delete TextElement:  1.1(313)", "Delete TagElement: @since(314)", "Delete Javadoc(315)", "Delete Modifier: private(316)", "Delete Modifier: final(317)", "Delete SimpleName: Hashtable(318)", "Delete SimpleType: Hashtable(319)", "Delete SimpleName: m_offsets(320)", "Delete SimpleName: Hashtable(321)", "Delete SimpleType: Hashtable(322)", "Delete ClassInstanceCreation(323)", "Delete VariableDeclarationFragment(324)", "Delete FieldDeclaration(325)", "Delete TextElement: The encoding to use for filenames and the file comment. <p>(326)", "Delete TextElement: For a list of possible values see <a(327)", "Delete TextElement: href=\"http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html\">(328)", "Delete TextElement: http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html(329)", "Delete TextElement: </a>. Defaults to the platform's default character encoding.</p>(330)", "Delete TagElement(331)", "Delete TextElement:  1.3(332)", "Delete TagElement: @since(333)", "Delete Javadoc(334)", "Delete Modifier: private(335)", "Delete SimpleName: String(336)", "Delete SimpleType: String(337)", "Delete SimpleName: m_encoding(338)", "Delete VariableDeclarationFragment(339)", "Delete FieldDeclaration(340)", "Delete TextElement: Current entry.(341)", "Delete TagElement(342)", "Delete TextElement:  1.1(343)", "Delete TagElement: @since(344)", "Delete Javadoc(345)", "Delete Modifier: private(346)", "Delete SimpleName: ZipEntry(347)", "Delete SimpleType: ZipEntry(348)", "Delete SimpleName: m_entry(349)", "Delete VariableDeclarationFragment(350)", "Delete FieldDeclaration(351)", "Delete TextElement: Creates a new ZIP OutputStream filtering the underlying stream.(352)", "Delete TagElement(353)", "Delete SimpleName: output(354)", "Delete TextElement:  the output stream to write to(355)", "Delete TagElement: @param(356)", "Delete TextElement:  1.1(357)", "Delete TagElement: @since(358)", "Delete Javadoc(359)", "Delete Modifier: public(360)", "Delete SimpleName: ZipOutputStream(361)", "Delete Modifier: final(362)", "Delete SimpleName: OutputStream(363)", "Delete SimpleType: OutputStream(364)", "Delete SimpleName: output(365)", "Delete SingleVariableDeclaration(366)", "Delete SimpleName: output(367)", "Delete SimpleName: Deflater(368)", "Delete SimpleType: Deflater(369)", "Delete QualifiedName: Deflater.DEFAULT_COMPRESSION(370)", "Delete BooleanLiteral: true(371)", "Delete ClassInstanceCreation(372)", "Delete SuperConstructorInvocation(373)", "Delete Block(374)", "Delete MethodDeclaration(375)", "Delete TextElement: Convert a Date object to a DOS date/time field. <p>(376)", "Delete TextElement: Stolen from InfoZip's <code>fileio.c</code></p>(377)", "Delete TagElement(378)", "Delete SimpleName: time(379)", "Delete TextElement:  Description of Parameter(380)", "Delete TagElement: @param(381)", "Delete TextElement:  Description of the Returned Value(382)", "Delete TagElement: @return(383)", "Delete TextElement:  1.1(384)", "Delete TagElement: @since(385)", "Delete Javadoc(386)", "Delete Modifier: protected(387)", "Delete Modifier: static(388)", "Delete SimpleName: ZipLong(389)", "Delete SimpleType: ZipLong(390)", "Delete SimpleName: toDosTime(391)", "Delete SimpleName: Date(392)", "Delete SimpleType: Date(393)", "Delete SimpleName: time(394)", "Delete SingleVariableDeclaration(395)", "Delete SimpleName: Calendar(396)", "Delete SimpleType: Calendar(397)", "Delete SimpleName: cal(398)", "Delete SimpleName: Calendar(399)", "Delete SimpleName: getInstance(400)", "Delete MethodInvocation(401)", "Delete VariableDeclarationFragment(402)", "Delete VariableDeclarationStatement(403)", "Delete SimpleName: cal(404)", "Delete SimpleName: setTime(405)", "Delete SimpleName: time(406)", "Delete MethodInvocation(407)", "Delete ExpressionStatement(408)", "Delete PrimitiveType: int(409)", "Delete SimpleName: year(410)", "Delete SimpleName: cal(411)", "Delete SimpleName: get(412)", "Delete QualifiedName: Calendar.YEAR(413)", "Delete MethodInvocation(414)", "Delete VariableDeclarationFragment(415)", "Delete VariableDeclarationStatement(416)", "Delete PrimitiveType: int(417)", "Delete SimpleName: month(418)", "Delete SimpleName: cal(419)", "Delete SimpleName: get(420)", "Delete QualifiedName: Calendar.MONTH(421)", "Delete MethodInvocation(422)", "Delete NumberLiteral: 1(423)", "Delete InfixExpression: +(424)", "Delete VariableDeclarationFragment(425)", "Delete VariableDeclarationStatement(426)", "Delete SimpleName: year(427)", "Delete NumberLiteral: 1980(428)", "Delete InfixExpression: <(429)", "Delete SimpleName: DOS_TIME_MIN(430)", "Delete ReturnStatement(431)", "Delete Block(432)", "Delete IfStatement(433)", "Delete PrimitiveType: long(434)", "Delete SimpleName: value(435)", "Delete SimpleName: year(436)", "Delete NumberLiteral: 1980(437)", "Delete InfixExpression: -(438)", "Delete ParenthesizedExpression(439)", "Delete NumberLiteral: 25(440)", "Delete InfixExpression: <<(441)", "Delete ParenthesizedExpression(442)", "Delete SimpleName: month(443)", "Delete NumberLiteral: 21(444)", "Delete InfixExpression: <<(445)", "Delete ParenthesizedExpression(446)", "Delete SimpleName: cal(447)", "Delete SimpleName: get(448)", "Delete QualifiedName: Calendar.DAY_OF_MONTH(449)", "Delete MethodInvocation(450)", "Delete NumberLiteral: 16(451)", "Delete InfixExpression: <<(452)", "Delete ParenthesizedExpression(453)", "Delete SimpleName: cal(454)", "Delete SimpleName: get(455)", "Delete QualifiedName: Calendar.HOUR_OF_DAY(456)", "Delete MethodInvocation(457)", "Delete NumberLiteral: 11(458)", "Delete InfixExpression: <<(459)", "Delete ParenthesizedExpression(460)", "Delete SimpleName: cal(461)", "Delete SimpleName: get(462)", "Delete QualifiedName: Calendar.MINUTE(463)", "Delete MethodInvocation(464)", "Delete NumberLiteral: 5(465)", "Delete InfixExpression: <<(466)", "Delete ParenthesizedExpression(467)", "Delete SimpleName: cal(468)", "Delete SimpleName: get(469)", "Delete QualifiedName: Calendar.SECOND(470)", "Delete MethodInvocation(471)", "Delete NumberLiteral: 1(472)", "Delete InfixExpression: >>(473)", "Delete ParenthesizedExpression(474)", "Delete InfixExpression: |(475)", "Delete VariableDeclarationFragment(476)", "Delete VariableDeclarationStatement(477)", "Delete PrimitiveType: byte(478)", "Delete Dimension(479)", "Delete ArrayType: byte[](480)", "Delete SimpleName: result(481)", "Delete PrimitiveType: byte(482)", "Delete Dimension(483)", "Delete ArrayType: byte[](484)", "Delete NumberLiteral: 4(485)", "Delete ArrayCreation(486)", "Delete VariableDeclarationFragment(487)", "Delete VariableDeclarationStatement(488)", "Delete SimpleName: result(489)", "Delete NumberLiteral: 0(490)", "Delete ArrayAccess(491)", "Delete PrimitiveType: byte(492)", "Delete SimpleName: value(493)", "Delete NumberLiteral: 0xFF(494)", "Delete InfixExpression: &(495)", "Delete ParenthesizedExpression(496)", "Delete ParenthesizedExpression(497)", "Delete CastExpression(498)", "Delete Assignment: =(499)", "Delete ExpressionStatement(500)", "Delete SimpleName: result(501)", "Delete NumberLiteral: 1(502)", "Delete ArrayAccess(503)", "Delete PrimitiveType: byte(504)", "Delete SimpleName: value(505)", "Delete NumberLiteral: 0xFF00(506)", "Delete InfixExpression: &(507)", "Delete ParenthesizedExpression(508)", "Delete NumberLiteral: 8(509)", "Delete InfixExpression: >>(510)", "Delete ParenthesizedExpression(511)", "Delete CastExpression(512)", "Delete Assignment: =(513)", "Delete ExpressionStatement(514)", "Delete SimpleName: result(515)", "Delete NumberLiteral: 2(516)", "Delete ArrayAccess(517)", "Delete PrimitiveType: byte(518)", "Delete SimpleName: value(519)", "Delete NumberLiteral: 0xFF0000(520)", "Delete InfixExpression: &(521)", "Delete ParenthesizedExpression(522)", "Delete NumberLiteral: 16(523)", "Delete InfixExpression: >>(524)", "Delete ParenthesizedExpression(525)", "Delete CastExpression(526)", "Delete Assignment: =(527)", "Delete ExpressionStatement(528)", "Delete SimpleName: result(529)", "Delete NumberLiteral: 3(530)", "Delete ArrayAccess(531)", "Delete PrimitiveType: byte(532)", "Delete SimpleName: value(533)", "Delete NumberLiteral: 0xFF000000l(534)", "Delete InfixExpression: &(535)", "Delete ParenthesizedExpression(536)", "Delete NumberLiteral: 24(537)", "Delete InfixExpression: >>(538)", "Delete ParenthesizedExpression(539)", "Delete CastExpression(540)", "Delete Assignment: =(541)", "Delete ExpressionStatement(542)", "Delete SimpleName: ZipLong(543)", "Delete SimpleType: ZipLong(544)", "Delete SimpleName: result(545)", "Delete ClassInstanceCreation(546)", "Delete ReturnStatement(547)", "Delete Block(548)", "Delete MethodDeclaration(549)", "Delete TextElement: Set the file comment.(550)", "Delete TagElement(551)", "Delete SimpleName: comment(552)", "Delete TextElement:  The new Comment value(553)", "Delete TagElement: @param(554)", "Delete TextElement:  1.1(555)", "Delete TagElement: @since(556)", "Delete Javadoc(557)", "Delete Modifier: public(558)", "Delete PrimitiveType: void(559)", "Delete SimpleName: setComment(560)", "Delete SimpleName: String(561)", "Delete SimpleType: String(562)", "Delete SimpleName: comment(563)", "Delete SingleVariableDeclaration(564)", "Delete SimpleName: m_comment(565)", "Delete SimpleName: comment(566)", "Delete Assignment: =(567)", "Delete ExpressionStatement(568)", "Delete Block(569)", "Delete MethodDeclaration(570)", "Delete TextElement: The encoding to use for filenames and the file comment. <p>(571)", "Delete TextElement: For a list of possible values see <a(572)", "Delete TextElement: href=\"http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html\">(573)", "Delete TextElement: http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html(574)", "Delete TextElement: </a>. Defaults to the platform's default character encoding.</p>(575)", "Delete TagElement(576)", "Delete SimpleName: encoding(577)", "Delete TextElement:  The new Encoding value(578)", "Delete TagElement: @param(579)", "Delete TextElement:  1.3(580)", "Delete TagElement: @since(581)", "Delete Javadoc(582)", "Delete Modifier: public(583)", "Delete PrimitiveType: void(584)", "Delete SimpleName: setEncoding(585)", "Delete SimpleName: String(586)", "Delete SimpleType: String(587)", "Delete SimpleName: encoding(588)", "Delete SingleVariableDeclaration(589)", "Delete SimpleName: m_encoding(590)", "Delete SimpleName: encoding(591)", "Delete Assignment: =(592)", "Delete ExpressionStatement(593)", "Delete Block(594)", "Delete MethodDeclaration(595)", "Delete TextElement: Sets the compression level for subsequent entries. <p>(596)", "Delete TextElement: Default is Deflater.DEFAULT_COMPRESSION.</p>(597)", "Delete TagElement(598)", "Delete SimpleName: level(599)", "Delete TextElement:  The new Level value(600)", "Delete TagElement: @param(601)", "Delete TextElement:  1.1(602)", "Delete TagElement: @since(603)", "Delete Javadoc(604)", "Delete Modifier: public(605)", "Delete PrimitiveType: void(606)", "Delete SimpleName: setLevel(607)", "Delete PrimitiveType: int(608)", "Delete SimpleName: level(609)", "Delete SingleVariableDeclaration(610)", "Delete SimpleName: m_level(611)", "Delete SimpleName: level(612)", "Delete Assignment: =(613)", "Delete ExpressionStatement(614)", "Delete Block(615)", "Delete MethodDeclaration(616)", "Delete TextElement: Sets the default compression method for subsequent entries. <p>(617)", "Delete TextElement: Default is DEFLATED.</p>(618)", "Delete TagElement(619)", "Delete SimpleName: method(620)", "Delete TextElement:  The new Method value(621)", "Delete TagElement: @param(622)", "Delete TextElement:  1.1(623)", "Delete TagElement: @since(624)", "Delete Javadoc(625)", "Delete Modifier: public(626)", "Delete PrimitiveType: void(627)", "Delete SimpleName: setMethod(628)", "Delete Modifier: final(629)", "Delete PrimitiveType: int(630)", "Delete SimpleName: method(631)", "Delete SingleVariableDeclaration(632)", "Delete SimpleName: m_method(633)", "Delete SimpleName: method(634)", "Delete Assignment: =(635)", "Delete ExpressionStatement(636)", "Delete Block(637)", "Delete MethodDeclaration(638)", "Delete TextElement: The encoding to use for filenames and the file comment.(639)", "Delete TagElement(640)", "Delete TextElement:  null if using the platform's default character encoding.(641)", "Delete TagElement: @return(642)", "Delete TextElement:  1.3(643)", "Delete TagElement: @since(644)", "Delete Javadoc(645)", "Delete Modifier: public(646)", "Delete SimpleName: String(647)", "Delete SimpleType: String(648)", "Delete SimpleName: getEncoding(649)", "Delete SimpleName: m_encoding(650)", "Delete ReturnStatement(651)", "Delete Block(652)", "Delete MethodDeclaration(653)", "Delete TextElement: Writes all necessary data for this entry.(654)", "Delete TagElement(655)", "Delete SimpleName: IOException(656)", "Delete TextElement:  if an IO failure causes operation to fail(657)", "Delete TagElement: @throws(658)", "Delete TextElement:  1.1(659)", "Delete TagElement: @since(660)", "Delete Javadoc(661)", "Delete Modifier: public(662)", "Delete PrimitiveType: void(663)", "Delete SimpleName: closeEntry(664)", "Delete SimpleName: IOException(665)", "Delete SimpleType: IOException(666)", "Delete SimpleName: m_entry(667)", "Delete NullLiteral(668)", "Delete InfixExpression: ==(669)", "Delete ReturnStatement(670)", "Delete Block(671)", "Delete IfStatement(672)", "Delete PrimitiveType: long(673)", "Delete SimpleName: realCrc(674)", "Delete SimpleName: m_crc(675)", "Delete SimpleName: getValue(676)", "Delete MethodInvocation(677)", "Delete VariableDeclarationFragment(678)", "Delete VariableDeclarationStatement(679)", "Delete SimpleName: m_crc(680)", "Delete SimpleName: reset(681)", "Delete MethodInvocation(682)", "Delete ExpressionStatement(683)", "Delete SimpleName: m_entry(684)", "Delete SimpleName: getMethod(685)", "Delete MethodInvocation(686)", "Delete SimpleName: DEFLATED(687)", "Delete InfixExpression: ==(688)", "Delete SimpleName: def(689)", "Delete SimpleName: finish(690)", "Delete MethodInvocation(691)", "Delete ExpressionStatement(692)", "Delete SimpleName: def(693)", "Delete SimpleName: finished(694)", "Delete MethodInvocation(695)", "Delete PrefixExpression: !(696)", "Delete SimpleName: deflate(697)", "Delete MethodInvocation(698)", "Delete ExpressionStatement(699)", "Delete Block(700)", "Delete WhileStatement(701)", "Delete SimpleName: m_entry(702)", "Delete SimpleName: setSize(703)", "Delete SimpleName: def(704)", "Delete SimpleName: getTotalIn(705)", "Delete MethodInvocation(706)", "Delete MethodInvocation(707)", "Delete ExpressionStatement(708)", "Delete SimpleName: m_entry(709)", "Delete SimpleName: setComprSize(710)", "Delete SimpleName: def(711)", "Delete SimpleName: getTotalOut(712)", "Delete MethodInvocation(713)", "Delete MethodInvocation(714)", "Delete ExpressionStatement(715)", "Delete SimpleName: m_entry(716)", "Delete SimpleName: setCrc(717)", "Delete SimpleName: realCrc(718)", "Delete MethodInvocation(719)", "Delete ExpressionStatement(720)", "Delete SimpleName: def(721)", "Delete SimpleName: reset(722)", "Delete MethodInvocation(723)", "Delete ExpressionStatement(724)", "Delete SimpleName: m_written(725)", "Delete SimpleName: m_entry(726)", "Delete SimpleName: getCompressedSize(727)", "Delete MethodInvocation(728)", "Delete Assignment: +=(729)", "Delete ExpressionStatement(730)", "Delete Block(731)", "Delete SimpleName: m_entry(732)", "Delete SimpleName: getCrc(733)", "Delete MethodInvocation(734)", "Delete SimpleName: realCrc(735)", "Delete InfixExpression: !=(736)", "Delete SimpleName: ZipException(737)", "Delete SimpleType: ZipException(738)", "Delete StringLiteral: \"bad CRC checksum for entry \"(739)", "Delete SimpleName: m_entry(740)", "Delete SimpleName: getName(741)", "Delete MethodInvocation(742)", "Delete StringLiteral: \": \"(743)", "Delete SimpleName: Long(744)", "Delete SimpleName: toHexString(745)", "Delete SimpleName: m_entry(746)", "Delete SimpleName: getCrc(747)", "Delete MethodInvocation(748)", "Delete MethodInvocation(749)", "Delete StringLiteral: \" instead of \"(750)", "Delete SimpleName: Long(751)", "Delete SimpleName: toHexString(752)", "Delete SimpleName: realCrc(753)", "Delete MethodInvocation(754)", "Delete InfixExpression: +(755)", "Delete ClassInstanceCreation(756)", "Delete ThrowStatement(757)", "Delete Block(758)", "Delete IfStatement(759)", "Delete SimpleName: m_entry(760)", "Delete SimpleName: getSize(761)", "Delete MethodInvocation(762)", "Delete SimpleName: m_written(763)", "Delete SimpleName: m_dataStart(764)", "Delete InfixExpression: -(765)", "Delete InfixExpression: !=(766)", "Delete SimpleName: ZipException(767)", "Delete SimpleType: ZipException(768)", "Delete StringLiteral: \"bad size for entry \"(769)", "Delete SimpleName: m_entry(770)", "Delete SimpleName: getName(771)", "Delete MethodInvocation(772)", "Delete StringLiteral: \": \"(773)", "Delete SimpleName: m_entry(774)", "Delete SimpleName: getSize(775)", "Delete MethodInvocation(776)", "Delete StringLiteral: \" instead of \"(777)", "Delete SimpleName: m_written(778)", "Delete SimpleName: m_dataStart(779)", "Delete InfixExpression: -(780)", "Delete ParenthesizedExpression(781)", "Delete InfixExpression: +(782)", "Delete ClassInstanceCreation(783)", "Delete ThrowStatement(784)", "Delete Block(785)", "Delete IfStatement(786)", "Delete Block(787)", "Delete IfStatement(788)", "Delete SimpleName: writeDataDescriptor(789)", "Delete SimpleName: m_entry(790)", "Delete MethodInvocation(791)", "Delete ExpressionStatement(792)", "Delete SimpleName: m_entry(793)", "Delete NullLiteral(794)", "Delete Assignment: =(795)", "Delete ExpressionStatement(796)", "Delete Block(797)", "Delete MethodDeclaration(798)", "Delete TextElement: Finishs writing the contents and closes this as well as the underlying(799)", "Delete TextElement: stream.(800)", "Delete TagElement(801)", "Delete SimpleName: IOException(802)", "Delete TextElement:  if an IO failure causes operation to fail(803)", "Delete TagElement: @throws(804)", "Delete TextElement:  1.1(805)", "Delete TagElement: @since(806)", "Delete Javadoc(807)", "Delete Modifier: public(808)", "Delete PrimitiveType: void(809)", "Delete SimpleName: finish(810)", "Delete SimpleName: IOException(811)", "Delete SimpleType: IOException(812)", "Delete SimpleName: closeEntry(813)", "Delete MethodInvocation(814)", "Delete ExpressionStatement(815)", "Delete SimpleName: m_cdOffset(816)", "Delete SimpleName: ZipLong(817)", "Delete SimpleType: ZipLong(818)", "Delete SimpleName: m_written(819)", "Delete ClassInstanceCreation(820)", "Delete Assignment: =(821)", "Delete ExpressionStatement(822)", "Delete Modifier: final(823)", "Delete PrimitiveType: int(824)", "Delete SimpleName: size(825)", "Delete SimpleName: m_entries(826)", "Delete SimpleName: size(827)", "Delete MethodInvocation(828)", "Delete VariableDeclarationFragment(829)", "Delete VariableDeclarationStatement(830)", "Delete PrimitiveType: int(831)", "Delete SimpleName: i(832)", "Delete NumberLiteral: 0(833)", "Delete VariableDeclarationFragment(834)", "Delete VariableDeclarationExpression(835)", "Delete SimpleName: i(836)", "Delete SimpleName: size(837)", "Delete InfixExpression: <(838)", "Delete SimpleName: i(839)", "Delete PostfixExpression: ++(840)", "Delete Modifier: final(841)", "Delete SimpleName: ZipEntry(842)", "Delete SimpleType: ZipEntry(843)", "Delete SimpleName: entry(844)", "Delete SimpleName: ZipEntry(845)", "Delete SimpleType: ZipEntry(846)", "Delete SimpleName: m_entries(847)", "Delete SimpleName: get(848)", "Delete SimpleName: i(849)", "Delete MethodInvocation(850)", "Delete CastExpression(851)", "Delete VariableDeclarationFragment(852)", "Delete VariableDeclarationStatement(853)", "Delete SimpleName: writeCentralFileHeader(854)", "Delete SimpleName: entry(855)", "Delete MethodInvocation(856)", "Delete ExpressionStatement(857)", "Delete Block(858)", "Delete ForStatement(859)", "Delete SimpleName: m_cdLength(860)", "Delete SimpleName: ZipLong(861)", "Delete SimpleType: ZipLong(862)", "Delete SimpleName: m_written(863)", "Delete SimpleName: m_cdOffset(864)", "Delete SimpleName: getValue(865)", "Delete MethodInvocation(866)", "Delete InfixExpression: -(867)", "Delete ClassInstanceCreation(868)", "Delete Assignment: =(869)", "Delete ExpressionStatement(870)", "Delete SimpleName: writeCentralDirectoryEnd(871)", "Delete MethodInvocation(872)", "Delete ExpressionStatement(873)", "Delete SimpleName: m_offsets(874)", "Delete SimpleName: clear(875)", "Delete MethodInvocation(876)", "Delete ExpressionStatement(877)", "Delete SimpleName: m_entries(878)", "Delete SimpleName: clear(879)", "Delete MethodInvocation(880)", "Delete ExpressionStatement(881)", "Delete Block(882)", "Delete MethodDeclaration(883)", "Delete TextElement: Begin writing next entry.(884)", "Delete TagElement(885)", "Delete SimpleName: entry(886)", "Delete TextElement:  the entry(887)", "Delete TagElement: @param(888)", "Delete SimpleName: IOException(889)", "Delete TextElement:  if an IO failure causes operation to fail(890)", "Delete TagElement: @throws(891)", "Delete TextElement:  1.1(892)", "Delete TagElement: @since(893)", "Delete Javadoc(894)", "Delete Modifier: public(895)", "Delete PrimitiveType: void(896)", "Delete SimpleName: putNextEntry(897)", "Delete Modifier: final(898)", "Delete SimpleName: ZipEntry(899)", "Delete SimpleType: ZipEntry(900)", "Delete SimpleName: entry(901)", "Delete SingleVariableDeclaration(902)", "Delete SimpleName: IOException(903)", "Delete SimpleType: IOException(904)", "Delete SimpleName: closeEntry(905)", "Delete MethodInvocation(906)", "Delete ExpressionStatement(907)", "Delete SimpleName: m_entry(908)", "Delete SimpleName: entry(909)", "Delete Assignment: =(910)", "Delete ExpressionStatement(911)", "Delete SimpleName: m_entries(912)", "Delete SimpleName: add(913)", "Delete SimpleName: m_entry(914)", "Delete MethodInvocation(915)", "Delete ExpressionStatement(916)", "Delete SimpleName: m_entry(917)", "Delete SimpleName: getMethod(918)", "Delete MethodInvocation(919)", "Delete NumberLiteral: 1(920)", "Delete PrefixExpression: -(921)", "Delete InfixExpression: ==(922)", "Delete SimpleName: m_entry(923)", "Delete SimpleName: setMethod(924)", "Delete SimpleName: m_method(925)", "Delete MethodInvocation(926)", "Delete ExpressionStatement(927)", "Delete Block(928)", "Delete IfStatement(929)", "Delete SimpleName: m_entry(930)", "Delete SimpleName: getTime(931)", "Delete MethodInvocation(932)", "Delete NumberLiteral: 1(933)", "Delete PrefixExpression: -(934)", "Delete InfixExpression: ==(935)", "Delete SimpleName: m_entry(936)", "Delete SimpleName: setTime(937)", "Delete SimpleName: System(938)", "Delete SimpleName: currentTimeMillis(939)", "Delete MethodInvocation(940)", "Delete MethodInvocation(941)", "Delete ExpressionStatement(942)", "Delete Block(943)", "Delete IfStatement(944)", "Delete SimpleName: m_entry(945)", "Delete SimpleName: getMethod(946)", "Delete MethodInvocation(947)", "Delete SimpleName: STORED(948)", "Delete InfixExpression: ==(949)", "Delete SimpleName: m_entry(950)", "Delete SimpleName: getSize(951)", "Delete MethodInvocation(952)", "Delete NumberLiteral: 1(953)", "Delete PrefixExpression: -(954)", "Delete InfixExpression: ==(955)", "Delete SimpleName: ZipException(956)", "Delete SimpleType: ZipException(957)", "Delete StringLiteral: \"uncompressed size is required for STORED method\"(958)", "Delete ClassInstanceCreation(959)", "Delete ThrowStatement(960)", "Delete Block(961)", "Delete IfStatement(962)", "Delete SimpleName: m_entry(963)", "Delete SimpleName: getCrc(964)", "Delete MethodInvocation(965)", "Delete NumberLiteral: 1(966)", "Delete PrefixExpression: -(967)", "Delete InfixExpression: ==(968)", "Delete SimpleName: ZipException(969)", "Delete SimpleType: ZipException(970)", "Delete StringLiteral: \"crc checksum is required for STORED method\"(971)", "Delete ClassInstanceCreation(972)", "Delete ThrowStatement(973)", "Delete Block(974)", "Delete IfStatement(975)", "Delete SimpleName: m_entry(976)", "Delete SimpleName: setComprSize(977)", "Delete SimpleName: m_entry(978)", "Delete SimpleName: getSize(979)", "Delete MethodInvocation(980)", "Delete MethodInvocation(981)", "Delete ExpressionStatement(982)", "Delete Block(983)", "Delete SimpleName: def(984)", "Delete SimpleName: setLevel(985)", "Delete SimpleName: m_level(986)", "Delete MethodInvocation(987)", "Delete ExpressionStatement(988)", "Delete Block(989)", "Delete IfStatement(990)", "Delete SimpleName: writeLocalFileHeader(991)", "Delete SimpleName: m_entry(992)", "Delete MethodInvocation(993)", "Delete ExpressionStatement(994)", "Delete Block(995)", "Delete MethodDeclaration(996)", "Delete TextElement: Writes bytes to ZIP entry. <p>(997)", "Delete TextElement: Override is necessary to support STORED entries, as well as calculationg(998)", "Delete TextElement: CRC automatically for DEFLATED entries.</p>(999)", "Delete TagElement(1000)", "Delete SimpleName: buffer(1001)", "Delete TextElement:  the buffer to write to(1002)", "Delete TagElement: @param(1003)", "Delete SimpleName: offset(1004)", "Delete TextElement:  the offset to write to(1005)", "Delete TagElement: @param(1006)", "Delete SimpleName: length(1007)", "Delete TextElement:  the length of data to write(1008)", "Delete TagElement: @param(1009)", "Delete SimpleName: IOException(1010)", "Delete TextElement:  if an IO error causes operation to fail(1011)", "Delete TagElement: @exception(1012)", "Delete Javadoc(1013)", "Delete Modifier: public(1014)", "Delete PrimitiveType: void(1015)", "Delete SimpleName: write(1016)", "Delete Modifier: final(1017)", "Delete PrimitiveType: byte(1018)", "Delete Dimension(1019)", "Delete ArrayType: byte[](1020)", "Delete SimpleName: buffer(1021)", "Delete SingleVariableDeclaration(1022)", "Delete Modifier: final(1023)", "Delete PrimitiveType: int(1024)", "Delete SimpleName: offset(1025)", "Delete SingleVariableDeclaration(1026)", "Delete Modifier: final(1027)", "Delete PrimitiveType: int(1028)", "Delete SimpleName: length(1029)", "Delete SingleVariableDeclaration(1030)", "Delete SimpleName: IOException(1031)", "Delete SimpleType: IOException(1032)", "Delete SimpleName: m_entry(1033)", "Delete SimpleName: getMethod(1034)", "Delete MethodInvocation(1035)", "Delete SimpleName: DEFLATED(1036)", "Delete InfixExpression: ==(1037)", "Delete SimpleName: write(1038)", "Delete SimpleName: buffer(1039)", "Delete SimpleName: offset(1040)", "Delete SimpleName: length(1041)", "Delete SuperMethodInvocation(1042)", "Delete ExpressionStatement(1043)", "Delete Block(1044)", "Delete SimpleName: out(1045)", "Delete SimpleName: write(1046)", "Delete SimpleName: buffer(1047)", "Delete SimpleName: offset(1048)", "Delete SimpleName: length(1049)", "Delete MethodInvocation(1050)", "Delete ExpressionStatement(1051)", "Delete SimpleName: m_written(1052)", "Delete SimpleName: length(1053)", "Delete Assignment: +=(1054)", "Delete ExpressionStatement(1055)", "Delete Block(1056)", "Delete IfStatement(1057)", "Delete SimpleName: m_crc(1058)", "Delete SimpleName: update(1059)", "Delete SimpleName: buffer(1060)", "Delete SimpleName: offset(1061)", "Delete SimpleName: length(1062)", "Delete MethodInvocation(1063)", "Delete ExpressionStatement(1064)", "Delete Block(1065)", "Delete MethodDeclaration(1066)", "Delete TextElement: Retrieve the bytes for the given String in the encoding set for this(1067)", "Delete TextElement: Stream.(1068)", "Delete TagElement(1069)", "Delete SimpleName: name(1070)", "Delete TextElement:  the name to decode(1071)", "Delete TagElement: @param(1072)", "Delete TextElement:  the bytes for string(1073)", "Delete TagElement: @return(1074)", "Delete SimpleName: ZipException(1075)", "Delete TextElement:  if fail to retrieve bytes for specified string(1076)", "Delete TagElement: @exception(1077)", "Delete TextElement:  1.3(1078)", "Delete TagElement: @since(1079)", "Delete Javadoc(1080)", "Delete Modifier: protected(1081)", "Delete PrimitiveType: byte(1082)", "Delete Dimension(1083)", "Delete ArrayType: byte[](1084)", "Delete SimpleName: getBytes(1085)", "Delete SimpleName: String(1086)", "Delete SimpleType: String(1087)", "Delete SimpleName: name(1088)", "Delete SingleVariableDeclaration(1089)", "Delete SimpleName: ZipException(1090)", "Delete SimpleType: ZipException(1091)", "Delete SimpleName: m_encoding(1092)", "Delete NullLiteral(1093)", "Delete InfixExpression: ==(1094)", "Delete SimpleName: name(1095)", "Delete SimpleName: getBytes(1096)", "Delete MethodInvocation(1097)", "Delete ReturnStatement(1098)", "Delete Block(1099)", "Delete SimpleName: name(1100)", "Delete SimpleName: getBytes(1101)", "Delete SimpleName: m_encoding(1102)", "Delete MethodInvocation(1103)", "Delete ReturnStatement(1104)", "Delete Block(1105)", "Delete SimpleName: UnsupportedEncodingException(1106)", "Delete SimpleType: UnsupportedEncodingException(1107)", "Delete SimpleName: uee(1108)", "Delete SingleVariableDeclaration(1109)", "Delete SimpleName: ZipException(1110)", "Delete SimpleType: ZipException(1111)", "Delete SimpleName: uee(1112)", "Delete SimpleName: getMessage(1113)", "Delete MethodInvocation(1114)", "Delete ClassInstanceCreation(1115)", "Delete ThrowStatement(1116)", "Delete Block(1117)", "Delete CatchClause(1118)", "Delete TryStatement(1119)", "Delete Block(1120)", "Delete IfStatement(1121)", "Delete Block(1122)", "Delete MethodDeclaration(1123)", "Delete TextElement: Writes the &quot;End of central dir record&quot;(1124)", "Delete TagElement(1125)", "Delete SimpleName: IOException(1126)", "Delete TextElement:  when an IO erro causes operation to fail(1127)", "Delete TagElement: @exception(1128)", "Delete TextElement:  1.1(1129)", "Delete TagElement: @since(1130)", "Delete Javadoc(1131)", "Delete Modifier: protected(1132)", "Delete PrimitiveType: void(1133)", "Delete SimpleName: writeCentralDirectoryEnd(1134)", "Delete SimpleName: IOException(1135)", "Delete SimpleType: IOException(1136)", "Delete SimpleName: out(1137)", "Delete SimpleName: write(1138)", "Delete SimpleName: EOCD_SIG(1139)", "Delete SimpleName: getBytes(1140)", "Delete MethodInvocation(1141)", "Delete MethodInvocation(1142)", "Delete ExpressionStatement(1143)", "Delete SimpleName: out(1144)", "Delete SimpleName: write(1145)", "Delete SimpleName: ZERO(1146)", "Delete MethodInvocation(1147)", "Delete ExpressionStatement(1148)", "Delete SimpleName: out(1149)", "Delete SimpleName: write(1150)", "Delete SimpleName: ZERO(1151)", "Delete MethodInvocation(1152)", "Delete ExpressionStatement(1153)", "Delete PrimitiveType: byte(1154)", "Delete Dimension(1155)", "Delete ArrayType: byte[](1156)", "Delete SimpleName: num(1157)", "Delete SimpleName: ZipShort(1158)", "Delete SimpleType: ZipShort(1159)", "Delete SimpleName: m_entries(1160)", "Delete SimpleName: size(1161)", "Delete MethodInvocation(1162)", "Delete ClassInstanceCreation(1163)", "Delete ParenthesizedExpression(1164)", "Delete SimpleName: getBytes(1165)", "Delete MethodInvocation(1166)", "Delete VariableDeclarationFragment(1167)", "Delete VariableDeclarationStatement(1168)", "Delete SimpleName: out(1169)", "Delete SimpleName: write(1170)", "Delete SimpleName: num(1171)", "Delete MethodInvocation(1172)", "Delete ExpressionStatement(1173)", "Delete SimpleName: out(1174)", "Delete SimpleName: write(1175)", "Delete SimpleName: num(1176)", "Delete MethodInvocation(1177)", "Delete ExpressionStatement(1178)", "Delete SimpleName: out(1179)", "Delete SimpleName: write(1180)", "Delete SimpleName: m_cdLength(1181)", "Delete SimpleName: getBytes(1182)", "Delete MethodInvocation(1183)", "Delete MethodInvocation(1184)", "Delete ExpressionStatement(1185)", "Delete SimpleName: out(1186)", "Delete SimpleName: write(1187)", "Delete SimpleName: m_cdOffset(1188)", "Delete SimpleName: getBytes(1189)", "Delete MethodInvocation(1190)", "Delete MethodInvocation(1191)", "Delete ExpressionStatement(1192)", "Delete PrimitiveType: byte(1193)", "Delete Dimension(1194)", "Delete ArrayType: byte[](1195)", "Delete SimpleName: data(1196)", "Delete SimpleName: getBytes(1197)", "Delete SimpleName: m_comment(1198)", "Delete MethodInvocation(1199)", "Delete VariableDeclarationFragment(1200)", "Delete VariableDeclarationStatement(1201)", "Delete SimpleName: out(1202)", "Delete SimpleName: write(1203)", "Delete SimpleName: ZipShort(1204)", "Delete SimpleType: ZipShort(1205)", "Delete QualifiedName: data.length(1206)", "Delete ClassInstanceCreation(1207)", "Delete ParenthesizedExpression(1208)", "Delete SimpleName: getBytes(1209)", "Delete MethodInvocation(1210)", "Delete MethodInvocation(1211)", "Delete ExpressionStatement(1212)", "Delete SimpleName: out(1213)", "Delete SimpleName: write(1214)", "Delete SimpleName: data(1215)", "Delete MethodInvocation(1216)", "Delete ExpressionStatement(1217)", "Delete Block(1218)", "Delete MethodDeclaration(1219)", "Delete TextElement: Writes the central file header entry(1220)", "Delete TagElement(1221)", "Delete SimpleName: entry(1222)", "Delete TextElement:  the zip entry(1223)", "Delete TagElement: @param(1224)", "Delete SimpleName: IOException(1225)", "Delete TextElement:  when an IO error causes operation to fail(1226)", "Delete TagElement: @throws(1227)", "Delete TextElement:  1.1(1228)", "Delete TagElement: @since(1229)", "Delete Javadoc(1230)", "Delete Modifier: protected(1231)", "Delete PrimitiveType: void(1232)", "Delete SimpleName: writeCentralFileHeader(1233)", "Delete Modifier: final(1234)", "Delete SimpleName: ZipEntry(1235)", "Delete SimpleType: ZipEntry(1236)", "Delete SimpleName: entry(1237)", "Delete SingleVariableDeclaration(1238)", "Delete SimpleName: IOException(1239)", "Delete SimpleType: IOException(1240)", "Delete SimpleName: out(1241)", "Delete SimpleName: write(1242)", "Delete SimpleName: CFH_SIG(1243)", "Delete SimpleName: getBytes(1244)", "Delete MethodInvocation(1245)", "Delete MethodInvocation(1246)", "Delete ExpressionStatement(1247)", "Delete SimpleName: m_written(1248)", "Delete NumberLiteral: 4(1249)", "Delete Assignment: +=(1250)", "Delete ExpressionStatement(1251)", "Delete SimpleName: out(1252)", "Delete SimpleName: write(1253)", "Delete SimpleName: ZipShort(1254)", "Delete SimpleType: ZipShort(1255)", "Delete NumberLiteral: 20(1256)", "Delete ClassInstanceCreation(1257)", "Delete ParenthesizedExpression(1258)", "Delete SimpleName: getBytes(1259)", "Delete MethodInvocation(1260)", "Delete MethodInvocation(1261)", "Delete ExpressionStatement(1262)", "Delete SimpleName: m_written(1263)", "Delete NumberLiteral: 2(1264)", "Delete Assignment: +=(1265)", "Delete ExpressionStatement(1266)", "Delete SimpleName: entry(1267)", "Delete SimpleName: getMethod(1268)", "Delete MethodInvocation(1269)", "Delete SimpleName: DEFLATED(1270)", "Delete InfixExpression: ==(1271)", "Delete SimpleName: out(1272)", "Delete SimpleName: write(1273)", "Delete SimpleName: ZipShort(1274)", "Delete SimpleType: ZipShort(1275)", "Delete NumberLiteral: 20(1276)", "Delete ClassInstanceCreation(1277)", "Delete ParenthesizedExpression(1278)", "Delete SimpleName: getBytes(1279)", "Delete MethodInvocation(1280)", "Delete MethodInvocation(1281)", "Delete ExpressionStatement(1282)", "Delete SimpleName: out(1283)", "Delete SimpleName: write(1284)", "Delete SimpleName: ZipShort(1285)", "Delete SimpleType: ZipShort(1286)", "Delete NumberLiteral: 8(1287)", "Delete ClassInstanceCreation(1288)", "Delete ParenthesizedExpression(1289)", "Delete SimpleName: getBytes(1290)", "Delete MethodInvocation(1291)", "Delete MethodInvocation(1292)", "Delete ExpressionStatement(1293)", "Delete Block(1294)", "Delete SimpleName: out(1295)", "Delete SimpleName: write(1296)", "Delete SimpleName: ZipShort(1297)", "Delete SimpleType: ZipShort(1298)", "Delete NumberLiteral: 10(1299)", "Delete ClassInstanceCreation(1300)", "Delete ParenthesizedExpression(1301)", "Delete SimpleName: getBytes(1302)", "Delete MethodInvocation(1303)", "Delete MethodInvocation(1304)", "Delete ExpressionStatement(1305)", "Delete SimpleName: out(1306)", "Delete SimpleName: write(1307)", "Delete SimpleName: ZERO(1308)", "Delete MethodInvocation(1309)", "Delete ExpressionStatement(1310)", "Delete Block(1311)", "Delete IfStatement(1312)", "Delete SimpleName: m_written(1313)", "Delete NumberLiteral: 4(1314)", "Delete Assignment: +=(1315)", "Delete ExpressionStatement(1316)", "Delete SimpleName: out(1317)", "Delete SimpleName: write(1318)", "Delete SimpleName: ZipShort(1319)", "Delete SimpleType: ZipShort(1320)", "Delete SimpleName: entry(1321)", "Delete SimpleName: getMethod(1322)", "Delete MethodInvocation(1323)", "Delete ClassInstanceCreation(1324)", "Delete ParenthesizedExpression(1325)", "Delete SimpleName: getBytes(1326)", "Delete MethodInvocation(1327)", "Delete MethodInvocation(1328)", "Delete ExpressionStatement(1329)", "Delete SimpleName: m_written(1330)", "Delete NumberLiteral: 2(1331)", "Delete Assignment: +=(1332)", "Delete ExpressionStatement(1333)", "Delete SimpleName: out(1334)", "Delete SimpleName: write(1335)", "Delete SimpleName: toDosTime(1336)", "Delete SimpleName: Date(1337)", "Delete SimpleType: Date(1338)", "Delete SimpleName: entry(1339)", "Delete SimpleName: getTime(1340)", "Delete MethodInvocation(1341)", "Delete ClassInstanceCreation(1342)", "Delete MethodInvocation(1343)", "Delete SimpleName: getBytes(1344)", "Delete MethodInvocation(1345)", "Delete MethodInvocation(1346)", "Delete ExpressionStatement(1347)", "Delete SimpleName: m_written(1348)", "Delete NumberLiteral: 4(1349)", "Delete Assignment: +=(1350)", "Delete ExpressionStatement(1351)", "Delete SimpleName: out(1352)", "Delete SimpleName: write(1353)", "Delete SimpleName: ZipLong(1354)", "Delete SimpleType: ZipLong(1355)", "Delete SimpleName: entry(1356)", "Delete SimpleName: getCrc(1357)", "Delete MethodInvocation(1358)", "Delete ClassInstanceCreation(1359)", "Delete ParenthesizedExpression(1360)", "Delete SimpleName: getBytes(1361)", "Delete MethodInvocation(1362)", "Delete MethodInvocation(1363)", "Delete ExpressionStatement(1364)", "Delete SimpleName: out(1365)", "Delete SimpleName: write(1366)", "Delete SimpleName: ZipLong(1367)", "Delete SimpleType: ZipLong(1368)", "Delete SimpleName: entry(1369)", "Delete SimpleName: getCompressedSize(1370)", "Delete MethodInvocation(1371)", "Delete ClassInstanceCreation(1372)", "Delete ParenthesizedExpression(1373)", "Delete SimpleName: getBytes(1374)", "Delete MethodInvocation(1375)", "Delete MethodInvocation(1376)", "Delete ExpressionStatement(1377)", "Delete SimpleName: out(1378)", "Delete SimpleName: write(1379)", "Delete SimpleName: ZipLong(1380)", "Delete SimpleType: ZipLong(1381)", "Delete SimpleName: entry(1382)", "Delete SimpleName: getSize(1383)", "Delete MethodInvocation(1384)", "Delete ClassInstanceCreation(1385)", "Delete ParenthesizedExpression(1386)", "Delete SimpleName: getBytes(1387)", "Delete MethodInvocation(1388)", "Delete MethodInvocation(1389)", "Delete ExpressionStatement(1390)", "Delete SimpleName: m_written(1391)", "Delete NumberLiteral: 12(1392)", "Delete Assignment: +=(1393)", "Delete ExpressionStatement(1394)", "Delete PrimitiveType: byte(1395)", "Delete Dimension(1396)", "Delete ArrayType: byte[](1397)", "Delete SimpleName: name(1398)", "Delete SimpleName: getBytes(1399)", "Delete SimpleName: entry(1400)", "Delete SimpleName: getName(1401)", "Delete MethodInvocation(1402)", "Delete MethodInvocation(1403)", "Delete VariableDeclarationFragment(1404)", "Delete VariableDeclarationStatement(1405)", "Delete SimpleName: out(1406)", "Delete SimpleName: write(1407)", "Delete SimpleName: ZipShort(1408)", "Delete SimpleType: ZipShort(1409)", "Delete QualifiedName: name.length(1410)", "Delete ClassInstanceCreation(1411)", "Delete ParenthesizedExpression(1412)", "Delete SimpleName: getBytes(1413)", "Delete MethodInvocation(1414)", "Delete MethodInvocation(1415)", "Delete ExpressionStatement(1416)", "Delete SimpleName: m_written(1417)", "Delete NumberLiteral: 2(1418)", "Delete Assignment: +=(1419)", "Delete ExpressionStatement(1420)", "Delete PrimitiveType: byte(1421)", "Delete Dimension(1422)", "Delete ArrayType: byte[](1423)", "Delete SimpleName: extra(1424)", "Delete SimpleName: entry(1425)", "Delete SimpleName: getCentralDirectoryExtra(1426)", "Delete MethodInvocation(1427)", "Delete VariableDeclarationFragment(1428)", "Delete VariableDeclarationStatement(1429)", "Delete SimpleName: out(1430)", "Delete SimpleName: write(1431)", "Delete SimpleName: ZipShort(1432)", "Delete SimpleType: ZipShort(1433)", "Delete QualifiedName: extra.length(1434)", "Delete ClassInstanceCreation(1435)", "Delete ParenthesizedExpression(1436)", "Delete SimpleName: getBytes(1437)", "Delete MethodInvocation(1438)", "Delete MethodInvocation(1439)", "Delete ExpressionStatement(1440)", "Delete SimpleName: m_written(1441)", "Delete NumberLiteral: 2(1442)", "Delete Assignment: +=(1443)", "Delete ExpressionStatement(1444)", "Delete SimpleName: String(1445)", "Delete SimpleType: String(1446)", "Delete SimpleName: comm(1447)", "Delete SimpleName: entry(1448)", "Delete SimpleName: getComment(1449)", "Delete MethodInvocation(1450)", "Delete VariableDeclarationFragment(1451)", "Delete VariableDeclarationStatement(1452)", "Delete SimpleName: comm(1453)", "Delete NullLiteral(1454)", "Delete InfixExpression: ==(1455)", "Delete SimpleName: comm(1456)", "Delete StringLiteral: \"\"(1457)", "Delete Assignment: =(1458)", "Delete ExpressionStatement(1459)", "Delete Block(1460)", "Delete IfStatement(1461)", "Delete PrimitiveType: byte(1462)", "Delete Dimension(1463)", "Delete ArrayType: byte[](1464)", "Delete SimpleName: comment(1465)", "Delete SimpleName: getBytes(1466)", "Delete SimpleName: comm(1467)", "Delete MethodInvocation(1468)", "Delete VariableDeclarationFragment(1469)", "Delete VariableDeclarationStatement(1470)", "Delete SimpleName: out(1471)", "Delete SimpleName: write(1472)", "Delete SimpleName: ZipShort(1473)", "Delete SimpleType: ZipShort(1474)", "Delete QualifiedName: comment.length(1475)", "Delete ClassInstanceCreation(1476)", "Delete ParenthesizedExpression(1477)", "Delete SimpleName: getBytes(1478)", "Delete MethodInvocation(1479)", "Delete MethodInvocation(1480)", "Delete ExpressionStatement(1481)", "Delete SimpleName: m_written(1482)", "Delete NumberLiteral: 2(1483)", "Delete Assignment: +=(1484)", "Delete ExpressionStatement(1485)", "Delete SimpleName: out(1486)", "Delete SimpleName: write(1487)", "Delete SimpleName: ZERO(1488)", "Delete MethodInvocation(1489)", "Delete ExpressionStatement(1490)", "Delete SimpleName: m_written(1491)", "Delete NumberLiteral: 2(1492)", "Delete Assignment: +=(1493)", "Delete ExpressionStatement(1494)", "Delete SimpleName: out(1495)", "Delete SimpleName: write(1496)", "Delete SimpleName: ZipShort(1497)", "Delete SimpleType: ZipShort(1498)", "Delete SimpleName: entry(1499)", "Delete SimpleName: getInternalAttributes(1500)", "Delete MethodInvocation(1501)", "Delete ClassInstanceCreation(1502)", "Delete ParenthesizedExpression(1503)", "Delete SimpleName: getBytes(1504)", "Delete MethodInvocation(1505)", "Delete MethodInvocation(1506)", "Delete ExpressionStatement(1507)", "Delete SimpleName: m_written(1508)", "Delete NumberLiteral: 2(1509)", "Delete Assignment: +=(1510)", "Delete ExpressionStatement(1511)", "Delete SimpleName: out(1512)", "Delete SimpleName: write(1513)", "Delete SimpleName: ZipLong(1514)", "Delete SimpleType: ZipLong(1515)", "Delete SimpleName: entry(1516)", "Delete SimpleName: getExternalAttributes(1517)", "Delete MethodInvocation(1518)", "Delete ClassInstanceCreation(1519)", "Delete ParenthesizedExpression(1520)", "Delete SimpleName: getBytes(1521)", "Delete MethodInvocation(1522)", "Delete MethodInvocation(1523)", "Delete ExpressionStatement(1524)", "Delete SimpleName: m_written(1525)", "Delete NumberLiteral: 4(1526)", "Delete Assignment: +=(1527)", "Delete ExpressionStatement(1528)", "Delete SimpleName: out(1529)", "Delete SimpleName: write(1530)", "Delete SimpleName: ZipLong(1531)", "Delete SimpleType: ZipLong(1532)", "Delete SimpleName: m_offsets(1533)", "Delete SimpleName: get(1534)", "Delete SimpleName: entry(1535)", "Delete MethodInvocation(1536)", "Delete CastExpression(1537)", "Delete ParenthesizedExpression(1538)", "Delete SimpleName: getBytes(1539)", "Delete MethodInvocation(1540)", "Delete MethodInvocation(1541)", "Delete ExpressionStatement(1542)", "Delete SimpleName: m_written(1543)", "Delete NumberLiteral: 4(1544)", "Delete Assignment: +=(1545)", "Delete ExpressionStatement(1546)", "Delete SimpleName: out(1547)", "Delete SimpleName: write(1548)", "Delete SimpleName: name(1549)", "Delete MethodInvocation(1550)", "Delete ExpressionStatement(1551)", "Delete SimpleName: m_written(1552)", "Delete QualifiedName: name.length(1553)", "Delete Assignment: +=(1554)", "Delete ExpressionStatement(1555)", "Delete SimpleName: out(1556)", "Delete SimpleName: write(1557)", "Delete SimpleName: extra(1558)", "Delete MethodInvocation(1559)", "Delete ExpressionStatement(1560)", "Delete SimpleName: m_written(1561)", "Delete QualifiedName: extra.length(1562)", "Delete Assignment: +=(1563)", "Delete ExpressionStatement(1564)", "Delete SimpleName: out(1565)", "Delete SimpleName: write(1566)", "Delete SimpleName: comment(1567)", "Delete MethodInvocation(1568)", "Delete ExpressionStatement(1569)", "Delete SimpleName: m_written(1570)", "Delete QualifiedName: comment.length(1571)", "Delete Assignment: +=(1572)", "Delete ExpressionStatement(1573)", "Delete Block(1574)", "Delete MethodDeclaration(1575)", "Delete TextElement: Writes the data descriptor entry(1576)", "Delete TagElement(1577)", "Delete SimpleName: ze(1578)", "Delete TextElement:  Description of Parameter(1579)", "Delete TagElement: @param(1580)", "Delete SimpleName: IOException(1581)", "Delete TextElement:  if an IO failure causes operation to fail(1582)", "Delete TagElement: @throws(1583)", "Delete TextElement:  1.1(1584)", "Delete TagElement: @since(1585)", "Delete Javadoc(1586)", "Delete Modifier: protected(1587)", "Delete PrimitiveType: void(1588)", "Delete SimpleName: writeDataDescriptor(1589)", "Delete SimpleName: ZipEntry(1590)", "Delete SimpleType: ZipEntry(1591)", "Delete SimpleName: ze(1592)", "Delete SingleVariableDeclaration(1593)", "Delete SimpleName: IOException(1594)", "Delete SimpleType: IOException(1595)", "Delete SimpleName: ze(1596)", "Delete SimpleName: getMethod(1597)", "Delete MethodInvocation(1598)", "Delete SimpleName: DEFLATED(1599)", "Delete InfixExpression: !=(1600)", "Delete ReturnStatement(1601)", "Delete Block(1602)", "Delete IfStatement(1603)", "Delete SimpleName: out(1604)", "Delete SimpleName: write(1605)", "Delete SimpleName: DD_SIG(1606)", "Delete SimpleName: getBytes(1607)", "Delete MethodInvocation(1608)", "Delete MethodInvocation(1609)", "Delete ExpressionStatement(1610)", "Delete SimpleName: out(1611)", "Delete SimpleName: write(1612)", "Delete SimpleName: ZipLong(1613)", "Delete SimpleType: ZipLong(1614)", "Delete SimpleName: m_entry(1615)", "Delete SimpleName: getCrc(1616)", "Delete MethodInvocation(1617)", "Delete ClassInstanceCreation(1618)", "Delete ParenthesizedExpression(1619)", "Delete SimpleName: getBytes(1620)", "Delete MethodInvocation(1621)", "Delete MethodInvocation(1622)", "Delete ExpressionStatement(1623)", "Delete SimpleName: out(1624)", "Delete SimpleName: write(1625)", "Delete SimpleName: ZipLong(1626)", "Delete SimpleType: ZipLong(1627)", "Delete SimpleName: m_entry(1628)", "Delete SimpleName: getCompressedSize(1629)", "Delete MethodInvocation(1630)", "Delete ClassInstanceCreation(1631)", "Delete ParenthesizedExpression(1632)", "Delete SimpleName: getBytes(1633)", "Delete MethodInvocation(1634)", "Delete MethodInvocation(1635)", "Delete ExpressionStatement(1636)", "Delete SimpleName: out(1637)", "Delete SimpleName: write(1638)", "Delete SimpleName: ZipLong(1639)", "Delete SimpleType: ZipLong(1640)", "Delete SimpleName: m_entry(1641)", "Delete SimpleName: getSize(1642)", "Delete MethodInvocation(1643)", "Delete ClassInstanceCreation(1644)", "Delete ParenthesizedExpression(1645)", "Delete SimpleName: getBytes(1646)", "Delete MethodInvocation(1647)", "Delete MethodInvocation(1648)", "Delete ExpressionStatement(1649)", "Delete SimpleName: m_written(1650)", "Delete NumberLiteral: 16(1651)", "Delete Assignment: +=(1652)", "Delete ExpressionStatement(1653)", "Delete Block(1654)", "Delete MethodDeclaration(1655)", "Delete TextElement: Writes the local file header entry(1656)", "Delete TagElement(1657)", "Delete SimpleName: entry(1658)", "Delete TextElement:  the zip entry(1659)", "Delete TagElement: @param(1660)", "Delete SimpleName: IOException(1661)", "Delete TextElement:  when an IO error causes operation to fail(1662)", "Delete TagElement: @exception(1663)", "Delete TextElement:  1.1(1664)", "Delete TagElement: @since(1665)", "Delete Javadoc(1666)", "Delete Modifier: protected(1667)", "Delete PrimitiveType: void(1668)", "Delete SimpleName: writeLocalFileHeader(1669)", "Delete Modifier: final(1670)", "Delete SimpleName: ZipEntry(1671)", "Delete SimpleType: ZipEntry(1672)", "Delete SimpleName: entry(1673)", "Delete SingleVariableDeclaration(1674)", "Delete SimpleName: IOException(1675)", "Delete SimpleType: IOException(1676)", "Delete SimpleName: m_offsets(1677)", "Delete SimpleName: put(1678)", "Delete SimpleName: entry(1679)", "Delete SimpleName: ZipLong(1680)", "Delete SimpleType: ZipLong(1681)", "Delete SimpleName: m_written(1682)", "Delete ClassInstanceCreation(1683)", "Delete MethodInvocation(1684)", "Delete ExpressionStatement(1685)", "Delete SimpleName: out(1686)", "Delete SimpleName: write(1687)", "Delete SimpleName: LFH_SIG(1688)", "Delete SimpleName: getBytes(1689)", "Delete MethodInvocation(1690)", "Delete MethodInvocation(1691)", "Delete ExpressionStatement(1692)", "Delete SimpleName: m_written(1693)", "Delete NumberLiteral: 4(1694)", "Delete Assignment: +=(1695)", "Delete ExpressionStatement(1696)", "Delete SimpleName: entry(1697)", "Delete SimpleName: getMethod(1698)", "Delete MethodInvocation(1699)", "Delete SimpleName: DEFLATED(1700)", "Delete InfixExpression: ==(1701)", "Delete SimpleName: out(1702)", "Delete SimpleName: write(1703)", "Delete SimpleName: ZipShort(1704)", "Delete SimpleType: ZipShort(1705)", "Delete NumberLiteral: 20(1706)", "Delete ClassInstanceCreation(1707)", "Delete ParenthesizedExpression(1708)", "Delete SimpleName: getBytes(1709)", "Delete MethodInvocation(1710)", "Delete MethodInvocation(1711)", "Delete ExpressionStatement(1712)", "Delete SimpleName: out(1713)", "Delete SimpleName: write(1714)", "Delete SimpleName: ZipShort(1715)", "Delete SimpleType: ZipShort(1716)", "Delete NumberLiteral: 8(1717)", "Delete ClassInstanceCreation(1718)", "Delete ParenthesizedExpression(1719)", "Delete SimpleName: getBytes(1720)", "Delete MethodInvocation(1721)", "Delete MethodInvocation(1722)", "Delete ExpressionStatement(1723)", "Delete Block(1724)", "Delete SimpleName: out(1725)", "Delete SimpleName: write(1726)", "Delete SimpleName: ZipShort(1727)", "Delete SimpleType: ZipShort(1728)", "Delete NumberLiteral: 10(1729)", "Delete ClassInstanceCreation(1730)", "Delete ParenthesizedExpression(1731)", "Delete SimpleName: getBytes(1732)", "Delete MethodInvocation(1733)", "Delete MethodInvocation(1734)", "Delete ExpressionStatement(1735)", "Delete SimpleName: out(1736)", "Delete SimpleName: write(1737)", "Delete SimpleName: ZERO(1738)", "Delete MethodInvocation(1739)", "Delete ExpressionStatement(1740)", "Delete Block(1741)", "Delete IfStatement(1742)", "Delete SimpleName: m_written(1743)", "Delete NumberLiteral: 4(1744)", "Delete Assignment: +=(1745)", "Delete ExpressionStatement(1746)", "Delete SimpleName: out(1747)", "Delete SimpleName: write(1748)", "Delete SimpleName: ZipShort(1749)", "Delete SimpleType: ZipShort(1750)", "Delete SimpleName: entry(1751)", "Delete SimpleName: getMethod(1752)", "Delete MethodInvocation(1753)", "Delete ClassInstanceCreation(1754)", "Delete ParenthesizedExpression(1755)", "Delete SimpleName: getBytes(1756)", "Delete MethodInvocation(1757)", "Delete MethodInvocation(1758)", "Delete ExpressionStatement(1759)", "Delete SimpleName: m_written(1760)", "Delete NumberLiteral: 2(1761)", "Delete Assignment: +=(1762)", "Delete ExpressionStatement(1763)", "Delete SimpleName: out(1764)", "Delete SimpleName: write(1765)", "Delete SimpleName: toDosTime(1766)", "Delete SimpleName: Date(1767)", "Delete SimpleType: Date(1768)", "Delete SimpleName: entry(1769)", "Delete SimpleName: getTime(1770)", "Delete MethodInvocation(1771)", "Delete ClassInstanceCreation(1772)", "Delete MethodInvocation(1773)", "Delete SimpleName: getBytes(1774)", "Delete MethodInvocation(1775)", "Delete MethodInvocation(1776)", "Delete ExpressionStatement(1777)", "Delete SimpleName: m_written(1778)", "Delete NumberLiteral: 4(1779)", "Delete Assignment: +=(1780)", "Delete ExpressionStatement(1781)", "Delete SimpleName: entry(1782)", "Delete SimpleName: getMethod(1783)", "Delete MethodInvocation(1784)", "Delete SimpleName: DEFLATED(1785)", "Delete InfixExpression: ==(1786)", "Delete SimpleName: out(1787)", "Delete SimpleName: write(1788)", "Delete SimpleName: LZERO(1789)", "Delete MethodInvocation(1790)", "Delete ExpressionStatement(1791)", "Delete SimpleName: out(1792)", "Delete SimpleName: write(1793)", "Delete SimpleName: LZERO(1794)", "Delete MethodInvocation(1795)", "Delete ExpressionStatement(1796)", "Delete SimpleName: out(1797)", "Delete SimpleName: write(1798)", "Delete SimpleName: LZERO(1799)", "Delete MethodInvocation(1800)", "Delete ExpressionStatement(1801)", "Delete Block(1802)", "Delete SimpleName: out(1803)", "Delete SimpleName: write(1804)", "Delete SimpleName: ZipLong(1805)", "Delete SimpleType: ZipLong(1806)", "Delete SimpleName: entry(1807)", "Delete SimpleName: getCrc(1808)", "Delete MethodInvocation(1809)", "Delete ClassInstanceCreation(1810)", "Delete ParenthesizedExpression(1811)", "Delete SimpleName: getBytes(1812)", "Delete MethodInvocation(1813)", "Delete MethodInvocation(1814)", "Delete ExpressionStatement(1815)", "Delete SimpleName: out(1816)", "Delete SimpleName: write(1817)", "Delete SimpleName: ZipLong(1818)", "Delete SimpleType: ZipLong(1819)", "Delete SimpleName: entry(1820)", "Delete SimpleName: getSize(1821)", "Delete MethodInvocation(1822)", "Delete ClassInstanceCreation(1823)", "Delete ParenthesizedExpression(1824)", "Delete SimpleName: getBytes(1825)", "Delete MethodInvocation(1826)", "Delete MethodInvocation(1827)", "Delete ExpressionStatement(1828)", "Delete SimpleName: out(1829)", "Delete SimpleName: write(1830)", "Delete SimpleName: ZipLong(1831)", "Delete SimpleType: ZipLong(1832)", "Delete SimpleName: entry(1833)", "Delete SimpleName: getSize(1834)", "Delete MethodInvocation(1835)", "Delete ClassInstanceCreation(1836)", "Delete ParenthesizedExpression(1837)", "Delete SimpleName: getBytes(1838)", "Delete MethodInvocation(1839)", "Delete MethodInvocation(1840)", "Delete ExpressionStatement(1841)", "Delete Block(1842)", "Delete IfStatement(1843)", "Delete SimpleName: m_written(1844)", "Delete NumberLiteral: 12(1845)", "Delete Assignment: +=(1846)", "Delete ExpressionStatement(1847)", "Delete PrimitiveType: byte(1848)", "Delete Dimension(1849)", "Delete ArrayType: byte[](1850)", "Delete SimpleName: name(1851)", "Delete SimpleName: getBytes(1852)", "Delete SimpleName: entry(1853)", "Delete SimpleName: getName(1854)", "Delete MethodInvocation(1855)", "Delete MethodInvocation(1856)", "Delete VariableDeclarationFragment(1857)", "Delete VariableDeclarationStatement(1858)", "Delete SimpleName: out(1859)", "Delete SimpleName: write(1860)", "Delete SimpleName: ZipShort(1861)", "Delete SimpleType: ZipShort(1862)", "Delete QualifiedName: name.length(1863)", "Delete ClassInstanceCreation(1864)", "Delete ParenthesizedExpression(1865)", "Delete SimpleName: getBytes(1866)", "Delete MethodInvocation(1867)", "Delete MethodInvocation(1868)", "Delete ExpressionStatement(1869)", "Delete SimpleName: m_written(1870)", "Delete NumberLiteral: 2(1871)", "Delete Assignment: +=(1872)", "Delete ExpressionStatement(1873)", "Delete PrimitiveType: byte(1874)", "Delete Dimension(1875)", "Delete ArrayType: byte[](1876)", "Delete SimpleName: extra(1877)", "Delete SimpleName: entry(1878)", "Delete SimpleName: getLocalFileDataExtra(1879)", "Delete MethodInvocation(1880)", "Delete VariableDeclarationFragment(1881)", "Delete VariableDeclarationStatement(1882)", "Delete SimpleName: out(1883)", "Delete SimpleName: write(1884)", "Delete SimpleName: ZipShort(1885)", "Delete SimpleType: ZipShort(1886)", "Delete QualifiedName: extra.length(1887)", "Delete ClassInstanceCreation(1888)", "Delete ParenthesizedExpression(1889)", "Delete SimpleName: getBytes(1890)", "Delete MethodInvocation(1891)", "Delete MethodInvocation(1892)", "Delete ExpressionStatement(1893)", "Delete SimpleName: m_written(1894)", "Delete NumberLiteral: 2(1895)", "Delete Assignment: +=(1896)", "Delete ExpressionStatement(1897)", "Delete SimpleName: out(1898)", "Delete SimpleName: write(1899)", "Delete SimpleName: name(1900)", "Delete MethodInvocation(1901)", "Delete ExpressionStatement(1902)", "Delete SimpleName: m_written(1903)", "Delete QualifiedName: name.length(1904)", "Delete Assignment: +=(1905)", "Delete ExpressionStatement(1906)", "Delete SimpleName: out(1907)", "Delete SimpleName: write(1908)", "Delete SimpleName: extra(1909)", "Delete MethodInvocation(1910)", "Delete ExpressionStatement(1911)", "Delete SimpleName: m_written(1912)", "Delete QualifiedName: extra.length(1913)", "Delete Assignment: +=(1914)", "Delete ExpressionStatement(1915)", "Delete SimpleName: m_dataStart(1916)", "Delete SimpleName: m_written(1917)", "Delete Assignment: =(1918)", "Delete ExpressionStatement(1919)", "Delete Block(1920)", "Delete MethodDeclaration(1921)", "Delete TypeDeclaration: class(1922)"]}}, {"ZipShort_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.io.compress.zip", "DEL PackageDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TagElement: @param", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL TextElement: Create instance from bytes.", "DEL TextElement: Utility class that represents a two byte integer with conversion rules for", "DEL TextElement:  Description of Parameter", "DEL TagElement: @return", "DEL ReturnStatement", "DEL SimpleName: m_value", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL PrimitiveType: byte", "DEL Block", "DEL TextElement: Create instance from a number.", "DEL NumberLiteral: 0xFF", "DEL ParenthesizedExpression", "DEL ParenthesizedExpression", "DEL SimpleName: offset", "DEL InfixExpression: &", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL InstanceofExpression", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL ParenthesizedExpression", "DEL TagElement: @since", "DEL NumberLiteral: 1", "DEL CastExpression", "DEL TagElement: @return", "DEL ArrayAccess", "DEL BooleanLiteral: false", "DEL ExpressionStatement", "DEL NumberLiteral: 0xFF00", "DEL TextElement: Override to make two instances with same value equal.", "DEL InfixExpression: >>", "DEL PrimitiveType: byte", "DEL ArrayType: byte[]", "DEL TagElement", "DEL NumberLiteral: 8", "DEL SingleVariableDeclaration", "DEL SimpleName: ZipShort", "DEL SingleVariableDeclaration", "DEL TagElement: @since", "DEL Modifier: public", "DEL SimpleName: offset", "DEL Modifier: final", "DEL SimpleName: m_value", "DEL SimpleName: result", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL Assignment: =", "DEL PrimitiveType: byte", "DEL TextElement: Create instance from the two bytes starting at offset.", "DEL TextElement:  1.1", "DEL Modifier: public", "DEL TextElement:  Description of Parameter", "DEL TextElement:  $Revision: 1.3 $", "DEL ExpressionStatement", "DEL NumberLiteral: 0xFF00", "DEL TextElement: Get value as two bytes in big endian byte order.", "DEL PrimitiveType: byte", "DEL SimpleName: result", "DEL PrefixExpression: !", "DEL SimpleName: hashCode", "DEL TextElement:  Description of Parameter", "DEL SimpleName: Object", "DEL SimpleName: bytes", "DEL ParenthesizedExpression", "DEL ArrayCreation", "DEL VariableDeclarationFragment", "DEL TextElement:  1.1", "DEL SimpleType: ZipShort", "DEL Javadoc", "DEL MethodDeclaration", "DEL CastExpression", "DEL MethodInvocation", "DEL SimpleName: bytes", "DEL TagElement", "DEL ArrayType: byte[]", "DEL PrimitiveType: byte", "DEL SimpleName: Cloneable", "DEL Modifier: private", "DEL IfStatement", "DEL SimpleName: m_value", "DEL InfixExpression: <<", "DEL SimpleName: offset", "DEL Modifier: public", "DEL Javadoc", "DEL SimpleType: ZipShort", "DEL Block", "DEL Modifier: public", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL TextElement:  The Value value", "DEL SimpleName: ZipShort", "DEL ParenthesizedExpression", "DEL VariableDeclarationFragment", "DEL TagElement: @since", "DEL SimpleName: getValue", "DEL SimpleName: bytes", "DEL InfixExpression: ==", "DEL TextElement:  1.1", "DEL Block", "DEL SimpleName: value", "DEL Modifier: public", "DEL NumberLiteral: 8", "DEL TextElement:  1.1", "DEL Dimension", "DEL InfixExpression: &", "DEL TypeDeclaration: class", "DEL PrimitiveType: boolean", "DEL Block", "DEL MethodDeclaration", "DEL NumberLiteral: 2", "DEL TextElement:  Description of Parameter", "DEL SimpleName: getValue", "DEL SimpleName: m_value", "DEL TagElement: @param", "DEL SimpleName: bytes", "DEL Dimension", "DEL PrimitiveType: int", "DEL NumberLiteral: 0xFF", "DEL SimpleName: ZipShort", "DEL SimpleName: m_value", "DEL TagElement: @return", "DEL TagElement: @since", "DEL SimpleName: m_value", "DEL SimpleName: m_value", "DEL SimpleName: m_value", "DEL TextElement: the big endian byte order of ZIP files.", "DEL SimpleName: ZipShort", "DEL SimpleType: Cloneable", "DEL Dimension", "DEL Assignment: =", "DEL FieldDeclaration", "DEL Modifier: public", "DEL SimpleName: bytes", "DEL TagElement: @param", "DEL SimpleName: o", "DEL TagElement", "DEL ReturnStatement", "DEL NumberLiteral: 1", "DEL Javadoc", "DEL NumberLiteral: 0", "DEL Modifier: public", "DEL ParenthesizedExpression", "DEL TextElement: Get value as Java int.", "DEL SimpleName: ZipShort", "DEL TagElement", "DEL TextElement:  1.1", "DEL ArrayAccess", "DEL PrimitiveType: int", "DEL Javadoc", "DEL Javadoc", "DEL Block", "DEL NullLiteral", "DEL SimpleName: getBytes", "DEL TextElement:  Description of Parameter", "DEL TagElement: @return", "DEL ThisExpression", "DEL SimpleName: bytes", "DEL ReturnStatement", "DEL InfixExpression: &", "DEL MethodDeclaration", "DEL InfixExpression: &", "DEL NumberLiteral: 0", "DEL Assignment: +=", "DEL ArrayType: byte[]", "DEL TextElement:  1.1", "DEL SimpleName: o", "DEL CastExpression", "DEL TagElement: @author", "DEL MethodDeclaration", "DEL Dimension", "DEL InfixExpression: ||", "DEL SimpleName: value", "DEL TagElement", "DEL ArrayType: byte[]", "DEL PrimitiveType: int", "DEL SimpleName: o", "DEL ArrayType: byte[]", "DEL PrimitiveType: byte", "DEL TagElement: @version", "DEL SimpleName: value", "DEL TextElement: Override to make two instances with same value equal.", "DEL ArrayAccess", "DEL TextElement:  The Bytes value", "DEL Block", "DEL TagElement: @since", "DEL InfixExpression: ==", "DEL ConstructorInvocation", "DEL TagElement", "DEL SimpleName: result", "DEL TagElement: @since", "DEL TextElement:  Description of the Returned Value", "DEL SimpleName: ZipShort", "DEL TagElement: @since", "DEL SimpleName: bytes", "DEL TextElement:  Description of the Returned Value", "DEL Assignment: =", "DEL Modifier: public", "DEL TagElement", "DEL Dimension", "DEL SimpleName: offset", "DEL SimpleName: equals", "DEL ArrayAccess", "DEL TagElement", "DEL SimpleName: o", "DEL TextElement:  <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>", "DEL TextElement:  1.1", "DEL InfixExpression: +", "DEL Block", "DEL FieldAccess", "DEL PrimitiveType: byte", "DEL Block", "DEL SimpleName: m_value", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL SimpleName: o", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: result"]}]}}, {"ZipShort_diff": {"operations": ["Delete QualifiedName: org.apache.commons.io.compress.zip(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Utility class that represents a two byte integer with conversion rules for(2)", "Delete TextElement: the big endian byte order of ZIP files.(3)", "Delete TagElement(4)", "Delete TextElement:  <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>(5)", "Delete TagElement: @author(6)", "Delete TextElement:  $Revision: 1.3 $(7)", "Delete TagElement: @version(8)", "Delete Javadoc(9)", "Delete Modifier: public(10)", "Delete Modifier: final(11)", "Delete SimpleName: ZipShort(12)", "Delete SimpleName: Cloneable(13)", "Delete SimpleType: Cloneable(14)", "Delete Modifier: private(15)", "Delete PrimitiveType: int(16)", "Delete SimpleName: m_value(17)", "Delete VariableDeclarationFragment(18)", "Delete FieldDeclaration(19)", "Delete TextElement: Create instance from a number.(20)", "Delete TagElement(21)", "Delete SimpleName: value(22)", "Delete TextElement:  Description of Parameter(23)", "Delete TagElement: @param(24)", "Delete TextElement:  1.1(25)", "Delete TagElement: @since(26)", "Delete Javadoc(27)", "Delete Modifier: public(28)", "Delete SimpleName: ZipShort(29)", "Delete PrimitiveType: int(30)", "Delete SimpleName: value(31)", "Delete SingleVariableDeclaration(32)", "Delete ThisExpression(33)", "Delete SimpleName: m_value(34)", "Delete FieldAccess(35)", "Delete SimpleName: value(36)", "Delete Assignment: =(37)", "Delete ExpressionStatement(38)", "Delete Block(39)", "Delete MethodDeclaration(40)", "Delete TextElement: Create instance from bytes.(41)", "Delete TagElement(42)", "Delete SimpleName: bytes(43)", "Delete TextElement:  Description of Parameter(44)", "Delete TagElement: @param(45)", "Delete TextElement:  1.1(46)", "Delete TagElement: @since(47)", "Delete Javadoc(48)", "Delete Modifier: public(49)", "Delete SimpleName: ZipShort(50)", "Delete PrimitiveType: byte(51)", "Delete Dimension(52)", "Delete ArrayType: byte[](53)", "Delete SimpleName: bytes(54)", "Delete SingleVariableDeclaration(55)", "Delete SimpleName: bytes(56)", "Delete NumberLiteral: 0(57)", "Delete ConstructorInvocation(58)", "Delete Block(59)", "Delete MethodDeclaration(60)", "Delete TextElement: Create instance from the two bytes starting at offset.(61)", "Delete TagElement(62)", "Delete SimpleName: bytes(63)", "Delete TextElement:  Description of Parameter(64)", "Delete TagElement: @param(65)", "Delete SimpleName: offset(66)", "Delete TextElement:  Description of Parameter(67)", "Delete TagElement: @param(68)", "Delete TextElement:  1.1(69)", "Delete TagElement: @since(70)", "Delete Javadoc(71)", "Delete Modifier: public(72)", "Delete SimpleName: ZipShort(73)", "Delete PrimitiveType: byte(74)", "Delete Dimension(75)", "Delete ArrayType: byte[](76)", "Delete SimpleName: bytes(77)", "Delete SingleVariableDeclaration(78)", "Delete PrimitiveType: int(79)", "Delete SimpleName: offset(80)", "Delete SingleVariableDeclaration(81)", "Delete SimpleName: m_value(82)", "Delete SimpleName: bytes(83)", "Delete SimpleName: offset(84)", "Delete NumberLiteral: 1(85)", "Delete InfixExpression: +(86)", "Delete ArrayAccess(87)", "Delete NumberLiteral: 8(88)", "Delete InfixExpression: <<(89)", "Delete ParenthesizedExpression(90)", "Delete NumberLiteral: 0xFF00(91)", "Delete InfixExpression: &(92)", "Delete Assignment: =(93)", "Delete ExpressionStatement(94)", "Delete SimpleName: m_value(95)", "Delete SimpleName: bytes(96)", "Delete SimpleName: offset(97)", "Delete ArrayAccess(98)", "Delete NumberLiteral: 0xFF(99)", "Delete InfixExpression: &(100)", "Delete ParenthesizedExpression(101)", "Delete Assignment: +=(102)", "Delete ExpressionStatement(103)", "Delete Block(104)", "Delete MethodDeclaration(105)", "Delete TextElement: Get value as two bytes in big endian byte order.(106)", "Delete TagElement(107)", "Delete TextElement:  The Bytes value(108)", "Delete TagElement: @return(109)", "Delete TextElement:  1.1(110)", "Delete TagElement: @since(111)", "Delete Javadoc(112)", "Delete Modifier: public(113)", "Delete PrimitiveType: byte(114)", "Delete Dimension(115)", "Delete ArrayType: byte[](116)", "Delete SimpleName: getBytes(117)", "Delete PrimitiveType: byte(118)", "Delete Dimension(119)", "Delete ArrayType: byte[](120)", "Delete SimpleName: result(121)", "Delete PrimitiveType: byte(122)", "Delete Dimension(123)", "Delete ArrayType: byte[](124)", "Delete NumberLiteral: 2(125)", "Delete ArrayCreation(126)", "Delete VariableDeclarationFragment(127)", "Delete VariableDeclarationStatement(128)", "Delete SimpleName: result(129)", "Delete NumberLiteral: 0(130)", "Delete ArrayAccess(131)", "Delete PrimitiveType: byte(132)", "Delete SimpleName: m_value(133)", "Delete NumberLiteral: 0xFF(134)", "Delete InfixExpression: &(135)", "Delete ParenthesizedExpression(136)", "Delete CastExpression(137)", "Delete Assignment: =(138)", "Delete ExpressionStatement(139)", "Delete SimpleName: result(140)", "Delete NumberLiteral: 1(141)", "Delete ArrayAccess(142)", "Delete PrimitiveType: byte(143)", "Delete SimpleName: m_value(144)", "Delete NumberLiteral: 0xFF00(145)", "Delete InfixExpression: &(146)", "Delete ParenthesizedExpression(147)", "Delete NumberLiteral: 8(148)", "Delete InfixExpression: >>(149)", "Delete ParenthesizedExpression(150)", "Delete CastExpression(151)", "Delete Assignment: =(152)", "Delete ExpressionStatement(153)", "Delete SimpleName: result(154)", "Delete ReturnStatement(155)", "Delete Block(156)", "Delete MethodDeclaration(157)", "Delete TextElement: Get value as Java int.(158)", "Delete TagElement(159)", "Delete TextElement:  The Value value(160)", "Delete TagElement: @return(161)", "Delete TextElement:  1.1(162)", "Delete TagElement: @since(163)", "Delete Javadoc(164)", "Delete Modifier: public(165)", "Delete PrimitiveType: int(166)", "Delete SimpleName: getValue(167)", "Delete SimpleName: m_value(168)", "Delete ReturnStatement(169)", "Delete Block(170)", "Delete MethodDeclaration(171)", "Delete TextElement: Override to make two instances with same value equal.(172)", "Delete TagElement(173)", "Delete SimpleName: o(174)", "Delete TextElement:  Description of Parameter(175)", "Delete TagElement: @param(176)", "Delete TextElement:  Description of the Returned Value(177)", "Delete TagElement: @return(178)", "Delete TextElement:  1.1(179)", "Delete TagElement: @since(180)", "Delete Javadoc(181)", "Delete Modifier: public(182)", "Delete PrimitiveType: boolean(183)", "Delete SimpleName: equals(184)", "Delete SimpleName: Object(185)", "Delete SimpleType: Object(186)", "Delete SimpleName: o(187)", "Delete SingleVariableDeclaration(188)", "Delete SimpleName: o(189)", "Delete NullLiteral(190)", "Delete InfixExpression: ==(191)", "Delete SimpleName: o(192)", "Delete SimpleName: ZipShort(193)", "Delete SimpleType: ZipShort(194)", "Delete InstanceofExpression(195)", "Delete ParenthesizedExpression(196)", "Delete PrefixExpression: !(197)", "Delete InfixExpression: ||(198)", "Delete BooleanLiteral: false(199)", "Delete ReturnStatement(200)", "Delete Block(201)", "Delete IfStatement(202)", "Delete SimpleName: m_value(203)", "Delete SimpleName: ZipShort(204)", "Delete SimpleType: ZipShort(205)", "Delete SimpleName: o(206)", "Delete CastExpression(207)", "Delete ParenthesizedExpression(208)", "Delete SimpleName: getValue(209)", "Delete MethodInvocation(210)", "Delete InfixExpression: ==(211)", "Delete ReturnStatement(212)", "Delete Block(213)", "Delete MethodDeclaration(214)", "Delete TextElement: Override to make two instances with same value equal.(215)", "Delete TagElement(216)", "Delete TextElement:  Description of the Returned Value(217)", "Delete TagElement: @return(218)", "Delete TextElement:  1.1(219)", "Delete TagElement: @since(220)", "Delete Javadoc(221)", "Delete Modifier: public(222)", "Delete PrimitiveType: int(223)", "Delete SimpleName: hashCode(224)", "Delete SimpleName: m_value(225)", "Delete ReturnStatement(226)", "Delete Block(227)", "Delete MethodDeclaration(228)", "Delete TypeDeclaration: class(229)"]}}], "commit_stats": [{"total_files": 27, "deleted_files": 26, "testing": "True", "maintenance": "True", "build": "False"}]}