{"application": "apache-commons-csv", "csha": "6a34b823c807325bc251ef43c66c307adcd947b8", "files": [{"CSVFormat_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS QualifiedName: org.apache.commons.csv.CSVFormat.CSVFormatBuilder to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 12"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 22", "operations": ["INS NullLiteral to ClassInstanceCreation at 4", "INS SimpleType: CSVFormatBuilder to ClassInstanceCreation at 0", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: CSVFormatBuilder to SimpleType: CSVFormatBuilder at 0", "INS SimpleName: COMMA to ClassInstanceCreation at 1", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: CRLF to ClassInstanceCreation at 8", "INS SimpleName: DOUBLE_QUOTE to ClassInstanceCreation at 2", "INS BooleanLiteral: true to ClassInstanceCreation at 7", "INS NullLiteral to ClassInstanceCreation at 9", "INS SimpleName: defaults to MethodDeclaration at 4", "INS NullLiteral to ClassInstanceCreation at 3", "INS MethodDeclaration to TypeDeclaration: class at 22", "INS Modifier: static to MethodDeclaration at 2", "INS NullLiteral to ClassInstanceCreation at 5", "INS BooleanLiteral: false to ClassInstanceCreation at 6"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS Dimension to ArrayType: String[] at 1", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: Quote to SimpleType: Quote at 0", "INS SimpleName: ignoreSurroundingSpaces to SingleVariableDeclaration at 2", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleType: Character to SingleVariableDeclaration at 1", "INS SimpleName: delimiter to SingleVariableDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 11", "INS Modifier: final to SingleVariableDeclaration at 0", "INS Modifier: private to MethodDeclaration at 1", "INS ArrayType: String[] to SingleVariableDeclaration at 1", "INS SimpleName: header to SingleVariableDeclaration at 2", "INS SimpleName: Character to SimpleType: Character at 0", "INS SimpleName: Character to SimpleType: Character at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: quotePolicy to SingleVariableDeclaration at 2", "INS Modifier: final to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 23", "INS PrimitiveType: char to SingleVariableDeclaration at 1", "INS SimpleName: CSVFormat to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 10", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS SimpleType: String to ArrayType: String[] at 0", "INS SimpleType: Character to SingleVariableDeclaration at 1", "INS SimpleName: ignoreEmptyLines to SingleVariableDeclaration at 2", "INS SimpleName: lineSeparator to SingleVariableDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleType: String to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 9", "INS SimpleType: Character to SingleVariableDeclaration at 1", "INS SimpleName: quoteChar to SingleVariableDeclaration at 2", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleType: Quote to SingleVariableDeclaration at 1", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: commentStart to SingleVariableDeclaration at 2", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS PrimitiveType: boolean to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: Character to SimpleType: Character at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: escape to SingleVariableDeclaration at 2", "INS PrimitiveType: boolean to SingleVariableDeclaration at 1"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 56", "operations": ["INS TypeDeclaration: class to TypeDeclaration: class at 56", "INS PrimitiveType: char to FieldDeclaration at 1", "INS SimpleType: Character to FieldDeclaration at 1", "INS SimpleType: Quote to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 10", "INS SimpleName: build to MethodDeclaration at 2", "INS SimpleName: Character to SimpleType: Character at 0", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS ThisExpression to ReturnStatement at 0", "INS TagElement: @param to Javadoc at 1", "INS MethodDeclaration to TypeDeclaration: class at 17", "INS TagElement to Javadoc at 0", "INS ReturnStatement to Block at 2", "INS FieldAccess to Assignment: = at 0", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: Sets the quoteChar of the format to the specified character. to TagElement at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: delimiter to TagElement: @param at 0", "INS SimpleName: withQuoteChar to MethodDeclaration at 3", "INS SimpleName: commentStart to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS Modifier: private to MethodDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: ignoreSurroundingSpaces to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 9", "INS SimpleName: IllegalArgumentException to TagElement: @throws at 0", "INS TextElement: the char used for value separation, must not be a line break character to TagElement: @param at 2", "INS SimpleName: String to SimpleType: String at 0", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS SimpleType: Character to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS SimpleName: CSVFormatBuilder to MethodDeclaration at 2", "INS TextElement:  if the delimiter is a line break character to TagElement: @throws at 1", "INS SimpleType: Character to FieldDeclaration at 1", "INS Dimension to ArrayType: String[] at 1", "INS SimpleName: Character to SimpleType: Character at 0", "INS TagElement to Javadoc at 0", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleType: String to FieldDeclaration at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: quoteChar to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS SimpleName: header to VariableDeclarationFragment at 0", "INS PrimitiveType: boolean to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 11", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS Modifier: private to FieldDeclaration at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: quoteChar to Assignment: = at 1", "INS Block to MethodDeclaration at 5", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: CSVFormatBuilder to TypeDeclaration: class at 2", "INS Modifier: public to MethodDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS SimpleType: CSVFormatBuilder to MethodDeclaration at 2", "INS SimpleName: delimiter to VariableDeclarationFragment at 0", "INS TagElement: @throws to Javadoc at 2", "INS SimpleName: Character to SimpleType: Character at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: recordSeparator to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: ignoreEmptyLines to VariableDeclarationFragment at 0", "INS SimpleName: quotePolicy to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: String to ArrayType: String[] at 0", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS ArrayType: String[] to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 3", "INS TextElement:  This builder with the specified character as quoteChar to TagElement: @return at 0", "INS Modifier: static to TypeDeclaration: class at 1", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: escape to VariableDeclarationFragment at 0", "INS TextElement:   to TagElement: @param at 1", "INS TagElement: @return to Javadoc at 2", "INS Modifier: private to FieldDeclaration at 0", "INS PrimitiveType: boolean to FieldDeclaration at 1", "INS Modifier: public to TypeDeclaration: class at 0", "INS TextElement: Creates a basic CSVFormatBuilder. to TagElement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: Quote to SimpleType: Quote at 0", "INS SimpleName: quoteChar to FieldAccess at 1"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: CSVFormat to FieldDeclaration at 4"]}, {"root": "INS Modifier: static to MethodDeclaration at 2", "operations": ["INS Modifier: static to MethodDeclaration at 2"]}, {"root": "INS SimpleType: CSVFormatBuilder to MethodDeclaration at 3", "operations": ["INS SimpleType: CSVFormatBuilder to MethodDeclaration at 3", "INS SimpleName: CSVFormatBuilder to SimpleType: CSVFormatBuilder at 0"]}, {"root": "INS SimpleName: newFormat to MethodDeclaration at 4", "operations": ["INS SimpleName: newFormat to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: char to SingleVariableDeclaration at 0", "INS SimpleName: delimiter to SingleVariableDeclaration at 1"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS ReturnStatement to Block at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: delimiter to ClassInstanceCreation at 1", "INS SimpleType: CSVFormatBuilder to ClassInstanceCreation at 0", "INS SimpleName: CSVFormatBuilder to SimpleType: CSVFormatBuilder at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Block to MethodDeclaration at 12", "MOV Javadoc to MethodDeclaration at 0", "MOV Modifier: public to MethodDeclaration at 1", "MOV SimpleType: CSVFormat to MethodDeclaration at 3"]}, {"root": "UPDATE from CSVFormat to CSVFormatBuilder", "operations": ["UPD SimpleName: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleType: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleName: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleName: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleType: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleName: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleName: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleName: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleType: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleType: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleType: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleType: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleName: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleType: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleName: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleName: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleType: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleType: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleName: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleType: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleName: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleName: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleName: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleType: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleType: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleType: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleName: CSVFormat from CSVFormat to CSVFormatBuilder", "UPD SimpleName: CSVFormat from CSVFormat to CSVFormatBuilder"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 20", "MOV MethodDeclaration to TypeDeclaration: class at 22", "MOV MethodDeclaration to TypeDeclaration: class at 28", "MOV MethodDeclaration to TypeDeclaration: class at 21", "MOV MethodDeclaration to TypeDeclaration: class at 25", "MOV MethodDeclaration to TypeDeclaration: class at 15", "MOV MethodDeclaration to TypeDeclaration: class at 23", "MOV MethodDeclaration to TypeDeclaration: class at 27", "MOV MethodDeclaration to TypeDeclaration: class at 16", "MOV MethodDeclaration to TypeDeclaration: class at 24", "MOV MethodDeclaration to TypeDeclaration: class at 19", "MOV MethodDeclaration to TypeDeclaration: class at 26", "MOV MethodDeclaration to TypeDeclaration: class at 12"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: build to MethodInvocation at 1", "INS SimpleName: withIgnoreEmptyLines to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 0", "INS BooleanLiteral: false to MethodInvocation at 2"]}, {"root": "INS TagElement to Javadoc at 0", "operations": ["INS TextElement: <ul> to TagElement at 3", "INS TagElement: @link to TagElement at 1", "INS SimpleName: RFC4180 to MemberRef at 0", "INS TextElement:  but allowing blank lines. to TagElement at 2", "INS TextElement: <li>withLineSeparator(CRLF)</li> to TagElement at 7", "INS MemberRef to TagElement: @link at 0", "INS TextElement: <li>withQuoteChar('\"')</li> to TagElement at 5", "INS TextElement: <li>withEmptyLinesIgnored(true)</li> to TagElement at 6", "INS TextElement: </ul> to TagElement at 8", "INS TagElement to Javadoc at 0"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS MethodInvocation to IfStatement at 0", "INS SimpleName: delimiter to MethodInvocation at 1", "INS StringLiteral: \"The delimiter cannot be a line break\" to ClassInstanceCreation at 1", "INS IfStatement to Block at 0", "INS SimpleName: isLineBreak to MethodInvocation at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Block to IfStatement at 1", "INS ThrowStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: delimiter to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: delimiter to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: quoteChar to Assignment: = at 1", "INS SimpleName: quoteChar to FieldAccess at 1", "INS ExpressionStatement to Block at 2", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS ExpressionStatement to Block at 3", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: quotePolicy to Assignment: = at 1", "INS SimpleName: quotePolicy to FieldAccess at 1"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: commentStart to FieldAccess at 1", "INS SimpleName: commentStart to Assignment: = at 1", "INS ExpressionStatement to Block at 4", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: escape to FieldAccess at 1", "INS ExpressionStatement to Block at 5", "INS SimpleName: escape to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: ignoreSurroundingSpaces to FieldAccess at 1", "INS ExpressionStatement to Block at 6", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: ignoreSurroundingSpaces to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 7", "operations": ["INS FieldAccess to Assignment: = at 0", "INS SimpleName: ignoreEmptyLines to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 7", "INS SimpleName: ignoreEmptyLines to FieldAccess at 1"]}, {"root": "INS ExpressionStatement to Block at 8", "operations": ["INS ExpressionStatement to Block at 8", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: lineSeparator to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: recordSeparator to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 9", "operations": ["INS ExpressionStatement to Block at 9", "INS SimpleName: header to Assignment: = at 1", "INS SimpleName: header to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement: the char used for comment identification to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: quoteChar to TagElement: @param at 0", "INS SimpleName: recordSeparator to TagElement: @param at 0", "INS TextElement: Creates a customized CSV format. to TagElement at 0", "INS TextElement: the quote policy to TagElement: @param at 2", "INS TagElement: @param to Javadoc at 9", "INS TextElement: <tt>true</tt> when the parser should skip empty lines to TagElement: @param at 1", "INS TextElement: the char used for value separation, must not be a line break character to TagElement: @param at 1", "INS TextElement: the char used as value encapsulation marker to TagElement: @param at 1", "INS SimpleName: ignoreEmptyLines to TagElement: @param at 0", "INS SimpleName: header to TagElement: @param at 0", "INS TextElement:   to TagElement: @param at 1", "INS TextElement: the line separator to use for output to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 4", "INS TagElement: @param to Javadoc at 6", "INS TagElement: @param to Javadoc at 7", "INS SimpleName: quotePolicy to TagElement: @param at 0", "INS SimpleName: IllegalArgumentException to TagElement: @throws at 0", "INS TagElement: @throws to Javadoc at 10", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @param to Javadoc at 2", "INS TextElement: the header to TagElement: @param at 1", "INS TextElement: <tt>true</tt> when whitespaces enclosing values should be ignored to TagElement: @param at 1", "INS TextElement:  if the delimiter is a line break character to TagElement: @throws at 1", "INS TagElement: @param to Javadoc at 3", "INS SimpleName: commentStart to TagElement: @param at 0", "INS TagElement to Javadoc at 0", "INS TagElement: @param to Javadoc at 5", "INS TagElement: @param to Javadoc at 8", "INS SimpleName: delimiter to TagElement: @param at 0", "INS SimpleName: ignoreSurroundingSpaces to TagElement: @param at 0", "INS SimpleName: escape to TagElement: @param at 0", "INS TextElement: the char used to escape special characters in values to TagElement: @param at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV Block to MethodDeclaration at 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 1", "MOV SimpleType: CSVFormat to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 3"]}, {"root": "INS Modifier: private to MethodDeclaration at 1", "operations": ["INS Modifier: private to MethodDeclaration at 1"]}, {"root": "UPDATE from withQuoteChar to withDelimiter", "operations": ["UPD SimpleName: withQuoteChar from withQuoteChar to withDelimiter"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS SimpleName: delimiter to FieldAccess at 1", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS ThrowStatement to Block at 0", "INS Block to MethodDeclaration at 5", "INS ReturnStatement to Block at 2", "INS SimpleName: delimiter to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS ThisExpression to ReturnStatement at 0", "INS SimpleName: delimiter to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS IfStatement to Block at 0", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS MethodInvocation to IfStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS Block to IfStatement at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: isLineBreak to MethodInvocation at 0", "INS StringLiteral: \"The delimiter cannot be a line break\" to ClassInstanceCreation at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleName: withQuoteChar to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Javadoc to MethodDeclaration at 0", "MOV Modifier: public to MethodDeclaration at 1", "MOV SimpleType: CSVFormat to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Block to MethodDeclaration at 5"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS ExpressionStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: escape to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: escape to FieldAccess at 1", "INS ThisExpression to ReturnStatement at 0", "INS Block to MethodDeclaration at 5", "INS ReturnStatement to Block at 2", "INS ThisExpression to FieldAccess at 0"]}, {"root": "UPDATE from withIgnoreSurroundingSpaces to withHeader", "operations": ["UPD SimpleName: withIgnoreSurroundingSpaces from withIgnoreSurroundingSpaces to withHeader"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "UPDATE from withIgnoreEmptyLines to withIgnoreSurroundingSpaces", "operations": ["UPD SimpleName: withIgnoreEmptyLines from withIgnoreEmptyLines to withIgnoreSurroundingSpaces"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "UPDATE from withRecordSeparator to withIgnoreEmptyLines", "operations": ["UPD SimpleName: withRecordSeparator from withRecordSeparator to withIgnoreEmptyLines", "UPD SimpleName: withQuoteChar from withQuoteChar to withIgnoreEmptyLines", "UPD SimpleName: withQuoteChar from withQuoteChar to withIgnoreEmptyLines"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "UPDATE from withQuotePolicy to withRecordSeparator", "operations": ["UPD SimpleName: withQuotePolicy from withQuotePolicy to withRecordSeparator"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "UPDATE from withHeader to withQuotePolicy", "operations": ["UPD SimpleName: withHeader from withHeader to withQuotePolicy"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "UPDATE from withRecordSeparator to build", "operations": ["UPD SimpleName: withRecordSeparator from withRecordSeparator to build", "UPD SimpleName: withIgnoreEmptyLines from withIgnoreEmptyLines to build", "UPD SimpleName: withRecordSeparator from withRecordSeparator to build", "UPD SimpleName: withIgnoreEmptyLines from withIgnoreEmptyLines to build"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0", "MOV SimpleName: withIgnoreEmptyLines to MethodInvocation at 1"]}, {"root": "UPDATE from Creates a basic CSV format. to Factory method for creating CSV formats.", "operations": ["UPD TextElement: Creates a basic CSV format. from Creates a basic CSV format. to Factory method for creating CSV formats."]}, {"root": "UPDATE from Returns a copy of this format using the specified delimiter character. to Standard comma separated format, as for ", "operations": ["UPD TextElement: Returns a copy of this format using the specified delimiter character. from Returns a copy of this format using the specified delimiter character. to Standard comma separated format, as for "]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement: Returns a copy of this format using the specified delimiter character. to TagElement at 0"]}, {"root": "UPDATE from  A copy of this format using the specified delimiter character to <li>withDelimiter(',')</li>", "operations": ["UPD TextElement:  A copy of this format using the specified delimiter character from  A copy of this format using the specified delimiter character to <li>withDelimiter(',')</li>"]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  A copy of this format using the specified delimiter character to TagElement at 4"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: validate to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @param to Javadoc at 1", "MOV TagElement: @throws to Javadoc at 4"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @throws to Javadoc at 3", "MOV TagElement: @param to Javadoc at 1"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @throws to Javadoc at 3", "MOV TagElement: @param to Javadoc at 1"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @param to Javadoc at 1", "MOV TagElement: @throws to Javadoc at 3"]}, {"root": "MOVE from SimpleType: CSVFormatBuilder", "operations": ["MOV SimpleName: CSVFormat to SimpleType: CSVFormatBuilder at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @throws to Javadoc at 4", "MOV TagElement: @param to Javadoc at 1"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @param to Javadoc at 1", "MOV TagElement: @throws to Javadoc at 3"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: commentStart to FieldAccess at 1", "INS SimpleName: commentStart to Assignment: = at 1"]}, {"root": "INS ReturnStatement to Block at 2", "operations": ["INS ReturnStatement to Block at 2", "INS ThisExpression to ReturnStatement at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @throws to Javadoc at 4"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @param to Javadoc at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: header to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: header to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS ThisExpression to ReturnStatement at 0", "INS ReturnStatement to Block at 1"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @param to Javadoc at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: ignoreSurroundingSpaces to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: ignoreSurroundingSpaces to FieldAccess at 1"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS ReturnStatement to Block at 1", "INS ThisExpression to ReturnStatement at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @param to Javadoc at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: ignoreEmptyLines to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: ignoreEmptyLines to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS ReturnStatement to Block at 1", "INS ThisExpression to ReturnStatement at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @param to Javadoc at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS FieldAccess to Assignment: = at 0", "INS SimpleName: recordSeparator to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: recordSeparator to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS ReturnStatement to Block at 1", "INS ThisExpression to ReturnStatement at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @param to Javadoc at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: quotePolicy to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: quotePolicy to Assignment: = at 1"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS ThisExpression to ReturnStatement at 0", "INS ReturnStatement to Block at 1"]}, {"root": "INS BooleanLiteral: false to MethodInvocation at 2", "operations": ["INS BooleanLiteral: false to MethodInvocation at 2"]}, {"root": "UPDATE from PRISTINE to defaults", "operations": ["UPD SimpleName: PRISTINE from PRISTINE to defaults", "UPD SimpleName: RFC4180 from RFC4180 to defaults", "UPD SimpleName: PRISTINE from PRISTINE to defaults", "UPD SimpleName: PRISTINE from PRISTINE to defaults", "UPD SimpleName: PRISTINE from PRISTINE to defaults"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: RFC4180 to MethodInvocation at 0"]}, {"root": "INS BooleanLiteral: false to MethodInvocation at 2", "operations": ["INS BooleanLiteral: false to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: withRecordSeparator to MethodInvocation at 1", "MOV SimpleName: LF to MethodInvocation at 2", "MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from Returns a copy of this format using the specified quoteChar character. to Sets the delimiter of the format to the specified character.", "operations": ["UPD TextElement: Returns a copy of this format using the specified quoteChar character. from Returns a copy of this format using the specified quoteChar character. to Sets the delimiter of the format to the specified character."]}, {"root": "UPDATE from  A copy of this format using the specified quoteChar character to  This builder with the specified character as delimiter", "operations": ["UPD TextElement:  A copy of this format using the specified quoteChar character from  A copy of this format using the specified quoteChar character to  This builder with the specified character as delimiter"]}, {"root": "UPDATE from Returns a copy of this format using the specified quoteChar character. to Sets the quoteChar of the format to the specified character.", "operations": ["UPD TextElement: Returns a copy of this format using the specified quoteChar character. from Returns a copy of this format using the specified quoteChar character. to Sets the quoteChar of the format to the specified character."]}, {"root": "UPDATE from  A copy of this format using the specified quoteChar character to  This builder with the specified character as quoteChar", "operations": ["UPD TextElement:  A copy of this format using the specified quoteChar character from  A copy of this format using the specified quoteChar character to  This builder with the specified character as quoteChar"]}, {"root": "UPDATE from Returns a copy of this format using the specified character as the comment start marker. to Sets the comment start marker of the format to the specified character.", "operations": ["UPD TextElement: Returns a copy of this format using the specified character as the comment start marker. from Returns a copy of this format using the specified character as the comment start marker. to Sets the comment start marker of the format to the specified character.", "UPD TextElement: Returns a copy of this format using the specified character as the comment start marker. from Returns a copy of this format using the specified character as the comment start marker. to Sets the comment start marker of the format to the specified character."]}, {"root": "UPDATE from  A copy of this format using the specified character as the comment start marker to  This builder with the specified character as the comment start marker", "operations": ["UPD TextElement:  A copy of this format using the specified character as the comment start marker from  A copy of this format using the specified character as the comment start marker to  This builder with the specified character as the comment start marker", "UPD TextElement:  A copy of this format using the specified character as the comment start marker from  A copy of this format using the specified character as the comment start marker to  This builder with the specified character as the comment start marker"]}, {"root": "UPDATE from Returns a copy of this format using the specified escape character. to Sets the escape character of the format to the specified character.", "operations": ["UPD TextElement: Returns a copy of this format using the specified escape character. from Returns a copy of this format using the specified escape character. to Sets the escape character of the format to the specified character.", "UPD TextElement: Returns a copy of this format using the specified escape character. from Returns a copy of this format using the specified escape character. to Sets the escape character of the format to the specified character."]}, {"root": "UPDATE from  A copy of this format using the specified escape character to  This builder with the specified character as the escape character", "operations": ["UPD TextElement:  A copy of this format using the specified escape character from  A copy of this format using the specified escape character to  This builder with the specified character as the escape character", "UPD TextElement:  A copy of this format using the specified escape character from  A copy of this format using the specified escape character to  This builder with the specified character as the escape character"]}, {"root": "INS TextElement: Sets the header of the format. The header can either be parsed automatically from the to TagElement at 0", "operations": ["INS TextElement: Sets the header of the format. The header can either be parsed automatically from the to TagElement at 0"]}, {"root": "INS TextElement: input file with: to TagElement at 1", "operations": ["INS TextElement: input file with: to TagElement at 1"]}, {"root": "INS TextElement: <pre> to TagElement at 2", "operations": ["INS TextElement: <pre> to TagElement at 2"]}, {"root": "INS TextElement: CSVFormat format = aformat.withHeader(); to TagElement at 3", "operations": ["INS TextElement: CSVFormat format = aformat.withHeader(); to TagElement at 3"]}, {"root": "INS TextElement: </pre> to TagElement at 4", "operations": ["INS TextElement: </pre> to TagElement at 4"]}, {"root": "UPDATE from Returns a copy of this format with the specified trimming behavior. to or specified manually with:", "operations": ["UPD TextElement: Returns a copy of this format with the specified trimming behavior. from Returns a copy of this format with the specified trimming behavior. to or specified manually with:"]}, {"root": "INS TextElement: <pre> to TagElement at 6", "operations": ["INS TextElement: <pre> to TagElement at 6"]}, {"root": "INS TextElement: CSVFormat format = aformat.withHeader(&quot;name&quot;, &quot;email&quot;, &quot;phone&quot;); to TagElement at 7", "operations": ["INS TextElement: CSVFormat format = aformat.withHeader(&quot;name&quot;, &quot;email&quot;, &quot;phone&quot;); to TagElement at 7"]}, {"root": "INS TextElement: </pre> to TagElement at 8", "operations": ["INS TextElement: </pre> to TagElement at 8"]}, {"root": "UPDATE from  A copy of this format with the specified trimming behavior. to  This builder with the specified header", "operations": ["UPD TextElement:  A copy of this format with the specified trimming behavior. from  A copy of this format with the specified trimming behavior. to  This builder with the specified header"]}, {"root": "UPDATE from Returns a copy of this format with the specified empty line skipping behavior. to Sets the trimming behavior of the format.", "operations": ["UPD TextElement: Returns a copy of this format with the specified empty line skipping behavior. from Returns a copy of this format with the specified empty line skipping behavior. to Sets the trimming behavior of the format."]}, {"root": "UPDATE from  A copy of this format with the specified empty line skipping behavior. to  This builder with the specified trimming behavior.", "operations": ["UPD TextElement:  A copy of this format with the specified empty line skipping behavior. from  A copy of this format with the specified empty line skipping behavior. to  This builder with the specified trimming behavior."]}, {"root": "UPDATE from Returns a copy of this format using the specified output record separator. to Sets the empty line skipping behavior of the format.", "operations": ["UPD TextElement: Returns a copy of this format using the specified output record separator. from Returns a copy of this format using the specified output record separator. to Sets the empty line skipping behavior of the format."]}, {"root": "UPDATE from  A copy of this format using the specified output record separator to  This builder with the specified empty line skipping behavior.", "operations": ["UPD TextElement:  A copy of this format using the specified output record separator from  A copy of this format using the specified output record separator to  This builder with the specified empty line skipping behavior."]}, {"root": "UPDATE from Returns a copy of this format using the specified output record separator. to Sets the record separator of the format to the specified character.", "operations": ["UPD TextElement: Returns a copy of this format using the specified output record separator. from Returns a copy of this format using the specified output record separator. to Sets the record separator of the format to the specified character."]}, {"root": "UPDATE from  A copy of this format using the specified output line separator to  This builder with the the specified output record separator", "operations": ["UPD TextElement:  A copy of this format using the specified output line separator from  A copy of this format using the specified output line separator to  This builder with the the specified output record separator", "UPD TextElement:  A copy of this format using the specified output record separator from  A copy of this format using the specified output record separator to  This builder with the the specified output record separator"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: withRecordSeparator to MethodInvocation at 0"]}, {"root": "UPDATE from Returns a copy of this format using the specified output quote policy. to Sets the record separator of the format to the specified String.", "operations": ["UPD TextElement: Returns a copy of this format using the specified output quote policy. from Returns a copy of this format using the specified output quote policy. to Sets the record separator of the format to the specified String."]}, {"root": "UPDATE from Returns a copy of this format using the specified header. The header can either be parsed automatically from the to Sets the output quote policy of the format to the specified value.", "operations": ["UPD TextElement: Returns a copy of this format using the specified header. The header can either be parsed automatically from the from Returns a copy of this format using the specified header. The header can either be parsed automatically from the to Sets the output quote policy of the format to the specified value."]}, {"root": "UPDATE from  A copy of this format using the specified header to  This builder with the specified quote policy", "operations": ["UPD TextElement:  A copy of this format using the specified header from  A copy of this format using the specified header to  This builder with the specified quote policy"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: PRISTINE to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS NullLiteral to MethodInvocation at 2", "INS SimpleName: withQuoteChar to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from CSVFormat to IllegalArgumentException", "operations": ["UPD SimpleType: CSVFormat from CSVFormat to IllegalArgumentException", "UPD SimpleName: CSVFormat from CSVFormat to IllegalArgumentException"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: CSVFormat to ClassInstanceCreation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: PRISTINE to MethodInvocation at 0"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL TextElement: Constant char to use for disabling comments, escapes and encapsulation. The value -2 is used because it", "DEL CharacterLiteral: '\\ufffe'", "DEL TextElement:  FFFE", "DEL Modifier: static", "DEL Modifier: private", "DEL TagElement", "DEL Javadoc", "DEL TextElement: won't be confused with an EOF signal (-1), and because the Unicode value ", "DEL VariableDeclarationFragment", "DEL TextElement: (using surrogates) and thus there should never be a collision with a real text char.", "DEL FieldDeclaration", "DEL SimpleName: DISABLED", "DEL TagElement: @code", "DEL Modifier: final", "DEL TextElement:  would be encoded as two chars", "DEL PrimitiveType: char"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL TextElement: Starting format; used for creating other formats.", "DEL ClassInstanceCreation", "DEL NullLiteral", "DEL Modifier: static", "DEL Modifier: final", "DEL BooleanLiteral: false", "DEL NullLiteral", "DEL SimpleName: PRISTINE", "DEL FieldDeclaration", "DEL NullLiteral", "DEL SimpleName: CSVFormat", "DEL SimpleType: CSVFormat", "DEL SimpleName: DISABLED", "DEL TagElement", "DEL BooleanLiteral: false", "DEL NullLiteral", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL NullLiteral", "DEL Javadoc"]}, {"root": "DEL SimpleName: withDelimiter", "operations": ["DEL SimpleName: withDelimiter"]}, {"root": "DEL SimpleName: COMMA", "operations": ["DEL SimpleName: COMMA"]}, {"root": "DEL SimpleName: DOUBLE_QUOTE", "operations": ["DEL SimpleName: DOUBLE_QUOTE"]}, {"root": "DEL SimpleName: CRLF", "operations": ["DEL SimpleName: CRLF"]}, {"root": "DEL SimpleType: CSVFormat", "operations": ["DEL SimpleName: CSVFormat", "DEL SimpleType: CSVFormat"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL SimpleName: withDelimiter", "operations": ["DEL SimpleName: withDelimiter"]}, {"root": "DEL SimpleName: COMMA", "operations": ["DEL SimpleName: COMMA"]}, {"root": "DEL SimpleName: DOUBLE_QUOTE", "operations": ["DEL SimpleName: DOUBLE_QUOTE"]}, {"root": "DEL SimpleName: CRLF", "operations": ["DEL SimpleName: CRLF"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: DOUBLE_QUOTE", "DEL SimpleName: withQuoteChar", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: withRecordSeparator", "DEL MethodInvocation", "DEL SimpleName: CRLF", "DEL BooleanLiteral: true", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: CSVFormat", "operations": ["DEL SimpleName: CSVFormat"]}, {"root": "DEL TagElement", "operations": ["DEL TagElement"]}, {"root": "DEL TagElement: @return", "operations": ["DEL TagElement: @return"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: quoteChar", "DEL SimpleName: ignoreEmptyLines", "DEL SimpleName: commentStart", "DEL SimpleName: delimiter", "DEL SimpleName: recordSeparator", "DEL SimpleName: ignoreSurroundingSpaces", "DEL ClassInstanceCreation", "DEL SimpleName: header", "DEL SimpleName: quotePolicy", "DEL SimpleName: escape"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: withDelimiter", "DEL MethodDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL SimpleName: header", "DEL SimpleName: ignoreSurroundingSpaces", "DEL ClassInstanceCreation", "DEL SimpleName: quotePolicy", "DEL SimpleName: quoteChar", "DEL SimpleType: CSVFormat", "DEL SimpleName: commentStart", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: delimiter", "DEL SimpleName: escape", "DEL SimpleName: recordSeparator", "DEL SimpleName: ignoreEmptyLines"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: escape", "DEL SimpleName: delimiter", "DEL SimpleName: quotePolicy", "DEL ReturnStatement", "DEL SimpleName: header", "DEL SimpleType: CSVFormat", "DEL SimpleName: CSVFormat", "DEL SimpleName: commentStart", "DEL SimpleName: quoteChar", "DEL ClassInstanceCreation", "DEL SimpleName: ignoreSurroundingSpaces", "DEL SimpleName: ignoreEmptyLines", "DEL SimpleName: recordSeparator"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: CSVFormat", "DEL SimpleName: quotePolicy", "DEL SimpleName: delimiter", "DEL SimpleName: ignoreSurroundingSpaces", "DEL SimpleName: header", "DEL ReturnStatement", "DEL SimpleName: commentStart", "DEL ClassInstanceCreation", "DEL SimpleName: escape", "DEL SimpleName: ignoreEmptyLines", "DEL SimpleType: CSVFormat", "DEL SimpleName: quoteChar", "DEL SimpleName: recordSeparator"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: ignoreEmptyLines", "DEL ClassInstanceCreation", "DEL SimpleName: quoteChar", "DEL SimpleName: quotePolicy", "DEL ReturnStatement", "DEL SimpleName: commentStart", "DEL SimpleName: ignoreSurroundingSpaces", "DEL SimpleName: recordSeparator", "DEL SimpleName: delimiter", "DEL SimpleName: escape", "DEL SimpleName: header", "DEL SimpleName: CSVFormat", "DEL SimpleType: CSVFormat"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: delimiter", "DEL ClassInstanceCreation", "DEL SimpleName: quotePolicy", "DEL SimpleName: escape", "DEL SimpleName: ignoreEmptyLines", "DEL SimpleName: header", "DEL ReturnStatement", "DEL SimpleName: quoteChar", "DEL SimpleName: ignoreSurroundingSpaces", "DEL SimpleName: commentStart"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: delimiter", "DEL SimpleName: recordSeparator", "DEL SimpleName: quotePolicy", "DEL SimpleType: CSVFormat", "DEL ClassInstanceCreation", "DEL SimpleName: ignoreSurroundingSpaces", "DEL SimpleName: ignoreEmptyLines", "DEL SimpleName: commentStart", "DEL SimpleName: escape", "DEL SimpleName: header", "DEL SimpleName: CSVFormat", "DEL SimpleName: quoteChar"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: delimiter", "DEL SimpleName: recordSeparator", "DEL SimpleName: quoteChar", "DEL ReturnStatement", "DEL SimpleType: CSVFormat", "DEL SimpleName: header", "DEL ClassInstanceCreation", "DEL SimpleName: commentStart", "DEL SimpleName: quotePolicy", "DEL SimpleName: CSVFormat", "DEL SimpleName: ignoreSurroundingSpaces", "DEL SimpleName: ignoreEmptyLines", "DEL SimpleName: escape"]}, {"root": "DEL TextElement: input file with:", "operations": ["DEL TextElement: input file with:"]}, {"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: CSVFormat format = aformat.withHeader();", "operations": ["DEL TextElement: CSVFormat format = aformat.withHeader();"]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}, {"root": "DEL TextElement: or specified manually with:", "operations": ["DEL TextElement: or specified manually with:"]}, {"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: CSVFormat format = aformat.withHeader(&quot;name&quot;, &quot;email&quot;, &quot;phone&quot;);", "operations": ["DEL TextElement: CSVFormat format = aformat.withHeader(&quot;name&quot;, &quot;email&quot;, &quot;phone&quot;);"]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: ignoreEmptyLines", "DEL SimpleName: delimiter", "DEL ClassInstanceCreation", "DEL SimpleName: recordSeparator", "DEL ReturnStatement", "DEL SimpleName: header", "DEL SimpleName: quoteChar", "DEL SimpleName: commentStart", "DEL SimpleName: escape", "DEL SimpleName: CSVFormat", "DEL SimpleName: ignoreSurroundingSpaces", "DEL SimpleName: quotePolicy", "DEL SimpleType: CSVFormat"]}]}}, {"CSVFormat_diff": {"operations": ["     *      http://dev.mysql.com/doc/refman/5.1/en/load-data.html</a>(259) to TextElement:  <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\">", "     *      http://dev.mysql.com/doc/refman/5.1/en/load-data.html</a>(210)", "Insert ImportDeclaration(25) into CompilationUnit(1637) at 12", "Insert QualifiedName: org.apache.commons.csv.CSVFormat.CSVFormatBuilder(24) into ImportDeclaration(25) at 0", "Insert MethodDeclaration(297) into TypeDeclaration: class(1636) at 20", "Insert MethodDeclaration(443) into TypeDeclaration: class(1636) at 21", "Insert TypeDeclaration: class(1635) into TypeDeclaration: class(1636) at 39", "Move SimpleType: CSVFormat(127) into FieldDeclaration(153) at 4", "Insert Modifier: static(251) into MethodDeclaration(264) at 2", "Insert SimpleType: CSVFormatBuilder(253) into MethodDeclaration(264) at 3", "Insert SimpleName: newFormat(254) into MethodDeclaration(264) at 4", "Insert SingleVariableDeclaration(257) into MethodDeclaration(264) at 5", "Insert Block(263) into MethodDeclaration(264) at 6", "Move Javadoc(647) into MethodDeclaration(297) at 0", "Move Modifier: public(648) into MethodDeclaration(297) at 1", "Insert Modifier: static(279) into MethodDeclaration(297) at 2", "Update SimpleType: CSVFormat(650) to CSVFormatBuilder", "Move SimpleType: CSVFormat(650) into MethodDeclaration(297) at 3", "Insert SimpleName: defaults(282) into MethodDeclaration(297) at 4", "Insert Block(296) into MethodDeclaration(297) at 5", "Move Javadoc(340) into MethodDeclaration(443) at 0", "Insert Modifier: private(332) into MethodDeclaration(443) at 1", "Insert SimpleName: CSVFormat(333) into MethodDeclaration(443) at 2", "Insert SingleVariableDeclaration(337) into MethodDeclaration(443) at 3", "Insert SingleVariableDeclaration(342) into MethodDeclaration(443) at 4", "Insert SingleVariableDeclaration(347) into MethodDeclaration(443) at 5", "Insert SingleVariableDeclaration(352) into MethodDeclaration(443) at 6", "Insert SingleVariableDeclaration(357) into MethodDeclaration(443) at 7", "Insert SingleVariableDeclaration(361) into MethodDeclaration(443) at 8", "Insert SingleVariableDeclaration(365) into MethodDeclaration(443) at 9", "Insert SingleVariableDeclaration(370) into MethodDeclaration(443) at 10", "Insert SingleVariableDeclaration(377) into MethodDeclaration(443) at 11", "Move Block(669) into MethodDeclaration(443) at 12", "Insert Modifier: public(853) into TypeDeclaration: class(1635) at 0", "Insert Modifier: static(854) into TypeDeclaration: class(1635) at 1", "Insert SimpleName: CSVFormatBuilder(855) into TypeDeclaration: class(1635) at 2", "Insert FieldDeclaration(860) into TypeDeclaration: class(1635) at 3", "Insert FieldDeclaration(866) into TypeDeclaration: class(1635) at 4", "Insert FieldDeclaration(872) into TypeDeclaration: class(1635) at 5", "Insert FieldDeclaration(878) into TypeDeclaration: class(1635) at 6", "Insert FieldDeclaration(884) into TypeDeclaration: class(1635) at 7", "Insert FieldDeclaration(889) into TypeDeclaration: class(1635) at 8", "Insert FieldDeclaration(894) into TypeDeclaration: class(1635) at 9", "Insert FieldDeclaration(900) into TypeDeclaration: class(1635) at 10", "Insert FieldDeclaration(908) into TypeDeclaration: class(1635) at 11", "Move MethodDeclaration(451) into TypeDeclaration: class(1635) at 12", "Insert MethodDeclaration(1080) into TypeDeclaration: class(1635) at 13", "Insert MethodDeclaration(1102) into TypeDeclaration: class(1635) at 14", "Move MethodDeclaration(624) into TypeDeclaration: class(1635) at 15", "Move MethodDeclaration(711) into TypeDeclaration: class(1635) at 16", "Insert MethodDeclaration(1288) into TypeDeclaration: class(1635) at 17", "Insert MethodDeclaration(1328) into TypeDeclaration: class(1635) at 18", "Move MethodDeclaration(815) into TypeDeclaration: class(1635) at 19", "Move MethodDeclaration(861) into TypeDeclaration: class(1635) at 20", "Move MethodDeclaration(917) into TypeDeclaration: class(1635) at 21", "Move MethodDeclaration(962) into TypeDeclaration: class(1635) at 22", "Move MethodDeclaration(1024) into TypeDeclaration: class(1635) at 23", "Move MethodDeclaration(1069) into TypeDeclaration: class(1635) at 24", "Move MethodDeclaration(1116) into TypeDeclaration: class(1635) at 25", "Move MethodDeclaration(1148) into TypeDeclaration: class(1635) at 26", "Move MethodDeclaration(1180) into TypeDeclaration: class(1635) at 27", "Move MethodDeclaration(1229) into TypeDeclaration: class(1635) at 28", "Insert MethodInvocation(203) into VariableDeclarationFragment(204) at 1", "Insert MethodInvocation(237) into VariableDeclarationFragment(238) at 1", "Insert SimpleName: CSVFormatBuilder(252) into SimpleType: CSVFormatBuilder(253) at 0", "Insert PrimitiveType: char(255) into SingleVariableDeclaration(257) at 0", "Insert SimpleName: delimiter(256) into SingleVariableDeclaration(257) at 1", "Insert ReturnStatement(262) into Block(263) at 0", "Insert TagElement(276) into Javadoc(277) at 0", "Update SimpleName: CSVFormat(649) to CSVFormatBuilder", "Insert ReturnStatement(295) into Block(296) at 0", "Insert Modifier: final(334) into SingleVariableDeclaration(337) at 0", "Insert PrimitiveType: char(335) into SingleVariableDeclaration(337) at 1", "Insert SimpleName: delimiter(336) into SingleVariableDeclaration(337) at 2", "Insert Modifier: final(338) into SingleVariableDeclaration(342) at 0", "Insert SimpleType: Character(340) into SingleVariableDeclaration(342) at 1", "Insert SimpleName: quoteChar(341) into SingleVariableDeclaration(342) at 2", "Insert Modifier: final(343) into SingleVariableDeclaration(347) at 0", "Insert SimpleType: Quote(345) into SingleVariableDeclaration(347) at 1", "Insert SimpleName: quotePolicy(346) into SingleVariableDeclaration(347) at 2", "Insert Modifier: final(348) into SingleVariableDeclaration(352) at 0", "Insert SimpleType: Character(350) into SingleVariableDeclaration(352) at 1", "Insert SimpleName: commentStart(351) into SingleVariableDeclaration(352) at 2", "Insert Modifier: final(353) into SingleVariableDeclaration(357) at 0", "Insert SimpleType: Character(355) into SingleVariableDeclaration(357) at 1", "Insert SimpleName: escape(356) into SingleVariableDeclaration(357) at 2", "Insert Modifier: final(358) into SingleVariableDeclaration(361) at 0", "Insert PrimitiveType: boolean(359) into SingleVariableDeclaration(361) at 1", "Insert SimpleName: ignoreSurroundingSpaces(360) into SingleVariableDeclaration(361) at 2", "Insert Modifier: final(362) into SingleVariableDeclaration(365) at 0", "Insert PrimitiveType: boolean(363) into SingleVariableDeclaration(365) at 1", "Insert SimpleName: ignoreEmptyLines(364) into SingleVariableDeclaration(365) at 2", "Insert Modifier: final(366) into SingleVariableDeclaration(370) at 0", "Insert SimpleType: String(368) into SingleVariableDeclaration(370) at 1", "Insert SimpleName: lineSeparator(369) into SingleVariableDeclaration(370) at 2", "Insert Modifier: final(371) into SingleVariableDeclaration(377) at 0", "Insert ArrayType: String[](375) into SingleVariableDeclaration(377) at 1", "Insert SimpleName: header(376) into SingleVariableDeclaration(377) at 2", "Insert IfStatement(387) into Block(442) at 0", "Insert ExpressionStatement(393) into Block(442) at 1", "Insert ExpressionStatement(399) into Block(442) at 2", "Insert ExpressionStatement(405) into Block(442) at 3", "Insert ExpressionStatement(411) into Block(442) at 4", "Insert ExpressionStatement(417) into Block(442) at 5", "Insert ExpressionStatement(423) into Block(442) at 6", "Insert ExpressionStatement(429) into Block(442) at 7", "Insert ExpressionStatement(435) into Block(442) at 8", "Insert ExpressionStatement(441) into Block(442) at 9", "Insert Modifier: private(856) into FieldDeclaration(860) at 0", "Insert PrimitiveType: char(857) into FieldDeclaration(860) at 1", "Insert VariableDeclarationFragment(859) into FieldDeclaration(860) at 2", "Insert Modifier: private(861) into FieldDeclaration(866) at 0", "Insert SimpleType: Character(863) into FieldDeclaration(866) at 1", "Insert VariableDeclarationFragment(865) into FieldDeclaration(866) at 2", "Insert Modifier: private(867) into FieldDeclaration(872) at 0", "Insert SimpleType: Quote(869) into FieldDeclaration(872) at 1", "Insert VariableDeclarationFragment(871) into FieldDeclaration(872) at 2", "Insert Modifier: private(873) into FieldDeclaration(878) at 0", "Insert SimpleType: Character(875) into FieldDeclaration(878) at 1", "Insert VariableDeclarationFragment(877) into FieldDeclaration(878) at 2", "Insert Modifier: private(879) into FieldDeclaration(884) at 0", "Insert SimpleType: Character(881) into FieldDeclaration(884) at 1", "Insert VariableDeclarationFragment(883) into FieldDeclaration(884) at 2", "Insert Modifier: private(885) into FieldDeclaration(889) at 0", "Insert PrimitiveType: boolean(886) into FieldDeclaration(889) at 1", "Insert VariableDeclarationFragment(888) into FieldDeclaration(889) at 2", "Insert Modifier: private(890) into FieldDeclaration(894) at 0", "Insert PrimitiveType: boolean(891) into FieldDeclaration(894) at 1", "Insert VariableDeclarationFragment(893) into FieldDeclaration(894) at 2", "Insert Modifier: private(895) into FieldDeclaration(900) at 0", "Insert SimpleType: String(897) into FieldDeclaration(900) at 1", "Insert VariableDeclarationFragment(899) into FieldDeclaration(900) at 2", "Insert Modifier: private(901) into FieldDeclaration(908) at 0", "Insert ArrayType: String[](905) into FieldDeclaration(908) at 1", "Insert VariableDeclarationFragment(907) into FieldDeclaration(908) at 2", "Insert Javadoc(942) into MethodDeclaration(1053) at 0", "Update SimpleName: CSVFormat(341) to CSVFormatBuilder", "Insert Javadoc(1063) into MethodDeclaration(1080) at 0", "Insert Modifier: private(1064) into MethodDeclaration(1080) at 1", "Insert SimpleName: CSVFormatBuilder(1065) into MethodDeclaration(1080) at 2", "Move SingleVariableDeclaration(294) into MethodDeclaration(1080) at 3", "Move Block(305) into MethodDeclaration(1080) at 4", "Insert Modifier: public(1081) into MethodDeclaration(1102) at 0", "Move SimpleType: CSVFormat(1100) into MethodDeclaration(1102) at 1", "Insert SimpleName: build(1084) into MethodDeclaration(1102) at 2", "Move Block(961) into MethodDeclaration(1102) at 3", "Insert Modifier: private(1108) into MethodDeclaration(1221) at 1", "Update SimpleType: CSVFormat(697) to CSVFormatBuilder", "Update SimpleName: withQuoteChar(698) to withDelimiter", "Move SingleVariableDeclaration(655) into MethodDeclaration(1260) at 4", "Insert Block(1259) into MethodDeclaration(1260) at 5", "Move Javadoc(722) into MethodDeclaration(1288) at 0", "Move Modifier: public(723) into MethodDeclaration(1288) at 1", "Update SimpleType: CSVFormat(725) to CSVFormatBuilder", "Move SimpleType: CSVFormat(725) into MethodDeclaration(1288) at 2", "Move SimpleName: withQuoteChar(726) into MethodDeclaration(1288) at 3", "Move SingleVariableDeclaration(702) into MethodDeclaration(1288) at 4", "Move Block(710) into MethodDeclaration(1288) at 5", "Insert Javadoc(1299) into MethodDeclaration(1328) at 0", "Insert Modifier: public(1300) into MethodDeclaration(1328) at 1", "Insert SimpleType: CSVFormatBuilder(1302) into MethodDeclaration(1328) at 2", "Insert SimpleName: withQuoteChar(1303) into MethodDeclaration(1328) at 3", "Move SingleVariableDeclaration(731) into MethodDeclaration(1328) at 4", "Insert Block(1327) into MethodDeclaration(1328) at 5", "Update SimpleType: CSVFormat(801) to CSVFormatBuilder", "Update SimpleType: CSVFormat(830) to CSVFormatBuilder", "Update SimpleType: CSVFormat(903) to CSVFormatBuilder", "Update SimpleType: CSVFormat(931) to CSVFormatBuilder", "Insert Block(1465) into MethodDeclaration(1466) at 5", "Update SimpleType: CSVFormat(1004) to CSVFormatBuilder", "Update SimpleName: withIgnoreSurroundingSpaces(1005) to withHeader", "Move SingleVariableDeclaration(1214) into MethodDeclaration(1501) at 4", "Update SimpleType: CSVFormat(1049) to CSVFormatBuilder", "Update SimpleName: withIgnoreEmptyLines(1050) to withIgnoreSurroundingSpaces", "Move SingleVariableDeclaration(1009) into MethodDeclaration(1528) at 4", "Update SimpleType: CSVFormat(1093) to CSVFormatBuilder", "Update SimpleName: withRecordSeparator(1094) to withIgnoreEmptyLines", "Move SingleVariableDeclaration(1054) into MethodDeclaration(1555) at 4", "Update SimpleType: CSVFormat(1127) to CSVFormatBuilder", "Move SingleVariableDeclaration(1098) into MethodDeclaration(1580) at 4", "Update SimpleType: CSVFormat(1159) to CSVFormatBuilder", "Update SimpleName: withQuotePolicy(1160) to withRecordSeparator", "Move SingleVariableDeclaration(1133) into MethodDeclaration(1607) at 4", "Update SimpleType: CSVFormat(1208) to CSVFormatBuilder", "Update SimpleName: withHeader(1209) to withQuotePolicy", "Move SingleVariableDeclaration(1165) into MethodDeclaration(1634) at 4", "Update SimpleName: withRecordSeparator(164) to build", "Insert MethodInvocation(149) into MethodInvocation(151) at 0", "Update SimpleName: withIgnoreEmptyLines(189) to build", "Update SimpleName: withRecordSeparator(223) to build", "Move MethodInvocation(246) into MethodInvocation(203) at 0", "Update SimpleName: withIgnoreEmptyLines(247) to build", "Move SimpleName: withIgnoreEmptyLines(247) into MethodInvocation(203) at 1", "Insert MethodInvocation(235) into MethodInvocation(237) at 0", "Insert SimpleName: build(236) into MethodInvocation(237) at 1", "Update TextElement: Creates a basic CSV format.(280) to Factory method for creating CSV formats.", "Insert ClassInstanceCreation(261) into ReturnStatement(262) at 0", "Update TextElement: Returns a copy of this format using the specified delimiter character.(637) to Standard comma separated format, as for ", "Move TextElement: Returns a copy of this format using the specified delimiter character.(637) into TagElement(276) at 0", "Insert TagElement: @link(268) into TagElement(276) at 1", "Insert TextElement:  but allowing blank lines.(269) into TagElement(276) at 2", "Insert TextElement: <ul>(270) into TagElement(276) at 3", "Update TextElement:  A copy of this format using the specified delimiter character(642) to <li>withDelimiter(',')</li>", "Move TextElement:  A copy of this format using the specified delimiter character(642) into TagElement(276) at 4", "Insert TextElement: <li>withQuoteChar('\"')</li>(272) into TagElement(276) at 5", "Insert TextElement: <li>withEmptyLinesIgnored(true)</li>(273) into TagElement(276) at 6", "Insert TextElement: <li>withLineSeparator(CRLF)</li>(274) into TagElement(276) at 7", "Insert TextElement: </ul>(275) into TagElement(276) at 8", "Insert ClassInstanceCreation(294) into ReturnStatement(295) at 0", "Insert SimpleName: Character(339) into SimpleType: Character(340) at 0", "Insert SimpleName: Quote(344) into SimpleType: Quote(345) at 0", "Insert SimpleName: Character(349) into SimpleType: Character(350) at 0", "Insert SimpleName: Character(354) into SimpleType: Character(355) at 0", "Insert SimpleName: String(367) into SimpleType: String(368) at 0", "Insert SimpleType: String(373) into ArrayType: String[](375) at 0", "Insert Dimension(374) into ArrayType: String[](375) at 1", "Insert MethodInvocation(380) into IfStatement(387) at 0", "Insert Block(386) into IfStatement(387) at 1", "Insert Assignment: =(392) into ExpressionStatement(393) at 0", "Insert Assignment: =(398) into ExpressionStatement(399) at 0", "Insert Assignment: =(404) into ExpressionStatement(405) at 0", "Insert Assignment: =(410) into ExpressionStatement(411) at 0", "Insert Assignment: =(416) into ExpressionStatement(417) at 0", "Insert Assignment: =(422) into ExpressionStatement(423) at 0", "Insert Assignment: =(428) into ExpressionStatement(429) at 0", "Insert Assignment: =(434) into ExpressionStatement(435) at 0", "Insert Assignment: =(440) into ExpressionStatement(441) at 0", "Insert SimpleName: delimiter(858) into VariableDeclarationFragment(859) at 0", "Insert SimpleName: Character(862) into SimpleType: Character(863) at 0", "Insert SimpleName: quoteChar(864) into VariableDeclarationFragment(865) at 0", "Insert SimpleName: Quote(868) into SimpleType: Quote(869) at 0", "Insert SimpleName: quotePolicy(870) into VariableDeclarationFragment(871) at 0", "Insert SimpleName: Character(874) into SimpleType: Character(875) at 0", "Insert SimpleName: commentStart(876) into VariableDeclarationFragment(877) at 0", "Insert SimpleName: Character(880) into SimpleType: Character(881) at 0", "Insert SimpleName: escape(882) into VariableDeclarationFragment(883) at 0", "Insert SimpleName: ignoreSurroundingSpaces(887) into VariableDeclarationFragment(888) at 0", "Insert SimpleName: ignoreEmptyLines(892) into VariableDeclarationFragment(893) at 0", "Insert SimpleName: String(896) into SimpleType: String(897) at 0", "Insert SimpleName: recordSeparator(898) into VariableDeclarationFragment(899) at 0", "Insert SimpleType: String(903) into ArrayType: String[](905) at 0", "Insert Dimension(904) into ArrayType: String[](905) at 1", "Insert SimpleName: header(906) into VariableDeclarationFragment(907) at 0", "Insert TagElement(910) into Javadoc(942) at 0", "Insert TagElement: @param(913) into Javadoc(942) at 1", "Insert TagElement: @param(916) into Javadoc(942) at 2", "Insert TagElement: @param(920) into Javadoc(942) at 3", "Insert TagElement: @param(923) into Javadoc(942) at 4", "Insert TagElement: @param(926) into Javadoc(942) at 5", "Insert TagElement: @param(929) into Javadoc(942) at 6", "Insert TagElement: @param(932) into Javadoc(942) at 7", "Insert TagElement: @param(935) into Javadoc(942) at 8", "Insert TagElement: @param(938) into Javadoc(942) at 9", "Insert TagElement: @throws(941) into Javadoc(942) at 10", "Insert TagElement(1055) into Javadoc(1063) at 0", "Insert TagElement: @param(1059) into Javadoc(1063) at 1", "Insert TagElement: @throws(1062) into Javadoc(1063) at 2", "Insert ExpressionStatement(1087) into Block(1101) at 0", "Move TagElement: @param(641) into Javadoc(1232) at 1", "Move TagElement: @throws(646) into Javadoc(1232) at 4", "Update SimpleName: CSVFormat(696) to CSVFormatBuilder", "Insert IfStatement(1250) into Block(1259) at 0", "Insert ExpressionStatement(1256) into Block(1259) at 1", "Insert ReturnStatement(1258) into Block(1259) at 2", "Move TagElement: @throws(927) into Javadoc(1271) at 3", "Update SimpleName: CSVFormat(724) to CSVFormatBuilder", "Insert TagElement(1290) into Javadoc(1299) at 0", "Move TagElement: @param(688) into Javadoc(1299) at 1", "Insert TagElement: @return(1295) into Javadoc(1299) at 2", "Move TagElement: @throws(899) into Javadoc(1299) at 3", "Update SimpleName: CSVFormat(742) to CSVFormatBuilder", "Move SimpleName: CSVFormat(742) into SimpleType: CSVFormatBuilder(1302) at 0", "Move IfStatement(741) into Block(1327) at 0", "Insert ExpressionStatement(1324) into Block(1327) at 1", "Insert ReturnStatement(1326) into Block(1327) at 2", "Move TagElement: @param(821) into Javadoc(1340) at 1", "Move TagElement: @throws(826) into Javadoc(1340) at 4", "Update SimpleName: CSVFormat(800) to CSVFormatBuilder", "Move TagElement: @param(792) into Javadoc(1369) at 1", "Move TagElement: @throws(797) into Javadoc(1369) at 3", "Update SimpleName: CSVFormat(829) to CSVFormatBuilder", "Insert ExpressionStatement(1394) into Block(1397) at 1", "Insert ReturnStatement(1396) into Block(1397) at 2", "Move TagElement: @param(922) into Javadoc(1409) at 1", "Move TagElement: @throws(721) into Javadoc(1409) at 4", "Update SimpleName: CSVFormat(902) to CSVFormatBuilder", "Move TagElement: @param(894) into Javadoc(1437) at 1", "Move TagElement: @throws(693) into Javadoc(1437) at 3", "Update SimpleName: CSVFormat(930) to CSVFormatBuilder", "Move IfStatement(947) into Block(1465) at 0", "Insert ExpressionStatement(1462) into Block(1465) at 1", "Insert ReturnStatement(1464) into Block(1465) at 2", "Move TagElement: @param(1202) into Javadoc(1482) at 1", "Update SimpleName: CSVFormat(1003) to CSVFormatBuilder", "Insert ExpressionStatement(1497) into Block(1500) at 0", "Insert ReturnStatement(1499) into Block(1500) at 1", "Move TagElement: @param(998) into Javadoc(1510) at 1", "Update SimpleName: CSVFormat(1048) to CSVFormatBuilder", "Insert ExpressionStatement(1524) into Block(1527) at 0", "Insert ReturnStatement(1526) into Block(1527) at 1", "Move TagElement: @param(1043) into Javadoc(1537) at 1", "Update SimpleName: CSVFormat(1092) to CSVFormatBuilder", "Insert ExpressionStatement(1551) into Block(1554) at 0", "Insert ReturnStatement(1553) into Block(1554) at 1", "Update SimpleName: CSVFormat(1126) to CSVFormatBuilder", "Move TagElement: @param(1087) into Javadoc(1588) at 1", "Update SimpleName: CSVFormat(1158) to CSVFormatBuilder", "Insert ExpressionStatement(1603) into Block(1606) at 0", "Insert ReturnStatement(1605) into Block(1606) at 1", "Move TagElement: @param(1153) into Javadoc(1615) at 1", "Update SimpleName: CSVFormat(1207) to CSVFormatBuilder", "Insert ExpressionStatement(1630) into Block(1633) at 0", "Insert ReturnStatement(1632) into Block(1633) at 1", "Update SimpleName: withQuoteChar(161) to withIgnoreEmptyLines", "Insert BooleanLiteral: false(123) into MethodInvocation(124) at 2", "Update SimpleName: RFC4180(188) to defaults", "Move SimpleName: RFC4180(188) into MethodInvocation(149) at 0", "Update SimpleName: withQuoteChar(220) to withIgnoreEmptyLines", "Insert BooleanLiteral: false(179) into MethodInvocation(180) at 2", "Move MethodInvocation(240) into MethodInvocation(201) at 0", "Insert MethodInvocation(232) into MethodInvocation(235) at 0", "Move SimpleName: withRecordSeparator(275) into MethodInvocation(235) at 1", "Move SimpleName: LF(276) into MethodInvocation(235) at 2", "Insert SimpleType: CSVFormatBuilder(259) into ClassInstanceCreation(261) at 0", "Insert SimpleName: delimiter(260) into ClassInstanceCreation(261) at 1", "Insert MemberRef(267) into TagElement: @link(268) at 0", "Insert SimpleType: CSVFormatBuilder(284) into ClassInstanceCreation(294) at 0", "Insert SimpleName: COMMA(285) into ClassInstanceCreation(294) at 1", "Insert SimpleName: DOUBLE_QUOTE(286) into ClassInstanceCreation(294) at 2", "Insert NullLiteral(287) into ClassInstanceCreation(294) at 3", "Insert NullLiteral(288) into ClassInstanceCreation(294) at 4", "Insert NullLiteral(289) into ClassInstanceCreation(294) at 5", "Insert BooleanLiteral: false(290) into ClassInstanceCreation(294) at 6", "Insert BooleanLiteral: true(291) into ClassInstanceCreation(294) at 7", "Insert SimpleName: CRLF(292) into ClassInstanceCreation(294) at 8", "Insert NullLiteral(293) into ClassInstanceCreation(294) at 9", "Insert SimpleName: String(372) into SimpleType: String(373) at 0", "Insert SimpleName: isLineBreak(378) into MethodInvocation(380) at 0", "Insert SimpleName: delimiter(379) into MethodInvocation(380) at 1", "Insert ThrowStatement(385) into Block(386) at 0", "Insert FieldAccess(390) into Assignment: =(392) at 0", "Insert SimpleName: delimiter(391) into Assignment: =(392) at 1", "Insert FieldAccess(396) into Assignment: =(398) at 0", "Insert SimpleName: quoteChar(397) into Assignment: =(398) at 1", "Insert FieldAccess(402) into Assignment: =(404) at 0", "Insert SimpleName: quotePolicy(403) into Assignment: =(404) at 1", "Insert FieldAccess(408) into Assignment: =(410) at 0", "Insert SimpleName: commentStart(409) into Assignment: =(410) at 1", "Insert FieldAccess(414) into Assignment: =(416) at 0", "Insert SimpleName: escape(415) into Assignment: =(416) at 1", "Insert FieldAccess(420) into Assignment: =(422) at 0", "Insert SimpleName: ignoreSurroundingSpaces(421) into Assignment: =(422) at 1", "Insert FieldAccess(426) into Assignment: =(428) at 0", "Insert SimpleName: ignoreEmptyLines(427) into Assignment: =(428) at 1", "Insert FieldAccess(432) into Assignment: =(434) at 0", "Insert SimpleName: lineSeparator(433) into Assignment: =(434) at 1", "Insert FieldAccess(438) into Assignment: =(440) at 0", "Insert SimpleName: header(439) into Assignment: =(440) at 1", "Insert SimpleName: String(902) into SimpleType: String(903) at 0", "Insert TextElement: Creates a customized CSV format.(909) into TagElement(910) at 0", "Insert SimpleName: delimiter(911) into TagElement: @param(913) at 0", "Insert TextElement: the char used for value separation, must not be a line break character(912) into TagElement: @param(913) at 1", "Insert SimpleName: quoteChar(914) into TagElement: @param(916) at 0", "Insert TextElement: the char used as value encapsulation marker(915) into TagElement: @param(916) at 1", "Insert SimpleName: quotePolicy(917) into TagElement: @param(920) at 0", "Insert TextElement:  (918) into TagElement: @param(920) at 1", "Insert TextElement: the quote policy(919) into TagElement: @param(920) at 2", "Insert SimpleName: commentStart(921) into TagElement: @param(923) at 0", "Insert TextElement: the char used for comment identification(922) into TagElement: @param(923) at 1", "Insert SimpleName: escape(924) into TagElement: @param(926) at 0", "Insert TextElement: the char used to escape special characters in values(925) into TagElement: @param(926) at 1", "Insert SimpleName: ignoreSurroundingSpaces(927) into TagElement: @param(929) at 0", "Insert TextElement: <tt>true</tt> when whitespaces enclosing values should be ignored(928) into TagElement: @param(929) at 1", "Insert SimpleName: ignoreEmptyLines(930) into TagElement: @param(932) at 0", "Insert TextElement: <tt>true</tt> when the parser should skip empty lines(931) into TagElement: @param(932) at 1", "Insert SimpleName: recordSeparator(933) into TagElement: @param(935) at 0", "Insert TextElement: the line separator to use for output(934) into TagElement: @param(935) at 1", "Insert SimpleName: header(936) into TagElement: @param(938) at 0", "Insert TextElement: the header(937) into TagElement: @param(938) at 1", "Insert SimpleName: IllegalArgumentException(939) into TagElement: @throws(941) at 0", "Insert TextElement:  if the delimiter is a line break character(940) into TagElement: @throws(941) at 1", "Insert TextElement: Creates a basic CSVFormatBuilder.(1054) into TagElement(1055) at 0", "Insert SimpleName: delimiter(1056) into TagElement: @param(1059) at 0", "Insert TextElement:  (1057) into TagElement: @param(1059) at 1", "Insert TextElement: the char used for value separation, must not be a line break character(1058) into TagElement: @param(1059) at 2", "Insert SimpleName: IllegalArgumentException(1060) into TagElement: @throws(1062) at 0", "Insert TextElement:  if the delimiter is a line break character(1061) into TagElement: @throws(1062) at 1", "Insert MethodInvocation(1086) into ExpressionStatement(1087) at 0", "Update TextElement: Returns a copy of this format using the specified quoteChar character.(684) to Sets the delimiter of the format to the specified character.", "Update TextElement:  A copy of this format using the specified quoteChar character(689) to  This builder with the specified character as delimiter", "Insert MethodInvocation(1243) into IfStatement(1250) at 0", "Insert Block(1249) into IfStatement(1250) at 1", "Insert Assignment: =(1255) into ExpressionStatement(1256) at 0", "Insert ThisExpression(1257) into ReturnStatement(1258) at 0", "Update TextElement: Returns a copy of this format using the specified quoteChar character.(712) to Sets the quoteChar of the format to the specified character.", "Update TextElement:  A copy of this format using the specified quoteChar character(717) to  This builder with the specified character as quoteChar", "Insert TextElement: Sets the quoteChar of the format to the specified character.(1289) into TagElement(1290) at 0", "Insert TextElement:  This builder with the specified character as quoteChar(1294) into TagElement: @return(1295) at 0", "Insert Assignment: =(1323) into ExpressionStatement(1324) at 0", "Insert ThisExpression(1325) into ReturnStatement(1326) at 0", "Update TextElement: Returns a copy of this format using the specified character as the comment start marker.(787) to Sets the comment start marker of the format to the specified character.", "Update TextElement:  A copy of this format using the specified character as the comment start marker(793) to  This builder with the specified character as the comment start marker", "Update TextElement: Returns a copy of this format using the specified character as the comment start marker.(816) to Sets the comment start marker of the format to the specified character.", "Update TextElement:  A copy of this format using the specified character as the comment start marker(822) to  This builder with the specified character as the comment start marker", "Insert Assignment: =(1393) into ExpressionStatement(1394) at 0", "Insert ThisExpression(1395) into ReturnStatement(1396) at 0", "Update TextElement: Returns a copy of this format using the specified escape character.(890) to Sets the escape character of the format to the specified character.", "Update TextElement:  A copy of this format using the specified escape character(895) to  This builder with the specified character as the escape character", "Update TextElement: Returns a copy of this format using the specified escape character.(918) to Sets the escape character of the format to the specified character.", "Update TextElement:  A copy of this format using the specified escape character(923) to  This builder with the specified character as the escape character", "Insert Assignment: =(1461) into ExpressionStatement(1462) at 0", "Insert ThisExpression(1463) into ReturnStatement(1464) at 0", "Insert TextElement: Sets the header of the format. The header can either be parsed automatically from the(1467) into TagElement(1476) at 0", "Insert TextElement: input file with:(1468) into TagElement(1476) at 1", "Insert TextElement: <pre>(1469) into TagElement(1476) at 2", "Insert TextElement: CSVFormat format = aformat.withHeader();(1470) into TagElement(1476) at 3", "Insert TextElement: </pre>(1471) into TagElement(1476) at 4", "Update TextElement: Returns a copy of this format with the specified trimming behavior.(993) to or specified manually with:", "Insert TextElement: <pre>(1473) into TagElement(1476) at 6", "Insert TextElement: CSVFormat format = aformat.withHeader(&quot;name&quot;, &quot;email&quot;, &quot;phone&quot;);(1474) into TagElement(1476) at 7", "Insert TextElement: </pre>(1475) into TagElement(1476) at 8", "Update TextElement:  A copy of this format with the specified trimming behavior.(999) to  This builder with the specified header", "Insert Assignment: =(1496) into ExpressionStatement(1497) at 0", "Insert ThisExpression(1498) into ReturnStatement(1499) at 0", "Update TextElement: Returns a copy of this format with the specified empty line skipping behavior.(1038) to Sets the trimming behavior of the format.", "Update TextElement:  A copy of this format with the specified empty line skipping behavior.(1044) to  This builder with the specified trimming behavior.", "Insert Assignment: =(1523) into ExpressionStatement(1524) at 0", "Insert ThisExpression(1525) into ReturnStatement(1526) at 0", "Update TextElement: Returns a copy of this format using the specified output record separator.(1083) to Sets the empty line skipping behavior of the format.", "Update TextElement:  A copy of this format using the specified output record separator(1088) to  This builder with the specified empty line skipping behavior.", "Insert Assignment: =(1550) into ExpressionStatement(1551) at 0", "Insert ThisExpression(1552) into ReturnStatement(1553) at 0", "Update TextElement: Returns a copy of this format using the specified output record separator.(1117) to Sets the record separator of the format to the specified character.", "Update TextElement:  A copy of this format using the specified output record separator(1122) to  This builder with the the specified output record separator", "Insert MethodInvocation(1577) into ReturnStatement(1578) at 0", "Update TextElement: Returns a copy of this format using the specified output quote policy.(1149) to Sets the record separator of the format to the specified String.", "Update TextElement:  A copy of this format using the specified output line separator(1154) to  This builder with the the specified output record separator", "Insert Assignment: =(1602) into ExpressionStatement(1603) at 0", "Insert ThisExpression(1604) into ReturnStatement(1605) at 0", "Update TextElement: Returns a copy of this format using the specified header. The header can either be parsed automatically from the(1190) to Sets the output quote policy of the format to the specified value.", "Update TextElement:  A copy of this format using the specified header(1203) to  This builder with the specified quote policy", "Insert Assignment: =(1629) into ExpressionStatement(1630) at 0", "Insert ThisExpression(1631) into ReturnStatement(1632) at 0", "Update SimpleName: PRISTINE(157) to defaults", "Update SimpleName: PRISTINE(216) to defaults", "Insert MethodInvocation(195) into MethodInvocation(198) at 0", "Move MethodInvocation(274) into MethodInvocation(232) at 0", "Insert SimpleName: withIgnoreEmptyLines(230) into MethodInvocation(232) at 1", "Insert BooleanLiteral: false(231) into MethodInvocation(232) at 2", "Insert SimpleName: CSVFormatBuilder(258) into SimpleType: CSVFormatBuilder(259) at 0", "Insert SimpleName: RFC4180(266) into MemberRef(267) at 0", "Insert SimpleName: CSVFormatBuilder(283) into SimpleType: CSVFormatBuilder(284) at 0", "Insert ClassInstanceCreation(384) into ThrowStatement(385) at 0", "Insert ThisExpression(388) into FieldAccess(390) at 0", "Insert SimpleName: delimiter(389) into FieldAccess(390) at 1", "Insert ThisExpression(394) into FieldAccess(396) at 0", "Insert SimpleName: quoteChar(395) into FieldAccess(396) at 1", "Insert ThisExpression(400) into FieldAccess(402) at 0", "Insert SimpleName: quotePolicy(401) into FieldAccess(402) at 1", "Insert ThisExpression(406) into FieldAccess(408) at 0", "Insert SimpleName: commentStart(407) into FieldAccess(408) at 1", "Insert ThisExpression(412) into FieldAccess(414) at 0", "Insert SimpleName: escape(413) into FieldAccess(414) at 1", "Insert ThisExpression(418) into FieldAccess(420) at 0", "Insert SimpleName: ignoreSurroundingSpaces(419) into FieldAccess(420) at 1", "Insert ThisExpression(424) into FieldAccess(426) at 0", "Insert SimpleName: ignoreEmptyLines(425) into FieldAccess(426) at 1", "Insert ThisExpression(430) into FieldAccess(432) at 0", "Insert SimpleName: recordSeparator(431) into FieldAccess(432) at 1", "Insert ThisExpression(436) into FieldAccess(438) at 0", "Insert SimpleName: header(437) into FieldAccess(438) at 1", "Insert SimpleName: validate(1085) into MethodInvocation(1086) at 0", "Insert SimpleName: isLineBreak(1241) into MethodInvocation(1243) at 0", "Insert SimpleName: delimiter(1242) into MethodInvocation(1243) at 1", "Insert ThrowStatement(1248) into Block(1249) at 0", "Insert FieldAccess(1253) into Assignment: =(1255) at 0", "Insert SimpleName: delimiter(1254) into Assignment: =(1255) at 1", "Insert FieldAccess(1321) into Assignment: =(1323) at 0", "Insert SimpleName: quoteChar(1322) into Assignment: =(1323) at 1", "Insert FieldAccess(1391) into Assignment: =(1393) at 0", "Insert SimpleName: commentStart(1392) into Assignment: =(1393) at 1", "Insert FieldAccess(1459) into Assignment: =(1461) at 0", "Insert SimpleName: escape(1460) into Assignment: =(1461) at 1", "Insert FieldAccess(1494) into Assignment: =(1496) at 0", "Insert SimpleName: header(1495) into Assignment: =(1496) at 1", "Insert FieldAccess(1521) into Assignment: =(1523) at 0", "Insert SimpleName: ignoreSurroundingSpaces(1522) into Assignment: =(1523) at 1", "Insert FieldAccess(1548) into Assignment: =(1550) at 0", "Insert SimpleName: ignoreEmptyLines(1549) into Assignment: =(1550) at 1", "Insert SimpleName: withRecordSeparator(1572) into MethodInvocation(1577) at 0", "Move MethodInvocation(1111) into MethodInvocation(1577) at 1", "Insert FieldAccess(1600) into Assignment: =(1602) at 0", "Insert SimpleName: recordSeparator(1601) into Assignment: =(1602) at 1", "Insert FieldAccess(1627) into Assignment: =(1629) at 0", "Insert SimpleName: quotePolicy(1628) into Assignment: =(1629) at 1", "Update SimpleName: PRISTINE(237) to defaults", "Move SimpleName: PRISTINE(237) into MethodInvocation(195) at 0", "Insert MethodInvocation(226) into MethodInvocation(229) at 0", "Update SimpleType: CSVFormat(657) to IllegalArgumentException", "Move SimpleType: CSVFormat(657) into ClassInstanceCreation(384) at 0", "Insert StringLiteral: \"The delimiter cannot be a line break\"(383) into ClassInstanceCreation(384) at 1", "Insert ClassInstanceCreation(1247) into ThrowStatement(1248) at 0", "Insert ThisExpression(1251) into FieldAccess(1253) at 0", "Insert SimpleName: delimiter(1252) into FieldAccess(1253) at 1", "Insert ThisExpression(1319) into FieldAccess(1321) at 0", "Insert SimpleName: quoteChar(1320) into FieldAccess(1321) at 1", "Insert ThisExpression(1389) into FieldAccess(1391) at 0", "Insert SimpleName: commentStart(1390) into FieldAccess(1391) at 1", "Insert ThisExpression(1457) into FieldAccess(1459) at 0", "Insert SimpleName: escape(1458) into FieldAccess(1459) at 1", "Insert ThisExpression(1492) into FieldAccess(1494) at 0", "Insert SimpleName: header(1493) into FieldAccess(1494) at 1", "Insert ThisExpression(1519) into FieldAccess(1521) at 0", "Insert SimpleName: ignoreSurroundingSpaces(1520) into FieldAccess(1521) at 1", "Insert ThisExpression(1546) into FieldAccess(1548) at 0", "Insert SimpleName: ignoreEmptyLines(1547) into FieldAccess(1548) at 1", "Insert ThisExpression(1598) into FieldAccess(1600) at 0", "Insert SimpleName: recordSeparator(1599) into FieldAccess(1600) at 1", "Insert ThisExpression(1625) into FieldAccess(1627) at 0", "Insert SimpleName: quotePolicy(1626) into FieldAccess(1627) at 1", "Move MethodInvocation(271) into MethodInvocation(226) at 0", "Insert SimpleName: withQuoteChar(224) into MethodInvocation(226) at 1", "Insert NullLiteral(225) into MethodInvocation(226) at 2", "Update SimpleName: CSVFormat(656) to IllegalArgumentException", "Insert SimpleType: IllegalArgumentException(1245) into ClassInstanceCreation(1247) at 0", "Insert StringLiteral: \"The delimiter cannot be a line break\"(1246) into ClassInstanceCreation(1247) at 1", "Insert MethodInvocation(220) into MethodInvocation(223) at 0", "Insert SimpleName: IllegalArgumentException(1244) into SimpleType: IllegalArgumentException(1245) at 0", "Update SimpleName: PRISTINE(268) to defaults", "Move SimpleName: PRISTINE(268) into MethodInvocation(220) at 0", "Delete TextElement: Constant char to use for disabling comments, escapes and encapsulation. The value -2 is used because it(42)", "Delete TextElement: won't be confused with an EOF signal (-1), and because the Unicode value (43)", "Delete TextElement:  FFFE(44)", "Delete TagElement: @code(45)", "Delete TextElement:  would be encoded as two chars(46)", "Delete TextElement: (using surrogates) and thus there should never be a collision with a real text char.(47)", "Delete TagElement(48)", "Delete Javadoc(49)", "Delete Modifier: private(50)", "Delete Modifier: static(51)", "Delete Modifier: final(52)", "Delete PrimitiveType: char(53)", "Delete SimpleName: DISABLED(54)", "Delete CharacterLiteral: '\\ufffe'(55)", "Delete VariableDeclarationFragment(56)", "Delete FieldDeclaration(57)", "Delete TextElement: Starting format; used for creating other formats.(120)", "Delete TagElement(121)", "Delete Javadoc(122)", "Delete Modifier: private(123)", "Delete Modifier: static(124)", "Delete Modifier: final(125)", "Delete SimpleName: PRISTINE(128)", "Delete SimpleName: CSVFormat(129)", "Delete SimpleType: CSVFormat(130)", "Delete SimpleName: DISABLED(131)", "Delete NullLiteral(132)", "Delete NullLiteral(133)", "Delete NullLiteral(134)", "Delete NullLiteral(135)", "Delete BooleanLiteral: false(136)", "Delete BooleanLiteral: false(137)", "Delete NullLiteral(138)", "Delete NullLiteral(139)", "Delete ClassInstanceCreation(140)", "Delete VariableDeclarationFragment(141)", "Delete FieldDeclaration(142)", "Delete SimpleName: withDelimiter(158)", "Delete SimpleName: COMMA(159)", "Delete SimpleName: DOUBLE_QUOTE(162)", "Delete SimpleName: CRLF(165)", "Delete SimpleName: CSVFormat(185)", "Delete SimpleType: CSVFormat(186)", "Delete BooleanLiteral: true(190)", "Delete SimpleName: withDelimiter(217)", "Delete SimpleName: COMMA(218)", "Delete SimpleName: DOUBLE_QUOTE(221)", "Delete SimpleName: CRLF(224)", "Delete SimpleName: withQuoteChar(241)", "Delete SimpleName: DOUBLE_QUOTE(242)", "Delete MethodInvocation(243)", "Delete BooleanLiteral: true(248)", "Delete MethodInvocation(249)", "Delete SimpleName: withRecordSeparator(250)", "Delete SimpleName: CRLF(251)", "Delete MethodInvocation(252)", "Delete MethodInvocation(277)", "Delete SimpleName: CSVFormat(291)", "Delete TagElement(638)", "Delete TagElement: @return(643)", "Delete SimpleName: delimiter(658)", "Delete SimpleName: quoteChar(659)", "Delete SimpleName: quotePolicy(660)", "Delete SimpleName: commentStart(661)", "Delete SimpleName: escape(662)", "Delete SimpleName: ignoreSurroundingSpaces(663)", "Delete SimpleName: ignoreEmptyLines(664)", "Delete SimpleName: recordSeparator(665)", "Delete SimpleName: header(666)", "Delete ClassInstanceCreation(667)", "Delete ReturnStatement(668)", "Delete SimpleName: withDelimiter(651)", "Delete MethodDeclaration(670)", "Delete SimpleType: CSVFormat(743)", "Delete SimpleName: delimiter(744)", "Delete SimpleName: quoteChar(745)", "Delete SimpleName: quotePolicy(746)", "Delete SimpleName: commentStart(747)", "Delete SimpleName: escape(748)", "Delete SimpleName: ignoreSurroundingSpaces(749)", "Delete SimpleName: ignoreEmptyLines(750)", "Delete SimpleName: recordSeparator(751)", "Delete SimpleName: header(752)", "Delete ClassInstanceCreation(753)", "Delete ReturnStatement(754)", "Delete Block(755)", "Delete MethodDeclaration(756)", "Delete SimpleName: CSVFormat(847)", "Delete SimpleType: CSVFormat(848)", "Delete SimpleName: delimiter(849)", "Delete SimpleName: quoteChar(850)", "Delete SimpleName: quotePolicy(851)", "Delete SimpleName: commentStart(852)", "Delete SimpleName: escape(853)", "Delete SimpleName: ignoreSurroundingSpaces(854)", "Delete SimpleName: ignoreEmptyLines(855)", "Delete SimpleName: recordSeparator(856)", "Delete SimpleName: header(857)", "Delete ClassInstanceCreation(858)", "Delete ReturnStatement(859)", "Delete SimpleName: CSVFormat(1010)", "Delete SimpleType: CSVFormat(1011)", "Delete SimpleName: delimiter(1012)", "Delete SimpleName: quoteChar(1013)", "Delete SimpleName: quotePolicy(1014)", "Delete SimpleName: commentStart(1015)", "Delete SimpleName: escape(1016)", "Delete SimpleName: ignoreSurroundingSpaces(1017)", "Delete SimpleName: ignoreEmptyLines(1018)", "Delete SimpleName: recordSeparator(1019)", "Delete SimpleName: header(1020)", "Delete ClassInstanceCreation(1021)", "Delete ReturnStatement(1022)", "Delete SimpleName: CSVFormat(1055)", "Delete SimpleType: CSVFormat(1056)", "Delete SimpleName: delimiter(1057)", "Delete SimpleName: quoteChar(1058)", "Delete SimpleName: quotePolicy(1059)", "Delete SimpleName: commentStart(1060)", "Delete SimpleName: escape(1061)", "Delete SimpleName: ignoreSurroundingSpaces(1062)", "Delete SimpleName: ignoreEmptyLines(1063)", "Delete SimpleName: recordSeparator(1064)", "Delete SimpleName: header(1065)", "Delete ClassInstanceCreation(1066)", "Delete ReturnStatement(1067)", "Delete SimpleName: delimiter(1101)", "Delete SimpleName: quoteChar(1102)", "Delete SimpleName: quotePolicy(1103)", "Delete SimpleName: commentStart(1104)", "Delete SimpleName: escape(1105)", "Delete SimpleName: ignoreSurroundingSpaces(1106)", "Delete SimpleName: ignoreEmptyLines(1107)", "Delete SimpleName: header(1112)", "Delete ClassInstanceCreation(1113)", "Delete ReturnStatement(1114)", "Delete SimpleName: CSVFormat(1134)", "Delete SimpleType: CSVFormat(1135)", "Delete SimpleName: delimiter(1136)", "Delete SimpleName: quoteChar(1137)", "Delete SimpleName: quotePolicy(1138)", "Delete SimpleName: commentStart(1139)", "Delete SimpleName: escape(1140)", "Delete SimpleName: ignoreSurroundingSpaces(1141)", "Delete SimpleName: ignoreEmptyLines(1142)", "Delete SimpleName: recordSeparator(1143)", "Delete SimpleName: header(1144)", "Delete ClassInstanceCreation(1145)", "Delete SimpleName: CSVFormat(1166)", "Delete SimpleType: CSVFormat(1167)", "Delete SimpleName: delimiter(1168)", "Delete SimpleName: quoteChar(1169)", "Delete SimpleName: quotePolicy(1170)", "Delete SimpleName: commentStart(1171)", "Delete SimpleName: escape(1172)", "Delete SimpleName: ignoreSurroundingSpaces(1173)", "Delete SimpleName: ignoreEmptyLines(1174)", "Delete SimpleName: recordSeparator(1175)", "Delete SimpleName: header(1176)", "Delete ClassInstanceCreation(1177)", "Delete ReturnStatement(1178)", "Delete TextElement: input file with:(1191)", "Delete TextElement: <pre>(1192)", "Delete TextElement: CSVFormat format = aformat.withHeader();(1193)", "Delete TextElement: </pre>(1194)", "Delete TextElement: or specified manually with:(1195)", "Delete TextElement: <pre>(1196)", "Delete TextElement: CSVFormat format = aformat.withHeader(&quot;name&quot;, &quot;email&quot;, &quot;phone&quot;);(1197)", "Delete TextElement: </pre>(1198)", "Delete SimpleName: CSVFormat(1215)", "Delete SimpleType: CSVFormat(1216)", "Delete SimpleName: delimiter(1217)", "Delete SimpleName: quoteChar(1218)", "Delete SimpleName: quotePolicy(1219)", "Delete SimpleName: commentStart(1220)", "Delete SimpleName: escape(1221)", "Delete SimpleName: ignoreSurroundingSpaces(1222)", "Delete SimpleName: ignoreEmptyLines(1223)", "Delete SimpleName: recordSeparator(1224)", "Delete SimpleName: header(1225)", "Delete ClassInstanceCreation(1226)", "Delete ReturnStatement(1227)"]}}, {"CSVParser_cluster": {"actions": [{"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: validate", "DEL SimpleName: format", "DEL MethodInvocation", "DEL ExpressionStatement"]}]}}, {"CSVParser_diff": {"operations": ["Delete SimpleName: format(171)", "Delete SimpleName: validate(172)", "Delete MethodInvocation(173)", "Delete ExpressionStatement(174)"]}}, {"CSVPrinter_cluster": {"actions": [{"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: validate", "DEL FieldAccess", "DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleName: format"]}]}}, {"CSVPrinter_diff": {"operations": ["Delete ThisExpression(108)", "Delete SimpleName: format(109)", "Delete FieldAccess(110)", "Delete SimpleName: validate(111)", "Delete MethodInvocation(112)", "Delete ExpressionStatement(113)"]}}], "commit_stats": [{"total_files": 10, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}