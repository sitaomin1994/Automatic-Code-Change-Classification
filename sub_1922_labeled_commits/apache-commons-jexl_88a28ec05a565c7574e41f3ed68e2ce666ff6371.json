{"application": "apache-commons-jexl", "csha": "88a28ec05a565c7574e41f3ed68e2ce666ff6371", "files": [{"Interpreter_cluster": {"actions": [{"root": "INS IfStatement to Block at 0", "operations": ["INS SimpleType: JexlMethod to CastExpression at 0", "INS SimpleType: Object to VariableDeclarationStatement at 0", "INS IfStatement to Block at 1", "INS IfStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: JexlMethod to SimpleType: JexlMethod at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: cache to IfStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to IfStatement at 1", "INS SimpleName: tryFailed to MethodInvocation at 1", "INS IfStatement to Block at 0", "INS NullLiteral to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: mctor to MethodInvocation at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: mctor to MethodInvocation at 0", "INS SimpleName: eval to ReturnStatement at 0", "INS SimpleName: eval to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS SimpleName: JexlMethod to SimpleType: JexlMethod at 0", "INS SimpleName: cached to VariableDeclarationFragment at 0", "INS SimpleName: cached to InstanceofExpression at 0", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: JexlMethod to SimpleType: JexlMethod at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: JexlMethod to VariableDeclarationStatement at 0", "INS SimpleName: cobject to MethodInvocation at 3", "INS SimpleName: eval to VariableDeclarationFragment at 0", "INS SimpleName: jjtGetValue to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleType: Object to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: mctor to VariableDeclarationFragment at 0", "INS SimpleName: cached to CastExpression at 1", "INS SimpleName: node to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: tryInvoke to MethodInvocation at 1", "INS SimpleName: argv to MethodInvocation at 4", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: JexlMethod to InstanceofExpression at 1", "INS MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "INS SimpleType: JexlMethod to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: JexlMethod to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleType: JexlMethod to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: JexlMethod to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from Constructor to JexlMethod", "operations": ["UPD SimpleName: Constructor from Constructor to JexlMethod", "UPD SimpleName: Constructor from Constructor to JexlMethod"]}, {"root": "MOVE from SimpleType: JexlMethod", "operations": ["MOV SimpleName: Constructor to SimpleType: JexlMethod at 0"]}, {"root": "MOVE from SimpleType: JexlMethod", "operations": ["MOV SimpleName: Constructor to SimpleType: JexlMethod at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: cobject to MethodInvocation at 2", "INS SimpleType: Object to VariableDeclarationStatement at 0", "INS SimpleName: instance to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS InfixExpression: && to IfStatement at 0", "INS SimpleName: jjtSetValue to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: node to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS IfStatement to Block at 1", "INS SimpleName: ctor to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: cache to InfixExpression: && at 0", "INS SimpleName: isCacheable to MethodInvocation at 1", "INS SimpleName: ctor to MethodInvocation at 2"]}, {"root": "INS ReturnStatement to Block at 2", "operations": ["INS ReturnStatement to Block at 2", "INS SimpleName: instance to ReturnStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: argv to MethodInvocation at 3", "MOV SimpleName: newInstance to MethodInvocation at 1", "MOV SimpleName: ctor to MethodInvocation at 0"]}, {"root": "UPDATE from newInstance to invoke", "operations": ["UPD SimpleName: newInstance from newInstance to invoke"]}, {"root": "INS SimpleName: invoke to MethodInvocation at 1", "operations": ["INS SimpleName: invoke to MethodInvocation at 1"]}, {"root": "UPDATE from newInstance to namespace", "operations": ["UPD SimpleName: newInstance from newInstance to namespace"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Constructor"]}, {"root": "DEL ParameterizedType: Constructor<?>", "operations": ["DEL WildcardType: ?", "DEL ParameterizedType: Constructor<?>", "DEL SimpleType: Constructor"]}, {"root": "DEL ParameterizedType: Constructor<?>", "operations": ["DEL ParameterizedType: Constructor<?>", "DEL WildcardType: ?", "DEL SimpleType: Constructor"]}, {"root": "DEL ReturnStatement", "operations": ["DEL MethodInvocation", "DEL ReturnStatement"]}]}}, {"Interpreter_diff": {"operations": ["Insert IfStatement(4738) into Block(4814) at 0", "Insert SimpleType: JexlMethod(1008) into VariableDeclarationStatement(1017) at 0", "Insert SimpleName: cache(4693) into IfStatement(4738) at 0", "Insert Block(4737) into IfStatement(4738) at 1", "Insert SimpleType: JexlMethod(4740) into VariableDeclarationStatement(4749) at 0", "Update SimpleName: Constructor(1009) to JexlMethod", "Move SimpleName: Constructor(1009) into SimpleType: JexlMethod(1008) at 0", "Insert VariableDeclarationStatement(4701) into Block(4737) at 0", "Insert IfStatement(4736) into Block(4737) at 1", "Update SimpleName: Constructor(4696) to JexlMethod", "Move SimpleName: Constructor(4696) into SimpleType: JexlMethod(4740) at 0", "Insert VariableDeclarationStatement(4797) into Block(4812) at 0", "Insert IfStatement(4809) into Block(4812) at 1", "Insert ReturnStatement(4811) into Block(4812) at 2", "Insert SimpleType: Object(4695) into VariableDeclarationStatement(4701) at 0", "Insert VariableDeclarationFragment(4700) into VariableDeclarationStatement(4701) at 1", "Insert InstanceofExpression(4705) into IfStatement(4736) at 0", "Insert Block(4735) into IfStatement(4736) at 1", "Insert SimpleType: Object(4789) into VariableDeclarationStatement(4797) at 0", "Insert VariableDeclarationFragment(4796) into VariableDeclarationStatement(4797) at 1", "Insert InfixExpression: &&(4802) into IfStatement(4809) at 0", "Insert Block(4808) into IfStatement(4809) at 1", "Insert SimpleName: instance(4810) into ReturnStatement(4811) at 0", "Insert SimpleName: Object(4694) into SimpleType: Object(4695) at 0", "Insert SimpleName: cached(4696) into VariableDeclarationFragment(4700) at 0", "Insert MethodInvocation(4699) into VariableDeclarationFragment(4700) at 1", "Insert SimpleName: cached(4702) into InstanceofExpression(4705) at 0", "Insert SimpleType: JexlMethod(4704) into InstanceofExpression(4705) at 1", "Insert VariableDeclarationStatement(4714) into Block(4735) at 0", "Insert VariableDeclarationStatement(4725) into Block(4735) at 1", "Insert IfStatement(4734) into Block(4735) at 2", "Insert SimpleName: Object(4788) into SimpleType: Object(4789) at 0", "Insert SimpleName: instance(4790) into VariableDeclarationFragment(4796) at 0", "Insert MethodInvocation(4795) into VariableDeclarationFragment(4796) at 1", "Insert SimpleName: cache(4798) into InfixExpression: &&(4802) at 0", "Insert MethodInvocation(4801) into InfixExpression: &&(4802) at 1", "Insert ExpressionStatement(4807) into Block(4808) at 0", "Insert SimpleName: node(4697) into MethodInvocation(4699) at 0", "Insert SimpleName: jjtGetValue(4698) into MethodInvocation(4699) at 1", "Insert SimpleName: JexlMethod(4703) into SimpleType: JexlMethod(4704) at 0", "Insert SimpleType: JexlMethod(4707) into VariableDeclarationStatement(4714) at 0", "Insert VariableDeclarationFragment(4713) into VariableDeclarationStatement(4714) at 1", "Insert SimpleType: Object(4716) into VariableDeclarationStatement(4725) at 0", "Insert VariableDeclarationFragment(4724) into VariableDeclarationStatement(4725) at 1", "Insert PrefixExpression: !(4730) into IfStatement(4734) at 0", "Insert Block(4733) into IfStatement(4734) at 1", "Move SimpleName: ctor(4747) into MethodInvocation(4795) at 0", "Update SimpleName: newInstance(4748) to invoke", "Move SimpleName: newInstance(4748) into MethodInvocation(4795) at 1", "Insert SimpleName: cobject(4793) into MethodInvocation(4795) at 2", "Move SimpleName: argv(4749) into MethodInvocation(4795) at 3", "Insert SimpleName: ctor(4799) into MethodInvocation(4801) at 0", "Insert SimpleName: isCacheable(4800) into MethodInvocation(4801) at 1", "Insert MethodInvocation(4806) into ExpressionStatement(4807) at 0", "Insert SimpleName: JexlMethod(4706) into SimpleType: JexlMethod(4707) at 0", "Insert SimpleName: mctor(4708) into VariableDeclarationFragment(4713) at 0", "Insert CastExpression(4712) into VariableDeclarationFragment(4713) at 1", "Insert SimpleName: Object(4715) into SimpleType: Object(4716) at 0", "Insert SimpleName: eval(4717) into VariableDeclarationFragment(4724) at 0", "Insert MethodInvocation(4723) into VariableDeclarationFragment(4724) at 1", "Insert MethodInvocation(4729) into PrefixExpression: !(4730) at 0", "Insert ReturnStatement(4732) into Block(4733) at 0", "Insert SimpleName: node(4803) into MethodInvocation(4806) at 0", "Insert SimpleName: jjtSetValue(4804) into MethodInvocation(4806) at 1", "Insert SimpleName: ctor(4805) into MethodInvocation(4806) at 2", "Insert SimpleName: invoke(1023) into MethodInvocation(1026) at 1", "Update SimpleName: newInstance(1027) to namespace", "Insert SimpleType: JexlMethod(4710) into CastExpression(4712) at 0", "Insert SimpleName: cached(4711) into CastExpression(4712) at 1", "Insert SimpleName: mctor(4718) into MethodInvocation(4723) at 0", "Insert SimpleName: tryInvoke(4719) into MethodInvocation(4723) at 1", "Insert NullLiteral(4720) into MethodInvocation(4723) at 2", "Insert SimpleName: cobject(4721) into MethodInvocation(4723) at 3", "Insert SimpleName: argv(4722) into MethodInvocation(4723) at 4", "Insert SimpleName: mctor(4726) into MethodInvocation(4729) at 0", "Insert SimpleName: tryFailed(4727) into MethodInvocation(4729) at 1", "Insert SimpleName: eval(4728) into MethodInvocation(4729) at 2", "Insert SimpleName: eval(4731) into ReturnStatement(4732) at 0", "Insert SimpleName: JexlMethod(4709) into SimpleType: JexlMethod(4710) at 0", "Delete QualifiedName: java.lang.reflect.Constructor(2)", "Delete ImportDeclaration(3)", "Delete SimpleType: Constructor(1010)", "Delete WildcardType: ?(1011)", "Delete ParameterizedType: Constructor<?>(1012)", "Delete SimpleType: Constructor(4697)", "Delete WildcardType: ?(4698)", "Delete ParameterizedType: Constructor<?>(4699)", "Delete MethodInvocation(4750)", "Delete ReturnStatement(4751)"]}}, {"JexlEngine_cluster": {"actions": [{"root": "INS SimpleType: JexlMethod to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: JexlMethod to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from Constructor to JexlMethod", "operations": ["UPD SimpleName: Constructor from Constructor to JexlMethod"]}, {"root": "MOVE from SimpleType: JexlMethod", "operations": ["MOV SimpleName: Constructor to SimpleType: JexlMethod at 0"]}, {"root": "UPDATE from newInstance to invoke", "operations": ["UPD SimpleName: newInstance from newInstance to invoke"]}, {"root": "INS SimpleName: clazz to MethodInvocation at 2", "operations": ["INS SimpleName: clazz to MethodInvocation at 2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Constructor", "DEL ImportDeclaration"]}, {"root": "DEL ParameterizedType: Constructor<?>", "operations": ["DEL SimpleType: Constructor", "DEL ParameterizedType: Constructor<?>", "DEL WildcardType: ?"]}]}}, {"JexlEngine_diff": {"operations": ["Insert SimpleType: JexlMethod(2063) into VariableDeclarationStatement(2072) at 0", "Update SimpleName: Constructor(2064) to JexlMethod", "Move SimpleName: Constructor(2064) into SimpleType: JexlMethod(2063) at 0", "Update SimpleName: newInstance(2101) to invoke", "Insert SimpleName: clazz(2098) into MethodInvocation(2100) at 2", "Delete QualifiedName: java.lang.reflect.Constructor(22)", "Delete ImportDeclaration(23)", "Delete SimpleType: Constructor(2065)", "Delete WildcardType: ?(2066)", "Delete ParameterizedType: Constructor<?>(2067)"]}}, {"Uberspect_cluster": {"actions": [{"root": "INS SimpleType: JexlMethod to MethodDeclaration at 1", "operations": ["INS SimpleType: JexlMethod to MethodDeclaration at 1"]}, {"root": "UPDATE from Constructor to JexlMethod", "operations": ["UPD SimpleName: Constructor from Constructor to JexlMethod"]}, {"root": "MOVE from SimpleType: JexlMethod", "operations": ["MOV SimpleName: Constructor to SimpleType: JexlMethod at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Constructor"]}, {"root": "DEL ParameterizedType: Constructor<?>", "operations": ["DEL SimpleType: Constructor", "DEL WildcardType: ?", "DEL ParameterizedType: Constructor<?>"]}]}}, {"Uberspect_diff": {"operations": ["Insert SimpleType: JexlMethod(45) into MethodDeclaration(61) at 1", "Update SimpleName: Constructor(46) to JexlMethod", "Move SimpleName: Constructor(46) into SimpleType: JexlMethod(45) at 0", "Delete QualifiedName: java.lang.reflect.Constructor(4)", "Delete ImportDeclaration(5)", "Delete SimpleType: Constructor(47)", "Delete WildcardType: ?(48)", "Delete ParameterizedType: Constructor<?>(49)"]}}, {"UberspectImpl_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: java.lang.reflect.InvocationTargetException to ImportDeclaration at 0"]}, {"root": "UPDATE from public to protected", "operations": ["UPD Modifier: public from public to protected"]}, {"root": "INS SimpleType: JexlMethod to MethodDeclaration at 2", "operations": ["INS SimpleType: JexlMethod to MethodDeclaration at 2", "INS SimpleName: JexlMethod to SimpleType: JexlMethod at 0"]}, {"root": "INS Block to MethodDeclaration at 8", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: clazz to MethodInvocation at 0", "INS SimpleName: newInstance to MethodInvocation at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: ctor to VariableDeclarationFragment at 0", "INS SimpleName: params to SingleVariableDeclaration at 1", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS MethodInvocation to ReturnStatement at 0", "INS Block to MethodDeclaration at 6", "INS CatchClause to TryStatement at 4", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleName: isCacheable to MethodDeclaration at 2", "INS ParameterizedType: Class<?> to MethodDeclaration at 1", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS MethodInvocation to MethodInvocation at 2", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: name to SingleVariableDeclaration at 1", "INS MethodInvocation to InfixExpression: && at 0", "INS Block to MethodDeclaration at 8", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: InvocationTargetException to SimpleType: InvocationTargetException at 0", "INS Block to IfStatement at 1", "INS Block to MethodDeclaration at 4", "INS Block to CatchClause at 1", "INS Modifier: public to MethodDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS Block to CatchClause at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: getReturnType to MethodDeclaration at 2", "INS SimpleType: Object to MethodDeclaration at 1", "INS InstanceofExpression to IfStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: obj to InfixExpression: != at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS Block to CatchClause at 1", "INS InfixExpression: && to IfStatement at 0", "INS CatchClause to TryStatement at 3", "INS Block to MethodDeclaration at 3", "INS SimpleName: obj to SingleVariableDeclaration at 1", "INS ParameterizedType: Class<?> to CastExpression at 0", "INS SimpleName: JexlMethod to SimpleType: JexlMethod at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: getDeclaringClass to MethodInvocation at 1", "INS SimpleName: toString to MethodInvocation at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS ParameterizedType: Class<?> to VariableDeclarationStatement at 0", "INS ReturnStatement to Block at 0", "INS CatchClause to TryStatement at 2", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleType: InstantiationException to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS Block to IfStatement at 1", "INS SimpleName: obj to MethodInvocation at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 3", "INS Dimension to ArrayType: Object[] at 1", "INS SimpleName: TRY_FAILED to ReturnStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: xaccess to SingleVariableDeclaration at 1", "INS SimpleName: obj to InstanceofExpression at 0", "INS ArrayType: Object[] to SingleVariableDeclaration at 0", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: ctor to MethodInvocation at 0", "INS SimpleName: TRY_FAILED to ReturnStatement at 0", "INS SimpleName: base to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: rval to SingleVariableDeclaration at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleType: IllegalAccessException to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: clazz to Assignment: = at 0", "INS SimpleName: clazz to Assignment: = at 0", "INS NullLiteral to ReturnStatement at 0", "INS SimpleName: getDeclaringClass to MethodInvocation at 1", "INS SimpleName: clazz to Assignment: = at 0", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS SimpleName: ctor to InfixExpression: != at 0", "INS Block to IfStatement at 2", "INS ReturnStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: clazz to Assignment: = at 0", "INS SimpleType: JexlMethod to VariableDeclarationStatement at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS Block to IfStatement at 1", "INS SimpleName: params to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: jctor to VariableDeclarationFragment at 0", "INS SimpleName: invoke to MethodDeclaration at 2", "INS SimpleName: clazz to Assignment: = at 0", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleName: xinstance to SingleVariableDeclaration at 1", "INS SimpleType: Object to MethodDeclaration at 1", "INS SimpleName: InstantiationException to SimpleType: InstantiationException at 0", "INS SimpleType: JexlMethod to ClassInstanceCreation at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS InstanceofExpression to IfStatement at 0", "INS ParameterizedType: Class<?> to InstanceofExpression at 1", "INS SimpleName: clazz to VariableDeclarationFragment at 0", "INS Block to IfStatement at 1", "INS SimpleName: toString to MethodInvocation at 1", "INS SimpleName: ctor to MethodInvocation at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS Modifier: public to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: clazz to MethodInvocation at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS ReturnStatement to Block at 0", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS ParameterizedType: Class<?> to InstanceofExpression at 1", "INS NullLiteral to InfixExpression: != at 1", "INS CastExpression to Assignment: = at 1", "INS SimpleName: JexlMethod to SimpleType: JexlMethod at 0", "INS CatchClause to TryStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS Block to TryStatement at 0", "INS IfStatement to Block at 1", "INS ArrayType: Object[] to SingleVariableDeclaration at 0", "INS Block to IfStatement at 2", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: clazz to Assignment: = at 0", "INS ReturnStatement to Block at 0", "INS IfStatement to IfStatement at 2", "INS InfixExpression: != to IfStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleType: InvocationTargetException to SingleVariableDeclaration at 0", "INS SimpleName: ctor to MethodInvocation at 0", "INS SimpleName: tryInvoke to MethodDeclaration at 2", "INS SimpleName: obj to InfixExpression: != at 0", "INS SimpleName: TRY_FAILED to ReturnStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: xinvoke to SingleVariableDeclaration at 1", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS Modifier: public to MethodDeclaration at 0", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS Block to CatchClause at 1", "INS Block to IfStatement at 1", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS SimpleName: ctor to MethodInvocation at 0", "INS SimpleName: name to MethodInvocation at 0", "INS SimpleName: IllegalAccessException to SimpleType: IllegalAccessException at 0", "INS TryStatement to Block at 0", "INS Block to MethodDeclaration at 6", "INS NullLiteral to InfixExpression: == at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: name to InfixExpression: == at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleType: Exception to MethodDeclaration at 5", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: tryFailed to MethodDeclaration at 2", "INS SimpleName: getDeclaringClass to MethodInvocation at 1", "INS SimpleName: obj to CastExpression at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: params to SingleVariableDeclaration at 1", "INS InfixExpression: == to InfixExpression: || at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleType: Object to ArrayType: Object[] at 0", "INS ParenthesizedExpression to InfixExpression: && at 1", "INS NullLiteral to InfixExpression: != at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS Assignment: = to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS BooleanLiteral: true to ReturnStatement at 0", "INS InfixExpression: == to ReturnStatement at 0", "INS SimpleName: jctor to ReturnStatement at 0", "INS SimpleType: Object to ArrayType: Object[] at 0", "INS CastExpression to Assignment: = at 1", "INS SimpleType: IllegalArgumentException to SingleVariableDeclaration at 0", "INS NullLiteral to ReturnStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS ReturnStatement to Block at 0", "INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: clazz to MethodInvocation at 0", "INS SimpleName: TRY_FAILED to ReturnStatement at 0", "INS ExpressionStatement to Block at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS IfStatement to IfStatement at 2", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS IfStatement to Block at 1", "INS Dimension to ArrayType: Object[] at 1", "INS Block to IfStatement at 2", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: ctor to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: getClassByName to MethodInvocation at 1", "INS Block to MethodDeclaration at 3", "INS IfStatement to Block at 2", "INS SimpleName: obj to InstanceofExpression at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: obj to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: TRY_FAILED to InfixExpression: == at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: obj to SingleVariableDeclaration at 1", "INS ParameterizedType: Class<?> to VariableDeclarationStatement at 0", "INS SimpleName: xargument to SingleVariableDeclaration at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: getClassByName to MethodInvocation at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 2", "INS InfixExpression: != to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: rval to InfixExpression: == at 0", "INS SimpleName: getDeclaringClass to MethodInvocation at 1", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS Block to IfStatement at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: TRY_FAILED to ReturnStatement at 0", "INS IfStatement to Block at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS IfStatement to Block at 2", "INS SimpleName: obj to CastExpression at 1", "INS MethodInvocation to IfStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS ParameterizedType: Class<?> to CastExpression at 0", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS SimpleName: ctor to MethodInvocation at 0", "INS ReturnStatement to Block at 3", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS MethodInvocation to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleName: getDeclaringClass to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: base to MethodInvocation at 0", "INS ReturnStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: clazz to VariableDeclarationFragment at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: Constructor<?> to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: params to MethodInvocation at 2", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: newInstance to MethodInvocation at 1", "INS SimpleName: ctor to MethodInvocation at 0"]}, {"root": "DEL Block", "operations": ["DEL Block"]}]}}, {"UberspectImpl_diff": {"operations": ["Insert ImportDeclaration(11) into CompilationUnit(1115) at 5", "Insert QualifiedName: java.lang.reflect.InvocationTargetException(10) into ImportDeclaration(11) at 0", "Update Modifier: public(274) to protected", "Insert SimpleType: JexlMethod(328) into MethodDeclaration(616) at 2", "Insert Block(615) into MethodDeclaration(616) at 7", "Insert SimpleName: JexlMethod(327) into SimpleType: JexlMethod(328) at 0", "Insert VariableDeclarationStatement(355) into Block(615) at 0", "Insert IfStatement(612) into Block(615) at 1", "Insert ReturnStatement(614) into Block(615) at 2", "Insert Modifier: final(344) into VariableDeclarationStatement(355) at 0", "Move ParameterizedType: Constructor<?>(328) into VariableDeclarationStatement(355) at 1", "Insert VariableDeclarationFragment(354) into VariableDeclarationStatement(355) at 2", "Insert InfixExpression: !=(358) into IfStatement(612) at 0", "Insert Block(611) into IfStatement(612) at 1", "Insert NullLiteral(613) into ReturnStatement(614) at 0", "Insert SimpleName: ctor(349) into VariableDeclarationFragment(354) at 0", "Move MethodInvocation(347) into VariableDeclarationFragment(354) at 1", "Insert SimpleName: ctor(356) into InfixExpression: !=(358) at 0", "Insert NullLiteral(357) into InfixExpression: !=(358) at 1", "Insert VariableDeclarationStatement(608) into Block(611) at 0", "Insert ReturnStatement(610) into Block(611) at 1", "Insert SimpleType: JexlMethod(360) into VariableDeclarationStatement(608) at 0", "Insert VariableDeclarationFragment(607) into VariableDeclarationStatement(608) at 1", "Insert SimpleName: jctor(609) into ReturnStatement(610) at 0", "Insert SimpleName: JexlMethod(359) into SimpleType: JexlMethod(360) at 0", "Insert SimpleName: jctor(361) into VariableDeclarationFragment(607) at 0", "Insert ClassInstanceCreation(606) into VariableDeclarationFragment(607) at 1", "Insert SimpleType: JexlMethod(363) into ClassInstanceCreation(606) at 0", "Insert AnonymousClassDeclaration(605) into ClassInstanceCreation(606) at 1", "Insert SimpleName: JexlMethod(362) into SimpleType: JexlMethod(363) at 0", "Insert MethodDeclaration(444) into AnonymousClassDeclaration(605) at 0", "Insert MethodDeclaration(572) into AnonymousClassDeclaration(605) at 1", "Insert MethodDeclaration(585) into AnonymousClassDeclaration(605) at 2", "Insert MethodDeclaration(592) into AnonymousClassDeclaration(605) at 3", "Insert MethodDeclaration(604) into AnonymousClassDeclaration(605) at 4", "Insert Modifier: public(364) into MethodDeclaration(444) at 0", "Insert SimpleType: Object(366) into MethodDeclaration(444) at 1", "Insert SimpleName: invoke(367) into MethodDeclaration(444) at 2", "Insert SingleVariableDeclaration(371) into MethodDeclaration(444) at 3", "Insert SingleVariableDeclaration(377) into MethodDeclaration(444) at 4", "Insert SimpleType: Exception(379) into MethodDeclaration(444) at 5", "Insert Block(443) into MethodDeclaration(444) at 6", "Insert Modifier: public(445) into MethodDeclaration(572) at 0", "Insert SimpleType: Object(447) into MethodDeclaration(572) at 1", "Insert SimpleName: tryInvoke(448) into MethodDeclaration(572) at 2", "Insert SingleVariableDeclaration(452) into MethodDeclaration(572) at 3", "Insert SingleVariableDeclaration(456) into MethodDeclaration(572) at 4", "Insert SingleVariableDeclaration(462) into MethodDeclaration(572) at 5", "Insert Block(571) into MethodDeclaration(572) at 6", "Insert Modifier: public(573) into MethodDeclaration(585) at 0", "Insert PrimitiveType: boolean(574) into MethodDeclaration(585) at 1", "Insert SimpleName: tryFailed(575) into MethodDeclaration(585) at 2", "Insert SingleVariableDeclaration(579) into MethodDeclaration(585) at 3", "Insert Block(584) into MethodDeclaration(585) at 4", "Insert Modifier: public(586) into MethodDeclaration(592) at 0", "Insert PrimitiveType: boolean(587) into MethodDeclaration(592) at 1", "Insert SimpleName: isCacheable(588) into MethodDeclaration(592) at 2", "Insert Block(591) into MethodDeclaration(592) at 3", "Insert Modifier: public(593) into MethodDeclaration(604) at 0", "Insert ParameterizedType: Class<?>(597) into MethodDeclaration(604) at 1", "Insert SimpleName: getReturnType(598) into MethodDeclaration(604) at 2", "Insert Block(603) into MethodDeclaration(604) at 3", "Insert SimpleName: Object(365) into SimpleType: Object(366) at 0", "Insert SimpleType: Object(369) into SingleVariableDeclaration(371) at 0", "Insert SimpleName: obj(370) into SingleVariableDeclaration(371) at 1", "Insert ArrayType: Object[](375) into SingleVariableDeclaration(377) at 0", "Insert SimpleName: params(376) into SingleVariableDeclaration(377) at 1", "Insert SimpleName: Exception(378) into SimpleType: Exception(379) at 0", "Insert VariableDeclarationStatement(387) into Block(443) at 0", "Insert IfStatement(426) into Block(443) at 1", "Insert IfStatement(442) into Block(443) at 2", "Insert SimpleName: Object(446) into SimpleType: Object(447) at 0", "Insert SimpleType: String(450) into SingleVariableDeclaration(452) at 0", "Insert SimpleName: name(451) into SingleVariableDeclaration(452) at 1", "Insert SimpleType: Object(454) into SingleVariableDeclaration(456) at 0", "Insert SimpleName: obj(455) into SingleVariableDeclaration(456) at 1", "Insert ArrayType: Object[](460) into SingleVariableDeclaration(462) at 0", "Insert SimpleName: params(461) into SingleVariableDeclaration(462) at 1", "Insert VariableDeclarationStatement(470) into Block(571) at 0", "Insert IfStatement(509) into Block(571) at 1", "Insert IfStatement(568) into Block(571) at 2", "Insert ReturnStatement(570) into Block(571) at 3", "Insert SimpleType: Object(577) into SingleVariableDeclaration(579) at 0", "Insert SimpleName: rval(578) into SingleVariableDeclaration(579) at 1", "Insert ReturnStatement(583) into Block(584) at 0", "Insert ReturnStatement(590) into Block(591) at 0", "Insert SimpleType: Class(595) into ParameterizedType: Class<?>(597) at 0", "Insert WildcardType: ?(596) into ParameterizedType: Class<?>(597) at 1", "Insert ReturnStatement(602) into Block(603) at 0", "Insert SimpleName: Object(368) into SimpleType: Object(369) at 0", "Insert SimpleType: Object(373) into ArrayType: Object[](375) at 0", "Insert Dimension(374) into ArrayType: Object[](375) at 1", "Insert ParameterizedType: Class<?>(383) into VariableDeclarationStatement(387) at 0", "Insert VariableDeclarationFragment(386) into VariableDeclarationStatement(387) at 1", "Insert InstanceofExpression(393) into IfStatement(426) at 0", "Insert Block(403) into IfStatement(426) at 1", "Insert IfStatement(425) into IfStatement(426) at 2", "Insert MethodInvocation(432) into IfStatement(442) at 0", "Insert Block(438) into IfStatement(442) at 1", "Insert Block(441) into IfStatement(442) at 2", "Insert SimpleName: String(449) into SimpleType: String(450) at 0", "Insert SimpleName: Object(453) into SimpleType: Object(454) at 0", "Insert SimpleType: Object(458) into ArrayType: Object[](460) at 0", "Insert Dimension(459) into ArrayType: Object[](460) at 1", "Insert ParameterizedType: Class<?>(466) into VariableDeclarationStatement(470) at 0", "Insert VariableDeclarationFragment(469) into VariableDeclarationStatement(470) at 1", "Insert InstanceofExpression(476) into IfStatement(509) at 0", "Insert Block(486) into IfStatement(509) at 1", "Insert IfStatement(508) into IfStatement(509) at 2", "Insert InfixExpression: &&(527) into IfStatement(568) at 0", "Insert Block(567) into IfStatement(568) at 1", "Insert SimpleName: TRY_FAILED(569) into ReturnStatement(570) at 0", "Insert SimpleName: Object(576) into SimpleType: Object(577) at 0", "Insert InfixExpression: ==(582) into ReturnStatement(583) at 0", "Insert BooleanLiteral: true(589) into ReturnStatement(590) at 0", "Insert SimpleName: Class(594) into SimpleType: Class(595) at 0", "Insert MethodInvocation(601) into ReturnStatement(602) at 0", "Insert SimpleName: Object(372) into SimpleType: Object(373) at 0", "Insert SimpleType: Class(381) into ParameterizedType: Class<?>(383) at 0", "Insert WildcardType: ?(382) into ParameterizedType: Class<?>(383) at 1", "Insert SimpleName: clazz(384) into VariableDeclarationFragment(386) at 0", "Insert NullLiteral(385) into VariableDeclarationFragment(386) at 1", "Insert SimpleName: obj(388) into InstanceofExpression(393) at 0", "Insert ParameterizedType: Class<?>(392) into InstanceofExpression(393) at 1", "Insert ExpressionStatement(402) into Block(403) at 0", "Insert InfixExpression: !=(406) into IfStatement(425) at 0", "Insert Block(417) into IfStatement(425) at 1", "Insert Block(424) into IfStatement(425) at 2", "Insert SimpleName: clazz(427) into MethodInvocation(432) at 0", "Insert SimpleName: equals(428) into MethodInvocation(432) at 1", "Insert MethodInvocation(431) into MethodInvocation(432) at 2", "Move ReturnStatement(348) into Block(438) at 0", "Insert ReturnStatement(440) into Block(441) at 0", "Insert SimpleName: Object(457) into SimpleType: Object(458) at 0", "Insert SimpleType: Class(464) into ParameterizedType: Class<?>(466) at 0", "Insert WildcardType: ?(465) into ParameterizedType: Class<?>(466) at 1", "Insert SimpleName: clazz(467) into VariableDeclarationFragment(469) at 0", "Insert NullLiteral(468) into VariableDeclarationFragment(469) at 1", "Insert SimpleName: obj(471) into InstanceofExpression(476) at 0", "Insert ParameterizedType: Class<?>(475) into InstanceofExpression(476) at 1", "Insert ExpressionStatement(485) into Block(486) at 0", "Insert InfixExpression: !=(489) into IfStatement(508) at 0", "Insert Block(500) into IfStatement(508) at 1", "Insert Block(507) into IfStatement(508) at 2", "Insert MethodInvocation(515) into InfixExpression: &&(527) at 0", "Insert ParenthesizedExpression(526) into InfixExpression: &&(527) at 1", "Insert TryStatement(566) into Block(567) at 0", "Insert SimpleName: rval(580) into InfixExpression: ==(582) at 0", "Insert SimpleName: TRY_FAILED(581) into InfixExpression: ==(582) at 1", "Insert SimpleName: ctor(599) into MethodInvocation(601) at 0", "Insert SimpleName: getDeclaringClass(600) into MethodInvocation(601) at 1", "Insert SimpleName: Class(380) into SimpleType: Class(381) at 0", "Insert SimpleType: Class(390) into ParameterizedType: Class<?>(392) at 0", "Insert WildcardType: ?(391) into ParameterizedType: Class<?>(392) at 1", "Insert Assignment: =(401) into ExpressionStatement(402) at 0", "Insert SimpleName: obj(404) into InfixExpression: !=(406) at 0", "Insert NullLiteral(405) into InfixExpression: !=(406) at 1", "Insert ExpressionStatement(416) into Block(417) at 0", "Insert ExpressionStatement(423) into Block(424) at 0", "Insert SimpleName: ctor(429) into MethodInvocation(431) at 0", "Insert SimpleName: getDeclaringClass(430) into MethodInvocation(431) at 1", "Insert MethodInvocation(436) into ReturnStatement(437) at 0", "Insert NullLiteral(439) into ReturnStatement(440) at 0", "Insert SimpleName: Class(463) into SimpleType: Class(464) at 0", "Insert SimpleType: Class(473) into ParameterizedType: Class<?>(475) at 0", "Insert WildcardType: ?(474) into ParameterizedType: Class<?>(475) at 1", "Insert Assignment: =(484) into ExpressionStatement(485) at 0", "Insert SimpleName: obj(487) into InfixExpression: !=(489) at 0", "Insert NullLiteral(488) into InfixExpression: !=(489) at 1", "Insert ExpressionStatement(499) into Block(500) at 0", "Insert ExpressionStatement(506) into Block(507) at 0", "Insert SimpleName: clazz(510) into MethodInvocation(515) at 0", "Insert SimpleName: equals(511) into MethodInvocation(515) at 1", "Insert MethodInvocation(514) into MethodInvocation(515) at 2", "Insert InfixExpression: ||(525) into ParenthesizedExpression(526) at 0", "Insert Block(533) into TryStatement(566) at 0", "Insert CatchClause(541) into TryStatement(566) at 1", "Insert CatchClause(549) into TryStatement(566) at 2", "Insert CatchClause(557) into TryStatement(566) at 3", "Insert CatchClause(565) into TryStatement(566) at 4", "Insert SimpleName: Class(389) into SimpleType: Class(390) at 0", "Insert SimpleName: clazz(394) into Assignment: =(401) at 0", "Insert CastExpression(400) into Assignment: =(401) at 1", "Insert Assignment: =(415) into ExpressionStatement(416) at 0", "Insert Assignment: =(422) into ExpressionStatement(423) at 0", "Insert SimpleName: ctor(433) into MethodInvocation(436) at 0", "Insert SimpleName: newInstance(434) into MethodInvocation(436) at 1", "Insert SimpleName: params(435) into MethodInvocation(436) at 2", "Insert SimpleName: Class(472) into SimpleType: Class(473) at 0", "Insert SimpleName: clazz(477) into Assignment: =(484) at 0", "Insert CastExpression(483) into Assignment: =(484) at 1", "Insert Assignment: =(498) into ExpressionStatement(499) at 0", "Insert Assignment: =(505) into ExpressionStatement(506) at 0", "Insert SimpleName: ctor(512) into MethodInvocation(514) at 0", "Insert SimpleName: getDeclaringClass(513) into MethodInvocation(514) at 1", "Insert InfixExpression: ==(518) into InfixExpression: ||(525) at 0", "Insert MethodInvocation(524) into InfixExpression: ||(525) at 1", "Insert ReturnStatement(532) into Block(533) at 0", "Insert SingleVariableDeclaration(537) into CatchClause(541) at 0", "Insert Block(540) into CatchClause(541) at 1", "Insert SingleVariableDeclaration(545) into CatchClause(549) at 0", "Insert Block(548) into CatchClause(549) at 1", "Insert SingleVariableDeclaration(553) into CatchClause(557) at 0", "Insert Block(556) into CatchClause(557) at 1", "Insert SingleVariableDeclaration(561) into CatchClause(565) at 0", "Insert Block(564) into CatchClause(565) at 1", "Insert ParameterizedType: Class<?>(398) into CastExpression(400) at 0", "Insert SimpleName: obj(399) into CastExpression(400) at 1", "Insert SimpleName: clazz(407) into Assignment: =(415) at 0", "Insert MethodInvocation(414) into Assignment: =(415) at 1", "Insert SimpleName: clazz(418) into Assignment: =(422) at 0", "Insert MethodInvocation(421) into Assignment: =(422) at 1", "Insert ParameterizedType: Class<?>(481) into CastExpression(483) at 0", "Insert SimpleName: obj(482) into CastExpression(483) at 1", "Insert SimpleName: clazz(490) into Assignment: =(498) at 0", "Insert MethodInvocation(497) into Assignment: =(498) at 1", "Insert SimpleName: clazz(501) into Assignment: =(505) at 0", "Insert MethodInvocation(504) into Assignment: =(505) at 1", "Insert SimpleName: name(516) into InfixExpression: ==(518) at 0", "Insert NullLiteral(517) into InfixExpression: ==(518) at 1", "Insert SimpleName: name(519) into MethodInvocation(524) at 0", "Insert SimpleName: equals(520) into MethodInvocation(524) at 1", "Insert MethodInvocation(523) into MethodInvocation(524) at 2", "Insert MethodInvocation(531) into ReturnStatement(532) at 0", "Insert SimpleType: InstantiationException(535) into SingleVariableDeclaration(537) at 0", "Insert SimpleName: xinstance(536) into SingleVariableDeclaration(537) at 1", "Insert ReturnStatement(539) into Block(540) at 0", "Insert SimpleType: IllegalAccessException(543) into SingleVariableDeclaration(545) at 0", "Insert SimpleName: xaccess(544) into SingleVariableDeclaration(545) at 1", "Insert ReturnStatement(547) into Block(548) at 0", "Insert SimpleType: IllegalArgumentException(551) into SingleVariableDeclaration(553) at 0", "Insert SimpleName: xargument(552) into SingleVariableDeclaration(553) at 1", "Insert ReturnStatement(555) into Block(556) at 0", "Insert SimpleType: InvocationTargetException(559) into SingleVariableDeclaration(561) at 0", "Insert SimpleName: xinvoke(560) into SingleVariableDeclaration(561) at 1", "Insert ReturnStatement(563) into Block(564) at 0", "Insert SimpleType: Class(396) into ParameterizedType: Class<?>(398) at 0", "Insert WildcardType: ?(397) into ParameterizedType: Class<?>(398) at 1", "Insert MethodInvocation(409) into MethodInvocation(414) at 0", "Insert SimpleName: getClassByName(410) into MethodInvocation(414) at 1", "Insert MethodInvocation(413) into MethodInvocation(414) at 2", "Insert SimpleName: ctor(419) into MethodInvocation(421) at 0", "Insert SimpleName: getDeclaringClass(420) into MethodInvocation(421) at 1", "Insert SimpleType: Class(479) into ParameterizedType: Class<?>(481) at 0", "Insert WildcardType: ?(480) into ParameterizedType: Class<?>(481) at 1", "Insert MethodInvocation(492) into MethodInvocation(497) at 0", "Insert SimpleName: getClassByName(493) into MethodInvocation(497) at 1", "Insert MethodInvocation(496) into MethodInvocation(497) at 2", "Insert SimpleName: ctor(502) into MethodInvocation(504) at 0", "Insert SimpleName: getDeclaringClass(503) into MethodInvocation(504) at 1", "Insert SimpleName: clazz(521) into MethodInvocation(523) at 0", "Insert SimpleName: getName(522) into MethodInvocation(523) at 1", "Insert SimpleName: ctor(528) into MethodInvocation(531) at 0", "Insert SimpleName: newInstance(529) into MethodInvocation(531) at 1", "Insert SimpleName: params(530) into MethodInvocation(531) at 2", "Insert SimpleName: InstantiationException(534) into SimpleType: InstantiationException(535) at 0", "Insert SimpleName: TRY_FAILED(538) into ReturnStatement(539) at 0", "Insert SimpleName: IllegalAccessException(542) into SimpleType: IllegalAccessException(543) at 0", "Insert SimpleName: TRY_FAILED(546) into ReturnStatement(547) at 0", "Insert SimpleName: IllegalArgumentException(550) into SimpleType: IllegalArgumentException(551) at 0", "Insert SimpleName: TRY_FAILED(554) into ReturnStatement(555) at 0", "Insert SimpleName: InvocationTargetException(558) into SimpleType: InvocationTargetException(559) at 0", "Insert SimpleName: TRY_FAILED(562) into ReturnStatement(563) at 0", "Insert SimpleName: Class(395) into SimpleType: Class(396) at 0", "Insert SimpleName: base(408) into MethodInvocation(409) at 0", "Insert SimpleName: obj(411) into MethodInvocation(413) at 0", "Insert SimpleName: toString(412) into MethodInvocation(413) at 1", "Insert SimpleName: Class(478) into SimpleType: Class(479) at 0", "Insert SimpleName: base(491) into MethodInvocation(492) at 0", "Insert SimpleName: obj(494) into MethodInvocation(496) at 0", "Insert SimpleName: toString(495) into MethodInvocation(496) at 1", "Delete Block(349)"]}}], "commit_stats": [{"total_files": 4, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}