{"application": "google-sagetv", "csha": "a8f6fa67350646e08d5c5d6884eca4129927dc3b", "files": [{"Carny_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: order to SingleVariableDeclaration at 1"]}, {"root": "INS TagElement: @param to Javadoc at 2", "operations": ["INS TextElement:  to ensure agents are also prioritized by their sorted to TagElement: @param at 3", "INS SimpleName: AGENT_SORTER to MemberRef at 0", "INS SimpleName: order to TagElement: @param at 0", "INS TagElement: @link to TagElement: @param at 2", "INS TagElement: @param to Javadoc at 2", "INS MemberRef to TagElement: @link at 0", "INS TextElement:  Use  to TagElement: @param at 1", "INS TextElement: order when they have the same watch potential. to TagElement: @param at 4"]}, {"root": "UPDATE from probability if the new agent is more desirable. to probability of the compared agent is more desirable.", "operations": ["UPD TextElement: probability if the new agent is more desirable. from probability if the new agent is more desirable. to probability of the compared agent is more desirable."]}, {"root": "INS QualifiedName: Wizard.AGENTS_BY_CARNY_CODE to MethodInvocation at 3", "operations": ["INS QualifiedName: Wizard.AGENTS_BY_CARNY_CODE to MethodInvocation at 3"]}, {"root": "INS ParenthesizedExpression to InfixExpression: && at 1", "operations": ["INS InfixExpression: || to ParenthesizedExpression at 0", "INS SimpleName: order to InfixExpression: || at 1", "INS ParenthesizedExpression to InfixExpression: && at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: agent to MethodInvocation at 1", "INS SimpleName: doBattle to MethodInvocation at 0", "INS SimpleName: compareAgent to MethodInvocation at 2", "INS SimpleType: Agent to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Agent to SimpleType: Agent at 0", "INS SimpleName: winner to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from == to ||", "operations": ["UPD InfixExpression: == from == to ||"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV MethodInvocation to InfixExpression: || at 0"]}, {"root": "INS InfixExpression: == to InfixExpression: == at 0", "operations": ["INS InfixExpression: == to InfixExpression: == at 0", "INS SimpleName: winner to InfixExpression: == at 0", "INS SimpleName: compareAgent to InfixExpression: == at 1"]}, {"root": "INS InfixExpression: && to InfixExpression: == at 1", "operations": ["INS MethodInvocation to InfixExpression: > at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS SimpleName: compare to MethodInvocation at 1", "INS InfixExpression: == to InfixExpression: && at 1", "INS SimpleName: winner to InfixExpression: == at 0", "INS InfixExpression: && to InfixExpression: && at 0", "INS NullLiteral to InfixExpression: == at 1", "INS InfixExpression: > to InfixExpression: && at 1", "INS SimpleName: compareAgent to MethodInvocation at 3", "INS InfixExpression: && to InfixExpression: == at 1", "INS SimpleName: order to InfixExpression: && at 0", "INS SimpleName: AGENT_SORTER to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: agent to MethodInvocation at 2"]}, {"root": "INS BooleanLiteral: false to MethodInvocation at 3", "operations": ["INS BooleanLiteral: false to MethodInvocation at 3"]}, {"root": "INS IfStatement to IfStatement at 2", "operations": ["INS IfStatement to IfStatement at 2", "INS MethodInvocation to IfStatement at 0", "INS BooleanLiteral: true to MethodInvocation at 3"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: compareAndReplace to MethodInvocation at 1", "MOV SimpleName: mappedCauseValue to MethodInvocation at 0", "MOV QualifiedName: currCauseValue.agent to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS MethodInvocation to IfStatement at 0"]}, {"root": "INS ExpressionStatement to IfStatement at 1", "operations": ["INS ExpressionStatement to IfStatement at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: isWatchedForSchedulingPurpose to MethodInvocation at 1", "MOV SimpleName: agentPot to MethodInvocation at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "DEL CastExpression", "operations": ["DEL PrimitiveType: byte", "DEL NumberLiteral: 0", "DEL CastExpression"]}, {"root": "DEL IfStatement", "operations": ["DEL QualifiedName: currCauseValue.agent", "DEL SimpleName: currCauseValue", "DEL SimpleName: mappedCauseValue", "DEL InfixExpression: >", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleName: mappedCauseValue", "DEL SimpleName: agentPot", "DEL SimpleType: WPCauseValue", "DEL ExpressionStatement", "DEL SimpleName: replaceWPCauseValue", "DEL SimpleName: newCauseValue", "DEL MethodInvocation", "DEL Assignment: =", "DEL QualifiedName: mappedCauseValue.agent.createTime", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: WPCauseValue", "DEL QualifiedName: currCauseValue.agent.createTime", "DEL VariableDeclarationStatement", "DEL SimpleName: newCauseValue", "DEL IfStatement", "DEL SimpleName: firstCallback"]}, {"root": "DEL InfixExpression: &&", "operations": ["DEL SimpleName: compareAndReplace", "DEL QualifiedName: currCauseValue.agent", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL SimpleName: mappedCauseValue"]}, {"root": "DEL Block", "operations": ["DEL ExpressionStatement", "DEL Block"]}, {"root": "DEL Block", "operations": ["DEL IfStatement", "DEL SimpleName: agentPot", "DEL InfixExpression: !=", "DEL QualifiedName: mappedCauseValue.wp", "DEL MethodInvocation", "DEL IfStatement", "DEL InfixExpression: &&", "DEL PrefixExpression: !", "DEL QualifiedName: currCauseValue.wp", "DEL Block", "DEL MethodInvocation", "DEL QualifiedName: mappedCauseValue.wp", "DEL ExpressionStatement", "DEL SimpleName: firstCallback", "DEL Block", "DEL SimpleName: MIN_WP", "DEL SimpleName: addWatchedPotsToClear", "DEL MethodInvocation", "DEL SimpleName: isWatchedForSchedulingPurpose", "DEL SimpleName: agentPot", "DEL InfixExpression: ==", "DEL Block", "DEL IfStatement"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: compareAgent", "DEL SimpleName: doBattle"]}, {"root": "DEL SimpleName: compareAgent", "operations": ["DEL SimpleName: compareAgent"]}]}}, {"Carny_diff": {"operations": ["Insert SingleVariableDeclaration(10637) into MethodDeclaration(10715) at 5", "Insert TagElement: @param(10624) into Javadoc(10627) at 2", "Insert PrimitiveType: boolean(10635) into SingleVariableDeclaration(10637) at 0", "Insert SimpleName: order(10636) into SingleVariableDeclaration(10637) at 1", "Update TextElement: probability if the new agent is more desirable.(10662) to probability of the compared agent is more desirable.", "Insert SimpleName: order(10617) into TagElement: @param(10624) at 0", "Insert TextElement:  Use (10618) into TagElement: @param(10624) at 1", "Insert TagElement: @link(10621) into TagElement: @param(10624) at 2", "Insert TextElement:  to ensure agents are also prioritized by their sorted(10622) into TagElement: @param(10624) at 3", "Insert TextElement: order when they have the same watch potential.(10623) into TagElement: @param(10624) at 4", "Insert QualifiedName: Wizard.AGENTS_BY_CARNY_CODE(4697) into MethodInvocation(4698) at 3", "Insert MemberRef(10620) into TagElement: @link(10621) at 0", "Insert ParenthesizedExpression(10670) into InfixExpression: &&(10671) at 1", "Insert VariableDeclarationStatement(10680) into Block(10710) at 0", "Insert SimpleName: AGENT_SORTER(10619) into MemberRef(10620) at 0", "Insert InfixExpression: ||(10669) into ParenthesizedExpression(10670) at 0", "Insert SimpleType: Agent(10673) into VariableDeclarationStatement(10680) at 0", "Insert VariableDeclarationFragment(10679) into VariableDeclarationStatement(10680) at 1", "Update InfixExpression: ==(10713) to ||", "Move MethodInvocation(10706) into InfixExpression: ||(10669) at 0", "Insert SimpleName: order(10668) into InfixExpression: ||(10669) at 1", "Insert SimpleName: Agent(10672) into SimpleType: Agent(10673) at 0", "Insert SimpleName: winner(10674) into VariableDeclarationFragment(10679) at 0", "Insert MethodInvocation(10678) into VariableDeclarationFragment(10679) at 1", "Insert InfixExpression: ==(10683) into InfixExpression: ||(10697) at 0", "Insert InfixExpression: &&(10696) into InfixExpression: ||(10697) at 1", "Insert SimpleName: doBattle(10675) into MethodInvocation(10678) at 0", "Insert SimpleName: agent(10676) into MethodInvocation(10678) at 1", "Insert SimpleName: compareAgent(10677) into MethodInvocation(10678) at 2", "Insert SimpleName: winner(10681) into InfixExpression: ==(10683) at 0", "Insert SimpleName: compareAgent(10682) into InfixExpression: ==(10683) at 1", "Insert InfixExpression: &&(10688) into InfixExpression: &&(10696) at 0", "Insert InfixExpression: >(10695) into InfixExpression: &&(10696) at 1", "Insert SimpleName: order(10684) into InfixExpression: &&(10688) at 0", "Insert InfixExpression: ==(10687) into InfixExpression: &&(10688) at 1", "Insert MethodInvocation(10693) into InfixExpression: >(10695) at 0", "Insert NumberLiteral: 0(10694) into InfixExpression: >(10695) at 1", "Insert SimpleName: winner(10685) into InfixExpression: ==(10687) at 0", "Insert NullLiteral(10686) into InfixExpression: ==(10687) at 1", "Insert SimpleName: AGENT_SORTER(10689) into MethodInvocation(10693) at 0", "Insert SimpleName: compare(10690) into MethodInvocation(10693) at 1", "Move SimpleName: agent(10710) into MethodInvocation(10693) at 2", "Insert SimpleName: compareAgent(10692) into MethodInvocation(10693) at 3", "Insert BooleanLiteral: false(9731) into MethodInvocation(9732) at 3", "Insert IfStatement(5981) into IfStatement(5982) at 2", "Insert MethodInvocation(5970) into IfStatement(5981) at 0", "Move Block(6018) into IfStatement(5981) at 1", "Move SimpleName: mappedCauseValue(5968) into MethodInvocation(5970) at 0", "Move SimpleName: compareAndReplace(5969) into MethodInvocation(5970) at 1", "Move QualifiedName: currCauseValue.agent(5970) into MethodInvocation(5970) at 2", "Insert BooleanLiteral: true(5969) into MethodInvocation(5970) at 3", "Insert MethodInvocation(5973) into IfStatement(5979) at 0", "Insert ExpressionStatement(5978) into IfStatement(5979) at 1", "Move SimpleName: agentPot(6007) into MethodInvocation(5973) at 0", "Move SimpleName: isWatchedForSchedulingPurpose(6008) into MethodInvocation(5973) at 1", "Move MethodInvocation(6014) into ExpressionStatement(5978) at 0", "Delete PrimitiveType: byte(4697)", "Delete NumberLiteral: 0(4698)", "Delete CastExpression(4699)", "Delete QualifiedName: currCauseValue.agent.createTime(5980)", "Delete QualifiedName: mappedCauseValue.agent.createTime(5981)", "Delete InfixExpression: >(5982)", "Delete SimpleName: WPCauseValue(5983)", "Delete SimpleType: WPCauseValue(5984)", "Delete SimpleName: newCauseValue(5985)", "Delete SimpleName: firstCallback(5986)", "Delete SimpleName: replaceWPCauseValue(5987)", "Delete SimpleName: agentPot(5988)", "Delete QualifiedName: currCauseValue.agent(5989)", "Delete MethodInvocation(5990)", "Delete VariableDeclarationFragment(5991)", "Delete VariableDeclarationStatement(5992)", "Delete SimpleName: currCauseValue(5993)", "Delete SimpleName: mappedCauseValue(5994)", "Delete Assignment: =(5995)", "Delete ExpressionStatement(5996)", "Delete SimpleName: mappedCauseValue(5997)", "Delete SimpleName: newCauseValue(5998)", "Delete Assignment: =(5999)", "Delete ExpressionStatement(6000)", "Delete Block(6001)", "Delete IfStatement(6002)", "Delete SimpleName: mappedCauseValue(6003)", "Delete SimpleName: compareAndReplace(6004)", "Delete QualifiedName: currCauseValue.agent(6005)", "Delete MethodInvocation(6006)", "Delete MethodInvocation(6009)", "Delete InfixExpression: &&(6010)", "Delete ExpressionStatement(6015)", "Delete Block(6016)", "Delete MethodInvocation(5971)", "Delete PrefixExpression: !(5972)", "Delete QualifiedName: mappedCauseValue.wp(5973)", "Delete SimpleName: MIN_WP(5974)", "Delete InfixExpression: !=(5975)", "Delete QualifiedName: mappedCauseValue.wp(5976)", "Delete QualifiedName: currCauseValue.wp(5977)", "Delete InfixExpression: ==(5978)", "Delete InfixExpression: &&(5979)", "Delete IfStatement(6019)", "Delete Block(6020)", "Delete SimpleName: agentPot(6021)", "Delete SimpleName: isWatchedForSchedulingPurpose(6022)", "Delete MethodInvocation(6023)", "Delete SimpleName: firstCallback(6024)", "Delete SimpleName: addWatchedPotsToClear(6025)", "Delete SimpleName: agentPot(6026)", "Delete MethodInvocation(6027)", "Delete ExpressionStatement(6028)", "Delete Block(6029)", "Delete IfStatement(6030)", "Delete IfStatement(6031)", "Delete Block(6032)", "Delete SimpleName: doBattle(10708)", "Delete SimpleName: compareAgent(10709)", "Delete MethodInvocation(10711)", "Delete SimpleName: compareAgent(10712)"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}