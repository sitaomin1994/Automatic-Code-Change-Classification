{"application": "Netflix-governator", "csha": "806de48fc97fb857bce75265e6f93a446205fc50", "files": [{"LifecycleModule_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS QualifiedName: javax.inject.Singleton to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 10"]}, {"root": "INS MarkerAnnotation to TypeDeclaration: class at 0", "operations": ["INS SimpleName: Singleton to MarkerAnnotation at 0", "INS MarkerAnnotation to TypeDeclaration: class at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 11", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: LifecycleListener to ParameterizedType: ConcurrentLinkedQueue<LifecycleListener> at 1", "INS SimpleName: ConcurrentLinkedQueue to SimpleType: ConcurrentLinkedQueue at 0", "INS FieldDeclaration to TypeDeclaration: class at 11", "INS Modifier: private to FieldDeclaration at 0", "INS ParameterizedType: ConcurrentLinkedQueue<LifecycleListener> to FieldDeclaration at 1", "INS SimpleType: ConcurrentLinkedQueue to ParameterizedType: ConcurrentLinkedQueue<> at 0", "INS SimpleName: pendingLifecycleListeners to VariableDeclarationFragment at 0", "INS ParameterizedType: ConcurrentLinkedQueue<> to ClassInstanceCreation at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: ConcurrentLinkedQueue to SimpleType: ConcurrentLinkedQueue at 0", "INS SimpleName: LifecycleListener to SimpleType: LifecycleListener at 0", "INS SimpleType: ConcurrentLinkedQueue to ParameterizedType: ConcurrentLinkedQueue<LifecycleListener> at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 5", "operations": ["INS SimpleType: LifecycleListener to VariableDeclarationStatement at 0", "INS SimpleName: listener to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: LifecycleListener to SimpleType: LifecycleListener at 0", "INS VariableDeclarationStatement to Block at 5"]}, {"root": "INS WhileStatement to Block at 6", "operations": ["INS Block to WhileStatement at 1", "INS SimpleName: manager to FieldAccess at 1", "INS ExpressionStatement to Block at 0", "INS InfixExpression: != to WhileStatement at 0", "INS ParenthesizedExpression to InfixExpression: != at 1", "INS MethodInvocation to Assignment: = at 1", "INS FieldAccess to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: listener to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: addListener to MethodInvocation at 1", "INS SimpleName: listener to MethodInvocation at 2", "INS WhileStatement to Block at 6", "INS Assignment: = to ParenthesizedExpression at 0", "INS SimpleName: pendingLifecycleListeners to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 0", "INS SimpleName: poll to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: injectee to Assignment: = at 0", "INS SimpleName: provision to MethodInvocation at 0", "INS SimpleName: provision to MethodInvocation at 1"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: add to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: pendingLifecycleListeners to MethodInvocation at 0", "INS CastExpression to MethodInvocation at 2", "INS SimpleName: LifecycleListener to SimpleType: LifecycleListener at 0", "INS IfStatement to Block at 2", "INS SimpleName: LifecycleListener to SimpleType: LifecycleListener at 0", "INS SimpleType: LifecycleListener to InstanceofExpression at 1", "INS SimpleType: LifecycleListener to CastExpression at 0", "INS SimpleName: injectee to InstanceofExpression at 0", "INS SimpleName: injectee to CastExpression at 1"]}]}}, {"LifecycleModule_diff": {"operations": [" * Governator.createInjector();(57) to TextElement:  ", " * Governator.createInjector();(59)", "Insert ImportDeclaration(21) into CompilationUnit(759) at 10", "Insert QualifiedName: javax.inject.Singleton(20) into ImportDeclaration(21) at 0", "Insert MarkerAnnotation(163) into TypeDeclaration: class(693) at 0", "Insert FieldDeclaration(247) into TypeDeclaration: class(693) at 11", "Insert SimpleName: Singleton(162) into MarkerAnnotation(163) at 0", "Insert Modifier: private(235) into FieldDeclaration(247) at 0", "Insert ParameterizedType: ConcurrentLinkedQueue<LifecycleListener>(240) into FieldDeclaration(247) at 1", "Insert VariableDeclarationFragment(246) into FieldDeclaration(247) at 2", "Move VariableDeclarationStatement(361) into Block(565) at 2", "Insert SimpleType: ConcurrentLinkedQueue(237) into ParameterizedType: ConcurrentLinkedQueue<LifecycleListener>(240) at 0", "Insert SimpleType: LifecycleListener(239) into ParameterizedType: ConcurrentLinkedQueue<LifecycleListener>(240) at 1", "Insert SimpleName: pendingLifecycleListeners(241) into VariableDeclarationFragment(246) at 0", "Insert ClassInstanceCreation(245) into VariableDeclarationFragment(246) at 1", "Insert VariableDeclarationStatement(302) into Block(320) at 5", "Insert WhileStatement(319) into Block(320) at 6", "Insert SimpleName: ConcurrentLinkedQueue(236) into SimpleType: ConcurrentLinkedQueue(237) at 0", "Insert SimpleName: LifecycleListener(238) into SimpleType: LifecycleListener(239) at 0", "Insert ParameterizedType: ConcurrentLinkedQueue<>(244) into ClassInstanceCreation(245) at 0", "Insert SimpleType: LifecycleListener(299) into VariableDeclarationStatement(302) at 0", "Insert VariableDeclarationFragment(301) into VariableDeclarationStatement(302) at 1", "Insert InfixExpression: !=(310) into WhileStatement(319) at 0", "Insert Block(318) into WhileStatement(319) at 1", "Insert SimpleType: ConcurrentLinkedQueue(243) into ParameterizedType: ConcurrentLinkedQueue<>(244) at 0", "Insert SimpleName: LifecycleListener(298) into SimpleType: LifecycleListener(299) at 0", "Insert SimpleName: listener(300) into VariableDeclarationFragment(301) at 0", "Insert NullLiteral(303) into InfixExpression: !=(310) at 0", "Insert ParenthesizedExpression(309) into InfixExpression: !=(310) at 1", "Insert ExpressionStatement(317) into Block(318) at 0", "Insert ExpressionStatement(389) into Block(405) at 1", "Insert IfStatement(403) into Block(405) at 2", "Insert SimpleName: ConcurrentLinkedQueue(242) into SimpleType: ConcurrentLinkedQueue(243) at 0", "Insert Assignment: =(308) into ParenthesizedExpression(309) at 0", "Insert MethodInvocation(316) into ExpressionStatement(317) at 0", "Insert Assignment: =(388) into ExpressionStatement(389) at 0", "Insert InstanceofExpression(393) into IfStatement(403) at 0", "Insert Block(402) into IfStatement(403) at 1", "Insert SimpleName: listener(304) into Assignment: =(308) at 0", "Insert MethodInvocation(307) into Assignment: =(308) at 1", "Insert FieldAccess(313) into MethodInvocation(316) at 0", "Insert SimpleName: addListener(314) into MethodInvocation(316) at 1", "Insert SimpleName: listener(315) into MethodInvocation(316) at 2", "Insert SimpleName: injectee(384) into Assignment: =(388) at 0", "Insert MethodInvocation(387) into Assignment: =(388) at 1", "Insert SimpleName: injectee(390) into InstanceofExpression(393) at 0", "Insert SimpleType: LifecycleListener(392) into InstanceofExpression(393) at 1", "Insert ExpressionStatement(401) into Block(402) at 0", "Insert SimpleName: pendingLifecycleListeners(305) into MethodInvocation(307) at 0", "Insert SimpleName: poll(306) into MethodInvocation(307) at 1", "Insert ThisExpression(311) into FieldAccess(313) at 0", "Insert SimpleName: manager(312) into FieldAccess(313) at 1", "Insert SimpleName: provision(385) into MethodInvocation(387) at 0", "Insert SimpleName: provision(386) into MethodInvocation(387) at 1", "Insert SimpleName: LifecycleListener(391) into SimpleType: LifecycleListener(392) at 0", "Insert MethodInvocation(400) into ExpressionStatement(401) at 0", "Insert SimpleName: pendingLifecycleListeners(394) into MethodInvocation(400) at 0", "Insert SimpleName: add(395) into MethodInvocation(400) at 1", "Insert CastExpression(399) into MethodInvocation(400) at 2", "Insert SimpleType: LifecycleListener(397) into CastExpression(399) at 0", "Insert SimpleName: injectee(398) into CastExpression(399) at 1", "Insert SimpleName: LifecycleListener(396) into SimpleType: LifecycleListener(397) at 0"]}}, {"AutoModuleBuilder_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 30", "operations": ["INS ImportDeclaration to CompilationUnit at 30", "INS QualifiedName: com.netflix.governator.ModuleListProvider to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 31", "operations": ["INS ImportDeclaration to CompilationUnit at 31", "INS QualifiedName: com.netflix.governator.ServiceLoaderModuleListProvider to ImportDeclaration at 0"]}, {"root": "INS Modifier: final to SingleVariableDeclaration at 0", "operations": ["INS Modifier: final to SingleVariableDeclaration at 0"]}, {"root": "INS Modifier: final to SingleVariableDeclaration at 0", "operations": ["INS Modifier: final to SingleVariableDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Module to SingleVariableDeclaration at 1"]}, {"root": "INS Modifier: final to SingleVariableDeclaration at 0", "operations": ["INS Modifier: final to SingleVariableDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Module to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from List<Binding<BootstrapExposedModule>> to List<Binding<ModuleProvider>>", "operations": ["UPD ParameterizedType: List<Binding<BootstrapExposedModule>> from List<Binding<BootstrapExposedModule>> to List<Binding<ModuleProvider>>"]}, {"root": "UPDATE from bootstrapModules to moduleProviders", "operations": ["UPD SimpleName: bootstrapModules from bootstrapModules to moduleProviders", "UPD SimpleName: bootstrapModules from bootstrapModules to moduleProviders"]}, {"root": "UPDATE from Binding<BootstrapExposedModule> to Binding<ModuleProvider>", "operations": ["UPD ParameterizedType: Binding<BootstrapExposedModule> from Binding<BootstrapExposedModule> to Binding<ModuleProvider>", "UPD ParameterizedType: Binding<BootstrapExposedModule> from Binding<BootstrapExposedModule> to Binding<ModuleProvider>"]}, {"root": "UPDATE from BootstrapExposedModule to ModuleProvider", "operations": ["UPD SimpleName: BootstrapExposedModule from BootstrapExposedModule to ModuleProvider", "UPD SimpleType: BootstrapExposedModule from BootstrapExposedModule to ModuleProvider", "UPD SimpleName: BootstrapExposedModule from BootstrapExposedModule to ModuleProvider", "UPD SimpleType: BootstrapExposedModule from BootstrapExposedModule to ModuleProvider", "UPD SimpleType: BootstrapExposedModule from BootstrapExposedModule to ModuleProvider", "UPD SimpleName: BootstrapExposedModule from BootstrapExposedModule to ModuleProvider"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: get to MethodInvocation at 1"]}, {"root": "UPDATE from ServiceLoaderModuleProvider to ServiceLoaderModuleListProvider", "operations": ["UPD SimpleType: ServiceLoaderModuleProvider from ServiceLoaderModuleProvider to ServiceLoaderModuleListProvider", "UPD SimpleName: ServiceLoaderModuleProvider from ServiceLoaderModuleProvider to ServiceLoaderModuleListProvider"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from getModule to rootModule", "operations": ["UPD SimpleName: getModule from getModule to rootModule"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getModule to MethodInvocation at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: Elements", "DEL MethodInvocation", "DEL SimpleName: elements"]}]}}, {"AutoModuleBuilder_diff": {"operations": ["      public(114) to TagElement: @OverrideModule(SomeLibraryModule.class)", "      public(118)", "Insert ImportDeclaration(61) into CompilationUnit(1249) at 30", "Insert ImportDeclaration(63) into CompilationUnit(1249) at 31", "Insert QualifiedName: com.netflix.governator.ModuleListProvider(60) into ImportDeclaration(61) at 0", "Insert QualifiedName: com.netflix.governator.ServiceLoaderModuleListProvider(62) into ImportDeclaration(63) at 0", "Insert Modifier: final(817) into SingleVariableDeclaration(824) at 0", "Insert Modifier: final(825) into SingleVariableDeclaration(829) at 0", "Move SimpleType: Module(829) into SingleVariableDeclaration(829) at 1", "Insert Modifier: final(834) into SingleVariableDeclaration(838) at 0", "Move SimpleType: Module(821) into SingleVariableDeclaration(838) at 1", "Update ParameterizedType: List<Binding<BootstrapExposedModule>>(1108) to List<Binding<ModuleProvider>>", "Update SimpleName: bootstrapModules(1128) to moduleProviders", "Update ParameterizedType: Binding<BootstrapExposedModule>(1107) to Binding<ModuleProvider>", "Update SimpleName: bootstrapModules(1109) to moduleProviders", "Update ParameterizedType: Binding<BootstrapExposedModule>(1125) to Binding<ModuleProvider>", "Update SimpleType: BootstrapExposedModule(1106) to ModuleProvider", "Update SimpleType: BootstrapExposedModule(1124) to ModuleProvider", "Update SimpleName: BootstrapExposedModule(1105) to ModuleProvider", "Update SimpleName: BootstrapExposedModule(1123) to ModuleProvider", "Insert MethodInvocation(1145) into VariableDeclarationFragment(1146) at 1", "Update SimpleType: ServiceLoaderModuleProvider(693) to ServiceLoaderModuleListProvider", "Update SimpleType: BootstrapExposedModule(1115) to ModuleProvider", "Move MethodInvocation(1136) into MethodInvocation(1145) at 0", "Insert SimpleName: get(1144) into MethodInvocation(1145) at 1", "Update SimpleName: ServiceLoaderModuleProvider(692) to ServiceLoaderModuleListProvider", "Update SimpleName: BootstrapExposedModule(1114) to ModuleProvider", "Update SimpleName: getModule(1174) to rootModule", "Move SimpleName: getModule(1174) into MethodInvocation(1183) at 1", "Delete SimpleName: Elements(1173)", "Delete SimpleName: elements(1175)", "Delete MethodInvocation(1176)"]}}, {"BootstrapExposedModule_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.netflix.governator.auto"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.AbstractModule", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TextElement: </pre>", "DEL TagElement: @author", "DEL TextElement: }", "DEL TextElement: };", "DEL SimpleType: AbstractModule", "DEL TextElement: <pre>", "DEL TagElement", "DEL TextElement: Note that we have to create the concept of BootstrapExposedModule because Guice ", "DEL TextElement: 'Hack' to expose bindings in a bootstrap module to the main injector without", "DEL TextElement: Example,", "DEL TextElement:  elandau", "DEL Modifier: abstract", "DEL TypeDeclaration: class", "DEL TextElement: }", "DEL SimpleName: AbstractModule", "DEL TextElement: return new BootstrapExposedModule( ){", "DEL TextElement: \"MyExposedModule) ", "DEL TextElement: public BootstrapExposedModule getExposedModule(SomeBindingToExpose obj) {", "DEL TagElement: @code", "DEL SimpleName: BootstrapExposedModule", "DEL TextElement: blacklists bindings to Module and AbstractModule.", "DEL TextElement: By a bootstrap module exposing a binding to a named BootstrapExposedModule the", "DEL Javadoc", "DEL TextElement: }", "DEL TextElement: bootstrap module may expose a curated set of bindings to be used by the main injector.", "DEL TextElement: }", "DEL TextElement: having to copy bindings (doesn't work with multibindgs) or create child injectors.  ", "DEL TagElement: @Singleton", "DEL TextElement: public class SomeBootstrapModule extends AbstractModule ", "DEL TextElement: bind(SomeBindingToExpose.class).toInstance(obj);", "DEL Modifier: public", "DEL TextElement: protected void configure() {", "DEL TextElement: Provides"]}]}}, {"BootstrapExposedModule_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.auto(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.inject.AbstractModule(2)", "Delete ImportDeclaration(3)", "Delete TextElement: 'Hack' to expose bindings in a bootstrap module to the main injector without(4)", "Delete TextElement: having to copy bindings (doesn't work with multibindgs) or create child injectors.  (5)", "Delete TextElement: By a bootstrap module exposing a binding to a named BootstrapExposedModule the(6)", "Delete TextElement: bootstrap module may expose a curated set of bindings to be used by the main injector.(7)", "Delete TextElement: Note that we have to create the concept of BootstrapExposedModule because Guice (8)", "Delete TextElement: blacklists bindings to Module and AbstractModule.(9)", "Delete TextElement: Example,(10)", "Delete TextElement: <pre>(11)", "Delete TextElement: public class SomeBootstrapModule extends AbstractModule (12)", "Delete TagElement: @code(13)", "Delete TextElement: Provides(14)", "Delete TagElement(15)", "Delete TextElement: \"MyExposedModule) (16)", "Delete TextElement: public BootstrapExposedModule getExposedModule(SomeBindingToExpose obj) {(17)", "Delete TextElement: return new BootstrapExposedModule( ){(18)", "Delete TextElement: protected void configure() {(19)", "Delete TextElement: bind(SomeBindingToExpose.class).toInstance(obj);(20)", "Delete TextElement: }(21)", "Delete TextElement: };(22)", "Delete TextElement: }(23)", "Delete TextElement: }(24)", "Delete TextElement: }(25)", "Delete TextElement: </pre>(26)", "Delete TagElement: @Singleton(27)", "Delete TextElement:  elandau(28)", "Delete TagElement: @author(29)", "Delete Javadoc(30)", "Delete Modifier: public(31)", "Delete Modifier: abstract(32)", "Delete SimpleName: BootstrapExposedModule(33)", "Delete SimpleName: AbstractModule(34)", "Delete SimpleType: AbstractModule(35)", "Delete TypeDeclaration: class(36)"]}}, {"PropertySource_cluster": {"actions": [{"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement to Javadoc at 0", "INS TagElement: @return to Javadoc at 3", "INS TextElement: Get a property value of a specific type to TagElement at 0", "INS SimpleName: key to TagElement: @param at 0", "INS SimpleName: type to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 2", "INS TagElement: @param to Javadoc at 1", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS SimpleName: defaultValue to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 2", "INS TagElement: @return to Javadoc at 4", "INS SimpleName: key to TagElement: @param at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @param to Javadoc at 1", "INS TagElement: @param to Javadoc at 3", "INS TextElement: default value if the property is not set. to TagElement at 1", "INS SimpleName: type to TagElement: @param at 0", "INS TagElement to Javadoc at 0", "INS TextElement: Get a property value of a specific type while returning a  to TagElement at 0"]}, {"root": "UPDATE from PropertiesConfig to PropertiesPropertySource", "operations": ["UPD SimpleName: PropertiesConfig from PropertiesConfig to PropertiesPropertySource"]}]}}, {"PropertySource_diff": {"operations": ["Insert Javadoc(42) into MethodDeclaration(60) at 0", "Insert Javadoc(71) into MethodDeclaration(93) at 0", "Update SimpleName: PropertiesConfig(8) to PropertiesPropertySource", "Insert TagElement(36) into Javadoc(42) at 0", "Insert TagElement: @param(38) into Javadoc(42) at 1", "Insert TagElement: @param(40) into Javadoc(42) at 2", "Insert TagElement: @return(41) into Javadoc(42) at 3", "Insert TagElement(63) into Javadoc(71) at 0", "Insert TagElement: @param(65) into Javadoc(71) at 1", "Insert TagElement: @param(67) into Javadoc(71) at 2", "Insert TagElement: @param(69) into Javadoc(71) at 3", "Insert TagElement: @return(70) into Javadoc(71) at 4", "Insert TextElement: Get a property value of a specific type(35) into TagElement(36) at 0", "Insert SimpleName: key(37) into TagElement: @param(38) at 0", "Insert SimpleName: type(39) into TagElement: @param(40) at 0", "Insert TextElement: Get a property value of a specific type while returning a (61) into TagElement(63) at 0", "Insert TextElement: default value if the property is not set.(62) into TagElement(63) at 1", "Insert SimpleName: key(64) into TagElement: @param(65) at 0", "Insert SimpleName: type(66) into TagElement: @param(67) at 0", "Insert SimpleName: defaultValue(68) into TagElement: @param(69) at 0"]}}, {"ServiceLoaderModuleProvider_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.netflix.governator.auto"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.ArrayList"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Iterator", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.ServiceLoader", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.Module", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.auto.annotations.ConditionalOnProfile"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleType: Module", "DEL TextElement: that have no profile condition.", "DEL SimpleName: Module", "DEL VariableDeclarationStatement", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: modules", "DEL SimpleName: ModuleListProvider", "DEL MethodInvocation", "DEL MethodInvocation", "DEL WhileStatement", "DEL NullLiteral", "DEL ParameterizedType: ArrayList<>", "DEL SimpleName: iterator", "DEL MethodInvocation", "DEL SimpleName: List", "DEL SimpleName: Module", "DEL VariableDeclarationStatement", "DEL SimpleName: Override", "DEL SimpleName: module", "DEL SimpleName: iter", "DEL ParameterizedType: List<Module>", "DEL SimpleName: ArrayList", "DEL SimpleName: iter", "DEL SimpleName: iter", "DEL SimpleName: next", "DEL ClassInstanceCreation", "DEL TextElement:  elandau", "DEL SimpleType: Module", "DEL SimpleName: ServiceLoader", "DEL MethodInvocation", "DEL SimpleType: Iterator", "DEL TypeDeclaration: class", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleType: ConditionalOnProfile", "DEL SimpleName: modules", "DEL SimpleName: List", "DEL Modifier: public", "DEL SimpleName: Module", "DEL TextElement: Load Module.class modules from the ServerLoader but filter out any modules", "DEL SimpleName: add", "DEL Block", "DEL TagElement", "DEL SimpleName: hasNext", "DEL ReturnStatement", "DEL SimpleName: module", "DEL SimpleName: ConditionalOnProfile", "DEL SimpleName: get", "DEL MethodInvocation", "DEL TypeLiteral", "DEL SimpleName: modules", "DEL Javadoc", "DEL SimpleType: ArrayList", "DEL MethodInvocation", "DEL ParameterizedType: List<Module>", "DEL SimpleType: Module", "DEL SimpleType: Module", "DEL TagElement: @author", "DEL Block", "DEL SimpleName: ServiceLoaderModuleProvider", "DEL VariableDeclarationFragment", "DEL InfixExpression: !=", "DEL SimpleName: Iterator", "DEL ParameterizedType: Iterator<Module>", "DEL IfStatement", "DEL MarkerAnnotation", "DEL ExpressionStatement", "DEL SimpleType: ModuleListProvider", "DEL VariableDeclarationFragment", "DEL TypeLiteral", "DEL SimpleType: Module", "DEL SimpleName: Module", "DEL MethodDeclaration", "DEL SimpleName: getAnnotation", "DEL SimpleType: List", "DEL SimpleName: getClass", "DEL SimpleName: load", "DEL SimpleType: List", "DEL SimpleName: Module", "DEL VariableDeclarationStatement", "DEL SimpleName: module"]}]}}, {"ServiceLoaderModuleProvider_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.auto(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.ArrayList(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Iterator(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.List(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.ServiceLoader(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.google.inject.Module(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: com.netflix.governator.auto.annotations.ConditionalOnProfile(12)", "Delete ImportDeclaration(13)", "Delete TextElement: Load Module.class modules from the ServerLoader but filter out any modules(14)", "Delete TextElement: that have no profile condition.(15)", "Delete TagElement(16)", "Delete TextElement:  elandau(17)", "Delete TagElement: @author(18)", "Delete Javadoc(19)", "Delete Modifier: public(20)", "Delete SimpleName: ServiceLoaderModuleProvider(21)", "Delete SimpleName: ModuleListProvider(22)", "Delete SimpleType: ModuleListProvider(23)", "Delete SimpleName: Override(24)", "Delete MarkerAnnotation(25)", "Delete Modifier: public(26)", "Delete SimpleName: List(27)", "Delete SimpleType: List(28)", "Delete SimpleName: Module(29)", "Delete SimpleType: Module(30)", "Delete ParameterizedType: List<Module>(31)", "Delete SimpleName: get(32)", "Delete SimpleName: List(33)", "Delete SimpleType: List(34)", "Delete SimpleName: Module(35)", "Delete SimpleType: Module(36)", "Delete ParameterizedType: List<Module>(37)", "Delete SimpleName: modules(38)", "Delete SimpleName: ArrayList(39)", "Delete SimpleType: ArrayList(40)", "Delete ParameterizedType: ArrayList<>(41)", "Delete ClassInstanceCreation(42)", "Delete VariableDeclarationFragment(43)", "Delete VariableDeclarationStatement(44)", "Delete SimpleName: Iterator(45)", "Delete SimpleType: Iterator(46)", "Delete SimpleName: Module(47)", "Delete SimpleType: Module(48)", "Delete ParameterizedType: Iterator<Module>(49)", "Delete SimpleName: iter(50)", "Delete SimpleName: ServiceLoader(51)", "Delete SimpleName: load(52)", "Delete SimpleName: Module(53)", "Delete SimpleType: Module(54)", "Delete TypeLiteral(55)", "Delete MethodInvocation(56)", "Delete SimpleName: iterator(57)", "Delete MethodInvocation(58)", "Delete VariableDeclarationFragment(59)", "Delete VariableDeclarationStatement(60)", "Delete SimpleName: iter(61)", "Delete SimpleName: hasNext(62)", "Delete MethodInvocation(63)", "Delete SimpleName: Module(64)", "Delete SimpleType: Module(65)", "Delete SimpleName: module(66)", "Delete SimpleName: iter(67)", "Delete SimpleName: next(68)", "Delete MethodInvocation(69)", "Delete VariableDeclarationFragment(70)", "Delete VariableDeclarationStatement(71)", "Delete NullLiteral(72)", "Delete SimpleName: module(73)", "Delete SimpleName: getClass(74)", "Delete MethodInvocation(75)", "Delete SimpleName: getAnnotation(76)", "Delete SimpleName: ConditionalOnProfile(77)", "Delete SimpleType: ConditionalOnProfile(78)", "Delete TypeLiteral(79)", "Delete MethodInvocation(80)", "Delete InfixExpression: !=(81)", "Delete SimpleName: modules(82)", "Delete SimpleName: add(83)", "Delete SimpleName: module(84)", "Delete MethodInvocation(85)", "Delete ExpressionStatement(86)", "Delete Block(87)", "Delete IfStatement(88)", "Delete Block(89)", "Delete WhileStatement(90)", "Delete SimpleName: modules(91)", "Delete ReturnStatement(92)", "Delete Block(93)", "Delete MethodDeclaration(94)", "Delete TypeDeclaration: class(95)"]}}, {"JettyModule_cluster": {"actions": [{"root": "UPDATE from .awaitTermination(); to .awaitTermination());", "operations": ["UPD TextElement: .awaitTermination(); from .awaitTermination(); to .awaitTermination());"]}]}}, {"JettyModule_diff": {"operations": ["Update TextElement: .awaitTermination();(73) to .awaitTermination());"]}}], "commit_stats": [{"total_files": 22, "deleted_files": 2, "testing": "True", "maintenance": "False", "build": "False"}]}