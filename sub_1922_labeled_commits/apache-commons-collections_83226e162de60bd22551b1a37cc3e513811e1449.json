{"application": "apache-commons-collections", "csha": "83226e162de60bd22551b1a37cc3e513811e1449", "files": [{"AbstractBitwiseTrie_cluster": {"actions": [{"root": "INS Modifier: public to TypeDeclaration: class at 1", "operations": ["INS Modifier: public to TypeDeclaration: class at 1"]}, {"root": "INS Modifier: abstract to TypeDeclaration: class at 2", "operations": ["INS Modifier: abstract to TypeDeclaration: class at 2"]}, {"root": "INS SimpleName: AbstractBitwiseTrie to TypeDeclaration: class at 3", "operations": ["INS SimpleName: AbstractBitwiseTrie to TypeDeclaration: class at 3"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 18"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}, {"root": "UPDATE from public to protected", "operations": ["UPD Modifier: public from public to protected", "UPD Modifier: public from public to protected"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS Modifier: public to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS SimpleName: BasicEntry to MethodDeclaration at 1", "INS Block to MethodDeclaration at 3"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TextElement:   the  to TagElement: @param at 1", "INS SimpleName: keyAnalyzer to TagElement: @param at 0", "INS SimpleName: KeyAnalyzer to TagElement: @link at 0", "INS TagElement: @link to TagElement: @param at 2", "INS TagElement: @param to Javadoc at 1", "INS TextElement:  to use to TagElement: @param at 3"]}, {"root": "INS TagElement: @return to Javadoc at 1", "operations": ["INS TextElement:  used by this  to TagElement: @return at 2", "INS TagElement: @link to TagElement: @return at 1", "INS SimpleName: KeyAnalyzer to TagElement: @link at 0", "INS TagElement: @return to Javadoc at 1", "INS TextElement:  the  to TagElement: @return at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS PrimitiveType: int to MethodDeclaration at 2", "operations": ["INS PrimitiveType: int to MethodDeclaration at 2"]}, {"root": "INS SimpleName: hashCode to MethodDeclaration at 3", "operations": ["INS SimpleName: hashCode to MethodDeclaration at 3"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS InfixExpression: ^ to ReturnStatement at 0"]}, {"root": "MOVE from TagElement: @return", "operations": ["MOV TagElement: @link to TagElement: @return at 3"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from InfixExpression: ^", "operations": ["MOV ParenthesizedExpression to InfixExpression: ^ at 0", "MOV ParenthesizedExpression to InfixExpression: ^ at 1"]}, {"root": "UPDATE from != to ==", "operations": ["UPD InfixExpression: != from != to ==", "UPD InfixExpression: != from != to =="]}, {"root": "INS NumberLiteral: 0 to ConditionalExpression at 1", "operations": ["INS NumberLiteral: 0 to ConditionalExpression at 1"]}, {"root": "INS NumberLiteral: 0 to ConditionalExpression at 1", "operations": ["INS NumberLiteral: 0 to ConditionalExpression at 1"]}, {"root": "INS MethodInvocation to InfixExpression: != at 0", "operations": ["INS SimpleName: getKey to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: != at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to InfixExpression: != at 0", "operations": ["INS MethodInvocation to InfixExpression: != at 0", "INS SimpleName: getValue to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from key to getKey", "operations": ["UPD SimpleName: key from key to getKey"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: key to MethodInvocation at 0"]}, {"root": "UPDATE from value to getValue", "operations": ["UPD SimpleName: value from value to getValue"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: value to MethodInvocation at 0"]}, {"root": "DEL Modifier: abstract", "operations": ["DEL Modifier: abstract"]}, {"root": "DEL SimpleName: AbstractBitwiseTrie", "operations": ["DEL SimpleName: AbstractBitwiseTrie"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement:   the key to use in the search", "DEL SimpleType: V", "DEL SimpleName: K", "DEL Modifier: public", "DEL SimpleType: K", "DEL TextElement:  whose key is closest in a bitwise XOR metric", "DEL TextElement: </ol>", "DEL TagElement: @link", "DEL MethodDeclaration", "DEL SimpleName: Trie", "DEL Javadoc", "DEL TextElement: For example, given the keys:", "DEL TextElement: than the XOR distance between D &amp; H.", "DEL ParameterizedType: Map.Entry<K,V>", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL TextElement: Returns the ", "DEL SimpleName: select", "DEL SimpleName: Entry", "DEL TextElement: return 'L', because the XOR distance between D &amp; L is smaller", "DEL TextElement:  the ", "DEL TagElement", "DEL TagElement: @return", "DEL SimpleName: K", "DEL TextElement:  whose key is closest in a bitwise XOR", "DEL QualifiedName: Map.Entry", "DEL TagElement: @link", "DEL Modifier: abstract", "DEL TextElement: <li>L = 1001100", "DEL SimpleType: K", "DEL TextElement:  contained 'H' and 'L', a lookup of 'D' would", "DEL TextElement: <ol>", "DEL SimpleName: key", "DEL SimpleName: V", "DEL SimpleType: Map.Entry", "DEL TextElement: metric to the given key. This is NOT lexicographic closeness.", "DEL TextElement: If the ", "DEL SimpleName: Entry", "DEL TextElement: <li>H = 1001000", "DEL TagElement: @link", "DEL TextElement: <li>D = 1000100", "DEL TextElement: to the provided key", "DEL SimpleName: key"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement: @link", "DEL TextElement:  the key that is closest in a bitwise XOR metric to the provided key", "DEL TextElement: Returns the key that is closest in a bitwise XOR metric to the", "DEL TextElement: For example, given the keys:", "DEL SimpleName: Trie", "DEL TextElement: <li>H = 1001000", "DEL SimpleType: K", "DEL SimpleName: K", "DEL QualifiedName: Map.Entry", "DEL TextElement: <li>L = 1001100", "DEL SimpleType: K", "DEL NullLiteral", "DEL MethodInvocation", "DEL Block", "DEL TextElement: return 'L', because the XOR distance between D &amp; L is smaller", "DEL ReturnStatement", "DEL SimpleName: getKey", "DEL Javadoc", "DEL TagElement: @param", "DEL SimpleName: key", "DEL TagElement", "DEL IfStatement", "DEL SimpleType: V", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleType: K", "DEL TagElement: @return", "DEL Modifier: final", "DEL SimpleName: entry", "DEL MethodDeclaration", "DEL SimpleName: V", "DEL SimpleName: key", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleName: entry", "DEL TextElement: <ol>", "DEL SimpleName: K", "DEL TextElement:  contained 'H' and 'L', a lookup of 'D' would", "DEL TextElement: than the XOR distance between D &amp; H.", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL Block", "DEL TextElement: If the ", "DEL NullLiteral", "DEL SimpleName: select", "DEL TextElement:   the key to use in the search", "DEL SimpleName: key", "DEL SimpleName: selectKey", "DEL SimpleType: Map.Entry", "DEL InfixExpression: ==", "DEL SimpleName: entry", "DEL TextElement: <li>D = 1000100", "DEL TextElement: provided key. This is NOT lexicographic closeness!", "DEL SimpleName: K", "DEL Modifier: public", "DEL TextElement: </ol>", "DEL VariableDeclarationStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL QualifiedName: Map.Entry", "DEL SimpleType: K", "DEL VariableDeclarationFragment", "DEL SimpleType: V", "DEL TextElement: <li>L = 1001100", "DEL Block", "DEL TextElement: For example, given the keys:", "DEL TextElement: <li>H = 1001000", "DEL SimpleName: V", "DEL TextElement:  contained 'H' and 'L', a lookup of 'D' would", "DEL InfixExpression: ==", "DEL SimpleName: K", "DEL Javadoc", "DEL SimpleName: selectValue", "DEL NullLiteral", "DEL SimpleName: entry", "DEL TextElement: than the XOR distance between D &amp; H.", "DEL TextElement: </ol>", "DEL TextElement: to the provided key", "DEL SingleVariableDeclaration", "DEL SimpleName: Trie", "DEL Modifier: final", "DEL SimpleName: key", "DEL MethodInvocation", "DEL SimpleType: K", "DEL SimpleName: entry", "DEL TextElement:  the value whose key is closest in a bitwise XOR metric", "DEL TextElement: return 'L', because the XOR distance between D &amp; L is smaller", "DEL Modifier: final", "DEL SimpleName: select", "DEL VariableDeclarationStatement", "DEL SimpleName: key", "DEL ReturnStatement", "DEL SimpleName: V", "DEL TextElement:   the key to use in the search", "DEL ReturnStatement", "DEL SimpleName: getValue", "DEL MethodDeclaration", "DEL TextElement: If the ", "DEL SimpleName: entry", "DEL Modifier: public", "DEL TagElement: @link", "DEL TagElement: @param", "DEL TextElement: <ol>", "DEL TextElement: Returns the value whose key is closest in a bitwise XOR metric to", "DEL IfStatement", "DEL SimpleName: K", "DEL NullLiteral", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleType: V", "DEL TextElement: <li>D = 1000100", "DEL MethodInvocation", "DEL TextElement: the provided key. This is NOT lexicographic closeness!", "DEL TagElement: @return", "DEL SimpleName: key", "DEL TagElement", "DEL SimpleType: Map.Entry"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement:  the entry the cursor returned ", "DEL WildcardType: ? super V", "DEL TagElement: @link", "DEL MemberRef", "DEL TextElement:   the key to use in the search", "DEL TextElement:  on, or null", "DEL QualifiedName: Cursor.Decision", "DEL SimpleName: Cursor", "DEL SimpleName: cursor", "DEL TagElement: @return", "DEL SimpleType: V", "DEL Modifier: public", "DEL QualifiedName: Cursor.Decision", "DEL SimpleName: EXIT", "DEL Javadoc", "DEL MethodDeclaration", "DEL TagElement: @link", "DEL SimpleType: Map.Entry", "DEL SingleVariableDeclaration", "DEL TextElement: <p>", "DEL TagElement: @param", "DEL SimpleName: Trie", "DEL SimpleName: K", "DEL TextElement: and stop traversing.", "DEL SimpleName: EXIT", "DEL SimpleName: K", "DEL SimpleName: CONTINUE", "DEL SimpleName: key", "DEL TextElement: NOT lexicographically) until the cursor returns ", "DEL SimpleType: Cursor", "DEL TextElement:  to continue traversing.", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleName: V", "DEL QualifiedName: Cursor.Decision", "DEL MemberRef", "DEL SimpleType: K", "DEL SimpleName: key", "DEL TagElement", "DEL TextElement:  is used to remove the current element", "DEL QualifiedName: Cursor.Decision", "DEL MemberRef", "DEL TextElement: Iterates through the ", "DEL TextElement:  will call select on that entry and continue", "DEL TextElement: calling select for each entry (traversing in order of XOR closeness,", "DEL ParameterizedType: Cursor<? super K,? super V>", "DEL SimpleName: K", "DEL TextElement: <p>", "DEL Modifier: abstract", "DEL TextElement:   the cursor used throughout the search", "DEL SimpleType: K", "DEL SimpleName: REMOVE_AND_EXIT", "DEL TextElement: The cursor can return ", "DEL MemberRef", "DEL TagElement: @link", "DEL MemberRef", "DEL QualifiedName: Map.Entry", "DEL TextElement: , starting with the entry whose bitwise", "DEL WildcardType: ? super K", "DEL TextElement: Note: The ", "DEL TextElement:  operation is not supported.", "DEL TextElement: value is closest in an XOR metric to the given key. After the closest", "DEL SimpleName: select", "DEL TextElement: .", "DEL SimpleName: V", "DEL TextElement: if it continued till the end", "DEL TextElement: <p>", "DEL QualifiedName: Cursor.Decision", "DEL TagElement: @link", "DEL TagElement: @link", "DEL SimpleName: REMOVE", "DEL TagElement: @param", "DEL TextElement: entry is found, the ", "DEL SingleVariableDeclaration", "DEL TagElement: @link", "DEL SimpleType: V", "DEL SimpleType: K", "DEL SimpleName: cursor"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL PrimitiveType: int", "DEL SimpleName: hashCode"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: hashCode", "DEL ThisExpression", "DEL InfixExpression: !=", "DEL SimpleName: hashCode", "DEL FieldAccess", "DEL MethodInvocation", "DEL SimpleName: key", "DEL ConditionalExpression", "DEL Assignment: =", "DEL SimpleName: key", "DEL NullLiteral", "DEL NumberLiteral: 0"]}, {"root": "DEL SimpleName: key", "operations": ["DEL SimpleName: key"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL SimpleName: value", "operations": ["DEL SimpleName: value"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL SimpleName: BasicEntry", "operations": ["DEL SimpleName: BasicEntry"]}, {"root": "DEL Block", "operations": ["DEL ExpressionStatement", "DEL FieldAccess", "DEL InfixExpression: ^", "DEL ThisExpression", "DEL SimpleName: hashCode", "DEL Block", "DEL Assignment: ="]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL ReturnStatement", "DEL PrimitiveType: int", "DEL SimpleName: hashCode", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: hashCode"]}]}}, {"AbstractBitwiseTrie_diff": {"operations": ["Insert Modifier: public(26) into TypeDeclaration: class(727) at 1", "Insert Modifier: abstract(27) into TypeDeclaration: class(727) at 2", "Insert SimpleName: AbstractBitwiseTrie(28) into TypeDeclaration: class(727) at 3", "Move MethodDeclaration(810) into TypeDeclaration: class(726) at 18", "Update Modifier: protected(65) to private", "Update Modifier: public(85) to protected", "Update Modifier: public(123) to protected", "Insert MethodDeclaration(518) into TypeDeclaration: class(726) at 11", "Insert TagElement: @param(90) into Javadoc(91) at 1", "Insert TagElement: @return(135) into Javadoc(136) at 1", "Insert Modifier: public(504) into MethodDeclaration(518) at 0", "Insert SimpleName: BasicEntry(505) into MethodDeclaration(518) at 1", "Move SingleVariableDeclaration(739) into MethodDeclaration(518) at 2", "Insert Block(517) into MethodDeclaration(518) at 3", "Move SingleVariableDeclaration(767) into MethodDeclaration(544) at 2", "Move SingleVariableDeclaration(772) into MethodDeclaration(544) at 3", "Move MarkerAnnotation(885) into MethodDeclaration(648) at 0", "Insert PrimitiveType: int(621) into MethodDeclaration(648) at 2", "Insert SimpleName: hashCode(622) into MethodDeclaration(648) at 3", "Insert Block(647) into MethodDeclaration(648) at 4", "Insert SimpleName: keyAnalyzer(85) into TagElement: @param(90) at 0", "Insert TextElement:   the (86) into TagElement: @param(90) at 1", "Insert TagElement: @link(88) into TagElement: @param(90) at 2", "Insert TextElement:  to use(89) into TagElement: @param(90) at 3", "Insert TextElement:  the (129) into TagElement: @return(135) at 0", "Insert TagElement: @link(131) into TagElement: @return(135) at 1", "Insert TextElement:  used by this (132) into TagElement: @return(135) at 2", "Move TagElement: @link(295) into TagElement: @return(135) at 3", "Move ExpressionStatement(745) into Block(517) at 0", "Move ExpressionStatement(778) into Block(543) at 0", "Move ExpressionStatement(784) into Block(543) at 1", "Insert ReturnStatement(646) into Block(647) at 0", "Insert SimpleName: KeyAnalyzer(87) into TagElement: @link(88) at 0", "Insert SimpleName: KeyAnalyzer(130) into TagElement: @link(131) at 0", "Insert InfixExpression: ^(645) into ReturnStatement(646) at 0", "Move ParenthesizedExpression(796) into InfixExpression: ^(645) at 0", "Move ParenthesizedExpression(805) into InfixExpression: ^(645) at 1", "Update InfixExpression: !=(790) to ==", "Insert NumberLiteral: 0(627) into ConditionalExpression(632) at 1", "Update InfixExpression: !=(799) to ==", "Insert NumberLiteral: 0(638) into ConditionalExpression(643) at 1", "Insert MethodInvocation(624) into InfixExpression: ==(626) at 0", "Insert MethodInvocation(629) into MethodInvocation(631) at 0", "Insert MethodInvocation(635) into InfixExpression: ==(637) at 0", "Insert MethodInvocation(640) into MethodInvocation(642) at 0", "Insert SimpleName: getKey(623) into MethodInvocation(624) at 0", "Update SimpleName: key(791) to getKey", "Move SimpleName: key(791) into MethodInvocation(629) at 0", "Insert SimpleName: getValue(634) into MethodInvocation(635) at 0", "Update SimpleName: value(800) to getValue", "Move SimpleName: value(800) into MethodInvocation(640) at 0", "Delete Modifier: abstract(26)", "Delete SimpleName: AbstractBitwiseTrie(27)", "Delete TextElement: Returns the (135)", "Delete SimpleName: Entry(136)", "Delete TagElement: @link(137)", "Delete TextElement:  whose key is closest in a bitwise XOR(138)", "Delete TextElement: metric to the given key. This is NOT lexicographic closeness.(139)", "Delete TextElement: For example, given the keys:(140)", "Delete TextElement: <ol>(141)", "Delete TextElement: <li>D = 1000100(142)", "Delete TextElement: <li>H = 1001000(143)", "Delete TextElement: <li>L = 1001100(144)", "Delete TextElement: </ol>(145)", "Delete TextElement: If the (146)", "Delete SimpleName: Trie(147)", "Delete TagElement: @link(148)", "Delete TextElement:  contained 'H' and 'L', a lookup of 'D' would(149)", "Delete TextElement: return 'L', because the XOR distance between D &amp; L is smaller(150)", "Delete TextElement: than the XOR distance between D &amp; H.(151)", "Delete TagElement(152)", "Delete SimpleName: key(153)", "Delete TextElement:   the key to use in the search(154)", "Delete TagElement: @param(155)", "Delete TextElement:  the (156)", "Delete SimpleName: Entry(157)", "Delete TagElement: @link(158)", "Delete TextElement:  whose key is closest in a bitwise XOR metric(159)", "Delete TextElement: to the provided key(160)", "Delete TagElement: @return(161)", "Delete Javadoc(162)", "Delete Modifier: public(163)", "Delete Modifier: abstract(164)", "Delete QualifiedName: Map.Entry(165)", "Delete SimpleType: Map.Entry(166)", "Delete SimpleName: K(167)", "Delete SimpleType: K(168)", "Delete SimpleName: V(169)", "Delete SimpleType: V(170)", "Delete ParameterizedType: Map.Entry<K,V>(171)", "Delete SimpleName: select(172)", "Delete SimpleName: K(173)", "Delete SimpleType: K(174)", "Delete SimpleName: key(175)", "Delete SingleVariableDeclaration(176)", "Delete MethodDeclaration(177)", "Delete TextElement: Returns the key that is closest in a bitwise XOR metric to the(178)", "Delete TextElement: provided key. This is NOT lexicographic closeness!(179)", "Delete TextElement: For example, given the keys:(180)", "Delete TextElement: <ol>(181)", "Delete TextElement: <li>D = 1000100(182)", "Delete TextElement: <li>H = 1001000(183)", "Delete TextElement: <li>L = 1001100(184)", "Delete TextElement: </ol>(185)", "Delete TextElement: If the (186)", "Delete SimpleName: Trie(187)", "Delete TagElement: @link(188)", "Delete TextElement:  contained 'H' and 'L', a lookup of 'D' would(189)", "Delete TextElement: return 'L', because the XOR distance between D &amp; L is smaller(190)", "Delete TextElement: than the XOR distance between D &amp; H.(191)", "Delete TagElement(192)", "Delete SimpleName: key(193)", "Delete TextElement:   the key to use in the search(194)", "Delete TagElement: @param(195)", "Delete TextElement:  the key that is closest in a bitwise XOR metric to the provided key(196)", "Delete TagElement: @return(197)", "Delete Javadoc(198)", "Delete Modifier: public(199)", "Delete SimpleName: K(200)", "Delete SimpleType: K(201)", "Delete SimpleName: selectKey(202)", "Delete Modifier: final(203)", "Delete SimpleName: K(204)", "Delete SimpleType: K(205)", "Delete SimpleName: key(206)", "Delete SingleVariableDeclaration(207)", "Delete Modifier: final(208)", "Delete QualifiedName: Map.Entry(209)", "Delete SimpleType: Map.Entry(210)", "Delete SimpleName: K(211)", "Delete SimpleType: K(212)", "Delete SimpleName: V(213)", "Delete SimpleType: V(214)", "Delete ParameterizedType: Map.Entry<K,V>(215)", "Delete SimpleName: entry(216)", "Delete SimpleName: select(217)", "Delete SimpleName: key(218)", "Delete MethodInvocation(219)", "Delete VariableDeclarationFragment(220)", "Delete VariableDeclarationStatement(221)", "Delete SimpleName: entry(222)", "Delete NullLiteral(223)", "Delete InfixExpression: ==(224)", "Delete NullLiteral(225)", "Delete ReturnStatement(226)", "Delete Block(227)", "Delete IfStatement(228)", "Delete SimpleName: entry(229)", "Delete SimpleName: getKey(230)", "Delete MethodInvocation(231)", "Delete ReturnStatement(232)", "Delete Block(233)", "Delete MethodDeclaration(234)", "Delete TextElement: Returns the value whose key is closest in a bitwise XOR metric to(235)", "Delete TextElement: the provided key. This is NOT lexicographic closeness!(236)", "Delete TextElement: For example, given the keys:(237)", "Delete TextElement: <ol>(238)", "Delete TextElement: <li>D = 1000100(239)", "Delete TextElement: <li>H = 1001000(240)", "Delete TextElement: <li>L = 1001100(241)", "Delete TextElement: </ol>(242)", "Delete TextElement: If the (243)", "Delete SimpleName: Trie(244)", "Delete TagElement: @link(245)", "Delete TextElement:  contained 'H' and 'L', a lookup of 'D' would(246)", "Delete TextElement: return 'L', because the XOR distance between D &amp; L is smaller(247)", "Delete TextElement: than the XOR distance between D &amp; H.(248)", "Delete TagElement(249)", "Delete SimpleName: key(250)", "Delete TextElement:   the key to use in the search(251)", "Delete TagElement: @param(252)", "Delete TextElement:  the value whose key is closest in a bitwise XOR metric(253)", "Delete TextElement: to the provided key(254)", "Delete TagElement: @return(255)", "Delete Javadoc(256)", "Delete Modifier: public(257)", "Delete SimpleName: V(258)", "Delete SimpleType: V(259)", "Delete SimpleName: selectValue(260)", "Delete Modifier: final(261)", "Delete SimpleName: K(262)", "Delete SimpleType: K(263)", "Delete SimpleName: key(264)", "Delete SingleVariableDeclaration(265)", "Delete Modifier: final(266)", "Delete QualifiedName: Map.Entry(267)", "Delete SimpleType: Map.Entry(268)", "Delete SimpleName: K(269)", "Delete SimpleType: K(270)", "Delete SimpleName: V(271)", "Delete SimpleType: V(272)", "Delete ParameterizedType: Map.Entry<K,V>(273)", "Delete SimpleName: entry(274)", "Delete SimpleName: select(275)", "Delete SimpleName: key(276)", "Delete MethodInvocation(277)", "Delete VariableDeclarationFragment(278)", "Delete VariableDeclarationStatement(279)", "Delete SimpleName: entry(280)", "Delete NullLiteral(281)", "Delete InfixExpression: ==(282)", "Delete NullLiteral(283)", "Delete ReturnStatement(284)", "Delete Block(285)", "Delete IfStatement(286)", "Delete SimpleName: entry(287)", "Delete SimpleName: getValue(288)", "Delete MethodInvocation(289)", "Delete ReturnStatement(290)", "Delete Block(291)", "Delete MethodDeclaration(292)", "Delete TextElement: Iterates through the (293)", "Delete TextElement: , starting with the entry whose bitwise(296)", "Delete TextElement: value is closest in an XOR metric to the given key. After the closest(297)", "Delete TextElement: entry is found, the (298)", "Delete SimpleName: Trie(299)", "Delete TagElement: @link(300)", "Delete TextElement:  will call select on that entry and continue(301)", "Delete TextElement: calling select for each entry (traversing in order of XOR closeness,(302)", "Delete TextElement: NOT lexicographically) until the cursor returns (303)", "Delete QualifiedName: Cursor.Decision(304)", "Delete SimpleName: EXIT(305)", "Delete MemberRef(306)", "Delete TagElement: @link(307)", "Delete TextElement: .(308)", "Delete TextElement: <p>(309)", "Delete TextElement: The cursor can return (310)", "Delete QualifiedName: Cursor.Decision(311)", "Delete SimpleName: CONTINUE(312)", "Delete MemberRef(313)", "Delete TagElement: @link(314)", "Delete TextElement:  to continue traversing.(315)", "Delete TextElement: <p>(316)", "Delete QualifiedName: Cursor.Decision(317)", "Delete SimpleName: REMOVE_AND_EXIT(318)", "Delete MemberRef(319)", "Delete TagElement: @link(320)", "Delete TextElement:  is used to remove the current element(321)", "Delete TextElement: and stop traversing.(322)", "Delete TextElement: <p>(323)", "Delete TextElement: Note: The (324)", "Delete QualifiedName: Cursor.Decision(325)", "Delete SimpleName: REMOVE(326)", "Delete MemberRef(327)", "Delete TagElement: @link(328)", "Delete TextElement:  operation is not supported.(329)", "Delete TagElement(330)", "Delete SimpleName: key(331)", "Delete TextElement:   the key to use in the search(332)", "Delete TagElement: @param(333)", "Delete SimpleName: cursor(334)", "Delete TextElement:   the cursor used throughout the search(335)", "Delete TagElement: @param(336)", "Delete TextElement:  the entry the cursor returned (337)", "Delete QualifiedName: Cursor.Decision(338)", "Delete SimpleName: EXIT(339)", "Delete MemberRef(340)", "Delete TagElement: @link(341)", "Delete TextElement:  on, or null(342)", "Delete TextElement: if it continued till the end(343)", "Delete TagElement: @return(344)", "Delete Javadoc(345)", "Delete Modifier: public(346)", "Delete Modifier: abstract(347)", "Delete QualifiedName: Map.Entry(348)", "Delete SimpleType: Map.Entry(349)", "Delete SimpleName: K(350)", "Delete SimpleType: K(351)", "Delete SimpleName: V(352)", "Delete SimpleType: V(353)", "Delete ParameterizedType: Map.Entry<K,V>(354)", "Delete SimpleName: select(355)", "Delete SimpleName: K(356)", "Delete SimpleType: K(357)", "Delete SimpleName: key(358)", "Delete SingleVariableDeclaration(359)", "Delete SimpleName: Cursor(360)", "Delete SimpleType: Cursor(361)", "Delete SimpleName: K(362)", "Delete SimpleType: K(363)", "Delete WildcardType: ? super K(364)", "Delete SimpleName: V(365)", "Delete SimpleType: V(366)", "Delete WildcardType: ? super V(367)", "Delete ParameterizedType: Cursor<? super K,? super V>(368)", "Delete SimpleName: cursor(369)", "Delete SingleVariableDeclaration(370)", "Delete MethodDeclaration(371)", "Delete Modifier: private(727)", "Delete Modifier: final(728)", "Delete PrimitiveType: int(729)", "Delete SimpleName: hashCode(730)", "Delete VariableDeclarationFragment(731)", "Delete FieldDeclaration(732)", "Delete ThisExpression(746)", "Delete SimpleName: hashCode(747)", "Delete FieldAccess(748)", "Delete SimpleName: key(749)", "Delete NullLiteral(750)", "Delete InfixExpression: !=(751)", "Delete SimpleName: key(752)", "Delete SimpleName: hashCode(753)", "Delete MethodInvocation(754)", "Delete NumberLiteral: 0(755)", "Delete ConditionalExpression(756)", "Delete Assignment: =(757)", "Delete ExpressionStatement(758)", "Delete SimpleName: key(788)", "Delete NumberLiteral: 0(794)", "Delete SimpleName: value(797)", "Delete NumberLiteral: 0(803)", "Delete SimpleName: BasicEntry(762)", "Delete ThisExpression(785)", "Delete SimpleName: hashCode(786)", "Delete FieldAccess(787)", "Delete InfixExpression: ^(806)", "Delete Assignment: =(807)", "Delete ExpressionStatement(808)", "Delete Block(809)", "Delete Modifier: public(886)", "Delete PrimitiveType: int(887)", "Delete SimpleName: hashCode(888)", "Delete SimpleName: hashCode(889)", "Delete ReturnStatement(890)", "Delete Block(891)", "Delete MethodDeclaration(892)"]}}, {"PatriciaTrie_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 11"]}, {"root": "UPDATE from java.util.Collections to org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "operations": ["UPD QualifiedName: java.util.Collections from java.util.Collections to org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer"]}, {"root": "UPDATE from PatriciaTrieBase<K,V> to AbstractPatriciaTrie<String,E>", "operations": ["UPD ParameterizedType: PatriciaTrieBase<K,V> from PatriciaTrieBase<K,V> to AbstractPatriciaTrie<String,E>"]}, {"root": "UPDATE from Trie<K,V> to Trie<String,E>", "operations": ["UPD ParameterizedType: Trie<K,V> from Trie<K,V> to Trie<String,E>"]}, {"root": "UPDATE from V to E", "operations": ["UPD SimpleType: V from V to E", "UPD SimpleType: V from V to E", "UPD SimpleType: V from V to E", "UPD SimpleName: V from V to E", "UPD SimpleName: V from V to E", "UPD SimpleName: K from K to E", "UPD SimpleName: V from V to E"]}, {"root": "UPDATE from PatriciaTrieBase to AbstractPatriciaTrie", "operations": ["UPD SimpleName: PatriciaTrieBase from PatriciaTrieBase to AbstractPatriciaTrie", "UPD SimpleType: PatriciaTrieBase from PatriciaTrieBase to AbstractPatriciaTrie"]}, {"root": "UPDATE from K to String", "operations": ["UPD SimpleName: K from K to String", "UPD SimpleName: K from K to String", "UPD SimpleType: K from K to String", "UPD SimpleName: K from K to String", "UPD SimpleType: K from K to String", "UPD SimpleType: K from K to String"]}, {"root": "UPDATE from , 'prefix', 'submap', or 'iterator' methods. The to 'prefixMap', 'submap', or 'iterator' methods. The ", "operations": ["UPD TextElement: , 'prefix', 'submap', or 'iterator' methods. The from , 'prefix', 'submap', or 'iterator' methods. The to 'prefixMap', 'submap', or 'iterator' methods. The "]}, {"root": "INS TextElement:  can also to TagElement at 30", "operations": ["INS TextElement:  can also to TagElement at 30"]}, {"root": "UPDATE from  can also scan for items that are 'bitwise' (using an XOR to scan for items that are 'bitwise' (using an XOR metric) by the 'select' method.", "operations": ["UPD TextElement:  can also scan for items that are 'bitwise' (using an XOR from  can also scan for items that are 'bitwise' (using an XOR to scan for items that are 'bitwise' (using an XOR metric) by the 'select' method."]}, {"root": "UPDATE from metric) by the 'select' method. Bitwise closeness is determined by the to Bitwise closeness is determined by the ", "operations": ["UPD TextElement: metric) by the 'select' method. Bitwise closeness is determined by the from metric) by the 'select' method. Bitwise closeness is determined by the to Bitwise closeness is determined by the "]}, {"root": "UPDATE from  returning true or false for a bit being set or not in to  returning true or", "operations": ["UPD TextElement:  returning true or false for a bit being set or not in from  returning true or false for a bit being set or not in to  returning true or"]}, {"root": "UPDATE from a given key. to false for a bit being set or not in a given key.", "operations": ["UPD TextElement: a given key. from a given key. to false for a bit being set or not in a given key."]}, {"root": "UPDATE from to variable length keys, whereas  to to variable length keys.", "operations": ["UPD TextElement: to variable length keys, whereas  from to variable length keys, whereas  to to variable length keys."]}, {"root": "UPDATE from Map<? extends K,? extends V> to Map<? extends String,? extends E>", "operations": ["UPD ParameterizedType: Map<? extends K,? extends V> from Map<? extends K,? extends V> to Map<? extends String,? extends E>"]}, {"root": "INS ClassInstanceCreation to SuperConstructorInvocation at 0", "operations": ["INS SimpleName: StringKeyAnalyzer to SimpleType: StringKeyAnalyzer at 0", "INS SimpleType: StringKeyAnalyzer to ClassInstanceCreation at 0", "INS ClassInstanceCreation to SuperConstructorInvocation at 0"]}, {"root": "UPDATE from ? extends K to ? extends String", "operations": ["UPD WildcardType: ? extends K from ? extends K to ? extends String"]}, {"root": "UPDATE from ? extends V to ? extends E", "operations": ["UPD WildcardType: ? extends V from ? extends V to ? extends E"]}, {"root": "INS ClassInstanceCreation to SuperConstructorInvocation at 0", "operations": ["INS SimpleType: StringKeyAnalyzer to ClassInstanceCreation at 0", "INS ClassInstanceCreation to SuperConstructorInvocation at 0", "INS SimpleName: StringKeyAnalyzer to SimpleType: StringKeyAnalyzer at 0"]}, {"root": "UPDATE from getPrefixedBy to prefixMap", "operations": ["UPD SimpleName: getPrefixedBy from getPrefixedBy to prefixMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.AbstractMap", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.AbstractSet"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Comparator", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Iterator", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.NoSuchElementException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.SortedMap", "DEL ImportDeclaration"]}, {"root": "DEL TagElement: @link", "operations": ["DEL SimpleName: traverse", "DEL SimpleName: Cursor", "DEL MethodRef", "DEL TagElement: @link", "DEL SimpleType: Cursor", "DEL MethodRefParameter"]}, {"root": "DEL TagElement: @link", "operations": ["DEL SimpleName: getPrefixedByBits", "DEL PrimitiveType: int", "DEL SimpleName: Object", "DEL TagElement: @link", "DEL MethodRefParameter", "DEL MethodRefParameter", "DEL SimpleType: Object", "DEL MethodRef"]}, {"root": "DEL TextElement:  is", "operations": ["DEL TextElement:  is"]}, {"root": "DEL TextElement: suited to fixed-size keys.", "operations": ["DEL TextElement: suited to fixed-size keys."]}, {"root": "DEL TextElement: <p>", "operations": ["DEL TextElement: <p>"]}, {"root": "DEL TextElement: Any methods here that take an ", "operations": ["DEL TextElement: Any methods here that take an "]}, {"root": "DEL TagElement: @link", "operations": ["DEL SimpleName: Object", "DEL TagElement: @link"]}, {"root": "DEL TextElement:  argument may throw a", "operations": ["DEL TextElement:  argument may throw a"]}, {"root": "DEL TagElement: @link", "operations": ["DEL TagElement: @link", "DEL SimpleName: ClassCastException"]}, {"root": "DEL TextElement:  if the method is expecting an instance of K", "operations": ["DEL TextElement:  if the method is expecting an instance of K"]}, {"root": "DEL TextElement: and it isn't K.", "operations": ["DEL TextElement: and it isn't K."]}, {"root": "DEL TypeParameter", "operations": ["DEL SimpleName: V", "DEL TypeParameter"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL WildcardType: ? super K", "DEL SimpleName: KeyAnalyzer", "DEL SingleVariableDeclaration", "DEL SimpleName: K", "DEL Modifier: final", "DEL SimpleType: K", "DEL ParameterizedType: KeyAnalyzer<? super K>", "DEL SimpleName: keyAnalyzer", "DEL SimpleType: KeyAnalyzer"]}, {"root": "DEL SimpleName: keyAnalyzer", "operations": ["DEL SimpleName: keyAnalyzer"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL WildcardType: ? super K", "DEL SingleVariableDeclaration", "DEL SimpleType: K", "DEL ParameterizedType: KeyAnalyzer<? super K>", "DEL Modifier: final", "DEL SimpleName: KeyAnalyzer", "DEL SimpleName: keyAnalyzer", "DEL SimpleName: K", "DEL SimpleType: KeyAnalyzer"]}, {"root": "DEL SimpleName: keyAnalyzer", "operations": ["DEL SimpleName: keyAnalyzer"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL WildcardType: ? super K", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: Comparator", "DEL SimpleName: keyAnalyzer", "DEL Modifier: public", "DEL SimpleType: Comparator", "DEL SimpleName: K", "DEL ParameterizedType: Comparator<? super K>", "DEL MethodDeclaration", "DEL SimpleName: comparator", "DEL SimpleType: K"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: getPrefixedByBits", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: V", "DEL SimpleName: key", "DEL Modifier: public", "DEL SimpleType: K", "DEL MethodInvocation", "DEL SimpleType: K", "DEL SimpleName: V", "DEL SimpleType: SortedMap", "DEL SimpleName: SortedMap", "DEL ReturnStatement", "DEL Block", "DEL ParameterizedType: SortedMap<K,V>", "DEL SimpleName: getPrefixedBy", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: lengthInBits", "DEL SimpleName: key", "DEL SimpleName: K", "DEL NumberLiteral: 0", "DEL SimpleName: K", "DEL SimpleName: key"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL InfixExpression: *", "DEL SimpleName: bitsPerElement", "DEL MethodInvocation", "DEL SimpleType: V", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL SimpleName: getPrefixedBy", "DEL Modifier: final", "DEL SimpleName: length", "DEL ParameterizedType: SortedMap<K,V>", "DEL SimpleName: K", "DEL SimpleName: key", "DEL SimpleName: length", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL SimpleName: SortedMap", "DEL Block", "DEL SimpleType: SortedMap", "DEL SimpleName: key", "DEL SimpleName: V", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: K", "DEL MethodDeclaration", "DEL Modifier: final", "DEL SimpleType: K", "DEL SimpleType: K", "DEL SimpleName: getPrefixedByBits"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: getPrefixedBy", "DEL Modifier: final", "DEL SimpleName: V", "DEL SimpleName: bitsPerElement", "DEL SimpleName: getPrefixedByBits", "DEL Modifier: public", "DEL SimpleType: V", "DEL MethodInvocation", "DEL SimpleName: offset", "DEL ReturnStatement", "DEL SimpleType: SortedMap", "DEL SimpleName: SortedMap", "DEL SimpleName: key", "DEL SingleVariableDeclaration", "DEL SimpleName: K", "DEL SimpleName: bitsPerElement", "DEL SimpleType: K", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL InfixExpression: *", "DEL Modifier: final", "DEL SimpleName: length", "DEL Modifier: final", "DEL SimpleName: key", "DEL SimpleName: bitsPerElement", "DEL InfixExpression: *", "DEL SimpleType: K", "DEL SimpleName: bitsPerElement", "DEL SingleVariableDeclaration", "DEL Block", "DEL MethodDeclaration", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: offset", "DEL ParameterizedType: SortedMap<K,V>", "DEL SimpleName: length", "DEL SimpleName: K", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL PrimitiveType: int"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: SortedMap", "DEL ParameterizedType: SortedMap<K,V>", "DEL SimpleName: SortedMap", "DEL SimpleName: K", "DEL SimpleName: lengthInBits", "DEL Modifier: final", "DEL ReturnStatement", "DEL SimpleType: K", "DEL SimpleName: getPrefixedByBits", "DEL SimpleName: lengthInBits", "DEL MethodDeclaration", "DEL SimpleType: V", "DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SimpleName: key", "DEL SimpleName: getPrefixedByBits", "DEL SimpleType: K", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: K", "DEL Block", "DEL SimpleName: V", "DEL SimpleName: key"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL SimpleName: K", "DEL SimpleName: firstEntry", "DEL Block", "DEL SimpleType: K", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: firstKey", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getKey"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: entry", "DEL Modifier: public", "DEL SimpleName: K", "DEL InfixExpression: !=", "DEL SimpleName: entry", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleType: V", "DEL SimpleType: TrieEntry", "DEL SimpleName: K", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL SimpleType: K", "DEL SimpleName: lastEntry", "DEL SimpleName: lastKey", "DEL MethodDeclaration", "DEL SimpleName: TrieEntry", "DEL ReturnStatement", "DEL SimpleType: K", "DEL SimpleName: getKey", "DEL NullLiteral", "DEL Block", "DEL IfStatement", "DEL SimpleName: V", "DEL Modifier: final", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: offsetInBits", "DEL TagElement: @link", "DEL SimpleType: K", "DEL ParameterizedType: SortedMap<K,V>", "DEL NumberLiteral: 0", "DEL SimpleName: getPrefixedByBits", "DEL TextElement:  &amp; ", "DEL StringLiteral: \" + \"", "DEL TagElement: @link", "DEL SimpleName: IllegalArgumentException", "DEL SimpleType: K", "DEL SimpleName: key", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL IfStatement", "DEL SimpleName: K", "DEL SimpleName: lengthInBits", "DEL TextElement:  changes.", "DEL VariableDeclarationStatement", "DEL TagElement: @link", "DEL SimpleName: Trie", "DEL SimpleName: size", "DEL TagElement: @link", "DEL ReturnStatement", "DEL SimpleName: lengthInBits", "DEL TagElement: @link", "DEL SimpleName: lengthInBits", "DEL TextElement: . The ", "DEL Modifier: final", "DEL SimpleName: key", "DEL SimpleName: Iterator", "DEL Modifier: final", "DEL SimpleName: SortedMap", "DEL SimpleName: K", "DEL TagElement: @inheritDoc", "DEL TextElement: ,", "DEL TextElement: iterate over all possible values in order to determine the results.", "DEL InfixExpression: +", "DEL StringLiteral: \" > \"", "DEL TextElement: All other methods (except ", "DEL SimpleName: lastKey", "DEL MethodRef", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL TextElement: The ", "DEL SimpleType: SortedMap", "DEL SimpleName: key", "DEL TextElement: This information is cached until the PATRICIA ", "DEL TextElement:  methods must", "DEL MethodDeclaration", "DEL SimpleName: key", "DEL SimpleType: IllegalArgumentException", "DEL SimpleType: V", "DEL InfixExpression: +", "DEL VariableDeclarationFragment", "DEL SimpleName: SortedMap", "DEL SimpleName: firstKey", "DEL SingleVariableDeclaration", "DEL ThisExpression", "DEL TagElement: @link", "DEL SimpleName: offsetInBits", "DEL TagElement: @link", "DEL SimpleName: offsetLength", "DEL TextElement: removed or changes. Changing the subtree takes O(K) time.", "DEL SimpleType: PrefixRangeMap", "DEL SimpleName: offsetLength", "DEL ClassInstanceCreation", "DEL SimpleName: offsetInBits", "DEL ThrowStatement", "DEL TextElement: The view that this returns is optimized to have a very efficient", "DEL Block", "DEL SimpleName: lengthInBits", "DEL InfixExpression: ==", "DEL TagElement", "DEL Block", "DEL MethodRef", "DEL SimpleName: lengthInBits", "DEL MethodInvocation", "DEL SimpleName: PrefixRangeMap", "DEL IfStatement", "DEL TextElement: that contains the prefixes if the entry holding the subtree is", "DEL SimpleName: offsetInBits", "DEL Modifier: final", "DEL MethodRef", "DEL TextElement: ) must compare the given", "DEL TextElement: key to the prefix to ensure that it is within the range of the view.", "DEL SimpleName: Iterator", "DEL SimpleName: Iterator", "DEL SimpleName: offsetLength", "DEL SingleVariableDeclaration", "DEL SimpleName: V", "DEL SimpleName: lengthInBits", "DEL Javadoc", "DEL SimpleName: SortedMap", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL TextElement: 's remove method must also relocate the subtree", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: Map", "DEL InfixExpression: >"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ParameterizedType: SortedMap<K,V>", "DEL SimpleName: headMap", "DEL SimpleType: K", "DEL SimpleType: V", "DEL MethodDeclaration", "DEL SimpleType: SortedMap", "DEL SimpleName: RangeEntryMap", "DEL Modifier: final", "DEL SimpleName: toKey", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleType: RangeEntryMap", "DEL ClassInstanceCreation", "DEL SimpleName: toKey", "DEL SimpleType: K", "DEL SimpleName: SortedMap", "DEL SimpleName: V", "DEL Modifier: public", "DEL SimpleName: K", "DEL SimpleName: K", "DEL NullLiteral", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: K", "DEL SimpleName: fromKey", "DEL SimpleName: toKey", "DEL SimpleName: RangeEntryMap", "DEL SimpleType: V", "DEL Modifier: final", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: V", "DEL MethodDeclaration", "DEL SimpleName: K", "DEL Modifier: public", "DEL SimpleName: subMap", "DEL ParameterizedType: SortedMap<K,V>", "DEL SimpleType: K", "DEL SimpleType: SortedMap", "DEL SimpleType: K", "DEL SimpleName: SortedMap", "DEL SimpleType: RangeEntryMap", "DEL SimpleName: toKey", "DEL Block", "DEL SimpleName: fromKey", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleType: K", "DEL SimpleName: K"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: V", "DEL SimpleType: K", "DEL ClassInstanceCreation", "DEL SimpleType: RangeEntryMap", "DEL MethodDeclaration", "DEL Modifier: final", "DEL SimpleName: K", "DEL SimpleName: K", "DEL ParameterizedType: SortedMap<K,V>", "DEL SimpleName: V", "DEL NullLiteral", "DEL SimpleName: RangeEntryMap", "DEL Modifier: public", "DEL SimpleName: tailMap", "DEL SimpleType: SortedMap", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: SortedMap", "DEL SimpleName: fromKey", "DEL SimpleType: K", "DEL SimpleName: fromKey", "DEL SingleVariableDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL ReturnStatement", "DEL Block", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: lengthInBits", "DEL Assignment: -=", "DEL Block", "DEL Modifier: final", "DEL ParameterizedType: TrieEntry<K,V>", "DEL QualifiedName: found.key", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: nextEntry", "DEL SimpleName: bitIndex", "DEL SimpleName: V", "DEL Block", "DEL SimpleName: K", "DEL ParameterizedType: TrieEntry<K,V>", "DEL Block", "DEL SimpleName: lengthInBits", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: K", "DEL SimpleType: TrieEntry", "DEL SimpleName: nextEntry", "DEL MethodInvocation", "DEL SimpleName: getNearestEntryForKey", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleName: removeEntry", "DEL InfixExpression: >", "DEL SimpleName: lengthInBits", "DEL NullLiteral", "DEL Block", "DEL Block", "DEL SimpleName: V", "DEL QualifiedName: found.key", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL SimpleName: K", "DEL Block", "DEL NullLiteral", "DEL SimpleName: added", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL Block", "DEL SimpleName: bitIndex", "DEL PrefixExpression: !", "DEL SimpleName: key", "DEL Block", "DEL SimpleName: isValidBitIndex", "DEL SimpleName: compareKeys", "DEL SimpleName: found", "DEL SimpleName: key", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: higherEntry", "DEL SimpleName: TrieEntry", "DEL SimpleName: ceil", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL SimpleName: found", "DEL SimpleName: TrieEntry", "DEL SimpleType: V", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: V", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL IfStatement", "DEL SimpleName: isEmpty", "DEL NumberLiteral: 2", "DEL ExpressionStatement", "DEL InfixExpression: >", "DEL SimpleName: firstEntry", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL ThrowStatement", "DEL SimpleName: bitIndex", "DEL MethodInvocation", "DEL SimpleName: K", "DEL SimpleName: TrieEntry", "DEL SimpleType: K", "DEL TextElement: Returns an entry strictly higher than the given key,", "DEL SimpleName: bitIndex", "DEL SimpleName: firstEntry", "DEL Block", "DEL SimpleName: TrieEntry", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: V", "DEL SimpleType: TrieEntry", "DEL SimpleName: size", "DEL IfStatement", "DEL SimpleName: lengthInBits", "DEL StringLiteral: \"invalid lookup: \"", "DEL ReturnStatement", "DEL SimpleName: modCount", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL Block", "DEL IfStatement", "DEL SimpleType: V", "DEL SimpleName: nextEntry", "DEL SimpleName: lengthInBits", "DEL SimpleName: added", "DEL ParameterizedType: TrieEntry<K,V>", "DEL Modifier: final", "DEL IfStatement", "DEL SimpleName: key", "DEL SimpleType: V", "DEL ReturnStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: isNullBitKey", "DEL SimpleName: isEqualBitKey", "DEL MethodInvocation", "DEL SimpleName: added", "DEL SimpleName: added", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleType: TrieEntry", "DEL SimpleName: ceil", "DEL ExpressionStatement", "DEL SimpleName: key", "DEL ReturnStatement", "DEL SimpleName: root", "DEL SimpleName: V", "DEL SimpleName: firstEntry", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: found", "DEL SimpleType: K", "DEL SimpleName: KeyAnalyzer", "DEL MethodInvocation", "DEL SimpleName: incrementSize", "DEL MethodInvocation", "DEL SimpleName: KeyAnalyzer", "DEL MethodInvocation", "DEL SimpleName: root", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL SimpleName: isEmpty", "DEL SimpleType: K", "DEL SimpleName: bitIndex", "DEL SimpleType: TrieEntry", "DEL SimpleName: IllegalStateException", "DEL SimpleName: TrieEntry", "DEL InfixExpression: ==", "DEL SimpleType: V", "DEL VariableDeclarationFragment", "DEL SimpleType: K", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleType: K", "DEL SimpleName: bitIndex", "DEL NumberLiteral: 1", "DEL SimpleType: K", "DEL SimpleName: K", "DEL IfStatement", "DEL SimpleName: nextEntry", "DEL SimpleName: nextEntry", "DEL SimpleName: K", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleType: TrieEntry", "DEL SimpleName: KeyAnalyzer", "DEL SimpleName: key", "DEL SimpleName: V", "DEL Modifier: final", "DEL SimpleName: addEntry", "DEL MethodInvocation", "DEL ParameterizedType: TrieEntry<K,V>", "DEL TextElement: or null if no such entry exists.", "DEL SimpleName: key", "DEL SimpleType: IllegalStateException", "DEL SimpleName: root", "DEL SimpleName: size", "DEL PrefixExpression: !", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: key", "DEL MethodDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL PrimitiveType: int", "DEL SimpleName: isNullBitKey", "DEL ExpressionStatement", "DEL SimpleType: IllegalStateException", "DEL SimpleName: found", "DEL TagElement", "DEL Modifier: final", "DEL InfixExpression: ==", "DEL SimpleName: bitIndex", "DEL SimpleName: KeyAnalyzer", "DEL SimpleName: bitIndex", "DEL SimpleName: bitIndex", "DEL SimpleName: lengthInBits", "DEL SimpleName: found", "DEL ParameterizedType: TrieEntry<K,V>", "DEL Block", "DEL SimpleName: nextEntry", "DEL VariableDeclarationStatement", "DEL SimpleName: modCount", "DEL SimpleName: key", "DEL SimpleName: TrieEntry", "DEL MethodInvocation", "DEL SimpleName: addEntry", "DEL Block", "DEL SimpleName: key", "DEL SimpleName: TrieEntry", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleType: V", "DEL IfStatement", "DEL SimpleName: root", "DEL NumberLiteral: 0", "DEL SimpleName: V", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: isValidBitIndex", "DEL MethodInvocation", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: bitIndex", "DEL VariableDeclarationStatement", "DEL SimpleName: lengthInBits", "DEL SimpleName: ceil", "DEL MethodInvocation", "DEL SimpleType: K", "DEL SimpleName: getNearestEntryForKey", "DEL VariableDeclarationFragment", "DEL SimpleName: V", "DEL SimpleName: V", "DEL SimpleName: firstEntry", "DEL Modifier: final", "DEL SimpleName: root", "DEL SimpleName: key", "DEL SimpleName: key", "DEL MethodInvocation", "DEL SimpleType: TrieEntry", "DEL VariableDeclarationFragment", "DEL SimpleName: isEmpty", "DEL SimpleName: key", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: added", "DEL SimpleType: V", "DEL MethodInvocation", "DEL Block", "DEL NullLiteral", "DEL SimpleName: TrieEntry", "DEL SimpleName: TrieEntry", "DEL PrefixExpression: !", "DEL Modifier: final", "DEL SimpleName: KeyAnalyzer", "DEL SimpleName: isEmpty", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"invalid lookup: \"", "DEL SimpleType: TrieEntry", "DEL SimpleName: K", "DEL SimpleName: K", "DEL SimpleName: K", "DEL SimpleName: ceil", "DEL IfStatement", "DEL SimpleName: added", "DEL VariableDeclarationFragment", "DEL SimpleName: lengthInBits", "DEL IfStatement", "DEL SimpleName: compareKeys", "DEL SimpleName: IllegalStateException", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL Block", "DEL ExpressionStatement", "DEL NumberLiteral: 2", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: K", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleType: V", "DEL SimpleName: removeEntry", "DEL Block", "DEL IfStatement", "DEL SimpleType: K", "DEL SimpleName: incrementSize", "DEL ParameterizedType: TrieEntry<K,V>", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: K", "DEL PrimitiveType: int", "DEL Block", "DEL SimpleType: TrieEntry", "DEL SimpleName: ceilingEntry", "DEL SimpleName: V", "DEL SimpleType: V", "DEL SimpleName: lengthInBits", "DEL SimpleName: added", "DEL ReturnStatement", "DEL PrefixExpression: !", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleType: K", "DEL Assignment: -=", "DEL SimpleName: V", "DEL Javadoc", "DEL QualifiedName: found.key", "DEL ParameterizedType: TrieEntry<K,V>", "DEL ThrowStatement", "DEL SimpleName: found", "DEL SimpleName: isEqualBitKey", "DEL SimpleName: firstEntry", "DEL SimpleName: key", "DEL SimpleName: bitIndex", "DEL SimpleName: added", "DEL IfStatement", "DEL SimpleName: lengthInBits", "DEL ExpressionStatement", "DEL SimpleName: K", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: key", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL ReturnStatement", "DEL SimpleName: root", "DEL TextElement: Returns a key-value mapping associated with the least key greater", "DEL SimpleType: TrieEntry", "DEL ReturnStatement", "DEL Block", "DEL Block", "DEL Block", "DEL SimpleType: V", "DEL SimpleName: KeyAnalyzer", "DEL SimpleName: bitIndex", "DEL SimpleName: root", "DEL Modifier: final", "DEL TextElement: than or equal to the given key, or null if there is no such key.", "DEL MethodInvocation", "DEL QualifiedName: found.key", "DEL ClassInstanceCreation", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: TrieEntry", "DEL SimpleType: K", "DEL Modifier: final", "DEL SimpleType: K", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleType: K", "DEL SimpleType: TrieEntry"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: added", "DEL Modifier: final", "DEL Block", "DEL SimpleType: V", "DEL SimpleName: key", "DEL MethodInvocation", "DEL SimpleName: added", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: K", "DEL SimpleName: lengthInBits", "DEL IfStatement", "DEL SimpleType: K", "DEL SimpleName: added", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL SimpleName: IllegalStateException", "DEL Javadoc", "DEL SimpleName: isValidBitIndex", "DEL MethodInvocation", "DEL IfStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: compareKeys", "DEL SimpleType: K", "DEL QualifiedName: found.key", "DEL SimpleName: KeyAnalyzer", "DEL SimpleName: lengthInBits", "DEL Block", "DEL SimpleName: lengthInBits", "DEL SimpleName: bitIndex", "DEL SimpleName: incrementSize", "DEL SimpleName: K", "DEL SimpleType: TrieEntry", "DEL IfStatement", "DEL SimpleName: V", "DEL Modifier: final", "DEL IfStatement", "DEL SimpleName: added", "DEL SimpleType: K", "DEL SimpleName: previousEntry", "DEL SimpleName: KeyAnalyzer", "DEL SimpleName: TrieEntry", "DEL SimpleType: TrieEntry", "DEL NumberLiteral: 2", "DEL VariableDeclarationFragment", "DEL SimpleName: key", "DEL InfixExpression: +", "DEL NullLiteral", "DEL SimpleName: V", "DEL Modifier: final", "DEL ReturnStatement", "DEL SimpleName: previousEntry", "DEL ClassInstanceCreation", "DEL SimpleType: K", "DEL VariableDeclarationStatement", "DEL SimpleName: key", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL SimpleName: lengthInBits", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: TrieEntry", "DEL NullLiteral", "DEL SimpleName: getNearestEntryForKey", "DEL SimpleName: previousEntry", "DEL SimpleName: TrieEntry", "DEL SimpleName: KeyAnalyzer", "DEL ThrowStatement", "DEL MethodInvocation", "DEL ParameterizedType: TrieEntry<K,V>", "DEL NullLiteral", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: bitIndex", "DEL SimpleName: V", "DEL MethodInvocation", "DEL StringLiteral: \"invalid lookup: \"", "DEL TextElement: strictly less than the given key, or null if there is no such key.", "DEL SimpleName: TrieEntry", "DEL PrimitiveType: int", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleType: TrieEntry", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleName: found", "DEL SimpleName: key", "DEL VariableDeclarationStatement", "DEL SimpleName: K", "DEL ExpressionStatement", "DEL Block", "DEL TextElement: Returns a key-value mapping associated with the greatest key", "DEL SimpleType: V", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SimpleName: prior", "DEL VariableDeclarationStatement", "DEL SimpleType: K", "DEL ReturnStatement", "DEL SimpleName: key", "DEL SimpleType: IllegalStateException", "DEL SimpleName: modCount", "DEL SimpleName: addEntry", "DEL Modifier: final", "DEL SimpleName: bitIndex", "DEL SimpleName: TrieEntry", "DEL Block", "DEL SimpleName: K", "DEL SimpleName: bitIndex", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleType: K", "DEL VariableDeclarationFragment", "DEL SimpleName: V", "DEL SimpleName: prior", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: found", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: isNullBitKey", "DEL ReturnStatement", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL SimpleType: V", "DEL SimpleName: bitIndex", "DEL SimpleName: lengthInBits", "DEL SimpleType: TrieEntry", "DEL IfStatement", "DEL SimpleName: found", "DEL SimpleType: TrieEntry", "DEL QualifiedName: found.key", "DEL SimpleName: K", "DEL SimpleName: key", "DEL SimpleType: V", "DEL SimpleName: lowerEntry", "DEL SimpleName: bitIndex", "DEL SimpleName: removeEntry", "DEL SingleVariableDeclaration", "DEL SimpleType: V", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: V", "DEL MethodInvocation", "DEL ParameterizedType: TrieEntry<K,V>", "DEL ParameterizedType: TrieEntry<K,V>", "DEL Assignment: -=", "DEL SimpleName: isEqualBitKey", "DEL SimpleName: K", "DEL Modifier: final"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL IfStatement", "DEL QualifiedName: found.key", "DEL Assignment: -=", "DEL SimpleName: bitIndex", "DEL SimpleName: lengthInBits", "DEL IfStatement", "DEL SimpleName: getNearestEntryForKey", "DEL SimpleName: K", "DEL SimpleName: key", "DEL VariableDeclarationFragment", "DEL SimpleType: K", "DEL SimpleType: V", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: V", "DEL SimpleName: key", "DEL QualifiedName: found.key", "DEL Block", "DEL Modifier: final", "DEL SimpleName: V", "DEL SimpleName: root", "DEL SimpleName: V", "DEL IfStatement", "DEL Block", "DEL TextElement: Returns a key-value mapping associated with the greatest key", "DEL SimpleName: lengthInBits", "DEL SimpleName: floor", "DEL MethodInvocation", "DEL SimpleType: TrieEntry", "DEL SimpleName: floorEntry", "DEL VariableDeclarationStatement", "DEL PrefixExpression: !", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: bitIndex", "DEL SimpleName: bitIndex", "DEL SimpleName: found", "DEL ExpressionStatement", "DEL StringLiteral: \"invalid lookup: \"", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL SimpleType: TrieEntry", "DEL SimpleName: lengthInBits", "DEL MethodInvocation", "DEL SimpleName: K", "DEL SimpleName: floor", "DEL SimpleName: isEqualBitKey", "DEL SimpleName: removeEntry", "DEL SimpleType: V", "DEL MethodInvocation", "DEL SimpleName: KeyAnalyzer", "DEL VariableDeclarationFragment", "DEL TextElement: less than or equal to the given key, or null if there is no such key.", "DEL MethodInvocation", "DEL Modifier: final", "DEL NullLiteral", "DEL ReturnStatement", "DEL IfStatement", "DEL TagElement", "DEL SimpleType: K", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL ParameterizedType: TrieEntry<K,V>", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: lengthInBits", "DEL SimpleType: V", "DEL SingleVariableDeclaration", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: previousEntry", "DEL SimpleName: key", "DEL SimpleName: bitIndex", "DEL MethodDeclaration", "DEL Modifier: final", "DEL SimpleName: isEmpty", "DEL SimpleName: K", "DEL SimpleName: isValidBitIndex", "DEL SimpleType: IllegalStateException", "DEL MethodInvocation", "DEL ParameterizedType: TrieEntry<K,V>", "DEL MethodInvocation", "DEL SimpleName: addEntry", "DEL SimpleName: root", "DEL SimpleName: found", "DEL ClassInstanceCreation", "DEL SimpleName: lengthInBits", "DEL ExpressionStatement", "DEL SimpleName: TrieEntry", "DEL SimpleType: K", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: added", "DEL IfStatement", "DEL SimpleName: isEmpty", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL SimpleName: added", "DEL SimpleName: key", "DEL ReturnStatement", "DEL SimpleType: K", "DEL PrefixExpression: !", "DEL SimpleType: K", "DEL SimpleName: V", "DEL Block", "DEL SimpleName: TrieEntry", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: KeyAnalyzer", "DEL MethodInvocation", "DEL SimpleName: isNullBitKey", "DEL SimpleName: bitIndex", "DEL Block", "DEL Block", "DEL SimpleName: found", "DEL Block", "DEL SimpleName: modCount", "DEL SimpleType: TrieEntry", "DEL Block", "DEL Modifier: final", "DEL SimpleName: IllegalStateException", "DEL SimpleName: KeyAnalyzer", "DEL SimpleType: V", "DEL SimpleType: TrieEntry", "DEL SimpleType: K", "DEL SimpleName: key", "DEL SimpleName: key", "DEL NullLiteral", "DEL Javadoc", "DEL ThrowStatement", "DEL SimpleName: K", "DEL SimpleName: key", "DEL ReturnStatement", "DEL SimpleName: added", "DEL ReturnStatement", "DEL IfStatement", "DEL ReturnStatement", "DEL SimpleName: TrieEntry", "DEL SimpleName: TrieEntry", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL NumberLiteral: 2", "DEL SimpleName: K", "DEL PrimitiveType: int", "DEL SimpleName: incrementSize", "DEL SimpleName: added", "DEL SimpleName: compareKeys", "DEL VariableDeclarationFragment", "DEL SimpleType: V", "DEL SimpleType: TrieEntry", "DEL SimpleName: V", "DEL SimpleName: root", "DEL SimpleName: root", "DEL SimpleName: K", "DEL NullLiteral", "DEL MethodInvocation", "DEL MethodInvocation", "DEL IfStatement", "DEL Block", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: TrieEntry", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: bitIndex", "DEL VariableDeclarationStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: V", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: entry", "DEL BreakStatement", "DEL PrimitiveType: int", "DEL SimpleName: offsetInBits", "DEL Assignment: =", "DEL SimpleType: K", "DEL SimpleName: current", "DEL NullLiteral", "DEL MethodInvocation", "DEL InfixExpression: >=", "DEL SimpleName: current", "DEL PrimitiveType: int", "DEL IfStatement", "DEL TextElement: we stop the lookup if h.bitIndex > lengthInBits.", "DEL SimpleName: offsetInBits", "DEL InfixExpression: <=", "DEL TextElement: Finds the subtree that contains the prefix.", "DEL ReturnStatement", "DEL SimpleName: current", "DEL SimpleName: lengthInBits", "DEL MethodInvocation", "DEL SimpleName: isBitSet", "DEL NumberLiteral: 0", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleType: K", "DEL Modifier: final", "DEL SimpleName: isEmpty", "DEL InfixExpression: !=", "DEL SimpleName: K", "DEL VariableDeclarationStatement", "DEL SimpleName: isBitSet", "DEL Block", "DEL SimpleName: K", "DEL SimpleName: V", "DEL SimpleName: entry", "DEL Modifier: final", "DEL SimpleType: TrieEntry", "DEL SimpleName: lengthInBits", "DEL WhileStatement", "DEL SimpleName: K", "DEL InfixExpression: &&", "DEL SimpleName: prefix", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: bitIndex", "DEL TextElement: This is very similar to getR but with the difference that", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: entry", "DEL SimpleName: V", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: entry", "DEL InfixExpression: +", "DEL SimpleName: lengthInBits", "DEL SimpleName: root", "DEL MethodInvocation", "DEL IfStatement", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL SimpleName: current", "DEL QualifiedName: current.right", "DEL QualifiedName: current.bitIndex", "DEL InfixExpression: <", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL SimpleName: V", "DEL MethodInvocation", "DEL QualifiedName: root.left", "DEL SimpleName: entry", "DEL SimpleType: TrieEntry", "DEL InfixExpression: &&", "DEL VariableDeclarationStatement", "DEL QualifiedName: entry.key", "DEL SimpleName: prefix", "DEL NullLiteral", "DEL InfixExpression: +", "DEL Modifier: final", "DEL SimpleType: K", "DEL InfixExpression: <", "DEL SimpleType: TrieEntry", "DEL QualifiedName: path.bitIndex", "DEL Assignment: =", "DEL SimpleName: bitIndex", "DEL SimpleName: getKey", "DEL SimpleName: getKey", "DEL SimpleName: path", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL QualifiedName: current.bitIndex", "DEL Block", "DEL SimpleName: TrieEntry", "DEL SimpleType: V", "DEL ConditionalExpression", "DEL SimpleName: endIndexInBits", "DEL SimpleName: current", "DEL Block", "DEL Block", "DEL SimpleName: endIndexInBits", "DEL IfStatement", "DEL InfixExpression: ||", "DEL SingleVariableDeclaration", "DEL SimpleName: path", "DEL InfixExpression: +", "DEL SimpleName: K", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: isEmpty", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: isBitSet", "DEL ExpressionStatement", "DEL SimpleName: TrieEntry", "DEL SimpleName: bitIndex", "DEL SimpleName: bitIndex", "DEL SimpleName: lengthInBits", "DEL SimpleName: lengthInBits", "DEL VariableDeclarationFragment", "DEL SimpleType: V", "DEL Block", "DEL SimpleName: lengthInBits", "DEL SimpleName: TrieEntry", "DEL Block", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleType: TrieEntry", "DEL Block", "DEL MethodInvocation", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL Javadoc", "DEL SimpleType: K", "DEL SimpleName: root", "DEL ExpressionStatement", "DEL QualifiedName: entry.key", "DEL TagElement", "DEL QualifiedName: current.left", "DEL SimpleName: lengthInBits", "DEL QualifiedName: entry.key", "DEL SimpleName: lengthInBits", "DEL SimpleName: prefix", "DEL BooleanLiteral: true", "DEL IfStatement", "DEL SimpleName: lengthInBits", "DEL InfixExpression: <", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL SimpleName: keyAnalyzer", "DEL PrefixExpression: !", "DEL SimpleName: subtree", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: offsetInBits", "DEL QualifiedName: current.bitIndex", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: lengthInBits", "DEL ReturnStatement", "DEL SimpleName: endIndexInBits", "DEL SimpleType: V", "DEL SimpleName: K", "DEL SimpleName: prefix", "DEL SimpleName: entry", "DEL SimpleName: path", "DEL MethodDeclaration", "DEL NullLiteral", "DEL SimpleName: offsetInBits", "DEL VariableDeclarationStatement", "DEL SimpleName: offsetInBits", "DEL SimpleName: V", "DEL SimpleName: current", "DEL SimpleName: TrieEntry", "DEL SimpleType: K", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: endIndexInBits"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: K", "DEL SimpleType: TrieEntry", "DEL TextElement:  is storing.", "DEL SimpleName: V", "DEL TextElement: we encounter a valid uplink. That uplink is the last key.", "DEL SimpleName: Trie", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: TrieEntry", "DEL TextElement: <p>This is implemented by going always to the right until", "DEL ParameterizedType: TrieEntry<K,V>", "DEL TagElement: @link", "DEL SimpleType: K", "DEL TextElement: Returns the last entry the ", "DEL SimpleName: lastEntry", "DEL SimpleName: followRight", "DEL Block", "DEL SimpleType: V", "DEL QualifiedName: root.left"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL ReturnStatement", "DEL QualifiedName: node.right", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: V", "DEL SimpleType: K", "DEL SimpleName: node", "DEL WhileStatement", "DEL SimpleName: node", "DEL InfixExpression: ==", "DEL SimpleName: K", "DEL SimpleName: followRight", "DEL Javadoc", "DEL SimpleName: K", "DEL SimpleName: V", "DEL TextElement: Traverses down the right path until it finds an uplink.", "DEL SimpleType: TrieEntry", "DEL SimpleType: K", "DEL TagElement", "DEL SimpleType: TrieEntry", "DEL Block", "DEL ReturnStatement", "DEL SimpleType: V", "DEL QualifiedName: node.right", "DEL SimpleName: TrieEntry", "DEL Assignment: =", "DEL MethodDeclaration", "DEL QualifiedName: node.right", "DEL InfixExpression: >", "DEL ExpressionStatement", "DEL NullLiteral", "DEL Block", "DEL SimpleType: V", "DEL SingleVariableDeclaration", "DEL QualifiedName: node.right.bitIndex", "DEL IfStatement", "DEL QualifiedName: node.bitIndex", "DEL SimpleName: TrieEntry", "DEL ParameterizedType: TrieEntry<K,V>", "DEL NullLiteral"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: TrieEntry", "DEL InfixExpression: ==", "DEL TextElement: - If it is root & root !isEmpty, return root.", "DEL QualifiedName: node.parent", "DEL WhileStatement", "DEL Block", "DEL SimpleName: followRight", "DEL SimpleName: previousEntry", "DEL ReturnStatement", "DEL Assignment: =", "DEL QualifiedName: start.predecessor.left", "DEL SimpleType: TrieEntry", "DEL ReturnStatement", "DEL SimpleName: K", "DEL SimpleType: K", "DEL SimpleName: followRight", "DEL SimpleName: root", "DEL SimpleName: V", "DEL TextElement: - If node.parent.left is not root, return it.", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleType: V", "DEL SimpleType: TrieEntry", "DEL Block", "DEL IfStatement", "DEL TextElement: - If it is root & root isEmpty, return null.", "DEL Block", "DEL QualifiedName: start.predecessor.left", "DEL Block", "DEL IfStatement", "DEL MethodInvocation", "DEL NullLiteral", "DEL TextElement: - If the uplink that returned us was a right uplink:", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: node", "DEL Block", "DEL InfixExpression: &&", "DEL ReturnStatement", "DEL QualifiedName: node.parent", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: node", "DEL QualifiedName: node.parent.left", "DEL SimpleName: start", "DEL MethodDeclaration", "DEL TextElement: node != node.parent.left.", "DEL ParameterizedType: TrieEntry<K,V>", "DEL QualifiedName: start.predecessor", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL IfStatement", "DEL QualifiedName: start.predecessor.left", "DEL TextElement: - If node.parent.left is uplink from node.parent:", "DEL TextElement: - Else, follow the right path from the predecessor's left.", "DEL SimpleType: K", "DEL SimpleName: K", "DEL NullLiteral", "DEL QualifiedName: start.predecessor.right", "DEL SingleVariableDeclaration", "DEL SimpleName: root", "DEL SimpleName: start", "DEL QualifiedName: node.parent", "DEL QualifiedName: node.parent.left", "DEL InfixExpression: ==", "DEL SimpleType: V", "DEL MethodInvocation", "DEL Modifier: final", "DEL IfStatement", "DEL MethodInvocation", "DEL TextElement: - If predecessor's left is a valid uplink from predecessor, return it.", "DEL TagElement", "DEL SimpleName: K", "DEL Block", "DEL MethodInvocation", "DEL TextElement: - If node.parent.left is not uplink from node.parent:", "DEL InfixExpression: ==", "DEL QualifiedName: node.parent.left", "DEL ThrowStatement", "DEL MethodInvocation", "DEL SimpleName: V", "DEL IfStatement", "DEL SimpleName: root", "DEL SimpleName: start", "DEL ReturnStatement", "DEL SimpleName: IllegalArgumentException", "DEL Block", "DEL ReturnStatement", "DEL IfStatement", "DEL Block", "DEL IfStatement", "DEL SimpleType: TrieEntry", "DEL QualifiedName: start.predecessor", "DEL SimpleName: node", "DEL SimpleType: K", "DEL ExpressionStatement", "DEL NullLiteral", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL QualifiedName: node.parent", "DEL StringLiteral: \"must have come from somewhere!\"", "DEL SimpleType: V", "DEL SimpleName: isValidUplink", "DEL TextElement: - If the uplink that returned us was a left uplink:", "DEL QualifiedName: start.predecessor", "DEL Block", "DEL TextElement: - Loop back through parents until we encounter a node where", "DEL ClassInstanceCreation", "DEL Block", "DEL TagElement: @param", "DEL NullLiteral", "DEL InfixExpression: ==", "DEL SimpleName: isValidUplink", "DEL SimpleName: TrieEntry", "DEL SimpleName: V", "DEL Block", "DEL TextElement:   the start entry", "DEL TextElement: Returns the node lexicographically before the given node (or null if none).", "DEL QualifiedName: node.parent.left", "DEL InfixExpression: !=", "DEL SimpleType: IllegalArgumentException", "DEL Block", "DEL TextElement: This follows four simple branches:", "DEL SimpleName: isEmpty", "DEL SimpleName: TrieEntry", "DEL QualifiedName: node.parent.left", "DEL TextElement: - Follow right path for first right child from node.parent.left", "DEL ParameterizedType: TrieEntry<K,V>"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: node", "DEL SimpleType: K", "DEL SimpleType: TrieEntry", "DEL SimpleType: TrieEntry", "DEL SimpleName: node", "DEL InfixExpression: ==", "DEL SimpleName: K", "DEL MethodInvocation", "DEL SimpleName: parentOfSubtree", "DEL ParameterizedType: TrieEntry<K,V>", "DEL Modifier: final", "DEL SimpleType: K", "DEL SimpleName: TrieEntry", "DEL SimpleName: firstEntry", "DEL TextElement: This will traverse only within the subtree.  If the given node", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: V", "DEL TextElement: is not within the subtree, this will have undefined results.", "DEL TextElement: If the given entry is null, returns the first node.", "DEL SimpleName: TrieEntry", "DEL QualifiedName: node.predecessor", "DEL TextElement: Returns the entry lexicographically after the given entry.", "DEL SimpleType: K", "DEL SimpleName: V", "DEL TagElement", "DEL NullLiteral", "DEL SimpleName: parentOfSubtree", "DEL SimpleName: V", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleType: V", "DEL SimpleName: nextEntryImpl", "DEL SimpleName: K", "DEL SimpleType: V", "DEL SimpleName: TrieEntry", "DEL SimpleName: nextEntryInSubtree", "DEL Modifier: final", "DEL SimpleType: V", "DEL Block", "DEL Block", "DEL ReturnStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: TrieEntry", "DEL SimpleName: node", "DEL MethodDeclaration", "DEL IfStatement", "DEL SimpleName: K", "DEL ReturnStatement"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Javadoc", "DEL VariableDeclarationStatement", "DEL SimpleName: key", "DEL SimpleType: Map.Entry", "DEL MethodRef", "DEL SimpleType: K", "DEL PrimitiveType: boolean", "DEL SimpleType: IllegalArgumentException", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleType: Map.Entry", "DEL SimpleName: Object", "DEL SimpleName: ret", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: remove", "DEL SingleVariableDeclaration", "DEL SimpleName: K", "DEL VariableDeclarationStatement", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: fromInclusive", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: isFromInclusive", "DEL SimpleName: IllegalArgumentException", "DEL Modifier: final", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL Modifier: final", "DEL InfixExpression: ||", "DEL ThisExpression", "DEL SimpleName: ret", "DEL SimpleName: K", "DEL TextElement:  is in the range.", "DEL PrefixExpression: !", "DEL SimpleType: SortedMap", "DEL SimpleName: fromKey", "DEL VariableDeclarationFragment", "DEL SimpleType: Set", "DEL Javadoc", "DEL SimpleType: K", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SimpleName: fromInclusive", "DEL TagElement", "DEL MethodRef", "DEL TextElement: Creates and returns a sub-range view of the current ", "DEL SingleVariableDeclaration", "DEL SimpleName: put", "DEL Modifier: final", "DEL SimpleName: K", "DEL MethodRef", "DEL SimpleName: fromKey", "DEL MethodInvocation", "DEL SimpleName: Set", "DEL SimpleName: ret", "DEL InfixExpression: ==", "DEL SimpleType: V", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Modifier: abstract", "DEL SimpleName: K", "DEL IfStatement", "DEL BooleanLiteral: false", "DEL SimpleType: K", "DEL PrefixExpression: !", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ThisExpression", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: Override", "DEL Modifier: final", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL ParenthesizedExpression", "DEL NumberLiteral: 0", "DEL Block", "DEL MethodInvocation", "DEL IfStatement", "DEL Modifier: abstract", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL NullLiteral", "DEL PrimitiveType: boolean", "DEL MethodDeclaration", "DEL SimpleName: forceInclusive", "DEL Modifier: protected", "DEL SimpleName: V", "DEL SimpleName: toKey", "DEL SimpleName: K", "DEL VariableDeclarationStatement", "DEL SimpleName: fromKey", "DEL SimpleName: key", "DEL MethodDeclaration", "DEL Block", "DEL NumberLiteral: 0", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: key", "DEL ParameterizedType: Set<Map.Entry<K,V>>", "DEL SimpleName: subMap", "DEL Block", "DEL ParenthesizedExpression", "DEL SimpleName: Override", "DEL InfixExpression: +", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL SimpleName: toKey", "DEL IfStatement", "DEL SimpleName: isFromInclusive", "DEL TagElement: @link", "DEL Modifier: final", "DEL MethodDeclaration", "DEL SimpleName: K", "DEL SimpleType: K", "DEL MethodInvocation", "DEL IfStatement", "DEL IfStatement", "DEL SimpleType: V", "DEL SimpleName: SortedMap", "DEL SimpleType: V", "DEL TextElement:  view. ", "DEL Modifier: final", "DEL Modifier: final", "DEL ParameterizedType: AbstractMap<K,V>", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: K", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SimpleName: toInclusive", "DEL BooleanLiteral: false", "DEL SimpleType: K", "DEL SimpleName: fromKey", "DEL MethodInvocation", "DEL SimpleName: V", "DEL SimpleName: key", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: V", "DEL Modifier: final", "DEL SimpleType: Comparator", "DEL MethodDeclaration", "DEL BooleanLiteral: true", "DEL SingleVariableDeclaration", "DEL SimpleName: getToKey", "DEL SimpleName: Override", "DEL SimpleType: IllegalArgumentException", "DEL SimpleType: K", "DEL SimpleName: ret", "DEL SimpleType: SortedMap", "DEL SimpleName: createRangeMap", "DEL SimpleName: getFromKey", "DEL MarkerAnnotation", "DEL Block", "DEL MarkerAnnotation", "DEL Modifier: protected", "DEL InfixExpression: +", "DEL SimpleType: K", "DEL ReturnStatement", "DEL SimpleType: Map.Entry", "DEL SimpleName: getFromKey", "DEL PrefixExpression: !", "DEL SimpleName: toKey", "DEL MethodInvocation", "DEL Modifier: protected", "DEL SimpleName: K", "DEL SingleVariableDeclaration", "DEL TextElement: Returns the FROM Key.", "DEL SimpleName: fromKey", "DEL NullLiteral", "DEL Modifier: volatile", "DEL IfStatement", "DEL SimpleType: V", "DEL SimpleName: entrySet", "DEL SimpleName: inRange", "DEL SimpleName: PatriciaTrie", "DEL SimpleType: K", "DEL ThrowStatement", "DEL MarkerAnnotation", "DEL PrimitiveType: boolean", "DEL SimpleName: compare", "DEL SingleVariableDeclaration", "DEL TagElement: @link", "DEL SimpleType: K", "DEL MethodInvocation", "DEL SimpleName: inRange", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL SimpleName: K", "DEL SimpleName: AbstractMap", "DEL PrefixExpression: !", "DEL Modifier: protected", "DEL SimpleType: K", "DEL StringLiteral: \"ToKey is out of range: \"", "DEL SimpleName: entrySet", "DEL SimpleName: V", "DEL SimpleName: key", "DEL SimpleType: K", "DEL Block", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: entrySet", "DEL VariableDeclarationFragment", "DEL ParameterizedType: SortedMap<K,V>", "DEL Modifier: transient", "DEL PrimitiveType: boolean", "DEL SimpleName: inToRange", "DEL MethodInvocation", "DEL Block", "DEL Modifier: private", "DEL PrimitiveType: boolean", "DEL PrimitiveType: boolean", "DEL MethodRef", "DEL SimpleName: K", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: getFromKey", "DEL MethodInvocation", "DEL TagElement: @link", "DEL QualifiedName: Map.Entry", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL Block", "DEL Block", "DEL TextElement: .", "DEL SimpleName: containsKey", "DEL SimpleName: comparator", "DEL IfStatement", "DEL Modifier: protected", "DEL Modifier: final", "DEL SimpleName: inRange2", "DEL SimpleType: K", "DEL SimpleName: getToKey", "DEL SimpleType: V", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: value", "DEL InfixExpression: <=", "DEL InfixExpression: &&", "DEL Assignment: =", "DEL InfixExpression: ||", "DEL SimpleName: K", "DEL SimpleName: createRangeMap", "DEL SimpleName: key", "DEL SimpleName: toKey", "DEL SimpleName: K", "DEL SimpleType: K", "DEL PrimitiveType: boolean", "DEL Modifier: final", "DEL SimpleName: toInclusive", "DEL TagElement", "DEL SimpleName: fromKey", "DEL TextElement: Returns true if the provided key is in the FROM range of the ", "DEL Modifier: final", "DEL TextElement: .", "DEL InfixExpression: ==", "DEL Modifier: final", "DEL Modifier: protected", "DEL SimpleName: toKey", "DEL Modifier: public", "DEL TagElement: @link", "DEL TagElement", "DEL MethodDeclaration", "DEL SimpleType: V", "DEL ParameterizedType: Map.Entry<K,V>", "DEL IfStatement", "DEL Modifier: public", "DEL Modifier: final", "DEL SimpleType: K", "DEL TextElement: .", "DEL NullLiteral", "DEL Modifier: protected", "DEL SimpleName: fromKey", "DEL Block", "DEL InfixExpression: +", "DEL TagElement", "DEL TextElement: Returns true if the provided key is in the TO range of the ", "DEL Javadoc", "DEL SimpleName: Comparator", "DEL SimpleName: toKey", "DEL TextElement: Whether or not the ", "DEL SimpleName: RangeMap", "DEL InfixExpression: ||", "DEL Modifier: final", "DEL SimpleName: isFromInclusive", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL Modifier: final", "DEL MethodInvocation", "DEL ParameterizedType: SortedMap<K,V>", "DEL Modifier: abstract", "DEL SimpleName: SortedMap", "DEL Javadoc", "DEL SimpleName: inFromRange", "DEL SimpleName: fromKey", "DEL Block", "DEL SimpleName: K", "DEL SingleVariableDeclaration", "DEL SimpleName: PatriciaTrie", "DEL SimpleName: inRange", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleName: containsKey", "DEL MethodInvocation", "DEL SimpleType: V", "DEL ParenthesizedExpression", "DEL SimpleName: K", "DEL SimpleName: getToKey", "DEL SimpleName: inRange", "DEL SimpleType: K", "DEL PrimitiveType: boolean", "DEL SimpleName: V", "DEL ParameterizedType: Comparator<? super K>", "DEL SimpleName: fromKey", "DEL ClassInstanceCreation", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: createRangeMap", "DEL SimpleName: PatriciaTrie", "DEL SimpleName: inRange2", "DEL MethodDeclaration", "DEL SimpleName: V", "DEL SimpleName: getFromKey", "DEL SimpleName: V", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL Modifier: abstract", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: V", "DEL SimpleName: entrySet", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleType: SortedMap", "DEL SimpleType: K", "DEL ReturnStatement", "DEL SimpleName: forceInclusive", "DEL SimpleName: key", "DEL SimpleName: V", "DEL Modifier: public", "DEL SimpleName: SortedMap", "DEL NumberLiteral: 0", "DEL SimpleName: inRange2", "DEL TagElement: @link", "DEL TagElement: @link", "DEL SimpleName: V", "DEL TagElement", "DEL SimpleName: inFromRange", "DEL ThrowStatement", "DEL SimpleName: K", "DEL SimpleName: forceInclusive", "DEL PrefixExpression: !", "DEL SimpleName: keyAnalyzer", "DEL Block", "DEL Modifier: final", "DEL SimpleName: RangeMap", "DEL ClassInstanceCreation", "DEL SimpleName: fromKey", "DEL Javadoc", "DEL SimpleName: K", "DEL SimpleName: inFromRange", "DEL BooleanLiteral: false", "DEL SimpleName: toKey", "DEL SimpleName: toKey", "DEL SimpleName: fromKey", "DEL SimpleName: fromKey", "DEL ClassInstanceCreation", "DEL NullLiteral", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: key", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL SimpleName: isFromInclusive", "DEL QualifiedName: Map.Entry", "DEL SimpleName: getFromKey", "DEL SimpleName: getToKey", "DEL SingleVariableDeclaration", "DEL SimpleName: K", "DEL SimpleName: SortedMap", "DEL SimpleName: isFromInclusive", "DEL VariableDeclarationFragment", "DEL SimpleName: createEntrySet", "DEL SimpleName: Override", "DEL SimpleType: K", "DEL PrimitiveType: boolean", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL InfixExpression: ||", "DEL TextElement: Creates and returns an ", "DEL Modifier: final", "DEL InfixExpression: &&", "DEL SimpleName: RangeMap", "DEL Block", "DEL SimpleName: comparator", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL SimpleName: isToInclusive", "DEL SimpleType: V", "DEL ReturnStatement", "DEL InfixExpression: >", "DEL SimpleName: castKey", "DEL SimpleName: K", "DEL SimpleName: Set", "DEL SimpleType: V", "DEL VariableDeclarationFragment", "DEL ThisExpression", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: isToInclusive", "DEL Block", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: key", "DEL SimpleName: getToKey", "DEL SimpleType: K", "DEL SimpleName: put", "DEL SimpleName: K", "DEL SimpleName: entrySet", "DEL SimpleName: castKey", "DEL TagElement: @link", "DEL PrefixExpression: !", "DEL ParenthesizedExpression", "DEL StringLiteral: \"Key is out of range: \"", "DEL InfixExpression: ==", "DEL SimpleName: compare", "DEL SimpleName: key", "DEL SimpleName: K", "DEL SimpleName: key", "DEL Modifier: abstract", "DEL SimpleType: K", "DEL ParameterizedType: SortedMap<K,V>", "DEL InfixExpression: +", "DEL TypeDeclaration: class", "DEL Modifier: public", "DEL IfStatement", "DEL ParameterizedType: SortedMap<K,V>", "DEL ReturnStatement", "DEL SimpleName: entrySet", "DEL ReturnStatement", "DEL SimpleType: V", "DEL SimpleName: toKey", "DEL Block", "DEL SimpleName: key", "DEL SimpleName: PatriciaTrie", "DEL SimpleName: createRangeMap", "DEL IfStatement", "DEL SimpleName: get", "DEL Modifier: private", "DEL SimpleName: K", "DEL SimpleType: V", "DEL StringLiteral: \"FromKey is out of range: \"", "DEL SimpleName: isToInclusive", "DEL ThisExpression", "DEL SimpleName: RangeMap", "DEL SimpleName: toInclusive", "DEL StringLiteral: \"ToKey is out of range: \"", "DEL PrimitiveType: boolean", "DEL Block", "DEL TextElement: .", "DEL ParameterizedType: Set<Map.Entry<K,V>>", "DEL SimpleName: headMap", "DEL MethodInvocation", "DEL SimpleName: K", "DEL MethodInvocation", "DEL SimpleName: K", "DEL SimpleName: key", "DEL SimpleName: K", "DEL TagElement", "DEL Block", "DEL MarkerAnnotation", "DEL SimpleType: V", "DEL TagElement", "DEL Modifier: final", "DEL Modifier: final", "DEL ThrowStatement", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL Modifier: protected", "DEL SimpleName: Set", "DEL TextElement: Whether or not the ", "DEL ThrowStatement", "DEL WildcardType: ? super K", "DEL SimpleName: V", "DEL MethodInvocation", "DEL QualifiedName: Map.Entry", "DEL TextElement: A range view of the ", "DEL ThrowStatement", "DEL SimpleType: K", "DEL SimpleName: SortedMap", "DEL SimpleName: value", "DEL Block", "DEL SimpleName: K", "DEL SimpleName: toKey", "DEL SimpleName: K", "DEL MethodDeclaration", "DEL TextElement:  view of the ", "DEL SimpleName: getToKey", "DEL SimpleName: key", "DEL MethodInvocation", "DEL SimpleName: key", "DEL PrimitiveType: boolean", "DEL SimpleType: K", "DEL MarkerAnnotation", "DEL SimpleName: fromKey", "DEL SimpleName: key", "DEL SingleVariableDeclaration", "DEL SimpleName: toKey", "DEL Modifier: protected", "DEL SimpleType: SortedMap", "DEL SimpleType: Set", "DEL MethodInvocation", "DEL TextElement: .", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL TagElement: @link", "DEL InfixExpression: <", "DEL InfixExpression: ==", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: key", "DEL SimpleName: toKey", "DEL ReturnStatement", "DEL SimpleName: get", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL Javadoc", "DEL TextElement: Returns true if the provided key is greater than TO and less than FROM.", "DEL SimpleName: toKey", "DEL MethodInvocation", "DEL SimpleName: K", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL TextElement: This form allows the high endpoint (as well as all legit keys).", "DEL SimpleName: V", "DEL SimpleName: key", "DEL SimpleName: inRange2", "DEL SimpleType: IllegalArgumentException", "DEL ParameterizedType: SortedMap<K,V>", "DEL SimpleName: entrySet", "DEL Modifier: abstract", "DEL ExpressionStatement", "DEL InfixExpression: >=", "DEL InfixExpression: ||", "DEL FieldDeclaration", "DEL ReturnStatement", "DEL Block", "DEL SimpleType: K", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL Block", "DEL PrefixExpression: !", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL PrimitiveType: boolean", "DEL TagElement", "DEL SimpleName: RangeMap", "DEL SimpleName: remove", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: fromKey", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: inToRange", "DEL SimpleType: V", "DEL SimpleName: ret", "DEL NullLiteral", "DEL MethodInvocation", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleName: ret", "DEL Modifier: final", "DEL StringLiteral: \"FromKey is out of range: \"", "DEL Modifier: protected", "DEL SimpleName: key", "DEL TagElement", "DEL SimpleName: forceInclusive", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL SimpleName: keyAnalyzer", "DEL SimpleName: K", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: getFromKey", "DEL IfStatement", "DEL TagElement", "DEL ThisExpression", "DEL Block", "DEL SimpleType: AbstractMap", "DEL SimpleName: tailMap", "DEL SimpleName: K", "DEL SimpleName: isToInclusive", "DEL ReturnStatement", "DEL SimpleType: K", "DEL SimpleName: castKey", "DEL SimpleName: toKey", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: IllegalArgumentException", "DEL SimpleType: Object", "DEL SimpleName: inRange", "DEL SimpleType: K", "DEL SimpleType: SortedMap", "DEL SimpleName: createEntrySet", "DEL TextElement: The ", "DEL SimpleName: PatriciaTrie", "DEL SimpleType: K", "DEL SimpleName: isToInclusive", "DEL InfixExpression: ||", "DEL TextElement: Returns the TO Key.", "DEL BooleanLiteral: false", "DEL SimpleType: K", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: V", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL SimpleName: key", "DEL SimpleName: toKey", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SimpleType: IllegalArgumentException", "DEL Javadoc", "DEL ReturnStatement", "DEL Modifier: final", "DEL SimpleName: fromInclusive", "DEL SimpleName: inToRange", "DEL SimpleType: K", "DEL Modifier: public", "DEL SimpleType: K", "DEL SimpleName: fromKey", "DEL MethodInvocation", "DEL ParameterizedType: Set<Map.Entry<K,V>>", "DEL Modifier: abstract", "DEL Modifier: public", "DEL SimpleName: key", "DEL Block", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TextElement:  is in the range.", "DEL ReturnStatement", "DEL TagElement: @link", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: Trie", "DEL ReturnStatement", "DEL SimpleType: Set", "DEL MethodInvocation", "DEL SimpleName: inRange2", "DEL SimpleType: K"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: toKey", "DEL Modifier: final", "DEL NullLiteral", "DEL SimpleName: first", "DEL SimpleName: e", "DEL MethodDeclaration", "DEL Block", "DEL MarkerAnnotation", "DEL Modifier: final", "DEL FieldAccess", "DEL ThisExpression", "DEL Modifier: final", "DEL BooleanLiteral: false", "DEL SimpleName: e", "DEL MethodDeclaration", "DEL SimpleName: e", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: lastEntry", "DEL PrimitiveType: boolean", "DEL NullLiteral", "DEL StringLiteral: \"must have a from or to!\"", "DEL Modifier: final", "DEL Modifier: final", "DEL Modifier: final", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: K", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleName: toKey", "DEL BooleanLiteral: false", "DEL SimpleName: fromInclusive", "DEL MethodDeclaration", "DEL SimpleName: IllegalArgumentException", "DEL ParameterizedType: Entry<K,V>", "DEL InfixExpression: >", "DEL MarkerAnnotation", "DEL ClassInstanceCreation", "DEL BooleanLiteral: false", "DEL SimpleName: lowerEntry", "DEL IfStatement", "DEL SimpleName: fromKey", "DEL NullLiteral", "DEL SimpleName: e", "DEL SimpleType: K", "DEL Modifier: protected", "DEL SimpleName: K", "DEL SimpleType: Map.Entry", "DEL SimpleName: e", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL Block", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleType: K", "DEL ClassInstanceCreation", "DEL InfixExpression: ||", "DEL MethodDeclaration", "DEL SimpleName: K", "DEL SimpleName: toInclusive", "DEL SimpleType: SortedMap", "DEL MethodInvocation", "DEL Block", "DEL InfixExpression: !=", "DEL Assignment: =", "DEL SimpleName: toInclusive", "DEL Assignment: =", "DEL SimpleType: NoSuchElementException", "DEL InfixExpression: !=", "DEL SimpleName: toInclusive", "DEL SimpleName: RangeEntryMap", "DEL SimpleType: K", "DEL TagElement", "DEL SimpleName: toKey", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: K", "DEL SimpleName: RangeEntryMap", "DEL InfixExpression: ==", "DEL SimpleName: toInclusive", "DEL SimpleName: fromKey", "DEL Modifier: protected", "DEL SimpleName: K", "DEL SimpleName: keyAnalyzer", "DEL SimpleType: Entry", "DEL Assignment: =", "DEL SimpleType: K", "DEL SimpleName: fromInclusive", "DEL SimpleName: fromKey", "DEL SimpleName: RangeMap", "DEL SimpleName: V", "DEL SimpleName: fromInclusive", "DEL ReturnStatement", "DEL SimpleName: fromInclusive", "DEL SimpleName: inToRange", "DEL SingleVariableDeclaration", "DEL SimpleName: fromKey", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleType: K", "DEL Modifier: final", "DEL SimpleName: Override", "DEL IfStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: e", "DEL InfixExpression: &&", "DEL SimpleName: fromKey", "DEL Assignment: =", "DEL SimpleName: fromInclusive", "DEL MethodDeclaration", "DEL SimpleName: toKey", "DEL ThisExpression", "DEL MethodInvocation", "DEL TagElement: @link", "DEL SimpleName: fromKey", "DEL SimpleType: K", "DEL SimpleName: toKey", "DEL SimpleName: fromKey", "DEL IfStatement", "DEL SimpleName: RangeEntryMap", "DEL ClassInstanceCreation", "DEL SimpleType: NoSuchElementException", "DEL SimpleName: toKey", "DEL SimpleName: K", "DEL FieldAccess", "DEL SimpleType: K", "DEL NullLiteral", "DEL SimpleName: K", "DEL SimpleName: e", "DEL NumberLiteral: 0", "DEL SimpleName: getKey", "DEL ClassInstanceCreation", "DEL TextElement: the toKey excluded from the range.", "DEL TextElement: Whether or not the 'to' is inclusive. ", "DEL SimpleName: lastKey", "DEL InfixExpression: !=", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL Block", "DEL SimpleName: K", "DEL Modifier: final", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: K", "DEL NullLiteral", "DEL SimpleType: K", "DEL ThisExpression", "DEL SimpleName: RangeEntryMap", "DEL SimpleName: higherEntry", "DEL SimpleName: K", "DEL SimpleName: Override", "DEL SimpleName: fromInclusive", "DEL FieldAccess", "DEL SimpleName: Entry", "DEL Modifier: protected", "DEL TagElement", "DEL SimpleName: Override", "DEL TextElement: Whether or not the 'from' is inclusive. ", "DEL SingleVariableDeclaration", "DEL SimpleType: RangeEntryMap", "DEL Modifier: private", "DEL Modifier: public", "DEL SimpleName: toInclusive", "DEL SimpleType: K", "DEL TextElement: s.", "DEL SimpleName: getKey", "DEL ExpressionStatement", "DEL ConditionalExpression", "DEL SimpleName: toKey", "DEL Block", "DEL InfixExpression: &&", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleName: toKey", "DEL Block", "DEL FieldDeclaration", "DEL InfixExpression: ==", "DEL SimpleName: V", "DEL Javadoc", "DEL InfixExpression: &&", "DEL VariableDeclarationFragment", "DEL SimpleName: inFromRange", "DEL ThrowStatement", "DEL SimpleName: K", "DEL ThisExpression", "DEL SimpleName: first", "DEL IfStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: toKey", "DEL InfixExpression: &&", "DEL Block", "DEL SimpleName: firstEntry", "DEL PrimitiveType: boolean", "DEL ThisExpression", "DEL InfixExpression: ||", "DEL SimpleName: Set", "DEL TagElement: @link", "DEL SimpleName: K", "DEL Block", "DEL ExpressionStatement", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: V", "DEL SimpleType: K", "DEL Block", "DEL SimpleType: K", "DEL SimpleName: toKey", "DEL PrimitiveType: boolean", "DEL TagElement", "DEL SimpleName: fromKey", "DEL ConstructorInvocation", "DEL TextElement:  that deals with ", "DEL TextElement: .", "DEL NullLiteral", "DEL SimpleName: K", "DEL Javadoc", "DEL ConditionalExpression", "DEL SimpleName: toKey", "DEL Javadoc", "DEL MarkerAnnotation", "DEL Modifier: final", "DEL SimpleName: fromKey", "DEL ThrowStatement", "DEL MethodInvocation", "DEL ParameterizedType: Set<Entry<K,V>>", "DEL FieldDeclaration", "DEL SimpleType: K", "DEL SimpleName: fromKey", "DEL SimpleName: e", "DEL SimpleName: e", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ParameterizedType: SortedMap<K,V>", "DEL SimpleName: toKey", "DEL SimpleType: Set", "DEL Assignment: =", "DEL Block", "DEL SimpleName: K", "DEL InfixExpression: !=", "DEL SimpleName: toKey", "DEL ReturnStatement", "DEL SimpleName: e", "DEL SimpleName: toInclusive", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: K", "DEL Assignment: =", "DEL TagElement: @link", "DEL TagElement", "DEL NullLiteral", "DEL SimpleName: V", "DEL InfixExpression: !=", "DEL InfixExpression: ==", "DEL TextElement: Creates a ", "DEL QualifiedName: Map.Entry", "DEL VariableDeclarationFragment", "DEL PrimitiveType: boolean", "DEL PrefixExpression: !", "DEL ParameterizedType: Map.Entry<K,V>", "DEL ExpressionStatement", "DEL Modifier: private", "DEL Block", "DEL IfStatement", "DEL SimpleType: K", "DEL SingleVariableDeclaration", "DEL SimpleType: RangeMap", "DEL ExpressionStatement", "DEL SimpleName: compare", "DEL ReturnStatement", "DEL SimpleType: V", "DEL ReturnStatement", "DEL SimpleType: V", "DEL SimpleName: getFromKey", "DEL SimpleName: getToKey", "DEL SimpleName: fromKey", "DEL VariableDeclarationStatement", "DEL Block", "DEL TagElement: @link", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL Modifier: final", "DEL IfStatement", "DEL TextElement:  with the fromKey included and", "DEL TypeDeclaration: class", "DEL SimpleType: V", "DEL Assignment: =", "DEL QualifiedName: Map.Entry", "DEL SimpleName: K", "DEL Modifier: final", "DEL Modifier: public", "DEL StringLiteral: \"fromKey > toKey\"", "DEL SingleVariableDeclaration", "DEL SimpleName: floorEntry", "DEL SimpleName: RangeMap", "DEL Javadoc", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL Modifier: private", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL SimpleType: V", "DEL SimpleType: K", "DEL SimpleName: last", "DEL TextElement: Creates a ", "DEL VariableDeclarationStatement", "DEL SimpleName: Override", "DEL SimpleName: createEntrySet", "DEL SimpleName: toInclusive", "DEL NullLiteral", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL NullLiteral", "DEL SimpleName: fromInclusive", "DEL ThrowStatement", "DEL PrimitiveType: boolean", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleName: toKey", "DEL SimpleName: RangeEntryMap", "DEL SimpleName: firstKey", "DEL Modifier: protected", "DEL TagElement", "DEL SimpleType: K", "DEL ReturnStatement", "DEL IfStatement", "DEL Block", "DEL SimpleName: fromKey", "DEL Modifier: public", "DEL SimpleName: toKey", "DEL ReturnStatement", "DEL SimpleName: RangeEntryMap", "DEL TextElement: A ", "DEL SimpleName: fromInclusive", "DEL SimpleType: RangeEntrySet", "DEL Modifier: private", "DEL InfixExpression: &&", "DEL NullLiteral", "DEL Modifier: final", "DEL ClassInstanceCreation", "DEL SimpleName: fromKey", "DEL ExpressionStatement", "DEL MarkerAnnotation", "DEL TextElement: The key to start from, null if the beginning. ", "DEL SimpleName: fromKey", "DEL SimpleType: K", "DEL Block", "DEL SimpleName: Override", "DEL Block", "DEL SimpleName: ceilingEntry", "DEL MethodInvocation", "DEL SimpleName: last", "DEL Block", "DEL SimpleType: K", "DEL SimpleName: e", "DEL InfixExpression: ==", "DEL SimpleName: createRangeMap", "DEL SimpleName: SortedMap", "DEL NullLiteral", "DEL SimpleName: e", "DEL SimpleName: NoSuchElementException", "DEL FieldAccess", "DEL Modifier: public", "DEL Block", "DEL InfixExpression: ==", "DEL InfixExpression: ==", "DEL NullLiteral", "DEL SimpleName: fromKey", "DEL SimpleName: NoSuchElementException", "DEL SimpleName: last", "DEL SimpleName: isFromInclusive", "DEL SimpleName: IllegalArgumentException", "DEL Modifier: final", "DEL SimpleType: K", "DEL SimpleName: RangeEntrySet", "DEL MethodInvocation", "DEL IfStatement", "DEL PrimitiveType: boolean", "DEL SimpleName: K", "DEL ParameterizedType: Map.Entry<K,V>", "DEL MarkerAnnotation", "DEL Assignment: =", "DEL SimpleName: Entry", "DEL SimpleType: Map.Entry", "DEL SimpleName: fromKey", "DEL SimpleName: first", "DEL SimpleName: e", "DEL TextElement: The key to end at, null if till the end. ", "DEL SimpleType: IllegalArgumentException", "DEL Modifier: final", "DEL BooleanLiteral: true", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL SimpleName: K", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL Javadoc", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL SimpleName: isToInclusive", "DEL Assignment: =", "DEL SimpleName: toInclusive", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL ThrowStatement", "DEL MarkerAnnotation", "DEL VariableDeclarationFragment", "DEL SimpleName: e", "DEL SimpleName: toKey", "DEL Block"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleType: K", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleName: iterator", "DEL VariableDeclarationFragment", "DEL SimpleName: Override", "DEL SimpleName: node", "DEL TextElement: A ", "DEL TextElement:  for ", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL ParameterizedType: TrieEntry<K,V>", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL Modifier: private", "DEL InfixExpression: ==", "DEL SimpleType: Map.Entry", "DEL SimpleName: K", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL StringLiteral: \"unchecked\"", "DEL SingleVariableDeclaration", "DEL SimpleName: V", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleName: K", "DEL InstanceofExpression", "DEL IfStatement", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleName: Override", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL SimpleName: o", "DEL SimpleType: NoSuchElementException", "DEL SimpleType: AbstractSet", "DEL SimpleName: first", "DEL NumberLiteral: 1", "DEL MethodDeclaration", "DEL PrefixExpression: !", "DEL SimpleType: TrieEntry", "DEL IfStatement", "DEL PrefixExpression: ++", "DEL SimpleType: K", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL NullLiteral", "DEL SimpleType: Map.Entry", "DEL SimpleName: RangeEntrySet", "DEL ThisExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: Set", "DEL MethodInvocation", "DEL SimpleName: expectedModCount", "DEL Modifier: transient", "DEL QualifiedName: next.key", "DEL SimpleName: o", "DEL SimpleName: key", "DEL BooleanLiteral: false", "DEL TagElement: @link", "DEL TextElement: s.", "DEL SimpleName: V", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL SimpleName: firstEntry", "DEL SimpleName: size", "DEL SimpleName: getValue", "DEL ExpressionStatement", "DEL SimpleName: K", "DEL SimpleName: getEntry", "DEL VariableDeclarationStatement", "DEL QualifiedName: Map.Entry", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: getEntry", "DEL Modifier: public", "DEL InfixExpression: !=", "DEL SingleVariableDeclaration", "DEL ParenthesizedExpression", "DEL SimpleName: first", "DEL Assignment: =", "DEL SimpleName: TrieEntry", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL TagElement: @link", "DEL NullLiteral", "DEL SimpleName: NoSuchElementException", "DEL Modifier: public", "DEL SimpleName: K", "DEL MethodInvocation", "DEL SimpleName: iterator", "DEL NullLiteral", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: EntryIterator", "DEL SimpleName: K", "DEL CastExpression", "DEL Modifier: final", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: inRange", "DEL SimpleName: entry", "DEL SimpleName: K", "DEL SimpleType: TrieEntry", "DEL ThisExpression", "DEL TextElement: An ", "DEL ReturnStatement", "DEL Modifier: public", "DEL SimpleType: TrieEntry", "DEL Modifier: final", "DEL SimpleType: Map.Entry", "DEL Block", "DEL Block", "DEL SimpleName: o", "DEL SimpleName: ceilingEntry", "DEL SimpleName: key", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: last", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: V", "DEL SimpleType: K", "DEL CastExpression", "DEL Modifier: final", "DEL SimpleName: Iterator", "DEL SimpleName: toKey", "DEL TypeDeclaration: class", "DEL Modifier: final", "DEL BooleanLiteral: false", "DEL VariableDeclarationFragment", "DEL SimpleName: V", "DEL SimpleName: it", "DEL SimpleName: K", "DEL VariableDeclarationFragment", "DEL SimpleType: K", "DEL InfixExpression: !=", "DEL SimpleName: o", "DEL ForStatement", "DEL SimpleName: size", "DEL SimpleName: entry", "DEL FieldDeclaration", "DEL MarkerAnnotation", "DEL ParameterizedType: TrieEntry<K,V>", "DEL ThisExpression", "DEL Block", "DEL MethodDeclaration", "DEL NullLiteral", "DEL SimpleType: V", "DEL ReturnStatement", "DEL Modifier: private", "DEL InfixExpression: ==", "DEL ParameterizedType: TrieEntry<K,V>", "DEL ExpressionStatement", "DEL SimpleType: V", "DEL IfStatement", "DEL SimpleName: getKey", "DEL SimpleName: K", "DEL SimpleName: RangeMap", "DEL TextElement: Creates a ", "DEL SimpleType: K", "DEL SimpleName: EntryIterator", "DEL SimpleName: getKey", "DEL ThrowStatement", "DEL SimpleType: RangeMap", "DEL SimpleType: Map.Entry", "DEL SimpleType: V", "DEL ParameterizedType: AbstractSet<Map.Entry<K,V>>", "DEL MethodInvocation", "DEL SimpleName: K", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL Block", "DEL InfixExpression: &&", "DEL SimpleName: K", "DEL SimpleName: o", "DEL SimpleName: toKey", "DEL Block", "DEL SimpleName: getFromKey", "DEL SimpleType: V", "DEL InfixExpression: !=", "DEL SimpleName: size", "DEL SimpleType: K", "DEL InfixExpression: ==", "DEL SimpleType: K", "DEL Javadoc", "DEL SimpleName: entry", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL SimpleType: Map.Entry", "DEL Modifier: private", "DEL Modifier: private", "DEL SimpleName: toKey", "DEL InstanceofExpression", "DEL SimpleName: delegate", "DEL SimpleName: delegate", "DEL Modifier: final", "DEL PrimitiveType: boolean", "DEL SimpleName: last", "DEL SingleMemberAnnotation", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleType: K", "DEL ParameterizedType: TrieEntry<K,V>", "DEL NullLiteral", "DEL SimpleName: remove", "DEL SimpleType: Iterator", "DEL SimpleName: TrieEntry", "DEL ConditionalExpression", "DEL Block", "DEL SimpleName: getKey", "DEL BooleanLiteral: false", "DEL InfixExpression: !=", "DEL SimpleName: o", "DEL Block", "DEL SimpleName: Override", "DEL FieldDeclaration", "DEL SimpleName: V", "DEL SimpleType: Object", "DEL SimpleType: Iterator", "DEL TextElement: .", "DEL MarkerAnnotation", "DEL PrimitiveType: boolean", "DEL SimpleName: size", "DEL SimpleName: last", "DEL ExpressionStatement", "DEL IfStatement", "DEL Modifier: public", "DEL ReturnStatement", "DEL QualifiedName: Map.Entry", "DEL SimpleName: V", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL Block", "DEL SimpleType: TrieEntry", "DEL NumberLiteral: 0", "DEL SimpleName: K", "DEL SimpleName: Override", "DEL SimpleType: TrieEntry", "DEL MethodInvocation", "DEL SimpleName: delegate", "DEL SimpleName: excludedKey", "DEL SimpleName: Iterator", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Map.Entry<K,V>", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL Modifier: public", "DEL SimpleType: V", "DEL SimpleName: contains", "DEL Modifier: public", "DEL SimpleName: TrieEntry", "DEL SimpleName: it", "DEL SimpleName: fromKey", "DEL SimpleName: last", "DEL MarkerAnnotation", "DEL TagElement: @link", "DEL ExpressionStatement", "DEL QualifiedName: Map.Entry", "DEL SimpleName: hasNext", "DEL StringLiteral: \"delegate\"", "DEL SimpleName: Iterator", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL SimpleType: V", "DEL SimpleName: delegate", "DEL MethodInvocation", "DEL SimpleName: V", "DEL QualifiedName: Map.Entry", "DEL SimpleName: V", "DEL SimpleName: V", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: excludedKey", "DEL SimpleType: V", "DEL SimpleName: node", "DEL SimpleType: K", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: hasNext", "DEL NullLiteral", "DEL SimpleName: expectedModCount", "DEL SimpleName: expectedModCount", "DEL MethodDeclaration", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL PrimitiveType: boolean", "DEL SimpleName: EntryIterator", "DEL TextElement:  view of a ", "DEL TagElement: @link", "DEL SimpleName: first", "DEL SimpleType: V", "DEL TextElement: Creates a ", "DEL SimpleType: K", "DEL MethodInvocation", "DEL SimpleType: K", "DEL QualifiedName: Map.Entry", "DEL PrimitiveType: boolean", "DEL Modifier: final", "DEL SimpleName: removeEntry", "DEL Modifier: final", "DEL SimpleType: K", "DEL ReturnStatement", "DEL QualifiedName: next.key", "DEL InfixExpression: !=", "DEL SimpleName: K", "DEL SimpleName: getToKey", "DEL SimpleType: K", "DEL FieldDeclaration", "DEL InfixExpression: &&", "DEL InfixExpression: ||", "DEL FieldAccess", "DEL SimpleName: NullPointerException", "DEL Block", "DEL SimpleName: key", "DEL SimpleName: V", "DEL SimpleName: first", "DEL Assignment: =", "DEL InfixExpression: !=", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleName: modCount", "DEL SimpleName: isEmpty", "DEL SimpleName: TrieEntry", "DEL SimpleName: getValue", "DEL Assignment: =", "DEL TypeDeclaration: class", "DEL TagElement", "DEL SimpleName: V", "DEL SimpleName: AbstractSet", "DEL SimpleName: K", "DEL Block", "DEL SimpleName: TrieIterator", "DEL SimpleName: key", "DEL SimpleType: Map.Entry", "DEL TextElement: .", "DEL Block", "DEL SimpleName: fromKey", "DEL QualifiedName: Map.Entry", "DEL SimpleName: ceilingEntry", "DEL FieldAccess", "DEL SimpleType: K", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleType: V", "DEL ParameterizedType: Map.Entry<K,V>", "DEL NullLiteral", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: V", "DEL SimpleName: size", "DEL SimpleType: V", "DEL SimpleName: entry", "DEL Modifier: final", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleName: K", "DEL IfStatement", "DEL SingleMemberAnnotation", "DEL MethodInvocation", "DEL SimpleName: nextEntry", "DEL SimpleName: PatriciaTrie", "DEL SimpleName: K", "DEL SimpleName: compare", "DEL SimpleName: node", "DEL MarkerAnnotation", "DEL SimpleName: compare", "DEL TagElement", "DEL SimpleName: K", "DEL SimpleName: Object", "DEL QualifiedName: Map.Entry", "DEL Modifier: public", "DEL SimpleName: next", "DEL SimpleName: getValue", "DEL SimpleType: V", "DEL PrefixExpression: !", "DEL Javadoc", "DEL SimpleName: RangeEntrySet", "DEL SimpleName: TrieEntry", "DEL Javadoc", "DEL Modifier: final", "DEL SimpleName: getValue", "DEL Modifier: transient", "DEL SimpleName: last", "DEL SimpleName: delegate", "DEL SimpleName: next", "DEL PrefixExpression: !", "DEL ParenthesizedExpression", "DEL Modifier: private", "DEL SimpleName: RangeMap", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: Override", "DEL SimpleName: K", "DEL WildcardType: ?", "DEL ParameterizedType: Iterator<Map.Entry<K,V>>", "DEL SimpleName: TrieEntry", "DEL VariableDeclarationExpression", "DEL TextElement: .", "DEL ExpressionStatement", "DEL SimpleType: Object", "DEL SuperConstructorInvocation", "DEL SimpleName: K", "DEL PrimitiveType: int", "DEL SimpleName: Object", "DEL SimpleType: Map.Entry", "DEL IfStatement", "DEL SimpleName: Override", "DEL SimpleName: delegate", "DEL SimpleName: key", "DEL StringLiteral: \"unchecked\"", "DEL SimpleName: key", "DEL SimpleName: first", "DEL MethodInvocation", "DEL TagElement: @link", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SimpleName: entry", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: node", "DEL NullLiteral", "DEL SimpleName: modCount", "DEL SimpleName: delegate", "DEL SimpleName: RangeEntrySet", "DEL PrefixExpression: -", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL ClassInstanceCreation", "DEL SimpleType: TrieIterator", "DEL TagElement: @link", "DEL FieldAccess", "DEL SimpleType: Map.Entry", "DEL Modifier: private", "DEL Block", "DEL Block", "DEL MethodDeclaration", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: next", "DEL SimpleName: entry", "DEL ParameterizedType: Iterator<?>", "DEL SimpleName: V", "DEL PrefixExpression: !", "DEL SimpleType: V", "DEL SimpleName: K", "DEL Block", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleName: first", "DEL IfStatement", "DEL Assignment: =", "DEL SimpleName: RangeMap", "DEL ExpressionStatement", "DEL SimpleType: K", "DEL Assignment: =", "DEL SimpleName: delegate", "DEL Modifier: public", "DEL BooleanLiteral: false", "DEL SimpleType: K", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: last", "DEL Block", "DEL SimpleName: EntryIterator", "DEL ParameterizedType: TrieIterator<Map.Entry<K,V>>", "DEL QualifiedName: Map.Entry", "DEL SimpleType: Map.Entry", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleType: V", "DEL SimpleName: compare", "DEL Block", "DEL Javadoc", "DEL PrefixExpression: !", "DEL Block", "DEL QualifiedName: Map.Entry", "DEL ReturnStatement", "DEL SimpleName: excludedKey", "DEL SimpleType: TrieEntry", "DEL SimpleType: K", "DEL SimpleType: K", "DEL SimpleName: V", "DEL ReturnStatement", "DEL SimpleName: SuppressWarnings", "DEL IfStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: next", "DEL SimpleType: EntryIterator", "DEL SimpleName: RangeEntrySet", "DEL MethodInvocation", "DEL SimpleName: node", "DEL PrefixExpression: -", "DEL SimpleName: excludedKey", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: it", "DEL NumberLiteral: 1", "DEL SimpleName: SuppressWarnings", "DEL Block", "DEL SimpleName: inRange", "DEL MarkerAnnotation", "DEL SimpleType: K", "DEL MethodInvocation", "DEL ThisExpression", "DEL NullLiteral", "DEL SimpleType: Map.Entry", "DEL VariableDeclarationFragment", "DEL SimpleType: NullPointerException", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: PatriciaTrie", "DEL TagElement", "DEL BooleanLiteral: true", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleName: compare", "DEL MethodInvocation", "DEL SimpleName: hasNext", "DEL SimpleType: RangeMap", "DEL ReturnStatement", "DEL SimpleName: size", "DEL VariableDeclarationFragment", "DEL InfixExpression: &&", "DEL Assignment: =", "DEL IfStatement", "DEL FieldAccess", "DEL SimpleName: fromKey", "DEL FieldDeclaration", "DEL ThrowStatement", "DEL MethodInvocation", "DEL SimpleName: delegate", "DEL SimpleName: iterator", "DEL SimpleType: V", "DEL QualifiedName: Map.Entry", "DEL Modifier: final"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: PrefixRangeMap", "DEL PrimitiveType: boolean", "DEL Modifier: final", "DEL SimpleName: lengthInBits", "DEL TextElement: Creates a ", "DEL InfixExpression: ==", "DEL IfStatement", "DEL FieldDeclaration", "DEL ThisExpression", "DEL PrimitiveType: boolean", "DEL SimpleName: lengthInBits", "DEL SimpleType: K", "DEL QualifiedName: Map.Entry", "DEL SimpleName: lengthInBits", "DEL IfStatement", "DEL Modifier: public", "DEL SimpleName: toKey", "DEL SimpleType: NoSuchElementException", "DEL SimpleType: K", "DEL SimpleType: SortedMap", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL SimpleName: Override", "DEL Assignment: =", "DEL SimpleName: NoSuchElementException", "DEL SimpleType: K", "DEL SimpleName: Object", "DEL VariableDeclarationFragment", "DEL MarkerAnnotation", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleType: K", "DEL TagElement: @link", "DEL TagElement", "DEL SimpleName: previousEntry", "DEL SimpleName: keyAnalyzer", "DEL SimpleName: fixup", "DEL Block", "DEL SimpleType: K", "DEL SimpleName: Override", "DEL SimpleName: PrefixRangeMap", "DEL SimpleName: K", "DEL SimpleName: key", "DEL SimpleType: NoSuchElementException", "DEL SimpleName: prefix", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleType: Map.Entry", "DEL SimpleName: Override", "DEL SimpleName: Trie", "DEL Modifier: public", "DEL SimpleType: K", "DEL SimpleName: K", "DEL TagElement: @link", "DEL SimpleName: K", "DEL FieldAccess", "DEL SimpleName: inToRange", "DEL BooleanLiteral: false", "DEL SimpleName: K", "DEL TextElement: Same as ", "DEL SimpleName: K", "DEL FieldAccess", "DEL PrefixExpression: -", "DEL NullLiteral", "DEL TagElement: @link", "DEL Modifier: protected", "DEL SimpleName: offsetInBits", "DEL VariableDeclarationFragment", "DEL SimpleName: size", "DEL FieldDeclaration", "DEL SimpleName: prefix", "DEL InfixExpression: ==", "DEL MarkerAnnotation", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL SimpleName: keyAnalyzer", "DEL NumberLiteral: 1", "DEL Modifier: final", "DEL SimpleName: key", "DEL SimpleName: next", "DEL MethodDeclaration", "DEL IfStatement", "DEL Assignment: =", "DEL MethodInvocation", "DEL InfixExpression: ||", "DEL SimpleName: V", "DEL SimpleName: lastEntry", "DEL SimpleType: K", "DEL ThrowStatement", "DEL SimpleName: e", "DEL Block", "DEL SingleVariableDeclaration", "DEL TextElement: .", "DEL SimpleName: V", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL SimpleName: fromKey", "DEL SimpleType: K", "DEL SimpleName: keyAnalyzer", "DEL SimpleName: inRange", "DEL SimpleName: K", "DEL SimpleName: K", "DEL MarkerAnnotation", "DEL TextElement: 's key is a prefix of the provided key.", "DEL TextElement: This method does two things. It determinates the FROM", "DEL VariableDeclarationStatement", "DEL Modifier: private", "DEL ConditionalExpression", "DEL SimpleName: K", "DEL MethodDeclaration", "DEL FieldDeclaration", "DEL SimpleType: RangeEntryMap", "DEL SimpleName: e", "DEL QualifiedName: Map.Entry", "DEL MethodDeclaration", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL SimpleType: Set", "DEL SimpleName: entry", "DEL PrefixExpression: !", "DEL Modifier: private", "DEL SimpleName: iterator", "DEL TextElement: .", "DEL Block", "DEL Modifier: public", "DEL SimpleType: TrieEntry", "DEL SimpleName: RangeMap", "DEL ExpressionStatement", "DEL SimpleType: RangeMap", "DEL MethodInvocation", "DEL TagElement: @link", "DEL VariableDeclarationStatement", "DEL SimpleName: V", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: getToKey", "DEL ReturnStatement", "DEL SimpleName: PatriciaTrie", "DEL VariableDeclarationStatement", "DEL SimpleName: isPrefix", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL SimpleType: V", "DEL ConditionalExpression", "DEL TextElement: and TO range of the ", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: it", "DEL ReturnStatement", "DEL SimpleName: higherEntry", "DEL SingleVariableDeclaration", "DEL WhileStatement", "DEL SimpleName: PrefixRangeMap", "DEL Assignment: =", "DEL MarkerAnnotation", "DEL ExpressionStatement", "DEL SimpleName: firstKey", "DEL BooleanLiteral: false", "DEL MethodDeclaration", "DEL SimpleName: PrefixRangeMap", "DEL MethodInvocation", "DEL NullLiteral", "DEL TagElement: @link", "DEL ParameterizedType: SortedMap<K,V>", "DEL ReturnStatement", "DEL SimpleType: Map.Entry", "DEL MarkerAnnotation", "DEL Block", "DEL SimpleType: K", "DEL SimpleName: fromKey", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleName: getFromKey", "DEL SimpleType: Object", "DEL PrimitiveType: int", "DEL QualifiedName: Map.Entry", "DEL SimpleName: K", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: createEntrySet", "DEL ExpressionStatement", "DEL SimpleName: modCount", "DEL SimpleName: toKey", "DEL SingleVariableDeclaration", "DEL SimpleName: toInclusive", "DEL InfixExpression: ||", "DEL SimpleName: createRangeMap", "DEL Block", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL SimpleName: V", "DEL TextElement: Returns true if the provided Key is in the TO range of the ", "DEL NumberLiteral: 1", "DEL SimpleName: toKey", "DEL SimpleName: prefix", "DEL VariableDeclarationFragment", "DEL SimpleName: first", "DEL SimpleName: lengthInBits", "DEL NullLiteral", "DEL SimpleName: prefix", "DEL SimpleName: isPrefix", "DEL SimpleName: inFromRange", "DEL NullLiteral", "DEL SimpleName: fixup", "DEL SimpleName: firstEntry", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: Override", "DEL ThrowStatement", "DEL SimpleName: PrefixRangeMap", "DEL Modifier: private", "DEL MarkerAnnotation", "DEL ClassInstanceCreation", "DEL SimpleName: fromKey", "DEL MethodInvocation", "DEL SimpleName: NoSuchElementException", "DEL VariableDeclarationStatement", "DEL SimpleName: it", "DEL PrimitiveType: int", "DEL SimpleType: K", "DEL TagElement: @link", "DEL Modifier: final", "DEL SimpleName: SortedMap", "DEL VariableDeclarationFragment", "DEL SimpleName: entry", "DEL MethodRef", "DEL SimpleName: e", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: keyAnalyzer", "DEL Modifier: transient", "DEL Javadoc", "DEL Modifier: private", "DEL PrefixExpression: ++", "DEL VariableDeclarationStatement", "DEL SimpleName: K", "DEL SimpleName: fromKey", "DEL SimpleName: TrieEntry", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ThisExpression", "DEL SimpleName: PrefixRangeEntrySet", "DEL SimpleName: e", "DEL TagElement", "DEL ConditionalExpression", "DEL SimpleName: size", "DEL Block", "DEL PrimitiveType: boolean", "DEL InfixExpression: !=", "DEL SimpleName: next", "DEL SingleVariableDeclaration", "DEL SimpleType: K", "DEL SimpleName: fromKey", "DEL SimpleName: toKey", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: fromInclusive", "DEL SimpleType: K", "DEL SimpleName: toKey", "DEL NumberLiteral: 1", "DEL Block", "DEL PrimitiveType: boolean", "DEL ThisExpression", "DEL ExpressionStatement", "DEL SimpleName: last", "DEL Block", "DEL TagElement", "DEL SimpleName: e", "DEL TextElement: .", "DEL SimpleName: offsetInBits", "DEL SimpleType: K", "DEL SimpleName: getKey", "DEL SimpleType: Map.Entry", "DEL SimpleName: last", "DEL Block", "DEL Block", "DEL SimpleName: getKey", "DEL Assignment: =", "DEL SimpleName: e", "DEL TagElement", "DEL Assignment: =", "DEL ExpressionStatement", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL TextElement:  and the number", "DEL SimpleName: e", "DEL SimpleName: K", "DEL SimpleName: prefix", "DEL SimpleName: prior", "DEL SimpleType: K", "DEL SimpleName: prefix", "DEL SimpleName: offsetInBits", "DEL NullLiteral", "DEL Javadoc", "DEL SimpleName: toInclusive", "DEL SimpleType: V", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: getKey", "DEL MarkerAnnotation", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL NullLiteral", "DEL SimpleName: lengthInBits", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL IfStatement", "DEL TextElement: A submap used for prefix views over the ", "DEL SimpleType: V", "DEL MethodInvocation", "DEL TagElement: @link", "DEL Block", "DEL ThisExpression", "DEL SimpleName: Trie", "DEL Modifier: final", "DEL Assignment: =", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: K", "DEL SimpleType: K", "DEL SimpleName: fromKey", "DEL Assignment: =", "DEL SimpleType: Map.Entry", "DEL Block", "DEL VariableDeclarationFragment", "DEL Block", "DEL QualifiedName: Map.Entry", "DEL ClassInstanceCreation", "DEL SimpleType: V", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: toKey", "DEL SimpleName: lowerEntry", "DEL SimpleName: K", "DEL SimpleName: entrySet", "DEL SimpleName: key", "DEL SimpleName: TrieEntry", "DEL Modifier: public", "DEL SimpleName: forceInclusive", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleType: PrefixRangeEntrySet", "DEL MethodDeclaration", "DEL SimpleName: e", "DEL ClassInstanceCreation", "DEL SimpleName: isPrefix", "DEL SimpleName: lastKey", "DEL InfixExpression: !=", "DEL ReturnStatement", "DEL SimpleName: offsetInBits", "DEL SimpleName: prefix", "DEL SimpleName: keyAnalyzer", "DEL SimpleName: it", "DEL SimpleName: inRange", "DEL SimpleName: K", "DEL SimpleType: K", "DEL SimpleType: V", "DEL SimpleName: fromKey", "DEL FieldAccess", "DEL MethodDeclaration", "DEL Block", "DEL MethodRefParameter", "DEL SimpleName: it", "DEL SimpleName: K", "DEL FieldDeclaration", "DEL NullLiteral", "DEL SimpleName: offsetInBits", "DEL TextElement: .", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL Modifier: private", "DEL PrimitiveType: boolean", "DEL SimpleName: isPrefix", "DEL TagElement: @link", "DEL SimpleName: offsetInBits", "DEL SimpleType: K", "DEL PrimitiveType: int", "DEL NullLiteral", "DEL PrimitiveType: boolean", "DEL Modifier: private", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL CastExpression", "DEL TextElement: Returns true if the provided Key is in the FROM range of the ", "DEL SimpleName: K", "DEL SimpleName: nextEntry", "DEL SimpleName: e", "DEL SimpleName: entry", "DEL SimpleName: e", "DEL Modifier: protected", "DEL PrimitiveType: boolean", "DEL SimpleType: K", "DEL SimpleName: expectedModCount", "DEL NullLiteral", "DEL SimpleType: V", "DEL ExpressionStatement", "DEL Modifier: public", "DEL TagElement", "DEL Modifier: final", "DEL NullLiteral", "DEL NullLiteral", "DEL ParameterizedType: Map.Entry<K,V>", "DEL ExpressionStatement", "DEL Modifier: final", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL ParameterizedType: Set<Map.Entry<K,V>>", "DEL FieldDeclaration", "DEL IfStatement", "DEL SimpleName: size", "DEL SimpleName: e", "DEL SimpleType: K", "DEL SimpleName: K", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: K", "DEL SimpleName: TrieEntry", "DEL TextElement: time the ", "DEL InfixExpression: ==", "DEL SimpleName: expectedModCount", "DEL SimpleName: lengthInBits", "DEL SimpleName: fixup", "DEL MarkerAnnotation", "DEL ReturnStatement", "DEL NullLiteral", "DEL NullLiteral", "DEL TagElement", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: V", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: entry", "DEL TypeDeclaration: class", "DEL FieldAccess", "DEL Modifier: final", "DEL SimpleName: K", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: isToInclusive", "DEL Block", "DEL SimpleName: lengthInBits", "DEL SimpleName: first", "DEL SimpleName: key", "DEL Assignment: =", "DEL SimpleName: Iterator", "DEL Modifier: protected", "DEL InfixExpression: ||", "DEL SimpleName: entry", "DEL SimpleName: V", "DEL SimpleName: entry", "DEL TextElement: of elements in the range. This method must be called every", "DEL Javadoc", "DEL SimpleName: prefix", "DEL ExpressionStatement", "DEL SimpleName: modCount", "DEL SimpleName: getKey", "DEL SingleVariableDeclaration", "DEL SimpleName: V", "DEL SimpleName: lengthInBits", "DEL NullLiteral", "DEL SimpleName: RangeEntryMap", "DEL VariableDeclarationFragment", "DEL SimpleName: key", "DEL NullLiteral", "DEL ParameterizedType: Iterator<Map.Entry<K,V>>", "DEL ConditionalExpression", "DEL SimpleType: K", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL Modifier: protected", "DEL Modifier: final", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL PrimitiveType: int", "DEL NullLiteral", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: key", "DEL ExpressionStatement", "DEL PrefixExpression: !", "DEL ReturnStatement", "DEL SimpleName: entry", "DEL Block", "DEL SimpleName: inRange2", "DEL ReturnStatement", "DEL SimpleName: first", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleName: K", "DEL SimpleName: expectedModCount", "DEL MethodInvocation", "DEL SimpleName: prior", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleName: entry", "DEL SimpleName: forceInclusive", "DEL SimpleName: entry", "DEL Modifier: final", "DEL SimpleName: K", "DEL SimpleType: K", "DEL SimpleName: it", "DEL SimpleName: toKey", "DEL TextElement: .", "DEL SimpleType: K", "DEL SimpleName: prefix", "DEL SimpleType: V", "DEL SimpleName: V", "DEL PrimitiveType: boolean", "DEL SimpleName: e", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL Modifier: final", "DEL PrimitiveType: boolean", "DEL InfixExpression: ==", "DEL VariableDeclarationStatement", "DEL SimpleName: V", "DEL SimpleName: K", "DEL Modifier: protected", "DEL Assignment: =", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: Override", "DEL Modifier: final", "DEL ReturnStatement", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL SimpleName: inRange", "DEL SimpleName: isFromInclusive", "DEL SimpleType: Map.Entry", "DEL SimpleName: Override", "DEL SimpleName: Set", "DEL SimpleName: toKey", "DEL NullLiteral", "DEL ExpressionStatement", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL SimpleType: V", "DEL SimpleName: hasNext", "DEL SimpleName: last", "DEL SimpleName: prior", "DEL Modifier: private", "DEL TextElement:  has changed.", "DEL ConditionalExpression", "DEL SimpleName: lengthInBits", "DEL SimpleName: offsetInBits", "DEL NullLiteral", "DEL ExpressionStatement", "DEL QualifiedName: Map.Entry", "DEL SimpleName: size", "DEL SimpleType: K", "DEL SimpleName: toKey", "DEL Block", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: size", "DEL FieldAccess", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL ConditionalExpression", "DEL SimpleName: key", "DEL SimpleType: Iterator", "DEL SimpleName: getKey", "DEL Block", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL Block", "DEL SimpleName: offsetInBits", "DEL Javadoc", "DEL ParameterizedType: Map.Entry<K,V>", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: PatriciaTrie", "DEL SimpleName: K", "DEL SimpleName: entry", "DEL SimpleName: PrefixRangeMap", "DEL MethodDeclaration", "DEL SimpleType: K", "DEL Modifier: private", "DEL SimpleName: fromKey", "DEL Block", "DEL ThisExpression", "DEL SimpleName: key", "DEL InfixExpression: !=", "DEL NullLiteral", "DEL Assignment: =", "DEL SimpleName: fromKey", "DEL SimpleName: fromInclusive", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Modifier: private", "DEL Modifier: final", "DEL PrefixExpression: -", "DEL NullLiteral", "DEL NullLiteral", "DEL ParameterizedType: TrieEntry<K,V>", "DEL ExpressionStatement", "DEL Modifier: final", "DEL SimpleName: offsetInBits", "DEL ThisExpression", "DEL SimpleType: TrieEntry", "DEL NullLiteral", "DEL SimpleName: size", "DEL Assignment: =", "DEL ParameterizedType: Map.Entry<K,V>", "DEL MarkerAnnotation", "DEL Modifier: final", "DEL InfixExpression: !=", "DEL SimpleName: PrefixRangeMap", "DEL SimpleType: TrieEntry", "DEL VariableDeclarationFragment", "DEL Modifier: protected", "DEL TextElement: Returns true if this ", "DEL PrimitiveType: boolean", "DEL Javadoc", "DEL SimpleName: toKey", "DEL SimpleName: K", "DEL SimpleName: fromKey", "DEL Assignment: =", "DEL SimpleName: K", "DEL IfStatement", "DEL SimpleType: V", "DEL IfStatement", "DEL SimpleName: hasNext", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Map.Entry<K,V>", "DEL Block", "DEL SimpleName: Override", "DEL SimpleType: K", "DEL SimpleName: isPrefix", "DEL Modifier: private", "DEL CastExpression", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getKey", "DEL FieldDeclaration", "DEL SimpleName: Override", "DEL MarkerAnnotation", "DEL SimpleName: Override"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL ParameterizedType: Iterator<Map.Entry<K,V>>", "DEL SimpleName: K", "DEL TextElement: An ", "DEL SimpleType: K", "DEL SimpleType: Set", "DEL TagElement", "DEL Modifier: final", "DEL SimpleName: expectedModCount", "DEL SimpleName: startScan", "DEL VariableDeclarationFragment", "DEL FieldAccess", "DEL Assignment: =", "DEL Block", "DEL SimpleName: EntryIterator", "DEL QualifiedName: subtree.bitIndex", "DEL SimpleName: iterator", "DEL ExpressionStatement", "DEL SimpleType: Map.Entry", "DEL SimpleName: K", "DEL InfixExpression: !=", "DEL PrefixExpression: ++", "DEL SimpleType: K", "DEL SimpleType: NoSuchElementException", "DEL SimpleType: TrieEntry", "DEL SimpleName: entry", "DEL MethodDeclaration", "DEL SimpleType: V", "DEL SimpleType: K", "DEL TextElement: .", "DEL SimpleType: Map.Entry", "DEL ExpressionStatement", "DEL SimpleName: subtree", "DEL Block", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleType: V", "DEL InfixExpression: ||", "DEL Block", "DEL ExpressionStatement", "DEL SimpleType: V", "DEL SimpleName: TrieEntry", "DEL SimpleName: SingletonIterator", "DEL SimpleName: V", "DEL VariableDeclarationStatement", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: SingletonIterator", "DEL PrimitiveType: int", "DEL Block", "DEL QualifiedName: delegate.lengthInBits", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL Block", "DEL SimpleName: PrefixRangeEntrySet", "DEL SingleVariableDeclaration", "DEL SimpleName: entry", "DEL SimpleName: K", "DEL ParameterizedType: Map.Entry<K,V>", "DEL ThisExpression", "DEL InfixExpression: ==", "DEL SimpleName: prefix", "DEL SimpleName: prefixStart", "DEL Assignment: =", "DEL MethodDeclaration", "DEL ParameterizedType: Map.Entry<K,V>", "DEL TextElement: within the given subtree.", "DEL SimpleType: TrieEntry", "DEL SimpleName: lengthInBits", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: delegate", "DEL PrimitiveType: void", "DEL IfStatement", "DEL SimpleName: bitIdx", "DEL SimpleType: K", "DEL VariableDeclarationFragment", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleType: V", "DEL SimpleName: entry", "DEL SimpleName: prefixStart", "DEL PrimitiveType: int", "DEL SimpleName: lengthInBits", "DEL TextElement: An ", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleType: K", "DEL SimpleName: V", "DEL SimpleName: TrieEntry", "DEL SimpleType: V", "DEL SimpleName: remove", "DEL Modifier: public", "DEL SimpleName: hit", "DEL BooleanLiteral: false", "DEL VariableDeclarationFragment", "DEL SimpleName: modCount", "DEL ParameterizedType: Map.Entry<K,V>", "DEL IfStatement", "DEL Modifier: final", "DEL SimpleName: V", "DEL SimpleName: prior", "DEL TagElement: @link", "DEL PrimitiveType: int", "DEL SimpleName: K", "DEL MethodInvocation", "DEL SimpleName: PrefixRangeEntrySet", "DEL SimpleName: emptySet", "DEL ParameterizedType: TrieEntry<K,V>", "DEL ClassInstanceCreation", "DEL NumberLiteral: 0", "DEL FieldAccess", "DEL QualifiedName: delegate.prefix", "DEL FieldAccess", "DEL VariableDeclarationFragment", "DEL SimpleName: V", "DEL NullLiteral", "DEL MethodDeclaration", "DEL FieldDeclaration", "DEL MarkerAnnotation", "DEL SimpleName: nextEntryInSubtree", "DEL QualifiedName: Map.Entry", "DEL ExpressionStatement", "DEL SimpleName: V", "DEL ReturnStatement", "DEL SimpleName: Iterator", "DEL SimpleType: TrieEntry", "DEL SimpleName: Override", "DEL SimpleName: remove", "DEL Modifier: final", "DEL ParameterizedType: TrieEntry<K,V>", "DEL QualifiedName: delegate.offsetInBits", "DEL QualifiedName: delegate.lengthInBits", "DEL Modifier: protected", "DEL QualifiedName: subtree.bitIndex", "DEL PrimitiveType: int", "DEL QualifiedName: Map.Entry", "DEL SimpleType: TrieIterator", "DEL NumberLiteral: 0", "DEL ThrowStatement", "DEL IfStatement", "DEL SimpleName: lastOne", "DEL ExpressionStatement", "DEL SimpleType: Iterator", "DEL Modifier: public", "DEL Assignment: =", "DEL SimpleName: iterator", "DEL SimpleName: EntryIterator", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL Assignment: =", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL SimpleName: V", "DEL TextElement:  view of the ", "DEL SimpleType: K", "DEL TypeDeclaration: class", "DEL SimpleName: empty", "DEL ReturnStatement", "DEL SimpleName: TrieEntry", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL PrimitiveType: boolean", "DEL Block", "DEL SimpleType: V", "DEL Modifier: private", "DEL SimpleName: prefix", "DEL SimpleName: K", "DEL ReturnStatement", "DEL Block", "DEL SimpleType: K", "DEL SimpleName: needsFixing", "DEL SimpleName: TrieIterator", "DEL SimpleName: TrieEntry", "DEL Assignment: =", "DEL SimpleType: TrieEntry", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL QualifiedName: subtree.bitIndex", "DEL SimpleName: hasNext", "DEL SimpleType: Iterator", "DEL SimpleType: K", "DEL SimpleName: V", "DEL SingleVariableDeclaration", "DEL SimpleType: Map.Entry", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: size", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: bitIdx", "DEL SimpleName: expectedModCount", "DEL SimpleName: offset", "DEL SimpleName: subtree", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL SimpleType: K", "DEL SimpleType: Map.Entry", "DEL Modifier: final", "DEL TagElement: @link", "DEL TagElement: @link", "DEL SimpleName: entry", "DEL Block", "DEL SimpleName: needsFixing", "DEL SimpleType: Map.Entry", "DEL QualifiedName: Map.Entry", "DEL TypeDeclaration: class", "DEL IfStatement", "DEL SimpleName: RangeEntrySet", "DEL SimpleName: delegate", "DEL Javadoc", "DEL IfStatement", "DEL ExpressionStatement", "DEL Modifier: final", "DEL SimpleName: Iterator", "DEL ThisExpression", "DEL Modifier: private", "DEL Modifier: final", "DEL SimpleName: expectedModCount", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL SimpleName: SingletonIterator", "DEL MarkerAnnotation", "DEL Modifier: final", "DEL Modifier: public", "DEL SimpleName: PatriciaTrie", "DEL Block", "DEL TextElement:  that holds a single ", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL ClassInstanceCreation", "DEL SimpleName: offset", "DEL SimpleType: K", "DEL QualifiedName: prefixStart.bitIndex", "DEL QualifiedName: delegate.offsetInBits", "DEL Assignment: =", "DEL SimpleName: delegate", "DEL SimpleName: hit", "DEL MethodDeclaration", "DEL SimpleName: prefixStart", "DEL Block", "DEL SimpleType: SingletonIterator", "DEL SimpleType: TrieEntry", "DEL QualifiedName: delegate.lengthInBits", "DEL SimpleName: V", "DEL SimpleName: IllegalStateException", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Modifier: final", "DEL SimpleType: K", "DEL ThisExpression", "DEL ThisExpression", "DEL SimpleName: nextEntry", "DEL FieldDeclaration", "DEL Block", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SimpleName: K", "DEL NullLiteral", "DEL SimpleName: K", "DEL SingleVariableDeclaration", "DEL ParameterizedType: TrieIterator<Map.Entry<K,V>>", "DEL Assignment: =", "DEL Modifier: private", "DEL SimpleType: V", "DEL Block", "DEL TextElement: A prefix ", "DEL SimpleName: V", "DEL SimpleName: Iterator", "DEL SuperConstructorInvocation", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: PatriciaTrie", "DEL SimpleName: offset", "DEL SimpleType: V", "DEL SimpleType: V", "DEL Assignment: =", "DEL Modifier: private", "DEL SimpleType: V", "DEL SimpleName: prefix", "DEL ClassInstanceCreation", "DEL SimpleName: lengthInBits", "DEL SimpleName: needsFixing", "DEL FieldDeclaration", "DEL IfStatement", "DEL SimpleName: next", "DEL SimpleName: findNext", "DEL SimpleName: K", "DEL Modifier: private", "DEL SimpleName: lastOne", "DEL ExpressionStatement", "DEL SimpleName: K", "DEL TextElement: .", "DEL SimpleType: PrefixRangeMap", "DEL InfixExpression: ==", "DEL Modifier: public", "DEL SimpleType: K", "DEL SimpleName: PatriciaTrie", "DEL SimpleName: K", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL PrefixExpression: ++", "DEL SimpleName: startScan", "DEL Modifier: public", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL InfixExpression: >=", "DEL InfixExpression: ==", "DEL Modifier: final", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: next", "DEL InfixExpression: >=", "DEL ThisExpression", "DEL NumberLiteral: 1", "DEL SimpleName: Set", "DEL SimpleName: entry", "DEL SimpleName: entry", "DEL SimpleName: V", "DEL SimpleName: NoSuchElementException", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL ParameterizedType: Set<Map.Entry<K,V>>", "DEL SimpleName: hit", "DEL Javadoc", "DEL SimpleName: prefix", "DEL SimpleName: lengthInBits", "DEL PrimitiveType: boolean", "DEL SimpleName: Iterator", "DEL SimpleType: V", "DEL SimpleName: offset", "DEL Modifier: final", "DEL QualifiedName: delegate.prefix", "DEL SimpleType: V", "DEL SimpleName: offset", "DEL QualifiedName: Map.Entry", "DEL MethodDeclaration", "DEL FieldDeclaration", "DEL SimpleType: V", "DEL SimpleName: PrefixRangeMap", "DEL FieldAccess", "DEL SimpleName: TrieEntry", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL SimpleType: IllegalStateException", "DEL VariableDeclarationFragment", "DEL SimpleType: V", "DEL BooleanLiteral: true", "DEL SimpleName: V", "DEL FieldAccess", "DEL SimpleName: removeEntry", "DEL Modifier: private", "DEL SimpleType: K", "DEL SimpleName: delegate", "DEL FieldAccess", "DEL SimpleName: next", "DEL SimpleName: RangeEntrySet", "DEL ThisExpression", "DEL SimpleName: subtree", "DEL SimpleName: K", "DEL SimpleName: PatriciaTrie", "DEL SimpleName: entry", "DEL InfixExpression: !=", "DEL SimpleName: current", "DEL SimpleName: prefixStart", "DEL SimpleName: remove", "DEL SingleVariableDeclaration", "DEL SimpleName: subtree", "DEL SimpleName: Override", "DEL FieldDeclaration", "DEL BooleanLiteral: true", "DEL FieldAccess", "DEL SimpleType: K", "DEL Assignment: =", "DEL SimpleName: Trie", "DEL SimpleName: Override", "DEL SimpleName: entry", "DEL SimpleName: hit", "DEL PrimitiveType: int", "DEL ThisExpression", "DEL SimpleName: Collections", "DEL TextElement: .", "DEL Block", "DEL TypeDeclaration: class", "DEL IfStatement", "DEL Modifier: private", "DEL SimpleName: delegate", "DEL ParameterizedType: Map.Entry<K,V>", "DEL Assignment: =", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: prefixStart", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL Modifier: final", "DEL TextElement: Starts iteration at the given entry & search only", "DEL ThisExpression", "DEL SimpleType: Map.Entry", "DEL SimpleName: K", "DEL PrimitiveType: void", "DEL SimpleName: K", "DEL SimpleName: K", "DEL SimpleName: PrefixRangeEntrySet", "DEL ThisExpression", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: PatriciaTrie", "DEL SimpleName: V", "DEL FieldDeclaration", "DEL SimpleName: prior", "DEL SimpleName: PrefixRangeMap", "DEL ThrowStatement", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: empty", "DEL Block", "DEL SimpleName: lengthInBits", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleType: TrieEntry", "DEL SimpleName: subtree", "DEL ParameterizedType: TrieEntry<K,V>", "DEL QualifiedName: Map.Entry", "DEL ReturnStatement", "DEL SimpleType: TrieEntry", "DEL SimpleName: K", "DEL MethodInvocation", "DEL SimpleName: hit", "DEL MethodInvocation", "DEL SimpleType: Map.Entry", "DEL ExpressionStatement", "DEL Modifier: final", "DEL ThisExpression", "DEL PrimitiveType: int", "DEL ParameterizedType: Iterator<Map.Entry<K,V>>", "DEL MethodDeclaration", "DEL TagElement: @link", "DEL ParameterizedType: Map.Entry<K,V>", "DEL Modifier: final", "DEL SimpleName: EntryIterator", "DEL PrimitiveType: boolean", "DEL Block", "DEL QualifiedName: Map.Entry", "DEL TagElement", "DEL SimpleName: delegate", "DEL SimpleType: K", "DEL Modifier: private", "DEL MarkerAnnotation", "DEL SimpleType: RangeEntrySet", "DEL SimpleType: K", "DEL FieldDeclaration", "DEL QualifiedName: Map.Entry", "DEL SimpleType: EntryIterator", "DEL FieldDeclaration", "DEL SimpleName: TrieEntry", "DEL SimpleName: V", "DEL ParameterizedType: TrieEntry<K,V>", "DEL MethodDeclaration", "DEL Javadoc", "DEL SimpleName: prefix", "DEL SimpleName: K", "DEL ParameterizedType: Map.Entry<K,V>", "DEL Modifier: public", "DEL TagElement: @link", "DEL MethodDeclaration", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL TextElement:  for iterating over a prefix search.", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL TextElement: Creates a ", "DEL SimpleName: hit", "DEL MarkerAnnotation", "DEL SimpleName: TrieEntry", "DEL ParameterizedType: TrieEntry<K,V>", "DEL Modifier: private", "DEL SimpleName: followLeft", "DEL Block", "DEL Block", "DEL IfStatement", "DEL SimpleName: subtree", "DEL SimpleType: PrefixRangeMap", "DEL SuperMethodInvocation", "DEL SimpleName: TrieEntry", "DEL NumberLiteral: 0", "DEL TagElement: @link", "DEL SimpleName: Override", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL Modifier: private", "DEL Modifier: public", "DEL TagElement", "DEL Modifier: private", "DEL SimpleName: startScan", "DEL SimpleName: subtree", "DEL SimpleName: V", "DEL SimpleName: fixup", "DEL Modifier: final", "DEL Block", "DEL SimpleName: lengthInBits", "DEL TagElement", "DEL SimpleName: modCount", "DEL Assignment: =", "DEL Block", "DEL SimpleName: next", "DEL SimpleName: lastOne"]}]}}, {"PatriciaTrie_diff": {"operations": ["Move ImportDeclaration(7) into CompilationUnit(136) at 11", "Update QualifiedName: java.util.Collections(6) to org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "Update ParameterizedType: PatriciaTrieBase<K,V>(130) to AbstractPatriciaTrie<String,E>", "Update ParameterizedType: Trie<K,V>(137) to Trie<String,E>", "Update SimpleName: K(120) to E", "Update SimpleType: PatriciaTrieBase(125) to AbstractPatriciaTrie", "Update SimpleType: K(127) to String", "Update SimpleType: V(129) to E", "Update SimpleType: K(134) to String", "Update SimpleType: V(136) to E", "Update TextElement: , 'prefix', 'submap', or 'iterator' methods. The(64) to 'prefixMap', 'submap', or 'iterator' methods. The ", "Insert TextElement:  can also(47) into TagElement(68) at 29", "Update TextElement:  can also scan for items that are 'bitwise' (using an XOR(67) to scan for items that are 'bitwise' (using an XOR metric) by the 'select' method.", "Update TextElement: metric) by the 'select' method. Bitwise closeness is determined by the(68) to Bitwise closeness is determined by the ", "Update TextElement:  returning true or false for a bit being set or not in(71) to  returning true or", "Update TextElement: a given key.(72) to false for a bit being set or not in a given key.", "Update TextElement: to variable length keys, whereas (86) to to variable length keys.", "Update SimpleName: PatriciaTrieBase(124) to AbstractPatriciaTrie", "Update SimpleName: K(126) to String", "Update SimpleName: V(128) to E", "Update SimpleName: K(133) to String", "Update SimpleName: V(135) to E", "Update ParameterizedType: Map<? extends K,? extends V>(181) to Map<? extends String,? extends E>", "Insert ClassInstanceCreation(110) into SuperConstructorInvocation(111) at 0", "Update WildcardType: ? extends K(177) to ? extends String", "Update WildcardType: ? extends V(180) to ? extends E", "Insert ClassInstanceCreation(130) into SuperConstructorInvocation(132) at 0", "Update SimpleName: getPrefixedBy(79) to prefixMap", "Insert SimpleType: StringKeyAnalyzer(109) into ClassInstanceCreation(110) at 0", "Update SimpleType: K(176) to String", "Update SimpleType: V(179) to E", "Insert SimpleType: StringKeyAnalyzer(129) into ClassInstanceCreation(130) at 0", "Insert SimpleName: StringKeyAnalyzer(108) into SimpleType: StringKeyAnalyzer(109) at 0", "Update SimpleName: K(175) to String", "Update SimpleName: V(178) to E", "Insert SimpleName: StringKeyAnalyzer(128) into SimpleType: StringKeyAnalyzer(129) at 0", "Delete QualifiedName: java.util.AbstractMap(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.AbstractSet(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Comparator(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.Iterator(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.NoSuchElementException(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.util.Set(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: java.util.SortedMap(18)", "Delete ImportDeclaration(19)", "Delete SimpleName: traverse(58)", "Delete SimpleName: Cursor(59)", "Delete SimpleType: Cursor(60)", "Delete MethodRefParameter(61)", "Delete MethodRef(62)", "Delete TagElement: @link(63)", "Delete SimpleName: getPrefixedByBits(87)", "Delete SimpleName: Object(88)", "Delete SimpleType: Object(89)", "Delete MethodRefParameter(90)", "Delete PrimitiveType: int(91)", "Delete MethodRefParameter(92)", "Delete MethodRef(93)", "Delete TagElement: @link(94)", "Delete TextElement:  is(95)", "Delete TextElement: suited to fixed-size keys.(96)", "Delete TextElement: <p>(97)", "Delete TextElement: Any methods here that take an (98)", "Delete SimpleName: Object(99)", "Delete TagElement: @link(100)", "Delete TextElement:  argument may throw a(101)", "Delete SimpleName: ClassCastException(102)", "Delete TagElement: @link(103)", "Delete TextElement:  if the method is expecting an instance of K(104)", "Delete TextElement: and it isn't K.(105)", "Delete SimpleName: V(122)", "Delete TypeParameter(123)", "Delete Modifier: final(148)", "Delete SimpleName: KeyAnalyzer(149)", "Delete SimpleType: KeyAnalyzer(150)", "Delete SimpleName: K(151)", "Delete SimpleType: K(152)", "Delete WildcardType: ? super K(153)", "Delete ParameterizedType: KeyAnalyzer<? super K>(154)", "Delete SimpleName: keyAnalyzer(155)", "Delete SingleVariableDeclaration(156)", "Delete SimpleName: keyAnalyzer(157)", "Delete Modifier: final(163)", "Delete SimpleName: KeyAnalyzer(164)", "Delete SimpleType: KeyAnalyzer(165)", "Delete SimpleName: K(166)", "Delete SimpleType: K(167)", "Delete WildcardType: ? super K(168)", "Delete ParameterizedType: KeyAnalyzer<? super K>(169)", "Delete SimpleName: keyAnalyzer(170)", "Delete SingleVariableDeclaration(171)", "Delete SimpleName: keyAnalyzer(184)", "Delete Modifier: public(189)", "Delete SimpleName: Comparator(190)", "Delete SimpleType: Comparator(191)", "Delete SimpleName: K(192)", "Delete SimpleType: K(193)", "Delete WildcardType: ? super K(194)", "Delete ParameterizedType: Comparator<? super K>(195)", "Delete SimpleName: comparator(196)", "Delete SimpleName: keyAnalyzer(197)", "Delete ReturnStatement(198)", "Delete Block(199)", "Delete MethodDeclaration(200)", "Delete Modifier: public(201)", "Delete SimpleName: SortedMap(202)", "Delete SimpleType: SortedMap(203)", "Delete SimpleName: K(204)", "Delete SimpleType: K(205)", "Delete SimpleName: V(206)", "Delete SimpleType: V(207)", "Delete ParameterizedType: SortedMap<K,V>(208)", "Delete SimpleName: getPrefixedBy(209)", "Delete Modifier: final(210)", "Delete SimpleName: K(211)", "Delete SimpleType: K(212)", "Delete SimpleName: key(213)", "Delete SingleVariableDeclaration(214)", "Delete SimpleName: getPrefixedByBits(215)", "Delete SimpleName: key(216)", "Delete NumberLiteral: 0(217)", "Delete SimpleName: lengthInBits(218)", "Delete SimpleName: key(219)", "Delete MethodInvocation(220)", "Delete MethodInvocation(221)", "Delete ReturnStatement(222)", "Delete Block(223)", "Delete MethodDeclaration(224)", "Delete Modifier: public(225)", "Delete SimpleName: SortedMap(226)", "Delete SimpleType: SortedMap(227)", "Delete SimpleName: K(228)", "Delete SimpleType: K(229)", "Delete SimpleName: V(230)", "Delete SimpleType: V(231)", "Delete ParameterizedType: SortedMap<K,V>(232)", "Delete SimpleName: getPrefixedBy(233)", "Delete Modifier: final(234)", "Delete SimpleName: K(235)", "Delete SimpleType: K(236)", "Delete SimpleName: key(237)", "Delete SingleVariableDeclaration(238)", "Delete Modifier: final(239)", "Delete PrimitiveType: int(240)", "Delete SimpleName: length(241)", "Delete SingleVariableDeclaration(242)", "Delete SimpleName: getPrefixedByBits(243)", "Delete SimpleName: key(244)", "Delete NumberLiteral: 0(245)", "Delete SimpleName: length(246)", "Delete SimpleName: bitsPerElement(247)", "Delete MethodInvocation(248)", "Delete InfixExpression: *(249)", "Delete MethodInvocation(250)", "Delete ReturnStatement(251)", "Delete Block(252)", "Delete MethodDeclaration(253)", "Delete Modifier: public(254)", "Delete SimpleName: SortedMap(255)", "Delete SimpleType: SortedMap(256)", "Delete SimpleName: K(257)", "Delete SimpleType: K(258)", "Delete SimpleName: V(259)", "Delete SimpleType: V(260)", "Delete ParameterizedType: SortedMap<K,V>(261)", "Delete SimpleName: getPrefixedBy(262)", "Delete Modifier: final(263)", "Delete SimpleName: K(264)", "Delete SimpleType: K(265)", "Delete SimpleName: key(266)", "Delete SingleVariableDeclaration(267)", "Delete Modifier: final(268)", "Delete PrimitiveType: int(269)", "Delete SimpleName: offset(270)", "Delete SingleVariableDeclaration(271)", "Delete Modifier: final(272)", "Delete PrimitiveType: int(273)", "Delete SimpleName: length(274)", "Delete SingleVariableDeclaration(275)", "Delete Modifier: final(276)", "Delete PrimitiveType: int(277)", "Delete SimpleName: bitsPerElement(278)", "Delete SimpleName: bitsPerElement(279)", "Delete MethodInvocation(280)", "Delete VariableDeclarationFragment(281)", "Delete VariableDeclarationStatement(282)", "Delete SimpleName: getPrefixedByBits(283)", "Delete SimpleName: key(284)", "Delete SimpleName: offset(285)", "Delete SimpleName: bitsPerElement(286)", "Delete InfixExpression: *(287)", "Delete SimpleName: length(288)", "Delete SimpleName: bitsPerElement(289)", "Delete InfixExpression: *(290)", "Delete MethodInvocation(291)", "Delete ReturnStatement(292)", "Delete Block(293)", "Delete MethodDeclaration(294)", "Delete Modifier: public(295)", "Delete SimpleName: SortedMap(296)", "Delete SimpleType: SortedMap(297)", "Delete SimpleName: K(298)", "Delete SimpleType: K(299)", "Delete SimpleName: V(300)", "Delete SimpleType: V(301)", "Delete ParameterizedType: SortedMap<K,V>(302)", "Delete SimpleName: getPrefixedByBits(303)", "Delete Modifier: final(304)", "Delete SimpleName: K(305)", "Delete SimpleType: K(306)", "Delete SimpleName: key(307)", "Delete SingleVariableDeclaration(308)", "Delete Modifier: final(309)", "Delete PrimitiveType: int(310)", "Delete SimpleName: lengthInBits(311)", "Delete SingleVariableDeclaration(312)", "Delete SimpleName: getPrefixedByBits(313)", "Delete SimpleName: key(314)", "Delete NumberLiteral: 0(315)", "Delete SimpleName: lengthInBits(316)", "Delete MethodInvocation(317)", "Delete ReturnStatement(318)", "Delete Block(319)", "Delete MethodDeclaration(320)", "Delete Modifier: public(321)", "Delete SimpleName: K(322)", "Delete SimpleType: K(323)", "Delete SimpleName: firstKey(324)", "Delete SimpleName: firstEntry(325)", "Delete MethodInvocation(326)", "Delete SimpleName: getKey(327)", "Delete MethodInvocation(328)", "Delete ReturnStatement(329)", "Delete Block(330)", "Delete MethodDeclaration(331)", "Delete Modifier: public(332)", "Delete SimpleName: K(333)", "Delete SimpleType: K(334)", "Delete SimpleName: lastKey(335)", "Delete Modifier: final(336)", "Delete SimpleName: TrieEntry(337)", "Delete SimpleType: TrieEntry(338)", "Delete SimpleName: K(339)", "Delete SimpleType: K(340)", "Delete SimpleName: V(341)", "Delete SimpleType: V(342)", "Delete ParameterizedType: TrieEntry<K,V>(343)", "Delete SimpleName: entry(344)", "Delete SimpleName: lastEntry(345)", "Delete MethodInvocation(346)", "Delete VariableDeclarationFragment(347)", "Delete VariableDeclarationStatement(348)", "Delete SimpleName: entry(349)", "Delete NullLiteral(350)", "Delete InfixExpression: !=(351)", "Delete SimpleName: entry(352)", "Delete SimpleName: getKey(353)", "Delete MethodInvocation(354)", "Delete ReturnStatement(355)", "Delete Block(356)", "Delete IfStatement(357)", "Delete NullLiteral(358)", "Delete ReturnStatement(359)", "Delete Block(360)", "Delete MethodDeclaration(361)", "Delete TagElement: @inheritDoc(362)", "Delete TextElement: The view that this returns is optimized to have a very efficient(363)", "Delete SimpleName: Iterator(364)", "Delete TagElement: @link(365)", "Delete TextElement: . The (366)", "Delete SimpleName: SortedMap(367)", "Delete SimpleName: firstKey(368)", "Delete MethodRef(369)", "Delete TagElement: @link(370)", "Delete TextElement: ,(371)", "Delete SimpleName: SortedMap(372)", "Delete SimpleName: lastKey(373)", "Delete MethodRef(374)", "Delete TagElement: @link(375)", "Delete TextElement:  &amp; (376)", "Delete SimpleName: Map(377)", "Delete SimpleName: size(378)", "Delete MethodRef(379)", "Delete TagElement: @link(380)", "Delete TextElement:  methods must(381)", "Delete TextElement: iterate over all possible values in order to determine the results.(382)", "Delete TextElement: This information is cached until the PATRICIA (383)", "Delete SimpleName: Trie(384)", "Delete TagElement: @link(385)", "Delete TextElement:  changes.(386)", "Delete TextElement: All other methods (except (387)", "Delete SimpleName: Iterator(388)", "Delete TagElement: @link(389)", "Delete TextElement: ) must compare the given(390)", "Delete TextElement: key to the prefix to ensure that it is within the range of the view.(391)", "Delete TextElement: The (392)", "Delete SimpleName: Iterator(393)", "Delete TagElement: @link(394)", "Delete TextElement: 's remove method must also relocate the subtree(395)", "Delete TextElement: that contains the prefixes if the entry holding the subtree is(396)", "Delete TextElement: removed or changes. Changing the subtree takes O(K) time.(397)", "Delete TagElement(398)", "Delete Javadoc(399)", "Delete Modifier: public(400)", "Delete SimpleName: SortedMap(401)", "Delete SimpleType: SortedMap(402)", "Delete SimpleName: K(403)", "Delete SimpleType: K(404)", "Delete SimpleName: V(405)", "Delete SimpleType: V(406)", "Delete ParameterizedType: SortedMap<K,V>(407)", "Delete SimpleName: getPrefixedByBits(408)", "Delete Modifier: final(409)", "Delete SimpleName: K(410)", "Delete SimpleType: K(411)", "Delete SimpleName: key(412)", "Delete SingleVariableDeclaration(413)", "Delete Modifier: final(414)", "Delete PrimitiveType: int(415)", "Delete SimpleName: offsetInBits(416)", "Delete SingleVariableDeclaration(417)", "Delete Modifier: final(418)", "Delete PrimitiveType: int(419)", "Delete SimpleName: lengthInBits(420)", "Delete SingleVariableDeclaration(421)", "Delete Modifier: final(422)", "Delete PrimitiveType: int(423)", "Delete SimpleName: offsetLength(424)", "Delete SimpleName: offsetInBits(425)", "Delete SimpleName: lengthInBits(426)", "Delete InfixExpression: +(427)", "Delete VariableDeclarationFragment(428)", "Delete VariableDeclarationStatement(429)", "Delete SimpleName: offsetLength(430)", "Delete SimpleName: lengthInBits(431)", "Delete SimpleName: key(432)", "Delete MethodInvocation(433)", "Delete InfixExpression: >(434)", "Delete SimpleName: IllegalArgumentException(435)", "Delete SimpleType: IllegalArgumentException(436)", "Delete SimpleName: offsetInBits(437)", "Delete StringLiteral: \" + \"(438)", "Delete SimpleName: lengthInBits(439)", "Delete StringLiteral: \" > \"(440)", "Delete SimpleName: lengthInBits(441)", "Delete SimpleName: key(442)", "Delete MethodInvocation(443)", "Delete InfixExpression: +(444)", "Delete ClassInstanceCreation(445)", "Delete ThrowStatement(446)", "Delete Block(447)", "Delete IfStatement(448)", "Delete SimpleName: offsetLength(449)", "Delete NumberLiteral: 0(450)", "Delete InfixExpression: ==(451)", "Delete ThisExpression(452)", "Delete ReturnStatement(453)", "Delete Block(454)", "Delete IfStatement(455)", "Delete SimpleName: PrefixRangeMap(456)", "Delete SimpleType: PrefixRangeMap(457)", "Delete SimpleName: key(458)", "Delete SimpleName: offsetInBits(459)", "Delete SimpleName: lengthInBits(460)", "Delete ClassInstanceCreation(461)", "Delete ReturnStatement(462)", "Delete Block(463)", "Delete MethodDeclaration(464)", "Delete Modifier: public(465)", "Delete SimpleName: SortedMap(466)", "Delete SimpleType: SortedMap(467)", "Delete SimpleName: K(468)", "Delete SimpleType: K(469)", "Delete SimpleName: V(470)", "Delete SimpleType: V(471)", "Delete ParameterizedType: SortedMap<K,V>(472)", "Delete SimpleName: headMap(473)", "Delete Modifier: final(474)", "Delete SimpleName: K(475)", "Delete SimpleType: K(476)", "Delete SimpleName: toKey(477)", "Delete SingleVariableDeclaration(478)", "Delete SimpleName: RangeEntryMap(479)", "Delete SimpleType: RangeEntryMap(480)", "Delete NullLiteral(481)", "Delete SimpleName: toKey(482)", "Delete ClassInstanceCreation(483)", "Delete ReturnStatement(484)", "Delete Block(485)", "Delete MethodDeclaration(486)", "Delete Modifier: public(487)", "Delete SimpleName: SortedMap(488)", "Delete SimpleType: SortedMap(489)", "Delete SimpleName: K(490)", "Delete SimpleType: K(491)", "Delete SimpleName: V(492)", "Delete SimpleType: V(493)", "Delete ParameterizedType: SortedMap<K,V>(494)", "Delete SimpleName: subMap(495)", "Delete Modifier: final(496)", "Delete SimpleName: K(497)", "Delete SimpleType: K(498)", "Delete SimpleName: fromKey(499)", "Delete SingleVariableDeclaration(500)", "Delete Modifier: final(501)", "Delete SimpleName: K(502)", "Delete SimpleType: K(503)", "Delete SimpleName: toKey(504)", "Delete SingleVariableDeclaration(505)", "Delete SimpleName: RangeEntryMap(506)", "Delete SimpleType: RangeEntryMap(507)", "Delete SimpleName: fromKey(508)", "Delete SimpleName: toKey(509)", "Delete ClassInstanceCreation(510)", "Delete ReturnStatement(511)", "Delete Block(512)", "Delete MethodDeclaration(513)", "Delete Modifier: public(514)", "Delete SimpleName: SortedMap(515)", "Delete SimpleType: SortedMap(516)", "Delete SimpleName: K(517)", "Delete SimpleType: K(518)", "Delete SimpleName: V(519)", "Delete SimpleType: V(520)", "Delete ParameterizedType: SortedMap<K,V>(521)", "Delete SimpleName: tailMap(522)", "Delete Modifier: final(523)", "Delete SimpleName: K(524)", "Delete SimpleType: K(525)", "Delete SimpleName: fromKey(526)", "Delete SingleVariableDeclaration(527)", "Delete SimpleName: RangeEntryMap(528)", "Delete SimpleType: RangeEntryMap(529)", "Delete SimpleName: fromKey(530)", "Delete NullLiteral(531)", "Delete ClassInstanceCreation(532)", "Delete ReturnStatement(533)", "Delete Block(534)", "Delete MethodDeclaration(535)", "Delete TextElement: Returns an entry strictly higher than the given key,(536)", "Delete TextElement: or null if no such entry exists.(537)", "Delete TagElement(538)", "Delete Javadoc(539)", "Delete SimpleName: TrieEntry(540)", "Delete SimpleType: TrieEntry(541)", "Delete SimpleName: K(542)", "Delete SimpleType: K(543)", "Delete SimpleName: V(544)", "Delete SimpleType: V(545)", "Delete ParameterizedType: TrieEntry<K,V>(546)", "Delete SimpleName: higherEntry(547)", "Delete Modifier: final(548)", "Delete SimpleName: K(549)", "Delete SimpleType: K(550)", "Delete SimpleName: key(551)", "Delete SingleVariableDeclaration(552)", "Delete Modifier: final(553)", "Delete PrimitiveType: int(554)", "Delete SimpleName: lengthInBits(555)", "Delete SimpleName: lengthInBits(556)", "Delete SimpleName: key(557)", "Delete MethodInvocation(558)", "Delete VariableDeclarationFragment(559)", "Delete VariableDeclarationStatement(560)", "Delete SimpleName: lengthInBits(561)", "Delete NumberLiteral: 0(562)", "Delete InfixExpression: ==(563)", "Delete SimpleName: root(564)", "Delete SimpleName: isEmpty(565)", "Delete MethodInvocation(566)", "Delete PrefixExpression: !(567)", "Delete SimpleName: size(568)", "Delete MethodInvocation(569)", "Delete NumberLiteral: 1(570)", "Delete InfixExpression: >(571)", "Delete SimpleName: nextEntry(572)", "Delete SimpleName: root(573)", "Delete MethodInvocation(574)", "Delete ReturnStatement(575)", "Delete Block(576)", "Delete NullLiteral(577)", "Delete ReturnStatement(578)", "Delete Block(579)", "Delete IfStatement(580)", "Delete Block(581)", "Delete SimpleName: firstEntry(582)", "Delete MethodInvocation(583)", "Delete ReturnStatement(584)", "Delete Block(585)", "Delete IfStatement(586)", "Delete Block(587)", "Delete IfStatement(588)", "Delete Modifier: final(589)", "Delete SimpleName: TrieEntry(590)", "Delete SimpleType: TrieEntry(591)", "Delete SimpleName: K(592)", "Delete SimpleType: K(593)", "Delete SimpleName: V(594)", "Delete SimpleType: V(595)", "Delete ParameterizedType: TrieEntry<K,V>(596)", "Delete SimpleName: found(597)", "Delete SimpleName: getNearestEntryForKey(598)", "Delete SimpleName: key(599)", "Delete SimpleName: lengthInBits(600)", "Delete MethodInvocation(601)", "Delete VariableDeclarationFragment(602)", "Delete VariableDeclarationStatement(603)", "Delete SimpleName: compareKeys(604)", "Delete SimpleName: key(605)", "Delete QualifiedName: found.key(606)", "Delete MethodInvocation(607)", "Delete SimpleName: nextEntry(608)", "Delete SimpleName: found(609)", "Delete MethodInvocation(610)", "Delete ReturnStatement(611)", "Delete Block(612)", "Delete IfStatement(613)", "Delete Modifier: final(614)", "Delete PrimitiveType: int(615)", "Delete SimpleName: bitIndex(616)", "Delete SimpleName: bitIndex(617)", "Delete SimpleName: key(618)", "Delete QualifiedName: found.key(619)", "Delete MethodInvocation(620)", "Delete VariableDeclarationFragment(621)", "Delete VariableDeclarationStatement(622)", "Delete SimpleName: KeyAnalyzer(623)", "Delete SimpleName: isValidBitIndex(624)", "Delete SimpleName: bitIndex(625)", "Delete MethodInvocation(626)", "Delete Modifier: final(627)", "Delete SimpleName: TrieEntry(628)", "Delete SimpleType: TrieEntry(629)", "Delete SimpleName: K(630)", "Delete SimpleType: K(631)", "Delete SimpleName: V(632)", "Delete SimpleType: V(633)", "Delete ParameterizedType: TrieEntry<K,V>(634)", "Delete SimpleName: added(635)", "Delete SimpleName: TrieEntry(636)", "Delete SimpleType: TrieEntry(637)", "Delete SimpleName: K(638)", "Delete SimpleType: K(639)", "Delete SimpleName: V(640)", "Delete SimpleType: V(641)", "Delete ParameterizedType: TrieEntry<K,V>(642)", "Delete SimpleName: key(643)", "Delete NullLiteral(644)", "Delete SimpleName: bitIndex(645)", "Delete ClassInstanceCreation(646)", "Delete VariableDeclarationFragment(647)", "Delete VariableDeclarationStatement(648)", "Delete SimpleName: addEntry(649)", "Delete SimpleName: added(650)", "Delete SimpleName: lengthInBits(651)", "Delete MethodInvocation(652)", "Delete ExpressionStatement(653)", "Delete SimpleName: incrementSize(654)", "Delete MethodInvocation(655)", "Delete ExpressionStatement(656)", "Delete Modifier: final(657)", "Delete SimpleName: TrieEntry(658)", "Delete SimpleType: TrieEntry(659)", "Delete SimpleName: K(660)", "Delete SimpleType: K(661)", "Delete SimpleName: V(662)", "Delete SimpleType: V(663)", "Delete ParameterizedType: TrieEntry<K,V>(664)", "Delete SimpleName: ceil(665)", "Delete SimpleName: nextEntry(666)", "Delete SimpleName: added(667)", "Delete MethodInvocation(668)", "Delete VariableDeclarationFragment(669)", "Delete VariableDeclarationStatement(670)", "Delete SimpleName: removeEntry(671)", "Delete SimpleName: added(672)", "Delete MethodInvocation(673)", "Delete ExpressionStatement(674)", "Delete SimpleName: modCount(675)", "Delete NumberLiteral: 2(676)", "Delete Assignment: -=(677)", "Delete ExpressionStatement(678)", "Delete SimpleName: ceil(679)", "Delete ReturnStatement(680)", "Delete Block(681)", "Delete SimpleName: KeyAnalyzer(682)", "Delete SimpleName: isNullBitKey(683)", "Delete SimpleName: bitIndex(684)", "Delete MethodInvocation(685)", "Delete SimpleName: root(686)", "Delete SimpleName: isEmpty(687)", "Delete MethodInvocation(688)", "Delete PrefixExpression: !(689)", "Delete SimpleName: firstEntry(690)", "Delete MethodInvocation(691)", "Delete ReturnStatement(692)", "Delete Block(693)", "Delete SimpleName: size(694)", "Delete MethodInvocation(695)", "Delete NumberLiteral: 1(696)", "Delete InfixExpression: >(697)", "Delete SimpleName: nextEntry(698)", "Delete SimpleName: firstEntry(699)", "Delete MethodInvocation(700)", "Delete MethodInvocation(701)", "Delete ReturnStatement(702)", "Delete Block(703)", "Delete NullLiteral(704)", "Delete ReturnStatement(705)", "Delete Block(706)", "Delete IfStatement(707)", "Delete IfStatement(708)", "Delete Block(709)", "Delete SimpleName: KeyAnalyzer(710)", "Delete SimpleName: isEqualBitKey(711)", "Delete SimpleName: bitIndex(712)", "Delete MethodInvocation(713)", "Delete SimpleName: nextEntry(714)", "Delete SimpleName: found(715)", "Delete MethodInvocation(716)", "Delete ReturnStatement(717)", "Delete Block(718)", "Delete IfStatement(719)", "Delete IfStatement(720)", "Delete IfStatement(721)", "Delete SimpleName: IllegalStateException(722)", "Delete SimpleType: IllegalStateException(723)", "Delete StringLiteral: \"invalid lookup: \"(724)", "Delete SimpleName: key(725)", "Delete InfixExpression: +(726)", "Delete ClassInstanceCreation(727)", "Delete ThrowStatement(728)", "Delete Block(729)", "Delete MethodDeclaration(730)", "Delete TextElement: Returns a key-value mapping associated with the least key greater(731)", "Delete TextElement: than or equal to the given key, or null if there is no such key.(732)", "Delete TagElement(733)", "Delete Javadoc(734)", "Delete SimpleName: TrieEntry(735)", "Delete SimpleType: TrieEntry(736)", "Delete SimpleName: K(737)", "Delete SimpleType: K(738)", "Delete SimpleName: V(739)", "Delete SimpleType: V(740)", "Delete ParameterizedType: TrieEntry<K,V>(741)", "Delete SimpleName: ceilingEntry(742)", "Delete Modifier: final(743)", "Delete SimpleName: K(744)", "Delete SimpleType: K(745)", "Delete SimpleName: key(746)", "Delete SingleVariableDeclaration(747)", "Delete Modifier: final(748)", "Delete PrimitiveType: int(749)", "Delete SimpleName: lengthInBits(750)", "Delete SimpleName: lengthInBits(751)", "Delete SimpleName: key(752)", "Delete MethodInvocation(753)", "Delete VariableDeclarationFragment(754)", "Delete VariableDeclarationStatement(755)", "Delete SimpleName: lengthInBits(756)", "Delete NumberLiteral: 0(757)", "Delete InfixExpression: ==(758)", "Delete SimpleName: root(759)", "Delete SimpleName: isEmpty(760)", "Delete MethodInvocation(761)", "Delete PrefixExpression: !(762)", "Delete SimpleName: root(763)", "Delete ReturnStatement(764)", "Delete Block(765)", "Delete SimpleName: firstEntry(766)", "Delete MethodInvocation(767)", "Delete ReturnStatement(768)", "Delete Block(769)", "Delete IfStatement(770)", "Delete Block(771)", "Delete IfStatement(772)", "Delete Modifier: final(773)", "Delete SimpleName: TrieEntry(774)", "Delete SimpleType: TrieEntry(775)", "Delete SimpleName: K(776)", "Delete SimpleType: K(777)", "Delete SimpleName: V(778)", "Delete SimpleType: V(779)", "Delete ParameterizedType: TrieEntry<K,V>(780)", "Delete SimpleName: found(781)", "Delete SimpleName: getNearestEntryForKey(782)", "Delete SimpleName: key(783)", "Delete SimpleName: lengthInBits(784)", "Delete MethodInvocation(785)", "Delete VariableDeclarationFragment(786)", "Delete VariableDeclarationStatement(787)", "Delete SimpleName: compareKeys(788)", "Delete SimpleName: key(789)", "Delete QualifiedName: found.key(790)", "Delete MethodInvocation(791)", "Delete SimpleName: found(792)", "Delete ReturnStatement(793)", "Delete Block(794)", "Delete IfStatement(795)", "Delete Modifier: final(796)", "Delete PrimitiveType: int(797)", "Delete SimpleName: bitIndex(798)", "Delete SimpleName: bitIndex(799)", "Delete SimpleName: key(800)", "Delete QualifiedName: found.key(801)", "Delete MethodInvocation(802)", "Delete VariableDeclarationFragment(803)", "Delete VariableDeclarationStatement(804)", "Delete SimpleName: KeyAnalyzer(805)", "Delete SimpleName: isValidBitIndex(806)", "Delete SimpleName: bitIndex(807)", "Delete MethodInvocation(808)", "Delete Modifier: final(809)", "Delete SimpleName: TrieEntry(810)", "Delete SimpleType: TrieEntry(811)", "Delete SimpleName: K(812)", "Delete SimpleType: K(813)", "Delete SimpleName: V(814)", "Delete SimpleType: V(815)", "Delete ParameterizedType: TrieEntry<K,V>(816)", "Delete SimpleName: added(817)", "Delete SimpleName: TrieEntry(818)", "Delete SimpleType: TrieEntry(819)", "Delete SimpleName: K(820)", "Delete SimpleType: K(821)", "Delete SimpleName: V(822)", "Delete SimpleType: V(823)", "Delete ParameterizedType: TrieEntry<K,V>(824)", "Delete SimpleName: key(825)", "Delete NullLiteral(826)", "Delete SimpleName: bitIndex(827)", "Delete ClassInstanceCreation(828)", "Delete VariableDeclarationFragment(829)", "Delete VariableDeclarationStatement(830)", "Delete SimpleName: addEntry(831)", "Delete SimpleName: added(832)", "Delete SimpleName: lengthInBits(833)", "Delete MethodInvocation(834)", "Delete ExpressionStatement(835)", "Delete SimpleName: incrementSize(836)", "Delete MethodInvocation(837)", "Delete ExpressionStatement(838)", "Delete Modifier: final(839)", "Delete SimpleName: TrieEntry(840)", "Delete SimpleType: TrieEntry(841)", "Delete SimpleName: K(842)", "Delete SimpleType: K(843)", "Delete SimpleName: V(844)", "Delete SimpleType: V(845)", "Delete ParameterizedType: TrieEntry<K,V>(846)", "Delete SimpleName: ceil(847)", "Delete SimpleName: nextEntry(848)", "Delete SimpleName: added(849)", "Delete MethodInvocation(850)", "Delete VariableDeclarationFragment(851)", "Delete VariableDeclarationStatement(852)", "Delete SimpleName: removeEntry(853)", "Delete SimpleName: added(854)", "Delete MethodInvocation(855)", "Delete ExpressionStatement(856)", "Delete SimpleName: modCount(857)", "Delete NumberLiteral: 2(858)", "Delete Assignment: -=(859)", "Delete ExpressionStatement(860)", "Delete SimpleName: ceil(861)", "Delete ReturnStatement(862)", "Delete Block(863)", "Delete SimpleName: KeyAnalyzer(864)", "Delete SimpleName: isNullBitKey(865)", "Delete SimpleName: bitIndex(866)", "Delete MethodInvocation(867)", "Delete SimpleName: root(868)", "Delete SimpleName: isEmpty(869)", "Delete MethodInvocation(870)", "Delete PrefixExpression: !(871)", "Delete SimpleName: root(872)", "Delete ReturnStatement(873)", "Delete Block(874)", "Delete SimpleName: firstEntry(875)", "Delete MethodInvocation(876)", "Delete ReturnStatement(877)", "Delete Block(878)", "Delete IfStatement(879)", "Delete Block(880)", "Delete SimpleName: KeyAnalyzer(881)", "Delete SimpleName: isEqualBitKey(882)", "Delete SimpleName: bitIndex(883)", "Delete MethodInvocation(884)", "Delete SimpleName: found(885)", "Delete ReturnStatement(886)", "Delete Block(887)", "Delete IfStatement(888)", "Delete IfStatement(889)", "Delete IfStatement(890)", "Delete SimpleName: IllegalStateException(891)", "Delete SimpleType: IllegalStateException(892)", "Delete StringLiteral: \"invalid lookup: \"(893)", "Delete SimpleName: key(894)", "Delete InfixExpression: +(895)", "Delete ClassInstanceCreation(896)", "Delete ThrowStatement(897)", "Delete Block(898)", "Delete MethodDeclaration(899)", "Delete TextElement: Returns a key-value mapping associated with the greatest key(900)", "Delete TextElement: strictly less than the given key, or null if there is no such key.(901)", "Delete TagElement(902)", "Delete Javadoc(903)", "Delete SimpleName: TrieEntry(904)", "Delete SimpleType: TrieEntry(905)", "Delete SimpleName: K(906)", "Delete SimpleType: K(907)", "Delete SimpleName: V(908)", "Delete SimpleType: V(909)", "Delete ParameterizedType: TrieEntry<K,V>(910)", "Delete SimpleName: lowerEntry(911)", "Delete Modifier: final(912)", "Delete SimpleName: K(913)", "Delete SimpleType: K(914)", "Delete SimpleName: key(915)", "Delete SingleVariableDeclaration(916)", "Delete Modifier: final(917)", "Delete PrimitiveType: int(918)", "Delete SimpleName: lengthInBits(919)", "Delete SimpleName: lengthInBits(920)", "Delete SimpleName: key(921)", "Delete MethodInvocation(922)", "Delete VariableDeclarationFragment(923)", "Delete VariableDeclarationStatement(924)", "Delete SimpleName: lengthInBits(925)", "Delete NumberLiteral: 0(926)", "Delete InfixExpression: ==(927)", "Delete NullLiteral(928)", "Delete ReturnStatement(929)", "Delete Block(930)", "Delete IfStatement(931)", "Delete Modifier: final(932)", "Delete SimpleName: TrieEntry(933)", "Delete SimpleType: TrieEntry(934)", "Delete SimpleName: K(935)", "Delete SimpleType: K(936)", "Delete SimpleName: V(937)", "Delete SimpleType: V(938)", "Delete ParameterizedType: TrieEntry<K,V>(939)", "Delete SimpleName: found(940)", "Delete SimpleName: getNearestEntryForKey(941)", "Delete SimpleName: key(942)", "Delete SimpleName: lengthInBits(943)", "Delete MethodInvocation(944)", "Delete VariableDeclarationFragment(945)", "Delete VariableDeclarationStatement(946)", "Delete SimpleName: compareKeys(947)", "Delete SimpleName: key(948)", "Delete QualifiedName: found.key(949)", "Delete MethodInvocation(950)", "Delete SimpleName: previousEntry(951)", "Delete SimpleName: found(952)", "Delete MethodInvocation(953)", "Delete ReturnStatement(954)", "Delete Block(955)", "Delete IfStatement(956)", "Delete Modifier: final(957)", "Delete PrimitiveType: int(958)", "Delete SimpleName: bitIndex(959)", "Delete SimpleName: bitIndex(960)", "Delete SimpleName: key(961)", "Delete QualifiedName: found.key(962)", "Delete MethodInvocation(963)", "Delete VariableDeclarationFragment(964)", "Delete VariableDeclarationStatement(965)", "Delete SimpleName: KeyAnalyzer(966)", "Delete SimpleName: isValidBitIndex(967)", "Delete SimpleName: bitIndex(968)", "Delete MethodInvocation(969)", "Delete Modifier: final(970)", "Delete SimpleName: TrieEntry(971)", "Delete SimpleType: TrieEntry(972)", "Delete SimpleName: K(973)", "Delete SimpleType: K(974)", "Delete SimpleName: V(975)", "Delete SimpleType: V(976)", "Delete ParameterizedType: TrieEntry<K,V>(977)", "Delete SimpleName: added(978)", "Delete SimpleName: TrieEntry(979)", "Delete SimpleType: TrieEntry(980)", "Delete SimpleName: K(981)", "Delete SimpleType: K(982)", "Delete SimpleName: V(983)", "Delete SimpleType: V(984)", "Delete ParameterizedType: TrieEntry<K,V>(985)", "Delete SimpleName: key(986)", "Delete NullLiteral(987)", "Delete SimpleName: bitIndex(988)", "Delete ClassInstanceCreation(989)", "Delete VariableDeclarationFragment(990)", "Delete VariableDeclarationStatement(991)", "Delete SimpleName: addEntry(992)", "Delete SimpleName: added(993)", "Delete SimpleName: lengthInBits(994)", "Delete MethodInvocation(995)", "Delete ExpressionStatement(996)", "Delete SimpleName: incrementSize(997)", "Delete MethodInvocation(998)", "Delete ExpressionStatement(999)", "Delete Modifier: final(1000)", "Delete SimpleName: TrieEntry(1001)", "Delete SimpleType: TrieEntry(1002)", "Delete SimpleName: K(1003)", "Delete SimpleType: K(1004)", "Delete SimpleName: V(1005)", "Delete SimpleType: V(1006)", "Delete ParameterizedType: TrieEntry<K,V>(1007)", "Delete SimpleName: prior(1008)", "Delete SimpleName: previousEntry(1009)", "Delete SimpleName: added(1010)", "Delete MethodInvocation(1011)", "Delete VariableDeclarationFragment(1012)", "Delete VariableDeclarationStatement(1013)", "Delete SimpleName: removeEntry(1014)", "Delete SimpleName: added(1015)", "Delete MethodInvocation(1016)", "Delete ExpressionStatement(1017)", "Delete SimpleName: modCount(1018)", "Delete NumberLiteral: 2(1019)", "Delete Assignment: -=(1020)", "Delete ExpressionStatement(1021)", "Delete SimpleName: prior(1022)", "Delete ReturnStatement(1023)", "Delete Block(1024)", "Delete SimpleName: KeyAnalyzer(1025)", "Delete SimpleName: isNullBitKey(1026)", "Delete SimpleName: bitIndex(1027)", "Delete MethodInvocation(1028)", "Delete NullLiteral(1029)", "Delete ReturnStatement(1030)", "Delete Block(1031)", "Delete SimpleName: KeyAnalyzer(1032)", "Delete SimpleName: isEqualBitKey(1033)", "Delete SimpleName: bitIndex(1034)", "Delete MethodInvocation(1035)", "Delete SimpleName: previousEntry(1036)", "Delete SimpleName: found(1037)", "Delete MethodInvocation(1038)", "Delete ReturnStatement(1039)", "Delete Block(1040)", "Delete IfStatement(1041)", "Delete IfStatement(1042)", "Delete IfStatement(1043)", "Delete SimpleName: IllegalStateException(1044)", "Delete SimpleType: IllegalStateException(1045)", "Delete StringLiteral: \"invalid lookup: \"(1046)", "Delete SimpleName: key(1047)", "Delete InfixExpression: +(1048)", "Delete ClassInstanceCreation(1049)", "Delete ThrowStatement(1050)", "Delete Block(1051)", "Delete MethodDeclaration(1052)", "Delete TextElement: Returns a key-value mapping associated with the greatest key(1053)", "Delete TextElement: less than or equal to the given key, or null if there is no such key.(1054)", "Delete TagElement(1055)", "Delete Javadoc(1056)", "Delete SimpleName: TrieEntry(1057)", "Delete SimpleType: TrieEntry(1058)", "Delete SimpleName: K(1059)", "Delete SimpleType: K(1060)", "Delete SimpleName: V(1061)", "Delete SimpleType: V(1062)", "Delete ParameterizedType: TrieEntry<K,V>(1063)", "Delete SimpleName: floorEntry(1064)", "Delete Modifier: final(1065)", "Delete SimpleName: K(1066)", "Delete SimpleType: K(1067)", "Delete SimpleName: key(1068)", "Delete SingleVariableDeclaration(1069)", "Delete Modifier: final(1070)", "Delete PrimitiveType: int(1071)", "Delete SimpleName: lengthInBits(1072)", "Delete SimpleName: lengthInBits(1073)", "Delete SimpleName: key(1074)", "Delete MethodInvocation(1075)", "Delete VariableDeclarationFragment(1076)", "Delete VariableDeclarationStatement(1077)", "Delete SimpleName: lengthInBits(1078)", "Delete NumberLiteral: 0(1079)", "Delete InfixExpression: ==(1080)", "Delete SimpleName: root(1081)", "Delete SimpleName: isEmpty(1082)", "Delete MethodInvocation(1083)", "Delete PrefixExpression: !(1084)", "Delete SimpleName: root(1085)", "Delete ReturnStatement(1086)", "Delete Block(1087)", "Delete NullLiteral(1088)", "Delete ReturnStatement(1089)", "Delete Block(1090)", "Delete IfStatement(1091)", "Delete Block(1092)", "Delete IfStatement(1093)", "Delete Modifier: final(1094)", "Delete SimpleName: TrieEntry(1095)", "Delete SimpleType: TrieEntry(1096)", "Delete SimpleName: K(1097)", "Delete SimpleType: K(1098)", "Delete SimpleName: V(1099)", "Delete SimpleType: V(1100)", "Delete ParameterizedType: TrieEntry<K,V>(1101)", "Delete SimpleName: found(1102)", "Delete SimpleName: getNearestEntryForKey(1103)", "Delete SimpleName: key(1104)", "Delete SimpleName: lengthInBits(1105)", "Delete MethodInvocation(1106)", "Delete VariableDeclarationFragment(1107)", "Delete VariableDeclarationStatement(1108)", "Delete SimpleName: compareKeys(1109)", "Delete SimpleName: key(1110)", "Delete QualifiedName: found.key(1111)", "Delete MethodInvocation(1112)", "Delete SimpleName: found(1113)", "Delete ReturnStatement(1114)", "Delete Block(1115)", "Delete IfStatement(1116)", "Delete Modifier: final(1117)", "Delete PrimitiveType: int(1118)", "Delete SimpleName: bitIndex(1119)", "Delete SimpleName: bitIndex(1120)", "Delete SimpleName: key(1121)", "Delete QualifiedName: found.key(1122)", "Delete MethodInvocation(1123)", "Delete VariableDeclarationFragment(1124)", "Delete VariableDeclarationStatement(1125)", "Delete SimpleName: KeyAnalyzer(1126)", "Delete SimpleName: isValidBitIndex(1127)", "Delete SimpleName: bitIndex(1128)", "Delete MethodInvocation(1129)", "Delete Modifier: final(1130)", "Delete SimpleName: TrieEntry(1131)", "Delete SimpleType: TrieEntry(1132)", "Delete SimpleName: K(1133)", "Delete SimpleType: K(1134)", "Delete SimpleName: V(1135)", "Delete SimpleType: V(1136)", "Delete ParameterizedType: TrieEntry<K,V>(1137)", "Delete SimpleName: added(1138)", "Delete SimpleName: TrieEntry(1139)", "Delete SimpleType: TrieEntry(1140)", "Delete SimpleName: K(1141)", "Delete SimpleType: K(1142)", "Delete SimpleName: V(1143)", "Delete SimpleType: V(1144)", "Delete ParameterizedType: TrieEntry<K,V>(1145)", "Delete SimpleName: key(1146)", "Delete NullLiteral(1147)", "Delete SimpleName: bitIndex(1148)", "Delete ClassInstanceCreation(1149)", "Delete VariableDeclarationFragment(1150)", "Delete VariableDeclarationStatement(1151)", "Delete SimpleName: addEntry(1152)", "Delete SimpleName: added(1153)", "Delete SimpleName: lengthInBits(1154)", "Delete MethodInvocation(1155)", "Delete ExpressionStatement(1156)", "Delete SimpleName: incrementSize(1157)", "Delete MethodInvocation(1158)", "Delete ExpressionStatement(1159)", "Delete Modifier: final(1160)", "Delete SimpleName: TrieEntry(1161)", "Delete SimpleType: TrieEntry(1162)", "Delete SimpleName: K(1163)", "Delete SimpleType: K(1164)", "Delete SimpleName: V(1165)", "Delete SimpleType: V(1166)", "Delete ParameterizedType: TrieEntry<K,V>(1167)", "Delete SimpleName: floor(1168)", "Delete SimpleName: previousEntry(1169)", "Delete SimpleName: added(1170)", "Delete MethodInvocation(1171)", "Delete VariableDeclarationFragment(1172)", "Delete VariableDeclarationStatement(1173)", "Delete SimpleName: removeEntry(1174)", "Delete SimpleName: added(1175)", "Delete MethodInvocation(1176)", "Delete ExpressionStatement(1177)", "Delete SimpleName: modCount(1178)", "Delete NumberLiteral: 2(1179)", "Delete Assignment: -=(1180)", "Delete ExpressionStatement(1181)", "Delete SimpleName: floor(1182)", "Delete ReturnStatement(1183)", "Delete Block(1184)", "Delete SimpleName: KeyAnalyzer(1185)", "Delete SimpleName: isNullBitKey(1186)", "Delete SimpleName: bitIndex(1187)", "Delete MethodInvocation(1188)", "Delete SimpleName: root(1189)", "Delete SimpleName: isEmpty(1190)", "Delete MethodInvocation(1191)", "Delete PrefixExpression: !(1192)", "Delete SimpleName: root(1193)", "Delete ReturnStatement(1194)", "Delete Block(1195)", "Delete NullLiteral(1196)", "Delete ReturnStatement(1197)", "Delete Block(1198)", "Delete IfStatement(1199)", "Delete Block(1200)", "Delete SimpleName: KeyAnalyzer(1201)", "Delete SimpleName: isEqualBitKey(1202)", "Delete SimpleName: bitIndex(1203)", "Delete MethodInvocation(1204)", "Delete SimpleName: found(1205)", "Delete ReturnStatement(1206)", "Delete Block(1207)", "Delete IfStatement(1208)", "Delete IfStatement(1209)", "Delete IfStatement(1210)", "Delete SimpleName: IllegalStateException(1211)", "Delete SimpleType: IllegalStateException(1212)", "Delete StringLiteral: \"invalid lookup: \"(1213)", "Delete SimpleName: key(1214)", "Delete InfixExpression: +(1215)", "Delete ClassInstanceCreation(1216)", "Delete ThrowStatement(1217)", "Delete Block(1218)", "Delete MethodDeclaration(1219)", "Delete TextElement: Finds the subtree that contains the prefix.(1220)", "Delete TextElement: This is very similar to getR but with the difference that(1221)", "Delete TextElement: we stop the lookup if h.bitIndex > lengthInBits.(1222)", "Delete TagElement(1223)", "Delete Javadoc(1224)", "Delete SimpleName: TrieEntry(1225)", "Delete SimpleType: TrieEntry(1226)", "Delete SimpleName: K(1227)", "Delete SimpleType: K(1228)", "Delete SimpleName: V(1229)", "Delete SimpleType: V(1230)", "Delete ParameterizedType: TrieEntry<K,V>(1231)", "Delete SimpleName: subtree(1232)", "Delete Modifier: final(1233)", "Delete SimpleName: K(1234)", "Delete SimpleType: K(1235)", "Delete SimpleName: prefix(1236)", "Delete SingleVariableDeclaration(1237)", "Delete Modifier: final(1238)", "Delete PrimitiveType: int(1239)", "Delete SimpleName: offsetInBits(1240)", "Delete SingleVariableDeclaration(1241)", "Delete Modifier: final(1242)", "Delete PrimitiveType: int(1243)", "Delete SimpleName: lengthInBits(1244)", "Delete SingleVariableDeclaration(1245)", "Delete SimpleName: TrieEntry(1246)", "Delete SimpleType: TrieEntry(1247)", "Delete SimpleName: K(1248)", "Delete SimpleType: K(1249)", "Delete SimpleName: V(1250)", "Delete SimpleType: V(1251)", "Delete ParameterizedType: TrieEntry<K,V>(1252)", "Delete SimpleName: current(1253)", "Delete QualifiedName: root.left(1254)", "Delete VariableDeclarationFragment(1255)", "Delete VariableDeclarationStatement(1256)", "Delete SimpleName: TrieEntry(1257)", "Delete SimpleType: TrieEntry(1258)", "Delete SimpleName: K(1259)", "Delete SimpleType: K(1260)", "Delete SimpleName: V(1261)", "Delete SimpleType: V(1262)", "Delete ParameterizedType: TrieEntry<K,V>(1263)", "Delete SimpleName: path(1264)", "Delete SimpleName: root(1265)", "Delete VariableDeclarationFragment(1266)", "Delete VariableDeclarationStatement(1267)", "Delete BooleanLiteral: true(1268)", "Delete QualifiedName: current.bitIndex(1269)", "Delete QualifiedName: path.bitIndex(1270)", "Delete InfixExpression: <=(1271)", "Delete SimpleName: lengthInBits(1272)", "Delete QualifiedName: current.bitIndex(1273)", "Delete InfixExpression: <(1274)", "Delete InfixExpression: ||(1275)", "Delete BreakStatement(1276)", "Delete Block(1277)", "Delete IfStatement(1278)", "Delete SimpleName: path(1279)", "Delete SimpleName: current(1280)", "Delete Assignment: =(1281)", "Delete ExpressionStatement(1282)", "Delete SimpleName: isBitSet(1283)", "Delete SimpleName: prefix(1284)", "Delete SimpleName: offsetInBits(1285)", "Delete QualifiedName: current.bitIndex(1286)", "Delete InfixExpression: +(1287)", "Delete SimpleName: offsetInBits(1288)", "Delete SimpleName: lengthInBits(1289)", "Delete InfixExpression: +(1290)", "Delete MethodInvocation(1291)", "Delete PrefixExpression: !(1292)", "Delete SimpleName: current(1293)", "Delete QualifiedName: current.left(1294)", "Delete Assignment: =(1295)", "Delete ExpressionStatement(1296)", "Delete Block(1297)", "Delete SimpleName: current(1298)", "Delete QualifiedName: current.right(1299)", "Delete Assignment: =(1300)", "Delete ExpressionStatement(1301)", "Delete Block(1302)", "Delete IfStatement(1303)", "Delete Block(1304)", "Delete WhileStatement(1305)", "Delete Modifier: final(1306)", "Delete SimpleName: TrieEntry(1307)", "Delete SimpleType: TrieEntry(1308)", "Delete SimpleName: K(1309)", "Delete SimpleType: K(1310)", "Delete SimpleName: V(1311)", "Delete SimpleType: V(1312)", "Delete ParameterizedType: TrieEntry<K,V>(1313)", "Delete SimpleName: entry(1314)", "Delete SimpleName: current(1315)", "Delete SimpleName: isEmpty(1316)", "Delete MethodInvocation(1317)", "Delete SimpleName: path(1318)", "Delete SimpleName: current(1319)", "Delete ConditionalExpression(1320)", "Delete VariableDeclarationFragment(1321)", "Delete VariableDeclarationStatement(1322)", "Delete SimpleName: entry(1323)", "Delete SimpleName: isEmpty(1324)", "Delete MethodInvocation(1325)", "Delete NullLiteral(1326)", "Delete ReturnStatement(1327)", "Delete Block(1328)", "Delete IfStatement(1329)", "Delete Modifier: final(1330)", "Delete PrimitiveType: int(1331)", "Delete SimpleName: endIndexInBits(1332)", "Delete SimpleName: offsetInBits(1333)", "Delete SimpleName: lengthInBits(1334)", "Delete InfixExpression: +(1335)", "Delete VariableDeclarationFragment(1336)", "Delete VariableDeclarationStatement(1337)", "Delete SimpleName: entry(1338)", "Delete SimpleName: root(1339)", "Delete InfixExpression: ==(1340)", "Delete SimpleName: lengthInBits(1341)", "Delete SimpleName: entry(1342)", "Delete SimpleName: getKey(1343)", "Delete MethodInvocation(1344)", "Delete MethodInvocation(1345)", "Delete SimpleName: endIndexInBits(1346)", "Delete InfixExpression: <(1347)", "Delete InfixExpression: &&(1348)", "Delete NullLiteral(1349)", "Delete ReturnStatement(1350)", "Delete Block(1351)", "Delete IfStatement(1352)", "Delete SimpleName: isBitSet(1353)", "Delete SimpleName: prefix(1354)", "Delete SimpleName: endIndexInBits(1355)", "Delete SimpleName: endIndexInBits(1356)", "Delete MethodInvocation(1357)", "Delete SimpleName: isBitSet(1358)", "Delete QualifiedName: entry.key(1359)", "Delete SimpleName: lengthInBits(1360)", "Delete SimpleName: lengthInBits(1361)", "Delete QualifiedName: entry.key(1362)", "Delete MethodInvocation(1363)", "Delete MethodInvocation(1364)", "Delete InfixExpression: !=(1365)", "Delete NullLiteral(1366)", "Delete ReturnStatement(1367)", "Delete Block(1368)", "Delete IfStatement(1369)", "Delete Modifier: final(1370)", "Delete PrimitiveType: int(1371)", "Delete SimpleName: bitIndex(1372)", "Delete SimpleName: keyAnalyzer(1373)", "Delete SimpleName: bitIndex(1374)", "Delete SimpleName: prefix(1375)", "Delete SimpleName: offsetInBits(1376)", "Delete SimpleName: lengthInBits(1377)", "Delete QualifiedName: entry.key(1378)", "Delete NumberLiteral: 0(1379)", "Delete SimpleName: lengthInBits(1380)", "Delete SimpleName: entry(1381)", "Delete SimpleName: getKey(1382)", "Delete MethodInvocation(1383)", "Delete MethodInvocation(1384)", "Delete MethodInvocation(1385)", "Delete VariableDeclarationFragment(1386)", "Delete VariableDeclarationStatement(1387)", "Delete SimpleName: bitIndex(1388)", "Delete NumberLiteral: 0(1389)", "Delete InfixExpression: >=(1390)", "Delete SimpleName: bitIndex(1391)", "Delete SimpleName: lengthInBits(1392)", "Delete InfixExpression: <(1393)", "Delete InfixExpression: &&(1394)", "Delete NullLiteral(1395)", "Delete ReturnStatement(1396)", "Delete Block(1397)", "Delete IfStatement(1398)", "Delete SimpleName: entry(1399)", "Delete ReturnStatement(1400)", "Delete Block(1401)", "Delete MethodDeclaration(1402)", "Delete TextElement: Returns the last entry the (1403)", "Delete SimpleName: Trie(1404)", "Delete TagElement: @link(1405)", "Delete TextElement:  is storing.(1406)", "Delete TextElement: <p>This is implemented by going always to the right until(1407)", "Delete TextElement: we encounter a valid uplink. That uplink is the last key.(1408)", "Delete TagElement(1409)", "Delete Javadoc(1410)", "Delete SimpleName: TrieEntry(1411)", "Delete SimpleType: TrieEntry(1412)", "Delete SimpleName: K(1413)", "Delete SimpleType: K(1414)", "Delete SimpleName: V(1415)", "Delete SimpleType: V(1416)", "Delete ParameterizedType: TrieEntry<K,V>(1417)", "Delete SimpleName: lastEntry(1418)", "Delete SimpleName: followRight(1419)", "Delete QualifiedName: root.left(1420)", "Delete MethodInvocation(1421)", "Delete ReturnStatement(1422)", "Delete Block(1423)", "Delete MethodDeclaration(1424)", "Delete TextElement: Traverses down the right path until it finds an uplink.(1425)", "Delete TagElement(1426)", "Delete Javadoc(1427)", "Delete SimpleName: TrieEntry(1428)", "Delete SimpleType: TrieEntry(1429)", "Delete SimpleName: K(1430)", "Delete SimpleType: K(1431)", "Delete SimpleName: V(1432)", "Delete SimpleType: V(1433)", "Delete ParameterizedType: TrieEntry<K,V>(1434)", "Delete SimpleName: followRight(1435)", "Delete SimpleName: TrieEntry(1436)", "Delete SimpleType: TrieEntry(1437)", "Delete SimpleName: K(1438)", "Delete SimpleType: K(1439)", "Delete SimpleName: V(1440)", "Delete SimpleType: V(1441)", "Delete ParameterizedType: TrieEntry<K,V>(1442)", "Delete SimpleName: node(1443)", "Delete SingleVariableDeclaration(1444)", "Delete QualifiedName: node.right(1445)", "Delete NullLiteral(1446)", "Delete InfixExpression: ==(1447)", "Delete NullLiteral(1448)", "Delete ReturnStatement(1449)", "Delete Block(1450)", "Delete IfStatement(1451)", "Delete QualifiedName: node.right.bitIndex(1452)", "Delete QualifiedName: node.bitIndex(1453)", "Delete InfixExpression: >(1454)", "Delete SimpleName: node(1455)", "Delete QualifiedName: node.right(1456)", "Delete Assignment: =(1457)", "Delete ExpressionStatement(1458)", "Delete Block(1459)", "Delete WhileStatement(1460)", "Delete QualifiedName: node.right(1461)", "Delete ReturnStatement(1462)", "Delete Block(1463)", "Delete MethodDeclaration(1464)", "Delete TextElement: Returns the node lexicographically before the given node (or null if none).(1465)", "Delete TextElement: This follows four simple branches:(1466)", "Delete TextElement: - If the uplink that returned us was a right uplink:(1467)", "Delete TextElement: - If predecessor's left is a valid uplink from predecessor, return it.(1468)", "Delete TextElement: - Else, follow the right path from the predecessor's left.(1469)", "Delete TextElement: - If the uplink that returned us was a left uplink:(1470)", "Delete TextElement: - Loop back through parents until we encounter a node where(1471)", "Delete TextElement: node != node.parent.left.(1472)", "Delete TextElement: - If node.parent.left is uplink from node.parent:(1473)", "Delete TextElement: - If node.parent.left is not root, return it.(1474)", "Delete TextElement: - If it is root & root isEmpty, return null.(1475)", "Delete TextElement: - If it is root & root !isEmpty, return root.(1476)", "Delete TextElement: - If node.parent.left is not uplink from node.parent:(1477)", "Delete TextElement: - Follow right path for first right child from node.parent.left(1478)", "Delete TagElement(1479)", "Delete SimpleName: start(1480)", "Delete TextElement:   the start entry(1481)", "Delete TagElement: @param(1482)", "Delete Javadoc(1483)", "Delete SimpleName: TrieEntry(1484)", "Delete SimpleType: TrieEntry(1485)", "Delete SimpleName: K(1486)", "Delete SimpleType: K(1487)", "Delete SimpleName: V(1488)", "Delete SimpleType: V(1489)", "Delete ParameterizedType: TrieEntry<K,V>(1490)", "Delete SimpleName: previousEntry(1491)", "Delete Modifier: final(1492)", "Delete SimpleName: TrieEntry(1493)", "Delete SimpleType: TrieEntry(1494)", "Delete SimpleName: K(1495)", "Delete SimpleType: K(1496)", "Delete SimpleName: V(1497)", "Delete SimpleType: V(1498)", "Delete ParameterizedType: TrieEntry<K,V>(1499)", "Delete SimpleName: start(1500)", "Delete SingleVariableDeclaration(1501)", "Delete QualifiedName: start.predecessor(1502)", "Delete NullLiteral(1503)", "Delete InfixExpression: ==(1504)", "Delete SimpleName: IllegalArgumentException(1505)", "Delete SimpleType: IllegalArgumentException(1506)", "Delete StringLiteral: \"must have come from somewhere!\"(1507)", "Delete ClassInstanceCreation(1508)", "Delete ThrowStatement(1509)", "Delete Block(1510)", "Delete IfStatement(1511)", "Delete QualifiedName: start.predecessor.right(1512)", "Delete SimpleName: start(1513)", "Delete InfixExpression: ==(1514)", "Delete SimpleName: isValidUplink(1515)", "Delete QualifiedName: start.predecessor.left(1516)", "Delete QualifiedName: start.predecessor(1517)", "Delete MethodInvocation(1518)", "Delete QualifiedName: start.predecessor.left(1519)", "Delete ReturnStatement(1520)", "Delete Block(1521)", "Delete SimpleName: followRight(1522)", "Delete QualifiedName: start.predecessor.left(1523)", "Delete MethodInvocation(1524)", "Delete ReturnStatement(1525)", "Delete Block(1526)", "Delete IfStatement(1527)", "Delete Block(1528)", "Delete SimpleName: TrieEntry(1529)", "Delete SimpleType: TrieEntry(1530)", "Delete SimpleName: K(1531)", "Delete SimpleType: K(1532)", "Delete SimpleName: V(1533)", "Delete SimpleType: V(1534)", "Delete ParameterizedType: TrieEntry<K,V>(1535)", "Delete SimpleName: node(1536)", "Delete QualifiedName: start.predecessor(1537)", "Delete VariableDeclarationFragment(1538)", "Delete VariableDeclarationStatement(1539)", "Delete QualifiedName: node.parent(1540)", "Delete NullLiteral(1541)", "Delete InfixExpression: !=(1542)", "Delete SimpleName: node(1543)", "Delete QualifiedName: node.parent.left(1544)", "Delete InfixExpression: ==(1545)", "Delete InfixExpression: &&(1546)", "Delete SimpleName: node(1547)", "Delete QualifiedName: node.parent(1548)", "Delete Assignment: =(1549)", "Delete ExpressionStatement(1550)", "Delete Block(1551)", "Delete WhileStatement(1552)", "Delete QualifiedName: node.parent(1553)", "Delete NullLiteral(1554)", "Delete InfixExpression: ==(1555)", "Delete NullLiteral(1556)", "Delete ReturnStatement(1557)", "Delete Block(1558)", "Delete IfStatement(1559)", "Delete SimpleName: isValidUplink(1560)", "Delete QualifiedName: node.parent.left(1561)", "Delete QualifiedName: node.parent(1562)", "Delete MethodInvocation(1563)", "Delete QualifiedName: node.parent.left(1564)", "Delete SimpleName: root(1565)", "Delete InfixExpression: ==(1566)", "Delete SimpleName: root(1567)", "Delete SimpleName: isEmpty(1568)", "Delete MethodInvocation(1569)", "Delete NullLiteral(1570)", "Delete ReturnStatement(1571)", "Delete Block(1572)", "Delete SimpleName: root(1573)", "Delete ReturnStatement(1574)", "Delete Block(1575)", "Delete IfStatement(1576)", "Delete Block(1577)", "Delete QualifiedName: node.parent.left(1578)", "Delete ReturnStatement(1579)", "Delete Block(1580)", "Delete IfStatement(1581)", "Delete Block(1582)", "Delete SimpleName: followRight(1583)", "Delete QualifiedName: node.parent.left(1584)", "Delete MethodInvocation(1585)", "Delete ReturnStatement(1586)", "Delete Block(1587)", "Delete IfStatement(1588)", "Delete Block(1589)", "Delete IfStatement(1590)", "Delete Block(1591)", "Delete MethodDeclaration(1592)", "Delete TextElement: Returns the entry lexicographically after the given entry.(1593)", "Delete TextElement: If the given entry is null, returns the first node.(1594)", "Delete TextElement: This will traverse only within the subtree.  If the given node(1595)", "Delete TextElement: is not within the subtree, this will have undefined results.(1596)", "Delete TagElement(1597)", "Delete Javadoc(1598)", "Delete SimpleName: TrieEntry(1599)", "Delete SimpleType: TrieEntry(1600)", "Delete SimpleName: K(1601)", "Delete SimpleType: K(1602)", "Delete SimpleName: V(1603)", "Delete SimpleType: V(1604)", "Delete ParameterizedType: TrieEntry<K,V>(1605)", "Delete SimpleName: nextEntryInSubtree(1606)", "Delete Modifier: final(1607)", "Delete SimpleName: TrieEntry(1608)", "Delete SimpleType: TrieEntry(1609)", "Delete SimpleName: K(1610)", "Delete SimpleType: K(1611)", "Delete SimpleName: V(1612)", "Delete SimpleType: V(1613)", "Delete ParameterizedType: TrieEntry<K,V>(1614)", "Delete SimpleName: node(1615)", "Delete SingleVariableDeclaration(1616)", "Delete Modifier: final(1617)", "Delete SimpleName: TrieEntry(1618)", "Delete SimpleType: TrieEntry(1619)", "Delete SimpleName: K(1620)", "Delete SimpleType: K(1621)", "Delete SimpleName: V(1622)", "Delete SimpleType: V(1623)", "Delete ParameterizedType: TrieEntry<K,V>(1624)", "Delete SimpleName: parentOfSubtree(1625)", "Delete SingleVariableDeclaration(1626)", "Delete SimpleName: node(1627)", "Delete NullLiteral(1628)", "Delete InfixExpression: ==(1629)", "Delete SimpleName: firstEntry(1630)", "Delete MethodInvocation(1631)", "Delete ReturnStatement(1632)", "Delete Block(1633)", "Delete SimpleName: nextEntryImpl(1634)", "Delete QualifiedName: node.predecessor(1635)", "Delete SimpleName: node(1636)", "Delete SimpleName: parentOfSubtree(1637)", "Delete MethodInvocation(1638)", "Delete ReturnStatement(1639)", "Delete Block(1640)", "Delete IfStatement(1641)", "Delete Block(1642)", "Delete MethodDeclaration(1643)", "Delete TextElement: A range view of the (1644)", "Delete SimpleName: Trie(1645)", "Delete TagElement: @link(1646)", "Delete TextElement: .(1647)", "Delete TagElement(1648)", "Delete Javadoc(1649)", "Delete Modifier: private(1650)", "Delete Modifier: abstract(1651)", "Delete SimpleName: RangeMap(1652)", "Delete SimpleName: AbstractMap(1653)", "Delete SimpleType: AbstractMap(1654)", "Delete SimpleName: K(1655)", "Delete SimpleType: K(1656)", "Delete SimpleName: V(1657)", "Delete SimpleType: V(1658)", "Delete ParameterizedType: AbstractMap<K,V>(1659)", "Delete SimpleName: SortedMap(1660)", "Delete SimpleType: SortedMap(1661)", "Delete SimpleName: K(1662)", "Delete SimpleType: K(1663)", "Delete SimpleName: V(1664)", "Delete SimpleType: V(1665)", "Delete ParameterizedType: SortedMap<K,V>(1666)", "Delete TextElement: The (1667)", "Delete SimpleName: entrySet(1668)", "Delete MethodRef(1669)", "Delete TagElement: @link(1670)", "Delete TextElement:  view. (1671)", "Delete TagElement(1672)", "Delete Javadoc(1673)", "Delete Modifier: private(1674)", "Delete Modifier: transient(1675)", "Delete Modifier: volatile(1676)", "Delete SimpleName: Set(1677)", "Delete SimpleType: Set(1678)", "Delete QualifiedName: Map.Entry(1679)", "Delete SimpleType: Map.Entry(1680)", "Delete SimpleName: K(1681)", "Delete SimpleType: K(1682)", "Delete SimpleName: V(1683)", "Delete SimpleType: V(1684)", "Delete ParameterizedType: Map.Entry<K,V>(1685)", "Delete ParameterizedType: Set<Map.Entry<K,V>>(1686)", "Delete SimpleName: entrySet(1687)", "Delete VariableDeclarationFragment(1688)", "Delete FieldDeclaration(1689)", "Delete TextElement: Creates and returns an (1690)", "Delete SimpleName: entrySet(1691)", "Delete MethodRef(1692)", "Delete TagElement: @link(1693)", "Delete TextElement:  view of the (1694)", "Delete SimpleName: RangeMap(1695)", "Delete TagElement: @link(1696)", "Delete TextElement: .(1697)", "Delete TagElement(1698)", "Delete Javadoc(1699)", "Delete Modifier: protected(1700)", "Delete Modifier: abstract(1701)", "Delete SimpleName: Set(1702)", "Delete SimpleType: Set(1703)", "Delete QualifiedName: Map.Entry(1704)", "Delete SimpleType: Map.Entry(1705)", "Delete SimpleName: K(1706)", "Delete SimpleType: K(1707)", "Delete SimpleName: V(1708)", "Delete SimpleType: V(1709)", "Delete ParameterizedType: Map.Entry<K,V>(1710)", "Delete ParameterizedType: Set<Map.Entry<K,V>>(1711)", "Delete SimpleName: createEntrySet(1712)", "Delete MethodDeclaration(1713)", "Delete TextElement: Returns the FROM Key.(1714)", "Delete TagElement(1715)", "Delete Javadoc(1716)", "Delete Modifier: protected(1717)", "Delete Modifier: abstract(1718)", "Delete SimpleName: K(1719)", "Delete SimpleType: K(1720)", "Delete SimpleName: getFromKey(1721)", "Delete MethodDeclaration(1722)", "Delete TextElement: Whether or not the (1723)", "Delete SimpleName: getFromKey(1724)", "Delete MethodRef(1725)", "Delete TagElement: @link(1726)", "Delete TextElement:  is in the range.(1727)", "Delete TagElement(1728)", "Delete Javadoc(1729)", "Delete Modifier: protected(1730)", "Delete Modifier: abstract(1731)", "Delete PrimitiveType: boolean(1732)", "Delete SimpleName: isFromInclusive(1733)", "Delete MethodDeclaration(1734)", "Delete TextElement: Returns the TO Key.(1735)", "Delete TagElement(1736)", "Delete Javadoc(1737)", "Delete Modifier: protected(1738)", "Delete Modifier: abstract(1739)", "Delete SimpleName: K(1740)", "Delete SimpleType: K(1741)", "Delete SimpleName: getToKey(1742)", "Delete MethodDeclaration(1743)", "Delete TextElement: Whether or not the (1744)", "Delete SimpleName: getToKey(1745)", "Delete MethodRef(1746)", "Delete TagElement: @link(1747)", "Delete TextElement:  is in the range.(1748)", "Delete TagElement(1749)", "Delete Javadoc(1750)", "Delete Modifier: protected(1751)", "Delete Modifier: abstract(1752)", "Delete PrimitiveType: boolean(1753)", "Delete SimpleName: isToInclusive(1754)", "Delete MethodDeclaration(1755)", "Delete Modifier: public(1756)", "Delete SimpleName: Comparator(1757)", "Delete SimpleType: Comparator(1758)", "Delete SimpleName: K(1759)", "Delete SimpleType: K(1760)", "Delete WildcardType: ? super K(1761)", "Delete ParameterizedType: Comparator<? super K>(1762)", "Delete SimpleName: comparator(1763)", "Delete SimpleName: PatriciaTrie(1764)", "Delete ThisExpression(1765)", "Delete SimpleName: comparator(1766)", "Delete MethodInvocation(1767)", "Delete ReturnStatement(1768)", "Delete Block(1769)", "Delete MethodDeclaration(1770)", "Delete SimpleName: Override(1771)", "Delete MarkerAnnotation(1772)", "Delete Modifier: public(1773)", "Delete PrimitiveType: boolean(1774)", "Delete SimpleName: containsKey(1775)", "Delete Modifier: final(1776)", "Delete SimpleName: Object(1777)", "Delete SimpleType: Object(1778)", "Delete SimpleName: key(1779)", "Delete SingleVariableDeclaration(1780)", "Delete SimpleName: inRange(1781)", "Delete SimpleName: castKey(1782)", "Delete SimpleName: key(1783)", "Delete MethodInvocation(1784)", "Delete MethodInvocation(1785)", "Delete PrefixExpression: !(1786)", "Delete BooleanLiteral: false(1787)", "Delete ReturnStatement(1788)", "Delete Block(1789)", "Delete IfStatement(1790)", "Delete SimpleName: PatriciaTrie(1791)", "Delete ThisExpression(1792)", "Delete SimpleName: containsKey(1793)", "Delete SimpleName: key(1794)", "Delete MethodInvocation(1795)", "Delete ReturnStatement(1796)", "Delete Block(1797)", "Delete MethodDeclaration(1798)", "Delete SimpleName: Override(1799)", "Delete MarkerAnnotation(1800)", "Delete Modifier: public(1801)", "Delete SimpleName: V(1802)", "Delete SimpleType: V(1803)", "Delete SimpleName: remove(1804)", "Delete Modifier: final(1805)", "Delete SimpleName: Object(1806)", "Delete SimpleType: Object(1807)", "Delete SimpleName: key(1808)", "Delete SingleVariableDeclaration(1809)", "Delete SimpleName: inRange(1810)", "Delete SimpleName: castKey(1811)", "Delete SimpleName: key(1812)", "Delete MethodInvocation(1813)", "Delete MethodInvocation(1814)", "Delete PrefixExpression: !(1815)", "Delete NullLiteral(1816)", "Delete ReturnStatement(1817)", "Delete Block(1818)", "Delete IfStatement(1819)", "Delete SimpleName: PatriciaTrie(1820)", "Delete ThisExpression(1821)", "Delete SimpleName: remove(1822)", "Delete SimpleName: key(1823)", "Delete MethodInvocation(1824)", "Delete ReturnStatement(1825)", "Delete Block(1826)", "Delete MethodDeclaration(1827)", "Delete SimpleName: Override(1828)", "Delete MarkerAnnotation(1829)", "Delete Modifier: public(1830)", "Delete SimpleName: V(1831)", "Delete SimpleType: V(1832)", "Delete SimpleName: get(1833)", "Delete Modifier: final(1834)", "Delete SimpleName: Object(1835)", "Delete SimpleType: Object(1836)", "Delete SimpleName: key(1837)", "Delete SingleVariableDeclaration(1838)", "Delete SimpleName: inRange(1839)", "Delete SimpleName: castKey(1840)", "Delete SimpleName: key(1841)", "Delete MethodInvocation(1842)", "Delete MethodInvocation(1843)", "Delete PrefixExpression: !(1844)", "Delete NullLiteral(1845)", "Delete ReturnStatement(1846)", "Delete Block(1847)", "Delete IfStatement(1848)", "Delete SimpleName: PatriciaTrie(1849)", "Delete ThisExpression(1850)", "Delete SimpleName: get(1851)", "Delete SimpleName: key(1852)", "Delete MethodInvocation(1853)", "Delete ReturnStatement(1854)", "Delete Block(1855)", "Delete MethodDeclaration(1856)", "Delete SimpleName: Override(1857)", "Delete MarkerAnnotation(1858)", "Delete Modifier: public(1859)", "Delete SimpleName: V(1860)", "Delete SimpleType: V(1861)", "Delete SimpleName: put(1862)", "Delete Modifier: final(1863)", "Delete SimpleName: K(1864)", "Delete SimpleType: K(1865)", "Delete SimpleName: key(1866)", "Delete SingleVariableDeclaration(1867)", "Delete Modifier: final(1868)", "Delete SimpleName: V(1869)", "Delete SimpleType: V(1870)", "Delete SimpleName: value(1871)", "Delete SingleVariableDeclaration(1872)", "Delete SimpleName: inRange(1873)", "Delete SimpleName: key(1874)", "Delete MethodInvocation(1875)", "Delete PrefixExpression: !(1876)", "Delete SimpleName: IllegalArgumentException(1877)", "Delete SimpleType: IllegalArgumentException(1878)", "Delete StringLiteral: \"Key is out of range: \"(1879)", "Delete SimpleName: key(1880)", "Delete InfixExpression: +(1881)", "Delete ClassInstanceCreation(1882)", "Delete ThrowStatement(1883)", "Delete Block(1884)", "Delete IfStatement(1885)", "Delete SimpleName: PatriciaTrie(1886)", "Delete ThisExpression(1887)", "Delete SimpleName: put(1888)", "Delete SimpleName: key(1889)", "Delete SimpleName: value(1890)", "Delete MethodInvocation(1891)", "Delete ReturnStatement(1892)", "Delete Block(1893)", "Delete MethodDeclaration(1894)", "Delete SimpleName: Override(1895)", "Delete MarkerAnnotation(1896)", "Delete Modifier: public(1897)", "Delete SimpleName: Set(1898)", "Delete SimpleType: Set(1899)", "Delete QualifiedName: Map.Entry(1900)", "Delete SimpleType: Map.Entry(1901)", "Delete SimpleName: K(1902)", "Delete SimpleType: K(1903)", "Delete SimpleName: V(1904)", "Delete SimpleType: V(1905)", "Delete ParameterizedType: Map.Entry<K,V>(1906)", "Delete ParameterizedType: Set<Map.Entry<K,V>>(1907)", "Delete SimpleName: entrySet(1908)", "Delete SimpleName: entrySet(1909)", "Delete NullLiteral(1910)", "Delete InfixExpression: ==(1911)", "Delete SimpleName: entrySet(1912)", "Delete SimpleName: createEntrySet(1913)", "Delete MethodInvocation(1914)", "Delete Assignment: =(1915)", "Delete ExpressionStatement(1916)", "Delete Block(1917)", "Delete IfStatement(1918)", "Delete SimpleName: entrySet(1919)", "Delete ReturnStatement(1920)", "Delete Block(1921)", "Delete MethodDeclaration(1922)", "Delete Modifier: public(1923)", "Delete SimpleName: SortedMap(1924)", "Delete SimpleType: SortedMap(1925)", "Delete SimpleName: K(1926)", "Delete SimpleType: K(1927)", "Delete SimpleName: V(1928)", "Delete SimpleType: V(1929)", "Delete ParameterizedType: SortedMap<K,V>(1930)", "Delete SimpleName: subMap(1931)", "Delete Modifier: final(1932)", "Delete SimpleName: K(1933)", "Delete SimpleType: K(1934)", "Delete SimpleName: fromKey(1935)", "Delete SingleVariableDeclaration(1936)", "Delete Modifier: final(1937)", "Delete SimpleName: K(1938)", "Delete SimpleType: K(1939)", "Delete SimpleName: toKey(1940)", "Delete SingleVariableDeclaration(1941)", "Delete SimpleName: inRange2(1942)", "Delete SimpleName: fromKey(1943)", "Delete MethodInvocation(1944)", "Delete PrefixExpression: !(1945)", "Delete SimpleName: IllegalArgumentException(1946)", "Delete SimpleType: IllegalArgumentException(1947)", "Delete StringLiteral: \"FromKey is out of range: \"(1948)", "Delete SimpleName: fromKey(1949)", "Delete InfixExpression: +(1950)", "Delete ClassInstanceCreation(1951)", "Delete ThrowStatement(1952)", "Delete Block(1953)", "Delete IfStatement(1954)", "Delete SimpleName: inRange2(1955)", "Delete SimpleName: toKey(1956)", "Delete MethodInvocation(1957)", "Delete PrefixExpression: !(1958)", "Delete SimpleName: IllegalArgumentException(1959)", "Delete SimpleType: IllegalArgumentException(1960)", "Delete StringLiteral: \"ToKey is out of range: \"(1961)", "Delete SimpleName: toKey(1962)", "Delete InfixExpression: +(1963)", "Delete ClassInstanceCreation(1964)", "Delete ThrowStatement(1965)", "Delete Block(1966)", "Delete IfStatement(1967)", "Delete SimpleName: createRangeMap(1968)", "Delete SimpleName: fromKey(1969)", "Delete SimpleName: isFromInclusive(1970)", "Delete MethodInvocation(1971)", "Delete SimpleName: toKey(1972)", "Delete SimpleName: isToInclusive(1973)", "Delete MethodInvocation(1974)", "Delete MethodInvocation(1975)", "Delete ReturnStatement(1976)", "Delete Block(1977)", "Delete MethodDeclaration(1978)", "Delete Modifier: public(1979)", "Delete SimpleName: SortedMap(1980)", "Delete SimpleType: SortedMap(1981)", "Delete SimpleName: K(1982)", "Delete SimpleType: K(1983)", "Delete SimpleName: V(1984)", "Delete SimpleType: V(1985)", "Delete ParameterizedType: SortedMap<K,V>(1986)", "Delete SimpleName: headMap(1987)", "Delete Modifier: final(1988)", "Delete SimpleName: K(1989)", "Delete SimpleType: K(1990)", "Delete SimpleName: toKey(1991)", "Delete SingleVariableDeclaration(1992)", "Delete SimpleName: inRange2(1993)", "Delete SimpleName: toKey(1994)", "Delete MethodInvocation(1995)", "Delete PrefixExpression: !(1996)", "Delete SimpleName: IllegalArgumentException(1997)", "Delete SimpleType: IllegalArgumentException(1998)", "Delete StringLiteral: \"ToKey is out of range: \"(1999)", "Delete SimpleName: toKey(2000)", "Delete InfixExpression: +(2001)", "Delete ClassInstanceCreation(2002)", "Delete ThrowStatement(2003)", "Delete Block(2004)", "Delete IfStatement(2005)", "Delete SimpleName: createRangeMap(2006)", "Delete SimpleName: getFromKey(2007)", "Delete MethodInvocation(2008)", "Delete SimpleName: isFromInclusive(2009)", "Delete MethodInvocation(2010)", "Delete SimpleName: toKey(2011)", "Delete SimpleName: isToInclusive(2012)", "Delete MethodInvocation(2013)", "Delete MethodInvocation(2014)", "Delete ReturnStatement(2015)", "Delete Block(2016)", "Delete MethodDeclaration(2017)", "Delete Modifier: public(2018)", "Delete SimpleName: SortedMap(2019)", "Delete SimpleType: SortedMap(2020)", "Delete SimpleName: K(2021)", "Delete SimpleType: K(2022)", "Delete SimpleName: V(2023)", "Delete SimpleType: V(2024)", "Delete ParameterizedType: SortedMap<K,V>(2025)", "Delete SimpleName: tailMap(2026)", "Delete Modifier: final(2027)", "Delete SimpleName: K(2028)", "Delete SimpleType: K(2029)", "Delete SimpleName: fromKey(2030)", "Delete SingleVariableDeclaration(2031)", "Delete SimpleName: inRange2(2032)", "Delete SimpleName: fromKey(2033)", "Delete MethodInvocation(2034)", "Delete PrefixExpression: !(2035)", "Delete SimpleName: IllegalArgumentException(2036)", "Delete SimpleType: IllegalArgumentException(2037)", "Delete StringLiteral: \"FromKey is out of range: \"(2038)", "Delete SimpleName: fromKey(2039)", "Delete InfixExpression: +(2040)", "Delete ClassInstanceCreation(2041)", "Delete ThrowStatement(2042)", "Delete Block(2043)", "Delete IfStatement(2044)", "Delete SimpleName: createRangeMap(2045)", "Delete SimpleName: fromKey(2046)", "Delete SimpleName: isFromInclusive(2047)", "Delete MethodInvocation(2048)", "Delete SimpleName: getToKey(2049)", "Delete MethodInvocation(2050)", "Delete SimpleName: isToInclusive(2051)", "Delete MethodInvocation(2052)", "Delete MethodInvocation(2053)", "Delete ReturnStatement(2054)", "Delete Block(2055)", "Delete MethodDeclaration(2056)", "Delete TextElement: Returns true if the provided key is greater than TO and less than FROM.(2057)", "Delete TagElement(2058)", "Delete Javadoc(2059)", "Delete Modifier: protected(2060)", "Delete PrimitiveType: boolean(2061)", "Delete SimpleName: inRange(2062)", "Delete Modifier: final(2063)", "Delete SimpleName: K(2064)", "Delete SimpleType: K(2065)", "Delete SimpleName: key(2066)", "Delete SingleVariableDeclaration(2067)", "Delete Modifier: final(2068)", "Delete SimpleName: K(2069)", "Delete SimpleType: K(2070)", "Delete SimpleName: fromKey(2071)", "Delete SimpleName: getFromKey(2072)", "Delete MethodInvocation(2073)", "Delete VariableDeclarationFragment(2074)", "Delete VariableDeclarationStatement(2075)", "Delete Modifier: final(2076)", "Delete SimpleName: K(2077)", "Delete SimpleType: K(2078)", "Delete SimpleName: toKey(2079)", "Delete SimpleName: getToKey(2080)", "Delete MethodInvocation(2081)", "Delete VariableDeclarationFragment(2082)", "Delete VariableDeclarationStatement(2083)", "Delete SimpleName: fromKey(2084)", "Delete NullLiteral(2085)", "Delete InfixExpression: ==(2086)", "Delete SimpleName: inFromRange(2087)", "Delete SimpleName: key(2088)", "Delete BooleanLiteral: false(2089)", "Delete MethodInvocation(2090)", "Delete InfixExpression: ||(2091)", "Delete ParenthesizedExpression(2092)", "Delete SimpleName: toKey(2093)", "Delete NullLiteral(2094)", "Delete InfixExpression: ==(2095)", "Delete SimpleName: inToRange(2096)", "Delete SimpleName: key(2097)", "Delete BooleanLiteral: false(2098)", "Delete MethodInvocation(2099)", "Delete InfixExpression: ||(2100)", "Delete ParenthesizedExpression(2101)", "Delete InfixExpression: &&(2102)", "Delete ReturnStatement(2103)", "Delete Block(2104)", "Delete MethodDeclaration(2105)", "Delete TextElement: This form allows the high endpoint (as well as all legit keys).(2106)", "Delete TagElement(2107)", "Delete Javadoc(2108)", "Delete Modifier: protected(2109)", "Delete PrimitiveType: boolean(2110)", "Delete SimpleName: inRange2(2111)", "Delete Modifier: final(2112)", "Delete SimpleName: K(2113)", "Delete SimpleType: K(2114)", "Delete SimpleName: key(2115)", "Delete SingleVariableDeclaration(2116)", "Delete Modifier: final(2117)", "Delete SimpleName: K(2118)", "Delete SimpleType: K(2119)", "Delete SimpleName: fromKey(2120)", "Delete SimpleName: getFromKey(2121)", "Delete MethodInvocation(2122)", "Delete VariableDeclarationFragment(2123)", "Delete VariableDeclarationStatement(2124)", "Delete Modifier: final(2125)", "Delete SimpleName: K(2126)", "Delete SimpleType: K(2127)", "Delete SimpleName: toKey(2128)", "Delete SimpleName: getToKey(2129)", "Delete MethodInvocation(2130)", "Delete VariableDeclarationFragment(2131)", "Delete VariableDeclarationStatement(2132)", "Delete SimpleName: fromKey(2133)", "Delete NullLiteral(2134)", "Delete InfixExpression: ==(2135)", "Delete SimpleName: inFromRange(2136)", "Delete SimpleName: key(2137)", "Delete BooleanLiteral: false(2138)", "Delete MethodInvocation(2139)", "Delete InfixExpression: ||(2140)", "Delete ParenthesizedExpression(2141)", "Delete SimpleName: toKey(2142)", "Delete NullLiteral(2143)", "Delete InfixExpression: ==(2144)", "Delete SimpleName: inToRange(2145)", "Delete SimpleName: key(2146)", "Delete BooleanLiteral: true(2147)", "Delete MethodInvocation(2148)", "Delete InfixExpression: ||(2149)", "Delete ParenthesizedExpression(2150)", "Delete InfixExpression: &&(2151)", "Delete ReturnStatement(2152)", "Delete Block(2153)", "Delete MethodDeclaration(2154)", "Delete TextElement: Returns true if the provided key is in the FROM range of the (2155)", "Delete SimpleName: RangeMap(2156)", "Delete TagElement: @link(2157)", "Delete TextElement: .(2158)", "Delete TagElement(2159)", "Delete Javadoc(2160)", "Delete Modifier: protected(2161)", "Delete PrimitiveType: boolean(2162)", "Delete SimpleName: inFromRange(2163)", "Delete Modifier: final(2164)", "Delete SimpleName: K(2165)", "Delete SimpleType: K(2166)", "Delete SimpleName: key(2167)", "Delete SingleVariableDeclaration(2168)", "Delete Modifier: final(2169)", "Delete PrimitiveType: boolean(2170)", "Delete SimpleName: forceInclusive(2171)", "Delete SingleVariableDeclaration(2172)", "Delete Modifier: final(2173)", "Delete SimpleName: K(2174)", "Delete SimpleType: K(2175)", "Delete SimpleName: fromKey(2176)", "Delete SimpleName: getFromKey(2177)", "Delete MethodInvocation(2178)", "Delete VariableDeclarationFragment(2179)", "Delete VariableDeclarationStatement(2180)", "Delete Modifier: final(2181)", "Delete PrimitiveType: boolean(2182)", "Delete SimpleName: fromInclusive(2183)", "Delete SimpleName: isFromInclusive(2184)", "Delete MethodInvocation(2185)", "Delete VariableDeclarationFragment(2186)", "Delete VariableDeclarationStatement(2187)", "Delete Modifier: final(2188)", "Delete PrimitiveType: int(2189)", "Delete SimpleName: ret(2190)", "Delete SimpleName: keyAnalyzer(2191)", "Delete SimpleName: compare(2192)", "Delete SimpleName: key(2193)", "Delete SimpleName: fromKey(2194)", "Delete MethodInvocation(2195)", "Delete VariableDeclarationFragment(2196)", "Delete VariableDeclarationStatement(2197)", "Delete SimpleName: fromInclusive(2198)", "Delete SimpleName: forceInclusive(2199)", "Delete InfixExpression: ||(2200)", "Delete SimpleName: ret(2201)", "Delete NumberLiteral: 0(2202)", "Delete InfixExpression: >=(2203)", "Delete ReturnStatement(2204)", "Delete Block(2205)", "Delete SimpleName: ret(2206)", "Delete NumberLiteral: 0(2207)", "Delete InfixExpression: >(2208)", "Delete ReturnStatement(2209)", "Delete Block(2210)", "Delete IfStatement(2211)", "Delete Block(2212)", "Delete MethodDeclaration(2213)", "Delete TextElement: Returns true if the provided key is in the TO range of the (2214)", "Delete SimpleName: RangeMap(2215)", "Delete TagElement: @link(2216)", "Delete TextElement: .(2217)", "Delete TagElement(2218)", "Delete Javadoc(2219)", "Delete Modifier: protected(2220)", "Delete PrimitiveType: boolean(2221)", "Delete SimpleName: inToRange(2222)", "Delete Modifier: final(2223)", "Delete SimpleName: K(2224)", "Delete SimpleType: K(2225)", "Delete SimpleName: key(2226)", "Delete SingleVariableDeclaration(2227)", "Delete Modifier: final(2228)", "Delete PrimitiveType: boolean(2229)", "Delete SimpleName: forceInclusive(2230)", "Delete SingleVariableDeclaration(2231)", "Delete Modifier: final(2232)", "Delete SimpleName: K(2233)", "Delete SimpleType: K(2234)", "Delete SimpleName: toKey(2235)", "Delete SimpleName: getToKey(2236)", "Delete MethodInvocation(2237)", "Delete VariableDeclarationFragment(2238)", "Delete VariableDeclarationStatement(2239)", "Delete Modifier: final(2240)", "Delete PrimitiveType: boolean(2241)", "Delete SimpleName: toInclusive(2242)", "Delete SimpleName: isToInclusive(2243)", "Delete MethodInvocation(2244)", "Delete VariableDeclarationFragment(2245)", "Delete VariableDeclarationStatement(2246)", "Delete Modifier: final(2247)", "Delete PrimitiveType: int(2248)", "Delete SimpleName: ret(2249)", "Delete SimpleName: keyAnalyzer(2250)", "Delete SimpleName: compare(2251)", "Delete SimpleName: key(2252)", "Delete SimpleName: toKey(2253)", "Delete MethodInvocation(2254)", "Delete VariableDeclarationFragment(2255)", "Delete VariableDeclarationStatement(2256)", "Delete SimpleName: toInclusive(2257)", "Delete SimpleName: forceInclusive(2258)", "Delete InfixExpression: ||(2259)", "Delete SimpleName: ret(2260)", "Delete NumberLiteral: 0(2261)", "Delete InfixExpression: <=(2262)", "Delete ReturnStatement(2263)", "Delete Block(2264)", "Delete SimpleName: ret(2265)", "Delete NumberLiteral: 0(2266)", "Delete InfixExpression: <(2267)", "Delete ReturnStatement(2268)", "Delete Block(2269)", "Delete IfStatement(2270)", "Delete Block(2271)", "Delete MethodDeclaration(2272)", "Delete TextElement: Creates and returns a sub-range view of the current (2273)", "Delete SimpleName: RangeMap(2274)", "Delete TagElement: @link(2275)", "Delete TextElement: .(2276)", "Delete TagElement(2277)", "Delete Javadoc(2278)", "Delete Modifier: protected(2279)", "Delete Modifier: abstract(2280)", "Delete SimpleName: SortedMap(2281)", "Delete SimpleType: SortedMap(2282)", "Delete SimpleName: K(2283)", "Delete SimpleType: K(2284)", "Delete SimpleName: V(2285)", "Delete SimpleType: V(2286)", "Delete ParameterizedType: SortedMap<K,V>(2287)", "Delete SimpleName: createRangeMap(2288)", "Delete SimpleName: K(2289)", "Delete SimpleType: K(2290)", "Delete SimpleName: fromKey(2291)", "Delete SingleVariableDeclaration(2292)", "Delete PrimitiveType: boolean(2293)", "Delete SimpleName: fromInclusive(2294)", "Delete SingleVariableDeclaration(2295)", "Delete SimpleName: K(2296)", "Delete SimpleType: K(2297)", "Delete SimpleName: toKey(2298)", "Delete SingleVariableDeclaration(2299)", "Delete PrimitiveType: boolean(2300)", "Delete SimpleName: toInclusive(2301)", "Delete SingleVariableDeclaration(2302)", "Delete MethodDeclaration(2303)", "Delete TypeDeclaration: class(2304)", "Delete TextElement: A (2305)", "Delete SimpleName: RangeMap(2306)", "Delete TagElement: @link(2307)", "Delete TextElement:  that deals with (2308)", "Delete SimpleName: Entry(2309)", "Delete TagElement: @link(2310)", "Delete TextElement: s.(2311)", "Delete TagElement(2312)", "Delete Javadoc(2313)", "Delete Modifier: private(2314)", "Delete SimpleName: RangeEntryMap(2315)", "Delete SimpleName: RangeMap(2316)", "Delete SimpleType: RangeMap(2317)", "Delete TextElement: The key to start from, null if the beginning. (2318)", "Delete TagElement(2319)", "Delete Javadoc(2320)", "Delete Modifier: private(2321)", "Delete Modifier: final(2322)", "Delete SimpleName: K(2323)", "Delete SimpleType: K(2324)", "Delete SimpleName: fromKey(2325)", "Delete VariableDeclarationFragment(2326)", "Delete FieldDeclaration(2327)", "Delete TextElement: The key to end at, null if till the end. (2328)", "Delete TagElement(2329)", "Delete Javadoc(2330)", "Delete Modifier: private(2331)", "Delete Modifier: final(2332)", "Delete SimpleName: K(2333)", "Delete SimpleType: K(2334)", "Delete SimpleName: toKey(2335)", "Delete VariableDeclarationFragment(2336)", "Delete FieldDeclaration(2337)", "Delete TextElement: Whether or not the 'from' is inclusive. (2338)", "Delete TagElement(2339)", "Delete Javadoc(2340)", "Delete Modifier: private(2341)", "Delete Modifier: final(2342)", "Delete PrimitiveType: boolean(2343)", "Delete SimpleName: fromInclusive(2344)", "Delete VariableDeclarationFragment(2345)", "Delete FieldDeclaration(2346)", "Delete TextElement: Whether or not the 'to' is inclusive. (2347)", "Delete TagElement(2348)", "Delete Javadoc(2349)", "Delete Modifier: private(2350)", "Delete Modifier: final(2351)", "Delete PrimitiveType: boolean(2352)", "Delete SimpleName: toInclusive(2353)", "Delete VariableDeclarationFragment(2354)", "Delete FieldDeclaration(2355)", "Delete TextElement: Creates a (2356)", "Delete SimpleName: RangeEntryMap(2357)", "Delete TagElement: @link(2358)", "Delete TextElement:  with the fromKey included and(2359)", "Delete TextElement: the toKey excluded from the range.(2360)", "Delete TagElement(2361)", "Delete Javadoc(2362)", "Delete Modifier: protected(2363)", "Delete SimpleName: RangeEntryMap(2364)", "Delete Modifier: final(2365)", "Delete SimpleName: K(2366)", "Delete SimpleType: K(2367)", "Delete SimpleName: fromKey(2368)", "Delete SingleVariableDeclaration(2369)", "Delete Modifier: final(2370)", "Delete SimpleName: K(2371)", "Delete SimpleType: K(2372)", "Delete SimpleName: toKey(2373)", "Delete SingleVariableDeclaration(2374)", "Delete SimpleName: fromKey(2375)", "Delete BooleanLiteral: true(2376)", "Delete SimpleName: toKey(2377)", "Delete BooleanLiteral: false(2378)", "Delete ConstructorInvocation(2379)", "Delete Block(2380)", "Delete MethodDeclaration(2381)", "Delete TextElement: Creates a (2382)", "Delete SimpleName: RangeEntryMap(2383)", "Delete TagElement: @link(2384)", "Delete TextElement: .(2385)", "Delete TagElement(2386)", "Delete Javadoc(2387)", "Delete Modifier: protected(2388)", "Delete SimpleName: RangeEntryMap(2389)", "Delete Modifier: final(2390)", "Delete SimpleName: K(2391)", "Delete SimpleType: K(2392)", "Delete SimpleName: fromKey(2393)", "Delete SingleVariableDeclaration(2394)", "Delete Modifier: final(2395)", "Delete PrimitiveType: boolean(2396)", "Delete SimpleName: fromInclusive(2397)", "Delete SingleVariableDeclaration(2398)", "Delete Modifier: final(2399)", "Delete SimpleName: K(2400)", "Delete SimpleType: K(2401)", "Delete SimpleName: toKey(2402)", "Delete SingleVariableDeclaration(2403)", "Delete Modifier: final(2404)", "Delete PrimitiveType: boolean(2405)", "Delete SimpleName: toInclusive(2406)", "Delete SingleVariableDeclaration(2407)", "Delete SimpleName: fromKey(2408)", "Delete NullLiteral(2409)", "Delete InfixExpression: ==(2410)", "Delete SimpleName: toKey(2411)", "Delete NullLiteral(2412)", "Delete InfixExpression: ==(2413)", "Delete InfixExpression: &&(2414)", "Delete SimpleName: IllegalArgumentException(2415)", "Delete SimpleType: IllegalArgumentException(2416)", "Delete StringLiteral: \"must have a from or to!\"(2417)", "Delete ClassInstanceCreation(2418)", "Delete ThrowStatement(2419)", "Delete Block(2420)", "Delete IfStatement(2421)", "Delete SimpleName: fromKey(2422)", "Delete NullLiteral(2423)", "Delete InfixExpression: !=(2424)", "Delete SimpleName: toKey(2425)", "Delete NullLiteral(2426)", "Delete InfixExpression: !=(2427)", "Delete InfixExpression: &&(2428)", "Delete SimpleName: keyAnalyzer(2429)", "Delete SimpleName: compare(2430)", "Delete SimpleName: fromKey(2431)", "Delete SimpleName: toKey(2432)", "Delete MethodInvocation(2433)", "Delete NumberLiteral: 0(2434)", "Delete InfixExpression: >(2435)", "Delete InfixExpression: &&(2436)", "Delete SimpleName: IllegalArgumentException(2437)", "Delete SimpleType: IllegalArgumentException(2438)", "Delete StringLiteral: \"fromKey > toKey\"(2439)", "Delete ClassInstanceCreation(2440)", "Delete ThrowStatement(2441)", "Delete Block(2442)", "Delete IfStatement(2443)", "Delete ThisExpression(2444)", "Delete SimpleName: fromKey(2445)", "Delete FieldAccess(2446)", "Delete SimpleName: fromKey(2447)", "Delete Assignment: =(2448)", "Delete ExpressionStatement(2449)", "Delete ThisExpression(2450)", "Delete SimpleName: fromInclusive(2451)", "Delete FieldAccess(2452)", "Delete SimpleName: fromInclusive(2453)", "Delete Assignment: =(2454)", "Delete ExpressionStatement(2455)", "Delete ThisExpression(2456)", "Delete SimpleName: toKey(2457)", "Delete FieldAccess(2458)", "Delete SimpleName: toKey(2459)", "Delete Assignment: =(2460)", "Delete ExpressionStatement(2461)", "Delete ThisExpression(2462)", "Delete SimpleName: toInclusive(2463)", "Delete FieldAccess(2464)", "Delete SimpleName: toInclusive(2465)", "Delete Assignment: =(2466)", "Delete ExpressionStatement(2467)", "Delete Block(2468)", "Delete MethodDeclaration(2469)", "Delete Modifier: public(2470)", "Delete SimpleName: K(2471)", "Delete SimpleType: K(2472)", "Delete SimpleName: firstKey(2473)", "Delete QualifiedName: Map.Entry(2474)", "Delete SimpleType: Map.Entry(2475)", "Delete SimpleName: K(2476)", "Delete SimpleType: K(2477)", "Delete SimpleName: V(2478)", "Delete SimpleType: V(2479)", "Delete ParameterizedType: Map.Entry<K,V>(2480)", "Delete SimpleName: e(2481)", "Delete NullLiteral(2482)", "Delete VariableDeclarationFragment(2483)", "Delete VariableDeclarationStatement(2484)", "Delete SimpleName: fromKey(2485)", "Delete NullLiteral(2486)", "Delete InfixExpression: ==(2487)", "Delete SimpleName: e(2488)", "Delete SimpleName: firstEntry(2489)", "Delete MethodInvocation(2490)", "Delete Assignment: =(2491)", "Delete ExpressionStatement(2492)", "Delete Block(2493)", "Delete SimpleName: fromInclusive(2494)", "Delete SimpleName: e(2495)", "Delete SimpleName: ceilingEntry(2496)", "Delete SimpleName: fromKey(2497)", "Delete MethodInvocation(2498)", "Delete Assignment: =(2499)", "Delete ExpressionStatement(2500)", "Delete Block(2501)", "Delete SimpleName: e(2502)", "Delete SimpleName: higherEntry(2503)", "Delete SimpleName: fromKey(2504)", "Delete MethodInvocation(2505)", "Delete Assignment: =(2506)", "Delete ExpressionStatement(2507)", "Delete Block(2508)", "Delete IfStatement(2509)", "Delete Block(2510)", "Delete IfStatement(2511)", "Delete Modifier: final(2512)", "Delete SimpleName: K(2513)", "Delete SimpleType: K(2514)", "Delete SimpleName: first(2515)", "Delete SimpleName: e(2516)", "Delete NullLiteral(2517)", "Delete InfixExpression: !=(2518)", "Delete SimpleName: e(2519)", "Delete SimpleName: getKey(2520)", "Delete MethodInvocation(2521)", "Delete NullLiteral(2522)", "Delete ConditionalExpression(2523)", "Delete VariableDeclarationFragment(2524)", "Delete VariableDeclarationStatement(2525)", "Delete SimpleName: e(2526)", "Delete NullLiteral(2527)", "Delete InfixExpression: ==(2528)", "Delete SimpleName: toKey(2529)", "Delete NullLiteral(2530)", "Delete InfixExpression: !=(2531)", "Delete SimpleName: inToRange(2532)", "Delete SimpleName: first(2533)", "Delete BooleanLiteral: false(2534)", "Delete MethodInvocation(2535)", "Delete PrefixExpression: !(2536)", "Delete InfixExpression: &&(2537)", "Delete InfixExpression: ||(2538)", "Delete SimpleName: NoSuchElementException(2539)", "Delete SimpleType: NoSuchElementException(2540)", "Delete ClassInstanceCreation(2541)", "Delete ThrowStatement(2542)", "Delete Block(2543)", "Delete IfStatement(2544)", "Delete SimpleName: first(2545)", "Delete ReturnStatement(2546)", "Delete Block(2547)", "Delete MethodDeclaration(2548)", "Delete Modifier: public(2549)", "Delete SimpleName: K(2550)", "Delete SimpleType: K(2551)", "Delete SimpleName: lastKey(2552)", "Delete QualifiedName: Map.Entry(2553)", "Delete SimpleType: Map.Entry(2554)", "Delete SimpleName: K(2555)", "Delete SimpleType: K(2556)", "Delete SimpleName: V(2557)", "Delete SimpleType: V(2558)", "Delete ParameterizedType: Map.Entry<K,V>(2559)", "Delete SimpleName: e(2560)", "Delete VariableDeclarationFragment(2561)", "Delete VariableDeclarationStatement(2562)", "Delete SimpleName: toKey(2563)", "Delete NullLiteral(2564)", "Delete InfixExpression: ==(2565)", "Delete SimpleName: e(2566)", "Delete SimpleName: lastEntry(2567)", "Delete MethodInvocation(2568)", "Delete Assignment: =(2569)", "Delete ExpressionStatement(2570)", "Delete Block(2571)", "Delete SimpleName: toInclusive(2572)", "Delete SimpleName: e(2573)", "Delete SimpleName: floorEntry(2574)", "Delete SimpleName: toKey(2575)", "Delete MethodInvocation(2576)", "Delete Assignment: =(2577)", "Delete ExpressionStatement(2578)", "Delete Block(2579)", "Delete SimpleName: e(2580)", "Delete SimpleName: lowerEntry(2581)", "Delete SimpleName: toKey(2582)", "Delete MethodInvocation(2583)", "Delete Assignment: =(2584)", "Delete ExpressionStatement(2585)", "Delete Block(2586)", "Delete IfStatement(2587)", "Delete Block(2588)", "Delete IfStatement(2589)", "Delete Modifier: final(2590)", "Delete SimpleName: K(2591)", "Delete SimpleType: K(2592)", "Delete SimpleName: last(2593)", "Delete SimpleName: e(2594)", "Delete NullLiteral(2595)", "Delete InfixExpression: !=(2596)", "Delete SimpleName: e(2597)", "Delete SimpleName: getKey(2598)", "Delete MethodInvocation(2599)", "Delete NullLiteral(2600)", "Delete ConditionalExpression(2601)", "Delete VariableDeclarationFragment(2602)", "Delete VariableDeclarationStatement(2603)", "Delete SimpleName: e(2604)", "Delete NullLiteral(2605)", "Delete InfixExpression: ==(2606)", "Delete SimpleName: fromKey(2607)", "Delete NullLiteral(2608)", "Delete InfixExpression: !=(2609)", "Delete SimpleName: inFromRange(2610)", "Delete SimpleName: last(2611)", "Delete BooleanLiteral: false(2612)", "Delete MethodInvocation(2613)", "Delete PrefixExpression: !(2614)", "Delete InfixExpression: &&(2615)", "Delete InfixExpression: ||(2616)", "Delete SimpleName: NoSuchElementException(2617)", "Delete SimpleType: NoSuchElementException(2618)", "Delete ClassInstanceCreation(2619)", "Delete ThrowStatement(2620)", "Delete Block(2621)", "Delete IfStatement(2622)", "Delete SimpleName: last(2623)", "Delete ReturnStatement(2624)", "Delete Block(2625)", "Delete MethodDeclaration(2626)", "Delete SimpleName: Override(2627)", "Delete MarkerAnnotation(2628)", "Delete Modifier: protected(2629)", "Delete SimpleName: Set(2630)", "Delete SimpleType: Set(2631)", "Delete SimpleName: Entry(2632)", "Delete SimpleType: Entry(2633)", "Delete SimpleName: K(2634)", "Delete SimpleType: K(2635)", "Delete SimpleName: V(2636)", "Delete SimpleType: V(2637)", "Delete ParameterizedType: Entry<K,V>(2638)", "Delete ParameterizedType: Set<Entry<K,V>>(2639)", "Delete SimpleName: createEntrySet(2640)", "Delete SimpleName: RangeEntrySet(2641)", "Delete SimpleType: RangeEntrySet(2642)", "Delete ThisExpression(2643)", "Delete ClassInstanceCreation(2644)", "Delete ReturnStatement(2645)", "Delete Block(2646)", "Delete MethodDeclaration(2647)", "Delete SimpleName: Override(2648)", "Delete MarkerAnnotation(2649)", "Delete Modifier: public(2650)", "Delete SimpleName: K(2651)", "Delete SimpleType: K(2652)", "Delete SimpleName: getFromKey(2653)", "Delete SimpleName: fromKey(2654)", "Delete ReturnStatement(2655)", "Delete Block(2656)", "Delete MethodDeclaration(2657)", "Delete SimpleName: Override(2658)", "Delete MarkerAnnotation(2659)", "Delete Modifier: public(2660)", "Delete SimpleName: K(2661)", "Delete SimpleType: K(2662)", "Delete SimpleName: getToKey(2663)", "Delete SimpleName: toKey(2664)", "Delete ReturnStatement(2665)", "Delete Block(2666)", "Delete MethodDeclaration(2667)", "Delete SimpleName: Override(2668)", "Delete MarkerAnnotation(2669)", "Delete Modifier: public(2670)", "Delete PrimitiveType: boolean(2671)", "Delete SimpleName: isFromInclusive(2672)", "Delete SimpleName: fromInclusive(2673)", "Delete ReturnStatement(2674)", "Delete Block(2675)", "Delete MethodDeclaration(2676)", "Delete SimpleName: Override(2677)", "Delete MarkerAnnotation(2678)", "Delete Modifier: public(2679)", "Delete PrimitiveType: boolean(2680)", "Delete SimpleName: isToInclusive(2681)", "Delete SimpleName: toInclusive(2682)", "Delete ReturnStatement(2683)", "Delete Block(2684)", "Delete MethodDeclaration(2685)", "Delete SimpleName: Override(2686)", "Delete MarkerAnnotation(2687)", "Delete Modifier: protected(2688)", "Delete SimpleName: SortedMap(2689)", "Delete SimpleType: SortedMap(2690)", "Delete SimpleName: K(2691)", "Delete SimpleType: K(2692)", "Delete SimpleName: V(2693)", "Delete SimpleType: V(2694)", "Delete ParameterizedType: SortedMap<K,V>(2695)", "Delete SimpleName: createRangeMap(2696)", "Delete Modifier: final(2697)", "Delete SimpleName: K(2698)", "Delete SimpleType: K(2699)", "Delete SimpleName: fromKey(2700)", "Delete SingleVariableDeclaration(2701)", "Delete Modifier: final(2702)", "Delete PrimitiveType: boolean(2703)", "Delete SimpleName: fromInclusive(2704)", "Delete SingleVariableDeclaration(2705)", "Delete Modifier: final(2706)", "Delete SimpleName: K(2707)", "Delete SimpleType: K(2708)", "Delete SimpleName: toKey(2709)", "Delete SingleVariableDeclaration(2710)", "Delete Modifier: final(2711)", "Delete PrimitiveType: boolean(2712)", "Delete SimpleName: toInclusive(2713)", "Delete SingleVariableDeclaration(2714)", "Delete SimpleName: RangeEntryMap(2715)", "Delete SimpleType: RangeEntryMap(2716)", "Delete SimpleName: fromKey(2717)", "Delete SimpleName: fromInclusive(2718)", "Delete SimpleName: toKey(2719)", "Delete SimpleName: toInclusive(2720)", "Delete ClassInstanceCreation(2721)", "Delete ReturnStatement(2722)", "Delete Block(2723)", "Delete MethodDeclaration(2724)", "Delete TypeDeclaration: class(2725)", "Delete TextElement: A (2726)", "Delete SimpleName: Set(2727)", "Delete TagElement: @link(2728)", "Delete TextElement:  view of a (2729)", "Delete SimpleName: RangeMap(2730)", "Delete TagElement: @link(2731)", "Delete TextElement: .(2732)", "Delete TagElement(2733)", "Delete Javadoc(2734)", "Delete Modifier: private(2735)", "Delete SimpleName: RangeEntrySet(2736)", "Delete SimpleName: AbstractSet(2737)", "Delete SimpleType: AbstractSet(2738)", "Delete QualifiedName: Map.Entry(2739)", "Delete SimpleType: Map.Entry(2740)", "Delete SimpleName: K(2741)", "Delete SimpleType: K(2742)", "Delete SimpleName: V(2743)", "Delete SimpleType: V(2744)", "Delete ParameterizedType: Map.Entry<K,V>(2745)", "Delete ParameterizedType: AbstractSet<Map.Entry<K,V>>(2746)", "Delete Modifier: private(2747)", "Delete Modifier: final(2748)", "Delete SimpleName: RangeMap(2749)", "Delete SimpleType: RangeMap(2750)", "Delete SimpleName: delegate(2751)", "Delete VariableDeclarationFragment(2752)", "Delete FieldDeclaration(2753)", "Delete Modifier: private(2754)", "Delete Modifier: transient(2755)", "Delete PrimitiveType: int(2756)", "Delete SimpleName: size(2757)", "Delete NumberLiteral: 1(2758)", "Delete PrefixExpression: -(2759)", "Delete VariableDeclarationFragment(2760)", "Delete FieldDeclaration(2761)", "Delete Modifier: private(2762)", "Delete Modifier: transient(2763)", "Delete PrimitiveType: int(2764)", "Delete SimpleName: expectedModCount(2765)", "Delete VariableDeclarationFragment(2766)", "Delete FieldDeclaration(2767)", "Delete TextElement: Creates a (2768)", "Delete SimpleName: RangeEntrySet(2769)", "Delete TagElement: @link(2770)", "Delete TextElement: .(2771)", "Delete TagElement(2772)", "Delete Javadoc(2773)", "Delete Modifier: public(2774)", "Delete SimpleName: RangeEntrySet(2775)", "Delete Modifier: final(2776)", "Delete SimpleName: RangeMap(2777)", "Delete SimpleType: RangeMap(2778)", "Delete SimpleName: delegate(2779)", "Delete SingleVariableDeclaration(2780)", "Delete SimpleName: delegate(2781)", "Delete NullLiteral(2782)", "Delete InfixExpression: ==(2783)", "Delete SimpleName: NullPointerException(2784)", "Delete SimpleType: NullPointerException(2785)", "Delete StringLiteral: \"delegate\"(2786)", "Delete ClassInstanceCreation(2787)", "Delete ThrowStatement(2788)", "Delete Block(2789)", "Delete IfStatement(2790)", "Delete ThisExpression(2791)", "Delete SimpleName: delegate(2792)", "Delete FieldAccess(2793)", "Delete SimpleName: delegate(2794)", "Delete Assignment: =(2795)", "Delete ExpressionStatement(2796)", "Delete Block(2797)", "Delete MethodDeclaration(2798)", "Delete SimpleName: Override(2799)", "Delete MarkerAnnotation(2800)", "Delete Modifier: public(2801)", "Delete SimpleName: Iterator(2802)", "Delete SimpleType: Iterator(2803)", "Delete QualifiedName: Map.Entry(2804)", "Delete SimpleType: Map.Entry(2805)", "Delete SimpleName: K(2806)", "Delete SimpleType: K(2807)", "Delete SimpleName: V(2808)", "Delete SimpleType: V(2809)", "Delete ParameterizedType: Map.Entry<K,V>(2810)", "Delete ParameterizedType: Iterator<Map.Entry<K,V>>(2811)", "Delete SimpleName: iterator(2812)", "Delete Modifier: final(2813)", "Delete SimpleName: K(2814)", "Delete SimpleType: K(2815)", "Delete SimpleName: fromKey(2816)", "Delete SimpleName: delegate(2817)", "Delete SimpleName: getFromKey(2818)", "Delete MethodInvocation(2819)", "Delete VariableDeclarationFragment(2820)", "Delete VariableDeclarationStatement(2821)", "Delete Modifier: final(2822)", "Delete SimpleName: K(2823)", "Delete SimpleType: K(2824)", "Delete SimpleName: toKey(2825)", "Delete SimpleName: delegate(2826)", "Delete SimpleName: getToKey(2827)", "Delete MethodInvocation(2828)", "Delete VariableDeclarationFragment(2829)", "Delete VariableDeclarationStatement(2830)", "Delete SimpleName: TrieEntry(2831)", "Delete SimpleType: TrieEntry(2832)", "Delete SimpleName: K(2833)", "Delete SimpleType: K(2834)", "Delete SimpleName: V(2835)", "Delete SimpleType: V(2836)", "Delete ParameterizedType: TrieEntry<K,V>(2837)", "Delete SimpleName: first(2838)", "Delete NullLiteral(2839)", "Delete VariableDeclarationFragment(2840)", "Delete VariableDeclarationStatement(2841)", "Delete SimpleName: fromKey(2842)", "Delete NullLiteral(2843)", "Delete InfixExpression: ==(2844)", "Delete SimpleName: first(2845)", "Delete SimpleName: firstEntry(2846)", "Delete MethodInvocation(2847)", "Delete Assignment: =(2848)", "Delete ExpressionStatement(2849)", "Delete Block(2850)", "Delete SimpleName: first(2851)", "Delete SimpleName: ceilingEntry(2852)", "Delete SimpleName: fromKey(2853)", "Delete MethodInvocation(2854)", "Delete Assignment: =(2855)", "Delete ExpressionStatement(2856)", "Delete Block(2857)", "Delete IfStatement(2858)", "Delete SimpleName: TrieEntry(2859)", "Delete SimpleType: TrieEntry(2860)", "Delete SimpleName: K(2861)", "Delete SimpleType: K(2862)", "Delete SimpleName: V(2863)", "Delete SimpleType: V(2864)", "Delete ParameterizedType: TrieEntry<K,V>(2865)", "Delete SimpleName: last(2866)", "Delete NullLiteral(2867)", "Delete VariableDeclarationFragment(2868)", "Delete VariableDeclarationStatement(2869)", "Delete SimpleName: toKey(2870)", "Delete NullLiteral(2871)", "Delete InfixExpression: !=(2872)", "Delete SimpleName: last(2873)", "Delete SimpleName: ceilingEntry(2874)", "Delete SimpleName: toKey(2875)", "Delete MethodInvocation(2876)", "Delete Assignment: =(2877)", "Delete ExpressionStatement(2878)", "Delete Block(2879)", "Delete IfStatement(2880)", "Delete SimpleName: EntryIterator(2881)", "Delete SimpleType: EntryIterator(2882)", "Delete SimpleName: first(2883)", "Delete SimpleName: last(2884)", "Delete ClassInstanceCreation(2885)", "Delete ReturnStatement(2886)", "Delete Block(2887)", "Delete MethodDeclaration(2888)", "Delete SimpleName: Override(2889)", "Delete MarkerAnnotation(2890)", "Delete Modifier: public(2891)", "Delete PrimitiveType: int(2892)", "Delete SimpleName: size(2893)", "Delete SimpleName: size(2894)", "Delete NumberLiteral: 1(2895)", "Delete PrefixExpression: -(2896)", "Delete InfixExpression: ==(2897)", "Delete SimpleName: expectedModCount(2898)", "Delete SimpleName: PatriciaTrie(2899)", "Delete ThisExpression(2900)", "Delete SimpleName: modCount(2901)", "Delete FieldAccess(2902)", "Delete InfixExpression: !=(2903)", "Delete InfixExpression: ||(2904)", "Delete SimpleName: size(2905)", "Delete NumberLiteral: 0(2906)", "Delete Assignment: =(2907)", "Delete ExpressionStatement(2908)", "Delete Modifier: final(2909)", "Delete SimpleName: Iterator(2910)", "Delete SimpleType: Iterator(2911)", "Delete WildcardType: ?(2912)", "Delete ParameterizedType: Iterator<?>(2913)", "Delete SimpleName: it(2914)", "Delete SimpleName: iterator(2915)", "Delete MethodInvocation(2916)", "Delete VariableDeclarationFragment(2917)", "Delete VariableDeclarationExpression(2918)", "Delete SimpleName: it(2919)", "Delete SimpleName: hasNext(2920)", "Delete MethodInvocation(2921)", "Delete SimpleName: it(2922)", "Delete SimpleName: next(2923)", "Delete MethodInvocation(2924)", "Delete SimpleName: size(2925)", "Delete PrefixExpression: ++(2926)", "Delete ExpressionStatement(2927)", "Delete Block(2928)", "Delete ForStatement(2929)", "Delete SimpleName: expectedModCount(2930)", "Delete SimpleName: PatriciaTrie(2931)", "Delete ThisExpression(2932)", "Delete SimpleName: modCount(2933)", "Delete FieldAccess(2934)", "Delete Assignment: =(2935)", "Delete ExpressionStatement(2936)", "Delete Block(2937)", "Delete IfStatement(2938)", "Delete SimpleName: size(2939)", "Delete ReturnStatement(2940)", "Delete Block(2941)", "Delete MethodDeclaration(2942)", "Delete SimpleName: Override(2943)", "Delete MarkerAnnotation(2944)", "Delete Modifier: public(2945)", "Delete PrimitiveType: boolean(2946)", "Delete SimpleName: isEmpty(2947)", "Delete SimpleName: iterator(2948)", "Delete MethodInvocation(2949)", "Delete SimpleName: hasNext(2950)", "Delete MethodInvocation(2951)", "Delete PrefixExpression: !(2952)", "Delete ReturnStatement(2953)", "Delete Block(2954)", "Delete MethodDeclaration(2955)", "Delete SimpleName: SuppressWarnings(2956)", "Delete StringLiteral: \"unchecked\"(2957)", "Delete SingleMemberAnnotation(2958)", "Delete SimpleName: Override(2959)", "Delete MarkerAnnotation(2960)", "Delete Modifier: public(2961)", "Delete PrimitiveType: boolean(2962)", "Delete SimpleName: contains(2963)", "Delete Modifier: final(2964)", "Delete SimpleName: Object(2965)", "Delete SimpleType: Object(2966)", "Delete SimpleName: o(2967)", "Delete SingleVariableDeclaration(2968)", "Delete SimpleName: o(2969)", "Delete QualifiedName: Map.Entry(2970)", "Delete SimpleType: Map.Entry(2971)", "Delete InstanceofExpression(2972)", "Delete ParenthesizedExpression(2973)", "Delete PrefixExpression: !(2974)", "Delete BooleanLiteral: false(2975)", "Delete ReturnStatement(2976)", "Delete Block(2977)", "Delete IfStatement(2978)", "Delete Modifier: final(2979)", "Delete QualifiedName: Map.Entry(2980)", "Delete SimpleType: Map.Entry(2981)", "Delete SimpleName: K(2982)", "Delete SimpleType: K(2983)", "Delete SimpleName: V(2984)", "Delete SimpleType: V(2985)", "Delete ParameterizedType: Map.Entry<K,V>(2986)", "Delete SimpleName: entry(2987)", "Delete QualifiedName: Map.Entry(2988)", "Delete SimpleType: Map.Entry(2989)", "Delete SimpleName: K(2990)", "Delete SimpleType: K(2991)", "Delete SimpleName: V(2992)", "Delete SimpleType: V(2993)", "Delete ParameterizedType: Map.Entry<K,V>(2994)", "Delete SimpleName: o(2995)", "Delete CastExpression(2996)", "Delete VariableDeclarationFragment(2997)", "Delete VariableDeclarationStatement(2998)", "Delete Modifier: final(2999)", "Delete SimpleName: K(3000)", "Delete SimpleType: K(3001)", "Delete SimpleName: key(3002)", "Delete SimpleName: entry(3003)", "Delete SimpleName: getKey(3004)", "Delete MethodInvocation(3005)", "Delete VariableDeclarationFragment(3006)", "Delete VariableDeclarationStatement(3007)", "Delete SimpleName: delegate(3008)", "Delete SimpleName: inRange(3009)", "Delete SimpleName: key(3010)", "Delete MethodInvocation(3011)", "Delete PrefixExpression: !(3012)", "Delete BooleanLiteral: false(3013)", "Delete ReturnStatement(3014)", "Delete Block(3015)", "Delete IfStatement(3016)", "Delete Modifier: final(3017)", "Delete SimpleName: TrieEntry(3018)", "Delete SimpleType: TrieEntry(3019)", "Delete SimpleName: K(3020)", "Delete SimpleType: K(3021)", "Delete SimpleName: V(3022)", "Delete SimpleType: V(3023)", "Delete ParameterizedType: TrieEntry<K,V>(3024)", "Delete SimpleName: node(3025)", "Delete SimpleName: getEntry(3026)", "Delete SimpleName: key(3027)", "Delete MethodInvocation(3028)", "Delete VariableDeclarationFragment(3029)", "Delete VariableDeclarationStatement(3030)", "Delete SimpleName: node(3031)", "Delete NullLiteral(3032)", "Delete InfixExpression: !=(3033)", "Delete SimpleName: compare(3034)", "Delete SimpleName: node(3035)", "Delete SimpleName: getValue(3036)", "Delete MethodInvocation(3037)", "Delete SimpleName: entry(3038)", "Delete SimpleName: getValue(3039)", "Delete MethodInvocation(3040)", "Delete MethodInvocation(3041)", "Delete InfixExpression: &&(3042)", "Delete ReturnStatement(3043)", "Delete Block(3044)", "Delete MethodDeclaration(3045)", "Delete SimpleName: SuppressWarnings(3046)", "Delete StringLiteral: \"unchecked\"(3047)", "Delete SingleMemberAnnotation(3048)", "Delete SimpleName: Override(3049)", "Delete MarkerAnnotation(3050)", "Delete Modifier: public(3051)", "Delete PrimitiveType: boolean(3052)", "Delete SimpleName: remove(3053)", "Delete Modifier: final(3054)", "Delete SimpleName: Object(3055)", "Delete SimpleType: Object(3056)", "Delete SimpleName: o(3057)", "Delete SingleVariableDeclaration(3058)", "Delete SimpleName: o(3059)", "Delete QualifiedName: Map.Entry(3060)", "Delete SimpleType: Map.Entry(3061)", "Delete InstanceofExpression(3062)", "Delete ParenthesizedExpression(3063)", "Delete PrefixExpression: !(3064)", "Delete BooleanLiteral: false(3065)", "Delete ReturnStatement(3066)", "Delete Block(3067)", "Delete IfStatement(3068)", "Delete Modifier: final(3069)", "Delete QualifiedName: Map.Entry(3070)", "Delete SimpleType: Map.Entry(3071)", "Delete SimpleName: K(3072)", "Delete SimpleType: K(3073)", "Delete SimpleName: V(3074)", "Delete SimpleType: V(3075)", "Delete ParameterizedType: Map.Entry<K,V>(3076)", "Delete SimpleName: entry(3077)", "Delete QualifiedName: Map.Entry(3078)", "Delete SimpleType: Map.Entry(3079)", "Delete SimpleName: K(3080)", "Delete SimpleType: K(3081)", "Delete SimpleName: V(3082)", "Delete SimpleType: V(3083)", "Delete ParameterizedType: Map.Entry<K,V>(3084)", "Delete SimpleName: o(3085)", "Delete CastExpression(3086)", "Delete VariableDeclarationFragment(3087)", "Delete VariableDeclarationStatement(3088)", "Delete Modifier: final(3089)", "Delete SimpleName: K(3090)", "Delete SimpleType: K(3091)", "Delete SimpleName: key(3092)", "Delete SimpleName: entry(3093)", "Delete SimpleName: getKey(3094)", "Delete MethodInvocation(3095)", "Delete VariableDeclarationFragment(3096)", "Delete VariableDeclarationStatement(3097)", "Delete SimpleName: delegate(3098)", "Delete SimpleName: inRange(3099)", "Delete SimpleName: key(3100)", "Delete MethodInvocation(3101)", "Delete PrefixExpression: !(3102)", "Delete BooleanLiteral: false(3103)", "Delete ReturnStatement(3104)", "Delete Block(3105)", "Delete IfStatement(3106)", "Delete Modifier: final(3107)", "Delete SimpleName: TrieEntry(3108)", "Delete SimpleType: TrieEntry(3109)", "Delete SimpleName: K(3110)", "Delete SimpleType: K(3111)", "Delete SimpleName: V(3112)", "Delete SimpleType: V(3113)", "Delete ParameterizedType: TrieEntry<K,V>(3114)", "Delete SimpleName: node(3115)", "Delete SimpleName: getEntry(3116)", "Delete SimpleName: key(3117)", "Delete MethodInvocation(3118)", "Delete VariableDeclarationFragment(3119)", "Delete VariableDeclarationStatement(3120)", "Delete SimpleName: node(3121)", "Delete NullLiteral(3122)", "Delete InfixExpression: !=(3123)", "Delete SimpleName: compare(3124)", "Delete SimpleName: node(3125)", "Delete SimpleName: getValue(3126)", "Delete MethodInvocation(3127)", "Delete SimpleName: entry(3128)", "Delete SimpleName: getValue(3129)", "Delete MethodInvocation(3130)", "Delete MethodInvocation(3131)", "Delete InfixExpression: &&(3132)", "Delete SimpleName: removeEntry(3133)", "Delete SimpleName: node(3134)", "Delete MethodInvocation(3135)", "Delete ExpressionStatement(3136)", "Delete BooleanLiteral: true(3137)", "Delete ReturnStatement(3138)", "Delete Block(3139)", "Delete IfStatement(3140)", "Delete BooleanLiteral: false(3141)", "Delete ReturnStatement(3142)", "Delete Block(3143)", "Delete MethodDeclaration(3144)", "Delete TextElement: An (3145)", "Delete SimpleName: Iterator(3146)", "Delete TagElement: @link(3147)", "Delete TextElement:  for (3148)", "Delete SimpleName: RangeEntrySet(3149)", "Delete TagElement: @link(3150)", "Delete TextElement: s.(3151)", "Delete TagElement(3152)", "Delete Javadoc(3153)", "Delete Modifier: private(3154)", "Delete Modifier: final(3155)", "Delete SimpleName: EntryIterator(3156)", "Delete SimpleName: TrieIterator(3157)", "Delete SimpleType: TrieIterator(3158)", "Delete QualifiedName: Map.Entry(3159)", "Delete SimpleType: Map.Entry(3160)", "Delete SimpleName: K(3161)", "Delete SimpleType: K(3162)", "Delete SimpleName: V(3163)", "Delete SimpleType: V(3164)", "Delete ParameterizedType: Map.Entry<K,V>(3165)", "Delete ParameterizedType: TrieIterator<Map.Entry<K,V>>(3166)", "Delete Modifier: private(3167)", "Delete Modifier: final(3168)", "Delete SimpleName: K(3169)", "Delete SimpleType: K(3170)", "Delete SimpleName: excludedKey(3171)", "Delete VariableDeclarationFragment(3172)", "Delete FieldDeclaration(3173)", "Delete TextElement: Creates a (3174)", "Delete SimpleName: EntryIterator(3175)", "Delete TagElement: @link(3176)", "Delete TextElement: .(3177)", "Delete TagElement(3178)", "Delete Javadoc(3179)", "Delete Modifier: private(3180)", "Delete SimpleName: EntryIterator(3181)", "Delete Modifier: final(3182)", "Delete SimpleName: TrieEntry(3183)", "Delete SimpleType: TrieEntry(3184)", "Delete SimpleName: K(3185)", "Delete SimpleType: K(3186)", "Delete SimpleName: V(3187)", "Delete SimpleType: V(3188)", "Delete ParameterizedType: TrieEntry<K,V>(3189)", "Delete SimpleName: first(3190)", "Delete SingleVariableDeclaration(3191)", "Delete Modifier: final(3192)", "Delete SimpleName: TrieEntry(3193)", "Delete SimpleType: TrieEntry(3194)", "Delete SimpleName: K(3195)", "Delete SimpleType: K(3196)", "Delete SimpleName: V(3197)", "Delete SimpleType: V(3198)", "Delete ParameterizedType: TrieEntry<K,V>(3199)", "Delete SimpleName: last(3200)", "Delete SingleVariableDeclaration(3201)", "Delete SimpleName: first(3202)", "Delete SuperConstructorInvocation(3203)", "Delete ThisExpression(3204)", "Delete SimpleName: excludedKey(3205)", "Delete FieldAccess(3206)", "Delete SimpleName: last(3207)", "Delete NullLiteral(3208)", "Delete InfixExpression: !=(3209)", "Delete SimpleName: last(3210)", "Delete SimpleName: getKey(3211)", "Delete MethodInvocation(3212)", "Delete NullLiteral(3213)", "Delete ConditionalExpression(3214)", "Delete Assignment: =(3215)", "Delete ExpressionStatement(3216)", "Delete Block(3217)", "Delete MethodDeclaration(3218)", "Delete SimpleName: Override(3219)", "Delete MarkerAnnotation(3220)", "Delete Modifier: public(3221)", "Delete PrimitiveType: boolean(3222)", "Delete SimpleName: hasNext(3223)", "Delete SimpleName: next(3224)", "Delete NullLiteral(3225)", "Delete InfixExpression: !=(3226)", "Delete SimpleName: compare(3227)", "Delete QualifiedName: next.key(3228)", "Delete SimpleName: excludedKey(3229)", "Delete MethodInvocation(3230)", "Delete PrefixExpression: !(3231)", "Delete InfixExpression: &&(3232)", "Delete ReturnStatement(3233)", "Delete Block(3234)", "Delete MethodDeclaration(3235)", "Delete Modifier: public(3236)", "Delete QualifiedName: Map.Entry(3237)", "Delete SimpleType: Map.Entry(3238)", "Delete SimpleName: K(3239)", "Delete SimpleType: K(3240)", "Delete SimpleName: V(3241)", "Delete SimpleType: V(3242)", "Delete ParameterizedType: Map.Entry<K,V>(3243)", "Delete SimpleName: next(3244)", "Delete SimpleName: next(3245)", "Delete NullLiteral(3246)", "Delete InfixExpression: ==(3247)", "Delete SimpleName: compare(3248)", "Delete QualifiedName: next.key(3249)", "Delete SimpleName: excludedKey(3250)", "Delete MethodInvocation(3251)", "Delete InfixExpression: ||(3252)", "Delete SimpleName: NoSuchElementException(3253)", "Delete SimpleType: NoSuchElementException(3254)", "Delete ClassInstanceCreation(3255)", "Delete ThrowStatement(3256)", "Delete Block(3257)", "Delete IfStatement(3258)", "Delete SimpleName: nextEntry(3259)", "Delete MethodInvocation(3260)", "Delete ReturnStatement(3261)", "Delete Block(3262)", "Delete MethodDeclaration(3263)", "Delete TypeDeclaration: class(3264)", "Delete TypeDeclaration: class(3265)", "Delete TextElement: A submap used for prefix views over the (3266)", "Delete SimpleName: Trie(3267)", "Delete TagElement: @link(3268)", "Delete TextElement: .(3269)", "Delete TagElement(3270)", "Delete Javadoc(3271)", "Delete Modifier: private(3272)", "Delete SimpleName: PrefixRangeMap(3273)", "Delete SimpleName: RangeMap(3274)", "Delete SimpleType: RangeMap(3275)", "Delete Modifier: private(3276)", "Delete Modifier: final(3277)", "Delete SimpleName: K(3278)", "Delete SimpleType: K(3279)", "Delete SimpleName: prefix(3280)", "Delete VariableDeclarationFragment(3281)", "Delete FieldDeclaration(3282)", "Delete Modifier: private(3283)", "Delete Modifier: final(3284)", "Delete PrimitiveType: int(3285)", "Delete SimpleName: offsetInBits(3286)", "Delete VariableDeclarationFragment(3287)", "Delete FieldDeclaration(3288)", "Delete Modifier: private(3289)", "Delete Modifier: final(3290)", "Delete PrimitiveType: int(3291)", "Delete SimpleName: lengthInBits(3292)", "Delete VariableDeclarationFragment(3293)", "Delete FieldDeclaration(3294)", "Delete Modifier: private(3295)", "Delete SimpleName: K(3296)", "Delete SimpleType: K(3297)", "Delete SimpleName: fromKey(3298)", "Delete NullLiteral(3299)", "Delete VariableDeclarationFragment(3300)", "Delete FieldDeclaration(3301)", "Delete Modifier: private(3302)", "Delete SimpleName: K(3303)", "Delete SimpleType: K(3304)", "Delete SimpleName: toKey(3305)", "Delete NullLiteral(3306)", "Delete VariableDeclarationFragment(3307)", "Delete FieldDeclaration(3308)", "Delete Modifier: private(3309)", "Delete Modifier: transient(3310)", "Delete PrimitiveType: int(3311)", "Delete SimpleName: expectedModCount(3312)", "Delete NumberLiteral: 0(3313)", "Delete VariableDeclarationFragment(3314)", "Delete FieldDeclaration(3315)", "Delete Modifier: private(3316)", "Delete PrimitiveType: int(3317)", "Delete SimpleName: size(3318)", "Delete NumberLiteral: 1(3319)", "Delete PrefixExpression: -(3320)", "Delete VariableDeclarationFragment(3321)", "Delete FieldDeclaration(3322)", "Delete TextElement: Creates a (3323)", "Delete SimpleName: PrefixRangeMap(3324)", "Delete TagElement: @link(3325)", "Delete TextElement: .(3326)", "Delete TagElement(3327)", "Delete Javadoc(3328)", "Delete Modifier: private(3329)", "Delete SimpleName: PrefixRangeMap(3330)", "Delete Modifier: final(3331)", "Delete SimpleName: K(3332)", "Delete SimpleType: K(3333)", "Delete SimpleName: prefix(3334)", "Delete SingleVariableDeclaration(3335)", "Delete Modifier: final(3336)", "Delete PrimitiveType: int(3337)", "Delete SimpleName: offsetInBits(3338)", "Delete SingleVariableDeclaration(3339)", "Delete Modifier: final(3340)", "Delete PrimitiveType: int(3341)", "Delete SimpleName: lengthInBits(3342)", "Delete SingleVariableDeclaration(3343)", "Delete ThisExpression(3344)", "Delete SimpleName: prefix(3345)", "Delete FieldAccess(3346)", "Delete SimpleName: prefix(3347)", "Delete Assignment: =(3348)", "Delete ExpressionStatement(3349)", "Delete ThisExpression(3350)", "Delete SimpleName: offsetInBits(3351)", "Delete FieldAccess(3352)", "Delete SimpleName: offsetInBits(3353)", "Delete Assignment: =(3354)", "Delete ExpressionStatement(3355)", "Delete ThisExpression(3356)", "Delete SimpleName: lengthInBits(3357)", "Delete FieldAccess(3358)", "Delete SimpleName: lengthInBits(3359)", "Delete Assignment: =(3360)", "Delete ExpressionStatement(3361)", "Delete Block(3362)", "Delete MethodDeclaration(3363)", "Delete TextElement: This method does two things. It determinates the FROM(3364)", "Delete TextElement: and TO range of the (3365)", "Delete SimpleName: PrefixRangeMap(3366)", "Delete TagElement: @link(3367)", "Delete TextElement:  and the number(3368)", "Delete TextElement: of elements in the range. This method must be called every(3369)", "Delete TextElement: time the (3370)", "Delete SimpleName: Trie(3371)", "Delete TagElement: @link(3372)", "Delete TextElement:  has changed.(3373)", "Delete TagElement(3374)", "Delete Javadoc(3375)", "Delete Modifier: private(3376)", "Delete PrimitiveType: int(3377)", "Delete SimpleName: fixup(3378)", "Delete SimpleName: size(3379)", "Delete NumberLiteral: 1(3380)", "Delete PrefixExpression: -(3381)", "Delete InfixExpression: ==(3382)", "Delete SimpleName: PatriciaTrie(3383)", "Delete ThisExpression(3384)", "Delete SimpleName: modCount(3385)", "Delete FieldAccess(3386)", "Delete SimpleName: expectedModCount(3387)", "Delete InfixExpression: !=(3388)", "Delete InfixExpression: ||(3389)", "Delete Modifier: final(3390)", "Delete SimpleName: Iterator(3391)", "Delete SimpleType: Iterator(3392)", "Delete QualifiedName: Map.Entry(3393)", "Delete SimpleType: Map.Entry(3394)", "Delete SimpleName: K(3395)", "Delete SimpleType: K(3396)", "Delete SimpleName: V(3397)", "Delete SimpleType: V(3398)", "Delete ParameterizedType: Map.Entry<K,V>(3399)", "Delete ParameterizedType: Iterator<Map.Entry<K,V>>(3400)", "Delete SimpleName: it(3401)", "Delete SimpleName: entrySet(3402)", "Delete MethodInvocation(3403)", "Delete SimpleName: iterator(3404)", "Delete MethodInvocation(3405)", "Delete VariableDeclarationFragment(3406)", "Delete VariableDeclarationStatement(3407)", "Delete SimpleName: size(3408)", "Delete NumberLiteral: 0(3409)", "Delete Assignment: =(3410)", "Delete ExpressionStatement(3411)", "Delete QualifiedName: Map.Entry(3412)", "Delete SimpleType: Map.Entry(3413)", "Delete SimpleName: K(3414)", "Delete SimpleType: K(3415)", "Delete SimpleName: V(3416)", "Delete SimpleType: V(3417)", "Delete ParameterizedType: Map.Entry<K,V>(3418)", "Delete SimpleName: entry(3419)", "Delete NullLiteral(3420)", "Delete VariableDeclarationFragment(3421)", "Delete VariableDeclarationStatement(3422)", "Delete SimpleName: it(3423)", "Delete SimpleName: hasNext(3424)", "Delete MethodInvocation(3425)", "Delete SimpleName: entry(3426)", "Delete SimpleName: it(3427)", "Delete SimpleName: next(3428)", "Delete MethodInvocation(3429)", "Delete Assignment: =(3430)", "Delete ExpressionStatement(3431)", "Delete SimpleName: size(3432)", "Delete NumberLiteral: 1(3433)", "Delete Assignment: =(3434)", "Delete ExpressionStatement(3435)", "Delete Block(3436)", "Delete IfStatement(3437)", "Delete SimpleName: fromKey(3438)", "Delete SimpleName: entry(3439)", "Delete NullLiteral(3440)", "Delete InfixExpression: ==(3441)", "Delete NullLiteral(3442)", "Delete SimpleName: entry(3443)", "Delete SimpleName: getKey(3444)", "Delete MethodInvocation(3445)", "Delete ConditionalExpression(3446)", "Delete Assignment: =(3447)", "Delete ExpressionStatement(3448)", "Delete SimpleName: fromKey(3449)", "Delete NullLiteral(3450)", "Delete InfixExpression: !=(3451)", "Delete Modifier: final(3452)", "Delete SimpleName: TrieEntry(3453)", "Delete SimpleType: TrieEntry(3454)", "Delete SimpleName: K(3455)", "Delete SimpleType: K(3456)", "Delete SimpleName: V(3457)", "Delete SimpleType: V(3458)", "Delete ParameterizedType: TrieEntry<K,V>(3459)", "Delete SimpleName: prior(3460)", "Delete SimpleName: previousEntry(3461)", "Delete SimpleName: TrieEntry(3462)", "Delete SimpleType: TrieEntry(3463)", "Delete SimpleName: K(3464)", "Delete SimpleType: K(3465)", "Delete SimpleName: V(3466)", "Delete SimpleType: V(3467)", "Delete ParameterizedType: TrieEntry<K,V>(3468)", "Delete SimpleName: entry(3469)", "Delete CastExpression(3470)", "Delete MethodInvocation(3471)", "Delete VariableDeclarationFragment(3472)", "Delete VariableDeclarationStatement(3473)", "Delete SimpleName: fromKey(3474)", "Delete SimpleName: prior(3475)", "Delete NullLiteral(3476)", "Delete InfixExpression: ==(3477)", "Delete NullLiteral(3478)", "Delete SimpleName: prior(3479)", "Delete SimpleName: getKey(3480)", "Delete MethodInvocation(3481)", "Delete ConditionalExpression(3482)", "Delete Assignment: =(3483)", "Delete ExpressionStatement(3484)", "Delete Block(3485)", "Delete IfStatement(3486)", "Delete SimpleName: toKey(3487)", "Delete SimpleName: fromKey(3488)", "Delete Assignment: =(3489)", "Delete ExpressionStatement(3490)", "Delete SimpleName: it(3491)", "Delete SimpleName: hasNext(3492)", "Delete MethodInvocation(3493)", "Delete SimpleName: size(3494)", "Delete PrefixExpression: ++(3495)", "Delete ExpressionStatement(3496)", "Delete SimpleName: entry(3497)", "Delete SimpleName: it(3498)", "Delete SimpleName: next(3499)", "Delete MethodInvocation(3500)", "Delete Assignment: =(3501)", "Delete ExpressionStatement(3502)", "Delete Block(3503)", "Delete WhileStatement(3504)", "Delete SimpleName: toKey(3505)", "Delete SimpleName: entry(3506)", "Delete NullLiteral(3507)", "Delete InfixExpression: ==(3508)", "Delete NullLiteral(3509)", "Delete SimpleName: entry(3510)", "Delete SimpleName: getKey(3511)", "Delete MethodInvocation(3512)", "Delete ConditionalExpression(3513)", "Delete Assignment: =(3514)", "Delete ExpressionStatement(3515)", "Delete SimpleName: toKey(3516)", "Delete NullLiteral(3517)", "Delete InfixExpression: !=(3518)", "Delete SimpleName: entry(3519)", "Delete SimpleName: nextEntry(3520)", "Delete SimpleName: TrieEntry(3521)", "Delete SimpleType: TrieEntry(3522)", "Delete SimpleName: K(3523)", "Delete SimpleType: K(3524)", "Delete SimpleName: V(3525)", "Delete SimpleType: V(3526)", "Delete ParameterizedType: TrieEntry<K,V>(3527)", "Delete SimpleName: entry(3528)", "Delete CastExpression(3529)", "Delete MethodInvocation(3530)", "Delete Assignment: =(3531)", "Delete ExpressionStatement(3532)", "Delete SimpleName: toKey(3533)", "Delete SimpleName: entry(3534)", "Delete NullLiteral(3535)", "Delete InfixExpression: ==(3536)", "Delete NullLiteral(3537)", "Delete SimpleName: entry(3538)", "Delete SimpleName: getKey(3539)", "Delete MethodInvocation(3540)", "Delete ConditionalExpression(3541)", "Delete Assignment: =(3542)", "Delete ExpressionStatement(3543)", "Delete Block(3544)", "Delete IfStatement(3545)", "Delete SimpleName: expectedModCount(3546)", "Delete SimpleName: PatriciaTrie(3547)", "Delete ThisExpression(3548)", "Delete SimpleName: modCount(3549)", "Delete FieldAccess(3550)", "Delete Assignment: =(3551)", "Delete ExpressionStatement(3552)", "Delete Block(3553)", "Delete IfStatement(3554)", "Delete SimpleName: size(3555)", "Delete ReturnStatement(3556)", "Delete Block(3557)", "Delete MethodDeclaration(3558)", "Delete Modifier: public(3559)", "Delete SimpleName: K(3560)", "Delete SimpleType: K(3561)", "Delete SimpleName: firstKey(3562)", "Delete SimpleName: fixup(3563)", "Delete MethodInvocation(3564)", "Delete ExpressionStatement(3565)", "Delete QualifiedName: Map.Entry(3566)", "Delete SimpleType: Map.Entry(3567)", "Delete SimpleName: K(3568)", "Delete SimpleType: K(3569)", "Delete SimpleName: V(3570)", "Delete SimpleType: V(3571)", "Delete ParameterizedType: Map.Entry<K,V>(3572)", "Delete SimpleName: e(3573)", "Delete NullLiteral(3574)", "Delete VariableDeclarationFragment(3575)", "Delete VariableDeclarationStatement(3576)", "Delete SimpleName: fromKey(3577)", "Delete NullLiteral(3578)", "Delete InfixExpression: ==(3579)", "Delete SimpleName: e(3580)", "Delete SimpleName: firstEntry(3581)", "Delete MethodInvocation(3582)", "Delete Assignment: =(3583)", "Delete ExpressionStatement(3584)", "Delete Block(3585)", "Delete SimpleName: e(3586)", "Delete SimpleName: higherEntry(3587)", "Delete SimpleName: fromKey(3588)", "Delete MethodInvocation(3589)", "Delete Assignment: =(3590)", "Delete ExpressionStatement(3591)", "Delete Block(3592)", "Delete IfStatement(3593)", "Delete Modifier: final(3594)", "Delete SimpleName: K(3595)", "Delete SimpleType: K(3596)", "Delete SimpleName: first(3597)", "Delete SimpleName: e(3598)", "Delete NullLiteral(3599)", "Delete InfixExpression: !=(3600)", "Delete SimpleName: e(3601)", "Delete SimpleName: getKey(3602)", "Delete MethodInvocation(3603)", "Delete NullLiteral(3604)", "Delete ConditionalExpression(3605)", "Delete VariableDeclarationFragment(3606)", "Delete VariableDeclarationStatement(3607)", "Delete SimpleName: e(3608)", "Delete NullLiteral(3609)", "Delete InfixExpression: ==(3610)", "Delete SimpleName: keyAnalyzer(3611)", "Delete SimpleName: isPrefix(3612)", "Delete SimpleName: prefix(3613)", "Delete SimpleName: offsetInBits(3614)", "Delete SimpleName: lengthInBits(3615)", "Delete SimpleName: first(3616)", "Delete MethodInvocation(3617)", "Delete PrefixExpression: !(3618)", "Delete InfixExpression: ||(3619)", "Delete SimpleName: NoSuchElementException(3620)", "Delete SimpleType: NoSuchElementException(3621)", "Delete ClassInstanceCreation(3622)", "Delete ThrowStatement(3623)", "Delete Block(3624)", "Delete IfStatement(3625)", "Delete SimpleName: first(3626)", "Delete ReturnStatement(3627)", "Delete Block(3628)", "Delete MethodDeclaration(3629)", "Delete Modifier: public(3630)", "Delete SimpleName: K(3631)", "Delete SimpleType: K(3632)", "Delete SimpleName: lastKey(3633)", "Delete SimpleName: fixup(3634)", "Delete MethodInvocation(3635)", "Delete ExpressionStatement(3636)", "Delete QualifiedName: Map.Entry(3637)", "Delete SimpleType: Map.Entry(3638)", "Delete SimpleName: K(3639)", "Delete SimpleType: K(3640)", "Delete SimpleName: V(3641)", "Delete SimpleType: V(3642)", "Delete ParameterizedType: Map.Entry<K,V>(3643)", "Delete SimpleName: e(3644)", "Delete NullLiteral(3645)", "Delete VariableDeclarationFragment(3646)", "Delete VariableDeclarationStatement(3647)", "Delete SimpleName: toKey(3648)", "Delete NullLiteral(3649)", "Delete InfixExpression: ==(3650)", "Delete SimpleName: e(3651)", "Delete SimpleName: lastEntry(3652)", "Delete MethodInvocation(3653)", "Delete Assignment: =(3654)", "Delete ExpressionStatement(3655)", "Delete Block(3656)", "Delete SimpleName: e(3657)", "Delete SimpleName: lowerEntry(3658)", "Delete SimpleName: toKey(3659)", "Delete MethodInvocation(3660)", "Delete Assignment: =(3661)", "Delete ExpressionStatement(3662)", "Delete Block(3663)", "Delete IfStatement(3664)", "Delete Modifier: final(3665)", "Delete SimpleName: K(3666)", "Delete SimpleType: K(3667)", "Delete SimpleName: last(3668)", "Delete SimpleName: e(3669)", "Delete NullLiteral(3670)", "Delete InfixExpression: !=(3671)", "Delete SimpleName: e(3672)", "Delete SimpleName: getKey(3673)", "Delete MethodInvocation(3674)", "Delete NullLiteral(3675)", "Delete ConditionalExpression(3676)", "Delete VariableDeclarationFragment(3677)", "Delete VariableDeclarationStatement(3678)", "Delete SimpleName: e(3679)", "Delete NullLiteral(3680)", "Delete InfixExpression: ==(3681)", "Delete SimpleName: keyAnalyzer(3682)", "Delete SimpleName: isPrefix(3683)", "Delete SimpleName: prefix(3684)", "Delete SimpleName: offsetInBits(3685)", "Delete SimpleName: lengthInBits(3686)", "Delete SimpleName: last(3687)", "Delete MethodInvocation(3688)", "Delete PrefixExpression: !(3689)", "Delete InfixExpression: ||(3690)", "Delete SimpleName: NoSuchElementException(3691)", "Delete SimpleType: NoSuchElementException(3692)", "Delete ClassInstanceCreation(3693)", "Delete ThrowStatement(3694)", "Delete Block(3695)", "Delete IfStatement(3696)", "Delete SimpleName: last(3697)", "Delete ReturnStatement(3698)", "Delete Block(3699)", "Delete MethodDeclaration(3700)", "Delete TextElement: Returns true if this (3701)", "Delete SimpleName: PrefixRangeMap(3702)", "Delete TagElement: @link(3703)", "Delete TextElement: 's key is a prefix of the provided key.(3704)", "Delete TagElement(3705)", "Delete Javadoc(3706)", "Delete SimpleName: Override(3707)", "Delete MarkerAnnotation(3708)", "Delete Modifier: protected(3709)", "Delete PrimitiveType: boolean(3710)", "Delete SimpleName: inRange(3711)", "Delete Modifier: final(3712)", "Delete SimpleName: K(3713)", "Delete SimpleType: K(3714)", "Delete SimpleName: key(3715)", "Delete SingleVariableDeclaration(3716)", "Delete SimpleName: keyAnalyzer(3717)", "Delete SimpleName: isPrefix(3718)", "Delete SimpleName: prefix(3719)", "Delete SimpleName: offsetInBits(3720)", "Delete SimpleName: lengthInBits(3721)", "Delete SimpleName: key(3722)", "Delete MethodInvocation(3723)", "Delete ReturnStatement(3724)", "Delete Block(3725)", "Delete MethodDeclaration(3726)", "Delete TextElement: Same as (3727)", "Delete SimpleName: inRange(3728)", "Delete SimpleName: Object(3729)", "Delete SimpleType: Object(3730)", "Delete MethodRefParameter(3731)", "Delete MethodRef(3732)", "Delete TagElement: @link(3733)", "Delete TextElement: .(3734)", "Delete TagElement(3735)", "Delete Javadoc(3736)", "Delete SimpleName: Override(3737)", "Delete MarkerAnnotation(3738)", "Delete Modifier: protected(3739)", "Delete PrimitiveType: boolean(3740)", "Delete SimpleName: inRange2(3741)", "Delete Modifier: final(3742)", "Delete SimpleName: K(3743)", "Delete SimpleType: K(3744)", "Delete SimpleName: key(3745)", "Delete SingleVariableDeclaration(3746)", "Delete SimpleName: inRange(3747)", "Delete SimpleName: key(3748)", "Delete MethodInvocation(3749)", "Delete ReturnStatement(3750)", "Delete Block(3751)", "Delete MethodDeclaration(3752)", "Delete TextElement: Returns true if the provided Key is in the FROM range of the (3753)", "Delete SimpleName: PrefixRangeMap(3754)", "Delete TagElement: @link(3755)", "Delete TextElement: .(3756)", "Delete TagElement(3757)", "Delete Javadoc(3758)", "Delete SimpleName: Override(3759)", "Delete MarkerAnnotation(3760)", "Delete Modifier: protected(3761)", "Delete PrimitiveType: boolean(3762)", "Delete SimpleName: inFromRange(3763)", "Delete Modifier: final(3764)", "Delete SimpleName: K(3765)", "Delete SimpleType: K(3766)", "Delete SimpleName: key(3767)", "Delete SingleVariableDeclaration(3768)", "Delete Modifier: final(3769)", "Delete PrimitiveType: boolean(3770)", "Delete SimpleName: forceInclusive(3771)", "Delete SingleVariableDeclaration(3772)", "Delete SimpleName: keyAnalyzer(3773)", "Delete SimpleName: isPrefix(3774)", "Delete SimpleName: prefix(3775)", "Delete SimpleName: offsetInBits(3776)", "Delete SimpleName: lengthInBits(3777)", "Delete SimpleName: key(3778)", "Delete MethodInvocation(3779)", "Delete ReturnStatement(3780)", "Delete Block(3781)", "Delete MethodDeclaration(3782)", "Delete TextElement: Returns true if the provided Key is in the TO range of the (3783)", "Delete SimpleName: PrefixRangeMap(3784)", "Delete TagElement: @link(3785)", "Delete TextElement: .(3786)", "Delete TagElement(3787)", "Delete Javadoc(3788)", "Delete SimpleName: Override(3789)", "Delete MarkerAnnotation(3790)", "Delete Modifier: protected(3791)", "Delete PrimitiveType: boolean(3792)", "Delete SimpleName: inToRange(3793)", "Delete Modifier: final(3794)", "Delete SimpleName: K(3795)", "Delete SimpleType: K(3796)", "Delete SimpleName: key(3797)", "Delete SingleVariableDeclaration(3798)", "Delete Modifier: final(3799)", "Delete PrimitiveType: boolean(3800)", "Delete SimpleName: forceInclusive(3801)", "Delete SingleVariableDeclaration(3802)", "Delete SimpleName: keyAnalyzer(3803)", "Delete SimpleName: isPrefix(3804)", "Delete SimpleName: prefix(3805)", "Delete SimpleName: offsetInBits(3806)", "Delete SimpleName: lengthInBits(3807)", "Delete SimpleName: key(3808)", "Delete MethodInvocation(3809)", "Delete ReturnStatement(3810)", "Delete Block(3811)", "Delete MethodDeclaration(3812)", "Delete SimpleName: Override(3813)", "Delete MarkerAnnotation(3814)", "Delete Modifier: protected(3815)", "Delete SimpleName: Set(3816)", "Delete SimpleType: Set(3817)", "Delete QualifiedName: Map.Entry(3818)", "Delete SimpleType: Map.Entry(3819)", "Delete SimpleName: K(3820)", "Delete SimpleType: K(3821)", "Delete SimpleName: V(3822)", "Delete SimpleType: V(3823)", "Delete ParameterizedType: Map.Entry<K,V>(3824)", "Delete ParameterizedType: Set<Map.Entry<K,V>>(3825)", "Delete SimpleName: createEntrySet(3826)", "Delete SimpleName: PrefixRangeEntrySet(3827)", "Delete SimpleType: PrefixRangeEntrySet(3828)", "Delete ThisExpression(3829)", "Delete ClassInstanceCreation(3830)", "Delete ReturnStatement(3831)", "Delete Block(3832)", "Delete MethodDeclaration(3833)", "Delete SimpleName: Override(3834)", "Delete MarkerAnnotation(3835)", "Delete Modifier: public(3836)", "Delete SimpleName: K(3837)", "Delete SimpleType: K(3838)", "Delete SimpleName: getFromKey(3839)", "Delete SimpleName: fromKey(3840)", "Delete ReturnStatement(3841)", "Delete Block(3842)", "Delete MethodDeclaration(3843)", "Delete SimpleName: Override(3844)", "Delete MarkerAnnotation(3845)", "Delete Modifier: public(3846)", "Delete SimpleName: K(3847)", "Delete SimpleType: K(3848)", "Delete SimpleName: getToKey(3849)", "Delete SimpleName: toKey(3850)", "Delete ReturnStatement(3851)", "Delete Block(3852)", "Delete MethodDeclaration(3853)", "Delete SimpleName: Override(3854)", "Delete MarkerAnnotation(3855)", "Delete Modifier: public(3856)", "Delete PrimitiveType: boolean(3857)", "Delete SimpleName: isFromInclusive(3858)", "Delete BooleanLiteral: false(3859)", "Delete ReturnStatement(3860)", "Delete Block(3861)", "Delete MethodDeclaration(3862)", "Delete SimpleName: Override(3863)", "Delete MarkerAnnotation(3864)", "Delete Modifier: public(3865)", "Delete PrimitiveType: boolean(3866)", "Delete SimpleName: isToInclusive(3867)", "Delete BooleanLiteral: false(3868)", "Delete ReturnStatement(3869)", "Delete Block(3870)", "Delete MethodDeclaration(3871)", "Delete SimpleName: Override(3872)", "Delete MarkerAnnotation(3873)", "Delete Modifier: protected(3874)", "Delete SimpleName: SortedMap(3875)", "Delete SimpleType: SortedMap(3876)", "Delete SimpleName: K(3877)", "Delete SimpleType: K(3878)", "Delete SimpleName: V(3879)", "Delete SimpleType: V(3880)", "Delete ParameterizedType: SortedMap<K,V>(3881)", "Delete SimpleName: createRangeMap(3882)", "Delete Modifier: final(3883)", "Delete SimpleName: K(3884)", "Delete SimpleType: K(3885)", "Delete SimpleName: fromKey(3886)", "Delete SingleVariableDeclaration(3887)", "Delete Modifier: final(3888)", "Delete PrimitiveType: boolean(3889)", "Delete SimpleName: fromInclusive(3890)", "Delete SingleVariableDeclaration(3891)", "Delete Modifier: final(3892)", "Delete SimpleName: K(3893)", "Delete SimpleType: K(3894)", "Delete SimpleName: toKey(3895)", "Delete SingleVariableDeclaration(3896)", "Delete Modifier: final(3897)", "Delete PrimitiveType: boolean(3898)", "Delete SimpleName: toInclusive(3899)", "Delete SingleVariableDeclaration(3900)", "Delete SimpleName: RangeEntryMap(3901)", "Delete SimpleType: RangeEntryMap(3902)", "Delete SimpleName: fromKey(3903)", "Delete SimpleName: fromInclusive(3904)", "Delete SimpleName: toKey(3905)", "Delete SimpleName: toInclusive(3906)", "Delete ClassInstanceCreation(3907)", "Delete ReturnStatement(3908)", "Delete Block(3909)", "Delete MethodDeclaration(3910)", "Delete TypeDeclaration: class(3911)", "Delete TextElement: A prefix (3912)", "Delete SimpleName: RangeEntrySet(3913)", "Delete TagElement: @link(3914)", "Delete TextElement:  view of the (3915)", "Delete SimpleName: Trie(3916)", "Delete TagElement: @link(3917)", "Delete TextElement: .(3918)", "Delete TagElement(3919)", "Delete Javadoc(3920)", "Delete Modifier: private(3921)", "Delete Modifier: final(3922)", "Delete SimpleName: PrefixRangeEntrySet(3923)", "Delete SimpleName: RangeEntrySet(3924)", "Delete SimpleType: RangeEntrySet(3925)", "Delete Modifier: private(3926)", "Delete Modifier: final(3927)", "Delete SimpleName: PrefixRangeMap(3928)", "Delete SimpleType: PrefixRangeMap(3929)", "Delete SimpleName: delegate(3930)", "Delete VariableDeclarationFragment(3931)", "Delete FieldDeclaration(3932)", "Delete Modifier: private(3933)", "Delete SimpleName: TrieEntry(3934)", "Delete SimpleType: TrieEntry(3935)", "Delete SimpleName: K(3936)", "Delete SimpleType: K(3937)", "Delete SimpleName: V(3938)", "Delete SimpleType: V(3939)", "Delete ParameterizedType: TrieEntry<K,V>(3940)", "Delete SimpleName: prefixStart(3941)", "Delete VariableDeclarationFragment(3942)", "Delete FieldDeclaration(3943)", "Delete Modifier: private(3944)", "Delete PrimitiveType: int(3945)", "Delete SimpleName: expectedModCount(3946)", "Delete NumberLiteral: 0(3947)", "Delete VariableDeclarationFragment(3948)", "Delete FieldDeclaration(3949)", "Delete TextElement: Creates a (3950)", "Delete SimpleName: PrefixRangeEntrySet(3951)", "Delete TagElement: @link(3952)", "Delete TextElement: .(3953)", "Delete TagElement(3954)", "Delete Javadoc(3955)", "Delete Modifier: public(3956)", "Delete SimpleName: PrefixRangeEntrySet(3957)", "Delete Modifier: final(3958)", "Delete SimpleName: PrefixRangeMap(3959)", "Delete SimpleType: PrefixRangeMap(3960)", "Delete SimpleName: delegate(3961)", "Delete SingleVariableDeclaration(3962)", "Delete SimpleName: delegate(3963)", "Delete SuperConstructorInvocation(3964)", "Delete ThisExpression(3965)", "Delete SimpleName: delegate(3966)", "Delete FieldAccess(3967)", "Delete SimpleName: delegate(3968)", "Delete Assignment: =(3969)", "Delete ExpressionStatement(3970)", "Delete Block(3971)", "Delete MethodDeclaration(3972)", "Delete SimpleName: Override(3973)", "Delete MarkerAnnotation(3974)", "Delete Modifier: public(3975)", "Delete PrimitiveType: int(3976)", "Delete SimpleName: size(3977)", "Delete SimpleName: delegate(3978)", "Delete SimpleName: fixup(3979)", "Delete MethodInvocation(3980)", "Delete ReturnStatement(3981)", "Delete Block(3982)", "Delete MethodDeclaration(3983)", "Delete SimpleName: Override(3984)", "Delete MarkerAnnotation(3985)", "Delete Modifier: public(3986)", "Delete SimpleName: Iterator(3987)", "Delete SimpleType: Iterator(3988)", "Delete QualifiedName: Map.Entry(3989)", "Delete SimpleType: Map.Entry(3990)", "Delete SimpleName: K(3991)", "Delete SimpleType: K(3992)", "Delete SimpleName: V(3993)", "Delete SimpleType: V(3994)", "Delete ParameterizedType: Map.Entry<K,V>(3995)", "Delete ParameterizedType: Iterator<Map.Entry<K,V>>(3996)", "Delete SimpleName: iterator(3997)", "Delete SimpleName: PatriciaTrie(3998)", "Delete ThisExpression(3999)", "Delete SimpleName: modCount(4000)", "Delete FieldAccess(4001)", "Delete SimpleName: expectedModCount(4002)", "Delete InfixExpression: !=(4003)", "Delete SimpleName: prefixStart(4004)", "Delete SimpleName: subtree(4005)", "Delete QualifiedName: delegate.prefix(4006)", "Delete QualifiedName: delegate.offsetInBits(4007)", "Delete QualifiedName: delegate.lengthInBits(4008)", "Delete MethodInvocation(4009)", "Delete Assignment: =(4010)", "Delete ExpressionStatement(4011)", "Delete SimpleName: expectedModCount(4012)", "Delete SimpleName: PatriciaTrie(4013)", "Delete ThisExpression(4014)", "Delete SimpleName: modCount(4015)", "Delete FieldAccess(4016)", "Delete Assignment: =(4017)", "Delete ExpressionStatement(4018)", "Delete Block(4019)", "Delete IfStatement(4020)", "Delete SimpleName: prefixStart(4021)", "Delete NullLiteral(4022)", "Delete InfixExpression: ==(4023)", "Delete Modifier: final(4024)", "Delete SimpleName: Set(4025)", "Delete SimpleType: Set(4026)", "Delete QualifiedName: Map.Entry(4027)", "Delete SimpleType: Map.Entry(4028)", "Delete SimpleName: K(4029)", "Delete SimpleType: K(4030)", "Delete SimpleName: V(4031)", "Delete SimpleType: V(4032)", "Delete ParameterizedType: Map.Entry<K,V>(4033)", "Delete ParameterizedType: Set<Map.Entry<K,V>>(4034)", "Delete SimpleName: empty(4035)", "Delete SimpleName: Collections(4036)", "Delete SimpleName: emptySet(4037)", "Delete MethodInvocation(4038)", "Delete VariableDeclarationFragment(4039)", "Delete VariableDeclarationStatement(4040)", "Delete SimpleName: empty(4041)", "Delete SimpleName: iterator(4042)", "Delete MethodInvocation(4043)", "Delete ReturnStatement(4044)", "Delete Block(4045)", "Delete QualifiedName: delegate.lengthInBits(4046)", "Delete QualifiedName: prefixStart.bitIndex(4047)", "Delete InfixExpression: >=(4048)", "Delete SimpleName: SingletonIterator(4049)", "Delete SimpleType: SingletonIterator(4050)", "Delete SimpleName: prefixStart(4051)", "Delete ClassInstanceCreation(4052)", "Delete ReturnStatement(4053)", "Delete Block(4054)", "Delete SimpleName: EntryIterator(4055)", "Delete SimpleType: EntryIterator(4056)", "Delete SimpleName: prefixStart(4057)", "Delete QualifiedName: delegate.prefix(4058)", "Delete QualifiedName: delegate.offsetInBits(4059)", "Delete QualifiedName: delegate.lengthInBits(4060)", "Delete ClassInstanceCreation(4061)", "Delete ReturnStatement(4062)", "Delete Block(4063)", "Delete IfStatement(4064)", "Delete IfStatement(4065)", "Delete Block(4066)", "Delete MethodDeclaration(4067)", "Delete TextElement: An (4068)", "Delete SimpleName: Iterator(4069)", "Delete TagElement: @link(4070)", "Delete TextElement:  that holds a single (4071)", "Delete SimpleName: TrieEntry(4072)", "Delete TagElement: @link(4073)", "Delete TextElement: .(4074)", "Delete TagElement(4075)", "Delete Javadoc(4076)", "Delete Modifier: private(4077)", "Delete Modifier: final(4078)", "Delete SimpleName: SingletonIterator(4079)", "Delete SimpleName: Iterator(4080)", "Delete SimpleType: Iterator(4081)", "Delete QualifiedName: Map.Entry(4082)", "Delete SimpleType: Map.Entry(4083)", "Delete SimpleName: K(4084)", "Delete SimpleType: K(4085)", "Delete SimpleName: V(4086)", "Delete SimpleType: V(4087)", "Delete ParameterizedType: Map.Entry<K,V>(4088)", "Delete ParameterizedType: Iterator<Map.Entry<K,V>>(4089)", "Delete Modifier: private(4090)", "Delete Modifier: final(4091)", "Delete SimpleName: TrieEntry(4092)", "Delete SimpleType: TrieEntry(4093)", "Delete SimpleName: K(4094)", "Delete SimpleType: K(4095)", "Delete SimpleName: V(4096)", "Delete SimpleType: V(4097)", "Delete ParameterizedType: TrieEntry<K,V>(4098)", "Delete SimpleName: entry(4099)", "Delete VariableDeclarationFragment(4100)", "Delete FieldDeclaration(4101)", "Delete Modifier: private(4102)", "Delete PrimitiveType: int(4103)", "Delete SimpleName: hit(4104)", "Delete NumberLiteral: 0(4105)", "Delete VariableDeclarationFragment(4106)", "Delete FieldDeclaration(4107)", "Delete Modifier: public(4108)", "Delete SimpleName: SingletonIterator(4109)", "Delete Modifier: final(4110)", "Delete SimpleName: TrieEntry(4111)", "Delete SimpleType: TrieEntry(4112)", "Delete SimpleName: K(4113)", "Delete SimpleType: K(4114)", "Delete SimpleName: V(4115)", "Delete SimpleType: V(4116)", "Delete ParameterizedType: TrieEntry<K,V>(4117)", "Delete SimpleName: entry(4118)", "Delete SingleVariableDeclaration(4119)", "Delete ThisExpression(4120)", "Delete SimpleName: entry(4121)", "Delete FieldAccess(4122)", "Delete SimpleName: entry(4123)", "Delete Assignment: =(4124)", "Delete ExpressionStatement(4125)", "Delete Block(4126)", "Delete MethodDeclaration(4127)", "Delete Modifier: public(4128)", "Delete PrimitiveType: boolean(4129)", "Delete SimpleName: hasNext(4130)", "Delete SimpleName: hit(4131)", "Delete NumberLiteral: 0(4132)", "Delete InfixExpression: ==(4133)", "Delete ReturnStatement(4134)", "Delete Block(4135)", "Delete MethodDeclaration(4136)", "Delete Modifier: public(4137)", "Delete QualifiedName: Map.Entry(4138)", "Delete SimpleType: Map.Entry(4139)", "Delete SimpleName: K(4140)", "Delete SimpleType: K(4141)", "Delete SimpleName: V(4142)", "Delete SimpleType: V(4143)", "Delete ParameterizedType: Map.Entry<K,V>(4144)", "Delete SimpleName: next(4145)", "Delete SimpleName: hit(4146)", "Delete NumberLiteral: 0(4147)", "Delete InfixExpression: !=(4148)", "Delete SimpleName: NoSuchElementException(4149)", "Delete SimpleType: NoSuchElementException(4150)", "Delete ClassInstanceCreation(4151)", "Delete ThrowStatement(4152)", "Delete Block(4153)", "Delete IfStatement(4154)", "Delete SimpleName: hit(4155)", "Delete PrefixExpression: ++(4156)", "Delete ExpressionStatement(4157)", "Delete SimpleName: entry(4158)", "Delete ReturnStatement(4159)", "Delete Block(4160)", "Delete MethodDeclaration(4161)", "Delete Modifier: public(4162)", "Delete PrimitiveType: void(4163)", "Delete SimpleName: remove(4164)", "Delete SimpleName: hit(4165)", "Delete NumberLiteral: 1(4166)", "Delete InfixExpression: !=(4167)", "Delete SimpleName: IllegalStateException(4168)", "Delete SimpleType: IllegalStateException(4169)", "Delete ClassInstanceCreation(4170)", "Delete ThrowStatement(4171)", "Delete Block(4172)", "Delete IfStatement(4173)", "Delete SimpleName: hit(4174)", "Delete PrefixExpression: ++(4175)", "Delete ExpressionStatement(4176)", "Delete SimpleName: PatriciaTrie(4177)", "Delete ThisExpression(4178)", "Delete SimpleName: removeEntry(4179)", "Delete SimpleName: entry(4180)", "Delete MethodInvocation(4181)", "Delete ExpressionStatement(4182)", "Delete Block(4183)", "Delete MethodDeclaration(4184)", "Delete TypeDeclaration: class(4185)", "Delete TextElement: An (4186)", "Delete SimpleName: Iterator(4187)", "Delete TagElement: @link(4188)", "Delete TextElement:  for iterating over a prefix search.(4189)", "Delete TagElement(4190)", "Delete Javadoc(4191)", "Delete Modifier: private(4192)", "Delete Modifier: final(4193)", "Delete SimpleName: EntryIterator(4194)", "Delete SimpleName: TrieIterator(4195)", "Delete SimpleType: TrieIterator(4196)", "Delete QualifiedName: Map.Entry(4197)", "Delete SimpleType: Map.Entry(4198)", "Delete SimpleName: K(4199)", "Delete SimpleType: K(4200)", "Delete SimpleName: V(4201)", "Delete SimpleType: V(4202)", "Delete ParameterizedType: Map.Entry<K,V>(4203)", "Delete ParameterizedType: TrieIterator<Map.Entry<K,V>>(4204)", "Delete Modifier: private(4205)", "Delete Modifier: final(4206)", "Delete SimpleName: K(4207)", "Delete SimpleType: K(4208)", "Delete SimpleName: prefix(4209)", "Delete VariableDeclarationFragment(4210)", "Delete FieldDeclaration(4211)", "Delete Modifier: private(4212)", "Delete Modifier: final(4213)", "Delete PrimitiveType: int(4214)", "Delete SimpleName: offset(4215)", "Delete VariableDeclarationFragment(4216)", "Delete FieldDeclaration(4217)", "Delete Modifier: private(4218)", "Delete Modifier: final(4219)", "Delete PrimitiveType: int(4220)", "Delete SimpleName: lengthInBits(4221)", "Delete VariableDeclarationFragment(4222)", "Delete FieldDeclaration(4223)", "Delete Modifier: private(4224)", "Delete PrimitiveType: boolean(4225)", "Delete SimpleName: lastOne(4226)", "Delete VariableDeclarationFragment(4227)", "Delete FieldDeclaration(4228)", "Delete Modifier: private(4229)", "Delete SimpleName: TrieEntry(4230)", "Delete SimpleType: TrieEntry(4231)", "Delete SimpleName: K(4232)", "Delete SimpleType: K(4233)", "Delete SimpleName: V(4234)", "Delete SimpleType: V(4235)", "Delete ParameterizedType: TrieEntry<K,V>(4236)", "Delete SimpleName: subtree(4237)", "Delete VariableDeclarationFragment(4238)", "Delete FieldDeclaration(4239)", "Delete TextElement: Starts iteration at the given entry & search only(4240)", "Delete TextElement: within the given subtree.(4241)", "Delete TagElement(4242)", "Delete Javadoc(4243)", "Delete SimpleName: EntryIterator(4244)", "Delete Modifier: final(4245)", "Delete SimpleName: TrieEntry(4246)", "Delete SimpleType: TrieEntry(4247)", "Delete SimpleName: K(4248)", "Delete SimpleType: K(4249)", "Delete SimpleName: V(4250)", "Delete SimpleType: V(4251)", "Delete ParameterizedType: TrieEntry<K,V>(4252)", "Delete SimpleName: startScan(4253)", "Delete SingleVariableDeclaration(4254)", "Delete Modifier: final(4255)", "Delete SimpleName: K(4256)", "Delete SimpleType: K(4257)", "Delete SimpleName: prefix(4258)", "Delete SingleVariableDeclaration(4259)", "Delete Modifier: final(4260)", "Delete PrimitiveType: int(4261)", "Delete SimpleName: offset(4262)", "Delete SingleVariableDeclaration(4263)", "Delete Modifier: final(4264)", "Delete PrimitiveType: int(4265)", "Delete SimpleName: lengthInBits(4266)", "Delete SingleVariableDeclaration(4267)", "Delete SimpleName: subtree(4268)", "Delete SimpleName: startScan(4269)", "Delete Assignment: =(4270)", "Delete ExpressionStatement(4271)", "Delete SimpleName: next(4272)", "Delete SimpleName: PatriciaTrie(4273)", "Delete ThisExpression(4274)", "Delete SimpleName: followLeft(4275)", "Delete SimpleName: startScan(4276)", "Delete MethodInvocation(4277)", "Delete Assignment: =(4278)", "Delete ExpressionStatement(4279)", "Delete ThisExpression(4280)", "Delete SimpleName: prefix(4281)", "Delete FieldAccess(4282)", "Delete SimpleName: prefix(4283)", "Delete Assignment: =(4284)", "Delete ExpressionStatement(4285)", "Delete ThisExpression(4286)", "Delete SimpleName: offset(4287)", "Delete FieldAccess(4288)", "Delete SimpleName: offset(4289)", "Delete Assignment: =(4290)", "Delete ExpressionStatement(4291)", "Delete ThisExpression(4292)", "Delete SimpleName: lengthInBits(4293)", "Delete FieldAccess(4294)", "Delete SimpleName: lengthInBits(4295)", "Delete Assignment: =(4296)", "Delete ExpressionStatement(4297)", "Delete Block(4298)", "Delete MethodDeclaration(4299)", "Delete Modifier: public(4300)", "Delete QualifiedName: Map.Entry(4301)", "Delete SimpleType: Map.Entry(4302)", "Delete SimpleName: K(4303)", "Delete SimpleType: K(4304)", "Delete SimpleName: V(4305)", "Delete SimpleType: V(4306)", "Delete ParameterizedType: Map.Entry<K,V>(4307)", "Delete SimpleName: next(4308)", "Delete Modifier: final(4309)", "Delete QualifiedName: Map.Entry(4310)", "Delete SimpleType: Map.Entry(4311)", "Delete SimpleName: K(4312)", "Delete SimpleType: K(4313)", "Delete SimpleName: V(4314)", "Delete SimpleType: V(4315)", "Delete ParameterizedType: Map.Entry<K,V>(4316)", "Delete SimpleName: entry(4317)", "Delete SimpleName: nextEntry(4318)", "Delete MethodInvocation(4319)", "Delete VariableDeclarationFragment(4320)", "Delete VariableDeclarationStatement(4321)", "Delete SimpleName: lastOne(4322)", "Delete SimpleName: next(4323)", "Delete NullLiteral(4324)", "Delete Assignment: =(4325)", "Delete ExpressionStatement(4326)", "Delete Block(4327)", "Delete IfStatement(4328)", "Delete SimpleName: entry(4329)", "Delete ReturnStatement(4330)", "Delete Block(4331)", "Delete MethodDeclaration(4332)", "Delete SimpleName: Override(4333)", "Delete MarkerAnnotation(4334)", "Delete Modifier: protected(4335)", "Delete SimpleName: TrieEntry(4336)", "Delete SimpleType: TrieEntry(4337)", "Delete SimpleName: K(4338)", "Delete SimpleType: K(4339)", "Delete SimpleName: V(4340)", "Delete SimpleType: V(4341)", "Delete ParameterizedType: TrieEntry<K,V>(4342)", "Delete SimpleName: findNext(4343)", "Delete Modifier: final(4344)", "Delete SimpleName: TrieEntry(4345)", "Delete SimpleType: TrieEntry(4346)", "Delete SimpleName: K(4347)", "Delete SimpleType: K(4348)", "Delete SimpleName: V(4349)", "Delete SimpleType: V(4350)", "Delete ParameterizedType: TrieEntry<K,V>(4351)", "Delete SimpleName: prior(4352)", "Delete SingleVariableDeclaration(4353)", "Delete SimpleName: PatriciaTrie(4354)", "Delete ThisExpression(4355)", "Delete SimpleName: nextEntryInSubtree(4356)", "Delete SimpleName: prior(4357)", "Delete SimpleName: subtree(4358)", "Delete MethodInvocation(4359)", "Delete ReturnStatement(4360)", "Delete Block(4361)", "Delete MethodDeclaration(4362)", "Delete SimpleName: Override(4363)", "Delete MarkerAnnotation(4364)", "Delete Modifier: public(4365)", "Delete PrimitiveType: void(4366)", "Delete SimpleName: remove(4367)", "Delete PrimitiveType: boolean(4368)", "Delete SimpleName: needsFixing(4369)", "Delete BooleanLiteral: false(4370)", "Delete VariableDeclarationFragment(4371)", "Delete VariableDeclarationStatement(4372)", "Delete Modifier: final(4373)", "Delete PrimitiveType: int(4374)", "Delete SimpleName: bitIdx(4375)", "Delete QualifiedName: subtree.bitIndex(4376)", "Delete VariableDeclarationFragment(4377)", "Delete VariableDeclarationStatement(4378)", "Delete SimpleName: current(4379)", "Delete SimpleName: subtree(4380)", "Delete InfixExpression: ==(4381)", "Delete SimpleName: needsFixing(4382)", "Delete BooleanLiteral: true(4383)", "Delete Assignment: =(4384)", "Delete ExpressionStatement(4385)", "Delete Block(4386)", "Delete IfStatement(4387)", "Delete SimpleName: remove(4388)", "Delete SuperMethodInvocation(4389)", "Delete ExpressionStatement(4390)", "Delete SimpleName: bitIdx(4391)", "Delete QualifiedName: subtree.bitIndex(4392)", "Delete InfixExpression: !=(4393)", "Delete SimpleName: needsFixing(4394)", "Delete InfixExpression: ||(4395)", "Delete SimpleName: subtree(4396)", "Delete SimpleName: subtree(4397)", "Delete SimpleName: prefix(4398)", "Delete SimpleName: offset(4399)", "Delete SimpleName: lengthInBits(4400)", "Delete MethodInvocation(4401)", "Delete Assignment: =(4402)", "Delete ExpressionStatement(4403)", "Delete Block(4404)", "Delete IfStatement(4405)", "Delete SimpleName: lengthInBits(4406)", "Delete QualifiedName: subtree.bitIndex(4407)", "Delete InfixExpression: >=(4408)", "Delete SimpleName: lastOne(4409)", "Delete BooleanLiteral: true(4410)", "Delete Assignment: =(4411)", "Delete ExpressionStatement(4412)", "Delete Block(4413)", "Delete IfStatement(4414)", "Delete Block(4415)", "Delete MethodDeclaration(4416)", "Delete TypeDeclaration: class(4417)", "Delete TypeDeclaration: class(4418)"]}}, {"PatriciaTrieBase_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.collections4.trie"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.AbstractCollection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.AbstractSet", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collection", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.ConcurrentModificationException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Iterator", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.NoSuchElementException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Set", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.collections4.Trie.Cursor.Decision"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodInvocation", "DEL SimpleType: Map.Entry", "DEL SingleVariableDeclaration", "DEL BooleanLiteral: true", "DEL SimpleName: getKey", "DEL SimpleType: K", "DEL TagElement: @link", "DEL Modifier: static", "DEL SimpleType: V", "DEL Modifier: final", "DEL QualifiedName: Map.Entry", "DEL QualifiedName: parent.left", "DEL TextElement: If it's an internal Entry then \"good luck\" with understanding", "DEL SimpleName: K", "DEL SimpleName: K", "DEL TextElement: .", "DEL SimpleType: V", "DEL SimpleName: Decision", "DEL ReturnStatement", "DEL TagElement", "DEL SimpleName: prior", "DEL ReturnStatement", "DEL SimpleName: K", "DEL SimpleName: K", "DEL SimpleType: V", "DEL IfStatement", "DEL SimpleName: reference", "DEL SimpleName: selectR", "DEL SimpleName: Iterator", "DEL SimpleName: reference", "DEL TagElement", "DEL SimpleName: Override", "DEL TagElement", "DEL SimpleType: EntrySet", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleType: V", "DEL TagElement: @link", "DEL Modifier: final", "DEL QualifiedName: next.bitIndex", "DEL IfStatement", "DEL TypeParameter", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: isEqualBitKey", "DEL SimpleName: V", "DEL SimpleName: K", "DEL SimpleType: NoSuchElementException", "DEL SimpleName: found", "DEL Javadoc", "DEL Modifier: final", "DEL SimpleName: nextEntry", "DEL SimpleName: buffer", "DEL SimpleName: UnsupportedOperationException", "DEL TextElement: c) Do Step 1 from the right node.", "DEL SimpleName: TrieEntry", "DEL Modifier: final", "DEL SimpleName: putAll", "DEL SimpleName: clear", "DEL QualifiedName: current.parent.right", "DEL TextElement: 3) Back up through the parents until we encounter find a parent", "DEL SimpleType: K", "DEL SimpleName: value", "DEL Block", "DEL Block", "DEL SimpleName: TrieEntry", "DEL SimpleName: V", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: Cursor", "DEL SimpleName: V", "DEL TagElement", "DEL SimpleName: iterator", "DEL Modifier: protected", "DEL SimpleType: V", "DEL Javadoc", "DEL TextElement: an internal (hard to remove) or external Entry (easy", "DEL SimpleName: K", "DEL IfStatement", "DEL SimpleType: K", "DEL SimpleName: Override", "DEL SimpleName: child", "DEL QualifiedName: child.predecessor", "DEL BreakStatement", "DEL ReturnStatement", "DEL FieldDeclaration", "DEL IfStatement", "DEL Block", "DEL ReturnStatement", "DEL Modifier: protected", "DEL TagElement: @link", "DEL SimpleName: append", "DEL TagElement", "DEL ParameterizedType: Reference<Map.Entry<K,V>>", "DEL MethodDeclaration", "DEL SimpleName: size", "DEL SimpleName: key", "DEL ReturnStatement", "DEL SimpleName: cursor", "DEL SimpleType: TrieEntry", "DEL InfixExpression: ==", "DEL SimpleType: TrieEntry", "DEL ParameterizedType: Collection<V>", "DEL SimpleType: V", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: TrieEntry", "DEL Block", "DEL MethodRef", "DEL InfixExpression: >", "DEL SimpleName: it", "DEL SimpleName: BasicEntry", "DEL SimpleName: reference", "DEL PrimitiveType: boolean", "DEL IfStatement", "DEL MarkerAnnotation", "DEL SimpleName: append", "DEL ParameterizedType: TrieEntry<K,V>", "DEL MethodInvocation", "DEL SimpleName: TrieEntry", "DEL QualifiedName: node.left", "DEL SimpleName: IllegalArgumentException", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: KeyAnalyzer", "DEL VariableDeclarationExpression", "DEL MarkerAnnotation", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL Block", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: TrieEntry", "DEL MethodInvocation", "DEL SimpleName: PatriciaTrieBase", "DEL WhileStatement", "DEL SimpleName: append", "DEL SimpleName: TrieEntry", "DEL SimpleType: K", "DEL SimpleName: TrieEntry", "DEL QualifiedName: h.parent.left", "DEL Modifier: public", "DEL SimpleName: hasNext", "DEL SimpleName: compareKeys", "DEL IfStatement", "DEL Block", "DEL SimpleName: isValidUplink", "DEL Assignment: =", "DEL Block", "DEL ExpressionStatement", "DEL SimpleType: K", "DEL ClassInstanceCreation", "DEL Modifier: private", "DEL SimpleName: current", "DEL SimpleName: key", "DEL QualifiedName: h.right.parent", "DEL PrefixExpression: !", "DEL SimpleName: Trie", "DEL SimpleName: K", "DEL QualifiedName: h.parent", "DEL SimpleName: PatriciaTrieBase", "DEL Assignment: =", "DEL SimpleName: isInternalNode", "DEL StringLiteral: \" -> \"", "DEL SimpleName: K", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: size", "DEL ParameterizedType: Set<K>", "DEL SimpleName: getKey", "DEL MethodDeclaration", "DEL SimpleName: decision", "DEL Block", "DEL MethodRef", "DEL QualifiedName: current.parent.right", "DEL ReturnStatement", "DEL SimpleName: value", "DEL Block", "DEL SimpleType: Iterator", "DEL Assignment: =", "DEL SimpleName: setKeyValue", "DEL QualifiedName: current.parent", "DEL SimpleType: TrieEntry", "DEL SimpleName: IllegalStateException", "DEL SimpleName: nextEntryImpl", "DEL SimpleName: entry", "DEL SimpleName: TrieEntry", "DEL SimpleName: K", "DEL MethodInvocation", "DEL SimpleType: AbstractSet", "DEL InfixExpression: !=", "DEL SimpleName: NoSuchElementException", "DEL Modifier: private", "DEL TextElement: Returns the entry associated with the specified key in the", "DEL SimpleName: key", "DEL Modifier: final", "DEL SimpleName: removeExternalEntry", "DEL MethodDeclaration", "DEL SimpleType: V", "DEL SimpleName: TrieEntry", "DEL Modifier: final", "DEL SimpleName: V", "DEL SimpleName: incrementSize", "DEL SimpleName: selectR", "DEL Block", "DEL TypeDeclaration: class", "DEL SimpleName: TrieEntry", "DEL Block", "DEL QualifiedName: h.parent.right", "DEL SimpleName: castKey", "DEL TextElement: Removes a single entry from the ", "DEL Block", "DEL QualifiedName: node.bitIndex", "DEL SimpleName: remove", "DEL BooleanLiteral: false", "DEL SimpleName: TrieEntry", "DEL SimpleName: setKeyValue", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: buffer", "DEL MarkerAnnotation", "DEL SimpleType: TrieEntry", "DEL InfixExpression: &&", "DEL SimpleName: child", "DEL SimpleType: TrieEntry", "DEL WildcardType: ? super K", "DEL SimpleName: predecessor", "DEL Block", "DEL MarkerAnnotation", "DEL SimpleName: h", "DEL SimpleName: bitIndex", "DEL WhileStatement", "DEL Modifier: abstract", "DEL SimpleName: p", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL QualifiedName: current.left", "DEL InfixExpression: !=", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL PrefixExpression: !", "DEL SimpleType: TrieEntry", "DEL IfStatement", "DEL SimpleName: modCount", "DEL Modifier: final", "DEL TextElement: . ", "DEL SimpleName: e", "DEL MethodDeclaration", "DEL Modifier: final", "DEL SimpleName: V", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL SimpleName: V", "DEL Assignment: =", "DEL SimpleName: Override", "DEL MarkerAnnotation", "DEL QualifiedName: h.predecessor", "DEL TextElement:  size and the modification counter.", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: bitIndex", "DEL SimpleName: V", "DEL SimpleName: append", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: clear", "DEL ExpressionStatement", "DEL WhileStatement", "DEL QualifiedName: p.left.predecessor", "DEL SimpleName: ConcurrentModificationException", "DEL SimpleType: TrieEntry", "DEL TypeParameter", "DEL PrimitiveType: long", "DEL Javadoc", "DEL NullLiteral", "DEL StringLiteral: \"]\"", "DEL WhileStatement", "DEL SimpleName: getKey", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleType: K", "DEL SimpleName: select", "DEL MethodInvocation", "DEL SimpleName: Reference", "DEL MethodInvocation", "DEL SimpleType: V", "DEL TextElement: 7) Do Step 1 on the parent's right child.", "DEL SimpleName: reference", "DEL IfStatement", "DEL TagElement", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL Block", "DEL ParenthesizedExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: contains", "DEL Modifier: final", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: lengthInBits", "DEL SimpleType: TrieEntry", "DEL SimpleName: current", "DEL SimpleType: V", "DEL SimpleName: Object", "DEL TextElement: .", "DEL QualifiedName: current.left", "DEL MarkerAnnotation", "DEL SimpleName: V", "DEL SimpleName: Iterator", "DEL StringLiteral: \"predecessor=\"", "DEL SimpleType: K", "DEL VariableDeclarationFragment", "DEL SimpleName: it", "DEL SimpleName: next", "DEL Modifier: final", "DEL NumberLiteral: 0", "DEL SimpleType: V", "DEL QualifiedName: current.left", "DEL VariableDeclarationFragment", "DEL SimpleName: V", "DEL SimpleName: prior", "DEL SimpleName: size", "DEL SimpleName: start", "DEL SimpleName: V", "DEL PrefixExpression: -", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: public", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL Block", "DEL SimpleType: K", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: value", "DEL ExpressionStatement", "DEL SimpleType: TrieEntry", "DEL QualifiedName: p.left", "DEL TagElement", "DEL Block", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL TextElement: for it), or for inserting the key.", "DEL SimpleName: Override", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL QualifiedName: child.bitIndex", "DEL SimpleType: V", "DEL BooleanLiteral: false", "DEL SimpleName: TrieEntry", "DEL MethodInvocation", "DEL SimpleName: Reference", "DEL NullLiteral", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: KeyAnalyzer", "DEL BooleanLiteral: true", "DEL IfStatement", "DEL SimpleName: parent", "DEL VariableDeclarationFragment", "DEL SimpleName: K", "DEL SimpleType: K", "DEL SimpleName: key", "DEL SimpleName: clear", "DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL SimpleName: bitIndex", "DEL Block", "DEL SimpleName: V", "DEL InfixExpression: ==", "DEL QualifiedName: path.bitIndex", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: K", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL QualifiedName: h.bitIndex", "DEL ReturnStatement", "DEL SimpleName: path", "DEL ReturnStatement", "DEL SimpleName: isValidBitIndex", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL SimpleName: bitIndex", "DEL SimpleType: V", "DEL MethodInvocation", "DEL QualifiedName: child.parent", "DEL TextElement: This class implements the base PATRICIA algorithm and everything that", "DEL SimpleName: value", "DEL IfStatement", "DEL Javadoc", "DEL SimpleName: next", "DEL MethodDeclaration", "DEL FieldDeclaration", "DEL WildcardType: ?", "DEL ExpressionStatement", "DEL Block", "DEL SimpleType: TrieEntry", "DEL SimpleName: TrieEntry", "DEL SimpleName: REMOVE", "DEL SimpleType: Map.Entry", "DEL InfixExpression: ||", "DEL QualifiedName: entry.bitIndex", "DEL MethodInvocation", "DEL SimpleName: TrieEntry", "DEL SimpleName: V", "DEL MethodInvocation", "DEL SimpleName: PatriciaTrieBase", "DEL SimpleName: append", "DEL SimpleName: iterator", "DEL QualifiedName: h.right", "DEL IfStatement", "DEL NullLiteral", "DEL QualifiedName: entry.right", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: candidate", "DEL SimpleName: size", "DEL SimpleName: value", "DEL ReturnStatement", "DEL QualifiedName: root.bitIndex", "DEL SimpleName: Map", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: TrieIterator", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL Modifier: static", "DEL QualifiedName: root.left", "DEL MethodInvocation", "DEL StringLiteral: \" [\"", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleType: V", "DEL SimpleName: removeEntry", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleName: isEmpty", "DEL NullLiteral", "DEL InfixExpression: +", "DEL TextElement: Constructs a new ", "DEL ExpressionStatement", "DEL SimpleName: TrieEntry", "DEL Modifier: final", "DEL SimpleName: value", "DEL VariableDeclarationFragment", "DEL SimpleType: Iterator", "DEL TextElement: Whether or not the entry is storing a key.", "DEL SimpleName: size", "DEL SimpleName: isEmpty", "DEL StringLiteral: \", \"", "DEL SimpleName: KeyAnalyzer", "DEL SimpleName: K", "DEL InfixExpression: &&", "DEL SimpleType: K", "DEL ThrowStatement", "DEL MethodInvocation", "DEL SimpleType: ConcurrentModificationException", "DEL SimpleName: K", "DEL SimpleType: TrieEntry", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL Modifier: public", "DEL ReturnStatement", "DEL QualifiedName: entry.right", "DEL SimpleName: getEntry", "DEL Javadoc", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: lengthInBits", "DEL SimpleName: PatriciaTrieBase", "DEL ForStatement", "DEL QualifiedName: path.bitIndex", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL VariableDeclarationFragment", "DEL QualifiedName: predecessor.bitIndex", "DEL SimpleType: K", "DEL SimpleName: root", "DEL SimpleType: Reference", "DEL ExpressionStatement", "DEL Modifier: protected", "DEL SimpleType: K", "DEL Block", "DEL SimpleName: o", "DEL SimpleName: V", "DEL Block", "DEL TagElement: @link", "DEL StringLiteral: \"null\"", "DEL SimpleType: V", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL SimpleName: append", "DEL QualifiedName: entry.bitIndex", "DEL QualifiedName: h.left", "DEL ClassInstanceCreation", "DEL TagElement: @inheritDoc", "DEL SimpleName: current", "DEL ParameterizedType: TrieEntry<K,V>", "DEL ThisExpression", "DEL SimpleName: entrySet", "DEL SimpleType: TrieEntry", "DEL ThrowStatement", "DEL SimpleType: K", "DEL SimpleName: serialVersionUID", "DEL SimpleName: current", "DEL TextElement: 1) Scan all the way to the left.", "DEL QualifiedName: Map.Entry", "DEL TextElement:  as returned by ", "DEL SimpleName: key", "DEL SimpleType: K", "DEL SimpleType: Object", "DEL TextElement: If it's an external Entry then just remove it.", "DEL InfixExpression: ==", "DEL IfStatement", "DEL SimpleName: V", "DEL TagElement", "DEL NullLiteral", "DEL Modifier: transient", "DEL SimpleName: append", "DEL SimpleName: append", "DEL SimpleType: K", "DEL TextElement:  if provided key is of an incompatible type", "DEL SimpleName: append", "DEL CastExpression", "DEL TextElement:  nodes.", "DEL SimpleName: V", "DEL SimpleName: Map", "DEL SimpleName: key", "DEL Block", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TextElement: already found & returned the end of the Trie, so exit.", "DEL QualifiedName: child.parent", "DEL SimpleName: K", "DEL SimpleName: TrieEntry", "DEL SimpleName: selectR", "DEL SimpleType: Object", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL SimpleName: TrieEntry", "DEL Assignment: =", "DEL NullLiteral", "DEL Modifier: final", "DEL SimpleType: TrieEntry", "DEL QualifiedName: root.key", "DEL Assignment: =", "DEL SimpleName: K", "DEL SimpleName: getValue", "DEL TextElement: The entry who uplinks to this entry. ", "DEL WhileStatement", "DEL IfStatement", "DEL SimpleName: V", "DEL ParameterizedType: Iterator<K>", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleType: V", "DEL Block", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleType: TrieEntry", "DEL TextElement: For fast-fail. ", "DEL Assignment: =", "DEL ParameterizedType: TrieEntry<K,V>", "DEL StringLiteral: \" [\"", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleType: V", "DEL StringLiteral: \"null\"", "DEL SimpleName: K", "DEL SimpleName: TrieEntry", "DEL IfStatement", "DEL SimpleType: V", "DEL MarkerAnnotation", "DEL StringLiteral: \"left=\"", "DEL SimpleName: PatriciaTrieBase", "DEL SimpleName: key", "DEL SimpleName: tree", "DEL ParameterizedType: AbstractSet<K>", "DEL IfStatement", "DEL ThisExpression", "DEL TypeParameter", "DEL SimpleName: lengthInBits", "DEL StringLiteral: \" [\"", "DEL ReturnStatement", "DEL SimpleName: Override", "DEL SimpleName: K", "DEL IfStatement", "DEL SimpleName: entry", "DEL SimpleName: iterator", "DEL SimpleName: TrieEntry", "DEL MarkerAnnotation", "DEL MethodRefParameter", "DEL SimpleName: key", "DEL SimpleType: V", "DEL Modifier: final", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL SimpleName: Reference", "DEL PostfixExpression: ++", "DEL ExpressionStatement", "DEL TagElement: @link", "DEL ParameterizedType: Set<K>", "DEL ExpressionStatement", "DEL InfixExpression: >=", "DEL WildcardType: ? super V", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: K", "DEL MethodInvocation", "DEL SimpleName: V", "DEL SimpleName: TrieIterator", "DEL Modifier: public", "DEL PrefixExpression: !", "DEL NullLiteral", "DEL WhileStatement", "DEL InfixExpression: !=", "DEL SimpleType: V", "DEL SimpleName: V", "DEL SimpleName: entry", "DEL SimpleName: key", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: current", "DEL Block", "DEL SimpleName: left", "DEL VariableDeclarationFragment", "DEL QualifiedName: h.left", "DEL MethodInvocation", "DEL StringLiteral: \"right=\"", "DEL SimpleName: key", "DEL FieldDeclaration", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: K", "DEL SimpleName: append", "DEL VariableDeclarationFragment", "DEL TextElement: argument list. An alternative would be to an Array with a length of", "DEL SimpleName: K", "DEL SimpleName: getNearestEntryForKey", "DEL SimpleType: Map.Entry", "DEL SimpleType: V", "DEL SimpleName: lengthInBits", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: size", "DEL ParameterizedType: TrieEntry<K,V>", "DEL IfStatement", "DEL SimpleName: child", "DEL SimpleName: K", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL SimpleName: root", "DEL ParameterizedType: TrieEntry<K,V>", "DEL Modifier: private", "DEL MethodInvocation", "DEL PrefixExpression: -", "DEL Assignment: =", "DEL ParameterizedType: TrieIterator<Map.Entry<K,V>>", "DEL ReturnStatement", "DEL SimpleType: Map.Entry", "DEL SimpleName: append", "DEL Assignment: =", "DEL Block", "DEL TypeDeclaration: class", "DEL SimpleType: K", "DEL SimpleName: buffer", "DEL Block", "DEL SimpleName: h", "DEL Block", "DEL SimpleName: value", "DEL TextElement: Removes an external entry from the ", "DEL SimpleName: values", "DEL BooleanLiteral: true", "DEL Block", "DEL Block", "DEL SimpleName: V", "DEL ReturnStatement", "DEL SimpleName: reference", "DEL SimpleName: selectR", "DEL Block", "DEL SimpleName: Decision", "DEL IfStatement", "DEL QualifiedName: h.bitIndex", "DEL SimpleName: h", "DEL SimpleName: h", "DEL Modifier: final", "DEL SimpleType: V", "DEL FieldAccess", "DEL VariableDeclarationStatement", "DEL ParameterizedType: TrieEntry<K,V>", "DEL QualifiedName: path.bitIndex", "DEL SimpleType: V", "DEL ParameterizedType: TrieEntry<K,V>", "DEL QualifiedName: child.bitIndex", "DEL VariableDeclarationStatement", "DEL ThrowStatement", "DEL PrefixExpression: !", "DEL InfixExpression: ==", "DEL SimpleName: Override", "DEL Javadoc", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL QualifiedName: Map.Entry", "DEL Block", "DEL SimpleName: PatriciaTrieBase", "DEL MethodInvocation", "DEL SimpleName: K", "DEL SimpleName: lengthInBits", "DEL TextElement:  is a set of ", "DEL VariableDeclarationStatement", "DEL SimpleType: TrieEntry", "DEL SimpleType: Reference", "DEL SwitchCase", "DEL SimpleName: V", "DEL SimpleName: V", "DEL SimpleName: V", "DEL SimpleName: h", "DEL SimpleType: V", "DEL SimpleName: lengthInBits", "DEL SimpleType: Map.Entry", "DEL SimpleName: Trie", "DEL SimpleName: REMOVE_AND_EXIT", "DEL SimpleName: TrieEntry", "DEL SimpleName: entry", "DEL SimpleName: start", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 1", "DEL SimpleName: parent", "DEL MethodDeclaration", "DEL WildcardType: ? super K", "DEL SimpleName: expectedModCount", "DEL VariableDeclarationFragment", "DEL SimpleName: put", "DEL SimpleType: V", "DEL Block", "DEL SimpleName: incrementModCount", "DEL SimpleType: TrieEntry", "DEL Modifier: final", "DEL WildcardType: ? extends K", "DEL NullLiteral", "DEL SimpleName: Set", "DEL SimpleName: entrySet", "DEL SimpleName: Reference", "DEL SimpleName: TrieEntry", "DEL MethodInvocation", "DEL Modifier: transient", "DEL SimpleName: AbstractSet", "DEL PrimitiveType: int", "DEL InfixExpression: &&", "DEL ReturnStatement", "DEL SimpleName: keySet", "DEL IfStatement", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL ParameterizedType: TrieEntry<K,V>", "DEL TextElement: This is a entry set view of the ", "DEL SimpleName: Values", "DEL PrimitiveType: void", "DEL SimpleName: append", "DEL SimpleType: TrieIterator", "DEL SimpleName: removeEntry", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL SimpleName: key", "DEL VariableDeclarationFragment", "DEL SimpleName: reference", "DEL NullLiteral", "DEL SimpleName: Override", "DEL SimpleName: current", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleType: K", "DEL VariableDeclarationFragment", "DEL ThisExpression", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: TrieEntry", "DEL MethodInvocation", "DEL MethodRefParameter", "DEL SimpleName: V", "DEL TagElement", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: V", "DEL Block", "DEL SimpleName: right", "DEL VariableDeclarationStatement", "DEL SimpleName: getKey", "DEL SimpleName: TrieEntry", "DEL TypeDeclaration: class", "DEL TextElement: with the values from the provided ", "DEL ReturnStatement", "DEL SimpleName: o", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: right", "DEL SimpleType: V", "DEL SimpleType: K", "DEL Modifier: protected", "DEL SimpleName: clear", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleType: Set", "DEL SimpleName: V", "DEL SimpleName: K", "DEL FieldDeclaration", "DEL SimpleType: V", "DEL ReturnStatement", "DEL Modifier: final", "DEL SimpleType: K", "DEL SimpleName: NullPointerException", "DEL Assignment: =", "DEL SwitchCase", "DEL Modifier: transient", "DEL ThisExpression", "DEL TextElement: This is implemented by going always to the left until", "DEL MethodInvocation", "DEL TextElement: .", "DEL Modifier: final", "DEL SimpleName: tree", "DEL VariableDeclarationStatement", "DEL SimpleName: root", "DEL ConditionalExpression", "DEL SimpleName: followLeft", "DEL SimpleType: TrieEntry", "DEL SimpleName: V", "DEL SimpleName: h", "DEL SimpleName: append", "DEL TagElement", "DEL SimpleName: bitIndex", "DEL StringLiteral: \"]\"", "DEL Javadoc", "DEL InfixExpression: ||", "DEL Modifier: final", "DEL SimpleName: parent", "DEL Javadoc", "DEL SimpleName: append", "DEL QualifiedName: h.bitIndex", "DEL MethodInvocation", "DEL ThisExpression", "DEL TextElement: .", "DEL Modifier: private", "DEL TagElement: @link", "DEL SimpleName: Reference", "DEL SimpleName: K", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: K", "DEL TextElement: .", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL VariableDeclarationFragment", "DEL SimpleName: values", "DEL BooleanLiteral: false", "DEL NullLiteral", "DEL SimpleName: getValue", "DEL VariableDeclarationStatement", "DEL TextElement: b) If it is a valid uplink, use it.", "DEL PrefixExpression: !", "DEL SimpleName: addEntry", "DEL SimpleName: TrieEntry", "DEL SwitchCase", "DEL QualifiedName: root.parent", "DEL Block", "DEL SimpleName: path", "DEL SimpleName: current", "DEL SimpleName: isEmpty", "DEL MethodRef", "DEL SimpleName: reference", "DEL SimpleName: KeySet", "DEL SimpleName: K", "DEL Block", "DEL QualifiedName: current.bitIndex", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: K", "DEL ClassInstanceCreation", "DEL SimpleType: Set", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: clear", "DEL SimpleName: isValidUplink", "DEL SimpleName: TrieEntry", "DEL SimpleType: TrieEntry", "DEL TagElement: @link", "DEL SimpleType: K", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: isInternalNode", "DEL Modifier: final", "DEL SimpleType: Reference", "DEL Modifier: protected", "DEL ExpressionStatement", "DEL Assignment: =", "DEL FieldAccess", "DEL SimpleType: K", "DEL BooleanLiteral: true", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: EXIT", "DEL SimpleName: o", "DEL Assignment: =", "DEL NumberLiteral: 5155253417231339498L", "DEL QualifiedName: h.left.parent", "DEL SimpleName: p", "DEL SimpleName: Cursor", "DEL SimpleName: key", "DEL SimpleType: K", "DEL SimpleType: TrieEntry", "DEL PrefixExpression: !", "DEL QualifiedName: h.left", "DEL Assignment: =", "DEL IfStatement", "DEL SimpleType: V", "DEL TypeParameter", "DEL TextElement: root Entry even if it's empty.", "DEL PrefixExpression: -", "DEL TagElement: @link", "DEL TextElement: nodes must have a key.", "DEL StringLiteral: \"Cannot remove during select\"", "DEL SimpleName: K", "DEL TextElement: Either the left or right child is a loopback.", "DEL FieldAccess", "DEL Modifier: protected", "DEL SimpleName: h", "DEL TextElement: 5) Check to see if the right child is a valid uplink.", "DEL PrefixExpression: !", "DEL SimpleType: TrieEntry", "DEL SimpleName: V", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: h", "DEL Block", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: append", "DEL Block", "DEL SimpleName: buffer", "DEL SimpleName: child", "DEL Modifier: final", "DEL MethodDeclaration", "DEL SimpleType: K", "DEL SimpleName: cursor", "DEL SimpleName: TrieEntry", "DEL SingleVariableDeclaration", "DEL SimpleType: V", "DEL SimpleName: K", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL PrefixExpression: -", "DEL QualifiedName: Map.Entry", "DEL MethodInvocation", "DEL SimpleType: TrieEntry", "DEL TextElement: .", "DEL ParameterizedType: TrieEntry<K,V>", "DEL InfixExpression: ==", "DEL NullLiteral", "DEL SimpleType: Object", "DEL QualifiedName: Map.Entry", "DEL MethodInvocation", "DEL ParameterizedType: Iterator<V>", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL Modifier: final", "DEL SimpleName: m", "DEL SimpleType: TrieEntry", "DEL TextElement: This is a value view of the ", "DEL ParameterizedType: Map.Entry<K,V>", "DEL TextElement: a) If we already started from this node last time, proceed to Step 2.", "DEL SimpleName: set", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: nextEntryImpl", "DEL SimpleName: set", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"ROOT\"", "DEL WildcardType: ? super K", "DEL SimpleName: V", "DEL QualifiedName: parent.left", "DEL PrimitiveType: int", "DEL TextElement: appropriate view the first time this view is requested. The views are", "DEL Block", "DEL QualifiedName: current.right", "DEL Javadoc", "DEL Modifier: final", "DEL SimpleName: Iterator", "DEL SimpleName: values", "DEL SimpleName: TrieEntry", "DEL InfixExpression: !=", "DEL QualifiedName: parent.right", "DEL Block", "DEL SimpleName: h", "DEL IfStatement", "DEL Javadoc", "DEL PrimitiveType: int", "DEL ParameterizedType: Set<Map.Entry<K,V>>", "DEL IfStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Assignment: =", "DEL SimpleType: IllegalStateException", "DEL ParameterizedType: TrieEntry<K,V>", "DEL ThisExpression", "DEL SimpleName: root", "DEL SimpleName: V", "DEL SimpleName: Trie", "DEL SimpleType: K", "DEL Javadoc", "DEL SimpleName: cursor", "DEL SimpleName: getKey", "DEL SimpleName: V", "DEL SimpleName: root", "DEL MethodInvocation", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: current", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: keySet", "DEL SimpleName: append", "DEL SimpleName: isValidUplink", "DEL SimpleName: Trie", "DEL SimpleName: current", "DEL MethodDeclaration", "DEL SimpleName: previous", "DEL SimpleName: Cursor", "DEL SimpleType: AbstractBitwiseTrie", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: isEmpty", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: V", "DEL TagElement", "DEL QualifiedName: entry.key", "DEL SimpleType: TrieEntry", "DEL TextElement: it again).  If 'tree' is non-null, this will limit the search to the given tree.", "DEL SimpleType: V", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: key", "DEL Assignment: =", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Block", "DEL SimpleType: K", "DEL ThisExpression", "DEL SimpleName: entry", "DEL Block", "DEL QualifiedName: left.bitIndex", "DEL SimpleName: child", "DEL SimpleType: K", "DEL SimpleType: Decision", "DEL PrefixExpression: !", "DEL ExpressionStatement", "DEL QualifiedName: h.right.parent", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: right", "DEL SimpleName: AbstractSet", "DEL Modifier: final", "DEL MethodDeclaration", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleType: TrieEntry", "DEL ThisExpression", "DEL SimpleType: K", "DEL StringLiteral: \"ROOT\"", "DEL SimpleType: K", "DEL SimpleName: h", "DEL SimpleName: equals", "DEL SimpleName: Cursor", "DEL PrefixExpression: !", "DEL ThisExpression", "DEL SimpleName: V", "DEL SimpleName: iterator", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleName: TrieEntry", "DEL TextElement: Only the root can potentially be empty, all other", "DEL SimpleName: findNext", "DEL NullLiteral", "DEL MethodInvocation", "DEL TextElement:  size and increment the modification counter.", "DEL MethodInvocation", "DEL Block", "DEL Block", "DEL SimpleName: K", "DEL Assignment: =", "DEL SimpleName: Entry", "DEL SwitchStatement", "DEL SimpleName: getEntry", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: child", "DEL SimpleType: TrieEntry", "DEL MethodInvocation", "DEL Javadoc", "DEL TextElement: The number of times this ", "DEL SimpleType: TrieEntry", "DEL SimpleName: parent", "DEL VariableDeclarationFragment", "DEL SimpleName: setKeyValue", "DEL Javadoc", "DEL SimpleName: TrieEntry", "DEL SimpleName: V", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: V", "DEL Modifier: final", "DEL QualifiedName: current.parent.right", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: entry", "DEL TextElement: 2) Check the right.", "DEL SimpleType: V", "DEL MethodInvocation", "DEL PrimitiveType: long", "DEL Modifier: static", "DEL SimpleName: K", "DEL SimpleName: K", "DEL Javadoc", "DEL QualifiedName: Map.Entry", "DEL SimpleType: Map.Entry", "DEL ReturnStatement", "DEL SimpleName: getKey", "DEL PrefixExpression: -", "DEL ParameterizedType: Iterator<V>", "DEL SimpleType: K", "DEL IfStatement", "DEL SimpleName: key", "DEL Modifier: final", "DEL SimpleName: o", "DEL SimpleType: V", "DEL Block", "DEL SimpleName: item", "DEL SimpleName: PatriciaTrie", "DEL SimpleName: parent", "DEL InfixExpression: !=", "DEL Block", "DEL MethodRef", "DEL MarkerAnnotation", "DEL SimpleName: next", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL SimpleType: K", "DEL SimpleName: nextEntry", "DEL MethodInvocation", "DEL SwitchCase", "DEL SimpleName: K", "DEL Assignment: =", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: entry", "DEL Modifier: final", "DEL InfixExpression: ==", "DEL SimpleName: next", "DEL MethodRefParameter", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL FieldDeclaration", "DEL PrimitiveType: void", "DEL Modifier: protected", "DEL NumberLiteral: 1", "DEL PrefixExpression: -", "DEL SimpleName: K", "DEL SimpleName: V", "DEL PostfixExpression: --", "DEL ExpressionStatement", "DEL SimpleName: Trie", "DEL VariableDeclarationFragment", "DEL TextElement:  and initializes the ", "DEL PrimitiveType: int", "DEL QualifiedName: current.right", "DEL PrimitiveType: boolean", "DEL SimpleName: V", "DEL SimpleName: K", "DEL SimpleName: TrieEntry", "DEL SimpleName: get", "DEL SimpleName: AbstractBitwiseTrie", "DEL SimpleName: next", "DEL PrimitiveType: boolean", "DEL SimpleName: incrementSize", "DEL InfixExpression: ==", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Cursor<? super K,? super V>", "DEL Assignment: =", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: TrieEntry", "DEL SimpleName: current", "DEL Modifier: final", "DEL SimpleName: K", "DEL QualifiedName: h.right", "DEL SimpleName: decision", "DEL SimpleName: V", "DEL Modifier: protected", "DEL QualifiedName: current.bitIndex", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleType: K", "DEL Assignment: =", "DEL Javadoc", "DEL QualifiedName: org.apache.commons.collections4.Trie", "DEL ReturnStatement", "DEL SimpleName: found", "DEL SimpleType: K", "DEL SimpleType: K", "DEL SimpleName: h", "DEL SimpleName: Map", "DEL MethodDeclaration", "DEL ThisExpression", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: V", "DEL MethodInvocation", "DEL SimpleName: V", "DEL WildcardType: ?", "DEL SingleVariableDeclaration", "DEL QualifiedName: parent.left", "DEL ExpressionStatement", "DEL SimpleName: size", "DEL TagElement: @see", "DEL SimpleName: Override", "DEL Javadoc", "DEL SimpleName: K", "DEL TagElement", "DEL SimpleName: K", "DEL SimpleName: buffer", "DEL SimpleName: incrementSize", "DEL SimpleName: t", "DEL VariableDeclarationStatement", "DEL ThrowStatement", "DEL IfStatement", "DEL SimpleName: V", "DEL VariableDeclarationFragment", "DEL SimpleName: castKey", "DEL PrimitiveType: int", "DEL NullLiteral", "DEL SimpleName: PatriciaTrieBase", "DEL IfStatement", "DEL PrimitiveType: boolean", "DEL SimpleType: V", "DEL SimpleName: V", "DEL SimpleName: K", "DEL PrimitiveType: void", "DEL SimpleName: selectR", "DEL SimpleName: size", "DEL SimpleName: PatriciaTrieBase", "DEL SimpleName: key", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: entry", "DEL SimpleName: E", "DEL SimpleName: left", "DEL VariableDeclarationFragment", "DEL ParameterizedType: TrieEntry<K,V>", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"parent=\"", "DEL SimpleName: containsValue", "DEL ExpressionStatement", "DEL InfixExpression: &&", "DEL SimpleName: Trie", "DEL SimpleName: key", "DEL SimpleType: V", "DEL IfStatement", "DEL StringLiteral: \"right=\"", "DEL SimpleName: K", "DEL SimpleName: isEmpty", "DEL BreakStatement", "DEL FieldAccess", "DEL SimpleType: V", "DEL Assignment: =", "DEL SimpleName: append", "DEL SimpleType: K", "DEL SimpleName: lengthInBits", "DEL InfixExpression: +", "DEL QualifiedName: entry.parent", "DEL SimpleName: tree", "DEL SimpleName: K", "DEL SimpleName: K", "DEL Modifier: private", "DEL ParameterizedType: BasicEntry<K,V>", "DEL ThrowStatement", "DEL Modifier: final", "DEL TagElement: @link", "DEL MethodInvocation", "DEL SimpleName: current", "DEL SimpleName: TrieEntry", "DEL ThisExpression", "DEL NumberLiteral: 1", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: K", "DEL MethodInvocation", "DEL SimpleName: size", "DEL Assignment: =", "DEL SimpleName: K", "DEL SimpleName: Collection", "DEL QualifiedName: current.bitIndex", "DEL ExpressionStatement", "DEL QualifiedName: entry.key", "DEL SimpleName: k", "DEL SimpleName: p", "DEL Block", "DEL SimpleName: t", "DEL SimpleName: K", "DEL TextElement: The index this entry is comparing. ", "DEL ExpressionStatement", "DEL SimpleType: K", "DEL VariableDeclarationStatement", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: root", "DEL TextElement: .", "DEL InfixExpression: ==", "DEL SimpleName: TrieEntry", "DEL MethodInvocation", "DEL SimpleType: K", "DEL SimpleName: V", "DEL SuperConstructorInvocation", "DEL SimpleName: V", "DEL MethodInvocation", "DEL SimpleType: K", "DEL Javadoc", "DEL NumberLiteral: 1", "DEL Assignment: =", "DEL Modifier: static", "DEL ExpressionStatement", "DEL SimpleName: K", "DEL ThisExpression", "DEL SimpleName: getKey", "DEL SimpleType: V", "DEL SimpleType: K", "DEL NumberLiteral: 0", "DEL TextElement: It's used to detect concurrent modifications and fail-fast the ", "DEL InfixExpression: !=", "DEL SimpleName: incrementSize", "DEL VariableDeclarationFragment", "DEL SimpleName: TrieEntry", "DEL Modifier: final", "DEL ExpressionStatement", "DEL QualifiedName: current.right", "DEL Assignment: =", "DEL QualifiedName: current.bitIndex", "DEL SingleVariableDeclaration", "DEL SimpleName: TrieEntry", "DEL PrimitiveType: void", "DEL Block", "DEL SimpleType: Map.Entry", "DEL MethodRef", "DEL MethodInvocation", "DEL Modifier: final", "DEL BooleanLiteral: false", "DEL TagElement: @link", "DEL SimpleName: K", "DEL Modifier: final", "DEL TextElement:  that returns Value Objects.", "DEL WildcardType: ? super K", "DEL Assignment: =", "DEL SimpleName: V", "DEL Block", "DEL Block", "DEL SimpleName: value", "DEL ThrowStatement", "DEL NullLiteral", "DEL Modifier: private", "DEL SimpleName: V", "DEL TagElement: @link", "DEL MarkerAnnotation", "DEL QualifiedName: p.parent", "DEL InfixExpression: ==", "DEL Block", "DEL TagElement: @link", "DEL SimpleName: K", "DEL MethodDeclaration", "DEL SimpleName: decision", "DEL QualifiedName: Map.Entry", "DEL SimpleType: K", "DEL SimpleName: KeyAnalyzer", "DEL SimpleType: TrieEntry", "DEL SimpleType: K", "DEL InfixExpression: ==", "DEL Block", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL QualifiedName: h.bitIndex", "DEL Modifier: final", "DEL Block", "DEL SimpleName: V", "DEL MarkerAnnotation", "DEL PrimitiveType: void", "DEL ParameterizedType: Reference<Map.Entry<K,V>>", "DEL SimpleName: root", "DEL SimpleName: k", "DEL NullLiteral", "DEL QualifiedName: h.right", "DEL ExpressionStatement", "DEL SimpleName: lengthInBits", "DEL QualifiedName: root.left", "DEL Block", "DEL SimpleName: Iterator", "DEL MethodDeclaration", "DEL TagElement", "DEL ExpressionStatement", "DEL IfStatement", "DEL TagElement", "DEL Block", "DEL TextElement: The root node of the ", "DEL SimpleName: next", "DEL SimpleName: reference", "DEL SimpleName: isEmpty", "DEL SingleVariableDeclaration", "DEL SimpleName: lengthInBits", "DEL SimpleName: key", "DEL TagElement", "DEL TagElement", "DEL BooleanLiteral: false", "DEL SimpleName: keySet", "DEL TextElement: to remove)", "DEL TextElement: .", "DEL SimpleName: entry", "DEL SimpleName: left", "DEL Block", "DEL BooleanLiteral: false", "DEL Block", "DEL SimpleName: isEmpty", "DEL ExpressionStatement", "DEL Block", "DEL Block", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: TrieEntry", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: h", "DEL SimpleType: K", "DEL SimpleName: V", "DEL ExpressionStatement", "DEL SimpleName: isEmpty", "DEL Block", "DEL Block", "DEL Assignment: =", "DEL SimpleName: V", "DEL MethodInvocation", "DEL SimpleName: V", "DEL SimpleName: size", "DEL TagElement", "DEL TextElement: 6) If the right child of the parent is the parent itself, we've", "DEL SimpleName: Trie", "DEL Block", "DEL Assignment: =", "DEL ReturnStatement", "DEL Modifier: private", "DEL Block", "DEL SimpleName: Reference", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: getValue", "DEL SimpleType: V", "DEL NullLiteral", "DEL SimpleName: setKeyValue", "DEL SimpleName: V", "DEL IfStatement", "DEL ExpressionStatement", "DEL TextElement: Scans for the next node, starting at the specified point, and using 'previous'", "DEL SimpleName: modCount", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: StringBuilder", "DEL SimpleName: size", "DEL ExpressionStatement", "DEL Assignment: =", "DEL Modifier: final", "DEL Modifier: final", "DEL Block", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL SimpleName: compareKeys", "DEL Modifier: final", "DEL SimpleType: V", "DEL SimpleName: bitIndex", "DEL SimpleType: K", "DEL SimpleName: compare", "DEL NumberLiteral: 1", "DEL SimpleName: next", "DEL TypeDeclaration: class", "DEL Block", "DEL ExpressionStatement", "DEL ParameterizedType: TrieEntry<K,V>", "DEL StringLiteral: \"], \"", "DEL Javadoc", "DEL InfixExpression: <=", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL SimpleName: Set", "DEL WildcardType: ? super V", "DEL IfStatement", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL Modifier: protected", "DEL SimpleName: E", "DEL SimpleName: append", "DEL TagElement", "DEL Modifier: public", "DEL ThisExpression", "DEL SimpleType: Object", "DEL Modifier: private", "DEL SimpleType: K", "DEL SimpleName: removeInternalEntry", "DEL Block", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleType: ValueIterator", "DEL IfStatement", "DEL SimpleName: reference", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: V", "DEL SimpleName: PatriciaTrieBase", "DEL SimpleName: K", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleName: getKey", "DEL SimpleType: TrieEntry", "DEL SimpleName: V", "DEL SimpleName: entrySet", "DEL TextElement: This is very easy and straight forward.", "DEL Modifier: private", "DEL Block", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL SimpleName: buffer", "DEL ExpressionStatement", "DEL SimpleName: decision", "DEL MethodDeclaration", "DEL SimpleName: lengthInBits", "DEL Javadoc", "DEL SimpleType: Cursor", "DEL SimpleName: E", "DEL SimpleType: V", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: TrieIterator", "DEL TextElement: An ", "DEL SimpleName: remove", "DEL ExpressionStatement", "DEL Modifier: public", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: current", "DEL QualifiedName: current.right", "DEL SimpleType: K", "DEL SimpleName: key", "DEL Assignment: =", "DEL ThrowStatement", "DEL TagElement", "DEL SimpleName: bitIndex", "DEL SimpleType: K", "DEL QualifiedName: h.bitIndex", "DEL InfixExpression: <=", "DEL SimpleName: TrieEntry", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: h", "DEL SimpleName: V", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 1", "DEL SimpleType: TrieEntry", "DEL SimpleName: append", "DEL SimpleName: entrySet", "DEL Modifier: public", "DEL SimpleName: V", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL Block", "DEL Modifier: public", "DEL ReturnStatement", "DEL TagElement", "DEL SimpleName: V", "DEL Block", "DEL SimpleName: E", "DEL ExpressionStatement", "DEL Block", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleName: value", "DEL SimpleName: nextEntry", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: path", "DEL Modifier: final", "DEL PrimitiveType: boolean", "DEL TagElement", "DEL SimpleName: TrieEntry", "DEL Modifier: public", "DEL SimpleType: V", "DEL SimpleName: from", "DEL ExpressionStatement", "DEL ParameterizedType: Map.Entry<K,V>", "DEL StringLiteral: \")\"", "DEL MethodDeclaration", "DEL SimpleName: TrieEntry", "DEL MethodDeclaration", "DEL QualifiedName: Map.Entry", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleName: modCount", "DEL MethodInvocation", "DEL SimpleName: K", "DEL Modifier: public", "DEL SimpleName: current", "DEL SimpleType: TrieEntry", "DEL Modifier: private", "DEL SimpleName: lengthInBits", "DEL SimpleType: V", "DEL FieldAccess", "DEL SimpleName: o", "DEL SimpleType: TrieEntry", "DEL ParameterizedType: TrieEntry<K,V>", "DEL MethodRefParameter", "DEL SimpleName: key", "DEL SimpleName: append", "DEL FieldDeclaration", "DEL Javadoc", "DEL SimpleName: next", "DEL PrimitiveType: void", "DEL SimpleName: current", "DEL ParameterizedType: TrieEntry<K,V>", "DEL MethodInvocation", "DEL SimpleName: isEmpty", "DEL QualifiedName: entry.predecessor", "DEL SimpleName: values", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleType: TrieEntry", "DEL StringLiteral: \"]\"", "DEL Modifier: transient", "DEL InfixExpression: !=", "DEL SimpleName: append", "DEL ReturnStatement", "DEL SimpleName: TrieEntry", "DEL SimpleName: select", "DEL QualifiedName: root.right", "DEL TagElement: @link", "DEL PrefixExpression: !", "DEL SimpleName: root", "DEL SimpleName: tree", "DEL SimpleName: PatriciaTrieBase", "DEL ParameterizedType: TrieEntry<K,V>", "DEL Block", "DEL SimpleType: Map.Entry", "DEL SimpleName: nextEntry", "DEL QualifiedName: previous.predecessor", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL FieldDeclaration", "DEL Block", "DEL SimpleName: buffer", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: current", "DEL SimpleName: lengthInBits", "DEL SimpleName: bitIndex", "DEL SimpleName: clear", "DEL QualifiedName: entry.bitIndex", "DEL TagElement", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: PatriciaTrieBase", "DEL SimpleType: Map.Entry", "DEL QualifiedName: node.right", "DEL SimpleName: isBitSet", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SingleVariableDeclaration", "DEL SimpleName: TrieEntry", "DEL SingleVariableDeclaration", "DEL SimpleName: containsKey", "DEL SimpleName: V", "DEL SimpleName: Reference", "DEL SimpleName: get", "DEL TextElement: Returns the nearest entry for a given key.  This is useful", "DEL QualifiedName: current.parent", "DEL SimpleType: TrieEntry", "DEL SimpleName: remove", "DEL SimpleName: next", "DEL Block", "DEL ExpressionStatement", "DEL QualifiedName: Map.Entry", "DEL Modifier: public", "DEL SimpleName: K", "DEL SimpleName: lengthInBits", "DEL Modifier: public", "DEL Modifier: protected", "DEL StringLiteral: \"ROOT\"", "DEL MethodDeclaration", "DEL Modifier: static", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL Modifier: private", "DEL SimpleName: incrementModCount", "DEL PrimitiveType: boolean", "DEL SimpleName: item", "DEL InfixExpression: !=", "DEL SimpleName: p", "DEL SimpleName: key", "DEL Modifier: public", "DEL SimpleType: K", "DEL SimpleName: isExternalNode", "DEL ExpressionStatement", "DEL SimpleName: key", "DEL SimpleName: incrementModCount", "DEL MarkerAnnotation", "DEL SimpleName: V", "DEL SimpleName: append", "DEL MethodInvocation", "DEL TagElement", "DEL QualifiedName: entry.key", "DEL IfStatement", "DEL SimpleName: o", "DEL ReturnStatement", "DEL SimpleType: Decision", "DEL Block", "DEL SimpleType: Reference", "DEL IfStatement", "DEL SimpleName: root", "DEL SwitchStatement", "DEL SimpleName: Map", "DEL SimpleName: bitIndex", "DEL ConditionalExpression", "DEL SimpleName: isOutOfBoundsIndex", "DEL SimpleType: Map.Entry", "DEL SimpleType: TrieEntry", "DEL TextElement: s.", "DEL IfStatement", "DEL SimpleName: keyAnalyzer", "DEL InfixExpression: ==", "DEL SimpleType: V", "DEL Modifier: public", "DEL SimpleName: get", "DEL Block", "DEL NullLiteral", "DEL Modifier: public", "DEL SimpleName: reference", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: compareKeys", "DEL SimpleName: incrementModCount", "DEL SimpleName: keyAnalyzer", "DEL SimpleName: reference", "DEL SimpleName: reference", "DEL SimpleName: K", "DEL SimpleName: append", "DEL PrimitiveType: int", "DEL SimpleType: K", "DEL SimpleName: buffer", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL SimpleType: K", "DEL TextElement: This is a key set view of the ", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: REMOVE", "DEL Block", "DEL IfStatement", "DEL SimpleType: TrieEntry", "DEL SimpleName: buffer", "DEL SimpleName: o", "DEL TagElement", "DEL InfixExpression: ==", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: next", "DEL Modifier: public", "DEL Block", "DEL SimpleType: V", "DEL Javadoc", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleName: V", "DEL SimpleName: k", "DEL FieldDeclaration", "DEL SimpleName: TrieEntry", "DEL MethodInvocation", "DEL SimpleName: isValidUplink", "DEL SimpleName: Trie", "DEL SimpleType: V", "DEL SimpleName: getValue", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SwitchCase", "DEL QualifiedName: current.right", "DEL SimpleName: p", "DEL SimpleName: parent", "DEL InfixExpression: !=", "DEL NumberLiteral: 1", "DEL SimpleName: Override", "DEL Modifier: public", "DEL SimpleType: V", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL ThisExpression", "DEL IfStatement", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: Object", "DEL SimpleName: KeySet", "DEL TextElement: we encounter a valid uplink. That uplink is the first key.", "DEL SimpleName: E", "DEL SimpleType: StringBuilder", "DEL MethodInvocation", "DEL ReturnStatement", "DEL IfStatement", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: append", "DEL QualifiedName: p.bitIndex", "DEL MethodInvocation", "DEL TagElement: @link", "DEL QualifiedName: org.apache.commons.collections4.Trie", "DEL VariableDeclarationStatement", "DEL SimpleType: K", "DEL MethodInvocation", "DEL SimpleName: key", "DEL ClassInstanceCreation", "DEL TagElement", "DEL TagElement", "DEL ReturnStatement", "DEL QualifiedName: p.right", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL WildcardType: ? super V", "DEL InfixExpression: ==", "DEL SimpleName: bitIndex", "DEL Modifier: private", "DEL SimpleName: K", "DEL ExpressionStatement", "DEL SimpleName: entry", "DEL ReturnStatement", "DEL SimpleName: removeExternalEntry", "DEL TextElement: for this key.", "DEL SimpleName: buffer", "DEL SimpleName: V", "DEL TextElement: The right child of this entry. ", "DEL SimpleName: h", "DEL TextElement: Returns true if 'next' is a valid uplink coming from 'from'.", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: lengthInBits", "DEL SimpleName: bitIndex", "DEL SimpleName: K", "DEL SimpleType: StringBuilder", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: h", "DEL NumberLiteral: 4596023148184140013L", "DEL ReturnStatement", "DEL QualifiedName: h.bitIndex", "DEL SimpleType: K", "DEL QualifiedName: h.left", "DEL ExpressionStatement", "DEL SimpleName: V", "DEL SimpleName: tree", "DEL MethodDeclaration", "DEL Block", "DEL ClassInstanceCreation", "DEL TypeDeclaration: class", "DEL Javadoc", "DEL Modifier: abstract", "DEL SimpleName: append", "DEL Javadoc", "DEL IfStatement", "DEL SimpleName: candidate", "DEL SimpleName: firstEntry", "DEL SimpleType: V", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL SimpleType: V", "DEL ExpressionStatement", "DEL SimpleType: Map.Entry", "DEL QualifiedName: h.bitIndex", "DEL SimpleType: V", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL PrefixExpression: -", "DEL ExpressionStatement", "DEL SimpleType: K", "DEL Assignment: =", "DEL QualifiedName: p.predecessor", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: h", "DEL SimpleName: expectedModCount", "DEL SimpleType: K", "DEL Block", "DEL SimpleType: V", "DEL ThrowStatement", "DEL SimpleName: K", "DEL MethodInvocation", "DEL SimpleName: append", "DEL InfixExpression: ==", "DEL TagElement: @link", "DEL SimpleName: o", "DEL TextElement: A ", "DEL SimpleName: value", "DEL IfStatement", "DEL SimpleName: K", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL VariableDeclarationFragment", "DEL SimpleName: bitIndex", "DEL NullLiteral", "DEL ExpressionStatement", "DEL SimpleName: current", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL Block", "DEL QualifiedName: h.right", "DEL TextElement: The parent of this entry. ", "DEL Assignment: =", "DEL QualifiedName: p.left", "DEL ParameterizedType: Reference<Map.Entry<K,V>>", "DEL ParameterizedType: Reference<Map.Entry<K,V>>", "DEL ExpressionStatement", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: Values", "DEL StringLiteral: \"ROOT\"", "DEL PrefixExpression: -", "DEL Modifier: public", "DEL SimpleName: ClassCastException", "DEL PrefixExpression: !", "DEL SimpleType: TrieEntry", "DEL Block", "DEL TextElement:  as returned by ", "DEL SimpleName: V", "DEL ExpressionStatement", "DEL TextElement: .", "DEL ReturnStatement", "DEL SimpleType: K", "DEL SimpleName: KeyAnalyzer", "DEL TextElement:  Class but that happens only once).", "DEL SimpleName: K", "DEL SimpleType: Collection", "DEL SimpleName: current", "DEL MethodDeclaration", "DEL SimpleType: V", "DEL VariableDeclarationFragment", "DEL SimpleName: key", "DEL Block", "DEL QualifiedName: p.parent", "DEL SimpleName: o", "DEL SimpleName: ValueIterator", "DEL SimpleName: V", "DEL SimpleName: append", "DEL StringLiteral: \"right=\"", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL InfixExpression: !=", "DEL Block", "DEL SimpleName: getEntry", "DEL MarkerAnnotation", "DEL SimpleName: key", "DEL SimpleName: entry", "DEL Modifier: final", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL TextElement: Returns the entry lexicographically after the given entry.", "DEL TextElement: a) If we already returned that child, proceed to Step 6.", "DEL SimpleName: Object", "DEL SimpleType: V", "DEL SimpleName: Iterator", "DEL SimpleType: V", "DEL Modifier: final", "DEL TextElement:  Trie", "DEL SingleVariableDeclaration", "DEL ParameterizedType: AbstractBitwiseTrie<K,V>", "DEL Modifier: private", "DEL ParameterizedType: TrieEntry<K,V>", "DEL Modifier: public", "DEL Modifier: final", "DEL IfStatement", "DEL SimpleName: found", "DEL ExpressionStatement", "DEL SimpleType: K", "DEL Modifier: public", "DEL SimpleName: key", "DEL TextElement:  using the given", "DEL SimpleName: reference", "DEL SimpleType: Set", "DEL Modifier: final", "DEL SimpleName: previous", "DEL SimpleType: AbstractSet", "DEL MethodInvocation", "DEL TextElement: Neither the left nor right child is a loopback.", "DEL QualifiedName: current.parent.right", "DEL SimpleName: TrieEntry", "DEL SimpleName: IllegalArgumentException", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL SimpleName: lengthInBits", "DEL Block", "DEL ReturnStatement", "DEL SimpleType: V", "DEL ExpressionStatement", "DEL SimpleName: current", "DEL SimpleName: lengthInBits", "DEL PrimitiveType: int", "DEL InfixExpression: !=", "DEL SimpleName: KeyAnalyzer", "DEL SimpleName: append", "DEL Modifier: final", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL ParameterizedType: TrieEntry<K,V>", "DEL TextElement: This may throw ClassCastException if the object is not of type K.", "DEL IfStatement", "DEL SimpleType: V", "DEL SimpleType: K", "DEL QualifiedName: current.bitIndex", "DEL InfixExpression: ==", "DEL TextElement:  to the ", "DEL ParameterizedType: AbstractSet<Map.Entry<K,V>>", "DEL SimpleName: TrieEntry", "DEL ReturnStatement", "DEL SwitchCase", "DEL ExpressionStatement", "DEL SimpleType: K", "DEL TagElement", "DEL SimpleType: V", "DEL MethodInvocation", "DEL SimpleName: root", "DEL MethodInvocation", "DEL TypeDeclaration: class", "DEL SimpleName: k", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: Iterator", "DEL MethodInvocation", "DEL SimpleName: getKey", "DEL SimpleType: V", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: Object", "DEL SimpleName: Override", "DEL ParameterizedType: TrieEntry<K,V>", "DEL TextElement: The left child of this entry. ", "DEL MethodInvocation", "DEL SimpleName: removeInternalEntry", "DEL SimpleType: Map.Entry", "DEL SimpleName: addEntry", "DEL ExpressionStatement", "DEL TagElement", "DEL TextElement: stateless, so there's no reason to create more than one of each.", "DEL NullLiteral", "DEL Block", "DEL SimpleName: Override", "DEL InfixExpression: ==", "DEL Modifier: final", "DEL BooleanLiteral: true", "DEL SimpleType: Iterator", "DEL SimpleName: V", "DEL SimpleName: keyAnalyzer", "DEL ParameterizedType: Map.Entry<K,V>", "DEL PrefixExpression: !", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: append", "DEL QualifiedName: root.predecessor", "DEL ExpressionStatement", "DEL ConditionalExpression", "DEL IfStatement", "DEL MethodDeclaration", "DEL QualifiedName: current.predecessor", "DEL SimpleType: V", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: size", "DEL SimpleName: append", "DEL SimpleName: o", "DEL SimpleName: EntrySet", "DEL SimpleName: previous", "DEL SimpleType: TrieEntry", "DEL MethodInvocation", "DEL SimpleName: append", "DEL PrimitiveType: int", "DEL ParameterizedType: TrieEntry<K,V>", "DEL InfixExpression: ==", "DEL SimpleName: key", "DEL Block", "DEL SimpleName: keyAnalyzer", "DEL ClassInstanceCreation", "DEL StringLiteral: \"key=\"", "DEL SimpleType: K", "DEL SimpleName: K", "DEL TextElement: .", "DEL SimpleType: IllegalArgumentException", "DEL ReturnStatement", "DEL Block", "DEL SimpleType: TrieEntry", "DEL WildcardType: ?", "DEL IfStatement", "DEL SimpleName: isBitSet", "DEL SimpleName: append", "DEL MethodDeclaration", "DEL SimpleName: key", "DEL SimpleName: buffer", "DEL SimpleName: key", "DEL StringLiteral: \"Entry(\"", "DEL SimpleName: V", "DEL QualifiedName: Map.Entry", "DEL Block", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL SimpleType: K", "DEL SimpleName: selectR", "DEL InfixExpression: !=", "DEL SingleVariableDeclaration", "DEL SimpleType: K", "DEL SimpleName: lengthInBits", "DEL ClassInstanceCreation", "DEL SimpleName: modCount", "DEL SimpleName: size", "DEL SimpleType: V", "DEL Modifier: final", "DEL SimpleType: TrieEntry", "DEL TagElement: @since", "DEL SimpleName: bitIndex", "DEL SimpleName: buffer", "DEL ExpressionStatement", "DEL SimpleType: V", "DEL PrimitiveType: int", "DEL SimpleName: root", "DEL Block", "DEL SimpleName: node", "DEL BooleanLiteral: true", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: incrementModCount", "DEL QualifiedName: right.bitIndex", "DEL SimpleName: select", "DEL SimpleType: K", "DEL SimpleName: K", "DEL SimpleName: key", "DEL InfixExpression: ==", "DEL ParameterizedType: Reference<Map.Entry<K,V>>", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleName: node", "DEL ThisExpression", "DEL QualifiedName: p.right", "DEL SimpleName: V", "DEL SimpleName: K", "DEL TagElement: @link", "DEL StringLiteral: \"null\"", "DEL SimpleType: ConcurrentModificationException", "DEL SimpleType: Object", "DEL ParameterizedType: Map.Entry<K,V>", "DEL IfStatement", "DEL Assignment: =", "DEL SimpleName: value", "DEL SingleVariableDeclaration", "DEL InfixExpression: &&", "DEL SimpleName: K", "DEL QualifiedName: Map.Entry", "DEL SimpleName: e", "DEL StringLiteral: \"Key cannot be null\"", "DEL Modifier: final", "DEL SimpleName: current", "DEL Modifier: final", "DEL ReturnStatement", "DEL SimpleName: p", "DEL ExpressionStatement", "DEL QualifiedName: h.right", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: K", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: Object", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: V", "DEL SimpleName: Trie", "DEL ReturnStatement", "DEL SimpleName: h", "DEL SimpleName: K", "DEL StringLiteral: \"Cannot delete root Entry!\"", "DEL SimpleName: modCount", "DEL IfStatement", "DEL ParameterizedType: Map<? extends K,? extends V>", "DEL SimpleName: K", "DEL SimpleName: entrySet", "DEL PrefixExpression: !", "DEL InfixExpression: <=", "DEL SimpleName: V", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleType: K", "DEL ExpressionStatement", "DEL SimpleName: K", "DEL Javadoc", "DEL Block", "DEL MethodInvocation", "DEL NullLiteral", "DEL ExpressionStatement", "DEL NullLiteral", "DEL SimpleName: p", "DEL SimpleName: e", "DEL SimpleType: Reference", "DEL Modifier: volatile", "DEL TagElement: @link", "DEL SimpleName: key", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL Block", "DEL SimpleType: K", "DEL SimpleName: K", "DEL Block", "DEL SimpleName: bitIndex", "DEL SimpleType: TrieEntry", "DEL Block", "DEL Modifier: final", "DEL SimpleName: predecessor", "DEL SimpleName: left", "DEL SimpleName: V", "DEL Assignment: =", "DEL WildcardType: ?", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL SimpleType: KeySet", "DEL StringLiteral: \"parent=\"", "DEL SimpleName: Trie", "DEL Assignment: =", "DEL Javadoc", "DEL SimpleName: append", "DEL SimpleName: TrieEntry", "DEL SimpleName: child", "DEL InfixExpression: &&", "DEL Block", "DEL Modifier: private", "DEL SimpleName: K", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL SimpleName: K", "DEL Assignment: =", "DEL ParameterizedType: TrieEntry<?,?>", "DEL TagElement: @link", "DEL Javadoc", "DEL SimpleName: key", "DEL Modifier: final", "DEL IfStatement", "DEL SimpleName: h", "DEL SimpleName: TrieIterator", "DEL SimpleName: path", "DEL SimpleName: size", "DEL IfStatement", "DEL TextElement:  $Id$", "DEL SimpleName: decrementSize", "DEL SingleVariableDeclaration", "DEL InfixExpression: ==", "DEL NullLiteral", "DEL SimpleName: traverse", "DEL SimpleName: KeyIterator", "DEL SimpleName: Override", "DEL SimpleName: TrieEntry", "DEL VariableDeclarationFragment", "DEL SimpleType: V", "DEL ParameterizedType: TrieEntry<K,V>", "DEL QualifiedName: current.right", "DEL QualifiedName: root.value", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleType: Values", "DEL SimpleType: Map.Entry", "DEL SimpleName: ValueIterator", "DEL MethodInvocation", "DEL SimpleName: found", "DEL QualifiedName: root.left", "DEL SimpleName: lengthInBits", "DEL SimpleName: h", "DEL QualifiedName: h.parent.left", "DEL SimpleName: keySet", "DEL TextElement: a) If we already returned the right node, proceed to Step 3.", "DEL MarkerAnnotation", "DEL SimpleName: key", "DEL SimpleType: K", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: entry", "DEL SimpleName: TrieEntry", "DEL SimpleName: lengthInBits", "DEL Block", "DEL TagElement", "DEL SimpleName: reference", "DEL QualifiedName: current.bitIndex", "DEL ThisExpression", "DEL SimpleName: isValidUplink", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL ParameterizedType: KeyAnalyzer<? super K>", "DEL MethodDeclaration", "DEL NullLiteral", "DEL IfStatement", "DEL PrimitiveType: boolean", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleType: Cursor", "DEL SimpleName: Reference", "DEL SimpleName: lengthInBits", "DEL ParameterizedType: KeyAnalyzer<? super K>", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL Javadoc", "DEL TextElement: <p>", "DEL MethodInvocation", "DEL ParameterizedType: TrieEntry<K,V>", "DEL QualifiedName: current.left", "DEL SimpleName: o", "DEL SimpleName: String", "DEL SimpleName: K", "DEL ThrowStatement", "DEL SimpleName: remove", "DEL TypeParameter", "DEL SimpleName: clear", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL InfixExpression: &&", "DEL InfixExpression: >", "DEL IfStatement", "DEL FieldAccess", "DEL ReturnStatement", "DEL SimpleName: o", "DEL Assignment: =", "DEL SimpleType: Object", "DEL StringLiteral: \" [\"", "DEL SimpleName: reference", "DEL SimpleName: child", "DEL ExpressionStatement", "DEL SimpleType: Iterator", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: Map", "DEL SimpleName: TrieEntry", "DEL SimpleName: size", "DEL SimpleName: path", "DEL ThisExpression", "DEL InfixExpression: !=", "DEL SimpleName: V", "DEL TagElement: @link", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: K", "DEL PrimitiveType: boolean", "DEL SimpleType: Collection", "DEL ThisExpression", "DEL ReturnStatement", "DEL SimpleName: K", "DEL StringLiteral: \" [\"", "DEL SimpleType: Reference", "DEL Modifier: final", "DEL MarkerAnnotation", "DEL SimpleType: V", "DEL SimpleType: V", "DEL SimpleType: V", "DEL TextElement: b) If a valid uplink is found, use it.", "DEL PrefixExpression: -", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleName: TrieEntry", "DEL SimpleType: K", "DEL SimpleName: V", "DEL SimpleName: TrieEntry", "DEL SimpleName: removeEntry", "DEL ReturnStatement", "DEL BooleanLiteral: false", "DEL Modifier: final", "DEL TextElement:  Trie", "DEL SimpleType: E", "DEL Modifier: public", "DEL TextElement:  has been modified.", "DEL SimpleName: lengthInBits", "DEL QualifiedName: root.left", "DEL SimpleName: child", "DEL VariableDeclarationStatement", "DEL SimpleName: toString", "DEL SimpleName: Trie", "DEL SimpleName: lengthInBits", "DEL SimpleName: containsKey", "DEL NullLiteral", "DEL SimpleName: e", "DEL SimpleName: value", "DEL SimpleName: V", "DEL SimpleName: right", "DEL SimpleName: h", "DEL SimpleName: k", "DEL QualifiedName: h.right", "DEL SimpleName: current", "DEL ReturnStatement", "DEL NumberLiteral: 1", "DEL SuperConstructorInvocation", "DEL SimpleName: k", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SimpleName: getValue", "DEL QualifiedName: current.bitIndex", "DEL QualifiedName: parent.left", "DEL Block", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: isBitSet", "DEL Modifier: final", "DEL SimpleName: key", "DEL SimpleName: REMOVE_AND_EXIT", "DEL QualifiedName: h.bitIndex", "DEL Javadoc", "DEL SimpleName: buffer", "DEL QualifiedName: current.bitIndex", "DEL ExpressionStatement", "DEL Modifier: public", "DEL Block", "DEL SimpleName: removeEntry", "DEL SimpleName: PatriciaTrieBase", "DEL TextElement: 4) If there's no right child of that parent, the iteration is finished.", "DEL SimpleType: V", "DEL SimpleName: buffer", "DEL Modifier: public", "DEL SimpleName: ConcurrentModificationException", "DEL SimpleName: found", "DEL PrefixExpression: -", "DEL SimpleName: remove", "DEL QualifiedName: h.left", "DEL SimpleName: getNearestEntryForKey", "DEL Block", "DEL SimpleType: V", "DEL SimpleName: TrieEntry", "DEL SimpleName: V", "DEL Javadoc", "DEL SimpleName: current", "DEL SimpleName: K", "DEL MethodInvocation", "DEL NullLiteral", "DEL Javadoc", "DEL SimpleName: lengthInBits", "DEL MethodInvocation", "DEL SimpleName: K", "DEL WildcardType: ? extends V", "DEL Block", "DEL ExpressionStatement", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: lengthInBits", "DEL QualifiedName: p.predecessor", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleType: IllegalArgumentException", "DEL Modifier: public", "DEL TextElement: PatriciaTrieBase.  Returns null if the map contains no mapping", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL ParameterizedType: Map.Entry<K,V>", "DEL Block", "DEL ReturnStatement", "DEL NullLiteral", "DEL Block", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: Object", "DEL QualifiedName: Map.Entry", "DEL QualifiedName: Map.Entry", "DEL FieldDeclaration", "DEL SimpleName: selectR", "DEL MethodInvocation", "DEL TextElement: An ", "DEL Block", "DEL SimpleType: TrieEntry", "DEL SimpleType: E", "DEL SimpleType: K", "DEL QualifiedName: current.left", "DEL Block", "DEL SimpleType: K", "DEL SimpleType: TrieEntry", "DEL IfStatement", "DEL SimpleName: size", "DEL SimpleName: K", "DEL Modifier: public", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL TextElement: An iterator for the entries.", "DEL SimpleType: Set", "DEL ParameterizedType: TrieIterator<V>", "DEL SimpleName: PatriciaTrieBase", "DEL QualifiedName: path.bitIndex", "DEL SimpleName: append", "DEL ParameterizedType: Cursor<? super K,? super V>", "DEL SimpleName: append", "DEL WildcardType: ? super K", "DEL SimpleName: h", "DEL Modifier: private", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: EntrySet", "DEL ThisExpression", "DEL SimpleType: K", "DEL SimpleName: TrieEntry", "DEL IfStatement", "DEL InfixExpression: ==", "DEL ParameterizedType: Map.Entry<K,V>", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL QualifiedName: current.parent.right", "DEL InfixExpression: ||", "DEL SimpleName: isInternalNode", "DEL InfixExpression: ==", "DEL NumberLiteral: 0", "DEL SimpleName: cursor", "DEL ExpressionStatement", "DEL Modifier: protected", "DEL TextElement: Starts iteration from the root.", "DEL QualifiedName: h.bitIndex", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TextElement:  Objects.", "DEL SimpleName: path", "DEL Block", "DEL Block", "DEL SimpleName: incrementSize", "DEL ExpressionStatement", "DEL SimpleName: key", "DEL StringLiteral: \"Cannot delete root Entry!\"", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: TrieEntry", "DEL SimpleName: Override", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleName: EntryIterator", "DEL InfixExpression: ==", "DEL TagElement", "DEL SimpleType: TrieEntry", "DEL MarkerAnnotation", "DEL SimpleType: Object", "DEL Block", "DEL TextElement: If we found a Key (Entry h) then figure out if it's", "DEL TextElement: The current size of the ", "DEL SingleVariableDeclaration", "DEL SimpleName: E", "DEL SimpleName: append", "DEL Block", "DEL StringLiteral: \"parent=\"", "DEL SimpleType: V", "DEL QualifiedName: current.parent", "DEL WildcardType: ?", "DEL ParameterizedType: Cursor<? super K,? super V>", "DEL SimpleName: size", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL TagElement: @link", "DEL NullLiteral", "DEL TextElement: This is equivalent to the other ", "DEL SimpleName: K", "DEL SimpleName: h", "DEL SimpleName: bitIndex", "DEL SimpleName: PatriciaTrieBase", "DEL SimpleType: K", "DEL MarkerAnnotation", "DEL Block", "DEL SimpleName: PatriciaTrieBase", "DEL MethodInvocation", "DEL SimpleName: h", "DEL MethodInvocation", "DEL StringLiteral: \"left=\"", "DEL SimpleName: K", "DEL SwitchCase", "DEL MethodInvocation", "DEL SimpleName: buffer", "DEL Block", "DEL SimpleType: K", "DEL SingleVariableDeclaration", "DEL SimpleType: K", "DEL InfixExpression: ==", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL Block", "DEL MethodDeclaration", "DEL PrimitiveType: void", "DEL Block", "DEL SimpleName: k", "DEL InfixExpression: !=", "DEL SimpleName: root", "DEL Javadoc", "DEL SimpleName: append", "DEL SimpleName: cursor", "DEL MethodInvocation", "DEL Block", "DEL NullLiteral", "DEL QualifiedName: Map.Entry", "DEL Modifier: final", "DEL Block", "DEL Block", "DEL SimpleName: entry", "DEL SimpleType: K", "DEL PrefixExpression: ++", "DEL Block", "DEL TextElement: <p>", "DEL SimpleName: K", "DEL SingleVariableDeclaration", "DEL SuperConstructorInvocation", "DEL TagElement: @link", "DEL SimpleName: V", "DEL SimpleName: h", "DEL Block", "DEL SimpleName: h", "DEL SimpleType: TrieEntry", "DEL SimpleName: root", "DEL SimpleName: keySet", "DEL TagElement: @link", "DEL SimpleName: Trie", "DEL SimpleType: K", "DEL SimpleType: K", "DEL SimpleName: bitIndex", "DEL Block", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL ParameterizedType: TrieEntry<K,V>", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: V", "DEL VariableDeclarationStatement", "DEL SimpleName: KeyAnalyzer", "DEL SimpleName: current", "DEL StringLiteral: \", \"", "DEL SimpleName: V", "DEL SimpleName: V", "DEL ThrowStatement", "DEL SimpleName: KeyIterator", "DEL Block", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: previous", "DEL SimpleName: key", "DEL ClassInstanceCreation", "DEL SimpleName: it", "DEL SimpleName: IllegalArgumentException", "DEL Modifier: final", "DEL ParameterizedType: TrieIterator<K>", "DEL SimpleName: V", "DEL QualifiedName: parent.bitIndex", "DEL SimpleName: K", "DEL SimpleName: cursor", "DEL QualifiedName: p.parent", "DEL SimpleType: Map.Entry", "DEL ExpressionStatement", "DEL SimpleType: K", "DEL MethodDeclaration", "DEL SimpleName: next", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL SimpleName: expectedModCount", "DEL VariableDeclarationStatement", "DEL TextElement: Starts iteration at the given entry.", "DEL SimpleName: current", "DEL NullLiteral", "DEL SimpleType: Map.Entry", "DEL SingleVariableDeclaration", "DEL SimpleName: remove", "DEL TextElement: c) If the result is an empty node (root not set), break the scan.", "DEL Modifier: public", "DEL MarkerAnnotation", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"RootEntry(\"", "DEL SimpleType: V", "DEL MarkerAnnotation", "DEL ExpressionStatement", "DEL Modifier: protected", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleName: e", "DEL SimpleName: Override", "DEL TextElement: selectR but with the exception that it might return the", "DEL MethodInvocation", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL QualifiedName: p.left", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: key", "DEL SimpleName: h", "DEL NullLiteral", "DEL TextElement: Otherwise continue to Step 5.", "DEL SimpleName: incrementModCount", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleType: K", "DEL QualifiedName: Map.Entry", "DEL QualifiedName: parent.bitIndex", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL TextElement:  allows us to return something through a Method's", "DEL SimpleType: Map.Entry", "DEL VariableDeclarationFragment", "DEL SimpleName: V", "DEL MethodDeclaration", "DEL QualifiedName: left.bitIndex", "DEL SimpleName: entry", "DEL ExpressionStatement", "DEL Block", "DEL ReturnStatement", "DEL SimpleType: TrieEntry", "DEL ReturnStatement", "DEL SimpleName: nextEntry", "DEL SimpleName: cursor", "DEL InstanceofExpression", "DEL Modifier: final", "DEL SimpleName: parent", "DEL ReturnStatement", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL QualifiedName: entry.left", "DEL SimpleName: TrieEntry", "DEL MethodInvocation", "DEL TypeDeclaration: class", "DEL SimpleName: isInternalNode", "DEL TextElement: Returns the first entry the ", "DEL SimpleName: buffer", "DEL SimpleName: item", "DEL ExpressionStatement", "DEL SimpleName: buffer", "DEL SimpleName: entry", "DEL SimpleName: lengthInBits", "DEL SingleVariableDeclaration", "DEL SimpleName: Set", "DEL SimpleName: Trie", "DEL QualifiedName: path.left", "DEL ReturnStatement", "DEL QualifiedName: root.left", "DEL NullLiteral", "DEL SimpleType: V", "DEL MethodRefParameter", "DEL InfixExpression: !=", "DEL Javadoc", "DEL SimpleName: root", "DEL SimpleName: lengthInBits", "DEL SimpleName: CONTINUE", "DEL Assignment: =", "DEL SimpleName: key", "DEL ReturnStatement", "DEL SimpleType: BasicEntry", "DEL SimpleType: K", "DEL SingleVariableDeclaration", "DEL SimpleName: cursor", "DEL SimpleName: entry", "DEL SimpleName: entry", "DEL ExpressionStatement", "DEL TextElement: Removes an internal entry from the ", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL PrefixExpression: !", "DEL SimpleName: StringBuilder", "DEL QualifiedName: path.bitIndex", "DEL QualifiedName: parent.right", "DEL Javadoc", "DEL Javadoc", "DEL MarkerAnnotation", "DEL Block", "DEL StringLiteral: \", \"", "DEL SimpleType: Object", "DEL SimpleName: lengthInBits", "DEL Javadoc", "DEL SimpleName: removeEntry", "DEL SimpleName: isEmpty", "DEL SimpleName: firstEntry", "DEL MethodInvocation", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: remove", "DEL Modifier: final", "DEL Block", "DEL TextElement: is related to the ", "DEL SimpleName: current", "DEL SimpleType: AbstractCollection", "DEL SimpleType: V", "DEL Modifier: final", "DEL Block", "DEL SimpleType: V", "DEL QualifiedName: h.left", "DEL SimpleName: TrieEntry", "DEL TextElement: wise there's no difference (except for the need to load the", "DEL SimpleName: selectR", "DEL ReturnStatement", "DEL SimpleName: V", "DEL SimpleName: getNearestEntryForKey", "DEL SimpleName: serialVersionUID", "DEL PrimitiveType: int", "DEL SimpleName: K", "DEL TypeDeclaration: class", "DEL SimpleType: V", "DEL SimpleName: K", "DEL MethodInvocation", "DEL SimpleName: predecessor", "DEL SimpleType: K", "DEL VariableDeclarationFragment", "DEL SimpleName: isNullBitKey", "DEL ParameterizedType: Collection<V>", "DEL QualifiedName: Map.Entry", "DEL QualifiedName: current.left", "DEL Block", "DEL TextElement: The actual get implementation. This is very similar to", "DEL InfixExpression: ==", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: getNearestEntryForKey", "DEL QualifiedName: p.parent", "DEL SimpleType: V", "DEL SimpleName: lengthInBits", "DEL SimpleType: V", "DEL Block", "DEL SimpleName: left", "DEL SimpleName: V", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: lengthInBits", "DEL SimpleName: key", "DEL InfixExpression: ==", "DEL SimpleType: TrieIterator", "DEL SingleVariableDeclaration", "DEL SimpleName: p", "DEL SimpleName: isEmpty", "DEL QualifiedName: h.left.parent", "DEL Modifier: volatile", "DEL VariableDeclarationFragment", "DEL QualifiedName: entry.key", "DEL SimpleName: Object", "DEL SimpleType: TrieEntry", "DEL NullLiteral", "DEL MethodDeclaration", "DEL SimpleType: KeyAnalyzer", "DEL Block", "DEL QualifiedName: p.right", "DEL ParameterizedType: TrieEntry<K,V>", "DEL ParameterizedType: AbstractCollection<V>", "DEL SimpleType: Cursor", "DEL QualifiedName: current.left", "DEL SimpleType: IllegalArgumentException", "DEL ThisExpression", "DEL SimpleName: TrieEntry", "DEL SimpleName: isEmpty", "DEL StringLiteral: \", \"", "DEL MethodDeclaration", "DEL SimpleType: V", "DEL SimpleName: TrieEntry", "DEL MethodRefParameter", "DEL NullLiteral", "DEL SimpleName: isBitSet", "DEL SimpleName: compareKeys", "DEL SimpleName: V", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: set", "DEL Modifier: public", "DEL StringLiteral: \"predecessor=\"", "DEL Block", "DEL Modifier: final", "DEL MethodDeclaration", "DEL SimpleType: V", "DEL QualifiedName: p.right.predecessor", "DEL Modifier: volatile", "DEL TagElement", "DEL SimpleType: KeyAnalyzer", "DEL SimpleType: Reference", "DEL StringLiteral: \"left=\"", "DEL VariableDeclarationFragment", "DEL TagElement: @link", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL TextElement: one (1) but that leads to compiler warnings. Computationally and memory", "DEL QualifiedName: child.bitIndex", "DEL SimpleName: current", "DEL Block", "DEL Javadoc", "DEL SimpleName: PatriciaTrieBase", "DEL SimpleName: firstEntry", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleType: TrieEntry", "DEL Block", "DEL SimpleName: TrieEntry", "DEL SimpleType: V", "DEL ExpressionStatement", "DEL SimpleType: K", "DEL SimpleName: path", "DEL TagElement", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL SimpleType: TrieEntry", "DEL Assignment: =", "DEL Modifier: final", "DEL SimpleName: child", "DEL NullLiteral", "DEL SimpleName: isEmpty", "DEL Assignment: =", "DEL InfixExpression: !=", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL TagElement", "DEL ParameterizedType: TrieEntry<K,V>", "DEL TextElement: A helper method to increment the ", "DEL TextElement: If the given entry is null, returns the first node.", "DEL SimpleName: V", "DEL SimpleName: p", "DEL SimpleType: V", "DEL TextElement:  4.0", "DEL QualifiedName: Map.Entry", "DEL SwitchCase", "DEL Block", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL SimpleName: current", "DEL QualifiedName: current.bitIndex", "DEL FieldDeclaration", "DEL TextElement: Otherwise, use it.", "DEL SimpleName: h", "DEL Assignment: =", "DEL SwitchCase", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL SimpleName: reference", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL SimpleName: p", "DEL IfStatement", "DEL SimpleName: start", "DEL SimpleName: K", "DEL ParameterizedType: Set<Map.Entry<K,V>>", "DEL QualifiedName: h.parent", "DEL StringLiteral: \" is not an external Entry!\"", "DEL SimpleName: V", "DEL MethodInvocation", "DEL SimpleName: next", "DEL QualifiedName: current.left", "DEL SimpleName: K", "DEL MethodInvocation", "DEL MethodRefParameter", "DEL SimpleName: parent", "DEL SimpleName: current", "DEL TextElement: Returns the next ", "DEL SimpleName: values", "DEL TagElement", "DEL ReturnStatement", "DEL SimpleName: Iterator", "DEL SimpleName: TrieEntry", "DEL Assignment: =", "DEL ExpressionStatement", "DEL TextElement: this code. The Idea is essentially that Entry p takes Entry h's", "DEL SimpleName: node", "DEL QualifiedName: h.bitIndex", "DEL Block", "DEL SimpleName: key", "DEL SimpleName: reference", "DEL SimpleName: Set", "DEL TagElement: @link", "DEL SimpleType: TrieIterator", "DEL SimpleName: incrementModCount", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL Block", "DEL SimpleType: Cursor", "DEL MethodInvocation", "DEL TagElement", "DEL ParameterizedType: Map.Entry<K,V>", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: removeEntry", "DEL SimpleName: findNext", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL MethodDeclaration", "DEL NullLiteral", "DEL SimpleName: TrieIterator", "DEL InfixExpression: >=", "DEL SimpleName: current", "DEL SimpleName: V", "DEL SimpleName: k", "DEL MethodInvocation", "DEL SimpleName: key", "DEL Assignment: =", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleType: TrieEntry", "DEL ExpressionStatement", "DEL SimpleType: K", "DEL IfStatement", "DEL QualifiedName: current.parent.right", "DEL SimpleName: previous", "DEL SimpleName: it", "DEL InfixExpression: !=", "DEL SimpleName: o", "DEL Modifier: public", "DEL MethodInvocation", "DEL InfixExpression: <=", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL TextElement:  that returns Key Objects.", "DEL StringLiteral: \" is not an internal Entry!\"", "DEL FieldDeclaration", "DEL SimpleType: NullPointerException", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Iterator", "DEL IfStatement", "DEL Modifier: public", "DEL SimpleName: nextEntry", "DEL ExpressionStatement", "DEL TextElement: Goes left through the tree until it finds a valid node.", "DEL MethodInvocation", "DEL Modifier: private", "DEL Assignment: =", "DEL IfStatement", "DEL SimpleName: V", "DEL PrimitiveType: int", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleType: TrieEntry", "DEL Assignment: =", "DEL ReturnStatement", "DEL FieldDeclaration", "DEL MarkerAnnotation", "DEL SimpleName: TrieEntry", "DEL QualifiedName: h.bitIndex", "DEL QualifiedName: h.bitIndex", "DEL ExpressionStatement", "DEL TagElement: @link", "DEL SimpleName: bitIndex", "DEL QualifiedName: found.key", "DEL SimpleName: h", "DEL Block", "DEL MethodInvocation", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: Override", "DEL MethodInvocation", "DEL SimpleName: lengthInBits", "DEL QualifiedName: from.bitIndex", "DEL SimpleName: k", "DEL ParameterizedType: TrieEntry<K,V>", "DEL ParameterizedType: TrieEntry<K,V>", "DEL ExpressionStatement", "DEL SimpleName: selectR", "DEL FieldDeclaration", "DEL SimpleName: lengthInBits", "DEL MethodDeclaration", "DEL Block", "DEL MethodInvocation", "DEL SimpleType: K", "DEL PrefixExpression: !", "DEL SimpleName: selectR", "DEL Modifier: final", "DEL SimpleName: isValidUplink", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: current", "DEL InfixExpression: ==", "DEL ClassInstanceCreation", "DEL SimpleName: item", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL TextElement: for finding knowing if a given key exists (and finding the value", "DEL SimpleName: Reference", "DEL SimpleName: current", "DEL SimpleName: V", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL SimpleName: current", "DEL ReturnStatement", "DEL SimpleName: firstEntry", "DEL QualifiedName: right.bitIndex", "DEL SimpleName: reference", "DEL SingleVariableDeclaration", "DEL SimpleName: current", "DEL Assignment: =", "DEL QualifiedName: Map.Entry", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: key", "DEL SimpleType: TrieEntry", "DEL VariableDeclarationStatement", "DEL SimpleName: h", "DEL ExpressionStatement", "DEL TagElement", "DEL Assignment: =", "DEL SimpleType: K", "DEL PrimitiveType: boolean", "DEL Block", "DEL TagElement: @throws", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: current", "DEL Assignment: =", "DEL SimpleName: predecessor", "DEL Modifier: final", "DEL IfStatement", "DEL SimpleName: TrieEntry", "DEL Block", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: nextEntry", "DEL SimpleName: current", "DEL QualifiedName: h.left", "DEL SimpleName: o", "DEL SimpleType: V", "DEL PrefixExpression: !", "DEL Modifier: final", "DEL ExpressionStatement", "DEL Modifier: final", "DEL IfStatement", "DEL SimpleName: root", "DEL SimpleName: K", "DEL ExpressionStatement", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: selectR", "DEL QualifiedName: entry.key", "DEL SimpleName: TrieIterator", "DEL SimpleType: V", "DEL QualifiedName: path.right", "DEL SimpleType: E", "DEL SimpleName: TrieEntry", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: entry", "DEL TextElement: Adds the given ", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL InfixExpression: ==", "DEL Assignment: =", "DEL Modifier: public", "DEL QualifiedName: current.right", "DEL SimpleName: current", "DEL SimpleName: PatriciaTrieBase", "DEL SimpleName: CONTINUE", "DEL QualifiedName: found.key", "DEL SimpleName: previous", "DEL SimpleName: V", "DEL QualifiedName: current.right", "DEL MethodInvocation", "DEL SimpleName: append", "DEL TextElement: A helper method to increment the modification counter.", "DEL IfStatement", "DEL SimpleName: right", "DEL ReturnStatement", "DEL SimpleName: setKeyValue", "DEL QualifiedName: h.bitIndex", "DEL ReturnStatement", "DEL Block", "DEL ThisExpression", "DEL Block", "DEL StringLiteral: \", \"", "DEL TextElement: The basic premise is that each iteration can follow the following steps:", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleType: V", "DEL SimpleType: V", "DEL SimpleType: K", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL SimpleName: V", "DEL SimpleName: K", "DEL SimpleName: value", "DEL SimpleName: AbstractCollection", "DEL IfStatement", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL SimpleName: V", "DEL NullLiteral", "DEL Block", "DEL SimpleName: k", "DEL QualifiedName: predecessor.bitIndex", "DEL Modifier: protected", "DEL SimpleName: Iterator", "DEL SimpleName: isBitSet", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: current", "DEL QualifiedName: entry.left", "DEL SimpleName: append", "DEL SimpleName: size", "DEL QualifiedName: node.predecessor", "DEL BooleanLiteral: true", "DEL Block", "DEL SimpleName: decrementSize", "DEL MethodInvocation", "DEL Modifier: final", "DEL NullLiteral", "DEL SimpleType: TrieEntry", "DEL PrefixExpression: !", "DEL TextElement:  interface.", "DEL SimpleType: Map", "DEL Block", "DEL Modifier: public", "DEL TagElement", "DEL SimpleName: lengthInBits", "DEL SimpleName: key", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleType: TrieEntry", "DEL MethodDeclaration", "DEL SimpleType: K", "DEL MethodDeclaration", "DEL SimpleType: TrieEntry", "DEL QualifiedName: current.key", "DEL ExpressionStatement", "DEL Block", "DEL QualifiedName: current.parent", "DEL SimpleName: keySet", "DEL SimpleName: parent", "DEL ClassInstanceCreation", "DEL SimpleName: V", "DEL ReturnStatement", "DEL FieldAccess", "DEL SimpleName: Trie", "DEL SimpleName: selectR", "DEL QualifiedName: parent.bitIndex", "DEL PrimitiveType: int", "DEL SimpleName: K", "DEL SimpleName: buffer", "DEL TagElement: @link", "DEL PrefixExpression: -", "DEL SimpleName: key", "DEL SimpleType: V", "DEL SimpleName: append", "DEL Block", "DEL Modifier: public", "DEL ReturnStatement", "DEL SwitchCase", "DEL SimpleName: remove", "DEL SimpleName: V", "DEL MethodInvocation", "DEL ParameterizedType: TrieEntry<K,V>", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL SimpleName: cursor", "DEL SimpleName: Override", "DEL FieldAccess", "DEL SimpleName: isBitSet", "DEL ParameterizedType: Iterator<Map.Entry<K,V>>", "DEL QualifiedName: p.left", "DEL Javadoc", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL Javadoc", "DEL InfixExpression: <=", "DEL ExpressionStatement", "DEL InfixExpression: <=", "DEL TextElement: A ", "DEL SimpleName: current", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: lengthInBits", "DEL ReturnStatement", "DEL TagElement: @link", "DEL FieldDeclaration", "DEL Modifier: private", "DEL ExpressionStatement", "DEL SimpleType: V", "DEL MethodInvocation", "DEL StringLiteral: \"]\"", "DEL ParameterizedType: Reference<Map.Entry<K,V>>", "DEL FieldDeclaration", "DEL SimpleName: IllegalArgumentException", "DEL TagElement: @link", "DEL NullLiteral", "DEL SimpleType: E", "DEL IfStatement", "DEL Block", "DEL SimpleName: K", "DEL SimpleName: key", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL WhileStatement", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: size", "DEL SimpleName: TrieEntry", "DEL SimpleName: h", "DEL SimpleName: contains", "DEL TagElement", "DEL SimpleType: V", "DEL ParameterizedType: TrieEntry<K,V>", "DEL Block", "DEL TextElement: .", "DEL SimpleName: V", "DEL SimpleType: K", "DEL TagElement: @link", "DEL SimpleType: K", "DEL Modifier: final", "DEL SimpleName: V", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleType: TrieEntry", "DEL SimpleType: Map.Entry", "DEL SimpleName: TrieEntry", "DEL VariableDeclarationFragment", "DEL InfixExpression: <=", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: key", "DEL Block", "DEL PrefixExpression: !", "DEL Block", "DEL SimpleName: lengthInBits", "DEL MarkerAnnotation", "DEL SimpleName: current", "DEL SimpleName: Map", "DEL IfStatement", "DEL StringLiteral: \"Failed to put: \"", "DEL SimpleName: lengthInBits", "DEL SimpleType: TrieEntry", "DEL MethodInvocation", "DEL Block", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL InfixExpression: &&", "DEL SimpleName: lengthInBits", "DEL IfStatement", "DEL SimpleName: previous", "DEL SimpleType: V", "DEL Javadoc", "DEL SimpleName: root", "DEL MethodInvocation", "DEL SimpleType: K", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL Modifier: private", "DEL Modifier: public", "DEL SimpleName: K", "DEL MethodInvocation", "DEL TagElement: @version", "DEL SimpleName: EXIT", "DEL SimpleName: append", "DEL SimpleType: Map.Entry", "DEL SimpleType: K", "DEL Modifier: final", "DEL SimpleName: castKey", "DEL SimpleName: select", "DEL FieldAccess", "DEL MethodDeclaration", "DEL SimpleName: get", "DEL SimpleName: K", "DEL SimpleName: contains", "DEL TextElement: Each of these fields are initialized to contain an instance of the", "DEL NullLiteral", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodDeclaration", "DEL NullLiteral", "DEL SimpleType: TrieEntry", "DEL TextElement: method but without its overhead because we're selecting only one best matching Entry from the ", "DEL Block", "DEL Block", "DEL SimpleName: buffer", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL TagElement: @link", "DEL TagElement", "DEL SimpleName: K", "DEL SimpleName: K", "DEL NumberLiteral: 1", "DEL VariableDeclarationFragment", "DEL SimpleType: K", "DEL Modifier: final", "DEL SimpleName: h", "DEL SimpleName: V", "DEL SimpleType: V", "DEL ExpressionStatement", "DEL SimpleName: Override", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL ThisExpression", "DEL InfixExpression: !=", "DEL QualifiedName: root.left", "DEL IfStatement", "DEL SimpleType: K", "DEL PrimitiveType: int", "DEL SimpleName: path", "DEL SimpleName: K", "DEL SimpleName: Trie", "DEL SimpleType: V", "DEL Block", "DEL SimpleName: item", "DEL BooleanLiteral: false", "DEL SimpleName: lengthInBits", "DEL ExpressionStatement", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: Override", "DEL Javadoc", "DEL SimpleName: append", "DEL SimpleType: V", "DEL SimpleName: buffer", "DEL SimpleName: K", "DEL SimpleType: TrieEntry", "DEL NullLiteral", "DEL Modifier: public", "DEL SimpleName: append", "DEL PrimitiveType: void", "DEL TagElement: @link", "DEL SimpleName: bitIndex", "DEL MethodDeclaration", "DEL SimpleName: K", "DEL SimpleType: TrieEntry", "DEL SimpleType: TrieEntry", "DEL SimpleName: nextEntry", "DEL Modifier: private", "DEL SimpleName: Reference", "DEL SimpleName: entry", "DEL SimpleName: isBitSet", "DEL Block", "DEL SimpleType: K", "DEL SimpleName: reference", "DEL VariableDeclarationFragment", "DEL SimpleName: TrieEntry", "DEL ParameterizedType: Iterator<E>", "DEL TextElement: as a hint that the last node we returned was 'previous' (so we know not to return", "DEL TextElement: A helper method to decrement the ", "DEL SimpleName: nextEntryImpl", "DEL TextElement: d) If we already returned the left node, break the scan.", "DEL Modifier: final", "DEL ParameterizedType: TrieEntry<?,?>", "DEL SimpleName: K", "DEL TextElement:  that returns ", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleName: selectR", "DEL IfStatement", "DEL MethodInvocation", "DEL TextElement:  as returned by ", "DEL IfStatement", "DEL SimpleName: append", "DEL FieldAccess", "DEL SimpleName: candidate", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: child", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL Modifier: final", "DEL SimpleType: K", "DEL ExpressionStatement", "DEL IfStatement", "DEL Modifier: final", "DEL SimpleName: key", "DEL SimpleType: K", "DEL PrimitiveType: void", "DEL SimpleName: K", "DEL VariableDeclarationStatement", "DEL SimpleType: K", "DEL SimpleName: V", "DEL ExpressionStatement", "DEL ThisExpression", "DEL InfixExpression: <=", "DEL NullLiteral", "DEL ExpressionStatement", "DEL SimpleName: incrementModCount", "DEL SimpleType: K", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleType: V", "DEL SimpleName: cursor", "DEL Block", "DEL TagElement: @link", "DEL Assignment: =", "DEL SimpleType: V", "DEL WildcardType: ?", "DEL SimpleName: isExternalNode", "DEL NullLiteral", "DEL SimpleName: Collection", "DEL PrimitiveType: void", "DEL SimpleName: Override", "DEL IfStatement", "DEL SimpleType: V", "DEL TagElement: @link", "DEL SimpleName: buffer", "DEL SimpleName: values", "DEL SingleVariableDeclaration", "DEL SimpleName: modCount", "DEL SimpleName: toString", "DEL SimpleName: K", "DEL SimpleName: lengthInBits", "DEL ThrowStatement", "DEL MethodInvocation", "DEL StringLiteral: \"value=\"", "DEL SimpleName: nextEntry", "DEL TypeDeclaration: class", "DEL SimpleName: m", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: K", "DEL SimpleName: current", "DEL MethodDeclaration", "DEL SimpleType: KeyIterator", "DEL PrimitiveType: boolean", "DEL SimpleName: p", "DEL SimpleName: hasNext", "DEL ThisExpression", "DEL SimpleName: entrySet", "DEL SimpleName: TrieEntry", "DEL ConditionalExpression", "DEL SimpleType: K", "DEL TypeParameter", "DEL Assignment: =", "DEL SimpleName: K", "DEL SimpleName: set", "DEL SimpleName: EntryIterator", "DEL Block", "DEL ParameterizedType: TrieEntry<K,V>", "DEL SimpleName: Override", "DEL MethodInvocation", "DEL SimpleName: PatriciaTrieBase", "DEL TextElement: An ", "DEL NumberLiteral: 0", "DEL SimpleName: size", "DEL SimpleName: followLeft", "DEL SimpleName: entry", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: Iterator", "DEL QualifiedName: parent.bitIndex", "DEL SimpleName: K", "DEL SimpleName: nextEntryImpl", "DEL SimpleName: nextEntry", "DEL TextElement: place in the trie which requires some re-wiring.", "DEL TextElement:  is storing.", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: entry", "DEL SimpleName: isEmpty", "DEL ParameterizedType: Map.Entry<K,V>", "DEL QualifiedName: current.parent.right", "DEL Block", "DEL SimpleName: append", "DEL SimpleName: next", "DEL MethodDeclaration", "DEL SimpleName: expectedModCount", "DEL SimpleName: K", "DEL ReturnStatement", "DEL Block", "DEL SimpleType: TrieEntry", "DEL IfStatement", "DEL ParameterizedType: Map.Entry<?,?>", "DEL Block", "DEL TypeDeclaration: class", "DEL SimpleType: K", "DEL InfixExpression: ==", "DEL SimpleType: V", "DEL TextElement: that we're not the right child of.", "DEL BreakStatement", "DEL MethodInvocation", "DEL SimpleType: EntryIterator", "DEL SimpleName: V", "DEL ExpressionStatement", "DEL TagElement: @link", "DEL Modifier: public", "DEL Block", "DEL SimpleType: V", "DEL ExpressionStatement", "DEL SimpleName: Override", "DEL BreakStatement", "DEL MethodInvocation"]}]}}, {"PatriciaTrieBase_diff": {"operations": ["Delete QualifiedName: org.apache.commons.collections4.trie(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.AbstractCollection(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.AbstractSet(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Collection(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.ConcurrentModificationException(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.Iterator(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.Map(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.util.NoSuchElementException(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.util.Set(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: org.apache.commons.collections4.Trie.Cursor.Decision(18)", "Delete ImportDeclaration(19)", "Delete TextElement: This class implements the base PATRICIA algorithm and everything that(20)", "Delete TextElement: is related to the (21)", "Delete SimpleName: Map(22)", "Delete TagElement: @link(23)", "Delete TextElement:  interface.(24)", "Delete TagElement(25)", "Delete TextElement:  4.0(26)", "Delete TagElement: @since(27)", "Delete TextElement:  $Id$(28)", "Delete TagElement: @version(29)", "Delete Javadoc(30)", "Delete Modifier: abstract(31)", "Delete SimpleName: PatriciaTrieBase(32)", "Delete SimpleName: K(33)", "Delete TypeParameter(34)", "Delete SimpleName: V(35)", "Delete TypeParameter(36)", "Delete SimpleName: AbstractBitwiseTrie(37)", "Delete SimpleType: AbstractBitwiseTrie(38)", "Delete SimpleName: K(39)", "Delete SimpleType: K(40)", "Delete SimpleName: V(41)", "Delete SimpleType: V(42)", "Delete ParameterizedType: AbstractBitwiseTrie<K,V>(43)", "Delete Modifier: private(44)", "Delete Modifier: static(45)", "Delete Modifier: final(46)", "Delete PrimitiveType: long(47)", "Delete SimpleName: serialVersionUID(48)", "Delete NumberLiteral: 5155253417231339498L(49)", "Delete VariableDeclarationFragment(50)", "Delete FieldDeclaration(51)", "Delete TextElement: The root node of the (52)", "Delete SimpleName: Trie(53)", "Delete TagElement: @link(54)", "Delete TextElement: .(55)", "Delete TagElement(56)", "Delete Javadoc(57)", "Delete Modifier: final(58)", "Delete SimpleName: TrieEntry(59)", "Delete SimpleType: TrieEntry(60)", "Delete SimpleName: K(61)", "Delete SimpleType: K(62)", "Delete SimpleName: V(63)", "Delete SimpleType: V(64)", "Delete ParameterizedType: TrieEntry<K,V>(65)", "Delete SimpleName: root(66)", "Delete SimpleName: TrieEntry(67)", "Delete SimpleType: TrieEntry(68)", "Delete SimpleName: K(69)", "Delete SimpleType: K(70)", "Delete SimpleName: V(71)", "Delete SimpleType: V(72)", "Delete ParameterizedType: TrieEntry<K,V>(73)", "Delete NullLiteral(74)", "Delete NullLiteral(75)", "Delete NumberLiteral: 1(76)", "Delete PrefixExpression: -(77)", "Delete ClassInstanceCreation(78)", "Delete VariableDeclarationFragment(79)", "Delete FieldDeclaration(80)", "Delete TextElement: Each of these fields are initialized to contain an instance of the(81)", "Delete TextElement: appropriate view the first time this view is requested. The views are(82)", "Delete TextElement: stateless, so there's no reason to create more than one of each.(83)", "Delete TagElement(84)", "Delete Javadoc(85)", "Delete Modifier: private(86)", "Delete Modifier: transient(87)", "Delete Modifier: volatile(88)", "Delete SimpleName: Set(89)", "Delete SimpleType: Set(90)", "Delete SimpleName: K(91)", "Delete SimpleType: K(92)", "Delete ParameterizedType: Set<K>(93)", "Delete SimpleName: keySet(94)", "Delete VariableDeclarationFragment(95)", "Delete FieldDeclaration(96)", "Delete Modifier: private(97)", "Delete Modifier: transient(98)", "Delete Modifier: volatile(99)", "Delete SimpleName: Collection(100)", "Delete SimpleType: Collection(101)", "Delete SimpleName: V(102)", "Delete SimpleType: V(103)", "Delete ParameterizedType: Collection<V>(104)", "Delete SimpleName: values(105)", "Delete VariableDeclarationFragment(106)", "Delete FieldDeclaration(107)", "Delete Modifier: private(108)", "Delete Modifier: transient(109)", "Delete Modifier: volatile(110)", "Delete SimpleName: Set(111)", "Delete SimpleType: Set(112)", "Delete QualifiedName: Map.Entry(113)", "Delete SimpleType: Map.Entry(114)", "Delete SimpleName: K(115)", "Delete SimpleType: K(116)", "Delete SimpleName: V(117)", "Delete SimpleType: V(118)", "Delete ParameterizedType: Map.Entry<K,V>(119)", "Delete ParameterizedType: Set<Map.Entry<K,V>>(120)", "Delete SimpleName: entrySet(121)", "Delete VariableDeclarationFragment(122)", "Delete FieldDeclaration(123)", "Delete TextElement: The current size of the (124)", "Delete SimpleName: Trie(125)", "Delete TagElement: @link(126)", "Delete TextElement: . (127)", "Delete TagElement(128)", "Delete Javadoc(129)", "Delete Modifier: private(130)", "Delete PrimitiveType: int(131)", "Delete SimpleName: size(132)", "Delete NumberLiteral: 0(133)", "Delete VariableDeclarationFragment(134)", "Delete FieldDeclaration(135)", "Delete TextElement: The number of times this (136)", "Delete SimpleName: Trie(137)", "Delete TagElement: @link(138)", "Delete TextElement:  has been modified.(139)", "Delete TextElement: It's used to detect concurrent modifications and fail-fast the (140)", "Delete SimpleName: Iterator(141)", "Delete TagElement: @link(142)", "Delete TextElement: s.(143)", "Delete TagElement(144)", "Delete Javadoc(145)", "Delete Modifier: protected(146)", "Delete Modifier: transient(147)", "Delete PrimitiveType: int(148)", "Delete SimpleName: modCount(149)", "Delete NumberLiteral: 0(150)", "Delete VariableDeclarationFragment(151)", "Delete FieldDeclaration(152)", "Delete Modifier: public(153)", "Delete SimpleName: PatriciaTrieBase(154)", "Delete Modifier: final(155)", "Delete SimpleName: KeyAnalyzer(156)", "Delete SimpleType: KeyAnalyzer(157)", "Delete SimpleName: K(158)", "Delete SimpleType: K(159)", "Delete WildcardType: ? super K(160)", "Delete ParameterizedType: KeyAnalyzer<? super K>(161)", "Delete SimpleName: keyAnalyzer(162)", "Delete SingleVariableDeclaration(163)", "Delete SimpleName: keyAnalyzer(164)", "Delete SuperConstructorInvocation(165)", "Delete Block(166)", "Delete MethodDeclaration(167)", "Delete TextElement: Constructs a new (168)", "Delete QualifiedName: org.apache.commons.collections4.Trie(169)", "Delete TextElement:  Trie(170)", "Delete TagElement: @link(171)", "Delete TextElement:  using the given(172)", "Delete SimpleName: KeyAnalyzer(173)", "Delete TagElement: @link(174)", "Delete TextElement:  and initializes the (175)", "Delete QualifiedName: org.apache.commons.collections4.Trie(176)", "Delete TextElement:  Trie(177)", "Delete TagElement: @link(178)", "Delete TextElement: with the values from the provided (179)", "Delete SimpleName: Map(180)", "Delete TagElement: @link(181)", "Delete TextElement: .(182)", "Delete TagElement(183)", "Delete Javadoc(184)", "Delete Modifier: public(185)", "Delete SimpleName: PatriciaTrieBase(186)", "Delete Modifier: final(187)", "Delete SimpleName: KeyAnalyzer(188)", "Delete SimpleType: KeyAnalyzer(189)", "Delete SimpleName: K(190)", "Delete SimpleType: K(191)", "Delete WildcardType: ? super K(192)", "Delete ParameterizedType: KeyAnalyzer<? super K>(193)", "Delete SimpleName: keyAnalyzer(194)", "Delete SingleVariableDeclaration(195)", "Delete Modifier: final(196)", "Delete SimpleName: Map(197)", "Delete SimpleType: Map(198)", "Delete SimpleName: K(199)", "Delete SimpleType: K(200)", "Delete WildcardType: ? extends K(201)", "Delete SimpleName: V(202)", "Delete SimpleType: V(203)", "Delete WildcardType: ? extends V(204)", "Delete ParameterizedType: Map<? extends K,? extends V>(205)", "Delete SimpleName: m(206)", "Delete SingleVariableDeclaration(207)", "Delete SimpleName: keyAnalyzer(208)", "Delete SuperConstructorInvocation(209)", "Delete SimpleName: putAll(210)", "Delete SimpleName: m(211)", "Delete MethodInvocation(212)", "Delete ExpressionStatement(213)", "Delete Block(214)", "Delete MethodDeclaration(215)", "Delete SimpleName: Override(216)", "Delete MarkerAnnotation(217)", "Delete Modifier: public(218)", "Delete PrimitiveType: void(219)", "Delete SimpleName: clear(220)", "Delete QualifiedName: root.key(221)", "Delete NullLiteral(222)", "Delete Assignment: =(223)", "Delete ExpressionStatement(224)", "Delete QualifiedName: root.bitIndex(225)", "Delete NumberLiteral: 1(226)", "Delete PrefixExpression: -(227)", "Delete Assignment: =(228)", "Delete ExpressionStatement(229)", "Delete QualifiedName: root.value(230)", "Delete NullLiteral(231)", "Delete Assignment: =(232)", "Delete ExpressionStatement(233)", "Delete QualifiedName: root.parent(234)", "Delete NullLiteral(235)", "Delete Assignment: =(236)", "Delete ExpressionStatement(237)", "Delete QualifiedName: root.left(238)", "Delete SimpleName: root(239)", "Delete Assignment: =(240)", "Delete ExpressionStatement(241)", "Delete QualifiedName: root.right(242)", "Delete NullLiteral(243)", "Delete Assignment: =(244)", "Delete ExpressionStatement(245)", "Delete QualifiedName: root.predecessor(246)", "Delete SimpleName: root(247)", "Delete Assignment: =(248)", "Delete ExpressionStatement(249)", "Delete SimpleName: size(250)", "Delete NumberLiteral: 0(251)", "Delete Assignment: =(252)", "Delete ExpressionStatement(253)", "Delete SimpleName: incrementModCount(254)", "Delete MethodInvocation(255)", "Delete ExpressionStatement(256)", "Delete Block(257)", "Delete MethodDeclaration(258)", "Delete SimpleName: Override(259)", "Delete MarkerAnnotation(260)", "Delete Modifier: public(261)", "Delete PrimitiveType: int(262)", "Delete SimpleName: size(263)", "Delete SimpleName: size(264)", "Delete ReturnStatement(265)", "Delete Block(266)", "Delete MethodDeclaration(267)", "Delete TextElement: A helper method to increment the (268)", "Delete SimpleName: Trie(269)", "Delete TagElement: @link(270)", "Delete TextElement:  size and the modification counter.(271)", "Delete TagElement(272)", "Delete Javadoc(273)", "Delete PrimitiveType: void(274)", "Delete SimpleName: incrementSize(275)", "Delete SimpleName: size(276)", "Delete PostfixExpression: ++(277)", "Delete ExpressionStatement(278)", "Delete SimpleName: incrementModCount(279)", "Delete MethodInvocation(280)", "Delete ExpressionStatement(281)", "Delete Block(282)", "Delete MethodDeclaration(283)", "Delete TextElement: A helper method to decrement the (284)", "Delete SimpleName: Trie(285)", "Delete TagElement: @link(286)", "Delete TextElement:  size and increment the modification counter.(287)", "Delete TagElement(288)", "Delete Javadoc(289)", "Delete PrimitiveType: void(290)", "Delete SimpleName: decrementSize(291)", "Delete SimpleName: size(292)", "Delete PostfixExpression: --(293)", "Delete ExpressionStatement(294)", "Delete SimpleName: incrementModCount(295)", "Delete MethodInvocation(296)", "Delete ExpressionStatement(297)", "Delete Block(298)", "Delete MethodDeclaration(299)", "Delete TextElement: A helper method to increment the modification counter.(300)", "Delete TagElement(301)", "Delete Javadoc(302)", "Delete Modifier: private(303)", "Delete PrimitiveType: void(304)", "Delete SimpleName: incrementModCount(305)", "Delete SimpleName: modCount(306)", "Delete PrefixExpression: ++(307)", "Delete ExpressionStatement(308)", "Delete Block(309)", "Delete MethodDeclaration(310)", "Delete SimpleName: Override(311)", "Delete MarkerAnnotation(312)", "Delete Modifier: public(313)", "Delete SimpleName: V(314)", "Delete SimpleType: V(315)", "Delete SimpleName: put(316)", "Delete Modifier: final(317)", "Delete SimpleName: K(318)", "Delete SimpleType: K(319)", "Delete SimpleName: key(320)", "Delete SingleVariableDeclaration(321)", "Delete Modifier: final(322)", "Delete SimpleName: V(323)", "Delete SimpleType: V(324)", "Delete SimpleName: value(325)", "Delete SingleVariableDeclaration(326)", "Delete SimpleName: key(327)", "Delete NullLiteral(328)", "Delete InfixExpression: ==(329)", "Delete SimpleName: NullPointerException(330)", "Delete SimpleType: NullPointerException(331)", "Delete StringLiteral: \"Key cannot be null\"(332)", "Delete ClassInstanceCreation(333)", "Delete ThrowStatement(334)", "Delete Block(335)", "Delete IfStatement(336)", "Delete Modifier: final(337)", "Delete PrimitiveType: int(338)", "Delete SimpleName: lengthInBits(339)", "Delete SimpleName: lengthInBits(340)", "Delete SimpleName: key(341)", "Delete MethodInvocation(342)", "Delete VariableDeclarationFragment(343)", "Delete VariableDeclarationStatement(344)", "Delete SimpleName: lengthInBits(345)", "Delete NumberLiteral: 0(346)", "Delete InfixExpression: ==(347)", "Delete SimpleName: root(348)", "Delete SimpleName: isEmpty(349)", "Delete MethodInvocation(350)", "Delete SimpleName: incrementSize(351)", "Delete MethodInvocation(352)", "Delete ExpressionStatement(353)", "Delete Block(354)", "Delete SimpleName: incrementModCount(355)", "Delete MethodInvocation(356)", "Delete ExpressionStatement(357)", "Delete Block(358)", "Delete IfStatement(359)", "Delete SimpleName: root(360)", "Delete SimpleName: setKeyValue(361)", "Delete SimpleName: key(362)", "Delete SimpleName: value(363)", "Delete MethodInvocation(364)", "Delete ReturnStatement(365)", "Delete Block(366)", "Delete IfStatement(367)", "Delete Modifier: final(368)", "Delete SimpleName: TrieEntry(369)", "Delete SimpleType: TrieEntry(370)", "Delete SimpleName: K(371)", "Delete SimpleType: K(372)", "Delete SimpleName: V(373)", "Delete SimpleType: V(374)", "Delete ParameterizedType: TrieEntry<K,V>(375)", "Delete SimpleName: found(376)", "Delete SimpleName: getNearestEntryForKey(377)", "Delete SimpleName: key(378)", "Delete SimpleName: lengthInBits(379)", "Delete MethodInvocation(380)", "Delete VariableDeclarationFragment(381)", "Delete VariableDeclarationStatement(382)", "Delete SimpleName: compareKeys(383)", "Delete SimpleName: key(384)", "Delete QualifiedName: found.key(385)", "Delete MethodInvocation(386)", "Delete SimpleName: found(387)", "Delete SimpleName: isEmpty(388)", "Delete MethodInvocation(389)", "Delete SimpleName: incrementSize(390)", "Delete MethodInvocation(391)", "Delete ExpressionStatement(392)", "Delete Block(393)", "Delete SimpleName: incrementModCount(394)", "Delete MethodInvocation(395)", "Delete ExpressionStatement(396)", "Delete Block(397)", "Delete IfStatement(398)", "Delete SimpleName: found(399)", "Delete SimpleName: setKeyValue(400)", "Delete SimpleName: key(401)", "Delete SimpleName: value(402)", "Delete MethodInvocation(403)", "Delete ReturnStatement(404)", "Delete Block(405)", "Delete IfStatement(406)", "Delete Modifier: final(407)", "Delete PrimitiveType: int(408)", "Delete SimpleName: bitIndex(409)", "Delete SimpleName: bitIndex(410)", "Delete SimpleName: key(411)", "Delete QualifiedName: found.key(412)", "Delete MethodInvocation(413)", "Delete VariableDeclarationFragment(414)", "Delete VariableDeclarationStatement(415)", "Delete SimpleName: KeyAnalyzer(416)", "Delete SimpleName: isOutOfBoundsIndex(417)", "Delete SimpleName: bitIndex(418)", "Delete MethodInvocation(419)", "Delete PrefixExpression: !(420)", "Delete SimpleName: KeyAnalyzer(421)", "Delete SimpleName: isValidBitIndex(422)", "Delete SimpleName: bitIndex(423)", "Delete MethodInvocation(424)", "Delete Modifier: final(425)", "Delete SimpleName: TrieEntry(426)", "Delete SimpleType: TrieEntry(427)", "Delete SimpleName: K(428)", "Delete SimpleType: K(429)", "Delete SimpleName: V(430)", "Delete SimpleType: V(431)", "Delete ParameterizedType: TrieEntry<K,V>(432)", "Delete SimpleName: t(433)", "Delete SimpleName: TrieEntry(434)", "Delete SimpleType: TrieEntry(435)", "Delete SimpleName: K(436)", "Delete SimpleType: K(437)", "Delete SimpleName: V(438)", "Delete SimpleType: V(439)", "Delete ParameterizedType: TrieEntry<K,V>(440)", "Delete SimpleName: key(441)", "Delete SimpleName: value(442)", "Delete SimpleName: bitIndex(443)", "Delete ClassInstanceCreation(444)", "Delete VariableDeclarationFragment(445)", "Delete VariableDeclarationStatement(446)", "Delete SimpleName: addEntry(447)", "Delete SimpleName: t(448)", "Delete SimpleName: lengthInBits(449)", "Delete MethodInvocation(450)", "Delete ExpressionStatement(451)", "Delete SimpleName: incrementSize(452)", "Delete MethodInvocation(453)", "Delete ExpressionStatement(454)", "Delete NullLiteral(455)", "Delete ReturnStatement(456)", "Delete Block(457)", "Delete SimpleName: KeyAnalyzer(458)", "Delete SimpleName: isNullBitKey(459)", "Delete SimpleName: bitIndex(460)", "Delete MethodInvocation(461)", "Delete SimpleName: root(462)", "Delete SimpleName: isEmpty(463)", "Delete MethodInvocation(464)", "Delete SimpleName: incrementSize(465)", "Delete MethodInvocation(466)", "Delete ExpressionStatement(467)", "Delete Block(468)", "Delete SimpleName: incrementModCount(469)", "Delete MethodInvocation(470)", "Delete ExpressionStatement(471)", "Delete Block(472)", "Delete IfStatement(473)", "Delete SimpleName: root(474)", "Delete SimpleName: setKeyValue(475)", "Delete SimpleName: key(476)", "Delete SimpleName: value(477)", "Delete MethodInvocation(478)", "Delete ReturnStatement(479)", "Delete Block(480)", "Delete SimpleName: KeyAnalyzer(481)", "Delete SimpleName: isEqualBitKey(482)", "Delete SimpleName: bitIndex(483)", "Delete MethodInvocation(484)", "Delete SimpleName: found(485)", "Delete SimpleName: root(486)", "Delete InfixExpression: !=(487)", "Delete SimpleName: incrementModCount(488)", "Delete MethodInvocation(489)", "Delete ExpressionStatement(490)", "Delete SimpleName: found(491)", "Delete SimpleName: setKeyValue(492)", "Delete SimpleName: key(493)", "Delete SimpleName: value(494)", "Delete MethodInvocation(495)", "Delete ReturnStatement(496)", "Delete Block(497)", "Delete IfStatement(498)", "Delete Block(499)", "Delete IfStatement(500)", "Delete IfStatement(501)", "Delete IfStatement(502)", "Delete Block(503)", "Delete IfStatement(504)", "Delete SimpleName: IllegalArgumentException(505)", "Delete SimpleType: IllegalArgumentException(506)", "Delete StringLiteral: \"Failed to put: \"(507)", "Delete SimpleName: key(508)", "Delete StringLiteral: \" -> \"(509)", "Delete SimpleName: value(510)", "Delete StringLiteral: \", \"(511)", "Delete SimpleName: bitIndex(512)", "Delete InfixExpression: +(513)", "Delete ClassInstanceCreation(514)", "Delete ThrowStatement(515)", "Delete Block(516)", "Delete MethodDeclaration(517)", "Delete TextElement: Adds the given (518)", "Delete SimpleName: TrieEntry(519)", "Delete TagElement: @link(520)", "Delete TextElement:  to the (521)", "Delete SimpleName: Trie(522)", "Delete TagElement: @link(523)", "Delete TextElement: .(524)", "Delete TagElement(525)", "Delete Javadoc(526)", "Delete SimpleName: TrieEntry(527)", "Delete SimpleType: TrieEntry(528)", "Delete SimpleName: K(529)", "Delete SimpleType: K(530)", "Delete SimpleName: V(531)", "Delete SimpleType: V(532)", "Delete ParameterizedType: TrieEntry<K,V>(533)", "Delete SimpleName: addEntry(534)", "Delete Modifier: final(535)", "Delete SimpleName: TrieEntry(536)", "Delete SimpleType: TrieEntry(537)", "Delete SimpleName: K(538)", "Delete SimpleType: K(539)", "Delete SimpleName: V(540)", "Delete SimpleType: V(541)", "Delete ParameterizedType: TrieEntry<K,V>(542)", "Delete SimpleName: entry(543)", "Delete SingleVariableDeclaration(544)", "Delete Modifier: final(545)", "Delete PrimitiveType: int(546)", "Delete SimpleName: lengthInBits(547)", "Delete SingleVariableDeclaration(548)", "Delete SimpleName: TrieEntry(549)", "Delete SimpleType: TrieEntry(550)", "Delete SimpleName: K(551)", "Delete SimpleType: K(552)", "Delete SimpleName: V(553)", "Delete SimpleType: V(554)", "Delete ParameterizedType: TrieEntry<K,V>(555)", "Delete SimpleName: current(556)", "Delete QualifiedName: root.left(557)", "Delete VariableDeclarationFragment(558)", "Delete VariableDeclarationStatement(559)", "Delete SimpleName: TrieEntry(560)", "Delete SimpleType: TrieEntry(561)", "Delete SimpleName: K(562)", "Delete SimpleType: K(563)", "Delete SimpleName: V(564)", "Delete SimpleType: V(565)", "Delete ParameterizedType: TrieEntry<K,V>(566)", "Delete SimpleName: path(567)", "Delete SimpleName: root(568)", "Delete VariableDeclarationFragment(569)", "Delete VariableDeclarationStatement(570)", "Delete BooleanLiteral: true(571)", "Delete QualifiedName: current.bitIndex(572)", "Delete QualifiedName: entry.bitIndex(573)", "Delete InfixExpression: >=(574)", "Delete QualifiedName: current.bitIndex(575)", "Delete QualifiedName: path.bitIndex(576)", "Delete InfixExpression: <=(577)", "Delete InfixExpression: ||(578)", "Delete QualifiedName: entry.predecessor(579)", "Delete SimpleName: entry(580)", "Delete Assignment: =(581)", "Delete ExpressionStatement(582)", "Delete SimpleName: isBitSet(583)", "Delete QualifiedName: entry.key(584)", "Delete QualifiedName: entry.bitIndex(585)", "Delete SimpleName: lengthInBits(586)", "Delete MethodInvocation(587)", "Delete PrefixExpression: !(588)", "Delete QualifiedName: entry.left(589)", "Delete SimpleName: entry(590)", "Delete Assignment: =(591)", "Delete ExpressionStatement(592)", "Delete QualifiedName: entry.right(593)", "Delete SimpleName: current(594)", "Delete Assignment: =(595)", "Delete ExpressionStatement(596)", "Delete Block(597)", "Delete QualifiedName: entry.left(598)", "Delete SimpleName: current(599)", "Delete Assignment: =(600)", "Delete ExpressionStatement(601)", "Delete QualifiedName: entry.right(602)", "Delete SimpleName: entry(603)", "Delete Assignment: =(604)", "Delete ExpressionStatement(605)", "Delete Block(606)", "Delete IfStatement(607)", "Delete QualifiedName: entry.parent(608)", "Delete SimpleName: path(609)", "Delete Assignment: =(610)", "Delete ExpressionStatement(611)", "Delete QualifiedName: current.bitIndex(612)", "Delete QualifiedName: entry.bitIndex(613)", "Delete InfixExpression: >=(614)", "Delete QualifiedName: current.parent(615)", "Delete SimpleName: entry(616)", "Delete Assignment: =(617)", "Delete ExpressionStatement(618)", "Delete Block(619)", "Delete IfStatement(620)", "Delete QualifiedName: current.bitIndex(621)", "Delete QualifiedName: path.bitIndex(622)", "Delete InfixExpression: <=(623)", "Delete QualifiedName: current.predecessor(624)", "Delete SimpleName: entry(625)", "Delete Assignment: =(626)", "Delete ExpressionStatement(627)", "Delete Block(628)", "Delete IfStatement(629)", "Delete SimpleName: path(630)", "Delete SimpleName: root(631)", "Delete InfixExpression: ==(632)", "Delete SimpleName: isBitSet(633)", "Delete QualifiedName: entry.key(634)", "Delete QualifiedName: path.bitIndex(635)", "Delete SimpleName: lengthInBits(636)", "Delete MethodInvocation(637)", "Delete PrefixExpression: !(638)", "Delete InfixExpression: ||(639)", "Delete QualifiedName: path.left(640)", "Delete SimpleName: entry(641)", "Delete Assignment: =(642)", "Delete ExpressionStatement(643)", "Delete Block(644)", "Delete QualifiedName: path.right(645)", "Delete SimpleName: entry(646)", "Delete Assignment: =(647)", "Delete ExpressionStatement(648)", "Delete Block(649)", "Delete IfStatement(650)", "Delete SimpleName: entry(651)", "Delete ReturnStatement(652)", "Delete Block(653)", "Delete IfStatement(654)", "Delete SimpleName: path(655)", "Delete SimpleName: current(656)", "Delete Assignment: =(657)", "Delete ExpressionStatement(658)", "Delete SimpleName: isBitSet(659)", "Delete QualifiedName: entry.key(660)", "Delete QualifiedName: current.bitIndex(661)", "Delete SimpleName: lengthInBits(662)", "Delete MethodInvocation(663)", "Delete PrefixExpression: !(664)", "Delete SimpleName: current(665)", "Delete QualifiedName: current.left(666)", "Delete Assignment: =(667)", "Delete ExpressionStatement(668)", "Delete Block(669)", "Delete SimpleName: current(670)", "Delete QualifiedName: current.right(671)", "Delete Assignment: =(672)", "Delete ExpressionStatement(673)", "Delete Block(674)", "Delete IfStatement(675)", "Delete Block(676)", "Delete WhileStatement(677)", "Delete Block(678)", "Delete MethodDeclaration(679)", "Delete SimpleName: Override(680)", "Delete MarkerAnnotation(681)", "Delete Modifier: public(682)", "Delete SimpleName: V(683)", "Delete SimpleType: V(684)", "Delete SimpleName: get(685)", "Delete Modifier: final(686)", "Delete SimpleName: Object(687)", "Delete SimpleType: Object(688)", "Delete SimpleName: k(689)", "Delete SingleVariableDeclaration(690)", "Delete Modifier: final(691)", "Delete SimpleName: TrieEntry(692)", "Delete SimpleType: TrieEntry(693)", "Delete SimpleName: K(694)", "Delete SimpleType: K(695)", "Delete SimpleName: V(696)", "Delete SimpleType: V(697)", "Delete ParameterizedType: TrieEntry<K,V>(698)", "Delete SimpleName: entry(699)", "Delete SimpleName: getEntry(700)", "Delete SimpleName: k(701)", "Delete MethodInvocation(702)", "Delete VariableDeclarationFragment(703)", "Delete VariableDeclarationStatement(704)", "Delete SimpleName: entry(705)", "Delete NullLiteral(706)", "Delete InfixExpression: !=(707)", "Delete SimpleName: entry(708)", "Delete SimpleName: getValue(709)", "Delete MethodInvocation(710)", "Delete NullLiteral(711)", "Delete ConditionalExpression(712)", "Delete ReturnStatement(713)", "Delete Block(714)", "Delete MethodDeclaration(715)", "Delete TextElement: Returns the entry associated with the specified key in the(716)", "Delete TextElement: PatriciaTrieBase.  Returns null if the map contains no mapping(717)", "Delete TextElement: for this key.(718)", "Delete TextElement: <p>(719)", "Delete TextElement: This may throw ClassCastException if the object is not of type K.(720)", "Delete TagElement(721)", "Delete Javadoc(722)", "Delete SimpleName: TrieEntry(723)", "Delete SimpleType: TrieEntry(724)", "Delete SimpleName: K(725)", "Delete SimpleType: K(726)", "Delete SimpleName: V(727)", "Delete SimpleType: V(728)", "Delete ParameterizedType: TrieEntry<K,V>(729)", "Delete SimpleName: getEntry(730)", "Delete Modifier: final(731)", "Delete SimpleName: Object(732)", "Delete SimpleType: Object(733)", "Delete SimpleName: k(734)", "Delete SingleVariableDeclaration(735)", "Delete Modifier: final(736)", "Delete SimpleName: K(737)", "Delete SimpleType: K(738)", "Delete SimpleName: key(739)", "Delete SimpleName: castKey(740)", "Delete SimpleName: k(741)", "Delete MethodInvocation(742)", "Delete VariableDeclarationFragment(743)", "Delete VariableDeclarationStatement(744)", "Delete SimpleName: key(745)", "Delete NullLiteral(746)", "Delete InfixExpression: ==(747)", "Delete NullLiteral(748)", "Delete ReturnStatement(749)", "Delete Block(750)", "Delete IfStatement(751)", "Delete Modifier: final(752)", "Delete PrimitiveType: int(753)", "Delete SimpleName: lengthInBits(754)", "Delete SimpleName: lengthInBits(755)", "Delete SimpleName: key(756)", "Delete MethodInvocation(757)", "Delete VariableDeclarationFragment(758)", "Delete VariableDeclarationStatement(759)", "Delete Modifier: final(760)", "Delete SimpleName: TrieEntry(761)", "Delete SimpleType: TrieEntry(762)", "Delete SimpleName: K(763)", "Delete SimpleType: K(764)", "Delete SimpleName: V(765)", "Delete SimpleType: V(766)", "Delete ParameterizedType: TrieEntry<K,V>(767)", "Delete SimpleName: entry(768)", "Delete SimpleName: getNearestEntryForKey(769)", "Delete SimpleName: key(770)", "Delete SimpleName: lengthInBits(771)", "Delete MethodInvocation(772)", "Delete VariableDeclarationFragment(773)", "Delete VariableDeclarationStatement(774)", "Delete SimpleName: entry(775)", "Delete SimpleName: isEmpty(776)", "Delete MethodInvocation(777)", "Delete PrefixExpression: !(778)", "Delete SimpleName: compareKeys(779)", "Delete SimpleName: key(780)", "Delete QualifiedName: entry.key(781)", "Delete MethodInvocation(782)", "Delete InfixExpression: &&(783)", "Delete SimpleName: entry(784)", "Delete NullLiteral(785)", "Delete ConditionalExpression(786)", "Delete ReturnStatement(787)", "Delete Block(788)", "Delete MethodDeclaration(789)", "Delete Modifier: public(790)", "Delete QualifiedName: Map.Entry(791)", "Delete SimpleType: Map.Entry(792)", "Delete SimpleName: K(793)", "Delete SimpleType: K(794)", "Delete SimpleName: V(795)", "Delete SimpleType: V(796)", "Delete ParameterizedType: Map.Entry<K,V>(797)", "Delete SimpleName: select(798)", "Delete Modifier: final(799)", "Delete SimpleName: K(800)", "Delete SimpleType: K(801)", "Delete SimpleName: key(802)", "Delete SingleVariableDeclaration(803)", "Delete Modifier: final(804)", "Delete PrimitiveType: int(805)", "Delete SimpleName: lengthInBits(806)", "Delete SimpleName: lengthInBits(807)", "Delete SimpleName: key(808)", "Delete MethodInvocation(809)", "Delete VariableDeclarationFragment(810)", "Delete VariableDeclarationStatement(811)", "Delete Modifier: final(812)", "Delete SimpleName: Reference(813)", "Delete SimpleType: Reference(814)", "Delete QualifiedName: Map.Entry(815)", "Delete SimpleType: Map.Entry(816)", "Delete SimpleName: K(817)", "Delete SimpleType: K(818)", "Delete SimpleName: V(819)", "Delete SimpleType: V(820)", "Delete ParameterizedType: Map.Entry<K,V>(821)", "Delete ParameterizedType: Reference<Map.Entry<K,V>>(822)", "Delete SimpleName: reference(823)", "Delete SimpleName: Reference(824)", "Delete SimpleType: Reference(825)", "Delete QualifiedName: Map.Entry(826)", "Delete SimpleType: Map.Entry(827)", "Delete SimpleName: K(828)", "Delete SimpleType: K(829)", "Delete SimpleName: V(830)", "Delete SimpleType: V(831)", "Delete ParameterizedType: Map.Entry<K,V>(832)", "Delete ParameterizedType: Reference<Map.Entry<K,V>>(833)", "Delete ClassInstanceCreation(834)", "Delete VariableDeclarationFragment(835)", "Delete VariableDeclarationStatement(836)", "Delete SimpleName: selectR(837)", "Delete QualifiedName: root.left(838)", "Delete NumberLiteral: 1(839)", "Delete PrefixExpression: -(840)", "Delete SimpleName: key(841)", "Delete SimpleName: lengthInBits(842)", "Delete SimpleName: reference(843)", "Delete MethodInvocation(844)", "Delete PrefixExpression: !(845)", "Delete SimpleName: reference(846)", "Delete SimpleName: get(847)", "Delete MethodInvocation(848)", "Delete ReturnStatement(849)", "Delete Block(850)", "Delete IfStatement(851)", "Delete NullLiteral(852)", "Delete ReturnStatement(853)", "Delete Block(854)", "Delete MethodDeclaration(855)", "Delete Modifier: public(856)", "Delete QualifiedName: Map.Entry(857)", "Delete SimpleType: Map.Entry(858)", "Delete SimpleName: K(859)", "Delete SimpleType: K(860)", "Delete SimpleName: V(861)", "Delete SimpleType: V(862)", "Delete ParameterizedType: Map.Entry<K,V>(863)", "Delete SimpleName: select(864)", "Delete Modifier: final(865)", "Delete SimpleName: K(866)", "Delete SimpleType: K(867)", "Delete SimpleName: key(868)", "Delete SingleVariableDeclaration(869)", "Delete Modifier: final(870)", "Delete SimpleName: Cursor(871)", "Delete SimpleType: Cursor(872)", "Delete SimpleName: K(873)", "Delete SimpleType: K(874)", "Delete WildcardType: ? super K(875)", "Delete SimpleName: V(876)", "Delete SimpleType: V(877)", "Delete WildcardType: ? super V(878)", "Delete ParameterizedType: Cursor<? super K,? super V>(879)", "Delete SimpleName: cursor(880)", "Delete SingleVariableDeclaration(881)", "Delete Modifier: final(882)", "Delete PrimitiveType: int(883)", "Delete SimpleName: lengthInBits(884)", "Delete SimpleName: lengthInBits(885)", "Delete SimpleName: key(886)", "Delete MethodInvocation(887)", "Delete VariableDeclarationFragment(888)", "Delete VariableDeclarationStatement(889)", "Delete Modifier: final(890)", "Delete SimpleName: Reference(891)", "Delete SimpleType: Reference(892)", "Delete QualifiedName: Map.Entry(893)", "Delete SimpleType: Map.Entry(894)", "Delete SimpleName: K(895)", "Delete SimpleType: K(896)", "Delete SimpleName: V(897)", "Delete SimpleType: V(898)", "Delete ParameterizedType: Map.Entry<K,V>(899)", "Delete ParameterizedType: Reference<Map.Entry<K,V>>(900)", "Delete SimpleName: reference(901)", "Delete SimpleName: Reference(902)", "Delete SimpleType: Reference(903)", "Delete QualifiedName: Map.Entry(904)", "Delete SimpleType: Map.Entry(905)", "Delete SimpleName: K(906)", "Delete SimpleType: K(907)", "Delete SimpleName: V(908)", "Delete SimpleType: V(909)", "Delete ParameterizedType: Map.Entry<K,V>(910)", "Delete ParameterizedType: Reference<Map.Entry<K,V>>(911)", "Delete ClassInstanceCreation(912)", "Delete VariableDeclarationFragment(913)", "Delete VariableDeclarationStatement(914)", "Delete SimpleName: selectR(915)", "Delete QualifiedName: root.left(916)", "Delete NumberLiteral: 1(917)", "Delete PrefixExpression: -(918)", "Delete SimpleName: key(919)", "Delete SimpleName: lengthInBits(920)", "Delete SimpleName: cursor(921)", "Delete SimpleName: reference(922)", "Delete MethodInvocation(923)", "Delete ExpressionStatement(924)", "Delete SimpleName: reference(925)", "Delete SimpleName: get(926)", "Delete MethodInvocation(927)", "Delete ReturnStatement(928)", "Delete Block(929)", "Delete MethodDeclaration(930)", "Delete TextElement: This is equivalent to the other (931)", "Delete SimpleName: selectR(932)", "Delete SimpleName: TrieEntry(933)", "Delete SimpleType: TrieEntry(934)", "Delete MethodRefParameter(935)", "Delete PrimitiveType: int(936)", "Delete MethodRefParameter(937)", "Delete SimpleName: Object(938)", "Delete SimpleType: Object(939)", "Delete MethodRefParameter(940)", "Delete PrimitiveType: int(941)", "Delete MethodRefParameter(942)", "Delete SimpleName: Cursor(943)", "Delete SimpleType: Cursor(944)", "Delete MethodRefParameter(945)", "Delete SimpleName: Reference(946)", "Delete SimpleType: Reference(947)", "Delete MethodRefParameter(948)", "Delete MethodRef(949)", "Delete TagElement: @link(950)", "Delete TextElement: method but without its overhead because we're selecting only one best matching Entry from the (951)", "Delete SimpleName: Trie(952)", "Delete TagElement: @link(953)", "Delete TextElement: .(954)", "Delete TagElement(955)", "Delete Javadoc(956)", "Delete Modifier: private(957)", "Delete PrimitiveType: boolean(958)", "Delete SimpleName: selectR(959)", "Delete Modifier: final(960)", "Delete SimpleName: TrieEntry(961)", "Delete SimpleType: TrieEntry(962)", "Delete SimpleName: K(963)", "Delete SimpleType: K(964)", "Delete SimpleName: V(965)", "Delete SimpleType: V(966)", "Delete ParameterizedType: TrieEntry<K,V>(967)", "Delete SimpleName: h(968)", "Delete SingleVariableDeclaration(969)", "Delete Modifier: final(970)", "Delete PrimitiveType: int(971)", "Delete SimpleName: bitIndex(972)", "Delete SingleVariableDeclaration(973)", "Delete Modifier: final(974)", "Delete SimpleName: K(975)", "Delete SimpleType: K(976)", "Delete SimpleName: key(977)", "Delete SingleVariableDeclaration(978)", "Delete Modifier: final(979)", "Delete PrimitiveType: int(980)", "Delete SimpleName: lengthInBits(981)", "Delete SingleVariableDeclaration(982)", "Delete Modifier: final(983)", "Delete SimpleName: Reference(984)", "Delete SimpleType: Reference(985)", "Delete QualifiedName: Map.Entry(986)", "Delete SimpleType: Map.Entry(987)", "Delete SimpleName: K(988)", "Delete SimpleType: K(989)", "Delete SimpleName: V(990)", "Delete SimpleType: V(991)", "Delete ParameterizedType: Map.Entry<K,V>(992)", "Delete ParameterizedType: Reference<Map.Entry<K,V>>(993)", "Delete SimpleName: reference(994)", "Delete SingleVariableDeclaration(995)", "Delete QualifiedName: h.bitIndex(996)", "Delete SimpleName: bitIndex(997)", "Delete InfixExpression: <=(998)", "Delete SimpleName: h(999)", "Delete SimpleName: isEmpty(1000)", "Delete MethodInvocation(1001)", "Delete PrefixExpression: !(1002)", "Delete SimpleName: reference(1003)", "Delete SimpleName: set(1004)", "Delete SimpleName: h(1005)", "Delete MethodInvocation(1006)", "Delete ExpressionStatement(1007)", "Delete BooleanLiteral: false(1008)", "Delete ReturnStatement(1009)", "Delete Block(1010)", "Delete IfStatement(1011)", "Delete BooleanLiteral: true(1012)", "Delete ReturnStatement(1013)", "Delete Block(1014)", "Delete IfStatement(1015)", "Delete SimpleName: isBitSet(1016)", "Delete SimpleName: key(1017)", "Delete QualifiedName: h.bitIndex(1018)", "Delete SimpleName: lengthInBits(1019)", "Delete MethodInvocation(1020)", "Delete PrefixExpression: !(1021)", "Delete SimpleName: selectR(1022)", "Delete QualifiedName: h.left(1023)", "Delete QualifiedName: h.bitIndex(1024)", "Delete SimpleName: key(1025)", "Delete SimpleName: lengthInBits(1026)", "Delete SimpleName: reference(1027)", "Delete MethodInvocation(1028)", "Delete SimpleName: selectR(1029)", "Delete QualifiedName: h.right(1030)", "Delete QualifiedName: h.bitIndex(1031)", "Delete SimpleName: key(1032)", "Delete SimpleName: lengthInBits(1033)", "Delete SimpleName: reference(1034)", "Delete MethodInvocation(1035)", "Delete ReturnStatement(1036)", "Delete Block(1037)", "Delete IfStatement(1038)", "Delete Block(1039)", "Delete SimpleName: selectR(1040)", "Delete QualifiedName: h.right(1041)", "Delete QualifiedName: h.bitIndex(1042)", "Delete SimpleName: key(1043)", "Delete SimpleName: lengthInBits(1044)", "Delete SimpleName: reference(1045)", "Delete MethodInvocation(1046)", "Delete SimpleName: selectR(1047)", "Delete QualifiedName: h.left(1048)", "Delete QualifiedName: h.bitIndex(1049)", "Delete SimpleName: key(1050)", "Delete SimpleName: lengthInBits(1051)", "Delete SimpleName: reference(1052)", "Delete MethodInvocation(1053)", "Delete ReturnStatement(1054)", "Delete Block(1055)", "Delete IfStatement(1056)", "Delete Block(1057)", "Delete IfStatement(1058)", "Delete BooleanLiteral: false(1059)", "Delete ReturnStatement(1060)", "Delete Block(1061)", "Delete MethodDeclaration(1062)", "Delete Modifier: private(1063)", "Delete PrimitiveType: boolean(1064)", "Delete SimpleName: selectR(1065)", "Delete Modifier: final(1066)", "Delete SimpleName: TrieEntry(1067)", "Delete SimpleType: TrieEntry(1068)", "Delete SimpleName: K(1069)", "Delete SimpleType: K(1070)", "Delete SimpleName: V(1071)", "Delete SimpleType: V(1072)", "Delete ParameterizedType: TrieEntry<K,V>(1073)", "Delete SimpleName: h(1074)", "Delete SingleVariableDeclaration(1075)", "Delete Modifier: final(1076)", "Delete PrimitiveType: int(1077)", "Delete SimpleName: bitIndex(1078)", "Delete SingleVariableDeclaration(1079)", "Delete Modifier: final(1080)", "Delete SimpleName: K(1081)", "Delete SimpleType: K(1082)", "Delete SimpleName: key(1083)", "Delete SingleVariableDeclaration(1084)", "Delete Modifier: final(1085)", "Delete PrimitiveType: int(1086)", "Delete SimpleName: lengthInBits(1087)", "Delete SingleVariableDeclaration(1088)", "Delete Modifier: final(1089)", "Delete SimpleName: Cursor(1090)", "Delete SimpleType: Cursor(1091)", "Delete SimpleName: K(1092)", "Delete SimpleType: K(1093)", "Delete WildcardType: ? super K(1094)", "Delete SimpleName: V(1095)", "Delete SimpleType: V(1096)", "Delete WildcardType: ? super V(1097)", "Delete ParameterizedType: Cursor<? super K,? super V>(1098)", "Delete SimpleName: cursor(1099)", "Delete SingleVariableDeclaration(1100)", "Delete Modifier: final(1101)", "Delete SimpleName: Reference(1102)", "Delete SimpleType: Reference(1103)", "Delete QualifiedName: Map.Entry(1104)", "Delete SimpleType: Map.Entry(1105)", "Delete SimpleName: K(1106)", "Delete SimpleType: K(1107)", "Delete SimpleName: V(1108)", "Delete SimpleType: V(1109)", "Delete ParameterizedType: Map.Entry<K,V>(1110)", "Delete ParameterizedType: Reference<Map.Entry<K,V>>(1111)", "Delete SimpleName: reference(1112)", "Delete SingleVariableDeclaration(1113)", "Delete QualifiedName: h.bitIndex(1114)", "Delete SimpleName: bitIndex(1115)", "Delete InfixExpression: <=(1116)", "Delete SimpleName: h(1117)", "Delete SimpleName: isEmpty(1118)", "Delete MethodInvocation(1119)", "Delete PrefixExpression: !(1120)", "Delete Modifier: final(1121)", "Delete SimpleName: Decision(1122)", "Delete SimpleType: Decision(1123)", "Delete SimpleName: decision(1124)", "Delete SimpleName: cursor(1125)", "Delete SimpleName: select(1126)", "Delete SimpleName: h(1127)", "Delete MethodInvocation(1128)", "Delete VariableDeclarationFragment(1129)", "Delete VariableDeclarationStatement(1130)", "Delete SimpleName: decision(1131)", "Delete SimpleName: REMOVE(1132)", "Delete SwitchCase(1133)", "Delete SimpleName: UnsupportedOperationException(1134)", "Delete SimpleType: UnsupportedOperationException(1135)", "Delete StringLiteral: \"Cannot remove during select\"(1136)", "Delete ClassInstanceCreation(1137)", "Delete ThrowStatement(1138)", "Delete SimpleName: EXIT(1139)", "Delete SwitchCase(1140)", "Delete SimpleName: reference(1141)", "Delete SimpleName: set(1142)", "Delete SimpleName: h(1143)", "Delete MethodInvocation(1144)", "Delete ExpressionStatement(1145)", "Delete BooleanLiteral: false(1146)", "Delete ReturnStatement(1147)", "Delete SimpleName: REMOVE_AND_EXIT(1148)", "Delete SwitchCase(1149)", "Delete Modifier: final(1150)", "Delete SimpleName: TrieEntry(1151)", "Delete SimpleType: TrieEntry(1152)", "Delete SimpleName: K(1153)", "Delete SimpleType: K(1154)", "Delete SimpleName: V(1155)", "Delete SimpleType: V(1156)", "Delete ParameterizedType: TrieEntry<K,V>(1157)", "Delete SimpleName: entry(1158)", "Delete SimpleName: TrieEntry(1159)", "Delete SimpleType: TrieEntry(1160)", "Delete SimpleName: K(1161)", "Delete SimpleType: K(1162)", "Delete SimpleName: V(1163)", "Delete SimpleType: V(1164)", "Delete ParameterizedType: TrieEntry<K,V>(1165)", "Delete SimpleName: h(1166)", "Delete SimpleName: getKey(1167)", "Delete MethodInvocation(1168)", "Delete SimpleName: h(1169)", "Delete SimpleName: getValue(1170)", "Delete MethodInvocation(1171)", "Delete NumberLiteral: 1(1172)", "Delete PrefixExpression: -(1173)", "Delete ClassInstanceCreation(1174)", "Delete VariableDeclarationFragment(1175)", "Delete VariableDeclarationStatement(1176)", "Delete SimpleName: reference(1177)", "Delete SimpleName: set(1178)", "Delete SimpleName: entry(1179)", "Delete MethodInvocation(1180)", "Delete ExpressionStatement(1181)", "Delete SimpleName: removeEntry(1182)", "Delete SimpleName: h(1183)", "Delete MethodInvocation(1184)", "Delete ExpressionStatement(1185)", "Delete BooleanLiteral: false(1186)", "Delete ReturnStatement(1187)", "Delete SimpleName: CONTINUE(1188)", "Delete SwitchCase(1189)", "Delete SwitchCase(1190)", "Delete BreakStatement(1191)", "Delete SwitchStatement(1192)", "Delete Block(1193)", "Delete IfStatement(1194)", "Delete BooleanLiteral: true(1195)", "Delete ReturnStatement(1196)", "Delete Block(1197)", "Delete IfStatement(1198)", "Delete SimpleName: isBitSet(1199)", "Delete SimpleName: key(1200)", "Delete QualifiedName: h.bitIndex(1201)", "Delete SimpleName: lengthInBits(1202)", "Delete MethodInvocation(1203)", "Delete PrefixExpression: !(1204)", "Delete SimpleName: selectR(1205)", "Delete QualifiedName: h.left(1206)", "Delete QualifiedName: h.bitIndex(1207)", "Delete SimpleName: key(1208)", "Delete SimpleName: lengthInBits(1209)", "Delete SimpleName: cursor(1210)", "Delete SimpleName: reference(1211)", "Delete MethodInvocation(1212)", "Delete SimpleName: selectR(1213)", "Delete QualifiedName: h.right(1214)", "Delete QualifiedName: h.bitIndex(1215)", "Delete SimpleName: key(1216)", "Delete SimpleName: lengthInBits(1217)", "Delete SimpleName: cursor(1218)", "Delete SimpleName: reference(1219)", "Delete MethodInvocation(1220)", "Delete ReturnStatement(1221)", "Delete Block(1222)", "Delete IfStatement(1223)", "Delete Block(1224)", "Delete SimpleName: selectR(1225)", "Delete QualifiedName: h.right(1226)", "Delete QualifiedName: h.bitIndex(1227)", "Delete SimpleName: key(1228)", "Delete SimpleName: lengthInBits(1229)", "Delete SimpleName: cursor(1230)", "Delete SimpleName: reference(1231)", "Delete MethodInvocation(1232)", "Delete SimpleName: selectR(1233)", "Delete QualifiedName: h.left(1234)", "Delete QualifiedName: h.bitIndex(1235)", "Delete SimpleName: key(1236)", "Delete SimpleName: lengthInBits(1237)", "Delete SimpleName: cursor(1238)", "Delete SimpleName: reference(1239)", "Delete MethodInvocation(1240)", "Delete ReturnStatement(1241)", "Delete Block(1242)", "Delete IfStatement(1243)", "Delete Block(1244)", "Delete IfStatement(1245)", "Delete BooleanLiteral: false(1246)", "Delete ReturnStatement(1247)", "Delete Block(1248)", "Delete MethodDeclaration(1249)", "Delete Modifier: public(1250)", "Delete QualifiedName: Map.Entry(1251)", "Delete SimpleType: Map.Entry(1252)", "Delete SimpleName: K(1253)", "Delete SimpleType: K(1254)", "Delete SimpleName: V(1255)", "Delete SimpleType: V(1256)", "Delete ParameterizedType: Map.Entry<K,V>(1257)", "Delete SimpleName: traverse(1258)", "Delete Modifier: final(1259)", "Delete SimpleName: Cursor(1260)", "Delete SimpleType: Cursor(1261)", "Delete SimpleName: K(1262)", "Delete SimpleType: K(1263)", "Delete WildcardType: ? super K(1264)", "Delete SimpleName: V(1265)", "Delete SimpleType: V(1266)", "Delete WildcardType: ? super V(1267)", "Delete ParameterizedType: Cursor<? super K,? super V>(1268)", "Delete SimpleName: cursor(1269)", "Delete SingleVariableDeclaration(1270)", "Delete SimpleName: TrieEntry(1271)", "Delete SimpleType: TrieEntry(1272)", "Delete SimpleName: K(1273)", "Delete SimpleType: K(1274)", "Delete SimpleName: V(1275)", "Delete SimpleType: V(1276)", "Delete ParameterizedType: TrieEntry<K,V>(1277)", "Delete SimpleName: entry(1278)", "Delete SimpleName: nextEntry(1279)", "Delete NullLiteral(1280)", "Delete MethodInvocation(1281)", "Delete VariableDeclarationFragment(1282)", "Delete VariableDeclarationStatement(1283)", "Delete SimpleName: entry(1284)", "Delete NullLiteral(1285)", "Delete InfixExpression: !=(1286)", "Delete Modifier: final(1287)", "Delete SimpleName: TrieEntry(1288)", "Delete SimpleType: TrieEntry(1289)", "Delete SimpleName: K(1290)", "Delete SimpleType: K(1291)", "Delete SimpleName: V(1292)", "Delete SimpleType: V(1293)", "Delete ParameterizedType: TrieEntry<K,V>(1294)", "Delete SimpleName: current(1295)", "Delete SimpleName: entry(1296)", "Delete VariableDeclarationFragment(1297)", "Delete VariableDeclarationStatement(1298)", "Delete Modifier: final(1299)", "Delete SimpleName: Decision(1300)", "Delete SimpleType: Decision(1301)", "Delete SimpleName: decision(1302)", "Delete SimpleName: cursor(1303)", "Delete SimpleName: select(1304)", "Delete SimpleName: current(1305)", "Delete MethodInvocation(1306)", "Delete VariableDeclarationFragment(1307)", "Delete VariableDeclarationStatement(1308)", "Delete SimpleName: entry(1309)", "Delete SimpleName: nextEntry(1310)", "Delete SimpleName: current(1311)", "Delete MethodInvocation(1312)", "Delete Assignment: =(1313)", "Delete ExpressionStatement(1314)", "Delete SimpleName: decision(1315)", "Delete SimpleName: EXIT(1316)", "Delete SwitchCase(1317)", "Delete SimpleName: current(1318)", "Delete ReturnStatement(1319)", "Delete SimpleName: REMOVE(1320)", "Delete SwitchCase(1321)", "Delete SimpleName: removeEntry(1322)", "Delete SimpleName: current(1323)", "Delete MethodInvocation(1324)", "Delete ExpressionStatement(1325)", "Delete BreakStatement(1326)", "Delete SimpleName: REMOVE_AND_EXIT(1327)", "Delete SwitchCase(1328)", "Delete Modifier: final(1329)", "Delete QualifiedName: Map.Entry(1330)", "Delete SimpleType: Map.Entry(1331)", "Delete SimpleName: K(1332)", "Delete SimpleType: K(1333)", "Delete SimpleName: V(1334)", "Delete SimpleType: V(1335)", "Delete ParameterizedType: Map.Entry<K,V>(1336)", "Delete SimpleName: value(1337)", "Delete SimpleName: TrieEntry(1338)", "Delete SimpleType: TrieEntry(1339)", "Delete SimpleName: K(1340)", "Delete SimpleType: K(1341)", "Delete SimpleName: V(1342)", "Delete SimpleType: V(1343)", "Delete ParameterizedType: TrieEntry<K,V>(1344)", "Delete SimpleName: current(1345)", "Delete SimpleName: getKey(1346)", "Delete MethodInvocation(1347)", "Delete SimpleName: current(1348)", "Delete SimpleName: getValue(1349)", "Delete MethodInvocation(1350)", "Delete NumberLiteral: 1(1351)", "Delete PrefixExpression: -(1352)", "Delete ClassInstanceCreation(1353)", "Delete VariableDeclarationFragment(1354)", "Delete VariableDeclarationStatement(1355)", "Delete SimpleName: removeEntry(1356)", "Delete SimpleName: current(1357)", "Delete MethodInvocation(1358)", "Delete ExpressionStatement(1359)", "Delete SimpleName: value(1360)", "Delete ReturnStatement(1361)", "Delete SimpleName: CONTINUE(1362)", "Delete SwitchCase(1363)", "Delete SwitchCase(1364)", "Delete BreakStatement(1365)", "Delete SwitchStatement(1366)", "Delete Block(1367)", "Delete WhileStatement(1368)", "Delete NullLiteral(1369)", "Delete ReturnStatement(1370)", "Delete Block(1371)", "Delete MethodDeclaration(1372)", "Delete SimpleName: Override(1373)", "Delete MarkerAnnotation(1374)", "Delete Modifier: public(1375)", "Delete PrimitiveType: boolean(1376)", "Delete SimpleName: containsKey(1377)", "Delete Modifier: final(1378)", "Delete SimpleName: Object(1379)", "Delete SimpleType: Object(1380)", "Delete SimpleName: k(1381)", "Delete SingleVariableDeclaration(1382)", "Delete SimpleName: k(1383)", "Delete NullLiteral(1384)", "Delete InfixExpression: ==(1385)", "Delete BooleanLiteral: false(1386)", "Delete ReturnStatement(1387)", "Delete Block(1388)", "Delete IfStatement(1389)", "Delete Modifier: final(1390)", "Delete SimpleName: K(1391)", "Delete SimpleType: K(1392)", "Delete SimpleName: key(1393)", "Delete SimpleName: castKey(1394)", "Delete SimpleName: k(1395)", "Delete MethodInvocation(1396)", "Delete VariableDeclarationFragment(1397)", "Delete VariableDeclarationStatement(1398)", "Delete Modifier: final(1399)", "Delete PrimitiveType: int(1400)", "Delete SimpleName: lengthInBits(1401)", "Delete SimpleName: lengthInBits(1402)", "Delete SimpleName: key(1403)", "Delete MethodInvocation(1404)", "Delete VariableDeclarationFragment(1405)", "Delete VariableDeclarationStatement(1406)", "Delete Modifier: final(1407)", "Delete SimpleName: TrieEntry(1408)", "Delete SimpleType: TrieEntry(1409)", "Delete SimpleName: K(1410)", "Delete SimpleType: K(1411)", "Delete SimpleName: V(1412)", "Delete SimpleType: V(1413)", "Delete ParameterizedType: TrieEntry<K,V>(1414)", "Delete SimpleName: entry(1415)", "Delete SimpleName: getNearestEntryForKey(1416)", "Delete SimpleName: key(1417)", "Delete SimpleName: lengthInBits(1418)", "Delete MethodInvocation(1419)", "Delete VariableDeclarationFragment(1420)", "Delete VariableDeclarationStatement(1421)", "Delete SimpleName: entry(1422)", "Delete SimpleName: isEmpty(1423)", "Delete MethodInvocation(1424)", "Delete PrefixExpression: !(1425)", "Delete SimpleName: compareKeys(1426)", "Delete SimpleName: key(1427)", "Delete QualifiedName: entry.key(1428)", "Delete MethodInvocation(1429)", "Delete InfixExpression: &&(1430)", "Delete ReturnStatement(1431)", "Delete Block(1432)", "Delete MethodDeclaration(1433)", "Delete SimpleName: Override(1434)", "Delete MarkerAnnotation(1435)", "Delete Modifier: public(1436)", "Delete SimpleName: Set(1437)", "Delete SimpleType: Set(1438)", "Delete QualifiedName: Map.Entry(1439)", "Delete SimpleType: Map.Entry(1440)", "Delete SimpleName: K(1441)", "Delete SimpleType: K(1442)", "Delete SimpleName: V(1443)", "Delete SimpleType: V(1444)", "Delete ParameterizedType: Map.Entry<K,V>(1445)", "Delete ParameterizedType: Set<Map.Entry<K,V>>(1446)", "Delete SimpleName: entrySet(1447)", "Delete SimpleName: entrySet(1448)", "Delete NullLiteral(1449)", "Delete InfixExpression: ==(1450)", "Delete SimpleName: entrySet(1451)", "Delete SimpleName: EntrySet(1452)", "Delete SimpleType: EntrySet(1453)", "Delete ClassInstanceCreation(1454)", "Delete Assignment: =(1455)", "Delete ExpressionStatement(1456)", "Delete Block(1457)", "Delete IfStatement(1458)", "Delete SimpleName: entrySet(1459)", "Delete ReturnStatement(1460)", "Delete Block(1461)", "Delete MethodDeclaration(1462)", "Delete SimpleName: Override(1463)", "Delete MarkerAnnotation(1464)", "Delete Modifier: public(1465)", "Delete SimpleName: Set(1466)", "Delete SimpleType: Set(1467)", "Delete SimpleName: K(1468)", "Delete SimpleType: K(1469)", "Delete ParameterizedType: Set<K>(1470)", "Delete SimpleName: keySet(1471)", "Delete SimpleName: keySet(1472)", "Delete NullLiteral(1473)", "Delete InfixExpression: ==(1474)", "Delete SimpleName: keySet(1475)", "Delete SimpleName: KeySet(1476)", "Delete SimpleType: KeySet(1477)", "Delete ClassInstanceCreation(1478)", "Delete Assignment: =(1479)", "Delete ExpressionStatement(1480)", "Delete Block(1481)", "Delete IfStatement(1482)", "Delete SimpleName: keySet(1483)", "Delete ReturnStatement(1484)", "Delete Block(1485)", "Delete MethodDeclaration(1486)", "Delete SimpleName: Override(1487)", "Delete MarkerAnnotation(1488)", "Delete Modifier: public(1489)", "Delete SimpleName: Collection(1490)", "Delete SimpleType: Collection(1491)", "Delete SimpleName: V(1492)", "Delete SimpleType: V(1493)", "Delete ParameterizedType: Collection<V>(1494)", "Delete SimpleName: values(1495)", "Delete SimpleName: values(1496)", "Delete NullLiteral(1497)", "Delete InfixExpression: ==(1498)", "Delete SimpleName: values(1499)", "Delete SimpleName: Values(1500)", "Delete SimpleType: Values(1501)", "Delete ClassInstanceCreation(1502)", "Delete Assignment: =(1503)", "Delete ExpressionStatement(1504)", "Delete Block(1505)", "Delete IfStatement(1506)", "Delete SimpleName: values(1507)", "Delete ReturnStatement(1508)", "Delete Block(1509)", "Delete MethodDeclaration(1510)", "Delete TagElement: @inheritDoc(1511)", "Delete TagElement(1512)", "Delete SimpleName: ClassCastException(1513)", "Delete TextElement:  if provided key is of an incompatible type(1514)", "Delete TagElement: @throws(1515)", "Delete Javadoc(1516)", "Delete SimpleName: Override(1517)", "Delete MarkerAnnotation(1518)", "Delete Modifier: public(1519)", "Delete SimpleName: V(1520)", "Delete SimpleType: V(1521)", "Delete SimpleName: remove(1522)", "Delete Modifier: final(1523)", "Delete SimpleName: Object(1524)", "Delete SimpleType: Object(1525)", "Delete SimpleName: k(1526)", "Delete SingleVariableDeclaration(1527)", "Delete SimpleName: k(1528)", "Delete NullLiteral(1529)", "Delete InfixExpression: ==(1530)", "Delete NullLiteral(1531)", "Delete ReturnStatement(1532)", "Delete Block(1533)", "Delete IfStatement(1534)", "Delete Modifier: final(1535)", "Delete SimpleName: K(1536)", "Delete SimpleType: K(1537)", "Delete SimpleName: key(1538)", "Delete SimpleName: castKey(1539)", "Delete SimpleName: k(1540)", "Delete MethodInvocation(1541)", "Delete VariableDeclarationFragment(1542)", "Delete VariableDeclarationStatement(1543)", "Delete Modifier: final(1544)", "Delete PrimitiveType: int(1545)", "Delete SimpleName: lengthInBits(1546)", "Delete SimpleName: lengthInBits(1547)", "Delete SimpleName: key(1548)", "Delete MethodInvocation(1549)", "Delete VariableDeclarationFragment(1550)", "Delete VariableDeclarationStatement(1551)", "Delete SimpleName: TrieEntry(1552)", "Delete SimpleType: TrieEntry(1553)", "Delete SimpleName: K(1554)", "Delete SimpleType: K(1555)", "Delete SimpleName: V(1556)", "Delete SimpleType: V(1557)", "Delete ParameterizedType: TrieEntry<K,V>(1558)", "Delete SimpleName: current(1559)", "Delete QualifiedName: root.left(1560)", "Delete VariableDeclarationFragment(1561)", "Delete VariableDeclarationStatement(1562)", "Delete SimpleName: TrieEntry(1563)", "Delete SimpleType: TrieEntry(1564)", "Delete SimpleName: K(1565)", "Delete SimpleType: K(1566)", "Delete SimpleName: V(1567)", "Delete SimpleType: V(1568)", "Delete ParameterizedType: TrieEntry<K,V>(1569)", "Delete SimpleName: path(1570)", "Delete SimpleName: root(1571)", "Delete VariableDeclarationFragment(1572)", "Delete VariableDeclarationStatement(1573)", "Delete BooleanLiteral: true(1574)", "Delete QualifiedName: current.bitIndex(1575)", "Delete QualifiedName: path.bitIndex(1576)", "Delete InfixExpression: <=(1577)", "Delete SimpleName: current(1578)", "Delete SimpleName: isEmpty(1579)", "Delete MethodInvocation(1580)", "Delete PrefixExpression: !(1581)", "Delete SimpleName: compareKeys(1582)", "Delete SimpleName: key(1583)", "Delete QualifiedName: current.key(1584)", "Delete MethodInvocation(1585)", "Delete InfixExpression: &&(1586)", "Delete SimpleName: removeEntry(1587)", "Delete SimpleName: current(1588)", "Delete MethodInvocation(1589)", "Delete ReturnStatement(1590)", "Delete Block(1591)", "Delete NullLiteral(1592)", "Delete ReturnStatement(1593)", "Delete Block(1594)", "Delete IfStatement(1595)", "Delete Block(1596)", "Delete IfStatement(1597)", "Delete SimpleName: path(1598)", "Delete SimpleName: current(1599)", "Delete Assignment: =(1600)", "Delete ExpressionStatement(1601)", "Delete SimpleName: isBitSet(1602)", "Delete SimpleName: key(1603)", "Delete QualifiedName: current.bitIndex(1604)", "Delete SimpleName: lengthInBits(1605)", "Delete MethodInvocation(1606)", "Delete PrefixExpression: !(1607)", "Delete SimpleName: current(1608)", "Delete QualifiedName: current.left(1609)", "Delete Assignment: =(1610)", "Delete ExpressionStatement(1611)", "Delete Block(1612)", "Delete SimpleName: current(1613)", "Delete QualifiedName: current.right(1614)", "Delete Assignment: =(1615)", "Delete ExpressionStatement(1616)", "Delete Block(1617)", "Delete IfStatement(1618)", "Delete Block(1619)", "Delete WhileStatement(1620)", "Delete Block(1621)", "Delete MethodDeclaration(1622)", "Delete TextElement: Returns the nearest entry for a given key.  This is useful(1623)", "Delete TextElement: for finding knowing if a given key exists (and finding the value(1624)", "Delete TextElement: for it), or for inserting the key.(1625)", "Delete TextElement: The actual get implementation. This is very similar to(1626)", "Delete TextElement: selectR but with the exception that it might return the(1627)", "Delete TextElement: root Entry even if it's empty.(1628)", "Delete TagElement(1629)", "Delete Javadoc(1630)", "Delete SimpleName: TrieEntry(1631)", "Delete SimpleType: TrieEntry(1632)", "Delete SimpleName: K(1633)", "Delete SimpleType: K(1634)", "Delete SimpleName: V(1635)", "Delete SimpleType: V(1636)", "Delete ParameterizedType: TrieEntry<K,V>(1637)", "Delete SimpleName: getNearestEntryForKey(1638)", "Delete Modifier: final(1639)", "Delete SimpleName: K(1640)", "Delete SimpleType: K(1641)", "Delete SimpleName: key(1642)", "Delete SingleVariableDeclaration(1643)", "Delete Modifier: final(1644)", "Delete PrimitiveType: int(1645)", "Delete SimpleName: lengthInBits(1646)", "Delete SingleVariableDeclaration(1647)", "Delete SimpleName: TrieEntry(1648)", "Delete SimpleType: TrieEntry(1649)", "Delete SimpleName: K(1650)", "Delete SimpleType: K(1651)", "Delete SimpleName: V(1652)", "Delete SimpleType: V(1653)", "Delete ParameterizedType: TrieEntry<K,V>(1654)", "Delete SimpleName: current(1655)", "Delete QualifiedName: root.left(1656)", "Delete VariableDeclarationFragment(1657)", "Delete VariableDeclarationStatement(1658)", "Delete SimpleName: TrieEntry(1659)", "Delete SimpleType: TrieEntry(1660)", "Delete SimpleName: K(1661)", "Delete SimpleType: K(1662)", "Delete SimpleName: V(1663)", "Delete SimpleType: V(1664)", "Delete ParameterizedType: TrieEntry<K,V>(1665)", "Delete SimpleName: path(1666)", "Delete SimpleName: root(1667)", "Delete VariableDeclarationFragment(1668)", "Delete VariableDeclarationStatement(1669)", "Delete BooleanLiteral: true(1670)", "Delete QualifiedName: current.bitIndex(1671)", "Delete QualifiedName: path.bitIndex(1672)", "Delete InfixExpression: <=(1673)", "Delete SimpleName: current(1674)", "Delete ReturnStatement(1675)", "Delete Block(1676)", "Delete IfStatement(1677)", "Delete SimpleName: path(1678)", "Delete SimpleName: current(1679)", "Delete Assignment: =(1680)", "Delete ExpressionStatement(1681)", "Delete SimpleName: isBitSet(1682)", "Delete SimpleName: key(1683)", "Delete QualifiedName: current.bitIndex(1684)", "Delete SimpleName: lengthInBits(1685)", "Delete MethodInvocation(1686)", "Delete PrefixExpression: !(1687)", "Delete SimpleName: current(1688)", "Delete QualifiedName: current.left(1689)", "Delete Assignment: =(1690)", "Delete ExpressionStatement(1691)", "Delete Block(1692)", "Delete SimpleName: current(1693)", "Delete QualifiedName: current.right(1694)", "Delete Assignment: =(1695)", "Delete ExpressionStatement(1696)", "Delete Block(1697)", "Delete IfStatement(1698)", "Delete Block(1699)", "Delete WhileStatement(1700)", "Delete Block(1701)", "Delete MethodDeclaration(1702)", "Delete TextElement: Removes a single entry from the (1703)", "Delete SimpleName: Trie(1704)", "Delete TagElement: @link(1705)", "Delete TextElement: .(1706)", "Delete TextElement: If we found a Key (Entry h) then figure out if it's(1707)", "Delete TextElement: an internal (hard to remove) or external Entry (easy(1708)", "Delete TextElement: to remove)(1709)", "Delete TagElement(1710)", "Delete Javadoc(1711)", "Delete SimpleName: V(1712)", "Delete SimpleType: V(1713)", "Delete SimpleName: removeEntry(1714)", "Delete Modifier: final(1715)", "Delete SimpleName: TrieEntry(1716)", "Delete SimpleType: TrieEntry(1717)", "Delete SimpleName: K(1718)", "Delete SimpleType: K(1719)", "Delete SimpleName: V(1720)", "Delete SimpleType: V(1721)", "Delete ParameterizedType: TrieEntry<K,V>(1722)", "Delete SimpleName: h(1723)", "Delete SingleVariableDeclaration(1724)", "Delete SimpleName: h(1725)", "Delete SimpleName: root(1726)", "Delete InfixExpression: !=(1727)", "Delete SimpleName: h(1728)", "Delete SimpleName: isInternalNode(1729)", "Delete MethodInvocation(1730)", "Delete SimpleName: removeInternalEntry(1731)", "Delete SimpleName: h(1732)", "Delete MethodInvocation(1733)", "Delete ExpressionStatement(1734)", "Delete Block(1735)", "Delete SimpleName: removeExternalEntry(1736)", "Delete SimpleName: h(1737)", "Delete MethodInvocation(1738)", "Delete ExpressionStatement(1739)", "Delete Block(1740)", "Delete IfStatement(1741)", "Delete Block(1742)", "Delete IfStatement(1743)", "Delete SimpleName: decrementSize(1744)", "Delete MethodInvocation(1745)", "Delete ExpressionStatement(1746)", "Delete SimpleName: h(1747)", "Delete SimpleName: setKeyValue(1748)", "Delete NullLiteral(1749)", "Delete NullLiteral(1750)", "Delete MethodInvocation(1751)", "Delete ReturnStatement(1752)", "Delete Block(1753)", "Delete MethodDeclaration(1754)", "Delete TextElement: Removes an external entry from the (1755)", "Delete SimpleName: Trie(1756)", "Delete TagElement: @link(1757)", "Delete TextElement: .(1758)", "Delete TextElement: If it's an external Entry then just remove it.(1759)", "Delete TextElement: This is very easy and straight forward.(1760)", "Delete TagElement(1761)", "Delete Javadoc(1762)", "Delete Modifier: private(1763)", "Delete PrimitiveType: void(1764)", "Delete SimpleName: removeExternalEntry(1765)", "Delete Modifier: final(1766)", "Delete SimpleName: TrieEntry(1767)", "Delete SimpleType: TrieEntry(1768)", "Delete SimpleName: K(1769)", "Delete SimpleType: K(1770)", "Delete SimpleName: V(1771)", "Delete SimpleType: V(1772)", "Delete ParameterizedType: TrieEntry<K,V>(1773)", "Delete SimpleName: h(1774)", "Delete SingleVariableDeclaration(1775)", "Delete SimpleName: h(1776)", "Delete SimpleName: root(1777)", "Delete InfixExpression: ==(1778)", "Delete SimpleName: IllegalArgumentException(1779)", "Delete SimpleType: IllegalArgumentException(1780)", "Delete StringLiteral: \"Cannot delete root Entry!\"(1781)", "Delete ClassInstanceCreation(1782)", "Delete ThrowStatement(1783)", "Delete Block(1784)", "Delete SimpleName: h(1785)", "Delete SimpleName: isExternalNode(1786)", "Delete MethodInvocation(1787)", "Delete PrefixExpression: !(1788)", "Delete SimpleName: IllegalArgumentException(1789)", "Delete SimpleType: IllegalArgumentException(1790)", "Delete SimpleName: h(1791)", "Delete StringLiteral: \" is not an external Entry!\"(1792)", "Delete InfixExpression: +(1793)", "Delete ClassInstanceCreation(1794)", "Delete ThrowStatement(1795)", "Delete Block(1796)", "Delete IfStatement(1797)", "Delete IfStatement(1798)", "Delete Modifier: final(1799)", "Delete SimpleName: TrieEntry(1800)", "Delete SimpleType: TrieEntry(1801)", "Delete SimpleName: K(1802)", "Delete SimpleType: K(1803)", "Delete SimpleName: V(1804)", "Delete SimpleType: V(1805)", "Delete ParameterizedType: TrieEntry<K,V>(1806)", "Delete SimpleName: parent(1807)", "Delete QualifiedName: h.parent(1808)", "Delete VariableDeclarationFragment(1809)", "Delete VariableDeclarationStatement(1810)", "Delete Modifier: final(1811)", "Delete SimpleName: TrieEntry(1812)", "Delete SimpleType: TrieEntry(1813)", "Delete SimpleName: K(1814)", "Delete SimpleType: K(1815)", "Delete SimpleName: V(1816)", "Delete SimpleType: V(1817)", "Delete ParameterizedType: TrieEntry<K,V>(1818)", "Delete SimpleName: child(1819)", "Delete QualifiedName: h.left(1820)", "Delete SimpleName: h(1821)", "Delete InfixExpression: ==(1822)", "Delete QualifiedName: h.right(1823)", "Delete QualifiedName: h.left(1824)", "Delete ConditionalExpression(1825)", "Delete VariableDeclarationFragment(1826)", "Delete VariableDeclarationStatement(1827)", "Delete QualifiedName: parent.left(1828)", "Delete SimpleName: h(1829)", "Delete InfixExpression: ==(1830)", "Delete QualifiedName: parent.left(1831)", "Delete SimpleName: child(1832)", "Delete Assignment: =(1833)", "Delete ExpressionStatement(1834)", "Delete Block(1835)", "Delete QualifiedName: parent.right(1836)", "Delete SimpleName: child(1837)", "Delete Assignment: =(1838)", "Delete ExpressionStatement(1839)", "Delete Block(1840)", "Delete IfStatement(1841)", "Delete QualifiedName: child.bitIndex(1842)", "Delete QualifiedName: parent.bitIndex(1843)", "Delete InfixExpression: >(1844)", "Delete QualifiedName: child.parent(1845)", "Delete SimpleName: parent(1846)", "Delete Assignment: =(1847)", "Delete ExpressionStatement(1848)", "Delete Block(1849)", "Delete QualifiedName: child.predecessor(1850)", "Delete SimpleName: parent(1851)", "Delete Assignment: =(1852)", "Delete ExpressionStatement(1853)", "Delete Block(1854)", "Delete IfStatement(1855)", "Delete Block(1856)", "Delete MethodDeclaration(1857)", "Delete TextElement: Removes an internal entry from the (1858)", "Delete SimpleName: Trie(1859)", "Delete TagElement: @link(1860)", "Delete TextElement: .(1861)", "Delete TextElement: If it's an internal Entry then \"good luck\" with understanding(1862)", "Delete TextElement: this code. The Idea is essentially that Entry p takes Entry h's(1863)", "Delete TextElement: place in the trie which requires some re-wiring.(1864)", "Delete TagElement(1865)", "Delete Javadoc(1866)", "Delete Modifier: private(1867)", "Delete PrimitiveType: void(1868)", "Delete SimpleName: removeInternalEntry(1869)", "Delete Modifier: final(1870)", "Delete SimpleName: TrieEntry(1871)", "Delete SimpleType: TrieEntry(1872)", "Delete SimpleName: K(1873)", "Delete SimpleType: K(1874)", "Delete SimpleName: V(1875)", "Delete SimpleType: V(1876)", "Delete ParameterizedType: TrieEntry<K,V>(1877)", "Delete SimpleName: h(1878)", "Delete SingleVariableDeclaration(1879)", "Delete SimpleName: h(1880)", "Delete SimpleName: root(1881)", "Delete InfixExpression: ==(1882)", "Delete SimpleName: IllegalArgumentException(1883)", "Delete SimpleType: IllegalArgumentException(1884)", "Delete StringLiteral: \"Cannot delete root Entry!\"(1885)", "Delete ClassInstanceCreation(1886)", "Delete ThrowStatement(1887)", "Delete Block(1888)", "Delete SimpleName: h(1889)", "Delete SimpleName: isInternalNode(1890)", "Delete MethodInvocation(1891)", "Delete PrefixExpression: !(1892)", "Delete SimpleName: IllegalArgumentException(1893)", "Delete SimpleType: IllegalArgumentException(1894)", "Delete SimpleName: h(1895)", "Delete StringLiteral: \" is not an internal Entry!\"(1896)", "Delete InfixExpression: +(1897)", "Delete ClassInstanceCreation(1898)", "Delete ThrowStatement(1899)", "Delete Block(1900)", "Delete IfStatement(1901)", "Delete IfStatement(1902)", "Delete Modifier: final(1903)", "Delete SimpleName: TrieEntry(1904)", "Delete SimpleType: TrieEntry(1905)", "Delete SimpleName: K(1906)", "Delete SimpleType: K(1907)", "Delete SimpleName: V(1908)", "Delete SimpleType: V(1909)", "Delete ParameterizedType: TrieEntry<K,V>(1910)", "Delete SimpleName: p(1911)", "Delete QualifiedName: h.predecessor(1912)", "Delete VariableDeclarationFragment(1913)", "Delete VariableDeclarationStatement(1914)", "Delete QualifiedName: p.bitIndex(1915)", "Delete QualifiedName: h.bitIndex(1916)", "Delete Assignment: =(1917)", "Delete ExpressionStatement(1918)", "Delete Modifier: final(1919)", "Delete SimpleName: TrieEntry(1920)", "Delete SimpleType: TrieEntry(1921)", "Delete SimpleName: K(1922)", "Delete SimpleType: K(1923)", "Delete SimpleName: V(1924)", "Delete SimpleType: V(1925)", "Delete ParameterizedType: TrieEntry<K,V>(1926)", "Delete SimpleName: parent(1927)", "Delete QualifiedName: p.parent(1928)", "Delete VariableDeclarationFragment(1929)", "Delete VariableDeclarationStatement(1930)", "Delete Modifier: final(1931)", "Delete SimpleName: TrieEntry(1932)", "Delete SimpleType: TrieEntry(1933)", "Delete SimpleName: K(1934)", "Delete SimpleType: K(1935)", "Delete SimpleName: V(1936)", "Delete SimpleType: V(1937)", "Delete ParameterizedType: TrieEntry<K,V>(1938)", "Delete SimpleName: child(1939)", "Delete QualifiedName: p.left(1940)", "Delete SimpleName: h(1941)", "Delete InfixExpression: ==(1942)", "Delete QualifiedName: p.right(1943)", "Delete QualifiedName: p.left(1944)", "Delete ConditionalExpression(1945)", "Delete VariableDeclarationFragment(1946)", "Delete VariableDeclarationStatement(1947)", "Delete QualifiedName: p.predecessor(1948)", "Delete SimpleName: p(1949)", "Delete InfixExpression: ==(1950)", "Delete QualifiedName: p.parent(1951)", "Delete SimpleName: h(1952)", "Delete InfixExpression: !=(1953)", "Delete InfixExpression: &&(1954)", "Delete QualifiedName: p.predecessor(1955)", "Delete QualifiedName: p.parent(1956)", "Delete Assignment: =(1957)", "Delete ExpressionStatement(1958)", "Delete Block(1959)", "Delete IfStatement(1960)", "Delete QualifiedName: parent.left(1961)", "Delete SimpleName: p(1962)", "Delete InfixExpression: ==(1963)", "Delete QualifiedName: parent.left(1964)", "Delete SimpleName: child(1965)", "Delete Assignment: =(1966)", "Delete ExpressionStatement(1967)", "Delete Block(1968)", "Delete QualifiedName: parent.right(1969)", "Delete SimpleName: child(1970)", "Delete Assignment: =(1971)", "Delete ExpressionStatement(1972)", "Delete Block(1973)", "Delete IfStatement(1974)", "Delete QualifiedName: child.bitIndex(1975)", "Delete QualifiedName: parent.bitIndex(1976)", "Delete InfixExpression: >(1977)", "Delete QualifiedName: child.parent(1978)", "Delete SimpleName: parent(1979)", "Delete Assignment: =(1980)", "Delete ExpressionStatement(1981)", "Delete Block(1982)", "Delete IfStatement(1983)", "Delete Block(1984)", "Delete QualifiedName: h.left.parent(1985)", "Delete SimpleName: h(1986)", "Delete InfixExpression: ==(1987)", "Delete QualifiedName: h.left.parent(1988)", "Delete SimpleName: p(1989)", "Delete Assignment: =(1990)", "Delete ExpressionStatement(1991)", "Delete Block(1992)", "Delete IfStatement(1993)", "Delete QualifiedName: h.right.parent(1994)", "Delete SimpleName: h(1995)", "Delete InfixExpression: ==(1996)", "Delete QualifiedName: h.right.parent(1997)", "Delete SimpleName: p(1998)", "Delete Assignment: =(1999)", "Delete ExpressionStatement(2000)", "Delete Block(2001)", "Delete IfStatement(2002)", "Delete QualifiedName: h.parent.left(2003)", "Delete SimpleName: h(2004)", "Delete InfixExpression: ==(2005)", "Delete QualifiedName: h.parent.left(2006)", "Delete SimpleName: p(2007)", "Delete Assignment: =(2008)", "Delete ExpressionStatement(2009)", "Delete Block(2010)", "Delete QualifiedName: h.parent.right(2011)", "Delete SimpleName: p(2012)", "Delete Assignment: =(2013)", "Delete ExpressionStatement(2014)", "Delete Block(2015)", "Delete IfStatement(2016)", "Delete Block(2017)", "Delete QualifiedName: p.parent(2018)", "Delete QualifiedName: h.parent(2019)", "Delete Assignment: =(2020)", "Delete ExpressionStatement(2021)", "Delete QualifiedName: p.left(2022)", "Delete QualifiedName: h.left(2023)", "Delete Assignment: =(2024)", "Delete ExpressionStatement(2025)", "Delete QualifiedName: p.right(2026)", "Delete QualifiedName: h.right(2027)", "Delete Assignment: =(2028)", "Delete ExpressionStatement(2029)", "Delete SimpleName: isValidUplink(2030)", "Delete QualifiedName: p.left(2031)", "Delete SimpleName: p(2032)", "Delete MethodInvocation(2033)", "Delete QualifiedName: p.left.predecessor(2034)", "Delete SimpleName: p(2035)", "Delete Assignment: =(2036)", "Delete ExpressionStatement(2037)", "Delete Block(2038)", "Delete IfStatement(2039)", "Delete SimpleName: isValidUplink(2040)", "Delete QualifiedName: p.right(2041)", "Delete SimpleName: p(2042)", "Delete MethodInvocation(2043)", "Delete QualifiedName: p.right.predecessor(2044)", "Delete SimpleName: p(2045)", "Delete Assignment: =(2046)", "Delete ExpressionStatement(2047)", "Delete Block(2048)", "Delete IfStatement(2049)", "Delete Block(2050)", "Delete MethodDeclaration(2051)", "Delete TextElement: Returns the entry lexicographically after the given entry.(2052)", "Delete TextElement: If the given entry is null, returns the first node.(2053)", "Delete TagElement(2054)", "Delete Javadoc(2055)", "Delete SimpleName: TrieEntry(2056)", "Delete SimpleType: TrieEntry(2057)", "Delete SimpleName: K(2058)", "Delete SimpleType: K(2059)", "Delete SimpleName: V(2060)", "Delete SimpleType: V(2061)", "Delete ParameterizedType: TrieEntry<K,V>(2062)", "Delete SimpleName: nextEntry(2063)", "Delete Modifier: final(2064)", "Delete SimpleName: TrieEntry(2065)", "Delete SimpleType: TrieEntry(2066)", "Delete SimpleName: K(2067)", "Delete SimpleType: K(2068)", "Delete SimpleName: V(2069)", "Delete SimpleType: V(2070)", "Delete ParameterizedType: TrieEntry<K,V>(2071)", "Delete SimpleName: node(2072)", "Delete SingleVariableDeclaration(2073)", "Delete SimpleName: node(2074)", "Delete NullLiteral(2075)", "Delete InfixExpression: ==(2076)", "Delete SimpleName: firstEntry(2077)", "Delete MethodInvocation(2078)", "Delete ReturnStatement(2079)", "Delete Block(2080)", "Delete SimpleName: nextEntryImpl(2081)", "Delete QualifiedName: node.predecessor(2082)", "Delete SimpleName: node(2083)", "Delete NullLiteral(2084)", "Delete MethodInvocation(2085)", "Delete ReturnStatement(2086)", "Delete Block(2087)", "Delete IfStatement(2088)", "Delete Block(2089)", "Delete MethodDeclaration(2090)", "Delete TextElement: Scans for the next node, starting at the specified point, and using 'previous'(2091)", "Delete TextElement: as a hint that the last node we returned was 'previous' (so we know not to return(2092)", "Delete TextElement: it again).  If 'tree' is non-null, this will limit the search to the given tree.(2093)", "Delete TextElement: The basic premise is that each iteration can follow the following steps:(2094)", "Delete TextElement: 1) Scan all the way to the left.(2095)", "Delete TextElement: a) If we already started from this node last time, proceed to Step 2.(2096)", "Delete TextElement: b) If a valid uplink is found, use it.(2097)", "Delete TextElement: c) If the result is an empty node (root not set), break the scan.(2098)", "Delete TextElement: d) If we already returned the left node, break the scan.(2099)", "Delete TextElement: 2) Check the right.(2100)", "Delete TextElement: a) If we already returned the right node, proceed to Step 3.(2101)", "Delete TextElement: b) If it is a valid uplink, use it.(2102)", "Delete TextElement: c) Do Step 1 from the right node.(2103)", "Delete TextElement: 3) Back up through the parents until we encounter find a parent(2104)", "Delete TextElement: that we're not the right child of.(2105)", "Delete TextElement: 4) If there's no right child of that parent, the iteration is finished.(2106)", "Delete TextElement: Otherwise continue to Step 5.(2107)", "Delete TextElement: 5) Check to see if the right child is a valid uplink.(2108)", "Delete TextElement: a) If we already returned that child, proceed to Step 6.(2109)", "Delete TextElement: Otherwise, use it.(2110)", "Delete TextElement: 6) If the right child of the parent is the parent itself, we've(2111)", "Delete TextElement: already found & returned the end of the Trie, so exit.(2112)", "Delete TextElement: 7) Do Step 1 on the parent's right child.(2113)", "Delete TagElement(2114)", "Delete Javadoc(2115)", "Delete SimpleName: TrieEntry(2116)", "Delete SimpleType: TrieEntry(2117)", "Delete SimpleName: K(2118)", "Delete SimpleType: K(2119)", "Delete SimpleName: V(2120)", "Delete SimpleType: V(2121)", "Delete ParameterizedType: TrieEntry<K,V>(2122)", "Delete SimpleName: nextEntryImpl(2123)", "Delete Modifier: final(2124)", "Delete SimpleName: TrieEntry(2125)", "Delete SimpleType: TrieEntry(2126)", "Delete SimpleName: K(2127)", "Delete SimpleType: K(2128)", "Delete SimpleName: V(2129)", "Delete SimpleType: V(2130)", "Delete ParameterizedType: TrieEntry<K,V>(2131)", "Delete SimpleName: start(2132)", "Delete SingleVariableDeclaration(2133)", "Delete Modifier: final(2134)", "Delete SimpleName: TrieEntry(2135)", "Delete SimpleType: TrieEntry(2136)", "Delete SimpleName: K(2137)", "Delete SimpleType: K(2138)", "Delete SimpleName: V(2139)", "Delete SimpleType: V(2140)", "Delete ParameterizedType: TrieEntry<K,V>(2141)", "Delete SimpleName: previous(2142)", "Delete SingleVariableDeclaration(2143)", "Delete Modifier: final(2144)", "Delete SimpleName: TrieEntry(2145)", "Delete SimpleType: TrieEntry(2146)", "Delete SimpleName: K(2147)", "Delete SimpleType: K(2148)", "Delete SimpleName: V(2149)", "Delete SimpleType: V(2150)", "Delete ParameterizedType: TrieEntry<K,V>(2151)", "Delete SimpleName: tree(2152)", "Delete SingleVariableDeclaration(2153)", "Delete SimpleName: TrieEntry(2154)", "Delete SimpleType: TrieEntry(2155)", "Delete SimpleName: K(2156)", "Delete SimpleType: K(2157)", "Delete SimpleName: V(2158)", "Delete SimpleType: V(2159)", "Delete ParameterizedType: TrieEntry<K,V>(2160)", "Delete SimpleName: current(2161)", "Delete SimpleName: start(2162)", "Delete VariableDeclarationFragment(2163)", "Delete VariableDeclarationStatement(2164)", "Delete SimpleName: previous(2165)", "Delete NullLiteral(2166)", "Delete InfixExpression: ==(2167)", "Delete SimpleName: start(2168)", "Delete QualifiedName: previous.predecessor(2169)", "Delete InfixExpression: !=(2170)", "Delete InfixExpression: ||(2171)", "Delete QualifiedName: current.left(2172)", "Delete SimpleName: isEmpty(2173)", "Delete MethodInvocation(2174)", "Delete PrefixExpression: !(2175)", "Delete SimpleName: previous(2176)", "Delete QualifiedName: current.left(2177)", "Delete InfixExpression: ==(2178)", "Delete BreakStatement(2179)", "Delete Block(2180)", "Delete IfStatement(2181)", "Delete SimpleName: isValidUplink(2182)", "Delete QualifiedName: current.left(2183)", "Delete SimpleName: current(2184)", "Delete MethodInvocation(2185)", "Delete QualifiedName: current.left(2186)", "Delete ReturnStatement(2187)", "Delete Block(2188)", "Delete IfStatement(2189)", "Delete SimpleName: current(2190)", "Delete QualifiedName: current.left(2191)", "Delete Assignment: =(2192)", "Delete ExpressionStatement(2193)", "Delete Block(2194)", "Delete WhileStatement(2195)", "Delete Block(2196)", "Delete IfStatement(2197)", "Delete SimpleName: current(2198)", "Delete SimpleName: isEmpty(2199)", "Delete MethodInvocation(2200)", "Delete NullLiteral(2201)", "Delete ReturnStatement(2202)", "Delete Block(2203)", "Delete IfStatement(2204)", "Delete QualifiedName: current.right(2205)", "Delete NullLiteral(2206)", "Delete InfixExpression: ==(2207)", "Delete NullLiteral(2208)", "Delete ReturnStatement(2209)", "Delete Block(2210)", "Delete IfStatement(2211)", "Delete SimpleName: previous(2212)", "Delete QualifiedName: current.right(2213)", "Delete InfixExpression: !=(2214)", "Delete SimpleName: isValidUplink(2215)", "Delete QualifiedName: current.right(2216)", "Delete SimpleName: current(2217)", "Delete MethodInvocation(2218)", "Delete QualifiedName: current.right(2219)", "Delete ReturnStatement(2220)", "Delete Block(2221)", "Delete IfStatement(2222)", "Delete SimpleName: nextEntryImpl(2223)", "Delete QualifiedName: current.right(2224)", "Delete SimpleName: previous(2225)", "Delete SimpleName: tree(2226)", "Delete MethodInvocation(2227)", "Delete ReturnStatement(2228)", "Delete Block(2229)", "Delete IfStatement(2230)", "Delete SimpleName: current(2231)", "Delete QualifiedName: current.parent.right(2232)", "Delete InfixExpression: ==(2233)", "Delete SimpleName: current(2234)", "Delete SimpleName: tree(2235)", "Delete InfixExpression: ==(2236)", "Delete NullLiteral(2237)", "Delete ReturnStatement(2238)", "Delete Block(2239)", "Delete IfStatement(2240)", "Delete SimpleName: current(2241)", "Delete QualifiedName: current.parent(2242)", "Delete Assignment: =(2243)", "Delete ExpressionStatement(2244)", "Delete Block(2245)", "Delete WhileStatement(2246)", "Delete SimpleName: current(2247)", "Delete SimpleName: tree(2248)", "Delete InfixExpression: ==(2249)", "Delete NullLiteral(2250)", "Delete ReturnStatement(2251)", "Delete Block(2252)", "Delete IfStatement(2253)", "Delete QualifiedName: current.parent.right(2254)", "Delete NullLiteral(2255)", "Delete InfixExpression: ==(2256)", "Delete NullLiteral(2257)", "Delete ReturnStatement(2258)", "Delete Block(2259)", "Delete IfStatement(2260)", "Delete SimpleName: previous(2261)", "Delete QualifiedName: current.parent.right(2262)", "Delete InfixExpression: !=(2263)", "Delete SimpleName: isValidUplink(2264)", "Delete QualifiedName: current.parent.right(2265)", "Delete QualifiedName: current.parent(2266)", "Delete MethodInvocation(2267)", "Delete InfixExpression: &&(2268)", "Delete QualifiedName: current.parent.right(2269)", "Delete ReturnStatement(2270)", "Delete Block(2271)", "Delete IfStatement(2272)", "Delete QualifiedName: current.parent.right(2273)", "Delete QualifiedName: current.parent(2274)", "Delete InfixExpression: ==(2275)", "Delete NullLiteral(2276)", "Delete ReturnStatement(2277)", "Delete Block(2278)", "Delete IfStatement(2279)", "Delete SimpleName: nextEntryImpl(2280)", "Delete QualifiedName: current.parent.right(2281)", "Delete SimpleName: previous(2282)", "Delete SimpleName: tree(2283)", "Delete MethodInvocation(2284)", "Delete ReturnStatement(2285)", "Delete Block(2286)", "Delete MethodDeclaration(2287)", "Delete TextElement: Returns the first entry the (2288)", "Delete SimpleName: Trie(2289)", "Delete TagElement: @link(2290)", "Delete TextElement:  is storing.(2291)", "Delete TextElement: <p>(2292)", "Delete TextElement: This is implemented by going always to the left until(2293)", "Delete TextElement: we encounter a valid uplink. That uplink is the first key.(2294)", "Delete TagElement(2295)", "Delete Javadoc(2296)", "Delete SimpleName: TrieEntry(2297)", "Delete SimpleType: TrieEntry(2298)", "Delete SimpleName: K(2299)", "Delete SimpleType: K(2300)", "Delete SimpleName: V(2301)", "Delete SimpleType: V(2302)", "Delete ParameterizedType: TrieEntry<K,V>(2303)", "Delete SimpleName: firstEntry(2304)", "Delete SimpleName: isEmpty(2305)", "Delete MethodInvocation(2306)", "Delete NullLiteral(2307)", "Delete ReturnStatement(2308)", "Delete Block(2309)", "Delete IfStatement(2310)", "Delete SimpleName: followLeft(2311)", "Delete SimpleName: root(2312)", "Delete MethodInvocation(2313)", "Delete ReturnStatement(2314)", "Delete Block(2315)", "Delete MethodDeclaration(2316)", "Delete TextElement: Goes left through the tree until it finds a valid node.(2317)", "Delete TagElement(2318)", "Delete Javadoc(2319)", "Delete SimpleName: TrieEntry(2320)", "Delete SimpleType: TrieEntry(2321)", "Delete SimpleName: K(2322)", "Delete SimpleType: K(2323)", "Delete SimpleName: V(2324)", "Delete SimpleType: V(2325)", "Delete ParameterizedType: TrieEntry<K,V>(2326)", "Delete SimpleName: followLeft(2327)", "Delete SimpleName: TrieEntry(2328)", "Delete SimpleType: TrieEntry(2329)", "Delete SimpleName: K(2330)", "Delete SimpleType: K(2331)", "Delete SimpleName: V(2332)", "Delete SimpleType: V(2333)", "Delete ParameterizedType: TrieEntry<K,V>(2334)", "Delete SimpleName: node(2335)", "Delete SingleVariableDeclaration(2336)", "Delete BooleanLiteral: true(2337)", "Delete SimpleName: TrieEntry(2338)", "Delete SimpleType: TrieEntry(2339)", "Delete SimpleName: K(2340)", "Delete SimpleType: K(2341)", "Delete SimpleName: V(2342)", "Delete SimpleType: V(2343)", "Delete ParameterizedType: TrieEntry<K,V>(2344)", "Delete SimpleName: child(2345)", "Delete QualifiedName: node.left(2346)", "Delete VariableDeclarationFragment(2347)", "Delete VariableDeclarationStatement(2348)", "Delete SimpleName: child(2349)", "Delete SimpleName: isEmpty(2350)", "Delete MethodInvocation(2351)", "Delete SimpleName: child(2352)", "Delete QualifiedName: node.right(2353)", "Delete Assignment: =(2354)", "Delete ExpressionStatement(2355)", "Delete Block(2356)", "Delete IfStatement(2357)", "Delete QualifiedName: child.bitIndex(2358)", "Delete QualifiedName: node.bitIndex(2359)", "Delete InfixExpression: <=(2360)", "Delete SimpleName: child(2361)", "Delete ReturnStatement(2362)", "Delete Block(2363)", "Delete IfStatement(2364)", "Delete SimpleName: node(2365)", "Delete SimpleName: child(2366)", "Delete Assignment: =(2367)", "Delete ExpressionStatement(2368)", "Delete Block(2369)", "Delete WhileStatement(2370)", "Delete Block(2371)", "Delete MethodDeclaration(2372)", "Delete TextElement: Returns true if 'next' is a valid uplink coming from 'from'.(2373)", "Delete TagElement(2374)", "Delete Javadoc(2375)", "Delete Modifier: static(2376)", "Delete PrimitiveType: boolean(2377)", "Delete SimpleName: isValidUplink(2378)", "Delete Modifier: final(2379)", "Delete SimpleName: TrieEntry(2380)", "Delete SimpleType: TrieEntry(2381)", "Delete WildcardType: ?(2382)", "Delete WildcardType: ?(2383)", "Delete ParameterizedType: TrieEntry<?,?>(2384)", "Delete SimpleName: next(2385)", "Delete SingleVariableDeclaration(2386)", "Delete Modifier: final(2387)", "Delete SimpleName: TrieEntry(2388)", "Delete SimpleType: TrieEntry(2389)", "Delete WildcardType: ?(2390)", "Delete WildcardType: ?(2391)", "Delete ParameterizedType: TrieEntry<?,?>(2392)", "Delete SimpleName: from(2393)", "Delete SingleVariableDeclaration(2394)", "Delete SimpleName: next(2395)", "Delete NullLiteral(2396)", "Delete InfixExpression: !=(2397)", "Delete QualifiedName: next.bitIndex(2398)", "Delete QualifiedName: from.bitIndex(2399)", "Delete InfixExpression: <=(2400)", "Delete InfixExpression: &&(2401)", "Delete SimpleName: next(2402)", "Delete SimpleName: isEmpty(2403)", "Delete MethodInvocation(2404)", "Delete PrefixExpression: !(2405)", "Delete InfixExpression: &&(2406)", "Delete ReturnStatement(2407)", "Delete Block(2408)", "Delete MethodDeclaration(2409)", "Delete TextElement: A (2410)", "Delete SimpleName: Reference(2411)", "Delete TagElement: @link(2412)", "Delete TextElement:  allows us to return something through a Method's(2413)", "Delete TextElement: argument list. An alternative would be to an Array with a length of(2414)", "Delete TextElement: one (1) but that leads to compiler warnings. Computationally and memory(2415)", "Delete TextElement: wise there's no difference (except for the need to load the(2416)", "Delete SimpleName: Reference(2417)", "Delete TagElement: @link(2418)", "Delete TextElement:  Class but that happens only once).(2419)", "Delete TagElement(2420)", "Delete Javadoc(2421)", "Delete Modifier: private(2422)", "Delete Modifier: static(2423)", "Delete SimpleName: Reference(2424)", "Delete SimpleName: E(2425)", "Delete TypeParameter(2426)", "Delete Modifier: private(2427)", "Delete SimpleName: E(2428)", "Delete SimpleType: E(2429)", "Delete SimpleName: item(2430)", "Delete VariableDeclarationFragment(2431)", "Delete FieldDeclaration(2432)", "Delete Modifier: public(2433)", "Delete PrimitiveType: void(2434)", "Delete SimpleName: set(2435)", "Delete Modifier: final(2436)", "Delete SimpleName: E(2437)", "Delete SimpleType: E(2438)", "Delete SimpleName: item(2439)", "Delete SingleVariableDeclaration(2440)", "Delete ThisExpression(2441)", "Delete SimpleName: item(2442)", "Delete FieldAccess(2443)", "Delete SimpleName: item(2444)", "Delete Assignment: =(2445)", "Delete ExpressionStatement(2446)", "Delete Block(2447)", "Delete MethodDeclaration(2448)", "Delete Modifier: public(2449)", "Delete SimpleName: E(2450)", "Delete SimpleType: E(2451)", "Delete SimpleName: get(2452)", "Delete SimpleName: item(2453)", "Delete ReturnStatement(2454)", "Delete Block(2455)", "Delete MethodDeclaration(2456)", "Delete TypeDeclaration: class(2457)", "Delete TextElement: A (2458)", "Delete SimpleName: Trie(2459)", "Delete TagElement: @link(2460)", "Delete TextElement:  is a set of (2461)", "Delete SimpleName: TrieEntry(2462)", "Delete TagElement: @link(2463)", "Delete TextElement:  nodes.(2464)", "Delete TagElement(2465)", "Delete Javadoc(2466)", "Delete Modifier: static(2467)", "Delete SimpleName: TrieEntry(2468)", "Delete SimpleName: K(2469)", "Delete TypeParameter(2470)", "Delete SimpleName: V(2471)", "Delete TypeParameter(2472)", "Delete SimpleName: BasicEntry(2473)", "Delete SimpleType: BasicEntry(2474)", "Delete SimpleName: K(2475)", "Delete SimpleType: K(2476)", "Delete SimpleName: V(2477)", "Delete SimpleType: V(2478)", "Delete ParameterizedType: BasicEntry<K,V>(2479)", "Delete Modifier: private(2480)", "Delete Modifier: static(2481)", "Delete Modifier: final(2482)", "Delete PrimitiveType: long(2483)", "Delete SimpleName: serialVersionUID(2484)", "Delete NumberLiteral: 4596023148184140013L(2485)", "Delete VariableDeclarationFragment(2486)", "Delete FieldDeclaration(2487)", "Delete TextElement: The index this entry is comparing. (2488)", "Delete TagElement(2489)", "Delete Javadoc(2490)", "Delete Modifier: protected(2491)", "Delete PrimitiveType: int(2492)", "Delete SimpleName: bitIndex(2493)", "Delete VariableDeclarationFragment(2494)", "Delete FieldDeclaration(2495)", "Delete TextElement: The parent of this entry. (2496)", "Delete TagElement(2497)", "Delete Javadoc(2498)", "Delete Modifier: protected(2499)", "Delete SimpleName: TrieEntry(2500)", "Delete SimpleType: TrieEntry(2501)", "Delete SimpleName: K(2502)", "Delete SimpleType: K(2503)", "Delete SimpleName: V(2504)", "Delete SimpleType: V(2505)", "Delete ParameterizedType: TrieEntry<K,V>(2506)", "Delete SimpleName: parent(2507)", "Delete VariableDeclarationFragment(2508)", "Delete FieldDeclaration(2509)", "Delete TextElement: The left child of this entry. (2510)", "Delete TagElement(2511)", "Delete Javadoc(2512)", "Delete Modifier: protected(2513)", "Delete SimpleName: TrieEntry(2514)", "Delete SimpleType: TrieEntry(2515)", "Delete SimpleName: K(2516)", "Delete SimpleType: K(2517)", "Delete SimpleName: V(2518)", "Delete SimpleType: V(2519)", "Delete ParameterizedType: TrieEntry<K,V>(2520)", "Delete SimpleName: left(2521)", "Delete VariableDeclarationFragment(2522)", "Delete FieldDeclaration(2523)", "Delete TextElement: The right child of this entry. (2524)", "Delete TagElement(2525)", "Delete Javadoc(2526)", "Delete Modifier: protected(2527)", "Delete SimpleName: TrieEntry(2528)", "Delete SimpleType: TrieEntry(2529)", "Delete SimpleName: K(2530)", "Delete SimpleType: K(2531)", "Delete SimpleName: V(2532)", "Delete SimpleType: V(2533)", "Delete ParameterizedType: TrieEntry<K,V>(2534)", "Delete SimpleName: right(2535)", "Delete VariableDeclarationFragment(2536)", "Delete FieldDeclaration(2537)", "Delete TextElement: The entry who uplinks to this entry. (2538)", "Delete TagElement(2539)", "Delete Javadoc(2540)", "Delete Modifier: protected(2541)", "Delete SimpleName: TrieEntry(2542)", "Delete SimpleType: TrieEntry(2543)", "Delete SimpleName: K(2544)", "Delete SimpleType: K(2545)", "Delete SimpleName: V(2546)", "Delete SimpleType: V(2547)", "Delete ParameterizedType: TrieEntry<K,V>(2548)", "Delete SimpleName: predecessor(2549)", "Delete VariableDeclarationFragment(2550)", "Delete FieldDeclaration(2551)", "Delete Modifier: public(2552)", "Delete SimpleName: TrieEntry(2553)", "Delete Modifier: final(2554)", "Delete SimpleName: K(2555)", "Delete SimpleType: K(2556)", "Delete SimpleName: key(2557)", "Delete SingleVariableDeclaration(2558)", "Delete Modifier: final(2559)", "Delete SimpleName: V(2560)", "Delete SimpleType: V(2561)", "Delete SimpleName: value(2562)", "Delete SingleVariableDeclaration(2563)", "Delete Modifier: final(2564)", "Delete PrimitiveType: int(2565)", "Delete SimpleName: bitIndex(2566)", "Delete SingleVariableDeclaration(2567)", "Delete SimpleName: key(2568)", "Delete SimpleName: value(2569)", "Delete SuperConstructorInvocation(2570)", "Delete ThisExpression(2571)", "Delete SimpleName: bitIndex(2572)", "Delete FieldAccess(2573)", "Delete SimpleName: bitIndex(2574)", "Delete Assignment: =(2575)", "Delete ExpressionStatement(2576)", "Delete ThisExpression(2577)", "Delete SimpleName: parent(2578)", "Delete FieldAccess(2579)", "Delete NullLiteral(2580)", "Delete Assignment: =(2581)", "Delete ExpressionStatement(2582)", "Delete ThisExpression(2583)", "Delete SimpleName: left(2584)", "Delete FieldAccess(2585)", "Delete ThisExpression(2586)", "Delete Assignment: =(2587)", "Delete ExpressionStatement(2588)", "Delete ThisExpression(2589)", "Delete SimpleName: right(2590)", "Delete FieldAccess(2591)", "Delete NullLiteral(2592)", "Delete Assignment: =(2593)", "Delete ExpressionStatement(2594)", "Delete ThisExpression(2595)", "Delete SimpleName: predecessor(2596)", "Delete FieldAccess(2597)", "Delete ThisExpression(2598)", "Delete Assignment: =(2599)", "Delete ExpressionStatement(2600)", "Delete Block(2601)", "Delete MethodDeclaration(2602)", "Delete TextElement: Whether or not the entry is storing a key.(2603)", "Delete TextElement: Only the root can potentially be empty, all other(2604)", "Delete TextElement: nodes must have a key.(2605)", "Delete TagElement(2606)", "Delete Javadoc(2607)", "Delete Modifier: public(2608)", "Delete PrimitiveType: boolean(2609)", "Delete SimpleName: isEmpty(2610)", "Delete SimpleName: key(2611)", "Delete NullLiteral(2612)", "Delete InfixExpression: ==(2613)", "Delete ReturnStatement(2614)", "Delete Block(2615)", "Delete MethodDeclaration(2616)", "Delete TextElement: Neither the left nor right child is a loopback.(2617)", "Delete TagElement(2618)", "Delete Javadoc(2619)", "Delete Modifier: public(2620)", "Delete PrimitiveType: boolean(2621)", "Delete SimpleName: isInternalNode(2622)", "Delete SimpleName: left(2623)", "Delete ThisExpression(2624)", "Delete InfixExpression: !=(2625)", "Delete SimpleName: right(2626)", "Delete ThisExpression(2627)", "Delete InfixExpression: !=(2628)", "Delete InfixExpression: &&(2629)", "Delete ReturnStatement(2630)", "Delete Block(2631)", "Delete MethodDeclaration(2632)", "Delete TextElement: Either the left or right child is a loopback.(2633)", "Delete TagElement(2634)", "Delete Javadoc(2635)", "Delete Modifier: public(2636)", "Delete PrimitiveType: boolean(2637)", "Delete SimpleName: isExternalNode(2638)", "Delete SimpleName: isInternalNode(2639)", "Delete MethodInvocation(2640)", "Delete PrefixExpression: !(2641)", "Delete ReturnStatement(2642)", "Delete Block(2643)", "Delete MethodDeclaration(2644)", "Delete SimpleName: Override(2645)", "Delete MarkerAnnotation(2646)", "Delete Modifier: public(2647)", "Delete SimpleName: String(2648)", "Delete SimpleType: String(2649)", "Delete SimpleName: toString(2650)", "Delete Modifier: final(2651)", "Delete SimpleName: StringBuilder(2652)", "Delete SimpleType: StringBuilder(2653)", "Delete SimpleName: buffer(2654)", "Delete SimpleName: StringBuilder(2655)", "Delete SimpleType: StringBuilder(2656)", "Delete ClassInstanceCreation(2657)", "Delete VariableDeclarationFragment(2658)", "Delete VariableDeclarationStatement(2659)", "Delete SimpleName: bitIndex(2660)", "Delete NumberLiteral: 1(2661)", "Delete PrefixExpression: -(2662)", "Delete InfixExpression: ==(2663)", "Delete SimpleName: buffer(2664)", "Delete SimpleName: append(2665)", "Delete StringLiteral: \"RootEntry(\"(2666)", "Delete MethodInvocation(2667)", "Delete ExpressionStatement(2668)", "Delete Block(2669)", "Delete SimpleName: buffer(2670)", "Delete SimpleName: append(2671)", "Delete StringLiteral: \"Entry(\"(2672)", "Delete MethodInvocation(2673)", "Delete ExpressionStatement(2674)", "Delete Block(2675)", "Delete IfStatement(2676)", "Delete SimpleName: buffer(2677)", "Delete SimpleName: append(2678)", "Delete StringLiteral: \"key=\"(2679)", "Delete MethodInvocation(2680)", "Delete SimpleName: append(2681)", "Delete SimpleName: getKey(2682)", "Delete MethodInvocation(2683)", "Delete MethodInvocation(2684)", "Delete SimpleName: append(2685)", "Delete StringLiteral: \" [\"(2686)", "Delete MethodInvocation(2687)", "Delete SimpleName: append(2688)", "Delete SimpleName: bitIndex(2689)", "Delete MethodInvocation(2690)", "Delete SimpleName: append(2691)", "Delete StringLiteral: \"], \"(2692)", "Delete MethodInvocation(2693)", "Delete ExpressionStatement(2694)", "Delete SimpleName: buffer(2695)", "Delete SimpleName: append(2696)", "Delete StringLiteral: \"value=\"(2697)", "Delete MethodInvocation(2698)", "Delete SimpleName: append(2699)", "Delete SimpleName: getValue(2700)", "Delete MethodInvocation(2701)", "Delete MethodInvocation(2702)", "Delete SimpleName: append(2703)", "Delete StringLiteral: \", \"(2704)", "Delete MethodInvocation(2705)", "Delete ExpressionStatement(2706)", "Delete SimpleName: parent(2707)", "Delete NullLiteral(2708)", "Delete InfixExpression: !=(2709)", "Delete QualifiedName: parent.bitIndex(2710)", "Delete NumberLiteral: 1(2711)", "Delete PrefixExpression: -(2712)", "Delete InfixExpression: ==(2713)", "Delete SimpleName: buffer(2714)", "Delete SimpleName: append(2715)", "Delete StringLiteral: \"parent=\"(2716)", "Delete MethodInvocation(2717)", "Delete SimpleName: append(2718)", "Delete StringLiteral: \"ROOT\"(2719)", "Delete MethodInvocation(2720)", "Delete ExpressionStatement(2721)", "Delete Block(2722)", "Delete SimpleName: buffer(2723)", "Delete SimpleName: append(2724)", "Delete StringLiteral: \"parent=\"(2725)", "Delete MethodInvocation(2726)", "Delete SimpleName: append(2727)", "Delete SimpleName: parent(2728)", "Delete SimpleName: getKey(2729)", "Delete MethodInvocation(2730)", "Delete MethodInvocation(2731)", "Delete SimpleName: append(2732)", "Delete StringLiteral: \" [\"(2733)", "Delete MethodInvocation(2734)", "Delete SimpleName: append(2735)", "Delete QualifiedName: parent.bitIndex(2736)", "Delete MethodInvocation(2737)", "Delete SimpleName: append(2738)", "Delete StringLiteral: \"]\"(2739)", "Delete MethodInvocation(2740)", "Delete ExpressionStatement(2741)", "Delete Block(2742)", "Delete IfStatement(2743)", "Delete Block(2744)", "Delete SimpleName: buffer(2745)", "Delete SimpleName: append(2746)", "Delete StringLiteral: \"parent=\"(2747)", "Delete MethodInvocation(2748)", "Delete SimpleName: append(2749)", "Delete StringLiteral: \"null\"(2750)", "Delete MethodInvocation(2751)", "Delete ExpressionStatement(2752)", "Delete Block(2753)", "Delete IfStatement(2754)", "Delete SimpleName: buffer(2755)", "Delete SimpleName: append(2756)", "Delete StringLiteral: \", \"(2757)", "Delete MethodInvocation(2758)", "Delete ExpressionStatement(2759)", "Delete SimpleName: left(2760)", "Delete NullLiteral(2761)", "Delete InfixExpression: !=(2762)", "Delete QualifiedName: left.bitIndex(2763)", "Delete NumberLiteral: 1(2764)", "Delete PrefixExpression: -(2765)", "Delete InfixExpression: ==(2766)", "Delete SimpleName: buffer(2767)", "Delete SimpleName: append(2768)", "Delete StringLiteral: \"left=\"(2769)", "Delete MethodInvocation(2770)", "Delete SimpleName: append(2771)", "Delete StringLiteral: \"ROOT\"(2772)", "Delete MethodInvocation(2773)", "Delete ExpressionStatement(2774)", "Delete Block(2775)", "Delete SimpleName: buffer(2776)", "Delete SimpleName: append(2777)", "Delete StringLiteral: \"left=\"(2778)", "Delete MethodInvocation(2779)", "Delete SimpleName: append(2780)", "Delete SimpleName: left(2781)", "Delete SimpleName: getKey(2782)", "Delete MethodInvocation(2783)", "Delete MethodInvocation(2784)", "Delete SimpleName: append(2785)", "Delete StringLiteral: \" [\"(2786)", "Delete MethodInvocation(2787)", "Delete SimpleName: append(2788)", "Delete QualifiedName: left.bitIndex(2789)", "Delete MethodInvocation(2790)", "Delete SimpleName: append(2791)", "Delete StringLiteral: \"]\"(2792)", "Delete MethodInvocation(2793)", "Delete ExpressionStatement(2794)", "Delete Block(2795)", "Delete IfStatement(2796)", "Delete Block(2797)", "Delete SimpleName: buffer(2798)", "Delete SimpleName: append(2799)", "Delete StringLiteral: \"left=\"(2800)", "Delete MethodInvocation(2801)", "Delete SimpleName: append(2802)", "Delete StringLiteral: \"null\"(2803)", "Delete MethodInvocation(2804)", "Delete ExpressionStatement(2805)", "Delete Block(2806)", "Delete IfStatement(2807)", "Delete SimpleName: buffer(2808)", "Delete SimpleName: append(2809)", "Delete StringLiteral: \", \"(2810)", "Delete MethodInvocation(2811)", "Delete ExpressionStatement(2812)", "Delete SimpleName: right(2813)", "Delete NullLiteral(2814)", "Delete InfixExpression: !=(2815)", "Delete QualifiedName: right.bitIndex(2816)", "Delete NumberLiteral: 1(2817)", "Delete PrefixExpression: -(2818)", "Delete InfixExpression: ==(2819)", "Delete SimpleName: buffer(2820)", "Delete SimpleName: append(2821)", "Delete StringLiteral: \"right=\"(2822)", "Delete MethodInvocation(2823)", "Delete SimpleName: append(2824)", "Delete StringLiteral: \"ROOT\"(2825)", "Delete MethodInvocation(2826)", "Delete ExpressionStatement(2827)", "Delete Block(2828)", "Delete SimpleName: buffer(2829)", "Delete SimpleName: append(2830)", "Delete StringLiteral: \"right=\"(2831)", "Delete MethodInvocation(2832)", "Delete SimpleName: append(2833)", "Delete SimpleName: right(2834)", "Delete SimpleName: getKey(2835)", "Delete MethodInvocation(2836)", "Delete MethodInvocation(2837)", "Delete SimpleName: append(2838)", "Delete StringLiteral: \" [\"(2839)", "Delete MethodInvocation(2840)", "Delete SimpleName: append(2841)", "Delete QualifiedName: right.bitIndex(2842)", "Delete MethodInvocation(2843)", "Delete SimpleName: append(2844)", "Delete StringLiteral: \"]\"(2845)", "Delete MethodInvocation(2846)", "Delete ExpressionStatement(2847)", "Delete Block(2848)", "Delete IfStatement(2849)", "Delete Block(2850)", "Delete SimpleName: buffer(2851)", "Delete SimpleName: append(2852)", "Delete StringLiteral: \"right=\"(2853)", "Delete MethodInvocation(2854)", "Delete SimpleName: append(2855)", "Delete StringLiteral: \"null\"(2856)", "Delete MethodInvocation(2857)", "Delete ExpressionStatement(2858)", "Delete Block(2859)", "Delete IfStatement(2860)", "Delete SimpleName: buffer(2861)", "Delete SimpleName: append(2862)", "Delete StringLiteral: \", \"(2863)", "Delete MethodInvocation(2864)", "Delete ExpressionStatement(2865)", "Delete SimpleName: predecessor(2866)", "Delete NullLiteral(2867)", "Delete InfixExpression: !=(2868)", "Delete QualifiedName: predecessor.bitIndex(2869)", "Delete NumberLiteral: 1(2870)", "Delete PrefixExpression: -(2871)", "Delete InfixExpression: ==(2872)", "Delete SimpleName: buffer(2873)", "Delete SimpleName: append(2874)", "Delete StringLiteral: \"predecessor=\"(2875)", "Delete MethodInvocation(2876)", "Delete SimpleName: append(2877)", "Delete StringLiteral: \"ROOT\"(2878)", "Delete MethodInvocation(2879)", "Delete ExpressionStatement(2880)", "Delete Block(2881)", "Delete SimpleName: buffer(2882)", "Delete SimpleName: append(2883)", "Delete StringLiteral: \"predecessor=\"(2884)", "Delete MethodInvocation(2885)", "Delete SimpleName: append(2886)", "Delete SimpleName: predecessor(2887)", "Delete SimpleName: getKey(2888)", "Delete MethodInvocation(2889)", "Delete MethodInvocation(2890)", "Delete SimpleName: append(2891)", "Delete StringLiteral: \" [\"(2892)", "Delete MethodInvocation(2893)", "Delete SimpleName: append(2894)", "Delete QualifiedName: predecessor.bitIndex(2895)", "Delete MethodInvocation(2896)", "Delete SimpleName: append(2897)", "Delete StringLiteral: \"]\"(2898)", "Delete MethodInvocation(2899)", "Delete ExpressionStatement(2900)", "Delete Block(2901)", "Delete IfStatement(2902)", "Delete Block(2903)", "Delete IfStatement(2904)", "Delete SimpleName: buffer(2905)", "Delete SimpleName: append(2906)", "Delete StringLiteral: \")\"(2907)", "Delete MethodInvocation(2908)", "Delete ExpressionStatement(2909)", "Delete SimpleName: buffer(2910)", "Delete SimpleName: toString(2911)", "Delete MethodInvocation(2912)", "Delete ReturnStatement(2913)", "Delete Block(2914)", "Delete MethodDeclaration(2915)", "Delete TypeDeclaration: class(2916)", "Delete TextElement: This is a entry set view of the (2917)", "Delete SimpleName: Trie(2918)", "Delete TagElement: @link(2919)", "Delete TextElement:  as returned by (2920)", "Delete SimpleName: Map(2921)", "Delete SimpleName: entrySet(2922)", "Delete MethodRef(2923)", "Delete TagElement: @link(2924)", "Delete TextElement: .(2925)", "Delete TagElement(2926)", "Delete Javadoc(2927)", "Delete Modifier: private(2928)", "Delete SimpleName: EntrySet(2929)", "Delete SimpleName: AbstractSet(2930)", "Delete SimpleType: AbstractSet(2931)", "Delete QualifiedName: Map.Entry(2932)", "Delete SimpleType: Map.Entry(2933)", "Delete SimpleName: K(2934)", "Delete SimpleType: K(2935)", "Delete SimpleName: V(2936)", "Delete SimpleType: V(2937)", "Delete ParameterizedType: Map.Entry<K,V>(2938)", "Delete ParameterizedType: AbstractSet<Map.Entry<K,V>>(2939)", "Delete SimpleName: Override(2940)", "Delete MarkerAnnotation(2941)", "Delete Modifier: public(2942)", "Delete SimpleName: Iterator(2943)", "Delete SimpleType: Iterator(2944)", "Delete QualifiedName: Map.Entry(2945)", "Delete SimpleType: Map.Entry(2946)", "Delete SimpleName: K(2947)", "Delete SimpleType: K(2948)", "Delete SimpleName: V(2949)", "Delete SimpleType: V(2950)", "Delete ParameterizedType: Map.Entry<K,V>(2951)", "Delete ParameterizedType: Iterator<Map.Entry<K,V>>(2952)", "Delete SimpleName: iterator(2953)", "Delete SimpleName: EntryIterator(2954)", "Delete SimpleType: EntryIterator(2955)", "Delete ClassInstanceCreation(2956)", "Delete ReturnStatement(2957)", "Delete Block(2958)", "Delete MethodDeclaration(2959)", "Delete SimpleName: Override(2960)", "Delete MarkerAnnotation(2961)", "Delete Modifier: public(2962)", "Delete PrimitiveType: boolean(2963)", "Delete SimpleName: contains(2964)", "Delete Modifier: final(2965)", "Delete SimpleName: Object(2966)", "Delete SimpleType: Object(2967)", "Delete SimpleName: o(2968)", "Delete SingleVariableDeclaration(2969)", "Delete SimpleName: o(2970)", "Delete QualifiedName: Map.Entry(2971)", "Delete SimpleType: Map.Entry(2972)", "Delete InstanceofExpression(2973)", "Delete ParenthesizedExpression(2974)", "Delete PrefixExpression: !(2975)", "Delete BooleanLiteral: false(2976)", "Delete ReturnStatement(2977)", "Delete Block(2978)", "Delete IfStatement(2979)", "Delete Modifier: final(2980)", "Delete SimpleName: TrieEntry(2981)", "Delete SimpleType: TrieEntry(2982)", "Delete SimpleName: K(2983)", "Delete SimpleType: K(2984)", "Delete SimpleName: V(2985)", "Delete SimpleType: V(2986)", "Delete ParameterizedType: TrieEntry<K,V>(2987)", "Delete SimpleName: candidate(2988)", "Delete SimpleName: getEntry(2989)", "Delete QualifiedName: Map.Entry(2990)", "Delete SimpleType: Map.Entry(2991)", "Delete WildcardType: ?(2992)", "Delete WildcardType: ?(2993)", "Delete ParameterizedType: Map.Entry<?,?>(2994)", "Delete SimpleName: o(2995)", "Delete CastExpression(2996)", "Delete ParenthesizedExpression(2997)", "Delete SimpleName: getKey(2998)", "Delete MethodInvocation(2999)", "Delete MethodInvocation(3000)", "Delete VariableDeclarationFragment(3001)", "Delete VariableDeclarationStatement(3002)", "Delete SimpleName: candidate(3003)", "Delete NullLiteral(3004)", "Delete InfixExpression: !=(3005)", "Delete SimpleName: candidate(3006)", "Delete SimpleName: equals(3007)", "Delete SimpleName: o(3008)", "Delete MethodInvocation(3009)", "Delete InfixExpression: &&(3010)", "Delete ReturnStatement(3011)", "Delete Block(3012)", "Delete MethodDeclaration(3013)", "Delete SimpleName: Override(3014)", "Delete MarkerAnnotation(3015)", "Delete Modifier: public(3016)", "Delete PrimitiveType: boolean(3017)", "Delete SimpleName: remove(3018)", "Delete Modifier: final(3019)", "Delete SimpleName: Object(3020)", "Delete SimpleType: Object(3021)", "Delete SimpleName: o(3022)", "Delete SingleVariableDeclaration(3023)", "Delete Modifier: final(3024)", "Delete PrimitiveType: int(3025)", "Delete SimpleName: size(3026)", "Delete SimpleName: size(3027)", "Delete MethodInvocation(3028)", "Delete VariableDeclarationFragment(3029)", "Delete VariableDeclarationStatement(3030)", "Delete SimpleName: PatriciaTrieBase(3031)", "Delete ThisExpression(3032)", "Delete SimpleName: remove(3033)", "Delete SimpleName: o(3034)", "Delete MethodInvocation(3035)", "Delete ExpressionStatement(3036)", "Delete SimpleName: size(3037)", "Delete SimpleName: size(3038)", "Delete MethodInvocation(3039)", "Delete InfixExpression: !=(3040)", "Delete ReturnStatement(3041)", "Delete Block(3042)", "Delete MethodDeclaration(3043)", "Delete SimpleName: Override(3044)", "Delete MarkerAnnotation(3045)", "Delete Modifier: public(3046)", "Delete PrimitiveType: int(3047)", "Delete SimpleName: size(3048)", "Delete SimpleName: PatriciaTrieBase(3049)", "Delete ThisExpression(3050)", "Delete SimpleName: size(3051)", "Delete MethodInvocation(3052)", "Delete ReturnStatement(3053)", "Delete Block(3054)", "Delete MethodDeclaration(3055)", "Delete SimpleName: Override(3056)", "Delete MarkerAnnotation(3057)", "Delete Modifier: public(3058)", "Delete PrimitiveType: void(3059)", "Delete SimpleName: clear(3060)", "Delete SimpleName: PatriciaTrieBase(3061)", "Delete ThisExpression(3062)", "Delete SimpleName: clear(3063)", "Delete MethodInvocation(3064)", "Delete ExpressionStatement(3065)", "Delete Block(3066)", "Delete MethodDeclaration(3067)", "Delete TextElement: An (3068)", "Delete SimpleName: Iterator(3069)", "Delete TagElement: @link(3070)", "Delete TextElement:  that returns (3071)", "Delete SimpleName: Entry(3072)", "Delete TagElement: @link(3073)", "Delete TextElement:  Objects.(3074)", "Delete TagElement(3075)", "Delete Javadoc(3076)", "Delete Modifier: private(3077)", "Delete SimpleName: EntryIterator(3078)", "Delete SimpleName: TrieIterator(3079)", "Delete SimpleType: TrieIterator(3080)", "Delete QualifiedName: Map.Entry(3081)", "Delete SimpleType: Map.Entry(3082)", "Delete SimpleName: K(3083)", "Delete SimpleType: K(3084)", "Delete SimpleName: V(3085)", "Delete SimpleType: V(3086)", "Delete ParameterizedType: Map.Entry<K,V>(3087)", "Delete ParameterizedType: TrieIterator<Map.Entry<K,V>>(3088)", "Delete Modifier: public(3089)", "Delete QualifiedName: Map.Entry(3090)", "Delete SimpleType: Map.Entry(3091)", "Delete SimpleName: K(3092)", "Delete SimpleType: K(3093)", "Delete SimpleName: V(3094)", "Delete SimpleType: V(3095)", "Delete ParameterizedType: Map.Entry<K,V>(3096)", "Delete SimpleName: next(3097)", "Delete SimpleName: nextEntry(3098)", "Delete MethodInvocation(3099)", "Delete ReturnStatement(3100)", "Delete Block(3101)", "Delete MethodDeclaration(3102)", "Delete TypeDeclaration: class(3103)", "Delete TypeDeclaration: class(3104)", "Delete TextElement: This is a key set view of the (3105)", "Delete SimpleName: Trie(3106)", "Delete TagElement: @link(3107)", "Delete TextElement:  as returned by (3108)", "Delete SimpleName: Map(3109)", "Delete SimpleName: keySet(3110)", "Delete MethodRef(3111)", "Delete TagElement: @link(3112)", "Delete TextElement: .(3113)", "Delete TagElement(3114)", "Delete Javadoc(3115)", "Delete Modifier: private(3116)", "Delete SimpleName: KeySet(3117)", "Delete SimpleName: AbstractSet(3118)", "Delete SimpleType: AbstractSet(3119)", "Delete SimpleName: K(3120)", "Delete SimpleType: K(3121)", "Delete ParameterizedType: AbstractSet<K>(3122)", "Delete SimpleName: Override(3123)", "Delete MarkerAnnotation(3124)", "Delete Modifier: public(3125)", "Delete SimpleName: Iterator(3126)", "Delete SimpleType: Iterator(3127)", "Delete SimpleName: K(3128)", "Delete SimpleType: K(3129)", "Delete ParameterizedType: Iterator<K>(3130)", "Delete SimpleName: iterator(3131)", "Delete SimpleName: KeyIterator(3132)", "Delete SimpleType: KeyIterator(3133)", "Delete ClassInstanceCreation(3134)", "Delete ReturnStatement(3135)", "Delete Block(3136)", "Delete MethodDeclaration(3137)", "Delete SimpleName: Override(3138)", "Delete MarkerAnnotation(3139)", "Delete Modifier: public(3140)", "Delete PrimitiveType: int(3141)", "Delete SimpleName: size(3142)", "Delete SimpleName: PatriciaTrieBase(3143)", "Delete ThisExpression(3144)", "Delete SimpleName: size(3145)", "Delete MethodInvocation(3146)", "Delete ReturnStatement(3147)", "Delete Block(3148)", "Delete MethodDeclaration(3149)", "Delete SimpleName: Override(3150)", "Delete MarkerAnnotation(3151)", "Delete Modifier: public(3152)", "Delete PrimitiveType: boolean(3153)", "Delete SimpleName: contains(3154)", "Delete Modifier: final(3155)", "Delete SimpleName: Object(3156)", "Delete SimpleType: Object(3157)", "Delete SimpleName: o(3158)", "Delete SingleVariableDeclaration(3159)", "Delete SimpleName: containsKey(3160)", "Delete SimpleName: o(3161)", "Delete MethodInvocation(3162)", "Delete ReturnStatement(3163)", "Delete Block(3164)", "Delete MethodDeclaration(3165)", "Delete SimpleName: Override(3166)", "Delete MarkerAnnotation(3167)", "Delete Modifier: public(3168)", "Delete PrimitiveType: boolean(3169)", "Delete SimpleName: remove(3170)", "Delete Modifier: final(3171)", "Delete SimpleName: Object(3172)", "Delete SimpleType: Object(3173)", "Delete SimpleName: o(3174)", "Delete SingleVariableDeclaration(3175)", "Delete Modifier: final(3176)", "Delete PrimitiveType: int(3177)", "Delete SimpleName: size(3178)", "Delete SimpleName: size(3179)", "Delete MethodInvocation(3180)", "Delete VariableDeclarationFragment(3181)", "Delete VariableDeclarationStatement(3182)", "Delete SimpleName: PatriciaTrieBase(3183)", "Delete ThisExpression(3184)", "Delete SimpleName: remove(3185)", "Delete SimpleName: o(3186)", "Delete MethodInvocation(3187)", "Delete ExpressionStatement(3188)", "Delete SimpleName: size(3189)", "Delete SimpleName: size(3190)", "Delete MethodInvocation(3191)", "Delete InfixExpression: !=(3192)", "Delete ReturnStatement(3193)", "Delete Block(3194)", "Delete MethodDeclaration(3195)", "Delete SimpleName: Override(3196)", "Delete MarkerAnnotation(3197)", "Delete Modifier: public(3198)", "Delete PrimitiveType: void(3199)", "Delete SimpleName: clear(3200)", "Delete SimpleName: PatriciaTrieBase(3201)", "Delete ThisExpression(3202)", "Delete SimpleName: clear(3203)", "Delete MethodInvocation(3204)", "Delete ExpressionStatement(3205)", "Delete Block(3206)", "Delete MethodDeclaration(3207)", "Delete TextElement: An (3208)", "Delete SimpleName: Iterator(3209)", "Delete TagElement: @link(3210)", "Delete TextElement:  that returns Key Objects.(3211)", "Delete TagElement(3212)", "Delete Javadoc(3213)", "Delete Modifier: private(3214)", "Delete SimpleName: KeyIterator(3215)", "Delete SimpleName: TrieIterator(3216)", "Delete SimpleType: TrieIterator(3217)", "Delete SimpleName: K(3218)", "Delete SimpleType: K(3219)", "Delete ParameterizedType: TrieIterator<K>(3220)", "Delete Modifier: public(3221)", "Delete SimpleName: K(3222)", "Delete SimpleType: K(3223)", "Delete SimpleName: next(3224)", "Delete SimpleName: nextEntry(3225)", "Delete MethodInvocation(3226)", "Delete SimpleName: getKey(3227)", "Delete MethodInvocation(3228)", "Delete ReturnStatement(3229)", "Delete Block(3230)", "Delete MethodDeclaration(3231)", "Delete TypeDeclaration: class(3232)", "Delete TypeDeclaration: class(3233)", "Delete TextElement: This is a value view of the (3234)", "Delete SimpleName: Trie(3235)", "Delete TagElement: @link(3236)", "Delete TextElement:  as returned by (3237)", "Delete SimpleName: Map(3238)", "Delete SimpleName: values(3239)", "Delete MethodRef(3240)", "Delete TagElement: @link(3241)", "Delete TextElement: .(3242)", "Delete TagElement(3243)", "Delete Javadoc(3244)", "Delete Modifier: private(3245)", "Delete SimpleName: Values(3246)", "Delete SimpleName: AbstractCollection(3247)", "Delete SimpleType: AbstractCollection(3248)", "Delete SimpleName: V(3249)", "Delete SimpleType: V(3250)", "Delete ParameterizedType: AbstractCollection<V>(3251)", "Delete SimpleName: Override(3252)", "Delete MarkerAnnotation(3253)", "Delete Modifier: public(3254)", "Delete SimpleName: Iterator(3255)", "Delete SimpleType: Iterator(3256)", "Delete SimpleName: V(3257)", "Delete SimpleType: V(3258)", "Delete ParameterizedType: Iterator<V>(3259)", "Delete SimpleName: iterator(3260)", "Delete SimpleName: ValueIterator(3261)", "Delete SimpleType: ValueIterator(3262)", "Delete ClassInstanceCreation(3263)", "Delete ReturnStatement(3264)", "Delete Block(3265)", "Delete MethodDeclaration(3266)", "Delete SimpleName: Override(3267)", "Delete MarkerAnnotation(3268)", "Delete Modifier: public(3269)", "Delete PrimitiveType: int(3270)", "Delete SimpleName: size(3271)", "Delete SimpleName: PatriciaTrieBase(3272)", "Delete ThisExpression(3273)", "Delete SimpleName: size(3274)", "Delete MethodInvocation(3275)", "Delete ReturnStatement(3276)", "Delete Block(3277)", "Delete MethodDeclaration(3278)", "Delete SimpleName: Override(3279)", "Delete MarkerAnnotation(3280)", "Delete Modifier: public(3281)", "Delete PrimitiveType: boolean(3282)", "Delete SimpleName: contains(3283)", "Delete Modifier: final(3284)", "Delete SimpleName: Object(3285)", "Delete SimpleType: Object(3286)", "Delete SimpleName: o(3287)", "Delete SingleVariableDeclaration(3288)", "Delete SimpleName: containsValue(3289)", "Delete SimpleName: o(3290)", "Delete MethodInvocation(3291)", "Delete ReturnStatement(3292)", "Delete Block(3293)", "Delete MethodDeclaration(3294)", "Delete SimpleName: Override(3295)", "Delete MarkerAnnotation(3296)", "Delete Modifier: public(3297)", "Delete PrimitiveType: void(3298)", "Delete SimpleName: clear(3299)", "Delete SimpleName: PatriciaTrieBase(3300)", "Delete ThisExpression(3301)", "Delete SimpleName: clear(3302)", "Delete MethodInvocation(3303)", "Delete ExpressionStatement(3304)", "Delete Block(3305)", "Delete MethodDeclaration(3306)", "Delete SimpleName: Override(3307)", "Delete MarkerAnnotation(3308)", "Delete Modifier: public(3309)", "Delete PrimitiveType: boolean(3310)", "Delete SimpleName: remove(3311)", "Delete Modifier: final(3312)", "Delete SimpleName: Object(3313)", "Delete SimpleType: Object(3314)", "Delete SimpleName: o(3315)", "Delete SingleVariableDeclaration(3316)", "Delete Modifier: final(3317)", "Delete SimpleName: Iterator(3318)", "Delete SimpleType: Iterator(3319)", "Delete SimpleName: V(3320)", "Delete SimpleType: V(3321)", "Delete ParameterizedType: Iterator<V>(3322)", "Delete SimpleName: it(3323)", "Delete SimpleName: iterator(3324)", "Delete MethodInvocation(3325)", "Delete VariableDeclarationFragment(3326)", "Delete VariableDeclarationExpression(3327)", "Delete SimpleName: it(3328)", "Delete SimpleName: hasNext(3329)", "Delete MethodInvocation(3330)", "Delete Modifier: final(3331)", "Delete SimpleName: V(3332)", "Delete SimpleType: V(3333)", "Delete SimpleName: value(3334)", "Delete SimpleName: it(3335)", "Delete SimpleName: next(3336)", "Delete MethodInvocation(3337)", "Delete VariableDeclarationFragment(3338)", "Delete VariableDeclarationStatement(3339)", "Delete SimpleName: compare(3340)", "Delete SimpleName: value(3341)", "Delete SimpleName: o(3342)", "Delete MethodInvocation(3343)", "Delete SimpleName: it(3344)", "Delete SimpleName: remove(3345)", "Delete MethodInvocation(3346)", "Delete ExpressionStatement(3347)", "Delete BooleanLiteral: true(3348)", "Delete ReturnStatement(3349)", "Delete Block(3350)", "Delete IfStatement(3351)", "Delete Block(3352)", "Delete ForStatement(3353)", "Delete BooleanLiteral: false(3354)", "Delete ReturnStatement(3355)", "Delete Block(3356)", "Delete MethodDeclaration(3357)", "Delete TextElement: An (3358)", "Delete SimpleName: Iterator(3359)", "Delete TagElement: @link(3360)", "Delete TextElement:  that returns Value Objects.(3361)", "Delete TagElement(3362)", "Delete Javadoc(3363)", "Delete Modifier: private(3364)", "Delete SimpleName: ValueIterator(3365)", "Delete SimpleName: TrieIterator(3366)", "Delete SimpleType: TrieIterator(3367)", "Delete SimpleName: V(3368)", "Delete SimpleType: V(3369)", "Delete ParameterizedType: TrieIterator<V>(3370)", "Delete Modifier: public(3371)", "Delete SimpleName: V(3372)", "Delete SimpleType: V(3373)", "Delete SimpleName: next(3374)", "Delete SimpleName: nextEntry(3375)", "Delete MethodInvocation(3376)", "Delete SimpleName: getValue(3377)", "Delete MethodInvocation(3378)", "Delete ReturnStatement(3379)", "Delete Block(3380)", "Delete MethodDeclaration(3381)", "Delete TypeDeclaration: class(3382)", "Delete TypeDeclaration: class(3383)", "Delete TextElement: An iterator for the entries.(3384)", "Delete TagElement(3385)", "Delete Javadoc(3386)", "Delete Modifier: abstract(3387)", "Delete SimpleName: TrieIterator(3388)", "Delete SimpleName: E(3389)", "Delete TypeParameter(3390)", "Delete SimpleName: Iterator(3391)", "Delete SimpleType: Iterator(3392)", "Delete SimpleName: E(3393)", "Delete SimpleType: E(3394)", "Delete ParameterizedType: Iterator<E>(3395)", "Delete TextElement: For fast-fail. (3396)", "Delete TagElement(3397)", "Delete Javadoc(3398)", "Delete Modifier: protected(3399)", "Delete PrimitiveType: int(3400)", "Delete SimpleName: expectedModCount(3401)", "Delete SimpleName: PatriciaTrieBase(3402)", "Delete ThisExpression(3403)", "Delete SimpleName: modCount(3404)", "Delete FieldAccess(3405)", "Delete VariableDeclarationFragment(3406)", "Delete FieldDeclaration(3407)", "Delete Modifier: protected(3408)", "Delete SimpleName: TrieEntry(3409)", "Delete SimpleType: TrieEntry(3410)", "Delete SimpleName: K(3411)", "Delete SimpleType: K(3412)", "Delete SimpleName: V(3413)", "Delete SimpleType: V(3414)", "Delete ParameterizedType: TrieEntry<K,V>(3415)", "Delete SimpleName: next(3416)", "Delete VariableDeclarationFragment(3417)", "Delete FieldDeclaration(3418)", "Delete Modifier: protected(3419)", "Delete SimpleName: TrieEntry(3420)", "Delete SimpleType: TrieEntry(3421)", "Delete SimpleName: K(3422)", "Delete SimpleType: K(3423)", "Delete SimpleName: V(3424)", "Delete SimpleType: V(3425)", "Delete ParameterizedType: TrieEntry<K,V>(3426)", "Delete SimpleName: current(3427)", "Delete VariableDeclarationFragment(3428)", "Delete FieldDeclaration(3429)", "Delete TextElement: Starts iteration from the root.(3430)", "Delete TagElement(3431)", "Delete Javadoc(3432)", "Delete Modifier: protected(3433)", "Delete SimpleName: TrieIterator(3434)", "Delete SimpleName: next(3435)", "Delete SimpleName: PatriciaTrieBase(3436)", "Delete ThisExpression(3437)", "Delete SimpleName: nextEntry(3438)", "Delete NullLiteral(3439)", "Delete MethodInvocation(3440)", "Delete Assignment: =(3441)", "Delete ExpressionStatement(3442)", "Delete Block(3443)", "Delete MethodDeclaration(3444)", "Delete TextElement: Starts iteration at the given entry.(3445)", "Delete TagElement(3446)", "Delete Javadoc(3447)", "Delete Modifier: protected(3448)", "Delete SimpleName: TrieIterator(3449)", "Delete Modifier: final(3450)", "Delete SimpleName: TrieEntry(3451)", "Delete SimpleType: TrieEntry(3452)", "Delete SimpleName: K(3453)", "Delete SimpleType: K(3454)", "Delete SimpleName: V(3455)", "Delete SimpleType: V(3456)", "Delete ParameterizedType: TrieEntry<K,V>(3457)", "Delete SimpleName: firstEntry(3458)", "Delete SingleVariableDeclaration(3459)", "Delete SimpleName: next(3460)", "Delete SimpleName: firstEntry(3461)", "Delete Assignment: =(3462)", "Delete ExpressionStatement(3463)", "Delete Block(3464)", "Delete MethodDeclaration(3465)", "Delete TextElement: Returns the next (3466)", "Delete SimpleName: TrieEntry(3467)", "Delete TagElement: @link(3468)", "Delete TextElement: .(3469)", "Delete TagElement(3470)", "Delete Javadoc(3471)", "Delete Modifier: protected(3472)", "Delete SimpleName: TrieEntry(3473)", "Delete SimpleType: TrieEntry(3474)", "Delete SimpleName: K(3475)", "Delete SimpleType: K(3476)", "Delete SimpleName: V(3477)", "Delete SimpleType: V(3478)", "Delete ParameterizedType: TrieEntry<K,V>(3479)", "Delete SimpleName: nextEntry(3480)", "Delete SimpleName: expectedModCount(3481)", "Delete SimpleName: PatriciaTrieBase(3482)", "Delete ThisExpression(3483)", "Delete SimpleName: modCount(3484)", "Delete FieldAccess(3485)", "Delete InfixExpression: !=(3486)", "Delete SimpleName: ConcurrentModificationException(3487)", "Delete SimpleType: ConcurrentModificationException(3488)", "Delete ClassInstanceCreation(3489)", "Delete ThrowStatement(3490)", "Delete Block(3491)", "Delete IfStatement(3492)", "Delete Modifier: final(3493)", "Delete SimpleName: TrieEntry(3494)", "Delete SimpleType: TrieEntry(3495)", "Delete SimpleName: K(3496)", "Delete SimpleType: K(3497)", "Delete SimpleName: V(3498)", "Delete SimpleType: V(3499)", "Delete ParameterizedType: TrieEntry<K,V>(3500)", "Delete SimpleName: e(3501)", "Delete SimpleName: next(3502)", "Delete VariableDeclarationFragment(3503)", "Delete VariableDeclarationStatement(3504)", "Delete SimpleName: e(3505)", "Delete NullLiteral(3506)", "Delete InfixExpression: ==(3507)", "Delete SimpleName: NoSuchElementException(3508)", "Delete SimpleType: NoSuchElementException(3509)", "Delete ClassInstanceCreation(3510)", "Delete ThrowStatement(3511)", "Delete Block(3512)", "Delete IfStatement(3513)", "Delete SimpleName: next(3514)", "Delete SimpleName: findNext(3515)", "Delete SimpleName: e(3516)", "Delete MethodInvocation(3517)", "Delete Assignment: =(3518)", "Delete ExpressionStatement(3519)", "Delete SimpleName: current(3520)", "Delete SimpleName: e(3521)", "Delete Assignment: =(3522)", "Delete ExpressionStatement(3523)", "Delete SimpleName: e(3524)", "Delete ReturnStatement(3525)", "Delete Block(3526)", "Delete MethodDeclaration(3527)", "Delete SimpleName: PatriciaTrie(3528)", "Delete SimpleName: nextEntry(3529)", "Delete SimpleName: TrieEntry(3530)", "Delete SimpleType: TrieEntry(3531)", "Delete MethodRefParameter(3532)", "Delete MethodRef(3533)", "Delete TagElement: @see(3534)", "Delete Javadoc(3535)", "Delete Modifier: protected(3536)", "Delete SimpleName: TrieEntry(3537)", "Delete SimpleType: TrieEntry(3538)", "Delete SimpleName: K(3539)", "Delete SimpleType: K(3540)", "Delete SimpleName: V(3541)", "Delete SimpleType: V(3542)", "Delete ParameterizedType: TrieEntry<K,V>(3543)", "Delete SimpleName: findNext(3544)", "Delete Modifier: final(3545)", "Delete SimpleName: TrieEntry(3546)", "Delete SimpleType: TrieEntry(3547)", "Delete SimpleName: K(3548)", "Delete SimpleType: K(3549)", "Delete SimpleName: V(3550)", "Delete SimpleType: V(3551)", "Delete ParameterizedType: TrieEntry<K,V>(3552)", "Delete SimpleName: prior(3553)", "Delete SingleVariableDeclaration(3554)", "Delete SimpleName: PatriciaTrieBase(3555)", "Delete ThisExpression(3556)", "Delete SimpleName: nextEntry(3557)", "Delete SimpleName: prior(3558)", "Delete MethodInvocation(3559)", "Delete ReturnStatement(3560)", "Delete Block(3561)", "Delete MethodDeclaration(3562)", "Delete Modifier: public(3563)", "Delete PrimitiveType: boolean(3564)", "Delete SimpleName: hasNext(3565)", "Delete SimpleName: next(3566)", "Delete NullLiteral(3567)", "Delete InfixExpression: !=(3568)", "Delete ReturnStatement(3569)", "Delete Block(3570)", "Delete MethodDeclaration(3571)", "Delete Modifier: public(3572)", "Delete PrimitiveType: void(3573)", "Delete SimpleName: remove(3574)", "Delete SimpleName: current(3575)", "Delete NullLiteral(3576)", "Delete InfixExpression: ==(3577)", "Delete SimpleName: IllegalStateException(3578)", "Delete SimpleType: IllegalStateException(3579)", "Delete ClassInstanceCreation(3580)", "Delete ThrowStatement(3581)", "Delete Block(3582)", "Delete IfStatement(3583)", "Delete SimpleName: expectedModCount(3584)", "Delete SimpleName: PatriciaTrieBase(3585)", "Delete ThisExpression(3586)", "Delete SimpleName: modCount(3587)", "Delete FieldAccess(3588)", "Delete InfixExpression: !=(3589)", "Delete SimpleName: ConcurrentModificationException(3590)", "Delete SimpleType: ConcurrentModificationException(3591)", "Delete ClassInstanceCreation(3592)", "Delete ThrowStatement(3593)", "Delete Block(3594)", "Delete IfStatement(3595)", "Delete Modifier: final(3596)", "Delete SimpleName: TrieEntry(3597)", "Delete SimpleType: TrieEntry(3598)", "Delete SimpleName: K(3599)", "Delete SimpleType: K(3600)", "Delete SimpleName: V(3601)", "Delete SimpleType: V(3602)", "Delete ParameterizedType: TrieEntry<K,V>(3603)", "Delete SimpleName: node(3604)", "Delete SimpleName: current(3605)", "Delete VariableDeclarationFragment(3606)", "Delete VariableDeclarationStatement(3607)", "Delete SimpleName: current(3608)", "Delete NullLiteral(3609)", "Delete Assignment: =(3610)", "Delete ExpressionStatement(3611)", "Delete SimpleName: PatriciaTrieBase(3612)", "Delete ThisExpression(3613)", "Delete SimpleName: removeEntry(3614)", "Delete SimpleName: node(3615)", "Delete MethodInvocation(3616)", "Delete ExpressionStatement(3617)", "Delete SimpleName: expectedModCount(3618)", "Delete SimpleName: PatriciaTrieBase(3619)", "Delete ThisExpression(3620)", "Delete SimpleName: modCount(3621)", "Delete FieldAccess(3622)", "Delete Assignment: =(3623)", "Delete ExpressionStatement(3624)", "Delete Block(3625)", "Delete MethodDeclaration(3626)", "Delete TypeDeclaration: class(3627)", "Delete TypeDeclaration: class(3628)"]}}, {"SynchronizedTrie_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS ImportDeclaration to CompilationUnit at 8", "INS QualifiedName: org.apache.commons.collections4.OrderedMapIterator to ImportDeclaration at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 23"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 31", "operations": ["INS ReturnStatement to Block at 1", "INS MethodDeclaration to TypeDeclaration: class at 31", "INS Block to MethodDeclaration at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS Modifier: final to VariableDeclarationStatement at 0", "INS ParameterizedType: OrderedMapIterator<K,V> to VariableDeclarationStatement at 1", "INS SimpleName: it to VariableDeclarationFragment at 0", "INS SimpleName: mapIterator to MethodDeclaration at 3", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: it to ReturnStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from getPrefixedBy to prefixMap", "operations": ["UPD SimpleName: getPrefixedBy from getPrefixedBy to prefixMap", "UPD SimpleName: getPrefixedBy from getPrefixedBy to prefixMap"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 0", "MOV Modifier: synchronized to MethodDeclaration at 1"]}, {"root": "UPDATE from Entry<K,V> to OrderedMapIterator<K,V>", "operations": ["UPD ParameterizedType: Entry<K,V> from Entry<K,V> to OrderedMapIterator<K,V>"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: Entry<K,V> to MethodDeclaration at 2"]}, {"root": "INS SimpleType: K to MethodDeclaration at 2", "operations": ["INS SimpleType: K to MethodDeclaration at 2"]}, {"root": "INS SimpleName: nextKey to MethodDeclaration at 3", "operations": ["INS SimpleName: nextKey to MethodDeclaration at 3"]}, {"root": "INS SimpleType: K to MethodDeclaration at 2", "operations": ["INS SimpleType: K to MethodDeclaration at 2"]}, {"root": "INS SimpleName: previousKey to MethodDeclaration at 3", "operations": ["INS SimpleName: previousKey to MethodDeclaration at 3"]}, {"root": "UPDATE from SortedMap to OrderedMapIterator", "operations": ["UPD SimpleName: SortedMap from SortedMap to OrderedMapIterator", "UPD SimpleType: Entry from Entry to OrderedMapIterator", "UPD SimpleType: SortedMap from SortedMap to OrderedMapIterator", "UPD SimpleName: Entry from Entry to OrderedMapIterator"]}, {"root": "MOVE from SimpleType: K", "operations": ["MOV SimpleName: K to SimpleType: K at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: K to SingleVariableDeclaration at 0"]}, {"root": "MOVE from SimpleType: K", "operations": ["MOV SimpleName: K to SimpleType: K at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from ParameterizedType: OrderedMapIterator<K,V>", "operations": ["MOV SimpleType: K to ParameterizedType: OrderedMapIterator<K,V> at 1", "MOV SimpleType: SortedMap to ParameterizedType: OrderedMapIterator<K,V> at 0"]}, {"root": "MOVE from ParameterizedType: OrderedMapIterator<K,V>", "operations": ["MOV SimpleType: V to ParameterizedType: OrderedMapIterator<K,V> at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: delegate to MethodInvocation at 0", "MOV SimpleName: getPrefixedByBits to MethodInvocation at 1", "MOV SimpleName: key to MethodInvocation at 2"]}, {"root": "UPDATE from getPrefixedByBits to nextKey", "operations": ["UPD SimpleName: getPrefixedByBits from getPrefixedByBits to nextKey"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getPrefixedByBits to MethodInvocation at 1", "MOV SimpleName: key to MethodInvocation at 2", "MOV SimpleName: delegate to MethodInvocation at 0"]}, {"root": "UPDATE from getPrefixedByBits to previousKey", "operations": ["UPD SimpleName: getPrefixedByBits from getPrefixedByBits to previousKey"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getPrefixedBy to MethodInvocation at 1", "MOV SimpleName: delegate to MethodInvocation at 0"]}, {"root": "UPDATE from getPrefixedBy to mapIterator", "operations": ["UPD SimpleName: getPrefixedBy from getPrefixedBy to mapIterator"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: traverse", "DEL SimpleName: cursor", "DEL ParameterizedType: Cursor<? super K,? super V>", "DEL SimpleName: cursor", "DEL ReturnStatement", "DEL Modifier: public", "DEL SimpleName: delegate", "DEL SimpleName: traverse", "DEL Modifier: synchronized", "DEL Modifier: final", "DEL WildcardType: ? super K", "DEL SimpleName: Cursor", "DEL SimpleType: Cursor", "DEL WildcardType: ? super V", "DEL MethodInvocation", "DEL MethodDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: offset", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL PrimitiveType: int"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: length"]}, {"root": "DEL SimpleName: offset", "operations": ["DEL SimpleName: offset"]}, {"root": "DEL SimpleName: length", "operations": ["DEL SimpleName: length"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: K", "DEL SingleVariableDeclaration", "DEL SimpleName: synchronizedSortedMap", "DEL SimpleName: length", "DEL SimpleType: SortedMap", "DEL SimpleName: V", "DEL SingleVariableDeclaration", "DEL SimpleName: key", "DEL SimpleName: Collections", "DEL MethodInvocation", "DEL SimpleType: K", "DEL SimpleName: SortedMap", "DEL Modifier: final", "DEL SimpleName: K", "DEL SimpleName: getPrefixedBy", "DEL PrimitiveType: int", "DEL SimpleName: key", "DEL SimpleName: getPrefixedBy", "DEL SimpleName: K", "DEL Modifier: final", "DEL SimpleName: length", "DEL MethodInvocation", "DEL ParameterizedType: SortedMap<K,V>", "DEL Block", "DEL SimpleType: V", "DEL SimpleName: delegate", "DEL ReturnStatement", "DEL MethodDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: getPrefixedBy", "DEL ParameterizedType: SortedMap<K,V>", "DEL Block", "DEL SimpleName: synchronizedSortedMap", "DEL SimpleType: V", "DEL SimpleType: K", "DEL SimpleName: key", "DEL MethodInvocation", "DEL Modifier: synchronized", "DEL Modifier: public", "DEL SimpleName: K", "DEL MethodDeclaration", "DEL SimpleName: Collections", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: V", "DEL Modifier: final", "DEL ReturnStatement", "DEL SimpleName: key"]}, {"root": "DEL ParameterizedType: SortedMap<K,V>", "operations": ["DEL SimpleType: SortedMap", "DEL SimpleName: V", "DEL SimpleName: SortedMap", "DEL ParameterizedType: SortedMap<K,V>", "DEL SimpleType: V", "DEL SimpleType: K"]}, {"root": "DEL SimpleName: getPrefixedByBits", "operations": ["DEL SimpleName: getPrefixedByBits"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL SimpleType: K", "operations": ["DEL SimpleName: K", "DEL SimpleType: K"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: lengthInBits"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: Collections", "DEL SimpleName: lengthInBits", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: synchronizedSortedMap"]}, {"root": "DEL ParameterizedType: SortedMap<K,V>", "operations": ["DEL ParameterizedType: SortedMap<K,V>", "DEL SimpleName: SortedMap", "DEL SimpleName: V", "DEL SimpleType: V", "DEL SimpleType: SortedMap", "DEL SimpleType: K"]}, {"root": "DEL SimpleName: getPrefixedByBits", "operations": ["DEL SimpleName: getPrefixedByBits"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: offsetInBits", "DEL PrimitiveType: int"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: lengthInBits", "DEL PrimitiveType: int"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: synchronizedSortedMap", "DEL SimpleName: Collections", "DEL SimpleName: offsetInBits", "DEL SimpleName: lengthInBits", "DEL MethodInvocation"]}]}}, {"SynchronizedTrie_diff": {"operations": ["Insert ImportDeclaration(17) into CompilationUnit(608) at 8", "Move MethodDeclaration(660) into TypeDeclaration: class(607) at 23", "Insert QualifiedName: org.apache.commons.collections4.OrderedMapIterator(16) into ImportDeclaration(17) at 0", "Insert MethodDeclaration(531) into TypeDeclaration: class(607) at 30", "Update SimpleName: getPrefixedBy(505) to prefixMap", "Move Modifier: public(531) into MethodDeclaration(531) at 0", "Move Modifier: synchronized(532) into MethodDeclaration(531) at 1", "Update ParameterizedType: Entry<K,V>(169) to OrderedMapIterator<K,V>", "Move ParameterizedType: Entry<K,V>(169) into MethodDeclaration(531) at 2", "Insert SimpleName: mapIterator(513) into MethodDeclaration(531) at 3", "Insert Block(530) into MethodDeclaration(531) at 4", "Insert SimpleType: K(535) into MethodDeclaration(547) at 2", "Insert SimpleName: nextKey(536) into MethodDeclaration(547) at 3", "Insert SimpleType: K(551) into MethodDeclaration(563) at 2", "Insert SimpleName: previousKey(552) into MethodDeclaration(563) at 3", "Update SimpleType: Entry(164) to OrderedMapIterator", "Insert VariableDeclarationStatement(527) into Block(530) at 0", "Insert ReturnStatement(529) into Block(530) at 1", "Move SimpleName: K(590) into SimpleType: K(535) at 0", "Move SimpleType: K(175) into SingleVariableDeclaration(540) at 0", "Move SimpleName: K(620) into SimpleType: K(551) at 0", "Update SimpleName: Entry(163) to OrderedMapIterator", "Insert Modifier: final(514) into VariableDeclarationStatement(527) at 0", "Insert ParameterizedType: OrderedMapIterator<K,V>(521) into VariableDeclarationStatement(527) at 1", "Insert VariableDeclarationFragment(526) into VariableDeclarationStatement(527) at 2", "Insert SimpleName: it(528) into ReturnStatement(529) at 0", "Insert MethodInvocation(544) into ReturnStatement(545) at 0", "Insert MethodInvocation(560) into ReturnStatement(561) at 0", "Update SimpleType: SortedMap(564) to OrderedMapIterator", "Move SimpleType: SortedMap(564) into ParameterizedType: OrderedMapIterator<K,V>(521) at 0", "Move SimpleType: K(566) into ParameterizedType: OrderedMapIterator<K,V>(521) at 1", "Move SimpleType: V(178) into ParameterizedType: OrderedMapIterator<K,V>(521) at 2", "Insert SimpleName: it(522) into VariableDeclarationFragment(526) at 0", "Insert MethodInvocation(525) into VariableDeclarationFragment(526) at 1", "Move SimpleName: delegate(607) into MethodInvocation(544) at 0", "Update SimpleName: getPrefixedByBits(608) to nextKey", "Move SimpleName: getPrefixedByBits(608) into MethodInvocation(544) at 1", "Move SimpleName: key(609) into MethodInvocation(544) at 2", "Move SimpleName: delegate(641) into MethodInvocation(560) at 0", "Update SimpleName: getPrefixedByBits(642) to previousKey", "Move SimpleName: getPrefixedByBits(642) into MethodInvocation(560) at 1", "Move SimpleName: key(643) into MethodInvocation(560) at 2", "Update SimpleName: getPrefixedBy(522) to prefixMap", "Update SimpleName: SortedMap(563) to OrderedMapIterator", "Move SimpleName: delegate(578) into MethodInvocation(525) at 0", "Update SimpleName: getPrefixedBy(579) to mapIterator", "Move SimpleName: getPrefixedBy(579) into MethodInvocation(525) at 1", "Delete Modifier: public(161)", "Delete Modifier: synchronized(162)", "Delete SimpleName: traverse(170)", "Delete Modifier: final(171)", "Delete SimpleName: Cursor(172)", "Delete SimpleType: Cursor(173)", "Delete WildcardType: ? super K(176)", "Delete WildcardType: ? super V(179)", "Delete ParameterizedType: Cursor<? super K,? super V>(180)", "Delete SimpleName: cursor(181)", "Delete SingleVariableDeclaration(182)", "Delete SimpleName: delegate(183)", "Delete SimpleName: traverse(184)", "Delete SimpleName: cursor(185)", "Delete MethodInvocation(186)", "Delete ReturnStatement(187)", "Delete Block(188)", "Delete MethodDeclaration(189)", "Delete Modifier: final(511)", "Delete PrimitiveType: int(512)", "Delete SimpleName: offset(513)", "Delete SingleVariableDeclaration(514)", "Delete Modifier: final(515)", "Delete PrimitiveType: int(516)", "Delete SimpleName: length(517)", "Delete SingleVariableDeclaration(518)", "Delete SimpleName: offset(524)", "Delete SimpleName: length(525)", "Delete SimpleName: SortedMap(533)", "Delete SimpleType: SortedMap(534)", "Delete SimpleName: K(535)", "Delete SimpleType: K(536)", "Delete SimpleName: V(537)", "Delete SimpleType: V(538)", "Delete ParameterizedType: SortedMap<K,V>(539)", "Delete SimpleName: getPrefixedBy(540)", "Delete Modifier: final(541)", "Delete SimpleName: K(542)", "Delete SimpleType: K(543)", "Delete SimpleName: key(544)", "Delete SingleVariableDeclaration(545)", "Delete Modifier: final(546)", "Delete PrimitiveType: int(547)", "Delete SimpleName: length(548)", "Delete SingleVariableDeclaration(549)", "Delete SimpleName: Collections(550)", "Delete SimpleName: synchronizedSortedMap(551)", "Delete SimpleName: delegate(552)", "Delete SimpleName: getPrefixedBy(553)", "Delete SimpleName: key(554)", "Delete SimpleName: length(555)", "Delete MethodInvocation(556)", "Delete MethodInvocation(557)", "Delete ReturnStatement(558)", "Delete Block(559)", "Delete MethodDeclaration(560)", "Delete Modifier: public(561)", "Delete Modifier: synchronized(562)", "Delete SimpleName: V(567)", "Delete SimpleType: V(568)", "Delete ParameterizedType: SortedMap<K,V>(569)", "Delete SimpleName: getPrefixedBy(570)", "Delete Modifier: final(571)", "Delete SimpleName: K(572)", "Delete SimpleType: K(573)", "Delete SimpleName: key(574)", "Delete SingleVariableDeclaration(575)", "Delete SimpleName: Collections(576)", "Delete SimpleName: synchronizedSortedMap(577)", "Delete SimpleName: key(580)", "Delete MethodInvocation(581)", "Delete MethodInvocation(582)", "Delete ReturnStatement(583)", "Delete Block(584)", "Delete MethodDeclaration(585)", "Delete SimpleName: SortedMap(588)", "Delete SimpleType: SortedMap(589)", "Delete SimpleType: K(591)", "Delete SimpleName: V(592)", "Delete SimpleType: V(593)", "Delete ParameterizedType: SortedMap<K,V>(594)", "Delete SimpleName: getPrefixedByBits(595)", "Delete Modifier: final(596)", "Delete SimpleName: K(597)", "Delete SimpleType: K(598)", "Delete Modifier: final(601)", "Delete PrimitiveType: int(602)", "Delete SimpleName: lengthInBits(603)", "Delete SingleVariableDeclaration(604)", "Delete SimpleName: Collections(605)", "Delete SimpleName: synchronizedSortedMap(606)", "Delete SimpleName: lengthInBits(610)", "Delete MethodInvocation(611)", "Delete MethodInvocation(612)", "Delete SimpleName: SortedMap(618)", "Delete SimpleType: SortedMap(619)", "Delete SimpleType: K(621)", "Delete SimpleName: V(622)", "Delete SimpleType: V(623)", "Delete ParameterizedType: SortedMap<K,V>(624)", "Delete SimpleName: getPrefixedByBits(625)", "Delete Modifier: final(626)", "Delete Modifier: final(631)", "Delete PrimitiveType: int(632)", "Delete SimpleName: offsetInBits(633)", "Delete SingleVariableDeclaration(634)", "Delete Modifier: final(635)", "Delete PrimitiveType: int(636)", "Delete SimpleName: lengthInBits(637)", "Delete SingleVariableDeclaration(638)", "Delete SimpleName: Collections(639)", "Delete SimpleName: synchronizedSortedMap(640)", "Delete SimpleName: offsetInBits(644)", "Delete SimpleName: lengthInBits(645)", "Delete MethodInvocation(646)", "Delete MethodInvocation(647)"]}}, {"UnmodifiableTrie_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS QualifiedName: org.apache.commons.collections4.OrderedMapIterator to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 8"]}, {"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS QualifiedName: org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 11"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 30", "MOV MethodDeclaration to TypeDeclaration: class at 24"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 32", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS MethodDeclaration to TypeDeclaration: class at 32", "INS SimpleName: it to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: mapIterator to MethodDeclaration at 2", "INS Block to MethodDeclaration at 3", "INS Modifier: final to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "INS Javadoc to FieldDeclaration at 0", "operations": ["INS TagElement to Javadoc at 0", "INS Javadoc to FieldDeclaration at 0", "INS TextElement: Serialization version  to TagElement at 0"]}, {"root": "UPDATE from getPrefixedBy to prefixMap", "operations": ["UPD SimpleName: getPrefixedBy from getPrefixedBy to prefixMap", "UPD SimpleName: getPrefixedBy from getPrefixedBy to prefixMap"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 0"]}, {"root": "UPDATE from Cursor<K,V> to OrderedMapIterator<K,V>", "operations": ["UPD ParameterizedType: Cursor<K,V> from Cursor<K,V> to OrderedMapIterator<K,V>", "UPD ParameterizedType: Cursor<K,V> from Cursor<K,V> to OrderedMapIterator<K,V>"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: Cursor<K,V> to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: K to MethodDeclaration at 1"]}, {"root": "INS SimpleName: nextKey to MethodDeclaration at 2", "operations": ["INS SimpleName: nextKey to MethodDeclaration at 2"]}, {"root": "INS SimpleType: K to MethodDeclaration at 1", "operations": ["INS SimpleType: K to MethodDeclaration at 1"]}, {"root": "INS SimpleName: previousKey to MethodDeclaration at 2", "operations": ["INS SimpleName: previousKey to MethodDeclaration at 2"]}, {"root": "UPDATE from Cursor to OrderedMapIterator", "operations": ["UPD SimpleName: Cursor from Cursor to OrderedMapIterator", "UPD SimpleName: Cursor from Cursor to OrderedMapIterator", "UPD SimpleType: Cursor from Cursor to OrderedMapIterator", "UPD SimpleType: Cursor from Cursor to OrderedMapIterator"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: K to SingleVariableDeclaration at 0"]}, {"root": "MOVE from SimpleType: K", "operations": ["MOV SimpleName: K to SimpleType: K at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: K to SingleVariableDeclaration at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: Cursor<K,V> to VariableDeclarationStatement at 1"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0"]}, {"root": "UPDATE from Collections to UnmodifiableOrderedMapIterator", "operations": ["UPD SimpleName: Collections from Collections to UnmodifiableOrderedMapIterator"]}, {"root": "UPDATE from unmodifiableSortedMap to unmodifiableOrderedMapIterator", "operations": ["UPD SimpleName: unmodifiableSortedMap from unmodifiableSortedMap to unmodifiableOrderedMapIterator"]}, {"root": "UPDATE from delegate to it", "operations": ["UPD SimpleName: delegate from delegate to it"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: delegate to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: delegate to MethodInvocation at 0", "MOV SimpleName: getPrefixedByBits to MethodInvocation at 1", "MOV SimpleName: key to MethodInvocation at 2"]}, {"root": "UPDATE from getPrefixedByBits to nextKey", "operations": ["UPD SimpleName: getPrefixedByBits from getPrefixedByBits to nextKey"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: key to MethodInvocation at 2", "MOV SimpleName: getPrefixedByBits to MethodInvocation at 1", "MOV SimpleName: delegate to MethodInvocation at 0"]}, {"root": "UPDATE from getPrefixedByBits to previousKey", "operations": ["UPD SimpleName: getPrefixedByBits from getPrefixedByBits to previousKey"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: delegate to MethodInvocation at 0", "MOV SimpleName: getPrefixedBy to MethodInvocation at 1"]}, {"root": "UPDATE from getPrefixedBy to mapIterator", "operations": ["UPD SimpleName: getPrefixedBy from getPrefixedBy to mapIterator"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: delegate", "DEL ParameterizedType: Map.Entry<? extends K,? extends V>", "DEL SimpleName: V", "DEL ParameterizedType: Cursor<? super K,? super V>", "DEL SimpleName: entry", "DEL Modifier: public", "DEL SimpleName: Cursor", "DEL ThrowStatement", "DEL SimpleName: cursor", "DEL SimpleName: entry", "DEL Modifier: final", "DEL WildcardType: ? extends V", "DEL SimpleName: V", "DEL SimpleName: select", "DEL Block", "DEL BreakStatement", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleType: V", "DEL SimpleType: V", "DEL SwitchCase", "DEL SwitchCase", "DEL ParameterizedType: Entry<K,V>", "DEL Modifier: final", "DEL SimpleType: Map.Entry", "DEL SimpleType: Cursor", "DEL SimpleName: c", "DEL SimpleName: select", "DEL VariableDeclarationStatement", "DEL SimpleType: UnsupportedOperationException", "DEL VariableDeclarationFragment", "DEL WildcardType: ? super V", "DEL SimpleName: traverse", "DEL WildcardType: ? super K", "DEL Modifier: final", "DEL SimpleName: cursor", "DEL SimpleName: decision", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: decision", "DEL SwitchStatement", "DEL MethodDeclaration", "DEL SimpleName: V", "DEL MethodInvocation", "DEL SimpleType: Decision", "DEL ReturnStatement", "DEL AnonymousClassDeclaration", "DEL MethodInvocation", "DEL SimpleName: REMOVE", "DEL SingleVariableDeclaration", "DEL SimpleType: Entry", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: decision", "DEL WildcardType: ? extends K", "DEL SimpleName: Decision", "DEL SimpleName: Decision", "DEL Modifier: public", "DEL SimpleName: Entry", "DEL SimpleName: c", "DEL SimpleName: traverse", "DEL VariableDeclarationStatement", "DEL QualifiedName: Map.Entry", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL SimpleType: Decision", "DEL ReturnStatement", "DEL Modifier: final", "DEL SwitchCase", "DEL SimpleType: V", "DEL SimpleName: REMOVE_AND_EXIT"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL PrimitiveType: int", "DEL SimpleName: offset", "DEL Modifier: final", "DEL SingleVariableDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL SimpleName: length", "DEL Modifier: final"]}, {"root": "DEL SimpleName: offset", "operations": ["DEL SimpleName: offset"]}, {"root": "DEL SimpleName: length", "operations": ["DEL SimpleName: length"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: key", "DEL SimpleName: getPrefixedBy"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: unmodifiableSortedMap", "DEL ParameterizedType: SortedMap<K,V>", "DEL SimpleName: SortedMap", "DEL SimpleType: K", "DEL SimpleType: V", "DEL Modifier: final", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleType: SortedMap", "DEL SimpleName: key", "DEL SimpleName: length", "DEL SingleVariableDeclaration", "DEL SimpleName: V", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL SimpleName: getPrefixedBy", "DEL Block", "DEL SimpleName: Collections", "DEL SimpleName: K", "DEL SimpleName: length", "DEL MethodDeclaration", "DEL SimpleType: K", "DEL SimpleName: key", "DEL SimpleName: K", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL SimpleType: SortedMap", "DEL SimpleName: K", "DEL SimpleType: K", "DEL MethodDeclaration", "DEL SimpleName: V", "DEL SimpleName: key", "DEL Modifier: final", "DEL SimpleName: K", "DEL SimpleType: V", "DEL SimpleType: K", "DEL SingleVariableDeclaration", "DEL SimpleName: getPrefixedBy", "DEL ParameterizedType: SortedMap<K,V>", "DEL Modifier: public", "DEL SimpleName: SortedMap"]}, {"root": "DEL ParameterizedType: SortedMap<K,V>", "operations": ["DEL SimpleType: K", "DEL SimpleName: K", "DEL SimpleType: V", "DEL ParameterizedType: SortedMap<K,V>", "DEL SimpleType: SortedMap", "DEL SimpleName: SortedMap", "DEL SimpleName: V"]}, {"root": "DEL SimpleName: getPrefixedByBits", "operations": ["DEL SimpleName: getPrefixedByBits"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL SimpleType: K", "operations": ["DEL SimpleType: K", "DEL SimpleName: K"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL Modifier: final", "DEL PrimitiveType: int", "DEL SimpleName: lengthInBits", "DEL SingleVariableDeclaration"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: unmodifiableSortedMap", "DEL SimpleName: lengthInBits", "DEL SimpleName: Collections", "DEL MethodInvocation", "DEL MethodInvocation"]}, {"root": "DEL ParameterizedType: SortedMap<K,V>", "operations": ["DEL SimpleType: SortedMap", "DEL SimpleType: V", "DEL SimpleName: SortedMap", "DEL SimpleType: K", "DEL SimpleName: V", "DEL ParameterizedType: SortedMap<K,V>"]}, {"root": "DEL SimpleName: getPrefixedByBits", "operations": ["DEL SimpleName: getPrefixedByBits"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL SimpleType: K", "operations": ["DEL SimpleName: K", "DEL SimpleType: K"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL Modifier: final", "DEL PrimitiveType: int", "DEL SimpleName: offsetInBits", "DEL SingleVariableDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: lengthInBits", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL SingleVariableDeclaration"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: offsetInBits", "DEL SimpleName: Collections", "DEL SimpleName: lengthInBits", "DEL SimpleName: unmodifiableSortedMap", "DEL MethodInvocation"]}]}}, {"UnmodifiableTrie_diff": {"operations": ["Insert ImportDeclaration(17) into CompilationUnit(590) at 8", "Insert ImportDeclaration(23) into CompilationUnit(590) at 11", "Move MethodDeclaration(688) into TypeDeclaration: class(589) at 30", "Move MethodDeclaration(697) into TypeDeclaration: class(589) at 24", "Insert QualifiedName: org.apache.commons.collections4.OrderedMapIterator(16) into ImportDeclaration(17) at 0", "Insert QualifiedName: org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator(22) into ImportDeclaration(23) at 0", "Insert MethodDeclaration(518) into TypeDeclaration: class(589) at 31", "Insert Javadoc(53) into FieldDeclaration(62) at 0", "Update SimpleName: getPrefixedBy(533) to prefixMap", "Move Modifier: public(559) into MethodDeclaration(518) at 0", "Update ParameterizedType: Cursor<K,V>(200) to OrderedMapIterator<K,V>", "Move ParameterizedType: Cursor<K,V>(200) into MethodDeclaration(518) at 1", "Insert SimpleName: mapIterator(497) into MethodDeclaration(518) at 2", "Insert Block(517) into MethodDeclaration(518) at 3", "Move SimpleType: K(168) into MethodDeclaration(533) at 1", "Insert SimpleName: nextKey(522) into MethodDeclaration(533) at 2", "Insert SimpleType: K(536) into MethodDeclaration(548) at 1", "Insert SimpleName: previousKey(537) into MethodDeclaration(548) at 2", "Insert TagElement(52) into Javadoc(53) at 0", "Update SimpleType: Cursor(195) to OrderedMapIterator", "Insert VariableDeclarationStatement(511) into Block(517) at 0", "Move ReturnStatement(609) into Block(517) at 1", "Move SimpleType: K(209) into SingleVariableDeclaration(526) at 0", "Move SimpleName: K(644) into SimpleType: K(536) at 0", "Move SimpleType: K(177) into SingleVariableDeclaration(541) at 0", "Insert TextElement: Serialization version (51) into TagElement(52) at 0", "Update SimpleName: Cursor(194) to OrderedMapIterator", "Insert Modifier: final(498) into VariableDeclarationStatement(511) at 0", "Update ParameterizedType: Cursor<K,V>(192) to OrderedMapIterator<K,V>", "Move ParameterizedType: Cursor<K,V>(192) into VariableDeclarationStatement(511) at 1", "Insert VariableDeclarationFragment(510) into VariableDeclarationStatement(511) at 2", "Insert MethodInvocation(530) into ReturnStatement(531) at 0", "Insert MethodInvocation(545) into ReturnStatement(546) at 0", "Update SimpleType: Cursor(187) to OrderedMapIterator", "Insert SimpleName: it(506) into VariableDeclarationFragment(510) at 0", "Insert MethodInvocation(509) into VariableDeclarationFragment(510) at 1", "Update SimpleName: Collections(602) to UnmodifiableOrderedMapIterator", "Update SimpleName: unmodifiableSortedMap(603) to unmodifiableOrderedMapIterator", "Update SimpleName: delegate(604) to it", "Move SimpleName: delegate(604) into MethodInvocation(515) at 2", "Move SimpleName: delegate(632) into MethodInvocation(530) at 0", "Update SimpleName: getPrefixedByBits(633) to nextKey", "Move SimpleName: getPrefixedByBits(633) into MethodInvocation(530) at 1", "Move SimpleName: key(634) into MethodInvocation(530) at 2", "Move SimpleName: delegate(665) into MethodInvocation(545) at 0", "Update SimpleName: getPrefixedByBits(666) to previousKey", "Move SimpleName: getPrefixedByBits(666) into MethodInvocation(545) at 1", "Move SimpleName: key(667) into MethodInvocation(545) at 2", "Update SimpleName: getPrefixedBy(550) to prefixMap", "Update SimpleName: Cursor(186) to OrderedMapIterator", "Move SimpleName: delegate(579) into MethodInvocation(509) at 0", "Update SimpleName: getPrefixedBy(580) to mapIterator", "Move SimpleName: getPrefixedBy(580) into MethodInvocation(509) at 1", "Delete Modifier: public(164)", "Delete SimpleName: Entry(165)", "Delete SimpleType: Entry(166)", "Delete SimpleName: V(169)", "Delete SimpleType: V(170)", "Delete ParameterizedType: Entry<K,V>(171)", "Delete SimpleName: traverse(172)", "Delete Modifier: final(173)", "Delete SimpleName: Cursor(174)", "Delete SimpleType: Cursor(175)", "Delete WildcardType: ? super K(178)", "Delete SimpleName: V(179)", "Delete SimpleType: V(180)", "Delete WildcardType: ? super V(181)", "Delete ParameterizedType: Cursor<? super K,? super V>(182)", "Delete SimpleName: cursor(183)", "Delete SingleVariableDeclaration(184)", "Delete Modifier: final(185)", "Delete SimpleName: c(193)", "Delete Modifier: public(201)", "Delete SimpleName: Decision(202)", "Delete SimpleType: Decision(203)", "Delete SimpleName: select(204)", "Delete Modifier: final(205)", "Delete QualifiedName: Map.Entry(206)", "Delete SimpleType: Map.Entry(207)", "Delete WildcardType: ? extends K(210)", "Delete SimpleName: V(211)", "Delete SimpleType: V(212)", "Delete WildcardType: ? extends V(213)", "Delete ParameterizedType: Map.Entry<? extends K,? extends V>(214)", "Delete SimpleName: entry(215)", "Delete SingleVariableDeclaration(216)", "Delete Modifier: final(217)", "Delete SimpleName: Decision(218)", "Delete SimpleType: Decision(219)", "Delete SimpleName: decision(220)", "Delete SimpleName: cursor(221)", "Delete SimpleName: select(222)", "Delete SimpleName: entry(223)", "Delete MethodInvocation(224)", "Delete VariableDeclarationFragment(225)", "Delete VariableDeclarationStatement(226)", "Delete SimpleName: decision(227)", "Delete SimpleName: REMOVE(228)", "Delete SwitchCase(229)", "Delete SimpleName: REMOVE_AND_EXIT(230)", "Delete SwitchCase(231)", "Delete SimpleName: UnsupportedOperationException(232)", "Delete SimpleType: UnsupportedOperationException(233)", "Delete ClassInstanceCreation(234)", "Delete ThrowStatement(235)", "Delete SwitchCase(236)", "Delete BreakStatement(237)", "Delete SwitchStatement(238)", "Delete SimpleName: decision(239)", "Delete ReturnStatement(240)", "Delete Block(241)", "Delete MethodDeclaration(242)", "Delete AnonymousClassDeclaration(243)", "Delete ClassInstanceCreation(244)", "Delete VariableDeclarationFragment(245)", "Delete VariableDeclarationStatement(246)", "Delete SimpleName: delegate(247)", "Delete SimpleName: traverse(248)", "Delete SimpleName: c(249)", "Delete MethodInvocation(250)", "Delete ReturnStatement(251)", "Delete Block(252)", "Delete MethodDeclaration(253)", "Delete Modifier: final(539)", "Delete PrimitiveType: int(540)", "Delete SimpleName: offset(541)", "Delete SingleVariableDeclaration(542)", "Delete Modifier: final(543)", "Delete PrimitiveType: int(544)", "Delete SimpleName: length(545)", "Delete SingleVariableDeclaration(546)", "Delete SimpleName: offset(552)", "Delete SimpleName: length(553)", "Delete SimpleName: getPrefixedBy(605)", "Delete SimpleName: key(606)", "Delete MethodInvocation(607)", "Delete SimpleName: SortedMap(560)", "Delete SimpleType: SortedMap(561)", "Delete SimpleName: K(562)", "Delete SimpleType: K(563)", "Delete SimpleName: V(564)", "Delete SimpleType: V(565)", "Delete ParameterizedType: SortedMap<K,V>(566)", "Delete SimpleName: getPrefixedBy(567)", "Delete Modifier: final(568)", "Delete SimpleName: K(569)", "Delete SimpleType: K(570)", "Delete SimpleName: key(571)", "Delete SingleVariableDeclaration(572)", "Delete Modifier: final(573)", "Delete PrimitiveType: int(574)", "Delete SimpleName: length(575)", "Delete SingleVariableDeclaration(576)", "Delete SimpleName: Collections(577)", "Delete SimpleName: unmodifiableSortedMap(578)", "Delete SimpleName: key(581)", "Delete SimpleName: length(582)", "Delete MethodInvocation(583)", "Delete MethodInvocation(584)", "Delete ReturnStatement(585)", "Delete Block(586)", "Delete MethodDeclaration(587)", "Delete Modifier: public(588)", "Delete SimpleName: SortedMap(589)", "Delete SimpleType: SortedMap(590)", "Delete SimpleName: K(591)", "Delete SimpleType: K(592)", "Delete SimpleName: V(593)", "Delete SimpleType: V(594)", "Delete ParameterizedType: SortedMap<K,V>(595)", "Delete SimpleName: getPrefixedBy(596)", "Delete Modifier: final(597)", "Delete SimpleName: K(598)", "Delete SimpleType: K(599)", "Delete SimpleName: key(600)", "Delete SingleVariableDeclaration(601)", "Delete Block(610)", "Delete MethodDeclaration(611)", "Delete SimpleName: SortedMap(613)", "Delete SimpleType: SortedMap(614)", "Delete SimpleName: K(615)", "Delete SimpleType: K(616)", "Delete SimpleName: V(617)", "Delete SimpleType: V(618)", "Delete ParameterizedType: SortedMap<K,V>(619)", "Delete SimpleName: getPrefixedByBits(620)", "Delete Modifier: final(621)", "Delete SimpleName: K(622)", "Delete SimpleType: K(623)", "Delete Modifier: final(626)", "Delete PrimitiveType: int(627)", "Delete SimpleName: lengthInBits(628)", "Delete SingleVariableDeclaration(629)", "Delete SimpleName: Collections(630)", "Delete SimpleName: unmodifiableSortedMap(631)", "Delete SimpleName: lengthInBits(635)", "Delete MethodInvocation(636)", "Delete MethodInvocation(637)", "Delete SimpleName: SortedMap(642)", "Delete SimpleType: SortedMap(643)", "Delete SimpleType: K(645)", "Delete SimpleName: V(646)", "Delete SimpleType: V(647)", "Delete ParameterizedType: SortedMap<K,V>(648)", "Delete SimpleName: getPrefixedByBits(649)", "Delete Modifier: final(650)", "Delete SimpleName: K(651)", "Delete SimpleType: K(652)", "Delete Modifier: final(655)", "Delete PrimitiveType: int(656)", "Delete SimpleName: offsetInBits(657)", "Delete SingleVariableDeclaration(658)", "Delete Modifier: final(659)", "Delete PrimitiveType: int(660)", "Delete SimpleName: lengthInBits(661)", "Delete SingleVariableDeclaration(662)", "Delete SimpleName: Collections(663)", "Delete SimpleName: unmodifiableSortedMap(664)", "Delete SimpleName: offsetInBits(668)", "Delete SimpleName: lengthInBits(669)", "Delete MethodInvocation(670)", "Delete MethodInvocation(671)"]}}, {"ByteArrayKeyAnalyzer_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.collections4.trie.analyzer", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.collections4.trie.KeyAnalyzer", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: otherIndex", "DEL PrimitiveType: byte", "DEL VariableDeclarationExpression", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL QualifiedName: Integer.MAX_VALUE", "DEL SimpleName: otherLengthInBits", "DEL NumberLiteral: 0", "DEL ArrayAccess", "DEL VariableDeclarationFragment", "DEL SimpleName: key", "DEL SimpleName: bit", "DEL PrimitiveType: int", "DEL TagElement: @link", "DEL VariableDeclarationFragment", "DEL SimpleName: mask", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL InfixExpression: <", "DEL InfixExpression: -", "DEL Dimension", "DEL ParameterizedType: KeyAnalyzer<byte[]>", "DEL Modifier: final", "DEL ArrayType: byte[]", "DEL SimpleName: o1", "DEL SimpleName: maxLengthInBits", "DEL Dimension", "DEL ConditionalExpression", "DEL SimpleName: i", "DEL ReturnStatement", "DEL Modifier: final", "DEL Dimension", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 0", "DEL SimpleName: maxLengthInBits", "DEL SimpleName: bitIndex", "DEL VariableDeclarationStatement", "DEL SimpleName: maxLengthInBits", "DEL SimpleName: elements", "DEL Block", "DEL PrimitiveType: boolean", "DEL Modifier: public", "DEL Block", "DEL IfStatement", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL SimpleName: otherValue", "DEL SimpleName: i", "DEL SimpleName: otherValue", "DEL Assignment: =", "DEL ArrayAccess", "DEL TagElement", "DEL NullLiteral", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL TextElement:  the maximum key length in bits", "DEL PrimitiveType: boolean", "DEL SimpleType: KeyAnalyzer", "DEL ConditionalExpression", "DEL IfStatement", "DEL SimpleName: compare", "DEL InfixExpression: ==", "DEL PrimitiveType: byte", "DEL Modifier: private", "DEL NullLiteral", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL TextElement: A bit mask where the first bit is 1 and the others are zero. ", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL TypeDeclaration: class", "DEL PrimitiveType: byte", "DEL SimpleName: i", "DEL TextElement:  for byte[]s.", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL PrimitiveType: byte", "DEL Block", "DEL InfixExpression: &", "DEL PrimitiveType: boolean", "DEL Block", "DEL ArrayCreation", "DEL InfixExpression: <", "DEL Modifier: final", "DEL InfixExpression: +", "DEL SimpleName: KeyAnalyzer", "DEL MethodInvocation", "DEL Javadoc", "DEL Dimension", "DEL PrimitiveType: int", "DEL SimpleName: max", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL FieldDeclaration", "DEL SimpleType: ByteArrayKeyAnalyzer", "DEL Modifier: final", "DEL SimpleName: lengthInBits", "DEL PostfixExpression: ++", "DEL NumberLiteral: 0xFF", "DEL SingleVariableDeclaration", "DEL SimpleName: lengthInBits", "DEL InfixExpression: -", "DEL FieldDeclaration", "DEL NumberLiteral: 0", "DEL ForStatement", "DEL Modifier: public", "DEL ArrayType: byte[]", "DEL SimpleName: o2", "DEL Modifier: final", "DEL BooleanLiteral: false", "DEL Modifier: final", "DEL ReturnStatement", "DEL Dimension", "DEL SimpleType: IllegalArgumentException", "DEL QualifiedName: KeyAnalyzer.EQUAL_BIT_KEY", "DEL MethodDeclaration", "DEL IfStatement", "DEL NumberLiteral: 0", "DEL SimpleName: mask", "DEL SimpleName: maxLengthInBits", "DEL ThrowStatement", "DEL FieldDeclaration", "DEL Block", "DEL NumberLiteral: 0", "DEL SimpleName: i", "DEL Modifier: static", "DEL PrimitiveType: int", "DEL SimpleName: key", "DEL IfStatement", "DEL Block", "DEL InfixExpression: <", "DEL TextElement:  $Id$", "DEL Modifier: static", "DEL Dimension", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: ByteArrayKeyAnalyzer", "DEL VariableDeclarationFragment", "DEL Block", "DEL ParenthesizedExpression", "DEL SimpleName: ByteArrayKeyAnalyzer", "DEL MarkerAnnotation", "DEL ArrayType: byte[]", "DEL NumberLiteral: 0", "DEL SimpleName: INSTANCE", "DEL Block", "DEL VariableDeclarationFragment", "DEL BooleanLiteral: true", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: maxLengthInBits", "DEL InfixExpression: >=", "DEL NumberLiteral: 0x80", "DEL SimpleName: ByteArrayKeyAnalyzer", "DEL SimpleName: isBitSet", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL ArrayType: byte[]", "DEL TextElement: A ", "DEL Modifier: public", "DEL TextElement:  in bits. ", "DEL Block", "DEL InfixExpression: %", "DEL PrefixExpression: -", "DEL SimpleName: key", "DEL VariableDeclarationStatement", "DEL SimpleName: other", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: prefix", "DEL TextElement:  4.0", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: otherLengthInBits", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL SimpleName: keyBitIndex", "DEL SimpleName: otherOffsetInBits", "DEL InfixExpression: +", "DEL BooleanLiteral: true", "DEL SimpleName: i", "DEL ArrayType: byte[]", "DEL FieldDeclaration", "DEL SimpleName: index", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL SimpleName: IllegalArgumentException", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL NumberLiteral: 0xFF", "DEL Dimension", "DEL Block", "DEL TextElement: Returns a bit mask where the given bit is set", "DEL Modifier: final", "DEL QualifiedName: KeyAnalyzer.NULL_BIT_KEY", "DEL TagElement: @version", "DEL SimpleName: length", "DEL SimpleName: isBitSet", "DEL SimpleName: elements", "DEL QualifiedName: KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY", "DEL SimpleName: i", "DEL PrimitiveType: boolean", "DEL SimpleName: bit", "DEL MethodInvocation", "DEL SimpleName: Byte", "DEL ThisExpression", "DEL Dimension", "DEL Dimension", "DEL ReturnStatement", "DEL PrimitiveType: int", "DEL SimpleName: keyBitIndex", "DEL SimpleName: o2", "DEL SimpleName: keyBitIndex", "DEL NullLiteral", "DEL TextElement: . ", "DEL Block", "DEL SimpleName: keyBitIndex", "DEL SimpleName: index", "DEL PrimitiveType: long", "DEL TagElement", "DEL IfStatement", "DEL InfixExpression: ==", "DEL TagElement", "DEL Modifier: public", "DEL StringLiteral: \"maxLengthInBits=\"", "DEL VariableDeclarationStatement", "DEL SimpleName: prefix", "DEL InfixExpression: -", "DEL VariableDeclarationStatement", "DEL Modifier: private", "DEL ClassInstanceCreation", "DEL SimpleName: i", "DEL SimpleName: MSB", "DEL SimpleName: keyLength", "DEL SimpleName: keyBitIndex", "DEL InfixExpression: <", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL PrimitiveType: int", "DEL SimpleName: lengthInBits", "DEL PrimitiveType: boolean", "DEL NumberLiteral: 0", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL ArrayAccess", "DEL TagElement", "DEL IfStatement", "DEL SimpleName: ByteArrayKeyAnalyzer", "DEL SimpleName: diff", "DEL SimpleName: allNull", "DEL SimpleName: isPrefix", "DEL SimpleName: o2", "DEL MethodDeclaration", "DEL SimpleName: index", "DEL SimpleName: other", "DEL SimpleName: key", "DEL TagElement", "DEL InfixExpression: -", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL TextElement: A singleton instance of ", "DEL QualifiedName: o2.length", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL SimpleName: offsetInBits", "DEL NullLiteral", "DEL FieldAccess", "DEL PrimitiveType: int", "DEL IfStatement", "DEL PrimitiveType: int", "DEL NullLiteral", "DEL SimpleName: NULL", "DEL InfixExpression: &", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Block", "DEL TagElement: @since", "DEL InfixExpression: ||", "DEL SimpleName: o1", "DEL SimpleName: otherLengthInBits", "DEL ReturnStatement", "DEL InfixExpression: >", "DEL SimpleName: bitIndex", "DEL TagElement", "DEL Block", "DEL TagElement: @link", "DEL Modifier: final", "DEL ParenthesizedExpression", "DEL TextElement: A place holder for null. ", "DEL Block", "DEL SimpleName: prefix", "DEL ReturnStatement", "DEL Modifier: final", "DEL InfixExpression: <", "DEL SimpleName: LENGTH", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL MethodInvocation", "DEL QualifiedName: o1.length", "DEL SimpleName: value", "DEL SimpleName: index", "DEL SimpleName: isBitSet", "DEL SimpleName: offsetInBits", "DEL NumberLiteral: 0", "DEL IfStatement", "DEL TextElement: The maximum length of a key in bits. ", "DEL SingleVariableDeclaration", "DEL SimpleName: maxLengthInBits", "DEL IfStatement", "DEL Block", "DEL MethodInvocation", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL PrimitiveType: byte", "DEL Modifier: final", "DEL Modifier: static", "DEL Modifier: final", "DEL ReturnStatement", "DEL SimpleName: i", "DEL SimpleName: i", "DEL VariableDeclarationExpression", "DEL TagElement: @return", "DEL VariableDeclarationExpression", "DEL TextElement: Returns the maximum length of a key in bits", "DEL SimpleName: i", "DEL Block", "DEL InfixExpression: ==", "DEL Modifier: final", "DEL ReturnStatement", "DEL SimpleName: otherIndex", "DEL SimpleName: Override", "DEL SimpleName: lengthInBits", "DEL SimpleName: other", "DEL SimpleName: value", "DEL Modifier: final", "DEL InfixExpression: !=", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL TagElement: @link", "DEL NumberLiteral: 0", "DEL SimpleName: otherOffsetInBits", "DEL SimpleName: ByteArrayKeyAnalyzer", "DEL SimpleName: key", "DEL SimpleName: lengthInBits", "DEL PrimitiveType: int", "DEL Javadoc", "DEL Block", "DEL SimpleName: lengthInBits", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL SimpleName: prefix", "DEL SimpleName: i", "DEL InfixExpression: -", "DEL Modifier: final", "DEL Block", "DEL Block", "DEL Modifier: final", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: bitIndex", "DEL InfixExpression: >>>", "DEL Dimension", "DEL SimpleName: keyLength", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: bit", "DEL ReturnStatement", "DEL SimpleName: key", "DEL SimpleName: prefix", "DEL VariableDeclarationFragment", "DEL Modifier: static", "DEL QualifiedName: o1.length", "DEL SimpleName: isBitSet", "DEL Modifier: final", "DEL ParenthesizedExpression", "DEL PrimitiveType: int", "DEL SimpleName: value", "DEL Modifier: final", "DEL InfixExpression: !=", "DEL ReturnStatement", "DEL SimpleName: i", "DEL SingleVariableDeclaration", "DEL SimpleName: bitsPerElement", "DEL Block", "DEL Javadoc", "DEL PrimitiveType: byte", "DEL SimpleName: prefix", "DEL Modifier: final", "DEL Modifier: public", "DEL Assignment: =", "DEL SimpleName: diff", "DEL MethodDeclaration", "DEL Modifier: final", "DEL SimpleName: prefix", "DEL PrimitiveType: byte", "DEL BooleanLiteral: false", "DEL SimpleName: NULL", "DEL SimpleName: maxLengthInBits", "DEL Modifier: static", "DEL Modifier: private", "DEL InfixExpression: !=", "DEL ReturnStatement", "DEL SimpleName: serialVersionUID", "DEL ArrayType: byte[]", "DEL MethodDeclaration", "DEL SimpleName: bitsPerElement", "DEL InfixExpression: &", "DEL PostfixExpression: ++", "DEL PrimitiveType: int", "DEL Block", "DEL SimpleName: diff", "DEL Modifier: private", "DEL Modifier: public", "DEL TextElement: The length of an ", "DEL Dimension", "DEL SimpleName: allNull", "DEL VariableDeclarationStatement", "DEL SimpleName: key", "DEL SimpleName: other", "DEL SimpleName: key", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: bit", "DEL SimpleName: maxLengthInBits", "DEL QualifiedName: key.length", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL SimpleName: Math", "DEL InfixExpression: *", "DEL InfixExpression: !=", "DEL Javadoc", "DEL SimpleName: MSB", "DEL SimpleName: length", "DEL SimpleName: length", "DEL SimpleName: i", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL ArrayType: byte[]", "DEL TagElement", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL SimpleName: index", "DEL SimpleName: i", "DEL SimpleName: key", "DEL SimpleName: LENGTH", "DEL PrimitiveType: byte", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL PrimitiveType: int", "DEL InfixExpression: +", "DEL SimpleName: lengthInBits", "DEL ReturnStatement", "DEL SimpleName: lengthInBits", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL QualifiedName: o2.length", "DEL BooleanLiteral: false", "DEL SimpleName: lengthInBits", "DEL ArrayType: byte[]", "DEL InfixExpression: +", "DEL BooleanLiteral: false", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL Modifier: final", "DEL ReturnStatement", "DEL PostfixExpression: ++", "DEL Modifier: final", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL PrimitiveType: byte", "DEL SimpleName: offsetInBits", "DEL InfixExpression: !=", "DEL FieldDeclaration", "DEL InfixExpression: ==", "DEL MethodDeclaration", "DEL QualifiedName: Byte.SIZE", "DEL VariableDeclarationFragment", "DEL SimpleName: lengthInBits", "DEL Javadoc", "DEL Block", "DEL SimpleName: o2", "DEL SimpleName: getMaxLengthInBits", "DEL Modifier: final", "DEL NumberLiteral: 7382825097492285877L", "DEL PrimitiveType: int", "DEL InfixExpression: <", "DEL VariableDeclarationStatement", "DEL SimpleName: lengthInBits", "DEL SimpleName: allNull", "DEL SimpleName: offsetInBits", "DEL InfixExpression: -", "DEL InfixExpression: /", "DEL Block", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 1", "DEL Modifier: public", "DEL SimpleName: isBitSet", "DEL SimpleName: LENGTH", "DEL SingleVariableDeclaration", "DEL SimpleName: LENGTH", "DEL NumberLiteral: 0", "DEL Modifier: final", "DEL SimpleName: key", "DEL QualifiedName: o1.length", "DEL IfStatement", "DEL SimpleName: o1", "DEL SimpleName: lengthInBits", "DEL PrimitiveType: byte", "DEL SimpleName: i", "DEL PrimitiveType: int", "DEL BooleanLiteral: false", "DEL Modifier: final", "DEL Modifier: public", "DEL ForStatement", "DEL Block", "DEL ArrayType: byte[]", "DEL PrimitiveType: int", "DEL ArrayType: byte[]", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleType: ByteArrayKeyAnalyzer", "DEL ArrayType: byte[]", "DEL MethodDeclaration", "DEL Assignment: =", "DEL InfixExpression: !=", "DEL IfStatement", "DEL ForStatement", "DEL SimpleName: keyLength", "DEL SimpleName: offsetInBits", "DEL VariableDeclarationStatement", "DEL PrimitiveType: byte", "DEL SimpleName: maxLengthInBits", "DEL SimpleName: KeyAnalyzer", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 1", "DEL SimpleName: prefix", "DEL ReturnStatement", "DEL Modifier: final", "DEL Javadoc", "DEL Block", "DEL VariableDeclarationStatement", "DEL Block"]}]}}, {"ByteArrayKeyAnalyzer_diff": {"operations": ["Delete QualifiedName: org.apache.commons.collections4.trie.analyzer(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.apache.commons.collections4.trie.KeyAnalyzer(2)", "Delete ImportDeclaration(3)", "Delete TextElement: A (4)", "Delete SimpleName: KeyAnalyzer(5)", "Delete TagElement: @link(6)", "Delete TextElement:  for byte[]s.(7)", "Delete TagElement(8)", "Delete TextElement:  4.0(9)", "Delete TagElement: @since(10)", "Delete TextElement:  $Id$(11)", "Delete TagElement: @version(12)", "Delete Javadoc(13)", "Delete Modifier: public(14)", "Delete SimpleName: ByteArrayKeyAnalyzer(15)", "Delete SimpleName: KeyAnalyzer(16)", "Delete SimpleType: KeyAnalyzer(17)", "Delete PrimitiveType: byte(18)", "Delete Dimension(19)", "Delete ArrayType: byte[](20)", "Delete ParameterizedType: KeyAnalyzer<byte[]>(21)", "Delete Modifier: private(22)", "Delete Modifier: static(23)", "Delete Modifier: final(24)", "Delete PrimitiveType: long(25)", "Delete SimpleName: serialVersionUID(26)", "Delete NumberLiteral: 7382825097492285877L(27)", "Delete VariableDeclarationFragment(28)", "Delete FieldDeclaration(29)", "Delete TextElement: A singleton instance of (30)", "Delete SimpleName: ByteArrayKeyAnalyzer(31)", "Delete TagElement: @link(32)", "Delete TextElement: . (33)", "Delete TagElement(34)", "Delete Javadoc(35)", "Delete Modifier: public(36)", "Delete Modifier: static(37)", "Delete Modifier: final(38)", "Delete SimpleName: ByteArrayKeyAnalyzer(39)", "Delete SimpleType: ByteArrayKeyAnalyzer(40)", "Delete SimpleName: INSTANCE(41)", "Delete SimpleName: ByteArrayKeyAnalyzer(42)", "Delete SimpleType: ByteArrayKeyAnalyzer(43)", "Delete QualifiedName: Integer.MAX_VALUE(44)", "Delete ClassInstanceCreation(45)", "Delete VariableDeclarationFragment(46)", "Delete FieldDeclaration(47)", "Delete TextElement: The length of an (48)", "Delete SimpleName: Byte(49)", "Delete TagElement: @link(50)", "Delete TextElement:  in bits. (51)", "Delete TagElement(52)", "Delete Javadoc(53)", "Delete Modifier: public(54)", "Delete Modifier: static(55)", "Delete Modifier: final(56)", "Delete PrimitiveType: int(57)", "Delete SimpleName: LENGTH(58)", "Delete QualifiedName: Byte.SIZE(59)", "Delete VariableDeclarationFragment(60)", "Delete FieldDeclaration(61)", "Delete TextElement: A bit mask where the first bit is 1 and the others are zero. (62)", "Delete TagElement(63)", "Delete Javadoc(64)", "Delete Modifier: private(65)", "Delete Modifier: static(66)", "Delete Modifier: final(67)", "Delete PrimitiveType: int(68)", "Delete SimpleName: MSB(69)", "Delete NumberLiteral: 0x80(70)", "Delete VariableDeclarationFragment(71)", "Delete FieldDeclaration(72)", "Delete TextElement: A place holder for null. (73)", "Delete TagElement(74)", "Delete Javadoc(75)", "Delete Modifier: private(76)", "Delete Modifier: static(77)", "Delete Modifier: final(78)", "Delete PrimitiveType: byte(79)", "Delete Dimension(80)", "Delete ArrayType: byte[](81)", "Delete SimpleName: NULL(82)", "Delete PrimitiveType: byte(83)", "Delete Dimension(84)", "Delete ArrayType: byte[](85)", "Delete NumberLiteral: 0(86)", "Delete ArrayCreation(87)", "Delete VariableDeclarationFragment(88)", "Delete FieldDeclaration(89)", "Delete TextElement: The maximum length of a key in bits. (90)", "Delete TagElement(91)", "Delete Javadoc(92)", "Delete Modifier: private(93)", "Delete Modifier: final(94)", "Delete PrimitiveType: int(95)", "Delete SimpleName: maxLengthInBits(96)", "Delete VariableDeclarationFragment(97)", "Delete FieldDeclaration(98)", "Delete Modifier: public(99)", "Delete SimpleName: ByteArrayKeyAnalyzer(100)", "Delete Modifier: final(101)", "Delete PrimitiveType: int(102)", "Delete SimpleName: maxLengthInBits(103)", "Delete SingleVariableDeclaration(104)", "Delete SimpleName: maxLengthInBits(105)", "Delete NumberLiteral: 0(106)", "Delete InfixExpression: <(107)", "Delete SimpleName: IllegalArgumentException(108)", "Delete SimpleType: IllegalArgumentException(109)", "Delete StringLiteral: \"maxLengthInBits=\"(110)", "Delete SimpleName: maxLengthInBits(111)", "Delete InfixExpression: +(112)", "Delete ClassInstanceCreation(113)", "Delete ThrowStatement(114)", "Delete Block(115)", "Delete IfStatement(116)", "Delete ThisExpression(117)", "Delete SimpleName: maxLengthInBits(118)", "Delete FieldAccess(119)", "Delete SimpleName: maxLengthInBits(120)", "Delete Assignment: =(121)", "Delete ExpressionStatement(122)", "Delete Block(123)", "Delete MethodDeclaration(124)", "Delete TextElement: Returns a bit mask where the given bit is set(125)", "Delete TagElement(126)", "Delete Javadoc(127)", "Delete Modifier: private(128)", "Delete Modifier: static(129)", "Delete PrimitiveType: int(130)", "Delete SimpleName: mask(131)", "Delete Modifier: final(132)", "Delete PrimitiveType: int(133)", "Delete SimpleName: bit(134)", "Delete SingleVariableDeclaration(135)", "Delete SimpleName: MSB(136)", "Delete SimpleName: bit(137)", "Delete InfixExpression: >>>(138)", "Delete ReturnStatement(139)", "Delete Block(140)", "Delete MethodDeclaration(141)", "Delete TextElement: Returns the maximum length of a key in bits(142)", "Delete TagElement(143)", "Delete TextElement:  the maximum key length in bits(144)", "Delete TagElement: @return(145)", "Delete Javadoc(146)", "Delete Modifier: public(147)", "Delete PrimitiveType: int(148)", "Delete SimpleName: getMaxLengthInBits(149)", "Delete SimpleName: maxLengthInBits(150)", "Delete ReturnStatement(151)", "Delete Block(152)", "Delete MethodDeclaration(153)", "Delete Modifier: public(154)", "Delete PrimitiveType: int(155)", "Delete SimpleName: bitsPerElement(156)", "Delete SimpleName: LENGTH(157)", "Delete ReturnStatement(158)", "Delete Block(159)", "Delete MethodDeclaration(160)", "Delete Modifier: public(161)", "Delete PrimitiveType: int(162)", "Delete SimpleName: lengthInBits(163)", "Delete Modifier: final(164)", "Delete PrimitiveType: byte(165)", "Delete Dimension(166)", "Delete ArrayType: byte[](167)", "Delete SimpleName: key(168)", "Delete SingleVariableDeclaration(169)", "Delete SimpleName: key(170)", "Delete NullLiteral(171)", "Delete InfixExpression: !=(172)", "Delete QualifiedName: key.length(173)", "Delete SimpleName: bitsPerElement(174)", "Delete MethodInvocation(175)", "Delete InfixExpression: *(176)", "Delete NumberLiteral: 0(177)", "Delete ConditionalExpression(178)", "Delete ReturnStatement(179)", "Delete Block(180)", "Delete MethodDeclaration(181)", "Delete Modifier: public(182)", "Delete PrimitiveType: boolean(183)", "Delete SimpleName: isBitSet(184)", "Delete Modifier: final(185)", "Delete PrimitiveType: byte(186)", "Delete Dimension(187)", "Delete ArrayType: byte[](188)", "Delete SimpleName: key(189)", "Delete SingleVariableDeclaration(190)", "Delete Modifier: final(191)", "Delete PrimitiveType: int(192)", "Delete SimpleName: bitIndex(193)", "Delete SingleVariableDeclaration(194)", "Delete Modifier: final(195)", "Delete PrimitiveType: int(196)", "Delete SimpleName: lengthInBits(197)", "Delete SingleVariableDeclaration(198)", "Delete SimpleName: key(199)", "Delete NullLiteral(200)", "Delete InfixExpression: ==(201)", "Delete BooleanLiteral: false(202)", "Delete ReturnStatement(203)", "Delete Block(204)", "Delete IfStatement(205)", "Delete Modifier: final(206)", "Delete PrimitiveType: int(207)", "Delete SimpleName: prefix(208)", "Delete SimpleName: maxLengthInBits(209)", "Delete SimpleName: lengthInBits(210)", "Delete InfixExpression: -(211)", "Delete VariableDeclarationFragment(212)", "Delete VariableDeclarationStatement(213)", "Delete Modifier: final(214)", "Delete PrimitiveType: int(215)", "Delete SimpleName: keyBitIndex(216)", "Delete SimpleName: bitIndex(217)", "Delete SimpleName: prefix(218)", "Delete InfixExpression: -(219)", "Delete VariableDeclarationFragment(220)", "Delete VariableDeclarationStatement(221)", "Delete SimpleName: keyBitIndex(222)", "Delete SimpleName: lengthInBits(223)", "Delete InfixExpression: >=(224)", "Delete SimpleName: keyBitIndex(225)", "Delete NumberLiteral: 0(226)", "Delete InfixExpression: <(227)", "Delete InfixExpression: ||(228)", "Delete BooleanLiteral: false(229)", "Delete ReturnStatement(230)", "Delete Block(231)", "Delete IfStatement(232)", "Delete Modifier: final(233)", "Delete PrimitiveType: int(234)", "Delete SimpleName: index(235)", "Delete SimpleName: keyBitIndex(236)", "Delete SimpleName: LENGTH(237)", "Delete InfixExpression: /(238)", "Delete VariableDeclarationFragment(239)", "Delete VariableDeclarationStatement(240)", "Delete Modifier: final(241)", "Delete PrimitiveType: int(242)", "Delete SimpleName: bit(243)", "Delete SimpleName: keyBitIndex(244)", "Delete SimpleName: LENGTH(245)", "Delete InfixExpression: %(246)", "Delete VariableDeclarationFragment(247)", "Delete VariableDeclarationStatement(248)", "Delete SimpleName: key(249)", "Delete SimpleName: index(250)", "Delete ArrayAccess(251)", "Delete SimpleName: mask(252)", "Delete SimpleName: bit(253)", "Delete MethodInvocation(254)", "Delete InfixExpression: &(255)", "Delete ParenthesizedExpression(256)", "Delete NumberLiteral: 0(257)", "Delete InfixExpression: !=(258)", "Delete ReturnStatement(259)", "Delete Block(260)", "Delete MethodDeclaration(261)", "Delete Modifier: public(262)", "Delete PrimitiveType: int(263)", "Delete SimpleName: bitIndex(264)", "Delete Modifier: final(265)", "Delete PrimitiveType: byte(266)", "Delete Dimension(267)", "Delete ArrayType: byte[](268)", "Delete SimpleName: key(269)", "Delete SingleVariableDeclaration(270)", "Delete Modifier: final(271)", "Delete PrimitiveType: int(272)", "Delete SimpleName: offsetInBits(273)", "Delete SingleVariableDeclaration(274)", "Delete Modifier: final(275)", "Delete PrimitiveType: int(276)", "Delete SimpleName: lengthInBits(277)", "Delete SingleVariableDeclaration(278)", "Delete PrimitiveType: byte(279)", "Delete Dimension(280)", "Delete ArrayType: byte[](281)", "Delete SimpleName: other(282)", "Delete SingleVariableDeclaration(283)", "Delete Modifier: final(284)", "Delete PrimitiveType: int(285)", "Delete SimpleName: otherOffsetInBits(286)", "Delete SingleVariableDeclaration(287)", "Delete Modifier: final(288)", "Delete PrimitiveType: int(289)", "Delete SimpleName: otherLengthInBits(290)", "Delete SingleVariableDeclaration(291)", "Delete SimpleName: other(292)", "Delete NullLiteral(293)", "Delete InfixExpression: ==(294)", "Delete SimpleName: other(295)", "Delete SimpleName: NULL(296)", "Delete Assignment: =(297)", "Delete ExpressionStatement(298)", "Delete Block(299)", "Delete IfStatement(300)", "Delete PrimitiveType: boolean(301)", "Delete SimpleName: allNull(302)", "Delete BooleanLiteral: true(303)", "Delete VariableDeclarationFragment(304)", "Delete VariableDeclarationStatement(305)", "Delete Modifier: final(306)", "Delete PrimitiveType: int(307)", "Delete SimpleName: length(308)", "Delete SimpleName: Math(309)", "Delete SimpleName: max(310)", "Delete SimpleName: lengthInBits(311)", "Delete SimpleName: otherLengthInBits(312)", "Delete MethodInvocation(313)", "Delete VariableDeclarationFragment(314)", "Delete VariableDeclarationStatement(315)", "Delete Modifier: final(316)", "Delete PrimitiveType: int(317)", "Delete SimpleName: prefix(318)", "Delete SimpleName: maxLengthInBits(319)", "Delete SimpleName: length(320)", "Delete InfixExpression: -(321)", "Delete VariableDeclarationFragment(322)", "Delete VariableDeclarationStatement(323)", "Delete SimpleName: prefix(324)", "Delete NumberLiteral: 0(325)", "Delete InfixExpression: <(326)", "Delete QualifiedName: KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY(327)", "Delete ReturnStatement(328)", "Delete Block(329)", "Delete IfStatement(330)", "Delete PrimitiveType: int(331)", "Delete SimpleName: i(332)", "Delete NumberLiteral: 0(333)", "Delete VariableDeclarationFragment(334)", "Delete VariableDeclarationExpression(335)", "Delete SimpleName: i(336)", "Delete SimpleName: length(337)", "Delete InfixExpression: <(338)", "Delete SimpleName: i(339)", "Delete PostfixExpression: ++(340)", "Delete Modifier: final(341)", "Delete PrimitiveType: int(342)", "Delete SimpleName: index(343)", "Delete SimpleName: prefix(344)", "Delete SimpleName: offsetInBits(345)", "Delete SimpleName: i(346)", "Delete InfixExpression: +(347)", "Delete VariableDeclarationFragment(348)", "Delete VariableDeclarationStatement(349)", "Delete Modifier: final(350)", "Delete PrimitiveType: boolean(351)", "Delete SimpleName: value(352)", "Delete SimpleName: isBitSet(353)", "Delete SimpleName: key(354)", "Delete SimpleName: index(355)", "Delete SimpleName: lengthInBits(356)", "Delete MethodInvocation(357)", "Delete VariableDeclarationFragment(358)", "Delete VariableDeclarationStatement(359)", "Delete SimpleName: value(360)", "Delete SimpleName: allNull(361)", "Delete BooleanLiteral: false(362)", "Delete Assignment: =(363)", "Delete ExpressionStatement(364)", "Delete Block(365)", "Delete IfStatement(366)", "Delete Modifier: final(367)", "Delete PrimitiveType: int(368)", "Delete SimpleName: otherIndex(369)", "Delete SimpleName: prefix(370)", "Delete SimpleName: otherOffsetInBits(371)", "Delete SimpleName: i(372)", "Delete InfixExpression: +(373)", "Delete VariableDeclarationFragment(374)", "Delete VariableDeclarationStatement(375)", "Delete Modifier: final(376)", "Delete PrimitiveType: boolean(377)", "Delete SimpleName: otherValue(378)", "Delete SimpleName: isBitSet(379)", "Delete SimpleName: other(380)", "Delete SimpleName: otherIndex(381)", "Delete SimpleName: otherLengthInBits(382)", "Delete MethodInvocation(383)", "Delete VariableDeclarationFragment(384)", "Delete VariableDeclarationStatement(385)", "Delete SimpleName: value(386)", "Delete SimpleName: otherValue(387)", "Delete InfixExpression: !=(388)", "Delete SimpleName: index(389)", "Delete ReturnStatement(390)", "Delete Block(391)", "Delete IfStatement(392)", "Delete Block(393)", "Delete ForStatement(394)", "Delete SimpleName: allNull(395)", "Delete QualifiedName: KeyAnalyzer.NULL_BIT_KEY(396)", "Delete ReturnStatement(397)", "Delete Block(398)", "Delete IfStatement(399)", "Delete QualifiedName: KeyAnalyzer.EQUAL_BIT_KEY(400)", "Delete ReturnStatement(401)", "Delete Block(402)", "Delete MethodDeclaration(403)", "Delete Modifier: public(404)", "Delete PrimitiveType: boolean(405)", "Delete SimpleName: isPrefix(406)", "Delete Modifier: final(407)", "Delete PrimitiveType: byte(408)", "Delete Dimension(409)", "Delete ArrayType: byte[](410)", "Delete SimpleName: prefix(411)", "Delete SingleVariableDeclaration(412)", "Delete Modifier: final(413)", "Delete PrimitiveType: int(414)", "Delete SimpleName: offsetInBits(415)", "Delete SingleVariableDeclaration(416)", "Delete Modifier: final(417)", "Delete PrimitiveType: int(418)", "Delete SimpleName: lengthInBits(419)", "Delete SingleVariableDeclaration(420)", "Delete Modifier: final(421)", "Delete PrimitiveType: byte(422)", "Delete Dimension(423)", "Delete ArrayType: byte[](424)", "Delete SimpleName: key(425)", "Delete SingleVariableDeclaration(426)", "Delete Modifier: final(427)", "Delete PrimitiveType: int(428)", "Delete SimpleName: keyLength(429)", "Delete SimpleName: lengthInBits(430)", "Delete SimpleName: key(431)", "Delete MethodInvocation(432)", "Delete VariableDeclarationFragment(433)", "Delete VariableDeclarationStatement(434)", "Delete SimpleName: lengthInBits(435)", "Delete SimpleName: keyLength(436)", "Delete InfixExpression: >(437)", "Delete BooleanLiteral: false(438)", "Delete ReturnStatement(439)", "Delete Block(440)", "Delete IfStatement(441)", "Delete Modifier: final(442)", "Delete PrimitiveType: int(443)", "Delete SimpleName: elements(444)", "Delete SimpleName: lengthInBits(445)", "Delete SimpleName: offsetInBits(446)", "Delete InfixExpression: -(447)", "Delete VariableDeclarationFragment(448)", "Delete VariableDeclarationStatement(449)", "Delete PrimitiveType: int(450)", "Delete SimpleName: i(451)", "Delete NumberLiteral: 0(452)", "Delete VariableDeclarationFragment(453)", "Delete VariableDeclarationExpression(454)", "Delete SimpleName: i(455)", "Delete SimpleName: elements(456)", "Delete InfixExpression: <(457)", "Delete SimpleName: i(458)", "Delete PostfixExpression: ++(459)", "Delete SimpleName: isBitSet(460)", "Delete SimpleName: prefix(461)", "Delete SimpleName: i(462)", "Delete SimpleName: offsetInBits(463)", "Delete InfixExpression: +(464)", "Delete SimpleName: lengthInBits(465)", "Delete MethodInvocation(466)", "Delete SimpleName: isBitSet(467)", "Delete SimpleName: key(468)", "Delete SimpleName: i(469)", "Delete SimpleName: keyLength(470)", "Delete MethodInvocation(471)", "Delete InfixExpression: !=(472)", "Delete BooleanLiteral: false(473)", "Delete ReturnStatement(474)", "Delete Block(475)", "Delete IfStatement(476)", "Delete Block(477)", "Delete ForStatement(478)", "Delete BooleanLiteral: true(479)", "Delete ReturnStatement(480)", "Delete Block(481)", "Delete MethodDeclaration(482)", "Delete SimpleName: Override(483)", "Delete MarkerAnnotation(484)", "Delete Modifier: public(485)", "Delete PrimitiveType: int(486)", "Delete SimpleName: compare(487)", "Delete Modifier: final(488)", "Delete PrimitiveType: byte(489)", "Delete Dimension(490)", "Delete ArrayType: byte[](491)", "Delete SimpleName: o1(492)", "Delete SingleVariableDeclaration(493)", "Delete Modifier: final(494)", "Delete PrimitiveType: byte(495)", "Delete Dimension(496)", "Delete ArrayType: byte[](497)", "Delete SimpleName: o2(498)", "Delete SingleVariableDeclaration(499)", "Delete SimpleName: o1(500)", "Delete NullLiteral(501)", "Delete InfixExpression: ==(502)", "Delete SimpleName: o2(503)", "Delete NullLiteral(504)", "Delete InfixExpression: ==(505)", "Delete NumberLiteral: 0(506)", "Delete NumberLiteral: 1(507)", "Delete PrefixExpression: -(508)", "Delete ConditionalExpression(509)", "Delete ReturnStatement(510)", "Delete Block(511)", "Delete SimpleName: o2(512)", "Delete NullLiteral(513)", "Delete InfixExpression: ==(514)", "Delete NumberLiteral: 1(515)", "Delete ReturnStatement(516)", "Delete Block(517)", "Delete IfStatement(518)", "Delete IfStatement(519)", "Delete QualifiedName: o1.length(520)", "Delete QualifiedName: o2.length(521)", "Delete InfixExpression: !=(522)", "Delete QualifiedName: o1.length(523)", "Delete QualifiedName: o2.length(524)", "Delete InfixExpression: -(525)", "Delete ReturnStatement(526)", "Delete Block(527)", "Delete IfStatement(528)", "Delete PrimitiveType: int(529)", "Delete SimpleName: i(530)", "Delete NumberLiteral: 0(531)", "Delete VariableDeclarationFragment(532)", "Delete VariableDeclarationExpression(533)", "Delete SimpleName: i(534)", "Delete QualifiedName: o1.length(535)", "Delete InfixExpression: <(536)", "Delete SimpleName: i(537)", "Delete PostfixExpression: ++(538)", "Delete Modifier: final(539)", "Delete PrimitiveType: int(540)", "Delete SimpleName: diff(541)", "Delete SimpleName: o1(542)", "Delete SimpleName: i(543)", "Delete ArrayAccess(544)", "Delete NumberLiteral: 0xFF(545)", "Delete InfixExpression: &(546)", "Delete ParenthesizedExpression(547)", "Delete SimpleName: o2(548)", "Delete SimpleName: i(549)", "Delete ArrayAccess(550)", "Delete NumberLiteral: 0xFF(551)", "Delete InfixExpression: &(552)", "Delete ParenthesizedExpression(553)", "Delete InfixExpression: -(554)", "Delete VariableDeclarationFragment(555)", "Delete VariableDeclarationStatement(556)", "Delete SimpleName: diff(557)", "Delete NumberLiteral: 0(558)", "Delete InfixExpression: !=(559)", "Delete SimpleName: diff(560)", "Delete ReturnStatement(561)", "Delete Block(562)", "Delete IfStatement(563)", "Delete Block(564)", "Delete ForStatement(565)", "Delete NumberLiteral: 0(566)", "Delete ReturnStatement(567)", "Delete Block(568)", "Delete MethodDeclaration(569)", "Delete TypeDeclaration: class(570)"]}}, {"ByteKeyAnalyzer_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.collections4.trie.analyzer"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.collections4.trie.KeyAnalyzer"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Modifier: private", "DEL ClassInstanceCreation", "DEL PrimitiveType: int", "DEL SimpleName: offsetInBits", "DEL InfixExpression: !=", "DEL Block", "DEL SimpleType: Byte", "DEL PrimitiveType: int", "DEL TagElement", "DEL SimpleName: xorValue", "DEL SimpleName: mask", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL InfixExpression: ==", "DEL PrimitiveType: int", "DEL SimpleName: ByteKeyAnalyzer", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: byteValue", "DEL SimpleName: key", "DEL SimpleName: prefix", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL MethodInvocation", "DEL InfixExpression: <", "DEL TagElement: @link", "DEL MethodDeclaration", "DEL SimpleName: bitIndex", "DEL SimpleType: Byte", "DEL Modifier: final", "DEL SimpleName: keyValue", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL InfixExpression: !=", "DEL TextElement:  $Id$", "DEL NumberLiteral: 1", "DEL PrimitiveType: int", "DEL SimpleName: value1", "DEL SimpleType: Byte", "DEL SimpleName: value2", "DEL SimpleName: otherOffsetInBits", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL SimpleName: lengthInBits", "DEL SimpleName: otherOffsetInBits", "DEL SimpleName: i", "DEL SimpleName: NULL_BIT_KEY", "DEL SimpleName: mask", "DEL SimpleName: keyValue", "DEL SimpleName: offsetInBits", "DEL Modifier: private", "DEL TextElement: . ", "DEL ParameterizedType: KeyAnalyzer<Byte>", "DEL MethodInvocation", "DEL TextElement: A bit mask where the first bit is 1 and the others are zero. ", "DEL TagElement: @version", "DEL TagElement: @since", "DEL SimpleName: ByteKeyAnalyzer", "DEL SimpleName: Byte", "DEL TextElement:  in bits. ", "DEL PrimitiveType: int", "DEL MethodDeclaration", "DEL Modifier: final", "DEL SimpleName: bitIndex", "DEL NumberLiteral: 0", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL TypeDeclaration: class", "DEL NullLiteral", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL TextElement: s.", "DEL Modifier: final", "DEL SimpleName: INSTANCE", "DEL SimpleName: MSB", "DEL SimpleType: IllegalArgumentException", "DEL NumberLiteral: 0", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL InfixExpression: >>>", "DEL SimpleType: ByteKeyAnalyzer", "DEL SimpleName: Byte", "DEL Block", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: i", "DEL MethodDeclaration", "DEL SimpleName: mask", "DEL Modifier: final", "DEL ExpressionStatement", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: lengthInBits", "DEL ReturnStatement", "DEL SimpleName: i", "DEL SimpleName: key", "DEL PrimitiveType: int", "DEL SimpleName: value2", "DEL Modifier: final", "DEL SimpleName: lengthInBits", "DEL ForStatement", "DEL InfixExpression: &", "DEL SimpleName: LENGTH", "DEL NumberLiteral: 3395803342983289829L", "DEL Javadoc", "DEL QualifiedName: Byte.SIZE", "DEL TextElement: The length of an ", "DEL NumberLiteral: 0x1", "DEL SimpleName: other", "DEL SimpleName: prefix", "DEL VariableDeclarationStatement", "DEL SimpleName: i", "DEL ParenthesizedExpression", "DEL Block", "DEL InfixExpression: <<", "DEL SingleVariableDeclaration", "DEL SimpleName: Byte", "DEL Block", "DEL ConditionalExpression", "DEL MethodInvocation", "DEL SimpleName: Byte", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: KeyAnalyzer", "DEL SimpleName: keyValue", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: intValue", "DEL SimpleName: LENGTH", "DEL InfixExpression: ==", "DEL StringLiteral: \"offsetInBits=\"", "DEL TagElement", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL SimpleName: ByteKeyAnalyzer", "DEL SimpleName: bit", "DEL TagElement", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: lengthInBits", "DEL SimpleName: value1", "DEL SimpleName: serialVersionUID", "DEL TagElement", "DEL SimpleName: i", "DEL PrimitiveType: boolean", "DEL PrimitiveType: int", "DEL ParenthesizedExpression", "DEL Modifier: final", "DEL Modifier: final", "DEL QualifiedName: KeyAnalyzer.EQUAL_BIT_KEY", "DEL PrimitiveType: int", "DEL TagElement: @link", "DEL Assignment: |=", "DEL IfStatement", "DEL SimpleName: key", "DEL IfStatement", "DEL Modifier: final", "DEL TextElement: A singleton instance of ", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleType: KeyAnalyzer", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL PrimitiveType: byte", "DEL Javadoc", "DEL FieldDeclaration", "DEL NumberLiteral: 0", "DEL TextElement: Returns a bit mask where the given bit is set. ", "DEL InfixExpression: <", "DEL SimpleName: isBitSet", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: keyValue", "DEL InfixExpression: &", "DEL TagElement: @link", "DEL Modifier: public", "DEL TextElement:  for ", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL Modifier: public", "DEL Modifier: public", "DEL SimpleName: otherOffsetInBits", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL Modifier: final", "DEL SimpleName: mask", "DEL PrimitiveType: int", "DEL Modifier: private", "DEL Modifier: static", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL InfixExpression: !=", "DEL Modifier: final", "DEL SimpleName: otherLengthInBits", "DEL ParenthesizedExpression", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL FieldDeclaration", "DEL Modifier: final", "DEL ReturnStatement", "DEL Modifier: final", "DEL SimpleName: otherValue", "DEL InfixExpression: ^", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL PrimitiveType: int", "DEL ThrowStatement", "DEL SimpleName: key", "DEL Javadoc", "DEL InfixExpression: !=", "DEL InfixExpression: +", "DEL SimpleName: offsetInBits", "DEL Block", "DEL SimpleType: Byte", "DEL Modifier: public", "DEL SimpleName: otherValue", "DEL SimpleName: Byte", "DEL ClassInstanceCreation", "DEL TextElement: A ", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL PrimitiveType: long", "DEL ReturnStatement", "DEL Block", "DEL InfixExpression: <<", "DEL SimpleName: Byte", "DEL SimpleName: bit", "DEL Block", "DEL ReturnStatement", "DEL SimpleType: Byte", "DEL SimpleName: key", "DEL SimpleName: otherValue", "DEL TextElement:  4.0", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: bitsPerElement", "DEL ForStatement", "DEL SimpleName: byteValue", "DEL PrimitiveType: int", "DEL InfixExpression: !=", "DEL SimpleName: byteValue", "DEL Modifier: static", "DEL SimpleName: Byte", "DEL NumberLiteral: 0", "DEL SimpleName: offsetInBits", "DEL TagElement: @link", "DEL SimpleName: byteValue", "DEL SimpleName: LENGTH", "DEL SimpleName: offsetInBits", "DEL SimpleName: i", "DEL VariableDeclarationExpression", "DEL SingleVariableDeclaration", "DEL InfixExpression: &", "DEL SingleVariableDeclaration", "DEL SimpleName: other", "DEL SimpleName: key", "DEL PrimitiveType: byte", "DEL SimpleName: mask", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL Modifier: static", "DEL VariableDeclarationExpression", "DEL IfStatement", "DEL Modifier: public", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL NumberLiteral: 0", "DEL SimpleType: Byte", "DEL SimpleType: ByteKeyAnalyzer", "DEL SimpleName: MSB", "DEL Modifier: public", "DEL Modifier: final", "DEL InfixExpression: &", "DEL SimpleName: other", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: mask", "DEL SimpleName: ByteKeyAnalyzer", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: mask", "DEL SimpleName: KeyAnalyzer", "DEL Modifier: final", "DEL SimpleType: Byte", "DEL FieldDeclaration", "DEL SimpleName: lengthInBits", "DEL PostfixExpression: ++", "DEL SimpleName: isPrefix", "DEL SimpleName: xorValue", "DEL NumberLiteral: 0", "DEL SimpleName: key", "DEL Modifier: public", "DEL SimpleName: Byte", "DEL InfixExpression: ||", "DEL NumberLiteral: 0x80", "DEL SimpleName: i", "DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL PostfixExpression: ++", "DEL SimpleName: i", "DEL SingleVariableDeclaration", "DEL SimpleName: bitIndex", "DEL SimpleName: Byte", "DEL StringLiteral: \", otherOffsetInBits=\"", "DEL Modifier: public", "DEL ParenthesizedExpression"]}]}}, {"ByteKeyAnalyzer_diff": {"operations": ["Delete QualifiedName: org.apache.commons.collections4.trie.analyzer(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.apache.commons.collections4.trie.KeyAnalyzer(2)", "Delete ImportDeclaration(3)", "Delete TextElement: A (4)", "Delete SimpleName: KeyAnalyzer(5)", "Delete TagElement: @link(6)", "Delete TextElement:  for (7)", "Delete SimpleName: Byte(8)", "Delete TagElement: @link(9)", "Delete TextElement: s.(10)", "Delete TagElement(11)", "Delete TextElement:  4.0(12)", "Delete TagElement: @since(13)", "Delete TextElement:  $Id$(14)", "Delete TagElement: @version(15)", "Delete Javadoc(16)", "Delete Modifier: public(17)", "Delete SimpleName: ByteKeyAnalyzer(18)", "Delete SimpleName: KeyAnalyzer(19)", "Delete SimpleType: KeyAnalyzer(20)", "Delete SimpleName: Byte(21)", "Delete SimpleType: Byte(22)", "Delete ParameterizedType: KeyAnalyzer<Byte>(23)", "Delete Modifier: private(24)", "Delete Modifier: static(25)", "Delete Modifier: final(26)", "Delete PrimitiveType: long(27)", "Delete SimpleName: serialVersionUID(28)", "Delete NumberLiteral: 3395803342983289829L(29)", "Delete VariableDeclarationFragment(30)", "Delete FieldDeclaration(31)", "Delete TextElement: A singleton instance of (32)", "Delete SimpleName: ByteKeyAnalyzer(33)", "Delete TagElement: @link(34)", "Delete TextElement: . (35)", "Delete TagElement(36)", "Delete Javadoc(37)", "Delete Modifier: public(38)", "Delete Modifier: static(39)", "Delete Modifier: final(40)", "Delete SimpleName: ByteKeyAnalyzer(41)", "Delete SimpleType: ByteKeyAnalyzer(42)", "Delete SimpleName: INSTANCE(43)", "Delete SimpleName: ByteKeyAnalyzer(44)", "Delete SimpleType: ByteKeyAnalyzer(45)", "Delete ClassInstanceCreation(46)", "Delete VariableDeclarationFragment(47)", "Delete FieldDeclaration(48)", "Delete TextElement: The length of an (49)", "Delete SimpleName: Byte(50)", "Delete TagElement: @link(51)", "Delete TextElement:  in bits. (52)", "Delete TagElement(53)", "Delete Javadoc(54)", "Delete Modifier: public(55)", "Delete Modifier: static(56)", "Delete Modifier: final(57)", "Delete PrimitiveType: int(58)", "Delete SimpleName: LENGTH(59)", "Delete QualifiedName: Byte.SIZE(60)", "Delete VariableDeclarationFragment(61)", "Delete FieldDeclaration(62)", "Delete TextElement: A bit mask where the first bit is 1 and the others are zero. (63)", "Delete TagElement(64)", "Delete Javadoc(65)", "Delete Modifier: private(66)", "Delete Modifier: static(67)", "Delete Modifier: final(68)", "Delete PrimitiveType: int(69)", "Delete SimpleName: MSB(70)", "Delete NumberLiteral: 0x80(71)", "Delete VariableDeclarationFragment(72)", "Delete FieldDeclaration(73)", "Delete TextElement: Returns a bit mask where the given bit is set. (74)", "Delete TagElement(75)", "Delete Javadoc(76)", "Delete Modifier: private(77)", "Delete Modifier: static(78)", "Delete PrimitiveType: int(79)", "Delete SimpleName: mask(80)", "Delete Modifier: final(81)", "Delete PrimitiveType: int(82)", "Delete SimpleName: bit(83)", "Delete SingleVariableDeclaration(84)", "Delete SimpleName: MSB(85)", "Delete SimpleName: bit(86)", "Delete InfixExpression: >>>(87)", "Delete ReturnStatement(88)", "Delete Block(89)", "Delete MethodDeclaration(90)", "Delete Modifier: public(91)", "Delete PrimitiveType: int(92)", "Delete SimpleName: bitsPerElement(93)", "Delete NumberLiteral: 1(94)", "Delete ReturnStatement(95)", "Delete Block(96)", "Delete MethodDeclaration(97)", "Delete Modifier: public(98)", "Delete PrimitiveType: int(99)", "Delete SimpleName: lengthInBits(100)", "Delete Modifier: final(101)", "Delete SimpleName: Byte(102)", "Delete SimpleType: Byte(103)", "Delete SimpleName: key(104)", "Delete SingleVariableDeclaration(105)", "Delete SimpleName: LENGTH(106)", "Delete ReturnStatement(107)", "Delete Block(108)", "Delete MethodDeclaration(109)", "Delete Modifier: public(110)", "Delete PrimitiveType: boolean(111)", "Delete SimpleName: isBitSet(112)", "Delete Modifier: final(113)", "Delete SimpleName: Byte(114)", "Delete SimpleType: Byte(115)", "Delete SimpleName: key(116)", "Delete SingleVariableDeclaration(117)", "Delete Modifier: final(118)", "Delete PrimitiveType: int(119)", "Delete SimpleName: bitIndex(120)", "Delete SingleVariableDeclaration(121)", "Delete Modifier: final(122)", "Delete PrimitiveType: int(123)", "Delete SimpleName: lengthInBits(124)", "Delete SingleVariableDeclaration(125)", "Delete SimpleName: key(126)", "Delete SimpleName: intValue(127)", "Delete MethodInvocation(128)", "Delete SimpleName: mask(129)", "Delete SimpleName: bitIndex(130)", "Delete MethodInvocation(131)", "Delete InfixExpression: &(132)", "Delete ParenthesizedExpression(133)", "Delete NumberLiteral: 0(134)", "Delete InfixExpression: !=(135)", "Delete ReturnStatement(136)", "Delete Block(137)", "Delete MethodDeclaration(138)", "Delete Modifier: public(139)", "Delete PrimitiveType: int(140)", "Delete SimpleName: bitIndex(141)", "Delete Modifier: final(142)", "Delete SimpleName: Byte(143)", "Delete SimpleType: Byte(144)", "Delete SimpleName: key(145)", "Delete SingleVariableDeclaration(146)", "Delete Modifier: final(147)", "Delete PrimitiveType: int(148)", "Delete SimpleName: offsetInBits(149)", "Delete SingleVariableDeclaration(150)", "Delete Modifier: final(151)", "Delete PrimitiveType: int(152)", "Delete SimpleName: lengthInBits(153)", "Delete SingleVariableDeclaration(154)", "Delete Modifier: final(155)", "Delete SimpleName: Byte(156)", "Delete SimpleType: Byte(157)", "Delete SimpleName: other(158)", "Delete SingleVariableDeclaration(159)", "Delete Modifier: final(160)", "Delete PrimitiveType: int(161)", "Delete SimpleName: otherOffsetInBits(162)", "Delete SingleVariableDeclaration(163)", "Delete Modifier: final(164)", "Delete PrimitiveType: int(165)", "Delete SimpleName: otherLengthInBits(166)", "Delete SingleVariableDeclaration(167)", "Delete SimpleName: offsetInBits(168)", "Delete NumberLiteral: 0(169)", "Delete InfixExpression: !=(170)", "Delete SimpleName: otherOffsetInBits(171)", "Delete NumberLiteral: 0(172)", "Delete InfixExpression: !=(173)", "Delete InfixExpression: ||(174)", "Delete SimpleName: IllegalArgumentException(175)", "Delete SimpleType: IllegalArgumentException(176)", "Delete StringLiteral: \"offsetInBits=\"(177)", "Delete SimpleName: offsetInBits(178)", "Delete StringLiteral: \", otherOffsetInBits=\"(179)", "Delete SimpleName: otherOffsetInBits(180)", "Delete InfixExpression: +(181)", "Delete ClassInstanceCreation(182)", "Delete ThrowStatement(183)", "Delete Block(184)", "Delete IfStatement(185)", "Delete Modifier: final(186)", "Delete PrimitiveType: byte(187)", "Delete SimpleName: keyValue(188)", "Delete SimpleName: key(189)", "Delete SimpleName: byteValue(190)", "Delete MethodInvocation(191)", "Delete VariableDeclarationFragment(192)", "Delete VariableDeclarationStatement(193)", "Delete SimpleName: keyValue(194)", "Delete NumberLiteral: 0(195)", "Delete InfixExpression: ==(196)", "Delete SimpleName: NULL_BIT_KEY(197)", "Delete ReturnStatement(198)", "Delete Block(199)", "Delete IfStatement(200)", "Delete Modifier: final(201)", "Delete PrimitiveType: byte(202)", "Delete SimpleName: otherValue(203)", "Delete SimpleName: other(204)", "Delete NullLiteral(205)", "Delete InfixExpression: !=(206)", "Delete SimpleName: other(207)", "Delete SimpleName: byteValue(208)", "Delete MethodInvocation(209)", "Delete NumberLiteral: 0(210)", "Delete ConditionalExpression(211)", "Delete VariableDeclarationFragment(212)", "Delete VariableDeclarationStatement(213)", "Delete SimpleName: keyValue(214)", "Delete SimpleName: otherValue(215)", "Delete InfixExpression: !=(216)", "Delete Modifier: final(217)", "Delete PrimitiveType: int(218)", "Delete SimpleName: xorValue(219)", "Delete SimpleName: keyValue(220)", "Delete SimpleName: otherValue(221)", "Delete InfixExpression: ^(222)", "Delete VariableDeclarationFragment(223)", "Delete VariableDeclarationStatement(224)", "Delete PrimitiveType: int(225)", "Delete SimpleName: i(226)", "Delete NumberLiteral: 0(227)", "Delete VariableDeclarationFragment(228)", "Delete VariableDeclarationExpression(229)", "Delete SimpleName: i(230)", "Delete SimpleName: LENGTH(231)", "Delete InfixExpression: <(232)", "Delete SimpleName: i(233)", "Delete PostfixExpression: ++(234)", "Delete SimpleName: xorValue(235)", "Delete SimpleName: mask(236)", "Delete SimpleName: i(237)", "Delete MethodInvocation(238)", "Delete InfixExpression: &(239)", "Delete ParenthesizedExpression(240)", "Delete NumberLiteral: 0(241)", "Delete InfixExpression: !=(242)", "Delete SimpleName: i(243)", "Delete ReturnStatement(244)", "Delete Block(245)", "Delete IfStatement(246)", "Delete Block(247)", "Delete ForStatement(248)", "Delete Block(249)", "Delete IfStatement(250)", "Delete QualifiedName: KeyAnalyzer.EQUAL_BIT_KEY(251)", "Delete ReturnStatement(252)", "Delete Block(253)", "Delete MethodDeclaration(254)", "Delete Modifier: public(255)", "Delete PrimitiveType: boolean(256)", "Delete SimpleName: isPrefix(257)", "Delete Modifier: final(258)", "Delete SimpleName: Byte(259)", "Delete SimpleType: Byte(260)", "Delete SimpleName: prefix(261)", "Delete SingleVariableDeclaration(262)", "Delete Modifier: final(263)", "Delete PrimitiveType: int(264)", "Delete SimpleName: offsetInBits(265)", "Delete SingleVariableDeclaration(266)", "Delete Modifier: final(267)", "Delete PrimitiveType: int(268)", "Delete SimpleName: lengthInBits(269)", "Delete SingleVariableDeclaration(270)", "Delete Modifier: final(271)", "Delete SimpleName: Byte(272)", "Delete SimpleType: Byte(273)", "Delete SimpleName: key(274)", "Delete SingleVariableDeclaration(275)", "Delete Modifier: final(276)", "Delete PrimitiveType: int(277)", "Delete SimpleName: value1(278)", "Delete SimpleName: prefix(279)", "Delete SimpleName: byteValue(280)", "Delete MethodInvocation(281)", "Delete SimpleName: offsetInBits(282)", "Delete InfixExpression: <<(283)", "Delete VariableDeclarationFragment(284)", "Delete VariableDeclarationStatement(285)", "Delete Modifier: final(286)", "Delete PrimitiveType: int(287)", "Delete SimpleName: value2(288)", "Delete SimpleName: key(289)", "Delete SimpleName: byteValue(290)", "Delete MethodInvocation(291)", "Delete VariableDeclarationFragment(292)", "Delete VariableDeclarationStatement(293)", "Delete PrimitiveType: int(294)", "Delete SimpleName: mask(295)", "Delete NumberLiteral: 0(296)", "Delete VariableDeclarationFragment(297)", "Delete VariableDeclarationStatement(298)", "Delete PrimitiveType: int(299)", "Delete SimpleName: i(300)", "Delete NumberLiteral: 0(301)", "Delete VariableDeclarationFragment(302)", "Delete VariableDeclarationExpression(303)", "Delete SimpleName: i(304)", "Delete SimpleName: lengthInBits(305)", "Delete InfixExpression: <(306)", "Delete SimpleName: i(307)", "Delete PostfixExpression: ++(308)", "Delete SimpleName: mask(309)", "Delete NumberLiteral: 0x1(310)", "Delete SimpleName: i(311)", "Delete InfixExpression: <<(312)", "Delete Assignment: |=(313)", "Delete ExpressionStatement(314)", "Delete Block(315)", "Delete ForStatement(316)", "Delete SimpleName: value1(317)", "Delete SimpleName: mask(318)", "Delete InfixExpression: &(319)", "Delete ParenthesizedExpression(320)", "Delete SimpleName: value2(321)", "Delete SimpleName: mask(322)", "Delete InfixExpression: &(323)", "Delete ParenthesizedExpression(324)", "Delete InfixExpression: ==(325)", "Delete ReturnStatement(326)", "Delete Block(327)", "Delete MethodDeclaration(328)", "Delete TypeDeclaration: class(329)"]}}, {"CharArrayKeyAnalyzer_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.collections4.trie.analyzer", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.collections4.trie.KeyAnalyzer", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL NumberLiteral: 0", "DEL SimpleName: endIndex1", "DEL SimpleName: length", "DEL SimpleName: length", "DEL InfixExpression: ||", "DEL SimpleName: LENGTH", "DEL SimpleName: f", "DEL SimpleType: CharArrayKeyAnalyzer", "DEL InfixExpression: ||", "DEL InfixExpression: %", "DEL VariableDeclarationFragment", "DEL SimpleName: f", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL SimpleName: CharArrayKeyAnalyzer", "DEL Block", "DEL SimpleName: Character", "DEL Javadoc", "DEL SimpleName: beginIndex1", "DEL PrimitiveType: int", "DEL SimpleName: bitIndex", "DEL SimpleName: IllegalArgumentException", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL Modifier: final", "DEL InfixExpression: /", "DEL ReturnStatement", "DEL SimpleName: i", "DEL PrimitiveType: int", "DEL BooleanLiteral: false", "DEL TagElement: @link", "DEL ArrayType: char[]", "DEL SimpleName: i", "DEL SingleVariableDeclaration", "DEL SimpleName: endIndex2", "DEL Modifier: private", "DEL SimpleName: serialVersionUID", "DEL PrimitiveType: char", "DEL ReturnStatement", "DEL InfixExpression: +", "DEL InfixExpression: -", "DEL PrimitiveType: int", "DEL SimpleName: key", "DEL Modifier: final", "DEL Modifier: public", "DEL IfStatement", "DEL TagElement: @version", "DEL SimpleName: i", "DEL Modifier: final", "DEL SimpleName: index1", "DEL VariableDeclarationExpression", "DEL ArrayAccess", "DEL ArrayType: char[]", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: LENGTH", "DEL SimpleName: bit", "DEL QualifiedName: KeyAnalyzer.NULL_BIT_KEY", "DEL SimpleName: index1", "DEL Dimension", "DEL Block", "DEL Modifier: final", "DEL TagElement", "DEL Modifier: final", "DEL Modifier: public", "DEL SimpleName: bitIndex", "DEL SimpleName: LENGTH", "DEL PrimitiveType: int", "DEL SimpleName: LENGTH", "DEL NumberLiteral: 0", "DEL SimpleName: key", "DEL Dimension", "DEL SimpleName: otherLengthInBits", "DEL SingleVariableDeclaration", "DEL InfixExpression: ||", "DEL Assignment: =", "DEL ConditionalExpression", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL InfixExpression: !=", "DEL SimpleName: bitIndex", "DEL ExpressionStatement", "DEL IfStatement", "DEL InfixExpression: +", "DEL SimpleName: MSB", "DEL Modifier: final", "DEL NumberLiteral: 8167897361549463457L", "DEL Dimension", "DEL BooleanLiteral: true", "DEL InfixExpression: ||", "DEL TextElement:  for ", "DEL SimpleName: offsetInBits", "DEL Javadoc", "DEL Block", "DEL NumberLiteral: 0", "DEL PrimitiveType: int", "DEL MethodDeclaration", "DEL ArrayType: char[]", "DEL SimpleName: other", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL InfixExpression: >=", "DEL PrimitiveType: int", "DEL ClassInstanceCreation", "DEL SimpleName: key", "DEL IfStatement", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL ForStatement", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 0", "DEL NumberLiteral: 0", "DEL SimpleName: other", "DEL SimpleName: KeyAnalyzer", "DEL SimpleName: key", "DEL SimpleName: MSB", "DEL SimpleName: len", "DEL NumberLiteral: 0", "DEL FieldDeclaration", "DEL PrimitiveType: boolean", "DEL Modifier: final", "DEL MethodDeclaration", "DEL SimpleName: offsetInBits", "DEL SimpleName: otherLengthInBits", "DEL Block", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL InfixExpression: !=", "DEL ArrayType: char[]", "DEL ParameterizedType: KeyAnalyzer<char[]>", "DEL Block", "DEL SimpleName: LENGTH", "DEL Dimension", "DEL SimpleName: allNull", "DEL SimpleName: k", "DEL SimpleName: isBitSet", "DEL InfixExpression: %", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL InfixExpression: +", "DEL TagElement: @link", "DEL InfixExpression: /", "DEL InfixExpression: ^", "DEL QualifiedName: key.length", "DEL SimpleName: LENGTH", "DEL SimpleName: lengthInBits", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL TagElement", "DEL ReturnStatement", "DEL InfixExpression: >=", "DEL Block", "DEL InfixExpression: %", "DEL InfixExpression: !=", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL TextElement:  char[]", "DEL PrimitiveType: int", "DEL ForStatement", "DEL SimpleType: KeyAnalyzer", "DEL InfixExpression: !=", "DEL SimpleName: beginIndex1", "DEL Block", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL SimpleName: lengthInBits", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SimpleName: bit", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL Assignment: =", "DEL SimpleName: lengthInBits", "DEL TextElement: Returns a bit mask where the given bit is set. ", "DEL NumberLiteral: 0", "DEL VariableDeclarationFragment", "DEL BooleanLiteral: true", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL SimpleName: mask", "DEL InfixExpression: <", "DEL SimpleName: index", "DEL SimpleName: k", "DEL Modifier: private", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL TextElement: . ", "DEL SimpleName: CharArrayKeyAnalyzer", "DEL Block", "DEL ExpressionStatement", "DEL PrimitiveType: long", "DEL VariableDeclarationFragment", "DEL Modifier: static", "DEL SimpleName: key", "DEL Modifier: public", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL Modifier: static", "DEL InfixExpression: ||", "DEL InfixExpression: ==", "DEL MethodDeclaration", "DEL SimpleName: bitIndex", "DEL PrimitiveType: char", "DEL SimpleName: IllegalArgumentException", "DEL PrimitiveType: boolean", "DEL Modifier: final", "DEL InfixExpression: ||", "DEL InfixExpression: <", "DEL SimpleName: prefix", "DEL InfixExpression: %", "DEL FieldDeclaration", "DEL Block", "DEL TextElement:  4.0", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL ThrowStatement", "DEL SimpleName: KeyAnalyzer", "DEL SimpleName: len", "DEL Block", "DEL BooleanLiteral: false", "DEL Block", "DEL Assignment: =", "DEL SimpleName: LENGTH", "DEL VariableDeclarationFragment", "DEL SimpleName: offsetInBits", "DEL SimpleName: endIndex2", "DEL SimpleName: f", "DEL SimpleName: beginIndex1", "DEL SimpleName: LENGTH", "DEL PrimitiveType: char", "DEL SimpleName: Integer", "DEL Dimension", "DEL Modifier: final", "DEL SimpleName: LENGTH", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL TextElement: The number of bits per ", "DEL ArrayAccess", "DEL SimpleName: CharArrayKeyAnalyzer", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL InfixExpression: %", "DEL Block", "DEL SimpleName: endIndex1", "DEL SimpleName: k", "DEL ArrayType: char[]", "DEL MethodDeclaration", "DEL SimpleName: i", "DEL SimpleName: offsetInBits", "DEL SimpleName: bitIndex", "DEL Assignment: =", "DEL TextElement: A bit mask where the first bit is 1 and the others are zero. ", "DEL InfixExpression: %", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: i", "DEL Modifier: final", "DEL SimpleName: lengthInBits", "DEL SimpleName: LENGTH", "DEL ThrowStatement", "DEL SimpleName: mask", "DEL Modifier: final", "DEL InfixExpression: /", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL InfixExpression: *", "DEL SimpleName: i", "DEL PrimitiveType: int", "DEL IfStatement", "DEL ReturnStatement", "DEL InfixExpression: +", "DEL Modifier: final", "DEL SimpleType: IllegalArgumentException", "DEL InfixExpression: /", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"Cannot determine prefix outside of Character boundaries\"", "DEL Modifier: final", "DEL NumberLiteral: 0", "DEL Modifier: final", "DEL MethodDeclaration", "DEL IfStatement", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL Block", "DEL SimpleName: lengthInBits", "DEL NullLiteral", "DEL SimpleName: lengthInBits", "DEL Dimension", "DEL TagElement", "DEL PrimitiveType: int", "DEL SimpleName: otherLengthInBits", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL FieldDeclaration", "DEL Modifier: private", "DEL PrimitiveType: int", "DEL InfixExpression: /", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL InfixExpression: ==", "DEL IfStatement", "DEL SimpleName: bitsPerElement", "DEL ArrayType: char[]", "DEL InfixExpression: >>>", "DEL SimpleName: LENGTH", "DEL SimpleName: allNull", "DEL ReturnStatement", "DEL InfixExpression: !=", "DEL TextElement:  $Id$", "DEL InfixExpression: *", "DEL NullLiteral", "DEL IfStatement", "DEL Modifier: final", "DEL SimpleName: f", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 0", "DEL PrimitiveType: char", "DEL ArrayAccess", "DEL BooleanLiteral: false", "DEL SimpleName: f", "DEL PrimitiveType: char", "DEL Modifier: final", "DEL ParenthesizedExpression", "DEL SimpleName: off", "DEL SimpleName: index2", "DEL InfixExpression: &", "DEL SimpleName: otherOffsetInBits", "DEL TextElement: An ", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: LENGTH", "DEL SimpleName: key", "DEL ArrayType: char[]", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL TagElement", "DEL SimpleName: otherOffsetInBits", "DEL SimpleName: prefix", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: LENGTH", "DEL Javadoc", "DEL SimpleName: key", "DEL SimpleName: LENGTH", "DEL SimpleName: LENGTH", "DEL SimpleName: LENGTH", "DEL SimpleName: index", "DEL TextElement: . ", "DEL PrimitiveType: char", "DEL PrefixExpression: -", "DEL PrimitiveType: int", "DEL QualifiedName: Character.SIZE", "DEL SimpleName: i", "DEL NullLiteral", "DEL TextElement: s.", "DEL SimpleName: key", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: lengthInBits", "DEL Block", "DEL SimpleName: index2", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL ClassInstanceCreation", "DEL Block", "DEL InfixExpression: %", "DEL ArrayAccess", "DEL Block", "DEL SimpleName: x", "DEL SimpleName: other", "DEL Modifier: public", "DEL NumberLiteral: 0", "DEL SimpleName: LENGTH", "DEL Modifier: final", "DEL VariableDeclarationExpression", "DEL InfixExpression: !=", "DEL SimpleName: i", "DEL SimpleName: LENGTH", "DEL TagElement", "DEL PrimitiveType: int", "DEL InfixExpression: !=", "DEL MethodDeclaration", "DEL InfixExpression: !=", "DEL FieldDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: bit", "DEL TagElement: @link", "DEL SimpleName: k", "DEL Block", "DEL NumberLiteral: 0x8000", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL SimpleName: CharArrayKeyAnalyzer", "DEL InfixExpression: /", "DEL ReturnStatement", "DEL SimpleName: bit", "DEL ExpressionStatement", "DEL StringLiteral: \"The offsets and lengths must be at Character boundaries\"", "DEL SimpleName: endIndex1", "DEL SimpleName: index2", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: index1", "DEL MethodInvocation", "DEL SimpleName: key", "DEL PrimitiveType: char", "DEL QualifiedName: KeyAnalyzer.EQUAL_BIT_KEY", "DEL SimpleName: numberOfLeadingZeros", "DEL SimpleName: beginIndex2", "DEL SimpleType: CharArrayKeyAnalyzer", "DEL SimpleName: otherOffsetInBits", "DEL SimpleName: beginIndex2", "DEL TypeDeclaration: class", "DEL PostfixExpression: ++", "DEL Modifier: public", "DEL InfixExpression: /", "DEL SimpleName: offsetInBits", "DEL ReturnStatement", "DEL SimpleName: off", "DEL TextElement: A singleton instance of ", "DEL InfixExpression: !=", "DEL Modifier: static", "DEL SimpleName: LENGTH", "DEL InfixExpression: +", "DEL Modifier: final", "DEL SimpleName: x", "DEL PostfixExpression: ++", "DEL SimpleName: isPrefix", "DEL SimpleName: Math", "DEL Dimension", "DEL SimpleName: lengthInBits", "DEL SimpleName: endIndex2", "DEL PrimitiveType: int", "DEL TagElement: @code", "DEL InfixExpression: !=", "DEL SimpleName: max", "DEL NumberLiteral: 0", "DEL SimpleName: beginIndex2", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL TagElement: @since", "DEL SimpleName: lengthInBits", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: k", "DEL SimpleName: offsetInBits", "DEL SimpleName: i", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: INSTANCE", "DEL NumberLiteral: 0", "DEL SimpleName: k", "DEL VariableDeclarationFragment", "DEL Modifier: static", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL PrimitiveType: char", "DEL IfStatement", "DEL PrimitiveType: int", "DEL InfixExpression: >=", "DEL ArrayAccess", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL Javadoc", "DEL SimpleName: allNull", "DEL VariableDeclarationStatement"]}]}}, {"CharArrayKeyAnalyzer_diff": {"operations": ["Delete QualifiedName: org.apache.commons.collections4.trie.analyzer(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.apache.commons.collections4.trie.KeyAnalyzer(2)", "Delete ImportDeclaration(3)", "Delete TextElement: An (4)", "Delete SimpleName: KeyAnalyzer(5)", "Delete TagElement: @link(6)", "Delete TextElement:  for (7)", "Delete TextElement:  char[](8)", "Delete TagElement: @code(9)", "Delete TextElement: s.(10)", "Delete TagElement(11)", "Delete TextElement:  4.0(12)", "Delete TagElement: @since(13)", "Delete TextElement:  $Id$(14)", "Delete TagElement: @version(15)", "Delete Javadoc(16)", "Delete Modifier: public(17)", "Delete SimpleName: CharArrayKeyAnalyzer(18)", "Delete SimpleName: KeyAnalyzer(19)", "Delete SimpleType: KeyAnalyzer(20)", "Delete PrimitiveType: char(21)", "Delete Dimension(22)", "Delete ArrayType: char[](23)", "Delete ParameterizedType: KeyAnalyzer<char[]>(24)", "Delete Modifier: private(25)", "Delete Modifier: static(26)", "Delete Modifier: final(27)", "Delete PrimitiveType: long(28)", "Delete SimpleName: serialVersionUID(29)", "Delete NumberLiteral: 8167897361549463457L(30)", "Delete PrefixExpression: -(31)", "Delete VariableDeclarationFragment(32)", "Delete FieldDeclaration(33)", "Delete TextElement: A singleton instance of (34)", "Delete SimpleName: CharArrayKeyAnalyzer(35)", "Delete TagElement: @link(36)", "Delete TextElement: . (37)", "Delete TagElement(38)", "Delete Javadoc(39)", "Delete Modifier: public(40)", "Delete Modifier: static(41)", "Delete Modifier: final(42)", "Delete SimpleName: CharArrayKeyAnalyzer(43)", "Delete SimpleType: CharArrayKeyAnalyzer(44)", "Delete SimpleName: INSTANCE(45)", "Delete SimpleName: CharArrayKeyAnalyzer(46)", "Delete SimpleType: CharArrayKeyAnalyzer(47)", "Delete ClassInstanceCreation(48)", "Delete VariableDeclarationFragment(49)", "Delete FieldDeclaration(50)", "Delete TextElement: The number of bits per (51)", "Delete SimpleName: Character(52)", "Delete TagElement: @link(53)", "Delete TextElement: . (54)", "Delete TagElement(55)", "Delete Javadoc(56)", "Delete Modifier: public(57)", "Delete Modifier: static(58)", "Delete Modifier: final(59)", "Delete PrimitiveType: int(60)", "Delete SimpleName: LENGTH(61)", "Delete QualifiedName: Character.SIZE(62)", "Delete VariableDeclarationFragment(63)", "Delete FieldDeclaration(64)", "Delete TextElement: A bit mask where the first bit is 1 and the others are zero. (65)", "Delete TagElement(66)", "Delete Javadoc(67)", "Delete Modifier: private(68)", "Delete Modifier: static(69)", "Delete Modifier: final(70)", "Delete PrimitiveType: int(71)", "Delete SimpleName: MSB(72)", "Delete NumberLiteral: 0x8000(73)", "Delete VariableDeclarationFragment(74)", "Delete FieldDeclaration(75)", "Delete TextElement: Returns a bit mask where the given bit is set. (76)", "Delete TagElement(77)", "Delete Javadoc(78)", "Delete Modifier: private(79)", "Delete Modifier: static(80)", "Delete PrimitiveType: int(81)", "Delete SimpleName: mask(82)", "Delete Modifier: final(83)", "Delete PrimitiveType: int(84)", "Delete SimpleName: bit(85)", "Delete SingleVariableDeclaration(86)", "Delete SimpleName: MSB(87)", "Delete SimpleName: bit(88)", "Delete InfixExpression: >>>(89)", "Delete ReturnStatement(90)", "Delete Block(91)", "Delete MethodDeclaration(92)", "Delete Modifier: public(93)", "Delete PrimitiveType: int(94)", "Delete SimpleName: bitsPerElement(95)", "Delete SimpleName: LENGTH(96)", "Delete ReturnStatement(97)", "Delete Block(98)", "Delete MethodDeclaration(99)", "Delete Modifier: public(100)", "Delete PrimitiveType: int(101)", "Delete SimpleName: lengthInBits(102)", "Delete Modifier: final(103)", "Delete PrimitiveType: char(104)", "Delete Dimension(105)", "Delete ArrayType: char[](106)", "Delete SimpleName: key(107)", "Delete SingleVariableDeclaration(108)", "Delete SimpleName: key(109)", "Delete NullLiteral(110)", "Delete InfixExpression: !=(111)", "Delete QualifiedName: key.length(112)", "Delete SimpleName: LENGTH(113)", "Delete InfixExpression: *(114)", "Delete NumberLiteral: 0(115)", "Delete ConditionalExpression(116)", "Delete ReturnStatement(117)", "Delete Block(118)", "Delete MethodDeclaration(119)", "Delete Modifier: public(120)", "Delete PrimitiveType: int(121)", "Delete SimpleName: bitIndex(122)", "Delete Modifier: final(123)", "Delete PrimitiveType: char(124)", "Delete Dimension(125)", "Delete ArrayType: char[](126)", "Delete SimpleName: key(127)", "Delete SingleVariableDeclaration(128)", "Delete Modifier: final(129)", "Delete PrimitiveType: int(130)", "Delete SimpleName: offsetInBits(131)", "Delete SingleVariableDeclaration(132)", "Delete Modifier: final(133)", "Delete PrimitiveType: int(134)", "Delete SimpleName: lengthInBits(135)", "Delete SingleVariableDeclaration(136)", "Delete Modifier: final(137)", "Delete PrimitiveType: char(138)", "Delete Dimension(139)", "Delete ArrayType: char[](140)", "Delete SimpleName: other(141)", "Delete SingleVariableDeclaration(142)", "Delete Modifier: final(143)", "Delete PrimitiveType: int(144)", "Delete SimpleName: otherOffsetInBits(145)", "Delete SingleVariableDeclaration(146)", "Delete Modifier: final(147)", "Delete PrimitiveType: int(148)", "Delete SimpleName: otherLengthInBits(149)", "Delete SingleVariableDeclaration(150)", "Delete PrimitiveType: boolean(151)", "Delete SimpleName: allNull(152)", "Delete BooleanLiteral: true(153)", "Delete VariableDeclarationFragment(154)", "Delete VariableDeclarationStatement(155)", "Delete SimpleName: offsetInBits(156)", "Delete SimpleName: LENGTH(157)", "Delete InfixExpression: %(158)", "Delete NumberLiteral: 0(159)", "Delete InfixExpression: !=(160)", "Delete SimpleName: otherOffsetInBits(161)", "Delete SimpleName: LENGTH(162)", "Delete InfixExpression: %(163)", "Delete NumberLiteral: 0(164)", "Delete InfixExpression: !=(165)", "Delete InfixExpression: ||(166)", "Delete SimpleName: lengthInBits(167)", "Delete SimpleName: LENGTH(168)", "Delete InfixExpression: %(169)", "Delete NumberLiteral: 0(170)", "Delete InfixExpression: !=(171)", "Delete InfixExpression: ||(172)", "Delete SimpleName: otherLengthInBits(173)", "Delete SimpleName: LENGTH(174)", "Delete InfixExpression: %(175)", "Delete NumberLiteral: 0(176)", "Delete InfixExpression: !=(177)", "Delete InfixExpression: ||(178)", "Delete SimpleName: IllegalArgumentException(179)", "Delete SimpleType: IllegalArgumentException(180)", "Delete StringLiteral: \"The offsets and lengths must be at Character boundaries\"(181)", "Delete ClassInstanceCreation(182)", "Delete ThrowStatement(183)", "Delete Block(184)", "Delete IfStatement(185)", "Delete Modifier: final(186)", "Delete PrimitiveType: int(187)", "Delete SimpleName: beginIndex1(188)", "Delete SimpleName: offsetInBits(189)", "Delete SimpleName: LENGTH(190)", "Delete InfixExpression: /(191)", "Delete VariableDeclarationFragment(192)", "Delete VariableDeclarationStatement(193)", "Delete Modifier: final(194)", "Delete PrimitiveType: int(195)", "Delete SimpleName: beginIndex2(196)", "Delete SimpleName: otherOffsetInBits(197)", "Delete SimpleName: LENGTH(198)", "Delete InfixExpression: /(199)", "Delete VariableDeclarationFragment(200)", "Delete VariableDeclarationStatement(201)", "Delete Modifier: final(202)", "Delete PrimitiveType: int(203)", "Delete SimpleName: endIndex1(204)", "Delete SimpleName: beginIndex1(205)", "Delete SimpleName: lengthInBits(206)", "Delete SimpleName: LENGTH(207)", "Delete InfixExpression: /(208)", "Delete InfixExpression: +(209)", "Delete VariableDeclarationFragment(210)", "Delete VariableDeclarationStatement(211)", "Delete Modifier: final(212)", "Delete PrimitiveType: int(213)", "Delete SimpleName: endIndex2(214)", "Delete SimpleName: beginIndex2(215)", "Delete SimpleName: otherLengthInBits(216)", "Delete SimpleName: LENGTH(217)", "Delete InfixExpression: /(218)", "Delete InfixExpression: +(219)", "Delete VariableDeclarationFragment(220)", "Delete VariableDeclarationStatement(221)", "Delete Modifier: final(222)", "Delete PrimitiveType: int(223)", "Delete SimpleName: length(224)", "Delete SimpleName: Math(225)", "Delete SimpleName: max(226)", "Delete SimpleName: endIndex1(227)", "Delete SimpleName: endIndex2(228)", "Delete MethodInvocation(229)", "Delete VariableDeclarationFragment(230)", "Delete VariableDeclarationStatement(231)", "Delete PrimitiveType: char(232)", "Delete SimpleName: k(233)", "Delete NumberLiteral: 0(234)", "Delete VariableDeclarationFragment(235)", "Delete SimpleName: f(236)", "Delete NumberLiteral: 0(237)", "Delete VariableDeclarationFragment(238)", "Delete VariableDeclarationStatement(239)", "Delete PrimitiveType: int(240)", "Delete SimpleName: i(241)", "Delete NumberLiteral: 0(242)", "Delete VariableDeclarationFragment(243)", "Delete VariableDeclarationExpression(244)", "Delete SimpleName: i(245)", "Delete SimpleName: length(246)", "Delete InfixExpression: <(247)", "Delete SimpleName: i(248)", "Delete PostfixExpression: ++(249)", "Delete Modifier: final(250)", "Delete PrimitiveType: int(251)", "Delete SimpleName: index1(252)", "Delete SimpleName: beginIndex1(253)", "Delete SimpleName: i(254)", "Delete InfixExpression: +(255)", "Delete VariableDeclarationFragment(256)", "Delete VariableDeclarationStatement(257)", "Delete Modifier: final(258)", "Delete PrimitiveType: int(259)", "Delete SimpleName: index2(260)", "Delete SimpleName: beginIndex2(261)", "Delete SimpleName: i(262)", "Delete InfixExpression: +(263)", "Delete VariableDeclarationFragment(264)", "Delete VariableDeclarationStatement(265)", "Delete SimpleName: index1(266)", "Delete SimpleName: endIndex1(267)", "Delete InfixExpression: >=(268)", "Delete SimpleName: k(269)", "Delete NumberLiteral: 0(270)", "Delete Assignment: =(271)", "Delete ExpressionStatement(272)", "Delete Block(273)", "Delete SimpleName: k(274)", "Delete SimpleName: key(275)", "Delete SimpleName: index1(276)", "Delete ArrayAccess(277)", "Delete Assignment: =(278)", "Delete ExpressionStatement(279)", "Delete Block(280)", "Delete IfStatement(281)", "Delete SimpleName: other(282)", "Delete NullLiteral(283)", "Delete InfixExpression: ==(284)", "Delete SimpleName: index2(285)", "Delete SimpleName: endIndex2(286)", "Delete InfixExpression: >=(287)", "Delete InfixExpression: ||(288)", "Delete SimpleName: f(289)", "Delete NumberLiteral: 0(290)", "Delete Assignment: =(291)", "Delete ExpressionStatement(292)", "Delete Block(293)", "Delete SimpleName: f(294)", "Delete SimpleName: other(295)", "Delete SimpleName: index2(296)", "Delete ArrayAccess(297)", "Delete Assignment: =(298)", "Delete ExpressionStatement(299)", "Delete Block(300)", "Delete IfStatement(301)", "Delete SimpleName: k(302)", "Delete SimpleName: f(303)", "Delete InfixExpression: !=(304)", "Delete Modifier: final(305)", "Delete PrimitiveType: int(306)", "Delete SimpleName: x(307)", "Delete SimpleName: k(308)", "Delete SimpleName: f(309)", "Delete InfixExpression: ^(310)", "Delete VariableDeclarationFragment(311)", "Delete VariableDeclarationStatement(312)", "Delete SimpleName: i(313)", "Delete SimpleName: LENGTH(314)", "Delete InfixExpression: *(315)", "Delete SimpleName: Integer(316)", "Delete SimpleName: numberOfLeadingZeros(317)", "Delete SimpleName: x(318)", "Delete MethodInvocation(319)", "Delete InfixExpression: +(320)", "Delete SimpleName: LENGTH(321)", "Delete InfixExpression: -(322)", "Delete ReturnStatement(323)", "Delete Block(324)", "Delete IfStatement(325)", "Delete SimpleName: k(326)", "Delete NumberLiteral: 0(327)", "Delete InfixExpression: !=(328)", "Delete SimpleName: allNull(329)", "Delete BooleanLiteral: false(330)", "Delete Assignment: =(331)", "Delete ExpressionStatement(332)", "Delete Block(333)", "Delete IfStatement(334)", "Delete Block(335)", "Delete ForStatement(336)", "Delete SimpleName: allNull(337)", "Delete QualifiedName: KeyAnalyzer.NULL_BIT_KEY(338)", "Delete ReturnStatement(339)", "Delete Block(340)", "Delete IfStatement(341)", "Delete QualifiedName: KeyAnalyzer.EQUAL_BIT_KEY(342)", "Delete ReturnStatement(343)", "Delete Block(344)", "Delete MethodDeclaration(345)", "Delete Modifier: public(346)", "Delete PrimitiveType: boolean(347)", "Delete SimpleName: isBitSet(348)", "Delete Modifier: final(349)", "Delete PrimitiveType: char(350)", "Delete Dimension(351)", "Delete ArrayType: char[](352)", "Delete SimpleName: key(353)", "Delete SingleVariableDeclaration(354)", "Delete Modifier: final(355)", "Delete PrimitiveType: int(356)", "Delete SimpleName: bitIndex(357)", "Delete SingleVariableDeclaration(358)", "Delete Modifier: final(359)", "Delete PrimitiveType: int(360)", "Delete SimpleName: lengthInBits(361)", "Delete SingleVariableDeclaration(362)", "Delete SimpleName: key(363)", "Delete NullLiteral(364)", "Delete InfixExpression: ==(365)", "Delete SimpleName: bitIndex(366)", "Delete SimpleName: lengthInBits(367)", "Delete InfixExpression: >=(368)", "Delete InfixExpression: ||(369)", "Delete BooleanLiteral: false(370)", "Delete ReturnStatement(371)", "Delete Block(372)", "Delete IfStatement(373)", "Delete Modifier: final(374)", "Delete PrimitiveType: int(375)", "Delete SimpleName: index(376)", "Delete SimpleName: bitIndex(377)", "Delete SimpleName: LENGTH(378)", "Delete InfixExpression: /(379)", "Delete VariableDeclarationFragment(380)", "Delete VariableDeclarationStatement(381)", "Delete Modifier: final(382)", "Delete PrimitiveType: int(383)", "Delete SimpleName: bit(384)", "Delete SimpleName: bitIndex(385)", "Delete SimpleName: LENGTH(386)", "Delete InfixExpression: %(387)", "Delete VariableDeclarationFragment(388)", "Delete VariableDeclarationStatement(389)", "Delete SimpleName: key(390)", "Delete SimpleName: index(391)", "Delete ArrayAccess(392)", "Delete SimpleName: mask(393)", "Delete SimpleName: bit(394)", "Delete MethodInvocation(395)", "Delete InfixExpression: &(396)", "Delete ParenthesizedExpression(397)", "Delete NumberLiteral: 0(398)", "Delete InfixExpression: !=(399)", "Delete ReturnStatement(400)", "Delete Block(401)", "Delete MethodDeclaration(402)", "Delete Modifier: public(403)", "Delete PrimitiveType: boolean(404)", "Delete SimpleName: isPrefix(405)", "Delete Modifier: final(406)", "Delete PrimitiveType: char(407)", "Delete Dimension(408)", "Delete ArrayType: char[](409)", "Delete SimpleName: prefix(410)", "Delete SingleVariableDeclaration(411)", "Delete Modifier: final(412)", "Delete PrimitiveType: int(413)", "Delete SimpleName: offsetInBits(414)", "Delete SingleVariableDeclaration(415)", "Delete Modifier: final(416)", "Delete PrimitiveType: int(417)", "Delete SimpleName: lengthInBits(418)", "Delete SingleVariableDeclaration(419)", "Delete Modifier: final(420)", "Delete PrimitiveType: char(421)", "Delete Dimension(422)", "Delete ArrayType: char[](423)", "Delete SimpleName: key(424)", "Delete SingleVariableDeclaration(425)", "Delete SimpleName: offsetInBits(426)", "Delete SimpleName: LENGTH(427)", "Delete InfixExpression: %(428)", "Delete NumberLiteral: 0(429)", "Delete InfixExpression: !=(430)", "Delete SimpleName: lengthInBits(431)", "Delete SimpleName: LENGTH(432)", "Delete InfixExpression: %(433)", "Delete NumberLiteral: 0(434)", "Delete InfixExpression: !=(435)", "Delete InfixExpression: ||(436)", "Delete SimpleName: IllegalArgumentException(437)", "Delete SimpleType: IllegalArgumentException(438)", "Delete StringLiteral: \"Cannot determine prefix outside of Character boundaries\"(439)", "Delete ClassInstanceCreation(440)", "Delete ThrowStatement(441)", "Delete Block(442)", "Delete IfStatement(443)", "Delete Modifier: final(444)", "Delete PrimitiveType: int(445)", "Delete SimpleName: off(446)", "Delete SimpleName: offsetInBits(447)", "Delete SimpleName: LENGTH(448)", "Delete InfixExpression: /(449)", "Delete VariableDeclarationFragment(450)", "Delete VariableDeclarationStatement(451)", "Delete Modifier: final(452)", "Delete PrimitiveType: int(453)", "Delete SimpleName: len(454)", "Delete SimpleName: lengthInBits(455)", "Delete SimpleName: LENGTH(456)", "Delete InfixExpression: /(457)", "Delete VariableDeclarationFragment(458)", "Delete VariableDeclarationStatement(459)", "Delete PrimitiveType: int(460)", "Delete SimpleName: i(461)", "Delete NumberLiteral: 0(462)", "Delete VariableDeclarationFragment(463)", "Delete VariableDeclarationExpression(464)", "Delete SimpleName: i(465)", "Delete SimpleName: len(466)", "Delete InfixExpression: <(467)", "Delete SimpleName: i(468)", "Delete PostfixExpression: ++(469)", "Delete SimpleName: prefix(470)", "Delete SimpleName: i(471)", "Delete SimpleName: off(472)", "Delete InfixExpression: +(473)", "Delete ArrayAccess(474)", "Delete SimpleName: key(475)", "Delete SimpleName: i(476)", "Delete ArrayAccess(477)", "Delete InfixExpression: !=(478)", "Delete BooleanLiteral: false(479)", "Delete ReturnStatement(480)", "Delete Block(481)", "Delete IfStatement(482)", "Delete Block(483)", "Delete ForStatement(484)", "Delete BooleanLiteral: true(485)", "Delete ReturnStatement(486)", "Delete Block(487)", "Delete MethodDeclaration(488)", "Delete TypeDeclaration: class(489)"]}}, {"CharacterKeyAnalyzer_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.collections4.trie.analyzer"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.collections4.trie.KeyAnalyzer"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Modifier: private", "DEL ClassInstanceCreation", "DEL PrimitiveType: int", "DEL SimpleName: offsetInBits", "DEL InfixExpression: !=", "DEL Block", "DEL SimpleType: Character", "DEL PrimitiveType: int", "DEL TagElement", "DEL SimpleName: xorValue", "DEL SimpleName: mask", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL InfixExpression: ==", "DEL PrimitiveType: int", "DEL SimpleName: CharacterKeyAnalyzer", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: charValue", "DEL SimpleName: key", "DEL SimpleName: prefix", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL MethodInvocation", "DEL InfixExpression: <", "DEL TagElement: @link", "DEL MethodDeclaration", "DEL SimpleName: bitIndex", "DEL SimpleType: Character", "DEL Modifier: final", "DEL SimpleName: keyValue", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL InfixExpression: !=", "DEL TextElement:  $Id$", "DEL NumberLiteral: 1", "DEL PrimitiveType: int", "DEL SimpleName: value1", "DEL SimpleType: Character", "DEL SimpleName: value2", "DEL SimpleName: otherOffsetInBits", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL SimpleName: lengthInBits", "DEL SimpleName: otherOffsetInBits", "DEL SimpleName: i", "DEL SimpleName: NULL_BIT_KEY", "DEL SimpleName: mask", "DEL SimpleName: keyValue", "DEL SimpleName: offsetInBits", "DEL Modifier: private", "DEL TextElement: . ", "DEL ParameterizedType: KeyAnalyzer<Character>", "DEL MethodInvocation", "DEL TextElement: A bit mask where the first bit is 1 and the others are zero. ", "DEL TagElement: @version", "DEL TagElement: @since", "DEL SimpleName: CharacterKeyAnalyzer", "DEL SimpleName: Character", "DEL TextElement:  in bits. ", "DEL PrimitiveType: int", "DEL MethodDeclaration", "DEL Modifier: final", "DEL SimpleName: bitIndex", "DEL NumberLiteral: 0", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL TypeDeclaration: class", "DEL NullLiteral", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL TextElement: s.", "DEL Modifier: final", "DEL SimpleName: INSTANCE", "DEL SimpleName: MSB", "DEL SimpleType: IllegalArgumentException", "DEL QualifiedName: Character.MIN_VALUE", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL InfixExpression: >>>", "DEL SimpleType: CharacterKeyAnalyzer", "DEL SimpleName: Character", "DEL Block", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: i", "DEL MethodDeclaration", "DEL SimpleName: mask", "DEL Modifier: final", "DEL ExpressionStatement", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: lengthInBits", "DEL ReturnStatement", "DEL SimpleName: i", "DEL SimpleName: key", "DEL PrimitiveType: int", "DEL SimpleName: value2", "DEL Modifier: final", "DEL SimpleName: lengthInBits", "DEL ForStatement", "DEL InfixExpression: &", "DEL SimpleName: LENGTH", "DEL NumberLiteral: 3928565962744720753L", "DEL Javadoc", "DEL QualifiedName: Character.SIZE", "DEL TextElement: The length of a ", "DEL NumberLiteral: 0x1", "DEL SimpleName: other", "DEL SimpleName: prefix", "DEL VariableDeclarationStatement", "DEL SimpleName: i", "DEL ParenthesizedExpression", "DEL Block", "DEL InfixExpression: <<", "DEL SingleVariableDeclaration", "DEL SimpleName: Character", "DEL Block", "DEL ConditionalExpression", "DEL MethodInvocation", "DEL SimpleName: Character", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: KeyAnalyzer", "DEL SimpleName: keyValue", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: charValue", "DEL SimpleName: LENGTH", "DEL InfixExpression: ==", "DEL StringLiteral: \"offsetInBits=\"", "DEL TagElement", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL SimpleName: CharacterKeyAnalyzer", "DEL SimpleName: bit", "DEL TagElement", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: lengthInBits", "DEL SimpleName: value1", "DEL SimpleName: serialVersionUID", "DEL TagElement", "DEL SimpleName: i", "DEL PrimitiveType: boolean", "DEL PrimitiveType: int", "DEL ParenthesizedExpression", "DEL Modifier: final", "DEL Modifier: final", "DEL QualifiedName: KeyAnalyzer.EQUAL_BIT_KEY", "DEL PrimitiveType: int", "DEL TagElement: @link", "DEL Assignment: |=", "DEL IfStatement", "DEL SimpleName: key", "DEL IfStatement", "DEL Modifier: final", "DEL TextElement: A singleton instance of the ", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleType: KeyAnalyzer", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL PrimitiveType: char", "DEL Javadoc", "DEL FieldDeclaration", "DEL NumberLiteral: 0", "DEL TextElement: Returns a bit mask where the given bit is set. ", "DEL InfixExpression: <", "DEL SimpleName: isBitSet", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: keyValue", "DEL InfixExpression: &", "DEL TagElement: @link", "DEL Modifier: public", "DEL TextElement:  for ", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL Modifier: public", "DEL Modifier: public", "DEL SimpleName: otherOffsetInBits", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL Modifier: final", "DEL SimpleName: mask", "DEL PrimitiveType: int", "DEL Modifier: private", "DEL Modifier: static", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL InfixExpression: !=", "DEL Modifier: final", "DEL SimpleName: otherLengthInBits", "DEL ParenthesizedExpression", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL FieldDeclaration", "DEL Modifier: final", "DEL ReturnStatement", "DEL Modifier: final", "DEL SimpleName: otherValue", "DEL InfixExpression: ^", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL PrimitiveType: int", "DEL ThrowStatement", "DEL SimpleName: key", "DEL Javadoc", "DEL InfixExpression: !=", "DEL InfixExpression: +", "DEL SimpleName: offsetInBits", "DEL Block", "DEL SimpleType: Character", "DEL Modifier: public", "DEL SimpleName: otherValue", "DEL SimpleName: Character", "DEL ClassInstanceCreation", "DEL TextElement: A ", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL PrimitiveType: long", "DEL ReturnStatement", "DEL Block", "DEL InfixExpression: <<", "DEL SimpleName: Character", "DEL SimpleName: bit", "DEL Block", "DEL ReturnStatement", "DEL SimpleType: Character", "DEL SimpleName: key", "DEL SimpleName: otherValue", "DEL TextElement:  4.0", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: bitsPerElement", "DEL ForStatement", "DEL SimpleName: charValue", "DEL PrimitiveType: int", "DEL InfixExpression: !=", "DEL SimpleName: charValue", "DEL Modifier: static", "DEL SimpleName: Character", "DEL QualifiedName: Character.MIN_VALUE", "DEL SimpleName: offsetInBits", "DEL TagElement: @link", "DEL SimpleName: charValue", "DEL SimpleName: LENGTH", "DEL SimpleName: offsetInBits", "DEL SimpleName: i", "DEL VariableDeclarationExpression", "DEL SingleVariableDeclaration", "DEL InfixExpression: &", "DEL SingleVariableDeclaration", "DEL SimpleName: other", "DEL SimpleName: key", "DEL PrimitiveType: char", "DEL SimpleName: mask", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL Modifier: static", "DEL VariableDeclarationExpression", "DEL IfStatement", "DEL Modifier: public", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL NumberLiteral: 0", "DEL SimpleType: Character", "DEL SimpleType: CharacterKeyAnalyzer", "DEL SimpleName: MSB", "DEL Modifier: public", "DEL Modifier: final", "DEL InfixExpression: &", "DEL SimpleName: other", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: mask", "DEL SimpleName: CharacterKeyAnalyzer", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: mask", "DEL SimpleName: KeyAnalyzer", "DEL Modifier: final", "DEL SimpleType: Character", "DEL FieldDeclaration", "DEL SimpleName: lengthInBits", "DEL PostfixExpression: ++", "DEL SimpleName: isPrefix", "DEL SimpleName: xorValue", "DEL NumberLiteral: 0", "DEL SimpleName: key", "DEL Modifier: public", "DEL SimpleName: Character", "DEL InfixExpression: ||", "DEL NumberLiteral: 0x8000", "DEL SimpleName: i", "DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL PostfixExpression: ++", "DEL SimpleName: i", "DEL SingleVariableDeclaration", "DEL SimpleName: bitIndex", "DEL SimpleName: Character", "DEL StringLiteral: \", otherOffsetInBits=\"", "DEL Modifier: public", "DEL ParenthesizedExpression"]}]}}, {"CharacterKeyAnalyzer_diff": {"operations": ["Delete QualifiedName: org.apache.commons.collections4.trie.analyzer(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.apache.commons.collections4.trie.KeyAnalyzer(2)", "Delete ImportDeclaration(3)", "Delete TextElement: A (4)", "Delete SimpleName: KeyAnalyzer(5)", "Delete TagElement: @link(6)", "Delete TextElement:  for (7)", "Delete SimpleName: Character(8)", "Delete TagElement: @link(9)", "Delete TextElement: s.(10)", "Delete TagElement(11)", "Delete TextElement:  4.0(12)", "Delete TagElement: @since(13)", "Delete TextElement:  $Id$(14)", "Delete TagElement: @version(15)", "Delete Javadoc(16)", "Delete Modifier: public(17)", "Delete SimpleName: CharacterKeyAnalyzer(18)", "Delete SimpleName: KeyAnalyzer(19)", "Delete SimpleType: KeyAnalyzer(20)", "Delete SimpleName: Character(21)", "Delete SimpleType: Character(22)", "Delete ParameterizedType: KeyAnalyzer<Character>(23)", "Delete Modifier: private(24)", "Delete Modifier: static(25)", "Delete Modifier: final(26)", "Delete PrimitiveType: long(27)", "Delete SimpleName: serialVersionUID(28)", "Delete NumberLiteral: 3928565962744720753L(29)", "Delete VariableDeclarationFragment(30)", "Delete FieldDeclaration(31)", "Delete TextElement: A singleton instance of the (32)", "Delete SimpleName: CharacterKeyAnalyzer(33)", "Delete TagElement: @link(34)", "Delete TextElement: . (35)", "Delete TagElement(36)", "Delete Javadoc(37)", "Delete Modifier: public(38)", "Delete Modifier: static(39)", "Delete Modifier: final(40)", "Delete SimpleName: CharacterKeyAnalyzer(41)", "Delete SimpleType: CharacterKeyAnalyzer(42)", "Delete SimpleName: INSTANCE(43)", "Delete SimpleName: CharacterKeyAnalyzer(44)", "Delete SimpleType: CharacterKeyAnalyzer(45)", "Delete ClassInstanceCreation(46)", "Delete VariableDeclarationFragment(47)", "Delete FieldDeclaration(48)", "Delete TextElement: The length of a (49)", "Delete SimpleName: Character(50)", "Delete TagElement: @link(51)", "Delete TextElement:  in bits. (52)", "Delete TagElement(53)", "Delete Javadoc(54)", "Delete Modifier: public(55)", "Delete Modifier: static(56)", "Delete Modifier: final(57)", "Delete PrimitiveType: int(58)", "Delete SimpleName: LENGTH(59)", "Delete QualifiedName: Character.SIZE(60)", "Delete VariableDeclarationFragment(61)", "Delete FieldDeclaration(62)", "Delete TextElement: A bit mask where the first bit is 1 and the others are zero. (63)", "Delete TagElement(64)", "Delete Javadoc(65)", "Delete Modifier: private(66)", "Delete Modifier: static(67)", "Delete Modifier: final(68)", "Delete PrimitiveType: int(69)", "Delete SimpleName: MSB(70)", "Delete NumberLiteral: 0x8000(71)", "Delete VariableDeclarationFragment(72)", "Delete FieldDeclaration(73)", "Delete TextElement: Returns a bit mask where the given bit is set. (74)", "Delete TagElement(75)", "Delete Javadoc(76)", "Delete Modifier: private(77)", "Delete Modifier: static(78)", "Delete PrimitiveType: int(79)", "Delete SimpleName: mask(80)", "Delete Modifier: final(81)", "Delete PrimitiveType: int(82)", "Delete SimpleName: bit(83)", "Delete SingleVariableDeclaration(84)", "Delete SimpleName: MSB(85)", "Delete SimpleName: bit(86)", "Delete InfixExpression: >>>(87)", "Delete ReturnStatement(88)", "Delete Block(89)", "Delete MethodDeclaration(90)", "Delete Modifier: public(91)", "Delete PrimitiveType: int(92)", "Delete SimpleName: bitsPerElement(93)", "Delete NumberLiteral: 1(94)", "Delete ReturnStatement(95)", "Delete Block(96)", "Delete MethodDeclaration(97)", "Delete Modifier: public(98)", "Delete PrimitiveType: int(99)", "Delete SimpleName: lengthInBits(100)", "Delete Modifier: final(101)", "Delete SimpleName: Character(102)", "Delete SimpleType: Character(103)", "Delete SimpleName: key(104)", "Delete SingleVariableDeclaration(105)", "Delete SimpleName: LENGTH(106)", "Delete ReturnStatement(107)", "Delete Block(108)", "Delete MethodDeclaration(109)", "Delete Modifier: public(110)", "Delete PrimitiveType: boolean(111)", "Delete SimpleName: isBitSet(112)", "Delete Modifier: final(113)", "Delete SimpleName: Character(114)", "Delete SimpleType: Character(115)", "Delete SimpleName: key(116)", "Delete SingleVariableDeclaration(117)", "Delete Modifier: final(118)", "Delete PrimitiveType: int(119)", "Delete SimpleName: bitIndex(120)", "Delete SingleVariableDeclaration(121)", "Delete Modifier: final(122)", "Delete PrimitiveType: int(123)", "Delete SimpleName: lengthInBits(124)", "Delete SingleVariableDeclaration(125)", "Delete SimpleName: key(126)", "Delete SimpleName: charValue(127)", "Delete MethodInvocation(128)", "Delete SimpleName: mask(129)", "Delete SimpleName: bitIndex(130)", "Delete MethodInvocation(131)", "Delete InfixExpression: &(132)", "Delete ParenthesizedExpression(133)", "Delete NumberLiteral: 0(134)", "Delete InfixExpression: !=(135)", "Delete ReturnStatement(136)", "Delete Block(137)", "Delete MethodDeclaration(138)", "Delete Modifier: public(139)", "Delete PrimitiveType: int(140)", "Delete SimpleName: bitIndex(141)", "Delete Modifier: final(142)", "Delete SimpleName: Character(143)", "Delete SimpleType: Character(144)", "Delete SimpleName: key(145)", "Delete SingleVariableDeclaration(146)", "Delete Modifier: final(147)", "Delete PrimitiveType: int(148)", "Delete SimpleName: offsetInBits(149)", "Delete SingleVariableDeclaration(150)", "Delete Modifier: final(151)", "Delete PrimitiveType: int(152)", "Delete SimpleName: lengthInBits(153)", "Delete SingleVariableDeclaration(154)", "Delete Modifier: final(155)", "Delete SimpleName: Character(156)", "Delete SimpleType: Character(157)", "Delete SimpleName: other(158)", "Delete SingleVariableDeclaration(159)", "Delete Modifier: final(160)", "Delete PrimitiveType: int(161)", "Delete SimpleName: otherOffsetInBits(162)", "Delete SingleVariableDeclaration(163)", "Delete Modifier: final(164)", "Delete PrimitiveType: int(165)", "Delete SimpleName: otherLengthInBits(166)", "Delete SingleVariableDeclaration(167)", "Delete SimpleName: offsetInBits(168)", "Delete NumberLiteral: 0(169)", "Delete InfixExpression: !=(170)", "Delete SimpleName: otherOffsetInBits(171)", "Delete NumberLiteral: 0(172)", "Delete InfixExpression: !=(173)", "Delete InfixExpression: ||(174)", "Delete SimpleName: IllegalArgumentException(175)", "Delete SimpleType: IllegalArgumentException(176)", "Delete StringLiteral: \"offsetInBits=\"(177)", "Delete SimpleName: offsetInBits(178)", "Delete StringLiteral: \", otherOffsetInBits=\"(179)", "Delete SimpleName: otherOffsetInBits(180)", "Delete InfixExpression: +(181)", "Delete ClassInstanceCreation(182)", "Delete ThrowStatement(183)", "Delete Block(184)", "Delete IfStatement(185)", "Delete Modifier: final(186)", "Delete PrimitiveType: char(187)", "Delete SimpleName: keyValue(188)", "Delete SimpleName: key(189)", "Delete SimpleName: charValue(190)", "Delete MethodInvocation(191)", "Delete VariableDeclarationFragment(192)", "Delete VariableDeclarationStatement(193)", "Delete SimpleName: keyValue(194)", "Delete QualifiedName: Character.MIN_VALUE(195)", "Delete InfixExpression: ==(196)", "Delete SimpleName: NULL_BIT_KEY(197)", "Delete ReturnStatement(198)", "Delete Block(199)", "Delete IfStatement(200)", "Delete Modifier: final(201)", "Delete PrimitiveType: char(202)", "Delete SimpleName: otherValue(203)", "Delete SimpleName: other(204)", "Delete NullLiteral(205)", "Delete InfixExpression: !=(206)", "Delete SimpleName: other(207)", "Delete SimpleName: charValue(208)", "Delete MethodInvocation(209)", "Delete QualifiedName: Character.MIN_VALUE(210)", "Delete ConditionalExpression(211)", "Delete VariableDeclarationFragment(212)", "Delete VariableDeclarationStatement(213)", "Delete SimpleName: keyValue(214)", "Delete SimpleName: otherValue(215)", "Delete InfixExpression: !=(216)", "Delete Modifier: final(217)", "Delete PrimitiveType: int(218)", "Delete SimpleName: xorValue(219)", "Delete SimpleName: keyValue(220)", "Delete SimpleName: otherValue(221)", "Delete InfixExpression: ^(222)", "Delete VariableDeclarationFragment(223)", "Delete VariableDeclarationStatement(224)", "Delete PrimitiveType: int(225)", "Delete SimpleName: i(226)", "Delete NumberLiteral: 0(227)", "Delete VariableDeclarationFragment(228)", "Delete VariableDeclarationExpression(229)", "Delete SimpleName: i(230)", "Delete SimpleName: LENGTH(231)", "Delete InfixExpression: <(232)", "Delete SimpleName: i(233)", "Delete PostfixExpression: ++(234)", "Delete SimpleName: xorValue(235)", "Delete SimpleName: mask(236)", "Delete SimpleName: i(237)", "Delete MethodInvocation(238)", "Delete InfixExpression: &(239)", "Delete ParenthesizedExpression(240)", "Delete NumberLiteral: 0(241)", "Delete InfixExpression: !=(242)", "Delete SimpleName: i(243)", "Delete ReturnStatement(244)", "Delete Block(245)", "Delete IfStatement(246)", "Delete Block(247)", "Delete ForStatement(248)", "Delete Block(249)", "Delete IfStatement(250)", "Delete QualifiedName: KeyAnalyzer.EQUAL_BIT_KEY(251)", "Delete ReturnStatement(252)", "Delete Block(253)", "Delete MethodDeclaration(254)", "Delete Modifier: public(255)", "Delete PrimitiveType: boolean(256)", "Delete SimpleName: isPrefix(257)", "Delete Modifier: final(258)", "Delete SimpleName: Character(259)", "Delete SimpleType: Character(260)", "Delete SimpleName: prefix(261)", "Delete SingleVariableDeclaration(262)", "Delete Modifier: final(263)", "Delete PrimitiveType: int(264)", "Delete SimpleName: offsetInBits(265)", "Delete SingleVariableDeclaration(266)", "Delete Modifier: final(267)", "Delete PrimitiveType: int(268)", "Delete SimpleName: lengthInBits(269)", "Delete SingleVariableDeclaration(270)", "Delete Modifier: final(271)", "Delete SimpleName: Character(272)", "Delete SimpleType: Character(273)", "Delete SimpleName: key(274)", "Delete SingleVariableDeclaration(275)", "Delete Modifier: final(276)", "Delete PrimitiveType: int(277)", "Delete SimpleName: value1(278)", "Delete SimpleName: prefix(279)", "Delete SimpleName: charValue(280)", "Delete MethodInvocation(281)", "Delete SimpleName: offsetInBits(282)", "Delete InfixExpression: <<(283)", "Delete VariableDeclarationFragment(284)", "Delete VariableDeclarationStatement(285)", "Delete Modifier: final(286)", "Delete PrimitiveType: int(287)", "Delete SimpleName: value2(288)", "Delete SimpleName: key(289)", "Delete SimpleName: charValue(290)", "Delete MethodInvocation(291)", "Delete VariableDeclarationFragment(292)", "Delete VariableDeclarationStatement(293)", "Delete PrimitiveType: int(294)", "Delete SimpleName: mask(295)", "Delete NumberLiteral: 0(296)", "Delete VariableDeclarationFragment(297)", "Delete VariableDeclarationStatement(298)", "Delete PrimitiveType: int(299)", "Delete SimpleName: i(300)", "Delete NumberLiteral: 0(301)", "Delete VariableDeclarationFragment(302)", "Delete VariableDeclarationExpression(303)", "Delete SimpleName: i(304)", "Delete SimpleName: lengthInBits(305)", "Delete InfixExpression: <(306)", "Delete SimpleName: i(307)", "Delete PostfixExpression: ++(308)", "Delete SimpleName: mask(309)", "Delete NumberLiteral: 0x1(310)", "Delete SimpleName: i(311)", "Delete InfixExpression: <<(312)", "Delete Assignment: |=(313)", "Delete ExpressionStatement(314)", "Delete Block(315)", "Delete ForStatement(316)", "Delete SimpleName: value1(317)", "Delete SimpleName: mask(318)", "Delete InfixExpression: &(319)", "Delete ParenthesizedExpression(320)", "Delete SimpleName: value2(321)", "Delete SimpleName: mask(322)", "Delete InfixExpression: &(323)", "Delete ParenthesizedExpression(324)", "Delete InfixExpression: ==(325)", "Delete ReturnStatement(326)", "Delete Block(327)", "Delete MethodDeclaration(328)", "Delete TypeDeclaration: class(329)"]}}, {"IntegerKeyAnalyzer_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.collections4.trie.analyzer", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.collections4.trie.KeyAnalyzer"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Javadoc", "DEL SimpleType: IntegerKeyAnalyzer", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: otherValue", "DEL ReturnStatement", "DEL SimpleName: Integer", "DEL Modifier: final", "DEL TextElement: A bit mask where the first bit is 1 and the others are zero. ", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL Modifier: private", "DEL SimpleName: lengthInBits", "DEL Modifier: final", "DEL NumberLiteral: 0", "DEL Modifier: final", "DEL Modifier: public", "DEL NumberLiteral: 4928508653722068982L", "DEL SimpleName: other", "DEL TagElement: @version", "DEL SimpleName: other", "DEL SimpleType: Integer", "DEL SimpleName: value1", "DEL Modifier: final", "DEL InfixExpression: !=", "DEL SimpleName: intValue", "DEL SimpleName: LENGTH", "DEL SimpleName: KeyAnalyzer", "DEL Block", "DEL PrimitiveType: int", "DEL SimpleName: Integer", "DEL SingleVariableDeclaration", "DEL SimpleName: xorValue", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL TagElement: @since", "DEL SimpleName: bitsPerElement", "DEL Modifier: public", "DEL ForStatement", "DEL SimpleName: Integer", "DEL PrimitiveType: int", "DEL StringLiteral: \", otherOffsetInBits=\"", "DEL Modifier: static", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL ParenthesizedExpression", "DEL PrimitiveType: int", "DEL InfixExpression: !=", "DEL InfixExpression: !=", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL ParameterizedType: KeyAnalyzer<Integer>", "DEL TagElement: @link", "DEL SimpleType: Integer", "DEL SimpleName: intValue", "DEL FieldDeclaration", "DEL TextElement:  $Id$", "DEL TextElement:  4.0", "DEL Modifier: final", "DEL Modifier: final", "DEL TagElement: @link", "DEL Modifier: final", "DEL Block", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL ParenthesizedExpression", "DEL TextElement: . ", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleName: other", "DEL Modifier: final", "DEL SimpleName: bitIndex", "DEL SimpleName: LENGTH", "DEL TagElement: @link", "DEL SingleVariableDeclaration", "DEL SimpleType: IntegerKeyAnalyzer", "DEL PrimitiveType: int", "DEL SimpleName: IllegalArgumentException", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: isPrefix", "DEL Modifier: final", "DEL SimpleName: bit", "DEL SimpleName: IntegerKeyAnalyzer", "DEL Modifier: final", "DEL ReturnStatement", "DEL InfixExpression: ^", "DEL ReturnStatement", "DEL VariableDeclarationExpression", "DEL Block", "DEL PrimitiveType: int", "DEL SimpleName: isBitSet", "DEL Assignment: |=", "DEL TypeDeclaration: class", "DEL ReturnStatement", "DEL SimpleName: key", "DEL SimpleName: i", "DEL QualifiedName: KeyAnalyzer.EQUAL_BIT_KEY", "DEL PrimitiveType: int", "DEL SimpleType: Integer", "DEL Modifier: public", "DEL ParenthesizedExpression", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL Block", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: serialVersionUID", "DEL TagElement", "DEL SimpleName: LENGTH", "DEL FieldDeclaration", "DEL SimpleName: mask", "DEL SimpleName: otherValue", "DEL SimpleType: Integer", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL InfixExpression: &", "DEL ReturnStatement", "DEL SimpleName: i", "DEL SimpleType: KeyAnalyzer", "DEL SimpleName: lengthInBits", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL SimpleName: intValue", "DEL Modifier: final", "DEL InfixExpression: ||", "DEL SimpleName: IntegerKeyAnalyzer", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: intValue", "DEL SimpleName: key", "DEL PrimitiveType: int", "DEL ParenthesizedExpression", "DEL SimpleType: IllegalArgumentException", "DEL TextElement: Returns a bit mask where the given bit is set. ", "DEL VariableDeclarationFragment", "DEL SimpleName: otherLengthInBits", "DEL Block", "DEL NumberLiteral: 0x80000000", "DEL Modifier: public", "DEL SimpleName: mask", "DEL NumberLiteral: 0", "DEL TextElement: A singleton instance of ", "DEL PrimitiveType: int", "DEL TextElement: s.", "DEL SingleVariableDeclaration", "DEL SimpleName: bitIndex", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL PrimitiveType: long", "DEL TextElement:  in bits. ", "DEL NumberLiteral: 0x1", "DEL Modifier: public", "DEL Modifier: final", "DEL InfixExpression: &", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL Modifier: final", "DEL SimpleName: IntegerKeyAnalyzer", "DEL InfixExpression: <<", "DEL Block", "DEL SimpleName: value2", "DEL Block", "DEL SingleVariableDeclaration", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL ForStatement", "DEL SimpleName: KeyAnalyzer", "DEL Modifier: static", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL FieldDeclaration", "DEL SimpleName: lengthInBits", "DEL PrimitiveType: boolean", "DEL QualifiedName: Integer.SIZE", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: mask", "DEL SimpleName: Integer", "DEL MethodDeclaration", "DEL TagElement: @link", "DEL ConditionalExpression", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL Block", "DEL PrimitiveType: int", "DEL SimpleName: bit", "DEL NumberLiteral: 1", "DEL SingleVariableDeclaration", "DEL SimpleName: value1", "DEL Modifier: static", "DEL Javadoc", "DEL Modifier: public", "DEL InfixExpression: >>>", "DEL SimpleName: offsetInBits", "DEL Modifier: private", "DEL SimpleName: offsetInBits", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL InfixExpression: &", "DEL NumberLiteral: 0", "DEL SimpleName: intValue", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: NULL_BIT_KEY", "DEL SimpleName: lengthInBits", "DEL PrimitiveType: int", "DEL SimpleName: otherValue", "DEL SimpleName: key", "DEL Modifier: public", "DEL SimpleName: key", "DEL TagElement", "DEL Modifier: final", "DEL SimpleName: keyValue", "DEL ClassInstanceCreation", "DEL TagElement", "DEL NumberLiteral: 0", "DEL StringLiteral: \"offsetInBits=\"", "DEL SimpleName: otherOffsetInBits", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: Integer", "DEL SimpleName: keyValue", "DEL TextElement: The length of an ", "DEL InfixExpression: +", "DEL Modifier: final", "DEL InfixExpression: !=", "DEL Modifier: final", "DEL SimpleName: i", "DEL ReturnStatement", "DEL SimpleName: offsetInBits", "DEL Modifier: final", "DEL SimpleName: MSB", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL SimpleType: Integer", "DEL SimpleName: Integer", "DEL SimpleName: keyValue", "DEL TagElement", "DEL NumberLiteral: 0", "DEL NumberLiteral: 0", "DEL Modifier: static", "DEL PrimitiveType: int", "DEL Block", "DEL SimpleName: prefix", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 0", "DEL SimpleName: key", "DEL Modifier: private", "DEL Modifier: final", "DEL SimpleName: keyValue", "DEL PrimitiveType: int", "DEL SimpleName: Integer", "DEL SimpleName: key", "DEL SimpleName: i", "DEL PrimitiveType: int", "DEL InfixExpression: <", "DEL VariableDeclarationFragment", "DEL SimpleName: lengthInBits", "DEL MethodInvocation", "DEL SimpleName: prefix", "DEL SimpleType: Integer", "DEL SimpleType: Integer", "DEL Modifier: final", "DEL SimpleName: value2", "DEL MethodInvocation", "DEL SimpleName: offsetInBits", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL Block", "DEL Javadoc", "DEL SimpleName: bitIndex", "DEL Block", "DEL SimpleName: i", "DEL SimpleName: Integer", "DEL SimpleName: IntegerKeyAnalyzer", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL Modifier: static", "DEL InfixExpression: !=", "DEL SimpleName: mask", "DEL SimpleName: i", "DEL ThrowStatement", "DEL VariableDeclarationFragment", "DEL InfixExpression: <<", "DEL Modifier: final", "DEL PostfixExpression: ++", "DEL SimpleName: INSTANCE", "DEL IfStatement", "DEL Block", "DEL SimpleName: xorValue", "DEL TextElement: A ", "DEL SimpleName: mask", "DEL SimpleName: Integer", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: i", "DEL PrimitiveType: boolean", "DEL PostfixExpression: ++", "DEL SimpleName: mask", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL TextElement:  for ", "DEL InfixExpression: !=", "DEL SimpleName: MSB", "DEL VariableDeclarationExpression", "DEL Modifier: final", "DEL SimpleName: otherOffsetInBits", "DEL SimpleName: otherOffsetInBits", "DEL SimpleName: i", "DEL InfixExpression: <", "DEL SimpleName: key", "DEL SimpleName: mask", "DEL Modifier: final", "DEL SimpleName: offsetInBits", "DEL MethodDeclaration", "DEL InfixExpression: &"]}]}}, {"IntegerKeyAnalyzer_diff": {"operations": ["Delete QualifiedName: org.apache.commons.collections4.trie.analyzer(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.apache.commons.collections4.trie.KeyAnalyzer(2)", "Delete ImportDeclaration(3)", "Delete TextElement: A (4)", "Delete SimpleName: KeyAnalyzer(5)", "Delete TagElement: @link(6)", "Delete TextElement:  for (7)", "Delete SimpleName: Integer(8)", "Delete TagElement: @link(9)", "Delete TextElement: s.(10)", "Delete TagElement(11)", "Delete TextElement:  4.0(12)", "Delete TagElement: @since(13)", "Delete TextElement:  $Id$(14)", "Delete TagElement: @version(15)", "Delete Javadoc(16)", "Delete Modifier: public(17)", "Delete SimpleName: IntegerKeyAnalyzer(18)", "Delete SimpleName: KeyAnalyzer(19)", "Delete SimpleType: KeyAnalyzer(20)", "Delete SimpleName: Integer(21)", "Delete SimpleType: Integer(22)", "Delete ParameterizedType: KeyAnalyzer<Integer>(23)", "Delete Modifier: private(24)", "Delete Modifier: static(25)", "Delete Modifier: final(26)", "Delete PrimitiveType: long(27)", "Delete SimpleName: serialVersionUID(28)", "Delete NumberLiteral: 4928508653722068982L(29)", "Delete VariableDeclarationFragment(30)", "Delete FieldDeclaration(31)", "Delete TextElement: A singleton instance of (32)", "Delete SimpleName: IntegerKeyAnalyzer(33)", "Delete TagElement: @link(34)", "Delete TextElement: . (35)", "Delete TagElement(36)", "Delete Javadoc(37)", "Delete Modifier: public(38)", "Delete Modifier: static(39)", "Delete Modifier: final(40)", "Delete SimpleName: IntegerKeyAnalyzer(41)", "Delete SimpleType: IntegerKeyAnalyzer(42)", "Delete SimpleName: INSTANCE(43)", "Delete SimpleName: IntegerKeyAnalyzer(44)", "Delete SimpleType: IntegerKeyAnalyzer(45)", "Delete ClassInstanceCreation(46)", "Delete VariableDeclarationFragment(47)", "Delete FieldDeclaration(48)", "Delete TextElement: The length of an (49)", "Delete SimpleName: Integer(50)", "Delete TagElement: @link(51)", "Delete TextElement:  in bits. (52)", "Delete TagElement(53)", "Delete Javadoc(54)", "Delete Modifier: public(55)", "Delete Modifier: static(56)", "Delete Modifier: final(57)", "Delete PrimitiveType: int(58)", "Delete SimpleName: LENGTH(59)", "Delete QualifiedName: Integer.SIZE(60)", "Delete VariableDeclarationFragment(61)", "Delete FieldDeclaration(62)", "Delete TextElement: A bit mask where the first bit is 1 and the others are zero. (63)", "Delete TagElement(64)", "Delete Javadoc(65)", "Delete Modifier: private(66)", "Delete Modifier: static(67)", "Delete Modifier: final(68)", "Delete PrimitiveType: int(69)", "Delete SimpleName: MSB(70)", "Delete NumberLiteral: 0x80000000(71)", "Delete VariableDeclarationFragment(72)", "Delete FieldDeclaration(73)", "Delete TextElement: Returns a bit mask where the given bit is set. (74)", "Delete TagElement(75)", "Delete Javadoc(76)", "Delete Modifier: private(77)", "Delete Modifier: static(78)", "Delete PrimitiveType: int(79)", "Delete SimpleName: mask(80)", "Delete Modifier: final(81)", "Delete PrimitiveType: int(82)", "Delete SimpleName: bit(83)", "Delete SingleVariableDeclaration(84)", "Delete SimpleName: MSB(85)", "Delete SimpleName: bit(86)", "Delete InfixExpression: >>>(87)", "Delete ReturnStatement(88)", "Delete Block(89)", "Delete MethodDeclaration(90)", "Delete Modifier: public(91)", "Delete PrimitiveType: int(92)", "Delete SimpleName: bitsPerElement(93)", "Delete NumberLiteral: 1(94)", "Delete ReturnStatement(95)", "Delete Block(96)", "Delete MethodDeclaration(97)", "Delete Modifier: public(98)", "Delete PrimitiveType: int(99)", "Delete SimpleName: lengthInBits(100)", "Delete Modifier: final(101)", "Delete SimpleName: Integer(102)", "Delete SimpleType: Integer(103)", "Delete SimpleName: key(104)", "Delete SingleVariableDeclaration(105)", "Delete SimpleName: LENGTH(106)", "Delete ReturnStatement(107)", "Delete Block(108)", "Delete MethodDeclaration(109)", "Delete Modifier: public(110)", "Delete PrimitiveType: boolean(111)", "Delete SimpleName: isBitSet(112)", "Delete Modifier: final(113)", "Delete SimpleName: Integer(114)", "Delete SimpleType: Integer(115)", "Delete SimpleName: key(116)", "Delete SingleVariableDeclaration(117)", "Delete Modifier: final(118)", "Delete PrimitiveType: int(119)", "Delete SimpleName: bitIndex(120)", "Delete SingleVariableDeclaration(121)", "Delete Modifier: final(122)", "Delete PrimitiveType: int(123)", "Delete SimpleName: lengthInBits(124)", "Delete SingleVariableDeclaration(125)", "Delete SimpleName: key(126)", "Delete SimpleName: intValue(127)", "Delete MethodInvocation(128)", "Delete SimpleName: mask(129)", "Delete SimpleName: bitIndex(130)", "Delete MethodInvocation(131)", "Delete InfixExpression: &(132)", "Delete ParenthesizedExpression(133)", "Delete NumberLiteral: 0(134)", "Delete InfixExpression: !=(135)", "Delete ReturnStatement(136)", "Delete Block(137)", "Delete MethodDeclaration(138)", "Delete Modifier: public(139)", "Delete PrimitiveType: int(140)", "Delete SimpleName: bitIndex(141)", "Delete Modifier: final(142)", "Delete SimpleName: Integer(143)", "Delete SimpleType: Integer(144)", "Delete SimpleName: key(145)", "Delete SingleVariableDeclaration(146)", "Delete Modifier: final(147)", "Delete PrimitiveType: int(148)", "Delete SimpleName: offsetInBits(149)", "Delete SingleVariableDeclaration(150)", "Delete Modifier: final(151)", "Delete PrimitiveType: int(152)", "Delete SimpleName: lengthInBits(153)", "Delete SingleVariableDeclaration(154)", "Delete Modifier: final(155)", "Delete SimpleName: Integer(156)", "Delete SimpleType: Integer(157)", "Delete SimpleName: other(158)", "Delete SingleVariableDeclaration(159)", "Delete Modifier: final(160)", "Delete PrimitiveType: int(161)", "Delete SimpleName: otherOffsetInBits(162)", "Delete SingleVariableDeclaration(163)", "Delete Modifier: final(164)", "Delete PrimitiveType: int(165)", "Delete SimpleName: otherLengthInBits(166)", "Delete SingleVariableDeclaration(167)", "Delete SimpleName: offsetInBits(168)", "Delete NumberLiteral: 0(169)", "Delete InfixExpression: !=(170)", "Delete SimpleName: otherOffsetInBits(171)", "Delete NumberLiteral: 0(172)", "Delete InfixExpression: !=(173)", "Delete InfixExpression: ||(174)", "Delete SimpleName: IllegalArgumentException(175)", "Delete SimpleType: IllegalArgumentException(176)", "Delete StringLiteral: \"offsetInBits=\"(177)", "Delete SimpleName: offsetInBits(178)", "Delete StringLiteral: \", otherOffsetInBits=\"(179)", "Delete SimpleName: otherOffsetInBits(180)", "Delete InfixExpression: +(181)", "Delete ClassInstanceCreation(182)", "Delete ThrowStatement(183)", "Delete Block(184)", "Delete IfStatement(185)", "Delete Modifier: final(186)", "Delete PrimitiveType: int(187)", "Delete SimpleName: keyValue(188)", "Delete SimpleName: key(189)", "Delete SimpleName: intValue(190)", "Delete MethodInvocation(191)", "Delete VariableDeclarationFragment(192)", "Delete VariableDeclarationStatement(193)", "Delete SimpleName: keyValue(194)", "Delete NumberLiteral: 0(195)", "Delete InfixExpression: ==(196)", "Delete SimpleName: NULL_BIT_KEY(197)", "Delete ReturnStatement(198)", "Delete Block(199)", "Delete IfStatement(200)", "Delete Modifier: final(201)", "Delete PrimitiveType: int(202)", "Delete SimpleName: otherValue(203)", "Delete SimpleName: other(204)", "Delete NullLiteral(205)", "Delete InfixExpression: !=(206)", "Delete SimpleName: other(207)", "Delete SimpleName: intValue(208)", "Delete MethodInvocation(209)", "Delete NumberLiteral: 0(210)", "Delete ConditionalExpression(211)", "Delete VariableDeclarationFragment(212)", "Delete VariableDeclarationStatement(213)", "Delete SimpleName: keyValue(214)", "Delete SimpleName: otherValue(215)", "Delete InfixExpression: !=(216)", "Delete Modifier: final(217)", "Delete PrimitiveType: int(218)", "Delete SimpleName: xorValue(219)", "Delete SimpleName: keyValue(220)", "Delete SimpleName: otherValue(221)", "Delete InfixExpression: ^(222)", "Delete VariableDeclarationFragment(223)", "Delete VariableDeclarationStatement(224)", "Delete PrimitiveType: int(225)", "Delete SimpleName: i(226)", "Delete NumberLiteral: 0(227)", "Delete VariableDeclarationFragment(228)", "Delete VariableDeclarationExpression(229)", "Delete SimpleName: i(230)", "Delete SimpleName: LENGTH(231)", "Delete InfixExpression: <(232)", "Delete SimpleName: i(233)", "Delete PostfixExpression: ++(234)", "Delete SimpleName: xorValue(235)", "Delete SimpleName: mask(236)", "Delete SimpleName: i(237)", "Delete MethodInvocation(238)", "Delete InfixExpression: &(239)", "Delete ParenthesizedExpression(240)", "Delete NumberLiteral: 0(241)", "Delete InfixExpression: !=(242)", "Delete SimpleName: i(243)", "Delete ReturnStatement(244)", "Delete Block(245)", "Delete IfStatement(246)", "Delete Block(247)", "Delete ForStatement(248)", "Delete Block(249)", "Delete IfStatement(250)", "Delete QualifiedName: KeyAnalyzer.EQUAL_BIT_KEY(251)", "Delete ReturnStatement(252)", "Delete Block(253)", "Delete MethodDeclaration(254)", "Delete Modifier: public(255)", "Delete PrimitiveType: boolean(256)", "Delete SimpleName: isPrefix(257)", "Delete Modifier: final(258)", "Delete SimpleName: Integer(259)", "Delete SimpleType: Integer(260)", "Delete SimpleName: prefix(261)", "Delete SingleVariableDeclaration(262)", "Delete Modifier: final(263)", "Delete PrimitiveType: int(264)", "Delete SimpleName: offsetInBits(265)", "Delete SingleVariableDeclaration(266)", "Delete Modifier: final(267)", "Delete PrimitiveType: int(268)", "Delete SimpleName: lengthInBits(269)", "Delete SingleVariableDeclaration(270)", "Delete Modifier: final(271)", "Delete SimpleName: Integer(272)", "Delete SimpleType: Integer(273)", "Delete SimpleName: key(274)", "Delete SingleVariableDeclaration(275)", "Delete Modifier: final(276)", "Delete PrimitiveType: int(277)", "Delete SimpleName: value1(278)", "Delete SimpleName: prefix(279)", "Delete SimpleName: intValue(280)", "Delete MethodInvocation(281)", "Delete SimpleName: offsetInBits(282)", "Delete InfixExpression: <<(283)", "Delete VariableDeclarationFragment(284)", "Delete VariableDeclarationStatement(285)", "Delete Modifier: final(286)", "Delete PrimitiveType: int(287)", "Delete SimpleName: value2(288)", "Delete SimpleName: key(289)", "Delete SimpleName: intValue(290)", "Delete MethodInvocation(291)", "Delete VariableDeclarationFragment(292)", "Delete VariableDeclarationStatement(293)", "Delete PrimitiveType: int(294)", "Delete SimpleName: mask(295)", "Delete NumberLiteral: 0(296)", "Delete VariableDeclarationFragment(297)", "Delete VariableDeclarationStatement(298)", "Delete PrimitiveType: int(299)", "Delete SimpleName: i(300)", "Delete NumberLiteral: 0(301)", "Delete VariableDeclarationFragment(302)", "Delete VariableDeclarationExpression(303)", "Delete SimpleName: i(304)", "Delete SimpleName: lengthInBits(305)", "Delete InfixExpression: <(306)", "Delete SimpleName: i(307)", "Delete PostfixExpression: ++(308)", "Delete SimpleName: mask(309)", "Delete NumberLiteral: 0x1(310)", "Delete SimpleName: i(311)", "Delete InfixExpression: <<(312)", "Delete Assignment: |=(313)", "Delete ExpressionStatement(314)", "Delete Block(315)", "Delete ForStatement(316)", "Delete SimpleName: value1(317)", "Delete SimpleName: mask(318)", "Delete InfixExpression: &(319)", "Delete ParenthesizedExpression(320)", "Delete SimpleName: value2(321)", "Delete SimpleName: mask(322)", "Delete InfixExpression: &(323)", "Delete ParenthesizedExpression(324)", "Delete InfixExpression: ==(325)", "Delete ReturnStatement(326)", "Delete Block(327)", "Delete MethodDeclaration(328)", "Delete TypeDeclaration: class(329)"]}}, {"LongKeyAnalyzer_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.collections4.trie.analyzer", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.collections4.trie.KeyAnalyzer"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TagElement", "DEL SimpleName: LongKeyAnalyzer", "DEL Block", "DEL InfixExpression: &", "DEL VariableDeclarationFragment", "DEL SimpleName: lengthInBits", "DEL SimpleName: otherValue", "DEL SimpleName: lengthInBits", "DEL InfixExpression: &", "DEL MethodInvocation", "DEL SimpleName: key", "DEL TagElement: @link", "DEL InfixExpression: !=", "DEL SimpleName: offsetInBits", "DEL Javadoc", "DEL SimpleName: isBitSet", "DEL SimpleType: LongKeyAnalyzer", "DEL ThrowStatement", "DEL Modifier: public", "DEL TagElement: @link", "DEL SimpleName: LongKeyAnalyzer", "DEL SingleVariableDeclaration", "DEL TextElement: A ", "DEL NumberLiteral: 0L", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: LENGTH", "DEL SimpleName: value1", "DEL SimpleName: xorValue", "DEL Block", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: value2", "DEL Modifier: final", "DEL SimpleName: other", "DEL Modifier: final", "DEL SimpleName: Long", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL SimpleName: bit", "DEL SimpleName: i", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: Long", "DEL SimpleName: mask", "DEL Modifier: public", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: other", "DEL SimpleName: i", "DEL SimpleName: key", "DEL Block", "DEL SimpleName: IllegalArgumentException", "DEL Modifier: final", "DEL TextElement:  4.0", "DEL ParameterizedType: KeyAnalyzer<Long>", "DEL TagElement", "DEL SimpleName: offsetInBits", "DEL SimpleName: Long", "DEL NumberLiteral: 4119639247588227409L", "DEL SimpleName: Long", "DEL Modifier: static", "DEL PrimitiveType: int", "DEL Modifier: private", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL SimpleName: otherOffsetInBits", "DEL ForStatement", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL Block", "DEL NumberLiteral: 1", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: NULL_BIT_KEY", "DEL IfStatement", "DEL Block", "DEL Modifier: public", "DEL TextElement: Returns a bit mask where the given bit is set. ", "DEL TextElement: A singleton instance of ", "DEL Block", "DEL ReturnStatement", "DEL NumberLiteral: 0L", "DEL SimpleName: bit", "DEL Modifier: final", "DEL Block", "DEL Modifier: static", "DEL SimpleName: lengthInBits", "DEL NumberLiteral: 0", "DEL Javadoc", "DEL ParenthesizedExpression", "DEL SimpleName: value1", "DEL VariableDeclarationFragment", "DEL InfixExpression: &", "DEL PrimitiveType: long", "DEL InfixExpression: &", "DEL PrimitiveType: long", "DEL PostfixExpression: ++", "DEL Modifier: final", "DEL InfixExpression: >>>", "DEL SimpleName: i", "DEL SimpleName: xorValue", "DEL SimpleName: bitsPerElement", "DEL Modifier: public", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL ForStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: longValue", "DEL NumberLiteral: 0", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL TagElement: @link", "DEL SimpleName: bitIndex", "DEL SimpleType: Long", "DEL ReturnStatement", "DEL ParenthesizedExpression", "DEL SimpleName: otherOffsetInBits", "DEL IfStatement", "DEL TextElement:  for ", "DEL Modifier: final", "DEL Modifier: final", "DEL InfixExpression: ==", "DEL SimpleName: Long", "DEL ClassInstanceCreation", "DEL InfixExpression: <<", "DEL Modifier: final", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL TextElement: The length of an ", "DEL SimpleName: i", "DEL SimpleName: LENGTH", "DEL VariableDeclarationStatement", "DEL SimpleName: longValue", "DEL VariableDeclarationFragment", "DEL SimpleName: Long", "DEL SimpleName: MSB", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: mask", "DEL SimpleName: offsetInBits", "DEL Javadoc", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL SimpleName: i", "DEL SimpleName: bitIndex", "DEL PrimitiveType: int", "DEL SimpleName: keyValue", "DEL SimpleType: Long", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SimpleType: Long", "DEL SimpleName: i", "DEL PrimitiveType: long", "DEL Modifier: final", "DEL SimpleName: i", "DEL MethodDeclaration", "DEL SimpleType: KeyAnalyzer", "DEL SimpleName: prefix", "DEL SimpleName: mask", "DEL SimpleName: Long", "DEL TagElement: @link", "DEL SimpleName: LongKeyAnalyzer", "DEL SimpleName: key", "DEL TextElement: A bit mask where the first bit is 1 and the others are zero. ", "DEL ParenthesizedExpression", "DEL SimpleName: KeyAnalyzer", "DEL SimpleName: keyValue", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL TypeDeclaration: class", "DEL PrimitiveType: int", "DEL FieldDeclaration", "DEL InfixExpression: !=", "DEL InfixExpression: +", "DEL NumberLiteral: 0x1L", "DEL ParenthesizedExpression", "DEL Modifier: public", "DEL InfixExpression: !=", "DEL Block", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL SimpleName: offsetInBits", "DEL SimpleName: key", "DEL NumberLiteral: 0x8000000000000000L", "DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL SimpleName: lengthInBits", "DEL Modifier: private", "DEL TagElement", "DEL SimpleName: INSTANCE", "DEL TagElement", "DEL SimpleName: Long", "DEL TagElement: @since", "DEL Block", "DEL VariableDeclarationExpression", "DEL IfStatement", "DEL SimpleName: lengthInBits", "DEL SimpleName: i", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL InfixExpression: !=", "DEL Modifier: final", "DEL IfStatement", "DEL TextElement: . ", "DEL ReturnStatement", "DEL SimpleName: longValue", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SimpleName: key", "DEL SimpleName: LongKeyAnalyzer", "DEL QualifiedName: KeyAnalyzer.EQUAL_BIT_KEY", "DEL InfixExpression: !=", "DEL SimpleType: IllegalArgumentException", "DEL TextElement:  in bits. ", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL SimpleName: offsetInBits", "DEL VariableDeclarationFragment", "DEL TextElement: s.", "DEL SimpleName: MSB", "DEL PrimitiveType: long", "DEL Javadoc", "DEL NumberLiteral: 0", "DEL SimpleName: mask", "DEL Modifier: static", "DEL SimpleName: other", "DEL TagElement: @version", "DEL SimpleName: LENGTH", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SimpleName: Long", "DEL FieldDeclaration", "DEL InfixExpression: <", "DEL Assignment: |=", "DEL SimpleType: Long", "DEL SimpleName: Long", "DEL SimpleName: longValue", "DEL SimpleName: otherValue", "DEL SimpleName: key", "DEL SimpleName: serialVersionUID", "DEL SimpleName: mask", "DEL Modifier: final", "DEL VariableDeclarationExpression", "DEL InfixExpression: ==", "DEL SimpleType: Long", "DEL PrimitiveType: long", "DEL MethodInvocation", "DEL Javadoc", "DEL Modifier: final", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL StringLiteral: \"offsetInBits=\"", "DEL PrimitiveType: long", "DEL ReturnStatement", "DEL PrimitiveType: long", "DEL InfixExpression: !=", "DEL SimpleName: isPrefix", "DEL PrimitiveType: int", "DEL Block", "DEL SimpleName: key", "DEL SimpleName: prefix", "DEL InfixExpression: ||", "DEL SimpleName: mask", "DEL StringLiteral: \", otherOffsetInBits=\"", "DEL Block", "DEL PrimitiveType: long", "DEL SimpleName: longValue", "DEL NumberLiteral: 0", "DEL SimpleType: LongKeyAnalyzer", "DEL Modifier: final", "DEL NumberLiteral: 0L", "DEL SimpleName: value2", "DEL Block", "DEL PrefixExpression: -", "DEL VariableDeclarationFragment", "DEL SimpleName: KeyAnalyzer", "DEL TextElement:  $Id$", "DEL InfixExpression: <", "DEL SimpleName: keyValue", "DEL PrimitiveType: int", "DEL ConditionalExpression", "DEL SimpleName: otherOffsetInBits", "DEL Modifier: final", "DEL Modifier: public", "DEL NumberLiteral: 0L", "DEL FieldDeclaration", "DEL PostfixExpression: ++", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleType: Long", "DEL ReturnStatement", "DEL PrimitiveType: boolean", "DEL QualifiedName: Long.SIZE", "DEL SimpleName: otherValue", "DEL ReturnStatement", "DEL InfixExpression: ^", "DEL InfixExpression: <<", "DEL Modifier: final", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL PrimitiveType: long", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: mask", "DEL SimpleName: keyValue", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL SimpleName: otherLengthInBits", "DEL SimpleName: bitIndex", "DEL MethodDeclaration", "DEL SimpleName: i"]}]}}, {"LongKeyAnalyzer_diff": {"operations": ["Delete QualifiedName: org.apache.commons.collections4.trie.analyzer(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.apache.commons.collections4.trie.KeyAnalyzer(2)", "Delete ImportDeclaration(3)", "Delete TextElement: A (4)", "Delete SimpleName: KeyAnalyzer(5)", "Delete TagElement: @link(6)", "Delete TextElement:  for (7)", "Delete SimpleName: Long(8)", "Delete TagElement: @link(9)", "Delete TextElement: s.(10)", "Delete TagElement(11)", "Delete TextElement:  4.0(12)", "Delete TagElement: @since(13)", "Delete TextElement:  $Id$(14)", "Delete TagElement: @version(15)", "Delete Javadoc(16)", "Delete Modifier: public(17)", "Delete SimpleName: LongKeyAnalyzer(18)", "Delete SimpleName: KeyAnalyzer(19)", "Delete SimpleType: KeyAnalyzer(20)", "Delete SimpleName: Long(21)", "Delete SimpleType: Long(22)", "Delete ParameterizedType: KeyAnalyzer<Long>(23)", "Delete Modifier: private(24)", "Delete Modifier: static(25)", "Delete Modifier: final(26)", "Delete PrimitiveType: long(27)", "Delete SimpleName: serialVersionUID(28)", "Delete NumberLiteral: 4119639247588227409L(29)", "Delete PrefixExpression: -(30)", "Delete VariableDeclarationFragment(31)", "Delete FieldDeclaration(32)", "Delete TextElement: A singleton instance of (33)", "Delete SimpleName: LongKeyAnalyzer(34)", "Delete TagElement: @link(35)", "Delete TextElement: . (36)", "Delete TagElement(37)", "Delete Javadoc(38)", "Delete Modifier: public(39)", "Delete Modifier: static(40)", "Delete Modifier: final(41)", "Delete SimpleName: LongKeyAnalyzer(42)", "Delete SimpleType: LongKeyAnalyzer(43)", "Delete SimpleName: INSTANCE(44)", "Delete SimpleName: LongKeyAnalyzer(45)", "Delete SimpleType: LongKeyAnalyzer(46)", "Delete ClassInstanceCreation(47)", "Delete VariableDeclarationFragment(48)", "Delete FieldDeclaration(49)", "Delete TextElement: The length of an (50)", "Delete SimpleName: Long(51)", "Delete TagElement: @link(52)", "Delete TextElement:  in bits. (53)", "Delete TagElement(54)", "Delete Javadoc(55)", "Delete Modifier: public(56)", "Delete Modifier: static(57)", "Delete Modifier: final(58)", "Delete PrimitiveType: int(59)", "Delete SimpleName: LENGTH(60)", "Delete QualifiedName: Long.SIZE(61)", "Delete VariableDeclarationFragment(62)", "Delete FieldDeclaration(63)", "Delete TextElement: A bit mask where the first bit is 1 and the others are zero. (64)", "Delete TagElement(65)", "Delete Javadoc(66)", "Delete Modifier: private(67)", "Delete Modifier: static(68)", "Delete Modifier: final(69)", "Delete PrimitiveType: long(70)", "Delete SimpleName: MSB(71)", "Delete NumberLiteral: 0x8000000000000000L(72)", "Delete VariableDeclarationFragment(73)", "Delete FieldDeclaration(74)", "Delete TextElement: Returns a bit mask where the given bit is set. (75)", "Delete TagElement(76)", "Delete Javadoc(77)", "Delete Modifier: private(78)", "Delete Modifier: static(79)", "Delete PrimitiveType: long(80)", "Delete SimpleName: mask(81)", "Delete Modifier: final(82)", "Delete PrimitiveType: int(83)", "Delete SimpleName: bit(84)", "Delete SingleVariableDeclaration(85)", "Delete SimpleName: MSB(86)", "Delete SimpleName: bit(87)", "Delete InfixExpression: >>>(88)", "Delete ReturnStatement(89)", "Delete Block(90)", "Delete MethodDeclaration(91)", "Delete Modifier: public(92)", "Delete PrimitiveType: int(93)", "Delete SimpleName: bitsPerElement(94)", "Delete NumberLiteral: 1(95)", "Delete ReturnStatement(96)", "Delete Block(97)", "Delete MethodDeclaration(98)", "Delete Modifier: public(99)", "Delete PrimitiveType: int(100)", "Delete SimpleName: lengthInBits(101)", "Delete Modifier: final(102)", "Delete SimpleName: Long(103)", "Delete SimpleType: Long(104)", "Delete SimpleName: key(105)", "Delete SingleVariableDeclaration(106)", "Delete SimpleName: LENGTH(107)", "Delete ReturnStatement(108)", "Delete Block(109)", "Delete MethodDeclaration(110)", "Delete Modifier: public(111)", "Delete PrimitiveType: boolean(112)", "Delete SimpleName: isBitSet(113)", "Delete Modifier: final(114)", "Delete SimpleName: Long(115)", "Delete SimpleType: Long(116)", "Delete SimpleName: key(117)", "Delete SingleVariableDeclaration(118)", "Delete Modifier: final(119)", "Delete PrimitiveType: int(120)", "Delete SimpleName: bitIndex(121)", "Delete SingleVariableDeclaration(122)", "Delete Modifier: final(123)", "Delete PrimitiveType: int(124)", "Delete SimpleName: lengthInBits(125)", "Delete SingleVariableDeclaration(126)", "Delete SimpleName: key(127)", "Delete SimpleName: longValue(128)", "Delete MethodInvocation(129)", "Delete SimpleName: mask(130)", "Delete SimpleName: bitIndex(131)", "Delete MethodInvocation(132)", "Delete InfixExpression: &(133)", "Delete ParenthesizedExpression(134)", "Delete NumberLiteral: 0(135)", "Delete InfixExpression: !=(136)", "Delete ReturnStatement(137)", "Delete Block(138)", "Delete MethodDeclaration(139)", "Delete Modifier: public(140)", "Delete PrimitiveType: int(141)", "Delete SimpleName: bitIndex(142)", "Delete Modifier: final(143)", "Delete SimpleName: Long(144)", "Delete SimpleType: Long(145)", "Delete SimpleName: key(146)", "Delete SingleVariableDeclaration(147)", "Delete Modifier: final(148)", "Delete PrimitiveType: int(149)", "Delete SimpleName: offsetInBits(150)", "Delete SingleVariableDeclaration(151)", "Delete Modifier: final(152)", "Delete PrimitiveType: int(153)", "Delete SimpleName: lengthInBits(154)", "Delete SingleVariableDeclaration(155)", "Delete Modifier: final(156)", "Delete SimpleName: Long(157)", "Delete SimpleType: Long(158)", "Delete SimpleName: other(159)", "Delete SingleVariableDeclaration(160)", "Delete Modifier: final(161)", "Delete PrimitiveType: int(162)", "Delete SimpleName: otherOffsetInBits(163)", "Delete SingleVariableDeclaration(164)", "Delete Modifier: final(165)", "Delete PrimitiveType: int(166)", "Delete SimpleName: otherLengthInBits(167)", "Delete SingleVariableDeclaration(168)", "Delete SimpleName: offsetInBits(169)", "Delete NumberLiteral: 0(170)", "Delete InfixExpression: !=(171)", "Delete SimpleName: otherOffsetInBits(172)", "Delete NumberLiteral: 0(173)", "Delete InfixExpression: !=(174)", "Delete InfixExpression: ||(175)", "Delete SimpleName: IllegalArgumentException(176)", "Delete SimpleType: IllegalArgumentException(177)", "Delete StringLiteral: \"offsetInBits=\"(178)", "Delete SimpleName: offsetInBits(179)", "Delete StringLiteral: \", otherOffsetInBits=\"(180)", "Delete SimpleName: otherOffsetInBits(181)", "Delete InfixExpression: +(182)", "Delete ClassInstanceCreation(183)", "Delete ThrowStatement(184)", "Delete Block(185)", "Delete IfStatement(186)", "Delete Modifier: final(187)", "Delete PrimitiveType: long(188)", "Delete SimpleName: keyValue(189)", "Delete SimpleName: key(190)", "Delete SimpleName: longValue(191)", "Delete MethodInvocation(192)", "Delete VariableDeclarationFragment(193)", "Delete VariableDeclarationStatement(194)", "Delete SimpleName: keyValue(195)", "Delete NumberLiteral: 0L(196)", "Delete InfixExpression: ==(197)", "Delete SimpleName: NULL_BIT_KEY(198)", "Delete ReturnStatement(199)", "Delete Block(200)", "Delete IfStatement(201)", "Delete Modifier: final(202)", "Delete PrimitiveType: long(203)", "Delete SimpleName: otherValue(204)", "Delete SimpleName: other(205)", "Delete NullLiteral(206)", "Delete InfixExpression: !=(207)", "Delete SimpleName: other(208)", "Delete SimpleName: longValue(209)", "Delete MethodInvocation(210)", "Delete NumberLiteral: 0L(211)", "Delete ConditionalExpression(212)", "Delete VariableDeclarationFragment(213)", "Delete VariableDeclarationStatement(214)", "Delete SimpleName: keyValue(215)", "Delete SimpleName: otherValue(216)", "Delete InfixExpression: !=(217)", "Delete Modifier: final(218)", "Delete PrimitiveType: long(219)", "Delete SimpleName: xorValue(220)", "Delete SimpleName: keyValue(221)", "Delete SimpleName: otherValue(222)", "Delete InfixExpression: ^(223)", "Delete VariableDeclarationFragment(224)", "Delete VariableDeclarationStatement(225)", "Delete PrimitiveType: int(226)", "Delete SimpleName: i(227)", "Delete NumberLiteral: 0(228)", "Delete VariableDeclarationFragment(229)", "Delete VariableDeclarationExpression(230)", "Delete SimpleName: i(231)", "Delete SimpleName: LENGTH(232)", "Delete InfixExpression: <(233)", "Delete SimpleName: i(234)", "Delete PostfixExpression: ++(235)", "Delete SimpleName: xorValue(236)", "Delete SimpleName: mask(237)", "Delete SimpleName: i(238)", "Delete MethodInvocation(239)", "Delete InfixExpression: &(240)", "Delete ParenthesizedExpression(241)", "Delete NumberLiteral: 0L(242)", "Delete InfixExpression: !=(243)", "Delete SimpleName: i(244)", "Delete ReturnStatement(245)", "Delete Block(246)", "Delete IfStatement(247)", "Delete Block(248)", "Delete ForStatement(249)", "Delete Block(250)", "Delete IfStatement(251)", "Delete QualifiedName: KeyAnalyzer.EQUAL_BIT_KEY(252)", "Delete ReturnStatement(253)", "Delete Block(254)", "Delete MethodDeclaration(255)", "Delete Modifier: public(256)", "Delete PrimitiveType: boolean(257)", "Delete SimpleName: isPrefix(258)", "Delete Modifier: final(259)", "Delete SimpleName: Long(260)", "Delete SimpleType: Long(261)", "Delete SimpleName: prefix(262)", "Delete SingleVariableDeclaration(263)", "Delete Modifier: final(264)", "Delete PrimitiveType: int(265)", "Delete SimpleName: offsetInBits(266)", "Delete SingleVariableDeclaration(267)", "Delete Modifier: final(268)", "Delete PrimitiveType: int(269)", "Delete SimpleName: lengthInBits(270)", "Delete SingleVariableDeclaration(271)", "Delete Modifier: final(272)", "Delete SimpleName: Long(273)", "Delete SimpleType: Long(274)", "Delete SimpleName: key(275)", "Delete SingleVariableDeclaration(276)", "Delete Modifier: final(277)", "Delete PrimitiveType: long(278)", "Delete SimpleName: value1(279)", "Delete SimpleName: prefix(280)", "Delete SimpleName: longValue(281)", "Delete MethodInvocation(282)", "Delete SimpleName: offsetInBits(283)", "Delete InfixExpression: <<(284)", "Delete VariableDeclarationFragment(285)", "Delete VariableDeclarationStatement(286)", "Delete Modifier: final(287)", "Delete PrimitiveType: long(288)", "Delete SimpleName: value2(289)", "Delete SimpleName: key(290)", "Delete SimpleName: longValue(291)", "Delete MethodInvocation(292)", "Delete VariableDeclarationFragment(293)", "Delete VariableDeclarationStatement(294)", "Delete PrimitiveType: long(295)", "Delete SimpleName: mask(296)", "Delete NumberLiteral: 0L(297)", "Delete VariableDeclarationFragment(298)", "Delete VariableDeclarationStatement(299)", "Delete PrimitiveType: int(300)", "Delete SimpleName: i(301)", "Delete NumberLiteral: 0(302)", "Delete VariableDeclarationFragment(303)", "Delete VariableDeclarationExpression(304)", "Delete SimpleName: i(305)", "Delete SimpleName: lengthInBits(306)", "Delete InfixExpression: <(307)", "Delete SimpleName: i(308)", "Delete PostfixExpression: ++(309)", "Delete SimpleName: mask(310)", "Delete NumberLiteral: 0x1L(311)", "Delete SimpleName: i(312)", "Delete InfixExpression: <<(313)", "Delete Assignment: |=(314)", "Delete ExpressionStatement(315)", "Delete Block(316)", "Delete ForStatement(317)", "Delete SimpleName: value1(318)", "Delete SimpleName: mask(319)", "Delete InfixExpression: &(320)", "Delete ParenthesizedExpression(321)", "Delete SimpleName: value2(322)", "Delete SimpleName: mask(323)", "Delete InfixExpression: &(324)", "Delete ParenthesizedExpression(325)", "Delete InfixExpression: ==(326)", "Delete ReturnStatement(327)", "Delete Block(328)", "Delete MethodDeclaration(329)", "Delete TypeDeclaration: class(330)"]}}, {"ShortKeyAnalyzer_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.collections4.trie.analyzer", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.collections4.trie.KeyAnalyzer"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Block", "DEL SimpleName: isPrefix", "DEL Block", "DEL Modifier: final", "DEL SimpleName: value1", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleType: Short", "DEL Modifier: final", "DEL Block", "DEL ParenthesizedExpression", "DEL Javadoc", "DEL Block", "DEL VariableDeclarationFragment", "DEL TypeDeclaration: class", "DEL SimpleName: other", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: ShortKeyAnalyzer", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL IfStatement", "DEL Javadoc", "DEL NumberLiteral: 0", "DEL MethodDeclaration", "DEL SimpleName: o2", "DEL SingleVariableDeclaration", "DEL SimpleType: Short", "DEL InfixExpression: ==", "DEL TagElement", "DEL TagElement", "DEL SimpleName: shortValue", "DEL SimpleName: offsetInBits", "DEL Block", "DEL PrimitiveType: int", "DEL SimpleName: Short", "DEL QualifiedName: KeyAnalyzer.EQUAL_BIT_KEY", "DEL Modifier: private", "DEL Block", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL TextElement:  4.0", "DEL Modifier: public", "DEL NumberLiteral: 0x1", "DEL PostfixExpression: ++", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: shortValue", "DEL NullLiteral", "DEL SimpleName: other", "DEL PrimitiveType: int", "DEL InfixExpression: !=", "DEL SimpleName: otherValue", "DEL SimpleName: MSB", "DEL ReturnStatement", "DEL Modifier: final", "DEL ClassInstanceCreation", "DEL SimpleName: key", "DEL SimpleName: Short", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: MSB", "DEL SimpleName: mask", "DEL SimpleName: prefix", "DEL Block", "DEL SimpleName: key", "DEL Modifier: final", "DEL Modifier: static", "DEL SimpleName: Short", "DEL Modifier: final", "DEL Javadoc", "DEL MarkerAnnotation", "DEL SimpleName: offsetInBits", "DEL TagElement: @link", "DEL SimpleName: shortValue", "DEL Modifier: public", "DEL Modifier: final", "DEL IfStatement", "DEL InfixExpression: !=", "DEL Modifier: final", "DEL Modifier: public", "DEL InfixExpression: <<", "DEL SimpleName: Short", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL TextElement: . ", "DEL PrimitiveType: int", "DEL Assignment: |=", "DEL SimpleName: bitsPerElement", "DEL ReturnStatement", "DEL SimpleName: intValue", "DEL ParenthesizedExpression", "DEL SimpleName: bitIndex", "DEL SimpleName: o1", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: KeyAnalyzer", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL SimpleType: KeyAnalyzer", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL TextElement:  $Id$", "DEL SimpleName: compareTo", "DEL Modifier: final", "DEL PrimitiveType: long", "DEL InfixExpression: &", "DEL VariableDeclarationFragment", "DEL SimpleName: LENGTH", "DEL TextElement:  for ", "DEL TextElement: A bit mask where the first bit is 1 and the others are zero. ", "DEL Block", "DEL InfixExpression: ^", "DEL NumberLiteral: 0", "DEL Modifier: final", "DEL FieldDeclaration", "DEL TextElement: s.", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: ShortKeyAnalyzer", "DEL PrimitiveType: int", "DEL SimpleName: Short", "DEL Modifier: private", "DEL SimpleName: Short", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL SimpleName: offsetInBits", "DEL SimpleType: Short", "DEL SimpleName: Short", "DEL NumberLiteral: 0", "DEL VariableDeclarationExpression", "DEL VariableDeclarationExpression", "DEL ReturnStatement", "DEL NumberLiteral: 0x8000", "DEL SimpleType: ShortKeyAnalyzer", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SimpleType: IllegalArgumentException", "DEL MethodInvocation", "DEL SimpleName: keyValue", "DEL SimpleName: lengthInBits", "DEL SimpleName: key", "DEL SimpleName: Override", "DEL SimpleName: ShortKeyAnalyzer", "DEL SimpleName: lengthInBits", "DEL InfixExpression: !=", "DEL NumberLiteral: 1", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: keyValue", "DEL MethodInvocation", "DEL Modifier: public", "DEL Block", "DEL SimpleName: LENGTH", "DEL Modifier: final", "DEL NumberLiteral: 0", "DEL VariableDeclarationFragment", "DEL SimpleName: prefix", "DEL SimpleName: i", "DEL InfixExpression: !=", "DEL PrimitiveType: int", "DEL SimpleName: Short", "DEL Modifier: final", "DEL SimpleName: otherValue", "DEL ParenthesizedExpression", "DEL SimpleName: offsetInBits", "DEL SimpleName: keyValue", "DEL SimpleName: i", "DEL SingleVariableDeclaration", "DEL InfixExpression: !=", "DEL SingleVariableDeclaration", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: otherLengthInBits", "DEL SimpleName: value2", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL IfStatement", "DEL SimpleType: Short", "DEL SimpleType: Short", "DEL VariableDeclarationFragment", "DEL SimpleName: Short", "DEL SingleVariableDeclaration", "DEL PrefixExpression: -", "DEL PrimitiveType: boolean", "DEL SimpleType: Short", "DEL ParenthesizedExpression", "DEL MethodDeclaration", "DEL NumberLiteral: 0", "DEL SimpleName: i", "DEL SimpleName: key", "DEL SimpleName: mask", "DEL TagElement: @link", "DEL Modifier: public", "DEL Modifier: static", "DEL PrimitiveType: int", "DEL TagElement: @since", "DEL TagElement", "DEL Modifier: final", "DEL NumberLiteral: 0", "DEL SimpleName: xorValue", "DEL TagElement: @link", "DEL SimpleName: bit", "DEL SimpleType: Short", "DEL ThrowStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: compare", "DEL SimpleName: otherOffsetInBits", "DEL MethodInvocation", "DEL SimpleName: value2", "DEL SimpleName: shortValue", "DEL VariableDeclarationStatement", "DEL SimpleName: o2", "DEL SimpleName: bit", "DEL SimpleName: i", "DEL TextElement:  in bits. ", "DEL SimpleName: i", "DEL ReturnStatement", "DEL InfixExpression: &", "DEL Javadoc", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL SimpleType: Short", "DEL SimpleName: KeyAnalyzer", "DEL Modifier: public", "DEL SimpleName: bitIndex", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 8631376733513512017L", "DEL TagElement: @link", "DEL InfixExpression: ==", "DEL SingleVariableDeclaration", "DEL SimpleName: lengthInBits", "DEL SimpleName: LENGTH", "DEL InfixExpression: +", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL ReturnStatement", "DEL InfixExpression: <", "DEL Javadoc", "DEL InfixExpression: &", "DEL PrimitiveType: int", "DEL ForStatement", "DEL SimpleName: i", "DEL NumberLiteral: 0", "DEL PrimitiveType: int", "DEL SimpleType: Short", "DEL SimpleName: key", "DEL IfStatement", "DEL FieldDeclaration", "DEL PostfixExpression: ++", "DEL TextElement: A ", "DEL SimpleName: otherOffsetInBits", "DEL SimpleName: i", "DEL MethodDeclaration", "DEL TextElement: A singleton instance of ", "DEL SimpleName: ShortKeyAnalyzer", "DEL SimpleName: key", "DEL Modifier: final", "DEL SimpleName: xorValue", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: NULL_BIT_KEY", "DEL SimpleName: i", "DEL InfixExpression: >>>", "DEL ConditionalExpression", "DEL SimpleName: other", "DEL FieldDeclaration", "DEL SimpleName: isBitSet", "DEL PrimitiveType: int", "DEL ClassInstanceCreation", "DEL InfixExpression: <", "DEL VariableDeclarationFragment", "DEL SimpleName: Short", "DEL SimpleName: mask", "DEL ReturnStatement", "DEL PrimitiveType: int", "DEL Modifier: private", "DEL InfixExpression: <<", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL TextElement: The length of an ", "DEL StringLiteral: \", otherOffsetInBits=\"", "DEL TagElement", "DEL SimpleName: key", "DEL MethodInvocation", "DEL InfixExpression: &", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL Modifier: static", "DEL SimpleName: mask", "DEL SimpleName: keyValue", "DEL SimpleName: Short", "DEL FieldDeclaration", "DEL SimpleName: value1", "DEL SimpleName: otherOffsetInBits", "DEL PrimitiveType: int", "DEL StringLiteral: \"offsetInBits=\"", "DEL MethodInvocation", "DEL SimpleName: lengthInBits", "DEL Modifier: final", "DEL ReturnStatement", "DEL SimpleName: mask", "DEL SimpleName: bitIndex", "DEL Modifier: final", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: i", "DEL Modifier: final", "DEL Modifier: final", "DEL TagElement: @version", "DEL SimpleName: lengthInBits", "DEL PrimitiveType: boolean", "DEL TextElement: Returns a bit mask where the given bit is set. ", "DEL SimpleName: ShortKeyAnalyzer", "DEL Modifier: final", "DEL InfixExpression: ||", "DEL PrimitiveType: int", "DEL Block", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL SimpleName: INSTANCE", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: o1", "DEL Modifier: public", "DEL SimpleName: otherValue", "DEL Block", "DEL SimpleName: mask", "DEL PrimitiveType: int", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: mask", "DEL ParameterizedType: KeyAnalyzer<Short>", "DEL VariableDeclarationFragment", "DEL ForStatement", "DEL Block", "DEL QualifiedName: Short.SIZE", "DEL SimpleName: offsetInBits", "DEL SimpleName: serialVersionUID", "DEL Block", "DEL NumberLiteral: 0"]}]}}, {"ShortKeyAnalyzer_diff": {"operations": ["Delete QualifiedName: org.apache.commons.collections4.trie.analyzer(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.apache.commons.collections4.trie.KeyAnalyzer(2)", "Delete ImportDeclaration(3)", "Delete TextElement: A (4)", "Delete SimpleName: KeyAnalyzer(5)", "Delete TagElement: @link(6)", "Delete TextElement:  for (7)", "Delete SimpleName: Short(8)", "Delete TagElement: @link(9)", "Delete TextElement: s.(10)", "Delete TagElement(11)", "Delete TextElement:  4.0(12)", "Delete TagElement: @since(13)", "Delete TextElement:  $Id$(14)", "Delete TagElement: @version(15)", "Delete Javadoc(16)", "Delete Modifier: public(17)", "Delete SimpleName: ShortKeyAnalyzer(18)", "Delete SimpleName: KeyAnalyzer(19)", "Delete SimpleType: KeyAnalyzer(20)", "Delete SimpleName: Short(21)", "Delete SimpleType: Short(22)", "Delete ParameterizedType: KeyAnalyzer<Short>(23)", "Delete Modifier: private(24)", "Delete Modifier: static(25)", "Delete Modifier: final(26)", "Delete PrimitiveType: long(27)", "Delete SimpleName: serialVersionUID(28)", "Delete NumberLiteral: 8631376733513512017L(29)", "Delete PrefixExpression: -(30)", "Delete VariableDeclarationFragment(31)", "Delete FieldDeclaration(32)", "Delete TextElement: A singleton instance of (33)", "Delete SimpleName: ShortKeyAnalyzer(34)", "Delete TagElement: @link(35)", "Delete TextElement: . (36)", "Delete TagElement(37)", "Delete Javadoc(38)", "Delete Modifier: public(39)", "Delete Modifier: static(40)", "Delete Modifier: final(41)", "Delete SimpleName: ShortKeyAnalyzer(42)", "Delete SimpleType: ShortKeyAnalyzer(43)", "Delete SimpleName: INSTANCE(44)", "Delete SimpleName: ShortKeyAnalyzer(45)", "Delete SimpleType: ShortKeyAnalyzer(46)", "Delete ClassInstanceCreation(47)", "Delete VariableDeclarationFragment(48)", "Delete FieldDeclaration(49)", "Delete TextElement: The length of an (50)", "Delete SimpleName: Short(51)", "Delete TagElement: @link(52)", "Delete TextElement:  in bits. (53)", "Delete TagElement(54)", "Delete Javadoc(55)", "Delete Modifier: public(56)", "Delete Modifier: static(57)", "Delete Modifier: final(58)", "Delete PrimitiveType: int(59)", "Delete SimpleName: LENGTH(60)", "Delete QualifiedName: Short.SIZE(61)", "Delete VariableDeclarationFragment(62)", "Delete FieldDeclaration(63)", "Delete TextElement: A bit mask where the first bit is 1 and the others are zero. (64)", "Delete TagElement(65)", "Delete Javadoc(66)", "Delete Modifier: private(67)", "Delete Modifier: static(68)", "Delete Modifier: final(69)", "Delete PrimitiveType: int(70)", "Delete SimpleName: MSB(71)", "Delete NumberLiteral: 0x8000(72)", "Delete VariableDeclarationFragment(73)", "Delete FieldDeclaration(74)", "Delete TextElement: Returns a bit mask where the given bit is set. (75)", "Delete TagElement(76)", "Delete Javadoc(77)", "Delete Modifier: private(78)", "Delete Modifier: static(79)", "Delete PrimitiveType: int(80)", "Delete SimpleName: mask(81)", "Delete Modifier: final(82)", "Delete PrimitiveType: int(83)", "Delete SimpleName: bit(84)", "Delete SingleVariableDeclaration(85)", "Delete SimpleName: MSB(86)", "Delete SimpleName: bit(87)", "Delete InfixExpression: >>>(88)", "Delete ReturnStatement(89)", "Delete Block(90)", "Delete MethodDeclaration(91)", "Delete Modifier: public(92)", "Delete PrimitiveType: int(93)", "Delete SimpleName: bitsPerElement(94)", "Delete NumberLiteral: 1(95)", "Delete ReturnStatement(96)", "Delete Block(97)", "Delete MethodDeclaration(98)", "Delete Modifier: public(99)", "Delete PrimitiveType: int(100)", "Delete SimpleName: lengthInBits(101)", "Delete Modifier: final(102)", "Delete SimpleName: Short(103)", "Delete SimpleType: Short(104)", "Delete SimpleName: key(105)", "Delete SingleVariableDeclaration(106)", "Delete SimpleName: LENGTH(107)", "Delete ReturnStatement(108)", "Delete Block(109)", "Delete MethodDeclaration(110)", "Delete Modifier: public(111)", "Delete PrimitiveType: boolean(112)", "Delete SimpleName: isBitSet(113)", "Delete Modifier: final(114)", "Delete SimpleName: Short(115)", "Delete SimpleType: Short(116)", "Delete SimpleName: key(117)", "Delete SingleVariableDeclaration(118)", "Delete Modifier: final(119)", "Delete PrimitiveType: int(120)", "Delete SimpleName: bitIndex(121)", "Delete SingleVariableDeclaration(122)", "Delete Modifier: final(123)", "Delete PrimitiveType: int(124)", "Delete SimpleName: lengthInBits(125)", "Delete SingleVariableDeclaration(126)", "Delete SimpleName: key(127)", "Delete SimpleName: intValue(128)", "Delete MethodInvocation(129)", "Delete SimpleName: mask(130)", "Delete SimpleName: bitIndex(131)", "Delete MethodInvocation(132)", "Delete InfixExpression: &(133)", "Delete ParenthesizedExpression(134)", "Delete NumberLiteral: 0(135)", "Delete InfixExpression: !=(136)", "Delete ReturnStatement(137)", "Delete Block(138)", "Delete MethodDeclaration(139)", "Delete Modifier: public(140)", "Delete PrimitiveType: int(141)", "Delete SimpleName: bitIndex(142)", "Delete Modifier: final(143)", "Delete SimpleName: Short(144)", "Delete SimpleType: Short(145)", "Delete SimpleName: key(146)", "Delete SingleVariableDeclaration(147)", "Delete Modifier: final(148)", "Delete PrimitiveType: int(149)", "Delete SimpleName: offsetInBits(150)", "Delete SingleVariableDeclaration(151)", "Delete Modifier: final(152)", "Delete PrimitiveType: int(153)", "Delete SimpleName: lengthInBits(154)", "Delete SingleVariableDeclaration(155)", "Delete Modifier: final(156)", "Delete SimpleName: Short(157)", "Delete SimpleType: Short(158)", "Delete SimpleName: other(159)", "Delete SingleVariableDeclaration(160)", "Delete Modifier: final(161)", "Delete PrimitiveType: int(162)", "Delete SimpleName: otherOffsetInBits(163)", "Delete SingleVariableDeclaration(164)", "Delete Modifier: final(165)", "Delete PrimitiveType: int(166)", "Delete SimpleName: otherLengthInBits(167)", "Delete SingleVariableDeclaration(168)", "Delete SimpleName: offsetInBits(169)", "Delete NumberLiteral: 0(170)", "Delete InfixExpression: !=(171)", "Delete SimpleName: otherOffsetInBits(172)", "Delete NumberLiteral: 0(173)", "Delete InfixExpression: !=(174)", "Delete InfixExpression: ||(175)", "Delete SimpleName: IllegalArgumentException(176)", "Delete SimpleType: IllegalArgumentException(177)", "Delete StringLiteral: \"offsetInBits=\"(178)", "Delete SimpleName: offsetInBits(179)", "Delete StringLiteral: \", otherOffsetInBits=\"(180)", "Delete SimpleName: otherOffsetInBits(181)", "Delete InfixExpression: +(182)", "Delete ClassInstanceCreation(183)", "Delete ThrowStatement(184)", "Delete Block(185)", "Delete IfStatement(186)", "Delete Modifier: final(187)", "Delete PrimitiveType: int(188)", "Delete SimpleName: keyValue(189)", "Delete SimpleName: key(190)", "Delete SimpleName: shortValue(191)", "Delete MethodInvocation(192)", "Delete VariableDeclarationFragment(193)", "Delete VariableDeclarationStatement(194)", "Delete SimpleName: keyValue(195)", "Delete NumberLiteral: 0(196)", "Delete InfixExpression: ==(197)", "Delete SimpleName: NULL_BIT_KEY(198)", "Delete ReturnStatement(199)", "Delete Block(200)", "Delete IfStatement(201)", "Delete Modifier: final(202)", "Delete PrimitiveType: int(203)", "Delete SimpleName: otherValue(204)", "Delete SimpleName: other(205)", "Delete NullLiteral(206)", "Delete InfixExpression: !=(207)", "Delete SimpleName: other(208)", "Delete SimpleName: shortValue(209)", "Delete MethodInvocation(210)", "Delete NumberLiteral: 0(211)", "Delete ConditionalExpression(212)", "Delete VariableDeclarationFragment(213)", "Delete VariableDeclarationStatement(214)", "Delete SimpleName: keyValue(215)", "Delete SimpleName: otherValue(216)", "Delete InfixExpression: !=(217)", "Delete Modifier: final(218)", "Delete PrimitiveType: int(219)", "Delete SimpleName: xorValue(220)", "Delete SimpleName: keyValue(221)", "Delete SimpleName: otherValue(222)", "Delete InfixExpression: ^(223)", "Delete VariableDeclarationFragment(224)", "Delete VariableDeclarationStatement(225)", "Delete PrimitiveType: int(226)", "Delete SimpleName: i(227)", "Delete NumberLiteral: 0(228)", "Delete VariableDeclarationFragment(229)", "Delete VariableDeclarationExpression(230)", "Delete SimpleName: i(231)", "Delete SimpleName: LENGTH(232)", "Delete InfixExpression: <(233)", "Delete SimpleName: i(234)", "Delete PostfixExpression: ++(235)", "Delete SimpleName: xorValue(236)", "Delete SimpleName: mask(237)", "Delete SimpleName: i(238)", "Delete MethodInvocation(239)", "Delete InfixExpression: &(240)", "Delete ParenthesizedExpression(241)", "Delete NumberLiteral: 0(242)", "Delete InfixExpression: !=(243)", "Delete SimpleName: i(244)", "Delete ReturnStatement(245)", "Delete Block(246)", "Delete IfStatement(247)", "Delete Block(248)", "Delete ForStatement(249)", "Delete Block(250)", "Delete IfStatement(251)", "Delete QualifiedName: KeyAnalyzer.EQUAL_BIT_KEY(252)", "Delete ReturnStatement(253)", "Delete Block(254)", "Delete MethodDeclaration(255)", "Delete Modifier: public(256)", "Delete PrimitiveType: boolean(257)", "Delete SimpleName: isPrefix(258)", "Delete Modifier: final(259)", "Delete SimpleName: Short(260)", "Delete SimpleType: Short(261)", "Delete SimpleName: prefix(262)", "Delete SingleVariableDeclaration(263)", "Delete Modifier: final(264)", "Delete PrimitiveType: int(265)", "Delete SimpleName: offsetInBits(266)", "Delete SingleVariableDeclaration(267)", "Delete Modifier: final(268)", "Delete PrimitiveType: int(269)", "Delete SimpleName: lengthInBits(270)", "Delete SingleVariableDeclaration(271)", "Delete Modifier: final(272)", "Delete SimpleName: Short(273)", "Delete SimpleType: Short(274)", "Delete SimpleName: key(275)", "Delete SingleVariableDeclaration(276)", "Delete Modifier: final(277)", "Delete PrimitiveType: int(278)", "Delete SimpleName: value1(279)", "Delete SimpleName: prefix(280)", "Delete SimpleName: shortValue(281)", "Delete MethodInvocation(282)", "Delete SimpleName: offsetInBits(283)", "Delete InfixExpression: <<(284)", "Delete VariableDeclarationFragment(285)", "Delete VariableDeclarationStatement(286)", "Delete Modifier: final(287)", "Delete PrimitiveType: int(288)", "Delete SimpleName: value2(289)", "Delete SimpleName: key(290)", "Delete SimpleName: shortValue(291)", "Delete MethodInvocation(292)", "Delete VariableDeclarationFragment(293)", "Delete VariableDeclarationStatement(294)", "Delete PrimitiveType: int(295)", "Delete SimpleName: mask(296)", "Delete NumberLiteral: 0(297)", "Delete VariableDeclarationFragment(298)", "Delete VariableDeclarationStatement(299)", "Delete PrimitiveType: int(300)", "Delete SimpleName: i(301)", "Delete NumberLiteral: 0(302)", "Delete VariableDeclarationFragment(303)", "Delete VariableDeclarationExpression(304)", "Delete SimpleName: i(305)", "Delete SimpleName: lengthInBits(306)", "Delete InfixExpression: <(307)", "Delete SimpleName: i(308)", "Delete PostfixExpression: ++(309)", "Delete SimpleName: mask(310)", "Delete NumberLiteral: 0x1(311)", "Delete SimpleName: i(312)", "Delete InfixExpression: <<(313)", "Delete Assignment: |=(314)", "Delete ExpressionStatement(315)", "Delete Block(316)", "Delete ForStatement(317)", "Delete SimpleName: value1(318)", "Delete SimpleName: mask(319)", "Delete InfixExpression: &(320)", "Delete ParenthesizedExpression(321)", "Delete SimpleName: value2(322)", "Delete SimpleName: mask(323)", "Delete InfixExpression: &(324)", "Delete ParenthesizedExpression(325)", "Delete InfixExpression: ==(326)", "Delete ReturnStatement(327)", "Delete Block(328)", "Delete MethodDeclaration(329)", "Delete SimpleName: Override(330)", "Delete MarkerAnnotation(331)", "Delete Modifier: public(332)", "Delete PrimitiveType: int(333)", "Delete SimpleName: compare(334)", "Delete Modifier: final(335)", "Delete SimpleName: Short(336)", "Delete SimpleType: Short(337)", "Delete SimpleName: o1(338)", "Delete SingleVariableDeclaration(339)", "Delete Modifier: final(340)", "Delete SimpleName: Short(341)", "Delete SimpleType: Short(342)", "Delete SimpleName: o2(343)", "Delete SingleVariableDeclaration(344)", "Delete SimpleName: o1(345)", "Delete SimpleName: compareTo(346)", "Delete SimpleName: o2(347)", "Delete MethodInvocation(348)", "Delete ReturnStatement(349)", "Delete Block(350)", "Delete MethodDeclaration(351)", "Delete TypeDeclaration: class(352)"]}}], "commit_stats": [{"total_files": 21, "deleted_files": 9, "testing": "True", "maintenance": "False", "build": "False"}]}