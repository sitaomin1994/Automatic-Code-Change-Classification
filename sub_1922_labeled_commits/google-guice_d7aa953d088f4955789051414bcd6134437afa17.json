{"application": "google-guice", "csha": "d7aa953d088f4955789051414bcd6134437afa17", "files": [{"Scopes_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 4"]}, {"root": "UPDATE from com.google.inject.internal.InternalInjectorCreator to com.google.inject.internal.SingletonScope", "operations": ["UPD QualifiedName: com.google.inject.internal.InternalInjectorCreator from com.google.inject.internal.InternalInjectorCreator to com.google.inject.internal.SingletonScope"]}, {"root": "UPDATE from Scope to SingletonScope", "operations": ["UPD SimpleType: Scope from Scope to SingletonScope", "UPD SimpleName: Scope from Scope to SingletonScope"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: Object", "DEL Modifier: private", "DEL SimpleType: Object", "DEL TextElement: A sentinel value representing null. ", "DEL SimpleName: Object", "DEL SimpleName: NULL", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL FieldDeclaration", "DEL Modifier: final", "DEL Modifier: static", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL SimpleType: Object"]}, {"root": "DEL AnonymousClassDeclaration", "operations": ["DEL SimpleType: Provider", "DEL SimpleName: SuppressWarnings", "DEL SimpleType: T", "DEL Modifier: volatile", "DEL VariableDeclarationStatement", "DEL SimpleType: T", "DEL SimpleName: returnedInstance", "DEL StringLiteral: \"unchecked\"", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SimpleType: Object", "DEL MarkerAnnotation", "DEL SimpleName: NULL", "DEL SimpleName: providedOrSentinel", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleName: String", "DEL InfixExpression: !=", "DEL Modifier: public", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: T", "DEL ParameterizedType: Provider<T>", "DEL MethodDeclaration", "DEL SimpleName: provided", "DEL FieldDeclaration", "DEL SimpleType: Object", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL Modifier: final", "DEL StringLiteral: \"Provider was reentrant while creating a singleton\"", "DEL SimpleName: provided", "DEL Block", "DEL SimpleName: Override", "DEL SimpleName: provided", "DEL Block", "DEL VariableDeclarationFragment", "DEL ConditionalExpression", "DEL NullLiteral", "DEL SimpleName: key", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: format", "DEL ParameterizedType: Provider<T>", "DEL SimpleName: provided", "DEL StringLiteral: \"%s[%s]\"", "DEL SimpleName: creator", "DEL Modifier: final", "DEL SimpleName: T", "DEL ClassInstanceCreation", "DEL InfixExpression: !=", "DEL ConditionalExpression", "DEL ReturnStatement", "DEL SimpleName: providedOrSentinel", "DEL SimpleName: creator", "DEL SimpleName: T", "DEL StringLiteral: \"DoubleCheckedLocking\"", "DEL IfStatement", "DEL SimpleName: SuppressWarnings", "DEL SimpleName: localInstance", "DEL ExpressionStatement", "DEL SimpleName: T", "DEL SimpleType: T", "DEL AnonymousClassDeclaration", "DEL SimpleName: T", "DEL SimpleName: Provider", "DEL SimpleType: Object", "DEL CastExpression", "DEL SimpleName: SINGLETON", "DEL SimpleName: providedOrSentinel", "DEL SimpleType: ProvisionException", "DEL MethodDeclaration", "DEL SimpleName: instance", "DEL SimpleType: T", "DEL SimpleName: instance", "DEL InfixExpression: !=", "DEL Block", "DEL SimpleName: localInstance", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL ReturnStatement", "DEL Block", "DEL NullLiteral", "DEL SimpleName: Object", "DEL SimpleName: T", "DEL SingleVariableDeclaration", "DEL SimpleName: creator", "DEL SimpleName: isCircularProxy", "DEL SimpleType: Key", "DEL SimpleName: get", "DEL SimpleName: instance", "DEL IfStatement", "DEL SimpleName: toString", "DEL SimpleName: localInstance", "DEL InfixExpression: &&", "DEL SimpleType: InternalInjectorCreator", "DEL SimpleName: T", "DEL ThrowStatement", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: Key", "DEL AnonymousClassDeclaration", "DEL ParenthesizedExpression", "DEL TypeParameter", "DEL IfStatement", "DEL Block", "DEL SingleMemberAnnotation", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SynchronizedStatement", "DEL Block", "DEL SimpleName: toString", "DEL SimpleType: T", "DEL VariableDeclarationFragment", "DEL SimpleName: get", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: NULL", "DEL SimpleName: T", "DEL SimpleName: provided", "DEL VariableDeclarationFragment", "DEL SimpleType: T", "DEL InfixExpression: ==", "DEL SimpleName: String", "DEL NullLiteral", "DEL SimpleType: T", "DEL InfixExpression: ==", "DEL SimpleType: T", "DEL SimpleName: Override", "DEL SimpleName: InternalInjectorCreator", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL MethodInvocation", "DEL StringLiteral: \"Scopes.SINGLETON\"", "DEL ParenthesizedExpression", "DEL ParameterizedType: Key<T>", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL TypeLiteral", "DEL NullLiteral", "DEL Modifier: private", "DEL SimpleName: returnedInstance", "DEL SimpleName: instance", "DEL Block", "DEL SimpleType: String", "DEL SimpleName: instance", "DEL MarkerAnnotation", "DEL SimpleName: ProvisionException", "DEL SimpleName: Object", "DEL SimpleName: Provider", "DEL SimpleName: String", "DEL SimpleType: Provider", "DEL IfStatement", "DEL SimpleName: scope", "DEL SimpleName: T", "DEL MethodDeclaration", "DEL SingleMemberAnnotation", "DEL NullLiteral", "DEL ParameterizedType: Provider<T>", "DEL SimpleName: instance", "DEL SimpleName: instance", "DEL SimpleType: Provider", "DEL SimpleName: Provider"]}]}}, {"Scopes_diff": {"operations": ["Move ImportDeclaration(17) into CompilationUnit(560) at 4", "Update QualifiedName: com.google.inject.internal.InternalInjectorCreator(16) to com.google.inject.internal.SingletonScope", "Update SimpleType: Scope(69) to SingletonScope", "Update SimpleName: Scope(68) to SingletonScope", "Delete TextElement: A sentinel value representing null. (37)", "Delete TagElement(38)", "Delete Javadoc(39)", "Delete Modifier: private(40)", "Delete Modifier: static(41)", "Delete Modifier: final(42)", "Delete SimpleName: Object(43)", "Delete SimpleType: Object(44)", "Delete SimpleName: NULL(45)", "Delete SimpleName: Object(46)", "Delete SimpleType: Object(47)", "Delete ClassInstanceCreation(48)", "Delete VariableDeclarationFragment(49)", "Delete FieldDeclaration(50)", "Delete Modifier: public(70)", "Delete SimpleName: T(71)", "Delete TypeParameter(72)", "Delete SimpleName: Provider(73)", "Delete SimpleType: Provider(74)", "Delete SimpleName: T(75)", "Delete SimpleType: T(76)", "Delete ParameterizedType: Provider<T>(77)", "Delete SimpleName: scope(78)", "Delete Modifier: final(79)", "Delete SimpleName: Key(80)", "Delete SimpleType: Key(81)", "Delete SimpleName: T(82)", "Delete SimpleType: T(83)", "Delete ParameterizedType: Key<T>(84)", "Delete SimpleName: key(85)", "Delete SingleVariableDeclaration(86)", "Delete Modifier: final(87)", "Delete SimpleName: Provider(88)", "Delete SimpleType: Provider(89)", "Delete SimpleName: T(90)", "Delete SimpleType: T(91)", "Delete ParameterizedType: Provider<T>(92)", "Delete SimpleName: creator(93)", "Delete SingleVariableDeclaration(94)", "Delete SimpleName: Provider(95)", "Delete SimpleType: Provider(96)", "Delete SimpleName: T(97)", "Delete SimpleType: T(98)", "Delete ParameterizedType: Provider<T>(99)", "Delete Modifier: private(100)", "Delete Modifier: volatile(101)", "Delete SimpleName: Object(102)", "Delete SimpleType: Object(103)", "Delete SimpleName: instance(104)", "Delete VariableDeclarationFragment(105)", "Delete FieldDeclaration(106)", "Delete SimpleName: SuppressWarnings(107)", "Delete StringLiteral: \"DoubleCheckedLocking\"(108)", "Delete SingleMemberAnnotation(109)", "Delete Modifier: public(110)", "Delete SimpleName: T(111)", "Delete SimpleType: T(112)", "Delete SimpleName: get(113)", "Delete SimpleName: instance(114)", "Delete NullLiteral(115)", "Delete InfixExpression: ==(116)", "Delete SimpleName: InternalInjectorCreator(117)", "Delete SimpleType: InternalInjectorCreator(118)", "Delete TypeLiteral(119)", "Delete SimpleName: instance(120)", "Delete NullLiteral(121)", "Delete InfixExpression: ==(122)", "Delete SimpleName: T(123)", "Delete SimpleType: T(124)", "Delete SimpleName: provided(125)", "Delete SimpleName: creator(126)", "Delete SimpleName: get(127)", "Delete MethodInvocation(128)", "Delete VariableDeclarationFragment(129)", "Delete VariableDeclarationStatement(130)", "Delete SimpleName: isCircularProxy(131)", "Delete SimpleName: provided(132)", "Delete MethodInvocation(133)", "Delete SimpleName: provided(134)", "Delete ReturnStatement(135)", "Delete Block(136)", "Delete IfStatement(137)", "Delete SimpleName: Object(138)", "Delete SimpleType: Object(139)", "Delete SimpleName: providedOrSentinel(140)", "Delete SimpleName: provided(141)", "Delete NullLiteral(142)", "Delete InfixExpression: ==(143)", "Delete ParenthesizedExpression(144)", "Delete SimpleName: NULL(145)", "Delete SimpleName: provided(146)", "Delete ConditionalExpression(147)", "Delete VariableDeclarationFragment(148)", "Delete VariableDeclarationStatement(149)", "Delete SimpleName: instance(150)", "Delete NullLiteral(151)", "Delete InfixExpression: !=(152)", "Delete SimpleName: instance(153)", "Delete SimpleName: providedOrSentinel(154)", "Delete InfixExpression: !=(155)", "Delete InfixExpression: &&(156)", "Delete SimpleName: ProvisionException(157)", "Delete SimpleType: ProvisionException(158)", "Delete StringLiteral: \"Provider was reentrant while creating a singleton\"(159)", "Delete ClassInstanceCreation(160)", "Delete ThrowStatement(161)", "Delete Block(162)", "Delete IfStatement(163)", "Delete SimpleName: instance(164)", "Delete SimpleName: providedOrSentinel(165)", "Delete Assignment: =(166)", "Delete ExpressionStatement(167)", "Delete Block(168)", "Delete IfStatement(169)", "Delete Block(170)", "Delete SynchronizedStatement(171)", "Delete Block(172)", "Delete IfStatement(173)", "Delete SimpleName: Object(174)", "Delete SimpleType: Object(175)", "Delete SimpleName: localInstance(176)", "Delete SimpleName: instance(177)", "Delete VariableDeclarationFragment(178)", "Delete VariableDeclarationStatement(179)", "Delete SimpleName: SuppressWarnings(180)", "Delete StringLiteral: \"unchecked\"(181)", "Delete SingleMemberAnnotation(182)", "Delete SimpleName: T(183)", "Delete SimpleType: T(184)", "Delete SimpleName: returnedInstance(185)", "Delete SimpleName: localInstance(186)", "Delete SimpleName: NULL(187)", "Delete InfixExpression: !=(188)", "Delete ParenthesizedExpression(189)", "Delete SimpleName: T(190)", "Delete SimpleType: T(191)", "Delete SimpleName: localInstance(192)", "Delete CastExpression(193)", "Delete NullLiteral(194)", "Delete ConditionalExpression(195)", "Delete VariableDeclarationFragment(196)", "Delete VariableDeclarationStatement(197)", "Delete SimpleName: returnedInstance(198)", "Delete ReturnStatement(199)", "Delete Block(200)", "Delete MethodDeclaration(201)", "Delete SimpleName: Override(202)", "Delete MarkerAnnotation(203)", "Delete Modifier: public(204)", "Delete SimpleName: String(205)", "Delete SimpleType: String(206)", "Delete SimpleName: toString(207)", "Delete SimpleName: String(208)", "Delete SimpleName: format(209)", "Delete StringLiteral: \"%s[%s]\"(210)", "Delete SimpleName: creator(211)", "Delete SimpleName: SINGLETON(212)", "Delete MethodInvocation(213)", "Delete ReturnStatement(214)", "Delete Block(215)", "Delete MethodDeclaration(216)", "Delete AnonymousClassDeclaration(217)", "Delete ClassInstanceCreation(218)", "Delete ReturnStatement(219)", "Delete Block(220)", "Delete MethodDeclaration(221)", "Delete SimpleName: Override(222)", "Delete MarkerAnnotation(223)", "Delete Modifier: public(224)", "Delete SimpleName: String(225)", "Delete SimpleType: String(226)", "Delete SimpleName: toString(227)", "Delete StringLiteral: \"Scopes.SINGLETON\"(228)", "Delete ReturnStatement(229)", "Delete Block(230)", "Delete MethodDeclaration(231)", "Delete AnonymousClassDeclaration(232)"]}}, {"InheritingState_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 14", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS FieldDeclaration to TypeDeclaration: class at 14", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: singletonCreationLock to VariableDeclarationFragment at 0", "INS SimpleType: Object to FieldDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 35", "operations": ["INS SimpleType: Object to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 35", "INS Block to MethodDeclaration at 3", "INS SimpleName: singletonCreationLock to ReturnStatement at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: singletonCreationLock to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ParenthesizedExpression to ConditionalExpression at 0", "INS SimpleName: parent to InfixExpression: == at 0", "INS SimpleName: singletonCreationLock to MethodInvocation at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: singletonCreationLock to FieldAccess at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS MethodInvocation to ConditionalExpression at 2", "INS ClassInstanceCreation to ConditionalExpression at 1", "INS ConditionalExpression to Assignment: = at 1", "INS SimpleName: parent to MethodInvocation at 0", "INS QualifiedName: State.NONE to InfixExpression: == at 1", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS ExpressionStatement to Block at 2", "INS SimpleType: Object to ClassInstanceCreation at 0"]}]}}, {"InheritingState_diff": {"operations": ["Insert FieldDeclaration(196) into TypeDeclaration: class(833) at 14", "Insert MethodDeclaration(766) into TypeDeclaration: class(833) at 35", "Insert Modifier: private(190) into FieldDeclaration(196) at 0", "Insert Modifier: final(191) into FieldDeclaration(196) at 1", "Insert SimpleType: Object(193) into FieldDeclaration(196) at 2", "Insert VariableDeclarationFragment(195) into FieldDeclaration(196) at 3", "Insert Modifier: public(759) into MethodDeclaration(766) at 0", "Insert SimpleType: Object(761) into MethodDeclaration(766) at 1", "Insert SimpleName: singletonCreationLock(762) into MethodDeclaration(766) at 2", "Insert Block(765) into MethodDeclaration(766) at 3", "Insert SimpleName: Object(192) into SimpleType: Object(193) at 0", "Insert SimpleName: singletonCreationLock(194) into VariableDeclarationFragment(195) at 0", "Insert ExpressionStatement(240) into Block(250) at 2", "Insert SimpleName: Object(760) into SimpleType: Object(761) at 0", "Insert ReturnStatement(764) into Block(765) at 0", "Insert Assignment: =(239) into ExpressionStatement(240) at 0", "Insert SimpleName: singletonCreationLock(763) into ReturnStatement(764) at 0", "Insert FieldAccess(227) into Assignment: =(239) at 0", "Insert ConditionalExpression(238) into Assignment: =(239) at 1", "Insert ThisExpression(225) into FieldAccess(227) at 0", "Insert SimpleName: singletonCreationLock(226) into FieldAccess(227) at 1", "Insert ParenthesizedExpression(231) into ConditionalExpression(238) at 0", "Insert ClassInstanceCreation(234) into ConditionalExpression(238) at 1", "Insert MethodInvocation(237) into ConditionalExpression(238) at 2", "Insert InfixExpression: ==(230) into ParenthesizedExpression(231) at 0", "Insert SimpleType: Object(233) into ClassInstanceCreation(234) at 0", "Insert SimpleName: parent(235) into MethodInvocation(237) at 0", "Insert SimpleName: singletonCreationLock(236) into MethodInvocation(237) at 1", "Insert SimpleName: parent(228) into InfixExpression: ==(230) at 0", "Insert QualifiedName: State.NONE(229) into InfixExpression: ==(230) at 1", "Insert SimpleName: Object(232) into SimpleType: Object(233) at 0"]}}, {"Scoping_cluster": {"actions": [{"root": "INS TryStatement to Block at 2", "operations": ["INS NullLiteral to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: SingletonScope.singletonCreationPerRootInjectorLock to MethodInvocation at 0", "INS QualifiedName: SingletonScope.singletonCreationPerRootInjectorLock to MethodInvocation at 0", "INS SimpleName: singletonCreationLock to MethodInvocation at 1", "INS Block to TryStatement at 1", "INS QualifiedName: injector.state to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS TryStatement to Block at 2", "INS SimpleName: set to MethodInvocation at 1", "INS Block to TryStatement at 0", "INS SimpleName: set to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 1"]}]}}, {"Scoping_diff": {"operations": ["Insert TryStatement(809) into Block(810) at 2", "Insert Block(802) into TryStatement(809) at 0", "Insert Block(808) into TryStatement(809) at 1", "Insert ExpressionStatement(772) into Block(802) at 0", "Move VariableDeclarationStatement(785) into Block(802) at 1", "Move ReturnStatement(794) into Block(802) at 2", "Insert ExpressionStatement(807) into Block(808) at 0", "Insert MethodInvocation(771) into ExpressionStatement(772) at 0", "Insert MethodInvocation(806) into ExpressionStatement(807) at 0", "Insert QualifiedName: SingletonScope.singletonCreationPerRootInjectorLock(766) into MethodInvocation(771) at 0", "Insert SimpleName: set(767) into MethodInvocation(771) at 1", "Insert MethodInvocation(770) into MethodInvocation(771) at 2", "Insert QualifiedName: SingletonScope.singletonCreationPerRootInjectorLock(803) into MethodInvocation(806) at 0", "Insert SimpleName: set(804) into MethodInvocation(806) at 1", "Insert NullLiteral(805) into MethodInvocation(806) at 2", "Insert QualifiedName: injector.state(768) into MethodInvocation(770) at 0", "Insert SimpleName: singletonCreationLock(769) into MethodInvocation(770) at 1"]}}, {"State_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 22", "operations": ["INS SimpleType: Object to MethodDeclaration at 1", "INS TextElement: Returns the shared lock for all injector's singletons. This is a low-granularity lock to TagElement at 0", "INS TagElement to Javadoc at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: singletonCreationLock to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: interface at 22", "INS TextElement: to guarantee singleton creation semantics. to TagElement at 1", "INS SimpleName: Object to SimpleType: Object at 0"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 19", "operations": ["INS SimpleName: singletonCreationLock to MethodDeclaration at 2", "INS ThrowStatement to Block at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: UnsupportedOperationException to SimpleType: UnsupportedOperationException at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Block to MethodDeclaration at 3", "INS SimpleType: Object to MethodDeclaration at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 19", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleType: UnsupportedOperationException to ClassInstanceCreation at 0"]}]}}, {"State_diff": {"operations": ["Insert MethodDeclaration(631) into TypeDeclaration: interface(648) at 22", "Insert Javadoc(627) into MethodDeclaration(631) at 0", "Insert SimpleType: Object(629) into MethodDeclaration(631) at 1", "Insert SimpleName: singletonCreationLock(630) into MethodDeclaration(631) at 2", "Insert TagElement(626) into Javadoc(627) at 0", "Insert SimpleName: Object(628) into SimpleType: Object(629) at 0", "Insert TextElement: Returns the shared lock for all injector's singletons. This is a low-granularity lock(624) into TagElement(626) at 0", "Insert TextElement: to guarantee singleton creation semantics.(625) into TagElement(626) at 1", "Insert MethodDeclaration(367) into AnonymousClassDeclaration(387) at 19", "Insert Modifier: public(358) into MethodDeclaration(367) at 0", "Insert SimpleType: Object(360) into MethodDeclaration(367) at 1", "Insert SimpleName: singletonCreationLock(361) into MethodDeclaration(367) at 2", "Insert Block(366) into MethodDeclaration(367) at 3", "Insert SimpleName: Object(359) into SimpleType: Object(360) at 0", "Insert ThrowStatement(365) into Block(366) at 0", "Insert ClassInstanceCreation(364) into ThrowStatement(365) at 0", "Insert SimpleType: UnsupportedOperationException(363) into ClassInstanceCreation(364) at 0", "Insert SimpleName: UnsupportedOperationException(362) into SimpleType: UnsupportedOperationException(363) at 0"]}}], "commit_stats": [{"total_files": 7, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}