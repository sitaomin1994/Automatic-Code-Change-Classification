{"application": "apache-nutch", "csha": "0faf643f0efa6f2ad848fed686443d8e4c4ad978", "files": [{"NutchAnalysis_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 30", "MOV MethodDeclaration to TypeDeclaration: class at 27", "MOV MethodDeclaration to TypeDeclaration: class at 34", "MOV MethodDeclaration to TypeDeclaration: class at 32", "MOV MethodDeclaration to TypeDeclaration: class at 20", "MOV MethodDeclaration to TypeDeclaration: class at 30", "MOV MethodDeclaration to TypeDeclaration: class at 23", "MOV MethodDeclaration to TypeDeclaration: class at 34", "MOV MethodDeclaration to TypeDeclaration: class at 32"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS BreakStatement to SwitchStatement at 12", "INS SwitchStatement to Block at 0", "INS Block to MethodDeclaration at 6", "INS SwitchCase to SwitchStatement at 13", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS BreakStatement to SwitchStatement at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS SimpleName: ParseException to SimpleType: ParseException at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS BreakStatement to SwitchStatement at 10", "INS SimpleType: ParseException to MethodDeclaration at 4", "INS Block to MethodDeclaration at 5", "INS SimpleName: WHITE to SwitchCase at 0", "INS Modifier: public to MethodDeclaration at 1", "INS Modifier: final to MethodDeclaration at 0", "INS SimpleName: MINUS to SwitchCase at 0", "INS BreakStatement to SwitchStatement at 13", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS SwitchCase to SwitchStatement at 14", "INS SimpleName: nonTermOrEOF to MethodDeclaration at 3", "INS SwitchCase to SwitchStatement at 8", "INS SwitchStatement to Block at 0", "INS SwitchCase to SwitchStatement at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS Block to MethodDeclaration at 6", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS SimpleName: nonOpOrTerm to MethodDeclaration at 4", "INS Modifier: public to MethodDeclaration at 2", "INS BooleanLiteral: true to WhileStatement at 0", "INS Modifier: final to MethodDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 3", "INS WhileStatement to LabeledStatement at 1", "INS LabeledStatement to Block at 0", "INS SimpleName: label_7 to LabeledStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 17", "operations": ["INS Modifier: final to MethodDeclaration at 1", "INS SimpleName: infix to MethodDeclaration at 4", "INS Modifier: public to MethodDeclaration at 2", "INS PrimitiveType: void to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 17"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: ParseException to MethodDeclaration at 5", "MOV Modifier: final to MethodDeclaration at 1", "MOV Block to MethodDeclaration at 6", "MOV Modifier: public to MethodDeclaration at 2", "MOV PrimitiveType: void to MethodDeclaration at 3", "MOV Javadoc to MethodDeclaration at 0", "MOV SimpleName: nonTerm to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: ParseException to MethodDeclaration at 5", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV SimpleType: ParseException to MethodDeclaration at 5", "MOV Block to WhileStatement at 1"]}, {"root": "UPDATE from jj_3R_23 to jj_3R_26", "operations": ["UPD SimpleName: jj_3R_23 from jj_3R_23 to jj_3R_26"]}, {"root": "UPDATE from jj_3R_20 to jj_3R_21", "operations": ["UPD SimpleName: jj_3R_20 from jj_3R_20 to jj_3R_21"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 3"]}, {"root": "UPDATE from jj_3R_25 to jj_3R_27", "operations": ["UPD SimpleName: jj_3R_25 from jj_3R_25 to jj_3R_27"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private", "UPD Modifier: public from public to private"]}, {"root": "UPDATE from void to boolean", "operations": ["UPD PrimitiveType: void from void to boolean", "UPD PrimitiveType: void from void to boolean"]}, {"root": "UPDATE from nonOpOrTerm to jj_3R_23", "operations": ["UPD SimpleName: nonOpOrTerm from nonOpOrTerm to jj_3R_23"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS Block to MethodDeclaration at 4", "INS IfStatement to Block at 0"]}, {"root": "UPDATE from jj_3R_18 to jj_3R_24", "operations": ["UPD SimpleName: jj_3R_18 from jj_3R_18 to jj_3R_24", "UPD SimpleName: infix from infix to jj_3R_24", "UPD SimpleName: jj_3R_18 from jj_3R_18 to jj_3R_24"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS SimpleName: jj_scanpos to Assignment: = at 1", "INS IfStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 1", "INS IfStatement to Block at 2", "INS BooleanLiteral: false to ReturnStatement at 0", "INS ReturnStatement to Block at 3", "INS SimpleName: jj_3R_27 to MethodInvocation at 0", "INS SimpleName: xsp to VariableDeclarationFragment at 0", "INS SimpleName: xsp to Assignment: = at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: Token to SimpleType: Token at 0", "INS Block to MethodDeclaration at 4", "INS Block to IfStatement at 1", "INS SimpleType: Token to VariableDeclarationStatement at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "UPDATE from jj_3R_24 to jj_3R_25", "operations": ["UPD SimpleName: jj_3R_24 from jj_3R_24 to jj_3R_25"]}, {"root": "UPDATE from jj_3R_21 to jj_3R_20", "operations": ["UPD SimpleName: jj_3R_21 from jj_3R_21 to jj_3R_20"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 4"]}, {"root": "INS SwitchStatement to Block at 9", "operations": ["INS ConditionalExpression to SwitchStatement at 0", "INS ExpressionStatement to SwitchStatement at 5", "INS SimpleName: jj_la1 to ArrayAccess at 0", "INS MethodInvocation to ConditionalExpression at 1", "INS SwitchStatement to Block at 9", "INS ExpressionStatement to SwitchStatement at 9", "INS ArrayAccess to Assignment: = at 0", "INS ExpressionStatement to SwitchStatement at 8", "INS SwitchCase to SwitchStatement at 7", "INS BreakStatement to SwitchStatement at 3", "INS SwitchCase to SwitchStatement at 1", "INS PrefixExpression: - to InfixExpression: == at 1", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS NumberLiteral: 0 to MethodInvocation at 1", "INS SimpleName: QUOTE to SwitchCase at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: jj_ntk to ConditionalExpression at 2", "INS SimpleType: ParseException to ClassInstanceCreation at 0", "INS BreakStatement to SwitchStatement at 6", "INS NumberLiteral: 7 to ArrayAccess at 1", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: jj_ntk to MethodInvocation at 0", "INS SimpleName: jj_gen to Assignment: = at 1", "INS SimpleName: jj_consume_token to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: ParseException to SimpleType: ParseException at 0", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS PrefixExpression: - to MethodInvocation at 1", "INS SimpleName: jj_consume_token to MethodInvocation at 0", "INS SimpleName: jj_ntk to InfixExpression: == at 0", "INS ThrowStatement to SwitchStatement at 10"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS MethodInvocation to IfStatement at 0", "INS SimpleName: jj_3R_26 to MethodInvocation at 0", "INS IfStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS ReturnStatement to Block at 1", "INS BooleanLiteral: false to ReturnStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS ExpressionStatement to Block at 4", "INS SimpleName: jj_scanpos to Assignment: = at 1", "INS SimpleName: xsp to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS IfStatement to Block at 5", "operations": ["INS Block to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: jj_scanpos to Assignment: = at 0", "INS NumberLiteral: 9 to MethodInvocation at 1", "INS IfStatement to Block at 5", "INS ExpressionStatement to Block at 0", "INS SimpleName: jj_scan_token to MethodInvocation at 0", "INS SimpleName: xsp to Assignment: = at 1", "INS MethodInvocation to IfStatement at 0"]}, {"root": "INS ForStatement to Block at 4", "operations": ["INS ForStatement to Block at 4", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS NumberLiteral: 16 to InfixExpression: < at 1"]}, {"root": "INS ForStatement to Block at 4", "operations": ["INS NumberLiteral: 16 to InfixExpression: < at 1", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS ForStatement to Block at 4"]}, {"root": "MOVE from Block", "operations": ["MOV ForStatement to Block at 4"]}, {"root": "MOVE from Block", "operations": ["MOV ForStatement to Block at 4"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 2"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 4"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 14", "MOV ThrowStatement to SwitchStatement at 16", "MOV ConditionalExpression to SwitchStatement at 0", "MOV SwitchCase to SwitchStatement at 4", "MOV ExpressionStatement to SwitchStatement at 7", "MOV ExpressionStatement to SwitchStatement at 15", "MOV ExpressionStatement to SwitchStatement at 2", "MOV SwitchCase to SwitchStatement at 5"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 1", "MOV SwitchCase to SwitchStatement at 5", "MOV SwitchCase to SwitchStatement at 6", "MOV ExpressionStatement to SwitchStatement at 2", "MOV ExpressionStatement to SwitchStatement at 9", "MOV ExpressionStatement to SwitchStatement at 15", "MOV SwitchCase to SwitchStatement at 3", "MOV SwitchCase to SwitchStatement at 4", "MOV SwitchCase to SwitchStatement at 7", "MOV SwitchCase to SwitchStatement at 17", "MOV ExpressionStatement to SwitchStatement at 14", "MOV SwitchCase to SwitchStatement at 16", "MOV ThrowStatement to SwitchStatement at 17", "MOV ConditionalExpression to SwitchStatement at 0", "MOV ExpressionStatement to SwitchStatement at 16"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 7", "MOV SwitchCase to SwitchStatement at 9", "MOV ExpressionStatement to SwitchStatement at 12", "MOV SwitchCase to SwitchStatement at 8", "MOV SwitchCase to SwitchStatement at 1", "MOV SwitchCase to SwitchStatement at 10", "MOV SwitchCase to SwitchStatement at 11", "MOV SwitchCase to SwitchStatement at 6", "MOV ExpressionStatement to SwitchStatement at 2", "MOV ExpressionStatement to SwitchStatement at 11", "MOV SwitchCase to SwitchStatement at 1"]}, {"root": "INS SwitchCase to SwitchStatement at 1", "operations": ["INS SimpleName: PLUS to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 1"]}, {"root": "INS SwitchCase to SwitchStatement at 9", "operations": ["INS SimpleName: COLON to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 9"]}, {"root": "INS SwitchCase to SwitchStatement at 10", "operations": ["INS SimpleName: SLASH to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 10"]}, {"root": "INS SwitchCase to SwitchStatement at 11", "operations": ["INS SwitchCase to SwitchStatement at 11", "INS SimpleName: DOT to SwitchCase at 0"]}, {"root": "INS SwitchCase to SwitchStatement at 12", "operations": ["INS SimpleName: ATSIGN to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 12"]}, {"root": "INS SwitchCase to SwitchStatement at 13", "operations": ["INS SwitchCase to SwitchStatement at 13", "INS SimpleName: APOSTROPHE to SwitchCase at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV ReturnStatement to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV ReturnStatement to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "INS ReturnStatement to IfStatement at 1", "operations": ["INS ReturnStatement to IfStatement at 1", "INS BooleanLiteral: true to ReturnStatement at 0"]}, {"root": "INS ReturnStatement to IfStatement at 1", "operations": ["INS BooleanLiteral: true to ReturnStatement at 0", "INS ReturnStatement to IfStatement at 1"]}, {"root": "MOVE from ArrayCreation", "operations": ["MOV ArrayType: int[] to ArrayCreation at 0"]}, {"root": "UPDATE from 14 to 16", "operations": ["UPD NumberLiteral: 14 from 14 to 16", "UPD NumberLiteral: 14 from 14 to 16", "UPD NumberLiteral: 14 from 14 to 16", "UPD NumberLiteral: 14 from 14 to 16"]}, {"root": "MOVE from ForStatement", "operations": ["MOV VariableDeclarationExpression to ForStatement at 0", "MOV ExpressionStatement to ForStatement at 3", "MOV PostfixExpression: ++ to ForStatement at 2"]}, {"root": "MOVE from ForStatement", "operations": ["MOV ExpressionStatement to ForStatement at 3", "MOV VariableDeclarationExpression to ForStatement at 0", "MOV PostfixExpression: ++ to ForStatement at 2"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 5", "MOV ExpressionStatement to SwitchStatement at 8", "MOV BreakStatement to SwitchStatement at 3", "MOV SwitchCase to SwitchStatement at 7", "MOV SwitchCase to SwitchStatement at 1", "MOV BreakStatement to SwitchStatement at 13", "MOV ConditionalExpression to SwitchStatement at 0", "MOV ExpressionStatement to SwitchStatement at 2", "MOV SwitchCase to SwitchStatement at 4"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS MethodInvocation to IfStatement at 0", "INS SimpleName: jj_3R_26 to MethodInvocation at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV ReturnStatement to IfStatement at 1"]}, {"root": "MOVE from ArrayCreation", "operations": ["MOV ArrayType: int[] to ArrayCreation at 0"]}, {"root": "UPDATE from 8 to 9", "operations": ["UPD NumberLiteral: 8 from 8 to 9"]}, {"root": "INS ConditionalExpression to SwitchStatement at 0", "operations": ["INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS SimpleName: jj_ntk to MethodInvocation at 0", "INS SimpleName: jj_ntk to ConditionalExpression at 2", "INS ConditionalExpression to SwitchStatement at 0", "INS SimpleName: jj_ntk to InfixExpression: == at 0", "INS MethodInvocation to ConditionalExpression at 1", "INS PrefixExpression: - to InfixExpression: == at 1", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS InfixExpression: == to ParenthesizedExpression at 0"]}, {"root": "INS SwitchStatement to SwitchStatement at 18", "operations": ["INS BreakStatement to SwitchStatement at 6", "INS SimpleName: jj_consume_token to MethodInvocation at 0", "INS SwitchStatement to SwitchStatement at 18", "INS SimpleName: ParseException to SimpleType: ParseException at 0", "INS ExpressionStatement to SwitchStatement at 9", "INS PrefixExpression: - to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: ParseException to ClassInstanceCreation at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS ThrowStatement to SwitchStatement at 10"]}, {"root": "INS ExpressionStatement to SwitchStatement at 19", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: nonTermOrEOF to MethodInvocation at 0", "INS ExpressionStatement to SwitchStatement at 19"]}, {"root": "INS BreakStatement to SwitchStatement at 20", "operations": ["INS BreakStatement to SwitchStatement at 20"]}, {"root": "INS SwitchCase to SwitchStatement at 21", "operations": ["INS SwitchCase to SwitchStatement at 21"]}, {"root": "INS ExpressionStatement to SwitchStatement at 22", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS NumberLiteral: 13 to ArrayAccess at 1", "INS SimpleName: jj_la1 to ArrayAccess at 0", "INS ArrayAccess to Assignment: = at 0", "INS SimpleName: jj_gen to Assignment: = at 1", "INS ExpressionStatement to SwitchStatement at 22"]}, {"root": "UPDATE from 9 to 14", "operations": ["UPD NumberLiteral: 9 from 9 to 14"]}, {"root": "UPDATE from 13 to 15", "operations": ["UPD NumberLiteral: 13 from 13 to 15"]}, {"root": "INS NumberLiteral: 0 to MethodInvocation at 1", "operations": ["INS NumberLiteral: 0 to MethodInvocation at 1"]}, {"root": "UPDATE from 0xfd81 to 0xfd80", "operations": ["UPD NumberLiteral: 0xfd81 from 0xfd81 to 0xfd80", "UPD NumberLiteral: 0xfd81 from 0xfd81 to 0xfd80"]}, {"root": "INS NumberLiteral: 0x201 to ArrayInitializer at 7", "operations": ["INS NumberLiteral: 0x201 to ArrayInitializer at 7"]}, {"root": "INS NumberLiteral: 0xfd80 to ArrayInitializer at 10", "operations": ["INS NumberLiteral: 0xfd80 to ArrayInitializer at 10"]}, {"root": "UPDATE from 7 to 8", "operations": ["UPD NumberLiteral: 7 from 7 to 8"]}, {"root": "DEL SwitchCase", "operations": ["DEL NumberLiteral: 0", "DEL SwitchCase"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration"]}, {"root": "DEL Block", "operations": ["DEL BreakStatement", "DEL BreakStatement", "DEL BreakStatement", "DEL SwitchCase", "DEL LabeledStatement", "DEL SwitchCase", "DEL Block", "DEL SwitchStatement", "DEL BooleanLiteral: true", "DEL SwitchStatement", "DEL SimpleName: label_7", "DEL BreakStatement", "DEL WhileStatement", "DEL Block", "DEL BreakStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL IfStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: jj_3R_25", "DEL IfStatement", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: QUOTE", "operations": ["DEL SimpleName: QUOTE"]}, {"root": "DEL ForStatement", "operations": ["DEL SimpleName: i", "DEL ForStatement", "DEL InfixExpression: <", "DEL NumberLiteral: 14"]}, {"root": "DEL ForStatement", "operations": ["DEL InfixExpression: <", "DEL ForStatement", "DEL SimpleName: i", "DEL NumberLiteral: 14"]}]}}, {"NutchAnalysis_diff": {"operations": ["Move MethodDeclaration(1136) into TypeDeclaration: class(3447) at 30", "Move MethodDeclaration(1201) into TypeDeclaration: class(3447) at 32", "Move MethodDeclaration(1462) into TypeDeclaration: class(3447) at 27", "Move MethodDeclaration(1514) into TypeDeclaration: class(3447) at 34", "Move MethodDeclaration(1601) into TypeDeclaration: class(3447) at 20", "Move MethodDeclaration(1719) into TypeDeclaration: class(3447) at 30", "Move MethodDeclaration(1847) into TypeDeclaration: class(3447) at 23", "Move MethodDeclaration(1873) into TypeDeclaration: class(3447) at 32", "Move MethodDeclaration(1899) into TypeDeclaration: class(3447) at 34", "Insert MethodDeclaration(1041) into TypeDeclaration: class(3447) at 14", "Insert MethodDeclaration(1102) into TypeDeclaration: class(3447) at 15", "Insert MethodDeclaration(1222) into TypeDeclaration: class(3447) at 16", "Insert MethodDeclaration(1287) into TypeDeclaration: class(3447) at 17", "Move Javadoc(950) into MethodDeclaration(1041) at 0", "Move Modifier: final(951) into MethodDeclaration(1041) at 1", "Move Modifier: public(952) into MethodDeclaration(1041) at 2", "Move PrimitiveType: void(953) into MethodDeclaration(1041) at 3", "Move SimpleName: nonTerm(954) into MethodDeclaration(1041) at 4", "Move SimpleType: ParseException(956) into MethodDeclaration(1041) at 5", "Insert Block(1040) into MethodDeclaration(1041) at 6", "Insert Modifier: final(1042) into MethodDeclaration(1102) at 0", "Insert Modifier: public(1043) into MethodDeclaration(1102) at 1", "Insert PrimitiveType: void(1044) into MethodDeclaration(1102) at 2", "Insert SimpleName: nonTermOrEOF(1045) into MethodDeclaration(1102) at 3", "Insert SimpleType: ParseException(1047) into MethodDeclaration(1102) at 4", "Insert Block(1101) into MethodDeclaration(1102) at 5", "Move Javadoc(1019) into MethodDeclaration(1222) at 0", "Insert Modifier: final(1106) into MethodDeclaration(1222) at 1", "Insert Modifier: public(1107) into MethodDeclaration(1222) at 2", "Insert PrimitiveType: void(1108) into MethodDeclaration(1222) at 3", "Insert SimpleName: nonOpOrTerm(1109) into MethodDeclaration(1222) at 4", "Move SimpleType: ParseException(1025) into MethodDeclaration(1222) at 5", "Insert Block(1221) into MethodDeclaration(1222) at 6", "Move Javadoc(1139) into MethodDeclaration(1287) at 0", "Insert Modifier: final(1226) into MethodDeclaration(1287) at 1", "Insert Modifier: public(1227) into MethodDeclaration(1287) at 2", "Insert PrimitiveType: void(1228) into MethodDeclaration(1287) at 3", "Insert SimpleName: infix(1229) into MethodDeclaration(1287) at 4", "Move SimpleType: ParseException(1145) into MethodDeclaration(1287) at 5", "Move Block(1015) into MethodDeclaration(1287) at 6", "Update SimpleName: jj_3R_23(1592) to jj_3R_26", "Update SimpleName: jj_3R_20(1817) to jj_3R_21", "Move IfStatement(1822) into Block(1639) at 3", "Update SimpleName: jj_3R_25(1453) to jj_3R_27", "Update Modifier: public(1021) to private", "Update PrimitiveType: void(1022) to boolean", "Update SimpleName: nonOpOrTerm(1023) to jj_3R_23", "Insert Block(1780) into MethodDeclaration(1781) at 4", "Update Modifier: public(1141) to private", "Update PrimitiveType: void(1142) to boolean", "Update SimpleName: infix(1143) to jj_3R_24", "Insert Block(1879) into MethodDeclaration(1880) at 4", "Update SimpleName: jj_3R_24(1763) to jj_3R_25", "Update SimpleName: jj_3R_21(1479) to jj_3R_20", "Move IfStatement(1510) into Block(1993) at 0", "Move Block(2399) into MethodDeclaration(2471) at 3", "Move Block(2334) into MethodDeclaration(2536) at 4", "Insert SwitchStatement(723) into Block(753) at 9", "Insert SwitchStatement(1039) into Block(1040) at 0", "Insert SimpleName: ParseException(1046) into SimpleType: ParseException(1047) at 0", "Insert SwitchStatement(1100) into Block(1101) at 0", "Insert LabeledStatement(1220) into Block(1221) at 0", "Insert IfStatement(1615) into Block(1639) at 1", "Insert IfStatement(1777) into Block(1780) at 0", "Move ReturnStatement(1770) into Block(1780) at 1", "Move IfStatement(1753) into Block(1811) at 2", "Insert VariableDeclarationStatement(1858) into Block(1879) at 0", "Insert ExpressionStatement(1862) into Block(1879) at 1", "Insert IfStatement(1876) into Block(1879) at 2", "Insert ReturnStatement(1878) into Block(1879) at 3", "Move ReturnStatement(1884) into Block(1905) at 1", "Insert ReturnStatement(2018) into Block(2019) at 1", "Insert ExpressionStatement(2123) into Block(2141) at 4", "Insert IfStatement(2138) into Block(2141) at 5", "Insert ForStatement(2320) into Block(2340) at 4", "Insert ForStatement(2386) into Block(2406) at 4", "Move ForStatement(2250) into Block(2470) at 4", "Move ForStatement(2184) into Block(2535) at 4", "Insert ConditionalExpression(692) into SwitchStatement(723) at 0", "Insert SwitchCase(694) into SwitchStatement(723) at 1", "Move ExpressionStatement(691) into SwitchStatement(723) at 2", "Insert BreakStatement(699) into SwitchStatement(723) at 3", "Move SwitchCase(646) into SwitchStatement(723) at 4", "Insert ExpressionStatement(705) into SwitchStatement(723) at 5", "Insert BreakStatement(706) into SwitchStatement(723) at 6", "Insert SwitchCase(707) into SwitchStatement(723) at 7", "Insert ExpressionStatement(713) into SwitchStatement(723) at 8", "Insert ExpressionStatement(718) into SwitchStatement(723) at 9", "Insert ThrowStatement(722) into SwitchStatement(723) at 10", "Move ConditionalExpression(1079) into SwitchStatement(1039) at 0", "Move SwitchCase(1047) into SwitchStatement(1039) at 1", "Move ExpressionStatement(1051) into SwitchStatement(1039) at 2", "Insert BreakStatement(1004) into SwitchStatement(1039) at 3", "Move SwitchCase(1081) into SwitchStatement(1039) at 4", "Move SwitchCase(1088) into SwitchStatement(1039) at 5", "Move SwitchCase(978) into SwitchStatement(1039) at 6", "Move SwitchCase(980) into SwitchStatement(1039) at 7", "Move SwitchCase(982) into SwitchStatement(1039) at 8", "Move SwitchCase(984) into SwitchStatement(1039) at 9", "Move SwitchCase(986) into SwitchStatement(1039) at 10", "Move ExpressionStatement(989) into SwitchStatement(1039) at 11", "Insert BreakStatement(1022) into SwitchStatement(1039) at 12", "Insert SwitchCase(1023) into SwitchStatement(1039) at 13", "Move ExpressionStatement(1100) into SwitchStatement(1039) at 14", "Move ExpressionStatement(1105) into SwitchStatement(1039) at 15", "Move ThrowStatement(1109) into SwitchStatement(1039) at 16", "Move ConditionalExpression(1045) into SwitchStatement(1100) at 0", "Move SwitchCase(974) into SwitchStatement(1100) at 1", "Insert SwitchCase(1060) into SwitchStatement(1100) at 2", "Move SwitchCase(1054) into SwitchStatement(1100) at 3", "Move SwitchCase(1056) into SwitchStatement(1100) at 4", "Move SwitchCase(1058) into SwitchStatement(1100) at 5", "Move SwitchCase(1060) into SwitchStatement(1100) at 6", "Move SwitchCase(1062) into SwitchStatement(1100) at 7", "Insert SwitchCase(1072) into SwitchStatement(1100) at 8", "Move ExpressionStatement(1113) into SwitchStatement(1100) at 9", "Insert BreakStatement(1076) into SwitchStatement(1100) at 10", "Move SwitchCase(992) into SwitchStatement(1100) at 11", "Move ExpressionStatement(996) into SwitchStatement(1100) at 12", "Insert BreakStatement(1083) into SwitchStatement(1100) at 13", "Insert SwitchCase(1084) into SwitchStatement(1100) at 14", "Move ExpressionStatement(1121) into SwitchStatement(1100) at 15", "Move ExpressionStatement(1126) into SwitchStatement(1100) at 16", "Move ThrowStatement(1130) into SwitchStatement(1100) at 17", "Insert SimpleName: label_7(1112) into LabeledStatement(1220) at 0", "Insert WhileStatement(1219) into LabeledStatement(1220) at 1", "Insert SwitchCase(1242) into SwitchStatement(1285) at 1", "Move ExpressionStatement(1085) into SwitchStatement(1285) at 2", "Move ExpressionStatement(1092) into SwitchStatement(1285) at 7", "Insert SwitchCase(1256) into SwitchStatement(1285) at 7", "Insert SwitchCase(1258) into SwitchStatement(1285) at 8", "Insert SwitchCase(1260) into SwitchStatement(1285) at 9", "Insert SwitchCase(1262) into SwitchStatement(1285) at 10", "Insert SwitchCase(1264) into SwitchStatement(1285) at 11", "Move ExpressionStatement(1065) into SwitchStatement(1285) at 14", "Insert MethodInvocation(1612) into IfStatement(1615) at 0", "Move ReturnStatement(1488) into IfStatement(1615) at 1", "Move MethodInvocation(1834) into IfStatement(1777) at 0", "Move ReturnStatement(1767) into IfStatement(1777) at 1", "Insert SimpleType: Token(1855) into VariableDeclarationStatement(1858) at 0", "Insert VariableDeclarationFragment(1857) into VariableDeclarationStatement(1858) at 1", "Insert Assignment: =(1861) into ExpressionStatement(1862) at 0", "Move MethodInvocation(1735) into IfStatement(1876) at 0", "Insert Block(1875) into IfStatement(1876) at 1", "Insert BooleanLiteral: false(1877) into ReturnStatement(1878) at 0", "Insert ReturnStatement(1901) into IfStatement(1902) at 1", "Insert ReturnStatement(2015) into IfStatement(2016) at 1", "Insert BooleanLiteral: false(2017) into ReturnStatement(2018) at 0", "Insert Assignment: =(2122) into ExpressionStatement(2123) at 0", "Insert MethodInvocation(2126) into IfStatement(2138) at 0", "Insert Block(2137) into IfStatement(2138) at 1", "Move ArrayType: int[](2091) into ArrayCreation(2201) at 0", "Update NumberLiteral: 14(2066) to 16", "Move VariableDeclarationExpression(2301) into ForStatement(2320) at 0", "Insert InfixExpression: <(2310) into ForStatement(2320) at 1", "Move PostfixExpression: ++(2306) into ForStatement(2320) at 2", "Move ExpressionStatement(2313) into ForStatement(2320) at 3", "Move VariableDeclarationExpression(2366) into ForStatement(2386) at 0", "Insert InfixExpression: <(2376) into ForStatement(2386) at 1", "Move PostfixExpression: ++(2371) into ForStatement(2386) at 2", "Move ExpressionStatement(2378) into ForStatement(2386) at 3", "Insert ParenthesizedExpression(688) into ConditionalExpression(692) at 0", "Insert MethodInvocation(690) into ConditionalExpression(692) at 1", "Insert SimpleName: jj_ntk(691) into ConditionalExpression(692) at 2", "Insert SimpleName: QUOTE(693) into SwitchCase(694) at 0", "Insert MethodInvocation(704) into ExpressionStatement(705) at 0", "Insert Assignment: =(712) into ExpressionStatement(713) at 0", "Insert MethodInvocation(717) into ExpressionStatement(718) at 0", "Insert ClassInstanceCreation(721) into ThrowStatement(722) at 0", "Insert SimpleName: MINUS(1059) into SwitchCase(1060) at 0", "Insert SimpleName: WHITE(1071) into SwitchCase(1072) at 0", "Insert BooleanLiteral: true(1113) into WhileStatement(1219) at 0", "Move Block(1200) into WhileStatement(1219) at 1", "Insert SimpleName: PLUS(1241) into SwitchCase(1242) at 0", "Insert SimpleName: COLON(1255) into SwitchCase(1256) at 0", "Insert SimpleName: SLASH(1257) into SwitchCase(1258) at 0", "Insert SimpleName: DOT(1259) into SwitchCase(1260) at 0", "Insert SimpleName: ATSIGN(1261) into SwitchCase(1262) at 0", "Insert SimpleName: APOSTROPHE(1263) into SwitchCase(1264) at 0", "Insert SimpleName: jj_3R_26(1611) into MethodInvocation(1612) at 0", "Insert SimpleName: Token(1854) into SimpleType: Token(1855) at 0", "Insert SimpleName: xsp(1856) into VariableDeclarationFragment(1857) at 0", "Insert SimpleName: xsp(1859) into Assignment: =(1861) at 0", "Insert SimpleName: jj_scanpos(1860) into Assignment: =(1861) at 1", "Move ExpressionStatement(1739) into Block(1875) at 0", "Insert IfStatement(1874) into Block(1875) at 1", "Update SimpleName: jj_3R_18(1764) to jj_3R_24", "Insert BooleanLiteral: true(1900) into ReturnStatement(1901) at 0", "Update SimpleName: jj_3R_18(1878) to jj_3R_24", "Insert BooleanLiteral: true(2014) into ReturnStatement(2015) at 0", "Insert SimpleName: xsp(2120) into Assignment: =(2122) at 0", "Insert SimpleName: jj_scanpos(2121) into Assignment: =(2122) at 1", "Insert SimpleName: jj_scan_token(2124) into MethodInvocation(2126) at 0", "Insert NumberLiteral: 9(2125) into MethodInvocation(2126) at 1", "Insert ExpressionStatement(2130) into Block(2137) at 0", "Move IfStatement(2004) into Block(2137) at 1", "Insert SimpleName: i(2308) into InfixExpression: <(2310) at 0", "Insert NumberLiteral: 16(2309) into InfixExpression: <(2310) at 1", "Insert SimpleName: i(2374) into InfixExpression: <(2376) at 0", "Insert NumberLiteral: 16(2375) into InfixExpression: <(2376) at 1", "Update NumberLiteral: 14(2239) to 16", "Update NumberLiteral: 14(2173) to 16", "Update NumberLiteral: 14(2997) to 16", "Insert InfixExpression: ==(687) into ParenthesizedExpression(688) at 0", "Insert SimpleName: jj_ntk(689) into MethodInvocation(690) at 0", "Insert SimpleName: jj_consume_token(702) into MethodInvocation(704) at 0", "Insert NumberLiteral: 0(703) into MethodInvocation(704) at 1", "Insert ArrayAccess(710) into Assignment: =(712) at 0", "Insert SimpleName: jj_gen(711) into Assignment: =(712) at 1", "Insert SimpleName: jj_consume_token(714) into MethodInvocation(717) at 0", "Insert PrefixExpression: -(716) into MethodInvocation(717) at 1", "Insert SimpleType: ParseException(720) into ClassInstanceCreation(721) at 0", "Move IfStatement(1036) into Block(1218) at 0", "Move BreakStatement(1168) into SwitchStatement(1217) at 13", "Insert MethodInvocation(1622) into IfStatement(1629) at 0", "Insert MethodInvocation(1871) into IfStatement(1874) at 0", "Move ReturnStatement(1881) into IfStatement(1874) at 1", "Insert Assignment: =(2129) into ExpressionStatement(2130) at 0", "Move ArrayType: int[](2065) into ArrayCreation(2243) at 0", "Insert SimpleName: jj_ntk(684) into InfixExpression: ==(687) at 0", "Insert PrefixExpression: -(686) into InfixExpression: ==(687) at 1", "Insert SimpleName: jj_la1(708) into ArrayAccess(710) at 0", "Insert NumberLiteral: 7(709) into ArrayAccess(710) at 1", "Insert NumberLiteral: 1(715) into PrefixExpression: -(716) at 0", "Insert SimpleName: ParseException(719) into SimpleType: ParseException(720) at 0", "Update NumberLiteral: 8(921) to 9", "Insert ConditionalExpression(1131) into SwitchStatement(1217) at 0", "Move SwitchCase(967) into SwitchStatement(1217) at 1", "Move ExpressionStatement(971) into SwitchStatement(1217) at 2", "Move SwitchCase(1068) into SwitchStatement(1217) at 16", "Move SwitchCase(1070) into SwitchStatement(1217) at 17", "Insert SwitchStatement(1196) into SwitchStatement(1217) at 13", "Insert ExpressionStatement(1199) into SwitchStatement(1217) at 14", "Insert BreakStatement(1200) into SwitchStatement(1217) at 15", "Insert SwitchCase(1201) into SwitchStatement(1217) at 16", "Insert ExpressionStatement(1207) into SwitchStatement(1217) at 17", "Update NumberLiteral: 9(1000) to 14", "Update NumberLiteral: 13(1257) to 15", "Insert SimpleName: jj_3R_26(1621) into MethodInvocation(1622) at 0", "Insert SimpleName: jj_3R_27(1870) into MethodInvocation(1871) at 0", "Insert SimpleName: jj_scanpos(2127) into Assignment: =(2129) at 0", "Insert SimpleName: xsp(2128) into Assignment: =(2129) at 1", "Insert NumberLiteral: 0(2132) into MethodInvocation(2133) at 1", "Update NumberLiteral: 0xfd81(2096) to 0xfd80", "Update NumberLiteral: 0xfd81(2098) to 0xfd80", "Insert NumberLiteral: 0x201(2233) into ArrayInitializer(2242) at 7", "Insert NumberLiteral: 0xfd80(2236) into ArrayInitializer(2242) at 10", "Insert NumberLiteral: 1(685) into PrefixExpression: -(686) at 0", "Insert ParenthesizedExpression(1127) into ConditionalExpression(1131) at 0", "Insert MethodInvocation(1129) into ConditionalExpression(1131) at 1", "Insert SimpleName: jj_ntk(1130) into ConditionalExpression(1131) at 2", "Move ConditionalExpression(1154) into SwitchStatement(1196) at 0", "Move SwitchCase(1156) into SwitchStatement(1196) at 1", "Move ExpressionStatement(1160) into SwitchStatement(1196) at 2", "Move BreakStatement(1182) into SwitchStatement(1196) at 3", "Move SwitchCase(1163) into SwitchStatement(1196) at 4", "Move ExpressionStatement(1167) into SwitchStatement(1196) at 5", "Insert BreakStatement(1179) into SwitchStatement(1196) at 6", "Move SwitchCase(1183) into SwitchStatement(1196) at 7", "Move ExpressionStatement(1189) into SwitchStatement(1196) at 8", "Insert ExpressionStatement(1191) into SwitchStatement(1196) at 9", "Insert ThrowStatement(1195) into SwitchStatement(1196) at 10", "Insert MethodInvocation(1198) into ExpressionStatement(1199) at 0", "Insert Assignment: =(1206) into ExpressionStatement(1207) at 0", "Insert InfixExpression: ==(1126) into ParenthesizedExpression(1127) at 0", "Insert SimpleName: jj_ntk(1128) into MethodInvocation(1129) at 0", "Insert MethodInvocation(1190) into ExpressionStatement(1191) at 0", "Insert ClassInstanceCreation(1194) into ThrowStatement(1195) at 0", "Insert SimpleName: nonTermOrEOF(1197) into MethodInvocation(1198) at 0", "Insert ArrayAccess(1204) into Assignment: =(1206) at 0", "Insert SimpleName: jj_gen(1205) into Assignment: =(1206) at 1", "Insert SimpleName: jj_ntk(1123) into InfixExpression: ==(1126) at 0", "Insert PrefixExpression: -(1125) into InfixExpression: ==(1126) at 1", "Insert SimpleName: jj_consume_token(1187) into MethodInvocation(1190) at 0", "Insert PrefixExpression: -(1189) into MethodInvocation(1190) at 1", "Insert SimpleType: ParseException(1193) into ClassInstanceCreation(1194) at 0", "Insert SimpleName: jj_la1(1202) into ArrayAccess(1204) at 0", "Insert NumberLiteral: 13(1203) into ArrayAccess(1204) at 1", "Insert NumberLiteral: 1(1124) into PrefixExpression: -(1125) at 0", "Insert NumberLiteral: 1(1188) into PrefixExpression: -(1189) at 0", "Insert SimpleName: ParseException(1192) into SimpleType: ParseException(1193) at 0", "Update NumberLiteral: 7(813) to 8", "Delete NumberLiteral: 0(559)", "Delete SwitchCase(560)", "Delete MethodDeclaration(1016)", "Delete SimpleName: label_7(1026)", "Delete BooleanLiteral: true(1027)", "Delete BreakStatement(1052)", "Delete BreakStatement(1066)", "Delete BreakStatement(1086)", "Delete BreakStatement(1093)", "Delete SwitchCase(1094)", "Delete SwitchStatement(1110)", "Delete BreakStatement(1114)", "Delete SwitchCase(1115)", "Delete SwitchStatement(1131)", "Delete Block(1132)", "Delete WhileStatement(1133)", "Delete LabeledStatement(1134)", "Delete Block(1135)", "Delete Block(1754)", "Delete IfStatement(1755)", "Delete SimpleName: jj_3R_25(1485)", "Delete MethodInvocation(1486)", "Delete IfStatement(1489)", "Delete SimpleName: QUOTE(2000)", "Delete SimpleName: i(2367)", "Delete NumberLiteral: 14(2368)", "Delete InfixExpression: <(2369)", "Delete ForStatement(2379)", "Delete SimpleName: i(2302)", "Delete NumberLiteral: 14(2303)", "Delete InfixExpression: <(2304)", "Delete ForStatement(2314)"]}}], "commit_stats": [{"total_files": 4, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}