{"application": "google-error-prone", "csha": "e0e92eeca120cf51a168440bb0c0b23f7b90f0ff", "files": [{"BugCheckerSupplier_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS TextElement:  in which the previous  to TagElement at 2", "INS SimpleType: SeverityLevel to SingleVariableDeclaration at 0", "INS TextElement: has been overridden to the given value. to TagElement at 4", "INS SimpleName: SeverityLevel to SimpleType: SeverityLevel at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS TagElement: @link to TagElement at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: severity to SingleVariableDeclaration at 1", "INS TagElement: @link to TagElement at 3", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: overrideSeverity to MethodDeclaration at 4", "INS Modifier: abstract to MethodDeclaration at 2", "INS SimpleName: BugCheckerSupplier to SimpleType: BugCheckerSupplier at 0", "INS SimpleName: BugCheckerSupplier to TagElement: @link at 0", "INS SimpleName: SeverityLevel to TagElement: @link at 0", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS SimpleType: BugCheckerSupplier to MethodDeclaration at 3", "INS TextElement: Returns a new  to TagElement at 0", "INS TagElement to Javadoc at 0"]}, {"root": "INS TextElement: <p>Implementations of this class should be immutable. to TagElement at 10", "operations": ["INS TextElement: <p>Implementations of this class should be immutable. to TagElement at 10"]}, {"root": "INS MemberRef to TagElement: @link at 0", "operations": ["INS SimpleName: SeverityLevel to MemberRef at 0", "INS MemberRef to TagElement: @link at 0", "INS SimpleName: ERROR to MemberRef at 1"]}, {"root": "INS MemberRef to TagElement: @link at 0", "operations": ["INS SimpleName: EXPERIMENTAL to MemberRef at 1", "INS MemberRef to TagElement: @link at 0", "INS SimpleName: MaturityLevel to MemberRef at 0"]}, {"root": "DEL QualifiedName: SeverityLevel.ERROR", "operations": ["DEL QualifiedName: SeverityLevel.ERROR"]}, {"root": "DEL QualifiedName: MaturityLevel.EXPERIMENTAL", "operations": ["DEL QualifiedName: MaturityLevel.EXPERIMENTAL"]}]}}, {"BugCheckerSupplier_diff": {"operations": ["Insert MethodDeclaration(143) into TypeDeclaration: class(255) at 9", "Insert Javadoc(133) into MethodDeclaration(143) at 0", "Insert Modifier: public(134) into MethodDeclaration(143) at 1", "Insert Modifier: abstract(135) into MethodDeclaration(143) at 2", "Insert SimpleType: BugCheckerSupplier(137) into MethodDeclaration(143) at 3", "Insert SimpleName: overrideSeverity(138) into MethodDeclaration(143) at 4", "Insert SingleVariableDeclaration(142) into MethodDeclaration(143) at 5", "Insert TextElement: <p>Implementations of this class should be immutable.(25) into TagElement(26) at 10", "Insert TagElement(132) into Javadoc(133) at 0", "Insert SimpleName: BugCheckerSupplier(136) into SimpleType: BugCheckerSupplier(137) at 0", "Insert SimpleType: SeverityLevel(140) into SingleVariableDeclaration(142) at 0", "Insert SimpleName: severity(141) into SingleVariableDeclaration(142) at 1", "Insert TextElement: Returns a new (125) into TagElement(132) at 0", "Insert TagElement: @link(127) into TagElement(132) at 1", "Insert TextElement:  in which the previous (128) into TagElement(132) at 2", "Insert TagElement: @link(130) into TagElement(132) at 3", "Insert TextElement: has been overridden to the given value.(131) into TagElement(132) at 4", "Insert SimpleName: SeverityLevel(139) into SimpleType: SeverityLevel(140) at 0", "Insert MemberRef(114) into TagElement: @link(115) at 0", "Insert SimpleName: BugCheckerSupplier(126) into TagElement: @link(127) at 0", "Insert SimpleName: SeverityLevel(129) into TagElement: @link(130) at 0", "Insert MemberRef(153) into TagElement: @link(154) at 0", "Insert SimpleName: SeverityLevel(112) into MemberRef(114) at 0", "Insert SimpleName: ERROR(113) into MemberRef(114) at 1", "Insert SimpleName: MaturityLevel(151) into MemberRef(153) at 0", "Insert SimpleName: EXPERIMENTAL(152) into MemberRef(153) at 1", "Delete QualifiedName: SeverityLevel.ERROR(111)", "Delete QualifiedName: MaturityLevel.EXPERIMENTAL(129)"]}}, {"ErrorProneCompiler_cluster": {"actions": [{"root": "UPDATE from com.google.errorprone.scanner.ErrorProneScannerSuppliers to com.google.errorprone.scanner.BuiltInCheckerSuppliers", "operations": ["UPD QualifiedName: com.google.errorprone.scanner.ErrorProneScannerSuppliers from com.google.errorprone.scanner.ErrorProneScannerSuppliers to com.google.errorprone.scanner.BuiltInCheckerSuppliers"]}, {"root": "UPDATE from ErrorProneScannerSuppliers to BuiltInCheckerSuppliers", "operations": ["UPD SimpleName: ErrorProneScannerSuppliers from ErrorProneScannerSuppliers to BuiltInCheckerSuppliers"]}]}}, {"ErrorProneCompiler_diff": {"operations": ["Update QualifiedName: com.google.errorprone.scanner.ErrorProneScannerSuppliers(4) to com.google.errorprone.scanner.BuiltInCheckerSuppliers", "Update SimpleName: ErrorProneScannerSuppliers(334) to BuiltInCheckerSuppliers"]}}, {"ErrorProneJavaCompiler_cluster": {"actions": [{"root": "UPDATE from com.google.errorprone.scanner.ErrorProneScannerSuppliers to com.google.errorprone.scanner.BuiltInCheckerSuppliers", "operations": ["UPD QualifiedName: com.google.errorprone.scanner.ErrorProneScannerSuppliers from com.google.errorprone.scanner.ErrorProneScannerSuppliers to com.google.errorprone.scanner.BuiltInCheckerSuppliers"]}, {"root": "MOVE from Block", "operations": ["MOV TryStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 1"]}, {"root": "UPDATE from ErrorProneScannerSuppliers to BuiltInCheckerSuppliers", "operations": ["UPD SimpleName: ErrorProneScannerSuppliers from ErrorProneScannerSuppliers to BuiltInCheckerSuppliers"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: errorProneOptions to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}]}}, {"ErrorProneJavaCompiler_diff": {"operations": ["Update QualifiedName: com.google.errorprone.scanner.ErrorProneScannerSuppliers(2) to com.google.errorprone.scanner.BuiltInCheckerSuppliers", "Move VariableDeclarationStatement(224) into Block(260) at 1", "Move TryStatement(248) into Block(260) at 2", "Update SimpleName: ErrorProneScannerSuppliers(84) to BuiltInCheckerSuppliers", "Insert ExpressionStatement(187) into Block(199) at 0", "Insert Assignment: =(186) into ExpressionStatement(187) at 0", "Insert SimpleName: errorProneOptions(181) into Assignment: =(186) at 0", "Move MethodInvocation(177) into Assignment: =(186) at 1"]}}, {"ErrorProneOptions_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: com.google.common.base.Preconditions to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: java.util.HashMap to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: java.util.Map to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS SimpleType: String to FieldDeclaration at 3", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: OLD_DISABLE_FLAG_PREFIX to VariableDeclarationFragment at 0", "INS StringLiteral: \"-Xepdisable:\" to VariableDeclarationFragment at 1", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "INS EnumDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleName: DEFAULT to EnumConstantDeclaration at 0", "INS EnumConstantDeclaration to EnumDeclaration at 3", "INS Modifier: public to EnumDeclaration at 1", "INS SimpleName: ERROR to EnumConstantDeclaration at 0", "INS SimpleName: Severity to EnumDeclaration at 2", "INS SimpleName: WARN to EnumConstantDeclaration at 0", "INS EnumDeclaration to TypeDeclaration: class at 7", "INS EnumConstantDeclaration to EnumDeclaration at 6", "INS EnumConstantDeclaration to EnumDeclaration at 5"]}, {"root": "INS EnumDeclaration to TypeDeclaration: class at 15", "operations": ["INS SimpleName: FlagStyle to EnumDeclaration at 1", "INS SimpleName: NEW to EnumConstantDeclaration at 0", "INS EnumDeclaration to TypeDeclaration: class at 15", "INS SimpleName: NEITHER to EnumConstantDeclaration at 0", "INS EnumConstantDeclaration to EnumDeclaration at 3", "INS EnumConstantDeclaration to EnumDeclaration at 4", "INS SimpleName: OLD to EnumConstantDeclaration at 0", "INS Modifier: private to EnumDeclaration at 0", "INS EnumConstantDeclaration to EnumDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS IfStatement to Block at 5", "INS QualifiedName: FlagStyle.NEITHER to ReturnStatement at 0", "INS SimpleName: hasOldStyleFlags to Assignment: = at 0", "INS TextElement:  command-line options to TagElement: @param at 1", "INS SimpleName: args to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: hasNewStyleFlags to VariableDeclarationFragment at 0", "INS Modifier: private to MethodDeclaration at 1", "INS BooleanLiteral: true to Assignment: = at 1", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS IfStatement to Block at 2", "INS SimpleName: OLD_DISABLE_FLAG_PREFIX to MethodInvocation at 2", "INS SimpleName: hasNewStyleFlags to InfixExpression: && at 1", "INS QualifiedName: FlagStyle.NEW to ReturnStatement at 0", "INS ReturnStatement to Block at 6", "INS SimpleName: args to InfixExpression: + at 1", "INS VariableDeclarationStatement to Block at 0", "INS Block to IfStatement at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS ParameterizedType: Iterable<String> to SingleVariableDeclaration at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: String to SimpleType: String at 0", "INS TextElement: <p>Mixing old- and new-style error-prone flags is not allowed.  If you mix them, the handling to TagElement at 3", "INS TextElement: of \"last flag wins\" is unclear. to TagElement at 4", "INS SimpleType: InvalidCommandLineOptionException to ClassInstanceCreation at 0", "INS SimpleName: args to EnhancedForStatement at 1", "INS TextElement: Checks the list of command-line arguments and returns whether they contain old-style to TagElement at 0", "INS ReturnStatement to Block at 0", "INS StringLiteral: \"cannot mix old- and new-style error-prone flags: \" to InfixExpression: + at 0", "INS ExpressionStatement to Block at 0", "INS TextElement:  if args contains both old- and new-style flags to TagElement: @throws at 1", "INS SimpleName: hasNewStyleFlags to IfStatement at 0", "INS SimpleName: Iterable to SimpleType: Iterable at 0", "INS SimpleName: hasOldStyleFlags to VariableDeclarationFragment at 0", "INS TagElement: @throws to Javadoc at 2", "INS IfStatement to Block at 4", "INS SimpleName: arg to MethodInvocation at 0", "INS BooleanLiteral: true to Assignment: = at 1", "INS VariableDeclarationStatement to Block at 1", "INS ThrowStatement to Block at 0", "INS SimpleType: Iterable to ParameterizedType: Iterable<String> at 0", "INS Block to IfStatement at 1", "INS Block to EnhancedForStatement at 2", "INS IfStatement to Block at 3", "INS Modifier: static to MethodDeclaration at 2", "INS SimpleName: arg to MethodInvocation at 0", "INS SimpleName: args to SingleVariableDeclaration at 1", "INS SimpleType: String to ParameterizedType: Iterable<String> at 1", "INS SimpleName: startsWith to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS EnhancedForStatement to Block at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: InvalidCommandLineOptionException to TagElement: @throws at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: hasNewStyleFlags to Assignment: = at 0", "INS SimpleName: hasOldStyleFlags to InfixExpression: && at 0", "INS Block to IfStatement at 1", "INS IfStatement to IfStatement at 2", "INS SimpleName: arg to SingleVariableDeclaration at 1", "INS SimpleName: InvalidCommandLineOptionException to SimpleType: InvalidCommandLineOptionException at 0", "INS Assignment: = to ExpressionStatement at 0", "INS QualifiedName: FlagStyle.OLD to ReturnStatement at 0", "INS SimpleName: startsWith to MethodInvocation at 1", "INS SimpleName: getFlagStyle to MethodDeclaration at 4", "INS TextElement: (\"-Xepdisable:<checkname>\"), new-style (\"-Xep:<checkname>[:<severity]\"), or no error-prone to TagElement at 1", "INS Block to IfStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: InvalidCommandLineOptionException to SimpleType: InvalidCommandLineOptionException at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: FlagStyle to SimpleType: FlagStyle at 0", "INS SimpleName: hasOldStyleFlags to IfStatement at 0", "INS IfStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ReturnStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: FLAG_PREFIX to MethodInvocation at 2", "INS SimpleType: InvalidCommandLineOptionException to MethodDeclaration at 6", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to IfStatement at 0", "INS InfixExpression: && to IfStatement at 0", "INS TextElement: flags. to TagElement at 2", "INS SimpleType: FlagStyle to MethodDeclaration at 3", "INS MethodInvocation to IfStatement at 0", "INS Block to MethodDeclaration at 7", "INS BooleanLiteral: false to VariableDeclarationFragment at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Block to IfStatement at 1", "INS BooleanLiteral: false to VariableDeclarationFragment at 1"]}, {"root": "MOVE from EnumDeclaration", "operations": ["MOV Javadoc to EnumDeclaration at 0", "MOV EnumConstantDeclaration to EnumDeclaration at 4"]}, {"root": "INS SimpleType: InvalidCommandLineOptionException to MethodDeclaration at 6", "operations": ["INS SimpleType: InvalidCommandLineOptionException to MethodDeclaration at 6", "INS SimpleName: InvalidCommandLineOptionException to SimpleType: InvalidCommandLineOptionException at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS SimpleName: ErrorProneOptions to TagElement: @link at 0", "INS TextElement:  command-line arguments to TagElement: @param at 1", "INS SimpleName: args to TagElement: @param at 0", "INS SimpleName: InvalidCommandLineOptionException to TagElement: @throws at 0", "INS SimpleName: ErrorProneOptions to TagElement: @link at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @param to Javadoc at 1", "INS TextElement:  if an error-prone option is invalid to TagElement: @throws at 1", "INS TextElement:  instance encapsulating the given arguments to TagElement: @return at 2", "INS TextElement: Given a list of command-line arguments, produce the corresponding  to TagElement at 0", "INS TagElement: @link to TagElement: @return at 1", "INS TagElement: @throws to Javadoc at 3", "INS TagElement to Javadoc at 0", "INS TextElement: instance. to TagElement at 2", "INS TagElement: @return to Javadoc at 2", "INS TagElement: @link to TagElement at 1", "INS TextElement:  an  to TagElement: @return at 0"]}, {"root": "INS SimpleType: InvalidCommandLineOptionException to MethodDeclaration at 6", "operations": ["INS SimpleType: InvalidCommandLineOptionException to MethodDeclaration at 6", "INS SimpleName: InvalidCommandLineOptionException to SimpleType: InvalidCommandLineOptionException at 0"]}, {"root": "UPDATE from Contains options specific to error-prone. to Processes command-line options specific to error-prone.", "operations": ["UPD TextElement: Contains options specific to error-prone. from Contains options specific to error-prone. to Processes command-line options specific to error-prone."]}, {"root": "INS TextElement: <p>error-prone lets the user enable and disable specific checks as well as override their to TagElement at 1", "operations": ["INS TextElement: <p>error-prone lets the user enable and disable specific checks as well as override their to TagElement at 1"]}, {"root": "INS TextElement: built-in severity levels (warning vs. error). to TagElement at 2", "operations": ["INS TextElement: built-in severity levels (warning vs. error). to TagElement at 2"]}, {"root": "INS TextElement: <p>A valid error-prone command-line option looks like:<br> to TagElement at 3", "operations": ["INS TextElement: <p>A valid error-prone command-line option looks like:<br> to TagElement at 3"]}, {"root": "INS TextElement: <pre> to TagElement at 4", "operations": ["INS TextElement: <pre> to TagElement at 4"]}, {"root": "INS TagElement: @code to TagElement at 5", "operations": ["INS TextElement: -Xep:<checkName>[:severity] to TagElement: @code at 0", "INS TagElement: @code to TagElement at 5"]}, {"root": "INS TextElement: </pre> to TagElement at 6", "operations": ["INS TextElement: </pre> to TagElement at 6"]}, {"root": "INS TextElement: <p> to TagElement at 7", "operations": ["INS TextElement: <p> to TagElement at 7"]}, {"root": "INS TagElement: @code to TagElement at 8", "operations": ["INS TagElement: @code to TagElement at 8", "INS TextElement:  checkName to TagElement: @code at 0"]}, {"root": "INS TextElement:  is required and is the canonical name of the check, e.g. \"StringEquality\". to TagElement at 9", "operations": ["INS TextElement:  is required and is the canonical name of the check, e.g. \"StringEquality\". to TagElement at 9"]}, {"root": "INS TagElement: @code to TagElement at 10", "operations": ["INS TextElement:  severity to TagElement: @code at 0", "INS TagElement: @code to TagElement at 10"]}, {"root": "INS TextElement:  is one of {\"OFF\", \"WARN\", \"ERROR\"}.  Multiple flags must be passed to to TagElement at 11", "operations": ["INS TextElement:  is one of {\"OFF\", \"WARN\", \"ERROR\"}.  Multiple flags must be passed to to TagElement at 11"]}, {"root": "INS TextElement: enable or disable multiple checks.  The last flag for a specific check wins. to TagElement at 12", "operations": ["INS TextElement: enable or disable multiple checks.  The last flag for a specific check wins. to TagElement at 12"]}, {"root": "INS TextElement: <p>Examples of usage follow:<br> to TagElement at 13", "operations": ["INS TextElement: <p>Examples of usage follow:<br> to TagElement at 13"]}, {"root": "INS TextElement: <pre> to TagElement at 14", "operations": ["INS TextElement: <pre> to TagElement at 14"]}, {"root": "INS TagElement: @code to TagElement at 15", "operations": ["INS TagElement: @code to TagElement at 15", "INS TextElement: -Xep:StringEquality:ERROR  [turns on StringEquality check as an error] to TagElement: @code at 4", "INS TextElement: -Xep:StringEquality:OFF -Xep:StringEquality  [turns on StringEquality check] to TagElement: @code at 5", "INS TextElement: -Xep:StringEquality:OFF  [turns off StringEquality check] to TagElement: @code at 2", "INS TextElement: -Xep:StringEquality  [turns on StringEquality check with the severity level from its BugPattern to TagElement: @code at 0", "INS TextElement: annotation] to TagElement: @code at 1", "INS TextElement: -Xep:StringEquality:WARN  [turns on StringEquality check as a warning] to TagElement: @code at 3"]}, {"root": "INS TextElement: </pre> to TagElement at 16", "operations": ["INS TextElement: </pre> to TagElement at 16"]}, {"root": "INS TextElement: <p>We will continue to support the old-style error-prone disabling flags for a short transition to TagElement at 17", "operations": ["INS TextElement: <p>We will continue to support the old-style error-prone disabling flags for a short transition to TagElement at 17"]}, {"root": "INS TextElement: period.  Those flags have the following syntax:<br> to TagElement at 18", "operations": ["INS TextElement: period.  Those flags have the following syntax:<br> to TagElement at 18"]}, {"root": "INS TextElement: <pre> to TagElement at 19", "operations": ["INS TextElement: <pre> to TagElement at 19"]}, {"root": "INS TagElement: @code to TagElement at 20", "operations": ["INS TextElement: -Xepdisable:<checkName>[,<checkName>...] to TagElement: @code at 0", "INS TagElement: @code to TagElement at 20"]}, {"root": "INS TextElement: </pre> to TagElement at 21", "operations": ["INS TextElement: </pre> to TagElement at 21"]}, {"root": "UPDATE from DISABLE_FLAG_PREFIX to FLAG_PREFIX", "operations": ["UPD SimpleName: DISABLE_FLAG_PREFIX from DISABLE_FLAG_PREFIX to FLAG_PREFIX"]}, {"root": "UPDATE from \"-Xepdisable:\" to \"-Xep:\"", "operations": ["UPD StringLiteral: \"-Xepdisable:\" from \"-Xepdisable:\" to \"-Xep:\""]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TagElement: @param to Javadoc at 1"]}, {"root": "INS TagElement: @return to Javadoc at 2", "operations": ["INS TagElement: @link to TagElement: @return at 1", "INS TagElement: @return to Javadoc at 2", "INS SimpleName: ErrorProneOptions to TagElement: @link at 0", "INS TextElement:  instance encapsulating the given arguments to TagElement: @return at 2"]}, {"root": "INS TagElement: @throws to Javadoc at 3", "operations": ["INS TextElement:  if an error-prone option is invalid to TagElement: @throws at 1", "INS SimpleName: InvalidCommandLineOptionException to TagElement: @throws at 0", "INS TagElement: @throws to Javadoc at 3"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: checkNotNull to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Preconditions to MethodInvocation at 0", "INS SimpleName: args to MethodInvocation at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS ParameterizedType: HashMap<> to ClassInstanceCreation at 0", "INS SimpleName: HashMap to SimpleType: HashMap at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: severityMap to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleType: HashMap to ParameterizedType: HashMap<> at 0"]}, {"root": "INS SwitchStatement to Block at 4", "operations": ["INS SimpleName: outputArgs to MethodInvocation at 0", "INS SimpleName: remaining to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS EnhancedForStatement to SwitchStatement at 2", "INS StringLiteral: \"invalid flag: \" to InfixExpression: + at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS Block to TryStatement at 0", "INS Block to IfStatement at 2", "INS Block to IfStatement at 2", "INS SimpleName: FLAG_PREFIX to MethodInvocation at 2", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS EnhancedForStatement to SwitchStatement at 5", "INS SimpleName: parts to VariableDeclarationFragment at 0", "INS InfixExpression: > to InfixExpression: || at 0", "INS SimpleName: severity to VariableDeclarationFragment at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS VariableDeclarationStatement to Block at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: arg to InfixExpression: + at 1", "INS MethodInvocation to MethodInvocation at 2", "INS ArrayType: String[] to VariableDeclarationStatement at 0", "INS Dimension to ArrayType: String[] at 1", "INS SimpleType: IllegalArgumentException to SingleVariableDeclaration at 0", "INS SwitchCase to SwitchStatement at 4", "INS SimpleName: addAll to MethodInvocation at 1", "INS SimpleName: InvalidCommandLineOptionException to SimpleType: InvalidCommandLineOptionException at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: NEW to SwitchCase at 0", "INS CatchClause to TryStatement at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: parts to ArrayAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: FLAG_PREFIX to MethodInvocation at 0", "INS SwitchCase to SwitchStatement at 1", "INS SimpleName: IllegalStateException to SimpleType: IllegalStateException at 0", "INS SimpleName: startsWith to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: Severity to VariableDeclarationStatement at 0", "INS QualifiedName: parts.length to InfixExpression: == at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS IfStatement to Block at 2", "INS ThrowStatement to Block at 0", "INS SimpleName: String to SimpleType: String at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: InvalidCommandLineOptionException to SimpleType: InvalidCommandLineOptionException at 0", "INS SimpleName: args to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: OLD to SwitchCase at 0", "INS SimpleName: checkName to MethodInvocation at 2", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS IfStatement to Block at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: arg to MethodInvocation at 0", "INS SimpleName: arg to SingleVariableDeclaration at 1", "INS SimpleName: flagStyle to InfixExpression: + at 1", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: flagStyle to SwitchStatement at 0", "INS BreakStatement to SwitchStatement at 9", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS BreakStatement to SwitchStatement at 3", "INS IfStatement to Block at 5", "INS ArrayAccess to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: arg to InfixExpression: + at 1", "INS SimpleName: outputArgs to MethodInvocation at 0", "INS SwitchCase to SwitchStatement at 10", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleName: severity to MethodInvocation at 3", "INS SimpleName: arg to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS NumberLiteral: 0 to ArrayAccess at 1", "INS SimpleType: String to ArrayType: String[] at 0", "INS SimpleName: checkName to VariableDeclarationFragment at 0", "INS SimpleName: severity to Assignment: = at 0", "INS SimpleName: args to EnhancedForStatement at 1", "INS ExpressionStatement to Block at 6", "INS SimpleName: NEITHER to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 7", "INS NumberLiteral: 1 to InfixExpression: == at 1", "INS NumberLiteral: 0 to ArrayAccess at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS SimpleName: Severity to SimpleType: Severity at 0", "INS SimpleType: InvalidCommandLineOptionException to ClassInstanceCreation at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1", "INS QualifiedName: Severity.DEFAULT to Assignment: = at 1", "INS SimpleName: severity to Assignment: = at 0", "INS StringLiteral: \"Unhandled enum value: \" to InfixExpression: + at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS StringLiteral: \"invalid flag: \" to InfixExpression: + at 0", "INS ExpressionStatement to Block at 0", "INS ArrayAccess to MethodInvocation at 0", "INS SwitchStatement to Block at 4", "INS SimpleName: arg to MethodInvocation at 2", "INS ClassInstanceCreation to ThrowStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: parts to ArrayAccess at 0", "INS SimpleName: severityMap to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: remaining to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: parts to ArrayAccess at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: substring to MethodInvocation at 1", "INS SimpleName: valueOf to MethodInvocation at 1", "INS ThrowStatement to SwitchStatement at 11", "INS NumberLiteral: 1 to ArrayAccess at 1", "INS QualifiedName: parts.length to InfixExpression: > at 0", "INS BreakStatement to SwitchStatement at 6", "INS SimpleName: put to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: || at 1", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to SwitchStatement at 8", "INS SimpleType: IllegalStateException to ClassInstanceCreation at 0", "INS SimpleName: add to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 4", "INS SimpleName: split to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: Severity to MethodInvocation at 0", "INS TryStatement to Block at 0", "INS NumberLiteral: 2 to InfixExpression: > at 1", "INS ArrayAccess to VariableDeclarationFragment at 1", "INS StringLiteral: \":\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: InvalidCommandLineOptionException to ClassInstanceCreation at 0", "INS Block to CatchClause at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: Preconditions to MethodInvocation at 0", "INS SimpleName: checkNotNull to MethodInvocation at 1", "INS SimpleName: args to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from Given a list of command-line arguments, produce the corresponding ErrorProneOptions instance. to Given a list of command-line arguments, produce the corresponding ", "operations": ["UPD TextElement: Given a list of command-line arguments, produce the corresponding ErrorProneOptions instance. from Given a list of command-line arguments, produce the corresponding ErrorProneOptions instance. to Given a list of command-line arguments, produce the corresponding "]}, {"root": "INS TagElement: @link to TagElement at 1", "operations": ["INS TagElement: @link to TagElement at 1", "INS SimpleName: ErrorProneOptions to TagElement: @link at 0"]}, {"root": "UPDATE from If multiple -Xepdisable flags are passed, the last one wins. to instance.", "operations": ["UPD TextElement: If multiple -Xepdisable flags are passed, the last one wins. from If multiple -Xepdisable flags are passed, the last one wins. to instance."]}, {"root": "MOVE from TagElement: @param", "operations": ["MOV SimpleName: args to TagElement: @param at 0", "MOV TextElement:  compiler args, possibly  to TagElement: @param at 1"]}, {"root": "UPDATE from  compiler args, possibly  to  command-line arguments", "operations": ["UPD TextElement:  compiler args, possibly  from  compiler args, possibly  to  command-line arguments"]}, {"root": "UPDATE from  null to  an ", "operations": ["UPD TextElement:  null from  null to  an "]}, {"root": "MOVE from TagElement: @return", "operations": ["MOV TextElement:  null to TagElement: @return at 0"]}, {"root": "UPDATE from ImmutableMap.Builder<String,Severity> to Map<String,Severity>", "operations": ["UPD ParameterizedType: ImmutableMap.Builder<String,Severity> from ImmutableMap.Builder<String,Severity> to Map<String,Severity>"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: ImmutableMap.Builder<String,Severity> to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleType: FlagStyle to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: FlagStyle to SimpleType: FlagStyle at 0", "INS SimpleType: FlagStyle to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "INS ParenthesizedExpression to ConditionalExpression at 0", "operations": ["INS ParenthesizedExpression to ConditionalExpression at 0", "INS MethodInvocation to InfixExpression: || at 0", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS SimpleName: option to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: FLAG_PREFIX to MethodInvocation at 2", "INS SimpleName: startsWith to MethodInvocation at 1"]}, {"root": "UPDATE from ImmutableMap.Builder to Map", "operations": ["UPD SimpleType: ImmutableMap.Builder from ImmutableMap.Builder to Map"]}, {"root": "UPDATE from severityMap to flagStyle", "operations": ["UPD SimpleName: severityMap from severityMap to flagStyle"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV Block to EnhancedForStatement at 2", "MOV SimpleName: args to EnhancedForStatement at 1", "MOV SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "INS SimpleName: Map to SimpleType: ImmutableMap.Builder at 0", "operations": ["INS SimpleName: Map to SimpleType: ImmutableMap.Builder at 0"]}, {"root": "UPDATE from ImmutableMap to getFlagStyle", "operations": ["UPD SimpleName: ImmutableMap from ImmutableMap to getFlagStyle"]}, {"root": "UPDATE from builder to args", "operations": ["UPD SimpleName: builder from builder to args"]}, {"root": "UPDATE from severityMap to ImmutableMap", "operations": ["UPD SimpleName: severityMap from severityMap to ImmutableMap"]}, {"root": "UPDATE from build to copyOf", "operations": ["UPD SimpleName: build from build to copyOf"]}, {"root": "INS SimpleName: severityMap to MethodInvocation at 2", "operations": ["INS SimpleName: severityMap to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: DISABLE_FLAG_PREFIX to MethodInvocation at 2", "MOV SimpleName: startsWith to MethodInvocation at 1", "MOV SimpleName: option to MethodInvocation at 0"]}, {"root": "UPDATE from DISABLE_FLAG_PREFIX to OLD_DISABLE_FLAG_PREFIX", "operations": ["UPD SimpleName: DISABLE_FLAG_PREFIX from DISABLE_FLAG_PREFIX to OLD_DISABLE_FLAG_PREFIX", "UPD SimpleName: DISABLE_FLAG_PREFIX from DISABLE_FLAG_PREFIX to OLD_DISABLE_FLAG_PREFIX", "UPD SimpleName: DISABLE_FLAG_PREFIX from DISABLE_FLAG_PREFIX to OLD_DISABLE_FLAG_PREFIX"]}, {"root": "INS ClassInstanceCreation to Assignment: = at 1", "operations": ["INS SimpleName: HashMap to SimpleType: HashMap at 0", "INS SimpleType: HashMap to ParameterizedType: HashMap<> at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS ParameterizedType: HashMap<> to ClassInstanceCreation at 0"]}, {"root": "DEL EnumDeclaration", "operations": ["DEL Modifier: public", "DEL SimpleName: Severity", "DEL EnumDeclaration"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL TagElement: @param", "operations": ["DEL TagElement: @param", "DEL TagElement: @code"]}, {"root": "DEL QualifiedName: ImmutableMap.Builder", "operations": ["DEL QualifiedName: ImmutableMap.Builder"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: builder", "DEL SimpleName: ImmutableMap"]}, {"root": "DEL IfStatement", "operations": ["DEL EnhancedForStatement", "DEL Block", "DEL IfStatement"]}]}}, {"ErrorProneOptions_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(629) at 1", "Insert ImportDeclaration(11) into CompilationUnit(629) at 5", "Insert ImportDeclaration(13) into CompilationUnit(629) at 6", "Insert QualifiedName: com.google.common.base.Preconditions(2) into ImportDeclaration(3) at 0", "Insert QualifiedName: java.util.HashMap(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: java.util.Map(12) into ImportDeclaration(13) at 0", "Insert FieldDeclaration(69) into TypeDeclaration: class(628) at 4", "Insert EnumDeclaration(119) into TypeDeclaration: class(628) at 6", "Insert EnumDeclaration(532) into TypeDeclaration: class(628) at 14", "Insert MethodDeclaration(627) into TypeDeclaration: class(628) at 15", "Insert Modifier: private(61) into FieldDeclaration(69) at 0", "Insert Modifier: static(62) into FieldDeclaration(69) at 1", "Insert Modifier: final(63) into FieldDeclaration(69) at 2", "Insert SimpleType: String(65) into FieldDeclaration(69) at 3", "Insert VariableDeclarationFragment(68) into FieldDeclaration(69) at 4", "Move Javadoc(27) into EnumDeclaration(119) at 0", "Insert Modifier: public(109) into EnumDeclaration(119) at 1", "Insert SimpleName: Severity(110) into EnumDeclaration(119) at 2", "Insert EnumConstantDeclaration(112) into EnumDeclaration(119) at 3", "Move EnumConstantDeclaration(31) into EnumDeclaration(119) at 4", "Insert EnumConstantDeclaration(116) into EnumDeclaration(119) at 5", "Insert EnumConstantDeclaration(118) into EnumDeclaration(119) at 6", "Insert SimpleType: InvalidCommandLineOptionException(237) into MethodDeclaration(479) at 6", "Insert Javadoc(496) into MethodDeclaration(523) at 0", "Insert SimpleType: InvalidCommandLineOptionException(509) into MethodDeclaration(523) at 6", "Insert Modifier: private(524) into EnumDeclaration(532) at 0", "Insert SimpleName: FlagStyle(525) into EnumDeclaration(532) at 1", "Insert EnumConstantDeclaration(527) into EnumDeclaration(532) at 2", "Insert EnumConstantDeclaration(529) into EnumDeclaration(532) at 3", "Insert EnumConstantDeclaration(531) into EnumDeclaration(532) at 4", "Insert Javadoc(545) into MethodDeclaration(627) at 0", "Insert Modifier: private(546) into MethodDeclaration(627) at 1", "Insert Modifier: static(547) into MethodDeclaration(627) at 2", "Insert SimpleType: FlagStyle(549) into MethodDeclaration(627) at 3", "Insert SimpleName: getFlagStyle(550) into MethodDeclaration(627) at 4", "Insert SingleVariableDeclaration(557) into MethodDeclaration(627) at 5", "Insert SimpleType: InvalidCommandLineOptionException(559) into MethodDeclaration(627) at 6", "Insert Block(626) into MethodDeclaration(627) at 7", "Update TextElement: Contains options specific to error-prone.(8) to Processes command-line options specific to error-prone.", "Insert TextElement: <p>error-prone lets the user enable and disable specific checks as well as override their(15) into TagElement(46) at 1", "Insert TextElement: built-in severity levels (warning vs. error).(16) into TagElement(46) at 2", "Insert TextElement: <p>A valid error-prone command-line option looks like:<br>(17) into TagElement(46) at 3", "Insert TextElement: <pre>(18) into TagElement(46) at 4", "Insert TagElement: @code(20) into TagElement(46) at 5", "Insert TextElement: </pre>(21) into TagElement(46) at 6", "Insert TextElement: <p>(22) into TagElement(46) at 7", "Insert TagElement: @code(24) into TagElement(46) at 8", "Insert TextElement:  is required and is the canonical name of the check, e.g. \"StringEquality\".(25) into TagElement(46) at 9", "Insert TagElement: @code(27) into TagElement(46) at 10", "Insert TextElement:  is one of {\"OFF\", \"WARN\", \"ERROR\"}.  Multiple flags must be passed to(28) into TagElement(46) at 11", "Insert TextElement: enable or disable multiple checks.  The last flag for a specific check wins.(29) into TagElement(46) at 12", "Insert TextElement: <p>Examples of usage follow:<br>(30) into TagElement(46) at 13", "Insert TextElement: <pre>(31) into TagElement(46) at 14", "Insert TagElement: @code(38) into TagElement(46) at 15", "Insert TextElement: </pre>(39) into TagElement(46) at 16", "Insert TextElement: <p>We will continue to support the old-style error-prone disabling flags for a short transition(40) into TagElement(46) at 17", "Insert TextElement: period.  Those flags have the following syntax:<br>(41) into TagElement(46) at 18", "Insert TextElement: <pre>(42) into TagElement(46) at 19", "Insert TagElement: @code(44) into TagElement(46) at 20", "Insert TextElement: </pre>(45) into TagElement(46) at 21", "Update SimpleName: DISABLE_FLAG_PREFIX(20) to FLAG_PREFIX", "Update StringLiteral: \"-Xepdisable:\"(21) to \"-Xep:\"", "Insert SimpleName: String(64) into SimpleType: String(65) at 0", "Insert SimpleName: OLD_DISABLE_FLAG_PREFIX(66) into VariableDeclarationFragment(68) at 0", "Insert StringLiteral: \"-Xepdisable:\"(67) into VariableDeclarationFragment(68) at 1", "Insert SimpleName: DEFAULT(111) into EnumConstantDeclaration(112) at 0", "Insert SimpleName: WARN(115) into EnumConstantDeclaration(116) at 0", "Insert SimpleName: ERROR(117) into EnumConstantDeclaration(118) at 0", "Insert TagElement: @param(214) into Javadoc(223) at 1", "Insert TagElement: @return(219) into Javadoc(223) at 2", "Insert TagElement: @throws(222) into Javadoc(223) at 3", "Insert SimpleName: InvalidCommandLineOptionException(236) into SimpleType: InvalidCommandLineOptionException(237) at 0", "Insert ExpressionStatement(242) into Block(478) at 0", "Insert VariableDeclarationStatement(267) into Block(478) at 2", "Insert SwitchStatement(466) into Block(478) at 4", "Insert TagElement(484) into Javadoc(496) at 0", "Insert TagElement: @param(487) into Javadoc(496) at 1", "Insert TagElement: @return(492) into Javadoc(496) at 2", "Insert TagElement: @throws(495) into Javadoc(496) at 3", "Insert SimpleName: InvalidCommandLineOptionException(508) into SimpleType: InvalidCommandLineOptionException(509) at 0", "Insert ExpressionStatement(514) into Block(522) at 0", "Insert SimpleName: OLD(526) into EnumConstantDeclaration(527) at 0", "Insert SimpleName: NEW(528) into EnumConstantDeclaration(529) at 0", "Insert SimpleName: NEITHER(530) into EnumConstantDeclaration(531) at 0", "Insert TagElement(538) into Javadoc(545) at 0", "Insert TagElement: @param(541) into Javadoc(545) at 1", "Insert TagElement: @throws(544) into Javadoc(545) at 2", "Insert SimpleName: FlagStyle(548) into SimpleType: FlagStyle(549) at 0", "Insert ParameterizedType: Iterable<String>(555) into SingleVariableDeclaration(557) at 0", "Insert SimpleName: args(556) into SingleVariableDeclaration(557) at 1", "Insert SimpleName: InvalidCommandLineOptionException(558) into SimpleType: InvalidCommandLineOptionException(559) at 0", "Insert VariableDeclarationStatement(564) into Block(626) at 0", "Insert VariableDeclarationStatement(569) into Block(626) at 1", "Insert IfStatement(601) into Block(626) at 2", "Insert IfStatement(613) into Block(626) at 3", "Insert IfStatement(618) into Block(626) at 4", "Insert IfStatement(623) into Block(626) at 5", "Insert ReturnStatement(625) into Block(626) at 6", "Insert TextElement: -Xep:<checkName>[:severity](19) into TagElement: @code(20) at 0", "Insert TextElement:  checkName(23) into TagElement: @code(24) at 0", "Insert TextElement:  severity(26) into TagElement: @code(27) at 0", "Insert TextElement: -Xep:StringEquality  [turns on StringEquality check with the severity level from its BugPattern(32) into TagElement: @code(38) at 0", "Insert TextElement: annotation](33) into TagElement: @code(38) at 1", "Insert TextElement: -Xep:StringEquality:OFF  [turns off StringEquality check](34) into TagElement: @code(38) at 2", "Insert TextElement: -Xep:StringEquality:WARN  [turns on StringEquality check as a warning](35) into TagElement: @code(38) at 3", "Insert TextElement: -Xep:StringEquality:ERROR  [turns on StringEquality check as an error](36) into TagElement: @code(38) at 4", "Insert TextElement: -Xep:StringEquality:OFF -Xep:StringEquality  [turns on StringEquality check](37) into TagElement: @code(38) at 5", "Insert TextElement: -Xepdisable:<checkName>[,<checkName>...](43) into TagElement: @code(44) at 0", "Update TextElement: Given a list of command-line arguments, produce the corresponding ErrorProneOptions instance.(149) to Given a list of command-line arguments, produce the corresponding ", "Insert TagElement: @link(209) into TagElement(211) at 1", "Update TextElement: If multiple -Xepdisable flags are passed, the last one wins.(150) to instance.", "Move SimpleName: args(152) into TagElement: @param(214) at 0", "Update TextElement:  compiler args, possibly (153) to  command-line arguments", "Move TextElement:  compiler args, possibly (153) into TagElement: @param(214) at 1", "Update TextElement:  null(154) to  an ", "Move TextElement:  null(154) into TagElement: @return(219) at 0", "Insert TagElement: @link(217) into TagElement: @return(219) at 1", "Insert TextElement:  instance encapsulating the given arguments(218) into TagElement: @return(219) at 2", "Insert SimpleName: InvalidCommandLineOptionException(220) into TagElement: @throws(222) at 0", "Insert TextElement:  if an error-prone option is invalid(221) into TagElement: @throws(222) at 1", "Insert MethodInvocation(241) into ExpressionStatement(242) at 0", "Update ParameterizedType: ImmutableMap.Builder<String,Severity>(187) to Map<String,Severity>", "Move ParameterizedType: ImmutableMap.Builder<String,Severity>(187) into VariableDeclarationStatement(267) at 0", "Insert VariableDeclarationFragment(266) into VariableDeclarationStatement(267) at 1", "Insert SimpleType: FlagStyle(269) into VariableDeclarationStatement(275) at 0", "Insert SimpleName: flagStyle(276) into SwitchStatement(466) at 0", "Insert SwitchCase(278) into SwitchStatement(466) at 1", "Insert EnhancedForStatement(333) into SwitchStatement(466) at 2", "Insert BreakStatement(334) into SwitchStatement(466) at 3", "Insert SwitchCase(336) into SwitchStatement(466) at 4", "Insert EnhancedForStatement(448) into SwitchStatement(466) at 5", "Insert BreakStatement(449) into SwitchStatement(466) at 6", "Insert SwitchCase(451) into SwitchStatement(466) at 7", "Insert ExpressionStatement(456) into SwitchStatement(466) at 8", "Insert BreakStatement(457) into SwitchStatement(466) at 9", "Insert SwitchCase(458) into SwitchStatement(466) at 10", "Insert ThrowStatement(465) into SwitchStatement(466) at 11", "Insert TextElement: Given a list of command-line arguments, produce the corresponding (480) into TagElement(484) at 0", "Insert TagElement: @link(482) into TagElement(484) at 1", "Insert TextElement: instance.(483) into TagElement(484) at 2", "Insert SimpleName: args(485) into TagElement: @param(487) at 0", "Insert TextElement:  command-line arguments(486) into TagElement: @param(487) at 1", "Insert TextElement:  an (488) into TagElement: @return(492) at 0", "Insert TagElement: @link(490) into TagElement: @return(492) at 1", "Insert TextElement:  instance encapsulating the given arguments(491) into TagElement: @return(492) at 2", "Insert SimpleName: InvalidCommandLineOptionException(493) into TagElement: @throws(495) at 0", "Insert TextElement:  if an error-prone option is invalid(494) into TagElement: @throws(495) at 1", "Insert MethodInvocation(513) into ExpressionStatement(514) at 0", "Insert TextElement: Checks the list of command-line arguments and returns whether they contain old-style(533) into TagElement(538) at 0", "Insert TextElement: (\"-Xepdisable:<checkname>\"), new-style (\"-Xep:<checkname>[:<severity]\"), or no error-prone(534) into TagElement(538) at 1", "Insert TextElement: flags.(535) into TagElement(538) at 2", "Insert TextElement: <p>Mixing old- and new-style error-prone flags is not allowed.  If you mix them, the handling(536) into TagElement(538) at 3", "Insert TextElement: of \"last flag wins\" is unclear.(537) into TagElement(538) at 4", "Insert SimpleName: args(539) into TagElement: @param(541) at 0", "Insert TextElement:  command-line options(540) into TagElement: @param(541) at 1", "Insert SimpleName: InvalidCommandLineOptionException(542) into TagElement: @throws(544) at 0", "Insert TextElement:  if args contains both old- and new-style flags(543) into TagElement: @throws(544) at 1", "Insert SimpleType: Iterable(552) into ParameterizedType: Iterable<String>(555) at 0", "Insert SimpleType: String(554) into ParameterizedType: Iterable<String>(555) at 1", "Insert PrimitiveType: boolean(560) into VariableDeclarationStatement(564) at 0", "Insert VariableDeclarationFragment(563) into VariableDeclarationStatement(564) at 1", "Insert PrimitiveType: boolean(565) into VariableDeclarationStatement(569) at 0", "Insert VariableDeclarationFragment(568) into VariableDeclarationStatement(569) at 1", "Move InfixExpression: !=(196) into IfStatement(601) at 0", "Insert Block(600) into IfStatement(601) at 1", "Insert InfixExpression: &&(604) into IfStatement(613) at 0", "Insert Block(612) into IfStatement(613) at 1", "Insert SimpleName: hasOldStyleFlags(614) into IfStatement(618) at 0", "Insert Block(617) into IfStatement(618) at 1", "Insert SimpleName: hasNewStyleFlags(619) into IfStatement(623) at 0", "Insert Block(622) into IfStatement(623) at 1", "Insert QualifiedName: FlagStyle.NEITHER(624) into ReturnStatement(625) at 0", "Insert ParenthesizedExpression(97) into ConditionalExpression(101) at 0", "Insert SimpleName: ErrorProneOptions(208) into TagElement: @link(209) at 0", "Insert SimpleName: ErrorProneOptions(216) into TagElement: @link(217) at 0", "Insert SimpleName: Preconditions(238) into MethodInvocation(241) at 0", "Insert SimpleName: checkNotNull(239) into MethodInvocation(241) at 1", "Insert SimpleName: args(240) into MethodInvocation(241) at 2", "Update SimpleType: ImmutableMap.Builder(182) to Map", "Insert SimpleName: severityMap(261) into VariableDeclarationFragment(266) at 0", "Insert ClassInstanceCreation(265) into VariableDeclarationFragment(266) at 1", "Insert SimpleName: FlagStyle(268) into SimpleType: FlagStyle(269) at 0", "Update SimpleName: severityMap(188) to flagStyle", "Insert SimpleName: OLD(277) into SwitchCase(278) at 0", "Move SingleVariableDeclaration(200) into EnhancedForStatement(333) at 0", "Move SimpleName: args(201) into EnhancedForStatement(333) at 1", "Move Block(249) into EnhancedForStatement(333) at 2", "Insert SimpleName: NEW(335) into SwitchCase(336) at 0", "Insert SingleVariableDeclaration(340) into EnhancedForStatement(448) at 0", "Insert SimpleName: args(341) into EnhancedForStatement(448) at 1", "Insert Block(447) into EnhancedForStatement(448) at 2", "Insert SimpleName: NEITHER(450) into SwitchCase(451) at 0", "Insert MethodInvocation(455) into ExpressionStatement(456) at 0", "Insert ClassInstanceCreation(464) into ThrowStatement(465) at 0", "Insert SimpleName: ErrorProneOptions(481) into TagElement: @link(482) at 0", "Insert SimpleName: ErrorProneOptions(489) into TagElement: @link(490) at 0", "Insert SimpleName: Preconditions(510) into MethodInvocation(513) at 0", "Insert SimpleName: checkNotNull(511) into MethodInvocation(513) at 1", "Insert SimpleName: args(512) into MethodInvocation(513) at 2", "Insert SimpleName: Iterable(551) into SimpleType: Iterable(552) at 0", "Insert SimpleName: String(553) into SimpleType: String(554) at 0", "Insert SimpleName: hasOldStyleFlags(561) into VariableDeclarationFragment(563) at 0", "Insert BooleanLiteral: false(562) into VariableDeclarationFragment(563) at 1", "Insert SimpleName: hasNewStyleFlags(566) into VariableDeclarationFragment(568) at 0", "Insert BooleanLiteral: false(567) into VariableDeclarationFragment(568) at 1", "Insert EnhancedForStatement(599) into Block(600) at 0", "Insert SimpleName: hasOldStyleFlags(602) into InfixExpression: &&(604) at 0", "Insert SimpleName: hasNewStyleFlags(603) into InfixExpression: &&(604) at 1", "Insert ThrowStatement(611) into Block(612) at 0", "Insert ReturnStatement(616) into Block(617) at 0", "Insert ReturnStatement(621) into Block(622) at 0", "Insert InfixExpression: ||(96) into ParenthesizedExpression(97) at 0", "Insert SimpleName: Map(254) into SimpleType: Map(255) at 0", "Insert ParameterizedType: HashMap<>(264) into ClassInstanceCreation(265) at 0", "Update SimpleName: ImmutableMap(189) to getFlagStyle", "Update SimpleName: builder(190) to args", "Insert SimpleType: String(338) into SingleVariableDeclaration(340) at 0", "Insert SimpleName: arg(339) into SingleVariableDeclaration(340) at 1", "Insert IfStatement(446) into Block(447) at 0", "Insert SimpleName: outputArgs(452) into MethodInvocation(455) at 0", "Insert SimpleName: addAll(453) into MethodInvocation(455) at 1", "Insert SimpleName: args(454) into MethodInvocation(455) at 2", "Insert SimpleType: IllegalStateException(460) into ClassInstanceCreation(464) at 0", "Insert InfixExpression: +(463) into ClassInstanceCreation(464) at 1", "Update SimpleName: severityMap(255) to ImmutableMap", "Update SimpleName: build(256) to copyOf", "Insert SimpleName: severityMap(471) into MethodInvocation(472) at 2", "Insert SingleVariableDeclaration(576) into EnhancedForStatement(599) at 0", "Insert SimpleName: args(577) into EnhancedForStatement(599) at 1", "Insert Block(598) into EnhancedForStatement(599) at 2", "Insert ClassInstanceCreation(610) into ThrowStatement(611) at 0", "Insert QualifiedName: FlagStyle.OLD(615) into ReturnStatement(616) at 0", "Insert QualifiedName: FlagStyle.NEW(620) into ReturnStatement(621) at 0", "Insert MethodInvocation(91) into InfixExpression: ||(96) at 0", "Insert MethodInvocation(95) into InfixExpression: ||(96) at 1", "Insert SimpleType: HashMap(263) into ParameterizedType: HashMap<>(264) at 0", "Insert SimpleName: String(337) into SimpleType: String(338) at 0", "Insert MethodInvocation(345) into IfStatement(446) at 0", "Insert Block(439) into IfStatement(446) at 1", "Insert Block(445) into IfStatement(446) at 2", "Insert SimpleName: IllegalStateException(459) into SimpleType: IllegalStateException(460) at 0", "Insert StringLiteral: \"Unhandled enum value: \"(461) into InfixExpression: +(463) at 0", "Insert SimpleName: flagStyle(462) into InfixExpression: +(463) at 1", "Insert SimpleType: String(574) into SingleVariableDeclaration(576) at 0", "Insert SimpleName: arg(575) into SingleVariableDeclaration(576) at 1", "Insert IfStatement(597) into Block(598) at 0", "Insert SimpleType: InvalidCommandLineOptionException(606) into ClassInstanceCreation(610) at 0", "Insert InfixExpression: +(609) into ClassInstanceCreation(610) at 1", "Insert SimpleName: option(88) into MethodInvocation(91) at 0", "Insert SimpleName: startsWith(89) into MethodInvocation(91) at 1", "Insert SimpleName: FLAG_PREFIX(90) into MethodInvocation(91) at 2", "Move SimpleName: option(51) into MethodInvocation(95) at 0", "Move SimpleName: startsWith(52) into MethodInvocation(95) at 1", "Update SimpleName: DISABLE_FLAG_PREFIX(53) to OLD_DISABLE_FLAG_PREFIX", "Move SimpleName: DISABLE_FLAG_PREFIX(53) into MethodInvocation(95) at 2", "Insert SimpleName: HashMap(262) into SimpleType: HashMap(263) at 0", "Update SimpleName: DISABLE_FLAG_PREFIX(204) to OLD_DISABLE_FLAG_PREFIX", "Insert SimpleName: arg(342) into MethodInvocation(345) at 0", "Insert SimpleName: startsWith(343) into MethodInvocation(345) at 1", "Insert SimpleName: FLAG_PREFIX(344) into MethodInvocation(345) at 2", "Insert VariableDeclarationStatement(356) into Block(439) at 0", "Insert VariableDeclarationStatement(367) into Block(439) at 1", "Insert IfStatement(385) into Block(439) at 2", "Insert VariableDeclarationStatement(393) into Block(439) at 3", "Insert VariableDeclarationStatement(398) into Block(439) at 4", "Insert IfStatement(432) into Block(439) at 5", "Insert ExpressionStatement(438) into Block(439) at 6", "Insert ExpressionStatement(444) into Block(445) at 0", "Insert SimpleName: String(573) into SimpleType: String(574) at 0", "Insert MethodInvocation(581) into IfStatement(597) at 0", "Insert Block(586) into IfStatement(597) at 1", "Insert IfStatement(596) into IfStatement(597) at 2", "Insert SimpleName: InvalidCommandLineOptionException(605) into SimpleType: InvalidCommandLineOptionException(606) at 0", "Insert StringLiteral: \"cannot mix old- and new-style error-prone flags: \"(607) into InfixExpression: +(609) at 0", "Insert SimpleName: args(608) into InfixExpression: +(609) at 1", "Insert SimpleType: String(347) into VariableDeclarationStatement(356) at 0", "Insert VariableDeclarationFragment(355) into VariableDeclarationStatement(356) at 1", "Insert ArrayType: String[](360) into VariableDeclarationStatement(367) at 0", "Insert VariableDeclarationFragment(366) into VariableDeclarationStatement(367) at 1", "Insert InfixExpression: ||(376) into IfStatement(385) at 0", "Insert Block(384) into IfStatement(385) at 1", "Insert SimpleType: String(387) into VariableDeclarationStatement(393) at 0", "Insert VariableDeclarationFragment(392) into VariableDeclarationStatement(393) at 1", "Insert SimpleType: Severity(395) into VariableDeclarationStatement(398) at 0", "Insert VariableDeclarationFragment(397) into VariableDeclarationStatement(398) at 1", "Insert InfixExpression: ==(401) into IfStatement(432) at 0", "Insert Block(406) into IfStatement(432) at 1", "Insert Block(431) into IfStatement(432) at 2", "Insert MethodInvocation(437) into ExpressionStatement(438) at 0", "Insert MethodInvocation(443) into ExpressionStatement(444) at 0", "Insert SimpleName: arg(578) into MethodInvocation(581) at 0", "Insert SimpleName: startsWith(579) into MethodInvocation(581) at 1", "Insert SimpleName: OLD_DISABLE_FLAG_PREFIX(580) into MethodInvocation(581) at 2", "Insert ExpressionStatement(585) into Block(586) at 0", "Insert MethodInvocation(590) into IfStatement(596) at 0", "Insert Block(595) into IfStatement(596) at 1", "Insert ClassInstanceCreation(308) into Assignment: =(309) at 1", "Insert SimpleName: String(346) into SimpleType: String(347) at 0", "Insert SimpleName: remaining(348) into VariableDeclarationFragment(355) at 0", "Insert MethodInvocation(354) into VariableDeclarationFragment(355) at 1", "Insert SimpleType: String(358) into ArrayType: String[](360) at 0", "Insert Dimension(359) into ArrayType: String[](360) at 1", "Insert SimpleName: parts(361) into VariableDeclarationFragment(366) at 0", "Insert MethodInvocation(365) into VariableDeclarationFragment(366) at 1", "Insert InfixExpression: >(370) into InfixExpression: ||(376) at 0", "Insert MethodInvocation(375) into InfixExpression: ||(376) at 1", "Insert ThrowStatement(383) into Block(384) at 0", "Insert SimpleName: String(386) into SimpleType: String(387) at 0", "Insert SimpleName: checkName(388) into VariableDeclarationFragment(392) at 0", "Insert ArrayAccess(391) into VariableDeclarationFragment(392) at 1", "Insert SimpleName: Severity(394) into SimpleType: Severity(395) at 0", "Insert SimpleName: severity(396) into VariableDeclarationFragment(397) at 0", "Insert QualifiedName: parts.length(399) into InfixExpression: ==(401) at 0", "Insert NumberLiteral: 1(400) into InfixExpression: ==(401) at 1", "Insert ExpressionStatement(405) into Block(406) at 0", "Insert TryStatement(430) into Block(431) at 0", "Insert SimpleName: severityMap(433) into MethodInvocation(437) at 0", "Insert SimpleName: put(434) into MethodInvocation(437) at 1", "Insert SimpleName: checkName(435) into MethodInvocation(437) at 2", "Insert SimpleName: severity(436) into MethodInvocation(437) at 3", "Insert SimpleName: outputArgs(440) into MethodInvocation(443) at 0", "Insert SimpleName: add(441) into MethodInvocation(443) at 1", "Insert SimpleName: arg(442) into MethodInvocation(443) at 2", "Insert Assignment: =(584) into ExpressionStatement(585) at 0", "Insert SimpleName: arg(587) into MethodInvocation(590) at 0", "Insert SimpleName: startsWith(588) into MethodInvocation(590) at 1", "Insert SimpleName: FLAG_PREFIX(589) into MethodInvocation(590) at 2", "Insert ExpressionStatement(594) into Block(595) at 0", "Insert ParameterizedType: HashMap<>(307) into ClassInstanceCreation(308) at 0", "Insert SimpleName: arg(349) into MethodInvocation(354) at 0", "Insert SimpleName: substring(350) into MethodInvocation(354) at 1", "Insert MethodInvocation(353) into MethodInvocation(354) at 2", "Insert SimpleName: String(357) into SimpleType: String(358) at 0", "Insert SimpleName: remaining(362) into MethodInvocation(365) at 0", "Insert SimpleName: split(363) into MethodInvocation(365) at 1", "Insert StringLiteral: \":\"(364) into MethodInvocation(365) at 2", "Insert QualifiedName: parts.length(368) into InfixExpression: >(370) at 0", "Insert NumberLiteral: 2(369) into InfixExpression: >(370) at 1", "Insert ArrayAccess(373) into MethodInvocation(375) at 0", "Insert SimpleName: isEmpty(374) into MethodInvocation(375) at 1", "Insert ClassInstanceCreation(382) into ThrowStatement(383) at 0", "Insert SimpleName: parts(389) into ArrayAccess(391) at 0", "Insert NumberLiteral: 0(390) into ArrayAccess(391) at 1", "Insert Assignment: =(404) into ExpressionStatement(405) at 0", "Insert Block(416) into TryStatement(430) at 0", "Insert CatchClause(429) into TryStatement(430) at 1", "Insert SimpleName: hasOldStyleFlags(582) into Assignment: =(584) at 0", "Insert BooleanLiteral: true(583) into Assignment: =(584) at 1", "Insert Assignment: =(593) into ExpressionStatement(594) at 0", "Insert SimpleType: HashMap(306) into ParameterizedType: HashMap<>(307) at 0", "Insert SimpleName: FLAG_PREFIX(351) into MethodInvocation(353) at 0", "Insert SimpleName: length(352) into MethodInvocation(353) at 1", "Insert SimpleName: parts(371) into ArrayAccess(373) at 0", "Insert NumberLiteral: 0(372) into ArrayAccess(373) at 1", "Insert SimpleType: InvalidCommandLineOptionException(378) into ClassInstanceCreation(382) at 0", "Insert InfixExpression: +(381) into ClassInstanceCreation(382) at 1", "Insert SimpleName: severity(402) into Assignment: =(404) at 0", "Insert QualifiedName: Severity.DEFAULT(403) into Assignment: =(404) at 1", "Insert ExpressionStatement(415) into Block(416) at 0", "Insert SingleVariableDeclaration(420) into CatchClause(429) at 0", "Insert Block(428) into CatchClause(429) at 1", "Insert SimpleName: hasNewStyleFlags(591) into Assignment: =(593) at 0", "Insert BooleanLiteral: true(592) into Assignment: =(593) at 1", "Update SimpleName: DISABLE_FLAG_PREFIX(213) to OLD_DISABLE_FLAG_PREFIX", "Insert SimpleName: HashMap(305) into SimpleType: HashMap(306) at 0", "Insert SimpleName: InvalidCommandLineOptionException(377) into SimpleType: InvalidCommandLineOptionException(378) at 0", "Insert StringLiteral: \"invalid flag: \"(379) into InfixExpression: +(381) at 0", "Insert SimpleName: arg(380) into InfixExpression: +(381) at 1", "Insert Assignment: =(414) into ExpressionStatement(415) at 0", "Insert SimpleType: IllegalArgumentException(418) into SingleVariableDeclaration(420) at 0", "Insert SimpleName: e(419) into SingleVariableDeclaration(420) at 1", "Insert ThrowStatement(427) into Block(428) at 0", "Insert SimpleName: severity(407) into Assignment: =(414) at 0", "Insert MethodInvocation(413) into Assignment: =(414) at 1", "Insert SimpleName: IllegalArgumentException(417) into SimpleType: IllegalArgumentException(418) at 0", "Insert ClassInstanceCreation(426) into ThrowStatement(427) at 0", "Insert SimpleName: Severity(408) into MethodInvocation(413) at 0", "Insert SimpleName: valueOf(409) into MethodInvocation(413) at 1", "Insert ArrayAccess(412) into MethodInvocation(413) at 2", "Insert SimpleType: InvalidCommandLineOptionException(422) into ClassInstanceCreation(426) at 0", "Insert InfixExpression: +(425) into ClassInstanceCreation(426) at 1", "Insert SimpleName: parts(410) into ArrayAccess(412) at 0", "Insert NumberLiteral: 1(411) into ArrayAccess(412) at 1", "Insert SimpleName: InvalidCommandLineOptionException(421) into SimpleType: InvalidCommandLineOptionException(422) at 0", "Insert StringLiteral: \"invalid flag: \"(423) into InfixExpression: +(425) at 0", "Insert SimpleName: arg(424) into InfixExpression: +(425) at 1", "Delete Modifier: public(28)", "Delete SimpleName: Severity(29)", "Delete EnumDeclaration(32)", "Delete MethodInvocation(54)", "Delete TagElement: @code(155)", "Delete TagElement: @param(156)", "Delete QualifiedName: ImmutableMap.Builder(181)", "Delete SimpleName: ImmutableMap(223)", "Delete SimpleName: builder(224)", "Delete MethodInvocation(225)", "Delete EnhancedForStatement(250)", "Delete Block(251)", "Delete IfStatement(252)"]}}, {"FromClassBugCheckerSupplier_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS ExpressionStatement to Block at 4", "INS WildcardType: ? extends BugChecker to ParameterizedType: Class<? extends BugChecker> at 1", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: SeverityLevel to SimpleType: SeverityLevel at 0", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS SimpleType: SeverityLevel to SingleVariableDeclaration at 0", "INS SimpleName: FromClassBugCheckerSupplier to MethodDeclaration at 1", "INS SimpleName: canonicalName to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: checkerClass to SingleVariableDeclaration at 1", "INS SimpleName: maturity to FieldAccess at 1", "INS SimpleName: disableable to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: checkerClass to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: severity to SingleVariableDeclaration at 1", "INS SimpleName: BugChecker to SimpleType: BugChecker at 0", "INS Block to MethodDeclaration at 7", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: disableable to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleType: Class to ParameterizedType: Class<? extends BugChecker> at 0", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: severity to Assignment: = at 1", "INS SimpleName: maturity to SingleVariableDeclaration at 1", "INS ParameterizedType: Class<? extends BugChecker> to SingleVariableDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: MaturityLevel to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 2", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: maturity to Assignment: = at 1", "INS ExpressionStatement to Block at 3", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: disableable to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleType: BugChecker to WildcardType: ? extends BugChecker at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: canonicalName to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: canonicalName to SingleVariableDeclaration at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: checkerClass to FieldAccess at 1", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: MaturityLevel to SimpleType: MaturityLevel at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: severity to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS SimpleName: FromClassBugCheckerSupplier to SimpleType: FromClassBugCheckerSupplier at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleType: BugCheckerSupplier to MethodDeclaration at 2", "INS FieldAccess to ClassInstanceCreation at 4", "INS Block to MethodDeclaration at 5", "INS SimpleType: SeverityLevel to SingleVariableDeclaration at 0", "INS SimpleName: checkerClass to FieldAccess at 1", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS FieldAccess to ClassInstanceCreation at 1", "INS FieldAccess to ClassInstanceCreation at 2", "INS SimpleName: BugCheckerSupplier to SimpleType: BugCheckerSupplier at 0", "INS SimpleName: disableable to FieldAccess at 1", "INS ClassInstanceCreation to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: severity to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleType: FromClassBugCheckerSupplier to ClassInstanceCreation at 0", "INS SimpleName: maturity to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: severity to ClassInstanceCreation at 3", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: canonicalName to FieldAccess at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: SeverityLevel to SimpleType: SeverityLevel at 0", "INS FieldAccess to ClassInstanceCreation at 5", "INS SimpleName: overrideSeverity to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleName: toString to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS SimpleType: String to MethodDeclaration at 2", "INS StringLiteral: \"Supplier from class \" to InfixExpression: + at 0", "INS SimpleName: checkerClass to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS InfixExpression: + to ReturnStatement at 0", "INS SimpleName: getName to MethodInvocation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: checker to VariableDeclarationFragment at 0", "INS SimpleType: BugChecker to VariableDeclarationStatement at 0", "INS SimpleName: BugChecker to SimpleType: BugChecker at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: severity to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS SimpleName: setSeverity to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: checker to MethodInvocation at 0"]}, {"root": "INS SimpleName: checker to ReturnStatement at 0", "operations": ["INS SimpleName: checker to ReturnStatement at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}]}}, {"FromClassBugCheckerSupplier_diff": {"operations": ["Insert MethodDeclaration(187) into TypeDeclaration: class(311) at 9", "Insert MethodDeclaration(277) into TypeDeclaration: class(311) at 13", "Insert MethodDeclaration(310) into TypeDeclaration: class(311) at 16", "Insert Modifier: private(131) into MethodDeclaration(187) at 0", "Insert SimpleName: FromClassBugCheckerSupplier(132) into MethodDeclaration(187) at 1", "Insert SingleVariableDeclaration(140) into MethodDeclaration(187) at 2", "Insert SingleVariableDeclaration(144) into MethodDeclaration(187) at 3", "Insert SingleVariableDeclaration(148) into MethodDeclaration(187) at 4", "Insert SingleVariableDeclaration(152) into MethodDeclaration(187) at 5", "Insert SingleVariableDeclaration(155) into MethodDeclaration(187) at 6", "Insert Block(186) into MethodDeclaration(187) at 7", "Insert MarkerAnnotation(250) into MethodDeclaration(277) at 0", "Insert Modifier: public(251) into MethodDeclaration(277) at 1", "Insert SimpleType: BugCheckerSupplier(253) into MethodDeclaration(277) at 2", "Insert SimpleName: overrideSeverity(254) into MethodDeclaration(277) at 3", "Insert SingleVariableDeclaration(258) into MethodDeclaration(277) at 4", "Insert Block(276) into MethodDeclaration(277) at 5", "Insert MarkerAnnotation(298) into MethodDeclaration(310) at 0", "Insert Modifier: public(299) into MethodDeclaration(310) at 1", "Insert SimpleType: String(301) into MethodDeclaration(310) at 2", "Insert SimpleName: toString(302) into MethodDeclaration(310) at 3", "Insert Block(309) into MethodDeclaration(310) at 4", "Insert ParameterizedType: Class<? extends BugChecker>(138) into SingleVariableDeclaration(140) at 0", "Insert SimpleName: checkerClass(139) into SingleVariableDeclaration(140) at 1", "Insert SimpleType: String(142) into SingleVariableDeclaration(144) at 0", "Insert SimpleName: canonicalName(143) into SingleVariableDeclaration(144) at 1", "Insert SimpleType: SeverityLevel(146) into SingleVariableDeclaration(148) at 0", "Insert SimpleName: severity(147) into SingleVariableDeclaration(148) at 1", "Insert SimpleType: MaturityLevel(150) into SingleVariableDeclaration(152) at 0", "Insert SimpleName: maturity(151) into SingleVariableDeclaration(152) at 1", "Insert PrimitiveType: boolean(153) into SingleVariableDeclaration(155) at 0", "Insert SimpleName: disableable(154) into SingleVariableDeclaration(155) at 1", "Insert ExpressionStatement(161) into Block(186) at 0", "Insert ExpressionStatement(167) into Block(186) at 1", "Insert ExpressionStatement(173) into Block(186) at 2", "Insert ExpressionStatement(179) into Block(186) at 3", "Insert ExpressionStatement(185) into Block(186) at 4", "Insert SimpleName: Override(249) into MarkerAnnotation(250) at 0", "Insert SimpleName: BugCheckerSupplier(252) into SimpleType: BugCheckerSupplier(253) at 0", "Insert SimpleType: SeverityLevel(256) into SingleVariableDeclaration(258) at 0", "Insert SimpleName: severity(257) into SingleVariableDeclaration(258) at 1", "Insert ReturnStatement(275) into Block(276) at 0", "Insert SimpleName: Override(297) into MarkerAnnotation(298) at 0", "Insert SimpleName: String(300) into SimpleType: String(301) at 0", "Insert ReturnStatement(308) into Block(309) at 0", "Insert SimpleType: Class(134) into ParameterizedType: Class<? extends BugChecker>(138) at 0", "Insert WildcardType: ? extends BugChecker(137) into ParameterizedType: Class<? extends BugChecker>(138) at 1", "Insert SimpleName: String(141) into SimpleType: String(142) at 0", "Insert SimpleName: SeverityLevel(145) into SimpleType: SeverityLevel(146) at 0", "Insert SimpleName: MaturityLevel(149) into SimpleType: MaturityLevel(150) at 0", "Insert Assignment: =(160) into ExpressionStatement(161) at 0", "Insert Assignment: =(166) into ExpressionStatement(167) at 0", "Insert Assignment: =(172) into ExpressionStatement(173) at 0", "Insert Assignment: =(178) into ExpressionStatement(179) at 0", "Insert Assignment: =(184) into ExpressionStatement(185) at 0", "Insert SimpleName: SeverityLevel(255) into SimpleType: SeverityLevel(256) at 0", "Insert ClassInstanceCreation(274) into ReturnStatement(275) at 0", "Insert InfixExpression: +(307) into ReturnStatement(308) at 0", "Insert SimpleName: Class(133) into SimpleType: Class(134) at 0", "Insert SimpleType: BugChecker(136) into WildcardType: ? extends BugChecker(137) at 0", "Insert FieldAccess(158) into Assignment: =(160) at 0", "Insert SimpleName: checkerClass(159) into Assignment: =(160) at 1", "Insert FieldAccess(164) into Assignment: =(166) at 0", "Insert SimpleName: canonicalName(165) into Assignment: =(166) at 1", "Insert FieldAccess(170) into Assignment: =(172) at 0", "Insert SimpleName: severity(171) into Assignment: =(172) at 1", "Insert FieldAccess(176) into Assignment: =(178) at 0", "Insert SimpleName: maturity(177) into Assignment: =(178) at 1", "Insert FieldAccess(182) into Assignment: =(184) at 0", "Insert SimpleName: disableable(183) into Assignment: =(184) at 1", "Insert VariableDeclarationStatement(201) into Block(209) at 0", "Insert ExpressionStatement(206) into Block(209) at 1", "Insert SimpleType: FromClassBugCheckerSupplier(260) into ClassInstanceCreation(274) at 0", "Insert FieldAccess(263) into ClassInstanceCreation(274) at 1", "Insert FieldAccess(266) into ClassInstanceCreation(274) at 2", "Insert SimpleName: severity(267) into ClassInstanceCreation(274) at 3", "Insert FieldAccess(270) into ClassInstanceCreation(274) at 4", "Insert FieldAccess(273) into ClassInstanceCreation(274) at 5", "Insert StringLiteral: \"Supplier from class \"(303) into InfixExpression: +(307) at 0", "Insert MethodInvocation(306) into InfixExpression: +(307) at 1", "Insert SimpleName: BugChecker(135) into SimpleType: BugChecker(136) at 0", "Insert ThisExpression(156) into FieldAccess(158) at 0", "Insert SimpleName: checkerClass(157) into FieldAccess(158) at 1", "Insert ThisExpression(162) into FieldAccess(164) at 0", "Insert SimpleName: canonicalName(163) into FieldAccess(164) at 1", "Insert ThisExpression(168) into FieldAccess(170) at 0", "Insert SimpleName: severity(169) into FieldAccess(170) at 1", "Insert ThisExpression(174) into FieldAccess(176) at 0", "Insert SimpleName: maturity(175) into FieldAccess(176) at 1", "Insert ThisExpression(180) into FieldAccess(182) at 0", "Insert SimpleName: disableable(181) into FieldAccess(182) at 1", "Insert SimpleType: BugChecker(195) into VariableDeclarationStatement(201) at 0", "Insert VariableDeclarationFragment(200) into VariableDeclarationStatement(201) at 1", "Insert MethodInvocation(205) into ExpressionStatement(206) at 0", "Insert SimpleName: checker(207) into ReturnStatement(208) at 0", "Insert SimpleName: FromClassBugCheckerSupplier(259) into SimpleType: FromClassBugCheckerSupplier(260) at 0", "Insert ThisExpression(261) into FieldAccess(263) at 0", "Insert SimpleName: checkerClass(262) into FieldAccess(263) at 1", "Insert ThisExpression(264) into FieldAccess(266) at 0", "Insert SimpleName: canonicalName(265) into FieldAccess(266) at 1", "Insert ThisExpression(268) into FieldAccess(270) at 0", "Insert SimpleName: maturity(269) into FieldAccess(270) at 1", "Insert ThisExpression(271) into FieldAccess(273) at 0", "Insert SimpleName: disableable(272) into FieldAccess(273) at 1", "Insert SimpleName: checkerClass(304) into MethodInvocation(306) at 0", "Insert SimpleName: getName(305) into MethodInvocation(306) at 1", "Insert SimpleName: BugChecker(194) into SimpleType: BugChecker(195) at 0", "Insert SimpleName: checker(196) into VariableDeclarationFragment(200) at 0", "Move MethodInvocation(139) into VariableDeclarationFragment(200) at 1", "Insert SimpleName: checker(202) into MethodInvocation(205) at 0", "Insert SimpleName: setSeverity(203) into MethodInvocation(205) at 1", "Insert SimpleName: severity(204) into MethodInvocation(205) at 2"]}}, {"FromInstanceBugCheckerSupplier_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 4", "INS SimpleName: severity to VariableDeclarationFragment at 0", "INS Modifier: final to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: SeverityLevel to FieldDeclaration at 2", "INS SimpleName: SeverityLevel to SimpleType: SeverityLevel at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 5", "operations": ["INS SimpleName: FromInstanceBugCheckerSupplier to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS ConstructorInvocation to Block at 0", "INS Block to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS SimpleName: severity to ClassInstanceCreation at 2", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS ThisExpression to FieldAccess at 0", "INS SimpleType: SeverityLevel to SingleVariableDeclaration at 0", "INS SimpleName: BugCheckerSupplier to SimpleType: BugCheckerSupplier at 0", "INS ReturnStatement to Block at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleType: BugCheckerSupplier to MethodDeclaration at 2", "INS SimpleName: overrideSeverity to MethodDeclaration at 3", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: severity to SingleVariableDeclaration at 1", "INS FieldAccess to ClassInstanceCreation at 1", "INS SimpleName: checker to FieldAccess at 1", "INS Block to MethodDeclaration at 5", "INS SimpleType: FromInstanceBugCheckerSupplier to ClassInstanceCreation at 0", "INS SimpleName: FromInstanceBugCheckerSupplier to SimpleType: FromInstanceBugCheckerSupplier at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: SeverityLevel to SimpleType: SeverityLevel at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 1"]}, {"root": "INS Modifier: private to MethodDeclaration at 0", "operations": ["INS Modifier: private to MethodDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 2", "operations": ["INS SimpleName: checker to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: BugChecker to SimpleType: BugChecker at 0", "INS SimpleType: BugChecker to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SimpleName: SeverityLevel to SimpleType: SeverityLevel at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: SeverityLevel to SingleVariableDeclaration at 0", "INS SimpleName: severity to SingleVariableDeclaration at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: severity to Assignment: = at 1", "INS SimpleName: severity to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: severity to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: setSeverity to MethodInvocation at 1", "INS SimpleName: checker to MethodInvocation at 0"]}, {"root": "MOVE from ConstructorInvocation", "operations": ["MOV MethodInvocation to ConstructorInvocation at 0"]}, {"root": "MOVE from ConstructorInvocation", "operations": ["MOV MethodInvocation to ConstructorInvocation at 1"]}, {"root": "INS SimpleName: severity to ReturnStatement at 0", "operations": ["INS SimpleName: severity to ReturnStatement at 0"]}, {"root": "INS SimpleName: checker to Assignment: = at 1", "operations": ["INS SimpleName: checker to Assignment: = at 1"]}]}}, {"FromInstanceBugCheckerSupplier_diff": {"operations": ["Insert FieldDeclaration(36) into TypeDeclaration: class(156) at 4", "Insert MethodDeclaration(51) into TypeDeclaration: class(156) at 5", "Insert MethodDeclaration(132) into TypeDeclaration: class(156) at 10", "Insert Modifier: private(30) into FieldDeclaration(36) at 0", "Insert Modifier: final(31) into FieldDeclaration(36) at 1", "Insert SimpleType: SeverityLevel(33) into FieldDeclaration(36) at 2", "Insert VariableDeclarationFragment(35) into FieldDeclaration(36) at 3", "Insert SimpleName: FromInstanceBugCheckerSupplier(37) into MethodDeclaration(51) at 0", "Move SingleVariableDeclaration(34) into MethodDeclaration(51) at 1", "Insert Block(50) into MethodDeclaration(51) at 2", "Insert Modifier: private(52) into MethodDeclaration(75) at 0", "Insert SingleVariableDeclaration(57) into MethodDeclaration(75) at 2", "Insert SingleVariableDeclaration(61) into MethodDeclaration(75) at 3", "Insert MarkerAnnotation(114) into MethodDeclaration(132) at 0", "Insert Modifier: public(115) into MethodDeclaration(132) at 1", "Insert SimpleType: BugCheckerSupplier(117) into MethodDeclaration(132) at 2", "Insert SimpleName: overrideSeverity(118) into MethodDeclaration(132) at 3", "Insert SingleVariableDeclaration(122) into MethodDeclaration(132) at 4", "Insert Block(131) into MethodDeclaration(132) at 5", "Insert SimpleName: SeverityLevel(32) into SimpleType: SeverityLevel(33) at 0", "Insert SimpleName: severity(34) into VariableDeclarationFragment(35) at 0", "Insert ConstructorInvocation(49) into Block(50) at 0", "Insert SimpleType: BugChecker(55) into SingleVariableDeclaration(57) at 0", "Insert SimpleName: checker(56) into SingleVariableDeclaration(57) at 1", "Insert SimpleType: SeverityLevel(59) into SingleVariableDeclaration(61) at 0", "Insert SimpleName: severity(60) into SingleVariableDeclaration(61) at 1", "Insert ExpressionStatement(73) into Block(74) at 1", "Insert ExpressionStatement(86) into Block(89) at 0", "Insert SimpleName: Override(113) into MarkerAnnotation(114) at 0", "Insert SimpleName: BugCheckerSupplier(116) into SimpleType: BugCheckerSupplier(117) at 0", "Insert SimpleType: SeverityLevel(120) into SingleVariableDeclaration(122) at 0", "Insert SimpleName: severity(121) into SingleVariableDeclaration(122) at 1", "Insert ReturnStatement(130) into Block(131) at 0", "Move MethodInvocation(41) into ConstructorInvocation(49) at 0", "Move MethodInvocation(76) into ConstructorInvocation(49) at 1", "Insert SimpleName: BugChecker(54) into SimpleType: BugChecker(55) at 0", "Insert SimpleName: SeverityLevel(58) into SimpleType: SeverityLevel(59) at 0", "Insert Assignment: =(72) into ExpressionStatement(73) at 0", "Insert MethodInvocation(85) into ExpressionStatement(86) at 0", "Insert SimpleName: severity(109) into ReturnStatement(110) at 0", "Insert SimpleName: SeverityLevel(119) into SimpleType: SeverityLevel(120) at 0", "Insert ClassInstanceCreation(129) into ReturnStatement(130) at 0", "Insert SimpleName: checker(65) into Assignment: =(66) at 1", "Insert FieldAccess(70) into Assignment: =(72) at 0", "Insert SimpleName: severity(71) into Assignment: =(72) at 1", "Insert SimpleName: checker(82) into MethodInvocation(85) at 0", "Insert SimpleName: setSeverity(83) into MethodInvocation(85) at 1", "Insert SimpleName: severity(84) into MethodInvocation(85) at 2", "Insert SimpleType: FromInstanceBugCheckerSupplier(124) into ClassInstanceCreation(129) at 0", "Insert FieldAccess(127) into ClassInstanceCreation(129) at 1", "Insert SimpleName: severity(128) into ClassInstanceCreation(129) at 2", "Insert ThisExpression(68) into FieldAccess(70) at 0", "Insert SimpleName: severity(69) into FieldAccess(70) at 1", "Insert SimpleName: FromInstanceBugCheckerSupplier(123) into SimpleType: FromInstanceBugCheckerSupplier(124) at 0", "Insert ThisExpression(125) into FieldAccess(127) at 0", "Insert SimpleName: checker(126) into FieldAccess(127) at 1"]}}, {"BugChecker_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 9", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 9"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 26", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: severity to FieldAccess at 1", "INS SimpleName: severity to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: SeverityLevel to SimpleType: SeverityLevel at 0", "INS Block to MethodDeclaration at 4", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: severity to SingleVariableDeclaration at 1", "INS ThisExpression to FieldAccess at 0", "INS MethodDeclaration to TypeDeclaration: class at 26", "INS SimpleType: SeverityLevel to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Assignment: = to ExpressionStatement at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: setSeverity to MethodDeclaration at 2"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Javadoc to FieldDeclaration at 0", "MOV Modifier: private to FieldDeclaration at 1", "MOV SimpleType: SeverityLevel to FieldDeclaration at 2", "MOV VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "UPDATE from The type of diagnostic (error or warning) to emit when this check triggers.  Corresponds to to The type of diagnostic (error or warning) to emit when this check triggers.  Initialized to", "operations": ["UPD TextElement: The type of diagnostic (error or warning) to emit when this check triggers.  Corresponds to from The type of diagnostic (error or warning) to emit when this check triggers.  Corresponds to to The type of diagnostic (error or warning) to emit when this check triggers.  Initialized to"]}, {"root": "UPDATE from . to , but may be overridden.", "operations": ["UPD TextElement: . from . to , but may be overridden."]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL Modifier: final"]}]}}, {"BugChecker_diff": {"operations": ["Insert FieldDeclaration(227) into TypeDeclaration: class(1598) at 9", "Insert MethodDeclaration(617) into TypeDeclaration: class(1598) at 25", "Move Javadoc(221) into FieldDeclaration(227) at 0", "Move Modifier: private(222) into FieldDeclaration(227) at 1", "Move SimpleType: SeverityLevel(225) into FieldDeclaration(227) at 2", "Move VariableDeclarationFragment(227) into FieldDeclaration(227) at 3", "Insert Modifier: public(603) into MethodDeclaration(617) at 0", "Insert PrimitiveType: void(604) into MethodDeclaration(617) at 1", "Insert SimpleName: setSeverity(605) into MethodDeclaration(617) at 2", "Insert SingleVariableDeclaration(609) into MethodDeclaration(617) at 3", "Insert Block(616) into MethodDeclaration(617) at 4", "Insert SimpleType: SeverityLevel(607) into SingleVariableDeclaration(609) at 0", "Insert SimpleName: severity(608) into SingleVariableDeclaration(609) at 1", "Insert ExpressionStatement(615) into Block(616) at 0", "Update TextElement: The type of diagnostic (error or warning) to emit when this check triggers.  Corresponds to(212) to The type of diagnostic (error or warning) to emit when this check triggers.  Initialized to", "Update TextElement: .(219) to , but may be overridden.", "Insert SimpleName: SeverityLevel(606) into SimpleType: SeverityLevel(607) at 0", "Insert Assignment: =(614) into ExpressionStatement(615) at 0", "Insert FieldAccess(612) into Assignment: =(614) at 0", "Insert SimpleName: severity(613) into Assignment: =(614) at 1", "Insert ThisExpression(610) into FieldAccess(612) at 0", "Insert SimpleName: severity(611) into FieldAccess(612) at 1", "Delete Modifier: final(223)", "Delete FieldDeclaration(228)"]}}, {"InstanceReturningScannerSupplierImpl_cluster": {"actions": [{"root": "UPDATE from com.google.common.collect.ImmutableSet to com.google.common.collect.ImmutableBiMap", "operations": ["UPD QualifiedName: com.google.common.collect.ImmutableSet from com.google.common.collect.ImmutableSet to com.google.common.collect.ImmutableBiMap"]}, {"root": "UPDATE from ImmutableSet<BugCheckerSupplier> to ImmutableBiMap<String,BugCheckerSupplier>", "operations": ["UPD ParameterizedType: ImmutableSet<BugCheckerSupplier> from ImmutableSet<BugCheckerSupplier> to ImmutableBiMap<String,BugCheckerSupplier>"]}, {"root": "UPDATE from getSuppliers to getNameToSupplierMap", "operations": ["UPD SimpleName: getSuppliers from getSuppliers to getNameToSupplierMap"]}, {"root": "UPDATE from ImmutableSet to ImmutableBiMap", "operations": ["UPD SimpleName: ImmutableSet from ImmutableSet to ImmutableBiMap", "UPD SimpleType: ImmutableSet from ImmutableSet to ImmutableBiMap"]}, {"root": "INS SimpleType: String to ParameterizedType: ImmutableSet<BugCheckerSupplier> at 1", "operations": ["INS SimpleType: String to ParameterizedType: ImmutableSet<BugCheckerSupplier> at 1", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}]}}, {"InstanceReturningScannerSupplierImpl_diff": {"operations": ["Update QualifiedName: com.google.common.collect.ImmutableSet(2) to com.google.common.collect.ImmutableBiMap", "Update ParameterizedType: ImmutableSet<BugCheckerSupplier>(61) to ImmutableBiMap<String,BugCheckerSupplier>", "Update SimpleName: getSuppliers(62) to getNameToSupplierMap", "Update SimpleType: ImmutableSet(58) to ImmutableBiMap", "Insert SimpleType: String(59) into ParameterizedType: ImmutableBiMap<String,BugCheckerSupplier>(62) at 1", "Update SimpleName: ImmutableSet(57) to ImmutableBiMap", "Insert SimpleName: String(58) into SimpleType: String(59) at 0", "Delete Modifier: public(56)"]}}, {"ScannerSupplier_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 6", "MOV ImportDeclaration to CompilationUnit at 8"]}, {"root": "UPDATE from com.google.common.collect.FluentIterable to com.google.common.collect.BiMap", "operations": ["UPD QualifiedName: com.google.common.collect.FluentIterable from com.google.common.collect.FluentIterable to com.google.common.collect.BiMap"]}, {"root": "UPDATE from com.google.common.collect.ImmutableSet to com.google.common.collect.HashBiMap", "operations": ["UPD QualifiedName: com.google.common.collect.ImmutableSet from com.google.common.collect.ImmutableSet to com.google.common.collect.HashBiMap"]}, {"root": "UPDATE from java.util.HashSet to com.google.common.collect.ImmutableBiMap", "operations": ["UPD QualifiedName: java.util.HashSet from java.util.HashSet to com.google.common.collect.ImmutableBiMap"]}, {"root": "UPDATE from java.util.Set to com.google.errorprone.BugPattern.SeverityLevel", "operations": ["UPD QualifiedName: java.util.Set from java.util.Set to com.google.errorprone.BugPattern.SeverityLevel"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS Block to MethodDeclaration at 6", "INS MethodDeclaration to TypeDeclaration: class at 14"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS SimpleName: filter to MethodDeclaration at 4", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: String to ParameterizedType: Entry<String,BugCheckerSupplier> at 1", "INS Block to IfStatement at 1", "INS IfStatement to Block at 0", "INS SimpleName: entry to MethodInvocation at 2", "INS Block to EnhancedForStatement at 2", "INS SimpleName: String to SimpleType: String at 0", "INS EnhancedForStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: ImmutableBiMap.Builder to SimpleType: ImmutableBiMap.Builder at 0", "INS Modifier: public to MethodDeclaration at 2", "INS ThisExpression to MethodInvocation at 0", "INS SimpleType: ImmutableBiMap.Builder to ParameterizedType: ImmutableBiMap.Builder<String,BugCheckerSupplier> at 0", "INS SimpleName: entrySet to MethodInvocation at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: builder to MethodInvocation at 1", "INS SimpleType: BugCheckerSupplier to ParameterizedType: ImmutableBiMap.Builder<String,BugCheckerSupplier> at 2", "INS SimpleName: Entry to SimpleType: Entry at 0", "INS ParameterizedType: Entry<String,BugCheckerSupplier> to SingleVariableDeclaration at 0", "INS SimpleType: Entry to ParameterizedType: Entry<String,BugCheckerSupplier> at 0", "INS SimpleName: getNameToSupplierMap to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: apply to MethodInvocation at 1", "INS SimpleName: entry to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: ImmutableBiMap to MethodInvocation at 0", "INS ParameterizedType: ImmutableBiMap.Builder<String,BugCheckerSupplier> to VariableDeclarationStatement at 0", "INS SimpleName: BugCheckerSupplier to SimpleType: BugCheckerSupplier at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: getValue to MethodInvocation at 1", "INS SimpleName: BugCheckerSupplier to SimpleType: BugCheckerSupplier at 0", "INS SimpleType: BugCheckerSupplier to ParameterizedType: Entry<String,BugCheckerSupplier> at 2", "INS SimpleName: put to MethodInvocation at 1", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: builder to VariableDeclarationFragment at 0", "INS SimpleType: String to ParameterizedType: ImmutableBiMap.Builder<String,BugCheckerSupplier> at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: builder to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: String to SimpleType: String at 0", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS SimpleName: entry to SingleVariableDeclaration at 1", "INS SimpleName: predicate to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from ImmutableSet<BugCheckerSupplier> to ImmutableBiMap<String,BugCheckerSupplier>", "operations": ["UPD ParameterizedType: ImmutableSet<BugCheckerSupplier> from ImmutableSet<BugCheckerSupplier> to ImmutableBiMap<String,BugCheckerSupplier>", "UPD ParameterizedType: ImmutableSet<BugCheckerSupplier> from ImmutableSet<BugCheckerSupplier> to ImmutableBiMap<String,BugCheckerSupplier>"]}, {"root": "UPDATE from getSuppliers to getNameToSupplierMap", "operations": ["UPD SimpleName: getSuppliers from getSuppliers to getNameToSupplierMap", "UPD SimpleName: getSuppliers from getSuppliers to getNameToSupplierMap", "UPD SimpleName: getSuppliers from getSuppliers to getNameToSupplierMap", "UPD SimpleName: getSuppliers from getSuppliers to getNameToSupplierMap"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 1", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV Modifier: public to MethodDeclaration at 2", "MOV SimpleName: plus to MethodDeclaration at 4", "MOV SimpleType: ScannerSupplier to MethodDeclaration at 3", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: ScannerSupplier to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 1", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS SimpleName: BugChecker to TagElement: @link at 0", "INS SimpleName: BugChecker to TagElement: @link at 0", "INS TextElement: this does not search any plugin checkers unless this  to TagElement at 13", "INS TagElement: @link to TagElement at 17", "INS TagElement: @link to TagElement at 7", "INS TagElement: @code to TagElement at 3", "INS SimpleName: ScannerSupplier to MemberRef at 0", "INS TextElement: Returns the  to TagElement at 0", "INS TextElement:  includes those to TagElement at 15", "INS TextElement: , then searches error-prone's built-in  to TagElement at 10", "INS TextElement: s from the plugin path). to TagElement at 20", "INS SimpleName: fromBugCheckers to MemberRef at 1", "INS SimpleName: BugCheckerSupplier to TagElement: @link at 0", "INS TextElement: s that are part of this to TagElement at 8", "INS TextElement: null if no checker is found with that name. to TagElement at 5", "INS TextElement: .  Returns to TagElement at 4", "INS TextElement:  with a list of the to TagElement at 18", "INS TagElement: @link to TagElement at 1", "INS TextElement: checkers (e.g., by calling  to TagElement at 16", "INS TagElement: @link to TagElement at 14", "INS SimpleName: BugCheckerSupplier to TagElement: @link at 0", "INS TextElement:  that corresponds to the given  to TagElement at 2", "INS TagElement: @link to TagElement at 19", "INS TextElement: s.  Note that to TagElement at 12", "INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: ScannerSupplier to TagElement: @link at 0", "INS TextElement:  name to TagElement: @code at 0", "INS TextElement: <p>First searches the  to TagElement at 6", "INS MemberRef to TagElement: @link at 0", "INS TagElement: @link to TagElement at 11"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: BugCheckerSupplier to MethodDeclaration at 2"]}, {"root": "UPDATE from filter to forName", "operations": ["UPD SimpleName: filter from filter to forName"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: name to SingleVariableDeclaration at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS EnhancedForStatement to Block at 1", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: BugChecker to WildcardType: ? extends BugChecker at 0", "INS SimpleName: checkerClass to SingleVariableDeclaration at 1", "INS EnhancedForStatement to Block at 1", "INS SimpleName: supplier to MethodInvocation at 0", "INS SimpleType: BugCheckerSupplier to VariableDeclarationStatement at 0", "INS SimpleName: apply to MethodInvocation at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: supplier to MethodInvocation at 3", "INS SimpleName: BugChecker to SimpleType: BugChecker at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: checkerClass to MethodInvocation at 2", "INS SimpleName: BugCheckerSupplier to SimpleType: BugCheckerSupplier at 0", "INS WildcardType: ? extends BugChecker to ParameterizedType: Class<? extends BugChecker> at 1", "INS SimpleName: builder to MethodInvocation at 0", "INS ParameterizedType: Class<? extends BugChecker> to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS SimpleType: Class to ParameterizedType: Class<? extends BugChecker> at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: supplier to VariableDeclarationFragment at 0", "INS SimpleName: canonicalName to MethodInvocation at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: checkerClasses to EnhancedForStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS EnhancedForStatement to Block at 1", "operations": ["INS SimpleName: supplier to MethodInvocation at 0", "INS SimpleName: checkers to EnhancedForStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: canonicalName to MethodInvocation at 1", "INS SimpleName: supplier to VariableDeclarationFragment at 0", "INS SimpleName: builder to MethodInvocation at 0", "INS SimpleName: BugCheckerSupplier to SimpleType: BugCheckerSupplier at 0", "INS SimpleName: supplier to MethodInvocation at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: apply to MethodInvocation at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleType: BugChecker to SingleVariableDeclaration at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: checker to SingleVariableDeclaration at 1", "INS SimpleName: checker to MethodInvocation at 2", "INS EnhancedForStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: BugChecker to SimpleType: BugChecker at 0", "INS SimpleType: BugCheckerSupplier to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from FluentIterable to ImmutableBiMap", "operations": ["UPD SimpleName: FluentIterable from FluentIterable to ImmutableBiMap", "UPD SimpleName: FluentIterable from FluentIterable to ImmutableBiMap", "UPD SimpleName: ImmutableSet from ImmutableSet to ImmutableBiMap", "UPD SimpleType: ImmutableSet from ImmutableSet to ImmutableBiMap", "UPD SimpleName: FluentIterable from FluentIterable to ImmutableBiMap", "UPD SimpleType: ImmutableSet from ImmutableSet to ImmutableBiMap", "UPD SimpleName: ImmutableSet from ImmutableSet to ImmutableBiMap", "UPD SimpleName: resultSuppliers from resultSuppliers to ImmutableBiMap"]}, {"root": "MOVE from ParameterizedType: ImmutableSet<BugCheckerSupplier>", "operations": ["MOV SimpleType: String to ParameterizedType: ImmutableSet<BugCheckerSupplier> at 1"]}, {"root": "INS EnhancedForStatement to Block at 2", "operations": ["INS SimpleName: supplier to Assignment: = at 0", "INS Block to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: OFF to SwitchCase at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS BreakStatement to SwitchStatement at 7", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS BreakStatement to SwitchStatement at 15", "INS IfStatement to SwitchStatement at 2", "INS SwitchCase to SwitchStatement at 8", "INS SimpleName: supplier to MethodInvocation at 3", "INS SwitchCase to SwitchStatement at 5", "INS SimpleName: canonicalName to MethodInvocation at 1", "INS SimpleName: put to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SwitchStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: InvalidCommandLineOptionException to SimpleType: InvalidCommandLineOptionException at 0", "INS SimpleName: supplier to Assignment: = at 0", "INS QualifiedName: SeverityLevel.WARNING to MethodInvocation at 2", "INS SimpleName: supplier to MethodInvocation at 0", "INS SimpleName: entry to MethodInvocation at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SwitchCase to SwitchStatement at 16", "INS SimpleName: ERROR to SwitchCase at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS BreakStatement to SwitchStatement at 4", "INS MethodInvocation to InfixExpression: + at 0", "INS SimpleType: InvalidCommandLineOptionException to ClassInstanceCreation at 0", "INS QualifiedName: SeverityLevel.ERROR to MethodInvocation at 2", "INS ExpressionStatement to SwitchStatement at 3", "INS SimpleName: overrideSeverity to MethodInvocation at 1", "INS ExpressionStatement to SwitchStatement at 10", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: DEFAULT to SwitchCase at 0", "INS EnhancedForStatement to Block at 2", "INS SwitchCase to SwitchStatement at 12", "INS SimpleName: remove to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS BreakStatement to SwitchStatement at 11", "INS ExpressionStatement to SwitchStatement at 9", "INS SimpleName: supplier to VariableDeclarationFragment at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ThrowStatement to Block at 0", "INS SwitchCase to SwitchStatement at 1", "INS SimpleName: supplier to MethodInvocation at 3", "INS SimpleName: getKey to MethodInvocation at 1", "INS ExpressionStatement to SwitchStatement at 6", "INS SimpleName: supplier to MethodInvocation at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: WARN to SwitchCase at 0", "INS ExpressionStatement to SwitchStatement at 13", "INS StringLiteral: \" may not be disabled\" to InfixExpression: + at 1", "INS SimpleName: result to MethodInvocation at 0", "INS ExpressionStatement to SwitchStatement at 14", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: forName to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS SimpleName: result to ReturnStatement at 0", "INS IfStatement to Block at 1", "INS InfixExpression: != to IfStatement at 0", "INS Block to IfStatement at 1", "INS NullLiteral to InfixExpression: != at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: result to InfixExpression: != at 0"]}, {"root": "INS ReturnStatement to Block at 2", "operations": ["INS ReturnStatement to Block at 2", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: BuiltInCheckerSuppliers to MethodInvocation at 0", "INS SimpleName: name to MethodInvocation at 2", "INS SimpleName: forName to MethodInvocation at 1"]}, {"root": "UPDATE from ImmutableSet<BugCheckerSupplier> to ImmutableBiMap.Builder<String,BugCheckerSupplier>", "operations": ["UPD ParameterizedType: ImmutableSet<BugCheckerSupplier> from ImmutableSet<BugCheckerSupplier> to ImmutableBiMap.Builder<String,BugCheckerSupplier>", "UPD ParameterizedType: ImmutableSet<BugCheckerSupplier> from ImmutableSet<BugCheckerSupplier> to ImmutableBiMap.Builder<String,BugCheckerSupplier>"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: ImmutableSet<BugCheckerSupplier> to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: ImmutableSet<BugCheckerSupplier> to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from Returns all  to Returns a map of check name to ", "operations": ["UPD TextElement: Returns all  from Returns all  to Returns a map of check name to "]}, {"root": "INS TextElement:  for all  to TagElement at 2", "operations": ["INS TextElement:  for all  to TagElement at 2"]}, {"root": "INS TagElement: @link to TagElement at 3", "operations": ["INS SimpleName: BugCheckerSupplier to TagElement: @link at 0", "INS TagElement: @link to TagElement at 3"]}, {"root": "INS TextElement: s to TagElement at 4", "operations": ["INS TextElement: s to TagElement at 4"]}, {"root": "UPDATE from s in this  to in this ", "operations": ["UPD TextElement: s in this  from s in this  to in this "]}, {"root": "INS TagElement: @link to TagElement at 6", "operations": ["INS SimpleName: ScannerSupplier to TagElement: @link at 0", "INS TagElement: @link to TagElement at 6"]}, {"root": "INS TextElement: . to TagElement at 7", "operations": ["INS TextElement: . to TagElement at 7"]}, {"root": "UPDATE from Set<String> to BiMap<String,BugCheckerSupplier>", "operations": ["UPD ParameterizedType: Set<String> from Set<String> to BiMap<String,BugCheckerSupplier>"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV MethodInvocation to EnhancedForStatement at 1", "MOV SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @link to TagElement at 9"]}, {"root": "INS SimpleType: BugCheckerSupplier to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: BugCheckerSupplier to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleType: ImmutableBiMap.Builder to ParameterizedType: ImmutableSet<BugCheckerSupplier> at 0", "operations": ["INS QualifiedName: ImmutableBiMap.Builder to SimpleType: ImmutableBiMap.Builder at 0", "INS SimpleType: ImmutableBiMap.Builder to ParameterizedType: ImmutableSet<BugCheckerSupplier> at 0"]}, {"root": "UPDATE from ImmutableSet to String", "operations": ["UPD SimpleName: ImmutableSet from ImmutableSet to String", "UPD SimpleName: ImmutableSet from ImmutableSet to String", "UPD SimpleType: ImmutableSet from ImmutableSet to String", "UPD SimpleType: Set from Set to String", "UPD SimpleName: Set from Set to String", "UPD SimpleType: ImmutableSet from ImmutableSet to String"]}, {"root": "UPDATE from result to builder", "operations": ["UPD SimpleName: result from result to builder", "UPD SimpleName: result from result to builder", "UPD SimpleName: from from from to builder", "UPD SimpleName: from from from to builder"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: result to VariableDeclarationFragment at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS SimpleName: builder to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: build to MethodInvocation at 1"]}, {"root": "INS SimpleType: ImmutableBiMap.Builder to ParameterizedType: ImmutableSet<BugCheckerSupplier> at 0", "operations": ["INS QualifiedName: ImmutableBiMap.Builder to SimpleType: ImmutableBiMap.Builder at 0", "INS SimpleType: ImmutableBiMap.Builder to ParameterizedType: ImmutableSet<BugCheckerSupplier> at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: result to VariableDeclarationFragment at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS SimpleName: builder to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: build to MethodInvocation at 1"]}, {"root": "INS SimpleType: BiMap to ParameterizedType: Set<String> at 0", "operations": ["INS SimpleType: BiMap to ParameterizedType: Set<String> at 0", "INS SimpleName: BiMap to SimpleType: BiMap at 0"]}, {"root": "MOVE from ParameterizedType: Set<String>", "operations": ["MOV SimpleType: BugCheckerSupplier to ParameterizedType: Set<String> at 2"]}, {"root": "UPDATE from getSuppliers to result", "operations": ["UPD SimpleName: getSuppliers from getSuppliers to result", "UPD SimpleName: disabledChecks from disabledChecks to result", "UPD SimpleName: disabledChecks from disabledChecks to result", "UPD SimpleName: resultSuppliers from resultSuppliers to result"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: getNameToSupplierMap to MethodInvocation at 0", "INS SimpleName: create to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: HashBiMap to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1"]}, {"root": "INS SimpleType: String to ParameterizedType: ImmutableSet<BugCheckerSupplier> at 1", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to ParameterizedType: ImmutableSet<BugCheckerSupplier> at 1"]}, {"root": "INS SimpleType: BugCheckerSupplier to ParameterizedType: ImmutableSet<BugCheckerSupplier> at 2", "operations": ["INS SimpleType: BugCheckerSupplier to ParameterizedType: ImmutableSet<BugCheckerSupplier> at 2", "INS SimpleName: BugCheckerSupplier to SimpleType: BugCheckerSupplier at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS SimpleName: builder to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: build to MethodInvocation at 1"]}, {"root": "UPDATE from ImmutableSet to BugCheckerSupplier", "operations": ["UPD SimpleName: ImmutableSet from ImmutableSet to BugCheckerSupplier"]}, {"root": "MOVE from SimpleType: BugCheckerSupplier", "operations": ["MOV SimpleName: ImmutableSet to SimpleType: BugCheckerSupplier at 0"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: FluentIterable to MethodInvocation at 0", "MOV SimpleName: from to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: from to MethodInvocation at 1", "MOV SimpleName: FluentIterable to MethodInvocation at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: BugCheckerSupplier to VariableDeclarationStatement at 0"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV MethodInvocation to SwitchStatement at 0"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ThrowStatement to SwitchStatement at 17"]}, {"root": "UPDATE from build to copyOf", "operations": ["UPD SimpleName: build from build to copyOf"]}, {"root": "INS SimpleName: result to MethodInvocation at 2", "operations": ["INS SimpleName: result to MethodInvocation at 2"]}, {"root": "UPDATE from toSet to build", "operations": ["UPD SimpleName: toSet from toSet to build"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from filter to get", "operations": ["UPD SimpleName: filter from filter to get"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: predicate to MethodInvocation at 2", "MOV SimpleName: filter to MethodInvocation at 1"]}, {"root": "UPDATE from predicate to name", "operations": ["UPD SimpleName: predicate from predicate to name"]}, {"root": "UPDATE from toSet to put", "operations": ["UPD SimpleName: toSet from toSet to put", "UPD SimpleName: toSet from toSet to put", "UPD SimpleName: contains from contains to put", "UPD SimpleName: add from add to put"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toSet to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toSet to MethodInvocation at 1"]}, {"root": "INS SimpleName: supplier to InfixExpression: == at 0", "operations": ["INS SimpleName: supplier to InfixExpression: == at 0"]}, {"root": "INS NullLiteral to InfixExpression: == at 1", "operations": ["INS NullLiteral to InfixExpression: == at 1"]}, {"root": "INS ThrowStatement to Block at 0", "operations": ["INS InfixExpression: + to ClassInstanceCreation at 1", "INS ThrowStatement to Block at 0", "INS MethodInvocation to InfixExpression: + at 0", "INS StringLiteral: \" is not a valid checker name\" to InfixExpression: + at 1", "INS ClassInstanceCreation to ThrowStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from append to putAll", "operations": ["UPD SimpleName: append from append to putAll"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: CLASS_TO_SUPPLIER to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: INSTANCE_TO_SUPPLIER to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getSuppliers to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: add to MethodInvocation at 1", "MOV SimpleName: disabledChecks to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: contains to MethodInvocation at 1", "MOV SimpleName: disabledChecks to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: canonicalName to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS SimpleName: supplier to MethodInvocation at 3", "operations": ["INS SimpleName: supplier to MethodInvocation at 3"]}, {"root": "UPDATE from UnsupportedOperationException to IllegalStateException", "operations": ["UPD SimpleName: UnsupportedOperationException from UnsupportedOperationException to IllegalStateException", "UPD SimpleType: UnsupportedOperationException from UnsupportedOperationException to IllegalStateException"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: builder to MethodInvocation at 3", "INS SimpleType: String to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS SimpleName: putAll to MethodInvocation at 1", "operations": ["INS SimpleName: putAll to MethodInvocation at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: InvalidCommandLineOptionException to ClassInstanceCreation at 0"]}, {"root": "UPDATE from checkerSupplier to supplier", "operations": ["UPD SimpleName: checkerSupplier from checkerSupplier to supplier", "UPD SimpleName: ImmutableSet from ImmutableSet to supplier", "UPD SimpleName: checkerSupplier from checkerSupplier to supplier", "UPD SimpleName: checkerSupplier from checkerSupplier to supplier", "UPD SimpleName: checkerSupplier from checkerSupplier to supplier"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: builder to MethodInvocation at 1", "MOV SimpleName: ImmutableSet to MethodInvocation at 0"]}, {"root": "UPDATE from builder to disableable", "operations": ["UPD SimpleName: builder from builder to disableable"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: disableable to MethodInvocation at 1", "MOV SimpleName: checkerSupplier to MethodInvocation at 0"]}, {"root": "UPDATE from disableable to overrideSeverity", "operations": ["UPD SimpleName: disableable from disableable to overrideSeverity"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: canonicalName to MethodInvocation at 1", "MOV SimpleName: checkerSupplier to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: checkerSupplier to MethodInvocation at 0"]}, {"root": "UPDATE from \"Override to \" to \"Unexpected severity level: \"", "operations": ["UPD StringLiteral: \"Override to \" from \"Override to \" to \"Unexpected severity level: \""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: FluentIterable to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleType: BugCheckerSupplier to MethodInvocation at 2"]}, {"root": "UPDATE from disabledChecks to entry", "operations": ["UPD SimpleName: disabledChecks from disabledChecks to entry"]}, {"root": "UPDATE from add to getKey", "operations": ["UPD SimpleName: add from add to getKey"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: checkerClasses", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: transform"]}, {"root": "DEL SimpleName: result", "operations": ["DEL SimpleName: result"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: checkers", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: transform"]}, {"root": "DEL SimpleName: result", "operations": ["DEL SimpleName: result"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: HashSet", "DEL SimpleType: HashSet", "DEL ParameterizedType: HashSet<>", "DEL ClassInstanceCreation"]}, {"root": "DEL QualifiedName: Severity.OFF", "operations": ["DEL QualifiedName: Severity.OFF"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL StringLiteral: \" not yet supported\"", "operations": ["DEL StringLiteral: \" not yet supported\""]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL Block", "DEL EnhancedForStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL ParameterizedType: ImmutableSet.Builder<BugCheckerSupplier>", "DEL QualifiedName: ImmutableSet.Builder", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleType: ImmutableSet.Builder", "DEL SimpleName: resultSuppliers"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL Block", "DEL PrimitiveType: boolean", "DEL VariableDeclarationStatement", "DEL StringLiteral: \" may not be disabled\"", "DEL VariableDeclarationFragment", "DEL SimpleName: shouldDisable", "DEL IfStatement", "DEL PrefixExpression: !", "DEL ThrowStatement", "DEL SimpleName: shouldDisable", "DEL MethodInvocation", "DEL Block", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL EnhancedForStatement", "DEL IfStatement", "DEL ExpressionStatement", "DEL Block", "DEL InfixExpression: +", "DEL InfixExpression: &&", "DEL SimpleName: checkerSupplier", "DEL PrefixExpression: !", "DEL ClassInstanceCreation", "DEL SimpleName: shouldDisable", "DEL MethodInvocation", "DEL StringLiteral: \"error-prone check \"", "DEL ThisExpression"]}, {"root": "DEL SimpleName: from", "operations": ["DEL SimpleName: from"]}, {"root": "DEL SimpleName: result", "operations": ["DEL SimpleName: result"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL Block"]}, {"root": "DEL ParameterizedType: ImmutableSet<BugCheckerSupplier>", "operations": ["DEL ParameterizedType: ImmutableSet<BugCheckerSupplier>", "DEL SimpleType: ImmutableSet"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: from", "DEL SimpleName: FluentIterable", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: toSet", "DEL MethodInvocation"]}]}}, {"ScannerSupplier_diff": {"operations": ["Move ImportDeclaration(23) into CompilationUnit(815) at 6", "Move ImportDeclaration(29) into CompilationUnit(815) at 8", "Update QualifiedName: com.google.common.collect.FluentIterable(8) to com.google.common.collect.BiMap", "Update QualifiedName: com.google.common.collect.ImmutableSet(10) to com.google.common.collect.HashBiMap", "Update QualifiedName: java.util.HashSet(22) to com.google.common.collect.ImmutableBiMap", "Update QualifiedName: java.util.Set(28) to com.google.errorprone.BugPattern.SeverityLevel", "Insert MethodDeclaration(674) into TypeDeclaration: class(814) at 14", "Insert MethodDeclaration(748) into TypeDeclaration: class(814) at 15", "Update ParameterizedType: ImmutableSet<BugCheckerSupplier>(357) to ImmutableBiMap<String,BugCheckerSupplier>", "Update SimpleName: getSuppliers(358) to getNameToSupplierMap", "Move Javadoc(542) into MethodDeclaration(674) at 0", "Move MarkerAnnotation(544) into MethodDeclaration(674) at 1", "Move Modifier: public(545) into MethodDeclaration(674) at 2", "Move SimpleType: ScannerSupplier(547) into MethodDeclaration(674) at 3", "Move SimpleName: plus(548) into MethodDeclaration(674) at 4", "Move SingleVariableDeclaration(552) into MethodDeclaration(674) at 5", "Insert Block(673) into MethodDeclaration(674) at 6", "Move Javadoc(589) into MethodDeclaration(748) at 0", "Move MarkerAnnotation(591) into MethodDeclaration(748) at 1", "Insert Modifier: public(686) into MethodDeclaration(748) at 2", "Move SimpleType: ScannerSupplier(594) into MethodDeclaration(748) at 3", "Insert SimpleName: filter(689) into MethodDeclaration(748) at 4", "Move SingleVariableDeclaration(603) into MethodDeclaration(748) at 5", "Insert Block(747) into MethodDeclaration(748) at 6", "Insert Javadoc(781) into MethodDeclaration(813) at 0", "Update Modifier: public(592) to private", "Move SimpleType: BugCheckerSupplier(607) into MethodDeclaration(813) at 2", "Update SimpleName: filter(595) to forName", "Insert SingleVariableDeclaration(789) into MethodDeclaration(813) at 4", "Insert VariableDeclarationStatement(119) into Block(155) at 0", "Insert EnhancedForStatement(147) into Block(155) at 1", "Insert VariableDeclarationStatement(218) into Block(250) at 0", "Insert EnhancedForStatement(242) into Block(250) at 1", "Update SimpleType: ImmutableSet(354) to ImmutableBiMap", "Move SimpleType: String(410) into ParameterizedType: ImmutableBiMap<String,BugCheckerSupplier>(411) at 1", "Insert EnhancedForStatement(599) into Block(608) at 2", "Move VariableDeclarationStatement(573) into Block(673) at 0", "Move ReturnStatement(627) into Block(673) at 1", "Insert VariableDeclarationStatement(710) into Block(747) at 0", "Insert EnhancedForStatement(739) into Block(747) at 1", "Move ReturnStatement(578) into Block(747) at 2", "Insert TagElement(780) into Javadoc(781) at 0", "Insert SimpleType: String(787) into SingleVariableDeclaration(789) at 0", "Insert SimpleName: name(788) into SingleVariableDeclaration(789) at 1", "Insert IfStatement(806) into Block(812) at 1", "Insert ReturnStatement(811) into Block(812) at 2", "Update ParameterizedType: ImmutableSet<BugCheckerSupplier>(111) to ImmutableBiMap.Builder<String,BugCheckerSupplier>", "Move ParameterizedType: ImmutableSet<BugCheckerSupplier>(111) into VariableDeclarationStatement(119) at 0", "Insert VariableDeclarationFragment(118) into VariableDeclarationStatement(119) at 1", "Insert SingleVariableDeclaration(127) into EnhancedForStatement(147) at 0", "Insert SimpleName: checkerClasses(128) into EnhancedForStatement(147) at 1", "Insert Block(146) into EnhancedForStatement(147) at 2", "Update ParameterizedType: ImmutableSet<BugCheckerSupplier>(184) to ImmutableBiMap.Builder<String,BugCheckerSupplier>", "Move ParameterizedType: ImmutableSet<BugCheckerSupplier>(184) into VariableDeclarationStatement(218) at 0", "Insert VariableDeclarationFragment(217) into VariableDeclarationStatement(218) at 1", "Insert SingleVariableDeclaration(222) into EnhancedForStatement(242) at 0", "Insert SimpleName: checkers(223) into EnhancedForStatement(242) at 1", "Insert Block(241) into EnhancedForStatement(242) at 2", "Update TextElement: Returns all (343) to Returns a map of check name to ", "Insert TextElement:  for all (394) into TagElement(402) at 2", "Insert TagElement: @link(396) into TagElement(402) at 3", "Insert TextElement: s(397) into TagElement(402) at 4", "Update TextElement: s in this (346) to in this ", "Insert TagElement: @link(400) into TagElement(402) at 6", "Insert TextElement: .(401) into TagElement(402) at 7", "Update SimpleName: ImmutableSet(353) to ImmutableBiMap", "Update ParameterizedType: Set<String>(411) to BiMap<String,BugCheckerSupplier>", "Move SingleVariableDeclaration(427) into EnhancedForStatement(599) at 0", "Move MethodInvocation(430) into EnhancedForStatement(599) at 1", "Insert Block(598) into EnhancedForStatement(599) at 2", "Update ParameterizedType: ImmutableSet<BugCheckerSupplier>(557) to ImmutableBiMap<String,BugCheckerSupplier>", "Insert ParameterizedType: ImmutableBiMap.Builder<String,BugCheckerSupplier>(704) into VariableDeclarationStatement(710) at 0", "Insert VariableDeclarationFragment(709) into VariableDeclarationStatement(710) at 1", "Insert SingleVariableDeclaration(719) into EnhancedForStatement(739) at 0", "Insert MethodInvocation(724) into EnhancedForStatement(739) at 1", "Insert Block(738) into EnhancedForStatement(739) at 2", "Insert TextElement: Returns the (749) into TagElement(780) at 0", "Insert TagElement: @link(751) into TagElement(780) at 1", "Insert TextElement:  that corresponds to the given (752) into TagElement(780) at 2", "Insert TagElement: @code(754) into TagElement(780) at 3", "Insert TextElement: .  Returns(755) into TagElement(780) at 4", "Insert TextElement: null if no checker is found with that name.(756) into TagElement(780) at 5", "Insert TextElement: <p>First searches the (757) into TagElement(780) at 6", "Insert TagElement: @link(759) into TagElement(780) at 7", "Insert TextElement: s that are part of this(760) into TagElement(780) at 8", "Move TagElement: @link(348) into TagElement(780) at 9", "Insert TextElement: , then searches error-prone's built-in (763) into TagElement(780) at 10", "Insert TagElement: @link(765) into TagElement(780) at 11", "Insert TextElement: s.  Note that(766) into TagElement(780) at 12", "Insert TextElement: this does not search any plugin checkers unless this (767) into TagElement(780) at 13", "Insert TagElement: @link(769) into TagElement(780) at 14", "Insert TextElement:  includes those(770) into TagElement(780) at 15", "Insert TextElement: checkers (e.g., by calling (771) into TagElement(780) at 16", "Insert TagElement: @link(775) into TagElement(780) at 17", "Insert TextElement:  with a list of the(776) into TagElement(780) at 18", "Insert TagElement: @link(778) into TagElement(780) at 19", "Insert TextElement: s from the plugin path).(779) into TagElement(780) at 20", "Insert SimpleName: String(786) into SimpleType: String(787) at 0", "Insert SimpleType: BugCheckerSupplier(791) into VariableDeclarationStatement(799) at 0", "Insert InfixExpression: !=(802) into IfStatement(806) at 0", "Insert Block(805) into IfStatement(806) at 1", "Insert MethodInvocation(810) into ReturnStatement(811) at 0", "Insert SimpleType: ImmutableBiMap.Builder(108) into ParameterizedType: ImmutableBiMap.Builder<String,BugCheckerSupplier>(113) at 0", "Update SimpleType: ImmutableSet(108) to String", "Update SimpleName: result(112) to builder", "Move SimpleName: result(112) into VariableDeclarationFragment(118) at 0", "Insert MethodInvocation(117) into VariableDeclarationFragment(118) at 1", "Insert ParameterizedType: Class<? extends BugChecker>(125) into SingleVariableDeclaration(127) at 0", "Insert SimpleName: checkerClass(126) into SingleVariableDeclaration(127) at 1", "Insert VariableDeclarationStatement(137) into Block(146) at 0", "Insert ExpressionStatement(145) into Block(146) at 1", "Insert MethodInvocation(152) into ClassInstanceCreation(153) at 1", "Insert SimpleType: ImmutableBiMap.Builder(207) into ParameterizedType: ImmutableBiMap.Builder<String,BugCheckerSupplier>(212) at 0", "Update SimpleType: ImmutableSet(181) to String", "Update SimpleName: result(185) to builder", "Move SimpleName: result(185) into VariableDeclarationFragment(217) at 0", "Insert MethodInvocation(216) into VariableDeclarationFragment(217) at 1", "Insert SimpleType: BugChecker(220) into SingleVariableDeclaration(222) at 0", "Insert SimpleName: checker(221) into SingleVariableDeclaration(222) at 1", "Insert VariableDeclarationStatement(232) into Block(241) at 0", "Insert ExpressionStatement(240) into Block(241) at 1", "Insert MethodInvocation(247) into ClassInstanceCreation(248) at 1", "Insert SimpleName: BugCheckerSupplier(395) into TagElement: @link(396) at 0", "Insert SimpleName: ScannerSupplier(399) into TagElement: @link(400) at 0", "Insert SimpleType: BiMap(462) into ParameterizedType: BiMap<String,BugCheckerSupplier>(467) at 0", "Update SimpleType: Set(408) to String", "Move SimpleType: BugCheckerSupplier(461) into ParameterizedType: BiMap<String,BugCheckerSupplier>(467) at 2", "Update SimpleName: disabledChecks(412) to result", "Insert MethodInvocation(473) into VariableDeclarationFragment(474) at 1", "Insert VariableDeclarationStatement(497) into Block(598) at 0", "Move IfStatement(455) into Block(598) at 1", "Insert SwitchStatement(597) into Block(598) at 2", "Update SimpleType: ImmutableSet(554) to ImmutableBiMap", "Insert SimpleType: String(642) into ParameterizedType: ImmutableBiMap<String,BugCheckerSupplier>(645) at 1", "Insert SimpleType: BugCheckerSupplier(644) into ParameterizedType: ImmutableBiMap<String,BugCheckerSupplier>(645) at 2", "Insert SimpleType: ImmutableBiMap.Builder(699) into ParameterizedType: ImmutableBiMap.Builder<String,BugCheckerSupplier>(704) at 0", "Insert SimpleType: String(701) into ParameterizedType: ImmutableBiMap.Builder<String,BugCheckerSupplier>(704) at 1", "Insert SimpleType: BugCheckerSupplier(703) into ParameterizedType: ImmutableBiMap.Builder<String,BugCheckerSupplier>(704) at 2", "Insert SimpleName: builder(705) into VariableDeclarationFragment(709) at 0", "Insert MethodInvocation(708) into VariableDeclarationFragment(709) at 1", "Insert ParameterizedType: Entry<String,BugCheckerSupplier>(717) into SingleVariableDeclaration(719) at 0", "Insert SimpleName: entry(718) into SingleVariableDeclaration(719) at 1", "Insert MethodInvocation(722) into MethodInvocation(724) at 0", "Insert SimpleName: entrySet(723) into MethodInvocation(724) at 1", "Insert IfStatement(737) into Block(738) at 0", "Insert MethodInvocation(744) into ClassInstanceCreation(745) at 1", "Insert SimpleName: BugCheckerSupplier(750) into TagElement: @link(751) at 0", "Insert TextElement:  name(753) into TagElement: @code(754) at 0", "Insert SimpleName: BugCheckerSupplier(758) into TagElement: @link(759) at 0", "Insert SimpleName: BugChecker(764) into TagElement: @link(765) at 0", "Insert SimpleName: ScannerSupplier(768) into TagElement: @link(769) at 0", "Insert MemberRef(774) into TagElement: @link(775) at 0", "Insert SimpleName: BugChecker(777) into TagElement: @link(778) at 0", "Update SimpleName: ImmutableSet(604) to BugCheckerSupplier", "Move SimpleName: ImmutableSet(604) into SimpleType: BugCheckerSupplier(791) at 0", "Insert MethodInvocation(797) into VariableDeclarationFragment(798) at 1", "Insert SimpleName: result(800) into InfixExpression: !=(802) at 0", "Insert NullLiteral(801) into InfixExpression: !=(802) at 1", "Insert ReturnStatement(804) into Block(805) at 0", "Insert SimpleName: BuiltInCheckerSuppliers(807) into MethodInvocation(810) at 0", "Insert SimpleName: forName(808) into MethodInvocation(810) at 1", "Insert SimpleName: name(809) into MethodInvocation(810) at 2", "Insert QualifiedName: ImmutableBiMap.Builder(107) into SimpleType: ImmutableBiMap.Builder(108) at 0", "Update SimpleName: ImmutableSet(107) to String", "Update SimpleName: FluentIterable(113) to ImmutableBiMap", "Move SimpleName: FluentIterable(113) into MethodInvocation(117) at 0", "Update SimpleName: from(114) to builder", "Move SimpleName: from(114) into MethodInvocation(117) at 1", "Insert SimpleType: Class(121) into ParameterizedType: Class<? extends BugChecker>(125) at 0", "Insert WildcardType: ? extends BugChecker(124) into ParameterizedType: Class<? extends BugChecker>(125) at 1", "Insert SimpleType: BugCheckerSupplier(130) into VariableDeclarationStatement(137) at 0", "Insert VariableDeclarationFragment(136) into VariableDeclarationStatement(137) at 1", "Insert MethodInvocation(144) into ExpressionStatement(145) at 0", "Insert SimpleName: builder(150) into MethodInvocation(152) at 0", "Insert SimpleName: build(151) into MethodInvocation(152) at 1", "Insert QualifiedName: ImmutableBiMap.Builder(206) into SimpleType: ImmutableBiMap.Builder(207) at 0", "Update SimpleName: ImmutableSet(180) to String", "Update SimpleName: FluentIterable(186) to ImmutableBiMap", "Move SimpleName: FluentIterable(186) into MethodInvocation(216) at 0", "Update SimpleName: from(187) to builder", "Move SimpleName: from(187) into MethodInvocation(216) at 1", "Insert SimpleName: BugChecker(219) into SimpleType: BugChecker(220) at 0", "Insert SimpleType: BugCheckerSupplier(225) into VariableDeclarationStatement(232) at 0", "Insert VariableDeclarationFragment(231) into VariableDeclarationStatement(232) at 1", "Insert MethodInvocation(239) into ExpressionStatement(240) at 0", "Insert SimpleName: builder(245) into MethodInvocation(247) at 0", "Insert SimpleName: build(246) into MethodInvocation(247) at 1", "Insert SimpleName: BiMap(461) into SimpleType: BiMap(462) at 0", "Update SimpleName: Set(407) to String", "Insert SimpleName: HashBiMap(469) into MethodInvocation(473) at 0", "Insert SimpleName: create(470) into MethodInvocation(473) at 1", "Insert MethodInvocation(472) into MethodInvocation(473) at 2", "Move SimpleType: BugCheckerSupplier(470) into VariableDeclarationStatement(497) at 0", "Insert VariableDeclarationFragment(496) into VariableDeclarationStatement(497) at 1", "Move MethodInvocation(433) into SwitchStatement(597) at 0", "Insert SwitchCase(516) into SwitchStatement(597) at 1", "Insert IfStatement(531) into SwitchStatement(597) at 2", "Insert ExpressionStatement(538) into SwitchStatement(597) at 3", "Insert BreakStatement(539) into SwitchStatement(597) at 4", "Insert SwitchCase(541) into SwitchStatement(597) at 5", "Insert ExpressionStatement(549) into SwitchStatement(597) at 6", "Insert BreakStatement(550) into SwitchStatement(597) at 7", "Insert SwitchCase(552) into SwitchStatement(597) at 8", "Insert ExpressionStatement(559) into SwitchStatement(597) at 9", "Insert ExpressionStatement(567) into SwitchStatement(597) at 10", "Insert BreakStatement(568) into SwitchStatement(597) at 11", "Insert SwitchCase(570) into SwitchStatement(597) at 12", "Insert ExpressionStatement(577) into SwitchStatement(597) at 13", "Insert ExpressionStatement(585) into SwitchStatement(597) at 14", "Insert BreakStatement(586) into SwitchStatement(597) at 15", "Insert SwitchCase(587) into SwitchStatement(597) at 16", "Move ThrowStatement(453) into SwitchStatement(597) at 17", "Update SimpleName: resultSuppliers(517) to ImmutableBiMap", "Update SimpleName: build(518) to copyOf", "Insert SimpleName: result(604) into MethodInvocation(605) at 2", "Update SimpleName: ImmutableSet(553) to ImmutableBiMap", "Insert SimpleName: String(641) into SimpleType: String(642) at 0", "Insert SimpleName: BugCheckerSupplier(643) into SimpleType: BugCheckerSupplier(644) at 0", "Update SimpleName: toSet(570) to build", "Insert QualifiedName: ImmutableBiMap.Builder(698) into SimpleType: ImmutableBiMap.Builder(699) at 0", "Insert SimpleName: String(700) into SimpleType: String(701) at 0", "Insert SimpleName: BugCheckerSupplier(702) into SimpleType: BugCheckerSupplier(703) at 0", "Insert SimpleName: ImmutableBiMap(706) into MethodInvocation(708) at 0", "Insert SimpleName: builder(707) into MethodInvocation(708) at 1", "Insert SimpleType: Entry(712) into ParameterizedType: Entry<String,BugCheckerSupplier>(717) at 0", "Insert SimpleType: String(714) into ParameterizedType: Entry<String,BugCheckerSupplier>(717) at 1", "Insert SimpleType: BugCheckerSupplier(716) into ParameterizedType: Entry<String,BugCheckerSupplier>(717) at 2", "Insert ThisExpression(720) into MethodInvocation(722) at 0", "Insert SimpleName: getNameToSupplierMap(721) into MethodInvocation(722) at 1", "Insert MethodInvocation(730) into IfStatement(737) at 0", "Insert Block(736) into IfStatement(737) at 1", "Insert SimpleName: builder(742) into MethodInvocation(744) at 0", "Insert SimpleName: build(743) into MethodInvocation(744) at 1", "Insert SimpleName: ScannerSupplier(772) into MemberRef(774) at 0", "Insert SimpleName: fromBugCheckers(773) into MemberRef(774) at 1", "Move MethodInvocation(614) into MethodInvocation(797) at 0", "Update SimpleName: filter(616) to get", "Move SimpleName: filter(616) into MethodInvocation(797) at 1", "Update SimpleName: predicate(617) to name", "Move SimpleName: predicate(617) into MethodInvocation(797) at 2", "Insert SimpleName: result(803) into ReturnStatement(804) at 0", "Insert SimpleName: Class(120) into SimpleType: Class(121) at 0", "Insert SimpleType: BugChecker(123) into WildcardType: ? extends BugChecker(124) at 0", "Insert SimpleName: BugCheckerSupplier(129) into SimpleType: BugCheckerSupplier(130) at 0", "Insert SimpleName: supplier(131) into VariableDeclarationFragment(136) at 0", "Insert MethodInvocation(135) into VariableDeclarationFragment(136) at 1", "Insert SimpleName: builder(138) into MethodInvocation(144) at 0", "Update SimpleName: toSet(120) to put", "Move SimpleName: toSet(120) into MethodInvocation(144) at 1", "Insert MethodInvocation(142) into MethodInvocation(144) at 2", "Insert SimpleName: supplier(143) into MethodInvocation(144) at 3", "Insert SimpleName: BugCheckerSupplier(224) into SimpleType: BugCheckerSupplier(225) at 0", "Insert SimpleName: supplier(226) into VariableDeclarationFragment(231) at 0", "Insert MethodInvocation(230) into VariableDeclarationFragment(231) at 1", "Insert SimpleName: builder(233) into MethodInvocation(239) at 0", "Update SimpleName: toSet(193) to put", "Move SimpleName: toSet(193) into MethodInvocation(239) at 1", "Insert MethodInvocation(237) into MethodInvocation(239) at 2", "Insert SimpleName: supplier(238) into MethodInvocation(239) at 3", "Insert SimpleName: getNameToSupplierMap(471) into MethodInvocation(472) at 0", "Insert SimpleName: supplier(490) into VariableDeclarationFragment(496) at 0", "Insert MethodInvocation(495) into VariableDeclarationFragment(496) at 1", "Insert SimpleName: supplier(498) into InfixExpression: ==(500) at 0", "Insert NullLiteral(499) into InfixExpression: ==(500) at 1", "Insert ThrowStatement(509) into Block(510) at 0", "Insert SimpleName: OFF(515) into SwitchCase(516) at 0", "Insert PrefixExpression: !(520) into IfStatement(531) at 0", "Insert Block(530) into IfStatement(531) at 1", "Insert MethodInvocation(537) into ExpressionStatement(538) at 0", "Insert SimpleName: DEFAULT(540) into SwitchCase(541) at 0", "Insert MethodInvocation(548) into ExpressionStatement(549) at 0", "Insert SimpleName: WARN(551) into SwitchCase(552) at 0", "Insert Assignment: =(558) into ExpressionStatement(559) at 0", "Insert MethodInvocation(566) into ExpressionStatement(567) at 0", "Insert SimpleName: ERROR(569) into SwitchCase(570) at 0", "Insert Assignment: =(576) into ExpressionStatement(577) at 0", "Move MethodInvocation(509) into ExpressionStatement(585) at 0", "Update SimpleName: append(565) to putAll", "Insert SimpleName: Entry(711) into SimpleType: Entry(712) at 0", "Insert SimpleName: String(713) into SimpleType: String(714) at 0", "Insert SimpleName: BugCheckerSupplier(715) into SimpleType: BugCheckerSupplier(716) at 0", "Insert SimpleName: predicate(725) into MethodInvocation(730) at 0", "Insert SimpleName: apply(726) into MethodInvocation(730) at 1", "Insert MethodInvocation(729) into MethodInvocation(730) at 2", "Insert ExpressionStatement(735) into Block(736) at 0", "Update SimpleName: getSuppliers(613) to getNameToSupplierMap", "Insert SimpleName: BugChecker(122) into SimpleType: BugChecker(123) at 0", "Move SimpleName: CLASS_TO_SUPPLIER(118) into MethodInvocation(135) at 0", "Insert SimpleName: apply(133) into MethodInvocation(135) at 1", "Insert SimpleName: checkerClass(134) into MethodInvocation(135) at 2", "Insert SimpleName: supplier(140) into MethodInvocation(142) at 0", "Insert SimpleName: canonicalName(141) into MethodInvocation(142) at 1", "Move SimpleName: INSTANCE_TO_SUPPLIER(191) into MethodInvocation(230) at 0", "Insert SimpleName: apply(228) into MethodInvocation(230) at 1", "Insert SimpleName: checker(229) into MethodInvocation(230) at 2", "Insert SimpleName: supplier(235) into MethodInvocation(237) at 0", "Insert SimpleName: canonicalName(236) into MethodInvocation(237) at 1", "Insert SimpleName: forName(491) into MethodInvocation(495) at 0", "Insert MethodInvocation(494) into MethodInvocation(495) at 1", "Insert ClassInstanceCreation(508) into ThrowStatement(509) at 0", "Insert MethodInvocation(519) into PrefixExpression: !(520) at 0", "Insert ThrowStatement(529) into Block(530) at 0", "Update SimpleName: getSuppliers(474) to result", "Move SimpleName: getSuppliers(474) into MethodInvocation(537) at 0", "Insert SimpleName: remove(533) into MethodInvocation(537) at 1", "Move MethodInvocation(440) into MethodInvocation(537) at 2", "Update SimpleName: disabledChecks(478) to result", "Move SimpleName: disabledChecks(478) into MethodInvocation(548) at 0", "Update SimpleName: contains(479) to put", "Move SimpleName: contains(479) into MethodInvocation(548) at 1", "Move MethodInvocation(482) into MethodInvocation(548) at 2", "Insert SimpleName: supplier(547) into MethodInvocation(548) at 3", "Insert SimpleName: supplier(553) into Assignment: =(558) at 0", "Insert MethodInvocation(557) into Assignment: =(558) at 1", "Insert SimpleName: result(560) into MethodInvocation(566) at 0", "Insert SimpleName: put(561) into MethodInvocation(566) at 1", "Insert MethodInvocation(564) into MethodInvocation(566) at 2", "Insert SimpleName: supplier(565) into MethodInvocation(566) at 3", "Insert SimpleName: supplier(571) into Assignment: =(576) at 0", "Insert MethodInvocation(575) into Assignment: =(576) at 1", "Update SimpleName: resultSuppliers(506) to result", "Update SimpleName: add(507) to put", "Insert MethodInvocation(582) into MethodInvocation(584) at 2", "Insert SimpleName: supplier(583) into MethodInvocation(584) at 3", "Update SimpleType: UnsupportedOperationException(445) to IllegalStateException", "Insert MethodInvocation(653) into MethodInvocation(658) at 0", "Insert SimpleName: putAll(654) into MethodInvocation(658) at 1", "Update SimpleName: getSuppliers(567) to getNameToSupplierMap", "Insert SimpleName: entry(727) into MethodInvocation(729) at 0", "Insert SimpleName: getValue(728) into MethodInvocation(729) at 1", "Insert MethodInvocation(734) into ExpressionStatement(735) at 0", "Insert SimpleName: entry(492) into MethodInvocation(494) at 0", "Insert SimpleName: getKey(493) into MethodInvocation(494) at 1", "Move SimpleType: InvalidCommandLineOptionException(493) into ClassInstanceCreation(508) at 0", "Insert InfixExpression: +(507) into ClassInstanceCreation(508) at 1", "Update SimpleName: ImmutableSet(464) to supplier", "Move SimpleName: ImmutableSet(464) into MethodInvocation(519) at 0", "Update SimpleName: builder(465) to disableable", "Move SimpleName: builder(465) into MethodInvocation(519) at 1", "Insert ClassInstanceCreation(528) into ThrowStatement(529) at 0", "Update SimpleName: checkerSupplier(480) to supplier", "Update SimpleName: checkerSupplier(487) to supplier", "Move SimpleName: checkerSupplier(487) into MethodInvocation(557) at 0", "Update SimpleName: disableable(488) to overrideSeverity", "Move SimpleName: disableable(488) into MethodInvocation(557) at 1", "Insert QualifiedName: SeverityLevel.WARNING(556) into MethodInvocation(557) at 2", "Update SimpleName: checkerSupplier(495) to supplier", "Move SimpleName: checkerSupplier(495) into MethodInvocation(564) at 0", "Move SimpleName: canonicalName(496) into MethodInvocation(564) at 1", "Insert SimpleName: supplier(572) into MethodInvocation(575) at 0", "Insert SimpleName: overrideSeverity(573) into MethodInvocation(575) at 1", "Insert QualifiedName: SeverityLevel.ERROR(574) into MethodInvocation(575) at 2", "Update SimpleName: checkerSupplier(508) to supplier", "Move SimpleName: checkerSupplier(508) into MethodInvocation(582) at 0", "Insert SimpleName: canonicalName(581) into MethodInvocation(582) at 1", "Update SimpleName: UnsupportedOperationException(444) to IllegalStateException", "Update StringLiteral: \"Override to \"(446) to \"Unexpected severity level: \"", "Update SimpleName: FluentIterable(559) to ImmutableBiMap", "Move SimpleName: FluentIterable(559) into MethodInvocation(653) at 0", "Insert SimpleType: String(649) into MethodInvocation(653) at 1", "Move SimpleType: BugCheckerSupplier(556) into MethodInvocation(653) at 2", "Insert SimpleName: builder(652) into MethodInvocation(653) at 3", "Update SimpleName: getSuppliers(562) to getNameToSupplierMap", "Insert SimpleName: builder(731) into MethodInvocation(734) at 0", "Insert SimpleName: put(732) into MethodInvocation(734) at 1", "Insert SimpleName: entry(733) into MethodInvocation(734) at 2", "Insert MethodInvocation(505) into InfixExpression: +(507) at 0", "Insert StringLiteral: \" is not a valid checker name\"(506) into InfixExpression: +(507) at 1", "Insert SimpleType: InvalidCommandLineOptionException(522) into ClassInstanceCreation(528) at 0", "Insert InfixExpression: +(527) into ClassInstanceCreation(528) at 1", "Insert SimpleName: String(648) into SimpleType: String(649) at 0", "Update SimpleName: disabledChecks(436) to entry", "Move SimpleName: disabledChecks(436) into MethodInvocation(505) at 0", "Update SimpleName: add(437) to getKey", "Move SimpleName: add(437) into MethodInvocation(505) at 1", "Insert SimpleName: InvalidCommandLineOptionException(521) into SimpleType: InvalidCommandLineOptionException(522) at 0", "Insert MethodInvocation(525) into InfixExpression: +(527) at 0", "Insert StringLiteral: \" may not be disabled\"(526) into InfixExpression: +(527) at 1", "Insert SimpleName: supplier(523) into MethodInvocation(525) at 0", "Insert SimpleName: canonicalName(524) into MethodInvocation(525) at 1", "Delete SimpleName: checkerClasses(115)", "Delete MethodInvocation(116)", "Delete SimpleName: transform(117)", "Delete MethodInvocation(119)", "Delete MethodInvocation(121)", "Delete VariableDeclarationFragment(122)", "Delete VariableDeclarationStatement(123)", "Delete SimpleName: result(126)", "Delete SimpleName: checkers(188)", "Delete MethodInvocation(189)", "Delete SimpleName: transform(190)", "Delete MethodInvocation(192)", "Delete MethodInvocation(194)", "Delete VariableDeclarationFragment(195)", "Delete VariableDeclarationStatement(196)", "Delete SimpleName: result(199)", "Delete Modifier: public(351)", "Delete SimpleName: HashSet(413)", "Delete SimpleType: HashSet(414)", "Delete ParameterizedType: HashSet<>(415)", "Delete ClassInstanceCreation(416)", "Delete QualifiedName: Severity.OFF(434)", "Delete MethodInvocation(441)", "Delete ExpressionStatement(442)", "Delete Block(454)", "Delete StringLiteral: \" not yet supported\"(450)", "Delete Block(456)", "Delete EnhancedForStatement(457)", "Delete QualifiedName: ImmutableSet.Builder(458)", "Delete SimpleType: ImmutableSet.Builder(459)", "Delete ParameterizedType: ImmutableSet.Builder<BugCheckerSupplier>(462)", "Delete SimpleName: resultSuppliers(463)", "Delete MethodInvocation(466)", "Delete VariableDeclarationFragment(467)", "Delete VariableDeclarationStatement(468)", "Delete SimpleName: checkerSupplier(471)", "Delete SingleVariableDeclaration(472)", "Delete ThisExpression(473)", "Delete MethodInvocation(475)", "Delete PrimitiveType: boolean(476)", "Delete SimpleName: shouldDisable(477)", "Delete MethodInvocation(483)", "Delete VariableDeclarationFragment(484)", "Delete VariableDeclarationStatement(485)", "Delete SimpleName: shouldDisable(486)", "Delete MethodInvocation(489)", "Delete PrefixExpression: !(490)", "Delete InfixExpression: &&(491)", "Delete StringLiteral: \"error-prone check \"(494)", "Delete MethodInvocation(497)", "Delete StringLiteral: \" may not be disabled\"(498)", "Delete InfixExpression: +(499)", "Delete ClassInstanceCreation(500)", "Delete ThrowStatement(501)", "Delete Block(502)", "Delete IfStatement(503)", "Delete SimpleName: shouldDisable(504)", "Delete PrefixExpression: !(505)", "Delete ExpressionStatement(510)", "Delete Block(511)", "Delete IfStatement(512)", "Delete Block(513)", "Delete EnhancedForStatement(514)", "Delete SimpleName: from(560)", "Delete SimpleName: result(576)", "Delete Block(579)", "Delete MethodDeclaration(580)", "Delete SimpleType: ImmutableSet(605)", "Delete ParameterizedType: ImmutableSet<BugCheckerSupplier>(608)", "Delete ThisExpression(612)", "Delete SimpleName: FluentIterable(610)", "Delete SimpleName: from(611)", "Delete MethodInvocation(615)", "Delete MethodInvocation(618)", "Delete SimpleName: toSet(619)", "Delete MethodInvocation(620)"]}}, {"ScannerSupplierImpl_cluster": {"actions": [{"root": "UPDATE from com.google.common.collect.ImmutableSet to com.google.common.collect.ImmutableBiMap", "operations": ["UPD QualifiedName: com.google.common.collect.ImmutableSet from com.google.common.collect.ImmutableSet to com.google.common.collect.ImmutableBiMap"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS ParameterizedType: ImmutableBiMap<String,BugCheckerSupplier> to MethodDeclaration at 1", "INS Block to MethodDeclaration at 3", "INS SimpleName: nameToSupplierMap to ReturnStatement at 0", "INS SimpleName: getNameToSupplierMap to MethodDeclaration at 2", "INS SimpleName: ImmutableBiMap to SimpleType: ImmutableBiMap at 0", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: ImmutableBiMap to ParameterizedType: ImmutableBiMap<String,BugCheckerSupplier> at 0", "INS SimpleType: String to ParameterizedType: ImmutableBiMap<String,BugCheckerSupplier> at 1"]}, {"root": "UPDATE from ImmutableSet<BugCheckerSupplier> to ImmutableBiMap<String,BugCheckerSupplier>", "operations": ["UPD ParameterizedType: ImmutableSet<BugCheckerSupplier> from ImmutableSet<BugCheckerSupplier> to ImmutableBiMap<String,BugCheckerSupplier>", "UPD ParameterizedType: ImmutableSet<BugCheckerSupplier> from ImmutableSet<BugCheckerSupplier> to ImmutableBiMap<String,BugCheckerSupplier>"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from ImmutableSet to ImmutableBiMap", "operations": ["UPD SimpleName: ImmutableSet from ImmutableSet to ImmutableBiMap", "UPD SimpleType: ImmutableSet from ImmutableSet to ImmutableBiMap", "UPD SimpleName: ImmutableSet from ImmutableSet to ImmutableBiMap", "UPD SimpleType: ImmutableSet from ImmutableSet to ImmutableBiMap"]}, {"root": "INS SimpleType: String to ParameterizedType: ImmutableSet<BugCheckerSupplier> at 1", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to ParameterizedType: ImmutableSet<BugCheckerSupplier> at 1"]}, {"root": "UPDATE from suppliers to nameToSupplierMap", "operations": ["UPD SimpleName: suppliers from suppliers to nameToSupplierMap", "UPD SimpleName: suppliers from suppliers to nameToSupplierMap", "UPD SimpleName: suppliers from suppliers to nameToSupplierMap", "UPD SimpleName: suppliers from suppliers to nameToSupplierMap"]}, {"root": "MOVE from ParameterizedType: ImmutableBiMap<String,BugCheckerSupplier>", "operations": ["MOV SimpleType: BugCheckerSupplier to ParameterizedType: ImmutableBiMap<String,BugCheckerSupplier> at 2"]}, {"root": "INS SimpleType: String to ParameterizedType: ImmutableSet<BugCheckerSupplier> at 1", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to ParameterizedType: ImmutableSet<BugCheckerSupplier> at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: values to MethodInvocation at 1"]}, {"root": "UPDATE from suppliers to getNameToSupplierMap", "operations": ["UPD SimpleName: suppliers from suppliers to getNameToSupplierMap"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: suppliers to MethodInvocation at 0"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ReturnStatement", "DEL SimpleName: suppliers", "DEL ParameterizedType: ImmutableSet<BugCheckerSupplier>", "DEL SimpleName: ImmutableSet", "DEL SimpleName: getSuppliers", "DEL SimpleType: ImmutableSet", "DEL Modifier: public", "DEL Block", "DEL MethodDeclaration"]}]}}, {"ScannerSupplierImpl_diff": {"operations": ["Update QualifiedName: com.google.common.collect.ImmutableSet(8) to com.google.common.collect.ImmutableBiMap", "Insert MethodDeclaration(100) into TypeDeclaration: class(148) at 6", "Update ParameterizedType: ImmutableSet<BugCheckerSupplier>(32) to ImmutableBiMap<String,BugCheckerSupplier>", "Move MarkerAnnotation(53) into MethodDeclaration(100) at 0", "Insert ParameterizedType: ImmutableBiMap<String,BugCheckerSupplier>(95) into MethodDeclaration(100) at 1", "Insert SimpleName: getNameToSupplierMap(96) into MethodDeclaration(100) at 2", "Insert Block(99) into MethodDeclaration(100) at 3", "Update SimpleType: ImmutableSet(29) to ImmutableBiMap", "Insert SimpleType: String(31) into ParameterizedType: ImmutableBiMap<String,BugCheckerSupplier>(34) at 1", "Update SimpleName: suppliers(33) to nameToSupplierMap", "Update ParameterizedType: ImmutableSet<BugCheckerSupplier>(41) to ImmutableBiMap<String,BugCheckerSupplier>", "Update SimpleName: suppliers(42) to nameToSupplierMap", "Insert SimpleType: ImmutableBiMap(90) into ParameterizedType: ImmutableBiMap<String,BugCheckerSupplier>(95) at 0", "Insert SimpleType: String(92) into ParameterizedType: ImmutableBiMap<String,BugCheckerSupplier>(95) at 1", "Move SimpleType: BugCheckerSupplier(58) into ParameterizedType: ImmutableBiMap<String,BugCheckerSupplier>(95) at 2", "Insert ReturnStatement(98) into Block(99) at 0", "Update SimpleName: ImmutableSet(28) to ImmutableBiMap", "Insert SimpleName: String(30) into SimpleType: String(31) at 0", "Update SimpleType: ImmutableSet(38) to ImmutableBiMap", "Insert SimpleType: String(42) into ParameterizedType: ImmutableBiMap<String,BugCheckerSupplier>(45) at 1", "Insert SimpleName: ImmutableBiMap(89) into SimpleType: ImmutableBiMap(90) at 0", "Insert SimpleName: String(91) into SimpleType: String(92) at 0", "Insert SimpleName: nameToSupplierMap(97) into ReturnStatement(98) at 0", "Update SimpleName: ImmutableSet(37) to ImmutableBiMap", "Insert SimpleName: String(41) into SimpleType: String(42) at 0", "Update SimpleName: suppliers(47) to nameToSupplierMap", "Update SimpleName: suppliers(45) to nameToSupplierMap", "Insert MethodInvocation(73) into MethodInvocation(74) at 2", "Insert MethodInvocation(71) into MethodInvocation(73) at 0", "Insert SimpleName: values(72) into MethodInvocation(73) at 1", "Update SimpleName: suppliers(79) to getNameToSupplierMap", "Move SimpleName: suppliers(79) into MethodInvocation(71) at 0", "Delete Modifier: public(54)", "Delete SimpleName: ImmutableSet(55)", "Delete SimpleType: ImmutableSet(56)", "Delete ParameterizedType: ImmutableSet<BugCheckerSupplier>(59)", "Delete SimpleName: getSuppliers(60)", "Delete SimpleName: suppliers(61)", "Delete ReturnStatement(62)", "Delete Block(63)", "Delete MethodDeclaration(64)"]}}], "commit_stats": [{"total_files": 18, "deleted_files": 2, "testing": "True", "maintenance": "True", "build": "False"}]}