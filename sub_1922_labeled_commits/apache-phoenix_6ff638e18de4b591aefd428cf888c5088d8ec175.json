{"application": "apache-phoenix", "csha": "6ff638e18de4b591aefd428cf888c5088d8ec175", "files": [{"QueryWithOffsetIT_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 13"]}, {"root": "INS SimpleName: i to InfixExpression: < at 0", "operations": ["INS SimpleName: i to InfixExpression: < at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV PostfixExpression: ++ to ExpressionStatement at 0"]}, {"root": "INS InfixExpression: + to MethodInvocation at 1", "operations": ["INS SimpleName: i to InfixExpression: + at 1", "INS StringLiteral: \"Expected string didn't match for i = \" to InfixExpression: + at 0", "INS InfixExpression: + to MethodInvocation at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV InfixExpression: + to ArrayAccess at 1"]}, {"root": "DEL InfixExpression: -", "operations": ["DEL InfixExpression: -", "DEL NumberLiteral: 1"]}]}}, {"QueryWithOffsetIT_diff": {"operations": ["Move MethodDeclaration(981) into TypeDeclaration: class(985) at 13", "Insert SimpleName: i(293) into InfixExpression: <(295) at 0", "Insert ExpressionStatement(319) into Block(320) at 2", "Move PostfixExpression: ++(294) into ExpressionStatement(319) at 0", "Insert InfixExpression: +(305) into MethodInvocation(315) at 1", "Insert StringLiteral: \"Expected string didn't match for i = \"(303) into InfixExpression: +(305) at 0", "Insert SimpleName: i(304) into InfixExpression: +(305) at 1", "Move InfixExpression: +(307) into ArrayAccess(310) at 1", "Delete NumberLiteral: 1(308)", "Delete InfixExpression: -(309)"]}}, {"ScanRegionObserver_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 43", "operations": ["INS ImportDeclaration to CompilationUnit at 43", "INS QualifiedName: org.apache.phoenix.schema.types.PInteger to ImportDeclaration at 0"]}, {"root": "INS CastExpression to Assignment: = at 1", "operations": ["INS CastExpression to Assignment: = at 1", "INS MethodInvocation to CastExpression at 1", "INS SimpleType: Integer to CastExpression at 0", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS QualifiedName: PInteger.INSTANCE to MethodInvocation at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: KeyValue to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from toInt to toObject", "operations": ["UPD SimpleName: toInt from toInt to toObject"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toInt to MethodInvocation at 1", "MOV SimpleName: scanOffsetBytes to MethodInvocation at 2"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: KeyValue to ClassInstanceCreation at 0"]}, {"root": "INS QualifiedName: PInteger.INSTANCE to MethodInvocation at 0", "operations": ["INS QualifiedName: PInteger.INSTANCE to MethodInvocation at 0"]}, {"root": "UPDATE from getUnusedOffset to getRemainingOffset", "operations": ["UPD SimpleName: getUnusedOffset from getUnusedOffset to getRemainingOffset"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: Bytes", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: Bytes", "operations": ["DEL SimpleName: Bytes"]}]}}, {"ScanRegionObserver_diff": {"operations": ["Insert ImportDeclaration(87) into CompilationUnit(1617) at 43", "Insert QualifiedName: org.apache.phoenix.schema.types.PInteger(86) into ImportDeclaration(87) at 0", "Insert CastExpression(747) into Assignment: =(748) at 1", "Insert SimpleType: Integer(742) into CastExpression(747) at 0", "Insert MethodInvocation(746) into CastExpression(747) at 1", "Move SimpleType: KeyValue(1107) into VariableDeclarationStatement(1124) at 0", "Insert SimpleName: Integer(741) into SimpleType: Integer(742) at 0", "Insert QualifiedName: PInteger.INSTANCE(743) into MethodInvocation(746) at 0", "Update SimpleName: toInt(740) to toObject", "Move SimpleName: toInt(740) into MethodInvocation(746) at 1", "Move SimpleName: scanOffsetBytes(741) into MethodInvocation(746) at 2", "Move SimpleType: KeyValue(1104) into ClassInstanceCreation(1122) at 0", "Insert QualifiedName: PInteger.INSTANCE(1116) into MethodInvocation(1121) at 0", "Update SimpleName: getUnusedOffset(1114) to getRemainingOffset", "Delete SimpleName: Bytes(739)", "Delete MethodInvocation(742)", "Delete SimpleName: Bytes(1111)"]}}, {"ScanPlan_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: org.apache.phoenix.util.ScanUtil.isPacingScannersPossible to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: org.apache.phoenix.util.ScanUtil.isRoundRobinPossible to ImportDeclaration at 0"]}, {"root": "INS IfStatement to Block at 6", "operations": ["INS Block to IfStatement at 1", "INS SimpleName: table to MethodInvocation at 0", "INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: context to MethodInvocation at 3", "INS SimpleName: orderBy to MethodInvocation at 2", "INS ParenthesizedExpression to InfixExpression: && at 0", "INS QualifiedName: IndexType.LOCAL to InfixExpression: == at 1", "INS SimpleName: ScanUtil to MethodInvocation at 0", "INS SimpleName: getIndexType to MethodInvocation at 1", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS InfixExpression: != to InfixExpression: || at 0", "INS SimpleName: shouldRowsBeInRowKeyOrder to MethodInvocation at 1", "INS InfixExpression: == to InfixExpression: || at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: table to MethodInvocation at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS IfStatement to Block at 6", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: getBucketNum to MethodInvocation at 1"]}, {"root": "INS ParenthesizedExpression to IfStatement at 0", "operations": ["INS ParenthesizedExpression to IfStatement at 0"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV InfixExpression: || to ParenthesizedExpression at 0"]}, {"root": "DEL SimpleName: ScanUtil", "operations": ["DEL SimpleName: ScanUtil"]}, {"root": "DEL SimpleName: ScanUtil", "operations": ["DEL SimpleName: ScanUtil"]}, {"root": "DEL InfixExpression: &&", "operations": ["DEL NullLiteral", "DEL SimpleName: offset", "DEL InfixExpression: &&", "DEL ParenthesizedExpression", "DEL InfixExpression: =="]}]}}, {"ScanPlan_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(1133) at 1", "Insert ImportDeclaration(5) into CompilationUnit(1133) at 2", "Insert QualifiedName: org.apache.phoenix.util.ScanUtil.isPacingScannersPossible(2) into ImportDeclaration(3) at 0", "Insert QualifiedName: org.apache.phoenix.util.ScanUtil.isRoundRobinPossible(4) into ImportDeclaration(5) at 0", "Insert IfStatement(438) into Block(604) at 6", "Insert InfixExpression: &&(434) into IfStatement(438) at 0", "Insert Block(437) into IfStatement(438) at 1", "Insert ParenthesizedExpression(657) into IfStatement(661) at 0", "Insert ParenthesizedExpression(428) into InfixExpression: &&(434) at 0", "Insert MethodInvocation(433) into InfixExpression: &&(434) at 1", "Insert ReturnStatement(436) into Block(437) at 0", "Move InfixExpression: ||(632) into ParenthesizedExpression(657) at 0", "Insert InfixExpression: ||(427) into ParenthesizedExpression(428) at 0", "Insert SimpleName: ScanUtil(429) into MethodInvocation(433) at 0", "Insert SimpleName: shouldRowsBeInRowKeyOrder(430) into MethodInvocation(433) at 1", "Insert SimpleName: orderBy(431) into MethodInvocation(433) at 2", "Insert SimpleName: context(432) into MethodInvocation(433) at 3", "Insert BooleanLiteral: false(435) into ReturnStatement(436) at 0", "Insert InfixExpression: !=(421) into InfixExpression: ||(427) at 0", "Insert InfixExpression: ==(426) into InfixExpression: ||(427) at 1", "Insert MethodInvocation(419) into InfixExpression: !=(421) at 0", "Insert NullLiteral(420) into InfixExpression: !=(421) at 1", "Insert MethodInvocation(424) into InfixExpression: ==(426) at 0", "Insert QualifiedName: IndexType.LOCAL(425) into InfixExpression: ==(426) at 1", "Insert SimpleName: table(417) into MethodInvocation(419) at 0", "Insert SimpleName: getBucketNum(418) into MethodInvocation(419) at 1", "Insert SimpleName: table(422) into MethodInvocation(424) at 0", "Insert SimpleName: getIndexType(423) into MethodInvocation(424) at 1", "Delete SimpleName: ScanUtil(623)", "Delete SimpleName: ScanUtil(628)", "Delete ParenthesizedExpression(633)", "Delete SimpleName: offset(634)", "Delete NullLiteral(635)", "Delete InfixExpression: ==(636)", "Delete InfixExpression: &&(637)"]}}, {"BaseResultIterators_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS SimpleName: isReverse to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleName: isReverse to MethodInvocation at 5", "operations": ["INS SimpleName: isReverse to MethodInvocation at 5"]}]}}, {"BaseResultIterators_diff": {"operations": ["Insert SingleVariableDeclaration(3977) into MethodDeclaration(3980) at 8", "Insert PrimitiveType: boolean(3975) into SingleVariableDeclaration(3977) at 0", "Insert SimpleName: isReverse(3976) into SingleVariableDeclaration(3977) at 1", "Insert SimpleName: isReverse(3112) into MethodInvocation(3113) at 5"]}}, {"ChunkedResultIterator_cluster": {"actions": [{"root": "INS MarkerAnnotation to TypeDeclaration: class at 1", "operations": ["INS MarkerAnnotation to TypeDeclaration: class at 1", "INS SimpleName: Deprecated to MarkerAnnotation at 0"]}, {"root": "INS Javadoc to TypeDeclaration: class at 0", "operations": ["INS Javadoc to TypeDeclaration: class at 0", "INS TextElement: we rely on pacing the server side scanners instead of pulling rows from the server in chunks. to TagElement at 1", "INS TextElement: Chunking is deprecated and shouldn't be used while implementing new features. As of HBase 0.98.17,  to TagElement at 0", "INS TagElement to Javadoc at 0"]}, {"root": "INS MarkerAnnotation to TypeDeclaration: class at 1", "operations": ["INS MarkerAnnotation to TypeDeclaration: class at 1", "INS SimpleName: Deprecated to MarkerAnnotation at 0"]}, {"root": "INS TextElement: <p> to TagElement at 3", "operations": ["INS TextElement: <p> to TagElement at 3"]}, {"root": "INS TextElement: Chunking is deprecated and shouldn't be used while implementing new features. As of HBase 0.98.17,  to TagElement at 4", "operations": ["INS TextElement: Chunking is deprecated and shouldn't be used while implementing new features. As of HBase 0.98.17,  to TagElement at 4"]}, {"root": "INS TextElement: we rely on pacing the server side scanners instead of pulling rows from the server in chunks. to TagElement at 5", "operations": ["INS TextElement: we rely on pacing the server side scanners instead of pulling rows from the server in chunks. to TagElement at 5"]}, {"root": "INS TextElement: </p> to TagElement at 6", "operations": ["INS TextElement: </p> to TagElement at 6"]}]}}, {"ChunkedResultIterator_diff": {"operations": ["Insert MarkerAnnotation(51) into TypeDeclaration: class(917) at 1", "Insert SimpleName: Deprecated(50) into MarkerAnnotation(51) at 0", "Insert Javadoc(128) into TypeDeclaration: class(267) at 0", "Insert MarkerAnnotation(130) into TypeDeclaration: class(267) at 1", "Insert TextElement: <p>(44) into TagElement(48) at 3", "Insert TextElement: Chunking is deprecated and shouldn't be used while implementing new features. As of HBase 0.98.17, (45) into TagElement(48) at 4", "Insert TextElement: we rely on pacing the server side scanners instead of pulling rows from the server in chunks.(46) into TagElement(48) at 5", "Insert TextElement: </p>(47) into TagElement(48) at 6", "Insert TagElement(127) into Javadoc(128) at 0", "Insert SimpleName: Deprecated(129) into MarkerAnnotation(130) at 0", "Insert TextElement: Chunking is deprecated and shouldn't be used while implementing new features. As of HBase 0.98.17, (125) into TagElement(127) at 0", "Insert TextElement: we rely on pacing the server side scanners instead of pulling rows from the server in chunks.(126) into TagElement(127) at 1"]}}, {"OffsetResultIterator_cluster": {"actions": [{"root": "UPDATE from getUnusedOffset to getRemainingOffset", "operations": ["UPD SimpleName: getUnusedOffset from getUnusedOffset to getRemainingOffset"]}]}}, {"OffsetResultIterator_diff": {"operations": ["Update SimpleName: getUnusedOffset(125) to getRemainingOffset"]}}, {"ParallelIterators_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS SimpleName: isReverse to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from addIterator to addIteratorForLeaseRenewal", "operations": ["UPD SimpleName: addIterator from addIterator to addIteratorForLeaseRenewal"]}]}}, {"ParallelIterators_diff": {"operations": ["Insert SingleVariableDeclaration(191) into MethodDeclaration(586) at 8", "Insert PrimitiveType: boolean(189) into SingleVariableDeclaration(191) at 0", "Insert SimpleName: isReverse(190) into SingleVariableDeclaration(191) at 1", "Update SimpleName: addIterator(423) to addIteratorForLeaseRenewal"]}}, {"SerialIterators_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS QualifiedName: org.apache.phoenix.coprocessor.BaseScannerRegionObserver to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 12"]}, {"root": "INS ImportDeclaration to CompilationUnit at 18", "operations": ["INS QualifiedName: org.apache.phoenix.schema.tuple.Tuple to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 18"]}, {"root": "INS ImportDeclaration to CompilationUnit at 19", "operations": ["INS QualifiedName: org.apache.phoenix.schema.types.PInteger to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 19"]}, {"root": "UPDATE from org.apache.phoenix.util.ScanUtil to org.apache.phoenix.util.QueryUtil", "operations": ["UPD QualifiedName: org.apache.phoenix.util.ScanUtil from org.apache.phoenix.util.ScanUtil to org.apache.phoenix.util.QueryUtil"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: offset to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleType: Integer to FieldDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleName: flattenedScans to MethodInvocation at 0", "INS NumberLiteral: 10 to InfixExpression: * at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS SimpleName: flattenedScans to VariableDeclarationFragment at 1", "INS MethodInvocation to InfixExpression: * at 0", "INS SimpleType: List to ParameterizedType: List<Scan> at 0", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS InfixExpression: * to VariableDeclarationFragment at 1", "INS SimpleName: flattenedScans to MethodInvocation at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Lists to MethodInvocation at 0", "INS EnhancedForStatement to Block at 7", "INS SimpleName: flattenedScans to Assignment: = at 0", "INS Block to IfStatement at 1", "INS PrefixExpression: ! to IfStatement at 0", "INS IfStatement to Block at 0", "INS SimpleName: size to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: isReverse to IfStatement at 0", "INS ParameterizedType: List<Scan> to SingleVariableDeclaration at 0", "INS IfStatement to Block at 8", "INS SimpleName: Scan to SimpleType: Scan at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: nestedScans to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 5", "INS SimpleType: Scan to ParameterizedType: List<Scan> at 1", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: finalScans to VariableDeclarationFragment at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: list to SingleVariableDeclaration at 1", "INS SimpleName: nestedScans to EnhancedForStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: reverse to MethodInvocation at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: addAll to MethodInvocation at 1", "INS SimpleName: expectedListSize to VariableDeclarationFragment at 0", "INS Block to MethodDeclaration at 9", "INS SimpleName: list to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS SimpleName: flattenedScans to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 11", "operations": ["INS SimpleName: EMPTY_ITERATOR to ReturnStatement at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: remainingOffset to InfixExpression: != at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Assignment: = to ReturnStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: planSteps to SingleVariableDeclaration at 1", "INS TextElement: This helps reduce the cost of pre-constructing all the iterators to TagElement at 1", "INS SimpleName: currentIterator to ReturnStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: private to FieldDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: tableName to Assignment: = at 1", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS MethodInvocation to InfixExpression: == at 0", "INS ExpressionStatement to Block at 1", "INS ReturnStatement to Block at 0", "INS ExpressionStatement to Block at 3", "INS IfStatement to Block at 1", "INS SimpleName: scans to FieldAccess at 1", "INS IfStatement to IfStatement at 2", "INS Block to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: nextIterator to MethodInvocation at 0", "INS SimpleType: String to FieldDeclaration at 2", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: currentIterator to Assignment: = at 0", "INS SimpleName: peekingItr to MethodInvocation at 0", "INS SimpleName: tableName to SingleVariableDeclaration at 1", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: next to MethodInvocation at 1", "INS IfStatement to Block at 5", "INS Block to IfStatement at 1", "INS SimpleName: offset to Assignment: = at 1", "INS SimpleType: List to ParameterizedType: List<Scan> at 0", "INS Modifier: public to MethodDeclaration at 1", "INS NullLiteral to InfixExpression: == at 1", "INS TextElement: Iterator that creates iterators for scans only when needed. to TagElement at 0", "INS Block to IfStatement at 1", "INS InfixExpression: >= to IfStatement at 0", "INS SimpleName: renewLeaseThreshold to FieldAccess at 1", "INS SimpleType: SQLException to MethodDeclaration at 4", "INS IfStatement to Block at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: currentIterator to InfixExpression: != at 0", "INS Modifier: final to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: next to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: next to MethodInvocation at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: QueryUtil to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS Modifier: private to MethodDeclaration at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: peek to MethodDeclaration at 3", "INS ParameterizedType: List<Scan> to SingleVariableDeclaration at 0", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS WhileStatement to Block at 1", "INS SimpleName: close to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS ContinueStatement to Block at 2", "INS Assignment: = to ParenthesizedExpression at 0", "INS SimpleType: SQLException to MethodDeclaration at 6", "INS SimpleType: PeekingResultIterator to MethodDeclaration at 1", "INS VariableDeclarationStatement to Block at 0", "INS FieldAccess to MethodInvocation at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: currentIterator to MethodDeclaration at 2", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: SerialIterator to TypeDeclaration: class at 2", "INS SimpleName: offset to SingleVariableDeclaration at 1", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS ExpressionStatement to Block at 1", "INS NullLiteral to InfixExpression: != at 1", "INS ParenthesizedExpression to InfixExpression: != at 0", "INS SimpleName: currentIterator to InfixExpression: == at 0", "INS SimpleType: Tuple to VariableDeclarationStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS SimpleType: List to ParameterizedType: List<Scan> at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to Assignment: = at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: tableName to FieldAccess at 1", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS SimpleType: Scan to ParameterizedType: List<Scan> at 1", "INS SimpleName: renewLeaseThreshold to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: Scan to ParameterizedType: List<Scan> at 1", "INS MethodInvocation to MethodInvocation at 0", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS MethodInvocation to Assignment: = at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: peekingItr to MethodInvocation at 0", "INS Javadoc to TypeDeclaration: class at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: remainingOffset to VariableDeclarationFragment at 0", "INS SimpleName: renewLeaseThreshold to Assignment: = at 1", "INS Block to IfStatement at 1", "INS SimpleName: peekingItr to MethodInvocation at 0", "INS SimpleName: currentIterator to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: List to SimpleType: List at 0", "INS Assignment: = to ExpressionStatement at 0", "INS PrimitiveType: int to FieldDeclaration at 1", "INS PrimitiveType: long to FieldDeclaration at 2", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: addAll to MethodInvocation at 1", "INS SimpleName: flattenedScans to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS ExpressionStatement to Block at 0", "INS SimpleType: SQLException to MethodDeclaration at 4", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS TagElement to Javadoc at 0", "INS InfixExpression: != to IfStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: currentIterator to Assignment: = at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: flattenedScans to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 4", "INS FieldDeclaration to TypeDeclaration: class at 9", "INS IfStatement to Block at 5", "INS SimpleName: currentScan to VariableDeclarationFragment at 0", "INS ReturnStatement to Block at 7", "INS TypeDeclaration: class to TypeDeclaration: class at 11", "INS SimpleName: remainingOffset to FieldAccess at 1", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS SimpleName: peek to MethodInvocation at 1", "INS ThisExpression to FieldAccess at 0", "INS InfixExpression: == to IfStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS SimpleName: List to SimpleType: List at 0", "INS TextElement: which we may not even use. to TagElement at 2", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS ReturnStatement to Block at 2", "INS ExpressionStatement to Block at 4", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: SerialIterator to MethodDeclaration at 1", "INS Block to MethodDeclaration at 7", "INS SimpleName: index to InfixExpression: >= at 0", "INS ContinueStatement to Block at 1", "INS ThisExpression to FieldAccess at 0", "INS Block to WhileStatement at 1", "INS Modifier: final to FieldDeclaration at 1", "INS NullLiteral to InfixExpression: != at 1", "INS IfStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS PostfixExpression: ++ to MethodInvocation at 2", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS SimpleType: Tuple to MethodDeclaration at 2", "INS ParenthesizedExpression to InfixExpression: == at 0", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS Block to MethodDeclaration at 4", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: renewLeaseThreshold to VariableDeclarationFragment at 0", "INS Block to IfStatement at 1", "INS SimpleType: SQLException to MethodDeclaration at 4", "INS Assignment: = to ExpressionStatement at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: currentIterator to VariableDeclarationFragment at 0", "INS SimpleName: EMPTY_ITERATOR to ReturnStatement at 0", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS SimpleName: peekingItr to ReturnStatement at 0", "INS SimpleName: close to MethodDeclaration at 3", "INS SimpleName: Tuple to SimpleType: Tuple at 0", "INS SimpleName: itr to MethodInvocation at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS ThisExpression to FieldAccess at 0", "INS SimpleType: Tuple to MethodDeclaration at 2", "INS IfStatement to Block at 0", "INS ParameterizedType: List<Scan> to FieldDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ExpressionStatement to Block at 6", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: Scan to SimpleType: Scan at 0", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SimpleName: index to PostfixExpression: ++ at 0", "INS SimpleName: tuple to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: Integer to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS FieldAccess to InfixExpression: != at 0", "INS FieldAccess to Assignment: = at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS SimpleName: scans to MethodInvocation at 0", "INS SimpleName: PeekingResultIterator to SimpleType: PeekingResultIterator at 0", "INS SimpleName: Tuple to SimpleType: Tuple at 0", "INS Assignment: = to ParenthesizedExpression at 0", "INS ReturnStatement to Block at 2", "INS SimpleName: index to VariableDeclarationFragment at 0", "INS SimpleName: peek to MethodInvocation at 1", "INS SimpleType: Integer to FieldDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: context to MethodInvocation at 0", "INS SimpleName: getRemainingOffset to MethodInvocation at 1", "INS SimpleName: PeekingResultIterator to SimpleType: PeekingResultIterator at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS ReturnStatement to Block at 0", "INS ParameterizedType: List<String> to SingleVariableDeclaration at 0", "INS SimpleName: getConnection to MethodInvocation at 1", "INS Modifier: private to TypeDeclaration: class at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: explain to MethodDeclaration at 3", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: Override to MarkerAnnotation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Modifier: final to FieldDeclaration at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: tuple to Assignment: = at 0", "INS IfStatement to Block at 1", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS SimpleType: SQLException to MethodDeclaration at 3", "INS SimpleName: Tuple to SimpleType: Tuple at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: remainingOffset to FieldAccess at 1", "INS SimpleName: tableName to VariableDeclarationFragment at 0", "INS SimpleType: PeekingResultIterator to MethodDeclaration at 1", "INS SimpleName: tuple to MethodInvocation at 2", "INS Block to MethodDeclaration at 5", "INS FieldAccess to Assignment: = at 0", "INS SimpleType: SQLException to MethodDeclaration at 3", "INS SimpleName: nextIterator to MethodDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0", "INS InfixExpression: == to IfStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: currentIterator to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS Block to IfStatement at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: String to ParameterizedType: List<String> at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV PrimitiveType: void to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 7", "MOV Modifier: protected to MethodDeclaration at 1", "MOV SimpleName: submitWork to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV SimpleType: PeekingResultIterator to TypeDeclaration: class at 3"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: offset to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: offset to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 1"]}, {"root": "INS Modifier: final to SingleVariableDeclaration at 0", "operations": ["INS Modifier: final to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from scans to isReverse", "operations": ["UPD SimpleName: scans from scans to isReverse"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: List<Scan> to VariableDeclarationStatement at 1", "MOV SimpleName: scans to SingleVariableDeclaration at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 6", "MOV VariableDeclarationStatement to Block at 4", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 1", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from ParameterizedType: List<String>", "operations": ["MOV SimpleType: List to ParameterizedType: List<String> at 0", "MOV SimpleType: PeekingResultIterator to FieldDeclaration at 1"]}, {"root": "INS ParameterizedType: List<Scan> to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: List to ParameterizedType: List<Scan> at 0", "INS ParameterizedType: List<Scan> to VariableDeclarationStatement at 0", "INS SimpleType: Scan to ParameterizedType: List<Scan> at 1"]}, {"root": "UPDATE from overallScan to scans", "operations": ["UPD SimpleName: overallScan from overallScan to scans"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: overallScan to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from Scan to SQLException", "operations": ["UPD SimpleName: Scan from Scan to SQLException"]}, {"root": "MOVE from SimpleType: SQLException", "operations": ["MOV SimpleName: Scan to SimpleType: SQLException at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ReturnStatement to Block at 0"]}, {"root": "UPDATE from firstScan to flattenedScans", "operations": ["UPD SimpleName: firstScan from firstScan to flattenedScans", "UPD SimpleName: lastScan from lastScan to flattenedScans"]}, {"root": "MOVE from SimpleType: Scan", "operations": ["MOV SimpleName: Scan to SimpleType: Scan at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS SimpleName: scans to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0"]}, {"root": "UPDATE from - to <", "operations": ["UPD InfixExpression: - from - to <"]}, {"root": "MOVE from WhileStatement", "operations": ["MOV InfixExpression: - to WhileStatement at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: currentIterator to MethodInvocation at 0", "INS SimpleName: peek to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from SimpleType: Scan", "operations": ["MOV SimpleName: Scan to SimpleType: Scan at 0"]}, {"root": "UPDATE from scans to Lists", "operations": ["UPD SimpleName: scans from scans to Lists", "UPD SimpleName: overallScan from overallScan to Lists"]}, {"root": "UPDATE from setStopRow to newArrayListWithExpectedSize", "operations": ["UPD SimpleName: setStopRow from setStopRow to newArrayListWithExpectedSize", "UPD SimpleName: get from get to newArrayListWithExpectedSize"]}, {"root": "INS SimpleName: expectedListSize to MethodInvocation at 2", "operations": ["INS SimpleName: expectedListSize to MethodInvocation at 2"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: Future<PeekingResultIterator> to VariableDeclarationStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: newArrayListWithExpectedSize to MethodInvocation at 0", "MOV MethodInvocation to InfixExpression: >= at 1", "MOV SimpleName: Lists to MethodInvocation at 1"]}, {"root": "INS SimpleName: index to InfixExpression: - at 0", "operations": ["INS SimpleName: index to InfixExpression: - at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 2", "MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from lastScan to future", "operations": ["UPD SimpleName: lastScan from lastScan to future"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: itr to ReturnStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: finalScans to ClassInstanceCreation at 1", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ReturnStatement to Block at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: offset to ClassInstanceCreation at 4", "INS SimpleName: SerialIterator to SimpleType: SerialIterator at 0", "INS SimpleName: call to MethodDeclaration at 3", "INS SimpleName: wrap to MethodInvocation at 1", "INS SimpleName: executor to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS SimpleName: Tracing to MethodInvocation at 0", "INS SimpleName: tableName to ClassInstanceCreation at 2", "INS SimpleName: itr to VariableDeclarationFragment at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: submit to MethodInvocation at 1", "INS ClassInstanceCreation to MethodInvocation at 2", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleType: SerialIterator to ClassInstanceCreation at 0", "INS SimpleName: renewLeaseThreshold to ClassInstanceCreation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setStopRow to MethodInvocation at 1", "MOV SimpleName: overallScan to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Scan to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: PeekingResultIterator to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from newIterator to currentIterator", "operations": ["UPD SimpleName: newIterator from newIterator to currentIterator", "UPD SimpleName: allIterators from allIterators to currentIterator"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ConcatResultIterator to MethodInvocation at 1", "MOV SimpleName: newIterator to MethodInvocation at 0"]}, {"root": "UPDATE from getStopRow to size", "operations": ["UPD SimpleName: getStopRow from getStopRow to size"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS InfixExpression: - to MethodInvocation at 2", "INS ThisExpression to FieldAccess at 0", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to MethodInvocation at 0", "INS SimpleName: get to MethodInvocation at 1", "INS FieldAccess to MethodInvocation at 0", "INS SimpleName: scans to FieldAccess at 1", "INS SimpleName: scans to FieldAccess at 1", "INS MethodInvocation to MethodInvocation at 0", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS MethodInvocation to InfixExpression: - at 0", "INS SimpleName: size to MethodInvocation at 1"]}, {"root": "UPDATE from add to close", "operations": ["UPD SimpleName: add from add to close", "UPD SimpleName: concatIterator from concatIterator to close", "UPD SimpleName: Lists from Lists to close"]}, {"root": "UPDATE from scanner to itr", "operations": ["UPD SimpleName: scanner from scanner to itr", "UPD SimpleName: scanner from scanner to itr"]}, {"root": "UPDATE from iterator to peekingItr", "operations": ["UPD SimpleName: iterator from iterator to peekingItr", "UPD SimpleName: concatIterators from concatIterators to peekingItr"]}, {"root": "UPDATE from ConcatResultIterator to addIteratorForLeaseRenewal", "operations": ["UPD SimpleName: ConcatResultIterator from ConcatResultIterator to addIteratorForLeaseRenewal"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV InfixExpression: + to MethodInvocation at 3"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS NumberLiteral: 0 to MethodInvocation at 2", "INS SimpleName: flattenedScans to MethodInvocation at 0", "INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "UPDATE from newArrayListWithExpectedSize to nextIterator", "operations": ["UPD SimpleName: newArrayListWithExpectedSize from newArrayListWithExpectedSize to nextIterator"]}, {"root": "UPDATE from conn to currentScan", "operations": ["UPD SimpleName: conn from conn to currentScan", "UPD SimpleName: scan from scan to currentScan", "UPD SimpleName: scan from scan to currentScan"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV ParameterizedType: JobCallable<PeekingResultIterator> to ClassInstanceCreation at 0"]}, {"root": "UPDATE from addIterator to setAttribute", "operations": ["UPD SimpleName: addIterator from addIterator to setAttribute"]}, {"root": "INS QualifiedName: BaseScannerRegionObserver.SCAN_OFFSET to MethodInvocation at 2", "operations": ["INS QualifiedName: BaseScannerRegionObserver.SCAN_OFFSET to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS QualifiedName: PInteger.INSTANCE to MethodInvocation at 0", "INS SimpleName: remainingOffset to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 3"]}, {"root": "MOVE from AnonymousClassDeclaration", "operations": ["MOV MethodDeclaration to AnonymousClassDeclaration at 1", "MOV MethodDeclaration to AnonymousClassDeclaration at 2"]}, {"root": "UPDATE from scanner to toBytes", "operations": ["UPD SimpleName: scanner from scanner to toBytes"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: scanner to MethodInvocation at 1"]}, {"root": "UPDATE from previousIterator to remainingOffset", "operations": ["UPD SimpleName: previousIterator from previousIterator to remainingOffset"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV SimpleName: previousIterator to Assignment: = at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: PeekingResultIterator to MethodDeclaration at 2", "MOV SimpleType: Exception to MethodDeclaration at 4"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: PeekingResultIterator to VariableDeclarationStatement at 0"]}, {"root": "DEL SimpleType: Scan", "operations": ["DEL SimpleType: Scan"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: get", "DEL SimpleName: scans"]}, {"root": "DEL SimpleName: overallScan", "operations": ["DEL SimpleName: overallScan"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL SimpleType: Scan", "DEL SimpleName: concatIterators", "DEL SimpleName: concatIterator", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: concatIterators", "DEL VariableDeclarationFragment", "DEL Block", "DEL Modifier: public", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL SimpleName: previousIterator", "DEL SimpleName: nestedScans", "DEL SimpleName: Tracing", "DEL NullLiteral", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: iterator", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: ScanUtil", "DEL EnhancedForStatement", "DEL SimpleName: call", "DEL SimpleName: scan", "DEL SimpleName: scans", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: executor", "DEL MethodDeclaration", "DEL SimpleName: newScan", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: final", "DEL AnonymousClassDeclaration", "DEL SimpleName: future", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: firstScan", "DEL SingleVariableDeclaration", "DEL EnhancedForStatement", "DEL SimpleType: Scan", "DEL ParameterizedType: List<PeekingResultIterator>", "DEL SimpleName: wrap", "DEL SimpleName: submit", "DEL Block", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL VariableDeclarationFragment"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: lastScan", "operations": ["DEL SimpleName: lastScan"]}, {"root": "DEL NumberLiteral: 1", "operations": ["DEL NumberLiteral: 1"]}, {"root": "DEL SimpleName: previousIterator", "operations": ["DEL SimpleName: previousIterator"]}, {"root": "DEL SimpleName: iterator", "operations": ["DEL SimpleName: iterator"]}, {"root": "DEL SimpleName: add", "operations": ["DEL SimpleName: add"]}, {"root": "DEL SimpleName: concatIterator", "operations": ["DEL SimpleName: concatIterator"]}]}}, {"SerialIterators_diff": {"operations": ["Insert ImportDeclaration(25) into CompilationUnit(795) at 12", "Insert ImportDeclaration(37) into CompilationUnit(795) at 18", "Insert ImportDeclaration(39) into CompilationUnit(795) at 19", "Insert QualifiedName: org.apache.phoenix.coprocessor.BaseScannerRegionObserver(24) into ImportDeclaration(25) at 0", "Insert QualifiedName: org.apache.phoenix.schema.tuple.Tuple(36) into ImportDeclaration(37) at 0", "Insert QualifiedName: org.apache.phoenix.schema.types.PInteger(38) into ImportDeclaration(39) at 0", "Update QualifiedName: org.apache.phoenix.util.ScanUtil(36) to org.apache.phoenix.util.QueryUtil", "Insert FieldDeclaration(83) into TypeDeclaration: class(794) at 6", "Insert MethodDeclaration(418) into TypeDeclaration: class(794) at 8", "Insert TypeDeclaration: class(793) into TypeDeclaration: class(794) at 10", "Insert Modifier: private(77) into FieldDeclaration(83) at 0", "Insert Modifier: final(78) into FieldDeclaration(83) at 1", "Insert SimpleType: Integer(80) into FieldDeclaration(83) at 2", "Insert VariableDeclarationFragment(82) into FieldDeclaration(83) at 3", "Move MarkerAnnotation(129) into MethodDeclaration(418) at 0", "Move Modifier: protected(130) into MethodDeclaration(418) at 1", "Move PrimitiveType: void(131) into MethodDeclaration(418) at 2", "Move SimpleName: submitWork(132) into MethodDeclaration(418) at 3", "Move SingleVariableDeclaration(142) into MethodDeclaration(418) at 4", "Move SingleVariableDeclaration(160) into MethodDeclaration(418) at 5", "Move SingleVariableDeclaration(168) into MethodDeclaration(418) at 6", "Move SingleVariableDeclaration(171) into MethodDeclaration(418) at 7", "Insert SingleVariableDeclaration(194) into MethodDeclaration(418) at 8", "Insert Block(417) into MethodDeclaration(418) at 9", "Insert Javadoc(433) into TypeDeclaration: class(793) at 0", "Insert Modifier: private(434) into TypeDeclaration: class(793) at 1", "Insert SimpleName: SerialIterator(435) into TypeDeclaration: class(793) at 2", "Move SimpleType: PeekingResultIterator(310) into TypeDeclaration: class(793) at 3", "Insert FieldDeclaration(447) into TypeDeclaration: class(793) at 4", "Insert FieldDeclaration(454) into TypeDeclaration: class(793) at 5", "Insert FieldDeclaration(460) into TypeDeclaration: class(793) at 6", "Insert FieldDeclaration(465) into TypeDeclaration: class(793) at 7", "Insert FieldDeclaration(471) into TypeDeclaration: class(793) at 8", "Insert FieldDeclaration(477) into TypeDeclaration: class(793) at 9", "Insert MethodDeclaration(564) into TypeDeclaration: class(793) at 10", "Insert MethodDeclaration(600) into TypeDeclaration: class(793) at 11", "Insert MethodDeclaration(730) into TypeDeclaration: class(793) at 12", "Insert MethodDeclaration(745) into TypeDeclaration: class(793) at 13", "Insert MethodDeclaration(759) into TypeDeclaration: class(793) at 14", "Insert MethodDeclaration(777) into TypeDeclaration: class(793) at 15", "Insert MethodDeclaration(792) into TypeDeclaration: class(793) at 16", "Insert SimpleName: Integer(79) into SimpleType: Integer(80) at 0", "Insert SimpleName: offset(81) into VariableDeclarationFragment(82) at 0", "Insert ExpressionStatement(118) into Block(145) at 1", "Insert Modifier: final(152) into SingleVariableDeclaration(162) at 0", "Insert PrimitiveType: boolean(192) into SingleVariableDeclaration(194) at 0", "Update SimpleName: scans(190) to isReverse", "Move SimpleName: scans(190) into SingleVariableDeclaration(194) at 1", "Move VariableDeclarationStatement(183) into Block(417) at 0", "Move VariableDeclarationStatement(244) into Block(417) at 1", "Move VariableDeclarationStatement(257) into Block(417) at 2", "Move VariableDeclarationStatement(266) into Block(417) at 3", "Move VariableDeclarationStatement(276) into Block(417) at 4", "Insert VariableDeclarationStatement(260) into Block(417) at 5", "Move VariableDeclarationStatement(201) into Block(417) at 6", "Insert EnhancedForStatement(287) into Block(417) at 7", "Insert IfStatement(416) into Block(417) at 8", "Insert TagElement(432) into Javadoc(433) at 0", "Insert Modifier: private(438) into FieldDeclaration(447) at 0", "Insert Modifier: final(439) into FieldDeclaration(447) at 1", "Insert ParameterizedType: List<Scan>(444) into FieldDeclaration(447) at 2", "Insert VariableDeclarationFragment(446) into FieldDeclaration(447) at 3", "Insert Modifier: private(448) into FieldDeclaration(454) at 0", "Insert Modifier: final(449) into FieldDeclaration(454) at 1", "Insert SimpleType: String(451) into FieldDeclaration(454) at 2", "Insert VariableDeclarationFragment(453) into FieldDeclaration(454) at 3", "Insert Modifier: private(455) into FieldDeclaration(460) at 0", "Insert Modifier: final(456) into FieldDeclaration(460) at 1", "Insert PrimitiveType: long(457) into FieldDeclaration(460) at 2", "Insert VariableDeclarationFragment(459) into FieldDeclaration(460) at 3", "Insert Modifier: private(461) into FieldDeclaration(465) at 0", "Insert PrimitiveType: int(462) into FieldDeclaration(465) at 1", "Insert VariableDeclarationFragment(464) into FieldDeclaration(465) at 2", "Insert Modifier: private(466) into FieldDeclaration(471) at 0", "Move SimpleType: PeekingResultIterator(318) into FieldDeclaration(471) at 1", "Insert VariableDeclarationFragment(470) into FieldDeclaration(471) at 2", "Insert Modifier: private(472) into FieldDeclaration(477) at 0", "Insert SimpleType: Integer(474) into FieldDeclaration(477) at 1", "Insert VariableDeclarationFragment(476) into FieldDeclaration(477) at 2", "Insert Modifier: private(478) into MethodDeclaration(564) at 0", "Insert SimpleName: SerialIterator(479) into MethodDeclaration(564) at 1", "Insert SingleVariableDeclaration(486) into MethodDeclaration(564) at 2", "Insert SingleVariableDeclaration(490) into MethodDeclaration(564) at 3", "Insert SingleVariableDeclaration(493) into MethodDeclaration(564) at 4", "Insert SingleVariableDeclaration(497) into MethodDeclaration(564) at 5", "Insert SimpleType: SQLException(499) into MethodDeclaration(564) at 6", "Insert Block(563) into MethodDeclaration(564) at 7", "Insert Modifier: private(565) into MethodDeclaration(600) at 0", "Insert SimpleType: PeekingResultIterator(567) into MethodDeclaration(600) at 1", "Insert SimpleName: currentIterator(568) into MethodDeclaration(600) at 2", "Insert SimpleType: SQLException(570) into MethodDeclaration(600) at 3", "Insert Block(599) into MethodDeclaration(600) at 4", "Insert Modifier: private(601) into MethodDeclaration(730) at 0", "Insert SimpleType: PeekingResultIterator(603) into MethodDeclaration(730) at 1", "Insert SimpleName: nextIterator(604) into MethodDeclaration(730) at 2", "Insert SimpleType: SQLException(606) into MethodDeclaration(730) at 3", "Insert Block(729) into MethodDeclaration(730) at 4", "Insert MarkerAnnotation(732) into MethodDeclaration(745) at 0", "Insert Modifier: public(733) into MethodDeclaration(745) at 1", "Insert SimpleType: Tuple(735) into MethodDeclaration(745) at 2", "Insert SimpleName: next(736) into MethodDeclaration(745) at 3", "Insert SimpleType: SQLException(738) into MethodDeclaration(745) at 4", "Insert Block(744) into MethodDeclaration(745) at 5", "Insert MarkerAnnotation(747) into MethodDeclaration(759) at 0", "Insert Modifier: public(748) into MethodDeclaration(759) at 1", "Insert PrimitiveType: void(749) into MethodDeclaration(759) at 2", "Insert SimpleName: explain(750) into MethodDeclaration(759) at 3", "Insert SingleVariableDeclaration(757) into MethodDeclaration(759) at 4", "Insert Block(758) into MethodDeclaration(759) at 5", "Insert MarkerAnnotation(761) into MethodDeclaration(777) at 0", "Insert Modifier: public(762) into MethodDeclaration(777) at 1", "Insert PrimitiveType: void(763) into MethodDeclaration(777) at 2", "Insert SimpleName: close(764) into MethodDeclaration(777) at 3", "Insert SimpleType: SQLException(766) into MethodDeclaration(777) at 4", "Insert Block(776) into MethodDeclaration(777) at 5", "Insert MarkerAnnotation(779) into MethodDeclaration(792) at 0", "Insert Modifier: public(780) into MethodDeclaration(792) at 1", "Insert SimpleType: Tuple(782) into MethodDeclaration(792) at 2", "Insert SimpleName: peek(783) into MethodDeclaration(792) at 3", "Insert SimpleType: SQLException(785) into MethodDeclaration(792) at 4", "Insert Block(791) into MethodDeclaration(792) at 5", "Insert Assignment: =(117) into ExpressionStatement(118) at 0", "Insert PrimitiveType: int(252) into VariableDeclarationStatement(260) at 0", "Insert VariableDeclarationFragment(259) into VariableDeclarationStatement(260) at 1", "Insert ParameterizedType: List<Scan>(265) into VariableDeclarationStatement(272) at 0", "Insert SingleVariableDeclaration(279) into EnhancedForStatement(287) at 0", "Insert SimpleName: nestedScans(280) into EnhancedForStatement(287) at 1", "Insert Block(286) into EnhancedForStatement(287) at 2", "Insert PrefixExpression: !(291) into IfStatement(416) at 0", "Insert Block(415) into IfStatement(416) at 1", "Insert TextElement: Iterator that creates iterators for scans only when needed.(429) into TagElement(432) at 0", "Insert TextElement: This helps reduce the cost of pre-constructing all the iterators(430) into TagElement(432) at 1", "Insert TextElement: which we may not even use.(431) into TagElement(432) at 2", "Insert SimpleType: List(441) into ParameterizedType: List<Scan>(444) at 0", "Insert SimpleType: Scan(443) into ParameterizedType: List<Scan>(444) at 1", "Update SimpleName: overallScan(218) to scans", "Move SimpleName: overallScan(218) into VariableDeclarationFragment(446) at 0", "Insert SimpleName: String(450) into SimpleType: String(451) at 0", "Insert SimpleName: tableName(452) into VariableDeclarationFragment(453) at 0", "Insert SimpleName: renewLeaseThreshold(458) into VariableDeclarationFragment(459) at 0", "Insert SimpleName: index(463) into VariableDeclarationFragment(464) at 0", "Insert SimpleName: currentIterator(469) into VariableDeclarationFragment(470) at 0", "Insert SimpleName: Integer(473) into SimpleType: Integer(474) at 0", "Insert SimpleName: remainingOffset(475) into VariableDeclarationFragment(476) at 0", "Insert ParameterizedType: List<Scan>(484) into SingleVariableDeclaration(486) at 0", "Insert SimpleName: flattenedScans(485) into SingleVariableDeclaration(486) at 1", "Insert SimpleType: String(488) into SingleVariableDeclaration(490) at 0", "Insert SimpleName: tableName(489) into SingleVariableDeclaration(490) at 1", "Insert PrimitiveType: long(491) into SingleVariableDeclaration(493) at 0", "Insert SimpleName: renewLeaseThreshold(492) into SingleVariableDeclaration(493) at 1", "Insert SimpleType: Integer(495) into SingleVariableDeclaration(497) at 0", "Insert SimpleName: offset(496) into SingleVariableDeclaration(497) at 1", "Insert SimpleName: SQLException(498) into SimpleType: SQLException(499) at 0", "Move ExpressionStatement(231) into Block(563) at 0", "Insert ExpressionStatement(516) into Block(563) at 1", "Insert ExpressionStatement(522) into Block(563) at 2", "Insert ExpressionStatement(529) into Block(563) at 3", "Insert ExpressionStatement(535) into Block(563) at 4", "Insert IfStatement(562) into Block(563) at 5", "Insert SimpleName: PeekingResultIterator(566) into SimpleType: PeekingResultIterator(567) at 0", "Insert SimpleName: SQLException(569) into SimpleType: SQLException(570) at 0", "Insert IfStatement(580) into Block(599) at 0", "Insert IfStatement(596) into Block(599) at 1", "Insert ReturnStatement(598) into Block(599) at 2", "Insert SimpleName: PeekingResultIterator(602) into SimpleType: PeekingResultIterator(603) at 0", "Update SimpleName: Scan(330) to SQLException", "Move SimpleName: Scan(330) into SimpleType: SQLException(606) at 0", "Insert IfStatement(615) into Block(729) at 0", "Insert WhileStatement(726) into Block(729) at 1", "Insert ReturnStatement(728) into Block(729) at 2", "Insert SimpleName: Override(731) into MarkerAnnotation(732) at 0", "Insert SimpleName: Tuple(734) into SimpleType: Tuple(735) at 0", "Insert SimpleName: SQLException(737) into SimpleType: SQLException(738) at 0", "Insert ReturnStatement(743) into Block(744) at 0", "Insert SimpleName: Override(746) into MarkerAnnotation(747) at 0", "Insert ParameterizedType: List<String>(755) into SingleVariableDeclaration(757) at 0", "Insert SimpleName: planSteps(756) into SingleVariableDeclaration(757) at 1", "Insert SimpleName: Override(760) into MarkerAnnotation(761) at 0", "Insert SimpleName: SQLException(765) into SimpleType: SQLException(766) at 0", "Insert IfStatement(775) into Block(776) at 0", "Insert SimpleName: Override(778) into MarkerAnnotation(779) at 0", "Insert SimpleName: Tuple(781) into SimpleType: Tuple(782) at 0", "Insert SimpleName: SQLException(784) into SimpleType: SQLException(785) at 0", "Move ReturnStatement(398) into Block(791) at 0", "Insert FieldAccess(115) into Assignment: =(117) at 0", "Insert SimpleName: offset(116) into Assignment: =(117) at 1", "Insert SimpleName: expectedListSize(253) into VariableDeclarationFragment(259) at 0", "Insert InfixExpression: *(258) into VariableDeclarationFragment(259) at 1", "Insert SimpleType: List(262) into ParameterizedType: List<Scan>(265) at 0", "Insert SimpleType: Scan(264) into ParameterizedType: List<Scan>(265) at 1", "Update SimpleName: firstScan(195) to flattenedScans", "Insert ParameterizedType: List<Scan>(277) into SingleVariableDeclaration(279) at 0", "Insert SimpleName: list(278) into SingleVariableDeclaration(279) at 1", "Insert ExpressionStatement(285) into Block(286) at 0", "Insert MethodInvocation(290) into PrefixExpression: !(291) at 0", "Insert IfStatement(301) into Block(415) at 0", "Insert VariableDeclarationStatement(311) into Block(415) at 1", "Move VariableDeclarationStatement(214) into Block(415) at 2", "Move ExpressionStatement(461) into Block(415) at 3", "Insert SimpleName: List(440) into SimpleType: List(441) at 0", "Move SimpleName: Scan(216) into SimpleType: Scan(443) at 0", "Insert SimpleType: List(481) into ParameterizedType: List<Scan>(484) at 0", "Insert SimpleType: Scan(483) into ParameterizedType: List<Scan>(484) at 1", "Insert SimpleName: String(487) into SimpleType: String(488) at 0", "Insert SimpleName: Integer(494) into SimpleType: Integer(495) at 0", "Insert Assignment: =(509) into ExpressionStatement(510) at 0", "Insert Assignment: =(515) into ExpressionStatement(516) at 0", "Insert Assignment: =(521) into ExpressionStatement(522) at 0", "Insert MethodInvocation(528) into ExpressionStatement(529) at 0", "Insert Assignment: =(534) into ExpressionStatement(535) at 0", "Insert InfixExpression: !=(540) into IfStatement(562) at 0", "Insert Block(561) into IfStatement(562) at 1", "Insert InfixExpression: ==(573) into IfStatement(580) at 0", "Insert Block(579) into IfStatement(580) at 1", "Insert InfixExpression: ==(585) into IfStatement(596) at 0", "Insert Block(595) into IfStatement(596) at 1", "Insert SimpleName: currentIterator(597) into ReturnStatement(598) at 0", "Insert InfixExpression: >=(611) into IfStatement(615) at 0", "Insert Block(614) into IfStatement(615) at 1", "Update InfixExpression: -(211) to <", "Move InfixExpression: -(211) into WhileStatement(726) at 0", "Insert Block(725) into WhileStatement(726) at 1", "Insert SimpleName: EMPTY_ITERATOR(727) into ReturnStatement(728) at 0", "Insert MethodInvocation(742) into ReturnStatement(743) at 0", "Move SimpleType: List(316) into ParameterizedType: List<String>(755) at 0", "Insert SimpleType: String(754) into ParameterizedType: List<String>(755) at 1", "Insert InfixExpression: !=(769) into IfStatement(775) at 0", "Insert Block(774) into IfStatement(775) at 1", "Insert MethodInvocation(789) into ReturnStatement(790) at 0", "Insert ThisExpression(113) into FieldAccess(115) at 0", "Insert SimpleName: offset(114) into FieldAccess(115) at 1", "Insert MethodInvocation(256) into InfixExpression: *(258) at 0", "Insert NumberLiteral: 10(257) into InfixExpression: *(258) at 1", "Insert SimpleName: List(261) into SimpleType: List(262) at 0", "Move SimpleName: Scan(193) into SimpleType: Scan(264) at 0", "Update SimpleName: scans(196) to Lists", "Update SimpleName: get(197) to newArrayListWithExpectedSize", "Insert SimpleName: expectedListSize(269) into MethodInvocation(270) at 2", "Insert SimpleType: List(274) into ParameterizedType: List<Scan>(277) at 0", "Insert SimpleType: Scan(276) into ParameterizedType: List<Scan>(277) at 1", "Insert MethodInvocation(284) into ExpressionStatement(285) at 0", "Insert SimpleName: flattenedScans(288) into MethodInvocation(290) at 0", "Insert SimpleName: isEmpty(289) into MethodInvocation(290) at 1", "Insert SimpleName: isReverse(292) into IfStatement(301) at 0", "Insert Block(300) into IfStatement(301) at 1", "Insert Modifier: final(302) into VariableDeclarationStatement(311) at 0", "Move ParameterizedType: List<Scan>(189) into VariableDeclarationStatement(311) at 1", "Insert VariableDeclarationFragment(310) into VariableDeclarationStatement(311) at 2", "Move ParameterizedType: Future<PeekingResultIterator>(290) into VariableDeclarationStatement(391) at 0", "Insert SimpleName: List(480) into SimpleType: List(481) at 0", "Insert SimpleName: Scan(482) into SimpleType: Scan(483) at 0", "Insert FieldAccess(502) into Assignment: =(509) at 0", "Insert MethodInvocation(508) into Assignment: =(509) at 1", "Insert FieldAccess(513) into Assignment: =(515) at 0", "Insert SimpleName: tableName(514) into Assignment: =(515) at 1", "Insert FieldAccess(519) into Assignment: =(521) at 0", "Insert SimpleName: renewLeaseThreshold(520) into Assignment: =(521) at 1", "Insert FieldAccess(525) into MethodInvocation(528) at 0", "Insert SimpleName: addAll(526) into MethodInvocation(528) at 1", "Insert SimpleName: flattenedScans(527) into MethodInvocation(528) at 2", "Insert FieldAccess(532) into Assignment: =(534) at 0", "Insert SimpleName: offset(533) into Assignment: =(534) at 1", "Insert FieldAccess(538) into InfixExpression: !=(540) at 0", "Insert NullLiteral(539) into InfixExpression: !=(540) at 1", "Move ExpressionStatement(285) into Block(561) at 0", "Insert SimpleName: currentIterator(571) into InfixExpression: ==(573) at 0", "Insert NullLiteral(572) into InfixExpression: ==(573) at 1", "Insert ReturnStatement(578) into Block(579) at 0", "Insert MethodInvocation(583) into InfixExpression: ==(585) at 0", "Insert NullLiteral(584) into InfixExpression: ==(585) at 1", "Insert ExpressionStatement(589) into Block(595) at 0", "Insert ExpressionStatement(594) into Block(595) at 1", "Insert SimpleName: index(607) into InfixExpression: >=(611) at 0", "Move MethodInvocation(325) into InfixExpression: >=(611) at 1", "Insert ReturnStatement(613) into Block(614) at 0", "Insert SimpleName: index(616) into InfixExpression: <(620) at 0", "Insert VariableDeclarationStatement(630) into Block(725) at 0", "Insert IfStatement(644) into Block(725) at 1", "Move VariableDeclarationStatement(354) into Block(725) at 2", "Move VariableDeclarationStatement(371) into Block(725) at 3", "Insert VariableDeclarationStatement(680) into Block(725) at 4", "Insert IfStatement(715) into Block(725) at 5", "Insert ExpressionStatement(722) into Block(725) at 6", "Insert ReturnStatement(724) into Block(725) at 7", "Insert MethodInvocation(740) into MethodInvocation(742) at 0", "Insert SimpleName: next(741) into MethodInvocation(742) at 1", "Insert SimpleName: String(753) into SimpleType: String(754) at 0", "Insert SimpleName: currentIterator(767) into InfixExpression: !=(769) at 0", "Insert NullLiteral(768) into InfixExpression: !=(769) at 1", "Move ExpressionStatement(396) into Block(774) at 0", "Insert MethodInvocation(787) into MethodInvocation(789) at 0", "Insert SimpleName: peek(788) into MethodInvocation(789) at 1", "Insert SimpleName: nestedScans(254) into MethodInvocation(256) at 0", "Insert SimpleName: size(255) into MethodInvocation(256) at 1", "Insert SimpleName: List(273) into SimpleType: List(274) at 0", "Insert SimpleName: Scan(275) into SimpleType: Scan(276) at 0", "Insert SimpleName: flattenedScans(281) into MethodInvocation(284) at 0", "Insert SimpleName: addAll(282) into MethodInvocation(284) at 1", "Insert SimpleName: list(283) into MethodInvocation(284) at 2", "Insert ExpressionStatement(299) into Block(300) at 0", "Insert SimpleName: finalScans(308) into VariableDeclarationFragment(310) at 0", "Insert SimpleName: flattenedScans(309) into VariableDeclarationFragment(310) at 1", "Update SimpleName: lastScan(204) to future", "Insert MethodInvocation(389) into VariableDeclarationFragment(390) at 1", "Insert ThisExpression(500) into FieldAccess(502) at 0", "Insert SimpleName: scans(501) into FieldAccess(502) at 1", "Update SimpleName: overallScan(225) to Lists", "Move SimpleName: overallScan(225) into MethodInvocation(508) at 0", "Update SimpleName: setStopRow(226) to newArrayListWithExpectedSize", "Move SimpleName: setStopRow(226) into MethodInvocation(508) at 1", "Move MethodInvocation(229) into MethodInvocation(508) at 2", "Insert ThisExpression(511) into FieldAccess(513) at 0", "Insert SimpleName: tableName(512) into FieldAccess(513) at 1", "Insert ThisExpression(517) into FieldAccess(519) at 0", "Insert SimpleName: renewLeaseThreshold(518) into FieldAccess(519) at 1", "Insert ThisExpression(523) into FieldAccess(525) at 0", "Insert SimpleName: scans(524) into FieldAccess(525) at 1", "Insert ThisExpression(530) into FieldAccess(532) at 0", "Insert SimpleName: remainingOffset(531) into FieldAccess(532) at 1", "Insert ThisExpression(536) into FieldAccess(538) at 0", "Insert SimpleName: remainingOffset(537) into FieldAccess(538) at 1", "Insert Assignment: =(577) into ReturnStatement(578) at 0", "Insert SimpleName: currentIterator(581) into MethodInvocation(583) at 0", "Insert SimpleName: peek(582) into MethodInvocation(583) at 1", "Insert MethodInvocation(588) into ExpressionStatement(589) at 0", "Insert Assignment: =(593) into ExpressionStatement(594) at 0", "Insert SimpleName: EMPTY_ITERATOR(612) into ReturnStatement(613) at 0", "Move SimpleType: Scan(203) into VariableDeclarationStatement(630) at 0", "Insert VariableDeclarationFragment(629) into VariableDeclarationStatement(630) at 1", "Insert InfixExpression: !=(633) into IfStatement(644) at 0", "Insert Block(643) into IfStatement(644) at 1", "Move SimpleType: PeekingResultIterator(384) into VariableDeclarationStatement(675) at 0", "Insert SimpleType: Tuple(677) into VariableDeclarationStatement(680) at 0", "Insert VariableDeclarationFragment(679) into VariableDeclarationStatement(680) at 1", "Insert InfixExpression: ==(688) into IfStatement(715) at 0", "Insert Block(694) into IfStatement(715) at 1", "Insert IfStatement(714) into IfStatement(715) at 2", "Insert MethodInvocation(721) into ExpressionStatement(722) at 0", "Insert SimpleName: peekingItr(723) into ReturnStatement(724) at 0", "Update SimpleName: newIterator(387) to currentIterator", "Move SimpleName: newIterator(387) into MethodInvocation(740) at 0", "Insert SimpleName: currentIterator(786) into MethodInvocation(787) at 0", "Insert Assignment: =(298) into ExpressionStatement(299) at 0", "Insert SimpleName: executor(318) into MethodInvocation(389) at 0", "Insert SimpleName: submit(319) into MethodInvocation(389) at 1", "Insert MethodInvocation(388) into MethodInvocation(389) at 2", "Update SimpleName: lastScan(227) to flattenedScans", "Update SimpleName: getStopRow(228) to size", "Insert MethodInvocation(552) into MethodInvocation(559) at 0", "Insert SimpleName: currentIterator(574) into Assignment: =(577) at 0", "Insert MethodInvocation(576) into Assignment: =(577) at 1", "Insert SimpleName: currentIterator(586) into MethodInvocation(588) at 0", "Update SimpleName: Lists(321) to close", "Move SimpleName: Lists(321) into MethodInvocation(588) at 1", "Insert SimpleName: currentIterator(590) into Assignment: =(593) at 0", "Insert MethodInvocation(592) into Assignment: =(593) at 1", "Insert SimpleName: currentScan(623) into VariableDeclarationFragment(629) at 0", "Insert MethodInvocation(628) into VariableDeclarationFragment(629) at 1", "Insert SimpleName: remainingOffset(631) into InfixExpression: !=(633) at 0", "Insert NullLiteral(632) into InfixExpression: !=(633) at 1", "Move ExpressionStatement(359) into Block(643) at 0", "Update SimpleName: scanner(337) to itr", "Update SimpleName: iterator(362) to peekingItr", "Insert SimpleName: Tuple(676) into SimpleType: Tuple(677) at 0", "Insert SimpleName: tuple(678) into VariableDeclarationFragment(679) at 0", "Insert ParenthesizedExpression(686) into InfixExpression: ==(688) at 0", "Insert NullLiteral(687) into InfixExpression: ==(688) at 1", "Move ExpressionStatement(376) into Block(694) at 0", "Insert ContinueStatement(693) into Block(694) at 1", "Insert InfixExpression: !=(703) into IfStatement(714) at 0", "Insert Block(713) into IfStatement(714) at 1", "Insert MethodInvocation(718) into MethodInvocation(721) at 0", "Update SimpleName: ConcatResultIterator(386) to addIteratorForLeaseRenewal", "Move SimpleName: ConcatResultIterator(386) into MethodInvocation(721) at 1", "Insert SimpleName: itr(720) into MethodInvocation(721) at 2", "Update SimpleName: allIterators(392) to currentIterator", "Update SimpleName: concatIterator(394) to close", "Insert SimpleName: flattenedScans(293) into Assignment: =(298) at 0", "Insert MethodInvocation(297) into Assignment: =(298) at 1", "Insert SimpleName: Tracing(320) into MethodInvocation(388) at 0", "Insert SimpleName: wrap(321) into MethodInvocation(388) at 1", "Insert ClassInstanceCreation(378) into MethodInvocation(388) at 2", "Move InfixExpression: +(437) into MethodInvocation(388) at 3", "Insert MethodInvocation(409) into ClassInstanceCreation(411) at 1", "Insert FieldAccess(543) into MethodInvocation(552) at 0", "Insert SimpleName: get(544) into MethodInvocation(552) at 1", "Insert InfixExpression: -(551) into MethodInvocation(552) at 2", "Insert SimpleName: nextIterator(575) into MethodInvocation(576) at 0", "Update SimpleName: newArrayListWithExpectedSize(322) to nextIterator", "Move SimpleName: newArrayListWithExpectedSize(322) into MethodInvocation(592) at 0", "Insert SimpleName: scans(624) into MethodInvocation(628) at 0", "Insert SimpleName: get(625) into MethodInvocation(628) at 1", "Insert PostfixExpression: ++(627) into MethodInvocation(628) at 2", "Update SimpleName: scan(342) to currentScan", "Update SimpleName: scanner(366) to itr", "Update SimpleName: scan(367) to currentScan", "Insert Assignment: =(685) into ParenthesizedExpression(686) at 0", "Insert ParenthesizedExpression(701) into InfixExpression: !=(703) at 0", "Insert NullLiteral(702) into InfixExpression: !=(703) at 1", "Insert ExpressionStatement(707) into Block(713) at 0", "Insert ExpressionStatement(711) into Block(713) at 1", "Insert ContinueStatement(712) into Block(713) at 2", "Insert SimpleName: context(716) into MethodInvocation(718) at 0", "Insert SimpleName: getConnection(717) into MethodInvocation(718) at 1", "Insert SimpleName: Lists(294) into MethodInvocation(297) at 0", "Insert SimpleName: reverse(295) into MethodInvocation(297) at 1", "Insert SimpleName: flattenedScans(296) into MethodInvocation(297) at 2", "Move ParameterizedType: JobCallable<PeekingResultIterator>(300) into ClassInstanceCreation(378) at 0", "Insert AnonymousClassDeclaration(377) into ClassInstanceCreation(378) at 1", "Insert SimpleName: flattenedScans(406) into MethodInvocation(409) at 0", "Insert SimpleName: get(407) into MethodInvocation(409) at 1", "Insert NumberLiteral: 0(408) into MethodInvocation(409) at 2", "Insert ThisExpression(541) into FieldAccess(543) at 0", "Insert SimpleName: scans(542) into FieldAccess(543) at 1", "Insert MethodInvocation(549) into InfixExpression: -(551) at 0", "Insert NumberLiteral: 1(550) into InfixExpression: -(551) at 1", "Insert SimpleName: index(626) into PostfixExpression: ++(627) at 0", "Update SimpleName: conn(355) to currentScan", "Update SimpleName: addIterator(356) to setAttribute", "Insert QualifiedName: BaseScannerRegionObserver.SCAN_OFFSET(636) into MethodInvocation(641) at 2", "Insert MethodInvocation(640) into MethodInvocation(641) at 3", "Insert SimpleName: tuple(681) into Assignment: =(685) at 0", "Insert MethodInvocation(684) into Assignment: =(685) at 1", "Update SimpleName: concatIterators(372) to peekingItr", "Update SimpleName: add(373) to close", "Insert Assignment: =(700) into ParenthesizedExpression(701) at 0", "Insert MethodInvocation(706) into ExpressionStatement(707) at 0", "Insert MethodInvocation(710) into ExpressionStatement(711) at 0", "Insert MethodDeclaration(350) into AnonymousClassDeclaration(377) at 0", "Move MethodDeclaration(416) into AnonymousClassDeclaration(377) at 1", "Move MethodDeclaration(426) into AnonymousClassDeclaration(377) at 2", "Insert FieldAccess(547) into MethodInvocation(549) at 0", "Insert SimpleName: size(548) into MethodInvocation(549) at 1", "Insert QualifiedName: PInteger.INSTANCE(637) into MethodInvocation(640) at 0", "Update SimpleName: scanner(357) to toBytes", "Move SimpleName: scanner(357) into MethodInvocation(640) at 1", "Insert SimpleName: remainingOffset(639) into MethodInvocation(640) at 2", "Insert SimpleName: peekingItr(682) into MethodInvocation(684) at 0", "Insert SimpleName: peek(683) into MethodInvocation(684) at 1", "Update SimpleName: previousIterator(377) to remainingOffset", "Move SimpleName: previousIterator(377) into Assignment: =(700) at 0", "Insert MethodInvocation(699) into Assignment: =(700) at 1", "Insert SimpleName: peekingItr(704) into MethodInvocation(706) at 0", "Insert SimpleName: next(705) into MethodInvocation(706) at 1", "Insert SimpleName: peekingItr(708) into MethodInvocation(710) at 0", "Insert SimpleName: close(709) into MethodInvocation(710) at 1", "Move MarkerAnnotation(302) into MethodDeclaration(350) at 0", "Insert Modifier: public(329) into MethodDeclaration(350) at 1", "Move SimpleType: PeekingResultIterator(305) into MethodDeclaration(350) at 2", "Insert SimpleName: call(332) into MethodDeclaration(350) at 3", "Move SimpleType: Exception(308) into MethodDeclaration(350) at 4", "Insert Block(349) into MethodDeclaration(350) at 5", "Insert ThisExpression(545) into FieldAccess(547) at 0", "Insert SimpleName: scans(546) into FieldAccess(547) at 1", "Insert SimpleName: QueryUtil(696) into MethodInvocation(699) at 0", "Insert SimpleName: getRemainingOffset(697) into MethodInvocation(699) at 1", "Insert SimpleName: tuple(698) into MethodInvocation(699) at 2", "Insert VariableDeclarationStatement(346) into Block(349) at 0", "Insert ReturnStatement(348) into Block(349) at 1", "Move SimpleType: PeekingResultIterator(361) into VariableDeclarationStatement(346) at 0", "Insert VariableDeclarationFragment(345) into VariableDeclarationStatement(346) at 1", "Insert SimpleName: itr(347) into ReturnStatement(348) at 0", "Insert SimpleName: itr(337) into VariableDeclarationFragment(345) at 0", "Insert ClassInstanceCreation(344) into VariableDeclarationFragment(345) at 1", "Insert SimpleType: SerialIterator(339) into ClassInstanceCreation(344) at 0", "Insert SimpleName: finalScans(340) into ClassInstanceCreation(344) at 1", "Insert SimpleName: tableName(341) into ClassInstanceCreation(344) at 2", "Insert SimpleName: renewLeaseThreshold(342) into ClassInstanceCreation(344) at 3", "Insert SimpleName: offset(343) into ClassInstanceCreation(344) at 4", "Insert SimpleName: SerialIterator(338) into SimpleType: SerialIterator(339) at 0", "Delete SimpleType: Scan(194)", "Delete NumberLiteral: 0(198)", "Delete SimpleName: scans(205)", "Delete SimpleName: get(206)", "Delete MethodInvocation(212)", "Delete SimpleName: overallScan(456)", "Delete Modifier: final(184)", "Delete SingleVariableDeclaration(191)", "Delete SimpleName: nestedScans(192)", "Delete Modifier: final(215)", "Delete SimpleType: Scan(217)", "Delete SimpleName: ScanUtil(219)", "Delete SimpleName: newScan(220)", "Delete SimpleName: firstScan(221)", "Delete MethodInvocation(222)", "Delete VariableDeclarationFragment(223)", "Delete VariableDeclarationStatement(224)", "Delete SimpleName: future(291)", "Delete SimpleName: executor(292)", "Delete SimpleName: submit(293)", "Delete SimpleName: Tracing(294)", "Delete SimpleName: wrap(295)", "Delete Modifier: public(303)", "Delete SimpleName: call(306)", "Delete SimpleName: previousIterator(311)", "Delete NullLiteral(312)", "Delete VariableDeclarationFragment(313)", "Delete VariableDeclarationStatement(314)", "Delete ParameterizedType: List<PeekingResultIterator>(319)", "Delete SimpleName: concatIterators(320)", "Delete MethodInvocation(326)", "Delete VariableDeclarationFragment(327)", "Delete VariableDeclarationStatement(328)", "Delete Modifier: final(329)", "Delete SimpleType: Scan(331)", "Delete SimpleName: scan(332)", "Delete SingleVariableDeclaration(333)", "Delete SimpleName: scans(334)", "Delete SimpleName: iterator(378)", "Delete Assignment: =(379)", "Delete ExpressionStatement(380)", "Delete Block(381)", "Delete EnhancedForStatement(382)", "Delete SimpleName: concatIterator(385)", "Delete SimpleName: concatIterators(388)", "Delete MethodInvocation(389)", "Delete VariableDeclarationFragment(390)", "Delete VariableDeclarationStatement(391)", "Delete Block(399)", "Delete MethodDeclaration(400)", "Delete AnonymousClassDeclaration(427)", "Delete ClassInstanceCreation(428)", "Delete MethodInvocation(438)", "Delete MethodInvocation(439)", "Delete VariableDeclarationFragment(440)", "Delete VariableDeclarationStatement(441)", "Delete Block(462)", "Delete EnhancedForStatement(463)", "Delete Block(464)", "Delete MethodDeclaration(465)", "Delete MethodInvocation(230)", "Delete SimpleName: lastScan(277)", "Delete NumberLiteral: 1(210)", "Delete SimpleName: previousIterator(351)", "Delete SimpleName: iterator(374)", "Delete SimpleName: add(393)", "Delete SimpleName: concatIterator(397)"]}}, {"SpoolingResultIterator_cluster": {"actions": [{"root": "INS MarkerAnnotation to TypeDeclaration: class at 1", "operations": ["INS MarkerAnnotation to TypeDeclaration: class at 1", "INS SimpleName: Deprecated to MarkerAnnotation at 0"]}, {"root": "INS Javadoc to TypeDeclaration: class at 0", "operations": ["INS TextElement: Spooling is deprecated and shouldn't be used while implementing new features. As of HBase to TagElement at 0", "INS Javadoc to TypeDeclaration: class at 0", "INS TextElement: 0.98.17, we rely on pacing the server side scanners instead of pulling rows from the server to TagElement at 1", "INS TextElement: and potentially spooling to a temporary file created on clients. to TagElement at 2", "INS TagElement to Javadoc at 0"]}, {"root": "INS MarkerAnnotation to TypeDeclaration: class at 1", "operations": ["INS SimpleName: Deprecated to MarkerAnnotation at 0", "INS MarkerAnnotation to TypeDeclaration: class at 1"]}, {"root": "INS TextElement: <p> to TagElement at 2", "operations": ["INS TextElement: <p> to TagElement at 2"]}, {"root": "INS TextElement: Spooling is deprecated and shouldn't be used while implementing new features. As of HBase 0.98.17,  to TagElement at 3", "operations": ["INS TextElement: Spooling is deprecated and shouldn't be used while implementing new features. As of HBase 0.98.17,  to TagElement at 3"]}, {"root": "INS TextElement: we rely on pacing the server side scanners instead of pulling rows from the server and  potentially  to TagElement at 4", "operations": ["INS TextElement: we rely on pacing the server side scanners instead of pulling rows from the server and  potentially  to TagElement at 4"]}, {"root": "INS TextElement: spooling to a temporary file created on clients. to TagElement at 5", "operations": ["INS TextElement: spooling to a temporary file created on clients. to TagElement at 5"]}, {"root": "INS TextElement: </p> to TagElement at 6", "operations": ["INS TextElement: </p> to TagElement at 6"]}]}}, {"SpoolingResultIterator_diff": {"operations": ["Insert MarkerAnnotation(76) into TypeDeclaration: class(1208) at 1", "Insert SimpleName: Deprecated(75) into MarkerAnnotation(76) at 0", "Insert Javadoc(106) into TypeDeclaration: class(197) at 0", "Insert MarkerAnnotation(108) into TypeDeclaration: class(197) at 1", "Insert TextElement: <p>(66) into TagElement(71) at 2", "Insert TextElement: Spooling is deprecated and shouldn't be used while implementing new features. As of HBase 0.98.17, (67) into TagElement(71) at 3", "Insert TextElement: we rely on pacing the server side scanners instead of pulling rows from the server and  potentially (68) into TagElement(71) at 4", "Insert TextElement: spooling to a temporary file created on clients.(69) into TagElement(71) at 5", "Insert TextElement: </p>(70) into TagElement(71) at 6", "Insert TagElement(105) into Javadoc(106) at 0", "Insert SimpleName: Deprecated(107) into MarkerAnnotation(108) at 0", "Insert TextElement: Spooling is deprecated and shouldn't be used while implementing new features. As of HBase(102) into TagElement(105) at 0", "Insert TextElement: 0.98.17, we rely on pacing the server side scanners instead of pulling rows from the server(103) into TagElement(105) at 1", "Insert TextElement: and potentially spooling to a temporary file created on clients.(104) into TagElement(105) at 2"]}}, {"TableResultIterator_cluster": {"actions": [{"root": "INS Block to TryStatement at 0", "operations": ["INS Block to TryStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.phoenix.coprocessor.BaseScannerRegionObserver", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.phoenix.util.QueryUtil"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: previousIterator", "DEL SimpleType: PeekingResultIterator", "DEL SimpleName: PeekingResultIterator", "DEL Modifier: private", "DEL FieldDeclaration", "DEL VariableDeclarationFragment"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: Scan", "DEL SimpleType: CombinableMetric", "DEL SimpleType: SQLException", "DEL SimpleName: renewLeaseThreshold", "DEL ConstructorInvocation", "DEL SimpleName: TableResultIterator", "DEL SimpleName: MutationState", "DEL SimpleName: Scan", "DEL SingleVariableDeclaration", "DEL SimpleName: tableRef", "DEL PrimitiveType: long", "DEL SimpleName: renewLeaseThreshold", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: scanMetrics", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleType: TableRef", "DEL SimpleName: tableRef", "DEL SimpleName: mutationState", "DEL SimpleName: mutationState", "DEL SimpleName: scan", "DEL Modifier: public", "DEL Block", "DEL SimpleName: scan", "DEL SimpleName: SQLException", "DEL SingleVariableDeclaration", "DEL SimpleName: TableRef", "DEL SimpleType: MutationState", "DEL SimpleName: CombinableMetric", "DEL SimpleName: scanMetrics"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: previousIterator", "DEL SingleVariableDeclaration", "DEL SimpleName: PeekingResultIterator", "DEL SimpleType: PeekingResultIterator"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: previousIterator", "DEL ExpressionStatement", "DEL Assignment: =", "DEL ThisExpression", "DEL FieldAccess", "DEL SimpleName: previousIterator"]}, {"root": "DEL Block", "operations": ["DEL QualifiedName: BaseScannerRegionObserver.SCAN_OFFSET", "DEL InfixExpression: !=", "DEL ArrayType: byte[]", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: scan", "DEL InfixExpression: !=", "DEL SimpleName: peek", "DEL SimpleName: setAttribute", "DEL IfStatement", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: scan", "DEL PrimitiveType: byte", "DEL QualifiedName: BaseScannerRegionObserver.SCAN_OFFSET", "DEL Dimension", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: getAttribute", "DEL ExpressionStatement", "DEL QualifiedName: BaseScannerRegionObserver.SCAN_OFFSET", "DEL InfixExpression: &&", "DEL SimpleName: next", "DEL NullLiteral", "DEL Block", "DEL SimpleName: previousIterator", "DEL ExpressionStatement", "DEL SimpleName: previousIterator", "DEL NullLiteral", "DEL InfixExpression: !=", "DEL SimpleName: setAttribute", "DEL SimpleName: scan", "DEL SimpleName: unusedOffset", "DEL MethodInvocation", "DEL SimpleName: getUnusedOffset", "DEL SimpleName: unusedOffset", "DEL ExpressionStatement", "DEL SimpleName: QueryUtil", "DEL SimpleName: unusedOffset", "DEL NullLiteral", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: previousIterator", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL NullLiteral"]}]}}, {"TableResultIterator_diff": {"operations": ["Insert Block(322) into TryStatement(339) at 0", "Move ExpressionStatement(419) into Block(322) at 0", "Delete QualifiedName: org.apache.phoenix.coprocessor.BaseScannerRegionObserver(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: org.apache.phoenix.util.QueryUtil(40)", "Delete ImportDeclaration(41)", "Delete Modifier: private(119)", "Delete SimpleName: PeekingResultIterator(120)", "Delete SimpleType: PeekingResultIterator(121)", "Delete SimpleName: previousIterator(122)", "Delete VariableDeclarationFragment(123)", "Delete FieldDeclaration(124)", "Delete Modifier: public(168)", "Delete SimpleName: TableResultIterator(169)", "Delete SimpleName: MutationState(170)", "Delete SimpleType: MutationState(171)", "Delete SimpleName: mutationState(172)", "Delete SingleVariableDeclaration(173)", "Delete SimpleName: TableRef(174)", "Delete SimpleType: TableRef(175)", "Delete SimpleName: tableRef(176)", "Delete SingleVariableDeclaration(177)", "Delete SimpleName: Scan(178)", "Delete SimpleType: Scan(179)", "Delete SimpleName: scan(180)", "Delete SingleVariableDeclaration(181)", "Delete SimpleName: CombinableMetric(182)", "Delete SimpleType: CombinableMetric(183)", "Delete SimpleName: scanMetrics(184)", "Delete SingleVariableDeclaration(185)", "Delete PrimitiveType: long(186)", "Delete SimpleName: renewLeaseThreshold(187)", "Delete SingleVariableDeclaration(188)", "Delete SimpleName: SQLException(189)", "Delete SimpleType: SQLException(190)", "Delete SimpleName: mutationState(191)", "Delete SimpleName: tableRef(192)", "Delete SimpleName: scan(193)", "Delete SimpleName: scanMetrics(194)", "Delete SimpleName: renewLeaseThreshold(195)", "Delete NullLiteral(196)", "Delete ConstructorInvocation(197)", "Delete Block(198)", "Delete MethodDeclaration(199)", "Delete SimpleName: PeekingResultIterator(221)", "Delete SimpleType: PeekingResultIterator(222)", "Delete SimpleName: previousIterator(223)", "Delete SingleVariableDeclaration(224)", "Delete ThisExpression(266)", "Delete SimpleName: previousIterator(267)", "Delete FieldAccess(268)", "Delete SimpleName: previousIterator(269)", "Delete Assignment: =(270)", "Delete ExpressionStatement(271)", "Delete SimpleName: previousIterator(361)", "Delete NullLiteral(362)", "Delete InfixExpression: !=(363)", "Delete SimpleName: scan(364)", "Delete SimpleName: getAttribute(365)", "Delete QualifiedName: BaseScannerRegionObserver.SCAN_OFFSET(366)", "Delete MethodInvocation(367)", "Delete NullLiteral(368)", "Delete InfixExpression: !=(369)", "Delete InfixExpression: &&(370)", "Delete PrimitiveType: byte(371)", "Delete Dimension(372)", "Delete ArrayType: byte[](373)", "Delete SimpleName: unusedOffset(374)", "Delete SimpleName: QueryUtil(375)", "Delete SimpleName: getUnusedOffset(376)", "Delete SimpleName: previousIterator(377)", "Delete SimpleName: peek(378)", "Delete MethodInvocation(379)", "Delete MethodInvocation(380)", "Delete VariableDeclarationFragment(381)", "Delete VariableDeclarationStatement(382)", "Delete SimpleName: unusedOffset(383)", "Delete NullLiteral(384)", "Delete InfixExpression: !=(385)", "Delete SimpleName: scan(386)", "Delete SimpleName: setAttribute(387)", "Delete QualifiedName: BaseScannerRegionObserver.SCAN_OFFSET(388)", "Delete SimpleName: unusedOffset(389)", "Delete MethodInvocation(390)", "Delete ExpressionStatement(391)", "Delete SimpleName: previousIterator(392)", "Delete SimpleName: next(393)", "Delete MethodInvocation(394)", "Delete ExpressionStatement(395)", "Delete Block(396)", "Delete SimpleName: scan(397)", "Delete SimpleName: setAttribute(398)", "Delete QualifiedName: BaseScannerRegionObserver.SCAN_OFFSET(399)", "Delete NullLiteral(400)", "Delete MethodInvocation(401)", "Delete ExpressionStatement(402)", "Delete Block(403)", "Delete IfStatement(404)", "Delete Block(405)", "Delete IfStatement(406)", "Delete Block(420)"]}}, {"PhoenixConnection_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 39"]}, {"root": "INS ImportDeclaration to CompilationUnit at 59", "operations": ["INS QualifiedName: org.apache.phoenix.query.ConnectionQueryServices.Feature to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 59"]}, {"root": "UPDATE from addIterator to addIteratorForLeaseRenewal", "operations": ["UPD SimpleName: addIterator from addIterator to addIteratorForLeaseRenewal"]}, {"root": "UPDATE from ConnectionQueryServices.Feature.RENEW_LEASE to Feature.RENEW_LEASE", "operations": ["UPD QualifiedName: ConnectionQueryServices.Feature.RENEW_LEASE from ConnectionQueryServices.Feature.RENEW_LEASE to Feature.RENEW_LEASE"]}]}}, {"PhoenixConnection_diff": {"operations": ["Move ImportDeclaration(197) into CompilationUnit(4250) at 39", "Insert ImportDeclaration(119) into CompilationUnit(4250) at 59", "Insert QualifiedName: org.apache.phoenix.query.ConnectionQueryServices.Feature(118) into ImportDeclaration(119) at 0", "Update SimpleName: addIterator(4138) to addIteratorForLeaseRenewal", "Update QualifiedName: ConnectionQueryServices.Feature.RENEW_LEASE(4147) to Feature.RENEW_LEASE"]}}, {"QueryConstants_cluster": {"actions": [{"root": "UPDATE from offsetRowKeyPtr to OFFSET_ROW_KEY_PTR", "operations": ["UPD SimpleName: offsetRowKeyPtr from offsetRowKeyPtr to OFFSET_ROW_KEY_PTR"]}]}}, {"QueryConstants_diff": {"operations": ["Update SimpleName: offsetRowKeyPtr(370) to OFFSET_ROW_KEY_PTR"]}}, {"PTableImpl_cluster": {"actions": [{"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}]}}, {"PTableImpl_diff": {"operations": ["Insert MarkerAnnotation(6870) into MethodDeclaration(6877) at 0", "Insert SimpleName: Override(6869) into MarkerAnnotation(6870) at 0"]}}], "commit_stats": [{"total_files": 15, "deleted_files": 0, "testing": "False", "maintenance": "True", "build": "False"}]}