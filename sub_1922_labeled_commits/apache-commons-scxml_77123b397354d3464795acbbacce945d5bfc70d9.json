{"application": "apache-commons-scxml", "csha": "77123b397354d3464795acbbacce945d5bfc70d9", "files": [{"GroovyBinding_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.scxml2.env.groovy"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: groovy.lang.Binding"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.LinkedHashMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.scxml2.Context"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: Override", "DEL SimpleName: getVariable", "DEL SimpleName: context", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL SingleMemberAnnotation", "DEL SimpleName: Override", "DEL SimpleName: set", "DEL SimpleName: GroovyBinding", "DEL MethodInvocation", "DEL SimpleName: context", "DEL SimpleType: Binding", "DEL SingleVariableDeclaration", "DEL SimpleType: IllegalArgumentException", "DEL TagElement", "DEL TextElement:   SCXML Context to use for script variables.", "DEL ReturnStatement", "DEL SimpleName: context", "DEL Block", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: getVariable", "DEL SimpleType: LinkedHashMap", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL SimpleType: Object", "DEL SimpleName: IllegalArgumentException", "DEL Block", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL MethodDeclaration", "DEL SimpleName: hasVariable", "DEL FieldAccess", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleName: Map", "DEL SimpleName: Object", "DEL SimpleType: Context", "DEL ReturnStatement", "DEL TextElement: functions that do not exist in the wrapped Binding.", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: String", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL ReturnStatement", "DEL Modifier: private", "DEL Modifier: public", "DEL PrimitiveType: void", "DEL SimpleName: LinkedHashMap", "DEL TextElement: or <code>binding</code> is <code>null</code>.", "DEL SimpleName: Binding", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: setVariable", "DEL PrimitiveType: void", "DEL SimpleName: getVars", "DEL SimpleName: setProperty", "DEL TextElement:  GroovyShell bindings for variables.", "DEL Javadoc", "DEL StringLiteral: \"unchecked\"", "DEL FieldDeclaration", "DEL TagElement: @param", "DEL Block", "DEL SimpleType: String", "DEL SimpleType: String", "DEL SimpleName: binding", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: variables", "DEL SimpleName: String", "DEL SimpleType: Map", "DEL SimpleName: context", "DEL MarkerAnnotation", "DEL SimpleName: name", "DEL FieldDeclaration", "DEL Modifier: private", "DEL SimpleType: Object", "DEL ClassInstanceCreation", "DEL SimpleName: property", "DEL Block", "DEL SimpleName: name", "DEL TagElement: @param", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: Context", "DEL SimpleName: name", "DEL TextElement: Initialises the internal Bindings delegate and SCXML context.", "DEL SimpleName: String", "DEL Block", "DEL ThisExpression", "DEL SimpleName: property", "DEL MethodDeclaration", "DEL SimpleName: newValue", "DEL TextElement: Wrapper class for the Groovy Binding class that extends the", "DEL SimpleName: get", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL SimpleName: Binding", "DEL SimpleName: Override", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: Object", "DEL Block", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"rawtypes\"", "DEL Block", "DEL MarkerAnnotation", "DEL SimpleName: binding", "DEL TypeDeclaration: class", "DEL Modifier: public", "DEL SimpleName: SuppressWarnings", "DEL SimpleName: context", "DEL SimpleName: property", "DEL SimpleName: putAll", "DEL IfStatement", "DEL SimpleType: Object", "DEL SimpleName: Context", "DEL SimpleType: String", "DEL SimpleName: property", "DEL Modifier: public", "DEL SimpleName: value", "DEL SimpleName: name", "DEL SimpleName: binding", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL NullLiteral", "DEL Block", "DEL SimpleName: getProperty", "DEL SimpleName: String", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: binding", "DEL BooleanLiteral: true", "DEL ParameterizedType: LinkedHashMap<String,Object>", "DEL SimpleName: binding", "DEL SimpleName: hasVariable", "DEL TagElement: @throws", "DEL SimpleName: name", "DEL InfixExpression: ==", "DEL SimpleName: setLocal", "DEL SimpleName: binding", "DEL SimpleType: Context", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL SimpleName: binding", "DEL MethodInvocation", "DEL SimpleName: Map", "DEL ExpressionStatement", "DEL SimpleName: name", "DEL SimpleType: Object", "DEL IfStatement", "DEL SimpleName: String", "DEL SimpleName: context", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: value", "DEL SimpleType: Object", "DEL InfixExpression: ==", "DEL ParameterizedType: Map<String,Object>", "DEL SimpleName: context", "DEL Block", "DEL SimpleName: getVariables", "DEL SimpleName: value", "DEL ExpressionStatement", "DEL SimpleName: newValue", "DEL MarkerAnnotation", "DEL SimpleName: Override", "DEL Modifier: public", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"Invalid SCXML context\"", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleName: hasVariable", "DEL SimpleName: binding", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleName: binding", "DEL StringLiteral: \"Invalid GroovyShell Binding\"", "DEL Block", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleName: has", "DEL SimpleName: context", "DEL SimpleName: has", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleType: String", "DEL SimpleName: name", "DEL MethodInvocation", "DEL SimpleName: Binding", "DEL SimpleName: name", "DEL VariableDeclarationStatement", "DEL SimpleName: setVariable", "DEL SimpleName: name", "DEL SimpleName: context", "DEL ExpressionStatement", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: name", "DEL SimpleName: binding", "DEL Modifier: public", "DEL SimpleName: binding", "DEL SimpleType: Binding", "DEL ClassInstanceCreation", "DEL SimpleName: has", "DEL MarkerAnnotation", "DEL SimpleName: context", "DEL SimpleName: binding", "DEL SimpleName: name", "DEL MarkerAnnotation", "DEL ThrowStatement", "DEL SimpleName: context", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: setProperty", "DEL MethodDeclaration", "DEL ArrayInitializer", "DEL Modifier: public", "DEL SimpleName: variables", "DEL SimpleName: getProperty", "DEL MethodInvocation", "DEL SimpleName: context", "DEL SimpleName: name", "DEL SimpleType: String", "DEL SimpleName: variables", "DEL TextElement: wrapped Binding to search the SCXML context for variables and predefined", "DEL TagElement", "DEL SimpleName: getVariables", "DEL FieldAccess", "DEL SimpleName: binding", "DEL TextElement:  Thrown if either <code>context</code>", "DEL ExpressionStatement", "DEL ThrowStatement", "DEL MethodInvocation", "DEL SimpleType: Map", "DEL SimpleName: Override", "DEL SimpleName: context", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL SimpleName: GroovyBinding", "DEL NullLiteral", "DEL ThisExpression", "DEL Block", "DEL SimpleName: name", "DEL SimpleType: Binding", "DEL SimpleName: value"]}]}}, {"GroovyBinding_diff": {"operations": ["Delete QualifiedName: org.apache.commons.scxml2.env.groovy(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: groovy.lang.Binding(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.LinkedHashMap(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Map(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: org.apache.commons.scxml2.Context(8)", "Delete ImportDeclaration(9)", "Delete TextElement: Wrapper class for the Groovy Binding class that extends the(10)", "Delete TextElement: wrapped Binding to search the SCXML context for variables and predefined(11)", "Delete TextElement: functions that do not exist in the wrapped Binding.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete Modifier: public(15)", "Delete SimpleName: GroovyBinding(16)", "Delete SimpleName: Binding(17)", "Delete SimpleType: Binding(18)", "Delete Modifier: private(19)", "Delete SimpleName: Context(20)", "Delete SimpleType: Context(21)", "Delete SimpleName: context(22)", "Delete VariableDeclarationFragment(23)", "Delete FieldDeclaration(24)", "Delete Modifier: private(25)", "Delete SimpleName: Binding(26)", "Delete SimpleType: Binding(27)", "Delete SimpleName: binding(28)", "Delete VariableDeclarationFragment(29)", "Delete FieldDeclaration(30)", "Delete TextElement: Initialises the internal Bindings delegate and SCXML context.(31)", "Delete TagElement(32)", "Delete SimpleName: context(33)", "Delete TextElement:   SCXML Context to use for script variables.(34)", "Delete TagElement: @param(35)", "Delete SimpleName: binding(36)", "Delete TextElement:  GroovyShell bindings for variables.(37)", "Delete TagElement: @param(38)", "Delete SimpleName: IllegalArgumentException(39)", "Delete TextElement:  Thrown if either <code>context</code>(40)", "Delete TextElement: or <code>binding</code> is <code>null</code>.(41)", "Delete TagElement: @throws(42)", "Delete Javadoc(43)", "Delete Modifier: public(44)", "Delete SimpleName: GroovyBinding(45)", "Delete SimpleName: Context(46)", "Delete SimpleType: Context(47)", "Delete SimpleName: context(48)", "Delete SingleVariableDeclaration(49)", "Delete SimpleName: Binding(50)", "Delete SimpleType: Binding(51)", "Delete SimpleName: binding(52)", "Delete SingleVariableDeclaration(53)", "Delete SimpleName: context(54)", "Delete NullLiteral(55)", "Delete InfixExpression: ==(56)", "Delete SimpleName: IllegalArgumentException(57)", "Delete SimpleType: IllegalArgumentException(58)", "Delete StringLiteral: \"Invalid SCXML context\"(59)", "Delete ClassInstanceCreation(60)", "Delete ThrowStatement(61)", "Delete Block(62)", "Delete IfStatement(63)", "Delete SimpleName: binding(64)", "Delete NullLiteral(65)", "Delete InfixExpression: ==(66)", "Delete SimpleName: IllegalArgumentException(67)", "Delete SimpleType: IllegalArgumentException(68)", "Delete StringLiteral: \"Invalid GroovyShell Binding\"(69)", "Delete ClassInstanceCreation(70)", "Delete ThrowStatement(71)", "Delete Block(72)", "Delete IfStatement(73)", "Delete ThisExpression(74)", "Delete SimpleName: context(75)", "Delete FieldAccess(76)", "Delete SimpleName: context(77)", "Delete Assignment: =(78)", "Delete ExpressionStatement(79)", "Delete ThisExpression(80)", "Delete SimpleName: binding(81)", "Delete FieldAccess(82)", "Delete SimpleName: binding(83)", "Delete Assignment: =(84)", "Delete ExpressionStatement(85)", "Delete Block(86)", "Delete MethodDeclaration(87)", "Delete SimpleName: Override(88)", "Delete MarkerAnnotation(89)", "Delete Modifier: public(90)", "Delete SimpleName: Object(91)", "Delete SimpleType: Object(92)", "Delete SimpleName: getVariable(93)", "Delete SimpleName: String(94)", "Delete SimpleType: String(95)", "Delete SimpleName: name(96)", "Delete SingleVariableDeclaration(97)", "Delete SimpleName: context(98)", "Delete SimpleName: has(99)", "Delete SimpleName: name(100)", "Delete MethodInvocation(101)", "Delete SimpleName: context(102)", "Delete SimpleName: get(103)", "Delete SimpleName: name(104)", "Delete MethodInvocation(105)", "Delete ReturnStatement(106)", "Delete Block(107)", "Delete IfStatement(108)", "Delete SimpleName: binding(109)", "Delete SimpleName: getVariable(110)", "Delete SimpleName: name(111)", "Delete MethodInvocation(112)", "Delete ReturnStatement(113)", "Delete Block(114)", "Delete MethodDeclaration(115)", "Delete SimpleName: Override(116)", "Delete MarkerAnnotation(117)", "Delete Modifier: public(118)", "Delete PrimitiveType: void(119)", "Delete SimpleName: setVariable(120)", "Delete SimpleName: String(121)", "Delete SimpleType: String(122)", "Delete SimpleName: name(123)", "Delete SingleVariableDeclaration(124)", "Delete SimpleName: Object(125)", "Delete SimpleType: Object(126)", "Delete SimpleName: value(127)", "Delete SingleVariableDeclaration(128)", "Delete SimpleName: context(129)", "Delete SimpleName: has(130)", "Delete SimpleName: name(131)", "Delete MethodInvocation(132)", "Delete SimpleName: context(133)", "Delete SimpleName: set(134)", "Delete SimpleName: name(135)", "Delete SimpleName: value(136)", "Delete MethodInvocation(137)", "Delete ExpressionStatement(138)", "Delete Block(139)", "Delete SimpleName: binding(140)", "Delete SimpleName: hasVariable(141)", "Delete SimpleName: name(142)", "Delete MethodInvocation(143)", "Delete SimpleName: binding(144)", "Delete SimpleName: setVariable(145)", "Delete SimpleName: name(146)", "Delete SimpleName: value(147)", "Delete MethodInvocation(148)", "Delete ExpressionStatement(149)", "Delete Block(150)", "Delete SimpleName: context(151)", "Delete SimpleName: setLocal(152)", "Delete SimpleName: name(153)", "Delete SimpleName: value(154)", "Delete MethodInvocation(155)", "Delete ExpressionStatement(156)", "Delete Block(157)", "Delete IfStatement(158)", "Delete IfStatement(159)", "Delete Block(160)", "Delete MethodDeclaration(161)", "Delete SimpleName: Override(162)", "Delete MarkerAnnotation(163)", "Delete Modifier: public(164)", "Delete PrimitiveType: boolean(165)", "Delete SimpleName: hasVariable(166)", "Delete SimpleName: String(167)", "Delete SimpleType: String(168)", "Delete SimpleName: name(169)", "Delete SingleVariableDeclaration(170)", "Delete SimpleName: context(171)", "Delete SimpleName: has(172)", "Delete SimpleName: name(173)", "Delete MethodInvocation(174)", "Delete BooleanLiteral: true(175)", "Delete ReturnStatement(176)", "Delete Block(177)", "Delete IfStatement(178)", "Delete SimpleName: binding(179)", "Delete SimpleName: hasVariable(180)", "Delete SimpleName: name(181)", "Delete MethodInvocation(182)", "Delete ReturnStatement(183)", "Delete Block(184)", "Delete MethodDeclaration(185)", "Delete SimpleName: SuppressWarnings(186)", "Delete StringLiteral: \"unchecked\"(187)", "Delete StringLiteral: \"rawtypes\"(188)", "Delete ArrayInitializer(189)", "Delete SingleMemberAnnotation(190)", "Delete SimpleName: Override(191)", "Delete MarkerAnnotation(192)", "Delete Modifier: public(193)", "Delete SimpleName: Map(194)", "Delete SimpleType: Map(195)", "Delete SimpleName: getVariables(196)", "Delete SimpleName: Map(197)", "Delete SimpleType: Map(198)", "Delete SimpleName: String(199)", "Delete SimpleType: String(200)", "Delete SimpleName: Object(201)", "Delete SimpleType: Object(202)", "Delete ParameterizedType: Map<String,Object>(203)", "Delete SimpleName: variables(204)", "Delete SimpleName: LinkedHashMap(205)", "Delete SimpleType: LinkedHashMap(206)", "Delete SimpleName: String(207)", "Delete SimpleType: String(208)", "Delete SimpleName: Object(209)", "Delete SimpleType: Object(210)", "Delete ParameterizedType: LinkedHashMap<String,Object>(211)", "Delete SimpleName: binding(212)", "Delete SimpleName: getVariables(213)", "Delete MethodInvocation(214)", "Delete ClassInstanceCreation(215)", "Delete VariableDeclarationFragment(216)", "Delete VariableDeclarationStatement(217)", "Delete SimpleName: variables(218)", "Delete SimpleName: putAll(219)", "Delete SimpleName: context(220)", "Delete SimpleName: getVars(221)", "Delete MethodInvocation(222)", "Delete MethodInvocation(223)", "Delete ExpressionStatement(224)", "Delete SimpleName: variables(225)", "Delete ReturnStatement(226)", "Delete Block(227)", "Delete MethodDeclaration(228)", "Delete SimpleName: Override(229)", "Delete MarkerAnnotation(230)", "Delete Modifier: public(231)", "Delete SimpleName: Object(232)", "Delete SimpleType: Object(233)", "Delete SimpleName: getProperty(234)", "Delete SimpleName: String(235)", "Delete SimpleType: String(236)", "Delete SimpleName: property(237)", "Delete SingleVariableDeclaration(238)", "Delete SimpleName: binding(239)", "Delete SimpleName: getProperty(240)", "Delete SimpleName: property(241)", "Delete MethodInvocation(242)", "Delete ReturnStatement(243)", "Delete Block(244)", "Delete MethodDeclaration(245)", "Delete SimpleName: Override(246)", "Delete MarkerAnnotation(247)", "Delete Modifier: public(248)", "Delete PrimitiveType: void(249)", "Delete SimpleName: setProperty(250)", "Delete SimpleName: String(251)", "Delete SimpleType: String(252)", "Delete SimpleName: property(253)", "Delete SingleVariableDeclaration(254)", "Delete SimpleName: Object(255)", "Delete SimpleType: Object(256)", "Delete SimpleName: newValue(257)", "Delete SingleVariableDeclaration(258)", "Delete SimpleName: binding(259)", "Delete SimpleName: setProperty(260)", "Delete SimpleName: property(261)", "Delete SimpleName: newValue(262)", "Delete MethodInvocation(263)", "Delete ExpressionStatement(264)", "Delete Block(265)", "Delete MethodDeclaration(266)", "Delete TypeDeclaration: class(267)"]}}, {"GroovyBuiltin_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.scxml2.env.groovy"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.scxml2.Builtin", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.scxml2.model.TransitionTarget", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: GroovyContext", "DEL SimpleName: context", "DEL SimpleName: Set", "DEL SimpleName: ctxt", "DEL SimpleType: String", "DEL ReturnStatement", "DEL SimpleName: GroovyContext", "DEL SimpleType: Object", "DEL SimpleName: Map", "DEL ReturnStatement", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL Modifier: final", "DEL ParameterizedType: Map<String,String>", "DEL ParameterizedType: Map<String,String>", "DEL SimpleName: getAllStates", "DEL SimpleType: TransitionTarget", "DEL Modifier: final", "DEL Block", "DEL SimpleName: data", "DEL SimpleName: getNamespaces", "DEL Modifier: public", "DEL SimpleType: Map", "DEL Javadoc", "DEL Javadoc", "DEL Block", "DEL Modifier: private", "DEL SimpleName: path", "DEL SimpleName: data", "DEL SimpleName: state", "DEL Javadoc", "DEL MethodDeclaration", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: context", "DEL SimpleName: context", "DEL Assignment: =", "DEL TagElement", "DEL SimpleName: getAllStates", "DEL PrimitiveType: boolean", "DEL SimpleName: state", "DEL TagElement: @return", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL MethodDeclaration", "DEL TextElement: The context currently in use for evaluation.", "DEL Javadoc", "DEL SimpleName: state", "DEL TagElement: @return", "DEL ExpressionStatement", "DEL SimpleName: ctxt", "DEL SimpleName: TransitionTarget", "DEL MethodInvocation", "DEL SimpleName: context", "DEL SimpleName: GroovyBuiltin", "DEL SimpleName: String", "DEL SimpleName: String", "DEL SimpleName: getNamespaces", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL ParameterizedType: Set<TransitionTarget>", "DEL Javadoc", "DEL SimpleName: Object", "DEL SimpleType: Set", "DEL TagElement: @return", "DEL TextElement:  The State ID to compare with", "DEL TextElement:  Whether this State belongs to this Set", "DEL SimpleName: dataNode", "DEL TagElement", "DEL Javadoc", "DEL Modifier: private", "DEL SimpleName: TransitionTarget", "DEL SimpleName: data", "DEL SimpleName: get", "DEL MethodDeclaration", "DEL SimpleName: data", "DEL SimpleName: Builtin", "DEL SimpleType: Set", "DEL Block", "DEL Block", "DEL FieldDeclaration", "DEL SimpleName: data", "DEL Modifier: final", "DEL SimpleType: String", "DEL CastExpression", "DEL SimpleName: In", "DEL TextElement:  the ALL_STATES set", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: path", "DEL ReturnStatement", "DEL TagElement", "DEL SimpleName: Set", "DEL ExpressionStatement", "DEL TextElement:  the context in use", "DEL SimpleName: isEvaluatingLocation", "DEL SimpleName: getNamespaces", "DEL TextElement:  the XPath expression", "DEL MethodInvocation", "DEL Modifier: final", "DEL IfStatement", "DEL Modifier: public", "DEL Block", "DEL SimpleName: ctxt", "DEL TypeDeclaration: class", "DEL Modifier: final", "DEL SimpleType: String", "DEL SimpleName: Data", "DEL MethodInvocation", "DEL TagElement: @param", "DEL TextElement: Implements the Data() predicate for SCXML documents ( see Builtin#data ).", "DEL StringLiteral: \"_ALL_NAMESPACES\"", "DEL SimpleName: Builtin", "DEL TagElement", "DEL SimpleName: context", "DEL SimpleName: get", "DEL TagElement", "DEL SimpleType: String", "DEL ParameterizedType: Set<TransitionTarget>", "DEL TextElement: Global Groovy namespace functor, implements Data() and In() operators.", "DEL TagElement: @param", "DEL SimpleType: GroovyContext", "DEL StringLiteral: \"_ALL_STATES\"", "DEL Block", "DEL CastExpression", "DEL MethodDeclaration", "DEL Modifier: final", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: Map", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: String", "DEL Modifier: public", "DEL TextElement:  the ALL_NAMESPACES map", "DEL TextElement:  the context node", "DEL SimpleName: Builtin", "DEL SimpleName: setEvaluatingLocation", "DEL MethodInvocation", "DEL SimpleType: GroovyContext", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL BooleanLiteral: false", "DEL TextElement: Creates a new instance, wraps the context.", "DEL SimpleName: context", "DEL SimpleType: String", "DEL TextElement: Cooperates with GroovyContext.", "DEL TextElement: Implements the In() predicate for SCXML documents ( see Builtin#isMember )", "DEL SimpleType: String", "DEL TagElement: @return", "DEL TextElement: Gets the ALL_STATES set from context.", "DEL TagElement: @param", "DEL TextElement: Gets the ALL_NAMESPACES map from context.", "DEL SimpleType: TransitionTarget", "DEL SimpleName: isMember", "DEL ReturnStatement", "DEL Modifier: public", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: path", "DEL SimpleName: String", "DEL SimpleName: GroovyBuiltin", "DEL SimpleType: Map", "DEL TextElement:  the first node matching the path", "DEL SimpleName: path", "DEL SimpleName: String"]}]}}, {"GroovyBuiltin_diff": {"operations": ["Delete QualifiedName: org.apache.commons.scxml2.env.groovy(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.Map(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Set(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.apache.commons.scxml2.Builtin(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: org.apache.commons.scxml2.model.TransitionTarget(8)", "Delete ImportDeclaration(9)", "Delete TextElement: Global Groovy namespace functor, implements Data() and In() operators.(10)", "Delete TextElement: Cooperates with GroovyContext.(11)", "Delete TagElement(12)", "Delete Javadoc(13)", "Delete Modifier: public(14)", "Delete Modifier: final(15)", "Delete SimpleName: GroovyBuiltin(16)", "Delete TextElement: The context currently in use for evaluation.(17)", "Delete TagElement(18)", "Delete Javadoc(19)", "Delete Modifier: private(20)", "Delete Modifier: final(21)", "Delete SimpleName: GroovyContext(22)", "Delete SimpleType: GroovyContext(23)", "Delete SimpleName: context(24)", "Delete VariableDeclarationFragment(25)", "Delete FieldDeclaration(26)", "Delete TextElement: Creates a new instance, wraps the context.(27)", "Delete TagElement(28)", "Delete SimpleName: ctxt(29)", "Delete TextElement:  the context in use(30)", "Delete TagElement: @param(31)", "Delete Javadoc(32)", "Delete Modifier: public(33)", "Delete SimpleName: GroovyBuiltin(34)", "Delete Modifier: final(35)", "Delete SimpleName: GroovyContext(36)", "Delete SimpleType: GroovyContext(37)", "Delete SimpleName: ctxt(38)", "Delete SingleVariableDeclaration(39)", "Delete SimpleName: context(40)", "Delete SimpleName: ctxt(41)", "Delete Assignment: =(42)", "Delete ExpressionStatement(43)", "Delete Block(44)", "Delete MethodDeclaration(45)", "Delete TextElement: Gets the ALL_NAMESPACES map from context.(46)", "Delete TagElement(47)", "Delete TextElement:  the ALL_NAMESPACES map(48)", "Delete TagElement: @return(49)", "Delete Javadoc(50)", "Delete Modifier: private(51)", "Delete SimpleName: Map(52)", "Delete SimpleType: Map(53)", "Delete SimpleName: String(54)", "Delete SimpleType: String(55)", "Delete SimpleName: String(56)", "Delete SimpleType: String(57)", "Delete ParameterizedType: Map<String,String>(58)", "Delete SimpleName: getNamespaces(59)", "Delete SimpleName: Map(60)", "Delete SimpleType: Map(61)", "Delete SimpleName: String(62)", "Delete SimpleType: String(63)", "Delete SimpleName: String(64)", "Delete SimpleType: String(65)", "Delete ParameterizedType: Map<String,String>(66)", "Delete SimpleName: context(67)", "Delete SimpleName: get(68)", "Delete StringLiteral: \"_ALL_NAMESPACES\"(69)", "Delete MethodInvocation(70)", "Delete CastExpression(71)", "Delete ReturnStatement(72)", "Delete Block(73)", "Delete MethodDeclaration(74)", "Delete TextElement: Gets the ALL_STATES set from context.(75)", "Delete TagElement(76)", "Delete TextElement:  the ALL_STATES set(77)", "Delete TagElement: @return(78)", "Delete Javadoc(79)", "Delete Modifier: private(80)", "Delete SimpleName: Set(81)", "Delete SimpleType: Set(82)", "Delete SimpleName: TransitionTarget(83)", "Delete SimpleType: TransitionTarget(84)", "Delete ParameterizedType: Set<TransitionTarget>(85)", "Delete SimpleName: getAllStates(86)", "Delete SimpleName: Set(87)", "Delete SimpleType: Set(88)", "Delete SimpleName: TransitionTarget(89)", "Delete SimpleType: TransitionTarget(90)", "Delete ParameterizedType: Set<TransitionTarget>(91)", "Delete SimpleName: context(92)", "Delete SimpleName: get(93)", "Delete StringLiteral: \"_ALL_STATES\"(94)", "Delete MethodInvocation(95)", "Delete CastExpression(96)", "Delete ReturnStatement(97)", "Delete Block(98)", "Delete MethodDeclaration(99)", "Delete TextElement: Implements the Data() predicate for SCXML documents ( see Builtin#data ).(100)", "Delete TagElement(101)", "Delete SimpleName: data(102)", "Delete TextElement:  the context node(103)", "Delete TagElement: @param(104)", "Delete SimpleName: path(105)", "Delete TextElement:  the XPath expression(106)", "Delete TagElement: @param(107)", "Delete TextElement:  the first node matching the path(108)", "Delete TagElement: @return(109)", "Delete Javadoc(110)", "Delete Modifier: public(111)", "Delete SimpleName: Object(112)", "Delete SimpleType: Object(113)", "Delete SimpleName: Data(114)", "Delete Modifier: final(115)", "Delete SimpleName: Object(116)", "Delete SimpleType: Object(117)", "Delete SimpleName: data(118)", "Delete SingleVariableDeclaration(119)", "Delete Modifier: final(120)", "Delete SimpleName: String(121)", "Delete SimpleType: String(122)", "Delete SimpleName: path(123)", "Delete SingleVariableDeclaration(124)", "Delete SimpleName: context(125)", "Delete SimpleName: isEvaluatingLocation(126)", "Delete MethodInvocation(127)", "Delete SimpleName: context(128)", "Delete SimpleName: setEvaluatingLocation(129)", "Delete BooleanLiteral: false(130)", "Delete MethodInvocation(131)", "Delete ExpressionStatement(132)", "Delete SimpleName: Builtin(133)", "Delete SimpleName: dataNode(134)", "Delete SimpleName: getNamespaces(135)", "Delete MethodInvocation(136)", "Delete SimpleName: data(137)", "Delete SimpleName: path(138)", "Delete MethodInvocation(139)", "Delete ReturnStatement(140)", "Delete Block(141)", "Delete SimpleName: Builtin(142)", "Delete SimpleName: data(143)", "Delete SimpleName: getNamespaces(144)", "Delete MethodInvocation(145)", "Delete SimpleName: data(146)", "Delete SimpleName: path(147)", "Delete MethodInvocation(148)", "Delete ReturnStatement(149)", "Delete Block(150)", "Delete IfStatement(151)", "Delete Block(152)", "Delete MethodDeclaration(153)", "Delete TextElement: Implements the In() predicate for SCXML documents ( see Builtin#isMember )(154)", "Delete TagElement(155)", "Delete SimpleName: state(156)", "Delete TextElement:  The State ID to compare with(157)", "Delete TagElement: @param(158)", "Delete TextElement:  Whether this State belongs to this Set(159)", "Delete TagElement: @return(160)", "Delete Javadoc(161)", "Delete Modifier: public(162)", "Delete PrimitiveType: boolean(163)", "Delete SimpleName: In(164)", "Delete Modifier: final(165)", "Delete SimpleName: String(166)", "Delete SimpleType: String(167)", "Delete SimpleName: state(168)", "Delete SingleVariableDeclaration(169)", "Delete SimpleName: Builtin(170)", "Delete SimpleName: isMember(171)", "Delete SimpleName: getAllStates(172)", "Delete MethodInvocation(173)", "Delete SimpleName: state(174)", "Delete MethodInvocation(175)", "Delete ReturnStatement(176)", "Delete Block(177)", "Delete MethodDeclaration(178)", "Delete TypeDeclaration: class(179)"]}}, {"GroovyContext_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: java.io.ByteArrayInputStream to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: java.io.ByteArrayOutputStream to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: java.io.IOException to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: java.io.ObjectInputStream to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS QualifiedName: java.io.ObjectOutputStream to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS ImportDeclaration to CompilationUnit at 6", "INS QualifiedName: java.io.ObjectStreamClass to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS ImportDeclaration to CompilationUnit at 7", "INS QualifiedName: java.util.Iterator to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS ImportDeclaration to CompilationUnit at 9", "INS QualifiedName: org.apache.commons.logging.Log to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS QualifiedName: org.apache.commons.logging.LogFactory to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 10"]}, {"root": "INS ImportDeclaration to CompilationUnit at 13", "operations": ["INS ImportDeclaration to CompilationUnit at 13", "INS QualifiedName: groovy.lang.Closure to ImportDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: getLog to MethodInvocation at 1", "INS SimpleName: GroovyContext to SimpleType: GroovyContext at 0", "INS SimpleName: LogFactory to MethodInvocation at 0", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleType: GroovyContext to TypeLiteral at 0", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: log to VariableDeclarationFragment at 0", "INS SimpleName: Log to SimpleType: Log at 0", "INS SimpleType: Log to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS TypeLiteral to MethodInvocation at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 7", "INS SimpleType: String to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: scriptBaseClass to VariableDeclarationFragment at 0", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleName: GroovyEvaluator to SimpleType: GroovyEvaluator at 0", "INS SimpleType: GroovyEvaluator to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: evaluator to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 9", "operations": ["INS SimpleName: GroovyContextBinding to SimpleType: GroovyContextBinding at 0", "INS SimpleType: GroovyContextBinding to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 9", "INS SimpleName: binding to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS SimpleName: vars to VariableDeclarationFragment at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleType: Object to ParameterizedType: Map<String,Object> at 2", "INS SimpleName: String to SimpleType: String at 0", "INS ParameterizedType: Map<String,Object> to FieldDeclaration at 1", "INS SimpleName: Map to SimpleType: Map at 0", "INS FieldDeclaration to TypeDeclaration: class at 10", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleType: String to ParameterizedType: Map<String,Object> at 1", "INS SimpleType: Map to ParameterizedType: Map<String,Object> at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS SimpleType: GroovyContextBinding to ClassInstanceCreation at 0", "INS SimpleName: getBinding to MethodDeclaration at 1", "INS SimpleName: GroovyContextBinding to SimpleType: GroovyContextBinding at 0", "INS SimpleName: binding to Assignment: = at 0", "INS SimpleType: GroovyContextBinding to MethodDeclaration at 0", "INS IfStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: binding to InfixExpression: == at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS Block to MethodDeclaration at 2", "INS InfixExpression: == to IfStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: GroovyContextBinding to SimpleType: GroovyContextBinding at 0", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS ReturnStatement to Block at 1", "INS SimpleName: binding to ReturnStatement at 0", "INS ThisExpression to ClassInstanceCreation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: getGroovyEvaluator to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS SimpleType: GroovyEvaluator to MethodDeclaration at 1", "INS SimpleName: GroovyEvaluator to SimpleType: GroovyEvaluator at 0", "INS SimpleName: evaluator to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS Block to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 16", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Block to MethodDeclaration at 4", "INS SimpleName: GroovyEvaluator to SimpleType: GroovyEvaluator at 0", "INS SimpleType: GroovyEvaluator to SingleVariableDeclaration at 0", "INS FieldAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: evaluator to FieldAccess at 1", "INS SimpleName: setGroovyEvaluator to MethodDeclaration at 2", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: evaluator to SingleVariableDeclaration at 1", "INS SimpleName: evaluator to Assignment: = at 1", "INS PrimitiveType: void to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS ParameterizedType: Map<String,Object> to MethodDeclaration at 2", "INS SimpleType: Map to ParameterizedType: Map<String,Object> at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: vars to ReturnStatement at 0", "INS SimpleName: getVars to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS SimpleType: Object to ParameterizedType: Map<String,Object> at 2", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: String to ParameterizedType: Map<String,Object> at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: Object to SimpleType: Object at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS ExpressionStatement to Block at 0", "INS Modifier: protected to MethodDeclaration at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: setVars to MethodDeclaration at 3", "INS SimpleName: vars to Assignment: = at 1", "INS SimpleType: Object to ParameterizedType: Map<String,Object> at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS FieldAccess to Assignment: = at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleType: String to ParameterizedType: Map<String,Object> at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: vars to FieldAccess at 1", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS Assignment: = to ExpressionStatement at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleType: Map to ParameterizedType: Map<String,Object> at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS ParameterizedType: Map<String,Object> to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: vars to SingleVariableDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 21", "operations": ["INS SimpleType: String to SingleVariableDeclaration at 0", "INS FieldAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: scriptBaseClass to Assignment: = at 1", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: scriptBaseClass to FieldAccess at 1", "INS SimpleName: setScriptBaseClass to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Block to MethodDeclaration at 4", "INS ExpressionStatement to Block at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: scriptBaseClass to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS Modifier: protected to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 22", "operations": ["INS ReturnStatement to Block at 2", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: scriptBaseClass to ReturnStatement at 0", "INS MethodInvocation to ReturnStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS SimpleName: getScriptBaseClass to MethodInvocation at 1", "INS Modifier: protected to MethodDeclaration at 0", "INS IfStatement to Block at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: getParent to MethodInvocation at 0", "INS Block to MethodDeclaration at 3", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: getScriptBaseClass to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 22", "INS SimpleName: GroovyContext to SimpleType: GroovyContext at 0", "INS Block to IfStatement at 1", "INS NullLiteral to InfixExpression: != at 1", "INS CastExpression to ParenthesizedExpression at 0", "INS SimpleName: getParent to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS SimpleType: GroovyContext to CastExpression at 0", "INS SimpleName: scriptBaseClass to InfixExpression: != at 0", "INS IfStatement to Block at 1", "INS NullLiteral to ReturnStatement at 0", "INS SimpleType: String to MethodDeclaration at 1", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS SimpleName: hasNext to MethodInvocation at 1", "INS SimpleName: entry to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to InfixExpression: != at 0", "INS QualifiedName: Map.Entry to SimpleType: Map.Entry at 0", "INS SimpleName: out to MethodInvocation at 0", "INS SimpleName: vars to InfixExpression: != at 0", "INS SimpleName: ObjectOutputStream to SimpleType: ObjectOutputStream at 0", "INS SimpleName: bout to MethodInvocation at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleType: String to ParameterizedType: Map.Entry<String,Object> at 1", "INS SimpleName: ByteArrayOutputStream to SimpleType: ByteArrayOutputStream at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS ExpressionStatement to Block at 7", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: bout to ClassInstanceCreation at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: evaluator to FieldAccess at 1", "INS SimpleName: getVars to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to WhileStatement at 1", "INS SimpleName: Closure to SimpleType: Closure at 0", "INS SimpleName: toByteArray to MethodInvocation at 1", "INS MethodInvocation to WhileStatement at 0", "INS SimpleType: IOException to MethodDeclaration at 4", "INS FieldAccess to MethodInvocation at 2", "INS ExpressionStatement to Block at 4", "INS SimpleName: bout to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: binding to FieldAccess at 1", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 5", "INS BooleanLiteral: true to Assignment: = at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: warn to MethodInvocation at 1", "INS SimpleName: writeObject to MethodInvocation at 1", "INS MethodInvocation to InstanceofExpression at 0", "INS ThisExpression to FieldAccess at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: ObjectOutputStream to ClassInstanceCreation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: String to ParameterizedType: Map.Entry<String,Object> at 1", "INS SimpleName: writeObject to MethodInvocation at 1", "INS SimpleType: Object to ParameterizedType: Map.Entry<String,Object> at 2", "INS SimpleName: entry to VariableDeclarationFragment at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ParameterizedType: Map.Entry<String,Object> to ParameterizedType: Iterator<Map.Entry<String,Object>> at 1", "INS NullLiteral to InfixExpression: != at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: Iterator to SimpleType: Iterator at 0", "INS ThisExpression to FieldAccess at 0", "INS Block to IfStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 23", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: Object to ParameterizedType: Map.Entry<String,Object> at 2", "INS SimpleName: entrySet to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS Block to MethodDeclaration at 5", "INS ExpressionStatement to Block at 0", "INS SimpleName: scriptBaseClass to FieldAccess at 1", "INS BooleanLiteral: false to VariableDeclarationFragment at 1", "INS SimpleName: ObjectOutputStream to SimpleType: ObjectOutputStream at 0", "INS ParameterizedType: Map.Entry<String,Object> to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS IfStatement to Block at 2", "INS SimpleName: remove to MethodInvocation at 1", "INS ExpressionStatement to Block at 3", "INS SimpleName: iterator to MethodInvocation at 0", "INS SimpleName: writeObject to MethodInvocation at 1", "INS ParameterizedType: Iterator<Map.Entry<String,Object>> to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: getValue to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: closureErased to IfStatement at 0", "INS FieldAccess to MethodInvocation at 2", "INS InfixExpression: != to IfStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: out to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: writeObject to MethodDeclaration at 2", "INS FieldAccess to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: next to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Iterator to ParameterizedType: Iterator<Map.Entry<String,Object>> at 0", "INS ExpressionStatement to Block at 1", "INS IfStatement to Block at 1", "INS SimpleType: Closure to InstanceofExpression at 1", "INS SimpleName: ByteArrayOutputStream to SimpleType: ByteArrayOutputStream at 0", "INS ExpressionStatement to Block at 6", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: iterator to MethodInvocation at 0", "INS SimpleName: out to MethodInvocation at 0", "INS QualifiedName: Map.Entry to SimpleType: Map.Entry at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleType: ByteArrayOutputStream to ClassInstanceCreation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"Encountered and removed Groovy Closure(s) in the GroovyContext during serialization: these are not supported for (de)serialization\" to MethodInvocation at 2", "INS SimpleName: out to MethodInvocation at 0", "INS SimpleName: writeObject to MethodInvocation at 1", "INS SimpleType: ByteArrayOutputStream to VariableDeclarationStatement at 0", "INS SimpleName: entry to MethodInvocation at 0", "INS SimpleName: log to MethodInvocation at 0", "INS SimpleName: iterator to MethodInvocation at 1", "INS Modifier: private to MethodDeclaration at 0", "INS ClassInstanceCreation to MethodInvocation at 0", "INS SimpleName: vars to FieldAccess at 1", "INS WhileStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: ObjectOutputStream to SingleVariableDeclaration at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: out to MethodInvocation at 0", "INS SimpleType: Map.Entry to ParameterizedType: Map.Entry<String,Object> at 0", "INS SimpleName: closureErased to VariableDeclarationFragment at 0", "INS SimpleType: Map.Entry to ParameterizedType: Map.Entry<String,Object> at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: closureErased to Assignment: = at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Block to IfStatement at 1", "INS SimpleName: writeObject to MethodInvocation at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: iterator to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getValue to MethodInvocation at 1", "INS SimpleName: iterator to VariableDeclarationFragment at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS FieldAccess to MethodInvocation at 2", "INS InstanceofExpression to InfixExpression: && at 1", "INS IfStatement to Block at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 24", "operations": ["INS CastExpression to Assignment: = at 1", "INS AnonymousClassDeclaration to ClassInstanceCreation at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: ByteArrayInputStream to ClassInstanceCreation at 0", "INS SimpleType: GroovyContextBinding to CastExpression at 0", "INS SimpleName: ByteArrayInputStream to SimpleType: ByteArrayInputStream at 0", "INS SimpleName: ClassNotFoundException to SimpleType: ClassNotFoundException at 0", "INS SimpleName: scriptBaseClass to FieldAccess at 1", "INS SimpleName: readObject to MethodInvocation at 1", "INS SimpleName: ObjectInputStream to SimpleType: ObjectInputStream at 0", "INS SimpleName: ByteArrayInputStream to SimpleType: ByteArrayInputStream at 0", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: in to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: forName to MethodInvocation at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: bytes to VariableDeclarationFragment at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS ParameterizedType: Map<String,Object> to CastExpression at 0", "INS CastExpression to Assignment: = at 1", "INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: ClassNotFoundException to MethodDeclaration at 5", "INS Block to MethodDeclaration at 6", "INS ExpressionStatement to Block at 0", "INS SimpleName: readObject to MethodInvocation at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: in to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: readObject to MethodDeclaration at 3", "INS SimpleName: in to MethodInvocation at 0", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: ClassNotFoundException to SimpleType: ClassNotFoundException at 0", "INS SimpleName: ObjectInputStream to SimpleType: ObjectInputStream at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: vars to FieldAccess at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleType: Map to ParameterizedType: Map<String,Object> at 0", "INS SimpleName: Class to MethodInvocation at 0", "INS ClassInstanceCreation to MethodInvocation at 0", "INS SimpleName: evaluator to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 24", "INS SimpleType: ObjectInputStream to ClassInstanceCreation at 0", "INS SimpleType: ClassNotFoundException to MethodDeclaration at 6", "INS SimpleName: evaluator to FieldAccess at 1", "INS SimpleName: vars to FieldAccess at 1", "INS SimpleType: Object to ParameterizedType: Map<String,Object> at 2", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS MethodInvocation to CastExpression at 1", "INS FieldAccess to Assignment: = at 0", "INS StringLiteral: \"unchecked\" to SingleMemberAnnotation at 1", "INS ExpressionStatement to Block at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: ObjectInputStream to SingleVariableDeclaration at 0", "INS SimpleName: readObject to MethodInvocation at 1", "INS SimpleName: readObject to MethodInvocation at 1", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: ObjectStreamClass to SimpleType: ObjectStreamClass at 0", "INS ArrayType: byte[] to VariableDeclarationStatement at 0", "INS CastExpression to Assignment: = at 1", "INS MethodInvocation to MethodInvocation at 4", "INS Block to IfStatement at 1", "INS SimpleType: ByteArrayInputStream to ClassInstanceCreation at 0", "INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS Block to IfStatement at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS VariableDeclarationStatement to Block at 3", "INS Modifier: protected to MethodDeclaration at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS CastExpression to Assignment: = at 1", "INS SimpleType: IOException to MethodDeclaration at 5", "INS SimpleType: String to ParameterizedType: Map<String,Object> at 1", "INS SimpleName: in to MethodInvocation at 0", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleType: String to CastExpression at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS ArrayType: byte[] to CastExpression at 0", "INS SimpleName: bytes to ClassInstanceCreation at 1", "INS SimpleName: binding to FieldAccess at 1", "INS SimpleType: Class to MethodDeclaration at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS SingleMemberAnnotation to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: GroovyEvaluator to SimpleType: GroovyEvaluator at 0", "INS FieldAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: GroovyContextBinding to SimpleType: GroovyContextBinding at 0", "INS SimpleName: getGroovyClassLoader to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: bytes to ClassInstanceCreation at 1", "INS ClassInstanceCreation to MethodInvocation at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: osc to MethodInvocation at 0", "INS SimpleType: ObjectStreamClass to SingleVariableDeclaration at 0", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: ObjectInputStream to SimpleType: ObjectInputStream at 0", "INS SimpleName: evaluator to InfixExpression: != at 0", "INS ParameterizedType: Map<String,Object> to CastExpression at 0", "INS ThisExpression to FieldAccess at 0", "INS Block to MethodDeclaration at 7", "INS MethodInvocation to ReturnStatement at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: osc to SingleVariableDeclaration at 1", "INS SimpleType: ObjectInputStream to ClassInstanceCreation at 0", "INS SimpleType: GroovyEvaluator to CastExpression at 0", "INS SimpleType: String to ParameterizedType: Map<String,Object> at 1", "INS BooleanLiteral: true to MethodInvocation at 3", "INS Modifier: private to MethodDeclaration at 1", "INS SimpleType: Map to ParameterizedType: Map<String,Object> at 0", "INS Dimension to ArrayType: byte[] at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleType: Object to ParameterizedType: Map<String,Object> at 2", "INS ThisExpression to FieldAccess at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleType: IOException to MethodDeclaration at 4", "INS SimpleName: readObject to MethodInvocation at 1", "INS SimpleName: readObject to MethodInvocation at 1", "INS SimpleName: resolveClass to MethodDeclaration at 2", "INS IfStatement to Block at 4", "INS SimpleName: in to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS CastExpression to Assignment: = at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: GroovyEvaluator to SimpleType: GroovyEvaluator at 0", "INS SimpleName: evaluator to SingleVariableDeclaration at 1", "INS SimpleType: GroovyEvaluator to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: GroovyEvaluator to SingleVariableDeclaration at 0", "INS SimpleName: GroovyEvaluator to SimpleType: GroovyEvaluator at 0", "INS SimpleName: evaluator to SingleVariableDeclaration at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: evaluator to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: evaluator to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS ThisExpression to FieldAccess at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: evaluator to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: evaluator to Assignment: = at 1"]}]}}, {"GroovyContext_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(590) at 1", "Insert ImportDeclaration(5) into CompilationUnit(590) at 2", "Insert ImportDeclaration(7) into CompilationUnit(590) at 3", "Insert ImportDeclaration(9) into CompilationUnit(590) at 4", "Insert ImportDeclaration(11) into CompilationUnit(590) at 5", "Insert ImportDeclaration(13) into CompilationUnit(590) at 6", "Insert ImportDeclaration(15) into CompilationUnit(590) at 7", "Insert ImportDeclaration(19) into CompilationUnit(590) at 9", "Insert ImportDeclaration(21) into CompilationUnit(590) at 10", "Insert ImportDeclaration(27) into CompilationUnit(590) at 13", "Insert QualifiedName: java.io.ByteArrayInputStream(2) into ImportDeclaration(3) at 0", "Insert QualifiedName: java.io.ByteArrayOutputStream(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: java.io.IOException(6) into ImportDeclaration(7) at 0", "Insert QualifiedName: java.io.ObjectInputStream(8) into ImportDeclaration(9) at 0", "Insert QualifiedName: java.io.ObjectOutputStream(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: java.io.ObjectStreamClass(12) into ImportDeclaration(13) at 0", "Insert QualifiedName: java.util.Iterator(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: org.apache.commons.logging.Log(18) into ImportDeclaration(19) at 0", "Insert QualifiedName: org.apache.commons.logging.LogFactory(20) into ImportDeclaration(21) at 0", "Insert QualifiedName: groovy.lang.Closure(26) into ImportDeclaration(27) at 0", "Insert FieldDeclaration(56) into TypeDeclaration: class(589) at 5", "Insert FieldDeclaration(72) into TypeDeclaration: class(589) at 7", "Insert FieldDeclaration(78) into TypeDeclaration: class(589) at 8", "Insert FieldDeclaration(84) into TypeDeclaration: class(589) at 9", "Insert FieldDeclaration(95) into TypeDeclaration: class(589) at 10", "Insert MethodDeclaration(114) into TypeDeclaration: class(589) at 11", "Insert MethodDeclaration(189) into TypeDeclaration: class(589) at 15", "Insert MethodDeclaration(204) into TypeDeclaration: class(589) at 16", "Insert MethodDeclaration(248) into TypeDeclaration: class(589) at 19", "Insert MethodDeclaration(271) into TypeDeclaration: class(589) at 20", "Insert MethodDeclaration(286) into TypeDeclaration: class(589) at 21", "Insert MethodDeclaration(316) into TypeDeclaration: class(589) at 22", "Insert MethodDeclaration(450) into TypeDeclaration: class(589) at 23", "Insert MethodDeclaration(588) into TypeDeclaration: class(589) at 24", "Insert Modifier: private(43) into FieldDeclaration(56) at 0", "Insert Modifier: static(44) into FieldDeclaration(56) at 1", "Insert Modifier: final(45) into FieldDeclaration(56) at 2", "Insert SimpleType: Log(47) into FieldDeclaration(56) at 3", "Insert VariableDeclarationFragment(55) into FieldDeclaration(56) at 4", "Insert Modifier: private(67) into FieldDeclaration(72) at 0", "Insert SimpleType: String(69) into FieldDeclaration(72) at 1", "Insert VariableDeclarationFragment(71) into FieldDeclaration(72) at 2", "Insert Modifier: private(73) into FieldDeclaration(78) at 0", "Insert SimpleType: GroovyEvaluator(75) into FieldDeclaration(78) at 1", "Insert VariableDeclarationFragment(77) into FieldDeclaration(78) at 2", "Insert Modifier: private(79) into FieldDeclaration(84) at 0", "Insert SimpleType: GroovyContextBinding(81) into FieldDeclaration(84) at 1", "Insert VariableDeclarationFragment(83) into FieldDeclaration(84) at 2", "Insert Modifier: private(85) into FieldDeclaration(95) at 0", "Insert ParameterizedType: Map<String,Object>(92) into FieldDeclaration(95) at 1", "Insert VariableDeclarationFragment(94) into FieldDeclaration(95) at 2", "Insert SimpleType: GroovyContextBinding(97) into MethodDeclaration(114) at 0", "Insert SimpleName: getBinding(98) into MethodDeclaration(114) at 1", "Insert Block(113) into MethodDeclaration(114) at 2", "Insert SingleVariableDeclaration(144) into MethodDeclaration(154) at 4", "Insert SingleVariableDeclaration(171) into MethodDeclaration(181) at 4", "Insert Modifier: protected(182) into MethodDeclaration(189) at 0", "Insert SimpleType: GroovyEvaluator(184) into MethodDeclaration(189) at 1", "Insert SimpleName: getGroovyEvaluator(185) into MethodDeclaration(189) at 2", "Insert Block(188) into MethodDeclaration(189) at 3", "Insert Modifier: protected(190) into MethodDeclaration(204) at 0", "Insert PrimitiveType: void(191) into MethodDeclaration(204) at 1", "Insert SimpleName: setGroovyEvaluator(192) into MethodDeclaration(204) at 2", "Insert SingleVariableDeclaration(196) into MethodDeclaration(204) at 3", "Insert Block(203) into MethodDeclaration(204) at 4", "Insert MarkerAnnotation(235) into MethodDeclaration(248) at 0", "Insert Modifier: public(236) into MethodDeclaration(248) at 1", "Insert ParameterizedType: Map<String,Object>(243) into MethodDeclaration(248) at 2", "Insert SimpleName: getVars(244) into MethodDeclaration(248) at 3", "Insert Block(247) into MethodDeclaration(248) at 4", "Insert MarkerAnnotation(250) into MethodDeclaration(271) at 0", "Insert Modifier: protected(251) into MethodDeclaration(271) at 1", "Insert PrimitiveType: void(252) into MethodDeclaration(271) at 2", "Insert SimpleName: setVars(253) into MethodDeclaration(271) at 3", "Insert SingleVariableDeclaration(263) into MethodDeclaration(271) at 4", "Insert Block(270) into MethodDeclaration(271) at 5", "Insert Modifier: protected(272) into MethodDeclaration(286) at 0", "Insert PrimitiveType: void(273) into MethodDeclaration(286) at 1", "Insert SimpleName: setScriptBaseClass(274) into MethodDeclaration(286) at 2", "Insert SingleVariableDeclaration(278) into MethodDeclaration(286) at 3", "Insert Block(285) into MethodDeclaration(286) at 4", "Insert Modifier: protected(287) into MethodDeclaration(316) at 0", "Insert SimpleType: String(289) into MethodDeclaration(316) at 1", "Insert SimpleName: getScriptBaseClass(290) into MethodDeclaration(316) at 2", "Insert Block(315) into MethodDeclaration(316) at 3", "Insert Modifier: private(317) into MethodDeclaration(450) at 0", "Insert PrimitiveType: void(318) into MethodDeclaration(450) at 1", "Insert SimpleName: writeObject(319) into MethodDeclaration(450) at 2", "Insert SingleVariableDeclaration(323) into MethodDeclaration(450) at 3", "Insert SimpleType: IOException(325) into MethodDeclaration(450) at 4", "Insert Block(449) into MethodDeclaration(450) at 5", "Insert SingleMemberAnnotation(453) into MethodDeclaration(588) at 0", "Insert Modifier: private(454) into MethodDeclaration(588) at 1", "Insert PrimitiveType: void(455) into MethodDeclaration(588) at 2", "Insert SimpleName: readObject(456) into MethodDeclaration(588) at 3", "Insert SingleVariableDeclaration(460) into MethodDeclaration(588) at 4", "Insert SimpleType: IOException(462) into MethodDeclaration(588) at 5", "Insert SimpleType: ClassNotFoundException(464) into MethodDeclaration(588) at 6", "Insert Block(587) into MethodDeclaration(588) at 7", "Insert SimpleName: Log(46) into SimpleType: Log(47) at 0", "Insert SimpleName: log(48) into VariableDeclarationFragment(55) at 0", "Insert MethodInvocation(54) into VariableDeclarationFragment(55) at 1", "Insert SimpleName: String(68) into SimpleType: String(69) at 0", "Insert SimpleName: scriptBaseClass(70) into VariableDeclarationFragment(71) at 0", "Insert SimpleName: GroovyEvaluator(74) into SimpleType: GroovyEvaluator(75) at 0", "Insert SimpleName: evaluator(76) into VariableDeclarationFragment(77) at 0", "Insert SimpleName: GroovyContextBinding(80) into SimpleType: GroovyContextBinding(81) at 0", "Insert SimpleName: binding(82) into VariableDeclarationFragment(83) at 0", "Insert SimpleType: Map(87) into ParameterizedType: Map<String,Object>(92) at 0", "Insert SimpleType: String(89) into ParameterizedType: Map<String,Object>(92) at 1", "Insert SimpleType: Object(91) into ParameterizedType: Map<String,Object>(92) at 2", "Insert SimpleName: vars(93) into VariableDeclarationFragment(94) at 0", "Insert SimpleName: GroovyContextBinding(96) into SimpleType: GroovyContextBinding(97) at 0", "Insert IfStatement(110) into Block(113) at 0", "Insert ReturnStatement(112) into Block(113) at 1", "Insert SimpleType: GroovyEvaluator(142) into SingleVariableDeclaration(144) at 0", "Insert SimpleName: evaluator(143) into SingleVariableDeclaration(144) at 1", "Insert ExpressionStatement(152) into Block(153) at 1", "Insert SimpleType: GroovyEvaluator(169) into SingleVariableDeclaration(171) at 0", "Insert SimpleName: evaluator(170) into SingleVariableDeclaration(171) at 1", "Insert ExpressionStatement(179) into Block(180) at 1", "Insert SimpleName: GroovyEvaluator(183) into SimpleType: GroovyEvaluator(184) at 0", "Insert ReturnStatement(187) into Block(188) at 0", "Insert SimpleType: GroovyEvaluator(194) into SingleVariableDeclaration(196) at 0", "Insert SimpleName: evaluator(195) into SingleVariableDeclaration(196) at 1", "Insert ExpressionStatement(202) into Block(203) at 0", "Insert SimpleName: Override(234) into MarkerAnnotation(235) at 0", "Insert SimpleType: Map(238) into ParameterizedType: Map<String,Object>(243) at 0", "Insert SimpleType: String(240) into ParameterizedType: Map<String,Object>(243) at 1", "Insert SimpleType: Object(242) into ParameterizedType: Map<String,Object>(243) at 2", "Insert ReturnStatement(246) into Block(247) at 0", "Insert SimpleName: Override(249) into MarkerAnnotation(250) at 0", "Insert Modifier: final(254) into SingleVariableDeclaration(263) at 0", "Insert ParameterizedType: Map<String,Object>(261) into SingleVariableDeclaration(263) at 1", "Insert SimpleName: vars(262) into SingleVariableDeclaration(263) at 2", "Insert ExpressionStatement(269) into Block(270) at 0", "Insert SimpleType: String(276) into SingleVariableDeclaration(278) at 0", "Insert SimpleName: scriptBaseClass(277) into SingleVariableDeclaration(278) at 1", "Insert ExpressionStatement(284) into Block(285) at 0", "Insert SimpleName: String(288) into SimpleType: String(289) at 0", "Insert IfStatement(297) into Block(315) at 0", "Insert IfStatement(312) into Block(315) at 1", "Insert ReturnStatement(314) into Block(315) at 2", "Insert SimpleType: ObjectOutputStream(321) into SingleVariableDeclaration(323) at 0", "Insert SimpleName: out(322) into SingleVariableDeclaration(323) at 1", "Insert SimpleName: IOException(324) into SimpleType: IOException(325) at 0", "Insert VariableDeclarationStatement(330) into Block(449) at 0", "Insert IfStatement(402) into Block(449) at 1", "Insert ExpressionStatement(409) into Block(449) at 2", "Insert ExpressionStatement(416) into Block(449) at 3", "Insert ExpressionStatement(423) into Block(449) at 4", "Insert VariableDeclarationStatement(431) into Block(449) at 5", "Insert ExpressionStatement(441) into Block(449) at 6", "Insert ExpressionStatement(448) into Block(449) at 7", "Insert SimpleName: SuppressWarnings(451) into SingleMemberAnnotation(453) at 0", "Insert StringLiteral: \"unchecked\"(452) into SingleMemberAnnotation(453) at 1", "Insert SimpleType: ObjectInputStream(458) into SingleVariableDeclaration(460) at 0", "Insert SimpleName: in(459) into SingleVariableDeclaration(460) at 1", "Insert SimpleName: IOException(461) into SimpleType: IOException(462) at 0", "Insert SimpleName: ClassNotFoundException(463) into SimpleType: ClassNotFoundException(464) at 0", "Insert ExpressionStatement(475) into Block(587) at 0", "Insert ExpressionStatement(486) into Block(587) at 1", "Insert ExpressionStatement(497) into Block(587) at 2", "Insert VariableDeclarationStatement(510) into Block(587) at 3", "Insert IfStatement(586) into Block(587) at 4", "Insert SimpleName: LogFactory(49) into MethodInvocation(54) at 0", "Insert SimpleName: getLog(50) into MethodInvocation(54) at 1", "Insert TypeLiteral(53) into MethodInvocation(54) at 2", "Insert SimpleName: Map(86) into SimpleType: Map(87) at 0", "Insert SimpleName: String(88) into SimpleType: String(89) at 0", "Insert SimpleName: Object(90) into SimpleType: Object(91) at 0", "Insert InfixExpression: ==(101) into IfStatement(110) at 0", "Insert Block(109) into IfStatement(110) at 1", "Insert SimpleName: binding(111) into ReturnStatement(112) at 0", "Insert SimpleName: GroovyEvaluator(141) into SimpleType: GroovyEvaluator(142) at 0", "Insert Assignment: =(151) into ExpressionStatement(152) at 0", "Insert SimpleName: GroovyEvaluator(168) into SimpleType: GroovyEvaluator(169) at 0", "Insert Assignment: =(178) into ExpressionStatement(179) at 0", "Insert SimpleName: evaluator(186) into ReturnStatement(187) at 0", "Insert SimpleName: GroovyEvaluator(193) into SimpleType: GroovyEvaluator(194) at 0", "Insert Assignment: =(201) into ExpressionStatement(202) at 0", "Insert SimpleName: Map(237) into SimpleType: Map(238) at 0", "Insert SimpleName: String(239) into SimpleType: String(240) at 0", "Insert SimpleName: Object(241) into SimpleType: Object(242) at 0", "Insert SimpleName: vars(245) into ReturnStatement(246) at 0", "Insert SimpleType: Map(256) into ParameterizedType: Map<String,Object>(261) at 0", "Insert SimpleType: String(258) into ParameterizedType: Map<String,Object>(261) at 1", "Insert SimpleType: Object(260) into ParameterizedType: Map<String,Object>(261) at 2", "Insert Assignment: =(268) into ExpressionStatement(269) at 0", "Insert SimpleName: String(275) into SimpleType: String(276) at 0", "Insert Assignment: =(283) into ExpressionStatement(284) at 0", "Insert InfixExpression: !=(293) into IfStatement(297) at 0", "Insert Block(296) into IfStatement(297) at 1", "Insert InfixExpression: !=(301) into IfStatement(312) at 0", "Insert Block(311) into IfStatement(312) at 1", "Insert NullLiteral(313) into ReturnStatement(314) at 0", "Insert SimpleName: ObjectOutputStream(320) into SimpleType: ObjectOutputStream(321) at 0", "Insert PrimitiveType: boolean(326) into VariableDeclarationStatement(330) at 0", "Insert VariableDeclarationFragment(329) into VariableDeclarationStatement(330) at 1", "Insert InfixExpression: !=(333) into IfStatement(402) at 0", "Insert Block(401) into IfStatement(402) at 1", "Insert MethodInvocation(408) into ExpressionStatement(409) at 0", "Insert MethodInvocation(415) into ExpressionStatement(416) at 0", "Insert MethodInvocation(422) into ExpressionStatement(423) at 0", "Insert SimpleType: ByteArrayOutputStream(425) into VariableDeclarationStatement(431) at 0", "Insert VariableDeclarationFragment(430) into VariableDeclarationStatement(431) at 1", "Insert MethodInvocation(440) into ExpressionStatement(441) at 0", "Insert MethodInvocation(447) into ExpressionStatement(448) at 0", "Insert SimpleName: ObjectInputStream(457) into SimpleType: ObjectInputStream(458) at 0", "Insert Assignment: =(474) into ExpressionStatement(475) at 0", "Insert Assignment: =(485) into ExpressionStatement(486) at 0", "Insert Assignment: =(496) into ExpressionStatement(497) at 0", "Insert ArrayType: byte[](500) into VariableDeclarationStatement(510) at 0", "Insert VariableDeclarationFragment(509) into VariableDeclarationStatement(510) at 1", "Insert InfixExpression: !=(513) into IfStatement(586) at 0", "Insert Block(562) into IfStatement(586) at 1", "Insert Block(585) into IfStatement(586) at 2", "Insert SimpleType: GroovyContext(52) into TypeLiteral(53) at 0", "Insert SimpleName: binding(99) into InfixExpression: ==(101) at 0", "Insert NullLiteral(100) into InfixExpression: ==(101) at 1", "Insert ExpressionStatement(108) into Block(109) at 0", "Insert FieldAccess(149) into Assignment: =(151) at 0", "Insert SimpleName: evaluator(150) into Assignment: =(151) at 1", "Insert FieldAccess(176) into Assignment: =(178) at 0", "Insert SimpleName: evaluator(177) into Assignment: =(178) at 1", "Insert FieldAccess(199) into Assignment: =(201) at 0", "Insert SimpleName: evaluator(200) into Assignment: =(201) at 1", "Insert SimpleName: Map(255) into SimpleType: Map(256) at 0", "Insert SimpleName: String(257) into SimpleType: String(258) at 0", "Insert SimpleName: Object(259) into SimpleType: Object(260) at 0", "Insert FieldAccess(266) into Assignment: =(268) at 0", "Insert SimpleName: vars(267) into Assignment: =(268) at 1", "Insert FieldAccess(281) into Assignment: =(283) at 0", "Insert SimpleName: scriptBaseClass(282) into Assignment: =(283) at 1", "Insert SimpleName: scriptBaseClass(291) into InfixExpression: !=(293) at 0", "Insert NullLiteral(292) into InfixExpression: !=(293) at 1", "Insert ReturnStatement(295) into Block(296) at 0", "Insert MethodInvocation(299) into InfixExpression: !=(301) at 0", "Insert NullLiteral(300) into InfixExpression: !=(301) at 1", "Insert ReturnStatement(310) into Block(311) at 0", "Insert SimpleName: closureErased(327) into VariableDeclarationFragment(329) at 0", "Insert BooleanLiteral: false(328) into VariableDeclarationFragment(329) at 1", "Insert SimpleName: vars(331) into InfixExpression: !=(333) at 0", "Insert NullLiteral(332) into InfixExpression: !=(333) at 1", "Insert VariableDeclarationStatement(352) into Block(401) at 0", "Insert WhileStatement(392) into Block(401) at 1", "Insert IfStatement(400) into Block(401) at 2", "Insert SimpleName: out(403) into MethodInvocation(408) at 0", "Insert SimpleName: writeObject(404) into MethodInvocation(408) at 1", "Insert FieldAccess(407) into MethodInvocation(408) at 2", "Insert SimpleName: out(410) into MethodInvocation(415) at 0", "Insert SimpleName: writeObject(411) into MethodInvocation(415) at 1", "Insert FieldAccess(414) into MethodInvocation(415) at 2", "Insert SimpleName: out(417) into MethodInvocation(422) at 0", "Insert SimpleName: writeObject(418) into MethodInvocation(422) at 1", "Insert FieldAccess(421) into MethodInvocation(422) at 2", "Insert SimpleName: ByteArrayOutputStream(424) into SimpleType: ByteArrayOutputStream(425) at 0", "Insert SimpleName: bout(426) into VariableDeclarationFragment(430) at 0", "Insert ClassInstanceCreation(429) into VariableDeclarationFragment(430) at 1", "Insert ClassInstanceCreation(435) into MethodInvocation(440) at 0", "Insert SimpleName: writeObject(436) into MethodInvocation(440) at 1", "Insert FieldAccess(439) into MethodInvocation(440) at 2", "Insert SimpleName: out(442) into MethodInvocation(447) at 0", "Insert SimpleName: writeObject(443) into MethodInvocation(447) at 1", "Insert MethodInvocation(446) into MethodInvocation(447) at 2", "Insert FieldAccess(467) into Assignment: =(474) at 0", "Insert CastExpression(473) into Assignment: =(474) at 1", "Insert FieldAccess(478) into Assignment: =(485) at 0", "Insert CastExpression(484) into Assignment: =(485) at 1", "Insert FieldAccess(489) into Assignment: =(496) at 0", "Insert CastExpression(495) into Assignment: =(496) at 1", "Insert PrimitiveType: byte(498) into ArrayType: byte[](500) at 0", "Insert Dimension(499) into ArrayType: byte[](500) at 1", "Insert SimpleName: bytes(501) into VariableDeclarationFragment(509) at 0", "Insert CastExpression(508) into VariableDeclarationFragment(509) at 1", "Insert SimpleName: evaluator(511) into InfixExpression: !=(513) at 0", "Insert NullLiteral(512) into InfixExpression: !=(513) at 1", "Insert ExpressionStatement(561) into Block(562) at 0", "Insert ExpressionStatement(584) into Block(585) at 0", "Insert SimpleName: GroovyContext(51) into SimpleType: GroovyContext(52) at 0", "Insert Assignment: =(107) into ExpressionStatement(108) at 0", "Insert ThisExpression(147) into FieldAccess(149) at 0", "Insert SimpleName: evaluator(148) into FieldAccess(149) at 1", "Insert ThisExpression(174) into FieldAccess(176) at 0", "Insert SimpleName: evaluator(175) into FieldAccess(176) at 1", "Insert ThisExpression(197) into FieldAccess(199) at 0", "Insert SimpleName: evaluator(198) into FieldAccess(199) at 1", "Insert ThisExpression(264) into FieldAccess(266) at 0", "Insert SimpleName: vars(265) into FieldAccess(266) at 1", "Insert ThisExpression(279) into FieldAccess(281) at 0", "Insert SimpleName: scriptBaseClass(280) into FieldAccess(281) at 1", "Insert SimpleName: scriptBaseClass(294) into ReturnStatement(295) at 0", "Insert SimpleName: getParent(298) into MethodInvocation(299) at 0", "Insert MethodInvocation(309) into ReturnStatement(310) at 0", "Insert ParameterizedType: Iterator<Map.Entry<String,Object>>(343) into VariableDeclarationStatement(352) at 0", "Insert VariableDeclarationFragment(351) into VariableDeclarationStatement(352) at 1", "Insert MethodInvocation(355) into WhileStatement(392) at 0", "Insert Block(391) into WhileStatement(392) at 1", "Insert SimpleName: closureErased(393) into IfStatement(400) at 0", "Insert Block(399) into IfStatement(400) at 1", "Insert ThisExpression(405) into FieldAccess(407) at 0", "Insert SimpleName: scriptBaseClass(406) into FieldAccess(407) at 1", "Insert ThisExpression(412) into FieldAccess(414) at 0", "Insert SimpleName: evaluator(413) into FieldAccess(414) at 1", "Insert ThisExpression(419) into FieldAccess(421) at 0", "Insert SimpleName: binding(420) into FieldAccess(421) at 1", "Insert SimpleType: ByteArrayOutputStream(428) into ClassInstanceCreation(429) at 0", "Insert SimpleType: ObjectOutputStream(433) into ClassInstanceCreation(435) at 0", "Insert SimpleName: bout(434) into ClassInstanceCreation(435) at 1", "Insert ThisExpression(437) into FieldAccess(439) at 0", "Insert SimpleName: vars(438) into FieldAccess(439) at 1", "Insert SimpleName: bout(444) into MethodInvocation(446) at 0", "Insert SimpleName: toByteArray(445) into MethodInvocation(446) at 1", "Insert ThisExpression(465) into FieldAccess(467) at 0", "Insert SimpleName: scriptBaseClass(466) into FieldAccess(467) at 1", "Insert SimpleType: String(469) into CastExpression(473) at 0", "Insert MethodInvocation(472) into CastExpression(473) at 1", "Insert ThisExpression(476) into FieldAccess(478) at 0", "Insert SimpleName: evaluator(477) into FieldAccess(478) at 1", "Insert SimpleType: GroovyEvaluator(480) into CastExpression(484) at 0", "Insert MethodInvocation(483) into CastExpression(484) at 1", "Insert ThisExpression(487) into FieldAccess(489) at 0", "Insert SimpleName: binding(488) into FieldAccess(489) at 1", "Insert SimpleType: GroovyContextBinding(491) into CastExpression(495) at 0", "Insert MethodInvocation(494) into CastExpression(495) at 1", "Insert ArrayType: byte[](504) into CastExpression(508) at 0", "Insert MethodInvocation(507) into CastExpression(508) at 1", "Insert Assignment: =(560) into ExpressionStatement(561) at 0", "Insert Assignment: =(583) into ExpressionStatement(584) at 0", "Insert SimpleName: binding(102) into Assignment: =(107) at 0", "Insert ClassInstanceCreation(106) into Assignment: =(107) at 1", "Insert ParenthesizedExpression(307) into MethodInvocation(309) at 0", "Insert SimpleName: getScriptBaseClass(308) into MethodInvocation(309) at 1", "Insert SimpleType: Iterator(335) into ParameterizedType: Iterator<Map.Entry<String,Object>>(343) at 0", "Insert ParameterizedType: Map.Entry<String,Object>(342) into ParameterizedType: Iterator<Map.Entry<String,Object>>(343) at 1", "Insert SimpleName: iterator(344) into VariableDeclarationFragment(351) at 0", "Insert MethodInvocation(350) into VariableDeclarationFragment(351) at 1", "Insert SimpleName: iterator(353) into MethodInvocation(355) at 0", "Insert SimpleName: hasNext(354) into MethodInvocation(355) at 1", "Insert VariableDeclarationStatement(368) into Block(391) at 0", "Insert IfStatement(390) into Block(391) at 1", "Insert ExpressionStatement(398) into Block(399) at 0", "Insert SimpleName: ByteArrayOutputStream(427) into SimpleType: ByteArrayOutputStream(428) at 0", "Insert SimpleName: ObjectOutputStream(432) into SimpleType: ObjectOutputStream(433) at 0", "Insert SimpleName: String(468) into SimpleType: String(469) at 0", "Insert SimpleName: in(470) into MethodInvocation(472) at 0", "Insert SimpleName: readObject(471) into MethodInvocation(472) at 1", "Insert SimpleName: GroovyEvaluator(479) into SimpleType: GroovyEvaluator(480) at 0", "Insert SimpleName: in(481) into MethodInvocation(483) at 0", "Insert SimpleName: readObject(482) into MethodInvocation(483) at 1", "Insert SimpleName: GroovyContextBinding(490) into SimpleType: GroovyContextBinding(491) at 0", "Insert SimpleName: in(492) into MethodInvocation(494) at 0", "Insert SimpleName: readObject(493) into MethodInvocation(494) at 1", "Insert PrimitiveType: byte(502) into ArrayType: byte[](504) at 0", "Insert Dimension(503) into ArrayType: byte[](504) at 1", "Insert SimpleName: in(505) into MethodInvocation(507) at 0", "Insert SimpleName: readObject(506) into MethodInvocation(507) at 1", "Insert FieldAccess(516) into Assignment: =(560) at 0", "Insert CastExpression(559) into Assignment: =(560) at 1", "Insert FieldAccess(565) into Assignment: =(583) at 0", "Insert CastExpression(582) into Assignment: =(583) at 1", "Insert SimpleType: GroovyContextBinding(104) into ClassInstanceCreation(106) at 0", "Insert ThisExpression(105) into ClassInstanceCreation(106) at 1", "Insert CastExpression(306) into ParenthesizedExpression(307) at 0", "Insert SimpleName: Iterator(334) into SimpleType: Iterator(335) at 0", "Insert SimpleType: Map.Entry(337) into ParameterizedType: Map.Entry<String,Object>(342) at 0", "Insert SimpleType: String(339) into ParameterizedType: Map.Entry<String,Object>(342) at 1", "Insert SimpleType: Object(341) into ParameterizedType: Map.Entry<String,Object>(342) at 2", "Insert MethodInvocation(348) into MethodInvocation(350) at 0", "Insert SimpleName: iterator(349) into MethodInvocation(350) at 1", "Insert ParameterizedType: Map.Entry<String,Object>(362) into VariableDeclarationStatement(368) at 0", "Insert VariableDeclarationFragment(367) into VariableDeclarationStatement(368) at 1", "Insert InfixExpression: &&(380) into IfStatement(390) at 0", "Insert Block(389) into IfStatement(390) at 1", "Insert MethodInvocation(397) into ExpressionStatement(398) at 0", "Insert ThisExpression(514) into FieldAccess(516) at 0", "Insert SimpleName: vars(515) into FieldAccess(516) at 1", "Insert ParameterizedType: Map<String,Object>(523) into CastExpression(559) at 0", "Insert MethodInvocation(558) into CastExpression(559) at 1", "Insert ThisExpression(563) into FieldAccess(565) at 0", "Insert SimpleName: vars(564) into FieldAccess(565) at 1", "Insert ParameterizedType: Map<String,Object>(572) into CastExpression(582) at 0", "Insert MethodInvocation(581) into CastExpression(582) at 1", "Insert SimpleName: GroovyContextBinding(103) into SimpleType: GroovyContextBinding(104) at 0", "Insert SimpleType: GroovyContext(303) into CastExpression(306) at 0", "Insert MethodInvocation(305) into CastExpression(306) at 1", "Insert QualifiedName: Map.Entry(336) into SimpleType: Map.Entry(337) at 0", "Insert SimpleName: String(338) into SimpleType: String(339) at 0", "Insert SimpleName: Object(340) into SimpleType: Object(341) at 0", "Insert MethodInvocation(346) into MethodInvocation(348) at 0", "Insert SimpleName: entrySet(347) into MethodInvocation(348) at 1", "Insert SimpleType: Map.Entry(357) into ParameterizedType: Map.Entry<String,Object>(362) at 0", "Insert SimpleType: String(359) into ParameterizedType: Map.Entry<String,Object>(362) at 1", "Insert SimpleType: Object(361) into ParameterizedType: Map.Entry<String,Object>(362) at 2", "Insert SimpleName: entry(363) into VariableDeclarationFragment(367) at 0", "Insert MethodInvocation(366) into VariableDeclarationFragment(367) at 1", "Insert InfixExpression: !=(373) into InfixExpression: &&(380) at 0", "Insert InstanceofExpression(379) into InfixExpression: &&(380) at 1", "Insert ExpressionStatement(384) into Block(389) at 0", "Insert ExpressionStatement(388) into Block(389) at 1", "Insert SimpleName: log(394) into MethodInvocation(397) at 0", "Insert SimpleName: warn(395) into MethodInvocation(397) at 1", "Insert StringLiteral: \"Encountered and removed Groovy Closure(s) in the GroovyContext during serialization: these are not supported for (de)serialization\"(396) into MethodInvocation(397) at 2", "Insert SimpleType: Map(518) into ParameterizedType: Map<String,Object>(523) at 0", "Insert SimpleType: String(520) into ParameterizedType: Map<String,Object>(523) at 1", "Insert SimpleType: Object(522) into ParameterizedType: Map<String,Object>(523) at 2", "Insert ClassInstanceCreation(556) into MethodInvocation(558) at 0", "Insert SimpleName: readObject(557) into MethodInvocation(558) at 1", "Insert SimpleType: Map(567) into ParameterizedType: Map<String,Object>(572) at 0", "Insert SimpleType: String(569) into ParameterizedType: Map<String,Object>(572) at 1", "Insert SimpleType: Object(571) into ParameterizedType: Map<String,Object>(572) at 2", "Insert ClassInstanceCreation(579) into MethodInvocation(581) at 0", "Insert SimpleName: readObject(580) into MethodInvocation(581) at 1", "Insert SimpleName: GroovyContext(302) into SimpleType: GroovyContext(303) at 0", "Insert SimpleName: getParent(304) into MethodInvocation(305) at 0", "Insert SimpleName: getVars(345) into MethodInvocation(346) at 0", "Insert QualifiedName: Map.Entry(356) into SimpleType: Map.Entry(357) at 0", "Insert SimpleName: String(358) into SimpleType: String(359) at 0", "Insert SimpleName: Object(360) into SimpleType: Object(361) at 0", "Insert SimpleName: iterator(364) into MethodInvocation(366) at 0", "Insert SimpleName: next(365) into MethodInvocation(366) at 1", "Insert MethodInvocation(371) into InfixExpression: !=(373) at 0", "Insert NullLiteral(372) into InfixExpression: !=(373) at 1", "Insert MethodInvocation(376) into InstanceofExpression(379) at 0", "Insert SimpleType: Closure(378) into InstanceofExpression(379) at 1", "Insert MethodInvocation(383) into ExpressionStatement(384) at 0", "Insert Assignment: =(387) into ExpressionStatement(388) at 0", "Insert SimpleName: Map(517) into SimpleType: Map(518) at 0", "Insert SimpleName: String(519) into SimpleType: String(520) at 0", "Insert SimpleName: Object(521) into SimpleType: Object(522) at 0", "Insert SimpleType: ObjectInputStream(525) into ClassInstanceCreation(556) at 0", "Insert ClassInstanceCreation(529) into ClassInstanceCreation(556) at 1", "Insert AnonymousClassDeclaration(555) into ClassInstanceCreation(556) at 2", "Insert SimpleName: Map(566) into SimpleType: Map(567) at 0", "Insert SimpleName: String(568) into SimpleType: String(569) at 0", "Insert SimpleName: Object(570) into SimpleType: Object(571) at 0", "Insert SimpleType: ObjectInputStream(574) into ClassInstanceCreation(579) at 0", "Insert ClassInstanceCreation(578) into ClassInstanceCreation(579) at 1", "Insert SimpleName: entry(369) into MethodInvocation(371) at 0", "Insert SimpleName: getValue(370) into MethodInvocation(371) at 1", "Insert SimpleName: entry(374) into MethodInvocation(376) at 0", "Insert SimpleName: getValue(375) into MethodInvocation(376) at 1", "Insert SimpleName: Closure(377) into SimpleType: Closure(378) at 0", "Insert SimpleName: iterator(381) into MethodInvocation(383) at 0", "Insert SimpleName: remove(382) into MethodInvocation(383) at 1", "Insert SimpleName: closureErased(385) into Assignment: =(387) at 0", "Insert BooleanLiteral: true(386) into Assignment: =(387) at 1", "Insert SimpleName: ObjectInputStream(524) into SimpleType: ObjectInputStream(525) at 0", "Insert SimpleType: ByteArrayInputStream(527) into ClassInstanceCreation(529) at 0", "Insert SimpleName: bytes(528) into ClassInstanceCreation(529) at 1", "Insert MethodDeclaration(554) into AnonymousClassDeclaration(555) at 0", "Insert SimpleName: ObjectInputStream(573) into SimpleType: ObjectInputStream(574) at 0", "Insert SimpleType: ByteArrayInputStream(576) into ClassInstanceCreation(578) at 0", "Insert SimpleName: bytes(577) into ClassInstanceCreation(578) at 1", "Insert SimpleName: ByteArrayInputStream(526) into SimpleType: ByteArrayInputStream(527) at 0", "Insert Modifier: protected(530) into MethodDeclaration(554) at 0", "Insert SimpleType: Class(532) into MethodDeclaration(554) at 1", "Insert SimpleName: resolveClass(533) into MethodDeclaration(554) at 2", "Insert SingleVariableDeclaration(537) into MethodDeclaration(554) at 3", "Insert SimpleType: IOException(539) into MethodDeclaration(554) at 4", "Insert SimpleType: ClassNotFoundException(541) into MethodDeclaration(554) at 5", "Insert Block(553) into MethodDeclaration(554) at 6", "Insert SimpleName: ByteArrayInputStream(575) into SimpleType: ByteArrayInputStream(576) at 0", "Insert SimpleName: Class(531) into SimpleType: Class(532) at 0", "Insert SimpleType: ObjectStreamClass(535) into SingleVariableDeclaration(537) at 0", "Insert SimpleName: osc(536) into SingleVariableDeclaration(537) at 1", "Insert SimpleName: IOException(538) into SimpleType: IOException(539) at 0", "Insert SimpleName: ClassNotFoundException(540) into SimpleType: ClassNotFoundException(541) at 0", "Insert ReturnStatement(552) into Block(553) at 0", "Insert SimpleName: ObjectStreamClass(534) into SimpleType: ObjectStreamClass(535) at 0", "Insert MethodInvocation(551) into ReturnStatement(552) at 0", "Insert SimpleName: Class(542) into MethodInvocation(551) at 0", "Insert SimpleName: forName(543) into MethodInvocation(551) at 1", "Insert MethodInvocation(546) into MethodInvocation(551) at 2", "Insert BooleanLiteral: true(547) into MethodInvocation(551) at 3", "Insert MethodInvocation(550) into MethodInvocation(551) at 4", "Insert SimpleName: osc(544) into MethodInvocation(546) at 0", "Insert SimpleName: getName(545) into MethodInvocation(546) at 1", "Insert SimpleName: evaluator(548) into MethodInvocation(550) at 0", "Insert SimpleName: getGroovyClassLoader(549) into MethodInvocation(550) at 1"]}}, {"GroovyEvaluator_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 4", "MOV ImportDeclaration to CompilationUnit at 7"]}, {"root": "UPDATE from groovy.lang.Binding to groovy.lang.Script", "operations": ["UPD QualifiedName: groovy.lang.Binding from groovy.lang.Binding to groovy.lang.Script"]}, {"root": "UPDATE from groovy.lang.GroovyShell to java.util.Collections", "operations": ["UPD QualifiedName: groovy.lang.GroovyShell from groovy.lang.GroovyShell to java.util.Collections"]}, {"root": "UPDATE from java.util.AbstractMap to java.util.HashMap", "operations": ["UPD QualifiedName: java.util.AbstractMap from java.util.AbstractMap to java.util.HashMap"]}, {"root": "UPDATE from java.util.HashSet to java.util.regex.Matcher", "operations": ["UPD QualifiedName: java.util.HashSet from java.util.HashSet to java.util.regex.Matcher"]}, {"root": "UPDATE from java.util.Set to java.util.regex.Pattern", "operations": ["UPD QualifiedName: java.util.Set from java.util.Set to java.util.regex.Pattern"]}, {"root": "UPDATE from org.codehaus.groovy.runtime.MethodClosure to org.apache.commons.scxml2.env.EffectiveContextMap", "operations": ["UPD QualifiedName: org.codehaus.groovy.runtime.MethodClosure from org.codehaus.groovy.runtime.MethodClosure to org.apache.commons.scxml2.env.EffectiveContextMap"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS Block to MethodDeclaration at 5", "INS SimpleName: script to MethodInvocation at 0", "INS SimpleType: GroovyExtendableScriptCache.ScriptPreProcessor to ClassInstanceCreation at 0", "INS InfixExpression: != to IfStatement at 0", "INS FieldDeclaration to AnonymousClassDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS NullLiteral to InfixExpression: != at 1", "INS IfStatement to Block at 4", "INS SimpleType: GroovyExtendableScriptCache.ScriptPreProcessor to FieldDeclaration at 3", "INS TextElement: Groovy operator aliases mapped to their underlying Groovy operator to TagElement at 0", "INS StringLiteral: \"not\" to MethodInvocation at 1", "INS SimpleName: script to ReturnStatement at 0", "INS SimpleName: put to MethodInvocation at 0", "INS StringLiteral: \">=\" to MethodInvocation at 2", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: put to MethodInvocation at 0", "INS SimpleName: Pattern to SimpleType: Pattern at 0", "INS StringLiteral: \"||\" to MethodInvocation at 2", "INS SimpleType: StringBuffer to ClassInstanceCreation at 0", "INS Modifier: final to FieldDeclaration at 2", "INS TagElement to Javadoc at 0", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \"or\" to MethodInvocation at 1", "INS StringLiteral: \"<=\" to MethodInvocation at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS Modifier: final to FieldDeclaration at 2", "INS StringLiteral: \"eq\" to MethodInvocation at 1", "INS StringLiteral: \"ne\" to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS ExpressionStatement to Block at 0", "INS SimpleName: put to MethodInvocation at 0", "INS SimpleName: put to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS StringLiteral: \"gt\" to MethodInvocation at 1", "INS Modifier: private to FieldDeclaration at 1", "INS ExpressionStatement to Block at 6", "INS Javadoc to FieldDeclaration at 0", "INS StringLiteral: \"> \" to MethodInvocation at 2", "INS SimpleType: HashMap to ParameterizedType: HashMap<String,String> at 0", "INS QualifiedName: GroovyExtendableScriptCache.ScriptPreProcessor to SimpleType: GroovyExtendableScriptCache.ScriptPreProcessor at 0", "INS StringLiteral: \"!=\" to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"lt\" to MethodInvocation at 1", "INS SimpleName: sb to InfixExpression: == at 0", "INS StringLiteral: \"ge\" to MethodInvocation at 1", "INS Modifier: final to FieldDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to WhileStatement at 0", "INS Modifier: private to FieldDeclaration at 0", "INS Block to WhileStatement at 1", "INS StringLiteral: \" ! \" to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: GROOVY_OPERATOR_ALIASES to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: appendTail to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: m to MethodInvocation at 0", "INS SimpleName: script to ReturnStatement at 0", "INS SimpleName: Pattern to MethodInvocation at 0", "INS Modifier: private to FieldDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ReturnStatement to Block at 5", "INS IfStatement to Block at 0", "INS SimpleName: m to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS ExpressionStatement to Block at 2", "INS ParameterizedType: Map<String,String> to FieldDeclaration at 3", "INS IfStatement to Block at 0", "INS StringLiteral: \"&& \" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: HashMap to SimpleType: HashMap at 0", "INS ReturnStatement to Block at 0", "INS Modifier: static to FieldDeclaration at 1", "INS StringLiteral: \"and\" to MethodInvocation at 1", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: length to MethodInvocation at 1", "INS StringLiteral: \"==\" to MethodInvocation at 2", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: sb to InfixExpression: != at 0", "INS MethodInvocation to MethodInvocation at 2", "INS InfixExpression: || to IfStatement at 0", "INS MethodInvocation to MethodInvocation at 3", "INS ExpressionStatement to Block at 4", "INS SimpleName: group to MethodInvocation at 1", "INS FieldDeclaration to AnonymousClassDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Collections to MethodInvocation at 0", "INS SimpleType: Map to ParameterizedType: Map<String,String> at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS QualifiedName: GroovyExtendableScriptCache.ScriptPreProcessor to SimpleType: GroovyExtendableScriptCache.ScriptPreProcessor at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS SimpleType: String to ParameterizedType: HashMap<String,String> at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: put to MethodInvocation at 0", "INS StringLiteral: \"le\" to MethodInvocation at 1", "INS StringLiteral: \"(?<=\\\\s)(and|or|not|eq|lt|le|ne|gt|ge)(?=\\\\s)\" to MethodInvocation at 2", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: compile to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS InfixExpression: == to InfixExpression: || at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 5", "INS SimpleName: sb to Assignment: = at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 8", "INS Initializer to AnonymousClassDeclaration at 0", "INS Block to Initializer at 0", "INS StringLiteral: \"< \" to MethodInvocation at 2", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS WhileStatement to Block at 3", "INS SimpleType: Pattern to FieldDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 7", "INS ParameterizedType: HashMap<String,String> to ClassInstanceCreation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: scriptPreProcessor to VariableDeclarationFragment at 0", "INS Javadoc to FieldDeclaration at 0", "INS SimpleType: String to ParameterizedType: Map<String,String> at 2", "INS ExpressionStatement to Block at 3"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 8", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 8", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: useInitialScriptAsBaseScript to VariableDeclarationFragment at 0", "INS PrimitiveType: boolean to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 9", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: scriptCache to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 9", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleType: GroovyExtendableScriptCache to FieldDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS Block to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS ConstructorInvocation to Block at 0", "INS BooleanLiteral: false to ConstructorInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS SimpleName: useInitialScriptAsBaseScript to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: useInitialScriptAsBaseScript to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: GroovyEvaluator to MethodDeclaration at 1", "INS SimpleName: scriptCache to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setScriptPreProcessor to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: scriptPreProcessor to MethodInvocation at 2", "INS SimpleName: setScriptBaseClass to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 0", "INS SimpleName: useInitialScriptAsBaseScript to FieldAccess at 1", "INS SimpleName: scriptCache to MethodInvocation at 0", "INS SimpleName: scriptCache to FieldAccess at 1", "INS ExpressionStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: getName to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS Block to MethodDeclaration at 3", "INS ThisExpression to FieldAccess at 0", "INS MethodInvocation to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: GroovySCXMLScript to TypeLiteral at 0", "INS FieldAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 2", "INS FieldAccess to Assignment: = at 0", "INS ClassInstanceCreation to Assignment: = at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS SimpleType: Script to MethodDeclaration at 2", "INS ReturnStatement to Block at 2", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS SimpleName: scriptBaseClassName to SingleVariableDeclaration at 1", "INS SimpleName: getScript to MethodDeclaration at 3", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: scriptSource to SingleVariableDeclaration at 1", "INS Modifier: protected to MethodDeclaration at 1", "INS Block to MethodDeclaration at 7", "INS StringLiteral: \"unchecked\" to SingleMemberAnnotation at 1", "INS SingleMemberAnnotation to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS SimpleName: script to ReturnStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS StringLiteral: \"unused\" to SingleMemberAnnotation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: clearCache to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: scriptCache to MethodInvocation at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SingleMemberAnnotation to MethodDeclaration at 0", "INS SimpleName: clearCache to MethodDeclaration at 3", "INS ExpressionStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 13"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS SimpleType: GroovyExtendableScriptCache.ScriptPreProcessor to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS SimpleName: scriptPreProcessor to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 0", "INS Block to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS SimpleName: getScriptPreProcessor to MethodDeclaration at 2", "INS QualifiedName: GroovyExtendableScriptCache.ScriptPreProcessor to SimpleType: GroovyExtendableScriptCache.ScriptPreProcessor at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: groovyCtx to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: eval to MethodDeclaration at 4", "INS SimpleName: expr to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS SimpleName: groovyCtx to VariableDeclarationFragment at 0", "INS ThisExpression to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: groovyCtx to MethodInvocation at 0", "INS NullLiteral to InfixExpression: == at 1", "INS Modifier: public to MethodDeclaration at 2", "INS SimpleName: getEffectiveContext to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 2", "INS MethodInvocation to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS SimpleName: getScript to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS IfStatement to Block at 3", "INS SimpleName: getGroovyEvaluator to MethodInvocation at 1", "INS SimpleName: groovyCtx to MethodInvocation at 1", "INS TryStatement to Block at 4", "INS Block to TryStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: groovyCtx to MethodInvocation at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: getScriptBaseClass to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: run to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS Block to MethodDeclaration at 8", "INS SimpleName: setGroovyEvaluator to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: groovyCtx to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to MethodInvocation at 1", "INS Block to MethodDeclaration at 8", "INS SimpleName: expr to MethodInvocation at 3", "INS SimpleName: groovyCtx to MethodInvocation at 0", "INS MethodInvocation to CastExpression at 1", "INS TryStatement to Block at 4", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS InfixExpression: == to IfStatement at 0", "INS Block to TryStatement at 0", "INS SimpleName: getGroovyEvaluator to MethodInvocation at 1", "INS CastExpression to ReturnStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: getScript to MethodInvocation at 0", "INS SimpleName: groovyCtx to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getEffectiveContext to MethodInvocation at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS IfStatement to Block at 3", "INS VariableDeclarationStatement to Block at 2", "INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: groovyCtx to VariableDeclarationFragment at 0", "INS SimpleName: getScriptBaseClass to MethodInvocation at 1", "INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: run to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: == at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 17", "operations": ["INS SimpleName: groovyCtx to MethodInvocation at 0", "INS IfStatement to Block at 3", "INS MethodDeclaration to TypeDeclaration: class at 17", "INS SimpleName: evalLocation to MethodDeclaration at 4", "INS SimpleName: getScript to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 2", "INS TryStatement to Block at 4", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getGroovyEvaluator to MethodInvocation at 1", "INS SimpleName: expr to MethodInvocation at 3", "INS ReturnStatement to Block at 2", "INS Block to MethodDeclaration at 8", "INS MethodInvocation to CastExpression at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS CastExpression to ReturnStatement at 0", "INS SimpleName: effective to MethodInvocation at 1", "INS SimpleName: run to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS InfixExpression: == to IfStatement at 0", "INS Block to TryStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS InfixExpression: == to InfixExpression: && at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to InfixExpression: && at 1", "INS InfixExpression: != to InfixExpression: && at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: getParent to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: scriptSource to InfixExpression: + at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS StringLiteral: \"evalScript('\" to InfixExpression: + at 0", "INS NullLiteral to InfixExpression: != at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS SimpleName: isInitialScript to VariableDeclarationFragment at 0", "INS SimpleName: scriptCache to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS InfixExpression: && to VariableDeclarationFragment at 1", "INS NullLiteral to InfixExpression: == at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: e to ClassInstanceCreation at 2", "INS SimpleName: isInitialScript to InfixExpression: && at 0", "INS IfStatement to Block at 3", "INS Block to MethodDeclaration at 8", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: result to ReturnStatement at 0", "INS IfStatement to Block at 0", "INS SimpleName: result to VariableDeclarationFragment at 0", "INS ThrowStatement to Block at 0", "INS Block to CatchClause at 1", "INS StringLiteral: \"'):\" to InfixExpression: + at 2", "INS ReturnStatement to Block at 6", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS SimpleName: useInitialScriptAsBaseScript to InfixExpression: && at 1", "INS Block to TryStatement at 0", "INS TryStatement to Block at 4", "INS InfixExpression: && to IfStatement at 0", "INS VariableDeclarationStatement to Block at 4", "INS SimpleName: getParent to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS InfixExpression: && to InfixExpression: && at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 0", "INS InfixExpression: == to IfStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS IfStatement to Block at 5", "INS SimpleName: scriptSource to InfixExpression: == at 0", "INS CatchClause to TryStatement at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS SimpleName: getGroovyClassLoader to MethodDeclaration at 2", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: ClassLoader to SimpleType: ClassLoader at 0", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS ReturnStatement to Block at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS Block to MethodDeclaration at 3", "INS SimpleType: ClassLoader to MethodDeclaration at 1"]}, {"root": "UPDATE from createGroovyShell to GroovyEvaluator", "operations": ["UPD SimpleName: createGroovyShell from createGroovyShell to GroovyEvaluator"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleName: createGroovyShell to MethodDeclaration at 1", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: SCXMLExpressionException to MethodDeclaration at 7", "MOV Javadoc to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SimpleType: Object to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SimpleType: Boolean to MethodDeclaration at 3", "MOV Modifier: public to MethodDeclaration at 1", "MOV SimpleName: evalCond to MethodDeclaration at 3", "MOV Javadoc to MethodDeclaration at 0", "MOV SimpleType: SCXMLExpressionException to MethodDeclaration at 7", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 2", "MOV SimpleName: EffectiveContextMap to MethodDeclaration at 4"]}, {"root": "UPDATE from EffectiveContextMap to evalCond", "operations": ["UPD SimpleName: EffectiveContextMap from EffectiveContextMap to evalCond"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SimpleType: SCXMLExpressionException to MethodDeclaration at 7", "MOV Javadoc to MethodDeclaration at 0", "MOV SimpleType: Node to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV MarkerAnnotation to MethodDeclaration at 1", "MOV Modifier: public to MethodDeclaration at 2", "MOV SimpleName: put to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SimpleType: SCXMLExpressionException to MethodDeclaration at 7", "MOV Javadoc to MethodDeclaration at 0", "MOV SimpleType: Object to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "UPDATE from put to evalScript", "operations": ["UPD SimpleName: put from put to evalScript"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "UPDATE from Evaluator implementation enabling use of Groovy expressions in to Evaluator implementation enabling use of Groovy expressions in SCXML documents.", "operations": ["UPD TextElement: Evaluator implementation enabling use of Groovy expressions in from Evaluator implementation enabling use of Groovy expressions in to Evaluator implementation enabling use of Groovy expressions in SCXML documents."]}, {"root": "UPDATE from Binding to GroovyExtendableScriptCache", "operations": ["UPD SimpleName: Binding from Binding to GroovyExtendableScriptCache", "UPD SimpleName: GroovyShell from GroovyShell to GroovyExtendableScriptCache", "UPD SimpleType: Binding from Binding to GroovyExtendableScriptCache"]}, {"root": "MOVE from SimpleType: GroovyExtendableScriptCache", "operations": ["MOV SimpleName: GroovyShell to SimpleType: GroovyExtendableScriptCache at 0"]}, {"root": "UPDATE from Context to Script", "operations": ["UPD SimpleType: Context from Context to Script", "UPD SimpleType: MethodClosure from MethodClosure to Script", "UPD SimpleName: Context from Context to Script", "UPD SimpleName: MethodClosure from MethodClosure to Script", "UPD SimpleName: MethodClosure from MethodClosure to Script"]}, {"root": "MOVE from SimpleType: Script", "operations": ["MOV SimpleName: MethodClosure to SimpleType: Script at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: String to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1", "MOV IfStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0", "MOV IfStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1", "MOV IfStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: String to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from key to scriptSource", "operations": ["UPD SimpleName: key from key to scriptSource"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2"]}, {"root": "UPDATE from GroovyShell to String", "operations": ["UPD SimpleName: GroovyShell from GroovyShell to String", "UPD SimpleName: MethodClosure from MethodClosure to String"]}, {"root": "MOVE from SimpleType: String", "operations": ["MOV SimpleName: MethodClosure to SimpleType: String at 0"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS ParenthesizedExpression to PrefixExpression: ! at 0", "INS PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: GroovyContext to VariableDeclarationStatement at 0"]}, {"root": "MOVE from TryStatement", "operations": ["MOV CatchClause to TryStatement at 1"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS ParenthesizedExpression to PrefixExpression: ! at 0", "INS PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: GroovyContext to VariableDeclarationStatement at 0"]}, {"root": "MOVE from TryStatement", "operations": ["MOV CatchClause to TryStatement at 1"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS ParenthesizedExpression to PrefixExpression: ! at 0", "INS PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: GroovyContext to VariableDeclarationStatement at 0"]}, {"root": "MOVE from TryStatement", "operations": ["MOV CatchClause to TryStatement at 1"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: == to InfixExpression: || at 0", "MOV Block to IfStatement at 1"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS PrefixExpression: ! to IfStatement at 0", "INS ParenthesizedExpression to PrefixExpression: ! at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: GroovyContext to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS SimpleName: script to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: script to VariableDeclarationFragment at 0"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: scriptSource to MethodInvocation at 3", "INS SimpleName: getScript to MethodInvocation at 1", "INS SimpleName: scriptCache to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: scriptBaseClassName to MethodInvocation at 2"]}, {"root": "INS SimpleName: script to MethodInvocation at 0", "operations": ["INS SimpleName: script to MethodInvocation at 0"]}, {"root": "UPDATE from binding to setBinding", "operations": ["UPD SimpleName: binding from binding to setBinding"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV CastExpression to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV CastExpression to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from getVars to groovyCtx", "operations": ["UPD SimpleName: getVars from getVars to groovyCtx", "UPD SimpleName: value from value to groovyCtx", "UPD SimpleName: current from current to groovyCtx", "UPD SimpleName: leaf from leaf to groovyCtx", "UPD SimpleName: current from current to groovyCtx", "UPD SimpleName: setLocal from setLocal to groovyCtx", "UPD SimpleName: leaf from leaf to groovyCtx"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV CastExpression to VariableDeclarationFragment at 1"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV NullLiteral to InfixExpression: == at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ReturnStatement to Block at 1", "MOV ExpressionStatement to Block at 1"]}, {"root": "INS SimpleName: groovyCtx to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: groovyCtx to VariableDeclarationFragment at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV CastExpression to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 3"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "UPDATE from current to scriptCache", "operations": ["UPD SimpleName: current from current to scriptCache"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getParent to MethodInvocation at 1", "MOV SimpleName: current to MethodInvocation at 0"]}, {"root": "UPDATE from getParent to getGroovyClassLoader", "operations": ["UPD SimpleName: getParent from getParent to getGroovyClassLoader"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: GroovyContext to ClassInstanceCreation at 0"]}, {"root": "INS ThisExpression to ClassInstanceCreation at 2", "operations": ["INS ThisExpression to ClassInstanceCreation at 2"]}, {"root": "INS ThisExpression to ClassInstanceCreation at 2", "operations": ["INS ThisExpression to ClassInstanceCreation at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 2"]}, {"root": "UPDATE from evalCond to preProcess", "operations": ["UPD SimpleName: evalCond from evalCond to preProcess"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Binding to ClassInstanceCreation at 0"]}, {"root": "UPDATE from setProperty to groovyContext", "operations": ["UPD SimpleName: setProperty from setProperty to groovyContext"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setProperty to MethodInvocation at 0", "MOV SimpleName: dataClosure to MethodInvocation at 1"]}, {"root": "UPDATE from dataClosure to getBinding", "operations": ["UPD SimpleName: dataClosure from dataClosure to getBinding"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV InstanceofExpression to ParenthesizedExpression at 0"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV InstanceofExpression to ParenthesizedExpression at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ThisExpression to MethodInvocation at 2", "INS SimpleName: setGroovyEvaluator to MethodInvocation at 1", "INS SimpleName: groovyCtx to MethodInvocation at 0"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV InstanceofExpression to ParenthesizedExpression at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ThisExpression to MethodInvocation at 2"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV InstanceofExpression to ParenthesizedExpression at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: has to MethodInvocation at 1", "MOV SimpleName: leaf to MethodInvocation at 0"]}, {"root": "UPDATE from has to getGroovyEvaluator", "operations": ["UPD SimpleName: has from has to getGroovyEvaluator"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Object to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0"]}, {"root": "UPDATE from groovyCtx to GROOVY_OPERATOR_ALIASES_PATTERN", "operations": ["UPD SimpleName: groovyCtx from groovyCtx to GROOVY_OPERATOR_ALIASES_PATTERN", "UPD SimpleName: createGroovyShell from createGroovyShell to GROOVY_OPERATOR_ALIASES_PATTERN"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: groovyCtx to VariableDeclarationFragment at 0"]}, {"root": "MOVE from ParameterizedType: Map<String,String>", "operations": ["MOV SimpleType: String to ParameterizedType: Map<String,String> at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 1"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: Boolean to CastExpression at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getVars to MethodInvocation at 0"]}, {"root": "UPDATE from entrySet to setGroovyEvaluator", "operations": ["UPD SimpleName: entrySet from entrySet to setGroovyEvaluator", "UPD SimpleName: set from set to setGroovyEvaluator"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: entrySet to MethodInvocation at 1"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: Node to CastExpression at 0"]}, {"root": "INS ThisExpression to MethodInvocation at 2", "operations": ["INS ThisExpression to MethodInvocation at 2"]}, {"root": "UPDATE from current to script", "operations": ["UPD SimpleName: current from current to script", "UPD SimpleName: current from current to script", "UPD SimpleName: current from current to script"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: getScript to MethodInvocation at 0", "INS SimpleName: getScriptBaseClass to MethodInvocation at 1", "INS SimpleName: effective to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: scriptSource to MethodInvocation at 3", "INS SimpleName: groovyCtx to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: groovyCtx to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: setScriptBaseClass to MethodInvocation at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "UPDATE from Constructor.  to Pattern for case-sensitive matching of the Groovy operator aliases, delimited by whitespace", "operations": ["UPD TextElement: Constructor.  from Constructor.  to Pattern for case-sensitive matching of the Groovy operator aliases, delimited by whitespace"]}, {"root": "UPDATE from GroovyContext to Map", "operations": ["UPD SimpleName: GroovyContext from GroovyContext to Map"]}, {"root": "MOVE from SimpleType: Map", "operations": ["MOV SimpleName: GroovyContext to SimpleType: Map at 0"]}, {"root": "UPDATE from getEffectiveContext to unmodifiableMap", "operations": ["UPD SimpleName: getEffectiveContext from getEffectiveContext to unmodifiableMap"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getEffectiveContext to MethodInvocation at 1"]}, {"root": "UPDATE from GroovyContext to StringBuffer", "operations": ["UPD SimpleType: GroovyContext from GroovyContext to StringBuffer", "UPD SimpleName: GroovyContext from GroovyContext to StringBuffer", "UPD SimpleName: GroovyShell from GroovyShell to StringBuffer"]}, {"root": "UPDATE from GroovyShell to Matcher", "operations": ["UPD SimpleName: GroovyShell from GroovyShell to Matcher", "UPD SimpleType: GroovyShell from GroovyShell to Matcher"]}, {"root": "UPDATE from GroovyBuiltin to GroovySCXMLScript", "operations": ["UPD SimpleName: GroovyBuiltin from GroovyBuiltin to GroovySCXMLScript"]}, {"root": "MOVE from SimpleType: GroovySCXMLScript", "operations": ["MOV SimpleName: GroovyBuiltin to SimpleType: GroovySCXMLScript at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getVars to MethodInvocation at 1", "MOV SimpleName: current to MethodInvocation at 0"]}, {"root": "UPDATE from getVars to run", "operations": ["UPD SimpleName: getVars from getVars to run"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: SCXMLExpressionException to ClassInstanceCreation at 0"]}, {"root": "UPDATE from effective to sb", "operations": ["UPD SimpleName: effective from effective to sb", "UPD SimpleName: effective from effective to sb", "UPD SimpleName: shell from shell to sb", "UPD SimpleName: createGroovyShell from createGroovyShell to sb"]}, {"root": "INS NullLiteral to VariableDeclarationFragment at 1", "operations": ["INS NullLiteral to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from shell to m", "operations": ["UPD SimpleName: shell from shell to m", "UPD SimpleName: expr from expr to m", "UPD SimpleName: shell from shell to m"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: shell to MethodInvocation at 0", "MOV SimpleName: evaluate to MethodInvocation at 1"]}, {"root": "UPDATE from evaluate to find", "operations": ["UPD SimpleName: evaluate from evaluate to find"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV MethodInvocation to InfixExpression: + at 3"]}, {"root": "MOVE from ParameterizedType: HashMap<String,String>", "operations": ["MOV SimpleType: String to ParameterizedType: HashMap<String,String> at 1"]}, {"root": "UPDATE from effective to matcher", "operations": ["UPD SimpleName: effective from effective to matcher"]}, {"root": "INS SimpleName: script to MethodInvocation at 2", "operations": ["INS SimpleName: script to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: current to MethodInvocation at 0", "MOV SimpleName: getParent to MethodInvocation at 1"]}, {"root": "UPDATE from getParent to getScriptBaseClass", "operations": ["UPD SimpleName: getParent from getParent to getScriptBaseClass"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: get to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from get to getName", "operations": ["UPD SimpleName: get from get to getName"]}, {"root": "MOVE from SimpleType: String", "operations": ["MOV SimpleName: GroovyShell to SimpleType: String at 0"]}, {"root": "UPDATE from createGroovyShell to appendReplacement", "operations": ["UPD SimpleName: createGroovyShell from createGroovyShell to appendReplacement"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: effective to MethodInvocation at 2", "MOV SimpleName: createGroovyShell to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: createGroovyShell to MethodInvocation at 2"]}, {"root": "UPDATE from evaluate to toString", "operations": ["UPD SimpleName: evaluate from evaluate to toString"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: key to MethodInvocation at 1", "MOV SimpleName: value to MethodInvocation at 0", "MOV SimpleName: setLocal to MethodInvocation at 0"]}, {"root": "UPDATE from key to getParent", "operations": ["UPD SimpleName: key from key to getParent"]}, {"root": "UPDATE from getVars to getClass", "operations": ["UPD SimpleName: getVars from getVars to getClass"]}, {"root": "UPDATE from shell to GROOVY_OPERATOR_ALIASES", "operations": ["UPD SimpleName: shell from shell to GROOVY_OPERATOR_ALIASES"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: evaluate to MethodInvocation at 1", "MOV SimpleName: expr to MethodInvocation at 0", "MOV SimpleName: shell to MethodInvocation at 0"]}, {"root": "UPDATE from evaluate to get", "operations": ["UPD SimpleName: evaluate from evaluate to get"]}, {"root": "UPDATE from expr to put", "operations": ["UPD SimpleName: expr from expr to put", "UPD SimpleName: createGroovyShell from createGroovyShell to put", "UPD SimpleName: shell from shell to put", "UPD SimpleName: evaluate from evaluate to put"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: createGroovyShell to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: shell to MethodInvocation at 0", "MOV SimpleName: evaluate to MethodInvocation at 0", "MOV SimpleName: expr to MethodInvocation at 0"]}, {"root": "MOVE from SimpleType: StringBuffer", "operations": ["MOV SimpleName: GroovyShell to SimpleType: StringBuffer at 0"]}, {"root": "DEL TextElement: SCXML documents.", "operations": ["DEL TextElement: SCXML documents."]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: groovyCtx", "DEL SimpleName: getEffectiveContext"]}, {"root": "DEL SimpleName: script", "operations": ["DEL SimpleName: script"]}, {"root": "DEL SimpleName: inClosure", "operations": ["DEL SimpleName: inClosure"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: builtin", "DEL SimpleType: MethodClosure", "DEL ClassInstanceCreation", "DEL SimpleName: MethodClosure", "DEL StringLiteral: \"In\""]}, {"root": "DEL StringLiteral: \"Data\"", "operations": ["DEL StringLiteral: \"Data\""]}, {"root": "DEL Block", "operations": ["DEL Assignment: =", "DEL Block", "DEL SimpleName: groovyCtx", "DEL ExpressionStatement"]}, {"root": "DEL Block", "operations": ["DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: groovyCtx", "DEL Block"]}, {"root": "DEL Assignment: =", "operations": ["DEL SimpleName: leaf", "DEL FieldAccess", "DEL ThisExpression", "DEL Assignment: =", "DEL SimpleName: ctx"]}, {"root": "DEL Block", "operations": ["DEL Assignment: =", "DEL Block", "DEL SimpleName: groovyCtx", "DEL ExpressionStatement"]}, {"root": "DEL SimpleType: Context", "operations": ["DEL SimpleType: Context", "DEL SimpleName: Context"]}, {"root": "DEL SimpleName: leaf", "operations": ["DEL SimpleName: leaf"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: entrySet", "DEL MethodInvocation", "DEL SimpleName: current", "DEL MethodInvocation", "DEL SimpleName: addAll", "DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: groovyCtx", "DEL ExpressionStatement", "DEL Assignment: =", "DEL Block"]}, {"root": "DEL SimpleName: old", "operations": ["DEL SimpleName: old"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: key", "DEL SimpleName: leaf", "DEL MethodInvocation", "DEL SimpleName: get"]}, {"root": "DEL SimpleName: key", "operations": ["DEL SimpleName: key"]}, {"root": "DEL SimpleName: value", "operations": ["DEL SimpleName: value"]}, {"root": "DEL SimpleName: leaf", "operations": ["DEL SimpleName: leaf"]}, {"root": "DEL ReturnStatement", "operations": ["DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: key"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SuperConstructorInvocation", "DEL SimpleName: GroovyEvaluator", "DEL MethodDeclaration", "DEL Javadoc", "DEL Block", "DEL Modifier: public"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: shell", "DEL TryStatement", "DEL SimpleName: effective", "DEL Block", "DEL SimpleType: GroovyContext", "DEL SimpleName: effective", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: eval", "DEL MethodInvocation", "DEL SimpleName: groovyCtx", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL SimpleType: GroovyShell", "DEL Modifier: public", "DEL VariableDeclarationFragment"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: expr", "DEL NullLiteral", "DEL ReturnStatement", "DEL CastExpression", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: groovyCtx", "DEL VariableDeclarationFragment", "DEL TryStatement", "DEL Block", "DEL MethodDeclaration", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: groovyCtx", "DEL NullLiteral", "DEL TryStatement", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleType: GroovyShell", "DEL Block", "DEL Block", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: shell", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: evalLocation", "DEL MethodInvocation", "DEL VariableDeclarationStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: GroovyShell", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL ThrowStatement", "DEL SimpleName: script", "DEL SimpleName: evalScript", "DEL SimpleName: effective", "DEL MethodDeclaration", "DEL InfixExpression: +", "DEL SimpleName: shell", "DEL Modifier: public", "DEL Block", "DEL IfStatement", "DEL CatchClause", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"'):\"", "DEL VariableDeclarationFragment", "DEL SimpleName: e", "DEL SimpleName: GroovyShell", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: groovyCtx", "DEL MethodInvocation", "DEL StringLiteral: \"evalScript('\"", "DEL TryStatement", "DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: builtin", "DEL ClassInstanceCreation", "DEL SimpleType: GroovyBuiltin", "DEL VariableDeclarationStatement", "DEL SimpleName: GroovyBinding", "DEL VariableDeclarationFragment", "DEL SimpleName: binding", "DEL SimpleName: Binding", "DEL ClassInstanceCreation", "DEL SimpleName: setProperty", "DEL SimpleName: groovyContext", "DEL TextElement: Create a GroovyShell instance.", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleType: GroovyBinding", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL SimpleName: builtin", "DEL SimpleName: GroovyShell", "DEL SimpleType: GroovyBinding", "DEL SimpleType: GroovyShell", "DEL SimpleName: shell", "DEL SimpleName: groovyContext", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: groovyBinding", "DEL SimpleName: GroovyShell", "DEL Block", "DEL SimpleName: binding", "DEL TagElement: @return", "DEL SimpleName: GroovyBuiltin", "DEL StringLiteral: \"Data\"", "DEL SimpleType: GroovyBuiltin", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"In\"", "DEL SimpleType: MethodClosure", "DEL VariableDeclarationFragment", "DEL SimpleName: binding", "DEL MethodDeclaration", "DEL TagElement", "DEL Javadoc", "DEL SimpleType: MethodClosure", "DEL VariableDeclarationStatement", "DEL SimpleType: GroovyShell", "DEL TagElement: @param", "DEL SimpleName: groovyBinding", "DEL ClassInstanceCreation", "DEL SimpleType: GroovyShell", "DEL SimpleType: Binding", "DEL SimpleName: shell", "DEL SimpleName: inClosure", "DEL SimpleName: dataClosure", "DEL VariableDeclarationStatement", "DEL SimpleName: GroovyBinding", "DEL Modifier: protected", "DEL SimpleName: context"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL ExpressionStatement", "DEL Modifier: private", "DEL Javadoc", "DEL SimpleName: entrySet", "DEL ExpressionStatement", "DEL SimpleName: value", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL IfStatement", "DEL ParameterizedType: Map.Entry<String,Object>", "DEL SimpleName: Object", "DEL TagElement", "DEL ParameterizedType: Set<Map.Entry<String,Object>>", "DEL SimpleName: Context", "DEL SimpleName: EffectiveContextMap", "DEL SimpleType: Map.Entry", "DEL ParameterizedType: Set<Map.Entry<String,Object>>", "DEL SimpleType: Object", "DEL Modifier: final", "DEL Block", "DEL SimpleName: Object", "DEL TextElement: . The effective context enables the chaining of", "DEL NullLiteral", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: AbstractMap", "DEL VariableDeclarationStatement", "DEL SimpleName: key", "DEL TagElement", "DEL TagElement: @inheritDoc", "DEL FieldDeclaration", "DEL TagElement: @link", "DEL SimpleName: current", "DEL Javadoc", "DEL Block", "DEL Modifier: public", "DEL SimpleType: Object", "DEL WhileStatement", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL SimpleType: Object", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: leaf", "DEL SimpleName: Set", "DEL Modifier: final", "DEL SimpleType: Set", "DEL SimpleName: Object", "DEL TagElement", "DEL Javadoc", "DEL MethodInvocation", "DEL TextElement: s all the way from the current state node to the root.", "DEL MethodDeclaration", "DEL TextElement: The ", "DEL TypeDeclaration: class", "DEL InfixExpression: !=", "DEL SimpleName: Object", "DEL TagElement: @inheritDoc", "DEL SimpleName: current", "DEL SimpleName: get", "DEL SimpleName: key", "DEL SimpleName: Set", "DEL SimpleName: ctx", "DEL SimpleType: GroovyContext", "DEL SimpleType: Object", "DEL SimpleName: GroovyEvaluator", "DEL SimpleName: leaf", "DEL SimpleType: Object", "DEL SimpleType: HashSet", "DEL SimpleName: Context", "DEL MethodInvocation", "DEL TextElement: Constructor. ", "DEL SimpleName: Context", "DEL SimpleType: Object", "DEL TagElement", "DEL ExpressionStatement", "DEL Block", "DEL TagElement", "DEL SimpleName: entrySet", "DEL SimpleType: Map.Entry", "DEL Modifier: final", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL TextElement:  for the current state. ", "DEL SimpleName: entrySet", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL Block", "DEL SimpleType: Map.Entry", "DEL SimpleName: containsKey", "DEL QualifiedName: Map.Entry", "DEL WhileStatement", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL IfStatement", "DEL Modifier: private", "DEL ParameterizedType: AbstractMap<String,Object>", "DEL NullLiteral", "DEL SimpleName: key", "DEL SimpleName: current", "DEL SimpleName: HashSet", "DEL SimpleType: AbstractMap", "DEL SimpleName: GroovyContext", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SuperConstructorInvocation", "DEL MethodInvocation", "DEL ParameterizedType: Map.Entry<String,Object>", "DEL QualifiedName: Map.Entry", "DEL SimpleType: Object", "DEL Assignment: =", "DEL Block", "DEL TagElement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL ReturnStatement", "DEL SimpleType: Context", "DEL Modifier: final", "DEL ReturnStatement", "DEL QualifiedName: Map.Entry", "DEL SimpleType: Set", "DEL TextElement: The map that will back the effective context for the", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL ParameterizedType: Map.Entry<String,Object>", "DEL Block", "DEL TagElement: @link", "DEL Javadoc", "DEL SimpleName: old", "DEL SimpleName: current", "DEL TagElement: @link", "DEL Assignment: =", "DEL ParameterizedType: HashSet<Map.Entry<String,Object>>"]}]}}, {"GroovyEvaluator_diff": {"operations": ["Move ImportDeclaration(5) into CompilationUnit(943) at 4", "Move ImportDeclaration(11) into CompilationUnit(943) at 7", "Update QualifiedName: groovy.lang.Binding(2) to groovy.lang.Script", "Update QualifiedName: groovy.lang.GroovyShell(4) to java.util.Collections", "Update QualifiedName: java.util.AbstractMap(8) to java.util.HashMap", "Update QualifiedName: java.util.Set(14) to java.util.regex.Pattern", "Update QualifiedName: org.codehaus.groovy.runtime.MethodClosure(22) to org.apache.commons.scxml2.env.EffectiveContextMap", "Insert FieldDeclaration(246) into TypeDeclaration: class(942) at 7", "Insert FieldDeclaration(252) into TypeDeclaration: class(942) at 8", "Insert FieldDeclaration(259) into TypeDeclaration: class(942) at 9", "Insert MethodDeclaration(265) into TypeDeclaration: class(942) at 10", "Insert MethodDeclaration(300) into TypeDeclaration: class(942) at 11", "Insert MethodDeclaration(340) into TypeDeclaration: class(942) at 12", "Insert MethodDeclaration(352) into TypeDeclaration: class(942) at 13", "Insert MethodDeclaration(360) into TypeDeclaration: class(942) at 14", "Insert MethodDeclaration(477) into TypeDeclaration: class(942) at 15", "Insert MethodDeclaration(584) into TypeDeclaration: class(942) at 16", "Insert MethodDeclaration(703) into TypeDeclaration: class(942) at 17", "Insert MethodDeclaration(866) into TypeDeclaration: class(942) at 18", "Insert MethodDeclaration(876) into TypeDeclaration: class(942) at 19", "Insert Modifier: private(63) into FieldDeclaration(246) at 0", "Insert Modifier: static(64) into FieldDeclaration(246) at 1", "Insert Modifier: final(65) into FieldDeclaration(246) at 2", "Insert SimpleType: GroovyExtendableScriptCache.ScriptPreProcessor(67) into FieldDeclaration(246) at 3", "Insert VariableDeclarationFragment(245) into FieldDeclaration(246) at 4", "Insert Modifier: private(247) into FieldDeclaration(252) at 0", "Insert Modifier: final(248) into FieldDeclaration(252) at 1", "Insert PrimitiveType: boolean(249) into FieldDeclaration(252) at 2", "Insert VariableDeclarationFragment(251) into FieldDeclaration(252) at 3", "Insert Modifier: private(253) into FieldDeclaration(259) at 0", "Insert Modifier: final(254) into FieldDeclaration(259) at 1", "Insert SimpleType: GroovyExtendableScriptCache(256) into FieldDeclaration(259) at 2", "Insert VariableDeclarationFragment(258) into FieldDeclaration(259) at 3", "Insert Modifier: public(260) into MethodDeclaration(265) at 0", "Update SimpleName: createGroovyShell(553) to GroovyEvaluator", "Move SimpleName: createGroovyShell(553) into MethodDeclaration(265) at 1", "Insert Block(264) into MethodDeclaration(265) at 2", "Insert Modifier: public(266) into MethodDeclaration(300) at 0", "Insert SimpleName: GroovyEvaluator(267) into MethodDeclaration(300) at 1", "Insert SingleVariableDeclaration(270) into MethodDeclaration(300) at 2", "Insert Block(299) into MethodDeclaration(300) at 3", "Insert SingleMemberAnnotation(303) into MethodDeclaration(340) at 0", "Insert Modifier: protected(304) into MethodDeclaration(340) at 1", "Insert SimpleType: Script(306) into MethodDeclaration(340) at 2", "Insert SimpleName: getScript(307) into MethodDeclaration(340) at 3", "Move SingleVariableDeclaration(557) into MethodDeclaration(340) at 4", "Insert SingleVariableDeclaration(315) into MethodDeclaration(340) at 5", "Insert SingleVariableDeclaration(319) into MethodDeclaration(340) at 6", "Insert Block(339) into MethodDeclaration(340) at 7", "Insert SingleMemberAnnotation(343) into MethodDeclaration(352) at 0", "Insert Modifier: public(344) into MethodDeclaration(352) at 1", "Insert PrimitiveType: void(345) into MethodDeclaration(352) at 2", "Insert SimpleName: clearCache(346) into MethodDeclaration(352) at 3", "Insert Block(351) into MethodDeclaration(352) at 4", "Insert Modifier: public(353) into MethodDeclaration(360) at 0", "Insert SimpleType: GroovyExtendableScriptCache.ScriptPreProcessor(355) into MethodDeclaration(360) at 1", "Insert SimpleName: getScriptPreProcessor(356) into MethodDeclaration(360) at 2", "Insert Block(359) into MethodDeclaration(360) at 3", "Move Javadoc(95) into MethodDeclaration(477) at 0", "Insert MarkerAnnotation(386) into MethodDeclaration(477) at 1", "Insert Modifier: public(387) into MethodDeclaration(477) at 2", "Move SimpleType: Object(98) into MethodDeclaration(477) at 3", "Insert SimpleName: eval(390) into MethodDeclaration(477) at 4", "Move SingleVariableDeclaration(104) into MethodDeclaration(477) at 5", "Move SingleVariableDeclaration(109) into MethodDeclaration(477) at 6", "Move SimpleType: SCXMLExpressionException(111) into MethodDeclaration(477) at 7", "Insert Block(476) into MethodDeclaration(477) at 8", "Move Javadoc(198) into MethodDeclaration(584) at 0", "Insert MarkerAnnotation(490) into MethodDeclaration(584) at 1", "Move Modifier: public(696) into MethodDeclaration(584) at 2", "Move SimpleType: Boolean(201) into MethodDeclaration(584) at 3", "Update SimpleName: EffectiveContextMap(697) to evalCond", "Move SimpleName: EffectiveContextMap(697) into MethodDeclaration(584) at 4", "Move SingleVariableDeclaration(207) into MethodDeclaration(584) at 5", "Move SingleVariableDeclaration(212) into MethodDeclaration(584) at 6", "Move SimpleType: SCXMLExpressionException(214) into MethodDeclaration(584) at 7", "Insert Block(583) into MethodDeclaration(584) at 8", "Move Javadoc(304) into MethodDeclaration(703) at 0", "Move MarkerAnnotation(787) into MethodDeclaration(703) at 1", "Insert Modifier: public(598) into MethodDeclaration(703) at 2", "Move SimpleType: Node(307) into MethodDeclaration(703) at 3", "Insert SimpleName: evalLocation(601) into MethodDeclaration(703) at 4", "Move SingleVariableDeclaration(313) into MethodDeclaration(703) at 5", "Move SingleVariableDeclaration(318) into MethodDeclaration(703) at 6", "Move SimpleType: SCXMLExpressionException(320) into MethodDeclaration(703) at 7", "Insert Block(702) into MethodDeclaration(703) at 8", "Move Javadoc(415) into MethodDeclaration(866) at 0", "Move MarkerAnnotation(716) into MethodDeclaration(866) at 1", "Move Modifier: public(788) into MethodDeclaration(866) at 2", "Move SimpleType: Object(418) into MethodDeclaration(866) at 3", "Update SimpleName: put(791) to evalScript", "Move SimpleName: put(791) into MethodDeclaration(866) at 4", "Move SingleVariableDeclaration(424) into MethodDeclaration(866) at 5", "Move SingleVariableDeclaration(796) into MethodDeclaration(866) at 6", "Move SimpleType: SCXMLExpressionException(431) into MethodDeclaration(866) at 7", "Insert Block(865) into MethodDeclaration(866) at 8", "Insert Modifier: protected(867) into MethodDeclaration(876) at 0", "Insert SimpleType: ClassLoader(869) into MethodDeclaration(876) at 1", "Insert SimpleName: getGroovyClassLoader(870) into MethodDeclaration(876) at 2", "Insert Block(875) into MethodDeclaration(876) at 3", "Move MarkerAnnotation(838) into MethodDeclaration(910) at 1", "Update TextElement: Evaluator implementation enabling use of Groovy expressions in(26) to Evaluator implementation enabling use of Groovy expressions in SCXML documents.", "Insert QualifiedName: GroovyExtendableScriptCache.ScriptPreProcessor(66) into SimpleType: GroovyExtendableScriptCache.ScriptPreProcessor(67) at 0", "Insert SimpleName: scriptPreProcessor(68) into VariableDeclarationFragment(245) at 0", "Insert ClassInstanceCreation(244) into VariableDeclarationFragment(245) at 1", "Insert SimpleName: useInitialScriptAsBaseScript(250) into VariableDeclarationFragment(251) at 0", "Update SimpleName: GroovyShell(551) to GroovyExtendableScriptCache", "Move SimpleName: GroovyShell(551) into SimpleType: GroovyExtendableScriptCache(256) at 0", "Insert SimpleName: scriptCache(257) into VariableDeclarationFragment(258) at 0", "Insert ConstructorInvocation(263) into Block(264) at 0", "Insert PrimitiveType: boolean(268) into SingleVariableDeclaration(270) at 0", "Insert SimpleName: useInitialScriptAsBaseScript(269) into SingleVariableDeclaration(270) at 1", "Insert ExpressionStatement(276) into Block(299) at 0", "Insert ExpressionStatement(284) into Block(299) at 1", "Insert ExpressionStatement(289) into Block(299) at 2", "Insert ExpressionStatement(298) into Block(299) at 3", "Insert SimpleName: SuppressWarnings(301) into SingleMemberAnnotation(303) at 0", "Insert StringLiteral: \"unchecked\"(302) into SingleMemberAnnotation(303) at 1", "Update SimpleName: MethodClosure(575) to Script", "Move SimpleName: MethodClosure(575) into SimpleType: Script(306) at 0", "Insert SimpleType: String(313) into SingleVariableDeclaration(315) at 0", "Insert SimpleName: scriptBaseClassName(314) into SingleVariableDeclaration(315) at 1", "Move SimpleType: String(794) into SingleVariableDeclaration(319) at 0", "Insert SimpleName: scriptSource(318) into SingleVariableDeclaration(319) at 1", "Move VariableDeclarationStatement(594) into Block(339) at 0", "Move ExpressionStatement(600) into Block(339) at 1", "Insert ReturnStatement(338) into Block(339) at 2", "Insert SimpleName: SuppressWarnings(341) into SingleMemberAnnotation(343) at 0", "Insert StringLiteral: \"unused\"(342) into SingleMemberAnnotation(343) at 1", "Insert ExpressionStatement(350) into Block(351) at 0", "Insert QualifiedName: GroovyExtendableScriptCache.ScriptPreProcessor(354) into SimpleType: GroovyExtendableScriptCache.ScriptPreProcessor(355) at 0", "Insert ReturnStatement(358) into Block(359) at 0", "Insert SimpleName: Override(385) into MarkerAnnotation(386) at 0", "Move IfStatement(118) into Block(476) at 0", "Move IfStatement(463) into Block(476) at 1", "Insert VariableDeclarationStatement(431) into Block(476) at 2", "Insert IfStatement(443) into Block(476) at 3", "Insert TryStatement(475) into Block(476) at 4", "Insert SimpleName: Override(489) into MarkerAnnotation(490) at 0", "Move IfStatement(221) into Block(583) at 0", "Move IfStatement(352) into Block(583) at 1", "Insert VariableDeclarationStatement(535) into Block(583) at 2", "Insert IfStatement(547) into Block(583) at 3", "Insert TryStatement(582) into Block(583) at 4", "Move IfStatement(327) into Block(702) at 0", "Move IfStatement(246) into Block(702) at 1", "Move VariableDeclarationStatement(758) into Block(702) at 2", "Insert IfStatement(654) into Block(702) at 3", "Insert TryStatement(701) into Block(702) at 4", "Move SimpleType: String(723) into SingleVariableDeclaration(730) at 1", "Update SimpleName: key(795) to scriptSource", "Insert IfStatement(739) into Block(865) at 0", "Move IfStatement(143) into Block(865) at 1", "Move VariableDeclarationStatement(810) into Block(865) at 2", "Insert IfStatement(773) into Block(865) at 3", "Insert TryStatement(864) into Block(865) at 4", "Insert SimpleName: ClassLoader(868) into SimpleType: ClassLoader(869) at 0", "Insert ReturnStatement(874) into Block(875) at 0", "Insert SimpleType: GroovyExtendableScriptCache.ScriptPreProcessor(70) into ClassInstanceCreation(244) at 0", "Insert AnonymousClassDeclaration(243) into ClassInstanceCreation(244) at 1", "Insert BooleanLiteral: false(262) into ConstructorInvocation(263) at 0", "Insert Assignment: =(275) into ExpressionStatement(276) at 0", "Insert Assignment: =(283) into ExpressionStatement(284) at 0", "Insert MethodInvocation(288) into ExpressionStatement(289) at 0", "Insert MethodInvocation(297) into ExpressionStatement(298) at 0", "Update SimpleName: MethodClosure(578) to String", "Move SimpleName: MethodClosure(578) into SimpleType: String(313) at 0", "Update SimpleType: MethodClosure(586) to Script", "Insert SimpleName: script(337) into ReturnStatement(338) at 0", "Insert MethodInvocation(349) into ExpressionStatement(350) at 0", "Insert SimpleName: scriptPreProcessor(357) into ReturnStatement(358) at 0", "Insert PrefixExpression: !(415) into IfStatement(422) at 0", "Move SimpleType: GroovyContext(440) into VariableDeclarationStatement(431) at 0", "Insert VariableDeclarationFragment(430) into VariableDeclarationStatement(431) at 1", "Insert InfixExpression: ==(436) into IfStatement(443) at 0", "Insert Block(442) into IfStatement(443) at 1", "Insert Block(456) into TryStatement(475) at 0", "Move CatchClause(184) into TryStatement(475) at 1", "Insert PrefixExpression: !(519) into IfStatement(526) at 0", "Move SimpleType: GroovyContext(538) into VariableDeclarationStatement(535) at 0", "Insert VariableDeclarationFragment(534) into VariableDeclarationStatement(535) at 1", "Insert InfixExpression: ==(540) into IfStatement(547) at 0", "Insert Block(546) into IfStatement(547) at 1", "Insert Block(563) into TryStatement(582) at 0", "Move CatchClause(290) into TryStatement(582) at 1", "Insert PrefixExpression: !(626) into IfStatement(633) at 0", "Move SimpleType: GroovyContext(329) into VariableDeclarationStatement(642) at 0", "Insert InfixExpression: ==(647) into IfStatement(654) at 0", "Insert Block(653) into IfStatement(654) at 1", "Insert Block(682) into TryStatement(701) at 0", "Move CatchClause(401) into TryStatement(701) at 1", "Insert InfixExpression: ==(735) into IfStatement(739) at 0", "Move Block(437) into IfStatement(739) at 1", "Insert PrefixExpression: !(745) into IfStatement(752) at 0", "Move SimpleType: GroovyContext(223) into VariableDeclarationStatement(761) at 0", "Insert InfixExpression: ==(766) into IfStatement(773) at 0", "Move Block(821) into IfStatement(773) at 1", "Insert Block(845) into TryStatement(864) at 0", "Insert CatchClause(863) into TryStatement(864) at 1", "Insert MethodInvocation(873) into ReturnStatement(874) at 0", "Insert QualifiedName: GroovyExtendableScriptCache.ScriptPreProcessor(69) into SimpleType: GroovyExtendableScriptCache.ScriptPreProcessor(70) at 0", "Insert FieldDeclaration(84) into AnonymousClassDeclaration(243) at 0", "Insert FieldDeclaration(158) into AnonymousClassDeclaration(243) at 1", "Insert MethodDeclaration(242) into AnonymousClassDeclaration(243) at 2", "Insert FieldAccess(273) into Assignment: =(275) at 0", "Insert SimpleName: useInitialScriptAsBaseScript(274) into Assignment: =(275) at 1", "Insert FieldAccess(279) into Assignment: =(283) at 0", "Insert ClassInstanceCreation(282) into Assignment: =(283) at 1", "Insert SimpleName: scriptCache(285) into MethodInvocation(288) at 0", "Insert SimpleName: setScriptPreProcessor(286) into MethodInvocation(288) at 1", "Insert SimpleName: scriptPreProcessor(287) into MethodInvocation(288) at 2", "Insert SimpleName: scriptCache(290) into MethodInvocation(297) at 0", "Insert SimpleName: setScriptBaseClass(291) into MethodInvocation(297) at 1", "Insert MethodInvocation(296) into MethodInvocation(297) at 2", "Update SimpleName: MethodClosure(585) to Script", "Insert SimpleName: script(322) into VariableDeclarationFragment(328) at 0", "Insert MethodInvocation(327) into VariableDeclarationFragment(328) at 1", "Insert SimpleName: script(330) into MethodInvocation(335) at 0", "Update SimpleName: binding(595) to setBinding", "Insert MethodInvocation(334) into MethodInvocation(335) at 2", "Insert SimpleName: scriptCache(347) into MethodInvocation(349) at 0", "Insert SimpleName: clearCache(348) into MethodInvocation(349) at 1", "Insert ParenthesizedExpression(414) into PrefixExpression: !(415) at 0", "Insert SimpleName: groovyCtx(425) into VariableDeclarationFragment(430) at 0", "Move CastExpression(453) into VariableDeclarationFragment(430) at 1", "Insert MethodInvocation(434) into InfixExpression: ==(436) at 0", "Insert NullLiteral(435) into InfixExpression: ==(436) at 1", "Insert ExpressionStatement(441) into Block(442) at 0", "Insert ReturnStatement(455) into Block(456) at 0", "Insert ParenthesizedExpression(518) into PrefixExpression: !(519) at 0", "Insert SimpleName: groovyCtx(529) into VariableDeclarationFragment(534) at 0", "Move CastExpression(342) into VariableDeclarationFragment(534) at 1", "Insert MethodInvocation(538) into InfixExpression: ==(540) at 0", "Insert NullLiteral(539) into InfixExpression: ==(540) at 1", "Move ExpressionStatement(709) into Block(546) at 0", "Insert ReturnStatement(562) into Block(563) at 0", "Insert ParenthesizedExpression(625) into PrefixExpression: !(626) at 0", "Update SimpleName: current(755) to groovyCtx", "Move CastExpression(236) into VariableDeclarationFragment(641) at 1", "Insert MethodInvocation(645) into InfixExpression: ==(647) at 0", "Move NullLiteral(760) into InfixExpression: ==(647) at 1", "Move ExpressionStatement(770) into Block(653) at 0", "Move VariableDeclarationStatement(472) into Block(682) at 0", "Move ExpressionStatement(477) into Block(682) at 1", "Insert ReturnStatement(681) into Block(682) at 2", "Insert SimpleName: scriptSource(733) into InfixExpression: ==(735) at 0", "Insert NullLiteral(734) into InfixExpression: ==(735) at 1", "Insert ParenthesizedExpression(744) into PrefixExpression: !(745) at 0", "Insert SimpleName: groovyCtx(755) into VariableDeclarationFragment(760) at 0", "Move CastExpression(133) into VariableDeclarationFragment(760) at 1", "Insert MethodInvocation(764) into InfixExpression: ==(766) at 0", "Insert NullLiteral(765) into InfixExpression: ==(766) at 1", "Move VariableDeclarationStatement(361) into Block(845) at 0", "Move ExpressionStatement(366) into Block(845) at 1", "Insert VariableDeclarationStatement(808) into Block(845) at 2", "Move VariableDeclarationStatement(853) into Block(845) at 3", "Insert VariableDeclarationStatement(828) into Block(845) at 4", "Insert IfStatement(842) into Block(845) at 5", "Insert ReturnStatement(844) into Block(845) at 6", "Move SingleVariableDeclaration(495) into CatchClause(863) at 0", "Insert Block(862) into CatchClause(863) at 1", "Update SimpleName: current(873) to scriptCache", "Move SimpleName: current(873) into MethodInvocation(873) at 0", "Update SimpleName: getParent(874) to getGroovyClassLoader", "Move SimpleName: getParent(874) into MethodInvocation(873) at 1", "Move SimpleType: GroovyContext(120) into ClassInstanceCreation(907) at 0", "Insert ThisExpression(906) into ClassInstanceCreation(907) at 2", "Insert ThisExpression(937) into ClassInstanceCreation(938) at 2", "Insert Javadoc(73) into FieldDeclaration(84) at 0", "Insert Modifier: private(74) into FieldDeclaration(84) at 1", "Insert Modifier: final(75) into FieldDeclaration(84) at 2", "Insert SimpleType: Pattern(77) into FieldDeclaration(84) at 3", "Insert VariableDeclarationFragment(83) into FieldDeclaration(84) at 4", "Insert Javadoc(87) into FieldDeclaration(158) at 0", "Insert Modifier: private(88) into FieldDeclaration(158) at 1", "Insert Modifier: final(89) into FieldDeclaration(158) at 2", "Insert ParameterizedType: Map<String,String>(96) into FieldDeclaration(158) at 3", "Insert VariableDeclarationFragment(157) into FieldDeclaration(158) at 4", "Insert MarkerAnnotation(160) into MethodDeclaration(242) at 0", "Move Modifier: public(199) into MethodDeclaration(242) at 1", "Move SimpleType: String(745) into MethodDeclaration(242) at 2", "Update SimpleName: evalCond(202) to preProcess", "Move SimpleName: evalCond(202) into MethodDeclaration(242) at 3", "Move SingleVariableDeclaration(429) into MethodDeclaration(242) at 4", "Insert Block(241) into MethodDeclaration(242) at 5", "Insert ThisExpression(271) into FieldAccess(273) at 0", "Insert SimpleName: useInitialScriptAsBaseScript(272) into FieldAccess(273) at 1", "Insert ThisExpression(277) into FieldAccess(279) at 0", "Insert SimpleName: scriptCache(278) into FieldAccess(279) at 1", "Update SimpleType: Binding(562) to GroovyExtendableScriptCache", "Move SimpleType: Binding(562) into ClassInstanceCreation(282) at 0", "Insert TypeLiteral(294) into MethodInvocation(296) at 0", "Insert SimpleName: getName(295) into MethodInvocation(296) at 1", "Insert SimpleName: scriptCache(323) into MethodInvocation(327) at 0", "Insert SimpleName: getScript(324) into MethodInvocation(327) at 1", "Insert SimpleName: scriptBaseClassName(325) into MethodInvocation(327) at 2", "Insert SimpleName: scriptSource(326) into MethodInvocation(327) at 3", "Update SimpleName: setProperty(596) to groovyContext", "Move SimpleName: setProperty(596) into MethodInvocation(334) at 0", "Update SimpleName: dataClosure(598) to getBinding", "Move SimpleName: dataClosure(598) into MethodInvocation(334) at 1", "Move InstanceofExpression(448) into ParenthesizedExpression(414) at 0", "Insert SimpleName: groovyCtx(432) into MethodInvocation(434) at 0", "Insert SimpleName: getGroovyEvaluator(433) into MethodInvocation(434) at 1", "Insert MethodInvocation(440) into ExpressionStatement(441) at 0", "Insert MethodInvocation(454) into ReturnStatement(455) at 0", "Move InstanceofExpression(337) into ParenthesizedExpression(518) at 0", "Insert SimpleName: groovyCtx(536) into MethodInvocation(538) at 0", "Insert SimpleName: getGroovyEvaluator(537) into MethodInvocation(538) at 1", "Insert MethodInvocation(544) into ExpressionStatement(545) at 0", "Insert CastExpression(561) into ReturnStatement(562) at 0", "Move InstanceofExpression(231) into ParenthesizedExpression(625) at 0", "Insert SimpleName: groovyCtx(643) into MethodInvocation(645) at 0", "Insert SimpleName: getGroovyEvaluator(644) into MethodInvocation(645) at 1", "Insert MethodInvocation(651) into ExpressionStatement(652) at 0", "Insert CastExpression(680) into ReturnStatement(681) at 0", "Move InstanceofExpression(128) into ParenthesizedExpression(744) at 0", "Update SimpleName: leaf(811) to groovyCtx", "Move SimpleName: leaf(811) into MethodInvocation(764) at 0", "Update SimpleName: has(812) to getGroovyEvaluator", "Move SimpleName: has(812) into MethodInvocation(764) at 1", "Insert PrimitiveType: boolean(788) into VariableDeclarationStatement(808) at 0", "Insert VariableDeclarationFragment(807) into VariableDeclarationStatement(808) at 1", "Update SimpleType: Context(849) to Script", "Move SimpleType: Object(803) into VariableDeclarationStatement(828) at 0", "Insert VariableDeclarationFragment(827) into VariableDeclarationStatement(828) at 1", "Insert InfixExpression: &&(831) into IfStatement(842) at 0", "Move Block(870) into IfStatement(842) at 1", "Insert SimpleName: result(843) into ReturnStatement(844) at 0", "Insert ThrowStatement(861) into Block(862) at 0", "Move TagElement(65) into Javadoc(73) at 0", "Insert SimpleName: Pattern(76) into SimpleType: Pattern(77) at 0", "Update SimpleName: groovyCtx(121) to GROOVY_OPERATOR_ALIASES_PATTERN", "Move SimpleName: groovyCtx(121) into VariableDeclarationFragment(83) at 0", "Insert MethodInvocation(82) into VariableDeclarationFragment(83) at 1", "Insert TagElement(86) into Javadoc(87) at 0", "Insert SimpleType: Map(91) into ParameterizedType: Map<String,String>(96) at 0", "Move SimpleType: String(734) into ParameterizedType: Map<String,String>(96) at 1", "Insert SimpleType: String(95) into ParameterizedType: Map<String,String>(96) at 2", "Insert SimpleName: GROOVY_OPERATOR_ALIASES(97) into VariableDeclarationFragment(157) at 0", "Insert MethodInvocation(156) into VariableDeclarationFragment(157) at 1", "Insert SimpleName: Override(159) into MarkerAnnotation(160) at 0", "Insert IfStatement(182) into Block(241) at 0", "Move VariableDeclarationStatement(255) into Block(241) at 1", "Move VariableDeclarationStatement(263) into Block(241) at 2", "Insert WhileStatement(224) into Block(241) at 3", "Insert IfStatement(238) into Block(241) at 4", "Insert ReturnStatement(240) into Block(241) at 5", "Update SimpleName: Binding(561) to GroovyExtendableScriptCache", "Insert SimpleType: GroovySCXMLScript(293) into TypeLiteral(294) at 0", "Insert SimpleName: groovyCtx(437) into MethodInvocation(440) at 0", "Insert SimpleName: setGroovyEvaluator(438) into MethodInvocation(440) at 1", "Insert ThisExpression(439) into MethodInvocation(440) at 2", "Insert MethodInvocation(452) into MethodInvocation(454) at 0", "Insert SimpleName: run(453) into MethodInvocation(454) at 1", "Insert SimpleName: groovyCtx(541) into MethodInvocation(544) at 0", "Insert SimpleName: setGroovyEvaluator(542) into MethodInvocation(544) at 1", "Insert ThisExpression(543) into MethodInvocation(544) at 2", "Move SimpleType: Boolean(265) into CastExpression(561) at 0", "Insert MethodInvocation(560) into CastExpression(561) at 1", "Update SimpleName: getVars(765) to groovyCtx", "Move SimpleName: getVars(765) into MethodInvocation(651) at 0", "Update SimpleName: entrySet(767) to setGroovyEvaluator", "Move SimpleName: entrySet(767) into MethodInvocation(651) at 1", "Insert ThisExpression(650) into MethodInvocation(651) at 2", "Move SimpleType: Node(376) into CastExpression(680) at 0", "Insert MethodInvocation(679) into CastExpression(680) at 1", "Update SimpleName: leaf(815) to groovyCtx", "Update SimpleName: set(816) to setGroovyEvaluator", "Insert ThisExpression(769) into MethodInvocation(770) at 2", "Insert SimpleName: isInitialScript(789) into VariableDeclarationFragment(807) at 0", "Insert InfixExpression: &&(806) into VariableDeclarationFragment(807) at 1", "Update SimpleName: Context(848) to Script", "Update SimpleName: current(850) to script", "Insert MethodInvocation(818) into VariableDeclarationFragment(819) at 1", "Insert SimpleName: result(823) into VariableDeclarationFragment(827) at 0", "Insert MethodInvocation(826) into VariableDeclarationFragment(827) at 1", "Insert SimpleName: isInitialScript(829) into InfixExpression: &&(831) at 0", "Insert SimpleName: useInitialScriptAsBaseScript(830) into InfixExpression: &&(831) at 1", "Insert ExpressionStatement(840) into Block(841) at 0", "Insert ClassInstanceCreation(860) into ThrowStatement(861) at 0", "Update TextElement: Constructor. (64) to Pattern for case-sensitive matching of the Groovy operator aliases, delimited by whitespace", "Insert SimpleName: Pattern(79) into MethodInvocation(82) at 0", "Insert SimpleName: compile(80) into MethodInvocation(82) at 1", "Insert StringLiteral: \"(?<=\\\\s)(and|or|not|eq|lt|le|ne|gt|ge)(?=\\\\s)\"(81) into MethodInvocation(82) at 2", "Insert TextElement: Groovy operator aliases mapped to their underlying Groovy operator(85) into TagElement(86) at 0", "Update SimpleName: GroovyContext(145) to Map", "Move SimpleName: GroovyContext(145) into SimpleType: Map(91) at 0", "Insert SimpleName: String(94) into SimpleType: String(95) at 0", "Insert SimpleName: Collections(98) into MethodInvocation(156) at 0", "Update SimpleName: getEffectiveContext(148) to unmodifiableMap", "Move SimpleName: getEffectiveContext(148) into MethodInvocation(156) at 1", "Insert ClassInstanceCreation(155) into MethodInvocation(156) at 2", "Insert InfixExpression: ||(178) into IfStatement(182) at 0", "Insert Block(181) into IfStatement(182) at 1", "Update SimpleType: GroovyContext(249) to StringBuffer", "Insert MethodInvocation(200) into WhileStatement(224) at 0", "Insert Block(223) into WhileStatement(224) at 1", "Insert InfixExpression: !=(227) into IfStatement(238) at 0", "Insert Block(237) into IfStatement(238) at 1", "Insert SimpleName: script(239) into ReturnStatement(240) at 0", "Update SimpleName: GroovyBuiltin(569) to GroovySCXMLScript", "Move SimpleName: GroovyBuiltin(569) into SimpleType: GroovySCXMLScript(293) at 0", "Insert SimpleName: getScript(444) into MethodInvocation(452) at 0", "Insert MethodInvocation(447) into MethodInvocation(452) at 1", "Insert MethodInvocation(450) into MethodInvocation(452) at 2", "Insert SimpleName: expr(451) into MethodInvocation(452) at 3", "Insert MethodInvocation(558) into MethodInvocation(560) at 0", "Insert SimpleName: run(559) into MethodInvocation(560) at 1", "Insert MethodInvocation(677) into MethodInvocation(679) at 0", "Insert SimpleName: run(678) into MethodInvocation(679) at 1", "Insert InfixExpression: &&(802) into InfixExpression: &&(806) at 0", "Insert MethodInvocation(805) into InfixExpression: &&(806) at 1", "Insert SimpleName: getScript(812) into MethodInvocation(818) at 0", "Insert SimpleName: effective(813) into MethodInvocation(818) at 1", "Insert MethodInvocation(816) into MethodInvocation(818) at 2", "Insert SimpleName: scriptSource(817) into MethodInvocation(818) at 3", "Update SimpleName: current(857) to script", "Move SimpleName: current(857) into MethodInvocation(826) at 0", "Update SimpleName: getVars(858) to run", "Move SimpleName: getVars(858) into MethodInvocation(826) at 1", "Insert MethodInvocation(839) into ExpressionStatement(840) at 0", "Move SimpleType: SCXMLExpressionException(497) into ClassInstanceCreation(860) at 0", "Insert InfixExpression: +(858) into ClassInstanceCreation(860) at 1", "Insert SimpleName: e(859) into ClassInstanceCreation(860) at 2", "Insert ParameterizedType: HashMap<String,String>(106) into ClassInstanceCreation(155) at 0", "Insert AnonymousClassDeclaration(154) into ClassInstanceCreation(155) at 1", "Move InfixExpression: ==(434) into InfixExpression: ||(178) at 0", "Insert InfixExpression: ==(177) into InfixExpression: ||(178) at 1", "Insert ReturnStatement(180) into Block(181) at 0", "Update SimpleName: GroovyContext(248) to StringBuffer", "Update SimpleName: effective(250) to sb", "Insert NullLiteral(186) into VariableDeclarationFragment(187) at 1", "Update SimpleName: shell(258) to m", "Update SimpleName: shell(266) to m", "Move SimpleName: shell(266) into MethodInvocation(200) at 0", "Update SimpleName: evaluate(267) to find", "Move SimpleName: evaluate(267) into MethodInvocation(200) at 1", "Insert IfStatement(211) into Block(223) at 0", "Insert ExpressionStatement(222) into Block(223) at 1", "Insert SimpleName: sb(225) into InfixExpression: !=(227) at 0", "Insert NullLiteral(226) into InfixExpression: !=(227) at 1", "Insert ExpressionStatement(232) into Block(237) at 0", "Move ReturnStatement(490) into Block(237) at 1", "Insert SimpleName: getEffectiveContext(445) into MethodInvocation(447) at 0", "Insert SimpleName: groovyCtx(446) into MethodInvocation(447) at 1", "Insert SimpleName: groovyCtx(448) into MethodInvocation(450) at 0", "Insert SimpleName: getScriptBaseClass(449) into MethodInvocation(450) at 1", "Insert SimpleName: getScript(550) into MethodInvocation(558) at 0", "Insert MethodInvocation(553) into MethodInvocation(558) at 1", "Insert MethodInvocation(556) into MethodInvocation(558) at 2", "Insert SimpleName: expr(557) into MethodInvocation(558) at 3", "Insert SimpleName: getScript(671) into MethodInvocation(677) at 0", "Insert SimpleName: effective(672) into MethodInvocation(677) at 1", "Insert MethodInvocation(675) into MethodInvocation(677) at 2", "Insert SimpleName: expr(676) into MethodInvocation(677) at 3", "Insert InfixExpression: !=(794) into InfixExpression: &&(802) at 0", "Insert InfixExpression: ==(801) into InfixExpression: &&(802) at 1", "Insert SimpleName: scriptCache(803) into MethodInvocation(805) at 0", "Insert SimpleName: isEmpty(804) into MethodInvocation(805) at 1", "Insert SimpleName: groovyCtx(814) into MethodInvocation(816) at 0", "Insert SimpleName: getScriptBaseClass(815) into MethodInvocation(816) at 1", "Insert SimpleName: groovyCtx(832) into MethodInvocation(839) at 0", "Insert SimpleName: setScriptBaseClass(833) into MethodInvocation(839) at 1", "Insert MethodInvocation(838) into MethodInvocation(839) at 2", "Insert StringLiteral: \"evalScript('\"(852) into InfixExpression: +(858) at 0", "Insert SimpleName: scriptSource(853) into InfixExpression: +(858) at 1", "Insert StringLiteral: \"'):\"(854) into InfixExpression: +(858) at 2", "Move MethodInvocation(503) into InfixExpression: +(858) at 3", "Insert SimpleType: HashMap(101) into ParameterizedType: HashMap<String,String>(106) at 0", "Move SimpleType: String(676) into ParameterizedType: HashMap<String,String>(106) at 1", "Insert SimpleType: String(105) into ParameterizedType: HashMap<String,String>(106) at 2", "Insert Initializer(153) into AnonymousClassDeclaration(154) at 0", "Insert MethodInvocation(175) into InfixExpression: ==(177) at 0", "Insert NumberLiteral: 0(176) into InfixExpression: ==(177) at 1", "Insert SimpleName: script(179) into ReturnStatement(180) at 0", "Update SimpleName: createGroovyShell(259) to GROOVY_OPERATOR_ALIASES_PATTERN", "Update SimpleName: effective(260) to matcher", "Insert SimpleName: script(194) into MethodInvocation(195) at 2", "Insert InfixExpression: ==(203) into IfStatement(211) at 0", "Insert Block(210) into IfStatement(211) at 1", "Insert MethodInvocation(221) into ExpressionStatement(222) at 0", "Insert MethodInvocation(231) into ExpressionStatement(232) at 0", "Insert SimpleName: getEffectiveContext(551) into MethodInvocation(553) at 0", "Insert SimpleName: groovyCtx(552) into MethodInvocation(553) at 1", "Insert SimpleName: groovyCtx(554) into MethodInvocation(556) at 0", "Insert SimpleName: getScriptBaseClass(555) into MethodInvocation(556) at 1", "Update SimpleName: current(772) to groovyCtx", "Move SimpleName: current(772) into MethodInvocation(675) at 0", "Update SimpleName: getParent(773) to getScriptBaseClass", "Move SimpleName: getParent(773) into MethodInvocation(675) at 1", "Insert MethodInvocation(792) into InfixExpression: !=(794) at 0", "Insert NullLiteral(793) into InfixExpression: !=(794) at 1", "Insert MethodInvocation(799) into InfixExpression: ==(801) at 0", "Insert NullLiteral(800) into InfixExpression: ==(801) at 1", "Move MethodInvocation(865) into MethodInvocation(838) at 0", "Update SimpleName: get(866) to getName", "Move SimpleName: get(866) into MethodInvocation(838) at 1", "Insert SimpleName: HashMap(100) into SimpleType: HashMap(101) at 0", "Update SimpleName: GroovyShell(153) to String", "Move SimpleName: GroovyShell(153) into SimpleType: String(105) at 0", "Insert Block(152) into Initializer(153) at 0", "Insert SimpleName: script(173) into MethodInvocation(175) at 0", "Insert SimpleName: length(174) into MethodInvocation(175) at 1", "Insert SimpleName: sb(201) into InfixExpression: ==(203) at 0", "Insert NullLiteral(202) into InfixExpression: ==(203) at 1", "Insert ExpressionStatement(209) into Block(210) at 0", "Insert SimpleName: m(212) into MethodInvocation(221) at 0", "Update SimpleName: createGroovyShell(370) to appendReplacement", "Move SimpleName: createGroovyShell(370) into MethodInvocation(221) at 1", "Update SimpleName: effective(371) to sb", "Move SimpleName: effective(371) into MethodInvocation(221) at 2", "Insert MethodInvocation(220) into MethodInvocation(221) at 3", "Insert SimpleName: m(228) into MethodInvocation(231) at 0", "Insert SimpleName: appendTail(229) into MethodInvocation(231) at 1", "Update SimpleName: createGroovyShell(481) to sb", "Move SimpleName: createGroovyShell(481) into MethodInvocation(231) at 2", "Update SimpleName: shell(486) to sb", "Update SimpleName: evaluate(487) to toString", "Update SimpleName: setLocal(823) to groovyCtx", "Move SimpleName: setLocal(823) into MethodInvocation(792) at 0", "Update SimpleName: key(824) to getParent", "Move SimpleName: key(824) into MethodInvocation(792) at 1", "Insert MethodInvocation(797) into MethodInvocation(799) at 0", "Insert SimpleName: getParent(798) into MethodInvocation(799) at 1", "Update SimpleName: current(863) to script", "Update SimpleName: getVars(864) to getClass", "Insert ExpressionStatement(111) into Block(152) at 0", "Insert ExpressionStatement(116) into Block(152) at 1", "Insert ExpressionStatement(121) into Block(152) at 2", "Insert ExpressionStatement(126) into Block(152) at 3", "Insert ExpressionStatement(131) into Block(152) at 4", "Insert ExpressionStatement(136) into Block(152) at 5", "Insert ExpressionStatement(141) into Block(152) at 6", "Insert ExpressionStatement(146) into Block(152) at 7", "Insert ExpressionStatement(151) into Block(152) at 8", "Insert Assignment: =(208) into ExpressionStatement(209) at 0", "Update SimpleName: shell(377) to GROOVY_OPERATOR_ALIASES", "Move SimpleName: shell(377) into MethodInvocation(220) at 0", "Update SimpleName: evaluate(378) to get", "Move SimpleName: evaluate(378) into MethodInvocation(220) at 1", "Insert MethodInvocation(219) into MethodInvocation(220) at 2", "Update SimpleName: value(825) to groovyCtx", "Move SimpleName: value(825) into MethodInvocation(797) at 0", "Insert SimpleName: getParent(796) into MethodInvocation(797) at 1", "Insert MethodInvocation(110) into ExpressionStatement(111) at 0", "Insert MethodInvocation(115) into ExpressionStatement(116) at 0", "Insert MethodInvocation(120) into ExpressionStatement(121) at 0", "Insert MethodInvocation(125) into ExpressionStatement(126) at 0", "Insert MethodInvocation(130) into ExpressionStatement(131) at 0", "Insert MethodInvocation(135) into ExpressionStatement(136) at 0", "Insert MethodInvocation(140) into ExpressionStatement(141) at 0", "Insert MethodInvocation(145) into ExpressionStatement(146) at 0", "Insert MethodInvocation(150) into ExpressionStatement(151) at 0", "Insert SimpleName: sb(204) into Assignment: =(208) at 0", "Insert ClassInstanceCreation(207) into Assignment: =(208) at 1", "Update SimpleName: expr(379) to m", "Move SimpleName: expr(379) into MethodInvocation(219) at 0", "Insert SimpleName: group(218) into MethodInvocation(219) at 1", "Insert SimpleName: put(107) into MethodInvocation(110) at 0", "Insert StringLiteral: \"and\"(108) into MethodInvocation(110) at 1", "Insert StringLiteral: \"&& \"(109) into MethodInvocation(110) at 2", "Update SimpleName: createGroovyShell(156) to put", "Move SimpleName: createGroovyShell(156) into MethodInvocation(115) at 0", "Insert StringLiteral: \"or\"(113) into MethodInvocation(115) at 1", "Insert StringLiteral: \"||\"(114) into MethodInvocation(115) at 2", "Update SimpleName: shell(161) to put", "Move SimpleName: shell(161) into MethodInvocation(120) at 0", "Insert StringLiteral: \"not\"(118) into MethodInvocation(120) at 1", "Insert StringLiteral: \" ! \"(119) into MethodInvocation(120) at 2", "Update SimpleName: evaluate(162) to put", "Move SimpleName: evaluate(162) into MethodInvocation(125) at 0", "Insert StringLiteral: \"eq\"(123) into MethodInvocation(125) at 1", "Insert StringLiteral: \"==\"(124) into MethodInvocation(125) at 2", "Update SimpleName: expr(163) to put", "Move SimpleName: expr(163) into MethodInvocation(130) at 0", "Insert StringLiteral: \"lt\"(128) into MethodInvocation(130) at 1", "Insert StringLiteral: \"< \"(129) into MethodInvocation(130) at 2", "Insert SimpleName: put(132) into MethodInvocation(135) at 0", "Insert StringLiteral: \"le\"(133) into MethodInvocation(135) at 1", "Insert StringLiteral: \"<=\"(134) into MethodInvocation(135) at 2", "Insert SimpleName: put(137) into MethodInvocation(140) at 0", "Insert StringLiteral: \"ne\"(138) into MethodInvocation(140) at 1", "Insert StringLiteral: \"!=\"(139) into MethodInvocation(140) at 2", "Insert SimpleName: put(142) into MethodInvocation(145) at 0", "Insert StringLiteral: \"gt\"(143) into MethodInvocation(145) at 1", "Insert StringLiteral: \"> \"(144) into MethodInvocation(145) at 2", "Insert SimpleName: put(147) into MethodInvocation(150) at 0", "Insert StringLiteral: \"ge\"(148) into MethodInvocation(150) at 1", "Insert StringLiteral: \">=\"(149) into MethodInvocation(150) at 2", "Insert SimpleType: StringBuffer(206) into ClassInstanceCreation(207) at 0", "Update SimpleName: GroovyShell(367) to StringBuffer", "Move SimpleName: GroovyShell(367) into SimpleType: StringBuffer(206) at 0", "Delete TextElement: SCXML documents.(27)", "Delete Modifier: final(247)", "Delete SimpleName: getEffectiveContext(251)", "Delete SimpleName: groovyCtx(252)", "Delete MethodInvocation(253)", "Delete SimpleName: script(488)", "Delete SimpleName: inClosure(587)", "Delete SimpleName: MethodClosure(588)", "Delete SimpleType: MethodClosure(589)", "Delete SimpleName: builtin(590)", "Delete StringLiteral: \"In\"(591)", "Delete ClassInstanceCreation(592)", "Delete StringLiteral: \"Data\"(597)", "Delete SimpleName: groovyCtx(449)", "Delete Assignment: =(454)", "Delete ExpressionStatement(455)", "Delete Block(456)", "Delete SimpleName: groovyCtx(338)", "Delete Assignment: =(343)", "Delete ExpressionStatement(344)", "Delete Block(345)", "Delete ThisExpression(704)", "Delete SimpleName: leaf(705)", "Delete FieldAccess(706)", "Delete SimpleName: ctx(707)", "Delete Assignment: =(708)", "Delete SimpleName: groovyCtx(232)", "Delete Assignment: =(237)", "Delete ExpressionStatement(238)", "Delete Block(239)", "Delete SimpleName: Context(753)", "Delete SimpleType: Context(754)", "Delete SimpleName: leaf(756)", "Delete SimpleName: entrySet(762)", "Delete SimpleName: addAll(763)", "Delete SimpleName: current(764)", "Delete MethodInvocation(766)", "Delete MethodInvocation(768)", "Delete MethodInvocation(769)", "Delete SimpleName: groovyCtx(129)", "Delete Assignment: =(134)", "Delete ExpressionStatement(135)", "Delete Block(136)", "Delete SimpleName: old(804)", "Delete SimpleName: leaf(805)", "Delete SimpleName: get(806)", "Delete SimpleName: key(807)", "Delete MethodInvocation(808)", "Delete SimpleName: key(817)", "Delete SimpleName: value(818)", "Delete SimpleName: leaf(851)", "Delete SimpleName: key(867)", "Delete MethodInvocation(868)", "Delete ReturnStatement(869)", "Delete Javadoc(66)", "Delete Modifier: public(67)", "Delete SimpleName: GroovyEvaluator(68)", "Delete SuperConstructorInvocation(69)", "Delete Block(70)", "Delete MethodDeclaration(71)", "Delete Modifier: public(96)", "Delete SimpleName: eval(99)", "Delete NullLiteral(122)", "Delete VariableDeclarationFragment(123)", "Delete VariableDeclarationStatement(124)", "Delete Modifier: final(144)", "Delete SimpleType: GroovyContext(146)", "Delete SimpleName: effective(147)", "Delete SimpleName: groovyCtx(149)", "Delete MethodInvocation(150)", "Delete VariableDeclarationFragment(151)", "Delete VariableDeclarationStatement(152)", "Delete SimpleType: GroovyShell(154)", "Delete SimpleName: shell(155)", "Delete SimpleName: effective(157)", "Delete MethodInvocation(158)", "Delete VariableDeclarationFragment(159)", "Delete VariableDeclarationStatement(160)", "Delete MethodInvocation(164)", "Delete ReturnStatement(165)", "Delete Block(166)", "Delete TryStatement(185)", "Delete Block(186)", "Delete MethodDeclaration(187)", "Delete SimpleName: groovyCtx(224)", "Delete NullLiteral(225)", "Delete VariableDeclarationFragment(226)", "Delete VariableDeclarationStatement(227)", "Delete SimpleName: expr(268)", "Delete MethodInvocation(269)", "Delete CastExpression(270)", "Delete ReturnStatement(271)", "Delete Block(272)", "Delete TryStatement(291)", "Delete Block(292)", "Delete MethodDeclaration(293)", "Delete Modifier: public(305)", "Delete SimpleName: evalLocation(308)", "Delete SimpleName: groovyCtx(330)", "Delete NullLiteral(331)", "Delete VariableDeclarationFragment(332)", "Delete VariableDeclarationStatement(333)", "Delete SimpleType: GroovyShell(368)", "Delete SimpleName: shell(369)", "Delete MethodInvocation(372)", "Delete VariableDeclarationFragment(373)", "Delete VariableDeclarationStatement(374)", "Delete MethodInvocation(380)", "Delete CastExpression(381)", "Delete ReturnStatement(382)", "Delete Block(383)", "Delete TryStatement(402)", "Delete Block(403)", "Delete MethodDeclaration(404)", "Delete Modifier: public(416)", "Delete SimpleName: evalScript(419)", "Delete IfStatement(438)", "Delete SimpleName: groovyCtx(441)", "Delete NullLiteral(442)", "Delete VariableDeclarationFragment(443)", "Delete VariableDeclarationStatement(444)", "Delete SimpleName: GroovyShell(478)", "Delete SimpleType: GroovyShell(479)", "Delete SimpleName: shell(480)", "Delete SimpleName: effective(482)", "Delete MethodInvocation(483)", "Delete VariableDeclarationFragment(484)", "Delete VariableDeclarationStatement(485)", "Delete Block(491)", "Delete StringLiteral: \"evalScript('\"(498)", "Delete SimpleName: script(499)", "Delete StringLiteral: \"'):\"(500)", "Delete InfixExpression: +(504)", "Delete SimpleName: e(505)", "Delete ClassInstanceCreation(506)", "Delete ThrowStatement(507)", "Delete Block(508)", "Delete CatchClause(509)", "Delete TryStatement(510)", "Delete Block(511)", "Delete MethodDeclaration(512)", "Delete TextElement: Create a GroovyShell instance.(544)", "Delete TagElement(545)", "Delete SimpleName: context(546)", "Delete TagElement: @param(547)", "Delete TagElement: @return(548)", "Delete Javadoc(549)", "Delete Modifier: protected(550)", "Delete SimpleType: GroovyShell(552)", "Delete SimpleName: Binding(558)", "Delete SimpleType: Binding(559)", "Delete SimpleName: binding(560)", "Delete ClassInstanceCreation(563)", "Delete VariableDeclarationFragment(564)", "Delete VariableDeclarationStatement(565)", "Delete SimpleName: GroovyBuiltin(566)", "Delete SimpleType: GroovyBuiltin(567)", "Delete SimpleName: builtin(568)", "Delete SimpleType: GroovyBuiltin(570)", "Delete SimpleName: groovyContext(571)", "Delete ClassInstanceCreation(572)", "Delete VariableDeclarationFragment(573)", "Delete VariableDeclarationStatement(574)", "Delete SimpleType: MethodClosure(576)", "Delete SimpleName: dataClosure(577)", "Delete SimpleType: MethodClosure(579)", "Delete SimpleName: builtin(580)", "Delete StringLiteral: \"Data\"(581)", "Delete ClassInstanceCreation(582)", "Delete VariableDeclarationFragment(583)", "Delete VariableDeclarationStatement(584)", "Delete SimpleName: binding(601)", "Delete SimpleName: setProperty(602)", "Delete StringLiteral: \"In\"(603)", "Delete SimpleName: inClosure(604)", "Delete MethodInvocation(605)", "Delete ExpressionStatement(606)", "Delete SimpleName: GroovyBinding(607)", "Delete SimpleType: GroovyBinding(608)", "Delete SimpleName: groovyBinding(609)", "Delete SimpleName: GroovyBinding(610)", "Delete SimpleType: GroovyBinding(611)", "Delete SimpleName: groovyContext(612)", "Delete SimpleName: binding(613)", "Delete ClassInstanceCreation(614)", "Delete VariableDeclarationFragment(615)", "Delete VariableDeclarationStatement(616)", "Delete SimpleName: GroovyShell(617)", "Delete SimpleType: GroovyShell(618)", "Delete SimpleName: shell(619)", "Delete SimpleName: GroovyShell(620)", "Delete SimpleType: GroovyShell(621)", "Delete SimpleName: groovyBinding(622)", "Delete ClassInstanceCreation(623)", "Delete VariableDeclarationFragment(624)", "Delete VariableDeclarationStatement(625)", "Delete SimpleName: shell(626)", "Delete ReturnStatement(627)", "Delete Block(628)", "Delete MethodDeclaration(629)", "Delete TextElement: The map that will back the effective context for the(660)", "Delete SimpleName: GroovyEvaluator(661)", "Delete TagElement: @link(662)", "Delete TextElement: . The effective context enables the chaining of(663)", "Delete SimpleName: Context(664)", "Delete TagElement: @link(665)", "Delete TextElement: s all the way from the current state node to the root.(666)", "Delete TagElement(667)", "Delete Javadoc(668)", "Delete Modifier: private(669)", "Delete Modifier: static(670)", "Delete Modifier: final(671)", "Delete SimpleName: EffectiveContextMap(672)", "Delete SimpleName: AbstractMap(673)", "Delete SimpleType: AbstractMap(674)", "Delete SimpleName: Object(677)", "Delete SimpleType: Object(678)", "Delete ParameterizedType: AbstractMap<String,Object>(679)", "Delete TextElement: The (680)", "Delete SimpleName: Context(681)", "Delete TagElement: @link(682)", "Delete TextElement:  for the current state. (683)", "Delete TagElement(684)", "Delete Javadoc(685)", "Delete Modifier: private(686)", "Delete Modifier: final(687)", "Delete SimpleName: Context(688)", "Delete SimpleType: Context(689)", "Delete SimpleName: leaf(690)", "Delete VariableDeclarationFragment(691)", "Delete FieldDeclaration(692)", "Delete TextElement: Constructor. (693)", "Delete TagElement(694)", "Delete Javadoc(695)", "Delete Modifier: final(698)", "Delete SimpleName: GroovyContext(699)", "Delete SimpleType: GroovyContext(700)", "Delete SimpleName: ctx(701)", "Delete SingleVariableDeclaration(702)", "Delete SuperConstructorInvocation(703)", "Delete Block(710)", "Delete MethodDeclaration(711)", "Delete TagElement: @inheritDoc(712)", "Delete TagElement(713)", "Delete Javadoc(714)", "Delete Modifier: public(717)", "Delete SimpleName: Set(718)", "Delete SimpleType: Set(719)", "Delete QualifiedName: Map.Entry(720)", "Delete SimpleType: Map.Entry(721)", "Delete SimpleName: Object(724)", "Delete SimpleType: Object(725)", "Delete ParameterizedType: Map.Entry<String,Object>(726)", "Delete ParameterizedType: Set<Map.Entry<String,Object>>(727)", "Delete SimpleName: entrySet(728)", "Delete SimpleName: Set(729)", "Delete SimpleType: Set(730)", "Delete QualifiedName: Map.Entry(731)", "Delete SimpleType: Map.Entry(732)", "Delete SimpleName: Object(735)", "Delete SimpleType: Object(736)", "Delete ParameterizedType: Map.Entry<String,Object>(737)", "Delete ParameterizedType: Set<Map.Entry<String,Object>>(738)", "Delete SimpleName: entrySet(739)", "Delete SimpleName: HashSet(740)", "Delete SimpleType: HashSet(741)", "Delete QualifiedName: Map.Entry(742)", "Delete SimpleType: Map.Entry(743)", "Delete SimpleName: Object(746)", "Delete SimpleType: Object(747)", "Delete ParameterizedType: Map.Entry<String,Object>(748)", "Delete ParameterizedType: HashSet<Map.Entry<String,Object>>(749)", "Delete ClassInstanceCreation(750)", "Delete VariableDeclarationFragment(751)", "Delete VariableDeclarationStatement(752)", "Delete SimpleName: current(759)", "Delete InfixExpression: !=(761)", "Delete SimpleName: current(771)", "Delete MethodInvocation(774)", "Delete Assignment: =(775)", "Delete ExpressionStatement(776)", "Delete Block(777)", "Delete WhileStatement(778)", "Delete SimpleName: entrySet(779)", "Delete ReturnStatement(780)", "Delete Block(781)", "Delete MethodDeclaration(782)", "Delete TagElement: @inheritDoc(783)", "Delete TagElement(784)", "Delete Javadoc(785)", "Delete SimpleName: Object(789)", "Delete SimpleType: Object(790)", "Delete Modifier: final(797)", "Delete SimpleName: Object(798)", "Delete SimpleType: Object(799)", "Delete SimpleName: value(800)", "Delete SingleVariableDeclaration(801)", "Delete SimpleName: key(813)", "Delete MethodInvocation(814)", "Delete SimpleName: leaf(822)", "Delete MethodInvocation(826)", "Delete ExpressionStatement(827)", "Delete Block(828)", "Delete IfStatement(829)", "Delete SimpleName: old(830)", "Delete ReturnStatement(831)", "Delete Block(832)", "Delete MethodDeclaration(833)", "Delete TagElement: @inheritDoc(834)", "Delete TagElement(835)", "Delete Javadoc(836)", "Delete Modifier: public(839)", "Delete SimpleName: Object(840)", "Delete SimpleType: Object(841)", "Delete SimpleName: get(842)", "Delete Modifier: final(843)", "Delete SimpleName: Object(844)", "Delete SimpleType: Object(845)", "Delete SimpleName: key(846)", "Delete SingleVariableDeclaration(847)", "Delete SimpleName: current(854)", "Delete NullLiteral(855)", "Delete InfixExpression: !=(856)", "Delete MethodInvocation(859)", "Delete SimpleName: containsKey(860)", "Delete SimpleName: key(861)", "Delete MethodInvocation(862)", "Delete IfStatement(871)", "Delete SimpleName: current(872)", "Delete MethodInvocation(875)", "Delete Assignment: =(876)", "Delete ExpressionStatement(877)", "Delete Block(878)", "Delete WhileStatement(879)", "Delete NullLiteral(880)", "Delete ReturnStatement(881)", "Delete Block(882)", "Delete MethodDeclaration(883)", "Delete TypeDeclaration: class(884)"]}}], "commit_stats": [{"total_files": 5, "deleted_files": 2, "testing": "False", "maintenance": "False", "build": "False"}]}