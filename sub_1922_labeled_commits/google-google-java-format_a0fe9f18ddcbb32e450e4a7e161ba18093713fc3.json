{"application": "google-google-java-format", "csha": "a0fe9f18ddcbb32e450e4a7e161ba18093713fc3", "files": [{"JavaInputAstVisitor_cluster": {"actions": [{"root": "UPDATE from visitAndBreak to visitAndBreakModifiers", "operations": ["UPD SimpleName: visitAndBreak from visitAndBreak to visitAndBreakModifiers", "UPD SimpleName: visitAndBreak from visitAndBreak to visitAndBreakModifiers", "UPD SimpleName: visitAndBreak from visitAndBreak to visitAndBreakModifiers", "UPD SimpleName: visitAndBreak from visitAndBreak to visitAndBreakModifiers", "UPD SimpleName: visitAndBreak from visitAndBreak to visitAndBreakModifiers", "UPD SimpleName: visitAndBreak from visitAndBreak to visitAndBreakModifiers", "UPD SimpleName: visitAndBreak from visitAndBreak to visitAndBreakModifiers", "UPD SimpleName: visitAndBreak from visitAndBreak to visitAndBreakModifiers", "UPD SimpleName: visitAndBreak from visitAndBreak to visitAndBreakModifiers"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS VariableDeclarationStatement to Block at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: idx to VariableDeclarationFragment at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1"]}, {"root": "INS ForStatement to Block at 5", "operations": ["INS SimpleName: builder to MethodInvocation at 0", "INS SimpleName: addAll to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: < at 1", "INS ExpressionStatement to Block at 4", "INS SimpleName: idx to PostfixExpression: ++ at 0", "INS SimpleName: FORCE_BREAK_LIST to ConditionalExpression at 1", "INS SimpleName: idx to InfixExpression: < at 0", "INS BooleanLiteral: false to Assignment: = at 1", "INS CastExpression to ParenthesizedExpression at 0", "INS SimpleName: BREAK_LIST to ConditionalExpression at 2", "INS SimpleName: size to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS SimpleName: lastWasAnnotation to Assignment: = at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PostfixExpression: ++ to ForStatement at 1", "INS SimpleName: modifier to VariableDeclarationFragment at 0", "INS InfixExpression: < to ForStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS BooleanLiteral: true to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: ASTNode to SimpleType: ASTNode at 0", "INS Block to ForStatement at 2", "INS SimpleName: modifier to MethodInvocation at 0", "INS IfStatement to Block at 2", "INS SimpleName: get to MethodInvocation at 1", "INS ConditionalExpression to MethodInvocation at 2", "INS ExpressionStatement to Block at 5", "INS MethodInvocation to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: accept to MethodInvocation at 1", "INS SimpleName: idx to MethodInvocation at 2", "INS SimpleName: modifiers to MethodInvocation at 0", "INS SimpleType: ASTNode to CastExpression at 0", "INS ForStatement to Block at 5", "INS ThisExpression to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: first to Assignment: = at 0", "INS SimpleName: isModifier to MethodInvocation at 1", "INS ExpressionStatement to Block at 3", "INS SimpleName: modifiers to MethodInvocation at 0", "INS BreakStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS IfStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: modifier to CastExpression at 1"]}, {"root": "INS ExpressionStatement to Block at 8", "operations": ["INS SimpleName: builder to MethodInvocation at 0", "INS SimpleName: ZERO to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: open to MethodInvocation at 1", "INS ExpressionStatement to Block at 8"]}, {"root": "INS ExpressionStatement to Block at 9", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: first to Assignment: = at 0", "INS ExpressionStatement to Block at 9", "INS BooleanLiteral: true to Assignment: = at 1"]}, {"root": "INS ForStatement to Block at 10", "operations": ["INS SimpleName: IExtendedModifier to SimpleType: IExtendedModifier at 0", "INS SimpleName: modifier to VariableDeclarationFragment at 0", "INS SimpleName: modifiers to MethodInvocation at 0", "INS SimpleName: BREAK_LIST to MethodInvocation at 2", "INS SimpleName: size to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: lastWasAnnotation to IfStatement at 0", "INS SimpleName: first to PrefixExpression: ! at 0", "INS Block to ForStatement at 2", "INS MethodInvocation to InfixExpression: < at 1", "INS SimpleName: addAll to MethodInvocation at 1", "INS IfStatement to IfStatement at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: idx to PostfixExpression: ++ at 0", "INS ExpressionStatement to Block at 0", "INS PostfixExpression: ++ to ForStatement at 1", "INS SimpleName: idx to InfixExpression: < at 0", "INS InfixExpression: < to ForStatement at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: modifiers to MethodInvocation at 0", "INS SimpleName: idx to MethodInvocation at 2", "INS IfStatement to Block at 1", "INS SimpleType: IExtendedModifier to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ForStatement to Block at 10", "INS SimpleName: builder to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: get to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 11", "operations": ["INS SimpleName: builder to MethodInvocation at 0", "INS SimpleName: close to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 11"]}, {"root": "UPDATE from . Output combined modifiers and annotations and returns the trailing to . Output combined modifiers and annotations and returns the", "operations": ["UPD TextElement: . Output combined modifiers and annotations and returns the trailing from . Output combined modifiers and annotations and returns the trailing to . Output combined modifiers and annotations and returns the"]}, {"root": "UPDATE from break. to trailing break.", "operations": ["UPD TextElement: break. from break. to trailing break."]}, {"root": "UPDATE from  visitAndBreak to  visitAndBreakModifiers", "operations": ["UPD TextElement:  visitAndBreak from  visitAndBreak to  visitAndBreakModifiers"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 3"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: IExtendedModifier to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV PrefixExpression: ! to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "INS BooleanLiteral: false to Assignment: = at 1", "operations": ["INS BooleanLiteral: false to Assignment: = at 1"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 0"]}, {"root": "INS MethodInvocation to ConditionalExpression at 0", "operations": ["INS SimpleName: annotationsDirection to MethodInvocation at 0", "INS SimpleName: isVertical to MethodInvocation at 1", "INS MethodInvocation to ConditionalExpression at 0"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: modifiers", "DEL SimpleName: modifier", "DEL EnhancedForStatement", "DEL Block"]}, {"root": "DEL InfixExpression: &&", "operations": ["DEL SimpleName: lastWasAnnotation", "DEL InfixExpression: &&"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: isAnnotation", "DEL SimpleName: modifier", "DEL MethodInvocation"]}]}}, {"JavaInputAstVisitor_diff": {"operations": ["Update SimpleName: visitAndBreak(8053) to visitAndBreakModifiers", "Insert VariableDeclarationStatement(8155) into Block(8294) at 4", "Insert ForStatement(8210) into Block(8294) at 5", "Insert ExpressionStatement(8219) into Block(8294) at 7", "Insert ExpressionStatement(8223) into Block(8294) at 8", "Insert ForStatement(8280) into Block(8294) at 9", "Insert ExpressionStatement(8284) into Block(8294) at 10", "Update TextElement: . Output combined modifiers and annotations and returns the trailing(8084) to . Output combined modifiers and annotations and returns the", "Update TextElement: break.(8085) to trailing break.", "Insert PrimitiveType: int(8151) into VariableDeclarationStatement(8155) at 0", "Insert VariableDeclarationFragment(8154) into VariableDeclarationStatement(8155) at 1", "Insert InfixExpression: <(8160) into ForStatement(8210) at 0", "Insert PostfixExpression: ++(8162) into ForStatement(8210) at 1", "Insert Block(8209) into ForStatement(8210) at 2", "Insert MethodInvocation(8218) into ExpressionStatement(8219) at 0", "Insert Assignment: =(8222) into ExpressionStatement(8223) at 0", "Insert InfixExpression: <(8228) into ForStatement(8280) at 0", "Insert PostfixExpression: ++(8230) into ForStatement(8280) at 1", "Insert Block(8279) into ForStatement(8280) at 2", "Insert MethodInvocation(8283) into ExpressionStatement(8284) at 0", "Update SimpleName: visitAndBreak(906) to visitAndBreakModifiers", "Update SimpleName: visitAndBreak(2603) to visitAndBreakModifiers", "Update SimpleName: visitAndBreak(3798) to visitAndBreakModifiers", "Update SimpleName: visitAndBreak(4330) to visitAndBreakModifiers", "Update SimpleName: visitAndBreak(4903) to visitAndBreakModifiers", "Update SimpleName: visitAndBreak(6982) to visitAndBreakModifiers", "Update TextElement:  visitAndBreak(8082) to  visitAndBreakModifiers", "Insert SimpleName: idx(8152) into VariableDeclarationFragment(8154) at 0", "Insert NumberLiteral: 0(8153) into VariableDeclarationFragment(8154) at 1", "Insert SimpleName: idx(8156) into InfixExpression: <(8160) at 0", "Insert MethodInvocation(8159) into InfixExpression: <(8160) at 1", "Insert SimpleName: idx(8161) into PostfixExpression: ++(8162) at 0", "Insert VariableDeclarationStatement(8171) into Block(8209) at 0", "Insert IfStatement(8177) into Block(8209) at 1", "Insert IfStatement(8191) into Block(8209) at 2", "Insert ExpressionStatement(8200) into Block(8209) at 3", "Insert ExpressionStatement(8204) into Block(8209) at 4", "Insert ExpressionStatement(8208) into Block(8209) at 5", "Insert SimpleName: builder(8215) into MethodInvocation(8218) at 0", "Insert SimpleName: open(8216) into MethodInvocation(8218) at 1", "Insert SimpleName: ZERO(8217) into MethodInvocation(8218) at 2", "Insert SimpleName: first(8220) into Assignment: =(8222) at 0", "Insert BooleanLiteral: true(8221) into Assignment: =(8222) at 1", "Insert SimpleName: idx(8224) into InfixExpression: <(8228) at 0", "Insert MethodInvocation(8227) into InfixExpression: <(8228) at 1", "Insert SimpleName: idx(8229) into PostfixExpression: ++(8230) at 0", "Insert VariableDeclarationStatement(8239) into Block(8279) at 0", "Insert IfStatement(8261) into Block(8279) at 1", "Move ExpressionStatement(8180) into Block(8279) at 2", "Move ExpressionStatement(8190) into Block(8279) at 3", "Move ExpressionStatement(8186) into Block(8279) at 4", "Insert SimpleName: builder(8281) into MethodInvocation(8283) at 0", "Insert SimpleName: close(8282) into MethodInvocation(8283) at 1", "Update SimpleName: visitAndBreak(10241) to visitAndBreakModifiers", "Update SimpleName: visitAndBreak(10453) to visitAndBreakModifiers", "Insert SimpleName: modifiers(8157) into MethodInvocation(8159) at 0", "Insert SimpleName: size(8158) into MethodInvocation(8159) at 1", "Move SimpleType: IExtendedModifier(8152) into VariableDeclarationStatement(8171) at 0", "Insert VariableDeclarationFragment(8170) into VariableDeclarationStatement(8171) at 1", "Insert MethodInvocation(8174) into IfStatement(8177) at 0", "Insert Block(8176) into IfStatement(8177) at 1", "Move PrefixExpression: !(8157) into IfStatement(8191) at 0", "Insert Block(8190) into IfStatement(8191) at 1", "Insert MethodInvocation(8199) into ExpressionStatement(8200) at 0", "Insert Assignment: =(8203) into ExpressionStatement(8204) at 0", "Insert Assignment: =(8207) into ExpressionStatement(8208) at 0", "Insert SimpleName: modifiers(8225) into MethodInvocation(8227) at 0", "Insert SimpleName: size(8226) into MethodInvocation(8227) at 1", "Insert SimpleType: IExtendedModifier(8232) into VariableDeclarationStatement(8239) at 0", "Insert VariableDeclarationFragment(8238) into VariableDeclarationStatement(8239) at 1", "Insert PrefixExpression: !(8241) into IfStatement(8261) at 0", "Insert Block(8247) into IfStatement(8261) at 1", "Insert IfStatement(8260) into IfStatement(8261) at 2", "Insert SimpleName: modifier(8165) into VariableDeclarationFragment(8170) at 0", "Insert MethodInvocation(8169) into VariableDeclarationFragment(8170) at 1", "Insert SimpleName: modifier(8172) into MethodInvocation(8174) at 0", "Insert SimpleName: isModifier(8173) into MethodInvocation(8174) at 1", "Insert BreakStatement(8175) into Block(8176) at 0", "Insert ExpressionStatement(8189) into Block(8190) at 0", "Insert ParenthesizedExpression(8196) into MethodInvocation(8199) at 0", "Insert SimpleName: accept(8197) into MethodInvocation(8199) at 1", "Insert ThisExpression(8198) into MethodInvocation(8199) at 2", "Insert SimpleName: first(8201) into Assignment: =(8203) at 0", "Insert BooleanLiteral: false(8202) into Assignment: =(8203) at 1", "Insert SimpleName: lastWasAnnotation(8205) into Assignment: =(8207) at 0", "Insert BooleanLiteral: true(8206) into Assignment: =(8207) at 1", "Insert SimpleName: IExtendedModifier(8231) into SimpleType: IExtendedModifier(8232) at 0", "Insert SimpleName: modifier(8233) into VariableDeclarationFragment(8238) at 0", "Insert MethodInvocation(8237) into VariableDeclarationFragment(8238) at 1", "Insert SimpleName: first(8240) into PrefixExpression: !(8241) at 0", "Insert ExpressionStatement(8246) into Block(8247) at 0", "Insert SimpleName: lastWasAnnotation(8248) into IfStatement(8260) at 0", "Move Block(8170) into IfStatement(8260) at 1", "Insert BooleanLiteral: false(8276) into Assignment: =(8277) at 1", "Insert SimpleName: modifiers(8166) into MethodInvocation(8169) at 0", "Insert SimpleName: get(8167) into MethodInvocation(8169) at 1", "Insert SimpleName: idx(8168) into MethodInvocation(8169) at 2", "Insert MethodInvocation(8188) into ExpressionStatement(8189) at 0", "Insert CastExpression(8195) into ParenthesizedExpression(8196) at 0", "Insert SimpleName: modifiers(8234) into MethodInvocation(8237) at 0", "Insert SimpleName: get(8235) into MethodInvocation(8237) at 1", "Insert SimpleName: idx(8236) into MethodInvocation(8237) at 2", "Insert MethodInvocation(8245) into ExpressionStatement(8246) at 0", "Insert SimpleName: builder(8180) into MethodInvocation(8188) at 0", "Insert SimpleName: addAll(8181) into MethodInvocation(8188) at 1", "Insert ConditionalExpression(8187) into MethodInvocation(8188) at 2", "Insert SimpleType: ASTNode(8193) into CastExpression(8195) at 0", "Insert SimpleName: modifier(8194) into CastExpression(8195) at 1", "Insert SimpleName: builder(8242) into MethodInvocation(8245) at 0", "Insert SimpleName: addAll(8243) into MethodInvocation(8245) at 1", "Insert SimpleName: BREAK_LIST(8244) into MethodInvocation(8245) at 2", "Move MethodInvocation(8163) into ConditionalExpression(8187) at 0", "Insert SimpleName: FORCE_BREAK_LIST(8185) into ConditionalExpression(8187) at 1", "Insert SimpleName: BREAK_LIST(8186) into ConditionalExpression(8187) at 2", "Insert SimpleName: ASTNode(8192) into SimpleType: ASTNode(8193) at 0", "Insert MethodInvocation(8253) into ConditionalExpression(8256) at 0", "Insert SimpleName: annotationsDirection(8251) into MethodInvocation(8253) at 0", "Insert SimpleName: isVertical(8252) into MethodInvocation(8253) at 1", "Delete SimpleName: modifier(8153)", "Delete SingleVariableDeclaration(8154)", "Delete SimpleName: modifiers(8155)", "Delete IfStatement(8171)", "Delete Block(8191)", "Delete EnhancedForStatement(8192)", "Delete SimpleName: lastWasAnnotation(8160)", "Delete InfixExpression: &&(8164)", "Delete SimpleName: modifier(8182)", "Delete SimpleName: isAnnotation(8183)", "Delete MethodInvocation(8184)"]}}], "commit_stats": [{"total_files": 3, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}