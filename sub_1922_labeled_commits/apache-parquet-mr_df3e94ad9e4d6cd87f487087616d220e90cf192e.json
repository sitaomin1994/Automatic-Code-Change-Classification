{"application": "apache-parquet-mr", "csha": "df3e94ad9e4d6cd87f487087616d220e90cf192e", "files": [{"Encoding_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: parquet.column.values.ValuesReader to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: parquet.column.values.ValuesType to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: parquet.column.values.bitpacking.BitPackingValuesReader to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS QualifiedName: parquet.column.values.boundedint.BoundedIntValuesFactory to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 4"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: parquet.column.values.plain.BooleanPlainValuesReader to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: parquet.column.values.plain.PlainValuesReader to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: parquet.io.ParquetDecodingException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "INS EnumConstantDeclaration to EnumDeclaration at 4", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: BoundedIntValuesFactory to MethodInvocation at 0", "INS SimpleType: ValuesType to SingleVariableDeclaration at 0", "INS SimpleName: ColumnDescriptor to SimpleType: ColumnDescriptor at 0", "INS SimpleName: descriptor to SingleVariableDeclaration at 1", "INS SimpleName: valuesType to MethodInvocation at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: ValuesReader to SimpleType: ValuesReader at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: ValuesType to SimpleType: ValuesType at 0", "INS EnumConstantDeclaration to EnumDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: getValuesReader to MethodDeclaration at 3", "INS MethodInvocation to MethodInvocation at 2", "INS AnonymousClassDeclaration to EnumConstantDeclaration at 1", "INS SimpleType: ColumnDescriptor to SingleVariableDeclaration at 0", "INS SimpleType: ValuesReader to MethodDeclaration at 2", "INS SimpleName: descriptor to MethodInvocation at 1", "INS SimpleName: RLE to EnumConstantDeclaration at 0", "INS SimpleName: getMaxLevel to MethodInvocation at 0", "INS SimpleName: valuesType to SingleVariableDeclaration at 1", "INS SimpleName: getBoundedReader to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS EnumConstantDeclaration to EnumDeclaration at 5", "operations": ["INS SimpleType: ValuesReader to MethodDeclaration at 2", "INS SimpleName: BIT_PACKED to EnumConstantDeclaration at 0", "INS SimpleType: ColumnDescriptor to SingleVariableDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: valuesType to SingleVariableDeclaration at 1", "INS SimpleName: descriptor to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: getMaxLevel to MethodInvocation at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleType: BitPackingValuesReader to ClassInstanceCreation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: ValuesReader to SimpleType: ValuesReader at 0", "INS SimpleName: getValuesReader to MethodDeclaration at 3", "INS EnumConstantDeclaration to EnumDeclaration at 5", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: ColumnDescriptor to SimpleType: ColumnDescriptor at 0", "INS SimpleName: BitPackingValuesReader to SimpleType: BitPackingValuesReader at 0", "INS SimpleName: descriptor to SingleVariableDeclaration at 1", "INS SimpleType: ValuesType to SingleVariableDeclaration at 0", "INS SimpleName: ValuesType to SimpleType: ValuesType at 0", "INS AnonymousClassDeclaration to EnumConstantDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Block to MethodDeclaration at 6", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS SimpleName: valuesType to MethodInvocation at 2"]}, {"root": "INS MethodDeclaration to EnumDeclaration at 6", "operations": ["INS SimpleName: getMaxLevel to MethodDeclaration at 1", "INS SwitchCase to SwitchStatement at 1", "INS ExpressionStatement to SwitchStatement at 2", "INS SimpleName: ValuesType to SimpleType: ValuesType at 0", "INS SimpleName: valuesType to SwitchStatement at 0", "INS MethodDeclaration to EnumDeclaration at 6", "INS SimpleName: descriptor to SingleVariableDeclaration at 1", "INS ThrowStatement to SwitchStatement at 8", "INS SimpleName: maxLevel to VariableDeclarationFragment at 0", "INS Block to MethodDeclaration at 4", "INS SwitchStatement to Block at 1", "INS SimpleType: ColumnDescriptor to SingleVariableDeclaration at 0", "INS SimpleName: valuesType to SingleVariableDeclaration at 1", "INS SwitchCase to SwitchStatement at 7", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS BreakStatement to SwitchStatement at 6", "INS SimpleName: getMaxRepetitionLevel to MethodInvocation at 1", "INS SimpleType: ValuesType to SingleVariableDeclaration at 0", "INS SimpleType: ParquetDecodingException to ClassInstanceCreation at 0", "INS SimpleName: descriptor to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS BreakStatement to SwitchStatement at 3", "INS SimpleName: maxLevel to Assignment: = at 0", "INS ReturnStatement to Block at 2", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: maxLevel to Assignment: = at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS ThisExpression to InfixExpression: + at 1", "INS PrimitiveType: int to MethodDeclaration at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: descriptor to MethodInvocation at 0", "INS SimpleName: DEFINITION_LEVEL to SwitchCase at 0", "INS SimpleName: ColumnDescriptor to SimpleType: ColumnDescriptor at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS StringLiteral: \"Unsupported encoding for values: \" to InfixExpression: + at 0", "INS SimpleName: getMaxDefinitionLevel to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS ExpressionStatement to SwitchStatement at 5", "INS SimpleName: ParquetDecodingException to SimpleType: ParquetDecodingException at 0", "INS SwitchCase to SwitchStatement at 4", "INS SimpleName: maxLevel to ReturnStatement at 0", "INS SimpleName: REPETITION_LEVEL to SwitchCase at 0", "INS InfixExpression: + to ClassInstanceCreation at 1"]}, {"root": "INS MethodDeclaration to EnumDeclaration at 7", "operations": ["INS SimpleName: getValuesReader to MethodDeclaration at 4", "INS Javadoc to MethodDeclaration at 0", "INS Modifier: abstract to MethodDeclaration at 1", "INS Modifier: public to MethodDeclaration at 2", "INS SimpleName: valuesType to TagElement: @param at 0", "INS TextElement:  the column to read to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 1", "INS MethodDeclaration to EnumDeclaration at 7", "INS SimpleName: valuesType to SingleVariableDeclaration at 1", "INS SimpleName: ValuesReader to SimpleType: ValuesReader at 0", "INS SimpleName: ValuesType to SimpleType: ValuesType at 0", "INS TagElement: @return to Javadoc at 2", "INS SimpleName: descriptor to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleType: ValuesReader to MethodDeclaration at 3", "INS SimpleType: ColumnDescriptor to SingleVariableDeclaration at 0", "INS TextElement:  the type of values to TagElement: @param at 1", "INS TextElement:  the proper values reader for the given column to TagElement: @return at 0", "INS SimpleName: ColumnDescriptor to SimpleType: ColumnDescriptor at 0", "INS TagElement: @param to Javadoc at 0", "INS SimpleType: ValuesType to SingleVariableDeclaration at 0", "INS SimpleName: descriptor to TagElement: @param at 0"]}, {"root": "INS AnonymousClassDeclaration to EnumConstantDeclaration at 1", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: valuesType to SingleVariableDeclaration at 1", "INS SimpleName: BOOLEAN to SwitchCase at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: getValuesReader to MethodDeclaration at 3", "INS SimpleName: descriptor to MethodInvocation at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS MethodInvocation to SwitchStatement at 0", "INS ReturnStatement to SwitchStatement at 4", "INS SimpleName: PlainValuesReader to SimpleType: PlainValuesReader at 0", "INS SimpleType: ValuesReader to MethodDeclaration at 2", "INS SimpleType: PlainValuesReader to ClassInstanceCreation at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: ValuesReader to SimpleType: ValuesReader at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS AnonymousClassDeclaration to EnumConstantDeclaration at 1", "INS SimpleType: ValuesType to SingleVariableDeclaration at 0", "INS SimpleName: ColumnDescriptor to SimpleType: ColumnDescriptor at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleType: BooleanPlainValuesReader to ClassInstanceCreation at 0", "INS SimpleName: BooleanPlainValuesReader to SimpleType: BooleanPlainValuesReader at 0", "INS SwitchStatement to Block at 0", "INS Block to MethodDeclaration at 6", "INS SwitchCase to SwitchStatement at 1", "INS SimpleType: ColumnDescriptor to SingleVariableDeclaration at 0", "INS SimpleName: ValuesType to SimpleType: ValuesType at 0", "INS ReturnStatement to SwitchStatement at 2", "INS SimpleName: descriptor to SingleVariableDeclaration at 1", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SwitchCase to SwitchStatement at 3", "INS ClassInstanceCreation to ReturnStatement at 0"]}]}}, {"Encoding_diff": {"operations": ["Insert ImportDeclaration(15) into CompilationUnit(193) at 1", "Insert ImportDeclaration(17) into CompilationUnit(193) at 2", "Insert ImportDeclaration(19) into CompilationUnit(193) at 3", "Insert ImportDeclaration(21) into CompilationUnit(193) at 4", "Insert ImportDeclaration(23) into CompilationUnit(193) at 5", "Insert ImportDeclaration(25) into CompilationUnit(193) at 6", "Insert ImportDeclaration(27) into CompilationUnit(193) at 7", "Insert QualifiedName: parquet.column.values.ValuesReader(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: parquet.column.values.ValuesType(16) into ImportDeclaration(17) at 0", "Insert QualifiedName: parquet.column.values.bitpacking.BitPackingValuesReader(18) into ImportDeclaration(19) at 0", "Insert QualifiedName: parquet.column.values.boundedint.BoundedIntValuesFactory(20) into ImportDeclaration(21) at 0", "Insert QualifiedName: parquet.column.values.plain.BooleanPlainValuesReader(22) into ImportDeclaration(23) at 0", "Insert QualifiedName: parquet.column.values.plain.PlainValuesReader(24) into ImportDeclaration(25) at 0", "Insert QualifiedName: parquet.io.ParquetDecodingException(26) into ImportDeclaration(27) at 0", "Insert EnumConstantDeclaration(95) into EnumDeclaration(192) at 4", "Insert EnumConstantDeclaration(122) into EnumDeclaration(192) at 5", "Insert MethodDeclaration(168) into EnumDeclaration(192) at 6", "Insert MethodDeclaration(191) into EnumDeclaration(192) at 7", "Insert AnonymousClassDeclaration(67) into EnumConstantDeclaration(68) at 1", "Insert SimpleName: RLE(69) into EnumConstantDeclaration(95) at 0", "Insert AnonymousClassDeclaration(94) into EnumConstantDeclaration(95) at 1", "Insert SimpleName: BIT_PACKED(96) into EnumConstantDeclaration(122) at 0", "Insert AnonymousClassDeclaration(121) into EnumConstantDeclaration(122) at 1", "Insert PrimitiveType: int(123) into MethodDeclaration(168) at 0", "Insert SimpleName: getMaxLevel(124) into MethodDeclaration(168) at 1", "Insert SingleVariableDeclaration(128) into MethodDeclaration(168) at 2", "Insert SingleVariableDeclaration(132) into MethodDeclaration(168) at 3", "Insert Block(167) into MethodDeclaration(168) at 4", "Insert Javadoc(177) into MethodDeclaration(191) at 0", "Insert Modifier: abstract(178) into MethodDeclaration(191) at 1", "Insert Modifier: public(179) into MethodDeclaration(191) at 2", "Insert SimpleType: ValuesReader(181) into MethodDeclaration(191) at 3", "Insert SimpleName: getValuesReader(182) into MethodDeclaration(191) at 4", "Insert SingleVariableDeclaration(186) into MethodDeclaration(191) at 5", "Insert SingleVariableDeclaration(190) into MethodDeclaration(191) at 6", "Insert MethodDeclaration(66) into AnonymousClassDeclaration(67) at 0", "Insert MethodDeclaration(93) into AnonymousClassDeclaration(94) at 0", "Insert MethodDeclaration(120) into AnonymousClassDeclaration(121) at 0", "Insert SimpleType: ColumnDescriptor(126) into SingleVariableDeclaration(128) at 0", "Insert SimpleName: descriptor(127) into SingleVariableDeclaration(128) at 1", "Insert SimpleType: ValuesType(130) into SingleVariableDeclaration(132) at 0", "Insert SimpleName: valuesType(131) into SingleVariableDeclaration(132) at 1", "Insert VariableDeclarationStatement(136) into Block(167) at 0", "Insert SwitchStatement(164) into Block(167) at 1", "Insert ReturnStatement(166) into Block(167) at 2", "Insert TagElement: @param(171) into Javadoc(177) at 0", "Insert TagElement: @param(174) into Javadoc(177) at 1", "Insert TagElement: @return(176) into Javadoc(177) at 2", "Insert SimpleName: ValuesReader(180) into SimpleType: ValuesReader(181) at 0", "Insert SimpleType: ColumnDescriptor(184) into SingleVariableDeclaration(186) at 0", "Insert SimpleName: descriptor(185) into SingleVariableDeclaration(186) at 1", "Insert SimpleType: ValuesType(188) into SingleVariableDeclaration(190) at 0", "Insert SimpleName: valuesType(189) into SingleVariableDeclaration(190) at 1", "Insert MarkerAnnotation(37) into MethodDeclaration(66) at 0", "Insert Modifier: public(38) into MethodDeclaration(66) at 1", "Insert SimpleType: ValuesReader(40) into MethodDeclaration(66) at 2", "Insert SimpleName: getValuesReader(41) into MethodDeclaration(66) at 3", "Insert SingleVariableDeclaration(45) into MethodDeclaration(66) at 4", "Insert SingleVariableDeclaration(49) into MethodDeclaration(66) at 5", "Insert Block(65) into MethodDeclaration(66) at 6", "Insert MarkerAnnotation(71) into MethodDeclaration(93) at 0", "Insert Modifier: public(72) into MethodDeclaration(93) at 1", "Insert SimpleType: ValuesReader(74) into MethodDeclaration(93) at 2", "Insert SimpleName: getValuesReader(75) into MethodDeclaration(93) at 3", "Insert SingleVariableDeclaration(79) into MethodDeclaration(93) at 4", "Insert SingleVariableDeclaration(83) into MethodDeclaration(93) at 5", "Insert Block(92) into MethodDeclaration(93) at 6", "Insert MarkerAnnotation(98) into MethodDeclaration(120) at 0", "Insert Modifier: public(99) into MethodDeclaration(120) at 1", "Insert SimpleType: ValuesReader(101) into MethodDeclaration(120) at 2", "Insert SimpleName: getValuesReader(102) into MethodDeclaration(120) at 3", "Insert SingleVariableDeclaration(106) into MethodDeclaration(120) at 4", "Insert SingleVariableDeclaration(110) into MethodDeclaration(120) at 5", "Insert Block(119) into MethodDeclaration(120) at 6", "Insert SimpleName: ColumnDescriptor(125) into SimpleType: ColumnDescriptor(126) at 0", "Insert SimpleName: ValuesType(129) into SimpleType: ValuesType(130) at 0", "Insert PrimitiveType: int(133) into VariableDeclarationStatement(136) at 0", "Insert VariableDeclarationFragment(135) into VariableDeclarationStatement(136) at 1", "Insert SimpleName: valuesType(137) into SwitchStatement(164) at 0", "Insert SwitchCase(139) into SwitchStatement(164) at 1", "Insert ExpressionStatement(145) into SwitchStatement(164) at 2", "Insert BreakStatement(146) into SwitchStatement(164) at 3", "Insert SwitchCase(148) into SwitchStatement(164) at 4", "Insert ExpressionStatement(154) into SwitchStatement(164) at 5", "Insert BreakStatement(155) into SwitchStatement(164) at 6", "Insert SwitchCase(156) into SwitchStatement(164) at 7", "Insert ThrowStatement(163) into SwitchStatement(164) at 8", "Insert SimpleName: maxLevel(165) into ReturnStatement(166) at 0", "Insert SimpleName: descriptor(169) into TagElement: @param(171) at 0", "Insert TextElement:  the column to read(170) into TagElement: @param(171) at 1", "Insert SimpleName: valuesType(172) into TagElement: @param(174) at 0", "Insert TextElement:  the type of values(173) into TagElement: @param(174) at 1", "Insert TextElement:  the proper values reader for the given column(175) into TagElement: @return(176) at 0", "Insert SimpleName: ColumnDescriptor(183) into SimpleType: ColumnDescriptor(184) at 0", "Insert SimpleName: ValuesType(187) into SimpleType: ValuesType(188) at 0", "Insert SimpleName: Override(36) into MarkerAnnotation(37) at 0", "Insert SimpleName: ValuesReader(39) into SimpleType: ValuesReader(40) at 0", "Insert SimpleType: ColumnDescriptor(43) into SingleVariableDeclaration(45) at 0", "Insert SimpleName: descriptor(44) into SingleVariableDeclaration(45) at 1", "Insert SimpleType: ValuesType(47) into SingleVariableDeclaration(49) at 0", "Insert SimpleName: valuesType(48) into SingleVariableDeclaration(49) at 1", "Insert SwitchStatement(64) into Block(65) at 0", "Insert SimpleName: Override(70) into MarkerAnnotation(71) at 0", "Insert SimpleName: ValuesReader(73) into SimpleType: ValuesReader(74) at 0", "Insert SimpleType: ColumnDescriptor(77) into SingleVariableDeclaration(79) at 0", "Insert SimpleName: descriptor(78) into SingleVariableDeclaration(79) at 1", "Insert SimpleType: ValuesType(81) into SingleVariableDeclaration(83) at 0", "Insert SimpleName: valuesType(82) into SingleVariableDeclaration(83) at 1", "Insert ReturnStatement(91) into Block(92) at 0", "Insert SimpleName: Override(97) into MarkerAnnotation(98) at 0", "Insert SimpleName: ValuesReader(100) into SimpleType: ValuesReader(101) at 0", "Insert SimpleType: ColumnDescriptor(104) into SingleVariableDeclaration(106) at 0", "Insert SimpleName: descriptor(105) into SingleVariableDeclaration(106) at 1", "Insert SimpleType: ValuesType(108) into SingleVariableDeclaration(110) at 0", "Insert SimpleName: valuesType(109) into SingleVariableDeclaration(110) at 1", "Insert ReturnStatement(118) into Block(119) at 0", "Insert SimpleName: maxLevel(134) into VariableDeclarationFragment(135) at 0", "Insert SimpleName: REPETITION_LEVEL(138) into SwitchCase(139) at 0", "Insert Assignment: =(144) into ExpressionStatement(145) at 0", "Insert SimpleName: DEFINITION_LEVEL(147) into SwitchCase(148) at 0", "Insert Assignment: =(153) into ExpressionStatement(154) at 0", "Insert ClassInstanceCreation(162) into ThrowStatement(163) at 0", "Insert SimpleName: ColumnDescriptor(42) into SimpleType: ColumnDescriptor(43) at 0", "Insert SimpleName: ValuesType(46) into SimpleType: ValuesType(47) at 0", "Insert MethodInvocation(52) into SwitchStatement(64) at 0", "Insert SwitchCase(54) into SwitchStatement(64) at 1", "Insert ReturnStatement(58) into SwitchStatement(64) at 2", "Insert SwitchCase(59) into SwitchStatement(64) at 3", "Insert ReturnStatement(63) into SwitchStatement(64) at 4", "Insert SimpleName: ColumnDescriptor(76) into SimpleType: ColumnDescriptor(77) at 0", "Insert SimpleName: ValuesType(80) into SimpleType: ValuesType(81) at 0", "Insert MethodInvocation(90) into ReturnStatement(91) at 0", "Insert SimpleName: ColumnDescriptor(103) into SimpleType: ColumnDescriptor(104) at 0", "Insert SimpleName: ValuesType(107) into SimpleType: ValuesType(108) at 0", "Insert ClassInstanceCreation(117) into ReturnStatement(118) at 0", "Insert SimpleName: maxLevel(140) into Assignment: =(144) at 0", "Insert MethodInvocation(143) into Assignment: =(144) at 1", "Insert SimpleName: maxLevel(149) into Assignment: =(153) at 0", "Insert MethodInvocation(152) into Assignment: =(153) at 1", "Insert SimpleType: ParquetDecodingException(158) into ClassInstanceCreation(162) at 0", "Insert InfixExpression: +(161) into ClassInstanceCreation(162) at 1", "Insert SimpleName: descriptor(50) into MethodInvocation(52) at 0", "Insert SimpleName: getType(51) into MethodInvocation(52) at 1", "Insert SimpleName: BOOLEAN(53) into SwitchCase(54) at 0", "Insert ClassInstanceCreation(57) into ReturnStatement(58) at 0", "Insert ClassInstanceCreation(62) into ReturnStatement(63) at 0", "Insert SimpleName: BoundedIntValuesFactory(84) into MethodInvocation(90) at 0", "Insert SimpleName: getBoundedReader(85) into MethodInvocation(90) at 1", "Insert MethodInvocation(89) into MethodInvocation(90) at 2", "Insert SimpleType: BitPackingValuesReader(112) into ClassInstanceCreation(117) at 0", "Insert MethodInvocation(116) into ClassInstanceCreation(117) at 1", "Insert SimpleName: descriptor(141) into MethodInvocation(143) at 0", "Insert SimpleName: getMaxRepetitionLevel(142) into MethodInvocation(143) at 1", "Insert SimpleName: descriptor(150) into MethodInvocation(152) at 0", "Insert SimpleName: getMaxDefinitionLevel(151) into MethodInvocation(152) at 1", "Insert SimpleName: ParquetDecodingException(157) into SimpleType: ParquetDecodingException(158) at 0", "Insert StringLiteral: \"Unsupported encoding for values: \"(159) into InfixExpression: +(161) at 0", "Insert ThisExpression(160) into InfixExpression: +(161) at 1", "Insert SimpleType: BooleanPlainValuesReader(56) into ClassInstanceCreation(57) at 0", "Insert SimpleType: PlainValuesReader(61) into ClassInstanceCreation(62) at 0", "Insert SimpleName: getMaxLevel(86) into MethodInvocation(89) at 0", "Insert SimpleName: descriptor(87) into MethodInvocation(89) at 1", "Insert SimpleName: valuesType(88) into MethodInvocation(89) at 2", "Insert SimpleName: BitPackingValuesReader(111) into SimpleType: BitPackingValuesReader(112) at 0", "Insert SimpleName: getMaxLevel(113) into MethodInvocation(116) at 0", "Insert SimpleName: descriptor(114) into MethodInvocation(116) at 1", "Insert SimpleName: valuesType(115) into MethodInvocation(116) at 2", "Insert SimpleName: BooleanPlainValuesReader(55) into SimpleType: BooleanPlainValuesReader(56) at 0", "Insert SimpleName: PlainValuesReader(60) into SimpleType: PlainValuesReader(61) at 0"]}}, {"ColumnChunkPageReadStore_cluster": {"actions": [{"root": "INS MethodInvocation to ClassInstanceCreation at 5", "operations": ["INS MethodInvocation to ClassInstanceCreation at 5", "INS SimpleName: getDlEncoding to MethodInvocation at 1", "INS SimpleName: compressedPage to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 6", "operations": ["INS SimpleName: getValueEncoding to MethodInvocation at 1", "INS SimpleName: compressedPage to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 6"]}, {"root": "UPDATE from getEncoding to getRlEncoding", "operations": ["UPD SimpleName: getEncoding from getEncoding to getRlEncoding"]}]}}, {"ColumnChunkPageReadStore_diff": {"operations": ["Insert MethodInvocation(201) into ClassInstanceCreation(205) at 5", "Insert MethodInvocation(204) into ClassInstanceCreation(205) at 6", "Update SimpleName: getEncoding(197) to getRlEncoding", "Insert SimpleName: compressedPage(199) into MethodInvocation(201) at 0", "Insert SimpleName: getDlEncoding(200) into MethodInvocation(201) at 1", "Insert SimpleName: compressedPage(202) into MethodInvocation(204) at 0", "Insert SimpleName: getValueEncoding(203) into MethodInvocation(204) at 1"]}}, {"ColumnChunkPageWriteStore_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SimpleType: Encoding to SingleVariableDeclaration at 0", "INS SimpleName: Encoding to SimpleType: Encoding at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleName: dlEncoding to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 8", "INS SimpleName: valuesEncoding to SingleVariableDeclaration at 1", "INS SimpleName: Encoding to SimpleType: Encoding at 0", "INS SimpleType: Encoding to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from encoding to rlEncoding", "operations": ["UPD SimpleName: encoding from encoding to rlEncoding", "UPD SimpleName: encoding from encoding to rlEncoding", "UPD SimpleName: encoding from encoding to rlEncoding"]}, {"root": "INS ExpressionStatement to Block at 9", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: encodings to MethodInvocation at 0", "INS SimpleName: add to MethodInvocation at 1", "INS ExpressionStatement to Block at 9", "INS SimpleName: dlEncoding to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 10", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 10", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: encodings to MethodInvocation at 0", "INS SimpleName: valuesEncoding to MethodInvocation at 2"]}, {"root": "INS SimpleName: dlEncoding to MethodInvocation at 6", "operations": ["INS SimpleName: dlEncoding to MethodInvocation at 6"]}, {"root": "INS SimpleName: valuesEncoding to MethodInvocation at 7", "operations": ["INS SimpleName: valuesEncoding to MethodInvocation at 7"]}]}}, {"ColumnChunkPageWriteStore_diff": {"operations": ["Insert SingleVariableDeclaration(171) into MethodDeclaration(255) at 7", "Insert SingleVariableDeclaration(175) into MethodDeclaration(255) at 8", "Update SimpleName: encoding(166) to rlEncoding", "Insert SimpleType: Encoding(169) into SingleVariableDeclaration(171) at 0", "Insert SimpleName: dlEncoding(170) into SingleVariableDeclaration(171) at 1", "Insert SimpleType: Encoding(173) into SingleVariableDeclaration(175) at 0", "Insert SimpleName: valuesEncoding(174) into SingleVariableDeclaration(175) at 1", "Insert ExpressionStatement(248) into Block(254) at 9", "Insert ExpressionStatement(253) into Block(254) at 10", "Insert SimpleName: Encoding(168) into SimpleType: Encoding(169) at 0", "Insert SimpleName: Encoding(172) into SimpleType: Encoding(173) at 0", "Insert MethodInvocation(247) into ExpressionStatement(248) at 0", "Insert MethodInvocation(252) into ExpressionStatement(253) at 0", "Update SimpleName: encoding(202) to rlEncoding", "Insert SimpleName: dlEncoding(211) into MethodInvocation(214) at 6", "Insert SimpleName: valuesEncoding(212) into MethodInvocation(214) at 7", "Update SimpleName: encoding(231) to rlEncoding", "Insert SimpleName: encodings(244) into MethodInvocation(247) at 0", "Insert SimpleName: add(245) into MethodInvocation(247) at 1", "Insert SimpleName: dlEncoding(246) into MethodInvocation(247) at 2", "Insert SimpleName: encodings(249) into MethodInvocation(252) at 0", "Insert SimpleName: add(250) into MethodInvocation(252) at 1", "Insert SimpleName: valuesEncoding(251) into MethodInvocation(252) at 2"]}}, {"ParquetFileReader_cluster": {"actions": [{"root": "INS MethodInvocation to ClassInstanceCreation at 4", "operations": ["INS MethodInvocation to ClassInstanceCreation at 4", "INS QualifiedName: pageHeader.data_page_header.repetition_level_encoding to MethodInvocation at 2", "INS SimpleName: parquetMetadataConverter to MethodInvocation at 0", "INS SimpleName: getEncoding to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 5", "operations": ["INS SimpleName: parquetMetadataConverter to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 5", "INS QualifiedName: pageHeader.data_page_header.definition_level_encoding to MethodInvocation at 2", "INS SimpleName: getEncoding to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collection", "DEL ImportDeclaration"]}]}}, {"ParquetFileReader_diff": {"operations": ["Insert MethodInvocation(1671) into ClassInstanceCreation(1680) at 4", "Insert MethodInvocation(1675) into ClassInstanceCreation(1680) at 5", "Insert SimpleName: parquetMetadataConverter(1668) into MethodInvocation(1671) at 0", "Insert SimpleName: getEncoding(1669) into MethodInvocation(1671) at 1", "Insert QualifiedName: pageHeader.data_page_header.repetition_level_encoding(1670) into MethodInvocation(1671) at 2", "Insert SimpleName: parquetMetadataConverter(1672) into MethodInvocation(1675) at 0", "Insert SimpleName: getEncoding(1673) into MethodInvocation(1675) at 1", "Insert QualifiedName: pageHeader.data_page_header.definition_level_encoding(1674) into MethodInvocation(1675) at 2", "Delete QualifiedName: java.util.Collection(30)", "Delete ImportDeclaration(31)"]}}, {"ParquetFileWriter_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 8", "INS SimpleType: parquet.column.Encoding to SingleVariableDeclaration at 0", "INS SimpleName: dlEncoding to SingleVariableDeclaration at 1", "INS QualifiedName: parquet.column.Encoding to SimpleType: parquet.column.Encoding at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 9", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 9", "INS SimpleName: valuesEncoding to SingleVariableDeclaration at 1", "INS QualifiedName: parquet.column.Encoding to SimpleType: parquet.column.Encoding at 0", "INS SimpleType: parquet.column.Encoding to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from encoding to rlEncoding", "operations": ["UPD SimpleName: encoding from encoding to rlEncoding", "UPD SimpleName: encoding from encoding to rlEncoding", "UPD SimpleName: encoding from encoding to rlEncoding"]}, {"root": "INS ExpressionStatement to Block at 9", "operations": ["INS SimpleName: dlEncoding to MethodInvocation at 2", "INS SimpleName: add to MethodInvocation at 1", "INS ExpressionStatement to Block at 9", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: currentEncodings to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 10", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: currentEncodings to MethodInvocation at 0", "INS SimpleName: add to MethodInvocation at 1", "INS ExpressionStatement to Block at 10", "INS SimpleName: valuesEncoding to MethodInvocation at 2"]}, {"root": "INS SimpleName: dlEncoding to MethodInvocation at 6", "operations": ["INS SimpleName: dlEncoding to MethodInvocation at 6"]}, {"root": "INS SimpleName: valuesEncoding to MethodInvocation at 7", "operations": ["INS SimpleName: valuesEncoding to MethodInvocation at 7"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.OutputStream", "DEL ImportDeclaration"]}]}}, {"ParquetFileWriter_diff": {"operations": ["Insert SingleVariableDeclaration(627) into MethodDeclaration(718) at 8", "Insert SingleVariableDeclaration(631) into MethodDeclaration(718) at 9", "Update SimpleName: encoding(624) to rlEncoding", "Insert SimpleType: parquet.column.Encoding(625) into SingleVariableDeclaration(627) at 0", "Insert SimpleName: dlEncoding(626) into SingleVariableDeclaration(627) at 1", "Insert SimpleType: parquet.column.Encoding(629) into SingleVariableDeclaration(631) at 0", "Insert SimpleName: valuesEncoding(630) into SingleVariableDeclaration(631) at 1", "Insert ExpressionStatement(711) into Block(717) at 9", "Insert ExpressionStatement(716) into Block(717) at 10", "Insert QualifiedName: parquet.column.Encoding(624) into SimpleType: parquet.column.Encoding(625) at 0", "Insert QualifiedName: parquet.column.Encoding(628) into SimpleType: parquet.column.Encoding(629) at 0", "Insert MethodInvocation(710) into ExpressionStatement(711) at 0", "Insert MethodInvocation(715) into ExpressionStatement(716) at 0", "Update SimpleName: encoding(661) to rlEncoding", "Insert SimpleName: dlEncoding(668) into MethodInvocation(671) at 6", "Insert SimpleName: valuesEncoding(669) into MethodInvocation(671) at 7", "Update SimpleName: encoding(696) to rlEncoding", "Insert SimpleName: currentEncodings(707) into MethodInvocation(710) at 0", "Insert SimpleName: add(708) into MethodInvocation(710) at 1", "Insert SimpleName: dlEncoding(709) into MethodInvocation(710) at 2", "Insert SimpleName: currentEncodings(712) into MethodInvocation(715) at 0", "Insert SimpleName: add(713) into MethodInvocation(715) at 1", "Insert SimpleName: valuesEncoding(714) into MethodInvocation(715) at 2", "Delete QualifiedName: java.io.OutputStream(20)", "Delete ImportDeclaration(21)"]}}, {"ColumnReaderImpl_cluster": {"actions": [{"root": "UPDATE from parquet.column.values.plain.PlainValuesReader to parquet.column.values.ValuesType", "operations": ["UPD QualifiedName: parquet.column.values.plain.PlainValuesReader from parquet.column.values.plain.PlainValuesReader to parquet.column.values.ValuesType"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS QualifiedName: ValuesType.REPETITION_LEVEL to MethodInvocation at 3", "INS MethodInvocation to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: getValuesReader to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: repetitionLevelColumn to FieldAccess at 1"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 6", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getValuesReader to MethodInvocation at 1", "INS SimpleName: path to MethodInvocation at 2", "INS QualifiedName: ValuesType.VALUES to MethodInvocation at 3"]}, {"root": "INS FieldAccess to Assignment: = at 0", "operations": ["INS SimpleName: definitionLevelColumn to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV FieldAccess to Assignment: = at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: path to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getDlEncoding to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from getBoundedReader to getValuesReader", "operations": ["UPD SimpleName: getBoundedReader from getBoundedReader to getValuesReader"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: path to MethodInvocation at 3"]}, {"root": "INS QualifiedName: ValuesType.DEFINITION_LEVEL to MethodInvocation at 4", "operations": ["INS QualifiedName: ValuesType.DEFINITION_LEVEL to MethodInvocation at 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getEncoding to MethodInvocation at 1", "MOV SimpleName: page to MethodInvocation at 0"]}, {"root": "UPDATE from getEncoding to getRlEncoding", "operations": ["UPD SimpleName: getEncoding from getEncoding to getRlEncoding"]}, {"root": "UPDATE from path to page", "operations": ["UPD SimpleName: path from path to page", "UPD SimpleName: BoundedIntValuesFactory from BoundedIntValuesFactory to page"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: BoundedIntValuesFactory to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getType to MethodInvocation at 1", "MOV SimpleName: path to MethodInvocation at 0"]}, {"root": "UPDATE from getType to getValueEncoding", "operations": ["UPD SimpleName: getType from getType to getValueEncoding"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: parquet.column.Encoding.PLAIN"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: parquet.column.values.bitpacking.BitPackingValuesReader"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: parquet.column.values.boundedint.BoundedIntValuesFactory", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: parquet.column.values.plain.BooleanPlainValuesReader"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: PLAIN", "DEL IfStatement", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL StringLiteral: \"Unsupported encoding: \"", "DEL SimpleName: page", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: getEncoding", "DEL InfixExpression: !=", "DEL SimpleType: ParquetDecodingException", "DEL SimpleName: ParquetDecodingException", "DEL Block", "DEL ThrowStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: BitPackingValuesReader", "DEL SimpleName: repetitionLevelColumn", "DEL Assignment: =", "DEL SimpleName: getMaxRepetitionLevel", "DEL ClassInstanceCreation", "DEL SimpleType: BitPackingValuesReader", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: definitionLevelColumn", "operations": ["DEL SimpleName: definitionLevelColumn"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getMaxDefinitionLevel"]}, {"root": "DEL SwitchStatement", "operations": ["DEL MethodInvocation", "DEL SimpleType: BooleanPlainValuesReader", "DEL SwitchStatement", "DEL ExpressionStatement", "DEL SimpleName: PlainValuesReader", "DEL SimpleName: BOOLEAN", "DEL BreakStatement", "DEL SwitchCase", "DEL SimpleName: BooleanPlainValuesReader", "DEL SwitchCase", "DEL FieldAccess", "DEL ThisExpression", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SimpleType: PlainValuesReader", "DEL ClassInstanceCreation", "DEL Assignment: =", "DEL SimpleName: dataColumn", "DEL Assignment: ="]}]}}, {"ColumnReaderImpl_diff": {"operations": ["Update QualifiedName: parquet.column.values.plain.PlainValuesReader(38) to parquet.column.values.ValuesType", "Insert ExpressionStatement(508) into Block(639) at 2", "Insert ExpressionStatement(532) into Block(639) at 4", "Insert Assignment: =(507) into ExpressionStatement(508) at 0", "Insert Assignment: =(531) into ExpressionStatement(532) at 0", "Insert FieldAccess(499) into Assignment: =(507) at 0", "Insert MethodInvocation(506) into Assignment: =(507) at 1", "Insert FieldAccess(511) into Assignment: =(519) at 0", "Move FieldAccess(546) into Assignment: =(531) at 0", "Insert MethodInvocation(530) into Assignment: =(531) at 1", "Insert ThisExpression(497) into FieldAccess(499) at 0", "Insert SimpleName: repetitionLevelColumn(498) into FieldAccess(499) at 1", "Insert MethodInvocation(502) into MethodInvocation(506) at 0", "Insert SimpleName: getValuesReader(503) into MethodInvocation(506) at 1", "Move SimpleName: path(524) into MethodInvocation(506) at 2", "Insert QualifiedName: ValuesType.REPETITION_LEVEL(505) into MethodInvocation(506) at 3", "Insert ThisExpression(509) into FieldAccess(511) at 0", "Insert SimpleName: definitionLevelColumn(510) into FieldAccess(511) at 1", "Insert MethodInvocation(514) into MethodInvocation(518) at 0", "Update SimpleName: getBoundedReader(532) to getValuesReader", "Move SimpleName: path(533) into MethodInvocation(518) at 3", "Insert QualifiedName: ValuesType.DEFINITION_LEVEL(517) into MethodInvocation(518) at 3", "Insert MethodInvocation(526) into MethodInvocation(530) at 0", "Insert SimpleName: getValuesReader(527) into MethodInvocation(530) at 1", "Insert SimpleName: path(528) into MethodInvocation(530) at 2", "Insert QualifiedName: ValuesType.VALUES(529) into MethodInvocation(530) at 3", "Move SimpleName: page(513) into MethodInvocation(502) at 0", "Update SimpleName: getEncoding(514) to getRlEncoding", "Move SimpleName: getEncoding(514) into MethodInvocation(502) at 1", "Update SimpleName: BoundedIntValuesFactory(531) to page", "Move SimpleName: BoundedIntValuesFactory(531) into MethodInvocation(514) at 0", "Insert SimpleName: getDlEncoding(513) into MethodInvocation(514) at 1", "Update SimpleName: path(539) to page", "Move SimpleName: path(539) into MethodInvocation(526) at 0", "Update SimpleName: getType(540) to getValueEncoding", "Move SimpleName: getType(540) into MethodInvocation(526) at 1", "Delete QualifiedName: parquet.column.Encoding.PLAIN(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: parquet.column.values.bitpacking.BitPackingValuesReader(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: parquet.column.values.boundedint.BoundedIntValuesFactory(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: parquet.column.values.plain.BooleanPlainValuesReader(36)", "Delete ImportDeclaration(37)", "Delete SimpleName: page(505)", "Delete SimpleName: getEncoding(506)", "Delete MethodInvocation(507)", "Delete SimpleName: PLAIN(508)", "Delete InfixExpression: !=(509)", "Delete SimpleName: ParquetDecodingException(510)", "Delete SimpleType: ParquetDecodingException(511)", "Delete StringLiteral: \"Unsupported encoding: \"(512)", "Delete MethodInvocation(515)", "Delete InfixExpression: +(516)", "Delete ClassInstanceCreation(517)", "Delete ThrowStatement(518)", "Delete Block(519)", "Delete IfStatement(520)", "Delete SimpleName: repetitionLevelColumn(521)", "Delete SimpleName: BitPackingValuesReader(522)", "Delete SimpleType: BitPackingValuesReader(523)", "Delete SimpleName: getMaxRepetitionLevel(525)", "Delete MethodInvocation(526)", "Delete ClassInstanceCreation(527)", "Delete Assignment: =(528)", "Delete ExpressionStatement(529)", "Delete SimpleName: definitionLevelColumn(530)", "Delete SimpleName: getMaxDefinitionLevel(534)", "Delete MethodInvocation(535)", "Delete MethodInvocation(541)", "Delete SimpleName: BOOLEAN(542)", "Delete SwitchCase(543)", "Delete SimpleName: BooleanPlainValuesReader(547)", "Delete SimpleType: BooleanPlainValuesReader(548)", "Delete ClassInstanceCreation(549)", "Delete Assignment: =(550)", "Delete ExpressionStatement(551)", "Delete BreakStatement(552)", "Delete SwitchCase(553)", "Delete ThisExpression(554)", "Delete SimpleName: dataColumn(555)", "Delete FieldAccess(556)", "Delete SimpleName: PlainValuesReader(557)", "Delete SimpleType: PlainValuesReader(558)", "Delete ClassInstanceCreation(559)", "Delete Assignment: =(560)", "Delete ExpressionStatement(561)", "Delete SwitchStatement(562)"]}}, {"ColumnWriterImpl_cluster": {"actions": [{"root": "UPDATE from DataValuesWriter to ValuesWriter", "operations": ["UPD SimpleType: DataValuesWriter from DataValuesWriter to ValuesWriter", "UPD SimpleName: DataValuesWriter from DataValuesWriter to ValuesWriter"]}, {"root": "INS ClassInstanceCreation to Assignment: = at 1", "operations": ["INS SimpleName: BitPackingValuesWriter to SimpleType: BitPackingValuesWriter at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleType: BitPackingValuesWriter to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 4", "operations": ["INS MethodInvocation to MethodInvocation at 4", "INS SimpleName: getEncoding to MethodInvocation at 1", "INS SimpleName: repetitionLevelColumn to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 5", "operations": ["INS SimpleName: getEncoding to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 5", "INS SimpleName: definitionLevelColumn to MethodInvocation at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: parquet.column.values.DataValuesWriter"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: parquet.column.values.boundedint.BoundedIntValuesFactory", "DEL ImportDeclaration"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: BoundedIntValuesFactory", "DEL MethodInvocation", "DEL SimpleName: getBoundedWriter"]}]}}, {"ColumnWriterImpl_diff": {"operations": ["Update SimpleType: DataValuesWriter(102) to ValuesWriter", "Update SimpleName: DataValuesWriter(101) to ValuesWriter", "Insert ClassInstanceCreation(153) into Assignment: =(154) at 1", "Insert SimpleType: BitPackingValuesWriter(149) into ClassInstanceCreation(153) at 0", "Move MethodInvocation(156) into ClassInstanceCreation(153) at 1", "Insert SimpleName: BitPackingValuesWriter(148) into SimpleType: BitPackingValuesWriter(149) at 0", "Insert MethodInvocation(276) into MethodInvocation(283) at 4", "Insert MethodInvocation(279) into MethodInvocation(283) at 5", "Insert SimpleName: repetitionLevelColumn(274) into MethodInvocation(276) at 0", "Insert SimpleName: getEncoding(275) into MethodInvocation(276) at 1", "Insert SimpleName: definitionLevelColumn(277) into MethodInvocation(279) at 0", "Insert SimpleName: getEncoding(278) into MethodInvocation(279) at 1", "Delete QualifiedName: parquet.column.values.DataValuesWriter(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: parquet.column.values.boundedint.BoundedIntValuesFactory(32)", "Delete ImportDeclaration(33)", "Delete SimpleName: BoundedIntValuesFactory(152)", "Delete SimpleName: getBoundedWriter(153)", "Delete MethodInvocation(157)"]}}, {"Page_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 10", "INS SimpleName: Encoding to SimpleType: Encoding at 0", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleType: Encoding to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: dlEncoding to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 11", "operations": ["INS SimpleType: Encoding to FieldDeclaration at 2", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: valuesEncoding to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 11", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: Encoding to SimpleType: Encoding at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS SimpleName: rlEncoding to ReturnStatement at 0", "INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Encoding to SimpleType: Encoding at 0", "INS TagElement: @return to Javadoc at 0", "INS Javadoc to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS SimpleType: Encoding to MethodDeclaration at 2", "INS SimpleName: getRlEncoding to MethodDeclaration at 3", "INS TextElement:  the repetition level encoding for this page to TagElement: @return at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS SimpleName: valuesEncoding to ReturnStatement at 0", "INS TagElement: @return to Javadoc at 0", "INS TextElement:  the values encoding for this page to TagElement: @return at 0", "INS Javadoc to MethodDeclaration at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: getValueEncoding to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS ReturnStatement to Block at 0", "INS SimpleType: Encoding to MethodDeclaration at 2", "INS SimpleName: Encoding to SimpleType: Encoding at 0", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SimpleName: Encoding to SimpleType: Encoding at 0", "INS SimpleType: Encoding to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleName: dlEncoding to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS SimpleType: Encoding to SingleVariableDeclaration at 0", "INS SimpleName: Encoding to SimpleType: Encoding at 0", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS SimpleName: valuesEncoding to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from getEncoding to getDlEncoding", "operations": ["UPD SimpleName: getEncoding from getEncoding to getDlEncoding"]}, {"root": "UPDATE from encoding to rlEncoding", "operations": ["UPD SimpleName: encoding from encoding to rlEncoding", "UPD SimpleName: encoding from encoding to rlEncoding", "UPD SimpleName: encoding from encoding to rlEncoding", "UPD SimpleName: encoding from encoding to rlEncoding"]}, {"root": "INS TagElement: @param to Javadoc at 3", "operations": ["INS TextElement:  the repetition level encoding for this page to TagElement: @param at 1", "INS SimpleName: rlEncoding to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 3"]}, {"root": "INS TagElement: @param to Javadoc at 4", "operations": ["INS SimpleName: dlEncoding to TagElement: @param at 0", "INS TextElement:  the definition level encoding for this page to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 4"]}, {"root": "INS TagElement: @param to Javadoc at 6", "operations": ["INS TagElement: @param to Javadoc at 6", "INS SimpleName: dlEncoding to TagElement: @param at 0"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS ExpressionStatement to Block at 4", "INS SimpleName: dlEncoding to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: dlEncoding to FieldAccess at 1"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 5", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: valuesEncoding to Assignment: = at 1", "INS SimpleName: valuesEncoding to FieldAccess at 1"]}, {"root": "UPDATE from encoding to valuesEncoding", "operations": ["UPD SimpleName: encoding from encoding to valuesEncoding"]}, {"root": "UPDATE from  the encoding for this page to  the values encoding for this page", "operations": ["UPD TextElement:  the encoding for this page from  the encoding for this page to  the values encoding for this page"]}, {"root": "UPDATE from  the encoding for this page to  the definition level encoding for this page", "operations": ["UPD TextElement:  the encoding for this page from  the encoding for this page to  the definition level encoding for this page"]}, {"root": "UPDATE from encoding to dlEncoding", "operations": ["UPD SimpleName: encoding from encoding to dlEncoding"]}, {"root": "DEL StringLiteral: \", encoding=\"", "operations": ["DEL StringLiteral: \", encoding=\""]}, {"root": "DEL SimpleName: encoding", "operations": ["DEL SimpleName: encoding"]}]}}, {"Page_diff": {"operations": ["Insert FieldDeclaration(88) into TypeDeclaration: class(293) at 10", "Insert FieldDeclaration(95) into TypeDeclaration: class(293) at 11", "Insert MethodDeclaration(260) into TypeDeclaration: class(293) at 18", "Insert MethodDeclaration(271) into TypeDeclaration: class(293) at 19", "Insert Modifier: private(82) into FieldDeclaration(88) at 0", "Insert Modifier: final(83) into FieldDeclaration(88) at 1", "Insert SimpleType: Encoding(85) into FieldDeclaration(88) at 2", "Insert VariableDeclarationFragment(87) into FieldDeclaration(88) at 3", "Insert Modifier: private(89) into FieldDeclaration(95) at 0", "Insert Modifier: final(90) into FieldDeclaration(95) at 1", "Insert SimpleType: Encoding(92) into FieldDeclaration(95) at 2", "Insert VariableDeclarationFragment(94) into FieldDeclaration(95) at 3", "Insert SingleVariableDeclaration(142) into MethodDeclaration(207) at 7", "Insert SingleVariableDeclaration(146) into MethodDeclaration(207) at 8", "Update SimpleName: getEncoding(203) to getDlEncoding", "Insert Javadoc(252) into MethodDeclaration(260) at 0", "Insert Modifier: public(253) into MethodDeclaration(260) at 1", "Insert SimpleType: Encoding(255) into MethodDeclaration(260) at 2", "Insert SimpleName: getRlEncoding(256) into MethodDeclaration(260) at 3", "Insert Block(259) into MethodDeclaration(260) at 4", "Insert Javadoc(263) into MethodDeclaration(271) at 0", "Insert Modifier: public(264) into MethodDeclaration(271) at 1", "Insert SimpleType: Encoding(266) into MethodDeclaration(271) at 2", "Insert SimpleName: getValueEncoding(267) into MethodDeclaration(271) at 3", "Insert Block(270) into MethodDeclaration(271) at 4", "Update SimpleName: encoding(79) to rlEncoding", "Insert SimpleName: Encoding(84) into SimpleType: Encoding(85) at 0", "Insert SimpleName: dlEncoding(86) into VariableDeclarationFragment(87) at 0", "Insert SimpleName: Encoding(91) into SimpleType: Encoding(92) at 0", "Insert SimpleName: valuesEncoding(93) into VariableDeclarationFragment(94) at 0", "Insert TagElement: @param(113) into Javadoc(122) at 3", "Insert TagElement: @param(116) into Javadoc(122) at 4", "Insert TagElement: @param(121) into Javadoc(122) at 6", "Update SimpleName: encoding(115) to rlEncoding", "Insert SimpleType: Encoding(140) into SingleVariableDeclaration(142) at 0", "Insert SimpleName: dlEncoding(141) into SingleVariableDeclaration(142) at 1", "Insert SimpleType: Encoding(144) into SingleVariableDeclaration(146) at 0", "Insert SimpleName: valuesEncoding(145) into SingleVariableDeclaration(146) at 1", "Insert ExpressionStatement(176) into Block(206) at 4", "Insert ExpressionStatement(182) into Block(206) at 5", "Insert TagElement: @return(251) into Javadoc(252) at 0", "Insert SimpleName: Encoding(254) into SimpleType: Encoding(255) at 0", "Insert ReturnStatement(258) into Block(259) at 0", "Insert TagElement: @return(262) into Javadoc(263) at 0", "Insert SimpleName: Encoding(265) into SimpleType: Encoding(266) at 0", "Insert ReturnStatement(269) into Block(270) at 0", "Insert SimpleName: rlEncoding(111) into TagElement: @param(113) at 0", "Insert TextElement:  the repetition level encoding for this page(112) into TagElement: @param(113) at 1", "Insert SimpleName: dlEncoding(114) into TagElement: @param(116) at 0", "Insert TextElement:  the definition level encoding for this page(115) into TagElement: @param(116) at 1", "Update SimpleName: encoding(97) to valuesEncoding", "Update TextElement:  the encoding for this page(98) to  the values encoding for this page", "Insert SimpleName: dlEncoding(120) into TagElement: @param(121) at 0", "Insert SimpleName: Encoding(139) into SimpleType: Encoding(140) at 0", "Insert SimpleName: Encoding(143) into SimpleType: Encoding(144) at 0", "Insert Assignment: =(175) into ExpressionStatement(176) at 0", "Insert Assignment: =(181) into ExpressionStatement(182) at 0", "Update TextElement:  the encoding for this page(197) to  the definition level encoding for this page", "Update SimpleName: encoding(204) to dlEncoding", "Insert TextElement:  the repetition level encoding for this page(250) into TagElement: @return(251) at 0", "Insert SimpleName: rlEncoding(257) into ReturnStatement(258) at 0", "Insert TextElement:  the values encoding for this page(261) into TagElement: @return(262) at 0", "Insert SimpleName: valuesEncoding(268) into ReturnStatement(269) at 0", "Update SimpleName: encoding(138) to rlEncoding", "Insert FieldAccess(173) into Assignment: =(175) at 0", "Insert SimpleName: dlEncoding(174) into Assignment: =(175) at 1", "Insert FieldAccess(179) into Assignment: =(181) at 0", "Insert SimpleName: valuesEncoding(180) into Assignment: =(181) at 1", "Update SimpleName: encoding(136) to rlEncoding", "Insert ThisExpression(171) into FieldAccess(173) at 0", "Insert SimpleName: dlEncoding(172) into FieldAccess(173) at 1", "Insert ThisExpression(177) into FieldAccess(179) at 0", "Insert SimpleName: valuesEncoding(178) into FieldAccess(179) at 1", "Delete StringLiteral: \", encoding=\"(224)", "Delete SimpleName: encoding(225)"]}}, {"PageWriter_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS SimpleName: dlEncoding to SingleVariableDeclaration at 1", "INS SimpleName: Encoding to SimpleType: Encoding at 0", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS SimpleType: Encoding to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 9", "operations": ["INS SimpleName: Encoding to SimpleType: Encoding at 0", "INS SimpleType: Encoding to SingleVariableDeclaration at 0", "INS SimpleName: valuesEncoding to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 9"]}, {"root": "INS TagElement: @param to Javadoc at 3", "operations": ["INS TagElement: @param to Javadoc at 3", "INS SimpleName: rlEncoding to TagElement: @param at 0", "INS TextElement:  repetition level encoding to TagElement: @param at 1"]}, {"root": "INS TagElement: @param to Javadoc at 4", "operations": ["INS TextElement:  definition level encoding to TagElement: @param at 1", "INS SimpleName: dlEncoding to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 4"]}, {"root": "INS TagElement: @param to Javadoc at 5", "operations": ["INS TextElement:  values encoding to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 5", "INS SimpleName: valuesEncoding to TagElement: @param at 0"]}, {"root": "UPDATE from encoding to rlEncoding", "operations": ["UPD SimpleName: encoding from encoding to rlEncoding"]}]}}, {"PageWriter_diff": {"operations": ["Insert SingleVariableDeclaration(65) into MethodDeclaration(72) at 8", "Insert SingleVariableDeclaration(69) into MethodDeclaration(72) at 9", "Insert TagElement: @param(37) into Javadoc(46) at 3", "Insert TagElement: @param(40) into Javadoc(46) at 4", "Insert TagElement: @param(43) into Javadoc(46) at 5", "Update SimpleName: encoding(51) to rlEncoding", "Insert SimpleType: Encoding(63) into SingleVariableDeclaration(65) at 0", "Insert SimpleName: dlEncoding(64) into SingleVariableDeclaration(65) at 1", "Insert SimpleType: Encoding(67) into SingleVariableDeclaration(69) at 0", "Insert SimpleName: valuesEncoding(68) into SingleVariableDeclaration(69) at 1", "Insert SimpleName: rlEncoding(35) into TagElement: @param(37) at 0", "Insert TextElement:  repetition level encoding(36) into TagElement: @param(37) at 1", "Insert SimpleName: dlEncoding(38) into TagElement: @param(40) at 0", "Insert TextElement:  definition level encoding(39) into TagElement: @param(40) at 1", "Insert SimpleName: valuesEncoding(41) into TagElement: @param(43) at 0", "Insert TextElement:  values encoding(42) into TagElement: @param(43) at 1", "Insert SimpleName: Encoding(62) into SimpleType: Encoding(63) at 0", "Insert SimpleName: Encoding(66) into SimpleType: Encoding(67) at 0"]}}, {"ValuesWriter_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: parquet.column.Encoding to ImportDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 6", "operations": ["INS TextElement: called after getBytes() and before reset() to TagElement at 0", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS TagElement: @return to Javadoc at 1", "INS Modifier: public to MethodDeclaration at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: getEncoding to MethodDeclaration at 4", "INS SimpleName: Encoding to SimpleType: Encoding at 0", "INS SimpleType: Encoding to MethodDeclaration at 3", "INS TagElement to Javadoc at 0", "INS Modifier: abstract to MethodDeclaration at 2", "INS TextElement:  the encoding that was used to encode the bytes to TagElement: @return at 0"]}]}}, {"ValuesWriter_diff": {"operations": ["Insert ImportDeclaration(17) into CompilationUnit(219) at 2", "Insert QualifiedName: parquet.column.Encoding(16) into ImportDeclaration(17) at 0", "Insert MethodDeclaration(57) into TypeDeclaration: class(218) at 6", "Insert Javadoc(51) into MethodDeclaration(57) at 0", "Insert Modifier: public(52) into MethodDeclaration(57) at 1", "Insert Modifier: abstract(53) into MethodDeclaration(57) at 2", "Insert SimpleType: Encoding(55) into MethodDeclaration(57) at 3", "Insert SimpleName: getEncoding(56) into MethodDeclaration(57) at 4", "Insert TagElement(48) into Javadoc(51) at 0", "Insert TagElement: @return(50) into Javadoc(51) at 1", "Insert SimpleName: Encoding(54) into SimpleType: Encoding(55) at 0", "Insert TextElement: called after getBytes() and before reset()(47) into TagElement(48) at 0", "Insert TextElement:  the encoding that was used to encode the bytes(49) into TagElement: @return(50) at 0"]}}, {"ParquetMetadataConverter_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 7", "INS QualifiedName: parquet.column.Encoding to SimpleType: parquet.column.Encoding at 0", "INS SimpleType: parquet.column.Encoding to SingleVariableDeclaration at 0", "INS SimpleName: dlEncoding to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS SimpleName: valuesEncoding to SingleVariableDeclaration at 1", "INS SimpleType: parquet.column.Encoding to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS QualifiedName: parquet.column.Encoding to SimpleType: parquet.column.Encoding at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SimpleType: parquet.column.Encoding to SingleVariableDeclaration at 0", "INS QualifiedName: parquet.column.Encoding to SimpleType: parquet.column.Encoding at 0", "INS SimpleName: dlEncoding to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 7"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS QualifiedName: parquet.column.Encoding to SimpleType: parquet.column.Encoding at 0", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS SimpleType: parquet.column.Encoding to SingleVariableDeclaration at 0", "INS SimpleName: valuesEncoding to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from encoding to rlEncoding", "operations": ["UPD SimpleName: encoding from encoding to rlEncoding", "UPD SimpleName: encoding from encoding to rlEncoding", "UPD SimpleName: encoding from encoding to rlEncoding"]}, {"root": "INS ReturnStatement to SwitchStatement at 4", "operations": ["INS QualifiedName: parquet.column.Encoding.BIT_PACKED to ReturnStatement at 0", "INS ReturnStatement to SwitchStatement at 4"]}, {"root": "INS SwitchCase to SwitchStatement at 5", "operations": ["INS SimpleName: RLE to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 5"]}, {"root": "INS ReturnStatement to SwitchStatement at 6", "operations": ["INS QualifiedName: parquet.column.Encoding.PLAIN to ReturnStatement at 0", "INS ReturnStatement to SwitchStatement at 6"]}, {"root": "INS SwitchCase to SwitchStatement at 7", "operations": ["INS SwitchCase to SwitchStatement at 7"]}, {"root": "INS ReturnStatement to SwitchStatement at 4", "operations": ["INS ReturnStatement to SwitchStatement at 4", "INS QualifiedName: parquet.format.Encoding.BIT_PACKED to ReturnStatement at 0"]}, {"root": "INS SwitchCase to SwitchStatement at 5", "operations": ["INS SimpleName: RLE to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 5"]}, {"root": "INS ReturnStatement to SwitchStatement at 6", "operations": ["INS QualifiedName: parquet.format.Encoding.RLE to ReturnStatement at 0", "INS ReturnStatement to SwitchStatement at 6"]}, {"root": "INS SwitchCase to SwitchStatement at 7", "operations": ["INS SwitchCase to SwitchStatement at 7"]}, {"root": "INS SimpleName: BIT_PACKED to SwitchCase at 0", "operations": ["INS SimpleName: BIT_PACKED to SwitchCase at 0"]}, {"root": "INS SimpleName: BIT_PACKED to SwitchCase at 0", "operations": ["INS SimpleName: BIT_PACKED to SwitchCase at 0"]}, {"root": "INS SimpleName: dlEncoding to MethodInvocation at 5", "operations": ["INS SimpleName: dlEncoding to MethodInvocation at 5"]}, {"root": "INS SimpleName: valuesEncoding to MethodInvocation at 6", "operations": ["INS SimpleName: valuesEncoding to MethodInvocation at 6"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 2", "operations": ["INS MethodInvocation to ClassInstanceCreation at 2", "INS SimpleName: getEncoding to MethodInvocation at 0", "INS SimpleName: valuesEncoding to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 4", "operations": ["INS SimpleName: rlEncoding to MethodInvocation at 1", "INS MethodInvocation to ClassInstanceCreation at 4", "INS SimpleName: getEncoding to MethodInvocation at 0"]}, {"root": "UPDATE from encoding to dlEncoding", "operations": ["UPD SimpleName: encoding from encoding to dlEncoding"]}, {"root": "DEL QualifiedName: Encoding.RLE", "operations": ["DEL QualifiedName: Encoding.RLE"]}, {"root": "DEL QualifiedName: Encoding.BIT_PACKED", "operations": ["DEL QualifiedName: Encoding.BIT_PACKED"]}]}}, {"ParquetMetadataConverter_diff": {"operations": ["Insert SingleVariableDeclaration(1383) into MethodDeclaration(1407) at 7", "Insert SingleVariableDeclaration(1387) into MethodDeclaration(1407) at 8", "Insert SingleVariableDeclaration(1654) into MethodDeclaration(1693) at 7", "Insert SingleVariableDeclaration(1658) into MethodDeclaration(1693) at 8", "Update SimpleName: encoding(1362) to rlEncoding", "Insert SimpleType: parquet.column.Encoding(1381) into SingleVariableDeclaration(1383) at 0", "Insert SimpleName: dlEncoding(1382) into SingleVariableDeclaration(1383) at 1", "Insert SimpleType: parquet.column.Encoding(1385) into SingleVariableDeclaration(1387) at 0", "Insert SimpleName: valuesEncoding(1386) into SingleVariableDeclaration(1387) at 1", "Update SimpleName: encoding(1623) to rlEncoding", "Insert SimpleType: parquet.column.Encoding(1652) into SingleVariableDeclaration(1654) at 0", "Insert SimpleName: dlEncoding(1653) into SingleVariableDeclaration(1654) at 1", "Insert SimpleType: parquet.column.Encoding(1656) into SingleVariableDeclaration(1658) at 0", "Insert SimpleName: valuesEncoding(1657) into SingleVariableDeclaration(1658) at 1", "Insert ReturnStatement(701) into SwitchStatement(714) at 4", "Insert SwitchCase(703) into SwitchStatement(714) at 5", "Insert ReturnStatement(705) into SwitchStatement(714) at 6", "Insert SwitchCase(706) into SwitchStatement(714) at 7", "Insert ReturnStatement(733) into SwitchStatement(746) at 4", "Insert SwitchCase(735) into SwitchStatement(746) at 5", "Insert ReturnStatement(737) into SwitchStatement(746) at 6", "Insert SwitchCase(738) into SwitchStatement(746) at 7", "Insert QualifiedName: parquet.column.Encoding(1380) into SimpleType: parquet.column.Encoding(1381) at 0", "Insert QualifiedName: parquet.column.Encoding(1384) into SimpleType: parquet.column.Encoding(1385) at 0", "Insert QualifiedName: parquet.column.Encoding(1651) into SimpleType: parquet.column.Encoding(1652) at 0", "Insert QualifiedName: parquet.column.Encoding(1655) into SimpleType: parquet.column.Encoding(1656) at 0", "Insert SimpleName: BIT_PACKED(698) into SwitchCase(699) at 0", "Insert QualifiedName: parquet.column.Encoding.BIT_PACKED(700) into ReturnStatement(701) at 0", "Insert SimpleName: RLE(702) into SwitchCase(703) at 0", "Insert QualifiedName: parquet.column.Encoding.PLAIN(704) into ReturnStatement(705) at 0", "Insert SimpleName: BIT_PACKED(730) into SwitchCase(731) at 0", "Insert QualifiedName: parquet.format.Encoding.BIT_PACKED(732) into ReturnStatement(733) at 0", "Insert SimpleName: RLE(734) into SwitchCase(735) at 0", "Insert QualifiedName: parquet.format.Encoding.RLE(736) into ReturnStatement(737) at 0", "Update SimpleName: encoding(1375) to rlEncoding", "Insert SimpleName: dlEncoding(1400) into MethodInvocation(1402) at 5", "Insert SimpleName: valuesEncoding(1401) into MethodInvocation(1402) at 6", "Insert MethodInvocation(1680) into ClassInstanceCreation(1687) at 2", "Insert MethodInvocation(1686) into ClassInstanceCreation(1687) at 4", "Insert SimpleName: getEncoding(1678) into MethodInvocation(1680) at 0", "Insert SimpleName: valuesEncoding(1679) into MethodInvocation(1680) at 1", "Update SimpleName: encoding(1645) to dlEncoding", "Insert SimpleName: getEncoding(1684) into MethodInvocation(1686) at 0", "Insert SimpleName: rlEncoding(1685) into MethodInvocation(1686) at 1", "Delete QualifiedName: Encoding.RLE(1647)", "Delete QualifiedName: Encoding.BIT_PACKED(1648)"]}}, {"BitPackingValuesWriter_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: parquet.column.Encoding.BIT_PACKED to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: parquet.column.Encoding to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS SimpleName: getEncoding to MethodDeclaration at 3", "INS SimpleName: Encoding to SimpleType: Encoding at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS Block to MethodDeclaration at 4", "INS SimpleType: Encoding to MethodDeclaration at 2", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: BIT_PACKED to ReturnStatement at 0"]}]}}, {"BitPackingValuesWriter_diff": {"operations": ["Insert ImportDeclaration(17) into CompilationUnit(251) at 2", "Insert ImportDeclaration(27) into CompilationUnit(251) at 7", "Insert QualifiedName: parquet.column.Encoding.BIT_PACKED(16) into ImportDeclaration(17) at 0", "Insert QualifiedName: parquet.column.Encoding(26) into ImportDeclaration(27) at 0", "Insert MethodDeclaration(249) into TypeDeclaration: class(250) at 14", "Insert MarkerAnnotation(241) into MethodDeclaration(249) at 0", "Insert Modifier: public(242) into MethodDeclaration(249) at 1", "Insert SimpleType: Encoding(244) into MethodDeclaration(249) at 2", "Insert SimpleName: getEncoding(245) into MethodDeclaration(249) at 3", "Insert Block(248) into MethodDeclaration(249) at 4", "Insert SimpleName: Override(240) into MarkerAnnotation(241) at 0", "Insert SimpleName: Encoding(243) into SimpleType: Encoding(244) at 0", "Insert ReturnStatement(247) into Block(248) at 0", "Insert SimpleName: BIT_PACKED(246) into ReturnStatement(247) at 0"]}}, {"BoundedIntValuesWriter_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: parquet.column.Encoding.RLE to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: parquet.column.Encoding to ImportDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 22", "operations": ["INS SimpleName: RLE to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 22", "INS SimpleName: Encoding to SimpleType: Encoding at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleType: Encoding to MethodDeclaration at 2", "INS SimpleName: getEncoding to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Block to MethodDeclaration at 4"]}]}}, {"BoundedIntValuesWriter_diff": {"operations": ["Insert ImportDeclaration(15) into CompilationUnit(455) at 1", "Insert ImportDeclaration(21) into CompilationUnit(455) at 4", "Insert QualifiedName: parquet.column.Encoding.RLE(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: parquet.column.Encoding(20) into ImportDeclaration(21) at 0", "Insert MethodDeclaration(453) into TypeDeclaration: class(454) at 22", "Insert MarkerAnnotation(445) into MethodDeclaration(453) at 0", "Insert Modifier: public(446) into MethodDeclaration(453) at 1", "Insert SimpleType: Encoding(448) into MethodDeclaration(453) at 2", "Insert SimpleName: getEncoding(449) into MethodDeclaration(453) at 3", "Insert Block(452) into MethodDeclaration(453) at 4", "Insert SimpleName: Override(444) into MarkerAnnotation(445) at 0", "Insert SimpleName: Encoding(447) into SimpleType: Encoding(448) at 0", "Insert ReturnStatement(451) into Block(452) at 0", "Insert SimpleName: RLE(450) into ReturnStatement(451) at 0"]}}, {"DevNullValuesWriter_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: parquet.column.Encoding.BIT_PACKED to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: parquet.column.Encoding to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: Encoding to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: getEncoding to MethodDeclaration at 3", "INS SimpleName: Encoding to SimpleType: Encoding at 0", "INS SimpleName: BIT_PACKED to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS Block to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0"]}]}}, {"DevNullValuesWriter_diff": {"operations": ["Insert ImportDeclaration(15) into CompilationUnit(152) at 1", "Insert ImportDeclaration(19) into CompilationUnit(152) at 3", "Insert QualifiedName: parquet.column.Encoding.BIT_PACKED(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: parquet.column.Encoding(18) into ImportDeclaration(19) at 0", "Insert MethodDeclaration(150) into TypeDeclaration: class(151) at 15", "Insert MarkerAnnotation(142) into MethodDeclaration(150) at 0", "Insert Modifier: public(143) into MethodDeclaration(150) at 1", "Insert SimpleType: Encoding(145) into MethodDeclaration(150) at 2", "Insert SimpleName: getEncoding(146) into MethodDeclaration(150) at 3", "Insert Block(149) into MethodDeclaration(150) at 4", "Insert SimpleName: Override(141) into MarkerAnnotation(142) at 0", "Insert SimpleName: Encoding(144) into SimpleType: Encoding(145) at 0", "Insert ReturnStatement(148) into Block(149) at 0", "Insert SimpleName: BIT_PACKED(147) into ReturnStatement(148) at 0"]}}, {"BooleanPlainValuesWriter_cluster": {"actions": [{"root": "UPDATE from parquet.column.values.DataValuesWriter to parquet.column.values.ValuesWriter", "operations": ["UPD QualifiedName: parquet.column.values.DataValuesWriter from parquet.column.values.DataValuesWriter to parquet.column.values.ValuesWriter"]}, {"root": "UPDATE from DataValuesWriter to ValuesWriter", "operations": ["UPD SimpleType: DataValuesWriter from DataValuesWriter to ValuesWriter", "UPD SimpleName: DataValuesWriter from DataValuesWriter to ValuesWriter"]}]}}, {"BooleanPlainValuesWriter_diff": {"operations": ["Update QualifiedName: parquet.column.values.DataValuesWriter(28) to parquet.column.values.ValuesWriter", "Update SimpleType: DataValuesWriter(42) to ValuesWriter", "Update SimpleName: DataValuesWriter(41) to ValuesWriter"]}}, {"PlainValuesWriter_cluster": {"actions": [{"root": "UPDATE from parquet.column.values.DataValuesWriter to parquet.column.values.ValuesWriter", "operations": ["UPD QualifiedName: parquet.column.values.DataValuesWriter from parquet.column.values.DataValuesWriter to parquet.column.values.ValuesWriter"]}, {"root": "UPDATE from DataValuesWriter to ValuesWriter", "operations": ["UPD SimpleType: DataValuesWriter from DataValuesWriter to ValuesWriter", "UPD SimpleName: DataValuesWriter from DataValuesWriter to ValuesWriter"]}]}}, {"PlainValuesWriter_diff": {"operations": ["Update QualifiedName: parquet.column.values.DataValuesWriter(28) to parquet.column.values.ValuesWriter", "Update SimpleType: DataValuesWriter(42) to ValuesWriter", "Update SimpleName: DataValuesWriter(41) to ValuesWriter"]}}], "commit_stats": [{"total_files": 21, "deleted_files": 1, "testing": "True", "maintenance": "False", "build": "False"}]}