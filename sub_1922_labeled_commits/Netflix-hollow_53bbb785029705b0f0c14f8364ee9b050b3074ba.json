{"application": "Netflix-hollow", "csha": "53bbb785029705b0f0c14f8364ee9b050b3074ba", "files": [{"HollowPrefixIndex_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 6", "MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Tst to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from        estimate number of max nodes that will created. to  estimate number of max nodes that will created.", "operations": ["UPD TextElement:        estimate number of max nodes that will created. from        estimate number of max nodes that will created. to  estimate number of max nodes that will created."]}, {"root": "UPDATE from         max ordinal that can be referenced to   max ordinal that can be referenced", "operations": ["UPD TextElement:         max ordinal that can be referenced from         max ordinal that can be referenced to   max ordinal that can be referenced"]}, {"root": "UPDATE from          to reuse arrays from memory pool to    to reuse arrays from memory pool", "operations": ["UPD TextElement:          to reuse arrays from memory pool from          to reuse arrays from memory pool to    to reuse arrays from memory pool"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Tst to ClassInstanceCreation at 0"]}, {"root": "UPDATE from bitsPerNode to bitsPerOrdinalSet", "operations": ["UPD SimpleName: bitsPerNode from bitsPerNode to bitsPerOrdinalSet", "UPD SimpleName: ordinalSetSizeOffset from ordinalSetSizeOffset to bitsPerOrdinalSet", "UPD SimpleName: bitsPerNode from bitsPerNode to bitsPerOrdinalSet"]}, {"root": "UPDATE from ordinalSetSizeOffset to bitsPerNode", "operations": ["UPD SimpleName: ordinalSetSizeOffset from ordinalSetSizeOffset to bitsPerNode"]}, {"root": "UPDATE from ordinalSetSizeOffset to ordinal", "operations": ["UPD SimpleName: ordinalSetSizeOffset from ordinalSetSizeOffset to ordinal", "UPD SimpleName: i from i to ordinal", "UPD SimpleName: ordinalSetSize from ordinalSetSize to ordinal", "UPD SimpleName: i from i to ordinal"]}, {"root": "MOVE from InfixExpression: <", "operations": ["MOV SimpleName: bitsPerOrdinalSet to InfixExpression: < at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2"]}, {"root": "INS WhileStatement to Block at 3", "operations": ["INS SimpleName: ordinalStartIndex to InfixExpression: <= at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: ordinalStartIndex to PostfixExpression: ++ at 0", "INS WhileStatement to Block at 3", "INS SimpleName: ordinalStartIndex to MethodInvocation at 2", "INS SimpleName: ordinalEndIndex to InfixExpression: <= at 1", "INS InfixExpression: <= to WhileStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS PostfixExpression: ++ to ExpressionStatement at 0", "INS Block to WhileStatement at 1", "INS IfStatement to Block at 0", "INS NumberLiteral: 1 to MethodInvocation at 3", "INS NumberLiteral: 1 to InfixExpression: == at 1", "INS InfixExpression: == to IfStatement at 0"]}, {"root": "UPDATE from bitsPerKey to maxOrdinalValue", "operations": ["UPD SimpleName: bitsPerKey from bitsPerKey to maxOrdinalValue"]}, {"root": "UPDATE from 3 to 1", "operations": ["UPD NumberLiteral: 3 from 3 to 1"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV NumberLiteral: 3 to InfixExpression: + at 1"]}, {"root": "UPDATE from int to long", "operations": ["UPD PrimitiveType: int from int to long"]}, {"root": "UPDATE from nodes to ordinalSet", "operations": ["UPD SimpleName: nodes from nodes to ordinalSet"]}, {"root": "INS NumberLiteral: 1 to MethodInvocation at 3", "operations": ["INS NumberLiteral: 1 to MethodInvocation at 3"]}, {"root": "INS NumberLiteral: 1 to MethodInvocation at 4", "operations": ["INS NumberLiteral: 1 to MethodInvocation at 4"]}, {"root": "UPDATE from ordinalSetIndex to ordinalStartIndex", "operations": ["UPD SimpleName: ordinalSetIndex from ordinalSetIndex to ordinalStartIndex", "UPD SimpleName: currentNodeIndex from currentNodeIndex to ordinalStartIndex"]}, {"root": "INS InfixExpression: * to VariableDeclarationFragment at 1", "operations": ["INS InfixExpression: * to VariableDeclarationFragment at 1", "INS SimpleName: bitsPerOrdinalSet to InfixExpression: * at 1", "INS SimpleName: currentNodeIndex to InfixExpression: * at 0"]}, {"root": "UPDATE from ordinalSetSize to ordinalEndIndex", "operations": ["UPD SimpleName: ordinalSetSize from ordinalSetSize to ordinalEndIndex"]}, {"root": "INS InfixExpression: - to VariableDeclarationFragment at 1", "operations": ["INS NumberLiteral: 1 to InfixExpression: - at 1", "INS InfixExpression: + to InfixExpression: - at 0", "INS InfixExpression: - to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to IfStatement at 1"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV SimpleName: currentNodeIndex to InfixExpression: + at 0"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV SimpleName: ordinalSetSizeOffset to InfixExpression: + at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getElementValue to MethodInvocation at 1", "MOV SimpleName: ordinalSet to MethodInvocation at 0"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL SimpleName: totalValues", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL Modifier: private"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: cardinality", "DEL ExpressionStatement", "DEL SimpleName: totalValues", "DEL MethodInvocation", "DEL SimpleName: getPopulatedOrdinals", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: valueState"]}, {"root": "DEL IfStatement", "operations": ["DEL PostfixExpression: ++", "DEL NumberLiteral: 0", "DEL SimpleName: maxOrdinalOfType", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL SimpleName: maxOrdinalOfType", "DEL IfStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL PrimitiveType: long", "DEL SimpleName: estimatedTotalValues", "DEL SimpleName: estimateNumberOfValuesPerNode", "DEL SimpleName: totalValues", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL VariableDeclarationStatement"]}, {"root": "DEL SimpleName: estimatedTotalValues", "operations": ["DEL SimpleName: estimatedTotalValues"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Math", "DEL NumberLiteral: 8", "DEL CastExpression", "DEL SimpleName: pow", "DEL MethodDeclaration", "DEL SimpleName: totalValues", "DEL PrimitiveType: long", "DEL PrimitiveType: int", "DEL CastExpression", "DEL SimpleName: pow", "DEL Block", "DEL SimpleName: totalValues", "DEL NumberLiteral: 2", "DEL MethodInvocation", "DEL SimpleName: estimateNumberOfValuesPerNode", "DEL NumberLiteral: 16", "DEL Modifier: protected", "DEL SingleVariableDeclaration", "DEL SimpleName: totalValues", "DEL InfixExpression: >", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: Math", "DEL NumberLiteral: 2", "DEL ReturnStatement", "DEL PrimitiveType: long", "DEL IfStatement", "DEL PrimitiveType: long", "DEL ReturnStatement"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: bitsForOrdinalSetSize", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL Modifier: private", "DEL PrimitiveType: long", "DEL SimpleName: ordinalSetPointerOffset"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: ordinalSetSizeOffset", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL PrimitiveType: long", "DEL Modifier: private"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: bitsPerOrdinal", "DEL Modifier: private", "DEL FieldDeclaration", "DEL PrimitiveType: int"]}, {"root": "DEL TagElement: @param", "operations": ["DEL SimpleName: estimatedValuesPerNode", "DEL TextElement:  estimate number of values per node", "DEL TagElement: @param"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL PrimitiveType: long", "DEL SingleVariableDeclaration", "DEL SimpleName: estimatedValuesPerNode"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL InfixExpression: *", "DEL SimpleName: bitsForChildPointer", "DEL ParenthesizedExpression"]}, {"root": "DEL SimpleName: bitsForOrdinalSetSize", "operations": ["DEL SimpleName: bitsForOrdinalSetSize"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL NumberLiteral: 64", "DEL MethodInvocation", "DEL SimpleName: bitsPerOrdinal", "DEL InfixExpression: -", "DEL SimpleName: Long", "DEL SimpleName: numberOfLeadingZeros", "DEL SimpleName: maxOrdinalValue", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: estimatedValuesPerNode", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: bitsPerOrdinal", "DEL InfixExpression: *", "DEL SimpleName: bitsPerOrdinalSet"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL InfixExpression: -", "DEL SimpleName: bitsForOrdinalSetSize", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL NumberLiteral: 64", "DEL SimpleName: bitsPerOrdinalSet", "DEL Assignment: =", "DEL SimpleName: Long", "DEL SimpleName: numberOfLeadingZeros"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL PrimitiveType: long", "DEL SimpleName: ordinalSetIndex", "DEL VariableDeclarationFragment", "DEL SimpleName: nodeIndex", "DEL VariableDeclarationStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: nodes", "DEL SimpleName: getElementValue", "DEL VariableDeclarationStatement", "DEL InfixExpression: +", "DEL PrimitiveType: long", "DEL SimpleName: bitsForOrdinalSetSize", "DEL MethodInvocation", "DEL SimpleName: bitsPerNode", "DEL SimpleName: nodeIndex", "DEL SimpleName: ordinalSetSizeOffset", "DEL VariableDeclarationFragment", "DEL ParenthesizedExpression", "DEL SimpleName: ordinalSetSize", "DEL InfixExpression: *"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL InfixExpression: /", "DEL SimpleName: bitsPerOrdinal", "DEL ParenthesizedExpression"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: bitsPerOrdinal", "DEL SimpleName: bitsPerOrdinalSet", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL SimpleName: ordinalSet", "DEL SimpleName: bitsPerOrdinal", "DEL SimpleName: ordinalSetIndex", "DEL InfixExpression: +", "DEL InfixExpression: *", "DEL SimpleName: ordinal", "DEL InfixExpression: *", "DEL MethodInvocation", "DEL SimpleName: setElementValue", "DEL ParenthesizedExpression", "DEL SimpleName: ordinalSetSize"]}, {"root": "DEL SimpleName: bitsForOrdinalSetSize", "operations": ["DEL SimpleName: bitsForOrdinalSetSize"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL NumberLiteral: 1", "DEL ParenthesizedExpression", "DEL SimpleName: ordinalSetSize", "DEL InfixExpression: +"]}, {"root": "DEL SimpleName: currentNodeIndex", "operations": ["DEL SimpleName: currentNodeIndex"]}, {"root": "DEL CastExpression", "operations": ["DEL SimpleName: bitsForOrdinalSetSize", "DEL InfixExpression: *", "DEL PrimitiveType: int", "DEL CastExpression", "DEL InfixExpression: +", "DEL SimpleName: bitsPerNode", "DEL SimpleName: getElementValue", "DEL SimpleName: nodes", "DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: bitsPerOrdinal", "DEL InfixExpression: +", "DEL SimpleName: i", "DEL ParenthesizedExpression", "DEL Block", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL SimpleName: i", "DEL CastExpression", "DEL DoStatement", "DEL InfixExpression: !=", "DEL SimpleName: bitsPerOrdinalSet", "DEL Block", "DEL NumberLiteral: 1", "DEL IfStatement", "DEL SimpleName: ordinalSetSize", "DEL SimpleName: ordinalSetSize", "DEL InfixExpression: *", "DEL ParenthesizedExpression", "DEL InfixExpression: <", "DEL SimpleName: bitsPerOrdinal", "DEL InfixExpression: -", "DEL ParenthesizedExpression", "DEL SimpleName: ordinalSetIndex", "DEL InfixExpression: *", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: ordinal"]}]}}, {"HollowPrefixIndex_diff": {"operations": ["Move ExpressionStatement(1650) into Block(1589) at 1", "Move ExpressionStatement(1699) into Block(1589) at 6", "Move SimpleType: Tst(804) into VariableDeclarationStatement(783) at 0", "Update TextElement:        estimate number of max nodes that will created.(1573) to  estimate number of max nodes that will created.", "Update TextElement:         max ordinal that can be referenced(1579) to   max ordinal that can be referenced", "Update TextElement:          to reuse arrays from memory pool(1582) to    to reuse arrays from memory pool", "Move SimpleType: Tst(801) into ClassInstanceCreation(781) at 0", "Update SimpleName: bitsPerNode(1641) to bitsPerOrdinalSet", "Update SimpleName: ordinalSetSizeOffset(1691) to bitsPerNode", "Update SimpleName: ordinalSetSize(2067) to ordinal", "Move SimpleName: bitsPerOrdinalSet(2068) into InfixExpression: <(1939) at 1", "Move VariableDeclarationStatement(2277) into Block(2144) at 2", "Insert WhileStatement(2143) into Block(2144) at 3", "Update SimpleName: bitsPerKey(1642) to maxOrdinalValue", "Update NumberLiteral: 3(1643) to 1", "Move NumberLiteral: 3(1643) into InfixExpression: +(1524) at 1", "Update PrimitiveType: int(2255) to long", "Insert InfixExpression: <=(2122) into WhileStatement(2143) at 0", "Insert Block(2142) into WhileStatement(2143) at 1", "Update SimpleName: nodes(2088) to ordinalSet", "Insert NumberLiteral: 1(1948) into MethodInvocation(1950) at 3", "Insert NumberLiteral: 1(1949) into MethodInvocation(1950) at 4", "Update SimpleName: ordinalSetIndex(2251) to ordinalStartIndex", "Insert InfixExpression: *(2103) into VariableDeclarationFragment(2104) at 1", "Update SimpleName: ordinalSetSize(2256) to ordinalEndIndex", "Insert InfixExpression: -(2112) into VariableDeclarationFragment(2113) at 1", "Update SimpleName: i(2274) to ordinal", "Insert SimpleName: ordinalStartIndex(2120) into InfixExpression: <=(2122) at 0", "Insert SimpleName: ordinalEndIndex(2121) into InfixExpression: <=(2122) at 1", "Insert IfStatement(2135) into Block(2142) at 0", "Move ExpressionStatement(2304) into Block(2142) at 1", "Insert ExpressionStatement(2141) into Block(2142) at 2", "Update SimpleName: ordinalSetSizeOffset(2094) to ordinal", "Insert SimpleName: currentNodeIndex(2101) into InfixExpression: *(2103) at 0", "Insert SimpleName: bitsPerOrdinalSet(2102) into InfixExpression: *(2103) at 1", "Insert InfixExpression: +(2110) into InfixExpression: -(2112) at 0", "Insert NumberLiteral: 1(2111) into InfixExpression: -(2112) at 1", "Insert InfixExpression: ==(2129) into IfStatement(2135) at 0", "Move ExpressionStatement(2301) into IfStatement(2135) at 1", "Insert PostfixExpression: ++(2140) into ExpressionStatement(2141) at 0", "Update SimpleName: currentNodeIndex(2260) to ordinalStartIndex", "Move SimpleName: currentNodeIndex(2260) into InfixExpression: +(2110) at 0", "Update SimpleName: ordinalSetSizeOffset(2263) to bitsPerOrdinalSet", "Move SimpleName: ordinalSetSizeOffset(2263) into InfixExpression: +(2110) at 1", "Insert MethodInvocation(2127) into InfixExpression: ==(2129) at 0", "Insert NumberLiteral: 1(2128) into InfixExpression: ==(2129) at 1", "Update SimpleName: i(2302) to ordinal", "Insert SimpleName: ordinalStartIndex(2139) into PostfixExpression: ++(2140) at 0", "Update SimpleName: bitsPerNode(2091) to bitsPerOrdinalSet", "Move SimpleName: ordinalSet(2281) into MethodInvocation(2127) at 0", "Move SimpleName: getElementValue(2282) into MethodInvocation(2127) at 1", "Insert SimpleName: ordinalStartIndex(2125) into MethodInvocation(2127) at 2", "Insert NumberLiteral: 1(2126) into MethodInvocation(2127) at 3", "Delete Modifier: private(121)", "Delete PrimitiveType: int(122)", "Delete SimpleName: totalValues(123)", "Delete VariableDeclarationFragment(124)", "Delete FieldDeclaration(125)", "Delete SimpleName: totalValues(747)", "Delete SimpleName: valueState(748)", "Delete SimpleName: getPopulatedOrdinals(749)", "Delete MethodInvocation(750)", "Delete SimpleName: cardinality(751)", "Delete MethodInvocation(752)", "Delete Assignment: =(753)", "Delete ExpressionStatement(754)", "Delete SimpleName: maxOrdinalOfType(761)", "Delete NumberLiteral: 0(762)", "Delete InfixExpression: ==(763)", "Delete SimpleName: maxOrdinalOfType(764)", "Delete PostfixExpression: ++(765)", "Delete ExpressionStatement(766)", "Delete IfStatement(767)", "Delete PrimitiveType: long(793)", "Delete SimpleName: estimatedTotalValues(794)", "Delete SimpleName: estimateNumberOfValuesPerNode(795)", "Delete SimpleName: totalValues(796)", "Delete MethodInvocation(797)", "Delete VariableDeclarationFragment(798)", "Delete VariableDeclarationStatement(799)", "Delete SimpleName: estimatedTotalValues(806)", "Delete Modifier: protected(945)", "Delete PrimitiveType: long(946)", "Delete SimpleName: estimateNumberOfValuesPerNode(947)", "Delete PrimitiveType: long(948)", "Delete SimpleName: totalValues(949)", "Delete SingleVariableDeclaration(950)", "Delete SimpleName: totalValues(951)", "Delete PrimitiveType: int(952)", "Delete SimpleName: Math(953)", "Delete SimpleName: pow(954)", "Delete NumberLiteral: 2(955)", "Delete NumberLiteral: 16(956)", "Delete MethodInvocation(957)", "Delete CastExpression(958)", "Delete InfixExpression: >(959)", "Delete PrimitiveType: long(960)", "Delete SimpleName: Math(961)", "Delete SimpleName: pow(962)", "Delete NumberLiteral: 2(963)", "Delete NumberLiteral: 8(964)", "Delete MethodInvocation(965)", "Delete CastExpression(966)", "Delete ReturnStatement(967)", "Delete Block(968)", "Delete IfStatement(969)", "Delete SimpleName: totalValues(970)", "Delete ReturnStatement(971)", "Delete Block(972)", "Delete MethodDeclaration(973)", "Delete Modifier: private(1512)", "Delete PrimitiveType: int(1513)", "Delete SimpleName: bitsForOrdinalSetSize(1514)", "Delete VariableDeclarationFragment(1515)", "Delete FieldDeclaration(1516)", "Delete Modifier: private(1532)", "Delete PrimitiveType: long(1533)", "Delete SimpleName: ordinalSetPointerOffset(1534)", "Delete VariableDeclarationFragment(1535)", "Delete FieldDeclaration(1536)", "Delete Modifier: private(1537)", "Delete PrimitiveType: long(1538)", "Delete SimpleName: ordinalSetSizeOffset(1539)", "Delete VariableDeclarationFragment(1540)", "Delete FieldDeclaration(1541)", "Delete Modifier: private(1542)", "Delete PrimitiveType: int(1543)", "Delete SimpleName: bitsPerOrdinal(1544)", "Delete VariableDeclarationFragment(1545)", "Delete FieldDeclaration(1546)", "Delete SimpleName: estimatedValuesPerNode(1575)", "Delete TextElement:  estimate number of values per node(1576)", "Delete TagElement: @param(1577)", "Delete PrimitiveType: long(1590)", "Delete SimpleName: estimatedValuesPerNode(1591)", "Delete SingleVariableDeclaration(1592)", "Delete SimpleName: bitsForChildPointer(1644)", "Delete InfixExpression: *(1645)", "Delete ParenthesizedExpression(1646)", "Delete SimpleName: bitsForOrdinalSetSize(1647)", "Delete SimpleName: bitsPerOrdinal(1604)", "Delete NumberLiteral: 64(1605)", "Delete SimpleName: Long(1606)", "Delete SimpleName: numberOfLeadingZeros(1607)", "Delete SimpleName: maxOrdinalValue(1608)", "Delete MethodInvocation(1609)", "Delete InfixExpression: -(1610)", "Delete Assignment: =(1611)", "Delete ExpressionStatement(1612)", "Delete SimpleName: bitsPerOrdinalSet(1613)", "Delete SimpleName: estimatedValuesPerNode(1614)", "Delete SimpleName: bitsPerOrdinal(1615)", "Delete InfixExpression: *(1616)", "Delete Assignment: =(1617)", "Delete ExpressionStatement(1618)", "Delete SimpleName: bitsForOrdinalSetSize(1632)", "Delete NumberLiteral: 64(1633)", "Delete SimpleName: Long(1634)", "Delete SimpleName: numberOfLeadingZeros(1635)", "Delete SimpleName: bitsPerOrdinalSet(1636)", "Delete MethodInvocation(1637)", "Delete InfixExpression: -(1638)", "Delete Assignment: =(1639)", "Delete ExpressionStatement(1640)", "Delete PrimitiveType: long(2048)", "Delete SimpleName: ordinalSetIndex(2049)", "Delete SimpleName: nodeIndex(2050)", "Delete VariableDeclarationFragment(2051)", "Delete VariableDeclarationStatement(2052)", "Delete PrimitiveType: long(2053)", "Delete SimpleName: ordinalSetSize(2054)", "Delete SimpleName: nodes(2055)", "Delete SimpleName: getElementValue(2056)", "Delete SimpleName: nodeIndex(2057)", "Delete SimpleName: bitsPerNode(2058)", "Delete InfixExpression: *(2059)", "Delete ParenthesizedExpression(2060)", "Delete SimpleName: ordinalSetSizeOffset(2061)", "Delete InfixExpression: +(2062)", "Delete SimpleName: bitsForOrdinalSetSize(2063)", "Delete MethodInvocation(2064)", "Delete VariableDeclarationFragment(2065)", "Delete VariableDeclarationStatement(2066)", "Delete SimpleName: bitsPerOrdinal(2069)", "Delete InfixExpression: /(2070)", "Delete ParenthesizedExpression(2071)", "Delete SimpleName: ordinalSet(2073)", "Delete SimpleName: setElementValue(2074)", "Delete SimpleName: ordinalSetIndex(2075)", "Delete SimpleName: bitsPerOrdinalSet(2076)", "Delete InfixExpression: *(2077)", "Delete ParenthesizedExpression(2078)", "Delete SimpleName: ordinalSetSize(2079)", "Delete SimpleName: bitsPerOrdinal(2080)", "Delete InfixExpression: *(2081)", "Delete ParenthesizedExpression(2082)", "Delete InfixExpression: +(2083)", "Delete SimpleName: bitsPerOrdinal(2084)", "Delete SimpleName: ordinal(2085)", "Delete MethodInvocation(2086)", "Delete ExpressionStatement(2087)", "Delete SimpleName: bitsForOrdinalSetSize(2096)", "Delete SimpleName: ordinalSetSize(2097)", "Delete NumberLiteral: 1(2098)", "Delete InfixExpression: +(2099)", "Delete ParenthesizedExpression(2100)", "Delete SimpleName: currentNodeIndex(2252)", "Delete PrimitiveType: int(2257)", "Delete SimpleName: nodes(2258)", "Delete SimpleName: getElementValue(2259)", "Delete SimpleName: bitsPerNode(2261)", "Delete InfixExpression: *(2262)", "Delete InfixExpression: +(2264)", "Delete SimpleName: bitsForOrdinalSetSize(2265)", "Delete MethodInvocation(2266)", "Delete CastExpression(2267)", "Delete SimpleName: ordinalSetSize(2270)", "Delete NumberLiteral: 0(2271)", "Delete InfixExpression: !=(2272)", "Delete PrimitiveType: int(2278)", "Delete SimpleName: ordinal(2279)", "Delete PrimitiveType: int(2280)", "Delete SimpleName: ordinalSetIndex(2283)", "Delete SimpleName: bitsPerOrdinalSet(2284)", "Delete InfixExpression: *(2285)", "Delete ParenthesizedExpression(2286)", "Delete SimpleName: i(2287)", "Delete SimpleName: bitsPerOrdinal(2288)", "Delete InfixExpression: *(2289)", "Delete ParenthesizedExpression(2290)", "Delete InfixExpression: +(2291)", "Delete SimpleName: bitsPerOrdinal(2292)", "Delete MethodInvocation(2293)", "Delete CastExpression(2294)", "Delete VariableDeclarationFragment(2295)", "Delete VariableDeclarationStatement(2296)", "Delete Block(2305)", "Delete SimpleName: i(2306)", "Delete SimpleName: ordinalSetSize(2307)", "Delete NumberLiteral: 1(2308)", "Delete InfixExpression: -(2309)", "Delete ParenthesizedExpression(2310)", "Delete InfixExpression: <(2311)", "Delete DoStatement(2312)", "Delete Block(2313)", "Delete IfStatement(2314)"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}