{"application": "google-gson", "csha": "8d5de3136ccbdea33b289e373a5bbc06cb0a2d58", "files": [{"JsonReader_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to SwitchStatement at 3", "operations": ["INS PrimitiveType: char to VariableDeclarationStatement at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: result to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to SwitchStatement at 3"]}, {"root": "INS ForStatement to SwitchStatement at 4", "operations": ["INS SimpleName: result to Assignment: <<= at 0", "INS InfixExpression: && to IfStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NumberLiteral: 4 to InfixExpression: + at 1", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleType: NumberFormatException to ClassInstanceCreation at 0", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS Assignment: += to ExpressionStatement at 0", "INS CharacterLiteral: 'F' to InfixExpression: <= at 1", "INS SimpleName: pos to VariableDeclarationFragment at 1", "INS InfixExpression: <= to InfixExpression: && at 1", "INS ForStatement to SwitchStatement at 4", "INS ArrayAccess to VariableDeclarationFragment at 1", "INS SimpleName: c to InfixExpression: >= at 0", "INS SimpleName: buffer to ArrayAccess at 0", "INS NumberLiteral: 10 to InfixExpression: + at 1", "INS SimpleName: i to InfixExpression: + at 0", "INS ParenthesizedExpression to Assignment: += at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS CharacterLiteral: 'a' to InfixExpression: - at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 2", "INS ThrowStatement to Block at 0", "INS SimpleName: c to InfixExpression: >= at 0", "INS InfixExpression: + to ParenthesizedExpression at 0", "INS Block to IfStatement at 1", "INS SimpleName: c to InfixExpression: - at 0", "INS SimpleName: i to ArrayAccess at 1", "INS SimpleName: result to Assignment: += at 0", "INS Assignment: += to ExpressionStatement at 0", "INS Block to ForStatement at 3", "INS VariableDeclarationStatement to Block at 0", "INS ParenthesizedExpression to Assignment: += at 1", "INS ParenthesizedExpression to Assignment: += at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: result to Assignment: += at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS PostfixExpression: ++ to ForStatement at 2", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS CharacterLiteral: 'A' to InfixExpression: - at 1", "INS InfixExpression: < to ForStatement at 1", "INS InfixExpression: >= to InfixExpression: && at 0", "INS ExpressionStatement to Block at 1", "INS InfixExpression: && to IfStatement at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS NumberLiteral: 10 to InfixExpression: + at 1", "INS InfixExpression: >= to InfixExpression: && at 0", "INS SimpleName: c to VariableDeclarationFragment at 0", "INS CharacterLiteral: '0' to InfixExpression: - at 1", "INS StringLiteral: \"\\\\u\" to InfixExpression: + at 0", "INS SimpleName: c to InfixExpression: <= at 0", "INS ExpressionStatement to Block at 0", "INS CharacterLiteral: 'f' to InfixExpression: <= at 1", "INS InfixExpression: - to InfixExpression: + at 0", "INS SimpleName: c to InfixExpression: - at 0", "INS SimpleName: end to InfixExpression: < at 1", "INS CharacterLiteral: 'A' to InfixExpression: >= at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS InfixExpression: + to ParenthesizedExpression at 0", "INS SimpleName: NumberFormatException to SimpleType: NumberFormatException at 0", "INS PrimitiveType: char to VariableDeclarationStatement at 0", "INS CharacterLiteral: '9' to InfixExpression: <= at 1", "INS NumberLiteral: 4 to Assignment: <<= at 1", "INS CharacterLiteral: 'a' to InfixExpression: >= at 1", "INS IfStatement to IfStatement at 2", "INS SimpleName: c to InfixExpression: >= at 0", "INS SimpleName: result to Assignment: += at 0", "INS InfixExpression: - to ParenthesizedExpression at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS InfixExpression: && to IfStatement at 0", "INS CharacterLiteral: '0' to InfixExpression: >= at 1", "INS Block to IfStatement at 2", "INS SimpleName: c to InfixExpression: - at 0", "INS IfStatement to IfStatement at 2", "INS ExpressionStatement to Block at 0", "INS InfixExpression: >= to InfixExpression: && at 0", "INS SimpleName: end to VariableDeclarationFragment at 0", "INS Assignment: <<= to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: c to InfixExpression: <= at 0", "INS InfixExpression: <= to InfixExpression: && at 1", "INS IfStatement to Block at 2", "INS InfixExpression: - to InfixExpression: + at 0", "INS SimpleName: c to InfixExpression: <= at 0", "INS InfixExpression: <= to InfixExpression: && at 1", "INS Block to IfStatement at 1"]}, {"root": "INS ReturnStatement to SwitchStatement at 7", "operations": ["INS ReturnStatement to SwitchStatement at 7", "INS SimpleName: result to ReturnStatement at 0"]}, {"root": "UPDATE from hex to i", "operations": ["UPD SimpleName: hex from hex to i"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: hex to VariableDeclarationFragment at 0", "MOV MethodInvocation to InfixExpression: + at 1"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL SimpleType: String"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: Integer", "DEL SimpleName: hex", "DEL NumberLiteral: 16", "DEL PrimitiveType: char", "DEL SimpleName: parseInt", "DEL ReturnStatement", "DEL MethodInvocation", "DEL CastExpression"]}]}}, {"JsonReader_diff": {"operations": ["Insert VariableDeclarationStatement(3039) into SwitchStatement(3168) at 3", "Insert ForStatement(3132) into SwitchStatement(3168) at 4", "Insert ReturnStatement(3138) into SwitchStatement(3168) at 6", "Insert PrimitiveType: char(3035) into VariableDeclarationStatement(3039) at 0", "Insert VariableDeclarationFragment(3038) into VariableDeclarationStatement(3039) at 1", "Insert VariableDeclarationExpression(3049) into ForStatement(3132) at 0", "Insert InfixExpression: <(3052) into ForStatement(3132) at 1", "Insert PostfixExpression: ++(3054) into ForStatement(3132) at 2", "Insert Block(3131) into ForStatement(3132) at 3", "Insert SimpleName: result(3137) into ReturnStatement(3138) at 0", "Insert SimpleName: result(3036) into VariableDeclarationFragment(3038) at 0", "Insert NumberLiteral: 0(3037) into VariableDeclarationFragment(3038) at 1", "Insert PrimitiveType: int(3040) into VariableDeclarationExpression(3049) at 0", "Insert VariableDeclarationFragment(3043) into VariableDeclarationExpression(3049) at 1", "Insert VariableDeclarationFragment(3048) into VariableDeclarationExpression(3049) at 2", "Insert SimpleName: i(3050) into InfixExpression: <(3052) at 0", "Insert SimpleName: end(3051) into InfixExpression: <(3052) at 1", "Insert SimpleName: i(3053) into PostfixExpression: ++(3054) at 0", "Insert VariableDeclarationStatement(3061) into Block(3131) at 0", "Insert ExpressionStatement(3065) into Block(3131) at 1", "Insert IfStatement(3130) into Block(3131) at 2", "Update SimpleName: hex(3037) to i", "Move SimpleName: hex(3037) into VariableDeclarationFragment(3043) at 0", "Insert SimpleName: pos(3042) into VariableDeclarationFragment(3043) at 1", "Insert SimpleName: end(3044) into VariableDeclarationFragment(3048) at 0", "Insert InfixExpression: +(3047) into VariableDeclarationFragment(3048) at 1", "Insert PrimitiveType: char(3055) into VariableDeclarationStatement(3061) at 0", "Insert VariableDeclarationFragment(3060) into VariableDeclarationStatement(3061) at 1", "Insert Assignment: <<=(3064) into ExpressionStatement(3065) at 0", "Insert InfixExpression: &&(3072) into IfStatement(3130) at 0", "Insert Block(3080) into IfStatement(3130) at 1", "Insert IfStatement(3129) into IfStatement(3130) at 2", "Insert SimpleName: i(3045) into InfixExpression: +(3047) at 0", "Insert NumberLiteral: 4(3046) into InfixExpression: +(3047) at 1", "Insert SimpleName: c(3056) into VariableDeclarationFragment(3060) at 0", "Insert ArrayAccess(3059) into VariableDeclarationFragment(3060) at 1", "Insert SimpleName: result(3062) into Assignment: <<=(3064) at 0", "Insert NumberLiteral: 4(3063) into Assignment: <<=(3064) at 1", "Insert InfixExpression: >=(3068) into InfixExpression: &&(3072) at 0", "Insert InfixExpression: <=(3071) into InfixExpression: &&(3072) at 1", "Insert ExpressionStatement(3079) into Block(3080) at 0", "Insert InfixExpression: &&(3087) into IfStatement(3129) at 0", "Insert Block(3097) into IfStatement(3129) at 1", "Insert IfStatement(3128) into IfStatement(3129) at 2", "Insert SimpleName: buffer(3057) into ArrayAccess(3059) at 0", "Insert SimpleName: i(3058) into ArrayAccess(3059) at 1", "Insert SimpleName: c(3066) into InfixExpression: >=(3068) at 0", "Insert CharacterLiteral: '0'(3067) into InfixExpression: >=(3068) at 1", "Insert SimpleName: c(3069) into InfixExpression: <=(3071) at 0", "Insert CharacterLiteral: '9'(3070) into InfixExpression: <=(3071) at 1", "Insert Assignment: +=(3078) into ExpressionStatement(3079) at 0", "Insert InfixExpression: >=(3083) into InfixExpression: &&(3087) at 0", "Insert InfixExpression: <=(3086) into InfixExpression: &&(3087) at 1", "Insert ExpressionStatement(3096) into Block(3097) at 0", "Insert InfixExpression: &&(3104) into IfStatement(3128) at 0", "Insert Block(3114) into IfStatement(3128) at 1", "Insert Block(3127) into IfStatement(3128) at 2", "Insert SimpleName: result(3073) into Assignment: +=(3078) at 0", "Insert ParenthesizedExpression(3077) into Assignment: +=(3078) at 1", "Insert SimpleName: c(3081) into InfixExpression: >=(3083) at 0", "Insert CharacterLiteral: 'a'(3082) into InfixExpression: >=(3083) at 1", "Insert SimpleName: c(3084) into InfixExpression: <=(3086) at 0", "Insert CharacterLiteral: 'f'(3085) into InfixExpression: <=(3086) at 1", "Insert Assignment: +=(3095) into ExpressionStatement(3096) at 0", "Insert InfixExpression: >=(3100) into InfixExpression: &&(3104) at 0", "Insert InfixExpression: <=(3103) into InfixExpression: &&(3104) at 1", "Insert ExpressionStatement(3113) into Block(3114) at 0", "Insert ThrowStatement(3126) into Block(3127) at 0", "Insert InfixExpression: -(3076) into ParenthesizedExpression(3077) at 0", "Insert SimpleName: result(3088) into Assignment: +=(3095) at 0", "Insert ParenthesizedExpression(3094) into Assignment: +=(3095) at 1", "Insert SimpleName: c(3098) into InfixExpression: >=(3100) at 0", "Insert CharacterLiteral: 'A'(3099) into InfixExpression: >=(3100) at 1", "Insert SimpleName: c(3101) into InfixExpression: <=(3103) at 0", "Insert CharacterLiteral: 'F'(3102) into InfixExpression: <=(3103) at 1", "Insert Assignment: +=(3112) into ExpressionStatement(3113) at 0", "Insert ClassInstanceCreation(3125) into ThrowStatement(3126) at 0", "Insert SimpleName: c(3074) into InfixExpression: -(3076) at 0", "Insert CharacterLiteral: '0'(3075) into InfixExpression: -(3076) at 1", "Insert InfixExpression: +(3093) into ParenthesizedExpression(3094) at 0", "Insert SimpleName: result(3105) into Assignment: +=(3112) at 0", "Insert ParenthesizedExpression(3111) into Assignment: +=(3112) at 1", "Insert SimpleType: NumberFormatException(3116) into ClassInstanceCreation(3125) at 0", "Insert InfixExpression: +(3124) into ClassInstanceCreation(3125) at 1", "Insert InfixExpression: -(3091) into InfixExpression: +(3093) at 0", "Insert NumberLiteral: 10(3092) into InfixExpression: +(3093) at 1", "Insert InfixExpression: +(3110) into ParenthesizedExpression(3111) at 0", "Insert SimpleName: NumberFormatException(3115) into SimpleType: NumberFormatException(3116) at 0", "Insert StringLiteral: \"\\\\u\"(3117) into InfixExpression: +(3124) at 0", "Move MethodInvocation(3043) into InfixExpression: +(3124) at 1", "Insert SimpleName: c(3089) into InfixExpression: -(3091) at 0", "Insert CharacterLiteral: 'a'(3090) into InfixExpression: -(3091) at 1", "Insert InfixExpression: -(3108) into InfixExpression: +(3110) at 0", "Insert NumberLiteral: 10(3109) into InfixExpression: +(3110) at 1", "Insert SimpleName: c(3106) into InfixExpression: -(3108) at 0", "Insert CharacterLiteral: 'A'(3107) into InfixExpression: -(3108) at 1", "Delete SimpleName: String(3035)", "Delete SimpleType: String(3036)", "Delete VariableDeclarationFragment(3044)", "Delete VariableDeclarationStatement(3045)", "Delete PrimitiveType: char(3050)", "Delete SimpleName: Integer(3051)", "Delete SimpleName: parseInt(3052)", "Delete SimpleName: hex(3053)", "Delete NumberLiteral: 16(3054)", "Delete MethodInvocation(3055)", "Delete CastExpression(3056)", "Delete ReturnStatement(3057)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}