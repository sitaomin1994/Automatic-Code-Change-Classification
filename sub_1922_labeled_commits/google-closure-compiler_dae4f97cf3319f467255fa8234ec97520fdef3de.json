{"application": "google-closure-compiler", "csha": "dae4f97cf3319f467255fa8234ec97520fdef3de", "files": [{"Compiler_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 5"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 8"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS SimpleName: moduleNameRegexList to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: && at 0", "INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to InfixExpression: && at 1"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS StringLiteral: \"No files matched any of: \" to InfixExpression: + at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: fileNameRegexList to InfixExpression: + at 1", "INS ThrowStatement to Block at 0", "INS SimpleType: RuntimeException to ClassInstanceCreation at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS IfStatement to Block at 2", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SimpleName: builder to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS Block to IfStatement at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleType: RuntimeException to ClassInstanceCreation at 0", "INS SimpleName: moduleNameRegexList to InfixExpression: + at 1", "INS ThrowStatement to Block at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS IfStatement to Block at 1", "INS StringLiteral: \"No modules matched any of: \" to InfixExpression: + at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0"]}, {"root": "UPDATE from builder to fileNameRegexList", "operations": ["UPD SimpleName: builder from builder to fileNameRegexList"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: builder to MethodInvocation at 0", "MOV SimpleName: toString to MethodInvocation at 1"]}, {"root": "UPDATE from toString to isEmpty", "operations": ["UPD SimpleName: toString from toString to isEmpty"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: isEmpty to MethodInvocation at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "INS SimpleName: isEmpty to MethodInvocation at 1", "operations": ["INS SimpleName: isEmpty to MethodInvocation at 1"]}, {"root": "INS SimpleName: builder to MethodInvocation at 0", "operations": ["INS SimpleName: builder to MethodInvocation at 0"]}, {"root": "INS SimpleName: toString to MethodInvocation at 1", "operations": ["INS SimpleName: toString to MethodInvocation at 1"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !"]}, {"root": "DEL Block", "operations": ["DEL Block"]}]}}, {"Compiler_diff": {"operations": ["Move IfStatement(3505) into Block(3534) at 5", "Move ReturnStatement(3499) into Block(3534) at 8", "Insert InfixExpression: &&(3390) into IfStatement(3395) at 0", "Insert MethodInvocation(3386) into InfixExpression: &&(3390) at 0", "Insert MethodInvocation(3389) into InfixExpression: &&(3390) at 1", "Insert IfStatement(3465) into Block(3466) at 2", "Insert IfStatement(3527) into Block(3528) at 1", "Update SimpleName: builder(3490) to fileNameRegexList", "Move SimpleName: builder(3490) into MethodInvocation(3386) at 0", "Update SimpleName: toString(3491) to isEmpty", "Move SimpleName: toString(3491) into MethodInvocation(3386) at 1", "Insert SimpleName: moduleNameRegexList(3387) into MethodInvocation(3389) at 0", "Move SimpleName: isEmpty(3493) into MethodInvocation(3389) at 1", "Insert MethodInvocation(3456) into IfStatement(3465) at 0", "Insert Block(3464) into IfStatement(3465) at 1", "Move MethodInvocation(3494) into IfStatement(3527) at 0", "Insert Block(3526) into IfStatement(3527) at 1", "Insert MethodInvocation(3454) into MethodInvocation(3456) at 0", "Insert SimpleName: isEmpty(3455) into MethodInvocation(3456) at 1", "Insert ThrowStatement(3463) into Block(3464) at 0", "Insert SimpleName: isEmpty(3517) into MethodInvocation(3518) at 1", "Insert ThrowStatement(3525) into Block(3526) at 0", "Insert SimpleName: builder(3452) into MethodInvocation(3454) at 0", "Insert SimpleName: toString(3453) into MethodInvocation(3454) at 1", "Insert ClassInstanceCreation(3462) into ThrowStatement(3463) at 0", "Insert SimpleName: builder(3514) into MethodInvocation(3516) at 0", "Insert SimpleName: toString(3515) into MethodInvocation(3516) at 1", "Insert ClassInstanceCreation(3524) into ThrowStatement(3525) at 0", "Insert SimpleType: RuntimeException(3458) into ClassInstanceCreation(3462) at 0", "Insert InfixExpression: +(3461) into ClassInstanceCreation(3462) at 1", "Insert SimpleType: RuntimeException(3520) into ClassInstanceCreation(3524) at 0", "Insert InfixExpression: +(3523) into ClassInstanceCreation(3524) at 1", "Insert SimpleName: RuntimeException(3457) into SimpleType: RuntimeException(3458) at 0", "Insert StringLiteral: \"No files matched any of: \"(3459) into InfixExpression: +(3461) at 0", "Insert SimpleName: fileNameRegexList(3460) into InfixExpression: +(3461) at 1", "Insert SimpleName: RuntimeException(3519) into SimpleType: RuntimeException(3520) at 0", "Insert StringLiteral: \"No modules matched any of: \"(3521) into InfixExpression: +(3523) at 0", "Insert SimpleName: moduleNameRegexList(3522) into InfixExpression: +(3523) at 1", "Delete PrefixExpression: !(3495)", "Delete Block(3500)"]}}, {"CompilerOptions_cluster": {"actions": [{"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: wrapGoogModulesForWhitespaceOnly to MethodInvocation at 3", "INS SimpleName: add to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS StringLiteral: \"wrapGoogModulesForWhitespaceOnly\" to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from toString to add", "operations": ["UPD SimpleName: toString from toString to add"]}, {"root": "INS StringLiteral: \"warningsGuard\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"warningsGuard\" to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "UPDATE from \"wrapGoogModulesForWhitespaceOnly\" to \"variableRenaming\"", "operations": ["UPD StringLiteral: \"wrapGoogModulesForWhitespaceOnly\" from \"wrapGoogModulesForWhitespaceOnly\" to \"variableRenaming\""]}, {"root": "UPDATE from wrapGoogModulesForWhitespaceOnly to variableRenaming", "operations": ["UPD SimpleName: wrapGoogModulesForWhitespaceOnly from wrapGoogModulesForWhitespaceOnly to variableRenaming"]}, {"root": "UPDATE from \"warningsGuard\" to \"useTypesForLocalOptimization\"", "operations": ["UPD StringLiteral: \"warningsGuard\" from \"warningsGuard\" to \"useTypesForLocalOptimization\""]}, {"root": "INS SimpleName: useTypesForLocalOptimization to MethodInvocation at 3", "operations": ["INS SimpleName: useTypesForLocalOptimization to MethodInvocation at 3"]}, {"root": "UPDATE from \"variableRenaming\" to \"emitUseStrict\"", "operations": ["UPD StringLiteral: \"variableRenaming\" from \"variableRenaming\" to \"emitUseStrict\""]}, {"root": "UPDATE from variableRenaming to emitUseStrict", "operations": ["UPD SimpleName: variableRenaming from variableRenaming to emitUseStrict"]}, {"root": "UPDATE from \"useTypesForLocalOptimization\" to \"useNewTypeInference\"", "operations": ["UPD StringLiteral: \"useTypesForLocalOptimization\" from \"useTypesForLocalOptimization\" to \"useNewTypeInference\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "UPDATE from \"emitUseStrict\" to \"useDebugLog\"", "operations": ["UPD StringLiteral: \"emitUseStrict\" from \"emitUseStrict\" to \"useDebugLog\""]}, {"root": "UPDATE from emitUseStrict to useDebugLog", "operations": ["UPD SimpleName: emitUseStrict from emitUseStrict to useDebugLog"]}, {"root": "UPDATE from \"useNewTypeInference\" to \"tweakReplacements\"", "operations": ["UPD StringLiteral: \"useNewTypeInference\" from \"useNewTypeInference\" to \"tweakReplacements\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "UPDATE from \"useDebugLog\" to \"tweakProcessing\"", "operations": ["UPD StringLiteral: \"useDebugLog\" from \"useDebugLog\" to \"tweakProcessing\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "UPDATE from \"tweakReplacements\" to \"trustedStrings\"", "operations": ["UPD StringLiteral: \"tweakReplacements\" from \"tweakReplacements\" to \"trustedStrings\""]}, {"root": "INS SimpleName: trustedStrings to MethodInvocation at 3", "operations": ["INS SimpleName: trustedStrings to MethodInvocation at 3"]}, {"root": "UPDATE from \"tweakProcessing\" to \"transformAMDToCJSModules\"", "operations": ["UPD StringLiteral: \"tweakProcessing\" from \"tweakProcessing\" to \"transformAMDToCJSModules\""]}, {"root": "INS SimpleName: transformAMDToCJSModules to MethodInvocation at 3", "operations": ["INS SimpleName: transformAMDToCJSModules to MethodInvocation at 3"]}, {"root": "UPDATE from \"trustedStrings\" to \"tracer\"", "operations": ["UPD StringLiteral: \"trustedStrings\" from \"trustedStrings\" to \"tracer\""]}, {"root": "UPDATE from trustedStrings to tracer", "operations": ["UPD SimpleName: trustedStrings from trustedStrings to tracer"]}, {"root": "UPDATE from \"transformAMDToCJSModules\" to \"tcProjectId\"", "operations": ["UPD StringLiteral: \"transformAMDToCJSModules\" from \"transformAMDToCJSModules\" to \"tcProjectId\""]}, {"root": "UPDATE from transformAMDToCJSModules to tcProjectId", "operations": ["UPD SimpleName: transformAMDToCJSModules from transformAMDToCJSModules to tcProjectId"]}, {"root": "UPDATE from \"tracer\" to \"syntheticBlockStartMarker\"", "operations": ["UPD StringLiteral: \"tracer\" from \"tracer\" to \"syntheticBlockStartMarker\""]}, {"root": "UPDATE from tracer to syntheticBlockStartMarker", "operations": ["UPD SimpleName: tracer from tracer to syntheticBlockStartMarker"]}, {"root": "UPDATE from \"tcProjectId\" to \"syntheticBlockEndMarker\"", "operations": ["UPD StringLiteral: \"tcProjectId\" from \"tcProjectId\" to \"syntheticBlockEndMarker\""]}, {"root": "UPDATE from tcProjectId to syntheticBlockEndMarker", "operations": ["UPD SimpleName: tcProjectId from tcProjectId to syntheticBlockEndMarker"]}, {"root": "UPDATE from \"syntheticBlockStartMarker\" to \"summaryDetailLevel\"", "operations": ["UPD StringLiteral: \"syntheticBlockStartMarker\" from \"syntheticBlockStartMarker\" to \"summaryDetailLevel\""]}, {"root": "UPDATE from syntheticBlockStartMarker to summaryDetailLevel", "operations": ["UPD SimpleName: syntheticBlockStartMarker from syntheticBlockStartMarker to summaryDetailLevel"]}, {"root": "UPDATE from \"syntheticBlockEndMarker\" to \"stripTypes\"", "operations": ["UPD StringLiteral: \"syntheticBlockEndMarker\" from \"syntheticBlockEndMarker\" to \"stripTypes\""]}, {"root": "UPDATE from syntheticBlockEndMarker to stripTypes", "operations": ["UPD SimpleName: syntheticBlockEndMarker from syntheticBlockEndMarker to stripTypes"]}, {"root": "UPDATE from \"summaryDetailLevel\" to \"stripTypePrefixes\"", "operations": ["UPD StringLiteral: \"summaryDetailLevel\" from \"summaryDetailLevel\" to \"stripTypePrefixes\""]}, {"root": "UPDATE from summaryDetailLevel to stripTypePrefixes", "operations": ["UPD SimpleName: summaryDetailLevel from summaryDetailLevel to stripTypePrefixes"]}, {"root": "UPDATE from \"stripTypes\" to \"stripNameSuffixes\"", "operations": ["UPD StringLiteral: \"stripTypes\" from \"stripTypes\" to \"stripNameSuffixes\""]}, {"root": "UPDATE from stripTypes to stripNameSuffixes", "operations": ["UPD SimpleName: stripTypes from stripTypes to stripNameSuffixes"]}, {"root": "UPDATE from \"stripTypePrefixes\" to \"stripNamePrefixes\"", "operations": ["UPD StringLiteral: \"stripTypePrefixes\" from \"stripTypePrefixes\" to \"stripNamePrefixes\""]}, {"root": "UPDATE from stripTypePrefixes to stripNamePrefixes", "operations": ["UPD SimpleName: stripTypePrefixes from stripTypePrefixes to stripNamePrefixes"]}, {"root": "UPDATE from \"stripNameSuffixes\" to \"sourceMapOutputPath\"", "operations": ["UPD StringLiteral: \"stripNameSuffixes\" from \"stripNameSuffixes\" to \"sourceMapOutputPath\""]}, {"root": "UPDATE from stripNameSuffixes to sourceMapOutputPath", "operations": ["UPD SimpleName: stripNameSuffixes from stripNameSuffixes to sourceMapOutputPath"]}, {"root": "UPDATE from \"stripNamePrefixes\" to \"sourceMapLocationMappings\"", "operations": ["UPD StringLiteral: \"stripNamePrefixes\" from \"stripNamePrefixes\" to \"sourceMapLocationMappings\""]}, {"root": "UPDATE from stripNamePrefixes to sourceMapLocationMappings", "operations": ["UPD SimpleName: stripNamePrefixes from stripNamePrefixes to sourceMapLocationMappings"]}, {"root": "UPDATE from \"sourceMapOutputPath\" to \"sourceMapFormat\"", "operations": ["UPD StringLiteral: \"sourceMapOutputPath\" from \"sourceMapOutputPath\" to \"sourceMapFormat\""]}, {"root": "UPDATE from sourceMapOutputPath to sourceMapFormat", "operations": ["UPD SimpleName: sourceMapOutputPath from sourceMapOutputPath to sourceMapFormat"]}, {"root": "UPDATE from \"sourceMapLocationMappings\" to \"sourceMapDetailLevel\"", "operations": ["UPD StringLiteral: \"sourceMapLocationMappings\" from \"sourceMapLocationMappings\" to \"sourceMapDetailLevel\""]}, {"root": "UPDATE from sourceMapLocationMappings to sourceMapDetailLevel", "operations": ["UPD SimpleName: sourceMapLocationMappings from sourceMapLocationMappings to sourceMapDetailLevel"]}, {"root": "UPDATE from \"sourceMapFormat\" to \"smartNameRemoval\"", "operations": ["UPD StringLiteral: \"sourceMapFormat\" from \"sourceMapFormat\" to \"smartNameRemoval\""]}, {"root": "UPDATE from sourceMapFormat to smartNameRemoval", "operations": ["UPD SimpleName: sourceMapFormat from sourceMapFormat to smartNameRemoval"]}, {"root": "UPDATE from \"sourceMapDetailLevel\" to \"skipNonTranspilationPasses\"", "operations": ["UPD StringLiteral: \"sourceMapDetailLevel\" from \"sourceMapDetailLevel\" to \"skipNonTranspilationPasses\""]}, {"root": "UPDATE from sourceMapDetailLevel to skipNonTranspilationPasses", "operations": ["UPD SimpleName: sourceMapDetailLevel from sourceMapDetailLevel to skipNonTranspilationPasses"]}, {"root": "UPDATE from \"smartNameRemoval\" to \"shadowVariables\"", "operations": ["UPD StringLiteral: \"smartNameRemoval\" from \"smartNameRemoval\" to \"shadowVariables\""]}, {"root": "UPDATE from smartNameRemoval to shadowVariables", "operations": ["UPD SimpleName: smartNameRemoval from smartNameRemoval to shadowVariables"]}, {"root": "UPDATE from \"skipNonTranspilationPasses\" to \"runtimeTypeCheck\"", "operations": ["UPD StringLiteral: \"skipNonTranspilationPasses\" from \"skipNonTranspilationPasses\" to \"runtimeTypeCheck\""]}, {"root": "UPDATE from skipNonTranspilationPasses to runtimeTypeCheck", "operations": ["UPD SimpleName: skipNonTranspilationPasses from skipNonTranspilationPasses to runtimeTypeCheck"]}, {"root": "UPDATE from \"shadowVariables\" to \"runtimeTypeCheckLogFunction\"", "operations": ["UPD StringLiteral: \"shadowVariables\" from \"shadowVariables\" to \"runtimeTypeCheckLogFunction\""]}, {"root": "UPDATE from shadowVariables to runtimeTypeCheckLogFunction", "operations": ["UPD SimpleName: shadowVariables from shadowVariables to runtimeTypeCheckLogFunction"]}, {"root": "UPDATE from \"runtimeTypeCheck\" to \"rewritePolyfills\"", "operations": ["UPD StringLiteral: \"runtimeTypeCheck\" from \"runtimeTypeCheck\" to \"rewritePolyfills\""]}, {"root": "UPDATE from runtimeTypeCheck to rewritePolyfills", "operations": ["UPD SimpleName: runtimeTypeCheck from runtimeTypeCheck to rewritePolyfills"]}, {"root": "UPDATE from \"runtimeTypeCheckLogFunction\" to \"rewriteFunctionExpressions\"", "operations": ["UPD StringLiteral: \"runtimeTypeCheckLogFunction\" from \"runtimeTypeCheckLogFunction\" to \"rewriteFunctionExpressions\""]}, {"root": "UPDATE from runtimeTypeCheckLogFunction to rewriteFunctionExpressions", "operations": ["UPD SimpleName: runtimeTypeCheckLogFunction from runtimeTypeCheckLogFunction to rewriteFunctionExpressions"]}, {"root": "UPDATE from \"rewritePolyfills\" to \"reserveRawExports\"", "operations": ["UPD StringLiteral: \"rewritePolyfills\" from \"rewritePolyfills\" to \"reserveRawExports\""]}, {"root": "UPDATE from rewritePolyfills to reserveRawExports", "operations": ["UPD SimpleName: rewritePolyfills from rewritePolyfills to reserveRawExports"]}, {"root": "UPDATE from \"rewriteFunctionExpressions\" to \"reportPath\"", "operations": ["UPD StringLiteral: \"rewriteFunctionExpressions\" from \"rewriteFunctionExpressions\" to \"reportPath\""]}, {"root": "UPDATE from rewriteFunctionExpressions to reportPath", "operations": ["UPD SimpleName: rewriteFunctionExpressions from rewriteFunctionExpressions to reportPath"]}, {"root": "UPDATE from \"reserveRawExports\" to \"reportOTIErrorsUnderNTI\"", "operations": ["UPD StringLiteral: \"reserveRawExports\" from \"reserveRawExports\" to \"reportOTIErrorsUnderNTI\""]}, {"root": "UPDATE from reserveRawExports to reportOTIErrorsUnderNTI", "operations": ["UPD SimpleName: reserveRawExports from reserveRawExports to reportOTIErrorsUnderNTI"]}, {"root": "UPDATE from \"reportPath\" to \"replaceStringsReservedStrings\"", "operations": ["UPD StringLiteral: \"reportPath\" from \"reportPath\" to \"replaceStringsReservedStrings\""]}, {"root": "UPDATE from reportPath to replaceStringsReservedStrings", "operations": ["UPD SimpleName: reportPath from reportPath to replaceStringsReservedStrings"]}, {"root": "UPDATE from \"reportOTIErrorsUnderNTI\" to \"replaceStringsPlaceholderToken\"", "operations": ["UPD StringLiteral: \"reportOTIErrorsUnderNTI\" from \"reportOTIErrorsUnderNTI\" to \"replaceStringsPlaceholderToken\""]}, {"root": "UPDATE from reportOTIErrorsUnderNTI to replaceStringsPlaceholderToken", "operations": ["UPD SimpleName: reportOTIErrorsUnderNTI from reportOTIErrorsUnderNTI to replaceStringsPlaceholderToken"]}, {"root": "UPDATE from \"replaceStringsReservedStrings\" to \"replaceStringsInputMap\"", "operations": ["UPD StringLiteral: \"replaceStringsReservedStrings\" from \"replaceStringsReservedStrings\" to \"replaceStringsInputMap\""]}, {"root": "UPDATE from replaceStringsReservedStrings to replaceStringsInputMap", "operations": ["UPD SimpleName: replaceStringsReservedStrings from replaceStringsReservedStrings to replaceStringsInputMap"]}, {"root": "UPDATE from \"replaceStringsPlaceholderToken\" to \"replaceStringsFunctionDescriptions\"", "operations": ["UPD StringLiteral: \"replaceStringsPlaceholderToken\" from \"replaceStringsPlaceholderToken\" to \"replaceStringsFunctionDescriptions\""]}, {"root": "UPDATE from replaceStringsPlaceholderToken to replaceStringsFunctionDescriptions", "operations": ["UPD SimpleName: replaceStringsPlaceholderToken from replaceStringsPlaceholderToken to replaceStringsFunctionDescriptions"]}, {"root": "UPDATE from \"replaceStringsInputMap\" to \"replaceMessagesWithChromeI18n\"", "operations": ["UPD StringLiteral: \"replaceStringsInputMap\" from \"replaceStringsInputMap\" to \"replaceMessagesWithChromeI18n\""]}, {"root": "UPDATE from replaceStringsInputMap to replaceMessagesWithChromeI18n", "operations": ["UPD SimpleName: replaceStringsInputMap from replaceStringsInputMap to replaceMessagesWithChromeI18n"]}, {"root": "UPDATE from \"replaceStringsFunctionDescriptions\" to \"replaceIdGenerators\"", "operations": ["UPD StringLiteral: \"replaceStringsFunctionDescriptions\" from \"replaceStringsFunctionDescriptions\" to \"replaceIdGenerators\""]}, {"root": "UPDATE from replaceStringsFunctionDescriptions to replaceIdGenerators", "operations": ["UPD SimpleName: replaceStringsFunctionDescriptions from replaceStringsFunctionDescriptions to replaceIdGenerators"]}, {"root": "UPDATE from \"replaceMessagesWithChromeI18n\" to \"renamePrefix\"", "operations": ["UPD StringLiteral: \"replaceMessagesWithChromeI18n\" from \"replaceMessagesWithChromeI18n\" to \"renamePrefix\""]}, {"root": "UPDATE from replaceMessagesWithChromeI18n to renamePrefix", "operations": ["UPD SimpleName: replaceMessagesWithChromeI18n from replaceMessagesWithChromeI18n to renamePrefix"]}, {"root": "UPDATE from \"replaceIdGenerators\" to \"renamePrefixNamespace\"", "operations": ["UPD StringLiteral: \"replaceIdGenerators\" from \"replaceIdGenerators\" to \"renamePrefixNamespace\""]}, {"root": "UPDATE from replaceIdGenerators to renamePrefixNamespace", "operations": ["UPD SimpleName: replaceIdGenerators from replaceIdGenerators to renamePrefixNamespace"]}, {"root": "UPDATE from \"renamePrefix\" to \"renamePrefixNamespaceAssumeCrossModuleNames\"", "operations": ["UPD StringLiteral: \"renamePrefix\" from \"renamePrefix\" to \"renamePrefixNamespaceAssumeCrossModuleNames\""]}, {"root": "UPDATE from renamePrefix to renamePrefixNamespaceAssumeCrossModuleNames", "operations": ["UPD SimpleName: renamePrefix from renamePrefix to renamePrefixNamespaceAssumeCrossModuleNames"]}, {"root": "UPDATE from \"renamePrefixNamespace\" to \"removeUnusedVars\"", "operations": ["UPD StringLiteral: \"renamePrefixNamespace\" from \"renamePrefixNamespace\" to \"removeUnusedVars\""]}, {"root": "UPDATE from renamePrefixNamespace to removeUnusedVars", "operations": ["UPD SimpleName: renamePrefixNamespace from renamePrefixNamespace to removeUnusedVars"]}, {"root": "UPDATE from \"renamePrefixNamespaceAssumeCrossModuleNames\" to \"removeUnusedPrototypeProperties\"", "operations": ["UPD StringLiteral: \"renamePrefixNamespaceAssumeCrossModuleNames\" from \"renamePrefixNamespaceAssumeCrossModuleNames\" to \"removeUnusedPrototypeProperties\""]}, {"root": "UPDATE from renamePrefixNamespaceAssumeCrossModuleNames to removeUnusedPrototypeProperties", "operations": ["UPD SimpleName: renamePrefixNamespaceAssumeCrossModuleNames from renamePrefixNamespaceAssumeCrossModuleNames to removeUnusedPrototypeProperties"]}, {"root": "UPDATE from \"removeUnusedVars\" to \"removeUnusedPrototypePropertiesInExterns\"", "operations": ["UPD StringLiteral: \"removeUnusedVars\" from \"removeUnusedVars\" to \"removeUnusedPrototypePropertiesInExterns\""]}, {"root": "UPDATE from removeUnusedVars to removeUnusedPrototypePropertiesInExterns", "operations": ["UPD SimpleName: removeUnusedVars from removeUnusedVars to removeUnusedPrototypePropertiesInExterns"]}, {"root": "UPDATE from \"removeUnusedPrototypeProperties\" to \"removeUnusedLocalVars\"", "operations": ["UPD StringLiteral: \"removeUnusedPrototypeProperties\" from \"removeUnusedPrototypeProperties\" to \"removeUnusedLocalVars\""]}, {"root": "UPDATE from removeUnusedPrototypeProperties to removeUnusedLocalVars", "operations": ["UPD SimpleName: removeUnusedPrototypeProperties from removeUnusedPrototypeProperties to removeUnusedLocalVars"]}, {"root": "UPDATE from \"removeUnusedPrototypePropertiesInExterns\" to \"removeUnusedConstructorProperties\"", "operations": ["UPD StringLiteral: \"removeUnusedPrototypePropertiesInExterns\" from \"removeUnusedPrototypePropertiesInExterns\" to \"removeUnusedConstructorProperties\""]}, {"root": "UPDATE from removeUnusedPrototypePropertiesInExterns to removeUnusedConstructorProperties", "operations": ["UPD SimpleName: removeUnusedPrototypePropertiesInExterns from removeUnusedPrototypePropertiesInExterns to removeUnusedConstructorProperties"]}, {"root": "UPDATE from \"removeUnusedLocalVars\" to \"removeUnusedClassProperties\"", "operations": ["UPD StringLiteral: \"removeUnusedLocalVars\" from \"removeUnusedLocalVars\" to \"removeUnusedClassProperties\""]}, {"root": "UPDATE from removeUnusedLocalVars to removeUnusedClassProperties", "operations": ["UPD SimpleName: removeUnusedLocalVars from removeUnusedLocalVars to removeUnusedClassProperties"]}, {"root": "UPDATE from \"removeUnusedConstructorProperties\" to \"removeDeadCode\"", "operations": ["UPD StringLiteral: \"removeUnusedConstructorProperties\" from \"removeUnusedConstructorProperties\" to \"removeDeadCode\""]}, {"root": "UPDATE from removeUnusedConstructorProperties to removeDeadCode", "operations": ["UPD SimpleName: removeUnusedConstructorProperties from removeUnusedConstructorProperties to removeDeadCode"]}, {"root": "UPDATE from \"removeUnusedClassProperties\" to \"removeJ2clAsserts\"", "operations": ["UPD StringLiteral: \"removeUnusedClassProperties\" from \"removeUnusedClassProperties\" to \"removeJ2clAsserts\""]}, {"root": "UPDATE from removeUnusedClassProperties to removeJ2clAsserts", "operations": ["UPD SimpleName: removeUnusedClassProperties from removeUnusedClassProperties to removeJ2clAsserts"]}, {"root": "UPDATE from \"removeDeadCode\" to \"removeClosureAsserts\"", "operations": ["UPD StringLiteral: \"removeDeadCode\" from \"removeDeadCode\" to \"removeClosureAsserts\""]}, {"root": "UPDATE from removeDeadCode to removeClosureAsserts", "operations": ["UPD SimpleName: removeDeadCode from removeDeadCode to removeClosureAsserts"]}, {"root": "UPDATE from \"removeJ2clAsserts\" to \"removeSuperMethods\"", "operations": ["UPD StringLiteral: \"removeJ2clAsserts\" from \"removeJ2clAsserts\" to \"removeSuperMethods\""]}, {"root": "UPDATE from removeJ2clAsserts to removeSuperMethods", "operations": ["UPD SimpleName: removeJ2clAsserts from removeJ2clAsserts to removeSuperMethods"]}, {"root": "UPDATE from \"removeClosureAsserts\" to \"removeAbstractMethods\"", "operations": ["UPD StringLiteral: \"removeClosureAsserts\" from \"removeClosureAsserts\" to \"removeAbstractMethods\""]}, {"root": "UPDATE from removeClosureAsserts to removeAbstractMethods", "operations": ["UPD SimpleName: removeClosureAsserts from removeClosureAsserts to removeAbstractMethods"]}, {"root": "UPDATE from \"removeSuperMethods\" to \"recordFunctionInformation\"", "operations": ["UPD StringLiteral: \"removeSuperMethods\" from \"removeSuperMethods\" to \"recordFunctionInformation\""]}, {"root": "UPDATE from removeSuperMethods to recordFunctionInformation", "operations": ["UPD SimpleName: removeSuperMethods from removeSuperMethods to recordFunctionInformation"]}, {"root": "UPDATE from \"removeAbstractMethods\" to \"quoteKeywordProperties\"", "operations": ["UPD StringLiteral: \"removeAbstractMethods\" from \"removeAbstractMethods\" to \"quoteKeywordProperties\""]}, {"root": "UPDATE from removeAbstractMethods to quoteKeywordProperties", "operations": ["UPD SimpleName: removeAbstractMethods from removeAbstractMethods to quoteKeywordProperties"]}, {"root": "UPDATE from \"recordFunctionInformation\" to \"protectHiddenSideEffects\"", "operations": ["UPD StringLiteral: \"recordFunctionInformation\" from \"recordFunctionInformation\" to \"protectHiddenSideEffects\""]}, {"root": "UPDATE from recordFunctionInformation to protectHiddenSideEffects", "operations": ["UPD SimpleName: recordFunctionInformation from recordFunctionInformation to protectHiddenSideEffects"]}, {"root": "UPDATE from \"quoteKeywordProperties\" to \"propertyRenaming\"", "operations": ["UPD StringLiteral: \"quoteKeywordProperties\" from \"quoteKeywordProperties\" to \"propertyRenaming\""]}, {"root": "UPDATE from quoteKeywordProperties to propertyRenaming", "operations": ["UPD SimpleName: quoteKeywordProperties from quoteKeywordProperties to propertyRenaming"]}, {"root": "UPDATE from \"protectHiddenSideEffects\" to \"propertyInvalidationErrors\"", "operations": ["UPD StringLiteral: \"protectHiddenSideEffects\" from \"protectHiddenSideEffects\" to \"propertyInvalidationErrors\""]}, {"root": "UPDATE from protectHiddenSideEffects to propertyInvalidationErrors", "operations": ["UPD SimpleName: protectHiddenSideEffects from protectHiddenSideEffects to propertyInvalidationErrors"]}, {"root": "UPDATE from \"propertyRenaming\" to \"processObjectPropertyString\"", "operations": ["UPD StringLiteral: \"propertyRenaming\" from \"propertyRenaming\" to \"processObjectPropertyString\""]}, {"root": "UPDATE from propertyRenaming to processObjectPropertyString", "operations": ["UPD SimpleName: propertyRenaming from propertyRenaming to processObjectPropertyString"]}, {"root": "UPDATE from \"propertyInvalidationErrors\" to \"processCommonJSModules\"", "operations": ["UPD StringLiteral: \"propertyInvalidationErrors\" from \"propertyInvalidationErrors\" to \"processCommonJSModules\""]}, {"root": "UPDATE from propertyInvalidationErrors to processCommonJSModules", "operations": ["UPD SimpleName: propertyInvalidationErrors from propertyInvalidationErrors to processCommonJSModules"]}, {"root": "UPDATE from \"processObjectPropertyString\" to \"printSourceAfterEachPass\"", "operations": ["UPD StringLiteral: \"processObjectPropertyString\" from \"processObjectPropertyString\" to \"printSourceAfterEachPass\""]}, {"root": "UPDATE from processObjectPropertyString to printSourceAfterEachPass", "operations": ["UPD SimpleName: processObjectPropertyString from processObjectPropertyString to printSourceAfterEachPass"]}, {"root": "UPDATE from \"processCommonJSModules\" to \"printInputDelimiter\"", "operations": ["UPD StringLiteral: \"processCommonJSModules\" from \"processCommonJSModules\" to \"printInputDelimiter\""]}, {"root": "UPDATE from processCommonJSModules to printInputDelimiter", "operations": ["UPD SimpleName: processCommonJSModules from processCommonJSModules to printInputDelimiter"]}, {"root": "UPDATE from \"printSourceAfterEachPass\" to \"printConfig\"", "operations": ["UPD StringLiteral: \"printSourceAfterEachPass\" from \"printSourceAfterEachPass\" to \"printConfig\""]}, {"root": "UPDATE from printSourceAfterEachPass to printConfig", "operations": ["UPD SimpleName: printSourceAfterEachPass from printSourceAfterEachPass to printConfig"]}, {"root": "UPDATE from \"printInputDelimiter\" to \"preventLibraryInjection\"", "operations": ["UPD StringLiteral: \"printInputDelimiter\" from \"printInputDelimiter\" to \"preventLibraryInjection\""]}, {"root": "UPDATE from printInputDelimiter to preventLibraryInjection", "operations": ["UPD SimpleName: printInputDelimiter from printInputDelimiter to preventLibraryInjection"]}, {"root": "UPDATE from \"printConfig\" to \"prettyPrint\"", "operations": ["UPD StringLiteral: \"printConfig\" from \"printConfig\" to \"prettyPrint\""]}, {"root": "UPDATE from printConfig to prettyPrint", "operations": ["UPD SimpleName: printConfig from printConfig to prettyPrint"]}, {"root": "UPDATE from \"preventLibraryInjection\" to \"preserveTypeAnnotations\"", "operations": ["UPD StringLiteral: \"preventLibraryInjection\" from \"preventLibraryInjection\" to \"preserveTypeAnnotations\""]}, {"root": "UPDATE from preventLibraryInjection to preserveTypeAnnotations", "operations": ["UPD SimpleName: preventLibraryInjection from preventLibraryInjection to preserveTypeAnnotations"]}, {"root": "UPDATE from \"prettyPrint\" to \"preserveGoogProvidesAndRequires\"", "operations": ["UPD StringLiteral: \"prettyPrint\" from \"prettyPrint\" to \"preserveGoogProvidesAndRequires\""]}, {"root": "UPDATE from prettyPrint to preserveClosurePrimitives", "operations": ["UPD SimpleName: prettyPrint from prettyPrint to preserveClosurePrimitives"]}, {"root": "UPDATE from \"preserveTypeAnnotations\" to \"preserveDetailedSourceInfo\"", "operations": ["UPD StringLiteral: \"preserveTypeAnnotations\" from \"preserveTypeAnnotations\" to \"preserveDetailedSourceInfo\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "UPDATE from \"preserveGoogProvidesAndRequires\" to \"preferStableNames\"", "operations": ["UPD StringLiteral: \"preserveGoogProvidesAndRequires\" from \"preserveGoogProvidesAndRequires\" to \"preferStableNames\""]}, {"root": "UPDATE from preserveClosurePrimitives to preferStableNames", "operations": ["UPD SimpleName: preserveClosurePrimitives from preserveClosurePrimitives to preferStableNames"]}, {"root": "UPDATE from \"preserveDetailedSourceInfo\" to \"preferSingleQuotes\"", "operations": ["UPD StringLiteral: \"preserveDetailedSourceInfo\" from \"preserveDetailedSourceInfo\" to \"preferSingleQuotes\""]}, {"root": "INS SimpleName: preferSingleQuotes to MethodInvocation at 3", "operations": ["INS SimpleName: preferSingleQuotes to MethodInvocation at 3"]}, {"root": "UPDATE from \"preferStableNames\" to \"preferLineBreakAtEndOfFile\"", "operations": ["UPD StringLiteral: \"preferStableNames\" from \"preferStableNames\" to \"preferLineBreakAtEndOfFile\""]}, {"root": "UPDATE from preferStableNames to preferLineBreakAtEndOfFile", "operations": ["UPD SimpleName: preferStableNames from preferStableNames to preferLineBreakAtEndOfFile"]}, {"root": "UPDATE from \"preferSingleQuotes\" to \"polymerVersion\"", "operations": ["UPD StringLiteral: \"preferSingleQuotes\" from \"preferSingleQuotes\" to \"polymerVersion\""]}, {"root": "UPDATE from preferSingleQuotes to polymerVersion", "operations": ["UPD SimpleName: preferSingleQuotes from preferSingleQuotes to polymerVersion"]}, {"root": "UPDATE from \"preferLineBreakAtEndOfFile\" to \"parseJsDocDocumentation\"", "operations": ["UPD StringLiteral: \"preferLineBreakAtEndOfFile\" from \"preferLineBreakAtEndOfFile\" to \"parseJsDocDocumentation\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "UPDATE from \"polymerVersion\" to \"parentModuleCanSeeSymbolsDeclaredInChildren\"", "operations": ["UPD StringLiteral: \"polymerVersion\" from \"polymerVersion\" to \"parentModuleCanSeeSymbolsDeclaredInChildren\""]}, {"root": "UPDATE from polymerVersion to parentModuleCanSeeSymbolsDeclaredInChildren", "operations": ["UPD SimpleName: polymerVersion from polymerVersion to parentModuleCanSeeSymbolsDeclaredInChildren"]}, {"root": "UPDATE from \"parseJsDocDocumentation\" to \"outputJsStringUsage\"", "operations": ["UPD StringLiteral: \"parseJsDocDocumentation\" from \"parseJsDocDocumentation\" to \"outputJsStringUsage\""]}, {"root": "INS SimpleName: outputJsStringUsage to MethodInvocation at 3", "operations": ["INS SimpleName: outputJsStringUsage to MethodInvocation at 3"]}, {"root": "UPDATE from \"parentModuleCanSeeSymbolsDeclaredInChildren\" to \"outputJs\"", "operations": ["UPD StringLiteral: \"parentModuleCanSeeSymbolsDeclaredInChildren\" from \"parentModuleCanSeeSymbolsDeclaredInChildren\" to \"outputJs\""]}, {"root": "UPDATE from parentModuleCanSeeSymbolsDeclaredInChildren to outputJs", "operations": ["UPD SimpleName: parentModuleCanSeeSymbolsDeclaredInChildren from parentModuleCanSeeSymbolsDeclaredInChildren to outputJs"]}, {"root": "UPDATE from \"outputJsStringUsage\" to \"outputCharset\"", "operations": ["UPD StringLiteral: \"outputJsStringUsage\" from \"outputJsStringUsage\" to \"outputCharset\""]}, {"root": "UPDATE from outputJsStringUsage to outputCharset", "operations": ["UPD SimpleName: outputJsStringUsage from outputJsStringUsage to outputCharset"]}, {"root": "UPDATE from \"outputJs\" to \"optimizeCalls\"", "operations": ["UPD StringLiteral: \"outputJs\" from \"outputJs\" to \"optimizeCalls\""]}, {"root": "UPDATE from outputJs to optimizeCalls", "operations": ["UPD SimpleName: outputJs from outputJs to optimizeCalls"]}, {"root": "UPDATE from \"outputCharset\" to \"optimizeArgumentsArray\"", "operations": ["UPD StringLiteral: \"outputCharset\" from \"outputCharset\" to \"optimizeArgumentsArray\""]}, {"root": "UPDATE from outputCharset to optimizeArgumentsArray", "operations": ["UPD SimpleName: outputCharset from outputCharset to optimizeArgumentsArray"]}, {"root": "UPDATE from \"optimizeCalls\" to \"nameGenerator\"", "operations": ["UPD StringLiteral: \"optimizeCalls\" from \"optimizeCalls\" to \"nameGenerator\""]}, {"root": "UPDATE from optimizeCalls to nameGenerator", "operations": ["UPD SimpleName: optimizeCalls from optimizeCalls to nameGenerator"]}, {"root": "UPDATE from \"optimizeArgumentsArray\" to \"moveFunctionDeclarations\"", "operations": ["UPD StringLiteral: \"optimizeArgumentsArray\" from \"optimizeArgumentsArray\" to \"moveFunctionDeclarations\""]}, {"root": "UPDATE from optimizeArgumentsArray to moveFunctionDeclarations", "operations": ["UPD SimpleName: optimizeArgumentsArray from optimizeArgumentsArray to moveFunctionDeclarations"]}, {"root": "UPDATE from \"nameGenerator\" to \"modulesToPrintAfterEachPassRegexList\"", "operations": ["UPD StringLiteral: \"nameGenerator\" from \"nameGenerator\" to \"modulesToPrintAfterEachPassRegexList\""]}, {"root": "UPDATE from nameGenerator to modulesToPrintAfterEachPassRegexList", "operations": ["UPD SimpleName: nameGenerator from nameGenerator to modulesToPrintAfterEachPassRegexList"]}, {"root": "UPDATE from \"moveFunctionDeclarations\" to \"moduleRoots\"", "operations": ["UPD StringLiteral: \"moveFunctionDeclarations\" from \"moveFunctionDeclarations\" to \"moduleRoots\""]}, {"root": "UPDATE from moveFunctionDeclarations to moduleRoots", "operations": ["UPD SimpleName: moveFunctionDeclarations from moveFunctionDeclarations to moduleRoots"]}, {"root": "UPDATE from \"moduleRoots\" to \"messageBundle\"", "operations": ["UPD StringLiteral: \"moduleRoots\" from \"moduleRoots\" to \"messageBundle\""]}, {"root": "UPDATE from moduleRoots to messageBundle", "operations": ["UPD SimpleName: moduleRoots from moduleRoots to messageBundle"]}, {"root": "UPDATE from \"messageBundle\" to \"maxFunctionSizeAfterInlining\"", "operations": ["UPD StringLiteral: \"messageBundle\" from \"messageBundle\" to \"maxFunctionSizeAfterInlining\""]}, {"root": "UPDATE from messageBundle to maxFunctionSizeAfterInlining", "operations": ["UPD SimpleName: messageBundle from messageBundle to maxFunctionSizeAfterInlining"]}, {"root": "UPDATE from \"maxFunctionSizeAfterInlining\" to \"markNoSideEffectCalls\"", "operations": ["UPD StringLiteral: \"maxFunctionSizeAfterInlining\" from \"maxFunctionSizeAfterInlining\" to \"markNoSideEffectCalls\""]}, {"root": "UPDATE from maxFunctionSizeAfterInlining to markNoSideEffectCalls", "operations": ["UPD SimpleName: maxFunctionSizeAfterInlining from maxFunctionSizeAfterInlining to markNoSideEffectCalls"]}, {"root": "UPDATE from \"markNoSideEffectCalls\" to \"markAsCompiled\"", "operations": ["UPD StringLiteral: \"markNoSideEffectCalls\" from \"markNoSideEffectCalls\" to \"markAsCompiled\""]}, {"root": "UPDATE from markNoSideEffectCalls to markAsCompiled", "operations": ["UPD SimpleName: markNoSideEffectCalls from markNoSideEffectCalls to markAsCompiled"]}, {"root": "UPDATE from \"markAsCompiled\" to \"locale\"", "operations": ["UPD StringLiteral: \"markAsCompiled\" from \"markAsCompiled\" to \"locale\""]}, {"root": "UPDATE from markAsCompiled to locale", "operations": ["UPD SimpleName: markAsCompiled from markAsCompiled to locale"]}, {"root": "UPDATE from \"locale\" to \"lineLengthThreshold\"", "operations": ["UPD StringLiteral: \"locale\" from \"locale\" to \"lineLengthThreshold\""]}, {"root": "UPDATE from locale to lineLengthThreshold", "operations": ["UPD SimpleName: locale from locale to lineLengthThreshold"]}, {"root": "UPDATE from \"lineLengthThreshold\" to \"lineBreak\"", "operations": ["UPD StringLiteral: \"lineLengthThreshold\" from \"lineLengthThreshold\" to \"lineBreak\""]}, {"root": "UPDATE from lineLengthThreshold to lineBreak", "operations": ["UPD SimpleName: lineLengthThreshold from lineLengthThreshold to lineBreak"]}, {"root": "UPDATE from \"lineBreak\" to \"legacyCodeCompile\"", "operations": ["UPD StringLiteral: \"lineBreak\" from \"lineBreak\" to \"legacyCodeCompile\""]}, {"root": "UPDATE from lineBreak to legacyCodeCompile", "operations": ["UPD SimpleName: lineBreak from lineBreak to legacyCodeCompile"]}, {"root": "UPDATE from \"legacyCodeCompile\" to \"languageOut\"", "operations": ["UPD StringLiteral: \"legacyCodeCompile\" from \"legacyCodeCompile\" to \"languageOut\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "UPDATE from \"languageOut\" to \"languageIn\"", "operations": ["UPD StringLiteral: \"languageOut\" from \"languageOut\" to \"languageIn\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "UPDATE from \"languageIn\" to \"labelRenaming\"", "operations": ["UPD StringLiteral: \"languageIn\" from \"languageIn\" to \"labelRenaming\""]}, {"root": "INS SimpleName: labelRenaming to MethodInvocation at 3", "operations": ["INS SimpleName: labelRenaming to MethodInvocation at 3"]}, {"root": "UPDATE from \"labelRenaming\" to \"j2clPassMode\"", "operations": ["UPD StringLiteral: \"labelRenaming\" from \"labelRenaming\" to \"j2clPassMode\""]}, {"root": "UPDATE from labelRenaming to j2clPassMode", "operations": ["UPD SimpleName: labelRenaming from labelRenaming to j2clPassMode"]}, {"root": "UPDATE from \"j2clPassMode\" to \"instrumentBranchCoverage\"", "operations": ["UPD StringLiteral: \"j2clPassMode\" from \"j2clPassMode\" to \"instrumentBranchCoverage\""]}, {"root": "UPDATE from j2clPassMode to instrumentBranchCoverage", "operations": ["UPD SimpleName: j2clPassMode from j2clPassMode to instrumentBranchCoverage"]}, {"root": "UPDATE from \"instrumentBranchCoverage\" to \"instrumentForCoverageOnly\"", "operations": ["UPD StringLiteral: \"instrumentBranchCoverage\" from \"instrumentBranchCoverage\" to \"instrumentForCoverageOnly\""]}, {"root": "UPDATE from instrumentBranchCoverage to instrumentForCoverageOnly", "operations": ["UPD SimpleName: instrumentBranchCoverage from instrumentBranchCoverage to instrumentForCoverageOnly"]}, {"root": "UPDATE from \"instrumentForCoverageOnly\" to \"instrumentForCoverage\"", "operations": ["UPD StringLiteral: \"instrumentForCoverageOnly\" from \"instrumentForCoverageOnly\" to \"instrumentForCoverage\""]}, {"root": "UPDATE from instrumentForCoverageOnly to instrumentForCoverage", "operations": ["UPD SimpleName: instrumentForCoverageOnly from instrumentForCoverageOnly to instrumentForCoverage"]}, {"root": "UPDATE from \"instrumentForCoverage\" to \"instrumentationTemplate\"", "operations": ["UPD StringLiteral: \"instrumentForCoverage\" from \"instrumentForCoverage\" to \"instrumentationTemplate\""]}, {"root": "UPDATE from instrumentForCoverage to instrumentationTemplate", "operations": ["UPD SimpleName: instrumentForCoverage from instrumentForCoverage to instrumentationTemplate"]}, {"root": "UPDATE from \"instrumentationTemplate\" to \"instrumentationTemplateFile\"", "operations": ["UPD StringLiteral: \"instrumentationTemplate\" from \"instrumentationTemplate\" to \"instrumentationTemplateFile\""]}, {"root": "UPDATE from instrumentationTemplate to instrumentationTemplateFile", "operations": ["UPD SimpleName: instrumentationTemplate from instrumentationTemplate to instrumentationTemplateFile"]}, {"root": "UPDATE from \"instrumentationTemplateFile\" to \"inputVariableMap\"", "operations": ["UPD StringLiteral: \"instrumentationTemplateFile\" from \"instrumentationTemplateFile\" to \"inputVariableMap\""]}, {"root": "UPDATE from instrumentationTemplateFile to inputVariableMap", "operations": ["UPD SimpleName: instrumentationTemplateFile from instrumentationTemplateFile to inputVariableMap"]}, {"root": "UPDATE from \"inputVariableMap\" to \"inputSourceMaps\"", "operations": ["UPD StringLiteral: \"inputVariableMap\" from \"inputVariableMap\" to \"inputSourceMaps\""]}, {"root": "UPDATE from inputVariableMap to inputSourceMaps", "operations": ["UPD SimpleName: inputVariableMap from inputVariableMap to inputSourceMaps"]}, {"root": "UPDATE from \"inputSourceMaps\" to \"inputPropertyMap\"", "operations": ["UPD StringLiteral: \"inputSourceMaps\" from \"inputSourceMaps\" to \"inputPropertyMap\""]}, {"root": "UPDATE from inputSourceMaps to inputPropertyMap", "operations": ["UPD SimpleName: inputSourceMaps from inputSourceMaps to inputPropertyMap"]}, {"root": "UPDATE from \"inputPropertyMap\" to \"inputDelimiter\"", "operations": ["UPD StringLiteral: \"inputPropertyMap\" from \"inputPropertyMap\" to \"inputDelimiter\""]}, {"root": "UPDATE from inputPropertyMap to inputDelimiter", "operations": ["UPD SimpleName: inputPropertyMap from inputPropertyMap to inputDelimiter"]}, {"root": "UPDATE from \"inputDelimiter\" to \"inputAnonymousFunctionNamingMap\"", "operations": ["UPD StringLiteral: \"inputDelimiter\" from \"inputDelimiter\" to \"inputAnonymousFunctionNamingMap\""]}, {"root": "UPDATE from inputDelimiter to inputAnonymousFunctionNamingMap", "operations": ["UPD SimpleName: inputDelimiter from inputDelimiter to inputAnonymousFunctionNamingMap"]}, {"root": "UPDATE from \"inputAnonymousFunctionNamingMap\" to \"inlineVariables\"", "operations": ["UPD StringLiteral: \"inputAnonymousFunctionNamingMap\" from \"inputAnonymousFunctionNamingMap\" to \"inlineVariables\""]}, {"root": "UPDATE from inputAnonymousFunctionNamingMap to inlineVariables", "operations": ["UPD SimpleName: inputAnonymousFunctionNamingMap from inputAnonymousFunctionNamingMap to inlineVariables"]}, {"root": "UPDATE from \"inlineVariables\" to \"inlineProperties\"", "operations": ["UPD StringLiteral: \"inlineVariables\" from \"inlineVariables\" to \"inlineProperties\""]}, {"root": "UPDATE from inlineVariables to inlineProperties", "operations": ["UPD SimpleName: inlineVariables from inlineVariables to inlineProperties"]}, {"root": "UPDATE from \"inlineProperties\" to \"inlineLocalVariables\"", "operations": ["UPD StringLiteral: \"inlineProperties\" from \"inlineProperties\" to \"inlineLocalVariables\""]}, {"root": "UPDATE from inlineProperties to inlineLocalVariables", "operations": ["UPD SimpleName: inlineProperties from inlineProperties to inlineLocalVariables"]}, {"root": "UPDATE from \"inlineLocalVariables\" to \"inlineLocalFunctions\"", "operations": ["UPD StringLiteral: \"inlineLocalVariables\" from \"inlineLocalVariables\" to \"inlineLocalFunctions\""]}, {"root": "UPDATE from inlineLocalVariables to inlineLocalFunctions", "operations": ["UPD SimpleName: inlineLocalVariables from inlineLocalVariables to inlineLocalFunctions"]}, {"root": "UPDATE from \"inlineLocalFunctions\" to \"inlineGetters\"", "operations": ["UPD StringLiteral: \"inlineLocalFunctions\" from \"inlineLocalFunctions\" to \"inlineGetters\""]}, {"root": "UPDATE from inlineLocalFunctions to inlineGetters", "operations": ["UPD SimpleName: inlineLocalFunctions from inlineLocalFunctions to inlineGetters"]}, {"root": "UPDATE from \"inlineGetters\" to \"inlineFunctions\"", "operations": ["UPD StringLiteral: \"inlineGetters\" from \"inlineGetters\" to \"inlineFunctions\""]}, {"root": "UPDATE from inlineGetters to inlineFunctions", "operations": ["UPD SimpleName: inlineGetters from inlineGetters to inlineFunctions"]}, {"root": "UPDATE from \"inlineFunctions\" to \"inlineConstantVars\"", "operations": ["UPD StringLiteral: \"inlineFunctions\" from \"inlineFunctions\" to \"inlineConstantVars\""]}, {"root": "UPDATE from inlineFunctions to inlineConstantVars", "operations": ["UPD SimpleName: inlineFunctions from inlineFunctions to inlineConstantVars"]}, {"root": "UPDATE from \"inlineConstantVars\" to \"inferTypes\"", "operations": ["UPD StringLiteral: \"inlineConstantVars\" from \"inlineConstantVars\" to \"inferTypes\""]}, {"root": "UPDATE from inlineConstantVars to inferTypes", "operations": ["UPD SimpleName: inlineConstantVars from inlineConstantVars to inferTypes"]}, {"root": "UPDATE from \"inferTypes\" to \"inferConsts\"", "operations": ["UPD StringLiteral: \"inferTypes\" from \"inferTypes\" to \"inferConsts\""]}, {"root": "UPDATE from inferTypes to inferConsts", "operations": ["UPD SimpleName: inferTypes from inferTypes to inferConsts"]}, {"root": "UPDATE from \"inferConsts\" to \"idGeneratorsMapSerialized\"", "operations": ["UPD StringLiteral: \"inferConsts\" from \"inferConsts\" to \"idGeneratorsMapSerialized\""]}, {"root": "UPDATE from inferConsts to idGeneratorsMapSerialized", "operations": ["UPD SimpleName: inferConsts from inferConsts to idGeneratorsMapSerialized"]}, {"root": "UPDATE from \"idGeneratorsMapSerialized\" to \"idGenerators\"", "operations": ["UPD StringLiteral: \"idGeneratorsMapSerialized\" from \"idGeneratorsMapSerialized\" to \"idGenerators\""]}, {"root": "UPDATE from idGeneratorsMapSerialized to idGenerators", "operations": ["UPD SimpleName: idGeneratorsMapSerialized from idGeneratorsMapSerialized to idGenerators"]}, {"root": "UPDATE from \"idGenerators\" to \"generateTypedExterns\"", "operations": ["UPD StringLiteral: \"idGenerators\" from \"idGenerators\" to \"generateTypedExterns\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "UPDATE from \"generateTypedExterns\" to \"generatePseudoNames\"", "operations": ["UPD StringLiteral: \"generateTypedExterns\" from \"generateTypedExterns\" to \"generatePseudoNames\""]}, {"root": "INS SimpleName: generatePseudoNames to MethodInvocation at 3", "operations": ["INS SimpleName: generatePseudoNames to MethodInvocation at 3"]}, {"root": "UPDATE from \"generatePseudoNames\" to \"generateExports\"", "operations": ["UPD StringLiteral: \"generatePseudoNames\" from \"generatePseudoNames\" to \"generateExports\""]}, {"root": "UPDATE from generatePseudoNames to generateExports", "operations": ["UPD SimpleName: generatePseudoNames from generatePseudoNames to generateExports"]}, {"root": "UPDATE from \"generateExports\" to \"generateExportsAfterTypeChecking\"", "operations": ["UPD StringLiteral: \"generateExports\" from \"generateExports\" to \"generateExportsAfterTypeChecking\""]}, {"root": "UPDATE from generateExports to generateExportsAfterTypeChecking", "operations": ["UPD SimpleName: generateExports from generateExports to generateExportsAfterTypeChecking"]}, {"root": "UPDATE from \"generateExportsAfterTypeChecking\" to \"gatherCssNames\"", "operations": ["UPD StringLiteral: \"generateExportsAfterTypeChecking\" from \"generateExportsAfterTypeChecking\" to \"gatherCssNames\""]}, {"root": "UPDATE from generateExportsAfterTypeChecking to gatherCssNames", "operations": ["UPD SimpleName: generateExportsAfterTypeChecking from generateExportsAfterTypeChecking to gatherCssNames"]}, {"root": "UPDATE from \"gatherCssNames\" to \"forceLibraryInjection\"", "operations": ["UPD StringLiteral: \"gatherCssNames\" from \"gatherCssNames\" to \"forceLibraryInjection\""]}, {"root": "UPDATE from gatherCssNames to forceLibraryInjection", "operations": ["UPD SimpleName: gatherCssNames from gatherCssNames to forceLibraryInjection"]}, {"root": "UPDATE from \"forceLibraryInjection\" to \"foldConstants\"", "operations": ["UPD StringLiteral: \"forceLibraryInjection\" from \"forceLibraryInjection\" to \"foldConstants\""]}, {"root": "UPDATE from forceLibraryInjection to foldConstants", "operations": ["UPD SimpleName: forceLibraryInjection from forceLibraryInjection to foldConstants"]}, {"root": "UPDATE from \"foldConstants\" to \"flowSensitiveInlineVariables\"", "operations": ["UPD StringLiteral: \"foldConstants\" from \"foldConstants\" to \"flowSensitiveInlineVariables\""]}, {"root": "UPDATE from foldConstants to flowSensitiveInlineVariables", "operations": ["UPD SimpleName: foldConstants from foldConstants to flowSensitiveInlineVariables"]}, {"root": "UPDATE from \"flowSensitiveInlineVariables\" to \"filesToPrintAfterEachPassRegexList\"", "operations": ["UPD StringLiteral: \"flowSensitiveInlineVariables\" from \"flowSensitiveInlineVariables\" to \"filesToPrintAfterEachPassRegexList\""]}, {"root": "UPDATE from flowSensitiveInlineVariables to filesToPrintAfterEachPassRegexList", "operations": ["UPD SimpleName: flowSensitiveInlineVariables from flowSensitiveInlineVariables to filesToPrintAfterEachPassRegexList"]}, {"root": "DEL SimpleName: idGenerators", "operations": ["DEL SimpleName: idGenerators"]}, {"root": "DEL SimpleName: legacyCodeCompile", "operations": ["DEL SimpleName: legacyCodeCompile"]}, {"root": "DEL SimpleName: preferLineBreakAtEndOfFile", "operations": ["DEL SimpleName: preferLineBreakAtEndOfFile"]}, {"root": "DEL SimpleName: preserveTypeAnnotations", "operations": ["DEL SimpleName: preserveTypeAnnotations"]}, {"root": "DEL SimpleName: useDebugLog", "operations": ["DEL SimpleName: useDebugLog"]}, {"root": "DEL SimpleName: useTypesForLocalOptimization", "operations": ["DEL SimpleName: useTypesForLocalOptimization"]}]}}, {"CompilerOptions_diff": {"operations": ["Insert MethodInvocation(8402) into VariableDeclarationFragment(8403) at 1", "Insert MethodInvocation(8400) into MethodInvocation(8402) at 0", "Insert SimpleName: toString(8401) into MethodInvocation(8402) at 1", "Move MethodInvocation(8394) into MethodInvocation(8400) at 0", "Insert SimpleName: add(8397) into MethodInvocation(8400) at 1", "Insert StringLiteral: \"wrapGoogModulesForWhitespaceOnly\"(8398) into MethodInvocation(8400) at 2", "Insert SimpleName: wrapGoogModulesForWhitespaceOnly(8399) into MethodInvocation(8400) at 3", "Update SimpleName: toString(8393) to add", "Insert StringLiteral: \"warningsGuard\"(8393) into MethodInvocation(8396) at 2", "Move MethodInvocation(8387) into MethodInvocation(8396) at 3", "Update StringLiteral: \"wrapGoogModulesForWhitespaceOnly\"(8390) to \"variableRenaming\"", "Update SimpleName: wrapGoogModulesForWhitespaceOnly(8391) to variableRenaming", "Update StringLiteral: \"warningsGuard\"(8385) to \"useTypesForLocalOptimization\"", "Insert SimpleName: useTypesForLocalOptimization(8386) into MethodInvocation(8387) at 3", "Update StringLiteral: \"variableRenaming\"(8381) to \"emitUseStrict\"", "Update SimpleName: variableRenaming(8382) to emitUseStrict", "Update StringLiteral: \"useTypesForLocalOptimization\"(8377) to \"useNewTypeInference\"", "Move MethodInvocation(8370) into MethodInvocation(8379) at 3", "Update StringLiteral: \"emitUseStrict\"(8373) to \"useDebugLog\"", "Update SimpleName: emitUseStrict(8374) to useDebugLog", "Update StringLiteral: \"useNewTypeInference\"(8368) to \"tweakReplacements\"", "Move MethodInvocation(8361) into MethodInvocation(8370) at 3", "Update StringLiteral: \"useDebugLog\"(8364) to \"tweakProcessing\"", "Move MethodInvocation(8356) into MethodInvocation(8365) at 3", "Update StringLiteral: \"tweakReplacements\"(8359) to \"trustedStrings\"", "Insert SimpleName: trustedStrings(8359) into MethodInvocation(8360) at 3", "Update StringLiteral: \"tweakProcessing\"(8354) to \"transformAMDToCJSModules\"", "Insert SimpleName: transformAMDToCJSModules(8355) into MethodInvocation(8356) at 3", "Update StringLiteral: \"trustedStrings\"(8350) to \"tracer\"", "Update SimpleName: trustedStrings(8351) to tracer", "Update StringLiteral: \"transformAMDToCJSModules\"(8346) to \"tcProjectId\"", "Update SimpleName: transformAMDToCJSModules(8347) to tcProjectId", "Update StringLiteral: \"tracer\"(8342) to \"syntheticBlockStartMarker\"", "Update SimpleName: tracer(8343) to syntheticBlockStartMarker", "Update StringLiteral: \"tcProjectId\"(8338) to \"syntheticBlockEndMarker\"", "Update SimpleName: tcProjectId(8339) to syntheticBlockEndMarker", "Update StringLiteral: \"syntheticBlockStartMarker\"(8334) to \"summaryDetailLevel\"", "Update SimpleName: syntheticBlockStartMarker(8335) to summaryDetailLevel", "Update StringLiteral: \"syntheticBlockEndMarker\"(8330) to \"stripTypes\"", "Update SimpleName: syntheticBlockEndMarker(8331) to stripTypes", "Update StringLiteral: \"summaryDetailLevel\"(8326) to \"stripTypePrefixes\"", "Update SimpleName: summaryDetailLevel(8327) to stripTypePrefixes", "Update StringLiteral: \"stripTypes\"(8322) to \"stripNameSuffixes\"", "Update SimpleName: stripTypes(8323) to stripNameSuffixes", "Update StringLiteral: \"stripTypePrefixes\"(8318) to \"stripNamePrefixes\"", "Update SimpleName: stripTypePrefixes(8319) to stripNamePrefixes", "Update StringLiteral: \"stripNameSuffixes\"(8314) to \"sourceMapOutputPath\"", "Update SimpleName: stripNameSuffixes(8315) to sourceMapOutputPath", "Update StringLiteral: \"stripNamePrefixes\"(8310) to \"sourceMapLocationMappings\"", "Update SimpleName: stripNamePrefixes(8311) to sourceMapLocationMappings", "Update StringLiteral: \"sourceMapOutputPath\"(8306) to \"sourceMapFormat\"", "Update SimpleName: sourceMapOutputPath(8307) to sourceMapFormat", "Update StringLiteral: \"sourceMapLocationMappings\"(8302) to \"sourceMapDetailLevel\"", "Update SimpleName: sourceMapLocationMappings(8303) to sourceMapDetailLevel", "Update StringLiteral: \"sourceMapFormat\"(8298) to \"smartNameRemoval\"", "Update SimpleName: sourceMapFormat(8299) to smartNameRemoval", "Update StringLiteral: \"sourceMapDetailLevel\"(8294) to \"skipNonTranspilationPasses\"", "Update SimpleName: sourceMapDetailLevel(8295) to skipNonTranspilationPasses", "Update StringLiteral: \"smartNameRemoval\"(8290) to \"shadowVariables\"", "Update SimpleName: smartNameRemoval(8291) to shadowVariables", "Update StringLiteral: \"skipNonTranspilationPasses\"(8286) to \"runtimeTypeCheck\"", "Update SimpleName: skipNonTranspilationPasses(8287) to runtimeTypeCheck", "Update StringLiteral: \"shadowVariables\"(8282) to \"runtimeTypeCheckLogFunction\"", "Update SimpleName: shadowVariables(8283) to runtimeTypeCheckLogFunction", "Update StringLiteral: \"runtimeTypeCheck\"(8278) to \"rewritePolyfills\"", "Update SimpleName: runtimeTypeCheck(8279) to rewritePolyfills", "Update StringLiteral: \"runtimeTypeCheckLogFunction\"(8274) to \"rewriteFunctionExpressions\"", "Update SimpleName: runtimeTypeCheckLogFunction(8275) to rewriteFunctionExpressions", "Update StringLiteral: \"rewritePolyfills\"(8270) to \"reserveRawExports\"", "Update SimpleName: rewritePolyfills(8271) to reserveRawExports", "Update StringLiteral: \"rewriteFunctionExpressions\"(8266) to \"reportPath\"", "Update SimpleName: rewriteFunctionExpressions(8267) to reportPath", "Update StringLiteral: \"reserveRawExports\"(8262) to \"reportOTIErrorsUnderNTI\"", "Update SimpleName: reserveRawExports(8263) to reportOTIErrorsUnderNTI", "Update StringLiteral: \"reportPath\"(8258) to \"replaceStringsReservedStrings\"", "Update SimpleName: reportPath(8259) to replaceStringsReservedStrings", "Update StringLiteral: \"reportOTIErrorsUnderNTI\"(8254) to \"replaceStringsPlaceholderToken\"", "Update SimpleName: reportOTIErrorsUnderNTI(8255) to replaceStringsPlaceholderToken", "Update StringLiteral: \"replaceStringsReservedStrings\"(8250) to \"replaceStringsInputMap\"", "Update SimpleName: replaceStringsReservedStrings(8251) to replaceStringsInputMap", "Update StringLiteral: \"replaceStringsPlaceholderToken\"(8246) to \"replaceStringsFunctionDescriptions\"", "Update SimpleName: replaceStringsPlaceholderToken(8247) to replaceStringsFunctionDescriptions", "Update StringLiteral: \"replaceStringsInputMap\"(8242) to \"replaceMessagesWithChromeI18n\"", "Update SimpleName: replaceStringsInputMap(8243) to replaceMessagesWithChromeI18n", "Update StringLiteral: \"replaceStringsFunctionDescriptions\"(8238) to \"replaceIdGenerators\"", "Update SimpleName: replaceStringsFunctionDescriptions(8239) to replaceIdGenerators", "Update StringLiteral: \"replaceMessagesWithChromeI18n\"(8234) to \"renamePrefix\"", "Update SimpleName: replaceMessagesWithChromeI18n(8235) to renamePrefix", "Update StringLiteral: \"replaceIdGenerators\"(8230) to \"renamePrefixNamespace\"", "Update SimpleName: replaceIdGenerators(8231) to renamePrefixNamespace", "Update StringLiteral: \"renamePrefix\"(8226) to \"renamePrefixNamespaceAssumeCrossModuleNames\"", "Update SimpleName: renamePrefix(8227) to renamePrefixNamespaceAssumeCrossModuleNames", "Update StringLiteral: \"renamePrefixNamespace\"(8222) to \"removeUnusedVars\"", "Update SimpleName: renamePrefixNamespace(8223) to removeUnusedVars", "Update StringLiteral: \"renamePrefixNamespaceAssumeCrossModuleNames\"(8218) to \"removeUnusedPrototypeProperties\"", "Update SimpleName: renamePrefixNamespaceAssumeCrossModuleNames(8219) to removeUnusedPrototypeProperties", "Update StringLiteral: \"removeUnusedVars\"(8214) to \"removeUnusedPrototypePropertiesInExterns\"", "Update SimpleName: removeUnusedVars(8215) to removeUnusedPrototypePropertiesInExterns", "Update StringLiteral: \"removeUnusedPrototypeProperties\"(8210) to \"removeUnusedLocalVars\"", "Update SimpleName: removeUnusedPrototypeProperties(8211) to removeUnusedLocalVars", "Update StringLiteral: \"removeUnusedPrototypePropertiesInExterns\"(8206) to \"removeUnusedConstructorProperties\"", "Update SimpleName: removeUnusedPrototypePropertiesInExterns(8207) to removeUnusedConstructorProperties", "Update StringLiteral: \"removeUnusedLocalVars\"(8202) to \"removeUnusedClassProperties\"", "Update SimpleName: removeUnusedLocalVars(8203) to removeUnusedClassProperties", "Update StringLiteral: \"removeUnusedConstructorProperties\"(8198) to \"removeDeadCode\"", "Update SimpleName: removeUnusedConstructorProperties(8199) to removeDeadCode", "Update StringLiteral: \"removeUnusedClassProperties\"(8194) to \"removeJ2clAsserts\"", "Update SimpleName: removeUnusedClassProperties(8195) to removeJ2clAsserts", "Update StringLiteral: \"removeDeadCode\"(8190) to \"removeClosureAsserts\"", "Update SimpleName: removeDeadCode(8191) to removeClosureAsserts", "Update StringLiteral: \"removeJ2clAsserts\"(8186) to \"removeSuperMethods\"", "Update SimpleName: removeJ2clAsserts(8187) to removeSuperMethods", "Update StringLiteral: \"removeClosureAsserts\"(8182) to \"removeAbstractMethods\"", "Update SimpleName: removeClosureAsserts(8183) to removeAbstractMethods", "Update StringLiteral: \"removeSuperMethods\"(8178) to \"recordFunctionInformation\"", "Update SimpleName: removeSuperMethods(8179) to recordFunctionInformation", "Update StringLiteral: \"removeAbstractMethods\"(8174) to \"quoteKeywordProperties\"", "Update SimpleName: removeAbstractMethods(8175) to quoteKeywordProperties", "Update StringLiteral: \"recordFunctionInformation\"(8170) to \"protectHiddenSideEffects\"", "Update SimpleName: recordFunctionInformation(8171) to protectHiddenSideEffects", "Update StringLiteral: \"quoteKeywordProperties\"(8166) to \"propertyRenaming\"", "Update SimpleName: quoteKeywordProperties(8167) to propertyRenaming", "Update StringLiteral: \"protectHiddenSideEffects\"(8162) to \"propertyInvalidationErrors\"", "Update SimpleName: protectHiddenSideEffects(8163) to propertyInvalidationErrors", "Update StringLiteral: \"propertyRenaming\"(8158) to \"processObjectPropertyString\"", "Update SimpleName: propertyRenaming(8159) to processObjectPropertyString", "Update StringLiteral: \"propertyInvalidationErrors\"(8154) to \"processCommonJSModules\"", "Update SimpleName: propertyInvalidationErrors(8155) to processCommonJSModules", "Update StringLiteral: \"processObjectPropertyString\"(8150) to \"printSourceAfterEachPass\"", "Update SimpleName: processObjectPropertyString(8151) to printSourceAfterEachPass", "Update StringLiteral: \"processCommonJSModules\"(8146) to \"printInputDelimiter\"", "Update SimpleName: processCommonJSModules(8147) to printInputDelimiter", "Update StringLiteral: \"printSourceAfterEachPass\"(8142) to \"printConfig\"", "Update SimpleName: printSourceAfterEachPass(8143) to printConfig", "Update StringLiteral: \"printInputDelimiter\"(8138) to \"preventLibraryInjection\"", "Update SimpleName: printInputDelimiter(8139) to preventLibraryInjection", "Update StringLiteral: \"printConfig\"(8134) to \"prettyPrint\"", "Update SimpleName: printConfig(8135) to prettyPrint", "Update StringLiteral: \"preventLibraryInjection\"(8130) to \"preserveTypeAnnotations\"", "Update SimpleName: preventLibraryInjection(8131) to preserveTypeAnnotations", "Update StringLiteral: \"prettyPrint\"(8126) to \"preserveGoogProvidesAndRequires\"", "Update SimpleName: prettyPrint(8127) to preserveClosurePrimitives", "Update StringLiteral: \"preserveTypeAnnotations\"(8122) to \"preserveDetailedSourceInfo\"", "Move MethodInvocation(8115) into MethodInvocation(8124) at 3", "Update StringLiteral: \"preserveGoogProvidesAndRequires\"(8118) to \"preferStableNames\"", "Update SimpleName: preserveClosurePrimitives(8119) to preferStableNames", "Update StringLiteral: \"preserveDetailedSourceInfo\"(8113) to \"preferSingleQuotes\"", "Insert SimpleName: preferSingleQuotes(8114) into MethodInvocation(8115) at 3", "Update StringLiteral: \"preferStableNames\"(8109) to \"preferLineBreakAtEndOfFile\"", "Update SimpleName: preferStableNames(8110) to preferLineBreakAtEndOfFile", "Update StringLiteral: \"preferSingleQuotes\"(8105) to \"polymerVersion\"", "Update SimpleName: preferSingleQuotes(8106) to polymerVersion", "Update StringLiteral: \"preferLineBreakAtEndOfFile\"(8101) to \"parseJsDocDocumentation\"", "Move MethodInvocation(8094) into MethodInvocation(8103) at 3", "Update StringLiteral: \"polymerVersion\"(8097) to \"parentModuleCanSeeSymbolsDeclaredInChildren\"", "Update SimpleName: polymerVersion(8098) to parentModuleCanSeeSymbolsDeclaredInChildren", "Update StringLiteral: \"parseJsDocDocumentation\"(8092) to \"outputJsStringUsage\"", "Insert SimpleName: outputJsStringUsage(8093) into MethodInvocation(8094) at 3", "Update StringLiteral: \"parentModuleCanSeeSymbolsDeclaredInChildren\"(8088) to \"outputJs\"", "Update SimpleName: parentModuleCanSeeSymbolsDeclaredInChildren(8089) to outputJs", "Update StringLiteral: \"outputJsStringUsage\"(8084) to \"outputCharset\"", "Update SimpleName: outputJsStringUsage(8085) to outputCharset", "Update StringLiteral: \"outputJs\"(8080) to \"optimizeCalls\"", "Update SimpleName: outputJs(8081) to optimizeCalls", "Update StringLiteral: \"outputCharset\"(8076) to \"optimizeArgumentsArray\"", "Update SimpleName: outputCharset(8077) to optimizeArgumentsArray", "Update StringLiteral: \"optimizeCalls\"(8072) to \"nameGenerator\"", "Update SimpleName: optimizeCalls(8073) to nameGenerator", "Update StringLiteral: \"optimizeArgumentsArray\"(8068) to \"moveFunctionDeclarations\"", "Update SimpleName: optimizeArgumentsArray(8069) to moveFunctionDeclarations", "Update StringLiteral: \"nameGenerator\"(8064) to \"modulesToPrintAfterEachPassRegexList\"", "Update SimpleName: nameGenerator(8065) to modulesToPrintAfterEachPassRegexList", "Update StringLiteral: \"moveFunctionDeclarations\"(8060) to \"moduleRoots\"", "Update SimpleName: moveFunctionDeclarations(8061) to moduleRoots", "Update StringLiteral: \"moduleRoots\"(8056) to \"messageBundle\"", "Update SimpleName: moduleRoots(8057) to messageBundle", "Update StringLiteral: \"messageBundle\"(8052) to \"maxFunctionSizeAfterInlining\"", "Update SimpleName: messageBundle(8053) to maxFunctionSizeAfterInlining", "Update StringLiteral: \"maxFunctionSizeAfterInlining\"(8048) to \"markNoSideEffectCalls\"", "Update SimpleName: maxFunctionSizeAfterInlining(8049) to markNoSideEffectCalls", "Update StringLiteral: \"markNoSideEffectCalls\"(8044) to \"markAsCompiled\"", "Update SimpleName: markNoSideEffectCalls(8045) to markAsCompiled", "Update StringLiteral: \"markAsCompiled\"(8040) to \"locale\"", "Update SimpleName: markAsCompiled(8041) to locale", "Update StringLiteral: \"locale\"(8036) to \"lineLengthThreshold\"", "Update SimpleName: locale(8037) to lineLengthThreshold", "Update StringLiteral: \"lineLengthThreshold\"(8032) to \"lineBreak\"", "Update SimpleName: lineLengthThreshold(8033) to lineBreak", "Update StringLiteral: \"lineBreak\"(8028) to \"legacyCodeCompile\"", "Update SimpleName: lineBreak(8029) to legacyCodeCompile", "Update StringLiteral: \"legacyCodeCompile\"(8024) to \"languageOut\"", "Move MethodInvocation(8021) into MethodInvocation(8026) at 3", "Update StringLiteral: \"languageOut\"(8019) to \"languageIn\"", "Move MethodInvocation(8016) into MethodInvocation(8021) at 3", "Update StringLiteral: \"languageIn\"(8014) to \"labelRenaming\"", "Insert SimpleName: labelRenaming(8015) into MethodInvocation(8016) at 3", "Update StringLiteral: \"labelRenaming\"(8010) to \"j2clPassMode\"", "Update SimpleName: labelRenaming(8011) to j2clPassMode", "Update StringLiteral: \"j2clPassMode\"(8006) to \"instrumentBranchCoverage\"", "Update SimpleName: j2clPassMode(8007) to instrumentBranchCoverage", "Update StringLiteral: \"instrumentBranchCoverage\"(8002) to \"instrumentForCoverageOnly\"", "Update SimpleName: instrumentBranchCoverage(8003) to instrumentForCoverageOnly", "Update StringLiteral: \"instrumentForCoverageOnly\"(7998) to \"instrumentForCoverage\"", "Update SimpleName: instrumentForCoverageOnly(7999) to instrumentForCoverage", "Update StringLiteral: \"instrumentForCoverage\"(7994) to \"instrumentationTemplate\"", "Update SimpleName: instrumentForCoverage(7995) to instrumentationTemplate", "Update StringLiteral: \"instrumentationTemplate\"(7990) to \"instrumentationTemplateFile\"", "Update SimpleName: instrumentationTemplate(7991) to instrumentationTemplateFile", "Update StringLiteral: \"instrumentationTemplateFile\"(7986) to \"inputVariableMap\"", "Update SimpleName: instrumentationTemplateFile(7987) to inputVariableMap", "Update StringLiteral: \"inputVariableMap\"(7982) to \"inputSourceMaps\"", "Update SimpleName: inputVariableMap(7983) to inputSourceMaps", "Update StringLiteral: \"inputSourceMaps\"(7978) to \"inputPropertyMap\"", "Update SimpleName: inputSourceMaps(7979) to inputPropertyMap", "Update StringLiteral: \"inputPropertyMap\"(7974) to \"inputDelimiter\"", "Update SimpleName: inputPropertyMap(7975) to inputDelimiter", "Update StringLiteral: \"inputDelimiter\"(7970) to \"inputAnonymousFunctionNamingMap\"", "Update SimpleName: inputDelimiter(7971) to inputAnonymousFunctionNamingMap", "Update StringLiteral: \"inputAnonymousFunctionNamingMap\"(7966) to \"inlineVariables\"", "Update SimpleName: inputAnonymousFunctionNamingMap(7967) to inlineVariables", "Update StringLiteral: \"inlineVariables\"(7962) to \"inlineProperties\"", "Update SimpleName: inlineVariables(7963) to inlineProperties", "Update StringLiteral: \"inlineProperties\"(7958) to \"inlineLocalVariables\"", "Update SimpleName: inlineProperties(7959) to inlineLocalVariables", "Update StringLiteral: \"inlineLocalVariables\"(7954) to \"inlineLocalFunctions\"", "Update SimpleName: inlineLocalVariables(7955) to inlineLocalFunctions", "Update StringLiteral: \"inlineLocalFunctions\"(7950) to \"inlineGetters\"", "Update SimpleName: inlineLocalFunctions(7951) to inlineGetters", "Update StringLiteral: \"inlineGetters\"(7946) to \"inlineFunctions\"", "Update SimpleName: inlineGetters(7947) to inlineFunctions", "Update StringLiteral: \"inlineFunctions\"(7942) to \"inlineConstantVars\"", "Update SimpleName: inlineFunctions(7943) to inlineConstantVars", "Update StringLiteral: \"inlineConstantVars\"(7938) to \"inferTypes\"", "Update SimpleName: inlineConstantVars(7939) to inferTypes", "Update StringLiteral: \"inferTypes\"(7934) to \"inferConsts\"", "Update SimpleName: inferTypes(7935) to inferConsts", "Update StringLiteral: \"inferConsts\"(7930) to \"idGeneratorsMapSerialized\"", "Update SimpleName: inferConsts(7931) to idGeneratorsMapSerialized", "Update StringLiteral: \"idGeneratorsMapSerialized\"(7926) to \"idGenerators\"", "Update SimpleName: idGeneratorsMapSerialized(7927) to idGenerators", "Update StringLiteral: \"idGenerators\"(7922) to \"generateTypedExterns\"", "Move MethodInvocation(7919) into MethodInvocation(7924) at 3", "Update StringLiteral: \"generateTypedExterns\"(7917) to \"generatePseudoNames\"", "Insert SimpleName: generatePseudoNames(7918) into MethodInvocation(7919) at 3", "Update StringLiteral: \"generatePseudoNames\"(7913) to \"generateExports\"", "Update SimpleName: generatePseudoNames(7914) to generateExports", "Update StringLiteral: \"generateExports\"(7909) to \"generateExportsAfterTypeChecking\"", "Update SimpleName: generateExports(7910) to generateExportsAfterTypeChecking", "Update StringLiteral: \"generateExportsAfterTypeChecking\"(7905) to \"gatherCssNames\"", "Update SimpleName: generateExportsAfterTypeChecking(7906) to gatherCssNames", "Update StringLiteral: \"gatherCssNames\"(7901) to \"forceLibraryInjection\"", "Update SimpleName: gatherCssNames(7902) to forceLibraryInjection", "Update StringLiteral: \"forceLibraryInjection\"(7897) to \"foldConstants\"", "Update SimpleName: forceLibraryInjection(7898) to foldConstants", "Update StringLiteral: \"foldConstants\"(7893) to \"flowSensitiveInlineVariables\"", "Update SimpleName: foldConstants(7894) to flowSensitiveInlineVariables", "Update StringLiteral: \"flowSensitiveInlineVariables\"(7889) to \"filesToPrintAfterEachPassRegexList\"", "Update SimpleName: flowSensitiveInlineVariables(7890) to filesToPrintAfterEachPassRegexList", "Delete SimpleName: idGenerators(7923)", "Delete SimpleName: legacyCodeCompile(8025)", "Delete SimpleName: preferLineBreakAtEndOfFile(8102)", "Delete SimpleName: preserveTypeAnnotations(8123)", "Delete SimpleName: useDebugLog(8365)", "Delete SimpleName: useTypesForLocalOptimization(8378)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}