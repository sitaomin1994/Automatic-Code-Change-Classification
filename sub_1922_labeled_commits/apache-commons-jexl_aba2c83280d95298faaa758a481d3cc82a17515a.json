{"application": "apache-commons-jexl", "csha": "aba2c83280d95298faaa758a481d3cc82a17515a", "files": [{"Engine_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 31"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 45"]}, {"root": "UPDATE from java.util.Map.Entry to java.util.concurrent.atomic.AtomicBoolean", "operations": ["UPD QualifiedName: java.util.Map.Entry from java.util.Map.Entry to java.util.concurrent.atomic.AtomicBoolean"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleType: AtomicBoolean to ClassInstanceCreation at 0", "INS SimpleType: AtomicBoolean to FieldDeclaration at 3", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS Modifier: protected to FieldDeclaration at 1", "INS SimpleName: parsing to VariableDeclarationFragment at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 28", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 28"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Javadoc to FieldDeclaration at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Modifier: final to FieldDeclaration at 2"]}, {"root": "UPDATE from protected to public", "operations": ["UPD Modifier: protected from protected to public"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV PrimitiveType: boolean to MethodDeclaration at 1", "MOV Modifier: protected to MethodDeclaration at 0", "MOV SimpleName: removeEldestEntry to MethodDeclaration at 2", "MOV Block to MethodDeclaration at 3"]}, {"root": "UPDATE from removeEldestEntry to isCancellable", "operations": ["UPD SimpleName: removeEldestEntry from removeEldestEntry to isCancellable"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 9"]}, {"root": "UPDATE from K to AtomicBoolean", "operations": ["UPD SimpleName: K from K to AtomicBoolean", "UPD SimpleName: SoftReference from SoftReference to AtomicBoolean"]}, {"root": "MOVE from SimpleType: AtomicBoolean", "operations": ["MOV SimpleName: SoftReference to SimpleType: AtomicBoolean at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ReturnStatement to Block at 7"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: script to VariableDeclarationFragment at 0", "INS NullLiteral to VariableDeclarationFragment at 1"]}, {"root": "INS IfStatement to Block at 4", "operations": ["INS SimpleName: Parser to SimpleType: Parser at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: StringReader to SimpleType: StringReader at 0", "INS SimpleName: lparser to VariableDeclarationFragment at 0", "INS SimpleName: lparser to MethodInvocation at 0", "INS SimpleName: parse to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS SimpleType: StringReader to ClassInstanceCreation at 0", "INS Block to IfStatement at 1", "INS TryStatement to Block at 0", "INS BooleanLiteral: false to MethodInvocation at 2", "INS Block to IfStatement at 2", "INS SimpleName: set to MethodInvocation at 1", "INS SimpleName: Parser to SimpleType: Parser at 0", "INS SimpleName: script to Assignment: = at 0", "INS SimpleType: Parser to ClassInstanceCreation at 0", "INS IfStatement to Block at 4", "INS BooleanLiteral: true to MethodInvocation at 3", "INS SimpleName: parsing to MethodInvocation at 0", "INS SimpleName: src to MethodInvocation at 3", "INS Block to TryStatement at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: parsing to MethodInvocation at 0", "INS SimpleType: Parser to VariableDeclarationStatement at 0", "INS BooleanLiteral: false to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS StringLiteral: \";\" to ClassInstanceCreation at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: ninfo to MethodInvocation at 2", "INS SimpleName: registers to MethodInvocation at 5", "INS Block to TryStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS SimpleName: scope to MethodInvocation at 4", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: compareAndSet to MethodInvocation at 1", "INS SimpleName: expression to MethodInvocation at 6"]}, {"root": "UPDATE from The default cache load factor. to The atomic parsing flag; true whilst parsing.", "operations": ["UPD TextElement: The default cache load factor. from The default cache load factor. to The atomic parsing flag; true whilst parsing."]}, {"root": "UPDATE from true to false", "operations": ["UPD BooleanLiteral: true from true to false"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV BooleanLiteral: true to ClassInstanceCreation at 1"]}, {"root": "UPDATE from ; when parsing expressions, this engine synchronizes on the parser. to ; when parsing expressions, this engine uses the parser if it", "operations": ["UPD TextElement: ; when parsing expressions, this engine synchronizes on the parser. from ; when parsing expressions, this engine synchronizes on the parser. to ; when parsing expressions, this engine uses the parser if it"]}, {"root": "INS TextElement: is not already in use otherwise it will create a new temporary one. to TagElement at 3", "operations": ["INS TextElement: is not already in use otherwise it will create a new temporary one. to TagElement at 3"]}, {"root": "INS FieldAccess to ReturnStatement at 0", "operations": ["INS SimpleName: cancellable to FieldAccess at 1", "INS FieldAccess to ReturnStatement at 0", "INS ThisExpression to FieldAccess at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: ASTJexlScript to VariableDeclarationStatement at 0"]}, {"root": "MOVE from SimpleType: AtomicBoolean", "operations": ["MOV SimpleName: K to SimpleType: AtomicBoolean at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.ref.SoftReference"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL PrimitiveType: float", "DEL Modifier: private", "DEL Modifier: final", "DEL SimpleName: LOAD_FACTOR", "DEL NumberLiteral: 0.75f", "DEL Modifier: static", "DEL FieldDeclaration", "DEL VariableDeclarationFragment"]}, {"root": "DEL InfixExpression: >", "operations": ["DEL MethodInvocation", "DEL SimpleName: cacheSize", "DEL SimpleName: size", "DEL InfixExpression: >"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleType: V", "DEL PrimitiveType: void", "DEL SimpleName: get", "DEL TagElement: @param", "DEL SimpleName: Map", "DEL MethodInvocation", "DEL SimpleName: SoftCache", "DEL SimpleName: size", "DEL ParameterizedType: SoftReference<Map<K,V>>", "DEL NullLiteral", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL Javadoc", "DEL SimpleName: V", "DEL SimpleName: map", "DEL TextElement: The soft reference to the cache map.", "DEL SimpleName: K", "DEL Javadoc", "DEL TagElement", "DEL ConditionalExpression", "DEL ParameterizedType: Map<K,V>", "DEL SimpleType: K", "DEL NullLiteral", "DEL SimpleName: get", "DEL SimpleName: entrySet", "DEL IfStatement", "DEL ConditionalExpression", "DEL SimpleName: key", "DEL TagElement: @return", "DEL SimpleName: K", "DEL ReturnStatement", "DEL TagElement", "DEL TagElement: @param", "DEL SimpleName: V", "DEL SimpleName: size", "DEL VariableDeclarationFragment", "DEL SimpleName: ref", "DEL TagElement", "DEL SimpleType: K", "DEL SimpleName: put", "DEL SimpleType: K", "DEL ConditionalExpression", "DEL Javadoc", "DEL SimpleName: V", "DEL SimpleName: V", "DEL SimpleType: V", "DEL SimpleName: map", "DEL TextElement: <", "DEL Block", "DEL SimpleName: V", "DEL InfixExpression: ==", "DEL InfixExpression: !=", "DEL VariableDeclarationStatement", "DEL SimpleName: ref", "DEL SimpleName: Collections", "DEL SimpleName: emptySet", "DEL SimpleName: Set", "DEL SimpleType: K", "DEL TextElement: The cache size.", "DEL NullLiteral", "DEL NullLiteral", "DEL Block", "DEL SimpleName: Map", "DEL SimpleName: map", "DEL SimpleType: V", "DEL TagElement", "DEL TagElement: @param", "DEL ParameterizedType: Entry<K,V>", "DEL PrimitiveType: int", "DEL SimpleName: script", "DEL SingleVariableDeclaration", "DEL SimpleName: K", "DEL TextElement: >", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL InfixExpression: !=", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: K", "DEL MethodInvocation", "DEL Javadoc", "DEL Block", "DEL InfixExpression: !=", "DEL Assignment: =", "DEL FieldDeclaration", "DEL TextElement: Creates a new instance of a soft cache.", "DEL SimpleType: K", "DEL NullLiteral", "DEL TagElement: @param", "DEL PrimitiveType: int", "DEL TextElement:  the cache entry set", "DEL SimpleType: Map", "DEL SimpleName: get", "DEL SimpleName: K", "DEL Javadoc", "DEL TypeDeclaration: class", "DEL SimpleName: K", "DEL InfixExpression: !=", "DEL SimpleName: map", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: theSize", "DEL Assignment: =", "DEL SimpleName: map", "DEL TagElement", "DEL ConditionalExpression", "DEL SimpleName: V", "DEL Modifier: private", "DEL SimpleName: map", "DEL SimpleName: ref", "DEL SimpleType: K", "DEL SimpleName: key", "DEL SimpleName: Map", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: V", "DEL SimpleName: map", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL NullLiteral", "DEL ParameterizedType: Set<Entry<K,V>>", "DEL TagElement", "DEL TextElement: Produces the cache entry set.", "DEL TextElement: Returns the cache size.", "DEL TextElement: Clears the cache.", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL TextElement: <", "DEL Modifier: protected", "DEL SimpleName: get", "DEL SimpleName: K", "DEL TextElement:  the cache entry key", "DEL SimpleName: script", "DEL ParameterizedType: Map<K,V>", "DEL ConditionalExpression", "DEL TextElement:  the cache key entry type", "DEL SimpleName: createCache", "DEL SimpleName: Map", "DEL SimpleName: size", "DEL SimpleName: theSize", "DEL TextElement: memory pressure.</p>", "DEL TagElement", "DEL Block", "DEL TextElement: Puts a value in cache.", "DEL Javadoc", "DEL TextElement: Gets a value from cache.", "DEL SimpleType: V", "DEL SimpleName: SoftReference", "DEL SimpleName: size", "DEL Modifier: private", "DEL TextElement: <p>The actual cache is held through a soft reference, allowing it to be GCed under", "DEL SimpleName: ref", "DEL NullLiteral", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: V", "DEL TextElement: A soft referenced cache.", "DEL SimpleName: V", "DEL InfixExpression: !=", "DEL SimpleName: K", "DEL ClassInstanceCreation", "DEL TextElement:     the cache entry key", "DEL SimpleName: ref", "DEL SimpleName: SoftCache", "DEL MethodDeclaration", "DEL SimpleName: key", "DEL SimpleName: V", "DEL ParameterizedType: Map<K,V>", "DEL SimpleType: Set", "DEL SimpleName: entrySet", "DEL SimpleName: K", "DEL Javadoc", "DEL ParameterizedType: Entry<K,V>", "DEL SimpleName: Entry", "DEL SimpleType: SoftReference", "DEL SimpleName: key", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL SimpleName: ref", "DEL MethodDeclaration", "DEL TextElement:  the cache size", "DEL SimpleName: Entry", "DEL SimpleName: V", "DEL TextElement: >", "DEL SimpleName: size", "DEL MethodInvocation", "DEL SimpleName: map", "DEL SimpleType: K", "DEL ExpressionStatement", "DEL SimpleType: V", "DEL NullLiteral", "DEL SimpleName: ref", "DEL SimpleName: put", "DEL SimpleName: key", "DEL SimpleName: map", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleType: V", "DEL SimpleName: theSize", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleType: Entry", "DEL SimpleType: Map", "DEL SimpleName: ref", "DEL SimpleName: get", "DEL SimpleName: clear", "DEL TagElement", "DEL SimpleType: K", "DEL SimpleName: V", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL TextElement:  the cache size", "DEL MethodDeclaration", "DEL NullLiteral", "DEL SimpleType: V", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Map<K,V>", "DEL TagElement: @return", "DEL SimpleName: Map", "DEL SimpleName: K", "DEL TagElement: @return", "DEL SimpleName: key", "DEL TextElement:  the cache entry value", "DEL NullLiteral", "DEL SimpleType: V", "DEL SimpleName: script", "DEL SimpleType: Entry", "DEL SimpleType: Map", "DEL ExpressionStatement", "DEL SimpleName: ref", "DEL SimpleType: SoftReference", "DEL PrimitiveType: int", "DEL TypeParameter", "DEL SimpleName: map", "DEL NullLiteral", "DEL Modifier: final", "DEL Block", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL TypeParameter", "DEL SimpleType: Map", "DEL TextElement:  the cache key value type", "DEL ParameterizedType: SoftReference<Map<K,V>>", "DEL SimpleType: Map", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Map<K,V>", "DEL TagElement", "DEL SimpleType: K", "DEL SimpleName: map", "DEL Block", "DEL TextElement:  the cache entry value", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: cacheSize", "DEL ParameterizedType: java.util.LinkedHashMap<K,V>", "DEL SimpleName: Override", "DEL Javadoc", "DEL TextElement: <", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL SimpleName: cacheSize", "DEL QualifiedName: java.util.LinkedHashMap", "DEL PrimitiveType: int", "DEL Modifier: static", "DEL Modifier: final", "DEL TagElement: @return", "DEL TextElement: <", "DEL SimpleName: K", "DEL SimpleName: V", "DEL SimpleName: serialVersionUID", "DEL TextElement:        the value type", "DEL SingleVariableDeclaration", "DEL SimpleName: LOAD_FACTOR", "DEL SimpleType: K", "DEL SimpleName: K", "DEL SimpleName: V", "DEL SimpleType: K", "DEL TagElement", "DEL TypeParameter", "DEL TagElement: @param", "DEL TextElement: >", "DEL Block", "DEL TextElement: >", "DEL MethodDeclaration", "DEL SimpleType: V", "DEL SimpleType: V", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 1L", "DEL SimpleName: cacheSize", "DEL SimpleType: Map", "DEL SimpleType: K", "DEL TextElement:  a Map usable as a cache bounded to the given size", "DEL SimpleName: eldest", "DEL SimpleName: V", "DEL TextElement:  the cache size, must be &gt; 0", "DEL QualifiedName: Map.Entry", "DEL SimpleName: createCache", "DEL MarkerAnnotation", "DEL Modifier: final", "DEL AnonymousClassDeclaration", "DEL SimpleName: V", "DEL MethodDeclaration", "DEL SimpleName: K", "DEL TextElement: Creates a cache.", "DEL SimpleType: Map.Entry", "DEL TypeParameter", "DEL TagElement", "DEL SimpleName: K", "DEL SimpleName: Map", "DEL TagElement: @param", "DEL TextElement:        the key type", "DEL Modifier: protected", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL SimpleType: V", "DEL TextElement: Serial version UID. ", "DEL SimpleName: V", "DEL Javadoc", "DEL ParameterizedType: Map.Entry<K,V>", "DEL FieldDeclaration", "DEL ParameterizedType: Map<K,V>", "DEL SimpleName: K", "DEL PrimitiveType: long", "DEL SimpleType: java.util.LinkedHashMap", "DEL TagElement: @param"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL SimpleName: parser", "DEL SynchronizedStatement"]}, {"root": "DEL Block", "operations": ["DEL VariableDeclarationStatement", "DEL Block", "DEL SynchronizedStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: script", "DEL SimpleName: parser"]}]}}, {"Engine_diff": {"operations": ["Move ImportDeclaration(55) into CompilationUnit(2468) at 31", "Move MethodDeclaration(751) into TypeDeclaration: class(2467) at 45", "Update QualifiedName: java.util.Map.Entry(54) to java.util.concurrent.atomic.AtomicBoolean", "Insert FieldDeclaration(160) into TypeDeclaration: class(2467) at 8", "Insert MethodDeclaration(674) into TypeDeclaration: class(2467) at 27", "Move Javadoc(270) into FieldDeclaration(160) at 0", "Insert Modifier: protected(150) into FieldDeclaration(160) at 1", "Move Modifier: final(777) into FieldDeclaration(160) at 2", "Insert SimpleType: AtomicBoolean(153) into FieldDeclaration(160) at 3", "Insert VariableDeclarationFragment(159) into FieldDeclaration(160) at 4", "Update Modifier: protected(1068) to public", "Move Modifier: protected(1068) into MethodDeclaration(674) at 0", "Move PrimitiveType: boolean(1069) into MethodDeclaration(674) at 1", "Update SimpleName: removeEldestEntry(1070) to isCancellable", "Move SimpleName: removeEldestEntry(1070) into MethodDeclaration(674) at 2", "Move Block(1085) into MethodDeclaration(674) at 3", "Move Block(1107) into MethodDeclaration(745) at 4", "Move Block(2623) into MethodDeclaration(2333) at 9", "Update SimpleName: SoftReference(786) to AtomicBoolean", "Move SimpleName: SoftReference(786) into SimpleType: AtomicBoolean(153) at 0", "Insert SimpleName: parsing(154) into VariableDeclarationFragment(159) at 0", "Insert ClassInstanceCreation(158) into VariableDeclarationFragment(159) at 1", "Move VariableDeclarationStatement(2536) into Block(2332) at 0", "Insert VariableDeclarationStatement(2210) into Block(2332) at 1", "Insert IfStatement(2320) into Block(2332) at 4", "Move ReturnStatement(2626) into Block(2332) at 7", "Update TextElement: The default cache load factor.(268) to The atomic parsing flag; true whilst parsing.", "Insert SimpleType: AtomicBoolean(156) into ClassInstanceCreation(158) at 0", "Update BooleanLiteral: true(1054) to false", "Move BooleanLiteral: true(1054) into ClassInstanceCreation(158) at 1", "Update TextElement: ; when parsing expressions, this engine synchronizes on the parser.(152) to ; when parsing expressions, this engine uses the parser if it", "Insert TextElement: is not already in use otherwise it will create a new temporary one.(165) into TagElement(166) at 3", "Insert FieldAccess(671) into ReturnStatement(672) at 0", "Move SimpleType: ASTJexlScript(2538) into VariableDeclarationStatement(2210) at 0", "Insert VariableDeclarationFragment(2209) into VariableDeclarationStatement(2210) at 1", "Insert MethodInvocation(2275) into IfStatement(2320) at 0", "Insert Block(2295) into IfStatement(2320) at 1", "Insert Block(2319) into IfStatement(2320) at 2", "Update SimpleName: K(949) to AtomicBoolean", "Move SimpleName: K(949) into SimpleType: AtomicBoolean(156) at 0", "Insert ThisExpression(669) into FieldAccess(671) at 0", "Insert SimpleName: cancellable(670) into FieldAccess(671) at 1", "Insert SimpleName: script(2207) into VariableDeclarationFragment(2209) at 0", "Insert NullLiteral(2208) into VariableDeclarationFragment(2209) at 1", "Insert SimpleName: parsing(2271) into MethodInvocation(2275) at 0", "Insert SimpleName: compareAndSet(2272) into MethodInvocation(2275) at 1", "Insert BooleanLiteral: false(2273) into MethodInvocation(2275) at 2", "Insert BooleanLiteral: true(2274) into MethodInvocation(2275) at 3", "Insert TryStatement(2294) into Block(2295) at 0", "Insert VariableDeclarationStatement(2307) into Block(2319) at 0", "Insert ExpressionStatement(2318) into Block(2319) at 1", "Insert Block(2287) into TryStatement(2294) at 0", "Insert Block(2293) into TryStatement(2294) at 1", "Insert SimpleType: Parser(2297) into VariableDeclarationStatement(2307) at 0", "Insert VariableDeclarationFragment(2306) into VariableDeclarationStatement(2307) at 1", "Insert Assignment: =(2317) into ExpressionStatement(2318) at 0", "Move ExpressionStatement(2613) into Block(2287) at 0", "Insert ExpressionStatement(2292) into Block(2293) at 0", "Insert SimpleName: Parser(2296) into SimpleType: Parser(2297) at 0", "Insert SimpleName: lparser(2298) into VariableDeclarationFragment(2306) at 0", "Insert ClassInstanceCreation(2305) into VariableDeclarationFragment(2306) at 1", "Insert SimpleName: script(2308) into Assignment: =(2317) at 0", "Insert MethodInvocation(2316) into Assignment: =(2317) at 1", "Insert MethodInvocation(2291) into ExpressionStatement(2292) at 0", "Insert SimpleType: Parser(2300) into ClassInstanceCreation(2305) at 0", "Insert ClassInstanceCreation(2304) into ClassInstanceCreation(2305) at 1", "Insert SimpleName: lparser(2309) into MethodInvocation(2316) at 0", "Insert SimpleName: parse(2310) into MethodInvocation(2316) at 1", "Insert SimpleName: ninfo(2311) into MethodInvocation(2316) at 2", "Insert SimpleName: src(2312) into MethodInvocation(2316) at 3", "Insert SimpleName: scope(2313) into MethodInvocation(2316) at 4", "Insert SimpleName: registers(2314) into MethodInvocation(2316) at 5", "Insert SimpleName: expression(2315) into MethodInvocation(2316) at 6", "Insert SimpleName: parsing(2288) into MethodInvocation(2291) at 0", "Insert SimpleName: set(2289) into MethodInvocation(2291) at 1", "Insert BooleanLiteral: false(2290) into MethodInvocation(2291) at 2", "Insert SimpleName: Parser(2299) into SimpleType: Parser(2300) at 0", "Insert SimpleType: StringReader(2302) into ClassInstanceCreation(2304) at 0", "Insert StringLiteral: \";\"(2303) into ClassInstanceCreation(2304) at 1", "Insert SimpleName: StringReader(2301) into SimpleType: StringReader(2302) at 0", "Delete QualifiedName: java.lang.ref.SoftReference(58)", "Delete ImportDeclaration(59)", "Delete Modifier: private(271)", "Delete Modifier: static(272)", "Delete Modifier: final(273)", "Delete PrimitiveType: float(274)", "Delete SimpleName: LOAD_FACTOR(275)", "Delete NumberLiteral: 0.75f(276)", "Delete VariableDeclarationFragment(277)", "Delete FieldDeclaration(278)", "Delete SimpleName: size(1080)", "Delete MethodInvocation(1081)", "Delete SimpleName: cacheSize(1082)", "Delete InfixExpression: >(1083)", "Delete TextElement: A soft referenced cache.(752)", "Delete TextElement: <p>The actual cache is held through a soft reference, allowing it to be GCed under(753)", "Delete TextElement: memory pressure.</p>(754)", "Delete TagElement(755)", "Delete TextElement: <(756)", "Delete SimpleName: K(757)", "Delete TextElement: >(758)", "Delete TextElement:  the cache key entry type(759)", "Delete TagElement: @param(760)", "Delete TextElement: <(761)", "Delete SimpleName: V(762)", "Delete TextElement: >(763)", "Delete TextElement:  the cache key value type(764)", "Delete TagElement: @param(765)", "Delete Javadoc(766)", "Delete Modifier: protected(767)", "Delete SimpleName: SoftCache(768)", "Delete SimpleName: K(769)", "Delete TypeParameter(770)", "Delete SimpleName: V(771)", "Delete TypeParameter(772)", "Delete TextElement: The cache size.(773)", "Delete TagElement(774)", "Delete Javadoc(775)", "Delete Modifier: private(776)", "Delete PrimitiveType: int(778)", "Delete SimpleName: size(779)", "Delete VariableDeclarationFragment(780)", "Delete FieldDeclaration(781)", "Delete TextElement: The soft reference to the cache map.(782)", "Delete TagElement(783)", "Delete Javadoc(784)", "Delete Modifier: private(785)", "Delete SimpleType: SoftReference(787)", "Delete SimpleName: Map(788)", "Delete SimpleType: Map(789)", "Delete SimpleName: K(790)", "Delete SimpleType: K(791)", "Delete SimpleName: V(792)", "Delete SimpleType: V(793)", "Delete ParameterizedType: Map<K,V>(794)", "Delete ParameterizedType: SoftReference<Map<K,V>>(795)", "Delete SimpleName: ref(796)", "Delete NullLiteral(797)", "Delete VariableDeclarationFragment(798)", "Delete FieldDeclaration(799)", "Delete TextElement: Creates a new instance of a soft cache.(800)", "Delete TagElement(801)", "Delete SimpleName: theSize(802)", "Delete TextElement:  the cache size(803)", "Delete TagElement: @param(804)", "Delete Javadoc(805)", "Delete SimpleName: SoftCache(806)", "Delete PrimitiveType: int(807)", "Delete SimpleName: theSize(808)", "Delete SingleVariableDeclaration(809)", "Delete SimpleName: size(810)", "Delete SimpleName: theSize(811)", "Delete Assignment: =(812)", "Delete ExpressionStatement(813)", "Delete Block(814)", "Delete MethodDeclaration(815)", "Delete TextElement: Returns the cache size.(816)", "Delete TagElement(817)", "Delete TextElement:  the cache size(818)", "Delete TagElement: @return(819)", "Delete Javadoc(820)", "Delete PrimitiveType: int(821)", "Delete SimpleName: size(822)", "Delete SimpleName: size(823)", "Delete ReturnStatement(824)", "Delete Block(825)", "Delete MethodDeclaration(826)", "Delete TextElement: Clears the cache.(827)", "Delete TagElement(828)", "Delete Javadoc(829)", "Delete PrimitiveType: void(830)", "Delete SimpleName: clear(831)", "Delete SimpleName: ref(832)", "Delete NullLiteral(833)", "Delete Assignment: =(834)", "Delete ExpressionStatement(835)", "Delete Block(836)", "Delete MethodDeclaration(837)", "Delete TextElement: Produces the cache entry set.(838)", "Delete TagElement(839)", "Delete TextElement:  the cache entry set(840)", "Delete TagElement: @return(841)", "Delete Javadoc(842)", "Delete SimpleName: Set(843)", "Delete SimpleType: Set(844)", "Delete SimpleName: Entry(845)", "Delete SimpleType: Entry(846)", "Delete SimpleName: K(847)", "Delete SimpleType: K(848)", "Delete SimpleName: V(849)", "Delete SimpleType: V(850)", "Delete ParameterizedType: Entry<K,V>(851)", "Delete ParameterizedType: Set<Entry<K,V>>(852)", "Delete SimpleName: entrySet(853)", "Delete SimpleName: Map(854)", "Delete SimpleType: Map(855)", "Delete SimpleName: K(856)", "Delete SimpleType: K(857)", "Delete SimpleName: V(858)", "Delete SimpleType: V(859)", "Delete ParameterizedType: Map<K,V>(860)", "Delete SimpleName: map(861)", "Delete SimpleName: ref(862)", "Delete NullLiteral(863)", "Delete InfixExpression: !=(864)", "Delete SimpleName: ref(865)", "Delete SimpleName: get(866)", "Delete MethodInvocation(867)", "Delete NullLiteral(868)", "Delete ConditionalExpression(869)", "Delete VariableDeclarationFragment(870)", "Delete VariableDeclarationStatement(871)", "Delete SimpleName: map(872)", "Delete NullLiteral(873)", "Delete InfixExpression: !=(874)", "Delete SimpleName: map(875)", "Delete SimpleName: entrySet(876)", "Delete MethodInvocation(877)", "Delete SimpleName: Collections(878)", "Delete SimpleName: Entry(879)", "Delete SimpleType: Entry(880)", "Delete SimpleName: K(881)", "Delete SimpleType: K(882)", "Delete SimpleName: V(883)", "Delete SimpleType: V(884)", "Delete ParameterizedType: Entry<K,V>(885)", "Delete SimpleName: emptySet(886)", "Delete MethodInvocation(887)", "Delete ConditionalExpression(888)", "Delete ReturnStatement(889)", "Delete Block(890)", "Delete MethodDeclaration(891)", "Delete TextElement: Gets a value from cache.(892)", "Delete TagElement(893)", "Delete SimpleName: key(894)", "Delete TextElement:  the cache entry key(895)", "Delete TagElement: @param(896)", "Delete TextElement:  the cache entry value(897)", "Delete TagElement: @return(898)", "Delete Javadoc(899)", "Delete SimpleName: V(900)", "Delete SimpleType: V(901)", "Delete SimpleName: get(902)", "Delete SimpleName: K(903)", "Delete SimpleType: K(904)", "Delete SimpleName: key(905)", "Delete SingleVariableDeclaration(906)", "Delete Modifier: final(907)", "Delete SimpleName: Map(908)", "Delete SimpleType: Map(909)", "Delete SimpleName: K(910)", "Delete SimpleType: K(911)", "Delete SimpleName: V(912)", "Delete SimpleType: V(913)", "Delete ParameterizedType: Map<K,V>(914)", "Delete SimpleName: map(915)", "Delete SimpleName: ref(916)", "Delete NullLiteral(917)", "Delete InfixExpression: !=(918)", "Delete SimpleName: ref(919)", "Delete SimpleName: get(920)", "Delete MethodInvocation(921)", "Delete NullLiteral(922)", "Delete ConditionalExpression(923)", "Delete VariableDeclarationFragment(924)", "Delete VariableDeclarationStatement(925)", "Delete SimpleName: map(926)", "Delete NullLiteral(927)", "Delete InfixExpression: !=(928)", "Delete SimpleName: map(929)", "Delete SimpleName: get(930)", "Delete SimpleName: key(931)", "Delete MethodInvocation(932)", "Delete NullLiteral(933)", "Delete ConditionalExpression(934)", "Delete ReturnStatement(935)", "Delete Block(936)", "Delete MethodDeclaration(937)", "Delete TextElement: Puts a value in cache.(938)", "Delete TagElement(939)", "Delete SimpleName: key(940)", "Delete TextElement:     the cache entry key(941)", "Delete TagElement: @param(942)", "Delete SimpleName: script(943)", "Delete TextElement:  the cache entry value(944)", "Delete TagElement: @param(945)", "Delete Javadoc(946)", "Delete PrimitiveType: void(947)", "Delete SimpleName: put(948)", "Delete SimpleType: K(950)", "Delete SimpleName: key(951)", "Delete SingleVariableDeclaration(952)", "Delete SimpleName: V(953)", "Delete SimpleType: V(954)", "Delete SimpleName: script(955)", "Delete SingleVariableDeclaration(956)", "Delete SimpleName: Map(957)", "Delete SimpleType: Map(958)", "Delete SimpleName: K(959)", "Delete SimpleType: K(960)", "Delete SimpleName: V(961)", "Delete SimpleType: V(962)", "Delete ParameterizedType: Map<K,V>(963)", "Delete SimpleName: map(964)", "Delete SimpleName: ref(965)", "Delete NullLiteral(966)", "Delete InfixExpression: !=(967)", "Delete SimpleName: ref(968)", "Delete SimpleName: get(969)", "Delete MethodInvocation(970)", "Delete NullLiteral(971)", "Delete ConditionalExpression(972)", "Delete VariableDeclarationFragment(973)", "Delete VariableDeclarationStatement(974)", "Delete SimpleName: map(975)", "Delete NullLiteral(976)", "Delete InfixExpression: ==(977)", "Delete SimpleName: map(978)", "Delete SimpleName: createCache(979)", "Delete SimpleName: size(980)", "Delete MethodInvocation(981)", "Delete Assignment: =(982)", "Delete ExpressionStatement(983)", "Delete SimpleName: ref(984)", "Delete SimpleName: SoftReference(985)", "Delete SimpleType: SoftReference(986)", "Delete SimpleName: Map(987)", "Delete SimpleType: Map(988)", "Delete SimpleName: K(989)", "Delete SimpleType: K(990)", "Delete SimpleName: V(991)", "Delete SimpleType: V(992)", "Delete ParameterizedType: Map<K,V>(993)", "Delete ParameterizedType: SoftReference<Map<K,V>>(994)", "Delete SimpleName: map(995)", "Delete ClassInstanceCreation(996)", "Delete Assignment: =(997)", "Delete ExpressionStatement(998)", "Delete Block(999)", "Delete IfStatement(1000)", "Delete SimpleName: map(1001)", "Delete SimpleName: put(1002)", "Delete SimpleName: key(1003)", "Delete SimpleName: script(1004)", "Delete MethodInvocation(1005)", "Delete ExpressionStatement(1006)", "Delete Block(1007)", "Delete MethodDeclaration(1008)", "Delete TypeDeclaration: class(1009)", "Delete TextElement: Creates a cache.(1010)", "Delete TagElement(1011)", "Delete TextElement: <(1012)", "Delete SimpleName: K(1013)", "Delete TextElement: >(1014)", "Delete TextElement:        the key type(1015)", "Delete TagElement: @param(1016)", "Delete TextElement: <(1017)", "Delete SimpleName: V(1018)", "Delete TextElement: >(1019)", "Delete TextElement:        the value type(1020)", "Delete TagElement: @param(1021)", "Delete SimpleName: cacheSize(1022)", "Delete TextElement:  the cache size, must be &gt; 0(1023)", "Delete TagElement: @param(1024)", "Delete TextElement:  a Map usable as a cache bounded to the given size(1025)", "Delete TagElement: @return(1026)", "Delete Javadoc(1027)", "Delete Modifier: protected(1028)", "Delete SimpleName: K(1029)", "Delete TypeParameter(1030)", "Delete SimpleName: V(1031)", "Delete TypeParameter(1032)", "Delete SimpleName: Map(1033)", "Delete SimpleType: Map(1034)", "Delete SimpleName: K(1035)", "Delete SimpleType: K(1036)", "Delete SimpleName: V(1037)", "Delete SimpleType: V(1038)", "Delete ParameterizedType: Map<K,V>(1039)", "Delete SimpleName: createCache(1040)", "Delete Modifier: final(1041)", "Delete PrimitiveType: int(1042)", "Delete SimpleName: cacheSize(1043)", "Delete SingleVariableDeclaration(1044)", "Delete QualifiedName: java.util.LinkedHashMap(1045)", "Delete SimpleType: java.util.LinkedHashMap(1046)", "Delete SimpleName: K(1047)", "Delete SimpleType: K(1048)", "Delete SimpleName: V(1049)", "Delete SimpleType: V(1050)", "Delete ParameterizedType: java.util.LinkedHashMap<K,V>(1051)", "Delete SimpleName: cacheSize(1052)", "Delete SimpleName: LOAD_FACTOR(1053)", "Delete TextElement: Serial version UID. (1055)", "Delete TagElement(1056)", "Delete Javadoc(1057)", "Delete Modifier: private(1058)", "Delete Modifier: static(1059)", "Delete Modifier: final(1060)", "Delete PrimitiveType: long(1061)", "Delete SimpleName: serialVersionUID(1062)", "Delete NumberLiteral: 1L(1063)", "Delete VariableDeclarationFragment(1064)", "Delete FieldDeclaration(1065)", "Delete SimpleName: Override(1066)", "Delete MarkerAnnotation(1067)", "Delete QualifiedName: Map.Entry(1071)", "Delete SimpleType: Map.Entry(1072)", "Delete SimpleName: K(1073)", "Delete SimpleType: K(1074)", "Delete SimpleName: V(1075)", "Delete SimpleType: V(1076)", "Delete ParameterizedType: Map.Entry<K,V>(1077)", "Delete SimpleName: eldest(1078)", "Delete SingleVariableDeclaration(1079)", "Delete MethodDeclaration(1086)", "Delete AnonymousClassDeclaration(1087)", "Delete ClassInstanceCreation(1088)", "Delete ReturnStatement(1089)", "Delete Block(1090)", "Delete MethodDeclaration(1091)", "Delete SimpleName: parser(1097)", "Delete SynchronizedStatement(1108)", "Delete Block(1109)", "Delete SimpleName: script(2539)", "Delete VariableDeclarationFragment(2540)", "Delete VariableDeclarationStatement(2541)", "Delete SimpleName: parser(2542)", "Delete SynchronizedStatement(2624)", "Delete Block(2627)"]}}, {"InterpreterBase_cluster": {"actions": [{"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: jexl to MethodInvocation at 0", "INS SimpleName: isCancellable to MethodInvocation at 1"]}, {"root": "DEL QualifiedName: jexl.cancellable", "operations": ["DEL QualifiedName: jexl.cancellable"]}]}}, {"InterpreterBase_diff": {"operations": ["Insert MethodInvocation(489) into ReturnStatement(490) at 0", "Insert SimpleName: jexl(487) into MethodInvocation(489) at 0", "Insert SimpleName: isCancellable(488) into MethodInvocation(489) at 1", "Delete QualifiedName: jexl.cancellable(487)"]}}, {"TemplateEngine_cluster": {"actions": [{"root": "UPDATE from Engine.SoftCache<String,TemplateExpression> to SoftCache<String,TemplateExpression>", "operations": ["UPD ParameterizedType: Engine.SoftCache<String,TemplateExpression> from Engine.SoftCache<String,TemplateExpression> to SoftCache<String,TemplateExpression>"]}, {"root": "UPDATE from Engine.SoftCache to SoftCache", "operations": ["UPD SimpleType: Engine.SoftCache from Engine.SoftCache to SoftCache"]}, {"root": "INS SimpleName: SoftCache to SimpleType: Engine.SoftCache at 0", "operations": ["INS SimpleName: SoftCache to SimpleType: Engine.SoftCache at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0", "MOV Block to IfStatement at 1", "MOV Block to TryStatement at 0"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS IfStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "DEL QualifiedName: Engine.SoftCache", "operations": ["DEL QualifiedName: Engine.SoftCache"]}, {"root": "DEL SimpleName: aJexl", "operations": ["DEL SimpleName: aJexl"]}, {"root": "DEL SynchronizedStatement", "operations": ["DEL SynchronizedStatement", "DEL SimpleName: cache"]}, {"root": "DEL Block", "operations": ["DEL IfStatement", "DEL Block"]}]}}, {"TemplateEngine_diff": {"operations": ["Update ParameterizedType: Engine.SoftCache<String,TemplateExpression>(55) to SoftCache<String,TemplateExpression>", "Update SimpleType: Engine.SoftCache(50) to SoftCache", "Insert SimpleName: SoftCache(49) into SimpleType: SoftCache(50) at 0", "Move Block(2114) into TryStatement(2133) at 0", "Insert IfStatement(2111) into Block(2112) at 0", "Move InfixExpression: ==(2075) into IfStatement(2111) at 0", "Move Block(2084) into IfStatement(2111) at 1", "Move Block(2112) into IfStatement(2111) at 2", "Delete QualifiedName: Engine.SoftCache(49)", "Delete SimpleName: aJexl(144)", "Delete SimpleName: cache(2085)", "Delete SynchronizedStatement(2113)", "Delete IfStatement(2115)", "Delete Block(2116)"]}}], "commit_stats": [{"total_files": 4, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}