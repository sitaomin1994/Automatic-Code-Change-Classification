{"application": "apache-commons-net", "csha": "e0aba3e6ccb8166991907ec82e38a58378af9b12", "files": [{"IMAPExportMbox_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 12", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: PATEXISTS to VariableDeclarationFragment at 0", "INS Modifier: static to FieldDeclaration at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS StringLiteral: \"\\\\* (\\\\d+) EXISTS\" to MethodInvocation at 2", "INS SimpleName: compile to MethodInvocation at 1", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: Pattern to FieldDeclaration at 3", "INS SimpleName: Pattern to MethodInvocation at 0", "INS Modifier: final to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 12", "INS SimpleName: Pattern to SimpleType: Pattern at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 13", "operations": ["INS SimpleType: Pattern to FieldDeclaration at 3", "INS SimpleName: compile to MethodInvocation at 1", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: Pattern to SimpleType: Pattern at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: PATTEMPFAIL to VariableDeclarationFragment at 0", "INS StringLiteral: \"[A-Z]{4} NO \\\\[TEMPFAIL\\\\] FETCH .*\" to MethodInvocation at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS FieldDeclaration to TypeDeclaration: class at 13", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: Pattern to MethodInvocation at 0", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS SimpleName: matcher to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: input to MethodInvocation at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: group to MethodInvocation at 1", "INS IfStatement to Block at 1", "INS NullLiteral to ReturnStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: pat to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleType: String to MethodDeclaration at 2", "INS MethodInvocation to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: pat to MethodInvocation at 0", "INS Block to MethodDeclaration at 7", "INS SimpleName: m to MethodInvocation at 0", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: Pattern to SimpleType: Pattern at 0", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: Matcher to SimpleType: Matcher at 0", "INS SimpleType: Matcher to VariableDeclarationStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: m to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: matches to MethodDeclaration at 3", "INS SimpleName: input to SingleVariableDeclaration at 1", "INS SimpleType: Pattern to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 2", "INS SimpleName: m to MethodInvocation at 0", "INS SimpleName: index to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: lookingAt to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: index to SingleVariableDeclaration at 1", "INS Modifier: private to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 6", "operations": ["INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 6", "INS SimpleName: retryWaitSecs to VariableDeclarationFragment at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 23", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleName: maxIndexInFolder to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 23"]}, {"root": "INS IfStatement to Block at 26", "operations": ["INS QualifiedName: System.out to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS StringLiteral: \" messages.\" to InfixExpression: + at 2", "INS InfixExpression: + to MethodInvocation at 2", "INS InfixExpression: != to IfStatement at 0", "INS IfStatement to Block at 26", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: println to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"Folder contained \" to InfixExpression: + at 0", "INS SimpleName: maxIndexInFolder to InfixExpression: != at 0", "INS SimpleName: maxIndexInFolder to InfixExpression: + at 1"]}, {"root": "UPDATE from private to volatile", "operations": ["UPD Modifier: private from private to volatile"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 11"]}, {"root": "INS Block to TryStatement at 0", "operations": ["INS SimpleName: line to SingleVariableDeclaration at 1", "INS SimpleName: maxIndexInFolder to Assignment: = at 0", "INS SimpleName: maxIndexInFolder to InfixExpression: != at 0", "INS Block to IfStatement at 1", "INS NullLiteral to InfixExpression: != at 1", "INS BreakStatement to Block at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS WhileStatement to Block at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS BooleanLiteral: true to WhileStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS EnhancedForStatement to Block at 2", "INS SimpleName: line to MethodInvocation at 1", "INS SimpleName: PATEXISTS to MethodInvocation at 2", "INS Block to TryStatement at 0", "INS SimpleName: ok to VariableDeclarationFragment at 0", "INS Block to WhileStatement at 1", "INS SimpleName: matches to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS IfStatement to Block at 1", "INS NumberLiteral: 1 to MethodInvocation at 3", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: imap to MethodInvocation at 0", "INS SimpleName: getReplyStrings to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS SimpleName: println to MethodInvocation at 1", "INS QualifiedName: System.err to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"\\t-R temporary failure retry wait in seconds (default 0; i.e. disabled)\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 4"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV IfStatement to Block at 1", "MOV IfStatement to Block at 3", "MOV IfStatement to Block at 1"]}, {"root": "INS IfStatement to IfStatement at 2", "operations": ["INS PrefixExpression: ++ to ArrayAccess at 1", "INS SimpleName: argIdx to ArrayAccess at 1", "INS SimpleName: read_timeout to Assignment: = at 0", "INS SimpleName: Integer to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: Integer to MethodInvocation at 0", "INS SimpleName: args to ArrayAccess at 0", "INS SimpleName: args to ArrayAccess at 0", "INS MethodInvocation to Assignment: = at 1", "INS Block to IfStatement at 1", "INS StringLiteral: \"-R\" to MethodInvocation at 2", "INS ArrayAccess to MethodInvocation at 0", "INS StringLiteral: \"-r\" to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS ArrayAccess to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: retryWaitSecs to Assignment: = at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: argIdx to ArrayAccess at 1", "INS SimpleName: argIdx to PrefixExpression: ++ at 0", "INS ArrayAccess to MethodInvocation at 2", "INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: parseInt to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS PrefixExpression: ++ to ArrayAccess at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: parseInt to MethodInvocation at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS IfStatement to IfStatement at 2", "INS IfStatement to IfStatement at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: args to ArrayAccess at 0", "INS SimpleName: args to ArrayAccess at 0", "INS SimpleName: argIdx to PrefixExpression: ++ at 0"]}, {"root": "UPDATE from \"Usage: IMAPExportMbox [-LF|-CRLF] [-c n] [-r n] [-.] [-X] imap[s]://user:password@host[:port]/folder/path [+|-]<mboxfile> [sequence-set] [itemnames]\" to \"Usage: IMAPExportMbox [-LF|-CRLF] [-c n] [-r n] [-R n] [-.] [-X] imap[s]://user:password@host[:port]/folder/path [+|-]<mboxfile> [sequence-set] [itemnames]\"", "operations": ["UPD StringLiteral: \"Usage: IMAPExportMbox [-LF|-CRLF] [-c n] [-r n] [-.] [-X] imap[s]://user:password@host[:port]/folder/path [+|-]<mboxfile> [sequence-set] [itemnames]\" from \"Usage: IMAPExportMbox [-LF|-CRLF] [-c n] [-r n] [-.] [-X] imap[s]://user:password@host[:port]/folder/path [+|-]<mboxfile> [sequence-set] [itemnames]\" to \"Usage: IMAPExportMbox [-LF|-CRLF] [-c n] [-r n] [-R n] [-.] [-X] imap[s]://user:password@host[:port]/folder/path [+|-]<mboxfile> [sequence-set] [itemnames]\""]}, {"root": "MOVE from IfStatement", "operations": ["MOV IfStatement to IfStatement at 2"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS SimpleName: checkSequence to InfixExpression: && at 1", "INS InfixExpression: > to InfixExpression: && at 1", "INS NullLiteral to InfixExpression: != at 1", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS SimpleName: retryWaitSecs to InfixExpression: > at 0", "INS InfixExpression: && to InfixExpression: && at 0", "INS SimpleName: chunkListener to InfixExpression: != at 0", "INS InfixExpression: && to InfixExpression: && at 0", "INS SimpleName: ok to PrefixExpression: ! at 0", "INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: != to InfixExpression: && at 1"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS InfixExpression: * to MethodInvocation at 2", "INS NumberLiteral: 1000 to InfixExpression: * at 1", "INS ExpressionStatement to Block at 1", "INS CatchClause to TryStatement at 1", "INS Block to CatchClause at 1", "INS InfixExpression: + to ParenthesizedExpression at 0", "INS QualifiedName: chunkListener.lastSeq to InfixExpression: + at 0", "INS SimpleName: retryWaitSecs to InfixExpression: * at 0", "INS TryStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS StringLiteral: \"seconds\" to InfixExpression: + at 2", "INS MethodInvocation to IfStatement at 0", "INS QualifiedName: System.err to MethodInvocation at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: PATTEMPFAIL to MethodInvocation at 2", "INS InfixExpression: + to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \":*\" to InfixExpression: + at 1", "INS Block to IfStatement at 1", "INS SimpleName: println to MethodInvocation at 1", "INS StringLiteral: \"Temporary error detected, will retry in \" to InfixExpression: + at 0", "INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 1", "INS SimpleName: String to SimpleType: String at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: replyString to VariableDeclarationFragment at 0", "INS SimpleName: Thread to MethodInvocation at 0", "INS Block to TryStatement at 0", "INS ParenthesizedExpression to InfixExpression: + at 0", "INS SimpleName: InterruptedException to SimpleType: InterruptedException at 0", "INS SimpleName: sleep to MethodInvocation at 1", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS Block to IfStatement at 1", "INS SimpleType: InterruptedException to SingleVariableDeclaration at 0", "INS SimpleName: sequenceSet to Assignment: = at 0", "INS InfixExpression: + to Assignment: = at 1", "INS SimpleName: replyString to MethodInvocation at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: startsWith to MethodInvocation at 0", "INS SimpleName: retryWaitSecs to InfixExpression: + at 1", "INS SimpleType: String to VariableDeclarationStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: e to SingleVariableDeclaration at 1"]}, {"root": "INS Block to IfStatement at 2", "operations": ["INS Block to IfStatement at 2", "INS BreakStatement to Block at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleName: replyString to InfixExpression: + at 5", "operations": ["INS SimpleName: replyString to InfixExpression: + at 5"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: Integer", "DEL MethodInvocation", "DEL SimpleName: connect_timeout", "DEL SimpleName: argIdx", "DEL ArrayAccess", "DEL PrefixExpression: ++", "DEL Block", "DEL SimpleName: parseInt", "DEL SimpleName: argIdx", "DEL SimpleName: args", "DEL SimpleName: equals", "DEL Assignment: =", "DEL ExpressionStatement", "DEL StringLiteral: \"-c\"", "DEL ArrayAccess", "DEL SimpleName: args"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !"]}, {"root": "DEL Block", "operations": ["DEL Block"]}]}}, {"IMAPExportMbox_diff": {"operations": ["Insert FieldDeclaration(170) into TypeDeclaration: class(1763) at 12", "Insert FieldDeclaration(182) into TypeDeclaration: class(1763) at 13", "Insert MethodDeclaration(1167) into TypeDeclaration: class(1763) at 18", "Insert Modifier: private(159) into FieldDeclaration(170) at 0", "Insert Modifier: static(160) into FieldDeclaration(170) at 1", "Insert Modifier: final(161) into FieldDeclaration(170) at 2", "Insert SimpleType: Pattern(163) into FieldDeclaration(170) at 3", "Insert VariableDeclarationFragment(169) into FieldDeclaration(170) at 4", "Insert Modifier: private(171) into FieldDeclaration(182) at 0", "Insert Modifier: static(172) into FieldDeclaration(182) at 1", "Insert Modifier: final(173) into FieldDeclaration(182) at 2", "Insert SimpleType: Pattern(175) into FieldDeclaration(182) at 3", "Insert VariableDeclarationFragment(181) into FieldDeclaration(182) at 4", "Insert Modifier: private(1129) into MethodDeclaration(1167) at 0", "Insert Modifier: static(1130) into MethodDeclaration(1167) at 1", "Insert SimpleType: String(1132) into MethodDeclaration(1167) at 2", "Insert SimpleName: matches(1133) into MethodDeclaration(1167) at 3", "Insert SingleVariableDeclaration(1137) into MethodDeclaration(1167) at 4", "Insert SingleVariableDeclaration(1141) into MethodDeclaration(1167) at 5", "Insert SingleVariableDeclaration(1144) into MethodDeclaration(1167) at 6", "Insert Block(1166) into MethodDeclaration(1167) at 7", "Insert SimpleName: Pattern(162) into SimpleType: Pattern(163) at 0", "Insert SimpleName: PATEXISTS(164) into VariableDeclarationFragment(169) at 0", "Insert MethodInvocation(168) into VariableDeclarationFragment(169) at 1", "Insert SimpleName: Pattern(174) into SimpleType: Pattern(175) at 0", "Insert SimpleName: PATTEMPFAIL(176) into VariableDeclarationFragment(181) at 0", "Insert MethodInvocation(180) into VariableDeclarationFragment(181) at 1", "Insert VariableDeclarationStatement(246) into Block(1100) at 6", "Insert VariableDeclarationStatement(804) into Block(1100) at 23", "Insert IfStatement(1099) into Block(1100) at 26", "Insert SimpleName: String(1131) into SimpleType: String(1132) at 0", "Insert SimpleType: String(1135) into SingleVariableDeclaration(1137) at 0", "Insert SimpleName: input(1136) into SingleVariableDeclaration(1137) at 1", "Insert SimpleType: Pattern(1139) into SingleVariableDeclaration(1141) at 0", "Insert SimpleName: pat(1140) into SingleVariableDeclaration(1141) at 1", "Insert PrimitiveType: int(1142) into SingleVariableDeclaration(1144) at 0", "Insert SimpleName: index(1143) into SingleVariableDeclaration(1144) at 1", "Insert VariableDeclarationStatement(1153) into Block(1166) at 0", "Insert IfStatement(1163) into Block(1166) at 1", "Insert ReturnStatement(1165) into Block(1166) at 2", "Update Modifier: private(1009) to volatile", "Move IfStatement(1292) into Block(1744) at 11", "Insert SimpleName: Pattern(165) into MethodInvocation(168) at 0", "Insert SimpleName: compile(166) into MethodInvocation(168) at 1", "Insert StringLiteral: \"\\\\* (\\\\d+) EXISTS\"(167) into MethodInvocation(168) at 2", "Insert SimpleName: Pattern(177) into MethodInvocation(180) at 0", "Insert SimpleName: compile(178) into MethodInvocation(180) at 1", "Insert StringLiteral: \"[A-Z]{4} NO \\\\[TEMPFAIL\\\\] FETCH .*\"(179) into MethodInvocation(180) at 2", "Insert PrimitiveType: int(242) into VariableDeclarationStatement(246) at 0", "Insert VariableDeclarationFragment(245) into VariableDeclarationStatement(246) at 1", "Insert SimpleType: String(800) into VariableDeclarationStatement(804) at 0", "Insert VariableDeclarationFragment(803) into VariableDeclarationStatement(804) at 1", "Insert Block(946) into TryStatement(1073) at 0", "Insert InfixExpression: !=(1089) into IfStatement(1099) at 0", "Insert Block(1098) into IfStatement(1099) at 1", "Insert SimpleName: String(1134) into SimpleType: String(1135) at 0", "Insert SimpleName: Pattern(1138) into SimpleType: Pattern(1139) at 0", "Insert VariableDeclarationFragment(1152) into VariableDeclarationStatement(1153) at 1", "Insert MethodInvocation(1156) into IfStatement(1163) at 0", "Insert Block(1162) into IfStatement(1163) at 1", "Insert NullLiteral(1164) into ReturnStatement(1165) at 0", "Insert SimpleName: retryWaitSecs(243) into VariableDeclarationFragment(245) at 0", "Insert NumberLiteral: 0(244) into VariableDeclarationFragment(245) at 1", "Move IfStatement(310) into Block(359) at 0", "Insert ExpressionStatement(396) into Block(432) at 4", "Insert SimpleName: String(799) into SimpleType: String(800) at 0", "Insert SimpleName: maxIndexInFolder(801) into VariableDeclarationFragment(803) at 0", "Insert NullLiteral(802) into VariableDeclarationFragment(803) at 1", "Move ExpressionStatement(754) into Block(946) at 0", "Move IfStatement(768) into Block(946) at 1", "Insert EnhancedForStatement(848) into Block(946) at 2", "Move IfStatement(778) into Block(946) at 3", "Insert WhileStatement(945) into Block(946) at 4", "Insert SimpleName: maxIndexInFolder(1087) into InfixExpression: !=(1089) at 0", "Insert NullLiteral(1088) into InfixExpression: !=(1089) at 1", "Insert ExpressionStatement(1097) into Block(1098) at 0", "Insert SimpleName: m(1147) into VariableDeclarationFragment(1152) at 0", "Insert MethodInvocation(1151) into VariableDeclarationFragment(1152) at 1", "Insert SimpleName: m(1154) into MethodInvocation(1156) at 0", "Insert SimpleName: lookingAt(1155) into MethodInvocation(1156) at 1", "Insert ReturnStatement(1161) into Block(1162) at 0", "Insert IfStatement(357) into IfStatement(358) at 2", "Insert MethodInvocation(395) into ExpressionStatement(396) at 0", "Insert SingleVariableDeclaration(829) into EnhancedForStatement(848) at 0", "Insert MethodInvocation(832) into EnhancedForStatement(848) at 1", "Insert Block(847) into EnhancedForStatement(848) at 2", "Insert BooleanLiteral: true(859) into WhileStatement(945) at 0", "Insert Block(944) into WhileStatement(945) at 1", "Insert MethodInvocation(1096) into ExpressionStatement(1097) at 0", "Insert SimpleName: pat(1148) into MethodInvocation(1151) at 0", "Insert SimpleName: matcher(1149) into MethodInvocation(1151) at 1", "Insert SimpleName: input(1150) into MethodInvocation(1151) at 2", "Insert MethodInvocation(1160) into ReturnStatement(1161) at 0", "Insert MethodInvocation(277) into IfStatement(357) at 0", "Insert Block(288) into IfStatement(357) at 1", "Insert IfStatement(356) into IfStatement(357) at 2", "Update StringLiteral: \"Usage: IMAPExportMbox [-LF|-CRLF] [-c n] [-r n] [-.] [-X] imap[s]://user:password@host[:port]/folder/path [+|-]<mboxfile> [sequence-set] [itemnames]\"(327) to \"Usage: IMAPExportMbox [-LF|-CRLF] [-c n] [-r n] [-R n] [-.] [-X] imap[s]://user:password@host[:port]/folder/path [+|-]<mboxfile> [sequence-set] [itemnames]\"", "Insert QualifiedName: System.err(392) into MethodInvocation(395) at 0", "Insert SimpleName: println(393) into MethodInvocation(395) at 1", "Insert StringLiteral: \"\\t-R temporary failure retry wait in seconds (default 0; i.e. disabled)\"(394) into MethodInvocation(395) at 2", "Insert SimpleType: String(827) into SingleVariableDeclaration(829) at 0", "Insert SimpleName: line(828) into SingleVariableDeclaration(829) at 1", "Insert SimpleName: imap(830) into MethodInvocation(832) at 0", "Insert SimpleName: getReplyStrings(831) into MethodInvocation(832) at 1", "Insert ExpressionStatement(840) into Block(847) at 0", "Insert IfStatement(846) into Block(847) at 1", "Insert VariableDeclarationStatement(868) into Block(944) at 0", "Move IfStatement(799) into Block(944) at 1", "Insert QualifiedName: System.out(1090) into MethodInvocation(1096) at 0", "Insert SimpleName: println(1091) into MethodInvocation(1096) at 1", "Insert InfixExpression: +(1095) into MethodInvocation(1096) at 2", "Insert SimpleName: m(1157) into MethodInvocation(1160) at 0", "Insert SimpleName: group(1158) into MethodInvocation(1160) at 1", "Insert SimpleName: index(1159) into MethodInvocation(1160) at 2", "Insert ArrayAccess(274) into MethodInvocation(277) at 0", "Insert SimpleName: equals(275) into MethodInvocation(277) at 1", "Insert StringLiteral: \"-r\"(276) into MethodInvocation(277) at 2", "Insert ExpressionStatement(287) into Block(288) at 0", "Insert MethodInvocation(294) into IfStatement(356) at 0", "Insert Block(305) into IfStatement(356) at 1", "Move IfStatement(309) into IfStatement(356) at 2", "Insert SimpleName: String(826) into SimpleType: String(827) at 0", "Insert Assignment: =(839) into ExpressionStatement(840) at 0", "Insert InfixExpression: !=(843) into IfStatement(846) at 0", "Insert Block(845) into IfStatement(846) at 1", "Insert PrimitiveType: boolean(860) into VariableDeclarationStatement(868) at 0", "Insert VariableDeclarationFragment(867) into VariableDeclarationStatement(868) at 1", "Insert InfixExpression: &&(880) into IfStatement(943) at 0", "Insert Block(940) into IfStatement(943) at 1", "Insert Block(942) into IfStatement(943) at 2", "Insert StringLiteral: \"Folder contained \"(1092) into InfixExpression: +(1095) at 0", "Insert SimpleName: maxIndexInFolder(1093) into InfixExpression: +(1095) at 1", "Insert StringLiteral: \" messages.\"(1094) into InfixExpression: +(1095) at 2", "Insert SimpleName: args(272) into ArrayAccess(274) at 0", "Insert SimpleName: argIdx(273) into ArrayAccess(274) at 1", "Insert Assignment: =(286) into ExpressionStatement(287) at 0", "Insert ArrayAccess(291) into MethodInvocation(294) at 0", "Insert SimpleName: equals(292) into MethodInvocation(294) at 1", "Insert StringLiteral: \"-R\"(293) into MethodInvocation(294) at 2", "Insert ExpressionStatement(304) into Block(305) at 0", "Insert SimpleName: maxIndexInFolder(833) into Assignment: =(839) at 0", "Insert MethodInvocation(838) into Assignment: =(839) at 1", "Insert SimpleName: maxIndexInFolder(841) into InfixExpression: !=(843) at 0", "Insert NullLiteral(842) into InfixExpression: !=(843) at 1", "Insert BreakStatement(844) into Block(845) at 0", "Insert SimpleName: ok(861) into VariableDeclarationFragment(867) at 0", "Move MethodInvocation(783) into VariableDeclarationFragment(867) at 1", "Insert InfixExpression: &&(878) into InfixExpression: &&(880) at 0", "Insert SimpleName: checkSequence(879) into InfixExpression: &&(880) at 1", "Insert VariableDeclarationStatement(889) into Block(940) at 0", "Insert IfStatement(939) into Block(940) at 1", "Insert BreakStatement(941) into Block(942) at 0", "Insert SimpleName: read_timeout(278) into Assignment: =(286) at 0", "Insert MethodInvocation(285) into Assignment: =(286) at 1", "Insert SimpleName: args(289) into ArrayAccess(291) at 0", "Insert SimpleName: argIdx(290) into ArrayAccess(291) at 1", "Insert Assignment: =(303) into ExpressionStatement(304) at 0", "Insert SimpleName: matches(834) into MethodInvocation(838) at 0", "Insert SimpleName: line(835) into MethodInvocation(838) at 1", "Insert SimpleName: PATEXISTS(836) into MethodInvocation(838) at 2", "Insert NumberLiteral: 1(837) into MethodInvocation(838) at 3", "Insert InfixExpression: &&(874) into InfixExpression: &&(878) at 0", "Insert InfixExpression: !=(877) into InfixExpression: &&(878) at 1", "Insert Modifier: final(881) into VariableDeclarationStatement(889) at 0", "Insert SimpleType: String(883) into VariableDeclarationStatement(889) at 1", "Insert VariableDeclarationFragment(888) into VariableDeclarationStatement(889) at 2", "Insert MethodInvocation(893) into IfStatement(939) at 0", "Insert Block(926) into IfStatement(939) at 1", "Move Block(798) into IfStatement(939) at 2", "Insert SimpleName: Integer(279) into MethodInvocation(285) at 0", "Insert SimpleName: parseInt(280) into MethodInvocation(285) at 1", "Insert ArrayAccess(284) into MethodInvocation(285) at 2", "Insert SimpleName: retryWaitSecs(295) into Assignment: =(303) at 0", "Insert MethodInvocation(302) into Assignment: =(303) at 1", "Insert PrefixExpression: !(870) into InfixExpression: &&(874) at 0", "Insert InfixExpression: >(873) into InfixExpression: &&(874) at 1", "Insert SimpleName: chunkListener(875) into InfixExpression: !=(877) at 0", "Insert NullLiteral(876) into InfixExpression: !=(877) at 1", "Insert SimpleName: String(882) into SimpleType: String(883) at 0", "Insert SimpleName: replyString(884) into VariableDeclarationFragment(888) at 0", "Move MethodInvocation(794) into VariableDeclarationFragment(888) at 1", "Insert SimpleName: startsWith(890) into MethodInvocation(893) at 0", "Insert SimpleName: replyString(891) into MethodInvocation(893) at 1", "Insert SimpleName: PATTEMPFAIL(892) into MethodInvocation(893) at 2", "Insert ExpressionStatement(901) into Block(926) at 0", "Insert ExpressionStatement(910) into Block(926) at 1", "Insert TryStatement(925) into Block(926) at 2", "Insert SimpleName: args(281) into ArrayAccess(284) at 0", "Insert PrefixExpression: ++(283) into ArrayAccess(284) at 1", "Insert SimpleName: Integer(296) into MethodInvocation(302) at 0", "Insert SimpleName: parseInt(297) into MethodInvocation(302) at 1", "Insert ArrayAccess(301) into MethodInvocation(302) at 2", "Insert SimpleName: ok(869) into PrefixExpression: !(870) at 0", "Insert SimpleName: retryWaitSecs(871) into InfixExpression: >(873) at 0", "Insert NumberLiteral: 0(872) into InfixExpression: >(873) at 1", "Insert MethodInvocation(900) into ExpressionStatement(901) at 0", "Insert Assignment: =(909) into ExpressionStatement(910) at 0", "Insert Block(918) into TryStatement(925) at 0", "Insert CatchClause(924) into TryStatement(925) at 1", "Insert SimpleName: argIdx(282) into PrefixExpression: ++(283) at 0", "Insert SimpleName: args(298) into ArrayAccess(301) at 0", "Insert PrefixExpression: ++(300) into ArrayAccess(301) at 1", "Insert QualifiedName: System.err(894) into MethodInvocation(900) at 0", "Insert SimpleName: println(895) into MethodInvocation(900) at 1", "Insert InfixExpression: +(899) into MethodInvocation(900) at 2", "Insert SimpleName: sequenceSet(902) into Assignment: =(909) at 0", "Insert InfixExpression: +(908) into Assignment: =(909) at 1", "Insert ExpressionStatement(917) into Block(918) at 0", "Insert SingleVariableDeclaration(922) into CatchClause(924) at 0", "Insert Block(923) into CatchClause(924) at 1", "Insert SimpleName: argIdx(299) into PrefixExpression: ++(300) at 0", "Insert StringLiteral: \"Temporary error detected, will retry in \"(896) into InfixExpression: +(899) at 0", "Insert SimpleName: retryWaitSecs(897) into InfixExpression: +(899) at 1", "Insert StringLiteral: \"seconds\"(898) into InfixExpression: +(899) at 2", "Insert ParenthesizedExpression(906) into InfixExpression: +(908) at 0", "Insert StringLiteral: \":*\"(907) into InfixExpression: +(908) at 1", "Insert MethodInvocation(916) into ExpressionStatement(917) at 0", "Insert SimpleType: InterruptedException(920) into SingleVariableDeclaration(922) at 0", "Insert SimpleName: e(921) into SingleVariableDeclaration(922) at 1", "Insert SimpleName: replyString(934) into InfixExpression: +(935) at 5", "Insert InfixExpression: +(905) into ParenthesizedExpression(906) at 0", "Insert SimpleName: Thread(911) into MethodInvocation(916) at 0", "Insert SimpleName: sleep(912) into MethodInvocation(916) at 1", "Insert InfixExpression: *(915) into MethodInvocation(916) at 2", "Insert SimpleName: InterruptedException(919) into SimpleType: InterruptedException(920) at 0", "Insert QualifiedName: chunkListener.lastSeq(903) into InfixExpression: +(905) at 0", "Insert NumberLiteral: 1(904) into InfixExpression: +(905) at 1", "Insert SimpleName: retryWaitSecs(913) into InfixExpression: *(915) at 0", "Insert NumberLiteral: 1000(914) into InfixExpression: *(915) at 1", "Delete SimpleName: args(226)", "Delete SimpleName: argIdx(227)", "Delete ArrayAccess(228)", "Delete SimpleName: equals(229)", "Delete StringLiteral: \"-c\"(230)", "Delete MethodInvocation(231)", "Delete SimpleName: connect_timeout(232)", "Delete SimpleName: Integer(233)", "Delete SimpleName: parseInt(234)", "Delete SimpleName: args(235)", "Delete SimpleName: argIdx(236)", "Delete PrefixExpression: ++(237)", "Delete ArrayAccess(238)", "Delete MethodInvocation(239)", "Delete Assignment: =(240)", "Delete ExpressionStatement(241)", "Delete Block(242)", "Delete IfStatement(311)", "Delete Modifier: final(405)", "Delete PrefixExpression: !(784)", "Delete Block(800)"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}