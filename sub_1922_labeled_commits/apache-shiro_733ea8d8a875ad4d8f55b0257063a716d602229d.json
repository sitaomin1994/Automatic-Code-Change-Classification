{"application": "apache-shiro", "csha": "733ea8d8a875ad4d8f55b0257063a716d602229d", "files": [{"Quickstart_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"Quickstart_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(0) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(2) to org.slf4j.LoggerFactory", "Update SimpleType: Log(34) to Logger", "Update SimpleName: Log(33) to Logger", "Update SimpleName: LogFactory(36) to LoggerFactory", "Update SimpleName: getLog(37) to getLogger"]}}, {"AbstractAuthenticator_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"AbstractAuthenticator_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(6) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(8) to org.slf4j.LoggerFactory", "Update SimpleType: Log(54) to Logger", "Update SimpleName: Log(53) to Logger", "Update SimpleName: LogFactory(56) to LoggerFactory", "Update SimpleName: getLog(57) to getLogger"]}}, {"IniConfiguration_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"IniConfiguration_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(18) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(20) to org.slf4j.LoggerFactory", "Update SimpleType: Log(57) to Logger", "Update SimpleName: Log(56) to Logger", "Update SimpleName: LogFactory(59) to LoggerFactory", "Update SimpleName: getLog(60) to getLogger"]}}, {"ReflectionBuilder_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"ReflectionBuilder_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(14) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(16) to org.slf4j.LoggerFactory", "Update SimpleType: Log(42) to Logger", "Update SimpleName: Log(41) to Logger", "Update SimpleName: LogFactory(44) to LoggerFactory", "Update SimpleName: getLog(45) to getLogger"]}}, {"TextConfiguration_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"TextConfiguration_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(8) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(10) to org.slf4j.LoggerFactory", "Update SimpleType: Log(38) to Logger", "Update SimpleName: Log(37) to Logger", "Update SimpleName: LogFactory(40) to LoggerFactory", "Update SimpleName: getLog(41) to getLogger"]}}, {"BlowfishCipher_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"BlowfishCipher_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(14) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(16) to org.slf4j.LoggerFactory", "Update SimpleType: Log(126) to Logger", "Update SimpleName: Log(125) to Logger", "Update SimpleName: LogFactory(128) to LoggerFactory", "Update SimpleName: getLog(129) to getLogger"]}}, {"IniResource_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"IniResource_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(14) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(16) to org.slf4j.LoggerFactory", "Update SimpleType: Log(37) to Logger", "Update SimpleName: Log(36) to Logger", "Update SimpleName: LogFactory(39) to LoggerFactory", "Update SimpleName: getLog(40) to getLogger"]}}, {"TextResource_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"TextResource_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(14) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(16) to org.slf4j.LoggerFactory", "Update SimpleType: Log(34) to Logger", "Update SimpleName: Log(33) to Logger", "Update SimpleName: LogFactory(36) to LoggerFactory", "Update SimpleName: getLog(37) to getLogger"]}}, {"JndiLocator_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"JndiLocator_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(6) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(8) to org.slf4j.LoggerFactory", "Update SimpleType: Log(41) to Logger", "Update SimpleName: Log(40) to Logger", "Update SimpleName: LogFactory(43) to LoggerFactory", "Update SimpleName: getLog(44) to getLogger"]}}, {"JndiTemplate_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"JndiTemplate_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(16) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(18) to org.slf4j.LoggerFactory", "Update SimpleType: Log(47) to Logger", "Update SimpleName: Log(46) to Logger", "Update SimpleName: LogFactory(49) to LoggerFactory", "Update SimpleName: getLog(50) to getLogger"]}}, {"AbstractRememberMeManager_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"AbstractRememberMeManager_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(2) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(4) to org.slf4j.LoggerFactory", "Update SimpleType: Log(69) to Logger", "Update SimpleName: Log(68) to Logger", "Update SimpleName: LogFactory(71) to LoggerFactory", "Update SimpleName: getLog(72) to getLogger"]}}, {"DefaultSecurityManager_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 28", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 28", "INS SimpleName: getCurrentSessionId to MethodDeclaration at 2", "INS Modifier: protected to MethodDeclaration at 0", "INS Block to MethodDeclaration at 3", "INS ReturnStatement to Block at 0"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Serializable to MethodDeclaration at 1"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "INS SimpleType: Serializable to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: Serializable to SimpleType: Serializable at 0", "INS SimpleType: Serializable to VariableDeclarationStatement at 0"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getCurrentSessionId to MethodInvocation at 0"]}]}}, {"DefaultSecurityManager_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(8) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(10) to org.slf4j.LoggerFactory", "Insert MethodDeclaration(510) into TypeDeclaration: class(1586) at 28", "Update SimpleType: Log(118) to Logger", "Insert Modifier: protected(501) into MethodDeclaration(510) at 0", "Move SimpleType: Serializable(512) into MethodDeclaration(510) at 1", "Insert SimpleName: getCurrentSessionId(504) into MethodDeclaration(510) at 2", "Insert Block(509) into MethodDeclaration(510) at 3", "Update SimpleName: Log(117) to Logger", "Insert ReturnStatement(508) into Block(509) at 0", "Update SimpleName: LogFactory(120) to LoggerFactory", "Update SimpleName: getLog(121) to getLogger", "Move MethodInvocation(516) into ReturnStatement(508) at 0", "Insert SimpleType: Serializable(522) into VariableDeclarationStatement(527) at 0", "Insert SimpleName: Serializable(521) into SimpleType: Serializable(522) at 0", "Insert MethodInvocation(525) into VariableDeclarationFragment(526) at 1", "Insert SimpleName: getCurrentSessionId(524) into MethodInvocation(525) at 0"]}}, {"SessionsSecurityManager_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 16", "MOV ImportDeclaration to CompilationUnit at 16", "MOV ImportDeclaration to CompilationUnit at 16", "MOV ImportDeclaration to CompilationUnit at 16"]}, {"root": "INS TextElement: <p/> to TagElement at 4", "operations": ["INS TextElement: <p/> to TagElement at 4"]}, {"root": "INS TextElement: <p/> to TagElement at 8", "operations": ["INS TextElement: <p/> to TagElement at 8"]}, {"root": "INS TextElement: <p/> to TagElement at 2", "operations": ["INS TextElement: <p/> to TagElement at 2"]}, {"root": "INS TextElement: <p/> to TagElement at 6", "operations": ["INS TextElement: <p/> to TagElement at 6"]}, {"root": "UPDATE from setAutoCreateAfterInvalidation to setAutoCreateWhenInvalid", "operations": ["UPD SimpleName: setAutoCreateAfterInvalidation from setAutoCreateAfterInvalidation to setAutoCreateWhenInvalid", "UPD SimpleName: setAutoCreateAfterInvalidation from setAutoCreateAfterInvalidation to setAutoCreateWhenInvalid"]}, {"root": "UPDATE from isAutoCreateAfterInvalidation to isAutoCreateWhenInvalid", "operations": ["UPD SimpleName: isAutoCreateAfterInvalidation from isAutoCreateAfterInvalidation to isAutoCreateWhenInvalid", "UPD SimpleName: isAutoCreateAfterInvalidation from isAutoCreateAfterInvalidation to isAutoCreateWhenInvalid"]}]}}, {"SessionsSecurityManager_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(1016) at 16", "Move ImportDeclaration(5) into CompilationUnit(1016) at 16", "Move ImportDeclaration(7) into CompilationUnit(1016) at 16", "Move ImportDeclaration(9) into CompilationUnit(1016) at 16", "Insert TextElement: <p/>(117) into TagElement(124) at 4", "Insert TextElement: <p/>(121) into TagElement(124) at 8", "Insert TextElement: <p/>(253) into TagElement(265) at 2", "Insert TextElement: <p/>(257) into TagElement(265) at 6", "Update SimpleName: setAutoCreateAfterInvalidation(507) to setAutoCreateWhenInvalid", "Update SimpleName: setAutoCreateAfterInvalidation(532) to setAutoCreateWhenInvalid", "Update SimpleName: isAutoCreateAfterInvalidation(572) to isAutoCreateWhenInvalid", "Update SimpleName: isAutoCreateAfterInvalidation(592) to isAutoCreateWhenInvalid"]}}, {"ThreadContextSubjectBinder_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"ThreadContextSubjectBinder_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(2) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(4) to org.slf4j.LoggerFactory", "Update SimpleType: Log(37) to Logger", "Update SimpleName: Log(36) to Logger", "Update SimpleName: LogFactory(39) to LoggerFactory", "Update SimpleName: getLog(40) to getLogger"]}}, {"AuthenticatingRealm_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"AuthenticatingRealm_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(2) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(4) to org.slf4j.LoggerFactory", "Update SimpleType: Log(59) to Logger", "Update SimpleName: Log(58) to Logger", "Update SimpleName: LogFactory(61) to LoggerFactory", "Update SimpleName: getLog(62) to getLogger"]}}, {"AuthorizingRealm_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"AuthorizingRealm_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(14) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(16) to org.slf4j.LoggerFactory", "Update SimpleType: Log(99) to Logger", "Update SimpleName: Log(98) to Logger", "Update SimpleName: LogFactory(101) to LoggerFactory", "Update SimpleName: getLog(102) to getLogger"]}}, {"DelegatingSubject_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"DelegatingSubject_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(12) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(14) to org.slf4j.LoggerFactory", "Update SimpleType: Log(84) to Logger", "Update SimpleName: Log(83) to Logger", "Update SimpleName: LogFactory(86) to LoggerFactory", "Update SimpleName: getLog(87) to getLogger"]}}, {"DefaultWebSecurityManager_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"DefaultWebSecurityManager_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(6) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(8) to org.slf4j.LoggerFactory", "Update SimpleType: Log(44) to Logger", "Update SimpleName: Log(43) to Logger", "Update SimpleName: LogFactory(46) to LoggerFactory", "Update SimpleName: getLog(47) to getLogger"]}}, {"RedirectView_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"RedirectView_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(14) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(16) to org.slf4j.LoggerFactory", "Update SimpleType: Log(86) to Logger", "Update SimpleName: Log(85) to Logger", "Update SimpleName: LogFactory(88) to LoggerFactory", "Update SimpleName: getLog(89) to getLogger"]}}, {"WebRememberMeManager_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"WebRememberMeManager_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(6) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(8) to org.slf4j.LoggerFactory", "Update SimpleType: Log(83) to Logger", "Update SimpleName: Log(82) to Logger", "Update SimpleName: LogFactory(85) to LoggerFactory", "Update SimpleName: getLog(86) to getLogger"]}}, {"WebSubjectFactory_cluster": {"actions": [{"root": "UPDATE from org.apache.ki.mgt.SecurityManager to SecurityManager", "operations": ["UPD SimpleType: org.apache.ki.mgt.SecurityManager from org.apache.ki.mgt.SecurityManager to SecurityManager"]}, {"root": "INS SimpleName: SecurityManager to SimpleType: org.apache.ki.mgt.SecurityManager at 0", "operations": ["INS SimpleName: SecurityManager to SimpleType: org.apache.ki.mgt.SecurityManager at 0"]}, {"root": "DEL QualifiedName: org.apache.ki.mgt.SecurityManager", "operations": ["DEL QualifiedName: org.apache.ki.mgt.SecurityManager"]}]}}, {"WebSubjectFactory_diff": {"operations": ["Update SimpleType: org.apache.ki.mgt.SecurityManager(71) to SecurityManager", "Insert SimpleName: SecurityManager(70) into SimpleType: SecurityManager(71) at 0", "Delete QualifiedName: org.apache.ki.mgt.SecurityManager(70)"]}}, {"SimpleCredentialsMatcher_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"SimpleCredentialsMatcher_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(4) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(6) to org.slf4j.LoggerFactory", "Update SimpleType: Log(45) to Logger", "Update SimpleName: Log(44) to Logger", "Update SimpleName: LogFactory(47) to LoggerFactory", "Update SimpleName: getLog(48) to getLogger"]}}, {"AllSuccessfulStrategy_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"AllSuccessfulStrategy_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(2) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(4) to org.slf4j.LoggerFactory", "Update SimpleType: Log(38) to Logger", "Update SimpleName: Log(37) to Logger", "Update SimpleName: LogFactory(40) to LoggerFactory", "Update SimpleName: getLog(41) to getLogger"]}}, {"ModularRealmAuthenticator_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"ModularRealmAuthenticator_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(8) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(10) to org.slf4j.LoggerFactory", "Update SimpleType: Log(90) to Logger", "Update SimpleName: Log(89) to Logger", "Update SimpleName: LogFactory(92) to LoggerFactory", "Update SimpleName: getLog(93) to getLogger"]}}, {"ActiveDirectoryRealm_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"ActiveDirectoryRealm_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(26) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(28) to org.slf4j.LoggerFactory", "Update SimpleType: Log(78) to Logger", "Update SimpleName: Log(77) to Logger", "Update SimpleName: LogFactory(80) to LoggerFactory", "Update SimpleName: getLog(81) to getLogger"]}}, {"JdbcRealm_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"JdbcRealm_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(18) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(20) to org.slf4j.LoggerFactory", "Update SimpleType: Log(143) to Logger", "Update SimpleName: Log(142) to Logger", "Update SimpleName: LogFactory(145) to LoggerFactory", "Update SimpleName: getLog(146) to getLogger"]}}, {"AbstractLdapRealm_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"AbstractLdapRealm_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(4) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(6) to org.slf4j.LoggerFactory", "Update SimpleType: Log(97) to Logger", "Update SimpleName: Log(96) to Logger", "Update SimpleName: LogFactory(99) to LoggerFactory", "Update SimpleName: getLog(100) to getLogger"]}}, {"DefaultLdapContextFactory_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"DefaultLdapContextFactory_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(14) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(16) to org.slf4j.LoggerFactory", "Update SimpleType: Log(66) to Logger", "Update SimpleName: Log(65) to Logger", "Update SimpleName: LogFactory(68) to LoggerFactory", "Update SimpleName: getLog(69) to getLogger"]}}, {"PropertiesRealm_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"PropertiesRealm_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(20) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(22) to org.slf4j.LoggerFactory", "Update SimpleType: Log(162) to Logger", "Update SimpleName: Log(161) to Logger", "Update SimpleName: LogFactory(164) to LoggerFactory", "Update SimpleName: getLog(165) to getLogger"]}}, {"AbstractSessionManager_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 40", "MOV MethodDeclaration to TypeDeclaration: class at 40"]}, {"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 38", "operations": ["INS SimpleName: session to SingleVariableDeclaration at 1", "INS TextElement:  created to TagElement: @link at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: session to TagElement: @param at 0", "INS MethodDeclaration to TypeDeclaration: class at 38", "INS TextElement: <p/> to TagElement at 1", "INS SimpleName: Session to SimpleType: Session at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS TextElement: Template method that allows subclasses to react to a new session being created. to TagElement at 0", "INS SimpleName: onStart to MethodDeclaration at 3", "INS TextElement: . to TagElement: @param at 3", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Block to MethodDeclaration at 5", "INS TagElement: @link to TagElement: @param at 2", "INS SimpleName: createSession to MemberRef at 0", "INS MemberRef to TagElement: @link at 0", "INS SimpleType: Session to SingleVariableDeclaration at 0", "INS Modifier: protected to MethodDeclaration at 1", "INS TextElement: This method is invoked <em>before</em> any session listeners are notified. to TagElement at 2", "INS TagElement: @param to Javadoc at 1", "INS TagElement to Javadoc at 0", "INS TextElement:  the session that was just  to TagElement: @param at 1"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS Block to TryStatement at 0", "INS CatchClause to TryStatement at 1", "INS Block to CatchClause at 1", "INS SimpleType: InvalidSessionException to SingleVariableDeclaration at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: InvalidSessionException to SimpleType: InvalidSessionException at 0", "INS TryStatement to Block at 0", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS BooleanLiteral: false to ReturnStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: session to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: onStart to MethodInvocation at 0"]}, {"root": "UPDATE from  minutes. to  minutes. ", "operations": ["UPD TextElement:  minutes. from  minutes. to  minutes. "]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}, {"root": "INS TextElement: <p/> to TagElement at 5", "operations": ["INS TextElement: <p/> to TagElement at 5"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0"]}, {"root": "UPDATE from doGetSession to getSession", "operations": ["UPD SimpleName: doGetSession from doGetSession to getSession"]}, {"root": "DEL Block", "operations": ["DEL Block"]}]}}, {"AbstractSessionManager_diff": {"operations": ["Move MethodDeclaration(609) into TypeDeclaration: class(885) at 40", "Move MethodDeclaration(622) into TypeDeclaration: class(885) at 40", "Update QualifiedName: org.apache.commons.logging.Log(12) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(14) to org.slf4j.LoggerFactory", "Insert MethodDeclaration(823) into TypeDeclaration: class(885) at 38", "Update SimpleType: Log(90) to Logger", "Move ExpressionStatement(586) into Block(600) at 4", "Insert Block(800) into MethodDeclaration(801) at 4", "Insert Javadoc(814) into MethodDeclaration(823) at 0", "Insert Modifier: protected(815) into MethodDeclaration(823) at 1", "Insert PrimitiveType: void(816) into MethodDeclaration(823) at 2", "Insert SimpleName: onStart(817) into MethodDeclaration(823) at 3", "Insert SingleVariableDeclaration(821) into MethodDeclaration(823) at 4", "Insert Block(822) into MethodDeclaration(823) at 5", "Update SimpleName: Log(89) to Logger", "Insert ExpressionStatement(292) into Block(301) at 1", "Insert TryStatement(799) into Block(800) at 0", "Insert TagElement(805) into Javadoc(814) at 0", "Insert TagElement: @param(813) into Javadoc(814) at 1", "Insert SimpleType: Session(819) into SingleVariableDeclaration(821) at 0", "Insert SimpleName: session(820) into SingleVariableDeclaration(821) at 1", "Update TextElement:  minutes.(73) to  minutes. ", "Update SimpleName: LogFactory(92) to LoggerFactory", "Update SimpleName: getLog(93) to getLogger", "Insert TextElement: <p/>(172) into TagElement(183) at 5", "Insert MethodInvocation(291) into ExpressionStatement(292) at 0", "Insert Block(790) into TryStatement(799) at 0", "Insert CatchClause(798) into TryStatement(799) at 1", "Insert TextElement: Template method that allows subclasses to react to a new session being created.(802) into TagElement(805) at 0", "Insert TextElement: <p/>(803) into TagElement(805) at 1", "Insert TextElement: This method is invoked <em>before</em> any session listeners are notified.(804) into TagElement(805) at 2", "Insert SimpleName: session(806) into TagElement: @param(813) at 0", "Insert TextElement:  the session that was just (807) into TagElement: @param(813) at 1", "Insert TagElement: @link(811) into TagElement: @param(813) at 2", "Insert TextElement: .(812) into TagElement: @param(813) at 3", "Insert SimpleName: Session(818) into SimpleType: Session(819) at 0", "Insert SimpleName: onStart(289) into MethodInvocation(291) at 0", "Insert SimpleName: session(290) into MethodInvocation(291) at 1", "Move ReturnStatement(810) into Block(790) at 0", "Insert SingleVariableDeclaration(794) into CatchClause(798) at 0", "Insert Block(797) into CatchClause(798) at 1", "Insert MemberRef(809) into TagElement: @link(811) at 0", "Insert TextElement:  created(810) into TagElement: @link(811) at 1", "Insert SimpleType: InvalidSessionException(792) into SingleVariableDeclaration(794) at 0", "Insert SimpleName: e(793) into SingleVariableDeclaration(794) at 1", "Insert ReturnStatement(796) into Block(797) at 0", "Insert SimpleName: createSession(808) into MemberRef(809) at 0", "Insert SimpleName: InvalidSessionException(791) into SimpleType: InvalidSessionException(792) at 0", "Insert BooleanLiteral: false(795) into ReturnStatement(796) at 0", "Update SimpleName: doGetSession(805) to getSession", "Delete Block(811)"]}}, {"AbstractValidatingSessionManager_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS QualifiedName: org.apache.ki.session.ReplacedSessionException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 10"]}, {"root": "INS ImportDeclaration to CompilationUnit at 13", "operations": ["INS ImportDeclaration to CompilationUnit at 13", "INS QualifiedName: org.apache.ki.util.ThreadContext to ImportDeclaration at 0"]}, {"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 27", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: Session to SingleVariableDeclaration at 0", "INS SimpleName: Session to SimpleType: Session at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: validate to MethodDeclaration at 2", "INS SimpleType: InvalidSessionException to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 27", "INS SimpleName: session to SingleVariableDeclaration at 1", "INS SimpleName: InvalidSessionException to SimpleType: InvalidSessionException at 0"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from isAutoCreateAfterInvalidation to isAutoCreateWhenInvalid", "operations": ["UPD SimpleName: isAutoCreateAfterInvalidation from isAutoCreateAfterInvalidation to isAutoCreateWhenInvalid"]}, {"root": "UPDATE from setAutoCreateAfterInvalidation to setAutoCreateWhenInvalid", "operations": ["UPD SimpleName: setAutoCreateAfterInvalidation from setAutoCreateAfterInvalidation to setAutoCreateWhenInvalid", "UPD SimpleName: setAutoCreateAfterInvalidation from setAutoCreateAfterInvalidation to setAutoCreateWhenInvalid"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Session to MethodDeclaration at 2"]}, {"root": "INS Block to MethodDeclaration at 7", "operations": ["INS SimpleName: s to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Block to IfStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: sessionId to ClassInstanceCreation at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ThrowStatement to Block at 0", "INS SimpleName: newId to InfixExpression: + at 5", "INS CatchClause to TryStatement at 1", "INS Block to IfStatement at 2", "INS StringLiteral: \"]\" to InfixExpression: + at 2", "INS SimpleName: ise to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: hostAddress to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 2", "INS SimpleType: Serializable to VariableDeclarationStatement at 0", "INS SimpleName: newId to ClassInstanceCreation at 4", "INS IfStatement to Block at 0", "INS SimpleType: InvalidSessionException to SingleVariableDeclaration at 0", "INS SimpleName: isAutoCreateWhenInvalid to MethodInvocation at 0", "INS SimpleName: s to VariableDeclarationFragment at 0", "INS SimpleName: ise to ThrowStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS TryStatement to Block at 3", "INS StringLiteral: \"new session id [\" to InfixExpression: + at 4", "INS InfixExpression: + to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: hostAddress to Assignment: = at 0", "INS SimpleName: validate to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS SimpleName: ise to ClassInstanceCreation at 2", "INS SimpleName: hostAddress to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: isTraceEnabled to MethodInvocation at 1", "INS SimpleName: sessionId to InfixExpression: + at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: getInetAddress to MethodInvocation at 1", "INS SimpleName: sessionId to InfixExpression: + at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS StringLiteral: \"has been configured to automatically re-create sessions upon invalidation.  Returnining \" to InfixExpression: + at 3", "INS Block to MethodDeclaration at 7", "INS NullLiteral to VariableDeclarationFragment at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ThrowStatement to Block at 3", "INS StringLiteral: \"Session with id [\" to InfixExpression: + at 0", "INS SimpleName: log to MethodInvocation at 0", "INS MethodInvocation to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Serializable to SimpleType: Serializable at 0", "INS SimpleName: msg to ClassInstanceCreation at 1", "INS StringLiteral: \"Attempting to retrieve session with id [\" to InfixExpression: + at 0", "INS SimpleName: InvalidSessionException to SimpleType: InvalidSessionException at 0", "INS SimpleName: log to MethodInvocation at 0", "INS SimpleName: msg to VariableDeclarationFragment at 0", "INS IfStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: ReplacedSessionException to ClassInstanceCreation at 0", "INS StringLiteral: \"] is invalid.  The SessionManager \" to InfixExpression: + at 2", "INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS Block to CatchClause at 1", "INS SimpleName: start to MethodInvocation at 0", "INS SimpleName: ReplacedSessionException to SimpleType: ReplacedSessionException at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: s to MethodInvocation at 1", "INS SimpleName: InetAddress to SimpleType: InetAddress at 0", "INS SimpleName: hostAddress to Assignment: = at 0", "INS InfixExpression: == to IfStatement at 0", "INS StringLiteral: \"] with exception so the caller may react accordingly.\" to InfixExpression: + at 6", "INS Block to IfStatement at 1", "INS IfStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: newId to VariableDeclarationFragment at 0", "INS Block to TryStatement at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: ThreadContext to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: InetAddress to VariableDeclarationStatement at 0", "INS SimpleName: getHostAddress to MethodInvocation at 1", "INS SimpleName: trace to MethodInvocation at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: hostAddress to InfixExpression: == at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS SimpleName: InvalidSessionException to TagElement: @throws at 0", "INS TextElement: Looks up a session from the underlying data store based on the specified  to TagElement at 0", "INS TagElement to Javadoc at 0", "INS TextElement: . to TagElement at 2", "INS TagElement: @throws to Javadoc at 3", "INS TagElement: @code to TagElement at 1", "INS TagElement: @return to Javadoc at 2", "INS TagElement: @param to Javadoc at 1", "INS TextElement:  sessionId to TagElement: @code at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: sessionId to TagElement: @param at 0"]}, {"root": "INS SimpleType: Session to MethodDeclaration at 3", "operations": ["INS SimpleName: Session to SimpleType: Session at 0", "INS SimpleType: Session to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5"]}, {"root": "UPDATE from validate to doValidate", "operations": ["UPD SimpleName: validate from validate to doValidate"]}, {"root": "UPDATE from autoCreateAfterInvalidation to autoCreateWhenInvalid", "operations": ["UPD SimpleName: autoCreateAfterInvalidation from autoCreateAfterInvalidation to autoCreateWhenInvalid", "UPD SimpleName: autoCreateAfterInvalidation from autoCreateAfterInvalidation to autoCreateWhenInvalid", "UPD SimpleName: autoCreateAfterInvalidation from autoCreateAfterInvalidation to autoCreateWhenInvalid", "UPD SimpleName: autoCreateAfterInvalidation from autoCreateAfterInvalidation to autoCreateWhenInvalid", "UPD SimpleName: autoCreateAfterInvalidation from autoCreateAfterInvalidation to autoCreateWhenInvalid", "UPD SimpleName: autoCreateAfterInvalidation from autoCreateAfterInvalidation to autoCreateWhenInvalid"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 3", "MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}, {"root": "UPDATE from Scheduler used to validate sessions on a regular basis. to Scheduler used to validate sessions on a regular basis. ", "operations": ["UPD TextElement: Scheduler used to validate sessions on a regular basis. from Scheduler used to validate sessions on a regular basis. to Scheduler used to validate sessions on a regular basis. "]}, {"root": "UPDATE from Whether or not to automatically create a new session transparently when a referenced session has expired. to Whether or not to automatically create a new session transparently when a referenced session is invalid or", "operations": ["UPD TextElement: Whether or not to automatically create a new session transparently when a referenced session has expired. from Whether or not to automatically create a new session transparently when a referenced session has expired. to Whether or not to automatically create a new session transparently when a referenced session is invalid or"]}, {"root": "INS TextElement: did not exist.   to TagElement at 1", "operations": ["INS TextElement: did not exist.   to TagElement at 1"]}, {"root": "INS TagElement: @code to TagElement at 2", "operations": ["INS TextElement:  true to TagElement: @code at 0", "INS TagElement: @code to TagElement at 2"]}, {"root": "UPDATE from True by default, for developer convenience. to  by default, for developer convenience.", "operations": ["UPD TextElement: True by default, for developer convenience. from True by default, for developer convenience. to  by default, for developer convenience."]}, {"root": "INS TextElement: <p/> to TagElement at 7", "operations": ["INS TextElement: <p/> to TagElement at 7"]}, {"root": "INS TextElement: <p/> to TagElement at 10", "operations": ["INS TextElement: <p/> to TagElement at 10"]}, {"root": "UPDATE from Returns <code>true</code> if this session manager should automatically create a new session when an invalid to Returns <code>true</code> if this session manager should automatically create a new session when an invalid or", "operations": ["UPD TextElement: Returns <code>true</code> if this session manager should automatically create a new session when an invalid from Returns <code>true</code> if this session manager should automatically create a new session when an invalid to Returns <code>true</code> if this session manager should automatically create a new session when an invalid or"]}, {"root": "UPDATE from session is referenced, <code>false</code> otherwise.  Unless overridden by the to nonexistent session is referenced, <code>false</code> otherwise.  Unless overridden by the", "operations": ["UPD TextElement: session is referenced, <code>false</code> otherwise.  Unless overridden by the from session is referenced, <code>false</code> otherwise.  Unless overridden by the to nonexistent session is referenced, <code>false</code> otherwise.  Unless overridden by the"]}, {"root": "INS Block to TryStatement at 0", "operations": ["INS SimpleName: session to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: doValidate to MethodInvocation at 0", "INS Block to TryStatement at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS TextElement: <p/> to TagElement at 3", "operations": ["INS TextElement: <p/> to TagElement at 3"]}, {"root": "INS TextElement:   to TagElement: @see at 1", "operations": ["INS TextElement:   to TagElement: @see at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Session to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleName: s to ReturnStatement at 0", "operations": ["INS SimpleName: s to ReturnStatement at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "DEL Block", "operations": ["DEL Block"]}]}}, {"AbstractValidatingSessionManager_diff": {"operations": ["Insert ImportDeclaration(21) into CompilationUnit(944) at 10", "Insert ImportDeclaration(27) into CompilationUnit(944) at 13", "Update QualifiedName: org.apache.commons.logging.Log(8) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(10) to org.slf4j.LoggerFactory", "Insert QualifiedName: org.apache.ki.session.ReplacedSessionException(20) into ImportDeclaration(21) at 0", "Insert QualifiedName: org.apache.ki.util.ThreadContext(26) into ImportDeclaration(27) at 0", "Insert MethodDeclaration(513) into TypeDeclaration: class(943) at 27", "Update SimpleType: Log(49) to Logger", "Update SimpleName: isAutoCreateAfterInvalidation(262) to isAutoCreateWhenInvalid", "Update SimpleName: setAutoCreateAfterInvalidation(291) to setAutoCreateWhenInvalid", "Move SimpleType: Session(326) into MethodDeclaration(421) at 2", "Insert Block(420) into MethodDeclaration(421) at 6", "Insert Javadoc(432) into MethodDeclaration(444) at 0", "Insert SimpleType: Session(436) into MethodDeclaration(444) at 3", "Insert Modifier: protected(481) into MethodDeclaration(513) at 0", "Insert PrimitiveType: void(482) into MethodDeclaration(513) at 1", "Insert SimpleName: validate(483) into MethodDeclaration(513) at 2", "Insert SingleVariableDeclaration(487) into MethodDeclaration(513) at 3", "Insert SimpleType: InvalidSessionException(489) into MethodDeclaration(513) at 4", "Move Block(410) into MethodDeclaration(513) at 5", "Update SimpleName: validate(373) to doValidate", "Update SimpleName: Log(48) to Logger", "Update SimpleName: autoCreateAfterInvalidation(104) to autoCreateWhenInvalid", "Update SimpleName: autoCreateAfterInvalidation(293) to autoCreateWhenInvalid", "Move ExpressionStatement(316) into Block(420) at 0", "Insert IfStatement(338) into Block(420) at 1", "Insert VariableDeclarationStatement(344) into Block(420) at 2", "Insert TryStatement(419) into Block(420) at 3", "Insert TagElement(426) into Javadoc(432) at 0", "Insert TagElement: @param(428) into Javadoc(432) at 1", "Insert TagElement: @return(429) into Javadoc(432) at 2", "Insert TagElement: @throws(431) into Javadoc(432) at 3", "Insert SimpleName: Session(435) into SimpleType: Session(436) at 0", "Insert SimpleType: Session(485) into SingleVariableDeclaration(487) at 0", "Insert SimpleName: session(486) into SingleVariableDeclaration(487) at 1", "Insert SimpleName: InvalidSessionException(488) into SimpleType: InvalidSessionException(489) at 0", "Update SimpleName: LogFactory(51) to LoggerFactory", "Update SimpleName: getLog(52) to getLogger", "Update TextElement: Scheduler used to validate sessions on a regular basis.(82) to Scheduler used to validate sessions on a regular basis. ", "Update TextElement: Whether or not to automatically create a new session transparently when a referenced session has expired.(98) to Whether or not to automatically create a new session transparently when a referenced session is invalid or", "Insert TextElement: did not exist.  (103) into TagElement(107) at 1", "Insert TagElement: @code(105) into TagElement(107) at 2", "Update TextElement: True by default, for developer convenience.(99) to  by default, for developer convenience.", "Insert TextElement: <p/>(207) into TagElement(216) at 7", "Insert TextElement: <p/>(210) into TagElement(216) at 10", "Update TextElement: Returns <code>true</code> if this session manager should automatically create a new session when an invalid(233) to Returns <code>true</code> if this session manager should automatically create a new session when an invalid or", "Update TextElement: session is referenced, <code>false</code> otherwise.  Unless overridden by the(234) to nonexistent session is referenced, <code>false</code> otherwise.  Unless overridden by the", "Update SimpleName: autoCreateAfterInvalidation(263) to autoCreateWhenInvalid", "Update SimpleName: autoCreateAfterInvalidation(284) to autoCreateWhenInvalid", "Insert MethodInvocation(328) into IfStatement(338) at 0", "Insert Block(337) into IfStatement(338) at 1", "Insert SimpleType: InetAddress(340) into VariableDeclarationStatement(344) at 0", "Insert VariableDeclarationFragment(343) into VariableDeclarationStatement(344) at 1", "Insert Block(365) into TryStatement(419) at 0", "Insert CatchClause(418) into TryStatement(419) at 1", "Insert TextElement: Looks up a session from the underlying data store based on the specified (422) into TagElement(426) at 0", "Insert TagElement: @code(424) into TagElement(426) at 1", "Insert TextElement: .(425) into TagElement(426) at 2", "Insert SimpleName: sessionId(427) into TagElement: @param(428) at 0", "Insert SimpleName: InvalidSessionException(430) into TagElement: @throws(431) at 0", "Insert SimpleName: Session(484) into SimpleType: Session(485) at 0", "Insert Block(494) into TryStatement(511) at 0", "Move Block(392) into IfStatement(567) at 1", "Insert TextElement: <p/>(576) into TagElement(583) at 3", "Insert TextElement:  (788) into TagElement: @see(789) at 1", "Insert TextElement:  true(104) into TagElement: @code(105) at 0", "Update SimpleName: autoCreateAfterInvalidation(298) to autoCreateWhenInvalid", "Insert SimpleName: log(326) into MethodInvocation(328) at 0", "Insert SimpleName: isTraceEnabled(327) into MethodInvocation(328) at 1", "Insert ExpressionStatement(336) into Block(337) at 0", "Insert SimpleName: InetAddress(339) into SimpleType: InetAddress(340) at 0", "Insert SimpleName: hostAddress(341) into VariableDeclarationFragment(343) at 0", "Insert NullLiteral(342) into VariableDeclarationFragment(343) at 1", "Insert VariableDeclarationStatement(352) into Block(365) at 0", "Insert ExpressionStatement(358) into Block(365) at 1", "Insert ExpressionStatement(362) into Block(365) at 2", "Move ReturnStatement(320) into Block(365) at 3", "Insert SingleVariableDeclaration(369) into CatchClause(418) at 0", "Insert Block(417) into CatchClause(418) at 1", "Insert TextElement:  sessionId(423) into TagElement: @code(424) at 0", "Insert ExpressionStatement(493) into Block(494) at 0", "Move ExpressionStatement(400) into Block(509) at 2", "Update SimpleName: setAutoCreateAfterInvalidation(235) to setAutoCreateWhenInvalid", "Update SimpleName: autoCreateAfterInvalidation(296) to autoCreateWhenInvalid", "Insert MethodInvocation(335) into ExpressionStatement(336) at 0", "Move SimpleType: Session(306) into VariableDeclarationStatement(352) at 0", "Insert VariableDeclarationFragment(351) into VariableDeclarationStatement(352) at 1", "Insert Assignment: =(357) into ExpressionStatement(358) at 0", "Insert MethodInvocation(361) into ExpressionStatement(362) at 0", "Insert SimpleName: s(363) into ReturnStatement(364) at 0", "Insert SimpleType: InvalidSessionException(367) into SingleVariableDeclaration(369) at 0", "Insert SimpleName: ise(368) into SingleVariableDeclaration(369) at 1", "Insert IfStatement(416) into Block(417) at 0", "Insert MethodInvocation(492) into ExpressionStatement(493) at 0", "Insert SimpleName: log(329) into MethodInvocation(335) at 0", "Insert SimpleName: trace(330) into MethodInvocation(335) at 1", "Insert InfixExpression: +(334) into MethodInvocation(335) at 2", "Insert SimpleName: s(347) into VariableDeclarationFragment(351) at 0", "Move MethodInvocation(319) into VariableDeclarationFragment(351) at 1", "Insert SimpleName: hostAddress(353) into Assignment: =(357) at 0", "Insert MethodInvocation(356) into Assignment: =(357) at 1", "Insert SimpleName: validate(359) into MethodInvocation(361) at 0", "Insert SimpleName: s(360) into MethodInvocation(361) at 1", "Insert SimpleName: InvalidSessionException(366) into SimpleType: InvalidSessionException(367) at 0", "Insert MethodInvocation(371) into IfStatement(416) at 0", "Insert Block(412) into IfStatement(416) at 1", "Insert Block(415) into IfStatement(416) at 2", "Insert SimpleName: doValidate(490) into MethodInvocation(492) at 0", "Insert SimpleName: session(491) into MethodInvocation(492) at 1", "Insert StringLiteral: \"Attempting to retrieve session with id [\"(331) into InfixExpression: +(334) at 0", "Insert SimpleName: sessionId(332) into InfixExpression: +(334) at 1", "Insert StringLiteral: \"]\"(333) into InfixExpression: +(334) at 2", "Insert SimpleName: s(354) into MethodInvocation(356) at 0", "Insert SimpleName: getHostAddress(355) into MethodInvocation(356) at 1", "Insert SimpleName: isAutoCreateWhenInvalid(370) into MethodInvocation(371) at 0", "Insert IfStatement(382) into Block(412) at 0", "Insert VariableDeclarationStatement(390) into Block(412) at 1", "Insert VariableDeclarationStatement(403) into Block(412) at 2", "Insert ThrowStatement(411) into Block(412) at 3", "Insert ThrowStatement(414) into Block(415) at 0", "Insert InfixExpression: ==(374) into IfStatement(382) at 0", "Insert Block(381) into IfStatement(382) at 1", "Insert SimpleType: Serializable(384) into VariableDeclarationStatement(390) at 0", "Insert VariableDeclarationFragment(389) into VariableDeclarationStatement(390) at 1", "Insert SimpleType: String(392) into VariableDeclarationStatement(403) at 0", "Insert VariableDeclarationFragment(402) into VariableDeclarationStatement(403) at 1", "Insert ClassInstanceCreation(410) into ThrowStatement(411) at 0", "Insert SimpleName: ise(413) into ThrowStatement(414) at 0", "Insert SimpleName: hostAddress(372) into InfixExpression: ==(374) at 0", "Insert NullLiteral(373) into InfixExpression: ==(374) at 1", "Insert ExpressionStatement(380) into Block(381) at 0", "Insert SimpleName: Serializable(383) into SimpleType: Serializable(384) at 0", "Insert SimpleName: newId(385) into VariableDeclarationFragment(389) at 0", "Insert MethodInvocation(388) into VariableDeclarationFragment(389) at 1", "Insert SimpleName: String(391) into SimpleType: String(392) at 0", "Insert SimpleName: msg(393) into VariableDeclarationFragment(402) at 0", "Insert InfixExpression: +(401) into VariableDeclarationFragment(402) at 1", "Insert SimpleType: ReplacedSessionException(405) into ClassInstanceCreation(410) at 0", "Insert SimpleName: msg(406) into ClassInstanceCreation(410) at 1", "Insert SimpleName: ise(407) into ClassInstanceCreation(410) at 2", "Insert SimpleName: sessionId(408) into ClassInstanceCreation(410) at 3", "Insert SimpleName: newId(409) into ClassInstanceCreation(410) at 4", "Insert Assignment: =(379) into ExpressionStatement(380) at 0", "Insert SimpleName: start(386) into MethodInvocation(388) at 0", "Insert SimpleName: hostAddress(387) into MethodInvocation(388) at 1", "Insert StringLiteral: \"Session with id [\"(394) into InfixExpression: +(401) at 0", "Insert SimpleName: sessionId(395) into InfixExpression: +(401) at 1", "Insert StringLiteral: \"] is invalid.  The SessionManager \"(396) into InfixExpression: +(401) at 2", "Insert StringLiteral: \"has been configured to automatically re-create sessions upon invalidation.  Returnining \"(397) into InfixExpression: +(401) at 3", "Insert StringLiteral: \"new session id [\"(398) into InfixExpression: +(401) at 4", "Insert SimpleName: newId(399) into InfixExpression: +(401) at 5", "Insert StringLiteral: \"] with exception so the caller may react accordingly.\"(400) into InfixExpression: +(401) at 6", "Insert SimpleName: ReplacedSessionException(404) into SimpleType: ReplacedSessionException(405) at 0", "Insert SimpleName: hostAddress(375) into Assignment: =(379) at 0", "Insert MethodInvocation(378) into Assignment: =(379) at 1", "Insert SimpleName: ThreadContext(376) into MethodInvocation(378) at 0", "Insert SimpleName: getInetAddress(377) into MethodInvocation(378) at 1", "Delete Block(321)"]}}, {"DefaultSessionManager_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 15", "MOV ImportDeclaration to CompilationUnit at 15", "MOV ImportDeclaration to CompilationUnit at 15", "MOV ImportDeclaration to CompilationUnit at 11", "MOV ImportDeclaration to CompilationUnit at 15", "MOV ImportDeclaration to CompilationUnit at 11"]}, {"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 17", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS Block to MethodDeclaration at 5", "INS ReturnStatement to Block at 1", "INS MethodDeclaration to TypeDeclaration: class at 17"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS SimpleName: sessionId to SingleVariableDeclaration at 1", "INS SimpleName: retrieveSessionFromDataSource to MethodDeclaration at 2", "INS SimpleType: Serializable to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS ReturnStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Modifier: protected to MethodDeclaration at 0", "INS Block to MethodDeclaration at 5"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: InvalidSessionException to MethodDeclaration at 4", "MOV SimpleType: Session to MethodDeclaration at 1", "MOV SimpleName: retrieveSession to MethodDeclaration at 2", "MOV Modifier: protected to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Session to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: InvalidSessionException to MethodDeclaration at 4"]}, {"root": "UPDATE from Default business-tier implementation of the  to Default business-tier implementation of a ", "operations": ["UPD TextElement: Default business-tier implementation of the  from Default business-tier implementation of the  to Default business-tier implementation of a "]}, {"root": "INS TextElement: .  All session CRUD operations are to TagElement at 2", "operations": ["INS TextElement: .  All session CRUD operations are to TagElement at 2"]}, {"root": "UPDATE from  interface. to delegated to an internal ", "operations": ["UPD TextElement:  interface. from  interface. to delegated to an internal "]}, {"root": "INS TagElement: @link to TagElement at 4", "operations": ["INS SimpleName: SessionDAO to TagElement: @link at 0", "INS TagElement: @link to TagElement at 4"]}, {"root": "INS TextElement: . to TagElement at 5", "operations": ["INS TextElement: . to TagElement at 5"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: session to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: onChange to MethodInvocation at 0"]}, {"root": "MOVE from SimpleType: Serializable", "operations": ["MOV SimpleName: Serializable to SimpleType: Serializable at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: SimpleSession to SimpleType: SimpleSession at 0", "INS SimpleType: SimpleSession to VariableDeclarationStatement at 0", "INS SimpleName: ss to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from validate to retrieveSessionFromDataSource", "operations": ["UPD SimpleName: validate from validate to retrieveSessionFromDataSource"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: validate to MethodInvocation at 0", "MOV SimpleName: s to MethodInvocation at 1"]}, {"root": "UPDATE from s to sessionId", "operations": ["UPD SimpleName: s from s to sessionId"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV CastExpression to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleName: ss to MethodInvocation at 0", "operations": ["INS SimpleName: ss to MethodInvocation at 0"]}, {"root": "INS SimpleName: ss to MethodInvocation at 0", "operations": ["INS SimpleName: ss to MethodInvocation at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.ki.session.ReplacedSessionException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.ki.util.ThreadContext"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL ParenthesizedExpression"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL SimpleName: SimpleSession", "DEL ParenthesizedExpression", "DEL SimpleName: session", "DEL SimpleType: SimpleSession", "DEL CastExpression"]}, {"root": "DEL SuperMethodInvocation", "operations": ["DEL SimpleName: onStop", "DEL SuperMethodInvocation", "DEL SimpleName: session"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL StringLiteral: \"] is invalid.  The SessionManager \"", "DEL VariableDeclarationFragment", "DEL ThrowStatement", "DEL SimpleName: newId", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: ReplacedSessionException", "DEL NullLiteral", "DEL InfixExpression: +", "DEL SimpleName: hostAddress", "DEL SimpleName: hostAddress", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL SimpleName: ise", "DEL VariableDeclarationFragment", "DEL SimpleName: sessionId", "DEL SimpleName: hostAddress", "DEL TryStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: msg", "DEL SimpleType: String", "DEL Assignment: =", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: ise", "DEL Assignment: =", "DEL SimpleName: ThreadContext", "DEL SimpleName: s", "DEL SimpleName: isAutoCreateAfterInvalidation", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: newId", "DEL StringLiteral: \"] with exception so the caller may react accordingly.\"", "DEL SimpleName: getHostAddress", "DEL ThrowStatement", "DEL SimpleType: Serializable", "DEL StringLiteral: \"has been configured to automatically re-create sessions upon invalidation.  Returnining \"", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"new session id [\"", "DEL SimpleName: ise", "DEL SimpleName: s", "DEL SimpleType: InetAddress", "DEL Block", "DEL IfStatement", "DEL StringLiteral: \"Session with id [\"", "DEL Block", "DEL SimpleName: getInetAddress", "DEL SimpleName: newId", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: hostAddress", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleType: ReplacedSessionException", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL CatchClause", "DEL NullLiteral", "DEL SimpleName: msg", "DEL MethodDeclaration", "DEL SimpleName: start", "DEL SimpleName: s", "DEL SimpleName: sessionId", "DEL SimpleName: InetAddress", "DEL ClassInstanceCreation", "DEL Block", "DEL Block", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleName: hostAddress"]}]}}, {"DefaultSessionManager_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(374) at 15", "Move ImportDeclaration(5) into CompilationUnit(374) at 15", "Move ImportDeclaration(7) into CompilationUnit(374) at 15", "Move ImportDeclaration(9) into CompilationUnit(374) at 15", "Move ImportDeclaration(11) into CompilationUnit(374) at 11", "Move ImportDeclaration(13) into CompilationUnit(374) at 11", "Update QualifiedName: org.apache.commons.logging.Log(10) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(12) to org.slf4j.LoggerFactory", "Insert MethodDeclaration(323) into TypeDeclaration: class(373) at 17", "Insert MethodDeclaration(340) into TypeDeclaration: class(373) at 18", "Update SimpleType: Log(52) to Logger", "Move Modifier: protected(294) into MethodDeclaration(323) at 0", "Move SimpleType: Session(296) into MethodDeclaration(323) at 1", "Move SimpleName: retrieveSession(297) into MethodDeclaration(323) at 2", "Move SingleVariableDeclaration(301) into MethodDeclaration(323) at 3", "Move SimpleType: InvalidSessionException(303) into MethodDeclaration(323) at 4", "Insert Block(322) into MethodDeclaration(323) at 5", "Insert Modifier: protected(324) into MethodDeclaration(340) at 0", "Move SimpleType: Session(324) into MethodDeclaration(340) at 1", "Insert SimpleName: retrieveSessionFromDataSource(327) into MethodDeclaration(340) at 2", "Insert SingleVariableDeclaration(331) into MethodDeclaration(340) at 3", "Move SimpleType: InvalidSessionException(346) into MethodDeclaration(340) at 4", "Insert Block(339) into MethodDeclaration(340) at 5", "Update TextElement: Default business-tier implementation of the (32) to Default business-tier implementation of a ", "Insert TextElement: .  All session CRUD operations are(31) into TagElement(36) at 2", "Update TextElement:  interface.(35) to delegated to an internal ", "Insert TagElement: @link(34) into TagElement(36) at 4", "Insert TextElement: .(35) into TagElement(36) at 5", "Update SimpleName: Log(51) to Logger", "Move IfStatement(316) into Block(322) at 0", "Insert ReturnStatement(321) into Block(322) at 1", "Insert SimpleType: Serializable(329) into SingleVariableDeclaration(331) at 0", "Insert SimpleName: sessionId(330) into SingleVariableDeclaration(331) at 1", "Insert ReturnStatement(338) into Block(339) at 0", "Insert SimpleName: SessionDAO(33) into TagElement: @link(34) at 0", "Update SimpleName: LogFactory(54) to LoggerFactory", "Update SimpleName: getLog(55) to getLogger", "Insert MethodInvocation(249) into ExpressionStatement(250) at 0", "Insert MethodInvocation(320) into ReturnStatement(321) at 0", "Move SimpleName: Serializable(362) into SimpleType: Serializable(329) at 0", "Move MethodInvocation(329) into ReturnStatement(338) at 0", "Insert VariableDeclarationStatement(231) into Block(245) at 0", "Insert SimpleName: onChange(247) into MethodInvocation(249) at 0", "Insert SimpleName: session(248) into MethodInvocation(249) at 1", "Update SimpleName: validate(338) to retrieveSessionFromDataSource", "Move SimpleName: validate(338) into MethodInvocation(320) at 0", "Update SimpleName: s(339) to sessionId", "Move SimpleName: s(339) into MethodInvocation(320) at 1", "Insert SimpleType: SimpleSession(224) into VariableDeclarationStatement(231) at 0", "Insert VariableDeclarationFragment(230) into VariableDeclarationStatement(231) at 1", "Insert SimpleName: SimpleSession(223) into SimpleType: SimpleSession(224) at 0", "Insert SimpleName: ss(225) into VariableDeclarationFragment(230) at 0", "Move CastExpression(229) into VariableDeclarationFragment(230) at 1", "Insert SimpleName: ss(240) into MethodInvocation(243) at 0", "Insert SimpleName: ss(235) into MethodInvocation(237) at 0", "Delete QualifiedName: org.apache.ki.session.ReplacedSessionException(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: org.apache.ki.util.ThreadContext(30)", "Delete ImportDeclaration(31)", "Delete ParenthesizedExpression(230)", "Delete SimpleName: SimpleSession(235)", "Delete SimpleType: SimpleSession(236)", "Delete SimpleName: session(237)", "Delete CastExpression(238)", "Delete ParenthesizedExpression(239)", "Delete SimpleName: onStop(246)", "Delete SimpleName: session(247)", "Delete SuperMethodInvocation(248)", "Delete SimpleName: InetAddress(317)", "Delete SimpleType: InetAddress(318)", "Delete SimpleName: hostAddress(319)", "Delete NullLiteral(320)", "Delete VariableDeclarationFragment(321)", "Delete VariableDeclarationStatement(322)", "Delete SimpleName: s(325)", "Delete VariableDeclarationFragment(330)", "Delete VariableDeclarationStatement(331)", "Delete SimpleName: hostAddress(332)", "Delete SimpleName: s(333)", "Delete SimpleName: getHostAddress(334)", "Delete MethodInvocation(335)", "Delete Assignment: =(336)", "Delete ExpressionStatement(337)", "Delete MethodInvocation(340)", "Delete ExpressionStatement(341)", "Delete SimpleName: s(342)", "Delete ReturnStatement(343)", "Delete Block(344)", "Delete SimpleName: ise(347)", "Delete SingleVariableDeclaration(348)", "Delete SimpleName: isAutoCreateAfterInvalidation(349)", "Delete MethodInvocation(350)", "Delete SimpleName: hostAddress(351)", "Delete NullLiteral(352)", "Delete InfixExpression: ==(353)", "Delete SimpleName: hostAddress(354)", "Delete SimpleName: ThreadContext(355)", "Delete SimpleName: getInetAddress(356)", "Delete MethodInvocation(357)", "Delete Assignment: =(358)", "Delete ExpressionStatement(359)", "Delete Block(360)", "Delete IfStatement(361)", "Delete SimpleType: Serializable(363)", "Delete SimpleName: newId(364)", "Delete SimpleName: start(365)", "Delete SimpleName: hostAddress(366)", "Delete MethodInvocation(367)", "Delete VariableDeclarationFragment(368)", "Delete VariableDeclarationStatement(369)", "Delete SimpleName: String(370)", "Delete SimpleType: String(371)", "Delete SimpleName: msg(372)", "Delete StringLiteral: \"Session with id [\"(373)", "Delete SimpleName: sessionId(374)", "Delete StringLiteral: \"] is invalid.  The SessionManager \"(375)", "Delete StringLiteral: \"has been configured to automatically re-create sessions upon invalidation.  Returnining \"(376)", "Delete StringLiteral: \"new session id [\"(377)", "Delete SimpleName: newId(378)", "Delete StringLiteral: \"] with exception so the caller may react accordingly.\"(379)", "Delete InfixExpression: +(380)", "Delete VariableDeclarationFragment(381)", "Delete VariableDeclarationStatement(382)", "Delete SimpleName: ReplacedSessionException(383)", "Delete SimpleType: ReplacedSessionException(384)", "Delete SimpleName: msg(385)", "Delete SimpleName: ise(386)", "Delete SimpleName: sessionId(387)", "Delete SimpleName: newId(388)", "Delete ClassInstanceCreation(389)", "Delete ThrowStatement(390)", "Delete Block(391)", "Delete SimpleName: ise(392)", "Delete ThrowStatement(393)", "Delete Block(394)", "Delete IfStatement(395)", "Delete Block(396)", "Delete CatchClause(397)", "Delete TryStatement(398)", "Delete Block(399)", "Delete MethodDeclaration(400)"]}}, {"ExecutorServiceSessionValidationScheduler_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"ExecutorServiceSessionValidationScheduler_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(8) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(10) to org.slf4j.LoggerFactory", "Update SimpleType: Log(46) to Logger", "Update SimpleName: Log(45) to Logger", "Update SimpleName: LogFactory(48) to LoggerFactory", "Update SimpleName: getLog(49) to getLogger"]}}, {"SimpleSession_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"SimpleSession_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(20) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(22) to org.slf4j.LoggerFactory", "Update SimpleType: Log(79) to Logger", "Update SimpleName: Log(78) to Logger", "Update SimpleName: LogFactory(81) to LoggerFactory", "Update SimpleName: getLog(82) to getLogger"]}}, {"LifecycleBeanPostProcessor_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"LifecycleBeanPostProcessor_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(8) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(10) to org.slf4j.LoggerFactory", "Update SimpleType: Log(46) to Logger", "Update SimpleName: Log(45) to Logger", "Update SimpleName: LogFactory(48) to LoggerFactory", "Update SimpleName: getLog(49) to getLogger"]}}, {"SpringIniWebConfiguration_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"SpringIniWebConfiguration_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(14) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(16) to org.slf4j.LoggerFactory", "Update SimpleType: Log(104) to Logger", "Update SimpleName: Log(103) to Logger", "Update SimpleName: LogFactory(106) to LoggerFactory", "Update SimpleName: getLog(107) to getLogger"]}}, {"AbstractWebAttribute_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"AbstractWebAttribute_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(8) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(10) to org.slf4j.LoggerFactory", "Update SimpleType: Log(82) to Logger", "Update SimpleName: Log(81) to Logger", "Update SimpleName: LogFactory(84) to LoggerFactory", "Update SimpleName: getLog(85) to getLogger"]}}, {"CookieAttribute_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"CookieAttribute_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(14) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(16) to org.slf4j.LoggerFactory", "Update SimpleType: Log(50) to Logger", "Update SimpleName: Log(49) to Logger", "Update SimpleName: LogFactory(52) to LoggerFactory", "Update SimpleName: getLog(53) to getLogger"]}}, {"RequestParamAttribute_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"RequestParamAttribute_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(6) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(8) to org.slf4j.LoggerFactory", "Update SimpleType: Log(28) to Logger", "Update SimpleName: Log(27) to Logger", "Update SimpleName: LogFactory(30) to LoggerFactory", "Update SimpleName: getLog(31) to getLogger"]}}, {"IniWebConfiguration_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"IniWebConfiguration_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(26) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(28) to org.slf4j.LoggerFactory", "Update SimpleType: Log(85) to Logger", "Update SimpleName: Log(84) to Logger", "Update SimpleName: LogFactory(87) to LoggerFactory", "Update SimpleName: getLog(88) to getLogger"]}}, {"PathMatchingFilter_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"PathMatchingFilter_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(12) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(14) to org.slf4j.LoggerFactory", "Update SimpleType: Log(49) to Logger", "Update SimpleName: Log(48) to Logger", "Update SimpleName: LogFactory(51) to LoggerFactory", "Update SimpleName: getLog(52) to getLogger"]}}, {"AdviceFilter_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"AdviceFilter_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(12) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(14) to org.slf4j.LoggerFactory", "Update SimpleType: Log(72) to Logger", "Update SimpleName: Log(71) to Logger", "Update SimpleName: LogFactory(74) to LoggerFactory", "Update SimpleName: getLog(75) to getLogger"]}}, {"KiFilter_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"KiFilter_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(24) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(26) to org.slf4j.LoggerFactory", "Update SimpleType: Log(346) to Logger", "Update SimpleName: Log(345) to Logger", "Update SimpleName: LogFactory(348) to LoggerFactory", "Update SimpleName: getLog(349) to getLogger"]}}, {"OncePerRequestFilter_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"OncePerRequestFilter_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(16) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(18) to org.slf4j.LoggerFactory", "Update SimpleType: Log(61) to Logger", "Update SimpleName: Log(60) to Logger", "Update SimpleName: LogFactory(63) to LoggerFactory", "Update SimpleName: getLog(64) to getLogger"]}}, {"ProxiedFilterChain_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"ProxiedFilterChain_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(16) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(18) to org.slf4j.LoggerFactory", "Update SimpleType: Log(33) to Logger", "Update SimpleName: Log(32) to Logger", "Update SimpleName: LogFactory(35) to LoggerFactory", "Update SimpleName: getLog(36) to getLogger"]}}, {"DefaultWebSessionManager_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 16", "MOV ImportDeclaration to CompilationUnit at 14", "MOV ImportDeclaration to CompilationUnit at 18", "MOV ImportDeclaration to CompilationUnit at 14", "MOV ImportDeclaration to CompilationUnit at 16", "MOV ImportDeclaration to CompilationUnit at 18"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 29"]}, {"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 24", "operations": ["INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: markSessionIdValid to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: Serializable to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 24", "INS SimpleName: sessionId to SingleVariableDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 25", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 25", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: removeSessionIdCookie to MethodDeclaration at 2", "INS Block to MethodDeclaration at 5", "INS Modifier: private to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 27", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS MemberRef to TagElement: @link at 0", "INS SimpleType: Session to SingleVariableDeclaration at 0", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: session to SingleVariableDeclaration at 1", "INS TagElement: @link to TagElement: @param at 2", "INS Javadoc to MethodDeclaration at 0", "INS PrimitiveType: void to MethodDeclaration at 3", "INS TagElement to Javadoc at 0", "INS SimpleName: createSession to MemberRef at 0", "INS TextElement:  the session that was just  to TagElement: @param at 1", "INS TextElement:  created to TagElement: @link at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: onStart to MethodDeclaration at 4", "INS TextElement: . to TagElement: @param at 3", "INS TextElement: Stores the Session's ID, usually as a Cookie, to associate with future requests. to TagElement at 0", "INS MethodDeclaration to TypeDeclaration: class at 27", "INS SimpleName: session to TagElement: @param at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Modifier: protected to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV Modifier: public to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5"]}, {"root": "UPDATE from retrieveSessionId to getReferencedSessionId", "operations": ["UPD SimpleName: retrieveSessionId from retrieveSessionId to getReferencedSessionId", "UPD SimpleName: retrieveSessionId from retrieveSessionId to getReferencedSessionId", "UPD SimpleName: retrieveSessionId from retrieveSessionId to getReferencedSessionId"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 1", "operations": ["INS PrimitiveType: void to MethodDeclaration at 1"]}, {"root": "INS SimpleName: onStart to MethodDeclaration at 2", "operations": ["INS SimpleName: onStart to MethodDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SimpleType: Session to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: session to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from public to protected", "operations": ["UPD Modifier: public from public to protected"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 2", "operations": ["INS PrimitiveType: void to MethodDeclaration at 2"]}, {"root": "UPDATE from getSession to onSessionStart", "operations": ["UPD SimpleName: getSession from getSession to onSessionStart"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Session to MethodDeclaration at 2", "MOV SimpleType: AuthorizationException to MethodDeclaration at 8", "MOV Javadoc to MethodDeclaration at 0", "MOV SimpleType: InvalidSessionException to MethodDeclaration at 7", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "UPDATE from protected to public", "operations": ["UPD Modifier: protected from protected to public"]}, {"root": "UPDATE from doGetSession to getSession", "operations": ["UPD SimpleName: doGetSession from doGetSession to getSession"]}, {"root": "UPDATE from InetAddress to ServletRequest", "operations": ["UPD SimpleName: InetAddress from InetAddress to ServletRequest", "UPD SimpleType: InetAddress from InetAddress to ServletRequest", "UPD SimpleType: InetAddress from InetAddress to ServletRequest", "UPD SimpleName: InetAddress from InetAddress to ServletRequest"]}, {"root": "UPDATE from inetAddress to request", "operations": ["UPD SimpleName: inetAddress from inetAddress to request", "UPD SimpleName: hostAddress from hostAddress to request"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS QualifiedName: KiHttpServletRequest.REFERENCED_SESSION_ID to MethodInvocation at 2", "INS NullLiteral to InfixExpression: != at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: request to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setAttribute to MethodInvocation at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: id to InfixExpression: != at 0", "INS SimpleName: id to MethodInvocation at 3", "INS IfStatement to Block at 3", "INS Block to IfStatement at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2", "INS SimpleName: session to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: onSessionStart to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: request to MethodInvocation at 1", "INS ExpressionStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS SimpleName: retrieveSessionFromDataSource to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: sessionId to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS SimpleName: removeSessionIdCookie to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: request to MethodInvocation at 1", "INS SimpleName: response to MethodInvocation at 2", "INS ExpressionStatement to Block at 3"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}, {"root": "MOVE from SimpleType: Serializable", "operations": ["MOV SimpleName: Serializable to SimpleType: Serializable at 0"]}, {"root": "UPDATE from Serializable to Session", "operations": ["UPD SimpleName: Serializable from Serializable to Session", "UPD SimpleName: IllegalArgumentException from IllegalArgumentException to Session"]}, {"root": "MOVE from SimpleType: Session", "operations": ["MOV SimpleName: IllegalArgumentException to SimpleType: Session at 0"]}, {"root": "MOVE from SimpleType: Session", "operations": ["MOV SimpleName: Serializable to SimpleType: Session at 0"]}, {"root": "UPDATE from != to ==", "operations": ["UPD InfixExpression: != from != to =="]}, {"root": "UPDATE from start to onStart", "operations": ["UPD SimpleName: start from start to onStart"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: start to MethodInvocation at 0", "MOV SimpleName: request to MethodInvocation at 2", "MOV SimpleName: response to MethodInvocation at 3"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: getId to MethodInvocation at 1", "INS SimpleName: session to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV TryStatement to Block at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: request to MethodInvocation at 2", "INS SimpleName: markSessionIdValid to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: sessionId to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: removeSessionIdCookie to MethodInvocation at 0", "INS SimpleName: request to MethodInvocation at 1", "INS SimpleName: response to MethodInvocation at 2", "INS ExpressionStatement to Block at 1"]}, {"root": "INS StringLiteral: \"A valid Ki session id was not associated with the current request.\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"A valid Ki session id was not associated with the current request.\" to MethodInvocation at 2"]}, {"root": "UPDATE from doGetSession to retrieveSessionFromDataSource", "operations": ["UPD SimpleName: doGetSession from doGetSession to retrieveSessionFromDataSource"]}, {"root": "UPDATE from request to sessionId", "operations": ["UPD SimpleName: request from request to sessionId"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: hostAddress"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: Serializable", "DEL SimpleName: start", "DEL SimpleType: HostUnauthorizedException", "DEL SimpleType: IllegalArgumentException", "DEL MethodDeclaration", "DEL SimpleName: HostUnauthorizedException"]}, {"root": "DEL SimpleType: Serializable", "operations": ["DEL SimpleType: Serializable"]}, {"root": "DEL SimpleName: start", "operations": ["DEL SimpleName: start"]}, {"root": "DEL SuperMethodInvocation", "operations": ["DEL SimpleName: inetAddress", "DEL SimpleName: start", "DEL SuperMethodInvocation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: sessionId"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleName: session", "DEL SimpleName: Session", "DEL SimpleType: Session", "DEL VariableDeclarationFragment"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: session"]}, {"root": "DEL Block", "operations": ["DEL ReturnStatement", "DEL SimpleName: retrieveSession", "DEL Block", "DEL SuperMethodInvocation", "DEL SimpleName: sessionId"]}, {"root": "DEL TagElement: @throws", "operations": ["DEL QualifiedName: org.apache.ki.session.InvalidSessionException", "DEL TextElement: if the associated Session has expired prior to invoking this method.", "DEL TagElement: @throws"]}, {"root": "DEL SimpleType: Session", "operations": ["DEL SimpleName: Session", "DEL SimpleType: Session"]}, {"root": "DEL SimpleName: response", "operations": ["DEL SimpleName: response"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL SimpleName: sessionId", "DEL SimpleName: retrieveSession", "DEL ExpressionStatement", "DEL SimpleName: session", "DEL SuperMethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: session", "DEL InfixExpression: !=", "DEL IfStatement", "DEL NullLiteral"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL StringLiteral: \"HttpServletRequest.  A Session will not be returned.\"", "DEL StringLiteral: \"No Ki session id associated with the given \"", "DEL InfixExpression: +"]}]}}, {"DefaultWebSessionManager_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(1017) at 18", "Move ImportDeclaration(5) into CompilationUnit(1017) at 18", "Move ImportDeclaration(7) into CompilationUnit(1017) at 16", "Move ImportDeclaration(9) into CompilationUnit(1017) at 16", "Move ImportDeclaration(11) into CompilationUnit(1017) at 14", "Move ImportDeclaration(13) into CompilationUnit(1017) at 14", "Move MethodDeclaration(735) into TypeDeclaration: class(1016) at 29", "Update QualifiedName: org.apache.commons.logging.Log(10) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(12) to org.slf4j.LoggerFactory", "Insert MethodDeclaration(558) into TypeDeclaration: class(1016) at 24", "Insert MethodDeclaration(578) into TypeDeclaration: class(1016) at 25", "Insert MethodDeclaration(701) into TypeDeclaration: class(1016) at 27", "Move SingleVariableDeclaration(655) into MethodDeclaration(736) at 6", "Update SimpleType: Log(53) to Logger", "Update Modifier: public(608) to private", "Move Modifier: public(608) into MethodDeclaration(558) at 0", "Insert PrimitiveType: void(541) into MethodDeclaration(558) at 1", "Insert SimpleName: markSessionIdValid(542) into MethodDeclaration(558) at 2", "Insert SingleVariableDeclaration(546) into MethodDeclaration(558) at 3", "Move SingleVariableDeclaration(836) into MethodDeclaration(558) at 4", "Move Block(899) into MethodDeclaration(558) at 5", "Insert Modifier: private(559) into MethodDeclaration(578) at 0", "Insert PrimitiveType: void(560) into MethodDeclaration(578) at 1", "Insert SimpleName: removeSessionIdCookie(561) into MethodDeclaration(578) at 2", "Move SingleVariableDeclaration(615) into MethodDeclaration(578) at 3", "Move SingleVariableDeclaration(840) into MethodDeclaration(578) at 4", "Insert Block(577) into MethodDeclaration(578) at 5", "Update SimpleName: retrieveSessionId(543) to getReferencedSessionId", "Insert Javadoc(668) into MethodDeclaration(701) at 0", "Insert MarkerAnnotation(670) into MethodDeclaration(701) at 1", "Insert Modifier: protected(671) into MethodDeclaration(701) at 2", "Insert PrimitiveType: void(672) into MethodDeclaration(701) at 3", "Insert SimpleName: onStart(673) into MethodDeclaration(701) at 4", "Insert SingleVariableDeclaration(677) into MethodDeclaration(701) at 5", "Move Block(642) into MethodDeclaration(701) at 6", "Insert PrimitiveType: void(703) into MethodDeclaration(736) at 1", "Insert SimpleName: onStart(704) into MethodDeclaration(736) at 2", "Insert SingleVariableDeclaration(708) into MethodDeclaration(736) at 3", "Update Modifier: public(754) to protected", "Insert PrimitiveType: void(738) into MethodDeclaration(756) at 1", "Update SimpleName: getSession(758) to onSessionStart", "Move SingleVariableDeclaration(651) into MethodDeclaration(756) at 6", "Move Javadoc(753) into MethodDeclaration(944) at 0", "Update Modifier: protected(829) to public", "Move SimpleType: Session(757) into MethodDeclaration(944) at 2", "Update SimpleName: doGetSession(832) to getSession", "Move SingleVariableDeclaration(762) into MethodDeclaration(944) at 5", "Move SingleVariableDeclaration(766) into MethodDeclaration(944) at 6", "Move SimpleType: InvalidSessionException(768) into MethodDeclaration(944) at 7", "Move SimpleType: AuthorizationException(770) into MethodDeclaration(944) at 8", "Update SimpleName: Log(52) to Logger", "Insert SimpleType: Serializable(544) into SingleVariableDeclaration(546) at 0", "Insert SimpleName: sessionId(545) into SingleVariableDeclaration(546) at 1", "Update SimpleType: InetAddress(613) to ServletRequest", "Update SimpleName: hostAddress(614) to request", "Move ExpressionStatement(813) into Block(577) at 0", "Insert IfStatement(653) into Block(656) at 3", "Insert TagElement(659) into Javadoc(668) at 0", "Insert TagElement: @param(667) into Javadoc(668) at 1", "Insert SimpleName: Override(669) into MarkerAnnotation(670) at 0", "Insert SimpleType: Session(675) into SingleVariableDeclaration(677) at 0", "Insert SimpleName: session(676) into SingleVariableDeclaration(677) at 1", "Insert ExpressionStatement(699) into Block(700) at 2", "Insert SimpleType: Session(706) into SingleVariableDeclaration(708) at 0", "Insert SimpleName: session(707) into SingleVariableDeclaration(708) at 1", "Update SimpleType: InetAddress(657) to ServletRequest", "Update SimpleName: inetAddress(658) to request", "Insert ExpressionStatement(734) into Block(735) at 2", "Move ExpressionStatement(678) into Block(755) at 0", "Move ExpressionStatement(684) into Block(755) at 1", "Insert ReturnStatement(800) into Block(801) at 1", "Insert ExpressionStatement(1006) into Block(1014) at 3", "Update SimpleName: LogFactory(55) to LoggerFactory", "Update SimpleName: getLog(56) to getLogger", "Move SimpleName: Serializable(609) into SimpleType: Serializable(544) at 0", "Update SimpleName: InetAddress(612) to ServletRequest", "Insert InfixExpression: !=(645) into IfStatement(653) at 0", "Insert Block(652) into IfStatement(653) at 1", "Insert TextElement: Stores the Session's ID, usually as a Cookie, to associate with future requests.(658) into TagElement(659) at 0", "Insert SimpleName: session(660) into TagElement: @param(667) at 0", "Insert TextElement:  the session that was just (661) into TagElement: @param(667) at 1", "Insert TagElement: @link(665) into TagElement: @param(667) at 2", "Insert TextElement: .(666) into TagElement: @param(667) at 3", "Update SimpleName: IllegalArgumentException(618) to Session", "Move SimpleName: IllegalArgumentException(618) into SimpleType: Session(675) at 0", "Insert MethodInvocation(698) into ExpressionStatement(699) at 0", "Update SimpleName: Serializable(645) to Session", "Move SimpleName: Serializable(645) into SimpleType: Session(706) at 0", "Update SimpleName: InetAddress(656) to ServletRequest", "Insert MethodInvocation(733) into ExpressionStatement(734) at 0", "Update InfixExpression: !=(705) to ==", "Insert MethodInvocation(799) into ReturnStatement(800) at 0", "Insert MethodInvocation(1005) into ExpressionStatement(1006) at 0", "Insert SimpleName: id(643) into InfixExpression: !=(645) at 0", "Insert NullLiteral(644) into InfixExpression: !=(645) at 1", "Insert ExpressionStatement(651) into Block(652) at 0", "Insert MemberRef(663) into TagElement: @link(665) at 0", "Insert TextElement:  created(664) into TagElement: @link(665) at 1", "Update SimpleName: start(636) to onStart", "Move SimpleName: start(636) into MethodInvocation(698) at 0", "Insert SimpleName: session(695) into MethodInvocation(698) at 1", "Move SimpleName: request(637) into MethodInvocation(698) at 2", "Move SimpleName: response(638) into MethodInvocation(698) at 3", "Insert MethodInvocation(722) into VariableDeclarationFragment(723) at 1", "Insert SimpleName: onSessionStart(731) into MethodInvocation(733) at 0", "Insert SimpleName: request(732) into MethodInvocation(733) at 1", "Insert SimpleName: retrieveSessionFromDataSource(797) into MethodInvocation(799) at 0", "Insert SimpleName: sessionId(798) into MethodInvocation(799) at 1", "Move TryStatement(824) into Block(928) at 1", "Insert SimpleName: removeSessionIdCookie(1002) into MethodInvocation(1005) at 0", "Insert SimpleName: request(1003) into MethodInvocation(1005) at 1", "Insert SimpleName: response(1004) into MethodInvocation(1005) at 2", "Update SimpleName: retrieveSessionId(513) to getReferencedSessionId", "Insert MethodInvocation(650) into ExpressionStatement(651) at 0", "Insert SimpleName: createSession(662) into MemberRef(663) at 0", "Insert SimpleName: session(720) into MethodInvocation(722) at 0", "Insert SimpleName: getId(721) into MethodInvocation(722) at 1", "Update SimpleName: retrieveSessionId(850) to getReferencedSessionId", "Insert SimpleName: request(646) into MethodInvocation(650) at 0", "Insert SimpleName: setAttribute(647) into MethodInvocation(650) at 1", "Insert QualifiedName: KiHttpServletRequest.REFERENCED_SESSION_ID(648) into MethodInvocation(650) at 2", "Insert SimpleName: id(649) into MethodInvocation(650) at 3", "Insert ExpressionStatement(868) into Block(869) at 1", "Insert MethodInvocation(867) into ExpressionStatement(868) at 0", "Insert ExpressionStatement(897) into Block(906) at 1", "Insert SimpleName: markSessionIdValid(864) into MethodInvocation(867) at 0", "Insert SimpleName: sessionId(865) into MethodInvocation(867) at 1", "Insert SimpleName: request(866) into MethodInvocation(867) at 2", "Insert MethodInvocation(896) into ExpressionStatement(897) at 0", "Insert StringLiteral: \"A valid Ki session id was not associated with the current request.\"(934) into MethodInvocation(935) at 2", "Update SimpleName: doGetSession(777) to retrieveSessionFromDataSource", "Update SimpleName: request(778) to sessionId", "Insert SimpleName: removeSessionIdCookie(893) into MethodInvocation(896) at 0", "Insert SimpleName: request(894) into MethodInvocation(896) at 1", "Insert SimpleName: response(895) into MethodInvocation(896) at 2", "Delete SimpleName: hostAddress(639)", "Delete MethodInvocation(640)", "Delete ReturnStatement(641)", "Delete SimpleType: Serializable(610)", "Delete SimpleName: start(611)", "Delete SimpleName: HostUnauthorizedException(616)", "Delete SimpleType: HostUnauthorizedException(617)", "Delete SimpleType: IllegalArgumentException(619)", "Delete MethodDeclaration(643)", "Delete SimpleType: Serializable(646)", "Delete SimpleName: start(647)", "Delete SimpleName: start(663)", "Delete SimpleName: inetAddress(664)", "Delete SuperMethodInvocation(665)", "Delete SimpleName: sessionId(685)", "Delete ReturnStatement(686)", "Delete Modifier: final(755)", "Delete SimpleName: Session(771)", "Delete SimpleType: Session(772)", "Delete SimpleName: session(773)", "Delete VariableDeclarationFragment(774)", "Delete VariableDeclarationStatement(775)", "Delete SimpleName: session(825)", "Delete ReturnStatement(826)", "Delete SimpleName: retrieveSession(706)", "Delete SimpleName: sessionId(707)", "Delete SuperMethodInvocation(708)", "Delete ReturnStatement(709)", "Delete Block(710)", "Delete QualifiedName: org.apache.ki.session.InvalidSessionException(747)", "Delete TextElement: if the associated Session has expired prior to invoking this method.(748)", "Delete TagElement: @throws(749)", "Delete SimpleName: Session(830)", "Delete SimpleType: Session(831)", "Delete SimpleName: response(779)", "Delete SimpleName: session(865)", "Delete SimpleName: retrieveSession(866)", "Delete SimpleName: sessionId(867)", "Delete SuperMethodInvocation(868)", "Delete Assignment: =(869)", "Delete ExpressionStatement(870)", "Delete SimpleName: session(890)", "Delete NullLiteral(891)", "Delete InfixExpression: !=(892)", "Delete IfStatement(900)", "Delete StringLiteral: \"No Ki session id associated with the given \"(907)", "Delete StringLiteral: \"HttpServletRequest.  A Session will not be returned.\"(908)", "Delete InfixExpression: +(909)"]}}, {"AuthenticatedTag_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"AuthenticatedTag_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(6) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(8) to org.slf4j.LoggerFactory", "Update SimpleType: Log(38) to Logger", "Update SimpleName: Log(37) to Logger", "Update SimpleName: LogFactory(40) to LoggerFactory", "Update SimpleName: getLog(41) to getLogger"]}}, {"GuestTag_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"GuestTag_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(6) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(8) to org.slf4j.LoggerFactory", "Update SimpleType: Log(31) to Logger", "Update SimpleName: Log(30) to Logger", "Update SimpleName: LogFactory(33) to LoggerFactory", "Update SimpleName: getLog(34) to getLogger"]}}, {"NotAuthenticatedTag_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"NotAuthenticatedTag_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(6) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(8) to org.slf4j.LoggerFactory", "Update SimpleType: Log(30) to Logger", "Update SimpleName: Log(29) to Logger", "Update SimpleName: LogFactory(32) to LoggerFactory", "Update SimpleName: getLog(33) to getLogger"]}}, {"PrincipalTag_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"PrincipalTag_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(14) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(16) to org.slf4j.LoggerFactory", "Update SimpleType: Log(41) to Logger", "Update SimpleName: Log(40) to Logger", "Update SimpleName: LogFactory(43) to LoggerFactory", "Update SimpleName: getLog(44) to getLogger"]}}, {"SecureTag_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"SecureTag_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(6) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(8) to org.slf4j.LoggerFactory", "Update SimpleType: Log(28) to Logger", "Update SimpleName: Log(27) to Logger", "Update SimpleName: LogFactory(30) to LoggerFactory", "Update SimpleName: getLog(31) to getLogger"]}}, {"UserTag_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"UserTag_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(4) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(6) to org.slf4j.LoggerFactory", "Update SimpleType: Log(33) to Logger", "Update SimpleName: Log(32) to Logger", "Update SimpleName: LogFactory(35) to LoggerFactory", "Update SimpleName: getLog(36) to getLogger"]}}, {"MemorySessionDAO_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"MemorySessionDAO_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(6) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(8) to org.slf4j.LoggerFactory", "Update SimpleType: Log(58) to Logger", "Update SimpleName: Log(57) to Logger", "Update SimpleName: LogFactory(60) to LoggerFactory", "Update SimpleName: getLog(61) to getLogger"]}}, {"BootstrapDataPopulator_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"BootstrapDataPopulator_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(8) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(10) to org.slf4j.LoggerFactory", "Update SimpleType: Log(63) to Logger", "Update SimpleName: Log(62) to Logger", "Update SimpleName: LogFactory(65) to LoggerFactory", "Update SimpleName: getLog(66) to getLogger"]}}, {"DefaultSampleManager_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"DefaultSampleManager_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(2) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(4) to org.slf4j.LoggerFactory", "Update SimpleType: Log(43) to Logger", "Update SimpleName: Log(42) to Logger", "Update SimpleName: LogFactory(45) to LoggerFactory", "Update SimpleName: getLog(46) to getLogger"]}}, {"EhCache_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"EhCache_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(12) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(14) to org.slf4j.LoggerFactory", "Update SimpleType: Log(49) to Logger", "Update SimpleName: Log(48) to Logger", "Update SimpleName: LogFactory(51) to LoggerFactory", "Update SimpleName: getLog(52) to getLogger"]}}, {"EhCacheManager_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"EhCacheManager_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(6) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(8) to org.slf4j.LoggerFactory", "Update SimpleType: Log(109) to Logger", "Update SimpleName: Log(108) to Logger", "Update SimpleName: LogFactory(111) to LoggerFactory", "Update SimpleName: getLog(112) to getLogger"]}}, {"SecureRemoteInvocationExecutor_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"SecureRemoteInvocationExecutor_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(10) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(12) to org.slf4j.LoggerFactory", "Update SimpleType: Log(54) to Logger", "Update SimpleName: Log(53) to Logger", "Update SimpleName: LogFactory(56) to LoggerFactory", "Update SimpleName: getLog(57) to getLogger"]}}, {"SecureRemoteInvocationFactory_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"SecureRemoteInvocationFactory_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(12) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(14) to org.slf4j.LoggerFactory", "Update SimpleType: Log(61) to Logger", "Update SimpleName: Log(60) to Logger", "Update SimpleName: LogFactory(63) to LoggerFactory", "Update SimpleName: getLog(64) to getLogger"]}}, {"BasicHttpAuthenticationFilter_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"BasicHttpAuthenticationFilter_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(10) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(12) to org.slf4j.LoggerFactory", "Update SimpleType: Log(84) to Logger", "Update SimpleName: Log(83) to Logger", "Update SimpleName: LogFactory(86) to LoggerFactory", "Update SimpleName: getLog(87) to getLogger"]}}, {"FormAuthenticationFilter_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"FormAuthenticationFilter_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(8) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(10) to org.slf4j.LoggerFactory", "Update SimpleType: Log(166) to Logger", "Update SimpleName: Log(165) to Logger", "Update SimpleName: LogFactory(168) to LoggerFactory", "Update SimpleName: getLog(169) to getLogger"]}}, {"QuartzSessionValidationJob_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"QuartzSessionValidationJob_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(10) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(12) to org.slf4j.LoggerFactory", "Update SimpleType: Log(48) to Logger", "Update SimpleName: Log(47) to Logger", "Update SimpleName: LogFactory(50) to LoggerFactory", "Update SimpleName: getLog(51) to getLogger"]}}, {"QuartzSessionValidationScheduler_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"QuartzSessionValidationScheduler_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(12) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(14) to org.slf4j.LoggerFactory", "Update SimpleType: Log(79) to Logger", "Update SimpleName: Log(78) to Logger", "Update SimpleName: LogFactory(81) to LoggerFactory", "Update SimpleName: getLog(82) to getLogger"]}}, {"AuthorizationAttributeSourceAdvisor_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.slf4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.slf4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.slf4j.LoggerFactory"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LoggerFactory", "operations": ["UPD SimpleName: LogFactory from LogFactory to LoggerFactory"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"AuthorizationAttributeSourceAdvisor_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(8) to org.slf4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(10) to org.slf4j.LoggerFactory", "Update SimpleType: Log(41) to Logger", "Update SimpleName: Log(40) to Logger", "Update SimpleName: LogFactory(43) to LoggerFactory", "Update SimpleName: getLog(44) to getLogger"]}}], "commit_stats": [{"total_files": 83, "deleted_files": 0, "testing": "False", "maintenance": "True", "build": "True"}]}