{"application": "google-closure-compiler", "csha": "d376ccf8c91902757cff97cacf71b476968ea675", "files": [{"ClosureRewriteModule_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 68", "MOV MethodDeclaration to TypeDeclaration: class at 68"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 67", "operations": ["INS Modifier: private to MethodDeclaration at 0", "INS Block to IfStatement at 2", "INS SimpleName: rhs to VariableDeclarationFragment at 0", "INS SimpleName: t to MethodInvocation at 2", "INS Block to MethodDeclaration at 5", "INS SimpleName: inlinableExports to VariableDeclarationFragment at 0", "INS IfStatement to Block at 4", "INS MethodDeclaration to TypeDeclaration: class at 67", "INS IfStatement to Block at 3", "INS Block to IfStatement at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: ExportDefinition to MethodInvocation at 0", "INS SimpleName: key to MethodInvocation at 0", "INS ParameterizedType: List<ExportDefinition> to VariableDeclarationStatement at 0", "INS Block to IfStatement at 1", "INS SimpleType: ExportDefinition to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS ForStatement to Block at 2", "INS Block to ForStatement at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: areAllExportsInlinable to IfStatement at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleType: List to ParameterizedType: List<ExportDefinition> at 0", "INS SimpleName: maybeRecordExportDeclaration to MethodDeclaration at 2", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: newNamedExport to MethodInvocation at 1", "INS IfStatement to Block at 3", "INS ReturnStatement to Block at 8", "INS SimpleName: namedExport to VariableDeclarationFragment at 0", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS MethodInvocation to ConditionalExpression at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: key to ConditionalExpression at 2", "INS SimpleName: getFirstChild to MethodInvocation at 1", "INS SimpleType: ExportDefinition to ParameterizedType: List<ExportDefinition> at 1", "INS VariableDeclarationStatement to Block at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 6", "MOV IfStatement to Block at 7", "MOV ReturnStatement to Block at 4", "MOV ExpressionStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 2", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 5"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV IfStatement to SwitchStatement at 19", "MOV SwitchCase to SwitchStatement at 18", "MOV IfStatement to Block at 0"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV BreakStatement to SwitchStatement at 18", "MOV BreakStatement to SwitchStatement at 21"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "INS BreakStatement to SwitchStatement at 26", "operations": ["INS BreakStatement to SwitchStatement at 26"]}, {"root": "INS QualifiedName: currentScript.isModule to IfStatement at 0", "operations": ["INS QualifiedName: currentScript.isModule to IfStatement at 0"]}, {"root": "MOVE from ForStatement", "operations": ["MOV InfixExpression: != to ForStatement at 1", "MOV Assignment: = to ForStatement at 2", "MOV VariableDeclarationExpression to ForStatement at 0"]}, {"root": "UPDATE from inModule to areAllExportsInlinable", "operations": ["UPD SimpleName: inModule from inModule to areAllExportsInlinable"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: inModule to VariableDeclarationFragment at 0", "MOV BooleanLiteral: false to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from false to true", "operations": ["UPD BooleanLiteral: false from false to true"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3"]}, {"root": "INS EnhancedForStatement to Block at 0", "operations": ["INS EnhancedForStatement to Block at 0", "INS SimpleName: export to SingleVariableDeclaration at 1", "INS SimpleName: inlinableExports to EnhancedForStatement at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS Block to EnhancedForStatement at 2", "INS ExpressionStatement to Block at 0", "INS SimpleType: ExportDefinition to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS SimpleName: NodeUtil to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from NodeTraversal to List", "operations": ["UPD SimpleName: NodeTraversal from NodeTraversal to List"]}, {"root": "MOVE from SimpleType: List", "operations": ["MOV SimpleName: NodeTraversal to SimpleType: List at 0"]}, {"root": "UPDATE from Node to ExportDefinition", "operations": ["UPD SimpleName: Node from Node to ExportDefinition", "UPD SimpleName: Node from Node to ExportDefinition", "UPD SimpleName: NodeTraversal from NodeTraversal to ExportDefinition"]}, {"root": "MOVE from SimpleType: ExportDefinition", "operations": ["MOV SimpleName: Node to SimpleType: ExportDefinition at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Node to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: || to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS QualifiedName: currentScript.willCreateExportsObject to Assignment: = at 0", "INS BooleanLiteral: true to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from SimpleType: ExportDefinition", "operations": ["MOV SimpleName: NodeTraversal to SimpleType: ExportDefinition at 0"]}, {"root": "INS QualifiedName: currentScript.namedExports to MethodInvocation at 0", "operations": ["INS QualifiedName: currentScript.namedExports to MethodInvocation at 0"]}, {"root": "UPDATE from checkState to add", "operations": ["UPD SimpleName: checkState from checkState to add", "UPD SimpleName: preprocessExportDeclaration from preprocessExportDeclaration to add"]}, {"root": "UPDATE from n to exportName", "operations": ["UPD SimpleName: n from n to exportName", "UPD SimpleName: n from n to exportName"]}, {"root": "INS QualifiedName: currentScript.declareLegacyNamespace to InfixExpression: || at 0", "operations": ["INS QualifiedName: currentScript.declareLegacyNamespace to InfixExpression: || at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS BooleanLiteral: false to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: areAllExportsInlinable to Assignment: = at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from rhs to removeChild", "operations": ["UPD SimpleName: rhs from rhs to removeChild"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: rhs to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "UPDATE from NodeTraversal to ArrayList", "operations": ["UPD SimpleName: NodeTraversal from NodeTraversal to ArrayList"]}, {"root": "MOVE from SimpleType: ArrayList", "operations": ["MOV SimpleName: NodeTraversal to SimpleType: ArrayList at 0"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getToken to MethodInvocation at 4", "MOV SimpleName: n to MethodInvocation at 3"]}, {"root": "UPDATE from getToken to rhs", "operations": ["UPD SimpleName: getToken from getToken to rhs"]}, {"root": "MOVE from SimpleType: ExportDefinition", "operations": ["MOV SimpleName: Node to SimpleType: ExportDefinition at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0", "MOV SimpleName: insertionPoint to MethodInvocation at 1"]}, {"root": "UPDATE from getGrandparent to getParent", "operations": ["UPD SimpleName: getGrandparent from getGrandparent to getParent", "UPD SimpleName: insertionPoint from insertionPoint to getParent"]}, {"root": "UPDATE from n to namedExport", "operations": ["UPD SimpleName: n from n to namedExport"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getGrandparent to MethodInvocation at 1", "MOV SimpleName: n to MethodInvocation at 0"]}, {"root": "UPDATE from getGrandparent to hasInlinableName", "operations": ["UPD SimpleName: getGrandparent from getGrandparent to hasInlinableName"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS QualifiedName: currentScript.exportsToInline to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from Preconditions to inlinableExports", "operations": ["UPD SimpleName: Preconditions from Preconditions to inlinableExports"]}, {"root": "INS SimpleName: namedExport to MethodInvocation at 2", "operations": ["INS SimpleName: namedExport to MethodInvocation at 2"]}, {"root": "UPDATE from name to recordExportToInline", "operations": ["UPD SimpleName: name from name to recordExportToInline"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: name to MethodInvocation at 0"]}, {"root": "UPDATE from exportName to export", "operations": ["UPD SimpleName: exportName from exportName to export"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: exportName to MethodInvocation at 1"]}, {"root": "UPDATE from insertionPoint to n", "operations": ["UPD SimpleName: insertionPoint from insertionPoint to n"]}, {"root": "UPDATE from isExprResult to keySet", "operations": ["UPD SimpleName: isExprResult from isExprResult to keySet"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: isExprResult to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.javascript.jscomp.NodeTraversal.AbstractModuleCallback", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SingleVariableDeclaration", "DEL IfStatement", "DEL Block", "DEL SwitchStatement", "DEL SimpleName: Node", "DEL SingleVariableDeclaration", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: inModule", "DEL SimpleName: parent", "DEL MethodDeclaration", "DEL SimpleName: ScriptPreprocessor", "DEL SimpleName: visit", "DEL SimpleType: NodeTraversal", "DEL SimpleType: NodeTraversal", "DEL SimpleType: Node", "DEL SimpleType: Node", "DEL SimpleName: t", "DEL Modifier: public", "DEL TypeDeclaration: class", "DEL MarkerAnnotation", "DEL Assignment: =", "DEL SimpleName: NAME", "DEL SimpleName: inModule", "DEL MethodDeclaration", "DEL Modifier: public", "DEL BreakStatement", "DEL SimpleName: AbstractModuleCallback", "DEL SingleVariableDeclaration", "DEL MarkerAnnotation", "DEL SwitchCase", "DEL Modifier: private", "DEL FieldDeclaration", "DEL Modifier: public", "DEL SimpleName: Override", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL Block", "DEL SimpleName: Node", "DEL BreakStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: scopeRoot", "DEL SwitchCase", "DEL SimpleName: enterModule", "DEL BooleanLiteral: true", "DEL SimpleName: exitModule", "DEL ExpressionStatement", "DEL Modifier: private", "DEL SimpleName: Node", "DEL PrimitiveType: void", "DEL SwitchCase", "DEL PrimitiveType: boolean", "DEL SimpleName: scopeRoot", "DEL PrimitiveType: void", "DEL BreakStatement", "DEL SimpleType: AbstractModuleCallback", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL BreakStatement", "DEL SingleVariableDeclaration", "DEL BooleanLiteral: false", "DEL SimpleName: t", "DEL SimpleName: Override", "DEL Block", "DEL SimpleName: n", "DEL PrimitiveType: void", "DEL SimpleType: Node", "DEL SingleVariableDeclaration", "DEL SimpleType: Node", "DEL SimpleName: SCRIPT", "DEL ExpressionStatement", "DEL SimpleName: inModule", "DEL SimpleName: Override", "DEL SimpleType: NodeTraversal", "DEL SimpleName: t", "DEL SingleVariableDeclaration"]}, {"root": "DEL SimpleName: inModule", "operations": ["DEL SimpleName: inModule"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: c", "DEL ClassInstanceCreation", "DEL SimpleType: ScriptPreprocessor", "DEL SimpleName: ScriptPreprocessor", "DEL SimpleName: NodeTraversal", "DEL SimpleName: compiler", "DEL SimpleName: traverseEs6", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: NodeTraversal", "DEL SimpleName: compiler", "DEL SimpleType: ScriptPreprocessor", "DEL ClassInstanceCreation", "DEL SimpleName: scriptRoot", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: traverseEs6", "DEL SimpleName: ScriptPreprocessor"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL Modifier: private", "DEL MethodDeclaration", "DEL PrimitiveType: void", "DEL SimpleName: Node", "DEL MethodInvocation", "DEL SimpleName: n", "DEL SimpleName: Node", "DEL VariableDeclarationFragment", "DEL SimpleName: exportRhs", "DEL SimpleName: preprocessExportDeclaration", "DEL IfStatement", "DEL SimpleName: getNext", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleType: Node", "DEL SimpleName: n", "DEL SimpleType: Node"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: This makes it easier for later analyses to rewrite lvalue and rvalue names correctly.", "DEL Javadoc", "DEL TextElement: Rewrites ES6 shorthand property names from {name} to the expanded version {name:name}.", "DEL TagElement"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !", "DEL SimpleName: n", "DEL MethodInvocation", "DEL SimpleName: getString", "DEL StringLiteral: \"exports\"", "DEL MethodInvocation", "DEL SimpleName: equals"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !", "DEL SimpleName: n", "DEL MethodInvocation", "DEL SimpleName: isAssignTarget"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL QualifiedName: currentScript.defaultExportRhs", "DEL NullLiteral", "DEL InfixExpression: =="]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: getGrandparent", "DEL MethodInvocation", "DEL SimpleName: insertionPoint", "DEL SimpleType: Node", "DEL VariableDeclarationFragment", "DEL SimpleName: n", "DEL VariableDeclarationStatement"]}, {"root": "DEL ForStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: key", "DEL Assignment: =", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: key", "DEL MethodInvocation", "DEL SimpleName: insertionPoint", "DEL Block", "DEL SimpleName: lhs", "DEL MethodInvocation", "DEL SimpleName: exportName", "DEL SimpleName: lhs", "DEL SimpleName: removeFirstChild", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: key", "DEL StringLiteral: \"exports\"", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: key", "DEL SimpleName: IR", "DEL SimpleName: string", "DEL MethodInvocation", "DEL SimpleName: assign", "DEL SimpleType: Node", "DEL SimpleName: key", "DEL MethodInvocation", "DEL SimpleName: addChildAfter", "DEL SimpleName: srcrefTree", "DEL SimpleName: newExport", "DEL SimpleName: IR", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL ConditionalExpression", "DEL SimpleName: getprop", "DEL MethodInvocation", "DEL SimpleName: srcref", "DEL SimpleName: IR", "DEL MethodInvocation", "DEL SimpleName: IR", "DEL ExpressionStatement", "DEL SimpleName: IR", "DEL ForStatement", "DEL SimpleType: Node", "DEL SimpleName: name", "DEL VariableDeclarationStatement", "DEL SimpleName: IR", "DEL SimpleName: exprResult", "DEL SimpleName: srcref", "DEL SimpleName: newExport", "DEL MethodInvocation", "DEL SimpleName: srcref", "DEL SimpleName: rhs", "DEL SimpleName: Node", "DEL SimpleName: newExport", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Node"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: detach", "DEL ExpressionStatement"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: exportRhs", "DEL SimpleName: isNamedExportsLiteral", "DEL PrefixExpression: !", "DEL StringLiteral: \"Exports object should have been converted already\"", "DEL SimpleName: checkState", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Preconditions"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL Block", "DEL Modifier: private", "DEL SimpleName: maybeRecordExportDeclaration", "DEL PrimitiveType: void"]}, {"root": "DEL TextElement: TODO(blickly): Remove as much of this functionality as possible, now that these style of", "operations": ["DEL TextElement: TODO(blickly): Remove as much of this functionality as possible, now that these style of"]}, {"root": "DEL TextElement: exports are rewritten in ScriptPreprocess step.", "operations": ["DEL TextElement: exports are rewritten in ScriptPreprocess step."]}]}}, {"ClosureRewriteModule_diff": {"operations": ["Move MethodDeclaration(2416) into TypeDeclaration: class(6140) at 68", "Move MethodDeclaration(2644) into TypeDeclaration: class(6140) at 68", "Insert MethodDeclaration(3203) into TypeDeclaration: class(6140) at 65", "Insert Modifier: private(2983) into MethodDeclaration(3203) at 0", "Insert PrimitiveType: void(2984) into MethodDeclaration(3203) at 1", "Insert SimpleName: maybeRecordExportDeclaration(2985) into MethodDeclaration(3203) at 2", "Move SingleVariableDeclaration(3328) into MethodDeclaration(3203) at 3", "Move SingleVariableDeclaration(3332) into MethodDeclaration(3203) at 4", "Insert Block(3202) into MethodDeclaration(3203) at 5", "Move IfStatement(3349) into Block(3202) at 0", "Move ExpressionStatement(3356) into Block(3202) at 1", "Move VariableDeclarationStatement(3364) into Block(3202) at 2", "Insert IfStatement(3155) into Block(3202) at 3", "Move ExpressionStatement(3377) into Block(3202) at 4", "Move ExpressionStatement(3381) into Block(3202) at 5", "Move VariableDeclarationStatement(3391) into Block(3202) at 6", "Move IfStatement(3418) into Block(3202) at 7", "Insert ReturnStatement(3201) into Block(3202) at 8", "Move IfStatement(1120) into Block(1265) at 0", "Move BreakStatement(1335) into SwitchStatement(1262) at 18", "Move BreakStatement(1348) into SwitchStatement(1262) at 21", "Move MethodInvocation(2462) into IfStatement(3155) at 0", "Insert Block(3154) into IfStatement(3155) at 1", "Move SwitchCase(1123) into SwitchStatement(1262) at 18", "Move IfStatement(1130) into SwitchStatement(1262) at 19", "Insert BreakStatement(1259) into SwitchStatement(1262) at 26", "Insert VariableDeclarationStatement(3033) into Block(3154) at 0", "Insert VariableDeclarationStatement(3045) into Block(3154) at 1", "Insert ForStatement(3121) into Block(3154) at 2", "Insert IfStatement(3152) into Block(3154) at 3", "Move ReturnStatement(3419) into Block(3154) at 4", "Insert QualifiedName: currentScript.isModule(1231) into IfStatement(1237) at 0", "Insert PrimitiveType: boolean(3029) into VariableDeclarationStatement(3033) at 0", "Insert VariableDeclarationFragment(3032) into VariableDeclarationStatement(3033) at 1", "Insert ParameterizedType: List<ExportDefinition>(3038) into VariableDeclarationStatement(3045) at 0", "Insert VariableDeclarationFragment(3044) into VariableDeclarationStatement(3045) at 1", "Move VariableDeclarationExpression(2478) into ForStatement(3121) at 0", "Move InfixExpression: !=(2481) into ForStatement(3121) at 1", "Move Assignment: =(2486) into ForStatement(3121) at 2", "Insert Block(3120) into ForStatement(3121) at 3", "Insert SimpleName: areAllExportsInlinable(3122) into IfStatement(3152) at 0", "Move Block(2572) into IfStatement(3152) at 1", "Insert Block(3151) into IfStatement(3152) at 2", "Update SimpleName: inModule(1032) to areAllExportsInlinable", "Move SimpleName: inModule(1032) into VariableDeclarationFragment(3032) at 0", "Update BooleanLiteral: false(1033) to true", "Move BooleanLiteral: false(1033) into VariableDeclarationFragment(3032) at 1", "Insert SimpleType: List(3035) into ParameterizedType: List<ExportDefinition>(3038) at 0", "Insert SimpleType: ExportDefinition(3037) into ParameterizedType: List<ExportDefinition>(3038) at 1", "Insert SimpleName: inlinableExports(3039) into VariableDeclarationFragment(3044) at 0", "Insert ClassInstanceCreation(3043) into VariableDeclarationFragment(3044) at 1", "Move VariableDeclarationStatement(2494) into Block(3120) at 0", "Insert VariableDeclarationStatement(3082) into Block(3120) at 1", "Insert VariableDeclarationStatement(3093) into Block(3120) at 2", "Move ExpressionStatement(1138) into Block(3120) at 3", "Insert IfStatement(3119) into Block(3120) at 4", "Insert EnhancedForStatement(3133) into Block(3146) at 0", "Insert ExpressionStatement(3145) into Block(3146) at 1", "Move ExpressionStatement(3373) into Block(3151) at 0", "Update SimpleName: NodeTraversal(1041) to List", "Move SimpleName: NodeTraversal(1041) into SimpleType: List(3035) at 0", "Update SimpleName: Node(1045) to ExportDefinition", "Move SimpleName: Node(1045) into SimpleType: ExportDefinition(3037) at 0", "Insert ParameterizedType: ArrayList<>(3042) into ClassInstanceCreation(3043) at 0", "Move SimpleType: Node(2496) into VariableDeclarationStatement(3082) at 0", "Insert VariableDeclarationFragment(3081) into VariableDeclarationStatement(3082) at 1", "Insert SimpleType: ExportDefinition(3084) into VariableDeclarationStatement(3093) at 0", "Insert VariableDeclarationFragment(3092) into VariableDeclarationStatement(3093) at 1", "Move InfixExpression: ||(2441) into IfStatement(3119) at 0", "Move Block(2443) into IfStatement(3119) at 1", "Insert Block(3118) into IfStatement(3119) at 2", "Insert SingleVariableDeclaration(3126) into EnhancedForStatement(3133) at 0", "Insert SimpleName: inlinableExports(3127) into EnhancedForStatement(3133) at 1", "Insert Block(3132) into EnhancedForStatement(3133) at 2", "Insert MethodInvocation(3144) into ExpressionStatement(3145) at 0", "Insert Assignment: =(3149) into ExpressionStatement(3150) at 0", "Insert SimpleType: ArrayList(3041) into ParameterizedType: ArrayList<>(3042) at 0", "Insert SimpleName: rhs(3072) into VariableDeclarationFragment(3081) at 0", "Insert ConditionalExpression(3080) into VariableDeclarationFragment(3081) at 1", "Update SimpleName: NodeTraversal(1079) to ExportDefinition", "Move SimpleName: NodeTraversal(1079) into SimpleType: ExportDefinition(3084) at 0", "Insert SimpleName: namedExport(3085) into VariableDeclarationFragment(3092) at 0", "Insert MethodInvocation(3091) into VariableDeclarationFragment(3092) at 1", "Insert QualifiedName: currentScript.namedExports(3094) into MethodInvocation(3097) at 0", "Update SimpleName: preprocessExportDeclaration(1135) to add", "Update SimpleName: n(1136) to exportName", "Insert QualifiedName: currentScript.declareLegacyNamespace(3099) into InfixExpression: ||(3107) at 0", "Insert ExpressionStatement(3111) into Block(3112) at 0", "Move ExpressionStatement(2451) into Block(3118) at 0", "Insert SimpleType: ExportDefinition(3124) into SingleVariableDeclaration(3126) at 0", "Insert SimpleName: export(3125) into SingleVariableDeclaration(3126) at 1", "Insert ExpressionStatement(3131) into Block(3132) at 0", "Insert SimpleName: NodeUtil(3134) into MethodInvocation(3144) at 0", "Update SimpleName: rhs(2541) to removeChild", "Move SimpleName: rhs(2541) into MethodInvocation(3144) at 1", "Insert MethodInvocation(3140) into MethodInvocation(3144) at 2", "Move MethodInvocation(2568) into MethodInvocation(3144) at 3", "Insert QualifiedName: currentScript.willCreateExportsObject(3147) into Assignment: =(3149) at 0", "Insert BooleanLiteral: true(3148) into Assignment: =(3149) at 1", "Update SimpleName: NodeTraversal(1060) to ArrayList", "Move SimpleName: NodeTraversal(1060) into SimpleType: ArrayList(3041) at 0", "Move MethodInvocation(2500) into ConditionalExpression(3080) at 0", "Insert MethodInvocation(3078) into ConditionalExpression(3080) at 1", "Insert SimpleName: key(3079) into ConditionalExpression(3080) at 2", "Insert SimpleName: ExportDefinition(3086) into MethodInvocation(3091) at 0", "Insert SimpleName: newNamedExport(3087) into MethodInvocation(3091) at 1", "Insert SimpleName: t(3088) into MethodInvocation(3091) at 2", "Update SimpleName: n(1091) to exportName", "Move SimpleName: n(1091) into MethodInvocation(3091) at 3", "Update SimpleName: getToken(1092) to rhs", "Move SimpleName: getToken(1092) into MethodInvocation(3091) at 4", "Insert Assignment: =(3110) into ExpressionStatement(3111) at 0", "Update SimpleName: Node(2463) to ExportDefinition", "Move SimpleName: Node(2463) into SimpleType: ExportDefinition(3124) at 0", "Insert MethodInvocation(3130) into ExpressionStatement(3131) at 0", "Move MethodInvocation(2554) into MethodInvocation(3140) at 0", "Update SimpleName: insertionPoint(2557) to getParent", "Move SimpleName: insertionPoint(2557) into MethodInvocation(3140) at 1", "Update SimpleName: getGrandparent(2567) to getParent", "Insert SimpleName: key(3076) into MethodInvocation(3078) at 0", "Insert SimpleName: getFirstChild(3077) into MethodInvocation(3078) at 1", "Update SimpleName: n(2435) to namedExport", "Move SimpleName: n(2435) into MethodInvocation(3105) at 0", "Update SimpleName: getGrandparent(2436) to hasInlinableName", "Move SimpleName: getGrandparent(2436) into MethodInvocation(3105) at 1", "Insert MethodInvocation(3104) into MethodInvocation(3105) at 2", "Insert SimpleName: areAllExportsInlinable(3108) into Assignment: =(3110) at 0", "Insert BooleanLiteral: false(3109) into Assignment: =(3110) at 1", "Update SimpleName: Preconditions(2445) to inlinableExports", "Update SimpleName: checkState(2446) to add", "Insert SimpleName: namedExport(3115) into MethodInvocation(3116) at 2", "Update SimpleName: name(2520) to recordExportToInline", "Move SimpleName: name(2520) into MethodInvocation(3130) at 0", "Update SimpleName: exportName(2525) to export", "Move SimpleName: exportName(2525) into MethodInvocation(3130) at 1", "Update SimpleName: insertionPoint(2552) to n", "Insert QualifiedName: currentScript.exportsToInline(3102) into MethodInvocation(3104) at 0", "Update SimpleName: isExprResult(2438) to keySet", "Move SimpleName: isExprResult(2438) into MethodInvocation(3104) at 1", "Delete QualifiedName: com.google.javascript.jscomp.NodeTraversal.AbstractModuleCallback(20)", "Delete ImportDeclaration(21)", "Delete Modifier: private(1026)", "Delete SimpleName: ScriptPreprocessor(1027)", "Delete SimpleName: AbstractModuleCallback(1028)", "Delete SimpleType: AbstractModuleCallback(1029)", "Delete Modifier: private(1030)", "Delete PrimitiveType: boolean(1031)", "Delete VariableDeclarationFragment(1034)", "Delete FieldDeclaration(1035)", "Delete SimpleName: Override(1036)", "Delete MarkerAnnotation(1037)", "Delete Modifier: public(1038)", "Delete PrimitiveType: void(1039)", "Delete SimpleName: enterModule(1040)", "Delete SimpleType: NodeTraversal(1042)", "Delete SimpleName: t(1043)", "Delete SingleVariableDeclaration(1044)", "Delete SimpleType: Node(1046)", "Delete SimpleName: scopeRoot(1047)", "Delete SingleVariableDeclaration(1048)", "Delete SimpleName: inModule(1049)", "Delete BooleanLiteral: true(1050)", "Delete Assignment: =(1051)", "Delete ExpressionStatement(1052)", "Delete Block(1053)", "Delete MethodDeclaration(1054)", "Delete SimpleName: Override(1055)", "Delete MarkerAnnotation(1056)", "Delete Modifier: public(1057)", "Delete PrimitiveType: void(1058)", "Delete SimpleName: exitModule(1059)", "Delete SimpleType: NodeTraversal(1061)", "Delete SimpleName: t(1062)", "Delete SingleVariableDeclaration(1063)", "Delete SimpleName: Node(1064)", "Delete SimpleType: Node(1065)", "Delete SimpleName: scopeRoot(1066)", "Delete SingleVariableDeclaration(1067)", "Delete SimpleName: inModule(1068)", "Delete BooleanLiteral: false(1069)", "Delete Assignment: =(1070)", "Delete ExpressionStatement(1071)", "Delete Block(1072)", "Delete MethodDeclaration(1073)", "Delete SimpleName: Override(1074)", "Delete MarkerAnnotation(1075)", "Delete Modifier: public(1076)", "Delete PrimitiveType: void(1077)", "Delete SimpleName: visit(1078)", "Delete SimpleType: NodeTraversal(1080)", "Delete SimpleName: t(1081)", "Delete SingleVariableDeclaration(1082)", "Delete SimpleName: Node(1083)", "Delete SimpleType: Node(1084)", "Delete SimpleName: n(1085)", "Delete SingleVariableDeclaration(1086)", "Delete SimpleName: Node(1087)", "Delete SimpleType: Node(1088)", "Delete SimpleName: parent(1089)", "Delete SingleVariableDeclaration(1090)", "Delete MethodInvocation(1093)", "Delete SimpleName: SCRIPT(1094)", "Delete SwitchCase(1095)", "Delete BreakStatement(1121)", "Delete BreakStatement(1131)", "Delete SimpleName: NAME(1132)", "Delete SwitchCase(1133)", "Delete SimpleName: inModule(1134)", "Delete Block(1139)", "Delete IfStatement(1140)", "Delete BreakStatement(1141)", "Delete SwitchCase(1142)", "Delete BreakStatement(1143)", "Delete SwitchStatement(1144)", "Delete Block(1145)", "Delete MethodDeclaration(1146)", "Delete TypeDeclaration: class(1147)", "Delete SimpleName: inModule(1124)", "Delete SimpleName: NodeTraversal(2226)", "Delete SimpleName: traverseEs6(2227)", "Delete SimpleName: compiler(2228)", "Delete SimpleName: c(2229)", "Delete SimpleName: ScriptPreprocessor(2230)", "Delete SimpleType: ScriptPreprocessor(2231)", "Delete ClassInstanceCreation(2232)", "Delete MethodInvocation(2233)", "Delete ExpressionStatement(2234)", "Delete SimpleName: NodeTraversal(2331)", "Delete SimpleName: traverseEs6(2332)", "Delete SimpleName: compiler(2333)", "Delete SimpleName: scriptRoot(2334)", "Delete SimpleName: ScriptPreprocessor(2335)", "Delete SimpleType: ScriptPreprocessor(2336)", "Delete ClassInstanceCreation(2337)", "Delete MethodInvocation(2338)", "Delete ExpressionStatement(2339)", "Delete Modifier: private(2417)", "Delete PrimitiveType: void(2418)", "Delete SimpleName: preprocessExportDeclaration(2419)", "Delete SimpleName: Node(2420)", "Delete SimpleType: Node(2421)", "Delete SimpleName: n(2422)", "Delete SingleVariableDeclaration(2423)", "Delete IfStatement(2444)", "Delete SimpleName: Node(2452)", "Delete SimpleType: Node(2453)", "Delete SimpleName: exportRhs(2454)", "Delete SimpleName: n(2455)", "Delete SimpleName: getNext(2456)", "Delete MethodInvocation(2457)", "Delete VariableDeclarationFragment(2458)", "Delete VariableDeclarationStatement(2459)", "Delete IfStatement(2573)", "Delete Block(2574)", "Delete MethodDeclaration(2575)", "Delete TextElement: Rewrites ES6 shorthand property names from {name} to the expanded version {name:name}.(2372)", "Delete TextElement: This makes it easier for later analyses to rewrite lvalue and rvalue names correctly.(2373)", "Delete TagElement(2374)", "Delete Javadoc(2375)", "Delete SimpleName: n(2424)", "Delete SimpleName: getString(2425)", "Delete MethodInvocation(2426)", "Delete SimpleName: equals(2427)", "Delete StringLiteral: \"exports\"(2428)", "Delete MethodInvocation(2429)", "Delete PrefixExpression: !(2430)", "Delete SimpleName: isAssignTarget(2431)", "Delete SimpleName: n(2432)", "Delete MethodInvocation(2433)", "Delete PrefixExpression: !(2434)", "Delete MethodInvocation(2437)", "Delete ReturnStatement(2442)", "Delete QualifiedName: currentScript.defaultExportRhs(2447)", "Delete NullLiteral(2448)", "Delete InfixExpression: ==(2449)", "Delete SimpleType: Node(2464)", "Delete SimpleName: insertionPoint(2465)", "Delete SimpleName: n(2466)", "Delete SimpleName: getGrandparent(2467)", "Delete MethodInvocation(2468)", "Delete VariableDeclarationFragment(2469)", "Delete VariableDeclarationStatement(2470)", "Delete SimpleName: rhs(2497)", "Delete SimpleName: key(2501)", "Delete SimpleName: removeFirstChild(2502)", "Delete MethodInvocation(2503)", "Delete SimpleName: IR(2504)", "Delete SimpleName: name(2505)", "Delete SimpleName: exportName(2506)", "Delete MethodInvocation(2507)", "Delete SimpleName: srcref(2508)", "Delete SimpleName: key(2509)", "Delete MethodInvocation(2510)", "Delete ConditionalExpression(2511)", "Delete VariableDeclarationFragment(2512)", "Delete VariableDeclarationStatement(2513)", "Delete SimpleName: Node(2514)", "Delete SimpleType: Node(2515)", "Delete SimpleName: lhs(2516)", "Delete SimpleName: IR(2517)", "Delete SimpleName: getprop(2518)", "Delete SimpleName: IR(2519)", "Delete StringLiteral: \"exports\"(2521)", "Delete MethodInvocation(2522)", "Delete SimpleName: IR(2523)", "Delete SimpleName: string(2524)", "Delete MethodInvocation(2526)", "Delete MethodInvocation(2527)", "Delete SimpleName: srcrefTree(2528)", "Delete SimpleName: key(2529)", "Delete MethodInvocation(2530)", "Delete VariableDeclarationFragment(2531)", "Delete VariableDeclarationStatement(2532)", "Delete SimpleName: Node(2533)", "Delete SimpleType: Node(2534)", "Delete SimpleName: newExport(2535)", "Delete SimpleName: IR(2536)", "Delete SimpleName: exprResult(2537)", "Delete SimpleName: IR(2538)", "Delete SimpleName: assign(2539)", "Delete SimpleName: lhs(2540)", "Delete MethodInvocation(2542)", "Delete SimpleName: srcref(2543)", "Delete SimpleName: key(2544)", "Delete MethodInvocation(2545)", "Delete MethodInvocation(2546)", "Delete SimpleName: srcref(2547)", "Delete SimpleName: key(2548)", "Delete MethodInvocation(2549)", "Delete VariableDeclarationFragment(2550)", "Delete VariableDeclarationStatement(2551)", "Delete SimpleName: addChildAfter(2555)", "Delete SimpleName: newExport(2556)", "Delete MethodInvocation(2558)", "Delete ExpressionStatement(2559)", "Delete SimpleName: insertionPoint(2560)", "Delete SimpleName: newExport(2561)", "Delete Assignment: =(2562)", "Delete ExpressionStatement(2563)", "Delete Block(2564)", "Delete ForStatement(2565)", "Delete SimpleName: detach(2569)", "Delete MethodInvocation(2570)", "Delete ExpressionStatement(2571)", "Delete SimpleName: Preconditions(3365)", "Delete SimpleName: checkState(3366)", "Delete SimpleName: isNamedExportsLiteral(3367)", "Delete SimpleName: exportRhs(3368)", "Delete MethodInvocation(3369)", "Delete PrefixExpression: !(3370)", "Delete StringLiteral: \"Exports object should have been converted already\"(3371)", "Delete MethodInvocation(3372)", "Delete Modifier: private(3322)", "Delete PrimitiveType: void(3323)", "Delete SimpleName: maybeRecordExportDeclaration(3324)", "Delete Block(3420)", "Delete MethodDeclaration(3421)", "Delete TextElement: TODO(blickly): Remove as much of this functionality as possible, now that these style of(4611)", "Delete TextElement: exports are rewritten in ScriptPreprocess step.(4612)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}