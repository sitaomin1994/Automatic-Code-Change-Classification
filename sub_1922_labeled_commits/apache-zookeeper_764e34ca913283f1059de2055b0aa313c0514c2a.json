{"application": "apache-zookeeper", "csha": "764e34ca913283f1059de2055b0aa313c0514c2a", "files": [{"ZooKeeper_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 15", "operations": ["INS QualifiedName: org.apache.zookeeper.common.PathUtils to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 15"]}, {"root": "INS Modifier: static to TypeDeclaration: class at 2", "operations": ["INS Modifier: static to TypeDeclaration: class at 2"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 1", "MOV ExpressionStatement to Block at 5"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 13", "MOV VariableDeclarationStatement to Block at 10", "MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 6", "MOV VariableDeclarationStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 9", "MOV ExpressionStatement to Block at 5", "MOV VariableDeclarationStatement to Block at 1", "MOV ExpressionStatement to Block at 11", "MOV ExpressionStatement to Block at 6"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 3", "MOV ExpressionStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 1", "MOV ExpressionStatement to Block at 4"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 3", "MOV ExpressionStatement to Block at 10", "MOV ExpressionStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 7", "MOV VariableDeclarationStatement to Block at 1", "MOV ExpressionStatement to Block at 8", "MOV ExpressionStatement to Block at 5", "MOV ExpressionStatement to Block at 5"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 6", "MOV VariableDeclarationStatement to Block at 3", "MOV ExpressionStatement to Block at 8", "MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 3", "MOV ExpressionStatement to Block at 6", "MOV VariableDeclarationStatement to Block at 7", "MOV ExpressionStatement to Block at 5", "MOV VariableDeclarationStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 1", "MOV ExpressionStatement to Block at 4"]}, {"root": "INS SimpleName: PathUtils to MethodInvocation at 0", "operations": ["INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS SimpleName: createMode to MethodInvocation at 0", "INS SimpleName: isSequential to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3"]}, {"root": "INS SimpleName: PathUtils to MethodInvocation at 0", "operations": ["INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS SimpleName: createMode to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: isSequential to MethodInvocation at 1"]}, {"root": "INS SimpleName: PathUtils to MethodInvocation at 0", "operations": ["INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "INS SimpleName: PathUtils to MethodInvocation at 0", "operations": ["INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "INS SimpleName: PathUtils to MethodInvocation at 0", "operations": ["INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "INS SimpleName: PathUtils to MethodInvocation at 0", "operations": ["INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "INS SimpleName: PathUtils to MethodInvocation at 0", "operations": ["INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "INS SimpleName: PathUtils to MethodInvocation at 0", "operations": ["INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "INS SimpleName: PathUtils to MethodInvocation at 0", "operations": ["INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "INS SimpleName: PathUtils to MethodInvocation at 0", "operations": ["INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "INS SimpleName: PathUtils to MethodInvocation at 0", "operations": ["INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "INS SimpleName: PathUtils to MethodInvocation at 0", "operations": ["INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "INS SimpleName: PathUtils to MethodInvocation at 0", "operations": ["INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "INS SimpleName: PathUtils to MethodInvocation at 0", "operations": ["INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "INS SimpleName: PathUtils to MethodInvocation at 0", "operations": ["INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "INS SimpleName: PathUtils to MethodInvocation at 0", "operations": ["INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "INS SimpleName: PathUtils to MethodInvocation at 0", "operations": ["INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: path", "DEL SimpleName: path", "DEL InfixExpression: &&", "DEL SimpleName: IllegalArgumentException", "DEL QualifiedName: chars.length", "DEL SimpleName: lastc", "DEL ArrayAccess", "DEL NumberLiteral: 1", "DEL CharacterLiteral: '.'", "DEL StringLiteral: \"relative paths not allowed @\"", "DEL VariableDeclarationFragment", "DEL SimpleName: c", "DEL SimpleName: validatePath", "DEL Block", "DEL SimpleName: c", "DEL StringLiteral: \"invalid charater @\"", "DEL Block", "DEL Block", "DEL CharacterLiteral: '\\uf8ff'", "DEL CharacterLiteral: '\\u0000'", "DEL SimpleName: reason", "DEL Assignment: =", "DEL IfStatement", "DEL InfixExpression: +", "DEL InfixExpression: ==", "DEL InfixExpression: +", "DEL CharacterLiteral: '/'", "DEL InfixExpression: +", "DEL ArrayAccess", "DEL StringLiteral: \"Path cannot be null\"", "DEL StringLiteral: \"Path must start with / character\"", "DEL NullLiteral", "DEL Block", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL PrimitiveType: char", "DEL NumberLiteral: 0", "DEL QualifiedName: chars.length", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: path", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL SimpleType: String", "DEL ParenthesizedExpression", "DEL InfixExpression: -", "DEL InfixExpression: ==", "DEL SimpleType: IllegalArgumentException", "DEL PrimitiveType: char", "DEL Block", "DEL SimpleName: reason", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL CharacterLiteral: '/'", "DEL NumberLiteral: 1", "DEL ArrayAccess", "DEL CharacterLiteral: '/'", "DEL InfixExpression: ==", "DEL SimpleName: c", "DEL ClassInstanceCreation", "DEL SimpleName: c", "DEL SimpleName: i", "DEL InfixExpression: ==", "DEL IfStatement", "DEL Block", "DEL SimpleName: i", "DEL NullLiteral", "DEL SimpleName: reason", "DEL QualifiedName: chars.length", "DEL MethodDeclaration", "DEL InfixExpression: !=", "DEL SimpleName: c", "DEL ThrowStatement", "DEL InfixExpression: <", "DEL SimpleName: String", "DEL BreakStatement", "DEL SimpleName: i", "DEL SimpleName: i", "DEL SimpleName: length", "DEL BreakStatement", "DEL NumberLiteral: 1", "DEL SimpleName: i", "DEL SimpleName: path", "DEL ArrayAccess", "DEL StringLiteral: \"\\\" caused by \"", "DEL SimpleName: c", "DEL CharacterLiteral: '\\u009F'", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: lastc", "DEL InfixExpression: &&", "DEL CharacterLiteral: '/'", "DEL InfixExpression: ==", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 1", "DEL Assignment: =", "DEL Assignment: =", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL InfixExpression: +", "DEL SimpleName: chars", "DEL IfStatement", "DEL InfixExpression: &&", "DEL SimpleType: IllegalArgumentException", "DEL TextElement: Validate the provided znode path string", "DEL InfixExpression: ||", "DEL SimpleName: IllegalArgumentException", "DEL ThrowStatement", "DEL ParenthesizedExpression", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: IllegalArgumentException", "DEL IfStatement", "DEL SimpleName: chars", "DEL ClassInstanceCreation", "DEL CharacterLiteral: '/'", "DEL ThrowStatement", "DEL NumberLiteral: 0", "DEL InfixExpression: &&", "DEL InfixExpression: &&", "DEL InfixExpression: &&", "DEL NumberLiteral: 1", "DEL SimpleName: path", "DEL MethodInvocation", "DEL BreakStatement", "DEL SimpleName: reason", "DEL SimpleName: path", "DEL NullLiteral", "DEL InfixExpression: +", "DEL ArrayAccess", "DEL SimpleName: String", "DEL InfixExpression: &&", "DEL InfixExpression: <", "DEL InfixExpression: ==", "DEL InfixExpression: >", "DEL SimpleName: i", "DEL InfixExpression: ==", "DEL StringLiteral: \"Invalid path string \\\"\"", "DEL TagElement: @param", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL TextElement:  if the path is invalid", "DEL SimpleName: path", "DEL InfixExpression: -", "DEL Assignment: =", "DEL InfixExpression: ==", "DEL SimpleType: IllegalArgumentException", "DEL StringLiteral: \"relative paths not allowed @\"", "DEL SimpleName: length", "DEL SimpleName: c", "DEL PostfixExpression: ++", "DEL SimpleName: i", "DEL CharacterLiteral: '/'", "DEL ThrowStatement", "DEL SimpleName: c", "DEL InfixExpression: +", "DEL NumberLiteral: 2", "DEL PrimitiveType: void", "DEL SimpleName: path", "DEL SimpleName: chars", "DEL StringLiteral: \"Path must not end with / character\"", "DEL SimpleName: lastc", "DEL SimpleName: c", "DEL SimpleName: lastc", "DEL MethodInvocation", "DEL SimpleName: IllegalArgumentException", "DEL VariableDeclarationStatement", "DEL InfixExpression: ==", "DEL TagElement", "DEL Modifier: public", "DEL InfixExpression: ==", "DEL InfixExpression: ==", "DEL Assignment: =", "DEL ParenthesizedExpression", "DEL Block", "DEL TextElement:  znode path string", "DEL SimpleName: toCharArray", "DEL SimpleName: i", "DEL CharacterLiteral: '.'", "DEL SimpleType: IllegalArgumentException", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL InfixExpression: >", "DEL InfixExpression: -", "DEL InfixExpression: !=", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: reason", "DEL Modifier: static", "DEL Block", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL CharacterLiteral: '\\u001f'", "DEL ThrowStatement", "DEL ExpressionStatement", "DEL Block", "DEL CharacterLiteral: '\\u007f'", "DEL SimpleName: length", "DEL IfStatement", "DEL InfixExpression: <", "DEL SimpleName: chars", "DEL Block", "DEL IfStatement", "DEL SimpleName: c", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL CharacterLiteral: '\\ufff0'", "DEL InfixExpression: <", "DEL SimpleName: c", "DEL CharacterLiteral: '/'", "DEL SimpleName: charAt", "DEL CharacterLiteral: '\\uffff'", "DEL ReturnStatement", "DEL IfStatement", "DEL Block", "DEL MethodInvocation", "DEL BreakStatement", "DEL IfStatement", "DEL InfixExpression: ||", "DEL CharacterLiteral: '\\ud800'", "DEL Dimension", "DEL SimpleName: i", "DEL Javadoc", "DEL InfixExpression: ||", "DEL Assignment: =", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: reason", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL InfixExpression: +", "DEL Assignment: =", "DEL SimpleName: IllegalArgumentException", "DEL NumberLiteral: 1", "DEL SimpleName: c", "DEL InfixExpression: ==", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL SimpleName: i", "DEL SimpleName: reason", "DEL StringLiteral: \"null character not allowed @\"", "DEL InfixExpression: ==", "DEL TagElement: @throws", "DEL StringLiteral: \"empty node name specified @\"", "DEL InfixExpression: <", "DEL Block", "DEL SimpleName: i", "DEL InfixExpression: +", "DEL InfixExpression: ==", "DEL SimpleName: i", "DEL SimpleName: chars", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL ForStatement", "DEL VariableDeclarationFragment", "DEL CharacterLiteral: '/'", "DEL SimpleName: i", "DEL CharacterLiteral: '/'", "DEL SimpleName: path", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL StringLiteral: \"Path length must be > 0\"", "DEL SimpleName: reason", "DEL InfixExpression: ||", "DEL InfixExpression: +", "DEL SimpleName: c", "DEL VariableDeclarationExpression", "DEL Block", "DEL SimpleName: path", "DEL PrimitiveType: char", "DEL CharacterLiteral: '.'", "DEL SimpleType: String", "DEL InfixExpression: +", "DEL Block", "DEL ArrayAccess", "DEL NumberLiteral: 1", "DEL IfStatement", "DEL SimpleName: c", "DEL InfixExpression: >", "DEL SimpleName: chars", "DEL BreakStatement", "DEL SimpleName: chars", "DEL SimpleName: charAt", "DEL InfixExpression: ||", "DEL InfixExpression: >", "DEL NumberLiteral: 1", "DEL PrimitiveType: int"]}]}}, {"ZooKeeper_diff": {"operations": ["Insert ImportDeclaration(46) into CompilationUnit(3708) at 15", "Insert QualifiedName: org.apache.zookeeper.common.PathUtils(45) into ImportDeclaration(46) at 0", "Insert Modifier: static(253) into TypeDeclaration: class(621) at 2", "Move VariableDeclarationStatement(3766) into Block(2117) at 1", "Move ExpressionStatement(3784) into Block(2117) at 5", "Move ExpressionStatement(2727) into Block(2117) at 6", "Move VariableDeclarationStatement(2741) into Block(2117) at 10", "Move ExpressionStatement(2768) into Block(2117) at 13", "Move VariableDeclarationStatement(2322) into Block(2499) at 1", "Move ExpressionStatement(2340) into Block(2499) at 5", "Move ExpressionStatement(2347) into Block(2499) at 6", "Move VariableDeclarationStatement(2361) into Block(2499) at 9", "Move ExpressionStatement(2388) into Block(2499) at 11", "Move VariableDeclarationStatement(3330) into Block(2684) at 1", "Move ExpressionStatement(3009) into Block(2684) at 2", "Move VariableDeclarationStatement(3017) into Block(2684) at 3", "Move ExpressionStatement(3348) into Block(2684) at 4", "Move ExpressionStatement(3027) into Block(2684) at 5", "Move ExpressionStatement(3496) into Block(2684) at 6", "Move VariableDeclarationStatement(3040) into Block(2684) at 7", "Move VariableDeclarationStatement(2702) into Block(2787) at 1", "Move ExpressionStatement(2888) into Block(2787) at 2", "Move VariableDeclarationStatement(2896) into Block(2787) at 3", "Move ExpressionStatement(2720) into Block(2787) at 4", "Move ExpressionStatement(2906) into Block(2787) at 5", "Move ExpressionStatement(2911) into Block(2787) at 6", "Move VariableDeclarationStatement(2919) into Block(2787) at 7", "Move ExpressionStatement(3518) into Block(2787) at 8", "Move VariableDeclarationStatement(3004) into Block(2998) at 1", "Move ExpressionStatement(3022) into Block(2998) at 5", "Move VariableDeclarationStatement(2883) into Block(3150) at 1", "Move ExpressionStatement(3473) into Block(3150) at 2", "Move VariableDeclarationStatement(3481) into Block(3150) at 3", "Move ExpressionStatement(2901) into Block(3150) at 4", "Move VariableDeclarationStatement(3223) into Block(3255) at 1", "Move ExpressionStatement(3335) into Block(3255) at 2", "Move VariableDeclarationStatement(3343) into Block(3255) at 3", "Move ExpressionStatement(3241) into Block(3255) at 4", "Move ExpressionStatement(3032) into Block(3255) at 8", "Move ExpressionStatement(3054) into Block(3255) at 10", "Move VariableDeclarationStatement(3468) into Block(3571) at 1", "Move ExpressionStatement(3486) into Block(3571) at 4", "Insert SimpleName: PathUtils(1357) into MethodInvocation(1363) at 0", "Insert MethodInvocation(1362) into MethodInvocation(1363) at 3", "Insert SimpleName: PathUtils(1517) into MethodInvocation(1523) at 0", "Insert MethodInvocation(1522) into MethodInvocation(1523) at 3", "Insert SimpleName: PathUtils(1645) into MethodInvocation(1648) at 0", "Insert SimpleName: PathUtils(1742) into MethodInvocation(1745) at 0", "Insert SimpleName: PathUtils(1837) into MethodInvocation(1840) at 0", "Insert SimpleName: PathUtils(2038) into MethodInvocation(2041) at 0", "Insert SimpleName: PathUtils(2213) into MethodInvocation(2216) at 0", "Insert SimpleName: PathUtils(2420) into MethodInvocation(2423) at 0", "Insert SimpleName: PathUtils(2602) into MethodInvocation(2605) at 0", "Insert SimpleName: PathUtils(2724) into MethodInvocation(2727) at 0", "Insert SimpleName: PathUtils(2831) into MethodInvocation(2834) at 0", "Insert SimpleName: PathUtils(2945) into MethodInvocation(2948) at 0", "Insert SimpleName: PathUtils(3053) into MethodInvocation(3056) at 0", "Insert SimpleName: PathUtils(3192) into MethodInvocation(3195) at 0", "Insert SimpleName: PathUtils(3306) into MethodInvocation(3309) at 0", "Insert SimpleName: PathUtils(3492) into MethodInvocation(3495) at 0", "Insert SimpleName: PathUtils(3644) into MethodInvocation(3647) at 0", "Insert SimpleName: createMode(1360) into MethodInvocation(1362) at 0", "Insert SimpleName: isSequential(1361) into MethodInvocation(1362) at 1", "Insert SimpleName: createMode(1520) into MethodInvocation(1522) at 0", "Insert SimpleName: isSequential(1521) into MethodInvocation(1522) at 1", "Delete TextElement: Validate the provided znode path string(1460)", "Delete TagElement(1461)", "Delete SimpleName: path(1462)", "Delete TextElement:  znode path string(1463)", "Delete TagElement: @param(1464)", "Delete SimpleName: IllegalArgumentException(1465)", "Delete TextElement:  if the path is invalid(1466)", "Delete TagElement: @throws(1467)", "Delete Javadoc(1468)", "Delete Modifier: public(1469)", "Delete Modifier: static(1470)", "Delete PrimitiveType: void(1471)", "Delete SimpleName: validatePath(1472)", "Delete SimpleName: String(1473)", "Delete SimpleType: String(1474)", "Delete SimpleName: path(1475)", "Delete SingleVariableDeclaration(1476)", "Delete SimpleName: IllegalArgumentException(1477)", "Delete SimpleType: IllegalArgumentException(1478)", "Delete SimpleName: path(1479)", "Delete NullLiteral(1480)", "Delete InfixExpression: ==(1481)", "Delete SimpleName: IllegalArgumentException(1482)", "Delete SimpleType: IllegalArgumentException(1483)", "Delete StringLiteral: \"Path cannot be null\"(1484)", "Delete ClassInstanceCreation(1485)", "Delete ThrowStatement(1486)", "Delete Block(1487)", "Delete IfStatement(1488)", "Delete SimpleName: path(1489)", "Delete SimpleName: length(1490)", "Delete MethodInvocation(1491)", "Delete NumberLiteral: 0(1492)", "Delete InfixExpression: ==(1493)", "Delete SimpleName: IllegalArgumentException(1494)", "Delete SimpleType: IllegalArgumentException(1495)", "Delete StringLiteral: \"Path length must be > 0\"(1496)", "Delete ClassInstanceCreation(1497)", "Delete ThrowStatement(1498)", "Delete Block(1499)", "Delete IfStatement(1500)", "Delete SimpleName: path(1501)", "Delete SimpleName: charAt(1502)", "Delete NumberLiteral: 0(1503)", "Delete MethodInvocation(1504)", "Delete CharacterLiteral: '/'(1505)", "Delete InfixExpression: !=(1506)", "Delete SimpleName: IllegalArgumentException(1507)", "Delete SimpleType: IllegalArgumentException(1508)", "Delete StringLiteral: \"Path must start with / character\"(1509)", "Delete ClassInstanceCreation(1510)", "Delete ThrowStatement(1511)", "Delete Block(1512)", "Delete IfStatement(1513)", "Delete SimpleName: path(1514)", "Delete SimpleName: length(1515)", "Delete MethodInvocation(1516)", "Delete NumberLiteral: 1(1517)", "Delete InfixExpression: ==(1518)", "Delete ReturnStatement(1519)", "Delete Block(1520)", "Delete IfStatement(1521)", "Delete SimpleName: path(1522)", "Delete SimpleName: charAt(1523)", "Delete SimpleName: path(1524)", "Delete SimpleName: length(1525)", "Delete MethodInvocation(1526)", "Delete NumberLiteral: 1(1527)", "Delete InfixExpression: -(1528)", "Delete MethodInvocation(1529)", "Delete CharacterLiteral: '/'(1530)", "Delete InfixExpression: ==(1531)", "Delete SimpleName: IllegalArgumentException(1532)", "Delete SimpleType: IllegalArgumentException(1533)", "Delete StringLiteral: \"Path must not end with / character\"(1534)", "Delete ClassInstanceCreation(1535)", "Delete ThrowStatement(1536)", "Delete Block(1537)", "Delete IfStatement(1538)", "Delete SimpleName: String(1539)", "Delete SimpleType: String(1540)", "Delete SimpleName: reason(1541)", "Delete NullLiteral(1542)", "Delete VariableDeclarationFragment(1543)", "Delete VariableDeclarationStatement(1544)", "Delete PrimitiveType: char(1545)", "Delete SimpleName: lastc(1546)", "Delete CharacterLiteral: '/'(1547)", "Delete VariableDeclarationFragment(1548)", "Delete VariableDeclarationStatement(1549)", "Delete PrimitiveType: char(1550)", "Delete SimpleName: chars(1551)", "Delete Dimension(1552)", "Delete SimpleName: path(1553)", "Delete SimpleName: toCharArray(1554)", "Delete MethodInvocation(1555)", "Delete VariableDeclarationFragment(1556)", "Delete VariableDeclarationStatement(1557)", "Delete PrimitiveType: char(1558)", "Delete SimpleName: c(1559)", "Delete VariableDeclarationFragment(1560)", "Delete VariableDeclarationStatement(1561)", "Delete PrimitiveType: int(1562)", "Delete SimpleName: i(1563)", "Delete NumberLiteral: 1(1564)", "Delete VariableDeclarationFragment(1565)", "Delete VariableDeclarationExpression(1566)", "Delete SimpleName: i(1567)", "Delete QualifiedName: chars.length(1568)", "Delete InfixExpression: <(1569)", "Delete SimpleName: lastc(1570)", "Delete SimpleName: chars(1571)", "Delete SimpleName: i(1572)", "Delete ArrayAccess(1573)", "Delete Assignment: =(1574)", "Delete SimpleName: i(1575)", "Delete PostfixExpression: ++(1576)", "Delete SimpleName: c(1577)", "Delete SimpleName: chars(1578)", "Delete SimpleName: i(1579)", "Delete ArrayAccess(1580)", "Delete Assignment: =(1581)", "Delete ExpressionStatement(1582)", "Delete SimpleName: c(1583)", "Delete NumberLiteral: 0(1584)", "Delete InfixExpression: ==(1585)", "Delete SimpleName: reason(1586)", "Delete StringLiteral: \"null character not allowed @\"(1587)", "Delete SimpleName: i(1588)", "Delete InfixExpression: +(1589)", "Delete Assignment: =(1590)", "Delete ExpressionStatement(1591)", "Delete BreakStatement(1592)", "Delete Block(1593)", "Delete SimpleName: c(1594)", "Delete CharacterLiteral: '/'(1595)", "Delete InfixExpression: ==(1596)", "Delete SimpleName: lastc(1597)", "Delete CharacterLiteral: '/'(1598)", "Delete InfixExpression: ==(1599)", "Delete InfixExpression: &&(1600)", "Delete SimpleName: reason(1601)", "Delete StringLiteral: \"empty node name specified @\"(1602)", "Delete SimpleName: i(1603)", "Delete InfixExpression: +(1604)", "Delete Assignment: =(1605)", "Delete ExpressionStatement(1606)", "Delete BreakStatement(1607)", "Delete Block(1608)", "Delete SimpleName: c(1609)", "Delete CharacterLiteral: '.'(1610)", "Delete InfixExpression: ==(1611)", "Delete SimpleName: lastc(1612)", "Delete CharacterLiteral: '.'(1613)", "Delete InfixExpression: ==(1614)", "Delete InfixExpression: &&(1615)", "Delete SimpleName: chars(1616)", "Delete SimpleName: i(1617)", "Delete NumberLiteral: 2(1618)", "Delete InfixExpression: -(1619)", "Delete ArrayAccess(1620)", "Delete CharacterLiteral: '/'(1621)", "Delete InfixExpression: ==(1622)", "Delete SimpleName: i(1623)", "Delete NumberLiteral: 1(1624)", "Delete InfixExpression: +(1625)", "Delete QualifiedName: chars.length(1626)", "Delete InfixExpression: ==(1627)", "Delete ParenthesizedExpression(1628)", "Delete SimpleName: chars(1629)", "Delete SimpleName: i(1630)", "Delete NumberLiteral: 1(1631)", "Delete InfixExpression: +(1632)", "Delete ArrayAccess(1633)", "Delete CharacterLiteral: '/'(1634)", "Delete InfixExpression: ==(1635)", "Delete InfixExpression: ||(1636)", "Delete ParenthesizedExpression(1637)", "Delete InfixExpression: &&(1638)", "Delete SimpleName: reason(1639)", "Delete StringLiteral: \"relative paths not allowed @\"(1640)", "Delete SimpleName: i(1641)", "Delete InfixExpression: +(1642)", "Delete Assignment: =(1643)", "Delete ExpressionStatement(1644)", "Delete BreakStatement(1645)", "Delete Block(1646)", "Delete IfStatement(1647)", "Delete Block(1648)", "Delete SimpleName: c(1649)", "Delete CharacterLiteral: '.'(1650)", "Delete InfixExpression: ==(1651)", "Delete SimpleName: chars(1652)", "Delete SimpleName: i(1653)", "Delete NumberLiteral: 1(1654)", "Delete InfixExpression: -(1655)", "Delete ArrayAccess(1656)", "Delete CharacterLiteral: '/'(1657)", "Delete InfixExpression: ==(1658)", "Delete SimpleName: i(1659)", "Delete NumberLiteral: 1(1660)", "Delete InfixExpression: +(1661)", "Delete QualifiedName: chars.length(1662)", "Delete InfixExpression: ==(1663)", "Delete ParenthesizedExpression(1664)", "Delete SimpleName: chars(1665)", "Delete SimpleName: i(1666)", "Delete NumberLiteral: 1(1667)", "Delete InfixExpression: +(1668)", "Delete ArrayAccess(1669)", "Delete CharacterLiteral: '/'(1670)", "Delete InfixExpression: ==(1671)", "Delete InfixExpression: ||(1672)", "Delete ParenthesizedExpression(1673)", "Delete InfixExpression: &&(1674)", "Delete SimpleName: reason(1675)", "Delete StringLiteral: \"relative paths not allowed @\"(1676)", "Delete SimpleName: i(1677)", "Delete InfixExpression: +(1678)", "Delete Assignment: =(1679)", "Delete ExpressionStatement(1680)", "Delete BreakStatement(1681)", "Delete Block(1682)", "Delete IfStatement(1683)", "Delete Block(1684)", "Delete SimpleName: c(1685)", "Delete CharacterLiteral: '\\u0000'(1686)", "Delete InfixExpression: >(1687)", "Delete SimpleName: c(1688)", "Delete CharacterLiteral: '\\u001f'(1689)", "Delete InfixExpression: <(1690)", "Delete InfixExpression: &&(1691)", "Delete SimpleName: c(1692)", "Delete CharacterLiteral: '\\u007f'(1693)", "Delete InfixExpression: >(1694)", "Delete SimpleName: c(1695)", "Delete CharacterLiteral: '\\u009F'(1696)", "Delete InfixExpression: <(1697)", "Delete InfixExpression: &&(1698)", "Delete InfixExpression: ||(1699)", "Delete SimpleName: c(1700)", "Delete CharacterLiteral: '\\ud800'(1701)", "Delete InfixExpression: >(1702)", "Delete SimpleName: c(1703)", "Delete CharacterLiteral: '\\uf8ff'(1704)", "Delete InfixExpression: <(1705)", "Delete InfixExpression: &&(1706)", "Delete InfixExpression: ||(1707)", "Delete SimpleName: c(1708)", "Delete CharacterLiteral: '\\ufff0'(1709)", "Delete InfixExpression: >(1710)", "Delete SimpleName: c(1711)", "Delete CharacterLiteral: '\\uffff'(1712)", "Delete InfixExpression: <(1713)", "Delete InfixExpression: &&(1714)", "Delete InfixExpression: ||(1715)", "Delete SimpleName: reason(1716)", "Delete StringLiteral: \"invalid charater @\"(1717)", "Delete SimpleName: i(1718)", "Delete InfixExpression: +(1719)", "Delete Assignment: =(1720)", "Delete ExpressionStatement(1721)", "Delete BreakStatement(1722)", "Delete Block(1723)", "Delete IfStatement(1724)", "Delete IfStatement(1725)", "Delete IfStatement(1726)", "Delete IfStatement(1727)", "Delete IfStatement(1728)", "Delete Block(1729)", "Delete ForStatement(1730)", "Delete SimpleName: reason(1731)", "Delete NullLiteral(1732)", "Delete InfixExpression: !=(1733)", "Delete SimpleName: IllegalArgumentException(1734)", "Delete SimpleType: IllegalArgumentException(1735)", "Delete StringLiteral: \"Invalid path string \\\"\"(1736)", "Delete SimpleName: path(1737)", "Delete StringLiteral: \"\\\" caused by \"(1738)", "Delete SimpleName: reason(1739)", "Delete InfixExpression: +(1740)", "Delete ClassInstanceCreation(1741)", "Delete ThrowStatement(1742)", "Delete Block(1743)", "Delete IfStatement(1744)", "Delete Block(1745)", "Delete MethodDeclaration(1746)"]}}, {"PrepRequestProcessor_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 15"]}, {"root": "UPDATE from org.apache.zookeeper.ZooKeeper to org.apache.zookeeper.common.PathUtils", "operations": ["UPD QualifiedName: org.apache.zookeeper.ZooKeeper from org.apache.zookeeper.ZooKeeper to org.apache.zookeeper.common.PathUtils"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV TryStatement to SwitchStatement at 17"]}, {"root": "UPDATE from ZooKeeper to PathUtils", "operations": ["UPD SimpleName: ZooKeeper from ZooKeeper to PathUtils"]}]}}, {"PrepRequestProcessor_diff": {"operations": ["Move ImportDeclaration(40) into CompilationUnit(1836) at 15", "Update QualifiedName: org.apache.zookeeper.ZooKeeper(39) to org.apache.zookeeper.common.PathUtils", "Move TryStatement(654) into SwitchStatement(1417) at 17", "Update SimpleName: ZooKeeper(626) to PathUtils"]}}], "commit_stats": [{"total_files": 6, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}