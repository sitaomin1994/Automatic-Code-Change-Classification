{"application": "google-jimfs", "csha": "ee152336560d99e8cfb79b547da6037ee6a27853", "files": [{"ByteStore_cluster": {"actions": [{"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: append", "DEL SingleVariableDeclaration", "DEL Block", "DEL PrimitiveType: byte", "DEL MethodInvocation", "DEL ReturnStatement", "DEL TagElement", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: size", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: b", "DEL MethodDeclaration", "DEL TextElement: Appends the given byte to this store. Returns the number of bytes written.", "DEL SimpleName: b", "DEL SimpleName: write"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL PrimitiveType: int", "DEL Dimension", "DEL SimpleName: b", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: size", "DEL Javadoc", "DEL QualifiedName: b.length", "DEL MethodDeclaration", "DEL SimpleName: write", "DEL Modifier: public", "DEL SimpleName: append", "DEL PrimitiveType: byte", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL ArrayType: byte[]", "DEL MethodInvocation", "DEL SimpleName: b", "DEL TagElement", "DEL TextElement: Appends all bytes in the given byte array to this store. Returns the number of bytes written.", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: .", "DEL TagElement: @code", "DEL SimpleName: off", "DEL TextElement:  off", "DEL TextElement:  if ", "DEL SimpleName: IndexOutOfBoundsException", "DEL SimpleName: size", "DEL Javadoc", "DEL TextElement:  b.length", "DEL MethodInvocation", "DEL TextElement:  len", "DEL TextElement:  or ", "DEL TextElement:  off", "DEL SimpleName: write", "DEL ReturnStatement", "DEL PrimitiveType: int", "DEL TextElement:  in the given byte array to this store.", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL TagElement: @throws", "DEL Block", "DEL SimpleName: len", "DEL TagElement: @code", "DEL TextElement: len", "DEL SimpleName: b", "DEL TagElement: @code", "DEL PrimitiveType: int", "DEL SimpleName: off", "DEL TagElement: @code", "DEL TagElement: @code", "DEL TextElement:  off +", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL TagElement: @code", "DEL TextElement: Returns the number of bytes written.", "DEL SimpleName: append", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL ArrayType: byte[]", "DEL TextElement:  is greater than ", "DEL MethodDeclaration", "DEL TextElement: Appends ", "DEL TextElement:  is negative, or if ", "DEL PrimitiveType: byte", "DEL TextElement:  bytes starting at offset ", "DEL Modifier: public", "DEL PrimitiveType: int", "DEL TextElement:  len", "DEL SimpleName: len", "DEL SimpleName: b"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: buf", "DEL TextElement: Appends all available bytes from buffer ", "DEL TagElement", "DEL TagElement: @code", "DEL PrimitiveType: int", "DEL Block", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: size", "DEL SimpleName: buf", "DEL TextElement:  buf", "DEL MethodDeclaration", "DEL Javadoc", "DEL SimpleType: ByteBuffer", "DEL SimpleName: append", "DEL MethodInvocation", "DEL TextElement:  to this store. Returns the number of bytes", "DEL TextElement: written.", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: write", "DEL SimpleName: ByteBuffer"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: bufs", "DEL TextElement: the number of bytes written.", "DEL TextElement: , in order, to this store. Returns", "DEL SimpleName: append", "DEL TextElement:  bufs", "DEL SimpleName: write", "DEL ParameterizedType: Iterable<ByteBuffer>", "DEL MethodInvocation", "DEL Modifier: public", "DEL TagElement: @code", "DEL TagElement: @code", "DEL TextElement: .", "DEL TextElement: Appends all available bytes from each buffer in ", "DEL SimpleName: Iterable", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL Block", "DEL TextElement:  bufs", "DEL TagElement", "DEL SimpleName: ByteBuffer", "DEL MethodInvocation", "DEL TextElement:  null", "DEL SimpleName: bufs", "DEL SimpleName: size", "DEL SimpleType: Iterable", "DEL ReturnStatement", "DEL TextElement:  is ", "DEL MethodDeclaration", "DEL TagElement: @throws", "DEL PrimitiveType: long", "DEL SimpleType: ByteBuffer", "DEL TextElement:  if any element of ", "DEL TagElement: @code", "DEL SimpleName: NullPointerException"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement:  count", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: IOException", "DEL SimpleName: size", "DEL SimpleName: ReadableByteChannel", "DEL ReturnStatement", "DEL SimpleName: count", "DEL SimpleType: IOException", "DEL SimpleName: src", "DEL SimpleName: appendFrom", "DEL TextElement:  bytes from the given channel to this store. Returns the number of", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: transferFrom", "DEL Javadoc", "DEL TagElement: @code", "DEL MethodInvocation", "DEL SimpleName: count", "DEL TagElement", "DEL SimpleType: ReadableByteChannel", "DEL PrimitiveType: long", "DEL MethodInvocation", "DEL TextElement: bytes transferred.", "DEL PrimitiveType: long", "DEL SingleVariableDeclaration", "DEL SimpleName: src", "DEL TextElement: Appends up to "]}]}}, {"ByteStore_diff": {"operations": ["Delete TextElement: Appends the given byte to this store. Returns the number of bytes written.(456)", "Delete TagElement(457)", "Delete Javadoc(458)", "Delete Modifier: public(459)", "Delete PrimitiveType: int(460)", "Delete SimpleName: append(461)", "Delete PrimitiveType: byte(462)", "Delete SimpleName: b(463)", "Delete SingleVariableDeclaration(464)", "Delete SimpleName: write(465)", "Delete SimpleName: size(466)", "Delete MethodInvocation(467)", "Delete SimpleName: b(468)", "Delete MethodInvocation(469)", "Delete ReturnStatement(470)", "Delete Block(471)", "Delete MethodDeclaration(472)", "Delete TextElement: Appends all bytes in the given byte array to this store. Returns the number of bytes written.(473)", "Delete TagElement(474)", "Delete Javadoc(475)", "Delete Modifier: public(476)", "Delete PrimitiveType: int(477)", "Delete SimpleName: append(478)", "Delete PrimitiveType: byte(479)", "Delete Dimension(480)", "Delete ArrayType: byte[](481)", "Delete SimpleName: b(482)", "Delete SingleVariableDeclaration(483)", "Delete SimpleName: write(484)", "Delete SimpleName: size(485)", "Delete MethodInvocation(486)", "Delete SimpleName: b(487)", "Delete NumberLiteral: 0(488)", "Delete QualifiedName: b.length(489)", "Delete MethodInvocation(490)", "Delete ReturnStatement(491)", "Delete Block(492)", "Delete MethodDeclaration(493)", "Delete TextElement: Appends (494)", "Delete TextElement:  len(495)", "Delete TagElement: @code(496)", "Delete TextElement:  bytes starting at offset (497)", "Delete TextElement:  off(498)", "Delete TagElement: @code(499)", "Delete TextElement:  in the given byte array to this store.(500)", "Delete TextElement: Returns the number of bytes written.(501)", "Delete TagElement(502)", "Delete SimpleName: IndexOutOfBoundsException(503)", "Delete TextElement:  if (504)", "Delete TextElement:  off(505)", "Delete TagElement: @code(506)", "Delete TextElement:  or (507)", "Delete TextElement:  len(508)", "Delete TagElement: @code(509)", "Delete TextElement:  is negative, or if (510)", "Delete TextElement:  off +(511)", "Delete TextElement: len(512)", "Delete TagElement: @code(513)", "Delete TextElement:  is greater than (514)", "Delete TextElement:  b.length(515)", "Delete TagElement: @code(516)", "Delete TextElement: .(517)", "Delete TagElement: @throws(518)", "Delete Javadoc(519)", "Delete Modifier: public(520)", "Delete PrimitiveType: int(521)", "Delete SimpleName: append(522)", "Delete PrimitiveType: byte(523)", "Delete Dimension(524)", "Delete ArrayType: byte[](525)", "Delete SimpleName: b(526)", "Delete SingleVariableDeclaration(527)", "Delete PrimitiveType: int(528)", "Delete SimpleName: off(529)", "Delete SingleVariableDeclaration(530)", "Delete PrimitiveType: int(531)", "Delete SimpleName: len(532)", "Delete SingleVariableDeclaration(533)", "Delete SimpleName: write(534)", "Delete SimpleName: size(535)", "Delete MethodInvocation(536)", "Delete SimpleName: b(537)", "Delete SimpleName: off(538)", "Delete SimpleName: len(539)", "Delete MethodInvocation(540)", "Delete ReturnStatement(541)", "Delete Block(542)", "Delete MethodDeclaration(543)", "Delete TextElement: Appends all available bytes from buffer (544)", "Delete TextElement:  buf(545)", "Delete TagElement: @code(546)", "Delete TextElement:  to this store. Returns the number of bytes(547)", "Delete TextElement: written.(548)", "Delete TagElement(549)", "Delete Javadoc(550)", "Delete Modifier: public(551)", "Delete PrimitiveType: int(552)", "Delete SimpleName: append(553)", "Delete SimpleName: ByteBuffer(554)", "Delete SimpleType: ByteBuffer(555)", "Delete SimpleName: buf(556)", "Delete SingleVariableDeclaration(557)", "Delete SimpleName: write(558)", "Delete SimpleName: size(559)", "Delete MethodInvocation(560)", "Delete SimpleName: buf(561)", "Delete MethodInvocation(562)", "Delete ReturnStatement(563)", "Delete Block(564)", "Delete MethodDeclaration(565)", "Delete TextElement: Appends all available bytes from each buffer in (566)", "Delete TextElement:  bufs(567)", "Delete TagElement: @code(568)", "Delete TextElement: , in order, to this store. Returns(569)", "Delete TextElement: the number of bytes written.(570)", "Delete TagElement(571)", "Delete SimpleName: NullPointerException(572)", "Delete TextElement:  if any element of (573)", "Delete TextElement:  bufs(574)", "Delete TagElement: @code(575)", "Delete TextElement:  is (576)", "Delete TextElement:  null(577)", "Delete TagElement: @code(578)", "Delete TextElement: .(579)", "Delete TagElement: @throws(580)", "Delete Javadoc(581)", "Delete Modifier: public(582)", "Delete PrimitiveType: long(583)", "Delete SimpleName: append(584)", "Delete SimpleName: Iterable(585)", "Delete SimpleType: Iterable(586)", "Delete SimpleName: ByteBuffer(587)", "Delete SimpleType: ByteBuffer(588)", "Delete ParameterizedType: Iterable<ByteBuffer>(589)", "Delete SimpleName: bufs(590)", "Delete SingleVariableDeclaration(591)", "Delete SimpleName: write(592)", "Delete SimpleName: size(593)", "Delete MethodInvocation(594)", "Delete SimpleName: bufs(595)", "Delete MethodInvocation(596)", "Delete ReturnStatement(597)", "Delete Block(598)", "Delete MethodDeclaration(599)", "Delete TextElement: Appends up to (600)", "Delete TextElement:  count(601)", "Delete TagElement: @code(602)", "Delete TextElement:  bytes from the given channel to this store. Returns the number of(603)", "Delete TextElement: bytes transferred.(604)", "Delete TagElement(605)", "Delete Javadoc(606)", "Delete Modifier: public(607)", "Delete PrimitiveType: long(608)", "Delete SimpleName: appendFrom(609)", "Delete SimpleName: ReadableByteChannel(610)", "Delete SimpleType: ReadableByteChannel(611)", "Delete SimpleName: src(612)", "Delete SingleVariableDeclaration(613)", "Delete PrimitiveType: long(614)", "Delete SimpleName: count(615)", "Delete SingleVariableDeclaration(616)", "Delete SimpleName: IOException(617)", "Delete SimpleType: IOException(618)", "Delete SimpleName: transferFrom(619)", "Delete SimpleName: src(620)", "Delete SimpleName: size(621)", "Delete MethodInvocation(622)", "Delete SimpleName: count(623)", "Delete MethodInvocation(624)", "Delete ReturnStatement(625)", "Delete Block(626)", "Delete MethodDeclaration(627)"]}}, {"JimfsFileChannel_cluster": {"actions": [{"root": "INS IfStatement to Block at 0", "operations": ["INS Block to IfStatement at 1", "INS IfStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS Block to IfStatement at 1", "INS IfStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS IfStatement to Block at 0", "INS MethodInvocation to IfStatement at 0", "INS Block to IfStatement at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS SimpleName: transferred to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 1"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS IfStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: position to Assignment: = at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from store to options", "operations": ["UPD SimpleName: store from store to options", "UPD SimpleName: store from store to options"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: appendFrom to MethodInvocation at 1", "MOV SimpleName: store to MethodInvocation at 0"]}, {"root": "UPDATE from appendFrom to isAppend", "operations": ["UPD SimpleName: appendFrom from appendFrom to isAppend", "UPD SimpleName: append from append to isAppend"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: store to MethodInvocation at 0", "MOV SimpleName: append to MethodInvocation at 1"]}, {"root": "INS SimpleName: position to Assignment: = at 0", "operations": ["INS SimpleName: position to Assignment: = at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV FieldAccess to Assignment: = at 0"]}, {"root": "INS InfixExpression: + to Assignment: = at 1", "operations": ["INS SimpleName: transferred to InfixExpression: + at 1", "INS InfixExpression: + to Assignment: = at 1", "INS SimpleName: position to InfixExpression: + at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV FieldAccess to Assignment: = at 0", "MOV MethodInvocation to Assignment: = at 1"]}, {"root": "INS InfixExpression: + to Assignment: = at 1", "operations": ["INS InfixExpression: + to Assignment: = at 1", "INS SimpleName: written to InfixExpression: + at 1", "INS SimpleName: position to InfixExpression: + at 0"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: written", "DEL IfStatement", "DEL Assignment: =", "DEL SimpleName: src", "DEL Assignment: =", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: store", "DEL SimpleName: written", "DEL Block", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: written", "DEL IfStatement", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: store", "DEL SimpleName: append", "DEL MethodInvocation", "DEL Block", "DEL Assignment: =", "DEL SimpleName: srcs", "DEL Block", "DEL SimpleName: written"]}, {"root": "DEL SimpleName: transferred", "operations": ["DEL SimpleName: transferred"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL PrimitiveType: long", "DEL VariableDeclarationStatement", "DEL SimpleName: transferred"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL SimpleName: src", "DEL SimpleName: file", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: transferred", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: updateModifiedTime", "DEL CastExpression", "DEL PrimitiveType: int", "DEL SimpleName: count", "DEL ExpressionStatement", "DEL Block"]}, {"root": "DEL Block", "operations": ["DEL Assignment: =", "DEL SimpleName: written", "DEL SimpleName: src", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Assignment: =", "DEL Block", "DEL ExpressionStatement"]}, {"root": "DEL SimpleName: written", "operations": ["DEL SimpleName: written"]}]}}, {"JimfsFileChannel_diff": {"operations": ["Insert IfStatement(628) into Block(652) at 0", "Move ExpressionStatement(650) into Block(652) at 2", "Insert IfStatement(788) into Block(812) at 0", "Move ExpressionStatement(821) into Block(812) at 2", "Insert IfStatement(1288) into Block(1326) at 0", "Insert VariableDeclarationStatement(1302) into Block(1326) at 1", "Insert IfStatement(1315) into Block(1326) at 2", "Move ExpressionStatement(1333) into Block(1326) at 3", "Insert IfStatement(1547) into Block(1582) at 0", "Move MethodInvocation(624) into IfStatement(628) at 0", "Insert Block(627) into IfStatement(628) at 1", "Move MethodInvocation(795) into IfStatement(788) at 0", "Insert Block(787) into IfStatement(788) at 1", "Insert MethodInvocation(1280) into IfStatement(1288) at 0", "Insert Block(1287) into IfStatement(1288) at 1", "Insert PrimitiveType: long(1289) into VariableDeclarationStatement(1302) at 0", "Insert VariableDeclarationFragment(1301) into VariableDeclarationStatement(1302) at 1", "Move MethodInvocation(1306) into IfStatement(1315) at 0", "Move Block(1347) into IfStatement(1315) at 1", "Move MethodInvocation(1572) into IfStatement(1547) at 0", "Insert Block(1546) into IfStatement(1547) at 1", "Insert MethodInvocation(1561) into IfStatement(1571) at 0", "Move ExpressionStatement(637) into Block(627) at 0", "Move MethodInvocation(644) into VariableDeclarationFragment(636) at 1", "Move ExpressionStatement(808) into Block(787) at 0", "Move MethodInvocation(815) into VariableDeclarationFragment(796) at 1", "Update SimpleName: store(1308) to options", "Move SimpleName: store(1308) into MethodInvocation(1280) at 0", "Update SimpleName: appendFrom(1309) to isAppend", "Move SimpleName: appendFrom(1309) into MethodInvocation(1280) at 1", "Move ExpressionStatement(1324) into Block(1287) at 0", "Insert SimpleName: transferred(1290) into VariableDeclarationFragment(1301) at 0", "Move MethodInvocation(1344) into VariableDeclarationFragment(1301) at 1", "Insert ExpressionStatement(1545) into Block(1546) at 0", "Move MethodInvocation(1596) into VariableDeclarationFragment(1557) at 1", "Update SimpleName: store(1574) to options", "Move SimpleName: store(1574) into MethodInvocation(1561) at 0", "Update SimpleName: append(1575) to isAppend", "Move SimpleName: append(1575) into MethodInvocation(1561) at 1", "Insert Assignment: =(1544) into ExpressionStatement(1545) at 0", "Insert SimpleName: position(1281) into Assignment: =(1285) at 0", "Move FieldAccess(1319) into Assignment: =(1312) at 0", "Insert InfixExpression: +(1311) into Assignment: =(1312) at 1", "Insert SimpleName: position(1540) into Assignment: =(1544) at 0", "Move MethodInvocation(1585) into Assignment: =(1544) at 1", "Move FieldAccess(1582) into Assignment: =(1568) at 0", "Insert InfixExpression: +(1567) into Assignment: =(1568) at 1", "Insert SimpleName: position(1309) into InfixExpression: +(1311) at 0", "Insert SimpleName: transferred(1310) into InfixExpression: +(1311) at 1", "Insert SimpleName: position(1565) into InfixExpression: +(1567) at 0", "Insert SimpleName: written(1566) into InfixExpression: +(1567) at 1", "Delete SimpleName: written(625)", "Delete SimpleName: store(626)", "Delete SimpleName: append(627)", "Delete SimpleName: src(628)", "Delete MethodInvocation(629)", "Delete Assignment: =(630)", "Delete ExpressionStatement(631)", "Delete Block(638)", "Delete SimpleName: written(639)", "Delete Assignment: =(645)", "Delete ExpressionStatement(646)", "Delete Block(651)", "Delete IfStatement(652)", "Delete SimpleName: written(796)", "Delete SimpleName: store(797)", "Delete SimpleName: append(798)", "Delete SimpleName: srcs(799)", "Delete MethodInvocation(800)", "Delete Assignment: =(801)", "Delete ExpressionStatement(802)", "Delete Block(809)", "Delete SimpleName: written(810)", "Delete Assignment: =(816)", "Delete ExpressionStatement(817)", "Delete Block(822)", "Delete IfStatement(823)", "Delete SimpleName: transferred(1334)", "Delete PrimitiveType: long(1300)", "Delete SimpleName: transferred(1301)", "Delete VariableDeclarationFragment(1302)", "Delete VariableDeclarationStatement(1303)", "Delete SimpleName: transferred(1307)", "Delete SimpleName: src(1310)", "Delete PrimitiveType: int(1311)", "Delete SimpleName: count(1312)", "Delete CastExpression(1313)", "Delete MethodInvocation(1314)", "Delete Assignment: =(1315)", "Delete ExpressionStatement(1316)", "Delete SimpleName: file(1325)", "Delete SimpleName: updateModifiedTime(1326)", "Delete MethodInvocation(1327)", "Delete ExpressionStatement(1328)", "Delete Block(1329)", "Delete IfStatement(1348)", "Delete SimpleName: written(1573)", "Delete SimpleName: src(1576)", "Delete MethodInvocation(1577)", "Delete Assignment: =(1578)", "Delete ExpressionStatement(1579)", "Delete Assignment: =(1586)", "Delete ExpressionStatement(1587)", "Delete Block(1588)", "Delete SimpleName: written(1589)"]}}, {"JimfsOutputStream_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS SimpleName: pos to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: pos to Assignment: = at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: pos to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: append to MethodInvocation at 1", "MOV SimpleName: store to MethodInvocation at 0"]}, {"root": "UPDATE from append to size", "operations": ["UPD SimpleName: append from append to size", "UPD SimpleName: append from append to size", "UPD SimpleName: append from append to size"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: append to MethodInvocation at 1", "MOV SimpleName: store to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: append to MethodInvocation at 1", "MOV SimpleName: store to MethodInvocation at 0"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL CastExpression", "DEL SimpleName: b", "DEL PrimitiveType: byte"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: b"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: off", "DEL SimpleName: len", "DEL SimpleName: b", "DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL Block"]}]}}, {"JimfsOutputStream_diff": {"operations": ["Move ExpressionStatement(125) into Block(130) at 1", "Move ExpressionStatement(181) into Block(186) at 1", "Move ExpressionStatement(255) into Block(258) at 1", "Insert Assignment: =(113) into ExpressionStatement(114) at 0", "Insert Assignment: =(170) into ExpressionStatement(171) at 0", "Insert Assignment: =(240) into ExpressionStatement(241) at 0", "Insert SimpleName: pos(109) into Assignment: =(113) at 0", "Insert MethodInvocation(112) into Assignment: =(113) at 1", "Insert SimpleName: pos(166) into Assignment: =(170) at 0", "Insert MethodInvocation(169) into Assignment: =(170) at 1", "Insert SimpleName: pos(236) into Assignment: =(240) at 0", "Insert MethodInvocation(239) into Assignment: =(240) at 1", "Move SimpleName: store(109) into MethodInvocation(112) at 0", "Update SimpleName: append(110) to size", "Move SimpleName: append(110) into MethodInvocation(112) at 1", "Move SimpleName: store(168) into MethodInvocation(169) at 0", "Update SimpleName: append(169) to size", "Move SimpleName: append(169) into MethodInvocation(169) at 1", "Move SimpleName: store(238) into MethodInvocation(239) at 0", "Update SimpleName: append(239) to size", "Move SimpleName: append(239) into MethodInvocation(239) at 1", "Delete PrimitiveType: byte(111)", "Delete SimpleName: b(112)", "Delete CastExpression(113)", "Delete MethodInvocation(114)", "Delete Block(126)", "Delete SimpleName: b(170)", "Delete MethodInvocation(171)", "Delete Block(182)", "Delete SimpleName: b(240)", "Delete SimpleName: off(241)", "Delete SimpleName: len(242)", "Delete MethodInvocation(243)", "Delete Block(256)"]}}], "commit_stats": [{"total_files": 6, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}