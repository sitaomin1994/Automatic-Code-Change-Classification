{"application": "apache-phoenix", "csha": "5282a8a09fec1ea7a6241565ff034246e3b30b92", "files": [{"SubqueryIT_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: org.apache.phoenix.util.TestUtil.JOIN_CUSTOMER_TABLE_DISPLAY_NAME to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 16", "operations": ["INS QualifiedName: org.junit.Assert.fail to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 16"]}, {"root": "INS ImportDeclaration to CompilationUnit at 22", "operations": ["INS QualifiedName: java.sql.SQLException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 22"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS StringLiteral: \" WHERE \\\"customer_id\\\" IN (SELECT \\\"customer_id\\\" FROM \" to InfixExpression: + at 2", "INS VariableDeclarationStatement to Block at 25", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: PreparedStatement to SimpleType: PreparedStatement at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS StringLiteral: \" q WHERE o.\\\"item_id\\\" = q.\\\"item_id\\\"))\" to InfixExpression: + at 8", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS StringLiteral: \" o JOIN \" to InfixExpression: + at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: rs to VariableDeclarationFragment at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: DriverManager to MethodInvocation at 0", "INS SimpleName: Pattern to MethodInvocation at 0", "INS SimpleName: conn to VariableDeclarationFragment at 0", "INS SimpleName: getString to MethodInvocation at 1", "INS StringLiteral: \"C2\" to MethodInvocation at 2", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleName: getConnection to MethodInvocation at 1", "INS StringLiteral: \"SELECT \\\"order_id\\\", name FROM \" to InfixExpression: + at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: Properties to VariableDeclarationStatement at 0", "INS StringLiteral: \"T2\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: statement to Assignment: = at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: Connection to SimpleType: Connection at 0", "INS SimpleName: next to MethodInvocation at 1", "INS SimpleName: matches to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: prepareStatement to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: testComparisonSubquery to MethodDeclaration at 3", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleType: Exception to MethodDeclaration at 4", "INS SimpleName: rs to Assignment: = at 0", "INS StringLiteral: \"C4\" to MethodInvocation at 2", "INS NumberLiteral: 4 to ArrayAccess at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: getString to MethodInvocation at 1", "INS Block to TryStatement at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: plans to ArrayAccess at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS ExpressionStatement to Block at 19", "INS ExpressionStatement to Block at 10", "INS SimpleName: getString to MethodInvocation at 1", "INS StringLiteral: \"T1\" to MethodInvocation at 2", "INS SimpleName: Properties to SimpleType: Properties at 0", "INS SimpleName: query to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \" i JOIN \" to InfixExpression: + at 4", "INS StringLiteral: \" q WHERE o.\\\"item_id\\\" = q.\\\"item_id\\\")\" to InfixExpression: + at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: query to InfixExpression: + at 1", "INS ExpressionStatement to Block at 16", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS SimpleName: plan to MethodInvocation at 3", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: query to VariableDeclarationFragment at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: PropertiesUtil to MethodInvocation at 0", "INS ExpressionStatement to Block at 9", "INS SimpleName: next to MethodInvocation at 1", "INS SimpleName: ResultSet to SimpleType: ResultSet at 0", "INS MethodInvocation to MethodInvocation at 1", "INS StringLiteral: \"000000000000003\" to MethodInvocation at 2", "INS StringLiteral: \"\\\" does not match \\\"\" to InfixExpression: + at 2", "INS SimpleName: Test to MarkerAnnotation at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: next to MethodInvocation at 1", "INS StringLiteral: \"SELECT name from \" to InfixExpression: + at 0", "INS StringLiteral: \" i ON o.\\\"item_id\\\" = i.\\\"item_id\\\" WHERE quantity = (SELECT max(quantity) FROM \" to InfixExpression: + at 4", "INS SimpleName: rs to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 15", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleName: TEST_PROPERTIES to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS TryStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: prepareStatement to MethodInvocation at 1", "INS ExpressionStatement to Block at 14", "INS ExpressionStatement to Block at 12", "INS ExpressionStatement to Block at 23", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleName: deepCopy to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS ExpressionStatement to Block at 6", "INS MethodInvocation to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: + to Assignment: = at 1", "INS SimpleName: props to VariableDeclarationFragment at 0", "INS SimpleName: next to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: rs to MethodInvocation at 0", "INS ExpressionStatement to Block at 13", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS StringLiteral: \"\\\"\" to InfixExpression: + at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS SimpleName: statement to VariableDeclarationFragment at 0", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS ExpressionStatement to Block at 7", "INS ExpressionStatement to Block at 22", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: JOIN_ORDER_TABLE_FULL_NAME to InfixExpression: + at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: close to MethodInvocation at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: QueryUtil to MethodInvocation at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS StringLiteral: \"\\\"\" to InfixExpression: + at 4", "INS SimpleName: JOIN_ORDER_TABLE_FULL_NAME to InfixExpression: + at 7", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: query to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 21", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: next to MethodInvocation at 1", "INS ExpressionStatement to Block at 11", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS ExpressionStatement to Block at 26", "INS SimpleName: rs to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS StringLiteral: \"T6\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 17", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: props to MethodInvocation at 3", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: PreparedStatement to VariableDeclarationStatement at 0", "INS Block to MethodDeclaration at 5", "INS ExpressionStatement to Block at 4", "INS NumberLiteral: 4 to ArrayAccess at 1", "INS SimpleName: getExplainPlan to MethodInvocation at 1", "INS SimpleName: plan to VariableDeclarationFragment at 0", "INS SimpleName: next to MethodInvocation at 1", "INS SimpleName: JOIN_ORDER_TABLE_FULL_NAME to InfixExpression: + at 5", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: getUrl to MethodInvocation at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: getString to MethodInvocation at 1", "INS StringLiteral: \" o ON o.\\\"item_id\\\" = i.\\\"item_id\\\" WHERE i.name = 'T2' OR quantity > (SELECT avg(quantity) FROM \" to InfixExpression: + at 6", "INS ArrayAccess to InfixExpression: + at 3", "INS SimpleName: assertFalse to MethodInvocation at 0", "INS StringLiteral: \"000000000000001\" to MethodInvocation at 2", "INS SimpleName: JOIN_ORDER_TABLE_FULL_NAME to InfixExpression: + at 5", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: JOIN_CUSTOMER_TABLE_FULL_NAME to InfixExpression: + at 1", "INS MethodInvocation to MethodInvocation at 1", "INS StringLiteral: \"T3\" to MethodInvocation at 2", "INS SimpleName: query to Assignment: = at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: next to MethodInvocation at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: plans to ArrayAccess at 0", "INS ExpressionStatement to Block at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 1", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS Block to TryStatement at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 1", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: rs to Assignment: = at 0", "INS ExpressionStatement to Block at 24", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS InfixExpression: + to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS VariableDeclarationStatement to Block at 0", "INS ExpressionStatement to Block at 20", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleType: ResultSet to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"000000000000005\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 5", "INS PrimitiveType: void to MethodDeclaration at 2", "INS StringLiteral: \"000000000000004\" to MethodInvocation at 2", "INS SimpleName: plan to InfixExpression: + at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS StringLiteral: \"EXPLAIN \" to InfixExpression: + at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: getString to MethodInvocation at 1", "INS ExpressionStatement to Block at 18", "INS ArrayAccess to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: assertFalse to MethodInvocation at 0", "INS SimpleName: rs to MethodInvocation at 2", "INS SimpleType: Connection to VariableDeclarationStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getString to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: JOIN_ITEM_TABLE_FULL_NAME to InfixExpression: + at 3", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS SimpleName: JOIN_ITEM_TABLE_FULL_NAME to InfixExpression: + at 3", "INS SimpleName: next to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 8", "INS MethodInvocation to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 81", "operations": ["INS InfixExpression: + to Assignment: = at 1", "INS ExpressionStatement to Block at 81", "INS StringLiteral: \" WHERE \\\"item_id\\\" < (SELECT \\\"item_id\\\" FROM \" to InfixExpression: + at 2", "INS SimpleName: JOIN_ORDER_TABLE_FULL_NAME to InfixExpression: + at 3", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: query to Assignment: = at 0", "INS SimpleName: JOIN_ITEM_TABLE_FULL_NAME to InfixExpression: + at 1", "INS StringLiteral: \")\" to InfixExpression: + at 4", "INS StringLiteral: \"SELECT \\\"item_id\\\", name FROM \" to InfixExpression: + at 0"]}, {"root": "INS ExpressionStatement to Block at 82", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: prepareStatement to MethodInvocation at 1", "INS SimpleName: statement to Assignment: = at 0", "INS ExpressionStatement to Block at 82", "INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: query to MethodInvocation at 2"]}, {"root": "INS TryStatement to Block at 83", "operations": ["INS SimpleName: statement to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS Block to CatchClause at 1", "INS TryStatement to Block at 83", "INS SingleVariableDeclaration to CatchClause at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS CatchClause to TryStatement at 1", "INS SimpleName: rs to Assignment: = at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS MethodInvocation to Assignment: = at 1", "INS Block to TryStatement at 0", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS StringLiteral: \"Should have got Exception.\" to MethodInvocation at 1", "INS SimpleName: fail to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS InfixExpression: + to ArrayInitializer at 4", "operations": ["INS StringLiteral: \"\\n\" to InfixExpression: + at 12", "INS StringLiteral: \"\\n\" to InfixExpression: + at 16", "INS StringLiteral: \"            SERVER AGGREGATE INTO DISTINCT ROWS BY \\\\[O.customer_id\\\\]\\n\" to InfixExpression: + at 7", "INS InfixExpression: + to ArrayInitializer at 4", "INS StringLiteral: \"\\n\" to InfixExpression: + at 6", "INS StringLiteral: \"CLIENT PARALLEL 1-WAY FULL SCAN OVER \" to InfixExpression: + at 0", "INS StringLiteral: \"            PARALLEL LEFT-JOIN TABLE 1\\\\(DELAYED EVALUATION\\\\)\\n\" to InfixExpression: + at 13", "INS StringLiteral: \"                CLIENT PARALLEL 1-WAY FULL SCAN OVER \" to InfixExpression: + at 10", "INS SimpleName: JOIN_ORDER_TABLE_DISPLAY_NAME to InfixExpression: + at 15", "INS StringLiteral: \"        CLIENT PARALLEL 1-WAY FULL SCAN OVER \" to InfixExpression: + at 4", "INS StringLiteral: \"                    SERVER AGGREGATE INTO DISTINCT ROWS BY \\\\[item_id\\\\]\\n\" to InfixExpression: + at 17", "INS StringLiteral: \"                CLIENT PARALLEL 1-WAY FULL SCAN OVER \" to InfixExpression: + at 14", "INS StringLiteral: \"        CLIENT MERGE SORT\\n\" to InfixExpression: + at 8", "INS StringLiteral: \"            PARALLEL INNER-JOIN TABLE 0\\n\" to InfixExpression: + at 9", "INS StringLiteral: \"            DYNAMIC SERVER FILTER BY item_id BETWEEN MIN/MAX OF \\\\(O.item_id\\\\)\\n\" to InfixExpression: + at 19", "INS SimpleName: JOIN_CUSTOMER_TABLE_DISPLAY_NAME to InfixExpression: + at 1", "INS StringLiteral: \"    SKIP-SCAN-JOIN TABLE 0\\n\" to InfixExpression: + at 3", "INS StringLiteral: \"                CLIENT MERGE SORT\\n\" to InfixExpression: + at 18", "INS StringLiteral: \"    DYNAMIC SERVER FILTER BY customer_id IN \\\\(\\\\$\\\\d+.\\\\$\\\\d+\\\\)\" to InfixExpression: + at 21", "INS StringLiteral: \"\\n\" to InfixExpression: + at 2", "INS SimpleName: JOIN_ORDER_TABLE_DISPLAY_NAME to InfixExpression: + at 11", "INS StringLiteral: \"            AFTER-JOIN SERVER FILTER BY \\\\(I.NAME = 'T2' OR O.QUANTITY > \\\\$\\\\d+.\\\\$\\\\d+\\\\)\\n\" to InfixExpression: + at 20", "INS SimpleName: JOIN_ITEM_TABLE_DISPLAY_NAME to InfixExpression: + at 5"]}, {"root": "INS InfixExpression: + to ArrayInitializer at 4", "operations": ["INS StringLiteral: \"            AFTER-JOIN SERVER FILTER BY \\\\(I.0:NAME = 'T2' OR O.QUANTITY > \\\\$\\\\d+.\\\\$\\\\d+\\\\)\" to InfixExpression: + at 20", "INS StringLiteral: \"            PARALLEL INNER-JOIN TABLE 0\\n\" to InfixExpression: + at 10", "INS StringLiteral: \"                CLIENT MERGE SORT\\n\" to InfixExpression: + at 19", "INS StringLiteral: \".idx_customer\\n\" to InfixExpression: + at 2", "INS StringLiteral: \"                CLIENT PARALLEL 1-WAY FULL SCAN OVER \" to InfixExpression: + at 11", "INS StringLiteral: \"CLIENT PARALLEL 1-WAY FULL SCAN OVER \" to InfixExpression: + at 0", "INS StringLiteral: \"            SERVER FILTER BY FIRST KEY ONLY\\n\" to InfixExpression: + at 7", "INS SimpleName: JOIN_SCHEMA to InfixExpression: + at 5", "INS StringLiteral: \"            PARALLEL LEFT-JOIN TABLE 1\\\\(DELAYED EVALUATION\\\\)\\n\" to InfixExpression: + at 14", "INS StringLiteral: \"                    SERVER AGGREGATE INTO DISTINCT ROWS BY \\\\[item_id\\\\]\\n\" to InfixExpression: + at 18", "INS SimpleName: JOIN_SCHEMA to InfixExpression: + at 1", "INS StringLiteral: \"\\n\" to InfixExpression: + at 13", "INS SimpleName: JOIN_ORDER_TABLE_DISPLAY_NAME to InfixExpression: + at 16", "INS StringLiteral: \"        CLIENT PARALLEL 1-WAY FULL SCAN OVER \" to InfixExpression: + at 4", "INS StringLiteral: \"                CLIENT PARALLEL 1-WAY FULL SCAN OVER \" to InfixExpression: + at 15", "INS StringLiteral: \"\\n\" to InfixExpression: + at 17", "INS StringLiteral: \"    PARALLEL SEMI-JOIN TABLE 0 \\\\(SKIP MERGE\\\\)\\n\" to InfixExpression: + at 3", "INS InfixExpression: + to ArrayInitializer at 4", "INS SimpleName: JOIN_ORDER_TABLE_DISPLAY_NAME to InfixExpression: + at 12", "INS StringLiteral: \".idx_item\\n\" to InfixExpression: + at 6", "INS StringLiteral: \"        CLIENT MERGE SORT\\n\" to InfixExpression: + at 9", "INS StringLiteral: \"            SERVER AGGREGATE INTO DISTINCT ROWS BY \\\\[O.customer_id\\\\]\\n\" to InfixExpression: + at 8"]}, {"root": "INS InfixExpression: + to ArrayInitializer at 4", "operations": ["INS StringLiteral: \"                CLIENT PARALLEL 1-WAY FULL SCAN OVER \" to InfixExpression: + at 18", "INS StringLiteral: \"        CLIENT PARALLEL 1-WAY RANGE SCAN OVER \" to InfixExpression: + at 6", "INS StringLiteral: \"                CLIENT MERGE SORT\\n\" to InfixExpression: + at 22", "INS StringLiteral: \" \\\\[-32768\\\\]\\n\" to InfixExpression: + at 9", "INS SimpleName: JOIN_ORDER_TABLE_DISPLAY_NAME to InfixExpression: + at 19", "INS StringLiteral: \"CLIENT MERGE SORT\\n\" to InfixExpression: + at 4", "INS StringLiteral: \"            PARALLEL INNER-JOIN TABLE 0\\n\" to InfixExpression: + at 13", "INS StringLiteral: \" \\\\[-32768\\\\]\\n\" to InfixExpression: + at 3", "INS StringLiteral: \"                CLIENT PARALLEL 1-WAY FULL SCAN OVER \" to InfixExpression: + at 14", "INS StringLiteral: \"            DYNAMIC SERVER FILTER BY item_id BETWEEN MIN/MAX OF \\\\(O.item_id\\\\)\\n\" to InfixExpression: + at 23", "INS QualifiedName: MetaDataUtil.LOCAL_INDEX_TABLE_PREFIX to InfixExpression: + at 7", "INS StringLiteral: \"                    SERVER AGGREGATE INTO DISTINCT ROWS BY \\\\[item_id\\\\]\\n\" to InfixExpression: + at 21", "INS SimpleName: JOIN_ITEM_TABLE_DISPLAY_NAME to InfixExpression: + at 8", "INS SimpleName: JOIN_ORDER_TABLE_DISPLAY_NAME to InfixExpression: + at 15", "INS InfixExpression: + to ArrayInitializer at 4", "INS StringLiteral: \"    PARALLEL SEMI-JOIN TABLE 0 \\\\(SKIP MERGE\\\\)\\n\" to InfixExpression: + at 5", "INS StringLiteral: \"        CLIENT MERGE SORT\\n\" to InfixExpression: + at 12", "INS StringLiteral: \"            SERVER FILTER BY FIRST KEY ONLY\\n\" to InfixExpression: + at 10", "INS QualifiedName: MetaDataUtil.LOCAL_INDEX_TABLE_PREFIX to InfixExpression: + at 1", "INS StringLiteral: \"\\n\" to InfixExpression: + at 20", "INS StringLiteral: \"CLIENT PARALLEL 1-WAY RANGE SCAN OVER \" to InfixExpression: + at 0", "INS SimpleName: JOIN_CUSTOMER_TABLE_DISPLAY_NAME to InfixExpression: + at 2", "INS StringLiteral: \"\\n\" to InfixExpression: + at 16", "INS StringLiteral: \"            PARALLEL LEFT-JOIN TABLE 1\\\\(DELAYED EVALUATION\\\\)\\n\" to InfixExpression: + at 17", "INS StringLiteral: \"            SERVER AGGREGATE INTO DISTINCT ROWS BY \\\\[O.customer_id\\\\]\\n\" to InfixExpression: + at 11", "INS StringLiteral: \"    DYNAMIC SERVER FILTER BY customer_id IN \\\\(\\\\$\\\\d+.\\\\$\\\\d+\\\\)\" to InfixExpression: + at 25", "INS StringLiteral: \"            AFTER-JOIN SERVER FILTER BY \\\\(I.0:NAME = 'T2' OR O.QUANTITY > \\\\$\\\\d+.\\\\$\\\\d+\\\\)\\n\" to InfixExpression: + at 24"]}]}}, {"SubqueryIT_diff": {"operations": ["Insert ImportDeclaration(7) into CompilationUnit(3903) at 3", "Insert ImportDeclaration(33) into CompilationUnit(3903) at 16", "Insert ImportDeclaration(45) into CompilationUnit(3903) at 22", "Insert QualifiedName: org.apache.phoenix.util.TestUtil.JOIN_CUSTOMER_TABLE_DISPLAY_NAME(6) into ImportDeclaration(7) at 0", "Insert QualifiedName: org.junit.Assert.fail(32) into ImportDeclaration(33) at 0", "Insert QualifiedName: java.sql.SQLException(44) into ImportDeclaration(45) at 0", "Insert MethodDeclaration(3901) into TypeDeclaration: class(3902) at 16", "Insert MarkerAnnotation(3645) into MethodDeclaration(3901) at 0", "Insert Modifier: public(3646) into MethodDeclaration(3901) at 1", "Insert PrimitiveType: void(3647) into MethodDeclaration(3901) at 2", "Insert SimpleName: testComparisonSubquery(3648) into MethodDeclaration(3901) at 3", "Insert SimpleType: Exception(3650) into MethodDeclaration(3901) at 4", "Insert Block(3900) into MethodDeclaration(3901) at 5", "Insert SimpleName: Test(3644) into MarkerAnnotation(3645) at 0", "Insert SimpleName: Exception(3649) into SimpleType: Exception(3650) at 0", "Insert VariableDeclarationStatement(3659) into Block(3900) at 0", "Insert VariableDeclarationStatement(3670) into Block(3900) at 1", "Insert TryStatement(3899) into Block(3900) at 2", "Insert SimpleType: Properties(3652) into VariableDeclarationStatement(3659) at 0", "Insert VariableDeclarationFragment(3658) into VariableDeclarationStatement(3659) at 1", "Insert SimpleType: Connection(3661) into VariableDeclarationStatement(3670) at 0", "Insert VariableDeclarationFragment(3669) into VariableDeclarationStatement(3670) at 1", "Insert Block(3893) into TryStatement(3899) at 0", "Insert Block(3898) into TryStatement(3899) at 1", "Insert ExpressionStatement(2631) into Block(2657) at 81", "Insert ExpressionStatement(2638) into Block(2657) at 82", "Insert TryStatement(2656) into Block(2657) at 83", "Insert SimpleName: Properties(3651) into SimpleType: Properties(3652) at 0", "Insert SimpleName: props(3653) into VariableDeclarationFragment(3658) at 0", "Insert MethodInvocation(3657) into VariableDeclarationFragment(3658) at 1", "Insert SimpleName: Connection(3660) into SimpleType: Connection(3661) at 0", "Insert SimpleName: conn(3662) into VariableDeclarationFragment(3669) at 0", "Insert MethodInvocation(3668) into VariableDeclarationFragment(3669) at 1", "Insert VariableDeclarationStatement(3683) into Block(3893) at 0", "Insert VariableDeclarationStatement(3692) into Block(3893) at 1", "Insert VariableDeclarationStatement(3700) into Block(3893) at 2", "Insert ExpressionStatement(3706) into Block(3893) at 3", "Insert ExpressionStatement(3714) into Block(3893) at 4", "Insert ExpressionStatement(3722) into Block(3893) at 5", "Insert ExpressionStatement(3728) into Block(3893) at 6", "Insert ExpressionStatement(3736) into Block(3893) at 7", "Insert ExpressionStatement(3744) into Block(3893) at 8", "Insert ExpressionStatement(3750) into Block(3893) at 9", "Insert ExpressionStatement(3758) into Block(3893) at 10", "Insert ExpressionStatement(3766) into Block(3893) at 11", "Insert ExpressionStatement(3772) into Block(3893) at 12", "Insert ExpressionStatement(3780) into Block(3893) at 13", "Insert ExpressionStatement(3788) into Block(3893) at 14", "Insert ExpressionStatement(3794) into Block(3893) at 15", "Insert ExpressionStatement(3807) into Block(3893) at 16", "Insert ExpressionStatement(3814) into Block(3893) at 17", "Insert ExpressionStatement(3820) into Block(3893) at 18", "Insert ExpressionStatement(3826) into Block(3893) at 19", "Insert ExpressionStatement(3834) into Block(3893) at 20", "Insert ExpressionStatement(3840) into Block(3893) at 21", "Insert ExpressionStatement(3848) into Block(3893) at 22", "Insert ExpressionStatement(3854) into Block(3893) at 23", "Insert ExpressionStatement(3865) into Block(3893) at 24", "Insert VariableDeclarationStatement(3874) into Block(3893) at 25", "Insert ExpressionStatement(3892) into Block(3893) at 26", "Insert ExpressionStatement(3897) into Block(3898) at 0", "Insert Assignment: =(2630) into ExpressionStatement(2631) at 0", "Insert Assignment: =(2637) into ExpressionStatement(2638) at 0", "Insert Block(2649) into TryStatement(2656) at 0", "Insert CatchClause(2655) into TryStatement(2656) at 1", "Insert SimpleName: PropertiesUtil(3654) into MethodInvocation(3657) at 0", "Insert SimpleName: deepCopy(3655) into MethodInvocation(3657) at 1", "Insert SimpleName: TEST_PROPERTIES(3656) into MethodInvocation(3657) at 2", "Insert SimpleName: DriverManager(3663) into MethodInvocation(3668) at 0", "Insert SimpleName: getConnection(3664) into MethodInvocation(3668) at 1", "Insert MethodInvocation(3666) into MethodInvocation(3668) at 2", "Insert SimpleName: props(3667) into MethodInvocation(3668) at 3", "Insert SimpleType: String(3672) into VariableDeclarationStatement(3683) at 0", "Insert VariableDeclarationFragment(3682) into VariableDeclarationStatement(3683) at 1", "Insert SimpleType: PreparedStatement(3685) into VariableDeclarationStatement(3692) at 0", "Insert VariableDeclarationFragment(3691) into VariableDeclarationStatement(3692) at 1", "Insert SimpleType: ResultSet(3694) into VariableDeclarationStatement(3700) at 0", "Insert VariableDeclarationFragment(3699) into VariableDeclarationStatement(3700) at 1", "Insert MethodInvocation(3705) into ExpressionStatement(3706) at 0", "Insert MethodInvocation(3713) into ExpressionStatement(3714) at 0", "Insert MethodInvocation(3721) into ExpressionStatement(3722) at 0", "Insert MethodInvocation(3727) into ExpressionStatement(3728) at 0", "Insert MethodInvocation(3735) into ExpressionStatement(3736) at 0", "Insert MethodInvocation(3743) into ExpressionStatement(3744) at 0", "Insert MethodInvocation(3749) into ExpressionStatement(3750) at 0", "Insert MethodInvocation(3757) into ExpressionStatement(3758) at 0", "Insert MethodInvocation(3765) into ExpressionStatement(3766) at 0", "Insert MethodInvocation(3771) into ExpressionStatement(3772) at 0", "Insert MethodInvocation(3779) into ExpressionStatement(3780) at 0", "Insert MethodInvocation(3787) into ExpressionStatement(3788) at 0", "Insert MethodInvocation(3793) into ExpressionStatement(3794) at 0", "Insert Assignment: =(3806) into ExpressionStatement(3807) at 0", "Insert Assignment: =(3813) into ExpressionStatement(3814) at 0", "Insert Assignment: =(3819) into ExpressionStatement(3820) at 0", "Insert MethodInvocation(3825) into ExpressionStatement(3826) at 0", "Insert MethodInvocation(3833) into ExpressionStatement(3834) at 0", "Insert MethodInvocation(3839) into ExpressionStatement(3840) at 0", "Insert MethodInvocation(3847) into ExpressionStatement(3848) at 0", "Insert MethodInvocation(3853) into ExpressionStatement(3854) at 0", "Insert Assignment: =(3864) into ExpressionStatement(3865) at 0", "Insert SimpleType: String(3867) into VariableDeclarationStatement(3874) at 0", "Insert VariableDeclarationFragment(3873) into VariableDeclarationStatement(3874) at 1", "Insert MethodInvocation(3891) into ExpressionStatement(3892) at 0", "Insert MethodInvocation(3896) into ExpressionStatement(3897) at 0", "Insert SimpleName: query(2623) into Assignment: =(2630) at 0", "Insert InfixExpression: +(2629) into Assignment: =(2630) at 1", "Insert SimpleName: statement(2632) into Assignment: =(2637) at 0", "Insert MethodInvocation(2636) into Assignment: =(2637) at 1", "Insert ExpressionStatement(2644) into Block(2649) at 0", "Insert ExpressionStatement(2648) into Block(2649) at 1", "Insert SingleVariableDeclaration(2653) into CatchClause(2655) at 0", "Insert Block(2654) into CatchClause(2655) at 1", "Insert SimpleName: getUrl(3665) into MethodInvocation(3666) at 0", "Insert SimpleName: String(3671) into SimpleType: String(3672) at 0", "Insert SimpleName: query(3673) into VariableDeclarationFragment(3682) at 0", "Insert InfixExpression: +(3681) into VariableDeclarationFragment(3682) at 1", "Insert SimpleName: PreparedStatement(3684) into SimpleType: PreparedStatement(3685) at 0", "Insert SimpleName: statement(3686) into VariableDeclarationFragment(3691) at 0", "Insert MethodInvocation(3690) into VariableDeclarationFragment(3691) at 1", "Insert SimpleName: ResultSet(3693) into SimpleType: ResultSet(3694) at 0", "Insert SimpleName: rs(3695) into VariableDeclarationFragment(3699) at 0", "Insert MethodInvocation(3698) into VariableDeclarationFragment(3699) at 1", "Insert SimpleName: assertTrue(3701) into MethodInvocation(3705) at 0", "Insert MethodInvocation(3704) into MethodInvocation(3705) at 1", "Insert SimpleName: assertEquals(3707) into MethodInvocation(3713) at 0", "Insert MethodInvocation(3711) into MethodInvocation(3713) at 1", "Insert StringLiteral: \"000000000000001\"(3712) into MethodInvocation(3713) at 2", "Insert SimpleName: assertEquals(3715) into MethodInvocation(3721) at 0", "Insert MethodInvocation(3719) into MethodInvocation(3721) at 1", "Insert StringLiteral: \"T1\"(3720) into MethodInvocation(3721) at 2", "Insert SimpleName: assertTrue(3723) into MethodInvocation(3727) at 0", "Insert MethodInvocation(3726) into MethodInvocation(3727) at 1", "Insert SimpleName: assertEquals(3729) into MethodInvocation(3735) at 0", "Insert MethodInvocation(3733) into MethodInvocation(3735) at 1", "Insert StringLiteral: \"000000000000003\"(3734) into MethodInvocation(3735) at 2", "Insert SimpleName: assertEquals(3737) into MethodInvocation(3743) at 0", "Insert MethodInvocation(3741) into MethodInvocation(3743) at 1", "Insert StringLiteral: \"T2\"(3742) into MethodInvocation(3743) at 2", "Insert SimpleName: assertTrue(3745) into MethodInvocation(3749) at 0", "Insert MethodInvocation(3748) into MethodInvocation(3749) at 1", "Insert SimpleName: assertEquals(3751) into MethodInvocation(3757) at 0", "Insert MethodInvocation(3755) into MethodInvocation(3757) at 1", "Insert StringLiteral: \"000000000000004\"(3756) into MethodInvocation(3757) at 2", "Insert SimpleName: assertEquals(3759) into MethodInvocation(3765) at 0", "Insert MethodInvocation(3763) into MethodInvocation(3765) at 1", "Insert StringLiteral: \"T6\"(3764) into MethodInvocation(3765) at 2", "Insert SimpleName: assertTrue(3767) into MethodInvocation(3771) at 0", "Insert MethodInvocation(3770) into MethodInvocation(3771) at 1", "Insert SimpleName: assertEquals(3773) into MethodInvocation(3779) at 0", "Insert MethodInvocation(3777) into MethodInvocation(3779) at 1", "Insert StringLiteral: \"000000000000005\"(3778) into MethodInvocation(3779) at 2", "Insert SimpleName: assertEquals(3781) into MethodInvocation(3787) at 0", "Insert MethodInvocation(3785) into MethodInvocation(3787) at 1", "Insert StringLiteral: \"T3\"(3786) into MethodInvocation(3787) at 2", "Insert SimpleName: assertFalse(3789) into MethodInvocation(3793) at 0", "Insert MethodInvocation(3792) into MethodInvocation(3793) at 1", "Insert SimpleName: query(3795) into Assignment: =(3806) at 0", "Insert InfixExpression: +(3805) into Assignment: =(3806) at 1", "Insert SimpleName: statement(3808) into Assignment: =(3813) at 0", "Insert MethodInvocation(3812) into Assignment: =(3813) at 1", "Insert SimpleName: rs(3815) into Assignment: =(3819) at 0", "Insert MethodInvocation(3818) into Assignment: =(3819) at 1", "Insert SimpleName: assertTrue(3821) into MethodInvocation(3825) at 0", "Insert MethodInvocation(3824) into MethodInvocation(3825) at 1", "Insert SimpleName: assertEquals(3827) into MethodInvocation(3833) at 0", "Insert MethodInvocation(3831) into MethodInvocation(3833) at 1", "Insert StringLiteral: \"C2\"(3832) into MethodInvocation(3833) at 2", "Insert SimpleName: assertTrue(3835) into MethodInvocation(3839) at 0", "Insert MethodInvocation(3838) into MethodInvocation(3839) at 1", "Insert SimpleName: assertEquals(3841) into MethodInvocation(3847) at 0", "Insert MethodInvocation(3845) into MethodInvocation(3847) at 1", "Insert StringLiteral: \"C4\"(3846) into MethodInvocation(3847) at 2", "Insert SimpleName: assertFalse(3849) into MethodInvocation(3853) at 0", "Insert MethodInvocation(3852) into MethodInvocation(3853) at 1", "Insert SimpleName: rs(3855) into Assignment: =(3864) at 0", "Insert MethodInvocation(3863) into Assignment: =(3864) at 1", "Insert SimpleName: String(3866) into SimpleType: String(3867) at 0", "Insert SimpleName: plan(3868) into VariableDeclarationFragment(3873) at 0", "Insert MethodInvocation(3872) into VariableDeclarationFragment(3873) at 1", "Insert SimpleName: assertTrue(3875) into MethodInvocation(3891) at 0", "Insert InfixExpression: +(3883) into MethodInvocation(3891) at 1", "Insert MethodInvocation(3890) into MethodInvocation(3891) at 2", "Insert SimpleName: conn(3894) into MethodInvocation(3896) at 0", "Insert SimpleName: close(3895) into MethodInvocation(3896) at 1", "Insert InfixExpression: +(403) into ArrayInitializer(404) at 4", "Insert InfixExpression: +(523) into ArrayInitializer(524) at 4", "Insert InfixExpression: +(661) into ArrayInitializer(662) at 4", "Insert StringLiteral: \"SELECT \\\"item_id\\\", name FROM \"(2624) into InfixExpression: +(2629) at 0", "Insert SimpleName: JOIN_ITEM_TABLE_FULL_NAME(2625) into InfixExpression: +(2629) at 1", "Insert StringLiteral: \" WHERE \\\"item_id\\\" < (SELECT \\\"item_id\\\" FROM \"(2626) into InfixExpression: +(2629) at 2", "Insert SimpleName: JOIN_ORDER_TABLE_FULL_NAME(2627) into InfixExpression: +(2629) at 3", "Insert StringLiteral: \")\"(2628) into InfixExpression: +(2629) at 4", "Insert SimpleName: conn(2633) into MethodInvocation(2636) at 0", "Insert SimpleName: prepareStatement(2634) into MethodInvocation(2636) at 1", "Insert SimpleName: query(2635) into MethodInvocation(2636) at 2", "Insert Assignment: =(2643) into ExpressionStatement(2644) at 0", "Insert MethodInvocation(2647) into ExpressionStatement(2648) at 0", "Insert SimpleType: SQLException(2651) into SingleVariableDeclaration(2653) at 0", "Insert SimpleName: e(2652) into SingleVariableDeclaration(2653) at 1", "Insert StringLiteral: \"SELECT \\\"order_id\\\", name FROM \"(3674) into InfixExpression: +(3681) at 0", "Insert SimpleName: JOIN_ORDER_TABLE_FULL_NAME(3675) into InfixExpression: +(3681) at 1", "Insert StringLiteral: \" o JOIN \"(3676) into InfixExpression: +(3681) at 2", "Insert SimpleName: JOIN_ITEM_TABLE_FULL_NAME(3677) into InfixExpression: +(3681) at 3", "Insert StringLiteral: \" i ON o.\\\"item_id\\\" = i.\\\"item_id\\\" WHERE quantity = (SELECT max(quantity) FROM \"(3678) into InfixExpression: +(3681) at 4", "Insert SimpleName: JOIN_ORDER_TABLE_FULL_NAME(3679) into InfixExpression: +(3681) at 5", "Insert StringLiteral: \" q WHERE o.\\\"item_id\\\" = q.\\\"item_id\\\")\"(3680) into InfixExpression: +(3681) at 6", "Insert SimpleName: conn(3687) into MethodInvocation(3690) at 0", "Insert SimpleName: prepareStatement(3688) into MethodInvocation(3690) at 1", "Insert SimpleName: query(3689) into MethodInvocation(3690) at 2", "Insert SimpleName: statement(3696) into MethodInvocation(3698) at 0", "Insert SimpleName: executeQuery(3697) into MethodInvocation(3698) at 1", "Insert SimpleName: rs(3702) into MethodInvocation(3704) at 0", "Insert SimpleName: next(3703) into MethodInvocation(3704) at 1", "Insert SimpleName: rs(3708) into MethodInvocation(3711) at 0", "Insert SimpleName: getString(3709) into MethodInvocation(3711) at 1", "Insert NumberLiteral: 1(3710) into MethodInvocation(3711) at 2", "Insert SimpleName: rs(3716) into MethodInvocation(3719) at 0", "Insert SimpleName: getString(3717) into MethodInvocation(3719) at 1", "Insert NumberLiteral: 2(3718) into MethodInvocation(3719) at 2", "Insert SimpleName: rs(3724) into MethodInvocation(3726) at 0", "Insert SimpleName: next(3725) into MethodInvocation(3726) at 1", "Insert SimpleName: rs(3730) into MethodInvocation(3733) at 0", "Insert SimpleName: getString(3731) into MethodInvocation(3733) at 1", "Insert NumberLiteral: 1(3732) into MethodInvocation(3733) at 2", "Insert SimpleName: rs(3738) into MethodInvocation(3741) at 0", "Insert SimpleName: getString(3739) into MethodInvocation(3741) at 1", "Insert NumberLiteral: 2(3740) into MethodInvocation(3741) at 2", "Insert SimpleName: rs(3746) into MethodInvocation(3748) at 0", "Insert SimpleName: next(3747) into MethodInvocation(3748) at 1", "Insert SimpleName: rs(3752) into MethodInvocation(3755) at 0", "Insert SimpleName: getString(3753) into MethodInvocation(3755) at 1", "Insert NumberLiteral: 1(3754) into MethodInvocation(3755) at 2", "Insert SimpleName: rs(3760) into MethodInvocation(3763) at 0", "Insert SimpleName: getString(3761) into MethodInvocation(3763) at 1", "Insert NumberLiteral: 2(3762) into MethodInvocation(3763) at 2", "Insert SimpleName: rs(3768) into MethodInvocation(3770) at 0", "Insert SimpleName: next(3769) into MethodInvocation(3770) at 1", "Insert SimpleName: rs(3774) into MethodInvocation(3777) at 0", "Insert SimpleName: getString(3775) into MethodInvocation(3777) at 1", "Insert NumberLiteral: 1(3776) into MethodInvocation(3777) at 2", "Insert SimpleName: rs(3782) into MethodInvocation(3785) at 0", "Insert SimpleName: getString(3783) into MethodInvocation(3785) at 1", "Insert NumberLiteral: 2(3784) into MethodInvocation(3785) at 2", "Insert SimpleName: rs(3790) into MethodInvocation(3792) at 0", "Insert SimpleName: next(3791) into MethodInvocation(3792) at 1", "Insert StringLiteral: \"SELECT name from \"(3796) into InfixExpression: +(3805) at 0", "Insert SimpleName: JOIN_CUSTOMER_TABLE_FULL_NAME(3797) into InfixExpression: +(3805) at 1", "Insert StringLiteral: \" WHERE \\\"customer_id\\\" IN (SELECT \\\"customer_id\\\" FROM \"(3798) into InfixExpression: +(3805) at 2", "Insert SimpleName: JOIN_ITEM_TABLE_FULL_NAME(3799) into InfixExpression: +(3805) at 3", "Insert StringLiteral: \" i JOIN \"(3800) into InfixExpression: +(3805) at 4", "Insert SimpleName: JOIN_ORDER_TABLE_FULL_NAME(3801) into InfixExpression: +(3805) at 5", "Insert StringLiteral: \" o ON o.\\\"item_id\\\" = i.\\\"item_id\\\" WHERE i.name = 'T2' OR quantity > (SELECT avg(quantity) FROM \"(3802) into InfixExpression: +(3805) at 6", "Insert SimpleName: JOIN_ORDER_TABLE_FULL_NAME(3803) into InfixExpression: +(3805) at 7", "Insert StringLiteral: \" q WHERE o.\\\"item_id\\\" = q.\\\"item_id\\\"))\"(3804) into InfixExpression: +(3805) at 8", "Insert SimpleName: conn(3809) into MethodInvocation(3812) at 0", "Insert SimpleName: prepareStatement(3810) into MethodInvocation(3812) at 1", "Insert SimpleName: query(3811) into MethodInvocation(3812) at 2", "Insert SimpleName: statement(3816) into MethodInvocation(3818) at 0", "Insert SimpleName: executeQuery(3817) into MethodInvocation(3818) at 1", "Insert SimpleName: rs(3822) into MethodInvocation(3824) at 0", "Insert SimpleName: next(3823) into MethodInvocation(3824) at 1", "Insert SimpleName: rs(3828) into MethodInvocation(3831) at 0", "Insert SimpleName: getString(3829) into MethodInvocation(3831) at 1", "Insert NumberLiteral: 1(3830) into MethodInvocation(3831) at 2", "Insert SimpleName: rs(3836) into MethodInvocation(3838) at 0", "Insert SimpleName: next(3837) into MethodInvocation(3838) at 1", "Insert SimpleName: rs(3842) into MethodInvocation(3845) at 0", "Insert SimpleName: getString(3843) into MethodInvocation(3845) at 1", "Insert NumberLiteral: 1(3844) into MethodInvocation(3845) at 2", "Insert SimpleName: rs(3850) into MethodInvocation(3852) at 0", "Insert SimpleName: next(3851) into MethodInvocation(3852) at 1", "Insert MethodInvocation(3858) into MethodInvocation(3863) at 0", "Insert SimpleName: executeQuery(3859) into MethodInvocation(3863) at 1", "Insert InfixExpression: +(3862) into MethodInvocation(3863) at 2", "Insert SimpleName: QueryUtil(3869) into MethodInvocation(3872) at 0", "Insert SimpleName: getExplainPlan(3870) into MethodInvocation(3872) at 1", "Insert SimpleName: rs(3871) into MethodInvocation(3872) at 2", "Insert StringLiteral: \"\\\"\"(3876) into InfixExpression: +(3883) at 0", "Insert SimpleName: plan(3877) into InfixExpression: +(3883) at 1", "Insert StringLiteral: \"\\\" does not match \\\"\"(3878) into InfixExpression: +(3883) at 2", "Insert ArrayAccess(3881) into InfixExpression: +(3883) at 3", "Insert StringLiteral: \"\\\"\"(3882) into InfixExpression: +(3883) at 4", "Insert SimpleName: Pattern(3884) into MethodInvocation(3890) at 0", "Insert SimpleName: matches(3885) into MethodInvocation(3890) at 1", "Insert ArrayAccess(3888) into MethodInvocation(3890) at 2", "Insert SimpleName: plan(3889) into MethodInvocation(3890) at 3", "Insert StringLiteral: \"CLIENT PARALLEL 1-WAY FULL SCAN OVER \"(381) into InfixExpression: +(403) at 0", "Insert SimpleName: JOIN_CUSTOMER_TABLE_DISPLAY_NAME(382) into InfixExpression: +(403) at 1", "Insert StringLiteral: \"\\n\"(383) into InfixExpression: +(403) at 2", "Insert StringLiteral: \"    SKIP-SCAN-JOIN TABLE 0\\n\"(384) into InfixExpression: +(403) at 3", "Insert StringLiteral: \"        CLIENT PARALLEL 1-WAY FULL SCAN OVER \"(385) into InfixExpression: +(403) at 4", "Insert SimpleName: JOIN_ITEM_TABLE_DISPLAY_NAME(386) into InfixExpression: +(403) at 5", "Insert StringLiteral: \"\\n\"(387) into InfixExpression: +(403) at 6", "Insert StringLiteral: \"            SERVER AGGREGATE INTO DISTINCT ROWS BY \\\\[O.customer_id\\\\]\\n\"(388) into InfixExpression: +(403) at 7", "Insert StringLiteral: \"        CLIENT MERGE SORT\\n\"(389) into InfixExpression: +(403) at 8", "Insert StringLiteral: \"            PARALLEL INNER-JOIN TABLE 0\\n\"(390) into InfixExpression: +(403) at 9", "Insert StringLiteral: \"                CLIENT PARALLEL 1-WAY FULL SCAN OVER \"(391) into InfixExpression: +(403) at 10", "Insert SimpleName: JOIN_ORDER_TABLE_DISPLAY_NAME(392) into InfixExpression: +(403) at 11", "Insert StringLiteral: \"\\n\"(393) into InfixExpression: +(403) at 12", "Insert StringLiteral: \"            PARALLEL LEFT-JOIN TABLE 1\\\\(DELAYED EVALUATION\\\\)\\n\"(394) into InfixExpression: +(403) at 13", "Insert StringLiteral: \"                CLIENT PARALLEL 1-WAY FULL SCAN OVER \"(395) into InfixExpression: +(403) at 14", "Insert SimpleName: JOIN_ORDER_TABLE_DISPLAY_NAME(396) into InfixExpression: +(403) at 15", "Insert StringLiteral: \"\\n\"(397) into InfixExpression: +(403) at 16", "Insert StringLiteral: \"                    SERVER AGGREGATE INTO DISTINCT ROWS BY \\\\[item_id\\\\]\\n\"(398) into InfixExpression: +(403) at 17", "Insert StringLiteral: \"                CLIENT MERGE SORT\\n\"(399) into InfixExpression: +(403) at 18", "Insert StringLiteral: \"            DYNAMIC SERVER FILTER BY item_id BETWEEN MIN/MAX OF \\\\(O.item_id\\\\)\\n\"(400) into InfixExpression: +(403) at 19", "Insert StringLiteral: \"            AFTER-JOIN SERVER FILTER BY \\\\(I.NAME = 'T2' OR O.QUANTITY > \\\\$\\\\d+.\\\\$\\\\d+\\\\)\\n\"(401) into InfixExpression: +(403) at 20", "Insert StringLiteral: \"    DYNAMIC SERVER FILTER BY customer_id IN \\\\(\\\\$\\\\d+.\\\\$\\\\d+\\\\)\"(402) into InfixExpression: +(403) at 21", "Insert StringLiteral: \"CLIENT PARALLEL 1-WAY FULL SCAN OVER \"(502) into InfixExpression: +(523) at 0", "Insert SimpleName: JOIN_SCHEMA(503) into InfixExpression: +(523) at 1", "Insert StringLiteral: \".idx_customer\\n\"(504) into InfixExpression: +(523) at 2", "Insert StringLiteral: \"    PARALLEL SEMI-JOIN TABLE 0 \\\\(SKIP MERGE\\\\)\\n\"(505) into InfixExpression: +(523) at 3", "Insert StringLiteral: \"        CLIENT PARALLEL 1-WAY FULL SCAN OVER \"(506) into InfixExpression: +(523) at 4", "Insert SimpleName: JOIN_SCHEMA(507) into InfixExpression: +(523) at 5", "Insert StringLiteral: \".idx_item\\n\"(508) into InfixExpression: +(523) at 6", "Insert StringLiteral: \"            SERVER FILTER BY FIRST KEY ONLY\\n\"(509) into InfixExpression: +(523) at 7", "Insert StringLiteral: \"            SERVER AGGREGATE INTO DISTINCT ROWS BY \\\\[O.customer_id\\\\]\\n\"(510) into InfixExpression: +(523) at 8", "Insert StringLiteral: \"        CLIENT MERGE SORT\\n\"(511) into InfixExpression: +(523) at 9", "Insert StringLiteral: \"            PARALLEL INNER-JOIN TABLE 0\\n\"(512) into InfixExpression: +(523) at 10", "Insert StringLiteral: \"                CLIENT PARALLEL 1-WAY FULL SCAN OVER \"(513) into InfixExpression: +(523) at 11", "Insert SimpleName: JOIN_ORDER_TABLE_DISPLAY_NAME(514) into InfixExpression: +(523) at 12", "Insert StringLiteral: \"\\n\"(515) into InfixExpression: +(523) at 13", "Insert StringLiteral: \"            PARALLEL LEFT-JOIN TABLE 1\\\\(DELAYED EVALUATION\\\\)\\n\"(516) into InfixExpression: +(523) at 14", "Insert StringLiteral: \"                CLIENT PARALLEL 1-WAY FULL SCAN OVER \"(517) into InfixExpression: +(523) at 15", "Insert SimpleName: JOIN_ORDER_TABLE_DISPLAY_NAME(518) into InfixExpression: +(523) at 16", "Insert StringLiteral: \"\\n\"(519) into InfixExpression: +(523) at 17", "Insert StringLiteral: \"                    SERVER AGGREGATE INTO DISTINCT ROWS BY \\\\[item_id\\\\]\\n\"(520) into InfixExpression: +(523) at 18", "Insert StringLiteral: \"                CLIENT MERGE SORT\\n\"(521) into InfixExpression: +(523) at 19", "Insert StringLiteral: \"            AFTER-JOIN SERVER FILTER BY \\\\(I.0:NAME = 'T2' OR O.QUANTITY > \\\\$\\\\d+.\\\\$\\\\d+\\\\)\"(522) into InfixExpression: +(523) at 20", "Insert StringLiteral: \"CLIENT PARALLEL 1-WAY RANGE SCAN OVER \"(635) into InfixExpression: +(661) at 0", "Insert QualifiedName: MetaDataUtil.LOCAL_INDEX_TABLE_PREFIX(636) into InfixExpression: +(661) at 1", "Insert SimpleName: JOIN_CUSTOMER_TABLE_DISPLAY_NAME(637) into InfixExpression: +(661) at 2", "Insert StringLiteral: \" \\\\[-32768\\\\]\\n\"(638) into InfixExpression: +(661) at 3", "Insert StringLiteral: \"CLIENT MERGE SORT\\n\"(639) into InfixExpression: +(661) at 4", "Insert StringLiteral: \"    PARALLEL SEMI-JOIN TABLE 0 \\\\(SKIP MERGE\\\\)\\n\"(640) into InfixExpression: +(661) at 5", "Insert StringLiteral: \"        CLIENT PARALLEL 1-WAY RANGE SCAN OVER \"(641) into InfixExpression: +(661) at 6", "Insert QualifiedName: MetaDataUtil.LOCAL_INDEX_TABLE_PREFIX(642) into InfixExpression: +(661) at 7", "Insert SimpleName: JOIN_ITEM_TABLE_DISPLAY_NAME(643) into InfixExpression: +(661) at 8", "Insert StringLiteral: \" \\\\[-32768\\\\]\\n\"(644) into InfixExpression: +(661) at 9", "Insert StringLiteral: \"            SERVER FILTER BY FIRST KEY ONLY\\n\"(645) into InfixExpression: +(661) at 10", "Insert StringLiteral: \"            SERVER AGGREGATE INTO DISTINCT ROWS BY \\\\[O.customer_id\\\\]\\n\"(646) into InfixExpression: +(661) at 11", "Insert StringLiteral: \"        CLIENT MERGE SORT\\n\"(647) into InfixExpression: +(661) at 12", "Insert StringLiteral: \"            PARALLEL INNER-JOIN TABLE 0\\n\"(648) into InfixExpression: +(661) at 13", "Insert StringLiteral: \"                CLIENT PARALLEL 1-WAY FULL SCAN OVER \"(649) into InfixExpression: +(661) at 14", "Insert SimpleName: JOIN_ORDER_TABLE_DISPLAY_NAME(650) into InfixExpression: +(661) at 15", "Insert StringLiteral: \"\\n\"(651) into InfixExpression: +(661) at 16", "Insert StringLiteral: \"            PARALLEL LEFT-JOIN TABLE 1\\\\(DELAYED EVALUATION\\\\)\\n\"(652) into InfixExpression: +(661) at 17", "Insert StringLiteral: \"                CLIENT PARALLEL 1-WAY FULL SCAN OVER \"(653) into InfixExpression: +(661) at 18", "Insert SimpleName: JOIN_ORDER_TABLE_DISPLAY_NAME(654) into InfixExpression: +(661) at 19", "Insert StringLiteral: \"\\n\"(655) into InfixExpression: +(661) at 20", "Insert StringLiteral: \"                    SERVER AGGREGATE INTO DISTINCT ROWS BY \\\\[item_id\\\\]\\n\"(656) into InfixExpression: +(661) at 21", "Insert StringLiteral: \"                CLIENT MERGE SORT\\n\"(657) into InfixExpression: +(661) at 22", "Insert StringLiteral: \"            DYNAMIC SERVER FILTER BY item_id BETWEEN MIN/MAX OF \\\\(O.item_id\\\\)\\n\"(658) into InfixExpression: +(661) at 23", "Insert StringLiteral: \"            AFTER-JOIN SERVER FILTER BY \\\\(I.0:NAME = 'T2' OR O.QUANTITY > \\\\$\\\\d+.\\\\$\\\\d+\\\\)\\n\"(659) into InfixExpression: +(661) at 24", "Insert StringLiteral: \"    DYNAMIC SERVER FILTER BY customer_id IN \\\\(\\\\$\\\\d+.\\\\$\\\\d+\\\\)\"(660) into InfixExpression: +(661) at 25", "Insert SimpleName: rs(2639) into Assignment: =(2643) at 0", "Insert MethodInvocation(2642) into Assignment: =(2643) at 1", "Insert SimpleName: fail(2645) into MethodInvocation(2647) at 0", "Insert StringLiteral: \"Should have got Exception.\"(2646) into MethodInvocation(2647) at 1", "Insert SimpleName: SQLException(2650) into SimpleType: SQLException(2651) at 0", "Insert SimpleName: conn(3856) into MethodInvocation(3858) at 0", "Insert SimpleName: createStatement(3857) into MethodInvocation(3858) at 1", "Insert StringLiteral: \"EXPLAIN \"(3860) into InfixExpression: +(3862) at 0", "Insert SimpleName: query(3861) into InfixExpression: +(3862) at 1", "Insert SimpleName: plans(3879) into ArrayAccess(3881) at 0", "Insert NumberLiteral: 4(3880) into ArrayAccess(3881) at 1", "Insert SimpleName: plans(3886) into ArrayAccess(3888) at 0", "Insert NumberLiteral: 4(3887) into ArrayAccess(3888) at 1", "Insert SimpleName: statement(2640) into MethodInvocation(2642) at 0", "Insert SimpleName: executeQuery(2641) into MethodInvocation(2642) at 1"]}}, {"ExpressionCompiler_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 38", "MOV ImportDeclaration to CompilationUnit at 70"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.phoenix.parse.InParseNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.collect.Lists", "DEL ImportDeclaration"]}]}}, {"ExpressionCompiler_diff": {"operations": ["Move ImportDeclaration(97) into CompilationUnit(5603) at 38", "Move ImportDeclaration(131) into CompilationUnit(5603) at 70", "Delete QualifiedName: org.apache.phoenix.parse.InParseNode(134)", "Delete ImportDeclaration(135)", "Delete QualifiedName: com.google.common.collect.Lists(204)", "Delete ImportDeclaration(205)"]}}, {"StatementNormalizer_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 13"]}, {"root": "INS Block to MethodDeclaration at 7", "operations": ["INS Block to MethodDeclaration at 7"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1", "MOV IfStatement to Block at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.phoenix.parse.SubqueryParseNode", "DEL ImportDeclaration"]}, {"root": "DEL Block", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: rhs", "DEL SimpleName: node", "DEL InstanceofExpression", "DEL ExpressionStatement", "DEL SimpleType: ParseNode", "DEL ExpressionStatement", "DEL SimpleName: normNodes", "DEL NumberLiteral: 0", "DEL SimpleName: SubqueryParseNode", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: get", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL NumberLiteral: 2", "DEL ExpressionStatement", "DEL SimpleName: SelectStatement", "DEL SimpleType: ParseNode", "DEL SimpleName: nodes", "DEL SimpleName: add", "DEL SimpleName: limit", "DEL MethodInvocation", "DEL SimpleName: normNodes", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: subquery", "DEL SimpleName: newArrayListWithExpectedSize", "DEL SimpleName: rhs", "DEL SimpleName: ParseNode", "DEL SimpleName: SubqueryParseNode", "DEL SimpleName: rhs", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: get", "DEL SimpleName: rhs", "DEL SimpleName: rhs", "DEL ExpressionStatement", "DEL NumberLiteral: 2", "DEL VariableDeclarationStatement", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: literal", "DEL NumberLiteral: 1", "DEL SimpleName: getSelectNode", "DEL SimpleType: SubqueryParseNode", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL VariableDeclarationStatement", "DEL SimpleName: get", "DEL SimpleName: normNodes", "DEL MethodInvocation", "DEL SimpleName: select", "DEL BooleanLiteral: true", "DEL SimpleName: node", "DEL SimpleName: List", "DEL SimpleName: NODE_FACTORY", "DEL MethodInvocation", "DEL SimpleName: getFilterOp", "DEL VariableDeclarationStatement", "DEL Block", "DEL Block", "DEL SimpleName: get", "DEL SimpleName: ParseNode", "DEL ExpressionStatement", "DEL ParameterizedType: List<ParseNode>", "DEL SimpleName: subquery", "DEL SimpleType: SubqueryParseNode", "DEL Assignment: =", "DEL SimpleType: List", "DEL ParenthesizedExpression", "DEL SimpleName: NODE_FACTORY", "DEL SimpleName: NODE_FACTORY", "DEL MethodInvocation", "DEL SimpleName: nodes", "DEL SimpleName: nodes", "DEL SimpleName: subquery", "DEL SimpleType: SelectStatement", "DEL SimpleName: nodes", "DEL SimpleName: Lists", "DEL NumberLiteral: 0", "DEL SimpleName: nodes", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: subquery", "DEL SimpleName: NODE_FACTORY", "DEL MethodInvocation", "DEL SimpleName: add", "DEL Assignment: =", "DEL SimpleName: NODE_FACTORY", "DEL SimpleName: subquery", "DEL SimpleName: comparison", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: normNodes"]}]}}, {"StatementNormalizer_diff": {"operations": ["Move ImportDeclaration(49) into CompilationUnit(913) at 13", "Insert Block(679) into MethodDeclaration(680) at 7", "Move IfStatement(675) into Block(679) at 0", "Move ReturnStatement(775) into Block(679) at 1", "Delete QualifiedName: org.apache.phoenix.parse.SubqueryParseNode(36)", "Delete ImportDeclaration(37)", "Delete SimpleName: ParseNode(676)", "Delete SimpleType: ParseNode(677)", "Delete SimpleName: rhs(678)", "Delete SimpleName: nodes(679)", "Delete SimpleName: get(680)", "Delete NumberLiteral: 1(681)", "Delete MethodInvocation(682)", "Delete VariableDeclarationFragment(683)", "Delete VariableDeclarationStatement(684)", "Delete SimpleName: rhs(685)", "Delete SimpleName: SubqueryParseNode(686)", "Delete SimpleType: SubqueryParseNode(687)", "Delete InstanceofExpression(688)", "Delete SimpleName: SelectStatement(689)", "Delete SimpleType: SelectStatement(690)", "Delete SimpleName: subquery(691)", "Delete SimpleName: SubqueryParseNode(692)", "Delete SimpleType: SubqueryParseNode(693)", "Delete SimpleName: rhs(694)", "Delete CastExpression(695)", "Delete ParenthesizedExpression(696)", "Delete SimpleName: getSelectNode(697)", "Delete MethodInvocation(698)", "Delete VariableDeclarationFragment(699)", "Delete VariableDeclarationStatement(700)", "Delete SimpleName: subquery(701)", "Delete SimpleName: NODE_FACTORY(702)", "Delete SimpleName: select(703)", "Delete SimpleName: subquery(704)", "Delete SimpleName: NODE_FACTORY(705)", "Delete SimpleName: limit(706)", "Delete SimpleName: NODE_FACTORY(707)", "Delete SimpleName: literal(708)", "Delete NumberLiteral: 2(709)", "Delete MethodInvocation(710)", "Delete MethodInvocation(711)", "Delete MethodInvocation(712)", "Delete Assignment: =(713)", "Delete ExpressionStatement(714)", "Delete SimpleName: rhs(715)", "Delete SimpleName: NODE_FACTORY(716)", "Delete SimpleName: subquery(717)", "Delete SimpleName: subquery(718)", "Delete BooleanLiteral: true(719)", "Delete MethodInvocation(720)", "Delete Assignment: =(721)", "Delete ExpressionStatement(722)", "Delete SimpleName: List(723)", "Delete SimpleType: List(724)", "Delete SimpleName: ParseNode(725)", "Delete SimpleType: ParseNode(726)", "Delete ParameterizedType: List<ParseNode>(727)", "Delete SimpleName: normNodes(728)", "Delete SimpleName: Lists(729)", "Delete SimpleName: newArrayListWithExpectedSize(730)", "Delete NumberLiteral: 2(731)", "Delete MethodInvocation(732)", "Delete VariableDeclarationFragment(733)", "Delete VariableDeclarationStatement(734)", "Delete SimpleName: normNodes(735)", "Delete SimpleName: add(736)", "Delete SimpleName: nodes(737)", "Delete SimpleName: get(738)", "Delete NumberLiteral: 0(739)", "Delete MethodInvocation(740)", "Delete MethodInvocation(741)", "Delete ExpressionStatement(742)", "Delete SimpleName: normNodes(743)", "Delete SimpleName: add(744)", "Delete SimpleName: rhs(745)", "Delete MethodInvocation(746)", "Delete ExpressionStatement(747)", "Delete SimpleName: nodes(748)", "Delete SimpleName: normNodes(749)", "Delete Assignment: =(750)", "Delete ExpressionStatement(751)", "Delete SimpleName: node(752)", "Delete SimpleName: NODE_FACTORY(753)", "Delete SimpleName: comparison(754)", "Delete SimpleName: node(755)", "Delete SimpleName: getFilterOp(756)", "Delete MethodInvocation(757)", "Delete SimpleName: nodes(758)", "Delete SimpleName: get(759)", "Delete NumberLiteral: 0(760)", "Delete MethodInvocation(761)", "Delete SimpleName: nodes(762)", "Delete SimpleName: get(763)", "Delete NumberLiteral: 1(764)", "Delete MethodInvocation(765)", "Delete MethodInvocation(766)", "Delete Assignment: =(767)", "Delete ExpressionStatement(768)", "Delete Block(769)", "Delete IfStatement(770)", "Delete Block(776)"]}}, {"SubqueryRewriter_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS SimpleName: aliasedNodes to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: tableNode to MethodInvocation at 3", "INS SimpleName: NODE_FACTORY to MethodInvocation at 0", "INS SimpleName: JoinConditionExtractor to SimpleType: JoinConditionExtractor at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: subquery to MethodInvocation at 2", "INS SimpleName: aliasedNode to MethodInvocation at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleType: AliasedNode to SingleVariableDeclaration at 0", "INS SimpleName: l to MethodInvocation at 0", "INS InstanceofExpression to ParenthesizedExpression at 0", "INS SimpleName: get to MethodInvocation at 1", "INS ParameterizedType: List<ParseNode> to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to MethodInvocation at 3", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: List to SimpleType: List at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS PrefixExpression: ! to InfixExpression: || at 1", "INS SimpleName: AliasedNode to SimpleType: AliasedNode at 0", "INS VariableDeclarationStatement to Block at 19", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: subqueryNode to VariableDeclarationFragment at 0", "INS SimpleName: aliasedNode to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 21", "INS VariableDeclarationStatement to Block at 9", "INS SimpleName: l to Assignment: = at 0", "INS SimpleName: getFilterOp to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: accept to MethodInvocation at 1", "INS SimpleType: AliasedNode to ParameterizedType: List<AliasedNode> at 1", "INS SimpleName: getSelectNode to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS NullLiteral to Assignment: = at 1", "INS SimpleName: rhsTable to VariableDeclarationFragment at 0", "INS SimpleName: resolver to ClassInstanceCreation at 2", "INS SimpleName: aliasedNode to MethodInvocation at 0", "INS SimpleType: ParseNode to ParameterizedType: List<ParseNode> at 1", "INS SimpleName: subquery to MethodInvocation at 3", "INS SimpleName: NODE_FACTORY to MethodInvocation at 0", "INS SimpleName: NODE_FACTORY to MethodInvocation at 0", "INS ThrowStatement to Block at 0", "INS SimpleType: SubqueryParseNode to VariableDeclarationStatement at 0", "INS SimpleName: limit to MethodInvocation at 1", "INS BooleanLiteral: true to MethodInvocation at 3", "INS SimpleName: groupbyNodes to VariableDeclarationFragment at 0", "INS SimpleName: node to InfixExpression: == at 1", "INS SimpleName: nodes to MethodInvocation at 0", "INS SimpleName: createTempAlias to MethodInvocation at 1", "INS SimpleType: ComparisonParseNode to SingleVariableDeclaration at 0", "INS SimpleName: getAdditionalSelectNodes to MethodInvocation at 1", "INS SimpleName: NODE_FACTORY to MethodInvocation at 0", "INS SimpleName: AliasedNode to SimpleType: AliasedNode at 0", "INS SimpleName: selectNodes to VariableDeclarationFragment at 0", "INS MethodInvocation to InfixExpression: + at 0", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS SimpleName: SubqueryParseNode to SimpleType: SubqueryParseNode at 0", "INS SimpleName: conditionExtractor to MethodInvocation at 0", "INS SimpleName: aliasedNodes to EnhancedForStatement at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: l to MethodInvocation at 0", "INS SimpleType: ParseNode to ParameterizedType: List<ParseNode> at 1", "INS SimpleName: additionalSelectNodes to MethodInvocation at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: NODE_FACTORY to MethodInvocation at 0", "INS SimpleName: ComparisonParseNode to SimpleType: ComparisonParseNode at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: NODE_FACTORY to MethodInvocation at 0", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: ParseNodeFactory to MethodInvocation at 0", "INS SimpleName: rowValueConstructor to MethodInvocation at 1", "INS SimpleName: getNode to MethodInvocation at 1", "INS SimpleName: NODE_FACTORY to MethodInvocation at 0", "INS NullLiteral to MethodInvocation at 4", "INS InfixExpression: == to ConditionalExpression at 0", "INS SimpleName: NODE_FACTORY to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS ParameterizedType: List<AliasedNode> to VariableDeclarationStatement at 0", "INS SimpleName: secondChild to VariableDeclarationFragment at 0", "INS SimpleName: add to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: newArrayListWithExpectedSize to MethodInvocation at 2", "INS SimpleName: conditionExtractor to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 5", "INS NullLiteral to ConditionalExpression at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: l to SuperMethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: ParseNode to VariableDeclarationStatement at 0", "INS SimpleName: secondChild to InstanceofExpression at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: NODE_FACTORY to MethodInvocation at 0", "INS Block to EnhancedForStatement at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: add to MethodInvocation at 1", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS SimpleType: SQLException to MethodDeclaration at 6", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleName: subquery to Assignment: = at 0", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: comparison to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 22", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS SuperMethodInvocation to ReturnStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS Block to IfStatement at 1", "INS Block to IfStatement at 2", "INS SimpleName: subqueryNode to MethodInvocation at 0", "INS SimpleName: secondChild to CastExpression at 1", "INS SimpleName: subquery to MethodInvocation at 1", "INS ExpressionStatement to Block at 18", "INS SimpleName: aliasedNode to MethodInvocation at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleName: column to MethodInvocation at 1", "INS SimpleName: SubqueryParseNode to SimpleType: SubqueryParseNode at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to ConditionalExpression at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: node to SuperMethodInvocation at 1", "INS SimpleName: where to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: Lists to MethodInvocation at 0", "INS SimpleType: JoinType to VariableDeclarationStatement at 0", "INS SimpleType: SubqueryParseNode to InstanceofExpression at 1", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS SimpleName: AliasedNode to SimpleType: AliasedNode at 0", "INS SimpleName: newArrayList to MethodInvocation at 1", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: createTempAlias to MethodInvocation at 1", "INS SimpleName: groupbyNodes to MethodInvocation at 5", "INS VariableDeclarationStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: ret to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS VariableDeclarationStatement to Block at 13", "INS ReturnStatement to Block at 25", "INS QualifiedName: JoinType.Inner to ConditionalExpression at 1", "INS SimpleName: visitLeave to SuperMethodInvocation at 0", "INS SimpleName: Lists to MethodInvocation at 0", "INS SimpleName: rhsNode to Assignment: = at 0", "INS SimpleName: where to MethodInvocation at 4", "INS ReturnStatement to Block at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleType: ParseNode to VariableDeclarationStatement at 0", "INS Block to IfStatement at 1", "INS InfixExpression: == to ConditionalExpression at 0", "INS VariableDeclarationStatement to Block at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS EnhancedForStatement to Block at 1", "INS SimpleName: NODE_FACTORY to MethodInvocation at 0", "INS SimpleName: onNode to MethodInvocation at 5", "INS SimpleName: subqueryNode to Assignment: = at 0", "INS ExpressionStatement to Block at 14", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: aliasedNodes to MethodInvocation at 0", "INS SimpleName: JoinType to SimpleType: JoinType at 0", "INS ExpressionStatement to Block at 3", "INS SimpleType: List to ParameterizedType: List<AliasedNode> at 0", "INS SimpleName: selectNodes to MethodInvocation at 0", "INS SimpleName: NODE_FACTORY to MethodInvocation at 0", "INS SimpleType: ParseNode to MethodDeclaration at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: AliasedNode to ParameterizedType: List<AliasedNode> at 1", "INS SimpleType: ParseNode to VariableDeclarationStatement at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS SimpleName: subqueryNode to MethodInvocation at 3", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: ParseNode to MethodInvocation at 1", "INS SimpleType: AliasedNode to SingleVariableDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS IfStatement to Block at 24", "INS ParameterizedType: List<AliasedNode> to VariableDeclarationStatement at 0", "INS SimpleName: join to MethodInvocation at 1", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: select to MethodInvocation at 1", "INS SimpleName: l to SuperMethodInvocation at 2", "INS SuperMethodInvocation to ReturnStatement at 0", "INS SimpleName: AliasedNode to SimpleType: AliasedNode at 0", "INS SimpleType: JoinConditionExtractor to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 2", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: rhsNode to Assignment: = at 0", "INS VariableDeclarationStatement to Block at 10", "INS SimpleType: List to ParameterizedType: List<AliasedNode> at 0", "INS SimpleName: connection to ClassInstanceCreation at 3", "INS ExpressionStatement to Block at 15", "INS SimpleType: ParseNode to VariableDeclarationStatement at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS SimpleName: subquery to MethodInvocation at 0", "INS SimpleName: rhsTableAlias to ClassInstanceCreation at 4", "INS SimpleName: additionalSelectNodes to MethodInvocation at 0", "INS SimpleName: NODE_FACTORY to MethodInvocation at 0", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: size to MethodInvocation at 1", "INS ExpressionStatement to Block at 23", "INS PrefixExpression: ! to InfixExpression: || at 0", "INS QualifiedName: JoinType.Left to ConditionalExpression at 2", "INS Block to IfStatement at 1", "INS BooleanLiteral: true to MethodInvocation at 6", "INS SimpleType: SelectStatement to VariableDeclarationStatement at 0", "INS Block to EnhancedForStatement at 2", "INS MethodInvocation to Assignment: = at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: aliasedNodes to VariableDeclarationFragment at 0", "INS SimpleName: TableNode to SimpleType: TableNode at 0", "INS VariableDeclarationStatement to Block at 6", "INS MethodInvocation to Assignment: = at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: AliasedNode to SimpleType: AliasedNode at 0", "INS SimpleName: visitLeave to MethodDeclaration at 3", "INS SimpleType: List to ParameterizedType: List<AliasedNode> at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: newArrayListWithExpectedSize to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 16", "INS SimpleType: JoinConditionExtractor to ClassInstanceCreation at 0", "INS SimpleName: selectNodes to MethodInvocation at 0", "INS SimpleName: select to MethodInvocation at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: aliasedNodes to MethodInvocation at 0", "INS SimpleName: node to Assignment: = at 0", "INS SimpleName: rhsTableAlias to MethodInvocation at 3", "INS Block to MethodDeclaration at 7", "INS VariableDeclarationStatement to Block at 20", "INS SimpleType: TableNode to VariableDeclarationStatement at 0", "INS SimpleName: l to MethodInvocation at 0", "INS SimpleType: List to ParameterizedType: List<ParseNode> at 0", "INS SimpleName: node to InfixExpression: == at 1", "INS SimpleName: onNode to VariableDeclarationFragment at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: size to MethodInvocation at 1", "INS SimpleName: l to SingleVariableDeclaration at 1", "INS SimpleName: addAll to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: SQLFeatureNotSupportedException to ClassInstanceCreation at 0", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: groupbyNodes to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: aliasedNode to SingleVariableDeclaration at 1", "INS SimpleName: selectNodes to MethodInvocation at 0", "INS SimpleName: subquery to MethodInvocation at 2", "INS SimpleName: rhsNode to MethodInvocation at 3", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: nodes to VariableDeclarationFragment at 0", "INS SimpleName: Lists to MethodInvocation at 0", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS SimpleType: ParseNode to ParameterizedType: List<ParseNode> at 1", "INS SimpleName: size to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: getJoinCondition to MethodInvocation at 1", "INS SimpleName: tableNode to Assignment: = at 0", "INS SimpleName: visitLeave to SuperMethodInvocation at 0", "INS ParameterizedType: List<AliasedNode> to VariableDeclarationStatement at 0", "INS SimpleName: literal to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS ReturnStatement to Block at 4", "INS SimpleName: additionalSelectNodes to VariableDeclarationFragment at 0", "INS SimpleName: node to MethodInvocation at 0", "INS SimpleName: topNode to Assignment: = at 0", "INS SimpleName: NODE_FACTORY to MethodInvocation at 0", "INS SimpleName: SelectStatement to SimpleType: SelectStatement at 0", "INS IfStatement to Block at 11", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: additionalSelectNodes to EnhancedForStatement at 1", "INS SimpleName: node to SuperMethodInvocation at 1", "INS SimpleName: l to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS InfixExpression: || to IfStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: getNode to MethodInvocation at 1", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: joinType to MethodInvocation at 2", "INS SimpleName: Lists to MethodInvocation at 0", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleType: AliasedNode to ParameterizedType: List<AliasedNode> at 1", "INS SimpleName: SubqueryParseNode to SimpleType: SubqueryParseNode at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS MethodInvocation to MethodInvocation at 4", "INS EnhancedForStatement to Block at 17", "INS SimpleName: rhsTableAlias to VariableDeclarationFragment at 0", "INS NumberLiteral: 1 to InfixExpression: == at 1", "INS SimpleName: JoinConditionExtractor to SimpleType: JoinConditionExtractor at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: conditionExtractor to VariableDeclarationFragment at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: l to MethodInvocation at 0", "INS SimpleType: SubqueryParseNode to CastExpression at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: node to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS IfStatement to Block at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: subquery to MethodInvocation at 0", "INS SimpleName: newArrayListWithExpectedSize to MethodInvocation at 1", "INS StringLiteral: \"Do not support non-aggregate or groupby subquery in comparison.\" to ClassInstanceCreation at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleType: ParseNode to VariableDeclarationStatement at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: subquery to ClassInstanceCreation at 1", "INS SimpleName: where to InfixExpression: == at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: getWhere to MethodInvocation at 1", "INS SimpleName: comparison to MethodInvocation at 1", "INS ParenthesizedExpression to PrefixExpression: ! at 0", "INS SimpleType: List to ParameterizedType: List<ParseNode> at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS NullLiteral to MethodInvocation at 2", "INS SimpleName: get to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 4", "INS SimpleName: ret to ReturnStatement at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: rhsTableAlias to MethodInvocation at 2", "INS SimpleName: get to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: List to ParameterizedType: List<ParseNode> at 0", "INS SimpleName: rhsNode to VariableDeclarationFragment at 0", "INS SimpleName: getSelect to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: getAlias to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 12", "INS SimpleName: SQLFeatureNotSupportedException to SimpleType: SQLFeatureNotSupportedException at 0", "INS SimpleName: nodes to MethodInvocation at 2", "INS SimpleName: subquery to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: rhsTable to MethodInvocation at 4", "INS Block to IfStatement at 1", "INS SimpleName: subquery to MethodInvocation at 2", "INS SimpleName: selectNodes to MethodInvocation at 3", "INS SimpleName: subquery to Assignment: = at 0", "INS SimpleName: getWhere to MethodInvocation at 1", "INS ParameterizedType: List<ParseNode> to VariableDeclarationStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: conditionExtractor to MethodInvocation at 2", "INS SimpleName: size to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: ParseNodeFactory to MethodInvocation at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: topNode to InfixExpression: == at 0", "INS MethodInvocation to MethodInvocation at 0", "INS IfStatement to Block at 7", "INS SimpleName: getFilterOp to MethodInvocation at 1", "INS SimpleName: getNode to MethodInvocation at 1", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: additionalSelectNodes to MethodInvocation at 2", "INS SimpleName: subquery to MethodInvocation at 0", "INS SimpleName: joinType to VariableDeclarationFragment at 0", "INS IfStatement to Block at 8", "INS ParameterizedType: List<ParseNode> to VariableDeclarationStatement at 0", "INS SimpleName: table to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: derivedTable to MethodInvocation at 1", "INS SimpleName: topNode to InfixExpression: == at 0", "INS VariableDeclarationStatement to Block at 2", "INS MethodInvocation to Assignment: = at 1", "INS NumberLiteral: 0 to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: select to MethodInvocation at 2"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV MethodInvocation to InfixExpression: == at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: subquery to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: subquery to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0", "MOV MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getHint", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: select", "DEL SimpleName: isDistinct", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: select", "DEL SimpleName: getSelect", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getGroupBy", "DEL MethodInvocation", "DEL SimpleName: select"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: select", "DEL SimpleName: getHaving", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: select", "DEL SimpleName: getOrderBy", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getLimit", "DEL MethodInvocation", "DEL SimpleName: select"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getBindCount", "DEL SimpleName: select"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: select", "DEL SimpleName: isAggregate", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: select", "DEL MethodInvocation", "DEL SimpleName: hasSequence"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getFrom"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: subquery", "DEL SimpleName: getHint", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: subquery", "DEL SimpleName: getGroupBy"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: subquery", "DEL SimpleName: getHaving"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: subquery", "DEL SimpleName: getOrderBy"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: subquery", "DEL MethodInvocation", "DEL SimpleName: getLimit"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getBindCount", "DEL MethodInvocation", "DEL SimpleName: subquery"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: subquery", "DEL MethodInvocation", "DEL SimpleName: isAggregate"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: subquery", "DEL SimpleName: hasSequence"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getFrom"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getHint", "DEL MethodInvocation", "DEL SimpleName: subquery"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: subquery", "DEL SimpleName: getHaving"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: subquery", "DEL MethodInvocation", "DEL SimpleName: getOrderBy"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getLimit", "DEL SimpleName: subquery", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: subquery", "DEL MethodInvocation", "DEL SimpleName: getBindCount"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: subquery", "DEL MethodInvocation", "DEL SimpleName: hasSequence"]}]}}, {"SubqueryRewriter_diff": {"operations": ["Insert MethodDeclaration(1208) into TypeDeclaration: class(2246) at 16", "Insert MarkerAnnotation(799) into MethodDeclaration(1208) at 0", "Insert Modifier: public(800) into MethodDeclaration(1208) at 1", "Insert SimpleType: ParseNode(802) into MethodDeclaration(1208) at 2", "Insert SimpleName: visitLeave(803) into MethodDeclaration(1208) at 3", "Insert SingleVariableDeclaration(807) into MethodDeclaration(1208) at 4", "Insert SingleVariableDeclaration(814) into MethodDeclaration(1208) at 5", "Insert SimpleType: SQLException(816) into MethodDeclaration(1208) at 6", "Insert Block(1207) into MethodDeclaration(1208) at 7", "Insert SimpleName: Override(798) into MarkerAnnotation(799) at 0", "Insert SimpleName: ParseNode(801) into SimpleType: ParseNode(802) at 0", "Insert SimpleType: ComparisonParseNode(805) into SingleVariableDeclaration(807) at 0", "Insert SimpleName: node(806) into SingleVariableDeclaration(807) at 1", "Insert ParameterizedType: List<ParseNode>(812) into SingleVariableDeclaration(814) at 0", "Insert SimpleName: l(813) into SingleVariableDeclaration(814) at 1", "Insert SimpleName: SQLException(815) into SimpleType: SQLException(816) at 0", "Insert VariableDeclarationStatement(825) into Block(1207) at 0", "Insert IfStatement(838) into Block(1207) at 1", "Insert VariableDeclarationStatement(847) into Block(1207) at 2", "Insert VariableDeclarationStatement(855) into Block(1207) at 3", "Insert VariableDeclarationStatement(863) into Block(1207) at 4", "Insert VariableDeclarationStatement(875) into Block(1207) at 5", "Insert VariableDeclarationStatement(893) into Block(1207) at 6", "Insert IfStatement(955) into Block(1207) at 7", "Insert IfStatement(973) into Block(1207) at 8", "Insert VariableDeclarationStatement(979) into Block(1207) at 9", "Insert VariableDeclarationStatement(990) into Block(1207) at 10", "Insert IfStatement(1044) into Block(1207) at 11", "Insert VariableDeclarationStatement(1055) into Block(1207) at 12", "Insert VariableDeclarationStatement(1071) into Block(1207) at 13", "Insert ExpressionStatement(1082) into Block(1207) at 14", "Insert ExpressionStatement(1087) into Block(1207) at 15", "Insert VariableDeclarationStatement(1101) into Block(1207) at 16", "Insert EnhancedForStatement(1115) into Block(1207) at 17", "Insert ExpressionStatement(1126) into Block(1207) at 18", "Insert VariableDeclarationStatement(1134) into Block(1207) at 19", "Insert VariableDeclarationStatement(1144) into Block(1207) at 20", "Insert VariableDeclarationStatement(1155) into Block(1207) at 21", "Insert VariableDeclarationStatement(1185) into Block(1207) at 22", "Insert ExpressionStatement(1195) into Block(1207) at 23", "Insert IfStatement(1204) into Block(1207) at 24", "Insert ReturnStatement(1206) into Block(1207) at 25", "Insert SimpleName: ComparisonParseNode(804) into SimpleType: ComparisonParseNode(805) at 0", "Insert SimpleType: List(809) into ParameterizedType: List<ParseNode>(812) at 0", "Insert SimpleType: ParseNode(811) into ParameterizedType: List<ParseNode>(812) at 1", "Insert SimpleType: ParseNode(818) into VariableDeclarationStatement(825) at 0", "Insert VariableDeclarationFragment(824) into VariableDeclarationStatement(825) at 1", "Insert PrefixExpression: !(831) into IfStatement(838) at 0", "Insert Block(837) into IfStatement(838) at 1", "Insert SimpleType: SubqueryParseNode(840) into VariableDeclarationStatement(847) at 0", "Insert VariableDeclarationFragment(846) into VariableDeclarationStatement(847) at 1", "Insert SimpleType: SelectStatement(849) into VariableDeclarationStatement(855) at 0", "Insert VariableDeclarationFragment(854) into VariableDeclarationStatement(855) at 1", "Insert SimpleType: String(857) into VariableDeclarationStatement(863) at 0", "Insert VariableDeclarationFragment(862) into VariableDeclarationStatement(863) at 1", "Insert SimpleType: JoinConditionExtractor(865) into VariableDeclarationStatement(875) at 0", "Insert VariableDeclarationFragment(874) into VariableDeclarationStatement(875) at 1", "Insert SimpleType: ParseNode(877) into VariableDeclarationStatement(893) at 0", "Insert VariableDeclarationFragment(892) into VariableDeclarationStatement(893) at 1", "Insert InfixExpression: ==(898) into IfStatement(955) at 0", "Insert Block(954) into IfStatement(955) at 1", "Insert InfixExpression: ||(966) into IfStatement(973) at 0", "Insert Block(972) into IfStatement(973) at 1", "Insert SimpleType: ParseNode(975) into VariableDeclarationStatement(979) at 0", "Insert VariableDeclarationFragment(978) into VariableDeclarationStatement(979) at 1", "Insert ParameterizedType: List<AliasedNode>(984) into VariableDeclarationStatement(990) at 0", "Insert VariableDeclarationFragment(989) into VariableDeclarationStatement(990) at 1", "Insert InfixExpression: ==(995) into IfStatement(1044) at 0", "Insert Block(1005) into IfStatement(1044) at 1", "Insert Block(1043) into IfStatement(1044) at 2", "Insert ParameterizedType: List<AliasedNode>(1049) into VariableDeclarationStatement(1055) at 0", "Insert VariableDeclarationFragment(1054) into VariableDeclarationStatement(1055) at 1", "Insert ParameterizedType: List<AliasedNode>(1060) into VariableDeclarationStatement(1071) at 0", "Insert VariableDeclarationFragment(1070) into VariableDeclarationStatement(1071) at 1", "Insert MethodInvocation(1081) into ExpressionStatement(1082) at 0", "Insert MethodInvocation(1086) into ExpressionStatement(1087) at 0", "Insert ParameterizedType: List<ParseNode>(1092) into VariableDeclarationStatement(1101) at 0", "Insert VariableDeclarationFragment(1100) into VariableDeclarationStatement(1101) at 1", "Insert SingleVariableDeclaration(1105) into EnhancedForStatement(1115) at 0", "Insert SimpleName: additionalSelectNodes(1106) into EnhancedForStatement(1115) at 1", "Insert Block(1114) into EnhancedForStatement(1115) at 2", "Insert Assignment: =(1125) into ExpressionStatement(1126) at 0", "Insert SimpleType: ParseNode(1128) into VariableDeclarationStatement(1134) at 0", "Insert VariableDeclarationFragment(1133) into VariableDeclarationStatement(1134) at 1", "Insert SimpleType: TableNode(1136) into VariableDeclarationStatement(1144) at 0", "Insert VariableDeclarationFragment(1143) into VariableDeclarationStatement(1144) at 1", "Insert SimpleType: JoinType(1146) into VariableDeclarationStatement(1155) at 0", "Insert VariableDeclarationFragment(1154) into VariableDeclarationStatement(1155) at 1", "Insert SimpleType: ParseNode(1157) into VariableDeclarationStatement(1185) at 0", "Insert VariableDeclarationFragment(1184) into VariableDeclarationStatement(1185) at 1", "Insert Assignment: =(1194) into ExpressionStatement(1195) at 0", "Insert InfixExpression: ==(1198) into IfStatement(1204) at 0", "Insert Block(1203) into IfStatement(1204) at 1", "Insert SimpleName: ret(1205) into ReturnStatement(1206) at 0", "Move SimpleName: select(168) into MethodInvocation(170) at 2", "Insert SimpleName: List(808) into SimpleType: List(809) at 0", "Insert SimpleName: ParseNode(810) into SimpleType: ParseNode(811) at 0", "Insert SimpleName: ParseNode(817) into SimpleType: ParseNode(818) at 0", "Insert SimpleName: secondChild(819) into VariableDeclarationFragment(824) at 0", "Insert MethodInvocation(823) into VariableDeclarationFragment(824) at 1", "Insert ParenthesizedExpression(830) into PrefixExpression: !(831) at 0", "Insert ReturnStatement(836) into Block(837) at 0", "Insert SimpleName: SubqueryParseNode(839) into SimpleType: SubqueryParseNode(840) at 0", "Insert SimpleName: subqueryNode(841) into VariableDeclarationFragment(846) at 0", "Insert CastExpression(845) into VariableDeclarationFragment(846) at 1", "Insert SimpleName: SelectStatement(848) into SimpleType: SelectStatement(849) at 0", "Insert SimpleName: subquery(850) into VariableDeclarationFragment(854) at 0", "Insert MethodInvocation(853) into VariableDeclarationFragment(854) at 1", "Insert SimpleName: String(856) into SimpleType: String(857) at 0", "Insert SimpleName: rhsTableAlias(858) into VariableDeclarationFragment(862) at 0", "Insert MethodInvocation(861) into VariableDeclarationFragment(862) at 1", "Insert SimpleName: JoinConditionExtractor(864) into SimpleType: JoinConditionExtractor(865) at 0", "Insert SimpleName: conditionExtractor(866) into VariableDeclarationFragment(874) at 0", "Insert ClassInstanceCreation(873) into VariableDeclarationFragment(874) at 1", "Insert SimpleName: ParseNode(876) into SimpleType: ParseNode(877) at 0", "Insert SimpleName: where(878) into VariableDeclarationFragment(892) at 0", "Insert ConditionalExpression(891) into VariableDeclarationFragment(892) at 1", "Insert SimpleName: where(894) into InfixExpression: ==(898) at 0", "Move MethodInvocation(467) into InfixExpression: ==(898) at 1", "Insert ExpressionStatement(912) into Block(954) at 0", "Insert ExpressionStatement(920) into Block(954) at 1", "Insert ExpressionStatement(931) into Block(954) at 2", "Insert ExpressionStatement(948) into Block(954) at 3", "Insert ReturnStatement(953) into Block(954) at 4", "Insert PrefixExpression: !(959) into InfixExpression: ||(966) at 0", "Insert PrefixExpression: !(965) into InfixExpression: ||(966) at 1", "Insert ThrowStatement(971) into Block(972) at 0", "Insert SimpleName: ParseNode(974) into SimpleType: ParseNode(975) at 0", "Insert SimpleName: rhsNode(976) into VariableDeclarationFragment(978) at 0", "Insert NullLiteral(977) into VariableDeclarationFragment(978) at 1", "Insert SimpleType: List(981) into ParameterizedType: List<AliasedNode>(984) at 0", "Insert SimpleType: AliasedNode(983) into ParameterizedType: List<AliasedNode>(984) at 1", "Insert SimpleName: aliasedNodes(985) into VariableDeclarationFragment(989) at 0", "Insert MethodInvocation(988) into VariableDeclarationFragment(989) at 1", "Insert MethodInvocation(993) into InfixExpression: ==(995) at 0", "Insert NumberLiteral: 1(994) into InfixExpression: ==(995) at 1", "Insert ExpressionStatement(1004) into Block(1005) at 0", "Insert VariableDeclarationStatement(1021) into Block(1043) at 0", "Insert EnhancedForStatement(1035) into Block(1043) at 1", "Insert ExpressionStatement(1042) into Block(1043) at 2", "Insert SimpleType: List(1046) into ParameterizedType: List<AliasedNode>(1049) at 0", "Insert SimpleType: AliasedNode(1048) into ParameterizedType: List<AliasedNode>(1049) at 1", "Insert SimpleName: additionalSelectNodes(1050) into VariableDeclarationFragment(1054) at 0", "Insert MethodInvocation(1053) into VariableDeclarationFragment(1054) at 1", "Insert SimpleType: List(1057) into ParameterizedType: List<AliasedNode>(1060) at 0", "Insert SimpleType: AliasedNode(1059) into ParameterizedType: List<AliasedNode>(1060) at 1", "Insert SimpleName: selectNodes(1061) into VariableDeclarationFragment(1070) at 0", "Insert MethodInvocation(1069) into VariableDeclarationFragment(1070) at 1", "Insert SimpleName: selectNodes(1072) into MethodInvocation(1081) at 0", "Insert SimpleName: add(1073) into MethodInvocation(1081) at 1", "Insert MethodInvocation(1080) into MethodInvocation(1081) at 2", "Insert SimpleName: selectNodes(1083) into MethodInvocation(1086) at 0", "Insert SimpleName: addAll(1084) into MethodInvocation(1086) at 1", "Insert SimpleName: additionalSelectNodes(1085) into MethodInvocation(1086) at 2", "Insert SimpleType: List(1089) into ParameterizedType: List<ParseNode>(1092) at 0", "Insert SimpleType: ParseNode(1091) into ParameterizedType: List<ParseNode>(1092) at 1", "Insert SimpleName: groupbyNodes(1093) into VariableDeclarationFragment(1100) at 0", "Insert MethodInvocation(1099) into VariableDeclarationFragment(1100) at 1", "Insert SimpleType: AliasedNode(1103) into SingleVariableDeclaration(1105) at 0", "Insert SimpleName: aliasedNode(1104) into SingleVariableDeclaration(1105) at 1", "Insert ExpressionStatement(1113) into Block(1114) at 0", "Insert SimpleName: subquery(1116) into Assignment: =(1125) at 0", "Insert MethodInvocation(1124) into Assignment: =(1125) at 1", "Insert SimpleName: ParseNode(1127) into SimpleType: ParseNode(1128) at 0", "Insert SimpleName: onNode(1129) into VariableDeclarationFragment(1133) at 0", "Insert MethodInvocation(1132) into VariableDeclarationFragment(1133) at 1", "Insert SimpleName: TableNode(1135) into SimpleType: TableNode(1136) at 0", "Insert SimpleName: rhsTable(1137) into VariableDeclarationFragment(1143) at 0", "Insert MethodInvocation(1142) into VariableDeclarationFragment(1143) at 1", "Insert SimpleName: JoinType(1145) into SimpleType: JoinType(1146) at 0", "Insert SimpleName: joinType(1147) into VariableDeclarationFragment(1154) at 0", "Insert ConditionalExpression(1153) into VariableDeclarationFragment(1154) at 1", "Insert SimpleName: ParseNode(1156) into SimpleType: ParseNode(1157) at 0", "Insert SimpleName: ret(1158) into VariableDeclarationFragment(1184) at 0", "Insert MethodInvocation(1183) into VariableDeclarationFragment(1184) at 1", "Insert SimpleName: tableNode(1186) into Assignment: =(1194) at 0", "Insert MethodInvocation(1193) into Assignment: =(1194) at 1", "Insert SimpleName: topNode(1196) into InfixExpression: ==(1198) at 0", "Insert SimpleName: node(1197) into InfixExpression: ==(1198) at 1", "Insert ExpressionStatement(1202) into Block(1203) at 0", "Move SimpleName: subquery(457) into MethodInvocation(431) at 2", "Move SimpleName: subquery(759) into MethodInvocation(705) at 2", "Insert SimpleName: l(820) into MethodInvocation(823) at 0", "Insert SimpleName: get(821) into MethodInvocation(823) at 1", "Insert NumberLiteral: 1(822) into MethodInvocation(823) at 2", "Insert InstanceofExpression(829) into ParenthesizedExpression(830) at 0", "Insert SuperMethodInvocation(835) into ReturnStatement(836) at 0", "Insert SimpleType: SubqueryParseNode(843) into CastExpression(845) at 0", "Insert SimpleName: secondChild(844) into CastExpression(845) at 1", "Insert SimpleName: subqueryNode(851) into MethodInvocation(853) at 0", "Insert SimpleName: getSelectNode(852) into MethodInvocation(853) at 1", "Insert SimpleName: ParseNodeFactory(859) into MethodInvocation(861) at 0", "Insert SimpleName: createTempAlias(860) into MethodInvocation(861) at 1", "Insert SimpleType: JoinConditionExtractor(868) into ClassInstanceCreation(873) at 0", "Insert SimpleName: subquery(869) into ClassInstanceCreation(873) at 1", "Insert SimpleName: resolver(870) into ClassInstanceCreation(873) at 2", "Insert SimpleName: connection(871) into ClassInstanceCreation(873) at 3", "Insert SimpleName: rhsTableAlias(872) into ClassInstanceCreation(873) at 4", "Insert InfixExpression: ==(883) into ConditionalExpression(891) at 0", "Insert NullLiteral(884) into ConditionalExpression(891) at 1", "Insert MethodInvocation(890) into ConditionalExpression(891) at 2", "Insert Assignment: =(911) into ExpressionStatement(912) at 0", "Insert Assignment: =(919) into ExpressionStatement(920) at 0", "Insert Assignment: =(930) into ExpressionStatement(931) at 0", "Insert Assignment: =(947) into ExpressionStatement(948) at 0", "Insert SuperMethodInvocation(952) into ReturnStatement(953) at 0", "Move MethodInvocation(785) into PrefixExpression: !(959) at 0", "Insert MethodInvocation(964) into PrefixExpression: !(965) at 0", "Insert ClassInstanceCreation(970) into ThrowStatement(971) at 0", "Insert SimpleName: List(980) into SimpleType: List(981) at 0", "Insert SimpleName: AliasedNode(982) into SimpleType: AliasedNode(983) at 0", "Insert SimpleName: subquery(986) into MethodInvocation(988) at 0", "Insert SimpleName: getSelect(987) into MethodInvocation(988) at 1", "Insert SimpleName: aliasedNodes(991) into MethodInvocation(993) at 0", "Insert SimpleName: size(992) into MethodInvocation(993) at 1", "Insert Assignment: =(1003) into ExpressionStatement(1004) at 0", "Insert ParameterizedType: List<ParseNode>(1010) into VariableDeclarationStatement(1021) at 0", "Insert VariableDeclarationFragment(1020) into VariableDeclarationStatement(1021) at 1", "Insert SingleVariableDeclaration(1025) into EnhancedForStatement(1035) at 0", "Insert SimpleName: aliasedNodes(1026) into EnhancedForStatement(1035) at 1", "Insert Block(1034) into EnhancedForStatement(1035) at 2", "Insert Assignment: =(1041) into ExpressionStatement(1042) at 0", "Insert SimpleName: List(1045) into SimpleType: List(1046) at 0", "Insert SimpleName: AliasedNode(1047) into SimpleType: AliasedNode(1048) at 0", "Insert SimpleName: conditionExtractor(1051) into MethodInvocation(1053) at 0", "Insert SimpleName: getAdditionalSelectNodes(1052) into MethodInvocation(1053) at 1", "Insert SimpleName: List(1056) into SimpleType: List(1057) at 0", "Insert SimpleName: AliasedNode(1058) into SimpleType: AliasedNode(1059) at 0", "Insert SimpleName: Lists(1062) into MethodInvocation(1069) at 0", "Insert SimpleName: newArrayListWithExpectedSize(1063) into MethodInvocation(1069) at 1", "Insert InfixExpression: +(1068) into MethodInvocation(1069) at 2", "Insert SimpleName: NODE_FACTORY(1074) into MethodInvocation(1080) at 0", "Insert SimpleName: aliasedNode(1075) into MethodInvocation(1080) at 1", "Insert MethodInvocation(1078) into MethodInvocation(1080) at 2", "Insert SimpleName: rhsNode(1079) into MethodInvocation(1080) at 3", "Insert SimpleName: List(1088) into SimpleType: List(1089) at 0", "Insert SimpleName: ParseNode(1090) into SimpleType: ParseNode(1091) at 0", "Insert SimpleName: Lists(1094) into MethodInvocation(1099) at 0", "Insert SimpleName: newArrayListWithExpectedSize(1095) into MethodInvocation(1099) at 1", "Insert MethodInvocation(1098) into MethodInvocation(1099) at 2", "Insert SimpleName: AliasedNode(1102) into SimpleType: AliasedNode(1103) at 0", "Insert MethodInvocation(1112) into ExpressionStatement(1113) at 0", "Insert SimpleName: NODE_FACTORY(1117) into MethodInvocation(1124) at 0", "Insert SimpleName: select(1118) into MethodInvocation(1124) at 1", "Insert SimpleName: subquery(1119) into MethodInvocation(1124) at 2", "Insert SimpleName: selectNodes(1120) into MethodInvocation(1124) at 3", "Insert SimpleName: where(1121) into MethodInvocation(1124) at 4", "Insert SimpleName: groupbyNodes(1122) into MethodInvocation(1124) at 5", "Insert BooleanLiteral: true(1123) into MethodInvocation(1124) at 6", "Insert SimpleName: conditionExtractor(1130) into MethodInvocation(1132) at 0", "Insert SimpleName: getJoinCondition(1131) into MethodInvocation(1132) at 1", "Insert SimpleName: NODE_FACTORY(1138) into MethodInvocation(1142) at 0", "Insert SimpleName: derivedTable(1139) into MethodInvocation(1142) at 1", "Insert SimpleName: rhsTableAlias(1140) into MethodInvocation(1142) at 2", "Insert SimpleName: subquery(1141) into MethodInvocation(1142) at 3", "Insert InfixExpression: ==(1150) into ConditionalExpression(1153) at 0", "Insert QualifiedName: JoinType.Inner(1151) into ConditionalExpression(1153) at 1", "Insert QualifiedName: JoinType.Left(1152) into ConditionalExpression(1153) at 2", "Insert SimpleName: NODE_FACTORY(1159) into MethodInvocation(1183) at 0", "Insert SimpleName: comparison(1160) into MethodInvocation(1183) at 1", "Insert MethodInvocation(1163) into MethodInvocation(1183) at 2", "Insert MethodInvocation(1167) into MethodInvocation(1183) at 3", "Insert MethodInvocation(1182) into MethodInvocation(1183) at 4", "Insert SimpleName: NODE_FACTORY(1187) into MethodInvocation(1193) at 0", "Insert SimpleName: join(1188) into MethodInvocation(1193) at 1", "Insert SimpleName: joinType(1189) into MethodInvocation(1193) at 2", "Insert SimpleName: tableNode(1190) into MethodInvocation(1193) at 3", "Insert SimpleName: rhsTable(1191) into MethodInvocation(1193) at 4", "Insert SimpleName: onNode(1192) into MethodInvocation(1193) at 5", "Insert Assignment: =(1201) into ExpressionStatement(1202) at 0", "Insert SimpleName: secondChild(826) into InstanceofExpression(829) at 0", "Insert SimpleType: SubqueryParseNode(828) into InstanceofExpression(829) at 1", "Insert SimpleName: visitLeave(832) into SuperMethodInvocation(835) at 0", "Insert SimpleName: node(833) into SuperMethodInvocation(835) at 1", "Insert SimpleName: l(834) into SuperMethodInvocation(835) at 2", "Insert SimpleName: SubqueryParseNode(842) into SimpleType: SubqueryParseNode(843) at 0", "Insert SimpleName: JoinConditionExtractor(867) into SimpleType: JoinConditionExtractor(868) at 0", "Insert MethodInvocation(881) into InfixExpression: ==(883) at 0", "Insert NullLiteral(882) into InfixExpression: ==(883) at 1", "Insert MethodInvocation(887) into MethodInvocation(890) at 0", "Insert SimpleName: accept(888) into MethodInvocation(890) at 1", "Insert SimpleName: conditionExtractor(889) into MethodInvocation(890) at 2", "Insert SimpleName: subquery(899) into Assignment: =(911) at 0", "Insert MethodInvocation(910) into Assignment: =(911) at 1", "Insert SimpleName: subqueryNode(913) into Assignment: =(919) at 0", "Insert MethodInvocation(918) into Assignment: =(919) at 1", "Insert SimpleName: l(921) into Assignment: =(930) at 0", "Insert MethodInvocation(929) into Assignment: =(930) at 1", "Insert SimpleName: node(932) into Assignment: =(947) at 0", "Insert MethodInvocation(946) into Assignment: =(947) at 1", "Insert SimpleName: visitLeave(949) into SuperMethodInvocation(952) at 0", "Insert SimpleName: node(950) into SuperMethodInvocation(952) at 1", "Insert SimpleName: l(951) into SuperMethodInvocation(952) at 2", "Move MethodInvocation(770) into MethodInvocation(964) at 0", "Insert SimpleName: isEmpty(963) into MethodInvocation(964) at 1", "Insert SimpleType: SQLFeatureNotSupportedException(968) into ClassInstanceCreation(970) at 0", "Insert StringLiteral: \"Do not support non-aggregate or groupby subquery in comparison.\"(969) into ClassInstanceCreation(970) at 1", "Insert SimpleName: rhsNode(996) into Assignment: =(1003) at 0", "Insert MethodInvocation(1002) into Assignment: =(1003) at 1", "Insert SimpleType: List(1007) into ParameterizedType: List<ParseNode>(1010) at 0", "Insert SimpleType: ParseNode(1009) into ParameterizedType: List<ParseNode>(1010) at 1", "Insert SimpleName: nodes(1011) into VariableDeclarationFragment(1020) at 0", "Insert MethodInvocation(1019) into VariableDeclarationFragment(1020) at 1", "Insert SimpleType: AliasedNode(1023) into SingleVariableDeclaration(1025) at 0", "Insert SimpleName: aliasedNode(1024) into SingleVariableDeclaration(1025) at 1", "Insert ExpressionStatement(1033) into Block(1034) at 0", "Insert SimpleName: rhsNode(1036) into Assignment: =(1041) at 0", "Insert MethodInvocation(1040) into Assignment: =(1041) at 1", "Insert MethodInvocation(1066) into InfixExpression: +(1068) at 0", "Insert NumberLiteral: 1(1067) into InfixExpression: +(1068) at 1", "Insert SimpleName: ParseNodeFactory(1076) into MethodInvocation(1078) at 0", "Insert SimpleName: createTempAlias(1077) into MethodInvocation(1078) at 1", "Insert SimpleName: additionalSelectNodes(1096) into MethodInvocation(1098) at 0", "Insert SimpleName: size(1097) into MethodInvocation(1098) at 1", "Insert SimpleName: groupbyNodes(1107) into MethodInvocation(1112) at 0", "Insert SimpleName: add(1108) into MethodInvocation(1112) at 1", "Insert MethodInvocation(1111) into MethodInvocation(1112) at 2", "Insert SimpleName: topNode(1148) into InfixExpression: ==(1150) at 0", "Insert SimpleName: node(1149) into InfixExpression: ==(1150) at 1", "Insert SimpleName: node(1161) into MethodInvocation(1163) at 0", "Insert SimpleName: getFilterOp(1162) into MethodInvocation(1163) at 1", "Insert SimpleName: l(1164) into MethodInvocation(1167) at 0", "Insert SimpleName: get(1165) into MethodInvocation(1167) at 1", "Insert NumberLiteral: 0(1166) into MethodInvocation(1167) at 2", "Insert SimpleName: NODE_FACTORY(1168) into MethodInvocation(1182) at 0", "Insert SimpleName: column(1169) into MethodInvocation(1182) at 1", "Insert MethodInvocation(1174) into MethodInvocation(1182) at 2", "Insert MethodInvocation(1180) into MethodInvocation(1182) at 3", "Insert NullLiteral(1181) into MethodInvocation(1182) at 4", "Insert SimpleName: topNode(1199) into Assignment: =(1201) at 0", "Insert NullLiteral(1200) into Assignment: =(1201) at 1", "Insert SimpleName: SubqueryParseNode(827) into SimpleType: SubqueryParseNode(828) at 0", "Insert SimpleName: subquery(879) into MethodInvocation(881) at 0", "Insert SimpleName: getWhere(880) into MethodInvocation(881) at 1", "Insert SimpleName: subquery(885) into MethodInvocation(887) at 0", "Insert SimpleName: getWhere(886) into MethodInvocation(887) at 1", "Insert SimpleName: NODE_FACTORY(900) into MethodInvocation(910) at 0", "Insert SimpleName: select(901) into MethodInvocation(910) at 1", "Insert SimpleName: subquery(902) into MethodInvocation(910) at 2", "Insert MethodInvocation(909) into MethodInvocation(910) at 3", "Insert SimpleName: NODE_FACTORY(914) into MethodInvocation(918) at 0", "Insert SimpleName: subquery(915) into MethodInvocation(918) at 1", "Insert SimpleName: subquery(916) into MethodInvocation(918) at 2", "Insert BooleanLiteral: true(917) into MethodInvocation(918) at 3", "Insert SimpleName: Lists(922) into MethodInvocation(929) at 0", "Insert SimpleName: newArrayList(923) into MethodInvocation(929) at 1", "Insert MethodInvocation(927) into MethodInvocation(929) at 2", "Insert SimpleName: subqueryNode(928) into MethodInvocation(929) at 3", "Insert SimpleName: NODE_FACTORY(933) into MethodInvocation(946) at 0", "Insert SimpleName: comparison(934) into MethodInvocation(946) at 1", "Insert MethodInvocation(937) into MethodInvocation(946) at 2", "Insert MethodInvocation(941) into MethodInvocation(946) at 3", "Insert MethodInvocation(945) into MethodInvocation(946) at 4", "Insert SimpleName: SQLFeatureNotSupportedException(967) into SimpleType: SQLFeatureNotSupportedException(968) at 0", "Insert MethodInvocation(1000) into MethodInvocation(1002) at 0", "Insert SimpleName: getNode(1001) into MethodInvocation(1002) at 1", "Insert SimpleName: List(1006) into SimpleType: List(1007) at 0", "Insert SimpleName: ParseNode(1008) into SimpleType: ParseNode(1009) at 0", "Insert SimpleName: Lists(1012) into MethodInvocation(1019) at 0", "Insert SimpleType: ParseNode(1014) into MethodInvocation(1019) at 1", "Insert SimpleName: newArrayListWithExpectedSize(1015) into MethodInvocation(1019) at 2", "Insert MethodInvocation(1018) into MethodInvocation(1019) at 3", "Insert SimpleName: AliasedNode(1022) into SimpleType: AliasedNode(1023) at 0", "Insert MethodInvocation(1032) into ExpressionStatement(1033) at 0", "Insert SimpleName: NODE_FACTORY(1037) into MethodInvocation(1040) at 0", "Insert SimpleName: rowValueConstructor(1038) into MethodInvocation(1040) at 1", "Insert SimpleName: nodes(1039) into MethodInvocation(1040) at 2", "Insert SimpleName: additionalSelectNodes(1064) into MethodInvocation(1066) at 0", "Insert SimpleName: size(1065) into MethodInvocation(1066) at 1", "Insert SimpleName: aliasedNode(1109) into MethodInvocation(1111) at 0", "Insert SimpleName: getNode(1110) into MethodInvocation(1111) at 1", "Insert SimpleName: NODE_FACTORY(1170) into MethodInvocation(1174) at 0", "Insert SimpleName: table(1171) into MethodInvocation(1174) at 1", "Insert NullLiteral(1172) into MethodInvocation(1174) at 2", "Insert SimpleName: rhsTableAlias(1173) into MethodInvocation(1174) at 3", "Insert MethodInvocation(1178) into MethodInvocation(1180) at 0", "Insert SimpleName: getAlias(1179) into MethodInvocation(1180) at 1", "Insert SimpleName: NODE_FACTORY(903) into MethodInvocation(909) at 0", "Insert SimpleName: limit(904) into MethodInvocation(909) at 1", "Insert MethodInvocation(908) into MethodInvocation(909) at 2", "Insert SimpleName: l(924) into MethodInvocation(927) at 0", "Insert SimpleName: get(925) into MethodInvocation(927) at 1", "Insert NumberLiteral: 0(926) into MethodInvocation(927) at 2", "Insert SimpleName: node(935) into MethodInvocation(937) at 0", "Insert SimpleName: getFilterOp(936) into MethodInvocation(937) at 1", "Insert SimpleName: l(938) into MethodInvocation(941) at 0", "Insert SimpleName: get(939) into MethodInvocation(941) at 1", "Insert NumberLiteral: 0(940) into MethodInvocation(941) at 2", "Insert SimpleName: l(942) into MethodInvocation(945) at 0", "Insert SimpleName: get(943) into MethodInvocation(945) at 1", "Insert NumberLiteral: 1(944) into MethodInvocation(945) at 2", "Insert SimpleName: aliasedNodes(997) into MethodInvocation(1000) at 0", "Insert SimpleName: get(998) into MethodInvocation(1000) at 1", "Insert NumberLiteral: 0(999) into MethodInvocation(1000) at 2", "Insert SimpleName: ParseNode(1013) into SimpleType: ParseNode(1014) at 0", "Insert SimpleName: aliasedNodes(1016) into MethodInvocation(1018) at 0", "Insert SimpleName: size(1017) into MethodInvocation(1018) at 1", "Insert SimpleName: nodes(1027) into MethodInvocation(1032) at 0", "Insert SimpleName: add(1028) into MethodInvocation(1032) at 1", "Insert MethodInvocation(1031) into MethodInvocation(1032) at 2", "Insert SimpleName: selectNodes(1175) into MethodInvocation(1178) at 0", "Insert SimpleName: get(1176) into MethodInvocation(1178) at 1", "Insert NumberLiteral: 0(1177) into MethodInvocation(1178) at 2", "Insert SimpleName: NODE_FACTORY(905) into MethodInvocation(908) at 0", "Insert SimpleName: literal(906) into MethodInvocation(908) at 1", "Insert NumberLiteral: 2(907) into MethodInvocation(908) at 2", "Insert SimpleName: aliasedNode(1029) into MethodInvocation(1031) at 0", "Insert SimpleName: getNode(1030) into MethodInvocation(1031) at 1", "Delete SimpleName: getHint(169)", "Delete MethodInvocation(170)", "Delete SimpleName: select(171)", "Delete SimpleName: isDistinct(172)", "Delete MethodInvocation(173)", "Delete SimpleName: select(174)", "Delete SimpleName: getSelect(175)", "Delete MethodInvocation(176)", "Delete SimpleName: select(178)", "Delete SimpleName: getGroupBy(179)", "Delete MethodInvocation(180)", "Delete SimpleName: select(181)", "Delete SimpleName: getHaving(182)", "Delete MethodInvocation(183)", "Delete SimpleName: select(184)", "Delete SimpleName: getOrderBy(185)", "Delete MethodInvocation(186)", "Delete SimpleName: select(187)", "Delete SimpleName: getLimit(188)", "Delete MethodInvocation(189)", "Delete SimpleName: select(190)", "Delete SimpleName: getBindCount(191)", "Delete MethodInvocation(192)", "Delete SimpleName: select(193)", "Delete SimpleName: isAggregate(194)", "Delete MethodInvocation(195)", "Delete SimpleName: select(196)", "Delete SimpleName: hasSequence(197)", "Delete MethodInvocation(198)", "Delete SimpleName: getFrom(458)", "Delete MethodInvocation(459)", "Delete SimpleName: subquery(460)", "Delete SimpleName: getHint(461)", "Delete MethodInvocation(462)", "Delete SimpleName: subquery(468)", "Delete SimpleName: getGroupBy(469)", "Delete MethodInvocation(470)", "Delete SimpleName: subquery(471)", "Delete SimpleName: getHaving(472)", "Delete MethodInvocation(473)", "Delete SimpleName: subquery(474)", "Delete SimpleName: getOrderBy(475)", "Delete MethodInvocation(476)", "Delete SimpleName: subquery(477)", "Delete SimpleName: getLimit(478)", "Delete MethodInvocation(479)", "Delete SimpleName: subquery(480)", "Delete SimpleName: getBindCount(481)", "Delete MethodInvocation(482)", "Delete SimpleName: subquery(483)", "Delete SimpleName: isAggregate(484)", "Delete MethodInvocation(485)", "Delete SimpleName: subquery(486)", "Delete SimpleName: hasSequence(487)", "Delete MethodInvocation(488)", "Delete SimpleName: getFrom(760)", "Delete MethodInvocation(761)", "Delete SimpleName: subquery(762)", "Delete SimpleName: getHint(763)", "Delete MethodInvocation(764)", "Delete SimpleName: subquery(771)", "Delete SimpleName: getHaving(772)", "Delete MethodInvocation(773)", "Delete SimpleName: subquery(774)", "Delete SimpleName: getOrderBy(775)", "Delete MethodInvocation(776)", "Delete SimpleName: subquery(777)", "Delete SimpleName: getLimit(778)", "Delete MethodInvocation(779)", "Delete SimpleName: subquery(780)", "Delete SimpleName: getBindCount(781)", "Delete MethodInvocation(782)", "Delete SimpleName: subquery(786)", "Delete SimpleName: hasSequence(787)", "Delete MethodInvocation(788)"]}}, {"ParseNodeFactory_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 100", "operations": ["INS ParameterizedType: List<? extends TableNode> to SingleVariableDeclaration at 0", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: TableNode to SimpleType: TableNode at 0", "INS SimpleName: isDistinct to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodInvocation to MethodInvocation at 7", "INS ReturnStatement to Block at 0", "INS SimpleType: SelectStatement to SingleVariableDeclaration at 0", "INS SimpleName: tables to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: where to MethodInvocation at 5", "INS MethodInvocation to MethodInvocation at 6", "INS SimpleName: select to MethodDeclaration at 2", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: List to ParameterizedType: List<? extends TableNode> at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 3", "INS WildcardType: ? extends TableNode to ParameterizedType: List<? extends TableNode> at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 100", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: where to SingleVariableDeclaration at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: SelectStatement to SimpleType: SelectStatement at 0", "INS SimpleName: getSelect to MethodInvocation at 1", "INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 8", "INS MethodInvocation to MethodInvocation at 9", "INS SimpleName: getBindCount to MethodInvocation at 1", "INS SimpleName: statement to SingleVariableDeclaration at 1", "INS SimpleName: tables to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleName: statement to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 12", "INS SimpleName: statement to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 11", "INS SimpleName: SelectStatement to SimpleType: SelectStatement at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: TableNode to WildcardType: ? extends TableNode at 0", "INS SimpleName: getGroupBy to MethodInvocation at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: isAggregate to MethodInvocation at 1", "INS SimpleName: getHaving to MethodInvocation at 1", "INS SimpleName: select to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 10", "INS SimpleName: getHint to MethodInvocation at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleType: SelectStatement to MethodDeclaration at 1", "INS Block to MethodDeclaration at 6", "INS SimpleName: hasSequence to MethodInvocation at 1", "INS SimpleName: getLimit to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: getOrderBy to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 101", "operations": ["INS ParameterizedType: List<AliasedNode> to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 5", "INS SimpleName: getHint to MethodInvocation at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: getOrderBy to MethodInvocation at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 11", "INS SimpleName: statement to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 12", "INS SimpleName: hasSequence to MethodInvocation at 1", "INS SimpleType: SelectStatement to SingleVariableDeclaration at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: getFrom to MethodInvocation at 1", "INS SimpleName: isAggregate to MethodInvocation at 1", "INS SimpleName: getHaving to MethodInvocation at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: getWhere to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getGroupBy to MethodInvocation at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleType: AliasedNode to ParameterizedType: List<AliasedNode> at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: SelectStatement to SimpleType: SelectStatement at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 6", "INS MethodInvocation to MethodInvocation at 7", "INS SimpleType: List to ParameterizedType: List<AliasedNode> at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: List to SimpleType: List at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: select to MethodInvocation at 0", "INS SimpleName: SelectStatement to SimpleType: SelectStatement at 0", "INS MethodInvocation to MethodInvocation at 9", "INS SimpleName: getLimit to MethodInvocation at 1", "INS SimpleName: isDistinct to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 10", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: getBindCount to MethodInvocation at 1", "INS SimpleName: isDistinct to MethodInvocation at 3", "INS SimpleName: select to MethodInvocation at 4", "INS SimpleName: select to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: statement to SingleVariableDeclaration at 1", "INS SimpleName: AliasedNode to SimpleType: AliasedNode at 0", "INS SimpleType: SelectStatement to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: select to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 101", "INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 8", "INS SimpleName: statement to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 102", "operations": ["INS SimpleName: AliasedNode to SimpleType: AliasedNode at 0", "INS SimpleName: getLimit to MethodInvocation at 1", "INS SimpleName: select to MethodInvocation at 4", "INS SimpleName: isAggregate to MethodInvocation at 1", "INS SimpleType: SelectStatement to MethodDeclaration at 1", "INS SimpleName: getFrom to MethodInvocation at 1", "INS SimpleName: isDistinct to MethodInvocation at 3", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MethodInvocation to MethodInvocation at 7", "INS MethodInvocation to MethodInvocation at 8", "INS Modifier: public to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: where to MethodInvocation at 5", "INS SimpleName: select to MethodInvocation at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: getBindCount to MethodInvocation at 1", "INS SimpleName: getOrderBy to MethodInvocation at 1", "INS SimpleName: getHint to MethodInvocation at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleType: List to ParameterizedType: List<AliasedNode> at 0", "INS ParameterizedType: List<AliasedNode> to SingleVariableDeclaration at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: getGroupBy to MethodInvocation at 1", "INS SimpleName: select to SingleVariableDeclaration at 1", "INS SimpleName: SelectStatement to SimpleType: SelectStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: getHaving to MethodInvocation at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: SelectStatement to SimpleType: SelectStatement at 0", "INS SimpleName: select to MethodDeclaration at 2", "INS SimpleName: hasSequence to MethodInvocation at 1", "INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 10", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: where to SingleVariableDeclaration at 1", "INS SimpleType: AliasedNode to ParameterizedType: List<AliasedNode> at 1", "INS MethodInvocation to MethodInvocation at 9", "INS SimpleName: isDistinct to SingleVariableDeclaration at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 6", "INS MethodInvocation to MethodInvocation at 12", "INS Block to MethodDeclaration at 7", "INS SimpleName: statement to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 11", "INS MethodDeclaration to TypeDeclaration: class at 102", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleType: SelectStatement to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 103", "operations": ["INS SimpleType: SelectStatement to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleName: statement to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 8", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: select to MethodDeclaration at 2", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: groupBy to MethodInvocation at 6", "INS SimpleName: statement to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 12", "INS SimpleName: getBindCount to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: select to SingleVariableDeclaration at 1", "INS SimpleName: AliasedNode to SimpleType: AliasedNode at 0", "INS MethodInvocation to MethodInvocation at 7", "INS SimpleName: select to MethodInvocation at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 9", "INS SimpleName: ParseNode to SimpleType: ParseNode at 0", "INS SimpleName: List to SimpleType: List at 0", "INS MethodDeclaration to TypeDeclaration: class at 103", "INS SimpleName: where to MethodInvocation at 5", "INS SimpleType: ParseNode to SingleVariableDeclaration at 0", "INS SimpleName: hasSequence to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: getOrderBy to MethodInvocation at 1", "INS SimpleName: getHint to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: where to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: isAggregate to MethodInvocation at 11", "INS SimpleName: isAggregate to SingleVariableDeclaration at 1", "INS SimpleType: AliasedNode to ParameterizedType: List<AliasedNode> at 1", "INS SimpleName: groupBy to SingleVariableDeclaration at 1", "INS ParameterizedType: List<AliasedNode> to SingleVariableDeclaration at 0", "INS SimpleName: select to MethodInvocation at 4", "INS MethodInvocation to MethodInvocation at 10", "INS Block to MethodDeclaration at 8", "INS ParameterizedType: List<ParseNode> to SingleVariableDeclaration at 0", "INS SimpleName: isDistinct to MethodInvocation at 1", "INS SimpleName: getLimit to MethodInvocation at 1", "INS SimpleName: getHaving to MethodInvocation at 1", "INS SimpleType: SelectStatement to SingleVariableDeclaration at 0", "INS SimpleType: ParseNode to ParameterizedType: List<ParseNode> at 1", "INS SimpleName: statement to SingleVariableDeclaration at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS SimpleName: SelectStatement to SimpleType: SelectStatement at 0", "INS SimpleName: SelectStatement to SimpleType: SelectStatement at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: getFrom to MethodInvocation at 1", "INS SimpleName: statement to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS SimpleType: List to ParameterizedType: List<AliasedNode> at 0", "INS SimpleType: List to ParameterizedType: List<ParseNode> at 0"]}]}}, {"ParseNodeFactory_diff": {"operations": ["Insert MethodDeclaration(3243) into TypeDeclaration: class(3578) at 100", "Insert MethodDeclaration(3298) into TypeDeclaration: class(3578) at 101", "Insert MethodDeclaration(3355) into TypeDeclaration: class(3578) at 102", "Insert MethodDeclaration(3417) into TypeDeclaration: class(3578) at 103", "Insert Modifier: public(3187) into MethodDeclaration(3243) at 0", "Insert SimpleType: SelectStatement(3189) into MethodDeclaration(3243) at 1", "Insert SimpleName: select(3190) into MethodDeclaration(3243) at 2", "Insert SingleVariableDeclaration(3194) into MethodDeclaration(3243) at 3", "Insert SingleVariableDeclaration(3202) into MethodDeclaration(3243) at 4", "Insert SingleVariableDeclaration(3206) into MethodDeclaration(3243) at 5", "Insert Block(3242) into MethodDeclaration(3243) at 6", "Insert Modifier: public(3244) into MethodDeclaration(3298) at 0", "Insert SimpleType: SelectStatement(3246) into MethodDeclaration(3298) at 1", "Insert SimpleName: select(3247) into MethodDeclaration(3298) at 2", "Insert SingleVariableDeclaration(3251) into MethodDeclaration(3298) at 3", "Insert SingleVariableDeclaration(3254) into MethodDeclaration(3298) at 4", "Insert SingleVariableDeclaration(3261) into MethodDeclaration(3298) at 5", "Insert Block(3297) into MethodDeclaration(3298) at 6", "Insert Modifier: public(3299) into MethodDeclaration(3355) at 0", "Insert SimpleType: SelectStatement(3301) into MethodDeclaration(3355) at 1", "Insert SimpleName: select(3302) into MethodDeclaration(3355) at 2", "Insert SingleVariableDeclaration(3306) into MethodDeclaration(3355) at 3", "Insert SingleVariableDeclaration(3309) into MethodDeclaration(3355) at 4", "Insert SingleVariableDeclaration(3316) into MethodDeclaration(3355) at 5", "Insert SingleVariableDeclaration(3320) into MethodDeclaration(3355) at 6", "Insert Block(3354) into MethodDeclaration(3355) at 7", "Insert Modifier: public(3356) into MethodDeclaration(3417) at 0", "Insert SimpleType: SelectStatement(3358) into MethodDeclaration(3417) at 1", "Insert SimpleName: select(3359) into MethodDeclaration(3417) at 2", "Insert SingleVariableDeclaration(3363) into MethodDeclaration(3417) at 3", "Insert SingleVariableDeclaration(3370) into MethodDeclaration(3417) at 4", "Insert SingleVariableDeclaration(3374) into MethodDeclaration(3417) at 5", "Insert SingleVariableDeclaration(3381) into MethodDeclaration(3417) at 6", "Insert SingleVariableDeclaration(3384) into MethodDeclaration(3417) at 7", "Insert Block(3416) into MethodDeclaration(3417) at 8", "Insert SimpleName: SelectStatement(3188) into SimpleType: SelectStatement(3189) at 0", "Insert SimpleType: SelectStatement(3192) into SingleVariableDeclaration(3194) at 0", "Insert SimpleName: statement(3193) into SingleVariableDeclaration(3194) at 1", "Insert ParameterizedType: List<? extends TableNode>(3200) into SingleVariableDeclaration(3202) at 0", "Insert SimpleName: tables(3201) into SingleVariableDeclaration(3202) at 1", "Insert SimpleType: ParseNode(3204) into SingleVariableDeclaration(3206) at 0", "Insert SimpleName: where(3205) into SingleVariableDeclaration(3206) at 1", "Insert ReturnStatement(3241) into Block(3242) at 0", "Insert SimpleName: SelectStatement(3245) into SimpleType: SelectStatement(3246) at 0", "Insert SimpleType: SelectStatement(3249) into SingleVariableDeclaration(3251) at 0", "Insert SimpleName: statement(3250) into SingleVariableDeclaration(3251) at 1", "Insert PrimitiveType: boolean(3252) into SingleVariableDeclaration(3254) at 0", "Insert SimpleName: isDistinct(3253) into SingleVariableDeclaration(3254) at 1", "Insert ParameterizedType: List<AliasedNode>(3259) into SingleVariableDeclaration(3261) at 0", "Insert SimpleName: select(3260) into SingleVariableDeclaration(3261) at 1", "Insert ReturnStatement(3296) into Block(3297) at 0", "Insert SimpleName: SelectStatement(3300) into SimpleType: SelectStatement(3301) at 0", "Insert SimpleType: SelectStatement(3304) into SingleVariableDeclaration(3306) at 0", "Insert SimpleName: statement(3305) into SingleVariableDeclaration(3306) at 1", "Insert PrimitiveType: boolean(3307) into SingleVariableDeclaration(3309) at 0", "Insert SimpleName: isDistinct(3308) into SingleVariableDeclaration(3309) at 1", "Insert ParameterizedType: List<AliasedNode>(3314) into SingleVariableDeclaration(3316) at 0", "Insert SimpleName: select(3315) into SingleVariableDeclaration(3316) at 1", "Insert SimpleType: ParseNode(3318) into SingleVariableDeclaration(3320) at 0", "Insert SimpleName: where(3319) into SingleVariableDeclaration(3320) at 1", "Insert ReturnStatement(3353) into Block(3354) at 0", "Insert SimpleName: SelectStatement(3357) into SimpleType: SelectStatement(3358) at 0", "Insert SimpleType: SelectStatement(3361) into SingleVariableDeclaration(3363) at 0", "Insert SimpleName: statement(3362) into SingleVariableDeclaration(3363) at 1", "Insert ParameterizedType: List<AliasedNode>(3368) into SingleVariableDeclaration(3370) at 0", "Insert SimpleName: select(3369) into SingleVariableDeclaration(3370) at 1", "Insert SimpleType: ParseNode(3372) into SingleVariableDeclaration(3374) at 0", "Insert SimpleName: where(3373) into SingleVariableDeclaration(3374) at 1", "Insert ParameterizedType: List<ParseNode>(3379) into SingleVariableDeclaration(3381) at 0", "Insert SimpleName: groupBy(3380) into SingleVariableDeclaration(3381) at 1", "Insert PrimitiveType: boolean(3382) into SingleVariableDeclaration(3384) at 0", "Insert SimpleName: isAggregate(3383) into SingleVariableDeclaration(3384) at 1", "Insert ReturnStatement(3415) into Block(3416) at 0", "Insert SimpleName: SelectStatement(3191) into SimpleType: SelectStatement(3192) at 0", "Insert SimpleType: List(3196) into ParameterizedType: List<? extends TableNode>(3200) at 0", "Insert WildcardType: ? extends TableNode(3199) into ParameterizedType: List<? extends TableNode>(3200) at 1", "Insert SimpleName: ParseNode(3203) into SimpleType: ParseNode(3204) at 0", "Insert MethodInvocation(3240) into ReturnStatement(3241) at 0", "Insert SimpleName: SelectStatement(3248) into SimpleType: SelectStatement(3249) at 0", "Insert SimpleType: List(3256) into ParameterizedType: List<AliasedNode>(3259) at 0", "Insert SimpleType: AliasedNode(3258) into ParameterizedType: List<AliasedNode>(3259) at 1", "Insert MethodInvocation(3295) into ReturnStatement(3296) at 0", "Insert SimpleName: SelectStatement(3303) into SimpleType: SelectStatement(3304) at 0", "Insert SimpleType: List(3311) into ParameterizedType: List<AliasedNode>(3314) at 0", "Insert SimpleType: AliasedNode(3313) into ParameterizedType: List<AliasedNode>(3314) at 1", "Insert SimpleName: ParseNode(3317) into SimpleType: ParseNode(3318) at 0", "Insert MethodInvocation(3352) into ReturnStatement(3353) at 0", "Insert SimpleName: SelectStatement(3360) into SimpleType: SelectStatement(3361) at 0", "Insert SimpleType: List(3365) into ParameterizedType: List<AliasedNode>(3368) at 0", "Insert SimpleType: AliasedNode(3367) into ParameterizedType: List<AliasedNode>(3368) at 1", "Insert SimpleName: ParseNode(3371) into SimpleType: ParseNode(3372) at 0", "Insert SimpleType: List(3376) into ParameterizedType: List<ParseNode>(3379) at 0", "Insert SimpleType: ParseNode(3378) into ParameterizedType: List<ParseNode>(3379) at 1", "Insert MethodInvocation(3414) into ReturnStatement(3415) at 0", "Insert SimpleName: List(3195) into SimpleType: List(3196) at 0", "Insert SimpleType: TableNode(3198) into WildcardType: ? extends TableNode(3199) at 0", "Insert SimpleName: select(3207) into MethodInvocation(3240) at 0", "Insert SimpleName: tables(3208) into MethodInvocation(3240) at 1", "Insert MethodInvocation(3211) into MethodInvocation(3240) at 2", "Insert MethodInvocation(3214) into MethodInvocation(3240) at 3", "Insert MethodInvocation(3217) into MethodInvocation(3240) at 4", "Insert SimpleName: where(3218) into MethodInvocation(3240) at 5", "Insert MethodInvocation(3221) into MethodInvocation(3240) at 6", "Insert MethodInvocation(3224) into MethodInvocation(3240) at 7", "Insert MethodInvocation(3227) into MethodInvocation(3240) at 8", "Insert MethodInvocation(3230) into MethodInvocation(3240) at 9", "Insert MethodInvocation(3233) into MethodInvocation(3240) at 10", "Insert MethodInvocation(3236) into MethodInvocation(3240) at 11", "Insert MethodInvocation(3239) into MethodInvocation(3240) at 12", "Insert SimpleName: List(3255) into SimpleType: List(3256) at 0", "Insert SimpleName: AliasedNode(3257) into SimpleType: AliasedNode(3258) at 0", "Insert SimpleName: select(3262) into MethodInvocation(3295) at 0", "Insert MethodInvocation(3265) into MethodInvocation(3295) at 1", "Insert MethodInvocation(3268) into MethodInvocation(3295) at 2", "Insert SimpleName: isDistinct(3269) into MethodInvocation(3295) at 3", "Insert SimpleName: select(3270) into MethodInvocation(3295) at 4", "Insert MethodInvocation(3273) into MethodInvocation(3295) at 5", "Insert MethodInvocation(3276) into MethodInvocation(3295) at 6", "Insert MethodInvocation(3279) into MethodInvocation(3295) at 7", "Insert MethodInvocation(3282) into MethodInvocation(3295) at 8", "Insert MethodInvocation(3285) into MethodInvocation(3295) at 9", "Insert MethodInvocation(3288) into MethodInvocation(3295) at 10", "Insert MethodInvocation(3291) into MethodInvocation(3295) at 11", "Insert MethodInvocation(3294) into MethodInvocation(3295) at 12", "Insert SimpleName: List(3310) into SimpleType: List(3311) at 0", "Insert SimpleName: AliasedNode(3312) into SimpleType: AliasedNode(3313) at 0", "Insert SimpleName: select(3321) into MethodInvocation(3352) at 0", "Insert MethodInvocation(3324) into MethodInvocation(3352) at 1", "Insert MethodInvocation(3327) into MethodInvocation(3352) at 2", "Insert SimpleName: isDistinct(3328) into MethodInvocation(3352) at 3", "Insert SimpleName: select(3329) into MethodInvocation(3352) at 4", "Insert SimpleName: where(3330) into MethodInvocation(3352) at 5", "Insert MethodInvocation(3333) into MethodInvocation(3352) at 6", "Insert MethodInvocation(3336) into MethodInvocation(3352) at 7", "Insert MethodInvocation(3339) into MethodInvocation(3352) at 8", "Insert MethodInvocation(3342) into MethodInvocation(3352) at 9", "Insert MethodInvocation(3345) into MethodInvocation(3352) at 10", "Insert MethodInvocation(3348) into MethodInvocation(3352) at 11", "Insert MethodInvocation(3351) into MethodInvocation(3352) at 12", "Insert SimpleName: List(3364) into SimpleType: List(3365) at 0", "Insert SimpleName: AliasedNode(3366) into SimpleType: AliasedNode(3367) at 0", "Insert SimpleName: List(3375) into SimpleType: List(3376) at 0", "Insert SimpleName: ParseNode(3377) into SimpleType: ParseNode(3378) at 0", "Insert SimpleName: select(3385) into MethodInvocation(3414) at 0", "Insert MethodInvocation(3388) into MethodInvocation(3414) at 1", "Insert MethodInvocation(3391) into MethodInvocation(3414) at 2", "Insert MethodInvocation(3394) into MethodInvocation(3414) at 3", "Insert SimpleName: select(3395) into MethodInvocation(3414) at 4", "Insert SimpleName: where(3396) into MethodInvocation(3414) at 5", "Insert SimpleName: groupBy(3397) into MethodInvocation(3414) at 6", "Insert MethodInvocation(3400) into MethodInvocation(3414) at 7", "Insert MethodInvocation(3403) into MethodInvocation(3414) at 8", "Insert MethodInvocation(3406) into MethodInvocation(3414) at 9", "Insert MethodInvocation(3409) into MethodInvocation(3414) at 10", "Insert SimpleName: isAggregate(3410) into MethodInvocation(3414) at 11", "Insert MethodInvocation(3413) into MethodInvocation(3414) at 12", "Insert SimpleName: TableNode(3197) into SimpleType: TableNode(3198) at 0", "Insert SimpleName: statement(3209) into MethodInvocation(3211) at 0", "Insert SimpleName: getHint(3210) into MethodInvocation(3211) at 1", "Insert SimpleName: statement(3212) into MethodInvocation(3214) at 0", "Insert SimpleName: isDistinct(3213) into MethodInvocation(3214) at 1", "Insert SimpleName: statement(3215) into MethodInvocation(3217) at 0", "Insert SimpleName: getSelect(3216) into MethodInvocation(3217) at 1", "Insert SimpleName: statement(3219) into MethodInvocation(3221) at 0", "Insert SimpleName: getGroupBy(3220) into MethodInvocation(3221) at 1", "Insert SimpleName: statement(3222) into MethodInvocation(3224) at 0", "Insert SimpleName: getHaving(3223) into MethodInvocation(3224) at 1", "Insert SimpleName: statement(3225) into MethodInvocation(3227) at 0", "Insert SimpleName: getOrderBy(3226) into MethodInvocation(3227) at 1", "Insert SimpleName: statement(3228) into MethodInvocation(3230) at 0", "Insert SimpleName: getLimit(3229) into MethodInvocation(3230) at 1", "Insert SimpleName: statement(3231) into MethodInvocation(3233) at 0", "Insert SimpleName: getBindCount(3232) into MethodInvocation(3233) at 1", "Insert SimpleName: statement(3234) into MethodInvocation(3236) at 0", "Insert SimpleName: isAggregate(3235) into MethodInvocation(3236) at 1", "Insert SimpleName: statement(3237) into MethodInvocation(3239) at 0", "Insert SimpleName: hasSequence(3238) into MethodInvocation(3239) at 1", "Insert SimpleName: statement(3263) into MethodInvocation(3265) at 0", "Insert SimpleName: getFrom(3264) into MethodInvocation(3265) at 1", "Insert SimpleName: statement(3266) into MethodInvocation(3268) at 0", "Insert SimpleName: getHint(3267) into MethodInvocation(3268) at 1", "Insert SimpleName: statement(3271) into MethodInvocation(3273) at 0", "Insert SimpleName: getWhere(3272) into MethodInvocation(3273) at 1", "Insert SimpleName: statement(3274) into MethodInvocation(3276) at 0", "Insert SimpleName: getGroupBy(3275) into MethodInvocation(3276) at 1", "Insert SimpleName: statement(3277) into MethodInvocation(3279) at 0", "Insert SimpleName: getHaving(3278) into MethodInvocation(3279) at 1", "Insert SimpleName: statement(3280) into MethodInvocation(3282) at 0", "Insert SimpleName: getOrderBy(3281) into MethodInvocation(3282) at 1", "Insert SimpleName: statement(3283) into MethodInvocation(3285) at 0", "Insert SimpleName: getLimit(3284) into MethodInvocation(3285) at 1", "Insert SimpleName: statement(3286) into MethodInvocation(3288) at 0", "Insert SimpleName: getBindCount(3287) into MethodInvocation(3288) at 1", "Insert SimpleName: statement(3289) into MethodInvocation(3291) at 0", "Insert SimpleName: isAggregate(3290) into MethodInvocation(3291) at 1", "Insert SimpleName: statement(3292) into MethodInvocation(3294) at 0", "Insert SimpleName: hasSequence(3293) into MethodInvocation(3294) at 1", "Insert SimpleName: statement(3322) into MethodInvocation(3324) at 0", "Insert SimpleName: getFrom(3323) into MethodInvocation(3324) at 1", "Insert SimpleName: statement(3325) into MethodInvocation(3327) at 0", "Insert SimpleName: getHint(3326) into MethodInvocation(3327) at 1", "Insert SimpleName: statement(3331) into MethodInvocation(3333) at 0", "Insert SimpleName: getGroupBy(3332) into MethodInvocation(3333) at 1", "Insert SimpleName: statement(3334) into MethodInvocation(3336) at 0", "Insert SimpleName: getHaving(3335) into MethodInvocation(3336) at 1", "Insert SimpleName: statement(3337) into MethodInvocation(3339) at 0", "Insert SimpleName: getOrderBy(3338) into MethodInvocation(3339) at 1", "Insert SimpleName: statement(3340) into MethodInvocation(3342) at 0", "Insert SimpleName: getLimit(3341) into MethodInvocation(3342) at 1", "Insert SimpleName: statement(3343) into MethodInvocation(3345) at 0", "Insert SimpleName: getBindCount(3344) into MethodInvocation(3345) at 1", "Insert SimpleName: statement(3346) into MethodInvocation(3348) at 0", "Insert SimpleName: isAggregate(3347) into MethodInvocation(3348) at 1", "Insert SimpleName: statement(3349) into MethodInvocation(3351) at 0", "Insert SimpleName: hasSequence(3350) into MethodInvocation(3351) at 1", "Insert SimpleName: statement(3386) into MethodInvocation(3388) at 0", "Insert SimpleName: getFrom(3387) into MethodInvocation(3388) at 1", "Insert SimpleName: statement(3389) into MethodInvocation(3391) at 0", "Insert SimpleName: getHint(3390) into MethodInvocation(3391) at 1", "Insert SimpleName: statement(3392) into MethodInvocation(3394) at 0", "Insert SimpleName: isDistinct(3393) into MethodInvocation(3394) at 1", "Insert SimpleName: statement(3398) into MethodInvocation(3400) at 0", "Insert SimpleName: getHaving(3399) into MethodInvocation(3400) at 1", "Insert SimpleName: statement(3401) into MethodInvocation(3403) at 0", "Insert SimpleName: getOrderBy(3402) into MethodInvocation(3403) at 1", "Insert SimpleName: statement(3404) into MethodInvocation(3406) at 0", "Insert SimpleName: getLimit(3405) into MethodInvocation(3406) at 1", "Insert SimpleName: statement(3407) into MethodInvocation(3409) at 0", "Insert SimpleName: getBindCount(3408) into MethodInvocation(3409) at 1", "Insert SimpleName: statement(3411) into MethodInvocation(3413) at 0", "Insert SimpleName: hasSequence(3412) into MethodInvocation(3413) at 1"]}}], "commit_stats": [{"total_files": 5, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}