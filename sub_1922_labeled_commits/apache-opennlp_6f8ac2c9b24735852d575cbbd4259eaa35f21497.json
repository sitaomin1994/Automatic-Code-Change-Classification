{"application": "apache-opennlp", "csha": "6f8ac2c9b24735852d575cbbd4259eaa35f21497", "files": [{"NameFinderEventStream_cluster": {"actions": [{"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Deprecated to MarkerAnnotation at 0"]}, {"root": "INS TagElement: @deprecated to Javadoc at 5", "operations": ["INS TagElement: @deprecated to Javadoc at 5", "INS TextElement:  use the BioCodec implementation of the SequenceValidator instead! to TagElement: @deprecated at 0"]}]}}, {"NameFinderEventStream_diff": {"operations": ["Insert MarkerAnnotation(189) into MethodDeclaration(329) at 1", "Insert TagElement: @deprecated(186) into Javadoc(187) at 5", "Insert SimpleName: Deprecated(188) into MarkerAnnotation(189) at 0", "Insert TextElement:  use the BioCodec implementation of the SequenceValidator instead!(185) into TagElement: @deprecated(186) at 0"]}}, {"NameSampleSequenceStream_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS QualifiedName: opennlp.tools.util.SequenceCodec to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 8"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS ParameterizedType: SequenceCodec<String> to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS SimpleType: SequenceCodec to ParameterizedType: SequenceCodec<String> at 0", "INS SimpleName: String to SimpleType: String at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: String to ParameterizedType: SequenceCodec<String> at 1", "INS SimpleName: seqCodec to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: SequenceCodec to SimpleType: SequenceCodec at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: BioCodec to ClassInstanceCreation at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: pcg to SingleVariableDeclaration at 1", "INS ParameterizedType: ObjectStream<NameSample> to SingleVariableDeclaration at 0", "INS SimpleName: NameSampleSequenceStream to MethodDeclaration at 1", "INS SimpleName: psi to ConstructorInvocation at 0", "INS SimpleType: NameSample to ParameterizedType: ObjectStream<NameSample> at 1", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: useOutcomes to ConstructorInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS SimpleName: NameContextGenerator to SimpleType: NameContextGenerator at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: useOutcomes to SingleVariableDeclaration at 1", "INS SimpleName: psi to SingleVariableDeclaration at 1", "INS SimpleName: ObjectStream to SimpleType: ObjectStream at 0", "INS SimpleType: IOException to MethodDeclaration at 5", "INS ClassInstanceCreation to ConstructorInvocation at 3", "INS SimpleName: pcg to ConstructorInvocation at 1", "INS SimpleName: NameSample to SimpleType: NameSample at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<NameSample> at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to MethodDeclaration at 6", "INS ConstructorInvocation to Block at 0", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: BioCodec to SimpleType: BioCodec at 0", "INS SimpleType: NameContextGenerator to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleType: String to ParameterizedType: SequenceCodec<String> at 1", "INS SimpleName: SequenceCodec to SimpleType: SequenceCodec at 0", "INS ParameterizedType: SequenceCodec<String> to SingleVariableDeclaration at 0", "INS SimpleName: seqCodec to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: SequenceCodec to ParameterizedType: SequenceCodec<String> at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS SimpleName: seqCodec to Assignment: = at 1", "INS ExpressionStatement to Block at 3", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: seqCodec to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0"]}, {"root": "UPDATE from NameFinderEventStream to seqCodec", "operations": ["UPD SimpleName: NameFinderEventStream from NameFinderEventStream to seqCodec", "UPD SimpleName: NameFinderEventStream from NameFinderEventStream to seqCodec"]}, {"root": "UPDATE from generateOutcomes to encode", "operations": ["UPD SimpleName: generateOutcomes from generateOutcomes to encode", "UPD SimpleName: generateOutcomes from generateOutcomes to encode"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}]}}, {"NameSampleSequenceStream_diff": {"operations": ["Insert ImportDeclaration(17) into CompilationUnit(491) at 8", "Insert QualifiedName: opennlp.tools.util.SequenceCodec(16) into ImportDeclaration(17) at 0", "Insert FieldDeclaration(53) into TypeDeclaration: class(490) at 6", "Insert MethodDeclaration(175) into TypeDeclaration: class(490) at 11", "Insert Modifier: private(45) into FieldDeclaration(53) at 0", "Insert ParameterizedType: SequenceCodec<String>(50) into FieldDeclaration(53) at 1", "Insert VariableDeclarationFragment(52) into FieldDeclaration(53) at 2", "Insert Modifier: public(149) into MethodDeclaration(175) at 0", "Insert SimpleName: NameSampleSequenceStream(150) into MethodDeclaration(175) at 1", "Insert SingleVariableDeclaration(157) into MethodDeclaration(175) at 2", "Insert SingleVariableDeclaration(161) into MethodDeclaration(175) at 3", "Insert SingleVariableDeclaration(164) into MethodDeclaration(175) at 4", "Insert SimpleType: IOException(166) into MethodDeclaration(175) at 5", "Insert Block(174) into MethodDeclaration(175) at 6", "Insert SingleVariableDeclaration(198) into MethodDeclaration(226) at 5", "Insert SimpleType: SequenceCodec(47) into ParameterizedType: SequenceCodec<String>(50) at 0", "Insert SimpleType: String(49) into ParameterizedType: SequenceCodec<String>(50) at 1", "Insert SimpleName: seqCodec(51) into VariableDeclarationFragment(52) at 0", "Insert ParameterizedType: ObjectStream<NameSample>(155) into SingleVariableDeclaration(157) at 0", "Insert SimpleName: psi(156) into SingleVariableDeclaration(157) at 1", "Insert SimpleType: NameContextGenerator(159) into SingleVariableDeclaration(161) at 0", "Insert SimpleName: pcg(160) into SingleVariableDeclaration(161) at 1", "Insert PrimitiveType: boolean(162) into SingleVariableDeclaration(164) at 0", "Insert SimpleName: useOutcomes(163) into SingleVariableDeclaration(164) at 1", "Insert SimpleName: IOException(165) into SimpleType: IOException(166) at 0", "Insert ConstructorInvocation(173) into Block(174) at 0", "Insert ParameterizedType: SequenceCodec<String>(196) into SingleVariableDeclaration(198) at 0", "Insert SimpleName: seqCodec(197) into SingleVariableDeclaration(198) at 1", "Insert ExpressionStatement(224) into Block(225) at 3", "Insert SimpleName: SequenceCodec(46) into SimpleType: SequenceCodec(47) at 0", "Insert SimpleName: String(48) into SimpleType: String(49) at 0", "Insert SimpleType: ObjectStream(152) into ParameterizedType: ObjectStream<NameSample>(155) at 0", "Insert SimpleType: NameSample(154) into ParameterizedType: ObjectStream<NameSample>(155) at 1", "Insert SimpleName: NameContextGenerator(158) into SimpleType: NameContextGenerator(159) at 0", "Insert SimpleName: psi(167) into ConstructorInvocation(173) at 0", "Insert SimpleName: pcg(168) into ConstructorInvocation(173) at 1", "Insert SimpleName: useOutcomes(169) into ConstructorInvocation(173) at 2", "Insert ClassInstanceCreation(172) into ConstructorInvocation(173) at 3", "Insert SimpleType: SequenceCodec(193) into ParameterizedType: SequenceCodec<String>(196) at 0", "Insert SimpleType: String(195) into ParameterizedType: SequenceCodec<String>(196) at 1", "Insert Assignment: =(223) into ExpressionStatement(224) at 0", "Insert SimpleName: ObjectStream(151) into SimpleType: ObjectStream(152) at 0", "Insert SimpleName: NameSample(153) into SimpleType: NameSample(154) at 0", "Insert SimpleType: BioCodec(171) into ClassInstanceCreation(172) at 0", "Insert SimpleName: SequenceCodec(192) into SimpleType: SequenceCodec(193) at 0", "Insert SimpleName: String(194) into SimpleType: String(195) at 0", "Insert FieldAccess(221) into Assignment: =(223) at 0", "Insert SimpleName: seqCodec(222) into Assignment: =(223) at 1", "Insert SimpleName: BioCodec(170) into SimpleType: BioCodec(171) at 0", "Insert ThisExpression(219) into FieldAccess(221) at 0", "Insert SimpleName: seqCodec(220) into FieldAccess(221) at 1", "Update SimpleName: NameFinderEventStream(240) to seqCodec", "Update SimpleName: generateOutcomes(241) to encode", "Update SimpleName: NameFinderEventStream(310) to seqCodec", "Update SimpleName: generateOutcomes(311) to encode", "Delete NullLiteral(246)", "Delete NullLiteral(315)"]}}, {"TokenNameFinderCrossValidator_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 13", "operations": ["INS SimpleType: TokenNameFinderFactory to FieldDeclaration at 1", "INS SimpleName: TokenNameFinderFactory to SimpleType: TokenNameFinderFactory at 0", "INS FieldDeclaration to TypeDeclaration: class at 13", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: factory to VariableDeclarationFragment at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS SimpleName: factory to SingleVariableDeclaration at 1", "INS SimpleName: listeners to FieldAccess at 1", "INS Modifier: public to MethodDeclaration at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: TokenNameFinderEvaluationMonitor to SimpleType: TokenNameFinderEvaluationMonitor at 0", "INS SimpleName: trainParams to SingleVariableDeclaration at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: TokenNameFinderCrossValidator to MethodDeclaration at 1", "INS SimpleName: listeners to SingleVariableDeclaration at 1", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: factory to Assignment: = at 1", "INS SimpleName: TokenNameFinderFactory to SimpleType: TokenNameFinderFactory at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: languageCode to FieldAccess at 1", "INS SimpleType: TokenNameFinderFactory to SingleVariableDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: TrainingParameters to SimpleType: TrainingParameters at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS FieldAccess to Assignment: = at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: languageCode to SingleVariableDeclaration at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: type to Assignment: = at 1", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: type to FieldAccess at 1", "INS SimpleName: listeners to Assignment: = at 1", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS ExpressionStatement to Block at 1", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 3", "INS ExpressionStatement to Block at 2", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 4", "INS SimpleName: languageCode to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: type to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 7", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: trainParams to Assignment: = at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: factory to FieldAccess at 1", "INS SimpleType: TrainingParameters to SingleVariableDeclaration at 0", "INS SimpleType: TokenNameFinderEvaluationMonitor to SingleVariableDeclaration at 0", "INS SimpleName: params to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS Block to IfStatement at 1", "INS SimpleName: model to Assignment: = at 0", "INS SimpleName: languageCode to MethodInvocation at 2", "INS SimpleName: samples to MethodInvocation at 4", "INS SimpleName: factory to MethodInvocation at 6", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to Assignment: = at 1", "INS QualifiedName: opennlp.tools.namefind.NameFinderME to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: train to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: factory to InfixExpression: != at 0", "INS IfStatement to Block at 2", "INS Block to IfStatement at 2", "INS SimpleName: type to MethodInvocation at 3", "INS InfixExpression: != to IfStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: model to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: params to MethodInvocation at 5"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}]}}, {"TokenNameFinderCrossValidator_diff": {"operations": ["Insert FieldDeclaration(373) into TypeDeclaration: class(715) at 13", "Insert MethodDeclaration(575) into TypeDeclaration: class(715) at 16", "Insert Modifier: private(368) into FieldDeclaration(373) at 0", "Insert SimpleType: TokenNameFinderFactory(370) into FieldDeclaration(373) at 1", "Insert VariableDeclarationFragment(372) into FieldDeclaration(373) at 2", "Insert Modifier: public(522) into MethodDeclaration(575) at 0", "Insert SimpleName: TokenNameFinderCrossValidator(523) into MethodDeclaration(575) at 1", "Insert SingleVariableDeclaration(527) into MethodDeclaration(575) at 2", "Insert SingleVariableDeclaration(531) into MethodDeclaration(575) at 3", "Insert SingleVariableDeclaration(535) into MethodDeclaration(575) at 4", "Insert SingleVariableDeclaration(539) into MethodDeclaration(575) at 5", "Insert SingleVariableDeclaration(543) into MethodDeclaration(575) at 6", "Insert Block(574) into MethodDeclaration(575) at 7", "Insert SimpleName: TokenNameFinderFactory(369) into SimpleType: TokenNameFinderFactory(370) at 0", "Insert SimpleName: factory(371) into VariableDeclarationFragment(372) at 0", "Insert SimpleType: String(525) into SingleVariableDeclaration(527) at 0", "Insert SimpleName: languageCode(526) into SingleVariableDeclaration(527) at 1", "Insert SimpleType: String(529) into SingleVariableDeclaration(531) at 0", "Insert SimpleName: type(530) into SingleVariableDeclaration(531) at 1", "Insert SimpleType: TrainingParameters(533) into SingleVariableDeclaration(535) at 0", "Insert SimpleName: trainParams(534) into SingleVariableDeclaration(535) at 1", "Insert SimpleType: TokenNameFinderFactory(537) into SingleVariableDeclaration(539) at 0", "Insert SimpleName: factory(538) into SingleVariableDeclaration(539) at 1", "Insert SimpleType: TokenNameFinderEvaluationMonitor(541) into SingleVariableDeclaration(543) at 0", "Insert SimpleName: listeners(542) into SingleVariableDeclaration(543) at 1", "Insert ExpressionStatement(549) into Block(574) at 0", "Insert ExpressionStatement(555) into Block(574) at 1", "Insert ExpressionStatement(561) into Block(574) at 2", "Insert ExpressionStatement(567) into Block(574) at 3", "Insert ExpressionStatement(573) into Block(574) at 4", "Insert SimpleName: String(524) into SimpleType: String(525) at 0", "Insert SimpleName: String(528) into SimpleType: String(529) at 0", "Insert SimpleName: TrainingParameters(532) into SimpleType: TrainingParameters(533) at 0", "Insert SimpleName: TokenNameFinderFactory(536) into SimpleType: TokenNameFinderFactory(537) at 0", "Insert SimpleName: TokenNameFinderEvaluationMonitor(540) into SimpleType: TokenNameFinderEvaluationMonitor(541) at 0", "Insert Assignment: =(548) into ExpressionStatement(549) at 0", "Insert Assignment: =(554) into ExpressionStatement(555) at 0", "Insert Assignment: =(560) into ExpressionStatement(561) at 0", "Insert Assignment: =(566) into ExpressionStatement(567) at 0", "Insert Assignment: =(572) into ExpressionStatement(573) at 0", "Insert FieldAccess(546) into Assignment: =(548) at 0", "Insert SimpleName: languageCode(547) into Assignment: =(548) at 1", "Insert FieldAccess(552) into Assignment: =(554) at 0", "Insert SimpleName: type(553) into Assignment: =(554) at 1", "Insert FieldAccess(558) into Assignment: =(560) at 0", "Insert SimpleName: trainParams(559) into Assignment: =(560) at 1", "Insert FieldAccess(564) into Assignment: =(566) at 0", "Insert SimpleName: factory(565) into Assignment: =(566) at 1", "Insert FieldAccess(570) into Assignment: =(572) at 0", "Insert SimpleName: listeners(571) into Assignment: =(572) at 1", "Insert IfStatement(672) into Block(703) at 2", "Insert ThisExpression(544) into FieldAccess(546) at 0", "Insert SimpleName: languageCode(545) into FieldAccess(546) at 1", "Insert ThisExpression(550) into FieldAccess(552) at 0", "Insert SimpleName: type(551) into FieldAccess(552) at 1", "Insert ThisExpression(556) into FieldAccess(558) at 0", "Insert SimpleName: params(557) into FieldAccess(558) at 1", "Insert ThisExpression(562) into FieldAccess(564) at 0", "Insert SimpleName: factory(563) into FieldAccess(564) at 1", "Insert ThisExpression(568) into FieldAccess(570) at 0", "Insert SimpleName: listeners(569) into FieldAccess(570) at 1", "Insert InfixExpression: !=(642) into IfStatement(672) at 0", "Insert Block(654) into IfStatement(672) at 1", "Insert Block(671) into IfStatement(672) at 2", "Insert SimpleName: factory(640) into InfixExpression: !=(642) at 0", "Insert NullLiteral(641) into InfixExpression: !=(642) at 1", "Insert ExpressionStatement(653) into Block(654) at 0", "Insert ExpressionStatement(670) into Block(671) at 0", "Insert Assignment: =(652) into ExpressionStatement(653) at 0", "Insert Assignment: =(669) into ExpressionStatement(670) at 0", "Insert SimpleName: model(643) into Assignment: =(652) at 0", "Insert MethodInvocation(651) into Assignment: =(652) at 1", "Insert SimpleName: model(655) into Assignment: =(669) at 0", "Move MethodInvocation(592) into Assignment: =(669) at 1", "Insert QualifiedName: opennlp.tools.namefind.NameFinderME(644) into MethodInvocation(651) at 0", "Insert SimpleName: train(645) into MethodInvocation(651) at 1", "Insert SimpleName: languageCode(646) into MethodInvocation(651) at 2", "Insert SimpleName: type(647) into MethodInvocation(651) at 3", "Insert SimpleName: samples(648) into MethodInvocation(651) at 4", "Insert SimpleName: params(649) into MethodInvocation(651) at 5", "Insert SimpleName: factory(650) into MethodInvocation(651) at 6", "Delete Modifier: final(325)", "Delete Modifier: final(333)"]}}, {"TokenNameFinderModel_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS ImportDeclaration to CompilationUnit at 10", "INS QualifiedName: opennlp.tools.chunker.ChunkerFactory to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS ImportDeclaration to CompilationUnit at 14", "INS QualifiedName: opennlp.tools.util.BaseToolFactory to ImportDeclaration at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 22"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "UPDATE from public to protected", "operations": ["UPD Modifier: public from public to protected"]}, {"root": "UPDATE from SequenceCodec<String> to Class<? extends BaseToolFactory>", "operations": ["UPD ParameterizedType: SequenceCodec<String> from SequenceCodec<String> to Class<? extends BaseToolFactory>"]}, {"root": "UPDATE from createSequenceCodec to getDefaultFactory", "operations": ["UPD SimpleName: createSequenceCodec from createSequenceCodec to getDefaultFactory"]}, {"root": "INS SimpleType: TokenNameFinderFactory to MethodDeclaration at 2", "operations": ["INS SimpleType: TokenNameFinderFactory to MethodDeclaration at 2"]}, {"root": "INS SimpleName: getFactory to MethodDeclaration at 3", "operations": ["INS SimpleName: getFactory to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: AdaptiveFeatureGenerator to MethodDeclaration at 3", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Deprecated to MarkerAnnotation at 0"]}, {"root": "UPDATE from instantiateSequenceCodec to createFeatureGenerators", "operations": ["UPD SimpleName: instantiateSequenceCodec from instantiateSequenceCodec to createFeatureGenerators", "UPD SimpleName: instantiateExtension from instantiateExtension to createFeatureGenerators"]}, {"root": "INS Block to MethodDeclaration at 7", "operations": ["INS Block to MethodDeclaration at 7"]}, {"root": "UPDATE from SequenceCodec to Class", "operations": ["UPD SimpleType: SequenceCodec from SequenceCodec to Class", "UPD SimpleName: SequenceCodec from SequenceCodec to Class"]}, {"root": "INS WildcardType: ? extends BaseToolFactory to ParameterizedType: SequenceCodec<String> at 1", "operations": ["INS WildcardType: ? extends BaseToolFactory to ParameterizedType: SequenceCodec<String> at 1", "INS SimpleType: BaseToolFactory to WildcardType: ? extends BaseToolFactory at 0"]}, {"root": "UPDATE from AdaptiveFeatureGenerator to TokenNameFinderFactory", "operations": ["UPD SimpleName: AdaptiveFeatureGenerator from AdaptiveFeatureGenerator to TokenNameFinderFactory"]}, {"root": "MOVE from SimpleType: TokenNameFinderFactory", "operations": ["MOV SimpleName: AdaptiveFeatureGenerator to SimpleType: TokenNameFinderFactory at 0"]}, {"root": "INS TagElement: @deprecated to Javadoc at 2", "operations": ["INS TextElement:  use TokenNameFinderFactory.createFeatureGenerators instead! to TagElement: @deprecated at 0", "INS TagElement: @deprecated to Javadoc at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0"]}, {"root": "INS TypeLiteral to ReturnStatement at 0", "operations": ["INS TypeLiteral to ReturnStatement at 0", "INS SimpleType: TokenNameFinderFactory to TypeLiteral at 0", "INS SimpleName: TokenNameFinderFactory to SimpleType: TokenNameFinderFactory at 0"]}, {"root": "INS CastExpression to ReturnStatement at 0", "operations": ["INS FieldAccess to CastExpression at 1", "INS ThisExpression to FieldAccess at 0", "INS CastExpression to ReturnStatement at 0", "INS SimpleType: TokenNameFinderFactory to CastExpression at 0", "INS SimpleName: TokenNameFinderFactory to SimpleType: TokenNameFinderFactory at 0", "INS SimpleName: toolFactory to FieldAccess at 1"]}, {"root": "UPDATE from String to BaseToolFactory", "operations": ["UPD SimpleName: String from String to BaseToolFactory"]}, {"root": "MOVE from SimpleType: BaseToolFactory", "operations": ["MOV SimpleName: String to SimpleType: BaseToolFactory at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from ExtensionLoader to getFactory", "operations": ["UPD SimpleName: ExtensionLoader from ExtensionLoader to getFactory"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ExtensionLoader to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFactory to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFactory to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFactory to MethodInvocation at 0"]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}, {"root": "DEL SimpleType: String", "operations": ["DEL SimpleType: String"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL CastExpression", "DEL SimpleName: get", "DEL VariableDeclarationFragment", "DEL SimpleType: Properties", "DEL VariableDeclarationStatement", "DEL SimpleName: Properties", "DEL SimpleName: artifactMap", "DEL SimpleType: Properties", "DEL SimpleName: MANIFEST_ENTRY", "DEL SimpleName: Properties", "DEL SimpleName: manifest", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: manifest", "DEL SimpleName: getProperty", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleName: sequeceCodecImplName", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: SEQUENCE_CODEC_CLASS_NAME_PARAMETER"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: sequeceCodecImplName", "DEL SimpleName: instantiateSequenceCodec", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: artifactMap", "DEL SimpleName: get", "DEL SimpleName: key", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: createFeatureGenerators", "operations": ["DEL SimpleName: createFeatureGenerators"]}, {"root": "DEL Block", "operations": ["DEL ClassInstanceCreation", "DEL CastExpression", "DEL Modifier: public", "DEL InfixExpression: !=", "DEL Block", "DEL SimpleName: descriptorIn", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: InputStream", "DEL SimpleName: descriptorBytes", "DEL SimpleName: descriptorBytes", "DEL SimpleName: generator", "DEL MethodDeclaration", "DEL SimpleName: create", "DEL SimpleName: InvalidFormatException", "DEL Dimension", "DEL PrimitiveType: byte", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL SimpleName: get", "DEL SimpleName: Object", "DEL SimpleName: descriptorIn", "DEL SimpleName: e", "DEL CatchClause", "DEL ThrowStatement", "DEL SimpleName: artifactMap", "DEL Block", "DEL StringLiteral: \"Reading from mem cannot result in an I/O error\"", "DEL SimpleType: IOException", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL ThrowStatement", "DEL Block", "DEL SimpleName: GENERATOR_DESCRIPTOR_ENTRY_NAME", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL SimpleType: ByteArrayInputStream", "DEL TryStatement", "DEL SimpleName: getResource", "DEL NullLiteral", "DEL SimpleName: IllegalStateException", "DEL SimpleType: FeatureGeneratorCreationError", "DEL SimpleType: IllegalStateException", "DEL SimpleType: FeatureGeneratorResourceProvider", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL SimpleName: FeatureGeneratorCreationError", "DEL Dimension", "DEL Assignment: =", "DEL SimpleType: String", "DEL SimpleName: ByteArrayInputStream", "DEL SimpleName: descriptorBytes", "DEL AnonymousClassDeclaration", "DEL MethodInvocation", "DEL SimpleName: e", "DEL SimpleName: e", "DEL SimpleName: String", "DEL SimpleName: e", "DEL SimpleName: IOException", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: generator", "DEL MethodInvocation", "DEL CatchClause", "DEL SimpleName: generator", "DEL Block", "DEL SimpleType: AdaptiveFeatureGenerator", "DEL SimpleType: InvalidFormatException", "DEL NullLiteral", "DEL SimpleName: key", "DEL SimpleName: GeneratorFactory", "DEL Block", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL SimpleType: InputStream", "DEL VariableDeclarationFragment", "DEL ArrayType: byte[]", "DEL ReturnStatement", "DEL SimpleName: FeatureGeneratorResourceProvider", "DEL SimpleType: Object", "DEL PrimitiveType: byte"]}, {"root": "DEL Modifier: static", "operations": ["DEL Modifier: static"]}, {"root": "DEL ParameterizedType: SequenceCodec<String>", "operations": ["DEL SimpleName: SequenceCodec", "DEL ParameterizedType: SequenceCodec<String>", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleType: SequenceCodec"]}, {"root": "DEL TypeLiteral", "operations": ["DEL SimpleType: SequenceCodec", "DEL TypeLiteral", "DEL SimpleName: SequenceCodec"]}, {"root": "DEL SimpleName: sequenceCodecImplName", "operations": ["DEL SimpleName: sequenceCodecImplName"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL SimpleName: sequenceCodecImplName"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL Block", "DEL InfixExpression: !=", "DEL NullLiteral", "DEL Block", "DEL SimpleName: BioCodec", "DEL ReturnStatement", "DEL SimpleType: BioCodec", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL SimpleName: sequenceCodecImplName"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}]}}, {"TokenNameFinderModel_diff": {"operations": ["Insert ImportDeclaration(21) into CompilationUnit(999) at 10", "Insert ImportDeclaration(29) into CompilationUnit(999) at 14", "Move MethodDeclaration(1107) into TypeDeclaration: class(998) at 22", "Insert QualifiedName: opennlp.tools.chunker.ChunkerFactory(20) into ImportDeclaration(21) at 0", "Insert QualifiedName: opennlp.tools.util.BaseToolFactory(28) into ImportDeclaration(29) at 0", "Insert MarkerAnnotation(684) into MethodDeclaration(698) at 0", "Update Modifier: public(681) to protected", "Update ParameterizedType: SequenceCodec<String>(686) to Class<? extends BaseToolFactory>", "Update SimpleName: createSequenceCodec(687) to getDefaultFactory", "Insert SimpleType: TokenNameFinderFactory(701) into MethodDeclaration(711) at 1", "Insert SimpleName: getFactory(702) into MethodDeclaration(711) at 2", "Move Block(783) into MethodDeclaration(711) at 4", "Move Javadoc(728) into MethodDeclaration(740) at 0", "Insert MarkerAnnotation(729) into MethodDeclaration(740) at 1", "Move SimpleType: AdaptiveFeatureGenerator(731) into MethodDeclaration(740) at 3", "Update SimpleName: instantiateSequenceCodec(1083) to createFeatureGenerators", "Insert Block(739) into MethodDeclaration(740) at 5", "Insert SimpleName: Override(683) into MarkerAnnotation(684) at 0", "Update SimpleType: SequenceCodec(683) to Class", "Insert WildcardType: ? extends BaseToolFactory(690) into ParameterizedType: Class<? extends BaseToolFactory>(691) at 1", "Update SimpleName: AdaptiveFeatureGenerator(758) to TokenNameFinderFactory", "Move SimpleName: AdaptiveFeatureGenerator(758) into SimpleType: TokenNameFinderFactory(701) at 0", "Insert TagElement: @deprecated(726) into Javadoc(727) at 2", "Insert SimpleName: Deprecated(728) into MarkerAnnotation(729) at 0", "Move ReturnStatement(1098) into Block(739) at 0", "Update SimpleName: SequenceCodec(682) to Class", "Insert SimpleType: BaseToolFactory(689) into WildcardType: ? extends BaseToolFactory(690) at 0", "Insert TypeLiteral(695) into ReturnStatement(696) at 0", "Insert CastExpression(708) into ReturnStatement(709) at 0", "Insert TextElement:  use TokenNameFinderFactory.createFeatureGenerators instead!(725) into TagElement: @deprecated(726) at 0", "Update SimpleName: String(684) to BaseToolFactory", "Move SimpleName: String(684) into SimpleType: BaseToolFactory(689) at 0", "Insert SimpleType: TokenNameFinderFactory(694) into TypeLiteral(695) at 0", "Insert SimpleType: TokenNameFinderFactory(704) into CastExpression(708) at 0", "Insert FieldAccess(707) into CastExpression(708) at 1", "Insert MethodInvocation(735) into MethodInvocation(737) at 0", "Update SimpleName: instantiateExtension(1092) to createFeatureGenerators", "Insert SimpleName: TokenNameFinderFactory(693) into SimpleType: TokenNameFinderFactory(694) at 0", "Insert SimpleName: TokenNameFinderFactory(703) into SimpleType: TokenNameFinderFactory(704) at 0", "Insert ThisExpression(705) into FieldAccess(707) at 0", "Insert SimpleName: toolFactory(706) into FieldAccess(707) at 1", "Update SimpleName: ExtensionLoader(1091) to getFactory", "Move SimpleName: ExtensionLoader(1091) into MethodInvocation(735) at 0", "Insert MethodInvocation(954) into MethodInvocation(956) at 0", "Insert SimpleName: getFactory(953) into MethodInvocation(954) at 0", "Insert MethodInvocation(782) into MethodInvocation(784) at 0", "Insert MethodInvocation(812) into MethodInvocation(814) at 0", "Insert SimpleName: getFactory(781) into MethodInvocation(782) at 0", "Insert SimpleName: getFactory(811) into MethodInvocation(812) at 0", "Delete Modifier: private(148)", "Delete Modifier: private(157)", "Delete SimpleType: String(685)", "Delete SimpleName: Properties(688)", "Delete SimpleType: Properties(689)", "Delete SimpleName: manifest(690)", "Delete SimpleName: Properties(691)", "Delete SimpleType: Properties(692)", "Delete SimpleName: artifactMap(693)", "Delete SimpleName: get(694)", "Delete SimpleName: MANIFEST_ENTRY(695)", "Delete MethodInvocation(696)", "Delete CastExpression(697)", "Delete VariableDeclarationFragment(698)", "Delete VariableDeclarationStatement(699)", "Delete SimpleName: String(700)", "Delete SimpleType: String(701)", "Delete SimpleName: sequeceCodecImplName(702)", "Delete SimpleName: manifest(703)", "Delete SimpleName: getProperty(704)", "Delete SimpleName: SEQUENCE_CODEC_CLASS_NAME_PARAMETER(705)", "Delete MethodInvocation(706)", "Delete VariableDeclarationFragment(707)", "Delete VariableDeclarationStatement(708)", "Delete SimpleName: instantiateSequenceCodec(709)", "Delete SimpleName: sequeceCodecImplName(710)", "Delete MethodInvocation(711)", "Delete SimpleName: artifactMap(778)", "Delete SimpleName: get(779)", "Delete SimpleName: key(780)", "Delete MethodInvocation(781)", "Delete SimpleName: createFeatureGenerators(732)", "Delete PrimitiveType: byte(733)", "Delete SimpleName: descriptorBytes(734)", "Delete Dimension(735)", "Delete PrimitiveType: byte(736)", "Delete Dimension(737)", "Delete ArrayType: byte[](738)", "Delete SimpleName: artifactMap(739)", "Delete SimpleName: get(740)", "Delete SimpleName: GENERATOR_DESCRIPTOR_ENTRY_NAME(741)", "Delete MethodInvocation(742)", "Delete CastExpression(743)", "Delete VariableDeclarationFragment(744)", "Delete VariableDeclarationStatement(745)", "Delete SimpleName: descriptorBytes(746)", "Delete NullLiteral(747)", "Delete InfixExpression: !=(748)", "Delete SimpleName: InputStream(749)", "Delete SimpleType: InputStream(750)", "Delete SimpleName: descriptorIn(751)", "Delete SimpleName: ByteArrayInputStream(752)", "Delete SimpleType: ByteArrayInputStream(753)", "Delete SimpleName: descriptorBytes(754)", "Delete ClassInstanceCreation(755)", "Delete VariableDeclarationFragment(756)", "Delete VariableDeclarationStatement(757)", "Delete SimpleType: AdaptiveFeatureGenerator(759)", "Delete SimpleName: generator(760)", "Delete NullLiteral(761)", "Delete VariableDeclarationFragment(762)", "Delete VariableDeclarationStatement(763)", "Delete SimpleName: generator(764)", "Delete SimpleName: GeneratorFactory(765)", "Delete SimpleName: create(766)", "Delete SimpleName: descriptorIn(767)", "Delete SimpleName: FeatureGeneratorResourceProvider(768)", "Delete SimpleType: FeatureGeneratorResourceProvider(769)", "Delete Modifier: public(770)", "Delete SimpleName: Object(771)", "Delete SimpleType: Object(772)", "Delete SimpleName: getResource(773)", "Delete SimpleName: String(774)", "Delete SimpleType: String(775)", "Delete SimpleName: key(776)", "Delete SingleVariableDeclaration(777)", "Delete MethodDeclaration(784)", "Delete AnonymousClassDeclaration(785)", "Delete ClassInstanceCreation(786)", "Delete MethodInvocation(787)", "Delete Assignment: =(788)", "Delete ExpressionStatement(789)", "Delete Block(790)", "Delete SimpleName: InvalidFormatException(791)", "Delete SimpleType: InvalidFormatException(792)", "Delete SimpleName: e(793)", "Delete SingleVariableDeclaration(794)", "Delete SimpleName: FeatureGeneratorCreationError(795)", "Delete SimpleType: FeatureGeneratorCreationError(796)", "Delete SimpleName: e(797)", "Delete ClassInstanceCreation(798)", "Delete ThrowStatement(799)", "Delete Block(800)", "Delete CatchClause(801)", "Delete SimpleName: IOException(802)", "Delete SimpleType: IOException(803)", "Delete SimpleName: e(804)", "Delete SingleVariableDeclaration(805)", "Delete SimpleName: IllegalStateException(806)", "Delete SimpleType: IllegalStateException(807)", "Delete StringLiteral: \"Reading from mem cannot result in an I/O error\"(808)", "Delete SimpleName: e(809)", "Delete ClassInstanceCreation(810)", "Delete ThrowStatement(811)", "Delete Block(812)", "Delete CatchClause(813)", "Delete TryStatement(814)", "Delete SimpleName: generator(815)", "Delete ReturnStatement(816)", "Delete Block(817)", "Delete NullLiteral(818)", "Delete ReturnStatement(819)", "Delete Block(820)", "Delete IfStatement(821)", "Delete Block(822)", "Delete Modifier: static(1077)", "Delete SimpleName: SequenceCodec(1078)", "Delete SimpleType: SequenceCodec(1079)", "Delete SimpleName: String(1080)", "Delete SimpleType: String(1081)", "Delete ParameterizedType: SequenceCodec<String>(1082)", "Delete SimpleName: SequenceCodec(1093)", "Delete SimpleType: SequenceCodec(1094)", "Delete TypeLiteral(1095)", "Delete SimpleName: sequenceCodecImplName(1096)", "Delete SimpleName: String(1084)", "Delete SimpleType: String(1085)", "Delete SimpleName: sequenceCodecImplName(1086)", "Delete SingleVariableDeclaration(1087)", "Delete SimpleName: sequenceCodecImplName(1088)", "Delete NullLiteral(1089)", "Delete InfixExpression: !=(1090)", "Delete Block(1099)", "Delete SimpleName: BioCodec(1100)", "Delete SimpleType: BioCodec(1101)", "Delete ClassInstanceCreation(1102)", "Delete ReturnStatement(1103)", "Delete Block(1104)", "Delete IfStatement(1105)", "Delete Block(1106)", "Delete Modifier: public(989)"]}}, {"TokenNameFinderCrossValidatorTool_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 17", "operations": ["INS QualifiedName: opennlp.tools.namefind.TokenNameFinderFactory to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 17"]}, {"root": "INS ImportDeclaration to CompilationUnit at 19", "operations": ["INS QualifiedName: opennlp.tools.util.InvalidFormatException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 19"]}, {"root": "INS VariableDeclarationStatement to Block at 13", "operations": ["INS SimpleName: TokenNameFinderFactory to SimpleType: TokenNameFinderFactory at 0", "INS VariableDeclarationStatement to Block at 13", "INS NullLiteral to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: TokenNameFinderFactory to VariableDeclarationStatement at 0", "INS SimpleName: nameFinderFactory to VariableDeclarationFragment at 0"]}, {"root": "INS TryStatement to Block at 14", "operations": ["INS SimpleName: getMessage to MethodInvocation at 1", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: InvalidFormatException to SimpleType: InvalidFormatException at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: sequenceCodec to MethodInvocation at 5", "INS CatchClause to TryStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS PrefixExpression: - to ClassInstanceCreation at 1", "INS ThrowStatement to Block at 0", "INS SimpleType: TerminateToolException to ClassInstanceCreation at 0", "INS Block to CatchClause at 1", "INS MethodInvocation to Assignment: = at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: TokenNameFinderFactory to MethodInvocation at 0", "INS SimpleName: e to ClassInstanceCreation at 3", "INS SimpleName: getFactory to MethodInvocation at 1", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS MethodInvocation to ClassInstanceCreation at 2", "INS SimpleName: featureGeneratorBytes to MethodInvocation at 3", "INS SimpleName: create to MethodInvocation at 1", "INS TryStatement to Block at 14", "INS SimpleType: InvalidFormatException to SingleVariableDeclaration at 0", "INS SimpleName: nameFinderFactory to Assignment: = at 0", "INS SimpleName: resources to MethodInvocation at 4", "INS SimpleName: TerminateToolException to SimpleType: TerminateToolException at 0", "INS ExpressionStatement to Block at 0", "INS Block to TryStatement at 0", "INS SimpleName: params to MethodInvocation at 0"]}, {"root": "UPDATE from TokenNameFinderModel to TokenNameFinderFactory", "operations": ["UPD SimpleName: TokenNameFinderModel from TokenNameFinderModel to TokenNameFinderFactory"]}, {"root": "UPDATE from featureGeneratorBytes to nameFinderFactory", "operations": ["UPD SimpleName: featureGeneratorBytes from featureGeneratorBytes to nameFinderFactory"]}, {"root": "DEL SimpleName: resources", "operations": ["DEL SimpleName: resources"]}, {"root": "DEL SimpleName: sequenceCodec", "operations": ["DEL SimpleName: sequenceCodec"]}]}}, {"TokenNameFinderCrossValidatorTool_diff": {"operations": ["Insert ImportDeclaration(35) into CompilationUnit(417) at 17", "Insert ImportDeclaration(39) into CompilationUnit(417) at 19", "Insert QualifiedName: opennlp.tools.namefind.TokenNameFinderFactory(34) into ImportDeclaration(35) at 0", "Insert QualifiedName: opennlp.tools.util.InvalidFormatException(38) into ImportDeclaration(39) at 0", "Insert VariableDeclarationStatement(283) into Block(414) at 13", "Insert TryStatement(313) into Block(414) at 14", "Insert SimpleType: TokenNameFinderFactory(279) into VariableDeclarationStatement(283) at 0", "Insert VariableDeclarationFragment(282) into VariableDeclarationStatement(283) at 1", "Insert Block(296) into TryStatement(313) at 0", "Insert CatchClause(312) into TryStatement(313) at 1", "Insert SimpleName: TokenNameFinderFactory(278) into SimpleType: TokenNameFinderFactory(279) at 0", "Insert SimpleName: nameFinderFactory(280) into VariableDeclarationFragment(282) at 0", "Insert NullLiteral(281) into VariableDeclarationFragment(282) at 1", "Insert ExpressionStatement(295) into Block(296) at 0", "Insert SingleVariableDeclaration(300) into CatchClause(312) at 0", "Insert Block(311) into CatchClause(312) at 1", "Update SimpleName: TokenNameFinderModel(268) to TokenNameFinderFactory", "Insert Assignment: =(294) into ExpressionStatement(295) at 0", "Insert SimpleType: InvalidFormatException(298) into SingleVariableDeclaration(300) at 0", "Insert SimpleName: e(299) into SingleVariableDeclaration(300) at 1", "Insert ThrowStatement(310) into Block(311) at 0", "Insert SimpleName: nameFinderFactory(284) into Assignment: =(294) at 0", "Insert MethodInvocation(293) into Assignment: =(294) at 1", "Insert SimpleName: InvalidFormatException(297) into SimpleType: InvalidFormatException(298) at 0", "Insert ClassInstanceCreation(309) into ThrowStatement(310) at 0", "Insert SimpleName: TokenNameFinderFactory(285) into MethodInvocation(293) at 0", "Insert SimpleName: create(286) into MethodInvocation(293) at 1", "Insert MethodInvocation(289) into MethodInvocation(293) at 2", "Insert SimpleName: featureGeneratorBytes(290) into MethodInvocation(293) at 3", "Insert SimpleName: resources(291) into MethodInvocation(293) at 4", "Insert SimpleName: sequenceCodec(292) into MethodInvocation(293) at 5", "Insert SimpleType: TerminateToolException(302) into ClassInstanceCreation(309) at 0", "Insert PrefixExpression: -(304) into ClassInstanceCreation(309) at 1", "Insert MethodInvocation(307) into ClassInstanceCreation(309) at 2", "Insert SimpleName: e(308) into ClassInstanceCreation(309) at 3", "Update SimpleName: featureGeneratorBytes(289) to nameFinderFactory", "Insert SimpleName: params(287) into MethodInvocation(289) at 0", "Insert SimpleName: getFactory(288) into MethodInvocation(289) at 1", "Insert SimpleName: TerminateToolException(301) into SimpleType: TerminateToolException(302) at 0", "Insert NumberLiteral: 1(303) into PrefixExpression: -(304) at 0", "Insert SimpleName: e(305) into MethodInvocation(307) at 0", "Insert SimpleName: getMessage(306) into MethodInvocation(307) at 1", "Delete SimpleName: resources(290)", "Delete SimpleName: sequenceCodec(291)"]}}, {"TokenNameFinderTrainerTool_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 15", "operations": ["INS ImportDeclaration to CompilationUnit at 15", "INS QualifiedName: opennlp.tools.namefind.TokenNameFinderFactory to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 17", "operations": ["INS QualifiedName: opennlp.tools.postag.POSTaggerFactory to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 17"]}, {"root": "INS VariableDeclarationStatement to Block at 11", "operations": ["INS VariableDeclarationStatement to Block at 11", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: nameFinderFactory to VariableDeclarationFragment at 0", "INS SimpleType: TokenNameFinderFactory to VariableDeclarationStatement at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleName: TokenNameFinderFactory to SimpleType: TokenNameFinderFactory at 0"]}, {"root": "INS TryStatement to Block at 12", "operations": ["INS SimpleName: TokenNameFinderFactory to MethodInvocation at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS CatchClause to TryStatement at 1", "INS SimpleName: create to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: TerminateToolException to ClassInstanceCreation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleType: InvalidFormatException to SingleVariableDeclaration at 0", "INS SimpleName: sequenceCodec to MethodInvocation at 5", "INS SimpleName: TerminateToolException to SimpleType: TerminateToolException at 0", "INS SimpleName: nameFinderFactory to Assignment: = at 0", "INS Block to CatchClause at 1", "INS SimpleName: getFactory to MethodInvocation at 1", "INS TryStatement to Block at 12", "INS SingleVariableDeclaration to CatchClause at 0", "INS MethodInvocation to ClassInstanceCreation at 2", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: e to ClassInstanceCreation at 3", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: params to MethodInvocation at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS SimpleName: resources to MethodInvocation at 4", "INS Block to TryStatement at 0", "INS SimpleName: InvalidFormatException to SimpleType: InvalidFormatException at 0", "INS ThrowStatement to Block at 0", "INS PrefixExpression: - to ClassInstanceCreation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: featureGeneratorBytes to MethodInvocation at 3", "INS SimpleName: getMessage to MethodInvocation at 1"]}, {"root": "UPDATE from TokenNameFinderModel to TokenNameFinderFactory", "operations": ["UPD SimpleName: TokenNameFinderModel from TokenNameFinderModel to TokenNameFinderFactory"]}, {"root": "UPDATE from featureGeneratorBytes to nameFinderFactory", "operations": ["UPD SimpleName: featureGeneratorBytes from featureGeneratorBytes to nameFinderFactory"]}, {"root": "DEL SimpleName: resources", "operations": ["DEL SimpleName: resources"]}, {"root": "DEL SimpleName: sequenceCodec", "operations": ["DEL SimpleName: sequenceCodec"]}]}}, {"TokenNameFinderTrainerTool_diff": {"operations": ["Insert ImportDeclaration(31) into CompilationUnit(642) at 15", "Insert ImportDeclaration(35) into CompilationUnit(642) at 17", "Insert QualifiedName: opennlp.tools.namefind.TokenNameFinderFactory(30) into ImportDeclaration(31) at 0", "Insert QualifiedName: opennlp.tools.postag.POSTaggerFactory(34) into ImportDeclaration(35) at 0", "Insert VariableDeclarationStatement(548) into Block(639) at 11", "Insert TryStatement(578) into Block(639) at 12", "Insert SimpleType: TokenNameFinderFactory(544) into VariableDeclarationStatement(548) at 0", "Insert VariableDeclarationFragment(547) into VariableDeclarationStatement(548) at 1", "Insert Block(561) into TryStatement(578) at 0", "Insert CatchClause(577) into TryStatement(578) at 1", "Insert SimpleName: TokenNameFinderFactory(543) into SimpleType: TokenNameFinderFactory(544) at 0", "Insert SimpleName: nameFinderFactory(545) into VariableDeclarationFragment(547) at 0", "Insert NullLiteral(546) into VariableDeclarationFragment(547) at 1", "Insert ExpressionStatement(560) into Block(561) at 0", "Insert SingleVariableDeclaration(565) into CatchClause(577) at 0", "Insert Block(576) into CatchClause(577) at 1", "Update SimpleName: TokenNameFinderModel(533) to TokenNameFinderFactory", "Insert Assignment: =(559) into ExpressionStatement(560) at 0", "Insert SimpleType: InvalidFormatException(563) into SingleVariableDeclaration(565) at 0", "Insert SimpleName: e(564) into SingleVariableDeclaration(565) at 1", "Insert ThrowStatement(575) into Block(576) at 0", "Insert SimpleName: nameFinderFactory(549) into Assignment: =(559) at 0", "Insert MethodInvocation(558) into Assignment: =(559) at 1", "Insert SimpleName: InvalidFormatException(562) into SimpleType: InvalidFormatException(563) at 0", "Insert ClassInstanceCreation(574) into ThrowStatement(575) at 0", "Insert SimpleName: TokenNameFinderFactory(550) into MethodInvocation(558) at 0", "Insert SimpleName: create(551) into MethodInvocation(558) at 1", "Insert MethodInvocation(554) into MethodInvocation(558) at 2", "Insert SimpleName: featureGeneratorBytes(555) into MethodInvocation(558) at 3", "Insert SimpleName: resources(556) into MethodInvocation(558) at 4", "Insert SimpleName: sequenceCodec(557) into MethodInvocation(558) at 5", "Insert SimpleType: TerminateToolException(567) into ClassInstanceCreation(574) at 0", "Insert PrefixExpression: -(569) into ClassInstanceCreation(574) at 1", "Insert MethodInvocation(572) into ClassInstanceCreation(574) at 2", "Insert SimpleName: e(573) into ClassInstanceCreation(574) at 3", "Update SimpleName: featureGeneratorBytes(555) to nameFinderFactory", "Insert SimpleName: params(552) into MethodInvocation(554) at 0", "Insert SimpleName: getFactory(553) into MethodInvocation(554) at 1", "Insert SimpleName: TerminateToolException(566) into SimpleType: TerminateToolException(567) at 0", "Insert NumberLiteral: 1(568) into PrefixExpression: -(569) at 0", "Insert SimpleName: e(570) into MethodInvocation(572) at 0", "Insert SimpleName: getMessage(571) into MethodInvocation(572) at 1", "Delete SimpleName: resources(556)", "Delete SimpleName: sequenceCodec(557)"]}}, {"TrainingParams_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 8", "operations": ["INS SimpleName: valueName to MemberValuePair at 0", "INS StringLiteral: \"factoryName\" to MemberValuePair at 1", "INS MethodDeclaration to TypeDeclaration: interface at 8", "INS SimpleName: OptionalParameter to MarkerAnnotation at 0", "INS SimpleName: getFactory to MethodDeclaration at 3", "INS MemberValuePair to NormalAnnotation at 2", "INS SimpleName: ParameterDescription to NormalAnnotation at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: description to MemberValuePair at 0", "INS NormalAnnotation to MethodDeclaration at 0", "INS SimpleType: String to MethodDeclaration at 2", "INS MarkerAnnotation to MethodDeclaration at 1", "INS StringLiteral: \"A sub-class of TokenNameFinderFactory\" to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: opennlp.tools.namefind.BioCodec", "DEL ImportDeclaration"]}]}}, {"TrainingParams_diff": {"operations": ["Insert MethodDeclaration(106) into TypeDeclaration: interface(107) at 8", "Insert NormalAnnotation(100) into MethodDeclaration(106) at 0", "Insert MarkerAnnotation(102) into MethodDeclaration(106) at 1", "Insert SimpleType: String(104) into MethodDeclaration(106) at 2", "Insert SimpleName: getFactory(105) into MethodDeclaration(106) at 3", "Insert SimpleName: ParameterDescription(93) into NormalAnnotation(100) at 0", "Insert MemberValuePair(96) into NormalAnnotation(100) at 1", "Insert MemberValuePair(99) into NormalAnnotation(100) at 2", "Insert SimpleName: OptionalParameter(101) into MarkerAnnotation(102) at 0", "Insert SimpleName: String(103) into SimpleType: String(104) at 0", "Insert SimpleName: valueName(94) into MemberValuePair(96) at 0", "Insert StringLiteral: \"factoryName\"(95) into MemberValuePair(96) at 1", "Insert SimpleName: description(97) into MemberValuePair(99) at 0", "Insert StringLiteral: \"A sub-class of TokenNameFinderFactory\"(98) into MemberValuePair(99) at 1", "Delete QualifiedName: opennlp.tools.namefind.BioCodec(10)", "Delete ImportDeclaration(11)"]}}], "commit_stats": [{"total_files": 8, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}