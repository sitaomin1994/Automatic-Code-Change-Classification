{"application": "google-google-http-java-client", "csha": "7b0f422ec3696e980a9624f5699d42559e208c3a", "files": [{"JsonGenerator_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: com.google.common.base.Preconditions to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 24", "operations": ["INS SimpleName: value to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 24", "INS SimpleName: serialize to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 3", "INS BooleanLiteral: false to MethodInvocation at 1", "INS SimpleName: serialize to MethodDeclaration at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: final to MethodDeclaration at 2", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS SimpleName: value to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: IOException to MethodDeclaration at 6", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS Block to MethodDeclaration at 7", "INS ExpressionStatement to Block at 0", "INS SimpleName: Object to SimpleType: Object at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: isJsonString to SingleVariableDeclaration at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV InstanceofExpression to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InstanceofExpression to IfStatement at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS SimpleName: Preconditions to MethodInvocation at 0", "INS PrimitiveType: double to VariableDeclarationStatement at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS SimpleName: Preconditions to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Number to CastExpression at 0", "INS IfStatement to IfStatement at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 1", "INS InfixExpression: && to MethodInvocation at 2", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: Double to MethodInvocation at 0", "INS SimpleName: checkArgument to MethodInvocation at 1", "INS InfixExpression: && to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: writeNumber to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: isInfinite to MethodInvocation at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Float to MethodInvocation at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS IfStatement to IfStatement at 2", "INS IfStatement to IfStatement at 2", "INS SimpleName: Double to MethodInvocation at 0", "INS SimpleName: value to CastExpression at 1", "INS SimpleName: Number to SimpleType: Number at 0", "INS SimpleName: isInfinite to MethodInvocation at 1", "INS SimpleName: value to CastExpression at 1", "INS SimpleName: floatValue to MethodInvocation at 1", "INS SimpleName: writeString to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: doubleValue to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: floatValue to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: doubleValue to MethodInvocation at 1", "INS SimpleName: checkArgument to MethodInvocation at 1", "INS PrimitiveType: float to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS IfStatement to Block at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS CastExpression to ParenthesizedExpression at 0", "INS IfStatement to IfStatement at 2", "INS IfStatement to IfStatement at 2", "INS SimpleName: isNaN to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: Float to MethodInvocation at 0", "INS SimpleName: isJsonString to IfStatement at 0", "INS SimpleName: doubleValue to VariableDeclarationFragment at 0", "INS IfStatement to IfStatement at 2", "INS IfStatement to IfStatement at 2", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: writeNumber to MethodInvocation at 0", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS SimpleName: isNaN to MethodInvocation at 1", "INS CastExpression to ParenthesizedExpression at 0", "INS SimpleType: Number to CastExpression at 0", "INS ExpressionStatement to Block at 2", "INS Block to IfStatement at 2", "INS SimpleName: doubleValue to MethodInvocation at 2", "INS SimpleName: floatValue to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: value to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: Number to SimpleType: Number at 0", "INS SimpleName: doubleValue to MethodInvocation at 2", "INS SimpleName: floatValue to MethodInvocation at 1", "INS ParenthesizedExpression to MethodInvocation at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: floatValue to MethodInvocation at 2"]}, {"root": "UPDATE from fieldValue to value", "operations": ["UPD SimpleName: fieldValue from fieldValue to value"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InstanceofExpression to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV InstanceofExpression to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV InstanceofExpression to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InstanceofExpression to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InstanceofExpression to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InstanceofExpression to IfStatement at 0"]}, {"root": "INS SimpleName: isJsonString to MethodInvocation at 1", "operations": ["INS SimpleName: isJsonString to MethodInvocation at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV InfixExpression: || to IfStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: isJsonStringForField to VariableDeclarationFragment at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0"]}, {"root": "INS InstanceofExpression to IfStatement at 0", "operations": ["INS WildcardType: ? to ParameterizedType: Map<?,?> at 2", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleType: Map to ParameterizedType: Map<?,?> at 0", "INS SimpleName: value to InstanceofExpression at 0", "INS ParameterizedType: Map<?,?> to InstanceofExpression at 1", "INS WildcardType: ? to ParameterizedType: Map<?,?> at 1"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS SimpleName: isJsonStringForField to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: isJsonString to Assignment: = at 1", "INS Block to IfStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "INS SimpleName: isJsonStringForField to MethodInvocation at 1", "operations": ["INS SimpleName: isJsonStringForField to MethodInvocation at 1"]}, {"root": "INS SimpleName: isJsonStringForField to Assignment: = at 0", "operations": ["INS SimpleName: isJsonStringForField to Assignment: = at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV InfixExpression: && to Assignment: = at 1"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: Float", "DEL SimpleName: writeNumber", "DEL MethodInvocation", "DEL SimpleName: value", "DEL ExpressionStatement", "DEL SimpleType: Float", "DEL CastExpression", "DEL Block"]}, {"root": "DEL SimpleName: fieldValue", "operations": ["DEL SimpleName: fieldValue"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: toString", "DEL MethodInvocation", "DEL SimpleName: fieldValue"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: Double", "DEL SimpleName: value", "DEL SimpleType: Double", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: writeNumber", "DEL IfStatement", "DEL MethodInvocation", "DEL CastExpression", "DEL InstanceofExpression", "DEL SimpleName: Double", "DEL IfStatement", "DEL SimpleName: value", "DEL IfStatement", "DEL IfStatement", "DEL SimpleType: Double", "DEL Block", "DEL IfStatement"]}]}}, {"JsonGenerator_diff": {"operations": ["Insert ImportDeclaration(13) into CompilationUnit(778) at 6", "Insert QualifiedName: com.google.common.base.Preconditions(12) into ImportDeclaration(13) at 0", "Insert MethodDeclaration(332) into TypeDeclaration: class(777) at 24", "Move Javadoc(313) into MethodDeclaration(332) at 0", "Insert Modifier: public(316) into MethodDeclaration(332) at 1", "Insert Modifier: final(317) into MethodDeclaration(332) at 2", "Insert PrimitiveType: void(318) into MethodDeclaration(332) at 3", "Insert SimpleName: serialize(319) into MethodDeclaration(332) at 4", "Insert SingleVariableDeclaration(323) into MethodDeclaration(332) at 5", "Insert SimpleType: IOException(325) into MethodDeclaration(332) at 6", "Insert Block(331) into MethodDeclaration(332) at 7", "Update Modifier: public(314) to private", "Insert SingleVariableDeclaration(338) into MethodDeclaration(757) at 3", "Insert SimpleType: Object(321) into SingleVariableDeclaration(323) at 0", "Insert SimpleName: value(322) into SingleVariableDeclaration(323) at 1", "Insert SimpleName: IOException(324) into SimpleType: IOException(325) at 0", "Insert ExpressionStatement(330) into Block(331) at 0", "Insert PrimitiveType: boolean(336) into SingleVariableDeclaration(338) at 0", "Insert SimpleName: isJsonString(337) into SingleVariableDeclaration(338) at 1", "Move IfStatement(662) into Block(756) at 2", "Insert SimpleName: Object(320) into SimpleType: Object(321) at 0", "Insert MethodInvocation(329) into ExpressionStatement(330) at 0", "Move MethodInvocation(343) into IfStatement(755) at 0", "Move Block(347) into IfStatement(755) at 1", "Insert SimpleName: serialize(326) into MethodInvocation(329) at 0", "Insert BooleanLiteral: false(327) into MethodInvocation(329) at 1", "Insert SimpleName: value(328) into MethodInvocation(329) at 2", "Move InstanceofExpression(351) into IfStatement(754) at 0", "Move Block(359) into IfStatement(754) at 1", "Move InstanceofExpression(608) into IfStatement(753) at 0", "Insert Block(551) into IfStatement(753) at 1", "Update SimpleName: fieldValue(605) to value", "Insert IfStatement(550) into Block(551) at 0", "Insert SimpleName: isJsonString(385) into IfStatement(550) at 0", "Insert Block(392) into IfStatement(550) at 1", "Insert IfStatement(549) into IfStatement(550) at 2", "Insert ExpressionStatement(391) into Block(392) at 0", "Move InstanceofExpression(363) into IfStatement(549) at 0", "Move Block(371) into IfStatement(549) at 1", "Insert IfStatement(548) into IfStatement(549) at 2", "Insert MethodInvocation(390) into ExpressionStatement(391) at 0", "Move InstanceofExpression(375) into IfStatement(548) at 0", "Move Block(383) into IfStatement(548) at 1", "Insert IfStatement(547) into IfStatement(548) at 2", "Insert SimpleName: writeString(386) into MethodInvocation(390) at 0", "Insert MethodInvocation(389) into MethodInvocation(390) at 1", "Move InstanceofExpression(387) into IfStatement(547) at 0", "Move Block(395) into IfStatement(547) at 1", "Insert IfStatement(546) into IfStatement(547) at 2", "Insert SimpleName: value(387) into MethodInvocation(389) at 0", "Insert SimpleName: toString(388) into MethodInvocation(389) at 1", "Move InstanceofExpression(399) into IfStatement(546) at 0", "Move Block(407) into IfStatement(546) at 1", "Insert IfStatement(545) into IfStatement(546) at 2", "Move InstanceofExpression(423) into IfStatement(545) at 0", "Move Block(431) into IfStatement(545) at 1", "Insert IfStatement(544) into IfStatement(545) at 2", "Move InstanceofExpression(435) into IfStatement(544) at 0", "Insert Block(487) into IfStatement(544) at 1", "Insert IfStatement(543) into IfStatement(544) at 2", "Insert SimpleName: isJsonString(601) into MethodInvocation(603) at 1", "Insert VariableDeclarationStatement(467) into Block(487) at 0", "Insert ExpressionStatement(482) into Block(487) at 1", "Insert ExpressionStatement(486) into Block(487) at 2", "Move InfixExpression: ||(456) into IfStatement(543) at 0", "Move Block(467) into IfStatement(543) at 1", "Insert Block(542) into IfStatement(543) at 2", "Insert VariableDeclarationStatement(693) into Block(741) at 1", "Insert PrimitiveType: float(457) into VariableDeclarationStatement(467) at 0", "Insert VariableDeclarationFragment(466) into VariableDeclarationStatement(467) at 1", "Insert MethodInvocation(481) into ExpressionStatement(482) at 0", "Insert MethodInvocation(485) into ExpressionStatement(486) at 0", "Insert VariableDeclarationStatement(522) into Block(542) at 0", "Insert ExpressionStatement(537) into Block(542) at 1", "Insert ExpressionStatement(541) into Block(542) at 2", "Insert PrimitiveType: boolean(690) into VariableDeclarationStatement(693) at 0", "Insert VariableDeclarationFragment(692) into VariableDeclarationStatement(693) at 1", "Insert InstanceofExpression(700) into IfStatement(731) at 0", "Insert Block(705) into IfStatement(731) at 1", "Insert SimpleName: floatValue(458) into VariableDeclarationFragment(466) at 0", "Insert MethodInvocation(465) into VariableDeclarationFragment(466) at 1", "Insert SimpleName: Preconditions(468) into MethodInvocation(481) at 0", "Insert SimpleName: checkArgument(469) into MethodInvocation(481) at 1", "Insert InfixExpression: &&(480) into MethodInvocation(481) at 2", "Insert SimpleName: writeNumber(483) into MethodInvocation(485) at 0", "Insert SimpleName: floatValue(484) into MethodInvocation(485) at 1", "Insert PrimitiveType: double(512) into VariableDeclarationStatement(522) at 0", "Insert VariableDeclarationFragment(521) into VariableDeclarationStatement(522) at 1", "Insert MethodInvocation(536) into ExpressionStatement(537) at 0", "Insert MethodInvocation(540) into ExpressionStatement(541) at 0", "Insert SimpleName: isJsonStringForField(691) into VariableDeclarationFragment(692) at 0", "Insert SimpleName: value(694) into InstanceofExpression(700) at 0", "Insert ParameterizedType: Map<?,?>(699) into InstanceofExpression(700) at 1", "Insert ExpressionStatement(704) into Block(705) at 0", "Move ExpressionStatement(635) into Block(730) at 1", "Insert SimpleName: isJsonStringForField(737) into MethodInvocation(739) at 1", "Insert ParenthesizedExpression(463) into MethodInvocation(465) at 0", "Insert SimpleName: floatValue(464) into MethodInvocation(465) at 1", "Insert PrefixExpression: !(474) into InfixExpression: &&(480) at 0", "Insert PrefixExpression: !(479) into InfixExpression: &&(480) at 1", "Insert SimpleName: doubleValue(513) into VariableDeclarationFragment(521) at 0", "Insert MethodInvocation(520) into VariableDeclarationFragment(521) at 1", "Insert SimpleName: Preconditions(523) into MethodInvocation(536) at 0", "Insert SimpleName: checkArgument(524) into MethodInvocation(536) at 1", "Insert InfixExpression: &&(535) into MethodInvocation(536) at 2", "Insert SimpleName: writeNumber(538) into MethodInvocation(540) at 0", "Insert SimpleName: doubleValue(539) into MethodInvocation(540) at 1", "Insert SimpleType: Map(696) into ParameterizedType: Map<?,?>(699) at 0", "Insert WildcardType: ?(697) into ParameterizedType: Map<?,?>(699) at 1", "Insert WildcardType: ?(698) into ParameterizedType: Map<?,?>(699) at 2", "Insert Assignment: =(703) into ExpressionStatement(704) at 0", "Insert CastExpression(462) into ParenthesizedExpression(463) at 0", "Insert MethodInvocation(473) into PrefixExpression: !(474) at 0", "Insert MethodInvocation(478) into PrefixExpression: !(479) at 0", "Insert ParenthesizedExpression(518) into MethodInvocation(520) at 0", "Insert SimpleName: doubleValue(519) into MethodInvocation(520) at 1", "Insert PrefixExpression: !(529) into InfixExpression: &&(535) at 0", "Insert PrefixExpression: !(534) into InfixExpression: &&(535) at 1", "Insert SimpleName: Map(695) into SimpleType: Map(696) at 0", "Insert SimpleName: isJsonStringForField(701) into Assignment: =(703) at 0", "Insert SimpleName: isJsonString(702) into Assignment: =(703) at 1", "Insert SimpleName: isJsonStringForField(715) into Assignment: =(728) at 0", "Move InfixExpression: &&(629) into Assignment: =(728) at 1", "Insert SimpleType: Number(460) into CastExpression(462) at 0", "Insert SimpleName: value(461) into CastExpression(462) at 1", "Insert SimpleName: Float(470) into MethodInvocation(473) at 0", "Insert SimpleName: isInfinite(471) into MethodInvocation(473) at 1", "Insert SimpleName: floatValue(472) into MethodInvocation(473) at 2", "Insert SimpleName: Float(475) into MethodInvocation(478) at 0", "Insert SimpleName: isNaN(476) into MethodInvocation(478) at 1", "Insert SimpleName: floatValue(477) into MethodInvocation(478) at 2", "Insert CastExpression(517) into ParenthesizedExpression(518) at 0", "Insert MethodInvocation(528) into PrefixExpression: !(529) at 0", "Insert MethodInvocation(533) into PrefixExpression: !(534) at 0", "Insert SimpleName: Number(459) into SimpleType: Number(460) at 0", "Insert SimpleType: Number(515) into CastExpression(517) at 0", "Insert SimpleName: value(516) into CastExpression(517) at 1", "Insert SimpleName: Double(525) into MethodInvocation(528) at 0", "Insert SimpleName: isInfinite(526) into MethodInvocation(528) at 1", "Insert SimpleName: doubleValue(527) into MethodInvocation(528) at 2", "Insert SimpleName: Double(530) into MethodInvocation(533) at 0", "Insert SimpleName: isNaN(531) into MethodInvocation(533) at 1", "Insert SimpleName: doubleValue(532) into MethodInvocation(533) at 2", "Insert SimpleName: Number(514) into SimpleType: Number(515) at 0", "Delete Modifier: final(315)", "Delete SimpleName: writeNumber(436)", "Delete SimpleName: Float(437)", "Delete SimpleType: Float(438)", "Delete SimpleName: value(439)", "Delete CastExpression(440)", "Delete MethodInvocation(441)", "Delete ExpressionStatement(442)", "Delete Block(443)", "Delete SimpleName: fieldValue(630)", "Delete SimpleName: fieldValue(631)", "Delete SimpleName: toString(632)", "Delete MethodInvocation(633)", "Delete Block(636)", "Delete IfStatement(637)", "Delete SimpleName: value(408)", "Delete SimpleName: Double(409)", "Delete SimpleType: Double(410)", "Delete InstanceofExpression(411)", "Delete SimpleName: writeNumber(412)", "Delete SimpleName: Double(413)", "Delete SimpleType: Double(414)", "Delete SimpleName: value(415)", "Delete CastExpression(416)", "Delete MethodInvocation(417)", "Delete ExpressionStatement(418)", "Delete Block(419)", "Delete IfStatement(663)", "Delete IfStatement(664)", "Delete IfStatement(665)", "Delete IfStatement(666)", "Delete IfStatement(667)", "Delete IfStatement(668)", "Delete IfStatement(669)"]}}, {"JsonParser_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: Field to SimpleType: Field at 0", "INS SimpleType: Field to SingleVariableDeclaration at 0", "INS SimpleName: fieldContext to SingleVariableDeclaration at 1"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS TextElement:  for none to TagElement: @param at 3", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: context to TagElement: @param at 0", "INS TagElement: @code to TagElement: @param at 2", "INS TextElement:  null to TagElement: @code at 0", "INS TagElement: @param to Javadoc at 4", "INS TextElement:  for none to TagElement: @param at 3", "INS TagElement: @param to Javadoc at 5", "INS TagElement: @code to TagElement: @param at 2", "INS TagElement: @param to Javadoc at 3", "INS TextElement:  valueType of the map value type parameter to TagElement: @param at 1", "INS TextElement: Parse a JSON Object from the given JSON parser into the given destination map, optionally using to TagElement at 0", "INS TextElement:  field context or  to TagElement: @param at 1", "INS SimpleName: fieldContext to TagElement: @param at 0", "INS SimpleName: valueType to TagElement: @param at 0", "INS SimpleName: customizeParser to TagElement: @param at 0", "INS TextElement: the given parser customizer. to TagElement at 1", "INS TextElement:  destination map to TagElement: @param at 1", "INS TextElement:  null to TagElement: @code at 0", "INS TagElement: @param to Javadoc at 2", "INS TagElement to Javadoc at 0", "INS TextElement:  optional parser customizer or  to TagElement: @param at 1", "INS SimpleName: destinationMap to TagElement: @param at 0", "INS TextElement:  destination context stack (possibly empty) to TagElement: @param at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: Field to SimpleType: Field at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: fieldContext to SingleVariableDeclaration at 1", "INS SimpleType: Field to SingleVariableDeclaration at 0"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TextElement:  field context or  to TagElement: @param at 1", "INS TagElement: @code to TagElement: @param at 2", "INS TagElement: @param to Javadoc at 1", "INS TextElement:  null to TagElement: @code at 0", "INS TextElement:  for none to TagElement: @param at 3", "INS SimpleName: fieldContext to TagElement: @param at 0"]}, {"root": "INS TagElement: @param to Javadoc at 4", "operations": ["INS TagElement: @param to Javadoc at 4", "INS TextElement:  destination context stack (possibly empty) to TagElement: @param at 1", "INS SimpleName: context to TagElement: @param at 0"]}, {"root": "UPDATE from field to fieldContext", "operations": ["UPD SimpleName: field from field to fieldContext", "UPD SimpleName: field from field to fieldContext", "UPD SimpleName: field from field to fieldContext", "UPD SimpleName: field from field to fieldContext", "UPD SimpleName: field from field to fieldContext", "UPD SimpleName: field from field to fieldContext", "UPD SimpleName: field from field to fieldContext", "UPD SimpleName: field from field to fieldContext"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: currentName to VariableDeclarationFragment at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS VariableDeclarationStatement to Block at 4"]}, {"root": "INS VariableDeclarationStatement to Block at 5", "operations": ["INS VariableDeclarationStatement to Block at 5", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: StringBuilder to VariableDeclarationStatement at 0", "INS SimpleName: contextStringBuilder to VariableDeclarationFragment at 0", "INS SimpleType: StringBuilder to ClassInstanceCreation at 0"]}, {"root": "INS IfStatement to Block at 6", "operations": ["INS SimpleName: currentName to InfixExpression: != at 0", "INS InfixExpression: != to IfStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS IfStatement to Block at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: currentName to MethodInvocation at 2", "INS SimpleName: currentName to InfixExpression: != at 0", "INS SimpleName: append to MethodInvocation at 1", "INS IfStatement to Block at 0", "INS IfStatement to Block at 6", "INS InfixExpression: || to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: contextStringBuilder to MethodInvocation at 0", "INS SimpleName: currentName to InfixExpression: != at 0", "INS SimpleName: contextStringBuilder to MethodInvocation at 0", "INS IfStatement to Block at 2", "INS StringLiteral: \"]\" to MethodInvocation at 2", "INS SimpleName: fieldContext to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: fieldContext to InfixExpression: != at 0", "INS ExpressionStatement to Block at 3", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \" [\" to MethodInvocation at 2", "INS SimpleName: append to MethodInvocation at 1", "INS InfixExpression: != to InfixExpression: || at 1", "INS SimpleName: contextStringBuilder to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: fieldContext to InfixExpression: != at 0", "INS SimpleName: contextStringBuilder to MethodInvocation at 0", "INS StringLiteral: \"key \" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: append to MethodInvocation at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: append to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: append to MethodInvocation at 1", "INS StringLiteral: \"field \" to MethodInvocation at 2", "INS SimpleName: contextStringBuilder to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \", \" to MethodInvocation at 2", "INS SimpleName: append to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: append to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to InfixExpression: || at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 7", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: contextString to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 7", "INS SimpleName: contextStringBuilder to MethodInvocation at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from  of the current object if no matching key is found, or the value to  of the current object if no matching key is found, or the value of", "operations": ["UPD TextElement:  of the current object if no matching key is found, or the value from  of the current object if no matching key is found, or the value to  of the current object if no matching key is found, or the value of"]}, {"root": "UPDATE from of the key that was found. to the key that was found.", "operations": ["UPD TextElement: of the key that was found. from of the key that was found. to the key that was found."]}, {"root": "UPDATE from  field or  to  field context or ", "operations": ["UPD TextElement:  field or  from  field or  to  field context or "]}, {"root": "INS NullLiteral to MethodInvocation at 1", "operations": ["INS NullLiteral to MethodInvocation at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from \"%s: expected collection or array type but got %s for field %s\" to \"expected collection or array type but got %s%s\"", "operations": ["UPD StringLiteral: \"%s: expected collection or array type but got %s for field %s\" from \"%s: expected collection or array type but got %s for field %s\" to \"expected collection or array type but got %s%s\""]}, {"root": "UPDATE from field to contextString", "operations": ["UPD SimpleName: field from field to contextString", "UPD SimpleName: getCurrentName from getCurrentName to contextString", "UPD SimpleName: field from field to contextString", "UPD SimpleName: field from field to contextString", "UPD SimpleName: getCurrentName from getCurrentName to contextString", "UPD SimpleName: getCurrentName from getCurrentName to contextString", "UPD SimpleName: field from field to contextString"]}, {"root": "INS SimpleName: fieldContext to MethodInvocation at 1", "operations": ["INS SimpleName: fieldContext to MethodInvocation at 1"]}, {"root": "UPDATE from \"%s: expected object or map type but got %s for field %s\" to \"expected object or map type but got %s%s\"", "operations": ["UPD StringLiteral: \"%s: expected object or map type but got %s for field %s\" from \"%s: expected object or map type but got %s for field %s\" to \"expected object or map type but got %s%s\""]}, {"root": "INS StringLiteral: \"expected type Boolean or boolean but got %s%s\" to MethodInvocation at 3", "operations": ["INS StringLiteral: \"expected type Boolean or boolean but got %s%s\" to MethodInvocation at 3"]}, {"root": "INS StringLiteral: \"number type formatted as a JSON number cannot use @JsonString annotation%s\" to MethodInvocation at 3", "operations": ["INS StringLiteral: \"number type formatted as a JSON number cannot use @JsonString annotation%s\" to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getCurrentName to MethodInvocation at 4"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: IllegalArgumentException to ClassInstanceCreation at 0"]}, {"root": "UPDATE from \"%s: number field formatted as a JSON string must use the @JsonString annotation: %s\" to \"number field formatted as a JSON string must use the @JsonString annotation%s\"", "operations": ["UPD StringLiteral: \"%s: number field formatted as a JSON string must use the @JsonString annotation: %s\" from \"%s: number field formatted as a JSON string must use the @JsonString annotation: %s\" to \"number field formatted as a JSON string must use the @JsonString annotation%s\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getCurrentName to MethodInvocation at 4"]}, {"root": "UPDATE from \"%s: primitive number field but found a JSON null: %s\" to \"primitive number field but found a JSON null%s\"", "operations": ["UPD StringLiteral: \"%s: primitive number field but found a JSON null: %s\" from \"%s: primitive number field but found a JSON null: %s\" to \"primitive number field but found a JSON null%s\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getCurrentName to MethodInvocation at 4"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: IllegalArgumentException to ClassInstanceCreation at 0"]}, {"root": "INS NullLiteral to MethodInvocation at 1", "operations": ["INS NullLiteral to MethodInvocation at 1"]}, {"root": "UPDATE from \": expected numeric type but got \" to \"expected numeric type but got \"", "operations": ["UPD StringLiteral: \": expected numeric type but got \" from \": expected numeric type but got \" to \"expected numeric type but got \""]}, {"root": "UPDATE from \": unexpected JSON node type: \" to \"unexpected JSON node type: \"", "operations": ["UPD StringLiteral: \": unexpected JSON node type: \" from \": unexpected JSON node type: \" to \"unexpected JSON node type: \""]}, {"root": "INS SimpleName: contextString to InfixExpression: + at 3", "operations": ["INS SimpleName: contextString to InfixExpression: + at 3"]}, {"root": "INS SimpleName: fieldContext to MethodInvocation at 1", "operations": ["INS SimpleName: fieldContext to MethodInvocation at 1"]}, {"root": "INS SimpleName: fieldContext to MethodInvocation at 1", "operations": ["INS SimpleName: fieldContext to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV TypeLiteral to MethodInvocation at 2"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: IllegalArgumentException to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: contextString to ClassInstanceCreation at 1", "operations": ["INS SimpleName: contextString to ClassInstanceCreation at 1"]}, {"root": "INS SimpleName: fieldContext to MethodInvocation at 1", "operations": ["INS SimpleName: fieldContext to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV TypeLiteral to MethodInvocation at 2"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getCurrentName"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getCurrentName", "DEL MethodInvocation"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL SimpleName: field", "DEL InfixExpression: +", "DEL StringLiteral: \"%s: expected type Boolean or boolean but got %s for field %s\""]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getCurrentName"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL InfixExpression: +", "DEL StringLiteral: \"the field %s\"", "DEL StringLiteral: \"%s: number type formatted as a JSON number cannot use @JsonString annotation on \""]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: field", "operations": ["DEL SimpleName: field"]}, {"root": "DEL StringLiteral: \" for field \"", "operations": ["DEL StringLiteral: \" for field \""]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: field", "operations": ["DEL SimpleName: field"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL MethodInvocation", "DEL InfixExpression: +", "DEL StringLiteral: \" for field \"", "DEL SimpleName: field", "DEL SimpleName: getCurrentName"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: field", "operations": ["DEL SimpleName: field"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getCurrentName", "DEL MethodInvocation"]}]}}, {"JsonParser_diff": {"operations": ["Insert SingleVariableDeclaration(1446) into MethodDeclaration(1512) at 5", "Insert Javadoc(1537) into MethodDeclaration(1629) at 0", "Insert SingleVariableDeclaration(1544) into MethodDeclaration(1629) at 4", "Insert TagElement: @param(1421) into Javadoc(1437) at 1", "Insert TagElement: @param(1430) into Javadoc(1437) at 4", "Insert SimpleType: Field(1444) into SingleVariableDeclaration(1446) at 0", "Insert SimpleName: fieldContext(1445) into SingleVariableDeclaration(1446) at 1", "Insert TagElement(1515) into Javadoc(1537) at 0", "Insert TagElement: @param(1521) into Javadoc(1537) at 1", "Insert TagElement: @param(1524) into Javadoc(1537) at 2", "Insert TagElement: @param(1527) into Javadoc(1537) at 3", "Insert TagElement: @param(1530) into Javadoc(1537) at 4", "Insert TagElement: @param(1536) into Javadoc(1537) at 5", "Insert SimpleType: Field(1542) into SingleVariableDeclaration(1544) at 0", "Insert SimpleName: fieldContext(1543) into SingleVariableDeclaration(1544) at 1", "Update SimpleName: field(1626) to fieldContext", "Insert VariableDeclarationStatement(1751) into Block(2492) at 4", "Insert VariableDeclarationStatement(1759) into Block(2492) at 5", "Insert IfStatement(1814) into Block(2492) at 6", "Insert VariableDeclarationStatement(1822) into Block(2492) at 7", "Update TextElement:  of the current object if no matching key is found, or the value(411) to  of the current object if no matching key is found, or the value of", "Update TextElement: of the key that was found.(412) to the key that was found.", "Insert SimpleName: fieldContext(1416) into TagElement: @param(1421) at 0", "Insert TextElement:  field context or (1417) into TagElement: @param(1421) at 1", "Insert TagElement: @code(1419) into TagElement: @param(1421) at 2", "Insert TextElement:  for none(1420) into TagElement: @param(1421) at 3", "Insert SimpleName: context(1428) into TagElement: @param(1430) at 0", "Insert TextElement:  destination context stack (possibly empty)(1429) into TagElement: @param(1430) at 1", "Insert SimpleName: Field(1443) into SimpleType: Field(1444) at 0", "Insert TextElement: Parse a JSON Object from the given JSON parser into the given destination map, optionally using(1513) into TagElement(1515) at 0", "Insert TextElement: the given parser customizer.(1514) into TagElement(1515) at 1", "Insert SimpleName: fieldContext(1516) into TagElement: @param(1521) at 0", "Insert TextElement:  field context or (1517) into TagElement: @param(1521) at 1", "Insert TagElement: @code(1519) into TagElement: @param(1521) at 2", "Insert TextElement:  for none(1520) into TagElement: @param(1521) at 3", "Insert SimpleName: destinationMap(1522) into TagElement: @param(1524) at 0", "Insert TextElement:  destination map(1523) into TagElement: @param(1524) at 1", "Insert SimpleName: valueType(1525) into TagElement: @param(1527) at 0", "Insert TextElement:  valueType of the map value type parameter(1526) into TagElement: @param(1527) at 1", "Insert SimpleName: context(1528) into TagElement: @param(1530) at 0", "Insert TextElement:  destination context stack (possibly empty)(1529) into TagElement: @param(1530) at 1", "Insert SimpleName: customizeParser(1531) into TagElement: @param(1536) at 0", "Insert TextElement:  optional parser customizer or (1532) into TagElement: @param(1536) at 1", "Insert TagElement: @code(1534) into TagElement: @param(1536) at 2", "Insert TextElement:  for none(1535) into TagElement: @param(1536) at 3", "Insert SimpleName: Field(1541) into SimpleType: Field(1542) at 0", "Update SimpleName: field(1588) to fieldContext", "Update TextElement:  field or (1589) to  field context or ", "Insert SimpleType: String(1746) into VariableDeclarationStatement(1751) at 0", "Insert VariableDeclarationFragment(1750) into VariableDeclarationStatement(1751) at 1", "Insert SimpleType: StringBuilder(1753) into VariableDeclarationStatement(1759) at 0", "Insert VariableDeclarationFragment(1758) into VariableDeclarationStatement(1759) at 1", "Insert InfixExpression: ||(1766) into IfStatement(1814) at 0", "Insert Block(1813) into IfStatement(1814) at 1", "Insert SimpleType: String(1816) into VariableDeclarationStatement(1822) at 0", "Insert VariableDeclarationFragment(1821) into VariableDeclarationStatement(1822) at 1", "Insert NullLiteral(1399) into MethodInvocation(1409) at 1", "Insert TextElement:  null(1418) into TagElement: @code(1419) at 0", "Insert TextElement:  null(1518) into TagElement: @code(1519) at 0", "Insert TextElement:  null(1533) into TagElement: @code(1534) at 0", "Insert SimpleName: String(1745) into SimpleType: String(1746) at 0", "Insert SimpleName: currentName(1747) into VariableDeclarationFragment(1750) at 0", "Move MethodInvocation(2232) into VariableDeclarationFragment(1750) at 1", "Insert SimpleName: StringBuilder(1752) into SimpleType: StringBuilder(1753) at 0", "Insert SimpleName: contextStringBuilder(1754) into VariableDeclarationFragment(1758) at 0", "Insert ClassInstanceCreation(1757) into VariableDeclarationFragment(1758) at 1", "Insert InfixExpression: !=(1762) into InfixExpression: ||(1766) at 0", "Insert InfixExpression: !=(1765) into InfixExpression: ||(1766) at 1", "Insert ExpressionStatement(1771) into Block(1813) at 0", "Insert IfStatement(1784) into Block(1813) at 1", "Insert IfStatement(1807) into Block(1813) at 2", "Insert ExpressionStatement(1812) into Block(1813) at 3", "Insert SimpleName: String(1815) into SimpleType: String(1816) at 0", "Insert SimpleName: contextString(1817) into VariableDeclarationFragment(1821) at 0", "Insert MethodInvocation(1820) into VariableDeclarationFragment(1821) at 1", "Insert SimpleType: StringBuilder(1756) into ClassInstanceCreation(1757) at 0", "Insert SimpleName: currentName(1760) into InfixExpression: !=(1762) at 0", "Insert NullLiteral(1761) into InfixExpression: !=(1762) at 1", "Insert SimpleName: fieldContext(1763) into InfixExpression: !=(1765) at 0", "Insert NullLiteral(1764) into InfixExpression: !=(1765) at 1", "Insert MethodInvocation(1770) into ExpressionStatement(1771) at 0", "Insert InfixExpression: !=(1774) into IfStatement(1784) at 0", "Insert Block(1783) into IfStatement(1784) at 1", "Insert InfixExpression: !=(1787) into IfStatement(1807) at 0", "Insert Block(1806) into IfStatement(1807) at 1", "Insert MethodInvocation(1811) into ExpressionStatement(1812) at 0", "Insert SimpleName: contextStringBuilder(1818) into MethodInvocation(1820) at 0", "Insert SimpleName: toString(1819) into MethodInvocation(1820) at 1", "Update StringLiteral: \"%s: expected collection or array type but got %s for field %s\"(1733) to \"expected collection or array type but got %s%s\"", "Update SimpleName: field(1737) to contextString", "Insert SimpleName: fieldContext(1942) into MethodInvocation(1947) at 1", "Update StringLiteral: \"%s: expected object or map type but got %s for field %s\"(1856) to \"expected object or map type but got %s%s\"", "Update SimpleName: field(1860) to contextString", "Insert StringLiteral: \"expected type Boolean or boolean but got %s%s\"(2172) into MethodInvocation(2175) at 3", "Update SimpleName: field(2058) to contextString", "Insert StringLiteral: \"number type formatted as a JSON number cannot use @JsonString annotation%s\"(2202) into MethodInvocation(2204) at 3", "Update SimpleName: getCurrentName(2089) to contextString", "Move SimpleName: getCurrentName(2089) into MethodInvocation(2204) at 4", "Move SimpleType: IllegalArgumentException(2287) into ClassInstanceCreation(2347) at 0", "Update StringLiteral: \"%s: number field formatted as a JSON string must use the @JsonString annotation: %s\"(2268) to \"number field formatted as a JSON string must use the @JsonString annotation%s\"", "Update SimpleName: getCurrentName(2269) to contextString", "Move SimpleName: getCurrentName(2269) into MethodInvocation(2379) at 4", "Update StringLiteral: \"%s: primitive number field but found a JSON null: %s\"(2311) to \"primitive number field but found a JSON null%s\"", "Update SimpleName: getCurrentName(2312) to contextString", "Move SimpleName: getCurrentName(2312) into MethodInvocation(2416) at 4", "Move SimpleType: IllegalArgumentException(2230) into ClassInstanceCreation(2489) at 0", "Insert NullLiteral(995) into MethodInvocation(1003) at 1", "Insert SimpleName: StringBuilder(1755) into SimpleType: StringBuilder(1756) at 0", "Insert SimpleName: contextStringBuilder(1767) into MethodInvocation(1770) at 0", "Insert SimpleName: append(1768) into MethodInvocation(1770) at 1", "Insert StringLiteral: \" [\"(1769) into MethodInvocation(1770) at 2", "Insert SimpleName: currentName(1772) into InfixExpression: !=(1774) at 0", "Insert NullLiteral(1773) into InfixExpression: !=(1774) at 1", "Insert ExpressionStatement(1782) into Block(1783) at 0", "Insert SimpleName: fieldContext(1785) into InfixExpression: !=(1787) at 0", "Insert NullLiteral(1786) into InfixExpression: !=(1787) at 1", "Insert IfStatement(1797) into Block(1806) at 0", "Insert ExpressionStatement(1805) into Block(1806) at 1", "Insert SimpleName: contextStringBuilder(1808) into MethodInvocation(1811) at 0", "Insert SimpleName: append(1809) into MethodInvocation(1811) at 1", "Insert StringLiteral: \"]\"(1810) into MethodInvocation(1811) at 2", "Update SimpleName: field(1752) to fieldContext", "Update StringLiteral: \": expected numeric type but got \"(2233) to \"expected numeric type but got \"", "Update SimpleName: field(2236) to contextString", "Update StringLiteral: \": unexpected JSON node type: \"(2386) to \"unexpected JSON node type: \"", "Insert SimpleName: contextString(2487) into InfixExpression: +(2488) at 2", "Insert SimpleName: fieldContext(1607) into MethodInvocation(1612) at 1", "Insert MethodInvocation(1781) into ExpressionStatement(1782) at 0", "Insert InfixExpression: !=(1790) into IfStatement(1797) at 0", "Insert Block(1796) into IfStatement(1797) at 1", "Insert MethodInvocation(1804) into ExpressionStatement(1805) at 0", "Update SimpleName: field(2074) to fieldContext", "Insert SimpleName: fieldContext(1490) into MethodInvocation(1495) at 1", "Insert MethodInvocation(1778) into MethodInvocation(1781) at 0", "Insert SimpleName: append(1779) into MethodInvocation(1781) at 1", "Insert SimpleName: currentName(1780) into MethodInvocation(1781) at 2", "Insert SimpleName: currentName(1788) into InfixExpression: !=(1790) at 0", "Insert NullLiteral(1789) into InfixExpression: !=(1790) at 1", "Insert ExpressionStatement(1795) into Block(1796) at 0", "Insert MethodInvocation(1801) into MethodInvocation(1804) at 0", "Insert SimpleName: append(1802) into MethodInvocation(1804) at 1", "Insert SimpleName: fieldContext(1803) into MethodInvocation(1804) at 2", "Update SimpleName: field(1760) to fieldContext", "Update SimpleName: field(2077) to fieldContext", "Move TypeLiteral(2262) into MethodInvocation(2198) at 2", "Update SimpleName: field(2255) to fieldContext", "Move SimpleType: IllegalArgumentException(2383) into ClassInstanceCreation(2397) at 0", "Insert SimpleName: contextString(2395) into ClassInstanceCreation(2397) at 1", "Insert SimpleName: contextStringBuilder(1775) into MethodInvocation(1778) at 0", "Insert SimpleName: append(1776) into MethodInvocation(1778) at 1", "Insert StringLiteral: \"key \"(1777) into MethodInvocation(1778) at 2", "Insert MethodInvocation(1794) into ExpressionStatement(1795) at 0", "Insert SimpleName: contextStringBuilder(1798) into MethodInvocation(1801) at 0", "Insert SimpleName: append(1799) into MethodInvocation(1801) at 1", "Insert StringLiteral: \"field \"(1800) into MethodInvocation(1801) at 2", "Insert SimpleName: fieldContext(2116) into MethodInvocation(2121) at 1", "Update SimpleName: field(2258) to fieldContext", "Move TypeLiteral(2081) into MethodInvocation(2372) at 2", "Insert SimpleName: contextStringBuilder(1791) into MethodInvocation(1794) at 0", "Insert SimpleName: append(1792) into MethodInvocation(1794) at 1", "Insert StringLiteral: \", \"(1793) into MethodInvocation(1794) at 2", "Delete NullLiteral(1475)", "Delete NullLiteral(1563)", "Delete SimpleName: getCurrentName(1734)", "Delete MethodInvocation(1735)", "Delete SimpleName: getCurrentName(1857)", "Delete MethodInvocation(1858)", "Delete StringLiteral: \"%s: expected type Boolean or boolean but got %s for field %s\"(2052)", "Delete SimpleName: field(2053)", "Delete InfixExpression: +(2054)", "Delete SimpleName: getCurrentName(2055)", "Delete MethodInvocation(2056)", "Delete StringLiteral: \"%s: number type formatted as a JSON number cannot use @JsonString annotation on \"(2086)", "Delete StringLiteral: \"the field %s\"(2087)", "Delete InfixExpression: +(2088)", "Delete MethodInvocation(2090)", "Delete SimpleName: field(2091)", "Delete StringLiteral: \" for field \"(2235)", "Delete MethodInvocation(2270)", "Delete SimpleName: field(2271)", "Delete SimpleName: getCurrentName(2288)", "Delete MethodInvocation(2289)", "Delete StringLiteral: \" for field \"(2290)", "Delete SimpleName: field(2291)", "Delete InfixExpression: +(2292)", "Delete MethodInvocation(2313)", "Delete SimpleName: field(2314)", "Delete SimpleName: getCurrentName(2384)", "Delete MethodInvocation(2385)"]}}], "commit_stats": [{"total_files": 8, "deleted_files": 2, "testing": "True", "maintenance": "False", "build": "False"}]}