{"application": "apache-qpid-jms", "csha": "ca457d7375233e797fd94fafa18c2e024500236d", "files": [{"JmsConnection_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SimpleType: ACK_TYPE to SingleVariableDeclaration at 0", "INS SimpleName: ACK_TYPE to SimpleType: ACK_TYPE at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: ackType to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SimpleType: ACK_TYPE to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: ACK_TYPE to SimpleType: ACK_TYPE at 0", "INS SimpleName: ackType to SingleVariableDeclaration at 1"]}, {"root": "INS SimpleName: ackType to MethodInvocation at 2", "operations": ["INS SimpleName: ackType to MethodInvocation at 2"]}, {"root": "INS SimpleName: ackType to MethodInvocation at 3", "operations": ["INS SimpleName: ackType to MethodInvocation at 3"]}]}}, {"JmsConnection_diff": {"operations": ["Insert SingleVariableDeclaration(2331) into MethodDeclaration(2341) at 3", "Insert SingleVariableDeclaration(2351) into MethodDeclaration(2395) at 3", "Insert SimpleType: ACK_TYPE(2329) into SingleVariableDeclaration(2331) at 0", "Insert SimpleName: ackType(2330) into SingleVariableDeclaration(2331) at 1", "Insert SimpleType: ACK_TYPE(2349) into SingleVariableDeclaration(2351) at 0", "Insert SimpleName: ackType(2350) into SingleVariableDeclaration(2351) at 1", "Insert SimpleName: ACK_TYPE(2328) into SimpleType: ACK_TYPE(2329) at 0", "Insert SimpleName: ACK_TYPE(2348) into SimpleType: ACK_TYPE(2349) at 0", "Insert SimpleName: ackType(2336) into MethodInvocation(2338) at 2", "Insert SimpleName: ackType(2373) into MethodInvocation(2375) at 3"]}}, {"JmsLocalTransactionContext_cluster": {"actions": [{"root": "UPDATE from ACK_TYPE.CONSUMED to ACK_TYPE.ACCEPTED", "operations": ["UPD QualifiedName: ACK_TYPE.CONSUMED from ACK_TYPE.CONSUMED to ACK_TYPE.ACCEPTED"]}]}}, {"JmsLocalTransactionContext_diff": {"operations": ["Update QualifiedName: ACK_TYPE.CONSUMED(262) to ACK_TYPE.ACCEPTED"]}}, {"JmsMessageConsumer_cluster": {"actions": [{"root": "UPDATE from ACK_TYPE.CONSUMED to ACK_TYPE.ACCEPTED", "operations": ["UPD QualifiedName: ACK_TYPE.CONSUMED from ACK_TYPE.CONSUMED to ACK_TYPE.ACCEPTED"]}, {"root": "UPDATE from ACK_TYPE.POISONED to ACK_TYPE.MODIFIED_FAILED_UNDELIVERABLE", "operations": ["UPD QualifiedName: ACK_TYPE.POISONED from ACK_TYPE.POISONED to ACK_TYPE.MODIFIED_FAILED_UNDELIVERABLE"]}, {"root": "INS SimpleType: JmsAcknowledgeCallback to ClassInstanceCreation at 0", "operations": ["INS SimpleType: JmsAcknowledgeCallback to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: session to ClassInstanceCreation at 1", "operations": ["INS SimpleName: session to ClassInstanceCreation at 1"]}, {"root": "UPDATE from Callable to JmsAcknowledgeCallback", "operations": ["UPD SimpleName: Callable from Callable to JmsAcknowledgeCallback"]}, {"root": "MOVE from SimpleType: JmsAcknowledgeCallback", "operations": ["MOV SimpleName: Callable to SimpleType: JmsAcknowledgeCallback at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.concurrent.Callable", "DEL ImportDeclaration"]}, {"root": "DEL ParameterizedType: Callable<Void>", "operations": ["DEL SimpleType: Void", "DEL SimpleType: Callable", "DEL SimpleName: Void", "DEL ParameterizedType: Callable<Void>"]}, {"root": "DEL AnonymousClassDeclaration", "operations": ["DEL MethodDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL ReturnStatement", "DEL Modifier: public", "DEL SimpleName: envelope", "DEL SimpleName: session", "DEL SimpleType: javax.jms.IllegalStateException", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: Override", "DEL Block", "DEL SimpleName: session", "DEL SimpleType: Void", "DEL SimpleName: Exception", "DEL SimpleName: acknowledge", "DEL SimpleType: Exception", "DEL ClassInstanceCreation", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: call", "DEL SimpleName: setAcknowledgeCallback", "DEL StringLiteral: \"Session closed.\"", "DEL SimpleName: getMessage", "DEL QualifiedName: javax.jms.IllegalStateException", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: isClosed", "DEL IfStatement", "DEL ThrowStatement", "DEL AnonymousClassDeclaration", "DEL SimpleName: Void"]}]}}, {"JmsMessageConsumer_diff": {"operations": ["Update QualifiedName: ACK_TYPE.CONSUMED(1246) to ACK_TYPE.ACCEPTED", "Update QualifiedName: ACK_TYPE.POISONED(1350) to ACK_TYPE.MODIFIED_FAILED_UNDELIVERABLE", "Insert SimpleType: JmsAcknowledgeCallback(1430) into ClassInstanceCreation(1432) at 0", "Insert SimpleName: session(1431) into ClassInstanceCreation(1432) at 1", "Update SimpleName: Callable(1431) to JmsAcknowledgeCallback", "Move SimpleName: Callable(1431) into SimpleType: JmsAcknowledgeCallback(1430) at 0", "Delete QualifiedName: java.util.concurrent.Callable(18)", "Delete ImportDeclaration(19)", "Delete SimpleType: Callable(1432)", "Delete SimpleName: Void(1433)", "Delete SimpleType: Void(1434)", "Delete ParameterizedType: Callable<Void>(1435)", "Delete SimpleName: Override(1436)", "Delete MarkerAnnotation(1437)", "Delete Modifier: public(1438)", "Delete SimpleName: Void(1439)", "Delete SimpleType: Void(1440)", "Delete SimpleName: call(1441)", "Delete SimpleName: Exception(1442)", "Delete SimpleType: Exception(1443)", "Delete SimpleName: session(1444)", "Delete SimpleName: isClosed(1445)", "Delete MethodInvocation(1446)", "Delete QualifiedName: javax.jms.IllegalStateException(1447)", "Delete SimpleType: javax.jms.IllegalStateException(1448)", "Delete StringLiteral: \"Session closed.\"(1449)", "Delete ClassInstanceCreation(1450)", "Delete ThrowStatement(1451)", "Delete Block(1452)", "Delete IfStatement(1453)", "Delete SimpleName: session(1454)", "Delete SimpleName: acknowledge(1455)", "Delete MethodInvocation(1456)", "Delete ExpressionStatement(1457)", "Delete SimpleName: envelope(1458)", "Delete SimpleName: getMessage(1459)", "Delete MethodInvocation(1460)", "Delete SimpleName: setAcknowledgeCallback(1461)", "Delete NullLiteral(1462)", "Delete MethodInvocation(1463)", "Delete ExpressionStatement(1464)", "Delete NullLiteral(1465)", "Delete ReturnStatement(1466)", "Delete Block(1467)", "Delete MethodDeclaration(1468)", "Delete AnonymousClassDeclaration(1469)"]}}, {"JmsSession_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SimpleName: ackType to SingleVariableDeclaration at 1", "INS SimpleType: ACK_TYPE to SingleVariableDeclaration at 0", "INS SimpleName: ACK_TYPE to SimpleType: ACK_TYPE at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS SimpleName: ackType to TagElement: @param at 0", "INS TextElement: The type of acknowledgement being done. to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 1"]}, {"root": "INS SimpleName: ackType to MethodInvocation at 3", "operations": ["INS SimpleName: ackType to MethodInvocation at 3"]}]}}, {"JmsSession_diff": {"operations": ["Insert SingleVariableDeclaration(2516) into MethodDeclaration(2539) at 3", "Insert TagElement: @param(2506) into Javadoc(2510) at 1", "Insert SimpleType: ACK_TYPE(2514) into SingleVariableDeclaration(2516) at 0", "Insert SimpleName: ackType(2515) into SingleVariableDeclaration(2516) at 1", "Insert SimpleName: ackType(2504) into TagElement: @param(2506) at 0", "Insert TextElement: The type of acknowledgement being done.(2505) into TagElement: @param(2506) at 1", "Insert SimpleName: ACK_TYPE(2513) into SimpleType: ACK_TYPE(2514) at 0", "Insert SimpleName: ackType(2535) into MethodInvocation(2536) at 3"]}}, {"JmsMapMessage_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 37", "operations": ["INS SimpleName: MessageFormatException to SimpleType: MessageFormatException at 0", "INS InstanceofExpression to InfixExpression: || at 0", "INS Block to IfStatement at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: value to InstanceofExpression at 0", "INS SimpleName: checkValidObject to MethodDeclaration at 2", "INS SimpleType: Boolean to InstanceofExpression at 1", "INS MethodInvocation to InfixExpression: + at 3", "INS SimpleType: Integer to InstanceofExpression at 1", "INS InstanceofExpression to InfixExpression: || at 3", "INS SimpleName: value to InstanceofExpression at 0", "INS InstanceofExpression to InfixExpression: || at 5", "INS SimpleType: Float to InstanceofExpression at 1", "INS InfixExpression: == to InfixExpression: || at 10", "INS SimpleName: value to InfixExpression: == at 0", "INS SimpleName: value to InstanceofExpression at 0", "INS InstanceofExpression to InfixExpression: || at 6", "INS SimpleType: Byte to InstanceofExpression at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS InfixExpression: || to VariableDeclarationFragment at 1", "INS SimpleType: String to InstanceofExpression at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: getClass to MethodInvocation at 1", "INS InstanceofExpression to InfixExpression: || at 8", "INS SimpleName: value to InstanceofExpression at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: Byte to SimpleType: Byte at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: value to MethodInvocation at 0", "INS StringLiteral: \" type: \" to InfixExpression: + at 2", "INS Block to MethodDeclaration at 5", "INS PrimitiveType: void to MethodDeclaration at 1", "INS InstanceofExpression to InfixExpression: || at 7", "INS SimpleType: Long to InstanceofExpression at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleType: Character to InstanceofExpression at 1", "INS MethodDeclaration to TypeDeclaration: class at 37", "INS IfStatement to Block at 1", "INS SimpleType: MessageFormatException to ClassInstanceCreation at 0", "INS SimpleName: Long to SimpleType: Long at 0", "INS SimpleName: Character to SimpleType: Character at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: value to InstanceofExpression at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS InstanceofExpression to InfixExpression: || at 1", "INS SimpleName: Float to SimpleType: Float at 0", "INS SimpleName: valid to PrefixExpression: ! at 0", "INS InstanceofExpression to InfixExpression: || at 4", "INS SimpleName: Boolean to SimpleType: Boolean at 0", "INS SimpleName: valid to VariableDeclarationFragment at 0", "INS SimpleType: MessageFormatException to MethodDeclaration at 4", "INS SimpleName: value to InstanceofExpression at 0", "INS SimpleType: Short to InstanceofExpression at 1", "INS SimpleName: Double to SimpleType: Double at 0", "INS VariableDeclarationStatement to Block at 0", "INS InstanceofExpression to InfixExpression: || at 2", "INS SimpleName: value to InstanceofExpression at 0", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS SimpleName: value to SingleVariableDeclaration at 1", "INS SimpleName: Short to SimpleType: Short at 0", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS SimpleName: MessageFormatException to SimpleType: MessageFormatException at 0", "INS StringLiteral: \"Only objectified primitive objects and String types are allowed but was: \" to InfixExpression: + at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: value to InstanceofExpression at 0", "INS SimpleType: Double to InstanceofExpression at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: value to InstanceofExpression at 0", "INS SimpleName: value to InfixExpression: + at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InstanceofExpression to InfixExpression: || at 9"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL IfStatement", "DEL PrefixExpression: !", "DEL ParenthesizedExpression"]}]}}, {"JmsMapMessage_diff": {"operations": ["Insert MethodDeclaration(1408) into TypeDeclaration: class(1409) at 37", "Insert Modifier: private(1334) into MethodDeclaration(1408) at 0", "Insert PrimitiveType: void(1335) into MethodDeclaration(1408) at 1", "Insert SimpleName: checkValidObject(1336) into MethodDeclaration(1408) at 2", "Insert SingleVariableDeclaration(1340) into MethodDeclaration(1408) at 3", "Insert SimpleType: MessageFormatException(1342) into MethodDeclaration(1408) at 4", "Insert Block(1407) into MethodDeclaration(1408) at 5", "Move ExpressionStatement(1229) into Block(1228) at 0", "Insert SimpleType: Object(1338) into SingleVariableDeclaration(1340) at 0", "Insert SimpleName: value(1339) into SingleVariableDeclaration(1340) at 1", "Insert SimpleName: MessageFormatException(1341) into SimpleType: MessageFormatException(1342) at 0", "Insert VariableDeclarationStatement(1391) into Block(1407) at 0", "Insert IfStatement(1406) into Block(1407) at 1", "Insert SimpleName: Object(1337) into SimpleType: Object(1338) at 0", "Insert PrimitiveType: boolean(1343) into VariableDeclarationStatement(1391) at 0", "Insert VariableDeclarationFragment(1390) into VariableDeclarationStatement(1391) at 1", "Insert PrefixExpression: !(1393) into IfStatement(1406) at 0", "Insert Block(1405) into IfStatement(1406) at 1", "Insert SimpleName: valid(1344) into VariableDeclarationFragment(1390) at 0", "Insert InfixExpression: ||(1389) into VariableDeclarationFragment(1390) at 1", "Insert SimpleName: valid(1392) into PrefixExpression: !(1393) at 0", "Insert ThrowStatement(1404) into Block(1405) at 0", "Insert InstanceofExpression(1348) into InfixExpression: ||(1389) at 0", "Insert InstanceofExpression(1352) into InfixExpression: ||(1389) at 1", "Insert InstanceofExpression(1356) into InfixExpression: ||(1389) at 2", "Insert InstanceofExpression(1360) into InfixExpression: ||(1389) at 3", "Insert InstanceofExpression(1364) into InfixExpression: ||(1389) at 4", "Insert InstanceofExpression(1368) into InfixExpression: ||(1389) at 5", "Insert InstanceofExpression(1372) into InfixExpression: ||(1389) at 6", "Insert InstanceofExpression(1376) into InfixExpression: ||(1389) at 7", "Insert InstanceofExpression(1380) into InfixExpression: ||(1389) at 8", "Move InstanceofExpression(1223) into InfixExpression: ||(1389) at 9", "Insert InfixExpression: ==(1388) into InfixExpression: ||(1389) at 10", "Insert ClassInstanceCreation(1403) into ThrowStatement(1404) at 0", "Insert SimpleName: value(1345) into InstanceofExpression(1348) at 0", "Insert SimpleType: Boolean(1347) into InstanceofExpression(1348) at 1", "Insert SimpleName: value(1349) into InstanceofExpression(1352) at 0", "Insert SimpleType: Byte(1351) into InstanceofExpression(1352) at 1", "Insert SimpleName: value(1353) into InstanceofExpression(1356) at 0", "Insert SimpleType: Short(1355) into InstanceofExpression(1356) at 1", "Insert SimpleName: value(1357) into InstanceofExpression(1360) at 0", "Insert SimpleType: Integer(1359) into InstanceofExpression(1360) at 1", "Insert SimpleName: value(1361) into InstanceofExpression(1364) at 0", "Insert SimpleType: Long(1363) into InstanceofExpression(1364) at 1", "Insert SimpleName: value(1365) into InstanceofExpression(1368) at 0", "Insert SimpleType: Float(1367) into InstanceofExpression(1368) at 1", "Insert SimpleName: value(1369) into InstanceofExpression(1372) at 0", "Insert SimpleType: Double(1371) into InstanceofExpression(1372) at 1", "Insert SimpleName: value(1373) into InstanceofExpression(1376) at 0", "Insert SimpleType: Character(1375) into InstanceofExpression(1376) at 1", "Insert SimpleName: value(1377) into InstanceofExpression(1380) at 0", "Insert SimpleType: String(1379) into InstanceofExpression(1380) at 1", "Insert SimpleName: value(1386) into InfixExpression: ==(1388) at 0", "Insert NullLiteral(1387) into InfixExpression: ==(1388) at 1", "Insert SimpleType: MessageFormatException(1395) into ClassInstanceCreation(1403) at 0", "Insert InfixExpression: +(1402) into ClassInstanceCreation(1403) at 1", "Insert SimpleName: Boolean(1346) into SimpleType: Boolean(1347) at 0", "Insert SimpleName: Byte(1350) into SimpleType: Byte(1351) at 0", "Insert SimpleName: Short(1354) into SimpleType: Short(1355) at 0", "Insert SimpleName: Integer(1358) into SimpleType: Integer(1359) at 0", "Insert SimpleName: Long(1362) into SimpleType: Long(1363) at 0", "Insert SimpleName: Float(1366) into SimpleType: Float(1367) at 0", "Insert SimpleName: Double(1370) into SimpleType: Double(1371) at 0", "Insert SimpleName: Character(1374) into SimpleType: Character(1375) at 0", "Insert SimpleName: String(1378) into SimpleType: String(1379) at 0", "Insert SimpleName: MessageFormatException(1394) into SimpleType: MessageFormatException(1395) at 0", "Insert StringLiteral: \"Only objectified primitive objects and String types are allowed but was: \"(1396) into InfixExpression: +(1402) at 0", "Insert SimpleName: value(1397) into InfixExpression: +(1402) at 1", "Insert StringLiteral: \" type: \"(1398) into InfixExpression: +(1402) at 2", "Insert MethodInvocation(1401) into InfixExpression: +(1402) at 3", "Insert SimpleName: value(1399) into MethodInvocation(1401) at 0", "Insert SimpleName: getClass(1400) into MethodInvocation(1401) at 1", "Delete ParenthesizedExpression(1224)", "Delete PrefixExpression: !(1225)", "Delete Block(1230)", "Delete IfStatement(1231)"]}}, {"JmsMessage_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 12"]}, {"root": "UPDATE from java.util.concurrent.Callable to org.apache.qpid.jms.JmsAcknowledgeCallback", "operations": ["UPD QualifiedName: java.util.concurrent.Callable from java.util.concurrent.Callable to org.apache.qpid.jms.JmsAcknowledgeCallback"]}, {"root": "INS SimpleType: JmsAcknowledgeCallback to FieldDeclaration at 2", "operations": ["INS SimpleType: JmsAcknowledgeCallback to FieldDeclaration at 2"]}, {"root": "INS SimpleType: JmsAcknowledgeCallback to MethodDeclaration at 1", "operations": ["INS SimpleType: JmsAcknowledgeCallback to MethodDeclaration at 1"]}, {"root": "UPDATE from Callable to JmsAcknowledgeCallback", "operations": ["UPD SimpleName: Callable from Callable to JmsAcknowledgeCallback", "UPD SimpleName: Callable from Callable to JmsAcknowledgeCallback", "UPD SimpleName: Callable from Callable to JmsAcknowledgeCallback"]}, {"root": "MOVE from SimpleType: JmsAcknowledgeCallback", "operations": ["MOV SimpleName: Callable to SimpleType: JmsAcknowledgeCallback at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: enumeration to MethodInvocation at 1", "INS ThisExpression to MethodInvocation at 2", "INS SimpleName: Collections to MethodInvocation at 0", "INS ReturnStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from SimpleType: JmsAcknowledgeCallback", "operations": ["MOV SimpleName: Callable to SimpleType: JmsAcknowledgeCallback at 0"]}, {"root": "INS SimpleType: JmsAcknowledgeCallback to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: JmsAcknowledgeCallback to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from acknowledgeCallback to jmsAcknowledgeCallback", "operations": ["UPD SimpleName: acknowledgeCallback from acknowledgeCallback to jmsAcknowledgeCallback", "UPD SimpleName: acknowledgeCallback from acknowledgeCallback to jmsAcknowledgeCallback"]}, {"root": "MOVE from SimpleType: JmsAcknowledgeCallback", "operations": ["MOV SimpleName: Callable to SimpleType: JmsAcknowledgeCallback at 0"]}, {"root": "INS ThisExpression to MethodInvocation at 2", "operations": ["INS ThisExpression to MethodInvocation at 2"]}, {"root": "INS ThisExpression to MethodInvocation at 2", "operations": ["INS ThisExpression to MethodInvocation at 2"]}, {"root": "INS ThisExpression to MethodInvocation at 2", "operations": ["INS ThisExpression to MethodInvocation at 2"]}, {"root": "INS ThisExpression to MethodInvocation at 2", "operations": ["INS ThisExpression to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getPropertyNames to MethodInvocation at 1", "MOV BooleanLiteral: true to MethodInvocation at 3", "MOV SimpleName: JmsMessagePropertyIntercepter to MethodInvocation at 0"]}, {"root": "INS ThisExpression to MethodInvocation at 2", "operations": ["INS ThisExpression to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS NullLiteral to Assignment: = at 1", "INS SimpleName: acknowledgeCallback to Assignment: = at 0"]}, {"root": "UPDATE from call to acknowledge", "operations": ["UPD SimpleName: call from call to acknowledge"]}, {"root": "DEL ParameterizedType: Callable<Void>", "operations": ["DEL ParameterizedType: Callable<Void>", "DEL SimpleName: Void", "DEL SimpleType: Void", "DEL SimpleType: Callable"]}, {"root": "DEL SimpleName: facade", "operations": ["DEL SimpleName: facade"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: setReadOnlyProperties", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL BooleanLiteral: false"]}, {"root": "DEL TryStatement", "operations": ["DEL SimpleName: checkPropertyNameIsValid", "DEL SingleVariableDeclaration", "DEL SimpleName: name", "DEL ReturnStatement", "DEL BooleanLiteral: false", "DEL TryStatement", "DEL SimpleName: IllegalArgumentException", "DEL Block", "DEL SimpleType: IllegalArgumentException", "DEL CatchClause", "DEL MethodInvocation", "DEL SimpleName: iae", "DEL Block", "DEL ExpressionStatement"]}, {"root": "DEL SimpleName: facade", "operations": ["DEL SimpleName: facade"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: propertyNames", "DEL SimpleName: Set", "DEL ParameterizedType: Set<String>", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleType: Set", "DEL SimpleName: facade"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: propertyNames", "DEL SimpleName: result", "DEL SimpleName: name", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL ContinueStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: IllegalArgumentException", "DEL Block", "DEL SimpleType: IllegalArgumentException", "DEL SimpleType: String", "DEL SimpleName: iae", "DEL Block", "DEL MethodInvocation", "DEL TryStatement", "DEL SimpleName: add", "DEL SimpleName: name", "DEL CatchClause", "DEL Block", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleName: name", "DEL EnhancedForStatement", "DEL SimpleName: checkPropertyNameIsValid"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: Collections", "DEL MethodInvocation", "DEL SimpleName: enumeration", "DEL ReturnStatement", "DEL SimpleName: result"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: Set", "DEL SimpleName: HashSet", "DEL SimpleType: String", "DEL SimpleName: result", "DEL ParameterizedType: HashSet<String>", "DEL SimpleType: HashSet", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Set<String>", "DEL ClassInstanceCreation", "DEL SimpleName: String", "DEL SimpleType: Set", "DEL SimpleName: String", "DEL SimpleType: String", "DEL VariableDeclarationStatement"]}, {"root": "DEL SimpleName: facade", "operations": ["DEL SimpleName: facade"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: checkReadOnlyProperties", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: name", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: checkPropertyNameIsValid"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: checkValidObject", "DEL SimpleName: value"]}, {"root": "DEL SimpleName: facade", "operations": ["DEL SimpleName: facade"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL InstanceofExpression", "DEL PrefixExpression: !", "DEL InfixExpression: +", "DEL InstanceofExpression", "DEL InstanceofExpression", "DEL PrimitiveType: boolean", "DEL PrimitiveType: void", "DEL InstanceofExpression", "DEL Modifier: protected", "DEL Block", "DEL SimpleName: value", "DEL SimpleName: valid", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL SimpleType: Double", "DEL SimpleName: Byte", "DEL SimpleName: value", "DEL NullLiteral", "DEL SimpleType: Short", "DEL SimpleName: value", "DEL InfixExpression: ==", "DEL SimpleName: Long", "DEL SimpleType: Boolean", "DEL StringLiteral: \" type: \"", "DEL InstanceofExpression", "DEL InfixExpression: ||", "DEL Block", "DEL SimpleName: value", "DEL StringLiteral: \"Only objectified primitive objects and String types are allowed but was: \"", "DEL ThrowStatement", "DEL SimpleName: value", "DEL SimpleName: value", "DEL SimpleName: Float", "DEL SimpleName: checkValidObject", "DEL VariableDeclarationStatement", "DEL SimpleName: Character", "DEL SimpleType: MessageFormatException", "DEL IfStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: value", "DEL InstanceofExpression", "DEL InstanceofExpression", "DEL SimpleName: MessageFormatException", "DEL SimpleName: Object", "DEL SimpleName: value", "DEL SimpleName: value", "DEL SimpleType: Byte", "DEL SingleVariableDeclaration", "DEL SimpleName: value", "DEL SimpleName: value", "DEL SimpleName: Short", "DEL SimpleName: String", "DEL SimpleName: getClass", "DEL SimpleName: value", "DEL SimpleType: Long", "DEL SimpleType: Object", "DEL SimpleType: Character", "DEL SimpleName: Double", "DEL SimpleType: MessageFormatException", "DEL SimpleName: Boolean", "DEL InstanceofExpression", "DEL SimpleName: valid", "DEL SimpleType: Float", "DEL InstanceofExpression", "DEL ClassInstanceCreation", "DEL SimpleName: value", "DEL SimpleName: MessageFormatException", "DEL SimpleType: Integer", "DEL SimpleName: Integer"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: name", "DEL ExpressionStatement", "DEL SimpleName: checkPropertyNameIsValid", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: facade", "operations": ["DEL SimpleName: facade"]}, {"root": "DEL ParameterizedType: Callable<Void>", "operations": ["DEL SimpleType: Void", "DEL SimpleName: Void", "DEL ParameterizedType: Callable<Void>", "DEL SimpleType: Callable"]}, {"root": "DEL ParameterizedType: Callable<Void>", "operations": ["DEL SimpleType: Callable", "DEL SimpleName: Void", "DEL ParameterizedType: Callable<Void>", "DEL SimpleType: Void"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL StringLiteral: \"Property name must not be the empty string\"", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: IllegalArgumentException", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: propertyName", "DEL SimpleName: checkIdentifierIsntLogicOperator", "DEL PrimitiveType: void", "DEL SimpleName: propertyName", "DEL ExpressionStatement", "DEL Block", "DEL ExpressionStatement", "DEL Modifier: private", "DEL IfStatement", "DEL SimpleName: isValidatePropertyNames", "DEL SimpleName: propertyName", "DEL SimpleName: checkPropertyNameIsValid", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: length", "DEL MethodInvocation", "DEL SimpleType: IllegalArgumentException", "DEL Block", "DEL SimpleName: IllegalArgumentException", "DEL Block", "DEL Block", "DEL ThrowStatement", "DEL SimpleName: checkIdentifierIsntNullTrueFalse", "DEL StringLiteral: \"Property name must not be null\"", "DEL SimpleName: propertyName", "DEL SimpleName: String", "DEL ClassInstanceCreation", "DEL InfixExpression: ==", "DEL SimpleName: IllegalArgumentException", "DEL SimpleType: String", "DEL IfStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL ThrowStatement", "DEL MethodInvocation", "DEL SimpleName: propertyName", "DEL SimpleName: propertyName", "DEL InfixExpression: ==", "DEL SimpleName: checkIdentifierLetterAndDigitRequirements"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: equals", "DEL SimpleName: identifier", "DEL InfixExpression: ||", "DEL StringLiteral: \"NOT\"", "DEL SimpleName: checkIdentifierIsntLogicOperator", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: identifier", "DEL StringLiteral: \"AND\"", "DEL SimpleName: identifier", "DEL IfStatement", "DEL StringLiteral: \"OR\"", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: identifier", "DEL MethodInvocation", "DEL StringLiteral: \"BETWEEN\"", "DEL SimpleName: identifier", "DEL ClassInstanceCreation", "DEL SimpleName: identifier", "DEL StringLiteral: \"LIKE\"", "DEL StringLiteral: \"IS\"", "DEL SimpleName: equals", "DEL SimpleName: equals", "DEL StringLiteral: \"'\"", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SimpleName: identifier", "DEL SimpleName: equals", "DEL SimpleName: IllegalArgumentException", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL Block", "DEL SimpleName: identifier", "DEL PrimitiveType: void", "DEL SimpleName: equals", "DEL SimpleName: equals", "DEL SimpleName: equals", "DEL SimpleName: identifier", "DEL SimpleName: equals", "DEL Modifier: private", "DEL Block", "DEL ThrowStatement", "DEL SimpleName: String", "DEL MethodInvocation", "DEL MethodInvocation", "DEL StringLiteral: \"ESCAPE\"", "DEL MethodDeclaration", "DEL StringLiteral: \"IN\"", "DEL StringLiteral: \"Identifier not allowed in JMS: '\"", "DEL SimpleName: identifier", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: equals", "DEL MethodInvocation", "DEL MethodInvocation", "DEL StringLiteral: \"TRUE\"", "DEL SimpleName: identifier", "DEL StringLiteral: \"Identifier not allowed in JMS: '\"", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: identifier", "DEL SimpleName: equals", "DEL InfixExpression: +", "DEL PrimitiveType: void", "DEL SimpleName: String", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL SimpleName: IllegalArgumentException", "DEL InfixExpression: ||", "DEL Modifier: private", "DEL SimpleName: identifier", "DEL SimpleName: equals", "DEL SimpleType: String", "DEL StringLiteral: \"NULL\"", "DEL SimpleName: identifier", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ThrowStatement", "DEL Block", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: checkIdentifierIsntNullTrueFalse", "DEL StringLiteral: \"'\"", "DEL StringLiteral: \"FALSE\"", "DEL SimpleName: identifier"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: identifier", "DEL SimpleName: Character", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: i", "DEL SimpleName: ch", "DEL PostfixExpression: ++", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleName: identifier", "DEL PrimitiveType: void", "DEL SimpleName: i", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: startChar", "DEL SimpleName: ch", "DEL NumberLiteral: 0", "DEL SimpleName: identifier", "DEL SimpleType: String", "DEL PrefixExpression: !", "DEL PrimitiveType: char", "DEL ForStatement", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL ParenthesizedExpression", "DEL InfixExpression: +", "DEL SimpleName: ch", "DEL StringLiteral: \"': '\"", "DEL PrimitiveType: int", "DEL PrimitiveType: char", "DEL SimpleName: startChar", "DEL SimpleName: i", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: length", "DEL ThrowStatement", "DEL MethodInvocation", "DEL Block", "DEL ThrowStatement", "DEL SimpleName: IllegalArgumentException", "DEL StringLiteral: \"' \"", "DEL SimpleName: identifier", "DEL Block", "DEL VariableDeclarationExpression", "DEL SimpleName: length", "DEL VariableDeclarationFragment", "DEL SimpleName: charAt", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"' \"", "DEL SimpleName: identifier", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL SimpleType: IllegalArgumentException", "DEL Block", "DEL SimpleName: isJavaIdentifierPart", "DEL SimpleName: isJavaIdentifierStart", "DEL MethodInvocation", "DEL SimpleName: length", "DEL SimpleName: i", "DEL IfStatement", "DEL SimpleName: identifier", "DEL SimpleName: Character", "DEL MethodInvocation", "DEL IfStatement", "DEL PrimitiveType: int", "DEL StringLiteral: \"Identifier does not begin with a valid JMS identifier start character: '\"", "DEL SimpleName: charAt", "DEL VariableDeclarationStatement", "DEL PrefixExpression: !", "DEL InfixExpression: <", "DEL StringLiteral: \"Identifier contains invalid JMS identifier character '\"", "DEL SimpleName: checkIdentifierLetterAndDigitRequirements", "DEL ClassInstanceCreation", "DEL InfixExpression: +", "DEL ParenthesizedExpression"]}]}}, {"JmsMessage_diff": {"operations": ["Move ImportDeclaration(25) into CompilationUnit(1878) at 12", "Update QualifiedName: java.util.concurrent.Callable(24) to org.apache.qpid.jms.JmsAcknowledgeCallback", "Insert SimpleType: JmsAcknowledgeCallback(62) into FieldDeclaration(65) at 2", "Insert SimpleType: JmsAcknowledgeCallback(1681) into MethodDeclaration(1686) at 1", "Update SimpleName: Callable(61) to JmsAcknowledgeCallback", "Move SimpleName: Callable(61) into SimpleType: JmsAcknowledgeCallback(62) at 0", "Insert ReturnStatement(833) into Block(834) at 0", "Move VariableDeclarationStatement(855) into Block(880) at 0", "Update SimpleName: Callable(1830) to JmsAcknowledgeCallback", "Move SimpleName: Callable(1830) into SimpleType: JmsAcknowledgeCallback(1681) at 0", "Insert SimpleType: JmsAcknowledgeCallback(1691) into SingleVariableDeclaration(1693) at 0", "Update SimpleName: acknowledgeCallback(1848) to jmsAcknowledgeCallback", "Insert MethodInvocation(832) into ReturnStatement(833) at 0", "Update SimpleName: Callable(1843) to JmsAcknowledgeCallback", "Move SimpleName: Callable(1843) into SimpleType: JmsAcknowledgeCallback(1691) at 0", "Insert ThisExpression(790) into MethodInvocation(792) at 2", "Insert ThisExpression(809) into MethodInvocation(811) at 2", "Insert SimpleName: Collections(825) into MethodInvocation(832) at 0", "Insert SimpleName: enumeration(826) into MethodInvocation(832) at 1", "Insert MethodInvocation(831) into MethodInvocation(832) at 2", "Insert ThisExpression(899) into MethodInvocation(902) at 2", "Insert ThisExpression(920) into MethodInvocation(922) at 2", "Update SimpleName: acknowledgeCallback(1853) to jmsAcknowledgeCallback", "Move SimpleName: JmsMessagePropertyIntercepter(862) into MethodInvocation(831) at 0", "Move SimpleName: getPropertyNames(863) into MethodInvocation(831) at 1", "Insert ThisExpression(829) into MethodInvocation(831) at 2", "Move BooleanLiteral: true(865) into MethodInvocation(831) at 3", "Insert ThisExpression(871) into MethodInvocation(872) at 2", "Insert ExpressionStatement(290) into Block(291) at 1", "Insert Assignment: =(289) into ExpressionStatement(290) at 0", "Update SimpleName: call(287) to acknowledge", "Insert SimpleName: acknowledgeCallback(287) into Assignment: =(289) at 0", "Insert NullLiteral(288) into Assignment: =(289) at 1", "Delete SimpleType: Callable(62)", "Delete SimpleName: Void(63)", "Delete SimpleType: Void(64)", "Delete ParameterizedType: Callable<Void>(65)", "Delete SimpleName: facade(789)", "Delete SimpleName: setReadOnlyProperties(793)", "Delete BooleanLiteral: false(794)", "Delete MethodInvocation(795)", "Delete ExpressionStatement(796)", "Delete SimpleName: checkPropertyNameIsValid(810)", "Delete SimpleName: name(811)", "Delete MethodInvocation(812)", "Delete ExpressionStatement(813)", "Delete Block(814)", "Delete SimpleName: IllegalArgumentException(815)", "Delete SimpleType: IllegalArgumentException(816)", "Delete SimpleName: iae(817)", "Delete SingleVariableDeclaration(818)", "Delete BooleanLiteral: false(819)", "Delete ReturnStatement(820)", "Delete Block(821)", "Delete CatchClause(822)", "Delete TryStatement(823)", "Delete SimpleName: facade(826)", "Delete SimpleName: Set(856)", "Delete SimpleType: Set(857)", "Delete SimpleName: String(858)", "Delete SimpleType: String(859)", "Delete ParameterizedType: Set<String>(860)", "Delete SimpleName: propertyNames(861)", "Delete SimpleName: facade(864)", "Delete MethodInvocation(866)", "Delete VariableDeclarationFragment(867)", "Delete VariableDeclarationStatement(868)", "Delete SimpleName: String(869)", "Delete SimpleType: String(870)", "Delete SimpleName: name(871)", "Delete SingleVariableDeclaration(872)", "Delete SimpleName: propertyNames(873)", "Delete SimpleName: checkPropertyNameIsValid(874)", "Delete SimpleName: name(875)", "Delete MethodInvocation(876)", "Delete ExpressionStatement(877)", "Delete Block(878)", "Delete SimpleName: IllegalArgumentException(879)", "Delete SimpleType: IllegalArgumentException(880)", "Delete SimpleName: iae(881)", "Delete SingleVariableDeclaration(882)", "Delete ContinueStatement(883)", "Delete Block(884)", "Delete CatchClause(885)", "Delete TryStatement(886)", "Delete SimpleName: result(887)", "Delete SimpleName: add(888)", "Delete SimpleName: name(889)", "Delete MethodInvocation(890)", "Delete ExpressionStatement(891)", "Delete Block(892)", "Delete EnhancedForStatement(893)", "Delete SimpleName: Collections(894)", "Delete SimpleName: enumeration(895)", "Delete SimpleName: result(896)", "Delete MethodInvocation(897)", "Delete ReturnStatement(898)", "Delete SimpleName: Set(918)", "Delete SimpleType: Set(919)", "Delete SimpleName: String(920)", "Delete SimpleType: String(921)", "Delete ParameterizedType: Set<String>(922)", "Delete SimpleName: result(923)", "Delete SimpleName: HashSet(924)", "Delete SimpleType: HashSet(925)", "Delete SimpleName: String(926)", "Delete SimpleType: String(927)", "Delete ParameterizedType: HashSet<String>(928)", "Delete ClassInstanceCreation(929)", "Delete VariableDeclarationFragment(930)", "Delete VariableDeclarationStatement(931)", "Delete SimpleName: facade(936)", "Delete SimpleName: checkReadOnlyProperties(962)", "Delete MethodInvocation(963)", "Delete ExpressionStatement(964)", "Delete SimpleName: checkPropertyNameIsValid(965)", "Delete SimpleName: name(966)", "Delete MethodInvocation(967)", "Delete ExpressionStatement(968)", "Delete SimpleName: checkValidObject(969)", "Delete SimpleName: value(970)", "Delete MethodInvocation(971)", "Delete ExpressionStatement(972)", "Delete SimpleName: facade(975)", "Delete Modifier: protected(982)", "Delete PrimitiveType: void(983)", "Delete SimpleName: checkValidObject(984)", "Delete SimpleName: Object(985)", "Delete SimpleType: Object(986)", "Delete SimpleName: value(987)", "Delete SingleVariableDeclaration(988)", "Delete SimpleName: MessageFormatException(989)", "Delete SimpleType: MessageFormatException(990)", "Delete PrimitiveType: boolean(991)", "Delete SimpleName: valid(992)", "Delete SimpleName: value(993)", "Delete SimpleName: Boolean(994)", "Delete SimpleType: Boolean(995)", "Delete InstanceofExpression(996)", "Delete SimpleName: value(997)", "Delete SimpleName: Byte(998)", "Delete SimpleType: Byte(999)", "Delete InstanceofExpression(1000)", "Delete SimpleName: value(1001)", "Delete SimpleName: Short(1002)", "Delete SimpleType: Short(1003)", "Delete InstanceofExpression(1004)", "Delete SimpleName: value(1005)", "Delete SimpleName: Integer(1006)", "Delete SimpleType: Integer(1007)", "Delete InstanceofExpression(1008)", "Delete SimpleName: value(1009)", "Delete SimpleName: Long(1010)", "Delete SimpleType: Long(1011)", "Delete InstanceofExpression(1012)", "Delete SimpleName: value(1013)", "Delete SimpleName: Float(1014)", "Delete SimpleType: Float(1015)", "Delete InstanceofExpression(1016)", "Delete SimpleName: value(1017)", "Delete SimpleName: Double(1018)", "Delete SimpleType: Double(1019)", "Delete InstanceofExpression(1020)", "Delete SimpleName: value(1021)", "Delete SimpleName: Character(1022)", "Delete SimpleType: Character(1023)", "Delete InstanceofExpression(1024)", "Delete SimpleName: value(1025)", "Delete SimpleName: String(1026)", "Delete SimpleType: String(1027)", "Delete InstanceofExpression(1028)", "Delete SimpleName: value(1029)", "Delete NullLiteral(1030)", "Delete InfixExpression: ==(1031)", "Delete InfixExpression: ||(1032)", "Delete VariableDeclarationFragment(1033)", "Delete VariableDeclarationStatement(1034)", "Delete SimpleName: valid(1035)", "Delete PrefixExpression: !(1036)", "Delete SimpleName: MessageFormatException(1037)", "Delete SimpleType: MessageFormatException(1038)", "Delete StringLiteral: \"Only objectified primitive objects and String types are allowed but was: \"(1039)", "Delete SimpleName: value(1040)", "Delete StringLiteral: \" type: \"(1041)", "Delete SimpleName: value(1042)", "Delete SimpleName: getClass(1043)", "Delete MethodInvocation(1044)", "Delete InfixExpression: +(1045)", "Delete ClassInstanceCreation(1046)", "Delete ThrowStatement(1047)", "Delete Block(1048)", "Delete IfStatement(1049)", "Delete Block(1050)", "Delete MethodDeclaration(1051)", "Delete SimpleName: checkPropertyNameIsValid(1064)", "Delete SimpleName: name(1065)", "Delete MethodInvocation(1066)", "Delete ExpressionStatement(1067)", "Delete SimpleName: facade(1070)", "Delete SimpleType: Callable(1831)", "Delete SimpleName: Void(1832)", "Delete SimpleType: Void(1833)", "Delete ParameterizedType: Callable<Void>(1834)", "Delete SimpleType: Callable(1844)", "Delete SimpleName: Void(1845)", "Delete SimpleType: Void(1846)", "Delete ParameterizedType: Callable<Void>(1847)", "Delete Modifier: private(2033)", "Delete PrimitiveType: void(2034)", "Delete SimpleName: checkPropertyNameIsValid(2035)", "Delete SimpleName: String(2036)", "Delete SimpleType: String(2037)", "Delete SimpleName: propertyName(2038)", "Delete SingleVariableDeclaration(2039)", "Delete SimpleName: IllegalArgumentException(2040)", "Delete SimpleType: IllegalArgumentException(2041)", "Delete SimpleName: propertyName(2042)", "Delete NullLiteral(2043)", "Delete InfixExpression: ==(2044)", "Delete SimpleName: IllegalArgumentException(2045)", "Delete SimpleType: IllegalArgumentException(2046)", "Delete StringLiteral: \"Property name must not be null\"(2047)", "Delete ClassInstanceCreation(2048)", "Delete ThrowStatement(2049)", "Delete Block(2050)", "Delete SimpleName: propertyName(2051)", "Delete SimpleName: length(2052)", "Delete MethodInvocation(2053)", "Delete NumberLiteral: 0(2054)", "Delete InfixExpression: ==(2055)", "Delete SimpleName: IllegalArgumentException(2056)", "Delete SimpleType: IllegalArgumentException(2057)", "Delete StringLiteral: \"Property name must not be the empty string\"(2058)", "Delete ClassInstanceCreation(2059)", "Delete ThrowStatement(2060)", "Delete Block(2061)", "Delete IfStatement(2062)", "Delete IfStatement(2063)", "Delete SimpleName: isValidatePropertyNames(2064)", "Delete MethodInvocation(2065)", "Delete SimpleName: checkIdentifierLetterAndDigitRequirements(2066)", "Delete SimpleName: propertyName(2067)", "Delete MethodInvocation(2068)", "Delete ExpressionStatement(2069)", "Delete SimpleName: checkIdentifierIsntNullTrueFalse(2070)", "Delete SimpleName: propertyName(2071)", "Delete MethodInvocation(2072)", "Delete ExpressionStatement(2073)", "Delete SimpleName: checkIdentifierIsntLogicOperator(2074)", "Delete SimpleName: propertyName(2075)", "Delete MethodInvocation(2076)", "Delete ExpressionStatement(2077)", "Delete Block(2078)", "Delete IfStatement(2079)", "Delete Block(2080)", "Delete MethodDeclaration(2081)", "Delete Modifier: private(2082)", "Delete PrimitiveType: void(2083)", "Delete SimpleName: checkIdentifierIsntLogicOperator(2084)", "Delete SimpleName: String(2085)", "Delete SimpleType: String(2086)", "Delete SimpleName: identifier(2087)", "Delete SingleVariableDeclaration(2088)", "Delete StringLiteral: \"NOT\"(2089)", "Delete SimpleName: equals(2090)", "Delete SimpleName: identifier(2091)", "Delete MethodInvocation(2092)", "Delete StringLiteral: \"AND\"(2093)", "Delete SimpleName: equals(2094)", "Delete SimpleName: identifier(2095)", "Delete MethodInvocation(2096)", "Delete StringLiteral: \"OR\"(2097)", "Delete SimpleName: equals(2098)", "Delete SimpleName: identifier(2099)", "Delete MethodInvocation(2100)", "Delete StringLiteral: \"BETWEEN\"(2101)", "Delete SimpleName: equals(2102)", "Delete SimpleName: identifier(2103)", "Delete MethodInvocation(2104)", "Delete StringLiteral: \"LIKE\"(2105)", "Delete SimpleName: equals(2106)", "Delete SimpleName: identifier(2107)", "Delete MethodInvocation(2108)", "Delete StringLiteral: \"IN\"(2109)", "Delete SimpleName: equals(2110)", "Delete SimpleName: identifier(2111)", "Delete MethodInvocation(2112)", "Delete StringLiteral: \"IS\"(2113)", "Delete SimpleName: equals(2114)", "Delete SimpleName: identifier(2115)", "Delete MethodInvocation(2116)", "Delete StringLiteral: \"ESCAPE\"(2117)", "Delete SimpleName: equals(2118)", "Delete SimpleName: identifier(2119)", "Delete MethodInvocation(2120)", "Delete InfixExpression: ||(2121)", "Delete SimpleName: IllegalArgumentException(2122)", "Delete SimpleType: IllegalArgumentException(2123)", "Delete StringLiteral: \"Identifier not allowed in JMS: '\"(2124)", "Delete SimpleName: identifier(2125)", "Delete StringLiteral: \"'\"(2126)", "Delete InfixExpression: +(2127)", "Delete ClassInstanceCreation(2128)", "Delete ThrowStatement(2129)", "Delete Block(2130)", "Delete IfStatement(2131)", "Delete Block(2132)", "Delete MethodDeclaration(2133)", "Delete Modifier: private(2134)", "Delete PrimitiveType: void(2135)", "Delete SimpleName: checkIdentifierIsntNullTrueFalse(2136)", "Delete SimpleName: String(2137)", "Delete SimpleType: String(2138)", "Delete SimpleName: identifier(2139)", "Delete SingleVariableDeclaration(2140)", "Delete StringLiteral: \"NULL\"(2141)", "Delete SimpleName: equals(2142)", "Delete SimpleName: identifier(2143)", "Delete MethodInvocation(2144)", "Delete StringLiteral: \"TRUE\"(2145)", "Delete SimpleName: equals(2146)", "Delete SimpleName: identifier(2147)", "Delete MethodInvocation(2148)", "Delete StringLiteral: \"FALSE\"(2149)", "Delete SimpleName: equals(2150)", "Delete SimpleName: identifier(2151)", "Delete MethodInvocation(2152)", "Delete InfixExpression: ||(2153)", "Delete SimpleName: IllegalArgumentException(2154)", "Delete SimpleType: IllegalArgumentException(2155)", "Delete StringLiteral: \"Identifier not allowed in JMS: '\"(2156)", "Delete SimpleName: identifier(2157)", "Delete StringLiteral: \"'\"(2158)", "Delete InfixExpression: +(2159)", "Delete ClassInstanceCreation(2160)", "Delete ThrowStatement(2161)", "Delete Block(2162)", "Delete IfStatement(2163)", "Delete Block(2164)", "Delete MethodDeclaration(2165)", "Delete Modifier: private(2166)", "Delete PrimitiveType: void(2167)", "Delete SimpleName: checkIdentifierLetterAndDigitRequirements(2168)", "Delete SimpleName: String(2169)", "Delete SimpleType: String(2170)", "Delete SimpleName: identifier(2171)", "Delete SingleVariableDeclaration(2172)", "Delete PrimitiveType: char(2173)", "Delete SimpleName: startChar(2174)", "Delete SimpleName: identifier(2175)", "Delete SimpleName: charAt(2176)", "Delete NumberLiteral: 0(2177)", "Delete MethodInvocation(2178)", "Delete VariableDeclarationFragment(2179)", "Delete VariableDeclarationStatement(2180)", "Delete SimpleName: Character(2181)", "Delete SimpleName: isJavaIdentifierStart(2182)", "Delete SimpleName: startChar(2183)", "Delete MethodInvocation(2184)", "Delete ParenthesizedExpression(2185)", "Delete PrefixExpression: !(2186)", "Delete SimpleName: IllegalArgumentException(2187)", "Delete SimpleType: IllegalArgumentException(2188)", "Delete StringLiteral: \"Identifier does not begin with a valid JMS identifier start character: '\"(2189)", "Delete SimpleName: identifier(2190)", "Delete StringLiteral: \"' \"(2191)", "Delete InfixExpression: +(2192)", "Delete ClassInstanceCreation(2193)", "Delete ThrowStatement(2194)", "Delete Block(2195)", "Delete IfStatement(2196)", "Delete PrimitiveType: int(2197)", "Delete SimpleName: length(2198)", "Delete SimpleName: identifier(2199)", "Delete SimpleName: length(2200)", "Delete MethodInvocation(2201)", "Delete VariableDeclarationFragment(2202)", "Delete VariableDeclarationStatement(2203)", "Delete PrimitiveType: int(2204)", "Delete SimpleName: i(2205)", "Delete NumberLiteral: 1(2206)", "Delete VariableDeclarationFragment(2207)", "Delete VariableDeclarationExpression(2208)", "Delete SimpleName: i(2209)", "Delete SimpleName: length(2210)", "Delete InfixExpression: <(2211)", "Delete SimpleName: i(2212)", "Delete PostfixExpression: ++(2213)", "Delete PrimitiveType: char(2214)", "Delete SimpleName: ch(2215)", "Delete SimpleName: identifier(2216)", "Delete SimpleName: charAt(2217)", "Delete SimpleName: i(2218)", "Delete MethodInvocation(2219)", "Delete VariableDeclarationFragment(2220)", "Delete VariableDeclarationStatement(2221)", "Delete SimpleName: Character(2222)", "Delete SimpleName: isJavaIdentifierPart(2223)", "Delete SimpleName: ch(2224)", "Delete MethodInvocation(2225)", "Delete ParenthesizedExpression(2226)", "Delete PrefixExpression: !(2227)", "Delete SimpleName: IllegalArgumentException(2228)", "Delete SimpleType: IllegalArgumentException(2229)", "Delete StringLiteral: \"Identifier contains invalid JMS identifier character '\"(2230)", "Delete SimpleName: ch(2231)", "Delete StringLiteral: \"': '\"(2232)", "Delete SimpleName: identifier(2233)", "Delete StringLiteral: \"' \"(2234)", "Delete InfixExpression: +(2235)", "Delete ClassInstanceCreation(2236)", "Delete ThrowStatement(2237)", "Delete Block(2238)", "Delete IfStatement(2239)", "Delete Block(2240)", "Delete ForStatement(2241)", "Delete Block(2242)", "Delete MethodDeclaration(2243)"]}}, {"JmsMessagePropertyIntercepter_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS ImportDeclaration to CompilationUnit at 25", "operations": ["INS ImportDeclaration to CompilationUnit at 25", "INS QualifiedName: javax.jms.MessageFormatException to ImportDeclaration at 0"]}, {"root": "UPDATE from org.apache.qpid.jms.message.facade.JmsMessageFacade to org.apache.qpid.jms.message.JmsMessageSupport.JMS_AMQP_ACK_TYPE", "operations": ["UPD QualifiedName: org.apache.qpid.jms.message.facade.JmsMessageFacade from org.apache.qpid.jms.message.facade.JmsMessageFacade to org.apache.qpid.jms.message.JmsMessageSupport.JMS_AMQP_ACK_TYPE"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS ParameterizedType: HashSet<String> to ClassInstanceCreation at 0", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: static to FieldDeclaration at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: VENDOR_PROPERTIES to VariableDeclarationFragment at 0", "INS SimpleType: String to ParameterizedType: Set<String> at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: HashSet to SimpleType: HashSet at 0", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleType: String to ParameterizedType: HashSet<String> at 1", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: Set to ParameterizedType: Set<String> at 0", "INS Modifier: private to FieldDeclaration at 0", "INS ParameterizedType: Set<String> to FieldDeclaration at 3", "INS SimpleType: HashSet to ParameterizedType: HashSet<String> at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS Block to IfStatement at 1", "INS SimpleName: propertyName to MethodInvocation at 1", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleName: checkIdentifierIsntLogicOperator to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: propertyName to MethodInvocation at 1", "INS SimpleName: checkIdentifierIsntNullTrueFalse to MethodInvocation at 0", "INS SimpleName: propertyName to MethodInvocation at 0", "INS SimpleName: propertyName to SingleVariableDeclaration at 1", "INS SimpleName: validateNames to IfStatement at 0", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS StringLiteral: \"Property name must not be the empty string\" to ClassInstanceCreation at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS ThrowStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS Block to MethodDeclaration at 7", "INS SimpleName: propertyName to InfixExpression: == at 0", "INS Modifier: private to MethodDeclaration at 0", "INS Block to IfStatement at 1", "INS SimpleName: propertyName to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: static to MethodDeclaration at 1", "INS InfixExpression: == to IfStatement at 0", "INS InfixExpression: == to IfStatement at 0", "INS ExpressionStatement to Block at 2", "INS IfStatement to Block at 1", "INS ExpressionStatement to Block at 1", "INS IfStatement to IfStatement at 2", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ExpressionStatement to Block at 0", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS SimpleName: checkPropertyNameIsValid to MethodDeclaration at 3", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: IllegalArgumentException to MethodDeclaration at 6", "INS SimpleName: checkIdentifierLetterAndDigitRequirements to MethodInvocation at 0", "INS StringLiteral: \"Property name must not be null\" to ClassInstanceCreation at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: validateNames to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 15", "INS SimpleName: identifier to MethodInvocation at 2", "INS PrimitiveType: void to MethodDeclaration at 2", "INS ThrowStatement to Block at 0", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS StringLiteral: \"IN\" to MethodInvocation at 0", "INS SimpleName: identifier to MethodInvocation at 2", "INS SimpleName: identifier to MethodInvocation at 2", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to InfixExpression: || at 6", "INS StringLiteral: \"LIKE\" to MethodInvocation at 0", "INS SimpleName: identifier to MethodInvocation at 2", "INS SimpleName: identifier to MethodInvocation at 2", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: checkIdentifierIsntLogicOperator to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: identifier to SingleVariableDeclaration at 1", "INS StringLiteral: \"BETWEEN\" to MethodInvocation at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS StringLiteral: \"OR\" to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: || at 0", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS StringLiteral: \"'\" to InfixExpression: + at 2", "INS MethodInvocation to InfixExpression: || at 7", "INS SimpleName: equals to MethodInvocation at 1", "INS Modifier: private to MethodDeclaration at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS SimpleName: identifier to InfixExpression: + at 1", "INS MethodInvocation to InfixExpression: || at 3", "INS StringLiteral: \"IS\" to MethodInvocation at 0", "INS StringLiteral: \"NOT\" to MethodInvocation at 0", "INS StringLiteral: \"ESCAPE\" to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: || at 2", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS MethodInvocation to InfixExpression: || at 4", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: identifier to MethodInvocation at 2", "INS StringLiteral: \"AND\" to MethodInvocation at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: identifier to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: || at 5", "INS SimpleName: identifier to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS StringLiteral: \"Identifier not allowed in JMS: '\" to InfixExpression: + at 0", "INS IfStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: checkIdentifierIsntNullTrueFalse to MethodDeclaration at 3", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS Block to IfStatement at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS IfStatement to Block at 0", "INS SimpleName: identifier to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: identifier to MethodInvocation at 2", "INS StringLiteral: \"FALSE\" to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS StringLiteral: \"TRUE\" to MethodInvocation at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS StringLiteral: \"NULL\" to MethodInvocation at 0", "INS StringLiteral: \"Identifier not allowed in JMS: '\" to InfixExpression: + at 0", "INS SimpleName: identifier to InfixExpression: + at 1", "INS MethodInvocation to InfixExpression: || at 2", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS StringLiteral: \"'\" to InfixExpression: + at 2", "INS SimpleName: identifier to SingleVariableDeclaration at 1", "INS MethodInvocation to InfixExpression: || at 0", "INS SimpleName: identifier to MethodInvocation at 2", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: equals to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 17", "operations": ["INS SimpleName: i to InfixExpression: < at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS SimpleName: ch to InfixExpression: + at 1", "INS Block to ForStatement at 3", "INS VariableDeclarationStatement to Block at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS MethodInvocation to ParenthesizedExpression at 0", "INS SimpleName: identifier to MethodInvocation at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS StringLiteral: \"': '\" to InfixExpression: + at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS IfStatement to Block at 1", "INS SimpleName: startChar to VariableDeclarationFragment at 0", "INS ParenthesizedExpression to PrefixExpression: ! at 0", "INS Block to IfStatement at 1", "INS SimpleName: ch to VariableDeclarationFragment at 0", "INS SimpleName: length to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: identifier to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS StringLiteral: \"' \" to InfixExpression: + at 2", "INS SimpleName: identifier to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: length to MethodInvocation at 1", "INS ThrowStatement to Block at 0", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS SimpleName: identifier to InfixExpression: + at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: startChar to MethodInvocation at 2", "INS SimpleName: charAt to MethodInvocation at 1", "INS StringLiteral: \"' \" to InfixExpression: + at 4", "INS PostfixExpression: ++ to ForStatement at 2", "INS PrimitiveType: char to VariableDeclarationStatement at 0", "INS SimpleName: isJavaIdentifierPart to MethodInvocation at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrefixExpression: ! to IfStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: identifier to InfixExpression: + at 3", "INS MethodDeclaration to TypeDeclaration: class at 17", "INS PrimitiveType: void to MethodDeclaration at 2", "INS ForStatement to Block at 3", "INS InfixExpression: < to ForStatement at 1", "INS PrimitiveType: char to VariableDeclarationStatement at 0", "INS SimpleName: Character to MethodInvocation at 0", "INS StringLiteral: \"Identifier does not begin with a valid JMS identifier start character: '\" to InfixExpression: + at 0", "INS IfStatement to Block at 1", "INS SimpleName: length to InfixExpression: < at 1", "INS SimpleName: Character to MethodInvocation at 0", "INS Modifier: private to MethodDeclaration at 0", "INS NumberLiteral: 1 to VariableDeclarationFragment at 1", "INS SimpleName: checkIdentifierLetterAndDigitRequirements to MethodDeclaration at 3", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: i to MethodInvocation at 2", "INS SimpleName: ch to MethodInvocation at 2", "INS StringLiteral: \"Identifier contains invalid JMS identifier character '\" to InfixExpression: + at 0", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: charAt to MethodInvocation at 1", "INS ThrowStatement to Block at 0", "INS SimpleName: isJavaIdentifierStart to MethodInvocation at 1", "INS MethodInvocation to ParenthesizedExpression at 0", "INS SimpleName: identifier to MethodInvocation at 0", "INS Modifier: static to MethodDeclaration at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS Block to IfStatement at 1", "INS ParenthesizedExpression to PrefixExpression: ! at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS SimpleType: Byte to InstanceofExpression at 1", "INS SimpleName: value to SingleVariableDeclaration at 1", "INS InstanceofExpression to InfixExpression: || at 6", "INS SimpleName: String to SimpleType: String at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: MessageFormatException to SimpleType: MessageFormatException at 0", "INS SimpleType: Short to InstanceofExpression at 1", "INS InstanceofExpression to InfixExpression: || at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleType: Long to InstanceofExpression at 1", "INS SimpleName: value to InstanceofExpression at 0", "INS SimpleName: value to InstanceofExpression at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS IfStatement to Block at 1", "INS SimpleName: valid to VariableDeclarationFragment at 0", "INS ThrowStatement to Block at 0", "INS SimpleType: Float to InstanceofExpression at 1", "INS SimpleName: value to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: Double to SimpleType: Double at 0", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS SimpleName: value to InstanceofExpression at 0", "INS InstanceofExpression to InfixExpression: || at 7", "INS InstanceofExpression to InfixExpression: || at 4", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: Character to SimpleType: Character at 0", "INS SimpleType: Boolean to InstanceofExpression at 1", "INS SimpleName: value to InstanceofExpression at 0", "INS SimpleType: String to InstanceofExpression at 1", "INS Block to IfStatement at 1", "INS InstanceofExpression to InfixExpression: || at 2", "INS InstanceofExpression to InfixExpression: || at 8", "INS InstanceofExpression to InfixExpression: || at 0", "INS SimpleType: MessageFormatException to ClassInstanceCreation at 0", "INS SimpleName: Short to SimpleType: Short at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS InfixExpression: == to InfixExpression: || at 9", "INS InfixExpression: || to VariableDeclarationFragment at 1", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS SimpleType: Character to InstanceofExpression at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InstanceofExpression to InfixExpression: || at 5", "INS SimpleName: MessageFormatException to SimpleType: MessageFormatException at 0", "INS InstanceofExpression to InfixExpression: || at 1", "INS SimpleName: Long to SimpleType: Long at 0", "INS SimpleName: value to InstanceofExpression at 0", "INS SimpleName: value to InstanceofExpression at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleType: Double to InstanceofExpression at 1", "INS SimpleName: value to InstanceofExpression at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: value to InstanceofExpression at 0", "INS SimpleName: Float to SimpleType: Float at 0", "INS SimpleName: value to MethodInvocation at 0", "INS SimpleName: Byte to SimpleType: Byte at 0", "INS MethodInvocation to InfixExpression: + at 3", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS StringLiteral: \" type: \" to InfixExpression: + at 2", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: checkValidObject to MethodDeclaration at 3", "INS SimpleName: valid to PrefixExpression: ! at 0", "INS SimpleName: value to InstanceofExpression at 0", "INS SimpleType: Integer to InstanceofExpression at 1", "INS SimpleName: Boolean to SimpleType: Boolean at 0", "INS SimpleType: MessageFormatException to MethodDeclaration at 5", "INS StringLiteral: \"Only objectified primitive objects and String types are allowed but was: \" to InfixExpression: + at 0", "INS SimpleName: value to InfixExpression: + at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 6", "operations": ["INS TagElement: @return to Javadoc at 1", "INS MethodDeclaration to TypeDeclaration: interface at 6", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: and its properties. to TagElement at 1", "INS SimpleName: isAlwaysWritable to MethodDeclaration at 2", "INS TagElement to Javadoc at 0", "INS TextElement:  true if the intercepter is immune to read-only state checks. to TagElement: @return at 0", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS TextElement: Return true if the intercepter can bypass the read-only state of a Message to TagElement at 0"]}, {"root": "INS ExpressionStatement to Block at 10", "operations": ["INS SimpleName: JMS_AMQP_ACK_TYPE to MethodInvocation at 2", "INS ExpressionStatement to Block at 10", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: VENDOR_PROPERTIES to MethodInvocation at 0", "INS SimpleName: add to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 25", "operations": ["INS SimpleName: JmsMessage to SimpleType: JmsMessage at 0", "INS SimpleType: JMSException to MethodDeclaration at 5", "INS InfixExpression: != to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \"Session Acknoewledgement Mode does not allow setting: \" to InfixExpression: + at 0", "INS SimpleName: setProperty to MethodDeclaration at 3", "INS SimpleName: Object to SimpleType: Object at 0", "INS IfStatement to Block at 0", "INS SimpleName: message to MethodInvocation at 0", "INS SimpleType: JMSException to MethodDeclaration at 5", "INS ExpressionStatement to Block at 3", "INS SimpleName: setAckType to MethodInvocation at 1", "INS SimpleName: message to SingleVariableDeclaration at 1", "INS SimpleName: JmsMessage to SimpleType: JmsMessage at 0", "INS SimpleType: Object to VariableDeclarationStatement at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: message to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: Object to SimpleType: Object at 0", "INS ThrowStatement to Block at 0", "INS Block to IfStatement at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Block to IfStatement at 1", "INS SimpleName: JMS_AMQP_ACK_TYPE to InfixExpression: + at 1", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleType: JmsMessage to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS SimpleType: PropertyIntercepter to ClassInstanceCreation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS InfixExpression: && to IfStatement at 0", "INS ReturnStatement to Block at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: message to MethodInvocation at 0", "INS SimpleType: JMSException to ClassInstanceCreation at 0", "INS SimpleName: isAckTypeSet to MethodInvocation at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 2", "INS MethodInvocation to CastExpression at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: message to SingleVariableDeclaration at 1", "INS SimpleName: JMSException to SimpleType: JMSException at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: message to MethodInvocation at 0", "INS SimpleName: getAcknowledgeCallback to MethodInvocation at 1", "INS StringLiteral: \" cannot be set from a \" to InfixExpression: + at 2", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS IfStatement to Block at 0", "INS Block to MethodDeclaration at 6", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: JMSException to SimpleType: JMSException at 0", "INS Block to MethodDeclaration at 6", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to InfixExpression: == at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS IfStatement to Block at 0", "INS SimpleName: JMSException to SimpleType: JMSException at 0", "INS SimpleType: Integer to VariableDeclarationStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleType: Integer to TypeLiteral at 0", "INS Block to IfStatement at 1", "INS SimpleName: TypeConversionSupport to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS BooleanLiteral: true to ReturnStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: ackType to Assignment: = at 0", "INS Modifier: public to MethodDeclaration at 1", "INS StringLiteral: \"Property \" to InfixExpression: + at 0", "INS SimpleName: getProperty to MethodDeclaration at 3", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS ReturnStatement to Block at 2", "INS Block to IfStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: put to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MethodInvocation to MethodInvocation at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleType: JmsMessage to SingleVariableDeclaration at 0", "INS SimpleName: getAcknowledgeCallback to MethodInvocation at 1", "INS ReturnStatement to Block at 0", "INS StringLiteral: \".\" to InfixExpression: + at 4", "INS Block to MethodDeclaration at 7", "INS ReturnStatement to Block at 1", "INS SimpleName: propertyExists to MethodDeclaration at 3", "INS SimpleName: ackType to MethodInvocation at 2", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: getAcknowledgeCallback to MethodInvocation at 1", "INS IfStatement to Block at 1", "INS SimpleName: JMS_AMQP_ACK_TYPE to InfixExpression: + at 1", "INS SimpleName: PROPERTY_INTERCEPTERS to MethodInvocation at 0", "INS ClassInstanceCreation to MethodInvocation at 3", "INS TypeLiteral to MethodInvocation at 3", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getAcknowledgeCallback to MethodInvocation at 1", "INS SimpleName: value to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: Object to MethodDeclaration at 2", "INS SimpleType: JmsMessage to SingleVariableDeclaration at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleType: JMSException to MethodDeclaration at 6", "INS VariableDeclarationStatement to Block at 1", "INS ThrowStatement to Block at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS SimpleName: message to MethodInvocation at 0", "INS SimpleName: message to SingleVariableDeclaration at 1", "INS SimpleName: getAcknowledgeCallback to MethodInvocation at 1", "INS SimpleName: clearAckType to MethodInvocation at 1", "INS SimpleName: message to MethodInvocation at 0", "INS SimpleName: JMS_AMQP_ACK_TYPE to MethodInvocation at 2", "INS ClassInstanceCreation to ThrowStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 3", "INS BooleanLiteral: false to ReturnStatement at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: ackType to VariableDeclarationFragment at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS SimpleName: getAcknowledgeCallback to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: isAlwaysWritable to MethodDeclaration at 3", "INS SimpleName: JmsMessage to SimpleType: JmsMessage at 0", "INS SimpleName: getAcknowledgeCallback to MethodInvocation at 1", "INS SimpleName: value to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: convert to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getAcknowledgeCallback to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: message to SingleVariableDeclaration at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: ackType to ReturnStatement at 0", "INS SimpleName: JMSException to SimpleType: JMSException at 0", "INS SimpleName: getAckType to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: message to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: JmsMessage to SimpleType: JmsMessage at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS MethodInvocation to InfixExpression: + at 3", "INS SimpleName: ackType to VariableDeclarationFragment at 0", "INS SimpleName: message to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to MethodDeclaration at 4", "INS SimpleName: JMSException to SimpleType: JMSException at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: value to MethodInvocation at 2", "INS SimpleName: clearProperty to MethodDeclaration at 3", "INS SimpleType: Integer to CastExpression at 0", "INS SimpleName: ackType to InfixExpression: == at 0", "INS SimpleType: JMSException to ClassInstanceCreation at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS MethodInvocation to InfixExpression: && at 1", "INS Block to IfStatement at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: PropertyIntercepter to SimpleType: PropertyIntercepter at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS IfStatement to Block at 2", "INS ExpressionStatement to Block at 25", "INS ExpressionStatement to Block at 0", "INS SimpleType: JmsMessage to SingleVariableDeclaration at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: isAckTypeSet to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: message to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getAcknowledgeCallback to MethodInvocation at 1"]}, {"root": "UPDATE from JmsMessageFacade to JmsMessage", "operations": ["UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleType: JmsMessageFacade from JmsMessageFacade to JmsMessage", "UPD SimpleName: JmsMessageFacade from JmsMessageFacade to JmsMessage"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: isValidatePropertyNames to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: checkPropertyNameIsValid to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: name to MethodInvocation at 1", "INS SimpleName: message to MethodInvocation at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS NullLiteral to InfixExpression: == at 1", "INS InfixExpression: || to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: jmsPropertyExpression to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: checkReadOnlyProperties to MethodInvocation at 1", "INS InfixExpression: == to InfixExpression: || at 0", "INS PrefixExpression: ! to InfixExpression: || at 1", "INS SimpleName: isAlwaysWritable to MethodInvocation at 1", "INS SimpleName: jmsPropertyExpression to InfixExpression: == at 0", "INS SimpleName: message to MethodInvocation at 0", "INS IfStatement to Block at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: message to MethodInvocation at 0", "INS SimpleName: isValidatePropertyNames to MethodInvocation at 1", "INS SimpleName: checkPropertyNameIsValid to MethodInvocation at 0", "INS SimpleName: name to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS SimpleName: checkValidObject to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: value to MethodInvocation at 1", "INS ExpressionStatement to Block at 3"]}, {"root": "INS TryStatement to Block at 0", "operations": ["INS BooleanLiteral: false to ReturnStatement at 0", "INS TryStatement to Block at 0", "INS SimpleName: message to MethodInvocation at 0", "INS SimpleName: checkPropertyNameIsValid to MethodInvocation at 0", "INS SimpleName: isValidatePropertyNames to MethodInvocation at 1", "INS Block to CatchClause at 1", "INS CatchClause to TryStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: IllegalArgumentException to SingleVariableDeclaration at 0", "INS SimpleName: iae to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: name to MethodInvocation at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS ReturnStatement to Block at 0", "INS Block to TryStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2", "INS SimpleName: setReadOnlyProperties to MethodInvocation at 1", "INS BooleanLiteral: false to MethodInvocation at 2", "INS SimpleName: message to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS EnhancedForStatement to Block at 2", "operations": ["INS Block to TryStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: name to SingleVariableDeclaration at 1", "INS TryStatement to Block at 0", "INS SimpleType: IllegalArgumentException to SingleVariableDeclaration at 0", "INS Block to EnhancedForStatement at 2", "INS ContinueStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: message to MethodInvocation at 0", "INS Block to CatchClause at 1", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS CatchClause to TryStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getFacade to MethodInvocation at 1", "INS SimpleName: getPropertyNames to MethodInvocation at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: iae to SingleVariableDeclaration at 1", "INS SimpleName: name to MethodInvocation at 2", "INS EnhancedForStatement to Block at 2", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: names to MethodInvocation at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "UPDATE from the JmsMessageFacade instance to read from to the JmsMessage instance to read from", "operations": ["UPD TextElement: the JmsMessageFacade instance to read from from the JmsMessageFacade instance to read from to the JmsMessage instance to read from", "UPD TextElement: the JmsMessageFacade instance to read from from the JmsMessageFacade instance to read from to the JmsMessage instance to read from", "UPD TextElement: the JmsMessageFacade instance to read from from the JmsMessageFacade instance to read from to the JmsMessage instance to read from", "UPD TextElement: the JmsMessageFacade instance to read from from the JmsMessageFacade instance to read from to the JmsMessage instance to read from"]}, {"root": "UPDATE from the JmsMessageFacade instance to write to. to the JmsMessage instance to write to.", "operations": ["UPD TextElement: the JmsMessageFacade instance to write to. from the JmsMessageFacade instance to write to. to the JmsMessage instance to write to."]}, {"root": "UPDATE from the JmsMessageFacade instance to read property names from. to the JmsMessage instance to read property names from.", "operations": ["UPD TextElement: the JmsMessageFacade instance to read property names from. from the JmsMessageFacade instance to read property names from. to the JmsMessage instance to read property names from."]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 4", "operations": ["INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS SimpleName: isAlwaysWritable to MethodDeclaration at 3", "INS BooleanLiteral: false to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 4", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 2", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS SimpleName: isAlwaysWritable to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS BooleanLiteral: false to ReturnStatement at 0", "INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 0"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 4", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: isAlwaysWritable to MethodDeclaration at 3", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS BooleanLiteral: false to ReturnStatement at 0", "INS ReturnStatement to Block at 0"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 4", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS BooleanLiteral: false to ReturnStatement at 0", "INS Block to MethodDeclaration at 4", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: isAlwaysWritable to MethodDeclaration at 3", "INS PrimitiveType: boolean to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 4", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 2", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS BooleanLiteral: false to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: isAlwaysWritable to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 4", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS SimpleName: isAlwaysWritable to MethodDeclaration at 3", "INS BooleanLiteral: false to ReturnStatement at 0"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 4", "operations": ["INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS MarkerAnnotation to MethodDeclaration at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS SimpleName: isAlwaysWritable to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 4", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: isAlwaysWritable to MethodDeclaration at 3", "INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 4", "operations": ["INS ReturnStatement to Block at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS Block to MethodDeclaration at 4", "INS SimpleName: isAlwaysWritable to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 4", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: isAlwaysWritable to MethodDeclaration at 3", "INS Block to MethodDeclaration at 4", "INS BooleanLiteral: false to ReturnStatement at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS ReturnStatement to Block at 0"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 4", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 2", "INS BooleanLiteral: false to ReturnStatement at 0", "INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: isAlwaysWritable to MethodDeclaration at 3", "INS MethodDeclaration to AnonymousClassDeclaration at 4"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 4", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 2", "INS Block to MethodDeclaration at 4", "INS SimpleName: isAlwaysWritable to MethodDeclaration at 3", "INS BooleanLiteral: false to ReturnStatement at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS Modifier: public to MethodDeclaration at 1", "INS ReturnStatement to Block at 0"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 4", "operations": ["INS ReturnStatement to Block at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: isAlwaysWritable to MethodDeclaration at 3", "INS Block to MethodDeclaration at 4"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 4", "operations": ["INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 1", "INS BooleanLiteral: false to ReturnStatement at 0", "INS SimpleName: isAlwaysWritable to MethodDeclaration at 3", "INS MarkerAnnotation to MethodDeclaration at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS Block to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Object to MethodDeclaration at 2", "MOV SimpleType: JMSException to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Object to MethodDeclaration at 2", "MOV SimpleType: JMSException to MethodDeclaration at 6", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Object to MethodDeclaration at 2", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: JMSException to MethodDeclaration at 5"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: Object to MethodDeclaration at 2", "MOV SimpleType: JMSException to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: JMSException to MethodDeclaration at 5", "MOV SimpleType: Object to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: JMSException to MethodDeclaration at 5", "MOV SimpleType: Object to MethodDeclaration at 2", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: JMSException to MethodDeclaration at 5", "MOV SimpleType: Object to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: JMSException to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: JMSException to MethodDeclaration at 5", "MOV SimpleType: Object to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: JMSException to MethodDeclaration at 5", "MOV SimpleType: Object to MethodDeclaration at 2", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: JMSException to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: JMSException to MethodDeclaration at 5", "MOV SimpleType: Object to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: JMSException to MethodDeclaration at 5", "MOV SimpleType: Object to MethodDeclaration at 2", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "UPDATE from names to checkPropertyNameIsValid", "operations": ["UPD SimpleName: names from names to checkPropertyNameIsValid"]}, {"root": "UPDATE from addAll to name", "operations": ["UPD SimpleName: addAll from addAll to name"]}, {"root": "UPDATE from getPropertyNames to isValidatePropertyNames", "operations": ["UPD SimpleName: getPropertyNames from getPropertyNames to isValidatePropertyNames"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3", "MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3", "MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0", "MOV SimpleName: setGroupSequence to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from intValue to setGroupSequence", "operations": ["UPD SimpleName: intValue from intValue to setGroupSequence"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: intValue to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS SimpleName: intValue to MethodInvocation at 1", "operations": ["INS SimpleName: intValue to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "UPDATE from setGroupSequence to getFacade", "operations": ["UPD SimpleName: setGroupSequence from setGroupSequence to getFacade"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFacade to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getFacade to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: message to MethodInvocation at 0"]}]}}, {"JmsMessagePropertyIntercepter_diff": {"operations": ["Move ImportDeclaration(65) into CompilationUnit(3192) at 5", "Insert ImportDeclaration(65) into CompilationUnit(3192) at 25", "Update QualifiedName: org.apache.qpid.jms.message.facade.JmsMessageFacade(64) to org.apache.qpid.jms.message.JmsMessageSupport.JMS_AMQP_ACK_TYPE", "Insert QualifiedName: javax.jms.MessageFormatException(64) into ImportDeclaration(65) at 0", "Insert FieldDeclaration(130) into TypeDeclaration: class(3191) at 5", "Insert MethodDeclaration(2954) into TypeDeclaration: class(3191) at 14", "Insert MethodDeclaration(3007) into TypeDeclaration: class(3191) at 15", "Insert MethodDeclaration(3040) into TypeDeclaration: class(3191) at 16", "Insert MethodDeclaration(3119) into TypeDeclaration: class(3191) at 17", "Insert MethodDeclaration(3190) into TypeDeclaration: class(3191) at 18", "Insert Modifier: private(114) into FieldDeclaration(130) at 0", "Insert Modifier: static(115) into FieldDeclaration(130) at 1", "Insert Modifier: final(116) into FieldDeclaration(130) at 2", "Insert ParameterizedType: Set<String>(121) into FieldDeclaration(130) at 3", "Insert VariableDeclarationFragment(129) into FieldDeclaration(130) at 4", "Insert MethodDeclaration(228) into TypeDeclaration: interface(229) at 6", "Insert Modifier: private(2903) into MethodDeclaration(2954) at 0", "Insert Modifier: static(2904) into MethodDeclaration(2954) at 1", "Insert PrimitiveType: void(2905) into MethodDeclaration(2954) at 2", "Insert SimpleName: checkPropertyNameIsValid(2906) into MethodDeclaration(2954) at 3", "Insert SingleVariableDeclaration(2910) into MethodDeclaration(2954) at 4", "Insert SingleVariableDeclaration(2913) into MethodDeclaration(2954) at 5", "Insert SimpleType: IllegalArgumentException(2915) into MethodDeclaration(2954) at 6", "Insert Block(2953) into MethodDeclaration(2954) at 7", "Insert Modifier: private(2955) into MethodDeclaration(3007) at 0", "Insert Modifier: static(2956) into MethodDeclaration(3007) at 1", "Insert PrimitiveType: void(2957) into MethodDeclaration(3007) at 2", "Insert SimpleName: checkIdentifierIsntLogicOperator(2958) into MethodDeclaration(3007) at 3", "Insert SingleVariableDeclaration(2962) into MethodDeclaration(3007) at 4", "Insert Block(3006) into MethodDeclaration(3007) at 5", "Insert Modifier: private(3008) into MethodDeclaration(3040) at 0", "Insert Modifier: static(3009) into MethodDeclaration(3040) at 1", "Insert PrimitiveType: void(3010) into MethodDeclaration(3040) at 2", "Insert SimpleName: checkIdentifierIsntNullTrueFalse(3011) into MethodDeclaration(3040) at 3", "Insert SingleVariableDeclaration(3015) into MethodDeclaration(3040) at 4", "Insert Block(3039) into MethodDeclaration(3040) at 5", "Insert Modifier: private(3041) into MethodDeclaration(3119) at 0", "Insert Modifier: static(3042) into MethodDeclaration(3119) at 1", "Insert PrimitiveType: void(3043) into MethodDeclaration(3119) at 2", "Insert SimpleName: checkIdentifierLetterAndDigitRequirements(3044) into MethodDeclaration(3119) at 3", "Insert SingleVariableDeclaration(3048) into MethodDeclaration(3119) at 4", "Insert Block(3118) into MethodDeclaration(3119) at 5", "Insert Modifier: private(3120) into MethodDeclaration(3190) at 0", "Insert Modifier: static(3121) into MethodDeclaration(3190) at 1", "Insert PrimitiveType: void(3122) into MethodDeclaration(3190) at 2", "Insert SimpleName: checkValidObject(3123) into MethodDeclaration(3190) at 3", "Insert SingleVariableDeclaration(3127) into MethodDeclaration(3190) at 4", "Insert SimpleType: MessageFormatException(3129) into MethodDeclaration(3190) at 5", "Insert Block(3189) into MethodDeclaration(3190) at 6", "Insert SimpleType: Set(118) into ParameterizedType: Set<String>(121) at 0", "Insert SimpleType: String(120) into ParameterizedType: Set<String>(121) at 1", "Insert SimpleName: VENDOR_PROPERTIES(122) into VariableDeclarationFragment(129) at 0", "Insert ClassInstanceCreation(128) into VariableDeclarationFragment(129) at 1", "Insert Javadoc(225) into MethodDeclaration(228) at 0", "Insert PrimitiveType: boolean(226) into MethodDeclaration(228) at 1", "Insert SimpleName: isAlwaysWritable(227) into MethodDeclaration(228) at 2", "Insert ExpressionStatement(285) into Block(2398) at 10", "Insert ExpressionStatement(2397) into Block(2398) at 25", "Update SimpleType: JmsMessageFacade(1968) to JmsMessage", "Insert ExpressionStatement(2443) into Block(2477) at 1", "Update SimpleType: JmsMessageFacade(2038) to JmsMessage", "Insert IfStatement(2536) into Block(2568) at 1", "Insert ExpressionStatement(2543) into Block(2568) at 2", "Insert ExpressionStatement(2547) into Block(2568) at 3", "Update SimpleType: JmsMessageFacade(2099) to JmsMessage", "Insert TryStatement(2614) into Block(2642) at 0", "Update SimpleType: JmsMessageFacade(2154) to JmsMessage", "Insert ExpressionStatement(2713) into Block(2714) at 2", "Update SimpleType: JmsMessageFacade(2224) to JmsMessage", "Update SimpleType: JmsMessageFacade(2287) to JmsMessage", "Insert EnhancedForStatement(2898) into Block(2901) at 2", "Insert SimpleType: String(2908) into SingleVariableDeclaration(2910) at 0", "Insert SimpleName: propertyName(2909) into SingleVariableDeclaration(2910) at 1", "Insert PrimitiveType: boolean(2911) into SingleVariableDeclaration(2913) at 0", "Insert SimpleName: validateNames(2912) into SingleVariableDeclaration(2913) at 1", "Insert SimpleName: IllegalArgumentException(2914) into SimpleType: IllegalArgumentException(2915) at 0", "Insert IfStatement(2937) into Block(2953) at 0", "Insert IfStatement(2952) into Block(2953) at 1", "Insert SimpleType: String(2960) into SingleVariableDeclaration(2962) at 0", "Insert SimpleName: identifier(2961) into SingleVariableDeclaration(2962) at 1", "Insert IfStatement(3005) into Block(3006) at 0", "Insert SimpleType: String(3013) into SingleVariableDeclaration(3015) at 0", "Insert SimpleName: identifier(3014) into SingleVariableDeclaration(3015) at 1", "Insert IfStatement(3038) into Block(3039) at 0", "Insert SimpleType: String(3046) into SingleVariableDeclaration(3048) at 0", "Insert SimpleName: identifier(3047) into SingleVariableDeclaration(3048) at 1", "Insert VariableDeclarationStatement(3056) into Block(3118) at 0", "Insert IfStatement(3072) into Block(3118) at 1", "Insert VariableDeclarationStatement(3079) into Block(3118) at 2", "Insert ForStatement(3117) into Block(3118) at 3", "Insert SimpleType: Object(3125) into SingleVariableDeclaration(3127) at 0", "Insert SimpleName: value(3126) into SingleVariableDeclaration(3127) at 1", "Insert SimpleName: MessageFormatException(3128) into SimpleType: MessageFormatException(3129) at 0", "Insert VariableDeclarationStatement(3173) into Block(3189) at 0", "Insert IfStatement(3188) into Block(3189) at 1", "Insert SimpleName: Set(117) into SimpleType: Set(118) at 0", "Insert SimpleName: String(119) into SimpleType: String(120) at 0", "Insert ParameterizedType: HashSet<String>(127) into ClassInstanceCreation(128) at 0", "Update SimpleType: JmsMessageFacade(135) to JmsMessage", "Update SimpleType: JmsMessageFacade(156) to JmsMessage", "Update SimpleType: JmsMessageFacade(177) to JmsMessage", "Update SimpleType: JmsMessageFacade(195) to JmsMessage", "Insert TagElement(222) into Javadoc(225) at 0", "Insert TagElement: @return(224) into Javadoc(225) at 1", "Insert MethodInvocation(284) into ExpressionStatement(285) at 0", "Insert MethodInvocation(2396) into ExpressionStatement(2397) at 0", "Update TextElement: the JmsMessageFacade instance to read from(1951) to the JmsMessage instance to read from", "Update SimpleName: JmsMessageFacade(1967) to JmsMessage", "Insert MethodInvocation(2442) into ExpressionStatement(2443) at 0", "Update TextElement: the JmsMessageFacade instance to write to.(2021) to the JmsMessage instance to write to.", "Update SimpleName: JmsMessageFacade(2037) to JmsMessage", "Insert InfixExpression: ||(2530) into IfStatement(2536) at 0", "Insert Block(2535) into IfStatement(2536) at 1", "Insert MethodInvocation(2542) into ExpressionStatement(2543) at 0", "Insert MethodInvocation(2546) into ExpressionStatement(2547) at 0", "Update TextElement: the JmsMessageFacade instance to read from(2083) to the JmsMessage instance to read from", "Update SimpleName: JmsMessageFacade(2098) to JmsMessage", "Insert Block(2605) into TryStatement(2614) at 0", "Insert CatchClause(2613) into TryStatement(2614) at 1", "Update TextElement: the JmsMessageFacade instance to read from(2140) to the JmsMessage instance to read from", "Update SimpleName: JmsMessageFacade(2153) to JmsMessage", "Insert MethodInvocation(2712) into ExpressionStatement(2713) at 0", "Update TextElement: the JmsMessageFacade instance to read property names from.(2204) to the JmsMessage instance to read property names from.", "Update SimpleName: JmsMessageFacade(2223) to JmsMessage", "Update TextElement: the JmsMessageFacade instance to read from(2264) to the JmsMessage instance to read from", "Update SimpleName: JmsMessageFacade(2286) to JmsMessage", "Insert SingleVariableDeclaration(2870) into EnhancedForStatement(2898) at 0", "Insert MethodInvocation(2875) into EnhancedForStatement(2898) at 1", "Insert Block(2897) into EnhancedForStatement(2898) at 2", "Insert SimpleName: String(2907) into SimpleType: String(2908) at 0", "Insert InfixExpression: ==(2918) into IfStatement(2937) at 0", "Insert Block(2924) into IfStatement(2937) at 1", "Insert IfStatement(2936) into IfStatement(2937) at 2", "Insert SimpleName: validateNames(2938) into IfStatement(2952) at 0", "Insert Block(2951) into IfStatement(2952) at 1", "Insert SimpleName: String(2959) into SimpleType: String(2960) at 0", "Insert InfixExpression: ||(2995) into IfStatement(3005) at 0", "Insert Block(3004) into IfStatement(3005) at 1", "Insert SimpleName: String(3012) into SimpleType: String(3013) at 0", "Insert InfixExpression: ||(3028) into IfStatement(3038) at 0", "Insert Block(3037) into IfStatement(3038) at 1", "Insert SimpleName: String(3045) into SimpleType: String(3046) at 0", "Insert PrimitiveType: char(3049) into VariableDeclarationStatement(3056) at 0", "Insert VariableDeclarationFragment(3055) into VariableDeclarationStatement(3056) at 1", "Insert PrefixExpression: !(3062) into IfStatement(3072) at 0", "Insert Block(3071) into IfStatement(3072) at 1", "Insert PrimitiveType: int(3073) into VariableDeclarationStatement(3079) at 0", "Insert VariableDeclarationFragment(3078) into VariableDeclarationStatement(3079) at 1", "Insert VariableDeclarationExpression(3084) into ForStatement(3117) at 0", "Insert InfixExpression: <(3087) into ForStatement(3117) at 1", "Insert PostfixExpression: ++(3089) into ForStatement(3117) at 2", "Insert Block(3116) into ForStatement(3117) at 3", "Insert SimpleName: Object(3124) into SimpleType: Object(3125) at 0", "Insert PrimitiveType: boolean(3130) into VariableDeclarationStatement(3173) at 0", "Insert VariableDeclarationFragment(3172) into VariableDeclarationStatement(3173) at 1", "Insert PrefixExpression: !(3175) into IfStatement(3188) at 0", "Insert Block(3187) into IfStatement(3188) at 1", "Insert SimpleType: HashSet(124) into ParameterizedType: HashSet<String>(127) at 0", "Insert SimpleType: String(126) into ParameterizedType: HashSet<String>(127) at 1", "Update SimpleName: JmsMessageFacade(134) to JmsMessage", "Update SimpleName: JmsMessageFacade(155) to JmsMessage", "Update SimpleName: JmsMessageFacade(176) to JmsMessage", "Update SimpleName: JmsMessageFacade(194) to JmsMessage", "Insert TextElement: Return true if the intercepter can bypass the read-only state of a Message(220) into TagElement(222) at 0", "Insert TextElement: and its properties.(221) into TagElement(222) at 1", "Insert TextElement:  true if the intercepter is immune to read-only state checks.(223) into TagElement: @return(224) at 0", "Insert SimpleName: VENDOR_PROPERTIES(281) into MethodInvocation(284) at 0", "Insert SimpleName: add(282) into MethodInvocation(284) at 1", "Insert SimpleName: JMS_AMQP_ACK_TYPE(283) into MethodInvocation(284) at 2", "Insert SimpleName: PROPERTY_INTERCEPTERS(2213) into MethodInvocation(2396) at 0", "Insert SimpleName: put(2214) into MethodInvocation(2396) at 1", "Insert SimpleName: JMS_AMQP_ACK_TYPE(2215) into MethodInvocation(2396) at 2", "Insert ClassInstanceCreation(2395) into MethodInvocation(2396) at 3", "Insert SimpleName: checkPropertyNameIsValid(2437) into MethodInvocation(2442) at 0", "Insert SimpleName: name(2438) into MethodInvocation(2442) at 1", "Insert MethodInvocation(2441) into MethodInvocation(2442) at 2", "Insert InfixExpression: ==(2525) into InfixExpression: ||(2530) at 0", "Insert PrefixExpression: !(2529) into InfixExpression: ||(2530) at 1", "Insert ExpressionStatement(2534) into Block(2535) at 0", "Insert SimpleName: checkPropertyNameIsValid(2537) into MethodInvocation(2542) at 0", "Insert SimpleName: name(2538) into MethodInvocation(2542) at 1", "Insert MethodInvocation(2541) into MethodInvocation(2542) at 2", "Insert SimpleName: checkValidObject(2544) into MethodInvocation(2546) at 0", "Insert SimpleName: value(2545) into MethodInvocation(2546) at 1", "Insert ExpressionStatement(2604) into Block(2605) at 0", "Insert SingleVariableDeclaration(2609) into CatchClause(2613) at 0", "Insert Block(2612) into CatchClause(2613) at 1", "Insert MethodInvocation(2705) into MethodInvocation(2707) at 0", "Insert SimpleName: message(2709) into MethodInvocation(2712) at 0", "Insert SimpleName: setReadOnlyProperties(2710) into MethodInvocation(2712) at 1", "Insert BooleanLiteral: false(2711) into MethodInvocation(2712) at 2", "Insert SimpleType: String(2868) into SingleVariableDeclaration(2870) at 0", "Insert SimpleName: name(2869) into SingleVariableDeclaration(2870) at 1", "Insert MethodInvocation(2873) into MethodInvocation(2875) at 0", "Insert SimpleName: getPropertyNames(2874) into MethodInvocation(2875) at 1", "Insert TryStatement(2891) into Block(2897) at 0", "Insert ExpressionStatement(2896) into Block(2897) at 1", "Insert SimpleName: propertyName(2916) into InfixExpression: ==(2918) at 0", "Insert NullLiteral(2917) into InfixExpression: ==(2918) at 1", "Insert ThrowStatement(2923) into Block(2924) at 0", "Insert InfixExpression: ==(2929) into IfStatement(2936) at 0", "Insert Block(2935) into IfStatement(2936) at 1", "Insert ExpressionStatement(2942) into Block(2951) at 0", "Insert ExpressionStatement(2946) into Block(2951) at 1", "Insert ExpressionStatement(2950) into Block(2951) at 2", "Insert MethodInvocation(2966) into InfixExpression: ||(2995) at 0", "Insert MethodInvocation(2970) into InfixExpression: ||(2995) at 1", "Insert MethodInvocation(2974) into InfixExpression: ||(2995) at 2", "Insert MethodInvocation(2978) into InfixExpression: ||(2995) at 3", "Insert MethodInvocation(2982) into InfixExpression: ||(2995) at 4", "Insert MethodInvocation(2986) into InfixExpression: ||(2995) at 5", "Insert MethodInvocation(2990) into InfixExpression: ||(2995) at 6", "Insert MethodInvocation(2994) into InfixExpression: ||(2995) at 7", "Insert ThrowStatement(3003) into Block(3004) at 0", "Insert MethodInvocation(3019) into InfixExpression: ||(3028) at 0", "Insert MethodInvocation(3023) into InfixExpression: ||(3028) at 1", "Insert MethodInvocation(3027) into InfixExpression: ||(3028) at 2", "Insert ThrowStatement(3036) into Block(3037) at 0", "Insert SimpleName: startChar(3050) into VariableDeclarationFragment(3055) at 0", "Insert MethodInvocation(3054) into VariableDeclarationFragment(3055) at 1", "Insert ParenthesizedExpression(3061) into PrefixExpression: !(3062) at 0", "Insert ThrowStatement(3070) into Block(3071) at 0", "Insert SimpleName: length(3074) into VariableDeclarationFragment(3078) at 0", "Insert MethodInvocation(3077) into VariableDeclarationFragment(3078) at 1", "Insert PrimitiveType: int(3080) into VariableDeclarationExpression(3084) at 0", "Insert VariableDeclarationFragment(3083) into VariableDeclarationExpression(3084) at 1", "Insert SimpleName: i(3085) into InfixExpression: <(3087) at 0", "Insert SimpleName: length(3086) into InfixExpression: <(3087) at 1", "Insert SimpleName: i(3088) into PostfixExpression: ++(3089) at 0", "Insert VariableDeclarationStatement(3097) into Block(3116) at 0", "Insert IfStatement(3115) into Block(3116) at 1", "Insert SimpleName: valid(3131) into VariableDeclarationFragment(3172) at 0", "Insert InfixExpression: ||(3171) into VariableDeclarationFragment(3172) at 1", "Insert SimpleName: valid(3174) into PrefixExpression: !(3175) at 0", "Insert ThrowStatement(3186) into Block(3187) at 0", "Insert SimpleName: HashSet(123) into SimpleType: HashSet(124) at 0", "Insert SimpleName: String(125) into SimpleType: String(126) at 0", "Insert SimpleType: PropertyIntercepter(2217) into ClassInstanceCreation(2395) at 0", "Insert AnonymousClassDeclaration(2394) into ClassInstanceCreation(2395) at 1", "Insert SimpleName: message(2439) into MethodInvocation(2441) at 0", "Insert SimpleName: isValidatePropertyNames(2440) into MethodInvocation(2441) at 1", "Insert SimpleName: jmsPropertyExpression(2523) into InfixExpression: ==(2525) at 0", "Insert NullLiteral(2524) into InfixExpression: ==(2525) at 1", "Insert MethodInvocation(2528) into PrefixExpression: !(2529) at 0", "Insert MethodInvocation(2533) into ExpressionStatement(2534) at 0", "Insert SimpleName: message(2539) into MethodInvocation(2541) at 0", "Insert SimpleName: isValidatePropertyNames(2540) into MethodInvocation(2541) at 1", "Insert MethodInvocation(2603) into ExpressionStatement(2604) at 0", "Insert SimpleType: IllegalArgumentException(2607) into SingleVariableDeclaration(2609) at 0", "Insert SimpleName: iae(2608) into SingleVariableDeclaration(2609) at 1", "Insert ReturnStatement(2611) into Block(2612) at 0", "Move SimpleName: message(2194) into MethodInvocation(2705) at 0", "Insert SimpleName: getFacade(2704) into MethodInvocation(2705) at 1", "Insert MethodInvocation(2766) into MethodInvocation(2768) at 0", "Insert SimpleName: String(2867) into SimpleType: String(2868) at 0", "Insert SimpleName: message(2871) into MethodInvocation(2873) at 0", "Insert SimpleName: getFacade(2872) into MethodInvocation(2873) at 1", "Insert Block(2883) into TryStatement(2891) at 0", "Insert CatchClause(2890) into TryStatement(2891) at 1", "Insert MethodInvocation(2895) into ExpressionStatement(2896) at 0", "Insert ClassInstanceCreation(2922) into ThrowStatement(2923) at 0", "Insert MethodInvocation(2927) into InfixExpression: ==(2929) at 0", "Insert NumberLiteral: 0(2928) into InfixExpression: ==(2929) at 1", "Insert ThrowStatement(2934) into Block(2935) at 0", "Insert MethodInvocation(2941) into ExpressionStatement(2942) at 0", "Insert MethodInvocation(2945) into ExpressionStatement(2946) at 0", "Insert MethodInvocation(2949) into ExpressionStatement(2950) at 0", "Insert StringLiteral: \"NOT\"(2963) into MethodInvocation(2966) at 0", "Insert SimpleName: equals(2964) into MethodInvocation(2966) at 1", "Insert SimpleName: identifier(2965) into MethodInvocation(2966) at 2", "Insert StringLiteral: \"AND\"(2967) into MethodInvocation(2970) at 0", "Insert SimpleName: equals(2968) into MethodInvocation(2970) at 1", "Insert SimpleName: identifier(2969) into MethodInvocation(2970) at 2", "Insert StringLiteral: \"OR\"(2971) into MethodInvocation(2974) at 0", "Insert SimpleName: equals(2972) into MethodInvocation(2974) at 1", "Insert SimpleName: identifier(2973) into MethodInvocation(2974) at 2", "Insert StringLiteral: \"BETWEEN\"(2975) into MethodInvocation(2978) at 0", "Insert SimpleName: equals(2976) into MethodInvocation(2978) at 1", "Insert SimpleName: identifier(2977) into MethodInvocation(2978) at 2", "Insert StringLiteral: \"LIKE\"(2979) into MethodInvocation(2982) at 0", "Insert SimpleName: equals(2980) into MethodInvocation(2982) at 1", "Insert SimpleName: identifier(2981) into MethodInvocation(2982) at 2", "Insert StringLiteral: \"IN\"(2983) into MethodInvocation(2986) at 0", "Insert SimpleName: equals(2984) into MethodInvocation(2986) at 1", "Insert SimpleName: identifier(2985) into MethodInvocation(2986) at 2", "Insert StringLiteral: \"IS\"(2987) into MethodInvocation(2990) at 0", "Insert SimpleName: equals(2988) into MethodInvocation(2990) at 1", "Insert SimpleName: identifier(2989) into MethodInvocation(2990) at 2", "Insert StringLiteral: \"ESCAPE\"(2991) into MethodInvocation(2994) at 0", "Insert SimpleName: equals(2992) into MethodInvocation(2994) at 1", "Insert SimpleName: identifier(2993) into MethodInvocation(2994) at 2", "Insert ClassInstanceCreation(3002) into ThrowStatement(3003) at 0", "Insert StringLiteral: \"NULL\"(3016) into MethodInvocation(3019) at 0", "Insert SimpleName: equals(3017) into MethodInvocation(3019) at 1", "Insert SimpleName: identifier(3018) into MethodInvocation(3019) at 2", "Insert StringLiteral: \"TRUE\"(3020) into MethodInvocation(3023) at 0", "Insert SimpleName: equals(3021) into MethodInvocation(3023) at 1", "Insert SimpleName: identifier(3022) into MethodInvocation(3023) at 2", "Insert StringLiteral: \"FALSE\"(3024) into MethodInvocation(3027) at 0", "Insert SimpleName: equals(3025) into MethodInvocation(3027) at 1", "Insert SimpleName: identifier(3026) into MethodInvocation(3027) at 2", "Insert ClassInstanceCreation(3035) into ThrowStatement(3036) at 0", "Insert SimpleName: identifier(3051) into MethodInvocation(3054) at 0", "Insert SimpleName: charAt(3052) into MethodInvocation(3054) at 1", "Insert NumberLiteral: 0(3053) into MethodInvocation(3054) at 2", "Insert MethodInvocation(3060) into ParenthesizedExpression(3061) at 0", "Insert ClassInstanceCreation(3069) into ThrowStatement(3070) at 0", "Insert SimpleName: identifier(3075) into MethodInvocation(3077) at 0", "Insert SimpleName: length(3076) into MethodInvocation(3077) at 1", "Insert SimpleName: i(3081) into VariableDeclarationFragment(3083) at 0", "Insert NumberLiteral: 1(3082) into VariableDeclarationFragment(3083) at 1", "Insert PrimitiveType: char(3090) into VariableDeclarationStatement(3097) at 0", "Insert VariableDeclarationFragment(3096) into VariableDeclarationStatement(3097) at 1", "Insert PrefixExpression: !(3103) into IfStatement(3115) at 0", "Insert Block(3114) into IfStatement(3115) at 1", "Insert InstanceofExpression(3135) into InfixExpression: ||(3171) at 0", "Insert InstanceofExpression(3139) into InfixExpression: ||(3171) at 1", "Insert InstanceofExpression(3143) into InfixExpression: ||(3171) at 2", "Insert InstanceofExpression(3147) into InfixExpression: ||(3171) at 3", "Insert InstanceofExpression(3151) into InfixExpression: ||(3171) at 4", "Insert InstanceofExpression(3155) into InfixExpression: ||(3171) at 5", "Insert InstanceofExpression(3159) into InfixExpression: ||(3171) at 6", "Insert InstanceofExpression(3163) into InfixExpression: ||(3171) at 7", "Insert InstanceofExpression(3167) into InfixExpression: ||(3171) at 8", "Insert InfixExpression: ==(3170) into InfixExpression: ||(3171) at 9", "Insert ClassInstanceCreation(3185) into ThrowStatement(3186) at 0", "Insert MethodDeclaration(393) into AnonymousClassDeclaration(394) at 4", "Insert MethodDeclaration(503) into AnonymousClassDeclaration(504) at 4", "Insert MethodDeclaration(634) into AnonymousClassDeclaration(635) at 4", "Insert MethodDeclaration(848) into AnonymousClassDeclaration(849) at 4", "Insert MethodDeclaration(978) into AnonymousClassDeclaration(979) at 4", "Insert MethodDeclaration(1120) into AnonymousClassDeclaration(1121) at 4", "Insert MethodDeclaration(1256) into AnonymousClassDeclaration(1257) at 4", "Insert MethodDeclaration(1389) into AnonymousClassDeclaration(1390) at 4", "Insert MethodDeclaration(1525) into AnonymousClassDeclaration(1526) at 4", "Insert MethodDeclaration(1659) into AnonymousClassDeclaration(1660) at 4", "Insert MethodDeclaration(1789) into AnonymousClassDeclaration(1790) at 4", "Insert MethodDeclaration(1920) into AnonymousClassDeclaration(1921) at 4", "Insert MethodDeclaration(2053) into AnonymousClassDeclaration(2054) at 4", "Insert MethodDeclaration(2208) into AnonymousClassDeclaration(2209) at 4", "Insert SimpleName: PropertyIntercepter(2216) into SimpleType: PropertyIntercepter(2217) at 0", "Insert MethodDeclaration(2260) into AnonymousClassDeclaration(2394) at 0", "Insert MethodDeclaration(2332) into AnonymousClassDeclaration(2394) at 1", "Insert MethodDeclaration(2358) into AnonymousClassDeclaration(2394) at 2", "Insert MethodDeclaration(2384) into AnonymousClassDeclaration(2394) at 3", "Insert MethodDeclaration(2393) into AnonymousClassDeclaration(2394) at 4", "Insert SimpleName: jmsPropertyExpression(2526) into MethodInvocation(2528) at 0", "Insert SimpleName: isAlwaysWritable(2527) into MethodInvocation(2528) at 1", "Insert SimpleName: message(2531) into MethodInvocation(2533) at 0", "Insert SimpleName: checkReadOnlyProperties(2532) into MethodInvocation(2533) at 1", "Insert MethodInvocation(2560) into MethodInvocation(2564) at 0", "Insert SimpleName: checkPropertyNameIsValid(2598) into MethodInvocation(2603) at 0", "Insert SimpleName: name(2599) into MethodInvocation(2603) at 1", "Insert MethodInvocation(2602) into MethodInvocation(2603) at 2", "Insert SimpleName: IllegalArgumentException(2606) into SimpleType: IllegalArgumentException(2607) at 0", "Insert BooleanLiteral: false(2610) into ReturnStatement(2611) at 0", "Insert MethodInvocation(2635) into MethodInvocation(2638) at 0", "Move SimpleName: message(2248) into MethodInvocation(2766) at 0", "Insert SimpleName: getFacade(2765) into MethodInvocation(2766) at 1", "Move ExpressionStatement(2355) into Block(2883) at 0", "Insert SingleVariableDeclaration(2887) into CatchClause(2890) at 0", "Insert Block(2889) into CatchClause(2890) at 1", "Insert SimpleName: names(2892) into MethodInvocation(2895) at 0", "Insert SimpleName: add(2893) into MethodInvocation(2895) at 1", "Insert SimpleName: name(2894) into MethodInvocation(2895) at 2", "Insert SimpleType: IllegalArgumentException(2920) into ClassInstanceCreation(2922) at 0", "Insert StringLiteral: \"Property name must not be null\"(2921) into ClassInstanceCreation(2922) at 1", "Insert SimpleName: propertyName(2925) into MethodInvocation(2927) at 0", "Insert SimpleName: length(2926) into MethodInvocation(2927) at 1", "Insert ClassInstanceCreation(2933) into ThrowStatement(2934) at 0", "Insert SimpleName: checkIdentifierLetterAndDigitRequirements(2939) into MethodInvocation(2941) at 0", "Insert SimpleName: propertyName(2940) into MethodInvocation(2941) at 1", "Insert SimpleName: checkIdentifierIsntNullTrueFalse(2943) into MethodInvocation(2945) at 0", "Insert SimpleName: propertyName(2944) into MethodInvocation(2945) at 1", "Insert SimpleName: checkIdentifierIsntLogicOperator(2947) into MethodInvocation(2949) at 0", "Insert SimpleName: propertyName(2948) into MethodInvocation(2949) at 1", "Insert SimpleType: IllegalArgumentException(2997) into ClassInstanceCreation(3002) at 0", "Insert InfixExpression: +(3001) into ClassInstanceCreation(3002) at 1", "Insert SimpleType: IllegalArgumentException(3030) into ClassInstanceCreation(3035) at 0", "Insert InfixExpression: +(3034) into ClassInstanceCreation(3035) at 1", "Insert SimpleName: Character(3057) into MethodInvocation(3060) at 0", "Insert SimpleName: isJavaIdentifierStart(3058) into MethodInvocation(3060) at 1", "Insert SimpleName: startChar(3059) into MethodInvocation(3060) at 2", "Insert SimpleType: IllegalArgumentException(3064) into ClassInstanceCreation(3069) at 0", "Insert InfixExpression: +(3068) into ClassInstanceCreation(3069) at 1", "Insert SimpleName: ch(3091) into VariableDeclarationFragment(3096) at 0", "Insert MethodInvocation(3095) into VariableDeclarationFragment(3096) at 1", "Insert ParenthesizedExpression(3102) into PrefixExpression: !(3103) at 0", "Insert ThrowStatement(3113) into Block(3114) at 0", "Insert SimpleName: value(3132) into InstanceofExpression(3135) at 0", "Insert SimpleType: Boolean(3134) into InstanceofExpression(3135) at 1", "Insert SimpleName: value(3136) into InstanceofExpression(3139) at 0", "Insert SimpleType: Byte(3138) into InstanceofExpression(3139) at 1", "Insert SimpleName: value(3140) into InstanceofExpression(3143) at 0", "Insert SimpleType: Short(3142) into InstanceofExpression(3143) at 1", "Insert SimpleName: value(3144) into InstanceofExpression(3147) at 0", "Insert SimpleType: Integer(3146) into InstanceofExpression(3147) at 1", "Insert SimpleName: value(3148) into InstanceofExpression(3151) at 0", "Insert SimpleType: Long(3150) into InstanceofExpression(3151) at 1", "Insert SimpleName: value(3152) into InstanceofExpression(3155) at 0", "Insert SimpleType: Float(3154) into InstanceofExpression(3155) at 1", "Insert SimpleName: value(3156) into InstanceofExpression(3159) at 0", "Insert SimpleType: Double(3158) into InstanceofExpression(3159) at 1", "Insert SimpleName: value(3160) into InstanceofExpression(3163) at 0", "Insert SimpleType: Character(3162) into InstanceofExpression(3163) at 1", "Insert SimpleName: value(3164) into InstanceofExpression(3167) at 0", "Insert SimpleType: String(3166) into InstanceofExpression(3167) at 1", "Insert SimpleName: value(3168) into InfixExpression: ==(3170) at 0", "Insert NullLiteral(3169) into InfixExpression: ==(3170) at 1", "Insert SimpleType: MessageFormatException(3177) into ClassInstanceCreation(3185) at 0", "Insert InfixExpression: +(3184) into ClassInstanceCreation(3185) at 1", "Move MarkerAnnotation(331) into MethodDeclaration(366) at 0", "Move MarkerAnnotation(407) into MethodDeclaration(384) at 0", "Move MarkerAnnotation(378) into MethodDeclaration(393) at 0", "Insert Modifier: public(387) into MethodDeclaration(393) at 1", "Insert PrimitiveType: boolean(388) into MethodDeclaration(393) at 2", "Insert SimpleName: isAlwaysWritable(389) into MethodDeclaration(393) at 3", "Insert Block(392) into MethodDeclaration(393) at 4", "Move MarkerAnnotation(424) into MethodDeclaration(457) at 0", "Move SimpleType: Object(452) into MethodDeclaration(457) at 2", "Move SimpleType: JMSException(459) into MethodDeclaration(457) at 6", "Move MarkerAnnotation(449) into MethodDeclaration(476) at 0", "Move MarkerAnnotation(314) into MethodDeclaration(494) at 0", "Move MarkerAnnotation(538) into MethodDeclaration(503) at 0", "Insert Modifier: public(497) into MethodDeclaration(503) at 1", "Insert PrimitiveType: boolean(498) into MethodDeclaration(503) at 2", "Insert SimpleName: isAlwaysWritable(499) into MethodDeclaration(503) at 3", "Insert Block(502) into MethodDeclaration(503) at 4", "Move MarkerAnnotation(521) into MethodDeclaration(532) at 0", "Move SimpleType: Object(566) into MethodDeclaration(532) at 2", "Move SimpleType: JMSException(573) into MethodDeclaration(532) at 5", "Move MarkerAnnotation(563) into MethodDeclaration(607) at 0", "Insert MarkerAnnotation(609) into MethodDeclaration(625) at 0", "Move MarkerAnnotation(735) into MethodDeclaration(634) at 0", "Insert Modifier: public(628) into MethodDeclaration(634) at 1", "Insert PrimitiveType: boolean(629) into MethodDeclaration(634) at 2", "Insert SimpleName: isAlwaysWritable(630) into MethodDeclaration(634) at 3", "Insert Block(633) into MethodDeclaration(634) at 4", "Move MarkerAnnotation(722) into MethodDeclaration(666) at 0", "Move SimpleType: Object(763) into MethodDeclaration(666) at 2", "Move SimpleType: JMSException(770) into MethodDeclaration(666) at 5", "Move MarkerAnnotation(760) into MethodDeclaration(821) at 0", "Move Block(847) into MethodDeclaration(821) at 5", "Move MarkerAnnotation(875) into MethodDeclaration(839) at 0", "Insert MarkerAnnotation(841) into MethodDeclaration(848) at 0", "Insert Modifier: public(842) into MethodDeclaration(848) at 1", "Insert PrimitiveType: boolean(843) into MethodDeclaration(848) at 2", "Insert SimpleName: isAlwaysWritable(844) into MethodDeclaration(848) at 3", "Insert Block(847) into MethodDeclaration(848) at 4", "Move MarkerAnnotation(850) into MethodDeclaration(880) at 0", "Move SimpleType: Object(878) into MethodDeclaration(880) at 2", "Move SimpleType: JMSException(885) into MethodDeclaration(880) at 5", "Move Block(732) into MethodDeclaration(951) at 5", "Move MarkerAnnotation(956) into MethodDeclaration(969) at 0", "Move MarkerAnnotation(973) into MethodDeclaration(978) at 0", "Insert Modifier: public(972) into MethodDeclaration(978) at 1", "Insert PrimitiveType: boolean(973) into MethodDeclaration(978) at 2", "Insert SimpleName: isAlwaysWritable(974) into MethodDeclaration(978) at 3", "Insert Block(977) into MethodDeclaration(978) at 4", "Move MarkerAnnotation(998) into MethodDeclaration(1018) at 0", "Move SimpleType: Object(1001) into MethodDeclaration(1018) at 2", "Move SimpleType: JMSException(1008) into MethodDeclaration(1018) at 5", "Move MarkerAnnotation(1075) into MethodDeclaration(1093) at 0", "Move MarkerAnnotation(1092) into MethodDeclaration(1111) at 0", "Move MarkerAnnotation(1117) into MethodDeclaration(1120) at 0", "Insert Modifier: public(1114) into MethodDeclaration(1120) at 1", "Insert PrimitiveType: boolean(1115) into MethodDeclaration(1120) at 2", "Insert SimpleName: isAlwaysWritable(1116) into MethodDeclaration(1120) at 3", "Insert Block(1119) into MethodDeclaration(1120) at 4", "Move MarkerAnnotation(1189) into MethodDeclaration(1152) at 0", "Move SimpleType: Object(1120) into MethodDeclaration(1152) at 2", "Move SimpleType: JMSException(1127) into MethodDeclaration(1152) at 5", "Move MarkerAnnotation(1206) into MethodDeclaration(1229) at 0", "Move MarkerAnnotation(1233) into MethodDeclaration(1247) at 0", "Insert MarkerAnnotation(1249) into MethodDeclaration(1256) at 0", "Insert Modifier: public(1250) into MethodDeclaration(1256) at 1", "Insert PrimitiveType: boolean(1251) into MethodDeclaration(1256) at 2", "Insert SimpleName: isAlwaysWritable(1252) into MethodDeclaration(1256) at 3", "Insert Block(1255) into MethodDeclaration(1256) at 4", "Move MarkerAnnotation(1310) into MethodDeclaration(1285) at 0", "Move SimpleType: Object(1236) into MethodDeclaration(1285) at 2", "Move SimpleType: JMSException(1243) into MethodDeclaration(1285) at 5", "Move MarkerAnnotation(1352) into MethodDeclaration(1360) at 0", "Move MarkerAnnotation(1327) into MethodDeclaration(1380) at 0", "Move SimpleType: JMSException(1362) into MethodDeclaration(1380) at 5", "Insert MarkerAnnotation(1382) into MethodDeclaration(1389) at 0", "Insert Modifier: public(1383) into MethodDeclaration(1389) at 1", "Insert PrimitiveType: boolean(1384) into MethodDeclaration(1389) at 2", "Insert SimpleName: isAlwaysWritable(1385) into MethodDeclaration(1389) at 3", "Insert Block(1388) into MethodDeclaration(1389) at 4", "Move MarkerAnnotation(1429) into MethodDeclaration(1421) at 0", "Move SimpleType: Object(1355) into MethodDeclaration(1421) at 2", "Move SimpleType: JMSException(1594) into MethodDeclaration(1421) at 5", "Move MarkerAnnotation(1444) into MethodDeclaration(1498) at 0", "Move MarkerAnnotation(1559) into MethodDeclaration(1516) at 0", "Move MarkerAnnotation(1525) into MethodDeclaration(1525) at 0", "Insert Modifier: public(1519) into MethodDeclaration(1525) at 1", "Insert PrimitiveType: boolean(1520) into MethodDeclaration(1525) at 2", "Insert SimpleName: isAlwaysWritable(1521) into MethodDeclaration(1525) at 3", "Insert Block(1524) into MethodDeclaration(1525) at 4", "Move MarkerAnnotation(1546) into MethodDeclaration(1557) at 0", "Move SimpleType: Object(1528) into MethodDeclaration(1557) at 2", "Move SimpleType: JMSException(1535) into MethodDeclaration(1557) at 5", "Move MarkerAnnotation(1584) into MethodDeclaration(1632) at 0", "Move MarkerAnnotation(1673) into MethodDeclaration(1650) at 0", "Move MarkerAnnotation(1656) into MethodDeclaration(1659) at 0", "Insert Modifier: public(1653) into MethodDeclaration(1659) at 1", "Insert PrimitiveType: boolean(1654) into MethodDeclaration(1659) at 2", "Insert SimpleName: isAlwaysWritable(1655) into MethodDeclaration(1659) at 3", "Insert Block(1658) into MethodDeclaration(1659) at 4", "Move MarkerAnnotation(1698) into MethodDeclaration(1749) at 0", "Move SimpleType: Object(1701) into MethodDeclaration(1749) at 2", "Move SimpleType: JMSException(1708) into MethodDeclaration(1749) at 5", "Insert MarkerAnnotation(1751) into MethodDeclaration(1762) at 0", "Move MarkerAnnotation(1772) into MethodDeclaration(1780) at 0", "Move MarkerAnnotation(1789) into MethodDeclaration(1789) at 0", "Insert Modifier: public(1783) into MethodDeclaration(1789) at 1", "Insert PrimitiveType: boolean(1784) into MethodDeclaration(1789) at 2", "Insert SimpleName: isAlwaysWritable(1785) into MethodDeclaration(1789) at 3", "Insert Block(1788) into MethodDeclaration(1789) at 4", "Insert MarkerAnnotation(1800) into MethodDeclaration(1818) at 0", "Move SimpleType: JMSException(1215) into MethodDeclaration(1818) at 5", "Insert MarkerAnnotation(1876) into MethodDeclaration(1893) at 0", "Insert MarkerAnnotation(1895) into MethodDeclaration(1911) at 0", "Move MarkerAnnotation(1908) into MethodDeclaration(1920) at 0", "Insert Modifier: public(1914) into MethodDeclaration(1920) at 1", "Insert PrimitiveType: boolean(1915) into MethodDeclaration(1920) at 2", "Insert SimpleName: isAlwaysWritable(1916) into MethodDeclaration(1920) at 3", "Insert Block(1919) into MethodDeclaration(1920) at 4", "Move MarkerAnnotation(1925) into MethodDeclaration(1949) at 0", "Move SimpleType: Object(381) into MethodDeclaration(1949) at 2", "Move SimpleType: JMSException(388) into MethodDeclaration(1949) at 5", "Insert MarkerAnnotation(2009) into MethodDeclaration(2026) at 0", "Insert MarkerAnnotation(2028) into MethodDeclaration(2044) at 0", "Insert MarkerAnnotation(2046) into MethodDeclaration(2053) at 0", "Insert Modifier: public(2047) into MethodDeclaration(2053) at 1", "Insert PrimitiveType: boolean(2048) into MethodDeclaration(2053) at 2", "Insert SimpleName: isAlwaysWritable(2049) into MethodDeclaration(2053) at 3", "Insert Block(2052) into MethodDeclaration(2053) at 4", "Insert MarkerAnnotation(2164) into MethodDeclaration(2181) at 0", "Insert MarkerAnnotation(2183) into MethodDeclaration(2199) at 0", "Insert MarkerAnnotation(2201) into MethodDeclaration(2208) at 0", "Insert Modifier: public(2202) into MethodDeclaration(2208) at 1", "Insert PrimitiveType: boolean(2203) into MethodDeclaration(2208) at 2", "Insert SimpleName: isAlwaysWritable(2204) into MethodDeclaration(2208) at 3", "Insert Block(2207) into MethodDeclaration(2208) at 4", "Insert MarkerAnnotation(2219) into MethodDeclaration(2260) at 0", "Insert Modifier: public(2220) into MethodDeclaration(2260) at 1", "Insert SimpleType: Object(2222) into MethodDeclaration(2260) at 2", "Insert SimpleName: getProperty(2223) into MethodDeclaration(2260) at 3", "Insert SingleVariableDeclaration(2227) into MethodDeclaration(2260) at 4", "Insert SimpleType: JMSException(2229) into MethodDeclaration(2260) at 5", "Insert Block(2259) into MethodDeclaration(2260) at 6", "Insert MarkerAnnotation(2262) into MethodDeclaration(2332) at 0", "Insert Modifier: public(2263) into MethodDeclaration(2332) at 1", "Insert PrimitiveType: void(2264) into MethodDeclaration(2332) at 2", "Insert SimpleName: setProperty(2265) into MethodDeclaration(2332) at 3", "Insert SingleVariableDeclaration(2269) into MethodDeclaration(2332) at 4", "Insert SingleVariableDeclaration(2273) into MethodDeclaration(2332) at 5", "Insert SimpleType: JMSException(2275) into MethodDeclaration(2332) at 6", "Insert Block(2331) into MethodDeclaration(2332) at 7", "Insert MarkerAnnotation(2334) into MethodDeclaration(2358) at 0", "Insert Modifier: public(2335) into MethodDeclaration(2358) at 1", "Insert PrimitiveType: boolean(2336) into MethodDeclaration(2358) at 2", "Insert SimpleName: propertyExists(2337) into MethodDeclaration(2358) at 3", "Insert SingleVariableDeclaration(2341) into MethodDeclaration(2358) at 4", "Insert Block(2357) into MethodDeclaration(2358) at 5", "Insert MarkerAnnotation(2360) into MethodDeclaration(2384) at 0", "Insert Modifier: public(2361) into MethodDeclaration(2384) at 1", "Insert PrimitiveType: void(2362) into MethodDeclaration(2384) at 2", "Insert SimpleName: clearProperty(2363) into MethodDeclaration(2384) at 3", "Insert SingleVariableDeclaration(2367) into MethodDeclaration(2384) at 4", "Insert SimpleType: JMSException(2369) into MethodDeclaration(2384) at 5", "Insert Block(2383) into MethodDeclaration(2384) at 6", "Insert MarkerAnnotation(2386) into MethodDeclaration(2393) at 0", "Insert Modifier: public(2387) into MethodDeclaration(2393) at 1", "Insert PrimitiveType: boolean(2388) into MethodDeclaration(2393) at 2", "Insert SimpleName: isAlwaysWritable(2389) into MethodDeclaration(2393) at 3", "Insert Block(2392) into MethodDeclaration(2393) at 4", "Insert MethodInvocation(2467) into MethodInvocation(2470) at 0", "Move SimpleName: message(2070) into MethodInvocation(2560) at 0", "Insert SimpleName: getFacade(2559) into MethodInvocation(2560) at 1", "Insert SimpleName: message(2600) into MethodInvocation(2602) at 0", "Insert SimpleName: isValidatePropertyNames(2601) into MethodInvocation(2602) at 1", "Move SimpleName: message(2126) into MethodInvocation(2635) at 0", "Insert SimpleName: getFacade(2634) into MethodInvocation(2635) at 1", "Insert SimpleType: IllegalArgumentException(2885) into SingleVariableDeclaration(2887) at 0", "Insert SimpleName: iae(2886) into SingleVariableDeclaration(2887) at 1", "Insert ContinueStatement(2888) into Block(2889) at 0", "Insert SimpleName: IllegalArgumentException(2919) into SimpleType: IllegalArgumentException(2920) at 0", "Insert SimpleType: IllegalArgumentException(2931) into ClassInstanceCreation(2933) at 0", "Insert StringLiteral: \"Property name must not be the empty string\"(2932) into ClassInstanceCreation(2933) at 1", "Insert SimpleName: IllegalArgumentException(2996) into SimpleType: IllegalArgumentException(2997) at 0", "Insert StringLiteral: \"Identifier not allowed in JMS: '\"(2998) into InfixExpression: +(3001) at 0", "Insert SimpleName: identifier(2999) into InfixExpression: +(3001) at 1", "Insert StringLiteral: \"'\"(3000) into InfixExpression: +(3001) at 2", "Insert SimpleName: IllegalArgumentException(3029) into SimpleType: IllegalArgumentException(3030) at 0", "Insert StringLiteral: \"Identifier not allowed in JMS: '\"(3031) into InfixExpression: +(3034) at 0", "Insert SimpleName: identifier(3032) into InfixExpression: +(3034) at 1", "Insert StringLiteral: \"'\"(3033) into InfixExpression: +(3034) at 2", "Insert SimpleName: IllegalArgumentException(3063) into SimpleType: IllegalArgumentException(3064) at 0", "Insert StringLiteral: \"Identifier does not begin with a valid JMS identifier start character: '\"(3065) into InfixExpression: +(3068) at 0", "Insert SimpleName: identifier(3066) into InfixExpression: +(3068) at 1", "Insert StringLiteral: \"' \"(3067) into InfixExpression: +(3068) at 2", "Insert SimpleName: identifier(3092) into MethodInvocation(3095) at 0", "Insert SimpleName: charAt(3093) into MethodInvocation(3095) at 1", "Insert SimpleName: i(3094) into MethodInvocation(3095) at 2", "Insert MethodInvocation(3101) into ParenthesizedExpression(3102) at 0", "Insert ClassInstanceCreation(3112) into ThrowStatement(3113) at 0", "Insert SimpleName: Boolean(3133) into SimpleType: Boolean(3134) at 0", "Insert SimpleName: Byte(3137) into SimpleType: Byte(3138) at 0", "Insert SimpleName: Short(3141) into SimpleType: Short(3142) at 0", "Insert SimpleName: Integer(3145) into SimpleType: Integer(3146) at 0", "Insert SimpleName: Long(3149) into SimpleType: Long(3150) at 0", "Insert SimpleName: Float(3153) into SimpleType: Float(3154) at 0", "Insert SimpleName: Double(3157) into SimpleType: Double(3158) at 0", "Insert SimpleName: Character(3161) into SimpleType: Character(3162) at 0", "Insert SimpleName: String(3165) into SimpleType: String(3166) at 0", "Insert SimpleName: MessageFormatException(3176) into SimpleType: MessageFormatException(3177) at 0", "Insert StringLiteral: \"Only objectified primitive objects and String types are allowed but was: \"(3178) into InfixExpression: +(3184) at 0", "Insert SimpleName: value(3179) into InfixExpression: +(3184) at 1", "Insert StringLiteral: \" type: \"(3180) into InfixExpression: +(3184) at 2", "Insert MethodInvocation(3183) into InfixExpression: +(3184) at 3", "Update SimpleType: JmsMessageFacade(264) to JmsMessage", "Update SimpleType: JmsMessageFacade(287) to JmsMessage", "Update SimpleType: JmsMessageFacade(319) to JmsMessage", "Update SimpleType: JmsMessageFacade(336) to JmsMessage", "Insert ReturnStatement(391) into Block(392) at 0", "Update SimpleType: JmsMessageFacade(361) to JmsMessage", "Update SimpleType: JmsMessageFacade(384) to JmsMessage", "Update SimpleType: JmsMessageFacade(412) to JmsMessage", "Update SimpleType: JmsMessageFacade(429) to JmsMessage", "Insert ReturnStatement(501) into Block(502) at 0", "Update SimpleType: JmsMessageFacade(455) to JmsMessage", "Update SimpleType: JmsMessageFacade(472) to JmsMessage", "Update SimpleType: JmsMessageFacade(526) to JmsMessage", "Insert SimpleName: Override(608) into MarkerAnnotation(609) at 0", "Update SimpleType: JmsMessageFacade(543) to JmsMessage", "Insert ReturnStatement(632) into Block(633) at 0", "Update SimpleType: JmsMessageFacade(569) to JmsMessage", "Update SimpleType: JmsMessageFacade(589) to JmsMessage", "Update SimpleType: JmsMessageFacade(727) to JmsMessage", "Update SimpleType: JmsMessageFacade(740) to JmsMessage", "Insert SimpleName: Override(840) into MarkerAnnotation(841) at 0", "Insert ReturnStatement(846) into Block(847) at 0", "Update SimpleType: JmsMessageFacade(766) to JmsMessage", "Update SimpleType: JmsMessageFacade(786) to JmsMessage", "Update SimpleType: JmsMessageFacade(842) to JmsMessage", "Update SimpleType: JmsMessageFacade(855) to JmsMessage", "Insert ReturnStatement(976) into Block(977) at 0", "Update SimpleType: JmsMessageFacade(881) to JmsMessage", "Update SimpleType: JmsMessageFacade(907) to JmsMessage", "Update SimpleType: JmsMessageFacade(961) to JmsMessage", "Update SimpleType: JmsMessageFacade(978) to JmsMessage", "Insert ReturnStatement(1118) into Block(1119) at 0", "Update SimpleType: JmsMessageFacade(1004) to JmsMessage", "Update SimpleType: JmsMessageFacade(1024) to JmsMessage", "Update SimpleType: JmsMessageFacade(1080) to JmsMessage", "Update SimpleType: JmsMessageFacade(1097) to JmsMessage", "Insert SimpleName: Override(1248) into MarkerAnnotation(1249) at 0", "Insert ReturnStatement(1254) into Block(1255) at 0", "Update SimpleType: JmsMessageFacade(1123) to JmsMessage", "Update SimpleType: JmsMessageFacade(1140) to JmsMessage", "Update SimpleType: JmsMessageFacade(1194) to JmsMessage", "Update SimpleType: JmsMessageFacade(1211) to JmsMessage", "Insert SimpleName: Override(1381) into MarkerAnnotation(1382) at 0", "Insert ReturnStatement(1387) into Block(1388) at 0", "Update SimpleType: JmsMessageFacade(1239) to JmsMessage", "Update SimpleType: JmsMessageFacade(1259) to JmsMessage", "Update SimpleType: JmsMessageFacade(1315) to JmsMessage", "Update SimpleType: JmsMessageFacade(1332) to JmsMessage", "Insert ReturnStatement(1523) into Block(1524) at 0", "Update SimpleType: JmsMessageFacade(1358) to JmsMessage", "Update SimpleType: JmsMessageFacade(1378) to JmsMessage", "Update SimpleType: JmsMessageFacade(1434) to JmsMessage", "Update SimpleType: JmsMessageFacade(1449) to JmsMessage", "Insert ReturnStatement(1657) into Block(1658) at 0", "Update SimpleType: JmsMessageFacade(1474) to JmsMessage", "Update SimpleType: JmsMessageFacade(1531) to JmsMessage", "Insert SimpleName: Override(1750) into MarkerAnnotation(1751) at 0", "Update SimpleType: JmsMessageFacade(1551) to JmsMessage", "Update SimpleType: JmsMessageFacade(1564) to JmsMessage", "Insert ReturnStatement(1787) into Block(1788) at 0", "Insert SimpleName: Override(1799) into MarkerAnnotation(1800) at 0", "Update SimpleType: JmsMessageFacade(1590) to JmsMessage", "Update SimpleType: JmsMessageFacade(1607) to JmsMessage", "Insert SimpleName: Override(1875) into MarkerAnnotation(1876) at 0", "Update SimpleType: JmsMessageFacade(1661) to JmsMessage", "Insert SimpleName: Override(1894) into MarkerAnnotation(1895) at 0", "Update SimpleType: JmsMessageFacade(1678) to JmsMessage", "Insert ReturnStatement(1918) into Block(1919) at 0", "Update SimpleType: JmsMessageFacade(1704) to JmsMessage", "Update SimpleType: JmsMessageFacade(1721) to JmsMessage", "Insert SimpleName: Override(2008) into MarkerAnnotation(2009) at 0", "Update SimpleType: JmsMessageFacade(1777) to JmsMessage", "Insert SimpleName: Override(2027) into MarkerAnnotation(2028) at 0", "Update SimpleType: JmsMessageFacade(1794) to JmsMessage", "Insert SimpleName: Override(2045) into MarkerAnnotation(2046) at 0", "Insert ReturnStatement(2051) into Block(2052) at 0", "Update SimpleType: JmsMessageFacade(1820) to JmsMessage", "Update SimpleType: JmsMessageFacade(1868) to JmsMessage", "Insert SimpleName: Override(2163) into MarkerAnnotation(2164) at 0", "Update SimpleType: JmsMessageFacade(1913) to JmsMessage", "Insert SimpleName: Override(2182) into MarkerAnnotation(2183) at 0", "Update SimpleType: JmsMessageFacade(1930) to JmsMessage", "Insert SimpleName: Override(2200) into MarkerAnnotation(2201) at 0", "Insert ReturnStatement(2206) into Block(2207) at 0", "Insert SimpleName: Override(2218) into MarkerAnnotation(2219) at 0", "Insert SimpleName: Object(2221) into SimpleType: Object(2222) at 0", "Insert SimpleType: JmsMessage(2225) into SingleVariableDeclaration(2227) at 0", "Insert SimpleName: message(2226) into SingleVariableDeclaration(2227) at 1", "Insert SimpleName: JMSException(2228) into SimpleType: JMSException(2229) at 0", "Insert VariableDeclarationStatement(2235) into Block(2259) at 0", "Insert IfStatement(2256) into Block(2259) at 1", "Insert ReturnStatement(2258) into Block(2259) at 2", "Insert SimpleName: Override(2261) into MarkerAnnotation(2262) at 0", "Insert SimpleType: JmsMessage(2267) into SingleVariableDeclaration(2269) at 0", "Insert SimpleName: message(2268) into SingleVariableDeclaration(2269) at 1", "Insert SimpleType: Object(2271) into SingleVariableDeclaration(2273) at 0", "Insert SimpleName: value(2272) into SingleVariableDeclaration(2273) at 1", "Insert SimpleName: JMSException(2274) into SimpleType: JMSException(2275) at 0", "Insert IfStatement(2289) into Block(2331) at 0", "Insert VariableDeclarationStatement(2304) into Block(2331) at 1", "Insert IfStatement(2323) into Block(2331) at 2", "Insert ExpressionStatement(2330) into Block(2331) at 3", "Insert SimpleName: Override(2333) into MarkerAnnotation(2334) at 0", "Insert SimpleType: JmsMessage(2339) into SingleVariableDeclaration(2341) at 0", "Insert SimpleName: message(2340) into SingleVariableDeclaration(2341) at 1", "Insert IfStatement(2354) into Block(2357) at 0", "Insert ReturnStatement(2356) into Block(2357) at 1", "Insert SimpleName: Override(2359) into MarkerAnnotation(2360) at 0", "Insert SimpleType: JmsMessage(2365) into SingleVariableDeclaration(2367) at 0", "Insert SimpleName: message(2366) into SingleVariableDeclaration(2367) at 1", "Insert SimpleName: JMSException(2368) into SimpleType: JMSException(2369) at 0", "Insert IfStatement(2382) into Block(2383) at 0", "Insert SimpleName: Override(2385) into MarkerAnnotation(2386) at 0", "Insert ReturnStatement(2391) into Block(2392) at 0", "Move SimpleName: message(2004) into MethodInvocation(2467) at 0", "Insert SimpleName: getFacade(2466) into MethodInvocation(2467) at 1", "Update SimpleName: names(2349) to checkPropertyNameIsValid", "Update SimpleName: addAll(2350) to name", "Insert SimpleName: IllegalArgumentException(2884) into SimpleType: IllegalArgumentException(2885) at 0", "Insert SimpleName: IllegalArgumentException(2930) into SimpleType: IllegalArgumentException(2931) at 0", "Insert SimpleName: Character(3098) into MethodInvocation(3101) at 0", "Insert SimpleName: isJavaIdentifierPart(3099) into MethodInvocation(3101) at 1", "Insert SimpleName: ch(3100) into MethodInvocation(3101) at 2", "Insert SimpleType: IllegalArgumentException(3105) into ClassInstanceCreation(3112) at 0", "Insert InfixExpression: +(3111) into ClassInstanceCreation(3112) at 1", "Insert SimpleName: value(3181) into MethodInvocation(3183) at 0", "Insert SimpleName: getClass(3182) into MethodInvocation(3183) at 1", "Update SimpleName: JmsMessageFacade(263) to JmsMessage", "Update SimpleName: JmsMessageFacade(286) to JmsMessage", "Update SimpleName: JmsMessageFacade(318) to JmsMessage", "Update SimpleName: JmsMessageFacade(335) to JmsMessage", "Insert BooleanLiteral: false(390) into ReturnStatement(391) at 0", "Update SimpleName: JmsMessageFacade(360) to JmsMessage", "Update SimpleName: JmsMessageFacade(383) to JmsMessage", "Update SimpleName: JmsMessageFacade(411) to JmsMessage", "Update SimpleName: JmsMessageFacade(428) to JmsMessage", "Insert BooleanLiteral: false(500) into ReturnStatement(501) at 0", "Update SimpleName: JmsMessageFacade(454) to JmsMessage", "Update SimpleName: JmsMessageFacade(471) to JmsMessage", "Update SimpleName: JmsMessageFacade(525) to JmsMessage", "Update SimpleName: JmsMessageFacade(542) to JmsMessage", "Insert BooleanLiteral: false(631) into ReturnStatement(632) at 0", "Update SimpleName: JmsMessageFacade(568) to JmsMessage", "Update SimpleName: JmsMessageFacade(588) to JmsMessage", "Update SimpleName: JmsMessageFacade(726) to JmsMessage", "Update SimpleName: JmsMessageFacade(739) to JmsMessage", "Insert BooleanLiteral: false(845) into ReturnStatement(846) at 0", "Update SimpleName: JmsMessageFacade(765) to JmsMessage", "Update SimpleName: JmsMessageFacade(785) to JmsMessage", "Update SimpleName: JmsMessageFacade(841) to JmsMessage", "Update SimpleName: JmsMessageFacade(854) to JmsMessage", "Insert BooleanLiteral: false(975) into ReturnStatement(976) at 0", "Update SimpleName: JmsMessageFacade(880) to JmsMessage", "Update SimpleName: JmsMessageFacade(906) to JmsMessage", "Update SimpleName: JmsMessageFacade(960) to JmsMessage", "Update SimpleName: JmsMessageFacade(977) to JmsMessage", "Insert BooleanLiteral: false(1117) into ReturnStatement(1118) at 0", "Update SimpleName: JmsMessageFacade(1003) to JmsMessage", "Update SimpleName: JmsMessageFacade(1023) to JmsMessage", "Update SimpleName: JmsMessageFacade(1079) to JmsMessage", "Update SimpleName: JmsMessageFacade(1096) to JmsMessage", "Insert BooleanLiteral: false(1253) into ReturnStatement(1254) at 0", "Update SimpleName: JmsMessageFacade(1122) to JmsMessage", "Update SimpleName: JmsMessageFacade(1139) to JmsMessage", "Update SimpleName: JmsMessageFacade(1193) to JmsMessage", "Update SimpleName: JmsMessageFacade(1210) to JmsMessage", "Insert BooleanLiteral: false(1386) into ReturnStatement(1387) at 0", "Update SimpleName: JmsMessageFacade(1238) to JmsMessage", "Update SimpleName: JmsMessageFacade(1258) to JmsMessage", "Update SimpleName: JmsMessageFacade(1314) to JmsMessage", "Update SimpleName: JmsMessageFacade(1331) to JmsMessage", "Insert BooleanLiteral: false(1522) into ReturnStatement(1523) at 0", "Update SimpleName: JmsMessageFacade(1357) to JmsMessage", "Update SimpleName: JmsMessageFacade(1377) to JmsMessage", "Update SimpleName: JmsMessageFacade(1433) to JmsMessage", "Update SimpleName: JmsMessageFacade(1448) to JmsMessage", "Insert BooleanLiteral: false(1656) into ReturnStatement(1657) at 0", "Update SimpleName: JmsMessageFacade(1473) to JmsMessage", "Update SimpleName: JmsMessageFacade(1530) to JmsMessage", "Update SimpleName: JmsMessageFacade(1550) to JmsMessage", "Update SimpleName: JmsMessageFacade(1563) to JmsMessage", "Insert BooleanLiteral: false(1786) into ReturnStatement(1787) at 0", "Update SimpleName: JmsMessageFacade(1589) to JmsMessage", "Update SimpleName: JmsMessageFacade(1606) to JmsMessage", "Update SimpleName: JmsMessageFacade(1660) to JmsMessage", "Update SimpleName: JmsMessageFacade(1677) to JmsMessage", "Insert BooleanLiteral: false(1917) into ReturnStatement(1918) at 0", "Update SimpleName: JmsMessageFacade(1703) to JmsMessage", "Update SimpleName: JmsMessageFacade(1720) to JmsMessage", "Update SimpleName: JmsMessageFacade(1776) to JmsMessage", "Update SimpleName: JmsMessageFacade(1793) to JmsMessage", "Insert BooleanLiteral: false(2050) into ReturnStatement(2051) at 0", "Update SimpleName: JmsMessageFacade(1819) to JmsMessage", "Update SimpleName: JmsMessageFacade(1867) to JmsMessage", "Update SimpleName: JmsMessageFacade(1912) to JmsMessage", "Update SimpleName: JmsMessageFacade(1929) to JmsMessage", "Insert BooleanLiteral: false(2205) into ReturnStatement(2206) at 0", "Insert SimpleName: JmsMessage(2224) into SimpleType: JmsMessage(2225) at 0", "Insert SimpleType: Object(2231) into VariableDeclarationStatement(2235) at 0", "Insert VariableDeclarationFragment(2234) into VariableDeclarationStatement(2235) at 1", "Insert InfixExpression: &&(2246) into IfStatement(2256) at 0", "Insert Block(2255) into IfStatement(2256) at 1", "Insert SimpleName: ackType(2257) into ReturnStatement(2258) at 0", "Insert SimpleName: JmsMessage(2266) into SimpleType: JmsMessage(2267) at 0", "Insert SimpleName: Object(2270) into SimpleType: Object(2271) at 0", "Insert InfixExpression: ==(2280) into IfStatement(2289) at 0", "Insert Block(2288) into IfStatement(2289) at 1", "Insert SimpleType: Integer(2291) into VariableDeclarationStatement(2304) at 0", "Insert VariableDeclarationFragment(2303) into VariableDeclarationStatement(2304) at 1", "Insert InfixExpression: ==(2307) into IfStatement(2323) at 0", "Insert Block(2322) into IfStatement(2323) at 1", "Insert MethodInvocation(2329) into ExpressionStatement(2330) at 0", "Insert SimpleName: JmsMessage(2338) into SimpleType: JmsMessage(2339) at 0", "Insert InfixExpression: !=(2346) into IfStatement(2354) at 0", "Insert Block(2353) into IfStatement(2354) at 1", "Insert BooleanLiteral: false(2355) into ReturnStatement(2356) at 0", "Insert SimpleName: JmsMessage(2364) into SimpleType: JmsMessage(2365) at 0", "Insert InfixExpression: !=(2374) into IfStatement(2382) at 0", "Insert Block(2381) into IfStatement(2382) at 1", "Insert BooleanLiteral: true(2390) into ReturnStatement(2391) at 0", "Update SimpleName: getPropertyNames(2352) to isValidatePropertyNames", "Insert SimpleName: IllegalArgumentException(3104) into SimpleType: IllegalArgumentException(3105) at 0", "Insert StringLiteral: \"Identifier contains invalid JMS identifier character '\"(3106) into InfixExpression: +(3111) at 0", "Insert SimpleName: ch(3107) into InfixExpression: +(3111) at 1", "Insert StringLiteral: \"': '\"(3108) into InfixExpression: +(3111) at 2", "Insert SimpleName: identifier(3109) into InfixExpression: +(3111) at 3", "Insert StringLiteral: \"' \"(3110) into InfixExpression: +(3111) at 4", "Insert MethodInvocation(378) into MethodInvocation(381) at 0", "Insert MethodInvocation(488) into MethodInvocation(491) at 0", "Insert MethodInvocation(527) into MethodInvocation(529) at 0", "Insert MethodInvocation(582) into MethodInvocation(585) at 0", "Insert MethodInvocation(619) into MethodInvocation(622) at 0", "Insert MethodInvocation(833) into MethodInvocation(836) at 0", "Insert MethodInvocation(930) into MethodInvocation(935) at 0", "Insert MethodInvocation(963) into MethodInvocation(966) at 0", "Insert MethodInvocation(1013) into MethodInvocation(1015) at 0", "Insert MethodInvocation(1068) into MethodInvocation(1071) at 0", "Insert MethodInvocation(1105) into MethodInvocation(1108) at 0", "Insert MethodInvocation(1202) into MethodInvocation(1207) at 0", "Move MethodInvocation(1304) into MethodInvocation(1207) at 3", "Insert MethodInvocation(1241) into MethodInvocation(1244) at 0", "Insert MethodInvocation(1280) into MethodInvocation(1282) at 0", "Insert MethodInvocation(1335) into MethodInvocation(1338) at 0", "Insert MethodInvocation(1374) into MethodInvocation(1377) at 0", "Insert MethodInvocation(1471) into MethodInvocation(1476) at 0", "Move MethodInvocation(1069) into MethodInvocation(1476) at 3", "Insert MethodInvocation(1510) into MethodInvocation(1513) at 0", "Insert MethodInvocation(1607) into MethodInvocation(1612) at 0", "Insert MethodInvocation(1627) into MethodInvocation(1629) at 0", "Insert MethodInvocation(1644) into MethodInvocation(1647) at 0", "Insert MethodInvocation(1718) into MethodInvocation(1723) at 0", "Move MethodInvocation(1766) into MethodInvocation(1723) at 3", "Insert MethodInvocation(1774) into MethodInvocation(1777) at 0", "Insert MethodInvocation(1813) into MethodInvocation(1815) at 0", "Insert MethodInvocation(1868) into MethodInvocation(1871) at 0", "Insert MethodInvocation(1905) into MethodInvocation(1908) at 0", "Insert MethodInvocation(1944) into MethodInvocation(1946) at 0", "Insert MethodInvocation(1999) into MethodInvocation(2004) at 0", "Update SimpleName: intValue(1765) to setGroupSequence", "Move SimpleName: intValue(1765) into MethodInvocation(2004) at 1", "Move MethodInvocation(1519) into MethodInvocation(2004) at 2", "Insert MethodInvocation(2038) into MethodInvocation(2041) at 0", "Insert MethodInvocation(2153) into MethodInvocation(2159) at 0", "Insert MethodInvocation(2193) into MethodInvocation(2196) at 0", "Insert SimpleName: Object(2230) into SimpleType: Object(2231) at 0", "Insert SimpleName: ackType(2232) into VariableDeclarationFragment(2234) at 0", "Insert NullLiteral(2233) into VariableDeclarationFragment(2234) at 1", "Insert InfixExpression: !=(2240) into InfixExpression: &&(2246) at 0", "Insert MethodInvocation(2245) into InfixExpression: &&(2246) at 1", "Insert ExpressionStatement(2254) into Block(2255) at 0", "Insert MethodInvocation(2278) into InfixExpression: ==(2280) at 0", "Insert NullLiteral(2279) into InfixExpression: ==(2280) at 1", "Insert ThrowStatement(2287) into Block(2288) at 0", "Insert SimpleName: Integer(2290) into SimpleType: Integer(2291) at 0", "Insert SimpleName: ackType(2292) into VariableDeclarationFragment(2303) at 0", "Insert CastExpression(2302) into VariableDeclarationFragment(2303) at 1", "Insert SimpleName: ackType(2305) into InfixExpression: ==(2307) at 0", "Insert NullLiteral(2306) into InfixExpression: ==(2307) at 1", "Insert ThrowStatement(2321) into Block(2322) at 0", "Insert MethodInvocation(2326) into MethodInvocation(2329) at 0", "Insert SimpleName: setAckType(2327) into MethodInvocation(2329) at 1", "Insert SimpleName: ackType(2328) into MethodInvocation(2329) at 2", "Insert MethodInvocation(2344) into InfixExpression: !=(2346) at 0", "Insert NullLiteral(2345) into InfixExpression: !=(2346) at 1", "Insert ReturnStatement(2352) into Block(2353) at 0", "Insert MethodInvocation(2372) into InfixExpression: !=(2374) at 0", "Insert NullLiteral(2373) into InfixExpression: !=(2374) at 1", "Insert ExpressionStatement(2380) into Block(2381) at 0", "Insert MethodInvocation(330) into MethodInvocation(332) at 0", "Insert MethodInvocation(359) into MethodInvocation(361) at 0", "Move SimpleName: message(339) into MethodInvocation(378) at 0", "Insert SimpleName: getFacade(377) into MethodInvocation(378) at 1", "Insert MethodInvocation(439) into MethodInvocation(441) at 0", "Insert MethodInvocation(450) into MethodInvocation(452) at 0", "Insert MethodInvocation(469) into MethodInvocation(471) at 0", "Move SimpleName: message(432) into MethodInvocation(488) at 0", "Insert SimpleName: getFacade(487) into MethodInvocation(488) at 1", "Move SimpleName: message(460) into MethodInvocation(527) at 0", "Insert SimpleName: getFacade(526) into MethodInvocation(527) at 1", "Move SimpleName: message(513) into MethodInvocation(582) at 0", "Insert SimpleName: getFacade(581) into MethodInvocation(582) at 1", "Insert MethodInvocation(600) into MethodInvocation(602) at 0", "Move SimpleName: message(546) into MethodInvocation(619) at 0", "Insert SimpleName: getFacade(618) into MethodInvocation(619) at 1", "Insert MethodInvocation(658) into MethodInvocation(660) at 0", "Move SimpleName: message(743) into MethodInvocation(833) at 0", "Insert SimpleName: getFacade(832) into MethodInvocation(833) at 1", "Insert MethodInvocation(874) into MethodInvocation(876) at 0", "Move SimpleName: message(827) into MethodInvocation(930) at 0", "Insert SimpleName: getFacade(929) into MethodInvocation(930) at 1", "Move SimpleName: message(858) into MethodInvocation(963) at 0", "Insert SimpleName: getFacade(962) into MethodInvocation(963) at 1", "Insert MethodInvocation(1002) into MethodInvocation(1004) at 0", "Move SimpleName: message(895) into MethodInvocation(1013) at 0", "Insert SimpleName: getFacade(1012) into MethodInvocation(1013) at 1", "Move SimpleName: message(948) into MethodInvocation(1068) at 0", "Insert SimpleName: getFacade(1067) into MethodInvocation(1068) at 1", "Insert MethodInvocation(1086) into MethodInvocation(1088) at 0", "Move SimpleName: message(981) into MethodInvocation(1105) at 0", "Insert SimpleName: getFacade(1104) into MethodInvocation(1105) at 1", "Insert MethodInvocation(1146) into MethodInvocation(1148) at 0", "Move SimpleName: message(1065) into MethodInvocation(1202) at 0", "Insert SimpleName: getFacade(1201) into MethodInvocation(1202) at 1", "Insert MethodInvocation(1222) into MethodInvocation(1224) at 0", "Move SimpleName: message(1100) into MethodInvocation(1241) at 0", "Insert SimpleName: getFacade(1240) into MethodInvocation(1241) at 1", "Move SimpleName: message(1128) into MethodInvocation(1280) at 0", "Insert SimpleName: getFacade(1279) into MethodInvocation(1280) at 1", "Move SimpleName: message(1181) into MethodInvocation(1335) at 0", "Insert SimpleName: getFacade(1334) into MethodInvocation(1335) at 1", "Insert MethodInvocation(1353) into MethodInvocation(1355) at 0", "Move SimpleName: message(1216) into MethodInvocation(1374) at 0", "Insert SimpleName: getFacade(1373) into MethodInvocation(1374) at 1", "Insert MethodInvocation(1415) into MethodInvocation(1417) at 0", "Move SimpleName: message(1300) into MethodInvocation(1471) at 0", "Insert SimpleName: getFacade(1470) into MethodInvocation(1471) at 1", "Insert MethodInvocation(1491) into MethodInvocation(1493) at 0", "Move SimpleName: message(1335) into MethodInvocation(1510) at 0", "Insert SimpleName: getFacade(1509) into MethodInvocation(1510) at 1", "Insert MethodInvocation(1551) into MethodInvocation(1553) at 0", "Move SimpleName: message(1419) into MethodInvocation(1607) at 0", "Insert SimpleName: getFacade(1606) into MethodInvocation(1607) at 1", "Move SimpleName: message(1437) into MethodInvocation(1627) at 0", "Insert SimpleName: getFacade(1626) into MethodInvocation(1627) at 1", "Move SimpleName: message(1452) into MethodInvocation(1644) at 0", "Insert SimpleName: getFacade(1643) into MethodInvocation(1644) at 1", "Move SimpleName: message(1515) into MethodInvocation(1718) at 0", "Insert SimpleName: getFacade(1717) into MethodInvocation(1718) at 1", "Insert SimpleName: intValue(1721) into MethodInvocation(1722) at 1", "Insert MethodInvocation(1743) into MethodInvocation(1745) at 0", "Move SimpleName: message(1567) into MethodInvocation(1774) at 0", "Insert SimpleName: getFacade(1773) into MethodInvocation(1774) at 1", "Move SimpleName: message(1595) into MethodInvocation(1813) at 0", "Insert SimpleName: getFacade(1812) into MethodInvocation(1813) at 1", "Move SimpleName: message(1648) into MethodInvocation(1868) at 0", "Insert SimpleName: getFacade(1867) into MethodInvocation(1868) at 1", "Insert MethodInvocation(1886) into MethodInvocation(1888) at 0", "Move SimpleName: message(1681) into MethodInvocation(1905) at 0", "Insert SimpleName: getFacade(1904) into MethodInvocation(1905) at 1", "Move SimpleName: message(1709) into MethodInvocation(1944) at 0", "Insert SimpleName: getFacade(1943) into MethodInvocation(1944) at 1", "Move SimpleName: message(1762) into MethodInvocation(1999) at 0", "Update SimpleName: setGroupSequence(1763) to getFacade", "Move SimpleName: setGroupSequence(1763) into MethodInvocation(1999) at 1", "Insert MethodInvocation(2019) into MethodInvocation(2021) at 0", "Move SimpleName: message(1797) into MethodInvocation(2038) at 0", "Insert SimpleName: getFacade(2037) into MethodInvocation(2038) at 1", "Insert MethodInvocation(2080) into MethodInvocation(2082) at 0", "Move SimpleName: message(1897) into MethodInvocation(2153) at 0", "Insert SimpleName: getFacade(2152) into MethodInvocation(2153) at 1", "Insert MethodInvocation(2174) into MethodInvocation(2176) at 0", "Move SimpleName: message(1933) into MethodInvocation(2193) at 0", "Insert SimpleName: getFacade(2192) into MethodInvocation(2193) at 1", "Insert MethodInvocation(2238) into InfixExpression: !=(2240) at 0", "Insert NullLiteral(2239) into InfixExpression: !=(2240) at 1", "Insert MethodInvocation(2243) into MethodInvocation(2245) at 0", "Insert SimpleName: isAckTypeSet(2244) into MethodInvocation(2245) at 1", "Insert Assignment: =(2253) into ExpressionStatement(2254) at 0", "Insert SimpleName: message(2276) into MethodInvocation(2278) at 0", "Insert SimpleName: getAcknowledgeCallback(2277) into MethodInvocation(2278) at 1", "Insert ClassInstanceCreation(2286) into ThrowStatement(2287) at 0", "Insert SimpleType: Integer(2294) into CastExpression(2302) at 0", "Insert MethodInvocation(2301) into CastExpression(2302) at 1", "Insert ClassInstanceCreation(2320) into ThrowStatement(2321) at 0", "Insert SimpleName: message(2324) into MethodInvocation(2326) at 0", "Insert SimpleName: getAcknowledgeCallback(2325) into MethodInvocation(2326) at 1", "Insert SimpleName: message(2342) into MethodInvocation(2344) at 0", "Insert SimpleName: getAcknowledgeCallback(2343) into MethodInvocation(2344) at 1", "Insert MethodInvocation(2351) into ReturnStatement(2352) at 0", "Insert SimpleName: message(2370) into MethodInvocation(2372) at 0", "Insert SimpleName: getAcknowledgeCallback(2371) into MethodInvocation(2372) at 1", "Insert MethodInvocation(2379) into ExpressionStatement(2380) at 0", "Move SimpleName: message(295) into MethodInvocation(330) at 0", "Insert SimpleName: getFacade(329) into MethodInvocation(330) at 1", "Move SimpleName: message(322) into MethodInvocation(359) at 0", "Insert SimpleName: getFacade(358) into MethodInvocation(359) at 1", "Move SimpleName: message(389) into MethodInvocation(439) at 0", "Insert SimpleName: getFacade(438) into MethodInvocation(439) at 1", "Move SimpleName: message(398) into MethodInvocation(450) at 0", "Insert SimpleName: getFacade(449) into MethodInvocation(450) at 1", "Move SimpleName: message(415) into MethodInvocation(469) at 0", "Insert SimpleName: getFacade(468) into MethodInvocation(469) at 1", "Move SimpleName: message(529) into MethodInvocation(600) at 0", "Insert SimpleName: getFacade(599) into MethodInvocation(600) at 1", "Move SimpleName: message(574) into MethodInvocation(658) at 0", "Insert SimpleName: getFacade(657) into MethodInvocation(658) at 1", "Insert MethodInvocation(798) into MethodInvocation(803) at 0", "Move SimpleName: message(773) into MethodInvocation(874) at 0", "Insert SimpleName: getFacade(873) into MethodInvocation(874) at 1", "Move SimpleName: message(886) into MethodInvocation(1002) at 0", "Insert SimpleName: getFacade(1001) into MethodInvocation(1002) at 1", "Move SimpleName: message(964) into MethodInvocation(1086) at 0", "Insert SimpleName: getFacade(1085) into MethodInvocation(1086) at 1", "Move SimpleName: message(1011) into MethodInvocation(1146) at 0", "Insert SimpleName: getFacade(1145) into MethodInvocation(1146) at 1", "Move SimpleName: message(1083) into MethodInvocation(1222) at 0", "Insert SimpleName: getFacade(1221) into MethodInvocation(1222) at 1", "Move SimpleName: message(1197) into MethodInvocation(1353) at 0", "Insert SimpleName: getFacade(1352) into MethodInvocation(1353) at 1", "Move SimpleName: message(1246) into MethodInvocation(1415) at 0", "Insert SimpleName: getFacade(1414) into MethodInvocation(1415) at 1", "Move SimpleName: message(1318) into MethodInvocation(1491) at 0", "Insert SimpleName: getFacade(1490) into MethodInvocation(1491) at 1", "Move SimpleName: message(1365) into MethodInvocation(1551) at 0", "Insert SimpleName: getFacade(1550) into MethodInvocation(1551) at 1", "Move SimpleName: message(1538) into MethodInvocation(1743) at 0", "Insert SimpleName: getFacade(1742) into MethodInvocation(1743) at 1", "Move SimpleName: message(1664) into MethodInvocation(1886) at 0", "Insert SimpleName: getFacade(1885) into MethodInvocation(1886) at 1", "Move SimpleName: message(1780) into MethodInvocation(2019) at 0", "Insert SimpleName: getFacade(2018) into MethodInvocation(2019) at 1", "Move SimpleName: message(1828) into MethodInvocation(2080) at 0", "Insert SimpleName: getFacade(2079) into MethodInvocation(2080) at 1", "Move SimpleName: message(1916) into MethodInvocation(2174) at 0", "Insert SimpleName: getFacade(2173) into MethodInvocation(2174) at 1", "Insert SimpleName: message(2236) into MethodInvocation(2238) at 0", "Insert SimpleName: getAcknowledgeCallback(2237) into MethodInvocation(2238) at 1", "Insert SimpleName: message(2241) into MethodInvocation(2243) at 0", "Insert SimpleName: getAcknowledgeCallback(2242) into MethodInvocation(2243) at 1", "Insert SimpleName: ackType(2247) into Assignment: =(2253) at 0", "Insert MethodInvocation(2252) into Assignment: =(2253) at 1", "Insert SimpleType: JMSException(2282) into ClassInstanceCreation(2286) at 0", "Insert InfixExpression: +(2285) into ClassInstanceCreation(2286) at 1", "Insert SimpleName: Integer(2293) into SimpleType: Integer(2294) at 0", "Insert SimpleName: TypeConversionSupport(2295) into MethodInvocation(2301) at 0", "Insert SimpleName: convert(2296) into MethodInvocation(2301) at 1", "Insert SimpleName: value(2297) into MethodInvocation(2301) at 2", "Insert TypeLiteral(2300) into MethodInvocation(2301) at 3", "Insert SimpleType: JMSException(2309) into ClassInstanceCreation(2320) at 0", "Insert InfixExpression: +(2319) into ClassInstanceCreation(2320) at 1", "Insert MethodInvocation(2349) into MethodInvocation(2351) at 0", "Insert SimpleName: isAckTypeSet(2350) into MethodInvocation(2351) at 1", "Insert MethodInvocation(2377) into MethodInvocation(2379) at 0", "Insert SimpleName: clearAckType(2378) into MethodInvocation(2379) at 1", "Move SimpleName: message(710) into MethodInvocation(798) at 0", "Insert SimpleName: getFacade(797) into MethodInvocation(798) at 1", "Insert MethodInvocation(2250) into MethodInvocation(2252) at 0", "Insert SimpleName: getAckType(2251) into MethodInvocation(2252) at 1", "Insert SimpleName: JMSException(2281) into SimpleType: JMSException(2282) at 0", "Insert StringLiteral: \"Session Acknoewledgement Mode does not allow setting: \"(2283) into InfixExpression: +(2285) at 0", "Insert SimpleName: JMS_AMQP_ACK_TYPE(2284) into InfixExpression: +(2285) at 1", "Insert SimpleType: Integer(2299) into TypeLiteral(2300) at 0", "Insert SimpleName: JMSException(2308) into SimpleType: JMSException(2309) at 0", "Insert StringLiteral: \"Property \"(2310) into InfixExpression: +(2319) at 0", "Insert SimpleName: JMS_AMQP_ACK_TYPE(2311) into InfixExpression: +(2319) at 1", "Insert StringLiteral: \" cannot be set from a \"(2312) into InfixExpression: +(2319) at 2", "Insert MethodInvocation(2317) into InfixExpression: +(2319) at 3", "Insert StringLiteral: \".\"(2318) into InfixExpression: +(2319) at 4", "Insert SimpleName: message(2347) into MethodInvocation(2349) at 0", "Insert SimpleName: getAcknowledgeCallback(2348) into MethodInvocation(2349) at 1", "Insert SimpleName: message(2375) into MethodInvocation(2377) at 0", "Insert SimpleName: getAcknowledgeCallback(2376) into MethodInvocation(2377) at 1", "Insert MethodInvocation(786) into MethodInvocation(791) at 0", "Insert SimpleName: message(2248) into MethodInvocation(2250) at 0", "Insert SimpleName: getAcknowledgeCallback(2249) into MethodInvocation(2250) at 1", "Insert SimpleName: Integer(2298) into SimpleType: Integer(2299) at 0", "Insert MethodInvocation(2315) into MethodInvocation(2317) at 0", "Insert SimpleName: getName(2316) into MethodInvocation(2317) at 1", "Move SimpleName: message(700) into MethodInvocation(786) at 0", "Insert SimpleName: getFacade(785) into MethodInvocation(786) at 1", "Insert MethodInvocation(2091) into MethodInvocation(2094) at 0", "Insert SimpleName: value(2313) into MethodInvocation(2315) at 0", "Insert SimpleName: getClass(2314) into MethodInvocation(2315) at 1", "Move SimpleName: message(1837) into MethodInvocation(2091) at 0", "Insert SimpleName: getFacade(2090) into MethodInvocation(2091) at 1"]}}, {"JmsMessageSupport_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 17", "operations": ["INS StringLiteral: \"JMS_AMQP_ACK_TYPE\" to VariableDeclarationFragment at 1", "INS Modifier: public to FieldDeclaration at 0", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleType: String to FieldDeclaration at 3", "INS SimpleName: String to SimpleType: String at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: JMS_AMQP_ACK_TYPE to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 17", "INS Modifier: final to FieldDeclaration at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 18", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: public to FieldDeclaration at 0", "INS NumberLiteral: 1 to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 18", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: ACCEPTED to VariableDeclarationFragment at 0", "INS Modifier: static to FieldDeclaration at 1", "INS PrimitiveType: int to FieldDeclaration at 3"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 19", "operations": ["INS Modifier: public to FieldDeclaration at 0", "INS SimpleName: REJECTED to VariableDeclarationFragment at 0", "INS Modifier: final to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 19", "INS NumberLiteral: 2 to VariableDeclarationFragment at 1", "INS PrimitiveType: int to FieldDeclaration at 3", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: static to FieldDeclaration at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 20", "operations": ["INS NumberLiteral: 3 to VariableDeclarationFragment at 1", "INS SimpleName: RELEASED to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: final to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 20", "INS Modifier: public to FieldDeclaration at 0", "INS Modifier: static to FieldDeclaration at 1", "INS PrimitiveType: int to FieldDeclaration at 3"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 21", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: MODIFIED_FAILED to VariableDeclarationFragment at 0", "INS Modifier: static to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 21", "INS Modifier: public to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 2", "INS NumberLiteral: 4 to VariableDeclarationFragment at 1", "INS PrimitiveType: int to FieldDeclaration at 3"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 22", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: public to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 2", "INS Modifier: static to FieldDeclaration at 1", "INS NumberLiteral: 5 to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 22", "INS SimpleName: MODIFIED_FAILED_UNDELIVERABLE to VariableDeclarationFragment at 0", "INS PrimitiveType: int to FieldDeclaration at 3"]}]}}, {"JmsMessageSupport_diff": {"operations": ["Insert FieldDeclaration(155) into TypeDeclaration: class(196) at 17", "Insert FieldDeclaration(163) into TypeDeclaration: class(196) at 18", "Insert FieldDeclaration(171) into TypeDeclaration: class(196) at 19", "Insert FieldDeclaration(179) into TypeDeclaration: class(196) at 20", "Insert FieldDeclaration(187) into TypeDeclaration: class(196) at 21", "Insert FieldDeclaration(195) into TypeDeclaration: class(196) at 22", "Insert Modifier: public(147) into FieldDeclaration(155) at 0", "Insert Modifier: static(148) into FieldDeclaration(155) at 1", "Insert Modifier: final(149) into FieldDeclaration(155) at 2", "Insert SimpleType: String(151) into FieldDeclaration(155) at 3", "Insert VariableDeclarationFragment(154) into FieldDeclaration(155) at 4", "Insert Modifier: public(156) into FieldDeclaration(163) at 0", "Insert Modifier: static(157) into FieldDeclaration(163) at 1", "Insert Modifier: final(158) into FieldDeclaration(163) at 2", "Insert PrimitiveType: int(159) into FieldDeclaration(163) at 3", "Insert VariableDeclarationFragment(162) into FieldDeclaration(163) at 4", "Insert Modifier: public(164) into FieldDeclaration(171) at 0", "Insert Modifier: static(165) into FieldDeclaration(171) at 1", "Insert Modifier: final(166) into FieldDeclaration(171) at 2", "Insert PrimitiveType: int(167) into FieldDeclaration(171) at 3", "Insert VariableDeclarationFragment(170) into FieldDeclaration(171) at 4", "Insert Modifier: public(172) into FieldDeclaration(179) at 0", "Insert Modifier: static(173) into FieldDeclaration(179) at 1", "Insert Modifier: final(174) into FieldDeclaration(179) at 2", "Insert PrimitiveType: int(175) into FieldDeclaration(179) at 3", "Insert VariableDeclarationFragment(178) into FieldDeclaration(179) at 4", "Insert Modifier: public(180) into FieldDeclaration(187) at 0", "Insert Modifier: static(181) into FieldDeclaration(187) at 1", "Insert Modifier: final(182) into FieldDeclaration(187) at 2", "Insert PrimitiveType: int(183) into FieldDeclaration(187) at 3", "Insert VariableDeclarationFragment(186) into FieldDeclaration(187) at 4", "Insert Modifier: public(188) into FieldDeclaration(195) at 0", "Insert Modifier: static(189) into FieldDeclaration(195) at 1", "Insert Modifier: final(190) into FieldDeclaration(195) at 2", "Insert PrimitiveType: int(191) into FieldDeclaration(195) at 3", "Insert VariableDeclarationFragment(194) into FieldDeclaration(195) at 4", "Insert SimpleName: String(150) into SimpleType: String(151) at 0", "Insert SimpleName: JMS_AMQP_ACK_TYPE(152) into VariableDeclarationFragment(154) at 0", "Insert StringLiteral: \"JMS_AMQP_ACK_TYPE\"(153) into VariableDeclarationFragment(154) at 1", "Insert SimpleName: ACCEPTED(160) into VariableDeclarationFragment(162) at 0", "Insert NumberLiteral: 1(161) into VariableDeclarationFragment(162) at 1", "Insert SimpleName: REJECTED(168) into VariableDeclarationFragment(170) at 0", "Insert NumberLiteral: 2(169) into VariableDeclarationFragment(170) at 1", "Insert SimpleName: RELEASED(176) into VariableDeclarationFragment(178) at 0", "Insert NumberLiteral: 3(177) into VariableDeclarationFragment(178) at 1", "Insert SimpleName: MODIFIED_FAILED(184) into VariableDeclarationFragment(186) at 0", "Insert NumberLiteral: 4(185) into VariableDeclarationFragment(186) at 1", "Insert SimpleName: MODIFIED_FAILED_UNDELIVERABLE(192) into VariableDeclarationFragment(194) at 0", "Insert NumberLiteral: 5(193) into VariableDeclarationFragment(194) at 1"]}}, {"Provider_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: ACK_TYPE to SimpleType: ACK_TYPE at 0", "INS SimpleName: ackType to SingleVariableDeclaration at 1", "INS SimpleType: ACK_TYPE to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS TagElement: @param to Javadoc at 2", "operations": ["INS SimpleName: ackType to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 2", "INS TextElement: The type of acknowledgement being done. to TagElement: @param at 1"]}, {"root": "UPDATE from mode.  The acknowledgment should only be applied to Messages that have been marked to mode.  The acknowledgement should only be applied to Messages that have been marked", "operations": ["UPD TextElement: mode.  The acknowledgment should only be applied to Messages that have been marked from mode.  The acknowledgment should only be applied to Messages that have been marked to mode.  The acknowledgement should only be applied to Messages that have been marked"]}, {"root": "UPDATE from The provider should perform an acknowledgment for the message based on the configured to The provider should perform an acknowledgement for the message based on the configured", "operations": ["UPD TextElement: The provider should perform an acknowledgment for the message based on the configured from The provider should perform an acknowledgment for the message based on the configured to The provider should perform an acknowledgement for the message based on the configured"]}, {"root": "UPDATE from The type of acknowledgment being done. to The type of acknowledgement being done.", "operations": ["UPD TextElement: The type of acknowledgment being done. from The type of acknowledgment being done. to The type of acknowledgement being done."]}]}}, {"Provider_diff": {"operations": ["Insert SingleVariableDeclaration(310) into MethodDeclaration(319) at 4", "Insert TagElement: @param(290) into Javadoc(300) at 2", "Insert SimpleType: ACK_TYPE(308) into SingleVariableDeclaration(310) at 0", "Insert SimpleName: ackType(309) into SingleVariableDeclaration(310) at 1", "Update TextElement: mode.  The acknowledgment should only be applied to Messages that have been marked(282) to mode.  The acknowledgement should only be applied to Messages that have been marked", "Insert SimpleName: ackType(288) into TagElement: @param(290) at 0", "Insert TextElement: The type of acknowledgement being done.(289) into TagElement: @param(290) at 1", "Insert SimpleName: ACK_TYPE(307) into SimpleType: ACK_TYPE(308) at 0", "Update TextElement: The provider should perform an acknowledgment for the message based on the configured(314) to The provider should perform an acknowledgement for the message based on the configured", "Update TextElement: The type of acknowledgment being done.(321) to The type of acknowledgement being done."]}}, {"ProviderConstants_cluster": {"actions": [{"root": "INS EnumConstantDeclaration to EnumDeclaration at 7", "operations": ["INS EnumConstantDeclaration to EnumDeclaration at 7", "INS SimpleName: DELIVERED to EnumConstantDeclaration at 0"]}, {"root": "INS EnumConstantDeclaration to EnumDeclaration at 8", "operations": ["INS SimpleName: EXPIRED to EnumConstantDeclaration at 0", "INS EnumConstantDeclaration to EnumDeclaration at 8"]}, {"root": "UPDATE from DELIVERED to ACCEPTED", "operations": ["UPD SimpleName: DELIVERED from DELIVERED to ACCEPTED"]}, {"root": "UPDATE from CONSUMED to RELEASED", "operations": ["UPD SimpleName: CONSUMED from CONSUMED to RELEASED"]}, {"root": "UPDATE from POISONED to REJECTED", "operations": ["UPD SimpleName: POISONED from POISONED to REJECTED"]}, {"root": "UPDATE from EXPIRED to MODIFIED_FAILED", "operations": ["UPD SimpleName: EXPIRED from EXPIRED to MODIFIED_FAILED"]}, {"root": "UPDATE from RELEASED to MODIFIED_FAILED_UNDELIVERABLE", "operations": ["UPD SimpleName: RELEASED from RELEASED to MODIFIED_FAILED_UNDELIVERABLE"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 1", "operations": ["DEL NumberLiteral: 1"]}, {"root": "DEL NumberLiteral: 2", "operations": ["DEL NumberLiteral: 2"]}, {"root": "DEL NumberLiteral: 3", "operations": ["DEL NumberLiteral: 3"]}, {"root": "DEL NumberLiteral: 4", "operations": ["DEL NumberLiteral: 4"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL Modifier: private", "DEL SimpleName: value", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: private", "DEL FieldAccess", "DEL SimpleName: value", "DEL SimpleName: value", "DEL SingleVariableDeclaration", "DEL Block", "DEL ExpressionStatement", "DEL Assignment: =", "DEL PrimitiveType: int", "DEL SimpleName: ACK_TYPE", "DEL SimpleName: value", "DEL ThisExpression", "DEL MethodDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: getValue", "DEL Modifier: public", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: value", "DEL Block", "DEL ReturnStatement"]}]}}, {"ProviderConstants_diff": {"operations": ["Insert EnumConstantDeclaration(39) into EnumDeclaration(42) at 7", "Insert EnumConstantDeclaration(41) into EnumDeclaration(42) at 8", "Update SimpleName: DELIVERED(28) to ACCEPTED", "Update SimpleName: CONSUMED(31) to RELEASED", "Update SimpleName: POISONED(34) to REJECTED", "Update SimpleName: EXPIRED(37) to MODIFIED_FAILED", "Update SimpleName: RELEASED(40) to MODIFIED_FAILED_UNDELIVERABLE", "Insert SimpleName: DELIVERED(38) into EnumConstantDeclaration(39) at 0", "Insert SimpleName: EXPIRED(40) into EnumConstantDeclaration(41) at 0", "Delete NumberLiteral: 0(29)", "Delete NumberLiteral: 1(32)", "Delete NumberLiteral: 2(35)", "Delete NumberLiteral: 3(38)", "Delete NumberLiteral: 4(41)", "Delete Modifier: private(43)", "Delete Modifier: final(44)", "Delete PrimitiveType: int(45)", "Delete SimpleName: value(46)", "Delete VariableDeclarationFragment(47)", "Delete FieldDeclaration(48)", "Delete Modifier: private(49)", "Delete SimpleName: ACK_TYPE(50)", "Delete PrimitiveType: int(51)", "Delete SimpleName: value(52)", "Delete SingleVariableDeclaration(53)", "Delete ThisExpression(54)", "Delete SimpleName: value(55)", "Delete FieldAccess(56)", "Delete SimpleName: value(57)", "Delete Assignment: =(58)", "Delete ExpressionStatement(59)", "Delete Block(60)", "Delete MethodDeclaration(61)", "Delete Modifier: public(62)", "Delete PrimitiveType: int(63)", "Delete SimpleName: getValue(64)", "Delete SimpleName: value(65)", "Delete ReturnStatement(66)", "Delete Block(67)", "Delete MethodDeclaration(68)"]}}, {"ProviderWrapper_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: ACK_TYPE to SimpleType: ACK_TYPE at 0", "INS SimpleName: ackType to SingleVariableDeclaration at 1", "INS SimpleType: ACK_TYPE to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleName: ackType to MethodInvocation at 3", "operations": ["INS SimpleName: ackType to MethodInvocation at 3"]}]}}, {"ProviderWrapper_diff": {"operations": ["Insert SingleVariableDeclaration(302) into MethodDeclaration(319) at 5", "Insert SimpleType: ACK_TYPE(300) into SingleVariableDeclaration(302) at 0", "Insert SimpleName: ackType(301) into SingleVariableDeclaration(302) at 1", "Insert SimpleName: ACK_TYPE(299) into SimpleType: ACK_TYPE(300) at 0", "Insert SimpleName: ackType(314) into MethodInvocation(316) at 3"]}}, {"JmsMessageFacade_cluster": {"actions": []}}, {"JmsMessageFacade_diff": {"operations": []}}, {"AmqpConsumer_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: org.apache.qpid.jms.provider.amqp.AmqpSupport.REJECTED to ImportDeclaration at 0"]}, {"root": "UPDATE from org.apache.qpid.jms.provider.amqp.AmqpSupport.MODIFIED_UNDELIVERABLE to org.apache.qpid.jms.provider.amqp.AmqpSupport.MODIFIED_FAILED_UNDELIVERABLE", "operations": ["UPD QualifiedName: org.apache.qpid.jms.provider.amqp.AmqpSupport.MODIFIED_UNDELIVERABLE from org.apache.qpid.jms.provider.amqp.AmqpSupport.MODIFIED_UNDELIVERABLE to org.apache.qpid.jms.provider.amqp.AmqpSupport.MODIFIED_FAILED_UNDELIVERABLE"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleType: ACK_TYPE to SingleVariableDeclaration at 0", "INS SimpleName: ACK_TYPE to SimpleType: ACK_TYPE at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: ackType to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from deliveryFailed to deliveryFailedUndeliverable", "operations": ["UPD SimpleName: deliveryFailed from deliveryFailed to deliveryFailedUndeliverable", "UPD SimpleName: deliveryFailed from deliveryFailed to deliveryFailedUndeliverable", "UPD SimpleName: deliveryFailed from deliveryFailed to deliveryFailedUndeliverable", "UPD SimpleName: deliveryFailed from deliveryFailed to deliveryFailedUndeliverable"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TagElement: @param to Javadoc at 1", "INS SimpleName: ackType to TagElement: @param at 0", "INS TextElement:  the type of acknowledgement to perform to TagElement: @param at 1"]}, {"root": "UPDATE from \"Session Acknowledge for consumer: {}\" to \"Session Acknowledge for consumer {} with ack type {}\"", "operations": ["UPD StringLiteral: \"Session Acknowledge for consumer: {}\" from \"Session Acknowledge for consumer: {}\" to \"Session Acknowledge for consumer {} with ack type {}\""]}, {"root": "INS SimpleName: ackType to MethodInvocation at 4", "operations": ["INS SimpleName: ackType to MethodInvocation at 4"]}, {"root": "INS SwitchStatement to Block at 0", "operations": ["INS SimpleName: delivery to MethodInvocation at 0", "INS SwitchCase to SwitchStatement at 16", "INS SwitchStatement to Block at 0", "INS SimpleName: REJECTED to MethodInvocation at 2", "INS BreakStatement to SwitchStatement at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS SimpleName: Released to MethodInvocation at 0", "INS SimpleName: getInstance to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: RELEASED to SwitchCase at 0", "INS SimpleName: MODIFIED_FAILED to MethodInvocation at 2", "INS SimpleName: delivery to MethodInvocation at 0", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SwitchCase to SwitchStatement at 4", "INS SimpleName: disposition to MethodInvocation at 1", "INS ExpressionStatement to SwitchStatement at 5", "INS StringLiteral: \"Invalid acknowledgement type specified: \" to InfixExpression: + at 0", "INS SimpleName: delivery to MethodInvocation at 0", "INS SimpleName: ackType to SwitchStatement at 0", "INS SwitchCase to SwitchStatement at 13", "INS ThrowStatement to SwitchStatement at 17", "INS SimpleName: MODIFIED_FAILED_UNDELIVERABLE to SwitchCase at 0", "INS ExpressionStatement to SwitchStatement at 14", "INS SimpleName: disposition to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS BreakStatement to SwitchStatement at 12", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS BreakStatement to SwitchStatement at 9", "INS SwitchCase to SwitchStatement at 7", "INS SimpleName: disposition to MethodInvocation at 1", "INS SimpleName: delivery to MethodInvocation at 0", "INS ExpressionStatement to SwitchStatement at 11", "INS SwitchCase to SwitchStatement at 1", "INS SimpleName: disposition to MethodInvocation at 1", "INS SimpleName: ackType to InfixExpression: + at 1", "INS BreakStatement to SwitchStatement at 3", "INS SwitchCase to SwitchStatement at 10", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: MODIFIED_FAILED to SwitchCase at 0", "INS SimpleName: REJECTED to SwitchCase at 0", "INS SimpleName: MODIFIED_FAILED_UNDELIVERABLE to MethodInvocation at 2", "INS BreakStatement to SwitchStatement at 15", "INS ExpressionStatement to SwitchStatement at 8", "INS SimpleName: ACCEPTED to SwitchCase at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from MODIFIED_UNDELIVERABLE to MODIFIED_FAILED_UNDELIVERABLE", "operations": ["UPD SimpleName: MODIFIED_UNDELIVERABLE from MODIFIED_UNDELIVERABLE to MODIFIED_FAILED_UNDELIVERABLE"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 2"]}, {"root": "UPDATE from ACK_TYPE.CONSUMED to ACK_TYPE.ACCEPTED", "operations": ["UPD QualifiedName: ACK_TYPE.CONSUMED from ACK_TYPE.CONSUMED to ACK_TYPE.ACCEPTED"]}, {"root": "UPDATE from ACK_TYPE.POISONED to ACK_TYPE.MODIFIED_FAILED_UNDELIVERABLE", "operations": ["UPD QualifiedName: ACK_TYPE.POISONED from ACK_TYPE.POISONED to ACK_TYPE.MODIFIED_FAILED_UNDELIVERABLE"]}, {"root": "UPDATE from \"Consumed Ack of message: {}\" to \"Accepted Ack of message: {}\"", "operations": ["UPD StringLiteral: \"Consumed Ack of message: {}\" from \"Consumed Ack of message: {}\" to \"Accepted Ack of message: {}\""]}]}}, {"AmqpConsumer_diff": {"operations": ["Insert ImportDeclaration(21) into CompilationUnit(1834) at 3", "Update QualifiedName: org.apache.qpid.jms.provider.amqp.AmqpSupport.MODIFIED_UNDELIVERABLE(18) to org.apache.qpid.jms.provider.amqp.AmqpSupport.MODIFIED_FAILED_UNDELIVERABLE", "Insert QualifiedName: org.apache.qpid.jms.provider.amqp.AmqpSupport.REJECTED(20) into ImportDeclaration(21) at 0", "Insert SingleVariableDeclaration(480) into MethodDeclaration(563) at 4", "Update SimpleName: deliveryFailed(1487) to deliveryFailedUndeliverable", "Insert TagElement: @param(472) into Javadoc(473) at 1", "Insert SimpleType: ACK_TYPE(478) into SingleVariableDeclaration(480) at 0", "Insert SimpleName: ackType(479) into SingleVariableDeclaration(480) at 1", "Insert SimpleName: ackType(470) into TagElement: @param(472) at 0", "Insert TextElement:  the type of acknowledgement to perform(471) into TagElement: @param(472) at 1", "Insert SimpleName: ACK_TYPE(477) into SimpleType: ACK_TYPE(478) at 0", "Update StringLiteral: \"Session Acknowledge for consumer: {}\"(474) to \"Session Acknowledge for consumer {} with ack type {}\"", "Insert SimpleName: ackType(488) into MethodInvocation(489) at 4", "Insert SwitchStatement(551) into Block(556) at 0", "Update SimpleName: MODIFIED_UNDELIVERABLE(1494) to MODIFIED_FAILED_UNDELIVERABLE", "Insert SimpleName: ackType(498) into SwitchStatement(551) at 0", "Insert SwitchCase(500) into SwitchStatement(551) at 1", "Move ExpressionStatement(494) into SwitchStatement(551) at 2", "Insert BreakStatement(508) into SwitchStatement(551) at 3", "Insert SwitchCase(510) into SwitchStatement(551) at 4", "Insert ExpressionStatement(517) into SwitchStatement(551) at 5", "Insert BreakStatement(518) into SwitchStatement(551) at 6", "Insert SwitchCase(520) into SwitchStatement(551) at 7", "Insert ExpressionStatement(525) into SwitchStatement(551) at 8", "Insert BreakStatement(526) into SwitchStatement(551) at 9", "Insert SwitchCase(528) into SwitchStatement(551) at 10", "Insert ExpressionStatement(533) into SwitchStatement(551) at 11", "Insert BreakStatement(534) into SwitchStatement(551) at 12", "Insert SwitchCase(536) into SwitchStatement(551) at 13", "Insert ExpressionStatement(541) into SwitchStatement(551) at 14", "Insert BreakStatement(542) into SwitchStatement(551) at 15", "Insert SwitchCase(543) into SwitchStatement(551) at 16", "Insert ThrowStatement(550) into SwitchStatement(551) at 17", "Update QualifiedName: ACK_TYPE.CONSUMED(609) to ACK_TYPE.ACCEPTED", "Insert SimpleName: ACCEPTED(499) into SwitchCase(500) at 0", "Insert SimpleName: RELEASED(509) into SwitchCase(510) at 0", "Insert MethodInvocation(516) into ExpressionStatement(517) at 0", "Insert SimpleName: REJECTED(519) into SwitchCase(520) at 0", "Insert MethodInvocation(524) into ExpressionStatement(525) at 0", "Insert SimpleName: MODIFIED_FAILED(527) into SwitchCase(528) at 0", "Insert MethodInvocation(532) into ExpressionStatement(533) at 0", "Insert SimpleName: MODIFIED_FAILED_UNDELIVERABLE(535) into SwitchCase(536) at 0", "Insert MethodInvocation(540) into ExpressionStatement(541) at 0", "Insert ClassInstanceCreation(549) into ThrowStatement(550) at 0", "Update QualifiedName: ACK_TYPE.POISONED(726) to ACK_TYPE.MODIFIED_FAILED_UNDELIVERABLE", "Insert SimpleName: delivery(511) into MethodInvocation(516) at 0", "Insert SimpleName: disposition(512) into MethodInvocation(516) at 1", "Insert MethodInvocation(515) into MethodInvocation(516) at 2", "Insert SimpleName: delivery(521) into MethodInvocation(524) at 0", "Insert SimpleName: disposition(522) into MethodInvocation(524) at 1", "Insert SimpleName: REJECTED(523) into MethodInvocation(524) at 2", "Insert SimpleName: delivery(529) into MethodInvocation(532) at 0", "Insert SimpleName: disposition(530) into MethodInvocation(532) at 1", "Insert SimpleName: MODIFIED_FAILED(531) into MethodInvocation(532) at 2", "Insert SimpleName: delivery(537) into MethodInvocation(540) at 0", "Insert SimpleName: disposition(538) into MethodInvocation(540) at 1", "Insert SimpleName: MODIFIED_FAILED_UNDELIVERABLE(539) into MethodInvocation(540) at 2", "Insert SimpleType: IllegalArgumentException(545) into ClassInstanceCreation(549) at 0", "Insert InfixExpression: +(548) into ClassInstanceCreation(549) at 1", "Update StringLiteral: \"Consumed Ack of message: {}\"(627) to \"Accepted Ack of message: {}\"", "Update SimpleName: deliveryFailed(1244) to deliveryFailedUndeliverable", "Insert SimpleName: Released(513) into MethodInvocation(515) at 0", "Insert SimpleName: getInstance(514) into MethodInvocation(515) at 1", "Insert SimpleName: IllegalArgumentException(544) into SimpleType: IllegalArgumentException(545) at 0", "Insert StringLiteral: \"Invalid acknowledgement type specified: \"(546) into InfixExpression: +(548) at 0", "Insert SimpleName: ackType(547) into InfixExpression: +(548) at 1", "Update SimpleName: deliveryFailed(728) to deliveryFailedUndeliverable", "Update SimpleName: deliveryFailed(737) to deliveryFailedUndeliverable"]}}, {"AmqpProvider_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: ackType to SingleVariableDeclaration at 2", "INS SimpleName: ACK_TYPE to SimpleType: ACK_TYPE at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleType: ACK_TYPE to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS SimpleName: ackType to MethodInvocation at 2", "operations": ["INS SimpleName: ackType to MethodInvocation at 2"]}]}}, {"AmqpProvider_diff": {"operations": ["Insert SingleVariableDeclaration(1748) into MethodDeclaration(1813) at 5", "Insert Modifier: final(1744) into SingleVariableDeclaration(1748) at 0", "Insert SimpleType: ACK_TYPE(1746) into SingleVariableDeclaration(1748) at 1", "Insert SimpleName: ackType(1747) into SingleVariableDeclaration(1748) at 2", "Insert SimpleName: ACK_TYPE(1745) into SimpleType: ACK_TYPE(1746) at 0", "Insert SimpleName: ackType(1782) into MethodInvocation(1783) at 2"]}}, {"AmqpSession_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS QualifiedName: org.apache.qpid.jms.provider.ProviderConstants.ACK_TYPE to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 14"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS Modifier: final to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: ackType to SingleVariableDeclaration at 2", "INS SimpleType: ACK_TYPE to SingleVariableDeclaration at 1", "INS SimpleName: ACK_TYPE to SimpleType: ACK_TYPE at 0"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TextElement: controls the acknowledgement that is applied to each message. to TagElement: @param at 1", "INS SimpleName: ackType to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1"]}, {"root": "INS SimpleName: ackType to MethodInvocation at 2", "operations": ["INS SimpleName: ackType to MethodInvocation at 2"]}]}}, {"AmqpSession_diff": {"operations": ["Insert ImportDeclaration(43) into CompilationUnit(814) at 14", "Insert QualifiedName: org.apache.qpid.jms.provider.ProviderConstants.ACK_TYPE(42) into ImportDeclaration(43) at 0", "Insert SingleVariableDeclaration(171) into MethodDeclaration(187) at 4", "Insert TagElement: @param(162) into Javadoc(163) at 1", "Insert Modifier: final(167) into SingleVariableDeclaration(171) at 0", "Insert SimpleType: ACK_TYPE(169) into SingleVariableDeclaration(171) at 1", "Insert SimpleName: ackType(170) into SingleVariableDeclaration(171) at 2", "Insert SimpleName: ackType(160) into TagElement: @param(162) at 0", "Insert TextElement: controls the acknowledgement that is applied to each message.(161) into TagElement: @param(162) at 1", "Insert SimpleName: ACK_TYPE(168) into SimpleType: ACK_TYPE(169) at 0", "Insert SimpleName: ackType(181) into MethodInvocation(182) at 2"]}}, {"AmqpSupport_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS QualifiedName: org.apache.qpid.proton.amqp.messaging.Rejected to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 12"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 18", "operations": ["INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: Rejected to SimpleType: Rejected at 0", "INS SimpleName: REJECTED to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 18", "INS Modifier: final to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleType: Rejected to FieldDeclaration at 3", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS Modifier: public to FieldDeclaration at 0", "INS SimpleType: Rejected to ClassInstanceCreation at 0", "INS SimpleName: Rejected to SimpleType: Rejected at 0"]}, {"root": "UPDATE from MODIFIED_UNDELIVERABLE to MODIFIED_FAILED_UNDELIVERABLE", "operations": ["UPD SimpleName: MODIFIED_UNDELIVERABLE from MODIFIED_UNDELIVERABLE to MODIFIED_FAILED_UNDELIVERABLE", "UPD SimpleName: MODIFIED_UNDELIVERABLE from MODIFIED_UNDELIVERABLE to MODIFIED_FAILED_UNDELIVERABLE", "UPD SimpleName: MODIFIED_UNDELIVERABLE from MODIFIED_UNDELIVERABLE to MODIFIED_FAILED_UNDELIVERABLE"]}]}}, {"AmqpSupport_diff": {"operations": ["Insert ImportDeclaration(25) into CompilationUnit(720) at 12", "Insert QualifiedName: org.apache.qpid.proton.amqp.messaging.Rejected(24) into ImportDeclaration(25) at 0", "Insert FieldDeclaration(238) into TypeDeclaration: class(719) at 18", "Insert Modifier: public(228) into FieldDeclaration(238) at 0", "Insert Modifier: static(229) into FieldDeclaration(238) at 1", "Insert Modifier: final(230) into FieldDeclaration(238) at 2", "Insert SimpleType: Rejected(232) into FieldDeclaration(238) at 3", "Insert VariableDeclarationFragment(237) into FieldDeclaration(238) at 4", "Insert SimpleName: Rejected(231) into SimpleType: Rejected(232) at 0", "Insert SimpleName: REJECTED(233) into VariableDeclarationFragment(237) at 0", "Insert ClassInstanceCreation(236) into VariableDeclarationFragment(237) at 1", "Update SimpleName: MODIFIED_UNDELIVERABLE(242) to MODIFIED_FAILED_UNDELIVERABLE", "Insert SimpleType: Rejected(235) into ClassInstanceCreation(236) at 0", "Insert SimpleName: Rejected(234) into SimpleType: Rejected(235) at 0", "Update SimpleName: MODIFIED_UNDELIVERABLE(284) to MODIFIED_FAILED_UNDELIVERABLE", "Update SimpleName: MODIFIED_UNDELIVERABLE(289) to MODIFIED_FAILED_UNDELIVERABLE"]}}, {"FailoverProvider_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: ACK_TYPE to SimpleType: ACK_TYPE at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleType: ACK_TYPE to SingleVariableDeclaration at 1", "INS SimpleName: ackType to SingleVariableDeclaration at 2"]}, {"root": "INS SimpleName: ackType to MethodInvocation at 3", "operations": ["INS SimpleName: ackType to MethodInvocation at 3"]}]}}, {"FailoverProvider_diff": {"operations": ["Insert SingleVariableDeclaration(1252) into MethodDeclaration(1318) at 5", "Insert Modifier: final(1248) into SingleVariableDeclaration(1252) at 0", "Insert SimpleType: ACK_TYPE(1250) into SingleVariableDeclaration(1252) at 1", "Insert SimpleName: ackType(1251) into SingleVariableDeclaration(1252) at 2", "Insert SimpleName: ACK_TYPE(1249) into SimpleType: ACK_TYPE(1250) at 0", "Insert SimpleName: ackType(1281) into MethodInvocation(1283) at 3"]}}], "commit_stats": [{"total_files": 23, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}