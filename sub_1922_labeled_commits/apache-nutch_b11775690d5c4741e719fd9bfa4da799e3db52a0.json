{"application": "apache-nutch", "csha": "b11775690d5c4741e719fd9bfa4da799e3db52a0", "files": [{"CrawlDatum_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 9", "operations": ["INS Modifier: public to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: STATUS_SIGNATURE to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 9", "INS PrimitiveType: byte to FieldDeclaration at 3", "INS Modifier: final to FieldDeclaration at 2", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS Modifier: static to FieldDeclaration at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 24", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 24", "INS ArrayType: byte[] to FieldDeclaration at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: signature to VariableDeclarationFragment at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS Dimension to ArrayType: byte[] at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 25", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 25", "INS PrimitiveType: long to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: modifiedTime to VariableDeclarationFragment at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 34", "operations": ["INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: getModifiedTime to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 34", "INS Block to MethodDeclaration at 3", "INS PrimitiveType: long to MethodDeclaration at 1", "INS SimpleName: modifiedTime to ReturnStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 35", "operations": ["INS Modifier: public to MethodDeclaration at 0", "INS ThisExpression to FieldAccess at 0", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: modifiedTime to SingleVariableDeclaration at 1", "INS SimpleName: modifiedTime to FieldAccess at 1", "INS SimpleName: modifiedTime to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0", "INS MethodDeclaration to TypeDeclaration: class at 35", "INS Assignment: = to ExpressionStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: setModifiedTime to MethodDeclaration at 2", "INS Block to MethodDeclaration at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 42", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 42", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: signature to ReturnStatement at 0", "INS ArrayType: byte[] to MethodDeclaration at 1", "INS SimpleName: getSignature to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 0", "INS Block to MethodDeclaration at 3", "INS Dimension to ArrayType: byte[] at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 43", "operations": ["INS ThrowStatement to IfStatement at 1", "INS StringLiteral: \"Max signature length (256) exceeded: \" to InfixExpression: + at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: signature to InfixExpression: != at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 43", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS Block to MethodDeclaration at 4", "INS QualifiedName: signature.length to InfixExpression: > at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS PrimitiveType: void to MethodDeclaration at 1", "INS InfixExpression: > to InfixExpression: && at 1", "INS NumberLiteral: 256 to InfixExpression: > at 1", "INS IfStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: setSignature to MethodDeclaration at 2", "INS SimpleName: signature to Assignment: = at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS ExpressionStatement to Block at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: signature to SingleVariableDeclaration at 1", "INS SimpleName: signature to FieldAccess at 1", "INS QualifiedName: signature.length to InfixExpression: + at 1", "INS ThisExpression to FieldAccess at 0", "INS Dimension to ArrayType: byte[] at 1", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleType: RuntimeException to ClassInstanceCreation at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 47", "operations": ["INS PrimitiveType: int to FieldDeclaration at 3", "INS NumberLiteral: 8 to InfixExpression: + at 2", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS SimpleName: SIG_OFFSET to VariableDeclarationFragment at 0", "INS SimpleName: SCORE_OFFSET to InfixExpression: + at 0", "INS Modifier: static to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS FieldDeclaration to TypeDeclaration: class at 47", "INS Modifier: private to FieldDeclaration at 0", "INS NumberLiteral: 4 to InfixExpression: + at 1", "INS Modifier: final to FieldDeclaration at 2"]}, {"root": "INS Block to MethodDeclaration at 3", "operations": ["INS IfStatement to Block at 1", "INS InfixExpression: != to IfStatement at 0", "INS Block to ForStatement at 3", "INS NumberLiteral: 3 to InfixExpression: + at 1", "INS ArrayAccess to InfixExpression: + at 1", "INS SimpleName: i to InfixExpression: + at 0", "INS Block to MethodDeclaration at 3", "INS SimpleName: res to Assignment: ^= at 0", "INS SimpleName: signature to InfixExpression: != at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS NumberLiteral: 4 to InfixExpression: / at 1", "INS InfixExpression: << to InfixExpression: << at 0", "INS SimpleName: i to ArrayAccess at 1", "INS VariableDeclarationStatement to Block at 0", "INS ForStatement to Block at 0", "INS SimpleName: signature to ArrayAccess at 0", "INS SimpleName: i to InfixExpression: < at 0", "INS NumberLiteral: 24 to InfixExpression: + at 0", "INS PrimitiveType: int to CastExpression at 0", "INS SimpleName: i to InfixExpression: + at 0", "INS InfixExpression: << to InfixExpression: << at 0", "INS ArrayAccess to InfixExpression: << at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS InfixExpression: << to ParenthesizedExpression at 0", "INS NumberLiteral: 2 to InfixExpression: + at 1", "INS ArrayAccess to InfixExpression: + at 1", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS SimpleName: i to InfixExpression: + at 0", "INS ParenthesizedExpression to CastExpression at 1", "INS InfixExpression: + to InfixExpression: << at 1", "INS NumberLiteral: 4 to Assignment: += at 1", "INS ArrayAccess to InfixExpression: + at 1", "INS SimpleName: signature to ArrayAccess at 0", "INS Assignment: += to ForStatement at 2", "INS SimpleName: res to VariableDeclarationFragment at 0", "INS InfixExpression: + to InfixExpression: << at 1", "INS SimpleName: signature to ArrayAccess at 0", "INS NullLiteral to InfixExpression: != at 1", "INS QualifiedName: signature.length to InfixExpression: / at 0", "INS NumberLiteral: 8 to InfixExpression: + at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS SimpleName: signature to ArrayAccess at 0", "INS InfixExpression: < to ForStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: i to Assignment: += at 0", "INS InfixExpression: / to InfixExpression: < at 1", "INS NumberLiteral: 16 to InfixExpression: + at 0", "INS InfixExpression: + to ArrayAccess at 1", "INS Block to IfStatement at 1", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS InfixExpression: + to InfixExpression: << at 1", "INS ExpressionStatement to Block at 0", "INS CastExpression to Assignment: ^= at 1", "INS Assignment: ^= to ExpressionStatement at 0", "INS InfixExpression: + to ArrayAccess at 1", "INS InfixExpression: + to ArrayAccess at 1"]}, {"root": "UPDATE from 2 to 3", "operations": ["UPD NumberLiteral: 2 from 2 to 3"]}, {"root": "INS IfStatement to Block at 7", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: signature to Assignment: = at 0", "INS NumberLiteral: 2 to InfixExpression: > at 1", "INS SimpleName: modifiedTime to Assignment: = at 0", "INS Dimension to ArrayType: byte[] at 1", "INS InfixExpression: > to IfStatement at 0", "INS SimpleName: readFully to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: version to InfixExpression: > at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: cnt to InfixExpression: > at 0", "INS NullLiteral to Assignment: = at 1", "INS SimpleName: readByte to MethodInvocation at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: cnt to VariableDeclarationFragment at 0", "INS IfStatement to Block at 2", "INS ExpressionStatement to IfStatement at 2", "INS SimpleName: in to MethodInvocation at 0", "INS SimpleName: signature to MethodInvocation at 2", "INS SimpleName: signature to Assignment: = at 0", "INS SimpleName: in to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: readLong to MethodInvocation at 1", "INS InfixExpression: > to IfStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS IfStatement to Block at 7", "INS VariableDeclarationStatement to Block at 1", "INS ArrayCreation to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: cnt to ArrayCreation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: in to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to Assignment: = at 1", "INS ArrayType: byte[] to ArrayCreation at 0"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS SimpleName: writeLong to MethodInvocation at 1", "INS SimpleName: modifiedTime to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 6", "INS SimpleName: out to MethodInvocation at 0"]}, {"root": "INS IfStatement to Block at 7", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: writeByte to MethodInvocation at 1", "INS SimpleName: out to MethodInvocation at 0", "INS SimpleName: signature to MethodInvocation at 2", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS QualifiedName: signature.length to MethodInvocation at 2", "INS SimpleName: write to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS InfixExpression: == to IfStatement at 0", "INS Block to IfStatement at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: writeByte to MethodInvocation at 1", "INS SimpleName: out to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 7", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: out to MethodInvocation at 0", "INS SimpleName: signature to InfixExpression: == at 0", "INS ExpressionStatement to Block at 1"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS QualifiedName: that.modifiedTime to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: modifiedTime to FieldAccess at 1", "INS ExpressionStatement to Block at 5"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 6", "INS SimpleName: signature to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS QualifiedName: that.signature to Assignment: = at 1"]}, {"root": "INS IfStatement to Block at 6", "operations": ["INS FieldAccess to InfixExpression: != at 1", "INS ConditionalExpression to ReturnStatement at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS ReturnStatement to IfStatement at 1", "INS IfStatement to Block at 6", "INS QualifiedName: that.modifiedTime to InfixExpression: != at 0", "INS PrefixExpression: - to ConditionalExpression at 2", "INS InfixExpression: > to ConditionalExpression at 0", "INS NumberLiteral: 1 to ConditionalExpression at 1", "INS SimpleName: modifiedTime to FieldAccess at 1", "INS QualifiedName: that.modifiedTime to InfixExpression: - at 0", "INS SimpleName: modifiedTime to FieldAccess at 1", "INS InfixExpression: - to ParenthesizedExpression at 0", "INS InfixExpression: != to IfStatement at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to InfixExpression: - at 1", "INS ThisExpression to FieldAccess at 0", "INS ParenthesizedExpression to InfixExpression: > at 0"]}, {"root": "INS ReturnStatement to Block at 7", "operations": ["INS ReturnStatement to Block at 7", "INS SimpleName: SignatureComparator to MethodInvocation at 0", "INS SimpleName: _compare to MethodInvocation at 1", "INS ThisExpression to MethodInvocation at 2", "INS SimpleName: that to MethodInvocation at 3", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS SimpleName: append to MethodInvocation at 1", "INS StringLiteral: \"Modified time: \" to InfixExpression: + at 0", "INS SimpleType: Date to ClassInstanceCreation at 0", "INS ExpressionStatement to Block at 4", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \"\\n\" to InfixExpression: + at 2", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: buf to MethodInvocation at 0", "INS SimpleName: Date to SimpleType: Date at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getModifiedTime to MethodInvocation at 0", "INS ClassInstanceCreation to InfixExpression: + at 1"]}, {"root": "INS ExpressionStatement to Block at 8", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: toHexString to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: + at 1", "INS ExpressionStatement to Block at 8", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: getSignature to MethodInvocation at 0", "INS StringLiteral: \"Signature: \" to InfixExpression: + at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: StringUtil to MethodInvocation at 0", "INS SimpleName: buf to MethodInvocation at 0", "INS StringLiteral: \"\\n\" to InfixExpression: + at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 2"]}, {"root": "UPDATE from \"INVALID\" to \"signature\"", "operations": ["UPD StringLiteral: \"INVALID\" from \"INVALID\" to \"signature\""]}, {"root": "UPDATE from != to >", "operations": ["UPD InfixExpression: != from != to >"]}, {"root": "INS VariableDeclarationStatement to Block at 15", "operations": ["INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: readLong to MethodInvocation at 0", "INS NumberLiteral: 4 to InfixExpression: + at 2", "INS SimpleName: s1 to InfixExpression: + at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: modifiedTime1 to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: b1 to MethodInvocation at 1", "INS SimpleName: SCORE_OFFSET to InfixExpression: + at 1", "INS VariableDeclarationStatement to Block at 15", "INS PrimitiveType: long to VariableDeclarationStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 16", "operations": ["INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: readLong to MethodInvocation at 0", "INS NumberLiteral: 4 to InfixExpression: + at 2", "INS SimpleName: SCORE_OFFSET to InfixExpression: + at 1", "INS SimpleName: s2 to InfixExpression: + at 0", "INS VariableDeclarationStatement to Block at 16", "INS SimpleName: b2 to MethodInvocation at 1", "INS SimpleName: modifiedTime2 to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS InfixExpression: + to MethodInvocation at 2"]}, {"root": "INS IfStatement to Block at 17", "operations": ["INS InfixExpression: - to ParenthesizedExpression at 0", "INS IfStatement to Block at 17", "INS SimpleName: modifiedTime1 to InfixExpression: != at 1", "INS ParenthesizedExpression to InfixExpression: > at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS PrefixExpression: - to ConditionalExpression at 2", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS InfixExpression: > to ConditionalExpression at 0", "INS NumberLiteral: 1 to ConditionalExpression at 1", "INS ReturnStatement to IfStatement at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: modifiedTime2 to InfixExpression: != at 0", "INS ConditionalExpression to ReturnStatement at 0", "INS SimpleName: modifiedTime1 to InfixExpression: - at 1", "INS SimpleName: modifiedTime2 to InfixExpression: - at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 18", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: SIG_OFFSET to InfixExpression: + at 1", "INS VariableDeclarationStatement to Block at 18", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: b1 to ArrayAccess at 0", "INS ArrayAccess to VariableDeclarationFragment at 1", "INS SimpleName: sigl1 to VariableDeclarationFragment at 0", "INS SimpleName: s1 to InfixExpression: + at 0", "INS InfixExpression: + to ArrayAccess at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 19", "operations": ["INS SimpleName: sigl2 to VariableDeclarationFragment at 0", "INS ArrayAccess to VariableDeclarationFragment at 1", "INS InfixExpression: + to ArrayAccess at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: s2 to InfixExpression: + at 0", "INS SimpleName: SIG_OFFSET to InfixExpression: + at 1", "INS VariableDeclarationStatement to Block at 19", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: b2 to ArrayAccess at 0"]}, {"root": "INS ReturnStatement to Block at 20", "operations": ["INS SimpleName: SIG_OFFSET to MethodInvocation at 6", "INS SimpleName: SignatureComparator to MethodInvocation at 0", "INS SimpleName: sigl2 to MethodInvocation at 7", "INS ReturnStatement to Block at 20", "INS SimpleName: sigl1 to MethodInvocation at 4", "INS SimpleName: b2 to MethodInvocation at 5", "INS SimpleName: _compare to MethodInvocation at 1", "INS SimpleName: b1 to MethodInvocation at 2", "INS SimpleName: SIG_OFFSET to MethodInvocation at 3", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS ParenthesizedExpression to InfixExpression: && at 2", "operations": ["INS QualifiedName: other.modifiedTime to InfixExpression: == at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: modifiedTime to FieldAccess at 1", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS ParenthesizedExpression to InfixExpression: && at 2", "INS FieldAccess to InfixExpression: == at 0"]}, {"root": "INS ParenthesizedExpression to InfixExpression: && at 5", "operations": ["INS ThisExpression to FieldAccess at 0", "INS SimpleName: _compare to MethodInvocation at 1", "INS SimpleName: signature to FieldAccess at 1", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS SimpleName: SignatureComparator to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS QualifiedName: other.signature to MethodInvocation at 3", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS FieldAccess to MethodInvocation at 2", "INS ParenthesizedExpression to InfixExpression: && at 5"]}, {"root": "INS SimpleName: res to InfixExpression: ^ at 0", "operations": ["INS SimpleName: res to InfixExpression: ^ at 0"]}, {"root": "INS ParenthesizedExpression to InfixExpression: ^ at 3", "operations": ["INS CastExpression to ParenthesizedExpression at 0", "INS ParenthesizedExpression to InfixExpression: ^ at 3", "INS PrimitiveType: int to CastExpression at 0", "INS SimpleName: modifiedTime to CastExpression at 1"]}, {"root": "DEL ReturnStatement", "operations": ["DEL NumberLiteral: 0", "DEL ReturnStatement"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL NumberLiteral: 0"]}, {"root": "DEL Block", "operations": ["DEL Block"]}]}}, {"CrawlDatum_diff": {"operations": ["Insert FieldDeclaration(81) into TypeDeclaration: class(1422) at 9", "Insert FieldDeclaration(205) into TypeDeclaration: class(1422) at 24", "Insert FieldDeclaration(210) into TypeDeclaration: class(1422) at 25", "Insert MethodDeclaration(325) into TypeDeclaration: class(1422) at 34", "Insert MethodDeclaration(339) into TypeDeclaration: class(1422) at 35", "Insert MethodDeclaration(413) into TypeDeclaration: class(1422) at 42", "Insert MethodDeclaration(444) into TypeDeclaration: class(1422) at 43", "Insert FieldDeclaration(597) into TypeDeclaration: class(1422) at 47", "Insert Modifier: public(74) into FieldDeclaration(81) at 0", "Insert Modifier: static(75) into FieldDeclaration(81) at 1", "Insert Modifier: final(76) into FieldDeclaration(81) at 2", "Insert PrimitiveType: byte(77) into FieldDeclaration(81) at 3", "Insert VariableDeclarationFragment(80) into FieldDeclaration(81) at 4", "Insert Modifier: private(198) into FieldDeclaration(205) at 0", "Insert ArrayType: byte[](201) into FieldDeclaration(205) at 1", "Insert VariableDeclarationFragment(204) into FieldDeclaration(205) at 2", "Insert Modifier: private(206) into FieldDeclaration(210) at 0", "Insert PrimitiveType: long(207) into FieldDeclaration(210) at 1", "Insert VariableDeclarationFragment(209) into FieldDeclaration(210) at 2", "Insert Modifier: public(319) into MethodDeclaration(325) at 0", "Insert PrimitiveType: long(320) into MethodDeclaration(325) at 1", "Insert SimpleName: getModifiedTime(321) into MethodDeclaration(325) at 2", "Insert Block(324) into MethodDeclaration(325) at 3", "Insert Modifier: public(326) into MethodDeclaration(339) at 0", "Insert PrimitiveType: void(327) into MethodDeclaration(339) at 1", "Insert SimpleName: setModifiedTime(328) into MethodDeclaration(339) at 2", "Insert SingleVariableDeclaration(331) into MethodDeclaration(339) at 3", "Insert Block(338) into MethodDeclaration(339) at 4", "Insert Modifier: public(405) into MethodDeclaration(413) at 0", "Insert ArrayType: byte[](408) into MethodDeclaration(413) at 1", "Insert SimpleName: getSignature(409) into MethodDeclaration(413) at 2", "Insert Block(412) into MethodDeclaration(413) at 3", "Insert Modifier: public(414) into MethodDeclaration(444) at 0", "Insert PrimitiveType: void(415) into MethodDeclaration(444) at 1", "Insert SimpleName: setSignature(416) into MethodDeclaration(444) at 2", "Insert SingleVariableDeclaration(421) into MethodDeclaration(444) at 3", "Insert Block(443) into MethodDeclaration(444) at 4", "Insert Modifier: private(587) into FieldDeclaration(597) at 0", "Insert Modifier: static(588) into FieldDeclaration(597) at 1", "Insert Modifier: final(589) into FieldDeclaration(597) at 2", "Insert PrimitiveType: int(590) into FieldDeclaration(597) at 3", "Insert VariableDeclarationFragment(596) into FieldDeclaration(597) at 4", "Insert Block(1398) into MethodDeclaration(1399) at 3", "Update NumberLiteral: 2(71) to 3", "Insert SimpleName: STATUS_SIGNATURE(78) into VariableDeclarationFragment(80) at 0", "Insert NumberLiteral: 0(79) into VariableDeclarationFragment(80) at 1", "Insert PrimitiveType: byte(199) into ArrayType: byte[](201) at 0", "Insert Dimension(200) into ArrayType: byte[](201) at 1", "Insert SimpleName: signature(202) into VariableDeclarationFragment(204) at 0", "Insert NullLiteral(203) into VariableDeclarationFragment(204) at 1", "Insert SimpleName: modifiedTime(208) into VariableDeclarationFragment(209) at 0", "Insert ReturnStatement(323) into Block(324) at 0", "Insert PrimitiveType: long(329) into SingleVariableDeclaration(331) at 0", "Insert SimpleName: modifiedTime(330) into SingleVariableDeclaration(331) at 1", "Insert ExpressionStatement(337) into Block(338) at 0", "Insert PrimitiveType: byte(406) into ArrayType: byte[](408) at 0", "Insert Dimension(407) into ArrayType: byte[](408) at 1", "Insert ReturnStatement(411) into Block(412) at 0", "Insert ArrayType: byte[](419) into SingleVariableDeclaration(421) at 0", "Insert SimpleName: signature(420) into SingleVariableDeclaration(421) at 1", "Insert IfStatement(436) into Block(443) at 0", "Insert ExpressionStatement(442) into Block(443) at 1", "Insert IfStatement(568) into Block(569) at 7", "Insert SimpleName: SIG_OFFSET(591) into VariableDeclarationFragment(596) at 0", "Insert InfixExpression: +(595) into VariableDeclarationFragment(596) at 1", "Insert ExpressionStatement(641) into Block(663) at 6", "Insert IfStatement(662) into Block(663) at 7", "Insert ExpressionStatement(710) into Block(717) at 5", "Insert ExpressionStatement(716) into Block(717) at 6", "Insert IfStatement(837) into Block(844) at 6", "Insert ReturnStatement(843) into Block(844) at 7", "Insert ExpressionStatement(1195) into Block(1239) at 4", "Insert ExpressionStatement(1234) into Block(1239) at 8", "Insert VariableDeclarationStatement(1323) into Block(1398) at 0", "Insert IfStatement(1376) into Block(1398) at 1", "Move ReturnStatement(1037) into Block(1398) at 2", "Update StringLiteral: \"INVALID\"(138) to \"signature\"", "Insert SimpleName: modifiedTime(322) into ReturnStatement(323) at 0", "Insert Assignment: =(336) into ExpressionStatement(337) at 0", "Insert SimpleName: signature(410) into ReturnStatement(411) at 0", "Insert PrimitiveType: byte(417) into ArrayType: byte[](419) at 0", "Insert Dimension(418) into ArrayType: byte[](419) at 1", "Insert InfixExpression: &&(428) into IfStatement(436) at 0", "Insert ThrowStatement(435) into IfStatement(436) at 1", "Insert Assignment: =(441) into ExpressionStatement(442) at 0", "Update InfixExpression: !=(409) to >", "Insert InfixExpression: >(531) into IfStatement(568) at 0", "Insert Block(567) into IfStatement(568) at 1", "Insert SimpleName: SCORE_OFFSET(592) into InfixExpression: +(595) at 0", "Insert NumberLiteral: 4(593) into InfixExpression: +(595) at 1", "Insert NumberLiteral: 8(594) into InfixExpression: +(595) at 2", "Insert MethodInvocation(640) into ExpressionStatement(641) at 0", "Insert InfixExpression: ==(644) into IfStatement(662) at 0", "Insert Block(650) into IfStatement(662) at 1", "Insert Block(661) into IfStatement(662) at 2", "Insert Assignment: =(709) into ExpressionStatement(710) at 0", "Insert Assignment: =(715) into ExpressionStatement(716) at 0", "Insert InfixExpression: !=(823) into IfStatement(837) at 0", "Insert ReturnStatement(836) into IfStatement(837) at 1", "Insert MethodInvocation(842) into ReturnStatement(843) at 0", "Insert VariableDeclarationStatement(1067) into Block(1122) at 15", "Insert VariableDeclarationStatement(1078) into Block(1122) at 16", "Insert IfStatement(1093) into Block(1122) at 17", "Insert VariableDeclarationStatement(1102) into Block(1122) at 18", "Insert VariableDeclarationStatement(1111) into Block(1122) at 19", "Insert ReturnStatement(1121) into Block(1122) at 20", "Insert MethodInvocation(1194) into ExpressionStatement(1195) at 0", "Insert MethodInvocation(1233) into ExpressionStatement(1234) at 0", "Insert PrimitiveType: int(1319) into VariableDeclarationStatement(1323) at 0", "Insert VariableDeclarationFragment(1322) into VariableDeclarationStatement(1323) at 1", "Insert InfixExpression: !=(1326) into IfStatement(1376) at 0", "Insert Block(1375) into IfStatement(1376) at 1", "Insert FieldAccess(334) into Assignment: =(336) at 0", "Insert SimpleName: modifiedTime(335) into Assignment: =(336) at 1", "Insert InfixExpression: !=(424) into InfixExpression: &&(428) at 0", "Insert InfixExpression: >(427) into InfixExpression: &&(428) at 1", "Insert ClassInstanceCreation(434) into ThrowStatement(435) at 0", "Insert FieldAccess(439) into Assignment: =(441) at 0", "Insert SimpleName: signature(440) into Assignment: =(441) at 1", "Insert SimpleName: version(529) into InfixExpression: >(531) at 0", "Insert NumberLiteral: 2(530) into InfixExpression: >(531) at 1", "Insert ExpressionStatement(537) into Block(567) at 0", "Insert VariableDeclarationStatement(544) into Block(567) at 1", "Insert IfStatement(566) into Block(567) at 2", "Insert SimpleName: out(637) into MethodInvocation(640) at 0", "Insert SimpleName: writeLong(638) into MethodInvocation(640) at 1", "Insert SimpleName: modifiedTime(639) into MethodInvocation(640) at 2", "Insert SimpleName: signature(642) into InfixExpression: ==(644) at 0", "Insert NullLiteral(643) into InfixExpression: ==(644) at 1", "Insert ExpressionStatement(649) into Block(650) at 0", "Insert ExpressionStatement(655) into Block(661) at 0", "Insert ExpressionStatement(660) into Block(661) at 1", "Insert FieldAccess(707) into Assignment: =(709) at 0", "Insert QualifiedName: that.modifiedTime(708) into Assignment: =(709) at 1", "Insert FieldAccess(713) into Assignment: =(715) at 0", "Insert QualifiedName: that.signature(714) into Assignment: =(715) at 1", "Insert QualifiedName: that.modifiedTime(819) into InfixExpression: !=(823) at 0", "Insert FieldAccess(822) into InfixExpression: !=(823) at 1", "Insert ConditionalExpression(835) into ReturnStatement(836) at 0", "Insert SimpleName: SignatureComparator(838) into MethodInvocation(842) at 0", "Insert SimpleName: _compare(839) into MethodInvocation(842) at 1", "Insert ThisExpression(840) into MethodInvocation(842) at 2", "Insert SimpleName: that(841) into MethodInvocation(842) at 3", "Insert PrimitiveType: long(1057) into VariableDeclarationStatement(1067) at 0", "Insert VariableDeclarationFragment(1066) into VariableDeclarationStatement(1067) at 1", "Insert PrimitiveType: long(1068) into VariableDeclarationStatement(1078) at 0", "Insert VariableDeclarationFragment(1077) into VariableDeclarationStatement(1078) at 1", "Insert InfixExpression: !=(1081) into IfStatement(1093) at 0", "Insert ReturnStatement(1092) into IfStatement(1093) at 1", "Insert PrimitiveType: int(1094) into VariableDeclarationStatement(1102) at 0", "Insert VariableDeclarationFragment(1101) into VariableDeclarationStatement(1102) at 1", "Insert PrimitiveType: int(1103) into VariableDeclarationStatement(1111) at 0", "Insert VariableDeclarationFragment(1110) into VariableDeclarationStatement(1111) at 1", "Insert MethodInvocation(1120) into ReturnStatement(1121) at 0", "Insert SimpleName: buf(1184) into MethodInvocation(1194) at 0", "Insert SimpleName: append(1185) into MethodInvocation(1194) at 1", "Insert InfixExpression: +(1193) into MethodInvocation(1194) at 2", "Insert SimpleName: buf(1223) into MethodInvocation(1233) at 0", "Insert SimpleName: append(1224) into MethodInvocation(1233) at 1", "Insert InfixExpression: +(1232) into MethodInvocation(1233) at 2", "Insert ParenthesizedExpression(1283) into InfixExpression: &&(1312) at 2", "Insert ParenthesizedExpression(1305) into InfixExpression: &&(1312) at 5", "Insert SimpleName: res(1320) into VariableDeclarationFragment(1322) at 0", "Insert NumberLiteral: 0(1321) into VariableDeclarationFragment(1322) at 1", "Insert SimpleName: signature(1324) into InfixExpression: !=(1326) at 0", "Insert NullLiteral(1325) into InfixExpression: !=(1326) at 1", "Insert ForStatement(1374) into Block(1375) at 0", "Insert SimpleName: res(1377) into InfixExpression: ^(1396) at 0", "Insert ParenthesizedExpression(1386) into InfixExpression: ^(1396) at 3", "Insert ThisExpression(332) into FieldAccess(334) at 0", "Insert SimpleName: modifiedTime(333) into FieldAccess(334) at 1", "Insert SimpleName: signature(422) into InfixExpression: !=(424) at 0", "Insert NullLiteral(423) into InfixExpression: !=(424) at 1", "Insert QualifiedName: signature.length(425) into InfixExpression: >(427) at 0", "Insert NumberLiteral: 256(426) into InfixExpression: >(427) at 1", "Insert SimpleType: RuntimeException(430) into ClassInstanceCreation(434) at 0", "Insert InfixExpression: +(433) into ClassInstanceCreation(434) at 1", "Insert ThisExpression(437) into FieldAccess(439) at 0", "Insert SimpleName: signature(438) into FieldAccess(439) at 1", "Insert Assignment: =(536) into ExpressionStatement(537) at 0", "Insert PrimitiveType: int(538) into VariableDeclarationStatement(544) at 0", "Insert VariableDeclarationFragment(543) into VariableDeclarationStatement(544) at 1", "Insert InfixExpression: >(547) into IfStatement(566) at 0", "Insert Block(561) into IfStatement(566) at 1", "Insert ExpressionStatement(565) into IfStatement(566) at 2", "Insert MethodInvocation(648) into ExpressionStatement(649) at 0", "Insert MethodInvocation(654) into ExpressionStatement(655) at 0", "Insert MethodInvocation(659) into ExpressionStatement(660) at 0", "Insert ThisExpression(705) into FieldAccess(707) at 0", "Insert SimpleName: modifiedTime(706) into FieldAccess(707) at 1", "Insert ThisExpression(711) into FieldAccess(713) at 0", "Insert SimpleName: signature(712) into FieldAccess(713) at 1", "Insert ThisExpression(820) into FieldAccess(822) at 0", "Insert SimpleName: modifiedTime(821) into FieldAccess(822) at 1", "Insert InfixExpression: >(831) into ConditionalExpression(835) at 0", "Insert NumberLiteral: 1(832) into ConditionalExpression(835) at 1", "Insert PrefixExpression: -(834) into ConditionalExpression(835) at 2", "Insert SimpleName: modifiedTime1(1058) into VariableDeclarationFragment(1066) at 0", "Insert MethodInvocation(1065) into VariableDeclarationFragment(1066) at 1", "Insert SimpleName: modifiedTime2(1069) into VariableDeclarationFragment(1077) at 0", "Insert MethodInvocation(1076) into VariableDeclarationFragment(1077) at 1", "Insert SimpleName: modifiedTime2(1079) into InfixExpression: !=(1081) at 0", "Insert SimpleName: modifiedTime1(1080) into InfixExpression: !=(1081) at 1", "Insert ConditionalExpression(1091) into ReturnStatement(1092) at 0", "Insert SimpleName: sigl1(1095) into VariableDeclarationFragment(1101) at 0", "Insert ArrayAccess(1100) into VariableDeclarationFragment(1101) at 1", "Insert SimpleName: sigl2(1104) into VariableDeclarationFragment(1110) at 0", "Insert ArrayAccess(1109) into VariableDeclarationFragment(1110) at 1", "Insert SimpleName: SignatureComparator(1112) into MethodInvocation(1120) at 0", "Insert SimpleName: _compare(1113) into MethodInvocation(1120) at 1", "Insert SimpleName: b1(1114) into MethodInvocation(1120) at 2", "Insert SimpleName: SIG_OFFSET(1115) into MethodInvocation(1120) at 3", "Insert SimpleName: sigl1(1116) into MethodInvocation(1120) at 4", "Insert SimpleName: b2(1117) into MethodInvocation(1120) at 5", "Insert SimpleName: SIG_OFFSET(1118) into MethodInvocation(1120) at 6", "Insert SimpleName: sigl2(1119) into MethodInvocation(1120) at 7", "Insert StringLiteral: \"Modified time: \"(1186) into InfixExpression: +(1193) at 0", "Insert ClassInstanceCreation(1191) into InfixExpression: +(1193) at 1", "Insert StringLiteral: \"\\n\"(1192) into InfixExpression: +(1193) at 2", "Insert StringLiteral: \"Signature: \"(1225) into InfixExpression: +(1232) at 0", "Insert MethodInvocation(1230) into InfixExpression: +(1232) at 1", "Insert StringLiteral: \"\\n\"(1231) into InfixExpression: +(1232) at 2", "Insert InfixExpression: ==(1282) into ParenthesizedExpression(1283) at 0", "Insert InfixExpression: ==(1304) into ParenthesizedExpression(1305) at 0", "Insert VariableDeclarationExpression(1331) into ForStatement(1374) at 0", "Insert InfixExpression: <(1336) into ForStatement(1374) at 1", "Insert Assignment: +=(1339) into ForStatement(1374) at 2", "Insert Block(1373) into ForStatement(1374) at 3", "Insert CastExpression(1385) into ParenthesizedExpression(1386) at 0", "Insert SimpleName: RuntimeException(429) into SimpleType: RuntimeException(430) at 0", "Insert StringLiteral: \"Max signature length (256) exceeded: \"(431) into InfixExpression: +(433) at 0", "Insert QualifiedName: signature.length(432) into InfixExpression: +(433) at 1", "Insert SimpleName: modifiedTime(532) into Assignment: =(536) at 0", "Insert MethodInvocation(535) into Assignment: =(536) at 1", "Insert SimpleName: cnt(539) into VariableDeclarationFragment(543) at 0", "Insert MethodInvocation(542) into VariableDeclarationFragment(543) at 1", "Insert SimpleName: cnt(545) into InfixExpression: >(547) at 0", "Insert NumberLiteral: 0(546) into InfixExpression: >(547) at 1", "Insert ExpressionStatement(555) into Block(561) at 0", "Insert ExpressionStatement(560) into Block(561) at 1", "Insert Assignment: =(564) into ExpressionStatement(565) at 0", "Insert SimpleName: out(645) into MethodInvocation(648) at 0", "Insert SimpleName: writeByte(646) into MethodInvocation(648) at 1", "Insert NumberLiteral: 0(647) into MethodInvocation(648) at 2", "Insert SimpleName: out(651) into MethodInvocation(654) at 0", "Insert SimpleName: writeByte(652) into MethodInvocation(654) at 1", "Insert QualifiedName: signature.length(653) into MethodInvocation(654) at 2", "Insert SimpleName: out(656) into MethodInvocation(659) at 0", "Insert SimpleName: write(657) into MethodInvocation(659) at 1", "Insert SimpleName: signature(658) into MethodInvocation(659) at 2", "Insert ParenthesizedExpression(829) into InfixExpression: >(831) at 0", "Insert NumberLiteral: 0(830) into InfixExpression: >(831) at 1", "Insert NumberLiteral: 1(833) into PrefixExpression: -(834) at 0", "Insert SimpleName: readLong(1059) into MethodInvocation(1065) at 0", "Insert SimpleName: b1(1060) into MethodInvocation(1065) at 1", "Insert InfixExpression: +(1064) into MethodInvocation(1065) at 2", "Insert SimpleName: readLong(1070) into MethodInvocation(1076) at 0", "Insert SimpleName: b2(1071) into MethodInvocation(1076) at 1", "Insert InfixExpression: +(1075) into MethodInvocation(1076) at 2", "Insert InfixExpression: >(1087) into ConditionalExpression(1091) at 0", "Insert NumberLiteral: 1(1088) into ConditionalExpression(1091) at 1", "Insert PrefixExpression: -(1090) into ConditionalExpression(1091) at 2", "Insert SimpleName: b1(1096) into ArrayAccess(1100) at 0", "Insert InfixExpression: +(1099) into ArrayAccess(1100) at 1", "Insert SimpleName: b2(1105) into ArrayAccess(1109) at 0", "Insert InfixExpression: +(1108) into ArrayAccess(1109) at 1", "Insert SimpleType: Date(1188) into ClassInstanceCreation(1191) at 0", "Insert MethodInvocation(1190) into ClassInstanceCreation(1191) at 1", "Insert SimpleName: StringUtil(1226) into MethodInvocation(1230) at 0", "Insert SimpleName: toHexString(1227) into MethodInvocation(1230) at 1", "Insert MethodInvocation(1229) into MethodInvocation(1230) at 2", "Insert FieldAccess(1280) into InfixExpression: ==(1282) at 0", "Insert QualifiedName: other.modifiedTime(1281) into InfixExpression: ==(1282) at 1", "Insert MethodInvocation(1302) into InfixExpression: ==(1304) at 0", "Insert NumberLiteral: 0(1303) into InfixExpression: ==(1304) at 1", "Insert PrimitiveType: int(1327) into VariableDeclarationExpression(1331) at 0", "Insert VariableDeclarationFragment(1330) into VariableDeclarationExpression(1331) at 1", "Insert SimpleName: i(1332) into InfixExpression: <(1336) at 0", "Insert InfixExpression: /(1335) into InfixExpression: <(1336) at 1", "Insert SimpleName: i(1337) into Assignment: +=(1339) at 0", "Insert NumberLiteral: 4(1338) into Assignment: +=(1339) at 1", "Insert ExpressionStatement(1372) into Block(1373) at 0", "Insert PrimitiveType: int(1383) into CastExpression(1385) at 0", "Insert SimpleName: modifiedTime(1384) into CastExpression(1385) at 1", "Insert SimpleName: in(533) into MethodInvocation(535) at 0", "Insert SimpleName: readLong(534) into MethodInvocation(535) at 1", "Insert SimpleName: in(540) into MethodInvocation(542) at 0", "Insert SimpleName: readByte(541) into MethodInvocation(542) at 1", "Insert Assignment: =(554) into ExpressionStatement(555) at 0", "Insert MethodInvocation(559) into ExpressionStatement(560) at 0", "Insert SimpleName: signature(562) into Assignment: =(564) at 0", "Insert NullLiteral(563) into Assignment: =(564) at 1", "Insert InfixExpression: -(828) into ParenthesizedExpression(829) at 0", "Insert SimpleName: s1(1061) into InfixExpression: +(1064) at 0", "Insert SimpleName: SCORE_OFFSET(1062) into InfixExpression: +(1064) at 1", "Insert NumberLiteral: 4(1063) into InfixExpression: +(1064) at 2", "Insert SimpleName: s2(1072) into InfixExpression: +(1075) at 0", "Insert SimpleName: SCORE_OFFSET(1073) into InfixExpression: +(1075) at 1", "Insert NumberLiteral: 4(1074) into InfixExpression: +(1075) at 2", "Insert ParenthesizedExpression(1085) into InfixExpression: >(1087) at 0", "Insert NumberLiteral: 0(1086) into InfixExpression: >(1087) at 1", "Insert NumberLiteral: 1(1089) into PrefixExpression: -(1090) at 0", "Insert SimpleName: s1(1097) into InfixExpression: +(1099) at 0", "Insert SimpleName: SIG_OFFSET(1098) into InfixExpression: +(1099) at 1", "Insert SimpleName: s2(1106) into InfixExpression: +(1108) at 0", "Insert SimpleName: SIG_OFFSET(1107) into InfixExpression: +(1108) at 1", "Insert SimpleName: Date(1187) into SimpleType: Date(1188) at 0", "Insert SimpleName: getModifiedTime(1189) into MethodInvocation(1190) at 0", "Insert SimpleName: getSignature(1228) into MethodInvocation(1229) at 0", "Insert ThisExpression(1278) into FieldAccess(1280) at 0", "Insert SimpleName: modifiedTime(1279) into FieldAccess(1280) at 1", "Insert SimpleName: SignatureComparator(1296) into MethodInvocation(1302) at 0", "Insert SimpleName: _compare(1297) into MethodInvocation(1302) at 1", "Insert FieldAccess(1300) into MethodInvocation(1302) at 2", "Insert QualifiedName: other.signature(1301) into MethodInvocation(1302) at 3", "Insert SimpleName: i(1328) into VariableDeclarationFragment(1330) at 0", "Insert NumberLiteral: 0(1329) into VariableDeclarationFragment(1330) at 1", "Insert QualifiedName: signature.length(1333) into InfixExpression: /(1335) at 0", "Insert NumberLiteral: 4(1334) into InfixExpression: /(1335) at 1", "Insert Assignment: ^=(1371) into ExpressionStatement(1372) at 0", "Insert SimpleName: signature(548) into Assignment: =(554) at 0", "Insert ArrayCreation(553) into Assignment: =(554) at 1", "Insert SimpleName: in(556) into MethodInvocation(559) at 0", "Insert SimpleName: readFully(557) into MethodInvocation(559) at 1", "Insert SimpleName: signature(558) into MethodInvocation(559) at 2", "Insert QualifiedName: that.modifiedTime(824) into InfixExpression: -(828) at 0", "Insert FieldAccess(827) into InfixExpression: -(828) at 1", "Insert InfixExpression: -(1084) into ParenthesizedExpression(1085) at 0", "Insert ThisExpression(1298) into FieldAccess(1300) at 0", "Insert SimpleName: signature(1299) into FieldAccess(1300) at 1", "Insert SimpleName: res(1340) into Assignment: ^=(1371) at 0", "Insert CastExpression(1370) into Assignment: ^=(1371) at 1", "Insert ArrayType: byte[](551) into ArrayCreation(553) at 0", "Insert SimpleName: cnt(552) into ArrayCreation(553) at 1", "Insert ThisExpression(825) into FieldAccess(827) at 0", "Insert SimpleName: modifiedTime(826) into FieldAccess(827) at 1", "Insert SimpleName: modifiedTime2(1082) into InfixExpression: -(1084) at 0", "Insert SimpleName: modifiedTime1(1083) into InfixExpression: -(1084) at 1", "Insert PrimitiveType: int(1341) into CastExpression(1370) at 0", "Insert ParenthesizedExpression(1369) into CastExpression(1370) at 1", "Insert PrimitiveType: byte(549) into ArrayType: byte[](551) at 0", "Insert Dimension(550) into ArrayType: byte[](551) at 1", "Insert InfixExpression: <<(1368) into ParenthesizedExpression(1369) at 0", "Insert InfixExpression: <<(1360) into InfixExpression: <<(1368) at 0", "Insert InfixExpression: +(1367) into InfixExpression: <<(1368) at 1", "Insert InfixExpression: <<(1352) into InfixExpression: <<(1360) at 0", "Insert InfixExpression: +(1359) into InfixExpression: <<(1360) at 1", "Insert NumberLiteral: 8(1361) into InfixExpression: +(1367) at 0", "Insert ArrayAccess(1366) into InfixExpression: +(1367) at 1", "Insert ArrayAccess(1344) into InfixExpression: <<(1352) at 0", "Insert InfixExpression: +(1351) into InfixExpression: <<(1352) at 1", "Insert NumberLiteral: 16(1353) into InfixExpression: +(1359) at 0", "Insert ArrayAccess(1358) into InfixExpression: +(1359) at 1", "Insert SimpleName: signature(1362) into ArrayAccess(1366) at 0", "Insert InfixExpression: +(1365) into ArrayAccess(1366) at 1", "Insert SimpleName: signature(1342) into ArrayAccess(1344) at 0", "Insert SimpleName: i(1343) into ArrayAccess(1344) at 1", "Insert NumberLiteral: 24(1345) into InfixExpression: +(1351) at 0", "Insert ArrayAccess(1350) into InfixExpression: +(1351) at 1", "Insert SimpleName: signature(1354) into ArrayAccess(1358) at 0", "Insert InfixExpression: +(1357) into ArrayAccess(1358) at 1", "Insert SimpleName: i(1363) into InfixExpression: +(1365) at 0", "Insert NumberLiteral: 3(1364) into InfixExpression: +(1365) at 1", "Insert SimpleName: signature(1346) into ArrayAccess(1350) at 0", "Insert InfixExpression: +(1349) into ArrayAccess(1350) at 1", "Insert SimpleName: i(1355) into InfixExpression: +(1357) at 0", "Insert NumberLiteral: 2(1356) into InfixExpression: +(1357) at 1", "Insert SimpleName: i(1347) into InfixExpression: +(1349) at 0", "Insert NumberLiteral: 1(1348) into InfixExpression: +(1349) at 1", "Delete NumberLiteral: 0(648)", "Delete ReturnStatement(649)", "Delete NumberLiteral: 0(863)", "Delete ReturnStatement(864)", "Delete Block(1038)"]}}, {"CrawlDbReducer_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS SimpleName: signature to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ArrayType: byte[] to VariableDeclarationStatement at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS Dimension to ArrayType: byte[] at 1", "INS NullLiteral to VariableDeclarationFragment at 1"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 15", "MOV ExpressionStatement to SwitchStatement at 19"]}, {"root": "INS ExpressionStatement to SwitchStatement at 8", "operations": ["INS ExpressionStatement to SwitchStatement at 8", "INS SimpleName: result to MethodInvocation at 0", "INS SimpleName: setSignature to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS NullLiteral to MethodInvocation at 2"]}, {"root": "INS IfStatement to SwitchStatement at 12", "operations": ["INS InfixExpression: == to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getSignature to MethodInvocation at 1", "INS SimpleName: highest to MethodInvocation at 0", "INS SimpleName: setSignature to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: highest to MethodInvocation at 0", "INS IfStatement to SwitchStatement at 12", "INS SimpleName: signature to MethodInvocation at 2", "INS ExpressionStatement to IfStatement at 1", "INS MethodInvocation to InfixExpression: == at 0"]}, {"root": "INS IfStatement to SwitchStatement at 18", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getSignature to MethodInvocation at 1", "INS SimpleName: old to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS NullLiteral to InfixExpression: != at 1", "INS IfStatement to SwitchStatement at 18", "INS ExpressionStatement to IfStatement at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: result to MethodInvocation at 0", "INS SimpleName: setSignature to MethodInvocation at 1", "INS SimpleName: old to InfixExpression: != at 0"]}, {"root": "INS IfStatement to SwitchStatement at 23", "operations": ["INS InfixExpression: != to IfStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getSignature to MethodInvocation at 1", "INS ExpressionStatement to IfStatement at 1", "INS NullLiteral to InfixExpression: != at 1", "INS IfStatement to SwitchStatement at 23", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setSignature to MethodInvocation at 1", "INS SimpleName: old to InfixExpression: != at 0", "INS SimpleName: result to MethodInvocation at 0", "INS SimpleName: old to MethodInvocation at 0"]}, {"root": "INS SwitchCase to SwitchStatement at 8", "operations": ["INS SwitchCase to SwitchStatement at 8", "INS QualifiedName: CrawlDatum.STATUS_SIGNATURE to SwitchCase at 0"]}, {"root": "INS ExpressionStatement to SwitchStatement at 9", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to SwitchStatement at 9", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getSignature to MethodInvocation at 1", "INS SimpleName: signature to Assignment: = at 0", "INS SimpleName: datum to MethodInvocation at 0"]}]}}, {"CrawlDbReducer_diff": {"operations": ["Insert VariableDeclarationStatement(94) into Block(332) at 2", "Move ExpressionStatement(216) into SwitchStatement(311) at 19", "Move ExpressionStatement(241) into SwitchStatement(311) at 15", "Insert ArrayType: byte[](90) into VariableDeclarationStatement(94) at 0", "Insert VariableDeclarationFragment(93) into VariableDeclarationStatement(94) at 1", "Insert ExpressionStatement(213) into SwitchStatement(311) at 8", "Insert IfStatement(231) into SwitchStatement(311) at 12", "Insert IfStatement(258) into SwitchStatement(311) at 18", "Insert IfStatement(294) into SwitchStatement(311) at 23", "Insert PrimitiveType: byte(88) into ArrayType: byte[](90) at 0", "Insert Dimension(89) into ArrayType: byte[](90) at 1", "Insert SimpleName: signature(91) into VariableDeclarationFragment(93) at 0", "Insert NullLiteral(92) into VariableDeclarationFragment(93) at 1", "Insert MethodInvocation(212) into ExpressionStatement(213) at 0", "Insert InfixExpression: ==(225) into IfStatement(231) at 0", "Insert ExpressionStatement(230) into IfStatement(231) at 1", "Insert InfixExpression: !=(250) into IfStatement(258) at 0", "Insert ExpressionStatement(257) into IfStatement(258) at 1", "Insert InfixExpression: !=(286) into IfStatement(294) at 0", "Insert ExpressionStatement(293) into IfStatement(294) at 1", "Insert SwitchCase(153) into SwitchStatement(160) at 8", "Insert ExpressionStatement(159) into SwitchStatement(160) at 9", "Insert SimpleName: result(209) into MethodInvocation(212) at 0", "Insert SimpleName: setSignature(210) into MethodInvocation(212) at 1", "Insert NullLiteral(211) into MethodInvocation(212) at 2", "Insert MethodInvocation(223) into InfixExpression: ==(225) at 0", "Insert NullLiteral(224) into InfixExpression: ==(225) at 1", "Insert MethodInvocation(229) into ExpressionStatement(230) at 0", "Insert SimpleName: old(248) into InfixExpression: !=(250) at 0", "Insert NullLiteral(249) into InfixExpression: !=(250) at 1", "Insert MethodInvocation(256) into ExpressionStatement(257) at 0", "Insert SimpleName: old(284) into InfixExpression: !=(286) at 0", "Insert NullLiteral(285) into InfixExpression: !=(286) at 1", "Insert MethodInvocation(292) into ExpressionStatement(293) at 0", "Insert QualifiedName: CrawlDatum.STATUS_SIGNATURE(152) into SwitchCase(153) at 0", "Insert Assignment: =(158) into ExpressionStatement(159) at 0", "Insert SimpleName: highest(221) into MethodInvocation(223) at 0", "Insert SimpleName: getSignature(222) into MethodInvocation(223) at 1", "Insert SimpleName: highest(226) into MethodInvocation(229) at 0", "Insert SimpleName: setSignature(227) into MethodInvocation(229) at 1", "Insert SimpleName: signature(228) into MethodInvocation(229) at 2", "Insert SimpleName: result(251) into MethodInvocation(256) at 0", "Insert SimpleName: setSignature(252) into MethodInvocation(256) at 1", "Insert MethodInvocation(255) into MethodInvocation(256) at 2", "Insert SimpleName: result(287) into MethodInvocation(292) at 0", "Insert SimpleName: setSignature(288) into MethodInvocation(292) at 1", "Insert MethodInvocation(291) into MethodInvocation(292) at 2", "Insert SimpleName: signature(154) into Assignment: =(158) at 0", "Insert MethodInvocation(157) into Assignment: =(158) at 1", "Insert SimpleName: old(253) into MethodInvocation(255) at 0", "Insert SimpleName: getSignature(254) into MethodInvocation(255) at 1", "Insert SimpleName: old(289) into MethodInvocation(291) at 0", "Insert SimpleName: getSignature(290) into MethodInvocation(291) at 1", "Insert SimpleName: datum(155) into MethodInvocation(157) at 0", "Insert SimpleName: getSignature(156) into MethodInvocation(157) at 1"]}}, {"Fetcher_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: org.apache.nutch.crawl.SignatureFactory to ImportDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: parsing to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "UPDATE from DIGEST_KEY to SIGNATURE_KEY", "operations": ["UPD SimpleName: DIGEST_KEY from DIGEST_KEY to SIGNATURE_KEY"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS SimpleName: job to MethodInvocation at 0", "INS SimpleName: parsing to MethodInvocation at 3", "INS SimpleName: setBoolean to MethodInvocation at 1", "INS ExpressionStatement to Block at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"fetcher.parse\" to MethodInvocation at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 5", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS BooleanLiteral: true to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 5", "INS SimpleName: parsing to VariableDeclarationFragment at 0"]}, {"root": "INS ExpressionStatement to Block at 7", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setInt to MethodInvocation at 1", "INS SimpleName: conf to MethodInvocation at 0", "INS ExpressionStatement to Block at 7", "INS SimpleName: threads to MethodInvocation at 3", "INS StringLiteral: \"fetcher.threads.fetch\" to MethodInvocation at 2"]}, {"root": "INS IfStatement to Block at 8", "operations": ["INS StringLiteral: \"fetcher.parse\" to MethodInvocation at 2", "INS SimpleName: parsing to PrefixExpression: ! at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to Block at 8", "INS SimpleName: conf to MethodInvocation at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: setBoolean to MethodInvocation at 1", "INS SimpleName: parsing to MethodInvocation at 3"]}, {"root": "UPDATE from \"Usage: Fetcher <segment> [-threads n]\" to \"Usage: Fetcher <segment> [-threads n] [-noParsing]\"", "operations": ["UPD StringLiteral: \"Usage: Fetcher <segment> [-threads n]\" from \"Usage: Fetcher <segment> [-threads n]\" to \"Usage: Fetcher <segment> [-threads n] [-noParsing]\""]}, {"root": "INS SimpleName: parsing to MethodInvocation at 4", "operations": ["INS SimpleName: parsing to MethodInvocation at 4"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS ArrayType: byte[] to VariableDeclarationStatement at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: content to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: parse to MethodInvocation at 3", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: getConf to MethodInvocation at 0", "INS SimpleName: signature to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: calculate to MethodInvocation at 1", "INS SimpleName: SignatureFactory to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getSignature to MethodInvocation at 1", "INS Dimension to ArrayType: byte[] at 1"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: SIGNATURE_KEY to MethodInvocation at 2", "INS SimpleName: parse to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: StringUtil to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getMetadata to MethodInvocation at 1", "INS SimpleName: getData to MethodInvocation at 1", "INS SimpleName: setProperty to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: toHexString to MethodInvocation at 1", "INS SimpleName: signature to MethodInvocation at 2", "INS ExpressionStatement to Block at 4"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS ExpressionStatement to Block at 5", "INS SimpleName: setSignature to MethodInvocation at 1", "INS SimpleName: signature to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: datum to MethodInvocation at 0"]}, {"root": "INS IfStatement to IfStatement at 2", "operations": ["INS IfStatement to IfStatement at 2", "INS ArrayAccess to MethodInvocation at 0", "INS StringLiteral: \"-noParsing\" to MethodInvocation at 2", "INS MethodInvocation to IfStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: parsing to Assignment: = at 0", "INS BooleanLiteral: false to Assignment: = at 1", "INS SimpleName: i to ArrayAccess at 1", "INS ExpressionStatement to IfStatement at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: args to ArrayAccess at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: printStackTrace to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: e to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: e to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: printStackTrace to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS SimpleName: getEmptyParse to MethodInvocation at 1", "INS SimpleName: parseStatus to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: e to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: printStackTrace to MethodInvocation at 1"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: content", "DEL SimpleName: DIGEST_KEY", "DEL SimpleName: setProperty", "DEL SimpleName: digest", "DEL SimpleName: toString", "DEL MethodInvocation", "DEL SimpleName: content", "DEL SimpleName: MD5Hash", "DEL SimpleName: getContent", "DEL SimpleName: getMetadata", "DEL MethodInvocation", "DEL MethodInvocation"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}]}}, {"Fetcher_diff": {"operations": ["Insert ImportDeclaration(23) into CompilationUnit(1498) at 5", "Insert QualifiedName: org.apache.nutch.crawl.SignatureFactory(22) into ImportDeclaration(23) at 0", "Insert SingleVariableDeclaration(1232) into MethodDeclaration(1351) at 5", "Update SimpleName: DIGEST_KEY(62) to SIGNATURE_KEY", "Insert PrimitiveType: boolean(1230) into SingleVariableDeclaration(1232) at 0", "Insert SimpleName: parsing(1231) into SingleVariableDeclaration(1232) at 1", "Insert ExpressionStatement(1276) into Block(1350) at 5", "Insert VariableDeclarationStatement(1421) into Block(1495) at 5", "Insert ExpressionStatement(1468) into Block(1495) at 7", "Insert IfStatement(1478) into Block(1495) at 8", "Insert MethodInvocation(1275) into ExpressionStatement(1276) at 0", "Insert PrimitiveType: boolean(1417) into VariableDeclarationStatement(1421) at 0", "Insert VariableDeclarationFragment(1420) into VariableDeclarationStatement(1421) at 1", "Insert MethodInvocation(1467) into ExpressionStatement(1468) at 0", "Insert PrefixExpression: !(1470) into IfStatement(1478) at 0", "Insert Block(1477) into IfStatement(1478) at 1", "Insert SimpleName: job(1271) into MethodInvocation(1275) at 0", "Insert SimpleName: setBoolean(1272) into MethodInvocation(1275) at 1", "Insert StringLiteral: \"fetcher.parse\"(1273) into MethodInvocation(1275) at 2", "Insert SimpleName: parsing(1274) into MethodInvocation(1275) at 3", "Update StringLiteral: \"Usage: Fetcher <segment> [-threads n]\"(1327) to \"Usage: Fetcher <segment> [-threads n] [-noParsing]\"", "Insert SimpleName: parsing(1418) into VariableDeclarationFragment(1420) at 0", "Insert BooleanLiteral: true(1419) into VariableDeclarationFragment(1420) at 1", "Insert SimpleName: conf(1463) into MethodInvocation(1467) at 0", "Insert SimpleName: setInt(1464) into MethodInvocation(1467) at 1", "Insert StringLiteral: \"fetcher.threads.fetch\"(1465) into MethodInvocation(1467) at 2", "Insert SimpleName: threads(1466) into MethodInvocation(1467) at 3", "Insert SimpleName: parsing(1469) into PrefixExpression: !(1470) at 0", "Insert ExpressionStatement(1476) into Block(1477) at 0", "Insert SimpleName: parsing(1492) into MethodInvocation(1493) at 4", "Insert VariableDeclarationStatement(823) into Block(842) at 3", "Insert ExpressionStatement(836) into Block(842) at 4", "Insert ExpressionStatement(841) into Block(842) at 5", "Insert IfStatement(1459) into IfStatement(1460) at 2", "Insert MethodInvocation(1475) into ExpressionStatement(1476) at 0", "Insert ExpressionStatement(616) into Block(626) at 0", "Insert ArrayType: byte[](811) into VariableDeclarationStatement(823) at 0", "Insert VariableDeclarationFragment(822) into VariableDeclarationStatement(823) at 1", "Insert MethodInvocation(835) into ExpressionStatement(836) at 0", "Insert MethodInvocation(840) into ExpressionStatement(841) at 0", "Insert ExpressionStatement(874) into Block(884) at 0", "Insert MethodInvocation(1454) into IfStatement(1459) at 0", "Insert ExpressionStatement(1458) into IfStatement(1459) at 1", "Insert SimpleName: conf(1471) into MethodInvocation(1475) at 0", "Insert SimpleName: setBoolean(1472) into MethodInvocation(1475) at 1", "Insert StringLiteral: \"fetcher.parse\"(1473) into MethodInvocation(1475) at 2", "Insert SimpleName: parsing(1474) into MethodInvocation(1475) at 3", "Insert MethodInvocation(615) into ExpressionStatement(616) at 0", "Insert PrimitiveType: byte(809) into ArrayType: byte[](811) at 0", "Insert Dimension(810) into ArrayType: byte[](811) at 1", "Insert SimpleName: signature(812) into VariableDeclarationFragment(822) at 0", "Insert MethodInvocation(821) into VariableDeclarationFragment(822) at 1", "Insert MethodInvocation(828) into MethodInvocation(835) at 0", "Insert SimpleName: setProperty(829) into MethodInvocation(835) at 1", "Insert SimpleName: SIGNATURE_KEY(830) into MethodInvocation(835) at 2", "Insert MethodInvocation(834) into MethodInvocation(835) at 3", "Insert SimpleName: datum(837) into MethodInvocation(840) at 0", "Insert SimpleName: setSignature(838) into MethodInvocation(840) at 1", "Insert SimpleName: signature(839) into MethodInvocation(840) at 2", "Insert MethodInvocation(873) into ExpressionStatement(874) at 0", "Insert ArrayAccess(1451) into MethodInvocation(1454) at 0", "Insert SimpleName: equals(1452) into MethodInvocation(1454) at 1", "Insert StringLiteral: \"-noParsing\"(1453) into MethodInvocation(1454) at 2", "Insert Assignment: =(1457) into ExpressionStatement(1458) at 0", "Insert SimpleName: e(613) into MethodInvocation(615) at 0", "Insert SimpleName: printStackTrace(614) into MethodInvocation(615) at 1", "Insert MethodInvocation(817) into MethodInvocation(821) at 0", "Insert SimpleName: calculate(818) into MethodInvocation(821) at 1", "Insert SimpleName: content(819) into MethodInvocation(821) at 2", "Insert SimpleName: parse(820) into MethodInvocation(821) at 3", "Insert MethodInvocation(826) into MethodInvocation(828) at 0", "Insert SimpleName: getMetadata(827) into MethodInvocation(828) at 1", "Insert SimpleName: StringUtil(831) into MethodInvocation(834) at 0", "Insert SimpleName: toHexString(832) into MethodInvocation(834) at 1", "Insert SimpleName: signature(833) into MethodInvocation(834) at 2", "Insert SimpleName: e(871) into MethodInvocation(873) at 0", "Insert SimpleName: printStackTrace(872) into MethodInvocation(873) at 1", "Insert SimpleName: args(1449) into ArrayAccess(1451) at 0", "Insert SimpleName: i(1450) into ArrayAccess(1451) at 1", "Insert SimpleName: parsing(1455) into Assignment: =(1457) at 0", "Insert BooleanLiteral: false(1456) into Assignment: =(1457) at 1", "Insert MethodInvocation(804) into Assignment: =(805) at 1", "Insert SimpleName: SignatureFactory(813) into MethodInvocation(817) at 0", "Insert SimpleName: getSignature(814) into MethodInvocation(817) at 1", "Insert MethodInvocation(816) into MethodInvocation(817) at 2", "Insert SimpleName: parse(824) into MethodInvocation(826) at 0", "Insert SimpleName: getData(825) into MethodInvocation(826) at 1", "Insert ExpressionStatement(312) into Block(323) at 0", "Insert SimpleName: parseStatus(802) into MethodInvocation(804) at 0", "Insert SimpleName: getEmptyParse(803) into MethodInvocation(804) at 1", "Insert SimpleName: getConf(815) into MethodInvocation(816) at 0", "Insert MethodInvocation(311) into ExpressionStatement(312) at 0", "Insert SimpleName: e(309) into MethodInvocation(311) at 0", "Insert SimpleName: printStackTrace(310) into MethodInvocation(311) at 1", "Delete SimpleName: content(711)", "Delete SimpleName: getMetadata(712)", "Delete MethodInvocation(713)", "Delete SimpleName: setProperty(714)", "Delete SimpleName: DIGEST_KEY(715)", "Delete SimpleName: MD5Hash(716)", "Delete SimpleName: digest(717)", "Delete SimpleName: content(718)", "Delete SimpleName: getContent(719)", "Delete MethodInvocation(720)", "Delete MethodInvocation(721)", "Delete SimpleName: toString(722)", "Delete MethodInvocation(723)", "Delete MethodInvocation(724)", "Delete ExpressionStatement(725)", "Delete NullLiteral(807)"]}}, {"Indexer_cluster": {"actions": [{"root": "UPDATE from Fetcher.DIGEST_KEY to Fetcher.SIGNATURE_KEY", "operations": ["UPD QualifiedName: Fetcher.DIGEST_KEY from Fetcher.DIGEST_KEY to Fetcher.SIGNATURE_KEY"]}]}}, {"Indexer_diff": {"operations": ["Update QualifiedName: Fetcher.DIGEST_KEY(745) to Fetcher.SIGNATURE_KEY"]}}, {"ParseOutputFormat_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS ImportDeclaration to CompilationUnit at 7", "INS QualifiedName: org.apache.nutch.util.StringUtil to ImportDeclaration at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS SimpleName: getProperty to MethodInvocation at 1", "INS SimpleName: getData to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: String to SimpleType: String at 0", "INS QualifiedName: Fetcher.SIGNATURE_KEY to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 3", "INS MethodInvocation to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: parse to MethodInvocation at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: getMetadata to MethodInvocation at 1", "INS SimpleName: sig to VariableDeclarationFragment at 0"]}, {"root": "INS IfStatement to Block at 4", "operations": ["INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: d to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: d to MethodInvocation at 3", "INS ExpressionStatement to Block at 2", "INS SimpleName: setSignature to MethodInvocation at 1", "INS SimpleName: fromHexString to MethodInvocation at 1", "INS SimpleName: signature to VariableDeclarationFragment at 0", "INS IfStatement to Block at 1", "INS SimpleName: StringUtil to MethodInvocation at 0", "INS SimpleName: CrawlDatum to SimpleType: CrawlDatum at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: d to VariableDeclarationFragment at 0", "INS ArrayType: byte[] to VariableDeclarationStatement at 0", "INS SimpleName: signature to InfixExpression: != at 0", "INS SimpleName: sig to MethodInvocation at 2", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to IfStatement at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleName: key to MethodInvocation at 2", "INS IfStatement to Block at 4", "INS SimpleName: CrawlDatum to SimpleType: CrawlDatum at 0", "INS SimpleType: CrawlDatum to ClassInstanceCreation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: CrawlDatum to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: CrawlDatum.STATUS_SIGNATURE to ClassInstanceCreation at 1", "INS NumberLiteral: 0.0f to ClassInstanceCreation at 2", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: crawlOut to MethodInvocation at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: signature to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: sig to InfixExpression: != at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}]}}, {"ParseOutputFormat_diff": {"operations": ["Insert ImportDeclaration(27) into CompilationUnit(404) at 7", "Insert QualifiedName: org.apache.nutch.util.StringUtil(26) into ImportDeclaration(27) at 0", "Insert VariableDeclarationStatement(236) into Block(373) at 3", "Insert IfStatement(277) into Block(373) at 4", "Insert SimpleType: String(225) into VariableDeclarationStatement(236) at 0", "Insert VariableDeclarationFragment(235) into VariableDeclarationStatement(236) at 1", "Insert InfixExpression: !=(239) into IfStatement(277) at 0", "Insert Block(276) into IfStatement(277) at 1", "Insert SimpleName: String(224) into SimpleType: String(225) at 0", "Insert SimpleName: sig(226) into VariableDeclarationFragment(235) at 0", "Insert MethodInvocation(234) into VariableDeclarationFragment(235) at 1", "Insert SimpleName: sig(237) into InfixExpression: !=(239) at 0", "Insert NullLiteral(238) into InfixExpression: !=(239) at 1", "Insert VariableDeclarationStatement(249) into Block(276) at 0", "Insert IfStatement(275) into Block(276) at 1", "Insert MethodInvocation(231) into MethodInvocation(234) at 0", "Insert SimpleName: getProperty(232) into MethodInvocation(234) at 1", "Insert QualifiedName: Fetcher.SIGNATURE_KEY(233) into MethodInvocation(234) at 2", "Insert ArrayType: byte[](242) into VariableDeclarationStatement(249) at 0", "Insert VariableDeclarationFragment(248) into VariableDeclarationStatement(249) at 1", "Insert InfixExpression: !=(252) into IfStatement(275) at 0", "Insert Block(274) into IfStatement(275) at 1", "Insert MethodInvocation(229) into MethodInvocation(231) at 0", "Insert SimpleName: getMetadata(230) into MethodInvocation(231) at 1", "Insert PrimitiveType: byte(240) into ArrayType: byte[](242) at 0", "Insert Dimension(241) into ArrayType: byte[](242) at 1", "Insert SimpleName: signature(243) into VariableDeclarationFragment(248) at 0", "Insert MethodInvocation(247) into VariableDeclarationFragment(248) at 1", "Insert SimpleName: signature(250) into InfixExpression: !=(252) at 0", "Insert NullLiteral(251) into InfixExpression: !=(252) at 1", "Insert VariableDeclarationStatement(262) into Block(274) at 0", "Insert ExpressionStatement(267) into Block(274) at 1", "Insert ExpressionStatement(273) into Block(274) at 2", "Insert SimpleName: parse(227) into MethodInvocation(229) at 0", "Insert SimpleName: getData(228) into MethodInvocation(229) at 1", "Insert SimpleName: StringUtil(244) into MethodInvocation(247) at 0", "Insert SimpleName: fromHexString(245) into MethodInvocation(247) at 1", "Insert SimpleName: sig(246) into MethodInvocation(247) at 2", "Insert SimpleType: CrawlDatum(254) into VariableDeclarationStatement(262) at 0", "Insert VariableDeclarationFragment(261) into VariableDeclarationStatement(262) at 1", "Insert MethodInvocation(266) into ExpressionStatement(267) at 0", "Insert MethodInvocation(272) into ExpressionStatement(273) at 0", "Insert SimpleName: CrawlDatum(253) into SimpleType: CrawlDatum(254) at 0", "Insert SimpleName: d(255) into VariableDeclarationFragment(261) at 0", "Insert ClassInstanceCreation(260) into VariableDeclarationFragment(261) at 1", "Insert SimpleName: d(263) into MethodInvocation(266) at 0", "Insert SimpleName: setSignature(264) into MethodInvocation(266) at 1", "Insert SimpleName: signature(265) into MethodInvocation(266) at 2", "Insert SimpleName: crawlOut(268) into MethodInvocation(272) at 0", "Insert SimpleName: append(269) into MethodInvocation(272) at 1", "Insert SimpleName: key(270) into MethodInvocation(272) at 2", "Insert SimpleName: d(271) into MethodInvocation(272) at 3", "Insert SimpleType: CrawlDatum(257) into ClassInstanceCreation(260) at 0", "Insert QualifiedName: CrawlDatum.STATUS_SIGNATURE(258) into ClassInstanceCreation(260) at 1", "Insert NumberLiteral: 0.0f(259) into ClassInstanceCreation(260) at 2", "Insert SimpleName: CrawlDatum(256) into SimpleType: CrawlDatum(257) at 0"]}}, {"ParseSegment_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: org.apache.nutch.crawl.SignatureFactory to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: org.apache.nutch.fetcher.Fetcher to ImportDeclaration at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: job to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: setConf to MethodInvocation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS SimpleName: getConf to MethodInvocation at 0", "INS Dimension to ArrayType: byte[] at 1", "INS VariableDeclarationStatement to Block at 4", "INS SimpleName: signature to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: parse to MethodInvocation at 3", "INS SimpleName: calculate to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getSignature to MethodInvocation at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: content to MethodInvocation at 2", "INS SimpleName: SignatureFactory to MethodInvocation at 0", "INS ArrayType: byte[] to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS ExpressionStatement to Block at 5", "INS SimpleName: StringUtil to MethodInvocation at 0", "INS SimpleName: getData to MethodInvocation at 1", "INS SimpleName: toHexString to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: Fetcher.SIGNATURE_KEY to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: parse to MethodInvocation at 0", "INS SimpleName: signature to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: setProperty to MethodInvocation at 1", "INS SimpleName: getMetadata to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to SuperConstructorInvocation at 0", "operations": ["INS MethodInvocation to SuperConstructorInvocation at 0", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: NutchConf to MethodInvocation at 0"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}]}}, {"ParseSegment_diff": {"operations": ["Insert ImportDeclaration(15) into CompilationUnit(435) at 1", "Insert ImportDeclaration(17) into CompilationUnit(435) at 2", "Insert QualifiedName: org.apache.nutch.crawl.SignatureFactory(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: org.apache.nutch.fetcher.Fetcher(16) into ImportDeclaration(17) at 0", "Insert ExpressionStatement(86) into Block(87) at 0", "Insert VariableDeclarationStatement(174) into Block(219) at 4", "Insert ExpressionStatement(187) into Block(219) at 5", "Insert MethodInvocation(62) into SuperConstructorInvocation(63) at 0", "Insert MethodInvocation(85) into ExpressionStatement(86) at 0", "Insert ArrayType: byte[](162) into VariableDeclarationStatement(174) at 0", "Insert VariableDeclarationFragment(173) into VariableDeclarationStatement(174) at 1", "Insert MethodInvocation(186) into ExpressionStatement(187) at 0", "Insert SimpleName: NutchConf(60) into MethodInvocation(62) at 0", "Insert SimpleName: get(61) into MethodInvocation(62) at 1", "Insert SimpleName: setConf(83) into MethodInvocation(85) at 0", "Insert SimpleName: job(84) into MethodInvocation(85) at 1", "Insert PrimitiveType: byte(160) into ArrayType: byte[](162) at 0", "Insert Dimension(161) into ArrayType: byte[](162) at 1", "Insert SimpleName: signature(163) into VariableDeclarationFragment(173) at 0", "Insert MethodInvocation(172) into VariableDeclarationFragment(173) at 1", "Insert MethodInvocation(179) into MethodInvocation(186) at 0", "Insert SimpleName: setProperty(180) into MethodInvocation(186) at 1", "Insert QualifiedName: Fetcher.SIGNATURE_KEY(181) into MethodInvocation(186) at 2", "Insert MethodInvocation(185) into MethodInvocation(186) at 3", "Insert MethodInvocation(168) into MethodInvocation(172) at 0", "Insert SimpleName: calculate(169) into MethodInvocation(172) at 1", "Insert SimpleName: content(170) into MethodInvocation(172) at 2", "Insert SimpleName: parse(171) into MethodInvocation(172) at 3", "Insert MethodInvocation(177) into MethodInvocation(179) at 0", "Insert SimpleName: getMetadata(178) into MethodInvocation(179) at 1", "Insert SimpleName: StringUtil(182) into MethodInvocation(185) at 0", "Insert SimpleName: toHexString(183) into MethodInvocation(185) at 1", "Insert SimpleName: signature(184) into MethodInvocation(185) at 2", "Insert SimpleName: SignatureFactory(164) into MethodInvocation(168) at 0", "Insert SimpleName: getSignature(165) into MethodInvocation(168) at 1", "Insert MethodInvocation(167) into MethodInvocation(168) at 2", "Insert SimpleName: parse(175) into MethodInvocation(177) at 0", "Insert SimpleName: getData(176) into MethodInvocation(177) at 1", "Insert SimpleName: getConf(166) into MethodInvocation(167) at 0", "Delete NullLiteral(56)"]}}, {"BasicIndexingFilter_cluster": {"actions": [{"root": "INS ParenthesizedExpression to VariableDeclarationFragment at 1", "operations": ["INS ConditionalExpression to ParenthesizedExpression at 0", "INS ArrayType: String[] to ArrayCreation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS ParenthesizedExpression to VariableDeclarationFragment at 1", "INS InfixExpression: != to ConditionalExpression at 0", "INS SimpleName: inlinks to InfixExpression: != at 0", "INS SimpleName: String to SimpleType: String at 0", "INS ArrayCreation to ConditionalExpression at 2", "INS Dimension to ArrayType: String[] at 1", "INS NumberLiteral: 0 to ArrayCreation at 1", "INS SimpleType: String to ArrayType: String[] at 0"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 1"]}]}}, {"BasicIndexingFilter_diff": {"operations": ["Insert ParenthesizedExpression(207) into VariableDeclarationFragment(208) at 1", "Insert ConditionalExpression(206) into ParenthesizedExpression(207) at 0", "Insert InfixExpression: !=(196) into ConditionalExpression(206) at 0", "Move MethodInvocation(196) into ConditionalExpression(206) at 1", "Insert ArrayCreation(205) into ConditionalExpression(206) at 2", "Insert SimpleName: inlinks(194) into InfixExpression: !=(196) at 0", "Insert NullLiteral(195) into InfixExpression: !=(196) at 1", "Insert ArrayType: String[](203) into ArrayCreation(205) at 0", "Insert NumberLiteral: 0(204) into ArrayCreation(205) at 1", "Insert SimpleType: String(201) into ArrayType: String[](203) at 0", "Insert Dimension(202) into ArrayType: String[](203) at 1", "Insert SimpleName: String(200) into SimpleType: String(201) at 0"]}}], "commit_stats": [{"total_files": 17, "deleted_files": 0, "testing": "False", "maintenance": "True", "build": "False"}]}