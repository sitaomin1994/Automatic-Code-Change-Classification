{"application": "apache-drill", "csha": "b55e2328d929df5d361c038f63fdeffadb0e544c", "files": [{"DefaultFrameTemplate_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: org.apache.drill.exec.ops.OperatorContext to ImportDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 6", "INS SimpleType: VectorContainer to FieldDeclaration at 1", "INS SimpleName: VectorContainer to SimpleType: VectorContainer at 0", "INS SimpleName: internal to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleName: lagCopiedToInternal to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS PrimitiveType: boolean to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 7"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS SimpleName: frameLastRow to VariableDeclarationFragment at 0", "INS PrimitiveType: int to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 10"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS WildcardType: ? to ParameterizedType: VectorWrapper<?> at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: allocateNew to MethodInvocation at 1", "INS SimpleName: w to SingleVariableDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleType: ValueVector to VariableDeclarationStatement at 0", "INS ParameterizedType: VectorWrapper<?> to SingleVariableDeclaration at 0", "INS SimpleName: VectorWrapper to SimpleType: VectorWrapper at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: vv to VariableDeclarationFragment at 0", "INS Modifier: private to MethodDeclaration at 0", "INS EnhancedForStatement to Block at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: internal to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS SimpleName: container to EnhancedForStatement at 1", "INS SimpleType: VectorWrapper to ParameterizedType: VectorWrapper<?> at 0", "INS SimpleName: ValueVector to SimpleType: ValueVector at 0", "INS Block to MethodDeclaration at 3", "INS SimpleName: addOrGet to MethodInvocation at 1", "INS SimpleName: getField to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: vv to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: w to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: allocateInternal to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS SimpleName: current to MethodInvocation at 1", "INS SimpleType: SchemaChangeException to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: current to SingleVariableDeclaration at 2", "INS ExpressionStatement to Block at 2", "INS SimpleName: copyFirstValueToInternal to MethodInvocation at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: container to MethodInvocation at 2", "INS SimpleName: newPartition to MethodDeclaration at 2", "INS SimpleName: internal to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS Modifier: final to SingleVariableDeclaration at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: currentRow to SingleVariableDeclaration at 2", "INS SimpleName: WindowDataBatch to SimpleType: WindowDataBatch at 0", "INS SimpleName: SchemaChangeException to SimpleType: SchemaChangeException at 0", "INS SimpleName: currentRow to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: current to MethodInvocation at 1", "INS ExpressionStatement to Block at 3", "INS Block to MethodDeclaration at 6", "INS SimpleType: WindowDataBatch to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 4", "INS SimpleName: setupPartition to MethodInvocation at 0", "INS SimpleName: setupCopyFirstValue to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 17", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 17", "INS SimpleName: internal to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: zeroVectors to MethodInvocation at 1", "INS Modifier: private to MethodDeclaration at 0", "INS ExpressionStatement to Block at 2", "INS BooleanLiteral: false to Assignment: = at 1", "INS SimpleName: cleanPartition to MethodDeclaration at 2", "INS Assignment: = to ExpressionStatement at 0", "INS Block to MethodDeclaration at 3", "INS SimpleName: lagCopiedToInternal to Assignment: = at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS ExpressionStatement to Block at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS SimpleName: row to InfixExpression: - at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setupCopyPrev to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS ExpressionStatement to Block at 0", "INS InfixExpression: - to MethodInvocation at 3", "INS SimpleName: trace to MethodInvocation at 1", "INS Block to MethodDeclaration at 5", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: VectorAccessible to SingleVariableDeclaration at 0", "INS SimpleName: internal to MethodInvocation at 2", "INS InfixExpression: - to MethodInvocation at 1", "INS SimpleName: copyPrevToInternal to MethodDeclaration at 2", "INS SimpleName: copyPrev to MethodInvocation at 0", "INS SimpleName: row to SingleVariableDeclaration at 1", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS BooleanLiteral: true to Assignment: = at 1", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS SimpleName: logger to MethodInvocation at 0", "INS ExpressionStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: VectorAccessible to SimpleType: VectorAccessible at 0", "INS SimpleName: current to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: lagCopiedToInternal to Assignment: = at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS StringLiteral: \"copying {} into internal\" to MethodInvocation at 2", "INS SimpleName: current to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS SimpleName: row to InfixExpression: - at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: lagCopiedToInternal to Assignment: = at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS ExpressionStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS NumberLiteral: 0 to MethodInvocation at 1", "INS SimpleName: lagCopiedToInternal to IfStatement at 0", "INS SimpleName: setupCopyFromInternal to MethodInvocation at 0", "INS Block to MethodDeclaration at 3", "INS Block to IfStatement at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: copyPrevFromInternal to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: container to MethodInvocation at 2", "INS SimpleName: copyFromInternal to MethodInvocation at 0", "INS BooleanLiteral: false to Assignment: = at 1", "INS SimpleName: internal to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS NumberLiteral: 0 to MethodInvocation at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 21", "operations": ["INS PrimitiveType: void to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS SimpleName: processRow to MethodDeclaration at 2", "INS Modifier: private to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS SimpleName: row to SingleVariableDeclaration at 2", "INS Modifier: final to SingleVariableDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 29", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 29", "INS Modifier: public to MethodDeclaration at 1", "INS TagElement to Javadoc at 0", "INS Modifier: abstract to MethodDeclaration at 2", "INS SimpleName: evaluatePeer to MethodDeclaration at 4", "INS TextElement: called once for each peer row of the current frame. to TagElement at 0", "INS PrimitiveType: void to MethodDeclaration at 3", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 31", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: VectorAccessible to SingleVariableDeclaration at 1", "INS SimpleName: outgoing to SingleVariableDeclaration at 2", "INS SimpleName: Named to SingleMemberAnnotation at 0", "INS Modifier: abstract to MethodDeclaration at 1", "INS SimpleName: setupReadLastValue to MethodDeclaration at 3", "INS SimpleType: SchemaChangeException to MethodDeclaration at 6", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS SimpleType: VectorAccessible to SingleVariableDeclaration at 1", "INS SimpleName: SchemaChangeException to SimpleType: SchemaChangeException at 0", "INS Modifier: public to MethodDeclaration at 0", "INS StringLiteral: \"outgoing\" to SingleMemberAnnotation at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS StringLiteral: \"incoming\" to SingleMemberAnnotation at 1", "INS SimpleName: VectorAccessible to SimpleType: VectorAccessible at 0", "INS SimpleName: VectorAccessible to SimpleType: VectorAccessible at 0", "INS MethodDeclaration to TypeDeclaration: class at 31", "INS SimpleName: Named to SingleMemberAnnotation at 0", "INS SimpleName: incoming to SingleVariableDeclaration at 2", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 32", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: outIndex to SingleVariableDeclaration at 2", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Modifier: abstract to MethodDeclaration at 1", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Named to SingleMemberAnnotation at 0", "INS StringLiteral: \"index\" to SingleMemberAnnotation at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS SimpleName: Named to SingleMemberAnnotation at 0", "INS StringLiteral: \"outIndex\" to SingleMemberAnnotation at 1", "INS MethodDeclaration to TypeDeclaration: class at 32", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: index to SingleVariableDeclaration at 2", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: writeLastValue to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 33", "operations": ["INS SimpleName: VectorAccessible to SimpleType: VectorAccessible at 0", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Named to SingleMemberAnnotation at 0", "INS StringLiteral: \"outgoing\" to SingleMemberAnnotation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: SchemaChangeException to SimpleType: SchemaChangeException at 0", "INS MethodDeclaration to TypeDeclaration: class at 33", "INS SimpleName: incoming to SingleVariableDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleType: SchemaChangeException to MethodDeclaration at 6", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: setupCopyFirstValue to MethodDeclaration at 3", "INS SimpleName: VectorAccessible to SimpleType: VectorAccessible at 0", "INS SimpleType: VectorAccessible to SingleVariableDeclaration at 1", "INS Modifier: abstract to MethodDeclaration at 1", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS StringLiteral: \"incoming\" to SingleMemberAnnotation at 1", "INS SimpleType: VectorAccessible to SingleVariableDeclaration at 1", "INS SimpleName: outgoing to SingleVariableDeclaration at 2", "INS SimpleName: Named to SingleMemberAnnotation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 34", "operations": ["INS Modifier: abstract to MethodDeclaration at 1", "INS Modifier: public to MethodDeclaration at 0", "INS StringLiteral: \"index\" to SingleMemberAnnotation at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 34", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: index to SingleVariableDeclaration at 2", "INS SimpleName: copyFirstValueToInternal to MethodDeclaration at 3", "INS SimpleName: Named to SingleMemberAnnotation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 35", "operations": ["INS TextElement:  object used by \"computed\" window functions to TagElement: @param at 1", "INS SimpleName: outputRow to MethodDeclaration at 4", "INS TagElement to Javadoc at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 35", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: called once for each row after we evaluate all peer rows. Used to write a value in the row to TagElement at 0", "INS Modifier: abstract to MethodDeclaration at 2", "INS TagElement: @param to Javadoc at 2", "INS PrimitiveType: void to MethodDeclaration at 3", "INS SimpleName: partition to TagElement: @param at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 38", "operations": ["INS StringLiteral: \"incoming\" to SingleMemberAnnotation at 1", "INS SimpleType: VectorAccessible to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: setupCopyNext to MethodDeclaration at 3", "INS SimpleName: incoming to SingleVariableDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleType: VectorAccessible to SingleVariableDeclaration at 1", "INS SimpleName: outgoing to SingleVariableDeclaration at 2", "INS SimpleName: Named to SingleMemberAnnotation at 0", "INS StringLiteral: \"outgoing\" to SingleMemberAnnotation at 1", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 38", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: Named to SingleMemberAnnotation at 0", "INS SimpleName: VectorAccessible to SimpleType: VectorAccessible at 0", "INS Modifier: abstract to MethodDeclaration at 1", "INS SimpleName: VectorAccessible to SimpleType: VectorAccessible at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 39", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 39", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS StringLiteral: \"incoming\" to SingleMemberAnnotation at 1", "INS SimpleName: setupPasteValues to MethodDeclaration at 3", "INS SimpleName: incoming to SingleVariableDeclaration at 2", "INS SimpleType: VectorAccessible to SingleVariableDeclaration at 1", "INS SimpleName: VectorAccessible to SimpleType: VectorAccessible at 0", "INS SimpleType: VectorAccessible to SingleVariableDeclaration at 1", "INS Modifier: abstract to MethodDeclaration at 1", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: outgoing to SingleVariableDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: Named to SingleMemberAnnotation at 0", "INS SimpleName: Named to SingleMemberAnnotation at 0", "INS SimpleName: VectorAccessible to SimpleType: VectorAccessible at 0", "INS Modifier: public to MethodDeclaration at 0", "INS StringLiteral: \"outgoing\" to SingleMemberAnnotation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 41", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS StringLiteral: \"incoming\" to SingleMemberAnnotation at 1", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS SimpleType: VectorAccessible to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 0", "INS Modifier: abstract to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: VectorAccessible to SingleVariableDeclaration at 1", "INS SimpleName: outgoing to SingleVariableDeclaration at 2", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: incoming to SingleVariableDeclaration at 2", "INS StringLiteral: \"outgoing\" to SingleMemberAnnotation at 1", "INS MethodDeclaration to TypeDeclaration: class at 41", "INS SimpleName: Named to SingleMemberAnnotation at 0", "INS SimpleName: setupCopyPrev to MethodDeclaration at 3", "INS SimpleName: VectorAccessible to SimpleType: VectorAccessible at 0", "INS SimpleName: VectorAccessible to SimpleType: VectorAccessible at 0", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Named to SingleMemberAnnotation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 42", "operations": ["INS Modifier: public to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 42", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: inIndex to SingleVariableDeclaration at 2", "INS StringLiteral: \"inIndex\" to SingleMemberAnnotation at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: copyFromInternal to MethodDeclaration at 3", "INS StringLiteral: \"outIndex\" to SingleMemberAnnotation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: outIndex to SingleVariableDeclaration at 2", "INS Modifier: abstract to MethodDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS SimpleName: Named to SingleMemberAnnotation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: Named to SingleMemberAnnotation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 43", "operations": ["INS StringLiteral: \"outgoing\" to SingleMemberAnnotation at 1", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleType: VectorAccessible to SingleVariableDeclaration at 1", "INS SimpleName: setupCopyFromInternal to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: VectorAccessible to SimpleType: VectorAccessible at 0", "INS SimpleName: outgoing to SingleVariableDeclaration at 2", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 43", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS Modifier: abstract to MethodDeclaration at 1", "INS SimpleName: Named to SingleMemberAnnotation at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: incoming to SingleVariableDeclaration at 2", "INS SimpleName: Named to SingleMemberAnnotation at 0", "INS SimpleType: VectorAccessible to SingleVariableDeclaration at 1", "INS SimpleName: VectorAccessible to SimpleType: VectorAccessible at 0", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS StringLiteral: \"incoming\" to SingleMemberAnnotation at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SimpleName: OperatorContext to SimpleType: OperatorContext at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleType: OperatorContext to SingleVariableDeclaration at 1", "INS SimpleName: oContext to SingleVariableDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "INS SimpleType: DrillException to MethodDeclaration at 5", "operations": ["INS SimpleType: DrillException to MethodDeclaration at 5", "INS SimpleName: DrillException to SimpleType: DrillException at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: DrillException to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5"]}, {"root": "UPDATE from int to long", "operations": ["UPD PrimitiveType: int from int to long", "UPD PrimitiveType: int from int to long", "UPD PrimitiveType: int from int to long", "UPD PrimitiveType: int from int to long"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 7"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "UPDATE from setupRead to setupEvaluatePeer", "operations": ["UPD SimpleName: setupRead from setupRead to setupEvaluatePeer", "UPD SimpleName: setupRead from setupRead to setupEvaluatePeer"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "UPDATE from setupWrite to setupPartition", "operations": ["UPD SimpleName: setupWrite from setupWrite to setupPartition"]}, {"root": "INS SimpleName: copyNext to MethodDeclaration at 4", "operations": ["INS SimpleName: copyNext to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS StringLiteral: \"inIndex\" to SingleMemberAnnotation at 1", "INS SimpleName: Named to SingleMemberAnnotation at 0", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: inIndex to SingleVariableDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS SimpleName: outIndex to SingleVariableDeclaration at 2", "INS SimpleName: Named to SingleMemberAnnotation at 0", "INS StringLiteral: \"outIndex\" to SingleMemberAnnotation at 1"]}, {"root": "INS SimpleName: copyPrev to MethodDeclaration at 4", "operations": ["INS SimpleName: copyPrev to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Named to SingleMemberAnnotation at 0", "INS SimpleName: inIndex to SingleVariableDeclaration at 2", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS StringLiteral: \"inIndex\" to SingleMemberAnnotation at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 6", "INS StringLiteral: \"outIndex\" to SingleMemberAnnotation at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS SimpleName: Named to SingleMemberAnnotation at 0", "INS SingleMemberAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: outIndex to SingleVariableDeclaration at 2"]}, {"root": "INS Modifier: final to SingleVariableDeclaration at 0", "operations": ["INS Modifier: final to SingleVariableDeclaration at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: internal to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: VectorContainer to SimpleType: VectorContainer at 0", "INS ExpressionStatement to Block at 2", "INS SimpleType: VectorContainer to ClassInstanceCreation at 0", "INS SimpleName: oContext to ClassInstanceCreation at 1"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS SimpleName: allocateInternal to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 3"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS BooleanLiteral: false to Assignment: = at 1", "INS ExpressionStatement to Block at 4", "INS SimpleName: lagCopiedToInternal to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationStatement to Block at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: VectorAccessible to SimpleType: VectorAccessible at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleType: VectorAccessible to VariableDeclarationStatement at 1", "INS SimpleName: current to VariableDeclarationFragment at 0", "INS SimpleName: getCurrent to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: container to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: setupCopyNext to MethodInvocation at 0", "INS SimpleName: current to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS SimpleName: setupPasteValues to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: internal to MethodInvocation at 1", "INS SimpleName: container to MethodInvocation at 2", "INS ExpressionStatement to Block at 3"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS ExpressionStatement to Block at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: copyPrevFromInternal to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS SimpleName: current to MethodInvocation at 1", "INS SimpleName: setupCopyPrev to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: container to MethodInvocation at 2", "INS ExpressionStatement to Block at 5"]}, {"root": "INS IfStatement to Block at 8", "operations": ["INS SimpleName: container to MethodInvocation at 2", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS SimpleName: row to InfixExpression: - at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: size to MethodInvocation at 1", "INS SimpleName: get to MethodInvocation at 1", "INS IfStatement to Block at 8", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS SimpleName: current to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: batches to MethodInvocation at 0", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: copyNext to MethodInvocation at 0", "INS SimpleName: copyPrevToInternal to MethodInvocation at 0", "INS InfixExpression: - to MethodInvocation at 2", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: setupCopyNext to MethodInvocation at 0", "INS NumberLiteral: 0 to MethodInvocation at 1", "INS SimpleName: partition to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS NumberLiteral: 1 to InfixExpression: > at 1", "INS SimpleName: row to MethodInvocation at 2", "INS SimpleName: isDone to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to InfixExpression: > at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: batches to MethodInvocation at 0", "INS InfixExpression: > to InfixExpression: && at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: frameLastRow to MethodInvocation at 1", "INS SimpleName: writeLastValue to MethodInvocation at 0", "INS SimpleName: row to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS ExpressionStatement to Block at 4", "INS SimpleName: container to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setupEvaluatePeer to MethodInvocation at 0", "INS SimpleName: current to MethodInvocation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 6", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 6", "INS SimpleName: row to VariableDeclarationFragment at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: currentRow to VariableDeclarationFragment at 1"]}, {"root": "INS ExpressionStatement to Block at 9", "operations": ["INS InfixExpression: - to Assignment: = at 1", "INS SimpleName: row to InfixExpression: - at 0", "INS SimpleName: frameLastRow to Assignment: = at 0", "INS ExpressionStatement to Block at 9", "INS Assignment: = to ExpressionStatement at 0", "INS NumberLiteral: 1 to InfixExpression: - at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: trace to MethodInvocation at 1", "INS StringLiteral: \"clearing internal\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: logger to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: clear to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: internal to MethodInvocation at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @param to Javadoc at 1"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @param to Javadoc at 1"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TagElement: @param to Javadoc at 1", "INS SimpleName: incoming to TagElement: @param at 0", "INS TextElement:  batch we will read from to TagElement: @param at 1"]}, {"root": "INS TagElement: @param to Javadoc at 2", "operations": ["INS SimpleName: outgoing to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 2", "INS TextElement:  batch we will be writing to to TagElement: @param at 1"]}, {"root": "INS TagElement: @throws to Javadoc at 3", "operations": ["INS SimpleName: SchemaChangeException to TagElement: @throws at 0", "INS TagElement: @throws to Javadoc at 3"]}, {"root": "INS TagElement to Javadoc at 0", "operations": ["INS TextElement: copies value(s) from inIndex row to outIndex row. Mostly used by LEAD. inIndex always points to the row next to to TagElement at 0", "INS TagElement to Javadoc at 0", "INS TextElement: outIndex to TagElement at 1"]}, {"root": "UPDATE from  to @param", "operations": ["UPD TagElement from  to @param"]}, {"root": "INS TagElement: @param to Javadoc at 2", "operations": ["INS TagElement: @param to Javadoc at 2", "INS TextElement:  destination row of the copy. to TagElement: @param at 1", "INS SimpleName: outIndex to TagElement: @param at 0"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TagElement: @param to Javadoc at 1", "INS SimpleName: inIndex to TagElement: @param at 0", "INS TextElement:  source row of the copy to TagElement: @param at 1"]}, {"root": "INS TagElement: @param to Javadoc at 2", "operations": ["INS TagElement: @param to Javadoc at 2", "INS TextElement:  destination row of the copy. to TagElement: @param at 1", "INS SimpleName: outIndex to TagElement: @param at 0"]}, {"root": "INS Block to WhileStatement at 1", "operations": ["INS Block to WhileStatement at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS Block to IfStatement at 1", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS InfixExpression: != to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: row to InfixExpression: - at 0", "INS SimpleName: processRow to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS IfStatement to Block at 2", "INS SimpleName: currentRow to InfixExpression: != at 1", "INS IfStatement to Block at 0", "INS InfixExpression: < to InfixExpression: && at 0", "INS SimpleName: isDone to MethodInvocation at 1", "INS SimpleName: partition to MethodInvocation at 0", "INS SimpleName: outputCount to InfixExpression: - at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: row to InfixExpression: + at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: copyPrev to MethodInvocation at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: copyNext to MethodInvocation at 0", "INS InfixExpression: - to InfixExpression: < at 1", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: row to InfixExpression: < at 0", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS InfixExpression: - to MethodInvocation at 1", "INS SimpleName: row to InfixExpression: != at 0", "INS SimpleName: row to MethodInvocation at 1", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: row to MethodInvocation at 2", "INS SimpleName: row to MethodInvocation at 2", "INS InfixExpression: + to MethodInvocation at 1"]}, {"root": "UPDATE from setup outgoing container for outputAggregatedValues. This will also reset the aggregations in most cases. to Called once per partition, before processing the partition. Used to setup read/write vectors", "operations": ["UPD TextElement: setup outgoing container for outputAggregatedValues. This will also reset the aggregations in most cases. from setup outgoing container for outputAggregatedValues. This will also reset the aggregations in most cases. to Called once per partition, before processing the partition. Used to setup read/write vectors"]}, {"root": "INS SimpleName: inIndex to TagElement at 0", "operations": ["INS SimpleName: inIndex to TagElement at 0"]}, {"root": "UPDATE from aggregates a row from the incoming container to  source row of the copy", "operations": ["UPD TextElement: aggregates a row from the incoming container from aggregates a row from the incoming container to  source row of the copy"]}, {"root": "UPDATE from writes aggregated values to row of outgoing container to copies value(s) from inIndex row to outIndex row. Mostly used by LAG. inIndex always points to the previous row", "operations": ["UPD TextElement: writes aggregated values to row of outgoing container from writes aggregated values to row of outgoing container to copies value(s) from inIndex row to outIndex row. Mostly used by LAG. inIndex always points to the previous row"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3"]}, {"root": "UPDATE from outputAggregatedValues to outputRow", "operations": ["UPD SimpleName: outputAggregatedValues from outputAggregatedValues to outputRow"]}, {"root": "UPDATE from setupRead to setupReadLastValue", "operations": ["UPD SimpleName: setupRead from setupRead to setupReadLastValue"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: cleanPartition to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from aggregateRecord to evaluatePeer", "operations": ["UPD SimpleName: aggregateRecord from aggregateRecord to evaluatePeer"]}, {"root": "UPDATE from setupWrite to newPartition", "operations": ["UPD SimpleName: setupWrite from setupWrite to newPartition"]}, {"root": "UPDATE from container to currentRow", "operations": ["UPD SimpleName: container from container to currentRow"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL SimpleName: currentRow", "DEL VariableDeclarationFragment", "DEL SimpleName: row"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement", "DEL Javadoc", "DEL TextElement: setup incoming container for aggregateRecord()"]}, {"root": "DEL SimpleName: aggregateRecord", "operations": ["DEL SimpleName: aggregateRecord"]}, {"root": "DEL SimpleName: outputAggregatedValues", "operations": ["DEL SimpleName: outputAggregatedValues"]}]}}, {"DefaultFrameTemplate_diff": {"operations": ["Insert ImportDeclaration(22) into CompilationUnit(1522) at 3", "Insert QualifiedName: org.apache.drill.exec.ops.OperatorContext(21) into ImportDeclaration(22) at 0", "Insert FieldDeclaration(69) into TypeDeclaration: class(1521) at 6", "Insert FieldDeclaration(74) into TypeDeclaration: class(1521) at 7", "Insert FieldDeclaration(93) into TypeDeclaration: class(1521) at 10", "Insert MethodDeclaration(213) into TypeDeclaration: class(1521) at 14", "Insert MethodDeclaration(419) into TypeDeclaration: class(1521) at 16", "Insert MethodDeclaration(439) into TypeDeclaration: class(1521) at 17", "Insert MethodDeclaration(618) into TypeDeclaration: class(1521) at 19", "Insert MethodDeclaration(640) into TypeDeclaration: class(1521) at 20", "Insert MethodDeclaration(681) into TypeDeclaration: class(1521) at 21", "Insert MethodDeclaration(1118) into TypeDeclaration: class(1521) at 29", "Insert MethodDeclaration(1160) into TypeDeclaration: class(1521) at 31", "Insert MethodDeclaration(1177) into TypeDeclaration: class(1521) at 32", "Insert MethodDeclaration(1198) into TypeDeclaration: class(1521) at 33", "Insert MethodDeclaration(1209) into TypeDeclaration: class(1521) at 34", "Insert MethodDeclaration(1236) into TypeDeclaration: class(1521) at 35", "Insert MethodDeclaration(1314) into TypeDeclaration: class(1521) at 38", "Insert MethodDeclaration(1333) into TypeDeclaration: class(1521) at 39", "Insert MethodDeclaration(1378) into TypeDeclaration: class(1521) at 41", "Insert MethodDeclaration(1395) into TypeDeclaration: class(1521) at 42", "Insert MethodDeclaration(1414) into TypeDeclaration: class(1521) at 43", "Insert Modifier: private(64) into FieldDeclaration(69) at 0", "Insert SimpleType: VectorContainer(66) into FieldDeclaration(69) at 1", "Insert VariableDeclarationFragment(68) into FieldDeclaration(69) at 2", "Insert Modifier: private(70) into FieldDeclaration(74) at 0", "Insert PrimitiveType: boolean(71) into FieldDeclaration(74) at 1", "Insert VariableDeclarationFragment(73) into FieldDeclaration(74) at 2", "Insert Modifier: private(89) into FieldDeclaration(93) at 0", "Insert PrimitiveType: int(90) into FieldDeclaration(93) at 1", "Insert VariableDeclarationFragment(92) into FieldDeclaration(93) at 2", "Insert SingleVariableDeclaration(126) into MethodDeclaration(164) at 6", "Insert Modifier: private(185) into MethodDeclaration(213) at 0", "Insert PrimitiveType: void(186) into MethodDeclaration(213) at 1", "Insert SimpleName: allocateInternal(187) into MethodDeclaration(213) at 2", "Insert Block(212) into MethodDeclaration(213) at 3", "Insert Modifier: private(375) into MethodDeclaration(419) at 0", "Insert PrimitiveType: void(376) into MethodDeclaration(419) at 1", "Insert SimpleName: newPartition(377) into MethodDeclaration(419) at 2", "Insert SingleVariableDeclaration(382) into MethodDeclaration(419) at 3", "Insert SingleVariableDeclaration(386) into MethodDeclaration(419) at 4", "Insert SimpleType: SchemaChangeException(388) into MethodDeclaration(419) at 5", "Insert Block(418) into MethodDeclaration(419) at 6", "Insert Modifier: private(420) into MethodDeclaration(439) at 0", "Insert PrimitiveType: void(421) into MethodDeclaration(439) at 1", "Insert SimpleName: cleanPartition(422) into MethodDeclaration(439) at 2", "Insert Block(438) into MethodDeclaration(439) at 3", "Insert SimpleType: DrillException(459) into MethodDeclaration(582) at 5", "Insert Modifier: private(583) into MethodDeclaration(618) at 0", "Insert PrimitiveType: void(584) into MethodDeclaration(618) at 1", "Insert SimpleName: copyPrevToInternal(585) into MethodDeclaration(618) at 2", "Insert SingleVariableDeclaration(589) into MethodDeclaration(618) at 3", "Insert SingleVariableDeclaration(592) into MethodDeclaration(618) at 4", "Insert Block(617) into MethodDeclaration(618) at 5", "Insert Modifier: private(619) into MethodDeclaration(640) at 0", "Insert PrimitiveType: void(620) into MethodDeclaration(640) at 1", "Insert SimpleName: copyPrevFromInternal(621) into MethodDeclaration(640) at 2", "Insert Block(639) into MethodDeclaration(640) at 3", "Insert Modifier: private(641) into MethodDeclaration(681) at 0", "Insert PrimitiveType: void(642) into MethodDeclaration(681) at 1", "Insert SimpleName: processRow(643) into MethodDeclaration(681) at 2", "Insert SingleVariableDeclaration(647) into MethodDeclaration(681) at 3", "Move SimpleType: DrillException(346) into MethodDeclaration(681) at 4", "Move Block(396) into MethodDeclaration(681) at 5", "Update PrimitiveType: int(406) to long", "Move ExpressionStatement(629) into Block(974) at 7", "Insert Javadoc(1107) into MethodDeclaration(1118) at 0", "Insert Modifier: public(1108) into MethodDeclaration(1118) at 1", "Insert Modifier: abstract(1109) into MethodDeclaration(1118) at 2", "Insert PrimitiveType: void(1110) into MethodDeclaration(1118) at 3", "Insert SimpleName: evaluatePeer(1111) into MethodDeclaration(1118) at 4", "Move SingleVariableDeclaration(863) into MethodDeclaration(1118) at 5", "Update SimpleName: setupRead(806) to setupEvaluatePeer", "Insert Modifier: public(1140) into MethodDeclaration(1160) at 0", "Insert Modifier: abstract(1141) into MethodDeclaration(1160) at 1", "Insert PrimitiveType: void(1142) into MethodDeclaration(1160) at 2", "Insert SimpleName: setupReadLastValue(1143) into MethodDeclaration(1160) at 3", "Insert SingleVariableDeclaration(1150) into MethodDeclaration(1160) at 4", "Insert SingleVariableDeclaration(1157) into MethodDeclaration(1160) at 5", "Insert SimpleType: SchemaChangeException(1159) into MethodDeclaration(1160) at 6", "Insert Modifier: public(1161) into MethodDeclaration(1177) at 0", "Insert Modifier: abstract(1162) into MethodDeclaration(1177) at 1", "Insert PrimitiveType: void(1163) into MethodDeclaration(1177) at 2", "Insert SimpleName: writeLastValue(1164) into MethodDeclaration(1177) at 3", "Insert SingleVariableDeclaration(1170) into MethodDeclaration(1177) at 4", "Insert SingleVariableDeclaration(1176) into MethodDeclaration(1177) at 5", "Insert Modifier: public(1178) into MethodDeclaration(1198) at 0", "Insert Modifier: abstract(1179) into MethodDeclaration(1198) at 1", "Insert PrimitiveType: void(1180) into MethodDeclaration(1198) at 2", "Insert SimpleName: setupCopyFirstValue(1181) into MethodDeclaration(1198) at 3", "Insert SingleVariableDeclaration(1188) into MethodDeclaration(1198) at 4", "Insert SingleVariableDeclaration(1195) into MethodDeclaration(1198) at 5", "Insert SimpleType: SchemaChangeException(1197) into MethodDeclaration(1198) at 6", "Insert Modifier: public(1199) into MethodDeclaration(1209) at 0", "Insert Modifier: abstract(1200) into MethodDeclaration(1209) at 1", "Insert PrimitiveType: void(1201) into MethodDeclaration(1209) at 2", "Insert SimpleName: copyFirstValueToInternal(1202) into MethodDeclaration(1209) at 3", "Insert SingleVariableDeclaration(1208) into MethodDeclaration(1209) at 4", "Insert Javadoc(1218) into MethodDeclaration(1236) at 0", "Insert Modifier: public(1219) into MethodDeclaration(1236) at 1", "Insert Modifier: abstract(1220) into MethodDeclaration(1236) at 2", "Insert PrimitiveType: void(1221) into MethodDeclaration(1236) at 3", "Insert SimpleName: outputRow(1222) into MethodDeclaration(1236) at 4", "Move SingleVariableDeclaration(880) into MethodDeclaration(1236) at 5", "Move SingleVariableDeclaration(887) into MethodDeclaration(1236) at 6", "Update SimpleName: setupWrite(830) to setupPartition", "Insert SimpleName: copyNext(1282) into MethodDeclaration(1295) at 4", "Insert SingleVariableDeclaration(1288) into MethodDeclaration(1295) at 5", "Insert SingleVariableDeclaration(1294) into MethodDeclaration(1295) at 6", "Insert Modifier: public(1296) into MethodDeclaration(1314) at 0", "Insert Modifier: abstract(1297) into MethodDeclaration(1314) at 1", "Insert PrimitiveType: void(1298) into MethodDeclaration(1314) at 2", "Insert SimpleName: setupCopyNext(1299) into MethodDeclaration(1314) at 3", "Insert SingleVariableDeclaration(1306) into MethodDeclaration(1314) at 4", "Insert SingleVariableDeclaration(1313) into MethodDeclaration(1314) at 5", "Insert Modifier: public(1315) into MethodDeclaration(1333) at 0", "Insert Modifier: abstract(1316) into MethodDeclaration(1333) at 1", "Insert PrimitiveType: void(1317) into MethodDeclaration(1333) at 2", "Insert SimpleName: setupPasteValues(1318) into MethodDeclaration(1333) at 3", "Insert SingleVariableDeclaration(1325) into MethodDeclaration(1333) at 4", "Insert SingleVariableDeclaration(1332) into MethodDeclaration(1333) at 5", "Insert SimpleName: copyPrev(1346) into MethodDeclaration(1359) at 4", "Insert SingleVariableDeclaration(1352) into MethodDeclaration(1359) at 5", "Insert SingleVariableDeclaration(1358) into MethodDeclaration(1359) at 6", "Insert Modifier: public(1360) into MethodDeclaration(1378) at 0", "Insert Modifier: abstract(1361) into MethodDeclaration(1378) at 1", "Insert PrimitiveType: void(1362) into MethodDeclaration(1378) at 2", "Insert SimpleName: setupCopyPrev(1363) into MethodDeclaration(1378) at 3", "Insert SingleVariableDeclaration(1370) into MethodDeclaration(1378) at 4", "Insert SingleVariableDeclaration(1377) into MethodDeclaration(1378) at 5", "Insert Modifier: public(1379) into MethodDeclaration(1395) at 0", "Insert Modifier: abstract(1380) into MethodDeclaration(1395) at 1", "Insert PrimitiveType: void(1381) into MethodDeclaration(1395) at 2", "Insert SimpleName: copyFromInternal(1382) into MethodDeclaration(1395) at 3", "Insert SingleVariableDeclaration(1388) into MethodDeclaration(1395) at 4", "Insert SingleVariableDeclaration(1394) into MethodDeclaration(1395) at 5", "Insert Modifier: public(1396) into MethodDeclaration(1414) at 0", "Insert Modifier: abstract(1397) into MethodDeclaration(1414) at 1", "Insert PrimitiveType: void(1398) into MethodDeclaration(1414) at 2", "Insert SimpleName: setupCopyFromInternal(1399) into MethodDeclaration(1414) at 3", "Insert SingleVariableDeclaration(1406) into MethodDeclaration(1414) at 4", "Insert SingleVariableDeclaration(1413) into MethodDeclaration(1414) at 5", "Insert SimpleName: VectorContainer(65) into SimpleType: VectorContainer(66) at 0", "Insert SimpleName: internal(67) into VariableDeclarationFragment(68) at 0", "Insert SimpleName: lagCopiedToInternal(72) into VariableDeclarationFragment(73) at 0", "Insert SimpleName: frameLastRow(91) into VariableDeclarationFragment(92) at 0", "Insert Modifier: final(109) into SingleVariableDeclaration(116) at 0", "Insert Modifier: final(122) into SingleVariableDeclaration(126) at 0", "Insert SimpleType: OperatorContext(124) into SingleVariableDeclaration(126) at 1", "Insert SimpleName: oContext(125) into SingleVariableDeclaration(126) at 2", "Insert ExpressionStatement(147) into Block(163) at 2", "Insert ExpressionStatement(150) into Block(163) at 3", "Insert ExpressionStatement(154) into Block(163) at 4", "Insert EnhancedForStatement(211) into Block(212) at 0", "Insert Modifier: final(378) into SingleVariableDeclaration(382) at 0", "Insert SimpleType: WindowDataBatch(380) into SingleVariableDeclaration(382) at 1", "Insert SimpleName: current(381) into SingleVariableDeclaration(382) at 2", "Insert Modifier: final(383) into SingleVariableDeclaration(386) at 0", "Insert PrimitiveType: int(384) into SingleVariableDeclaration(386) at 1", "Insert SimpleName: currentRow(385) into SingleVariableDeclaration(386) at 2", "Insert SimpleName: SchemaChangeException(387) into SimpleType: SchemaChangeException(388) at 0", "Move VariableDeclarationStatement(225) into Block(418) at 0", "Move ExpressionStatement(232) into Block(418) at 1", "Insert ExpressionStatement(408) into Block(418) at 2", "Insert ExpressionStatement(413) into Block(418) at 3", "Insert ExpressionStatement(417) into Block(418) at 4", "Move ExpressionStatement(252) into Block(438) at 0", "Move ExpressionStatement(255) into Block(438) at 1", "Insert ExpressionStatement(433) into Block(438) at 2", "Insert ExpressionStatement(437) into Block(438) at 3", "Insert SimpleName: DrillException(458) into SimpleType: DrillException(459) at 0", "Insert VariableDeclarationStatement(475) into Block(581) at 1", "Insert ExpressionStatement(480) into Block(581) at 2", "Insert ExpressionStatement(485) into Block(581) at 3", "Insert ExpressionStatement(488) into Block(581) at 4", "Insert ExpressionStatement(493) into Block(581) at 5", "Insert IfStatement(578) into Block(581) at 8", "Insert SimpleType: VectorAccessible(587) into SingleVariableDeclaration(589) at 0", "Insert SimpleName: current(588) into SingleVariableDeclaration(589) at 1", "Insert PrimitiveType: int(590) into SingleVariableDeclaration(592) at 0", "Insert SimpleName: row(591) into SingleVariableDeclaration(592) at 1", "Insert ExpressionStatement(600) into Block(617) at 0", "Insert ExpressionStatement(605) into Block(617) at 1", "Insert ExpressionStatement(612) into Block(617) at 2", "Insert ExpressionStatement(616) into Block(617) at 3", "Insert IfStatement(638) into Block(639) at 0", "Insert Modifier: final(644) into SingleVariableDeclaration(647) at 0", "Insert PrimitiveType: int(645) into SingleVariableDeclaration(647) at 1", "Insert SimpleName: row(646) into SingleVariableDeclaration(647) at 2", "Insert ExpressionStatement(675) into Block(680) at 2", "Insert ExpressionStatement(909) into Block(974) at 4", "Insert VariableDeclarationStatement(922) into Block(974) at 6", "Insert ExpressionStatement(973) into Block(974) at 9", "Insert ExpressionStatement(1095) into Block(1100) at 0", "Insert ExpressionStatement(1099) into Block(1100) at 1", "Insert TagElement(1103) into Javadoc(1107) at 0", "Move TagElement: @param(852) into Javadoc(1107) at 1", "Insert SingleMemberAnnotation(1146) into SingleVariableDeclaration(1150) at 0", "Insert SimpleType: VectorAccessible(1148) into SingleVariableDeclaration(1150) at 1", "Insert SimpleName: incoming(1149) into SingleVariableDeclaration(1150) at 2", "Insert SingleMemberAnnotation(1153) into SingleVariableDeclaration(1157) at 0", "Insert SimpleType: VectorAccessible(1155) into SingleVariableDeclaration(1157) at 1", "Insert SimpleName: outgoing(1156) into SingleVariableDeclaration(1157) at 2", "Insert SimpleName: SchemaChangeException(1158) into SimpleType: SchemaChangeException(1159) at 0", "Insert SingleMemberAnnotation(1167) into SingleVariableDeclaration(1170) at 0", "Insert PrimitiveType: int(1168) into SingleVariableDeclaration(1170) at 1", "Insert SimpleName: index(1169) into SingleVariableDeclaration(1170) at 2", "Insert SingleMemberAnnotation(1173) into SingleVariableDeclaration(1176) at 0", "Insert PrimitiveType: int(1174) into SingleVariableDeclaration(1176) at 1", "Insert SimpleName: outIndex(1175) into SingleVariableDeclaration(1176) at 2", "Insert SingleMemberAnnotation(1184) into SingleVariableDeclaration(1188) at 0", "Insert SimpleType: VectorAccessible(1186) into SingleVariableDeclaration(1188) at 1", "Insert SimpleName: incoming(1187) into SingleVariableDeclaration(1188) at 2", "Insert SingleMemberAnnotation(1191) into SingleVariableDeclaration(1195) at 0", "Insert SimpleType: VectorAccessible(1193) into SingleVariableDeclaration(1195) at 1", "Insert SimpleName: outgoing(1194) into SingleVariableDeclaration(1195) at 2", "Insert SimpleName: SchemaChangeException(1196) into SimpleType: SchemaChangeException(1197) at 0", "Insert SingleMemberAnnotation(1205) into SingleVariableDeclaration(1208) at 0", "Insert PrimitiveType: int(1206) into SingleVariableDeclaration(1208) at 1", "Insert SimpleName: index(1207) into SingleVariableDeclaration(1208) at 2", "Insert TagElement(1211) into Javadoc(1218) at 0", "Move TagElement: @param(869) into Javadoc(1218) at 1", "Insert TagElement: @param(1217) into Javadoc(1218) at 2", "Insert TagElement: @param(1241) into Javadoc(1247) at 1", "Insert TagElement: @param(1244) into Javadoc(1247) at 2", "Insert TagElement: @throws(1246) into Javadoc(1247) at 3", "Insert TagElement(1271) into Javadoc(1278) at 0", "Update TagElement(849) to @param", "Insert TagElement: @param(1277) into Javadoc(1278) at 2", "Insert SingleMemberAnnotation(1285) into SingleVariableDeclaration(1288) at 0", "Insert PrimitiveType: int(1286) into SingleVariableDeclaration(1288) at 1", "Insert SimpleName: inIndex(1287) into SingleVariableDeclaration(1288) at 2", "Insert SingleMemberAnnotation(1291) into SingleVariableDeclaration(1294) at 0", "Insert PrimitiveType: int(1292) into SingleVariableDeclaration(1294) at 1", "Insert SimpleName: outIndex(1293) into SingleVariableDeclaration(1294) at 2", "Insert SingleMemberAnnotation(1302) into SingleVariableDeclaration(1306) at 0", "Insert SimpleType: VectorAccessible(1304) into SingleVariableDeclaration(1306) at 1", "Insert SimpleName: incoming(1305) into SingleVariableDeclaration(1306) at 2", "Insert SingleMemberAnnotation(1309) into SingleVariableDeclaration(1313) at 0", "Insert SimpleType: VectorAccessible(1311) into SingleVariableDeclaration(1313) at 1", "Insert SimpleName: outgoing(1312) into SingleVariableDeclaration(1313) at 2", "Insert SingleMemberAnnotation(1321) into SingleVariableDeclaration(1325) at 0", "Insert SimpleType: VectorAccessible(1323) into SingleVariableDeclaration(1325) at 1", "Insert SimpleName: incoming(1324) into SingleVariableDeclaration(1325) at 2", "Insert SingleMemberAnnotation(1328) into SingleVariableDeclaration(1332) at 0", "Insert SimpleType: VectorAccessible(1330) into SingleVariableDeclaration(1332) at 1", "Insert SimpleName: outgoing(1331) into SingleVariableDeclaration(1332) at 2", "Insert TagElement: @param(1338) into Javadoc(1342) at 1", "Insert TagElement: @param(1341) into Javadoc(1342) at 2", "Insert SingleMemberAnnotation(1349) into SingleVariableDeclaration(1352) at 0", "Insert PrimitiveType: int(1350) into SingleVariableDeclaration(1352) at 1", "Insert SimpleName: inIndex(1351) into SingleVariableDeclaration(1352) at 2", "Insert SingleMemberAnnotation(1355) into SingleVariableDeclaration(1358) at 0", "Insert PrimitiveType: int(1356) into SingleVariableDeclaration(1358) at 1", "Insert SimpleName: outIndex(1357) into SingleVariableDeclaration(1358) at 2", "Insert SingleMemberAnnotation(1366) into SingleVariableDeclaration(1370) at 0", "Insert SimpleType: VectorAccessible(1368) into SingleVariableDeclaration(1370) at 1", "Insert SimpleName: incoming(1369) into SingleVariableDeclaration(1370) at 2", "Insert SingleMemberAnnotation(1373) into SingleVariableDeclaration(1377) at 0", "Insert SimpleType: VectorAccessible(1375) into SingleVariableDeclaration(1377) at 1", "Insert SimpleName: outgoing(1376) into SingleVariableDeclaration(1377) at 2", "Insert SingleMemberAnnotation(1385) into SingleVariableDeclaration(1388) at 0", "Insert PrimitiveType: int(1386) into SingleVariableDeclaration(1388) at 1", "Insert SimpleName: inIndex(1387) into SingleVariableDeclaration(1388) at 2", "Insert SingleMemberAnnotation(1391) into SingleVariableDeclaration(1394) at 0", "Insert PrimitiveType: int(1392) into SingleVariableDeclaration(1394) at 1", "Insert SimpleName: outIndex(1393) into SingleVariableDeclaration(1394) at 2", "Insert SingleMemberAnnotation(1402) into SingleVariableDeclaration(1406) at 0", "Insert SimpleType: VectorAccessible(1404) into SingleVariableDeclaration(1406) at 1", "Insert SimpleName: incoming(1405) into SingleVariableDeclaration(1406) at 2", "Insert SingleMemberAnnotation(1409) into SingleVariableDeclaration(1413) at 0", "Insert SimpleType: VectorAccessible(1411) into SingleVariableDeclaration(1413) at 1", "Insert SimpleName: outgoing(1412) into SingleVariableDeclaration(1413) at 2", "Insert SimpleName: OperatorContext(123) into SimpleType: OperatorContext(124) at 0", "Insert Assignment: =(146) into ExpressionStatement(147) at 0", "Insert MethodInvocation(149) into ExpressionStatement(150) at 0", "Insert Assignment: =(153) into ExpressionStatement(154) at 0", "Insert SingleVariableDeclaration(193) into EnhancedForStatement(211) at 0", "Insert SimpleName: container(194) into EnhancedForStatement(211) at 1", "Insert Block(210) into EnhancedForStatement(211) at 2", "Insert SimpleName: WindowDataBatch(379) into SimpleType: WindowDataBatch(380) at 0", "Update PrimitiveType: int(219) to long", "Insert MethodInvocation(407) into ExpressionStatement(408) at 0", "Insert MethodInvocation(412) into ExpressionStatement(413) at 0", "Insert MethodInvocation(416) into ExpressionStatement(417) at 0", "Insert MethodInvocation(432) into ExpressionStatement(433) at 0", "Insert Assignment: =(436) into ExpressionStatement(437) at 0", "Insert Modifier: final(468) into VariableDeclarationStatement(475) at 0", "Insert SimpleType: VectorAccessible(470) into VariableDeclarationStatement(475) at 1", "Insert VariableDeclarationFragment(474) into VariableDeclarationStatement(475) at 2", "Insert MethodInvocation(479) into ExpressionStatement(480) at 0", "Insert MethodInvocation(484) into ExpressionStatement(485) at 0", "Insert MethodInvocation(487) into ExpressionStatement(488) at 0", "Insert MethodInvocation(492) into ExpressionStatement(493) at 0", "Insert Block(545) into WhileStatement(546) at 1", "Insert InfixExpression: &&(556) into IfStatement(578) at 0", "Insert Block(577) into IfStatement(578) at 1", "Insert SimpleName: VectorAccessible(586) into SimpleType: VectorAccessible(587) at 0", "Insert MethodInvocation(599) into ExpressionStatement(600) at 0", "Insert MethodInvocation(604) into ExpressionStatement(605) at 0", "Insert MethodInvocation(611) into ExpressionStatement(612) at 0", "Insert Assignment: =(615) into ExpressionStatement(616) at 0", "Insert SimpleName: lagCopiedToInternal(622) into IfStatement(638) at 0", "Insert Block(637) into IfStatement(638) at 1", "Insert MethodInvocation(674) into ExpressionStatement(675) at 0", "Update PrimitiveType: int(429) to long", "Insert MethodInvocation(908) into ExpressionStatement(909) at 0", "Insert PrimitiveType: int(918) into VariableDeclarationStatement(922) at 0", "Insert VariableDeclarationFragment(921) into VariableDeclarationStatement(922) at 1", "Insert Assignment: =(972) into ExpressionStatement(973) at 0", "Insert MethodInvocation(1094) into ExpressionStatement(1095) at 0", "Insert MethodInvocation(1098) into ExpressionStatement(1099) at 0", "Insert TextElement: called once for each peer row of the current frame.(1102) into TagElement(1103) at 0", "Insert SimpleName: Named(1144) into SingleMemberAnnotation(1146) at 0", "Insert StringLiteral: \"incoming\"(1145) into SingleMemberAnnotation(1146) at 1", "Insert SimpleName: VectorAccessible(1147) into SimpleType: VectorAccessible(1148) at 0", "Insert SimpleName: Named(1151) into SingleMemberAnnotation(1153) at 0", "Insert StringLiteral: \"outgoing\"(1152) into SingleMemberAnnotation(1153) at 1", "Insert SimpleName: VectorAccessible(1154) into SimpleType: VectorAccessible(1155) at 0", "Insert SimpleName: Named(1165) into SingleMemberAnnotation(1167) at 0", "Insert StringLiteral: \"index\"(1166) into SingleMemberAnnotation(1167) at 1", "Insert SimpleName: Named(1171) into SingleMemberAnnotation(1173) at 0", "Insert StringLiteral: \"outIndex\"(1172) into SingleMemberAnnotation(1173) at 1", "Insert SimpleName: Named(1182) into SingleMemberAnnotation(1184) at 0", "Insert StringLiteral: \"incoming\"(1183) into SingleMemberAnnotation(1184) at 1", "Insert SimpleName: VectorAccessible(1185) into SimpleType: VectorAccessible(1186) at 0", "Insert SimpleName: Named(1189) into SingleMemberAnnotation(1191) at 0", "Insert StringLiteral: \"outgoing\"(1190) into SingleMemberAnnotation(1191) at 1", "Insert SimpleName: VectorAccessible(1192) into SimpleType: VectorAccessible(1193) at 0", "Insert SimpleName: Named(1203) into SingleMemberAnnotation(1205) at 0", "Insert StringLiteral: \"index\"(1204) into SingleMemberAnnotation(1205) at 1", "Insert TextElement: called once for each row after we evaluate all peer rows. Used to write a value in the row(1210) into TagElement(1211) at 0", "Insert SimpleName: partition(1215) into TagElement: @param(1217) at 0", "Insert TextElement:  object used by \"computed\" window functions(1216) into TagElement: @param(1217) at 1", "Update TextElement: setup outgoing container for outputAggregatedValues. This will also reset the aggregations in most cases.(824) to Called once per partition, before processing the partition. Used to setup read/write vectors", "Insert SimpleName: incoming(1239) into TagElement: @param(1241) at 0", "Insert TextElement:  batch we will read from(1240) into TagElement: @param(1241) at 1", "Insert SimpleName: outgoing(1242) into TagElement: @param(1244) at 0", "Insert TextElement:  batch we will be writing to(1243) into TagElement: @param(1244) at 1", "Insert SimpleName: SchemaChangeException(1245) into TagElement: @throws(1246) at 0", "Insert TextElement: copies value(s) from inIndex row to outIndex row. Mostly used by LEAD. inIndex always points to the row next to(1269) into TagElement(1271) at 0", "Insert TextElement: outIndex(1270) into TagElement(1271) at 1", "Insert SimpleName: inIndex(1272) into TagElement: @param(1274) at 0", "Update TextElement: aggregates a row from the incoming container(848) to  source row of the copy", "Insert SimpleName: outIndex(1275) into TagElement: @param(1277) at 0", "Insert TextElement:  destination row of the copy.(1276) into TagElement: @param(1277) at 1", "Insert SimpleName: Named(1283) into SingleMemberAnnotation(1285) at 0", "Insert StringLiteral: \"inIndex\"(1284) into SingleMemberAnnotation(1285) at 1", "Insert SimpleName: Named(1289) into SingleMemberAnnotation(1291) at 0", "Insert StringLiteral: \"outIndex\"(1290) into SingleMemberAnnotation(1291) at 1", "Insert SimpleName: Named(1300) into SingleMemberAnnotation(1302) at 0", "Insert StringLiteral: \"incoming\"(1301) into SingleMemberAnnotation(1302) at 1", "Insert SimpleName: VectorAccessible(1303) into SimpleType: VectorAccessible(1304) at 0", "Insert SimpleName: Named(1307) into SingleMemberAnnotation(1309) at 0", "Insert StringLiteral: \"outgoing\"(1308) into SingleMemberAnnotation(1309) at 1", "Insert SimpleName: VectorAccessible(1310) into SimpleType: VectorAccessible(1311) at 0", "Insert SimpleName: Named(1319) into SingleMemberAnnotation(1321) at 0", "Insert StringLiteral: \"incoming\"(1320) into SingleMemberAnnotation(1321) at 1", "Insert SimpleName: VectorAccessible(1322) into SimpleType: VectorAccessible(1323) at 0", "Insert SimpleName: Named(1326) into SingleMemberAnnotation(1328) at 0", "Insert StringLiteral: \"outgoing\"(1327) into SingleMemberAnnotation(1328) at 1", "Insert SimpleName: VectorAccessible(1329) into SimpleType: VectorAccessible(1330) at 0", "Update TextElement: writes aggregated values to row of outgoing container(865) to copies value(s) from inIndex row to outIndex row. Mostly used by LAG. inIndex always points to the previous row", "Insert SimpleName: inIndex(1336) into TagElement: @param(1338) at 0", "Insert TextElement:  source row of the copy(1337) into TagElement: @param(1338) at 1", "Insert SimpleName: outIndex(1339) into TagElement: @param(1341) at 0", "Insert TextElement:  destination row of the copy.(1340) into TagElement: @param(1341) at 1", "Insert SimpleName: Named(1347) into SingleMemberAnnotation(1349) at 0", "Insert StringLiteral: \"inIndex\"(1348) into SingleMemberAnnotation(1349) at 1", "Insert SimpleName: Named(1353) into SingleMemberAnnotation(1355) at 0", "Insert StringLiteral: \"outIndex\"(1354) into SingleMemberAnnotation(1355) at 1", "Insert SimpleName: Named(1364) into SingleMemberAnnotation(1366) at 0", "Insert StringLiteral: \"incoming\"(1365) into SingleMemberAnnotation(1366) at 1", "Insert SimpleName: VectorAccessible(1367) into SimpleType: VectorAccessible(1368) at 0", "Insert SimpleName: Named(1371) into SingleMemberAnnotation(1373) at 0", "Insert StringLiteral: \"outgoing\"(1372) into SingleMemberAnnotation(1373) at 1", "Insert SimpleName: VectorAccessible(1374) into SimpleType: VectorAccessible(1375) at 0", "Insert SimpleName: Named(1383) into SingleMemberAnnotation(1385) at 0", "Insert StringLiteral: \"inIndex\"(1384) into SingleMemberAnnotation(1385) at 1", "Insert SimpleName: Named(1389) into SingleMemberAnnotation(1391) at 0", "Insert StringLiteral: \"outIndex\"(1390) into SingleMemberAnnotation(1391) at 1", "Insert SimpleName: Named(1400) into SingleMemberAnnotation(1402) at 0", "Insert StringLiteral: \"incoming\"(1401) into SingleMemberAnnotation(1402) at 1", "Insert SimpleName: VectorAccessible(1403) into SimpleType: VectorAccessible(1404) at 0", "Insert SimpleName: Named(1407) into SingleMemberAnnotation(1409) at 0", "Insert StringLiteral: \"outgoing\"(1408) into SingleMemberAnnotation(1409) at 1", "Insert SimpleName: VectorAccessible(1410) into SimpleType: VectorAccessible(1411) at 0", "Insert SimpleName: internal(141) into Assignment: =(146) at 0", "Insert ClassInstanceCreation(145) into Assignment: =(146) at 1", "Insert SimpleName: allocateInternal(148) into MethodInvocation(149) at 0", "Insert SimpleName: lagCopiedToInternal(151) into Assignment: =(153) at 0", "Insert BooleanLiteral: false(152) into Assignment: =(153) at 1", "Insert ParameterizedType: VectorWrapper<?>(191) into SingleVariableDeclaration(193) at 0", "Insert SimpleName: w(192) into SingleVariableDeclaration(193) at 1", "Insert VariableDeclarationStatement(205) into Block(210) at 0", "Insert ExpressionStatement(209) into Block(210) at 1", "Insert SimpleName: setupPartition(404) into MethodInvocation(407) at 0", "Insert SimpleName: current(405) into MethodInvocation(407) at 1", "Insert SimpleName: container(406) into MethodInvocation(407) at 2", "Insert SimpleName: setupCopyFirstValue(409) into MethodInvocation(412) at 0", "Insert SimpleName: current(410) into MethodInvocation(412) at 1", "Insert SimpleName: internal(411) into MethodInvocation(412) at 2", "Insert SimpleName: copyFirstValueToInternal(414) into MethodInvocation(416) at 0", "Insert SimpleName: currentRow(415) into MethodInvocation(416) at 1", "Insert SimpleName: internal(430) into MethodInvocation(432) at 0", "Insert SimpleName: zeroVectors(431) into MethodInvocation(432) at 1", "Insert SimpleName: lagCopiedToInternal(434) into Assignment: =(436) at 0", "Insert BooleanLiteral: false(435) into Assignment: =(436) at 1", "Insert SimpleName: VectorAccessible(469) into SimpleType: VectorAccessible(470) at 0", "Insert SimpleName: current(471) into VariableDeclarationFragment(474) at 0", "Insert MethodInvocation(473) into VariableDeclarationFragment(474) at 1", "Insert SimpleName: setupCopyNext(476) into MethodInvocation(479) at 0", "Insert SimpleName: current(477) into MethodInvocation(479) at 1", "Insert SimpleName: container(478) into MethodInvocation(479) at 2", "Insert SimpleName: setupPasteValues(481) into MethodInvocation(484) at 0", "Insert SimpleName: internal(482) into MethodInvocation(484) at 1", "Insert SimpleName: container(483) into MethodInvocation(484) at 2", "Insert SimpleName: copyPrevFromInternal(486) into MethodInvocation(487) at 0", "Insert SimpleName: setupCopyPrev(489) into MethodInvocation(492) at 0", "Insert SimpleName: current(490) into MethodInvocation(492) at 1", "Insert SimpleName: container(491) into MethodInvocation(492) at 2", "Insert IfStatement(518) into Block(545) at 0", "Insert ExpressionStatement(522) into Block(545) at 1", "Insert IfStatement(541) into Block(545) at 2", "Move ExpressionStatement(395) into Block(545) at 3", "Insert PrefixExpression: !(550) into InfixExpression: &&(556) at 0", "Insert InfixExpression: >(555) into InfixExpression: &&(556) at 1", "Insert ExpressionStatement(564) into Block(577) at 0", "Insert ExpressionStatement(571) into Block(577) at 1", "Insert ExpressionStatement(576) into Block(577) at 2", "Insert SimpleName: logger(593) into MethodInvocation(599) at 0", "Insert SimpleName: trace(594) into MethodInvocation(599) at 1", "Insert StringLiteral: \"copying {} into internal\"(595) into MethodInvocation(599) at 2", "Insert InfixExpression: -(598) into MethodInvocation(599) at 3", "Insert SimpleName: setupCopyPrev(601) into MethodInvocation(604) at 0", "Insert SimpleName: current(602) into MethodInvocation(604) at 1", "Insert SimpleName: internal(603) into MethodInvocation(604) at 2", "Insert SimpleName: copyPrev(606) into MethodInvocation(611) at 0", "Insert InfixExpression: -(609) into MethodInvocation(611) at 1", "Insert NumberLiteral: 0(610) into MethodInvocation(611) at 2", "Insert SimpleName: lagCopiedToInternal(613) into Assignment: =(615) at 0", "Insert BooleanLiteral: true(614) into Assignment: =(615) at 1", "Insert ExpressionStatement(627) into Block(637) at 0", "Insert ExpressionStatement(632) into Block(637) at 1", "Insert ExpressionStatement(636) into Block(637) at 2", "Update SimpleName: outputAggregatedValues(384) to outputRow", "Insert SimpleName: writeLastValue(671) into MethodInvocation(674) at 0", "Insert SimpleName: frameLastRow(672) into MethodInvocation(674) at 1", "Insert SimpleName: row(673) into MethodInvocation(674) at 2", "Insert SimpleName: setupEvaluatePeer(905) into MethodInvocation(908) at 0", "Insert SimpleName: current(906) into MethodInvocation(908) at 1", "Insert SimpleName: container(907) into MethodInvocation(908) at 2", "Insert SimpleName: row(919) into VariableDeclarationFragment(921) at 0", "Insert SimpleName: currentRow(920) into VariableDeclarationFragment(921) at 1", "Update SimpleName: setupRead(625) to setupReadLastValue", "Insert SimpleName: frameLastRow(968) into Assignment: =(972) at 0", "Insert InfixExpression: -(971) into Assignment: =(972) at 1", "Insert SimpleName: logger(1091) into MethodInvocation(1094) at 0", "Insert SimpleName: trace(1092) into MethodInvocation(1094) at 1", "Insert StringLiteral: \"clearing internal\"(1093) into MethodInvocation(1094) at 2", "Insert SimpleName: internal(1096) into MethodInvocation(1098) at 0", "Insert SimpleName: clear(1097) into MethodInvocation(1098) at 1", "Insert SimpleType: VectorContainer(143) into ClassInstanceCreation(145) at 0", "Insert SimpleName: oContext(144) into ClassInstanceCreation(145) at 1", "Insert SimpleType: VectorWrapper(189) into ParameterizedType: VectorWrapper<?>(191) at 0", "Insert WildcardType: ?(190) into ParameterizedType: VectorWrapper<?>(191) at 1", "Insert SimpleType: ValueVector(196) into VariableDeclarationStatement(205) at 0", "Insert VariableDeclarationFragment(204) into VariableDeclarationStatement(205) at 1", "Insert MethodInvocation(208) into ExpressionStatement(209) at 0", "Insert SimpleName: getCurrent(472) into MethodInvocation(473) at 0", "Insert InfixExpression: !=(509) into IfStatement(518) at 0", "Insert Block(517) into IfStatement(518) at 1", "Insert MethodInvocation(521) into ExpressionStatement(522) at 0", "Insert InfixExpression: &&(532) into IfStatement(541) at 0", "Insert Block(540) into IfStatement(541) at 1", "Insert MethodInvocation(549) into PrefixExpression: !(550) at 0", "Insert MethodInvocation(553) into InfixExpression: >(555) at 0", "Insert NumberLiteral: 1(554) into InfixExpression: >(555) at 1", "Insert MethodInvocation(563) into ExpressionStatement(564) at 0", "Insert MethodInvocation(570) into ExpressionStatement(571) at 0", "Insert MethodInvocation(575) into ExpressionStatement(576) at 0", "Insert SimpleName: row(596) into InfixExpression: -(598) at 0", "Insert NumberLiteral: 1(597) into InfixExpression: -(598) at 1", "Insert SimpleName: row(607) into InfixExpression: -(609) at 0", "Insert NumberLiteral: 1(608) into InfixExpression: -(609) at 1", "Insert MethodInvocation(626) into ExpressionStatement(627) at 0", "Insert MethodInvocation(631) into ExpressionStatement(632) at 0", "Insert Assignment: =(635) into ExpressionStatement(636) at 0", "Update PrimitiveType: int(526) to long", "Insert SimpleName: row(969) into InfixExpression: -(971) at 0", "Insert NumberLiteral: 1(970) into InfixExpression: -(971) at 1", "Insert SimpleName: VectorContainer(142) into SimpleType: VectorContainer(143) at 0", "Insert SimpleName: VectorWrapper(188) into SimpleType: VectorWrapper(189) at 0", "Insert SimpleName: ValueVector(195) into SimpleType: ValueVector(196) at 0", "Insert SimpleName: vv(197) into VariableDeclarationFragment(204) at 0", "Insert MethodInvocation(203) into VariableDeclarationFragment(204) at 1", "Insert SimpleName: vv(206) into MethodInvocation(208) at 0", "Insert SimpleName: allocateNew(207) into MethodInvocation(208) at 1", "Insert ExpressionStatement(303) into Block(304) at 0", "Insert SimpleName: row(507) into InfixExpression: !=(509) at 0", "Insert SimpleName: currentRow(508) into InfixExpression: !=(509) at 1", "Insert ExpressionStatement(516) into Block(517) at 0", "Insert SimpleName: processRow(519) into MethodInvocation(521) at 0", "Insert SimpleName: row(520) into MethodInvocation(521) at 1", "Insert InfixExpression: <(527) into InfixExpression: &&(532) at 0", "Insert PrefixExpression: !(531) into InfixExpression: &&(532) at 1", "Insert ExpressionStatement(539) into Block(540) at 0", "Insert SimpleName: partition(547) into MethodInvocation(549) at 0", "Insert SimpleName: isDone(548) into MethodInvocation(549) at 1", "Insert SimpleName: batches(551) into MethodInvocation(553) at 0", "Insert SimpleName: size(552) into MethodInvocation(553) at 1", "Insert SimpleName: setupCopyNext(557) into MethodInvocation(563) at 0", "Insert MethodInvocation(561) into MethodInvocation(563) at 1", "Insert SimpleName: container(562) into MethodInvocation(563) at 2", "Insert SimpleName: copyNext(565) into MethodInvocation(570) at 0", "Insert NumberLiteral: 0(566) into MethodInvocation(570) at 1", "Insert InfixExpression: -(569) into MethodInvocation(570) at 2", "Insert SimpleName: copyPrevToInternal(572) into MethodInvocation(575) at 0", "Insert SimpleName: current(573) into MethodInvocation(575) at 1", "Insert SimpleName: row(574) into MethodInvocation(575) at 2", "Insert SimpleName: setupCopyFromInternal(623) into MethodInvocation(626) at 0", "Insert SimpleName: internal(624) into MethodInvocation(626) at 1", "Insert SimpleName: container(625) into MethodInvocation(626) at 2", "Insert SimpleName: copyFromInternal(628) into MethodInvocation(631) at 0", "Insert NumberLiteral: 0(629) into MethodInvocation(631) at 1", "Insert NumberLiteral: 0(630) into MethodInvocation(631) at 2", "Insert SimpleName: lagCopiedToInternal(633) into Assignment: =(635) at 0", "Insert BooleanLiteral: false(634) into Assignment: =(635) at 1", "Update SimpleName: aggregateRecord(675) to evaluatePeer", "Insert SimpleName: internal(198) into MethodInvocation(203) at 0", "Insert SimpleName: addOrGet(199) into MethodInvocation(203) at 1", "Insert MethodInvocation(202) into MethodInvocation(203) at 2", "Insert MethodInvocation(302) into ExpressionStatement(303) at 0", "Insert MethodInvocation(515) into ExpressionStatement(516) at 0", "Insert SimpleName: row(523) into InfixExpression: <(527) at 0", "Insert InfixExpression: -(526) into InfixExpression: <(527) at 1", "Insert MethodInvocation(530) into PrefixExpression: !(531) at 0", "Insert MethodInvocation(538) into ExpressionStatement(539) at 0", "Insert SimpleName: batches(558) into MethodInvocation(561) at 0", "Insert SimpleName: get(559) into MethodInvocation(561) at 1", "Insert NumberLiteral: 1(560) into MethodInvocation(561) at 2", "Insert SimpleName: row(567) into InfixExpression: -(569) at 0", "Insert NumberLiteral: 1(568) into InfixExpression: -(569) at 1", "Insert SimpleName: w(200) into MethodInvocation(202) at 0", "Insert SimpleName: getField(201) into MethodInvocation(202) at 1", "Update SimpleName: setupWrite(233) to newPartition", "Update SimpleName: container(235) to currentRow", "Insert SimpleName: cleanPartition(301) into MethodInvocation(302) at 0", "Insert SimpleName: copyPrev(510) into MethodInvocation(515) at 0", "Insert InfixExpression: -(513) into MethodInvocation(515) at 1", "Insert SimpleName: row(514) into MethodInvocation(515) at 2", "Insert SimpleName: outputCount(524) into InfixExpression: -(526) at 0", "Insert NumberLiteral: 1(525) into InfixExpression: -(526) at 1", "Insert SimpleName: partition(528) into MethodInvocation(530) at 0", "Insert SimpleName: isDone(529) into MethodInvocation(530) at 1", "Insert SimpleName: copyNext(533) into MethodInvocation(538) at 0", "Insert InfixExpression: +(536) into MethodInvocation(538) at 1", "Insert SimpleName: row(537) into MethodInvocation(538) at 2", "Update SimpleName: setupRead(664) to setupEvaluatePeer", "Insert SimpleName: row(511) into InfixExpression: -(513) at 0", "Insert NumberLiteral: 1(512) into InfixExpression: -(513) at 1", "Insert SimpleName: row(534) into InfixExpression: +(536) at 0", "Insert NumberLiteral: 1(535) into InfixExpression: +(536) at 1", "Delete SimpleName: row(642)", "Delete SimpleName: currentRow(643)", "Delete VariableDeclarationFragment(644)", "Delete TextElement: setup incoming container for aggregateRecord()(800)", "Delete TagElement(801)", "Delete Javadoc(802)", "Delete SimpleName: aggregateRecord(857)", "Delete SimpleName: outputAggregatedValues(874)"]}}, {"Partition_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 3", "operations": ["INS SimpleName: getLogger to MethodInvocation at 1", "INS Modifier: final to FieldDeclaration at 2", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: logger to VariableDeclarationFragment at 0", "INS QualifiedName: org.slf4j.Logger to SimpleType: org.slf4j.Logger at 0", "INS QualifiedName: org.slf4j.LoggerFactory to MethodInvocation at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: org.slf4j.Logger to FieldDeclaration at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS TypeLiteral to MethodInvocation at 2", "INS FieldDeclaration to TypeDeclaration: class at 3", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleType: Partition to TypeLiteral at 0", "INS SimpleName: Partition to SimpleType: Partition at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 5", "INS PrimitiveType: long to FieldDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS SimpleName: mod to InfixExpression: * at 0", "INS SimpleName: out to Assignment: = at 0", "INS SimpleName: Math to MethodInvocation at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: trace to MethodInvocation at 1", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS SimpleName: length to InfixExpression: % at 0", "INS SimpleName: floor to VariableDeclarationFragment at 0", "INS SimpleName: ceil to InfixExpression: * at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: mod to VariableDeclarationFragment at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS InfixExpression: % to VariableDeclarationFragment at 1", "INS SimpleName: row_number to InfixExpression: - at 0", "INS SimpleName: ceil to InfixExpression: / at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: row_number to MethodInvocation at 3", "INS MethodInvocation to CastExpression at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: numTiles to SingleVariableDeclaration at 1", "INS Block to IfStatement at 2", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: Math to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 2", "INS InfixExpression: * to InfixExpression: <= at 1", "INS CastExpression to Assignment: = at 1", "INS SimpleName: ceil to MethodInvocation at 1", "INS SimpleName: numTiles to InfixExpression: / at 1", "INS SimpleName: numTiles to InfixExpression: / at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: out to VariableDeclarationFragment at 0", "INS CastExpression to InfixExpression: / at 0", "INS SimpleName: length to CastExpression at 1", "INS CastExpression to InfixExpression: / at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: row_number to InfixExpression: <= at 0", "INS ParenthesizedExpression to InfixExpression: / at 0", "INS PrimitiveType: int to MethodDeclaration at 1", "INS SimpleName: length to CastExpression at 1", "INS ExpressionStatement to Block at 4", "INS InfixExpression: - to ParenthesizedExpression at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to IfStatement at 1", "INS InfixExpression: <= to IfStatement at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: row_number to InfixExpression: / at 0", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: ceil to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: floor to InfixExpression: / at 1", "INS SimpleName: out to MethodInvocation at 6", "INS SimpleName: numTiles to InfixExpression: % at 1", "INS IfStatement to Block at 3", "INS ExpressionStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: / to MethodInvocation at 2", "INS SimpleName: out to ReturnStatement at 0", "INS PrimitiveType: double to CastExpression at 0", "INS SimpleName: out to Assignment: = at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: numTiles to MethodInvocation at 4", "INS InfixExpression: / to MethodInvocation at 2", "INS SimpleName: floor to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ReturnStatement to Block at 5", "INS StringLiteral: \"NTILE(row_number = {}, nt = {}, ct = {}) = {}\" to MethodInvocation at 2", "INS CastExpression to Assignment: = at 1", "INS SimpleName: Math to MethodInvocation at 0", "INS SimpleName: mod to InfixExpression: - at 1", "INS SimpleName: ceil to MethodInvocation at 1", "INS PrimitiveType: int to CastExpression at 0", "INS SimpleName: length to MethodInvocation at 5", "INS InfixExpression: / to MethodInvocation at 2", "INS PrimitiveType: double to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS PrimitiveType: int to CastExpression at 0", "INS InfixExpression: / to MethodInvocation at 2", "INS PrimitiveType: double to CastExpression at 0", "INS SimpleName: logger to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS SimpleName: ntile to MethodDeclaration at 2", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Math to MethodInvocation at 0", "INS PrimitiveType: double to VariableDeclarationStatement at 0", "INS SimpleName: ceil to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from int to long", "operations": ["UPD PrimitiveType: int from int to long", "UPD PrimitiveType: int from int to long", "UPD PrimitiveType: int from int to long"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 2", "MOV Modifier: private to FieldDeclaration at 0"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL PrimitiveType: int", "DEL FieldDeclaration"]}]}}, {"Partition_diff": {"operations": ["Insert FieldDeclaration(35) into TypeDeclaration: class(306) at 3", "Insert FieldDeclaration(46) into TypeDeclaration: class(306) at 5", "Insert MethodDeclaration(280) into TypeDeclaration: class(306) at 18", "Insert Modifier: private(22) into FieldDeclaration(35) at 0", "Insert Modifier: static(23) into FieldDeclaration(35) at 1", "Insert Modifier: final(24) into FieldDeclaration(35) at 2", "Insert SimpleType: org.slf4j.Logger(26) into FieldDeclaration(35) at 3", "Insert VariableDeclarationFragment(34) into FieldDeclaration(35) at 4", "Update PrimitiveType: int(24) to long", "Move Modifier: private(28) into FieldDeclaration(46) at 0", "Insert PrimitiveType: long(43) into FieldDeclaration(46) at 1", "Move VariableDeclarationFragment(31) into FieldDeclaration(46) at 2", "Update PrimitiveType: int(67) to long", "Insert Modifier: public(194) into MethodDeclaration(280) at 0", "Insert PrimitiveType: int(195) into MethodDeclaration(280) at 1", "Insert SimpleName: ntile(196) into MethodDeclaration(280) at 2", "Insert SingleVariableDeclaration(199) into MethodDeclaration(280) at 3", "Insert Block(279) into MethodDeclaration(280) at 4", "Insert QualifiedName: org.slf4j.Logger(25) into SimpleType: org.slf4j.Logger(26) at 0", "Insert SimpleName: logger(27) into VariableDeclarationFragment(34) at 0", "Insert MethodInvocation(33) into VariableDeclarationFragment(34) at 1", "Update PrimitiveType: int(85) to long", "Insert PrimitiveType: int(197) into SingleVariableDeclaration(199) at 0", "Insert SimpleName: numTiles(198) into SingleVariableDeclaration(199) at 1", "Insert VariableDeclarationStatement(206) into Block(279) at 0", "Insert VariableDeclarationStatement(218) into Block(279) at 1", "Insert VariableDeclarationStatement(222) into Block(279) at 2", "Insert IfStatement(267) into Block(279) at 3", "Insert ExpressionStatement(276) into Block(279) at 4", "Insert ReturnStatement(278) into Block(279) at 5", "Insert QualifiedName: org.slf4j.LoggerFactory(28) into MethodInvocation(33) at 0", "Insert SimpleName: getLogger(29) into MethodInvocation(33) at 1", "Insert TypeLiteral(32) into MethodInvocation(33) at 2", "Insert PrimitiveType: long(200) into VariableDeclarationStatement(206) at 0", "Insert VariableDeclarationFragment(205) into VariableDeclarationStatement(206) at 1", "Insert PrimitiveType: double(207) into VariableDeclarationStatement(218) at 0", "Insert VariableDeclarationFragment(217) into VariableDeclarationStatement(218) at 1", "Insert PrimitiveType: int(219) into VariableDeclarationStatement(222) at 0", "Insert VariableDeclarationFragment(221) into VariableDeclarationStatement(222) at 1", "Insert InfixExpression: <=(227) into IfStatement(267) at 0", "Insert Block(239) into IfStatement(267) at 1", "Insert Block(266) into IfStatement(267) at 2", "Insert MethodInvocation(275) into ExpressionStatement(276) at 0", "Insert SimpleName: out(277) into ReturnStatement(278) at 0", "Insert SimpleType: Partition(31) into TypeLiteral(32) at 0", "Insert SimpleName: mod(201) into VariableDeclarationFragment(205) at 0", "Insert InfixExpression: %(204) into VariableDeclarationFragment(205) at 1", "Insert SimpleName: ceil(208) into VariableDeclarationFragment(217) at 0", "Insert MethodInvocation(216) into VariableDeclarationFragment(217) at 1", "Insert SimpleName: out(220) into VariableDeclarationFragment(221) at 0", "Insert SimpleName: row_number(223) into InfixExpression: <=(227) at 0", "Insert InfixExpression: *(226) into InfixExpression: <=(227) at 1", "Insert ExpressionStatement(238) into Block(239) at 0", "Insert VariableDeclarationStatement(251) into Block(266) at 0", "Insert ExpressionStatement(265) into Block(266) at 1", "Insert SimpleName: logger(268) into MethodInvocation(275) at 0", "Insert SimpleName: trace(269) into MethodInvocation(275) at 1", "Insert StringLiteral: \"NTILE(row_number = {}, nt = {}, ct = {}) = {}\"(270) into MethodInvocation(275) at 2", "Insert SimpleName: row_number(271) into MethodInvocation(275) at 3", "Insert SimpleName: numTiles(272) into MethodInvocation(275) at 4", "Insert SimpleName: length(273) into MethodInvocation(275) at 5", "Insert SimpleName: out(274) into MethodInvocation(275) at 6", "Insert SimpleName: Partition(30) into SimpleType: Partition(31) at 0", "Insert SimpleName: length(202) into InfixExpression: %(204) at 0", "Insert SimpleName: numTiles(203) into InfixExpression: %(204) at 1", "Insert SimpleName: Math(209) into MethodInvocation(216) at 0", "Insert SimpleName: ceil(210) into MethodInvocation(216) at 1", "Insert InfixExpression: /(215) into MethodInvocation(216) at 2", "Insert SimpleName: mod(224) into InfixExpression: *(226) at 0", "Insert SimpleName: ceil(225) into InfixExpression: *(226) at 1", "Insert Assignment: =(237) into ExpressionStatement(238) at 0", "Insert PrimitiveType: double(240) into VariableDeclarationStatement(251) at 0", "Insert VariableDeclarationFragment(250) into VariableDeclarationStatement(251) at 1", "Insert Assignment: =(264) into ExpressionStatement(265) at 0", "Insert CastExpression(213) into InfixExpression: /(215) at 0", "Insert SimpleName: numTiles(214) into InfixExpression: /(215) at 1", "Insert SimpleName: out(228) into Assignment: =(237) at 0", "Insert CastExpression(236) into Assignment: =(237) at 1", "Insert SimpleName: floor(241) into VariableDeclarationFragment(250) at 0", "Insert MethodInvocation(249) into VariableDeclarationFragment(250) at 1", "Insert SimpleName: out(252) into Assignment: =(264) at 0", "Insert CastExpression(263) into Assignment: =(264) at 1", "Insert PrimitiveType: double(211) into CastExpression(213) at 0", "Insert SimpleName: length(212) into CastExpression(213) at 1", "Insert PrimitiveType: int(229) into CastExpression(236) at 0", "Insert MethodInvocation(235) into CastExpression(236) at 1", "Insert SimpleName: Math(242) into MethodInvocation(249) at 0", "Insert SimpleName: floor(243) into MethodInvocation(249) at 1", "Insert InfixExpression: /(248) into MethodInvocation(249) at 2", "Insert PrimitiveType: int(253) into CastExpression(263) at 0", "Insert MethodInvocation(262) into CastExpression(263) at 1", "Insert SimpleName: Math(230) into MethodInvocation(235) at 0", "Insert SimpleName: ceil(231) into MethodInvocation(235) at 1", "Insert InfixExpression: /(234) into MethodInvocation(235) at 2", "Insert CastExpression(246) into InfixExpression: /(248) at 0", "Insert SimpleName: numTiles(247) into InfixExpression: /(248) at 1", "Insert SimpleName: Math(254) into MethodInvocation(262) at 0", "Insert SimpleName: ceil(255) into MethodInvocation(262) at 1", "Insert InfixExpression: /(261) into MethodInvocation(262) at 2", "Insert SimpleName: row_number(232) into InfixExpression: /(234) at 0", "Insert SimpleName: ceil(233) into InfixExpression: /(234) at 1", "Insert PrimitiveType: double(244) into CastExpression(246) at 0", "Insert SimpleName: length(245) into CastExpression(246) at 1", "Insert ParenthesizedExpression(259) into InfixExpression: /(261) at 0", "Insert SimpleName: floor(260) into InfixExpression: /(261) at 1", "Insert InfixExpression: -(258) into ParenthesizedExpression(259) at 0", "Insert SimpleName: row_number(256) into InfixExpression: -(258) at 0", "Insert SimpleName: mod(257) into InfixExpression: -(258) at 1", "Delete PrimitiveType: int(29)", "Delete FieldDeclaration(32)"]}}, {"WindowDataBatch_cluster": {"actions": [{"root": "UPDATE from org.apache.drill.exec.ops.FragmentContext to org.apache.drill.exec.ops.OperatorContext", "operations": ["UPD QualifiedName: org.apache.drill.exec.ops.FragmentContext from org.apache.drill.exec.ops.FragmentContext to org.apache.drill.exec.ops.OperatorContext"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleName: container to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleType: VectorContainer to MethodDeclaration at 1", "INS Modifier: public to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: getContainer to MethodDeclaration at 2", "INS SimpleName: VectorContainer to SimpleType: VectorContainer at 0", "INS Block to MethodDeclaration at 3"]}, {"root": "UPDATE from FragmentContext to OperatorContext", "operations": ["UPD SimpleType: FragmentContext from FragmentContext to OperatorContext", "UPD SimpleType: FragmentContext from FragmentContext to OperatorContext", "UPD SimpleType: FragmentContext from FragmentContext to OperatorContext", "UPD SimpleName: FragmentContext from FragmentContext to OperatorContext", "UPD SimpleName: FragmentContext from FragmentContext to OperatorContext", "UPD SimpleName: FragmentContext from FragmentContext to OperatorContext"]}, {"root": "UPDATE from context to oContext", "operations": ["UPD SimpleName: context from context to oContext", "UPD SimpleName: context from context to oContext", "UPD SimpleName: context from context to oContext", "UPD SimpleName: context from context to oContext", "UPD SimpleName: context from context to oContext"]}, {"root": "INS SimpleName: oContext to ClassInstanceCreation at 1", "operations": ["INS SimpleName: oContext to ClassInstanceCreation at 1"]}]}}, {"WindowDataBatch_diff": {"operations": ["Update QualifiedName: org.apache.drill.exec.ops.FragmentContext(21) to org.apache.drill.exec.ops.OperatorContext", "Insert MethodDeclaration(183) into TypeDeclaration: class(273) at 8", "Update SimpleType: FragmentContext(48) to OperatorContext", "Update SimpleType: FragmentContext(169) to OperatorContext", "Insert Modifier: public(176) into MethodDeclaration(183) at 0", "Insert SimpleType: VectorContainer(178) into MethodDeclaration(183) at 1", "Insert SimpleName: getContainer(179) into MethodDeclaration(183) at 2", "Insert Block(182) into MethodDeclaration(183) at 3", "Update SimpleName: FragmentContext(47) to OperatorContext", "Update SimpleName: context(49) to oContext", "Update SimpleType: FragmentContext(74) to OperatorContext", "Update SimpleName: context(75) to oContext", "Update SimpleName: FragmentContext(168) to OperatorContext", "Insert SimpleName: VectorContainer(177) into SimpleType: VectorContainer(178) at 0", "Insert ReturnStatement(181) into Block(182) at 0", "Update SimpleName: FragmentContext(73) to OperatorContext", "Update SimpleName: context(171) to oContext", "Insert SimpleName: container(180) into ReturnStatement(181) at 0", "Update SimpleName: context(80) to oContext", "Update SimpleName: context(78) to oContext", "Insert SimpleName: oContext(143) into ClassInstanceCreation(144) at 1"]}}, {"WindowFrameRecordBatch_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 9"]}, {"root": "UPDATE from org.apache.drill.common.types.Types to org.apache.drill.common.exceptions.UserException", "operations": ["UPD QualifiedName: org.apache.drill.common.types.Types from org.apache.drill.common.types.Types to org.apache.drill.common.exceptions.UserException"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: generateFramer to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: ClassTransformationException to MethodDeclaration at 7", "INS ParameterizedType: List<WindowFunction> to SingleVariableDeclaration at 1", "INS EnhancedForStatement to Block at 3", "INS SimpleName: List to SimpleType: List at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: functions to SingleVariableDeclaration at 2", "INS VariableDeclarationStatement to Block at 2", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS Modifier: final to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleType: List to ParameterizedType: List<WindowFunction> at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS VariableDeclarationStatement to Block at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: functions to EnhancedForStatement at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS Block to Block at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: keyExprs to SingleVariableDeclaration at 2", "INS Modifier: final to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: ClassTransformationException to SimpleType: ClassTransformationException at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleType: IOException to MethodDeclaration at 6", "INS Block to Block at 2", "INS Modifier: final to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS Block to MethodDeclaration at 8", "INS ReturnStatement to Block at 5"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: WindowFramer to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS VariableDeclarationStatement to Block at 13", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS Modifier: final to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 13", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: functions to MethodInvocation at 3", "INS SimpleName: framer to VariableDeclarationFragment at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 2", "MOV ParameterizedType: List<LogicalExpression> to SingleVariableDeclaration at 1"]}, {"root": "INS Modifier: final to SingleVariableDeclaration at 0", "operations": ["INS Modifier: final to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from winExprs to orderExprs", "operations": ["UPD SimpleName: winExprs from winExprs to orderExprs", "UPD SimpleName: valueExprs from valueExprs to orderExprs"]}, {"root": "UPDATE from Map<WindowFunction,TypedFieldId> to List<WindowFunction>", "operations": ["UPD ParameterizedType: Map<WindowFunction,TypedFieldId> from Map<WindowFunction,TypedFieldId> to List<WindowFunction>"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: WindowFramer to VariableDeclarationStatement at 1"]}, {"root": "MOVE from ParameterizedType: List<WindowFunction>", "operations": ["MOV SimpleType: WindowFunction to ParameterizedType: List<WindowFunction> at 1"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV Block to EnhancedForStatement at 2"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "UPDATE from Map to List", "operations": ["UPD SimpleType: Map from Map to List", "UPD SimpleName: Map from Map to List"]}, {"root": "MOVE from ParameterizedType: Map<WindowFunction,TypedFieldId>", "operations": ["MOV SimpleType: WindowFunction to ParameterizedType: Map<WindowFunction,TypedFieldId> at 1"]}, {"root": "UPDATE from aggExprs to functions", "operations": ["UPD SimpleName: aggExprs from aggExprs to functions", "UPD SimpleName: aggExprs from aggExprs to functions"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS IfStatement to Block at 0", "INS InstanceofExpression to ParenthesizedExpression at 0", "INS ParenthesizedExpression to PrefixExpression: ! at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS MethodInvocation to InstanceofExpression at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2", "MOV ExpressionStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 1"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS MethodInvocation to IfStatement at 0", "INS Block to IfStatement at 1", "INS IfStatement to Block at 3"]}, {"root": "INS SimpleName: oContext to MethodInvocation at 4", "operations": ["INS SimpleName: oContext to MethodInvocation at 4"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: GeneratorMapping to VariableDeclarationStatement at 1", "MOV VariableDeclarationFragment to VariableDeclarationStatement at 2"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: MappingSet to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: MappingSet to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 2", "MOV SimpleType: GeneratorMapping to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: MappingSet to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: MappingSet to VariableDeclarationStatement at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleName: functions to SingleVariableDeclaration at 2", "MOV Modifier: final to SingleVariableDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: WindowFunction to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from functions to function", "operations": ["UPD SimpleName: functions from functions to function", "UPD SimpleName: cg from cg to function"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS InfixExpression: == to IfStatement at 0", "INS Block to IfStatement at 1", "INS IfStatement to Block at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: expr to InfixExpression: == at 0", "INS ContinueStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from LogicalExpression to FunctionCall", "operations": ["UPD SimpleType: LogicalExpression from LogicalExpression to FunctionCall", "UPD SimpleName: LogicalExpression from LogicalExpression to FunctionCall"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: WindowFunction to VariableDeclarationStatement at 1"]}, {"root": "UPDATE from collector to generateFramer", "operations": ["UPD SimpleName: collector from collector to generateFramer"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: collector to MethodInvocation at 0"]}, {"root": "UPDATE from aggExprs to keyExprs", "operations": ["UPD SimpleName: aggExprs from aggExprs to keyExprs"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: aggExprs to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: winExprs to MethodInvocation at 2"]}, {"root": "UPDATE from IS_SAME_RECORD_BATCH_DATA_READ to IS_SAME_PARTITION_READ", "operations": ["UPD SimpleName: IS_SAME_RECORD_BATCH_DATA_READ from IS_SAME_RECORD_BATCH_DATA_READ to IS_SAME_PARTITION_READ", "UPD SimpleName: IS_SAME_RECORD_BATCH_DATA_READ from IS_SAME_RECORD_BATCH_DATA_READ to IS_SAME_PARTITION_READ", "UPD SimpleName: IS_SAME_RECORD_BATCH_DATA_READ from IS_SAME_RECORD_BATCH_DATA_READ to IS_SAME_PARTITION_READ", "UPD SimpleName: IS_SAME_RECORD_BATCH_DATA_READ from IS_SAME_RECORD_BATCH_DATA_READ to IS_SAME_PARTITION_READ", "UPD SimpleName: IS_SAME_RECORD_BATCH_DATA_READ from IS_SAME_RECORD_BATCH_DATA_READ to IS_SAME_PARTITION_READ"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV ClassInstanceCreation to VariableDeclarationFragment at 1", "MOV SimpleName: isaB1 to VariableDeclarationFragment at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: isaB2 to VariableDeclarationFragment at 0", "MOV ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from IS_SAME_PEER to IS_SAME_PEER_READ", "operations": ["UPD SimpleName: IS_SAME_PEER from IS_SAME_PEER to IS_SAME_PEER_READ", "UPD SimpleName: IS_SAME_PEER from IS_SAME_PEER to IS_SAME_PEER_READ", "UPD SimpleName: IS_SAME_PEER from IS_SAME_PEER to IS_SAME_PEER_READ", "UPD SimpleName: IS_SAME_PEER from IS_SAME_PEER to IS_SAME_PEER_READ", "UPD SimpleName: IS_SAME_PEER from IS_SAME_PEER to IS_SAME_PEER_READ"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: isaP1 to VariableDeclarationFragment at 0", "MOV ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV ClassInstanceCreation to VariableDeclarationFragment at 1", "MOV SimpleName: isaP2 to VariableDeclarationFragment at 0"]}, {"root": "INS ThrowStatement to Block at 0", "operations": ["INS MethodInvocation to ThrowStatement at 0", "INS StringLiteral: \"Unsupported window function '%s'\" to MethodInvocation at 2", "INS ThrowStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS SimpleName: call to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: call to VariableDeclarationFragment at 0"]}, {"root": "INS CastExpression to VariableDeclarationFragment at 1", "operations": ["INS CastExpression to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from outputField to winfun", "operations": ["UPD SimpleName: outputField from outputField to winfun", "UPD SimpleName: container from container to winfun"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getValueVectorId to MethodInvocation at 1", "MOV SimpleName: container to MethodInvocation at 0"]}, {"root": "UPDATE from getValueVectorId to materialize", "operations": ["UPD SimpleName: getValueVectorId from getValueVectorId to materialize"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ne to MethodInvocation at 2", "MOV SimpleName: getRef to MethodInvocation at 3"]}, {"root": "UPDATE from getRef to container", "operations": ["UPD SimpleName: getRef from getRef to container"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3", "MOV MethodInvocation to MethodInvocation at 4"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: MappingSet to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: MappingSet to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: MappingSet to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: MappingSet to ClassInstanceCreation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getEvalBlock to MethodInvocation at 1", "MOV SimpleName: cg to MethodInvocation at 0"]}, {"root": "UPDATE from getEvalBlock to generateCode", "operations": ["UPD SimpleName: getEvalBlock from getEvalBlock to generateCode"]}, {"root": "UPDATE from add to cg", "operations": ["UPD SimpleName: add from add to cg"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: WindowDataBatch to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: oContext to ClassInstanceCreation at 3", "operations": ["INS SimpleName: oContext to ClassInstanceCreation at 3"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: FunctionCall to CastExpression at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 5", "MOV MethodInvocation to CastExpression at 1"]}, {"root": "UPDATE from MaterializedField to WindowFunction", "operations": ["UPD SimpleName: MaterializedField from MaterializedField to WindowFunction"]}, {"root": "UPDATE from expr to fromExpression", "operations": ["UPD SimpleName: expr from expr to fromExpression"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: expr to MethodInvocation at 1", "MOV SimpleName: getMajorType to MethodInvocation at 2"]}, {"root": "UPDATE from getMajorType to call", "operations": ["UPD SimpleName: getMajorType from getMajorType to call"]}, {"root": "UPDATE from materialize to materializeAndCheckErrors", "operations": ["UPD SimpleName: materialize from materialize to materializeAndCheckErrors", "UPD SimpleName: materialize from materialize to materializeAndCheckErrors"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: fromExpression to MethodInvocation at 1", "MOV SimpleName: WindowFunction to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from InstanceofExpression", "operations": ["MOV SimpleType: FunctionCall to InstanceofExpression at 1"]}, {"root": "UPDATE from outputField to build", "operations": ["UPD SimpleName: outputField from outputField to build"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: outputField to MethodInvocation at 1"]}, {"root": "UPDATE from container to logger", "operations": ["UPD SimpleName: container from container to logger"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: container to MethodInvocation at 2"]}, {"root": "INS SimpleName: winfun to MethodInvocation at 2", "operations": ["INS SimpleName: winfun to MethodInvocation at 2"]}, {"root": "UPDATE from WindowFunction to ne", "operations": ["UPD SimpleName: WindowFunction from WindowFunction to ne"]}, {"root": "UPDATE from fromExpression to getExpr", "operations": ["UPD SimpleName: fromExpression from fromExpression to getExpr"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from getMajorType to message", "operations": ["UPD SimpleName: getMajorType from getMajorType to message"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getMajorType to MethodInvocation at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: WindowDataBatch to ClassInstanceCreation at 0"]}, {"root": "UPDATE from context to oContext", "operations": ["UPD SimpleName: context from context to oContext"]}, {"root": "UPDATE from ne to UserException", "operations": ["UPD SimpleName: ne from ne to UserException"]}, {"root": "UPDATE from getRef to functionError", "operations": ["UPD SimpleName: getRef from getRef to functionError"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.collect.Maps", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.codemodel.JExpression", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.codemodel.JInvocation", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.codemodel.JVar"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.expression.ErrorCollector"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.expression.ErrorCollectorImpl"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.types.TypeProtos", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.expr.ValueVectorWriteExpression", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.record.MaterializedField", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.record.TypedFieldId", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.vector.ValueVector", "DEL ImportDeclaration"]}, {"root": "DEL TextElement: Doesn't support distinct partitions: multiple window with different PARTITION BY clauses.", "operations": ["DEL TextElement: Doesn't support distinct partitions: multiple window with different PARTITION BY clauses."]}, {"root": "DEL EnumDeclaration", "operations": ["DEL SimpleName: fromExpression", "DEL Modifier: final", "DEL SimpleName: valueOf", "DEL SimpleName: CUME_DIST", "DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleName: useDouble", "DEL SimpleName: useDouble", "DEL TextElement: Describes supported window functions and if they output FLOAT8 or BIGINT", "DEL TextElement: Extract the WindowFunction corresponding to the logical expression", "DEL ReturnStatement", "DEL BooleanLiteral: true", "DEL BooleanLiteral: false", "DEL SingleVariableDeclaration", "DEL Block", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: expr", "DEL BooleanLiteral: true", "DEL VariableDeclarationFragment", "DEL ParenthesizedExpression", "DEL SimpleName: e", "DEL NullLiteral", "DEL Modifier: final", "DEL SimpleName: useDouble", "DEL TextElement:  WindowFunction or null if the logical expression is not a window function", "DEL SimpleName: Types", "DEL SimpleName: expr", "DEL SimpleType: String", "DEL BooleanLiteral: false", "DEL SimpleType: LogicalExpression", "DEL MethodDeclaration", "DEL EnumDeclaration", "DEL SimpleName: getMajorType", "DEL NullLiteral", "DEL Modifier: static", "DEL SimpleName: name", "DEL FieldAccess", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL EnumConstantDeclaration", "DEL TagElement: @param", "DEL PrefixExpression: !", "DEL QualifiedName: TypeProtos.MinorType.BIGINT", "DEL MethodDeclaration", "DEL SimpleType: TypeProtos.MajorType", "DEL MethodDeclaration", "DEL SimpleName: String", "DEL Block", "DEL Block", "DEL SimpleName: PERCENT_RANK", "DEL SingleVariableDeclaration", "DEL TextElement:  logical expression", "DEL ConditionalExpression", "DEL SimpleName: WindowFunction", "DEL EnumConstantDeclaration", "DEL Modifier: final", "DEL SimpleName: required", "DEL SimpleName: getName", "DEL SimpleName: LogicalExpression", "DEL CatchClause", "DEL SimpleName: WindowFunction", "DEL SimpleName: useDouble", "DEL SimpleName: expr", "DEL InstanceofExpression", "DEL Block", "DEL Modifier: private", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: WindowFunction", "DEL ReturnStatement", "DEL Modifier: private", "DEL EnumConstantDeclaration", "DEL TagElement", "DEL SimpleName: required", "DEL SimpleName: useDouble", "DEL TryStatement", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL Modifier: public", "DEL ParenthesizedExpression", "DEL Javadoc", "DEL EnumConstantDeclaration", "DEL QualifiedName: TypeProtos.MinorType.FLOAT8", "DEL Block", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: ROW_NUMBER", "DEL Modifier: public", "DEL CastExpression", "DEL Assignment: =", "DEL SimpleName: DENSE_RANK", "DEL SimpleName: expr", "DEL SimpleName: IllegalArgumentException", "DEL QualifiedName: TypeProtos.MajorType", "DEL SimpleName: name", "DEL FieldDeclaration", "DEL TagElement", "DEL BooleanLiteral: false", "DEL EnumConstantDeclaration", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: RANK", "DEL ExpressionStatement", "DEL SimpleName: Types", "DEL ReturnStatement", "DEL TagElement: @return", "DEL PrimitiveType: boolean", "DEL SimpleName: toUpperCase", "DEL IfStatement"]}, {"root": "DEL TextElement: The previous scenario applies when we don't have an ORDER BY clause, otherwise a batch can be processed", "operations": ["DEL TextElement: The previous scenario applies when we don't have an ORDER BY clause, otherwise a batch can be processed"]}, {"root": "DEL TextElement: as soon as we reach the final peer row of the batch's last row (we find the end of the last frame of the batch).", "operations": ["DEL TextElement: as soon as we reach the final peer row of the batch's last row (we find the end of the last frame of the batch)."]}, {"root": "DEL TextElement: </p>", "operations": ["DEL TextElement: </p>"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getContext"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL Modifier: final", "DEL VariableDeclarationStatement"]}, {"root": "DEL SimpleType: TypedFieldId", "operations": ["DEL SimpleName: TypedFieldId", "DEL SimpleType: TypedFieldId"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL SimpleName: newHashMap", "DEL SimpleName: winExprs", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: Maps"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: ErrorCollector", "DEL SimpleType: ErrorCollectorImpl", "DEL SimpleName: collector", "DEL SimpleName: ErrorCollectorImpl", "DEL Modifier: final", "DEL ClassInstanceCreation", "DEL SimpleType: ErrorCollector"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: MaterializedField", "DEL VariableDeclarationStatement", "DEL SimpleName: create", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: MaterializedField", "DEL SimpleType: MaterializedField", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: outputField", "DEL SimpleName: wf"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: addOrGet", "DEL SimpleName: container", "DEL VariableDeclarationFragment", "DEL SimpleName: ValueVector", "DEL VariableDeclarationStatement", "DEL SimpleType: ValueVector", "DEL SimpleName: vv", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: allocateNew", "DEL ExpressionStatement", "DEL SimpleName: vv"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: getValueVectorId", "DEL ExpressionStatement", "DEL SimpleName: getRef", "DEL SimpleName: wf", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: ne", "DEL SimpleName: winExprs", "DEL MethodInvocation", "DEL SimpleName: put"]}, {"root": "DEL SimpleName: expr", "operations": ["DEL SimpleName: expr"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: ExpressionTreeMaterializer", "DEL MethodInvocation", "DEL SimpleName: materialize", "DEL SimpleName: batch", "DEL SimpleName: collector"]}, {"root": "DEL SimpleType: MaterializedField", "operations": ["DEL SimpleName: MaterializedField", "DEL SimpleType: MaterializedField"]}, {"root": "DEL SimpleName: create", "operations": ["DEL SimpleName: create"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: ne", "DEL SimpleName: getRef", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: expr", "DEL SimpleType: ValueVectorWriteExpression", "DEL SimpleName: id", "DEL ClassInstanceCreation", "DEL SimpleName: ValueVectorWriteExpression", "DEL BooleanLiteral: true"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: wf", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL Modifier: final"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: container", "DEL ExpressionStatement", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: vv", "DEL MethodInvocation", "DEL SimpleType: TypedFieldId", "DEL VariableDeclarationFragment", "DEL SimpleName: wf", "DEL VariableDeclarationFragment", "DEL SimpleName: TypedFieldId", "DEL SimpleName: addOrGet", "DEL SimpleType: ValueVector", "DEL SimpleName: vv", "DEL SimpleName: allocateNew", "DEL MethodInvocation", "DEL NullLiteral", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: id", "DEL SimpleName: outputField", "DEL InfixExpression: !=", "DEL SimpleName: ValueVector"]}, {"root": "DEL SimpleName: collector", "operations": ["DEL SimpleName: collector"]}, {"root": "DEL SimpleName: collector", "operations": ["DEL SimpleName: collector"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL ClassInstanceCreation", "DEL StringLiteral: \"Failure while materializing expression. \"", "DEL SimpleType: SchemaChangeException", "DEL MethodInvocation", "DEL ThrowStatement", "DEL Block", "DEL SimpleName: collector", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL SimpleName: hasErrors", "DEL SimpleName: SchemaChangeException", "DEL SimpleName: toErrorString"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: cg", "DEL ExpressionStatement", "DEL SimpleName: setupOutputAggregatedValues"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: cg", "DEL ExpressionStatement", "DEL SimpleName: setupAddWindowValue"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: framer", "DEL VariableDeclarationStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: get", "DEL Modifier: final", "DEL SimpleName: getOutgoing", "DEL SimpleName: JVar", "DEL SimpleName: cg", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: cg", "DEL VariableDeclarationStatement", "DEL SimpleName: getMappingSet", "DEL SimpleType: JVar", "DEL SimpleName: vv", "DEL MethodInvocation", "DEL SimpleName: functions", "DEL VariableDeclarationFragment", "DEL SimpleName: declareVectorValueSetupAndMember", "DEL SimpleName: function", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL Modifier: final", "DEL SimpleName: getValueWriteIndex", "DEL SimpleName: outIndex", "DEL SimpleName: cg", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleType: JExpression", "DEL SimpleName: getMappingSet", "DEL SimpleName: JExpression", "DEL VariableDeclarationFragment", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: outIndex", "DEL MethodInvocation", "DEL SimpleName: vv", "DEL SimpleName: function", "DEL SimpleName: setMethod", "DEL MethodInvocation", "DEL SimpleType: JInvocation", "DEL MethodInvocation", "DEL SimpleName: arg", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: invoke", "DEL SimpleName: name", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"partition.\"", "DEL StringLiteral: \"getMutator\"", "DEL SimpleName: invoke", "DEL InfixExpression: +", "DEL SimpleName: JInvocation", "DEL SimpleName: JExpr", "DEL MethodInvocation", "DEL SimpleName: arg", "DEL SimpleName: direct", "DEL StringLiteral: \"setSafe\"", "DEL VariableDeclarationStatement", "DEL SimpleName: toLowerCase"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: setMethod", "operations": ["DEL SimpleName: setMethod"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL FieldDeclaration", "DEL Modifier: private", "DEL Modifier: static"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL Modifier: private"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL FieldDeclaration", "DEL Modifier: final", "DEL VariableDeclarationFragment"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL Modifier: static", "DEL Modifier: private", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL Modifier: private", "DEL FieldDeclaration", "DEL SimpleType: MappingSet", "DEL SimpleName: MappingSet"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: EVAL_INSIDE", "DEL Modifier: static", "DEL Modifier: private", "DEL SimpleName: GeneratorMapping", "DEL VariableDeclarationFragment", "DEL SimpleName: GeneratorMapping", "DEL MethodInvocation", "DEL NullLiteral", "DEL FieldDeclaration", "DEL StringLiteral: \"aggregateRecord\"", "DEL SimpleType: GeneratorMapping", "DEL Modifier: final", "DEL SimpleName: create", "DEL NullLiteral", "DEL StringLiteral: \"setupRead\""]}, {"root": "DEL FieldDeclaration", "operations": ["DEL StringLiteral: \"resetValues\"", "DEL StringLiteral: \"setupWrite\"", "DEL Modifier: private", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleType: GeneratorMapping", "DEL SimpleName: GeneratorMapping", "DEL Modifier: static", "DEL SimpleName: EVAL_OUTSIDE", "DEL SimpleName: GeneratorMapping", "DEL SimpleName: create", "DEL StringLiteral: \"cleanup\"", "DEL Modifier: final", "DEL StringLiteral: \"outputAggregatedValues\""]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL StringLiteral: \"outIndex\"", "DEL StringLiteral: \"index\"", "DEL SimpleName: EVAL_INSIDE", "DEL Modifier: final", "DEL SimpleName: EVAL_OUTSIDE", "DEL ClassInstanceCreation", "DEL SimpleName: EVAL_INSIDE", "DEL SimpleName: eval", "DEL VariableDeclarationFragment", "DEL SimpleType: MappingSet", "DEL SimpleName: MappingSet", "DEL Modifier: private"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: cg", "DEL Block", "DEL SimpleName: addExpr", "DEL EnhancedForStatement", "DEL SimpleType: ClassGenerator", "DEL SingleVariableDeclaration", "DEL SimpleName: ex", "DEL TagElement", "DEL TextElement: setup for aggregateRecord() and outputAggregatedValues()", "DEL SimpleName: setupOutputAggregatedValues", "DEL SimpleName: ClassGenerator", "DEL SimpleName: eval", "DEL ExpressionStatement", "DEL SimpleType: LogicalExpression", "DEL SimpleName: cg", "DEL PrimitiveType: void", "DEL Block", "DEL SimpleName: LogicalExpression", "DEL MethodInvocation", "DEL ParameterizedType: ClassGenerator<WindowFramer>", "DEL MethodDeclaration", "DEL Modifier: private", "DEL SimpleName: cg", "DEL SimpleName: ex", "DEL MethodInvocation", "DEL SimpleName: valueExprs", "DEL SimpleName: setMappingSet"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL SimpleName: cg", "DEL SimpleName: eval", "DEL SingleVariableDeclaration", "DEL SimpleType: WindowFunction", "DEL SingleVariableDeclaration", "DEL SimpleName: cg", "DEL SimpleType: Map", "DEL MethodInvocation", "DEL SimpleName: WindowFunction", "DEL PrimitiveType: void", "DEL SimpleName: WindowFramer", "DEL Block", "DEL TagElement", "DEL SimpleType: ClassGenerator", "DEL SimpleType: TypedFieldId", "DEL ParameterizedType: ClassGenerator<WindowFramer>", "DEL SimpleName: function", "DEL SimpleName: Map", "DEL EnhancedForStatement", "DEL Modifier: final", "DEL ParameterizedType: Map<WindowFunction,TypedFieldId>", "DEL ExpressionStatement", "DEL SimpleName: functions", "DEL TextElement: generate code to write \"computed\" window function values into their respective value vectors", "DEL SimpleName: setupAddWindowValue", "DEL Javadoc", "DEL Modifier: private", "DEL SimpleName: ClassGenerator", "DEL SimpleType: WindowFramer", "DEL MethodDeclaration", "DEL SimpleName: TypedFieldId", "DEL SimpleName: setMappingSet", "DEL SimpleName: keySet", "DEL SingleVariableDeclaration"]}]}}, {"WindowFrameRecordBatch_diff": {"operations": ["Move ImportDeclaration(48) into CompilationUnit(1074) at 9", "Update QualifiedName: org.apache.drill.common.types.Types(47) to org.apache.drill.common.exceptions.UserException", "Insert MethodDeclaration(862) into TypeDeclaration: class(1073) at 14", "Move VariableDeclarationStatement(651) into Block(683) at 6", "Insert Modifier: private(685) into MethodDeclaration(862) at 0", "Move SimpleType: WindowFramer(959) into MethodDeclaration(862) at 1", "Insert SimpleName: generateFramer(688) into MethodDeclaration(862) at 2", "Insert SingleVariableDeclaration(696) into MethodDeclaration(862) at 3", "Move SingleVariableDeclaration(1261) into MethodDeclaration(862) at 4", "Insert SingleVariableDeclaration(712) into MethodDeclaration(862) at 5", "Insert SimpleType: IOException(714) into MethodDeclaration(862) at 6", "Insert SimpleType: ClassTransformationException(716) into MethodDeclaration(862) at 7", "Insert Block(861) into MethodDeclaration(862) at 8", "Insert VariableDeclarationStatement(673) into Block(683) at 11", "Insert Modifier: final(689) into SingleVariableDeclaration(696) at 0", "Move ParameterizedType: List<LogicalExpression>(631) into SingleVariableDeclaration(696) at 1", "Insert SimpleName: keyExprs(695) into SingleVariableDeclaration(696) at 2", "Insert Modifier: final(697) into SingleVariableDeclaration(704) at 0", "Update SimpleName: valueExprs(1260) to orderExprs", "Insert Modifier: final(705) into SingleVariableDeclaration(712) at 0", "Insert ParameterizedType: List<WindowFunction>(710) into SingleVariableDeclaration(712) at 1", "Insert SimpleName: functions(711) into SingleVariableDeclaration(712) at 2", "Insert SimpleName: IOException(713) into SimpleType: IOException(714) at 0", "Insert SimpleName: ClassTransformationException(715) into SimpleType: ClassTransformationException(716) at 0", "Move VariableDeclarationStatement(925) into Block(861) at 0", "Insert Block(783) into Block(861) at 1", "Insert Block(834) into Block(861) at 2", "Insert EnhancedForStatement(847) into Block(861) at 3", "Move ExpressionStatement(957) into Block(861) at 4", "Insert ReturnStatement(860) into Block(861) at 5", "Update ParameterizedType: Map<WindowFunction,TypedFieldId>(645) to List<WindowFunction>", "Move VariableDeclarationFragment(636) into VariableDeclarationStatement(516) at 2", "Insert Modifier: final(663) into VariableDeclarationStatement(673) at 0", "Move SimpleType: WindowFramer(1251) into VariableDeclarationStatement(673) at 1", "Insert VariableDeclarationFragment(672) into VariableDeclarationStatement(673) at 2", "Insert SimpleType: List(707) into ParameterizedType: List<WindowFunction>(710) at 0", "Move SimpleType: WindowFunction(713) into ParameterizedType: List<WindowFunction>(710) at 1", "Insert VariableDeclarationStatement(745) into Block(783) at 0", "Insert VariableDeclarationStatement(760) into Block(783) at 1", "Insert VariableDeclarationStatement(775) into Block(783) at 2", "Move ExpressionStatement(932) into Block(783) at 3", "Insert VariableDeclarationStatement(796) into Block(834) at 0", "Insert VariableDeclarationStatement(811) into Block(834) at 1", "Insert VariableDeclarationStatement(826) into Block(834) at 2", "Move ExpressionStatement(939) into Block(834) at 3", "Insert SingleVariableDeclaration(839) into EnhancedForStatement(847) at 0", "Insert SimpleName: functions(840) into EnhancedForStatement(847) at 1", "Move Block(1380) into EnhancedForStatement(847) at 2", "Move MethodInvocation(964) into ReturnStatement(860) at 0", "Update SimpleType: Map(640) to List", "Move SimpleType: WindowFunction(216) into ParameterizedType: List<WindowFunction>(510) at 1", "Update SimpleName: aggExprs(632) to functions", "Insert IfStatement(565) into Block(603) at 0", "Move VariableDeclarationStatement(782) into Block(603) at 1", "Move VariableDeclarationStatement(797) into Block(603) at 2", "Insert IfStatement(602) into Block(603) at 3", "Insert SimpleName: framer(666) into VariableDeclarationFragment(672) at 0", "Insert MethodInvocation(671) into VariableDeclarationFragment(672) at 1", "Insert SimpleName: oContext(678) into MethodInvocation(679) at 4", "Insert SimpleName: List(706) into SimpleType: List(707) at 0", "Insert Modifier: final(733) into VariableDeclarationStatement(745) at 0", "Move SimpleType: GeneratorMapping(981) into VariableDeclarationStatement(745) at 1", "Move VariableDeclarationFragment(990) into VariableDeclarationStatement(745) at 2", "Insert Modifier: final(746) into VariableDeclarationStatement(760) at 0", "Move SimpleType: MappingSet(1042) into VariableDeclarationStatement(760) at 1", "Insert VariableDeclarationFragment(759) into VariableDeclarationStatement(760) at 2", "Insert Modifier: final(761) into VariableDeclarationStatement(775) at 0", "Move SimpleType: MappingSet(1011) into VariableDeclarationStatement(775) at 1", "Insert VariableDeclarationFragment(774) into VariableDeclarationStatement(775) at 2", "Insert Modifier: final(784) into VariableDeclarationStatement(796) at 0", "Move SimpleType: GeneratorMapping(1028) into VariableDeclarationStatement(796) at 1", "Move VariableDeclarationFragment(1037) into VariableDeclarationStatement(796) at 2", "Insert Modifier: final(797) into VariableDeclarationStatement(811) at 0", "Move SimpleType: MappingSet(995) into VariableDeclarationStatement(811) at 1", "Insert VariableDeclarationFragment(810) into VariableDeclarationStatement(811) at 2", "Insert Modifier: final(812) into VariableDeclarationStatement(826) at 0", "Move SimpleType: MappingSet(1233) into VariableDeclarationStatement(826) at 1", "Insert VariableDeclarationFragment(825) into VariableDeclarationStatement(826) at 2", "Move Modifier: final(1295) into SingleVariableDeclaration(839) at 0", "Move SimpleType: WindowFunction(1299) into SingleVariableDeclaration(839) at 1", "Update SimpleName: functions(1303) to function", "Move SimpleName: functions(1303) into SingleVariableDeclaration(839) at 2", "Insert IfStatement(910) into Block(984) at 0", "Update SimpleName: Map(639) to List", "Insert PrefixExpression: !(550) into IfStatement(565) at 0", "Move Block(765) into IfStatement(565) at 1", "Update SimpleType: LogicalExpression(768) to FunctionCall", "Move SimpleType: WindowFunction(642) into VariableDeclarationStatement(587) at 1", "Insert MethodInvocation(595) into IfStatement(602) at 0", "Insert Block(601) into IfStatement(602) at 1", "Update SimpleName: collector(902) to generateFramer", "Move SimpleName: collector(902) into MethodInvocation(671) at 0", "Update SimpleName: aggExprs(942) to keyExprs", "Move SimpleName: aggExprs(942) into MethodInvocation(671) at 1", "Update SimpleName: winExprs(947) to orderExprs", "Move SimpleName: winExprs(947) into MethodInvocation(671) at 2", "Insert SimpleName: functions(670) into MethodInvocation(671) at 3", "Update SimpleName: IS_SAME_RECORD_BATCH_DATA_READ(982) to IS_SAME_PARTITION_READ", "Move SimpleName: isaB1(996) into VariableDeclarationFragment(759) at 0", "Move ClassInstanceCreation(1005) into VariableDeclarationFragment(759) at 1", "Move SimpleName: isaB2(1012) into VariableDeclarationFragment(774) at 0", "Move ClassInstanceCreation(1021) into VariableDeclarationFragment(774) at 1", "Update SimpleName: IS_SAME_PEER(1029) to IS_SAME_PEER_READ", "Move SimpleName: isaP1(1043) into VariableDeclarationFragment(810) at 0", "Move ClassInstanceCreation(1052) into VariableDeclarationFragment(810) at 1", "Move SimpleName: isaP2(1059) into VariableDeclarationFragment(825) at 0", "Move ClassInstanceCreation(1068) into VariableDeclarationFragment(825) at 1", "Insert InfixExpression: ==(907) into IfStatement(910) at 0", "Insert Block(909) into IfStatement(910) at 1", "Insert ParenthesizedExpression(549) into PrefixExpression: !(550) at 0", "Insert ThrowStatement(563) into Block(564) at 0", "Update SimpleName: LogicalExpression(767) to FunctionCall", "Insert SimpleName: call(569) into VariableDeclarationFragment(576) at 0", "Insert CastExpression(575) into VariableDeclarationFragment(576) at 1", "Update SimpleName: outputField(786) to winfun", "Update SimpleName: container(814) to winfun", "Move SimpleName: container(814) into MethodInvocation(595) at 0", "Update SimpleName: getValueVectorId(815) to materialize", "Move SimpleName: getValueVectorId(815) into MethodInvocation(595) at 1", "Move SimpleName: ne(816) into MethodInvocation(595) at 2", "Update SimpleName: getRef(817) to container", "Move SimpleName: getRef(817) into MethodInvocation(595) at 3", "Move MethodInvocation(865) into MethodInvocation(595) at 4", "Move ExpressionStatement(831) into Block(601) at 0", "Move SimpleType: MappingSet(1061) into ClassInstanceCreation(758) at 0", "Update SimpleName: IS_SAME_RECORD_BATCH_DATA_READ(1003) to IS_SAME_PARTITION_READ", "Update SimpleName: IS_SAME_RECORD_BATCH_DATA_READ(1004) to IS_SAME_PARTITION_READ", "Move SimpleType: MappingSet(1045) into ClassInstanceCreation(773) at 0", "Update SimpleName: IS_SAME_RECORD_BATCH_DATA_READ(1019) to IS_SAME_PARTITION_READ", "Update SimpleName: IS_SAME_RECORD_BATCH_DATA_READ(1020) to IS_SAME_PARTITION_READ", "Move SimpleType: MappingSet(1014) into ClassInstanceCreation(809) at 0", "Update SimpleName: IS_SAME_PEER(1050) to IS_SAME_PEER_READ", "Update SimpleName: IS_SAME_PEER(1051) to IS_SAME_PEER_READ", "Move SimpleType: MappingSet(998) into ClassInstanceCreation(824) at 0", "Update SimpleName: IS_SAME_PEER(1066) to IS_SAME_PEER_READ", "Update SimpleName: IS_SAME_PEER(1067) to IS_SAME_PEER_READ", "Update SimpleName: cg(1373) to function", "Move SimpleName: cg(1373) into MethodInvocation(844) at 0", "Update SimpleName: getEvalBlock(1374) to generateCode", "Move SimpleName: getEvalBlock(1374) into MethodInvocation(844) at 1", "Update SimpleName: add(1376) to cg", "Insert SimpleName: expr(905) into InfixExpression: ==(907) at 0", "Insert NullLiteral(906) into InfixExpression: ==(907) at 1", "Insert ContinueStatement(908) into Block(909) at 0", "Move SimpleType: WindowDataBatch(435) into ClassInstanceCreation(450) at 0", "Insert SimpleName: oContext(449) into ClassInstanceCreation(450) at 2", "Insert InstanceofExpression(548) into ParenthesizedExpression(549) at 0", "Insert MethodInvocation(562) into ThrowStatement(563) at 0", "Move SimpleType: FunctionCall(238) into CastExpression(575) at 0", "Move MethodInvocation(774) into CastExpression(575) at 1", "Update SimpleName: MaterializedField(787) to WindowFunction", "Update SimpleName: expr(792) to fromExpression", "Move SimpleName: expr(792) into MethodInvocation(585) at 1", "Update SimpleName: getMajorType(793) to call", "Move SimpleName: getMajorType(793) into MethodInvocation(585) at 2", "Update SimpleName: materialize(857) to materializeAndCheckErrors", "Move MethodInvocation(719) into MethodInvocation(634) at 2", "Move MethodInvocation(779) into MethodInvocation(634) at 5", "Update SimpleName: materialize(882) to materializeAndCheckErrors", "Insert MethodInvocation(545) into InstanceofExpression(548) at 0", "Move SimpleType: FunctionCall(225) into InstanceofExpression(548) at 1", "Insert MethodInvocation(559) into MethodInvocation(562) at 0", "Update SimpleName: outputField(746) to build", "Move SimpleName: outputField(746) into MethodInvocation(562) at 1", "Update SimpleName: container(757) to logger", "Move SimpleName: container(757) into MethodInvocation(562) at 2", "Update SimpleName: aggExprs(822) to functions", "Insert SimpleName: winfun(598) into MethodInvocation(599) at 2", "Update SimpleName: WindowFunction(715) to ne", "Move SimpleName: WindowFunction(715) into MethodInvocation(545) at 0", "Update SimpleName: fromExpression(716) to getExpr", "Move SimpleName: fromExpression(716) into MethodInvocation(545) at 1", "Move MethodInvocation(734) into MethodInvocation(559) at 0", "Update SimpleName: getMajorType(736) to message", "Move SimpleName: getMajorType(736) into MethodInvocation(559) at 1", "Insert StringLiteral: \"Unsupported window function '%s'\"(555) into MethodInvocation(559) at 2", "Move MethodInvocation(860) into MethodInvocation(559) at 3", "Move SimpleType: WindowDataBatch(591) into ClassInstanceCreation(294) at 0", "Update SimpleName: context(437) to oContext", "Update SimpleName: ne(732) to UserException", "Update SimpleName: getRef(733) to functionError", "Delete QualifiedName: java.util.Map(21)", "Delete ImportDeclaration(22)", "Delete QualifiedName: com.google.common.collect.Maps(23)", "Delete ImportDeclaration(24)", "Delete QualifiedName: com.sun.codemodel.JExpression(25)", "Delete ImportDeclaration(26)", "Delete QualifiedName: com.sun.codemodel.JInvocation(27)", "Delete ImportDeclaration(28)", "Delete QualifiedName: com.sun.codemodel.JVar(29)", "Delete ImportDeclaration(30)", "Delete QualifiedName: org.apache.drill.common.expression.ErrorCollector(33)", "Delete ImportDeclaration(34)", "Delete QualifiedName: org.apache.drill.common.expression.ErrorCollectorImpl(35)", "Delete ImportDeclaration(36)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos(45)", "Delete ImportDeclaration(46)", "Delete QualifiedName: org.apache.drill.exec.expr.ValueVectorWriteExpression(63)", "Delete ImportDeclaration(64)", "Delete QualifiedName: org.apache.drill.exec.record.MaterializedField(77)", "Delete ImportDeclaration(78)", "Delete QualifiedName: org.apache.drill.exec.record.TypedFieldId(81)", "Delete ImportDeclaration(82)", "Delete QualifiedName: org.apache.drill.exec.vector.ValueVector(87)", "Delete ImportDeclaration(88)", "Delete TextElement: Doesn't support distinct partitions: multiple window with different PARTITION BY clauses.(94)", "Delete TextElement: Describes supported window functions and if they output FLOAT8 or BIGINT(150)", "Delete TagElement(151)", "Delete Javadoc(152)", "Delete Modifier: private(153)", "Delete SimpleName: WindowFunction(154)", "Delete SimpleName: ROW_NUMBER(155)", "Delete BooleanLiteral: false(156)", "Delete EnumConstantDeclaration(157)", "Delete SimpleName: RANK(158)", "Delete BooleanLiteral: false(159)", "Delete EnumConstantDeclaration(160)", "Delete SimpleName: DENSE_RANK(161)", "Delete BooleanLiteral: false(162)", "Delete EnumConstantDeclaration(163)", "Delete SimpleName: PERCENT_RANK(164)", "Delete BooleanLiteral: true(165)", "Delete EnumConstantDeclaration(166)", "Delete SimpleName: CUME_DIST(167)", "Delete BooleanLiteral: true(168)", "Delete EnumConstantDeclaration(169)", "Delete Modifier: private(170)", "Delete Modifier: final(171)", "Delete PrimitiveType: boolean(172)", "Delete SimpleName: useDouble(173)", "Delete VariableDeclarationFragment(174)", "Delete FieldDeclaration(175)", "Delete SimpleName: WindowFunction(176)", "Delete PrimitiveType: boolean(177)", "Delete SimpleName: useDouble(178)", "Delete SingleVariableDeclaration(179)", "Delete ThisExpression(180)", "Delete SimpleName: useDouble(181)", "Delete FieldAccess(182)", "Delete SimpleName: useDouble(183)", "Delete Assignment: =(184)", "Delete ExpressionStatement(185)", "Delete Block(186)", "Delete MethodDeclaration(187)", "Delete Modifier: public(188)", "Delete QualifiedName: TypeProtos.MajorType(189)", "Delete SimpleType: TypeProtos.MajorType(190)", "Delete SimpleName: getMajorType(191)", "Delete SimpleName: useDouble(192)", "Delete SimpleName: Types(193)", "Delete SimpleName: required(194)", "Delete QualifiedName: TypeProtos.MinorType.FLOAT8(195)", "Delete MethodInvocation(196)", "Delete SimpleName: Types(197)", "Delete SimpleName: required(198)", "Delete QualifiedName: TypeProtos.MinorType.BIGINT(199)", "Delete MethodInvocation(200)", "Delete ConditionalExpression(201)", "Delete ReturnStatement(202)", "Delete Block(203)", "Delete MethodDeclaration(204)", "Delete TextElement: Extract the WindowFunction corresponding to the logical expression(205)", "Delete TagElement(206)", "Delete SimpleName: expr(207)", "Delete TextElement:  logical expression(208)", "Delete TagElement: @param(209)", "Delete TextElement:  WindowFunction or null if the logical expression is not a window function(210)", "Delete TagElement: @return(211)", "Delete Javadoc(212)", "Delete Modifier: public(213)", "Delete Modifier: static(214)", "Delete SimpleName: fromExpression(217)", "Delete Modifier: final(218)", "Delete SimpleName: LogicalExpression(219)", "Delete SimpleType: LogicalExpression(220)", "Delete SimpleName: expr(221)", "Delete SingleVariableDeclaration(222)", "Delete SimpleName: expr(223)", "Delete InstanceofExpression(226)", "Delete ParenthesizedExpression(227)", "Delete PrefixExpression: !(228)", "Delete NullLiteral(229)", "Delete ReturnStatement(230)", "Delete Block(231)", "Delete IfStatement(232)", "Delete Modifier: final(233)", "Delete SimpleName: String(234)", "Delete SimpleType: String(235)", "Delete SimpleName: name(236)", "Delete SimpleName: expr(239)", "Delete CastExpression(240)", "Delete ParenthesizedExpression(241)", "Delete SimpleName: getName(242)", "Delete MethodInvocation(243)", "Delete VariableDeclarationFragment(244)", "Delete VariableDeclarationStatement(245)", "Delete SimpleName: WindowFunction(246)", "Delete SimpleName: valueOf(247)", "Delete SimpleName: name(248)", "Delete SimpleName: toUpperCase(249)", "Delete MethodInvocation(250)", "Delete MethodInvocation(251)", "Delete ReturnStatement(252)", "Delete Block(253)", "Delete SimpleName: IllegalArgumentException(254)", "Delete SimpleType: IllegalArgumentException(255)", "Delete SimpleName: e(256)", "Delete SingleVariableDeclaration(257)", "Delete NullLiteral(258)", "Delete ReturnStatement(259)", "Delete Block(260)", "Delete CatchClause(261)", "Delete TryStatement(262)", "Delete Block(263)", "Delete MethodDeclaration(264)", "Delete EnumDeclaration(265)", "Delete TextElement: The previous scenario applies when we don't have an ORDER BY clause, otherwise a batch can be processed(330)", "Delete TextElement: as soon as we reach the final peer row of the batch's last row (we find the end of the last frame of the batch).(331)", "Delete TextElement: </p>(332)", "Delete SimpleName: getContext(593)", "Delete MethodInvocation(594)", "Delete Modifier: final(626)", "Delete VariableDeclarationStatement(637)", "Delete SimpleName: TypedFieldId(643)", "Delete SimpleType: TypedFieldId(644)", "Delete SimpleName: winExprs(646)", "Delete SimpleName: Maps(647)", "Delete SimpleName: newHashMap(648)", "Delete MethodInvocation(649)", "Delete VariableDeclarationFragment(650)", "Delete Modifier: final(676)", "Delete SimpleName: ErrorCollector(677)", "Delete SimpleType: ErrorCollector(678)", "Delete SimpleName: collector(679)", "Delete SimpleName: ErrorCollectorImpl(680)", "Delete SimpleType: ErrorCollectorImpl(681)", "Delete ClassInstanceCreation(682)", "Delete VariableDeclarationFragment(683)", "Delete VariableDeclarationStatement(684)", "Delete Modifier: final(726)", "Delete SimpleName: MaterializedField(727)", "Delete SimpleType: MaterializedField(728)", "Delete SimpleName: outputField(729)", "Delete SimpleName: MaterializedField(730)", "Delete SimpleName: create(731)", "Delete SimpleName: wf(735)", "Delete MethodInvocation(737)", "Delete MethodInvocation(738)", "Delete VariableDeclarationFragment(739)", "Delete VariableDeclarationStatement(740)", "Delete SimpleName: ValueVector(741)", "Delete SimpleType: ValueVector(742)", "Delete SimpleName: vv(743)", "Delete SimpleName: container(744)", "Delete SimpleName: addOrGet(745)", "Delete MethodInvocation(747)", "Delete VariableDeclarationFragment(748)", "Delete VariableDeclarationStatement(749)", "Delete SimpleName: vv(750)", "Delete SimpleName: allocateNew(751)", "Delete MethodInvocation(752)", "Delete ExpressionStatement(753)", "Delete SimpleName: winExprs(754)", "Delete SimpleName: put(755)", "Delete SimpleName: wf(756)", "Delete SimpleName: getValueVectorId(758)", "Delete SimpleName: ne(759)", "Delete SimpleName: getRef(760)", "Delete MethodInvocation(761)", "Delete MethodInvocation(762)", "Delete MethodInvocation(763)", "Delete ExpressionStatement(764)", "Delete SimpleName: expr(769)", "Delete SimpleName: ExpressionTreeMaterializer(770)", "Delete SimpleName: materialize(771)", "Delete SimpleName: batch(775)", "Delete SimpleName: collector(776)", "Delete MethodInvocation(780)", "Delete SimpleName: MaterializedField(784)", "Delete SimpleType: MaterializedField(785)", "Delete SimpleName: create(788)", "Delete SimpleName: ne(789)", "Delete SimpleName: getRef(790)", "Delete MethodInvocation(791)", "Delete MethodInvocation(794)", "Delete SimpleName: ValueVectorWriteExpression(824)", "Delete SimpleType: ValueVectorWriteExpression(825)", "Delete SimpleName: id(826)", "Delete SimpleName: expr(827)", "Delete BooleanLiteral: true(828)", "Delete ClassInstanceCreation(829)", "Delete Modifier: final(711)", "Delete SimpleName: wf(714)", "Delete MethodInvocation(720)", "Delete VariableDeclarationFragment(721)", "Delete VariableDeclarationStatement(722)", "Delete SimpleName: wf(723)", "Delete NullLiteral(724)", "Delete InfixExpression: !=(725)", "Delete SimpleName: ValueVector(798)", "Delete SimpleType: ValueVector(799)", "Delete SimpleName: vv(800)", "Delete SimpleName: container(801)", "Delete SimpleName: addOrGet(802)", "Delete SimpleName: outputField(803)", "Delete MethodInvocation(804)", "Delete VariableDeclarationFragment(805)", "Delete VariableDeclarationStatement(806)", "Delete SimpleName: vv(807)", "Delete SimpleName: allocateNew(808)", "Delete MethodInvocation(809)", "Delete ExpressionStatement(810)", "Delete SimpleName: TypedFieldId(811)", "Delete SimpleType: TypedFieldId(812)", "Delete SimpleName: id(813)", "Delete MethodInvocation(818)", "Delete MethodInvocation(819)", "Delete VariableDeclarationFragment(820)", "Delete VariableDeclarationStatement(821)", "Delete Block(832)", "Delete IfStatement(833)", "Delete SimpleName: collector(862)", "Delete SimpleName: collector(887)", "Delete SimpleName: collector(896)", "Delete SimpleName: hasErrors(897)", "Delete MethodInvocation(898)", "Delete SimpleName: SchemaChangeException(899)", "Delete SimpleType: SchemaChangeException(900)", "Delete StringLiteral: \"Failure while materializing expression. \"(901)", "Delete SimpleName: toErrorString(903)", "Delete MethodInvocation(904)", "Delete InfixExpression: +(905)", "Delete ClassInstanceCreation(906)", "Delete ThrowStatement(907)", "Delete Block(908)", "Delete IfStatement(909)", "Delete SimpleName: setupOutputAggregatedValues(940)", "Delete SimpleName: cg(941)", "Delete MethodInvocation(943)", "Delete ExpressionStatement(944)", "Delete SimpleName: setupAddWindowValue(945)", "Delete SimpleName: cg(946)", "Delete MethodInvocation(948)", "Delete ExpressionStatement(949)", "Delete SimpleName: framer(960)", "Delete VariableDeclarationFragment(965)", "Delete VariableDeclarationStatement(966)", "Delete Modifier: final(1317)", "Delete SimpleName: JVar(1318)", "Delete SimpleType: JVar(1319)", "Delete SimpleName: vv(1320)", "Delete SimpleName: cg(1321)", "Delete SimpleName: declareVectorValueSetupAndMember(1322)", "Delete SimpleName: cg(1323)", "Delete SimpleName: getMappingSet(1324)", "Delete MethodInvocation(1325)", "Delete SimpleName: getOutgoing(1326)", "Delete MethodInvocation(1327)", "Delete SimpleName: functions(1328)", "Delete SimpleName: get(1329)", "Delete SimpleName: function(1330)", "Delete MethodInvocation(1331)", "Delete MethodInvocation(1332)", "Delete VariableDeclarationFragment(1333)", "Delete VariableDeclarationStatement(1334)", "Delete Modifier: final(1335)", "Delete SimpleName: JExpression(1336)", "Delete SimpleType: JExpression(1337)", "Delete SimpleName: outIndex(1338)", "Delete SimpleName: cg(1339)", "Delete SimpleName: getMappingSet(1340)", "Delete MethodInvocation(1341)", "Delete SimpleName: getValueWriteIndex(1342)", "Delete MethodInvocation(1343)", "Delete VariableDeclarationFragment(1344)", "Delete VariableDeclarationStatement(1345)", "Delete SimpleName: JInvocation(1346)", "Delete SimpleType: JInvocation(1347)", "Delete SimpleName: setMethod(1348)", "Delete SimpleName: vv(1349)", "Delete SimpleName: invoke(1350)", "Delete StringLiteral: \"getMutator\"(1351)", "Delete MethodInvocation(1352)", "Delete SimpleName: invoke(1353)", "Delete StringLiteral: \"setSafe\"(1354)", "Delete MethodInvocation(1355)", "Delete SimpleName: arg(1356)", "Delete SimpleName: outIndex(1357)", "Delete MethodInvocation(1358)", "Delete SimpleName: arg(1359)", "Delete SimpleName: JExpr(1360)", "Delete SimpleName: direct(1361)", "Delete StringLiteral: \"partition.\"(1362)", "Delete SimpleName: function(1363)", "Delete SimpleName: name(1364)", "Delete MethodInvocation(1365)", "Delete SimpleName: toLowerCase(1366)", "Delete MethodInvocation(1367)", "Delete InfixExpression: +(1368)", "Delete MethodInvocation(1369)", "Delete MethodInvocation(1370)", "Delete VariableDeclarationFragment(1371)", "Delete VariableDeclarationStatement(1372)", "Delete MethodInvocation(1375)", "Delete SimpleName: setMethod(1377)", "Delete Modifier: private(977)", "Delete Modifier: static(978)", "Delete Modifier: final(979)", "Delete FieldDeclaration(991)", "Delete Modifier: private(992)", "Delete Modifier: final(993)", "Delete VariableDeclarationFragment(1006)", "Delete FieldDeclaration(1007)", "Delete Modifier: private(1008)", "Delete Modifier: final(1009)", "Delete VariableDeclarationFragment(1022)", "Delete FieldDeclaration(1023)", "Delete Modifier: private(1024)", "Delete Modifier: static(1025)", "Delete Modifier: final(1026)", "Delete FieldDeclaration(1038)", "Delete Modifier: private(1039)", "Delete Modifier: final(1040)", "Delete VariableDeclarationFragment(1053)", "Delete FieldDeclaration(1054)", "Delete Modifier: private(1055)", "Delete Modifier: final(1056)", "Delete SimpleName: MappingSet(1057)", "Delete SimpleType: MappingSet(1058)", "Delete VariableDeclarationFragment(1069)", "Delete FieldDeclaration(1070)", "Delete Modifier: private(1197)", "Delete Modifier: static(1198)", "Delete Modifier: final(1199)", "Delete SimpleName: GeneratorMapping(1200)", "Delete SimpleType: GeneratorMapping(1201)", "Delete SimpleName: EVAL_INSIDE(1202)", "Delete SimpleName: GeneratorMapping(1203)", "Delete SimpleName: create(1204)", "Delete StringLiteral: \"setupRead\"(1205)", "Delete StringLiteral: \"aggregateRecord\"(1206)", "Delete NullLiteral(1207)", "Delete NullLiteral(1208)", "Delete MethodInvocation(1209)", "Delete VariableDeclarationFragment(1210)", "Delete FieldDeclaration(1211)", "Delete Modifier: private(1212)", "Delete Modifier: static(1213)", "Delete Modifier: final(1214)", "Delete SimpleName: GeneratorMapping(1215)", "Delete SimpleType: GeneratorMapping(1216)", "Delete SimpleName: EVAL_OUTSIDE(1217)", "Delete SimpleName: GeneratorMapping(1218)", "Delete SimpleName: create(1219)", "Delete StringLiteral: \"setupWrite\"(1220)", "Delete StringLiteral: \"outputAggregatedValues\"(1221)", "Delete StringLiteral: \"resetValues\"(1222)", "Delete StringLiteral: \"cleanup\"(1223)", "Delete MethodInvocation(1224)", "Delete VariableDeclarationFragment(1225)", "Delete FieldDeclaration(1226)", "Delete Modifier: private(1227)", "Delete Modifier: final(1228)", "Delete SimpleName: MappingSet(1229)", "Delete SimpleType: MappingSet(1230)", "Delete SimpleName: eval(1231)", "Delete StringLiteral: \"index\"(1234)", "Delete StringLiteral: \"outIndex\"(1235)", "Delete SimpleName: EVAL_INSIDE(1236)", "Delete SimpleName: EVAL_OUTSIDE(1237)", "Delete SimpleName: EVAL_INSIDE(1238)", "Delete ClassInstanceCreation(1239)", "Delete VariableDeclarationFragment(1240)", "Delete FieldDeclaration(1241)", "Delete TextElement: setup for aggregateRecord() and outputAggregatedValues()(1242)", "Delete TagElement(1243)", "Delete Javadoc(1244)", "Delete Modifier: private(1245)", "Delete PrimitiveType: void(1246)", "Delete SimpleName: setupOutputAggregatedValues(1247)", "Delete SimpleName: ClassGenerator(1248)", "Delete SimpleType: ClassGenerator(1249)", "Delete ParameterizedType: ClassGenerator<WindowFramer>(1252)", "Delete SimpleName: cg(1253)", "Delete SingleVariableDeclaration(1254)", "Delete SimpleName: cg(1262)", "Delete SimpleName: setMappingSet(1263)", "Delete SimpleName: eval(1264)", "Delete MethodInvocation(1265)", "Delete ExpressionStatement(1266)", "Delete SimpleName: LogicalExpression(1267)", "Delete SimpleType: LogicalExpression(1268)", "Delete SimpleName: ex(1269)", "Delete SingleVariableDeclaration(1270)", "Delete SimpleName: valueExprs(1271)", "Delete SimpleName: cg(1272)", "Delete SimpleName: addExpr(1273)", "Delete SimpleName: ex(1274)", "Delete MethodInvocation(1275)", "Delete ExpressionStatement(1276)", "Delete Block(1277)", "Delete EnhancedForStatement(1278)", "Delete Block(1279)", "Delete MethodDeclaration(1280)", "Delete TextElement: generate code to write \"computed\" window function values into their respective value vectors(1281)", "Delete TagElement(1282)", "Delete Javadoc(1283)", "Delete Modifier: private(1284)", "Delete PrimitiveType: void(1285)", "Delete SimpleName: setupAddWindowValue(1286)", "Delete Modifier: final(1287)", "Delete SimpleName: ClassGenerator(1288)", "Delete SimpleType: ClassGenerator(1289)", "Delete SimpleName: WindowFramer(1290)", "Delete SimpleType: WindowFramer(1291)", "Delete ParameterizedType: ClassGenerator<WindowFramer>(1292)", "Delete SimpleName: cg(1293)", "Delete SingleVariableDeclaration(1294)", "Delete SimpleName: Map(1296)", "Delete SimpleType: Map(1297)", "Delete SimpleName: TypedFieldId(1300)", "Delete SimpleType: TypedFieldId(1301)", "Delete ParameterizedType: Map<WindowFunction,TypedFieldId>(1302)", "Delete SingleVariableDeclaration(1304)", "Delete SimpleName: cg(1305)", "Delete SimpleName: setMappingSet(1306)", "Delete SimpleName: eval(1307)", "Delete MethodInvocation(1308)", "Delete ExpressionStatement(1309)", "Delete SimpleName: WindowFunction(1310)", "Delete SimpleType: WindowFunction(1311)", "Delete SimpleName: function(1312)", "Delete SingleVariableDeclaration(1313)", "Delete SimpleName: functions(1314)", "Delete SimpleName: keySet(1315)", "Delete MethodInvocation(1316)", "Delete EnhancedForStatement(1381)", "Delete Block(1382)", "Delete MethodDeclaration(1383)"]}}, {"WindowFramer_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: org.apache.drill.exec.ops.OperatorContext to ImportDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: OperatorContext to SingleVariableDeclaration at 1", "INS SimpleName: OperatorContext to SimpleType: OperatorContext at 0", "INS SimpleName: operatorContext to SingleVariableDeclaration at 2", "INS Modifier: final to SingleVariableDeclaration at 0"]}, {"root": "INS Modifier: final to SingleVariableDeclaration at 0", "operations": ["INS Modifier: final to SingleVariableDeclaration at 0"]}]}}, {"WindowFramer_diff": {"operations": ["Insert ImportDeclaration(24) into CompilationUnit(104) at 4", "Insert QualifiedName: org.apache.drill.exec.ops.OperatorContext(23) into ImportDeclaration(24) at 0", "Insert SingleVariableDeclaration(68) into MethodDeclaration(71) at 4", "Insert Modifier: final(51) into SingleVariableDeclaration(58) at 0", "Insert Modifier: final(64) into SingleVariableDeclaration(68) at 0", "Insert SimpleType: OperatorContext(66) into SingleVariableDeclaration(68) at 1", "Insert SimpleName: operatorContext(67) into SingleVariableDeclaration(68) at 2", "Insert SimpleName: OperatorContext(65) into SimpleType: OperatorContext(66) at 0"]}}, {"UnsupportedOperatorsVisitor_cluster": {"actions": [{"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: getName", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: function", "DEL SimpleName: getOperator", "DEL SimpleName: functionName", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: toUpperCase", "DEL MethodInvocation"]}, {"root": "DEL SwitchStatement", "operations": ["DEL StringLiteral: \"The window function \"", "DEL StringLiteral: \"NTILE\"", "DEL SimpleName: functionName", "DEL ThrowStatement", "DEL SimpleName: functionName", "DEL QualifiedName: SqlUnsupportedException.ExceptionType.FUNCTION", "DEL StringLiteral: \"LAST_VALUE\"", "DEL StringLiteral: \"LEAD\"", "DEL SwitchStatement", "DEL SimpleName: setException", "DEL SwitchCase", "DEL MethodInvocation", "DEL SwitchCase", "DEL SwitchCase", "DEL BreakStatement", "DEL SimpleType: UnsupportedOperationException", "DEL ClassInstanceCreation", "DEL SwitchCase", "DEL SimpleName: unsupportedOperatorCollector", "DEL StringLiteral: \"See Apache Drill JIRA: DRILL-3195\"", "DEL ExpressionStatement", "DEL SimpleName: UnsupportedOperationException", "DEL StringLiteral: \" is not supported\\n\"", "DEL StringLiteral: \"FIRST_VALUE\"", "DEL SwitchCase", "DEL StringLiteral: \"LAG\"", "DEL SwitchCase", "DEL InfixExpression: +"]}]}}, {"UnsupportedOperatorsVisitor_diff": {"operations": ["Delete SimpleName: String(349)", "Delete SimpleType: String(350)", "Delete SimpleName: functionName(351)", "Delete SimpleName: function(352)", "Delete SimpleName: getOperator(353)", "Delete MethodInvocation(354)", "Delete SimpleName: getName(355)", "Delete MethodInvocation(356)", "Delete SimpleName: toUpperCase(357)", "Delete MethodInvocation(358)", "Delete VariableDeclarationFragment(359)", "Delete VariableDeclarationStatement(360)", "Delete SimpleName: functionName(361)", "Delete StringLiteral: \"NTILE\"(362)", "Delete SwitchCase(363)", "Delete StringLiteral: \"LAG\"(364)", "Delete SwitchCase(365)", "Delete StringLiteral: \"LEAD\"(366)", "Delete SwitchCase(367)", "Delete StringLiteral: \"FIRST_VALUE\"(368)", "Delete SwitchCase(369)", "Delete StringLiteral: \"LAST_VALUE\"(370)", "Delete SwitchCase(371)", "Delete SimpleName: unsupportedOperatorCollector(372)", "Delete SimpleName: setException(373)", "Delete QualifiedName: SqlUnsupportedException.ExceptionType.FUNCTION(374)", "Delete StringLiteral: \"The window function \"(375)", "Delete SimpleName: functionName(376)", "Delete StringLiteral: \" is not supported\\n\"(377)", "Delete StringLiteral: \"See Apache Drill JIRA: DRILL-3195\"(378)", "Delete InfixExpression: +(379)", "Delete MethodInvocation(380)", "Delete ExpressionStatement(381)", "Delete SimpleName: UnsupportedOperationException(382)", "Delete SimpleType: UnsupportedOperationException(383)", "Delete ClassInstanceCreation(384)", "Delete ThrowStatement(385)", "Delete SwitchCase(386)", "Delete BreakStatement(387)", "Delete SwitchStatement(388)"]}}], "commit_stats": [{"total_files": 43, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}