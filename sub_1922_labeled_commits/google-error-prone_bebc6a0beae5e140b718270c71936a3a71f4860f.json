{"application": "google-error-prone", "csha": "bebc6a0beae5e140b718270c71936a3a71f4860f", "files": [{"EndPosMap8_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.google.errorprone", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.tools.javac.parser.JavacParser", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.tools.javac.tree.EndPosTable", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.tools.javac.tree.JCTree"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.tools.javac.tree.JCTree.JCCompilationUnit", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.tools.javac.util.IntHashTable", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.tools.javac.util.Position"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Field"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.AbstractMap.SimpleImmutableEntry"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.HashSet", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: IntHashTable", "DEL SimpleName: Set", "DEL SimpleType: Integer", "DEL Block", "DEL ParameterizedType: Class<?>", "DEL ExpressionStatement", "DEL SimpleName: result", "DEL SimpleName: i", "DEL Block", "DEL SimpleName: EndPosTable", "DEL MethodInvocation", "DEL StringLiteral: \"objs\"", "DEL CastExpression", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleType: Field", "DEL SimpleName: get", "DEL SimpleName: JCCompilationUnit", "DEL VariableDeclarationFragment", "DEL SimpleType: Integer", "DEL TypeDeclaration: class", "DEL BooleanLiteral: false", "DEL ThrowStatement", "DEL SimpleName: e", "DEL SimpleName: getMessage", "DEL SimpleName: entries", "DEL PrimitiveType: int", "DEL SimpleType: Map.Entry", "DEL PrimitiveType: boolean", "DEL Assignment: =", "DEL Block", "DEL Modifier: private", "DEL SimpleName: IllegalStateException", "DEL FieldDeclaration", "DEL ClassInstanceCreation", "DEL TypeDeclaration: class", "DEL SimpleName: getFieldOrDie", "DEL Dimension", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL QualifiedName: Map.Entry", "DEL SimpleName: field", "DEL MethodInvocation", "DEL Block", "DEL Block", "DEL SimpleName: END_POS_MAP_FIELD", "DEL SimpleName: objs", "DEL TextElement: The JDK8 implementation of endPosMap returns NOPOS if there's no mapping for the given key.", "DEL VariableDeclarationFragment", "DEL SimpleName: IntHashTable", "DEL SimpleName: JCTree", "DEL ThisExpression", "DEL StringLiteral: \"endPosMap\"", "DEL SimpleName: fieldName", "DEL SimpleType: JavacParser.SimpleEndPosTable", "DEL SingleVariableDeclaration", "DEL SimpleName: JCTree", "DEL SimpleName: table", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL SimpleName: entries", "DEL SimpleName: LinkageError", "DEL ClassInstanceCreation", "DEL SimpleType: Integer", "DEL SimpleName: SimpleImmutableEntry", "DEL MarkerAnnotation", "DEL Modifier: static", "DEL SimpleName: Object", "DEL SimpleName: Integer", "DEL ExpressionStatement", "DEL SimpleName: getMessage", "DEL SimpleName: setAccessible", "DEL MethodInvocation", "DEL SimpleName: END_POS_MAP_FIELD", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL SimpleType: DiagnosticPosition", "DEL SimpleType: LinkageError", "DEL SimpleType: EndPosTable", "DEL Block", "DEL SimpleName: DELETED", "DEL SimpleName: rawMap", "DEL SimpleName: getMessage", "DEL SimpleName: isSimpleEndPosTable", "DEL SimpleType: EndPosTable", "DEL SingleVariableDeclaration", "DEL SimpleName: DELETED", "DEL ParameterizedType: Set<Map.Entry<JCTree,Integer>>", "DEL VariableDeclarationStatement", "DEL SimpleType: IntHashTable", "DEL SimpleType: IntHashTable", "DEL Javadoc", "DEL SimpleType: Set", "DEL SimpleName: DELETED", "DEL SimpleName: pos", "DEL ClassInstanceCreation", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleName: rawMap", "DEL Modifier: public", "DEL SimpleName: EndPosTable", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleName: IntHashTable", "DEL TagElement: @link", "DEL TypeLiteral", "DEL VariableDeclarationFragment", "DEL SimpleName: OBJS_FIELD", "DEL Block", "DEL NullLiteral", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleType: JCTree", "DEL CatchClause", "DEL Modifier: private", "DEL SimpleName: getDeclaredField", "DEL SimpleName: OBJS_FIELD", "DEL TryStatement", "DEL SimpleName: get", "DEL PrimitiveType: boolean", "DEL Modifier: static", "DEL Modifier: final", "DEL SimpleName: Override", "DEL SimpleName: Object", "DEL SimpleType: LinkageError", "DEL ArrayType: Object[]", "DEL SimpleName: get", "DEL SimpleType: JCTree", "DEL SimpleName: Exception", "DEL Modifier: public", "DEL SimpleType: Field", "DEL NullLiteral", "DEL InfixExpression: <", "DEL Modifier: static", "DEL SimpleType: EndPosTable", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL Modifier: private", "DEL SimpleName: JCTree", "DEL ConditionalExpression", "DEL ArrayType: int[]", "DEL SimpleName: objs", "DEL SimpleName: getMap", "DEL SingleVariableDeclaration", "DEL SimpleName: e", "DEL QualifiedName: compilationUnit.endPositions", "DEL SimpleName: Integer", "DEL SimpleName: IntHashTable", "DEL Modifier: static", "DEL SimpleName: Override", "DEL Modifier: private", "DEL SimpleType: Exception", "DEL SimpleName: ints", "DEL VariableDeclarationFragment", "DEL CatchClause", "DEL TextElement:  ", "DEL SimpleName: SuppressWarnings", "DEL SimpleName: String", "DEL SimpleName: getFieldOrDie", "DEL SimpleName: Field", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL SimpleName: rawMap", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL ArrayAccess", "DEL Block", "DEL SimpleName: table", "DEL SimpleName: EndPosTable", "DEL TypeLiteral", "DEL SimpleName: e", "DEL SimpleName: ReflectiveOperationException", "DEL SimpleName: EndPosMap8", "DEL Assignment: =", "DEL SimpleName: table", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL ParameterizedType: Map.Entry<JCTree,Integer>", "DEL IfStatement", "DEL TextElement: A JDK8 Compatible ", "DEL ReturnStatement", "DEL Modifier: public", "DEL SimpleType: Map.Entry", "DEL BooleanLiteral: false", "DEL SimpleName: e", "DEL SimpleName: EndPosTable", "DEL VariableDeclarationExpression", "DEL Modifier: static", "DEL ThrowStatement", "DEL SimpleName: getDeclaredField", "DEL ThrowStatement", "DEL TypeLiteral", "DEL QualifiedName: JavacParser.SimpleEndPosTable", "DEL SimpleName: field", "DEL Modifier: static", "DEL MarkerAnnotation", "DEL SimpleName: fromCompilationUnit", "DEL Modifier: private", "DEL ThrowStatement", "DEL SimpleName: getEndPosition", "DEL SimpleName: table", "DEL SimpleName: table", "DEL ClassInstanceCreation", "DEL SimpleName: LinkageError", "DEL Modifier: public", "DEL SimpleName: DiagnosticPosition", "DEL SimpleName: IntHashTable", "DEL ThrowStatement", "DEL SimpleName: Util", "DEL SingleVariableDeclaration", "DEL ParameterizedType: SimpleImmutableEntry<JCTree,Integer>", "DEL SingleVariableDeclaration", "DEL SimpleName: Field", "DEL SimpleName: LinkageError", "DEL MethodInvocation", "DEL TextElement: This is pretty terrible, but we need the map's entrySet to construct WrappedTreeMaps.", "DEL WildcardType: ?", "DEL TextElement: Don't instantiate this. ", "DEL SimpleType: ReflectiveOperationException", "DEL ExpressionStatement", "DEL SimpleType: Class", "DEL SimpleType: Object", "DEL VariableDeclarationStatement", "DEL InfixExpression: !=", "DEL SimpleType: IntHashTable", "DEL SimpleName: Integer", "DEL Modifier: static", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleType: LinkageError", "DEL VariableDeclarationStatement", "DEL TextElement: contents by building the WrappedTreeMap lazily?", "DEL SimpleName: getFieldOrDie", "DEL TextElement: Use reflection to bypass access restrictions on SimpleEndPosTable.endPosMap.", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: result", "DEL SimpleName: table", "DEL NumberLiteral: 0", "DEL Modifier: static", "DEL Initializer", "DEL Initializer", "DEL TryStatement", "DEL SimpleName: IntHashTable", "DEL Block", "DEL SimpleName: rawMap", "DEL SingleVariableDeclaration", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL SimpleName: IntHashTable", "DEL InfixExpression: &&", "DEL SimpleName: ReflectiveOperationException", "DEL Modifier: private", "DEL BooleanLiteral: true", "DEL SimpleType: JavacParser.EmptyEndPosTable", "DEL MethodInvocation", "DEL StringLiteral: \"ints\"", "DEL FieldDeclaration", "DEL NullLiteral", "DEL SimpleName: getMessage", "DEL SimpleType: IntHashTable", "DEL CastExpression", "DEL ClassInstanceCreation", "DEL SimpleType: ReflectiveOperationException", "DEL SimpleName: table", "DEL SimpleType: IllegalStateException", "DEL SimpleName: compilationUnit", "DEL Block", "DEL SimpleType: IntHashTable", "DEL ParameterizedType: Set<Map.Entry<JCTree,Integer>>", "DEL SimpleName: Integer", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL Modifier: public", "DEL SimpleName: table", "DEL SimpleName: table", "DEL ForStatement", "DEL Block", "DEL PrimitiveType: int", "DEL InfixExpression: !=", "DEL Block", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL CatchClause", "DEL SimpleName: table", "DEL SimpleName: objs", "DEL SimpleName: e", "DEL SimpleName: EndPosMap8", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL SimpleName: i", "DEL Javadoc", "DEL SimpleName: EndPosMap8", "DEL CatchClause", "DEL Dimension", "DEL SimpleName: entrySet", "DEL SimpleType: JCCompilationUnit", "DEL SimpleName: e", "DEL Modifier: public", "DEL MethodInvocation", "DEL Dimension", "DEL Modifier: static", "DEL SimpleName: i", "DEL MethodInvocation", "DEL Modifier: private", "DEL ArrayType: int[]", "DEL SimpleName: Field", "DEL TryStatement", "DEL SimpleName: e", "DEL IfStatement", "DEL Block", "DEL ParameterizedType: HashSet<>", "DEL SimpleName: INTS_FIELD", "DEL SimpleType: Field", "DEL ThisExpression", "DEL SimpleType: JCTree", "DEL ArrayType: Object[]", "DEL SimpleName: isEmptyEndPosTable", "DEL Block", "DEL Block", "DEL SuperConstructorInvocation", "DEL SimpleName: i", "DEL SimpleName: clazz", "DEL SingleMemberAnnotation", "DEL ParameterizedType: Map.Entry<JCTree,Integer>", "DEL ArrayAccess", "DEL SimpleName: table", "DEL SimpleName: field", "DEL ClassInstanceCreation", "DEL FieldAccess", "DEL TypeLiteral", "DEL SimpleName: IntHashTable", "DEL ReturnStatement", "DEL ArrayAccess", "DEL Block", "DEL SimpleName: entries", "DEL QualifiedName: Map.Entry", "DEL SimpleName: ErrorProneEndPosMap", "DEL TagElement", "DEL SimpleName: table", "DEL SimpleName: LinkageError", "DEL SimpleType: EndPosTable", "DEL SimpleType: Exception", "DEL Modifier: final", "DEL ReturnStatement", "DEL SimpleName: END_POS_MAP_FIELD", "DEL SimpleName: objs", "DEL SimpleName: JCTree", "DEL ReturnStatement", "DEL SimpleName: INTS_FIELD", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleName: JavacParser", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL TextElement: TODO(user): investigate alternatives. Could we get we avoid the need to know the map's", "DEL CastExpression", "DEL NullLiteral", "DEL QualifiedName: Position.NOPOS", "DEL MethodDeclaration", "DEL BooleanLiteral: false", "DEL SimpleName: result", "DEL Block", "DEL SimpleType: LinkageError", "DEL Modifier: final", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: Field", "DEL MethodInvocation", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL SimpleName: Integer", "DEL SimpleType: Set", "DEL SimpleType: EndPosTable", "DEL SimpleType: Integer", "DEL Modifier: static", "DEL SimpleType: IntHashTable", "DEL Modifier: static", "DEL ReturnStatement", "DEL SimpleName: ints", "DEL SimpleName: HashSet", "DEL SimpleName: Class", "DEL VariableDeclarationFragment", "DEL SimpleType: Integer", "DEL SimpleName: fieldName", "DEL ReturnStatement", "DEL SimpleName: e", "DEL Modifier: private", "DEL InstanceofExpression", "DEL IfStatement", "DEL SimpleType: IllegalStateException", "DEL SimpleType: SimpleImmutableEntry", "DEL StringLiteral: \"unchecked\"", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: getMap", "DEL FieldDeclaration", "DEL Block", "DEL CastExpression", "DEL Assignment: =", "DEL SimpleName: ReflectiveOperationException", "DEL SimpleName: table", "DEL Javadoc", "DEL MethodDeclaration", "DEL InfixExpression: !=", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL SimpleType: LinkageError", "DEL Block", "DEL SimpleType: JavacParser", "DEL Modifier: final", "DEL SimpleName: EndPosTable", "DEL SimpleType: IntHashTable", "DEL SimpleName: Field", "DEL SimpleName: rawMap", "DEL SimpleType: ReflectiveOperationException", "DEL QualifiedName: JavacParser.SimpleEndPosTable", "DEL SimpleType: HashSet", "DEL BooleanLiteral: true", "DEL SimpleName: getFieldOrDie", "DEL SimpleName: LinkageError", "DEL SimpleName: EndPosTable", "DEL SimpleName: objs", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL SimpleName: isSimpleEndPosTable", "DEL SimpleType: JavacParser.SimpleEndPosTable", "DEL VariableDeclarationFragment", "DEL ThrowStatement", "DEL Block", "DEL ThrowStatement", "DEL SimpleName: Exception", "DEL Block", "DEL SimpleName: table", "DEL VariableDeclarationFragment", "DEL SimpleName: e", "DEL SimpleName: setAccessible", "DEL TryStatement", "DEL SimpleName: Util", "DEL TagElement", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleType: Field", "DEL SimpleName: Util", "DEL StringLiteral: \"DELETED\"", "DEL ExpressionStatement", "DEL SimpleType: EndPosMap8", "DEL TagElement", "DEL TypeLiteral", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: ErrorProneEndPosMap", "DEL SimpleName: clazz", "DEL SimpleName: ints", "DEL TagElement", "DEL FieldAccess", "DEL Modifier: static", "DEL SimpleName: Util", "DEL SimpleName: END_POS_MAP_FIELD", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleType: EndPosMap8", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL ClassInstanceCreation", "DEL SimpleName: i", "DEL SimpleName: EndPosMap8", "DEL MethodInvocation", "DEL Modifier: final", "DEL TryStatement", "DEL CatchClause", "DEL SimpleName: add", "DEL QualifiedName: JavacParser.EmptyEndPosTable", "DEL SimpleType: String", "DEL SimpleName: table", "DEL SimpleType: IntHashTable", "DEL Dimension", "DEL Modifier: public", "DEL SimpleName: IllegalStateException", "DEL SimpleName: get", "DEL MethodInvocation", "DEL Modifier: private", "DEL Block", "DEL SimpleName: pos", "DEL SimpleName: Util", "DEL SimpleType: EndPosTable", "DEL SimpleType: JCTree", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleName: table", "DEL PostfixExpression: ++", "DEL ExpressionStatement", "DEL SimpleName: getMessage", "DEL VariableDeclarationStatement", "DEL SimpleType: ErrorProneEndPosMap", "DEL SimpleType: Field", "DEL SimpleName: Set", "DEL SimpleName: isEmptyEndPosTable", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL ArrayAccess", "DEL SimpleName: getEndPosition", "DEL QualifiedName: objs.length", "DEL InstanceofExpression", "DEL TextElement: Work around protected access restrictions on the EndPosTable implementations. ", "DEL SimpleType: Object", "DEL SimpleName: e", "DEL SimpleName: rawMap"]}]}}, {"EndPosMap8_diff": {"operations": ["Delete QualifiedName: com.google.errorprone(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.sun.tools.javac.parser.JavacParser(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.sun.tools.javac.tree.EndPosTable(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.sun.tools.javac.tree.JCTree(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.sun.tools.javac.tree.JCTree.JCCompilationUnit(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.sun.tools.javac.util.IntHashTable(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: com.sun.tools.javac.util.Position(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.lang.reflect.Field(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: java.util.AbstractMap.SimpleImmutableEntry(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: java.util.HashSet(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: java.util.Map(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: java.util.Set(24)", "Delete ImportDeclaration(25)", "Delete TextElement: A JDK8 Compatible (26)", "Delete SimpleName: ErrorProneEndPosMap(27)", "Delete TagElement: @link(28)", "Delete TextElement:  (29)", "Delete TagElement(30)", "Delete Javadoc(31)", "Delete Modifier: public(32)", "Delete SimpleName: EndPosMap8(33)", "Delete SimpleName: ErrorProneEndPosMap(34)", "Delete SimpleType: ErrorProneEndPosMap(35)", "Delete TextElement: Work around protected access restrictions on the EndPosTable implementations. (36)", "Delete TagElement(37)", "Delete Javadoc(38)", "Delete Modifier: private(39)", "Delete Modifier: static(40)", "Delete Modifier: final(41)", "Delete SimpleName: Util(42)", "Delete SimpleName: JavacParser(43)", "Delete SimpleType: JavacParser(44)", "Delete TextElement: Don't instantiate this. (45)", "Delete TagElement(46)", "Delete Javadoc(47)", "Delete Modifier: private(48)", "Delete SimpleName: Util(49)", "Delete NullLiteral(50)", "Delete NullLiteral(51)", "Delete BooleanLiteral: false(52)", "Delete BooleanLiteral: false(53)", "Delete BooleanLiteral: false(54)", "Delete SuperConstructorInvocation(55)", "Delete SimpleName: IllegalStateException(56)", "Delete SimpleType: IllegalStateException(57)", "Delete ClassInstanceCreation(58)", "Delete ThrowStatement(59)", "Delete Block(60)", "Delete MethodDeclaration(61)", "Delete Modifier: public(62)", "Delete Modifier: static(63)", "Delete PrimitiveType: boolean(64)", "Delete SimpleName: isSimpleEndPosTable(65)", "Delete SimpleName: EndPosTable(66)", "Delete SimpleType: EndPosTable(67)", "Delete SimpleName: table(68)", "Delete SingleVariableDeclaration(69)", "Delete SimpleName: table(70)", "Delete QualifiedName: JavacParser.SimpleEndPosTable(71)", "Delete SimpleType: JavacParser.SimpleEndPosTable(72)", "Delete InstanceofExpression(73)", "Delete ReturnStatement(74)", "Delete Block(75)", "Delete MethodDeclaration(76)", "Delete Modifier: public(77)", "Delete Modifier: static(78)", "Delete PrimitiveType: boolean(79)", "Delete SimpleName: isEmptyEndPosTable(80)", "Delete SimpleName: EndPosTable(81)", "Delete SimpleType: EndPosTable(82)", "Delete SimpleName: table(83)", "Delete SingleVariableDeclaration(84)", "Delete SimpleName: table(85)", "Delete QualifiedName: JavacParser.EmptyEndPosTable(86)", "Delete SimpleType: JavacParser.EmptyEndPosTable(87)", "Delete InstanceofExpression(88)", "Delete ReturnStatement(89)", "Delete Block(90)", "Delete MethodDeclaration(91)", "Delete TextElement: Use reflection to bypass access restrictions on SimpleEndPosTable.endPosMap.(92)", "Delete TextElement: This is pretty terrible, but we need the map's entrySet to construct WrappedTreeMaps.(93)", "Delete TextElement: TODO(user): investigate alternatives. Could we get we avoid the need to know the map's(94)", "Delete TextElement: contents by building the WrappedTreeMap lazily?(95)", "Delete TagElement(96)", "Delete Javadoc(97)", "Delete Modifier: private(98)", "Delete Modifier: static(99)", "Delete Modifier: final(100)", "Delete SimpleName: Field(101)", "Delete SimpleType: Field(102)", "Delete SimpleName: END_POS_MAP_FIELD(103)", "Delete VariableDeclarationFragment(104)", "Delete FieldDeclaration(105)", "Delete Modifier: static(106)", "Delete SimpleName: END_POS_MAP_FIELD(107)", "Delete QualifiedName: JavacParser.SimpleEndPosTable(108)", "Delete SimpleType: JavacParser.SimpleEndPosTable(109)", "Delete TypeLiteral(110)", "Delete SimpleName: getDeclaredField(111)", "Delete StringLiteral: \"endPosMap\"(112)", "Delete MethodInvocation(113)", "Delete Assignment: =(114)", "Delete ExpressionStatement(115)", "Delete SimpleName: END_POS_MAP_FIELD(116)", "Delete SimpleName: setAccessible(117)", "Delete BooleanLiteral: true(118)", "Delete MethodInvocation(119)", "Delete ExpressionStatement(120)", "Delete Block(121)", "Delete SimpleName: Exception(122)", "Delete SimpleType: Exception(123)", "Delete SimpleName: e(124)", "Delete SingleVariableDeclaration(125)", "Delete SimpleName: LinkageError(126)", "Delete SimpleType: LinkageError(127)", "Delete SimpleName: e(128)", "Delete SimpleName: getMessage(129)", "Delete MethodInvocation(130)", "Delete ClassInstanceCreation(131)", "Delete ThrowStatement(132)", "Delete Block(133)", "Delete CatchClause(134)", "Delete TryStatement(135)", "Delete Block(136)", "Delete Initializer(137)", "Delete SimpleName: SuppressWarnings(138)", "Delete StringLiteral: \"unchecked\"(139)", "Delete SingleMemberAnnotation(140)", "Delete Modifier: public(141)", "Delete Modifier: static(142)", "Delete SimpleName: IntHashTable(143)", "Delete SimpleType: IntHashTable(144)", "Delete SimpleName: getMap(145)", "Delete SimpleName: EndPosTable(146)", "Delete SimpleType: EndPosTable(147)", "Delete SimpleName: table(148)", "Delete SingleVariableDeclaration(149)", "Delete SimpleName: IntHashTable(150)", "Delete SimpleType: IntHashTable(151)", "Delete SimpleName: END_POS_MAP_FIELD(152)", "Delete SimpleName: get(153)", "Delete SimpleName: table(154)", "Delete MethodInvocation(155)", "Delete CastExpression(156)", "Delete ReturnStatement(157)", "Delete Block(158)", "Delete SimpleName: Exception(159)", "Delete SimpleType: Exception(160)", "Delete SimpleName: e(161)", "Delete SingleVariableDeclaration(162)", "Delete SimpleName: LinkageError(163)", "Delete SimpleType: LinkageError(164)", "Delete SimpleName: e(165)", "Delete SimpleName: getMessage(166)", "Delete MethodInvocation(167)", "Delete ClassInstanceCreation(168)", "Delete ThrowStatement(169)", "Delete Block(170)", "Delete CatchClause(171)", "Delete TryStatement(172)", "Delete Block(173)", "Delete MethodDeclaration(174)", "Delete TypeDeclaration: class(175)", "Delete Modifier: public(176)", "Delete Modifier: static(177)", "Delete SimpleName: EndPosMap8(178)", "Delete SimpleType: EndPosMap8(179)", "Delete SimpleName: fromCompilationUnit(180)", "Delete SimpleName: JCCompilationUnit(181)", "Delete SimpleType: JCCompilationUnit(182)", "Delete SimpleName: compilationUnit(183)", "Delete SingleVariableDeclaration(184)", "Delete SimpleName: EndPosTable(185)", "Delete SimpleType: EndPosTable(186)", "Delete SimpleName: table(187)", "Delete QualifiedName: compilationUnit.endPositions(188)", "Delete VariableDeclarationFragment(189)", "Delete VariableDeclarationStatement(190)", "Delete SimpleName: Util(191)", "Delete SimpleName: isEmptyEndPosTable(192)", "Delete SimpleName: table(193)", "Delete MethodInvocation(194)", "Delete NullLiteral(195)", "Delete ReturnStatement(196)", "Delete Block(197)", "Delete IfStatement(198)", "Delete SimpleName: Util(199)", "Delete SimpleName: isSimpleEndPosTable(200)", "Delete SimpleName: table(201)", "Delete MethodInvocation(202)", "Delete SimpleName: EndPosMap8(203)", "Delete SimpleType: EndPosMap8(204)", "Delete SimpleName: table(205)", "Delete SimpleName: Util(206)", "Delete SimpleName: getMap(207)", "Delete SimpleName: table(208)", "Delete MethodInvocation(209)", "Delete ClassInstanceCreation(210)", "Delete ReturnStatement(211)", "Delete Block(212)", "Delete IfStatement(213)", "Delete SimpleName: IllegalStateException(214)", "Delete SimpleType: IllegalStateException(215)", "Delete ClassInstanceCreation(216)", "Delete ThrowStatement(217)", "Delete Block(218)", "Delete MethodDeclaration(219)", "Delete Modifier: private(220)", "Delete SimpleName: EndPosTable(221)", "Delete SimpleType: EndPosTable(222)", "Delete SimpleName: table(223)", "Delete VariableDeclarationFragment(224)", "Delete FieldDeclaration(225)", "Delete Modifier: private(226)", "Delete SimpleName: IntHashTable(227)", "Delete SimpleType: IntHashTable(228)", "Delete SimpleName: rawMap(229)", "Delete VariableDeclarationFragment(230)", "Delete FieldDeclaration(231)", "Delete Modifier: private(232)", "Delete SimpleName: EndPosMap8(233)", "Delete SimpleName: EndPosTable(234)", "Delete SimpleType: EndPosTable(235)", "Delete SimpleName: table(236)", "Delete SingleVariableDeclaration(237)", "Delete SimpleName: IntHashTable(238)", "Delete SimpleType: IntHashTable(239)", "Delete SimpleName: rawMap(240)", "Delete SingleVariableDeclaration(241)", "Delete ThisExpression(242)", "Delete SimpleName: table(243)", "Delete FieldAccess(244)", "Delete SimpleName: table(245)", "Delete Assignment: =(246)", "Delete ExpressionStatement(247)", "Delete ThisExpression(248)", "Delete SimpleName: rawMap(249)", "Delete FieldAccess(250)", "Delete SimpleName: rawMap(251)", "Delete Assignment: =(252)", "Delete ExpressionStatement(253)", "Delete Block(254)", "Delete MethodDeclaration(255)", "Delete TextElement: The JDK8 implementation of endPosMap returns NOPOS if there's no mapping for the given key.(256)", "Delete TagElement(257)", "Delete Javadoc(258)", "Delete SimpleName: Override(259)", "Delete MarkerAnnotation(260)", "Delete Modifier: public(261)", "Delete SimpleName: Integer(262)", "Delete SimpleType: Integer(263)", "Delete SimpleName: getEndPosition(264)", "Delete SimpleName: DiagnosticPosition(265)", "Delete SimpleType: DiagnosticPosition(266)", "Delete SimpleName: pos(267)", "Delete SingleVariableDeclaration(268)", "Delete SimpleName: Integer(269)", "Delete SimpleType: Integer(270)", "Delete SimpleName: result(271)", "Delete SimpleName: pos(272)", "Delete SimpleName: getEndPosition(273)", "Delete SimpleName: table(274)", "Delete MethodInvocation(275)", "Delete VariableDeclarationFragment(276)", "Delete VariableDeclarationStatement(277)", "Delete SimpleName: result(278)", "Delete NullLiteral(279)", "Delete InfixExpression: !=(280)", "Delete SimpleName: result(281)", "Delete QualifiedName: Position.NOPOS(282)", "Delete ConditionalExpression(283)", "Delete ReturnStatement(284)", "Delete Block(285)", "Delete MethodDeclaration(286)", "Delete Modifier: private(287)", "Delete Modifier: static(288)", "Delete Modifier: final(289)", "Delete SimpleName: Field(290)", "Delete SimpleType: Field(291)", "Delete SimpleName: getFieldOrDie(292)", "Delete SimpleName: Class(293)", "Delete SimpleType: Class(294)", "Delete WildcardType: ?(295)", "Delete ParameterizedType: Class<?>(296)", "Delete SimpleName: clazz(297)", "Delete SingleVariableDeclaration(298)", "Delete SimpleName: String(299)", "Delete SimpleType: String(300)", "Delete SimpleName: fieldName(301)", "Delete SingleVariableDeclaration(302)", "Delete SimpleName: Field(303)", "Delete SimpleType: Field(304)", "Delete SimpleName: field(305)", "Delete SimpleName: clazz(306)", "Delete SimpleName: getDeclaredField(307)", "Delete SimpleName: fieldName(308)", "Delete MethodInvocation(309)", "Delete VariableDeclarationFragment(310)", "Delete VariableDeclarationStatement(311)", "Delete SimpleName: field(312)", "Delete SimpleName: setAccessible(313)", "Delete BooleanLiteral: true(314)", "Delete MethodInvocation(315)", "Delete ExpressionStatement(316)", "Delete SimpleName: field(317)", "Delete ReturnStatement(318)", "Delete Block(319)", "Delete SimpleName: ReflectiveOperationException(320)", "Delete SimpleType: ReflectiveOperationException(321)", "Delete SimpleName: e(322)", "Delete SingleVariableDeclaration(323)", "Delete SimpleName: LinkageError(324)", "Delete SimpleType: LinkageError(325)", "Delete SimpleName: e(326)", "Delete SimpleName: getMessage(327)", "Delete MethodInvocation(328)", "Delete ClassInstanceCreation(329)", "Delete ThrowStatement(330)", "Delete Block(331)", "Delete CatchClause(332)", "Delete TryStatement(333)", "Delete Block(334)", "Delete MethodDeclaration(335)", "Delete Modifier: private(336)", "Delete Modifier: static(337)", "Delete Modifier: final(338)", "Delete SimpleName: Field(339)", "Delete SimpleType: Field(340)", "Delete SimpleName: OBJS_FIELD(341)", "Delete SimpleName: getFieldOrDie(342)", "Delete SimpleName: IntHashTable(343)", "Delete SimpleType: IntHashTable(344)", "Delete TypeLiteral(345)", "Delete StringLiteral: \"objs\"(346)", "Delete MethodInvocation(347)", "Delete VariableDeclarationFragment(348)", "Delete FieldDeclaration(349)", "Delete Modifier: private(350)", "Delete Modifier: static(351)", "Delete Modifier: final(352)", "Delete SimpleName: Field(353)", "Delete SimpleType: Field(354)", "Delete SimpleName: INTS_FIELD(355)", "Delete SimpleName: getFieldOrDie(356)", "Delete SimpleName: IntHashTable(357)", "Delete SimpleType: IntHashTable(358)", "Delete TypeLiteral(359)", "Delete StringLiteral: \"ints\"(360)", "Delete MethodInvocation(361)", "Delete VariableDeclarationFragment(362)", "Delete FieldDeclaration(363)", "Delete Modifier: private(364)", "Delete Modifier: static(365)", "Delete Modifier: final(366)", "Delete SimpleName: Object(367)", "Delete SimpleType: Object(368)", "Delete SimpleName: DELETED(369)", "Delete VariableDeclarationFragment(370)", "Delete FieldDeclaration(371)", "Delete Modifier: static(372)", "Delete SimpleName: DELETED(373)", "Delete SimpleName: getFieldOrDie(374)", "Delete SimpleName: IntHashTable(375)", "Delete SimpleType: IntHashTable(376)", "Delete TypeLiteral(377)", "Delete StringLiteral: \"DELETED\"(378)", "Delete MethodInvocation(379)", "Delete SimpleName: get(380)", "Delete SimpleName: IntHashTable(381)", "Delete SimpleType: IntHashTable(382)", "Delete TypeLiteral(383)", "Delete MethodInvocation(384)", "Delete Assignment: =(385)", "Delete ExpressionStatement(386)", "Delete Block(387)", "Delete SimpleName: ReflectiveOperationException(388)", "Delete SimpleType: ReflectiveOperationException(389)", "Delete SimpleName: e(390)", "Delete SingleVariableDeclaration(391)", "Delete SimpleName: LinkageError(392)", "Delete SimpleType: LinkageError(393)", "Delete SimpleName: e(394)", "Delete SimpleName: getMessage(395)", "Delete MethodInvocation(396)", "Delete ClassInstanceCreation(397)", "Delete ThrowStatement(398)", "Delete Block(399)", "Delete CatchClause(400)", "Delete TryStatement(401)", "Delete Block(402)", "Delete Initializer(403)", "Delete SimpleName: Override(404)", "Delete MarkerAnnotation(405)", "Delete Modifier: public(406)", "Delete SimpleName: Set(407)", "Delete SimpleType: Set(408)", "Delete QualifiedName: Map.Entry(409)", "Delete SimpleType: Map.Entry(410)", "Delete SimpleName: JCTree(411)", "Delete SimpleType: JCTree(412)", "Delete SimpleName: Integer(413)", "Delete SimpleType: Integer(414)", "Delete ParameterizedType: Map.Entry<JCTree,Integer>(415)", "Delete ParameterizedType: Set<Map.Entry<JCTree,Integer>>(416)", "Delete SimpleName: entrySet(417)", "Delete SimpleName: Set(418)", "Delete SimpleType: Set(419)", "Delete QualifiedName: Map.Entry(420)", "Delete SimpleType: Map.Entry(421)", "Delete SimpleName: JCTree(422)", "Delete SimpleType: JCTree(423)", "Delete SimpleName: Integer(424)", "Delete SimpleType: Integer(425)", "Delete ParameterizedType: Map.Entry<JCTree,Integer>(426)", "Delete ParameterizedType: Set<Map.Entry<JCTree,Integer>>(427)", "Delete SimpleName: entries(428)", "Delete SimpleName: HashSet(429)", "Delete SimpleType: HashSet(430)", "Delete ParameterizedType: HashSet<>(431)", "Delete ClassInstanceCreation(432)", "Delete VariableDeclarationFragment(433)", "Delete VariableDeclarationStatement(434)", "Delete SimpleName: Object(435)", "Delete SimpleType: Object(436)", "Delete Dimension(437)", "Delete ArrayType: Object[](438)", "Delete SimpleName: objs(439)", "Delete VariableDeclarationFragment(440)", "Delete VariableDeclarationStatement(441)", "Delete PrimitiveType: int(442)", "Delete Dimension(443)", "Delete ArrayType: int[](444)", "Delete SimpleName: ints(445)", "Delete VariableDeclarationFragment(446)", "Delete VariableDeclarationStatement(447)", "Delete SimpleName: objs(448)", "Delete SimpleName: Object(449)", "Delete SimpleType: Object(450)", "Delete Dimension(451)", "Delete ArrayType: Object[](452)", "Delete SimpleName: OBJS_FIELD(453)", "Delete SimpleName: get(454)", "Delete SimpleName: rawMap(455)", "Delete MethodInvocation(456)", "Delete CastExpression(457)", "Delete Assignment: =(458)", "Delete ExpressionStatement(459)", "Delete SimpleName: ints(460)", "Delete PrimitiveType: int(461)", "Delete Dimension(462)", "Delete ArrayType: int[](463)", "Delete SimpleName: INTS_FIELD(464)", "Delete SimpleName: get(465)", "Delete SimpleName: rawMap(466)", "Delete MethodInvocation(467)", "Delete CastExpression(468)", "Delete Assignment: =(469)", "Delete ExpressionStatement(470)", "Delete Block(471)", "Delete SimpleName: ReflectiveOperationException(472)", "Delete SimpleType: ReflectiveOperationException(473)", "Delete SimpleName: e(474)", "Delete SingleVariableDeclaration(475)", "Delete SimpleName: LinkageError(476)", "Delete SimpleType: LinkageError(477)", "Delete SimpleName: e(478)", "Delete SimpleName: getMessage(479)", "Delete MethodInvocation(480)", "Delete ClassInstanceCreation(481)", "Delete ThrowStatement(482)", "Delete Block(483)", "Delete CatchClause(484)", "Delete TryStatement(485)", "Delete PrimitiveType: int(486)", "Delete SimpleName: i(487)", "Delete NumberLiteral: 0(488)", "Delete VariableDeclarationFragment(489)", "Delete VariableDeclarationExpression(490)", "Delete SimpleName: i(491)", "Delete QualifiedName: objs.length(492)", "Delete InfixExpression: <(493)", "Delete SimpleName: i(494)", "Delete PostfixExpression: ++(495)", "Delete SimpleName: objs(496)", "Delete SimpleName: i(497)", "Delete ArrayAccess(498)", "Delete NullLiteral(499)", "Delete InfixExpression: !=(500)", "Delete SimpleName: objs(501)", "Delete SimpleName: i(502)", "Delete ArrayAccess(503)", "Delete SimpleName: DELETED(504)", "Delete InfixExpression: !=(505)", "Delete InfixExpression: &&(506)", "Delete SimpleName: entries(507)", "Delete SimpleName: add(508)", "Delete SimpleName: SimpleImmutableEntry(509)", "Delete SimpleType: SimpleImmutableEntry(510)", "Delete SimpleName: JCTree(511)", "Delete SimpleType: JCTree(512)", "Delete SimpleName: Integer(513)", "Delete SimpleType: Integer(514)", "Delete ParameterizedType: SimpleImmutableEntry<JCTree,Integer>(515)", "Delete SimpleName: JCTree(516)", "Delete SimpleType: JCTree(517)", "Delete SimpleName: objs(518)", "Delete SimpleName: i(519)", "Delete ArrayAccess(520)", "Delete CastExpression(521)", "Delete SimpleName: ints(522)", "Delete SimpleName: i(523)", "Delete ArrayAccess(524)", "Delete ClassInstanceCreation(525)", "Delete MethodInvocation(526)", "Delete ExpressionStatement(527)", "Delete Block(528)", "Delete IfStatement(529)", "Delete Block(530)", "Delete ForStatement(531)", "Delete SimpleName: entries(532)", "Delete ReturnStatement(533)", "Delete Block(534)", "Delete MethodDeclaration(535)", "Delete TypeDeclaration: class(536)"]}}, {"ErrorProneAnalyzer_cluster": {"actions": [{"root": "INS QualifiedName: env.toplevel.endPositions to ClassInstanceCreation at 2", "operations": ["INS QualifiedName: env.toplevel.endPositions to ClassInstanceCreation at 2"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getEndPosMap", "DEL QualifiedName: env.toplevel", "DEL SimpleName: JDKCompatible", "DEL MethodInvocation"]}]}}, {"ErrorProneAnalyzer_diff": {"operations": ["Insert QualifiedName: env.toplevel.endPositions(321) into ClassInstanceCreation(329) at 2", "Delete SimpleName: JDKCompatible(321)", "Delete SimpleName: getEndPosMap(322)", "Delete QualifiedName: env.toplevel(323)", "Delete MethodInvocation(324)"]}}, {"ErrorProneEndPosMap_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.google.errorprone", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.tools.javac.tree.JCTree"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL SimpleType: JCTree", "DEL ParameterizedType: Map.Entry<JCTree,Integer>", "DEL TextElement: The implementation of end position table changes between JDK 7 and JDK 8. The class provides an", "DEL TagElement", "DEL SimpleName: pos", "DEL TypeDeclaration: interface", "DEL Javadoc", "DEL TextElement: abstraction over those differences.", "DEL MethodDeclaration", "DEL SimpleName: Set", "DEL MethodDeclaration", "DEL SimpleType: Map.Entry", "DEL ParameterizedType: Set<Map.Entry<JCTree,Integer>>", "DEL SimpleName: ErrorProneEndPosMap", "DEL SimpleName: Integer", "DEL SimpleName: Integer", "DEL SimpleName: getEndPosition", "DEL SingleVariableDeclaration", "DEL SimpleType: Integer", "DEL SimpleType: Set", "DEL SimpleName: entrySet", "DEL SimpleName: DiagnosticPosition", "DEL SimpleType: Integer", "DEL QualifiedName: Map.Entry", "DEL SimpleType: DiagnosticPosition", "DEL Modifier: public", "DEL SimpleName: JCTree"]}]}}, {"ErrorProneEndPosMap_diff": {"operations": ["Delete QualifiedName: com.google.errorprone(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.sun.tools.javac.tree.JCTree(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Map(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.Set(8)", "Delete ImportDeclaration(9)", "Delete TextElement: The implementation of end position table changes between JDK 7 and JDK 8. The class provides an(10)", "Delete TextElement: abstraction over those differences.(11)", "Delete TagElement(12)", "Delete Javadoc(13)", "Delete Modifier: public(14)", "Delete SimpleName: ErrorProneEndPosMap(15)", "Delete SimpleName: Integer(16)", "Delete SimpleType: Integer(17)", "Delete SimpleName: getEndPosition(18)", "Delete SimpleName: DiagnosticPosition(19)", "Delete SimpleType: DiagnosticPosition(20)", "Delete SimpleName: pos(21)", "Delete SingleVariableDeclaration(22)", "Delete MethodDeclaration(23)", "Delete SimpleName: Set(24)", "Delete SimpleType: Set(25)", "Delete QualifiedName: Map.Entry(26)", "Delete SimpleType: Map.Entry(27)", "Delete SimpleName: JCTree(28)", "Delete SimpleType: JCTree(29)", "Delete SimpleName: Integer(30)", "Delete SimpleType: Integer(31)", "Delete ParameterizedType: Map.Entry<JCTree,Integer>(32)", "Delete ParameterizedType: Set<Map.Entry<JCTree,Integer>>(33)", "Delete SimpleName: entrySet(34)", "Delete MethodDeclaration(35)", "Delete TypeDeclaration: interface(36)"]}}, {"JDKCompatible_cluster": {"actions": [{"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.tools.javac.main.JavaCompiler"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.tools.javac.tree.JCTree.JCCompilationUnit", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.tools.javac.util.AbstractLog"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.tools.javac.util.DiagnosticSource"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Field", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Method", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: javax.tools.JavaFileObject"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Javadoc", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: EndPosMap8", "DEL SimpleName: ErrorProneEndPosMap", "DEL SimpleType: JCCompilationUnit", "DEL SimpleName: compilationUnit", "DEL SimpleName: JCCompilationUnit", "DEL SimpleName: fromCompilationUnit", "DEL Modifier: public", "DEL Modifier: static", "DEL SimpleName: compilationUnit", "DEL TagElement", "DEL TextElement: ErrorProneEndPosMap factory. ", "DEL SimpleName: getEndPosMap", "DEL ReturnStatement", "DEL SimpleType: ErrorProneEndPosMap", "DEL MethodDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL TextElement: TODO(user): kill this with fire if -Xjcov ever gets turned on by default", "DEL TextElement: so re-parsing for end positions works.", "DEL Javadoc", "DEL SimpleName: Method", "DEL TextElement: In JDK 8, the EndPosTable is guarded against being set twice. Use reflection to unset it", "DEL TagElement", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL SimpleName: ABSTRACT_LOG__GET_SOURCE", "DEL TextElement: (https://code.google.com/p/error-prone/issues/detail?id=228)", "DEL FieldDeclaration", "DEL Modifier: private", "DEL SimpleType: Method"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleType: Field", "DEL Modifier: static", "DEL Modifier: final", "DEL SimpleName: DIAGNOSTIC_SOURCE__END_POS_TABLE", "DEL Modifier: private", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: Field"]}, {"root": "DEL Initializer", "operations": ["DEL TypeLiteral", "DEL SimpleName: setAccessible", "DEL SimpleName: getDeclaredField", "DEL SimpleName: JavaFileObject", "DEL SimpleName: Exception", "DEL SimpleType: Exception", "DEL SimpleName: LinkageError", "DEL StringLiteral: \"endPosTable\"", "DEL Block", "DEL SimpleName: DIAGNOSTIC_SOURCE__END_POS_TABLE", "DEL SimpleType: AbstractLog", "DEL ThrowStatement", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL StringLiteral: \"getSource\"", "DEL SingleVariableDeclaration", "DEL SimpleName: getDeclaredMethod", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL CatchClause", "DEL SimpleName: DiagnosticSource", "DEL SimpleName: e", "DEL BooleanLiteral: true", "DEL TypeLiteral", "DEL SimpleName: ABSTRACT_LOG__GET_SOURCE", "DEL SimpleName: AbstractLog", "DEL Assignment: =", "DEL SimpleName: ABSTRACT_LOG__GET_SOURCE", "DEL MethodInvocation", "DEL Modifier: static", "DEL Block", "DEL SimpleName: setAccessible", "DEL SimpleType: DiagnosticSource", "DEL SimpleName: e", "DEL TypeLiteral", "DEL ExpressionStatement", "DEL TryStatement", "DEL ExpressionStatement", "DEL SimpleType: LinkageError", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: DIAGNOSTIC_SOURCE__END_POS_TABLE", "DEL SimpleType: JavaFileObject", "DEL Initializer", "DEL ExpressionStatement", "DEL SimpleName: getMessage"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL NullLiteral", "DEL CastExpression", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: diagnosticSource", "DEL SimpleName: set", "DEL SimpleType: DiagnosticSource", "DEL SimpleType: Exception", "DEL Modifier: static", "DEL SimpleName: resetEndPosMap", "DEL SimpleName: JavaCompiler", "DEL Modifier: public", "DEL Block", "DEL CatchClause", "DEL SingleVariableDeclaration", "DEL SimpleType: JavaCompiler", "DEL SimpleType: JavaFileObject", "DEL SimpleName: JavaFileObject", "DEL QualifiedName: compiler.log", "DEL SimpleName: DiagnosticSource", "DEL SimpleName: DiagnosticSource", "DEL SimpleName: sourceFile", "DEL SimpleType: DiagnosticSource", "DEL SimpleName: e", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: sourceFile", "DEL MethodDeclaration", "DEL SimpleType: LinkageError", "DEL SimpleName: Exception", "DEL SimpleName: invoke", "DEL MethodInvocation", "DEL SimpleName: ABSTRACT_LOG__GET_SOURCE", "DEL ThrowStatement", "DEL SimpleName: getMessage", "DEL SimpleName: compiler", "DEL SimpleName: DIAGNOSTIC_SOURCE__END_POS_TABLE", "DEL SimpleName: diagnosticSource", "DEL SimpleName: LinkageError", "DEL SimpleName: e", "DEL MethodInvocation", "DEL TryStatement", "DEL Block", "DEL PrimitiveType: void", "DEL Block", "DEL ExpressionStatement"]}]}}, {"JDKCompatible_diff": {"operations": ["Delete QualifiedName: com.sun.tools.javac.main.JavaCompiler(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: com.sun.tools.javac.tree.JCTree.JCCompilationUnit(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: com.sun.tools.javac.util.AbstractLog(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: com.sun.tools.javac.util.DiagnosticSource(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: java.lang.reflect.Field(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: java.lang.reflect.Method(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: javax.tools.JavaFileObject(28)", "Delete ImportDeclaration(29)", "Delete TextElement: ErrorProneEndPosMap factory. (36)", "Delete TagElement(37)", "Delete Javadoc(38)", "Delete Modifier: public(39)", "Delete Modifier: static(40)", "Delete SimpleName: ErrorProneEndPosMap(41)", "Delete SimpleType: ErrorProneEndPosMap(42)", "Delete SimpleName: getEndPosMap(43)", "Delete SimpleName: JCCompilationUnit(44)", "Delete SimpleType: JCCompilationUnit(45)", "Delete SimpleName: compilationUnit(46)", "Delete SingleVariableDeclaration(47)", "Delete SimpleName: EndPosMap8(48)", "Delete SimpleName: fromCompilationUnit(49)", "Delete SimpleName: compilationUnit(50)", "Delete MethodInvocation(51)", "Delete ReturnStatement(52)", "Delete Block(53)", "Delete MethodDeclaration(54)", "Delete TextElement: In JDK 8, the EndPosTable is guarded against being set twice. Use reflection to unset it(55)", "Delete TextElement: so re-parsing for end positions works.(56)", "Delete TextElement: TODO(user): kill this with fire if -Xjcov ever gets turned on by default(57)", "Delete TextElement: (https://code.google.com/p/error-prone/issues/detail?id=228)(58)", "Delete TagElement(59)", "Delete Javadoc(60)", "Delete Modifier: private(61)", "Delete Modifier: static(62)", "Delete Modifier: final(63)", "Delete SimpleName: Method(64)", "Delete SimpleType: Method(65)", "Delete SimpleName: ABSTRACT_LOG__GET_SOURCE(66)", "Delete VariableDeclarationFragment(67)", "Delete FieldDeclaration(68)", "Delete Modifier: private(69)", "Delete Modifier: static(70)", "Delete Modifier: final(71)", "Delete SimpleName: Field(72)", "Delete SimpleType: Field(73)", "Delete SimpleName: DIAGNOSTIC_SOURCE__END_POS_TABLE(74)", "Delete VariableDeclarationFragment(75)", "Delete FieldDeclaration(76)", "Delete Modifier: static(77)", "Delete SimpleName: ABSTRACT_LOG__GET_SOURCE(78)", "Delete SimpleName: AbstractLog(79)", "Delete SimpleType: AbstractLog(80)", "Delete TypeLiteral(81)", "Delete SimpleName: getDeclaredMethod(82)", "Delete StringLiteral: \"getSource\"(83)", "Delete SimpleName: JavaFileObject(84)", "Delete SimpleType: JavaFileObject(85)", "Delete TypeLiteral(86)", "Delete MethodInvocation(87)", "Delete Assignment: =(88)", "Delete ExpressionStatement(89)", "Delete SimpleName: ABSTRACT_LOG__GET_SOURCE(90)", "Delete SimpleName: setAccessible(91)", "Delete BooleanLiteral: true(92)", "Delete MethodInvocation(93)", "Delete ExpressionStatement(94)", "Delete SimpleName: DIAGNOSTIC_SOURCE__END_POS_TABLE(95)", "Delete SimpleName: DiagnosticSource(96)", "Delete SimpleType: DiagnosticSource(97)", "Delete TypeLiteral(98)", "Delete SimpleName: getDeclaredField(99)", "Delete StringLiteral: \"endPosTable\"(100)", "Delete MethodInvocation(101)", "Delete Assignment: =(102)", "Delete ExpressionStatement(103)", "Delete SimpleName: DIAGNOSTIC_SOURCE__END_POS_TABLE(104)", "Delete SimpleName: setAccessible(105)", "Delete BooleanLiteral: true(106)", "Delete MethodInvocation(107)", "Delete ExpressionStatement(108)", "Delete Block(109)", "Delete SimpleName: Exception(110)", "Delete SimpleType: Exception(111)", "Delete SimpleName: e(112)", "Delete SingleVariableDeclaration(113)", "Delete SimpleName: LinkageError(114)", "Delete SimpleType: LinkageError(115)", "Delete SimpleName: e(116)", "Delete SimpleName: getMessage(117)", "Delete MethodInvocation(118)", "Delete ClassInstanceCreation(119)", "Delete ThrowStatement(120)", "Delete Block(121)", "Delete CatchClause(122)", "Delete TryStatement(123)", "Delete Block(124)", "Delete Initializer(125)", "Delete Modifier: public(126)", "Delete Modifier: static(127)", "Delete PrimitiveType: void(128)", "Delete SimpleName: resetEndPosMap(129)", "Delete SimpleName: JavaCompiler(130)", "Delete SimpleType: JavaCompiler(131)", "Delete SimpleName: compiler(132)", "Delete SingleVariableDeclaration(133)", "Delete SimpleName: JavaFileObject(134)", "Delete SimpleType: JavaFileObject(135)", "Delete SimpleName: sourceFile(136)", "Delete SingleVariableDeclaration(137)", "Delete SimpleName: DiagnosticSource(138)", "Delete SimpleType: DiagnosticSource(139)", "Delete SimpleName: diagnosticSource(140)", "Delete SimpleName: DiagnosticSource(141)", "Delete SimpleType: DiagnosticSource(142)", "Delete SimpleName: ABSTRACT_LOG__GET_SOURCE(143)", "Delete SimpleName: invoke(144)", "Delete QualifiedName: compiler.log(145)", "Delete SimpleName: sourceFile(146)", "Delete MethodInvocation(147)", "Delete CastExpression(148)", "Delete VariableDeclarationFragment(149)", "Delete VariableDeclarationStatement(150)", "Delete SimpleName: DIAGNOSTIC_SOURCE__END_POS_TABLE(151)", "Delete SimpleName: set(152)", "Delete SimpleName: diagnosticSource(153)", "Delete NullLiteral(154)", "Delete MethodInvocation(155)", "Delete ExpressionStatement(156)", "Delete Block(157)", "Delete SimpleName: Exception(158)", "Delete SimpleType: Exception(159)", "Delete SimpleName: e(160)", "Delete SingleVariableDeclaration(161)", "Delete SimpleName: LinkageError(162)", "Delete SimpleType: LinkageError(163)", "Delete SimpleName: e(164)", "Delete SimpleName: getMessage(165)", "Delete MethodInvocation(166)", "Delete ClassInstanceCreation(167)", "Delete ThrowStatement(168)", "Delete Block(169)", "Delete CatchClause(170)", "Delete TryStatement(171)", "Delete Block(172)", "Delete MethodDeclaration(173)"]}}, {"JavacErrorDescriptionListener_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: com.sun.tools.javac.tree.EndPosTable to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "UPDATE from ErrorProneEndPosMap to EndPosTable", "operations": ["UPD SimpleName: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleType: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleType: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleName: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleType: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleName: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS SimpleName: endPositions to MethodInvocation at 2", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS SimpleName: EndPosTableUtil to MethodInvocation at 0", "INS MethodInvocation to IfStatement at 0"]}, {"root": "UPDATE from JDKCompatible to EndPosTableUtil", "operations": ["UPD SimpleName: JDKCompatible from JDKCompatible to EndPosTableUtil"]}, {"root": "INS FieldAccess to VariableDeclarationFragment at 1", "operations": ["INS FieldAccess to VariableDeclarationFragment at 1", "INS SimpleName: endPositions to FieldAccess at 1"]}, {"root": "MOVE from FieldAccess", "operations": ["MOV MethodInvocation to FieldAccess at 0"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL SimpleName: endPositions", "DEL NullLiteral", "DEL InfixExpression: =="]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getEndPosMap", "DEL SimpleName: JDKCompatible", "DEL MethodInvocation"]}]}}, {"JavacErrorDescriptionListener_diff": {"operations": ["Insert ImportDeclaration(15) into CompilationUnit(391) at 7", "Insert QualifiedName: com.sun.tools.javac.tree.EndPosTable(14) into ImportDeclaration(15) at 0", "Update SimpleType: ErrorProneEndPosMap(46) to EndPosTable", "Update SimpleName: ErrorProneEndPosMap(45) to EndPosTable", "Update SimpleType: ErrorProneEndPosMap(129) to EndPosTable", "Update SimpleName: ErrorProneEndPosMap(128) to EndPosTable", "Insert MethodInvocation(214) into IfStatement(254) at 0", "Insert SimpleName: EndPosTableUtil(211) into MethodInvocation(214) at 0", "Insert SimpleName: isEmpty(212) into MethodInvocation(214) at 1", "Insert SimpleName: endPositions(213) into MethodInvocation(214) at 2", "Update SimpleType: ErrorProneEndPosMap(228) to EndPosTable", "Update SimpleName: JDKCompatible(221) to EndPosTableUtil", "Update SimpleName: ErrorProneEndPosMap(227) to EndPosTable", "Insert FieldAccess(238) into VariableDeclarationFragment(239) at 1", "Move MethodInvocation(235) into FieldAccess(238) at 0", "Insert SimpleName: endPositions(237) into FieldAccess(238) at 1", "Delete SimpleName: endPositions(209)", "Delete NullLiteral(210)", "Delete InfixExpression: ==(211)", "Delete SimpleName: JDKCompatible(230)", "Delete SimpleName: getEndPosMap(231)", "Delete MethodInvocation(236)"]}}, {"WrappedTreeMap_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 1"]}, {"root": "UPDATE from com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition to com.google.common.base.Objects", "operations": ["UPD QualifiedName: com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition from com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition to com.google.common.base.Objects"]}, {"root": "UPDATE from wrappedMap to backingMap", "operations": ["UPD SimpleName: wrappedMap from wrappedMap to backingMap", "UPD SimpleName: wrappedMap from wrappedMap to backingMap", "UPD SimpleName: wrappedMap from wrappedMap to backingMap", "UPD SimpleName: wrappedMap from wrappedMap to backingMap"]}, {"root": "UPDATE from ErrorProneEndPosMap to EndPosTable", "operations": ["UPD SimpleType: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleName: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable"]}, {"root": "UPDATE from map to endPosMap", "operations": ["UPD SimpleName: map from map to endPosMap", "UPD SimpleName: entrySet from entrySet to endPosMap"]}, {"root": "UPDATE from map to EndPosTableUtil", "operations": ["UPD SimpleName: map from map to EndPosTableUtil"]}, {"root": "INS SimpleName: getEntries to MethodInvocation at 1", "operations": ["INS SimpleName: getEntries to MethodInvocation at 1"]}, {"root": "UPDATE from objectsEquals to Objects", "operations": ["UPD SimpleName: objectsEquals from objectsEquals to Objects"]}, {"root": "INS SimpleName: equal to MethodInvocation at 1", "operations": ["INS SimpleName: equal to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL SimpleType: ErrorProneEndPosMap", "operations": ["DEL SimpleType: ErrorProneEndPosMap", "DEL SimpleName: ErrorProneEndPosMap"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Override", "DEL MarkerAnnotation", "DEL SimpleName: Set", "DEL Modifier: public", "DEL SimpleType: Map.Entry", "DEL SimpleType: JCTree", "DEL SimpleType: Set", "DEL QualifiedName: Map.Entry", "DEL SimpleName: Integer", "DEL SimpleType: UnsupportedOperationException", "DEL ParameterizedType: Set<Map.Entry<JCTree,Integer>>", "DEL ClassInstanceCreation", "DEL SimpleName: UnsupportedOperationException", "DEL MethodDeclaration", "DEL Block", "DEL ParameterizedType: Map.Entry<JCTree,Integer>", "DEL SimpleName: JCTree", "DEL SimpleName: entrySet", "DEL StringLiteral: \"entrySet() not implemented on WrappedTreeMap\"", "DEL ThrowStatement", "DEL SimpleType: Integer"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL SimpleName: pos", "DEL SimpleName: getEndPosition", "DEL SimpleName: pos", "DEL SimpleName: Integer", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SimpleType: DiagnosticPosition", "DEL ThisExpression", "DEL SimpleName: getEndPosition", "DEL SimpleName: Override", "DEL SingleVariableDeclaration", "DEL SimpleName: DiagnosticPosition", "DEL MethodInvocation", "DEL Modifier: public", "DEL MarkerAnnotation", "DEL SimpleType: Integer"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: Object", "DEL ParenthesizedExpression", "DEL SimpleName: b", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: b", "DEL SimpleName: a", "DEL NullLiteral", "DEL SimpleName: a", "DEL InfixExpression: !=", "DEL SimpleName: a", "DEL MethodDeclaration", "DEL InfixExpression: &&", "DEL SimpleType: Object", "DEL Modifier: private", "DEL ParenthesizedExpression", "DEL SimpleName: objectsEquals", "DEL InfixExpression: ==", "DEL PrimitiveType: boolean", "DEL ParenthesizedExpression", "DEL SimpleName: b", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: equals", "DEL SimpleName: a", "DEL InfixExpression: ||"]}]}}, {"WrappedTreeMap_diff": {"operations": ["Move ImportDeclaration(11) into CompilationUnit(529) at 1", "Update QualifiedName: com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition(10) to com.google.common.base.Objects", "Update SimpleName: wrappedMap(46) to backingMap", "Update SimpleType: ErrorProneEndPosMap(73) to EndPosTable", "Update SimpleName: map(74) to endPosMap", "Update SimpleName: ErrorProneEndPosMap(72) to EndPosTable", "Update SimpleName: wrappedMap(82) to backingMap", "Update SimpleName: map(98) to EndPosTableUtil", "Insert SimpleName: getEntries(95) into MethodInvocation(97) at 1", "Update SimpleName: entrySet(99) to endPosMap", "Update SimpleName: wrappedMap(171) to backingMap", "Update SimpleName: wrappedMap(101) to backingMap", "Update SimpleName: objectsEquals(368) to Objects", "Insert SimpleName: equal(328) into MethodInvocation(343) at 1", "Delete QualifiedName: java.util.Set(20)", "Delete ImportDeclaration(21)", "Delete SimpleName: ErrorProneEndPosMap(32)", "Delete SimpleType: ErrorProneEndPosMap(33)", "Delete SimpleName: Override(122)", "Delete MarkerAnnotation(123)", "Delete Modifier: public(124)", "Delete SimpleName: Set(125)", "Delete SimpleType: Set(126)", "Delete QualifiedName: Map.Entry(127)", "Delete SimpleType: Map.Entry(128)", "Delete SimpleName: JCTree(129)", "Delete SimpleType: JCTree(130)", "Delete SimpleName: Integer(131)", "Delete SimpleType: Integer(132)", "Delete ParameterizedType: Map.Entry<JCTree,Integer>(133)", "Delete ParameterizedType: Set<Map.Entry<JCTree,Integer>>(134)", "Delete SimpleName: entrySet(135)", "Delete SimpleName: UnsupportedOperationException(136)", "Delete SimpleType: UnsupportedOperationException(137)", "Delete StringLiteral: \"entrySet() not implemented on WrappedTreeMap\"(138)", "Delete ClassInstanceCreation(139)", "Delete ThrowStatement(140)", "Delete Block(141)", "Delete MethodDeclaration(142)", "Delete SimpleName: Override(188)", "Delete MarkerAnnotation(189)", "Delete Modifier: public(190)", "Delete SimpleName: Integer(191)", "Delete SimpleType: Integer(192)", "Delete SimpleName: getEndPosition(193)", "Delete SimpleName: DiagnosticPosition(194)", "Delete SimpleType: DiagnosticPosition(195)", "Delete SimpleName: pos(196)", "Delete SingleVariableDeclaration(197)", "Delete SimpleName: pos(198)", "Delete SimpleName: getEndPosition(199)", "Delete ThisExpression(200)", "Delete MethodInvocation(201)", "Delete ReturnStatement(202)", "Delete Block(203)", "Delete MethodDeclaration(204)", "Delete Modifier: private(420)", "Delete PrimitiveType: boolean(421)", "Delete SimpleName: objectsEquals(422)", "Delete SimpleName: Object(423)", "Delete SimpleType: Object(424)", "Delete SimpleName: a(425)", "Delete SingleVariableDeclaration(426)", "Delete SimpleName: Object(427)", "Delete SimpleType: Object(428)", "Delete SimpleName: b(429)", "Delete SingleVariableDeclaration(430)", "Delete SimpleName: a(431)", "Delete SimpleName: b(432)", "Delete InfixExpression: ==(433)", "Delete ParenthesizedExpression(434)", "Delete SimpleName: a(435)", "Delete NullLiteral(436)", "Delete InfixExpression: !=(437)", "Delete ParenthesizedExpression(438)", "Delete SimpleName: a(439)", "Delete SimpleName: equals(440)", "Delete SimpleName: b(441)", "Delete MethodInvocation(442)", "Delete InfixExpression: &&(443)", "Delete ParenthesizedExpression(444)", "Delete InfixExpression: ||(445)", "Delete ReturnStatement(446)", "Delete Block(447)", "Delete MethodDeclaration(448)"]}}, {"AppliedFix_cluster": {"actions": [{"root": "UPDATE from com.google.errorprone.ErrorProneEndPosMap to com.sun.tools.javac.tree.EndPosTable", "operations": ["UPD QualifiedName: com.google.errorprone.ErrorProneEndPosMap from com.google.errorprone.ErrorProneEndPosMap to com.sun.tools.javac.tree.EndPosTable"]}, {"root": "UPDATE from ErrorProneEndPosMap to EndPosTable", "operations": ["UPD SimpleType: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleType: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleName: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleName: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleType: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleName: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable"]}]}}, {"AppliedFix_diff": {"operations": ["Update QualifiedName: com.google.errorprone.ErrorProneEndPosMap(2) to com.sun.tools.javac.tree.EndPosTable", "Update SimpleType: ErrorProneEndPosMap(86) to EndPosTable", "Update SimpleType: ErrorProneEndPosMap(318) to EndPosTable", "Update SimpleName: ErrorProneEndPosMap(85) to EndPosTable", "Update SimpleType: ErrorProneEndPosMap(97) to EndPosTable", "Update SimpleName: ErrorProneEndPosMap(317) to EndPosTable", "Update SimpleName: ErrorProneEndPosMap(96) to EndPosTable"]}}, {"Fix_cluster": {"actions": [{"root": "UPDATE from com.google.errorprone.ErrorProneEndPosMap to com.sun.tools.javac.tree.EndPosTable", "operations": ["UPD QualifiedName: com.google.errorprone.ErrorProneEndPosMap from com.google.errorprone.ErrorProneEndPosMap to com.sun.tools.javac.tree.EndPosTable"]}, {"root": "UPDATE from ErrorProneEndPosMap to EndPosTable", "operations": ["UPD SimpleName: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleType: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable"]}]}}, {"Fix_diff": {"operations": ["Update QualifiedName: com.google.errorprone.ErrorProneEndPosMap(2) to com.sun.tools.javac.tree.EndPosTable", "Update SimpleType: ErrorProneEndPosMap(32) to EndPosTable", "Update SimpleName: ErrorProneEndPosMap(31) to EndPosTable"]}}, {"SuggestedFix_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 6"]}, {"root": "UPDATE from com.google.errorprone.ErrorProneEndPosMap to com.sun.tools.javac.tree.EndPosTable", "operations": ["UPD QualifiedName: com.google.errorprone.ErrorProneEndPosMap from com.google.errorprone.ErrorProneEndPosMap to com.sun.tools.javac.tree.EndPosTable"]}, {"root": "UPDATE from ErrorProneEndPosMap to EndPosTable", "operations": ["UPD SimpleName: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleType: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleType: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleType: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleName: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleName: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleType: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleName: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleType: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleName: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleName: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleType: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleType: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable", "UPD SimpleName: ErrorProneEndPosMap from ErrorProneEndPosMap to EndPosTable"]}, {"root": "INS QualifiedName: compilationUnit.endPositions to MethodInvocation at 1", "operations": ["INS QualifiedName: compilationUnit.endPositions to MethodInvocation at 1"]}, {"root": "UPDATE from endPositions to tree", "operations": ["UPD SimpleName: endPositions from endPositions to tree"]}, {"root": "UPDATE from tree to endPositions", "operations": ["UPD SimpleName: tree from tree to endPositions", "UPD SimpleName: original from original to endPositions"]}, {"root": "UPDATE from endPositions to original", "operations": ["UPD SimpleName: endPositions from endPositions to original"]}, {"root": "UPDATE from Ints to Integer", "operations": ["UPD SimpleName: Ints from Ints to Integer"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.primitives.Ints", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.errorprone.JDKCompatible"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: JDKCompatible", "DEL MethodInvocation", "DEL SimpleName: getEndPosMap", "DEL SimpleName: compilationUnit"]}]}}, {"SuggestedFix_diff": {"operations": ["Move ImportDeclaration(7) into CompilationUnit(1261) at 6", "Update QualifiedName: com.google.errorprone.ErrorProneEndPosMap(6) to com.sun.tools.javac.tree.EndPosTable", "Update SimpleType: ErrorProneEndPosMap(222) to EndPosTable", "Update SimpleName: ErrorProneEndPosMap(221) to EndPosTable", "Update SimpleType: ErrorProneEndPosMap(1035) to EndPosTable", "Update SimpleType: ErrorProneEndPosMap(1054) to EndPosTable", "Update SimpleType: ErrorProneEndPosMap(1103) to EndPosTable", "Update SimpleType: ErrorProneEndPosMap(1149) to EndPosTable", "Update SimpleType: ErrorProneEndPosMap(1186) to EndPosTable", "Update SimpleType: ErrorProneEndPosMap(1249) to EndPosTable", "Insert QualifiedName: compilationUnit.endPositions(174) into MethodInvocation(175) at 1", "Update SimpleName: ErrorProneEndPosMap(1034) to EndPosTable", "Update SimpleName: ErrorProneEndPosMap(1053) to EndPosTable", "Update SimpleName: ErrorProneEndPosMap(1102) to EndPosTable", "Update SimpleName: ErrorProneEndPosMap(1148) to EndPosTable", "Update SimpleName: ErrorProneEndPosMap(1185) to EndPosTable", "Update SimpleName: ErrorProneEndPosMap(1248) to EndPosTable", "Update SimpleName: endPositions(1152) to tree", "Update SimpleName: tree(1154) to endPositions", "Update SimpleName: endPositions(1257) to original", "Update SimpleName: original(1259) to endPositions", "Update SimpleName: Ints(264) to Integer", "Delete QualifiedName: com.google.common.primitives.Ints(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.google.errorprone.JDKCompatible(8)", "Delete ImportDeclaration(9)", "Delete SimpleName: JDKCompatible(178)", "Delete SimpleName: getEndPosMap(179)", "Delete SimpleName: compilationUnit(180)", "Delete MethodInvocation(181)"]}}], "commit_stats": [{"total_files": 11, "deleted_files": 2, "testing": "True", "maintenance": "True", "build": "False"}]}