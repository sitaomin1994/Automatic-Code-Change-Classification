{"application": "google-caja", "csha": "a93b6ae27b4c3c930d1a2d46d1301c02d9e129b6", "files": [{"PipelineMaker_cluster": {"actions": [{"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.plugin.stages.OpenTemplateStage", "DEL ImportDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL QualifiedName: Planner.PlanState", "DEL StringLiteral: \"opt+opentemplate\"", "DEL FieldDeclaration", "DEL SimpleType: Planner.PlanState", "DEL MethodInvocation", "DEL StringLiteral: \"to desugar open(Template(...)) calls.\"", "DEL SimpleName: makePrecond", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL Modifier: static", "DEL Modifier: public", "DEL SimpleName: OPT_OPENTEMPLATE"]}, {"root": "DEL MethodInvocation", "operations": ["DEL ExpressionStatement", "DEL SimpleName: given", "DEL QualifiedName: Pipeline.Stage", "DEL SimpleName: OPT_OPENTEMPLATE", "DEL SimpleType: Pipeline.Stage", "DEL Block", "DEL ParameterizedType: Pipeline.Stage<Jobs>", "DEL SimpleType: PlanInputs", "DEL SimpleName: operate", "DEL SimpleName: JS", "DEL SimpleName: PlanInputs", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleType: List", "DEL ParameterizedType: List<Pipeline.Stage<Jobs>>", "DEL SimpleType: OpenTemplateStage", "DEL SimpleName: OpenTemplateStage", "DEL SingleVariableDeclaration", "DEL SimpleType: Jobs", "DEL SimpleName: List", "DEL PrimitiveType: void", "DEL SimpleName: Tool", "DEL SimpleName: given", "DEL SimpleName: out", "DEL SimpleName: produces", "DEL MethodInvocation", "DEL SimpleName: in", "DEL SimpleName: JS", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL SimpleName: out", "DEL SimpleName: add", "DEL SimpleName: Jobs", "DEL AnonymousClassDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: Tool", "DEL MethodDeclaration", "DEL ClassInstanceCreation"]}]}}, {"PipelineMaker_diff": {"operations": ["Delete QualifiedName: com.google.caja.plugin.stages.OpenTemplateStage(24)", "Delete ImportDeclaration(25)", "Delete Modifier: public(591)", "Delete Modifier: static(592)", "Delete Modifier: final(593)", "Delete QualifiedName: Planner.PlanState(594)", "Delete SimpleType: Planner.PlanState(595)", "Delete SimpleName: OPT_OPENTEMPLATE(596)", "Delete SimpleName: makePrecond(597)", "Delete StringLiteral: \"opt+opentemplate\"(598)", "Delete StringLiteral: \"to desugar open(Template(...)) calls.\"(599)", "Delete MethodInvocation(600)", "Delete VariableDeclarationFragment(601)", "Delete FieldDeclaration(602)", "Delete SimpleName: Tool(1064)", "Delete SimpleType: Tool(1065)", "Delete Modifier: public(1066)", "Delete PrimitiveType: void(1067)", "Delete SimpleName: operate(1068)", "Delete SimpleName: PlanInputs(1069)", "Delete SimpleType: PlanInputs(1070)", "Delete SimpleName: in(1071)", "Delete SingleVariableDeclaration(1072)", "Delete SimpleName: List(1073)", "Delete SimpleType: List(1074)", "Delete QualifiedName: Pipeline.Stage(1075)", "Delete SimpleType: Pipeline.Stage(1076)", "Delete SimpleName: Jobs(1077)", "Delete SimpleType: Jobs(1078)", "Delete ParameterizedType: Pipeline.Stage<Jobs>(1079)", "Delete ParameterizedType: List<Pipeline.Stage<Jobs>>(1080)", "Delete SimpleName: out(1081)", "Delete SingleVariableDeclaration(1082)", "Delete SimpleName: out(1083)", "Delete SimpleName: add(1084)", "Delete SimpleName: OpenTemplateStage(1085)", "Delete SimpleType: OpenTemplateStage(1086)", "Delete ClassInstanceCreation(1087)", "Delete MethodInvocation(1088)", "Delete ExpressionStatement(1089)", "Delete Block(1090)", "Delete MethodDeclaration(1091)", "Delete AnonymousClassDeclaration(1092)", "Delete ClassInstanceCreation(1093)", "Delete SimpleName: given(1094)", "Delete SimpleName: JS(1095)", "Delete MethodInvocation(1096)", "Delete SimpleName: given(1097)", "Delete SimpleName: OPT_OPENTEMPLATE(1098)", "Delete MethodInvocation(1099)", "Delete SimpleName: produces(1100)", "Delete SimpleName: JS(1101)", "Delete MethodInvocation(1102)"]}}, {"OpenTemplateStage_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.google.caja.plugin.stages"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.SomethingWidgyHappenedError"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.lexer.CharProducer", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.lexer.FilePosition"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.lexer.JsLexer"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.lexer.JsTokenQueue", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.lexer.ParseException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.AncestorChain"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.MutableParseTreeNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.ParseTreeNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.Visitor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.js.ArrayConstructor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.js.Declaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.js.Expression", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.js.FunctionConstructor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.js.Identifier", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.js.Operation", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.js.Operator"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.js.Parser", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.js.Reference", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.js.StringLiteral", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.plugin.JobEnvelope", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.plugin.Jobs"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.reporting.MessageQueue", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.util.ContentType"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.util.Pair"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.util.Pipeline", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.StringReader"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.ArrayList"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.HashSet", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Set", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: String", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL SimpleName: Optimizer", "DEL WildcardType: ?", "DEL TextElement: .", "DEL TextElement:  List", "DEL SimpleName: StringLiteral", "DEL SimpleName: getIdentifierName", "DEL EnhancedForStatement", "DEL EnhancedForStatement", "DEL SimpleName: add", "DEL InstanceofExpression", "DEL Modifier: private", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL SimpleName: child", "DEL SimpleName: Splitter", "DEL SimpleType: Expression", "DEL InstanceofExpression", "DEL ParameterizedType: AncestorChain<FunctionConstructor>", "DEL InfixExpression: ==", "DEL SimpleType: Jobs", "DEL MethodInvocation", "DEL SimpleName: String", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: pos", "DEL InstanceofExpression", "DEL InstanceofExpression", "DEL SimpleName: out", "DEL NumberLiteral: 3", "DEL BooleanLiteral: false", "DEL SimpleName: Reference", "DEL SimpleName: size", "DEL BooleanLiteral: false", "DEL Modifier: public", "DEL SimpleType: List", "DEL SimpleType: Reference", "DEL SimpleName: ArrayList", "DEL SimpleName: instance", "DEL ReturnStatement", "DEL SimpleName: jobs", "DEL SimpleName: List", "DEL SimpleName: flattenStringConcatenation", "DEL ParameterizedType: List<Expression>", "DEL SimpleType: Reference", "DEL SingleVariableDeclaration", "DEL SimpleName: chain", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL SimpleName: chain", "DEL SimpleType: FunctionConstructor", "DEL Modifier: public", "DEL ParameterizedType: AncestorChain<?>", "DEL SimpleName: jobs", "DEL SimpleName: HashSet", "DEL ParenthesizedExpression", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL TagElement: @code", "DEL TextElement:  Template", "DEL SimpleName: getFilePosition", "DEL Assignment: =", "DEL PrefixExpression: !", "DEL SimpleName: FunctionConstructor", "DEL QualifiedName: Operator.FUNCTION_CALL", "DEL SimpleName: getIdentifierName", "DEL QualifiedName: env.fromCache", "DEL SimpleName: out", "DEL ReturnStatement", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: chain", "DEL SingleVariableDeclaration", "DEL SimpleName: FunctionConstructor", "DEL ReturnStatement", "DEL SimpleType: AncestorChain", "DEL QualifiedName: sc.innerScopes", "DEL SimpleName: FunctionConstructor", "DEL SimpleName: flattenStringsOnto", "DEL SimpleName: optimizeOpenTemplate", "DEL InstanceofExpression", "DEL ExpressionStatement", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: Reference", "DEL QualifiedName: chain.parent", "DEL VariableDeclarationStatement", "DEL ParenthesizedExpression", "DEL SimpleName: variablesInScope", "DEL ExpressionStatement", "DEL SimpleName: evalRef", "DEL SimpleName: add", "DEL SimpleType: StringLiteral", "DEL SimpleName: AncestorChain", "DEL SimpleName: stringLiterals", "DEL SimpleType: ArrayList", "DEL SimpleName: FunctionConstructor", "DEL SimpleName: List", "DEL SimpleType: JobEnvelope", "DEL TagElement", "DEL SimpleType: AncestorChain", "DEL TagElement: @code", "DEL ReturnStatement", "DEL SimpleType: Expression", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: rhs", "DEL QualifiedName: Operator.FUNCTION_CALL", "DEL SimpleName: optimizeOpenTemplate", "DEL MethodInvocation", "DEL SimpleName: applyToScope", "DEL SimpleName: children", "DEL SimpleName: get", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: out", "DEL SimpleName: visit", "DEL Modifier: static", "DEL ReturnStatement", "DEL SimpleName: Reference", "DEL Javadoc", "DEL TextElement: .", "DEL SimpleName: innerScopes", "DEL ClassInstanceCreation", "DEL BooleanLiteral: false", "DEL VariableDeclarationStatement", "DEL Modifier: private", "DEL SimpleName: v", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: StringLiteral", "DEL SimpleType: Jobs", "DEL NumberLiteral: 0", "DEL SimpleName: Operation", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: children", "DEL TagElement: @code", "DEL ExpressionStatement", "DEL SimpleName: sc", "DEL SimpleName: evalRef", "DEL BreakStatement", "DEL Block", "DEL MethodInvocation", "DEL ParameterizedType: List<StringLiteral>", "DEL IfStatement", "DEL SimpleName: e", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleType: Operation", "DEL QualifiedName: chain.parent.node", "DEL InfixExpression: !=", "DEL TextElement: Walks a function and inlines calls to ", "DEL SingleVariableDeclaration", "DEL SimpleName: Expression", "DEL TypeDeclaration: class", "DEL MethodDeclaration", "DEL SimpleType: AncestorChain", "DEL SimpleType: FunctionConstructor", "DEL NumberLiteral: 1", "DEL VariableDeclarationStatement", "DEL Block", "DEL ParenthesizedExpression", "DEL SimpleName: ArrayList", "DEL TextElement: Inlines calls to ", "DEL ParameterizedType: List<AncestorChain<FunctionConstructor>>", "DEL Block", "DEL TextElement: Walks a function and compiles a set of all local variables", "DEL SimpleType: Expression", "DEL SimpleName: AncestorChain", "DEL ReturnStatement", "DEL ThisExpression", "DEL SimpleType: Jobs", "DEL TextElement:  \"Hello \" + \"World\"", "DEL SimpleName: StringLiteral", "DEL MethodInvocation", "DEL SimpleName: List", "DEL VariableDeclarationFragment", "DEL SimpleType: MutableParseTreeNode", "DEL MethodInvocation", "DEL NumberLiteral: 2", "DEL IfStatement", "DEL Javadoc", "DEL SimpleName: name", "DEL SimpleName: stringLiterals", "DEL TypeLiteral", "DEL SingleVariableDeclaration", "DEL SimpleName: hasNoFatalErrors", "DEL TextElement:  are bound to the global scope.", "DEL Modifier: static", "DEL SimpleName: AncestorChain", "DEL SimpleName: e", "DEL SimpleName: ScopeChecker", "DEL SimpleName: op", "DEL NumberLiteral: 2", "DEL IfStatement", "DEL BooleanLiteral: true", "DEL SimpleType: Splitter", "DEL CastExpression", "DEL SimpleType: Jobs", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: children", "DEL ClassInstanceCreation", "DEL StringLiteral: \"eval\"", "DEL SimpleName: JobEnvelope", "DEL Block", "DEL SimpleName: evalCall", "DEL MethodInvocation", "DEL SimpleName: innerScopes", "DEL SimpleName: Operation", "DEL TagElement", "DEL SimpleName: Jobs", "DEL SingleVariableDeclaration", "DEL FieldDeclaration", "DEL TagElement", "DEL MethodInvocation", "DEL WildcardType: ?", "DEL BooleanLiteral: false", "DEL QualifiedName: Operator.ADDITION", "DEL SimpleType: ParseTreeNode", "DEL WildcardType: ?", "DEL SimpleType: FunctionConstructor", "DEL SimpleName: rhs", "DEL FieldDeclaration", "DEL SimpleType: Operation", "DEL CastExpression", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL TextElement:  mikesamuel@gmail.com", "DEL MethodDeclaration", "DEL SimpleName: apply", "DEL InstanceofExpression", "DEL SimpleType: Visitor", "DEL SimpleType: List", "DEL SimpleName: innerScope", "DEL SimpleName: Identifier", "DEL SimpleName: out", "DEL SimpleName: splitter", "DEL SimpleName: tmplCall", "DEL SimpleName: Declaration", "DEL SimpleType: List", "DEL QualifiedName: chain.node", "DEL SimpleType: AncestorChain", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL PrimitiveType: void", "DEL SimpleName: jobs", "DEL Assignment: =", "DEL Block", "DEL SimpleName: AncestorChain", "DEL MethodInvocation", "DEL SimpleType: Set", "DEL SimpleType: FunctionConstructor", "DEL CastExpression", "DEL TextElement: rewrite rule.", "DEL ClassInstanceCreation", "DEL SimpleType: List", "DEL SimpleName: Operation", "DEL SimpleName: FilePosition", "DEL ParenthesizedExpression", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: jobs", "DEL ParameterizedType: AncestorChain<?>", "DEL InfixExpression: ||", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL BooleanLiteral: true", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL SingleVariableDeclaration", "DEL SimpleName: applyToScope", "DEL SingleVariableDeclaration", "DEL SimpleType: StringLiteral", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL TagElement: @code", "DEL TagElement: @code", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: Reference", "DEL InfixExpression: ==", "DEL TextElement:  eval(Template(\"html&hellip;\"))", "DEL SimpleName: e", "DEL InfixExpression: !=", "DEL TagElement: @code", "DEL SimpleName: chain", "DEL SimpleType: Declaration", "DEL Block", "DEL Modifier: public", "DEL SimpleName: Visitor", "DEL SimpleName: cast", "DEL SimpleName: Expression", "DEL SimpleName: create", "DEL ParameterizedType: HashSet<String>", "DEL IfStatement", "DEL SimpleType: String", "DEL SimpleName: contains", "DEL InfixExpression: ||", "DEL ParameterizedType: List<StringLiteral>", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: StringLiteral", "DEL SimpleName: e", "DEL ParameterizedType: AncestorChain<?>", "DEL CastExpression", "DEL SimpleName: visit", "DEL TextElement: , to a ", "DEL QualifiedName: env.job", "DEL MethodInvocation", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: applyToScope", "DEL SimpleName: getOperator", "DEL SimpleName: acceptPreOrder", "DEL SimpleType: Expression", "DEL ParameterizedType: Pipeline.Stage<Jobs>", "DEL SimpleName: Operation", "DEL SimpleName: startPos", "DEL SimpleType: StringLiteral", "DEL SimpleName: getRoot", "DEL SimpleName: rhs", "DEL ExpressionStatement", "DEL SimpleName: startPos", "DEL SimpleType: StringLiteral", "DEL Block", "DEL StringLiteral: \"StringInterpolation\"", "DEL SimpleName: Jobs", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: FilePosition", "DEL ParameterizedType: Set<String>", "DEL SimpleType: Splitter", "DEL SimpleType: Operation", "DEL SimpleName: AncestorChain", "DEL TextElement: TODO(mikesamuel): this could probably be more simply done as a", "DEL IfStatement", "DEL BooleanLiteral: false", "DEL Modifier: private", "DEL SimpleName: Expression", "DEL SimpleName: size", "DEL IfStatement", "DEL SimpleName: Jobs", "DEL SimpleName: jobs", "DEL SimpleType: Operation", "DEL SimpleType: Visitor", "DEL ContinueStatement", "DEL SimpleType: Reference", "DEL TagElement: @code", "DEL QualifiedName: chain.node", "DEL SimpleType: ScopeChecker", "DEL ParameterizedType: AncestorChain<?>", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL SimpleName: evalRef", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL StringLiteral: \"Template\"", "DEL SimpleName: chain", "DEL SimpleType: HashSet", "DEL VariableDeclarationFragment", "DEL SimpleType: AncestorChain", "DEL SimpleName: Operation", "DEL SimpleName: Expression", "DEL InfixExpression: ==", "DEL SimpleName: tmplRef", "DEL SimpleName: e", "DEL MethodDeclaration", "DEL SimpleName: pos", "DEL Modifier: final", "DEL SimpleName: flattenStringsOnto", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: op", "DEL SimpleName: Visitor", "DEL TextElement:  eval(Template(...))", "DEL SimpleName: evalCall", "DEL Modifier: private", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL ParameterizedType: AncestorChain<FunctionConstructor>", "DEL IfStatement", "DEL SimpleName: tmplRef", "DEL ParameterizedType: ArrayList<AncestorChain<FunctionConstructor>>", "DEL QualifiedName: chain.node", "DEL SimpleName: templateParts", "DEL SimpleName: get", "DEL SimpleType: FilePosition", "DEL Block", "DEL SimpleName: ScopeChecker", "DEL SimpleName: Jobs", "DEL Block", "DEL SimpleName: startOf", "DEL SimpleName: rhs", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: List", "DEL EnhancedForStatement", "DEL Block", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: child", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleName: FilePosition", "DEL BooleanLiteral: false", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: MutableParseTreeNode", "DEL SimpleType: Identifier", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL TextElement: nested functions.", "DEL SimpleName: splitter", "DEL Block", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleType: AncestorChain", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getOperator", "DEL ExpressionStatement", "DEL NullLiteral", "DEL QualifiedName: chain.node", "DEL QualifiedName: chain.node", "DEL IfStatement", "DEL TagElement", "DEL QualifiedName: chain.node", "DEL TextElement:  eval(Template(...))", "DEL VariableDeclarationFragment", "DEL SimpleType: List", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleType: Operation", "DEL InstanceofExpression", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: Visitor", "DEL SimpleName: Operation", "DEL SimpleName: getMessageQueue", "DEL SimpleName: String", "DEL QualifiedName: sc.variablesInScope", "DEL ReturnStatement", "DEL SimpleName: children", "DEL SimpleName: jobs", "DEL ParameterizedType: AncestorChain<FunctionConstructor>", "DEL CastExpression", "DEL MethodInvocation", "DEL SimpleName: Declaration", "DEL IfStatement", "DEL Block", "DEL SimpleName: tmplRef", "DEL SimpleType: Expression", "DEL SimpleName: replaceChild", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL ParameterizedType: List<StringLiteral>", "DEL SimpleName: Splitter", "DEL SimpleType: ScopeChecker", "DEL TextElement: Applies a visitor to the nodes in the current scope, not recursing into", "DEL PrimitiveType: void", "DEL SimpleName: AncestorChain", "DEL SimpleType: Reference", "DEL VariableDeclarationFragment", "DEL SimpleName: FunctionConstructor", "DEL SimpleName: Expression", "DEL Modifier: static", "DEL Javadoc", "DEL SimpleName: out", "DEL NumberLiteral: 1", "DEL TextElement:  and", "DEL TextElement:  eval", "DEL SimpleName: chain", "DEL VariableDeclarationFragment", "DEL PrefixExpression: !", "DEL SimpleName: Optimizer", "DEL SimpleName: name", "DEL SimpleName: sc", "DEL ParenthesizedExpression", "DEL SimpleName: tmplCall", "DEL SimpleName: AncestorChain", "DEL BooleanLiteral: true", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleType: FunctionConstructor", "DEL SimpleType: StringLiteral", "DEL NullLiteral", "DEL SimpleType: StringLiteral", "DEL Modifier: static", "DEL Block", "DEL SimpleName: child", "DEL SimpleType: Jobs", "DEL Block", "DEL SimpleType: Expression", "DEL MethodInvocation", "DEL TypeDeclaration: class", "DEL FieldAccess", "DEL SimpleName: getOperator", "DEL SimpleName: templateParts", "DEL MethodInvocation", "DEL Modifier: private", "DEL TypeDeclaration: class", "DEL SimpleName: v", "DEL Block", "DEL SimpleName: Operation", "DEL Modifier: final", "DEL TagElement: @author", "DEL StringLiteral: \"eval\"", "DEL SimpleName: StringLiteral", "DEL VariableDeclarationFragment", "DEL SimpleName: acceptPreOrder", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL Block", "DEL StringLiteral: \"Template\"", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: jobs", "DEL SimpleName: tmplCall", "DEL SimpleName: size", "DEL SimpleName: split", "DEL SimpleType: FunctionConstructor", "DEL SimpleName: Operation", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleType: FilePosition", "DEL SimpleName: e", "DEL SimpleName: out", "DEL Block", "DEL VariableDeclarationFragment", "DEL ParenthesizedExpression", "DEL SimpleName: children", "DEL BooleanLiteral: false", "DEL SimpleType: Optimizer", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL Modifier: static", "DEL VariableDeclarationStatement", "DEL SimpleName: getJobsByType", "DEL SimpleName: optimizeOpenTemplate", "DEL SimpleType: Declaration", "DEL PrefixExpression: !", "DEL QualifiedName: chain.node", "DEL SimpleName: e", "DEL SimpleName: jobs", "DEL SimpleName: children", "DEL IfStatement", "DEL InfixExpression: !=", "DEL Block", "DEL Modifier: final", "DEL SimpleName: variablesInScope", "DEL ParenthesizedExpression", "DEL ReturnStatement", "DEL SimpleType: Expression", "DEL ReturnStatement", "DEL SimpleType: Operation", "DEL SimpleName: getIdentifierName", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleName: FunctionConstructor", "DEL SimpleType: Operation", "DEL SimpleType: Operation", "DEL SimpleName: ScopeChecker", "DEL MethodInvocation", "DEL Modifier: static", "DEL Javadoc", "DEL Block", "DEL SimpleName: get", "DEL SimpleType: FunctionConstructor", "DEL QualifiedName: chain.node", "DEL ParenthesizedExpression", "DEL SimpleName: Jobs", "DEL SimpleName: AncestorChain", "DEL SimpleName: StringLiteral", "DEL NullLiteral", "DEL QualifiedName: chain.node", "DEL SimpleName: child", "DEL SimpleName: Expression", "DEL TextElement: containing the individual string literals.", "DEL SimpleName: templateParts", "DEL SimpleType: ArrayList", "DEL ReturnStatement", "DEL SimpleName: evalCall", "DEL SimpleType: String", "DEL SimpleName: startPos", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL SimpleName: Set", "DEL InfixExpression: ||", "DEL PrimitiveType: boolean", "DEL IfStatement", "DEL InfixExpression: ==", "DEL SimpleName: Expression", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: chain", "DEL TextElement: declared in that function.", "DEL SimpleType: AncestorChain", "DEL SimpleName: FunctionConstructor", "DEL SimpleName: children", "DEL SimpleName: env", "DEL SimpleName: children", "DEL Block", "DEL SimpleName: List", "DEL QualifiedName: ContentType.JS", "DEL SimpleName: jobs", "DEL CastExpression", "DEL EnhancedForStatement", "DEL SimpleType: Operation", "DEL ParameterizedType: ArrayList<StringLiteral>", "DEL SimpleType: List", "DEL Block", "DEL SimpleName: innerScope", "DEL QualifiedName: chain.node", "DEL QualifiedName: chain.node", "DEL SimpleName: List", "DEL SimpleName: pos", "DEL QualifiedName: splitter.parts", "DEL PrefixExpression: !", "DEL SimpleName: rhs", "DEL TagElement", "DEL SimpleName: add", "DEL SimpleName: Operation", "DEL FieldDeclaration", "DEL Modifier: private", "DEL SimpleType: Visitor", "DEL ExpressionStatement", "DEL Javadoc", "DEL ParameterizedType: List<StringLiteral>", "DEL SimpleName: ArrayConstructor", "DEL SingleVariableDeclaration", "DEL SimpleName: jobs", "DEL SimpleType: ArrayConstructor", "DEL PrefixExpression: !", "DEL SimpleName: tmplCall", "DEL TextElement: Optimizes calls to ", "DEL SimpleName: jobs", "DEL MethodInvocation", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: flattenStringConcatenation", "DEL ExpressionStatement", "DEL QualifiedName: sc.variablesInScope", "DEL InfixExpression: &&", "DEL TextElement: Given a constructs like ", "DEL ClassInstanceCreation", "DEL CastExpression", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: v", "DEL InfixExpression: ==", "DEL TextElement:  where ", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL NumberLiteral: 0", "DEL SimpleName: chain", "DEL ParenthesizedExpression", "DEL SimpleType: Pipeline.Stage", "DEL SimpleName: children", "DEL SimpleName: OpenTemplateStage", "DEL SimpleName: jobs", "DEL QualifiedName: Pipeline.Stage", "DEL InstanceofExpression", "DEL VariableDeclarationStatement", "DEL SimpleName: evalCall", "DEL Block", "DEL SimpleName: ParseTreeNode", "DEL Block", "DEL SimpleName: flattenStringsOnto", "DEL SimpleName: Optimizer", "DEL SimpleName: get", "DEL Block", "DEL SimpleName: op", "DEL MethodInvocation", "DEL SimpleName: Operation", "DEL SimpleName: Reference", "DEL SimpleName: stringLiterals", "DEL VariableDeclarationStatement", "DEL SimpleName: contains", "DEL SimpleName: StringLiteral", "DEL BooleanLiteral: false", "DEL SimpleName: out", "DEL SimpleType: StringLiteral", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL QualifiedName: Operator.CONSTRUCTOR", "DEL SimpleName: Reference", "DEL SimpleName: evalCall", "DEL InstanceofExpression"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL InfixExpression: >", "DEL SimpleName: state", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: j", "DEL MethodInvocation", "DEL SimpleName: ArrayList", "DEL SimpleName: joined", "DEL InfixExpression: +", "DEL SimpleType: CharProducer", "DEL SimpleName: parts", "DEL SimpleName: clippedPos", "DEL TagElement: @code", "DEL SimpleName: finishReference", "DEL Block", "DEL SimpleName: FilePosition", "DEL SimpleName: IN_BLOCK", "DEL NumberLiteral: 1", "DEL SimpleName: p", "DEL SimpleType: FilePosition", "DEL NullLiteral", "DEL SimpleType: Pair", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: state", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: JsLexer", "DEL SimpleName: startString", "DEL QualifiedName: CharProducer.Factory", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SimpleType: FilePosition", "DEL SimpleName: pair", "DEL SimpleName: Character", "DEL VariableDeclarationFragment", "DEL SimpleName: state", "DEL SimpleType: CharProducer", "DEL ReturnStatement", "DEL SimpleType: MessageQueue", "DEL SimpleName: start", "DEL SimpleName: getValue", "DEL Block", "DEL SimpleName: i", "DEL SimpleType: String", "DEL SimpleName: currentOffset", "DEL SimpleName: end", "DEL SimpleName: String", "DEL TagElement: @link", "DEL VariableDeclarationStatement", "DEL ForStatement", "DEL ParameterizedType: Pair<String,FilePosition>", "DEL QualifiedName: CharProducer.Factory", "DEL VariableDeclarationFragment", "DEL SimpleName: literals", "DEL TextElement: Cursor that is moved from left to right as we process the string literals.", "DEL FieldAccess", "DEL SimpleName: parts", "DEL ArrayCreation", "DEL SimpleName: add", "DEL TextElement: Walk the literal list and generate the output parts list. ", "DEL SimpleName: size", "DEL SimpleName: start", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL SimpleName: lexer", "DEL SimpleType: FilePosition", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL SimpleName: start", "DEL SimpleName: ch", "DEL TextElement: Splits a sequence of string literals containing <code>${...}</code> and", "DEL Assignment: =", "DEL TagElement", "DEL Assignment: =", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: start", "DEL TagElement", "DEL InfixExpression: &&", "DEL NumberLiteral: 0", "DEL SimpleName: start", "DEL MethodInvocation", "DEL SimpleName: FilePosition", "DEL SimpleName: CharProducer", "DEL SimpleName: end", "DEL VariableDeclarationFragment", "DEL SimpleName: j", "DEL SimpleName: end", "DEL SimpleName: m", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL SimpleName: endString", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL QualifiedName: p.b", "DEL NumberLiteral: 1", "DEL SimpleName: n", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: upTo", "DEL SwitchCase", "DEL SimpleName: p", "DEL SimpleName: substring", "DEL SimpleName: Reference", "DEL SimpleName: rawString", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleName: String", "DEL NullLiteral", "DEL SimpleName: tq", "DEL InfixExpression: <=", "DEL SimpleName: joined", "DEL SimpleType: CharProducer", "DEL SimpleName: delta", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: currentString", "DEL SimpleName: start", "DEL TextElement: <code>$name</code> into expressions, by looking for that pattern in the", "DEL MethodInvocation", "DEL SwitchCase", "DEL SimpleName: pair", "DEL SimpleName: getValue", "DEL InfixExpression: -", "DEL NumberLiteral: 1", "DEL SimpleType: Expression", "DEL SimpleName: List", "DEL SimpleName: add", "DEL SimpleName: charAt", "DEL NumberLiteral: 0", "DEL SimpleName: FilePosition", "DEL QualifiedName: State.LITERAL", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleType: Pair", "DEL QualifiedName: p.a", "DEL SimpleName: producers", "DEL SimpleType: StringReader", "DEL SimpleName: get", "DEL SimpleName: add", "DEL SimpleName: source", "DEL SimpleName: parts", "DEL BreakStatement", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL SimpleName: StringLiteral", "DEL TextElement: .", "DEL SimpleName: joined", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL MethodInvocation", "DEL InfixExpression: -", "DEL Assignment: =", "DEL SimpleName: state", "DEL SwitchCase", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL SimpleName: add", "DEL MethodInvocation", "DEL SimpleName: i", "DEL SimpleName: j", "DEL SimpleName: i", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: p", "DEL TextElement: .", "DEL SimpleName: length", "DEL SimpleName: startOf", "DEL BreakStatement", "DEL ExpressionStatement", "DEL SimpleType: Reference", "DEL SimpleType: FilePosition", "DEL SimpleType: String", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: endOffset", "DEL EnhancedForStatement", "DEL SwitchCase", "DEL TypeDeclaration: class", "DEL SimpleName: State", "DEL Assignment: =", "DEL SimpleName: sb", "DEL ExpressionStatement", "DEL Modifier: static", "DEL SimpleName: ref", "DEL MethodInvocation", "DEL Assignment: =", "DEL InfixExpression: ||", "DEL SimpleType: StringLiteral", "DEL SimpleName: ParseException", "DEL VariableDeclarationFragment", "DEL SimpleName: FilePosition", "DEL SwitchCase", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Pair<String,FilePosition>", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: Expression", "DEL MethodInvocation", "DEL SimpleName: IN_REFERENCE", "DEL SimpleName: expectEmpty", "DEL InfixExpression: +", "DEL SimpleName: start", "DEL SimpleName: tq", "DEL MethodInvocation", "DEL TextElement:  this is", "DEL EnumDeclaration", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: parts", "DEL BreakStatement", "DEL SwitchCase", "DEL BreakStatement", "DEL SimpleName: get", "DEL SimpleName: List", "DEL TagElement", "DEL PrimitiveType: int", "DEL SimpleName: mq", "DEL PrefixExpression: ++", "DEL SimpleType: FilePosition", "DEL SimpleName: isLetter", "DEL MethodInvocation", "DEL Block", "DEL WhileStatement", "DEL MethodInvocation", "DEL SimpleName: start", "DEL Assignment: =", "DEL SimpleName: joined", "DEL SimpleName: startOffset", "DEL SimpleName: lit", "DEL SimpleName: FilePosition", "DEL TextElement: StringLiteral.", "DEL SimpleName: Pair", "DEL SimpleName: SAW_DOLLAR", "DEL SimpleType: Parser", "DEL QualifiedName: State.LITERAL", "DEL MethodInvocation", "DEL SimpleName: length", "DEL TextElement: Compute the pieces of the string literals that span from", "DEL Assignment: =", "DEL Assignment: =", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL SimpleName: sb", "DEL SimpleName: sb", "DEL NullLiteral", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL ParameterizedType: Pair<String,FilePosition>", "DEL Javadoc", "DEL SimpleType: Expression", "DEL TextElement: <p>", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: j", "DEL InfixExpression: +", "DEL SimpleName: literals", "DEL SimpleName: SAW_DOLLAR", "DEL SimpleName: toMessageQueue", "DEL SimpleName: state", "DEL SimpleType: FilePosition", "DEL ThisExpression", "DEL SimpleType: String", "DEL SimpleName: ident", "DEL TextElement: to preserve file positions into the original source.", "DEL SimpleName: p", "DEL NumberLiteral: 0", "DEL SimpleType: Identifier", "DEL ExpressionStatement", "DEL ParameterizedType: ArrayList<StringLiteral>", "DEL SimpleName: CharProducer", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL TagElement: @param", "DEL SimpleName: FilePosition", "DEL SimpleName: delta", "DEL ThrowStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: JsTokenQueue", "DEL MethodInvocation", "DEL ParameterizedType: Pair<String,FilePosition>", "DEL Block", "DEL Modifier: static", "DEL SimpleName: FilePosition", "DEL SimpleName: finishLiteral", "DEL ParameterizedType: List<Expression>", "DEL Block", "DEL ExpressionStatement", "DEL StringLiteral: \"\"", "DEL SimpleName: delta", "DEL SimpleName: String", "DEL MethodInvocation", "DEL Assignment: =", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: ArrayList", "DEL NumberLiteral: 1", "DEL ExpressionStatement", "DEL SimpleName: CharProducer", "DEL SimpleName: upTo", "DEL SimpleName: FilePosition", "DEL QualifiedName: p.b", "DEL SimpleName: get", "DEL ParameterizedType: List<CharProducer>", "DEL SimpleName: lit", "DEL MethodDeclaration", "DEL PrefixExpression: -", "DEL SimpleName: StringBuilder", "DEL SimpleType: StringBuilder", "DEL NumberLiteral: 0", "DEL ParameterizedType: ArrayList<CharProducer>", "DEL MethodInvocation", "DEL CharacterLiteral: '{'", "DEL SimpleName: MessageQueue", "DEL NumberLiteral: 0", "DEL SwitchStatement", "DEL Block", "DEL QualifiedName: JsTokenQueue.NO_COMMENT", "DEL VariableDeclarationStatement", "DEL BooleanLiteral: true", "DEL ExpressionStatement", "DEL SimpleName: delta", "DEL Assignment: =", "DEL SimpleName: pos", "DEL TextElement: will be ", "DEL TextElement:  eval(Template(\"Foo $bar Baz\"))", "DEL Block", "DEL SimpleName: j", "DEL ClassInstanceCreation", "DEL SimpleName: start", "DEL VariableDeclarationStatement", "DEL SimpleName: StringBuilder", "DEL SimpleName: n", "DEL SingleVariableDeclaration", "DEL SimpleName: IN_REFERENCE", "DEL SwitchCase", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL InfixExpression: -", "DEL SimpleName: length", "DEL IfStatement", "DEL SimpleName: Pair", "DEL ExpressionStatement", "DEL SimpleName: start", "DEL SwitchCase", "DEL QualifiedName: State.SAW_DOLLAR", "DEL SimpleName: start", "DEL PrimitiveType: int", "DEL SimpleName: split", "DEL TextElement: the mark to the given delta.", "DEL QualifiedName: State.LITERAL", "DEL SimpleName: delta", "DEL Block", "DEL SimpleName: ex", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SimpleName: endOf", "DEL Block", "DEL QualifiedName: CharProducer.Factory", "DEL SimpleName: state", "DEL SimpleName: delta", "DEL SimpleName: isEmpty", "DEL NumberLiteral: 1", "DEL VariableDeclarationFragment", "DEL SimpleName: literals", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: currentString", "DEL SimpleName: SAW_DOLLAR", "DEL SimpleName: state", "DEL Assignment: =", "DEL SimpleName: add", "DEL SimpleName: startOffset", "DEL SimpleName: finishReference", "DEL SimpleName: Splitter", "DEL TextElement: Note that not all ", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0", "DEL InfixExpression: ==", "DEL SimpleName: end", "DEL SwitchCase", "DEL SwitchCase", "DEL SimpleName: get", "DEL SimpleName: start", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL SimpleName: exprText", "DEL NumberLiteral: 1", "DEL SimpleType: State", "DEL SimpleName: FilePosition", "DEL PrimitiveType: int", "DEL SimpleName: rawString", "DEL SimpleName: state", "DEL Javadoc", "DEL Assignment: =", "DEL IfStatement", "DEL SimpleName: end", "DEL SimpleName: SAW_DOLLAR", "DEL SimpleName: append", "DEL MethodDeclaration", "DEL SimpleName: literalText", "DEL ArrayType: CharProducer[]", "DEL QualifiedName: State.LITERAL", "DEL Javadoc", "DEL SimpleName: ident", "DEL QualifiedName: State.SAW_DOLLAR", "DEL Block", "DEL SimpleName: parts", "DEL SimpleName: Identifier", "DEL Dimension", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: Parser", "DEL MethodInvocation", "DEL SimpleName: producers", "DEL IfStatement", "DEL SimpleName: lit", "DEL SimpleName: startString", "DEL TextElement:  and ", "DEL SimpleName: SomethingWidgyHappenedError", "DEL SimpleName: IN_REFERENCE", "DEL ExpressionStatement", "DEL ParameterizedType: ArrayList<Pair<String,FilePosition>>", "DEL SimpleName: lit", "DEL SimpleName: instance", "DEL FieldDeclaration", "DEL InfixExpression: ==", "DEL PrimitiveType: int", "DEL SimpleName: delta", "DEL SimpleName: finishReference", "DEL Block", "DEL SimpleName: LITERAL", "DEL SimpleName: delta", "DEL SimpleName: String", "DEL SimpleName: JsLexer", "DEL SimpleName: literalText", "DEL NumberLiteral: 0", "DEL SwitchCase", "DEL SimpleName: mq", "DEL InfixExpression: <", "DEL SimpleType: ArrayList", "DEL TextElement:  \" baz\"", "DEL ExpressionStatement", "DEL TextElement:  of the end of the reference to the cursor.", "DEL SimpleName: finishBlock", "DEL QualifiedName: State.IN_BLOCK", "DEL NullLiteral", "DEL SimpleName: endString", "DEL SimpleName: currentOffset", "DEL MethodInvocation", "DEL BreakStatement", "DEL PrimitiveType: int", "DEL SimpleName: finishLiteral", "DEL SimpleName: p", "DEL SimpleName: JsTokenQueue", "DEL QualifiedName: State.LITERAL", "DEL SimpleName: Expression", "DEL SimpleName: rawString", "DEL MethodInvocation", "DEL PrefixExpression: ++", "DEL TextElement: (stringLiteralIndex, characterIndexInUndecodedLiteral) pairs.", "DEL SimpleName: toArray", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL QualifiedName: p.b", "DEL SimpleType: List", "DEL SimpleName: end", "DEL MethodInvocation", "DEL SimpleName: producers", "DEL PrefixExpression: ++", "DEL InfixExpression: +", "DEL TextElement: s are literals.", "DEL MethodInvocation", "DEL SimpleName: endString", "DEL SimpleName: Splitter", "DEL SimpleName: delta", "DEL SimpleName: IN_BLOCK", "DEL SimpleName: pair", "DEL PrimitiveType: void", "DEL SimpleName: String", "DEL QualifiedName: p.a", "DEL SimpleName: literals", "DEL MethodInvocation", "DEL TagElement: @param", "DEL BreakStatement", "DEL Block", "DEL SimpleName: upTo", "DEL Modifier: final", "DEL StringLiteral: \"End of template inside brackets\"", "DEL SimpleName: currentString", "DEL SimpleName: parts", "DEL NumberLiteral: 0", "DEL Javadoc", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL Block", "DEL ParameterizedType: List<StringLiteral>", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL BreakStatement", "DEL SimpleName: exprText", "DEL SimpleName: state", "DEL WhileStatement", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: state", "DEL SimpleName: start", "DEL SimpleName: end", "DEL InfixExpression: <=", "DEL SimpleName: create", "DEL NullLiteral", "DEL SimpleName: List", "DEL SimpleName: Parser", "DEL TextElement: The string literals being processed.  If we're dealing with", "DEL SimpleName: p", "DEL MethodInvocation", "DEL SimpleName: String", "DEL TagElement", "DEL TextElement:  eval(Template(\"Foo $bar\" + \" baz\"))", "DEL SimpleName: finishLiteral", "DEL TextElement: This code takes a list of string literals and keeps track of positions as", "DEL SimpleName: size", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleType: ArrayList", "DEL SimpleName: getValue", "DEL SimpleName: IN_REFERENCE", "DEL InfixExpression: ==", "DEL SimpleName: endOffset", "DEL InfixExpression: &&", "DEL SimpleName: parts", "DEL ExpressionStatement", "DEL SimpleName: Character", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: get", "DEL SimpleName: ArrayList", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleType: List", "DEL TextElement:  number of characters from the current position in the", "DEL InfixExpression: -", "DEL TextElement: Track the last position processed.", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL SimpleName: StringLiteral", "DEL SimpleName: start", "DEL SimpleName: length", "DEL MethodInvocation", "DEL TextElement: The output contains alternating literal and substitutions, and is careful", "DEL Assignment: =", "DEL InfixExpression: >", "DEL SimpleName: State", "DEL SimpleName: end", "DEL EnumConstantDeclaration", "DEL PrimitiveType: int", "DEL TagElement", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL ClassInstanceCreation", "DEL PrefixExpression: --", "DEL SimpleName: parts", "DEL SimpleName: startString", "DEL EnumConstantDeclaration", "DEL SimpleName: fromJsString", "DEL Javadoc", "DEL SimpleName: length", "DEL SimpleName: mark", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL TextElement:  then the two string literals", "DEL CharacterLiteral: '_'", "DEL SimpleName: currentString", "DEL VariableDeclarationFragment", "DEL SimpleName: literals", "DEL SimpleName: lastLit", "DEL SwitchCase", "DEL SimpleName: literals", "DEL SimpleName: state", "DEL InfixExpression: <", "DEL Modifier: private", "DEL SwitchCase", "DEL PrimitiveType: void", "DEL SimpleName: finishReference", "DEL VariableDeclarationFragment", "DEL SimpleName: finishLiteral", "DEL TextElement: Push a literal part onto the output list.", "DEL SimpleName: state", "DEL BreakStatement", "DEL SimpleType: Identifier", "DEL SimpleName: end", "DEL SimpleName: Pair", "DEL SimpleName: producers", "DEL NumberLiteral: 1", "DEL SimpleName: mq", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL Assignment: =", "DEL TagElement: @code", "DEL SimpleType: List", "DEL SimpleName: startOffset", "DEL SwitchCase", "DEL SimpleName: clippedPos", "DEL SimpleName: p", "DEL SimpleName: StringLiteral", "DEL MethodDeclaration", "DEL SimpleName: sb", "DEL SimpleName: str", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: startCharInLine", "DEL SimpleType: StringBuilder", "DEL VariableDeclarationFragment", "DEL SimpleType: StringLiteral", "DEL SimpleName: StringBuilder", "DEL SimpleName: endString", "DEL NumberLiteral: 1", "DEL SimpleName: SAW_DOLLAR", "DEL TextElement:  \"Foo $bar\"", "DEL ExpressionStatement", "DEL SimpleName: ch", "DEL SimpleName: upTo", "DEL VariableDeclarationFragment", "DEL SimpleName: FilePosition", "DEL SimpleName: size", "DEL MethodDeclaration", "DEL SimpleType: ArrayList", "DEL TagElement: @param", "DEL IfStatement", "DEL MethodInvocation", "DEL Assignment: =", "DEL InfixExpression: -", "DEL InfixExpression: -", "DEL SimpleName: delta", "DEL TagElement", "DEL SimpleName: Pair", "DEL MethodInvocation", "DEL SimpleName: ArrayList", "DEL MethodInvocation", "DEL SimpleName: startOffset", "DEL ExpressionStatement", "DEL SimpleName: ch", "DEL SimpleName: sb", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: ArrayList", "DEL MethodInvocation", "DEL SimpleName: add", "DEL SimpleName: end", "DEL NumberLiteral: 1", "DEL PrimitiveType: int", "DEL SimpleName: getValue", "DEL NullLiteral", "DEL SimpleName: Operation", "DEL VariableDeclarationFragment", "DEL SimpleName: ch", "DEL TagElement: @code", "DEL SimpleType: String", "DEL SimpleName: literals", "DEL SimpleName: lit", "DEL TagElement", "DEL Block", "DEL SimpleType: List", "DEL ExpressionStatement", "DEL SimpleName: delta", "DEL SimpleName: toString", "DEL ParameterizedType: List<Pair<String,FilePosition>>", "DEL Assignment: =", "DEL Block", "DEL SimpleName: currentOffset", "DEL SimpleName: state", "DEL SimpleName: pos", "DEL MethodDeclaration", "DEL NullLiteral", "DEL SimpleName: startOffset", "DEL SimpleName: start", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL TextElement: <p>", "DEL SimpleType: FilePosition", "DEL MethodInvocation", "DEL SimpleType: MessageQueue", "DEL MethodInvocation", "DEL SimpleName: substring", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: currentOffset", "DEL SimpleName: LITERAL", "DEL WhileStatement", "DEL SimpleName: List", "DEL ReturnStatement", "DEL SimpleName: literals", "DEL SingleVariableDeclaration", "DEL PrimitiveType: void", "DEL VariableDeclarationStatement", "DEL EnhancedForStatement", "DEL SimpleName: endOf", "DEL SimpleName: p", "DEL FieldAccess", "DEL SimpleName: StringLiteral", "DEL Assignment: +=", "DEL Block", "DEL InfixExpression: >=", "DEL ExpressionStatement", "DEL Assignment: =", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: get", "DEL SimpleName: FilePosition", "DEL Assignment: =", "DEL SimpleName: j", "DEL SimpleName: StringLiteral", "DEL ForStatement", "DEL SimpleName: endOffset", "DEL SimpleName: mark", "DEL EnhancedForStatement", "DEL InfixExpression: <", "DEL SingleVariableDeclaration", "DEL SimpleName: literals", "DEL SimpleName: IN_REFERENCE", "DEL Assignment: =", "DEL NumberLiteral: 0", "DEL SimpleName: end", "DEL VariableDeclarationFragment", "DEL TextElement: Output array.  Alternating literals (StringLiteral) and substitutions", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SwitchCase", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL SimpleName: isDigit", "DEL SimpleName: literalText", "DEL SimpleName: parts", "DEL CharacterLiteral: '$'", "DEL VariableDeclarationStatement", "DEL SimpleType: Reference", "DEL SimpleName: endCharInFile", "DEL VariableDeclarationStatement", "DEL QualifiedName: FilePosition.UNKNOWN", "DEL Javadoc", "DEL SwitchStatement", "DEL SimpleName: start", "DEL TagElement", "DEL Block", "DEL SimpleName: parts", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Pair<String,FilePosition>", "DEL ExpressionStatement", "DEL Javadoc", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: literals", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: IN_BLOCK", "DEL SimpleName: Pair", "DEL QualifiedName: p.b", "DEL SimpleName: tq", "DEL SimpleType: Parser", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: result", "DEL SimpleName: result", "DEL SingleVariableDeclaration", "DEL BreakStatement", "DEL SimpleName: getFilePosition", "DEL MethodInvocation", "DEL ParameterizedType: List<StringLiteral>", "DEL SimpleName: result", "DEL SimpleName: endOffset", "DEL InfixExpression: <", "DEL SimpleName: startString", "DEL PrimitiveType: int", "DEL SimpleName: mq", "DEL SimpleName: literals", "DEL Block", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: JsTokenQueue", "DEL NumberLiteral: 1", "DEL NullLiteral", "DEL NumberLiteral: 0", "DEL SimpleType: CharProducer", "DEL SimpleName: parseExpression", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: <", "DEL SimpleName: mark", "DEL SimpleName: sb", "DEL SimpleName: startOffset", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 1", "DEL SimpleName: end", "DEL SimpleName: Pair", "DEL SimpleName: size", "DEL SimpleName: mark", "DEL SimpleType: FilePosition", "DEL Modifier: private", "DEL BreakStatement", "DEL SimpleName: end", "DEL SingleVariableDeclaration", "DEL SimpleName: StringLiteral", "DEL SimpleName: delta", "DEL SimpleName: CharProducer", "DEL SimpleName: StringLiteral", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleName: delta", "DEL TextElement: string literals and parsing the content of substitutions as javascript.", "DEL SimpleName: mark", "DEL SimpleName: literals", "DEL InfixExpression: <", "DEL BreakStatement", "DEL SimpleName: end", "DEL SimpleName: FilePosition", "DEL PrimitiveType: char", "DEL EnumConstantDeclaration", "DEL QualifiedName: State.IN_REFERENCE", "DEL ParameterizedType: ArrayList<Expression>", "DEL CatchClause", "DEL SimpleName: state", "DEL BreakStatement", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL SimpleType: StringBuilder", "DEL SimpleName: currentString", "DEL SimpleType: Expression", "DEL SimpleName: literals", "DEL MethodInvocation", "DEL SimpleName: i", "DEL SimpleName: currentString", "DEL SwitchCase", "DEL SimpleName: currentOffset", "DEL TagElement", "DEL SimpleName: chain", "DEL QualifiedName: p.b", "DEL VariableDeclarationFragment", "DEL SimpleName: start", "DEL ExpressionStatement", "DEL SwitchStatement", "DEL ExpressionStatement", "DEL SimpleName: ch", "DEL FieldDeclaration", "DEL SimpleType: StringLiteral", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleName: literals", "DEL Block", "DEL ParameterizedType: Pair<String,FilePosition>", "DEL VariableDeclarationStatement", "DEL SimpleName: Pair", "DEL SimpleName: literalText", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: delta", "DEL SimpleName: List", "DEL SwitchCase", "DEL ExpressionStatement", "DEL SimpleName: lexer", "DEL SimpleType: StringLiteral", "DEL SimpleName: StringLiteral", "DEL MethodInvocation", "DEL SimpleName: endOffset", "DEL Modifier: private", "DEL PrefixExpression: ++", "DEL InfixExpression: ==", "DEL BreakStatement", "DEL SwitchCase", "DEL ExpressionStatement", "DEL SimpleName: str", "DEL SimpleName: get", "DEL FieldDeclaration", "DEL ParameterizedType: List<Pair<String,FilePosition>>", "DEL VariableDeclarationStatement", "DEL SimpleName: endString", "DEL SimpleName: startString", "DEL SimpleType: List", "DEL SimpleName: FilePosition", "DEL Javadoc", "DEL TextElement: Parse a substitution expression and push it onto the output list.", "DEL SimpleType: StringLiteral", "DEL SimpleType: String", "DEL SimpleType: StringLiteral", "DEL SimpleName: ref", "DEL TagElement", "DEL TextElement: Indices into the literal list, and the current literal.", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL SimpleName: producers", "DEL SimpleName: SAW_DOLLAR", "DEL SimpleName: start", "DEL IfStatement", "DEL SwitchCase", "DEL MethodDeclaration", "DEL ThisExpression", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: lit", "DEL SimpleType: JsTokenQueue", "DEL MethodInvocation", "DEL SimpleName: size", "DEL PrimitiveType: int", "DEL Block", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SwitchCase", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL QualifiedName: p.b", "DEL ExpressionStatement", "DEL QualifiedName: p.a", "DEL SwitchStatement", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: Reference", "DEL ExpressionStatement", "DEL SimpleType: FilePosition", "DEL SimpleType: String", "DEL Assignment: =", "DEL Javadoc", "DEL TextElement: Push a reference onto the output list.", "DEL VariableDeclarationStatement", "DEL SimpleName: start", "DEL SimpleName: state", "DEL NumberLiteral: 1", "DEL TextElement: string literals.", "DEL SimpleType: Pair", "DEL SimpleName: undefined", "DEL QualifiedName: State.LITERAL", "DEL PrimitiveType: int", "DEL SimpleName: endString", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL TagElement: @code", "DEL SimpleName: List", "DEL PrimitiveType: int", "DEL TextElement:  of the end of the block to the cursor.", "DEL SwitchStatement", "DEL SwitchCase", "DEL TextElement: Used to keep track of whether we're inside a substitution or not.", "DEL SimpleName: startString", "DEL SwitchStatement", "DEL SimpleName: FilePosition", "DEL SwitchCase", "DEL SimpleName: endOffset", "DEL Block", "DEL SimpleName: state", "DEL QualifiedName: State.LITERAL", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 1", "DEL IfStatement", "DEL SimpleName: result", "DEL SimpleName: startLineNo", "DEL SimpleName: end", "DEL SimpleName: IN_REFERENCE", "DEL SimpleName: startString", "DEL MethodDeclaration", "DEL SimpleType: List", "DEL SimpleName: p", "DEL Block", "DEL SimpleName: source", "DEL SimpleName: currentOffset", "DEL SimpleName: mark", "DEL BreakStatement", "DEL Assignment: =", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: p", "DEL SimpleName: add", "DEL TextElement: <p>", "DEL SimpleName: StringReader", "DEL SimpleName: mq", "DEL BreakStatement", "DEL SimpleType: ParseException", "DEL SimpleName: CharProducer", "DEL TextElement:  of the end of the literal relative to the cursor.", "DEL SimpleType: FilePosition", "DEL SimpleName: finishReference", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL IfStatement", "DEL SwitchCase", "DEL MethodInvocation", "DEL MethodInvocation", "DEL PrefixExpression: -", "DEL TagElement", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: lastLit", "DEL Assignment: =", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TextElement: A queue to which parse errors are written.", "DEL VariableDeclarationFragment", "DEL SimpleName: p", "DEL TextElement: (arbitrary Expression).  For ", "DEL MethodInvocation", "DEL SimpleName: LITERAL", "DEL SwitchStatement", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL BreakStatement", "DEL SimpleType: Pair", "DEL SimpleName: startCharInFile", "DEL SimpleName: StringBuilder", "DEL FieldDeclaration", "DEL NumberLiteral: 1", "DEL ClassInstanceCreation", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL SimpleType: StringLiteral", "DEL SimpleName: String", "DEL BreakStatement", "DEL NumberLiteral: 1", "DEL InfixExpression: &&", "DEL TextElement:  [StringLiteral('Foo '), Reference(\"bar\"), StringLiteral(' Baz')]", "DEL MethodInvocation", "DEL SimpleName: MessageQueue", "DEL MethodInvocation", "DEL TryStatement", "DEL SimpleType: Pair", "DEL ExpressionStatement", "DEL SimpleName: FilePosition", "DEL InfixExpression: +", "DEL VariableDeclarationStatement", "DEL SimpleName: getFilePosition", "DEL MethodInvocation", "DEL SimpleName: end", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL SimpleName: FilePosition", "DEL SimpleName: end", "DEL SimpleName: StringLiteral", "DEL InfixExpression: <=", "DEL SimpleName: mark", "DEL MethodInvocation", "DEL BreakStatement", "DEL SimpleName: i", "DEL SimpleName: SAW_DOLLAR", "DEL ReturnStatement", "DEL Block", "DEL PrimitiveType: int", "DEL SimpleName: Identifier", "DEL ClassInstanceCreation", "DEL SimpleName: get", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleType: FilePosition", "DEL SimpleName: FilePosition", "DEL IfStatement", "DEL SimpleType: String", "DEL TextElement: In <tt>eval(Template(\"Foo ${'bar'} Baz\"))</tt>, the sole substitution is a", "DEL SimpleName: Pair", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL SimpleName: state", "DEL SimpleName: FilePosition", "DEL CharacterLiteral: '}'", "DEL SimpleName: span", "DEL InfixExpression: -", "DEL Javadoc", "DEL MethodDeclaration", "DEL SwitchCase", "DEL SimpleType: JsLexer", "DEL PrimitiveType: void", "DEL SimpleName: p", "DEL SimpleName: literals", "DEL MethodInvocation", "DEL SimpleName: FilePosition", "DEL InfixExpression: &&", "DEL BreakStatement", "DEL SimpleType: StringBuilder", "DEL MethodInvocation", "DEL SimpleName: currentString", "DEL SimpleName: mark", "DEL ClassInstanceCreation", "DEL NullLiteral", "DEL SimpleName: finishBlock", "DEL SimpleName: startCharInFile", "DEL SimpleName: currentOffset", "DEL SimpleName: ex", "DEL MethodInvocation", "DEL SimpleName: start", "DEL SimpleType: CharProducer", "DEL InfixExpression: -", "DEL SimpleName: j", "DEL ExpressionStatement", "DEL SimpleName: start", "DEL Assignment: =", "DEL SimpleName: getFilePosition", "DEL QualifiedName: p.b", "DEL Javadoc", "DEL SimpleName: start", "DEL NumberLiteral: 0", "DEL SimpleType: String", "DEL BreakStatement", "DEL NullLiteral", "DEL MethodInvocation", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL Block", "DEL SimpleName: Expression", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: clippedPos", "DEL EnumConstantDeclaration", "DEL ExpressionStatement", "DEL SimpleName: getValue", "DEL SimpleName: span", "DEL Block", "DEL NumberLiteral: 0", "DEL TagElement: @code", "DEL BreakStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: span", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: JsLexer", "DEL MethodInvocation", "DEL SimpleName: mq", "DEL SimpleName: m", "DEL MethodInvocation", "DEL SimpleName: p", "DEL ExpressionStatement", "DEL SimpleType: FilePosition", "DEL SimpleType: Pair", "DEL SimpleName: p", "DEL VariableDeclarationFragment", "DEL TextElement: Interpolate the position of a substring of a StringLiteral.", "DEL ParenthesizedExpression", "DEL SimpleName: finishReference", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: valueOf", "DEL ExpressionStatement", "DEL SimpleType: SomethingWidgyHappenedError", "DEL SimpleName: literalText", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: getValue", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: Pair", "DEL MethodInvocation"]}]}}, {"OpenTemplateStage_diff": {"operations": ["Delete QualifiedName: com.google.caja.plugin.stages(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.caja.SomethingWidgyHappenedError(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.caja.lexer.CharProducer(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.google.caja.lexer.FilePosition(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.google.caja.lexer.JsLexer(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.google.caja.lexer.JsTokenQueue(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: com.google.caja.lexer.ParseException(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: com.google.caja.parser.AncestorChain(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: com.google.caja.parser.MutableParseTreeNode(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: com.google.caja.parser.ParseTreeNode(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: com.google.caja.parser.Visitor(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: com.google.caja.parser.js.ArrayConstructor(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: com.google.caja.parser.js.Declaration(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: com.google.caja.parser.js.Expression(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: com.google.caja.parser.js.FunctionConstructor(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: com.google.caja.parser.js.Identifier(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: com.google.caja.parser.js.Operation(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: com.google.caja.parser.js.Operator(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: com.google.caja.parser.js.Parser(36)", "Delete ImportDeclaration(37)", "Delete QualifiedName: com.google.caja.parser.js.Reference(38)", "Delete ImportDeclaration(39)", "Delete QualifiedName: com.google.caja.parser.js.StringLiteral(40)", "Delete ImportDeclaration(41)", "Delete QualifiedName: com.google.caja.plugin.JobEnvelope(42)", "Delete ImportDeclaration(43)", "Delete QualifiedName: com.google.caja.plugin.Jobs(44)", "Delete ImportDeclaration(45)", "Delete QualifiedName: com.google.caja.reporting.MessageQueue(46)", "Delete ImportDeclaration(47)", "Delete QualifiedName: com.google.caja.util.ContentType(48)", "Delete ImportDeclaration(49)", "Delete QualifiedName: com.google.caja.util.Pair(50)", "Delete ImportDeclaration(51)", "Delete QualifiedName: com.google.caja.util.Pipeline(52)", "Delete ImportDeclaration(53)", "Delete QualifiedName: java.io.StringReader(54)", "Delete ImportDeclaration(55)", "Delete QualifiedName: java.util.ArrayList(56)", "Delete ImportDeclaration(57)", "Delete QualifiedName: java.util.HashSet(58)", "Delete ImportDeclaration(59)", "Delete QualifiedName: java.util.List(60)", "Delete ImportDeclaration(61)", "Delete QualifiedName: java.util.Set(62)", "Delete ImportDeclaration(63)", "Delete TextElement: Optimizes calls to (64)", "Delete TextElement:  eval(Template(\"html&hellip;\"))(65)", "Delete TagElement: @code(66)", "Delete TextElement: .(67)", "Delete TextElement: TODO(mikesamuel): this could probably be more simply done as a(68)", "Delete TextElement: rewrite rule.(69)", "Delete TagElement(70)", "Delete TextElement:  mikesamuel@gmail.com(71)", "Delete TagElement: @author(72)", "Delete Javadoc(73)", "Delete Modifier: public(74)", "Delete Modifier: final(75)", "Delete SimpleName: OpenTemplateStage(76)", "Delete QualifiedName: Pipeline.Stage(77)", "Delete SimpleType: Pipeline.Stage(78)", "Delete SimpleName: Jobs(79)", "Delete SimpleType: Jobs(80)", "Delete ParameterizedType: Pipeline.Stage<Jobs>(81)", "Delete Modifier: public(82)", "Delete PrimitiveType: boolean(83)", "Delete SimpleName: apply(84)", "Delete SimpleName: Jobs(85)", "Delete SimpleType: Jobs(86)", "Delete SimpleName: jobs(87)", "Delete SingleVariableDeclaration(88)", "Delete SimpleName: JobEnvelope(89)", "Delete SimpleType: JobEnvelope(90)", "Delete SimpleName: env(91)", "Delete SingleVariableDeclaration(92)", "Delete SimpleName: jobs(93)", "Delete SimpleName: getJobsByType(94)", "Delete QualifiedName: ContentType.JS(95)", "Delete MethodInvocation(96)", "Delete QualifiedName: env.fromCache(97)", "Delete ContinueStatement(98)", "Delete Block(99)", "Delete IfStatement(100)", "Delete SimpleName: optimizeOpenTemplate(101)", "Delete SimpleName: AncestorChain(102)", "Delete SimpleName: instance(103)", "Delete QualifiedName: env.job(104)", "Delete SimpleName: getRoot(105)", "Delete MethodInvocation(106)", "Delete MethodInvocation(107)", "Delete SimpleName: jobs(108)", "Delete MethodInvocation(109)", "Delete ExpressionStatement(110)", "Delete Block(111)", "Delete EnhancedForStatement(112)", "Delete SimpleName: jobs(113)", "Delete SimpleName: hasNoFatalErrors(114)", "Delete MethodInvocation(115)", "Delete ReturnStatement(116)", "Delete Block(117)", "Delete MethodDeclaration(118)", "Delete TextElement: Inlines calls to (119)", "Delete TextElement:  eval(Template(...))(120)", "Delete TagElement: @code(121)", "Delete TextElement:  where (122)", "Delete TextElement:  eval(123)", "Delete TagElement: @code(124)", "Delete TextElement:  and(125)", "Delete TextElement:  Template(126)", "Delete TagElement: @code(127)", "Delete TextElement:  are bound to the global scope.(128)", "Delete TagElement(129)", "Delete Javadoc(130)", "Delete Modifier: private(131)", "Delete Modifier: static(132)", "Delete PrimitiveType: void(133)", "Delete SimpleName: optimizeOpenTemplate(134)", "Delete SimpleName: AncestorChain(135)", "Delete SimpleType: AncestorChain(136)", "Delete WildcardType: ?(137)", "Delete ParameterizedType: AncestorChain<?>(138)", "Delete SimpleName: chain(139)", "Delete SingleVariableDeclaration(140)", "Delete SimpleName: Jobs(141)", "Delete SimpleType: Jobs(142)", "Delete SimpleName: jobs(143)", "Delete SingleVariableDeclaration(144)", "Delete SimpleName: ScopeChecker(145)", "Delete SimpleType: ScopeChecker(146)", "Delete SimpleName: sc(147)", "Delete SimpleName: ScopeChecker(148)", "Delete SimpleType: ScopeChecker(149)", "Delete ClassInstanceCreation(150)", "Delete VariableDeclarationFragment(151)", "Delete VariableDeclarationStatement(152)", "Delete SimpleName: applyToScope(153)", "Delete SimpleName: chain(154)", "Delete SimpleName: sc(155)", "Delete MethodInvocation(156)", "Delete ExpressionStatement(157)", "Delete QualifiedName: sc.variablesInScope(158)", "Delete SimpleName: contains(159)", "Delete StringLiteral: \"eval\"(160)", "Delete MethodInvocation(161)", "Delete QualifiedName: sc.variablesInScope(162)", "Delete SimpleName: contains(163)", "Delete StringLiteral: \"Template\"(164)", "Delete MethodInvocation(165)", "Delete InfixExpression: ||(166)", "Delete ReturnStatement(167)", "Delete Block(168)", "Delete IfStatement(169)", "Delete SimpleName: applyToScope(170)", "Delete SimpleName: chain(171)", "Delete SimpleName: Optimizer(172)", "Delete SimpleType: Optimizer(173)", "Delete SimpleName: jobs(174)", "Delete ClassInstanceCreation(175)", "Delete MethodInvocation(176)", "Delete ExpressionStatement(177)", "Delete SimpleName: AncestorChain(178)", "Delete SimpleType: AncestorChain(179)", "Delete SimpleName: FunctionConstructor(180)", "Delete SimpleType: FunctionConstructor(181)", "Delete ParameterizedType: AncestorChain<FunctionConstructor>(182)", "Delete SimpleName: innerScope(183)", "Delete SingleVariableDeclaration(184)", "Delete QualifiedName: sc.innerScopes(185)", "Delete SimpleName: optimizeOpenTemplate(186)", "Delete SimpleName: innerScope(187)", "Delete SimpleName: jobs(188)", "Delete MethodInvocation(189)", "Delete ExpressionStatement(190)", "Delete Block(191)", "Delete EnhancedForStatement(192)", "Delete Block(193)", "Delete MethodDeclaration(194)", "Delete TextElement: Applies a visitor to the nodes in the current scope, not recursing into(195)", "Delete TextElement: nested functions.(196)", "Delete TagElement(197)", "Delete Javadoc(198)", "Delete Modifier: private(199)", "Delete Modifier: static(200)", "Delete PrimitiveType: void(201)", "Delete SimpleName: applyToScope(202)", "Delete SimpleName: AncestorChain(203)", "Delete SimpleType: AncestorChain(204)", "Delete WildcardType: ?(205)", "Delete ParameterizedType: AncestorChain<?>(206)", "Delete SimpleName: chain(207)", "Delete SingleVariableDeclaration(208)", "Delete SimpleName: Visitor(209)", "Delete SimpleType: Visitor(210)", "Delete SimpleName: v(211)", "Delete SingleVariableDeclaration(212)", "Delete QualifiedName: chain.node(213)", "Delete SimpleName: FunctionConstructor(214)", "Delete SimpleType: FunctionConstructor(215)", "Delete InstanceofExpression(216)", "Delete SimpleName: ParseTreeNode(217)", "Delete SimpleType: ParseTreeNode(218)", "Delete SimpleName: child(219)", "Delete SingleVariableDeclaration(220)", "Delete QualifiedName: chain.node(221)", "Delete SimpleName: children(222)", "Delete MethodInvocation(223)", "Delete SimpleName: child(224)", "Delete SimpleName: acceptPreOrder(225)", "Delete SimpleName: v(226)", "Delete SimpleName: chain(227)", "Delete MethodInvocation(228)", "Delete ExpressionStatement(229)", "Delete Block(230)", "Delete EnhancedForStatement(231)", "Delete Block(232)", "Delete QualifiedName: chain.node(233)", "Delete SimpleName: acceptPreOrder(234)", "Delete SimpleName: v(235)", "Delete QualifiedName: chain.parent(236)", "Delete MethodInvocation(237)", "Delete ExpressionStatement(238)", "Delete Block(239)", "Delete IfStatement(240)", "Delete Block(241)", "Delete MethodDeclaration(242)", "Delete TextElement: Walks a function and compiles a set of all local variables(243)", "Delete TextElement: declared in that function.(244)", "Delete TagElement(245)", "Delete Javadoc(246)", "Delete Modifier: private(247)", "Delete Modifier: static(248)", "Delete SimpleName: ScopeChecker(249)", "Delete SimpleName: Visitor(250)", "Delete SimpleType: Visitor(251)", "Delete Modifier: final(252)", "Delete SimpleName: Set(253)", "Delete SimpleType: Set(254)", "Delete SimpleName: String(255)", "Delete SimpleType: String(256)", "Delete ParameterizedType: Set<String>(257)", "Delete SimpleName: variablesInScope(258)", "Delete SimpleName: HashSet(259)", "Delete SimpleType: HashSet(260)", "Delete SimpleName: String(261)", "Delete SimpleType: String(262)", "Delete ParameterizedType: HashSet<String>(263)", "Delete ClassInstanceCreation(264)", "Delete VariableDeclarationFragment(265)", "Delete FieldDeclaration(266)", "Delete Modifier: final(267)", "Delete SimpleName: List(268)", "Delete SimpleType: List(269)", "Delete SimpleName: AncestorChain(270)", "Delete SimpleType: AncestorChain(271)", "Delete SimpleName: FunctionConstructor(272)", "Delete SimpleType: FunctionConstructor(273)", "Delete ParameterizedType: AncestorChain<FunctionConstructor>(274)", "Delete ParameterizedType: List<AncestorChain<FunctionConstructor>>(275)", "Delete SimpleName: innerScopes(276)", "Delete SimpleName: ArrayList(277)", "Delete SimpleType: ArrayList(278)", "Delete SimpleName: AncestorChain(279)", "Delete SimpleType: AncestorChain(280)", "Delete SimpleName: FunctionConstructor(281)", "Delete SimpleType: FunctionConstructor(282)", "Delete ParameterizedType: AncestorChain<FunctionConstructor>(283)", "Delete ParameterizedType: ArrayList<AncestorChain<FunctionConstructor>>(284)", "Delete ClassInstanceCreation(285)", "Delete VariableDeclarationFragment(286)", "Delete FieldDeclaration(287)", "Delete Modifier: public(288)", "Delete PrimitiveType: boolean(289)", "Delete SimpleName: visit(290)", "Delete SimpleName: AncestorChain(291)", "Delete SimpleType: AncestorChain(292)", "Delete WildcardType: ?(293)", "Delete ParameterizedType: AncestorChain<?>(294)", "Delete SimpleName: chain(295)", "Delete SingleVariableDeclaration(296)", "Delete QualifiedName: chain.node(297)", "Delete SimpleName: FunctionConstructor(298)", "Delete SimpleType: FunctionConstructor(299)", "Delete InstanceofExpression(300)", "Delete SimpleName: innerScopes(301)", "Delete SimpleName: add(302)", "Delete SimpleName: chain(303)", "Delete SimpleName: cast(304)", "Delete SimpleName: FunctionConstructor(305)", "Delete SimpleType: FunctionConstructor(306)", "Delete TypeLiteral(307)", "Delete MethodInvocation(308)", "Delete MethodInvocation(309)", "Delete ExpressionStatement(310)", "Delete BooleanLiteral: false(311)", "Delete ReturnStatement(312)", "Delete Block(313)", "Delete IfStatement(314)", "Delete QualifiedName: chain.node(315)", "Delete SimpleName: Declaration(316)", "Delete SimpleType: Declaration(317)", "Delete InstanceofExpression(318)", "Delete SimpleName: String(319)", "Delete SimpleType: String(320)", "Delete SimpleName: name(321)", "Delete SimpleName: Declaration(322)", "Delete SimpleType: Declaration(323)", "Delete QualifiedName: chain.node(324)", "Delete CastExpression(325)", "Delete ParenthesizedExpression(326)", "Delete SimpleName: getIdentifierName(327)", "Delete MethodInvocation(328)", "Delete VariableDeclarationFragment(329)", "Delete VariableDeclarationStatement(330)", "Delete SimpleName: variablesInScope(331)", "Delete SimpleName: add(332)", "Delete SimpleName: name(333)", "Delete MethodInvocation(334)", "Delete ExpressionStatement(335)", "Delete Block(336)", "Delete IfStatement(337)", "Delete BooleanLiteral: true(338)", "Delete ReturnStatement(339)", "Delete Block(340)", "Delete MethodDeclaration(341)", "Delete TypeDeclaration: class(342)", "Delete TextElement: Walks a function and inlines calls to (343)", "Delete TextElement:  eval(Template(...))(344)", "Delete TagElement: @code(345)", "Delete TextElement: .(346)", "Delete TagElement(347)", "Delete Javadoc(348)", "Delete Modifier: private(349)", "Delete Modifier: static(350)", "Delete SimpleName: Optimizer(351)", "Delete SimpleName: Visitor(352)", "Delete SimpleType: Visitor(353)", "Delete SimpleName: Jobs(354)", "Delete SimpleType: Jobs(355)", "Delete SimpleName: jobs(356)", "Delete VariableDeclarationFragment(357)", "Delete FieldDeclaration(358)", "Delete SimpleName: Optimizer(359)", "Delete SimpleName: Jobs(360)", "Delete SimpleType: Jobs(361)", "Delete SimpleName: jobs(362)", "Delete SingleVariableDeclaration(363)", "Delete ThisExpression(364)", "Delete SimpleName: jobs(365)", "Delete FieldAccess(366)", "Delete SimpleName: jobs(367)", "Delete Assignment: =(368)", "Delete ExpressionStatement(369)", "Delete Block(370)", "Delete MethodDeclaration(371)", "Delete Modifier: public(372)", "Delete PrimitiveType: boolean(373)", "Delete SimpleName: visit(374)", "Delete SimpleName: AncestorChain(375)", "Delete SimpleType: AncestorChain(376)", "Delete WildcardType: ?(377)", "Delete ParameterizedType: AncestorChain<?>(378)", "Delete SimpleName: chain(379)", "Delete SingleVariableDeclaration(380)", "Delete QualifiedName: chain.node(381)", "Delete SimpleName: FunctionConstructor(382)", "Delete SimpleType: FunctionConstructor(383)", "Delete InstanceofExpression(384)", "Delete BooleanLiteral: false(385)", "Delete ReturnStatement(386)", "Delete Block(387)", "Delete IfStatement(388)", "Delete QualifiedName: chain.node(389)", "Delete SimpleName: Operation(390)", "Delete SimpleType: Operation(391)", "Delete InstanceofExpression(392)", "Delete ParenthesizedExpression(393)", "Delete PrefixExpression: !(394)", "Delete BooleanLiteral: true(395)", "Delete ReturnStatement(396)", "Delete Block(397)", "Delete IfStatement(398)", "Delete SimpleName: Operation(399)", "Delete SimpleType: Operation(400)", "Delete SimpleName: evalCall(401)", "Delete SimpleName: Operation(402)", "Delete SimpleType: Operation(403)", "Delete QualifiedName: chain.node(404)", "Delete CastExpression(405)", "Delete VariableDeclarationFragment(406)", "Delete VariableDeclarationStatement(407)", "Delete SimpleName: evalCall(408)", "Delete SimpleName: getOperator(409)", "Delete MethodInvocation(410)", "Delete QualifiedName: Operator.FUNCTION_CALL(411)", "Delete InfixExpression: !=(412)", "Delete SimpleName: evalCall(413)", "Delete SimpleName: children(414)", "Delete MethodInvocation(415)", "Delete SimpleName: size(416)", "Delete MethodInvocation(417)", "Delete NumberLiteral: 2(418)", "Delete InfixExpression: !=(419)", "Delete InfixExpression: ||(420)", "Delete BooleanLiteral: true(421)", "Delete ReturnStatement(422)", "Delete Block(423)", "Delete IfStatement(424)", "Delete SimpleName: Expression(425)", "Delete SimpleType: Expression(426)", "Delete SimpleName: evalRef(427)", "Delete SimpleName: evalCall(428)", "Delete SimpleName: children(429)", "Delete MethodInvocation(430)", "Delete SimpleName: get(431)", "Delete NumberLiteral: 0(432)", "Delete MethodInvocation(433)", "Delete VariableDeclarationFragment(434)", "Delete VariableDeclarationStatement(435)", "Delete SimpleName: evalRef(436)", "Delete SimpleName: Reference(437)", "Delete SimpleType: Reference(438)", "Delete InstanceofExpression(439)", "Delete StringLiteral: \"eval\"(440)", "Delete SimpleName: equals(441)", "Delete SimpleName: Reference(442)", "Delete SimpleType: Reference(443)", "Delete SimpleName: evalRef(444)", "Delete CastExpression(445)", "Delete ParenthesizedExpression(446)", "Delete SimpleName: getIdentifierName(447)", "Delete MethodInvocation(448)", "Delete MethodInvocation(449)", "Delete InfixExpression: &&(450)", "Delete ParenthesizedExpression(451)", "Delete PrefixExpression: !(452)", "Delete BooleanLiteral: true(453)", "Delete ReturnStatement(454)", "Delete Block(455)", "Delete IfStatement(456)", "Delete SimpleName: Expression(457)", "Delete SimpleType: Expression(458)", "Delete SimpleName: rhs(459)", "Delete SimpleName: evalCall(460)", "Delete SimpleName: children(461)", "Delete MethodInvocation(462)", "Delete SimpleName: get(463)", "Delete NumberLiteral: 1(464)", "Delete MethodInvocation(465)", "Delete VariableDeclarationFragment(466)", "Delete VariableDeclarationStatement(467)", "Delete SimpleName: rhs(468)", "Delete SimpleName: Operation(469)", "Delete SimpleType: Operation(470)", "Delete InstanceofExpression(471)", "Delete SimpleName: rhs(472)", "Delete SimpleName: children(473)", "Delete MethodInvocation(474)", "Delete SimpleName: size(475)", "Delete MethodInvocation(476)", "Delete NumberLiteral: 2(477)", "Delete InfixExpression: ==(478)", "Delete SimpleName: rhs(479)", "Delete SimpleName: children(480)", "Delete MethodInvocation(481)", "Delete SimpleName: size(482)", "Delete MethodInvocation(483)", "Delete NumberLiteral: 3(484)", "Delete InfixExpression: ==(485)", "Delete InfixExpression: ||(486)", "Delete ParenthesizedExpression(487)", "Delete InfixExpression: &&(488)", "Delete ParenthesizedExpression(489)", "Delete PrefixExpression: !(490)", "Delete BooleanLiteral: false(491)", "Delete ReturnStatement(492)", "Delete Block(493)", "Delete IfStatement(494)", "Delete SimpleName: Operation(495)", "Delete SimpleType: Operation(496)", "Delete SimpleName: tmplCall(497)", "Delete SimpleName: Operation(498)", "Delete SimpleType: Operation(499)", "Delete SimpleName: rhs(500)", "Delete CastExpression(501)", "Delete VariableDeclarationFragment(502)", "Delete VariableDeclarationStatement(503)", "Delete SimpleName: tmplCall(504)", "Delete SimpleName: getOperator(505)", "Delete MethodInvocation(506)", "Delete QualifiedName: Operator.FUNCTION_CALL(507)", "Delete InfixExpression: !=(508)", "Delete BooleanLiteral: false(509)", "Delete ReturnStatement(510)", "Delete Block(511)", "Delete IfStatement(512)", "Delete SimpleName: Expression(513)", "Delete SimpleType: Expression(514)", "Delete SimpleName: tmplRef(515)", "Delete SimpleName: tmplCall(516)", "Delete SimpleName: children(517)", "Delete MethodInvocation(518)", "Delete SimpleName: get(519)", "Delete NumberLiteral: 0(520)", "Delete MethodInvocation(521)", "Delete VariableDeclarationFragment(522)", "Delete VariableDeclarationStatement(523)", "Delete SimpleName: tmplRef(524)", "Delete SimpleName: Reference(525)", "Delete SimpleType: Reference(526)", "Delete InstanceofExpression(527)", "Delete StringLiteral: \"Template\"(528)", "Delete SimpleName: equals(529)", "Delete SimpleName: Reference(530)", "Delete SimpleType: Reference(531)", "Delete SimpleName: tmplRef(532)", "Delete CastExpression(533)", "Delete ParenthesizedExpression(534)", "Delete SimpleName: getIdentifierName(535)", "Delete MethodInvocation(536)", "Delete MethodInvocation(537)", "Delete InfixExpression: &&(538)", "Delete ParenthesizedExpression(539)", "Delete PrefixExpression: !(540)", "Delete BooleanLiteral: false(541)", "Delete ReturnStatement(542)", "Delete Block(543)", "Delete IfStatement(544)", "Delete SimpleName: List(545)", "Delete SimpleType: List(546)", "Delete SimpleName: StringLiteral(547)", "Delete SimpleType: StringLiteral(548)", "Delete ParameterizedType: List<StringLiteral>(549)", "Delete SimpleName: stringLiterals(550)", "Delete SimpleName: flattenStringConcatenation(551)", "Delete SimpleName: tmplCall(552)", "Delete SimpleName: children(553)", "Delete MethodInvocation(554)", "Delete SimpleName: get(555)", "Delete NumberLiteral: 1(556)", "Delete MethodInvocation(557)", "Delete MethodInvocation(558)", "Delete VariableDeclarationFragment(559)", "Delete VariableDeclarationStatement(560)", "Delete SimpleName: stringLiterals(561)", "Delete NullLiteral(562)", "Delete InfixExpression: ==(563)", "Delete BooleanLiteral: false(564)", "Delete ReturnStatement(565)", "Delete Block(566)", "Delete IfStatement(567)", "Delete SimpleName: Splitter(568)", "Delete SimpleType: Splitter(569)", "Delete SimpleName: splitter(570)", "Delete SimpleName: Splitter(571)", "Delete SimpleType: Splitter(572)", "Delete SimpleName: stringLiterals(573)", "Delete SimpleName: jobs(574)", "Delete SimpleName: getMessageQueue(575)", "Delete MethodInvocation(576)", "Delete ClassInstanceCreation(577)", "Delete VariableDeclarationFragment(578)", "Delete VariableDeclarationStatement(579)", "Delete SimpleName: splitter(580)", "Delete SimpleName: split(581)", "Delete MethodInvocation(582)", "Delete ExpressionStatement(583)", "Delete SimpleName: List(584)", "Delete SimpleType: List(585)", "Delete SimpleName: Expression(586)", "Delete SimpleType: Expression(587)", "Delete ParameterizedType: List<Expression>(588)", "Delete SimpleName: templateParts(589)", "Delete QualifiedName: splitter.parts(590)", "Delete VariableDeclarationFragment(591)", "Delete VariableDeclarationStatement(592)", "Delete SimpleName: templateParts(593)", "Delete NullLiteral(594)", "Delete InfixExpression: ==(595)", "Delete BooleanLiteral: false(596)", "Delete ReturnStatement(597)", "Delete Block(598)", "Delete IfStatement(599)", "Delete SimpleName: FilePosition(600)", "Delete SimpleType: FilePosition(601)", "Delete SimpleName: pos(602)", "Delete QualifiedName: chain.node(603)", "Delete SimpleName: getFilePosition(604)", "Delete MethodInvocation(605)", "Delete VariableDeclarationFragment(606)", "Delete VariableDeclarationStatement(607)", "Delete SimpleName: FilePosition(608)", "Delete SimpleType: FilePosition(609)", "Delete SimpleName: startPos(610)", "Delete SimpleName: FilePosition(611)", "Delete SimpleName: startOf(612)", "Delete SimpleName: pos(613)", "Delete MethodInvocation(614)", "Delete VariableDeclarationFragment(615)", "Delete VariableDeclarationStatement(616)", "Delete SimpleName: MutableParseTreeNode(617)", "Delete SimpleType: MutableParseTreeNode(618)", "Delete QualifiedName: chain.parent.node(619)", "Delete CastExpression(620)", "Delete ParenthesizedExpression(621)", "Delete SimpleName: replaceChild(622)", "Delete SimpleName: Operation(623)", "Delete SimpleName: create(624)", "Delete SimpleName: startPos(625)", "Delete QualifiedName: Operator.CONSTRUCTOR(626)", "Delete SimpleName: Reference(627)", "Delete SimpleType: Reference(628)", "Delete SimpleName: Identifier(629)", "Delete SimpleType: Identifier(630)", "Delete SimpleName: startPos(631)", "Delete StringLiteral: \"StringInterpolation\"(632)", "Delete ClassInstanceCreation(633)", "Delete ClassInstanceCreation(634)", "Delete SimpleName: ArrayConstructor(635)", "Delete SimpleType: ArrayConstructor(636)", "Delete SimpleName: pos(637)", "Delete SimpleName: templateParts(638)", "Delete ClassInstanceCreation(639)", "Delete MethodInvocation(640)", "Delete QualifiedName: chain.node(641)", "Delete MethodInvocation(642)", "Delete ExpressionStatement(643)", "Delete BooleanLiteral: false(644)", "Delete ReturnStatement(645)", "Delete Block(646)", "Delete MethodDeclaration(647)", "Delete TypeDeclaration: class(648)", "Delete TextElement: Given a constructs like (649)", "Delete TextElement:  \"Hello \" + \"World\"(650)", "Delete TagElement: @code(651)", "Delete TextElement: , to a (652)", "Delete TextElement:  List(653)", "Delete TagElement: @code(654)", "Delete TextElement: containing the individual string literals.(655)", "Delete TagElement(656)", "Delete Javadoc(657)", "Delete Modifier: private(658)", "Delete Modifier: static(659)", "Delete SimpleName: List(660)", "Delete SimpleType: List(661)", "Delete SimpleName: StringLiteral(662)", "Delete SimpleType: StringLiteral(663)", "Delete ParameterizedType: List<StringLiteral>(664)", "Delete SimpleName: flattenStringConcatenation(665)", "Delete SimpleName: Expression(666)", "Delete SimpleType: Expression(667)", "Delete SimpleName: e(668)", "Delete SingleVariableDeclaration(669)", "Delete SimpleName: flattenStringsOnto(670)", "Delete SimpleName: e(671)", "Delete SimpleName: ArrayList(672)", "Delete SimpleType: ArrayList(673)", "Delete SimpleName: StringLiteral(674)", "Delete SimpleType: StringLiteral(675)", "Delete ParameterizedType: ArrayList<StringLiteral>(676)", "Delete ClassInstanceCreation(677)", "Delete MethodInvocation(678)", "Delete ReturnStatement(679)", "Delete Block(680)", "Delete MethodDeclaration(681)", "Delete Modifier: private(682)", "Delete Modifier: static(683)", "Delete SimpleName: List(684)", "Delete SimpleType: List(685)", "Delete SimpleName: StringLiteral(686)", "Delete SimpleType: StringLiteral(687)", "Delete ParameterizedType: List<StringLiteral>(688)", "Delete SimpleName: flattenStringsOnto(689)", "Delete SimpleName: Expression(690)", "Delete SimpleType: Expression(691)", "Delete SimpleName: e(692)", "Delete SingleVariableDeclaration(693)", "Delete SimpleName: List(694)", "Delete SimpleType: List(695)", "Delete SimpleName: StringLiteral(696)", "Delete SimpleType: StringLiteral(697)", "Delete ParameterizedType: List<StringLiteral>(698)", "Delete SimpleName: out(699)", "Delete SingleVariableDeclaration(700)", "Delete SimpleName: e(701)", "Delete SimpleName: StringLiteral(702)", "Delete SimpleType: StringLiteral(703)", "Delete InstanceofExpression(704)", "Delete SimpleName: out(705)", "Delete SimpleName: add(706)", "Delete SimpleName: StringLiteral(707)", "Delete SimpleType: StringLiteral(708)", "Delete SimpleName: e(709)", "Delete CastExpression(710)", "Delete MethodInvocation(711)", "Delete ExpressionStatement(712)", "Delete SimpleName: out(713)", "Delete ReturnStatement(714)", "Delete Block(715)", "Delete IfStatement(716)", "Delete SimpleName: e(717)", "Delete SimpleName: Operation(718)", "Delete SimpleType: Operation(719)", "Delete InstanceofExpression(720)", "Delete ParenthesizedExpression(721)", "Delete PrefixExpression: !(722)", "Delete NullLiteral(723)", "Delete ReturnStatement(724)", "Delete Block(725)", "Delete IfStatement(726)", "Delete SimpleName: Operation(727)", "Delete SimpleType: Operation(728)", "Delete SimpleName: op(729)", "Delete SimpleName: Operation(730)", "Delete SimpleType: Operation(731)", "Delete SimpleName: e(732)", "Delete CastExpression(733)", "Delete VariableDeclarationFragment(734)", "Delete VariableDeclarationStatement(735)", "Delete SimpleName: op(736)", "Delete SimpleName: getOperator(737)", "Delete MethodInvocation(738)", "Delete QualifiedName: Operator.ADDITION(739)", "Delete InfixExpression: !=(740)", "Delete NullLiteral(741)", "Delete ReturnStatement(742)", "Delete Block(743)", "Delete IfStatement(744)", "Delete SimpleName: Expression(745)", "Delete SimpleType: Expression(746)", "Delete SimpleName: child(747)", "Delete SingleVariableDeclaration(748)", "Delete SimpleName: op(749)", "Delete SimpleName: children(750)", "Delete MethodInvocation(751)", "Delete SimpleName: out(752)", "Delete SimpleName: flattenStringsOnto(753)", "Delete SimpleName: child(754)", "Delete SimpleName: out(755)", "Delete MethodInvocation(756)", "Delete Assignment: =(757)", "Delete ExpressionStatement(758)", "Delete SimpleName: out(759)", "Delete NullLiteral(760)", "Delete InfixExpression: ==(761)", "Delete BreakStatement(762)", "Delete Block(763)", "Delete IfStatement(764)", "Delete Block(765)", "Delete EnhancedForStatement(766)", "Delete SimpleName: out(767)", "Delete ReturnStatement(768)", "Delete Block(769)", "Delete MethodDeclaration(770)", "Delete TypeDeclaration: class(771)", "Delete TextElement: Splits a sequence of string literals containing <code>${...}</code> and(772)", "Delete TextElement: <code>$name</code> into expressions, by looking for that pattern in the(773)", "Delete TextElement: string literals and parsing the content of substitutions as javascript.(774)", "Delete TextElement: <p>(775)", "Delete TextElement: The output contains alternating literal and substitutions, and is careful(776)", "Delete TextElement: to preserve file positions into the original source.(777)", "Delete TextElement: <p>(778)", "Delete TextElement: This code takes a list of string literals and keeps track of positions as(779)", "Delete TextElement: (stringLiteralIndex, characterIndexInUndecodedLiteral) pairs.(780)", "Delete TagElement(781)", "Delete Javadoc(782)", "Delete Modifier: final(783)", "Delete SimpleName: Splitter(784)", "Delete TextElement: Cursor that is moved from left to right as we process the string literals.(785)", "Delete TagElement(786)", "Delete Javadoc(787)", "Delete PrimitiveType: int(788)", "Delete SimpleName: startString(789)", "Delete NumberLiteral: 0(790)", "Delete VariableDeclarationFragment(791)", "Delete FieldDeclaration(792)", "Delete PrimitiveType: int(793)", "Delete SimpleName: startOffset(794)", "Delete NumberLiteral: 1(795)", "Delete VariableDeclarationFragment(796)", "Delete FieldDeclaration(797)", "Delete TextElement: The string literals being processed.  If we're dealing with(798)", "Delete TextElement:  eval(Template(\"Foo $bar\" + \" baz\"))(799)", "Delete TagElement: @code(800)", "Delete TextElement:  then the two string literals(801)", "Delete TextElement: will be (802)", "Delete TextElement:  \"Foo $bar\"(803)", "Delete TagElement: @code(804)", "Delete TextElement:  and (805)", "Delete TextElement:  \" baz\"(806)", "Delete TagElement: @code(807)", "Delete TextElement: .(808)", "Delete TagElement(809)", "Delete Javadoc(810)", "Delete SimpleName: List(811)", "Delete SimpleType: List(812)", "Delete SimpleName: StringLiteral(813)", "Delete SimpleType: StringLiteral(814)", "Delete ParameterizedType: List<StringLiteral>(815)", "Delete SimpleName: literals(816)", "Delete SimpleName: ArrayList(817)", "Delete SimpleType: ArrayList(818)", "Delete SimpleName: StringLiteral(819)", "Delete SimpleType: StringLiteral(820)", "Delete ParameterizedType: ArrayList<StringLiteral>(821)", "Delete ClassInstanceCreation(822)", "Delete VariableDeclarationFragment(823)", "Delete FieldDeclaration(824)", "Delete TextElement: Output array.  Alternating literals (StringLiteral) and substitutions(825)", "Delete TextElement: (arbitrary Expression).  For (826)", "Delete TextElement:  eval(Template(\"Foo $bar Baz\"))(827)", "Delete TagElement: @code(828)", "Delete TextElement:  this is(829)", "Delete TextElement:  [StringLiteral('Foo '), Reference(\"bar\"), StringLiteral(' Baz')](830)", "Delete TagElement: @code(831)", "Delete TextElement: .(832)", "Delete TextElement: <p>(833)", "Delete TextElement: Note that not all (834)", "Delete SimpleName: StringLiteral(835)", "Delete TagElement: @link(836)", "Delete TextElement: s are literals.(837)", "Delete TextElement: In <tt>eval(Template(\"Foo ${'bar'} Baz\"))</tt>, the sole substitution is a(838)", "Delete TextElement: StringLiteral.(839)", "Delete TagElement(840)", "Delete Javadoc(841)", "Delete SimpleName: List(842)", "Delete SimpleType: List(843)", "Delete SimpleName: Expression(844)", "Delete SimpleType: Expression(845)", "Delete ParameterizedType: List<Expression>(846)", "Delete SimpleName: parts(847)", "Delete SimpleName: ArrayList(848)", "Delete SimpleType: ArrayList(849)", "Delete SimpleName: Expression(850)", "Delete SimpleType: Expression(851)", "Delete ParameterizedType: ArrayList<Expression>(852)", "Delete ClassInstanceCreation(853)", "Delete VariableDeclarationFragment(854)", "Delete FieldDeclaration(855)", "Delete TextElement: Used to keep track of whether we're inside a substitution or not.(856)", "Delete TagElement(857)", "Delete Javadoc(858)", "Delete SimpleName: State(859)", "Delete SimpleType: State(860)", "Delete SimpleName: state(861)", "Delete QualifiedName: State.LITERAL(862)", "Delete VariableDeclarationFragment(863)", "Delete FieldDeclaration(864)", "Delete TextElement: Indices into the literal list, and the current literal.(865)", "Delete TagElement(866)", "Delete Javadoc(867)", "Delete PrimitiveType: int(868)", "Delete SimpleName: i(869)", "Delete VariableDeclarationFragment(870)", "Delete SimpleName: j(871)", "Delete VariableDeclarationFragment(872)", "Delete FieldDeclaration(873)", "Delete TextElement: A queue to which parse errors are written.(874)", "Delete TagElement(875)", "Delete Javadoc(876)", "Delete SimpleName: MessageQueue(877)", "Delete SimpleType: MessageQueue(878)", "Delete SimpleName: mq(879)", "Delete VariableDeclarationFragment(880)", "Delete FieldDeclaration(881)", "Delete SimpleName: Splitter(882)", "Delete SimpleName: List(883)", "Delete SimpleType: List(884)", "Delete SimpleName: StringLiteral(885)", "Delete SimpleType: StringLiteral(886)", "Delete ParameterizedType: List<StringLiteral>(887)", "Delete SimpleName: literals(888)", "Delete SingleVariableDeclaration(889)", "Delete SimpleName: MessageQueue(890)", "Delete SimpleType: MessageQueue(891)", "Delete SimpleName: mq(892)", "Delete SingleVariableDeclaration(893)", "Delete ThisExpression(894)", "Delete SimpleName: literals(895)", "Delete FieldAccess(896)", "Delete SimpleName: literals(897)", "Delete Assignment: =(898)", "Delete ExpressionStatement(899)", "Delete ThisExpression(900)", "Delete SimpleName: mq(901)", "Delete FieldAccess(902)", "Delete SimpleName: mq(903)", "Delete Assignment: =(904)", "Delete ExpressionStatement(905)", "Delete Block(906)", "Delete MethodDeclaration(907)", "Delete Modifier: private(908)", "Delete Modifier: static(909)", "Delete SimpleName: State(910)", "Delete SimpleName: LITERAL(911)", "Delete EnumConstantDeclaration(912)", "Delete SimpleName: SAW_DOLLAR(913)", "Delete EnumConstantDeclaration(914)", "Delete SimpleName: IN_REFERENCE(915)", "Delete EnumConstantDeclaration(916)", "Delete SimpleName: IN_BLOCK(917)", "Delete EnumConstantDeclaration(918)", "Delete EnumDeclaration(919)", "Delete TextElement: Walk the literal list and generate the output parts list. (920)", "Delete TagElement(921)", "Delete Javadoc(922)", "Delete PrimitiveType: void(923)", "Delete SimpleName: split(924)", "Delete PrimitiveType: int(925)", "Delete SimpleName: n(926)", "Delete SimpleName: literals(927)", "Delete SimpleName: size(928)", "Delete MethodInvocation(929)", "Delete VariableDeclarationFragment(930)", "Delete VariableDeclarationStatement(931)", "Delete SimpleName: j(932)", "Delete NumberLiteral: 0(933)", "Delete Assignment: =(934)", "Delete SimpleName: j(935)", "Delete SimpleName: n(936)", "Delete InfixExpression: <(937)", "Delete SimpleName: j(938)", "Delete PrefixExpression: ++(939)", "Delete SimpleName: StringLiteral(940)", "Delete SimpleType: StringLiteral(941)", "Delete SimpleName: str(942)", "Delete SimpleName: literals(943)", "Delete SimpleName: get(944)", "Delete SimpleName: j(945)", "Delete MethodInvocation(946)", "Delete VariableDeclarationFragment(947)", "Delete VariableDeclarationStatement(948)", "Delete SimpleName: String(949)", "Delete SimpleType: String(950)", "Delete SimpleName: rawString(951)", "Delete SimpleName: str(952)", "Delete SimpleName: getValue(953)", "Delete MethodInvocation(954)", "Delete VariableDeclarationFragment(955)", "Delete VariableDeclarationStatement(956)", "Delete PrimitiveType: int(957)", "Delete SimpleName: m(958)", "Delete SimpleName: rawString(959)", "Delete SimpleName: length(960)", "Delete MethodInvocation(961)", "Delete VariableDeclarationFragment(962)", "Delete VariableDeclarationStatement(963)", "Delete SimpleName: i(964)", "Delete NumberLiteral: 1(965)", "Delete Assignment: =(966)", "Delete SimpleName: i(967)", "Delete SimpleName: m(968)", "Delete InfixExpression: <(969)", "Delete SimpleName: i(970)", "Delete PrefixExpression: ++(971)", "Delete PrimitiveType: char(972)", "Delete SimpleName: ch(973)", "Delete SimpleName: rawString(974)", "Delete SimpleName: charAt(975)", "Delete SimpleName: i(976)", "Delete MethodInvocation(977)", "Delete VariableDeclarationFragment(978)", "Delete VariableDeclarationStatement(979)", "Delete SimpleName: ch(980)", "Delete CharacterLiteral: '$'(981)", "Delete SwitchCase(982)", "Delete SimpleName: state(983)", "Delete SimpleName: LITERAL(984)", "Delete SwitchCase(985)", "Delete SimpleName: SAW_DOLLAR(986)", "Delete SwitchCase(987)", "Delete SimpleName: state(988)", "Delete QualifiedName: State.SAW_DOLLAR(989)", "Delete Assignment: =(990)", "Delete ExpressionStatement(991)", "Delete BreakStatement(992)", "Delete SimpleName: IN_REFERENCE(993)", "Delete SwitchCase(994)", "Delete SimpleName: finishReference(995)", "Delete NumberLiteral: 0(996)", "Delete MethodInvocation(997)", "Delete ExpressionStatement(998)", "Delete SimpleName: mark(999)", "Delete NumberLiteral: 0(1000)", "Delete MethodInvocation(1001)", "Delete ExpressionStatement(1002)", "Delete SimpleName: state(1003)", "Delete QualifiedName: State.SAW_DOLLAR(1004)", "Delete Assignment: =(1005)", "Delete ExpressionStatement(1006)", "Delete BreakStatement(1007)", "Delete SwitchCase(1008)", "Delete BreakStatement(1009)", "Delete SwitchStatement(1010)", "Delete BreakStatement(1011)", "Delete CharacterLiteral: '{'(1012)", "Delete SwitchCase(1013)", "Delete SimpleName: state(1014)", "Delete SimpleName: SAW_DOLLAR(1015)", "Delete SwitchCase(1016)", "Delete SimpleName: finishLiteral(1017)", "Delete NumberLiteral: 1(1018)", "Delete PrefixExpression: -(1019)", "Delete MethodInvocation(1020)", "Delete ExpressionStatement(1021)", "Delete SimpleName: mark(1022)", "Delete NumberLiteral: 1(1023)", "Delete MethodInvocation(1024)", "Delete ExpressionStatement(1025)", "Delete SimpleName: state(1026)", "Delete QualifiedName: State.IN_BLOCK(1027)", "Delete Assignment: =(1028)", "Delete ExpressionStatement(1029)", "Delete BreakStatement(1030)", "Delete SimpleName: IN_REFERENCE(1031)", "Delete SwitchCase(1032)", "Delete SimpleName: finishReference(1033)", "Delete NumberLiteral: 0(1034)", "Delete MethodInvocation(1035)", "Delete ExpressionStatement(1036)", "Delete SimpleName: mark(1037)", "Delete NumberLiteral: 0(1038)", "Delete MethodInvocation(1039)", "Delete ExpressionStatement(1040)", "Delete SimpleName: state(1041)", "Delete QualifiedName: State.LITERAL(1042)", "Delete Assignment: =(1043)", "Delete ExpressionStatement(1044)", "Delete BreakStatement(1045)", "Delete SwitchCase(1046)", "Delete BreakStatement(1047)", "Delete SwitchStatement(1048)", "Delete BreakStatement(1049)", "Delete CharacterLiteral: '}'(1050)", "Delete SwitchCase(1051)", "Delete SimpleName: state(1052)", "Delete SimpleName: IN_REFERENCE(1053)", "Delete SwitchCase(1054)", "Delete SimpleName: finishReference(1055)", "Delete NumberLiteral: 0(1056)", "Delete MethodInvocation(1057)", "Delete ExpressionStatement(1058)", "Delete SimpleName: mark(1059)", "Delete NumberLiteral: 0(1060)", "Delete MethodInvocation(1061)", "Delete ExpressionStatement(1062)", "Delete SimpleName: state(1063)", "Delete QualifiedName: State.LITERAL(1064)", "Delete Assignment: =(1065)", "Delete ExpressionStatement(1066)", "Delete BreakStatement(1067)", "Delete SimpleName: SAW_DOLLAR(1068)", "Delete SwitchCase(1069)", "Delete SimpleName: state(1070)", "Delete QualifiedName: State.LITERAL(1071)", "Delete Assignment: =(1072)", "Delete ExpressionStatement(1073)", "Delete BreakStatement(1074)", "Delete SimpleName: IN_BLOCK(1075)", "Delete SwitchCase(1076)", "Delete SimpleName: finishBlock(1077)", "Delete NumberLiteral: 0(1078)", "Delete MethodInvocation(1079)", "Delete ExpressionStatement(1080)", "Delete SimpleName: mark(1081)", "Delete NumberLiteral: 1(1082)", "Delete MethodInvocation(1083)", "Delete ExpressionStatement(1084)", "Delete SimpleName: state(1085)", "Delete QualifiedName: State.LITERAL(1086)", "Delete Assignment: =(1087)", "Delete ExpressionStatement(1088)", "Delete BreakStatement(1089)", "Delete SwitchCase(1090)", "Delete BreakStatement(1091)", "Delete SwitchStatement(1092)", "Delete BreakStatement(1093)", "Delete SwitchCase(1094)", "Delete SimpleName: Character(1095)", "Delete SimpleName: isLetter(1096)", "Delete SimpleName: ch(1097)", "Delete MethodInvocation(1098)", "Delete SimpleName: ch(1099)", "Delete CharacterLiteral: '_'(1100)", "Delete InfixExpression: ==(1101)", "Delete InfixExpression: ||(1102)", "Delete SimpleName: state(1103)", "Delete SimpleName: SAW_DOLLAR(1104)", "Delete SwitchCase(1105)", "Delete SimpleName: finishLiteral(1106)", "Delete NumberLiteral: 1(1107)", "Delete PrefixExpression: -(1108)", "Delete MethodInvocation(1109)", "Delete ExpressionStatement(1110)", "Delete SimpleName: mark(1111)", "Delete NumberLiteral: 0(1112)", "Delete MethodInvocation(1113)", "Delete ExpressionStatement(1114)", "Delete SimpleName: state(1115)", "Delete QualifiedName: State.IN_REFERENCE(1116)", "Delete Assignment: =(1117)", "Delete ExpressionStatement(1118)", "Delete BreakStatement(1119)", "Delete SwitchCase(1120)", "Delete BreakStatement(1121)", "Delete SwitchStatement(1122)", "Delete Block(1123)", "Delete SimpleName: state(1124)", "Delete SimpleName: IN_REFERENCE(1125)", "Delete SwitchCase(1126)", "Delete SimpleName: Character(1127)", "Delete SimpleName: isDigit(1128)", "Delete SimpleName: ch(1129)", "Delete MethodInvocation(1130)", "Delete PrefixExpression: !(1131)", "Delete SimpleName: finishReference(1132)", "Delete NumberLiteral: 0(1133)", "Delete MethodInvocation(1134)", "Delete ExpressionStatement(1135)", "Delete SimpleName: mark(1136)", "Delete NumberLiteral: 0(1137)", "Delete MethodInvocation(1138)", "Delete ExpressionStatement(1139)", "Delete SimpleName: state(1140)", "Delete QualifiedName: State.LITERAL(1141)", "Delete Assignment: =(1142)", "Delete ExpressionStatement(1143)", "Delete Block(1144)", "Delete IfStatement(1145)", "Delete BreakStatement(1146)", "Delete SimpleName: SAW_DOLLAR(1147)", "Delete SwitchCase(1148)", "Delete SimpleName: state(1149)", "Delete QualifiedName: State.LITERAL(1150)", "Delete Assignment: =(1151)", "Delete ExpressionStatement(1152)", "Delete BreakStatement(1153)", "Delete SwitchCase(1154)", "Delete BreakStatement(1155)", "Delete SwitchStatement(1156)", "Delete Block(1157)", "Delete IfStatement(1158)", "Delete BreakStatement(1159)", "Delete SwitchStatement(1160)", "Delete Block(1161)", "Delete ForStatement(1162)", "Delete Block(1163)", "Delete ForStatement(1164)", "Delete SimpleName: state(1165)", "Delete SimpleName: SAW_DOLLAR(1166)", "Delete SwitchCase(1167)", "Delete SimpleName: LITERAL(1168)", "Delete SwitchCase(1169)", "Delete SimpleName: finishLiteral(1170)", "Delete NumberLiteral: 0(1171)", "Delete MethodInvocation(1172)", "Delete ExpressionStatement(1173)", "Delete BreakStatement(1174)", "Delete SimpleName: IN_REFERENCE(1175)", "Delete SwitchCase(1176)", "Delete SimpleName: finishReference(1177)", "Delete NumberLiteral: 0(1178)", "Delete MethodInvocation(1179)", "Delete ExpressionStatement(1180)", "Delete BreakStatement(1181)", "Delete SimpleName: IN_BLOCK(1182)", "Delete SwitchCase(1183)", "Delete SimpleName: SomethingWidgyHappenedError(1184)", "Delete SimpleType: SomethingWidgyHappenedError(1185)", "Delete StringLiteral: \"End of template inside brackets\"(1186)", "Delete ClassInstanceCreation(1187)", "Delete ThrowStatement(1188)", "Delete SwitchStatement(1189)", "Delete Block(1190)", "Delete MethodDeclaration(1191)", "Delete TextElement: Track the last position processed.(1192)", "Delete TagElement(1193)", "Delete SimpleName: delta(1194)", "Delete TextElement:  number of characters from the current position in the(1195)", "Delete TextElement: string literals.(1196)", "Delete TagElement: @param(1197)", "Delete Javadoc(1198)", "Delete Modifier: private(1199)", "Delete PrimitiveType: void(1200)", "Delete SimpleName: mark(1201)", "Delete PrimitiveType: int(1202)", "Delete SimpleName: delta(1203)", "Delete SingleVariableDeclaration(1204)", "Delete SimpleName: startString(1205)", "Delete SimpleName: j(1206)", "Delete Assignment: =(1207)", "Delete ExpressionStatement(1208)", "Delete SimpleName: startOffset(1209)", "Delete SimpleName: i(1210)", "Delete SimpleName: delta(1211)", "Delete InfixExpression: +(1212)", "Delete Assignment: =(1213)", "Delete ExpressionStatement(1214)", "Delete Block(1215)", "Delete MethodDeclaration(1216)", "Delete TextElement: Push a literal part onto the output list.(1217)", "Delete TagElement(1218)", "Delete SimpleName: delta(1219)", "Delete TextElement:  of the end of the literal relative to the cursor.(1220)", "Delete TagElement: @param(1221)", "Delete Javadoc(1222)", "Delete Modifier: private(1223)", "Delete PrimitiveType: void(1224)", "Delete SimpleName: finishLiteral(1225)", "Delete PrimitiveType: int(1226)", "Delete SimpleName: delta(1227)", "Delete SingleVariableDeclaration(1228)", "Delete SimpleName: FilePosition(1229)", "Delete SimpleType: FilePosition(1230)", "Delete SimpleName: start(1231)", "Delete NullLiteral(1232)", "Delete VariableDeclarationFragment(1233)", "Delete SimpleName: end(1234)", "Delete NullLiteral(1235)", "Delete VariableDeclarationFragment(1236)", "Delete VariableDeclarationStatement(1237)", "Delete SimpleName: StringBuilder(1238)", "Delete SimpleType: StringBuilder(1239)", "Delete SimpleName: sb(1240)", "Delete SimpleName: StringBuilder(1241)", "Delete SimpleType: StringBuilder(1242)", "Delete ClassInstanceCreation(1243)", "Delete VariableDeclarationFragment(1244)", "Delete VariableDeclarationStatement(1245)", "Delete SimpleName: Pair(1246)", "Delete SimpleType: Pair(1247)", "Delete SimpleName: String(1248)", "Delete SimpleType: String(1249)", "Delete SimpleName: FilePosition(1250)", "Delete SimpleType: FilePosition(1251)", "Delete ParameterizedType: Pair<String,FilePosition>(1252)", "Delete SimpleName: p(1253)", "Delete SingleVariableDeclaration(1254)", "Delete SimpleName: upTo(1255)", "Delete SimpleName: delta(1256)", "Delete MethodInvocation(1257)", "Delete SimpleName: start(1258)", "Delete NullLiteral(1259)", "Delete InfixExpression: ==(1260)", "Delete SimpleName: start(1261)", "Delete QualifiedName: p.b(1262)", "Delete Assignment: =(1263)", "Delete ExpressionStatement(1264)", "Delete Block(1265)", "Delete IfStatement(1266)", "Delete SimpleName: end(1267)", "Delete QualifiedName: p.b(1268)", "Delete Assignment: =(1269)", "Delete ExpressionStatement(1270)", "Delete SimpleName: sb(1271)", "Delete SimpleName: append(1272)", "Delete QualifiedName: p.a(1273)", "Delete MethodInvocation(1274)", "Delete ExpressionStatement(1275)", "Delete Block(1276)", "Delete EnhancedForStatement(1277)", "Delete SimpleName: parts(1278)", "Delete SimpleName: add(1279)", "Delete SimpleName: StringLiteral(1280)", "Delete SimpleName: valueOf(1281)", "Delete SimpleName: FilePosition(1282)", "Delete SimpleName: span(1283)", "Delete SimpleName: start(1284)", "Delete SimpleName: end(1285)", "Delete MethodInvocation(1286)", "Delete SimpleName: sb(1287)", "Delete MethodInvocation(1288)", "Delete MethodInvocation(1289)", "Delete ExpressionStatement(1290)", "Delete Block(1291)", "Delete MethodDeclaration(1292)", "Delete TextElement: Push a reference onto the output list.(1293)", "Delete TagElement(1294)", "Delete SimpleName: delta(1295)", "Delete TextElement:  of the end of the reference to the cursor.(1296)", "Delete TagElement: @param(1297)", "Delete Javadoc(1298)", "Delete Modifier: private(1299)", "Delete PrimitiveType: void(1300)", "Delete SimpleName: finishReference(1301)", "Delete PrimitiveType: int(1302)", "Delete SimpleName: delta(1303)", "Delete SingleVariableDeclaration(1304)", "Delete SimpleName: FilePosition(1305)", "Delete SimpleType: FilePosition(1306)", "Delete SimpleName: start(1307)", "Delete NullLiteral(1308)", "Delete VariableDeclarationFragment(1309)", "Delete SimpleName: end(1310)", "Delete NullLiteral(1311)", "Delete VariableDeclarationFragment(1312)", "Delete VariableDeclarationStatement(1313)", "Delete SimpleName: StringBuilder(1314)", "Delete SimpleType: StringBuilder(1315)", "Delete SimpleName: sb(1316)", "Delete SimpleName: StringBuilder(1317)", "Delete SimpleType: StringBuilder(1318)", "Delete ClassInstanceCreation(1319)", "Delete VariableDeclarationFragment(1320)", "Delete VariableDeclarationStatement(1321)", "Delete SimpleName: Pair(1322)", "Delete SimpleType: Pair(1323)", "Delete SimpleName: String(1324)", "Delete SimpleType: String(1325)", "Delete SimpleName: FilePosition(1326)", "Delete SimpleType: FilePosition(1327)", "Delete ParameterizedType: Pair<String,FilePosition>(1328)", "Delete SimpleName: p(1329)", "Delete SingleVariableDeclaration(1330)", "Delete SimpleName: upTo(1331)", "Delete SimpleName: delta(1332)", "Delete MethodInvocation(1333)", "Delete SimpleName: start(1334)", "Delete NullLiteral(1335)", "Delete InfixExpression: ==(1336)", "Delete SimpleName: start(1337)", "Delete QualifiedName: p.b(1338)", "Delete Assignment: =(1339)", "Delete ExpressionStatement(1340)", "Delete Block(1341)", "Delete IfStatement(1342)", "Delete SimpleName: end(1343)", "Delete QualifiedName: p.b(1344)", "Delete Assignment: =(1345)", "Delete ExpressionStatement(1346)", "Delete SimpleName: sb(1347)", "Delete SimpleName: append(1348)", "Delete QualifiedName: p.a(1349)", "Delete MethodInvocation(1350)", "Delete ExpressionStatement(1351)", "Delete Block(1352)", "Delete EnhancedForStatement(1353)", "Delete SimpleName: FilePosition(1354)", "Delete SimpleType: FilePosition(1355)", "Delete SimpleName: pos(1356)", "Delete SimpleName: FilePosition(1357)", "Delete SimpleName: span(1358)", "Delete SimpleName: start(1359)", "Delete SimpleName: end(1360)", "Delete MethodInvocation(1361)", "Delete VariableDeclarationFragment(1362)", "Delete VariableDeclarationStatement(1363)", "Delete SimpleName: Identifier(1364)", "Delete SimpleType: Identifier(1365)", "Delete SimpleName: ident(1366)", "Delete SimpleName: Identifier(1367)", "Delete SimpleType: Identifier(1368)", "Delete SimpleName: pos(1369)", "Delete SimpleName: sb(1370)", "Delete SimpleName: toString(1371)", "Delete MethodInvocation(1372)", "Delete ClassInstanceCreation(1373)", "Delete VariableDeclarationFragment(1374)", "Delete VariableDeclarationStatement(1375)", "Delete SimpleName: Reference(1376)", "Delete SimpleType: Reference(1377)", "Delete SimpleName: ref(1378)", "Delete SimpleName: Reference(1379)", "Delete SimpleType: Reference(1380)", "Delete SimpleName: ident(1381)", "Delete ClassInstanceCreation(1382)", "Delete VariableDeclarationFragment(1383)", "Delete VariableDeclarationStatement(1384)", "Delete SimpleName: parts(1385)", "Delete SimpleName: add(1386)", "Delete SimpleName: ref(1387)", "Delete MethodInvocation(1388)", "Delete ExpressionStatement(1389)", "Delete Block(1390)", "Delete MethodDeclaration(1391)", "Delete TextElement: Parse a substitution expression and push it onto the output list.(1392)", "Delete TagElement(1393)", "Delete SimpleName: delta(1394)", "Delete TextElement:  of the end of the block to the cursor.(1395)", "Delete TagElement: @param(1396)", "Delete Javadoc(1397)", "Delete Modifier: private(1398)", "Delete PrimitiveType: void(1399)", "Delete SimpleName: finishBlock(1400)", "Delete PrimitiveType: int(1401)", "Delete SimpleName: delta(1402)", "Delete SingleVariableDeclaration(1403)", "Delete SimpleName: FilePosition(1404)", "Delete SimpleType: FilePosition(1405)", "Delete SimpleName: start(1406)", "Delete NullLiteral(1407)", "Delete VariableDeclarationFragment(1408)", "Delete SimpleName: end(1409)", "Delete NullLiteral(1410)", "Delete VariableDeclarationFragment(1411)", "Delete VariableDeclarationStatement(1412)", "Delete SimpleName: List(1413)", "Delete SimpleType: List(1414)", "Delete SimpleName: CharProducer(1415)", "Delete SimpleType: CharProducer(1416)", "Delete ParameterizedType: List<CharProducer>(1417)", "Delete SimpleName: producers(1418)", "Delete SimpleName: ArrayList(1419)", "Delete SimpleType: ArrayList(1420)", "Delete SimpleName: CharProducer(1421)", "Delete SimpleType: CharProducer(1422)", "Delete ParameterizedType: ArrayList<CharProducer>(1423)", "Delete ClassInstanceCreation(1424)", "Delete VariableDeclarationFragment(1425)", "Delete VariableDeclarationStatement(1426)", "Delete SimpleName: Pair(1427)", "Delete SimpleType: Pair(1428)", "Delete SimpleName: String(1429)", "Delete SimpleType: String(1430)", "Delete SimpleName: FilePosition(1431)", "Delete SimpleType: FilePosition(1432)", "Delete ParameterizedType: Pair<String,FilePosition>(1433)", "Delete SimpleName: p(1434)", "Delete SingleVariableDeclaration(1435)", "Delete SimpleName: upTo(1436)", "Delete SimpleName: delta(1437)", "Delete MethodInvocation(1438)", "Delete SimpleName: start(1439)", "Delete NullLiteral(1440)", "Delete InfixExpression: ==(1441)", "Delete SimpleName: start(1442)", "Delete QualifiedName: p.b(1443)", "Delete Assignment: =(1444)", "Delete ExpressionStatement(1445)", "Delete Block(1446)", "Delete IfStatement(1447)", "Delete SimpleName: end(1448)", "Delete QualifiedName: p.b(1449)", "Delete Assignment: =(1450)", "Delete ExpressionStatement(1451)", "Delete SimpleName: producers(1452)", "Delete SimpleName: add(1453)", "Delete QualifiedName: CharProducer.Factory(1454)", "Delete SimpleName: create(1455)", "Delete SimpleName: StringReader(1456)", "Delete SimpleType: StringReader(1457)", "Delete QualifiedName: p.a(1458)", "Delete ClassInstanceCreation(1459)", "Delete QualifiedName: p.b(1460)", "Delete MethodInvocation(1461)", "Delete MethodInvocation(1462)", "Delete ExpressionStatement(1463)", "Delete Block(1464)", "Delete EnhancedForStatement(1465)", "Delete SimpleName: CharProducer(1466)", "Delete SimpleType: CharProducer(1467)", "Delete SimpleName: joined(1468)", "Delete VariableDeclarationFragment(1469)", "Delete VariableDeclarationStatement(1470)", "Delete SimpleName: producers(1471)", "Delete SimpleName: size(1472)", "Delete MethodInvocation(1473)", "Delete NumberLiteral: 1(1474)", "Delete InfixExpression: ==(1475)", "Delete SimpleName: joined(1476)", "Delete SimpleName: producers(1477)", "Delete SimpleName: get(1478)", "Delete NumberLiteral: 0(1479)", "Delete MethodInvocation(1480)", "Delete Assignment: =(1481)", "Delete ExpressionStatement(1482)", "Delete Block(1483)", "Delete SimpleName: joined(1484)", "Delete QualifiedName: CharProducer.Factory(1485)", "Delete SimpleName: chain(1486)", "Delete SimpleName: producers(1487)", "Delete SimpleName: toArray(1488)", "Delete SimpleName: CharProducer(1489)", "Delete SimpleType: CharProducer(1490)", "Delete Dimension(1491)", "Delete ArrayType: CharProducer[](1492)", "Delete NumberLiteral: 0(1493)", "Delete ArrayCreation(1494)", "Delete MethodInvocation(1495)", "Delete MethodInvocation(1496)", "Delete Assignment: =(1497)", "Delete ExpressionStatement(1498)", "Delete Block(1499)", "Delete IfStatement(1500)", "Delete SimpleName: start(1501)", "Delete NullLiteral(1502)", "Delete InfixExpression: ==(1503)", "Delete SimpleName: start(1504)", "Delete QualifiedName: FilePosition.UNKNOWN(1505)", "Delete Assignment: =(1506)", "Delete ExpressionStatement(1507)", "Delete Block(1508)", "Delete IfStatement(1509)", "Delete SimpleName: CharProducer(1510)", "Delete SimpleType: CharProducer(1511)", "Delete SimpleName: exprText(1512)", "Delete QualifiedName: CharProducer.Factory(1513)", "Delete SimpleName: fromJsString(1514)", "Delete SimpleName: joined(1515)", "Delete MethodInvocation(1516)", "Delete VariableDeclarationFragment(1517)", "Delete VariableDeclarationStatement(1518)", "Delete SimpleName: JsLexer(1519)", "Delete SimpleType: JsLexer(1520)", "Delete SimpleName: lexer(1521)", "Delete SimpleName: JsLexer(1522)", "Delete SimpleType: JsLexer(1523)", "Delete SimpleName: exprText(1524)", "Delete ClassInstanceCreation(1525)", "Delete VariableDeclarationFragment(1526)", "Delete VariableDeclarationStatement(1527)", "Delete SimpleName: JsTokenQueue(1528)", "Delete SimpleType: JsTokenQueue(1529)", "Delete SimpleName: tq(1530)", "Delete SimpleName: JsTokenQueue(1531)", "Delete SimpleType: JsTokenQueue(1532)", "Delete SimpleName: lexer(1533)", "Delete SimpleName: start(1534)", "Delete SimpleName: source(1535)", "Delete MethodInvocation(1536)", "Delete QualifiedName: JsTokenQueue.NO_COMMENT(1537)", "Delete ClassInstanceCreation(1538)", "Delete VariableDeclarationFragment(1539)", "Delete VariableDeclarationStatement(1540)", "Delete SimpleName: Parser(1541)", "Delete SimpleType: Parser(1542)", "Delete SimpleName: p(1543)", "Delete SimpleName: Parser(1544)", "Delete SimpleType: Parser(1545)", "Delete SimpleName: tq(1546)", "Delete SimpleName: mq(1547)", "Delete ClassInstanceCreation(1548)", "Delete VariableDeclarationFragment(1549)", "Delete VariableDeclarationStatement(1550)", "Delete SimpleName: Expression(1551)", "Delete SimpleType: Expression(1552)", "Delete SimpleName: result(1553)", "Delete VariableDeclarationFragment(1554)", "Delete VariableDeclarationStatement(1555)", "Delete SimpleName: result(1556)", "Delete SimpleName: p(1557)", "Delete SimpleName: parseExpression(1558)", "Delete BooleanLiteral: true(1559)", "Delete MethodInvocation(1560)", "Delete Assignment: =(1561)", "Delete ExpressionStatement(1562)", "Delete SimpleName: tq(1563)", "Delete SimpleName: expectEmpty(1564)", "Delete MethodInvocation(1565)", "Delete ExpressionStatement(1566)", "Delete Block(1567)", "Delete SimpleName: ParseException(1568)", "Delete SimpleType: ParseException(1569)", "Delete SimpleName: ex(1570)", "Delete SingleVariableDeclaration(1571)", "Delete SimpleName: ex(1572)", "Delete SimpleName: toMessageQueue(1573)", "Delete SimpleName: mq(1574)", "Delete MethodInvocation(1575)", "Delete ExpressionStatement(1576)", "Delete SimpleName: result(1577)", "Delete SimpleName: Operation(1578)", "Delete SimpleName: undefined(1579)", "Delete SimpleName: FilePosition(1580)", "Delete SimpleName: span(1581)", "Delete SimpleName: start(1582)", "Delete SimpleName: end(1583)", "Delete MethodInvocation(1584)", "Delete MethodInvocation(1585)", "Delete Assignment: =(1586)", "Delete ExpressionStatement(1587)", "Delete Block(1588)", "Delete CatchClause(1589)", "Delete TryStatement(1590)", "Delete SimpleName: parts(1591)", "Delete SimpleName: add(1592)", "Delete SimpleName: result(1593)", "Delete MethodInvocation(1594)", "Delete ExpressionStatement(1595)", "Delete Block(1596)", "Delete MethodDeclaration(1597)", "Delete TextElement: Compute the pieces of the string literals that span from(1598)", "Delete TextElement: the mark to the given delta.(1599)", "Delete TagElement(1600)", "Delete Javadoc(1601)", "Delete Modifier: private(1602)", "Delete SimpleName: List(1603)", "Delete SimpleType: List(1604)", "Delete SimpleName: Pair(1605)", "Delete SimpleType: Pair(1606)", "Delete SimpleName: String(1607)", "Delete SimpleType: String(1608)", "Delete SimpleName: FilePosition(1609)", "Delete SimpleType: FilePosition(1610)", "Delete ParameterizedType: Pair<String,FilePosition>(1611)", "Delete ParameterizedType: List<Pair<String,FilePosition>>(1612)", "Delete SimpleName: upTo(1613)", "Delete PrimitiveType: int(1614)", "Delete SimpleName: delta(1615)", "Delete SingleVariableDeclaration(1616)", "Delete PrimitiveType: int(1617)", "Delete SimpleName: currentString(1618)", "Delete SimpleName: startString(1619)", "Delete VariableDeclarationFragment(1620)", "Delete VariableDeclarationStatement(1621)", "Delete PrimitiveType: int(1622)", "Delete SimpleName: currentOffset(1623)", "Delete SimpleName: startOffset(1624)", "Delete VariableDeclarationFragment(1625)", "Delete VariableDeclarationStatement(1626)", "Delete SimpleName: literals(1627)", "Delete SimpleName: size(1628)", "Delete MethodInvocation(1629)", "Delete SimpleName: startString(1630)", "Delete InfixExpression: >(1631)", "Delete SimpleName: startOffset(1632)", "Delete SimpleName: literals(1633)", "Delete SimpleName: get(1634)", "Delete SimpleName: startString(1635)", "Delete MethodInvocation(1636)", "Delete SimpleName: getValue(1637)", "Delete MethodInvocation(1638)", "Delete SimpleName: length(1639)", "Delete MethodInvocation(1640)", "Delete NumberLiteral: 1(1641)", "Delete InfixExpression: -(1642)", "Delete InfixExpression: >=(1643)", "Delete InfixExpression: &&(1644)", "Delete SimpleName: startOffset(1645)", "Delete NumberLiteral: 1(1646)", "Delete SimpleName: startOffset(1647)", "Delete InfixExpression: +(1648)", "Delete SimpleName: literals(1649)", "Delete SimpleName: get(1650)", "Delete SimpleName: startString(1651)", "Delete MethodInvocation(1652)", "Delete SimpleName: getValue(1653)", "Delete MethodInvocation(1654)", "Delete SimpleName: length(1655)", "Delete MethodInvocation(1656)", "Delete NumberLiteral: 1(1657)", "Delete InfixExpression: -(1658)", "Delete ParenthesizedExpression(1659)", "Delete InfixExpression: -(1660)", "Delete Assignment: =(1661)", "Delete ExpressionStatement(1662)", "Delete SimpleName: startString(1663)", "Delete PrefixExpression: ++(1664)", "Delete ExpressionStatement(1665)", "Delete Block(1666)", "Delete WhileStatement(1667)", "Delete PrimitiveType: int(1668)", "Delete SimpleName: endString(1669)", "Delete SimpleName: j(1670)", "Delete VariableDeclarationFragment(1671)", "Delete VariableDeclarationStatement(1672)", "Delete PrimitiveType: int(1673)", "Delete SimpleName: endOffset(1674)", "Delete SimpleName: i(1675)", "Delete SimpleName: delta(1676)", "Delete InfixExpression: +(1677)", "Delete VariableDeclarationFragment(1678)", "Delete VariableDeclarationStatement(1679)", "Delete SimpleName: endOffset(1680)", "Delete NumberLiteral: 1(1681)", "Delete InfixExpression: <(1682)", "Delete SimpleName: endString(1683)", "Delete NumberLiteral: 0(1684)", "Delete InfixExpression: >(1685)", "Delete InfixExpression: &&(1686)", "Delete SimpleName: endString(1687)", "Delete PrefixExpression: --(1688)", "Delete ExpressionStatement(1689)", "Delete SimpleName: endOffset(1690)", "Delete SimpleName: literals(1691)", "Delete SimpleName: get(1692)", "Delete SimpleName: endString(1693)", "Delete MethodInvocation(1694)", "Delete SimpleName: getValue(1695)", "Delete MethodInvocation(1696)", "Delete SimpleName: length(1697)", "Delete MethodInvocation(1698)", "Delete NumberLiteral: 1(1699)", "Delete InfixExpression: -(1700)", "Delete Assignment: +=(1701)", "Delete ExpressionStatement(1702)", "Delete Block(1703)", "Delete WhileStatement(1704)", "Delete SimpleName: List(1705)", "Delete SimpleType: List(1706)", "Delete SimpleName: Pair(1707)", "Delete SimpleType: Pair(1708)", "Delete SimpleName: String(1709)", "Delete SimpleType: String(1710)", "Delete SimpleName: FilePosition(1711)", "Delete SimpleType: FilePosition(1712)", "Delete ParameterizedType: Pair<String,FilePosition>(1713)", "Delete ParameterizedType: List<Pair<String,FilePosition>>(1714)", "Delete SimpleName: parts(1715)", "Delete SimpleName: ArrayList(1716)", "Delete SimpleType: ArrayList(1717)", "Delete SimpleName: Pair(1718)", "Delete SimpleType: Pair(1719)", "Delete SimpleName: String(1720)", "Delete SimpleType: String(1721)", "Delete SimpleName: FilePosition(1722)", "Delete SimpleType: FilePosition(1723)", "Delete ParameterizedType: Pair<String,FilePosition>(1724)", "Delete ParameterizedType: ArrayList<Pair<String,FilePosition>>(1725)", "Delete ClassInstanceCreation(1726)", "Delete VariableDeclarationFragment(1727)", "Delete VariableDeclarationStatement(1728)", "Delete SimpleName: currentString(1729)", "Delete SimpleName: endString(1730)", "Delete InfixExpression: <(1731)", "Delete SimpleName: StringLiteral(1732)", "Delete SimpleType: StringLiteral(1733)", "Delete SimpleName: lit(1734)", "Delete SimpleName: literals(1735)", "Delete SimpleName: get(1736)", "Delete SimpleName: currentString(1737)", "Delete MethodInvocation(1738)", "Delete VariableDeclarationFragment(1739)", "Delete VariableDeclarationStatement(1740)", "Delete SimpleName: String(1741)", "Delete SimpleType: String(1742)", "Delete SimpleName: literalText(1743)", "Delete SimpleName: lit(1744)", "Delete SimpleName: getValue(1745)", "Delete MethodInvocation(1746)", "Delete VariableDeclarationFragment(1747)", "Delete VariableDeclarationStatement(1748)", "Delete PrimitiveType: int(1749)", "Delete SimpleName: end(1750)", "Delete SimpleName: literalText(1751)", "Delete SimpleName: length(1752)", "Delete MethodInvocation(1753)", "Delete NumberLiteral: 1(1754)", "Delete InfixExpression: -(1755)", "Delete VariableDeclarationFragment(1756)", "Delete VariableDeclarationStatement(1757)", "Delete SimpleName: parts(1758)", "Delete SimpleName: add(1759)", "Delete SimpleName: Pair(1760)", "Delete SimpleName: pair(1761)", "Delete SimpleName: literalText(1762)", "Delete SimpleName: substring(1763)", "Delete SimpleName: currentOffset(1764)", "Delete SimpleName: end(1765)", "Delete MethodInvocation(1766)", "Delete SimpleName: clippedPos(1767)", "Delete SimpleName: lit(1768)", "Delete SimpleName: getFilePosition(1769)", "Delete MethodInvocation(1770)", "Delete SimpleName: currentOffset(1771)", "Delete SimpleName: end(1772)", "Delete MethodInvocation(1773)", "Delete MethodInvocation(1774)", "Delete MethodInvocation(1775)", "Delete ExpressionStatement(1776)", "Delete SimpleName: currentOffset(1777)", "Delete NumberLiteral: 1(1778)", "Delete Assignment: =(1779)", "Delete ExpressionStatement(1780)", "Delete SimpleName: currentString(1781)", "Delete PrefixExpression: ++(1782)", "Delete ExpressionStatement(1783)", "Delete Block(1784)", "Delete WhileStatement(1785)", "Delete SimpleName: currentString(1786)", "Delete SimpleName: endString(1787)", "Delete InfixExpression: ==(1788)", "Delete SimpleName: currentOffset(1789)", "Delete SimpleName: endOffset(1790)", "Delete InfixExpression: <=(1791)", "Delete InfixExpression: &&(1792)", "Delete SimpleName: currentString(1793)", "Delete SimpleName: literals(1794)", "Delete SimpleName: size(1795)", "Delete MethodInvocation(1796)", "Delete InfixExpression: <(1797)", "Delete InfixExpression: &&(1798)", "Delete SimpleName: StringLiteral(1799)", "Delete SimpleType: StringLiteral(1800)", "Delete SimpleName: lit(1801)", "Delete SimpleName: literals(1802)", "Delete SimpleName: get(1803)", "Delete SimpleName: currentString(1804)", "Delete MethodInvocation(1805)", "Delete VariableDeclarationFragment(1806)", "Delete VariableDeclarationStatement(1807)", "Delete SimpleName: String(1808)", "Delete SimpleType: String(1809)", "Delete SimpleName: literalText(1810)", "Delete SimpleName: lit(1811)", "Delete SimpleName: getValue(1812)", "Delete MethodInvocation(1813)", "Delete VariableDeclarationFragment(1814)", "Delete VariableDeclarationStatement(1815)", "Delete SimpleName: parts(1816)", "Delete SimpleName: add(1817)", "Delete SimpleName: Pair(1818)", "Delete SimpleName: pair(1819)", "Delete SimpleName: literalText(1820)", "Delete SimpleName: substring(1821)", "Delete SimpleName: currentOffset(1822)", "Delete SimpleName: endOffset(1823)", "Delete MethodInvocation(1824)", "Delete SimpleName: clippedPos(1825)", "Delete SimpleName: lit(1826)", "Delete SimpleName: getFilePosition(1827)", "Delete MethodInvocation(1828)", "Delete SimpleName: currentOffset(1829)", "Delete SimpleName: endOffset(1830)", "Delete MethodInvocation(1831)", "Delete MethodInvocation(1832)", "Delete MethodInvocation(1833)", "Delete ExpressionStatement(1834)", "Delete Block(1835)", "Delete IfStatement(1836)", "Delete SimpleName: parts(1837)", "Delete SimpleName: isEmpty(1838)", "Delete MethodInvocation(1839)", "Delete SimpleName: StringLiteral(1840)", "Delete SimpleType: StringLiteral(1841)", "Delete SimpleName: lastLit(1842)", "Delete SimpleName: literals(1843)", "Delete SimpleName: get(1844)", "Delete SimpleName: literals(1845)", "Delete SimpleName: size(1846)", "Delete MethodInvocation(1847)", "Delete NumberLiteral: 1(1848)", "Delete InfixExpression: -(1849)", "Delete MethodInvocation(1850)", "Delete VariableDeclarationFragment(1851)", "Delete VariableDeclarationStatement(1852)", "Delete SimpleName: parts(1853)", "Delete SimpleName: add(1854)", "Delete SimpleName: Pair(1855)", "Delete SimpleName: pair(1856)", "Delete StringLiteral: \"\"(1857)", "Delete SimpleName: FilePosition(1858)", "Delete SimpleName: endOf(1859)", "Delete SimpleName: lastLit(1860)", "Delete SimpleName: getFilePosition(1861)", "Delete MethodInvocation(1862)", "Delete MethodInvocation(1863)", "Delete MethodInvocation(1864)", "Delete MethodInvocation(1865)", "Delete ExpressionStatement(1866)", "Delete Block(1867)", "Delete IfStatement(1868)", "Delete SimpleName: parts(1869)", "Delete ReturnStatement(1870)", "Delete Block(1871)", "Delete MethodDeclaration(1872)", "Delete TextElement: Interpolate the position of a substring of a StringLiteral.(1873)", "Delete TagElement(1874)", "Delete Javadoc(1875)", "Delete Modifier: static(1876)", "Delete SimpleName: FilePosition(1877)", "Delete SimpleType: FilePosition(1878)", "Delete SimpleName: clippedPos(1879)", "Delete SimpleName: FilePosition(1880)", "Delete SimpleType: FilePosition(1881)", "Delete SimpleName: p(1882)", "Delete SingleVariableDeclaration(1883)", "Delete PrimitiveType: int(1884)", "Delete SimpleName: start(1885)", "Delete SingleVariableDeclaration(1886)", "Delete PrimitiveType: int(1887)", "Delete SimpleName: end(1888)", "Delete SingleVariableDeclaration(1889)", "Delete SimpleName: end(1890)", "Delete NumberLiteral: 0(1891)", "Delete InfixExpression: <=(1892)", "Delete SimpleName: FilePosition(1893)", "Delete SimpleName: startOf(1894)", "Delete SimpleName: p(1895)", "Delete MethodInvocation(1896)", "Delete ReturnStatement(1897)", "Delete Block(1898)", "Delete IfStatement(1899)", "Delete SimpleName: p(1900)", "Delete SimpleName: endCharInFile(1901)", "Delete MethodInvocation(1902)", "Delete SimpleName: p(1903)", "Delete SimpleName: startCharInFile(1904)", "Delete MethodInvocation(1905)", "Delete InfixExpression: -(1906)", "Delete SimpleName: start(1907)", "Delete InfixExpression: <=(1908)", "Delete SimpleName: FilePosition(1909)", "Delete SimpleName: endOf(1910)", "Delete SimpleName: p(1911)", "Delete MethodInvocation(1912)", "Delete ReturnStatement(1913)", "Delete Block(1914)", "Delete IfStatement(1915)", "Delete SimpleName: end(1916)", "Delete SimpleName: start(1917)", "Delete InfixExpression: <(1918)", "Delete SimpleName: end(1919)", "Delete SimpleName: start(1920)", "Delete Assignment: =(1921)", "Delete ExpressionStatement(1922)", "Delete Block(1923)", "Delete IfStatement(1924)", "Delete SimpleName: FilePosition(1925)", "Delete SimpleName: instance(1926)", "Delete SimpleName: p(1927)", "Delete SimpleName: source(1928)", "Delete MethodInvocation(1929)", "Delete SimpleName: p(1930)", "Delete SimpleName: startLineNo(1931)", "Delete MethodInvocation(1932)", "Delete SimpleName: p(1933)", "Delete SimpleName: startCharInFile(1934)", "Delete MethodInvocation(1935)", "Delete SimpleName: start(1936)", "Delete InfixExpression: +(1937)", "Delete SimpleName: p(1938)", "Delete SimpleName: startCharInLine(1939)", "Delete MethodInvocation(1940)", "Delete SimpleName: start(1941)", "Delete InfixExpression: +(1942)", "Delete SimpleName: end(1943)", "Delete SimpleName: start(1944)", "Delete InfixExpression: -(1945)", "Delete MethodInvocation(1946)", "Delete ReturnStatement(1947)", "Delete Block(1948)", "Delete MethodDeclaration(1949)", "Delete TypeDeclaration: class(1950)"]}}], "commit_stats": [{"total_files": 3, "deleted_files": 2, "testing": "True", "maintenance": "False", "build": "False"}]}