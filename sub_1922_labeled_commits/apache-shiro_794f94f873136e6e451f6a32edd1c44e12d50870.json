{"application": "apache-shiro", "csha": "794f94f873136e6e451f6a32edd1c44e12d50870", "files": [{"Permission_cluster": {"actions": [{"root": "UPDATE from <p>It is important to understand a Permission instance only represents functionality or access - it does not grant it. to It is important to understand a Permission instance only represents functionality or access - it does not grant it.", "operations": ["UPD TextElement: <p>It is important to understand a Permission instance only represents functionality or access - it does not grant it. from <p>It is important to understand a Permission instance only represents functionality or access - it does not grant it. to It is important to understand a Permission instance only represents functionality or access - it does not grant it."]}, {"root": "UPDATE from <p>Most typical systems are what the Shiro team calls <em>role-based</em> in nature, where a role represents to Most typical systems are what the Shiro team calls <em>role-based</em> in nature, where a role represents", "operations": ["UPD TextElement: <p>Most typical systems are what the Shiro team calls <em>role-based</em> in nature, where a role represents from <p>Most typical systems are what the Shiro team calls <em>role-based</em> in nature, where a role represents to Most typical systems are what the Shiro team calls <em>role-based</em> in nature, where a role represents"]}, {"root": "UPDATE from <p>But if you have a dynamic security model, where roles can be created and deleted at runtime, you can't hard-code to But if you have a dynamic security model, where roles can be created and deleted at runtime, you can't hard-code", "operations": ["UPD TextElement: <p>But if you have a dynamic security model, where roles can be created and deleted at runtime, you can't hard-code from <p>But if you have a dynamic security model, where roles can be created and deleted at runtime, you can't hard-code to But if you have a dynamic security model, where roles can be created and deleted at runtime, you can't hard-code"]}, {"root": "UPDATE from <p>Under this paradigm, permissions are immutable and reflect an application's raw functionality to Under this paradigm, permissions are immutable and reflect an application's raw functionality", "operations": ["UPD TextElement: <p>Under this paradigm, permissions are immutable and reflect an application's raw functionality from <p>Under this paradigm, permissions are immutable and reflect an application's raw functionality to Under this paradigm, permissions are immutable and reflect an application's raw functionality"]}, {"root": "UPDATE from to be dynamic: because Permission classes represent raw functionality and only change when the application's to to be dynamic: because Permissions represent raw functionality and only change when the application's", "operations": ["UPD TextElement: to be dynamic: because Permission classes represent raw functionality and only change when the application's from to be dynamic: because Permission classes represent raw functionality and only change when the application's to to be dynamic: because Permissions represent raw functionality and only change when the application's"]}, {"root": "UPDATE from <p>Most applications do this by associating a named role with permissions (i.e. a role 'has a' collection of to Most applications do this by associating a named role with permissions (i.e. a role 'has a' collection of", "operations": ["UPD TextElement: <p>Most applications do this by associating a named role with permissions (i.e. a role 'has a' collection of from <p>Most applications do this by associating a named role with permissions (i.e. a role 'has a' collection of to Most applications do this by associating a named role with permissions (i.e. a role 'has a' collection of"]}, {"root": "UPDATE from <p>A benefit to Shiro is that, although it assumes most systems are based on these types of static role or to A benefit to Shiro is that, although it assumes most systems are based on these types of static role or", "operations": ["UPD TextElement: <p>A benefit to Shiro is that, although it assumes most systems are based on these types of static role or from <p>A benefit to Shiro is that, although it assumes most systems are based on these types of static role or to A benefit to Shiro is that, although it assumes most systems are based on these types of static role or"]}, {"root": "UPDATE from  implementations, and only those implementatons to  implementations, and only those", "operations": ["UPD TextElement:  implementations, and only those implementatons from  implementations, and only those implementatons to  implementations, and only those"]}, {"root": "UPDATE from really determine how a user 'has' a permission or not.  The Realm could use the semantics described here, or it to implementations really determine how a user 'has' a permission or not.  The Realm could use the semantics described", "operations": ["UPD TextElement: really determine how a user 'has' a permission or not.  The Realm could use the semantics described here, or it from really determine how a user 'has' a permission or not.  The Realm could use the semantics described here, or it to implementations really determine how a user 'has' a permission or not.  The Realm could use the semantics described"]}, {"root": "UPDATE from could utilize some other mechanism entirely - it is always up to the application developer. to here, or it could utilize some other mechanism entirely - it is always up to the application developer.", "operations": ["UPD TextElement: could utilize some other mechanism entirely - it is always up to the application developer. from could utilize some other mechanism entirely - it is always up to the application developer. to here, or it could utilize some other mechanism entirely - it is always up to the application developer."]}, {"root": "UPDATE from <p>Shiro provides a very powerful default implementation of this interface in the form of the to Shiro provides a very powerful default implementation of this interface in the form of the", "operations": ["UPD TextElement: <p>Shiro provides a very powerful default implementation of this interface in the form of the from <p>Shiro provides a very powerful default implementation of this interface in the form of the to Shiro provides a very powerful default implementation of this interface in the form of the"]}, {"root": "INS TextElement: Returns  to TagElement at 0", "operations": ["INS TextElement: Returns  to TagElement at 0"]}, {"root": "INS TagElement: @code to TagElement at 1", "operations": ["INS TagElement: @code to TagElement at 1", "INS TextElement:  true to TagElement: @code at 0"]}, {"root": "UPDATE from  <tt>true</tt> if this current instance <em>implies</em> all the functionality and/or resource access to  if this current instance <em>implies</em> all the functionality and/or resource access", "operations": ["UPD TextElement:  <tt>true</tt> if this current instance <em>implies</em> all the functionality and/or resource access from  <tt>true</tt> if this current instance <em>implies</em> all the functionality and/or resource access to  if this current instance <em>implies</em> all the functionality and/or resource access", "UPD TextElement: Returns <tt>true</tt> if this current instance <em>implies</em> all the functionality and/or resource access from Returns <tt>true</tt> if this current instance <em>implies</em> all the functionality and/or resource access to  if this current instance <em>implies</em> all the functionality and/or resource access"]}, {"root": "UPDATE from described by the specified <tt>Permission</tt> argument, <tt>false</tt> otherwise. to described by the specified ", "operations": ["UPD TextElement: described by the specified <tt>Permission</tt> argument, <tt>false</tt> otherwise. from described by the specified <tt>Permission</tt> argument, <tt>false</tt> otherwise. to described by the specified ", "UPD TextElement: described by the specified <tt>Permission</tt> argument, <tt>false</tt> otherwise. from described by the specified <tt>Permission</tt> argument, <tt>false</tt> otherwise. to described by the specified "]}, {"root": "INS TagElement: @code to TagElement at 4", "operations": ["INS TextElement:  Permission to TagElement: @code at 0", "INS TagElement: @code to TagElement at 4"]}, {"root": "INS TextElement:  argument,  to TagElement at 5", "operations": ["INS TextElement:  argument,  to TagElement at 5"]}, {"root": "INS TagElement: @code to TagElement at 6", "operations": ["INS TextElement:  false to TagElement: @code at 0", "INS TagElement: @code to TagElement at 6"]}, {"root": "INS TextElement:  otherwise. to TagElement at 7", "operations": ["INS TextElement:  otherwise. to TagElement at 7"]}, {"root": "UPDATE from and/or resource access described by the given <tt>Permission</tt> argument.  Yet another way of saying this to and/or resource access described by the given ", "operations": ["UPD TextElement: and/or resource access described by the given <tt>Permission</tt> argument.  Yet another way of saying this from and/or resource access described by the given <tt>Permission</tt> argument.  Yet another way of saying this to and/or resource access described by the given "]}, {"root": "INS TagElement: @code to TagElement at 11", "operations": ["INS TagElement: @code to TagElement at 11", "INS TextElement:  Permission to TagElement: @code at 0"]}, {"root": "INS TextElement:  argument.  Yet another way of saying this to TagElement at 12", "operations": ["INS TextElement:  argument.  Yet another way of saying this to TagElement at 12"]}, {"root": "UPDATE from <p>If &quot;permission1 implies permission2&quot;, (i.e. <code>permission1.implies( permission2 ) )</code>, to <p>If &quot;permission1 implies permission2&quot;, i.e. <code>permission1.implies(permission2)</code> ,", "operations": ["UPD TextElement: <p>If &quot;permission1 implies permission2&quot;, (i.e. <code>permission1.implies( permission2 ) )</code>, from <p>If &quot;permission1 implies permission2&quot;, (i.e. <code>permission1.implies( permission2 ) )</code>, to <p>If &quot;permission1 implies permission2&quot;, i.e. <code>permission1.implies(permission2)</code> ,"]}, {"root": "INS TextElement: then any Subject granted  to TagElement at 16", "operations": ["INS TextElement: then any Subject granted  to TagElement at 16"]}, {"root": "INS TagElement: @code to TagElement at 17", "operations": ["INS TextElement:  permission1 to TagElement: @code at 0", "INS TagElement: @code to TagElement at 17"]}, {"root": "UPDATE from then any Subject granted <tt>permission1</tt> would have ability greater than or equal to that defined by to  would have ability greater than or equal to that defined by", "operations": ["UPD TextElement: then any Subject granted <tt>permission1</tt> would have ability greater than or equal to that defined by from then any Subject granted <tt>permission1</tt> would have ability greater than or equal to that defined by to  would have ability greater than or equal to that defined by"]}, {"root": "INS TagElement: @code to TagElement at 19", "operations": ["INS TagElement: @code to TagElement at 19"]}, {"root": "INS TextElement: . to TagElement at 20", "operations": ["INS TextElement: . to TagElement at 20"]}, {"root": "INS TextElement:   to TagElement: @return at 0", "operations": ["INS TextElement:   to TagElement: @return at 0"]}, {"root": "INS TagElement: @code to TagElement: @return at 1", "operations": ["INS TagElement: @code to TagElement: @return at 1", "INS TextElement:  true to TagElement: @code at 0"]}, {"root": "INS TagElement: @code to TagElement: @return at 4", "operations": ["INS TagElement: @code to TagElement: @return at 4", "INS TextElement:  Permission to TagElement: @code at 0"]}, {"root": "INS TextElement:  argument,  to TagElement: @return at 5", "operations": ["INS TextElement:  argument,  to TagElement: @return at 5"]}, {"root": "INS TagElement: @code to TagElement: @return at 6", "operations": ["INS TextElement:  false to TagElement: @code at 0", "INS TagElement: @code to TagElement: @return at 6"]}, {"root": "INS TextElement:  otherwise. to TagElement: @return at 7", "operations": ["INS TextElement:  otherwise. to TagElement: @return at 7"]}, {"root": "UPDATE from <tt>permission2</tt>. to  permission2", "operations": ["UPD TextElement: <tt>permission2</tt>. from <tt>permission2</tt>. to  permission2"]}, {"root": "MOVE from TagElement: @code", "operations": ["MOV TextElement: <tt>permission2</tt>. to TagElement: @code at 0"]}]}}, {"Permission_diff": {"operations": ["Update TextElement: <p>It is important to understand a Permission instance only represents functionality or access - it does not grant it.(6) to It is important to understand a Permission instance only represents functionality or access - it does not grant it.", "Update TextElement: <p>Most typical systems are what the Shiro team calls <em>role-based</em> in nature, where a role represents(10) to Most typical systems are what the Shiro team calls <em>role-based</em> in nature, where a role represents", "Update TextElement: <p>But if you have a dynamic security model, where roles can be created and deleted at runtime, you can't hard-code(14) to But if you have a dynamic security model, where roles can be created and deleted at runtime, you can't hard-code", "Update TextElement: <p>Under this paradigm, permissions are immutable and reflect an application's raw functionality(18) to Under this paradigm, permissions are immutable and reflect an application's raw functionality", "Update TextElement: to be dynamic: because Permission classes represent raw functionality and only change when the application's(20) to to be dynamic: because Permissions represent raw functionality and only change when the application's", "Update TextElement: <p>Most applications do this by associating a named role with permissions (i.e. a role 'has a' collection of(25) to Most applications do this by associating a named role with permissions (i.e. a role 'has a' collection of", "Update TextElement: <p>A benefit to Shiro is that, although it assumes most systems are based on these types of static role or(33) to A benefit to Shiro is that, although it assumes most systems are based on these types of static role or", "Update TextElement:  implementations, and only those implementatons(38) to  implementations, and only those", "Update TextElement: really determine how a user 'has' a permission or not.  The Realm could use the semantics described here, or it(39) to implementations really determine how a user 'has' a permission or not.  The Realm could use the semantics described", "Update TextElement: could utilize some other mechanism entirely - it is always up to the application developer.(40) to here, or it could utilize some other mechanism entirely - it is always up to the application developer.", "Update TextElement: <p>Shiro provides a very powerful default implementation of this interface in the form of the(42) to Shiro provides a very powerful default implementation of this interface in the form of the", "Insert TextElement: Returns (59) into TagElement(86) at 0", "Insert TagElement: @code(61) into TagElement(86) at 1", "Update TextElement: Returns <tt>true</tt> if this current instance <em>implies</em> all the functionality and/or resource access(59) to  if this current instance <em>implies</em> all the functionality and/or resource access", "Update TextElement: described by the specified <tt>Permission</tt> argument, <tt>false</tt> otherwise.(60) to described by the specified ", "Insert TagElement: @code(65) into TagElement(86) at 4", "Insert TextElement:  argument, (66) into TagElement(86) at 5", "Insert TagElement: @code(68) into TagElement(86) at 6", "Insert TextElement:  otherwise.(69) into TagElement(86) at 7", "Update TextElement: and/or resource access described by the given <tt>Permission</tt> argument.  Yet another way of saying this(63) to and/or resource access described by the given ", "Insert TagElement: @code(74) into TagElement(86) at 11", "Insert TextElement:  argument.  Yet another way of saying this(75) into TagElement(86) at 12", "Update TextElement: <p>If &quot;permission1 implies permission2&quot;, (i.e. <code>permission1.implies( permission2 ) )</code>,(66) to <p>If &quot;permission1 implies permission2&quot;, i.e. <code>permission1.implies(permission2)</code> ,", "Insert TextElement: then any Subject granted (79) into TagElement(86) at 16", "Insert TagElement: @code(81) into TagElement(86) at 17", "Update TextElement: then any Subject granted <tt>permission1</tt> would have ability greater than or equal to that defined by(67) to  would have ability greater than or equal to that defined by", "Insert TagElement: @code(84) into TagElement(86) at 19", "Insert TextElement: .(85) into TagElement(86) at 20", "Insert TextElement:  (90) into TagElement: @return(101) at 0", "Insert TagElement: @code(92) into TagElement: @return(101) at 1", "Update TextElement:  <tt>true</tt> if this current instance <em>implies</em> all the functionality and/or resource access(73) to  if this current instance <em>implies</em> all the functionality and/or resource access", "Update TextElement: described by the specified <tt>Permission</tt> argument, <tt>false</tt> otherwise.(74) to described by the specified ", "Insert TagElement: @code(96) into TagElement: @return(101) at 4", "Insert TextElement:  argument, (97) into TagElement: @return(101) at 5", "Insert TagElement: @code(99) into TagElement: @return(101) at 6", "Insert TextElement:  otherwise.(100) into TagElement: @return(101) at 7", "Insert TextElement:  true(60) into TagElement: @code(61) at 0", "Insert TextElement:  Permission(64) into TagElement: @code(65) at 0", "Insert TextElement:  false(67) into TagElement: @code(68) at 0", "Insert TextElement:  Permission(73) into TagElement: @code(74) at 0", "Insert TextElement:  permission1(80) into TagElement: @code(81) at 0", "Update TextElement: <tt>permission2</tt>.(68) to  permission2", "Move TextElement: <tt>permission2</tt>.(68) into TagElement: @code(84) at 0", "Insert TextElement:  true(91) into TagElement: @code(92) at 0", "Insert TextElement:  Permission(95) into TagElement: @code(96) at 0", "Insert TextElement:  false(98) into TagElement: @code(99) at 0"]}}, {"Session_cluster": {"actions": [{"root": "UPDATE from  implementations. Good candiadates for such to  implementations. Good candidates for such", "operations": ["UPD TextElement:  implementations. Good candiadates for such from  implementations. Good candiadates for such to  implementations. Good candidates for such"]}]}}, {"Session_diff": {"operations": ["Update TextElement:  implementations. Good candiadates for such(43) to  implementations. Good candidates for such"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}