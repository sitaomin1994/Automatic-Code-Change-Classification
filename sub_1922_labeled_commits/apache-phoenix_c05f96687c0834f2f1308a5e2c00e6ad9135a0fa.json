{"application": "apache-phoenix", "csha": "c05f96687c0834f2f1308a5e2c00e6ad9135a0fa", "files": [{"GroupByCaseIT_cluster": {"actions": [{"root": "UPDATE from BaseClientManagedTimeIT to BaseHBaseManagedTimeIT", "operations": ["UPD SimpleName: BaseClientManagedTimeIT from BaseClientManagedTimeIT to BaseHBaseManagedTimeIT", "UPD SimpleType: BaseClientManagedTimeIT from BaseClientManagedTimeIT to BaseHBaseManagedTimeIT"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS SimpleName: setInt to MethodInvocation at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ExpressionStatement to Block at 24", "INS ExpressionStatement to Block at 23", "INS SimpleName: conn to MethodInvocation at 0", "INS NumberLiteral: 2000 to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS NumberLiteral: 1 to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: query to VariableDeclarationFragment at 0", "INS StringLiteral: \"UPSERT INTO tgb_counter VALUES(?,?,?,?,?)\" to VariableDeclarationFragment at 1", "INS SimpleName: getInt to MethodInvocation at 1", "INS SimpleName: getString to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 2", "INS ExpressionStatement to Block at 27", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: stmt to MethodInvocation at 0", "INS NumberLiteral: 4 to MethodInvocation at 2", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS ExpressionStatement to Block at 4", "INS MethodInvocation to MethodInvocation at 2", "INS Block to MethodDeclaration at 5", "INS StringLiteral: \"bbb\" to MethodInvocation at 3", "INS SimpleName: rs to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS NumberLiteral: 5 to MethodInvocation at 2", "INS NumberLiteral: 3 to MethodInvocation at 2", "INS ExpressionStatement to Block at 15", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS ExpressionStatement to Block at 10", "INS SimpleName: createTestTable to MethodInvocation at 0", "INS ExpressionStatement to Block at 16", "INS NumberLiteral: 4 to MethodInvocation at 2", "INS NumberLiteral: 1000 to MethodInvocation at 1", "INS ExpressionStatement to Block at 31", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: stmt to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 3 to MethodInvocation at 2", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS SimpleName: stmt to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS SimpleName: setInt to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS NumberLiteral: 2000 to MethodInvocation at 3", "INS StringLiteral: \"aaa\" to MethodInvocation at 1", "INS SimpleName: commit to MethodInvocation at 1", "INS SimpleName: setInt to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: assertFalse to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: ddl to MethodInvocation at 2", "INS ExpressionStatement to Block at 12", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 2 to MethodInvocation at 3", "INS NumberLiteral: 2 to MethodInvocation at 1", "INS NumberLiteral: 1 to MethodInvocation at 3", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleName: stmt to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ExpressionStatement to Block at 28", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \" FROM tgb_counter GROUP BY tgb_id, tgb_name, utc_epoch_hour\" to InfixExpression: + at 1", "INS ExpressionStatement to Block at 19", "INS ExpressionStatement to Block at 26", "INS NumberLiteral: 2 to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS ExpressionStatement to Block at 32", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: getInt to MethodInvocation at 1", "INS ExpressionStatement to Block at 13", "INS VariableDeclarationStatement to Block at 20", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: stmt to MethodInvocation at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: dml to VariableDeclarationFragment at 0", "INS NumberLiteral: 4 to MethodInvocation at 2", "INS SimpleName: stmt to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getUrl to MethodInvocation at 0", "INS ExpressionStatement to Block at 9", "INS StringLiteral: \"aaa\" to MethodInvocation at 3", "INS SimpleName: setInt to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: close to MethodInvocation at 1", "INS NumberLiteral: 1 to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: stmt to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: setString to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS StringLiteral: \"SELECT tgb_id, tgb_name, (utc_date_epoch/10)*10 AS utc_epoch_hour,SUM(ack_success_count + ack_success_one_ack_count) AS ack_tx_sum\" to InfixExpression: + at 0", "INS SimpleName: stmt to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 5", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS StringLiteral: \" create table tgb_counter(tgb_id integer NOT NULL,utc_date_epoch integer NOT NULL,tgb_name varchar(40),ack_success_count integer\" to InfixExpression: + at 0", "INS ExpressionStatement to Block at 29", "INS SimpleName: setInt to MethodInvocation at 1", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: setInt to MethodInvocation at 1", "INS SimpleName: testExpressionInGroupBy to MethodDeclaration at 3", "INS ExpressionStatement to Block at 18", "INS SimpleName: stmt to MethodInvocation at 0", "INS NumberLiteral: 4 to MethodInvocation at 1", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"bbb\" to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 3", "INS ExpressionStatement to Block at 17", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: ResultSet to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 11", "INS SimpleName: stmt to MethodInvocation at 0", "INS NumberLiteral: 3 to MethodInvocation at 2", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS ExpressionStatement to Block at 7", "INS SimpleName: ddl to VariableDeclarationFragment at 0", "INS SimpleName: setString to MethodInvocation at 1", "INS SimpleName: rs to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: getInt to MethodInvocation at 1", "INS NumberLiteral: 1 to MethodInvocation at 3", "INS NumberLiteral: 2 to MethodInvocation at 3", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: setInt to MethodInvocation at 1", "INS ExpressionStatement to Block at 33", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 3 to MethodInvocation at 2", "INS ExpressionStatement to Block at 30", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: stmt to MethodInvocation at 0", "INS SimpleName: getInt to MethodInvocation at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS NumberLiteral: 5 to MethodInvocation at 2", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 22", "INS ExpressionStatement to Block at 14", "INS SimpleName: next to MethodInvocation at 1", "INS SimpleName: Test to MarkerAnnotation at 0", "INS SimpleName: rs to MethodInvocation at 0", "INS StringLiteral: \",ack_success_one_ack_count integer, CONSTRAINT pk_tgb_counter PRIMARY KEY(tgb_id, utc_date_epoch))\" to InfixExpression: + at 1", "INS SimpleName: close to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS SimpleName: testGroupByCase to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS SimpleName: initData to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: conn to MethodInvocation at 1"]}, {"root": "INS Modifier: static to FieldDeclaration at 1", "operations": ["INS Modifier: static to FieldDeclaration at 1"]}, {"root": "INS Modifier: static to MethodDeclaration at 1", "operations": ["INS Modifier: static to MethodDeclaration at 1"]}, {"root": "UPDATE from loadData to initData", "operations": ["UPD SimpleName: loadData from loadData to initData", "UPD SimpleName: loadData from loadData to initData", "UPD SimpleName: loadData from loadData to initData"]}, {"root": "INS Modifier: static to MethodDeclaration at 1", "operations": ["INS Modifier: static to MethodDeclaration at 1"]}, {"root": "UPDATE from private to public", "operations": ["UPD Modifier: private from private to public"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: private to MethodDeclaration at 1", "MOV SimpleType: Exception to MethodDeclaration at 4", "MOV PrimitiveType: long to MethodDeclaration at 2"]}, {"root": "UPDATE from long to void", "operations": ["UPD PrimitiveType: long from long to void"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 8", "MOV ExpressionStatement to Block at 12", "MOV ExpressionStatement to Block at 14", "MOV ExpressionStatement to Block at 10", "MOV ExpressionStatement to Block at 22", "MOV ExpressionStatement to Block at 6", "MOV ExpressionStatement to Block at 18", "MOV ExpressionStatement to Block at 16", "MOV ExpressionStatement to Block at 20"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: Exception to MethodDeclaration at 4"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Connection to SingleVariableDeclaration at 0", "MOV SimpleName: conn to SingleVariableDeclaration at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 8", "MOV VariableDeclarationStatement to Block at 6"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 21"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 6", "MOV ExpressionStatement to Block at 3", "MOV TryStatement to Block at 5", "MOV ExpressionStatement to Block at 25", "MOV ExpressionStatement to Block at 4"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1", "MOV SimpleType: PreparedStatement to VariableDeclarationStatement at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from Long to ensureTableCreated", "operations": ["UPD SimpleName: Long from Long to ensureTableCreated"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toString to MethodInvocation at 2", "MOV SimpleName: Long to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 1"]}, {"root": "UPDATE from toString to GROUPBYTEST_NAME", "operations": ["UPD SimpleName: toString from toString to GROUPBYTEST_NAME"]}, {"root": "UPDATE from ts to stmt", "operations": ["UPD SimpleName: ts from ts to stmt", "UPD SimpleName: ensureTableCreated from ensureTableCreated to stmt"]}, {"root": "UPDATE from GROUPBYTEST_NAME to setInt", "operations": ["UPD SimpleName: GROUPBYTEST_NAME from GROUPBYTEST_NAME to setInt"]}, {"root": "INS NumberLiteral: 2 to MethodInvocation at 2", "operations": ["INS NumberLiteral: 2 to MethodInvocation at 2"]}, {"root": "INS NumberLiteral: 1000 to MethodInvocation at 3", "operations": ["INS NumberLiteral: 1000 to MethodInvocation at 3"]}, {"root": "UPDATE from SQLException to ResultSet", "operations": ["UPD SimpleName: SQLException from SQLException to ResultSet"]}, {"root": "MOVE from SimpleType: ResultSet", "operations": ["MOV SimpleName: SQLException to SimpleType: ResultSet at 0"]}, {"root": "UPDATE from toString to rs", "operations": ["UPD SimpleName: toString from toString to rs", "UPD SimpleName: gbt from gbt to rs", "UPD SimpleName: st from st to rs", "UPD SimpleName: props from props to rs", "UPD SimpleName: st from st to rs", "UPD SimpleName: loadData from loadData to rs"]}, {"root": "UPDATE from gbt to assertEquals", "operations": ["UPD SimpleName: gbt from gbt to assertEquals", "UPD SimpleName: Long from Long to assertEquals"]}, {"root": "INS NumberLiteral: 2 to MethodInvocation at 1", "operations": ["INS NumberLiteral: 2 to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS NumberLiteral: 4 to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toString to MethodInvocation at 0", "MOV SimpleName: Long to MethodInvocation at 0"]}, {"root": "UPDATE from ts to conn", "operations": ["UPD SimpleName: ts from ts to conn", "UPD SimpleName: nextTimestamp from nextTimestamp to conn", "UPD SimpleName: ts from ts to conn"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: conn to MethodInvocation at 0"]}, {"root": "INS SimpleName: prepareStatement to MethodInvocation at 1", "operations": ["INS SimpleName: prepareStatement to MethodInvocation at 1"]}, {"root": "INS SimpleName: dml to MethodInvocation at 2", "operations": ["INS SimpleName: dml to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS SimpleName: executeQuery to MethodInvocation at 1", "operations": ["INS SimpleName: executeQuery to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: executeQuery to MethodInvocation at 1", "MOV SimpleName: st to MethodInvocation at 0"]}, {"root": "UPDATE from setProperty to next", "operations": ["UPD SimpleName: setProperty from setProperty to next", "UPD SimpleName: executeQuery from executeQuery to next"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: gbt to MethodInvocation at 0", "MOV SimpleName: createTable to MethodInvocation at 1"]}, {"root": "UPDATE from createTable to getInt", "operations": ["UPD SimpleName: createTable from createTable to getInt", "UPD SimpleName: ts from ts to getInt"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: loadData to MethodInvocation at 0", "MOV SimpleName: ts to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: props to MethodInvocation at 0", "MOV SimpleName: setProperty to MethodInvocation at 1"]}, {"root": "UPDATE from gbt to createStatement", "operations": ["UPD SimpleName: gbt from gbt to createStatement", "UPD SimpleName: prepareStatement from prepareStatement to createStatement", "UPD SimpleName: gbt from gbt to createStatement", "UPD SimpleName: gbt from gbt to createStatement"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: gbt to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: gbt to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: prepareStatement to MethodInvocation at 1", "MOV SimpleName: conn to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: conn to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: gbt to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.phoenix.util.PhoenixRuntime"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: ts", "DEL MethodDeclaration", "DEL SimpleName: createTable", "DEL ReturnStatement", "DEL Block"]}, {"root": "DEL PrimitiveType: long", "operations": ["DEL PrimitiveType: long"]}, {"root": "DEL SimpleName: ts", "operations": ["DEL SimpleName: ts"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: ts", "DEL SimpleName: props", "DEL SimpleName: setProperty", "DEL QualifiedName: PhoenixRuntime.CURRENT_SCN_ATTRIB", "DEL MethodInvocation"]}, {"root": "DEL PrimitiveType: long", "operations": ["DEL PrimitiveType: long"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL InfixExpression: -", "operations": ["DEL InfixExpression: -", "DEL SimpleName: ts", "DEL NumberLiteral: 2"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: GroupByCaseIT", "DEL VariableDeclarationStatement", "DEL SimpleType: GroupByCaseIT", "DEL SimpleName: gbt", "DEL ClassInstanceCreation", "DEL SimpleName: GroupByCaseIT", "DEL VariableDeclarationFragment", "DEL SimpleName: GroupByCaseIT"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: gbt", "DEL SimpleName: ts", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: createTable", "DEL PrimitiveType: long"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: Long", "DEL SimpleName: toString", "DEL MethodInvocation", "DEL SimpleName: props", "DEL ExpressionStatement", "DEL QualifiedName: PhoenixRuntime.CURRENT_SCN_ATTRIB", "DEL InfixExpression: +", "DEL SimpleName: ts", "DEL NumberLiteral: 1", "DEL SimpleName: setProperty"]}, {"root": "DEL SimpleName: gbt", "operations": ["DEL SimpleName: gbt"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: GroupByCaseIT", "DEL VariableDeclarationStatement", "DEL SimpleType: GroupByCaseIT", "DEL SimpleName: gbt", "DEL SimpleType: GroupByCaseIT", "DEL VariableDeclarationFragment", "DEL SimpleName: GroupByCaseIT", "DEL ClassInstanceCreation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: ts", "DEL SimpleName: gbt", "DEL PrimitiveType: long", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: createTable"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: setProperty", "DEL NumberLiteral: 1", "DEL SimpleName: ts", "DEL SimpleName: Long", "DEL SimpleName: props", "DEL MethodInvocation", "DEL SimpleName: toString", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL QualifiedName: PhoenixRuntime.CURRENT_SCN_ATTRIB", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: gbt", "operations": ["DEL SimpleName: gbt"]}, {"root": "DEL SimpleName: conn", "operations": ["DEL SimpleName: conn"]}, {"root": "DEL SimpleName: conn", "operations": ["DEL SimpleName: conn"]}, {"root": "DEL SimpleName: conn", "operations": ["DEL SimpleName: conn"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL PrimitiveType: void", "DEL SimpleType: SQLException", "DEL MemberValuePair", "DEL MemberValuePair", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"RV_RETURN_VALUE_IGNORED\"", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"Test code.\"", "DEL NormalAnnotation", "DEL SimpleName: query", "DEL QualifiedName: edu.umd.cs.findbugs.annotations.SuppressWarnings", "DEL SimpleName: executeQuery", "DEL SimpleName: value", "DEL SimpleName: justification", "DEL Modifier: private", "DEL MethodDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: GroupByCaseIT", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL ClassInstanceCreation", "DEL SimpleName: ts", "DEL MethodInvocation", "DEL SimpleName: GroupByCaseIT", "DEL SimpleName: gbt", "DEL Block", "DEL PrimitiveType: void", "DEL SimpleName: testGroupByCase", "DEL SimpleName: GroupByCaseIT", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: ts", "DEL VariableDeclarationFragment", "DEL PrimitiveType: long", "DEL Modifier: public", "DEL NumberLiteral: 1", "DEL SimpleType: GroupByCaseIT", "DEL QualifiedName: PhoenixRuntime.CURRENT_SCN_ATTRIB"]}]}}, {"GroupByCaseIT_diff": {"operations": ["Update SimpleType: BaseClientManagedTimeIT(37) to BaseHBaseManagedTimeIT", "Insert MethodDeclaration(454) into TypeDeclaration: class(783) at 9", "Insert MethodDeclaration(782) into TypeDeclaration: class(783) at 12", "Update SimpleName: BaseClientManagedTimeIT(36) to BaseHBaseManagedTimeIT", "Insert Modifier: static(79) into FieldDeclaration(83) at 1", "Insert Modifier: static(85) into MethodDeclaration(157) at 1", "Update SimpleName: loadData(112) to initData", "Move SingleVariableDeclaration(580) into MethodDeclaration(157) at 4", "Insert Modifier: static(159) into MethodDeclaration(215) at 1", "Insert MarkerAnnotation(217) into MethodDeclaration(454) at 0", "Update Modifier: private(85) to public", "Move Modifier: private(85) into MethodDeclaration(454) at 1", "Update PrimitiveType: long(86) to void", "Move PrimitiveType: long(86) into MethodDeclaration(454) at 2", "Insert SimpleName: testExpressionInGroupBy(220) into MethodDeclaration(454) at 3", "Move SimpleType: Exception(89) into MethodDeclaration(454) at 4", "Insert Block(453) into MethodDeclaration(454) at 5", "Move ExpressionStatement(288) into Block(627) at 6", "Move ExpressionStatement(344) into Block(627) at 10", "Move ExpressionStatement(358) into Block(627) at 12", "Move ExpressionStatement(372) into Block(627) at 14", "Move ExpressionStatement(386) into Block(627) at 16", "Move ExpressionStatement(400) into Block(627) at 18", "Move ExpressionStatement(414) into Block(627) at 20", "Move ExpressionStatement(428) into Block(627) at 22", "Move ExpressionStatement(442) into Block(627) at 8", "Move ExpressionStatement(489) into Block(703) at 6", "Move MarkerAnnotation(603) into MethodDeclaration(782) at 0", "Insert Modifier: public(707) into MethodDeclaration(782) at 1", "Insert PrimitiveType: void(708) into MethodDeclaration(782) at 2", "Insert SimpleName: testGroupByCase(709) into MethodDeclaration(782) at 3", "Move SimpleType: Exception(608) into MethodDeclaration(782) at 4", "Insert Block(781) into MethodDeclaration(782) at 5", "Insert SimpleName: Test(216) into MarkerAnnotation(217) at 0", "Move VariableDeclarationStatement(126) into Block(453) at 0", "Move VariableDeclarationStatement(146) into Block(453) at 1", "Insert VariableDeclarationStatement(250) into Block(453) at 2", "Insert VariableDeclarationStatement(258) into Block(453) at 3", "Insert ExpressionStatement(264) into Block(453) at 4", "Insert VariableDeclarationStatement(270) into Block(453) at 5", "Move VariableDeclarationStatement(95) into Block(453) at 6", "Insert ExpressionStatement(285) into Block(453) at 7", "Move ExpressionStatement(105) into Block(453) at 8", "Insert ExpressionStatement(297) into Block(453) at 9", "Insert ExpressionStatement(303) into Block(453) at 10", "Insert ExpressionStatement(309) into Block(453) at 11", "Insert ExpressionStatement(313) into Block(453) at 12", "Insert ExpressionStatement(319) into Block(453) at 13", "Insert ExpressionStatement(325) into Block(453) at 14", "Insert ExpressionStatement(331) into Block(453) at 15", "Insert ExpressionStatement(337) into Block(453) at 16", "Insert ExpressionStatement(343) into Block(453) at 17", "Insert ExpressionStatement(347) into Block(453) at 18", "Insert ExpressionStatement(351) into Block(453) at 19", "Insert VariableDeclarationStatement(362) into Block(453) at 20", "Move ExpressionStatement(599) into Block(453) at 21", "Insert ExpressionStatement(376) into Block(453) at 22", "Insert ExpressionStatement(384) into Block(453) at 23", "Insert ExpressionStatement(392) into Block(453) at 24", "Move ExpressionStatement(628) into Block(453) at 25", "Insert ExpressionStatement(406) into Block(453) at 26", "Insert ExpressionStatement(414) into Block(453) at 27", "Insert ExpressionStatement(422) into Block(453) at 28", "Insert ExpressionStatement(430) into Block(453) at 29", "Insert ExpressionStatement(438) into Block(453) at 30", "Insert ExpressionStatement(444) into Block(453) at 31", "Insert ExpressionStatement(448) into Block(453) at 32", "Insert ExpressionStatement(452) into Block(453) at 33", "Move VariableDeclarationStatement(637) into Block(781) at 0", "Move VariableDeclarationStatement(659) into Block(781) at 1", "Insert ExpressionStatement(735) into Block(781) at 2", "Move ExpressionStatement(665) into Block(781) at 3", "Move ExpressionStatement(671) into Block(781) at 4", "Move TryStatement(697) into Block(781) at 5", "Move ExpressionStatement(701) into Block(781) at 6", "Insert MethodInvocation(98) into ExpressionStatement(99) at 0", "Insert SimpleType: String(244) into VariableDeclarationStatement(250) at 0", "Insert VariableDeclarationFragment(249) into VariableDeclarationStatement(250) at 1", "Insert SimpleType: String(252) into VariableDeclarationStatement(258) at 0", "Insert VariableDeclarationFragment(257) into VariableDeclarationStatement(258) at 1", "Insert MethodInvocation(263) into ExpressionStatement(264) at 0", "Move SimpleType: String(582) into VariableDeclarationStatement(270) at 0", "Insert VariableDeclarationFragment(269) into VariableDeclarationStatement(270) at 1", "Move SimpleType: PreparedStatement(588) into VariableDeclarationStatement(279) at 0", "Insert MethodInvocation(284) into ExpressionStatement(285) at 0", "Insert MethodInvocation(296) into ExpressionStatement(297) at 0", "Insert MethodInvocation(302) into ExpressionStatement(303) at 0", "Insert MethodInvocation(308) into ExpressionStatement(309) at 0", "Insert MethodInvocation(312) into ExpressionStatement(313) at 0", "Insert MethodInvocation(318) into ExpressionStatement(319) at 0", "Insert MethodInvocation(324) into ExpressionStatement(325) at 0", "Insert MethodInvocation(330) into ExpressionStatement(331) at 0", "Insert MethodInvocation(336) into ExpressionStatement(337) at 0", "Insert MethodInvocation(342) into ExpressionStatement(343) at 0", "Insert MethodInvocation(346) into ExpressionStatement(347) at 0", "Insert MethodInvocation(350) into ExpressionStatement(351) at 0", "Insert SimpleType: ResultSet(353) into VariableDeclarationStatement(362) at 0", "Move VariableDeclarationFragment(594) into VariableDeclarationStatement(362) at 1", "Insert MethodInvocation(367) into ExpressionStatement(368) at 0", "Insert MethodInvocation(375) into ExpressionStatement(376) at 0", "Insert MethodInvocation(383) into ExpressionStatement(384) at 0", "Insert MethodInvocation(391) into ExpressionStatement(392) at 0", "Insert MethodInvocation(405) into ExpressionStatement(406) at 0", "Insert MethodInvocation(413) into ExpressionStatement(414) at 0", "Insert MethodInvocation(421) into ExpressionStatement(422) at 0", "Insert MethodInvocation(429) into ExpressionStatement(430) at 0", "Insert MethodInvocation(437) into ExpressionStatement(438) at 0", "Insert MethodInvocation(443) into ExpressionStatement(444) at 0", "Insert MethodInvocation(447) into ExpressionStatement(448) at 0", "Insert MethodInvocation(451) into ExpressionStatement(452) at 0", "Insert MethodInvocation(734) into ExpressionStatement(735) at 0", "Update SimpleName: Long(130) to ensureTableCreated", "Move SimpleName: Long(130) into MethodInvocation(98) at 0", "Move MethodInvocation(98) into MethodInvocation(98) at 1", "Update SimpleName: toString(131) to GROUPBYTEST_NAME", "Move SimpleName: toString(131) into MethodInvocation(98) at 2", "Insert SimpleName: String(243) into SimpleType: String(244) at 0", "Insert SimpleName: ddl(245) into VariableDeclarationFragment(249) at 0", "Insert InfixExpression: +(248) into VariableDeclarationFragment(249) at 1", "Insert SimpleName: String(251) into SimpleType: String(252) at 0", "Insert SimpleName: query(253) into VariableDeclarationFragment(257) at 0", "Insert InfixExpression: +(256) into VariableDeclarationFragment(257) at 1", "Insert SimpleName: createTestTable(259) into MethodInvocation(263) at 0", "Insert MethodInvocation(261) into MethodInvocation(263) at 1", "Insert SimpleName: ddl(262) into MethodInvocation(263) at 2", "Insert SimpleName: dml(267) into VariableDeclarationFragment(269) at 0", "Insert StringLiteral: \"UPSERT INTO tgb_counter VALUES(?,?,?,?,?)\"(268) into VariableDeclarationFragment(269) at 1", "Update SimpleName: ts(91) to stmt", "Insert SimpleName: stmt(280) into MethodInvocation(284) at 0", "Insert SimpleName: setInt(281) into MethodInvocation(284) at 1", "Insert NumberLiteral: 1(282) into MethodInvocation(284) at 2", "Insert NumberLiteral: 1(283) into MethodInvocation(284) at 3", "Update SimpleName: ensureTableCreated(96) to stmt", "Update SimpleName: GROUPBYTEST_NAME(99) to setInt", "Insert NumberLiteral: 2(288) into MethodInvocation(290) at 2", "Insert NumberLiteral: 1000(289) into MethodInvocation(290) at 3", "Insert SimpleName: stmt(292) into MethodInvocation(296) at 0", "Insert SimpleName: setString(293) into MethodInvocation(296) at 1", "Insert NumberLiteral: 3(294) into MethodInvocation(296) at 2", "Insert StringLiteral: \"aaa\"(295) into MethodInvocation(296) at 3", "Insert SimpleName: stmt(298) into MethodInvocation(302) at 0", "Insert SimpleName: setInt(299) into MethodInvocation(302) at 1", "Insert NumberLiteral: 4(300) into MethodInvocation(302) at 2", "Insert NumberLiteral: 1(301) into MethodInvocation(302) at 3", "Insert SimpleName: stmt(304) into MethodInvocation(308) at 0", "Insert SimpleName: setInt(305) into MethodInvocation(308) at 1", "Insert NumberLiteral: 5(306) into MethodInvocation(308) at 2", "Insert NumberLiteral: 1(307) into MethodInvocation(308) at 3", "Insert SimpleName: stmt(310) into MethodInvocation(312) at 0", "Insert SimpleName: execute(311) into MethodInvocation(312) at 1", "Insert SimpleName: stmt(314) into MethodInvocation(318) at 0", "Insert SimpleName: setInt(315) into MethodInvocation(318) at 1", "Insert NumberLiteral: 1(316) into MethodInvocation(318) at 2", "Insert NumberLiteral: 2(317) into MethodInvocation(318) at 3", "Insert SimpleName: stmt(320) into MethodInvocation(324) at 0", "Insert SimpleName: setInt(321) into MethodInvocation(324) at 1", "Insert NumberLiteral: 2(322) into MethodInvocation(324) at 2", "Insert NumberLiteral: 2000(323) into MethodInvocation(324) at 3", "Insert SimpleName: stmt(326) into MethodInvocation(330) at 0", "Insert SimpleName: setString(327) into MethodInvocation(330) at 1", "Insert NumberLiteral: 3(328) into MethodInvocation(330) at 2", "Insert StringLiteral: \"bbb\"(329) into MethodInvocation(330) at 3", "Insert SimpleName: stmt(332) into MethodInvocation(336) at 0", "Insert SimpleName: setInt(333) into MethodInvocation(336) at 1", "Insert NumberLiteral: 4(334) into MethodInvocation(336) at 2", "Insert NumberLiteral: 2(335) into MethodInvocation(336) at 3", "Insert SimpleName: stmt(338) into MethodInvocation(342) at 0", "Insert SimpleName: setInt(339) into MethodInvocation(342) at 1", "Insert NumberLiteral: 5(340) into MethodInvocation(342) at 2", "Insert NumberLiteral: 2(341) into MethodInvocation(342) at 3", "Insert SimpleName: stmt(344) into MethodInvocation(346) at 0", "Insert SimpleName: execute(345) into MethodInvocation(346) at 1", "Insert SimpleName: conn(348) into MethodInvocation(350) at 0", "Insert SimpleName: commit(349) into MethodInvocation(350) at 1", "Update SimpleName: SQLException(585) to ResultSet", "Move SimpleName: SQLException(585) into SimpleType: ResultSet(353) at 0", "Update SimpleName: st(589) to rs", "Insert SimpleName: assertTrue(363) into MethodInvocation(367) at 0", "Insert MethodInvocation(366) into MethodInvocation(367) at 1", "Insert SimpleName: assertEquals(369) into MethodInvocation(375) at 0", "Insert NumberLiteral: 1(370) into MethodInvocation(375) at 1", "Insert MethodInvocation(374) into MethodInvocation(375) at 2", "Insert SimpleName: assertEquals(377) into MethodInvocation(383) at 0", "Insert StringLiteral: \"aaa\"(378) into MethodInvocation(383) at 1", "Insert MethodInvocation(382) into MethodInvocation(383) at 2", "Insert SimpleName: assertEquals(385) into MethodInvocation(391) at 0", "Insert NumberLiteral: 1000(386) into MethodInvocation(391) at 1", "Insert MethodInvocation(390) into MethodInvocation(391) at 2", "Update SimpleName: gbt(624) to assertEquals", "Insert NumberLiteral: 2(394) into MethodInvocation(399) at 1", "Insert MethodInvocation(398) into MethodInvocation(399) at 2", "Insert SimpleName: assertTrue(401) into MethodInvocation(405) at 0", "Insert MethodInvocation(404) into MethodInvocation(405) at 1", "Update SimpleName: Long(641) to assertEquals", "Move SimpleName: Long(641) into MethodInvocation(413) at 0", "Insert NumberLiteral: 2(408) into MethodInvocation(413) at 1", "Insert MethodInvocation(412) into MethodInvocation(413) at 2", "Insert SimpleName: assertEquals(415) into MethodInvocation(421) at 0", "Insert StringLiteral: \"bbb\"(416) into MethodInvocation(421) at 1", "Insert MethodInvocation(420) into MethodInvocation(421) at 2", "Insert SimpleName: assertEquals(423) into MethodInvocation(429) at 0", "Insert NumberLiteral: 2000(424) into MethodInvocation(429) at 1", "Insert MethodInvocation(428) into MethodInvocation(429) at 2", "Insert SimpleName: assertEquals(431) into MethodInvocation(437) at 0", "Insert NumberLiteral: 4(432) into MethodInvocation(437) at 1", "Insert MethodInvocation(436) into MethodInvocation(437) at 2", "Insert SimpleName: assertFalse(439) into MethodInvocation(443) at 0", "Insert MethodInvocation(442) into MethodInvocation(443) at 1", "Insert SimpleName: rs(445) into MethodInvocation(447) at 0", "Insert SimpleName: close(446) into MethodInvocation(447) at 1", "Insert SimpleName: conn(449) into MethodInvocation(451) at 0", "Insert SimpleName: close(450) into MethodInvocation(451) at 1", "Update SimpleName: loadData(285) to initData", "Update SimpleName: ts(286) to conn", "Update SimpleName: loadData(486) to initData", "Update SimpleName: ts(487) to conn", "Insert SimpleName: initData(732) into MethodInvocation(734) at 0", "Insert SimpleName: conn(733) into MethodInvocation(734) at 1", "Insert MethodInvocation(738) into MethodInvocation(741) at 0", "Insert MethodInvocation(745) into MethodInvocation(748) at 0", "Insert StringLiteral: \" create table tgb_counter(tgb_id integer NOT NULL,utc_date_epoch integer NOT NULL,tgb_name varchar(40),ack_success_count integer\"(246) into InfixExpression: +(248) at 0", "Insert StringLiteral: \",ack_success_one_ack_count integer, CONSTRAINT pk_tgb_counter PRIMARY KEY(tgb_id, utc_date_epoch))\"(247) into InfixExpression: +(248) at 1", "Insert StringLiteral: \"SELECT tgb_id, tgb_name, (utc_date_epoch/10)*10 AS utc_epoch_hour,SUM(ack_success_count + ack_success_one_ack_count) AS ack_tx_sum\"(254) into InfixExpression: +(256) at 0", "Insert StringLiteral: \" FROM tgb_counter GROUP BY tgb_id, tgb_name, utc_epoch_hour\"(255) into InfixExpression: +(256) at 1", "Insert SimpleName: getUrl(260) into MethodInvocation(261) at 0", "Update SimpleName: nextTimestamp(92) to conn", "Insert SimpleName: prepareStatement(275) into MethodInvocation(277) at 1", "Insert SimpleName: dml(276) into MethodInvocation(277) at 2", "Insert MethodInvocation(357) into MethodInvocation(360) at 0", "Insert SimpleName: executeQuery(358) into MethodInvocation(360) at 1", "Update SimpleName: st(596) to rs", "Move SimpleName: st(596) into MethodInvocation(366) at 0", "Update SimpleName: executeQuery(597) to next", "Move SimpleName: executeQuery(597) into MethodInvocation(366) at 1", "Insert SimpleName: rs(371) into MethodInvocation(374) at 0", "Insert SimpleName: getInt(372) into MethodInvocation(374) at 1", "Insert NumberLiteral: 1(373) into MethodInvocation(374) at 2", "Insert SimpleName: rs(379) into MethodInvocation(382) at 0", "Insert SimpleName: getString(380) into MethodInvocation(382) at 1", "Insert NumberLiteral: 2(381) into MethodInvocation(382) at 2", "Update SimpleName: gbt(619) to rs", "Move SimpleName: gbt(619) into MethodInvocation(390) at 0", "Update SimpleName: createTable(620) to getInt", "Move SimpleName: createTable(620) into MethodInvocation(390) at 1", "Insert NumberLiteral: 3(389) into MethodInvocation(390) at 2", "Update SimpleName: loadData(625) to rs", "Move SimpleName: loadData(625) into MethodInvocation(398) at 0", "Update SimpleName: ts(626) to getInt", "Move SimpleName: ts(626) into MethodInvocation(398) at 1", "Insert NumberLiteral: 4(397) into MethodInvocation(398) at 2", "Update SimpleName: props(638) to rs", "Move SimpleName: props(638) into MethodInvocation(404) at 0", "Update SimpleName: setProperty(639) to next", "Move SimpleName: setProperty(639) into MethodInvocation(404) at 1", "Update SimpleName: toString(642) to rs", "Move SimpleName: toString(642) into MethodInvocation(412) at 0", "Insert SimpleName: getInt(410) into MethodInvocation(412) at 1", "Insert NumberLiteral: 1(411) into MethodInvocation(412) at 2", "Insert SimpleName: rs(417) into MethodInvocation(420) at 0", "Insert SimpleName: getString(418) into MethodInvocation(420) at 1", "Insert NumberLiteral: 2(419) into MethodInvocation(420) at 2", "Insert SimpleName: rs(425) into MethodInvocation(428) at 0", "Insert SimpleName: getInt(426) into MethodInvocation(428) at 1", "Insert NumberLiteral: 3(427) into MethodInvocation(428) at 2", "Insert SimpleName: rs(433) into MethodInvocation(436) at 0", "Insert SimpleName: getInt(434) into MethodInvocation(436) at 1", "Insert NumberLiteral: 4(435) into MethodInvocation(436) at 2", "Insert SimpleName: rs(440) into MethodInvocation(442) at 0", "Insert SimpleName: next(441) into MethodInvocation(442) at 1", "Insert SimpleName: conn(736) into MethodInvocation(738) at 0", "Update SimpleName: gbt(660) to createStatement", "Move SimpleName: gbt(660) into MethodInvocation(738) at 1", "Insert SimpleName: conn(743) into MethodInvocation(745) at 0", "Update SimpleName: gbt(666) to createStatement", "Move SimpleName: gbt(666) into MethodInvocation(745) at 1", "Move SimpleName: conn(590) into MethodInvocation(357) at 0", "Update SimpleName: prepareStatement(591) to createStatement", "Move SimpleName: prepareStatement(591) into MethodInvocation(357) at 1", "Insert MethodInvocation(752) into MethodInvocation(755) at 0", "Insert SimpleName: conn(750) into MethodInvocation(752) at 0", "Update SimpleName: gbt(672) to createStatement", "Move SimpleName: gbt(672) into MethodInvocation(752) at 1", "Delete QualifiedName: org.apache.phoenix.util.PhoenixRuntime(28)", "Delete ImportDeclaration(29)", "Delete SimpleName: createTable(87)", "Delete SimpleName: ts(106)", "Delete ReturnStatement(107)", "Delete Block(108)", "Delete MethodDeclaration(109)", "Delete PrimitiveType: long(113)", "Delete SimpleName: ts(114)", "Delete SimpleName: props(127)", "Delete SimpleName: setProperty(128)", "Delete QualifiedName: PhoenixRuntime.CURRENT_SCN_ATTRIB(129)", "Delete SimpleName: ts(132)", "Delete MethodInvocation(133)", "Delete MethodInvocation(134)", "Delete PrimitiveType: long(90)", "Delete NullLiteral(100)", "Delete SimpleName: ts(101)", "Delete NumberLiteral: 2(102)", "Delete InfixExpression: -(103)", "Delete MethodInvocation(598)", "Delete SimpleName: GroupByCaseIT(269)", "Delete SimpleType: GroupByCaseIT(270)", "Delete SimpleName: gbt(271)", "Delete SimpleName: GroupByCaseIT(272)", "Delete SimpleType: GroupByCaseIT(273)", "Delete ClassInstanceCreation(274)", "Delete VariableDeclarationFragment(275)", "Delete VariableDeclarationStatement(276)", "Delete PrimitiveType: long(277)", "Delete SimpleName: ts(278)", "Delete SimpleName: gbt(279)", "Delete SimpleName: createTable(280)", "Delete MethodInvocation(281)", "Delete VariableDeclarationFragment(282)", "Delete VariableDeclarationStatement(283)", "Delete SimpleName: props(298)", "Delete SimpleName: setProperty(299)", "Delete QualifiedName: PhoenixRuntime.CURRENT_SCN_ATTRIB(300)", "Delete SimpleName: Long(301)", "Delete SimpleName: toString(302)", "Delete SimpleName: ts(303)", "Delete NumberLiteral: 1(304)", "Delete InfixExpression: +(305)", "Delete MethodInvocation(306)", "Delete MethodInvocation(307)", "Delete ExpressionStatement(308)", "Delete SimpleName: gbt(284)", "Delete SimpleName: GroupByCaseIT(470)", "Delete SimpleType: GroupByCaseIT(471)", "Delete SimpleName: gbt(472)", "Delete SimpleName: GroupByCaseIT(473)", "Delete SimpleType: GroupByCaseIT(474)", "Delete ClassInstanceCreation(475)", "Delete VariableDeclarationFragment(476)", "Delete VariableDeclarationStatement(477)", "Delete PrimitiveType: long(478)", "Delete SimpleName: ts(479)", "Delete SimpleName: gbt(480)", "Delete SimpleName: createTable(481)", "Delete MethodInvocation(482)", "Delete VariableDeclarationFragment(483)", "Delete VariableDeclarationStatement(484)", "Delete SimpleName: props(499)", "Delete SimpleName: setProperty(500)", "Delete QualifiedName: PhoenixRuntime.CURRENT_SCN_ATTRIB(501)", "Delete SimpleName: Long(502)", "Delete SimpleName: toString(503)", "Delete SimpleName: ts(504)", "Delete NumberLiteral: 1(505)", "Delete InfixExpression: +(506)", "Delete MethodInvocation(507)", "Delete MethodInvocation(508)", "Delete ExpressionStatement(509)", "Delete SimpleName: gbt(485)", "Delete SimpleName: conn(662)", "Delete SimpleName: conn(668)", "Delete SimpleName: conn(674)", "Delete QualifiedName: edu.umd.cs.findbugs.annotations.SuppressWarnings(566)", "Delete SimpleName: value(567)", "Delete StringLiteral: \"RV_RETURN_VALUE_IGNORED\"(568)", "Delete MemberValuePair(569)", "Delete SimpleName: justification(570)", "Delete StringLiteral: \"Test code.\"(571)", "Delete MemberValuePair(572)", "Delete NormalAnnotation(573)", "Delete Modifier: private(574)", "Delete PrimitiveType: void(575)", "Delete SimpleName: executeQuery(576)", "Delete SimpleName: query(583)", "Delete SingleVariableDeclaration(584)", "Delete SimpleType: SQLException(586)", "Delete VariableDeclarationStatement(595)", "Delete Block(600)", "Delete MethodDeclaration(601)", "Delete Modifier: public(604)", "Delete PrimitiveType: void(605)", "Delete SimpleName: testGroupByCase(606)", "Delete SimpleName: GroupByCaseIT(609)", "Delete SimpleType: GroupByCaseIT(610)", "Delete SimpleName: gbt(611)", "Delete SimpleName: GroupByCaseIT(612)", "Delete SimpleType: GroupByCaseIT(613)", "Delete ClassInstanceCreation(614)", "Delete VariableDeclarationFragment(615)", "Delete VariableDeclarationStatement(616)", "Delete PrimitiveType: long(617)", "Delete SimpleName: ts(618)", "Delete MethodInvocation(621)", "Delete VariableDeclarationFragment(622)", "Delete VariableDeclarationStatement(623)", "Delete QualifiedName: PhoenixRuntime.CURRENT_SCN_ATTRIB(640)", "Delete SimpleName: ts(643)", "Delete NumberLiteral: 1(644)", "Delete InfixExpression: +(645)", "Delete MethodInvocation(646)", "Delete MethodInvocation(647)", "Delete ExpressionStatement(648)", "Delete Block(702)", "Delete MethodDeclaration(703)"]}}, {"RowKeyValueAccessor_cluster": {"actions": [{"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 1"]}]}}, {"RowKeyValueAccessor_diff": {"operations": ["Move MethodInvocation(140) into VariableDeclarationFragment(132) at 1", "Move MethodInvocation(129) into ConditionalExpression(142) at 1"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}