{"application": "apache-httpcore", "csha": "e6783dfbc25e31dfc71a43620fa2c9810da7a0fa", "files": [{"TokenParser_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 8", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 5", "INS Modifier: public to FieldDeclaration at 1", "INS PrimitiveType: char to FieldDeclaration at 4", "INS Javadoc to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS CharacterLiteral: '\\\"' to VariableDeclarationFragment at 1", "INS Modifier: final to FieldDeclaration at 3", "INS TagElement to Javadoc at 0", "INS Modifier: static to FieldDeclaration at 2", "INS TextElement: Double quote  to TagElement at 0", "INS SimpleName: DQUOTE to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 9", "operations": ["INS Modifier: final to FieldDeclaration at 3", "INS VariableDeclarationFragment to FieldDeclaration at 5", "INS Modifier: public to FieldDeclaration at 1", "INS SimpleName: ESCAPE to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 9", "INS TagElement to Javadoc at 0", "INS Modifier: static to FieldDeclaration at 2", "INS PrimitiveType: char to FieldDeclaration at 4", "INS CharacterLiteral: '\\\\' to VariableDeclarationFragment at 1", "INS Javadoc to FieldDeclaration at 0", "INS TextElement: Backward slash / escape character  to TagElement at 0"]}, {"root": "INS TagElement: @since to Javadoc at 1", "operations": ["INS TextElement:  4.4 to TagElement: @since at 0", "INS TagElement: @since to Javadoc at 1"]}, {"root": "UPDATE from int to char", "operations": ["UPD PrimitiveType: int from int to char", "UPD PrimitiveType: int from int to char", "UPD PrimitiveType: int from int to char", "UPD PrimitiveType: int from int to char"]}, {"root": "INS SimpleName: DQUOTE to InfixExpression: != at 1", "operations": ["INS SimpleName: DQUOTE to InfixExpression: != at 1"]}, {"root": "INS SimpleName: DQUOTE to InfixExpression: == at 1", "operations": ["INS SimpleName: DQUOTE to InfixExpression: == at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: > to InfixExpression: && at 2"]}, {"root": "INS SimpleName: DQUOTE to InfixExpression: == at 1", "operations": ["INS SimpleName: DQUOTE to InfixExpression: == at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "INS SimpleName: DQUOTE to InfixExpression: == at 1", "operations": ["INS SimpleName: DQUOTE to InfixExpression: == at 1"]}, {"root": "INS SimpleName: ESCAPE to InfixExpression: == at 1", "operations": ["INS SimpleName: ESCAPE to InfixExpression: == at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: > to InfixExpression: && at 2"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: > to InfixExpression: && at 2"]}, {"root": "INS SimpleName: DQUOTE to InfixExpression: != at 1", "operations": ["INS SimpleName: DQUOTE to InfixExpression: != at 1"]}, {"root": "INS SimpleName: ESCAPE to InfixExpression: != at 1", "operations": ["INS SimpleName: ESCAPE to InfixExpression: != at 1"]}, {"root": "INS SimpleName: ESCAPE to MethodInvocation at 2", "operations": ["INS SimpleName: ESCAPE to MethodInvocation at 2"]}, {"root": "INS SimpleName: CR to InfixExpression: != at 1", "operations": ["INS SimpleName: CR to InfixExpression: != at 1"]}, {"root": "INS SimpleName: LF to InfixExpression: != at 1", "operations": ["INS SimpleName: LF to InfixExpression: != at 1"]}, {"root": "DEL QualifiedName: b.length", "operations": ["DEL QualifiedName: b.length"]}, {"root": "DEL CharacterLiteral: '\\\"'", "operations": ["DEL CharacterLiteral: '\\\"'"]}, {"root": "DEL CharacterLiteral: '\\\"'", "operations": ["DEL CharacterLiteral: '\\\"'"]}, {"root": "DEL CharacterLiteral: '\\\"'", "operations": ["DEL CharacterLiteral: '\\\"'"]}, {"root": "DEL CharacterLiteral: '\\\"'", "operations": ["DEL CharacterLiteral: '\\\"'"]}, {"root": "DEL CharacterLiteral: '\\\\'", "operations": ["DEL CharacterLiteral: '\\\\'"]}, {"root": "DEL CharacterLiteral: '\\\\'", "operations": ["DEL CharacterLiteral: '\\\\'"]}, {"root": "DEL CharacterLiteral: '\\\"'", "operations": ["DEL CharacterLiteral: '\\\"'"]}, {"root": "DEL CharacterLiteral: '\\\\'", "operations": ["DEL CharacterLiteral: '\\\\'"]}, {"root": "DEL CharacterLiteral: '\\r'", "operations": ["DEL CharacterLiteral: '\\r'"]}, {"root": "DEL CharacterLiteral: '\\n'", "operations": ["DEL CharacterLiteral: '\\n'"]}]}}, {"TokenParser_diff": {"operations": ["Insert FieldDeclaration(104) into TypeDeclaration: class(915) at 8", "Insert FieldDeclaration(115) into TypeDeclaration: class(915) at 9", "Insert TagElement: @since(12) into Javadoc(13) at 1", "Update PrimitiveType: int(55) to char", "Update PrimitiveType: int(66) to char", "Update PrimitiveType: int(77) to char", "Update PrimitiveType: int(88) to char", "Insert Javadoc(96) into FieldDeclaration(104) at 0", "Insert Modifier: public(97) into FieldDeclaration(104) at 1", "Insert Modifier: static(98) into FieldDeclaration(104) at 2", "Insert Modifier: final(99) into FieldDeclaration(104) at 3", "Insert PrimitiveType: char(100) into FieldDeclaration(104) at 4", "Insert VariableDeclarationFragment(103) into FieldDeclaration(104) at 5", "Insert Javadoc(107) into FieldDeclaration(115) at 0", "Insert Modifier: public(108) into FieldDeclaration(115) at 1", "Insert Modifier: static(109) into FieldDeclaration(115) at 2", "Insert Modifier: final(110) into FieldDeclaration(115) at 3", "Insert PrimitiveType: char(111) into FieldDeclaration(115) at 4", "Insert VariableDeclarationFragment(114) into FieldDeclaration(115) at 5", "Insert TextElement:  4.4(11) into TagElement: @since(12) at 0", "Insert TagElement(95) into Javadoc(96) at 0", "Insert SimpleName: DQUOTE(101) into VariableDeclarationFragment(103) at 0", "Insert CharacterLiteral: '\\\"'(102) into VariableDeclarationFragment(103) at 1", "Insert TagElement(106) into Javadoc(107) at 0", "Insert SimpleName: ESCAPE(112) into VariableDeclarationFragment(114) at 0", "Insert CharacterLiteral: '\\\\'(113) into VariableDeclarationFragment(114) at 1", "Insert TextElement: Double quote (94) into TagElement(95) at 0", "Insert TextElement: Backward slash / escape character (105) into TagElement(106) at 0", "Insert SimpleName: DQUOTE(812) into InfixExpression: !=(813) at 1", "Insert SimpleName: DQUOTE(721) into InfixExpression: ==(722) at 1", "Move InfixExpression: >(219) into InfixExpression: &&(244) at 2", "Insert SimpleName: DQUOTE(361) into InfixExpression: ==(362) at 1", "Move IfStatement(378) into Block(387) at 0", "Move IfStatement(353) into Block(413) at 0", "Insert SimpleName: DQUOTE(873) into InfixExpression: ==(874) at 1", "Insert SimpleName: ESCAPE(882) into InfixExpression: ==(883) at 1", "Move InfixExpression: >(369) into InfixExpression: &&(369) at 2", "Move InfixExpression: >(344) into InfixExpression: &&(394) at 2", "Insert SimpleName: DQUOTE(849) into InfixExpression: !=(850) at 1", "Insert SimpleName: ESCAPE(852) into InfixExpression: !=(853) at 1", "Insert SimpleName: ESCAPE(857) into MethodInvocation(858) at 2", "Insert SimpleName: CR(890) into InfixExpression: !=(891) at 1", "Insert SimpleName: LF(893) into InfixExpression: !=(894) at 1", "Delete QualifiedName: b.length(29)", "Delete CharacterLiteral: '\\\"'(338)", "Delete CharacterLiteral: '\\\"'(698)", "Delete CharacterLiteral: '\\\"'(789)", "Delete CharacterLiteral: '\\\"'(826)", "Delete CharacterLiteral: '\\\\'(829)", "Delete CharacterLiteral: '\\\\'(834)", "Delete CharacterLiteral: '\\\"'(850)", "Delete CharacterLiteral: '\\\\'(859)", "Delete CharacterLiteral: '\\r'(867)", "Delete CharacterLiteral: '\\n'(870)"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}