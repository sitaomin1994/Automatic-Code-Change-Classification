{"application": "apache-nutch", "csha": "57ba9d0dee477df391f7d8897b41896a32348865", "files": [{"RobotRules_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one or more", "DEL TagElement", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: this work for additional information regarding copyright ownership.", "DEL QualifiedName: org.apache.nutch.protocol", "DEL TextElement: limitations under the License.", "DEL PackageDeclaration", "DEL TextElement: The ASF licenses this file to You under the Apache License, Version 2.0", "DEL Javadoc", "DEL TextElement: the License.  You may obtain a copy of the License at", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: contributor license agreements.  See the NOTICE file distributed with", "DEL TextElement: (the \"License\"); you may not use this file except in compliance with"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.net.URL", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL Modifier: public", "DEL PrimitiveType: long", "DEL Javadoc", "DEL TypeDeclaration: interface", "DEL TagElement", "DEL Javadoc", "DEL TextElement: Get Crawl-Delay, in milliseconds. This returns -1 if not set.", "DEL PrimitiveType: boolean", "DEL MethodDeclaration", "DEL TextElement: Get expire time", "DEL TextElement: test paths against those rules.", "DEL MethodDeclaration", "DEL TagElement", "DEL TextElement: This class holds the rules which were parsed from a robots.txt file, and can", "DEL SimpleName: getExpireTime", "DEL SimpleName: isAllowed", "DEL SimpleName: url", "DEL SimpleName: URL", "DEL SimpleName: getCrawlDelay", "DEL TextElement: Returns <code>false</code> if the <code>robots.txt</code> file prohibits us", "DEL Javadoc", "DEL Modifier: public", "DEL TagElement", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: RobotRules", "DEL TextElement: from accessing the given <code>url</code>, or <code>true</code> otherwise.", "DEL TagElement", "DEL PrimitiveType: long", "DEL SimpleType: URL", "DEL Javadoc", "DEL Modifier: public"]}]}}, {"RobotRules_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one or more(0)", "Delete TextElement: contributor license agreements.  See the NOTICE file distributed with(1)", "Delete TextElement: this work for additional information regarding copyright ownership.(2)", "Delete TextElement: The ASF licenses this file to You under the Apache License, Version 2.0(3)", "Delete TextElement: (the \"License\"); you may not use this file except in compliance with(4)", "Delete TextElement: the License.  You may obtain a copy of the License at(5)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(6)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(7)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(8)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(9)", "Delete TextElement: See the License for the specific language governing permissions and(10)", "Delete TextElement: limitations under the License.(11)", "Delete TagElement(12)", "Delete Javadoc(13)", "Delete QualifiedName: org.apache.nutch.protocol(14)", "Delete PackageDeclaration(15)", "Delete QualifiedName: java.net.URL(16)", "Delete ImportDeclaration(17)", "Delete TextElement: This class holds the rules which were parsed from a robots.txt file, and can(18)", "Delete TextElement: test paths against those rules.(19)", "Delete TagElement(20)", "Delete Javadoc(21)", "Delete Modifier: public(22)", "Delete SimpleName: RobotRules(23)", "Delete TextElement: Get expire time(24)", "Delete TagElement(25)", "Delete Javadoc(26)", "Delete Modifier: public(27)", "Delete PrimitiveType: long(28)", "Delete SimpleName: getExpireTime(29)", "Delete MethodDeclaration(30)", "Delete TextElement: Get Crawl-Delay, in milliseconds. This returns -1 if not set.(31)", "Delete TagElement(32)", "Delete Javadoc(33)", "Delete Modifier: public(34)", "Delete PrimitiveType: long(35)", "Delete SimpleName: getCrawlDelay(36)", "Delete MethodDeclaration(37)", "Delete TextElement: Returns <code>false</code> if the <code>robots.txt</code> file prohibits us(38)", "Delete TextElement: from accessing the given <code>url</code>, or <code>true</code> otherwise.(39)", "Delete TagElement(40)", "Delete Javadoc(41)", "Delete Modifier: public(42)", "Delete PrimitiveType: boolean(43)", "Delete SimpleName: isAllowed(44)", "Delete SimpleName: URL(45)", "Delete SimpleType: URL(46)", "Delete SimpleName: url(47)", "Delete SingleVariableDeclaration(48)", "Delete MethodDeclaration(49)", "Delete TypeDeclaration: interface(50)"]}}, {"RobotRulesParser_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 13"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: java.io.IOException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: java.io.InputStream to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: java.net.MalformedURLException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS ImportDeclaration to CompilationUnit at 9", "INS QualifiedName: java.util.HashSet to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS QualifiedName: java.util.Set to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 11"]}, {"root": "INS ImportDeclaration to CompilationUnit at 17", "operations": ["INS ImportDeclaration to CompilationUnit at 17", "INS QualifiedName: org.apache.hadoop.util.StringUtils to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 20", "operations": ["INS QualifiedName: org.apache.nutch.util.NutchConfiguration to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 20"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 16"]}, {"root": "UPDATE from java.util.ArrayList to java.util.Arrays", "operations": ["UPD QualifiedName: java.util.ArrayList from java.util.ArrayList to java.util.Arrays"]}, {"root": "UPDATE from org.apache.hadoop.conf.Configurable to org.apache.hadoop.util.Tool", "operations": ["UPD QualifiedName: org.apache.hadoop.conf.Configurable from org.apache.hadoop.conf.Configurable to org.apache.hadoop.util.Tool"]}, {"root": "UPDATE from com.google.common.io.Files to org.apache.hadoop.util.ToolRunner", "operations": ["UPD QualifiedName: com.google.common.io.Files from com.google.common.io.Files to org.apache.hadoop.util.ToolRunner"]}, {"root": "UPDATE from Configurable to Tool", "operations": ["UPD SimpleName: Configurable from Configurable to Tool", "UPD SimpleType: Configurable from Configurable to Tool"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 12", "operations": ["INS SimpleType: String to ParameterizedType: HashSet<String> at 1", "INS TagElement to Javadoc at 0", "INS ParameterizedType: HashSet<String> to ClassInstanceCreation at 0", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: whiteList to VariableDeclarationFragment at 0", "INS SimpleName: HashSet to SimpleType: HashSet at 0", "INS SimpleType: String to ParameterizedType: Set<String> at 1", "INS FieldDeclaration to TypeDeclaration: class at 12", "INS SimpleName: String to SimpleType: String at 0", "INS Javadoc to FieldDeclaration at 0", "INS Modifier: protected to FieldDeclaration at 1", "INS SimpleType: HashSet to ParameterizedType: HashSet<String> at 0", "INS ParameterizedType: Set<String> to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS TextElement: set of host names or IPs to be explicitly excluded from robots.txt checking  to TagElement at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: Set to ParameterizedType: Set<String> at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 20", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleType: Protocol to SingleVariableDeclaration at 0", "INS SimpleName: URL to SimpleType: URL at 0", "INS Modifier: abstract to MethodDeclaration at 2", "INS SimpleName: BaseRobotRules to SimpleType: BaseRobotRules at 0", "INS SimpleName: url to SingleVariableDeclaration at 1", "INS SimpleType: BaseRobotRules to MethodDeclaration at 3", "INS SimpleName: protocol to SingleVariableDeclaration at 1", "INS SimpleType: URL to SingleVariableDeclaration at 0", "INS SimpleName: Protocol to SimpleType: Protocol at 0", "INS SimpleName: getRobotRulesSet to MethodDeclaration at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 21", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 22", "operations": ["INS SimpleName: url to MethodInvocation at 0", "INS TagElement: @param to Javadoc at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: conf to MethodInvocation at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: robotsBytes to MethodInvocation at 2", "INS SimpleName: contentLength to ArrayCreation at 1", "INS TextElement: . to TagElement at 4", "INS SimpleName: TestRobotRulesParser to TypeDeclaration: class at 3", "INS SimpleName: read to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 0", "INS ThisExpression to FieldAccess at 0", "INS Dimension to ArrayType: byte[] at 1", "INS ArrayCreation to VariableDeclarationFragment at 1", "INS MethodInvocation to InfixExpression: + at 2", "INS ReturnStatement to Block at 2", "INS SimpleName: conf to SingleVariableDeclaration at 1", "INS SimpleName: robotParser to MethodInvocation at 0", "INS SimpleName: url to InfixExpression: + at 1", "INS SimpleName: robotsBytes to VariableDeclarationFragment at 0", "INS StringLiteral: \"http.agent.name\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 5", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: openStream to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS Modifier: static to TypeDeclaration: class at 2", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: StringUtils to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS TagElement: @param to Javadoc at 0", "INS StringLiteral: \"*\" to MethodInvocation at 3", "INS SimpleName: error to MethodInvocation at 1", "INS SimpleName: url to TagElement: @param at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS Javadoc to TypeDeclaration: class at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: openStream to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: parseContent to MethodInvocation at 1", "INS TextElement: location of the robots.txt file to TagElement: @param at 1", "INS Block to IfStatement at 1", "INS Block to MethodDeclaration at 6", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: rules to ReturnStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS Modifier: private to TypeDeclaration: class at 1", "INS SimpleType: IOException to SingleVariableDeclaration at 0", "INS SimpleName: close to MethodInvocation at 1", "INS StringLiteral: \"text/plain\" to MethodInvocation at 4", "INS ExpressionStatement to Block at 0", "INS SimpleName: openStream to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS Modifier: public to MethodDeclaration at 1", "INS TagElement: @link to TagElement at 0", "INS ExpressionStatement to Block at 1", "INS StringLiteral: \"http.agent.name\" to MethodInvocation at 2", "INS SimpleName: setConf to MethodInvocation at 0", "INS InfixExpression: == to IfStatement at 0", "INS TextElement:   (ignored) to TagElement: @param at 1", "INS CatchClause to TryStatement at 1", "INS SimpleName: rules to Assignment: = at 0", "INS IfStatement to Block at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS SimpleName: getRobotRulesSet to TagElement: @link at 0", "INS SimpleName: contentLength to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: get to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS TypeDeclaration: class to TypeDeclaration: class at 22", "INS SimpleName: conf to FieldAccess at 1", "INS SimpleName: set to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS StringLiteral: \"Failed to open robots.txt file \" to InfixExpression: + at 0", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS SimpleName: conf to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: InputStream to VariableDeclarationStatement at 0", "INS SimpleType: BaseRobotRules to VariableDeclarationStatement at 0", "INS StringLiteral: \"http.agent.name\" to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: robotsBytes to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 2", "INS Block to TryStatement at 0", "INS TryStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: e to MethodInvocation at 2", "INS SimpleName: rules to Assignment: = at 0", "INS SimpleName: TestRobotRulesParser to MethodDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS FieldAccess to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: url to MethodInvocation at 0", "INS SimpleName: BaseRobotRules to SimpleType: BaseRobotRules at 0", "INS ExpressionStatement to Block at 4", "INS SimpleName: InputStream to SimpleType: InputStream at 0", "INS SimpleName: url to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS TextElement:  implementation which expects the location of the to TagElement at 1", "INS SimpleName: EMPTY_RULES to Assignment: = at 1", "INS SimpleName: RobotRulesParser to TagElement: @link at 0", "INS SimpleName: openStream to VariableDeclarationFragment at 0", "INS Block to MethodDeclaration at 3", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: stringifyException to MethodInvocation at 1", "INS SimpleName: conf to MethodInvocation at 1", "INS SimpleType: RobotRulesParser to TypeDeclaration: class at 4", "INS ArrayType: byte[] to ArrayCreation at 0", "INS SimpleName: get to MethodInvocation at 1", "INS TagElement to Javadoc at 0", "INS SimpleName: openConnection to MethodInvocation at 1", "INS TagElement: @link to TagElement at 3", "INS SimpleName: Configuration to SimpleType: Configuration at 0", "INS SimpleName: rules to VariableDeclarationFragment at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: RobotRulesParser to SimpleType: RobotRulesParser at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS Block to CatchClause at 1", "INS SimpleName: protocol to TagElement: @param at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Configuration to SingleVariableDeclaration at 0", "INS SimpleName: getRobotRulesSet to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 5", "INS TextElement: robots.txt passed by URL (usually pointing to a local file) in to TagElement at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: getContentLength to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS SimpleName: NutchConfiguration to MethodInvocation at 0", "INS SimpleName: res to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: create to MethodInvocation at 1", "INS ClassInstanceCreation to MethodInvocation at 3", "INS Block to MethodDeclaration at 6", "INS SimpleName: args to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: res to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ArrayType: String[] to SingleVariableDeclaration at 0", "INS SimpleName: TestRobotRulesParser to SimpleType: TestRobotRulesParser at 0", "INS Dimension to ArrayType: String[] at 1", "INS SimpleType: Configuration to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: String to ArrayType: String[] at 0", "INS SimpleName: ToolRunner to MethodInvocation at 0", "INS SimpleName: exit to MethodInvocation at 1", "INS SimpleName: conf to MethodInvocation at 2", "INS SimpleName: String to SimpleType: String at 0", "INS Modifier: public to MethodDeclaration at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: Configuration to SimpleType: Configuration at 0", "INS SimpleName: args to MethodInvocation at 4", "INS PrimitiveType: void to MethodDeclaration at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: TestRobotRulesParser to ClassInstanceCreation at 0", "INS SimpleName: System to MethodInvocation at 0", "INS SimpleName: run to MethodInvocation at 1", "INS SimpleName: conf to VariableDeclarationFragment at 0", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: main to MethodDeclaration at 3", "INS SimpleName: conf to ClassInstanceCreation at 1", "INS MethodDeclaration to TypeDeclaration: class at 23", "INS PrimitiveType: int to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from private to protected", "operations": ["UPD Modifier: private from private to protected"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement to Javadoc at 0", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: Check whether a URL belongs to a whitelisted host. to TagElement at 0"]}, {"root": "INS PrimitiveType: boolean to MethodDeclaration at 2", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 2"]}, {"root": "INS SimpleName: isWhiteListed to MethodDeclaration at 3", "operations": ["INS SimpleName: isWhiteListed to MethodDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleType: URL to SingleVariableDeclaration at 0", "INS SimpleName: URL to SimpleType: URL at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: url to SingleVariableDeclaration at 1"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleName: whiteList to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getHost to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: url to MethodInvocation at 0", "INS SimpleName: contains to MethodInvocation at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Javadoc to MethodDeclaration at 0", "MOV SimpleName: main to MethodDeclaration at 3", "MOV PrimitiveType: void to MethodDeclaration at 2", "MOV Modifier: static to MethodDeclaration at 1", "MOV Modifier: public to MethodDeclaration at 1", "MOV Block to MethodDeclaration at 5"]}, {"root": "UPDATE from static to public", "operations": ["UPD Modifier: static from static to public"]}, {"root": "UPDATE from void to int", "operations": ["UPD PrimitiveType: void from void to int"]}, {"root": "UPDATE from main to run", "operations": ["UPD SimpleName: main from main to run"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Exception to MethodDeclaration at 5"]}, {"root": "INS TextElement: Protocol-specific implementations have to implement the method to TagElement at 4", "operations": ["INS TextElement: Protocol-specific implementations have to implement the method to TagElement at 4"]}, {"root": "INS TagElement: @link to TagElement at 5", "operations": ["INS TagElement: @link to TagElement at 5", "INS SimpleName: getRobotRulesSet to TagElement: @link at 0"]}, {"root": "INS TextElement: . to TagElement at 6", "operations": ["INS TextElement: . to TagElement at 6"]}, {"root": "INS VariableDeclarationStatement to Block at 6", "operations": ["INS SimpleName: confWhiteList to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 6", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: getStrings to MethodInvocation at 1", "INS SimpleType: String to ArrayType: String[] at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: conf to MethodInvocation at 0", "INS Dimension to ArrayType: String[] at 1", "INS StringLiteral: \"http.robot.rules.whitelist\" to MethodInvocation at 2", "INS ArrayType: String[] to VariableDeclarationStatement at 0", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "INS IfStatement to Block at 7", "operations": ["INS Block to IfStatement at 1", "INS SimpleName: info to MethodInvocation at 1", "INS SimpleName: LOG to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: asList to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: Arrays to MethodInvocation at 0", "INS StringLiteral: \"Whitelisted hosts: \" to InfixExpression: + at 0", "INS QualifiedName: confWhiteList.length to InfixExpression: > at 0", "INS InfixExpression: > to InfixExpression: && at 1", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: addAll to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS InfixExpression: != to InfixExpression: && at 0", "INS IfStatement to Block at 7", "INS SimpleName: confWhiteList to InfixExpression: != at 0", "INS SimpleName: confWhiteList to MethodInvocation at 2", "INS SimpleName: whiteList to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: whiteList to InfixExpression: + at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS SimpleName: protocol to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1", "INS TextElement: protocol implementation to TagElement: @param at 1"]}, {"root": "INS TagElement: @param to Javadoc at 2", "operations": ["INS TagElement: @param to Javadoc at 2", "INS TextElement: URL to be checked whether fetching is allowed by robot rules to TagElement: @param at 1", "INS SimpleName: url to TagElement: @param at 0"]}, {"root": "INS TagElement: @return to Javadoc at 3", "operations": ["INS TagElement: @return to Javadoc at 3", "INS TextElement:  robot rules to TagElement: @return at 0"]}, {"root": "UPDATE from argv to args", "operations": ["UPD SimpleName: argv from argv to args", "UPD SimpleName: argv from argv to args", "UPD SimpleName: argv from argv to args", "UPD SimpleName: argv from argv to args"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2", "MOV WhileStatement to Block at 4", "MOV VariableDeclarationStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 1", "MOV ExpressionStatement to Block at 5"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS SimpleName: File to SimpleType: File at 0", "INS ArrayAccess to ClassInstanceCreation at 1", "INS SimpleType: File to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: File to SimpleType: File at 0", "INS SimpleName: urlFile to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 2", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: File to ClassInstanceCreation at 0"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS ExpressionStatement to Block at 2", "INS ExpressionStatement to Block at 1", "INS VariableDeclarationStatement to Block at 0", "INS ArrayAccess to VariableDeclarationFragment at 1", "INS SimpleName: agents to MethodInvocation at 3", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to Block at 3", "INS InfixExpression: > to IfStatement at 0", "INS SimpleName: conf to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS NumberLiteral: 2 to InfixExpression: > at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setConf to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: set to MethodInvocation at 1", "INS StringLiteral: \"http.agent.name\" to MethodInvocation at 2", "INS SimpleName: conf to MethodInvocation at 1", "INS QualifiedName: args.length to InfixExpression: > at 0", "INS SimpleName: agents to VariableDeclarationFragment at 0"]}, {"root": "INS TryStatement to Block at 4", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: toURL to MethodInvocation at 1", "INS Block to TryStatement at 0", "INS SimpleName: getRobotRulesSet to MethodInvocation at 0", "INS SimpleName: toURI to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: robotsFile to MethodInvocation at 0", "INS TryStatement to Block at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: testPath to Assignment: = at 0", "INS VariableDeclarationStatement to Block at 0", "INS NullLiteral to MethodInvocation at 1", "INS ExpressionStatement to Block at 3", "INS SimpleName: rules to VariableDeclarationFragment at 0"]}, {"root": "INS ReturnStatement to Block at 5", "operations": ["INS ReturnStatement to Block at 5", "INS NumberLiteral: 0 to ReturnStatement at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SimpleType: BaseRobotRules to MethodDeclaration at 2"]}, {"root": "INS TextElement: Fetch robots.txt (or it's protocol-specific equivalent) which applies to to TagElement at 0", "operations": ["INS TextElement: Fetch robots.txt (or it's protocol-specific equivalent) which applies to to TagElement at 0"]}, {"root": "UPDATE from command-line main for testing  to the given URL, parse it and return the set of robot rules applicable for", "operations": ["UPD TextElement: command-line main for testing  from command-line main for testing  to the given URL, parse it and return the set of robot rules applicable for"]}, {"root": "INS TextElement: the configured agent name(s). to TagElement at 2", "operations": ["INS TextElement: the configured agent name(s). to TagElement at 2"]}, {"root": "UPDATE from != to <", "operations": ["UPD InfixExpression: != from != to <"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: File to VariableDeclarationStatement at 0", "MOV ArrayAccess to ClassInstanceCreation at 1"]}, {"root": "MOVE from TryStatement", "operations": ["MOV CatchClause to TryStatement at 1"]}, {"root": "UPDATE from argv.length to args.length", "operations": ["UPD QualifiedName: argv.length from argv.length to args.length"]}, {"root": "UPDATE from 3 to 2", "operations": ["UPD NumberLiteral: 3 from 3 to 2"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: help to VariableDeclarationFragment at 0", "INS StringLiteral: \"\\tfor rules assigned to the user agent `*' (meaning any other).\" to ArrayInitializer at 9", "INS VariableDeclarationStatement to Block at 0", "INS StringLiteral: \"\\tThe <robots-file> will be parsed as a robots.txt file,\" to ArrayInitializer at 1", "INS StringLiteral: \"Usage: RobotRulesParser <robots-file> <url-file> [<agent-names>]\\n\" to ArrayInitializer at 0", "INS StringLiteral: \"\\tusing the given <agent-name> to select rules.\" to ArrayInitializer at 2", "INS StringLiteral: \"\\tcomma as a delimiter without any spaces.\" to ArrayInitializer at 6", "INS SimpleType: String to ArrayType: String[] at 0", "INS SimpleName: String to SimpleType: String at 0", "INS StringLiteral: \"\\tIf no agent name is given the property http.agent.name\" to ArrayInitializer at 7", "INS StringLiteral: \"\\tMultiple agent names can be provided using\" to ArrayInitializer at 5", "INS StringLiteral: \"\\tand tested against the rules.\" to ArrayInitializer at 4", "INS StringLiteral: \"\\tis used. If http.agent.name is empty, robots.txt is checked\" to ArrayInitializer at 8", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ArrayType: String[] to VariableDeclarationStatement at 0", "INS StringLiteral: \"\\tURLs will be read (one per line) from <url-file>,\" to ArrayInitializer at 3", "INS Dimension to ArrayType: String[] at 1", "INS ArrayInitializer to VariableDeclarationFragment at 1"]}, {"root": "INS EnhancedForStatement to Block at 1", "operations": ["INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: help to EnhancedForStatement at 1", "INS SimpleName: s to SingleVariableDeclaration at 1", "INS EnhancedForStatement to Block at 1", "INS Block to EnhancedForStatement at 2"]}, {"root": "UPDATE from robotsBytes to robotsFile", "operations": ["UPD SimpleName: robotsBytes from robotsBytes to robotsFile"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS SimpleType: File to ClassInstanceCreation at 0", "INS SimpleName: File to SimpleType: File at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: BaseRobotRules to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleType: String to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "INS Block to WhileStatement at 1", "operations": ["INS Block to CatchClause at 1", "INS IfStatement to Block at 2", "INS SingleVariableDeclaration to CatchClause at 0", "INS Assignment: = to ExpressionStatement at 0", "INS CatchClause to TryStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS TryStatement to Block at 0", "INS VariableDeclarationStatement to Block at 1", "INS IfStatement to IfStatement at 2", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: URL to SimpleType: URL at 0", "INS SimpleName: status to Assignment: = at 0", "INS SimpleType: URL to VariableDeclarationStatement at 0", "INS SimpleName: testPath to ClassInstanceCreation at 1", "INS SimpleName: isWhiteListed to MethodInvocation at 0", "INS SimpleName: status to Assignment: = at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS StringLiteral: \"allowed\" to Assignment: = at 1", "INS SimpleType: URL to ClassInstanceCreation at 0", "INS SimpleName: status to Assignment: = at 0", "INS Block to IfStatement at 2", "INS Block to TryStatement at 0", "INS Block to WhileStatement at 1", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: URL to SimpleType: URL at 0", "INS SimpleName: String to SimpleType: String at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleType: MalformedURLException to SingleVariableDeclaration at 0", "INS SimpleName: status to VariableDeclarationFragment at 0", "INS Block to IfStatement at 1", "INS SimpleName: url to VariableDeclarationFragment at 0", "INS StringLiteral: \"not allowed\" to Assignment: = at 1", "INS SimpleName: url to MethodInvocation at 1", "INS SimpleName: MalformedURLException to SimpleType: MalformedURLException at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \"whitelisted\" to Assignment: = at 1"]}, {"root": "INS SimpleType: IOException to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: IOException to SingleVariableDeclaration at 0", "INS SimpleName: IOException to SimpleType: IOException at 0"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS ReturnStatement to Block at 1", "INS PrefixExpression: - to ReturnStatement at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: String to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV NumberLiteral: 0 to ArrayAccess at 1", "MOV SimpleName: argv to ArrayAccess at 0"]}, {"root": "UPDATE from 0 to 1", "operations": ["UPD NumberLiteral: 0 from 0 to 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 3"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ArrayType: byte[] to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: argv to ArrayAccess at 0", "MOV NumberLiteral: 2 to ArrayAccess at 1"]}, {"root": "INS SimpleName: LOG to MethodInvocation at 0", "operations": ["INS SimpleName: LOG to MethodInvocation at 0"]}, {"root": "UPDATE from e to error", "operations": ["UPD SimpleName: e from e to error"]}, {"root": "INS InfixExpression: + to MethodInvocation at 2", "operations": ["INS StringLiteral: \"Failed to run: \" to InfixExpression: + at 0", "INS SimpleName: stringifyException to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: + at 1", "INS SimpleName: StringUtils to MethodInvocation at 0", "INS InfixExpression: + to MethodInvocation at 2"]}, {"root": "INS SimpleName: s to MethodInvocation at 2", "operations": ["INS SimpleName: s to MethodInvocation at 2"]}, {"root": "INS SimpleName: urlFile to ClassInstanceCreation at 1", "operations": ["INS SimpleName: urlFile to ClassInstanceCreation at 1"]}, {"root": "UPDATE from printStackTrace to e", "operations": ["UPD SimpleName: printStackTrace from printStackTrace to e"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: printStackTrace to MethodInvocation at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "INS SimpleName: status to InfixExpression: + at 0", "operations": ["INS SimpleName: status to InfixExpression: + at 0"]}, {"root": "DEL Modifier: abstract", "operations": ["DEL Modifier: abstract"]}, {"root": "DEL SimpleName: getRobotRulesSet", "operations": ["DEL SimpleName: getRobotRulesSet"]}, {"root": "DEL StringLiteral: \"\\tcomma as a delimiter without any spaces.\"", "operations": ["DEL StringLiteral: \"\\tcomma as a delimiter without any spaces.\""]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: println", "DEL QualifiedName: System.err", "DEL StringLiteral: \"Usage: RobotRulesParser <robots-file> <url-file> <agent-names>\\n\""]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL StringLiteral: \"\\tThe <robots-file> will be parsed as a robots.txt file,\"", "DEL ExpressionStatement", "DEL SimpleName: println", "DEL QualifiedName: System.err"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL QualifiedName: System.err", "DEL StringLiteral: \"\\tusing the given <agent-name> to select rules.  URLs \"", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: println"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL StringLiteral: \"\\twill be read (one per line) from <url-file>, and tested\"", "DEL QualifiedName: System.err", "DEL SimpleName: println", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: println", "DEL StringLiteral: \"\\tagainst the rules. Multiple agent names can be provided using\"", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL QualifiedName: System.err"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: Files", "DEL SimpleName: toByteArray", "DEL ClassInstanceCreation", "DEL MethodInvocation"]}, {"root": "DEL ArrayAccess", "operations": ["DEL NumberLiteral: 1", "DEL SimpleName: argv", "DEL ArrayAccess"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL ConditionalExpression", "DEL StringLiteral: \"allowed\"", "DEL StringLiteral: \"not allowed\"", "DEL ParenthesizedExpression"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL TryStatement", "operations": ["DEL SimpleName: robotParser", "DEL SimpleName: rules", "DEL ArrayAccess", "DEL ArrayAccess", "DEL SimpleName: parseContent", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL Block", "DEL StringLiteral: \"text/plain\"", "DEL TryStatement", "DEL SimpleName: robotsBytes"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration"]}]}}, {"RobotRulesParser_diff": {"operations": ["Move ImportDeclaration(37) into CompilationUnit(957) at 13", "Insert ImportDeclaration(21) into CompilationUnit(957) at 3", "Insert ImportDeclaration(23) into CompilationUnit(957) at 4", "Insert ImportDeclaration(27) into CompilationUnit(957) at 6", "Insert ImportDeclaration(33) into CompilationUnit(957) at 9", "Insert ImportDeclaration(37) into CompilationUnit(957) at 11", "Insert ImportDeclaration(49) into CompilationUnit(957) at 17", "Insert ImportDeclaration(55) into CompilationUnit(957) at 20", "Move MethodDeclaration(437) into TypeDeclaration: class(956) at 16", "Insert QualifiedName: java.io.IOException(20) into ImportDeclaration(21) at 0", "Insert QualifiedName: java.io.InputStream(22) into ImportDeclaration(23) at 0", "Insert QualifiedName: java.net.MalformedURLException(26) into ImportDeclaration(27) at 0", "Update QualifiedName: java.util.ArrayList(24) to java.util.Arrays", "Insert QualifiedName: java.util.HashSet(32) into ImportDeclaration(33) at 0", "Insert QualifiedName: java.util.Set(36) into ImportDeclaration(37) at 0", "Insert QualifiedName: org.apache.hadoop.util.StringUtils(48) into ImportDeclaration(49) at 0", "Update QualifiedName: org.apache.hadoop.conf.Configurable(36) to org.apache.hadoop.util.Tool", "Update QualifiedName: com.google.common.io.Files(40) to org.apache.hadoop.util.ToolRunner", "Insert QualifiedName: org.apache.nutch.util.NutchConfiguration(54) into ImportDeclaration(55) at 0", "Update SimpleType: Configurable(61) to Tool", "Insert FieldDeclaration(198) into TypeDeclaration: class(956) at 12", "Insert MethodDeclaration(540) into TypeDeclaration: class(956) at 20", "Insert MethodDeclaration(769) into TypeDeclaration: class(956) at 21", "Insert TypeDeclaration: class(915) into TypeDeclaration: class(956) at 22", "Insert MethodDeclaration(955) into TypeDeclaration: class(956) at 23", "Update SimpleName: Configurable(60) to Tool", "Update Modifier: private(151) to protected", "Insert Javadoc(183) into FieldDeclaration(198) at 0", "Insert Modifier: protected(184) into FieldDeclaration(198) at 1", "Insert ParameterizedType: Set<String>(189) into FieldDeclaration(198) at 2", "Insert VariableDeclarationFragment(197) into FieldDeclaration(198) at 3", "Insert Javadoc(400) into MethodDeclaration(416) at 0", "Insert PrimitiveType: boolean(402) into MethodDeclaration(416) at 2", "Insert SimpleName: isWhiteListed(403) into MethodDeclaration(416) at 3", "Insert SingleVariableDeclaration(407) into MethodDeclaration(416) at 4", "Insert Block(415) into MethodDeclaration(416) at 5", "Move Javadoc(440) into MethodDeclaration(540) at 0", "Move Modifier: public(441) into MethodDeclaration(540) at 1", "Insert Modifier: abstract(528) into MethodDeclaration(540) at 2", "Insert SimpleType: BaseRobotRules(530) into MethodDeclaration(540) at 3", "Insert SimpleName: getRobotRulesSet(531) into MethodDeclaration(540) at 4", "Insert SingleVariableDeclaration(535) into MethodDeclaration(540) at 5", "Insert SingleVariableDeclaration(539) into MethodDeclaration(540) at 6", "Insert MarkerAnnotation(542) into MethodDeclaration(769) at 0", "Update Modifier: static(442) to public", "Move Modifier: static(442) into MethodDeclaration(769) at 1", "Update PrimitiveType: void(443) to int", "Move PrimitiveType: void(443) into MethodDeclaration(769) at 2", "Update SimpleName: main(444) to run", "Move SimpleName: main(444) into MethodDeclaration(769) at 3", "Move SingleVariableDeclaration(450) into MethodDeclaration(769) at 4", "Move Block(589) into MethodDeclaration(769) at 5", "Insert Javadoc(778) into TypeDeclaration: class(915) at 0", "Insert Modifier: private(779) into TypeDeclaration: class(915) at 1", "Insert Modifier: static(780) into TypeDeclaration: class(915) at 2", "Insert SimpleName: TestRobotRulesParser(781) into TypeDeclaration: class(915) at 3", "Insert SimpleType: RobotRulesParser(783) into TypeDeclaration: class(915) at 4", "Insert MethodDeclaration(809) into TypeDeclaration: class(915) at 5", "Insert MethodDeclaration(914) into TypeDeclaration: class(915) at 6", "Insert Modifier: public(916) into MethodDeclaration(955) at 0", "Insert Modifier: static(917) into MethodDeclaration(955) at 1", "Insert PrimitiveType: void(918) into MethodDeclaration(955) at 2", "Insert SimpleName: main(919) into MethodDeclaration(955) at 3", "Insert SingleVariableDeclaration(925) into MethodDeclaration(955) at 4", "Move SimpleType: Exception(579) into MethodDeclaration(955) at 5", "Insert Block(954) into MethodDeclaration(955) at 6", "Insert TextElement: Protocol-specific implementations have to implement the method(69) into TagElement(73) at 4", "Insert TagElement: @link(71) into TagElement(73) at 5", "Insert TextElement: .(72) into TagElement(73) at 6", "Insert TagElement(182) into Javadoc(183) at 0", "Insert SimpleType: Set(186) into ParameterizedType: Set<String>(189) at 0", "Insert SimpleType: String(188) into ParameterizedType: Set<String>(189) at 1", "Insert SimpleName: whiteList(190) into VariableDeclarationFragment(197) at 0", "Insert ClassInstanceCreation(196) into VariableDeclarationFragment(197) at 1", "Insert VariableDeclarationStatement(357) into Block(382) at 6", "Insert IfStatement(381) into Block(382) at 7", "Insert TagElement(399) into Javadoc(400) at 0", "Insert SimpleType: URL(405) into SingleVariableDeclaration(407) at 0", "Insert SimpleName: url(406) into SingleVariableDeclaration(407) at 1", "Insert ReturnStatement(414) into Block(415) at 0", "Insert TagElement: @param(520) into Javadoc(526) at 1", "Insert TagElement: @param(523) into Javadoc(526) at 2", "Insert TagElement: @return(525) into Javadoc(526) at 3", "Insert SimpleName: BaseRobotRules(529) into SimpleType: BaseRobotRules(530) at 0", "Insert SimpleType: Protocol(533) into SingleVariableDeclaration(535) at 0", "Insert SimpleName: protocol(534) into SingleVariableDeclaration(535) at 1", "Insert SimpleType: URL(537) into SingleVariableDeclaration(539) at 0", "Insert SimpleName: url(538) into SingleVariableDeclaration(539) at 1", "Insert SimpleName: Override(541) into MarkerAnnotation(542) at 0", "Update SimpleName: argv(449) to args", "Move VariableDeclarationStatement(506) into Block(768) at 1", "Insert VariableDeclarationStatement(614) into Block(768) at 2", "Insert IfStatement(637) into Block(768) at 3", "Insert TryStatement(765) into Block(768) at 4", "Insert ReturnStatement(767) into Block(768) at 5", "Insert TagElement(777) into Javadoc(778) at 0", "Insert SimpleName: RobotRulesParser(782) into SimpleType: RobotRulesParser(783) at 0", "Insert Modifier: public(784) into MethodDeclaration(809) at 0", "Insert SimpleName: TestRobotRulesParser(785) into MethodDeclaration(809) at 1", "Insert SingleVariableDeclaration(789) into MethodDeclaration(809) at 2", "Insert Block(808) into MethodDeclaration(809) at 3", "Insert Javadoc(816) into MethodDeclaration(914) at 0", "Insert Modifier: public(817) into MethodDeclaration(914) at 1", "Move SimpleType: BaseRobotRules(427) into MethodDeclaration(914) at 2", "Insert SimpleName: getRobotRulesSet(820) into MethodDeclaration(914) at 3", "Move SingleVariableDeclaration(432) into MethodDeclaration(914) at 4", "Move SingleVariableDeclaration(436) into MethodDeclaration(914) at 5", "Insert Block(913) into MethodDeclaration(914) at 6", "Insert ArrayType: String[](923) into SingleVariableDeclaration(925) at 0", "Insert SimpleName: args(924) into SingleVariableDeclaration(925) at 1", "Insert VariableDeclarationStatement(935) into Block(954) at 0", "Insert VariableDeclarationStatement(948) into Block(954) at 1", "Insert ExpressionStatement(953) into Block(954) at 2", "Insert SimpleName: getRobotRulesSet(70) into TagElement: @link(71) at 0", "Insert TextElement: set of host names or IPs to be explicitly excluded from robots.txt checking (181) into TagElement(182) at 0", "Insert SimpleName: Set(185) into SimpleType: Set(186) at 0", "Insert SimpleName: String(187) into SimpleType: String(188) at 0", "Insert ParameterizedType: HashSet<String>(195) into ClassInstanceCreation(196) at 0", "Insert ArrayType: String[](350) into VariableDeclarationStatement(357) at 0", "Insert VariableDeclarationFragment(356) into VariableDeclarationStatement(357) at 1", "Insert InfixExpression: &&(364) into IfStatement(381) at 0", "Insert Block(380) into IfStatement(381) at 1", "Insert TextElement: Check whether a URL belongs to a whitelisted host.(398) into TagElement(399) at 0", "Insert SimpleName: URL(404) into SimpleType: URL(405) at 0", "Insert MethodInvocation(413) into ReturnStatement(414) at 0", "Insert TextElement: Fetch robots.txt (or it's protocol-specific equivalent) which applies to(514) into TagElement(517) at 0", "Update TextElement: command-line main for testing (438) to the given URL, parse it and return the set of robot rules applicable for", "Insert TextElement: the configured agent name(s).(516) into TagElement(517) at 2", "Insert SimpleName: protocol(518) into TagElement: @param(520) at 0", "Insert TextElement: protocol implementation(519) into TagElement: @param(520) at 1", "Insert SimpleName: url(521) into TagElement: @param(523) at 0", "Insert TextElement: URL to be checked whether fetching is allowed by robot rules(522) into TagElement: @param(523) at 1", "Insert TextElement:  robot rules(524) into TagElement: @return(525) at 0", "Insert SimpleName: Protocol(532) into SimpleType: Protocol(533) at 0", "Insert SimpleName: URL(536) into SimpleType: URL(537) at 0", "Update InfixExpression: !=(453) to <", "Move SimpleType: File(499) into VariableDeclarationStatement(603) at 0", "Insert SimpleType: File(605) into VariableDeclarationStatement(614) at 0", "Insert VariableDeclarationFragment(613) into VariableDeclarationStatement(614) at 1", "Insert InfixExpression: >(617) into IfStatement(637) at 0", "Insert Block(636) into IfStatement(637) at 1", "Insert Block(745) into TryStatement(765) at 0", "Move CatchClause(587) into TryStatement(765) at 1", "Insert NumberLiteral: 0(766) into ReturnStatement(767) at 0", "Insert TagElement: @link(771) into TagElement(777) at 0", "Insert TextElement:  implementation which expects the location of the(772) into TagElement(777) at 1", "Insert TextElement: robots.txt passed by URL (usually pointing to a local file) in(773) into TagElement(777) at 2", "Insert TagElement: @link(775) into TagElement(777) at 3", "Insert TextElement: .(776) into TagElement(777) at 4", "Insert SimpleType: Configuration(787) into SingleVariableDeclaration(789) at 0", "Insert SimpleName: conf(788) into SingleVariableDeclaration(789) at 1", "Insert IfStatement(803) into Block(808) at 0", "Insert ExpressionStatement(807) into Block(808) at 1", "Insert TagElement: @param(812) into Javadoc(816) at 0", "Insert TagElement: @param(815) into Javadoc(816) at 1", "Insert VariableDeclarationStatement(833) into Block(913) at 0", "Insert TryStatement(910) into Block(913) at 1", "Insert ReturnStatement(912) into Block(913) at 2", "Insert SimpleType: String(921) into ArrayType: String[](923) at 0", "Insert Dimension(922) into ArrayType: String[](923) at 1", "Insert SimpleType: Configuration(929) into VariableDeclarationStatement(935) at 0", "Insert VariableDeclarationFragment(934) into VariableDeclarationStatement(935) at 1", "Insert PrimitiveType: int(936) into VariableDeclarationStatement(948) at 0", "Insert VariableDeclarationFragment(947) into VariableDeclarationStatement(948) at 1", "Insert MethodInvocation(952) into ExpressionStatement(953) at 0", "Insert SimpleType: HashSet(192) into ParameterizedType: HashSet<String>(195) at 0", "Insert SimpleType: String(194) into ParameterizedType: HashSet<String>(195) at 1", "Insert SimpleType: String(348) into ArrayType: String[](350) at 0", "Insert Dimension(349) into ArrayType: String[](350) at 1", "Insert SimpleName: confWhiteList(351) into VariableDeclarationFragment(356) at 0", "Insert MethodInvocation(355) into VariableDeclarationFragment(356) at 1", "Insert InfixExpression: !=(360) into InfixExpression: &&(364) at 0", "Insert InfixExpression: >(363) into InfixExpression: &&(364) at 1", "Insert ExpressionStatement(372) into Block(380) at 0", "Insert ExpressionStatement(379) into Block(380) at 1", "Insert SimpleName: whiteList(408) into MethodInvocation(413) at 0", "Insert SimpleName: contains(409) into MethodInvocation(413) at 1", "Insert MethodInvocation(412) into MethodInvocation(413) at 2", "Update QualifiedName: argv.length(451) to args.length", "Update NumberLiteral: 3(452) to 2", "Insert VariableDeclarationStatement(572) into Block(591) at 0", "Insert EnhancedForStatement(584) into Block(591) at 1", "Update SimpleName: robotsBytes(495) to robotsFile", "Insert ClassInstanceCreation(601) into VariableDeclarationFragment(602) at 1", "Insert SimpleName: File(604) into SimpleType: File(605) at 0", "Insert SimpleName: urlFile(606) into VariableDeclarationFragment(613) at 0", "Insert ClassInstanceCreation(612) into VariableDeclarationFragment(613) at 1", "Insert QualifiedName: args.length(615) into InfixExpression: >(617) at 0", "Insert NumberLiteral: 2(616) into InfixExpression: >(617) at 1", "Insert VariableDeclarationStatement(625) into Block(636) at 0", "Insert ExpressionStatement(631) into Block(636) at 1", "Insert ExpressionStatement(635) into Block(636) at 2", "Insert VariableDeclarationStatement(650) into Block(745) at 0", "Move VariableDeclarationStatement(536) into Block(745) at 1", "Move VariableDeclarationStatement(546) into Block(745) at 2", "Insert ExpressionStatement(675) into Block(745) at 3", "Move WhileStatement(572) into Block(745) at 4", "Move ExpressionStatement(576) into Block(745) at 5", "Insert SimpleName: RobotRulesParser(770) into TagElement: @link(771) at 0", "Insert SimpleName: getRobotRulesSet(774) into TagElement: @link(775) at 0", "Insert SimpleName: Configuration(786) into SimpleType: Configuration(787) at 0", "Insert InfixExpression: ==(795) into IfStatement(803) at 0", "Insert Block(802) into IfStatement(803) at 1", "Insert MethodInvocation(806) into ExpressionStatement(807) at 0", "Insert SimpleName: protocol(810) into TagElement: @param(812) at 0", "Insert TextElement:   (ignored)(811) into TagElement: @param(812) at 1", "Insert SimpleName: url(813) into TagElement: @param(815) at 0", "Insert TextElement: location of the robots.txt file(814) into TagElement: @param(815) at 1", "Insert SimpleType: BaseRobotRules(830) into VariableDeclarationStatement(833) at 0", "Insert VariableDeclarationFragment(832) into VariableDeclarationStatement(833) at 1", "Insert Block(888) into TryStatement(910) at 0", "Insert CatchClause(909) into TryStatement(910) at 1", "Insert SimpleName: rules(911) into ReturnStatement(912) at 0", "Insert SimpleName: String(920) into SimpleType: String(921) at 0", "Insert SimpleName: Configuration(928) into SimpleType: Configuration(929) at 0", "Insert SimpleName: conf(930) into VariableDeclarationFragment(934) at 0", "Insert MethodInvocation(933) into VariableDeclarationFragment(934) at 1", "Insert SimpleName: res(937) into VariableDeclarationFragment(947) at 0", "Insert MethodInvocation(946) into VariableDeclarationFragment(947) at 1", "Insert SimpleName: System(949) into MethodInvocation(952) at 0", "Insert SimpleName: exit(950) into MethodInvocation(952) at 1", "Insert SimpleName: res(951) into MethodInvocation(952) at 2", "Insert SimpleName: HashSet(191) into SimpleType: HashSet(192) at 0", "Insert SimpleName: String(193) into SimpleType: String(194) at 0", "Insert SimpleName: String(347) into SimpleType: String(348) at 0", "Insert SimpleName: conf(352) into MethodInvocation(355) at 0", "Insert SimpleName: getStrings(353) into MethodInvocation(355) at 1", "Insert StringLiteral: \"http.robot.rules.whitelist\"(354) into MethodInvocation(355) at 2", "Insert SimpleName: confWhiteList(358) into InfixExpression: !=(360) at 0", "Insert NullLiteral(359) into InfixExpression: !=(360) at 1", "Insert QualifiedName: confWhiteList.length(361) into InfixExpression: >(363) at 0", "Insert NumberLiteral: 0(362) into InfixExpression: >(363) at 1", "Insert MethodInvocation(371) into ExpressionStatement(372) at 0", "Insert MethodInvocation(378) into ExpressionStatement(379) at 0", "Insert SimpleName: url(410) into MethodInvocation(412) at 0", "Insert SimpleName: getHost(411) into MethodInvocation(412) at 1", "Insert ArrayType: String[](558) into VariableDeclarationStatement(572) at 0", "Insert VariableDeclarationFragment(571) into VariableDeclarationStatement(572) at 1", "Insert SingleVariableDeclaration(576) into EnhancedForStatement(584) at 0", "Insert SimpleName: help(577) into EnhancedForStatement(584) at 1", "Insert Block(583) into EnhancedForStatement(584) at 2", "Insert SimpleType: File(597) into ClassInstanceCreation(601) at 0", "Move ArrayAccess(502) into ClassInstanceCreation(601) at 1", "Insert SimpleType: File(608) into ClassInstanceCreation(612) at 0", "Insert ArrayAccess(611) into ClassInstanceCreation(612) at 1", "Insert SimpleType: String(619) into VariableDeclarationStatement(625) at 0", "Insert VariableDeclarationFragment(624) into VariableDeclarationStatement(625) at 1", "Insert MethodInvocation(630) into ExpressionStatement(631) at 0", "Insert MethodInvocation(634) into ExpressionStatement(635) at 0", "Move SimpleType: BaseRobotRules(508) into VariableDeclarationStatement(650) at 0", "Insert VariableDeclarationFragment(649) into VariableDeclarationStatement(650) at 1", "Insert SimpleType: String(664) into VariableDeclarationStatement(667) at 0", "Insert Assignment: =(674) into ExpressionStatement(675) at 0", "Insert Block(739) into WhileStatement(740) at 1", "Insert SimpleType: IOException(747) into SingleVariableDeclaration(749) at 0", "Insert ReturnStatement(762) into Block(763) at 1", "Insert MethodInvocation(793) into InfixExpression: ==(795) at 0", "Insert NullLiteral(794) into InfixExpression: ==(795) at 1", "Insert ExpressionStatement(801) into Block(802) at 0", "Insert SimpleName: setConf(804) into MethodInvocation(806) at 0", "Insert SimpleName: conf(805) into MethodInvocation(806) at 1", "Insert SimpleName: BaseRobotRules(829) into SimpleType: BaseRobotRules(830) at 0", "Insert SimpleName: rules(831) into VariableDeclarationFragment(832) at 0", "Insert VariableDeclarationStatement(842) into Block(888) at 0", "Insert VariableDeclarationStatement(853) into Block(888) at 1", "Insert VariableDeclarationStatement(861) into Block(888) at 2", "Insert ExpressionStatement(866) into Block(888) at 3", "Insert ExpressionStatement(870) into Block(888) at 4", "Insert ExpressionStatement(887) into Block(888) at 5", "Insert SingleVariableDeclaration(892) into CatchClause(909) at 0", "Insert Block(908) into CatchClause(909) at 1", "Insert SimpleName: NutchConfiguration(931) into MethodInvocation(933) at 0", "Insert SimpleName: create(932) into MethodInvocation(933) at 1", "Insert SimpleName: ToolRunner(938) into MethodInvocation(946) at 0", "Insert SimpleName: run(939) into MethodInvocation(946) at 1", "Insert SimpleName: conf(940) into MethodInvocation(946) at 2", "Insert ClassInstanceCreation(944) into MethodInvocation(946) at 3", "Insert SimpleName: args(945) into MethodInvocation(946) at 4", "Insert SimpleName: whiteList(365) into MethodInvocation(371) at 0", "Insert SimpleName: addAll(366) into MethodInvocation(371) at 1", "Insert MethodInvocation(370) into MethodInvocation(371) at 2", "Insert SimpleName: LOG(373) into MethodInvocation(378) at 0", "Insert SimpleName: info(374) into MethodInvocation(378) at 1", "Insert InfixExpression: +(377) into MethodInvocation(378) at 2", "Insert SimpleType: String(556) into ArrayType: String[](558) at 0", "Insert Dimension(557) into ArrayType: String[](558) at 1", "Insert SimpleName: help(559) into VariableDeclarationFragment(571) at 0", "Insert ArrayInitializer(570) into VariableDeclarationFragment(571) at 1", "Move SimpleType: String(538) into SingleVariableDeclaration(576) at 0", "Insert SimpleName: s(575) into SingleVariableDeclaration(576) at 1", "Move ExpressionStatement(483) into Block(583) at 0", "Insert SimpleName: File(596) into SimpleType: File(597) at 0", "Update SimpleName: argv(500) to args", "Insert SimpleName: File(607) into SimpleType: File(608) at 0", "Update SimpleName: argv(512) to args", "Move SimpleName: argv(512) into ArrayAccess(611) at 0", "Update NumberLiteral: 0(513) to 1", "Move NumberLiteral: 0(513) into ArrayAccess(611) at 1", "Insert SimpleName: String(618) into SimpleType: String(619) at 0", "Insert SimpleName: agents(620) into VariableDeclarationFragment(624) at 0", "Insert ArrayAccess(623) into VariableDeclarationFragment(624) at 1", "Insert SimpleName: conf(626) into MethodInvocation(630) at 0", "Insert SimpleName: set(627) into MethodInvocation(630) at 1", "Insert StringLiteral: \"http.agent.name\"(628) into MethodInvocation(630) at 2", "Insert SimpleName: agents(629) into MethodInvocation(630) at 3", "Insert SimpleName: setConf(632) into MethodInvocation(634) at 0", "Insert SimpleName: conf(633) into MethodInvocation(634) at 1", "Insert SimpleName: rules(640) into VariableDeclarationFragment(649) at 0", "Insert MethodInvocation(648) into VariableDeclarationFragment(649) at 1", "Insert SimpleName: String(663) into SimpleType: String(664) at 0", "Insert SimpleName: testPath(668) into Assignment: =(674) at 0", "Move MethodInvocation(544) into Assignment: =(674) at 1", "Insert TryStatement(732) into Block(739) at 0", "Move ExpressionStatement(570) into Block(739) at 1", "Insert SimpleName: IOException(746) into SimpleType: IOException(747) at 0", "Insert PrefixExpression: -(761) into ReturnStatement(762) at 0", "Insert SimpleName: conf(790) into MethodInvocation(793) at 0", "Insert SimpleName: get(791) into MethodInvocation(793) at 1", "Insert StringLiteral: \"http.agent.name\"(792) into MethodInvocation(793) at 2", "Insert MethodInvocation(800) into ExpressionStatement(801) at 0", "Insert PrimitiveType: int(834) into VariableDeclarationStatement(842) at 0", "Insert VariableDeclarationFragment(841) into VariableDeclarationStatement(842) at 1", "Move ArrayType: byte[](494) into VariableDeclarationStatement(853) at 0", "Insert VariableDeclarationFragment(852) into VariableDeclarationStatement(853) at 1", "Insert SimpleType: InputStream(855) into VariableDeclarationStatement(861) at 0", "Insert VariableDeclarationFragment(860) into VariableDeclarationStatement(861) at 1", "Insert MethodInvocation(865) into ExpressionStatement(866) at 0", "Insert MethodInvocation(869) into ExpressionStatement(870) at 0", "Insert Assignment: =(886) into ExpressionStatement(887) at 0", "Insert SimpleType: IOException(890) into SingleVariableDeclaration(892) at 0", "Insert SimpleName: e(891) into SingleVariableDeclaration(892) at 1", "Insert ExpressionStatement(903) into Block(908) at 0", "Insert ExpressionStatement(907) into Block(908) at 1", "Insert SimpleType: TestRobotRulesParser(942) into ClassInstanceCreation(944) at 0", "Insert SimpleName: conf(943) into ClassInstanceCreation(944) at 1", "Insert SimpleName: Arrays(367) into MethodInvocation(370) at 0", "Insert SimpleName: asList(368) into MethodInvocation(370) at 1", "Insert SimpleName: confWhiteList(369) into MethodInvocation(370) at 2", "Insert StringLiteral: \"Whitelisted hosts: \"(375) into InfixExpression: +(377) at 0", "Insert SimpleName: whiteList(376) into InfixExpression: +(377) at 1", "Insert SimpleName: String(555) into SimpleType: String(556) at 0", "Insert StringLiteral: \"Usage: RobotRulesParser <robots-file> <url-file> [<agent-names>]\\n\"(560) into ArrayInitializer(570) at 0", "Insert StringLiteral: \"\\tThe <robots-file> will be parsed as a robots.txt file,\"(561) into ArrayInitializer(570) at 1", "Insert StringLiteral: \"\\tusing the given <agent-name> to select rules.\"(562) into ArrayInitializer(570) at 2", "Insert StringLiteral: \"\\tURLs will be read (one per line) from <url-file>,\"(563) into ArrayInitializer(570) at 3", "Insert StringLiteral: \"\\tand tested against the rules.\"(564) into ArrayInitializer(570) at 4", "Insert StringLiteral: \"\\tMultiple agent names can be provided using\"(565) into ArrayInitializer(570) at 5", "Insert StringLiteral: \"\\tcomma as a delimiter without any spaces.\"(566) into ArrayInitializer(570) at 6", "Insert StringLiteral: \"\\tIf no agent name is given the property http.agent.name\"(567) into ArrayInitializer(570) at 7", "Insert StringLiteral: \"\\tis used. If http.agent.name is empty, robots.txt is checked\"(568) into ArrayInitializer(570) at 8", "Insert StringLiteral: \"\\tfor rules assigned to the user agent `*' (meaning any other).\"(569) into ArrayInitializer(570) at 9", "Update SimpleName: argv(517) to args", "Move SimpleName: argv(517) into ArrayAccess(623) at 0", "Move NumberLiteral: 2(518) into ArrayAccess(623) at 1", "Insert SimpleName: getRobotRulesSet(641) into MethodInvocation(648) at 0", "Insert NullLiteral(642) into MethodInvocation(648) at 1", "Insert MethodInvocation(647) into MethodInvocation(648) at 2", "Insert Block(725) into TryStatement(732) at 0", "Insert CatchClause(731) into TryStatement(732) at 1", "Insert SimpleName: LOG(750) into MethodInvocation(758) at 0", "Update SimpleName: e(582) to error", "Insert InfixExpression: +(757) into MethodInvocation(758) at 2", "Insert NumberLiteral: 1(760) into PrefixExpression: -(761) at 0", "Insert SimpleName: conf(796) into MethodInvocation(800) at 0", "Insert SimpleName: set(797) into MethodInvocation(800) at 1", "Insert StringLiteral: \"http.agent.name\"(798) into MethodInvocation(800) at 2", "Insert StringLiteral: \"*\"(799) into MethodInvocation(800) at 3", "Insert SimpleName: contentLength(835) into VariableDeclarationFragment(841) at 0", "Insert MethodInvocation(840) into VariableDeclarationFragment(841) at 1", "Insert SimpleName: robotsBytes(846) into VariableDeclarationFragment(852) at 0", "Insert ArrayCreation(851) into VariableDeclarationFragment(852) at 1", "Insert SimpleName: InputStream(854) into SimpleType: InputStream(855) at 0", "Insert SimpleName: openStream(856) into VariableDeclarationFragment(860) at 0", "Insert MethodInvocation(859) into VariableDeclarationFragment(860) at 1", "Insert SimpleName: openStream(862) into MethodInvocation(865) at 0", "Insert SimpleName: read(863) into MethodInvocation(865) at 1", "Insert SimpleName: robotsBytes(864) into MethodInvocation(865) at 2", "Insert SimpleName: openStream(867) into MethodInvocation(869) at 0", "Insert SimpleName: close(868) into MethodInvocation(869) at 1", "Insert SimpleName: rules(871) into Assignment: =(886) at 0", "Insert MethodInvocation(885) into Assignment: =(886) at 1", "Insert SimpleName: IOException(889) into SimpleType: IOException(890) at 0", "Insert MethodInvocation(902) into ExpressionStatement(903) at 0", "Insert Assignment: =(906) into ExpressionStatement(907) at 0", "Insert SimpleName: TestRobotRulesParser(941) into SimpleType: TestRobotRulesParser(942) at 0", "Insert SimpleName: s(580) into MethodInvocation(581) at 2", "Insert MethodInvocation(645) into MethodInvocation(647) at 0", "Insert SimpleName: toURL(646) into MethodInvocation(647) at 1", "Insert SimpleName: urlFile(658) into ClassInstanceCreation(659) at 1", "Insert VariableDeclarationStatement(687) into Block(725) at 0", "Insert VariableDeclarationStatement(692) into Block(725) at 1", "Insert IfStatement(716) into Block(725) at 2", "Move ExpressionStatement(564) into Block(725) at 3", "Insert SingleVariableDeclaration(729) into CatchClause(731) at 0", "Insert Block(730) into CatchClause(731) at 1", "Insert StringLiteral: \"Failed to run: \"(752) into InfixExpression: +(757) at 0", "Insert MethodInvocation(756) into InfixExpression: +(757) at 1", "Insert MethodInvocation(838) into MethodInvocation(840) at 0", "Insert SimpleName: getContentLength(839) into MethodInvocation(840) at 1", "Insert ArrayType: byte[](849) into ArrayCreation(851) at 0", "Insert SimpleName: contentLength(850) into ArrayCreation(851) at 1", "Insert SimpleName: url(857) into MethodInvocation(859) at 0", "Insert SimpleName: openStream(858) into MethodInvocation(859) at 1", "Insert SimpleName: robotParser(872) into MethodInvocation(885) at 0", "Insert SimpleName: parseContent(873) into MethodInvocation(885) at 1", "Insert MethodInvocation(876) into MethodInvocation(885) at 2", "Insert SimpleName: robotsBytes(877) into MethodInvocation(885) at 3", "Insert StringLiteral: \"text/plain\"(878) into MethodInvocation(885) at 4", "Insert MethodInvocation(884) into MethodInvocation(885) at 5", "Insert SimpleName: LOG(893) into MethodInvocation(902) at 0", "Insert SimpleName: error(894) into MethodInvocation(902) at 1", "Insert InfixExpression: +(901) into MethodInvocation(902) at 2", "Insert SimpleName: rules(904) into Assignment: =(906) at 0", "Insert SimpleName: EMPTY_RULES(905) into Assignment: =(906) at 1", "Insert SimpleName: robotsFile(643) into MethodInvocation(645) at 0", "Insert SimpleName: toURI(644) into MethodInvocation(645) at 1", "Insert SimpleType: URL(680) into VariableDeclarationStatement(687) at 0", "Insert VariableDeclarationFragment(686) into VariableDeclarationStatement(687) at 1", "Insert SimpleType: String(689) into VariableDeclarationStatement(692) at 0", "Insert VariableDeclarationFragment(691) into VariableDeclarationStatement(692) at 1", "Insert MethodInvocation(695) into IfStatement(716) at 0", "Insert Block(700) into IfStatement(716) at 1", "Insert IfStatement(715) into IfStatement(716) at 2", "Insert SimpleType: MalformedURLException(727) into SingleVariableDeclaration(729) at 0", "Insert SimpleName: e(728) into SingleVariableDeclaration(729) at 1", "Insert SimpleName: StringUtils(753) into MethodInvocation(756) at 0", "Insert SimpleName: stringifyException(754) into MethodInvocation(756) at 1", "Update SimpleName: printStackTrace(583) to e", "Move SimpleName: printStackTrace(583) into MethodInvocation(756) at 2", "Insert SimpleName: url(836) into MethodInvocation(838) at 0", "Insert SimpleName: openConnection(837) into MethodInvocation(838) at 1", "Insert PrimitiveType: byte(847) into ArrayType: byte[](849) at 0", "Insert Dimension(848) into ArrayType: byte[](849) at 1", "Insert SimpleName: url(874) into MethodInvocation(876) at 0", "Insert SimpleName: toString(875) into MethodInvocation(876) at 1", "Insert FieldAccess(881) into MethodInvocation(884) at 0", "Insert SimpleName: get(882) into MethodInvocation(884) at 1", "Insert StringLiteral: \"http.agent.name\"(883) into MethodInvocation(884) at 2", "Insert StringLiteral: \"Failed to open robots.txt file \"(895) into InfixExpression: +(901) at 0", "Insert SimpleName: url(896) into InfixExpression: +(901) at 1", "Insert MethodInvocation(900) into InfixExpression: +(901) at 2", "Insert SimpleName: URL(679) into SimpleType: URL(680) at 0", "Insert SimpleName: url(681) into VariableDeclarationFragment(686) at 0", "Insert ClassInstanceCreation(685) into VariableDeclarationFragment(686) at 1", "Insert SimpleName: String(688) into SimpleType: String(689) at 0", "Insert SimpleName: status(690) into VariableDeclarationFragment(691) at 0", "Insert SimpleName: isWhiteListed(693) into MethodInvocation(695) at 0", "Insert SimpleName: url(694) into MethodInvocation(695) at 1", "Insert ExpressionStatement(699) into Block(700) at 0", "Move MethodInvocation(555) into IfStatement(715) at 0", "Insert Block(709) into IfStatement(715) at 1", "Insert Block(714) into IfStatement(715) at 2", "Insert SimpleName: MalformedURLException(726) into SimpleType: MalformedURLException(727) at 0", "Insert ThisExpression(879) into FieldAccess(881) at 0", "Insert SimpleName: conf(880) into FieldAccess(881) at 1", "Insert SimpleName: StringUtils(897) into MethodInvocation(900) at 0", "Insert SimpleName: stringifyException(898) into MethodInvocation(900) at 1", "Insert SimpleName: e(899) into MethodInvocation(900) at 2", "Insert SimpleType: URL(683) into ClassInstanceCreation(685) at 0", "Insert SimpleName: testPath(684) into ClassInstanceCreation(685) at 1", "Insert Assignment: =(698) into ExpressionStatement(699) at 0", "Insert ExpressionStatement(708) into Block(709) at 0", "Insert ExpressionStatement(713) into Block(714) at 0", "Insert SimpleName: status(719) into InfixExpression: +(722) at 0", "Insert SimpleName: URL(682) into SimpleType: URL(683) at 0", "Insert SimpleName: status(696) into Assignment: =(698) at 0", "Insert StringLiteral: \"whitelisted\"(697) into Assignment: =(698) at 1", "Insert Assignment: =(707) into ExpressionStatement(708) at 0", "Insert Assignment: =(712) into ExpressionStatement(713) at 0", "Insert SimpleName: status(705) into Assignment: =(707) at 0", "Insert StringLiteral: \"allowed\"(706) into Assignment: =(707) at 1", "Insert SimpleName: status(710) into Assignment: =(712) at 0", "Insert StringLiteral: \"not allowed\"(711) into Assignment: =(712) at 1", "Delete Modifier: abstract(425)", "Delete SimpleName: getRobotRulesSet(428)", "Delete StringLiteral: \"\\tcomma as a delimiter without any spaces.\"(481)", "Delete QualifiedName: System.err(454)", "Delete SimpleName: println(455)", "Delete StringLiteral: \"Usage: RobotRulesParser <robots-file> <url-file> <agent-names>\\n\"(456)", "Delete MethodInvocation(457)", "Delete ExpressionStatement(458)", "Delete QualifiedName: System.err(459)", "Delete SimpleName: println(460)", "Delete StringLiteral: \"\\tThe <robots-file> will be parsed as a robots.txt file,\"(461)", "Delete MethodInvocation(462)", "Delete ExpressionStatement(463)", "Delete QualifiedName: System.err(464)", "Delete SimpleName: println(465)", "Delete StringLiteral: \"\\tusing the given <agent-name> to select rules.  URLs \"(466)", "Delete MethodInvocation(467)", "Delete ExpressionStatement(468)", "Delete QualifiedName: System.err(469)", "Delete SimpleName: println(470)", "Delete StringLiteral: \"\\twill be read (one per line) from <url-file>, and tested\"(471)", "Delete MethodInvocation(472)", "Delete ExpressionStatement(473)", "Delete QualifiedName: System.err(474)", "Delete SimpleName: println(475)", "Delete StringLiteral: \"\\tagainst the rules. Multiple agent names can be provided using\"(476)", "Delete MethodInvocation(477)", "Delete ExpressionStatement(478)", "Delete SimpleName: Files(496)", "Delete SimpleName: toByteArray(497)", "Delete ClassInstanceCreation(503)", "Delete MethodInvocation(504)", "Delete SimpleName: argv(530)", "Delete NumberLiteral: 1(531)", "Delete ArrayAccess(532)", "Delete StringLiteral: \"allowed\"(556)", "Delete StringLiteral: \"not allowed\"(557)", "Delete ConditionalExpression(558)", "Delete ParenthesizedExpression(559)", "Delete Block(571)", "Delete SimpleName: rules(509)", "Delete SimpleName: robotParser(510)", "Delete SimpleName: parseContent(511)", "Delete ArrayAccess(514)", "Delete SimpleName: robotsBytes(515)", "Delete StringLiteral: \"text/plain\"(516)", "Delete ArrayAccess(519)", "Delete MethodInvocation(520)", "Delete VariableDeclarationFragment(521)", "Delete VariableDeclarationStatement(522)", "Delete Block(577)", "Delete TryStatement(588)", "Delete MethodDeclaration(590)"]}}, {"FtpRobotRulesParser_cluster": {"actions": [{"root": "INS IfStatement to Block at 2", "operations": ["INS Block to IfStatement at 1", "INS SimpleName: trace to MethodInvocation at 1", "INS StringLiteral: \"Ignoring robots.txt (host is whitelisted) for URL: {}\" to MethodInvocation at 2", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: isWhiteListed to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: isTraceEnabled to MethodInvocation at 1", "INS SimpleName: url to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: && at 1", "INS IfStatement to Block at 2", "INS SimpleName: url to MethodInvocation at 3", "INS SimpleName: LOG to MethodInvocation at 0", "INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: && at 0"]}, {"root": "INS IfStatement to Block at 4", "operations": ["INS ReturnStatement to Block at 0", "INS Block to IfStatement at 1", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to IfStatement at 0", "INS IfStatement to Block at 4", "INS SimpleName: robotRules to ReturnStatement at 0", "INS SimpleName: robotRules to InfixExpression: != at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV IfStatement to IfStatement at 2", "MOV IfStatement to Block at 7"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS MethodInvocation to IfStatement at 0", "INS SimpleName: isWhiteListed to MethodInvocation at 0", "INS SimpleName: url to MethodInvocation at 1"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS SimpleName: info to MethodInvocation at 1", "INS SimpleName: info to MethodInvocation at 1", "INS SimpleName: LOG to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: EMPTY_RULES to Assignment: = at 1", "INS StringLiteral: \"Ignoring robots.txt for all URLs from whitelisted host: {}\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 2", "INS SimpleName: LOG to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \"Whitelisted host found for: {}\" to MethodInvocation at 2", "INS SimpleName: host to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: url to MethodInvocation at 3", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: robotRules to Assignment: = at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS Block to IfStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "DEL CastExpression", "operations": ["DEL CastExpression", "DEL SimpleName: SimpleRobotRules", "DEL SimpleType: SimpleRobotRules"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL SimpleName: robotRules", "DEL InfixExpression: ==", "DEL NullLiteral"]}]}}, {"FtpRobotRulesParser_diff": {"operations": ["Insert IfStatement(157) into Block(327) at 2", "Insert IfStatement(188) into Block(327) at 4", "Move IfStatement(285) into Block(327) at 7", "Insert InfixExpression: &&(149) into IfStatement(157) at 0", "Insert Block(156) into IfStatement(157) at 1", "Insert InfixExpression: !=(172) into IfStatement(188) at 0", "Insert Block(175) into IfStatement(188) at 1", "Move IfStatement(176) into IfStatement(188) at 2", "Insert MethodInvocation(196) into IfStatement(313) at 0", "Insert Block(213) into IfStatement(313) at 1", "Insert MethodInvocation(145) into InfixExpression: &&(149) at 0", "Insert MethodInvocation(148) into InfixExpression: &&(149) at 1", "Insert ExpressionStatement(155) into Block(156) at 0", "Move MethodInvocation(154) into VariableDeclarationFragment(168) at 1", "Insert SimpleName: robotRules(170) into InfixExpression: !=(172) at 0", "Insert NullLiteral(171) into InfixExpression: !=(172) at 1", "Insert ReturnStatement(174) into Block(175) at 0", "Insert Block(186) into IfStatement(187) at 1", "Insert SimpleName: isWhiteListed(194) into MethodInvocation(196) at 0", "Insert SimpleName: url(195) into MethodInvocation(196) at 1", "Insert ExpressionStatement(200) into Block(213) at 0", "Insert ExpressionStatement(206) into Block(213) at 1", "Insert ExpressionStatement(212) into Block(213) at 2", "Insert SimpleName: LOG(143) into MethodInvocation(145) at 0", "Insert SimpleName: isTraceEnabled(144) into MethodInvocation(145) at 1", "Insert SimpleName: isWhiteListed(146) into MethodInvocation(148) at 0", "Insert SimpleName: url(147) into MethodInvocation(148) at 1", "Insert MethodInvocation(154) into ExpressionStatement(155) at 0", "Insert SimpleName: robotRules(173) into ReturnStatement(174) at 0", "Move ExpressionStatement(175) into Block(186) at 0", "Insert Assignment: =(199) into ExpressionStatement(200) at 0", "Insert MethodInvocation(205) into ExpressionStatement(206) at 0", "Insert MethodInvocation(211) into ExpressionStatement(212) at 0", "Insert SimpleName: LOG(150) into MethodInvocation(154) at 0", "Insert SimpleName: trace(151) into MethodInvocation(154) at 1", "Insert StringLiteral: \"Ignoring robots.txt (host is whitelisted) for URL: {}\"(152) into MethodInvocation(154) at 2", "Insert SimpleName: url(153) into MethodInvocation(154) at 3", "Insert SimpleName: robotRules(197) into Assignment: =(199) at 0", "Insert SimpleName: EMPTY_RULES(198) into Assignment: =(199) at 1", "Insert SimpleName: LOG(201) into MethodInvocation(205) at 0", "Insert SimpleName: info(202) into MethodInvocation(205) at 1", "Insert StringLiteral: \"Whitelisted host found for: {}\"(203) into MethodInvocation(205) at 2", "Insert SimpleName: url(204) into MethodInvocation(205) at 3", "Insert SimpleName: LOG(207) into MethodInvocation(211) at 0", "Insert SimpleName: info(208) into MethodInvocation(211) at 1", "Insert StringLiteral: \"Ignoring robots.txt for all URLs from whitelisted host: {}\"(209) into MethodInvocation(211) at 2", "Insert SimpleName: host(210) into MethodInvocation(211) at 3", "Delete SimpleName: SimpleRobotRules(146)", "Delete SimpleType: SimpleRobotRules(147)", "Delete CastExpression(155)", "Delete SimpleName: robotRules(163)", "Delete NullLiteral(164)", "Delete InfixExpression: ==(165)"]}}, {"HttpRobotRulesParser_cluster": {"actions": [{"root": "INS IfStatement to Block at 0", "operations": ["INS SimpleName: url to MethodInvocation at 1", "INS SimpleName: url to MethodInvocation at 3", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: trace to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: isWhiteListed to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS MethodInvocation to InfixExpression: && at 0", "INS SimpleName: isTraceEnabled to MethodInvocation at 1", "INS StringLiteral: \"Ignoring robots.txt (host is whitelisted) for URL: {}\" to MethodInvocation at 2"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS SimpleName: robotRules to InfixExpression: != at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: robotRules to ReturnStatement at 0", "INS Block to IfStatement at 1", "INS NullLiteral to InfixExpression: != at 1", "INS IfStatement to Block at 3", "INS ReturnStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV IfStatement to IfStatement at 2", "MOV VariableDeclarationStatement to Block at 5", "MOV IfStatement to Block at 7"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS SimpleName: isWhiteListed to MethodInvocation at 0", "INS SimpleName: url to MethodInvocation at 1", "INS MethodInvocation to IfStatement at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS StringLiteral: \"Ignoring robots.txt for all URLs from whitelisted host: {}\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 3", "INS ExpressionStatement to Block at 2", "INS StringLiteral: \"Whitelisted host found for: {}\" to MethodInvocation at 2", "INS SimpleName: info to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getHost to MethodInvocation at 1", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: EMPTY_RULES to Assignment: = at 1", "INS Block to IfStatement at 1", "INS SimpleName: robotRules to Assignment: = at 0", "INS SimpleName: url to MethodInvocation at 0", "INS SimpleName: url to MethodInvocation at 3", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: info to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: crawlercommons.robots.SimpleRobotRules", "DEL ImportDeclaration"]}, {"root": "DEL CastExpression", "operations": ["DEL SimpleName: SimpleRobotRules", "DEL SimpleType: SimpleRobotRules", "DEL CastExpression"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL InfixExpression: ==", "DEL NullLiteral", "DEL SimpleName: robotRules"]}]}}, {"HttpRobotRulesParser_diff": {"operations": ["Insert IfStatement(218) into Block(510) at 0", "Insert IfStatement(254) into Block(510) at 3", "Move VariableDeclarationStatement(239) into Block(510) at 5", "Move IfStatement(469) into Block(510) at 7", "Insert InfixExpression: &&(210) into IfStatement(218) at 0", "Insert Block(217) into IfStatement(218) at 1", "Insert InfixExpression: !=(238) into IfStatement(254) at 0", "Insert Block(241) into IfStatement(254) at 1", "Move IfStatement(251) into IfStatement(254) at 2", "Insert MethodInvocation(268) into IfStatement(475) at 0", "Insert Block(287) into IfStatement(475) at 1", "Insert MethodInvocation(206) into InfixExpression: &&(210) at 0", "Insert MethodInvocation(209) into InfixExpression: &&(210) at 1", "Insert ExpressionStatement(216) into Block(217) at 0", "Move MethodInvocation(222) into VariableDeclarationFragment(234) at 1", "Insert SimpleName: robotRules(236) into InfixExpression: !=(238) at 0", "Insert NullLiteral(237) into InfixExpression: !=(238) at 1", "Insert ReturnStatement(240) into Block(241) at 0", "Insert SimpleName: isWhiteListed(266) into MethodInvocation(268) at 0", "Insert SimpleName: url(267) into MethodInvocation(268) at 1", "Insert ExpressionStatement(272) into Block(287) at 0", "Insert ExpressionStatement(278) into Block(287) at 1", "Insert ExpressionStatement(286) into Block(287) at 2", "Insert SimpleName: LOG(204) into MethodInvocation(206) at 0", "Insert SimpleName: isTraceEnabled(205) into MethodInvocation(206) at 1", "Insert SimpleName: isWhiteListed(207) into MethodInvocation(209) at 0", "Insert SimpleName: url(208) into MethodInvocation(209) at 1", "Insert MethodInvocation(215) into ExpressionStatement(216) at 0", "Insert SimpleName: robotRules(239) into ReturnStatement(240) at 0", "Insert Assignment: =(271) into ExpressionStatement(272) at 0", "Insert MethodInvocation(277) into ExpressionStatement(278) at 0", "Insert MethodInvocation(285) into ExpressionStatement(286) at 0", "Insert SimpleName: LOG(211) into MethodInvocation(215) at 0", "Insert SimpleName: trace(212) into MethodInvocation(215) at 1", "Insert StringLiteral: \"Ignoring robots.txt (host is whitelisted) for URL: {}\"(213) into MethodInvocation(215) at 2", "Insert SimpleName: url(214) into MethodInvocation(215) at 3", "Insert SimpleName: robotRules(269) into Assignment: =(271) at 0", "Insert SimpleName: EMPTY_RULES(270) into Assignment: =(271) at 1", "Insert SimpleName: LOG(273) into MethodInvocation(277) at 0", "Insert SimpleName: info(274) into MethodInvocation(277) at 1", "Insert StringLiteral: \"Whitelisted host found for: {}\"(275) into MethodInvocation(277) at 2", "Insert SimpleName: url(276) into MethodInvocation(277) at 3", "Insert SimpleName: LOG(279) into MethodInvocation(285) at 0", "Insert SimpleName: info(280) into MethodInvocation(285) at 1", "Insert StringLiteral: \"Ignoring robots.txt for all URLs from whitelisted host: {}\"(281) into MethodInvocation(285) at 2", "Insert MethodInvocation(284) into MethodInvocation(285) at 3", "Insert SimpleName: url(282) into MethodInvocation(284) at 0", "Insert SimpleName: getHost(283) into MethodInvocation(284) at 1", "Delete QualifiedName: crawlercommons.robots.SimpleRobotRules(34)", "Delete ImportDeclaration(35)", "Delete SimpleName: SimpleRobotRules(217)", "Delete SimpleType: SimpleRobotRules(218)", "Delete CastExpression(223)", "Delete SimpleName: robotRules(231)", "Delete NullLiteral(232)", "Delete InfixExpression: ==(233)"]}}], "commit_stats": [{"total_files": 7, "deleted_files": 1, "testing": "False", "maintenance": "False", "build": "False"}]}