{"application": "google-jimfs", "csha": "21c6644e5a69d4beed0a36b17a58997c5ed3d718", "files": [{"DirectoryTable_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 19"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS SimpleName: DirectoryEntry to SimpleType: DirectoryEntry at 0", "INS SimpleType: DirectoryEntry to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 1", "INS SimpleName: entry to VariableDeclarationFragment at 0", "INS Javadoc to FieldDeclaration at 0", "INS TagElement to Javadoc at 0", "INS TextElement: The entry linking to this directory in its parent directory. to TagElement at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 6"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS SimpleName: DirectoryEntry to SimpleType: DirectoryEntry at 0", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS Block to MethodDeclaration at 4", "INS SimpleType: DirectoryEntry to MethodDeclaration at 2", "INS SimpleName: entry to ReturnStatement at 0", "INS ReturnStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS SimpleName: self to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 19"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS Block to MethodDeclaration at 6", "INS SimpleName: file to MethodInvocation at 0", "INS SimpleName: isDirectory to MethodInvocation at 1", "INS SimpleType: DirectoryEntry to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: linked to MethodInvocation at 1", "INS SimpleName: entry to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 23", "INS SimpleName: table to MethodInvocation at 0", "INS IfStatement to Block at 1", "INS SimpleName: entry to VariableDeclarationFragment at 0", "INS MethodInvocation to IfStatement at 0", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 25", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: DirectoryEntry to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: isDirectory to MethodInvocation at 1", "INS SimpleName: entry to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Modifier: public to MethodDeclaration at 1", "INS IfStatement to Block at 2", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: table to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: content to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 25", "INS SimpleName: unlink to MethodDeclaration at 3", "INS SimpleName: file to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: unlinked to MethodInvocation at 1", "INS SimpleType: DirectoryTable to VariableDeclarationStatement at 0", "INS Block to IfStatement at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: file to MethodInvocation at 0", "INS SimpleName: file to MethodInvocation at 1", "INS SimpleName: table to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to IfStatement at 0", "INS ExpressionStatement to Block at 1"]}, {"root": "INS Javadoc to FieldDeclaration at 0", "operations": ["INS TextElement: Map for looking up an entry by name. to TagElement at 0", "INS TagElement to Javadoc at 0", "INS Javadoc to FieldDeclaration at 0"]}, {"root": "UPDATE from Map<Name,DirEntry> to Map<Name,DirectoryEntry>", "operations": ["UPD ParameterizedType: Map<Name,DirEntry> from Map<Name,DirEntry> to Map<Name,DirectoryEntry>", "UPD ParameterizedType: Map<Name,DirEntry> from Map<Name,DirEntry> to Map<Name,DirectoryEntry>"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS TextElement: Sets this directory as the super root. to TagElement at 0"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 3", "operations": ["INS PrimitiveType: void to MethodDeclaration at 3"]}, {"root": "UPDATE from self to setSuperRoot", "operations": ["UPD SimpleName: self from self to setSuperRoot"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 2", "operations": ["INS PrimitiveType: void to MethodDeclaration at 2"]}, {"root": "UPDATE from parent to setRoot", "operations": ["UPD SimpleName: parent from parent to setRoot"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 4", "MOV Modifier: public to MethodDeclaration at 1", "MOV Javadoc to MethodDeclaration at 0", "MOV SimpleType: DirectoryTable to VariableDeclarationStatement at 0", "MOV SimpleName: parentTable to MethodDeclaration at 3"]}, {"root": "UPDATE from parent to entry", "operations": ["UPD SimpleName: parent from parent to entry", "UPD SimpleName: parentTable from parentTable to entry", "UPD SimpleName: parentTable from parentTable to entry", "UPD SimpleName: checkNotNull from checkNotNull to entry", "UPD SimpleName: result from result to entry", "UPD SimpleName: checkNotNull from checkNotNull to entry", "UPD SimpleName: name from name to entry", "UPD SimpleName: entries from entries to entry"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV SimpleType: File to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: File to MethodDeclaration at 2"]}, {"root": "UPDATE from linkSelf to parent", "operations": ["UPD SimpleName: linkSelf from linkSelf to parent"]}, {"root": "UPDATE from linkParent to linked", "operations": ["UPD SimpleName: linkParent from linkParent to linked"]}, {"root": "UPDATE from unlinkSelf to unlinked", "operations": ["UPD SimpleName: unlinkSelf from unlinkSelf to unlinked"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 1", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 4", "MOV PrimitiveType: int to MethodDeclaration at 2", "MOV SimpleName: size to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV PrimitiveType: void to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SimpleName: link to MethodDeclaration at 3", "MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "UPDATE from DirEntry to DirectoryEntry", "operations": ["UPD SimpleType: DirEntry from DirEntry to DirectoryEntry", "UPD SimpleName: DirEntry from DirEntry to DirectoryEntry", "UPD SimpleType: Name from Name to DirectoryEntry", "UPD SimpleType: DirEntry from DirEntry to DirectoryEntry", "UPD SimpleType: DirEntry from DirEntry to DirectoryEntry", "UPD SimpleName: DirEntry from DirEntry to DirectoryEntry", "UPD SimpleName: Name from Name to DirectoryEntry", "UPD SimpleType: DirEntry from DirEntry to DirectoryEntry", "UPD SimpleType: DirEntry from DirEntry to DirectoryEntry", "UPD SimpleName: DirEntry from DirEntry to DirectoryEntry", "UPD SimpleName: DirEntry from DirEntry to DirectoryEntry", "UPD SimpleName: File from File to DirectoryEntry", "UPD SimpleName: DirEntry from DirEntry to DirectoryEntry", "UPD SimpleName: DirEntry from DirEntry to DirectoryEntry", "UPD SimpleName: DirEntry from DirEntry to DirectoryEntry", "UPD SimpleName: DirEntry from DirEntry to DirectoryEntry", "UPD SimpleName: Name from Name to DirectoryEntry"]}, {"root": "UPDATE from getName to linkInternal", "operations": ["UPD SimpleName: getName from getName to linkInternal"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SimpleType: DirectoryEntry to MethodDeclaration at 1", "operations": ["INS SimpleName: DirectoryEntry to SimpleType: DirectoryEntry at 0", "INS SimpleType: DirectoryEntry to MethodDeclaration at 1"]}, {"root": "UPDATE from Collection<DirEntry> to Collection<DirectoryEntry>", "operations": ["UPD ParameterizedType: Collection<DirEntry> from Collection<DirEntry> to Collection<DirectoryEntry>"]}, {"root": "UPDATE from A table of directory entries which link names to  to A table of ", "operations": ["UPD TextElement: A table of directory entries which link names to  from A table of directory entries which link names to  to A table of "]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ThisExpression to FieldAccess at 0", "INS StringLiteral: \"\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: file to ClassInstanceCreation at 3", "INS SimpleName: DirectoryEntry to SimpleType: DirectoryEntry at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: entry to FieldAccess at 1", "INS MethodInvocation to ClassInstanceCreation at 2", "INS SimpleType: DirectoryEntry to ClassInstanceCreation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: file to ClassInstanceCreation at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ThisExpression to FieldAccess at 0", "INS SimpleType: DirectoryEntry to ClassInstanceCreation at 0", "INS SimpleName: self to MethodInvocation at 0", "INS FieldAccess to Assignment: = at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: DirectoryEntry to SimpleType: DirectoryEntry at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: name to MethodInvocation at 0", "INS SimpleName: self to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ClassInstanceCreation at 3", "INS SimpleName: entry to FieldAccess at 1", "INS MethodInvocation to ClassInstanceCreation at 2"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: linkInternal to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: PARENT to MethodInvocation at 1"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS SimpleType: DirectoryEntry to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: DirectoryEntry to SingleVariableDeclaration at 0", "INS SimpleName: DirectoryEntry to SimpleType: DirectoryEntry at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: entry to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: entry to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: linkInternal to MethodInvocation at 0", "INS SimpleName: SELF to MethodInvocation at 1", "INS SimpleName: file to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: entry to MethodInvocation at 0", "INS ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2", "INS SimpleName: entry to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS NullLiteral to Assignment: = at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 3"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: DirectoryEntry to ClassInstanceCreation at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: DirectoryEntry to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: file to ClassInstanceCreation at 3", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: name to ClassInstanceCreation at 2", "INS SimpleName: entry to VariableDeclarationFragment at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleName: name to MethodInvocation at 2", "INS SimpleName: entry to MethodInvocation at 3", "INS SimpleName: entries to MethodInvocation at 0"]}, {"root": "INS ReturnStatement to Block at 3", "operations": ["INS SimpleName: entry to ReturnStatement at 0", "INS ReturnStatement to Block at 3"]}, {"root": "UPDATE from  files to  directory entries", "operations": ["UPD TextElement:  files from  files to  directory entries"]}, {"root": "UPDATE from Returns the parent directory. to Sets this directory as a root directory, linking \"..\" to itself.", "operations": ["UPD TextElement: Returns the parent directory. from Returns the parent directory. to Sets this directory as a root directory, linking \"..\" to itself."]}, {"root": "UPDATE from Returns the directory table for the parent directory. to Returns the entry linking to this directory in its parent.", "operations": ["UPD TextElement: Returns the directory table for the parent directory. from Returns the directory table for the parent directory. to Returns the entry linking to this directory in its parent."]}, {"root": "UPDATE from Returns the current name of this directory. This relies on the fact that multiple links to a to Returns the name of this directory.", "operations": ["UPD TextElement: Returns the current name of this directory. This relies on the fact that multiple links to a from Returns the current name of this directory. This relies on the fact that multiple links to a to Returns the name of this directory."]}, {"root": "UPDATE from Links this directory to its own file. to Returns the parent of this directory.", "operations": ["UPD TextElement: Links this directory to its own file. from Links this directory to its own file. to Returns the parent of this directory."]}, {"root": "INS TextElement: Called when this directory is linked in a parent directory. The given entry is the new entry to TagElement at 0", "operations": ["INS TextElement: Called when this directory is linked in a parent directory. The given entry is the new entry to TagElement at 0"]}, {"root": "UPDATE from Links this directory to the given parent file. to linking to this directory.", "operations": ["UPD TextElement: Links this directory to the given parent file. from Links this directory to the given parent file. to linking to this directory."]}, {"root": "UPDATE from Unlinks this directory from its own file. to Called when this directory is unlinked from its parent directory.", "operations": ["UPD TextElement: Unlinks this directory from its own file. from Unlinks this directory from its own file. to Called when this directory is unlinked from its parent directory."]}, {"root": "UPDATE from Unlinks this directory from its parent file. to Returns the number of entries in this directory.", "operations": ["UPD TextElement: Unlinks this directory from its parent file. from Unlinks this directory from its parent file. to Returns the number of entries in this directory."]}, {"root": "UPDATE from == to <=", "operations": ["UPD InfixExpression: == from == to <="]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: File to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from get to unlinkInternal", "operations": ["UPD SimpleName: get from get to unlinkInternal"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: PARENT to MethodInvocation at 1", "MOV SimpleName: get to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: entries to MethodInvocation at 0"]}, {"root": "INS SimpleName: file to MethodInvocation at 1", "operations": ["INS SimpleName: file to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: parentTable to MethodInvocation at 0"]}, {"root": "UPDATE from getName to name", "operations": ["UPD SimpleName: getName from getName to name"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: checkNotNull to MethodInvocation at 0", "MOV SimpleName: self to MethodInvocation at 1"]}, {"root": "UPDATE from parent to directory", "operations": ["UPD SimpleName: parent from parent to directory", "UPD SimpleName: self from self to directory"]}, {"root": "MOVE from SimpleType: DirectoryEntry", "operations": ["MOV SimpleName: DirEntry to SimpleType: DirectoryEntry at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from SimpleType: DirectoryEntry", "operations": ["MOV SimpleName: DirEntry to SimpleType: DirectoryEntry at 0"]}, {"root": "MOVE from SimpleType: DirectoryEntry", "operations": ["MOV SimpleName: Name to SimpleType: DirectoryEntry at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: name to VariableDeclarationFragment at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: file to VariableDeclarationFragment at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: entry to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: file to MethodInvocation at 1"]}, {"root": "UPDATE from get to Name", "operations": ["UPD SimpleName: get from get to Name"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: SELF to MethodInvocation at 1", "MOV SimpleName: get to MethodInvocation at 0"]}, {"root": "UPDATE from SELF to simple", "operations": ["UPD SimpleName: SELF from SELF to simple"]}, {"root": "UPDATE from entry to table", "operations": ["UPD SimpleName: entry from entry to table"]}, {"root": "MOVE from SimpleType: DirectoryEntry", "operations": ["MOV SimpleName: DirEntry to SimpleType: DirectoryEntry at 0"]}, {"root": "UPDATE from entry to self", "operations": ["UPD SimpleName: entry from entry to self"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: entry to MethodInvocation at 0"]}, {"root": "UPDATE from Name to DirectoryTable", "operations": ["UPD SimpleName: Name from Name to DirectoryTable"]}, {"root": "MOVE from SimpleType: DirectoryTable", "operations": ["MOV SimpleName: Name to SimpleType: DirectoryTable at 0"]}, {"root": "UPDATE from entries to file", "operations": ["UPD SimpleName: entries from entries to file"]}, {"root": "UPDATE from get to content", "operations": ["UPD SimpleName: get from get to content"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Preconditions.checkNotNull", "DEL ImportDeclaration"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL MethodInvocation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL MethodInvocation", "DEL ReturnStatement"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: file", "DEL FieldAccess", "DEL SimpleName: PARENT", "DEL MethodInvocation", "DEL SimpleName: get"]}, {"root": "DEL SimpleName: content", "operations": ["DEL SimpleName: content"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration"]}, {"root": "DEL TextElement: directory can't be created, not counting special self and parent links which don't apply", "operations": ["DEL TextElement: directory can't be created, not counting special self and parent links which don't apply"]}, {"root": "DEL TextElement: here. Note that this method cannot be used to get the name of a root directory, as its parent", "operations": ["DEL TextElement: here. Note that this method cannot be used to get the name of a root directory, as its parent"]}, {"root": "DEL TextElement: link is to itself.", "operations": ["DEL TextElement: link is to itself."]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL PrimitiveType: void", "operations": ["DEL PrimitiveType: void"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: self", "DEL SimpleType: File", "DEL SimpleName: File", "DEL SingleVariableDeclaration"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: SELF", "DEL MethodInvocation", "DEL SimpleName: linkInternal"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: unlinkParent", "DEL MethodDeclaration", "DEL PrimitiveType: void", "DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL MethodDeclaration"]}, {"root": "DEL SimpleType: DirEntry", "operations": ["DEL SimpleName: DirEntry", "DEL SimpleType: DirEntry"]}, {"root": "DEL SimpleName: name", "operations": ["DEL SimpleName: name"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: zero names or more than one name links to the key. Should only be used for getting the name of", "DEL TextElement: a directory, as directories cannot have more than one link.", "DEL Javadoc", "DEL TagElement", "DEL TextElement: Returns the name that links to the given file key in this directory, throwing an exception if"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleName: Name", "DEL VariableDeclarationFragment", "DEL SimpleType: Name", "DEL SimpleName: result", "DEL NullLiteral"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL ParameterizedType: Map.Entry<Name,DirEntry>", "DEL SimpleName: entry", "DEL ThrowStatement", "DEL SimpleName: result", "DEL VariableDeclarationFragment", "DEL Block", "DEL Block", "DEL SimpleName: name", "DEL SimpleName: result", "DEL StringLiteral: \"more than one name links to the given file\"", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: entry", "DEL VariableDeclarationFragment", "DEL SimpleName: Name", "DEL QualifiedName: Map.Entry", "DEL IfStatement", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: name", "DEL SimpleType: Map.Entry", "DEL SimpleType: DirEntry", "DEL SimpleType: Name", "DEL SimpleName: dirEntry", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: equals", "DEL SimpleName: entrySet", "DEL SimpleType: Name", "DEL EnhancedForStatement", "DEL SimpleName: file", "DEL SimpleName: getKey", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL SimpleType: DirEntry", "DEL SimpleName: Name", "DEL SimpleName: entries", "DEL IfStatement", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL Assignment: =", "DEL QualifiedName: dirEntry.file", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: getValue", "DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL NullLiteral", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleName: IllegalArgumentException", "DEL ThrowStatement", "DEL SimpleName: result", "DEL IfStatement", "DEL InfixExpression: ==", "DEL SimpleType: IllegalArgumentException", "DEL StringLiteral: \"directory contains no links to the given file\""]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ExpressionStatement", "DEL MethodDeclaration", "DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: name", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: file", "DEL Modifier: private", "DEL SimpleName: entries", "DEL Block", "DEL PrimitiveType: void", "DEL SimpleName: name", "DEL SimpleName: put", "DEL SimpleName: linkInternal", "DEL ClassInstanceCreation", "DEL SimpleType: DirEntry", "DEL MethodDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: unlink", "DEL MethodDeclaration", "DEL Modifier: public", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL Block"]}, {"root": "DEL PrimitiveType: void", "operations": ["DEL PrimitiveType: void"]}, {"root": "DEL QualifiedName: entry.file", "operations": ["DEL QualifiedName: entry.file"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL SimpleName: name", "DEL SimpleType: File", "DEL ReturnStatement", "DEL QualifiedName: entry.file", "DEL Modifier: public", "DEL SimpleName: Name", "DEL TextElement:  if no such file", "DEL SimpleName: get", "DEL NullLiteral", "DEL TextElement: Returns the file linked by the given name in this directory or ", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL TextElement: exists.", "DEL TextElement:  null", "DEL SimpleName: Nullable", "DEL ConditionalExpression", "DEL InfixExpression: ==", "DEL TagElement: @code", "DEL SimpleName: entry", "DEL NullLiteral", "DEL TagElement", "DEL SimpleName: File", "DEL MethodDeclaration", "DEL SimpleType: Name", "DEL MarkerAnnotation"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Modifier: private", "DEL MethodDeclaration", "DEL SimpleName: DirEntry", "DEL TagElement", "DEL SimpleName: File", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleType: File", "DEL Modifier: static", "DEL Assignment: =", "DEL TextElement: Returns the name of this entry.", "DEL SimpleName: file", "DEL MethodDeclaration", "DEL Modifier: private", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: name", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: file", "DEL MethodDeclaration", "DEL SimpleName: file", "DEL ReturnStatement", "DEL Modifier: final", "DEL SimpleName: name", "DEL SimpleType: Name", "DEL SimpleType: Name", "DEL Block", "DEL SimpleType: File", "DEL SimpleName: name", "DEL SimpleName: File", "DEL FieldAccess", "DEL SingleVariableDeclaration", "DEL TextElement: Returns the file this entry links to.", "DEL FieldAccess", "DEL SimpleType: Name", "DEL SimpleName: Name", "DEL Modifier: public", "DEL ThisExpression", "DEL FieldDeclaration", "DEL Assignment: =", "DEL FieldDeclaration", "DEL SimpleName: File", "DEL Javadoc", "DEL SimpleName: file", "DEL SimpleName: DirEntry", "DEL TypeDeclaration: class", "DEL SimpleName: name", "DEL SimpleName: file", "DEL VariableDeclarationFragment", "DEL ThisExpression", "DEL SimpleType: File", "DEL Block", "DEL Block", "DEL Modifier: private", "DEL Javadoc", "DEL Modifier: final", "DEL TagElement", "DEL ExpressionStatement", "DEL Modifier: public", "DEL Modifier: public", "DEL TextElement: Directory entry containing a file and a name linking to that file.", "DEL SimpleName: name"]}]}}, {"DirectoryTable_diff": {"operations": ["Move MethodDeclaration(527) into TypeDeclaration: class(617) at 19", "Insert FieldDeclaration(82) into TypeDeclaration: class(617) at 6", "Insert MethodDeclaration(183) into TypeDeclaration: class(617) at 12", "Insert MethodDeclaration(196) into TypeDeclaration: class(617) at 13", "Insert MethodDeclaration(287) into TypeDeclaration: class(617) at 18", "Insert MethodDeclaration(354) into TypeDeclaration: class(617) at 20", "Insert MethodDeclaration(460) into TypeDeclaration: class(617) at 22", "Insert Javadoc(57) into FieldDeclaration(73) at 0", "Update ParameterizedType: Map<Name,DirEntry>(65) to Map<Name,DirectoryEntry>", "Insert Javadoc(76) into FieldDeclaration(82) at 0", "Insert Modifier: private(77) into FieldDeclaration(82) at 1", "Insert SimpleType: DirectoryEntry(79) into FieldDeclaration(82) at 2", "Insert VariableDeclarationFragment(81) into FieldDeclaration(82) at 3", "Insert Javadoc(117) into MethodDeclaration(140) at 0", "Insert PrimitiveType: void(119) into MethodDeclaration(140) at 2", "Update SimpleName: self(111) to setSuperRoot", "Move SingleVariableDeclaration(456) into MethodDeclaration(140) at 6", "Insert PrimitiveType: void(145) into MethodDeclaration(172) at 2", "Update SimpleName: parent(124) to setRoot", "Move Javadoc(133) into MethodDeclaration(183) at 0", "Move Modifier: public(134) into MethodDeclaration(183) at 1", "Insert SimpleType: DirectoryEntry(178) into MethodDeclaration(183) at 2", "Update SimpleName: parentTable(137) to entry", "Move SimpleName: parentTable(137) into MethodDeclaration(183) at 3", "Insert Block(182) into MethodDeclaration(183) at 4", "Move Javadoc(107) into MethodDeclaration(196) at 0", "Insert Modifier: public(187) into MethodDeclaration(196) at 1", "Move SimpleType: File(110) into MethodDeclaration(196) at 2", "Insert SimpleName: self(190) into MethodDeclaration(196) at 3", "Move Block(147) into MethodDeclaration(196) at 4", "Move SimpleType: File(123) into MethodDeclaration(222) at 2", "Update SimpleName: linkSelf(173) to parent", "Update SimpleName: linkParent(192) to linked", "Update SimpleName: unlinkSelf(211) to unlinked", "Move Javadoc(220) into MethodDeclaration(287) at 0", "Move Modifier: public(221) into MethodDeclaration(287) at 1", "Move PrimitiveType: int(231) into MethodDeclaration(287) at 2", "Move SimpleName: size(232) into MethodDeclaration(287) at 3", "Move Block(237) into MethodDeclaration(287) at 4", "Move Javadoc(262) into MethodDeclaration(354) at 0", "Move Modifier: public(263) into MethodDeclaration(354) at 1", "Move PrimitiveType: void(264) into MethodDeclaration(354) at 2", "Move SimpleName: link(265) into MethodDeclaration(354) at 3", "Move SingleVariableDeclaration(269) into MethodDeclaration(354) at 4", "Move SingleVariableDeclaration(273) into MethodDeclaration(354) at 5", "Insert Block(353) into MethodDeclaration(354) at 6", "Update Modifier: public(449) to private", "Update SimpleType: Name(451) to DirectoryEntry", "Update SimpleName: getName(452) to linkInternal", "Move SingleVariableDeclaration(290) into MethodDeclaration(402) at 4", "Move SingleVariableDeclaration(294) into MethodDeclaration(402) at 5", "Move Javadoc(333) into MethodDeclaration(460) at 0", "Insert Modifier: public(416) into MethodDeclaration(460) at 1", "Insert PrimitiveType: void(417) into MethodDeclaration(460) at 2", "Insert SimpleName: unlink(418) into MethodDeclaration(460) at 3", "Move SingleVariableDeclaration(340) into MethodDeclaration(460) at 4", "Insert Block(459) into MethodDeclaration(460) at 5", "Insert SimpleType: DirectoryEntry(463) into MethodDeclaration(500) at 1", "Update SimpleType: DirEntry(396) to DirectoryEntry", "Update ParameterizedType: Map<Name,DirEntry>(559) to Map<Name,DirectoryEntry>", "Update ParameterizedType: Collection<DirEntry>(583) to Collection<DirectoryEntry>", "Update TextElement: A table of directory entries which link names to (28) to A table of ", "Insert TagElement(56) into Javadoc(57) at 0", "Update SimpleType: DirEntry(64) to DirectoryEntry", "Insert TagElement(75) into Javadoc(76) at 0", "Insert SimpleName: DirectoryEntry(78) into SimpleType: DirectoryEntry(79) at 0", "Insert SimpleName: entry(80) into VariableDeclarationFragment(81) at 0", "Insert TagElement(116) into Javadoc(117) at 0", "Insert ExpressionStatement(138) into Block(139) at 0", "Insert ExpressionStatement(160) into Block(171) at 0", "Insert ExpressionStatement(164) into Block(171) at 1", "Insert ExpressionStatement(170) into Block(171) at 2", "Insert SimpleName: DirectoryEntry(177) into SimpleType: DirectoryEntry(178) at 0", "Insert ReturnStatement(181) into Block(182) at 0", "Insert ReturnStatement(220) into Block(221) at 0", "Insert SimpleType: DirectoryEntry(231) into SingleVariableDeclaration(233) at 0", "Update SimpleName: parent(195) to entry", "Insert ExpressionStatement(239) into Block(254) at 0", "Insert ExpressionStatement(246) into Block(254) at 1", "Move ExpressionStatement(227) into Block(274) at 1", "Insert ExpressionStatement(273) into Block(274) at 2", "Insert VariableDeclarationStatement(334) into Block(353) at 0", "Insert IfStatement(352) into Block(353) at 1", "Update SimpleName: Name(450) to DirectoryEntry", "Move ExpressionStatement(304) into Block(401) at 0", "Insert VariableDeclarationStatement(388) into Block(401) at 1", "Insert ExpressionStatement(394) into Block(401) at 2", "Move ExpressionStatement(318) into Block(401) at 3", "Insert VariableDeclarationStatement(433) into Block(459) at 0", "Insert VariableDeclarationStatement(441) into Block(459) at 1", "Insert IfStatement(458) into Block(459) at 2", "Insert SimpleName: DirectoryEntry(462) into SimpleType: DirectoryEntry(463) at 0", "Insert ReturnStatement(498) into Block(499) at 3", "Update SimpleName: DirEntry(395) to DirectoryEntry", "Update SimpleType: DirEntry(558) to DirectoryEntry", "Update SimpleType: DirEntry(582) to DirectoryEntry", "Update SimpleName: File(29) to DirectoryEntry", "Update TextElement:  files(30) to  directory entries", "Insert TextElement: Map for looking up an entry by name.(55) into TagElement(56) at 0", "Update SimpleName: DirEntry(63) to DirectoryEntry", "Insert TextElement: The entry linking to this directory in its parent directory.(74) into TagElement(75) at 0", "Insert TextElement: Sets this directory as the super root.(115) into TagElement(116) at 0", "Insert Assignment: =(137) into ExpressionStatement(138) at 0", "Update TextElement: Returns the parent directory.(118) to Sets this directory as a root directory, linking \"..\" to itself.", "Insert Assignment: =(159) into ExpressionStatement(160) at 0", "Insert MethodInvocation(163) into ExpressionStatement(164) at 0", "Insert MethodInvocation(169) into ExpressionStatement(170) at 0", "Update TextElement: Returns the directory table for the parent directory.(131) to Returns the entry linking to this directory in its parent.", "Insert SimpleName: entry(180) into ReturnStatement(181) at 0", "Update TextElement: Returns the current name of this directory. This relies on the fact that multiple links to a(149) to Returns the name of this directory.", "Update TextElement: Links this directory to its own file.(168) to Returns the parent of this directory.", "Insert MethodInvocation(219) into ReturnStatement(220) at 0", "Insert TextElement: Called when this directory is linked in a parent directory. The given entry is the new entry(223) into TagElement(225) at 0", "Update TextElement: Links this directory to the given parent file.(187) to linking to this directory.", "Insert SimpleName: DirectoryEntry(230) into SimpleType: DirectoryEntry(231) at 0", "Insert Assignment: =(238) into ExpressionStatement(239) at 0", "Insert MethodInvocation(245) into ExpressionStatement(246) at 0", "Update TextElement: Unlinks this directory from its own file.(206) to Called when this directory is unlinked from its parent directory.", "Insert Assignment: =(272) into ExpressionStatement(273) at 0", "Update TextElement: Unlinks this directory from its parent file.(218) to Returns the number of entries in this directory.", "Update InfixExpression: ==(249) to <=", "Insert SimpleType: DirectoryEntry(324) into VariableDeclarationStatement(334) at 0", "Insert VariableDeclarationFragment(333) into VariableDeclarationStatement(334) at 1", "Insert MethodInvocation(337) into IfStatement(352) at 0", "Insert Block(351) into IfStatement(352) at 1", "Insert SimpleType: DirectoryEntry(378) into VariableDeclarationStatement(388) at 0", "Insert VariableDeclarationFragment(387) into VariableDeclarationStatement(388) at 1", "Insert MethodInvocation(393) into ExpressionStatement(394) at 0", "Update SimpleName: result(524) to entry", "Insert SimpleType: DirectoryEntry(424) into VariableDeclarationStatement(433) at 0", "Insert VariableDeclarationFragment(432) into VariableDeclarationStatement(433) at 1", "Move SimpleType: File(194) into VariableDeclarationStatement(441) at 0", "Insert VariableDeclarationFragment(440) into VariableDeclarationStatement(441) at 1", "Insert MethodInvocation(444) into IfStatement(458) at 0", "Insert Block(457) into IfStatement(458) at 1", "Update SimpleType: DirEntry(358) to DirectoryEntry", "Insert SimpleName: entry(497) into ReturnStatement(498) at 0", "Update SimpleName: DirEntry(557) to DirectoryEntry", "Update SimpleName: DirEntry(581) to DirectoryEntry", "Insert FieldAccess(127) into Assignment: =(137) at 0", "Insert ClassInstanceCreation(136) into Assignment: =(137) at 1", "Insert FieldAccess(149) into Assignment: =(159) at 0", "Insert ClassInstanceCreation(158) into Assignment: =(159) at 1", "Update SimpleName: get(125) to unlinkInternal", "Move SimpleName: get(125) into MethodInvocation(163) at 0", "Move SimpleName: PARENT(126) into MethodInvocation(163) at 1", "Insert SimpleName: linkInternal(165) into MethodInvocation(169) at 0", "Insert SimpleName: PARENT(166) into MethodInvocation(169) at 1", "Move MethodInvocation(163) into MethodInvocation(169) at 2", "Update SimpleName: entries(138) to entry", "Move SimpleName: entries(138) into MethodInvocation(193) at 0", "Insert SimpleName: file(192) into MethodInvocation(193) at 1", "Update SimpleName: parentTable(159) to entry", "Move SimpleName: parentTable(159) into MethodInvocation(206) at 0", "Update SimpleName: getName(161) to name", "Update SimpleName: checkNotNull(180) to entry", "Move SimpleName: checkNotNull(180) into MethodInvocation(219) at 0", "Update SimpleName: self(181) to directory", "Move SimpleName: self(181) into MethodInvocation(219) at 1", "Insert FieldAccess(236) into Assignment: =(238) at 0", "Insert SimpleName: entry(237) into Assignment: =(238) at 1", "Insert SimpleName: linkInternal(240) into MethodInvocation(245) at 0", "Insert SimpleName: SELF(241) into MethodInvocation(245) at 1", "Insert MethodInvocation(244) into MethodInvocation(245) at 2", "Insert SimpleName: entry(270) into Assignment: =(272) at 0", "Insert NullLiteral(271) into Assignment: =(272) at 1", "Update SimpleName: DirEntry(308) to DirectoryEntry", "Move SimpleName: DirEntry(308) into SimpleType: DirectoryEntry(324) at 0", "Insert SimpleName: entry(325) into VariableDeclarationFragment(333) at 0", "Move MethodInvocation(280) into VariableDeclarationFragment(333) at 1", "Insert SimpleName: file(335) into MethodInvocation(337) at 0", "Insert SimpleName: isDirectory(336) into MethodInvocation(337) at 1", "Move VariableDeclarationStatement(434) into Block(351) at 0", "Insert ExpressionStatement(350) into Block(351) at 1", "Update SimpleName: DirEntry(467) to DirectoryEntry", "Move SimpleName: DirEntry(467) into SimpleType: DirectoryEntry(378) at 0", "Insert SimpleName: entry(379) into VariableDeclarationFragment(387) at 0", "Insert ClassInstanceCreation(386) into VariableDeclarationFragment(387) at 1", "Insert SimpleName: entries(389) into MethodInvocation(393) at 0", "Insert SimpleName: put(390) into MethodInvocation(393) at 1", "Insert SimpleName: name(391) into MethodInvocation(393) at 2", "Insert SimpleName: entry(392) into MethodInvocation(393) at 3", "Update SimpleName: Name(629) to DirectoryEntry", "Move SimpleName: Name(629) into SimpleType: DirectoryEntry(424) at 0", "Update SimpleName: name(631) to entry", "Move SimpleName: name(631) into VariableDeclarationFragment(432) at 0", "Move MethodInvocation(346) into VariableDeclarationFragment(432) at 1", "Move SimpleName: file(638) into VariableDeclarationFragment(440) at 0", "Insert MethodInvocation(439) into VariableDeclarationFragment(440) at 1", "Insert SimpleName: file(442) into MethodInvocation(444) at 0", "Insert SimpleName: isDirectory(443) into MethodInvocation(444) at 1", "Insert VariableDeclarationStatement(452) into Block(457) at 0", "Insert ExpressionStatement(456) into Block(457) at 1", "Update SimpleName: DirEntry(357) to DirectoryEntry", "Insert MethodInvocation(493) into MethodInvocation(495) at 0", "Insert ThisExpression(125) into FieldAccess(127) at 0", "Insert SimpleName: entry(126) into FieldAccess(127) at 1", "Insert SimpleType: DirectoryEntry(129) into ClassInstanceCreation(136) at 0", "Insert SimpleName: file(130) into ClassInstanceCreation(136) at 1", "Insert MethodInvocation(134) into ClassInstanceCreation(136) at 2", "Insert SimpleName: file(135) into ClassInstanceCreation(136) at 3", "Insert ThisExpression(147) into FieldAccess(149) at 0", "Insert SimpleName: entry(148) into FieldAccess(149) at 1", "Insert SimpleType: DirectoryEntry(151) into ClassInstanceCreation(158) at 0", "Insert MethodInvocation(153) into ClassInstanceCreation(158) at 1", "Insert MethodInvocation(155) into ClassInstanceCreation(158) at 2", "Insert MethodInvocation(157) into ClassInstanceCreation(158) at 3", "Insert ThisExpression(234) into FieldAccess(236) at 0", "Insert SimpleName: entry(235) into FieldAccess(236) at 1", "Insert SimpleName: entry(242) into MethodInvocation(244) at 0", "Insert SimpleName: file(243) into MethodInvocation(244) at 1", "Update SimpleName: checkNotNull(199) to entry", "Update SimpleName: parent(200) to directory", "Move SimpleType: DirectoryTable(136) into VariableDeclarationStatement(345) at 0", "Insert MethodInvocation(349) into ExpressionStatement(350) at 0", "Insert SimpleType: DirectoryEntry(381) into ClassInstanceCreation(386) at 0", "Insert MethodInvocation(383) into ClassInstanceCreation(386) at 1", "Insert SimpleName: name(384) into ClassInstanceCreation(386) at 2", "Insert SimpleName: file(385) into ClassInstanceCreation(386) at 3", "Insert SimpleName: entry(437) into MethodInvocation(439) at 0", "Insert SimpleName: file(438) into MethodInvocation(439) at 1", "Insert SimpleType: DirectoryTable(446) into VariableDeclarationStatement(452) at 0", "Insert VariableDeclarationFragment(451) into VariableDeclarationStatement(452) at 1", "Insert MethodInvocation(455) into ExpressionStatement(456) at 0", "Insert SimpleName: entry(491) into MethodInvocation(493) at 0", "Insert SimpleName: file(492) into MethodInvocation(493) at 1", "Insert SimpleName: DirectoryEntry(128) into SimpleType: DirectoryEntry(129) at 0", "Update SimpleName: get(112) to Name", "Move SimpleName: get(112) into MethodInvocation(134) at 0", "Update SimpleName: SELF(113) to simple", "Move SimpleName: SELF(113) into MethodInvocation(134) at 1", "Insert StringLiteral: \"\"(133) into MethodInvocation(134) at 2", "Insert SimpleName: DirectoryEntry(150) into SimpleType: DirectoryEntry(151) at 0", "Insert SimpleName: self(152) into MethodInvocation(153) at 0", "Insert SimpleName: name(154) into MethodInvocation(155) at 0", "Insert SimpleName: self(156) into MethodInvocation(157) at 0", "Update SimpleName: entry(428) to table", "Insert SimpleName: table(346) into MethodInvocation(349) at 0", "Insert SimpleName: linked(347) into MethodInvocation(349) at 1", "Insert SimpleName: entry(348) into MethodInvocation(349) at 2", "Update SimpleName: DirEntry(483) to DirectoryEntry", "Move SimpleName: DirEntry(483) into SimpleType: DirectoryEntry(381) at 0", "Update SimpleName: entry(486) to self", "Move SimpleName: entry(486) into MethodInvocation(383) at 0", "Update SimpleName: Name(669) to DirectoryTable", "Move SimpleName: Name(669) into SimpleType: DirectoryTable(446) at 0", "Insert SimpleName: table(447) into VariableDeclarationFragment(451) at 0", "Insert MethodInvocation(450) into VariableDeclarationFragment(451) at 1", "Insert SimpleName: table(453) into MethodInvocation(455) at 0", "Insert SimpleName: unlinked(454) into MethodInvocation(455) at 1", "Update SimpleName: entries(429) to file", "Update SimpleName: get(430) to content", "Insert SimpleName: file(448) into MethodInvocation(450) at 0", "Insert SimpleName: content(449) into MethodInvocation(450) at 1", "Delete QualifiedName: com.google.common.base.Preconditions.checkNotNull(4)", "Delete ImportDeclaration(5)", "Delete MethodInvocation(114)", "Delete ReturnStatement(115)", "Delete MethodInvocation(127)", "Delete ReturnStatement(128)", "Delete SimpleName: get(139)", "Delete SimpleName: PARENT(140)", "Delete MethodInvocation(141)", "Delete SimpleName: file(142)", "Delete FieldAccess(143)", "Delete SimpleName: content(144)", "Delete MethodDeclaration(148)", "Delete TextElement: directory can't be created, not counting special self and parent links which don't apply(150)", "Delete TextElement: here. Note that this method cannot be used to get the name of a root directory, as its parent(151)", "Delete TextElement: link is to itself.(152)", "Delete MethodInvocation(160)", "Delete PrimitiveType: void(172)", "Delete SimpleName: File(174)", "Delete SimpleType: File(175)", "Delete SimpleName: self(176)", "Delete SingleVariableDeclaration(177)", "Delete SimpleName: linkInternal(178)", "Delete SimpleName: SELF(179)", "Delete MethodInvocation(182)", "Delete MethodInvocation(183)", "Delete ExpressionStatement(184)", "Delete PrimitiveType: void(222)", "Delete SimpleName: unlinkParent(223)", "Delete Block(228)", "Delete MethodDeclaration(229)", "Delete Modifier: public(230)", "Delete MethodDeclaration(238)", "Delete SimpleName: DirEntry(426)", "Delete SimpleType: DirEntry(427)", "Delete SimpleName: name(431)", "Delete TextElement: Returns the name that links to the given file key in this directory, throwing an exception if(444)", "Delete TextElement: zero names or more than one name links to the key. Should only be used for getting the name of(445)", "Delete TextElement: a directory, as directories cannot have more than one link.(446)", "Delete TagElement(447)", "Delete Javadoc(448)", "Delete SimpleName: Name(457)", "Delete SimpleType: Name(458)", "Delete SimpleName: result(459)", "Delete NullLiteral(460)", "Delete VariableDeclarationFragment(461)", "Delete VariableDeclarationStatement(462)", "Delete QualifiedName: Map.Entry(463)", "Delete SimpleType: Map.Entry(464)", "Delete SimpleName: Name(465)", "Delete SimpleType: Name(466)", "Delete SimpleType: DirEntry(468)", "Delete ParameterizedType: Map.Entry<Name,DirEntry>(469)", "Delete SimpleName: entry(470)", "Delete SingleVariableDeclaration(471)", "Delete SimpleName: entries(472)", "Delete SimpleName: entrySet(473)", "Delete MethodInvocation(474)", "Delete SimpleName: Name(475)", "Delete SimpleType: Name(476)", "Delete SimpleName: name(477)", "Delete SimpleName: entry(478)", "Delete SimpleName: getKey(479)", "Delete MethodInvocation(480)", "Delete VariableDeclarationFragment(481)", "Delete VariableDeclarationStatement(482)", "Delete SimpleType: DirEntry(484)", "Delete SimpleName: dirEntry(485)", "Delete SimpleName: getValue(487)", "Delete MethodInvocation(488)", "Delete VariableDeclarationFragment(489)", "Delete VariableDeclarationStatement(490)", "Delete QualifiedName: dirEntry.file(491)", "Delete SimpleName: equals(492)", "Delete SimpleName: file(493)", "Delete MethodInvocation(494)", "Delete SimpleName: result(495)", "Delete NullLiteral(496)", "Delete InfixExpression: ==(497)", "Delete SimpleName: result(498)", "Delete SimpleName: name(499)", "Delete Assignment: =(500)", "Delete ExpressionStatement(501)", "Delete Block(502)", "Delete SimpleName: IllegalArgumentException(503)", "Delete SimpleType: IllegalArgumentException(504)", "Delete StringLiteral: \"more than one name links to the given file\"(505)", "Delete ClassInstanceCreation(506)", "Delete ThrowStatement(507)", "Delete Block(508)", "Delete IfStatement(509)", "Delete Block(510)", "Delete IfStatement(511)", "Delete Block(512)", "Delete EnhancedForStatement(513)", "Delete SimpleName: result(514)", "Delete NullLiteral(515)", "Delete InfixExpression: ==(516)", "Delete SimpleName: IllegalArgumentException(517)", "Delete SimpleType: IllegalArgumentException(518)", "Delete StringLiteral: \"directory contains no links to the given file\"(519)", "Delete ClassInstanceCreation(520)", "Delete ThrowStatement(521)", "Delete Block(522)", "Delete IfStatement(523)", "Delete ExpressionStatement(281)", "Delete Block(282)", "Delete MethodDeclaration(283)", "Delete Modifier: private(284)", "Delete PrimitiveType: void(285)", "Delete SimpleName: linkInternal(286)", "Delete SimpleName: entries(305)", "Delete SimpleName: put(306)", "Delete SimpleName: name(307)", "Delete SimpleType: DirEntry(309)", "Delete SimpleName: name(310)", "Delete SimpleName: file(311)", "Delete ClassInstanceCreation(312)", "Delete MethodInvocation(313)", "Delete ExpressionStatement(314)", "Delete Block(319)", "Delete MethodDeclaration(320)", "Delete Modifier: public(334)", "Delete PrimitiveType: void(335)", "Delete SimpleName: unlink(336)", "Delete ExpressionStatement(347)", "Delete Block(348)", "Delete MethodDeclaration(349)", "Delete PrimitiveType: void(351)", "Delete QualifiedName: entry.file(379)", "Delete TextElement: Returns the file linked by the given name in this directory or (409)", "Delete TextElement:  null(410)", "Delete TagElement: @code(411)", "Delete TextElement:  if no such file(412)", "Delete TextElement: exists.(413)", "Delete TagElement(414)", "Delete Javadoc(415)", "Delete SimpleName: Nullable(416)", "Delete MarkerAnnotation(417)", "Delete Modifier: public(418)", "Delete SimpleName: File(419)", "Delete SimpleType: File(420)", "Delete SimpleName: get(421)", "Delete SimpleName: Name(422)", "Delete SimpleType: Name(423)", "Delete SimpleName: name(424)", "Delete SingleVariableDeclaration(425)", "Delete SimpleName: entry(435)", "Delete NullLiteral(436)", "Delete InfixExpression: ==(437)", "Delete NullLiteral(438)", "Delete QualifiedName: entry.file(439)", "Delete ConditionalExpression(440)", "Delete ReturnStatement(441)", "Delete Block(442)", "Delete MethodDeclaration(443)", "Delete TextElement: Directory entry containing a file and a name linking to that file.(620)", "Delete TagElement(621)", "Delete Javadoc(622)", "Delete Modifier: public(623)", "Delete Modifier: static(624)", "Delete Modifier: final(625)", "Delete SimpleName: DirEntry(626)", "Delete Modifier: private(627)", "Delete Modifier: final(628)", "Delete SimpleType: Name(630)", "Delete VariableDeclarationFragment(632)", "Delete FieldDeclaration(633)", "Delete Modifier: private(634)", "Delete Modifier: final(635)", "Delete SimpleName: File(636)", "Delete SimpleType: File(637)", "Delete VariableDeclarationFragment(639)", "Delete FieldDeclaration(640)", "Delete Modifier: private(641)", "Delete SimpleName: DirEntry(642)", "Delete SimpleName: Name(643)", "Delete SimpleType: Name(644)", "Delete SimpleName: name(645)", "Delete SingleVariableDeclaration(646)", "Delete SimpleName: File(647)", "Delete SimpleType: File(648)", "Delete SimpleName: file(649)", "Delete SingleVariableDeclaration(650)", "Delete ThisExpression(651)", "Delete SimpleName: name(652)", "Delete FieldAccess(653)", "Delete SimpleName: name(654)", "Delete Assignment: =(655)", "Delete ExpressionStatement(656)", "Delete ThisExpression(657)", "Delete SimpleName: file(658)", "Delete FieldAccess(659)", "Delete SimpleName: file(660)", "Delete Assignment: =(661)", "Delete ExpressionStatement(662)", "Delete Block(663)", "Delete MethodDeclaration(664)", "Delete TextElement: Returns the name of this entry.(665)", "Delete TagElement(666)", "Delete Javadoc(667)", "Delete Modifier: public(668)", "Delete SimpleType: Name(670)", "Delete SimpleName: name(671)", "Delete SimpleName: name(672)", "Delete ReturnStatement(673)", "Delete Block(674)", "Delete MethodDeclaration(675)", "Delete TextElement: Returns the file this entry links to.(676)", "Delete TagElement(677)", "Delete Javadoc(678)", "Delete Modifier: public(679)", "Delete SimpleName: File(680)", "Delete SimpleType: File(681)", "Delete SimpleName: file(682)", "Delete SimpleName: file(683)", "Delete ReturnStatement(684)", "Delete Block(685)", "Delete MethodDeclaration(686)", "Delete TypeDeclaration: class(687)"]}}, {"FileSystemInitializer_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 4", "operations": ["INS ExpressionStatement to Block at 2", "INS SimpleName: superRootTable to MethodInvocation at 0", "INS SimpleName: setSuperRoot to MethodInvocation at 1", "INS SimpleName: createRootDir to MethodInvocation at 0", "INS SimpleName: pathService to SingleVariableDeclaration at 1", "INS SimpleName: superRoot to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: FileTree to SimpleType: FileTree at 0", "INS SimpleName: PathService to SimpleType: PathService at 0", "INS QualifiedName: Jimfs.Configuration to SimpleType: Jimfs.Configuration at 0", "INS TagElement to Javadoc at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: superRootTable to MethodInvocation at 4", "INS SimpleType: FileTree to ClassInstanceCreation at 0", "INS SimpleName: createDirectory to MethodInvocation at 1", "INS Javadoc to MethodDeclaration at 0", "INS EnhancedForStatement to Block at 3", "INS SimpleName: createFileTree to MethodDeclaration at 4", "INS ReturnStatement to Block at 4", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: pathService to MethodInvocation at 2", "INS SimpleName: fileFactory to MethodInvocation at 3", "INS SimpleName: fileFactory to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: FileTree to SimpleType: FileTree at 0", "INS MethodDeclaration to TypeDeclaration: class at 4", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: Jimfs.Configuration to SingleVariableDeclaration at 0", "INS Modifier: private to MethodDeclaration at 1", "INS SimpleName: fileFactory to SingleVariableDeclaration at 1", "INS Modifier: static to MethodDeclaration at 2", "INS SimpleName: config to SingleVariableDeclaration at 1", "INS SimpleType: PathService to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleType: FileTree to MethodDeclaration at 3", "INS Block to EnhancedForStatement at 2", "INS SimpleName: superRoot to VariableDeclarationFragment at 0", "INS Block to MethodDeclaration at 8", "INS SimpleName: FileFactory to SimpleType: FileFactory at 0", "INS SimpleName: superRoot to ClassInstanceCreation at 1", "INS SimpleType: FileFactory to SingleVariableDeclaration at 0", "INS SimpleName: root to MethodInvocation at 1", "INS TextElement: Creates the file tree for the file system including all root directories. to TagElement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 8"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS SimpleType: FileFactory to VariableDeclarationStatement at 0", "INS SimpleName: storage to ClassInstanceCreation at 1", "INS SimpleName: FileFactory to SimpleType: FileFactory at 0", "INS SimpleName: fileFactory to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: FileFactory to SimpleType: FileFactory at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 3", "INS SimpleType: FileFactory to ClassInstanceCreation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS VariableDeclarationStatement to Block at 4", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: fileFactory to MethodInvocation at 3", "INS SimpleName: FileTree to SimpleType: FileTree at 0", "INS SimpleType: FileTree to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: tree to VariableDeclarationFragment at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 5", "operations": ["INS SimpleName: fileStore to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 5", "INS SimpleName: storage to ClassInstanceCreation at 3", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: fileFactory to ClassInstanceCreation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: tree to ClassInstanceCreation at 1", "INS SimpleName: attributeService to ClassInstanceCreation at 4"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 1"]}, {"root": "UPDATE from JimfsFileStore to FileFactory", "operations": ["UPD SimpleType: JimfsFileStore from JimfsFileStore to FileFactory", "UPD SimpleName: JimfsFileStore from JimfsFileStore to FileFactory", "UPD SimpleName: JimfsFileStore from JimfsFileStore to FileFactory", "UPD SimpleType: JimfsFileStore from JimfsFileStore to FileFactory"]}, {"root": "UPDATE from table to fileFactory", "operations": ["UPD SimpleName: table from table to fileFactory", "UPD SimpleName: fileStore from fileStore to fileFactory", "UPD SimpleName: fileStore from fileStore to fileFactory", "UPD SimpleName: fileStore from fileStore to fileFactory", "UPD SimpleName: fileStore from fileStore to fileFactory"]}, {"root": "UPDATE from DirectoryTable to FileTree", "operations": ["UPD SimpleType: DirectoryTable from DirectoryTable to FileTree", "UPD SimpleName: DirectoryTable from DirectoryTable to FileTree"]}, {"root": "UPDATE from superRootTable to tree", "operations": ["UPD SimpleName: superRootTable from superRootTable to tree", "UPD SimpleName: superRootTable from superRootTable to tree", "UPD SimpleName: superRootTable from superRootTable to tree"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 2", "MOV ExpressionStatement to Block at 3", "MOV ExpressionStatement to Block at 2"]}, {"root": "INS EnhancedForStatement to Block at 4", "operations": ["INS SimpleName: newDir to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS EnhancedForStatement to Block at 4", "INS Block to EnhancedForStatement at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "UPDATE from RealPathService to PathService", "operations": ["UPD SimpleName: RealPathService from RealPathService to PathService", "UPD SimpleType: RealPathService from RealPathService to PathService"]}, {"root": "INS SimpleType: AttributeService to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: AttributeService to VariableDeclarationStatement at 0", "INS SimpleName: AttributeService to SimpleType: AttributeService at 0"]}, {"root": "INS SimpleType: RegularFileStorage to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: RegularFileStorage to VariableDeclarationStatement at 0", "INS SimpleName: RegularFileStorage to SimpleType: RegularFileStorage at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: JimfsFileStore to VariableDeclarationStatement at 0", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: FileSystemService to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: File to VariableDeclarationStatement at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV MethodInvocation to EnhancedForStatement at 1", "MOV SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "INS SimpleType: File to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: File to VariableDeclarationStatement at 0", "INS SimpleName: File to SimpleType: File at 0"]}, {"root": "UPDATE from File to DirectoryEntry", "operations": ["UPD SimpleName: File from File to DirectoryEntry", "UPD SimpleType: File from File to DirectoryEntry"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0", "MOV MethodInvocation to EnhancedForStatement at 1"]}, {"root": "UPDATE from fileStore to attributeService", "operations": ["UPD SimpleName: fileStore from fileStore to attributeService"]}, {"root": "UPDATE from superRoot to storage", "operations": ["UPD SimpleName: superRoot from superRoot to storage"]}, {"root": "UPDATE from rootDir to setRoot", "operations": ["UPD SimpleName: rootDir from rootDir to setRoot"]}, {"root": "UPDATE from fileStore to rootEntry", "operations": ["UPD SimpleName: fileStore from fileStore to rootEntry", "UPD SimpleName: dir from dir to rootEntry", "UPD SimpleName: dir from dir to rootEntry"]}, {"root": "UPDATE from newDir to dir", "operations": ["UPD SimpleName: newDir from newDir to dir"]}, {"root": "INS SimpleType: AttributeService to ClassInstanceCreation at 0", "operations": ["INS SimpleName: AttributeService to SimpleType: AttributeService at 0", "INS SimpleType: AttributeService to ClassInstanceCreation at 0"]}, {"root": "UPDATE from fileStore to RegularFileStorage", "operations": ["UPD SimpleName: fileStore from fileStore to RegularFileStorage"]}, {"root": "UPDATE from createDirectory to from", "operations": ["UPD SimpleName: createDirectory from createDirectory to from"]}, {"root": "UPDATE from createRootDir to createFileTree", "operations": ["UPD SimpleName: createRootDir from createRootDir to createFileTree"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: root to MethodInvocation at 1", "MOV SimpleName: pathService to MethodInvocation at 2", "MOV SimpleName: createRootDir to MethodInvocation at 0"]}, {"root": "UPDATE from root to config", "operations": ["UPD SimpleName: root from root to config"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: JimfsFileStore to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: FileSystemService to ClassInstanceCreation at 0"]}, {"root": "UPDATE from superRoot to fileStore", "operations": ["UPD SimpleName: superRoot from superRoot to fileStore"]}, {"root": "INS SimpleName: fileStore to ClassInstanceCreation at 3", "operations": ["INS SimpleName: fileStore to ClassInstanceCreation at 3"]}, {"root": "INS SimpleName: pathService to ClassInstanceCreation at 4", "operations": ["INS SimpleName: pathService to ClassInstanceCreation at 4"]}, {"root": "UPDATE from get to getRoot", "operations": ["UPD SimpleName: get from get to getRoot"]}, {"root": "UPDATE from createDirectory to file", "operations": ["UPD SimpleName: createDirectory from createDirectory to file"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: File to VariableDeclarationStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: linkParent to MethodInvocation at 1", "MOV SimpleName: table to MethodInvocation at 0"]}, {"root": "UPDATE from linkParent to createDirectory", "operations": ["UPD SimpleName: linkParent from linkParent to createDirectory"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL MethodInvocation", "DEL SimpleName: getHost", "DEL SimpleName: uri", "DEL InfixExpression: +", "DEL StringLiteral: \"jimfs-\""]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL EnhancedForStatement", "DEL SimpleName: fileStore", "DEL SimpleName: superRootTable", "DEL Block", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL SimpleName: fileStore", "operations": ["DEL SimpleName: fileStore"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: rootDir", "DEL SimpleName: rootDirTable", "DEL SimpleName: linkParent"]}, {"root": "DEL SimpleName: linkSelf", "operations": ["DEL SimpleName: linkSelf"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: linkSelf", "DEL EnhancedForStatement", "DEL SimpleName: dir", "DEL Block", "DEL SimpleName: table", "DEL SimpleName: newDir"]}]}}, {"FileSystemInitializer_diff": {"operations": ["Insert MethodDeclaration(220) into TypeDeclaration: class(400) at 4", "Insert Javadoc(159) into MethodDeclaration(220) at 0", "Insert Modifier: private(160) into MethodDeclaration(220) at 1", "Insert Modifier: static(161) into MethodDeclaration(220) at 2", "Insert SimpleType: FileTree(163) into MethodDeclaration(220) at 3", "Insert SimpleName: createFileTree(164) into MethodDeclaration(220) at 4", "Insert SingleVariableDeclaration(168) into MethodDeclaration(220) at 5", "Insert SingleVariableDeclaration(172) into MethodDeclaration(220) at 6", "Insert SingleVariableDeclaration(176) into MethodDeclaration(220) at 7", "Insert Block(219) into MethodDeclaration(220) at 8", "Move ExpressionStatement(230) into Block(303) at 8", "Insert VariableDeclarationStatement(79) into Block(155) at 3", "Insert VariableDeclarationStatement(89) into Block(155) at 4", "Insert VariableDeclarationStatement(101) into Block(155) at 5", "Insert TagElement(158) into Javadoc(159) at 0", "Insert SimpleName: FileTree(162) into SimpleType: FileTree(163) at 0", "Insert SimpleType: Jimfs.Configuration(166) into SingleVariableDeclaration(168) at 0", "Insert SimpleName: config(167) into SingleVariableDeclaration(168) at 1", "Insert SimpleType: PathService(170) into SingleVariableDeclaration(172) at 0", "Insert SimpleName: pathService(171) into SingleVariableDeclaration(172) at 1", "Insert SimpleType: FileFactory(174) into SingleVariableDeclaration(176) at 0", "Insert SimpleName: fileFactory(175) into SingleVariableDeclaration(176) at 1", "Insert VariableDeclarationStatement(184) into Block(219) at 0", "Move VariableDeclarationStatement(83) into Block(219) at 1", "Insert ExpressionStatement(197) into Block(219) at 2", "Insert EnhancedForStatement(213) into Block(219) at 3", "Insert ReturnStatement(218) into Block(219) at 4", "Update SimpleType: JimfsFileStore(167) to FileFactory", "Update SimpleName: fileStore(168) to fileFactory", "Update SimpleType: JimfsFileStore(254) to FileFactory", "Update SimpleName: fileStore(255) to fileFactory", "Update SimpleType: DirectoryTable(258) to FileTree", "Update SimpleName: superRootTable(259) to tree", "Move VariableDeclarationStatement(308) into Block(398) at 2", "Insert EnhancedForStatement(395) into Block(398) at 4", "Update SimpleType: RealPathService(39) to PathService", "Insert SimpleType: AttributeService(50) into VariableDeclarationStatement(59) at 0", "Insert SimpleType: RegularFileStorage(61) into VariableDeclarationStatement(70) at 0", "Insert SimpleType: FileFactory(72) into VariableDeclarationStatement(79) at 0", "Insert VariableDeclarationFragment(78) into VariableDeclarationStatement(79) at 1", "Insert SimpleType: FileTree(81) into VariableDeclarationStatement(89) at 0", "Insert VariableDeclarationFragment(88) into VariableDeclarationStatement(89) at 1", "Move SimpleType: JimfsFileStore(53) into VariableDeclarationStatement(101) at 0", "Insert VariableDeclarationFragment(100) into VariableDeclarationStatement(101) at 1", "Move SimpleType: FileSystemService(125) into VariableDeclarationStatement(134) at 0", "Insert TextElement: Creates the file tree for the file system including all root directories.(157) into TagElement(158) at 0", "Insert QualifiedName: Jimfs.Configuration(165) into SimpleType: Jimfs.Configuration(166) at 0", "Insert SimpleName: PathService(169) into SimpleType: PathService(170) at 0", "Insert SimpleName: FileFactory(173) into SimpleType: FileFactory(174) at 0", "Move SimpleType: File(211) into VariableDeclarationStatement(184) at 0", "Insert VariableDeclarationFragment(183) into VariableDeclarationStatement(184) at 1", "Insert MethodInvocation(196) into ExpressionStatement(197) at 0", "Move SingleVariableDeclaration(87) into EnhancedForStatement(213) at 0", "Move MethodInvocation(90) into EnhancedForStatement(213) at 1", "Insert Block(212) into EnhancedForStatement(213) at 2", "Insert ClassInstanceCreation(217) into ReturnStatement(218) at 0", "Update SimpleName: JimfsFileStore(166) to FileFactory", "Insert SimpleType: File(278) into VariableDeclarationStatement(284) at 0", "Update SimpleName: JimfsFileStore(253) to FileFactory", "Update SimpleName: DirectoryTable(257) to FileTree", "Update SimpleType: File(264) to DirectoryEntry", "Move SingleVariableDeclaration(297) into EnhancedForStatement(395) at 0", "Move MethodInvocation(300) into EnhancedForStatement(395) at 1", "Insert Block(394) into EnhancedForStatement(395) at 2", "Update SimpleName: RealPathService(38) to PathService", "Insert SimpleName: AttributeService(49) into SimpleType: AttributeService(50) at 0", "Update SimpleName: fileStore(51) to attributeService", "Insert SimpleName: RegularFileStorage(60) into SimpleType: RegularFileStorage(61) at 0", "Update SimpleName: superRoot(70) to storage", "Insert SimpleName: FileFactory(71) into SimpleType: FileFactory(72) at 0", "Insert SimpleName: fileFactory(73) into VariableDeclarationFragment(78) at 0", "Insert ClassInstanceCreation(77) into VariableDeclarationFragment(78) at 1", "Insert SimpleName: FileTree(80) into SimpleType: FileTree(81) at 0", "Insert SimpleName: tree(82) into VariableDeclarationFragment(88) at 0", "Insert MethodInvocation(87) into VariableDeclarationFragment(88) at 1", "Insert SimpleName: fileStore(92) into VariableDeclarationFragment(100) at 0", "Insert ClassInstanceCreation(99) into VariableDeclarationFragment(100) at 1", "Insert SimpleName: superRoot(179) into VariableDeclarationFragment(183) at 0", "Insert MethodInvocation(182) into VariableDeclarationFragment(183) at 1", "Insert SimpleName: superRootTable(193) into MethodInvocation(196) at 0", "Insert SimpleName: setSuperRoot(194) into MethodInvocation(196) at 1", "Insert SimpleName: superRoot(195) into MethodInvocation(196) at 2", "Insert ExpressionStatement(211) into Block(212) at 0", "Insert SimpleType: FileTree(215) into ClassInstanceCreation(217) at 0", "Insert SimpleName: superRoot(216) into ClassInstanceCreation(217) at 1", "Insert SimpleName: File(277) into SimpleType: File(278) at 0", "Update SimpleName: rootDir(228) to setRoot", "Update SimpleName: File(263) to DirectoryEntry", "Update SimpleName: dir(265) to rootEntry", "Update SimpleName: dir(274) to rootEntry", "Update SimpleName: newDir(303) to dir", "Insert VariableDeclarationStatement(377) into Block(394) at 0", "Move ExpressionStatement(314) into Block(394) at 1", "Move ExpressionStatement(334) into Block(394) at 2", "Move ExpressionStatement(320) into Block(394) at 3", "Insert SimpleType: AttributeService(53) into ClassInstanceCreation(57) at 0", "Update SimpleName: fileStore(71) to RegularFileStorage", "Update SimpleName: createDirectory(72) to from", "Move MethodInvocation(61) into MethodInvocation(68) at 2", "Insert SimpleType: FileFactory(75) into ClassInstanceCreation(77) at 0", "Insert SimpleName: storage(76) into ClassInstanceCreation(77) at 1", "Update SimpleName: createRootDir(91) to createFileTree", "Move SimpleName: createRootDir(91) into MethodInvocation(87) at 0", "Update SimpleName: root(92) to config", "Move SimpleName: root(92) into MethodInvocation(87) at 1", "Move SimpleName: pathService(93) into MethodInvocation(87) at 2", "Insert SimpleName: fileFactory(86) into MethodInvocation(87) at 3", "Move SimpleType: JimfsFileStore(50) into ClassInstanceCreation(99) at 0", "Insert SimpleName: tree(95) into ClassInstanceCreation(99) at 1", "Insert SimpleName: fileFactory(96) into ClassInstanceCreation(99) at 2", "Insert SimpleName: storage(97) into ClassInstanceCreation(99) at 3", "Insert SimpleName: attributeService(98) into ClassInstanceCreation(99) at 4", "Update SimpleName: fileStore(116) to fileFactory", "Update SimpleName: superRootTable(117) to tree", "Move SimpleType: FileSystemService(122) into ClassInstanceCreation(132) at 0", "Update SimpleName: superRoot(126) to fileStore", "Insert SimpleName: fileStore(142) into ClassInstanceCreation(145) at 3", "Insert SimpleName: pathService(143) into ClassInstanceCreation(145) at 4", "Insert SimpleName: fileFactory(180) into MethodInvocation(182) at 0", "Insert SimpleName: createDirectory(181) into MethodInvocation(182) at 1", "Insert MethodInvocation(210) into ExpressionStatement(211) at 0", "Insert SimpleName: FileTree(214) into SimpleType: FileTree(215) at 0", "Update SimpleName: fileStore(213) to fileFactory", "Update SimpleName: superRootTable(266) to tree", "Update SimpleName: get(267) to getRoot", "Update SimpleName: fileStore(304) to rootEntry", "Update SimpleName: createDirectory(305) to file", "Move SimpleType: File(69) into VariableDeclarationStatement(377) at 0", "Insert VariableDeclarationFragment(376) into VariableDeclarationStatement(377) at 1", "Insert SimpleName: AttributeService(52) into SimpleType: AttributeService(53) at 0", "Insert SimpleName: FileFactory(74) into SimpleType: FileFactory(75) at 0", "Insert SimpleName: createRootDir(205) into MethodInvocation(210) at 0", "Insert SimpleName: root(206) into MethodInvocation(210) at 1", "Insert SimpleName: pathService(207) into MethodInvocation(210) at 2", "Insert SimpleName: fileFactory(208) into MethodInvocation(210) at 3", "Insert SimpleName: superRootTable(209) into MethodInvocation(210) at 4", "Insert SimpleName: newDir(372) into VariableDeclarationFragment(376) at 0", "Insert MethodInvocation(375) into VariableDeclarationFragment(376) at 1", "Update SimpleName: table(326) to fileFactory", "Move SimpleName: table(326) into MethodInvocation(375) at 0", "Update SimpleName: linkParent(327) to createDirectory", "Move SimpleName: linkParent(327) into MethodInvocation(375) at 1", "Delete StringLiteral: \"jimfs-\"(54)", "Delete SimpleName: uri(55)", "Delete SimpleName: getHost(56)", "Delete MethodInvocation(57)", "Delete InfixExpression: +(58)", "Delete SimpleName: fileStore(94)", "Delete SimpleName: superRootTable(95)", "Delete MethodInvocation(96)", "Delete ExpressionStatement(97)", "Delete Block(98)", "Delete EnhancedForStatement(99)", "Delete SimpleName: fileStore(129)", "Delete SimpleName: rootDirTable(231)", "Delete SimpleName: linkParent(232)", "Delete SimpleName: rootDir(233)", "Delete MethodInvocation(234)", "Delete ExpressionStatement(235)", "Delete SimpleName: linkSelf(227)", "Delete SimpleName: table(321)", "Delete SimpleName: linkSelf(322)", "Delete SimpleName: newDir(323)", "Delete MethodInvocation(324)", "Delete ExpressionStatement(325)", "Delete SimpleName: dir(328)", "Delete MethodInvocation(329)", "Delete ExpressionStatement(330)", "Delete Block(335)", "Delete EnhancedForStatement(336)"]}}, {"FileSystemService_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 3", "MOV MethodDeclaration to TypeDeclaration: class at 54"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: File to MethodDeclaration at 5", "MOV SimpleType: IOException to MethodDeclaration at 5"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 39", "operations": ["INS SimpleType: JimfsPath to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: path to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 39", "INS SimpleName: JimfsPath to SimpleType: JimfsPath at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: JimfsPath to SimpleType: JimfsPath at 0", "INS SimpleType: JimfsPath to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 6", "INS MethodInvocation to ReturnStatement at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: readSymbolicLink to MethodDeclaration at 3", "INS TextElement: Returns the target of the symbolic link at the given path. to TagElement at 0", "INS TagElement to Javadoc at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 40", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: path to SingleVariableDeclaration at 1", "INS SimpleName: checkAccess to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS TagElement to Javadoc at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS TextElement: Checks access to the file at the given path for the given modes. Since access controls are not to TagElement at 0", "INS SimpleName: FOLLOW_LINKS to MethodInvocation at 2", "INS SimpleType: JimfsPath to SingleVariableDeclaration at 0", "INS SimpleName: lookupInternal to MethodInvocation at 0", "INS SimpleType: IOException to MethodDeclaration at 5", "INS ExpressionStatement to Block at 0", "INS SimpleName: path to MethodInvocation at 1", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: implemented for this file system, this just checks that the file exists. to TagElement at 1", "INS MethodDeclaration to TypeDeclaration: class at 40", "INS PrimitiveType: void to MethodDeclaration at 2", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 43", "operations": ["INS Block to TryStatement at 0", "INS SimpleName: deleteFile to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 7", "INS MethodDeclaration to TypeDeclaration: class at 43", "INS PrimitiveType: void to MethodDeclaration at 2", "INS TryStatement to Block at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 57", "operations": ["INS SimpleName: setAttribute to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 57", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from DirEntry to DirectoryEntry", "operations": ["UPD SimpleName: DirEntry from DirEntry to DirectoryEntry", "UPD SimpleType: LookupResult from LookupResult to DirectoryEntry", "UPD SimpleName: LookupResult from LookupResult to DirectoryEntry", "UPD SimpleType: LookupResult from LookupResult to DirectoryEntry", "UPD SimpleType: LookupResult from LookupResult to DirectoryEntry", "UPD SimpleType: LookupResult from LookupResult to DirectoryEntry", "UPD SimpleName: LookupResult from LookupResult to DirectoryEntry", "UPD SimpleName: Name from Name to DirectoryEntry", "UPD SimpleType: LookupResult from LookupResult to DirectoryEntry", "UPD SimpleName: LookupResult from LookupResult to DirectoryEntry", "UPD SimpleType: DirEntry from DirEntry to DirectoryEntry", "UPD SimpleName: LookupResult from LookupResult to DirectoryEntry", "UPD SimpleName: LookupResult from LookupResult to DirectoryEntry", "UPD SimpleName: LookupResult from LookupResult to DirectoryEntry", "UPD SimpleType: LookupResult from LookupResult to DirectoryEntry", "UPD SimpleType: Name from Name to DirectoryEntry", "UPD SimpleName: LookupResult from LookupResult to DirectoryEntry", "UPD SimpleType: LookupResult from LookupResult to DirectoryEntry"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement: possible. to TagElement at 1", "INS TagElement to Javadoc at 0", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: Creates a new directory at the given path. The given attributes will be set on the new file if to TagElement at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: File to MethodDeclaration at 2"]}, {"root": "INS SimpleName: createDirectory to MethodDeclaration at 3", "operations": ["INS SimpleName: createDirectory to MethodDeclaration at 3"]}, {"root": "UPDATE from File to IOException", "operations": ["UPD SimpleName: File from File to IOException", "UPD SimpleType: File from File to IOException"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement: be set on the new file if possible. to TagElement at 1", "INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS TextElement: Creates a new symbolic link at the given path with the given target. The given attributes will to TagElement at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SimpleName: FileAttribute to SimpleType: FileAttribute at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleType: FileAttribute to ParameterizedType: FileAttribute<?> at 0", "INS WildcardType: ? to ParameterizedType: FileAttribute<?> at 1", "INS SimpleName: attrs to SingleVariableDeclaration at 1", "INS ParameterizedType: FileAttribute<?> to SingleVariableDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SimpleType: IOException to MethodDeclaration at 6", "MOV Modifier: public to MethodDeclaration at 1", "MOV Javadoc to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 10", "MOV TypeParameter to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 7", "MOV SingleVariableDeclaration to MethodDeclaration at 8", "MOV SingleVariableDeclaration to MethodDeclaration at 9", "MOV Block to MethodDeclaration at 9", "MOV Javadoc to MethodDeclaration at 0", "MOV SimpleType: A to MethodDeclaration at 4"]}, {"root": "UPDATE from setAttribute to readAttributes", "operations": ["UPD SimpleName: setAttribute from setAttribute to readAttributes", "UPD SimpleName: setAttribute from setAttribute to readAttributes"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV Javadoc to MethodDeclaration at 0", "MOV SimpleType: IOException to MethodDeclaration at 8", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 7"]}, {"root": "UPDATE from fileStore to store", "operations": ["UPD SimpleName: fileStore from fileStore to store", "UPD SimpleName: fileStore from fileStore to store", "UPD SimpleName: fileStore from fileStore to store", "UPD SimpleName: linkSelfAndParent from linkSelfAndParent to store", "UPD SimpleName: fileStore from fileStore to store", "UPD SimpleName: superRoot from superRoot to store", "UPD SimpleName: fileStore from fileStore to store", "UPD SimpleName: fileStore from fileStore to store", "UPD SimpleName: superRoot from superRoot to store", "UPD SimpleName: lookupService from lookupService to store", "UPD SimpleName: lock from lock to store", "UPD SimpleName: fileStore from fileStore to store", "UPD SimpleName: lock from lock to store", "UPD SimpleName: fileStore from fileStore to store", "UPD SimpleName: fileStore from fileStore to store", "UPD SimpleName: fileStore from fileStore to store", "UPD SimpleName: fileStore from fileStore to store", "UPD SimpleName: fileStore from fileStore to store", "UPD SimpleName: fileStore from fileStore to store", "UPD SimpleName: fileStore from fileStore to store"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from result to entry", "operations": ["UPD SimpleName: result from result to entry", "UPD SimpleName: result from result to entry", "UPD SimpleName: result from result to entry", "UPD SimpleName: parent from parent to entry", "UPD SimpleName: result from result to entry", "UPD SimpleName: result from result to entry", "UPD SimpleName: superRoot from superRoot to entry", "UPD SimpleName: name from name to entry", "UPD SimpleName: result from result to entry", "UPD SimpleName: lookupResult from lookupResult to entry", "UPD SimpleName: lookupResult from lookupResult to entry", "UPD SimpleName: result from result to entry", "UPD SimpleName: parentTable from parentTable to entry", "UPD SimpleName: unlinkSelfAndParent from unlinkSelfAndParent to entry", "UPD SimpleName: parentTable from parentTable to entry", "UPD SimpleName: lookupResult from lookupResult to entry"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS VariableDeclarationStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: file to VariableDeclarationFragment at 0"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS ExpressionStatement to Block at 5", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: attribute to MethodInvocation at 3", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from parent.superRoot to parent.store", "operations": ["UPD QualifiedName: parent.superRoot from parent.superRoot to parent.store"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: File to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from Name to JimfsPath", "operations": ["UPD SimpleName: Name from Name to JimfsPath"]}, {"root": "MOVE from SimpleType: JimfsPath", "operations": ["MOV SimpleName: Name to SimpleType: JimfsPath at 0"]}, {"root": "MOVE from TryStatement", "operations": ["MOV Block to TryStatement at 1"]}, {"root": "MOVE from TryStatement", "operations": ["MOV Block to TryStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: File to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: File to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: File to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from other.superRoot to other.store", "operations": ["UPD QualifiedName: other.superRoot from other.superRoot to other.store"]}, {"root": "INS SimpleName: attrs to MethodInvocation at 4", "operations": ["INS SimpleName: attrs to MethodInvocation at 4"]}, {"root": "INS SimpleName: attrs to MethodInvocation at 4", "operations": ["INS SimpleName: attrs to MethodInvocation at 4"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: path to MethodInvocation at 1", "INS SimpleName: NOFOLLOW_LINKS to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: lookupInternal to MethodInvocation at 0", "INS SimpleName: entry to VariableDeclarationFragment at 0", "INS SimpleName: DirectoryEntry to SimpleType: DirectoryEntry at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: DirectoryEntry to VariableDeclarationStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 5"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1", "MOV ReturnStatement to Block at 2"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: byteStore to MethodInvocation at 0", "INS SimpleName: writeLock to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: lock to MethodInvocation at 1"]}, {"root": "UPDATE from LookupResult to File", "operations": ["UPD SimpleName: LookupResult from LookupResult to File", "UPD SimpleType: DirectoryTable from DirectoryTable to File"]}, {"root": "MOVE from SimpleType: File", "operations": ["MOV SimpleName: LookupResult to SimpleType: File at 0"]}, {"root": "UPDATE from result to symbolicLink", "operations": ["UPD SimpleName: result from result to symbolicLink", "UPD SimpleName: result from result to symbolicLink"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: file to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: result to MethodInvocation at 0", "MOV SimpleName: parent to MethodInvocation at 1"]}, {"root": "UPDATE from parent to content", "operations": ["UPD SimpleName: parent from parent to content"]}, {"root": "UPDATE from requireFound to requireExists", "operations": ["UPD SimpleName: requireFound from requireFound to requireExists", "UPD SimpleName: requireFound from requireFound to requireExists", "UPD SimpleName: requireFound from requireFound to requireExists", "UPD SimpleName: requireFound from requireFound to requireExists", "UPD SimpleName: result from result to requireExists", "UPD SimpleName: requireFound from requireFound to requireExists", "UPD SimpleName: requireFound from requireFound to requireExists", "UPD SimpleName: requireFound from requireFound to requireExists", "UPD SimpleName: requireFound from requireFound to requireExists"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: name to MethodInvocation at 2", "MOV SimpleName: result to MethodInvocation at 1"]}, {"root": "UPDATE from name to path", "operations": ["UPD SimpleName: name from name to path"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from file to parent", "operations": ["UPD SimpleName: file from file to parent"]}, {"root": "UPDATE from file to parentTable", "operations": ["UPD SimpleName: file from file to parentTable"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: file to MethodInvocation at 0", "MOV SimpleName: isDirectory to MethodInvocation at 1"]}, {"root": "UPDATE from isDirectory to unlink", "operations": ["UPD SimpleName: isDirectory from isDirectory to unlink"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: fileStore to MethodInvocation at 0", "MOV SimpleName: value to MethodInvocation at 3", "MOV SimpleName: setAttribute to MethodInvocation at 1", "MOV SimpleName: file to MethodInvocation at 2"]}, {"root": "UPDATE from value to type", "operations": ["UPD SimpleName: value from value to type"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: fileStore to MethodInvocation at 0", "MOV SimpleName: type to MethodInvocation at 4", "MOV SimpleName: file to MethodInvocation at 2", "MOV SimpleName: readAttributes to MethodInvocation at 1"]}, {"root": "UPDATE from readAttributes to setAttribute", "operations": ["UPD SimpleName: readAttributes from readAttributes to setAttribute"]}, {"root": "UPDATE from type to value", "operations": ["UPD SimpleName: type from type to value"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV WhileStatement to Block at 3"]}, {"root": "UPDATE from directorySupplier to createDirectory", "operations": ["UPD SimpleName: directorySupplier from directorySupplier to createDirectory"]}, {"root": "UPDATE from symbolicLinkSupplier to createSymbolicLink", "operations": ["UPD SimpleName: symbolicLinkSupplier from symbolicLinkSupplier to createSymbolicLink"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: File to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: File to VariableDeclarationStatement at 0"]}, {"root": "INS Block to TryStatement at 1", "operations": ["INS SimpleName: writeLock to MethodInvocation at 1", "INS Block to TryStatement at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: byteStore to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: unlock to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "UPDATE from parent to directory", "operations": ["UPD SimpleName: parent from parent to directory", "UPD SimpleName: parent from parent to directory", "UPD SimpleName: content from content to directory", "UPD SimpleName: get from get to directory", "UPD SimpleName: parent from parent to directory", "UPD SimpleName: requireNotFound from requireNotFound to directory", "UPD SimpleName: parent from parent to directory"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: parentTable to MethodInvocation at 0", "MOV SimpleName: name to MethodInvocation at 1"]}, {"root": "UPDATE from name to file", "operations": ["UPD SimpleName: name from name to file", "UPD SimpleName: superRootTable from superRootTable to file"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: unlinkSelfAndParent to MethodInvocation at 0", "MOV SimpleName: file to MethodInvocation at 1"]}, {"root": "UPDATE from file to name", "operations": ["UPD SimpleName: file from file to name"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "INS QualifiedName: destService.store to MethodInvocation at 0", "operations": ["INS QualifiedName: destService.store to MethodInvocation at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: File to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: File to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: File to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from found to exists", "operations": ["UPD SimpleName: found from found to exists", "UPD SimpleName: found from found to exists", "UPD SimpleName: found from found to exists"]}, {"root": "INS SimpleName: setInitialAttributes to MethodInvocation at 1", "operations": ["INS SimpleName: setInitialAttributes to MethodInvocation at 1"]}, {"root": "UPDATE from parent to attrs", "operations": ["UPD SimpleName: parent from parent to attrs"]}, {"root": "UPDATE from store to byteStore", "operations": ["UPD SimpleName: store from store to byteStore", "UPD SimpleName: store from store to byteStore"]}, {"root": "UPDATE from requireParentFound to requireSymbolicLink", "operations": ["UPD SimpleName: requireParentFound from requireParentFound to requireSymbolicLink"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from sourceLookup to sourceEntry", "operations": ["UPD SimpleName: sourceLookup from sourceLookup to sourceEntry", "UPD SimpleName: sourceLookup from sourceLookup to sourceEntry", "UPD SimpleName: sourceName from sourceName to sourceEntry", "UPD SimpleName: sourceLookup from sourceLookup to sourceEntry", "UPD SimpleName: sourceLookup from sourceLookup to sourceEntry"]}, {"root": "INS SimpleName: destEntry to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: destEntry to VariableDeclarationFragment at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from destLookup to destEntry", "operations": ["UPD SimpleName: destLookup from destLookup to destEntry", "UPD SimpleName: destLookup from destLookup to destEntry", "UPD SimpleName: destLookup from destLookup to destEntry", "UPD SimpleName: destName from destName to destEntry"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "INS BooleanLiteral: true to WhileStatement at 0", "operations": ["INS BooleanLiteral: true to WhileStatement at 0"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: attrs to MethodInvocation at 5", "MOV SimpleName: regularFileSupplier to MethodInvocation at 1", "MOV SimpleName: fileStore to MethodInvocation at 0"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: File to VariableDeclarationStatement at 0"]}, {"root": "INS QualifiedName: destService.store to MethodInvocation at 0", "operations": ["INS QualifiedName: destService.store to MethodInvocation at 0"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "MOVE from SimpleType: DirectoryTable", "operations": ["MOV SimpleName: File to SimpleType: DirectoryTable at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS SimpleName: parent to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS BreakStatement to Block at 0", "INS IfStatement to Block at 3", "INS Block to IfStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1", "MOV ReturnStatement to Block at 2"]}, {"root": "UPDATE from regularFileSupplier to createRegularFile", "operations": ["UPD SimpleName: regularFileSupplier from regularFileSupplier to createRegularFile"]}, {"root": "UPDATE from requireParentFound to requireDoesNotExist", "operations": ["UPD SimpleName: requireParentFound from requireParentFound to requireDoesNotExist"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: File to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: File to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleName: store to MethodInvocation at 0", "operations": ["INS SimpleName: store to MethodInvocation at 0"]}, {"root": "UPDATE from destService.fileStore to destService.store", "operations": ["UPD QualifiedName: destService.fileStore from destService.fileStore to destService.store"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleName: parent to Assignment: = at 1", "operations": ["INS SimpleName: parent to Assignment: = at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.jimfs.internal.DirectoryTable.DirEntry", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.concurrent.locks.ReadWriteLock", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.concurrent.locks.ReentrantReadWriteLock"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL SimpleType: File", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL FieldDeclaration", "DEL SimpleName: File", "DEL SimpleName: superRoot"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL SimpleName: lookupService", "DEL SimpleType: LookupService", "DEL VariableDeclarationFragment", "DEL SimpleName: LookupService", "DEL Modifier: private", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: lock", "DEL VariableDeclarationFragment", "DEL SimpleName: ReadWriteLock", "DEL Modifier: private", "DEL FieldDeclaration", "DEL Modifier: final", "DEL SimpleType: ReadWriteLock"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: File", "DEL SimpleName: File", "DEL SimpleName: superRoot", "DEL SingleVariableDeclaration"]}, {"root": "DEL SimpleName: fileStore", "operations": ["DEL SimpleName: fileStore"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: LookupService", "DEL ClassInstanceCreation", "DEL SimpleType: LookupService", "DEL SimpleName: superRoot"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: ReentrantReadWriteLock", "DEL SimpleType: ReentrantReadWriteLock", "DEL ClassInstanceCreation"]}, {"root": "DEL QualifiedName: parent.fileStore", "operations": ["DEL QualifiedName: parent.fileStore"]}, {"root": "DEL QualifiedName: parent.lookupService", "operations": ["DEL QualifiedName: parent.lookupService"]}, {"root": "DEL QualifiedName: parent.lock", "operations": ["DEL QualifiedName: parent.lock"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: File", "DEL SimpleName: superRoot", "DEL SimpleType: File", "DEL SingleVariableDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleType: LookupService", "DEL SimpleName: LookupService", "DEL SimpleName: lookupService"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: lock", "DEL SimpleType: ReadWriteLock", "DEL SimpleName: ReadWriteLock", "DEL SingleVariableDeclaration"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL SimpleName: superRoot", "DEL SimpleName: superRoot", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ThisExpression", "DEL FieldAccess", "DEL SimpleName: checkNotNull"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: lookupService", "DEL SimpleName: lookupService", "DEL ExpressionStatement", "DEL SimpleName: checkNotNull", "DEL ThisExpression", "DEL FieldAccess"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL FieldAccess", "DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleName: lock", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: checkNotNull", "DEL SimpleName: lock"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Lock", "DEL Block", "DEL ReturnStatement", "DEL SimpleType: Lock", "DEL SimpleName: readLock", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Modifier: private", "DEL SimpleName: lock", "DEL SimpleName: readLock"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: lock", "DEL SimpleName: writeLock", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleName: Lock", "DEL ReturnStatement", "DEL SimpleType: Lock", "DEL SimpleName: writeLock", "DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: superRoot", "DEL Block", "DEL TextElement: Returns the super root directory for the file system.", "DEL Modifier: public", "DEL Javadoc", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: getSuperRoot", "DEL ReturnStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: file", "DEL SimpleName: lookupResult", "DEL SimpleName: parent", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL MethodInvocation"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: superRootTable", "DEL SimpleName: add", "DEL ExpressionStatement", "DEL SimpleName: getName", "DEL SimpleName: names", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: file"]}, {"root": "DEL SimpleName: createDirectory", "operations": ["DEL SimpleName: createDirectory"]}, {"root": "DEL SimpleName: attrs", "operations": ["DEL SimpleName: attrs"]}, {"root": "DEL SimpleName: attrs", "operations": ["DEL SimpleName: attrs"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: isDirectory", "DEL SimpleName: newFile", "DEL IfStatement", "DEL MethodInvocation", "DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL SimpleName: parent", "DEL SimpleType: DirectoryTable", "DEL SimpleName: content", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: table", "DEL Block", "DEL SimpleName: self", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL SimpleName: linkSelfAndParent", "DEL SimpleName: self", "DEL SimpleName: self", "DEL SimpleName: DirectoryTable", "DEL SimpleName: linkParent", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: table", "DEL SimpleName: linkSelf", "DEL VariableDeclarationFragment", "DEL SimpleName: table", "DEL Modifier: private", "DEL ExpressionStatement", "DEL SimpleName: parent", "DEL SingleVariableDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: DirectoryTable", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: table", "DEL Modifier: private", "DEL SimpleName: unlinkSelfAndParent", "DEL SingleVariableDeclaration", "DEL SimpleName: unlinkParent", "DEL SimpleName: DirectoryTable", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: dir", "DEL VariableDeclarationFragment", "DEL SimpleName: table", "DEL SimpleName: content", "DEL SimpleName: dir", "DEL SimpleName: table", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL SimpleName: unlinkSelf", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL SimpleType: File", "operations": ["DEL SimpleName: File", "DEL SimpleType: File"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: link", "operations": ["DEL SimpleName: link"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: parent"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: unlock", "DEL SimpleName: writeLock", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Block"]}, {"root": "DEL SimpleName: name", "operations": ["DEL SimpleName: name"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: Name", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: lock", "DEL SimpleName: name", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: parent", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: deleteFile", "DEL MethodInvocation", "DEL TryStatement", "DEL Block", "DEL SimpleName: writeLock", "DEL PrimitiveType: void", "DEL VariableDeclarationStatement", "DEL MethodInvocation"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: parent"]}, {"root": "DEL SimpleName: name", "operations": ["DEL SimpleName: name"]}, {"root": "DEL AssertStatement", "operations": ["DEL NullLiteral", "DEL AssertStatement", "DEL SimpleName: file", "DEL InfixExpression: !="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: unlink", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Block", "DEL IfStatement"]}, {"root": "DEL SimpleName: destService", "operations": ["DEL SimpleName: destService"]}, {"root": "DEL SimpleName: destLookup", "operations": ["DEL SimpleName: destLookup"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: dest", "DEL SimpleName: requireParentFound", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: destParent", "operations": ["DEL SimpleName: destParent"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: sourceFile", "DEL SimpleName: isDirectory", "DEL MethodInvocation", "DEL SimpleName: sourceFile", "DEL ExpressionStatement", "DEL SimpleName: sourceFile", "DEL SimpleName: unlinkSelfAndParent", "DEL Block", "DEL SimpleName: destParent", "DEL IfStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: linkSelfAndParent"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL SimpleName: copy", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: copy", "DEL Block", "DEL SimpleName: linkSelfAndParent", "DEL MethodInvocation", "DEL SimpleName: isDirectory", "DEL SimpleName: destParent"]}, {"root": "DEL SimpleName: sourceParent", "operations": ["DEL SimpleName: sourceParent"]}, {"root": "DEL SimpleName: destService", "operations": ["DEL SimpleName: destService"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL SimpleName: readAttributes", "DEL Modifier: public"]}, {"root": "DEL PrimitiveType: void", "operations": ["DEL PrimitiveType: void"]}, {"root": "DEL SimpleType: File", "operations": ["DEL SimpleName: File", "DEL SimpleType: File"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: attribute"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL MethodInvocation"]}]}}, {"FileSystemService_diff": {"operations": ["Move FieldDeclaration(105) into TypeDeclaration: class(2501) at 3", "Move MethodDeclaration(2598) into TypeDeclaration: class(2501) at 54", "Move SimpleType: File(1076) into MethodDeclaration(996) at 5", "Insert MethodDeclaration(1430) into TypeDeclaration: class(2501) at 31", "Insert MethodDeclaration(1453) into TypeDeclaration: class(2501) at 32", "Insert MethodDeclaration(1663) into TypeDeclaration: class(2501) at 35", "Insert MethodDeclaration(2500) into TypeDeclaration: class(2501) at 47", "Move SingleVariableDeclaration(223) into MethodDeclaration(137) at 3", "Move SingleVariableDeclaration(154) into MethodDeclaration(227) at 2", "Move ExpressionStatement(271) into Block(226) at 0", "Update SimpleType: LookupResult(417) to DirectoryEntry", "Update SimpleType: LookupResult(454) to DirectoryEntry", "Insert Javadoc(969) into MethodDeclaration(996) at 0", "Move SimpleType: File(347) into MethodDeclaration(996) at 2", "Insert SimpleName: createDirectory(973) into MethodDeclaration(996) at 3", "Update SimpleType: File(1076) to IOException", "Insert Javadoc(1000) into MethodDeclaration(1032) at 0", "Insert SingleVariableDeclaration(1070) into MethodDeclaration(1176) at 7", "Insert Javadoc(1400) into MethodDeclaration(1430) at 0", "Move Modifier: public(1712) into MethodDeclaration(1430) at 1", "Insert SimpleType: JimfsPath(1403) into MethodDeclaration(1430) at 2", "Insert SimpleName: readSymbolicLink(1404) into MethodDeclaration(1430) at 3", "Insert SingleVariableDeclaration(1408) into MethodDeclaration(1430) at 4", "Move SimpleType: IOException(1089) into MethodDeclaration(1430) at 5", "Insert Block(1429) into MethodDeclaration(1430) at 6", "Insert Javadoc(1434) into MethodDeclaration(1453) at 0", "Insert Modifier: public(1435) into MethodDeclaration(1453) at 1", "Insert PrimitiveType: void(1436) into MethodDeclaration(1453) at 2", "Insert SimpleName: checkAccess(1437) into MethodDeclaration(1453) at 3", "Insert SingleVariableDeclaration(1441) into MethodDeclaration(1453) at 4", "Insert SimpleType: IOException(1443) into MethodDeclaration(1453) at 5", "Insert Block(1452) into MethodDeclaration(1453) at 6", "Move Javadoc(1711) into MethodDeclaration(1663) at 0", "Insert Modifier: public(1616) into MethodDeclaration(1663) at 1", "Insert PrimitiveType: void(1617) into MethodDeclaration(1663) at 2", "Insert SimpleName: deleteFile(1618) into MethodDeclaration(1663) at 3", "Move SingleVariableDeclaration(1718) into MethodDeclaration(1663) at 4", "Move SingleVariableDeclaration(1722) into MethodDeclaration(1663) at 5", "Move SimpleType: IOException(1724) into MethodDeclaration(1663) at 6", "Insert Block(1662) into MethodDeclaration(1663) at 7", "Move VariableDeclarationStatement(1806) into Block(1738) at 2", "Move Javadoc(2503) into MethodDeclaration(2404) at 0", "Move TypeParameter(2508) into MethodDeclaration(2404) at 3", "Move SimpleType: A(2510) into MethodDeclaration(2404) at 4", "Update SimpleName: setAttribute(2605) to readAttributes", "Move SingleVariableDeclaration(2515) into MethodDeclaration(2404) at 7", "Move SingleVariableDeclaration(2522) into MethodDeclaration(2404) at 8", "Move SingleVariableDeclaration(2526) into MethodDeclaration(2404) at 9", "Move SimpleType: IOException(2528) into MethodDeclaration(2404) at 10", "Move Javadoc(2602) into MethodDeclaration(2500) at 0", "Insert Modifier: public(2457) into MethodDeclaration(2500) at 1", "Insert PrimitiveType: void(2458) into MethodDeclaration(2500) at 2", "Insert SimpleName: setAttribute(2459) into MethodDeclaration(2500) at 3", "Move SingleVariableDeclaration(2609) into MethodDeclaration(2500) at 4", "Move SingleVariableDeclaration(2613) into MethodDeclaration(2500) at 5", "Move SingleVariableDeclaration(2617) into MethodDeclaration(2500) at 6", "Move SingleVariableDeclaration(2621) into MethodDeclaration(2500) at 7", "Move SimpleType: IOException(2623) into MethodDeclaration(2500) at 8", "Move Block(2549) into MethodDeclaration(2500) at 9", "Update SimpleName: fileStore(103) to store", "Update SimpleName: fileStore(222) to store", "Update SimpleName: fileStore(153) to store", "Update SimpleName: LookupResult(416) to DirectoryEntry", "Update SimpleName: LookupResult(453) to DirectoryEntry", "Insert TagElement(968) into Javadoc(969) at 0", "Update SimpleName: File(1075) to IOException", "Insert TagElement(999) into Javadoc(1000) at 0", "Insert ParameterizedType: FileAttribute<?>(1068) into SingleVariableDeclaration(1070) at 0", "Insert SimpleName: attrs(1069) into SingleVariableDeclaration(1070) at 1", "Insert TagElement(1399) into Javadoc(1400) at 0", "Insert SimpleName: JimfsPath(1402) into SimpleType: JimfsPath(1403) at 0", "Insert SimpleType: JimfsPath(1406) into SingleVariableDeclaration(1408) at 0", "Insert SimpleName: path(1407) into SingleVariableDeclaration(1408) at 1", "Move VariableDeclarationStatement(1199) into Block(1429) at 0", "Insert ReturnStatement(1428) into Block(1429) at 1", "Insert TagElement(1433) into Javadoc(1434) at 0", "Insert SimpleType: JimfsPath(1439) into SingleVariableDeclaration(1441) at 0", "Insert SimpleName: path(1440) into SingleVariableDeclaration(1441) at 1", "Insert SimpleName: IOException(1442) into SimpleType: IOException(1443) at 0", "Insert ExpressionStatement(1451) into Block(1452) at 0", "Move ExpressionStatement(1528) into Block(1662) at 0", "Insert TryStatement(1661) into Block(1662) at 1", "Update SimpleType: Name(1786) to DirectoryEntry", "Update SimpleName: name(1787) to entry", "Insert VariableDeclarationStatement(1707) into Block(1738) at 2", "Insert ExpressionStatement(1720) into Block(1738) at 4", "Insert ReturnStatement(2402) into Block(2403) at 1", "Insert ExpressionStatement(2498) into Block(2499) at 1", "Update SimpleName: superRoot(159) to store", "Update QualifiedName: parent.superRoot(195) to parent.store", "Update SimpleName: fileStore(383) to store", "Insert TextElement: Creates a new directory at the given path. The given attributes will be set on the new file if(966) into TagElement(968) at 0", "Insert TextElement: possible.(967) into TagElement(968) at 1", "Insert TextElement: Creates a new symbolic link at the given path with the given target. The given attributes will(997) into TagElement(999) at 0", "Insert TextElement: be set on the new file if possible.(998) into TagElement(999) at 1", "Insert SimpleType: FileAttribute(1066) into ParameterizedType: FileAttribute<?>(1068) at 0", "Insert WildcardType: ?(1067) into ParameterizedType: FileAttribute<?>(1068) at 1", "Insert TextElement: Returns the target of the symbolic link at the given path.(1398) into TagElement(1399) at 0", "Insert SimpleName: JimfsPath(1405) into SimpleType: JimfsPath(1406) at 0", "Move SimpleType: File(1396) into VariableDeclarationStatement(1424) at 0", "Insert MethodInvocation(1427) into ReturnStatement(1428) at 0", "Insert TextElement: Checks access to the file at the given path for the given modes. Since access controls are not(1431) into TagElement(1433) at 0", "Insert TextElement: implemented for this file system, this just checks that the file exists.(1432) into TagElement(1433) at 1", "Update SimpleName: Name(1750) to JimfsPath", "Move SimpleName: Name(1750) into SimpleType: JimfsPath(1439) at 0", "Insert MethodInvocation(1450) into ExpressionStatement(1451) at 0", "Move Block(1541) into TryStatement(1591) at 1", "Insert Block(1653) into TryStatement(1661) at 0", "Move Block(1771) into TryStatement(1661) at 1", "Update SimpleName: Name(1785) to DirectoryEntry", "Move SimpleType: File(1782) into VariableDeclarationStatement(1691) at 0", "Move SimpleType: File(1743) into VariableDeclarationStatement(1707) at 0", "Insert VariableDeclarationFragment(1706) into VariableDeclarationStatement(1707) at 1", "Insert MethodInvocation(1719) into ExpressionStatement(1720) at 0", "Move SimpleType: File(2264) into VariableDeclarationStatement(2396) at 0", "Insert MethodInvocation(2401) into ReturnStatement(2402) at 0", "Insert MethodInvocation(2497) into ExpressionStatement(2498) at 0", "Update SimpleName: superRoot(336) to store", "Update QualifiedName: other.superRoot(337) to other.store", "Update SimpleName: lookupService(466) to store", "Insert SimpleName: attrs(992) into MethodInvocation(993) at 4", "Insert SimpleName: attrs(1028) into MethodInvocation(1029) at 4", "Insert SimpleName: FileAttribute(1065) into SimpleType: FileAttribute(1066) at 0", "Insert VariableDeclarationStatement(1103) into Block(1166) at 0", "Move ExpressionStatement(1261) into Block(1166) at 5", "Move IfStatement(1417) into Block(1333) at 1", "Move ReturnStatement(1422) into Block(1333) at 2", "Insert ExpressionStatement(1377) into Block(1392) at 1", "Update SimpleName: result(1190) to symbolicLink", "Insert MethodInvocation(1422) into VariableDeclarationFragment(1423) at 1", "Update SimpleName: result(1745) to symbolicLink", "Move SimpleName: result(1745) into MethodInvocation(1427) at 0", "Update SimpleName: parent(1746) to content", "Move SimpleName: parent(1746) into MethodInvocation(1427) at 1", "Insert MethodInvocation(1447) into MethodInvocation(1450) at 0", "Update SimpleName: result(1753) to requireExists", "Move SimpleName: result(1753) into MethodInvocation(1450) at 1", "Update SimpleName: name(1754) to path", "Move SimpleName: name(1754) into MethodInvocation(1450) at 2", "Move VariableDeclarationStatement(1741) into Block(1653) at 0", "Move ExpressionStatement(1764) into Block(1653) at 1", "Update SimpleName: file(1809) to parent", "Insert SimpleName: file(1702) into VariableDeclarationFragment(1706) at 0", "Insert MethodInvocation(1705) into VariableDeclarationFragment(1706) at 1", "Update SimpleName: file(1835) to parentTable", "Move SimpleName: file(1835) into MethodInvocation(1719) at 0", "Update SimpleName: isDirectory(1836) to unlink", "Move SimpleName: isDirectory(1836) into MethodInvocation(1719) at 1", "Insert MethodInvocation(1718) into MethodInvocation(1719) at 2", "Update SimpleName: fileStore(2490) to store", "Update SimpleName: fileStore(2638) to store", "Move SimpleName: fileStore(2638) into MethodInvocation(2401) at 0", "Update SimpleName: setAttribute(2639) to readAttributes", "Move SimpleName: setAttribute(2639) into MethodInvocation(2401) at 1", "Move SimpleName: file(2640) into MethodInvocation(2401) at 2", "Update SimpleName: value(2642) to type", "Move SimpleName: value(2642) into MethodInvocation(2401) at 3", "Update SimpleName: fileStore(2591) to store", "Update SimpleName: fileStore(2543) to store", "Move SimpleName: fileStore(2543) into MethodInvocation(2497) at 0", "Update SimpleName: readAttributes(2544) to setAttribute", "Move SimpleName: readAttributes(2544) into MethodInvocation(2497) at 1", "Move SimpleName: file(2545) into MethodInvocation(2497) at 2", "Insert SimpleName: attribute(2495) into MethodInvocation(2497) at 3", "Update SimpleName: type(2546) to value", "Move SimpleName: type(2546) into MethodInvocation(2497) at 4", "Update SimpleName: fileStore(265) to store", "Update SimpleName: fileStore(268) to store", "Insert SimpleName: store(320) into MethodInvocation(322) at 0", "Insert SimpleName: store(568) into MethodInvocation(570) at 0", "Update SimpleName: lock(770) to store", "Insert SimpleName: store(764) into MethodInvocation(766) at 0", "Insert SimpleName: store(839) into MethodInvocation(841) at 0", "Update SimpleType: LookupResult(948) to DirectoryEntry", "Move WhileStatement(1018) into Block(926) at 3", "Update SimpleName: fileStore(1092) to store", "Update SimpleName: directorySupplier(1093) to createDirectory", "Update SimpleName: fileStore(1123) to store", "Update SimpleName: symbolicLinkSupplier(1124) to createSymbolicLink", "Insert SimpleName: store(1089) into MethodInvocation(1091) at 0", "Insert SimpleType: DirectoryEntry(1096) into VariableDeclarationStatement(1103) at 0", "Insert VariableDeclarationFragment(1102) into VariableDeclarationStatement(1103) at 1", "Move SimpleType: File(1280) into VariableDeclarationStatement(1131) at 0", "Insert SimpleName: store(1293) into MethodInvocation(1295) at 0", "Move SimpleType: File(1311) into VariableDeclarationStatement(1312) at 0", "Insert MethodInvocation(1376) into ExpressionStatement(1377) at 0", "Insert Block(1390) into TryStatement(1391) at 1", "Move MethodInvocation(1197) into MethodInvocation(1422) at 0", "Insert SimpleName: file(1421) into MethodInvocation(1422) at 1", "Insert SimpleName: lookupInternal(1444) into MethodInvocation(1447) at 0", "Insert SimpleName: path(1445) into MethodInvocation(1447) at 1", "Insert SimpleName: FOLLOW_LINKS(1446) into MethodInvocation(1447) at 2", "Insert SimpleName: store(1513) into MethodInvocation(1515) at 0", "Update SimpleType: LookupResult(1731) to DirectoryEntry", "Update SimpleName: parentTable(1810) to entry", "Update SimpleName: get(1811) to directory", "Update SimpleName: parentTable(1826) to entry", "Move SimpleName: parentTable(1826) into MethodInvocation(1705) at 0", "Update SimpleName: name(1828) to file", "Move SimpleName: name(1828) into MethodInvocation(1705) at 1", "Update SimpleName: unlinkSelfAndParent(1838) to entry", "Move SimpleName: unlinkSelfAndParent(1838) into MethodInvocation(1718) at 0", "Update SimpleName: file(1839) to name", "Move SimpleName: file(1839) into MethodInvocation(1718) at 1", "Insert SimpleName: store(1955) into MethodInvocation(1957) at 0", "Insert QualifiedName: destService.store(1958) into MethodInvocation(1960) at 0", "Update SimpleType: LookupResult(2082) to DirectoryEntry", "Update SimpleType: LookupResult(2094) to DirectoryEntry", "Move SimpleType: File(1808) into VariableDeclarationStatement(1992) at 0", "Move SimpleType: File(2133) into VariableDeclarationStatement(2010) at 0", "Move SimpleType: File(2107) into VariableDeclarationStatement(2018) at 0", "Update SimpleType: DirEntry(799) to DirectoryEntry", "Update SimpleName: LookupResult(947) to DirectoryEntry", "Update SimpleName: lookupResult(949) to entry", "Insert SimpleName: DirectoryEntry(1095) into SimpleType: DirectoryEntry(1096) at 0", "Insert SimpleName: entry(1097) into VariableDeclarationFragment(1102) at 0", "Insert MethodInvocation(1101) into VariableDeclarationFragment(1102) at 1", "Update SimpleName: result(1200) to entry", "Update SimpleName: found(1201) to exists", "Update SimpleName: linkSelfAndParent(1257) to store", "Insert SimpleName: setInitialAttributes(1149) into MethodInvocation(1152) at 1", "Update SimpleName: parent(1259) to attrs", "Update SimpleName: store(1517) to byteStore", "Insert MethodInvocation(1374) into MethodInvocation(1376) at 0", "Insert SimpleName: lock(1375) into MethodInvocation(1376) at 1", "Insert ExpressionStatement(1389) into Block(1390) at 0", "Update SimpleName: requireParentFound(1195) to requireSymbolicLink", "Move MethodInvocation(1657) into VariableDeclarationFragment(1563) at 1", "Update SimpleName: LookupResult(1730) to DirectoryEntry", "Update SimpleName: result(1732) to entry", "Update SimpleName: parent(1759) to entry", "Update SimpleName: LookupResult(2081) to DirectoryEntry", "Update SimpleName: sourceLookup(2083) to sourceEntry", "Update SimpleName: LookupResult(2093) to DirectoryEntry", "Insert SimpleName: destEntry(1977) into VariableDeclarationFragment(1983) at 0", "Move MethodInvocation(2100) into VariableDeclarationFragment(1983) at 1", "Update SimpleName: destLookup(2178) to destEntry", "Update SimpleName: found(2179) to exists", "Update SimpleName: requireFound(2631) to requireExists", "Update SimpleName: requireFound(2584) to requireExists", "Update SimpleName: requireFound(2536) to requireExists", "Insert SimpleName: store(332) into MethodInvocation(334) at 0", "Insert SimpleName: store(593) into MethodInvocation(595) at 0", "Update SimpleName: DirEntry(798) to DirectoryEntry", "Update SimpleName: lock(830) to store", "Insert SimpleName: store(804) into MethodInvocation(806) at 0", "Update SimpleName: requireFound(954) to requireExists", "Update SimpleName: lookupResult(973) to entry", "Update SimpleType: DirectoryTable(1020) to File", "Insert BooleanLiteral: true(890) into WhileStatement(925) at 0", "Insert SimpleName: store(956) into MethodInvocation(958) at 0", "Insert SimpleName: lookupInternal(1098) into MethodInvocation(1101) at 0", "Insert SimpleName: path(1099) into MethodInvocation(1101) at 1", "Insert SimpleName: NOFOLLOW_LINKS(1100) into MethodInvocation(1101) at 2", "Update SimpleName: result(1223) to entry", "Update SimpleName: parent(1224) to directory", "Insert SimpleName: store(1167) into MethodInvocation(1169) at 0", "Insert SimpleName: store(1223) into MethodInvocation(1225) at 0", "Update SimpleType: LookupResult(1384) to DirectoryEntry", "Insert MethodInvocation(1306) into MethodInvocation(1310) at 2", "Move SimpleName: attrs(1458) into MethodInvocation(1310) at 5", "Insert SimpleName: store(1334) into MethodInvocation(1336) at 0", "Insert SimpleName: byteStore(1372) into MethodInvocation(1374) at 0", "Insert SimpleName: writeLock(1373) into MethodInvocation(1374) at 1", "Insert MethodInvocation(1388) into ExpressionStatement(1389) at 0", "Update SimpleName: requireNotFound(1655) to directory", "Update SimpleName: requireFound(1737) to requireExists", "Insert SimpleName: store(1654) into MethodInvocation(1656) at 0", "Update SimpleName: requireFound(2088) to requireExists", "Update SimpleName: sourceLookup(2109) to sourceEntry", "Update SimpleName: parent(2110) to directory", "Update SimpleName: sourceLookup(2127) to sourceEntry", "Update SimpleName: destLookup(2135) to destEntry", "Update SimpleName: parent(2136) to directory", "Move SimpleType: File(2125) into VariableDeclarationStatement(2136) at 0", "Insert QualifiedName: destService.store(2167) into MethodInvocation(2169) at 0", "Insert SimpleName: store(2173) into MethodInvocation(2175) at 0", "Update SimpleName: lookupResult(978) to entry", "Update SimpleName: DirectoryTable(1019) to File", "Update SimpleName: superRootTable(1021) to file", "Insert VariableDeclarationStatement(913) into Block(924) at 2", "Insert IfStatement(919) into Block(924) at 3", "Update SimpleName: LookupResult(1383) to DirectoryEntry", "Update SimpleName: result(1385) to entry", "Update SimpleName: result(1392) to entry", "Update SimpleName: found(1393) to exists", "Move IfStatement(1479) into Block(1269) at 1", "Move ReturnStatement(1484) into Block(1269) at 2", "Update SimpleName: fileStore(1456) to store", "Move SimpleName: fileStore(1456) into MethodInvocation(1306) at 0", "Update SimpleName: regularFileSupplier(1457) to createRegularFile", "Move SimpleName: regularFileSupplier(1457) into MethodInvocation(1306) at 1", "Update SimpleName: store(1529) to byteStore", "Insert MethodInvocation(1386) into MethodInvocation(1388) at 0", "Insert SimpleName: unlock(1387) into MethodInvocation(1388) at 1", "Update SimpleName: requireFound(1621) to requireExists", "Update SimpleName: requireParentFound(1652) to requireDoesNotExist", "Update SimpleName: sourceLookup(2117) to sourceEntry", "Update SimpleName: parent(2118) to directory", "Update SimpleName: superRoot(1022) to entry", "Update SimpleName: content(1023) to directory", "Move SimpleType: File(985) into VariableDeclarationStatement(913) at 0", "Insert VariableDeclarationFragment(912) into VariableDeclarationStatement(913) at 1", "Move MethodInvocation(994) into IfStatement(919) at 0", "Insert Block(918) into IfStatement(919) at 1", "Move SimpleType: File(1221) into VariableDeclarationStatement(1248) at 0", "Insert SimpleName: store(1283) into MethodInvocation(1285) at 0", "Insert SimpleName: byteStore(1384) into MethodInvocation(1386) at 0", "Insert SimpleName: writeLock(1385) into MethodInvocation(1386) at 1", "Update SimpleName: destLookup(2181) to destEntry", "Update QualifiedName: destService.fileStore(2266) to destService.store", "Update SimpleName: requireFound(521) to requireExists", "Insert SimpleName: parent(908) into VariableDeclarationFragment(912) at 0", "Move MethodInvocation(1014) into VariableDeclarationFragment(912) at 1", "Insert BreakStatement(917) into Block(918) at 0", "Insert SimpleName: parent(921) into Assignment: =(922) at 1", "Update SimpleName: result(1204) to entry", "Update SimpleName: fileStore(2296) to store", "Update SimpleName: sourceName(2304) to sourceEntry", "Update SimpleName: result(1398) to entry", "Update SimpleName: destName(2194) to destEntry", "Delete QualifiedName: com.google.jimfs.internal.DirectoryTable.DirEntry(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.concurrent.locks.ReadWriteLock(56)", "Delete ImportDeclaration(57)", "Delete QualifiedName: java.util.concurrent.locks.ReentrantReadWriteLock(58)", "Delete ImportDeclaration(59)", "Delete Modifier: private(78)", "Delete Modifier: final(79)", "Delete SimpleName: File(80)", "Delete SimpleType: File(81)", "Delete SimpleName: superRoot(82)", "Delete VariableDeclarationFragment(83)", "Delete FieldDeclaration(84)", "Delete Modifier: private(113)", "Delete Modifier: final(114)", "Delete SimpleName: LookupService(115)", "Delete SimpleType: LookupService(116)", "Delete SimpleName: lookupService(117)", "Delete VariableDeclarationFragment(118)", "Delete FieldDeclaration(119)", "Delete Modifier: private(127)", "Delete Modifier: final(128)", "Delete SimpleName: ReadWriteLock(129)", "Delete SimpleType: ReadWriteLock(130)", "Delete SimpleName: lock(131)", "Delete VariableDeclarationFragment(132)", "Delete FieldDeclaration(133)", "Delete SimpleName: File(139)", "Delete SimpleType: File(140)", "Delete SimpleName: superRoot(141)", "Delete SingleVariableDeclaration(142)", "Delete SimpleName: fileStore(162)", "Delete SimpleName: LookupService(164)", "Delete SimpleType: LookupService(165)", "Delete SimpleName: superRoot(166)", "Delete ClassInstanceCreation(167)", "Delete SimpleName: ReentrantReadWriteLock(171)", "Delete SimpleType: ReentrantReadWriteLock(172)", "Delete ClassInstanceCreation(173)", "Delete QualifiedName: parent.fileStore(198)", "Delete QualifiedName: parent.lookupService(200)", "Delete QualifiedName: parent.lock(202)", "Delete SimpleName: File(208)", "Delete SimpleType: File(209)", "Delete SimpleName: superRoot(210)", "Delete SingleVariableDeclaration(211)", "Delete SimpleName: LookupService(228)", "Delete SimpleType: LookupService(229)", "Delete SimpleName: lookupService(230)", "Delete SingleVariableDeclaration(231)", "Delete SimpleName: ReadWriteLock(236)", "Delete SimpleType: ReadWriteLock(237)", "Delete SimpleName: lock(238)", "Delete SingleVariableDeclaration(239)", "Delete ThisExpression(240)", "Delete SimpleName: superRoot(241)", "Delete FieldAccess(242)", "Delete SimpleName: checkNotNull(243)", "Delete SimpleName: superRoot(244)", "Delete MethodInvocation(245)", "Delete Assignment: =(246)", "Delete ExpressionStatement(247)", "Delete ThisExpression(280)", "Delete SimpleName: lookupService(281)", "Delete FieldAccess(282)", "Delete SimpleName: checkNotNull(283)", "Delete SimpleName: lookupService(284)", "Delete MethodInvocation(285)", "Delete Assignment: =(286)", "Delete ExpressionStatement(287)", "Delete ThisExpression(296)", "Delete SimpleName: lock(297)", "Delete FieldAccess(298)", "Delete SimpleName: checkNotNull(299)", "Delete SimpleName: lock(300)", "Delete MethodInvocation(301)", "Delete Assignment: =(302)", "Delete ExpressionStatement(303)", "Delete Modifier: private(306)", "Delete SimpleName: Lock(307)", "Delete SimpleType: Lock(308)", "Delete SimpleName: readLock(309)", "Delete SimpleName: lock(310)", "Delete SimpleName: readLock(311)", "Delete MethodInvocation(312)", "Delete ReturnStatement(313)", "Delete Block(314)", "Delete MethodDeclaration(315)", "Delete Modifier: private(316)", "Delete SimpleName: Lock(317)", "Delete SimpleType: Lock(318)", "Delete SimpleName: writeLock(319)", "Delete SimpleName: lock(320)", "Delete SimpleName: writeLock(321)", "Delete MethodInvocation(322)", "Delete ReturnStatement(323)", "Delete Block(324)", "Delete MethodDeclaration(325)", "Delete TextElement: Returns the super root directory for the file system.(342)", "Delete TagElement(343)", "Delete Javadoc(344)", "Delete Modifier: public(345)", "Delete SimpleName: getSuperRoot(348)", "Delete SimpleName: superRoot(349)", "Delete ReturnStatement(350)", "Delete Block(351)", "Delete MethodDeclaration(352)", "Delete SimpleName: file(986)", "Delete SimpleName: lookupResult(987)", "Delete SimpleName: parent(988)", "Delete MethodInvocation(989)", "Delete VariableDeclarationFragment(990)", "Delete VariableDeclarationStatement(991)", "Delete PrefixExpression: !(995)", "Delete SimpleName: names(1027)", "Delete SimpleName: add(1028)", "Delete SimpleName: superRootTable(1029)", "Delete SimpleName: getName(1030)", "Delete SimpleName: file(1031)", "Delete MethodInvocation(1032)", "Delete MethodInvocation(1033)", "Delete ExpressionStatement(1034)", "Delete SimpleName: createDirectory(1077)", "Delete SimpleName: attrs(1094)", "Delete SimpleName: attrs(1126)", "Delete SimpleName: newFile(1254)", "Delete SimpleName: isDirectory(1255)", "Delete MethodInvocation(1256)", "Delete Block(1262)", "Delete IfStatement(1263)", "Delete Modifier: private(1276)", "Delete PrimitiveType: void(1277)", "Delete SimpleName: linkSelfAndParent(1278)", "Delete SimpleName: self(1281)", "Delete SingleVariableDeclaration(1282)", "Delete SimpleName: parent(1285)", "Delete SingleVariableDeclaration(1286)", "Delete SimpleName: DirectoryTable(1287)", "Delete SimpleType: DirectoryTable(1288)", "Delete SimpleName: table(1289)", "Delete SimpleName: self(1290)", "Delete SimpleName: content(1291)", "Delete MethodInvocation(1292)", "Delete VariableDeclarationFragment(1293)", "Delete VariableDeclarationStatement(1294)", "Delete SimpleName: table(1295)", "Delete SimpleName: linkSelf(1296)", "Delete SimpleName: self(1297)", "Delete MethodInvocation(1298)", "Delete ExpressionStatement(1299)", "Delete SimpleName: table(1300)", "Delete SimpleName: linkParent(1301)", "Delete SimpleName: parent(1302)", "Delete MethodInvocation(1303)", "Delete ExpressionStatement(1304)", "Delete Block(1305)", "Delete MethodDeclaration(1306)", "Delete Modifier: private(1307)", "Delete PrimitiveType: void(1308)", "Delete SimpleName: unlinkSelfAndParent(1309)", "Delete SimpleName: dir(1312)", "Delete SingleVariableDeclaration(1313)", "Delete SimpleName: DirectoryTable(1314)", "Delete SimpleType: DirectoryTable(1315)", "Delete SimpleName: table(1316)", "Delete SimpleName: dir(1317)", "Delete SimpleName: content(1318)", "Delete MethodInvocation(1319)", "Delete VariableDeclarationFragment(1320)", "Delete VariableDeclarationStatement(1321)", "Delete SimpleName: table(1322)", "Delete SimpleName: unlinkSelf(1323)", "Delete MethodInvocation(1324)", "Delete ExpressionStatement(1325)", "Delete SimpleName: table(1326)", "Delete SimpleName: unlinkParent(1327)", "Delete MethodInvocation(1328)", "Delete ExpressionStatement(1329)", "Delete Block(1330)", "Delete MethodDeclaration(1331)", "Delete SimpleName: File(1451)", "Delete SimpleType: File(1452)", "Delete MethodInvocation(1459)", "Delete SimpleName: link(1656)", "Delete SimpleName: parent(1658)", "Delete MethodInvocation(1659)", "Delete SimpleName: writeLock(1681)", "Delete MethodInvocation(1682)", "Delete SimpleName: unlock(1683)", "Delete MethodInvocation(1684)", "Delete ExpressionStatement(1685)", "Delete Block(1686)", "Delete SimpleName: name(1760)", "Delete PrimitiveType: void(1713)", "Delete SimpleName: deleteFile(1714)", "Delete SimpleName: writeLock(1725)", "Delete MethodInvocation(1726)", "Delete SimpleName: lock(1727)", "Delete MethodInvocation(1728)", "Delete ExpressionStatement(1729)", "Delete SimpleName: parent(1744)", "Delete MethodInvocation(1747)", "Delete VariableDeclarationFragment(1748)", "Delete VariableDeclarationStatement(1749)", "Delete SimpleType: Name(1751)", "Delete SimpleName: name(1752)", "Delete MethodInvocation(1755)", "Delete VariableDeclarationFragment(1756)", "Delete VariableDeclarationStatement(1757)", "Delete Block(1765)", "Delete TryStatement(1772)", "Delete Block(1773)", "Delete MethodDeclaration(1774)", "Delete SimpleName: parent(1783)", "Delete SingleVariableDeclaration(1784)", "Delete SimpleName: name(1812)", "Delete SimpleName: file(1816)", "Delete NullLiteral(1817)", "Delete InfixExpression: !=(1818)", "Delete AssertStatement(1819)", "Delete SimpleName: unlink(1827)", "Delete MethodInvocation(1829)", "Delete ExpressionStatement(1830)", "Delete MethodInvocation(1837)", "Delete MethodInvocation(1840)", "Delete ExpressionStatement(1841)", "Delete Block(1842)", "Delete IfStatement(1843)", "Delete SimpleName: destService(2076)", "Delete SimpleName: destLookup(2095)", "Delete SimpleName: requireParentFound(2101)", "Delete SimpleName: dest(2102)", "Delete MethodInvocation(2103)", "Delete SimpleName: destParent(2193)", "Delete SimpleName: sourceFile(2236)", "Delete SimpleName: isDirectory(2237)", "Delete MethodInvocation(2238)", "Delete SimpleName: unlinkSelfAndParent(2239)", "Delete SimpleName: sourceFile(2240)", "Delete MethodInvocation(2241)", "Delete ExpressionStatement(2242)", "Delete SimpleName: linkSelfAndParent(2243)", "Delete SimpleName: sourceFile(2244)", "Delete SimpleName: destParent(2245)", "Delete MethodInvocation(2246)", "Delete ExpressionStatement(2247)", "Delete Block(2248)", "Delete IfStatement(2249)", "Delete SimpleName: copy(2283)", "Delete SimpleName: isDirectory(2284)", "Delete MethodInvocation(2285)", "Delete SimpleName: linkSelfAndParent(2286)", "Delete SimpleName: copy(2287)", "Delete SimpleName: destParent(2288)", "Delete MethodInvocation(2289)", "Delete ExpressionStatement(2290)", "Delete Block(2291)", "Delete IfStatement(2292)", "Delete SimpleName: sourceParent(2303)", "Delete SimpleName: destService(2314)", "Delete Modifier: public(2504)", "Delete SimpleName: readAttributes(2511)", "Delete MethodDeclaration(2550)", "Delete PrimitiveType: void(2604)", "Delete SimpleName: File(2624)", "Delete SimpleType: File(2625)", "Delete SimpleName: attribute(2641)", "Delete MethodInvocation(2643)", "Delete ExpressionStatement(2644)", "Delete MethodInvocation(2547)", "Delete ReturnStatement(2548)"]}}, {"JimfsFileStore_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 7"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 47", "MOV MethodDeclaration to TypeDeclaration: class at 47", "MOV MethodDeclaration to TypeDeclaration: class at 47", "MOV MethodDeclaration to TypeDeclaration: class at 47", "MOV FieldDeclaration to TypeDeclaration: class at 5", "MOV MethodDeclaration to TypeDeclaration: class at 47"]}, {"root": "UPDATE from com.google.common.collect.ImmutableList to com.google.common.collect.ImmutableSortedSet", "operations": ["UPD QualifiedName: com.google.common.collect.ImmutableList from com.google.common.collect.ImmutableList to com.google.common.collect.ImmutableSortedSet"]}, {"root": "UPDATE from java.nio.file.LinkOption to java.nio.file.NoSuchFileException", "operations": ["UPD QualifiedName: java.nio.file.LinkOption from java.nio.file.LinkOption to java.nio.file.NoSuchFileException"]}, {"root": "UPDATE from java.util.List to java.util.concurrent.locks.Lock", "operations": ["UPD QualifiedName: java.util.List from java.util.List to java.util.concurrent.locks.Lock"]}, {"root": "UPDATE from java.util.Map to java.util.concurrent.locks.ReadWriteLock", "operations": ["UPD QualifiedName: java.util.Map from java.util.Map to java.util.concurrent.locks.ReadWriteLock"]}, {"root": "UPDATE from java.util.concurrent.atomic.AtomicLong to java.util.concurrent.locks.ReentrantReadWriteLock", "operations": ["UPD QualifiedName: java.util.concurrent.atomic.AtomicLong from java.util.concurrent.atomic.AtomicLong to java.util.concurrent.locks.ReentrantReadWriteLock"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS ExpressionStatement to Block at 3", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS VariableDeclarationStatement to Block at 4", "INS SimpleType: FileFactory to SingleVariableDeclaration at 0", "INS SimpleType: ReadWriteLock to VariableDeclarationStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: attributes to FieldAccess at 1", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS SimpleName: FileFactory to SimpleType: FileFactory at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: factory to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 6"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS SimpleName: IOException to TagElement: @throws at 0", "INS SimpleType: DirectoryEntry to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS TextElement: resolve to a directory or symbolic link (e.g. it doesn't exist or is a regular file) to TagElement: @throws at 2", "INS Block to MethodDeclaration at 7", "INS SimpleName: path to MethodInvocation at 3", "INS SimpleName: NoSuchFileException to TagElement: @throws at 0", "INS SimpleType: IOException to MethodDeclaration at 6", "INS SimpleName: workingDirectory to MethodInvocation at 2", "INS MethodInvocation to ReturnStatement at 0", "INS TagElement: @throws to Javadoc at 1", "INS SimpleName: lookup to MethodInvocation at 1", "INS SimpleName: tree to MethodInvocation at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: lookup to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS TagElement: @throws to Javadoc at 2"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 44"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 50"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 51"]}, {"root": "UPDATE from String to FileTree", "operations": ["UPD SimpleType: String from String to FileTree", "UPD SimpleName: String from String to FileTree", "UPD SimpleName: String from String to FileTree", "UPD SimpleType: String from String to FileTree", "UPD SimpleName: String from String to FileTree", "UPD SimpleType: String from String to FileTree"]}, {"root": "UPDATE from AttributeProviderRegistry to AttributeService", "operations": ["UPD SimpleType: AttributeProviderRegistry from AttributeProviderRegistry to AttributeService", "UPD SimpleType: AtomicLong from AtomicLong to AttributeService", "UPD SimpleName: AtomicLong from AtomicLong to AttributeService", "UPD SimpleName: AttributeProviderRegistry from AttributeProviderRegistry to AttributeService"]}, {"root": "UPDATE from AttributeProviderRegistry to FileFactory", "operations": ["UPD SimpleName: AttributeProviderRegistry from AttributeProviderRegistry to FileFactory", "UPD SimpleType: AttributeProviderRegistry from AttributeProviderRegistry to FileFactory"]}, {"root": "INS SimpleType: Lock to FieldDeclaration at 3", "operations": ["INS SimpleType: Lock to FieldDeclaration at 3"]}, {"root": "INS SimpleType: Lock to FieldDeclaration at 3", "operations": ["INS SimpleType: Lock to FieldDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: factory to SingleVariableDeclaration at 1", "INS SimpleName: FileFactory to SimpleType: FileFactory at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: FileFactory to SingleVariableDeclaration at 0"]}, {"root": "INS Block to MethodDeclaration at 7", "operations": ["INS SimpleName: AttributeService to SimpleType: AttributeService at 0", "INS SimpleType: AttributeService to ClassInstanceCreation at 0", "INS SimpleName: tree to ConstructorInvocation at 0", "INS ConstructorInvocation to Block at 0", "INS SimpleName: factory to ConstructorInvocation at 1", "INS ClassInstanceCreation to ConstructorInvocation at 3", "INS Block to MethodDeclaration at 7"]}, {"root": "UPDATE from private to public", "operations": ["UPD Modifier: private from private to public"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SimpleName: JimfsFileStore to MethodDeclaration at 1", "MOV Modifier: private to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "UPDATE from File to Lock", "operations": ["UPD SimpleType: File from File to Lock", "UPD SimpleName: Supplier from Supplier to Lock", "UPD SimpleName: Supplier from Supplier to Lock", "UPD SimpleName: File from File to Lock", "UPD SimpleName: File from File to Lock", "UPD SimpleType: File from File to Lock"]}, {"root": "UPDATE from createDirectory to readLock", "operations": ["UPD SimpleName: createDirectory from createDirectory to readLock", "UPD SimpleName: defaultDirectorySupplier from defaultDirectorySupplier to readLock", "UPD SimpleName: file from file to readLock"]}, {"root": "UPDATE from defaultRegularFileSupplier to writeLock", "operations": ["UPD SimpleName: defaultRegularFileSupplier from defaultRegularFileSupplier to writeLock", "UPD SimpleName: name from name to writeLock", "UPD SimpleName: createRegularFile from createRegularFile to writeLock"]}, {"root": "INS ParameterizedType: ImmutableSortedSet<Name> to MethodDeclaration at 1", "operations": ["INS ParameterizedType: ImmutableSortedSet<Name> to MethodDeclaration at 1", "INS SimpleType: ImmutableSortedSet to ParameterizedType: ImmutableSortedSet<Name> at 0"]}, {"root": "INS SimpleName: getRootDirectoryNames to MethodDeclaration at 2", "operations": ["INS SimpleName: getRootDirectoryNames to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV ParameterizedType: Supplier<File> to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: Supplier<File> to MethodDeclaration at 1", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "UPDATE from supportsFileAttributeView to createRegularFile", "operations": ["UPD SimpleName: supportsFileAttributeView from supportsFileAttributeView to createRegularFile"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: Supplier<File> to MethodDeclaration at 1"]}, {"root": "UPDATE from setInitialAttributes to createDirectory", "operations": ["UPD SimpleName: setInitialAttributes from setInitialAttributes to createDirectory"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS ReturnStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0", "INS Block to MethodDeclaration at 5"]}, {"root": "INS SimpleName: createSymbolicLink to MethodDeclaration at 2", "operations": ["INS SimpleName: createSymbolicLink to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SimpleType: File to MethodDeclaration at 1"]}, {"root": "INS SimpleName: copy to MethodDeclaration at 2", "operations": ["INS SimpleName: copy to MethodDeclaration at 2"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS Block to MethodDeclaration at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: factory to MethodInvocation at 0", "INS SimpleName: copy to MethodInvocation at 1", "INS SimpleName: file to MethodInvocation at 2", "INS SimpleName: copy to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from setAttribute to setInitialAttributes", "operations": ["UPD SimpleName: setAttribute from setAttribute to setInitialAttributes", "UPD SimpleName: attributeProviders from attributeProviders to setInitialAttributes", "UPD SimpleName: setAttributeInternal from setAttributeInternal to setInitialAttributes"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "UPDATE from setAttribute to copyBasicAttributes", "operations": ["UPD SimpleName: setAttribute from setAttribute to copyBasicAttributes", "UPD SimpleName: file from file to copyBasicAttributes"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS Block to MethodDeclaration at 8", "operations": ["INS Block to MethodDeclaration at 8"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS TextElement: Sets the given attribute to the given value for the given file. to TagElement at 0", "INS TagElement to Javadoc at 0"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 1", "operations": ["INS PrimitiveType: void to MethodDeclaration at 1"]}, {"root": "INS SimpleName: setAttribute to MethodDeclaration at 2", "operations": ["INS SimpleName: setAttribute to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS TextElement: Returns the file attribute views supported by this store. to TagElement at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: ImmutableSet<String> to MethodDeclaration at 1"]}, {"root": "UPDATE from target to supportedFileAttributeViews", "operations": ["UPD SimpleName: target from target to supportedFileAttributeViews", "UPD SimpleName: get from get to supportedFileAttributeViews", "UPD SimpleName: getSingleAttribute from getSingleAttribute to supportedFileAttributeViews"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 3", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS SimpleName: name to MethodDeclaration at 4", "operations": ["INS SimpleName: name to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS PrimitiveType: boolean to MethodDeclaration at 3", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 3"]}, {"root": "INS SimpleName: supportsFileAttributeView to MethodDeclaration at 4", "operations": ["INS SimpleName: supportsFileAttributeView to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS PrimitiveType: boolean to MethodDeclaration at 3", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 3"]}, {"root": "INS SimpleName: supportsFileAttributeView to MethodDeclaration at 4", "operations": ["INS SimpleName: supportsFileAttributeView to MethodDeclaration at 4"]}, {"root": "INS TagElement: @link to TagElement at 0", "operations": ["INS TagElement: @link to TagElement at 0", "INS SimpleName: FileStore to TagElement: @link at 0"]}, {"root": "UPDATE from Service for creating and copying files as well as reading and setting attributes on them. to  implementation which provides methods for file creation, lookup and attribute", "operations": ["UPD TextElement: Service for creating and copying files as well as reading and setting attributes on them. from Service for creating and copying files as well as reading and setting attributes on them. to  implementation which provides methods for file creation, lookup and attribute"]}, {"root": "INS TextElement: handling. to TagElement at 2", "operations": ["INS TextElement: handling. to TagElement at 2"]}, {"root": "UPDATE from ALL_ATTRIBUTES to tree", "operations": ["UPD SimpleName: ALL_ATTRIBUTES from ALL_ATTRIBUTES to tree", "UPD SimpleName: target from target to tree", "UPD SimpleName: name from name to tree", "UPD SimpleName: name from name to tree", "UPD SimpleName: name from name to tree", "UPD SimpleName: name from name to tree"]}, {"root": "UPDATE from attributeProviders to attributes", "operations": ["UPD SimpleName: attributeProviders from attributeProviders to attributes", "UPD SimpleName: attributeNames from attributeNames to attributes", "UPD SimpleName: setAttributeInternal from setAttributeInternal to attributes", "UPD SimpleName: getAndIncrement from getAndIncrement to attributes", "UPD SimpleName: provider from provider to attributes", "UPD SimpleName: attributeProviders from attributeProviders to attributes", "UPD SimpleName: attribute from attribute to attributes", "UPD SimpleName: createSymbolicLink from createSymbolicLink to attributes", "UPD SimpleName: attributeProviders from attributeProviders to attributes", "UPD SimpleName: attributeProviders from attributeProviders to attributes", "UPD SimpleName: idGenerator from idGenerator to attributes"]}, {"root": "UPDATE from attributeProviders to factory", "operations": ["UPD SimpleName: attributeProviders from attributeProviders to factory", "UPD SimpleName: file from file to factory", "UPD SimpleName: attributeProviders from attributeProviders to factory", "UPD SimpleName: attributeProviders from attributeProviders to factory", "UPD SimpleName: attributeProviders from attributeProviders to factory", "UPD SimpleName: provider from provider to factory"]}, {"root": "MOVE from SimpleType: Lock", "operations": ["MOV SimpleName: Supplier to SimpleType: Lock at 0"]}, {"root": "MOVE from SimpleType: Lock", "operations": ["MOV SimpleName: Supplier to SimpleType: Lock at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 5"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 6"]}, {"root": "UPDATE from FileAttribute to Name", "operations": ["UPD SimpleType: FileAttribute from FileAttribute to Name", "UPD SimpleName: FileAttribute from FileAttribute to Name"]}, {"root": "MOVE from ParameterizedType: ImmutableSortedSet<Name>", "operations": ["MOV SimpleType: FileAttribute to ParameterizedType: ImmutableSortedSet<Name> at 1"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0"]}, {"root": "UPDATE from DirectorySupplier to DirectoryEntry", "operations": ["UPD SimpleName: DirectorySupplier from DirectorySupplier to DirectoryEntry"]}, {"root": "MOVE from SimpleType: DirectoryEntry", "operations": ["MOV SimpleName: DirectorySupplier to SimpleType: DirectoryEntry at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: File to SingleVariableDeclaration at 0", "MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS SimpleName: workingDirectory to SingleVariableDeclaration at 1", "operations": ["INS SimpleName: workingDirectory to SingleVariableDeclaration at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: JimfsPath to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleName: path to SingleVariableDeclaration at 1", "operations": ["INS SimpleName: path to SingleVariableDeclaration at 1"]}, {"root": "INS SimpleType: LinkOptions to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: LinkOptions to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from attrs to options", "operations": ["UPD SimpleName: attrs from attrs to options", "UPD SimpleName: getSupportedViews from getSupportedViews to options"]}, {"root": "UPDATE from SymbolicLinkSupplier to IOException", "operations": ["UPD SimpleName: SymbolicLinkSupplier from SymbolicLinkSupplier to IOException"]}, {"root": "MOVE from SimpleType: IOException", "operations": ["MOV SimpleName: SymbolicLinkSupplier to SimpleType: IOException at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 3"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: attributes to FieldAccess at 1", "INS MethodInvocation to ReturnStatement at 0", "INS FieldAccess to MethodInvocation at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: attribute to MethodInvocation at 3"]}, {"root": "UPDATE from Creates a new file service using the given providers to handle file attributes. to Creates a new file store with the given storage and attribute view configuration.", "operations": ["UPD TextElement: Creates a new file service using the given providers to handle file attributes. from Creates a new file service using the given providers to handle file attributes. to Creates a new file store with the given storage and attribute view configuration."]}, {"root": "MOVE from ConstructorInvocation", "operations": ["MOV MethodInvocation to ConstructorInvocation at 2"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: readLock to FieldAccess at 1"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: writeLock to FieldAccess at 1", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from Creates a new directory and stores it. Returns the key of the new file. to Returns the read lock for this store.", "operations": ["UPD TextElement: Creates a new directory and stores it. Returns the key of the new file. from Creates a new directory and stores it. Returns the key of the new file. to Returns the read lock for this store."]}, {"root": "INS SimpleName: readLock to ReturnStatement at 0", "operations": ["INS SimpleName: readLock to ReturnStatement at 0"]}, {"root": "UPDATE from Creates a new regular file and stores it. Returns the key of the new file. to Returns the write lock for this store.", "operations": ["UPD TextElement: Creates a new regular file and stores it. Returns the key of the new file. from Creates a new regular file and stores it. Returns the key of the new file. to Returns the write lock for this store."]}, {"root": "INS SimpleName: writeLock to ReturnStatement at 0", "operations": ["INS SimpleName: writeLock to ReturnStatement at 0"]}, {"root": "UPDATE from Creates a new symbolic link referencing the given target path and stores it. Returns the key of to Returns the names of the root directories in this store.", "operations": ["UPD TextElement: Creates a new symbolic link referencing the given target path and stores it. Returns the key of from Creates a new symbolic link referencing the given target path and stores it. Returns the key of to Returns the names of the root directories in this store."]}, {"root": "UPDATE from File to ImmutableSortedSet", "operations": ["UPD SimpleName: File from File to ImmutableSortedSet"]}, {"root": "MOVE from SimpleType: ImmutableSortedSet", "operations": ["MOV SimpleName: File to SimpleType: ImmutableSortedSet at 0"]}, {"root": "UPDATE from Creates copies of the given file metadata and content and stores them. Returns the key of the to Looks up the file at the given path using the given link options. If the path is relative, the", "operations": ["UPD TextElement: Creates copies of the given file metadata and content and stores them. Returns the key of the from Creates copies of the given file metadata and content and stores them. Returns the key of the to Looks up the file at the given path using the given link options. If the path is relative, the"]}, {"root": "UPDATE from new file. to lookup is relative to the given working directory.", "operations": ["UPD TextElement: new file. from new file. to lookup is relative to the given working directory."]}, {"root": "UPDATE from Copies the file times of the given file to the given copy file. to  if an element of the path other than the final element does not", "operations": ["UPD TextElement: Copies the file times of the given file to the given copy file. from Copies the file times of the given file to the given copy file. to  if an element of the path other than the final element does not"]}, {"root": "MOVE from TagElement: @throws", "operations": ["MOV TextElement: Copies the file times of the given file to the given copy file. to TagElement: @throws at 1"]}, {"root": "UPDATE from Copies the attributes of the given file to the given copy file. to  if a symbolic link cycle is detected or the depth of symbolic link", "operations": ["UPD TextElement: Copies the attributes of the given file to the given copy file. from Copies the attributes of the given file to the given copy file. to  if a symbolic link cycle is detected or the depth of symbolic link"]}, {"root": "MOVE from TagElement: @throws", "operations": ["MOV TextElement: Copies the attributes of the given file to the given copy file. to TagElement: @throws at 1"]}, {"root": "UPDATE from Returns a supplier that creates directories and sets the given attributes. to recursion otherwise exceeds a threshold", "operations": ["UPD TextElement: Returns a supplier that creates directories and sets the given attributes. from Returns a supplier that creates directories and sets the given attributes. to recursion otherwise exceeds a threshold"]}, {"root": "MOVE from TagElement: @throws", "operations": ["MOV TextElement: Returns a supplier that creates directories and sets the given attributes. to TagElement: @throws at 2"]}, {"root": "UPDATE from FileAttribute to LinkOptions", "operations": ["UPD SimpleName: FileAttribute from FileAttribute to LinkOptions"]}, {"root": "MOVE from SimpleType: LinkOptions", "operations": ["MOV SimpleName: FileAttribute to SimpleType: LinkOptions at 0"]}, {"root": "UPDATE from . to Returns a supplier that creates a new regular file.", "operations": ["UPD TextElement: . from . to Returns a supplier that creates a new regular file."]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0"]}, {"root": "UPDATE from Sets all initial attributes for the given file. to Returns a supplier that creates a new directory.", "operations": ["UPD TextElement: Sets all initial attributes for the given file. from Sets all initial attributes for the given file. to Returns a supplier that creates a new directory."]}, {"root": "UPDATE from Gets the value of the given attribute for the given file.  to Returns a supplier that creates a new symbolic link with the given target.", "operations": ["UPD TextElement: Gets the value of the given attribute for the given file.  from Gets the value of the given attribute for the given file.  to Returns a supplier that creates a new symbolic link with the given target."]}, {"root": "UPDATE from Gets the value of the given attribute for the given view and file. Neither view nor file may to Creates a copy of the given file, copying its attributes as well if copy attributes is true.", "operations": ["UPD TextElement: Gets the value of the given attribute for the given view and file. Neither view nor file may from Gets the value of the given attribute for the given view and file. Neither view nor file may to Creates a copy of the given file, copying its attributes as well if copy attributes is true."]}, {"root": "UPDATE from have a ':' character. to Returns the copy.", "operations": ["UPD TextElement: have a ':' character. from have a ':' character. to Returns the copy."]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: File to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleName: copyAttributes to IfStatement at 0", "operations": ["INS SimpleName: copyAttributes to IfStatement at 0"]}, {"root": "UPDATE from Sets the value of the given attribute to the given value for the given file. to Sets initial attributes on the given file, including the given attributes if possible.", "operations": ["UPD TextElement: Sets the value of the given attribute to the given value for the given file. from Sets the value of the given attribute to the given value for the given file. to Sets initial attributes on the given file, including the given attributes if possible."]}, {"root": "UPDATE from Sets the value of the given attribute to the given value for the given view and file. to Copies the basic attributes (just file times) of the given file to the given copy file.", "operations": ["UPD TextElement: Sets the value of the given attribute to the given value for the given view and file. from Sets the value of the given attribute to the given value for the given view and file. to Copies the basic attributes (just file times) of the given file to the given copy file."]}, {"root": "UPDATE from Returns an attribute view of the given type for the given file provider, or  to Returns an attribute view of the given type for the given file supplier, or ", "operations": ["UPD TextElement: Returns an attribute view of the given type for the given file provider, or  from Returns an attribute view of the given type for the given file provider, or  to Returns an attribute view of the given type for the given file supplier, or "]}, {"root": "UPDATE from . to Returns a map containing the attributes described by the given string mapped to their values.", "operations": ["UPD TextElement: . from . to Returns a map containing the attributes described by the given string mapped to their values."]}, {"root": "INS StringLiteral: \"jimfs\" to ReturnStatement at 0", "operations": ["INS StringLiteral: \"jimfs\" to ReturnStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV ClassInstanceCreation to ClassInstanceCreation at 1"]}, {"root": "UPDATE from File to ReadWriteLock", "operations": ["UPD SimpleName: File from File to ReadWriteLock"]}, {"root": "MOVE from SimpleType: ReadWriteLock", "operations": ["MOV SimpleName: File to SimpleType: ReadWriteLock at 0"]}, {"root": "UPDATE from attr to lock", "operations": ["UPD SimpleName: attr from attr to lock", "UPD SimpleName: setInitialAttributes from setInitialAttributes to lock", "UPD SimpleName: file from file to lock"]}, {"root": "UPDATE from attrs to getRootDirectoryNames", "operations": ["UPD SimpleName: attrs from attrs to getRootDirectoryNames"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getSupportedViews to MethodInvocation at 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getSupportedViewTypes to MethodInvocation at 1", "MOV SimpleName: attributeProviders to MethodInvocation at 0"]}, {"root": "UPDATE from getSupportedViewTypes to regularFileSupplier", "operations": ["UPD SimpleName: getSupportedViewTypes from getSupportedViewTypes to regularFileSupplier"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setInitial to MethodInvocation at 1", "MOV SimpleName: provider to MethodInvocation at 0"]}, {"root": "UPDATE from setInitial to directorySupplier", "operations": ["UPD SimpleName: setInitial from setInitial to directorySupplier"]}, {"root": "UPDATE from view to symbolicLinkSupplier", "operations": ["UPD SimpleName: view from view to symbolicLinkSupplier"]}, {"root": "UPDATE from attr to target", "operations": ["UPD SimpleName: attr from attr to target"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getProviders to MethodInvocation at 1", "MOV SimpleName: attributeProviders to MethodInvocation at 0"]}, {"root": "UPDATE from attribute to copy", "operations": ["UPD SimpleName: attribute from attribute to copy", "UPD SimpleName: value from value to copy", "UPD SimpleName: getProviders from getProviders to copy"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "INS SimpleName: attributes to MethodInvocation at 0", "operations": ["INS SimpleName: attributes to MethodInvocation at 0"]}, {"root": "UPDATE from attribute to attrs", "operations": ["UPD SimpleName: attribute from attribute to attrs"]}, {"root": "UPDATE from attribute to file", "operations": ["UPD SimpleName: attribute from attribute to file", "UPD SimpleName: contains from contains to file", "UPD SimpleName: attribute from attribute to file"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: attributeProviders to MethodInvocation at 0"]}, {"root": "UPDATE from getView to getFileAttributeView", "operations": ["UPD SimpleName: getView from getView to getFileAttributeView"]}, {"root": "INS SimpleName: type to MethodInvocation at 4", "operations": ["INS SimpleName: type to MethodInvocation at 4"]}, {"root": "UPDATE from getSupportedAttributesTypes to readAttributes", "operations": ["UPD SimpleName: getSupportedAttributesTypes from getSupportedAttributesTypes to readAttributes", "UPD SimpleName: attributes from attributes to readAttributes"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: attributes to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: file to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: attributeProviders to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getSupportedAttributesTypes to MethodInvocation at 1", "MOV SimpleName: attributeProviders to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: contains to MethodInvocation at 2", "MOV SimpleName: type to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: attribute to MethodInvocation at 0"]}, {"root": "UPDATE from attribute to setAttribute", "operations": ["UPD SimpleName: attribute from attribute to setAttribute"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: attribute to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: attribute to MethodInvocation at 2"]}, {"root": "UPDATE from attribute to value", "operations": ["UPD SimpleName: attribute from attribute to value"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: attribute to MethodInvocation at 4"]}, {"root": "INS SimpleName: attributes to MethodInvocation at 0", "operations": ["INS SimpleName: attributes to MethodInvocation at 0"]}, {"root": "UPDATE from createRegularFile to supportsFileAttributeView", "operations": ["UPD SimpleName: createRegularFile from createRegularFile to supportsFileAttributeView"]}, {"root": "UPDATE from attrs to type", "operations": ["UPD SimpleName: attrs from attrs to type"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from attrs to contains", "operations": ["UPD SimpleName: attrs from attrs to contains"]}, {"root": "INS SimpleName: name to MethodInvocation at 4", "operations": ["INS SimpleName: name to MethodInvocation at 4"]}, {"root": "UPDATE from idGenerator to checkNotNull", "operations": ["UPD SimpleName: idGenerator from idGenerator to checkNotNull"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getAndIncrement to MethodInvocation at 1", "MOV SimpleName: idGenerator to MethodInvocation at 0"]}, {"root": "INS SimpleType: ReentrantReadWriteLock to ClassInstanceCreation at 0", "operations": ["INS SimpleType: ReentrantReadWriteLock to ClassInstanceCreation at 0", "INS SimpleName: ReentrantReadWriteLock to SimpleType: ReentrantReadWriteLock at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setInitialAttributes to MethodInvocation at 0", "MOV SimpleName: file to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: attr to MethodInvocation at 0", "MOV SimpleName: name to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: createSymbolicLink to MethodInvocation at 0", "MOV SimpleName: target to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: attribute to MethodInvocation at 3", "MOV SimpleName: file to MethodInvocation at 2", "MOV SimpleName: provider to MethodInvocation at 0", "MOV SimpleName: get to MethodInvocation at 1"]}, {"root": "UPDATE from get to copyAttributes", "operations": ["UPD SimpleName: get from get to copyAttributes"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Splitter", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.jimfs.attribute.AttributeProvider", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.nio.file.FileSystem", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.nio.file.Files"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.nio.file.Path", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashMap"]}, {"root": "DEL Modifier: static", "operations": ["DEL Modifier: static"]}, {"root": "DEL StringLiteral: \"*\"", "operations": ["DEL StringLiteral: \"*\""]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: AtomicLong", "DEL SimpleType: AtomicLong", "DEL ClassInstanceCreation"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleType: String", "DEL Modifier: private", "DEL SimpleName: name", "DEL SimpleName: String", "DEL FieldDeclaration", "DEL Modifier: final", "DEL VariableDeclarationFragment"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement", "DEL TextElement: Directory supplier with no extra file attributes. ", "DEL Javadoc"]}, {"root": "DEL ParameterizedType: Supplier<File>", "operations": ["DEL SimpleType: Supplier", "DEL ParameterizedType: Supplier<File>", "DEL SimpleType: File", "DEL SimpleName: File"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleType: DirectorySupplier", "DEL ClassInstanceCreation", "DEL SimpleName: DirectorySupplier"]}, {"root": "DEL Javadoc", "operations": ["DEL Javadoc", "DEL TextElement: Regular file supplier with no extra file attributes. ", "DEL TagElement"]}, {"root": "DEL ParameterizedType: Supplier<File>", "operations": ["DEL SimpleType: Supplier", "DEL SimpleType: File", "DEL SimpleName: File", "DEL ParameterizedType: Supplier<File>"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ClassInstanceCreation", "DEL SimpleType: RegularFileSupplier", "DEL SimpleName: RegularFileSupplier"]}, {"root": "DEL Block", "operations": ["DEL ThisExpression", "DEL SimpleName: storage", "DEL Block", "DEL ThisExpression", "DEL ExpressionStatement", "DEL SimpleName: attributeProviders", "DEL ExpressionStatement", "DEL SimpleName: name", "DEL ThisExpression", "DEL ExpressionStatement", "DEL Assignment: =", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleName: name", "DEL FieldAccess", "DEL MethodInvocation", "DEL SimpleName: checkNotNull", "DEL FieldAccess", "DEL FieldAccess"]}, {"root": "DEL SimpleName: id", "operations": ["DEL SimpleName: id"]}, {"root": "DEL SimpleName: content", "operations": ["DEL SimpleName: content"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: file", "DEL MethodInvocation", "DEL SimpleName: attr", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL SimpleName: setAttributeInternal", "DEL SimpleName: value", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: name", "DEL Block", "DEL Modifier: public", "DEL SimpleName: name"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL PrimitiveType: long", "DEL MethodInvocation", "DEL SimpleName: nextFileId", "DEL Block", "DEL Modifier: private", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: file", "DEL SimpleName: content", "DEL ParameterizedType: FileAttribute<?>", "DEL SimpleName: FileAttribute", "DEL SingleVariableDeclaration", "DEL ParameterizedType: FileAttribute<?>", "DEL ReturnStatement", "DEL SimpleName: attr", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: id", "DEL SimpleName: attrs", "DEL MethodDeclaration", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL WildcardType: ?", "DEL SimpleType: FileAttribute", "DEL SimpleName: attrs", "DEL SimpleName: FileContent", "DEL SimpleType: File", "DEL SimpleName: createFile", "DEL PrimitiveType: long", "DEL Block", "DEL SimpleType: FileContent", "DEL SimpleType: FileAttribute", "DEL SingleVariableDeclaration", "DEL Block", "DEL EnhancedForStatement", "DEL SimpleName: FileAttribute", "DEL WildcardType: ?"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL ParameterizedType: FileAttribute<?>", "DEL SimpleName: FileAttribute", "DEL SimpleName: attrs", "DEL SimpleType: FileAttribute", "DEL WildcardType: ?", "DEL SingleVariableDeclaration"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: DirectoryTable", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: nextFileId", "DEL SimpleName: createFile", "DEL SimpleName: attrs", "DEL MethodInvocation", "DEL SimpleType: DirectoryTable"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: nextFileId", "DEL SimpleName: createFile", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: attrs", "DEL SimpleName: storage", "DEL SimpleName: createByteStore"]}, {"root": "DEL TextElement: the new file.", "operations": ["DEL TextElement: the new file."]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL SimpleType: File", "operations": ["DEL SimpleType: File"]}, {"root": "DEL SimpleName: createSymbolicLink", "operations": ["DEL SimpleName: createSymbolicLink"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL ParameterizedType: FileAttribute<?>", "DEL SingleVariableDeclaration", "DEL WildcardType: ?", "DEL SimpleName: attrs"]}, {"root": "DEL SimpleName: createFile", "operations": ["DEL SimpleName: createFile"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: nextFileId", "DEL MethodInvocation"]}, {"root": "DEL ParameterizedType: FileAttribute<?>", "operations": ["DEL SimpleName: FileAttribute", "DEL WildcardType: ?", "DEL SimpleType: FileAttribute", "DEL ParameterizedType: FileAttribute<?>"]}, {"root": "DEL SimpleName: attrs", "operations": ["DEL SimpleName: attrs"]}, {"root": "DEL SimpleType: JimfsPath", "operations": ["DEL SimpleType: JimfsPath", "DEL SimpleName: JimfsPath"]}, {"root": "DEL SimpleName: target", "operations": ["DEL SimpleName: target"]}, {"root": "DEL ParameterizedType: FileAttribute<?>", "operations": ["DEL WildcardType: ?", "DEL ParameterizedType: FileAttribute<?>", "DEL SimpleType: FileAttribute"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL Block", "DEL Block", "DEL SimpleName: createFile", "DEL SimpleName: File", "DEL SimpleName: copy", "DEL SimpleName: copyAttributes", "DEL SimpleName: copy", "DEL SimpleName: nextFileId", "DEL MethodInvocation", "DEL Javadoc", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: copyAttributes", "DEL SimpleName: file", "DEL SimpleName: content", "DEL MethodInvocation", "DEL SimpleName: file", "DEL MethodInvocation", "DEL SimpleName: copy", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleType: File", "DEL MethodInvocation", "DEL SimpleName: copy", "DEL IfStatement", "DEL MethodDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ExpressionStatement", "DEL SimpleName: getCreationTime", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL SimpleName: copy", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: setCreationTime", "DEL SingleVariableDeclaration", "DEL SimpleName: copy", "DEL MethodInvocation", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SimpleName: file", "DEL MethodInvocation", "DEL SimpleName: copy", "DEL SimpleName: setLastAccessTime", "DEL ExpressionStatement", "DEL TagElement", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: getLastAccessTime", "DEL Block", "DEL SimpleName: file", "DEL SimpleType: File", "DEL SimpleName: copyBasicAttributes", "DEL SimpleName: File", "DEL MethodInvocation", "DEL SimpleName: setLastModifiedTime", "DEL SimpleName: getLastModifiedTime", "DEL SimpleName: file", "DEL SimpleName: file"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: File", "DEL Block", "DEL TagElement", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleType: File", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleName: File", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: getAttributeKeys", "DEL SimpleName: String", "DEL EnhancedForStatement", "DEL SimpleType: File", "DEL SimpleName: copyBasicAttributes", "DEL SimpleName: copyAttributes", "DEL SimpleName: setAttribute", "DEL SimpleName: getAttribute", "DEL SingleVariableDeclaration", "DEL SimpleName: attribute", "DEL SingleVariableDeclaration", "DEL SimpleName: file", "DEL SimpleName: file", "DEL SimpleName: attribute", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: copy", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: copy", "DEL PrimitiveType: void", "DEL SimpleName: file", "DEL SimpleName: attribute", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: file", "DEL SimpleName: copy"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: FileAttribute", "DEL ClassInstanceCreation", "DEL SimpleName: attrs", "DEL SimpleType: DirectorySupplier", "DEL ParameterizedType: FileAttribute<?>", "DEL InfixExpression: ==", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL WildcardType: ?", "DEL TagElement", "DEL SimpleName: directorySupplier", "DEL SimpleName: defaultDirectorySupplier", "DEL MethodDeclaration", "DEL Modifier: public", "DEL QualifiedName: attrs.length", "DEL SimpleName: attrs", "DEL ReturnStatement", "DEL SimpleType: FileAttribute", "DEL ConditionalExpression", "DEL Block", "DEL NumberLiteral: 0"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: regularFileSupplier", "DEL SimpleName: RegularFileSupplier", "DEL InfixExpression: ==", "DEL SimpleName: attrs", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL TagElement", "DEL TextElement: Returns a supplier that creates a regular files and sets the given attributes.", "DEL MethodDeclaration", "DEL QualifiedName: attrs.length", "DEL SimpleType: RegularFileSupplier", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL ConditionalExpression", "DEL Block", "DEL SimpleName: defaultRegularFileSupplier", "DEL Javadoc"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement", "DEL SimpleName: attrs", "DEL Javadoc", "DEL SimpleType: SymbolicLinkSupplier", "DEL SimpleName: symbolicLinkSupplier", "DEL ClassInstanceCreation", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: target", "DEL Modifier: public", "DEL ReturnStatement", "DEL TextElement: Returns a supplier that creates a symbolic links to the given path and sets the given", "DEL TextElement: attributes."]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: .", "DEL MethodRef", "DEL Modifier: public", "DEL SimpleName: supportedFileAttributeViews", "DEL SimpleName: attributeProviders", "DEL TagElement", "DEL Javadoc", "DEL ReturnStatement", "DEL TagElement: @link", "DEL SimpleName: FileSystem", "DEL MethodDeclaration", "DEL TextElement: Implements ", "DEL Block", "DEL SimpleName: supportedFileAttributeViews", "DEL MethodInvocation"]}, {"root": "DEL TextElement: Implements ", "operations": ["DEL TextElement: Implements "]}, {"root": "DEL TagElement: @link", "operations": ["DEL SimpleName: supportsFileAttributeView", "DEL TagElement: @link", "DEL MethodRefParameter", "DEL SimpleName: FileStore", "DEL SimpleName: Class", "DEL MethodRef", "DEL SimpleType: Class"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: type", "DEL MethodInvocation", "DEL SimpleName: contains", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL SimpleName: supportsFileAttributeView", "DEL MethodDeclaration", "DEL SimpleName: contains", "DEL MethodInvocation", "DEL Block", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL SimpleName: supportedFileAttributeViews", "DEL MethodInvocation", "DEL SimpleName: name"]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}, {"root": "DEL PrimitiveType: void", "operations": ["DEL PrimitiveType: void"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: file", "DEL SimpleName: File", "DEL SimpleType: File", "DEL SingleVariableDeclaration"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: getProviders", "DEL Block", "DEL Block", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: file", "DEL SimpleType: AttributeProvider", "DEL SingleVariableDeclaration", "DEL SimpleName: provider", "DEL MethodInvocation", "DEL SimpleName: AttributeProvider", "DEL EnhancedForStatement", "DEL SimpleName: attributeProviders"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  attribute", "DEL TagElement: @code"]}, {"root": "DEL TextElement:  must be of the form", "operations": ["DEL TextElement:  must be of the form"]}, {"root": "DEL TextElement: \"view:attribute\" or \"attribute\".", "operations": ["DEL TextElement: \"view:attribute\" or \"attribute\"."]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL TypeParameter", "operations": ["DEL TypeParameter", "DEL SimpleName: V"]}, {"root": "DEL SimpleType: V", "operations": ["DEL SimpleType: V", "DEL SimpleName: V"]}, {"root": "DEL SimpleName: getAttribute", "operations": ["DEL SimpleName: getAttribute"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: File", "DEL SingleVariableDeclaration", "DEL SimpleType: File", "DEL SimpleName: file"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: attribute", "DEL SimpleType: String", "DEL SimpleName: String"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: String", "DEL SimpleName: view", "DEL VariableDeclarationStatement", "DEL SimpleName: getViewName", "DEL MethodInvocation", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL SimpleName: attribute"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: attribute", "DEL SimpleType: String", "DEL SimpleName: attr", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL SimpleName: getSingleAttribute"]}, {"root": "DEL SimpleName: getAttribute", "operations": ["DEL SimpleName: getAttribute"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: file", "DEL SimpleName: isGettable", "DEL SimpleName: attribute", "DEL SimpleName: provider"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: V", "DEL SimpleType: V", "DEL CastExpression", "DEL MethodInvocation"]}, {"root": "DEL SingleMemberAnnotation", "operations": ["DEL StringLiteral: \"unchecked\"", "DEL SimpleName: SuppressWarnings", "DEL SingleMemberAnnotation"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL TypeParameter", "operations": ["DEL SimpleName: V", "DEL TypeParameter"]}, {"root": "DEL SimpleType: V", "operations": ["DEL SimpleType: V", "DEL SimpleName: V"]}, {"root": "DEL SimpleName: getAttribute", "operations": ["DEL SimpleName: getAttribute"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: File", "DEL SimpleName: file", "DEL SingleVariableDeclaration", "DEL SimpleType: File"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: String", "DEL SimpleName: view", "DEL SimpleType: String", "DEL SingleVariableDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleName: attribute", "DEL SimpleType: String"]}, {"root": "DEL Block", "operations": ["DEL InfixExpression: +", "DEL EnhancedForStatement", "DEL Block", "DEL SimpleName: view", "DEL ThrowStatement", "DEL StringLiteral: \"attribute not found: \"", "DEL Block", "DEL SimpleName: AttributeProvider", "DEL SimpleName: provider", "DEL MethodInvocation", "DEL SimpleName: attribute", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: IllegalArgumentException", "DEL SingleVariableDeclaration", "DEL SimpleType: AttributeProvider", "DEL ClassInstanceCreation"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: File", "DEL SimpleName: file", "DEL SingleVariableDeclaration", "DEL SimpleName: File"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: String", "DEL SimpleName: attribute", "DEL SimpleType: String", "DEL SingleVariableDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: value"]}, {"root": "DEL SimpleName: value", "operations": ["DEL SimpleName: value"]}, {"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleName: view"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: String", "DEL SimpleType: String", "DEL SimpleName: attribute", "DEL SingleVariableDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: value"]}, {"root": "DEL SimpleName: view", "operations": ["DEL SimpleName: view"]}, {"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL VariableDeclarationFragment", "DEL SimpleName: getViewName", "DEL SimpleName: view", "DEL SimpleName: attribute", "DEL SimpleType: String", "DEL SimpleName: attr", "DEL MethodDeclaration", "DEL SimpleName: attr", "DEL SimpleName: attribute", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL Block", "DEL SimpleName: create", "DEL PrimitiveType: boolean", "DEL SimpleName: value", "DEL SimpleName: create", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL SimpleName: setAttributeInternal", "DEL MethodInvocation", "DEL SimpleName: file", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL Modifier: private", "DEL SimpleName: setAttributeInternal", "DEL MethodInvocation", "DEL SimpleName: view", "DEL SimpleName: getSingleAttribute"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL PrimitiveType: void", "DEL MethodInvocation", "DEL SimpleName: provider", "DEL VariableDeclarationFragment", "DEL StringLiteral: \":\"", "DEL SimpleName: isSettableOnCreate", "DEL NumberLiteral: 1", "DEL SimpleName: attribute", "DEL SimpleName: view", "DEL ClassInstanceCreation", "DEL StringLiteral: \":\"", "DEL SimpleName: provider", "DEL Block", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"cannot set attribute '\"", "DEL SimpleName: acceptedTypes", "DEL SimpleName: validType", "DEL Block", "DEL SimpleName: validType", "DEL SimpleName: value", "DEL VariableDeclarationStatement", "DEL SimpleName: isSettable", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: acceptedTypes", "DEL InfixExpression: &&", "DEL SimpleName: create", "DEL SimpleName: ImmutableSet", "DEL SimpleName: attribute", "DEL SimpleName: AttributeProvider", "DEL SimpleName: view", "DEL Block", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: acceptedTypes", "DEL SimpleType: AttributeProvider", "DEL StringLiteral: \" for attribute '\"", "DEL MethodInvocation", "DEL Block", "DEL ThrowStatement", "DEL SimpleName: view", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL StringLiteral: \"invalid type \"", "DEL SimpleName: attributeProviders", "DEL InfixExpression: +", "DEL SimpleName: acceptedTypes", "DEL ThrowStatement", "DEL InfixExpression: ==", "DEL ClassInstanceCreation", "DEL SimpleName: provider", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: Class", "DEL StringLiteral: \"' during file creation\"", "DEL MethodInvocation", "DEL IfStatement", "DEL Block", "DEL SimpleType: ImmutableSet", "DEL SimpleName: acceptedTypeMessage", "DEL SimpleType: String", "DEL WildcardType: ?", "DEL VariableDeclarationStatement", "DEL SimpleName: create", "DEL SimpleName: String", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL SimpleName: view", "DEL SimpleName: value", "DEL SimpleName: validType", "DEL SimpleName: type", "DEL BooleanLiteral: false", "DEL SimpleName: value", "DEL SimpleType: IllegalArgumentException", "DEL PrimitiveType: boolean", "DEL SimpleName: Class", "DEL ThrowStatement", "DEL InfixExpression: +", "DEL PrimitiveType: boolean", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: value", "DEL Block", "DEL SimpleName: file", "DEL BooleanLiteral: true", "DEL SimpleType: Class", "DEL SimpleName: view", "DEL SimpleName: acceptedTypes", "DEL StringLiteral: \"'\"", "DEL EnhancedForStatement", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: attribute", "DEL SimpleName: attribute", "DEL ConditionalExpression", "DEL SimpleName: attribute", "DEL StringLiteral: \"one of \"", "DEL WildcardType: ?", "DEL SimpleName: acceptedTypeMessage", "DEL SimpleName: getClass", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Class<?>", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL StringLiteral: \"': should be \"", "DEL SimpleName: file", "DEL SimpleName: next", "DEL ParameterizedType: Class<?>", "DEL MethodInvocation", "DEL SimpleName: attribute", "DEL SingleVariableDeclaration", "DEL ParameterizedType: ImmutableSet<Class<?>>", "DEL EnhancedForStatement", "DEL Modifier: private", "DEL SimpleName: size", "DEL SimpleType: Class", "DEL SingleVariableDeclaration", "DEL SimpleName: isInstance", "DEL VariableDeclarationFragment", "DEL SimpleName: set", "DEL SimpleName: IllegalArgumentException", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: attribute", "DEL MethodDeclaration", "DEL BreakStatement", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleName: iterator", "DEL SimpleName: getProviders", "DEL SimpleName: provider", "DEL ClassInstanceCreation", "DEL SimpleName: provider", "DEL SimpleName: setAttributeInternal", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleName: attribute", "DEL ReturnStatement", "DEL SimpleType: IllegalArgumentException", "DEL InfixExpression: +", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: acceptedTypes", "DEL Block", "DEL Block", "DEL StringLiteral: \"cannot set attribute '\"", "DEL SimpleName: type", "DEL SimpleName: Object", "DEL StringLiteral: \":\"", "DEL MethodInvocation"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getViewProvider", "DEL SimpleName: type"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: type", "DEL Block", "DEL Block", "DEL ReturnStatement", "DEL NullLiteral", "DEL SimpleName: supportsFileAttributeView", "DEL IfStatement", "DEL MethodInvocation"]}, {"root": "DEL TextElement: Implements ", "operations": ["DEL TextElement: Implements "]}, {"root": "DEL TagElement: @link", "operations": ["DEL SimpleName: Path", "DEL MethodRefParameter", "DEL MethodRef", "DEL SimpleName: readAttributes", "DEL SimpleName: LinkOption", "DEL SimpleName: String", "DEL SimpleName: Files", "DEL SimpleType: Path", "DEL SimpleType: LinkOption", "DEL TagElement: @link", "DEL MethodRefParameter", "DEL MethodRefParameter", "DEL SimpleType: String"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL SimpleName: view", "DEL SimpleType: String", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: getViewName", "DEL SimpleName: attributes"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL ParameterizedType: List<String>", "DEL VariableDeclarationFragment", "DEL SimpleName: List", "DEL SimpleType: List", "DEL SimpleType: String", "DEL SimpleName: attrs", "DEL MethodInvocation", "DEL SimpleName: getAttributeNames"]}, {"root": "DEL IfStatement", "operations": ["DEL InfixExpression: &&", "DEL NumberLiteral: 1", "DEL StringLiteral: \"invalid attributes: \"", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: attributes", "DEL SimpleName: attrs", "DEL SimpleType: IllegalArgumentException", "DEL InfixExpression: +", "DEL InfixExpression: >", "DEL SimpleName: contains", "DEL SimpleName: ALL_ATTRIBUTES", "DEL SimpleName: size", "DEL MethodInvocation", "DEL SimpleName: attrs", "DEL Block", "DEL MethodInvocation", "DEL ThrowStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleName: Object", "DEL ParameterizedType: Map<String,Object>", "DEL VariableDeclarationStatement", "DEL SimpleName: result", "DEL ClassInstanceCreation", "DEL ParameterizedType: HashMap<>", "DEL SimpleType: HashMap", "DEL SimpleName: Map", "DEL SimpleName: HashMap", "DEL VariableDeclarationFragment", "DEL SimpleType: Object", "DEL SimpleType: Map"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: attributeProviders", "DEL SimpleName: readAll", "DEL BreakStatement", "DEL SimpleName: attr", "DEL SimpleName: attrs", "DEL Block", "DEL SimpleName: provider", "DEL SimpleName: ALL_ATTRIBUTES", "DEL InfixExpression: +", "DEL SimpleName: put", "DEL SimpleName: found", "DEL Block", "DEL PrefixExpression: !", "DEL PrimitiveType: boolean", "DEL SimpleName: AttributeProvider", "DEL SingleVariableDeclaration", "DEL BooleanLiteral: true", "DEL SimpleName: contains", "DEL MethodInvocation", "DEL SimpleName: attr", "DEL VariableDeclarationStatement", "DEL SimpleName: view", "DEL MethodInvocation", "DEL SimpleName: attr", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: file", "DEL SimpleName: provider", "DEL SimpleName: get", "DEL SimpleName: getProviders", "DEL SingleVariableDeclaration", "DEL SimpleName: result", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleType: IllegalArgumentException", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL IfStatement", "DEL Block", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: size", "DEL InfixExpression: &&", "DEL StringLiteral: \"invalid attribute for view '\"", "DEL SimpleType: AttributeProvider", "DEL SimpleName: view", "DEL SimpleName: file", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: attrs", "DEL Block", "DEL SimpleName: found", "DEL SimpleName: attr", "DEL Assignment: =", "DEL SimpleName: provider", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: result", "DEL BooleanLiteral: false", "DEL SimpleType: AttributeProvider", "DEL StringLiteral: \"': \"", "DEL SimpleName: provider", "DEL SimpleName: getProviders", "DEL Block", "DEL SimpleType: String", "DEL SimpleName: isGettable", "DEL SimpleName: String", "DEL SimpleName: attrs", "DEL SimpleName: found", "DEL SimpleName: provider", "DEL MethodInvocation", "DEL SimpleName: attr", "DEL SimpleName: AttributeProvider", "DEL EnhancedForStatement", "DEL EnhancedForStatement", "DEL ThrowStatement", "DEL SimpleName: view", "DEL EnhancedForStatement", "DEL IfStatement", "DEL Block", "DEL ExpressionStatement"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: copyOf", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: result", "DEL SimpleName: ImmutableMap"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: read", "DEL SimpleName: getReader", "DEL IfStatement", "DEL SimpleName: attributeProviders", "DEL MethodInvocation", "DEL SimpleName: type", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: file"]}, {"root": "DEL ThrowStatement", "operations": ["DEL SimpleName: type", "DEL ClassInstanceCreation", "DEL SimpleName: UnsupportedOperationException", "DEL StringLiteral: \"unsupported attributes type: \"", "DEL SimpleType: UnsupportedOperationException", "DEL ThrowStatement", "DEL InfixExpression: +"]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}, {"root": "DEL Modifier: static", "operations": ["DEL Modifier: static"]}, {"root": "DEL SimpleType: String", "operations": ["DEL SimpleName: String", "DEL SimpleType: String"]}, {"root": "DEL SimpleName: getViewName", "operations": ["DEL SimpleName: getViewName"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleName: attribute", "DEL SingleVariableDeclaration"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: separatorIndex", "DEL CharacterLiteral: ':'", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: indexOf", "DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: separatorIndex", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL IfStatement", "DEL PrefixExpression: -", "DEL StringLiteral: \"basic\"", "DEL Block", "DEL NumberLiteral: 1"]}, {"root": "DEL IfStatement", "operations": ["DEL CharacterLiteral: ':'", "DEL SimpleType: IllegalArgumentException", "DEL MethodInvocation", "DEL SimpleName: separatorIndex", "DEL StringLiteral: \"illegal attribute format: \"", "DEL NumberLiteral: 0", "DEL SimpleName: separatorIndex", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: indexOf", "DEL InfixExpression: +", "DEL NumberLiteral: 1", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL PrefixExpression: -", "DEL ThrowStatement", "DEL Block", "DEL InfixExpression: ==", "DEL InfixExpression: ||", "DEL NumberLiteral: 1", "DEL NumberLiteral: 1", "DEL InfixExpression: ==", "DEL SimpleName: attribute", "DEL SimpleName: separatorIndex", "DEL InfixExpression: ||", "DEL InfixExpression: -", "DEL SimpleName: length"]}, {"root": "DEL ReturnStatement", "operations": ["DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL SimpleName: separatorIndex", "DEL SimpleName: substring", "DEL MethodInvocation"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleType: Splitter", "DEL SimpleName: Splitter", "DEL SimpleName: on", "DEL Modifier: static", "DEL Modifier: final", "DEL CharacterLiteral: ','", "DEL FieldDeclaration", "DEL SimpleName: Splitter", "DEL SimpleName: ATTRIBUTE_SPLITTER", "DEL Modifier: private", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL CharacterLiteral: ':'", "DEL SingleVariableDeclaration", "DEL ParameterizedType: ImmutableList<String>", "DEL SimpleName: attributes", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL NumberLiteral: 1", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleName: getAttributeNames", "DEL SimpleType: ImmutableList", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleName: attributesPart", "DEL SimpleName: attributesPart", "DEL PrimitiveType: int", "DEL SimpleName: separatorIndex", "DEL SimpleName: ATTRIBUTE_SPLITTER", "DEL SimpleName: attributes", "DEL ReturnStatement", "DEL SimpleName: substring", "DEL SimpleName: ImmutableList", "DEL SimpleName: String", "DEL SimpleName: indexOf", "DEL SimpleName: String", "DEL MethodInvocation", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL SimpleName: split", "DEL SimpleName: copyOf", "DEL SimpleName: separatorIndex", "DEL SimpleName: attributes", "DEL MethodInvocation", "DEL SimpleName: ImmutableList", "DEL SimpleType: String"]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}, {"root": "DEL Modifier: static", "operations": ["DEL Modifier: static"]}, {"root": "DEL SimpleType: String", "operations": ["DEL SimpleType: String", "DEL SimpleName: String"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL SimpleName: attribute"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: ImmutableList", "DEL SimpleType: String", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleType: ImmutableList", "DEL ParameterizedType: ImmutableList<String>", "DEL SimpleName: getAttributeNames", "DEL SimpleName: attribute", "DEL SimpleName: attributeNames", "DEL VariableDeclarationStatement", "DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL InfixExpression: +", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: IllegalArgumentException", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: attributeNames", "DEL InfixExpression: !=", "DEL ClassInstanceCreation", "DEL SimpleName: get", "DEL MethodInvocation", "DEL SimpleName: ALL_ATTRIBUTES", "DEL SimpleName: attributeNames", "DEL StringLiteral: \"must specify a single attribute: \"", "DEL SimpleName: size", "DEL InfixExpression: ||", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: attribute", "DEL SimpleName: equals", "DEL ThrowStatement"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL SimpleType: File", "operations": ["DEL SimpleType: File", "DEL SimpleName: File"]}, {"root": "DEL SimpleName: get", "operations": ["DEL SimpleName: get"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: attrs", "DEL SimpleName: createDirectory"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Override"]}, {"root": "DEL SimpleType: File", "operations": ["DEL SimpleName: File", "DEL SimpleType: File"]}, {"root": "DEL SimpleName: get", "operations": ["DEL SimpleName: get"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Override"]}, {"root": "DEL SimpleType: File", "operations": ["DEL SimpleName: File", "DEL SimpleType: File"]}, {"root": "DEL SimpleName: get", "operations": ["DEL SimpleName: get"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: Returns ", "DEL TextElement:  null", "DEL TextElement: . This file store does not support any file store attribute views.", "DEL TagElement", "DEL Javadoc", "DEL TagElement: @code"]}, {"root": "DEL Javadoc", "operations": ["DEL Javadoc", "DEL TagElement: @link", "DEL TextElement: Throws ", "DEL TagElement", "DEL TextElement: . This file store does not support any file store", "DEL TextElement: attributes.", "DEL SimpleName: UnsupportedOperationException"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: attrs", "DEL Modifier: protected", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleType: Supplier", "DEL ParameterizedType: Supplier<File>", "DEL Block", "DEL Modifier: protected", "DEL WildcardType: ?", "DEL SimpleName: attrs", "DEL MethodDeclaration", "DEL SimpleName: attrs", "DEL ParameterizedType: FileAttribute<?>", "DEL Dimension", "DEL SimpleName: FileAttribute", "DEL Modifier: abstract", "DEL ParameterizedType: FileAttribute<?>", "DEL Modifier: private", "DEL SimpleName: attrs", "DEL SimpleType: File", "DEL SingleVariableDeclaration", "DEL SimpleName: checkNotNull", "DEL SimpleType: FileAttribute", "DEL SimpleName: FileAttribute", "DEL FieldAccess", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: FileSupplier", "DEL ThisExpression", "DEL SimpleType: FileAttribute", "DEL SimpleName: FileSupplier", "DEL ArrayType: FileAttribute<?>[]", "DEL FieldDeclaration", "DEL SimpleName: Supplier", "DEL SimpleName: File", "DEL Dimension", "DEL ArrayType: FileAttribute<?>[]", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL TypeDeclaration: class"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: attrs", "DEL SimpleName: attrs", "DEL SimpleName: DirectorySupplier", "DEL SimpleType: FileAttribute", "DEL SimpleName: FileSupplier", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SuperConstructorInvocation", "DEL SimpleName: DirectorySupplier", "DEL Modifier: final", "DEL WildcardType: ?", "DEL Block", "DEL ParameterizedType: FileAttribute<?>", "DEL Modifier: private", "DEL TypeDeclaration: class", "DEL SimpleName: FileAttribute", "DEL SimpleType: FileSupplier", "DEL Modifier: private"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: RegularFileSupplier", "DEL WildcardType: ?", "DEL SimpleType: FileSupplier", "DEL TypeDeclaration: class", "DEL SimpleName: FileSupplier", "DEL Modifier: private", "DEL SimpleName: attrs", "DEL SimpleName: FileAttribute", "DEL Modifier: private", "DEL SimpleType: FileAttribute", "DEL SingleVariableDeclaration", "DEL SimpleName: RegularFileSupplier", "DEL MethodDeclaration", "DEL ParameterizedType: FileAttribute<?>", "DEL SuperConstructorInvocation", "DEL Block", "DEL SimpleName: attrs", "DEL Modifier: final"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: target", "DEL SimpleName: target", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: attrs", "DEL SimpleName: SymbolicLinkSupplier", "DEL SuperConstructorInvocation", "DEL ThisExpression", "DEL SimpleName: JimfsPath", "DEL Modifier: final", "DEL SimpleType: FileAttribute", "DEL FieldAccess", "DEL ExpressionStatement", "DEL SimpleType: JimfsPath", "DEL Block", "DEL ParameterizedType: FileAttribute<?>", "DEL Modifier: private", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL WildcardType: ?", "DEL MethodDeclaration", "DEL SimpleType: FileSupplier", "DEL SimpleName: target", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleName: target", "DEL TypeDeclaration: class", "DEL SimpleName: FileSupplier", "DEL SimpleName: attrs", "DEL SimpleName: SymbolicLinkSupplier", "DEL SimpleName: FileAttribute", "DEL Modifier: final", "DEL Modifier: protected", "DEL SimpleName: checkNotNull"]}]}}, {"JimfsFileStore_diff": {"operations": ["Move ImportDeclaration(9) into CompilationUnit(702) at 7", "Move FieldDeclaration(102) into TypeDeclaration: class(701) at 5", "Move MethodDeclaration(239) into TypeDeclaration: class(701) at 47", "Move MethodDeclaration(248) into TypeDeclaration: class(701) at 47", "Move MethodDeclaration(261) into TypeDeclaration: class(701) at 47", "Move MethodDeclaration(273) into TypeDeclaration: class(701) at 47", "Move MethodDeclaration(286) into TypeDeclaration: class(701) at 47", "Update QualifiedName: com.google.common.collect.ImmutableList(8) to com.google.common.collect.ImmutableSortedSet", "Update QualifiedName: java.nio.file.LinkOption(32) to java.nio.file.NoSuchFileException", "Update QualifiedName: java.util.List(46) to java.util.concurrent.locks.Lock", "Update QualifiedName: java.util.Map(48) to java.util.concurrent.locks.ReadWriteLock", "Update QualifiedName: java.util.concurrent.atomic.AtomicLong(50) to java.util.concurrent.locks.ReentrantReadWriteLock", "Insert MethodDeclaration(208) into TypeDeclaration: class(701) at 11", "Insert MethodDeclaration(281) into TypeDeclaration: class(701) at 15", "Move MethodDeclaration(1650) into TypeDeclaration: class(701) at 44", "Move MethodDeclaration(1680) into TypeDeclaration: class(701) at 50", "Move MethodDeclaration(1730) into TypeDeclaration: class(701) at 51", "Update SimpleType: String(67) to FileTree", "Update SimpleType: AtomicLong(75) to AttributeService", "Update SimpleType: AttributeProviderRegistry(92) to FileFactory", "Insert SimpleType: Lock(85) into FieldDeclaration(88) at 2", "Insert SimpleType: Lock(92) into FieldDeclaration(95) at 2", "Insert SingleVariableDeclaration(108) into MethodDeclaration(132) at 4", "Insert Block(131) into MethodDeclaration(132) at 7", "Update Modifier: private(180) to public", "Move Modifier: private(180) into MethodDeclaration(208) at 0", "Move SimpleName: JimfsFileStore(181) into MethodDeclaration(208) at 1", "Move SingleVariableDeclaration(185) into MethodDeclaration(208) at 2", "Insert SingleVariableDeclaration(142) into MethodDeclaration(208) at 3", "Move SingleVariableDeclaration(189) into MethodDeclaration(208) at 4", "Move SingleVariableDeclaration(193) into MethodDeclaration(208) at 5", "Insert Block(207) into MethodDeclaration(208) at 6", "Update SimpleType: File(356) to Lock", "Update SimpleName: createDirectory(357) to readLock", "Update SimpleType: File(380) to Lock", "Update SimpleName: createRegularFile(381) to writeLock", "Insert ParameterizedType: ImmutableSortedSet<Name>(236) into MethodDeclaration(243) at 1", "Insert SimpleName: getRootDirectoryNames(237) into MethodDeclaration(243) at 2", "Insert Javadoc(255) into MethodDeclaration(281) at 0", "Insert SimpleType: DirectoryEntry(257) into MethodDeclaration(281) at 1", "Insert SimpleName: lookup(258) into MethodDeclaration(281) at 2", "Move SingleVariableDeclaration(586) into MethodDeclaration(281) at 3", "Move SingleVariableDeclaration(613) into MethodDeclaration(281) at 4", "Move SingleVariableDeclaration(619) into MethodDeclaration(281) at 5", "Insert SimpleType: IOException(272) into MethodDeclaration(281) at 6", "Insert Block(280) into MethodDeclaration(281) at 7", "Move ParameterizedType: Supplier<File>(579) into MethodDeclaration(296) at 1", "Update SimpleName: supportsFileAttributeView(662) to createRegularFile", "Move ParameterizedType: Supplier<File>(551) into MethodDeclaration(311) at 1", "Update SimpleName: setInitialAttributes(702) to createDirectory", "Insert Block(310) into MethodDeclaration(311) at 3", "Move ParameterizedType: Supplier<File>(608) into MethodDeclaration(331) at 1", "Insert SimpleName: createSymbolicLink(320) into MethodDeclaration(331) at 2", "Move SingleVariableDeclaration(410) into MethodDeclaration(331) at 3", "Move SimpleType: File(432) into MethodDeclaration(371) at 1", "Insert SimpleName: copy(338) into MethodDeclaration(371) at 2", "Move SingleVariableDeclaration(437) into MethodDeclaration(371) at 3", "Move SingleVariableDeclaration(440) into MethodDeclaration(371) at 4", "Insert Block(370) into MethodDeclaration(371) at 5", "Update SimpleName: setAttribute(833) to setInitialAttributes", "Move SingleVariableDeclaration(864) into MethodDeclaration(394) at 4", "Move SingleVariableDeclaration(387) into MethodDeclaration(394) at 5", "Update SimpleName: setAttribute(860) to copyBasicAttributes", "Move SingleVariableDeclaration(937) into MethodDeclaration(415) at 4", "Move SingleVariableDeclaration(480) into MethodDeclaration(415) at 5", "Insert Block(453) into MethodDeclaration(454) at 7", "Insert Javadoc(518) into MethodDeclaration(541) at 0", "Insert PrimitiveType: void(519) into MethodDeclaration(541) at 1", "Insert SimpleName: setAttribute(520) into MethodDeclaration(541) at 2", "Move SingleVariableDeclaration(893) into MethodDeclaration(541) at 3", "Move SingleVariableDeclaration(897) into MethodDeclaration(541) at 4", "Move SingleVariableDeclaration(901) into MethodDeclaration(541) at 5", "Insert Javadoc(544) into MethodDeclaration(556) at 0", "Move ParameterizedType: ImmutableSet<String>(641) into MethodDeclaration(556) at 1", "Update SimpleName: getSingleAttribute(1485) to supportedFileAttributeViews", "Move MarkerAnnotation(221) into MethodDeclaration(566) at 0", "Move SimpleType: String(224) into MethodDeclaration(566) at 3", "Insert SimpleName: name(562) into MethodDeclaration(566) at 3", "Move MarkerAnnotation(1640) into MethodDeclaration(643) at 0", "Insert PrimitiveType: boolean(627) into MethodDeclaration(643) at 2", "Insert SimpleName: supportsFileAttributeView(628) into MethodDeclaration(643) at 3", "Move SingleVariableDeclaration(670) into MethodDeclaration(643) at 5", "Move MarkerAnnotation(681) into MethodDeclaration(661) at 0", "Insert PrimitiveType: boolean(647) into MethodDeclaration(661) at 2", "Insert SimpleName: supportsFileAttributeView(648) into MethodDeclaration(661) at 3", "Move SingleVariableDeclaration(688) into MethodDeclaration(661) at 5", "Insert TagElement: @link(43) into TagElement(46) at 0", "Update TextElement: Service for creating and copying files as well as reading and setting attributes on them.(54) to  implementation which provides methods for file creation, lookup and attribute", "Insert TextElement: handling.(45) into TagElement(46) at 2", "Update SimpleName: String(66) to FileTree", "Update SimpleName: ALL_ATTRIBUTES(68) to tree", "Update SimpleName: AtomicLong(74) to AttributeService", "Update SimpleName: idGenerator(76) to attributes", "Update SimpleName: AttributeProviderRegistry(91) to FileFactory", "Update SimpleName: attributeProviders(93) to factory", "Update SimpleName: Supplier(108) to Lock", "Move SimpleName: Supplier(108) into SimpleType: Lock(85) at 0", "Update SimpleName: defaultDirectorySupplier(113) to readLock", "Update SimpleName: Supplier(124) to Lock", "Move SimpleName: Supplier(124) into SimpleType: Lock(92) at 0", "Update SimpleName: defaultRegularFileSupplier(129) to writeLock", "Update SimpleType: String(141) to FileTree", "Update SimpleName: name(142) to tree", "Insert SimpleType: FileFactory(106) into SingleVariableDeclaration(108) at 0", "Insert SimpleName: factory(107) into SingleVariableDeclaration(108) at 1", "Insert ConstructorInvocation(130) into Block(131) at 0", "Update SimpleType: String(183) to FileTree", "Update SimpleName: name(184) to tree", "Insert SimpleType: FileFactory(140) into SingleVariableDeclaration(142) at 0", "Insert SimpleName: factory(141) into SingleVariableDeclaration(142) at 1", "Update SimpleType: AttributeProviderRegistry(191) to AttributeService", "Update SimpleName: attributeProviders(192) to attributes", "Move ExpressionStatement(201) into Block(207) at 0", "Move ExpressionStatement(217) into Block(207) at 1", "Move ExpressionStatement(209) into Block(207) at 2", "Insert ExpressionStatement(182) into Block(207) at 3", "Insert VariableDeclarationStatement(190) into Block(207) at 4", "Move ExpressionStatement(326) into Block(207) at 5", "Move ExpressionStatement(344) into Block(207) at 6", "Update SimpleName: File(355) to Lock", "Update SimpleName: File(379) to Lock", "Insert SimpleType: ImmutableSortedSet(233) into ParameterizedType: ImmutableSortedSet<Name>(236) at 0", "Update SimpleType: FileAttribute(412) to Name", "Move SimpleType: FileAttribute(412) into ParameterizedType: ImmutableSortedSet<Name>(236) at 1", "Move TagElement(428) into Javadoc(255) at 0", "Insert TagElement: @throws(250) into Javadoc(255) at 1", "Insert TagElement: @throws(254) into Javadoc(255) at 2", "Update SimpleName: DirectorySupplier(563) to DirectoryEntry", "Move SimpleName: DirectorySupplier(563) into SimpleType: DirectoryEntry(257) at 0", "Move SimpleType: File(314) into SingleVariableDeclaration(262) at 0", "Insert SimpleName: workingDirectory(261) into SingleVariableDeclaration(262) at 1", "Move SimpleType: JimfsPath(1690) into SingleVariableDeclaration(266) at 0", "Insert SimpleName: path(265) into SingleVariableDeclaration(266) at 1", "Insert SimpleType: LinkOptions(268) into SingleVariableDeclaration(270) at 0", "Update SimpleName: attrs(618) to options", "Update SimpleName: SymbolicLinkSupplier(620) to IOException", "Move SimpleName: SymbolicLinkSupplier(620) into SimpleType: IOException(272) at 0", "Insert ReturnStatement(279) into Block(280) at 0", "Insert ReturnStatement(309) into Block(310) at 0", "Insert VariableDeclarationStatement(354) into Block(370) at 0", "Insert ExpressionStatement(358) into Block(370) at 1", "Move IfStatement(816) into Block(370) at 2", "Move ReturnStatement(464) into Block(370) at 3", "Move ReturnStatement(1128) into Block(453) at 0", "Insert ReturnStatement(481) into Block(482) at 0", "Insert ReturnStatement(513) into Block(514) at 0", "Insert TagElement(517) into Javadoc(518) at 0", "Insert ExpressionStatement(539) into Block(540) at 0", "Insert TagElement(543) into Javadoc(544) at 0", "Insert SimpleName: FileStore(42) into TagElement: @link(43) at 0", "Update TextElement: Creates a new file service using the given providers to handle file attributes.(135) to Creates a new file store with the given storage and attribute view configuration.", "Update SimpleName: String(140) to FileTree", "Insert SimpleName: FileFactory(105) into SimpleType: FileFactory(106) at 0", "Insert SimpleName: tree(117) into ConstructorInvocation(130) at 0", "Insert SimpleName: factory(118) into ConstructorInvocation(130) at 1", "Move MethodInvocation(166) into ConstructorInvocation(130) at 2", "Insert ClassInstanceCreation(129) into ConstructorInvocation(130) at 3", "Update SimpleName: String(182) to FileTree", "Insert SimpleName: FileFactory(139) into SimpleType: FileFactory(140) at 0", "Update SimpleName: AttributeProviderRegistry(190) to AttributeService", "Insert Assignment: =(181) into ExpressionStatement(182) at 0", "Insert SimpleType: ReadWriteLock(184) into VariableDeclarationStatement(190) at 0", "Move VariableDeclarationFragment(321) into VariableDeclarationStatement(190) at 1", "Insert Assignment: =(197) into ExpressionStatement(198) at 0", "Insert Assignment: =(205) into ExpressionStatement(206) at 0", "Update TextElement: Creates a new directory and stores it. Returns the key of the new file.(351) to Returns the read lock for this store.", "Insert SimpleName: readLock(215) into ReturnStatement(216) at 0", "Update TextElement: Creates a new regular file and stores it. Returns the key of the new file.(375) to Returns the write lock for this store.", "Insert SimpleName: writeLock(225) into ReturnStatement(226) at 0", "Update TextElement: Creates a new symbolic link referencing the given target path and stores it. Returns the key of(399) to Returns the names of the root directories in this store.", "Update SimpleName: File(404) to ImmutableSortedSet", "Move SimpleName: File(404) into SimpleType: ImmutableSortedSet(233) at 0", "Update SimpleName: FileAttribute(411) to Name", "Update TextElement: Creates copies of the given file metadata and content and stores them. Returns the key of the(426) to Looks up the file at the given path using the given link options. If the path is relative, the", "Update TextElement: new file.(427) to lookup is relative to the given working directory.", "Insert SimpleName: NoSuchFileException(247) into TagElement: @throws(250) at 0", "Update TextElement: Copies the file times of the given file to the given copy file.(467) to  if an element of the path other than the final element does not", "Move TextElement: Copies the file times of the given file to the given copy file.(467) into TagElement: @throws(250) at 1", "Insert TextElement: resolve to a directory or symbolic link (e.g. it doesn't exist or is a regular file)(249) into TagElement: @throws(250) at 2", "Insert SimpleName: IOException(251) into TagElement: @throws(254) at 0", "Update TextElement: Copies the attributes of the given file to the given copy file.(504) to  if a symbolic link cycle is detected or the depth of symbolic link", "Move TextElement: Copies the attributes of the given file to the given copy file.(504) into TagElement: @throws(254) at 1", "Update TextElement: Returns a supplier that creates directories and sets the given attributes.(543) to recursion otherwise exceeds a threshold", "Move TextElement: Returns a supplier that creates directories and sets the given attributes.(543) into TagElement: @throws(254) at 2", "Update SimpleName: FileAttribute(614) to LinkOptions", "Move SimpleName: FileAttribute(614) into SimpleType: LinkOptions(268) at 0", "Insert MethodInvocation(278) into ReturnStatement(279) at 0", "Update TextElement: .(657) to Returns a supplier that creates a new regular file.", "Insert MethodInvocation(293) into ReturnStatement(294) at 0", "Update TextElement: Sets all initial attributes for the given file.(697) to Returns a supplier that creates a new directory.", "Insert MethodInvocation(308) into ReturnStatement(309) at 0", "Update TextElement: Gets the value of the given attribute for the given file. (723) to Returns a supplier that creates a new symbolic link with the given target.", "Update TextElement: Gets the value of the given attribute for the given view and file. Neither view nor file may(768) to Creates a copy of the given file, copying its attributes as well if copy attributes is true.", "Update TextElement: have a ':' character.(769) to Returns the copy.", "Move SimpleType: File(317) into VariableDeclarationStatement(354) at 0", "Insert VariableDeclarationFragment(353) into VariableDeclarationStatement(354) at 1", "Insert MethodInvocation(357) into ExpressionStatement(358) at 0", "Insert SimpleName: copyAttributes(359) into IfStatement(367) at 0", "Update TextElement: Sets the value of the given attribute to the given value for the given file.(828) to Sets initial attributes on the given file, including the given attributes if possible.", "Update TextElement: Sets the value of the given attribute to the given value for the given view and file.(855) to Copies the basic attributes (just file times) of the given file to the given copy file.", "Update TextElement: Returns an attribute view of the given type for the given file provider, or (1086) to Returns an attribute view of the given type for the given file supplier, or ", "Update TextElement: .(1149) to Returns a map containing the attributes described by the given string mapped to their values.", "Insert MethodInvocation(480) into ReturnStatement(481) at 0", "Insert MethodInvocation(512) into ReturnStatement(513) at 0", "Insert TextElement: Sets the given attribute to the given value for the given file.(516) into TagElement(517) at 0", "Insert MethodInvocation(538) into ExpressionStatement(539) at 0", "Insert TextElement: Returns the file attribute views supported by this store.(542) into TagElement(543) at 0", "Insert StringLiteral: \"jimfs\"(563) into ReturnStatement(564) at 0", "Insert SimpleType: AttributeService(124) into ClassInstanceCreation(129) at 0", "Move ClassInstanceCreation(175) into ClassInstanceCreation(129) at 1", "Insert FieldAccess(177) into Assignment: =(181) at 0", "Insert MethodInvocation(180) into Assignment: =(181) at 1", "Update SimpleName: File(297) to ReadWriteLock", "Move SimpleName: File(297) into SimpleType: ReadWriteLock(184) at 0", "Update SimpleName: file(315) to lock", "Insert FieldAccess(193) into Assignment: =(197) at 0", "Insert MethodInvocation(196) into Assignment: =(197) at 1", "Insert FieldAccess(201) into Assignment: =(205) at 0", "Insert MethodInvocation(204) into Assignment: =(205) at 1", "Update SimpleName: target(420) to tree", "Update SimpleName: attrs(421) to getRootDirectoryNames", "Insert SimpleName: tree(273) into MethodInvocation(278) at 0", "Insert SimpleName: lookup(274) into MethodInvocation(278) at 1", "Insert SimpleName: workingDirectory(275) into MethodInvocation(278) at 2", "Insert SimpleName: path(276) into MethodInvocation(278) at 3", "Update SimpleName: getSupportedViews(644) to options", "Move SimpleName: getSupportedViews(644) into MethodInvocation(278) at 4", "Update SimpleName: attributeProviders(671) to factory", "Move SimpleName: attributeProviders(671) into MethodInvocation(293) at 0", "Update SimpleName: getSupportedViewTypes(672) to regularFileSupplier", "Move SimpleName: getSupportedViewTypes(672) into MethodInvocation(293) at 1", "Update SimpleName: provider(714) to factory", "Move SimpleName: provider(714) into MethodInvocation(308) at 0", "Update SimpleName: setInitial(715) to directorySupplier", "Move SimpleName: setInitial(715) into MethodInvocation(308) at 1", "Update SimpleName: file(761) to factory", "Update SimpleName: view(762) to symbolicLinkSupplier", "Update SimpleName: attr(763) to target", "Insert SimpleName: copy(348) into VariableDeclarationFragment(353) at 0", "Insert MethodInvocation(352) into VariableDeclarationFragment(353) at 1", "Update SimpleName: attributeProviders(797) to setInitialAttributes", "Move SimpleName: attributeProviders(797) into MethodInvocation(357) at 0", "Update SimpleName: getProviders(798) to copy", "Move SimpleName: getProviders(798) into MethodInvocation(357) at 1", "Insert ExpressionStatement(365) into Block(366) at 0", "Insert SimpleName: attributes(387) into MethodInvocation(391) at 0", "Update SimpleName: setAttributeInternal(846) to setInitialAttributes", "Update SimpleName: attribute(848) to attrs", "Update SimpleName: setAttributeInternal(877) to attributes", "Update SimpleName: file(878) to copyBasicAttributes", "Update SimpleName: attribute(880) to file", "Update SimpleName: value(881) to copy", "Update SimpleName: attributeProviders(1121) to attributes", "Move SimpleName: attributeProviders(1121) into MethodInvocation(451) at 0", "Update SimpleName: getView(1125) to getFileAttributeView", "Insert SimpleName: type(450) into MethodInvocation(451) at 3", "Insert FieldAccess(476) into MethodInvocation(480) at 0", "Update SimpleName: attributes(1184) to readAttributes", "Move SimpleName: attributes(1184) into MethodInvocation(480) at 1", "Move SimpleName: file(1241) into MethodInvocation(480) at 2", "Update SimpleName: attributeProviders(1262) to attributes", "Move SimpleName: attributeProviders(1262) into MethodInvocation(480) at 3", "Update SimpleName: attributeProviders(1339) to attributes", "Move SimpleName: attributeProviders(1339) into MethodInvocation(512) at 0", "Update SimpleName: getSupportedAttributesTypes(1340) to readAttributes", "Move SimpleName: getSupportedAttributesTypes(1340) into MethodInvocation(512) at 1", "Update SimpleName: contains(1342) to file", "Move SimpleName: contains(1342) into MethodInvocation(512) at 2", "Move SimpleName: type(1343) into MethodInvocation(512) at 3", "Update SimpleName: attribute(1375) to attributes", "Move SimpleName: attribute(1375) into MethodInvocation(538) at 0", "Update SimpleName: attribute(1393) to setAttribute", "Move SimpleName: attribute(1393) into MethodInvocation(538) at 1", "Update SimpleName: attribute(1400) to file", "Move SimpleName: attribute(1400) into MethodInvocation(538) at 2", "Insert SimpleName: attribute(536) into MethodInvocation(538) at 3", "Update SimpleName: attribute(1420) to value", "Move SimpleName: attribute(1420) into MethodInvocation(538) at 4", "Update SimpleName: attributeNames(1523) to attributes", "Update SimpleName: get(1524) to supportedFileAttributeViews", "Insert SimpleName: attributes(637) into MethodInvocation(640) at 0", "Update SimpleName: createRegularFile(1675) to supportsFileAttributeView", "Update SimpleName: attrs(1676) to type", "Insert MethodInvocation(655) into MethodInvocation(658) at 0", "Update SimpleName: attrs(1726) to contains", "Insert SimpleName: name(657) into MethodInvocation(658) at 2", "Insert SimpleName: AttributeService(123) into SimpleType: AttributeService(124) at 0", "Update SimpleName: name(195) to tree", "Update SimpleName: name(198) to tree", "Update SimpleName: attributeProviders(211) to factory", "Update SimpleName: attributeProviders(214) to factory", "Insert ThisExpression(175) into FieldAccess(177) at 0", "Insert SimpleName: attributes(176) into FieldAccess(177) at 1", "Update SimpleName: idGenerator(290) to checkNotNull", "Move SimpleName: idGenerator(290) into MethodInvocation(180) at 0", "Update SimpleName: getAndIncrement(291) to attributes", "Move SimpleName: getAndIncrement(291) into MethodInvocation(180) at 1", "Insert SimpleType: ReentrantReadWriteLock(187) into ClassInstanceCreation(188) at 0", "Insert ThisExpression(191) into FieldAccess(193) at 0", "Insert SimpleName: readLock(192) into FieldAccess(193) at 1", "Update SimpleName: setInitialAttributes(323) to lock", "Move SimpleName: setInitialAttributes(323) into MethodInvocation(196) at 0", "Update SimpleName: file(324) to readLock", "Move SimpleName: file(324) into MethodInvocation(196) at 1", "Insert ThisExpression(199) into FieldAccess(201) at 0", "Insert SimpleName: writeLock(200) into FieldAccess(201) at 1", "Update SimpleName: attr(336) to lock", "Move SimpleName: attr(336) into MethodInvocation(204) at 0", "Update SimpleName: name(337) to writeLock", "Move SimpleName: name(337) into MethodInvocation(204) at 1", "Insert SimpleName: factory(349) into MethodInvocation(352) at 0", "Insert SimpleName: copy(350) into MethodInvocation(352) at 1", "Insert SimpleName: file(351) into MethodInvocation(352) at 2", "Insert MethodInvocation(364) into ExpressionStatement(365) at 0", "Insert ThisExpression(474) into FieldAccess(476) at 0", "Insert SimpleName: attributes(475) into FieldAccess(476) at 1", "Update SimpleName: createSymbolicLink(1724) to attributes", "Move SimpleName: createSymbolicLink(1724) into MethodInvocation(655) at 0", "Update SimpleName: target(1725) to supportedFileAttributeViews", "Move SimpleName: target(1725) into MethodInvocation(655) at 1", "Insert SimpleName: ReentrantReadWriteLock(186) into SimpleType: ReentrantReadWriteLock(187) at 0", "Update SimpleName: provider(808) to attributes", "Move SimpleName: provider(808) into MethodInvocation(364) at 0", "Update SimpleName: get(809) to copyAttributes", "Move SimpleName: get(809) into MethodInvocation(364) at 1", "Move SimpleName: file(810) into MethodInvocation(364) at 2", "Update SimpleName: attribute(811) to copy", "Move SimpleName: attribute(811) into MethodInvocation(364) at 3", "Delete QualifiedName: com.google.common.base.Splitter(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.google.jimfs.attribute.AttributeProvider(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: java.nio.file.FileSystem(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: java.nio.file.Files(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: java.nio.file.Path(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: java.util.HashMap(44)", "Delete ImportDeclaration(45)", "Delete Modifier: static(64)", "Delete StringLiteral: \"*\"(69)", "Delete SimpleName: AtomicLong(77)", "Delete SimpleType: AtomicLong(78)", "Delete ClassInstanceCreation(79)", "Delete Modifier: private(82)", "Delete Modifier: final(83)", "Delete SimpleName: String(84)", "Delete SimpleType: String(85)", "Delete SimpleName: name(86)", "Delete VariableDeclarationFragment(87)", "Delete FieldDeclaration(88)", "Delete TextElement: Directory supplier with no extra file attributes. (103)", "Delete TagElement(104)", "Delete Javadoc(105)", "Delete SimpleType: Supplier(109)", "Delete SimpleName: File(110)", "Delete SimpleType: File(111)", "Delete ParameterizedType: Supplier<File>(112)", "Delete SimpleName: DirectorySupplier(114)", "Delete SimpleType: DirectorySupplier(115)", "Delete ClassInstanceCreation(116)", "Delete TextElement: Regular file supplier with no extra file attributes. (119)", "Delete TagElement(120)", "Delete Javadoc(121)", "Delete SimpleType: Supplier(125)", "Delete SimpleName: File(126)", "Delete SimpleType: File(127)", "Delete ParameterizedType: Supplier<File>(128)", "Delete SimpleName: RegularFileSupplier(130)", "Delete SimpleType: RegularFileSupplier(131)", "Delete ClassInstanceCreation(132)", "Delete ThisExpression(152)", "Delete SimpleName: name(153)", "Delete FieldAccess(154)", "Delete SimpleName: checkNotNull(155)", "Delete SimpleName: name(156)", "Delete MethodInvocation(157)", "Delete Assignment: =(158)", "Delete ExpressionStatement(159)", "Delete ThisExpression(160)", "Delete SimpleName: storage(161)", "Delete FieldAccess(162)", "Delete Assignment: =(167)", "Delete ExpressionStatement(168)", "Delete ThisExpression(169)", "Delete SimpleName: attributeProviders(170)", "Delete FieldAccess(171)", "Delete Assignment: =(176)", "Delete ExpressionStatement(177)", "Delete Block(178)", "Delete SimpleName: id(318)", "Delete SimpleName: content(319)", "Delete MethodInvocation(325)", "Delete SimpleName: setAttributeInternal(334)", "Delete SimpleName: file(335)", "Delete MethodInvocation(338)", "Delete SimpleName: attr(339)", "Delete SimpleName: value(340)", "Delete MethodInvocation(341)", "Delete BooleanLiteral: true(342)", "Delete MethodInvocation(343)", "Delete Block(218)", "Delete MethodDeclaration(219)", "Delete Modifier: public(222)", "Delete SimpleName: name(225)", "Delete SimpleName: name(226)", "Delete ReturnStatement(227)", "Delete Block(228)", "Delete MethodDeclaration(229)", "Delete Modifier: private(287)", "Delete PrimitiveType: long(288)", "Delete SimpleName: nextFileId(289)", "Delete MethodInvocation(292)", "Delete ReturnStatement(293)", "Delete Block(294)", "Delete MethodDeclaration(295)", "Delete Modifier: private(296)", "Delete SimpleType: File(298)", "Delete SimpleName: createFile(299)", "Delete PrimitiveType: long(300)", "Delete SimpleName: id(301)", "Delete SingleVariableDeclaration(302)", "Delete SimpleName: FileContent(303)", "Delete SimpleType: FileContent(304)", "Delete SimpleName: content(305)", "Delete SingleVariableDeclaration(306)", "Delete SimpleName: FileAttribute(307)", "Delete SimpleType: FileAttribute(308)", "Delete WildcardType: ?(309)", "Delete ParameterizedType: FileAttribute<?>(310)", "Delete SimpleName: attrs(311)", "Delete SingleVariableDeclaration(312)", "Delete VariableDeclarationStatement(322)", "Delete SimpleName: FileAttribute(327)", "Delete SimpleType: FileAttribute(328)", "Delete WildcardType: ?(329)", "Delete ParameterizedType: FileAttribute<?>(330)", "Delete SimpleName: attr(331)", "Delete SingleVariableDeclaration(332)", "Delete SimpleName: attrs(333)", "Delete Block(345)", "Delete EnhancedForStatement(346)", "Delete SimpleName: file(347)", "Delete ReturnStatement(348)", "Delete Block(349)", "Delete MethodDeclaration(350)", "Delete Modifier: public(354)", "Delete SimpleName: FileAttribute(358)", "Delete SimpleType: FileAttribute(359)", "Delete WildcardType: ?(360)", "Delete ParameterizedType: FileAttribute<?>(361)", "Delete SimpleName: attrs(362)", "Delete SingleVariableDeclaration(363)", "Delete SimpleName: createFile(364)", "Delete SimpleName: nextFileId(365)", "Delete MethodInvocation(366)", "Delete SimpleName: DirectoryTable(367)", "Delete SimpleType: DirectoryTable(368)", "Delete ClassInstanceCreation(369)", "Delete SimpleName: attrs(370)", "Delete MethodInvocation(371)", "Delete Modifier: public(378)", "Delete SimpleName: createFile(388)", "Delete SimpleName: nextFileId(389)", "Delete MethodInvocation(390)", "Delete SimpleName: storage(391)", "Delete SimpleName: createByteStore(392)", "Delete MethodInvocation(393)", "Delete SimpleName: attrs(394)", "Delete MethodInvocation(395)", "Delete TextElement: the new file.(400)", "Delete Modifier: public(403)", "Delete SimpleType: File(405)", "Delete SimpleName: createSymbolicLink(406)", "Delete WildcardType: ?(413)", "Delete ParameterizedType: FileAttribute<?>(414)", "Delete SimpleName: attrs(415)", "Delete SingleVariableDeclaration(416)", "Delete SimpleName: createFile(417)", "Delete SimpleName: nextFileId(418)", "Delete MethodInvocation(419)", "Delete SimpleName: FileAttribute(581)", "Delete SimpleType: FileAttribute(582)", "Delete WildcardType: ?(583)", "Delete ParameterizedType: FileAttribute<?>(584)", "Delete SimpleName: attrs(585)", "Delete SimpleName: JimfsPath(610)", "Delete SimpleType: JimfsPath(611)", "Delete SimpleName: target(612)", "Delete SimpleType: FileAttribute(615)", "Delete WildcardType: ?(616)", "Delete ParameterizedType: FileAttribute<?>(617)", "Delete Javadoc(429)", "Delete Modifier: public(430)", "Delete SimpleName: copy(433)", "Delete SimpleName: File(441)", "Delete SimpleType: File(442)", "Delete SimpleName: copy(443)", "Delete SimpleName: createFile(444)", "Delete SimpleName: nextFileId(445)", "Delete MethodInvocation(446)", "Delete SimpleName: file(447)", "Delete SimpleName: content(448)", "Delete MethodInvocation(449)", "Delete SimpleName: copy(450)", "Delete MethodInvocation(451)", "Delete MethodInvocation(452)", "Delete VariableDeclarationFragment(453)", "Delete VariableDeclarationStatement(454)", "Delete SimpleName: copyAttributes(455)", "Delete SimpleName: copyAttributes(456)", "Delete SimpleName: file(457)", "Delete SimpleName: copy(458)", "Delete MethodInvocation(459)", "Delete ExpressionStatement(460)", "Delete Block(461)", "Delete IfStatement(462)", "Delete Block(465)", "Delete MethodDeclaration(466)", "Delete TagElement(468)", "Delete Javadoc(469)", "Delete Modifier: public(470)", "Delete PrimitiveType: void(471)", "Delete SimpleName: copyBasicAttributes(472)", "Delete SimpleName: File(473)", "Delete SimpleType: File(474)", "Delete SimpleName: file(475)", "Delete SingleVariableDeclaration(476)", "Delete SimpleName: copy(481)", "Delete SimpleName: setCreationTime(482)", "Delete SimpleName: file(483)", "Delete SimpleName: getCreationTime(484)", "Delete MethodInvocation(485)", "Delete MethodInvocation(486)", "Delete ExpressionStatement(487)", "Delete SimpleName: copy(488)", "Delete SimpleName: setLastAccessTime(489)", "Delete SimpleName: file(490)", "Delete SimpleName: getLastAccessTime(491)", "Delete MethodInvocation(492)", "Delete MethodInvocation(493)", "Delete ExpressionStatement(494)", "Delete SimpleName: copy(495)", "Delete SimpleName: setLastModifiedTime(496)", "Delete SimpleName: file(497)", "Delete SimpleName: getLastModifiedTime(498)", "Delete MethodInvocation(499)", "Delete MethodInvocation(500)", "Delete ExpressionStatement(501)", "Delete Block(502)", "Delete MethodDeclaration(503)", "Delete TagElement(505)", "Delete Javadoc(506)", "Delete Modifier: private(507)", "Delete PrimitiveType: void(508)", "Delete SimpleName: copyAttributes(509)", "Delete SimpleName: File(510)", "Delete SimpleType: File(511)", "Delete SimpleName: file(512)", "Delete SingleVariableDeclaration(513)", "Delete SimpleName: File(514)", "Delete SimpleType: File(515)", "Delete SimpleName: copy(516)", "Delete SingleVariableDeclaration(517)", "Delete SimpleName: copyBasicAttributes(518)", "Delete SimpleName: file(519)", "Delete SimpleName: copy(520)", "Delete MethodInvocation(521)", "Delete ExpressionStatement(522)", "Delete SimpleName: String(523)", "Delete SimpleType: String(524)", "Delete SimpleName: attribute(525)", "Delete SingleVariableDeclaration(526)", "Delete SimpleName: file(527)", "Delete SimpleName: getAttributeKeys(528)", "Delete MethodInvocation(529)", "Delete SimpleName: copy(530)", "Delete SimpleName: setAttribute(531)", "Delete SimpleName: attribute(532)", "Delete SimpleName: file(533)", "Delete SimpleName: getAttribute(534)", "Delete SimpleName: attribute(535)", "Delete MethodInvocation(536)", "Delete MethodInvocation(537)", "Delete ExpressionStatement(538)", "Delete Block(539)", "Delete EnhancedForStatement(540)", "Delete Block(541)", "Delete MethodDeclaration(542)", "Delete TagElement(544)", "Delete Javadoc(545)", "Delete Modifier: public(546)", "Delete SimpleName: directorySupplier(552)", "Delete SimpleName: FileAttribute(553)", "Delete SimpleType: FileAttribute(554)", "Delete WildcardType: ?(555)", "Delete ParameterizedType: FileAttribute<?>(556)", "Delete SimpleName: attrs(557)", "Delete SingleVariableDeclaration(558)", "Delete QualifiedName: attrs.length(559)", "Delete NumberLiteral: 0(560)", "Delete InfixExpression: ==(561)", "Delete SimpleName: defaultDirectorySupplier(562)", "Delete SimpleType: DirectorySupplier(564)", "Delete SimpleName: attrs(565)", "Delete ClassInstanceCreation(566)", "Delete ConditionalExpression(567)", "Delete ReturnStatement(568)", "Delete Block(569)", "Delete MethodDeclaration(570)", "Delete TextElement: Returns a supplier that creates a regular files and sets the given attributes.(571)", "Delete TagElement(572)", "Delete Javadoc(573)", "Delete Modifier: public(574)", "Delete SimpleName: regularFileSupplier(580)", "Delete QualifiedName: attrs.length(587)", "Delete NumberLiteral: 0(588)", "Delete InfixExpression: ==(589)", "Delete SimpleName: defaultRegularFileSupplier(590)", "Delete SimpleName: RegularFileSupplier(591)", "Delete SimpleType: RegularFileSupplier(592)", "Delete SimpleName: attrs(593)", "Delete ClassInstanceCreation(594)", "Delete ConditionalExpression(595)", "Delete ReturnStatement(596)", "Delete Block(597)", "Delete MethodDeclaration(598)", "Delete TextElement: Returns a supplier that creates a symbolic links to the given path and sets the given(599)", "Delete TextElement: attributes.(600)", "Delete TagElement(601)", "Delete Javadoc(602)", "Delete Modifier: public(603)", "Delete SimpleName: symbolicLinkSupplier(609)", "Delete SimpleType: SymbolicLinkSupplier(621)", "Delete SimpleName: target(622)", "Delete SimpleName: attrs(623)", "Delete ClassInstanceCreation(624)", "Delete ReturnStatement(625)", "Delete Block(626)", "Delete MethodDeclaration(627)", "Delete TextElement: Implements (628)", "Delete SimpleName: FileSystem(629)", "Delete SimpleName: supportedFileAttributeViews(630)", "Delete MethodRef(631)", "Delete TagElement: @link(632)", "Delete TextElement: .(633)", "Delete TagElement(634)", "Delete Javadoc(635)", "Delete Modifier: public(636)", "Delete SimpleName: supportedFileAttributeViews(642)", "Delete SimpleName: attributeProviders(643)", "Delete MethodInvocation(645)", "Delete ReturnStatement(646)", "Delete Block(647)", "Delete MethodDeclaration(648)", "Delete TextElement: Implements (649)", "Delete SimpleName: FileStore(650)", "Delete SimpleName: supportsFileAttributeView(651)", "Delete SimpleName: Class(652)", "Delete SimpleType: Class(653)", "Delete MethodRefParameter(654)", "Delete MethodRef(655)", "Delete TagElement: @link(656)", "Delete Modifier: public(660)", "Delete PrimitiveType: boolean(661)", "Delete MethodInvocation(673)", "Delete SimpleName: contains(674)", "Delete SimpleName: type(675)", "Delete MethodInvocation(676)", "Delete Modifier: public(682)", "Delete PrimitiveType: boolean(683)", "Delete SimpleName: supportsFileAttributeView(684)", "Delete SimpleName: supportedFileAttributeViews(689)", "Delete MethodInvocation(690)", "Delete SimpleName: contains(691)", "Delete SimpleName: name(692)", "Delete MethodInvocation(693)", "Delete ReturnStatement(694)", "Delete Block(695)", "Delete MethodDeclaration(696)", "Delete Modifier: private(700)", "Delete PrimitiveType: void(701)", "Delete SimpleName: File(703)", "Delete SimpleType: File(704)", "Delete SimpleName: file(705)", "Delete SingleVariableDeclaration(706)", "Delete SimpleName: AttributeProvider(707)", "Delete SimpleType: AttributeProvider(708)", "Delete SimpleName: provider(709)", "Delete SingleVariableDeclaration(710)", "Delete SimpleName: attributeProviders(711)", "Delete SimpleName: getProviders(712)", "Delete MethodInvocation(713)", "Delete SimpleName: file(716)", "Delete MethodInvocation(717)", "Delete ExpressionStatement(718)", "Delete Block(719)", "Delete EnhancedForStatement(720)", "Delete Block(721)", "Delete TextElement:  attribute(724)", "Delete TagElement: @code(725)", "Delete TextElement:  must be of the form(726)", "Delete TextElement: \"view:attribute\" or \"attribute\".(727)", "Delete Modifier: public(730)", "Delete SimpleName: V(731)", "Delete TypeParameter(732)", "Delete SimpleName: V(733)", "Delete SimpleType: V(734)", "Delete SimpleName: getAttribute(735)", "Delete SimpleName: File(736)", "Delete SimpleType: File(737)", "Delete SimpleName: file(738)", "Delete SingleVariableDeclaration(739)", "Delete SimpleName: String(740)", "Delete SimpleType: String(741)", "Delete SimpleName: attribute(742)", "Delete SingleVariableDeclaration(743)", "Delete SimpleName: String(744)", "Delete SimpleType: String(745)", "Delete SimpleName: view(746)", "Delete SimpleName: getViewName(747)", "Delete SimpleName: attribute(748)", "Delete MethodInvocation(749)", "Delete VariableDeclarationFragment(750)", "Delete VariableDeclarationStatement(751)", "Delete SimpleName: String(752)", "Delete SimpleType: String(753)", "Delete SimpleName: attr(754)", "Delete SimpleName: getSingleAttribute(755)", "Delete SimpleName: attribute(756)", "Delete MethodInvocation(757)", "Delete VariableDeclarationFragment(758)", "Delete VariableDeclarationStatement(759)", "Delete SimpleName: getAttribute(760)", "Delete SimpleName: provider(801)", "Delete SimpleName: isGettable(802)", "Delete SimpleName: file(803)", "Delete SimpleName: attribute(804)", "Delete MethodInvocation(805)", "Delete SimpleName: V(806)", "Delete SimpleType: V(807)", "Delete MethodInvocation(812)", "Delete CastExpression(813)", "Delete ReturnStatement(814)", "Delete SimpleName: SuppressWarnings(772)", "Delete StringLiteral: \"unchecked\"(773)", "Delete SingleMemberAnnotation(774)", "Delete Modifier: public(775)", "Delete SimpleName: V(776)", "Delete TypeParameter(777)", "Delete SimpleName: V(778)", "Delete SimpleType: V(779)", "Delete SimpleName: getAttribute(780)", "Delete SimpleName: File(781)", "Delete SimpleType: File(782)", "Delete SimpleName: file(783)", "Delete SingleVariableDeclaration(784)", "Delete SimpleName: String(785)", "Delete SimpleType: String(786)", "Delete SimpleName: view(787)", "Delete SingleVariableDeclaration(788)", "Delete SimpleName: String(789)", "Delete SimpleType: String(790)", "Delete SimpleName: attribute(791)", "Delete SingleVariableDeclaration(792)", "Delete SimpleName: AttributeProvider(793)", "Delete SimpleType: AttributeProvider(794)", "Delete SimpleName: provider(795)", "Delete SingleVariableDeclaration(796)", "Delete SimpleName: view(799)", "Delete MethodInvocation(800)", "Delete Block(817)", "Delete EnhancedForStatement(818)", "Delete SimpleName: IllegalArgumentException(819)", "Delete SimpleType: IllegalArgumentException(820)", "Delete StringLiteral: \"attribute not found: \"(821)", "Delete SimpleName: attribute(822)", "Delete InfixExpression: +(823)", "Delete ClassInstanceCreation(824)", "Delete ThrowStatement(825)", "Delete Block(826)", "Delete Modifier: public(831)", "Delete SimpleName: File(834)", "Delete SimpleType: File(835)", "Delete SimpleName: file(836)", "Delete SingleVariableDeclaration(837)", "Delete SimpleName: String(838)", "Delete SimpleType: String(839)", "Delete SimpleName: attribute(840)", "Delete SingleVariableDeclaration(841)", "Delete SimpleName: Object(842)", "Delete SimpleType: Object(843)", "Delete SimpleName: value(844)", "Delete SingleVariableDeclaration(845)", "Delete SimpleName: value(849)", "Delete BooleanLiteral: false(850)", "Delete Modifier: public(858)", "Delete SimpleName: String(865)", "Delete SimpleType: String(866)", "Delete SimpleName: view(867)", "Delete SingleVariableDeclaration(868)", "Delete SimpleName: String(869)", "Delete SimpleType: String(870)", "Delete SimpleName: attribute(871)", "Delete SingleVariableDeclaration(872)", "Delete SimpleName: Object(873)", "Delete SimpleType: Object(874)", "Delete SimpleName: value(875)", "Delete SingleVariableDeclaration(876)", "Delete SimpleName: view(879)", "Delete BooleanLiteral: false(882)", "Delete Modifier: private(887)", "Delete PrimitiveType: void(888)", "Delete SimpleName: setAttributeInternal(889)", "Delete PrimitiveType: boolean(902)", "Delete SimpleName: create(903)", "Delete SingleVariableDeclaration(904)", "Delete SimpleName: String(905)", "Delete SimpleType: String(906)", "Delete SimpleName: view(907)", "Delete SimpleName: getViewName(908)", "Delete SimpleName: attribute(909)", "Delete MethodInvocation(910)", "Delete VariableDeclarationFragment(911)", "Delete VariableDeclarationStatement(912)", "Delete SimpleName: String(913)", "Delete SimpleType: String(914)", "Delete SimpleName: attr(915)", "Delete SimpleName: getSingleAttribute(916)", "Delete SimpleName: attribute(917)", "Delete MethodInvocation(918)", "Delete VariableDeclarationFragment(919)", "Delete VariableDeclarationStatement(920)", "Delete SimpleName: setAttributeInternal(921)", "Delete SimpleName: file(922)", "Delete SimpleName: view(923)", "Delete SimpleName: attr(924)", "Delete SimpleName: value(925)", "Delete SimpleName: create(926)", "Delete MethodInvocation(927)", "Delete ExpressionStatement(928)", "Delete Block(929)", "Delete MethodDeclaration(930)", "Delete Modifier: private(931)", "Delete PrimitiveType: void(932)", "Delete SimpleName: setAttributeInternal(933)", "Delete SimpleName: String(938)", "Delete SimpleType: String(939)", "Delete SimpleName: view(940)", "Delete SingleVariableDeclaration(941)", "Delete SimpleName: String(942)", "Delete SimpleType: String(943)", "Delete SimpleName: attribute(944)", "Delete SingleVariableDeclaration(945)", "Delete SimpleName: Object(946)", "Delete SimpleType: Object(947)", "Delete SimpleName: value(948)", "Delete SingleVariableDeclaration(949)", "Delete PrimitiveType: boolean(950)", "Delete SimpleName: create(951)", "Delete SingleVariableDeclaration(952)", "Delete SimpleName: AttributeProvider(953)", "Delete SimpleType: AttributeProvider(954)", "Delete SimpleName: provider(955)", "Delete SingleVariableDeclaration(956)", "Delete SimpleName: attributeProviders(957)", "Delete SimpleName: getProviders(958)", "Delete SimpleName: view(959)", "Delete MethodInvocation(960)", "Delete SimpleName: provider(961)", "Delete SimpleName: isSettable(962)", "Delete SimpleName: file(963)", "Delete SimpleName: attribute(964)", "Delete MethodInvocation(965)", "Delete SimpleName: create(966)", "Delete SimpleName: provider(967)", "Delete SimpleName: isSettableOnCreate(968)", "Delete SimpleName: attribute(969)", "Delete MethodInvocation(970)", "Delete PrefixExpression: !(971)", "Delete InfixExpression: &&(972)", "Delete SimpleName: UnsupportedOperationException(973)", "Delete SimpleType: UnsupportedOperationException(974)", "Delete StringLiteral: \"cannot set attribute '\"(975)", "Delete SimpleName: view(976)", "Delete StringLiteral: \":\"(977)", "Delete SimpleName: attribute(978)", "Delete StringLiteral: \"' during file creation\"(979)", "Delete InfixExpression: +(980)", "Delete ClassInstanceCreation(981)", "Delete ThrowStatement(982)", "Delete Block(983)", "Delete IfStatement(984)", "Delete SimpleName: ImmutableSet(985)", "Delete SimpleType: ImmutableSet(986)", "Delete SimpleName: Class(987)", "Delete SimpleType: Class(988)", "Delete WildcardType: ?(989)", "Delete ParameterizedType: Class<?>(990)", "Delete ParameterizedType: ImmutableSet<Class<?>>(991)", "Delete SimpleName: acceptedTypes(992)", "Delete SimpleName: provider(993)", "Delete SimpleName: acceptedTypes(994)", "Delete SimpleName: attribute(995)", "Delete MethodInvocation(996)", "Delete VariableDeclarationFragment(997)", "Delete VariableDeclarationStatement(998)", "Delete PrimitiveType: boolean(999)", "Delete SimpleName: validType(1000)", "Delete BooleanLiteral: false(1001)", "Delete VariableDeclarationFragment(1002)", "Delete VariableDeclarationStatement(1003)", "Delete SimpleName: Class(1004)", "Delete SimpleType: Class(1005)", "Delete WildcardType: ?(1006)", "Delete ParameterizedType: Class<?>(1007)", "Delete SimpleName: type(1008)", "Delete SingleVariableDeclaration(1009)", "Delete SimpleName: acceptedTypes(1010)", "Delete SimpleName: type(1011)", "Delete SimpleName: isInstance(1012)", "Delete SimpleName: value(1013)", "Delete MethodInvocation(1014)", "Delete SimpleName: validType(1015)", "Delete BooleanLiteral: true(1016)", "Delete Assignment: =(1017)", "Delete ExpressionStatement(1018)", "Delete BreakStatement(1019)", "Delete Block(1020)", "Delete IfStatement(1021)", "Delete Block(1022)", "Delete EnhancedForStatement(1023)", "Delete SimpleName: validType(1024)", "Delete SimpleName: provider(1025)", "Delete SimpleName: set(1026)", "Delete SimpleName: file(1027)", "Delete SimpleName: attribute(1028)", "Delete SimpleName: value(1029)", "Delete MethodInvocation(1030)", "Delete ExpressionStatement(1031)", "Delete ReturnStatement(1032)", "Delete Block(1033)", "Delete SimpleName: Object(1034)", "Delete SimpleType: Object(1035)", "Delete SimpleName: acceptedTypeMessage(1036)", "Delete SimpleName: acceptedTypes(1037)", "Delete SimpleName: size(1038)", "Delete MethodInvocation(1039)", "Delete NumberLiteral: 1(1040)", "Delete InfixExpression: ==(1041)", "Delete SimpleName: acceptedTypes(1042)", "Delete SimpleName: iterator(1043)", "Delete MethodInvocation(1044)", "Delete SimpleName: next(1045)", "Delete MethodInvocation(1046)", "Delete StringLiteral: \"one of \"(1047)", "Delete SimpleName: acceptedTypes(1048)", "Delete InfixExpression: +(1049)", "Delete ConditionalExpression(1050)", "Delete VariableDeclarationFragment(1051)", "Delete VariableDeclarationStatement(1052)", "Delete SimpleName: IllegalArgumentException(1053)", "Delete SimpleType: IllegalArgumentException(1054)", "Delete StringLiteral: \"invalid type \"(1055)", "Delete SimpleName: value(1056)", "Delete SimpleName: getClass(1057)", "Delete MethodInvocation(1058)", "Delete StringLiteral: \" for attribute '\"(1059)", "Delete SimpleName: view(1060)", "Delete StringLiteral: \":\"(1061)", "Delete SimpleName: attribute(1062)", "Delete StringLiteral: \"': should be \"(1063)", "Delete SimpleName: acceptedTypeMessage(1064)", "Delete InfixExpression: +(1065)", "Delete ClassInstanceCreation(1066)", "Delete ThrowStatement(1067)", "Delete Block(1068)", "Delete IfStatement(1069)", "Delete Block(1070)", "Delete IfStatement(1071)", "Delete Block(1072)", "Delete EnhancedForStatement(1073)", "Delete SimpleName: IllegalArgumentException(1074)", "Delete SimpleType: IllegalArgumentException(1075)", "Delete StringLiteral: \"cannot set attribute '\"(1076)", "Delete SimpleName: view(1077)", "Delete StringLiteral: \":\"(1078)", "Delete SimpleName: attribute(1079)", "Delete StringLiteral: \"'\"(1080)", "Delete InfixExpression: +(1081)", "Delete ClassInstanceCreation(1082)", "Delete ThrowStatement(1083)", "Delete Block(1084)", "Delete MethodDeclaration(1085)", "Delete Modifier: public(1095)", "Delete SimpleName: getViewProvider(1122)", "Delete SimpleName: type(1123)", "Delete MethodInvocation(1124)", "Delete SimpleName: supportsFileAttributeView(1118)", "Delete SimpleName: type(1119)", "Delete MethodInvocation(1120)", "Delete Block(1129)", "Delete IfStatement(1130)", "Delete NullLiteral(1131)", "Delete ReturnStatement(1132)", "Delete Block(1133)", "Delete TextElement: Implements (1135)", "Delete SimpleName: Files(1136)", "Delete SimpleName: readAttributes(1137)", "Delete SimpleName: Path(1138)", "Delete SimpleType: Path(1139)", "Delete MethodRefParameter(1140)", "Delete SimpleName: String(1141)", "Delete SimpleType: String(1142)", "Delete MethodRefParameter(1143)", "Delete SimpleName: LinkOption(1144)", "Delete SimpleType: LinkOption(1145)", "Delete MethodRefParameter(1146)", "Delete MethodRef(1147)", "Delete TagElement: @link(1148)", "Delete Modifier: public(1152)", "Delete SimpleName: String(1169)", "Delete SimpleType: String(1170)", "Delete SimpleName: view(1171)", "Delete SimpleName: getViewName(1172)", "Delete SimpleName: attributes(1173)", "Delete MethodInvocation(1174)", "Delete VariableDeclarationFragment(1175)", "Delete VariableDeclarationStatement(1176)", "Delete SimpleName: List(1177)", "Delete SimpleType: List(1178)", "Delete SimpleName: String(1179)", "Delete SimpleType: String(1180)", "Delete ParameterizedType: List<String>(1181)", "Delete SimpleName: attrs(1182)", "Delete SimpleName: getAttributeNames(1183)", "Delete MethodInvocation(1185)", "Delete VariableDeclarationFragment(1186)", "Delete VariableDeclarationStatement(1187)", "Delete SimpleName: attrs(1188)", "Delete SimpleName: size(1189)", "Delete MethodInvocation(1190)", "Delete NumberLiteral: 1(1191)", "Delete InfixExpression: >(1192)", "Delete SimpleName: attrs(1193)", "Delete SimpleName: contains(1194)", "Delete SimpleName: ALL_ATTRIBUTES(1195)", "Delete MethodInvocation(1196)", "Delete InfixExpression: &&(1197)", "Delete SimpleName: IllegalArgumentException(1198)", "Delete SimpleType: IllegalArgumentException(1199)", "Delete StringLiteral: \"invalid attributes: \"(1200)", "Delete SimpleName: attributes(1201)", "Delete InfixExpression: +(1202)", "Delete ClassInstanceCreation(1203)", "Delete ThrowStatement(1204)", "Delete Block(1205)", "Delete IfStatement(1206)", "Delete SimpleName: Map(1207)", "Delete SimpleType: Map(1208)", "Delete SimpleName: String(1209)", "Delete SimpleType: String(1210)", "Delete SimpleName: Object(1211)", "Delete SimpleType: Object(1212)", "Delete ParameterizedType: Map<String,Object>(1213)", "Delete SimpleName: result(1214)", "Delete SimpleName: HashMap(1215)", "Delete SimpleType: HashMap(1216)", "Delete ParameterizedType: HashMap<>(1217)", "Delete ClassInstanceCreation(1218)", "Delete VariableDeclarationFragment(1219)", "Delete VariableDeclarationStatement(1220)", "Delete SimpleName: attrs(1221)", "Delete SimpleName: size(1222)", "Delete MethodInvocation(1223)", "Delete NumberLiteral: 1(1224)", "Delete InfixExpression: ==(1225)", "Delete SimpleName: attrs(1226)", "Delete SimpleName: contains(1227)", "Delete SimpleName: ALL_ATTRIBUTES(1228)", "Delete MethodInvocation(1229)", "Delete InfixExpression: &&(1230)", "Delete SimpleName: AttributeProvider(1231)", "Delete SimpleType: AttributeProvider(1232)", "Delete SimpleName: provider(1233)", "Delete SingleVariableDeclaration(1234)", "Delete SimpleName: attributeProviders(1235)", "Delete SimpleName: getProviders(1236)", "Delete SimpleName: view(1237)", "Delete MethodInvocation(1238)", "Delete SimpleName: provider(1239)", "Delete SimpleName: readAll(1240)", "Delete SimpleName: result(1242)", "Delete MethodInvocation(1243)", "Delete ExpressionStatement(1244)", "Delete Block(1245)", "Delete EnhancedForStatement(1246)", "Delete Block(1247)", "Delete SimpleName: String(1248)", "Delete SimpleType: String(1249)", "Delete SimpleName: attr(1250)", "Delete SingleVariableDeclaration(1251)", "Delete SimpleName: attrs(1252)", "Delete PrimitiveType: boolean(1253)", "Delete SimpleName: found(1254)", "Delete BooleanLiteral: false(1255)", "Delete VariableDeclarationFragment(1256)", "Delete VariableDeclarationStatement(1257)", "Delete SimpleName: AttributeProvider(1258)", "Delete SimpleType: AttributeProvider(1259)", "Delete SimpleName: provider(1260)", "Delete SingleVariableDeclaration(1261)", "Delete SimpleName: getProviders(1263)", "Delete SimpleName: view(1264)", "Delete MethodInvocation(1265)", "Delete SimpleName: provider(1266)", "Delete SimpleName: isGettable(1267)", "Delete SimpleName: file(1268)", "Delete SimpleName: attr(1269)", "Delete MethodInvocation(1270)", "Delete SimpleName: result(1271)", "Delete SimpleName: put(1272)", "Delete SimpleName: attr(1273)", "Delete SimpleName: provider(1274)", "Delete SimpleName: get(1275)", "Delete SimpleName: file(1276)", "Delete SimpleName: attr(1277)", "Delete MethodInvocation(1278)", "Delete MethodInvocation(1279)", "Delete ExpressionStatement(1280)", "Delete SimpleName: found(1281)", "Delete BooleanLiteral: true(1282)", "Delete Assignment: =(1283)", "Delete ExpressionStatement(1284)", "Delete BreakStatement(1285)", "Delete Block(1286)", "Delete IfStatement(1287)", "Delete Block(1288)", "Delete EnhancedForStatement(1289)", "Delete SimpleName: found(1290)", "Delete PrefixExpression: !(1291)", "Delete SimpleName: IllegalArgumentException(1292)", "Delete SimpleType: IllegalArgumentException(1293)", "Delete StringLiteral: \"invalid attribute for view '\"(1294)", "Delete SimpleName: view(1295)", "Delete StringLiteral: \"': \"(1296)", "Delete SimpleName: attr(1297)", "Delete InfixExpression: +(1298)", "Delete ClassInstanceCreation(1299)", "Delete ThrowStatement(1300)", "Delete Block(1301)", "Delete IfStatement(1302)", "Delete Block(1303)", "Delete EnhancedForStatement(1304)", "Delete Block(1305)", "Delete IfStatement(1306)", "Delete SimpleName: ImmutableMap(1307)", "Delete SimpleName: copyOf(1308)", "Delete SimpleName: result(1309)", "Delete MethodInvocation(1310)", "Delete ReturnStatement(1311)", "Delete Modifier: public(1320)", "Delete MethodInvocation(1341)", "Delete MethodInvocation(1344)", "Delete SimpleName: attributeProviders(1345)", "Delete SimpleName: getReader(1346)", "Delete SimpleName: type(1347)", "Delete MethodInvocation(1348)", "Delete SimpleName: read(1349)", "Delete SimpleName: file(1350)", "Delete MethodInvocation(1351)", "Delete ReturnStatement(1352)", "Delete Block(1353)", "Delete IfStatement(1354)", "Delete SimpleName: UnsupportedOperationException(1355)", "Delete SimpleType: UnsupportedOperationException(1356)", "Delete StringLiteral: \"unsupported attributes type: \"(1357)", "Delete SimpleName: type(1358)", "Delete InfixExpression: +(1359)", "Delete ClassInstanceCreation(1360)", "Delete ThrowStatement(1361)", "Delete Modifier: private(1364)", "Delete Modifier: static(1365)", "Delete SimpleName: String(1366)", "Delete SimpleType: String(1367)", "Delete SimpleName: getViewName(1368)", "Delete SimpleName: String(1369)", "Delete SimpleType: String(1370)", "Delete SimpleName: attribute(1371)", "Delete SingleVariableDeclaration(1372)", "Delete PrimitiveType: int(1373)", "Delete SimpleName: separatorIndex(1374)", "Delete SimpleName: indexOf(1376)", "Delete CharacterLiteral: ':'(1377)", "Delete MethodInvocation(1378)", "Delete VariableDeclarationFragment(1379)", "Delete VariableDeclarationStatement(1380)", "Delete SimpleName: separatorIndex(1381)", "Delete NumberLiteral: 1(1382)", "Delete PrefixExpression: -(1383)", "Delete InfixExpression: ==(1384)", "Delete StringLiteral: \"basic\"(1385)", "Delete ReturnStatement(1386)", "Delete Block(1387)", "Delete IfStatement(1388)", "Delete SimpleName: separatorIndex(1389)", "Delete NumberLiteral: 0(1390)", "Delete InfixExpression: ==(1391)", "Delete SimpleName: separatorIndex(1392)", "Delete SimpleName: length(1394)", "Delete MethodInvocation(1395)", "Delete NumberLiteral: 1(1396)", "Delete InfixExpression: -(1397)", "Delete InfixExpression: ==(1398)", "Delete InfixExpression: ||(1399)", "Delete SimpleName: indexOf(1401)", "Delete CharacterLiteral: ':'(1402)", "Delete SimpleName: separatorIndex(1403)", "Delete NumberLiteral: 1(1404)", "Delete InfixExpression: +(1405)", "Delete MethodInvocation(1406)", "Delete NumberLiteral: 1(1407)", "Delete PrefixExpression: -(1408)", "Delete InfixExpression: !=(1409)", "Delete InfixExpression: ||(1410)", "Delete SimpleName: IllegalArgumentException(1411)", "Delete SimpleType: IllegalArgumentException(1412)", "Delete StringLiteral: \"illegal attribute format: \"(1413)", "Delete SimpleName: attribute(1414)", "Delete InfixExpression: +(1415)", "Delete ClassInstanceCreation(1416)", "Delete ThrowStatement(1417)", "Delete Block(1418)", "Delete IfStatement(1419)", "Delete SimpleName: substring(1421)", "Delete NumberLiteral: 0(1422)", "Delete SimpleName: separatorIndex(1423)", "Delete MethodInvocation(1424)", "Delete ReturnStatement(1425)", "Delete Modifier: private(1428)", "Delete Modifier: static(1429)", "Delete Modifier: final(1430)", "Delete SimpleName: Splitter(1431)", "Delete SimpleType: Splitter(1432)", "Delete SimpleName: ATTRIBUTE_SPLITTER(1433)", "Delete SimpleName: Splitter(1434)", "Delete SimpleName: on(1435)", "Delete CharacterLiteral: ','(1436)", "Delete MethodInvocation(1437)", "Delete VariableDeclarationFragment(1438)", "Delete FieldDeclaration(1439)", "Delete Modifier: private(1440)", "Delete Modifier: static(1441)", "Delete SimpleName: ImmutableList(1442)", "Delete SimpleType: ImmutableList(1443)", "Delete SimpleName: String(1444)", "Delete SimpleType: String(1445)", "Delete ParameterizedType: ImmutableList<String>(1446)", "Delete SimpleName: getAttributeNames(1447)", "Delete SimpleName: String(1448)", "Delete SimpleType: String(1449)", "Delete SimpleName: attributes(1450)", "Delete SingleVariableDeclaration(1451)", "Delete PrimitiveType: int(1452)", "Delete SimpleName: separatorIndex(1453)", "Delete SimpleName: attributes(1454)", "Delete SimpleName: indexOf(1455)", "Delete CharacterLiteral: ':'(1456)", "Delete MethodInvocation(1457)", "Delete VariableDeclarationFragment(1458)", "Delete VariableDeclarationStatement(1459)", "Delete SimpleName: String(1460)", "Delete SimpleType: String(1461)", "Delete SimpleName: attributesPart(1462)", "Delete SimpleName: attributes(1463)", "Delete SimpleName: substring(1464)", "Delete SimpleName: separatorIndex(1465)", "Delete NumberLiteral: 1(1466)", "Delete InfixExpression: +(1467)", "Delete MethodInvocation(1468)", "Delete VariableDeclarationFragment(1469)", "Delete VariableDeclarationStatement(1470)", "Delete SimpleName: ImmutableList(1471)", "Delete SimpleName: copyOf(1472)", "Delete SimpleName: ATTRIBUTE_SPLITTER(1473)", "Delete SimpleName: split(1474)", "Delete SimpleName: attributesPart(1475)", "Delete MethodInvocation(1476)", "Delete MethodInvocation(1477)", "Delete ReturnStatement(1478)", "Delete Block(1479)", "Delete MethodDeclaration(1480)", "Delete Modifier: private(1481)", "Delete Modifier: static(1482)", "Delete SimpleName: String(1483)", "Delete SimpleType: String(1484)", "Delete SimpleName: String(1486)", "Delete SimpleType: String(1487)", "Delete SimpleName: attribute(1488)", "Delete SingleVariableDeclaration(1489)", "Delete SimpleName: ImmutableList(1490)", "Delete SimpleType: ImmutableList(1491)", "Delete SimpleName: String(1492)", "Delete SimpleType: String(1493)", "Delete ParameterizedType: ImmutableList<String>(1494)", "Delete SimpleName: attributeNames(1495)", "Delete SimpleName: getAttributeNames(1496)", "Delete SimpleName: attribute(1497)", "Delete MethodInvocation(1498)", "Delete VariableDeclarationFragment(1499)", "Delete VariableDeclarationStatement(1500)", "Delete SimpleName: attributeNames(1501)", "Delete SimpleName: size(1502)", "Delete MethodInvocation(1503)", "Delete NumberLiteral: 1(1504)", "Delete InfixExpression: !=(1505)", "Delete SimpleName: ALL_ATTRIBUTES(1506)", "Delete SimpleName: equals(1507)", "Delete SimpleName: attributeNames(1508)", "Delete SimpleName: get(1509)", "Delete NumberLiteral: 0(1510)", "Delete MethodInvocation(1511)", "Delete MethodInvocation(1512)", "Delete InfixExpression: ||(1513)", "Delete SimpleName: IllegalArgumentException(1514)", "Delete SimpleType: IllegalArgumentException(1515)", "Delete StringLiteral: \"must specify a single attribute: \"(1516)", "Delete SimpleName: attribute(1517)", "Delete InfixExpression: +(1518)", "Delete ClassInstanceCreation(1519)", "Delete ThrowStatement(1520)", "Delete Block(1521)", "Delete IfStatement(1522)", "Delete NumberLiteral: 0(1525)", "Delete SimpleName: File(1642)", "Delete SimpleType: File(1643)", "Delete SimpleName: get(1644)", "Delete SimpleName: createDirectory(1645)", "Delete SimpleName: attrs(1646)", "Delete MethodInvocation(1647)", "Delete SimpleName: Override(1669)", "Delete MarkerAnnotation(1670)", "Delete SimpleName: File(1672)", "Delete SimpleType: File(1673)", "Delete SimpleName: get(1674)", "Delete SimpleName: Override(1718)", "Delete MarkerAnnotation(1719)", "Delete SimpleName: File(1721)", "Delete SimpleType: File(1722)", "Delete SimpleName: get(1723)", "Delete TextElement: Returns (1530)", "Delete TextElement:  null(1531)", "Delete TagElement: @code(1532)", "Delete TextElement: . This file store does not support any file store attribute views.(1533)", "Delete TagElement(1534)", "Delete Javadoc(1535)", "Delete TextElement: Throws (1557)", "Delete SimpleName: UnsupportedOperationException(1558)", "Delete TagElement: @link(1559)", "Delete TextElement: . This file store does not support any file store(1560)", "Delete TextElement: attributes.(1561)", "Delete TagElement(1562)", "Delete Javadoc(1563)", "Delete Modifier: private(1582)", "Delete Modifier: abstract(1583)", "Delete SimpleName: FileSupplier(1584)", "Delete SimpleName: Supplier(1585)", "Delete SimpleType: Supplier(1586)", "Delete SimpleName: File(1587)", "Delete SimpleType: File(1588)", "Delete ParameterizedType: Supplier<File>(1589)", "Delete Modifier: protected(1590)", "Delete Modifier: final(1591)", "Delete SimpleName: FileAttribute(1592)", "Delete SimpleType: FileAttribute(1593)", "Delete WildcardType: ?(1594)", "Delete ParameterizedType: FileAttribute<?>(1595)", "Delete Dimension(1596)", "Delete ArrayType: FileAttribute<?>[](1597)", "Delete SimpleName: attrs(1598)", "Delete VariableDeclarationFragment(1599)", "Delete FieldDeclaration(1600)", "Delete Modifier: protected(1601)", "Delete SimpleName: FileSupplier(1602)", "Delete SimpleName: FileAttribute(1603)", "Delete SimpleType: FileAttribute(1604)", "Delete WildcardType: ?(1605)", "Delete ParameterizedType: FileAttribute<?>(1606)", "Delete Dimension(1607)", "Delete ArrayType: FileAttribute<?>[](1608)", "Delete SimpleName: attrs(1609)", "Delete SingleVariableDeclaration(1610)", "Delete ThisExpression(1611)", "Delete SimpleName: attrs(1612)", "Delete FieldAccess(1613)", "Delete SimpleName: checkNotNull(1614)", "Delete SimpleName: attrs(1615)", "Delete MethodInvocation(1616)", "Delete Assignment: =(1617)", "Delete ExpressionStatement(1618)", "Delete Block(1619)", "Delete MethodDeclaration(1620)", "Delete TypeDeclaration: class(1621)", "Delete Modifier: private(1622)", "Delete Modifier: final(1623)", "Delete SimpleName: DirectorySupplier(1624)", "Delete SimpleName: FileSupplier(1625)", "Delete SimpleType: FileSupplier(1626)", "Delete Modifier: private(1627)", "Delete SimpleName: DirectorySupplier(1628)", "Delete SimpleName: FileAttribute(1629)", "Delete SimpleType: FileAttribute(1630)", "Delete WildcardType: ?(1631)", "Delete ParameterizedType: FileAttribute<?>(1632)", "Delete SimpleName: attrs(1633)", "Delete SingleVariableDeclaration(1634)", "Delete SimpleName: attrs(1635)", "Delete SuperConstructorInvocation(1636)", "Delete Block(1637)", "Delete MethodDeclaration(1638)", "Delete TypeDeclaration: class(1651)", "Delete Modifier: private(1652)", "Delete Modifier: final(1653)", "Delete SimpleName: RegularFileSupplier(1654)", "Delete SimpleName: FileSupplier(1655)", "Delete SimpleType: FileSupplier(1656)", "Delete Modifier: private(1657)", "Delete SimpleName: RegularFileSupplier(1658)", "Delete SimpleName: FileAttribute(1659)", "Delete SimpleType: FileAttribute(1660)", "Delete WildcardType: ?(1661)", "Delete ParameterizedType: FileAttribute<?>(1662)", "Delete SimpleName: attrs(1663)", "Delete SingleVariableDeclaration(1664)", "Delete SimpleName: attrs(1665)", "Delete SuperConstructorInvocation(1666)", "Delete Block(1667)", "Delete MethodDeclaration(1668)", "Delete TypeDeclaration: class(1681)", "Delete Modifier: private(1682)", "Delete Modifier: final(1683)", "Delete SimpleName: SymbolicLinkSupplier(1684)", "Delete SimpleName: FileSupplier(1685)", "Delete SimpleType: FileSupplier(1686)", "Delete Modifier: private(1687)", "Delete Modifier: final(1688)", "Delete SimpleName: target(1691)", "Delete VariableDeclarationFragment(1692)", "Delete FieldDeclaration(1693)", "Delete Modifier: protected(1694)", "Delete SimpleName: SymbolicLinkSupplier(1695)", "Delete SimpleName: JimfsPath(1696)", "Delete SimpleType: JimfsPath(1697)", "Delete SimpleName: target(1698)", "Delete SingleVariableDeclaration(1699)", "Delete SimpleName: FileAttribute(1700)", "Delete SimpleType: FileAttribute(1701)", "Delete WildcardType: ?(1702)", "Delete ParameterizedType: FileAttribute<?>(1703)", "Delete SimpleName: attrs(1704)", "Delete SingleVariableDeclaration(1705)", "Delete SimpleName: attrs(1706)", "Delete SuperConstructorInvocation(1707)", "Delete ThisExpression(1708)", "Delete SimpleName: target(1709)", "Delete FieldAccess(1710)", "Delete SimpleName: checkNotNull(1711)", "Delete SimpleName: target(1712)", "Delete MethodInvocation(1713)", "Delete Assignment: =(1714)", "Delete ExpressionStatement(1715)", "Delete Block(1716)", "Delete MethodDeclaration(1717)", "Delete TypeDeclaration: class(1731)"]}}, {"JimfsFileSystem_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleType: PathService to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: final to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: pathService to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 9", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 9", "INS Modifier: final to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 15", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: getRootDirectories to MethodDeclaration at 3", "INS Block to MethodDeclaration at 4"]}, {"root": "INS SimpleType: JimfsFileStore to FieldDeclaration at 3", "operations": ["INS SimpleType: JimfsFileStore to FieldDeclaration at 3", "INS SimpleName: JimfsFileStore to SimpleType: JimfsFileStore at 0"]}, {"root": "INS VariableDeclarationFragment to FieldDeclaration at 4", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: fileStore to VariableDeclarationFragment at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: FileSystemService to FieldDeclaration at 2", "MOV VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SimpleName: JimfsFileStore to SimpleType: JimfsFileStore at 0", "INS SimpleType: JimfsFileStore to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: fileStore to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: pathService to SingleVariableDeclaration at 1", "INS SimpleName: PathService to SimpleType: PathService at 0", "INS SimpleType: PathService to SingleVariableDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: ImmutableSet<Path> to MethodDeclaration at 2", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from DirectoryTable to PathService", "operations": ["UPD SimpleName: DirectoryTable from DirectoryTable to PathService"]}, {"root": "MOVE from SimpleType: PathService", "operations": ["MOV SimpleName: DirectoryTable to SimpleType: PathService at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ThisExpression to FieldAccess at 0", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: fileStore to FieldAccess at 1", "INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: fileStore to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS SimpleName: pathService to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS ExpressionStatement to Block at 3", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: pathService to MethodInvocation at 1", "INS FieldAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV EnhancedForStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 0", "MOV ReturnStatement to Block at 2"]}, {"root": "UPDATE from superRootTable to fileStore", "operations": ["UPD SimpleName: superRootTable from superRootTable to fileStore"]}, {"root": "UPDATE from snapshot to getRootDirectoryNames", "operations": ["UPD SimpleName: snapshot from snapshot to getRootDirectoryNames"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: fileStore to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: fileStore to MethodInvocation at 0"]}, {"root": "UPDATE from service to pathService", "operations": ["UPD SimpleName: service from service to pathService", "UPD SimpleName: service from service to pathService", "UPD SimpleName: service from service to pathService", "UPD SimpleName: service from service to pathService", "UPD SimpleName: service from service to pathService"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: service to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: service to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: service to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: service to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: service to MethodInvocation at 0"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement", "DEL Javadoc", "DEL TextElement: Service providing actual file system operations."]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: paths", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: DirectoryTable", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: getSuperRoot", "DEL SimpleName: service", "DEL SimpleName: getRootDirectories", "DEL SimpleName: content", "DEL Modifier: public", "DEL SimpleName: superRootTable", "DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: service"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: service"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: paths"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: paths", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: paths", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: paths", "DEL MethodInvocation"]}]}}, {"JimfsFileSystem_diff": {"operations": ["Insert FieldDeclaration(78) into TypeDeclaration: class(450) at 8", "Insert FieldDeclaration(85) into TypeDeclaration: class(450) at 9", "Insert MethodDeclaration(237) into TypeDeclaration: class(450) at 15", "Insert SimpleType: JimfsFileStore(68) into FieldDeclaration(71) at 2", "Insert VariableDeclarationFragment(70) into FieldDeclaration(71) at 3", "Insert Modifier: private(72) into FieldDeclaration(78) at 0", "Insert Modifier: final(73) into FieldDeclaration(78) at 1", "Insert SimpleType: PathService(75) into FieldDeclaration(78) at 2", "Insert VariableDeclarationFragment(77) into FieldDeclaration(78) at 3", "Insert Modifier: private(79) into FieldDeclaration(85) at 0", "Insert Modifier: final(80) into FieldDeclaration(85) at 1", "Move SimpleType: FileSystemService(71) into FieldDeclaration(85) at 2", "Move VariableDeclarationFragment(73) into FieldDeclaration(85) at 3", "Insert SingleVariableDeclaration(98) into MethodDeclaration(148) at 3", "Insert SingleVariableDeclaration(102) into MethodDeclaration(148) at 4", "Move MarkerAnnotation(161) into MethodDeclaration(237) at 0", "Insert Modifier: public(197) into MethodDeclaration(237) at 1", "Move ParameterizedType: ImmutableSet<Path>(167) into MethodDeclaration(237) at 2", "Insert SimpleName: getRootDirectories(203) into MethodDeclaration(237) at 3", "Insert Block(236) into MethodDeclaration(237) at 4", "Insert SimpleName: JimfsFileStore(67) into SimpleType: JimfsFileStore(68) at 0", "Insert SimpleName: fileStore(69) into VariableDeclarationFragment(70) at 0", "Update SimpleName: DirectoryTable(180) to PathService", "Move SimpleName: DirectoryTable(180) into SimpleType: PathService(75) at 0", "Insert SimpleName: pathService(76) into VariableDeclarationFragment(77) at 0", "Insert SimpleType: JimfsFileStore(96) into SingleVariableDeclaration(98) at 0", "Insert SimpleName: fileStore(97) into SingleVariableDeclaration(98) at 1", "Insert SimpleType: PathService(100) into SingleVariableDeclaration(102) at 0", "Insert SimpleName: pathService(101) into SingleVariableDeclaration(102) at 1", "Insert ExpressionStatement(130) into Block(147) at 2", "Insert ExpressionStatement(138) into Block(147) at 3", "Move VariableDeclarationStatement(179) into Block(236) at 0", "Move EnhancedForStatement(208) into Block(236) at 1", "Move ReturnStatement(212) into Block(236) at 2", "Insert SimpleName: JimfsFileStore(95) into SimpleType: JimfsFileStore(96) at 0", "Insert SimpleName: PathService(99) into SimpleType: PathService(100) at 0", "Insert Assignment: =(129) into ExpressionStatement(130) at 0", "Insert Assignment: =(137) into ExpressionStatement(138) at 0", "Insert FieldAccess(125) into Assignment: =(129) at 0", "Insert MethodInvocation(128) into Assignment: =(129) at 1", "Insert FieldAccess(133) into Assignment: =(137) at 0", "Insert MethodInvocation(136) into Assignment: =(137) at 1", "Update SimpleName: superRootTable(194) to fileStore", "Update SimpleName: snapshot(195) to getRootDirectoryNames", "Move SimpleName: fileStore(242) into MethodInvocation(265) at 3", "Move SimpleName: fileStore(258) into MethodInvocation(280) at 0", "Update SimpleName: service(279) to pathService", "Move SimpleName: service(279) into MethodInvocation(302) at 0", "Update SimpleName: service(300) to pathService", "Move SimpleName: service(300) into MethodInvocation(323) at 0", "Update SimpleName: service(323) to pathService", "Move SimpleName: service(323) into MethodInvocation(341) at 0", "Update SimpleName: service(342) to pathService", "Move SimpleName: service(342) into MethodInvocation(358) at 0", "Insert ThisExpression(123) into FieldAccess(125) at 0", "Insert SimpleName: fileStore(124) into FieldAccess(125) at 1", "Insert SimpleName: checkNotNull(126) into MethodInvocation(128) at 0", "Insert SimpleName: fileStore(127) into MethodInvocation(128) at 1", "Insert ThisExpression(131) into FieldAccess(133) at 0", "Insert SimpleName: pathService(132) into FieldAccess(133) at 1", "Insert SimpleName: checkNotNull(134) into MethodInvocation(136) at 0", "Insert SimpleName: pathService(135) into MethodInvocation(136) at 1", "Update SimpleName: service(199) to pathService", "Move SimpleName: service(199) into MethodInvocation(227) at 0", "Delete TextElement: Service providing actual file system operations.(65)", "Delete TagElement(66)", "Delete Javadoc(67)", "Delete SimpleName: paths(200)", "Delete MethodInvocation(201)", "Delete Modifier: public(162)", "Delete SimpleName: getRootDirectories(168)", "Delete SimpleType: DirectoryTable(181)", "Delete SimpleName: superRootTable(182)", "Delete SimpleName: service(183)", "Delete SimpleName: getSuperRoot(184)", "Delete MethodInvocation(185)", "Delete SimpleName: content(186)", "Delete MethodInvocation(187)", "Delete VariableDeclarationFragment(188)", "Delete VariableDeclarationStatement(189)", "Delete Block(213)", "Delete MethodDeclaration(214)", "Delete SimpleName: service(241)", "Delete MethodInvocation(243)", "Delete SimpleName: service(257)", "Delete MethodInvocation(259)", "Delete SimpleName: paths(280)", "Delete MethodInvocation(281)", "Delete SimpleName: paths(301)", "Delete MethodInvocation(302)", "Delete SimpleName: paths(324)", "Delete MethodInvocation(325)", "Delete SimpleName: paths(343)", "Delete MethodInvocation(344)"]}}, {"JimfsFileSystemProvider_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 29"]}, {"root": "INS Javadoc to FieldDeclaration at 0", "operations": ["INS TagElement to Javadoc at 0", "INS TextElement: Cache of file systems that have been created but not closed. to TagElement at 0", "INS Javadoc to FieldDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SimpleType: Path to MethodDeclaration at 3", "MOV SimpleType: IOException to MethodDeclaration at 6"]}, {"root": "UPDATE from static to public", "operations": ["UPD Modifier: static from static to public"]}, {"root": "INS SimpleName: readSymbolicLink to MethodDeclaration at 4", "operations": ["INS SimpleName: readSymbolicLink to MethodDeclaration at 4"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: JimfsPath to VariableDeclarationStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from service to readSymbolicLink", "operations": ["UPD SimpleName: service from service to readSymbolicLink"]}, {"root": "UPDATE from requireFound to checkAccess", "operations": ["UPD SimpleName: requireFound from requireFound to checkAccess"]}, {"root": "UPDATE from path to checkedPath", "operations": ["UPD SimpleName: path from path to checkedPath"]}, {"root": "UPDATE from path to link", "operations": ["UPD SimpleName: path from path to link"]}, {"root": "UPDATE from lookup to getService", "operations": ["UPD SimpleName: lookup from lookup to getService"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.jimfs.internal.LinkOptions.FOLLOW_LINKS"]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}, {"root": "DEL SimpleType: LookupResult", "operations": ["DEL SimpleType: LookupResult", "DEL SimpleName: LookupResult"]}, {"root": "DEL SimpleName: lookup", "operations": ["DEL SimpleName: lookup"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: Path", "DEL SimpleName: Path", "DEL SingleVariableDeclaration", "DEL SimpleName: path"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: LinkOptions", "DEL SimpleType: LinkOptions", "DEL SingleVariableDeclaration", "DEL SimpleName: linkHandling"]}, {"root": "DEL SimpleType: IOException", "operations": ["DEL SimpleName: IOException", "DEL SimpleType: IOException"]}, {"root": "DEL SimpleType: JimfsPath", "operations": ["DEL SimpleType: JimfsPath", "DEL SimpleName: JimfsPath"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: FileSystemService", "DEL VariableDeclarationFragment", "DEL SimpleName: FileSystemService", "DEL SimpleName: service", "DEL VariableDeclarationStatement"]}, {"root": "DEL SimpleName: lookup", "operations": ["DEL SimpleName: lookup"]}, {"root": "DEL SimpleName: linkHandling", "operations": ["DEL SimpleName: linkHandling"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: file", "DEL MethodInvocation", "DEL SimpleName: link", "DEL SimpleName: content", "DEL SimpleType: File", "DEL SimpleName: File", "DEL Modifier: public", "DEL SimpleName: requireSymbolicLink", "DEL SimpleName: file", "DEL SimpleName: NOFOLLOW_LINKS", "DEL VariableDeclarationStatement", "DEL SimpleName: lookup", "DEL MethodInvocation", "DEL SimpleName: link", "DEL Block", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: readSymbolicLink", "DEL SimpleName: file", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: FOLLOW_LINKS", "operations": ["DEL SimpleName: FOLLOW_LINKS"]}]}}, {"JimfsFileSystemProvider_diff": {"operations": ["Move MethodDeclaration(572) into TypeDeclaration: class(1698) at 29", "Insert Javadoc(125) into FieldDeclaration(141) at 0", "Move MarkerAnnotation(1159) into MethodDeclaration(1148) at 0", "Update Modifier: static(535) to public", "Move SimpleType: Path(1162) into MethodDeclaration(1148) at 3", "Insert SimpleName: readSymbolicLink(1125) into MethodDeclaration(1148) at 3", "Move SingleVariableDeclaration(1167) into MethodDeclaration(1148) at 5", "Move SimpleType: IOException(1169) into MethodDeclaration(1148) at 6", "Insert TagElement(124) into Javadoc(125) at 0", "Insert TextElement: Cache of file systems that have been created but not closed.(123) into TagElement(124) at 0", "Move SimpleType: JimfsPath(1186) into VariableDeclarationStatement(1139) at 0", "Move MethodInvocation(562) into MethodInvocation(1145) at 0", "Update SimpleName: service(565) to readSymbolicLink", "Update SimpleName: requireFound(1547) to checkAccess", "Update SimpleName: path(1548) to checkedPath", "Update SimpleName: path(553) to link", "Update SimpleName: lookup(1543) to getService", "Delete QualifiedName: com.google.jimfs.internal.LinkOptions.FOLLOW_LINKS(12)", "Delete ImportDeclaration(13)", "Delete Modifier: private(534)", "Delete SimpleName: LookupResult(536)", "Delete SimpleType: LookupResult(537)", "Delete SimpleName: lookup(538)", "Delete SimpleName: Path(539)", "Delete SimpleType: Path(540)", "Delete SimpleName: path(541)", "Delete SingleVariableDeclaration(542)", "Delete SimpleName: LinkOptions(543)", "Delete SimpleType: LinkOptions(544)", "Delete SimpleName: linkHandling(545)", "Delete SingleVariableDeclaration(546)", "Delete SimpleName: IOException(547)", "Delete SimpleType: IOException(548)", "Delete SimpleName: JimfsPath(549)", "Delete SimpleType: JimfsPath(550)", "Delete SimpleName: FileSystemService(557)", "Delete SimpleType: FileSystemService(558)", "Delete SimpleName: service(559)", "Delete VariableDeclarationFragment(563)", "Delete VariableDeclarationStatement(564)", "Delete SimpleName: lookup(566)", "Delete SimpleName: linkHandling(568)", "Delete Modifier: public(1160)", "Delete SimpleName: readSymbolicLink(1163)", "Delete SimpleName: File(1170)", "Delete SimpleType: File(1171)", "Delete SimpleName: file(1172)", "Delete SimpleName: lookup(1173)", "Delete SimpleName: link(1174)", "Delete SimpleName: NOFOLLOW_LINKS(1175)", "Delete MethodInvocation(1176)", "Delete SimpleName: requireSymbolicLink(1177)", "Delete SimpleName: link(1178)", "Delete MethodInvocation(1179)", "Delete SimpleName: file(1180)", "Delete MethodInvocation(1181)", "Delete VariableDeclarationFragment(1182)", "Delete VariableDeclarationStatement(1183)", "Delete SimpleName: file(1184)", "Delete SimpleName: content(1187)", "Delete MethodInvocation(1188)", "Delete ReturnStatement(1189)", "Delete Block(1190)", "Delete MethodDeclaration(1191)", "Delete SimpleName: FOLLOW_LINKS(1545)"]}}, {"LookupResult_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.google.jimfs.internal", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Preconditions.checkNotNull", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Preconditions.checkState", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Objects", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.IOException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.nio.file.FileAlreadyExistsException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.nio.file.NoSuchFileException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.nio.file.NotDirectoryException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.nio.file.NotLinkException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.nio.file.Path"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.annotation.Nullable", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TagElement: @author", "DEL SimpleType: LookupResult", "DEL SimpleName: parent", "DEL IfStatement", "DEL SimpleName: File", "DEL SimpleName: file", "DEL TagElement: @linkplain", "DEL SimpleType: Name", "DEL TextElement: <li>the parent directory that should have contained the file was found, the file was not:", "DEL SimpleName: checkState", "DEL Block", "DEL Block", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: File", "DEL SimpleName: LookupResult", "DEL PrefixExpression: !", "DEL TextElement: </li>", "DEL SimpleName: toStringHelper", "DEL Javadoc", "DEL SimpleName: pathForException", "DEL SimpleName: file", "DEL TagElement: @throws", "DEL TagElement: @code", "DEL Modifier: private", "DEL SimpleName: orNull", "DEL ReturnStatement", "DEL SimpleName: IllegalStateException", "DEL TagElement: @code", "DEL SimpleName: checkNotNull", "DEL TagElement", "DEL ReturnStatement", "DEL SimpleType: File", "DEL ThrowStatement", "DEL MethodInvocation", "DEL SimpleName: Nullable", "DEL SimpleName: toString", "DEL TagElement", "DEL SimpleName: file", "DEL TagElement: @code", "DEL NullLiteral", "DEL SimpleName: checkNotNull", "DEL SimpleType: FileAlreadyExistsException", "DEL Modifier: private", "DEL MethodDeclaration", "DEL Block", "DEL Modifier: public", "DEL SimpleName: NoSuchFileException", "DEL Javadoc", "DEL MethodDeclaration", "DEL FieldAccess", "DEL SimpleName: NoSuchFileException", "DEL TextElement: <li>the parent directory that should have contained the file was not found:", "DEL NullLiteral", "DEL MarkerAnnotation", "DEL SimpleName: found", "DEL StringLiteral: \"parent was not found\"", "DEL SimpleType: File", "DEL SimpleType: File", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: NotLinkException", "DEL SimpleName: pathForException", "DEL TagElement", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: File", "DEL SimpleName: checkState", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: toString", "DEL MethodDeclaration", "DEL ThisExpression", "DEL SimpleName: isDirectory", "DEL SimpleName: LookupResult", "DEL TextElement: , but ", "DEL SimpleName: Nullable", "DEL ClassInstanceCreation", "DEL TagElement", "DEL SimpleName: LookupResult", "DEL TagElement", "DEL SimpleName: pathForException", "DEL SimpleType: NoSuchFileException", "DEL MethodRef", "DEL SimpleName: file", "DEL FieldAccess", "DEL ReturnStatement", "DEL TagElement", "DEL SimpleName: pathForException", "DEL Assignment: =", "DEL TextElement: Throws an exception if the file was found. Returns this result.", "DEL SimpleType: LookupResult", "DEL Javadoc", "DEL IfStatement", "DEL Modifier: static", "DEL SimpleName: Nullable", "DEL MethodInvocation", "DEL SimpleName: found", "DEL TextElement:  if the result did not", "DEL TextElement: <p>There are several states a result can have.", "DEL SimpleType: NoSuchFileException", "DEL SimpleName: requireSymbolicLink", "DEL MethodInvocation", "DEL SimpleName: name", "DEL StringLiteral: \"parent\"", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: Override", "DEL MethodInvocation", "DEL Modifier: public", "DEL MethodInvocation", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL MarkerAnnotation", "DEL SimpleName: LookupResult", "DEL MethodInvocation", "DEL IfStatement", "DEL StringLiteral: \"file was not found\"", "DEL MethodInvocation", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: requireNotFound", "DEL ExpressionStatement", "DEL SimpleName: requireFound", "DEL Modifier: private", "DEL SimpleName: Nullable", "DEL ClassInstanceCreation", "DEL SimpleType: Name", "DEL SimpleName: Path", "DEL TextElement: Returns a lookup result with neither the parent nor the file.", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: NoSuchFileException", "DEL SimpleName: add", "DEL SimpleName: pathForException", "DEL ExpressionStatement", "DEL TextElement:  find a parent key", "DEL TextElement:  not found", "DEL Javadoc", "DEL SimpleType: File", "DEL TextElement:  if the result was not ", "DEL Modifier: final", "DEL ClassInstanceCreation", "DEL MethodRef", "DEL SimpleName: File", "DEL SimpleName: file", "DEL SimpleName: LookupResult", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: Nullable", "DEL Modifier: public", "DEL FieldAccess", "DEL MarkerAnnotation", "DEL ExpressionStatement", "DEL SimpleType: NotDirectoryException", "DEL SimpleType: Path", "DEL TagElement", "DEL ThisExpression", "DEL SimpleType: NotLinkException", "DEL Modifier: public", "DEL PrefixExpression: !", "DEL Modifier: public", "DEL SimpleName: Name", "DEL TextElement: Returns whether or not the parent of the file being looked up was found.", "DEL Modifier: static", "DEL ClassInstanceCreation", "DEL SimpleName: parent", "DEL MethodInvocation", "DEL ThrowStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: FileAlreadyExistsException", "DEL SimpleName: parent", "DEL SimpleName: name", "DEL SimpleType: File", "DEL TagElement: @code", "DEL SimpleName: LookupResult", "DEL TextElement: Returns whether or not the file being looked up was found.", "DEL SimpleType: LookupResult", "DEL SimpleName: omitNullValues", "DEL SimpleName: toString", "DEL NullLiteral", "DEL SimpleName: name", "DEL ThisExpression", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: parent", "DEL SimpleName: file", "DEL Assignment: =", "DEL Modifier: public", "DEL TagElement", "DEL MethodDeclaration", "DEL SimpleName: found", "DEL VariableDeclarationFragment", "DEL SimpleName: File", "DEL SimpleName: pathForException", "DEL TextElement: Gets the actual name for the directory entry that was found.", "DEL TextElement: <ul>", "DEL Modifier: final", "DEL SimpleType: LookupResult", "DEL Modifier: public", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleName: parent", "DEL SimpleName: name", "DEL Block", "DEL SimpleName: LookupResult", "DEL Block", "DEL SimpleName: File", "DEL TagElement", "DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleType: LookupResult", "DEL SimpleType: File", "DEL TagElement: @linkplain", "DEL SimpleName: pathForException", "DEL ReturnStatement", "DEL ReturnStatement", "DEL TextElement: Gets the file that was being looked up.", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: FileAlreadyExistsException", "DEL SimpleName: LookupResult", "DEL PrefixExpression: !", "DEL MethodDeclaration", "DEL SimpleName: file", "DEL SimpleType: LookupResult", "DEL TagElement: @throws", "DEL MethodInvocation", "DEL MethodRef", "DEL SimpleName: requireFound", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: LookupResult", "DEL SimpleName: pathForException", "DEL SimpleName: LookupResult", "DEL SimpleName: LookupResult", "DEL NullLiteral", "DEL TextElement:  parentFound() == true", "DEL SimpleName: isSymbolicLink", "DEL MarkerAnnotation", "DEL SimpleName: add", "DEL TextElement:  found() == false", "DEL NullLiteral", "DEL Assignment: =", "DEL ThrowStatement", "DEL SimpleName: found", "DEL Modifier: static", "DEL SimpleName: found", "DEL SimpleType: File", "DEL SimpleName: parent", "DEL SimpleType: Path", "DEL SimpleName: Nullable", "DEL StringLiteral: \"file was not found\"", "DEL TextElement:  Colin Decker", "DEL SimpleName: Path", "DEL Modifier: public", "DEL SimpleType: Name", "DEL SimpleName: Name", "DEL SimpleName: parentFound", "DEL Modifier: final", "DEL SimpleName: Nullable", "DEL Javadoc", "DEL SimpleName: found", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleType: File", "DEL SimpleType: Path", "DEL SimpleName: Objects", "DEL SingleVariableDeclaration", "DEL TextElement: Throws an exception if the parent dir was not found. Returns this result.", "DEL ThrowStatement", "DEL SimpleName: parentFound", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL TagElement", "DEL TextElement:  if the result was not ", "DEL SimpleName: IOException", "DEL TextElement:  found() == true", "DEL SimpleName: File", "DEL ReturnStatement", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL SimpleName: parent", "DEL TextElement:  not found", "DEL SimpleName: Path", "DEL SimpleName: toString", "DEL SimpleName: name", "DEL ClassInstanceCreation", "DEL SimpleName: parentFound", "DEL TextElement: <li>the parent directory and the file itself were found: ", "DEL SimpleName: Path", "DEL SingleVariableDeclaration", "DEL ThisExpression", "DEL SimpleType: NoSuchFileException", "DEL SimpleName: checkState", "DEL SimpleName: file", "DEL SimpleName: notFound", "DEL SimpleType: Path", "DEL SimpleName: name", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: LookupResult", "DEL SimpleName: file", "DEL Block", "DEL SimpleName: pathForException", "DEL SimpleName: File", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleName: parent", "DEL TextElement: Result of a file lookup.", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: IOException", "DEL TextElement: Throws an exception if the file was not found. Returns this result.", "DEL TagElement", "DEL SimpleType: FileAlreadyExistsException", "DEL Javadoc", "DEL SimpleName: NoSuchFileException", "DEL Block", "DEL SingleVariableDeclaration", "DEL TextElement: Returns a successful lookup result with a parent, file and file name.", "DEL SimpleName: Name", "DEL SimpleType: String", "DEL SimpleType: LookupResult", "DEL MethodDeclaration", "DEL Block", "DEL ThisExpression", "DEL SimpleName: parent", "DEL SimpleName: Path", "DEL TextElement: Gets the parent directory of the path being looked up.", "DEL FieldDeclaration", "DEL SimpleName: IllegalStateException", "DEL SimpleType: File", "DEL ExpressionStatement", "DEL SimpleName: pathForException", "DEL SimpleName: NotDirectoryException", "DEL Modifier: public", "DEL Modifier: public", "DEL SimpleName: File", "DEL TagElement", "DEL Block", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL TextElement: Returns a lookup result with only the parent.", "DEL SimpleName: requireFound", "DEL TagElement: @throws", "DEL TextElement: Throws an exception if the file was not found or if it was found but is not a symbolic link.", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL ThisExpression", "DEL SimpleName: checkNotNull", "DEL SimpleName: pathForException", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL TagElement: @linkplain", "DEL SimpleName: File", "DEL Block", "DEL FieldDeclaration", "DEL SimpleName: Name", "DEL SimpleName: name", "DEL MethodInvocation", "DEL SimpleName: file", "DEL SimpleName: IllegalStateException", "DEL MethodInvocation", "DEL SimpleName: name", "DEL Block", "DEL StringLiteral: \"file\"", "DEL Block", "DEL SimpleType: LookupResult", "DEL SimpleName: toString", "DEL SimpleName: requireParentFound", "DEL Block", "DEL TextElement:  if not found.", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: parent", "DEL Modifier: final", "DEL ReturnStatement", "DEL PrefixExpression: !", "DEL SimpleName: toString", "DEL Block", "DEL SimpleName: file", "DEL TagElement", "DEL ThrowStatement", "DEL TagElement: @code", "DEL SimpleType: IOException", "DEL TextElement: Returns the file key that was found or ", "DEL SimpleName: parentFound", "DEL MethodDeclaration", "DEL SimpleType: Name", "DEL SimpleName: String", "DEL TagElement", "DEL SimpleName: pathForException", "DEL SimpleName: LookupResult", "DEL TextElement: </li>", "DEL MethodInvocation", "DEL SimpleType: LookupResult", "DEL InfixExpression: !=", "DEL SimpleName: File", "DEL TextElement: </ul>", "DEL Block", "DEL SimpleName: checkNotNull", "DEL TextElement:  parentFound() == false", "DEL MarkerAnnotation", "DEL TextElement: Throws an exception if the file was not found or if it was found but is not a directory.", "DEL SimpleName: requireDirectory", "DEL SimpleType: IOException", "DEL Modifier: public", "DEL Block", "DEL Javadoc", "DEL SimpleName: file", "DEL Javadoc", "DEL TypeDeclaration: class", "DEL SimpleName: parent", "DEL Modifier: public", "DEL PrimitiveType: boolean", "DEL FieldDeclaration", "DEL TextElement: </li>", "DEL NullLiteral", "DEL SimpleName: parent", "DEL SimpleType: NoSuchFileException", "DEL Block", "DEL SimpleName: toString", "DEL SimpleType: LookupResult", "DEL SimpleName: parentFound", "DEL TagElement", "DEL Modifier: private", "DEL ThisExpression", "DEL MarkerAnnotation", "DEL SimpleType: Path", "DEL SimpleName: LookupResult", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL TextElement:  null", "DEL MarkerAnnotation", "DEL Javadoc", "DEL SimpleName: found", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL MethodInvocation", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL SimpleName: found", "DEL ReturnStatement", "DEL SimpleName: file"]}]}}, {"LookupResult_diff": {"operations": ["Delete QualifiedName: com.google.jimfs.internal(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.common.base.Preconditions.checkNotNull(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.common.base.Preconditions.checkState(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.google.common.base.Objects(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.io.IOException(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.nio.file.FileAlreadyExistsException(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.nio.file.NoSuchFileException(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.nio.file.NotDirectoryException(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.nio.file.NotLinkException(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: java.nio.file.Path(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: javax.annotation.Nullable(20)", "Delete ImportDeclaration(21)", "Delete TextElement: Result of a file lookup.(22)", "Delete TextElement: <p>There are several states a result can have.(23)", "Delete TextElement: <ul>(24)", "Delete TextElement: <li>the parent directory that should have contained the file was not found:(25)", "Delete TextElement:  parentFound() == false(26)", "Delete TagElement: @code(27)", "Delete TextElement: </li>(28)", "Delete TextElement: <li>the parent directory that should have contained the file was found, the file was not:(29)", "Delete TextElement:  parentFound() == true(30)", "Delete TagElement: @code(31)", "Delete TextElement: , but (32)", "Delete TextElement:  found() == false(33)", "Delete TagElement: @code(34)", "Delete TextElement: </li>(35)", "Delete TextElement: <li>the parent directory and the file itself were found: (36)", "Delete TextElement:  found() == true(37)", "Delete TagElement: @code(38)", "Delete TextElement: </li>(39)", "Delete TextElement: </ul>(40)", "Delete TagElement(41)", "Delete TextElement:  Colin Decker(42)", "Delete TagElement: @author(43)", "Delete Javadoc(44)", "Delete Modifier: final(45)", "Delete SimpleName: LookupResult(46)", "Delete TextElement: Returns a lookup result with neither the parent nor the file.(47)", "Delete TagElement(48)", "Delete Javadoc(49)", "Delete Modifier: public(50)", "Delete Modifier: static(51)", "Delete SimpleName: LookupResult(52)", "Delete SimpleType: LookupResult(53)", "Delete SimpleName: notFound(54)", "Delete SimpleName: LookupResult(55)", "Delete SimpleType: LookupResult(56)", "Delete NullLiteral(57)", "Delete NullLiteral(58)", "Delete NullLiteral(59)", "Delete ClassInstanceCreation(60)", "Delete ReturnStatement(61)", "Delete Block(62)", "Delete MethodDeclaration(63)", "Delete TextElement: Returns a lookup result with only the parent.(64)", "Delete TagElement(65)", "Delete Javadoc(66)", "Delete Modifier: public(67)", "Delete Modifier: static(68)", "Delete SimpleName: LookupResult(69)", "Delete SimpleType: LookupResult(70)", "Delete SimpleName: parentFound(71)", "Delete SimpleName: File(72)", "Delete SimpleType: File(73)", "Delete SimpleName: parent(74)", "Delete SingleVariableDeclaration(75)", "Delete SimpleName: LookupResult(76)", "Delete SimpleType: LookupResult(77)", "Delete SimpleName: checkNotNull(78)", "Delete SimpleName: parent(79)", "Delete MethodInvocation(80)", "Delete NullLiteral(81)", "Delete NullLiteral(82)", "Delete ClassInstanceCreation(83)", "Delete ReturnStatement(84)", "Delete Block(85)", "Delete MethodDeclaration(86)", "Delete TextElement: Returns a successful lookup result with a parent, file and file name.(87)", "Delete TagElement(88)", "Delete Javadoc(89)", "Delete Modifier: public(90)", "Delete Modifier: static(91)", "Delete SimpleName: LookupResult(92)", "Delete SimpleType: LookupResult(93)", "Delete SimpleName: found(94)", "Delete SimpleName: File(95)", "Delete SimpleType: File(96)", "Delete SimpleName: parent(97)", "Delete SingleVariableDeclaration(98)", "Delete SimpleName: File(99)", "Delete SimpleType: File(100)", "Delete SimpleName: file(101)", "Delete SingleVariableDeclaration(102)", "Delete SimpleName: Name(103)", "Delete SimpleType: Name(104)", "Delete SimpleName: name(105)", "Delete SingleVariableDeclaration(106)", "Delete SimpleName: LookupResult(107)", "Delete SimpleType: LookupResult(108)", "Delete SimpleName: checkNotNull(109)", "Delete SimpleName: parent(110)", "Delete MethodInvocation(111)", "Delete SimpleName: checkNotNull(112)", "Delete SimpleName: file(113)", "Delete MethodInvocation(114)", "Delete SimpleName: checkNotNull(115)", "Delete SimpleName: name(116)", "Delete MethodInvocation(117)", "Delete ClassInstanceCreation(118)", "Delete ReturnStatement(119)", "Delete Block(120)", "Delete MethodDeclaration(121)", "Delete SimpleName: Nullable(122)", "Delete MarkerAnnotation(123)", "Delete Modifier: private(124)", "Delete Modifier: final(125)", "Delete SimpleName: File(126)", "Delete SimpleType: File(127)", "Delete SimpleName: parent(128)", "Delete VariableDeclarationFragment(129)", "Delete FieldDeclaration(130)", "Delete SimpleName: Nullable(131)", "Delete MarkerAnnotation(132)", "Delete Modifier: private(133)", "Delete Modifier: final(134)", "Delete SimpleName: File(135)", "Delete SimpleType: File(136)", "Delete SimpleName: file(137)", "Delete VariableDeclarationFragment(138)", "Delete FieldDeclaration(139)", "Delete SimpleName: Nullable(140)", "Delete MarkerAnnotation(141)", "Delete Modifier: private(142)", "Delete Modifier: final(143)", "Delete SimpleName: Name(144)", "Delete SimpleType: Name(145)", "Delete SimpleName: name(146)", "Delete VariableDeclarationFragment(147)", "Delete FieldDeclaration(148)", "Delete Modifier: private(149)", "Delete SimpleName: LookupResult(150)", "Delete SimpleName: Nullable(151)", "Delete MarkerAnnotation(152)", "Delete SimpleName: File(153)", "Delete SimpleType: File(154)", "Delete SimpleName: parent(155)", "Delete SingleVariableDeclaration(156)", "Delete SimpleName: Nullable(157)", "Delete MarkerAnnotation(158)", "Delete SimpleName: File(159)", "Delete SimpleType: File(160)", "Delete SimpleName: file(161)", "Delete SingleVariableDeclaration(162)", "Delete SimpleName: Nullable(163)", "Delete MarkerAnnotation(164)", "Delete SimpleName: Name(165)", "Delete SimpleType: Name(166)", "Delete SimpleName: name(167)", "Delete SingleVariableDeclaration(168)", "Delete ThisExpression(169)", "Delete SimpleName: parent(170)", "Delete FieldAccess(171)", "Delete SimpleName: parent(172)", "Delete Assignment: =(173)", "Delete ExpressionStatement(174)", "Delete ThisExpression(175)", "Delete SimpleName: file(176)", "Delete FieldAccess(177)", "Delete SimpleName: file(178)", "Delete Assignment: =(179)", "Delete ExpressionStatement(180)", "Delete ThisExpression(181)", "Delete SimpleName: name(182)", "Delete FieldAccess(183)", "Delete SimpleName: name(184)", "Delete Assignment: =(185)", "Delete ExpressionStatement(186)", "Delete Block(187)", "Delete MethodDeclaration(188)", "Delete TextElement: Returns whether or not the file being looked up was found.(189)", "Delete TagElement(190)", "Delete Javadoc(191)", "Delete Modifier: public(192)", "Delete PrimitiveType: boolean(193)", "Delete SimpleName: found(194)", "Delete SimpleName: file(195)", "Delete NullLiteral(196)", "Delete InfixExpression: !=(197)", "Delete ReturnStatement(198)", "Delete Block(199)", "Delete MethodDeclaration(200)", "Delete TextElement: Throws an exception if the file was not found. Returns this result.(201)", "Delete TagElement(202)", "Delete Javadoc(203)", "Delete Modifier: public(204)", "Delete SimpleName: LookupResult(205)", "Delete SimpleType: LookupResult(206)", "Delete SimpleName: requireFound(207)", "Delete SimpleName: Path(208)", "Delete SimpleType: Path(209)", "Delete SimpleName: pathForException(210)", "Delete SingleVariableDeclaration(211)", "Delete SimpleName: NoSuchFileException(212)", "Delete SimpleType: NoSuchFileException(213)", "Delete SimpleName: found(214)", "Delete MethodInvocation(215)", "Delete PrefixExpression: !(216)", "Delete SimpleName: NoSuchFileException(217)", "Delete SimpleType: NoSuchFileException(218)", "Delete SimpleName: pathForException(219)", "Delete SimpleName: toString(220)", "Delete MethodInvocation(221)", "Delete ClassInstanceCreation(222)", "Delete ThrowStatement(223)", "Delete Block(224)", "Delete IfStatement(225)", "Delete ThisExpression(226)", "Delete ReturnStatement(227)", "Delete Block(228)", "Delete MethodDeclaration(229)", "Delete TextElement: Throws an exception if the file was found. Returns this result.(230)", "Delete TagElement(231)", "Delete Javadoc(232)", "Delete Modifier: public(233)", "Delete SimpleName: LookupResult(234)", "Delete SimpleType: LookupResult(235)", "Delete SimpleName: requireNotFound(236)", "Delete SimpleName: Path(237)", "Delete SimpleType: Path(238)", "Delete SimpleName: pathForException(239)", "Delete SingleVariableDeclaration(240)", "Delete SimpleName: FileAlreadyExistsException(241)", "Delete SimpleType: FileAlreadyExistsException(242)", "Delete SimpleName: found(243)", "Delete MethodInvocation(244)", "Delete SimpleName: FileAlreadyExistsException(245)", "Delete SimpleType: FileAlreadyExistsException(246)", "Delete SimpleName: pathForException(247)", "Delete SimpleName: toString(248)", "Delete MethodInvocation(249)", "Delete ClassInstanceCreation(250)", "Delete ThrowStatement(251)", "Delete Block(252)", "Delete IfStatement(253)", "Delete ThisExpression(254)", "Delete ReturnStatement(255)", "Delete Block(256)", "Delete MethodDeclaration(257)", "Delete TextElement: Throws an exception if the file was not found or if it was found but is not a directory.(258)", "Delete TagElement(259)", "Delete Javadoc(260)", "Delete Modifier: public(261)", "Delete SimpleName: LookupResult(262)", "Delete SimpleType: LookupResult(263)", "Delete SimpleName: requireDirectory(264)", "Delete SimpleName: Path(265)", "Delete SimpleType: Path(266)", "Delete SimpleName: pathForException(267)", "Delete SingleVariableDeclaration(268)", "Delete SimpleName: IOException(269)", "Delete SimpleType: IOException(270)", "Delete SimpleName: requireFound(271)", "Delete SimpleName: pathForException(272)", "Delete MethodInvocation(273)", "Delete ExpressionStatement(274)", "Delete SimpleName: file(275)", "Delete SimpleName: isDirectory(276)", "Delete MethodInvocation(277)", "Delete PrefixExpression: !(278)", "Delete SimpleName: NotDirectoryException(279)", "Delete SimpleType: NotDirectoryException(280)", "Delete SimpleName: pathForException(281)", "Delete SimpleName: toString(282)", "Delete MethodInvocation(283)", "Delete ClassInstanceCreation(284)", "Delete ThrowStatement(285)", "Delete Block(286)", "Delete IfStatement(287)", "Delete ThisExpression(288)", "Delete ReturnStatement(289)", "Delete Block(290)", "Delete MethodDeclaration(291)", "Delete TextElement: Throws an exception if the file was not found or if it was found but is not a symbolic link.(292)", "Delete TagElement(293)", "Delete Javadoc(294)", "Delete Modifier: public(295)", "Delete SimpleName: LookupResult(296)", "Delete SimpleType: LookupResult(297)", "Delete SimpleName: requireSymbolicLink(298)", "Delete SimpleName: Path(299)", "Delete SimpleType: Path(300)", "Delete SimpleName: pathForException(301)", "Delete SingleVariableDeclaration(302)", "Delete SimpleName: IOException(303)", "Delete SimpleType: IOException(304)", "Delete SimpleName: requireFound(305)", "Delete SimpleName: pathForException(306)", "Delete MethodInvocation(307)", "Delete ExpressionStatement(308)", "Delete SimpleName: file(309)", "Delete SimpleName: isSymbolicLink(310)", "Delete MethodInvocation(311)", "Delete PrefixExpression: !(312)", "Delete SimpleName: NotLinkException(313)", "Delete SimpleType: NotLinkException(314)", "Delete SimpleName: pathForException(315)", "Delete SimpleName: toString(316)", "Delete MethodInvocation(317)", "Delete ClassInstanceCreation(318)", "Delete ThrowStatement(319)", "Delete Block(320)", "Delete IfStatement(321)", "Delete ThisExpression(322)", "Delete ReturnStatement(323)", "Delete Block(324)", "Delete MethodDeclaration(325)", "Delete TextElement: Returns whether or not the parent of the file being looked up was found.(326)", "Delete TagElement(327)", "Delete Javadoc(328)", "Delete Modifier: public(329)", "Delete PrimitiveType: boolean(330)", "Delete SimpleName: parentFound(331)", "Delete SimpleName: parent(332)", "Delete NullLiteral(333)", "Delete InfixExpression: !=(334)", "Delete ReturnStatement(335)", "Delete Block(336)", "Delete MethodDeclaration(337)", "Delete TextElement: Throws an exception if the parent dir was not found. Returns this result.(338)", "Delete TagElement(339)", "Delete Javadoc(340)", "Delete Modifier: public(341)", "Delete SimpleName: LookupResult(342)", "Delete SimpleType: LookupResult(343)", "Delete SimpleName: requireParentFound(344)", "Delete SimpleName: Path(345)", "Delete SimpleType: Path(346)", "Delete SimpleName: pathForException(347)", "Delete SingleVariableDeclaration(348)", "Delete SimpleName: NoSuchFileException(349)", "Delete SimpleType: NoSuchFileException(350)", "Delete SimpleName: parentFound(351)", "Delete MethodInvocation(352)", "Delete PrefixExpression: !(353)", "Delete SimpleName: NoSuchFileException(354)", "Delete SimpleType: NoSuchFileException(355)", "Delete SimpleName: pathForException(356)", "Delete SimpleName: toString(357)", "Delete MethodInvocation(358)", "Delete ClassInstanceCreation(359)", "Delete ThrowStatement(360)", "Delete Block(361)", "Delete IfStatement(362)", "Delete ThisExpression(363)", "Delete ReturnStatement(364)", "Delete Block(365)", "Delete MethodDeclaration(366)", "Delete TextElement: Gets the parent directory of the path being looked up.(367)", "Delete TagElement(368)", "Delete SimpleName: IllegalStateException(369)", "Delete TextElement:  if the result did not(370)", "Delete SimpleName: parentFound(371)", "Delete MethodRef(372)", "Delete TextElement:  find a parent key(373)", "Delete TagElement: @linkplain(374)", "Delete TagElement: @throws(375)", "Delete Javadoc(376)", "Delete Modifier: public(377)", "Delete SimpleName: File(378)", "Delete SimpleType: File(379)", "Delete SimpleName: parent(380)", "Delete SimpleName: checkState(381)", "Delete SimpleName: parentFound(382)", "Delete MethodInvocation(383)", "Delete StringLiteral: \"parent was not found\"(384)", "Delete MethodInvocation(385)", "Delete ExpressionStatement(386)", "Delete SimpleName: parent(387)", "Delete ReturnStatement(388)", "Delete Block(389)", "Delete MethodDeclaration(390)", "Delete TextElement: Gets the file that was being looked up.(391)", "Delete TagElement(392)", "Delete SimpleName: IllegalStateException(393)", "Delete TextElement:  if the result was not (394)", "Delete SimpleName: found(395)", "Delete MethodRef(396)", "Delete TextElement:  not found(397)", "Delete TagElement: @linkplain(398)", "Delete TagElement: @throws(399)", "Delete Javadoc(400)", "Delete Modifier: public(401)", "Delete SimpleName: File(402)", "Delete SimpleType: File(403)", "Delete SimpleName: file(404)", "Delete SimpleName: checkState(405)", "Delete SimpleName: found(406)", "Delete MethodInvocation(407)", "Delete StringLiteral: \"file was not found\"(408)", "Delete MethodInvocation(409)", "Delete ExpressionStatement(410)", "Delete SimpleName: file(411)", "Delete ReturnStatement(412)", "Delete Block(413)", "Delete MethodDeclaration(414)", "Delete TextElement: Gets the actual name for the directory entry that was found.(415)", "Delete TagElement(416)", "Delete SimpleName: IllegalStateException(417)", "Delete TextElement:  if the result was not (418)", "Delete SimpleName: found(419)", "Delete MethodRef(420)", "Delete TextElement:  not found(421)", "Delete TagElement: @linkplain(422)", "Delete TagElement: @throws(423)", "Delete Javadoc(424)", "Delete Modifier: public(425)", "Delete SimpleName: Name(426)", "Delete SimpleType: Name(427)", "Delete SimpleName: name(428)", "Delete SimpleName: checkState(429)", "Delete SimpleName: found(430)", "Delete MethodInvocation(431)", "Delete StringLiteral: \"file was not found\"(432)", "Delete MethodInvocation(433)", "Delete ExpressionStatement(434)", "Delete SimpleName: name(435)", "Delete ReturnStatement(436)", "Delete Block(437)", "Delete MethodDeclaration(438)", "Delete TextElement: Returns the file key that was found or (439)", "Delete TextElement:  null(440)", "Delete TagElement: @code(441)", "Delete TextElement:  if not found.(442)", "Delete TagElement(443)", "Delete Javadoc(444)", "Delete SimpleName: Nullable(445)", "Delete MarkerAnnotation(446)", "Delete Modifier: public(447)", "Delete SimpleName: File(448)", "Delete SimpleType: File(449)", "Delete SimpleName: orNull(450)", "Delete SimpleName: file(451)", "Delete ReturnStatement(452)", "Delete Block(453)", "Delete MethodDeclaration(454)", "Delete SimpleName: Override(455)", "Delete MarkerAnnotation(456)", "Delete Modifier: public(457)", "Delete SimpleName: String(458)", "Delete SimpleType: String(459)", "Delete SimpleName: toString(460)", "Delete SimpleName: Objects(461)", "Delete SimpleName: toStringHelper(462)", "Delete ThisExpression(463)", "Delete MethodInvocation(464)", "Delete SimpleName: omitNullValues(465)", "Delete MethodInvocation(466)", "Delete SimpleName: add(467)", "Delete StringLiteral: \"parent\"(468)", "Delete SimpleName: parent(469)", "Delete MethodInvocation(470)", "Delete SimpleName: add(471)", "Delete StringLiteral: \"file\"(472)", "Delete SimpleName: file(473)", "Delete MethodInvocation(474)", "Delete SimpleName: toString(475)", "Delete MethodInvocation(476)", "Delete ReturnStatement(477)", "Delete Block(478)", "Delete MethodDeclaration(479)", "Delete TypeDeclaration: class(480)"]}}, {"PathService_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS PrimitiveType: void to MethodDeclaration at 3", "INS SimpleName: fileSystem to SingleVariableDeclaration at 1", "INS Modifier: abstract to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: JimfsFileSystem to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: setFileSystem to MethodDeclaration at 4", "INS TextElement: Sets the file system to use for created paths. to TagElement at 0", "INS SimpleName: JimfsFileSystem to SimpleType: JimfsFileSystem at 0"]}]}}, {"PathService_diff": {"operations": ["Insert MethodDeclaration(128) into TypeDeclaration: class(817) at 7", "Insert Javadoc(119) into MethodDeclaration(128) at 0", "Insert Modifier: public(120) into MethodDeclaration(128) at 1", "Insert Modifier: abstract(121) into MethodDeclaration(128) at 2", "Insert PrimitiveType: void(122) into MethodDeclaration(128) at 3", "Insert SimpleName: setFileSystem(123) into MethodDeclaration(128) at 4", "Insert SingleVariableDeclaration(127) into MethodDeclaration(128) at 5", "Insert TagElement(118) into Javadoc(119) at 0", "Insert SimpleType: JimfsFileSystem(125) into SingleVariableDeclaration(127) at 0", "Insert SimpleName: fileSystem(126) into SingleVariableDeclaration(127) at 1", "Insert TextElement: Sets the file system to use for created paths.(117) into TagElement(118) at 0", "Insert SimpleName: JimfsFileSystem(124) into SimpleType: JimfsFileSystem(125) at 0"]}}, {"RealPathService_cluster": {"actions": [{"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS Modifier: public to MethodDeclaration at 1", "operations": ["INS Modifier: public to MethodDeclaration at 1"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement", "DEL Javadoc", "DEL TextElement: Allow the file system to be set after the path service is created."]}]}}, {"RealPathService_diff": {"operations": ["Insert MarkerAnnotation(39) into MethodDeclaration(65) at 0", "Insert Modifier: public(40) into MethodDeclaration(65) at 1", "Insert SimpleName: Override(38) into MarkerAnnotation(39) at 0", "Delete TextElement: Allow the file system to be set after the path service is created.(38)", "Delete TagElement(39)", "Delete Javadoc(40)"]}}], "commit_stats": [{"total_files": 20, "deleted_files": 4, "testing": "True", "maintenance": "False", "build": "False"}]}