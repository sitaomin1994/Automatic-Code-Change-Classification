{"application": "google-closure-stylesheets", "csha": "81d76a6ae2b22ae24d99b9214041bc99f43d4f3b", "files": [{"SourceCodeLocation_cluster": {"actions": [{"root": "INS ExpressionStatement to Block at 3", "operations": ["INS ExpressionStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"The location passed is not valid.\" to MethodInvocation at 3"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS StringLiteral: \"The location passed is not valid.\" to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 4"]}, {"root": "UPDATE from String to Preconditions", "operations": ["UPD SimpleName: String from String to Preconditions", "UPD SimpleName: String from String to Preconditions"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: format to MethodInvocation at 1", "MOV SimpleName: String to MethodInvocation at 0"]}, {"root": "UPDATE from format to checkArgument", "operations": ["UPD SimpleName: format from format to checkArgument", "UPD SimpleName: format from format to checkArgument"]}, {"root": "UPDATE from && to ||", "operations": ["UPD InfixExpression: && from && to ||"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV InfixExpression: && to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: String to MethodInvocation at 0", "MOV SimpleName: format to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV MethodInvocation to InfixExpression: && at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV MethodInvocation to InfixExpression: && at 1"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !"]}, {"root": "DEL IfStatement", "operations": ["DEL InfixExpression: +", "DEL SimpleName: characterIndex", "DEL SimpleName: IllegalArgumentException", "DEL ThrowStatement", "DEL IfStatement", "DEL SimpleType: IllegalArgumentException", "DEL StringLiteral: \"The location passed \"", "DEL StringLiteral: \"(lineNumber %d, indexInLine %d, characterIndex %d) \"", "DEL ClassInstanceCreation", "DEL StringLiteral: \"is not valid.\"", "DEL MethodInvocation", "DEL SimpleName: lineNumber", "DEL Block", "DEL SimpleName: indexInLine"]}, {"root": "DEL IfStatement", "operations": ["DEL InfixExpression: +", "DEL ThrowStatement", "DEL SimpleName: lineNumber", "DEL ClassInstanceCreation", "DEL StringLiteral: \"(lineNumber %d, indexInLine %d, characterIndex %d) \"", "DEL StringLiteral: \"is not plausible.\"", "DEL Block", "DEL StringLiteral: \"The location passed \"", "DEL PrefixExpression: !", "DEL IfStatement", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: characterIndex", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: indexInLine", "DEL MethodInvocation"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: UNKNOWN_SOURCE_CODE", "DEL StringLiteral: \"unknown\"", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL SimpleType: SourceCode", "DEL SimpleName: SourceCode", "DEL Modifier: static", "DEL StringLiteral: \"\"", "DEL SimpleName: SourceCode", "DEL Modifier: private", "DEL Modifier: final", "DEL SimpleType: SourceCode", "DEL ClassInstanceCreation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL SimpleName: result", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL SimpleName: hasValidUnknownCoordinates", "DEL SimpleName: checkState", "DEL NumberLiteral: 0", "DEL SimpleName: hasValidUnknownCoordinates", "DEL Block", "DEL SimpleName: SourceCodeLocation", "DEL SimpleName: isUnknown", "DEL SimpleName: checkState", "DEL NumberLiteral: 0", "DEL QualifiedName: result.begin", "DEL SimpleName: SourceCodeLocation", "DEL TextElement: Returns an unknown location.", "DEL SimpleName: getUnknownLocation", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL SimpleName: SourceCodeLocation", "DEL MethodInvocation", "DEL Modifier: public", "DEL PrefixExpression: -", "DEL PrefixExpression: -", "DEL NumberLiteral: 0", "DEL ClassInstanceCreation", "DEL Modifier: static", "DEL SimpleName: Preconditions", "DEL QualifiedName: result.end", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: Preconditions", "DEL SimpleType: SourceCodeLocation", "DEL Javadoc", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleType: SourceCodeLocation", "DEL SimpleName: result", "DEL NumberLiteral: 1", "DEL SimpleName: result", "DEL SimpleName: UNKNOWN_SOURCE_CODE", "DEL SimpleType: SourceCodeLocation", "DEL TagElement", "DEL SimpleName: checkState", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: Preconditions", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: SourceCodePoint", "DEL ReturnStatement", "DEL SimpleType: SourceCodePoint", "DEL SimpleName: begin", "DEL Modifier: public", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: getBegin"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: getEnd", "DEL ReturnStatement", "DEL SimpleName: SourceCodePoint", "DEL Modifier: public", "DEL SimpleName: end", "DEL SimpleType: SourceCodePoint", "DEL MethodDeclaration", "DEL Block"]}]}}, {"SourceCodeLocation_diff": {"operations": ["Insert ExpressionStatement(126) into Block(134) at 3", "Insert ExpressionStatement(133) into Block(134) at 4", "Insert MethodInvocation(125) into ExpressionStatement(126) at 0", "Insert MethodInvocation(132) into ExpressionStatement(133) at 0", "Update SimpleName: String(127) to Preconditions", "Move SimpleName: String(127) into MethodInvocation(125) at 0", "Update SimpleName: format(128) to checkArgument", "Move SimpleName: format(128) into MethodInvocation(125) at 1", "Update InfixExpression: &&(124) to ||", "Move InfixExpression: &&(124) into MethodInvocation(125) at 2", "Insert StringLiteral: \"The location passed is not valid.\"(124) into MethodInvocation(125) at 3", "Update SimpleName: String(146) to Preconditions", "Move SimpleName: String(146) into MethodInvocation(132) at 0", "Update SimpleName: format(147) to checkArgument", "Move SimpleName: format(147) into MethodInvocation(132) at 1", "Move MethodInvocation(142) into MethodInvocation(132) at 2", "Insert StringLiteral: \"The location passed is not valid.\"(131) into MethodInvocation(132) at 3", "Move MethodInvocation(119) into InfixExpression: ||(123) at 0", "Move MethodInvocation(122) into InfixExpression: ||(123) at 1", "Delete Modifier: public(52)", "Delete PrefixExpression: !(120)", "Delete PrefixExpression: !(123)", "Delete SimpleName: IllegalArgumentException(125)", "Delete SimpleType: IllegalArgumentException(126)", "Delete StringLiteral: \"The location passed \"(129)", "Delete StringLiteral: \"(lineNumber %d, indexInLine %d, characterIndex %d) \"(130)", "Delete StringLiteral: \"is not valid.\"(131)", "Delete InfixExpression: +(132)", "Delete SimpleName: lineNumber(133)", "Delete SimpleName: indexInLine(134)", "Delete SimpleName: characterIndex(135)", "Delete MethodInvocation(136)", "Delete ClassInstanceCreation(137)", "Delete ThrowStatement(138)", "Delete Block(139)", "Delete IfStatement(140)", "Delete PrefixExpression: !(143)", "Delete SimpleName: IllegalArgumentException(144)", "Delete SimpleType: IllegalArgumentException(145)", "Delete StringLiteral: \"The location passed \"(148)", "Delete StringLiteral: \"(lineNumber %d, indexInLine %d, characterIndex %d) \"(149)", "Delete StringLiteral: \"is not plausible.\"(150)", "Delete InfixExpression: +(151)", "Delete SimpleName: lineNumber(152)", "Delete SimpleName: indexInLine(153)", "Delete SimpleName: characterIndex(154)", "Delete MethodInvocation(155)", "Delete ClassInstanceCreation(156)", "Delete ThrowStatement(157)", "Delete Block(158)", "Delete IfStatement(159)", "Delete Modifier: private(375)", "Delete Modifier: static(376)", "Delete Modifier: final(377)", "Delete SimpleName: SourceCode(378)", "Delete SimpleType: SourceCode(379)", "Delete SimpleName: UNKNOWN_SOURCE_CODE(380)", "Delete SimpleName: SourceCode(381)", "Delete SimpleType: SourceCode(382)", "Delete StringLiteral: \"unknown\"(383)", "Delete StringLiteral: \"\"(384)", "Delete ClassInstanceCreation(385)", "Delete VariableDeclarationFragment(386)", "Delete FieldDeclaration(387)", "Delete TextElement: Returns an unknown location.(388)", "Delete TagElement(389)", "Delete Javadoc(390)", "Delete Modifier: public(391)", "Delete Modifier: static(392)", "Delete SimpleName: SourceCodeLocation(393)", "Delete SimpleType: SourceCodeLocation(394)", "Delete SimpleName: getUnknownLocation(395)", "Delete SimpleName: SourceCodeLocation(396)", "Delete SimpleType: SourceCodeLocation(397)", "Delete SimpleName: result(398)", "Delete SimpleName: SourceCodeLocation(399)", "Delete SimpleType: SourceCodeLocation(400)", "Delete SimpleName: UNKNOWN_SOURCE_CODE(401)", "Delete NumberLiteral: 1(402)", "Delete PrefixExpression: -(403)", "Delete NumberLiteral: 0(404)", "Delete NumberLiteral: 0(405)", "Delete NumberLiteral: 1(406)", "Delete PrefixExpression: -(407)", "Delete NumberLiteral: 0(408)", "Delete NumberLiteral: 0(409)", "Delete ClassInstanceCreation(410)", "Delete VariableDeclarationFragment(411)", "Delete VariableDeclarationStatement(412)", "Delete SimpleName: Preconditions(413)", "Delete SimpleName: checkState(414)", "Delete SimpleName: result(415)", "Delete SimpleName: isUnknown(416)", "Delete MethodInvocation(417)", "Delete MethodInvocation(418)", "Delete ExpressionStatement(419)", "Delete SimpleName: Preconditions(420)", "Delete SimpleName: checkState(421)", "Delete QualifiedName: result.begin(422)", "Delete SimpleName: hasValidUnknownCoordinates(423)", "Delete MethodInvocation(424)", "Delete MethodInvocation(425)", "Delete ExpressionStatement(426)", "Delete SimpleName: Preconditions(427)", "Delete SimpleName: checkState(428)", "Delete QualifiedName: result.end(429)", "Delete SimpleName: hasValidUnknownCoordinates(430)", "Delete MethodInvocation(431)", "Delete MethodInvocation(432)", "Delete ExpressionStatement(433)", "Delete SimpleName: result(434)", "Delete ReturnStatement(435)", "Delete Block(436)", "Delete MethodDeclaration(437)", "Delete Modifier: public(653)", "Delete SimpleName: SourceCodePoint(654)", "Delete SimpleType: SourceCodePoint(655)", "Delete SimpleName: getBegin(656)", "Delete SimpleName: begin(657)", "Delete ReturnStatement(658)", "Delete Block(659)", "Delete MethodDeclaration(660)", "Delete Modifier: public(661)", "Delete SimpleName: SourceCodePoint(662)", "Delete SimpleType: SourceCodePoint(663)", "Delete SimpleName: getEnd(664)", "Delete SimpleName: end(665)", "Delete ReturnStatement(666)", "Delete Block(667)", "Delete MethodDeclaration(668)"]}}, {"SourceCodeLocationBuilder_cluster": {"actions": [{"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL SimpleName: Preconditions", "DEL SimpleName: begin", "DEL Block", "DEL SimpleName: begin", "DEL SimpleName: begin", "DEL SimpleName: SourceCodeLocationBuilder", "DEL SimpleName: setBeginLocation", "DEL MethodInvocation", "DEL SimpleType: SourceCodeLocationBuilder", "DEL ReturnStatement", "DEL SimpleName: checkLocationIsNotAlreadyCreated", "DEL ExpressionStatement", "DEL SimpleName: getLineNumber", "DEL SingleVariableDeclaration", "DEL QualifiedName: SourceCodeLocation.SourceCodePoint", "DEL SimpleName: getCharacterIndex", "DEL SimpleType: SourceCodeLocation.SourceCodePoint", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: checkNotNull", "DEL SimpleName: begin", "DEL ExpressionStatement", "DEL Modifier: public", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: setBeginLocation", "DEL ThisExpression", "DEL SimpleName: getIndexInLine", "DEL SimpleName: begin"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ExpressionStatement", "DEL SimpleName: SourceCodeLocationBuilder", "DEL ThisExpression", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getLineNumber", "DEL Block", "DEL SimpleName: setEndLocation", "DEL SimpleName: setEndLocation", "DEL SimpleName: checkLocationIsNotAlreadyCreated", "DEL SimpleName: end", "DEL QualifiedName: SourceCodeLocation.SourceCodePoint", "DEL MethodDeclaration", "DEL SimpleType: SourceCodeLocationBuilder", "DEL SimpleName: end", "DEL SimpleName: end", "DEL SimpleName: end", "DEL SimpleName: getCharacterIndex", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: end", "DEL SimpleName: getIndexInLine", "DEL SingleVariableDeclaration", "DEL SimpleName: checkNotNull", "DEL MethodInvocation", "DEL SimpleType: SourceCodeLocation.SourceCodePoint", "DEL SimpleName: Preconditions", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL MethodInvocation", "DEL Modifier: public", "DEL MethodInvocation"]}]}}, {"SourceCodeLocationBuilder_diff": {"operations": ["Delete Modifier: public(215)", "Delete SimpleName: SourceCodeLocationBuilder(216)", "Delete SimpleType: SourceCodeLocationBuilder(217)", "Delete SimpleName: setBeginLocation(218)", "Delete QualifiedName: SourceCodeLocation.SourceCodePoint(219)", "Delete SimpleType: SourceCodeLocation.SourceCodePoint(220)", "Delete SimpleName: begin(221)", "Delete SingleVariableDeclaration(222)", "Delete SimpleName: checkLocationIsNotAlreadyCreated(223)", "Delete MethodInvocation(224)", "Delete ExpressionStatement(225)", "Delete SimpleName: Preconditions(226)", "Delete SimpleName: checkNotNull(227)", "Delete SimpleName: begin(228)", "Delete MethodInvocation(229)", "Delete ExpressionStatement(230)", "Delete SimpleName: setBeginLocation(231)", "Delete SimpleName: begin(232)", "Delete SimpleName: getCharacterIndex(233)", "Delete MethodInvocation(234)", "Delete SimpleName: begin(235)", "Delete SimpleName: getLineNumber(236)", "Delete MethodInvocation(237)", "Delete SimpleName: begin(238)", "Delete SimpleName: getIndexInLine(239)", "Delete MethodInvocation(240)", "Delete MethodInvocation(241)", "Delete ExpressionStatement(242)", "Delete ThisExpression(243)", "Delete ReturnStatement(244)", "Delete Block(245)", "Delete MethodDeclaration(246)", "Delete Modifier: public(321)", "Delete SimpleName: SourceCodeLocationBuilder(322)", "Delete SimpleType: SourceCodeLocationBuilder(323)", "Delete SimpleName: setEndLocation(324)", "Delete QualifiedName: SourceCodeLocation.SourceCodePoint(325)", "Delete SimpleType: SourceCodeLocation.SourceCodePoint(326)", "Delete SimpleName: end(327)", "Delete SingleVariableDeclaration(328)", "Delete SimpleName: checkLocationIsNotAlreadyCreated(329)", "Delete MethodInvocation(330)", "Delete ExpressionStatement(331)", "Delete SimpleName: Preconditions(332)", "Delete SimpleName: checkNotNull(333)", "Delete SimpleName: end(334)", "Delete MethodInvocation(335)", "Delete ExpressionStatement(336)", "Delete SimpleName: setEndLocation(337)", "Delete SimpleName: end(338)", "Delete SimpleName: getCharacterIndex(339)", "Delete MethodInvocation(340)", "Delete SimpleName: end(341)", "Delete SimpleName: getLineNumber(342)", "Delete MethodInvocation(343)", "Delete SimpleName: end(344)", "Delete SimpleName: getIndexInLine(345)", "Delete MethodInvocation(346)", "Delete MethodInvocation(347)", "Delete ExpressionStatement(348)", "Delete ThisExpression(349)", "Delete ReturnStatement(350)", "Delete Block(351)", "Delete MethodDeclaration(352)"]}}, {"GssError_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS ExpressionStatement to Block at 3", "INS SimpleName: append to MethodInvocation at 1", "INS ExpressionStatement to Block at 6", "INS SimpleType: StringBuilder to VariableDeclarationStatement at 0", "INS ForStatement to Block at 5", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: append to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS NumberLiteral: 1 to VariableDeclarationFragment at 1", "INS StringLiteral: \" in \" to MethodInvocation at 2", "INS Block to MethodDeclaration at 3", "INS SimpleName: format to Assignment: = at 0", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS PostfixExpression: ++ to ForStatement at 2", "INS SimpleType: StringBuilder to ClassInstanceCreation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: sb to MethodInvocation at 0", "INS Block to ForStatement at 3", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS SimpleName: sb to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \":\\n\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: message to MethodInvocation at 2", "INS VariableDeclarationExpression to ForStatement at 0", "INS StringLiteral: \" column \" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS CharacterLiteral: '^' to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS ExpressionStatement to Block at 7", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: sb to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS CharacterLiteral: ' ' to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS CharacterLiteral: '\\n' to MethodInvocation at 2", "INS IfStatement to Block at 0", "INS ExpressionStatement to Block at 4", "INS CharacterLiteral: '\\n' to MethodInvocation at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 1", "MOV Modifier: public to MethodDeclaration at 0", "MOV SimpleName: format to MethodDeclaration at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS StringLiteral: \" at line \" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: sb to MethodInvocation at 0"]}, {"root": "UPDATE from - to <", "operations": ["UPD InfixExpression: - from - to <"]}, {"root": "MOVE from ForStatement", "operations": ["MOV InfixExpression: - to ForStatement at 1", "MOV SimpleName: Strings to MethodInvocation at 0", "MOV SimpleName: repeat to MethodInvocation at 1"]}, {"root": "UPDATE from String to StringBuilder", "operations": ["UPD SimpleName: String from String to StringBuilder", "UPD SimpleName: String from String to StringBuilder"]}, {"root": "MOVE from SimpleType: StringBuilder", "operations": ["MOV SimpleName: String to SimpleType: StringBuilder at 0"]}, {"root": "UPDATE from MessageFormat to sb", "operations": ["UPD SimpleName: MessageFormat from MessageFormat to sb", "UPD SimpleName: Strings from Strings to sb", "UPD SimpleName: pattern from pattern to sb", "UPD SimpleName: location from location to sb"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: pattern to VariableDeclarationFragment at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV MethodInvocation to MethodInvocation at 2", "MOV MethodInvocation to MethodInvocation at 2", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from format to append", "operations": ["UPD SimpleName: format from format to append", "UPD SimpleName: isUnknown from isUnknown to append", "UPD SimpleName: pattern from pattern to append", "UPD SimpleName: arguments from arguments to append"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: MessageFormat to MethodInvocation at 0", "MOV SimpleName: pattern to MethodInvocation at 1", "MOV SimpleName: arguments to MethodInvocation at 1", "MOV SimpleName: format to MethodInvocation at 1"]}, {"root": "INS SimpleName: i to InfixExpression: - at 0", "operations": ["INS SimpleName: i to InfixExpression: - at 0"]}, {"root": "UPDATE from repeat to toString", "operations": ["UPD SimpleName: repeat from repeat to toString"]}, {"root": "MOVE from SimpleType: StringBuilder", "operations": ["MOV SimpleName: String to SimpleType: StringBuilder at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: location to MethodInvocation at 0", "MOV SimpleName: isUnknown to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Strings", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.text.MessageFormat", "DEL ImportDeclaration"]}, {"root": "DEL Assignment: =", "operations": ["DEL ThisExpression", "DEL FieldAccess", "DEL SimpleName: arguments", "DEL Assignment: =", "DEL SimpleName: arguments"]}, {"root": "DEL NumberLiteral: 1", "operations": ["DEL NumberLiteral: 1"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: apply", "DEL Block", "DEL SimpleName: messageFormat", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: format", "DEL IfStatement", "DEL Block", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MethodInvocation"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: MessageFormatArgs", "DEL Modifier: public", "DEL Modifier: public", "DEL FieldDeclaration", "DEL TagElement", "DEL Modifier: final", "DEL SimpleName: apply", "DEL Block", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleType: Object", "DEL Dimension", "DEL ReturnStatement", "DEL FieldAccess", "DEL TagElement: @see", "DEL Modifier: static", "DEL SimpleName: pattern", "DEL SimpleType: String", "DEL ThisExpression", "DEL SimpleName: Object", "DEL Modifier: public", "DEL TextElement:  java.text.MessageFormat", "DEL SimpleName: arguments", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL FieldDeclaration", "DEL Modifier: public", "DEL SimpleType: Object", "DEL TextElement: A String template, together with values for the template holes.", "DEL SimpleName: MessageFormatArgs", "DEL SimpleType: String", "DEL SimpleName: pattern", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: pattern", "DEL Modifier: final", "DEL SimpleName: arguments", "DEL Assignment: =", "DEL SimpleName: String", "DEL TypeDeclaration: class", "DEL ArrayType: Object[]", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SingleVariableDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL StringLiteral: \" \"", "DEL MemberRef", "DEL Javadoc", "DEL SimpleName: MessageFormatArgs", "DEL TagElement", "DEL TextElement: ,", "DEL Block", "DEL StringLiteral: \"{0} in {1} at line {2} column {3}:\\n{4}\\n{5}^\\n\"", "DEL MethodInvocation", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL StringLiteral: \"{0} at unknown location\"", "DEL Block", "DEL IfStatement", "DEL TextElement: intended for use in FormattingLoggers and other contexts where it", "DEL SimpleName: format", "DEL TextElement: Returns a MessageFormatArgs representation of the object. This is", "DEL TextElement: is useful to maintain separation between boilerplate and details.", "DEL SimpleName: message", "DEL TagElement: @link", "DEL MethodDeclaration", "DEL SimpleName: messageFormat", "DEL TextElement: a parbaked precursor to the value given by ", "DEL ReturnStatement", "DEL SimpleName: MessageFormatArgs", "DEL SimpleName: MessageFormatArgs", "DEL Block", "DEL SimpleType: MessageFormatArgs", "DEL ClassInstanceCreation", "DEL SimpleType: MessageFormatArgs", "DEL SimpleType: MessageFormatArgs", "DEL SimpleName: message", "DEL MethodInvocation", "DEL ReturnStatement"]}]}}, {"GssError_diff": {"operations": ["Insert MethodDeclaration(259) into TypeDeclaration: class(431) at 12", "Move Modifier: public(163) into MethodDeclaration(259) at 0", "Move SimpleType: String(165) into MethodDeclaration(259) at 1", "Move SimpleName: format(166) into MethodDeclaration(259) at 2", "Insert Block(258) into MethodDeclaration(259) at 3", "Insert IfStatement(255) into Block(258) at 0", "Move ReturnStatement(180) into Block(258) at 1", "Move InfixExpression: ==(169) into IfStatement(255) at 0", "Insert Block(254) into IfStatement(255) at 1", "Insert VariableDeclarationStatement(173) into Block(254) at 0", "Insert ExpressionStatement(188) into Block(254) at 1", "Move ExpressionStatement(228) into Block(254) at 2", "Insert ExpressionStatement(208) into Block(254) at 3", "Insert ExpressionStatement(220) into Block(254) at 4", "Insert ForStatement(239) into Block(254) at 5", "Insert ExpressionStatement(247) into Block(254) at 6", "Insert ExpressionStatement(253) into Block(254) at 7", "Insert SimpleType: StringBuilder(167) into VariableDeclarationStatement(173) at 0", "Insert VariableDeclarationFragment(172) into VariableDeclarationStatement(173) at 1", "Insert MethodInvocation(187) into ExpressionStatement(188) at 0", "Insert MethodInvocation(197) into ExpressionStatement(198) at 0", "Insert MethodInvocation(207) into ExpressionStatement(208) at 0", "Insert MethodInvocation(219) into ExpressionStatement(220) at 0", "Insert VariableDeclarationExpression(225) into ForStatement(239) at 0", "Update InfixExpression: -(292) to <", "Move InfixExpression: -(292) into ForStatement(239) at 1", "Insert PostfixExpression: ++(232) into ForStatement(239) at 2", "Insert Block(238) into ForStatement(239) at 3", "Insert MethodInvocation(246) into ExpressionStatement(247) at 0", "Insert Assignment: =(252) into ExpressionStatement(253) at 0", "Update SimpleName: String(193) to StringBuilder", "Move SimpleName: String(193) into SimpleType: StringBuilder(167) at 0", "Update SimpleName: pattern(195) to sb", "Move SimpleName: pattern(195) into VariableDeclarationFragment(172) at 0", "Insert ClassInstanceCreation(171) into VariableDeclarationFragment(172) at 1", "Insert MethodInvocation(180) into MethodInvocation(187) at 0", "Insert SimpleName: append(181) into MethodInvocation(187) at 1", "Move MethodInvocation(276) into MethodInvocation(187) at 2", "Insert MethodInvocation(192) into MethodInvocation(197) at 0", "Insert SimpleName: append(193) into MethodInvocation(197) at 1", "Move MethodInvocation(279) into MethodInvocation(197) at 2", "Insert MethodInvocation(202) into MethodInvocation(207) at 0", "Insert SimpleName: append(203) into MethodInvocation(207) at 1", "Move MethodInvocation(282) into MethodInvocation(207) at 2", "Insert MethodInvocation(216) into MethodInvocation(219) at 0", "Update SimpleName: arguments(238) to append", "Move SimpleName: arguments(238) into MethodInvocation(219) at 1", "Insert CharacterLiteral: '\\n'(218) into MethodInvocation(219) at 2", "Insert PrimitiveType: int(221) into VariableDeclarationExpression(225) at 0", "Insert VariableDeclarationFragment(224) into VariableDeclarationExpression(225) at 1", "Insert SimpleName: i(226) into InfixExpression: <(230) at 0", "Insert SimpleName: i(231) into PostfixExpression: ++(232) at 0", "Insert ExpressionStatement(237) into Block(238) at 0", "Insert MethodInvocation(243) into MethodInvocation(246) at 0", "Insert SimpleName: append(244) into MethodInvocation(246) at 1", "Insert CharacterLiteral: '\\n'(245) into MethodInvocation(246) at 2", "Insert SimpleName: format(248) into Assignment: =(252) at 0", "Insert MethodInvocation(251) into Assignment: =(252) at 1", "Insert SimpleType: StringBuilder(170) into ClassInstanceCreation(171) at 0", "Insert MethodInvocation(177) into MethodInvocation(180) at 0", "Insert SimpleName: append(178) into MethodInvocation(180) at 1", "Insert StringLiteral: \" in \"(179) into MethodInvocation(180) at 2", "Insert SimpleName: sb(189) into MethodInvocation(192) at 0", "Insert SimpleName: append(190) into MethodInvocation(192) at 1", "Insert StringLiteral: \" at line \"(191) into MethodInvocation(192) at 2", "Insert SimpleName: sb(199) into MethodInvocation(202) at 0", "Insert SimpleName: append(200) into MethodInvocation(202) at 1", "Insert StringLiteral: \" column \"(201) into MethodInvocation(202) at 2", "Insert MethodInvocation(212) into MethodInvocation(216) at 0", "Update SimpleName: pattern(237) to append", "Move SimpleName: pattern(237) into MethodInvocation(216) at 1", "Move MethodInvocation(284) into MethodInvocation(216) at 2", "Insert SimpleName: i(222) into VariableDeclarationFragment(224) at 0", "Insert NumberLiteral: 1(223) into VariableDeclarationFragment(224) at 1", "Insert MethodInvocation(236) into ExpressionStatement(237) at 0", "Insert SimpleName: sb(240) into MethodInvocation(243) at 0", "Insert SimpleName: append(241) into MethodInvocation(243) at 1", "Insert CharacterLiteral: '^'(242) into MethodInvocation(243) at 2", "Update SimpleName: Strings(285) to sb", "Move SimpleName: Strings(285) into MethodInvocation(251) at 0", "Update SimpleName: repeat(286) to toString", "Move SimpleName: repeat(286) into MethodInvocation(251) at 1", "Update SimpleName: String(209) to StringBuilder", "Move SimpleName: String(209) into SimpleType: StringBuilder(170) at 0", "Insert SimpleName: sb(174) into MethodInvocation(177) at 0", "Insert SimpleName: append(175) into MethodInvocation(177) at 1", "Insert SimpleName: message(176) into MethodInvocation(177) at 2", "Update SimpleName: MessageFormat(235) to sb", "Move SimpleName: MessageFormat(235) into MethodInvocation(212) at 0", "Update SimpleName: format(236) to append", "Move SimpleName: format(236) into MethodInvocation(212) at 1", "Insert StringLiteral: \":\\n\"(211) into MethodInvocation(212) at 2", "Update SimpleName: location(258) to sb", "Move SimpleName: location(258) into MethodInvocation(236) at 0", "Update SimpleName: isUnknown(259) to append", "Move SimpleName: isUnknown(259) into MethodInvocation(236) at 1", "Insert CharacterLiteral: ' '(235) into MethodInvocation(236) at 2", "Delete QualifiedName: com.google.common.base.Strings(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.text.MessageFormat(8)", "Delete ImportDeclaration(9)", "Delete ThisExpression(223)", "Delete SimpleName: arguments(224)", "Delete FieldAccess(225)", "Delete SimpleName: arguments(226)", "Delete Assignment: =(227)", "Delete NumberLiteral: 1(291)", "Delete SimpleName: format(170)", "Delete SimpleName: messageFormat(171)", "Delete MethodInvocation(172)", "Delete SimpleName: apply(173)", "Delete MethodInvocation(174)", "Delete Assignment: =(175)", "Delete ExpressionStatement(176)", "Delete Block(177)", "Delete IfStatement(178)", "Delete Block(181)", "Delete MethodDeclaration(182)", "Delete TextElement: A String template, together with values for the template holes.(183)", "Delete TextElement:  java.text.MessageFormat(184)", "Delete TagElement: @see(185)", "Delete TagElement(186)", "Delete Javadoc(187)", "Delete Modifier: public(188)", "Delete Modifier: static(189)", "Delete SimpleName: MessageFormatArgs(190)", "Delete Modifier: public(191)", "Delete Modifier: final(192)", "Delete SimpleType: String(194)", "Delete VariableDeclarationFragment(196)", "Delete FieldDeclaration(197)", "Delete Modifier: public(198)", "Delete Modifier: final(199)", "Delete SimpleName: Object(200)", "Delete SimpleType: Object(201)", "Delete Dimension(202)", "Delete ArrayType: Object[](203)", "Delete SimpleName: arguments(204)", "Delete VariableDeclarationFragment(205)", "Delete FieldDeclaration(206)", "Delete Modifier: public(207)", "Delete SimpleName: MessageFormatArgs(208)", "Delete SimpleType: String(210)", "Delete SimpleName: pattern(211)", "Delete SingleVariableDeclaration(212)", "Delete SimpleName: Object(213)", "Delete SimpleType: Object(214)", "Delete SimpleName: arguments(215)", "Delete SingleVariableDeclaration(216)", "Delete ThisExpression(217)", "Delete SimpleName: pattern(218)", "Delete FieldAccess(219)", "Delete SimpleName: pattern(220)", "Delete Assignment: =(221)", "Delete ExpressionStatement(222)", "Delete Block(229)", "Delete MethodDeclaration(230)", "Delete Modifier: public(231)", "Delete SimpleName: String(232)", "Delete SimpleType: String(233)", "Delete SimpleName: apply(234)", "Delete MethodInvocation(239)", "Delete ReturnStatement(240)", "Delete Block(241)", "Delete MethodDeclaration(242)", "Delete TypeDeclaration: class(243)", "Delete TextElement: Returns a MessageFormatArgs representation of the object. This is(244)", "Delete TextElement: a parbaked precursor to the value given by (245)", "Delete SimpleName: format(246)", "Delete MemberRef(247)", "Delete TagElement: @link(248)", "Delete TextElement: ,(249)", "Delete TextElement: intended for use in FormattingLoggers and other contexts where it(250)", "Delete TextElement: is useful to maintain separation between boilerplate and details.(251)", "Delete TagElement(252)", "Delete Javadoc(253)", "Delete Modifier: public(254)", "Delete SimpleName: MessageFormatArgs(255)", "Delete SimpleType: MessageFormatArgs(256)", "Delete SimpleName: messageFormat(257)", "Delete MethodInvocation(260)", "Delete SimpleName: MessageFormatArgs(261)", "Delete SimpleType: MessageFormatArgs(262)", "Delete StringLiteral: \"{0} at unknown location\"(263)", "Delete SimpleName: message(264)", "Delete ClassInstanceCreation(265)", "Delete ReturnStatement(266)", "Delete Block(267)", "Delete SimpleName: MessageFormatArgs(268)", "Delete SimpleType: MessageFormatArgs(269)", "Delete StringLiteral: \"{0} in {1} at line {2} column {3}:\\n{4}\\n{5}^\\n\"(270)", "Delete SimpleName: message(271)", "Delete StringLiteral: \" \"(287)", "Delete MethodInvocation(293)", "Delete ClassInstanceCreation(294)", "Delete ReturnStatement(295)", "Delete Block(296)", "Delete IfStatement(297)", "Delete Block(298)", "Delete MethodDeclaration(299)"]}}, {"GssParserException_cluster": {"actions": [{"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}]}}, {"GssParserException_diff": {"operations": ["Delete Modifier: public(58)"]}}, {"LocationBoundingVisitor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.google.common.css.compiler.passes"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.Ordering"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.css.SourceCodeLocation"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.css.SourceCodeLocation.SourceCodePoint"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.css.SourceCodeLocationBuilder"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.css.compiler.ast.CssNode", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TextElement: SourceCodeLocations, but suppose we have such a node A with", "DEL SimpleName: loc", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: startVisit", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: result", "DEL TextElement: interval that contains a given node.", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: LocationBoundingVisitor", "DEL SimpleName: loc", "DEL SimpleName: SourceCodePoint", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL SimpleName: result", "DEL SimpleName: loc", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL TextElement: A     ?                       ?", "DEL SimpleName: isUnknown", "DEL SimpleType: LocationBoundingVisitor", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SimpleName: getEnd", "DEL SimpleType: SourceCodeLocation", "DEL TextElement: / \\", "DEL PrimitiveType: void", "DEL SimpleName: setEndLocation", "DEL SimpleName: isUnknown", "DEL SimpleName: loc", "DEL SimpleName: getBegin", "DEL SimpleName: v", "DEL Modifier: static", "DEL ReturnStatement", "DEL SimpleName: result", "DEL MethodInvocation", "DEL SimpleName: o", "DEL SimpleType: SourceCodeLocation", "DEL Assignment: =", "DEL SimpleName: getSourceCode", "DEL InfixExpression: ||", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: SourceCodeLocation", "DEL Modifier: public", "DEL SimpleName: upperBound", "DEL SimpleName: SourceCodeLocationBuilder", "DEL SimpleType: LocationBoundingVisitor", "DEL SimpleName: getSourceCodeLocation", "DEL SimpleName: location", "DEL SimpleName: n", "DEL SimpleName: n", "DEL Block", "DEL Block", "DEL SimpleName: result", "DEL QualifiedName: v.result", "DEL SimpleName: o", "DEL SimpleName: location", "DEL SimpleName: LocationBoundingVisitor", "DEL MethodInvocation", "DEL IfStatement", "DEL TextElement: A", "DEL SimpleName: CssNode", "DEL Assignment: =", "DEL IfStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: lowerBound", "DEL TextElement: Then we know that the subtree rooted at A includes markup beginning", "DEL VariableDeclarationStatement", "DEL SimpleName: max", "DEL SimpleName: setSourceCode", "DEL SimpleName: v", "DEL NullLiteral", "DEL SimpleType: Ordering", "DEL SimpleName: Ordering", "DEL ReturnStatement", "DEL SimpleName: SourceCodeLocation", "DEL TextElement: Concretely, let", "DEL Javadoc", "DEL SimpleName: Override", "DEL MethodInvocation", "DEL SimpleName: UniformVisitor", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: SourceCodeLocation", "DEL SimpleName: CssNode", "DEL SimpleName: loc", "DEL VariableDeclarationFragment", "DEL SimpleType: SourceCodePoint", "DEL Block", "DEL TextElement: A     5                       19", "DEL VariableDeclarationFragment", "DEL SimpleName: getEnd", "DEL VariableDeclarationFragment", "DEL SimpleName: n", "DEL SimpleName: bound", "DEL SimpleType: CssNode", "DEL InfixExpression: &&", "DEL InfixExpression: !=", "DEL SimpleName: natural", "DEL SimpleName: result", "DEL VariableDeclarationFragment", "DEL SimpleName: getSourceCodeLocation", "DEL SimpleType: SourceCodePoint", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: getBegin", "DEL TextElement: node  getBeginCharacterIndex  getEndCharacterIndex", "DEL Block", "DEL PrefixExpression: !", "DEL SimpleName: result", "DEL SimpleName: upperBound", "DEL MethodInvocation", "DEL SimpleType: SourceCodePoint", "DEL SimpleName: LocationBoundingVisitor", "DEL MethodInvocation", "DEL Block", "DEL TextElement: descendent nodes D_0, ... D_n that do have locations:", "DEL TextElement: Then we can estimate for A:", "DEL MethodInvocation", "DEL SimpleName: SourceCodePoint", "DEL ClassInstanceCreation", "DEL SimpleName: result", "DEL SimpleName: location", "DEL TextElement: D_1   17                      19", "DEL TextElement: <p>In typical CssTrees c. April 2013, most nodes do not have", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL SimpleName: min", "DEL SimpleType: CssNode", "DEL SimpleName: SourceCodePoint", "DEL SimpleName: SourceCodeLocation", "DEL SimpleType: UniformVisitor", "DEL SimpleName: o", "DEL MethodInvocation", "DEL ReturnStatement", "DEL FieldDeclaration", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: n", "DEL NullLiteral", "DEL SimpleName: result", "DEL SimpleName: setBeginLocation", "DEL TextElement: |   \\", "DEL SimpleName: n", "DEL SimpleName: getUnknownLocation", "DEL MethodInvocation", "DEL SimpleName: getSourceCodeLocation", "DEL SimpleName: loc", "DEL MethodInvocation", "DEL SimpleName: SourceCodeLocation", "DEL SimpleName: isUnknown", "DEL VariableDeclarationStatement", "DEL ParameterizedType: Ordering<SourceCodePoint>", "DEL SimpleName: enter", "DEL SimpleType: SourceCodeLocation", "DEL ExpressionStatement", "DEL TextElement: D_0   5                       15", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL MarkerAnnotation", "DEL TextElement: by min_0^n(beginLocation(D_i)) and ending by max_0^n(endLocation(D_i)).", "DEL QualifiedName: v.result", "DEL SimpleName: lowerBound", "DEL Block", "DEL TextElement: A pass for finding an approximation to a minimum-size SourceCodeLocation", "DEL TextElement: D_0  D_1", "DEL NullLiteral", "DEL TagElement", "DEL SimpleName: getVisitController", "DEL ReturnStatement", "DEL Block", "DEL Modifier: public", "DEL TextElement: -----", "DEL InfixExpression: ||", "DEL TypeDeclaration: class", "DEL SimpleName: location", "DEL SimpleName: Ordering", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL TextElement: ---   ---                     ---", "DEL SimpleType: SourceCodeLocation", "DEL NullLiteral", "DEL IfStatement", "DEL SimpleType: SourceCodeLocationBuilder", "DEL ExpressionStatement"]}]}}, {"LocationBoundingVisitor_diff": {"operations": ["Delete QualifiedName: com.google.common.css.compiler.passes(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.common.collect.Ordering(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.common.css.SourceCodeLocation(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.google.common.css.SourceCodeLocation.SourceCodePoint(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.google.common.css.SourceCodeLocationBuilder(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.google.common.css.compiler.ast.CssNode(10)", "Delete ImportDeclaration(11)", "Delete TextElement: A pass for finding an approximation to a minimum-size SourceCodeLocation(12)", "Delete TextElement: interval that contains a given node.(13)", "Delete TextElement: <p>In typical CssTrees c. April 2013, most nodes do not have(14)", "Delete TextElement: SourceCodeLocations, but suppose we have such a node A with(15)", "Delete TextElement: descendent nodes D_0, ... D_n that do have locations:(16)", "Delete TextElement: A(17)", "Delete TextElement: / \\(18)", "Delete TextElement: -----(19)", "Delete TextElement: |   \\(20)", "Delete TextElement: D_0  D_1(21)", "Delete TextElement: Then we know that the subtree rooted at A includes markup beginning(22)", "Delete TextElement: by min_0^n(beginLocation(D_i)) and ending by max_0^n(endLocation(D_i)).(23)", "Delete TextElement: Concretely, let(24)", "Delete TextElement: node  getBeginCharacterIndex  getEndCharacterIndex(25)", "Delete TextElement: ---   ---                     ---(26)", "Delete TextElement: A     ?                       ?(27)", "Delete TextElement: D_0   5                       15(28)", "Delete TextElement: D_1   17                      19(29)", "Delete TextElement: Then we can estimate for A:(30)", "Delete TextElement: A     5                       19(31)", "Delete TagElement(32)", "Delete Javadoc(33)", "Delete Modifier: public(34)", "Delete SimpleName: LocationBoundingVisitor(35)", "Delete SimpleName: UniformVisitor(36)", "Delete SimpleType: UniformVisitor(37)", "Delete Modifier: private(38)", "Delete SimpleName: SourceCodeLocation(39)", "Delete SimpleType: SourceCodeLocation(40)", "Delete SimpleName: result(41)", "Delete NullLiteral(42)", "Delete VariableDeclarationFragment(43)", "Delete FieldDeclaration(44)", "Delete SimpleName: Override(45)", "Delete MarkerAnnotation(46)", "Delete Modifier: public(47)", "Delete PrimitiveType: void(48)", "Delete SimpleName: enter(49)", "Delete SimpleName: CssNode(50)", "Delete SimpleType: CssNode(51)", "Delete SimpleName: n(52)", "Delete SingleVariableDeclaration(53)", "Delete SimpleName: SourceCodeLocation(54)", "Delete SimpleType: SourceCodeLocation(55)", "Delete SimpleName: loc(56)", "Delete SimpleName: n(57)", "Delete SimpleName: getSourceCodeLocation(58)", "Delete MethodInvocation(59)", "Delete VariableDeclarationFragment(60)", "Delete VariableDeclarationStatement(61)", "Delete SimpleName: loc(62)", "Delete NullLiteral(63)", "Delete InfixExpression: ==(64)", "Delete SimpleName: loc(65)", "Delete SimpleName: isUnknown(66)", "Delete MethodInvocation(67)", "Delete InfixExpression: ||(68)", "Delete ReturnStatement(69)", "Delete Block(70)", "Delete IfStatement(71)", "Delete SimpleName: result(72)", "Delete NullLiteral(73)", "Delete InfixExpression: ==(74)", "Delete SimpleName: result(75)", "Delete SimpleName: isUnknown(76)", "Delete MethodInvocation(77)", "Delete InfixExpression: ||(78)", "Delete SimpleName: result(79)", "Delete SimpleName: loc(80)", "Delete Assignment: =(81)", "Delete ExpressionStatement(82)", "Delete Block(83)", "Delete SimpleName: Ordering(84)", "Delete SimpleType: Ordering(85)", "Delete SimpleName: SourceCodePoint(86)", "Delete SimpleType: SourceCodePoint(87)", "Delete ParameterizedType: Ordering<SourceCodePoint>(88)", "Delete SimpleName: o(89)", "Delete SimpleName: Ordering(90)", "Delete SimpleName: natural(91)", "Delete MethodInvocation(92)", "Delete VariableDeclarationFragment(93)", "Delete VariableDeclarationStatement(94)", "Delete SimpleName: SourceCodePoint(95)", "Delete SimpleType: SourceCodePoint(96)", "Delete SimpleName: lowerBound(97)", "Delete SimpleName: o(98)", "Delete SimpleName: min(99)", "Delete SimpleName: result(100)", "Delete SimpleName: getBegin(101)", "Delete MethodInvocation(102)", "Delete SimpleName: loc(103)", "Delete SimpleName: getBegin(104)", "Delete MethodInvocation(105)", "Delete MethodInvocation(106)", "Delete VariableDeclarationFragment(107)", "Delete VariableDeclarationStatement(108)", "Delete SimpleName: SourceCodePoint(109)", "Delete SimpleType: SourceCodePoint(110)", "Delete SimpleName: upperBound(111)", "Delete SimpleName: o(112)", "Delete SimpleName: max(113)", "Delete SimpleName: result(114)", "Delete SimpleName: getEnd(115)", "Delete MethodInvocation(116)", "Delete SimpleName: loc(117)", "Delete SimpleName: getEnd(118)", "Delete MethodInvocation(119)", "Delete MethodInvocation(120)", "Delete VariableDeclarationFragment(121)", "Delete VariableDeclarationStatement(122)", "Delete SimpleName: result(123)", "Delete SimpleName: SourceCodeLocationBuilder(124)", "Delete SimpleType: SourceCodeLocationBuilder(125)", "Delete ClassInstanceCreation(126)", "Delete SimpleName: setSourceCode(127)", "Delete SimpleName: result(128)", "Delete SimpleName: getSourceCode(129)", "Delete MethodInvocation(130)", "Delete MethodInvocation(131)", "Delete SimpleName: setBeginLocation(132)", "Delete SimpleName: lowerBound(133)", "Delete MethodInvocation(134)", "Delete SimpleName: setEndLocation(135)", "Delete SimpleName: upperBound(136)", "Delete MethodInvocation(137)", "Delete SimpleName: getSourceCodeLocation(138)", "Delete MethodInvocation(139)", "Delete Assignment: =(140)", "Delete ExpressionStatement(141)", "Delete Block(142)", "Delete IfStatement(143)", "Delete Block(144)", "Delete MethodDeclaration(145)", "Delete Modifier: public(146)", "Delete Modifier: static(147)", "Delete SimpleName: SourceCodeLocation(148)", "Delete SimpleType: SourceCodeLocation(149)", "Delete SimpleName: bound(150)", "Delete SimpleName: CssNode(151)", "Delete SimpleType: CssNode(152)", "Delete SimpleName: n(153)", "Delete SingleVariableDeclaration(154)", "Delete SimpleName: SourceCodeLocation(155)", "Delete SimpleType: SourceCodeLocation(156)", "Delete SimpleName: location(157)", "Delete SimpleName: n(158)", "Delete SimpleName: getSourceCodeLocation(159)", "Delete MethodInvocation(160)", "Delete VariableDeclarationFragment(161)", "Delete VariableDeclarationStatement(162)", "Delete SimpleName: location(163)", "Delete NullLiteral(164)", "Delete InfixExpression: !=(165)", "Delete SimpleName: location(166)", "Delete SimpleName: isUnknown(167)", "Delete MethodInvocation(168)", "Delete PrefixExpression: !(169)", "Delete InfixExpression: &&(170)", "Delete SimpleName: location(171)", "Delete ReturnStatement(172)", "Delete Block(173)", "Delete IfStatement(174)", "Delete SimpleName: LocationBoundingVisitor(175)", "Delete SimpleType: LocationBoundingVisitor(176)", "Delete SimpleName: v(177)", "Delete SimpleName: LocationBoundingVisitor(178)", "Delete SimpleType: LocationBoundingVisitor(179)", "Delete ClassInstanceCreation(180)", "Delete VariableDeclarationFragment(181)", "Delete VariableDeclarationStatement(182)", "Delete SimpleName: n(183)", "Delete SimpleName: getVisitController(184)", "Delete MethodInvocation(185)", "Delete SimpleName: startVisit(186)", "Delete SimpleName: v(187)", "Delete MethodInvocation(188)", "Delete ExpressionStatement(189)", "Delete QualifiedName: v.result(190)", "Delete NullLiteral(191)", "Delete InfixExpression: ==(192)", "Delete SimpleName: SourceCodeLocation(193)", "Delete SimpleName: getUnknownLocation(194)", "Delete MethodInvocation(195)", "Delete ReturnStatement(196)", "Delete Block(197)", "Delete IfStatement(198)", "Delete QualifiedName: v.result(199)", "Delete ReturnStatement(200)", "Delete Block(201)", "Delete MethodDeclaration(202)", "Delete TypeDeclaration: class(203)"]}}], "commit_stats": [{"total_files": 7, "deleted_files": 3, "testing": "True", "maintenance": "False", "build": "False"}]}