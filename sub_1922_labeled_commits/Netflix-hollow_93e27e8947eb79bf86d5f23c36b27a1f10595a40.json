{"application": "Netflix-hollow", "csha": "93e27e8947eb79bf86d5f23c36b27a1f10595a40", "files": [{"CycleStatus_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: producer to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS SimpleName: HollowProducer to SimpleType: HollowProducer at 0", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleType: HollowProducer to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS TagElement: @return to Javadoc at 1", "INS SimpleName: HollowProducer to SimpleType: HollowProducer at 0", "INS SimpleName: producer to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: getProducer to MethodDeclaration at 3", "INS TagElement to Javadoc at 0", "INS Block to MethodDeclaration at 4", "INS Modifier: public to MethodDeclaration at 1", "INS TextElement:  the producer to TagElement: @return at 0", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS SimpleType: HollowProducer to MethodDeclaration at 2", "INS TextElement: The producer whose status is being described. to TagElement at 0", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "UPDATE from getSuccessInstance to success", "operations": ["UPD SimpleName: getSuccessInstance from getSuccessInstance to success", "UPD SimpleName: getSuccessInstance from getSuccessInstance to success"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: HollowProducer to SimpleType: HollowProducer at 0", "INS SimpleType: HollowProducer to SingleVariableDeclaration at 0", "INS SimpleName: producer to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: producer to SingleVariableDeclaration at 1", "INS SimpleName: HollowProducer to SimpleType: HollowProducer at 0", "INS SimpleType: HollowProducer to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from getFailInstance to fail", "operations": ["UPD SimpleName: getFailInstance from getFailInstance to fail"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleType: HollowProducer to SingleVariableDeclaration at 0", "INS SimpleName: HollowProducer to SimpleType: HollowProducer at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: producer to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 1", "operations": ["INS SimpleName: HollowProducer to SimpleType: HollowProducer at 0", "INS SingleVariableDeclaration to MethodDeclaration at 1", "INS SimpleType: HollowProducer to SingleVariableDeclaration at 0", "INS SimpleName: producer to SingleVariableDeclaration at 1"]}, {"root": "INS TextElement: Beta API subject to change. to TagElement at 0", "operations": ["INS TextElement: Beta API subject to change. to TagElement at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: producer to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: producer to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: CycleStatus to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: producer to ClassInstanceCreation at 1", "operations": ["INS SimpleName: producer to ClassInstanceCreation at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: CycleStatus to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: producer to ClassInstanceCreation at 1", "operations": ["INS SimpleName: producer to ClassInstanceCreation at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: CycleStatus to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: producer to ClassInstanceCreation at 1", "operations": ["INS SimpleName: producer to ClassInstanceCreation at 1"]}]}}, {"CycleStatus_diff": {"operations": ["Insert FieldDeclaration(34) into TypeDeclaration: class(266) at 4", "Insert MethodDeclaration(199) into TypeDeclaration: class(266) at 13", "Insert Modifier: private(28) into FieldDeclaration(34) at 0", "Insert Modifier: final(29) into FieldDeclaration(34) at 1", "Insert SimpleType: HollowProducer(31) into FieldDeclaration(34) at 2", "Insert VariableDeclarationFragment(33) into FieldDeclaration(34) at 3", "Update SimpleName: getSuccessInstance(54) to success", "Insert SingleVariableDeclaration(66) into MethodDeclaration(80) at 4", "Update SimpleName: getSuccessInstance(72) to success", "Insert SingleVariableDeclaration(89) into MethodDeclaration(107) at 4", "Update SimpleName: getFailInstance(94) to fail", "Insert SingleVariableDeclaration(116) into MethodDeclaration(134) at 4", "Insert SingleVariableDeclaration(139) into MethodDeclaration(186) at 1", "Insert Javadoc(191) into MethodDeclaration(199) at 0", "Insert Modifier: public(192) into MethodDeclaration(199) at 1", "Insert SimpleType: HollowProducer(194) into MethodDeclaration(199) at 2", "Insert SimpleName: getProducer(195) into MethodDeclaration(199) at 3", "Insert Block(198) into MethodDeclaration(199) at 4", "Insert TextElement: Beta API subject to change.(4) into TagElement(13) at 0", "Insert SimpleName: HollowProducer(30) into SimpleType: HollowProducer(31) at 0", "Insert SimpleName: producer(32) into VariableDeclarationFragment(33) at 0", "Insert SimpleType: HollowProducer(64) into SingleVariableDeclaration(66) at 0", "Insert SimpleName: producer(65) into SingleVariableDeclaration(66) at 1", "Insert SimpleType: HollowProducer(87) into SingleVariableDeclaration(89) at 0", "Insert SimpleName: producer(88) into SingleVariableDeclaration(89) at 1", "Insert SimpleType: HollowProducer(114) into SingleVariableDeclaration(116) at 0", "Insert SimpleName: producer(115) into SingleVariableDeclaration(116) at 1", "Insert SimpleType: HollowProducer(137) into SingleVariableDeclaration(139) at 0", "Insert SimpleName: producer(138) into SingleVariableDeclaration(139) at 1", "Insert ExpressionStatement(160) into Block(185) at 0", "Insert TagElement(188) into Javadoc(191) at 0", "Insert TagElement: @return(190) into Javadoc(191) at 1", "Insert SimpleName: HollowProducer(193) into SimpleType: HollowProducer(194) at 0", "Insert ReturnStatement(197) into Block(198) at 0", "Insert SimpleName: HollowProducer(63) into SimpleType: HollowProducer(64) at 0", "Insert SimpleName: HollowProducer(86) into SimpleType: HollowProducer(87) at 0", "Insert SimpleName: HollowProducer(113) into SimpleType: HollowProducer(114) at 0", "Insert SimpleName: HollowProducer(136) into SimpleType: HollowProducer(137) at 0", "Insert Assignment: =(159) into ExpressionStatement(160) at 0", "Insert TextElement: The producer whose status is being described.(187) into TagElement(188) at 0", "Insert TextElement:  the producer(189) into TagElement: @return(190) at 0", "Insert SimpleName: producer(196) into ReturnStatement(197) at 0", "Move SimpleType: CycleStatus(81) into ClassInstanceCreation(77) at 0", "Insert SimpleName: producer(72) into ClassInstanceCreation(77) at 1", "Move SimpleType: CycleStatus(103) into ClassInstanceCreation(104) at 0", "Insert SimpleName: producer(99) into ClassInstanceCreation(104) at 1", "Move SimpleType: CycleStatus(59) into ClassInstanceCreation(131) at 0", "Insert SimpleName: producer(126) into ClassInstanceCreation(131) at 1", "Insert FieldAccess(157) into Assignment: =(159) at 0", "Insert SimpleName: producer(158) into Assignment: =(159) at 1", "Insert ThisExpression(155) into FieldAccess(157) at 0", "Insert SimpleName: producer(156) into FieldAccess(157) at 1"]}}, {"HollowProducerListener_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: java.util.EventListener to ImportDeclaration at 0"]}, {"root": "INS SimpleType: EventListener to TypeDeclaration: interface at 3", "operations": ["INS SimpleName: EventListener to SimpleType: EventListener at 0", "INS SimpleType: EventListener to TypeDeclaration: interface at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: HollowProducer to SimpleType: HollowProducer at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: HollowProducer to SingleVariableDeclaration at 0", "INS SimpleName: producer to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: HollowProducer to SimpleType: HollowProducer at 0", "INS SimpleType: HollowProducer to SingleVariableDeclaration at 0", "INS SimpleName: producer to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: HollowProducer to SimpleType: HollowProducer at 0", "INS SimpleType: HollowProducer to SingleVariableDeclaration at 0", "INS SimpleName: producer to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: producer to SingleVariableDeclaration at 1", "INS SimpleName: HollowProducer to SimpleType: HollowProducer at 0", "INS SimpleType: HollowProducer to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: HollowProducer to SimpleType: HollowProducer at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: producer to SingleVariableDeclaration at 1", "INS SimpleType: HollowProducer to SingleVariableDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: producer to SingleVariableDeclaration at 1", "INS SimpleType: HollowProducer to SingleVariableDeclaration at 0", "INS SimpleName: HollowProducer to SimpleType: HollowProducer at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TextElement:  the producer which initialized to TagElement: @param at 1", "INS SimpleName: producer to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TagElement: @param to Javadoc at 1", "INS SimpleName: producer to TagElement: @param at 0", "INS TextElement:  the producer which restored to TagElement: @param at 1"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS SimpleName: producer to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1", "INS TextElement:  the producer which started a cycle to TagElement: @param at 1"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TextElement:  the producer to TagElement: @param at 1", "INS SimpleName: producer to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TextElement:  the producer beginning to publish to TagElement: @param at 1", "INS SimpleName: producer to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TextElement:  the proucer beginning the announcement to TagElement: @param at 1", "INS SimpleName: producer to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1"]}, {"root": "UPDATE from This method is called once  to Called after the ", "operations": ["UPD TextElement: This method is called once  from This method is called once  to Called after the ", "UPD TextElement: This method is called once  from This method is called once  to Called after the "]}, {"root": "UPDATE from  has been initialized with the expected schemas. to  has initialized its data model.", "operations": ["UPD TextElement:  has been initialized with the expected schemas. from  has been initialized with the expected schemas. to  has initialized its data model."]}, {"root": "UPDATE from  has restored from previously produced state. to  has restored its data state to the indicated version.", "operations": ["UPD TextElement:  has restored from previously produced state. from  has restored from previously produced state. to  has restored its data state to the indicated version."]}, {"root": "UPDATE from If previous state is not available or its the first state, then this callback will not be called. to If previous state is not available to restore from, then this callback will not be called.", "operations": ["UPD TextElement: If previous state is not available or its the first state, then this callback will not be called. from If previous state is not available or its the first state, then this callback will not be called. to If previous state is not available to restore from, then this callback will not be called."]}, {"root": "UPDATE from This method is called before starting to published the  to Called when the ", "operations": ["UPD TextElement: This method is called before starting to published the  from This method is called before starting to published the  to Called when the ", "UPD TextElement: This method is called before starting to populating the data into  from This method is called before starting to populating the data into  to Called when the "]}, {"root": "UPDATE from . to  has begun a new cycle.", "operations": ["UPD TextElement: . from . to  has begun a new cycle."]}, {"root": "INS TextElement: Called after the new state has been populated if the  to TagElement at 0", "operations": ["INS TextElement: Called after the new state has been populated if the  to TagElement at 0"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 1", "MOV TextElement:  produced by the  to TagElement: @code at 0", "MOV TagElement: @code to TagElement: @param at 2"]}, {"root": "INS TextElement:  detects that no data has changed, thus no snapshot nor delta should be produced.<p> to TagElement at 2", "operations": ["INS TextElement:  detects that no data has changed, thus no snapshot nor delta should be produced.<p> to TagElement at 2"]}, {"root": "UPDATE from This method is called when there is no change observed in write state engine, in the current cycle. This would also mean, no delta can be produced for publishing. to This is a terminal cycle stage; no other stages notifications will be sent for this cycle; the ", "operations": ["UPD TextElement: This method is called when there is no change observed in write state engine, in the current cycle. This would also mean, no delta can be produced for publishing. from This method is called when there is no change observed in write state engine, in the current cycle. This would also mean, no delta can be produced for publishing. to This is a terminal cycle stage; no other stages notifications will be sent for this cycle; the "]}, {"root": "INS TagElement: @link to TagElement at 4", "operations": ["INS SimpleName: CycleStatus to SimpleType: CycleStatus at 0", "INS MethodRefParameter to MethodRef at 1", "INS MethodRef to TagElement: @link at 0", "INS TagElement: @link to TagElement at 4", "INS SimpleName: onCycleComplete to MethodRef at 0", "INS SimpleType: CycleStatus to MethodRefParameter at 0"]}, {"root": "INS TextElement:  will be to TagElement at 5", "operations": ["INS TextElement:  will be to TagElement at 5"]}, {"root": "INS TextElement: notified with @{code SUCCESS}. to TagElement at 6", "operations": ["INS TextElement: notified with @{code SUCCESS}. to TagElement at 6"]}, {"root": "INS TagElement: @code to TagElement at 1", "operations": ["INS TagElement: @code to TagElement at 1"]}, {"root": "INS TextElement:  has begun publishing the  to TagElement at 2", "operations": ["INS TextElement:  has begun publishing the  to TagElement at 2"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 3"]}, {"root": "UPDATE from . to  produced this cycle.", "operations": ["UPD TextElement: . from . to  produced this cycle."]}, {"root": "UPDATE from This method is called upon successful publishing of the resulting  to Called after the publish stage finishes normally or abnormally. On successful completion this indicates that", "operations": ["UPD TextElement: This method is called upon successful publishing of the resulting  from This method is called upon successful publishing of the resulting  to Called after the publish stage finishes normally or abnormally. On successful completion this indicates that"]}, {"root": "UPDATE from  produced by the  to the ", "operations": ["UPD TextElement:  produced by the  from  produced by the  to the "]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 3"]}, {"root": "UPDATE from  HollowProducer. to  produced this cycle has been published to the blob store.", "operations": ["UPD TextElement:  HollowProducer. from  HollowProducer. to  produced this cycle has been published to the blob store."]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  HollowProducer. to TagElement at 4"]}, {"root": "UPDATE from  CycleStatus of the publish stage. to  CycleStatus of the publish stage. ", "operations": ["UPD TextElement:  CycleStatus of the publish stage. from  CycleStatus of the publish stage. to  CycleStatus of the publish stage. "]}, {"root": "INS TagElement: @link to TagElement: @param at 2", "operations": ["INS SimpleName: getStatus to MethodRef at 1", "INS MethodRef to TagElement: @link at 0", "INS TagElement: @link to TagElement: @param at 2", "INS QualifiedName: com.netflix.hollow.api.producer.CycleStatus to MethodRef at 0"]}, {"root": "INS TextElement:  will return  to TagElement: @param at 3", "operations": ["INS TextElement:  will return  to TagElement: @param at 3"]}, {"root": "INS TagElement: @code to TagElement: @param at 4", "operations": ["INS TagElement: @code to TagElement: @param at 4", "INS TextElement:  SUCCESS to TagElement: @code at 0"]}, {"root": "INS TextElement: when the publish was successful; @{code FAIL} otherwise. to TagElement: @param at 5", "operations": ["INS TextElement: when the publish was successful; @{code FAIL} otherwise. to TagElement: @param at 5"]}, {"root": "INS TextElement: Called when the  to TagElement at 0", "operations": ["INS TextElement: Called when the  to TagElement at 0"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 1"]}, {"root": "UPDATE from This method is called before announcing the availability of new  to  has begun announcing the ", "operations": ["UPD TextElement: This method is called before announcing the availability of new  from This method is called before announcing the availability of new  to  has begun announcing the "]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 3"]}, {"root": "UPDATE from . to  published this cycle.", "operations": ["UPD TextElement: . from . to  published this cycle."]}, {"root": "UPDATE from  that was announced. to  that will be announced.", "operations": ["UPD TextElement:  that was announced. from  that was announced. to  that will be announced."]}, {"root": "UPDATE from This method is called when availability of new  to Called after the announcement stage finishes normally or abnormally. On successful completion this indicates", "operations": ["UPD TextElement: This method is called when availability of new  from This method is called when availability of new  to Called after the announcement stage finishes normally or abnormally. On successful completion this indicates"]}, {"root": "INS TextElement: that the  to TagElement at 1", "operations": ["INS TextElement: that the  to TagElement at 1"]}, {"root": "UPDATE from  is announced. to  published this cycle has been announced to consumers.", "operations": ["UPD TextElement:  is announced. from  is announced. to  published this cycle has been announced to consumers."]}, {"root": "UPDATE from  CycleStatus of the announcement stage. to  CycleStatus of the announcement stage. ", "operations": ["UPD TextElement:  CycleStatus of the announcement stage. from  CycleStatus of the announcement stage. to  CycleStatus of the announcement stage. "]}, {"root": "INS TagElement: @link to TagElement: @param at 2", "operations": ["INS QualifiedName: com.netflix.hollow.api.producer.CycleStatus to MethodRef at 0", "INS SimpleName: getStatus to MethodRef at 1", "INS TagElement: @link to TagElement: @param at 2", "INS MethodRef to TagElement: @link at 0"]}, {"root": "INS TextElement:  will return  to TagElement: @param at 3", "operations": ["INS TextElement:  will return  to TagElement: @param at 3"]}, {"root": "INS TagElement: @code to TagElement: @param at 4", "operations": ["INS TextElement:  SUCCESS to TagElement: @code at 0", "INS TagElement: @code to TagElement: @param at 4"]}, {"root": "INS TextElement: when the announce was successful; @{code FAIL} otherwise. to TagElement: @param at 5", "operations": ["INS TextElement: when the announce was successful; @{code FAIL} otherwise. to TagElement: @param at 5"]}, {"root": "UPDATE from This method is called when  to Called after ", "operations": ["UPD TextElement: This method is called when  from This method is called when  to Called after "]}, {"root": "INS TagElement: @code to TagElement at 1", "operations": ["INS TagElement: @code to TagElement at 1", "INS TextElement:  HollowProducer to TagElement: @code at 0"]}, {"root": "UPDATE from  has successfully completed a cycle. to  has completed a cycle normally or abnormally.", "operations": ["UPD TextElement:  has successfully completed a cycle. from  has successfully completed a cycle. to  has completed a cycle normally or abnormally."]}, {"root": "UPDATE from  CycleStatus when cycle completed. to  CycleStatus of this cycle. ", "operations": ["UPD TextElement:  CycleStatus when cycle completed. from  CycleStatus when cycle completed. to  CycleStatus of this cycle. "]}, {"root": "INS TagElement: @link to TagElement: @param at 2", "operations": ["INS MethodRef to TagElement: @link at 0", "INS SimpleName: getStatus to MethodRef at 1", "INS QualifiedName: com.netflix.hollow.api.producer.CycleStatus to MethodRef at 0", "INS TagElement: @link to TagElement: @param at 2"]}, {"root": "INS TextElement:  will return  to TagElement: @param at 3", "operations": ["INS TextElement:  will return  to TagElement: @param at 3"]}, {"root": "INS TagElement: @code to TagElement: @param at 4", "operations": ["INS TagElement: @code to TagElement: @param at 4", "INS TextElement:  SUCCESS to TagElement: @code at 0"]}, {"root": "INS TextElement: when the a new state has been announced to consumers or when there were no changes to the data; it will return @{code FAIL} to TagElement: @param at 5", "operations": ["INS TextElement: when the a new state has been announced to consumers or when there were no changes to the data; it will return @{code FAIL} to TagElement: @param at 5"]}, {"root": "INS TextElement: when any stage fails or any other failure occurs during cycle processing. to TagElement: @param at 6", "operations": ["INS TextElement: when any stage fails or any other failure occurs during cycle processing. to TagElement: @param at 6"]}, {"root": "UPDATE from  produced by the  to  HollowProducer", "operations": ["UPD TextElement:  produced by the  from  produced by the  to  HollowProducer", "UPD TextElement:  HollowWriteStateEngine from  HollowWriteStateEngine to  HollowProducer"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code"]}]}}, {"HollowProducerListener_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(259) at 1", "Insert QualifiedName: java.util.EventListener(2) into ImportDeclaration(3) at 0", "Insert SimpleType: EventListener(22) into TypeDeclaration: interface(258) at 3", "Insert SimpleName: EventListener(21) into SimpleType: EventListener(22) at 0", "Insert SingleVariableDeclaration(38) into MethodDeclaration(39) at 4", "Insert SingleVariableDeclaration(62) into MethodDeclaration(66) at 4", "Insert SingleVariableDeclaration(88) into MethodDeclaration(92) at 4", "Insert SingleVariableDeclaration(120) into MethodDeclaration(124) at 4", "Insert SingleVariableDeclaration(146) into MethodDeclaration(150) at 4", "Move SingleVariableDeclaration(170) into MethodDeclaration(176) at 4", "Insert SingleVariableDeclaration(201) into MethodDeclaration(205) at 4", "Move SingleVariableDeclaration(117) into MethodDeclaration(257) at 4", "Insert TagElement: @param(30) into Javadoc(31) at 1", "Insert SimpleType: HollowProducer(36) into SingleVariableDeclaration(38) at 0", "Insert SimpleName: producer(37) into SingleVariableDeclaration(38) at 1", "Insert TagElement: @param(48) into Javadoc(55) at 1", "Insert SimpleType: HollowProducer(60) into SingleVariableDeclaration(62) at 0", "Insert SimpleName: producer(61) into SingleVariableDeclaration(62) at 1", "Insert TagElement: @param(74) into Javadoc(81) at 1", "Insert SimpleType: HollowProducer(86) into SingleVariableDeclaration(88) at 0", "Insert SimpleName: producer(87) into SingleVariableDeclaration(88) at 1", "Insert TagElement: @param(109) into Javadoc(113) at 1", "Insert SimpleType: HollowProducer(118) into SingleVariableDeclaration(120) at 0", "Insert SimpleName: producer(119) into SingleVariableDeclaration(120) at 1", "Insert TagElement: @param(135) into Javadoc(139) at 1", "Insert SimpleType: HollowProducer(144) into SingleVariableDeclaration(146) at 0", "Insert SimpleName: producer(145) into SingleVariableDeclaration(146) at 1", "Insert TagElement: @param(187) into Javadoc(194) at 1", "Insert SimpleType: HollowProducer(199) into SingleVariableDeclaration(201) at 0", "Insert SimpleName: producer(200) into SingleVariableDeclaration(201) at 1", "Update TextElement: This method is called once (19) to Called after the ", "Update TextElement:  has been initialized with the expected schemas.(22) to  has initialized its data model.", "Insert SimpleName: producer(28) into TagElement: @param(30) at 0", "Insert TextElement:  the producer which initialized(29) into TagElement: @param(30) at 1", "Insert SimpleName: HollowProducer(35) into SimpleType: HollowProducer(36) at 0", "Update TextElement: This method is called once (29) to Called after the ", "Update TextElement:  has restored from previously produced state.(32) to  has restored its data state to the indicated version.", "Update TextElement: If previous state is not available or its the first state, then this callback will not be called.(33) to If previous state is not available to restore from, then this callback will not be called.", "Insert SimpleName: producer(46) into TagElement: @param(48) at 0", "Insert TextElement:  the producer which restored(47) into TagElement: @param(48) at 1", "Insert SimpleName: HollowProducer(59) into SimpleType: HollowProducer(60) at 0", "Update TextElement: This method is called before starting to populating the data into (49) to Called when the ", "Update TextElement: .(52) to  has begun a new cycle.", "Insert SimpleName: producer(72) into TagElement: @param(74) at 0", "Insert TextElement:  the producer which started a cycle(73) into TagElement: @param(74) at 1", "Insert SimpleName: HollowProducer(85) into SimpleType: HollowProducer(86) at 0", "Insert TextElement: Called after the new state has been populated if the (93) into TagElement(106) at 0", "Move TagElement: @code(86) into TagElement(106) at 1", "Insert TextElement:  detects that no data has changed, thus no snapshot nor delta should be produced.<p>(96) into TagElement(106) at 2", "Update TextElement: This method is called when there is no change observed in write state engine, in the current cycle. This would also mean, no delta can be produced for publishing.(68) to This is a terminal cycle stage; no other stages notifications will be sent for this cycle; the ", "Insert TagElement: @link(103) into TagElement(106) at 4", "Insert TextElement:  will be(104) into TagElement(106) at 5", "Insert TextElement: notified with @{code SUCCESS}.(105) into TagElement(106) at 6", "Insert SimpleName: producer(107) into TagElement: @param(109) at 0", "Insert TextElement:  the producer(108) into TagElement: @param(109) at 1", "Insert SimpleName: HollowProducer(117) into SimpleType: HollowProducer(118) at 0", "Update TextElement: This method is called before starting to published the (81) to Called when the ", "Insert TagElement: @code(127) into TagElement(132) at 1", "Insert TextElement:  has begun publishing the (128) into TagElement(132) at 2", "Move TagElement: @code(121) into TagElement(132) at 3", "Update TextElement: .(87) to  produced this cycle.", "Insert SimpleName: producer(133) into TagElement: @param(135) at 0", "Insert TextElement:  the producer beginning to publish(134) into TagElement: @param(135) at 1", "Insert SimpleName: HollowProducer(143) into SimpleType: HollowProducer(144) at 0", "Update TextElement: This method is called upon successful publishing of the resulting (100) to Called after the publish stage finishes normally or abnormally. On successful completion this indicates that", "Update TextElement:  produced by the (103) to the ", "Move TagElement: @code(127) into TagElement(156) at 3", "Update TextElement:  HollowProducer.(104) to  produced this cycle has been published to the blob store.", "Move TextElement:  HollowProducer.(104) into TagElement(156) at 4", "Update TextElement:  CycleStatus of the publish stage.(108) to  CycleStatus of the publish stage. ", "Insert TagElement: @link(162) into TagElement: @param(167) at 2", "Insert TextElement:  will return (163) into TagElement: @param(167) at 3", "Insert TagElement: @code(165) into TagElement: @param(167) at 4", "Insert TextElement: when the publish was successful; @{code FAIL} otherwise.(166) into TagElement: @param(167) at 5", "Insert TextElement: Called when the (177) into TagElement(184) at 0", "Move TagElement: @code(157) into TagElement(184) at 1", "Update TextElement: This method is called before announcing the availability of new (119) to  has begun announcing the ", "Move TagElement: @code(102) into TagElement(184) at 3", "Update TextElement: .(122) to  published this cycle.", "Insert SimpleName: producer(185) into TagElement: @param(187) at 0", "Insert TextElement:  the proucer beginning the announcement(186) into TagElement: @param(187) at 1", "Move TagElement: @code(83) into TagElement: @param(193) at 2", "Update TextElement:  that was announced.(128) to  that will be announced.", "Insert SimpleName: HollowProducer(198) into SimpleType: HollowProducer(199) at 0", "Update TextElement: This method is called when availability of new (138) to Called after the announcement stage finishes normally or abnormally. On successful completion this indicates", "Insert TextElement: that the (207) into TagElement(211) at 1", "Update TextElement:  is announced.(141) to  published this cycle has been announced to consumers.", "Update TextElement:  CycleStatus of the announcement stage.(144) to  CycleStatus of the announcement stage. ", "Insert TagElement: @link(217) into TagElement: @param(222) at 2", "Insert TextElement:  will return (218) into TagElement: @param(222) at 3", "Insert TagElement: @code(220) into TagElement: @param(222) at 4", "Insert TextElement: when the announce was successful; @{code FAIL} otherwise.(221) into TagElement: @param(222) at 5", "Update TextElement: This method is called when (155) to Called after ", "Insert TagElement: @code(234) into TagElement(236) at 1", "Update TextElement:  has successfully completed a cycle.(158) to  has completed a cycle normally or abnormally.", "Update TextElement:  CycleStatus when cycle completed.(161) to  CycleStatus of this cycle. ", "Insert TagElement: @link(242) into TagElement: @param(248) at 2", "Insert TextElement:  will return (243) into TagElement: @param(248) at 3", "Insert TagElement: @code(245) into TagElement: @param(248) at 4", "Insert TextElement: when the a new state has been announced to consumers or when there were no changes to the data; it will return @{code FAIL}(246) into TagElement: @param(248) at 5", "Insert TextElement: when any stage fails or any other failure occurs during cycle processing.(247) into TagElement: @param(248) at 6", "Update TextElement:  HollowWriteStateEngine(50) to  HollowProducer", "Insert MethodRef(102) into TagElement: @link(103) at 0", "Update TextElement:  produced by the (84) to  HollowProducer", "Move TextElement:  produced by the (84) into TagElement: @code(127) at 0", "Insert MethodRef(161) into TagElement: @link(162) at 0", "Insert TextElement:  SUCCESS(164) into TagElement: @code(165) at 0", "Insert MethodRef(216) into TagElement: @link(217) at 0", "Insert TextElement:  SUCCESS(219) into TagElement: @code(220) at 0", "Insert TextElement:  HollowProducer(233) into TagElement: @code(234) at 0", "Insert MethodRef(241) into TagElement: @link(242) at 0", "Insert TextElement:  SUCCESS(244) into TagElement: @code(245) at 0", "Insert SimpleName: onCycleComplete(98) into MethodRef(102) at 0", "Insert MethodRefParameter(101) into MethodRef(102) at 1", "Insert QualifiedName: com.netflix.hollow.api.producer.CycleStatus(159) into MethodRef(161) at 0", "Insert SimpleName: getStatus(160) into MethodRef(161) at 1", "Insert QualifiedName: com.netflix.hollow.api.producer.CycleStatus(214) into MethodRef(216) at 0", "Insert SimpleName: getStatus(215) into MethodRef(216) at 1", "Insert QualifiedName: com.netflix.hollow.api.producer.CycleStatus(239) into MethodRef(241) at 0", "Insert SimpleName: getStatus(240) into MethodRef(241) at 1", "Insert SimpleType: CycleStatus(100) into MethodRefParameter(101) at 0", "Insert SimpleName: CycleStatus(99) into SimpleType: CycleStatus(100) at 0", "Delete TagElement: @code(105)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}