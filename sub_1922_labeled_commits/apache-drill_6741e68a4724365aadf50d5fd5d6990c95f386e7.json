{"application": "apache-drill", "csha": "6741e68a4724365aadf50d5fd5d6990c95f386e7", "files": [{"CastDateVarChar_cluster": {"actions": [{"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3", "INS QualifiedName: FunctionTemplate.ReturnType.STRING_CAST to MemberValuePair at 1"]}]}}, {"CastDateVarChar_diff": {"operations": ["Insert MemberValuePair(44) into NormalAnnotation(51) at 3", "Insert SimpleName: returnType(42) into MemberValuePair(44) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.STRING_CAST(43) into MemberValuePair(44) at 1"]}}, {"CastFunctionsSrcVarLenTargetVarLen_cluster": {"actions": [{"root": "DEL MemberValuePair", "operations": ["DEL MemberValuePair", "DEL QualifiedName: NullHandling.NULL_IF_NULL", "DEL SimpleName: nulls"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}]}}, {"CastFunctionsSrcVarLenTargetVarLen_diff": {"operations": ["Delete SimpleName: nulls(34)", "Delete QualifiedName: NullHandling.NULL_IF_NULL(35)", "Delete MemberValuePair(36)", "Delete Modifier: public(38)"]}}, {"CastFunctionsTargetVarLen_cluster": {"actions": [{"root": "DEL MemberValuePair", "operations": ["DEL SimpleName: nulls", "DEL QualifiedName: NullHandling.NULL_IF_NULL", "DEL MemberValuePair"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}]}}, {"CastFunctionsTargetVarLen_diff": {"operations": ["Delete SimpleName: nulls(36)", "Delete QualifiedName: NullHandling.NULL_IF_NULL(37)", "Delete MemberValuePair(38)", "Delete Modifier: public(40)"]}}, {"CastIntervalVarChar_cluster": {"actions": [{"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3", "INS QualifiedName: FunctionTemplate.ReturnType.STRING_CAST to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS QualifiedName: FunctionTemplate.ReturnType.STRING_CAST to MemberValuePair at 1", "INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3", "INS QualifiedName: FunctionTemplate.ReturnType.STRING_CAST to MemberValuePair at 1"]}]}}, {"CastIntervalVarChar_diff": {"operations": ["Insert MemberValuePair(104) into NormalAnnotation(108) at 3", "Insert MemberValuePair(353) into NormalAnnotation(357) at 3", "Insert MemberValuePair(519) into NormalAnnotation(526) at 3", "Insert SimpleName: returnType(102) into MemberValuePair(104) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.STRING_CAST(103) into MemberValuePair(104) at 1", "Insert SimpleName: returnType(351) into MemberValuePair(353) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.STRING_CAST(352) into MemberValuePair(353) at 1", "Insert SimpleName: returnType(517) into MemberValuePair(519) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.STRING_CAST(518) into MemberValuePair(519) at 1"]}}, {"ConvertToNullableHolder_cluster": {"actions": [{"root": "DEL NormalAnnotation", "operations": ["DEL SimpleName: name", "DEL QualifiedName: FunctionTemplate.NullHandling.INTERNAL", "DEL StringLiteral: \"convertToNullable${minor.class?upper_case}\"", "DEL MemberValuePair", "DEL SimpleName: nulls", "DEL MemberValuePair", "DEL NormalAnnotation", "DEL MemberValuePair", "DEL SimpleName: scope", "DEL QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_MAX_SCALE", "DEL SimpleName: FunctionTemplate"]}, {"root": "DEL MemberValuePair", "operations": ["DEL SimpleName: nulls", "DEL QualifiedName: FunctionTemplate.NullHandling.INTERNAL", "DEL MemberValuePair"]}]}}, {"ConvertToNullableHolder_diff": {"operations": ["Delete SimpleName: FunctionTemplate(10)", "Delete SimpleName: name(11)", "Delete StringLiteral: \"convertToNullable${minor.class?upper_case}\"(12)", "Delete MemberValuePair(13)", "Delete SimpleName: scope(14)", "Delete QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_MAX_SCALE(15)", "Delete MemberValuePair(16)", "Delete SimpleName: nulls(17)", "Delete QualifiedName: FunctionTemplate.NullHandling.INTERNAL(18)", "Delete MemberValuePair(19)", "Delete NormalAnnotation(20)", "Delete SimpleName: nulls(28)", "Delete QualifiedName: FunctionTemplate.NullHandling.INTERNAL(29)", "Delete MemberValuePair(30)"]}}, {"CastDecimalDenseDecimalSparse_cluster": {"actions": [{"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST to MemberValuePair at 1"]}, {"root": "UPDATE from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE", "operations": ["UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE"]}]}}, {"CastDecimalDenseDecimalSparse_diff": {"operations": ["Insert MemberValuePair(36) into NormalAnnotation(40) at 3", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST(32) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(34) into MemberValuePair(36) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST(35) into MemberValuePair(36) at 1"]}}, {"CastDecimalSimilar_cluster": {"actions": [{"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST to MemberValuePair at 1"]}, {"root": "UPDATE from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE", "operations": ["UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE"]}]}}, {"CastDecimalSimilar_diff": {"operations": ["Insert MemberValuePair(36) into NormalAnnotation(40) at 3", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST(32) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(34) into MemberValuePair(36) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST(35) into MemberValuePair(36) at 1"]}}, {"CastDecimalSparseDecimalDense_cluster": {"actions": [{"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0"]}, {"root": "UPDATE from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE", "operations": ["UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE"]}]}}, {"CastDecimalSparseDecimalDense_diff": {"operations": ["Insert MemberValuePair(36) into NormalAnnotation(40) at 3", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST(32) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(34) into MemberValuePair(36) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST(35) into MemberValuePair(36) at 1"]}}, {"CastDecimalVarchar_cluster": {"actions": [{"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.ReturnType.STRING_CAST to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS MemberValuePair to NormalAnnotation at 3", "INS QualifiedName: FunctionTemplate.ReturnType.STRING_CAST to MemberValuePair at 1", "INS SimpleName: returnType to MemberValuePair at 0"]}]}}, {"CastDecimalVarchar_diff": {"operations": ["Insert MemberValuePair(62) into NormalAnnotation(66) at 3", "Insert MemberValuePair(133) into NormalAnnotation(137) at 3", "Insert SimpleName: returnType(60) into MemberValuePair(62) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.STRING_CAST(61) into MemberValuePair(62) at 1", "Insert SimpleName: returnType(131) into MemberValuePair(133) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.STRING_CAST(132) into MemberValuePair(133) at 1"]}}, {"CastDownwardDecimal_cluster": {"actions": [{"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS MemberValuePair to NormalAnnotation at 3", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST to MemberValuePair at 1", "INS SimpleName: returnType to MemberValuePair at 0"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST to MemberValuePair at 1", "INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST to MemberValuePair at 1"]}, {"root": "UPDATE from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE", "operations": ["UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE"]}]}}, {"CastDownwardDecimal_diff": {"operations": ["Insert MemberValuePair(82) into NormalAnnotation(86) at 3", "Insert MemberValuePair(334) into NormalAnnotation(338) at 3", "Insert MemberValuePair(405) into NormalAnnotation(409) at 3", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST(78) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(80) into MemberValuePair(82) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST(81) into MemberValuePair(82) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST(327) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(332) into MemberValuePair(334) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST(333) into MemberValuePair(334) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST(395) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(403) into MemberValuePair(405) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST(404) into MemberValuePair(405) at 1"]}}, {"CastFloatDecimal_cluster": {"actions": [{"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "UPDATE from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE", "operations": ["UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE"]}]}}, {"CastFloatDecimal_diff": {"operations": ["Insert MemberValuePair(38) into NormalAnnotation(42) at 3", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST(34) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(36) into MemberValuePair(38) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST(37) into MemberValuePair(38) at 1"]}}, {"CastIntDecimal_cluster": {"actions": [{"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST to MemberValuePair at 1"]}, {"root": "UPDATE from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE", "operations": ["UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE"]}]}}, {"CastIntDecimal_diff": {"operations": ["Insert MemberValuePair(38) into NormalAnnotation(42) at 3", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST(34) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(36) into MemberValuePair(38) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST(37) into MemberValuePair(38) at 1"]}}, {"CastSrcDecimalSimple_cluster": {"actions": [{"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST to MemberValuePair at 1", "INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST to MemberValuePair at 1"]}, {"root": "UPDATE from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE", "operations": ["UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE"]}]}}, {"CastSrcDecimalSimple_diff": {"operations": ["Insert MemberValuePair(76) into NormalAnnotation(80) at 3", "Insert MemberValuePair(164) into NormalAnnotation(168) at 3", "Insert MemberValuePair(247) into NormalAnnotation(251) at 3", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST(72) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(74) into MemberValuePair(76) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST(75) into MemberValuePair(76) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST(157) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(162) into MemberValuePair(164) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST(163) into MemberValuePair(164) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST(237) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(245) into MemberValuePair(247) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST(246) into MemberValuePair(247) at 1"]}}, {"CastVarCharDecimal_cluster": {"actions": [{"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST to MemberValuePair at 1"]}, {"root": "UPDATE from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE", "operations": ["UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST from FunctionTemplate.FunctionScope.DECIMAL_CAST to FunctionTemplate.FunctionScope.SIMPLE"]}]}}, {"CastVarCharDecimal_diff": {"operations": ["Insert MemberValuePair(60) into NormalAnnotation(64) at 3", "Insert MemberValuePair(77) into NormalAnnotation(81) at 3", "Insert MemberValuePair(167) into NormalAnnotation(171) at 3", "Insert MemberValuePair(184) into NormalAnnotation(188) at 3", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST(56) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(58) into MemberValuePair(60) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST(59) into MemberValuePair(60) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST(70) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(75) into MemberValuePair(77) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST(76) into MemberValuePair(77) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST(157) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(165) into MemberValuePair(167) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST(166) into MemberValuePair(167) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_CAST(171) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(182) into MemberValuePair(184) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_CAST(183) into MemberValuePair(184) at 1"]}}, {"DecimalAggrTypeFunctions1_cluster": {"actions": [{"root": "INS MemberValuePair to NormalAnnotation at 2", "operations": ["INS MemberValuePair to NormalAnnotation at 2", "INS SimpleName: scope to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.FunctionScope.POINT_AGGREGATE to MemberValuePair at 1"]}]}}, {"DecimalAggrTypeFunctions1_diff": {"operations": ["Insert MemberValuePair(108) into NormalAnnotation(109) at 2", "Insert SimpleName: scope(106) into MemberValuePair(108) at 0", "Insert QualifiedName: FunctionTemplate.FunctionScope.POINT_AGGREGATE(107) into MemberValuePair(108) at 1"]}}, {"DecimalAggrTypeFunctions2_cluster": {"actions": [{"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_SUM_AGGREGATE to MemberValuePair at 1"]}, {"root": "UPDATE from FunctionTemplate.FunctionScope.DECIMAL_SUM_AGGREGATE to FunctionTemplate.FunctionScope.POINT_AGGREGATE", "operations": ["UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_SUM_AGGREGATE from FunctionTemplate.FunctionScope.DECIMAL_SUM_AGGREGATE to FunctionTemplate.FunctionScope.POINT_AGGREGATE"]}]}}, {"DecimalAggrTypeFunctions2_diff": {"operations": ["Insert MemberValuePair(106) into NormalAnnotation(107) at 3", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_SUM_AGGREGATE(102) to FunctionTemplate.FunctionScope.POINT_AGGREGATE", "Insert SimpleName: returnType(104) into MemberValuePair(106) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_SUM_AGGREGATE(105) into MemberValuePair(106) at 1"]}}, {"DecimalFunctions_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV TypeDeclaration: class to CompilationUnit at 53"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 7", "MOV FieldDeclaration to TypeDeclaration: class at 4", "MOV Initializer to TypeDeclaration: class at 5", "MOV MethodDeclaration to TypeDeclaration: class at 8", "MOV FieldDeclaration to TypeDeclaration: class at 6"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 6", "MOV FieldDeclaration to TypeDeclaration: class at 4", "MOV MethodDeclaration to TypeDeclaration: class at 7", "MOV Initializer to TypeDeclaration: class at 5", "MOV MethodDeclaration to TypeDeclaration: class at 8"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 7", "MOV FieldDeclaration to TypeDeclaration: class at 6", "MOV FieldDeclaration to TypeDeclaration: class at 4", "MOV MethodDeclaration to TypeDeclaration: class at 8", "MOV Initializer to TypeDeclaration: class at 5"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 8", "MOV MethodDeclaration to TypeDeclaration: class at 7", "MOV FieldDeclaration to TypeDeclaration: class at 6", "MOV Initializer to TypeDeclaration: class at 5", "MOV FieldDeclaration to TypeDeclaration: class at 4"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV Initializer to TypeDeclaration: class at 5", "MOV FieldDeclaration to TypeDeclaration: class at 6", "MOV MethodDeclaration to TypeDeclaration: class at 15", "MOV MethodDeclaration to TypeDeclaration: class at 14", "MOV FieldDeclaration to TypeDeclaration: class at 4"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 8", "MOV FieldDeclaration to TypeDeclaration: class at 7", "MOV FieldDeclaration to TypeDeclaration: class at 5", "MOV MethodDeclaration to TypeDeclaration: class at 9", "MOV FieldDeclaration to TypeDeclaration: class at 4", "MOV Initializer to TypeDeclaration: class at 6"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 4", "MOV Initializer to TypeDeclaration: class at 5", "MOV MethodDeclaration to TypeDeclaration: class at 8", "MOV MethodDeclaration to TypeDeclaration: class at 7", "MOV FieldDeclaration to TypeDeclaration: class at 6"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV Initializer to TypeDeclaration: class at 5", "MOV MethodDeclaration to TypeDeclaration: class at 11", "MOV FieldDeclaration to TypeDeclaration: class at 4", "MOV FieldDeclaration to TypeDeclaration: class at 6", "MOV MethodDeclaration to TypeDeclaration: class at 12"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 4", "MOV Initializer to TypeDeclaration: class at 5", "MOV MethodDeclaration to TypeDeclaration: class at 7", "MOV MethodDeclaration to TypeDeclaration: class at 8", "MOV FieldDeclaration to TypeDeclaration: class at 6"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 4", "MOV FieldDeclaration to TypeDeclaration: class at 5", "MOV MethodDeclaration to TypeDeclaration: class at 9", "MOV FieldDeclaration to TypeDeclaration: class at 7", "MOV MethodDeclaration to TypeDeclaration: class at 8", "MOV Initializer to TypeDeclaration: class at 6"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 7", "MOV FieldDeclaration to TypeDeclaration: class at 6", "MOV Initializer to TypeDeclaration: class at 5", "MOV MethodDeclaration to TypeDeclaration: class at 8", "MOV FieldDeclaration to TypeDeclaration: class at 4"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ADD_SCALE to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0"]}, {"root": "INS MemberValuePair to NormalAnnotation at 5", "operations": ["INS BooleanLiteral: true to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 5", "INS SimpleName: checkPrecisionRange to MemberValuePair at 0"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ADD_SCALE to MemberValuePair at 1", "INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "INS MemberValuePair to NormalAnnotation at 5", "operations": ["INS MemberValuePair to NormalAnnotation at 5", "INS BooleanLiteral: true to MemberValuePair at 1", "INS SimpleName: checkPrecisionRange to MemberValuePair at 0"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_SUM_SCALE to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 5", "operations": ["INS SimpleName: checkPrecisionRange to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 5", "INS BooleanLiteral: true to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_DIV_SCALE to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 5", "operations": ["INS MemberValuePair to NormalAnnotation at 5", "INS SimpleName: checkPrecisionRange to MemberValuePair at 0", "INS BooleanLiteral: true to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_MOD_SCALE to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 5", "operations": ["INS SimpleName: checkPrecisionRange to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 5", "INS BooleanLiteral: true to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_MAX_SCALE to MemberValuePair at 1", "INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ZERO_SCALE to MemberValuePair at 1"]}, {"root": "MOVE from NormalAnnotation", "operations": ["MOV MemberValuePair to NormalAnnotation at 4"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ZERO_SCALE to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "MOVE from NormalAnnotation", "operations": ["MOV MemberValuePair to NormalAnnotation at 1", "MOV MemberValuePair to NormalAnnotation at 4"]}, {"root": "MOVE from NormalAnnotation", "operations": ["MOV MemberValuePair to NormalAnnotation at 1", "MOV MemberValuePair to NormalAnnotation at 5"]}, {"root": "INS MemberValuePair to NormalAnnotation at 4", "operations": ["INS MemberValuePair to NormalAnnotation at 4", "INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ZERO_SCALE to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_SET_SCALE to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "MOVE from NormalAnnotation", "operations": ["MOV MemberValuePair to NormalAnnotation at 1", "MOV MemberValuePair to NormalAnnotation at 4"]}, {"root": "MOVE from NormalAnnotation", "operations": ["MOV MemberValuePair to NormalAnnotation at 5", "MOV MemberValuePair to NormalAnnotation at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 4", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ZERO_SCALE to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 4"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_SET_SCALE to MemberValuePair at 1", "INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "MOVE from NormalAnnotation", "operations": ["MOV MemberValuePair to NormalAnnotation at 4"]}, {"root": "MOVE from NormalAnnotation", "operations": ["MOV MemberValuePair to NormalAnnotation at 4", "MOV MemberValuePair to NormalAnnotation at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 5", "operations": ["INS SimpleName: checkPrecisionRange to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 5", "INS BooleanLiteral: true to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 1", "operations": ["INS MemberValuePair to NormalAnnotation at 1", "INS SimpleName: name to MemberValuePair at 0"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ADD_SCALE to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "INS MemberValuePair to NormalAnnotation at 4", "operations": ["INS QualifiedName: NullHandling.NULL_IF_NULL to MemberValuePair at 1", "INS SimpleName: nulls to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 4"]}, {"root": "INS MemberValuePair to NormalAnnotation at 5", "operations": ["INS MemberValuePair to NormalAnnotation at 5", "INS SimpleName: checkPrecisionRange to MemberValuePair at 0", "INS BooleanLiteral: true to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_SUM_SCALE to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 5", "operations": ["INS SimpleName: checkPrecisionRange to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 5", "INS BooleanLiteral: true to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS MemberValuePair to NormalAnnotation at 3", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_MAX_SCALE to MemberValuePair at 1", "INS SimpleName: returnType to MemberValuePair at 0"]}, {"root": "MOVE from NormalAnnotation", "operations": ["MOV MemberValuePair to NormalAnnotation at 4"]}, {"root": "INS MemberValuePair to NormalAnnotation at 5", "operations": ["INS MemberValuePair to NormalAnnotation at 5", "INS BooleanLiteral: true to MemberValuePair at 1", "INS SimpleName: checkPrecisionRange to MemberValuePair at 0"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_MOD_SCALE to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "MOVE from NormalAnnotation", "operations": ["MOV MemberValuePair to NormalAnnotation at 1", "MOV MemberValuePair to NormalAnnotation at 4"]}, {"root": "INS MemberValuePair to NormalAnnotation at 5", "operations": ["INS SimpleName: checkPrecisionRange to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 5", "INS BooleanLiteral: true to MemberValuePair at 1"]}, {"root": "MOVE from NormalAnnotation", "operations": ["MOV MemberValuePair to NormalAnnotation at 1", "MOV MemberValuePair to NormalAnnotation at 5"]}, {"root": "INS MemberValuePair to NormalAnnotation at 4", "operations": ["INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ZERO_SCALE to MemberValuePair at 1", "INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 4"]}, {"root": "MOVE from NormalAnnotation", "operations": ["MOV MemberValuePair to NormalAnnotation at 5"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_SET_SCALE to MemberValuePair at 1"]}, {"root": "MOVE from NormalAnnotation", "operations": ["MOV MemberValuePair to NormalAnnotation at 4"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ZERO_SCALE to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0"]}, {"root": "MOVE from NormalAnnotation", "operations": ["MOV MemberValuePair to NormalAnnotation at 4", "MOV MemberValuePair to NormalAnnotation at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ZERO_SCALE to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "INS MemberValuePair to NormalAnnotation at 4", "operations": ["INS QualifiedName: NullHandling.NULL_IF_NULL to MemberValuePair at 1", "INS SimpleName: nulls to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 4"]}, {"root": "MOVE from NormalAnnotation", "operations": ["MOV MemberValuePair to NormalAnnotation at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS QualifiedName: FunctionTemplate.ReturnType.DECIMAL_SET_SCALE to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0"]}, {"root": "UPDATE from FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "operations": ["UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE from FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_SET_SCALE from FunctionTemplate.FunctionScope.DECIMAL_SET_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_MOD_SCALE from FunctionTemplate.FunctionScope.DECIMAL_MOD_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_MOD_SCALE from FunctionTemplate.FunctionScope.DECIMAL_MOD_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE from FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_DIV_SCALE from FunctionTemplate.FunctionScope.DECIMAL_DIV_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_SET_SCALE from FunctionTemplate.FunctionScope.DECIMAL_SET_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_DIV_SCALE from FunctionTemplate.FunctionScope.DECIMAL_DIV_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE from FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE from FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_MAX_SCALE from FunctionTemplate.FunctionScope.DECIMAL_MAX_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE from FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ADD_SCALE from FunctionTemplate.FunctionScope.DECIMAL_ADD_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ADD_SCALE from FunctionTemplate.FunctionScope.DECIMAL_ADD_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE from FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ADD_SCALE from FunctionTemplate.FunctionScope.DECIMAL_ADD_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE from FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_MAX_SCALE from FunctionTemplate.FunctionScope.DECIMAL_MAX_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_SET_SCALE from FunctionTemplate.FunctionScope.DECIMAL_SET_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE from FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_SET_SCALE from FunctionTemplate.FunctionScope.DECIMAL_SET_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_MUL_SCALE from FunctionTemplate.FunctionScope.DECIMAL_MUL_SCALE to FunctionTemplate.FunctionScope.SIMPLE", "UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_MUL_SCALE from FunctionTemplate.FunctionScope.DECIMAL_MUL_SCALE to FunctionTemplate.FunctionScope.SIMPLE"]}, {"root": "UPDATE from name to scope", "operations": ["UPD SimpleName: name from name to scope"]}, {"root": "INS QualifiedName: FunctionTemplate.FunctionScope.SIMPLE to MemberValuePair at 1", "operations": ["INS QualifiedName: FunctionTemplate.FunctionScope.SIMPLE to MemberValuePair at 1"]}, {"root": "UPDATE from nulls to returnType", "operations": ["UPD SimpleName: nulls from nulls to returnType", "UPD SimpleName: scope from scope to returnType", "UPD SimpleName: nulls from nulls to returnType"]}, {"root": "UPDATE from FunctionTemplate.FunctionScope.DECIMAL_ADD_SCALE to FunctionTemplate.ReturnType.DECIMAL_ADD_SCALE", "operations": ["UPD QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ADD_SCALE from FunctionTemplate.FunctionScope.DECIMAL_ADD_SCALE to FunctionTemplate.ReturnType.DECIMAL_ADD_SCALE"]}, {"root": "MOVE from MemberValuePair", "operations": ["MOV StringLiteral: \"subtract\" to MemberValuePair at 1"]}, {"root": "UPDATE from NullHandling.NULL_IF_NULL to FunctionTemplate.ReturnType.DECIMAL_DIV_SCALE", "operations": ["UPD QualifiedName: NullHandling.NULL_IF_NULL from NullHandling.NULL_IF_NULL to FunctionTemplate.ReturnType.DECIMAL_DIV_SCALE"]}, {"root": "UPDATE from NullHandling.NULL_IF_NULL to FunctionTemplate.ReturnType.DECIMAL_ZERO_SCALE", "operations": ["UPD QualifiedName: NullHandling.NULL_IF_NULL from NullHandling.NULL_IF_NULL to FunctionTemplate.ReturnType.DECIMAL_ZERO_SCALE"]}]}}, {"DecimalFunctions_diff": {"operations": ["Move TypeDeclaration: class(1891) into CompilationUnit(2860) at 53", "Move FieldDeclaration(968) into TypeDeclaration: class(985) at 4", "Move Initializer(970) into TypeDeclaration: class(985) at 5", "Move FieldDeclaration(975) into TypeDeclaration: class(985) at 6", "Move MethodDeclaration(980) into TypeDeclaration: class(985) at 7", "Move MethodDeclaration(985) into TypeDeclaration: class(985) at 8", "Move FieldDeclaration(1007) into TypeDeclaration: class(1025) at 4", "Move Initializer(1009) into TypeDeclaration: class(1025) at 5", "Move FieldDeclaration(1014) into TypeDeclaration: class(1025) at 6", "Move MethodDeclaration(1019) into TypeDeclaration: class(1025) at 7", "Move MethodDeclaration(1024) into TypeDeclaration: class(1025) at 8", "Move FieldDeclaration(1090) into TypeDeclaration: class(1067) at 4", "Move Initializer(1092) into TypeDeclaration: class(1067) at 5", "Move FieldDeclaration(1097) into TypeDeclaration: class(1067) at 6", "Move MethodDeclaration(1102) into TypeDeclaration: class(1067) at 7", "Move MethodDeclaration(1107) into TypeDeclaration: class(1067) at 8", "Move FieldDeclaration(931) into TypeDeclaration: class(1156) at 4", "Move Initializer(933) into TypeDeclaration: class(1156) at 5", "Move FieldDeclaration(938) into TypeDeclaration: class(1156) at 6", "Move MethodDeclaration(943) into TypeDeclaration: class(1156) at 7", "Move MethodDeclaration(948) into TypeDeclaration: class(1156) at 8", "Move FieldDeclaration(2200) into TypeDeclaration: class(2259) at 4", "Move Initializer(2202) into TypeDeclaration: class(2259) at 5", "Move FieldDeclaration(2207) into TypeDeclaration: class(2259) at 6", "Move MethodDeclaration(2235) into TypeDeclaration: class(2259) at 14", "Move MethodDeclaration(2240) into TypeDeclaration: class(2259) at 15", "Move FieldDeclaration(2356) into TypeDeclaration: class(2325) at 4", "Move Initializer(2319) into TypeDeclaration: class(2325) at 5", "Move FieldDeclaration(2147) into TypeDeclaration: class(2325) at 6", "Move MethodDeclaration(2175) into TypeDeclaration: class(2325) at 11", "Move MethodDeclaration(2180) into TypeDeclaration: class(2325) at 12", "Move FieldDeclaration(2402) into TypeDeclaration: class(2422) at 4", "Move Initializer(2404) into TypeDeclaration: class(2422) at 5", "Move FieldDeclaration(2409) into TypeDeclaration: class(2422) at 6", "Move MethodDeclaration(2414) into TypeDeclaration: class(2422) at 7", "Move MethodDeclaration(2419) into TypeDeclaration: class(2422) at 8", "Move FieldDeclaration(2513) into TypeDeclaration: class(2471) at 4", "Move FieldDeclaration(2520) into TypeDeclaration: class(2471) at 5", "Move Initializer(2522) into TypeDeclaration: class(2471) at 6", "Move FieldDeclaration(2527) into TypeDeclaration: class(2471) at 7", "Move MethodDeclaration(2532) into TypeDeclaration: class(2471) at 8", "Move MethodDeclaration(2537) into TypeDeclaration: class(2471) at 9", "Move FieldDeclaration(2476) into TypeDeclaration: class(2513) at 4", "Move Initializer(2478) into TypeDeclaration: class(2513) at 5", "Move FieldDeclaration(2483) into TypeDeclaration: class(2513) at 6", "Move MethodDeclaration(2488) into TypeDeclaration: class(2513) at 7", "Move MethodDeclaration(2493) into TypeDeclaration: class(2513) at 8", "Move FieldDeclaration(2317) into TypeDeclaration: class(2593) at 4", "Move Initializer(2142) into TypeDeclaration: class(2593) at 5", "Move FieldDeclaration(2324) into TypeDeclaration: class(2593) at 6", "Move MethodDeclaration(2329) into TypeDeclaration: class(2593) at 7", "Move MethodDeclaration(2334) into TypeDeclaration: class(2593) at 8", "Move FieldDeclaration(2140) into TypeDeclaration: class(2859) at 4", "Move FieldDeclaration(2363) into TypeDeclaration: class(2859) at 5", "Move Initializer(2365) into TypeDeclaration: class(2859) at 6", "Move FieldDeclaration(2370) into TypeDeclaration: class(2859) at 7", "Move MethodDeclaration(2375) into TypeDeclaration: class(2859) at 8", "Move MethodDeclaration(2380) into TypeDeclaration: class(2859) at 9", "Insert MemberValuePair(85) into NormalAnnotation(92) at 3", "Insert MemberValuePair(91) into NormalAnnotation(92) at 5", "Insert MemberValuePair(256) into NormalAnnotation(263) at 3", "Insert MemberValuePair(262) into NormalAnnotation(263) at 5", "Insert MemberValuePair(427) into NormalAnnotation(434) at 3", "Insert MemberValuePair(433) into NormalAnnotation(434) at 5", "Insert MemberValuePair(504) into NormalAnnotation(511) at 3", "Insert MemberValuePair(510) into NormalAnnotation(511) at 5", "Insert MemberValuePair(675) into NormalAnnotation(682) at 3", "Insert MemberValuePair(681) into NormalAnnotation(682) at 5", "Insert MemberValuePair(848) into NormalAnnotation(852) at 3", "Insert MemberValuePair(955) into NormalAnnotation(959) at 3", "Move MemberValuePair(959) into NormalAnnotation(959) at 4", "Insert MemberValuePair(995) into NormalAnnotation(999) at 3", "Move MemberValuePair(998) into NormalAnnotation(999) at 4", "Move MemberValuePair(1031) into NormalAnnotation(1041) at 1", "Insert MemberValuePair(1037) into NormalAnnotation(1041) at 3", "Move MemberValuePair(1037) into NormalAnnotation(1041) at 5", "Move MemberValuePair(992) into NormalAnnotation(1083) at 1", "Insert MemberValuePair(1079) into NormalAnnotation(1083) at 3", "Move MemberValuePair(1081) into NormalAnnotation(1083) at 4", "Move MemberValuePair(1112) into NormalAnnotation(1130) at 1", "Insert MemberValuePair(1126) into NormalAnnotation(1130) at 3", "Move MemberValuePair(1118) into NormalAnnotation(1130) at 5", "Move MemberValuePair(1075) into NormalAnnotation(1170) at 1", "Insert MemberValuePair(1166) into NormalAnnotation(1170) at 3", "Move MemberValuePair(922) into NormalAnnotation(1170) at 4", "Move MemberValuePair(1835) into NormalAnnotation(1899) at 1", "Insert MemberValuePair(1898) into NormalAnnotation(1899) at 5", "Insert MemberValuePair(1952) into NormalAnnotation(1965) at 1", "Insert MemberValuePair(1958) into NormalAnnotation(1965) at 3", "Insert MemberValuePair(1961) into NormalAnnotation(1965) at 4", "Insert MemberValuePair(1964) into NormalAnnotation(1965) at 5", "Insert MemberValuePair(2024) into NormalAnnotation(2031) at 3", "Insert MemberValuePair(2030) into NormalAnnotation(2031) at 5", "Insert MemberValuePair(2141) into NormalAnnotation(2145) at 3", "Move MemberValuePair(2191) into NormalAnnotation(2210) at 4", "Insert MemberValuePair(2209) into NormalAnnotation(2210) at 5", "Insert MemberValuePair(2269) into NormalAnnotation(2276) at 3", "Move MemberValuePair(2308) into NormalAnnotation(2276) at 4", "Insert MemberValuePair(2275) into NormalAnnotation(2276) at 5", "Move MemberValuePair(2341) into NormalAnnotation(2396) at 1", "Insert MemberValuePair(2392) into NormalAnnotation(2396) at 3", "Move MemberValuePair(2393) into NormalAnnotation(2396) at 5", "Move MemberValuePair(2302) into NormalAnnotation(2438) at 1", "Insert MemberValuePair(2434) into NormalAnnotation(2438) at 3", "Move MemberValuePair(2430) into NormalAnnotation(2438) at 4", "Insert MemberValuePair(2483) into NormalAnnotation(2487) at 3", "Move MemberValuePair(2504) into NormalAnnotation(2487) at 4", "Insert MemberValuePair(2523) into NormalAnnotation(2527) at 3", "Insert MemberValuePair(2526) into NormalAnnotation(2527) at 4", "Move MemberValuePair(2498) into NormalAnnotation(2567) at 1", "Move MemberValuePair(2347) into NormalAnnotation(2567) at 5", "Move MemberValuePair(2461) into NormalAnnotation(2607) at 1", "Insert MemberValuePair(2603) into NormalAnnotation(2607) at 3", "Move MemberValuePair(1841) into NormalAnnotation(2607) at 4", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ADD_SCALE(81) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(83) into MemberValuePair(85) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ADD_SCALE(84) into MemberValuePair(85) at 1", "Insert SimpleName: checkPrecisionRange(89) into MemberValuePair(91) at 0", "Insert BooleanLiteral: true(90) into MemberValuePair(91) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ADD_SCALE(246) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(254) into MemberValuePair(256) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ADD_SCALE(255) into MemberValuePair(256) at 1", "Insert SimpleName: checkPrecisionRange(260) into MemberValuePair(262) at 0", "Insert BooleanLiteral: true(261) into MemberValuePair(262) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_MUL_SCALE(411) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(425) into MemberValuePair(427) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_SUM_SCALE(426) into MemberValuePair(427) at 1", "Insert SimpleName: checkPrecisionRange(431) into MemberValuePair(433) at 0", "Insert BooleanLiteral: true(432) into MemberValuePair(433) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_DIV_SCALE(482) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(502) into MemberValuePair(504) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_DIV_SCALE(503) into MemberValuePair(504) at 1", "Insert SimpleName: checkPrecisionRange(508) into MemberValuePair(510) at 0", "Insert BooleanLiteral: true(509) into MemberValuePair(510) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_MOD_SCALE(647) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(673) into MemberValuePair(675) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_MOD_SCALE(674) into MemberValuePair(675) at 1", "Insert SimpleName: checkPrecisionRange(679) into MemberValuePair(681) at 0", "Insert BooleanLiteral: true(680) into MemberValuePair(681) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_MAX_SCALE(814) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(846) into MemberValuePair(848) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_MAX_SCALE(847) into MemberValuePair(848) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE(918) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(953) into MemberValuePair(955) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ZERO_SCALE(954) into MemberValuePair(955) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE(955) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(993) into MemberValuePair(995) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ZERO_SCALE(994) into MemberValuePair(995) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE(994) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(1035) into MemberValuePair(1037) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ZERO_SCALE(1036) into MemberValuePair(1037) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_SET_SCALE(1033) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(1077) into MemberValuePair(1079) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_SET_SCALE(1078) into MemberValuePair(1079) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE(1077) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(1124) into MemberValuePair(1126) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ZERO_SCALE(1125) into MemberValuePair(1126) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_SET_SCALE(1114) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(1164) into MemberValuePair(1166) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_SET_SCALE(1165) into MemberValuePair(1166) at 1", "Update SimpleName: name(1893) to scope", "Insert QualifiedName: FunctionTemplate.FunctionScope.SIMPLE(1888) into MemberValuePair(1889) at 1", "Update SimpleName: scope(1896) to returnType", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ADD_SCALE(1897) to FunctionTemplate.ReturnType.DECIMAL_ADD_SCALE", "Insert SimpleName: checkPrecisionRange(1896) into MemberValuePair(1898) at 0", "Insert BooleanLiteral: true(1897) into MemberValuePair(1898) at 1", "Insert SimpleName: name(1950) into MemberValuePair(1952) at 0", "Move StringLiteral: \"subtract\"(1894) into MemberValuePair(1952) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ADD_SCALE(1837) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(1956) into MemberValuePair(1958) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ADD_SCALE(1957) into MemberValuePair(1958) at 1", "Insert SimpleName: nulls(1959) into MemberValuePair(1961) at 0", "Insert QualifiedName: NullHandling.NULL_IF_NULL(1960) into MemberValuePair(1961) at 1", "Insert SimpleName: checkPrecisionRange(1962) into MemberValuePair(1964) at 0", "Insert BooleanLiteral: true(1963) into MemberValuePair(1964) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_MUL_SCALE(1957) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(2022) into MemberValuePair(2024) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_SUM_SCALE(2023) into MemberValuePair(2024) at 1", "Insert SimpleName: checkPrecisionRange(2028) into MemberValuePair(2030) at 0", "Insert BooleanLiteral: true(2029) into MemberValuePair(2030) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_MAX_SCALE(2068) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(2139) into MemberValuePair(2141) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_MAX_SCALE(2140) into MemberValuePair(2141) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_DIV_SCALE(2127) to FunctionTemplate.FunctionScope.SIMPLE", "Update SimpleName: nulls(2129) to returnType", "Update QualifiedName: NullHandling.NULL_IF_NULL(2130) to FunctionTemplate.ReturnType.DECIMAL_DIV_SCALE", "Insert SimpleName: checkPrecisionRange(2207) into MemberValuePair(2209) at 0", "Insert BooleanLiteral: true(2208) into MemberValuePair(2209) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_MOD_SCALE(2187) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(2267) into MemberValuePair(2269) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_MOD_SCALE(2268) into MemberValuePair(2269) at 1", "Insert SimpleName: checkPrecisionRange(2273) into MemberValuePair(2275) at 0", "Insert BooleanLiteral: true(2274) into MemberValuePair(2275) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE(2304) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(2390) into MemberValuePair(2392) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ZERO_SCALE(2391) into MemberValuePair(2392) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_SET_SCALE(2343) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(2432) into MemberValuePair(2434) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_SET_SCALE(2433) into MemberValuePair(2434) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE(2389) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(2481) into MemberValuePair(2483) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ZERO_SCALE(2482) into MemberValuePair(2483) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE(2426) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(2521) into MemberValuePair(2523) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_ZERO_SCALE(2522) into MemberValuePair(2523) at 1", "Insert SimpleName: nulls(2524) into MemberValuePair(2526) at 0", "Insert QualifiedName: NullHandling.NULL_IF_NULL(2525) into MemberValuePair(2526) at 1", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_ZERO_SCALE(2463) to FunctionTemplate.FunctionScope.SIMPLE", "Update SimpleName: nulls(2465) to returnType", "Update QualifiedName: NullHandling.NULL_IF_NULL(2466) to FunctionTemplate.ReturnType.DECIMAL_ZERO_SCALE", "Update QualifiedName: FunctionTemplate.FunctionScope.DECIMAL_SET_SCALE(2500) to FunctionTemplate.FunctionScope.SIMPLE", "Insert SimpleName: returnType(2601) into MemberValuePair(2603) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.DECIMAL_SET_SCALE(2602) into MemberValuePair(2603) at 1"]}}, {"Types_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS ImportDeclaration to CompilationUnit at 8", "INS QualifiedName: org.apache.drill.common.util.CoreDecimalUtility to ImportDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 3", "operations": ["INS SimpleName: MAX_VARCHAR_LENGTH to VariableDeclarationFragment at 0", "INS PrimitiveType: int to FieldDeclaration at 3", "INS NumberLiteral: 65535 to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: static to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 3", "INS Modifier: final to FieldDeclaration at 2", "INS Modifier: public to FieldDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS Modifier: public to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 2", "INS Modifier: static to FieldDeclaration at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS PrimitiveType: int to FieldDeclaration at 3", "INS SimpleName: UNDEFINED to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 27", "operations": ["INS SimpleName: mode to SingleVariableDeclaration at 2", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS ReturnStatement to Block at 0", "INS SimpleName: precision to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: type to SingleVariableDeclaration at 2", "INS SimpleName: build to MethodInvocation at 1", "INS SimpleName: setMode to MethodInvocation at 1", "INS SimpleName: MajorType to SimpleType: MajorType at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: setPrecision to MethodInvocation at 1", "INS SimpleName: type to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 27", "INS SimpleName: withPrecision to MethodDeclaration at 4", "INS SimpleName: mode to MethodInvocation at 2", "INS Block to MethodDeclaration at 8", "INS Modifier: final to SingleVariableDeclaration at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: DataMode to SingleVariableDeclaration at 1", "INS SimpleName: DataMode to SimpleType: DataMode at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: MajorType to MethodInvocation at 0", "INS SimpleType: MajorType to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: precision to SingleVariableDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 39", "operations": ["INS TagElement: @param to Javadoc at 1", "INS TextElement:  major type to TagElement: @param at 1", "INS SimpleName: getPrecision to MethodDeclaration at 4", "INS TextElement:  precision value to TagElement: @return at 0", "INS Block to MethodDeclaration at 6", "INS TagElement: @return to Javadoc at 2", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: majorType to TagElement: @param at 0", "INS Modifier: static to MethodDeclaration at 2", "INS Javadoc to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 39", "INS PrimitiveType: int to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 43", "operations": ["INS TextElement:  type from left side to TagElement: @param at 1", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: setScale to MethodInvocation at 1", "INS InfixExpression: && to VariableDeclarationFragment at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: hasPrecision to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getMinorType to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: isScalarString to InfixExpression: || at 0", "INS SimpleName: rightType to MethodInvocation at 0", "INS IfStatement to Block at 2", "INS SimpleName: rightType to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: && at 0", "INS Modifier: public to MethodDeclaration at 1", "INS TagElement: @return to Javadoc at 4", "INS SimpleName: isDecimal to VariableDeclarationFragment at 0", "INS SimpleName: typeBuilder to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: rightType to SingleVariableDeclaration at 1", "INS InfixExpression: && to IfStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: leftType to MethodInvocation at 0", "INS TextElement:  type from right side to TagElement: @param at 1", "INS TextElement:  type builder to TagElement: @param at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: Types to MethodInvocation at 0", "INS SimpleName: getMinorType to MethodInvocation at 1", "INS Block to MethodDeclaration at 8", "INS TextElement: Both types should be of the same minor type. to TagElement at 2", "INS SimpleName: leftType to MethodInvocation at 0", "INS Modifier: static to MethodDeclaration at 2", "INS SimpleName: rightType to TagElement: @param at 0", "INS SimpleName: calculateTypePrecisionAndScale to MethodDeclaration at 4", "INS SimpleType: MajorType.Builder to SingleVariableDeclaration at 0", "INS SimpleName: rightType to MethodInvocation at 0", "INS SimpleName: rightType to MethodInvocation at 0", "INS SimpleName: Types to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to InfixExpression: && at 2", "INS SimpleName: max to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: leftType to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: getScale to MethodInvocation at 1", "INS SimpleName: isScalarStringType to MethodInvocation at 1", "INS TextElement: Sets max precision and scale from both types if these types are decimal types. to TagElement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: hasPrecision to MethodInvocation at 1", "INS SimpleName: rightType to MethodInvocation at 0", "INS QualifiedName: MajorType.Builder to SimpleType: MajorType.Builder at 0", "INS SimpleName: MajorType to SimpleType: MajorType at 0", "INS QualifiedName: MajorType.Builder to SimpleType: MajorType.Builder at 0", "INS SimpleName: typeBuilder to TagElement: @param at 0", "INS SimpleType: MajorType to SingleVariableDeclaration at 0", "INS IfStatement to Block at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @param to Javadoc at 2", "INS SimpleName: setPrecision to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 43", "INS TextElement:  type builder to TagElement: @return at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: CoreDecimalUtility to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS IfStatement to Block at 3", "INS SimpleName: isScalarString to VariableDeclarationFragment at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: isScalarStringType to MethodInvocation at 1", "INS SimpleName: max to MethodInvocation at 1", "INS SimpleName: leftType to MethodInvocation at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: getScale to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleName: getPrecision to MethodInvocation at 1", "INS SimpleName: typeBuilder to MethodInvocation at 0", "INS SimpleName: leftType to MethodInvocation at 2", "INS SimpleName: hasScale to MethodInvocation at 1", "INS SimpleName: isDecimal to InfixExpression: && at 0", "INS MethodInvocation to MethodInvocation at 3", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS SimpleName: MajorType to SimpleType: MajorType at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: leftType to MethodInvocation at 2", "INS SimpleName: Math to MethodInvocation at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: getPrecision to MethodInvocation at 1", "INS SimpleName: typeBuilder to SingleVariableDeclaration at 1", "INS TextElement: Sets max precision from both types if these types are string scalar types. to TagElement at 0", "INS SimpleName: Math to MethodInvocation at 0", "INS SimpleName: typeBuilder to ReturnStatement at 0", "INS SimpleType: MajorType to SingleVariableDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: isDecimal to InfixExpression: || at 1", "INS SimpleName: leftType to TagElement: @param at 0", "INS SimpleName: hasScale to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: && at 2", "INS ParenthesizedExpression to InfixExpression: && at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: leftType to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: leftType to MethodInvocation at 0", "INS TagElement: @param to Javadoc at 3", "INS SimpleType: MajorType.Builder to MethodDeclaration at 3", "INS TagElement: @param to Javadoc at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: rightType to MethodInvocation at 0", "INS TagElement to Javadoc at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: isDecimalType to MethodInvocation at 1", "INS Block to IfStatement at 1"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS SimpleName: type to TagElement: @param at 0", "INS TagElement: @return to Javadoc at 2", "INS TagElement: @param to Javadoc at 1", "INS TextElement: Checks if given major type is string scalar type. to TagElement at 0", "INS TagElement to Javadoc at 0", "INS TextElement:  major type to TagElement: @param at 1", "INS TextElement:  true if given major type is scalar string, false otherwise to TagElement: @return at 0", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "UPDATE from isStringScalarType to isScalarStringType", "operations": ["UPD SimpleName: isStringScalarType from isStringScalarType to isScalarStringType"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 1", "MOV Modifier: static to MethodDeclaration at 2", "MOV Javadoc to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS TagElement to Javadoc at 0", "operations": ["INS TagElement to Javadoc at 0", "INS TextElement: Builds major type using given minor type, data mode and precision. to TagElement at 0"]}, {"root": "INS TagElement: @param to Javadoc at 3", "operations": ["INS SimpleName: mode to TagElement: @param at 0", "INS TextElement:  data mode to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 3"]}, {"root": "INS TagElement: @param to Javadoc at 4", "operations": ["INS TagElement: @param to Javadoc at 4", "INS SimpleName: precision to TagElement: @param at 0", "INS TextElement:  precision value to TagElement: @param at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: MinorType to SingleVariableDeclaration at 1"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "UPDATE from majorType to type", "operations": ["UPD SimpleName: majorType from majorType to type"]}, {"root": "INS TextElement:  minor type to TagElement: @param at 1", "operations": ["INS TextElement:  minor type to TagElement: @param at 1"]}, {"root": "INS TextElement:  major type to TagElement: @return at 0", "operations": ["INS TextElement:  major type to TagElement: @return at 0"]}, {"root": "INS ConditionalExpression to ReturnStatement at 0", "operations": ["INS SimpleName: isScalarStringType to MethodInvocation at 0", "INS ConditionalExpression to ReturnStatement at 0", "INS SimpleName: majorType to MethodInvocation at 1", "INS MethodInvocation to ConditionalExpression at 0", "INS SimpleName: MAX_VARCHAR_LENGTH to ConditionalExpression at 1", "INS SimpleName: UNDEFINED to ConditionalExpression at 2"]}, {"root": "INS TextElement:  major type to TagElement: @param at 1", "operations": ["INS TextElement:  major type to TagElement: @param at 1"]}, {"root": "INS TextElement:  scale value to TagElement: @return at 0", "operations": ["INS TextElement:  scale value to TagElement: @return at 0"]}, {"root": "INS SimpleName: UNDEFINED to ReturnStatement at 0", "operations": ["INS SimpleName: UNDEFINED to ReturnStatement at 0"]}, {"root": "UPDATE from Is the given type column be used in ORDER BY clause? to Checks if the given type column can be used in ORDER BY clause.", "operations": ["UPD TextElement: Is the given type column be used in ORDER BY clause? from Is the given type column be used in ORDER BY clause? to Checks if the given type column can be used in ORDER BY clause."]}, {"root": "INS TextElement:  minor type to TagElement: @param at 1", "operations": ["INS TextElement:  minor type to TagElement: @param at 1"]}, {"root": "INS TextElement:  true if type can be used in ORDER BY clause to TagElement: @return at 0", "operations": ["INS TextElement:  true if type can be used in ORDER BY clause to TagElement: @return at 0"]}, {"root": "INS SimpleName: UNDEFINED to ReturnStatement at 0", "operations": ["INS SimpleName: UNDEFINED to ReturnStatement at 0"]}, {"root": "INS SimpleName: UNDEFINED to ReturnStatement at 0", "operations": ["INS SimpleName: UNDEFINED to ReturnStatement at 0"]}, {"root": "UPDATE from 0 to 9", "operations": ["UPD NumberLiteral: 0 from 0 to 9"]}, {"root": "UPDATE from 0 to 22", "operations": ["UPD NumberLiteral: 0 from 0 to 22"]}, {"root": "UPDATE from getMinorType to setMinorType", "operations": ["UPD SimpleName: getMinorType from getMinorType to setMinorType"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: majorType to MethodInvocation at 1", "MOV SimpleName: getMinorType to MethodInvocation at 1"]}, {"root": "UPDATE from majorType to newBuilder", "operations": ["UPD SimpleName: majorType from majorType to newBuilder"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: limitations under the License.", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL Javadoc", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."]}, {"root": "DEL Modifier: static", "operations": ["DEL Modifier: static"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 65536", "operations": ["DEL NumberLiteral: 65536"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL InfixExpression: ==", "DEL PrimitiveType: int", "DEL SimpleName: type", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL InfixExpression: ||", "DEL SimpleName: getPrecision", "DEL ReturnStatement", "DEL QualifiedName: MinorType.VARBINARY", "DEL NumberLiteral: 0", "DEL SimpleName: type", "DEL SimpleName: type", "DEL IfStatement", "DEL QualifiedName: MinorType.VARCHAR", "DEL VariableDeclarationFragment", "DEL Block", "DEL InfixExpression: ==", "DEL VariableDeclarationStatement"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}]}}, {"Types_diff": {"operations": ["Insert ImportDeclaration(17) into CompilationUnit(2000) at 8", "Insert QualifiedName: org.apache.drill.common.util.CoreDecimalUtility(16) into ImportDeclaration(17) at 0", "Insert FieldDeclaration(40) into TypeDeclaration: class(1999) at 3", "Insert FieldDeclaration(48) into TypeDeclaration: class(1999) at 4", "Insert MethodDeclaration(1289) into TypeDeclaration: class(1999) at 27", "Insert MethodDeclaration(1826) into TypeDeclaration: class(1999) at 39", "Insert MethodDeclaration(1998) into TypeDeclaration: class(1999) at 42", "Insert Modifier: public(33) into FieldDeclaration(40) at 0", "Insert Modifier: static(34) into FieldDeclaration(40) at 1", "Insert Modifier: final(35) into FieldDeclaration(40) at 2", "Insert PrimitiveType: int(36) into FieldDeclaration(40) at 3", "Insert VariableDeclarationFragment(39) into FieldDeclaration(40) at 4", "Insert Modifier: public(41) into FieldDeclaration(48) at 0", "Insert Modifier: static(42) into FieldDeclaration(48) at 1", "Insert Modifier: final(43) into FieldDeclaration(48) at 2", "Insert PrimitiveType: int(44) into FieldDeclaration(48) at 3", "Insert VariableDeclarationFragment(47) into FieldDeclaration(48) at 4", "Insert Javadoc(1014) into MethodDeclaration(1051) at 0", "Update SimpleName: isStringScalarType(1008) to isScalarStringType", "Move Javadoc(1738) into MethodDeclaration(1289) at 0", "Move Modifier: public(1739) into MethodDeclaration(1289) at 1", "Move Modifier: static(1740) into MethodDeclaration(1289) at 2", "Insert SimpleType: MajorType(1257) into MethodDeclaration(1289) at 3", "Insert SimpleName: withPrecision(1258) into MethodDeclaration(1289) at 4", "Insert SingleVariableDeclaration(1263) into MethodDeclaration(1289) at 5", "Insert SingleVariableDeclaration(1268) into MethodDeclaration(1289) at 6", "Insert SingleVariableDeclaration(1272) into MethodDeclaration(1289) at 7", "Insert Block(1288) into MethodDeclaration(1289) at 8", "Insert Javadoc(1800) into MethodDeclaration(1826) at 0", "Insert Modifier: public(1801) into MethodDeclaration(1826) at 1", "Insert Modifier: static(1802) into MethodDeclaration(1826) at 2", "Insert PrimitiveType: int(1803) into MethodDeclaration(1826) at 3", "Insert SimpleName: getPrecision(1804) into MethodDeclaration(1826) at 4", "Move SingleVariableDeclaration(1746) into MethodDeclaration(1826) at 5", "Insert Block(1825) into MethodDeclaration(1826) at 6", "Insert Javadoc(1897) into MethodDeclaration(1998) at 0", "Insert Modifier: public(1898) into MethodDeclaration(1998) at 1", "Insert Modifier: static(1899) into MethodDeclaration(1998) at 2", "Insert SimpleType: MajorType.Builder(1901) into MethodDeclaration(1998) at 3", "Insert SimpleName: calculateTypePrecisionAndScale(1902) into MethodDeclaration(1998) at 4", "Insert SingleVariableDeclaration(1906) into MethodDeclaration(1998) at 5", "Insert SingleVariableDeclaration(1910) into MethodDeclaration(1998) at 6", "Insert SingleVariableDeclaration(1914) into MethodDeclaration(1998) at 7", "Insert Block(1997) into MethodDeclaration(1998) at 8", "Insert SimpleName: MAX_VARCHAR_LENGTH(37) into VariableDeclarationFragment(39) at 0", "Insert NumberLiteral: 65535(38) into VariableDeclarationFragment(39) at 1", "Insert SimpleName: UNDEFINED(45) into VariableDeclarationFragment(47) at 0", "Insert NumberLiteral: 0(46) into VariableDeclarationFragment(47) at 1", "Insert TagElement(1008) into Javadoc(1014) at 0", "Insert TagElement: @param(1011) into Javadoc(1014) at 1", "Insert TagElement: @return(1013) into Javadoc(1014) at 2", "Insert TagElement(1241) into Javadoc(1253) at 0", "Insert TagElement: @param(1247) into Javadoc(1253) at 2", "Insert TagElement: @param(1250) into Javadoc(1253) at 3", "Insert SimpleName: MajorType(1256) into SimpleType: MajorType(1257) at 0", "Insert Modifier: final(1259) into SingleVariableDeclaration(1263) at 0", "Move SimpleType: MinorType(1748) into SingleVariableDeclaration(1263) at 1", "Insert SimpleName: type(1262) into SingleVariableDeclaration(1263) at 2", "Insert Modifier: final(1264) into SingleVariableDeclaration(1268) at 0", "Insert SimpleType: DataMode(1266) into SingleVariableDeclaration(1268) at 1", "Insert SimpleName: mode(1267) into SingleVariableDeclaration(1268) at 2", "Insert Modifier: final(1269) into SingleVariableDeclaration(1272) at 0", "Insert PrimitiveType: int(1270) into SingleVariableDeclaration(1272) at 1", "Insert SimpleName: precision(1271) into SingleVariableDeclaration(1272) at 2", "Insert ReturnStatement(1287) into Block(1288) at 0", "Move TagElement(1734) into Javadoc(1800) at 0", "Insert TagElement: @param(1797) into Javadoc(1800) at 1", "Insert TagElement: @return(1799) into Javadoc(1800) at 2", "Move IfStatement(1774) into Block(1825) at 0", "Move ReturnStatement(1763) into Block(1825) at 1", "Insert TagElement(1885) into Javadoc(1897) at 0", "Insert TagElement: @param(1888) into Javadoc(1897) at 1", "Insert TagElement: @param(1891) into Javadoc(1897) at 2", "Insert TagElement: @param(1894) into Javadoc(1897) at 3", "Insert TagElement: @return(1896) into Javadoc(1897) at 4", "Insert QualifiedName: MajorType.Builder(1900) into SimpleType: MajorType.Builder(1901) at 0", "Insert SimpleType: MajorType(1904) into SingleVariableDeclaration(1906) at 0", "Insert SimpleName: leftType(1905) into SingleVariableDeclaration(1906) at 1", "Insert SimpleType: MajorType(1908) into SingleVariableDeclaration(1910) at 0", "Insert SimpleName: rightType(1909) into SingleVariableDeclaration(1910) at 1", "Insert SimpleType: MajorType.Builder(1912) into SingleVariableDeclaration(1914) at 0", "Insert SimpleName: typeBuilder(1913) into SingleVariableDeclaration(1914) at 1", "Insert IfStatement(1994) into Block(1997) at 0", "Insert ReturnStatement(1996) into Block(1997) at 1", "Insert TextElement: Checks if given major type is string scalar type.(1007) into TagElement(1008) at 0", "Insert SimpleName: type(1009) into TagElement: @param(1011) at 0", "Insert TextElement:  major type(1010) into TagElement: @param(1011) at 1", "Insert TextElement:  true if given major type is scalar string, false otherwise(1012) into TagElement: @return(1013) at 0", "Insert TextElement: Builds major type using given minor type, data mode and precision.(1240) into TagElement(1241) at 0", "Update SimpleName: majorType(1735) to type", "Insert TextElement:  minor type(1243) into TagElement: @param(1244) at 1", "Insert SimpleName: mode(1245) into TagElement: @param(1247) at 0", "Insert TextElement:  data mode(1246) into TagElement: @param(1247) at 1", "Insert SimpleName: precision(1248) into TagElement: @param(1250) at 0", "Insert TextElement:  precision value(1249) into TagElement: @param(1250) at 1", "Insert TextElement:  major type(1251) into TagElement: @return(1252) at 0", "Insert SimpleName: DataMode(1265) into SimpleType: DataMode(1266) at 0", "Insert MethodInvocation(1286) into ReturnStatement(1287) at 0", "Insert SimpleName: majorType(1795) into TagElement: @param(1797) at 0", "Insert TextElement:  major type(1796) into TagElement: @param(1797) at 1", "Insert TextElement:  precision value(1798) into TagElement: @return(1799) at 0", "Insert ConditionalExpression(1823) into ReturnStatement(1824) at 0", "Insert TextElement:  major type(1830) into TagElement: @param(1831) at 1", "Insert TextElement:  scale value(1832) into TagElement: @return(1833) at 0", "Insert SimpleName: UNDEFINED(1852) into ReturnStatement(1853) at 0", "Update TextElement: Is the given type column be used in ORDER BY clause?(1806) to Checks if the given type column can be used in ORDER BY clause.", "Insert TextElement:  minor type(1859) into TagElement: @param(1860) at 1", "Insert TextElement:  true if type can be used in ORDER BY clause(1861) into TagElement: @return(1862) at 0", "Insert TextElement: Sets max precision from both types if these types are string scalar types.(1882) into TagElement(1885) at 0", "Insert TextElement: Sets max precision and scale from both types if these types are decimal types.(1883) into TagElement(1885) at 1", "Insert TextElement: Both types should be of the same minor type.(1884) into TagElement(1885) at 2", "Insert SimpleName: leftType(1886) into TagElement: @param(1888) at 0", "Insert TextElement:  type from left side(1887) into TagElement: @param(1888) at 1", "Insert SimpleName: rightType(1889) into TagElement: @param(1891) at 0", "Insert TextElement:  type from right side(1890) into TagElement: @param(1891) at 1", "Insert SimpleName: typeBuilder(1892) into TagElement: @param(1894) at 0", "Insert TextElement:  type builder(1893) into TagElement: @param(1894) at 1", "Insert TextElement:  type builder(1895) into TagElement: @return(1896) at 0", "Insert SimpleName: MajorType(1903) into SimpleType: MajorType(1904) at 0", "Insert SimpleName: MajorType(1907) into SimpleType: MajorType(1908) at 0", "Insert QualifiedName: MajorType.Builder(1911) into SimpleType: MajorType.Builder(1912) at 0", "Insert MethodInvocation(1922) into IfStatement(1994) at 0", "Insert Block(1993) into IfStatement(1994) at 1", "Insert SimpleName: typeBuilder(1995) into ReturnStatement(1996) at 0", "Insert SimpleName: UNDEFINED(905) into ReturnStatement(906) at 0", "Insert MethodInvocation(1284) into MethodInvocation(1286) at 0", "Insert SimpleName: build(1285) into MethodInvocation(1286) at 1", "Insert MethodInvocation(1820) into ConditionalExpression(1823) at 0", "Insert SimpleName: MAX_VARCHAR_LENGTH(1821) into ConditionalExpression(1823) at 1", "Insert SimpleName: UNDEFINED(1822) into ConditionalExpression(1823) at 2", "Insert MethodInvocation(1917) into MethodInvocation(1922) at 0", "Insert SimpleName: equals(1918) into MethodInvocation(1922) at 1", "Insert MethodInvocation(1921) into MethodInvocation(1922) at 2", "Insert VariableDeclarationStatement(1935) into Block(1993) at 0", "Insert VariableDeclarationStatement(1943) into Block(1993) at 1", "Insert IfStatement(1969) into Block(1993) at 2", "Insert IfStatement(1992) into Block(1993) at 3", "Insert SimpleName: UNDEFINED(730) into ReturnStatement(731) at 0", "Update NumberLiteral: 0(879) to 9", "Update NumberLiteral: 0(890) to 22", "Insert MethodInvocation(1281) into MethodInvocation(1284) at 0", "Insert SimpleName: setPrecision(1282) into MethodInvocation(1284) at 1", "Insert SimpleName: precision(1283) into MethodInvocation(1284) at 2", "Insert SimpleName: isScalarStringType(1818) into MethodInvocation(1820) at 0", "Insert SimpleName: majorType(1819) into MethodInvocation(1820) at 1", "Insert SimpleName: leftType(1915) into MethodInvocation(1917) at 0", "Insert SimpleName: getMinorType(1916) into MethodInvocation(1917) at 1", "Insert SimpleName: rightType(1919) into MethodInvocation(1921) at 0", "Insert SimpleName: getMinorType(1920) into MethodInvocation(1921) at 1", "Insert PrimitiveType: boolean(1923) into VariableDeclarationStatement(1935) at 0", "Insert VariableDeclarationFragment(1934) into VariableDeclarationStatement(1935) at 1", "Insert PrimitiveType: boolean(1936) into VariableDeclarationStatement(1943) at 0", "Insert VariableDeclarationFragment(1942) into VariableDeclarationStatement(1943) at 1", "Insert InfixExpression: &&(1954) into IfStatement(1969) at 0", "Insert Block(1968) into IfStatement(1969) at 1", "Insert InfixExpression: &&(1977) into IfStatement(1992) at 0", "Insert Block(1991) into IfStatement(1992) at 1", "Insert MethodInvocation(1278) into MethodInvocation(1281) at 0", "Insert SimpleName: setMode(1279) into MethodInvocation(1281) at 1", "Insert SimpleName: mode(1280) into MethodInvocation(1281) at 2", "Insert SimpleName: isScalarString(1924) into VariableDeclarationFragment(1934) at 0", "Insert InfixExpression: &&(1933) into VariableDeclarationFragment(1934) at 1", "Insert SimpleName: isDecimal(1937) into VariableDeclarationFragment(1942) at 0", "Insert MethodInvocation(1941) into VariableDeclarationFragment(1942) at 1", "Insert ParenthesizedExpression(1947) into InfixExpression: &&(1954) at 0", "Insert MethodInvocation(1950) into InfixExpression: &&(1954) at 1", "Insert MethodInvocation(1953) into InfixExpression: &&(1954) at 2", "Insert ExpressionStatement(1967) into Block(1968) at 0", "Insert SimpleName: isDecimal(1970) into InfixExpression: &&(1977) at 0", "Insert MethodInvocation(1973) into InfixExpression: &&(1977) at 1", "Insert MethodInvocation(1976) into InfixExpression: &&(1977) at 2", "Insert ExpressionStatement(1990) into Block(1991) at 0", "Insert MethodInvocation(1275) into MethodInvocation(1278) at 0", "Update SimpleName: getMinorType(1751) to setMinorType", "Move SimpleName: getMinorType(1751) into MethodInvocation(1278) at 1", "Insert SimpleName: type(1277) into MethodInvocation(1278) at 2", "Insert MethodInvocation(1928) into InfixExpression: &&(1933) at 0", "Insert MethodInvocation(1932) into InfixExpression: &&(1933) at 1", "Insert SimpleName: CoreDecimalUtility(1938) into MethodInvocation(1941) at 0", "Insert SimpleName: isDecimalType(1939) into MethodInvocation(1941) at 1", "Insert SimpleName: leftType(1940) into MethodInvocation(1941) at 2", "Insert InfixExpression: ||(1946) into ParenthesizedExpression(1947) at 0", "Insert SimpleName: leftType(1948) into MethodInvocation(1950) at 0", "Insert SimpleName: hasPrecision(1949) into MethodInvocation(1950) at 1", "Insert SimpleName: rightType(1951) into MethodInvocation(1953) at 0", "Insert SimpleName: hasPrecision(1952) into MethodInvocation(1953) at 1", "Insert MethodInvocation(1966) into ExpressionStatement(1967) at 0", "Insert SimpleName: leftType(1971) into MethodInvocation(1973) at 0", "Insert SimpleName: hasScale(1972) into MethodInvocation(1973) at 1", "Insert SimpleName: rightType(1974) into MethodInvocation(1976) at 0", "Insert SimpleName: hasScale(1975) into MethodInvocation(1976) at 1", "Insert MethodInvocation(1989) into ExpressionStatement(1990) at 0", "Insert SimpleName: MajorType(1273) into MethodInvocation(1275) at 0", "Update SimpleName: majorType(1750) to newBuilder", "Move SimpleName: majorType(1750) into MethodInvocation(1275) at 1", "Insert SimpleName: Types(1925) into MethodInvocation(1928) at 0", "Insert SimpleName: isScalarStringType(1926) into MethodInvocation(1928) at 1", "Insert SimpleName: leftType(1927) into MethodInvocation(1928) at 2", "Insert SimpleName: Types(1929) into MethodInvocation(1932) at 0", "Insert SimpleName: isScalarStringType(1930) into MethodInvocation(1932) at 1", "Insert SimpleName: rightType(1931) into MethodInvocation(1932) at 2", "Insert SimpleName: isScalarString(1944) into InfixExpression: ||(1946) at 0", "Insert SimpleName: isDecimal(1945) into InfixExpression: ||(1946) at 1", "Insert SimpleName: typeBuilder(1955) into MethodInvocation(1966) at 0", "Insert SimpleName: setPrecision(1956) into MethodInvocation(1966) at 1", "Insert MethodInvocation(1965) into MethodInvocation(1966) at 2", "Insert SimpleName: typeBuilder(1978) into MethodInvocation(1989) at 0", "Insert SimpleName: setScale(1979) into MethodInvocation(1989) at 1", "Insert MethodInvocation(1988) into MethodInvocation(1989) at 2", "Insert SimpleName: Math(1957) into MethodInvocation(1965) at 0", "Insert SimpleName: max(1958) into MethodInvocation(1965) at 1", "Insert MethodInvocation(1961) into MethodInvocation(1965) at 2", "Insert MethodInvocation(1964) into MethodInvocation(1965) at 3", "Insert SimpleName: Math(1980) into MethodInvocation(1988) at 0", "Insert SimpleName: max(1981) into MethodInvocation(1988) at 1", "Insert MethodInvocation(1984) into MethodInvocation(1988) at 2", "Insert MethodInvocation(1987) into MethodInvocation(1988) at 3", "Insert SimpleName: leftType(1959) into MethodInvocation(1961) at 0", "Insert SimpleName: getPrecision(1960) into MethodInvocation(1961) at 1", "Insert SimpleName: rightType(1962) into MethodInvocation(1964) at 0", "Insert SimpleName: getPrecision(1963) into MethodInvocation(1964) at 1", "Insert SimpleName: leftType(1982) into MethodInvocation(1984) at 0", "Insert SimpleName: getScale(1983) into MethodInvocation(1984) at 1", "Insert SimpleName: rightType(1985) into MethodInvocation(1987) at 0", "Insert SimpleName: getScale(1986) into MethodInvocation(1987) at 1", "Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete Modifier: static(118)", "Delete NumberLiteral: 0(728)", "Delete NumberLiteral: 0(903)", "Delete NumberLiteral: 65536(1762)", "Delete PrimitiveType: int(1741)", "Delete SimpleName: getPrecision(1742)", "Delete SimpleName: type(1749)", "Delete MethodInvocation(1752)", "Delete VariableDeclarationFragment(1753)", "Delete VariableDeclarationStatement(1754)", "Delete SimpleName: type(1755)", "Delete QualifiedName: MinorType.VARBINARY(1756)", "Delete InfixExpression: ==(1757)", "Delete SimpleName: type(1758)", "Delete QualifiedName: MinorType.VARCHAR(1759)", "Delete InfixExpression: ==(1760)", "Delete InfixExpression: ||(1761)", "Delete Block(1764)", "Delete IfStatement(1765)", "Delete NumberLiteral: 0(1775)", "Delete ReturnStatement(1776)", "Delete Block(1777)", "Delete MethodDeclaration(1778)", "Delete NumberLiteral: 0(1802)"]}}, {"ExpressionStringBuilder_cluster": {"actions": [{"root": "UPDATE from getWidth to getPrecision", "operations": ["UPD SimpleName: getWidth from getWidth to getPrecision"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL Javadoc", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: limitations under the License.", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."]}]}}, {"ExpressionStringBuilder_diff": {"operations": ["Update SimpleName: getWidth(1185) to getPrecision", "Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)"]}}, {"IfExpression_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS ImportDeclaration to CompilationUnit at 9", "INS QualifiedName: org.apache.drill.common.types.Types to ImportDeclaration at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: MajorType to SimpleType: MajorType at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleType: MajorType to VariableDeclarationStatement at 0", "INS SimpleName: ifType to VariableDeclarationFragment at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS QualifiedName: MajorType.Builder to SimpleType: MajorType.Builder at 0", "INS SimpleName: ifType to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: setMinorType to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getMinorType to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: MajorType to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: builder to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 4", "INS SimpleType: MajorType.Builder to VariableDeclarationStatement at 0", "INS SimpleName: newBuilder to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS SimpleName: setMode to MethodInvocation at 1", "INS ConditionalExpression to MethodInvocation at 2", "INS QualifiedName: DataMode.OPTIONAL to ConditionalExpression at 1", "INS MethodInvocation to ConditionalExpression at 2", "INS InfixExpression: == to InfixExpression: || at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: || to ConditionalExpression at 0", "INS InfixExpression: == to InfixExpression: || at 1", "INS SimpleName: builder to MethodInvocation at 0", "INS ExpressionStatement to Block at 5"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: builder to Assignment: = at 0", "INS SimpleName: builder to MethodInvocation at 4", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: Types to MethodInvocation at 0", "INS ExpressionStatement to Block at 6", "INS SimpleName: calculateTypePrecisionAndScale to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 7"]}, {"root": "UPDATE from majorType to elseType", "operations": ["UPD SimpleName: majorType from majorType to elseType", "UPD SimpleName: majorType from majorType to elseType", "UPD SimpleName: getMajorType from getMajorType to elseType", "UPD SimpleName: majorType from majorType to elseType", "UPD SimpleName: getMinorType from getMinorType to elseType", "UPD SimpleName: majorType from majorType to elseType"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from getMajorType to builder", "operations": ["UPD SimpleName: getMajorType from getMajorType to builder"]}, {"root": "INS SimpleName: build to MethodInvocation at 2", "operations": ["INS SimpleName: build to MethodInvocation at 2"]}, {"root": "UPDATE from majorType to ifType", "operations": ["UPD SimpleName: majorType from majorType to ifType", "UPD SimpleName: getMajorType from getMajorType to ifType"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getMinorType to MethodInvocation at 3", "MOV SimpleName: majorType to MethodInvocation at 2"]}, {"root": "INS SimpleName: ifType to MethodInvocation at 0", "operations": ["INS SimpleName: ifType to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getMajorType to MethodInvocation at 0"]}, {"root": "UPDATE from getMinorType to getMode", "operations": ["UPD SimpleName: getMinorType from getMinorType to getMode"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getMinorType to MethodInvocation at 1"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV QualifiedName: DataMode.OPTIONAL to InfixExpression: == at 1", "MOV MethodInvocation to InfixExpression: == at 0"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV MethodInvocation to InfixExpression: == at 0", "MOV QualifiedName: DataMode.OPTIONAL to InfixExpression: == at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getMajorType to MethodInvocation at 0"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TagElement", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: limitations under the License.", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL Javadoc", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."]}, {"root": "DEL MethodInvocation", "operations": ["DEL QualifiedName: ifCondition.expression", "DEL MethodInvocation"]}, {"root": "DEL QualifiedName: ifCondition.expression", "operations": ["DEL QualifiedName: ifCondition.expression"]}, {"root": "DEL IfStatement", "operations": ["DEL InfixExpression: ==", "DEL ReturnStatement", "DEL SimpleName: majorType", "DEL IfStatement", "DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL AssertStatement", "DEL InfixExpression: ==", "DEL IfStatement", "DEL InfixExpression: ==", "DEL QualifiedName: ifCondition.expression"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: majorType"]}]}}, {"IfExpression_diff": {"operations": ["Insert ImportDeclaration(19) into CompilationUnit(561) at 9", "Insert QualifiedName: org.apache.drill.common.types.Types(18) into ImportDeclaration(19) at 0", "Insert VariableDeclarationStatement(339) into Block(462) at 2", "Insert VariableDeclarationStatement(428) into Block(462) at 4", "Insert ExpressionStatement(448) into Block(462) at 5", "Insert ExpressionStatement(457) into Block(462) at 6", "Move ReturnStatement(452) into Block(462) at 7", "Insert SimpleType: MajorType(333) into VariableDeclarationStatement(339) at 0", "Insert VariableDeclarationFragment(338) into VariableDeclarationStatement(339) at 1", "Insert SimpleType: MajorType.Builder(417) into VariableDeclarationStatement(428) at 0", "Insert VariableDeclarationFragment(427) into VariableDeclarationStatement(428) at 1", "Insert MethodInvocation(447) into ExpressionStatement(448) at 0", "Insert Assignment: =(456) into ExpressionStatement(457) at 0", "Update SimpleName: majorType(339) to elseType", "Insert SimpleName: MajorType(332) into SimpleType: MajorType(333) at 0", "Insert SimpleName: ifType(334) into VariableDeclarationFragment(338) at 0", "Move MethodInvocation(381) into VariableDeclarationFragment(338) at 1", "Insert QualifiedName: MajorType.Builder(416) into SimpleType: MajorType.Builder(417) at 0", "Insert SimpleName: builder(418) into VariableDeclarationFragment(427) at 0", "Insert MethodInvocation(426) into VariableDeclarationFragment(427) at 1", "Insert SimpleName: builder(429) into MethodInvocation(447) at 0", "Insert SimpleName: setMode(430) into MethodInvocation(447) at 1", "Insert ConditionalExpression(446) into MethodInvocation(447) at 2", "Insert SimpleName: builder(449) into Assignment: =(456) at 0", "Insert MethodInvocation(455) into Assignment: =(456) at 1", "Update SimpleName: getMajorType(450) to builder", "Insert SimpleName: build(459) into MethodInvocation(460) at 1", "Update SimpleName: majorType(345) to elseType", "Insert MethodInvocation(421) into MethodInvocation(426) at 0", "Insert SimpleName: setMinorType(422) into MethodInvocation(426) at 1", "Insert MethodInvocation(425) into MethodInvocation(426) at 2", "Insert InfixExpression: ||(441) into ConditionalExpression(446) at 0", "Insert QualifiedName: DataMode.OPTIONAL(442) into ConditionalExpression(446) at 1", "Insert MethodInvocation(445) into ConditionalExpression(446) at 2", "Insert SimpleName: Types(450) into MethodInvocation(455) at 0", "Insert SimpleName: calculateTypePrecisionAndScale(451) into MethodInvocation(455) at 1", "Update SimpleName: majorType(444) to ifType", "Move SimpleName: majorType(444) into MethodInvocation(455) at 2", "Update SimpleName: getMinorType(445) to elseType", "Move SimpleName: getMinorType(445) into MethodInvocation(455) at 3", "Insert SimpleName: builder(454) into MethodInvocation(455) at 4", "Update SimpleName: majorType(365) to elseType", "Insert SimpleName: ifType(374) into MethodInvocation(376) at 0", "Insert SimpleName: MajorType(419) into MethodInvocation(421) at 0", "Insert SimpleName: newBuilder(420) into MethodInvocation(421) at 1", "Insert SimpleName: ifType(423) into MethodInvocation(425) at 0", "Insert SimpleName: getMinorType(424) into MethodInvocation(425) at 1", "Insert InfixExpression: ==(435) into InfixExpression: ||(441) at 0", "Insert InfixExpression: ==(440) into InfixExpression: ||(441) at 1", "Update SimpleName: getMajorType(440) to elseType", "Move SimpleName: getMajorType(440) into MethodInvocation(445) at 0", "Update SimpleName: getMinorType(442) to getMode", "Move SimpleName: getMinorType(442) into MethodInvocation(445) at 1", "Move MethodInvocation(425) into InfixExpression: ==(435) at 0", "Move QualifiedName: DataMode.OPTIONAL(426) into InfixExpression: ==(435) at 1", "Move MethodInvocation(436) into InfixExpression: ==(440) at 0", "Move QualifiedName: DataMode.OPTIONAL(437) into InfixExpression: ==(440) at 1", "Update SimpleName: majorType(423) to elseType", "Update SimpleName: getMajorType(433) to ifType", "Move SimpleName: getMajorType(433) into MethodInvocation(438) at 0", "Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: ifCondition.expression(432)", "Delete MethodInvocation(434)", "Delete QualifiedName: ifCondition.expression(449)", "Delete InfixExpression: ==(427)", "Delete SimpleName: majorType(428)", "Delete ReturnStatement(429)", "Delete Block(430)", "Delete IfStatement(431)", "Delete InfixExpression: ==(438)", "Delete QualifiedName: ifCondition.expression(439)", "Delete MethodInvocation(441)", "Delete MethodInvocation(443)", "Delete MethodInvocation(446)", "Delete InfixExpression: ==(447)", "Delete AssertStatement(448)", "Delete Block(453)", "Delete IfStatement(454)", "Delete SimpleName: majorType(455)", "Delete ReturnStatement(456)"]}}, {"ValueExpressions_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: precision to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: final to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS PrimitiveType: int to FieldDeclaration at 2", "INS SimpleName: precision to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 5"]}, {"root": "UPDATE from private to public", "operations": ["UPD Modifier: private from private to public"]}, {"root": "UPDATE from MajorType to QuotedString", "operations": ["UPD SimpleName: MajorType from MajorType to QuotedString", "UPD SimpleType: MajorType from MajorType to QuotedString"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: precision to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from QUOTED_STRING_CONSTANT to EMPTY_STRING", "operations": ["UPD SimpleName: QUOTED_STRING_CONSTANT from QUOTED_STRING_CONSTANT to EMPTY_STRING"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS StringLiteral: \"\" to ClassInstanceCreation at 1", "INS QualifiedName: ExpressionPosition.UNKNOWN to ClassInstanceCreation at 3", "INS SimpleName: QuotedString to SimpleType: QuotedString at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS NumberLiteral: 0 to ClassInstanceCreation at 2", "INS SimpleType: QuotedString to ClassInstanceCreation at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: precision to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: precision to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0"]}, {"root": "INS SimpleName: precision to ClassInstanceCreation at 2", "operations": ["INS SimpleName: precision to ClassInstanceCreation at 2"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: Types to MethodInvocation at 0", "INS QualifiedName: DataMode.REQUIRED to MethodInvocation at 3", "INS QualifiedName: MinorType.VARCHAR to MethodInvocation at 2", "INS SimpleName: precision to MethodInvocation at 4", "INS SimpleName: withPrecision to MethodInvocation at 1"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: limitations under the License.", "DEL TagElement", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL Javadoc", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: See the License for the specific language governing permissions and"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: required", "DEL QualifiedName: MinorType.VARCHAR", "DEL MethodInvocation", "DEL SimpleName: Types"]}, {"root": "DEL SimpleName: QUOTED_STRING_CONSTANT", "operations": ["DEL SimpleName: QUOTED_STRING_CONSTANT"]}]}}, {"ValueExpressions_diff": {"operations": ["Insert SingleVariableDeclaration(117) into MethodDeclaration(126) at 5", "Insert FieldDeclaration(2370) into TypeDeclaration: class(2471) at 5", "Insert PrimitiveType: int(115) into SingleVariableDeclaration(117) at 0", "Insert SimpleName: precision(116) into SingleVariableDeclaration(117) at 1", "Update Modifier: private(2362) to public", "Update SimpleType: MajorType(2366) to QuotedString", "Insert Modifier: private(2365) into FieldDeclaration(2370) at 0", "Insert Modifier: final(2366) into FieldDeclaration(2370) at 1", "Insert PrimitiveType: int(2367) into FieldDeclaration(2370) at 2", "Insert VariableDeclarationFragment(2369) into FieldDeclaration(2370) at 3", "Insert SingleVariableDeclaration(2379) into MethodDeclaration(2394) at 3", "Update SimpleName: MajorType(2365) to QuotedString", "Update SimpleName: QUOTED_STRING_CONSTANT(2367) to EMPTY_STRING", "Insert ClassInstanceCreation(2362) into VariableDeclarationFragment(2363) at 1", "Insert SimpleName: precision(2368) into VariableDeclarationFragment(2369) at 0", "Insert PrimitiveType: int(2377) into SingleVariableDeclaration(2379) at 0", "Insert SimpleName: precision(2378) into SingleVariableDeclaration(2379) at 1", "Insert ExpressionStatement(2392) into Block(2393) at 1", "Insert SimpleName: precision(121) into ClassInstanceCreation(123) at 2", "Insert SimpleType: QuotedString(2358) into ClassInstanceCreation(2362) at 0", "Insert StringLiteral: \"\"(2359) into ClassInstanceCreation(2362) at 1", "Insert NumberLiteral: 0(2360) into ClassInstanceCreation(2362) at 2", "Insert QualifiedName: ExpressionPosition.UNKNOWN(2361) into ClassInstanceCreation(2362) at 3", "Insert Assignment: =(2391) into ExpressionStatement(2392) at 0", "Insert MethodInvocation(2428) into ReturnStatement(2429) at 0", "Insert SimpleName: QuotedString(2357) into SimpleType: QuotedString(2358) at 0", "Insert FieldAccess(2389) into Assignment: =(2391) at 0", "Insert SimpleName: precision(2390) into Assignment: =(2391) at 1", "Insert SimpleName: Types(2423) into MethodInvocation(2428) at 0", "Insert SimpleName: withPrecision(2424) into MethodInvocation(2428) at 1", "Insert QualifiedName: MinorType.VARCHAR(2425) into MethodInvocation(2428) at 2", "Insert QualifiedName: DataMode.REQUIRED(2426) into MethodInvocation(2428) at 3", "Insert SimpleName: precision(2427) into MethodInvocation(2428) at 4", "Insert ThisExpression(2387) into FieldAccess(2389) at 0", "Insert SimpleName: precision(2388) into FieldAccess(2389) at 1", "Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete SimpleName: Types(2368)", "Delete SimpleName: required(2369)", "Delete QualifiedName: MinorType.VARCHAR(2370)", "Delete MethodInvocation(2371)", "Delete SimpleName: QUOTED_STRING_CONSTANT(2417)"]}}, {"TypeProtos_cluster": {"actions": [{"root": "UPDATE from used for decimal types to used for decimal types or as optional length for fixed size value", "operations": ["UPD TextElement: used for decimal types from used for decimal types to used for decimal types or as optional length for fixed size value", "UPD TextElement: used for decimal types from used for decimal types to used for decimal types or as optional length for fixed size value", "UPD TextElement: used for decimal types from used for decimal types to used for decimal types or as optional length for fixed size value", "UPD TextElement: used for decimal types from used for decimal types to used for decimal types or as optional length for fixed size value", "UPD TextElement: used for decimal types from used for decimal types to used for decimal types or as optional length for fixed size value", "UPD TextElement: used for decimal types from used for decimal types to used for decimal types or as optional length for fixed size value", "UPD TextElement: used for decimal types from used for decimal types to used for decimal types or as optional length for fixed size value", "UPD TextElement: used for decimal types from used for decimal types to used for decimal types or as optional length for fixed size value"]}, {"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: optional width for fixed size values.", "operations": ["DEL TextElement: optional width for fixed size values."]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}, {"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: optional width for fixed size values.", "operations": ["DEL TextElement: optional width for fixed size values."]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}, {"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: optional width for fixed size values.", "operations": ["DEL TextElement: optional width for fixed size values."]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}, {"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: optional width for fixed size values.", "operations": ["DEL TextElement: optional width for fixed size values."]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}, {"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: optional width for fixed size values.", "operations": ["DEL TextElement: optional width for fixed size values."]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}, {"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: optional width for fixed size values.", "operations": ["DEL TextElement: optional width for fixed size values."]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}, {"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: optional width for fixed size values.", "operations": ["DEL TextElement: optional width for fixed size values."]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}, {"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: optional width for fixed size values.", "operations": ["DEL TextElement: optional width for fixed size values."]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}]}}, {"TypeProtos_diff": {"operations": ["Update TextElement: used for decimal types(1602) to used for decimal types or as optional length for fixed size value", "Update TextElement: used for decimal types(1611) to used for decimal types or as optional length for fixed size value", "Update TextElement: used for decimal types(2419) to used for decimal types or as optional length for fixed size value", "Update TextElement: used for decimal types(2438) to used for decimal types or as optional length for fixed size value", "Update TextElement: used for decimal types(4225) to used for decimal types or as optional length for fixed size value", "Update TextElement: used for decimal types(4244) to used for decimal types or as optional length for fixed size value", "Update TextElement: used for decimal types(4257) to used for decimal types or as optional length for fixed size value", "Update TextElement: used for decimal types(4285) to used for decimal types or as optional length for fixed size value", "Delete TextElement: <pre>(1583)", "Delete TextElement: optional width for fixed size values.(1584)", "Delete TextElement: </pre>(1585)", "Delete TextElement: <pre>(1592)", "Delete TextElement: optional width for fixed size values.(1593)", "Delete TextElement: </pre>(1594)", "Delete TextElement: <pre>(2373)", "Delete TextElement: optional width for fixed size values.(2374)", "Delete TextElement: </pre>(2375)", "Delete TextElement: <pre>(2392)", "Delete TextElement: optional width for fixed size values.(2393)", "Delete TextElement: </pre>(2394)", "Delete TextElement: <pre>(4130)", "Delete TextElement: optional width for fixed size values.(4131)", "Delete TextElement: </pre>(4132)", "Delete TextElement: <pre>(4149)", "Delete TextElement: optional width for fixed size values.(4150)", "Delete TextElement: </pre>(4151)", "Delete TextElement: <pre>(4162)", "Delete TextElement: optional width for fixed size values.(4163)", "Delete TextElement: </pre>(4164)", "Delete TextElement: <pre>(4190)", "Delete TextElement: optional width for fixed size values.(4191)", "Delete TextElement: </pre>(4192)"]}}, {"ClassGenerator_cluster": {"actions": [{"root": "UPDATE from org.apache.drill.exec.expr.fn.DrillFuncHolder.WorkspaceReference to org.apache.drill.exec.expr.fn.WorkspaceReference", "operations": ["UPD QualifiedName: org.apache.drill.exec.expr.fn.DrillFuncHolder.WorkspaceReference from org.apache.drill.exec.expr.fn.DrillFuncHolder.WorkspaceReference to org.apache.drill.exec.expr.fn.WorkspaceReference"]}]}}, {"ClassGenerator_diff": {"operations": ["Update QualifiedName: org.apache.drill.exec.expr.fn.DrillFuncHolder.WorkspaceReference(36) to org.apache.drill.exec.expr.fn.WorkspaceReference"]}}, {"EvaluationVisitor_cluster": {"actions": [{"root": "UPDATE from Types to e", "operations": ["UPD SimpleName: Types from Types to e"]}, {"root": "UPDATE from required to getMajorType", "operations": ["UPD SimpleName: required from required to getMajorType"]}, {"root": "DEL QualifiedName: MinorType.VARCHAR", "operations": ["DEL QualifiedName: MinorType.VARCHAR"]}]}}, {"EvaluationVisitor_diff": {"operations": ["Update SimpleName: Types(2728) to e", "Update SimpleName: required(2729) to getMajorType", "Delete QualifiedName: MinorType.VARCHAR(2730)"]}}, {"ExpressionTreeMaterializer_cluster": {"actions": [{"root": "INS ReturnStatement to SwitchStatement at 36", "operations": ["INS InfixExpression: || to ReturnStatement at 0", "INS ReturnStatement to SwitchStatement at 36"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 2", "operations": ["INS SimpleName: length to MethodInvocation at 1", "INS SimpleName: message to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 2"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: == to InfixExpression: || at 1", "MOV ParenthesizedExpression to InfixExpression: || at 0"]}, {"root": "UPDATE from TypeHelper.VARCHAR_DEFAULT_CAST_LEN to Types.MAX_VARCHAR_LENGTH", "operations": ["UPD QualifiedName: TypeHelper.VARCHAR_DEFAULT_CAST_LEN from TypeHelper.VARCHAR_DEFAULT_CAST_LEN to Types.MAX_VARCHAR_LENGTH"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS SimpleName: build to MethodInvocation at 1", "INS MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "UPDATE from getWidth to getPrecision", "operations": ["UPD SimpleName: getWidth from getWidth to getPrecision", "UPD SimpleName: getWidth from getWidth to getPrecision", "UPD SimpleName: getWidth from getWidth to getPrecision", "UPD SimpleName: getWidth from getWidth to getPrecision", "UPD SimpleName: getWidth from getWidth to getPrecision"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Types to MethodInvocation at 3"]}, {"root": "UPDATE from Types to setMode", "operations": ["UPD SimpleName: Types from Types to setMode"]}, {"root": "INS QualifiedName: DataMode.OPTIONAL to MethodInvocation at 3", "operations": ["INS QualifiedName: DataMode.OPTIONAL to MethodInvocation at 3"]}, {"root": "UPDATE from getMinorType to toBuilder", "operations": ["UPD SimpleName: getMinorType from getMinorType to toBuilder"]}, {"root": "DEL SimpleName: optional", "operations": ["DEL SimpleName: optional"]}, {"root": "DEL IfStatement", "operations": ["DEL ReturnStatement", "DEL BooleanLiteral: true", "DEL InfixExpression: ||", "DEL Block", "DEL IfStatement", "DEL Block", "DEL BooleanLiteral: false", "DEL ReturnStatement"]}]}}, {"ExpressionTreeMaterializer_diff": {"operations": ["Insert ReturnStatement(3837) into SwitchStatement(3851) at 36", "Insert InfixExpression: ||(3836) into ReturnStatement(3837) at 0", "Insert MethodInvocation(2349) into ClassInstanceCreation(2351) at 2", "Move ParenthesizedExpression(3825) into InfixExpression: ||(3836) at 0", "Move InfixExpression: ==(3830) into InfixExpression: ||(3836) at 1", "Update QualifiedName: TypeHelper.VARCHAR_DEFAULT_CAST_LEN(745) to Types.MAX_VARCHAR_LENGTH", "Insert SimpleName: message(2347) into MethodInvocation(2349) at 0", "Insert SimpleName: length(2348) into MethodInvocation(2349) at 1", "Insert MethodInvocation(3584) into ClassInstanceCreation(3585) at 1", "Update SimpleName: getWidth(3827) to getPrecision", "Move MethodInvocation(3579) into MethodInvocation(3584) at 0", "Move SimpleName: Types(3572) into MethodInvocation(3582) at 3", "Insert SimpleName: build(3583) into MethodInvocation(3584) at 1", "Update SimpleName: Types(3572) to setMode", "Insert QualifiedName: DataMode.OPTIONAL(3581) into MethodInvocation(3582) at 2", "Update SimpleName: getWidth(3813) to getPrecision", "Update SimpleName: getWidth(3816) to getPrecision", "Update SimpleName: getWidth(3820) to getPrecision", "Update SimpleName: getMinorType(3577) to toBuilder", "Update SimpleName: getWidth(3628) to getPrecision", "Delete SimpleName: optional(3573)", "Delete InfixExpression: ||(3831)", "Delete BooleanLiteral: true(3832)", "Delete ReturnStatement(3833)", "Delete Block(3834)", "Delete BooleanLiteral: false(3835)", "Delete ReturnStatement(3836)", "Delete Block(3837)", "Delete IfStatement(3838)"]}}, {"MaterializedField_cluster": {"actions": [{"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement: <b>FIELD_NAME(TYPE(PRECISION,SCALE):DATA_MODE)[NESTED_FIELD_1, NESTED_FIELD_2]</b> to TagElement at 3", "INS TextElement: <p>Creates materialized field string representation. to TagElement at 0", "INS TextElement: Nested fields if any are included. Number of nested fields to include is limited to 10.</p> to TagElement at 2", "INS TextElement: <p>Example: ok(BIT:REQUIRED), col(VARCHAR(3):OPTIONAL), emp_id(DECIMAL28SPARSE(6,0):REQUIRED)</p> to TagElement at 4", "INS TagElement: @return to Javadoc at 1", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: Includes field name, its type with precision and scale if any and data mode. to TagElement at 1", "INS TextElement:  materialized field string representation to TagElement: @return at 0", "INS TagElement to Javadoc at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS SimpleType: StringBuilder to VariableDeclarationStatement at 0", "INS SimpleName: builder to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: StringBuilder to ClassInstanceCreation at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS ExpressionStatement to Block at 3", "INS SimpleName: name to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: builder to MethodInvocation at 0", "INS StringLiteral: \"(\" to MethodInvocation at 2"]}, {"root": "INS IfStatement to Block at 4", "operations": ["INS Block to IfStatement at 1", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: builder to MethodInvocation at 0", "INS SimpleName: builder to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \",\" to MethodInvocation at 2", "INS SimpleName: hasPrecision to MethodInvocation at 1", "INS StringLiteral: \"(\" to MethodInvocation at 2", "INS SimpleName: builder to MethodInvocation at 0", "INS SimpleName: hasScale to MethodInvocation at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: type to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: builder to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: getPrecision to MethodInvocation at 1", "INS SimpleName: type to MethodInvocation at 0", "INS MethodInvocation to IfStatement at 0", "INS IfStatement to Block at 4", "INS ExpressionStatement to Block at 1", "INS IfStatement to Block at 2", "INS ExpressionStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getScale to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: type to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: append to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS StringLiteral: \")\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: type to MethodInvocation at 0", "INS SimpleName: builder to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: builder to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS ExpressionStatement to Block at 5", "INS StringLiteral: \":\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \")\" to MethodInvocation at 2", "INS SimpleName: childString to MethodInvocation at 2"]}, {"root": "INS ReturnStatement to Block at 6", "operations": ["INS ReturnStatement to Block at 6", "INS SimpleName: toString to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: builder to MethodInvocation at 0"]}, {"root": "UPDATE from childStr to childString", "operations": ["UPD SimpleName: childStr from childStr to childString"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from \"[\" to \" [\"", "operations": ["UPD StringLiteral: \"[\" from \"[\" to \" [\""]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL ReturnStatement", "operations": ["DEL InfixExpression: +", "DEL StringLiteral: \")\"", "DEL ReturnStatement", "DEL StringLiteral: \":\"", "DEL SimpleName: childStr", "DEL StringLiteral: \"(\"", "DEL SimpleName: name"]}]}}, {"MaterializedField_diff": {"operations": ["Insert Javadoc(640) into MethodDeclaration(757) at 0", "Insert TagElement(637) into Javadoc(640) at 0", "Insert TagElement: @return(639) into Javadoc(640) at 1", "Insert VariableDeclarationStatement(679) into Block(756) at 2", "Insert ExpressionStatement(694) into Block(756) at 3", "Insert IfStatement(733) into Block(756) at 4", "Insert ExpressionStatement(751) into Block(756) at 5", "Insert ReturnStatement(755) into Block(756) at 6", "Insert TextElement: <p>Creates materialized field string representation.(632) into TagElement(637) at 0", "Insert TextElement: Includes field name, its type with precision and scale if any and data mode.(633) into TagElement(637) at 1", "Insert TextElement: Nested fields if any are included. Number of nested fields to include is limited to 10.</p>(634) into TagElement(637) at 2", "Insert TextElement: <b>FIELD_NAME(TYPE(PRECISION,SCALE):DATA_MODE)[NESTED_FIELD_1, NESTED_FIELD_2]</b>(635) into TagElement(637) at 3", "Insert TextElement: <p>Example: ok(BIT:REQUIRED), col(VARCHAR(3):OPTIONAL), emp_id(DECIMAL28SPARSE(6,0):REQUIRED)</p>(636) into TagElement(637) at 4", "Insert TextElement:  materialized field string representation(638) into TagElement: @return(639) at 0", "Insert SimpleType: StringBuilder(673) into VariableDeclarationStatement(679) at 0", "Insert VariableDeclarationFragment(678) into VariableDeclarationStatement(679) at 1", "Insert MethodInvocation(693) into ExpressionStatement(694) at 0", "Insert MethodInvocation(697) into IfStatement(733) at 0", "Insert Block(732) into IfStatement(733) at 1", "Insert MethodInvocation(750) into ExpressionStatement(751) at 0", "Insert MethodInvocation(754) into ReturnStatement(755) at 0", "Update SimpleName: childStr(647) to childString", "Insert SimpleName: StringBuilder(672) into SimpleType: StringBuilder(673) at 0", "Insert SimpleName: builder(674) into VariableDeclarationFragment(678) at 0", "Insert ClassInstanceCreation(677) into VariableDeclarationFragment(678) at 1", "Insert MethodInvocation(686) into MethodInvocation(693) at 0", "Insert SimpleName: append(687) into MethodInvocation(693) at 1", "Move MethodInvocation(670) into MethodInvocation(693) at 2", "Insert SimpleName: type(695) into MethodInvocation(697) at 0", "Insert SimpleName: hasPrecision(696) into MethodInvocation(697) at 1", "Insert ExpressionStatement(702) into Block(732) at 0", "Insert ExpressionStatement(709) into Block(732) at 1", "Insert IfStatement(726) into Block(732) at 2", "Insert ExpressionStatement(731) into Block(732) at 3", "Insert MethodInvocation(747) into MethodInvocation(750) at 0", "Insert SimpleName: append(748) into MethodInvocation(750) at 1", "Insert SimpleName: childString(749) into MethodInvocation(750) at 2", "Insert SimpleName: builder(752) into MethodInvocation(754) at 0", "Insert SimpleName: toString(753) into MethodInvocation(754) at 1", "Update StringLiteral: \"[\"(706) to \" [\"", "Insert SimpleType: StringBuilder(676) into ClassInstanceCreation(677) at 0", "Insert MethodInvocation(683) into MethodInvocation(686) at 0", "Insert SimpleName: append(684) into MethodInvocation(686) at 1", "Insert StringLiteral: \"(\"(685) into MethodInvocation(686) at 2", "Insert MethodInvocation(701) into ExpressionStatement(702) at 0", "Insert MethodInvocation(708) into ExpressionStatement(709) at 0", "Insert MethodInvocation(712) into IfStatement(726) at 0", "Insert Block(725) into IfStatement(726) at 1", "Insert MethodInvocation(730) into ExpressionStatement(731) at 0", "Insert MethodInvocation(744) into MethodInvocation(747) at 0", "Insert SimpleName: append(745) into MethodInvocation(747) at 1", "Insert StringLiteral: \")\"(746) into MethodInvocation(747) at 2", "Insert SimpleName: StringBuilder(675) into SimpleType: StringBuilder(676) at 0", "Insert SimpleName: builder(680) into MethodInvocation(683) at 0", "Insert SimpleName: append(681) into MethodInvocation(683) at 1", "Insert SimpleName: name(682) into MethodInvocation(683) at 2", "Insert SimpleName: builder(698) into MethodInvocation(701) at 0", "Insert SimpleName: append(699) into MethodInvocation(701) at 1", "Insert StringLiteral: \"(\"(700) into MethodInvocation(701) at 2", "Insert SimpleName: builder(703) into MethodInvocation(708) at 0", "Insert SimpleName: append(704) into MethodInvocation(708) at 1", "Insert MethodInvocation(707) into MethodInvocation(708) at 2", "Insert SimpleName: type(710) into MethodInvocation(712) at 0", "Insert SimpleName: hasScale(711) into MethodInvocation(712) at 1", "Insert ExpressionStatement(717) into Block(725) at 0", "Insert ExpressionStatement(724) into Block(725) at 1", "Insert SimpleName: builder(727) into MethodInvocation(730) at 0", "Insert SimpleName: append(728) into MethodInvocation(730) at 1", "Insert StringLiteral: \")\"(729) into MethodInvocation(730) at 2", "Insert MethodInvocation(737) into MethodInvocation(744) at 0", "Insert SimpleName: append(738) into MethodInvocation(744) at 1", "Move MethodInvocation(676) into MethodInvocation(744) at 2", "Insert SimpleName: type(705) into MethodInvocation(707) at 0", "Insert SimpleName: getPrecision(706) into MethodInvocation(707) at 1", "Insert MethodInvocation(716) into ExpressionStatement(717) at 0", "Insert MethodInvocation(723) into ExpressionStatement(724) at 0", "Insert SimpleName: builder(734) into MethodInvocation(737) at 0", "Insert SimpleName: append(735) into MethodInvocation(737) at 1", "Insert StringLiteral: \":\"(736) into MethodInvocation(737) at 2", "Insert SimpleName: builder(713) into MethodInvocation(716) at 0", "Insert SimpleName: append(714) into MethodInvocation(716) at 1", "Insert StringLiteral: \",\"(715) into MethodInvocation(716) at 2", "Insert SimpleName: builder(718) into MethodInvocation(723) at 0", "Insert SimpleName: append(719) into MethodInvocation(723) at 1", "Insert MethodInvocation(722) into MethodInvocation(723) at 2", "Insert SimpleName: type(720) into MethodInvocation(722) at 0", "Insert SimpleName: getScale(721) into MethodInvocation(722) at 1", "Delete NullLiteral(494)", "Delete SimpleName: name(664)", "Delete StringLiteral: \"(\"(665)", "Delete StringLiteral: \":\"(671)", "Delete StringLiteral: \")\"(677)", "Delete SimpleName: childStr(678)", "Delete InfixExpression: +(679)", "Delete ReturnStatement(680)"]}}, {"FunctionTemplate_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: org.apache.drill.common.expression.LogicalExpression to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: org.apache.drill.common.types.TypeProtos to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: org.apache.drill.exec.expr.fn.FunctionAttributes to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS QualifiedName: org.apache.drill.exec.expr.fn.FunctionInitializer to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 4"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: org.apache.drill.exec.expr.fn.output.ConcatReturnTypeInference to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: org.apache.drill.exec.expr.fn.output.DecimalReturnTypeInference to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS ImportDeclaration to CompilationUnit at 7", "INS QualifiedName: org.apache.drill.exec.expr.fn.output.DefaultReturnTypeInference to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS QualifiedName: org.apache.drill.exec.expr.fn.output.PadReturnTypeInference to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 8"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS ImportDeclaration to CompilationUnit at 9", "INS QualifiedName: org.apache.drill.exec.expr.fn.output.ReturnTypeInference to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS ImportDeclaration to CompilationUnit at 10", "INS QualifiedName: org.apache.drill.exec.expr.fn.output.SameInOutLengthReturnTypeInference to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS ImportDeclaration to CompilationUnit at 11", "INS QualifiedName: org.apache.drill.exec.expr.fn.output.StringCastReturnTypeInference to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 16", "operations": ["INS QualifiedName: java.util.List to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 16"]}, {"root": "INS AnnotationTypeMemberDeclaration to AnnotationTypeDeclaration at 7", "operations": ["INS SimpleName: returnType to AnnotationTypeMemberDeclaration at 1", "INS QualifiedName: ReturnType.DEFAULT to AnnotationTypeMemberDeclaration at 2", "INS AnnotationTypeMemberDeclaration to AnnotationTypeDeclaration at 7", "INS SimpleName: ReturnType to SimpleType: ReturnType at 0", "INS SimpleType: ReturnType to AnnotationTypeMemberDeclaration at 0"]}, {"root": "INS AnnotationTypeMemberDeclaration to AnnotationTypeDeclaration at 14", "operations": ["INS PrimitiveType: boolean to AnnotationTypeMemberDeclaration at 0", "INS AnnotationTypeMemberDeclaration to AnnotationTypeDeclaration at 14", "INS SimpleName: checkPrecisionRange to AnnotationTypeMemberDeclaration at 1", "INS BooleanLiteral: false to AnnotationTypeMemberDeclaration at 2"]}, {"root": "INS EnumDeclaration to AnnotationTypeDeclaration at 16", "operations": ["INS TagElement to Javadoc at 0", "INS EnumDeclaration to AnnotationTypeDeclaration at 16", "INS Javadoc to EnumDeclaration at 0", "INS TextElement: Function scope is used to indicate function output rows relation: to TagElement at 0", "INS TextElement: simple / scalar (1 -> 1) or aggregate (n -> 1). to TagElement at 1", "INS SimpleName: FunctionScope to EnumDeclaration at 2"]}, {"root": "INS EnumDeclaration to AnnotationTypeDeclaration at 17", "operations": ["INS SimpleName: inference to Assignment: = at 1", "INS SimpleName: inference to MethodInvocation at 0", "INS SimpleName: ReturnTypeInference to SimpleType: ReturnTypeInference at 0", "INS EnumDeclaration to AnnotationTypeDeclaration at 17", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: logicalExpressions to SingleVariableDeclaration at 1", "INS EnumConstantDeclaration to EnumDeclaration at 6", "INS QualifiedName: SameInOutLengthReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1", "INS SimpleName: attributes to SingleVariableDeclaration at 1", "INS QualifiedName: PadReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1", "INS SimpleName: inference to VariableDeclarationFragment at 0", "INS SimpleName: inference to SingleVariableDeclaration at 1", "INS SimpleName: logicalExpressions to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 1", "INS QualifiedName: TypeProtos.MajorType to SimpleType: TypeProtos.MajorType at 0", "INS SimpleName: ReturnTypeInference to SimpleType: ReturnTypeInference at 0", "INS ReturnStatement to Block at 0", "INS Javadoc to EnumDeclaration at 0", "INS SimpleName: inference to FieldAccess at 1", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: FunctionAttributes to SimpleType: FunctionAttributes at 0", "INS MethodDeclaration to EnumDeclaration at 19", "INS SimpleName: DEFAULT to EnumConstantDeclaration at 0", "INS SimpleType: ReturnTypeInference to FieldDeclaration at 2", "INS Block to MethodDeclaration at 2", "INS ExpressionStatement to Block at 0", "INS TextElement: should be used for functions. to TagElement at 1", "INS Block to MethodDeclaration at 5", "INS QualifiedName: DefaultReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1", "INS SimpleType: LogicalExpression to ParameterizedType: List<LogicalExpression> at 1", "INS SimpleName: PAD to EnumConstantDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: LogicalExpression to SimpleType: LogicalExpression at 0", "INS Modifier: private to FieldDeclaration at 0", "INS EnumConstantDeclaration to EnumDeclaration at 5", "INS SimpleName: CONCAT to EnumConstantDeclaration at 0", "INS SimpleName: attributes to MethodInvocation at 3", "INS SimpleType: ReturnTypeInference to SingleVariableDeclaration at 0", "INS QualifiedName: ConcatReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1", "INS TagElement to Javadoc at 0", "INS QualifiedName: StringCastReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1", "INS SimpleName: SAME_IN_OUT_LENGTH to EnumConstantDeclaration at 0", "INS TextElement: Return type enum is used to indicate which return type calculation logic to TagElement at 0", "INS MethodDeclaration to EnumDeclaration at 20", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleType: TypeProtos.MajorType to MethodDeclaration at 1", "INS SimpleType: List to ParameterizedType: List<LogicalExpression> at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS SimpleName: getType to MethodDeclaration at 2", "INS EnumConstantDeclaration to EnumDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS EnumConstantDeclaration to EnumDeclaration at 4", "INS FieldDeclaration to EnumDeclaration at 18", "INS ParameterizedType: List<LogicalExpression> to SingleVariableDeclaration at 0", "INS SimpleName: ReturnType to MethodDeclaration at 0", "INS EnumConstantDeclaration to EnumDeclaration at 7", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: FunctionAttributes to SingleVariableDeclaration at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: STRING_CAST to EnumConstantDeclaration at 0", "INS ThisExpression to FieldAccess at 0"]}, {"root": "MOVE from EnumDeclaration", "operations": ["MOV SimpleName: FunctionScope to EnumDeclaration at 2", "MOV Modifier: public to EnumDeclaration at 1", "MOV EnumConstantDeclaration to EnumDeclaration at 13", "MOV EnumConstantDeclaration to EnumDeclaration at 4", "MOV EnumConstantDeclaration to EnumDeclaration at 10", "MOV EnumConstantDeclaration to EnumDeclaration at 16", "MOV Modifier: static to EnumDeclaration at 1", "MOV EnumConstantDeclaration to EnumDeclaration at 9", "MOV EnumConstantDeclaration to EnumDeclaration at 12", "MOV EnumConstantDeclaration to EnumDeclaration at 8", "MOV EnumConstantDeclaration to EnumDeclaration at 11", "MOV EnumConstantDeclaration to EnumDeclaration at 17", "MOV EnumConstantDeclaration to EnumDeclaration at 6", "MOV EnumConstantDeclaration to EnumDeclaration at 5", "MOV EnumConstantDeclaration to EnumDeclaration at 3", "MOV EnumConstantDeclaration to EnumDeclaration at 14", "MOV EnumConstantDeclaration to EnumDeclaration at 15"]}, {"root": "UPDATE from static to public", "operations": ["UPD Modifier: static from static to public"]}, {"root": "UPDATE from FunctionScope to ReturnType", "operations": ["UPD SimpleName: FunctionScope from FunctionScope to ReturnType"]}, {"root": "INS QualifiedName: DecimalReturnTypeInference.DecimalAggReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1", "operations": ["INS QualifiedName: DecimalReturnTypeInference.DecimalAggReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1"]}, {"root": "INS QualifiedName: DecimalReturnTypeInference.DecimalSumAggReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1", "operations": ["INS QualifiedName: DecimalReturnTypeInference.DecimalSumAggReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1"]}, {"root": "INS QualifiedName: DecimalReturnTypeInference.DecimalMaxScaleReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1", "operations": ["INS QualifiedName: DecimalReturnTypeInference.DecimalMaxScaleReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1"]}, {"root": "UPDATE from DECIMAL_MUL_SCALE to DECIMAL_SUM_SCALE", "operations": ["UPD SimpleName: DECIMAL_MUL_SCALE from DECIMAL_MUL_SCALE to DECIMAL_SUM_SCALE"]}, {"root": "INS QualifiedName: DecimalReturnTypeInference.DecimalSumScaleReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1", "operations": ["INS QualifiedName: DecimalReturnTypeInference.DecimalSumScaleReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1"]}, {"root": "INS QualifiedName: DecimalReturnTypeInference.DecimalCastReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1", "operations": ["INS QualifiedName: DecimalReturnTypeInference.DecimalCastReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1"]}, {"root": "INS QualifiedName: DecimalReturnTypeInference.DecimalDivScaleReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1", "operations": ["INS QualifiedName: DecimalReturnTypeInference.DecimalDivScaleReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1"]}, {"root": "INS QualifiedName: DecimalReturnTypeInference.DecimalModScaleReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1", "operations": ["INS QualifiedName: DecimalReturnTypeInference.DecimalModScaleReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1"]}, {"root": "INS QualifiedName: DecimalReturnTypeInference.DecimalAddReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1", "operations": ["INS QualifiedName: DecimalReturnTypeInference.DecimalAddReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1"]}, {"root": "INS QualifiedName: DecimalReturnTypeInference.DecimalSetScaleReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1", "operations": ["INS QualifiedName: DecimalReturnTypeInference.DecimalSetScaleReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1"]}, {"root": "INS QualifiedName: DecimalReturnTypeInference.DecimalZeroScaleReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1", "operations": ["INS QualifiedName: DecimalReturnTypeInference.DecimalZeroScaleReturnTypeInference.INSTANCE to EnumConstantDeclaration at 1"]}, {"root": "INS TextElement:  function name to TagElement: @return at 0", "operations": ["INS TextElement:  function name to TagElement: @return at 0"]}, {"root": "INS TextElement:  list of function names to TagElement: @return at 0", "operations": ["INS TextElement:  list of function names to TagElement: @return at 0"]}, {"root": "UPDATE from Set Operand type-checking strategy for an operator which takes no operands and need to be invoked to <p>Set Operand type-checking strategy for an operator which takes no operands and need to be invoked", "operations": ["UPD TextElement: Set Operand type-checking strategy for an operator which takes no operands and need to be invoked from Set Operand type-checking strategy for an operator which takes no operands and need to be invoked to <p>Set Operand type-checking strategy for an operator which takes no operands and need to be invoked"]}, {"root": "UPDATE from without parentheses. E.g.: session_id is a niladic function. to without parentheses. E.g.: session_id is a niladic function.</p>", "operations": ["UPD TextElement: without parentheses. E.g.: session_id is a niladic function. from without parentheses. E.g.: session_id is a niladic function. to without parentheses. E.g.: session_id is a niladic function.</p>"]}, {"root": "UPDATE from Niladic functions override columns that have names same as any niladic function. Such columns cannot be to <p>Niladic functions override columns that have names same as any niladic function. Such columns cannot be", "operations": ["UPD TextElement: Niladic functions override columns that have names same as any niladic function. Such columns cannot be from Niladic functions override columns that have names same as any niladic function. Such columns cannot be to <p>Niladic functions override columns that have names same as any niladic function. Such columns cannot be"]}, {"root": "UPDATE from qualification is not used. to qualification is not used.</p>", "operations": ["UPD TextElement: qualification is not used. from qualification is not used. to qualification is not used.</p>"]}, {"root": "UPDATE from For e.g. in the case of session_id: to <p>For e.g. in the case of session_id:<br/>", "operations": ["UPD TextElement: For e.g. in the case of session_id: from For e.g. in the case of session_id: to <p>For e.g. in the case of session_id:<br/>"]}, {"root": "UPDATE from select session_id from <table> -> returns the value of niladic function session_id to select session_id from table -> returns the value of niladic function session_id<br/>", "operations": ["UPD TextElement: select session_id from <table> -> returns the value of niladic function session_id from select session_id from <table> -> returns the value of niladic function session_id to select session_id from table -> returns the value of niladic function session_id<br/>"]}, {"root": "UPDATE from select t1.session_id from <table> t1 -> returns session_id column value from <table> to select t1.session_id from table t1 -> returns session_id column value from table<p>", "operations": ["UPD TextElement: select t1.session_id from <table> t1 -> returns session_id column value from <table> from select t1.session_id from <table> t1 -> returns session_id column value from <table> to select t1.session_id from table t1 -> returns session_id column value from table<p>"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: limitations under the License.", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TagElement", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL Javadoc"]}, {"root": "DEL Modifier: static", "operations": ["DEL Modifier: static"]}, {"root": "DEL EnumDeclaration", "operations": ["DEL EnumConstantDeclaration", "DEL EnumDeclaration", "DEL SimpleName: SC_BOOLEAN_OPERATOR"]}, {"root": "DEL Modifier: static", "operations": ["DEL Modifier: static"]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}]}}, {"FunctionTemplate_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(312) at 1", "Insert ImportDeclaration(5) into CompilationUnit(312) at 2", "Insert ImportDeclaration(7) into CompilationUnit(312) at 3", "Insert ImportDeclaration(9) into CompilationUnit(312) at 4", "Insert ImportDeclaration(11) into CompilationUnit(312) at 5", "Insert ImportDeclaration(13) into CompilationUnit(312) at 6", "Insert ImportDeclaration(15) into CompilationUnit(312) at 7", "Insert ImportDeclaration(17) into CompilationUnit(312) at 8", "Insert ImportDeclaration(19) into CompilationUnit(312) at 9", "Insert ImportDeclaration(21) into CompilationUnit(312) at 10", "Insert ImportDeclaration(23) into CompilationUnit(312) at 11", "Insert ImportDeclaration(33) into CompilationUnit(312) at 16", "Insert QualifiedName: org.apache.drill.common.expression.LogicalExpression(2) into ImportDeclaration(3) at 0", "Insert QualifiedName: org.apache.drill.common.types.TypeProtos(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: org.apache.drill.exec.expr.fn.FunctionAttributes(6) into ImportDeclaration(7) at 0", "Insert QualifiedName: org.apache.drill.exec.expr.fn.FunctionInitializer(8) into ImportDeclaration(9) at 0", "Insert QualifiedName: org.apache.drill.exec.expr.fn.output.ConcatReturnTypeInference(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: org.apache.drill.exec.expr.fn.output.DecimalReturnTypeInference(12) into ImportDeclaration(13) at 0", "Insert QualifiedName: org.apache.drill.exec.expr.fn.output.DefaultReturnTypeInference(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: org.apache.drill.exec.expr.fn.output.PadReturnTypeInference(16) into ImportDeclaration(17) at 0", "Insert QualifiedName: org.apache.drill.exec.expr.fn.output.ReturnTypeInference(18) into ImportDeclaration(19) at 0", "Insert QualifiedName: org.apache.drill.exec.expr.fn.output.SameInOutLengthReturnTypeInference(20) into ImportDeclaration(21) at 0", "Insert QualifiedName: org.apache.drill.exec.expr.fn.output.StringCastReturnTypeInference(22) into ImportDeclaration(23) at 0", "Insert QualifiedName: java.util.List(32) into ImportDeclaration(33) at 0", "Insert AnnotationTypeMemberDeclaration(95) into AnnotationTypeDeclaration(311) at 7", "Insert AnnotationTypeMemberDeclaration(136) into AnnotationTypeDeclaration(311) at 14", "Insert EnumDeclaration(167) into AnnotationTypeDeclaration(311) at 16", "Insert EnumDeclaration(262) into AnnotationTypeDeclaration(311) at 17", "Insert SimpleType: ReturnType(92) into AnnotationTypeMemberDeclaration(95) at 0", "Insert SimpleName: returnType(93) into AnnotationTypeMemberDeclaration(95) at 1", "Insert QualifiedName: ReturnType.DEFAULT(94) into AnnotationTypeMemberDeclaration(95) at 2", "Insert PrimitiveType: boolean(133) into AnnotationTypeMemberDeclaration(136) at 0", "Insert SimpleName: checkPrecisionRange(134) into AnnotationTypeMemberDeclaration(136) at 1", "Insert BooleanLiteral: false(135) into AnnotationTypeMemberDeclaration(136) at 2", "Insert Javadoc(156) into EnumDeclaration(167) at 0", "Move Modifier: public(134) into EnumDeclaration(167) at 1", "Insert SimpleName: FunctionScope(158) into EnumDeclaration(167) at 2", "Move EnumConstantDeclaration(138) into EnumDeclaration(167) at 3", "Move EnumConstantDeclaration(140) into EnumDeclaration(167) at 4", "Move EnumConstantDeclaration(146) into EnumDeclaration(167) at 5", "Move EnumConstantDeclaration(148) into EnumDeclaration(167) at 6", "Insert Javadoc(171) into EnumDeclaration(262) at 0", "Update Modifier: static(135) to public", "Move Modifier: static(135) into EnumDeclaration(262) at 1", "Update SimpleName: FunctionScope(136) to ReturnType", "Move SimpleName: FunctionScope(136) into EnumDeclaration(262) at 2", "Insert EnumConstantDeclaration(176) into EnumDeclaration(262) at 3", "Insert EnumConstantDeclaration(179) into EnumDeclaration(262) at 4", "Insert EnumConstantDeclaration(182) into EnumDeclaration(262) at 5", "Insert EnumConstantDeclaration(185) into EnumDeclaration(262) at 6", "Insert EnumConstantDeclaration(188) into EnumDeclaration(262) at 7", "Move EnumConstantDeclaration(142) into EnumDeclaration(262) at 8", "Move EnumConstantDeclaration(144) into EnumDeclaration(262) at 9", "Move EnumConstantDeclaration(150) into EnumDeclaration(262) at 10", "Move EnumConstantDeclaration(152) into EnumDeclaration(262) at 11", "Move EnumConstantDeclaration(154) into EnumDeclaration(262) at 12", "Move EnumConstantDeclaration(156) into EnumDeclaration(262) at 13", "Move EnumConstantDeclaration(158) into EnumDeclaration(262) at 14", "Move EnumConstantDeclaration(160) into EnumDeclaration(262) at 15", "Move EnumConstantDeclaration(162) into EnumDeclaration(262) at 16", "Move EnumConstantDeclaration(164) into EnumDeclaration(262) at 17", "Insert FieldDeclaration(225) into EnumDeclaration(262) at 18", "Insert MethodDeclaration(238) into EnumDeclaration(262) at 19", "Insert MethodDeclaration(261) into EnumDeclaration(262) at 20", "Insert SimpleName: ReturnType(91) into SimpleType: ReturnType(92) at 0", "Insert TagElement(155) into Javadoc(156) at 0", "Insert TagElement(170) into Javadoc(171) at 0", "Insert SimpleName: DEFAULT(174) into EnumConstantDeclaration(176) at 0", "Insert QualifiedName: DefaultReturnTypeInference.INSTANCE(175) into EnumConstantDeclaration(176) at 1", "Insert SimpleName: STRING_CAST(177) into EnumConstantDeclaration(179) at 0", "Insert QualifiedName: StringCastReturnTypeInference.INSTANCE(178) into EnumConstantDeclaration(179) at 1", "Insert SimpleName: CONCAT(180) into EnumConstantDeclaration(182) at 0", "Insert QualifiedName: ConcatReturnTypeInference.INSTANCE(181) into EnumConstantDeclaration(182) at 1", "Insert SimpleName: PAD(183) into EnumConstantDeclaration(185) at 0", "Insert QualifiedName: PadReturnTypeInference.INSTANCE(184) into EnumConstantDeclaration(185) at 1", "Insert SimpleName: SAME_IN_OUT_LENGTH(186) into EnumConstantDeclaration(188) at 0", "Insert QualifiedName: SameInOutLengthReturnTypeInference.INSTANCE(187) into EnumConstantDeclaration(188) at 1", "Insert QualifiedName: DecimalReturnTypeInference.DecimalAggReturnTypeInference.INSTANCE(190) into EnumConstantDeclaration(191) at 1", "Insert QualifiedName: DecimalReturnTypeInference.DecimalSumAggReturnTypeInference.INSTANCE(193) into EnumConstantDeclaration(194) at 1", "Insert QualifiedName: DecimalReturnTypeInference.DecimalMaxScaleReturnTypeInference.INSTANCE(196) into EnumConstantDeclaration(197) at 1", "Update SimpleName: DECIMAL_MUL_SCALE(151) to DECIMAL_SUM_SCALE", "Insert QualifiedName: DecimalReturnTypeInference.DecimalSumScaleReturnTypeInference.INSTANCE(199) into EnumConstantDeclaration(200) at 1", "Insert QualifiedName: DecimalReturnTypeInference.DecimalCastReturnTypeInference.INSTANCE(202) into EnumConstantDeclaration(203) at 1", "Insert QualifiedName: DecimalReturnTypeInference.DecimalDivScaleReturnTypeInference.INSTANCE(205) into EnumConstantDeclaration(206) at 1", "Insert QualifiedName: DecimalReturnTypeInference.DecimalModScaleReturnTypeInference.INSTANCE(208) into EnumConstantDeclaration(209) at 1", "Insert QualifiedName: DecimalReturnTypeInference.DecimalAddReturnTypeInference.INSTANCE(211) into EnumConstantDeclaration(212) at 1", "Insert QualifiedName: DecimalReturnTypeInference.DecimalSetScaleReturnTypeInference.INSTANCE(214) into EnumConstantDeclaration(215) at 1", "Insert QualifiedName: DecimalReturnTypeInference.DecimalZeroScaleReturnTypeInference.INSTANCE(217) into EnumConstantDeclaration(218) at 1", "Insert Modifier: private(219) into FieldDeclaration(225) at 0", "Insert Modifier: final(220) into FieldDeclaration(225) at 1", "Insert SimpleType: ReturnTypeInference(222) into FieldDeclaration(225) at 2", "Insert VariableDeclarationFragment(224) into FieldDeclaration(225) at 3", "Insert SimpleName: ReturnType(226) into MethodDeclaration(238) at 0", "Insert SingleVariableDeclaration(230) into MethodDeclaration(238) at 1", "Insert Block(237) into MethodDeclaration(238) at 2", "Insert Modifier: public(239) into MethodDeclaration(261) at 0", "Insert SimpleType: TypeProtos.MajorType(241) into MethodDeclaration(261) at 1", "Insert SimpleName: getType(242) into MethodDeclaration(261) at 2", "Insert SingleVariableDeclaration(249) into MethodDeclaration(261) at 3", "Insert SingleVariableDeclaration(253) into MethodDeclaration(261) at 4", "Insert Block(260) into MethodDeclaration(261) at 5", "Insert TextElement:  function name(56) into TagElement: @return(57) at 0", "Insert TextElement:  list of function names(77) into TagElement: @return(78) at 0", "Update TextElement: Set Operand type-checking strategy for an operator which takes no operands and need to be invoked(103) to <p>Set Operand type-checking strategy for an operator which takes no operands and need to be invoked", "Update TextElement: without parentheses. E.g.: session_id is a niladic function.(104) to without parentheses. E.g.: session_id is a niladic function.</p>", "Update TextElement: Niladic functions override columns that have names same as any niladic function. Such columns cannot be(105) to <p>Niladic functions override columns that have names same as any niladic function. Such columns cannot be", "Update TextElement: qualification is not used.(107) to qualification is not used.</p>", "Update TextElement: For e.g. in the case of session_id:(108) to <p>For e.g. in the case of session_id:<br/>", "Update TextElement: select session_id from <table> -> returns the value of niladic function session_id(109) to select session_id from table -> returns the value of niladic function session_id<br/>", "Update TextElement: select t1.session_id from <table> t1 -> returns session_id column value from <table>(110) to select t1.session_id from table t1 -> returns session_id column value from table<p>", "Insert TextElement: Function scope is used to indicate function output rows relation:(153) into TagElement(155) at 0", "Insert TextElement: simple / scalar (1 -> 1) or aggregate (n -> 1).(154) into TagElement(155) at 1", "Insert TextElement: Return type enum is used to indicate which return type calculation logic(168) into TagElement(170) at 0", "Insert TextElement: should be used for functions.(169) into TagElement(170) at 1", "Insert SimpleName: ReturnTypeInference(221) into SimpleType: ReturnTypeInference(222) at 0", "Insert SimpleName: inference(223) into VariableDeclarationFragment(224) at 0", "Insert SimpleType: ReturnTypeInference(228) into SingleVariableDeclaration(230) at 0", "Insert SimpleName: inference(229) into SingleVariableDeclaration(230) at 1", "Insert ExpressionStatement(236) into Block(237) at 0", "Insert QualifiedName: TypeProtos.MajorType(240) into SimpleType: TypeProtos.MajorType(241) at 0", "Insert ParameterizedType: List<LogicalExpression>(247) into SingleVariableDeclaration(249) at 0", "Insert SimpleName: logicalExpressions(248) into SingleVariableDeclaration(249) at 1", "Insert SimpleType: FunctionAttributes(251) into SingleVariableDeclaration(253) at 0", "Insert SimpleName: attributes(252) into SingleVariableDeclaration(253) at 1", "Insert ReturnStatement(259) into Block(260) at 0", "Insert SimpleName: ReturnTypeInference(227) into SimpleType: ReturnTypeInference(228) at 0", "Insert Assignment: =(235) into ExpressionStatement(236) at 0", "Insert SimpleType: List(244) into ParameterizedType: List<LogicalExpression>(247) at 0", "Insert SimpleType: LogicalExpression(246) into ParameterizedType: List<LogicalExpression>(247) at 1", "Insert SimpleName: FunctionAttributes(250) into SimpleType: FunctionAttributes(251) at 0", "Insert MethodInvocation(258) into ReturnStatement(259) at 0", "Insert FieldAccess(233) into Assignment: =(235) at 0", "Insert SimpleName: inference(234) into Assignment: =(235) at 1", "Insert SimpleName: List(243) into SimpleType: List(244) at 0", "Insert SimpleName: LogicalExpression(245) into SimpleType: LogicalExpression(246) at 0", "Insert SimpleName: inference(254) into MethodInvocation(258) at 0", "Insert SimpleName: getType(255) into MethodInvocation(258) at 1", "Insert SimpleName: logicalExpressions(256) into MethodInvocation(258) at 2", "Insert SimpleName: attributes(257) into MethodInvocation(258) at 3", "Insert ThisExpression(231) into FieldAccess(233) at 0", "Insert SimpleName: inference(232) into FieldAccess(233) at 1", "Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete Modifier: static(118)", "Delete SimpleName: SC_BOOLEAN_OPERATOR(165)", "Delete EnumConstantDeclaration(166)", "Delete EnumDeclaration(167)", "Delete Modifier: static(169)", "Delete Modifier: private(186)"]}}, {"DrillAggFuncHolder_cluster": {"actions": [{"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ArrayType: JVar[] to VariableDeclarationStatement at 0"]}, {"root": "INS FieldAccess to InfixExpression: < at 1", "operations": ["INS SimpleName: getWorkspaceVars to MethodInvocation at 0", "INS MethodInvocation to FieldAccess at 0", "INS FieldAccess to InfixExpression: < at 1", "INS SimpleName: length to FieldAccess at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getReturnType to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 4", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleName: getReturnValue to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1"]}, {"root": "MOVE from ArrayCreation", "operations": ["MOV ArrayType: JVar[] to ArrayCreation at 0"]}, {"root": "INS FieldAccess to ArrayCreation at 1", "operations": ["INS FieldAccess to ArrayCreation at 1", "INS SimpleName: length to FieldAccess at 1", "INS MethodInvocation to FieldAccess at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS MethodInvocation to IfStatement at 0"]}, {"root": "INS FieldAccess to InfixExpression: < at 1", "operations": ["INS SimpleName: length to FieldAccess at 1", "INS FieldAccess to InfixExpression: < at 1", "INS MethodInvocation to FieldAccess at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0"]}, {"root": "INS FieldAccess to InfixExpression: < at 1", "operations": ["INS SimpleName: getWorkspaceVars to MethodInvocation at 0", "INS FieldAccess to InfixExpression: < at 1", "INS SimpleName: length to FieldAccess at 1", "INS MethodInvocation to FieldAccess at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getReturnType to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ArrayAccess to MethodInvocation at 0", "MOV SimpleName: isInject to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: getWorkspaceVars to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: getMajorType to MethodInvocation at 1", "INS MethodInvocation to ArrayAccess at 0"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: getWorkspaceVars to MethodInvocation at 0", "INS MethodInvocation to ArrayAccess at 0", "INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: getMajorType to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getReturnType to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS SimpleName: getWorkspaceVars to MethodInvocation at 0", "INS MethodInvocation to ArrayAccess at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: getRegisteredNames to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS SimpleName: getRegisteredNames to MethodInvocation at 0", "INS MethodInvocation to ArrayAccess at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: parameter to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS ArrayAccess to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getMajorType to MethodInvocation at 1", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: getWorkspaceVars to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ArrayAccess at 0", "INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: getMajorType to MethodInvocation at 1"]}, {"root": "INS InfixExpression: + to MethodInvocation at 2", "operations": ["INS StringLiteral: \"have variable length type.\" to InfixExpression: + at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \"Workspace variable '%s' in aggregation function '%s' is not allowed to \" to InfixExpression: + at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3"]}, {"root": "INS InfixExpression: + to MethodInvocation at 2", "operations": ["INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \" to have null or repeated type.\" to InfixExpression: + at 1", "INS StringLiteral: \"Workspace variable '%s' in aggregation function '%s' is not allowed\" to InfixExpression: + at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS MethodInvocation to MethodInvocation at 3", "INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS MethodInvocation to ArrayAccess at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0", "INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: getMajorType to MethodInvocation at 1", "INS MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS SimpleName: getWorkspaceVars to MethodInvocation at 0", "INS MethodInvocation to ArrayAccess at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS SimpleName: getParameters to MethodInvocation at 0", "INS MethodInvocation to ArrayAccess at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS SimpleName: getWorkspaceVars to MethodInvocation at 0", "INS MethodInvocation to ArrayAccess at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS SimpleName: getWorkspaceVars to MethodInvocation at 0", "INS MethodInvocation to ArrayAccess at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: getType to MethodInvocation at 1", "INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ArrayAccess at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: getRegisteredNames to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: getMajorType to MethodInvocation at 1", "INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS SimpleName: getRegisteredNames to MethodInvocation at 0", "INS MethodInvocation to ArrayAccess at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getMajorType to MethodInvocation at 1", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0", "INS MethodInvocation to ArrayAccess at 0", "INS ArrayAccess to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: getType to MethodInvocation at 1", "INS MethodInvocation to ArrayAccess at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS ArrayAccess to MethodInvocation at 0", "INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: getMajorType to MethodInvocation at 1", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS SimpleName: getWorkspaceVars to MethodInvocation at 0", "INS MethodInvocation to ArrayAccess at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 0"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: distributed with this work for additional information", "DEL Javadoc", "DEL TextElement: limitations under the License.", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TagElement", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: See the License for the specific language governing permissions and"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.base.Preconditions.checkNotNull"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.FunctionCostCategory", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.FunctionScope"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.codemodel.JType", "DEL ImportDeclaration"]}, {"root": "DEL QualifiedName: workspaceVars.length", "operations": ["DEL QualifiedName: workspaceVars.length"]}, {"root": "DEL SimpleName: workspaceVars", "operations": ["DEL SimpleName: workspaceVars"]}, {"root": "DEL SimpleName: workspaceVars", "operations": ["DEL SimpleName: workspaceVars"]}, {"root": "DEL QualifiedName: workspaceVars.length", "operations": ["DEL QualifiedName: workspaceVars.length"]}, {"root": "DEL SimpleName: workspaceVars", "operations": ["DEL SimpleName: workspaceVars"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL SimpleName: majorType", "DEL SimpleName: workspaceVars", "DEL ArrayAccess"]}, {"root": "DEL QualifiedName: returnValue.type", "operations": ["DEL QualifiedName: returnValue.type"]}, {"root": "DEL QualifiedName: returnValue.type", "operations": ["DEL QualifiedName: returnValue.type"]}, {"root": "DEL QualifiedName: returnValue.name", "operations": ["DEL QualifiedName: returnValue.name"]}, {"root": "DEL QualifiedName: returnValue.type", "operations": ["DEL QualifiedName: returnValue.type"]}, {"root": "DEL QualifiedName: workspaceVars.length", "operations": ["DEL QualifiedName: workspaceVars.length"]}, {"root": "DEL QualifiedName: workspaceVars.length", "operations": ["DEL QualifiedName: workspaceVars.length"]}, {"root": "DEL SimpleName: workspaceVars", "operations": ["DEL SimpleName: workspaceVars"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL InfixExpression: ==", "DEL MethodInvocation", "DEL BooleanLiteral: true"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: type", "DEL SimpleName: workspaceVars", "DEL FieldAccess", "DEL ArrayAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL ArrayAccess", "DEL SimpleName: workspaceVars", "DEL FieldAccess", "DEL SimpleName: majorType"]}, {"root": "DEL StringLiteral: \"Workspace variable '%s' in aggregation function '%s' is not allowed to have variable length type.\"", "operations": ["DEL StringLiteral: \"Workspace variable '%s' in aggregation function '%s' is not allowed to have variable length type.\""]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: workspaceVars", "DEL SimpleName: name", "DEL FieldAccess", "DEL ArrayAccess"]}, {"root": "DEL SimpleName: registeredNames", "operations": ["DEL SimpleName: registeredNames"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: workspaceVars", "DEL SimpleName: majorType", "DEL ArrayAccess", "DEL FieldAccess"]}, {"root": "DEL StringLiteral: \"Workspace variable '%s' in aggregation function '%s' is not allowed to have null or repeated type.\"", "operations": ["DEL StringLiteral: \"Workspace variable '%s' in aggregation function '%s' is not allowed to have null or repeated type.\""]}, {"root": "DEL FieldAccess", "operations": ["DEL ArrayAccess", "DEL SimpleName: name", "DEL SimpleName: workspaceVars", "DEL FieldAccess"]}, {"root": "DEL SimpleName: registeredNames", "operations": ["DEL SimpleName: registeredNames"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL SimpleName: workspaceVars", "DEL SimpleName: majorType", "DEL ArrayAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL ArrayAccess", "DEL SimpleName: majorType", "DEL FieldAccess", "DEL SimpleName: workspaceVars"]}, {"root": "DEL SimpleName: workspaceVars", "operations": ["DEL SimpleName: workspaceVars"]}, {"root": "DEL SimpleName: registeredNames", "operations": ["DEL SimpleName: registeredNames"]}, {"root": "DEL SimpleName: registeredNames", "operations": ["DEL SimpleName: registeredNames"]}, {"root": "DEL SimpleName: parameters", "operations": ["DEL SimpleName: parameters"]}, {"root": "DEL QualifiedName: parameter.name", "operations": ["DEL QualifiedName: parameter.name"]}, {"root": "DEL SimpleName: workspaceVars", "operations": ["DEL SimpleName: workspaceVars"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL SimpleName: type", "DEL ArrayAccess", "DEL SimpleName: workspaceVars"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: name", "DEL SimpleName: workspaceVars", "DEL FieldAccess", "DEL ArrayAccess"]}, {"root": "DEL SimpleName: workspaceVars", "operations": ["DEL SimpleName: workspaceVars"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: majorType", "DEL FieldAccess", "DEL ArrayAccess", "DEL SimpleName: workspaceVars"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: majorType", "DEL ArrayAccess", "DEL SimpleName: workspaceVars", "DEL FieldAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL SimpleName: name", "DEL SimpleName: workspaceVars", "DEL ArrayAccess"]}, {"root": "DEL SimpleName: workspaceVars", "operations": ["DEL SimpleName: workspaceVars"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: workspaceVars", "DEL FieldAccess", "DEL ArrayAccess", "DEL SimpleName: majorType"]}, {"root": "DEL SimpleName: workspaceVars", "operations": ["DEL SimpleName: workspaceVars"]}, {"root": "DEL SimpleName: workspaceVars", "operations": ["DEL SimpleName: workspaceVars"]}, {"root": "DEL SimpleName: workspaceVars", "operations": ["DEL SimpleName: workspaceVars"]}]}}, {"DrillAggFuncHolder_diff": {"operations": ["Move ArrayType: JVar[](609) into VariableDeclarationStatement(605) at 0", "Insert FieldAccess(615) into InfixExpression: <(616) at 1", "Insert MethodInvocation(482) into MethodInvocation(484) at 2", "Insert MethodInvocation(516) into MethodInvocation(525) at 4", "Move ArrayType: JVar[](604) into ArrayCreation(603) at 0", "Insert FieldAccess(602) into ArrayCreation(603) at 1", "Insert MethodInvocation(613) into FieldAccess(615) at 0", "Insert SimpleName: length(614) into FieldAccess(615) at 1", "Insert MethodInvocation(624) into IfStatement(796) at 0", "Insert FieldAccess(259) into InfixExpression: <(260) at 1", "Insert FieldAccess(309) into InfixExpression: <(310) at 1", "Insert SimpleName: getReturnType(481) into MethodInvocation(482) at 0", "Insert MethodInvocation(511) into MethodInvocation(512) at 2", "Insert MethodInvocation(514) into MethodInvocation(516) at 0", "Insert SimpleName: getName(515) into MethodInvocation(516) at 1", "Insert MethodInvocation(600) into FieldAccess(602) at 0", "Insert SimpleName: length(601) into FieldAccess(602) at 1", "Insert SimpleName: getWorkspaceVars(612) into MethodInvocation(613) at 0", "Move ArrayAccess(626) into MethodInvocation(624) at 0", "Move SimpleName: isInject(627) into MethodInvocation(624) at 1", "Insert MethodInvocation(1155) into MethodInvocation(1156) at 2", "Insert MethodInvocation(1267) into VariableDeclarationFragment(1268) at 1", "Insert MethodInvocation(257) into FieldAccess(259) at 0", "Insert SimpleName: length(258) into FieldAccess(259) at 1", "Insert MethodInvocation(307) into FieldAccess(309) at 0", "Insert SimpleName: length(308) into FieldAccess(309) at 1", "Insert SimpleName: getReturnType(510) into MethodInvocation(511) at 0", "Insert SimpleName: getReturnValue(513) into MethodInvocation(514) at 0", "Insert MethodInvocation(522) into MethodInvocation(523) at 2", "Insert SimpleName: getWorkspaceVars(599) into MethodInvocation(600) at 0", "Insert MethodInvocation(620) into ArrayAccess(622) at 0", "Insert MethodInvocation(1092) into ArrayAccess(1094) at 0", "Insert ArrayAccess(1153) into MethodInvocation(1155) at 0", "Insert SimpleName: getMajorType(1154) into MethodInvocation(1155) at 1", "Insert MethodInvocation(1206) into MethodInvocation(1210) at 3", "Insert MethodInvocation(1246) into ArrayAccess(1248) at 0", "Insert ArrayAccess(1265) into MethodInvocation(1267) at 0", "Insert SimpleName: getMajorType(1266) into MethodInvocation(1267) at 1", "Insert SimpleName: getWorkspaceVars(256) into MethodInvocation(257) at 0", "Insert SimpleName: getWorkspaceVars(306) into MethodInvocation(307) at 0", "Insert SimpleName: getReturnType(521) into MethodInvocation(522) at 0", "Insert SimpleName: getWorkspaceVars(619) into MethodInvocation(620) at 0", "Insert MethodInvocation(881) into ArrayAccess(883) at 0", "Insert MethodInvocation(901) into ArrayAccess(903) at 0", "Insert MethodInvocation(1058) into MethodInvocation(1062) at 3", "Insert SimpleName: getWorkspaceVars(1091) into MethodInvocation(1092) at 0", "Insert MethodInvocation(1151) into ArrayAccess(1153) at 0", "Move SimpleName: i(1134) into ArrayAccess(1153) at 1", "Insert MethodInvocation(1199) into MethodInvocation(1200) at 2", "Insert ArrayAccess(1204) into MethodInvocation(1206) at 0", "Insert SimpleName: getName(1205) into MethodInvocation(1206) at 1", "Insert SimpleName: getWorkspaceVars(1245) into MethodInvocation(1246) at 0", "Insert MethodInvocation(1263) into ArrayAccess(1265) at 0", "Move SimpleName: i(1242) into ArrayAccess(1265) at 1", "Insert MethodInvocation(676) into MethodInvocation(677) at 2", "Insert InfixExpression: +(682) into MethodInvocation(693) at 2", "Insert MethodInvocation(688) into MethodInvocation(693) at 3", "Insert InfixExpression: +(712) into MethodInvocation(723) at 2", "Insert MethodInvocation(718) into MethodInvocation(723) at 3", "Insert MethodInvocation(754) into ClassInstanceCreation(760) at 1", "Insert MethodInvocation(789) into ArrayAccess(791) at 0", "Insert SimpleName: getRegisteredNames(880) into MethodInvocation(881) at 0", "Insert SimpleName: getRegisteredNames(900) into MethodInvocation(901) at 0", "Insert MethodInvocation(1036) into ArrayAccess(1038) at 0", "Insert SimpleName: parameter(1056) into MethodInvocation(1058) at 0", "Insert SimpleName: getName(1057) into MethodInvocation(1058) at 1", "Insert MethodInvocation(1118) into MethodInvocation(1122) at 3", "Insert SimpleName: getWorkspaceVars(1150) into MethodInvocation(1151) at 0", "Insert ArrayAccess(1197) into MethodInvocation(1199) at 0", "Insert SimpleName: getMajorType(1198) into MethodInvocation(1199) at 1", "Insert MethodInvocation(1202) into ArrayAccess(1204) at 0", "Move SimpleName: i(1183) into ArrayAccess(1204) at 1", "Insert SimpleName: getWorkspaceVars(1262) into MethodInvocation(1263) at 0", "Insert MethodInvocation(264) into ArrayAccess(266) at 0", "Insert MethodInvocation(314) into ArrayAccess(316) at 0", "Insert MethodInvocation(640) into MethodInvocation(641) at 2", "Insert ArrayAccess(674) into MethodInvocation(676) at 0", "Insert SimpleName: getMajorType(675) into MethodInvocation(676) at 1", "Insert StringLiteral: \"Workspace variable '%s' in aggregation function '%s' is not allowed to \"(680) into InfixExpression: +(682) at 0", "Insert StringLiteral: \"have variable length type.\"(681) into InfixExpression: +(682) at 1", "Insert ArrayAccess(686) into MethodInvocation(688) at 0", "Insert SimpleName: getName(687) into MethodInvocation(688) at 1", "Insert MethodInvocation(690) into ArrayAccess(692) at 0", "Insert MethodInvocation(703) into MethodInvocation(705) at 0", "Insert StringLiteral: \"Workspace variable '%s' in aggregation function '%s' is not allowed\"(710) into InfixExpression: +(712) at 0", "Insert StringLiteral: \" to have null or repeated type.\"(711) into InfixExpression: +(712) at 1", "Insert ArrayAccess(716) into MethodInvocation(718) at 0", "Insert SimpleName: getName(717) into MethodInvocation(718) at 1", "Insert MethodInvocation(720) into ArrayAccess(722) at 0", "Insert MethodInvocation(739) into MethodInvocation(740) at 2", "Insert ArrayAccess(752) into MethodInvocation(754) at 0", "Insert SimpleName: getMajorType(753) into MethodInvocation(754) at 1", "Insert SimpleName: getWorkspaceVars(788) into MethodInvocation(789) at 0", "Insert SimpleName: getParameters(1035) into MethodInvocation(1036) at 0", "Insert MethodInvocation(1111) into MethodInvocation(1112) at 2", "Insert ArrayAccess(1116) into MethodInvocation(1118) at 0", "Insert SimpleName: getName(1117) into MethodInvocation(1118) at 1", "Insert MethodInvocation(1136) into ArrayAccess(1138) at 0", "Insert MethodInvocation(1195) into ArrayAccess(1197) at 0", "Move SimpleName: i(1177) into ArrayAccess(1197) at 1", "Insert SimpleName: getWorkspaceVars(1201) into MethodInvocation(1202) at 0", "Insert SimpleName: getWorkspaceVars(263) into MethodInvocation(264) at 0", "Insert SimpleName: getWorkspaceVars(313) into MethodInvocation(314) at 0", "Insert ArrayAccess(638) into MethodInvocation(640) at 0", "Insert SimpleName: getType(639) into MethodInvocation(640) at 1", "Insert MethodInvocation(672) into ArrayAccess(674) at 0", "Move SimpleName: i(677) into ArrayAccess(674) at 1", "Insert MethodInvocation(684) into ArrayAccess(686) at 0", "Move SimpleName: i(686) into ArrayAccess(686) at 1", "Insert SimpleName: getRegisteredNames(689) into MethodInvocation(690) at 0", "Insert ArrayAccess(701) into MethodInvocation(703) at 0", "Insert SimpleName: getMajorType(702) into MethodInvocation(703) at 1", "Insert MethodInvocation(714) into ArrayAccess(716) at 0", "Move SimpleName: i(711) into ArrayAccess(716) at 1", "Insert SimpleName: getRegisteredNames(719) into MethodInvocation(720) at 0", "Insert ArrayAccess(737) into MethodInvocation(739) at 0", "Insert SimpleName: getMajorType(738) into MethodInvocation(739) at 1", "Insert MethodInvocation(750) into ArrayAccess(752) at 0", "Move SimpleName: i(744) into ArrayAccess(752) at 1", "Insert ArrayAccess(1109) into MethodInvocation(1111) at 0", "Insert SimpleName: getType(1110) into MethodInvocation(1111) at 1", "Insert MethodInvocation(1114) into ArrayAccess(1116) at 0", "Move SimpleName: i(1099) into ArrayAccess(1116) at 1", "Insert SimpleName: getWorkspaceVars(1135) into MethodInvocation(1136) at 0", "Insert SimpleName: getWorkspaceVars(1194) into MethodInvocation(1195) at 0", "Move MethodInvocation(1341) into MethodInvocation(1337) at 2", "Move MethodInvocation(1312) into MethodInvocation(1367) at 2", "Insert MethodInvocation(334) into MethodInvocation(335) at 2", "Insert MethodInvocation(636) into ArrayAccess(638) at 0", "Move SimpleName: i(642) into ArrayAccess(638) at 1", "Insert SimpleName: getWorkspaceVars(671) into MethodInvocation(672) at 0", "Insert SimpleName: getWorkspaceVars(683) into MethodInvocation(684) at 0", "Insert MethodInvocation(699) into ArrayAccess(701) at 0", "Move SimpleName: i(699) into ArrayAccess(701) at 1", "Insert SimpleName: getWorkspaceVars(713) into MethodInvocation(714) at 0", "Insert MethodInvocation(735) into ArrayAccess(737) at 0", "Move SimpleName: i(730) into ArrayAccess(737) at 1", "Insert SimpleName: getWorkspaceVars(749) into MethodInvocation(750) at 0", "Insert MethodInvocation(1107) into ArrayAccess(1109) at 0", "Move SimpleName: i(1093) into ArrayAccess(1109) at 1", "Insert SimpleName: getWorkspaceVars(1113) into MethodInvocation(1114) at 0", "Insert ArrayAccess(332) into MethodInvocation(334) at 0", "Insert SimpleName: getMajorType(333) into MethodInvocation(334) at 1", "Insert SimpleName: getWorkspaceVars(635) into MethodInvocation(636) at 0", "Insert SimpleName: getWorkspaceVars(698) into MethodInvocation(699) at 0", "Insert SimpleName: getWorkspaceVars(734) into MethodInvocation(735) at 0", "Insert SimpleName: getWorkspaceVars(1106) into MethodInvocation(1107) at 0", "Move MethodInvocation(1291) into MethodInvocation(1283) at 0", "Insert MethodInvocation(286) into ArrayAccess(288) at 0", "Insert MethodInvocation(330) into ArrayAccess(332) at 0", "Move SimpleName: i(348) into ArrayAccess(332) at 1", "Insert MethodInvocation(1280) into ArrayAccess(1282) at 0", "Insert SimpleName: getWorkspaceVars(285) into MethodInvocation(286) at 0", "Insert SimpleName: getWorkspaceVars(329) into MethodInvocation(330) at 0", "Insert SimpleName: getWorkspaceVars(1279) into MethodInvocation(1280) at 0", "Move MethodInvocation(1320) into MethodInvocation(1320) at 0", "Move MethodInvocation(1255) into MethodInvocation(1350) at 0", "Insert MethodInvocation(1317) into ArrayAccess(1319) at 0", "Insert MethodInvocation(1347) into ArrayAccess(1349) at 0", "Insert SimpleName: getWorkspaceVars(1316) into MethodInvocation(1317) at 0", "Insert SimpleName: getWorkspaceVars(1346) into MethodInvocation(1347) at 0", "Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: com.google.common.base.Preconditions.checkNotNull(19)", "Delete ImportDeclaration(20)", "Delete QualifiedName: java.util.List(21)", "Delete ImportDeclaration(22)", "Delete QualifiedName: java.util.Map(23)", "Delete ImportDeclaration(24)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.FunctionCostCategory(39)", "Delete ImportDeclaration(40)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.FunctionScope(41)", "Delete ImportDeclaration(42)", "Delete QualifiedName: com.sun.codemodel.JType(65)", "Delete ImportDeclaration(66)", "Delete QualifiedName: workspaceVars.length(283)", "Delete SimpleName: workspaceVars(287)", "Delete SimpleName: workspaceVars(308)", "Delete QualifiedName: workspaceVars.length(328)", "Delete SimpleName: workspaceVars(332)", "Delete SimpleName: workspaceVars(347)", "Delete ArrayAccess(349)", "Delete SimpleName: majorType(350)", "Delete FieldAccess(351)", "Delete QualifiedName: returnValue.type(498)", "Delete QualifiedName: returnValue.type(526)", "Delete QualifiedName: returnValue.name(528)", "Delete QualifiedName: returnValue.type(533)", "Delete QualifiedName: workspaceVars.length(610)", "Delete QualifiedName: workspaceVars.length(620)", "Delete SimpleName: workspaceVars(624)", "Delete MethodInvocation(628)", "Delete BooleanLiteral: true(629)", "Delete InfixExpression: ==(630)", "Delete SimpleName: workspaceVars(641)", "Delete ArrayAccess(643)", "Delete SimpleName: type(644)", "Delete FieldAccess(645)", "Delete SimpleName: workspaceVars(676)", "Delete ArrayAccess(678)", "Delete SimpleName: majorType(679)", "Delete FieldAccess(680)", "Delete StringLiteral: \"Workspace variable '%s' in aggregation function '%s' is not allowed to have variable length type.\"(684)", "Delete SimpleName: workspaceVars(685)", "Delete ArrayAccess(687)", "Delete SimpleName: name(688)", "Delete FieldAccess(689)", "Delete SimpleName: registeredNames(690)", "Delete SimpleName: workspaceVars(698)", "Delete ArrayAccess(700)", "Delete SimpleName: majorType(701)", "Delete FieldAccess(702)", "Delete StringLiteral: \"Workspace variable '%s' in aggregation function '%s' is not allowed to have null or repeated type.\"(709)", "Delete SimpleName: workspaceVars(710)", "Delete ArrayAccess(712)", "Delete SimpleName: name(713)", "Delete FieldAccess(714)", "Delete SimpleName: registeredNames(715)", "Delete SimpleName: workspaceVars(729)", "Delete ArrayAccess(731)", "Delete SimpleName: majorType(732)", "Delete FieldAccess(733)", "Delete SimpleName: workspaceVars(743)", "Delete ArrayAccess(745)", "Delete SimpleName: majorType(746)", "Delete FieldAccess(747)", "Delete SimpleName: workspaceVars(781)", "Delete SimpleName: registeredNames(872)", "Delete SimpleName: registeredNames(891)", "Delete SimpleName: parameters(1025)", "Delete QualifiedName: parameter.name(1045)", "Delete SimpleName: workspaceVars(1078)", "Delete SimpleName: workspaceVars(1092)", "Delete ArrayAccess(1094)", "Delete SimpleName: type(1095)", "Delete FieldAccess(1096)", "Delete SimpleName: workspaceVars(1098)", "Delete ArrayAccess(1100)", "Delete SimpleName: name(1101)", "Delete FieldAccess(1102)", "Delete SimpleName: workspaceVars(1119)", "Delete SimpleName: workspaceVars(1133)", "Delete ArrayAccess(1135)", "Delete SimpleName: majorType(1136)", "Delete FieldAccess(1137)", "Delete SimpleName: workspaceVars(1176)", "Delete ArrayAccess(1178)", "Delete SimpleName: majorType(1179)", "Delete FieldAccess(1180)", "Delete SimpleName: workspaceVars(1182)", "Delete ArrayAccess(1184)", "Delete SimpleName: name(1185)", "Delete FieldAccess(1186)", "Delete SimpleName: workspaceVars(1225)", "Delete SimpleName: workspaceVars(1241)", "Delete ArrayAccess(1243)", "Delete SimpleName: majorType(1244)", "Delete FieldAccess(1245)", "Delete SimpleName: workspaceVars(1257)", "Delete SimpleName: workspaceVars(1293)", "Delete SimpleName: workspaceVars(1322)"]}}, {"DrillBooleanOPHolder_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: limitations under the License.", "DEL Javadoc", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL PackageDeclaration", "DEL TextElement: distributed with this work for additional information", "DEL QualifiedName: org.apache.drill.exec.expr.fn", "DEL TagElement", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: DrillBooleanOPHolder", "DEL SingleVariableDeclaration", "DEL SimpleType: DrillSimpleFuncHolder", "DEL TypeDeclaration: class", "DEL SimpleName: FunctionInitializer", "DEL Modifier: public", "DEL SimpleName: DrillBooleanOPHolder", "DEL SimpleName: DrillSimpleFuncHolder", "DEL SimpleType: FunctionInitializer", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: initializer", "DEL SimpleName: FunctionAttributes", "DEL SingleVariableDeclaration", "DEL Block", "DEL SuperConstructorInvocation", "DEL SimpleName: functionAttributes", "DEL SimpleType: FunctionAttributes", "DEL SimpleName: functionAttributes", "DEL SimpleName: initializer"]}]}}, {"DrillBooleanOPHolder_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.drill.exec.expr.fn(15)", "Delete PackageDeclaration(16)", "Delete Modifier: public(17)", "Delete SimpleName: DrillBooleanOPHolder(18)", "Delete SimpleName: DrillSimpleFuncHolder(19)", "Delete SimpleType: DrillSimpleFuncHolder(20)", "Delete Modifier: public(21)", "Delete SimpleName: DrillBooleanOPHolder(22)", "Delete SimpleName: FunctionAttributes(23)", "Delete SimpleType: FunctionAttributes(24)", "Delete SimpleName: functionAttributes(25)", "Delete SingleVariableDeclaration(26)", "Delete SimpleName: FunctionInitializer(27)", "Delete SimpleType: FunctionInitializer(28)", "Delete SimpleName: initializer(29)", "Delete SingleVariableDeclaration(30)", "Delete SimpleName: functionAttributes(31)", "Delete SimpleName: initializer(32)", "Delete SuperConstructorInvocation(33)", "Delete Block(34)", "Delete MethodDeclaration(35)", "Delete TypeDeclaration: class(36)"]}}, {"DrillComplexWriterFuncHolder_cluster": {"actions": [{"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: getReturnValue to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: getRegisteredNames to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS SimpleName: getRegisteredNames to MethodInvocation at 0", "INS MethodInvocation to ArrayAccess at 0"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: limitations under the License.", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TagElement", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL Javadoc", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: distributed with this work for additional information"]}, {"root": "DEL SimpleName: registeredNames", "operations": ["DEL SimpleName: registeredNames"]}, {"root": "DEL QualifiedName: returnValue.name", "operations": ["DEL QualifiedName: returnValue.name"]}, {"root": "DEL SimpleName: registeredNames", "operations": ["DEL SimpleName: registeredNames"]}]}}, {"DrillComplexWriterFuncHolder_diff": {"operations": ["Insert MethodInvocation(277) into MethodInvocation(279) at 3", "Insert MethodInvocation(275) into MethodInvocation(277) at 0", "Insert SimpleName: getName(276) into MethodInvocation(277) at 1", "Insert MethodInvocation(110) into ArrayAccess(112) at 0", "Insert SimpleName: getReturnValue(274) into MethodInvocation(275) at 0", "Insert MethodInvocation(305) into ArrayAccess(307) at 0", "Insert SimpleName: getRegisteredNames(109) into MethodInvocation(110) at 0", "Insert SimpleName: getRegisteredNames(304) into MethodInvocation(305) at 0", "Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete SimpleName: registeredNames(124)", "Delete QualifiedName: returnValue.name(288)", "Delete SimpleName: registeredNames(315)"]}}, {"DrillDecimalAddFuncHolder_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TagElement", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: limitations under the License.", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL Javadoc", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL PackageDeclaration", "DEL QualifiedName: org.apache.drill.exec.expr.fn", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: distributed with this work for additional information"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.expression.LogicalExpression"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.types.TypeProtos", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.types.TypeProtos.MajorType"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.util.DecimalScalePrecisionAddFunction", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.exec.expr.DrillSimpleFunc"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.FunctionScope"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.NullHandling", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.util.DecimalUtility", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MarkerAnnotation", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: outputScalePrec", "DEL SimpleName: Override", "DEL MethodInvocation", "DEL SimpleName: getDecimalDataType", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getScale", "DEL SimpleName: getMajorType", "DEL SimpleName: get", "DEL Modifier: public", "DEL SimpleType: FunctionInitializer", "DEL SimpleType: DecimalScalePrecisionAddFunction", "DEL SimpleName: newBuilder", "DEL Block", "DEL Block", "DEL SimpleName: getOutputPrecision", "DEL VariableDeclarationFragment", "DEL SimpleName: getPrecision", "DEL SimpleName: get", "DEL SimpleName: LogicalExpression", "DEL SimpleType: DrillSimpleFuncHolder", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: args", "DEL NumberLiteral: 2", "DEL SimpleName: args", "DEL Block", "DEL SimpleName: DecimalUtility", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: DrillSimpleFuncHolder", "DEL NumberLiteral: 1", "DEL IfStatement", "DEL InfixExpression: ==", "DEL SimpleName: getMajorType", "DEL Block", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL SimpleName: mode", "DEL SimpleName: args", "DEL SingleVariableDeclaration", "DEL SimpleName: args", "DEL IfStatement", "DEL SimpleName: e", "DEL MethodInvocation", "DEL SimpleName: e", "DEL SimpleName: getReturnType", "DEL MethodDeclaration", "DEL SimpleName: build", "DEL SimpleName: getScale", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: DecimalScalePrecisionAddFunction", "DEL SimpleName: outputScalePrec", "DEL SimpleName: getMode", "DEL SimpleName: DrillDecimalAddFuncHolder", "DEL ClassInstanceCreation", "DEL SimpleName: setPrecision", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: mode", "DEL SimpleName: outputScalePrec", "DEL SimpleName: functionAttributes", "DEL Block", "DEL MethodInvocation", "DEL SimpleType: List", "DEL SimpleName: getMode", "DEL SimpleName: getMajorType", "DEL QualifiedName: TypeProtos.MajorType", "DEL SimpleName: setScale", "DEL QualifiedName: returnValue.type", "DEL SimpleName: get", "DEL SimpleName: FunctionInitializer", "DEL Block", "DEL ParameterizedType: List<LogicalExpression>", "DEL SimpleName: checkPrecisionRange", "DEL SimpleName: initializer", "DEL SimpleName: outputScalePrec", "DEL SimpleName: getOutputScale", "DEL SimpleName: setMode", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleType: LogicalExpression", "DEL SimpleName: args", "DEL QualifiedName: TypeProtos.DataMode.OPTIONAL", "DEL SimpleType: DecimalScalePrecisionAddFunction", "DEL MethodDeclaration", "DEL SimpleType: MajorType", "DEL SimpleName: LogicalExpression", "DEL SimpleType: TypeProtos.DataMode", "DEL SimpleName: getOutputPrecision", "DEL SimpleName: setMinorType", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: FunctionAttributes", "DEL AssertStatement", "DEL SimpleName: functionAttributes", "DEL MethodInvocation", "DEL SimpleName: FunctionAttributes", "DEL SimpleName: Override", "DEL NumberLiteral: 0", "DEL SimpleName: get", "DEL SimpleName: mode", "DEL NumberLiteral: 0", "DEL SimpleName: args", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getPrecision", "DEL SimpleType: LogicalExpression", "DEL InfixExpression: ==", "DEL TypeDeclaration: class", "DEL SimpleName: DecimalScalePrecisionAddFunction", "DEL Assignment: =", "DEL SuperConstructorInvocation", "DEL MethodInvocation", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL SimpleName: List", "DEL Modifier: public", "DEL SimpleName: size", "DEL SimpleName: getMajorType", "DEL SimpleName: getMajorType", "DEL SimpleName: nullHandling", "DEL MethodInvocation", "DEL SimpleName: MajorType", "DEL BreakStatement", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL SimpleName: DrillDecimalAddFuncHolder", "DEL SimpleName: args", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL EnhancedForStatement", "DEL QualifiedName: NullHandling.NULL_IF_NULL", "DEL MethodInvocation", "DEL QualifiedName: TypeProtos.DataMode.OPTIONAL", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL QualifiedName: TypeProtos.DataMode", "DEL SimpleName: initializer", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Modifier: public"]}]}}, {"DrillDecimalAddFuncHolder_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.drill.exec.expr.fn(15)", "Delete PackageDeclaration(16)", "Delete QualifiedName: java.util.List(17)", "Delete ImportDeclaration(18)", "Delete QualifiedName: java.util.Map(19)", "Delete ImportDeclaration(20)", "Delete QualifiedName: org.apache.drill.common.expression.LogicalExpression(21)", "Delete ImportDeclaration(22)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos(23)", "Delete ImportDeclaration(24)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos.MajorType(25)", "Delete ImportDeclaration(26)", "Delete QualifiedName: org.apache.drill.common.util.DecimalScalePrecisionAddFunction(27)", "Delete ImportDeclaration(28)", "Delete QualifiedName: org.apache.drill.exec.expr.DrillSimpleFunc(29)", "Delete ImportDeclaration(30)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate(31)", "Delete ImportDeclaration(32)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.FunctionScope(33)", "Delete ImportDeclaration(34)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.NullHandling(35)", "Delete ImportDeclaration(36)", "Delete QualifiedName: org.apache.drill.exec.util.DecimalUtility(37)", "Delete ImportDeclaration(38)", "Delete Modifier: public(39)", "Delete SimpleName: DrillDecimalAddFuncHolder(40)", "Delete SimpleName: DrillSimpleFuncHolder(41)", "Delete SimpleType: DrillSimpleFuncHolder(42)", "Delete Modifier: public(43)", "Delete SimpleName: DrillDecimalAddFuncHolder(44)", "Delete SimpleName: FunctionAttributes(45)", "Delete SimpleType: FunctionAttributes(46)", "Delete SimpleName: functionAttributes(47)", "Delete SingleVariableDeclaration(48)", "Delete SimpleName: FunctionInitializer(49)", "Delete SimpleType: FunctionInitializer(50)", "Delete SimpleName: initializer(51)", "Delete SingleVariableDeclaration(52)", "Delete SimpleName: functionAttributes(53)", "Delete SimpleName: initializer(54)", "Delete SuperConstructorInvocation(55)", "Delete Block(56)", "Delete MethodDeclaration(57)", "Delete SimpleName: Override(58)", "Delete MarkerAnnotation(59)", "Delete Modifier: public(60)", "Delete SimpleName: MajorType(61)", "Delete SimpleType: MajorType(62)", "Delete SimpleName: getReturnType(63)", "Delete SimpleName: List(64)", "Delete SimpleType: List(65)", "Delete SimpleName: LogicalExpression(66)", "Delete SimpleType: LogicalExpression(67)", "Delete ParameterizedType: List<LogicalExpression>(68)", "Delete SimpleName: args(69)", "Delete SingleVariableDeclaration(70)", "Delete QualifiedName: TypeProtos.DataMode(71)", "Delete SimpleType: TypeProtos.DataMode(72)", "Delete SimpleName: mode(73)", "Delete QualifiedName: returnValue.type(74)", "Delete SimpleName: getMode(75)", "Delete MethodInvocation(76)", "Delete VariableDeclarationFragment(77)", "Delete VariableDeclarationStatement(78)", "Delete SimpleName: nullHandling(79)", "Delete QualifiedName: NullHandling.NULL_IF_NULL(80)", "Delete InfixExpression: ==(81)", "Delete SimpleName: LogicalExpression(82)", "Delete SimpleType: LogicalExpression(83)", "Delete SimpleName: e(84)", "Delete SingleVariableDeclaration(85)", "Delete SimpleName: args(86)", "Delete SimpleName: e(87)", "Delete SimpleName: getMajorType(88)", "Delete MethodInvocation(89)", "Delete SimpleName: getMode(90)", "Delete MethodInvocation(91)", "Delete QualifiedName: TypeProtos.DataMode.OPTIONAL(92)", "Delete InfixExpression: ==(93)", "Delete SimpleName: mode(94)", "Delete QualifiedName: TypeProtos.DataMode.OPTIONAL(95)", "Delete Assignment: =(96)", "Delete ExpressionStatement(97)", "Delete BreakStatement(98)", "Delete Block(99)", "Delete IfStatement(100)", "Delete Block(101)", "Delete EnhancedForStatement(102)", "Delete Block(103)", "Delete IfStatement(104)", "Delete SimpleName: args(105)", "Delete SimpleName: size(106)", "Delete MethodInvocation(107)", "Delete NumberLiteral: 2(108)", "Delete InfixExpression: ==(109)", "Delete AssertStatement(110)", "Delete SimpleName: DecimalScalePrecisionAddFunction(111)", "Delete SimpleType: DecimalScalePrecisionAddFunction(112)", "Delete SimpleName: outputScalePrec(113)", "Delete SimpleName: DecimalScalePrecisionAddFunction(114)", "Delete SimpleType: DecimalScalePrecisionAddFunction(115)", "Delete SimpleName: args(116)", "Delete SimpleName: get(117)", "Delete NumberLiteral: 0(118)", "Delete MethodInvocation(119)", "Delete SimpleName: getMajorType(120)", "Delete MethodInvocation(121)", "Delete SimpleName: getPrecision(122)", "Delete MethodInvocation(123)", "Delete SimpleName: args(124)", "Delete SimpleName: get(125)", "Delete NumberLiteral: 0(126)", "Delete MethodInvocation(127)", "Delete SimpleName: getMajorType(128)", "Delete MethodInvocation(129)", "Delete SimpleName: getScale(130)", "Delete MethodInvocation(131)", "Delete SimpleName: args(132)", "Delete SimpleName: get(133)", "Delete NumberLiteral: 1(134)", "Delete MethodInvocation(135)", "Delete SimpleName: getMajorType(136)", "Delete MethodInvocation(137)", "Delete SimpleName: getPrecision(138)", "Delete MethodInvocation(139)", "Delete SimpleName: args(140)", "Delete SimpleName: get(141)", "Delete NumberLiteral: 1(142)", "Delete MethodInvocation(143)", "Delete SimpleName: getMajorType(144)", "Delete MethodInvocation(145)", "Delete SimpleName: getScale(146)", "Delete MethodInvocation(147)", "Delete ClassInstanceCreation(148)", "Delete VariableDeclarationFragment(149)", "Delete VariableDeclarationStatement(150)", "Delete QualifiedName: TypeProtos.MajorType(151)", "Delete SimpleName: newBuilder(152)", "Delete MethodInvocation(153)", "Delete SimpleName: setMinorType(154)", "Delete SimpleName: DecimalUtility(155)", "Delete SimpleName: getDecimalDataType(156)", "Delete SimpleName: outputScalePrec(157)", "Delete SimpleName: getOutputPrecision(158)", "Delete MethodInvocation(159)", "Delete MethodInvocation(160)", "Delete MethodInvocation(161)", "Delete SimpleName: setScale(162)", "Delete SimpleName: outputScalePrec(163)", "Delete SimpleName: getOutputScale(164)", "Delete MethodInvocation(165)", "Delete MethodInvocation(166)", "Delete SimpleName: setPrecision(167)", "Delete SimpleName: outputScalePrec(168)", "Delete SimpleName: getOutputPrecision(169)", "Delete MethodInvocation(170)", "Delete MethodInvocation(171)", "Delete SimpleName: setMode(172)", "Delete SimpleName: mode(173)", "Delete MethodInvocation(174)", "Delete SimpleName: build(175)", "Delete MethodInvocation(176)", "Delete ParenthesizedExpression(177)", "Delete ReturnStatement(178)", "Delete Block(179)", "Delete MethodDeclaration(180)", "Delete SimpleName: Override(181)", "Delete MarkerAnnotation(182)", "Delete Modifier: public(183)", "Delete PrimitiveType: boolean(184)", "Delete SimpleName: checkPrecisionRange(185)", "Delete BooleanLiteral: true(186)", "Delete ReturnStatement(187)", "Delete Block(188)", "Delete MethodDeclaration(189)", "Delete TypeDeclaration: class(190)"]}}, {"DrillDecimalAggFuncHolder_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL PackageDeclaration", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL Javadoc", "DEL TagElement", "DEL TextElement: limitations under the License.", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL QualifiedName: org.apache.drill.exec.expr.fn"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.expression.LogicalExpression", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.types.TypeProtos"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL NumberLiteral: 0", "DEL SimpleName: precision", "DEL SingleVariableDeclaration", "DEL SimpleName: setMinorType", "DEL SimpleName: getMinorType", "DEL SimpleName: DrillDecimalAggFuncHolder", "DEL SimpleName: List", "DEL MethodInvocation", "DEL SimpleName: getScale", "DEL MethodInvocation", "DEL SimpleName: scale", "DEL SimpleName: scale", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: scale", "DEL ParameterizedType: List<LogicalExpression>", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL SimpleType: TypeProtos.MajorType", "DEL MethodInvocation", "DEL SimpleName: getMajorType", "DEL MethodInvocation", "DEL Modifier: public", "DEL Assignment: =", "DEL SimpleName: max", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: initializer", "DEL SimpleName: DrillAggFuncHolder", "DEL MethodInvocation", "DEL SimpleName: getMajorType", "DEL SimpleName: getReturnType", "DEL SimpleName: attributes", "DEL QualifiedName: TypeProtos.DataMode.REQUIRED", "DEL SimpleName: attributes", "DEL SimpleName: precision", "DEL SimpleName: scale", "DEL SingleVariableDeclaration", "DEL SimpleType: LogicalExpression", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: LogicalExpression", "DEL SimpleName: newBuilder", "DEL SimpleName: e", "DEL SimpleType: FunctionInitializer", "DEL SimpleName: precision", "DEL Modifier: public", "DEL SimpleName: Math", "DEL SimpleName: setPrecision", "DEL SimpleName: LogicalExpression", "DEL SimpleName: getPrecision", "DEL QualifiedName: returnValue.type", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: max", "DEL ParenthesizedExpression", "DEL MarkerAnnotation", "DEL TypeDeclaration: class", "DEL QualifiedName: TypeProtos.MajorType", "DEL Modifier: public", "DEL SimpleName: args", "DEL QualifiedName: TypeProtos.MajorType", "DEL SimpleName: e", "DEL MethodInvocation", "DEL SimpleName: args", "DEL SimpleType: FunctionAttributes", "DEL MethodDeclaration", "DEL SimpleName: FunctionAttributes", "DEL SimpleName: Math", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: Override", "DEL SimpleType: List", "DEL Block", "DEL SimpleName: e", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: build", "DEL SimpleName: setScale", "DEL NumberLiteral: 0", "DEL SimpleName: setMode", "DEL SimpleType: DrillAggFuncHolder", "DEL EnhancedForStatement", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: initializer", "DEL SimpleType: LogicalExpression", "DEL SimpleName: precision", "DEL SimpleName: FunctionInitializer", "DEL MethodDeclaration", "DEL SimpleName: DrillDecimalAggFuncHolder", "DEL SuperConstructorInvocation"]}]}}, {"DrillDecimalAggFuncHolder_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.drill.exec.expr.fn(15)", "Delete PackageDeclaration(16)", "Delete QualifiedName: java.util.List(17)", "Delete ImportDeclaration(18)", "Delete QualifiedName: org.apache.drill.common.expression.LogicalExpression(19)", "Delete ImportDeclaration(20)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos(21)", "Delete ImportDeclaration(22)", "Delete Modifier: public(23)", "Delete SimpleName: DrillDecimalAggFuncHolder(24)", "Delete SimpleName: DrillAggFuncHolder(25)", "Delete SimpleType: DrillAggFuncHolder(26)", "Delete Modifier: public(27)", "Delete SimpleName: DrillDecimalAggFuncHolder(28)", "Delete SimpleName: FunctionAttributes(29)", "Delete SimpleType: FunctionAttributes(30)", "Delete SimpleName: attributes(31)", "Delete SingleVariableDeclaration(32)", "Delete SimpleName: FunctionInitializer(33)", "Delete SimpleType: FunctionInitializer(34)", "Delete SimpleName: initializer(35)", "Delete SingleVariableDeclaration(36)", "Delete SimpleName: attributes(37)", "Delete SimpleName: initializer(38)", "Delete SuperConstructorInvocation(39)", "Delete Block(40)", "Delete MethodDeclaration(41)", "Delete SimpleName: Override(42)", "Delete MarkerAnnotation(43)", "Delete Modifier: public(44)", "Delete QualifiedName: TypeProtos.MajorType(45)", "Delete SimpleType: TypeProtos.MajorType(46)", "Delete SimpleName: getReturnType(47)", "Delete SimpleName: List(48)", "Delete SimpleType: List(49)", "Delete SimpleName: LogicalExpression(50)", "Delete SimpleType: LogicalExpression(51)", "Delete ParameterizedType: List<LogicalExpression>(52)", "Delete SimpleName: args(53)", "Delete SingleVariableDeclaration(54)", "Delete PrimitiveType: int(55)", "Delete SimpleName: scale(56)", "Delete NumberLiteral: 0(57)", "Delete VariableDeclarationFragment(58)", "Delete VariableDeclarationStatement(59)", "Delete PrimitiveType: int(60)", "Delete SimpleName: precision(61)", "Delete NumberLiteral: 0(62)", "Delete VariableDeclarationFragment(63)", "Delete VariableDeclarationStatement(64)", "Delete SimpleName: LogicalExpression(65)", "Delete SimpleType: LogicalExpression(66)", "Delete SimpleName: e(67)", "Delete SingleVariableDeclaration(68)", "Delete SimpleName: args(69)", "Delete SimpleName: scale(70)", "Delete SimpleName: Math(71)", "Delete SimpleName: max(72)", "Delete SimpleName: scale(73)", "Delete SimpleName: e(74)", "Delete SimpleName: getMajorType(75)", "Delete MethodInvocation(76)", "Delete SimpleName: getScale(77)", "Delete MethodInvocation(78)", "Delete MethodInvocation(79)", "Delete Assignment: =(80)", "Delete ExpressionStatement(81)", "Delete SimpleName: precision(82)", "Delete SimpleName: Math(83)", "Delete SimpleName: max(84)", "Delete SimpleName: precision(85)", "Delete SimpleName: e(86)", "Delete SimpleName: getMajorType(87)", "Delete MethodInvocation(88)", "Delete SimpleName: getPrecision(89)", "Delete MethodInvocation(90)", "Delete MethodInvocation(91)", "Delete Assignment: =(92)", "Delete ExpressionStatement(93)", "Delete Block(94)", "Delete EnhancedForStatement(95)", "Delete QualifiedName: TypeProtos.MajorType(96)", "Delete SimpleName: newBuilder(97)", "Delete MethodInvocation(98)", "Delete SimpleName: setMinorType(99)", "Delete QualifiedName: returnValue.type(100)", "Delete SimpleName: getMinorType(101)", "Delete MethodInvocation(102)", "Delete MethodInvocation(103)", "Delete SimpleName: setScale(104)", "Delete SimpleName: scale(105)", "Delete MethodInvocation(106)", "Delete SimpleName: setPrecision(107)", "Delete SimpleName: precision(108)", "Delete MethodInvocation(109)", "Delete SimpleName: setMode(110)", "Delete QualifiedName: TypeProtos.DataMode.REQUIRED(111)", "Delete MethodInvocation(112)", "Delete SimpleName: build(113)", "Delete MethodInvocation(114)", "Delete ParenthesizedExpression(115)", "Delete ReturnStatement(116)", "Delete Block(117)", "Delete MethodDeclaration(118)", "Delete TypeDeclaration: class(119)"]}}, {"DrillDecimalCastFuncHolder_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TextElement: distributed with this work for additional information", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: limitations under the License.", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL PackageDeclaration", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL Javadoc", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL QualifiedName: org.apache.drill.exec.expr.fn", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TagElement"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.exceptions.DrillRuntimeException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.expression.LogicalExpression", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.expression.ValueExpressions"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.types.TypeProtos", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.types.TypeProtos.MajorType", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.NullHandling", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodInvocation", "DEL Modifier: public", "DEL NumberLiteral: 3", "DEL SimpleName: setPrecision", "DEL SimpleName: getMajorType", "DEL SimpleName: size", "DEL SimpleName: DrillDecimalCastFuncHolder", "DEL InfixExpression: ==", "DEL PrimitiveType: int", "DEL SimpleType: LogicalExpression", "DEL MethodInvocation", "DEL SimpleName: e", "DEL SuperConstructorInvocation", "DEL SimpleName: FunctionAttributes", "DEL SimpleName: LogicalExpression", "DEL SimpleName: DrillDecimalCastFuncHolder", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL SimpleName: StringBuilder", "DEL MethodInvocation", "DEL CastExpression", "DEL SimpleName: mode", "DEL SimpleName: setMode", "DEL MethodInvocation", "DEL SimpleType: DrillSimpleFuncHolder", "DEL SimpleName: getReturnType", "DEL VariableDeclarationStatement", "DEL SimpleName: precision", "DEL SimpleType: FunctionAttributes", "DEL SimpleName: precision", "DEL SimpleType: TypeProtos.DataMode", "DEL MethodDeclaration", "DEL SimpleName: i", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL QualifiedName: NullHandling.NULL_IF_NULL", "DEL VariableDeclarationExpression", "DEL QualifiedName: ValueExpressions.LongExpression", "DEL SimpleName: getMode", "DEL SimpleType: MajorType", "DEL MarkerAnnotation", "DEL SimpleName: DrillRuntimeException", "DEL ThrowStatement", "DEL SimpleName: functionAttributes", "DEL SimpleName: get", "DEL Block", "DEL SimpleType: StringBuilder", "DEL SimpleName: getLong", "DEL SingleVariableDeclaration", "DEL SimpleName: i", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL StringLiteral: \": \"", "DEL SimpleName: i", "DEL SimpleType: StringBuilder", "DEL IfStatement", "DEL CastExpression", "DEL PrimitiveType: int", "DEL QualifiedName: TypeProtos.DataMode", "DEL SimpleName: i", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleName: args", "DEL SimpleName: append", "DEL SimpleName: err", "DEL VariableDeclarationFragment", "DEL SimpleName: err", "DEL InfixExpression: ==", "DEL SimpleName: args", "DEL SimpleName: mode", "DEL QualifiedName: TypeProtos.DataMode.OPTIONAL", "DEL MethodInvocation", "DEL InfixExpression: <", "DEL SimpleName: initializer", "DEL MethodInvocation", "DEL SimpleName: args", "DEL BreakStatement", "DEL SimpleName: LogicalExpression", "DEL MethodInvocation", "DEL SimpleName: size", "DEL IfStatement", "DEL QualifiedName: ValueExpressions.LongExpression", "DEL ParenthesizedExpression", "DEL SimpleName: getMinorType", "DEL MethodInvocation", "DEL SimpleName: e", "DEL SimpleType: FunctionInitializer", "DEL SimpleType: ValueExpressions.LongExpression", "DEL MethodInvocation", "DEL NumberLiteral: 2", "DEL VariableDeclarationStatement", "DEL SimpleType: DrillRuntimeException", "DEL SimpleName: args", "DEL CastExpression", "DEL SimpleName: args", "DEL SimpleName: getLong", "DEL SimpleName: mode", "DEL InfixExpression: +", "DEL SimpleName: StringBuilder", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: FunctionInitializer", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: args", "DEL MethodInvocation", "DEL SimpleName: setScale", "DEL SimpleType: LogicalExpression", "DEL PrimitiveType: int", "DEL SimpleName: nullHandling", "DEL SimpleName: args", "DEL SimpleName: setMinorType", "DEL NumberLiteral: 1", "DEL StringLiteral: \"Decimal cast function invoked with incorect arguments\"", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: size", "DEL Block", "DEL Modifier: public", "DEL SimpleName: Override", "DEL SimpleName: get", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: initializer", "DEL SimpleType: List", "DEL MethodInvocation", "DEL StringLiteral: \"arg\"", "DEL MethodInvocation", "DEL SimpleName: getMinorType", "DEL SimpleName: err", "DEL SimpleName: getMode", "DEL Block", "DEL SimpleName: functionAttributes", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodInvocation", "DEL Block", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL CastExpression", "DEL Block", "DEL SimpleName: getMajorType", "DEL QualifiedName: returnValue.type", "DEL MethodInvocation", "DEL SimpleName: MajorType", "DEL SimpleName: args", "DEL NumberLiteral: 0", "DEL SimpleName: get", "DEL IfStatement", "DEL SimpleName: List", "DEL SimpleName: scale", "DEL ParameterizedType: List<LogicalExpression>", "DEL InfixExpression: !=", "DEL SimpleName: DrillSimpleFuncHolder", "DEL SimpleName: args", "DEL QualifiedName: TypeProtos.MajorType", "DEL QualifiedName: returnValue.type", "DEL SimpleName: build", "DEL TypeDeclaration: class", "DEL SingleVariableDeclaration", "DEL PostfixExpression: ++", "DEL SimpleName: scale", "DEL ParenthesizedExpression", "DEL VariableDeclarationStatement", "DEL ForStatement", "DEL ClassInstanceCreation", "DEL SimpleType: ValueExpressions.LongExpression", "DEL EnhancedForStatement", "DEL SimpleName: size", "DEL QualifiedName: TypeProtos.DataMode.OPTIONAL", "DEL InfixExpression: -", "DEL SimpleName: newBuilder", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Block", "DEL ParenthesizedExpression", "DEL InfixExpression: -"]}]}}, {"DrillDecimalCastFuncHolder_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.drill.exec.expr.fn(15)", "Delete PackageDeclaration(16)", "Delete QualifiedName: java.util.List(17)", "Delete ImportDeclaration(18)", "Delete QualifiedName: org.apache.drill.common.exceptions.DrillRuntimeException(19)", "Delete ImportDeclaration(20)", "Delete QualifiedName: org.apache.drill.common.expression.LogicalExpression(21)", "Delete ImportDeclaration(22)", "Delete QualifiedName: org.apache.drill.common.expression.ValueExpressions(23)", "Delete ImportDeclaration(24)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos(25)", "Delete ImportDeclaration(26)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos.MajorType(27)", "Delete ImportDeclaration(28)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.NullHandling(29)", "Delete ImportDeclaration(30)", "Delete Modifier: public(31)", "Delete SimpleName: DrillDecimalCastFuncHolder(32)", "Delete SimpleName: DrillSimpleFuncHolder(33)", "Delete SimpleType: DrillSimpleFuncHolder(34)", "Delete Modifier: public(35)", "Delete SimpleName: DrillDecimalCastFuncHolder(36)", "Delete SimpleName: FunctionAttributes(37)", "Delete SimpleType: FunctionAttributes(38)", "Delete SimpleName: functionAttributes(39)", "Delete SingleVariableDeclaration(40)", "Delete SimpleName: FunctionInitializer(41)", "Delete SimpleType: FunctionInitializer(42)", "Delete SimpleName: initializer(43)", "Delete SingleVariableDeclaration(44)", "Delete SimpleName: functionAttributes(45)", "Delete SimpleName: initializer(46)", "Delete SuperConstructorInvocation(47)", "Delete Block(48)", "Delete MethodDeclaration(49)", "Delete SimpleName: Override(50)", "Delete MarkerAnnotation(51)", "Delete Modifier: public(52)", "Delete SimpleName: MajorType(53)", "Delete SimpleType: MajorType(54)", "Delete SimpleName: getReturnType(55)", "Delete SimpleName: List(56)", "Delete SimpleType: List(57)", "Delete SimpleName: LogicalExpression(58)", "Delete SimpleType: LogicalExpression(59)", "Delete ParameterizedType: List<LogicalExpression>(60)", "Delete SimpleName: args(61)", "Delete SingleVariableDeclaration(62)", "Delete QualifiedName: TypeProtos.DataMode(63)", "Delete SimpleType: TypeProtos.DataMode(64)", "Delete SimpleName: mode(65)", "Delete QualifiedName: returnValue.type(66)", "Delete SimpleName: getMode(67)", "Delete MethodInvocation(68)", "Delete VariableDeclarationFragment(69)", "Delete VariableDeclarationStatement(70)", "Delete SimpleName: nullHandling(71)", "Delete QualifiedName: NullHandling.NULL_IF_NULL(72)", "Delete InfixExpression: ==(73)", "Delete SimpleName: LogicalExpression(74)", "Delete SimpleType: LogicalExpression(75)", "Delete SimpleName: e(76)", "Delete SingleVariableDeclaration(77)", "Delete SimpleName: args(78)", "Delete SimpleName: e(79)", "Delete SimpleName: getMajorType(80)", "Delete MethodInvocation(81)", "Delete SimpleName: getMode(82)", "Delete MethodInvocation(83)", "Delete QualifiedName: TypeProtos.DataMode.OPTIONAL(84)", "Delete InfixExpression: ==(85)", "Delete SimpleName: mode(86)", "Delete QualifiedName: TypeProtos.DataMode.OPTIONAL(87)", "Delete Assignment: =(88)", "Delete ExpressionStatement(89)", "Delete BreakStatement(90)", "Delete Block(91)", "Delete IfStatement(92)", "Delete Block(93)", "Delete EnhancedForStatement(94)", "Delete Block(95)", "Delete IfStatement(96)", "Delete SimpleName: args(97)", "Delete SimpleName: size(98)", "Delete MethodInvocation(99)", "Delete NumberLiteral: 3(100)", "Delete InfixExpression: !=(101)", "Delete SimpleName: StringBuilder(102)", "Delete SimpleType: StringBuilder(103)", "Delete SimpleName: err(104)", "Delete SimpleName: StringBuilder(105)", "Delete SimpleType: StringBuilder(106)", "Delete ClassInstanceCreation(107)", "Delete VariableDeclarationFragment(108)", "Delete VariableDeclarationStatement(109)", "Delete PrimitiveType: int(110)", "Delete SimpleName: i(111)", "Delete NumberLiteral: 0(112)", "Delete VariableDeclarationFragment(113)", "Delete VariableDeclarationExpression(114)", "Delete SimpleName: i(115)", "Delete SimpleName: args(116)", "Delete SimpleName: size(117)", "Delete MethodInvocation(118)", "Delete InfixExpression: <(119)", "Delete SimpleName: i(120)", "Delete PostfixExpression: ++(121)", "Delete SimpleName: err(122)", "Delete SimpleName: append(123)", "Delete StringLiteral: \"arg\"(124)", "Delete SimpleName: i(125)", "Delete StringLiteral: \": \"(126)", "Delete SimpleName: args(127)", "Delete SimpleName: get(128)", "Delete SimpleName: i(129)", "Delete MethodInvocation(130)", "Delete SimpleName: getMajorType(131)", "Delete MethodInvocation(132)", "Delete SimpleName: getMinorType(133)", "Delete MethodInvocation(134)", "Delete InfixExpression: +(135)", "Delete MethodInvocation(136)", "Delete ExpressionStatement(137)", "Delete Block(138)", "Delete ForStatement(139)", "Delete SimpleName: DrillRuntimeException(140)", "Delete SimpleType: DrillRuntimeException(141)", "Delete StringLiteral: \"Decimal cast function invoked with incorect arguments\"(142)", "Delete SimpleName: err(143)", "Delete InfixExpression: +(144)", "Delete ClassInstanceCreation(145)", "Delete ThrowStatement(146)", "Delete Block(147)", "Delete IfStatement(148)", "Delete PrimitiveType: int(149)", "Delete SimpleName: scale(150)", "Delete PrimitiveType: int(151)", "Delete QualifiedName: ValueExpressions.LongExpression(152)", "Delete SimpleType: ValueExpressions.LongExpression(153)", "Delete SimpleName: args(154)", "Delete SimpleName: get(155)", "Delete SimpleName: args(156)", "Delete SimpleName: size(157)", "Delete MethodInvocation(158)", "Delete NumberLiteral: 1(159)", "Delete InfixExpression: -(160)", "Delete MethodInvocation(161)", "Delete ParenthesizedExpression(162)", "Delete CastExpression(163)", "Delete ParenthesizedExpression(164)", "Delete SimpleName: getLong(165)", "Delete MethodInvocation(166)", "Delete CastExpression(167)", "Delete VariableDeclarationFragment(168)", "Delete VariableDeclarationStatement(169)", "Delete PrimitiveType: int(170)", "Delete SimpleName: precision(171)", "Delete PrimitiveType: int(172)", "Delete QualifiedName: ValueExpressions.LongExpression(173)", "Delete SimpleType: ValueExpressions.LongExpression(174)", "Delete SimpleName: args(175)", "Delete SimpleName: get(176)", "Delete SimpleName: args(177)", "Delete SimpleName: size(178)", "Delete MethodInvocation(179)", "Delete NumberLiteral: 2(180)", "Delete InfixExpression: -(181)", "Delete MethodInvocation(182)", "Delete ParenthesizedExpression(183)", "Delete CastExpression(184)", "Delete ParenthesizedExpression(185)", "Delete SimpleName: getLong(186)", "Delete MethodInvocation(187)", "Delete CastExpression(188)", "Delete VariableDeclarationFragment(189)", "Delete VariableDeclarationStatement(190)", "Delete QualifiedName: TypeProtos.MajorType(191)", "Delete SimpleName: newBuilder(192)", "Delete MethodInvocation(193)", "Delete SimpleName: setMinorType(194)", "Delete QualifiedName: returnValue.type(195)", "Delete SimpleName: getMinorType(196)", "Delete MethodInvocation(197)", "Delete MethodInvocation(198)", "Delete SimpleName: setScale(199)", "Delete SimpleName: scale(200)", "Delete MethodInvocation(201)", "Delete SimpleName: setPrecision(202)", "Delete SimpleName: precision(203)", "Delete MethodInvocation(204)", "Delete SimpleName: setMode(205)", "Delete SimpleName: mode(206)", "Delete MethodInvocation(207)", "Delete SimpleName: build(208)", "Delete MethodInvocation(209)", "Delete ParenthesizedExpression(210)", "Delete ReturnStatement(211)", "Delete Block(212)", "Delete MethodDeclaration(213)", "Delete TypeDeclaration: class(214)"]}}, {"DrillDecimalDivScaleFuncHolder_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL Javadoc", "DEL TextElement: limitations under the License.", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL PackageDeclaration", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL QualifiedName: org.apache.drill.exec.expr.fn", "DEL TagElement"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.expression.LogicalExpression", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.types.TypeProtos", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.types.TypeProtos.MajorType"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.util.DecimalScalePrecisionDivideFunction", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.NullHandling", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.exec.util.DecimalUtility"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: outputScalePrec", "DEL PrimitiveType: boolean", "DEL SimpleType: FunctionAttributes", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: getOutputPrecision", "DEL SimpleName: getOutputPrecision", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL QualifiedName: TypeProtos.DataMode", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: args", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: mode", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: build", "DEL MethodInvocation", "DEL SimpleName: getMajorType", "DEL ExpressionStatement", "DEL SimpleName: MajorType", "DEL Modifier: public", "DEL MethodInvocation", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: args", "DEL SimpleName: setScale", "DEL InfixExpression: ==", "DEL SimpleName: args", "DEL SimpleName: getDecimalDataType", "DEL SimpleName: e", "DEL SimpleName: e", "DEL SimpleName: FunctionAttributes", "DEL SimpleName: getPrecision", "DEL SimpleName: get", "DEL QualifiedName: NullHandling.NULL_IF_NULL", "DEL SimpleName: DecimalScalePrecisionDivideFunction", "DEL SimpleName: getMajorType", "DEL Block", "DEL SimpleType: DecimalScalePrecisionDivideFunction", "DEL SimpleType: DecimalScalePrecisionDivideFunction", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: initializer", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: TypeProtos.DataMode", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleType: FunctionInitializer", "DEL SimpleName: outputScalePrec", "DEL SimpleName: checkPrecisionRange", "DEL SimpleName: getMode", "DEL SimpleName: DrillSimpleFuncHolder", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: args", "DEL NumberLiteral: 0", "DEL Block", "DEL TypeDeclaration: class", "DEL SimpleType: DrillSimpleFuncHolder", "DEL EnhancedForStatement", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL SimpleName: functionAttributes", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Assignment: =", "DEL SimpleName: nullHandling", "DEL SimpleName: get", "DEL SuperConstructorInvocation", "DEL SimpleName: size", "DEL MethodInvocation", "DEL BreakStatement", "DEL QualifiedName: TypeProtos.DataMode.OPTIONAL", "DEL SimpleName: newBuilder", "DEL Block", "DEL SimpleName: args", "DEL Modifier: public", "DEL SimpleName: DrillDecimalDivScaleFuncHolder", "DEL SingleVariableDeclaration", "DEL SimpleType: List", "DEL SimpleName: getMode", "DEL AssertStatement", "DEL IfStatement", "DEL BooleanLiteral: true", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL QualifiedName: returnValue.type", "DEL SimpleName: getPrecision", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: mode", "DEL SimpleName: args", "DEL SimpleName: getScale", "DEL MethodInvocation", "DEL SimpleName: LogicalExpression", "DEL MarkerAnnotation", "DEL Block", "DEL SimpleName: outputScalePrec", "DEL SimpleName: setMinorType", "DEL SingleVariableDeclaration", "DEL SimpleName: DrillDecimalDivScaleFuncHolder", "DEL SimpleName: getReturnType", "DEL VariableDeclarationStatement", "DEL SimpleName: functionAttributes", "DEL SimpleName: DecimalScalePrecisionDivideFunction", "DEL MethodInvocation", "DEL SimpleName: args", "DEL NumberLiteral: 1", "DEL SimpleType: LogicalExpression", "DEL SimpleName: DecimalUtility", "DEL MethodInvocation", "DEL SimpleType: MajorType", "DEL QualifiedName: TypeProtos.DataMode.OPTIONAL", "DEL SimpleName: getMajorType", "DEL NumberLiteral: 1", "DEL SimpleName: setMode", "DEL SimpleName: getOutputScale", "DEL MethodInvocation", "DEL SimpleName: setPrecision", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: initializer", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL SimpleName: outputScalePrec", "DEL ParameterizedType: List<LogicalExpression>", "DEL SimpleName: getMajorType", "DEL SimpleName: get", "DEL ParenthesizedExpression", "DEL SimpleName: FunctionInitializer", "DEL QualifiedName: TypeProtos.MajorType", "DEL SimpleName: getScale", "DEL NumberLiteral: 2", "DEL SimpleName: Override", "DEL SimpleName: getMajorType", "DEL Block", "DEL SimpleName: LogicalExpression", "DEL SimpleName: get", "DEL SimpleName: mode", "DEL SimpleType: LogicalExpression", "DEL SimpleName: List"]}]}}, {"DrillDecimalDivScaleFuncHolder_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.drill.exec.expr.fn(15)", "Delete PackageDeclaration(16)", "Delete QualifiedName: java.util.List(17)", "Delete ImportDeclaration(18)", "Delete QualifiedName: org.apache.drill.common.expression.LogicalExpression(19)", "Delete ImportDeclaration(20)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos(21)", "Delete ImportDeclaration(22)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos.MajorType(23)", "Delete ImportDeclaration(24)", "Delete QualifiedName: org.apache.drill.common.util.DecimalScalePrecisionDivideFunction(25)", "Delete ImportDeclaration(26)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.NullHandling(27)", "Delete ImportDeclaration(28)", "Delete QualifiedName: org.apache.drill.exec.util.DecimalUtility(29)", "Delete ImportDeclaration(30)", "Delete Modifier: public(31)", "Delete SimpleName: DrillDecimalDivScaleFuncHolder(32)", "Delete SimpleName: DrillSimpleFuncHolder(33)", "Delete SimpleType: DrillSimpleFuncHolder(34)", "Delete Modifier: public(35)", "Delete SimpleName: DrillDecimalDivScaleFuncHolder(36)", "Delete SimpleName: FunctionAttributes(37)", "Delete SimpleType: FunctionAttributes(38)", "Delete SimpleName: functionAttributes(39)", "Delete SingleVariableDeclaration(40)", "Delete SimpleName: FunctionInitializer(41)", "Delete SimpleType: FunctionInitializer(42)", "Delete SimpleName: initializer(43)", "Delete SingleVariableDeclaration(44)", "Delete SimpleName: functionAttributes(45)", "Delete SimpleName: initializer(46)", "Delete SuperConstructorInvocation(47)", "Delete Block(48)", "Delete MethodDeclaration(49)", "Delete SimpleName: Override(50)", "Delete MarkerAnnotation(51)", "Delete Modifier: public(52)", "Delete SimpleName: MajorType(53)", "Delete SimpleType: MajorType(54)", "Delete SimpleName: getReturnType(55)", "Delete SimpleName: List(56)", "Delete SimpleType: List(57)", "Delete SimpleName: LogicalExpression(58)", "Delete SimpleType: LogicalExpression(59)", "Delete ParameterizedType: List<LogicalExpression>(60)", "Delete SimpleName: args(61)", "Delete SingleVariableDeclaration(62)", "Delete QualifiedName: TypeProtos.DataMode(63)", "Delete SimpleType: TypeProtos.DataMode(64)", "Delete SimpleName: mode(65)", "Delete QualifiedName: returnValue.type(66)", "Delete SimpleName: getMode(67)", "Delete MethodInvocation(68)", "Delete VariableDeclarationFragment(69)", "Delete VariableDeclarationStatement(70)", "Delete SimpleName: nullHandling(71)", "Delete QualifiedName: NullHandling.NULL_IF_NULL(72)", "Delete InfixExpression: ==(73)", "Delete SimpleName: LogicalExpression(74)", "Delete SimpleType: LogicalExpression(75)", "Delete SimpleName: e(76)", "Delete SingleVariableDeclaration(77)", "Delete SimpleName: args(78)", "Delete SimpleName: e(79)", "Delete SimpleName: getMajorType(80)", "Delete MethodInvocation(81)", "Delete SimpleName: getMode(82)", "Delete MethodInvocation(83)", "Delete QualifiedName: TypeProtos.DataMode.OPTIONAL(84)", "Delete InfixExpression: ==(85)", "Delete SimpleName: mode(86)", "Delete QualifiedName: TypeProtos.DataMode.OPTIONAL(87)", "Delete Assignment: =(88)", "Delete ExpressionStatement(89)", "Delete BreakStatement(90)", "Delete Block(91)", "Delete IfStatement(92)", "Delete Block(93)", "Delete EnhancedForStatement(94)", "Delete Block(95)", "Delete IfStatement(96)", "Delete SimpleName: args(97)", "Delete SimpleName: size(98)", "Delete MethodInvocation(99)", "Delete NumberLiteral: 2(100)", "Delete InfixExpression: ==(101)", "Delete AssertStatement(102)", "Delete SimpleName: DecimalScalePrecisionDivideFunction(103)", "Delete SimpleType: DecimalScalePrecisionDivideFunction(104)", "Delete SimpleName: outputScalePrec(105)", "Delete SimpleName: DecimalScalePrecisionDivideFunction(106)", "Delete SimpleType: DecimalScalePrecisionDivideFunction(107)", "Delete SimpleName: args(108)", "Delete SimpleName: get(109)", "Delete NumberLiteral: 0(110)", "Delete MethodInvocation(111)", "Delete SimpleName: getMajorType(112)", "Delete MethodInvocation(113)", "Delete SimpleName: getPrecision(114)", "Delete MethodInvocation(115)", "Delete SimpleName: args(116)", "Delete SimpleName: get(117)", "Delete NumberLiteral: 0(118)", "Delete MethodInvocation(119)", "Delete SimpleName: getMajorType(120)", "Delete MethodInvocation(121)", "Delete SimpleName: getScale(122)", "Delete MethodInvocation(123)", "Delete SimpleName: args(124)", "Delete SimpleName: get(125)", "Delete NumberLiteral: 1(126)", "Delete MethodInvocation(127)", "Delete SimpleName: getMajorType(128)", "Delete MethodInvocation(129)", "Delete SimpleName: getPrecision(130)", "Delete MethodInvocation(131)", "Delete SimpleName: args(132)", "Delete SimpleName: get(133)", "Delete NumberLiteral: 1(134)", "Delete MethodInvocation(135)", "Delete SimpleName: getMajorType(136)", "Delete MethodInvocation(137)", "Delete SimpleName: getScale(138)", "Delete MethodInvocation(139)", "Delete ClassInstanceCreation(140)", "Delete VariableDeclarationFragment(141)", "Delete VariableDeclarationStatement(142)", "Delete QualifiedName: TypeProtos.MajorType(143)", "Delete SimpleName: newBuilder(144)", "Delete MethodInvocation(145)", "Delete SimpleName: setMinorType(146)", "Delete SimpleName: DecimalUtility(147)", "Delete SimpleName: getDecimalDataType(148)", "Delete SimpleName: outputScalePrec(149)", "Delete SimpleName: getOutputPrecision(150)", "Delete MethodInvocation(151)", "Delete MethodInvocation(152)", "Delete MethodInvocation(153)", "Delete SimpleName: setScale(154)", "Delete SimpleName: outputScalePrec(155)", "Delete SimpleName: getOutputScale(156)", "Delete MethodInvocation(157)", "Delete MethodInvocation(158)", "Delete SimpleName: setPrecision(159)", "Delete SimpleName: outputScalePrec(160)", "Delete SimpleName: getOutputPrecision(161)", "Delete MethodInvocation(162)", "Delete MethodInvocation(163)", "Delete SimpleName: setMode(164)", "Delete SimpleName: mode(165)", "Delete MethodInvocation(166)", "Delete SimpleName: build(167)", "Delete MethodInvocation(168)", "Delete ParenthesizedExpression(169)", "Delete ReturnStatement(170)", "Delete Block(171)", "Delete MethodDeclaration(172)", "Delete SimpleName: Override(173)", "Delete MarkerAnnotation(174)", "Delete Modifier: public(175)", "Delete PrimitiveType: boolean(176)", "Delete SimpleName: checkPrecisionRange(177)", "Delete BooleanLiteral: true(178)", "Delete ReturnStatement(179)", "Delete Block(180)", "Delete MethodDeclaration(181)", "Delete TypeDeclaration: class(182)"]}}, {"DrillDecimalMaxScaleFuncHolder_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL QualifiedName: org.apache.drill.exec.expr.fn", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TagElement", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL Javadoc", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: limitations under the License."]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.expression.LogicalExpression"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.types.TypeProtos", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.types.TypeProtos.MajorType", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.exec.expr.DrillSimpleFunc"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.FunctionScope"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.NullHandling", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: FunctionAttributes", "DEL SimpleName: e", "DEL SimpleName: functionAttributes", "DEL SimpleName: List", "DEL BooleanLiteral: false", "DEL SimpleName: MajorType", "DEL SimpleName: max", "DEL SimpleName: DrillDecimalMaxScaleFuncHolder", "DEL MethodInvocation", "DEL SimpleName: e", "DEL SimpleType: LogicalExpression", "DEL SimpleName: getMode", "DEL VariableDeclarationStatement", "DEL SimpleName: DrillDecimalMaxScaleFuncHolder", "DEL SimpleName: functionAttributes", "DEL MethodInvocation", "DEL QualifiedName: TypeProtos.DataMode.OPTIONAL", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: DrillSimpleFuncHolder", "DEL MarkerAnnotation", "DEL Modifier: public", "DEL Block", "DEL IfStatement", "DEL SimpleName: getScale", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL Assignment: =", "DEL EnhancedForStatement", "DEL SimpleName: initializer", "DEL SimpleType: LogicalExpression", "DEL TypeDeclaration: class", "DEL SimpleName: Override", "DEL MethodInvocation", "DEL SimpleName: mode", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: nullInput", "DEL SimpleType: FunctionInitializer", "DEL SimpleName: args", "DEL QualifiedName: TypeProtos.DataMode.OPTIONAL", "DEL SimpleName: FunctionInitializer", "DEL Modifier: public", "DEL SimpleType: List", "DEL SimpleName: mode", "DEL QualifiedName: returnValue.type", "DEL Assignment: =", "DEL SimpleName: getMinorType", "DEL SimpleName: getMajorType", "DEL SimpleName: Math", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL ParenthesizedExpression", "DEL SimpleName: build", "DEL SimpleName: mode", "DEL VariableDeclarationFragment", "DEL SimpleName: setMinorType", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL SimpleName: precision", "DEL VariableDeclarationFragment", "DEL BooleanLiteral: true", "DEL ExpressionStatement", "DEL SimpleName: getMajorType", "DEL SimpleType: TypeProtos.DataMode", "DEL InfixExpression: ==", "DEL IfStatement", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: nullInput", "DEL Block", "DEL SimpleName: precision", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL ParameterizedType: List<LogicalExpression>", "DEL InfixExpression: ==", "DEL SimpleName: scale", "DEL SimpleName: setPrecision", "DEL SimpleName: newBuilder", "DEL SimpleName: precision", "DEL SimpleName: getPrecision", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: e", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getMode", "DEL SimpleName: scale", "DEL QualifiedName: returnValue.type", "DEL SimpleName: LogicalExpression", "DEL SimpleName: Math", "DEL SimpleType: FunctionAttributes", "DEL MethodInvocation", "DEL SimpleName: nullInput", "DEL SimpleName: precision", "DEL SimpleName: args", "DEL SimpleName: initializer", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL Block", "DEL SimpleName: getReturnType", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleName: scale", "DEL InfixExpression: &&", "DEL SimpleName: nullHandling", "DEL SimpleName: setScale", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL QualifiedName: NullHandling.NULL_IF_NULL", "DEL MethodInvocation", "DEL SimpleName: setMode", "DEL SimpleName: LogicalExpression", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SuperConstructorInvocation", "DEL SimpleName: e", "DEL SimpleName: scale", "DEL SimpleType: DrillSimpleFuncHolder", "DEL Block", "DEL QualifiedName: TypeProtos.MajorType", "DEL MethodInvocation", "DEL SimpleType: MajorType", "DEL SimpleName: getMajorType", "DEL QualifiedName: TypeProtos.DataMode", "DEL SimpleName: max"]}]}}, {"DrillDecimalMaxScaleFuncHolder_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.drill.exec.expr.fn(15)", "Delete PackageDeclaration(16)", "Delete QualifiedName: java.util.List(17)", "Delete ImportDeclaration(18)", "Delete QualifiedName: java.util.Map(19)", "Delete ImportDeclaration(20)", "Delete QualifiedName: org.apache.drill.common.expression.LogicalExpression(21)", "Delete ImportDeclaration(22)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos(23)", "Delete ImportDeclaration(24)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos.MajorType(25)", "Delete ImportDeclaration(26)", "Delete QualifiedName: org.apache.drill.exec.expr.DrillSimpleFunc(27)", "Delete ImportDeclaration(28)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate(29)", "Delete ImportDeclaration(30)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.FunctionScope(31)", "Delete ImportDeclaration(32)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.NullHandling(33)", "Delete ImportDeclaration(34)", "Delete Modifier: public(35)", "Delete SimpleName: DrillDecimalMaxScaleFuncHolder(36)", "Delete SimpleName: DrillSimpleFuncHolder(37)", "Delete SimpleType: DrillSimpleFuncHolder(38)", "Delete Modifier: public(39)", "Delete SimpleName: DrillDecimalMaxScaleFuncHolder(40)", "Delete SimpleName: FunctionAttributes(41)", "Delete SimpleType: FunctionAttributes(42)", "Delete SimpleName: functionAttributes(43)", "Delete SingleVariableDeclaration(44)", "Delete SimpleName: FunctionInitializer(45)", "Delete SimpleType: FunctionInitializer(46)", "Delete SimpleName: initializer(47)", "Delete SingleVariableDeclaration(48)", "Delete SimpleName: functionAttributes(49)", "Delete SimpleName: initializer(50)", "Delete SuperConstructorInvocation(51)", "Delete Block(52)", "Delete MethodDeclaration(53)", "Delete SimpleName: Override(54)", "Delete MarkerAnnotation(55)", "Delete Modifier: public(56)", "Delete SimpleName: MajorType(57)", "Delete SimpleType: MajorType(58)", "Delete SimpleName: getReturnType(59)", "Delete SimpleName: List(60)", "Delete SimpleType: List(61)", "Delete SimpleName: LogicalExpression(62)", "Delete SimpleType: LogicalExpression(63)", "Delete ParameterizedType: List<LogicalExpression>(64)", "Delete SimpleName: args(65)", "Delete SingleVariableDeclaration(66)", "Delete QualifiedName: TypeProtos.DataMode(67)", "Delete SimpleType: TypeProtos.DataMode(68)", "Delete SimpleName: mode(69)", "Delete QualifiedName: returnValue.type(70)", "Delete SimpleName: getMode(71)", "Delete MethodInvocation(72)", "Delete VariableDeclarationFragment(73)", "Delete VariableDeclarationStatement(74)", "Delete PrimitiveType: boolean(75)", "Delete SimpleName: nullInput(76)", "Delete BooleanLiteral: false(77)", "Delete VariableDeclarationFragment(78)", "Delete VariableDeclarationStatement(79)", "Delete PrimitiveType: int(80)", "Delete SimpleName: scale(81)", "Delete NumberLiteral: 0(82)", "Delete VariableDeclarationFragment(83)", "Delete VariableDeclarationStatement(84)", "Delete PrimitiveType: int(85)", "Delete SimpleName: precision(86)", "Delete NumberLiteral: 0(87)", "Delete VariableDeclarationFragment(88)", "Delete VariableDeclarationStatement(89)", "Delete SimpleName: LogicalExpression(90)", "Delete SimpleType: LogicalExpression(91)", "Delete SimpleName: e(92)", "Delete SingleVariableDeclaration(93)", "Delete SimpleName: args(94)", "Delete SimpleName: e(95)", "Delete SimpleName: getMajorType(96)", "Delete MethodInvocation(97)", "Delete SimpleName: getMode(98)", "Delete MethodInvocation(99)", "Delete QualifiedName: TypeProtos.DataMode.OPTIONAL(100)", "Delete InfixExpression: ==(101)", "Delete SimpleName: nullInput(102)", "Delete BooleanLiteral: true(103)", "Delete Assignment: =(104)", "Delete ExpressionStatement(105)", "Delete Block(106)", "Delete IfStatement(107)", "Delete SimpleName: scale(108)", "Delete SimpleName: Math(109)", "Delete SimpleName: max(110)", "Delete SimpleName: scale(111)", "Delete SimpleName: e(112)", "Delete SimpleName: getMajorType(113)", "Delete MethodInvocation(114)", "Delete SimpleName: getScale(115)", "Delete MethodInvocation(116)", "Delete MethodInvocation(117)", "Delete Assignment: =(118)", "Delete ExpressionStatement(119)", "Delete SimpleName: precision(120)", "Delete SimpleName: Math(121)", "Delete SimpleName: max(122)", "Delete SimpleName: precision(123)", "Delete SimpleName: e(124)", "Delete SimpleName: getMajorType(125)", "Delete MethodInvocation(126)", "Delete SimpleName: getPrecision(127)", "Delete MethodInvocation(128)", "Delete MethodInvocation(129)", "Delete Assignment: =(130)", "Delete ExpressionStatement(131)", "Delete Block(132)", "Delete EnhancedForStatement(133)", "Delete SimpleName: nullHandling(134)", "Delete QualifiedName: NullHandling.NULL_IF_NULL(135)", "Delete InfixExpression: ==(136)", "Delete SimpleName: nullInput(137)", "Delete InfixExpression: &&(138)", "Delete SimpleName: mode(139)", "Delete QualifiedName: TypeProtos.DataMode.OPTIONAL(140)", "Delete Assignment: =(141)", "Delete ExpressionStatement(142)", "Delete Block(143)", "Delete IfStatement(144)", "Delete QualifiedName: TypeProtos.MajorType(145)", "Delete SimpleName: newBuilder(146)", "Delete MethodInvocation(147)", "Delete SimpleName: setMinorType(148)", "Delete QualifiedName: returnValue.type(149)", "Delete SimpleName: getMinorType(150)", "Delete MethodInvocation(151)", "Delete MethodInvocation(152)", "Delete SimpleName: setScale(153)", "Delete SimpleName: scale(154)", "Delete MethodInvocation(155)", "Delete SimpleName: setPrecision(156)", "Delete SimpleName: precision(157)", "Delete MethodInvocation(158)", "Delete SimpleName: setMode(159)", "Delete SimpleName: mode(160)", "Delete MethodInvocation(161)", "Delete SimpleName: build(162)", "Delete MethodInvocation(163)", "Delete ParenthesizedExpression(164)", "Delete ReturnStatement(165)", "Delete Block(166)", "Delete MethodDeclaration(167)", "Delete TypeDeclaration: class(168)"]}}, {"DrillDecimalModScaleFuncHolder_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TagElement", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: limitations under the License.", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL Javadoc", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL PackageDeclaration", "DEL QualifiedName: org.apache.drill.exec.expr.fn", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: distributed with this work for additional information"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.expression.LogicalExpression"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.types.TypeProtos", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.types.TypeProtos.MajorType"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.util.DecimalScalePrecisionModFunction", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.exec.expr.DrillSimpleFunc"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.FunctionScope"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.NullHandling", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.util.DecimalUtility", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MarkerAnnotation", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: outputScalePrec", "DEL SimpleName: Override", "DEL MethodInvocation", "DEL SimpleName: getDecimalDataType", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getScale", "DEL SimpleName: getMajorType", "DEL SimpleName: get", "DEL Modifier: public", "DEL SimpleType: FunctionInitializer", "DEL SimpleType: DecimalScalePrecisionModFunction", "DEL SimpleName: newBuilder", "DEL Block", "DEL Block", "DEL SimpleName: getOutputPrecision", "DEL VariableDeclarationFragment", "DEL SimpleName: getPrecision", "DEL SimpleName: get", "DEL SimpleName: LogicalExpression", "DEL SimpleType: DrillSimpleFuncHolder", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: args", "DEL NumberLiteral: 2", "DEL SimpleName: args", "DEL Block", "DEL SimpleName: DecimalUtility", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: DrillSimpleFuncHolder", "DEL NumberLiteral: 1", "DEL IfStatement", "DEL InfixExpression: ==", "DEL SimpleName: getMajorType", "DEL Block", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL SimpleName: mode", "DEL SimpleName: args", "DEL SingleVariableDeclaration", "DEL SimpleName: args", "DEL IfStatement", "DEL SimpleName: e", "DEL MethodInvocation", "DEL SimpleName: e", "DEL SimpleName: getReturnType", "DEL MethodDeclaration", "DEL SimpleName: build", "DEL SimpleName: getScale", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: DecimalScalePrecisionModFunction", "DEL SimpleName: outputScalePrec", "DEL SimpleName: getMode", "DEL SimpleName: DrillDecimalModScaleFuncHolder", "DEL ClassInstanceCreation", "DEL SimpleName: setPrecision", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: mode", "DEL SimpleName: outputScalePrec", "DEL SimpleName: functionAttributes", "DEL Block", "DEL MethodInvocation", "DEL SimpleType: List", "DEL SimpleName: getMode", "DEL SimpleName: getMajorType", "DEL QualifiedName: TypeProtos.MajorType", "DEL SimpleName: setScale", "DEL QualifiedName: returnValue.type", "DEL SimpleName: get", "DEL SimpleName: FunctionInitializer", "DEL Block", "DEL ParameterizedType: List<LogicalExpression>", "DEL SimpleName: checkPrecisionRange", "DEL SimpleName: initializer", "DEL SimpleName: outputScalePrec", "DEL SimpleName: getOutputScale", "DEL SimpleName: setMode", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleType: LogicalExpression", "DEL SimpleName: args", "DEL QualifiedName: TypeProtos.DataMode.OPTIONAL", "DEL SimpleType: DecimalScalePrecisionModFunction", "DEL MethodDeclaration", "DEL SimpleType: MajorType", "DEL SimpleName: LogicalExpression", "DEL SimpleType: TypeProtos.DataMode", "DEL SimpleName: getOutputPrecision", "DEL SimpleName: setMinorType", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: FunctionAttributes", "DEL AssertStatement", "DEL SimpleName: functionAttributes", "DEL MethodInvocation", "DEL SimpleName: FunctionAttributes", "DEL SimpleName: Override", "DEL NumberLiteral: 0", "DEL SimpleName: get", "DEL SimpleName: mode", "DEL NumberLiteral: 0", "DEL SimpleName: args", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getPrecision", "DEL SimpleType: LogicalExpression", "DEL InfixExpression: ==", "DEL TypeDeclaration: class", "DEL SimpleName: DecimalScalePrecisionModFunction", "DEL Assignment: =", "DEL SuperConstructorInvocation", "DEL MethodInvocation", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL SimpleName: List", "DEL Modifier: public", "DEL SimpleName: size", "DEL SimpleName: getMajorType", "DEL SimpleName: getMajorType", "DEL SimpleName: nullHandling", "DEL MethodInvocation", "DEL SimpleName: MajorType", "DEL BreakStatement", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL SimpleName: DrillDecimalModScaleFuncHolder", "DEL SimpleName: args", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL EnhancedForStatement", "DEL QualifiedName: NullHandling.NULL_IF_NULL", "DEL MethodInvocation", "DEL QualifiedName: TypeProtos.DataMode.OPTIONAL", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL QualifiedName: TypeProtos.DataMode", "DEL SimpleName: initializer", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Modifier: public"]}]}}, {"DrillDecimalModScaleFuncHolder_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.drill.exec.expr.fn(15)", "Delete PackageDeclaration(16)", "Delete QualifiedName: java.util.List(17)", "Delete ImportDeclaration(18)", "Delete QualifiedName: java.util.Map(19)", "Delete ImportDeclaration(20)", "Delete QualifiedName: org.apache.drill.common.expression.LogicalExpression(21)", "Delete ImportDeclaration(22)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos(23)", "Delete ImportDeclaration(24)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos.MajorType(25)", "Delete ImportDeclaration(26)", "Delete QualifiedName: org.apache.drill.common.util.DecimalScalePrecisionModFunction(27)", "Delete ImportDeclaration(28)", "Delete QualifiedName: org.apache.drill.exec.expr.DrillSimpleFunc(29)", "Delete ImportDeclaration(30)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate(31)", "Delete ImportDeclaration(32)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.FunctionScope(33)", "Delete ImportDeclaration(34)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.NullHandling(35)", "Delete ImportDeclaration(36)", "Delete QualifiedName: org.apache.drill.exec.util.DecimalUtility(37)", "Delete ImportDeclaration(38)", "Delete Modifier: public(39)", "Delete SimpleName: DrillDecimalModScaleFuncHolder(40)", "Delete SimpleName: DrillSimpleFuncHolder(41)", "Delete SimpleType: DrillSimpleFuncHolder(42)", "Delete Modifier: public(43)", "Delete SimpleName: DrillDecimalModScaleFuncHolder(44)", "Delete SimpleName: FunctionAttributes(45)", "Delete SimpleType: FunctionAttributes(46)", "Delete SimpleName: functionAttributes(47)", "Delete SingleVariableDeclaration(48)", "Delete SimpleName: FunctionInitializer(49)", "Delete SimpleType: FunctionInitializer(50)", "Delete SimpleName: initializer(51)", "Delete SingleVariableDeclaration(52)", "Delete SimpleName: functionAttributes(53)", "Delete SimpleName: initializer(54)", "Delete SuperConstructorInvocation(55)", "Delete Block(56)", "Delete MethodDeclaration(57)", "Delete SimpleName: Override(58)", "Delete MarkerAnnotation(59)", "Delete Modifier: public(60)", "Delete SimpleName: MajorType(61)", "Delete SimpleType: MajorType(62)", "Delete SimpleName: getReturnType(63)", "Delete SimpleName: List(64)", "Delete SimpleType: List(65)", "Delete SimpleName: LogicalExpression(66)", "Delete SimpleType: LogicalExpression(67)", "Delete ParameterizedType: List<LogicalExpression>(68)", "Delete SimpleName: args(69)", "Delete SingleVariableDeclaration(70)", "Delete QualifiedName: TypeProtos.DataMode(71)", "Delete SimpleType: TypeProtos.DataMode(72)", "Delete SimpleName: mode(73)", "Delete QualifiedName: returnValue.type(74)", "Delete SimpleName: getMode(75)", "Delete MethodInvocation(76)", "Delete VariableDeclarationFragment(77)", "Delete VariableDeclarationStatement(78)", "Delete SimpleName: nullHandling(79)", "Delete QualifiedName: NullHandling.NULL_IF_NULL(80)", "Delete InfixExpression: ==(81)", "Delete SimpleName: LogicalExpression(82)", "Delete SimpleType: LogicalExpression(83)", "Delete SimpleName: e(84)", "Delete SingleVariableDeclaration(85)", "Delete SimpleName: args(86)", "Delete SimpleName: e(87)", "Delete SimpleName: getMajorType(88)", "Delete MethodInvocation(89)", "Delete SimpleName: getMode(90)", "Delete MethodInvocation(91)", "Delete QualifiedName: TypeProtos.DataMode.OPTIONAL(92)", "Delete InfixExpression: ==(93)", "Delete SimpleName: mode(94)", "Delete QualifiedName: TypeProtos.DataMode.OPTIONAL(95)", "Delete Assignment: =(96)", "Delete ExpressionStatement(97)", "Delete BreakStatement(98)", "Delete Block(99)", "Delete IfStatement(100)", "Delete Block(101)", "Delete EnhancedForStatement(102)", "Delete Block(103)", "Delete IfStatement(104)", "Delete SimpleName: args(105)", "Delete SimpleName: size(106)", "Delete MethodInvocation(107)", "Delete NumberLiteral: 2(108)", "Delete InfixExpression: ==(109)", "Delete AssertStatement(110)", "Delete SimpleName: DecimalScalePrecisionModFunction(111)", "Delete SimpleType: DecimalScalePrecisionModFunction(112)", "Delete SimpleName: outputScalePrec(113)", "Delete SimpleName: DecimalScalePrecisionModFunction(114)", "Delete SimpleType: DecimalScalePrecisionModFunction(115)", "Delete SimpleName: args(116)", "Delete SimpleName: get(117)", "Delete NumberLiteral: 0(118)", "Delete MethodInvocation(119)", "Delete SimpleName: getMajorType(120)", "Delete MethodInvocation(121)", "Delete SimpleName: getPrecision(122)", "Delete MethodInvocation(123)", "Delete SimpleName: args(124)", "Delete SimpleName: get(125)", "Delete NumberLiteral: 0(126)", "Delete MethodInvocation(127)", "Delete SimpleName: getMajorType(128)", "Delete MethodInvocation(129)", "Delete SimpleName: getScale(130)", "Delete MethodInvocation(131)", "Delete SimpleName: args(132)", "Delete SimpleName: get(133)", "Delete NumberLiteral: 1(134)", "Delete MethodInvocation(135)", "Delete SimpleName: getMajorType(136)", "Delete MethodInvocation(137)", "Delete SimpleName: getPrecision(138)", "Delete MethodInvocation(139)", "Delete SimpleName: args(140)", "Delete SimpleName: get(141)", "Delete NumberLiteral: 1(142)", "Delete MethodInvocation(143)", "Delete SimpleName: getMajorType(144)", "Delete MethodInvocation(145)", "Delete SimpleName: getScale(146)", "Delete MethodInvocation(147)", "Delete ClassInstanceCreation(148)", "Delete VariableDeclarationFragment(149)", "Delete VariableDeclarationStatement(150)", "Delete QualifiedName: TypeProtos.MajorType(151)", "Delete SimpleName: newBuilder(152)", "Delete MethodInvocation(153)", "Delete SimpleName: setMinorType(154)", "Delete SimpleName: DecimalUtility(155)", "Delete SimpleName: getDecimalDataType(156)", "Delete SimpleName: outputScalePrec(157)", "Delete SimpleName: getOutputPrecision(158)", "Delete MethodInvocation(159)", "Delete MethodInvocation(160)", "Delete MethodInvocation(161)", "Delete SimpleName: setScale(162)", "Delete SimpleName: outputScalePrec(163)", "Delete SimpleName: getOutputScale(164)", "Delete MethodInvocation(165)", "Delete MethodInvocation(166)", "Delete SimpleName: setPrecision(167)", "Delete SimpleName: outputScalePrec(168)", "Delete SimpleName: getOutputPrecision(169)", "Delete MethodInvocation(170)", "Delete MethodInvocation(171)", "Delete SimpleName: setMode(172)", "Delete SimpleName: mode(173)", "Delete MethodInvocation(174)", "Delete SimpleName: build(175)", "Delete MethodInvocation(176)", "Delete ParenthesizedExpression(177)", "Delete ReturnStatement(178)", "Delete Block(179)", "Delete MethodDeclaration(180)", "Delete SimpleName: Override(181)", "Delete MarkerAnnotation(182)", "Delete Modifier: public(183)", "Delete PrimitiveType: boolean(184)", "Delete SimpleName: checkPrecisionRange(185)", "Delete BooleanLiteral: true(186)", "Delete ReturnStatement(187)", "Delete Block(188)", "Delete MethodDeclaration(189)", "Delete TypeDeclaration: class(190)"]}}, {"DrillDecimalSetScaleFuncHolder_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL PackageDeclaration", "DEL TextElement: limitations under the License.", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TagElement", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL Javadoc", "DEL QualifiedName: org.apache.drill.exec.expr.fn", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.expression.LogicalExpression"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.expression.ValueExpressions"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.types.TypeProtos"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.types.TypeProtos.MajorType", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.NullHandling", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleType: MajorType", "DEL SimpleName: FunctionAttributes", "DEL SimpleType: DrillSimpleFuncHolder", "DEL SimpleName: getMajorType", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: setMode", "DEL SimpleName: precision", "DEL SimpleName: getPrecision", "DEL SingleVariableDeclaration", "DEL Block", "DEL MethodInvocation", "DEL QualifiedName: returnValue.type", "DEL SimpleName: get", "DEL MethodInvocation", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: args", "DEL SimpleName: initializer", "DEL SimpleName: DrillDecimalSetScaleFuncHolder", "DEL MethodInvocation", "DEL SimpleName: DrillSimpleFuncHolder", "DEL EnhancedForStatement", "DEL VariableDeclarationFragment", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: List", "DEL SimpleType: ValueExpressions.IntExpression", "DEL SimpleName: setMinorType", "DEL SimpleName: getMajorType", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL QualifiedName: returnValue.type", "DEL Modifier: public", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: scale", "DEL InfixExpression: &&", "DEL SimpleName: args", "DEL QualifiedName: ValueExpressions.IntExpression", "DEL ParameterizedType: List<LogicalExpression>", "DEL QualifiedName: TypeProtos.DataMode.OPTIONAL", "DEL PrimitiveType: int", "DEL SimpleName: precision", "DEL SimpleType: FunctionAttributes", "DEL MethodInvocation", "DEL SimpleName: initializer", "DEL ParenthesizedExpression", "DEL SimpleName: Math", "DEL SimpleName: args", "DEL NumberLiteral: 0", "DEL SimpleName: e", "DEL SimpleType: TypeProtos.DataMode", "DEL NumberLiteral: 1", "DEL ExpressionStatement", "DEL SimpleType: ValueExpressions.IntExpression", "DEL SimpleName: get", "DEL SimpleName: mode", "DEL InfixExpression: ==", "DEL SimpleName: Override", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL QualifiedName: TypeProtos.MajorType", "DEL SimpleName: getReturnType", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: precision", "DEL MethodInvocation", "DEL SimpleName: functionAttributes", "DEL NumberLiteral: 0", "DEL TypeDeclaration: class", "DEL SimpleType: LogicalExpression", "DEL IfStatement", "DEL SimpleName: getInt", "DEL SimpleName: args", "DEL NumberLiteral: 1", "DEL VariableDeclarationFragment", "DEL SimpleName: setPrecision", "DEL NumberLiteral: 0", "DEL QualifiedName: TypeProtos.DataMode", "DEL MethodInvocation", "DEL SimpleName: FunctionInitializer", "DEL InfixExpression: ==", "DEL SimpleName: mode", "DEL InstanceofExpression", "DEL MethodInvocation", "DEL SimpleName: scale", "DEL SimpleName: precision", "DEL Assignment: =", "DEL SimpleName: max", "DEL SimpleName: build", "DEL SimpleName: getMode", "DEL SimpleName: LogicalExpression", "DEL MarkerAnnotation", "DEL SimpleName: i", "DEL NumberLiteral: 2", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: LogicalExpression", "DEL SuperConstructorInvocation", "DEL SimpleName: getMode", "DEL Block", "DEL SimpleName: nullHandling", "DEL PrimitiveType: int", "DEL SimpleName: MajorType", "DEL ParenthesizedExpression", "DEL SimpleName: setScale", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: FunctionInitializer", "DEL SimpleName: e", "DEL Modifier: public", "DEL SimpleName: DrillDecimalSetScaleFuncHolder", "DEL CastExpression", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL QualifiedName: TypeProtos.DataMode.OPTIONAL", "DEL SimpleName: getMinorType", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL AssertStatement", "DEL SimpleName: functionAttributes", "DEL SimpleName: e", "DEL SimpleType: List", "DEL SimpleName: mode", "DEL SimpleName: args", "DEL MethodDeclaration", "DEL SimpleName: scale", "DEL SimpleName: newBuilder", "DEL QualifiedName: ValueExpressions.IntExpression", "DEL MethodInvocation", "DEL SimpleName: size", "DEL Assignment: =", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleType: LogicalExpression", "DEL SingleVariableDeclaration", "DEL QualifiedName: NullHandling.NULL_IF_NULL"]}]}}, {"DrillDecimalSetScaleFuncHolder_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.drill.exec.expr.fn(15)", "Delete PackageDeclaration(16)", "Delete QualifiedName: java.util.List(17)", "Delete ImportDeclaration(18)", "Delete QualifiedName: org.apache.drill.common.expression.LogicalExpression(19)", "Delete ImportDeclaration(20)", "Delete QualifiedName: org.apache.drill.common.expression.ValueExpressions(21)", "Delete ImportDeclaration(22)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos(23)", "Delete ImportDeclaration(24)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos.MajorType(25)", "Delete ImportDeclaration(26)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.NullHandling(27)", "Delete ImportDeclaration(28)", "Delete Modifier: public(29)", "Delete SimpleName: DrillDecimalSetScaleFuncHolder(30)", "Delete SimpleName: DrillSimpleFuncHolder(31)", "Delete SimpleType: DrillSimpleFuncHolder(32)", "Delete Modifier: public(33)", "Delete SimpleName: DrillDecimalSetScaleFuncHolder(34)", "Delete SimpleName: FunctionAttributes(35)", "Delete SimpleType: FunctionAttributes(36)", "Delete SimpleName: functionAttributes(37)", "Delete SingleVariableDeclaration(38)", "Delete SimpleName: FunctionInitializer(39)", "Delete SimpleType: FunctionInitializer(40)", "Delete SimpleName: initializer(41)", "Delete SingleVariableDeclaration(42)", "Delete SimpleName: functionAttributes(43)", "Delete SimpleName: initializer(44)", "Delete SuperConstructorInvocation(45)", "Delete Block(46)", "Delete MethodDeclaration(47)", "Delete SimpleName: Override(48)", "Delete MarkerAnnotation(49)", "Delete Modifier: public(50)", "Delete SimpleName: MajorType(51)", "Delete SimpleType: MajorType(52)", "Delete SimpleName: getReturnType(53)", "Delete SimpleName: List(54)", "Delete SimpleType: List(55)", "Delete SimpleName: LogicalExpression(56)", "Delete SimpleType: LogicalExpression(57)", "Delete ParameterizedType: List<LogicalExpression>(58)", "Delete SimpleName: args(59)", "Delete SingleVariableDeclaration(60)", "Delete QualifiedName: TypeProtos.DataMode(61)", "Delete SimpleType: TypeProtos.DataMode(62)", "Delete SimpleName: mode(63)", "Delete QualifiedName: returnValue.type(64)", "Delete SimpleName: getMode(65)", "Delete MethodInvocation(66)", "Delete VariableDeclarationFragment(67)", "Delete VariableDeclarationStatement(68)", "Delete PrimitiveType: int(69)", "Delete SimpleName: scale(70)", "Delete NumberLiteral: 0(71)", "Delete VariableDeclarationFragment(72)", "Delete VariableDeclarationStatement(73)", "Delete PrimitiveType: int(74)", "Delete SimpleName: precision(75)", "Delete NumberLiteral: 0(76)", "Delete VariableDeclarationFragment(77)", "Delete VariableDeclarationStatement(78)", "Delete PrimitiveType: int(79)", "Delete SimpleName: i(80)", "Delete NumberLiteral: 0(81)", "Delete VariableDeclarationFragment(82)", "Delete VariableDeclarationStatement(83)", "Delete SimpleName: nullHandling(84)", "Delete QualifiedName: NullHandling.NULL_IF_NULL(85)", "Delete InfixExpression: ==(86)", "Delete SimpleName: LogicalExpression(87)", "Delete SimpleType: LogicalExpression(88)", "Delete SimpleName: e(89)", "Delete SingleVariableDeclaration(90)", "Delete SimpleName: args(91)", "Delete SimpleName: precision(92)", "Delete SimpleName: Math(93)", "Delete SimpleName: max(94)", "Delete SimpleName: precision(95)", "Delete SimpleName: e(96)", "Delete SimpleName: getMajorType(97)", "Delete MethodInvocation(98)", "Delete SimpleName: getPrecision(99)", "Delete MethodInvocation(100)", "Delete MethodInvocation(101)", "Delete Assignment: =(102)", "Delete ExpressionStatement(103)", "Delete SimpleName: e(104)", "Delete SimpleName: getMajorType(105)", "Delete MethodInvocation(106)", "Delete SimpleName: getMode(107)", "Delete MethodInvocation(108)", "Delete QualifiedName: TypeProtos.DataMode.OPTIONAL(109)", "Delete InfixExpression: ==(110)", "Delete SimpleName: mode(111)", "Delete QualifiedName: TypeProtos.DataMode.OPTIONAL(112)", "Delete Assignment: =(113)", "Delete ExpressionStatement(114)", "Delete Block(115)", "Delete IfStatement(116)", "Delete Block(117)", "Delete EnhancedForStatement(118)", "Delete SimpleName: args(119)", "Delete SimpleName: size(120)", "Delete MethodInvocation(121)", "Delete NumberLiteral: 2(122)", "Delete InfixExpression: ==(123)", "Delete ParenthesizedExpression(124)", "Delete SimpleName: args(125)", "Delete SimpleName: get(126)", "Delete NumberLiteral: 1(127)", "Delete MethodInvocation(128)", "Delete QualifiedName: ValueExpressions.IntExpression(129)", "Delete SimpleType: ValueExpressions.IntExpression(130)", "Delete InstanceofExpression(131)", "Delete ParenthesizedExpression(132)", "Delete InfixExpression: &&(133)", "Delete AssertStatement(134)", "Delete SimpleName: scale(135)", "Delete QualifiedName: ValueExpressions.IntExpression(136)", "Delete SimpleType: ValueExpressions.IntExpression(137)", "Delete SimpleName: args(138)", "Delete SimpleName: get(139)", "Delete NumberLiteral: 1(140)", "Delete MethodInvocation(141)", "Delete CastExpression(142)", "Delete ParenthesizedExpression(143)", "Delete SimpleName: getInt(144)", "Delete MethodInvocation(145)", "Delete Assignment: =(146)", "Delete ExpressionStatement(147)", "Delete Block(148)", "Delete IfStatement(149)", "Delete QualifiedName: TypeProtos.MajorType(150)", "Delete SimpleName: newBuilder(151)", "Delete MethodInvocation(152)", "Delete SimpleName: setMinorType(153)", "Delete QualifiedName: returnValue.type(154)", "Delete SimpleName: getMinorType(155)", "Delete MethodInvocation(156)", "Delete MethodInvocation(157)", "Delete SimpleName: setScale(158)", "Delete SimpleName: scale(159)", "Delete MethodInvocation(160)", "Delete SimpleName: setPrecision(161)", "Delete SimpleName: precision(162)", "Delete MethodInvocation(163)", "Delete SimpleName: setMode(164)", "Delete SimpleName: mode(165)", "Delete MethodInvocation(166)", "Delete SimpleName: build(167)", "Delete MethodInvocation(168)", "Delete ParenthesizedExpression(169)", "Delete ReturnStatement(170)", "Delete Block(171)", "Delete MethodDeclaration(172)", "Delete TypeDeclaration: class(173)"]}}, {"DrillDecimalSumAggFuncHolder_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL PackageDeclaration", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL Javadoc", "DEL TagElement", "DEL TextElement: limitations under the License.", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL QualifiedName: org.apache.drill.exec.expr.fn"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.expression.LogicalExpression", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.types.TypeProtos"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL NumberLiteral: 0", "DEL SimpleName: precision", "DEL SingleVariableDeclaration", "DEL SimpleName: setMinorType", "DEL SimpleName: getMinorType", "DEL SimpleName: DrillDecimalSumAggFuncHolder", "DEL SimpleName: List", "DEL MethodInvocation", "DEL SimpleName: getScale", "DEL MethodInvocation", "DEL SimpleName: scale", "DEL SimpleName: scale", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: scale", "DEL ParameterizedType: List<LogicalExpression>", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL SimpleType: TypeProtos.MajorType", "DEL MethodInvocation", "DEL SimpleName: getMajorType", "DEL MethodInvocation", "DEL Modifier: public", "DEL Assignment: =", "DEL SimpleName: max", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: initializer", "DEL SimpleName: DrillAggFuncHolder", "DEL MethodInvocation", "DEL SimpleName: getMajorType", "DEL SimpleName: getReturnType", "DEL SimpleName: attributes", "DEL QualifiedName: TypeProtos.DataMode.REQUIRED", "DEL SimpleName: attributes", "DEL SimpleName: precision", "DEL SimpleName: scale", "DEL SingleVariableDeclaration", "DEL SimpleType: LogicalExpression", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: LogicalExpression", "DEL SimpleName: newBuilder", "DEL SimpleName: e", "DEL SimpleType: FunctionInitializer", "DEL NumberLiteral: 38", "DEL Modifier: public", "DEL SimpleName: Math", "DEL SimpleName: setPrecision", "DEL SimpleName: LogicalExpression", "DEL SimpleName: getPrecision", "DEL QualifiedName: returnValue.type", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: max", "DEL ParenthesizedExpression", "DEL MarkerAnnotation", "DEL TypeDeclaration: class", "DEL QualifiedName: TypeProtos.MajorType", "DEL Modifier: public", "DEL SimpleName: args", "DEL QualifiedName: TypeProtos.MajorType", "DEL SimpleName: e", "DEL MethodInvocation", "DEL SimpleName: args", "DEL SimpleType: FunctionAttributes", "DEL MethodDeclaration", "DEL SimpleName: FunctionAttributes", "DEL SimpleName: Math", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: Override", "DEL SimpleType: List", "DEL Block", "DEL SimpleName: e", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: build", "DEL SimpleName: setScale", "DEL NumberLiteral: 0", "DEL SimpleName: setMode", "DEL SimpleType: DrillAggFuncHolder", "DEL EnhancedForStatement", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: initializer", "DEL SimpleType: LogicalExpression", "DEL SimpleName: precision", "DEL SimpleName: FunctionInitializer", "DEL MethodDeclaration", "DEL SimpleName: DrillDecimalSumAggFuncHolder", "DEL SuperConstructorInvocation"]}]}}, {"DrillDecimalSumAggFuncHolder_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.drill.exec.expr.fn(15)", "Delete PackageDeclaration(16)", "Delete QualifiedName: java.util.List(17)", "Delete ImportDeclaration(18)", "Delete QualifiedName: org.apache.drill.common.expression.LogicalExpression(19)", "Delete ImportDeclaration(20)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos(21)", "Delete ImportDeclaration(22)", "Delete Modifier: public(23)", "Delete SimpleName: DrillDecimalSumAggFuncHolder(24)", "Delete SimpleName: DrillAggFuncHolder(25)", "Delete SimpleType: DrillAggFuncHolder(26)", "Delete Modifier: public(27)", "Delete SimpleName: DrillDecimalSumAggFuncHolder(28)", "Delete SimpleName: FunctionAttributes(29)", "Delete SimpleType: FunctionAttributes(30)", "Delete SimpleName: attributes(31)", "Delete SingleVariableDeclaration(32)", "Delete SimpleName: FunctionInitializer(33)", "Delete SimpleType: FunctionInitializer(34)", "Delete SimpleName: initializer(35)", "Delete SingleVariableDeclaration(36)", "Delete SimpleName: attributes(37)", "Delete SimpleName: initializer(38)", "Delete SuperConstructorInvocation(39)", "Delete Block(40)", "Delete MethodDeclaration(41)", "Delete SimpleName: Override(42)", "Delete MarkerAnnotation(43)", "Delete Modifier: public(44)", "Delete QualifiedName: TypeProtos.MajorType(45)", "Delete SimpleType: TypeProtos.MajorType(46)", "Delete SimpleName: getReturnType(47)", "Delete SimpleName: List(48)", "Delete SimpleType: List(49)", "Delete SimpleName: LogicalExpression(50)", "Delete SimpleType: LogicalExpression(51)", "Delete ParameterizedType: List<LogicalExpression>(52)", "Delete SimpleName: args(53)", "Delete SingleVariableDeclaration(54)", "Delete PrimitiveType: int(55)", "Delete SimpleName: scale(56)", "Delete NumberLiteral: 0(57)", "Delete VariableDeclarationFragment(58)", "Delete VariableDeclarationStatement(59)", "Delete PrimitiveType: int(60)", "Delete SimpleName: precision(61)", "Delete NumberLiteral: 0(62)", "Delete VariableDeclarationFragment(63)", "Delete VariableDeclarationStatement(64)", "Delete SimpleName: LogicalExpression(65)", "Delete SimpleType: LogicalExpression(66)", "Delete SimpleName: e(67)", "Delete SingleVariableDeclaration(68)", "Delete SimpleName: args(69)", "Delete SimpleName: scale(70)", "Delete SimpleName: Math(71)", "Delete SimpleName: max(72)", "Delete SimpleName: scale(73)", "Delete SimpleName: e(74)", "Delete SimpleName: getMajorType(75)", "Delete MethodInvocation(76)", "Delete SimpleName: getScale(77)", "Delete MethodInvocation(78)", "Delete MethodInvocation(79)", "Delete Assignment: =(80)", "Delete ExpressionStatement(81)", "Delete SimpleName: precision(82)", "Delete SimpleName: Math(83)", "Delete SimpleName: max(84)", "Delete SimpleName: precision(85)", "Delete SimpleName: e(86)", "Delete SimpleName: getMajorType(87)", "Delete MethodInvocation(88)", "Delete SimpleName: getPrecision(89)", "Delete MethodInvocation(90)", "Delete MethodInvocation(91)", "Delete Assignment: =(92)", "Delete ExpressionStatement(93)", "Delete Block(94)", "Delete EnhancedForStatement(95)", "Delete QualifiedName: TypeProtos.MajorType(96)", "Delete SimpleName: newBuilder(97)", "Delete MethodInvocation(98)", "Delete SimpleName: setMinorType(99)", "Delete QualifiedName: returnValue.type(100)", "Delete SimpleName: getMinorType(101)", "Delete MethodInvocation(102)", "Delete MethodInvocation(103)", "Delete SimpleName: setScale(104)", "Delete SimpleName: scale(105)", "Delete MethodInvocation(106)", "Delete SimpleName: setPrecision(107)", "Delete NumberLiteral: 38(108)", "Delete MethodInvocation(109)", "Delete SimpleName: setMode(110)", "Delete QualifiedName: TypeProtos.DataMode.REQUIRED(111)", "Delete MethodInvocation(112)", "Delete SimpleName: build(113)", "Delete MethodInvocation(114)", "Delete ParenthesizedExpression(115)", "Delete ReturnStatement(116)", "Delete Block(117)", "Delete MethodDeclaration(118)", "Delete TypeDeclaration: class(119)"]}}, {"DrillDecimalSumScaleFuncHolder_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL Javadoc", "DEL TextElement: limitations under the License.", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL PackageDeclaration", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL QualifiedName: org.apache.drill.exec.expr.fn", "DEL TagElement"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.expression.LogicalExpression", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.types.TypeProtos", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.types.TypeProtos.MajorType"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.util.DecimalScalePrecisionMulFunction", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.NullHandling", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.exec.util.DecimalUtility"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: outputScalePrec", "DEL PrimitiveType: boolean", "DEL SimpleType: FunctionAttributes", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: getOutputPrecision", "DEL SimpleName: getOutputPrecision", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL QualifiedName: TypeProtos.DataMode", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: args", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: mode", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: build", "DEL MethodInvocation", "DEL SimpleName: getMajorType", "DEL ExpressionStatement", "DEL SimpleName: MajorType", "DEL Modifier: public", "DEL MethodInvocation", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: args", "DEL SimpleName: setScale", "DEL InfixExpression: ==", "DEL SimpleName: args", "DEL SimpleName: getDecimalDataType", "DEL SimpleName: e", "DEL SimpleName: e", "DEL SimpleName: FunctionAttributes", "DEL SimpleName: getPrecision", "DEL SimpleName: get", "DEL QualifiedName: NullHandling.NULL_IF_NULL", "DEL SimpleName: DecimalScalePrecisionMulFunction", "DEL SimpleName: getMajorType", "DEL Block", "DEL SimpleType: DecimalScalePrecisionMulFunction", "DEL SimpleType: DecimalScalePrecisionMulFunction", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: initializer", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: TypeProtos.DataMode", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleType: FunctionInitializer", "DEL SimpleName: outputScalePrec", "DEL SimpleName: checkPrecisionRange", "DEL SimpleName: getMode", "DEL SimpleName: DrillSimpleFuncHolder", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: args", "DEL NumberLiteral: 0", "DEL Block", "DEL TypeDeclaration: class", "DEL SimpleType: DrillSimpleFuncHolder", "DEL EnhancedForStatement", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL SimpleName: functionAttributes", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Assignment: =", "DEL SimpleName: nullHandling", "DEL SimpleName: get", "DEL SuperConstructorInvocation", "DEL SimpleName: size", "DEL MethodInvocation", "DEL BreakStatement", "DEL QualifiedName: TypeProtos.DataMode.OPTIONAL", "DEL SimpleName: newBuilder", "DEL Block", "DEL SimpleName: args", "DEL Modifier: public", "DEL SimpleName: DrillDecimalSumScaleFuncHolder", "DEL SingleVariableDeclaration", "DEL SimpleType: List", "DEL SimpleName: getMode", "DEL AssertStatement", "DEL IfStatement", "DEL BooleanLiteral: true", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL QualifiedName: returnValue.type", "DEL SimpleName: getPrecision", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: mode", "DEL SimpleName: args", "DEL SimpleName: getScale", "DEL MethodInvocation", "DEL SimpleName: LogicalExpression", "DEL MarkerAnnotation", "DEL Block", "DEL SimpleName: outputScalePrec", "DEL SimpleName: setMinorType", "DEL SingleVariableDeclaration", "DEL SimpleName: DrillDecimalSumScaleFuncHolder", "DEL SimpleName: getReturnType", "DEL VariableDeclarationStatement", "DEL SimpleName: functionAttributes", "DEL SimpleName: DecimalScalePrecisionMulFunction", "DEL MethodInvocation", "DEL SimpleName: args", "DEL NumberLiteral: 1", "DEL SimpleType: LogicalExpression", "DEL SimpleName: DecimalUtility", "DEL MethodInvocation", "DEL SimpleType: MajorType", "DEL QualifiedName: TypeProtos.DataMode.OPTIONAL", "DEL SimpleName: getMajorType", "DEL NumberLiteral: 1", "DEL SimpleName: setMode", "DEL SimpleName: getOutputScale", "DEL MethodInvocation", "DEL SimpleName: setPrecision", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: initializer", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL SimpleName: outputScalePrec", "DEL ParameterizedType: List<LogicalExpression>", "DEL SimpleName: getMajorType", "DEL SimpleName: get", "DEL ParenthesizedExpression", "DEL SimpleName: FunctionInitializer", "DEL QualifiedName: TypeProtos.MajorType", "DEL SimpleName: getScale", "DEL NumberLiteral: 2", "DEL SimpleName: Override", "DEL SimpleName: getMajorType", "DEL Block", "DEL SimpleName: LogicalExpression", "DEL SimpleName: get", "DEL SimpleName: mode", "DEL SimpleType: LogicalExpression", "DEL SimpleName: List"]}]}}, {"DrillDecimalSumScaleFuncHolder_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.drill.exec.expr.fn(15)", "Delete PackageDeclaration(16)", "Delete QualifiedName: java.util.List(17)", "Delete ImportDeclaration(18)", "Delete QualifiedName: org.apache.drill.common.expression.LogicalExpression(19)", "Delete ImportDeclaration(20)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos(21)", "Delete ImportDeclaration(22)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos.MajorType(23)", "Delete ImportDeclaration(24)", "Delete QualifiedName: org.apache.drill.common.util.DecimalScalePrecisionMulFunction(25)", "Delete ImportDeclaration(26)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.NullHandling(27)", "Delete ImportDeclaration(28)", "Delete QualifiedName: org.apache.drill.exec.util.DecimalUtility(29)", "Delete ImportDeclaration(30)", "Delete Modifier: public(31)", "Delete SimpleName: DrillDecimalSumScaleFuncHolder(32)", "Delete SimpleName: DrillSimpleFuncHolder(33)", "Delete SimpleType: DrillSimpleFuncHolder(34)", "Delete Modifier: public(35)", "Delete SimpleName: DrillDecimalSumScaleFuncHolder(36)", "Delete SimpleName: FunctionAttributes(37)", "Delete SimpleType: FunctionAttributes(38)", "Delete SimpleName: functionAttributes(39)", "Delete SingleVariableDeclaration(40)", "Delete SimpleName: FunctionInitializer(41)", "Delete SimpleType: FunctionInitializer(42)", "Delete SimpleName: initializer(43)", "Delete SingleVariableDeclaration(44)", "Delete SimpleName: functionAttributes(45)", "Delete SimpleName: initializer(46)", "Delete SuperConstructorInvocation(47)", "Delete Block(48)", "Delete MethodDeclaration(49)", "Delete SimpleName: Override(50)", "Delete MarkerAnnotation(51)", "Delete Modifier: public(52)", "Delete SimpleName: MajorType(53)", "Delete SimpleType: MajorType(54)", "Delete SimpleName: getReturnType(55)", "Delete SimpleName: List(56)", "Delete SimpleType: List(57)", "Delete SimpleName: LogicalExpression(58)", "Delete SimpleType: LogicalExpression(59)", "Delete ParameterizedType: List<LogicalExpression>(60)", "Delete SimpleName: args(61)", "Delete SingleVariableDeclaration(62)", "Delete QualifiedName: TypeProtos.DataMode(63)", "Delete SimpleType: TypeProtos.DataMode(64)", "Delete SimpleName: mode(65)", "Delete QualifiedName: returnValue.type(66)", "Delete SimpleName: getMode(67)", "Delete MethodInvocation(68)", "Delete VariableDeclarationFragment(69)", "Delete VariableDeclarationStatement(70)", "Delete SimpleName: nullHandling(71)", "Delete QualifiedName: NullHandling.NULL_IF_NULL(72)", "Delete InfixExpression: ==(73)", "Delete SimpleName: LogicalExpression(74)", "Delete SimpleType: LogicalExpression(75)", "Delete SimpleName: e(76)", "Delete SingleVariableDeclaration(77)", "Delete SimpleName: args(78)", "Delete SimpleName: e(79)", "Delete SimpleName: getMajorType(80)", "Delete MethodInvocation(81)", "Delete SimpleName: getMode(82)", "Delete MethodInvocation(83)", "Delete QualifiedName: TypeProtos.DataMode.OPTIONAL(84)", "Delete InfixExpression: ==(85)", "Delete SimpleName: mode(86)", "Delete QualifiedName: TypeProtos.DataMode.OPTIONAL(87)", "Delete Assignment: =(88)", "Delete ExpressionStatement(89)", "Delete BreakStatement(90)", "Delete Block(91)", "Delete IfStatement(92)", "Delete Block(93)", "Delete EnhancedForStatement(94)", "Delete Block(95)", "Delete IfStatement(96)", "Delete SimpleName: args(97)", "Delete SimpleName: size(98)", "Delete MethodInvocation(99)", "Delete NumberLiteral: 2(100)", "Delete InfixExpression: ==(101)", "Delete AssertStatement(102)", "Delete SimpleName: DecimalScalePrecisionMulFunction(103)", "Delete SimpleType: DecimalScalePrecisionMulFunction(104)", "Delete SimpleName: outputScalePrec(105)", "Delete SimpleName: DecimalScalePrecisionMulFunction(106)", "Delete SimpleType: DecimalScalePrecisionMulFunction(107)", "Delete SimpleName: args(108)", "Delete SimpleName: get(109)", "Delete NumberLiteral: 0(110)", "Delete MethodInvocation(111)", "Delete SimpleName: getMajorType(112)", "Delete MethodInvocation(113)", "Delete SimpleName: getPrecision(114)", "Delete MethodInvocation(115)", "Delete SimpleName: args(116)", "Delete SimpleName: get(117)", "Delete NumberLiteral: 0(118)", "Delete MethodInvocation(119)", "Delete SimpleName: getMajorType(120)", "Delete MethodInvocation(121)", "Delete SimpleName: getScale(122)", "Delete MethodInvocation(123)", "Delete SimpleName: args(124)", "Delete SimpleName: get(125)", "Delete NumberLiteral: 1(126)", "Delete MethodInvocation(127)", "Delete SimpleName: getMajorType(128)", "Delete MethodInvocation(129)", "Delete SimpleName: getPrecision(130)", "Delete MethodInvocation(131)", "Delete SimpleName: args(132)", "Delete SimpleName: get(133)", "Delete NumberLiteral: 1(134)", "Delete MethodInvocation(135)", "Delete SimpleName: getMajorType(136)", "Delete MethodInvocation(137)", "Delete SimpleName: getScale(138)", "Delete MethodInvocation(139)", "Delete ClassInstanceCreation(140)", "Delete VariableDeclarationFragment(141)", "Delete VariableDeclarationStatement(142)", "Delete QualifiedName: TypeProtos.MajorType(143)", "Delete SimpleName: newBuilder(144)", "Delete MethodInvocation(145)", "Delete SimpleName: setMinorType(146)", "Delete SimpleName: DecimalUtility(147)", "Delete SimpleName: getDecimalDataType(148)", "Delete SimpleName: outputScalePrec(149)", "Delete SimpleName: getOutputPrecision(150)", "Delete MethodInvocation(151)", "Delete MethodInvocation(152)", "Delete MethodInvocation(153)", "Delete SimpleName: setScale(154)", "Delete SimpleName: outputScalePrec(155)", "Delete SimpleName: getOutputScale(156)", "Delete MethodInvocation(157)", "Delete MethodInvocation(158)", "Delete SimpleName: setPrecision(159)", "Delete SimpleName: outputScalePrec(160)", "Delete SimpleName: getOutputPrecision(161)", "Delete MethodInvocation(162)", "Delete MethodInvocation(163)", "Delete SimpleName: setMode(164)", "Delete SimpleName: mode(165)", "Delete MethodInvocation(166)", "Delete SimpleName: build(167)", "Delete MethodInvocation(168)", "Delete ParenthesizedExpression(169)", "Delete ReturnStatement(170)", "Delete Block(171)", "Delete MethodDeclaration(172)", "Delete SimpleName: Override(173)", "Delete MarkerAnnotation(174)", "Delete Modifier: public(175)", "Delete PrimitiveType: boolean(176)", "Delete SimpleName: checkPrecisionRange(177)", "Delete BooleanLiteral: true(178)", "Delete ReturnStatement(179)", "Delete Block(180)", "Delete MethodDeclaration(181)", "Delete TypeDeclaration: class(182)"]}}, {"DrillDecimalZeroScaleFuncHolder_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TagElement", "DEL Javadoc", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: limitations under the License.", "DEL QualifiedName: org.apache.drill.exec.expr.fn", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL PackageDeclaration", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.expression.LogicalExpression", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.types.TypeProtos"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.types.TypeProtos.MajorType", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.exec.expr.DrillSimpleFunc"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.FunctionScope"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.NullHandling"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: setPrecision", "DEL QualifiedName: TypeProtos.MajorType", "DEL IfStatement", "DEL MethodInvocation", "DEL EnhancedForStatement", "DEL SimpleType: FunctionAttributes", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleType: DrillSimpleFuncHolder", "DEL MethodInvocation", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL ParenthesizedExpression", "DEL SimpleType: TypeProtos.DataMode", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: getReturnType", "DEL VariableDeclarationStatement", "DEL SimpleName: build", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: setMinorType", "DEL QualifiedName: TypeProtos.DataMode.OPTIONAL", "DEL SimpleName: List", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: mode", "DEL InfixExpression: ==", "DEL SimpleName: getMode", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: e", "DEL SimpleName: mode", "DEL NumberLiteral: 0", "DEL SimpleName: args", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: args", "DEL MethodInvocation", "DEL SimpleName: e", "DEL QualifiedName: TypeProtos.DataMode.OPTIONAL", "DEL SimpleName: FunctionAttributes", "DEL SimpleName: precision", "DEL Assignment: =", "DEL SimpleType: List", "DEL ExpressionStatement", "DEL SimpleName: e", "DEL SimpleName: DrillDecimalZeroScaleFuncHolder", "DEL SimpleName: nullHandling", "DEL SimpleType: LogicalExpression", "DEL QualifiedName: returnValue.type", "DEL SingleVariableDeclaration", "DEL SimpleName: FunctionInitializer", "DEL SimpleName: newBuilder", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: mode", "DEL MethodInvocation", "DEL SimpleName: getMinorType", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: getMajorType", "DEL ParameterizedType: List<LogicalExpression>", "DEL SimpleName: precision", "DEL QualifiedName: returnValue.type", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: getMode", "DEL SimpleName: initializer", "DEL VariableDeclarationFragment", "DEL SimpleName: LogicalExpression", "DEL SimpleName: getMajorType", "DEL MarkerAnnotation", "DEL SuperConstructorInvocation", "DEL SimpleName: Math", "DEL SimpleName: precision", "DEL SimpleName: initializer", "DEL SimpleType: MajorType", "DEL ReturnStatement", "DEL SimpleName: precision", "DEL MethodDeclaration", "DEL SimpleName: MajorType", "DEL SimpleName: LogicalExpression", "DEL TypeDeclaration: class", "DEL Block", "DEL SimpleType: FunctionInitializer", "DEL SimpleName: Override", "DEL SimpleName: setMode", "DEL QualifiedName: TypeProtos.DataMode", "DEL SimpleName: DrillSimpleFuncHolder", "DEL SimpleType: LogicalExpression", "DEL IfStatement", "DEL MethodInvocation", "DEL QualifiedName: NullHandling.NULL_IF_NULL", "DEL SimpleName: functionAttributes", "DEL SimpleName: max", "DEL SimpleName: functionAttributes", "DEL SimpleName: DrillDecimalZeroScaleFuncHolder", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: setScale", "DEL Assignment: =", "DEL SimpleName: getPrecision", "DEL Modifier: public", "DEL Block"]}]}}, {"DrillDecimalZeroScaleFuncHolder_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.drill.exec.expr.fn(15)", "Delete PackageDeclaration(16)", "Delete QualifiedName: java.util.List(17)", "Delete ImportDeclaration(18)", "Delete QualifiedName: java.util.Map(19)", "Delete ImportDeclaration(20)", "Delete QualifiedName: org.apache.drill.common.expression.LogicalExpression(21)", "Delete ImportDeclaration(22)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos(23)", "Delete ImportDeclaration(24)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos.MajorType(25)", "Delete ImportDeclaration(26)", "Delete QualifiedName: org.apache.drill.exec.expr.DrillSimpleFunc(27)", "Delete ImportDeclaration(28)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate(29)", "Delete ImportDeclaration(30)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.FunctionScope(31)", "Delete ImportDeclaration(32)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.NullHandling(33)", "Delete ImportDeclaration(34)", "Delete Modifier: public(35)", "Delete SimpleName: DrillDecimalZeroScaleFuncHolder(36)", "Delete SimpleName: DrillSimpleFuncHolder(37)", "Delete SimpleType: DrillSimpleFuncHolder(38)", "Delete Modifier: public(39)", "Delete SimpleName: DrillDecimalZeroScaleFuncHolder(40)", "Delete SimpleName: FunctionAttributes(41)", "Delete SimpleType: FunctionAttributes(42)", "Delete SimpleName: functionAttributes(43)", "Delete SingleVariableDeclaration(44)", "Delete SimpleName: FunctionInitializer(45)", "Delete SimpleType: FunctionInitializer(46)", "Delete SimpleName: initializer(47)", "Delete SingleVariableDeclaration(48)", "Delete SimpleName: functionAttributes(49)", "Delete SimpleName: initializer(50)", "Delete SuperConstructorInvocation(51)", "Delete Block(52)", "Delete MethodDeclaration(53)", "Delete SimpleName: Override(54)", "Delete MarkerAnnotation(55)", "Delete Modifier: public(56)", "Delete SimpleName: MajorType(57)", "Delete SimpleType: MajorType(58)", "Delete SimpleName: getReturnType(59)", "Delete SimpleName: List(60)", "Delete SimpleType: List(61)", "Delete SimpleName: LogicalExpression(62)", "Delete SimpleType: LogicalExpression(63)", "Delete ParameterizedType: List<LogicalExpression>(64)", "Delete SimpleName: args(65)", "Delete SingleVariableDeclaration(66)", "Delete PrimitiveType: int(67)", "Delete SimpleName: precision(68)", "Delete NumberLiteral: 0(69)", "Delete VariableDeclarationFragment(70)", "Delete VariableDeclarationStatement(71)", "Delete QualifiedName: TypeProtos.DataMode(72)", "Delete SimpleType: TypeProtos.DataMode(73)", "Delete SimpleName: mode(74)", "Delete QualifiedName: returnValue.type(75)", "Delete SimpleName: getMode(76)", "Delete MethodInvocation(77)", "Delete VariableDeclarationFragment(78)", "Delete VariableDeclarationStatement(79)", "Delete SimpleName: nullHandling(80)", "Delete QualifiedName: NullHandling.NULL_IF_NULL(81)", "Delete InfixExpression: ==(82)", "Delete SimpleName: LogicalExpression(83)", "Delete SimpleType: LogicalExpression(84)", "Delete SimpleName: e(85)", "Delete SingleVariableDeclaration(86)", "Delete SimpleName: args(87)", "Delete SimpleName: e(88)", "Delete SimpleName: getMajorType(89)", "Delete MethodInvocation(90)", "Delete SimpleName: getMode(91)", "Delete MethodInvocation(92)", "Delete QualifiedName: TypeProtos.DataMode.OPTIONAL(93)", "Delete InfixExpression: ==(94)", "Delete SimpleName: mode(95)", "Delete QualifiedName: TypeProtos.DataMode.OPTIONAL(96)", "Delete Assignment: =(97)", "Delete ExpressionStatement(98)", "Delete Block(99)", "Delete IfStatement(100)", "Delete SimpleName: precision(101)", "Delete SimpleName: Math(102)", "Delete SimpleName: max(103)", "Delete SimpleName: precision(104)", "Delete SimpleName: e(105)", "Delete SimpleName: getMajorType(106)", "Delete MethodInvocation(107)", "Delete SimpleName: getPrecision(108)", "Delete MethodInvocation(109)", "Delete MethodInvocation(110)", "Delete Assignment: =(111)", "Delete ExpressionStatement(112)", "Delete Block(113)", "Delete EnhancedForStatement(114)", "Delete Block(115)", "Delete IfStatement(116)", "Delete QualifiedName: TypeProtos.MajorType(117)", "Delete SimpleName: newBuilder(118)", "Delete MethodInvocation(119)", "Delete SimpleName: setMinorType(120)", "Delete QualifiedName: returnValue.type(121)", "Delete SimpleName: getMinorType(122)", "Delete MethodInvocation(123)", "Delete MethodInvocation(124)", "Delete SimpleName: setScale(125)", "Delete NumberLiteral: 0(126)", "Delete MethodInvocation(127)", "Delete SimpleName: setPrecision(128)", "Delete SimpleName: precision(129)", "Delete MethodInvocation(130)", "Delete SimpleName: setMode(131)", "Delete SimpleName: mode(132)", "Delete MethodInvocation(133)", "Delete SimpleName: build(134)", "Delete MethodInvocation(135)", "Delete ParenthesizedExpression(136)", "Delete ReturnStatement(137)", "Delete Block(138)", "Delete MethodDeclaration(139)", "Delete TypeDeclaration: class(140)"]}}, {"DrillFuncHolder_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 38", "operations": ["INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 38", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: attributes to MethodInvocation at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: getType to MethodInvocation at 1", "INS SimpleName: logicalExpressions to MethodInvocation at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 44", "operations": ["INS Modifier: public to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 44", "INS ReturnStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: getParameters to MethodDeclaration at 2", "INS Block to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 45", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 1", "INS SimpleName: checkPrecisionRange to MethodDeclaration at 2", "INS MethodInvocation to ReturnStatement at 0", "INS Block to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 45", "INS Modifier: public to MethodDeclaration at 0", "INS ReturnStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 46", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 46", "INS ReturnStatement to Block at 0", "INS SimpleName: getReturnType to MethodDeclaration at 2", "INS Block to MethodDeclaration at 3", "INS MethodInvocation to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 47", "operations": ["INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: getReturnValue to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 47", "INS MethodInvocation to ReturnStatement at 0", "INS Block to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 48", "operations": ["INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: getWorkspaceVars to MethodDeclaration at 2", "INS Block to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 48"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: MajorType to MethodDeclaration at 1", "MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SimpleName: getReturnType to MethodDeclaration at 2", "MOV Modifier: public to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ArrayType: ValueReference[] to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: MajorType to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: ValueReference to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ArrayType: WorkspaceReference[] to MethodDeclaration at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV MethodInvocation to EnhancedForStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ArrayType: JVar[] to VariableDeclarationStatement at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: getParameters to MethodInvocation at 1", "INS SimpleName: attributes to MethodInvocation at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS MethodInvocation to ArrayAccess at 0", "INS ArrayAccess to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: isConstant to MethodInvocation at 1", "INS SimpleName: attributes to MethodInvocation at 0", "INS SimpleName: getParameters to MethodInvocation at 1", "INS ArrayAccess to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: isFieldReader to MethodInvocation at 1", "INS MethodInvocation to ArrayAccess at 0", "INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: getParameters to MethodInvocation at 1", "INS SimpleName: attributes to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS FieldAccess to InfixExpression: < at 1", "operations": ["INS FieldAccess to InfixExpression: < at 1", "INS SimpleName: length to FieldAccess at 1", "INS MethodInvocation to FieldAccess at 0", "INS SimpleName: attributes to MethodInvocation at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 1"]}, {"root": "INS FieldAccess to InfixExpression: != at 1", "operations": ["INS SimpleName: attributes to MethodInvocation at 0", "INS MethodInvocation to FieldAccess at 0", "INS FieldAccess to InfixExpression: != at 1", "INS SimpleName: length to FieldAccess at 1", "INS SimpleName: getParameters to MethodInvocation at 1"]}, {"root": "INS FieldAccess to InfixExpression: < at 1", "operations": ["INS FieldAccess to InfixExpression: < at 1", "INS SimpleName: length to FieldAccess at 1", "INS SimpleName: attributes to MethodInvocation at 0", "INS MethodInvocation to FieldAccess at 0", "INS SimpleName: getParameters to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to FieldAccess at 0", "operations": ["INS MethodInvocation to FieldAccess at 0", "INS SimpleName: attributes to MethodInvocation at 0", "INS SimpleName: getParameters to MethodInvocation at 1"]}, {"root": "UPDATE from Sets to attributes", "operations": ["UPD SimpleName: Sets from Sets to attributes", "UPD SimpleName: subTypes from subTypes to attributes", "UPD SimpleName: Types from Types to attributes", "UPD SimpleName: MajorType from MajorType to attributes", "UPD SimpleName: builder from builder to attributes", "UPD SimpleName: logicalExpression from logicalExpression to attributes"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Sets to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: subTypes to MethodInvocation at 0"]}, {"root": "UPDATE from parameters to getParameters", "operations": ["UPD SimpleName: parameters from parameters to getParameters", "UPD SimpleName: getType from getType to getParameters"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getType to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: MajorType to MethodInvocation at 0"]}, {"root": "UPDATE from setMode to checkPrecisionRange", "operations": ["UPD SimpleName: setMode from setMode to checkPrecisionRange"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setMode to MethodInvocation at 1"]}, {"root": "UPDATE from subType to getType", "operations": ["UPD SimpleName: subType from subType to getType"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: subType to MethodInvocation at 1", "MOV SimpleName: addSubType to MethodInvocation at 1", "MOV SimpleName: builder to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getMajorType to MethodInvocation at 1", "MOV SimpleName: logicalExpression to MethodInvocation at 0"]}, {"root": "UPDATE from addSubType to getReturnValue", "operations": ["UPD SimpleName: addSubType from addSubType to getReturnValue", "UPD SimpleName: getMajorType from getMajorType to getReturnValue"]}, {"root": "UPDATE from getMinorType to getWorkspaceVars", "operations": ["UPD SimpleName: getMinorType from getMinorType to getWorkspaceVars"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getMinorType to MethodInvocation at 1"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV MethodInvocation to InfixExpression: + at 6"]}, {"root": "MOVE from ArrayCreation", "operations": ["MOV ArrayType: JVar[] to ArrayCreation at 0"]}, {"root": "INS FieldAccess to ArrayCreation at 1", "operations": ["INS SimpleName: length to FieldAccess at 1", "INS FieldAccess to ArrayCreation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getType to MethodInvocation at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "UPDATE from getMinorType to getReturnType", "operations": ["UPD SimpleName: getMinorType from getMinorType to getReturnType"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getMinorType to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: attributes to MethodInvocation at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getReturnValue to MethodInvocation at 1"]}, {"root": "MOVE from FieldAccess", "operations": ["MOV MethodInvocation to FieldAccess at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: attributes to MethodInvocation at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: getType to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: ref to MethodInvocation at 0"]}, {"root": "INS SimpleName: getType to MethodInvocation at 1", "operations": ["INS SimpleName: getType to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "INS MethodInvocation to MethodInvocation at 1", "operations": ["INS SimpleName: getType to MethodInvocation at 1", "INS SimpleName: getParameters to MethodInvocation at 1", "INS MethodInvocation to ArrayAccess at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: attributes to MethodInvocation at 0", "INS ArrayAccess to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to InfixExpression: != at 0", "operations": ["INS SimpleName: attributes to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS SimpleName: getParameters to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: getRegisteredNames to MethodInvocation at 1", "INS SimpleName: attributes to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS SimpleName: getRegisteredNames to MethodInvocation at 1", "INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: attributes to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to InfixExpression: && at 0", "operations": ["INS MethodInvocation to InfixExpression: && at 0", "INS SimpleName: parameter to MethodInvocation at 0", "INS SimpleName: isFieldReader to MethodInvocation at 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV ArrayAccess to Assignment: = at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV ArrayAccess to Assignment: = at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: attributes to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS FieldAccess to MethodInvocation at 2", "operations": ["INS SimpleName: getParameters to MethodInvocation at 1", "INS FieldAccess to MethodInvocation at 2", "INS MethodInvocation to FieldAccess at 0", "INS SimpleName: length to FieldAccess at 1", "INS SimpleName: attributes to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS SimpleName: getParameters to MethodInvocation at 1", "INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: attributes to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS SimpleName: attributes to MethodInvocation at 0", "INS ArrayAccess to MethodInvocation at 0", "INS MethodInvocation to ArrayAccess at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getWorkspaceVars to MethodInvocation at 1", "INS SimpleName: getName to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ArrayAccess to MethodInvocation at 4"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS SimpleName: getWorkspaceVars to MethodInvocation at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: attributes to MethodInvocation at 0", "INS MethodInvocation to ArrayAccess at 0", "INS MethodInvocation to MethodInvocation at 3", "INS ArrayAccess to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ArrayAccess to MethodInvocation at 4"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: parameters to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS SimpleName: getName to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: parameter to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: parameter to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS SimpleName: getWorkspaceVars to MethodInvocation at 1", "INS SimpleName: attributes to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to ArrayAccess at 0", "INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: getType to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: getType to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ArrayAccess at 0", "INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: attributes to MethodInvocation at 0", "INS SimpleName: getWorkspaceVars to MethodInvocation at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: distributed with this work for additional information", "DEL TextElement: limitations under the License.", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TagElement", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL Javadoc", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.collect.Sets", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.common.types.TypeProtos", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.common.types.TypeProtos.DataMode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate", "DEL ImportDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: protected", "DEL FieldDeclaration", "DEL SimpleType: FunctionTemplate.FunctionScope", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: scope", "DEL QualifiedName: FunctionTemplate.FunctionScope"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleType: FunctionTemplate.NullHandling", "DEL Modifier: protected", "DEL QualifiedName: FunctionTemplate.NullHandling", "DEL SimpleName: nullHandling", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL Modifier: final"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL QualifiedName: FunctionTemplate.FunctionCostCategory", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL Modifier: protected", "DEL FieldDeclaration", "DEL SimpleType: FunctionTemplate.FunctionCostCategory", "DEL SimpleName: costCategory"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: protected", "DEL PrimitiveType: boolean", "DEL SimpleName: isNiladic", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL Modifier: final"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL Modifier: protected", "DEL Modifier: final", "DEL PrimitiveType: boolean", "DEL VariableDeclarationFragment", "DEL SimpleName: isBinaryCommutative"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL Modifier: protected", "DEL VariableDeclarationFragment", "DEL SimpleName: isDeterministic", "DEL Modifier: final", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL SimpleType: String", "DEL ArrayType: String[]", "DEL VariableDeclarationFragment", "DEL Modifier: protected", "DEL FieldDeclaration", "DEL SimpleName: registeredNames", "DEL Dimension", "DEL SimpleName: String"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: workspaceVars", "DEL SimpleName: WorkspaceReference", "DEL Modifier: protected", "DEL VariableDeclarationFragment", "DEL SimpleType: WorkspaceReference", "DEL FieldDeclaration", "DEL ArrayType: WorkspaceReference[]", "DEL Dimension", "DEL Modifier: final"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL FieldDeclaration", "DEL SimpleType: ValueReference", "DEL SimpleName: ValueReference", "DEL ArrayType: ValueReference[]", "DEL SimpleName: parameters", "DEL Modifier: protected"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: protected", "DEL FieldDeclaration", "DEL SimpleName: ValueReference", "DEL Modifier: final", "DEL SimpleName: returnValue", "DEL SimpleType: ValueReference", "DEL VariableDeclarationFragment"]}, {"root": "DEL SuperConstructorInvocation", "operations": ["DEL SuperConstructorInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: getScope", "DEL SimpleName: scope", "DEL ThisExpression", "DEL Assignment: =", "DEL FieldAccess", "DEL MethodInvocation", "DEL SimpleName: attributes"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: nullHandling", "DEL FieldAccess", "DEL Assignment: =", "DEL ExpressionStatement", "DEL ThisExpression"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ThisExpression", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: attributes", "DEL FieldAccess", "DEL SimpleName: costCategory", "DEL SimpleName: getCostCategory"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: attributes", "DEL SimpleName: isNiladic", "DEL SimpleName: isNiladic", "DEL MethodInvocation", "DEL FieldAccess", "DEL Assignment: =", "DEL ThisExpression"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: attributes", "DEL SimpleName: isBinaryCommutative", "DEL MethodInvocation", "DEL Assignment: =", "DEL ThisExpression", "DEL SimpleName: isBinaryCommutative", "DEL FieldAccess", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: attributes", "DEL FieldAccess", "DEL SimpleName: isDeterministic", "DEL SimpleName: isDeterministic", "DEL ThisExpression", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL ExpressionStatement", "DEL ThisExpression", "DEL FieldAccess", "DEL SimpleName: registeredNames"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL FieldAccess", "DEL ExpressionStatement", "DEL SimpleName: workspaceVars", "DEL ThisExpression", "DEL Assignment: ="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL FieldAccess", "DEL SimpleName: parameters", "DEL ExpressionStatement", "DEL ThisExpression"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ThisExpression", "DEL FieldAccess", "DEL Assignment: =", "DEL SimpleName: returnValue", "DEL ExpressionStatement"]}, {"root": "DEL SimpleName: parameters", "operations": ["DEL SimpleName: parameters"]}, {"root": "DEL QualifiedName: workspaceVars.length", "operations": ["DEL QualifiedName: workspaceVars.length"]}, {"root": "DEL QualifiedName: workspaceVars.length", "operations": ["DEL QualifiedName: workspaceVars.length"]}, {"root": "DEL SimpleName: workspaceVars", "operations": ["DEL SimpleName: workspaceVars"]}, {"root": "DEL QualifiedName: ref.type", "operations": ["DEL QualifiedName: ref.type"]}, {"root": "DEL QualifiedName: ref.type", "operations": ["DEL QualifiedName: ref.type"]}, {"root": "DEL SimpleName: registeredNames", "operations": ["DEL SimpleName: registeredNames"]}, {"root": "DEL SimpleName: registeredNames", "operations": ["DEL SimpleName: registeredNames"]}, {"root": "DEL SimpleName: parameters", "operations": ["DEL SimpleName: parameters"]}, {"root": "DEL QualifiedName: parameter.isFieldReader", "operations": ["DEL QualifiedName: parameter.isFieldReader"]}, {"root": "DEL QualifiedName: parameter.name", "operations": ["DEL QualifiedName: parameter.name"]}, {"root": "DEL QualifiedName: parameter.name", "operations": ["DEL QualifiedName: parameter.name"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: workspaceVars", "DEL SimpleName: type", "DEL FieldAccess", "DEL ArrayAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL ArrayAccess", "DEL SimpleName: name", "DEL SimpleName: workspaceVars", "DEL FieldAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL SimpleName: workspaceVars", "DEL SimpleName: type", "DEL ArrayAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: name", "DEL SimpleName: workspaceVars", "DEL FieldAccess", "DEL ArrayAccess"]}, {"root": "DEL QualifiedName: returnValue.type", "operations": ["DEL QualifiedName: returnValue.type"]}, {"root": "DEL QualifiedName: parameters.length", "operations": ["DEL QualifiedName: parameters.length"]}, {"root": "DEL QualifiedName: parameters.length", "operations": ["DEL QualifiedName: parameters.length"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: parameters", "DEL SimpleName: type", "DEL ArrayAccess", "DEL FieldAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL ArrayAccess", "DEL SimpleName: type", "DEL SimpleName: parameters", "DEL FieldAccess", "DEL FieldAccess", "DEL ThisExpression"]}, {"root": "DEL FieldAccess", "operations": ["DEL ThisExpression", "DEL SimpleName: parameters", "DEL FieldAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: parameters", "DEL SimpleName: isConstant", "DEL FieldAccess", "DEL ThisExpression", "DEL FieldAccess", "DEL ArrayAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL ArrayAccess", "DEL FieldAccess", "DEL ThisExpression", "DEL SimpleName: parameters", "DEL FieldAccess", "DEL SimpleName: isFieldReader"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL QualifiedName: NullHandling.NULL_IF_NULL", "DEL SimpleName: ref", "DEL SimpleName: newHashSet", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleType: LogicalExpression", "DEL Block", "DEL MethodInvocation", "DEL QualifiedName: MinorType.UNION", "DEL QualifiedName: TypeProtos.DataMode.OPTIONAL", "DEL SimpleName: subTypes", "DEL EnhancedForStatement", "DEL MethodInvocation", "DEL SimpleName: subType", "DEL MethodInvocation", "DEL Block", "DEL QualifiedName: MajorType.Builder", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleType: MajorType.Builder", "DEL SingleVariableDeclaration", "DEL SimpleName: builder", "DEL SimpleName: logicalExpressions", "DEL SimpleName: nullHandling", "DEL SimpleName: logicalExpression", "DEL SimpleName: getMode", "DEL Block", "DEL SimpleName: build", "DEL InfixExpression: ==", "DEL EnhancedForStatement", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: add", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL Block", "DEL Modifier: final", "DEL QualifiedName: returnValue.type", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL SimpleType: MinorType", "DEL SimpleType: MinorType", "DEL SimpleName: setMinorType", "DEL QualifiedName: returnValue.type", "DEL Modifier: final", "DEL SimpleType: Set", "DEL ExpressionStatement", "DEL Block", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: MinorType", "DEL SimpleName: parameters", "DEL InfixExpression: ==", "DEL SimpleName: builder", "DEL IfStatement", "DEL Modifier: final", "DEL InfixExpression: ==", "DEL SimpleName: MinorType", "DEL VariableDeclarationFragment", "DEL SimpleName: getMinorType", "DEL EnhancedForStatement", "DEL ParameterizedType: Set<MinorType>", "DEL QualifiedName: MinorType.UNION", "DEL SimpleName: Set", "DEL QualifiedName: DataMode.OPTIONAL", "DEL ReturnStatement", "DEL IfStatement", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: newBuilder", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: LogicalExpression", "DEL SimpleName: subTypes"]}, {"root": "DEL SimpleName: optional", "operations": ["DEL SimpleName: optional"]}, {"root": "DEL MethodInvocation", "operations": ["DEL QualifiedName: returnValue.type", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: registeredNames", "operations": ["DEL SimpleName: registeredNames"]}, {"root": "DEL QualifiedName: returnValue.type", "operations": ["DEL QualifiedName: returnValue.type"]}, {"root": "DEL SimpleName: nullHandling", "operations": ["DEL SimpleName: nullHandling"]}, {"root": "DEL SimpleName: parameters", "operations": ["DEL SimpleName: parameters"]}, {"root": "DEL QualifiedName: parameters.length", "operations": ["DEL QualifiedName: parameters.length"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ThisExpression", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: getWorkspaceVars", "DEL FieldAccess", "DEL SimpleName: workspaceVars", "DEL Modifier: public", "DEL MethodDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: parameters", "DEL SimpleName: getParameters", "DEL ThisExpression", "DEL FieldAccess", "DEL Block", "DEL MethodDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: Preconditions", "DEL StringLiteral: \"ValueReference [type=\"", "DEL SimpleName: MajorType", "DEL SimpleType: ValueReference", "DEL ReturnStatement", "DEL ThisExpression", "DEL Modifier: static", "DEL SimpleName: type", "DEL PrimitiveType: boolean", "DEL SimpleName: Types", "DEL VariableDeclarationFragment", "DEL Block", "DEL MarkerAnnotation", "DEL SimpleName: toString", "DEL SimpleName: type", "DEL MethodDeclaration", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: isConstant", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: required", "DEL SimpleName: type", "DEL MethodInvocation", "DEL SimpleName: name", "DEL BooleanLiteral: true", "DEL BooleanLiteral: false", "DEL SimpleName: name", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL PrimitiveType: boolean", "DEL SimpleName: String", "DEL SimpleType: MajorType", "DEL SimpleName: name", "DEL SimpleName: createComplexWriterRef", "DEL SimpleName: String", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: isFieldReader", "DEL SimpleName: getType", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: name", "DEL SimpleName: type", "DEL SimpleName: Types", "DEL BooleanLiteral: true", "DEL SimpleType: ValueReference", "DEL SimpleType: String", "DEL FieldDeclaration", "DEL SimpleType: MajorType", "DEL SimpleName: toString", "DEL MethodDeclaration", "DEL FieldAccess", "DEL FieldAccess", "DEL SingleVariableDeclaration", "DEL SimpleName: createFieldReaderRef", "DEL MethodInvocation", "DEL SimpleName: setConstant", "DEL SimpleName: isComplexWriter", "DEL QualifiedName: MinorType.LATE", "DEL Modifier: public", "DEL QualifiedName: ref.isFieldReader", "DEL SimpleName: name", "DEL SimpleName: required", "DEL SimpleName: MajorType", "DEL ReturnStatement", "DEL SimpleName: MajorType", "DEL SimpleName: type", "DEL SimpleName: name", "DEL BooleanLiteral: false", "DEL SimpleType: ValueReference", "DEL SimpleName: name", "DEL SimpleName: ValueReference", "DEL SimpleName: checkNotNull", "DEL MethodDeclaration", "DEL QualifiedName: MinorType.LATE", "DEL ExpressionStatement", "DEL Modifier: public", "DEL StringLiteral: \"]\"", "DEL VariableDeclarationFragment", "DEL TypeDeclaration: class", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL SimpleName: type", "DEL SimpleType: ValueReference", "DEL SimpleName: ref", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: isConstant", "DEL SimpleName: ValueReference", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL Assignment: =", "DEL ExpressionStatement", "DEL Modifier: static", "DEL InfixExpression: +", "DEL Block", "DEL SimpleName: isComplexWriter", "DEL Block", "DEL SimpleName: ref", "DEL ReturnStatement", "DEL SimpleName: name", "DEL SimpleName: type", "DEL Block", "DEL PrimitiveType: boolean", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL SimpleType: String", "DEL Block", "DEL SimpleType: String", "DEL SimpleName: type", "DEL SimpleName: type", "DEL ReturnStatement", "DEL Modifier: public", "DEL SimpleName: name", "DEL SimpleType: MajorType", "DEL PrimitiveType: boolean", "DEL MethodDeclaration", "DEL SimpleName: MajorType", "DEL SimpleName: ref", "DEL SimpleName: type", "DEL SimpleType: ValueReference", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: name", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL QualifiedName: ref.isComplexWriter", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL StringLiteral: \", name=\"", "DEL ThisExpression", "DEL Block", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: ref", "DEL FieldDeclaration", "DEL SimpleName: isComplexWriter", "DEL SimpleName: Preconditions", "DEL SimpleName: ValueReference", "DEL SimpleName: ValueReference", "DEL BooleanLiteral: false", "DEL SuperConstructorInvocation", "DEL ExpressionStatement", "DEL SimpleName: Types", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL FieldAccess", "DEL SimpleType: String", "DEL SimpleType: MajorType", "DEL SimpleType: ValueReference", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: isConstant", "DEL SimpleType: String", "DEL SimpleName: type", "DEL Modifier: public", "DEL SimpleName: String", "DEL SimpleName: String", "DEL SimpleName: ValueReference", "DEL SimpleName: ValueReference", "DEL VariableDeclarationFragment", "DEL SimpleName: getName", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL ThisExpression", "DEL SimpleName: isConstant", "DEL SimpleName: ValueReference", "DEL PrimitiveType: void", "DEL Modifier: public", "DEL SimpleName: ValueReference", "DEL Modifier: public", "DEL SimpleName: checkNotNull", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL Modifier: static", "DEL ClassInstanceCreation", "DEL SimpleName: name"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: name", "DEL SimpleType: Class", "DEL ReturnStatement", "DEL SimpleName: majorType", "DEL Modifier: static", "DEL SimpleName: String", "DEL SimpleName: majorType", "DEL SimpleName: majorType", "DEL SuperConstructorInvocation", "DEL SimpleName: Class", "DEL WildcardType: ?", "DEL SingleVariableDeclaration", "DEL SimpleName: isInject", "DEL SimpleName: type", "DEL SimpleName: name", "DEL SimpleName: type", "DEL ParameterizedType: Class<?>", "DEL ExpressionStatement", "DEL SimpleName: setMajorType", "DEL SimpleName: type", "DEL PrimitiveType: boolean", "DEL WildcardType: ?", "DEL SimpleName: WorkspaceReference", "DEL WildcardType: ?", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL Assignment: =", "DEL SimpleName: name", "DEL SimpleName: type", "DEL SingleVariableDeclaration", "DEL FieldAccess", "DEL FieldDeclaration", "DEL SimpleName: name", "DEL Modifier: public", "DEL Modifier: public", "DEL SimpleType: MajorType", "DEL SimpleName: MajorType", "DEL MethodDeclaration", "DEL SimpleName: Preconditions", "DEL SimpleName: Class", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleType: Class", "DEL SimpleType: String", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleName: getName", "DEL SimpleName: checkNotNull", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: name", "DEL TypeDeclaration: class", "DEL ReturnStatement", "DEL SimpleName: getType", "DEL VariableDeclarationFragment", "DEL SimpleName: inject", "DEL SimpleName: checkNotNull", "DEL Modifier: public", "DEL Block", "DEL Block", "DEL MethodDeclaration", "DEL Modifier: public", "DEL Block", "DEL SimpleName: inject", "DEL SimpleName: WorkspaceReference", "DEL SimpleType: Class", "DEL MethodDeclaration", "DEL Assignment: =", "DEL Modifier: public", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL FieldAccess", "DEL SimpleName: inject", "DEL PrimitiveType: void", "DEL FieldDeclaration", "DEL Block", "DEL ParameterizedType: Class<?>", "DEL FieldAccess", "DEL SimpleName: Class", "DEL Assignment: =", "DEL SimpleName: majorType", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL ThisExpression", "DEL ExpressionStatement", "DEL SimpleName: type", "DEL FieldAccess", "DEL SimpleName: Preconditions", "DEL SimpleName: inject", "DEL PrimitiveType: boolean", "DEL SimpleName: MajorType", "DEL FieldDeclaration", "DEL SimpleName: name", "DEL Block", "DEL SingleVariableDeclaration", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleType: MajorType", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL Assignment: =", "DEL ThisExpression", "DEL ThisExpression", "DEL ParameterizedType: Class<?>", "DEL SimpleName: type", "DEL SimpleName: inject", "DEL SimpleType: String"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL Modifier: public", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL SimpleName: checkPrecisionRange", "DEL Block", "DEL BooleanLiteral: false"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: getReturnType", "DEL Modifier: public", "DEL QualifiedName: returnValue.type", "DEL ReturnStatement", "DEL Block", "DEL SimpleType: MajorType", "DEL SimpleName: MajorType", "DEL MethodDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: ValueReference", "DEL Modifier: public", "DEL SimpleName: ValueReference", "DEL Block", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: getReturnValue", "DEL SimpleName: returnValue"]}]}}, {"DrillFuncHolder_diff": {"operations": ["Insert MethodDeclaration(1173) into TypeDeclaration: class(1354) at 28", "Insert MethodDeclaration(1241) into TypeDeclaration: class(1354) at 33", "Insert MethodDeclaration(1250) into TypeDeclaration: class(1354) at 34", "Insert MethodDeclaration(1262) into TypeDeclaration: class(1354) at 35", "Insert MethodDeclaration(1272) into TypeDeclaration: class(1354) at 36", "Insert MethodDeclaration(1284) into TypeDeclaration: class(1354) at 37", "Move MarkerAnnotation(1237) into MethodDeclaration(1106) at 0", "Move MarkerAnnotation(1218) into MethodDeclaration(1119) at 0", "Move SingleVariableDeclaration(1270) into MethodDeclaration(1135) at 3", "Move SingleVariableDeclaration(1254) into MethodDeclaration(1151) at 3", "Move Modifier: public(1281) into MethodDeclaration(1173) at 0", "Move SimpleType: MajorType(1283) into MethodDeclaration(1173) at 1", "Move SimpleName: getReturnType(1284) into MethodDeclaration(1173) at 2", "Move SingleVariableDeclaration(1292) into MethodDeclaration(1173) at 3", "Insert Block(1172) into MethodDeclaration(1173) at 4", "Insert Modifier: public(1230) into MethodDeclaration(1241) at 0", "Move ArrayType: ValueReference[](1519) into MethodDeclaration(1241) at 1", "Insert SimpleName: getParameters(1235) into MethodDeclaration(1241) at 2", "Insert Block(1240) into MethodDeclaration(1241) at 3", "Insert Modifier: public(1242) into MethodDeclaration(1250) at 0", "Insert PrimitiveType: boolean(1243) into MethodDeclaration(1250) at 1", "Insert SimpleName: checkPrecisionRange(1244) into MethodDeclaration(1250) at 2", "Insert Block(1249) into MethodDeclaration(1250) at 3", "Insert Modifier: public(1251) into MethodDeclaration(1262) at 0", "Move SimpleType: MajorType(1592) into MethodDeclaration(1262) at 1", "Insert SimpleName: getReturnType(1254) into MethodDeclaration(1262) at 2", "Insert Block(1261) into MethodDeclaration(1262) at 3", "Insert Modifier: public(1263) into MethodDeclaration(1272) at 0", "Move SimpleType: ValueReference(1312) into MethodDeclaration(1272) at 1", "Insert SimpleName: getReturnValue(1266) into MethodDeclaration(1272) at 2", "Insert Block(1271) into MethodDeclaration(1272) at 3", "Insert Modifier: public(1273) into MethodDeclaration(1284) at 0", "Move ArrayType: WorkspaceReference[](1507) into MethodDeclaration(1284) at 1", "Insert SimpleName: getWorkspaceVars(1278) into MethodDeclaration(1284) at 2", "Insert Block(1283) into MethodDeclaration(1284) at 3", "Insert ReturnStatement(1171) into Block(1172) at 0", "Insert ReturnStatement(1239) into Block(1240) at 0", "Insert ReturnStatement(1248) into Block(1249) at 0", "Insert ReturnStatement(1260) into Block(1261) at 0", "Insert ReturnStatement(1270) into Block(1271) at 0", "Move ReturnStatement(1383) into Block(1283) at 0", "Move MethodInvocation(270) into EnhancedForStatement(387) at 1", "Move ArrayType: JVar[](614) into VariableDeclarationStatement(445) at 0", "Insert MethodInvocation(1103) into ReturnStatement(1104) at 0", "Insert MethodInvocation(1132) into ReturnStatement(1133) at 0", "Insert MethodInvocation(1148) into ReturnStatement(1149) at 0", "Insert MethodInvocation(1170) into ReturnStatement(1171) at 0", "Insert MethodInvocation(1238) into ReturnStatement(1239) at 0", "Insert MethodInvocation(1247) into ReturnStatement(1248) at 0", "Insert MethodInvocation(1259) into ReturnStatement(1260) at 0", "Insert MethodInvocation(1269) into ReturnStatement(1270) at 0", "Insert FieldAccess(456) into InfixExpression: <(457) at 1", "Insert FieldAccess(1044) into InfixExpression: !=(1045) at 1", "Insert FieldAccess(1060) into InfixExpression: <(1061) at 1", "Insert ArrayAccess(1101) into MethodInvocation(1103) at 0", "Insert SimpleName: getType(1102) into MethodInvocation(1103) at 1", "Insert MethodInvocation(1114) into FieldAccess(1116) at 0", "Insert ArrayAccess(1130) into MethodInvocation(1132) at 0", "Insert SimpleName: isConstant(1131) into MethodInvocation(1132) at 1", "Insert ArrayAccess(1146) into MethodInvocation(1148) at 0", "Insert SimpleName: isFieldReader(1147) into MethodInvocation(1148) at 1", "Insert MethodInvocation(1166) into MethodInvocation(1170) at 0", "Insert SimpleName: getType(1167) into MethodInvocation(1170) at 1", "Insert SimpleName: logicalExpressions(1168) into MethodInvocation(1170) at 2", "Update SimpleName: Sets(1305) to attributes", "Move SimpleName: Sets(1305) into MethodInvocation(1170) at 3", "Update SimpleName: subTypes(1316) to attributes", "Move SimpleName: subTypes(1316) into MethodInvocation(1238) at 0", "Update SimpleName: getType(1319) to getParameters", "Move SimpleName: getType(1319) into MethodInvocation(1238) at 1", "Update SimpleName: MajorType(1331) to attributes", "Move SimpleName: MajorType(1331) into MethodInvocation(1247) at 0", "Update SimpleName: setMode(1337) to checkPrecisionRange", "Move SimpleName: setMode(1337) into MethodInvocation(1247) at 1", "Insert MethodInvocation(1257) into MethodInvocation(1259) at 0", "Update SimpleName: subType(1350) to getType", "Move SimpleName: subType(1350) into MethodInvocation(1259) at 1", "Update SimpleName: logicalExpression(1370) to attributes", "Move SimpleName: logicalExpression(1370) into MethodInvocation(1269) at 0", "Update SimpleName: getMajorType(1371) to getReturnValue", "Move SimpleName: getMajorType(1371) into MethodInvocation(1269) at 1", "Update SimpleName: Types(1377) to attributes", "Update SimpleName: getMinorType(1380) to getWorkspaceVars", "Move SimpleName: getMinorType(1380) into MethodInvocation(1281) at 1", "Move MethodInvocation(214) into InfixExpression: +(1350) at 6", "Move ArrayType: JVar[](609) into ArrayCreation(443) at 0", "Insert FieldAccess(442) into ArrayCreation(443) at 1", "Insert MethodInvocation(454) into FieldAccess(456) at 0", "Insert SimpleName: length(455) into FieldAccess(456) at 1", "Insert MethodInvocation(1030) into MethodInvocation(1031) at 2", "Insert MethodInvocation(1042) into FieldAccess(1044) at 0", "Insert SimpleName: length(1043) into FieldAccess(1044) at 1", "Insert MethodInvocation(1058) into FieldAccess(1060) at 0", "Insert SimpleName: length(1059) into FieldAccess(1060) at 1", "Insert MethodInvocation(1099) into ArrayAccess(1101) at 0", "Move SimpleName: i(1229) into ArrayAccess(1101) at 1", "Insert SimpleName: attributes(1112) into MethodInvocation(1114) at 0", "Insert SimpleName: getParameters(1113) into MethodInvocation(1114) at 1", "Insert MethodInvocation(1128) into ArrayAccess(1130) at 0", "Move SimpleName: i(1258) into ArrayAccess(1130) at 1", "Insert MethodInvocation(1144) into ArrayAccess(1146) at 0", "Move SimpleName: i(1274) into ArrayAccess(1146) at 1", "Insert SimpleName: attributes(1164) into MethodInvocation(1166) at 0", "Update SimpleName: getMinorType(1294) to getReturnType", "Move SimpleName: getMinorType(1294) into MethodInvocation(1166) at 1", "Update SimpleName: builder(1348) to attributes", "Move SimpleName: builder(1348) into MethodInvocation(1257) at 0", "Update SimpleName: addSubType(1349) to getReturnValue", "Move SimpleName: addSubType(1349) into MethodInvocation(1257) at 1", "Move MethodInvocation(254) into MethodInvocation(1308) at 2", "Insert MethodInvocation(1316) into MethodInvocation(1317) at 2", "Move MethodInvocation(262) into FieldAccess(442) at 0", "Insert SimpleName: length(441) into FieldAccess(442) at 1", "Insert SimpleName: attributes(452) into MethodInvocation(454) at 0", "Insert SimpleName: getWorkspaceVars(453) into MethodInvocation(454) at 1", "Move MethodInvocation(1320) into MethodInvocation(488) at 2", "Move MethodInvocation(859) into MethodInvocation(685) at 0", "Move MethodInvocation(834) into MethodInvocation(712) at 0", "Move MethodInvocation(278) into MethodInvocation(1030) at 0", "Insert SimpleName: getType(1029) into MethodInvocation(1030) at 1", "Insert SimpleName: attributes(1040) into MethodInvocation(1042) at 0", "Insert SimpleName: getParameters(1041) into MethodInvocation(1042) at 1", "Insert SimpleName: attributes(1056) into MethodInvocation(1058) at 0", "Insert SimpleName: getParameters(1057) into MethodInvocation(1058) at 1", "Insert SimpleName: attributes(1097) into MethodInvocation(1099) at 0", "Insert SimpleName: getParameters(1098) into MethodInvocation(1099) at 1", "Insert SimpleName: attributes(1126) into MethodInvocation(1128) at 0", "Insert SimpleName: getParameters(1127) into MethodInvocation(1128) at 1", "Insert SimpleName: attributes(1142) into MethodInvocation(1144) at 0", "Insert SimpleName: getParameters(1143) into MethodInvocation(1144) at 1", "Insert MethodInvocation(1314) into MethodInvocation(1316) at 0", "Insert SimpleName: getType(1315) into MethodInvocation(1316) at 1", "Insert MethodInvocation(465) into ArrayAccess(467) at 0", "Insert MethodInvocation(479) into MethodInvocation(480) at 2", "Insert SimpleName: getType(486) into MethodInvocation(487) at 1", "Move MethodInvocation(866) into MethodInvocation(684) at 3", "Move MethodInvocation(841) into MethodInvocation(711) at 3", "Insert MethodInvocation(1071) into MethodInvocation(1076) at 1", "Insert SimpleName: attributes(1312) into MethodInvocation(1314) at 0", "Insert SimpleName: getReturnValue(1313) into MethodInvocation(1314) at 1", "Insert MethodInvocation(1325) into InfixExpression: !=(1327) at 0", "Insert SimpleName: attributes(463) into MethodInvocation(465) at 0", "Insert SimpleName: getWorkspaceVars(464) into MethodInvocation(465) at 1", "Insert SimpleName: ref(477) into MethodInvocation(479) at 0", "Insert SimpleName: getType(478) into MethodInvocation(479) at 1", "Insert MethodInvocation(681) into ArrayAccess(683) at 0", "Insert MethodInvocation(708) into ArrayAccess(710) at 0", "Insert MethodInvocation(794) into InfixExpression: &&(811) at 0", "Move ArrayAccess(1091) into Assignment: =(939) at 0", "Move ArrayAccess(1064) into Assignment: =(970) at 0", "Insert ArrayAccess(1069) into MethodInvocation(1071) at 0", "Insert SimpleName: getType(1070) into MethodInvocation(1071) at 1", "Insert SimpleName: attributes(1323) into MethodInvocation(1325) at 0", "Insert SimpleName: getParameters(1324) into MethodInvocation(1325) at 1", "Insert MethodInvocation(1332) into MethodInvocation(1333) at 2", "Insert FieldAccess(1342) into MethodInvocation(1344) at 2", "Insert SimpleName: attributes(679) into MethodInvocation(681) at 0", "Insert SimpleName: getRegisteredNames(680) into MethodInvocation(681) at 1", "Insert SimpleName: attributes(706) into MethodInvocation(708) at 0", "Insert SimpleName: getRegisteredNames(707) into MethodInvocation(708) at 1", "Insert MethodInvocation(779) into ArrayAccess(781) at 0", "Insert SimpleName: parameter(792) into MethodInvocation(794) at 0", "Insert SimpleName: isFieldReader(793) into MethodInvocation(794) at 1", "Insert MethodInvocation(934) into MethodInvocation(938) at 3", "Move ArrayAccess(1111) into MethodInvocation(938) at 4", "Insert MethodInvocation(965) into MethodInvocation(969) at 3", "Move ArrayAccess(1084) into MethodInvocation(969) at 4", "Insert MethodInvocation(1067) into ArrayAccess(1069) at 0", "Move SimpleName: i(1197) into ArrayAccess(1069) at 1", "Insert SimpleName: attributes(1330) into MethodInvocation(1332) at 0", "Update SimpleName: parameters(1485) to getParameters", "Move SimpleName: parameters(1485) into MethodInvocation(1332) at 1", "Insert MethodInvocation(1340) into FieldAccess(1342) at 0", "Insert SimpleName: length(1341) into FieldAccess(1342) at 1", "Insert SimpleName: attributes(777) into MethodInvocation(779) at 0", "Insert SimpleName: getParameters(778) into MethodInvocation(779) at 1", "Insert MethodInvocation(853) into MethodInvocation(863) at 3", "Insert MethodInvocation(875) into MethodInvocation(879) at 3", "Move MethodInvocation(1096) into MethodInvocation(927) at 0", "Insert MethodInvocation(926) into MethodInvocation(927) at 2", "Insert ArrayAccess(932) into MethodInvocation(934) at 0", "Insert SimpleName: getName(933) into MethodInvocation(934) at 1", "Move MethodInvocation(1069) into MethodInvocation(958) at 0", "Insert MethodInvocation(957) into MethodInvocation(958) at 2", "Insert ArrayAccess(963) into MethodInvocation(965) at 0", "Insert SimpleName: getName(964) into MethodInvocation(965) at 1", "Insert SimpleName: attributes(1065) into MethodInvocation(1067) at 0", "Insert SimpleName: getParameters(1066) into MethodInvocation(1067) at 1", "Insert SimpleName: attributes(1338) into MethodInvocation(1340) at 0", "Insert SimpleName: getParameters(1339) into MethodInvocation(1340) at 1", "Insert SimpleName: parameter(851) into MethodInvocation(853) at 0", "Insert SimpleName: getName(852) into MethodInvocation(853) at 1", "Insert SimpleName: parameter(873) into MethodInvocation(875) at 0", "Insert SimpleName: getName(874) into MethodInvocation(875) at 1", "Insert ArrayAccess(924) into MethodInvocation(926) at 0", "Insert SimpleName: getType(925) into MethodInvocation(926) at 1", "Insert MethodInvocation(930) into ArrayAccess(932) at 0", "Move SimpleName: i(1078) into ArrayAccess(932) at 1", "Insert ArrayAccess(955) into MethodInvocation(957) at 0", "Insert SimpleName: getType(956) into MethodInvocation(957) at 1", "Insert MethodInvocation(961) into ArrayAccess(963) at 0", "Move SimpleName: i(1105) into ArrayAccess(963) at 1", "Insert MethodInvocation(922) into ArrayAccess(924) at 0", "Move SimpleName: i(1072) into ArrayAccess(924) at 1", "Insert SimpleName: attributes(928) into MethodInvocation(930) at 0", "Insert SimpleName: getWorkspaceVars(929) into MethodInvocation(930) at 1", "Insert MethodInvocation(953) into ArrayAccess(955) at 0", "Move SimpleName: i(1099) into ArrayAccess(955) at 1", "Insert SimpleName: attributes(959) into MethodInvocation(961) at 0", "Insert SimpleName: getWorkspaceVars(960) into MethodInvocation(961) at 1", "Insert SimpleName: attributes(920) into MethodInvocation(922) at 0", "Insert SimpleName: getWorkspaceVars(921) into MethodInvocation(922) at 1", "Insert SimpleName: attributes(951) into MethodInvocation(953) at 0", "Insert SimpleName: getWorkspaceVars(952) into MethodInvocation(953) at 1", "Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: java.util.Set(21)", "Delete ImportDeclaration(22)", "Delete QualifiedName: com.google.common.collect.Sets(23)", "Delete ImportDeclaration(24)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos(35)", "Delete ImportDeclaration(36)", "Delete QualifiedName: org.apache.drill.common.types.TypeProtos.DataMode(37)", "Delete ImportDeclaration(38)", "Delete QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate(59)", "Delete ImportDeclaration(60)", "Delete Modifier: protected(104)", "Delete Modifier: final(105)", "Delete QualifiedName: FunctionTemplate.FunctionScope(106)", "Delete SimpleType: FunctionTemplate.FunctionScope(107)", "Delete SimpleName: scope(108)", "Delete VariableDeclarationFragment(109)", "Delete FieldDeclaration(110)", "Delete Modifier: protected(111)", "Delete Modifier: final(112)", "Delete QualifiedName: FunctionTemplate.NullHandling(113)", "Delete SimpleType: FunctionTemplate.NullHandling(114)", "Delete SimpleName: nullHandling(115)", "Delete VariableDeclarationFragment(116)", "Delete FieldDeclaration(117)", "Delete Modifier: protected(118)", "Delete Modifier: final(119)", "Delete QualifiedName: FunctionTemplate.FunctionCostCategory(120)", "Delete SimpleType: FunctionTemplate.FunctionCostCategory(121)", "Delete SimpleName: costCategory(122)", "Delete VariableDeclarationFragment(123)", "Delete FieldDeclaration(124)", "Delete Modifier: protected(125)", "Delete Modifier: final(126)", "Delete PrimitiveType: boolean(127)", "Delete SimpleName: isNiladic(128)", "Delete VariableDeclarationFragment(129)", "Delete FieldDeclaration(130)", "Delete Modifier: protected(131)", "Delete Modifier: final(132)", "Delete PrimitiveType: boolean(133)", "Delete SimpleName: isBinaryCommutative(134)", "Delete VariableDeclarationFragment(135)", "Delete FieldDeclaration(136)", "Delete Modifier: protected(137)", "Delete Modifier: final(138)", "Delete PrimitiveType: boolean(139)", "Delete SimpleName: isDeterministic(140)", "Delete VariableDeclarationFragment(141)", "Delete FieldDeclaration(142)", "Delete Modifier: protected(143)", "Delete Modifier: final(144)", "Delete SimpleName: String(145)", "Delete SimpleType: String(146)", "Delete Dimension(147)", "Delete ArrayType: String[](148)", "Delete SimpleName: registeredNames(149)", "Delete VariableDeclarationFragment(150)", "Delete FieldDeclaration(151)", "Delete Modifier: protected(152)", "Delete Modifier: final(153)", "Delete SimpleName: WorkspaceReference(154)", "Delete SimpleType: WorkspaceReference(155)", "Delete Dimension(156)", "Delete ArrayType: WorkspaceReference[](157)", "Delete SimpleName: workspaceVars(158)", "Delete VariableDeclarationFragment(159)", "Delete FieldDeclaration(160)", "Delete Modifier: protected(161)", "Delete Modifier: final(162)", "Delete SimpleName: ValueReference(163)", "Delete SimpleType: ValueReference(164)", "Delete Dimension(165)", "Delete ArrayType: ValueReference[](166)", "Delete SimpleName: parameters(167)", "Delete VariableDeclarationFragment(168)", "Delete FieldDeclaration(169)", "Delete Modifier: protected(170)", "Delete Modifier: final(171)", "Delete SimpleName: ValueReference(172)", "Delete SimpleType: ValueReference(173)", "Delete SimpleName: returnValue(174)", "Delete VariableDeclarationFragment(175)", "Delete FieldDeclaration(176)", "Delete SuperConstructorInvocation(194)", "Delete ThisExpression(201)", "Delete SimpleName: scope(202)", "Delete FieldAccess(203)", "Delete SimpleName: attributes(204)", "Delete SimpleName: getScope(205)", "Delete MethodInvocation(206)", "Delete Assignment: =(207)", "Delete ExpressionStatement(208)", "Delete ThisExpression(209)", "Delete SimpleName: nullHandling(210)", "Delete FieldAccess(211)", "Delete Assignment: =(215)", "Delete ExpressionStatement(216)", "Delete ThisExpression(217)", "Delete SimpleName: costCategory(218)", "Delete FieldAccess(219)", "Delete SimpleName: attributes(220)", "Delete SimpleName: getCostCategory(221)", "Delete MethodInvocation(222)", "Delete Assignment: =(223)", "Delete ExpressionStatement(224)", "Delete ThisExpression(225)", "Delete SimpleName: isNiladic(226)", "Delete FieldAccess(227)", "Delete SimpleName: attributes(228)", "Delete SimpleName: isNiladic(229)", "Delete MethodInvocation(230)", "Delete Assignment: =(231)", "Delete ExpressionStatement(232)", "Delete ThisExpression(233)", "Delete SimpleName: isBinaryCommutative(234)", "Delete FieldAccess(235)", "Delete SimpleName: attributes(236)", "Delete SimpleName: isBinaryCommutative(237)", "Delete MethodInvocation(238)", "Delete Assignment: =(239)", "Delete ExpressionStatement(240)", "Delete ThisExpression(241)", "Delete SimpleName: isDeterministic(242)", "Delete FieldAccess(243)", "Delete SimpleName: attributes(244)", "Delete SimpleName: isDeterministic(245)", "Delete MethodInvocation(246)", "Delete Assignment: =(247)", "Delete ExpressionStatement(248)", "Delete ThisExpression(249)", "Delete SimpleName: registeredNames(250)", "Delete FieldAccess(251)", "Delete Assignment: =(255)", "Delete ExpressionStatement(256)", "Delete ThisExpression(257)", "Delete SimpleName: workspaceVars(258)", "Delete FieldAccess(259)", "Delete Assignment: =(263)", "Delete ExpressionStatement(264)", "Delete ThisExpression(265)", "Delete SimpleName: parameters(266)", "Delete FieldAccess(267)", "Delete Assignment: =(271)", "Delete ExpressionStatement(272)", "Delete ThisExpression(273)", "Delete SimpleName: returnValue(274)", "Delete FieldAccess(275)", "Delete Assignment: =(279)", "Delete ExpressionStatement(280)", "Delete SimpleName: parameters(525)", "Delete QualifiedName: workspaceVars.length(615)", "Delete QualifiedName: workspaceVars.length(625)", "Delete SimpleName: workspaceVars(632)", "Delete QualifiedName: ref.type(644)", "Delete QualifiedName: ref.type(650)", "Delete SimpleName: registeredNames(842)", "Delete SimpleName: registeredNames(867)", "Delete SimpleName: parameters(936)", "Delete QualifiedName: parameter.isFieldReader(949)", "Delete QualifiedName: parameter.name(1006)", "Delete QualifiedName: parameter.name(1026)", "Delete SimpleName: workspaceVars(1071)", "Delete ArrayAccess(1073)", "Delete SimpleName: type(1074)", "Delete FieldAccess(1075)", "Delete SimpleName: workspaceVars(1077)", "Delete ArrayAccess(1079)", "Delete SimpleName: name(1080)", "Delete FieldAccess(1081)", "Delete SimpleName: workspaceVars(1098)", "Delete ArrayAccess(1100)", "Delete SimpleName: type(1101)", "Delete FieldAccess(1102)", "Delete SimpleName: workspaceVars(1104)", "Delete ArrayAccess(1106)", "Delete SimpleName: name(1107)", "Delete FieldAccess(1108)", "Delete QualifiedName: returnValue.type(1169)", "Delete QualifiedName: parameters.length(1179)", "Delete QualifiedName: parameters.length(1191)", "Delete SimpleName: parameters(1196)", "Delete ArrayAccess(1198)", "Delete SimpleName: type(1199)", "Delete FieldAccess(1200)", "Delete ThisExpression(1226)", "Delete SimpleName: parameters(1227)", "Delete FieldAccess(1228)", "Delete ArrayAccess(1230)", "Delete SimpleName: type(1231)", "Delete FieldAccess(1232)", "Delete ThisExpression(1241)", "Delete SimpleName: parameters(1242)", "Delete FieldAccess(1243)", "Delete ThisExpression(1255)", "Delete SimpleName: parameters(1256)", "Delete FieldAccess(1257)", "Delete ArrayAccess(1259)", "Delete SimpleName: isConstant(1260)", "Delete FieldAccess(1261)", "Delete ThisExpression(1271)", "Delete SimpleName: parameters(1272)", "Delete FieldAccess(1273)", "Delete ArrayAccess(1275)", "Delete SimpleName: isFieldReader(1276)", "Delete FieldAccess(1277)", "Delete QualifiedName: returnValue.type(1293)", "Delete MethodInvocation(1295)", "Delete QualifiedName: MinorType.UNION(1296)", "Delete InfixExpression: ==(1297)", "Delete Modifier: final(1298)", "Delete SimpleName: Set(1299)", "Delete SimpleType: Set(1300)", "Delete SimpleName: MinorType(1301)", "Delete SimpleType: MinorType(1302)", "Delete ParameterizedType: Set<MinorType>(1303)", "Delete SimpleName: subTypes(1304)", "Delete SimpleName: newHashSet(1306)", "Delete MethodInvocation(1307)", "Delete VariableDeclarationFragment(1308)", "Delete VariableDeclarationStatement(1309)", "Delete Modifier: final(1310)", "Delete SimpleName: ref(1313)", "Delete SingleVariableDeclaration(1314)", "Delete SimpleName: parameters(1315)", "Delete SimpleName: add(1317)", "Delete SimpleName: getMinorType(1321)", "Delete MethodInvocation(1322)", "Delete MethodInvocation(1323)", "Delete ExpressionStatement(1324)", "Delete Block(1325)", "Delete EnhancedForStatement(1326)", "Delete Modifier: final(1327)", "Delete QualifiedName: MajorType.Builder(1328)", "Delete SimpleType: MajorType.Builder(1329)", "Delete SimpleName: builder(1330)", "Delete SimpleName: newBuilder(1332)", "Delete MethodInvocation(1333)", "Delete SimpleName: setMinorType(1334)", "Delete QualifiedName: MinorType.UNION(1335)", "Delete MethodInvocation(1336)", "Delete QualifiedName: DataMode.OPTIONAL(1338)", "Delete MethodInvocation(1339)", "Delete VariableDeclarationFragment(1340)", "Delete VariableDeclarationStatement(1341)", "Delete Modifier: final(1342)", "Delete SimpleName: MinorType(1343)", "Delete SimpleType: MinorType(1344)", "Delete SimpleName: subType(1345)", "Delete SingleVariableDeclaration(1346)", "Delete SimpleName: subTypes(1347)", "Delete MethodInvocation(1351)", "Delete ExpressionStatement(1352)", "Delete Block(1353)", "Delete EnhancedForStatement(1354)", "Delete SimpleName: builder(1355)", "Delete SimpleName: build(1356)", "Delete MethodInvocation(1357)", "Delete ReturnStatement(1358)", "Delete Block(1359)", "Delete IfStatement(1360)", "Delete SimpleName: nullHandling(1361)", "Delete QualifiedName: NullHandling.NULL_IF_NULL(1362)", "Delete InfixExpression: ==(1363)", "Delete Modifier: final(1364)", "Delete SimpleName: LogicalExpression(1365)", "Delete SimpleType: LogicalExpression(1366)", "Delete SimpleName: logicalExpression(1367)", "Delete SingleVariableDeclaration(1368)", "Delete SimpleName: logicalExpressions(1369)", "Delete MethodInvocation(1372)", "Delete SimpleName: getMode(1373)", "Delete MethodInvocation(1374)", "Delete QualifiedName: TypeProtos.DataMode.OPTIONAL(1375)", "Delete InfixExpression: ==(1376)", "Delete Block(1384)", "Delete IfStatement(1385)", "Delete Block(1386)", "Delete EnhancedForStatement(1387)", "Delete Block(1388)", "Delete IfStatement(1389)", "Delete QualifiedName: returnValue.type(1390)", "Delete ReturnStatement(1391)", "Delete Block(1392)", "Delete MethodDeclaration(1393)", "Delete SimpleName: optional(1378)", "Delete QualifiedName: returnValue.type(1379)", "Delete MethodInvocation(1381)", "Delete SimpleName: registeredNames(1470)", "Delete QualifiedName: returnValue.type(1475)", "Delete SimpleName: nullHandling(1478)", "Delete SimpleName: parameters(1480)", "Delete QualifiedName: parameters.length(1491)", "Delete Modifier: public(1503)", "Delete SimpleName: getWorkspaceVars(1508)", "Delete ThisExpression(1509)", "Delete SimpleName: workspaceVars(1510)", "Delete FieldAccess(1511)", "Delete ReturnStatement(1512)", "Delete Block(1513)", "Delete MethodDeclaration(1514)", "Delete Modifier: public(1515)", "Delete SimpleName: getParameters(1520)", "Delete ThisExpression(1521)", "Delete SimpleName: parameters(1522)", "Delete FieldAccess(1523)", "Delete ReturnStatement(1524)", "Delete Block(1525)", "Delete MethodDeclaration(1526)", "Delete Modifier: public(1527)", "Delete Modifier: static(1528)", "Delete SimpleName: ValueReference(1529)", "Delete SimpleName: MajorType(1530)", "Delete SimpleType: MajorType(1531)", "Delete SimpleName: type(1532)", "Delete VariableDeclarationFragment(1533)", "Delete FieldDeclaration(1534)", "Delete SimpleName: String(1535)", "Delete SimpleType: String(1536)", "Delete SimpleName: name(1537)", "Delete VariableDeclarationFragment(1538)", "Delete FieldDeclaration(1539)", "Delete PrimitiveType: boolean(1540)", "Delete SimpleName: isConstant(1541)", "Delete BooleanLiteral: false(1542)", "Delete VariableDeclarationFragment(1543)", "Delete FieldDeclaration(1544)", "Delete PrimitiveType: boolean(1545)", "Delete SimpleName: isFieldReader(1546)", "Delete BooleanLiteral: false(1547)", "Delete VariableDeclarationFragment(1548)", "Delete FieldDeclaration(1549)", "Delete PrimitiveType: boolean(1550)", "Delete SimpleName: isComplexWriter(1551)", "Delete BooleanLiteral: false(1552)", "Delete VariableDeclarationFragment(1553)", "Delete FieldDeclaration(1554)", "Delete Modifier: public(1555)", "Delete SimpleName: ValueReference(1556)", "Delete SimpleName: MajorType(1557)", "Delete SimpleType: MajorType(1558)", "Delete SimpleName: type(1559)", "Delete SingleVariableDeclaration(1560)", "Delete SimpleName: String(1561)", "Delete SimpleType: String(1562)", "Delete SimpleName: name(1563)", "Delete SingleVariableDeclaration(1564)", "Delete SuperConstructorInvocation(1565)", "Delete SimpleName: Preconditions(1566)", "Delete SimpleName: checkNotNull(1567)", "Delete SimpleName: type(1568)", "Delete MethodInvocation(1569)", "Delete ExpressionStatement(1570)", "Delete SimpleName: Preconditions(1571)", "Delete SimpleName: checkNotNull(1572)", "Delete SimpleName: name(1573)", "Delete MethodInvocation(1574)", "Delete ExpressionStatement(1575)", "Delete ThisExpression(1576)", "Delete SimpleName: type(1577)", "Delete FieldAccess(1578)", "Delete SimpleName: type(1579)", "Delete Assignment: =(1580)", "Delete ExpressionStatement(1581)", "Delete ThisExpression(1582)", "Delete SimpleName: name(1583)", "Delete FieldAccess(1584)", "Delete SimpleName: name(1585)", "Delete Assignment: =(1586)", "Delete ExpressionStatement(1587)", "Delete Block(1588)", "Delete MethodDeclaration(1589)", "Delete Modifier: public(1590)", "Delete SimpleName: getType(1593)", "Delete SimpleName: type(1594)", "Delete ReturnStatement(1595)", "Delete Block(1596)", "Delete MethodDeclaration(1597)", "Delete Modifier: public(1598)", "Delete SimpleName: String(1599)", "Delete SimpleType: String(1600)", "Delete SimpleName: getName(1601)", "Delete SimpleName: name(1602)", "Delete ReturnStatement(1603)", "Delete Block(1604)", "Delete MethodDeclaration(1605)", "Delete Modifier: public(1606)", "Delete PrimitiveType: void(1607)", "Delete SimpleName: setConstant(1608)", "Delete PrimitiveType: boolean(1609)", "Delete SimpleName: isConstant(1610)", "Delete SingleVariableDeclaration(1611)", "Delete ThisExpression(1612)", "Delete SimpleName: isConstant(1613)", "Delete FieldAccess(1614)", "Delete SimpleName: isConstant(1615)", "Delete Assignment: =(1616)", "Delete ExpressionStatement(1617)", "Delete Block(1618)", "Delete MethodDeclaration(1619)", "Delete SimpleName: Override(1620)", "Delete MarkerAnnotation(1621)", "Delete Modifier: public(1622)", "Delete SimpleName: String(1623)", "Delete SimpleType: String(1624)", "Delete SimpleName: toString(1625)", "Delete StringLiteral: \"ValueReference [type=\"(1626)", "Delete SimpleName: Types(1627)", "Delete SimpleName: toString(1628)", "Delete SimpleName: type(1629)", "Delete MethodInvocation(1630)", "Delete StringLiteral: \", name=\"(1631)", "Delete SimpleName: name(1632)", "Delete StringLiteral: \"]\"(1633)", "Delete InfixExpression: +(1634)", "Delete ReturnStatement(1635)", "Delete Block(1636)", "Delete MethodDeclaration(1637)", "Delete Modifier: public(1638)", "Delete Modifier: static(1639)", "Delete SimpleName: ValueReference(1640)", "Delete SimpleType: ValueReference(1641)", "Delete SimpleName: createFieldReaderRef(1642)", "Delete SimpleName: String(1643)", "Delete SimpleType: String(1644)", "Delete SimpleName: name(1645)", "Delete SingleVariableDeclaration(1646)", "Delete SimpleName: MajorType(1647)", "Delete SimpleType: MajorType(1648)", "Delete SimpleName: type(1649)", "Delete SimpleName: Types(1650)", "Delete SimpleName: required(1651)", "Delete QualifiedName: MinorType.LATE(1652)", "Delete MethodInvocation(1653)", "Delete VariableDeclarationFragment(1654)", "Delete VariableDeclarationStatement(1655)", "Delete SimpleName: ValueReference(1656)", "Delete SimpleType: ValueReference(1657)", "Delete SimpleName: ref(1658)", "Delete SimpleName: ValueReference(1659)", "Delete SimpleType: ValueReference(1660)", "Delete SimpleName: type(1661)", "Delete SimpleName: name(1662)", "Delete ClassInstanceCreation(1663)", "Delete VariableDeclarationFragment(1664)", "Delete VariableDeclarationStatement(1665)", "Delete QualifiedName: ref.isFieldReader(1666)", "Delete BooleanLiteral: true(1667)", "Delete Assignment: =(1668)", "Delete ExpressionStatement(1669)", "Delete SimpleName: ref(1670)", "Delete ReturnStatement(1671)", "Delete Block(1672)", "Delete MethodDeclaration(1673)", "Delete Modifier: public(1674)", "Delete Modifier: static(1675)", "Delete SimpleName: ValueReference(1676)", "Delete SimpleType: ValueReference(1677)", "Delete SimpleName: createComplexWriterRef(1678)", "Delete SimpleName: String(1679)", "Delete SimpleType: String(1680)", "Delete SimpleName: name(1681)", "Delete SingleVariableDeclaration(1682)", "Delete SimpleName: MajorType(1683)", "Delete SimpleType: MajorType(1684)", "Delete SimpleName: type(1685)", "Delete SimpleName: Types(1686)", "Delete SimpleName: required(1687)", "Delete QualifiedName: MinorType.LATE(1688)", "Delete MethodInvocation(1689)", "Delete VariableDeclarationFragment(1690)", "Delete VariableDeclarationStatement(1691)", "Delete SimpleName: ValueReference(1692)", "Delete SimpleType: ValueReference(1693)", "Delete SimpleName: ref(1694)", "Delete SimpleName: ValueReference(1695)", "Delete SimpleType: ValueReference(1696)", "Delete SimpleName: type(1697)", "Delete SimpleName: name(1698)", "Delete ClassInstanceCreation(1699)", "Delete VariableDeclarationFragment(1700)", "Delete VariableDeclarationStatement(1701)", "Delete QualifiedName: ref.isComplexWriter(1702)", "Delete BooleanLiteral: true(1703)", "Delete Assignment: =(1704)", "Delete ExpressionStatement(1705)", "Delete SimpleName: ref(1706)", "Delete ReturnStatement(1707)", "Delete Block(1708)", "Delete MethodDeclaration(1709)", "Delete Modifier: public(1710)", "Delete PrimitiveType: boolean(1711)", "Delete SimpleName: isComplexWriter(1712)", "Delete SimpleName: isComplexWriter(1713)", "Delete ReturnStatement(1714)", "Delete Block(1715)", "Delete MethodDeclaration(1716)", "Delete TypeDeclaration: class(1717)", "Delete Modifier: public(1718)", "Delete Modifier: static(1719)", "Delete SimpleName: WorkspaceReference(1720)", "Delete SimpleName: Class(1721)", "Delete SimpleType: Class(1722)", "Delete WildcardType: ?(1723)", "Delete ParameterizedType: Class<?>(1724)", "Delete SimpleName: type(1725)", "Delete VariableDeclarationFragment(1726)", "Delete FieldDeclaration(1727)", "Delete SimpleName: String(1728)", "Delete SimpleType: String(1729)", "Delete SimpleName: name(1730)", "Delete VariableDeclarationFragment(1731)", "Delete FieldDeclaration(1732)", "Delete SimpleName: MajorType(1733)", "Delete SimpleType: MajorType(1734)", "Delete SimpleName: majorType(1735)", "Delete VariableDeclarationFragment(1736)", "Delete FieldDeclaration(1737)", "Delete PrimitiveType: boolean(1738)", "Delete SimpleName: inject(1739)", "Delete VariableDeclarationFragment(1740)", "Delete FieldDeclaration(1741)", "Delete Modifier: public(1742)", "Delete SimpleName: WorkspaceReference(1743)", "Delete SimpleName: Class(1744)", "Delete SimpleType: Class(1745)", "Delete WildcardType: ?(1746)", "Delete ParameterizedType: Class<?>(1747)", "Delete SimpleName: type(1748)", "Delete SingleVariableDeclaration(1749)", "Delete SimpleName: String(1750)", "Delete SimpleType: String(1751)", "Delete SimpleName: name(1752)", "Delete SingleVariableDeclaration(1753)", "Delete PrimitiveType: boolean(1754)", "Delete SimpleName: inject(1755)", "Delete SingleVariableDeclaration(1756)", "Delete SuperConstructorInvocation(1757)", "Delete SimpleName: Preconditions(1758)", "Delete SimpleName: checkNotNull(1759)", "Delete SimpleName: type(1760)", "Delete MethodInvocation(1761)", "Delete ExpressionStatement(1762)", "Delete SimpleName: Preconditions(1763)", "Delete SimpleName: checkNotNull(1764)", "Delete SimpleName: name(1765)", "Delete MethodInvocation(1766)", "Delete ExpressionStatement(1767)", "Delete ThisExpression(1768)", "Delete SimpleName: type(1769)", "Delete FieldAccess(1770)", "Delete SimpleName: type(1771)", "Delete Assignment: =(1772)", "Delete ExpressionStatement(1773)", "Delete ThisExpression(1774)", "Delete SimpleName: name(1775)", "Delete FieldAccess(1776)", "Delete SimpleName: name(1777)", "Delete Assignment: =(1778)", "Delete ExpressionStatement(1779)", "Delete ThisExpression(1780)", "Delete SimpleName: inject(1781)", "Delete FieldAccess(1782)", "Delete SimpleName: inject(1783)", "Delete Assignment: =(1784)", "Delete ExpressionStatement(1785)", "Delete Block(1786)", "Delete MethodDeclaration(1787)", "Delete PrimitiveType: void(1788)", "Delete SimpleName: setMajorType(1789)", "Delete SimpleName: MajorType(1790)", "Delete SimpleType: MajorType(1791)", "Delete SimpleName: majorType(1792)", "Delete SingleVariableDeclaration(1793)", "Delete ThisExpression(1794)", "Delete SimpleName: majorType(1795)", "Delete FieldAccess(1796)", "Delete SimpleName: majorType(1797)", "Delete Assignment: =(1798)", "Delete ExpressionStatement(1799)", "Delete Block(1800)", "Delete MethodDeclaration(1801)", "Delete Modifier: public(1802)", "Delete PrimitiveType: boolean(1803)", "Delete SimpleName: isInject(1804)", "Delete SimpleName: inject(1805)", "Delete ReturnStatement(1806)", "Delete Block(1807)", "Delete MethodDeclaration(1808)", "Delete Modifier: public(1809)", "Delete SimpleName: Class(1810)", "Delete SimpleType: Class(1811)", "Delete WildcardType: ?(1812)", "Delete ParameterizedType: Class<?>(1813)", "Delete SimpleName: getType(1814)", "Delete SimpleName: type(1815)", "Delete ReturnStatement(1816)", "Delete Block(1817)", "Delete MethodDeclaration(1818)", "Delete Modifier: public(1819)", "Delete SimpleName: String(1820)", "Delete SimpleType: String(1821)", "Delete SimpleName: getName(1822)", "Delete SimpleName: name(1823)", "Delete ReturnStatement(1824)", "Delete Block(1825)", "Delete MethodDeclaration(1826)", "Delete TypeDeclaration: class(1827)", "Delete Modifier: public(1828)", "Delete PrimitiveType: boolean(1829)", "Delete SimpleName: checkPrecisionRange(1830)", "Delete BooleanLiteral: false(1831)", "Delete ReturnStatement(1832)", "Delete Block(1833)", "Delete MethodDeclaration(1834)", "Delete Modifier: public(1835)", "Delete SimpleName: MajorType(1836)", "Delete SimpleType: MajorType(1837)", "Delete SimpleName: getReturnType(1838)", "Delete QualifiedName: returnValue.type(1839)", "Delete ReturnStatement(1840)", "Delete Block(1841)", "Delete MethodDeclaration(1842)", "Delete Modifier: public(1843)", "Delete SimpleName: ValueReference(1844)", "Delete SimpleType: ValueReference(1845)", "Delete SimpleName: getReturnValue(1846)", "Delete SimpleName: returnValue(1847)", "Delete ReturnStatement(1848)", "Delete Block(1849)", "Delete MethodDeclaration(1850)"]}}, {"DrillSimpleFuncHolder_cluster": {"actions": [{"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getReturnType to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to InfixExpression: == at 0", "operations": ["INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: getNullHandling to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 4", "operations": ["INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: getReturnValue to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 4"]}, {"root": "INS MethodInvocation to InfixExpression: && at 0", "operations": ["INS MethodInvocation to InfixExpression: && at 0", "INS SimpleName: isConstant to MethodInvocation at 1", "INS SimpleName: getParameters to MethodInvocation at 0", "INS ArrayAccess to MethodInvocation at 0", "INS MethodInvocation to ArrayAccess at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: getRegisteredNames to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ArrayAccess at 0", "operations": ["INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: getRegisteredNames to MethodInvocation at 0"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getName to MethodInvocation at 1", "INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: getParameters to MethodInvocation at 0", "INS ArrayAccess to MethodInvocation at 0"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: i to ArrayAccess at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getReturnType to MethodInvocation at 0"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TagElement", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: limitations under the License.", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL Javadoc"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: parameters", "DEL FieldAccess", "DEL SimpleName: isConstant", "DEL ArrayAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL SimpleName: parameters", "DEL SimpleName: name", "DEL ArrayAccess"]}, {"root": "DEL SimpleName: registeredNames", "operations": ["DEL SimpleName: registeredNames"]}, {"root": "DEL QualifiedName: returnValue.type", "operations": ["DEL QualifiedName: returnValue.type"]}, {"root": "DEL SimpleName: nullHandling", "operations": ["DEL SimpleName: nullHandling"]}, {"root": "DEL QualifiedName: returnValue.type", "operations": ["DEL QualifiedName: returnValue.type"]}, {"root": "DEL QualifiedName: returnValue.name", "operations": ["DEL QualifiedName: returnValue.name"]}, {"root": "DEL SimpleName: registeredNames", "operations": ["DEL SimpleName: registeredNames"]}]}}, {"DrillSimpleFuncHolder_diff": {"operations": ["Insert MethodInvocation(350) into VariableDeclarationFragment(351) at 1", "Insert MethodInvocation(354) into InfixExpression: ==(356) at 0", "Insert SimpleName: getReturnType(349) into MethodInvocation(350) at 0", "Insert SimpleName: getNullHandling(353) into MethodInvocation(354) at 0", "Insert MethodInvocation(525) into MethodInvocation(533) at 4", "Insert MethodInvocation(207) into InfixExpression: &&(214) at 0", "Insert MethodInvocation(318) into ArrayAccess(320) at 0", "Insert MethodInvocation(523) into MethodInvocation(525) at 0", "Insert SimpleName: getName(524) into MethodInvocation(525) at 1", "Insert MethodInvocation(595) into ArrayAccess(597) at 0", "Insert ArrayAccess(205) into MethodInvocation(207) at 0", "Insert SimpleName: isConstant(206) into MethodInvocation(207) at 1", "Insert SimpleName: getRegisteredNames(317) into MethodInvocation(318) at 0", "Insert SimpleName: getReturnValue(522) into MethodInvocation(523) at 0", "Insert SimpleName: getRegisteredNames(594) into MethodInvocation(595) at 0", "Insert MethodInvocation(203) into ArrayAccess(205) at 0", "Move SimpleName: i(218) into ArrayAccess(205) at 1", "Insert SimpleName: getParameters(202) into MethodInvocation(203) at 0", "Insert MethodInvocation(225) into MethodInvocation(231) at 3", "Insert ArrayAccess(223) into MethodInvocation(225) at 0", "Insert SimpleName: getName(224) into MethodInvocation(225) at 1", "Insert MethodInvocation(221) into ArrayAccess(223) at 0", "Move SimpleName: i(235) into ArrayAccess(223) at 1", "Insert MethodInvocation(434) into MethodInvocation(436) at 0", "Insert SimpleName: getParameters(220) into MethodInvocation(221) at 0", "Insert SimpleName: getReturnType(433) into MethodInvocation(434) at 0", "Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete SimpleName: parameters(217)", "Delete ArrayAccess(219)", "Delete SimpleName: isConstant(220)", "Delete FieldAccess(221)", "Delete SimpleName: parameters(234)", "Delete ArrayAccess(236)", "Delete SimpleName: name(237)", "Delete FieldAccess(238)", "Delete SimpleName: registeredNames(330)", "Delete QualifiedName: returnValue.type(361)", "Delete SimpleName: nullHandling(364)", "Delete QualifiedName: returnValue.type(443)", "Delete QualifiedName: returnValue.name(531)", "Delete SimpleName: registeredNames(600)"]}}, {"FunctionAttributes_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 1"]}, {"root": "UPDATE from org.apache.drill.exec.expr.fn.DrillFuncHolder.ValueReference to org.apache.drill.exec.expr.annotations.FunctionTemplate", "operations": ["UPD QualifiedName: org.apache.drill.exec.expr.fn.DrillFuncHolder.ValueReference from org.apache.drill.exec.expr.fn.DrillFuncHolder.ValueReference to org.apache.drill.exec.expr.annotations.FunctionTemplate"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS QualifiedName: FunctionTemplate.ReturnType to SimpleType: FunctionTemplate.ReturnType at 0", "INS Block to MethodDeclaration at 3", "INS SimpleName: getReturnType to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: template to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: returnType to MethodInvocation at 1", "INS SimpleType: FunctionTemplate.ReturnType to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 26", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleName: checkPrecisionRange to MethodInvocation at 1", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS SimpleName: template to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 26", "INS MethodInvocation to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: checkPrecisionRange to MethodDeclaration at 2", "INS Block to MethodDeclaration at 3"]}, {"root": "UPDATE from FunctionScope to FunctionTemplate", "operations": ["UPD SimpleType: FunctionScope from FunctionScope to FunctionTemplate", "UPD SimpleName: FunctionScope from FunctionScope to FunctionTemplate", "UPD SimpleType: FunctionScope from FunctionScope to FunctionTemplate", "UPD SimpleName: FunctionScope from FunctionScope to FunctionTemplate"]}, {"root": "UPDATE from scope to template", "operations": ["UPD SimpleName: scope from scope to template", "UPD SimpleName: scope from scope to template", "UPD SimpleName: scope from scope to template", "UPD SimpleName: scope from scope to template"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: template to MethodInvocation at 0", "INS MethodInvocation to ParenthesizedExpression at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS SimpleName: template to MethodInvocation at 0", "INS ConditionalExpression to ParenthesizedExpression at 0", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS SimpleName: names to MethodInvocation at 1", "INS ArrayInitializer to ArrayCreation at 1", "INS SimpleName: name to MethodInvocation at 1", "INS ParenthesizedExpression to Assignment: = at 1", "INS MethodInvocation to ArrayInitializer at 0", "INS ExpressionStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS ArrayCreation to ConditionalExpression at 2", "INS SimpleName: template to MethodInvocation at 0", "INS SimpleName: name to MethodInvocation at 1", "INS MethodInvocation to ConditionalExpression at 1"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: template to MethodInvocation at 0", "INS SimpleName: scope to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: nulls to MethodInvocation at 1", "INS SimpleName: template to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: isBinaryCommutative to MethodInvocation at 1", "INS SimpleName: template to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: template to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: isRandom to MethodInvocation at 1"]}, {"root": "INS PrefixExpression: ! to ReturnStatement at 0", "operations": ["INS SimpleName: template to MethodInvocation at 0", "INS PrefixExpression: ! to ReturnStatement at 0", "INS SimpleName: isRandom to MethodInvocation at 1", "INS MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: costCategory to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: template to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: isNiladic to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: template to MethodInvocation at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV FieldAccess to Assignment: = at 0"]}, {"root": "MOVE from ArrayCreation", "operations": ["MOV ArrayType: String[] to ArrayCreation at 0"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: limitations under the License.", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL Javadoc", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TagElement", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: \"License\"); you may not use this file except in compliance"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.expr.fn.DrillFuncHolder.WorkspaceReference", "DEL ImportDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: nullHandling", "DEL FieldDeclaration", "DEL Modifier: private", "DEL Modifier: final", "DEL SimpleType: NullHandling", "DEL SimpleName: NullHandling", "DEL VariableDeclarationFragment"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL Modifier: final", "DEL Modifier: private", "DEL SimpleName: isBinaryCommutative", "DEL VariableDeclarationFragment", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL PrimitiveType: boolean", "DEL Modifier: private", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: isDeterministic"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleType: FunctionCostCategory", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: costCategory", "DEL SimpleName: FunctionCostCategory", "DEL Modifier: private", "DEL Modifier: final"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: isNiladic", "DEL PrimitiveType: boolean"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: nullHandling", "DEL SimpleType: NullHandling", "DEL SimpleName: NullHandling", "DEL SingleVariableDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL SimpleName: isBinaryCommutative"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL SimpleName: isDeteministic"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: registeredNames"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: FunctionCostCategory", "DEL SimpleType: FunctionCostCategory", "DEL SimpleName: costCategory"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: isNiladic", "DEL PrimitiveType: boolean"]}, {"root": "DEL SuperConstructorInvocation", "operations": ["DEL SuperConstructorInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ThisExpression", "DEL FieldAccess", "DEL Assignment: =", "DEL SimpleName: nullHandling", "DEL ExpressionStatement", "DEL SimpleName: nullHandling"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL ThisExpression", "DEL Assignment: =", "DEL SimpleName: isBinaryCommutative", "DEL SimpleName: isBinaryCommutative", "DEL FieldAccess"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: isDeteministic", "DEL SimpleName: isDeterministic", "DEL FieldAccess", "DEL ThisExpression"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: registeredNames", "DEL Assignment: ="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: costCategory", "DEL Assignment: =", "DEL FieldAccess", "DEL ExpressionStatement", "DEL ThisExpression", "DEL SimpleName: costCategory"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL SimpleName: isNiladic", "DEL ExpressionStatement", "DEL FieldAccess", "DEL ThisExpression", "DEL SimpleName: isNiladic"]}, {"root": "DEL SimpleName: scope", "operations": ["DEL SimpleName: scope"]}, {"root": "DEL SimpleName: nullHandling", "operations": ["DEL SimpleName: nullHandling"]}, {"root": "DEL SimpleName: isBinaryCommutative", "operations": ["DEL SimpleName: isBinaryCommutative"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL SimpleName: isDeterministic", "DEL PrefixExpression: !"]}, {"root": "DEL SimpleName: isDeterministic", "operations": ["DEL SimpleName: isDeterministic"]}, {"root": "DEL SimpleName: costCategory", "operations": ["DEL SimpleName: costCategory"]}, {"root": "DEL SimpleName: isNiladic", "operations": ["DEL SimpleName: isNiladic"]}]}}, {"FunctionAttributes_diff": {"operations": ["Move ImportDeclaration(24) into CompilationUnit(257) at 1", "Update QualifiedName: org.apache.drill.exec.expr.fn.DrillFuncHolder.ValueReference(23) to org.apache.drill.exec.expr.annotations.FunctionTemplate", "Insert MethodDeclaration(149) into TypeDeclaration: class(256) at 10", "Insert MethodDeclaration(255) into TypeDeclaration: class(256) at 21", "Update SimpleType: FunctionScope(36) to FunctionTemplate", "Insert Modifier: public(140) into MethodDeclaration(149) at 0", "Insert SimpleType: FunctionTemplate.ReturnType(142) into MethodDeclaration(149) at 1", "Insert SimpleName: getReturnType(143) into MethodDeclaration(149) at 2", "Insert Block(148) into MethodDeclaration(149) at 3", "Insert Modifier: public(247) into MethodDeclaration(255) at 0", "Insert PrimitiveType: boolean(248) into MethodDeclaration(255) at 1", "Insert SimpleName: checkPrecisionRange(249) into MethodDeclaration(255) at 2", "Insert Block(254) into MethodDeclaration(255) at 3", "Update SimpleName: FunctionScope(35) to FunctionTemplate", "Update SimpleName: scope(37) to template", "Update SimpleType: FunctionScope(109) to FunctionTemplate", "Update SimpleName: scope(110) to template", "Insert ExpressionStatement(109) into Block(128) at 1", "Insert QualifiedName: FunctionTemplate.ReturnType(141) into SimpleType: FunctionTemplate.ReturnType(142) at 0", "Insert ReturnStatement(147) into Block(148) at 0", "Insert ReturnStatement(253) into Block(254) at 0", "Update SimpleName: FunctionScope(108) to FunctionTemplate", "Insert Assignment: =(108) into ExpressionStatement(109) at 0", "Insert MethodInvocation(136) into ReturnStatement(137) at 0", "Insert MethodInvocation(146) into ReturnStatement(147) at 0", "Insert MethodInvocation(156) into ReturnStatement(157) at 0", "Insert MethodInvocation(165) into ReturnStatement(166) at 0", "Insert MethodInvocation(176) into ReturnStatement(177) at 0", "Insert PrefixExpression: !(186) into ReturnStatement(187) at 0", "Insert MethodInvocation(234) into ReturnStatement(235) at 0", "Insert MethodInvocation(243) into ReturnStatement(244) at 0", "Insert MethodInvocation(252) into ReturnStatement(253) at 0", "Update SimpleName: scope(155) to template", "Move FieldAccess(178) into Assignment: =(108) at 0", "Insert ParenthesizedExpression(107) into Assignment: =(108) at 1", "Insert SimpleName: template(134) into MethodInvocation(136) at 0", "Insert SimpleName: scope(135) into MethodInvocation(136) at 1", "Insert SimpleName: template(144) into MethodInvocation(146) at 0", "Insert SimpleName: returnType(145) into MethodInvocation(146) at 1", "Insert SimpleName: template(154) into MethodInvocation(156) at 0", "Insert SimpleName: nulls(155) into MethodInvocation(156) at 1", "Insert SimpleName: template(163) into MethodInvocation(165) at 0", "Insert SimpleName: isBinaryCommutative(164) into MethodInvocation(165) at 1", "Insert SimpleName: template(174) into MethodInvocation(176) at 0", "Insert SimpleName: isRandom(175) into MethodInvocation(176) at 1", "Insert MethodInvocation(185) into PrefixExpression: !(186) at 0", "Insert SimpleName: template(232) into MethodInvocation(234) at 0", "Insert SimpleName: costCategory(233) into MethodInvocation(234) at 1", "Insert SimpleName: template(241) into MethodInvocation(243) at 0", "Insert SimpleName: isNiladic(242) into MethodInvocation(243) at 1", "Insert SimpleName: template(250) into MethodInvocation(252) at 0", "Insert SimpleName: checkPrecisionRange(251) into MethodInvocation(252) at 1", "Update SimpleName: scope(153) to template", "Insert ConditionalExpression(106) into ParenthesizedExpression(107) at 0", "Insert SimpleName: template(183) into MethodInvocation(185) at 0", "Insert SimpleName: isRandom(184) into MethodInvocation(185) at 1", "Insert ParenthesizedExpression(93) into ConditionalExpression(106) at 0", "Insert MethodInvocation(96) into ConditionalExpression(106) at 1", "Insert ArrayCreation(105) into ConditionalExpression(106) at 2", "Insert MethodInvocation(92) into ParenthesizedExpression(93) at 0", "Insert SimpleName: template(94) into MethodInvocation(96) at 0", "Insert SimpleName: names(95) into MethodInvocation(96) at 1", "Move ArrayType: String[](125) into ArrayCreation(105) at 0", "Insert ArrayInitializer(104) into ArrayCreation(105) at 1", "Insert MethodInvocation(90) into MethodInvocation(92) at 0", "Insert SimpleName: isEmpty(91) into MethodInvocation(92) at 1", "Insert MethodInvocation(103) into ArrayInitializer(104) at 0", "Insert SimpleName: template(88) into MethodInvocation(90) at 0", "Insert SimpleName: name(89) into MethodInvocation(90) at 1", "Insert SimpleName: template(101) into MethodInvocation(103) at 0", "Insert SimpleName: name(102) into MethodInvocation(103) at 1", "Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.drill.exec.expr.fn.DrillFuncHolder.WorkspaceReference(25)", "Delete ImportDeclaration(26)", "Delete Modifier: private(40)", "Delete Modifier: final(41)", "Delete SimpleName: NullHandling(42)", "Delete SimpleType: NullHandling(43)", "Delete SimpleName: nullHandling(44)", "Delete VariableDeclarationFragment(45)", "Delete FieldDeclaration(46)", "Delete Modifier: private(47)", "Delete Modifier: final(48)", "Delete PrimitiveType: boolean(49)", "Delete SimpleName: isBinaryCommutative(50)", "Delete VariableDeclarationFragment(51)", "Delete FieldDeclaration(52)", "Delete Modifier: private(53)", "Delete Modifier: final(54)", "Delete PrimitiveType: boolean(55)", "Delete SimpleName: isDeterministic(56)", "Delete VariableDeclarationFragment(57)", "Delete FieldDeclaration(58)", "Delete Modifier: private(93)", "Delete Modifier: final(94)", "Delete SimpleName: FunctionCostCategory(95)", "Delete SimpleType: FunctionCostCategory(96)", "Delete SimpleName: costCategory(97)", "Delete VariableDeclarationFragment(98)", "Delete FieldDeclaration(99)", "Delete Modifier: private(100)", "Delete Modifier: final(101)", "Delete PrimitiveType: boolean(102)", "Delete SimpleName: isNiladic(103)", "Delete VariableDeclarationFragment(104)", "Delete FieldDeclaration(105)", "Delete SimpleName: NullHandling(112)", "Delete SimpleType: NullHandling(113)", "Delete SimpleName: nullHandling(114)", "Delete SingleVariableDeclaration(115)", "Delete PrimitiveType: boolean(116)", "Delete SimpleName: isBinaryCommutative(117)", "Delete SingleVariableDeclaration(118)", "Delete PrimitiveType: boolean(119)", "Delete SimpleName: isDeteministic(120)", "Delete SingleVariableDeclaration(121)", "Delete SimpleName: registeredNames(126)", "Delete SingleVariableDeclaration(127)", "Delete SimpleName: FunctionCostCategory(144)", "Delete SimpleType: FunctionCostCategory(145)", "Delete SimpleName: costCategory(146)", "Delete SingleVariableDeclaration(147)", "Delete PrimitiveType: boolean(148)", "Delete SimpleName: isNiladic(149)", "Delete SingleVariableDeclaration(150)", "Delete SuperConstructorInvocation(151)", "Delete ThisExpression(158)", "Delete SimpleName: nullHandling(159)", "Delete FieldAccess(160)", "Delete SimpleName: nullHandling(161)", "Delete Assignment: =(162)", "Delete ExpressionStatement(163)", "Delete ThisExpression(164)", "Delete SimpleName: isBinaryCommutative(165)", "Delete FieldAccess(166)", "Delete SimpleName: isBinaryCommutative(167)", "Delete Assignment: =(168)", "Delete ExpressionStatement(169)", "Delete ThisExpression(170)", "Delete SimpleName: isDeterministic(171)", "Delete FieldAccess(172)", "Delete SimpleName: isDeteministic(173)", "Delete Assignment: =(174)", "Delete ExpressionStatement(175)", "Delete SimpleName: registeredNames(179)", "Delete Assignment: =(180)", "Delete ExpressionStatement(181)", "Delete ThisExpression(200)", "Delete SimpleName: costCategory(201)", "Delete FieldAccess(202)", "Delete SimpleName: costCategory(203)", "Delete Assignment: =(204)", "Delete ExpressionStatement(205)", "Delete ThisExpression(206)", "Delete SimpleName: isNiladic(207)", "Delete FieldAccess(208)", "Delete SimpleName: isNiladic(209)", "Delete Assignment: =(210)", "Delete ExpressionStatement(211)", "Delete SimpleName: scope(218)", "Delete SimpleName: nullHandling(226)", "Delete SimpleName: isBinaryCommutative(233)", "Delete SimpleName: isDeterministic(242)", "Delete PrefixExpression: !(243)", "Delete SimpleName: isDeterministic(250)", "Delete SimpleName: costCategory(296)", "Delete SimpleName: isNiladic(303)"]}}, {"FunctionConverter_cluster": {"actions": [{"root": "MOVE from SwitchStatement", "operations": ["MOV ReturnStatement to SwitchStatement at 8", "MOV SwitchCase to SwitchStatement at 29"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: FunctionAttributes to VariableDeclarationStatement at 0"]}, {"root": "INS ConditionalExpression to ReturnStatement at 0", "operations": ["INS SimpleName: outputField to MethodInvocation at 0", "INS ConditionalExpression to ReturnStatement at 0", "INS MethodInvocation to ConditionalExpression at 0", "INS SimpleName: isComplexWriter to MethodInvocation at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: FunctionAttributes to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: template to ClassInstanceCreation at 1", "operations": ["INS SimpleName: template to ClassInstanceCreation at 1"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV ClassInstanceCreation to ConditionalExpression at 1"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV ClassInstanceCreation to ConditionalExpression at 2"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: limitations under the License.", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: See the License for the specific language governing permissions and", "DEL Javadoc", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.expr.fn.DrillFuncHolder.ValueReference", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.drill.exec.expr.fn.DrillFuncHolder.WorkspaceReference"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: template", "DEL ArrayInitializer", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL SimpleName: String", "DEL SimpleName: String", "DEL ArrayCreation", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ConditionalExpression", "DEL SimpleName: template", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: name", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL SimpleName: name", "DEL MethodInvocation", "DEL SimpleType: String", "DEL ArrayType: String[]", "DEL SimpleName: template", "DEL SimpleName: isEmpty", "DEL SimpleName: names", "DEL ArrayType: String[]", "DEL Dimension", "DEL SimpleName: registeredNames"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL PrefixExpression: !", "DEL VariableDeclarationStatement", "DEL SimpleName: isDeteministic", "DEL SimpleName: isRandom", "DEL MethodInvocation", "DEL SimpleName: template", "DEL PrimitiveType: boolean", "DEL VariableDeclarationFragment"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: scope", "DEL SimpleName: template"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: template", "DEL SimpleName: nulls", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: isBinaryCommutative", "DEL SimpleName: template"]}, {"root": "DEL SimpleName: isDeteministic", "operations": ["DEL SimpleName: isDeteministic"]}, {"root": "DEL SimpleName: registeredNames", "operations": ["DEL SimpleName: registeredNames"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: costCategory", "DEL SimpleName: template"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: isNiladic", "DEL SimpleName: template"]}, {"root": "DEL SwitchCase", "operations": ["DEL SwitchCase", "DEL SimpleName: DECIMAL_AGGREGATE"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: initializer", "DEL ClassInstanceCreation", "DEL SimpleType: DrillDecimalSumAggFuncHolder", "DEL ReturnStatement", "DEL SimpleName: functionAttributes", "DEL SimpleName: DrillDecimalSumAggFuncHolder"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleType: DrillDecimalAggFuncHolder", "DEL SimpleName: functionAttributes", "DEL SimpleName: DrillDecimalAggFuncHolder", "DEL ClassInstanceCreation", "DEL SimpleName: initializer"]}, {"root": "DEL IfStatement", "operations": ["DEL ReturnStatement", "DEL IfStatement", "DEL ReturnStatement", "DEL QualifiedName: outputField.isComplexWriter", "DEL Block", "DEL Block"]}, {"root": "DEL SwitchCase", "operations": ["DEL SwitchCase", "DEL SimpleName: SC_BOOLEAN_OPERATOR"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: initializer", "DEL SimpleType: DrillBooleanOPHolder", "DEL SimpleName: functionAttributes", "DEL SimpleName: DrillBooleanOPHolder", "DEL ClassInstanceCreation"]}, {"root": "DEL SwitchCase", "operations": ["DEL SwitchCase", "DEL SimpleName: DECIMAL_MAX_SCALE"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ClassInstanceCreation", "DEL SimpleName: functionAttributes", "DEL SimpleType: DrillDecimalMaxScaleFuncHolder", "DEL SimpleName: DrillDecimalMaxScaleFuncHolder", "DEL ReturnStatement", "DEL SimpleName: initializer"]}, {"root": "DEL SwitchCase", "operations": ["DEL SimpleName: DECIMAL_MUL_SCALE", "DEL SwitchCase"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: functionAttributes", "DEL SimpleName: initializer", "DEL ClassInstanceCreation", "DEL SimpleName: DrillDecimalSumScaleFuncHolder", "DEL SimpleType: DrillDecimalSumScaleFuncHolder", "DEL ReturnStatement"]}, {"root": "DEL SwitchCase", "operations": ["DEL SwitchCase", "DEL SimpleName: DECIMAL_ADD_SCALE"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL SimpleName: initializer", "DEL SimpleType: DrillDecimalAddFuncHolder", "DEL SimpleName: DrillDecimalAddFuncHolder", "DEL SimpleName: functionAttributes"]}, {"root": "DEL SwitchCase", "operations": ["DEL SwitchCase", "DEL SimpleName: DECIMAL_CAST"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: initializer", "DEL ClassInstanceCreation", "DEL SimpleType: DrillDecimalCastFuncHolder", "DEL SimpleName: DrillDecimalCastFuncHolder", "DEL SimpleName: functionAttributes", "DEL ReturnStatement"]}, {"root": "DEL SwitchCase", "operations": ["DEL SwitchCase", "DEL SimpleName: DECIMAL_DIV_SCALE"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ClassInstanceCreation", "DEL SimpleName: initializer", "DEL SimpleType: DrillDecimalDivScaleFuncHolder", "DEL SimpleName: DrillDecimalDivScaleFuncHolder", "DEL ReturnStatement", "DEL SimpleName: functionAttributes"]}, {"root": "DEL SwitchCase", "operations": ["DEL SwitchCase", "DEL SimpleName: DECIMAL_MOD_SCALE"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleType: DrillDecimalModScaleFuncHolder", "DEL SimpleName: DrillDecimalModScaleFuncHolder", "DEL SimpleName: initializer", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL SimpleName: functionAttributes"]}, {"root": "DEL SwitchCase", "operations": ["DEL SimpleName: DECIMAL_SET_SCALE", "DEL SwitchCase"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleType: DrillDecimalSetScaleFuncHolder", "DEL SimpleName: DrillDecimalSetScaleFuncHolder", "DEL SimpleName: functionAttributes", "DEL SimpleName: initializer", "DEL ClassInstanceCreation", "DEL ReturnStatement"]}, {"root": "DEL SwitchCase", "operations": ["DEL SimpleName: DECIMAL_ZERO_SCALE", "DEL SwitchCase"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: DrillDecimalZeroScaleFuncHolder", "DEL SimpleName: functionAttributes", "DEL SimpleType: DrillDecimalZeroScaleFuncHolder", "DEL ReturnStatement", "DEL SimpleName: initializer", "DEL ClassInstanceCreation"]}, {"root": "DEL SimpleName: DECIMAL_SUM_AGGREGATE", "operations": ["DEL SimpleName: DECIMAL_SUM_AGGREGATE"]}, {"root": "DEL SwitchCase", "operations": ["DEL SwitchCase"]}]}}, {"FunctionConverter_diff": {"operations": ["Move ReturnStatement(757) into SwitchStatement(707) at 8", "Move SwitchCase(759) into SwitchStatement(707) at 29", "Move SimpleType: FunctionAttributes(715) into VariableDeclarationStatement(668) at 0", "Insert ConditionalExpression(695) into ReturnStatement(696) at 0", "Move SimpleType: FunctionAttributes(712) into ClassInstanceCreation(666) at 0", "Insert SimpleName: template(662) into ClassInstanceCreation(666) at 1", "Insert MethodInvocation(684) into ConditionalExpression(695) at 0", "Move ClassInstanceCreation(773) into ConditionalExpression(695) at 1", "Move ClassInstanceCreation(780) into ConditionalExpression(695) at 2", "Insert SimpleName: outputField(682) into MethodInvocation(684) at 0", "Insert SimpleName: isComplexWriter(683) into MethodInvocation(684) at 1", "Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.drill.exec.expr.fn.DrillFuncHolder.ValueReference(47)", "Delete ImportDeclaration(48)", "Delete QualifiedName: org.apache.drill.exec.expr.fn.DrillFuncHolder.WorkspaceReference(49)", "Delete ImportDeclaration(50)", "Delete SimpleName: String(676)", "Delete SimpleType: String(677)", "Delete Dimension(678)", "Delete ArrayType: String[](679)", "Delete SimpleName: registeredNames(680)", "Delete SimpleName: template(681)", "Delete SimpleName: name(682)", "Delete MethodInvocation(683)", "Delete SimpleName: isEmpty(684)", "Delete MethodInvocation(685)", "Delete ParenthesizedExpression(686)", "Delete SimpleName: template(687)", "Delete SimpleName: names(688)", "Delete MethodInvocation(689)", "Delete SimpleName: String(690)", "Delete SimpleType: String(691)", "Delete Dimension(692)", "Delete ArrayType: String[](693)", "Delete SimpleName: template(694)", "Delete SimpleName: name(695)", "Delete MethodInvocation(696)", "Delete ArrayInitializer(697)", "Delete ArrayCreation(698)", "Delete ConditionalExpression(699)", "Delete ParenthesizedExpression(700)", "Delete VariableDeclarationFragment(701)", "Delete VariableDeclarationStatement(702)", "Delete PrimitiveType: boolean(703)", "Delete SimpleName: isDeteministic(704)", "Delete SimpleName: template(705)", "Delete SimpleName: isRandom(706)", "Delete MethodInvocation(707)", "Delete PrefixExpression: !(708)", "Delete VariableDeclarationFragment(709)", "Delete VariableDeclarationStatement(710)", "Delete SimpleName: template(716)", "Delete SimpleName: scope(717)", "Delete MethodInvocation(718)", "Delete SimpleName: template(719)", "Delete SimpleName: nulls(720)", "Delete MethodInvocation(721)", "Delete SimpleName: template(722)", "Delete SimpleName: isBinaryCommutative(723)", "Delete MethodInvocation(724)", "Delete SimpleName: isDeteministic(725)", "Delete SimpleName: registeredNames(726)", "Delete SimpleName: template(730)", "Delete SimpleName: costCategory(731)", "Delete MethodInvocation(732)", "Delete SimpleName: template(733)", "Delete SimpleName: isNiladic(734)", "Delete MethodInvocation(735)", "Delete SimpleName: DECIMAL_AGGREGATE(750)", "Delete SwitchCase(751)", "Delete SimpleName: DrillDecimalSumAggFuncHolder(760)", "Delete SimpleType: DrillDecimalSumAggFuncHolder(761)", "Delete SimpleName: functionAttributes(762)", "Delete SimpleName: initializer(763)", "Delete ClassInstanceCreation(764)", "Delete ReturnStatement(765)", "Delete SimpleName: DrillDecimalAggFuncHolder(752)", "Delete SimpleType: DrillDecimalAggFuncHolder(753)", "Delete SimpleName: functionAttributes(754)", "Delete SimpleName: initializer(755)", "Delete ClassInstanceCreation(756)", "Delete QualifiedName: outputField.isComplexWriter(768)", "Delete ReturnStatement(774)", "Delete Block(775)", "Delete ReturnStatement(781)", "Delete Block(782)", "Delete IfStatement(783)", "Delete SimpleName: SC_BOOLEAN_OPERATOR(784)", "Delete SwitchCase(785)", "Delete SimpleName: DrillBooleanOPHolder(786)", "Delete SimpleType: DrillBooleanOPHolder(787)", "Delete SimpleName: functionAttributes(788)", "Delete SimpleName: initializer(789)", "Delete ClassInstanceCreation(790)", "Delete ReturnStatement(791)", "Delete SimpleName: DECIMAL_MAX_SCALE(792)", "Delete SwitchCase(793)", "Delete SimpleName: DrillDecimalMaxScaleFuncHolder(794)", "Delete SimpleType: DrillDecimalMaxScaleFuncHolder(795)", "Delete SimpleName: functionAttributes(796)", "Delete SimpleName: initializer(797)", "Delete ClassInstanceCreation(798)", "Delete ReturnStatement(799)", "Delete SimpleName: DECIMAL_MUL_SCALE(800)", "Delete SwitchCase(801)", "Delete SimpleName: DrillDecimalSumScaleFuncHolder(802)", "Delete SimpleType: DrillDecimalSumScaleFuncHolder(803)", "Delete SimpleName: functionAttributes(804)", "Delete SimpleName: initializer(805)", "Delete ClassInstanceCreation(806)", "Delete ReturnStatement(807)", "Delete SimpleName: DECIMAL_ADD_SCALE(808)", "Delete SwitchCase(809)", "Delete SimpleName: DrillDecimalAddFuncHolder(810)", "Delete SimpleType: DrillDecimalAddFuncHolder(811)", "Delete SimpleName: functionAttributes(812)", "Delete SimpleName: initializer(813)", "Delete ClassInstanceCreation(814)", "Delete ReturnStatement(815)", "Delete SimpleName: DECIMAL_CAST(816)", "Delete SwitchCase(817)", "Delete SimpleName: DrillDecimalCastFuncHolder(818)", "Delete SimpleType: DrillDecimalCastFuncHolder(819)", "Delete SimpleName: functionAttributes(820)", "Delete SimpleName: initializer(821)", "Delete ClassInstanceCreation(822)", "Delete ReturnStatement(823)", "Delete SimpleName: DECIMAL_DIV_SCALE(824)", "Delete SwitchCase(825)", "Delete SimpleName: DrillDecimalDivScaleFuncHolder(826)", "Delete SimpleType: DrillDecimalDivScaleFuncHolder(827)", "Delete SimpleName: functionAttributes(828)", "Delete SimpleName: initializer(829)", "Delete ClassInstanceCreation(830)", "Delete ReturnStatement(831)", "Delete SimpleName: DECIMAL_MOD_SCALE(832)", "Delete SwitchCase(833)", "Delete SimpleName: DrillDecimalModScaleFuncHolder(834)", "Delete SimpleType: DrillDecimalModScaleFuncHolder(835)", "Delete SimpleName: functionAttributes(836)", "Delete SimpleName: initializer(837)", "Delete ClassInstanceCreation(838)", "Delete ReturnStatement(839)", "Delete SimpleName: DECIMAL_SET_SCALE(840)", "Delete SwitchCase(841)", "Delete SimpleName: DrillDecimalSetScaleFuncHolder(842)", "Delete SimpleType: DrillDecimalSetScaleFuncHolder(843)", "Delete SimpleName: functionAttributes(844)", "Delete SimpleName: initializer(845)", "Delete ClassInstanceCreation(846)", "Delete ReturnStatement(847)", "Delete SimpleName: DECIMAL_ZERO_SCALE(848)", "Delete SwitchCase(849)", "Delete SimpleName: DrillDecimalZeroScaleFuncHolder(850)", "Delete SimpleType: DrillDecimalZeroScaleFuncHolder(851)", "Delete SimpleName: functionAttributes(852)", "Delete SimpleName: initializer(853)", "Delete ClassInstanceCreation(854)", "Delete ReturnStatement(855)", "Delete SimpleName: DECIMAL_SUM_AGGREGATE(758)", "Delete SwitchCase(860)"]}}, {"DrillOptiq_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 22", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 22", "INS TagElement: @param to Javadoc at 1", "INS TextElement: and wraps it in typed null constant. to TagElement at 1", "INS Modifier: private to MethodDeclaration at 1", "INS TagElement to Javadoc at 0", "INS TagElement: @return to Javadoc at 2", "INS SimpleName: type to TagElement: @param at 0", "INS TextElement: Create nullable major type using given minor type to TagElement at 0", "INS SimpleName: createNullExpr to MethodDeclaration at 3", "INS TextElement:  minor type to TagElement: @param at 1", "INS TextElement:  typed null constant instance to TagElement: @return at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS MethodInvocation to ClassInstanceCreation at 1", "INS TextElement: Create nullable varchar major type with given precision to TagElement at 0", "INS Block to MethodDeclaration at 5", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: createStringNullExpr to MethodDeclaration at 3", "INS Modifier: private to MethodDeclaration at 1", "INS SimpleName: precision to SingleVariableDeclaration at 1", "INS SimpleName: TypedNullConstant to SimpleType: TypedNullConstant at 0", "INS SimpleType: TypedNullConstant to MethodDeclaration at 2", "INS SimpleName: Types to MethodInvocation at 0", "INS TextElement:  typed null constant instance to TagElement: @return at 0", "INS SimpleType: TypedNullConstant to ClassInstanceCreation at 0", "INS QualifiedName: MinorType.VARCHAR to MethodInvocation at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: precision to TagElement: @param at 0", "INS QualifiedName: TypeProtos.DataMode.OPTIONAL to MethodInvocation at 3", "INS TagElement: @param to Javadoc at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: TypedNullConstant to SimpleType: TypedNullConstant at 0", "INS SimpleName: precision to MethodInvocation at 4", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 23", "INS TagElement to Javadoc at 0", "INS SimpleName: withPrecision to MethodInvocation at 1", "INS TagElement: @return to Javadoc at 2", "INS TextElement: and wraps it in typed null constant. to TagElement at 1", "INS TextElement:  precision value to TagElement: @param at 1", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: TypedNullConstant to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Block to MethodDeclaration at 5"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from PrefixExpression: !", "operations": ["MOV FieldAccess to PrefixExpression: ! at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS SimpleName: getType to MethodInvocation at 1", "INS SimpleName: getPrecision to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: literal to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: literal to MethodInvocation at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS SimpleName: getPrecision to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS SimpleName: getPrecision to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getType to MethodInvocation at 1", "INS SimpleName: literal to MethodInvocation at 0"]}, {"root": "UPDATE from setWidth to setPrecision", "operations": ["UPD SimpleName: setWidth from setWidth to setPrecision"]}, {"root": "UPDATE from createNullExpr to createStringNullExpr", "operations": ["UPD SimpleName: createNullExpr from createNullExpr to createStringNullExpr", "UPD SimpleName: createNullExpr from createNullExpr to createStringNullExpr", "UPD SimpleName: createNullExpr from createNullExpr to createStringNullExpr"]}, {"root": "INS MethodInvocation to MethodInvocation at 1", "operations": ["INS SimpleName: getPrecision to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: literal to MethodInvocation at 0", "INS SimpleName: getType to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 1", "operations": ["INS SimpleName: literal to MethodInvocation at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getPrecision to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 1", "operations": ["INS SimpleName: getPrecision to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: literal to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getType to MethodInvocation at 1"]}, {"root": "INS QualifiedName: QuotedString.EMPTY_STRING to MethodInvocation at 2", "operations": ["INS QualifiedName: QuotedString.EMPTY_STRING to MethodInvocation at 2"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL InfixExpression: ==", "DEL BooleanLiteral: false"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: call", "DEL SimpleName: getType", "DEL SimpleName: toBuilder", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: setWidth", "DEL SimpleName: build", "DEL SimpleName: getPrecision"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: QuotedString", "DEL ClassInstanceCreation", "DEL SimpleType: QuotedString", "DEL QualifiedName: ExpressionPosition.UNKNOWN", "DEL StringLiteral: \"\""]}, {"root": "DEL QualifiedName: MinorType.VARCHAR", "operations": ["DEL QualifiedName: MinorType.VARCHAR"]}, {"root": "DEL QualifiedName: MinorType.VARCHAR", "operations": ["DEL QualifiedName: MinorType.VARCHAR"]}, {"root": "DEL QualifiedName: MinorType.VARCHAR", "operations": ["DEL QualifiedName: MinorType.VARCHAR"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: private", "DEL MethodDeclaration", "DEL SimpleName: createNullExpr", "DEL Modifier: static", "DEL Modifier: final"]}]}}, {"DrillOptiq_diff": {"operations": ["Insert MethodDeclaration(2494) into TypeDeclaration: class(2523) at 22", "Insert MethodDeclaration(2522) into TypeDeclaration: class(2523) at 23", "Insert Javadoc(2476) into MethodDeclaration(2494) at 0", "Insert Modifier: private(2477) into MethodDeclaration(2494) at 1", "Move SimpleType: TypedNullConstant(2463) into MethodDeclaration(2494) at 2", "Insert SimpleName: createNullExpr(2480) into MethodDeclaration(2494) at 3", "Move SingleVariableDeclaration(2468) into MethodDeclaration(2494) at 4", "Move Block(2477) into MethodDeclaration(2494) at 5", "Insert Javadoc(2503) into MethodDeclaration(2522) at 0", "Insert Modifier: private(2504) into MethodDeclaration(2522) at 1", "Insert SimpleType: TypedNullConstant(2506) into MethodDeclaration(2522) at 2", "Insert SimpleName: createStringNullExpr(2507) into MethodDeclaration(2522) at 3", "Insert SingleVariableDeclaration(2510) into MethodDeclaration(2522) at 4", "Insert Block(2521) into MethodDeclaration(2522) at 5", "Insert TagElement(2470) into Javadoc(2476) at 0", "Insert TagElement: @param(2473) into Javadoc(2476) at 1", "Insert TagElement: @return(2475) into Javadoc(2476) at 2", "Insert TagElement(2497) into Javadoc(2503) at 0", "Insert TagElement: @param(2500) into Javadoc(2503) at 1", "Insert TagElement: @return(2502) into Javadoc(2503) at 2", "Insert SimpleName: TypedNullConstant(2505) into SimpleType: TypedNullConstant(2506) at 0", "Insert PrimitiveType: int(2508) into SingleVariableDeclaration(2510) at 0", "Insert SimpleName: precision(2509) into SingleVariableDeclaration(2510) at 1", "Insert ReturnStatement(2520) into Block(2521) at 0", "Insert TextElement: Create nullable major type using given minor type(2468) into TagElement(2470) at 0", "Insert TextElement: and wraps it in typed null constant.(2469) into TagElement(2470) at 1", "Insert SimpleName: type(2471) into TagElement: @param(2473) at 0", "Insert TextElement:  minor type(2472) into TagElement: @param(2473) at 1", "Insert TextElement:  typed null constant instance(2474) into TagElement: @return(2475) at 0", "Insert TextElement: Create nullable varchar major type with given precision(2495) into TagElement(2497) at 0", "Insert TextElement: and wraps it in typed null constant.(2496) into TagElement(2497) at 1", "Insert SimpleName: precision(2498) into TagElement: @param(2500) at 0", "Insert TextElement:  precision value(2499) into TagElement: @param(2500) at 1", "Insert TextElement:  typed null constant instance(2501) into TagElement: @return(2502) at 0", "Insert ClassInstanceCreation(2519) into ReturnStatement(2520) at 0", "Insert PrefixExpression: !(1184) into IfStatement(1196) at 0", "Insert SimpleType: TypedNullConstant(2512) into ClassInstanceCreation(2519) at 0", "Insert MethodInvocation(2518) into ClassInstanceCreation(2519) at 1", "Move FieldAccess(1184) into PrefixExpression: !(1184) at 0", "Move MethodInvocation(1348) into Assignment: =(1347) at 1", "Insert MethodInvocation(2128) into MethodInvocation(2129) at 3", "Insert MethodInvocation(2287) into MethodInvocation(2288) at 3", "Insert MethodInvocation(2316) into MethodInvocation(2317) at 3", "Insert SimpleName: TypedNullConstant(2511) into SimpleType: TypedNullConstant(2512) at 0", "Insert SimpleName: Types(2513) into MethodInvocation(2518) at 0", "Insert SimpleName: withPrecision(2514) into MethodInvocation(2518) at 1", "Insert QualifiedName: MinorType.VARCHAR(2515) into MethodInvocation(2518) at 2", "Insert QualifiedName: TypeProtos.DataMode.OPTIONAL(2516) into MethodInvocation(2518) at 3", "Insert SimpleName: precision(2517) into MethodInvocation(2518) at 4", "Insert MethodInvocation(2126) into MethodInvocation(2128) at 0", "Insert SimpleName: getPrecision(2127) into MethodInvocation(2128) at 1", "Insert MethodInvocation(2285) into MethodInvocation(2287) at 0", "Insert SimpleName: getPrecision(2286) into MethodInvocation(2287) at 1", "Insert MethodInvocation(2314) into MethodInvocation(2316) at 0", "Insert SimpleName: getPrecision(2315) into MethodInvocation(2316) at 1", "Update SimpleName: setWidth(1131) to setPrecision", "Update SimpleName: createNullExpr(2120) to createStringNullExpr", "Insert MethodInvocation(2108) into MethodInvocation(2109) at 1", "Insert SimpleName: literal(2124) into MethodInvocation(2126) at 0", "Insert SimpleName: getType(2125) into MethodInvocation(2126) at 1", "Update SimpleName: createNullExpr(2270) to createStringNullExpr", "Insert MethodInvocation(2267) into MethodInvocation(2268) at 1", "Insert SimpleName: literal(2283) into MethodInvocation(2285) at 0", "Insert SimpleName: getType(2284) into MethodInvocation(2285) at 1", "Update SimpleName: createNullExpr(2294) to createStringNullExpr", "Insert MethodInvocation(2300) into MethodInvocation(2301) at 1", "Insert SimpleName: literal(2312) into MethodInvocation(2314) at 0", "Insert SimpleName: getType(2313) into MethodInvocation(2314) at 1", "Insert MethodInvocation(2106) into MethodInvocation(2108) at 0", "Insert SimpleName: getPrecision(2107) into MethodInvocation(2108) at 1", "Insert MethodInvocation(2265) into MethodInvocation(2267) at 0", "Insert SimpleName: getPrecision(2266) into MethodInvocation(2267) at 1", "Insert MethodInvocation(2298) into MethodInvocation(2300) at 0", "Insert SimpleName: getPrecision(2299) into MethodInvocation(2300) at 1", "Insert SimpleName: literal(2104) into MethodInvocation(2106) at 0", "Insert SimpleName: getType(2105) into MethodInvocation(2106) at 1", "Insert SimpleName: literal(2263) into MethodInvocation(2265) at 0", "Insert SimpleName: getType(2264) into MethodInvocation(2265) at 1", "Insert SimpleName: literal(2296) into MethodInvocation(2298) at 0", "Insert SimpleName: getType(2297) into MethodInvocation(2298) at 1", "Insert QualifiedName: QuotedString.EMPTY_STRING(1696) into MethodInvocation(1697) at 2", "Delete NullLiteral(1110)", "Delete BooleanLiteral: false(1185)", "Delete InfixExpression: ==(1186)", "Delete SimpleName: toBuilder(1349)", "Delete MethodInvocation(1350)", "Delete SimpleName: setWidth(1351)", "Delete SimpleName: call(1352)", "Delete SimpleName: getType(1353)", "Delete MethodInvocation(1354)", "Delete SimpleName: getPrecision(1355)", "Delete MethodInvocation(1356)", "Delete MethodInvocation(1357)", "Delete SimpleName: build(1358)", "Delete MethodInvocation(1359)", "Delete SimpleName: QuotedString(1709)", "Delete SimpleType: QuotedString(1710)", "Delete StringLiteral: \"\"(1711)", "Delete QualifiedName: ExpressionPosition.UNKNOWN(1712)", "Delete ClassInstanceCreation(1713)", "Delete QualifiedName: MinorType.VARCHAR(2121)", "Delete QualifiedName: MinorType.VARCHAR(2271)", "Delete QualifiedName: MinorType.VARCHAR(2295)", "Delete Modifier: private(2459)", "Delete Modifier: static(2460)", "Delete Modifier: final(2461)", "Delete SimpleName: createNullExpr(2464)", "Delete MethodDeclaration(2478)"]}}, {"SqlConverter_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 38", "operations": ["INS QualifiedName: org.apache.drill.common.types.Types to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 38"]}, {"root": "INS QualifiedName: Types.MAX_VARCHAR_LENGTH to ReturnStatement at 0", "operations": ["INS QualifiedName: Types.MAX_VARCHAR_LENGTH to ReturnStatement at 0"]}, {"root": "DEL NumberLiteral: 65536", "operations": ["DEL NumberLiteral: 65536"]}]}}, {"SqlConverter_diff": {"operations": ["Insert ImportDeclaration(77) into CompilationUnit(1774) at 38", "Insert QualifiedName: org.apache.drill.common.types.Types(76) into ImportDeclaration(77) at 0", "Insert QualifiedName: Types.MAX_VARCHAR_LENGTH(814) into ReturnStatement(815) at 0", "Delete NumberLiteral: 65536(812)"]}}, {"ColumnDef_cluster": {"actions": [{"root": "UPDATE from getWidth to getPrecision", "operations": ["UPD SimpleName: getWidth from getWidth to getPrecision", "UPD SimpleName: getWidth from getWidth to getPrecision"]}]}}, {"ColumnDef_diff": {"operations": ["Update SimpleName: getWidth(63) to getPrecision", "Update SimpleName: getWidth(70) to getPrecision"]}}, {"PreparedStatementProvider_cluster": {"actions": [{"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: Period to SimpleType: Period at 0", "INS QualifiedName: MinorType.INTERVALDAY to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleType: Period to TypeLiteral at 0"]}, {"root": "INS SimpleName: put to MethodInvocation at 1", "operations": ["INS SimpleName: put to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: put to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from MinorType.INTERVALDAY to MinorType.INTERVALYEAR", "operations": ["UPD QualifiedName: MinorType.INTERVALDAY from MinorType.INTERVALDAY to MinorType.INTERVALYEAR"]}, {"root": "UPDATE from MinorType.INTERVALYEAR to MinorType.INTERVAL", "operations": ["UPD QualifiedName: MinorType.INTERVALYEAR from MinorType.INTERVALYEAR to MinorType.INTERVAL"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: <p/>", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TagElement", "DEL TextElement: <p/>", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: limitations under the License.", "DEL Javadoc", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,"]}]}}, {"PreparedStatementProvider_diff": {"operations": ["Insert MethodInvocation(295) into MethodInvocation(303) at 0", "Insert SimpleName: put(296) into MethodInvocation(303) at 1", "Move MethodInvocation(304) into MethodInvocation(295) at 0", "Move SimpleName: put(305) into MethodInvocation(295) at 1", "Insert QualifiedName: MinorType.INTERVALDAY(289) into MethodInvocation(295) at 2", "Insert MethodInvocation(294) into MethodInvocation(295) at 3", "Update QualifiedName: MinorType.INTERVALDAY(298) to MinorType.INTERVALYEAR", "Insert TypeLiteral(292) into MethodInvocation(294) at 0", "Insert SimpleName: getName(293) into MethodInvocation(294) at 1", "Update QualifiedName: MinorType.INTERVALYEAR(290) to MinorType.INTERVAL", "Insert SimpleType: Period(291) into TypeLiteral(292) at 0", "Insert SimpleName: Period(290) into SimpleType: Period(291) at 0", "Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: <p/>(7)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(8)", "Delete TextElement: <p/>(9)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(10)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(11)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(12)", "Delete TextElement: See the License for the specific language governing permissions and(13)", "Delete TextElement: limitations under the License.(14)", "Delete TagElement(15)", "Delete Javadoc(16)"]}}, {"BitFunctions_cluster": {"actions": [{"root": "UPDATE from FunctionScope.SC_BOOLEAN_OPERATOR to FunctionScope.SIMPLE", "operations": ["UPD QualifiedName: FunctionScope.SC_BOOLEAN_OPERATOR from FunctionScope.SC_BOOLEAN_OPERATOR to FunctionScope.SIMPLE", "UPD QualifiedName: FunctionScope.SC_BOOLEAN_OPERATOR from FunctionScope.SC_BOOLEAN_OPERATOR to FunctionScope.SIMPLE"]}]}}, {"BitFunctions_diff": {"operations": ["Update QualifiedName: FunctionScope.SC_BOOLEAN_OPERATOR(49) to FunctionScope.SIMPLE", "Update QualifiedName: FunctionScope.SC_BOOLEAN_OPERATOR(106) to FunctionScope.SIMPLE"]}}, {"SimpleCastFunctions_cluster": {"actions": [{"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS QualifiedName: FunctionTemplate.ReturnType.STRING_CAST to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL Javadoc", "DEL TextElement: limitations under the License.", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."]}]}}, {"SimpleCastFunctions_diff": {"operations": ["Insert MemberValuePair(118) into NormalAnnotation(122) at 3", "Insert SimpleName: returnType(116) into MemberValuePair(118) at 0", "Insert QualifiedName: FunctionTemplate.ReturnType.STRING_CAST(117) into MemberValuePair(118) at 1", "Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)"]}}, {"StringFunctions_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS ImportDeclaration to CompilationUnit at 9", "INS QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.ReturnType to ImportDeclaration at 0"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS QualifiedName: ReturnType.SAME_IN_OUT_LENGTH to MemberValuePair at 1", "INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS QualifiedName: ReturnType.SAME_IN_OUT_LENGTH to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS MemberValuePair to NormalAnnotation at 3", "INS QualifiedName: ReturnType.SAME_IN_OUT_LENGTH to MemberValuePair at 1", "INS SimpleName: returnType to MemberValuePair at 0"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3", "INS QualifiedName: ReturnType.PAD to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: ReturnType.PAD to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: ReturnType.PAD to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: ReturnType.PAD to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS MemberValuePair to NormalAnnotation at 3", "INS QualifiedName: ReturnType.CONCAT to MemberValuePair at 1", "INS SimpleName: returnType to MemberValuePair at 0"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: ReturnType.CONCAT to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: ReturnType.CONCAT to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: ReturnType.CONCAT to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0", "INS QualifiedName: ReturnType.CONCAT to MemberValuePair at 1"]}, {"root": "INS MemberValuePair to NormalAnnotation at 3", "operations": ["INS QualifiedName: ReturnType.SAME_IN_OUT_LENGTH to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: returnType to MemberValuePair at 0"]}]}}, {"StringFunctions_diff": {"operations": ["Insert ImportDeclaration(19) into CompilationUnit(6691) at 9", "Insert QualifiedName: org.apache.drill.exec.expr.annotations.FunctionTemplate.ReturnType(18) into ImportDeclaration(19) at 0", "Insert MemberValuePair(1775) into NormalAnnotation(1779) at 3", "Insert MemberValuePair(1892) into NormalAnnotation(1896) at 3", "Insert MemberValuePair(2929) into NormalAnnotation(2933) at 3", "Insert MemberValuePair(3234) into NormalAnnotation(3238) at 3", "Insert MemberValuePair(3536) into NormalAnnotation(3540) at 3", "Insert MemberValuePair(3767) into NormalAnnotation(3771) at 3", "Insert MemberValuePair(4073) into NormalAnnotation(4077) at 3", "Insert MemberValuePair(5279) into NormalAnnotation(5283) at 3", "Insert MemberValuePair(5409) into NormalAnnotation(5413) at 3", "Insert MemberValuePair(5539) into NormalAnnotation(5543) at 3", "Insert MemberValuePair(5675) into NormalAnnotation(5679) at 3", "Insert MemberValuePair(5808) into NormalAnnotation(5812) at 3", "Insert MemberValuePair(6555) into NormalAnnotation(6559) at 3", "Insert SimpleName: returnType(1773) into MemberValuePair(1775) at 0", "Insert QualifiedName: ReturnType.SAME_IN_OUT_LENGTH(1774) into MemberValuePair(1775) at 1", "Insert SimpleName: returnType(1890) into MemberValuePair(1892) at 0", "Insert QualifiedName: ReturnType.SAME_IN_OUT_LENGTH(1891) into MemberValuePair(1892) at 1", "Insert SimpleName: returnType(2927) into MemberValuePair(2929) at 0", "Insert QualifiedName: ReturnType.SAME_IN_OUT_LENGTH(2928) into MemberValuePair(2929) at 1", "Insert SimpleName: returnType(3232) into MemberValuePair(3234) at 0", "Insert QualifiedName: ReturnType.PAD(3233) into MemberValuePair(3234) at 1", "Insert SimpleName: returnType(3534) into MemberValuePair(3536) at 0", "Insert QualifiedName: ReturnType.PAD(3535) into MemberValuePair(3536) at 1", "Insert SimpleName: returnType(3765) into MemberValuePair(3767) at 0", "Insert QualifiedName: ReturnType.PAD(3766) into MemberValuePair(3767) at 1", "Insert SimpleName: returnType(4071) into MemberValuePair(4073) at 0", "Insert QualifiedName: ReturnType.PAD(4072) into MemberValuePair(4073) at 1", "Insert SimpleName: returnType(5277) into MemberValuePair(5279) at 0", "Insert QualifiedName: ReturnType.CONCAT(5278) into MemberValuePair(5279) at 1", "Insert SimpleName: returnType(5407) into MemberValuePair(5409) at 0", "Insert QualifiedName: ReturnType.CONCAT(5408) into MemberValuePair(5409) at 1", "Insert SimpleName: returnType(5537) into MemberValuePair(5539) at 0", "Insert QualifiedName: ReturnType.CONCAT(5538) into MemberValuePair(5539) at 1", "Insert SimpleName: returnType(5673) into MemberValuePair(5675) at 0", "Insert QualifiedName: ReturnType.CONCAT(5674) into MemberValuePair(5675) at 1", "Insert SimpleName: returnType(5806) into MemberValuePair(5808) at 0", "Insert QualifiedName: ReturnType.CONCAT(5807) into MemberValuePair(5808) at 1", "Insert SimpleName: returnType(6553) into MemberValuePair(6555) at 0", "Insert QualifiedName: ReturnType.SAME_IN_OUT_LENGTH(6554) into MemberValuePair(6555) at 1"]}}, {"ProjectRecordBatch_cluster": {"actions": [{"root": "UPDATE from TypeHelper.VARCHAR_DEFAULT_CAST_LEN to Types.MAX_VARCHAR_LENGTH", "operations": ["UPD QualifiedName: TypeHelper.VARCHAR_DEFAULT_CAST_LEN from TypeHelper.VARCHAR_DEFAULT_CAST_LEN to Types.MAX_VARCHAR_LENGTH"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.drill.exec.expr.TypeHelper", "DEL ImportDeclaration"]}]}}, {"ProjectRecordBatch_diff": {"operations": ["Update QualifiedName: TypeHelper.VARCHAR_DEFAULT_CAST_LEN(2090) to Types.MAX_VARCHAR_LENGTH", "Delete QualifiedName: org.apache.drill.exec.expr.TypeHelper(56)", "Delete ImportDeclaration(57)"]}}, {"UnionAllRecordBatch_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 12"]}, {"root": "UPDATE from org.apache.drill.exec.expr.ValueVectorReadExpression to org.apache.drill.common.types.Types", "operations": ["UPD QualifiedName: org.apache.drill.exec.expr.ValueVectorReadExpression from org.apache.drill.exec.expr.ValueVectorReadExpression to org.apache.drill.common.types.Types"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: getType to MethodInvocation at 1", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: outputFields to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: MajorType to VariableDeclarationStatement at 0", "INS SimpleName: MajorType to SimpleType: MajorType at 0", "INS SimpleName: outputFieldType to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: index to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: outputField to VariableDeclarationFragment at 0", "INS SimpleName: create to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: outputFieldType to MethodInvocation at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: MaterializedField to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: MaterializedField to VariableDeclarationStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: getType to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getMinorType to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: setMinorType to MethodInvocation at 1", "INS SimpleName: builder to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: MajorType.Builder to VariableDeclarationStatement at 0", "INS SimpleName: MajorType to MethodInvocation at 0", "INS SimpleName: newBuilder to MethodInvocation at 1", "INS SimpleName: leftField to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getDataMode to MethodInvocation at 1", "INS QualifiedName: MajorType.Builder to SimpleType: MajorType.Builder at 0", "INS SimpleName: setMode to MethodInvocation at 1", "INS SimpleName: leftField to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: calculateTypePrecisionAndScale to MethodInvocation at 1", "INS SimpleName: rightField to MethodInvocation at 0", "INS SimpleName: builder to MethodInvocation at 4", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: builder to Assignment: = at 0", "INS SimpleName: Types to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getType to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: getAsUnescapedPath to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 5"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: MaterializedField to MethodInvocation at 2", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: inputPath to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: getType to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getType to MethodInvocation at 1", "INS SimpleName: builder to Assignment: = at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: rightField to MethodInvocation at 0", "INS SimpleName: calculateTypePrecisionAndScale to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: builder to MethodInvocation at 4", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: Types to MethodInvocation at 0", "INS SimpleName: leftField to MethodInvocation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS VariableDeclarationStatement to Block at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: outputMinorType to VariableDeclarationFragment at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS SimpleName: build to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: builder to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: builder to MethodInvocation at 0", "INS SimpleName: setMinorType to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: MinorType to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from MaterializedField to outputField", "operations": ["UPD SimpleName: MaterializedField from MaterializedField to outputField"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: expr", "DEL MethodInvocation", "DEL SimpleName: LogicalExpression", "DEL Modifier: final", "DEL SimpleType: LogicalExpression", "DEL VariableDeclarationStatement", "DEL SimpleName: context", "DEL SimpleName: getFunctionRegistry", "DEL SimpleName: materialize", "DEL SimpleName: current", "DEL SimpleName: collector", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: ExpressionTreeMaterializer", "DEL SimpleName: inputPath"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: collector", "DEL IfStatement", "DEL StringLiteral: \"Failure while trying to materialize incoming schema.  Errors:\\n %s.\"", "DEL SimpleName: hasErrors", "DEL ClassInstanceCreation", "DEL SimpleName: format", "DEL MethodInvocation", "DEL SimpleName: collector", "DEL ThrowStatement", "DEL SimpleName: SchemaChangeException", "DEL MethodInvocation", "DEL SimpleName: toErrorString", "DEL SimpleType: SchemaChangeException", "DEL SimpleName: String", "DEL Block", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: ValueVectorReadExpression", "DEL VariableDeclarationStatement", "DEL SimpleName: expr", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: ValueVectorReadExpression", "DEL SimpleName: vectorRead", "DEL SimpleName: ValueVectorReadExpression", "DEL SimpleType: ValueVectorReadExpression"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getMajorType", "DEL SimpleName: create", "DEL SimpleName: vectorRead", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: expr", "DEL MethodInvocation", "DEL SimpleName: getAsUnescapedPath", "DEL SimpleName: create", "DEL SimpleName: outputPath", "DEL VariableDeclarationStatement", "DEL SimpleName: getMajorType", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: outputField", "DEL MethodInvocation", "DEL SimpleName: MaterializedField"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: outputMinorType", "DEL VariableDeclarationStatement"]}, {"root": "DEL Assignment: =", "operations": ["DEL SimpleName: outputMinorType", "DEL Assignment: ="]}, {"root": "DEL Assignment: =", "operations": ["DEL Assignment: =", "DEL SimpleName: outputMinorType"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: DataMode", "DEL VariableDeclarationStatement", "DEL SimpleName: DataMode", "DEL SimpleName: dataMode", "DEL VariableDeclarationFragment"]}, {"root": "DEL SimpleName: dataMode", "operations": ["DEL SimpleName: dataMode"]}]}}, {"UnionAllRecordBatch_diff": {"operations": ["Move ImportDeclaration(37) into CompilationUnit(2335) at 12", "Update QualifiedName: org.apache.drill.exec.expr.ValueVectorReadExpression(36) to org.apache.drill.common.types.Types", "Insert VariableDeclarationStatement(662) into Block(788) at 0", "Insert VariableDeclarationStatement(674) into Block(788) at 1", "Move VariableDeclarationStatement(2027) into Block(2052) at 0", "Insert SimpleType: MajorType(653) into VariableDeclarationStatement(662) at 0", "Insert VariableDeclarationFragment(661) into VariableDeclarationStatement(662) at 1", "Move SimpleType: MaterializedField(765) into VariableDeclarationStatement(674) at 0", "Insert VariableDeclarationFragment(673) into VariableDeclarationStatement(674) at 1", "Insert VariableDeclarationStatement(1858) into Block(1885) at 0", "Insert ExpressionStatement(1871) into Block(1885) at 1", "Insert SimpleName: MajorType(652) into SimpleType: MajorType(653) at 0", "Insert SimpleName: outputFieldType(654) into VariableDeclarationFragment(661) at 0", "Insert MethodInvocation(660) into VariableDeclarationFragment(661) at 1", "Insert SimpleName: outputField(665) into VariableDeclarationFragment(673) at 0", "Insert MethodInvocation(672) into VariableDeclarationFragment(673) at 1", "Insert MethodInvocation(684) into MethodInvocation(685) at 2", "Insert SimpleType: MajorType.Builder(1840) into VariableDeclarationStatement(1858) at 0", "Insert VariableDeclarationFragment(1857) into VariableDeclarationStatement(1858) at 1", "Insert Assignment: =(1870) into ExpressionStatement(1871) at 0", "Insert MethodInvocation(658) into MethodInvocation(660) at 0", "Insert SimpleName: getType(659) into MethodInvocation(660) at 1", "Insert SimpleName: MaterializedField(666) into MethodInvocation(672) at 0", "Insert SimpleName: create(667) into MethodInvocation(672) at 1", "Move MethodInvocation(710) into MethodInvocation(672) at 2", "Insert SimpleName: outputFieldType(671) into MethodInvocation(672) at 3", "Move SimpleName: inputPath(659) into MethodInvocation(684) at 0", "Insert SimpleName: getAsUnescapedPath(683) into MethodInvocation(684) at 1", "Insert QualifiedName: MajorType.Builder(1839) into SimpleType: MajorType.Builder(1840) at 0", "Insert SimpleName: builder(1841) into VariableDeclarationFragment(1857) at 0", "Insert MethodInvocation(1856) into VariableDeclarationFragment(1857) at 1", "Insert SimpleName: builder(1859) into Assignment: =(1870) at 0", "Insert MethodInvocation(1869) into Assignment: =(1870) at 1", "Insert ExpressionStatement(1926) into Block(1927) at 1", "Insert VariableDeclarationStatement(1965) into Block(2000) at 3", "Move ExpressionStatement(2032) into Block(2000) at 6", "Move MethodInvocation(2017) into MethodInvocation(2037) at 2", "Insert SimpleName: outputFields(655) into MethodInvocation(658) at 0", "Insert SimpleName: get(656) into MethodInvocation(658) at 1", "Insert SimpleName: index(657) into MethodInvocation(658) at 2", "Insert MethodInvocation(1851) into MethodInvocation(1856) at 0", "Insert SimpleName: setMode(1852) into MethodInvocation(1856) at 1", "Insert MethodInvocation(1855) into MethodInvocation(1856) at 2", "Insert SimpleName: Types(1860) into MethodInvocation(1869) at 0", "Insert SimpleName: calculateTypePrecisionAndScale(1861) into MethodInvocation(1869) at 1", "Move MethodInvocation(1885) into MethodInvocation(1869) at 2", "Insert MethodInvocation(1867) into MethodInvocation(1869) at 3", "Insert SimpleName: builder(1868) into MethodInvocation(1869) at 4", "Insert MethodInvocation(1881) into MethodInvocation(1882) at 3", "Insert MethodInvocation(1912) into ExpressionStatement(1913) at 0", "Insert Assignment: =(1925) into ExpressionStatement(1926) at 0", "Move SimpleType: MinorType(1891) into VariableDeclarationStatement(1965) at 0", "Insert VariableDeclarationFragment(1964) into VariableDeclarationStatement(1965) at 1", "Update SimpleName: MaterializedField(706) to outputField", "Move SimpleName: MaterializedField(706) into MethodInvocation(692) at 2", "Insert MethodInvocation(1844) into MethodInvocation(1851) at 0", "Insert SimpleName: setMinorType(1845) into MethodInvocation(1851) at 1", "Insert MethodInvocation(1850) into MethodInvocation(1851) at 2", "Insert SimpleName: leftField(1853) into MethodInvocation(1855) at 0", "Insert SimpleName: getDataMode(1854) into MethodInvocation(1855) at 1", "Insert SimpleName: rightField(1865) into MethodInvocation(1867) at 0", "Insert SimpleName: getType(1866) into MethodInvocation(1867) at 1", "Insert SimpleName: builder(1879) into MethodInvocation(1881) at 0", "Insert SimpleName: build(1880) into MethodInvocation(1881) at 1", "Insert SimpleName: builder(1905) into MethodInvocation(1912) at 0", "Insert SimpleName: setMinorType(1906) into MethodInvocation(1912) at 1", "Move MethodInvocation(1911) into MethodInvocation(1912) at 2", "Insert SimpleName: builder(1914) into Assignment: =(1925) at 0", "Insert MethodInvocation(1924) into Assignment: =(1925) at 1", "Insert SimpleName: outputMinorType(1959) into VariableDeclarationFragment(1964) at 0", "Move MethodInvocation(1948) into VariableDeclarationFragment(1964) at 1", "Insert SimpleName: MajorType(1842) into MethodInvocation(1844) at 0", "Insert SimpleName: newBuilder(1843) into MethodInvocation(1844) at 1", "Insert MethodInvocation(1848) into MethodInvocation(1850) at 0", "Insert SimpleName: getMinorType(1849) into MethodInvocation(1850) at 1", "Insert SimpleName: Types(1915) into MethodInvocation(1924) at 0", "Insert SimpleName: calculateTypePrecisionAndScale(1916) into MethodInvocation(1924) at 1", "Insert MethodInvocation(1919) into MethodInvocation(1924) at 2", "Insert MethodInvocation(1922) into MethodInvocation(1924) at 3", "Insert SimpleName: builder(1923) into MethodInvocation(1924) at 4", "Insert SimpleName: leftField(1846) into MethodInvocation(1848) at 0", "Insert SimpleName: getType(1847) into MethodInvocation(1848) at 1", "Insert SimpleName: leftField(1917) into MethodInvocation(1919) at 0", "Insert SimpleName: getType(1918) into MethodInvocation(1919) at 1", "Insert SimpleName: rightField(1920) into MethodInvocation(1922) at 0", "Insert SimpleName: getType(1921) into MethodInvocation(1922) at 1", "Delete Modifier: final(661)", "Delete SimpleName: LogicalExpression(662)", "Delete SimpleType: LogicalExpression(663)", "Delete SimpleName: expr(664)", "Delete SimpleName: ExpressionTreeMaterializer(665)", "Delete SimpleName: materialize(666)", "Delete SimpleName: inputPath(667)", "Delete SimpleName: current(668)", "Delete SimpleName: collector(669)", "Delete SimpleName: context(670)", "Delete SimpleName: getFunctionRegistry(671)", "Delete MethodInvocation(672)", "Delete MethodInvocation(673)", "Delete VariableDeclarationFragment(674)", "Delete VariableDeclarationStatement(675)", "Delete SimpleName: collector(676)", "Delete SimpleName: hasErrors(677)", "Delete MethodInvocation(678)", "Delete SimpleName: SchemaChangeException(679)", "Delete SimpleType: SchemaChangeException(680)", "Delete SimpleName: String(681)", "Delete SimpleName: format(682)", "Delete StringLiteral: \"Failure while trying to materialize incoming schema.  Errors:\\n %s.\"(683)", "Delete SimpleName: collector(684)", "Delete SimpleName: toErrorString(685)", "Delete MethodInvocation(686)", "Delete MethodInvocation(687)", "Delete ClassInstanceCreation(688)", "Delete ThrowStatement(689)", "Delete Block(690)", "Delete IfStatement(691)", "Delete SimpleName: ValueVectorReadExpression(692)", "Delete SimpleType: ValueVectorReadExpression(693)", "Delete SimpleName: vectorRead(694)", "Delete SimpleName: ValueVectorReadExpression(695)", "Delete SimpleType: ValueVectorReadExpression(696)", "Delete SimpleName: expr(697)", "Delete CastExpression(698)", "Delete VariableDeclarationFragment(699)", "Delete VariableDeclarationStatement(700)", "Delete SimpleName: create(707)", "Delete SimpleName: vectorRead(711)", "Delete SimpleName: getMajorType(712)", "Delete MethodInvocation(713)", "Delete MethodInvocation(714)", "Delete SimpleName: outputField(766)", "Delete SimpleName: MaterializedField(767)", "Delete SimpleName: create(768)", "Delete SimpleName: outputPath(769)", "Delete SimpleName: getAsUnescapedPath(770)", "Delete MethodInvocation(771)", "Delete SimpleName: expr(772)", "Delete SimpleName: getMajorType(773)", "Delete MethodInvocation(774)", "Delete MethodInvocation(775)", "Delete VariableDeclarationFragment(776)", "Delete VariableDeclarationStatement(777)", "Delete SimpleName: outputMinorType(1892)", "Delete VariableDeclarationFragment(1893)", "Delete VariableDeclarationStatement(1894)", "Delete SimpleName: outputMinorType(1906)", "Delete Assignment: =(1912)", "Delete SimpleName: outputMinorType(1944)", "Delete Assignment: =(1949)", "Delete SimpleName: DataMode(2011)", "Delete SimpleType: DataMode(2012)", "Delete SimpleName: dataMode(2013)", "Delete VariableDeclarationFragment(2018)", "Delete VariableDeclarationStatement(2019)", "Delete SimpleName: dataMode(2035)"]}}, {"FindLimit0Visitor_cluster": {"actions": [{"root": "INS EnhancedForStatement to Block at 2", "operations": ["INS Block to IfStatement at 1", "INS Block to IfStatement at 2", "INS EnhancedForStatement to Block at 2", "INS Block to EnhancedForStatement at 2", "INS SimpleName: field to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to Block at 1", "INS SimpleName: TypeInferenceUtils to MethodInvocation at 0", "INS SimpleName: fieldList to EnhancedForStatement at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS IfStatement to Block at 1", "INS SimpleName: sqlTypeName to MethodInvocation at 2", "INS SimpleName: getPrecision to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: isScalarStringType to MethodInvocation at 1", "INS SimpleName: builder to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: setPrecision to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from List<TypeProtos.DataMode> to List<TypeProtos.MajorType>", "operations": ["UPD ParameterizedType: List<TypeProtos.DataMode> from List<TypeProtos.DataMode> to List<TypeProtos.MajorType>", "UPD ParameterizedType: List<TypeProtos.DataMode> from List<TypeProtos.DataMode> to List<TypeProtos.MajorType>", "UPD ParameterizedType: List<SqlTypeName> from List<SqlTypeName> to List<TypeProtos.MajorType>"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "MOVE from ParameterizedType: List<TypeProtos.DataMode>", "operations": ["MOV SimpleType: List to ParameterizedType: List<TypeProtos.DataMode> at 0"]}, {"root": "UPDATE from TypeProtos.DataMode to TypeProtos.MajorType", "operations": ["UPD SimpleType: TypeProtos.DataMode from TypeProtos.DataMode to TypeProtos.MajorType", "UPD SimpleType: SqlTypeName from SqlTypeName to TypeProtos.MajorType", "UPD SimpleType: TypeProtos.DataMode from TypeProtos.DataMode to TypeProtos.MajorType", "UPD QualifiedName: TypeProtos.DataMode from TypeProtos.DataMode to TypeProtos.MajorType", "UPD QualifiedName: TypeProtos.DataMode from TypeProtos.DataMode to TypeProtos.MajorType"]}, {"root": "UPDATE from dataModes to columnTypes", "operations": ["UPD SimpleName: dataModes from dataModes to columnTypes"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from ParameterizedType: List<TypeProtos.DataMode>", "operations": ["MOV SimpleType: List to ParameterizedType: List<TypeProtos.DataMode> at 0"]}, {"root": "INS QualifiedName: TypeProtos.MajorType to SimpleType: SqlTypeName at 0", "operations": ["INS QualifiedName: TypeProtos.MajorType to SimpleType: SqlTypeName at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV InfixExpression: == to MethodInvocation at 2"]}, {"root": "INS StringLiteral: \"Number of columns and their types should match\" to MethodInvocation at 3", "operations": ["INS StringLiteral: \"Number of columns and their types should match\" to MethodInvocation at 3"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "INS SimpleType: TypeProtos.MajorType.Builder to VariableDeclarationStatement at 1", "operations": ["INS SimpleType: TypeProtos.MajorType.Builder to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from TypeProtos.DataMode to TypeProtos.MajorType.Builder", "operations": ["UPD QualifiedName: TypeProtos.DataMode from TypeProtos.DataMode to TypeProtos.MajorType.Builder"]}, {"root": "MOVE from SimpleType: TypeProtos.MajorType.Builder", "operations": ["MOV QualifiedName: TypeProtos.DataMode to SimpleType: TypeProtos.MajorType.Builder at 0"]}, {"root": "UPDATE from sqlTypeName to builder", "operations": ["UPD SimpleName: sqlTypeName from sqlTypeName to builder", "UPD SimpleName: dataModes from dataModes to builder"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: sqlTypeName to MethodInvocation at 2", "INS SimpleName: setMinorType to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: build to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: sqlTypeName to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from add to setMode", "operations": ["UPD SimpleName: add from add to setMode"]}, {"root": "UPDATE from Lists to TypeInferenceUtils", "operations": ["UPD SimpleName: Lists from Lists to TypeInferenceUtils"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Lists to MethodInvocation at 0", "MOV SimpleName: newArrayList to MethodInvocation at 1"]}, {"root": "UPDATE from newArrayList to getDrillTypeFromCalciteType", "operations": ["UPD SimpleName: newArrayList from newArrayList to getDrillTypeFromCalciteType"]}, {"root": "UPDATE from dataModes to newBuilder", "operations": ["UPD SimpleName: dataModes from dataModes to newBuilder"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: dataModes to MethodInvocation at 1"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TagElement", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL Javadoc", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: limitations under the License.", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file"]}, {"root": "DEL SimpleName: SqlTypeName", "operations": ["DEL SimpleName: SqlTypeName"]}, {"root": "DEL ParameterizedType: List<TypeProtos.DataMode>", "operations": ["DEL SimpleName: List", "DEL ParameterizedType: List<TypeProtos.DataMode>", "DEL SimpleType: TypeProtos.DataMode", "DEL SimpleType: List"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL EnhancedForStatement", "DEL Block", "DEL Block", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: fieldList"]}, {"root": "DEL SimpleName: dataModes", "operations": ["DEL SimpleName: dataModes"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL Modifier: public", "DEL ParameterizedType: List<SqlTypeName>", "DEL FieldDeclaration", "DEL SimpleType: SqlTypeName", "DEL SimpleName: SqlTypeName"]}, {"root": "DEL SimpleType: List", "operations": ["DEL SimpleType: List", "DEL SimpleName: List"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: dataModes"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: columnTypes", "DEL SimpleName: SqlTypeName", "DEL ParameterizedType: List<SqlTypeName>", "DEL SimpleType: SqlTypeName", "DEL SingleVariableDeclaration"]}, {"root": "DEL SimpleType: List", "operations": ["DEL SimpleName: List", "DEL SimpleType: List"]}, {"root": "DEL InfixExpression: &&", "operations": ["DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: columnTypes", "DEL SimpleName: size", "DEL MethodInvocation", "DEL SimpleName: size", "DEL InfixExpression: ==", "DEL SimpleName: dataModes"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL SimpleName: dataModes", "DEL ThisExpression", "DEL FieldAccess", "DEL SimpleName: dataModes", "DEL ExpressionStatement"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: i", "DEL SimpleName: TypeInferenceUtils", "DEL SimpleName: build", "DEL MethodInvocation", "DEL SimpleName: get", "DEL MethodInvocation", "DEL SimpleName: setMode", "DEL SimpleName: setMinorType", "DEL MethodInvocation", "DEL SimpleName: dataModes", "DEL SimpleName: getDrillTypeFromCalciteType", "DEL MethodInvocation", "DEL MethodInvocation"]}]}}, {"FindLimit0Visitor_diff": {"operations": ["Insert EnhancedForStatement(231) into Block(275) at 2", "Update ParameterizedType: List<TypeProtos.DataMode>(550) to List<TypeProtos.MajorType>", "Move VariableDeclarationFragment(542) into FieldDeclaration(545) at 3", "Update ParameterizedType: List<SqlTypeName>(164) to List<TypeProtos.MajorType>", "Move SingleVariableDeclaration(187) into EnhancedForStatement(231) at 0", "Insert SimpleName: fieldList(161) into EnhancedForStatement(231) at 1", "Insert Block(230) into EnhancedForStatement(231) at 2", "Move SimpleType: List(537) into ParameterizedType: List<TypeProtos.MajorType>(542) at 0", "Update SimpleType: TypeProtos.DataMode(549) to TypeProtos.MajorType", "Update ParameterizedType: List<TypeProtos.DataMode>(574) to List<TypeProtos.MajorType>", "Update SimpleName: dataModes(575) to columnTypes", "Update SimpleType: SqlTypeName(163) to TypeProtos.MajorType", "Move VariableDeclarationStatement(199) into Block(230) at 0", "Insert IfStatement(229) into Block(230) at 1", "Update QualifiedName: TypeProtos.DataMode(548) to TypeProtos.MajorType", "Move SimpleType: List(564) into ParameterizedType: List<TypeProtos.MajorType>(559) at 0", "Update SimpleType: TypeProtos.DataMode(573) to TypeProtos.MajorType", "Insert QualifiedName: TypeProtos.MajorType(147) into SimpleType: TypeProtos.MajorType(148) at 0", "Move PrefixExpression: !(204) into IfStatement(229) at 0", "Move Block(207) into IfStatement(229) at 1", "Insert Block(228) into IfStatement(229) at 2", "Update QualifiedName: TypeProtos.DataMode(572) to TypeProtos.MajorType", "Move InfixExpression: ==(585) into MethodInvocation(572) at 2", "Insert StringLiteral: \"Number of columns and their types should match\"(571) into MethodInvocation(572) at 3", "Move VariableDeclarationStatement(182) into Block(228) at 0", "Insert IfStatement(220) into Block(228) at 1", "Move ExpressionStatement(212) into Block(228) at 2", "Insert SimpleType: TypeProtos.MajorType.Builder(183) into VariableDeclarationStatement(205) at 1", "Insert MethodInvocation(209) into IfStatement(220) at 0", "Insert Block(219) into IfStatement(220) at 1", "Move MethodInvocation(662) into VariableDeclarationFragment(623) at 1", "Update QualifiedName: TypeProtos.DataMode(174) to TypeProtos.MajorType.Builder", "Move QualifiedName: TypeProtos.DataMode(174) into SimpleType: TypeProtos.MajorType.Builder(183) at 0", "Update SimpleName: dataModes(177) to builder", "Insert MethodInvocation(203) into VariableDeclarationFragment(204) at 1", "Insert SimpleName: TypeInferenceUtils(206) into MethodInvocation(209) at 0", "Insert SimpleName: isScalarStringType(207) into MethodInvocation(209) at 1", "Insert SimpleName: sqlTypeName(208) into MethodInvocation(209) at 2", "Insert ExpressionStatement(218) into Block(219) at 0", "Insert MethodInvocation(225) into MethodInvocation(226) at 2", "Move MethodInvocation(223) into MethodInvocation(203) at 0", "Insert SimpleName: setMinorType(198) into MethodInvocation(203) at 1", "Insert MethodInvocation(202) into MethodInvocation(203) at 2", "Insert MethodInvocation(217) into ExpressionStatement(218) at 0", "Update SimpleName: sqlTypeName(210) to builder", "Move SimpleName: sqlTypeName(210) into MethodInvocation(225) at 0", "Insert SimpleName: build(224) into MethodInvocation(225) at 1", "Move MethodInvocation(649) into MethodInvocation(197) at 0", "Update SimpleName: add(214) to setMode", "Update SimpleName: Lists(178) to TypeInferenceUtils", "Move SimpleName: Lists(178) into MethodInvocation(202) at 0", "Update SimpleName: newArrayList(179) to getDrillTypeFromCalciteType", "Move SimpleName: newArrayList(179) into MethodInvocation(202) at 1", "Insert SimpleName: sqlTypeName(201) into MethodInvocation(202) at 2", "Insert SimpleName: builder(210) into MethodInvocation(217) at 0", "Insert SimpleName: setPrecision(211) into MethodInvocation(217) at 1", "Insert MethodInvocation(216) into MethodInvocation(217) at 2", "Insert MethodInvocation(214) into MethodInvocation(216) at 0", "Insert SimpleName: getPrecision(215) into MethodInvocation(216) at 1", "Insert SimpleName: field(212) into MethodInvocation(214) at 0", "Insert SimpleName: getType(213) into MethodInvocation(214) at 1", "Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete SimpleName: SqlTypeName(162)", "Delete SimpleName: List(172)", "Delete SimpleType: List(173)", "Delete SimpleType: TypeProtos.DataMode(175)", "Delete ParameterizedType: List<TypeProtos.DataMode>(176)", "Delete MethodInvocation(180)", "Delete SimpleName: fieldList(188)", "Delete ExpressionStatement(224)", "Delete Block(225)", "Delete IfStatement(226)", "Delete Block(227)", "Delete EnhancedForStatement(228)", "Delete SimpleName: dataModes(253)", "Delete Modifier: public(534)", "Delete Modifier: final(535)", "Delete SimpleName: SqlTypeName(538)", "Delete SimpleType: SqlTypeName(539)", "Delete ParameterizedType: List<SqlTypeName>(540)", "Delete FieldDeclaration(543)", "Delete SimpleName: List(546)", "Delete SimpleType: List(547)", "Delete SimpleName: dataModes(551)", "Delete VariableDeclarationFragment(552)", "Delete SimpleName: SqlTypeName(565)", "Delete SimpleType: SqlTypeName(566)", "Delete ParameterizedType: List<SqlTypeName>(567)", "Delete SimpleName: columnTypes(568)", "Delete SingleVariableDeclaration(569)", "Delete SimpleName: List(570)", "Delete SimpleType: List(571)", "Delete SimpleName: columnTypes(586)", "Delete SimpleName: size(587)", "Delete MethodInvocation(588)", "Delete SimpleName: dataModes(589)", "Delete SimpleName: size(590)", "Delete MethodInvocation(591)", "Delete InfixExpression: ==(592)", "Delete InfixExpression: &&(593)", "Delete ThisExpression(608)", "Delete SimpleName: dataModes(609)", "Delete FieldAccess(610)", "Delete SimpleName: dataModes(611)", "Delete Assignment: =(612)", "Delete ExpressionStatement(613)", "Delete SimpleName: setMode(650)", "Delete SimpleName: dataModes(651)", "Delete SimpleName: get(652)", "Delete SimpleName: i(653)", "Delete MethodInvocation(654)", "Delete MethodInvocation(655)", "Delete SimpleName: setMinorType(656)", "Delete SimpleName: TypeInferenceUtils(657)", "Delete SimpleName: getDrillTypeFromCalciteType(658)", "Delete MethodInvocation(663)", "Delete MethodInvocation(664)", "Delete SimpleName: build(665)", "Delete MethodInvocation(666)"]}}], "commit_stats": [{"total_files": 79, "deleted_files": 11, "testing": "True", "maintenance": "True", "build": "False"}]}