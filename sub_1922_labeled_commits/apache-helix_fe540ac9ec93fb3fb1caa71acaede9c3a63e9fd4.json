{"application": "apache-helix", "csha": "fe540ac9ec93fb3fb1caa71acaede9c3a63e9fd4", "files": [{"FixedTargetTaskAssignmentCalculator_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 17", "operations": ["INS QualifiedName: org.apache.log4j.Logger to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 17"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getLogger to MethodInvocation at 1", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: FixedTargetTaskAssignmentCalculator to TypeLiteral at 0", "INS SimpleType: Logger to FieldDeclaration at 3", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: Logger to MethodInvocation at 0", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS SimpleName: Logger to SimpleType: Logger at 0", "INS SimpleName: LOG to VariableDeclarationFragment at 0", "INS SimpleName: FixedTargetTaskAssignmentCalculator to SimpleType: FixedTargetTaskAssignmentCalculator at 0", "INS TypeLiteral to MethodInvocation at 2", "INS Modifier: final to FieldDeclaration at 2", "INS Modifier: static to FieldDeclaration at 1"]}, {"root": "INS TextElement: return empty set if target resource does not exist. to TagElement at 4", "operations": ["INS TextElement: return empty set if target resource does not exist. to TagElement at 4"]}, {"root": "INS Block to IfStatement at 2", "operations": ["INS StringLiteral: \"Missing target resource for the scheduled job!\" to MethodInvocation at 2", "INS NullLiteral to InfixExpression: != at 1", "INS Block to IfStatement at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: warn to MethodInvocation at 1", "INS IfStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: tgtResourceIs to InfixExpression: != at 0", "INS InfixExpression: != to IfStatement at 0", "INS Block to IfStatement at 2"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS StringLiteral: \"Missing target resource for the scheduled job!\" to MethodInvocation at 2", "INS SimpleName: LOG to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: warn to MethodInvocation at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "DEL TextElement: <p/>", "operations": ["DEL TextElement: <p/>"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: tgtResourceIs", "DEL ReturnStatement", "DEL NullLiteral", "DEL InfixExpression: ==", "DEL Block", "DEL IfStatement", "DEL NullLiteral"]}]}}, {"FixedTargetTaskAssignmentCalculator_diff": {"operations": ["Insert ImportDeclaration(35) into CompilationUnit(674) at 17", "Insert QualifiedName: org.apache.log4j.Logger(34) into ImportDeclaration(35) at 0", "Insert FieldDeclaration(58) into TypeDeclaration: class(673) at 4", "Insert Modifier: private(45) into FieldDeclaration(58) at 0", "Insert Modifier: static(46) into FieldDeclaration(58) at 1", "Insert Modifier: final(47) into FieldDeclaration(58) at 2", "Insert SimpleType: Logger(49) into FieldDeclaration(58) at 3", "Insert VariableDeclarationFragment(57) into FieldDeclaration(58) at 4", "Insert SimpleName: Logger(48) into SimpleType: Logger(49) at 0", "Insert SimpleName: LOG(50) into VariableDeclarationFragment(57) at 0", "Insert MethodInvocation(56) into VariableDeclarationFragment(57) at 1", "Insert SimpleName: Logger(51) into MethodInvocation(56) at 0", "Insert SimpleName: getLogger(52) into MethodInvocation(56) at 1", "Insert TypeLiteral(55) into MethodInvocation(56) at 2", "Insert TextElement: return empty set if target resource does not exist.(242) into TagElement(243) at 3", "Insert Block(323) into IfStatement(324) at 2", "Insert SimpleType: FixedTargetTaskAssignmentCalculator(54) into TypeLiteral(55) at 0", "Insert ExpressionStatement(171) into Block(176) at 0", "Insert IfStatement(322) into Block(323) at 0", "Insert SimpleName: FixedTargetTaskAssignmentCalculator(53) into SimpleType: FixedTargetTaskAssignmentCalculator(54) at 0", "Insert MethodInvocation(170) into ExpressionStatement(171) at 0", "Insert InfixExpression: !=(307) into IfStatement(322) at 0", "Move Block(298) into IfStatement(322) at 1", "Insert Block(321) into IfStatement(322) at 2", "Insert SimpleName: LOG(167) into MethodInvocation(170) at 0", "Insert SimpleName: warn(168) into MethodInvocation(170) at 1", "Insert StringLiteral: \"Missing target resource for the scheduled job!\"(169) into MethodInvocation(170) at 2", "Insert SimpleName: tgtResourceIs(305) into InfixExpression: !=(307) at 0", "Insert NullLiteral(306) into InfixExpression: !=(307) at 1", "Insert ExpressionStatement(320) into Block(321) at 0", "Insert MethodInvocation(319) into ExpressionStatement(320) at 0", "Insert SimpleName: LOG(316) into MethodInvocation(319) at 0", "Insert SimpleName: warn(317) into MethodInvocation(319) at 1", "Insert StringLiteral: \"Missing target resource for the scheduled job!\"(318) into MethodInvocation(319) at 2", "Delete TextElement: <p/>(219)", "Delete SimpleName: tgtResourceIs(244)", "Delete NullLiteral(245)", "Delete InfixExpression: ==(246)", "Delete NullLiteral(247)", "Delete ReturnStatement(248)", "Delete Block(249)", "Delete IfStatement(250)"]}}, {"JobRebalancer_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS SimpleName: jobName to SingleVariableDeclaration at 1", "INS SimpleName: setFinishTime to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ExpressionStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: markJobFailed to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: System to MethodInvocation at 0", "INS SimpleName: currentTimeMillis to MethodInvocation at 1", "INS SimpleType: WorkflowConfig to SingleVariableDeclaration at 0", "INS SimpleName: jobContext to MethodInvocation at 0", "INS IfStatement to Block at 3", "INS SimpleName: workflowConfig to MethodInvocation at 2", "INS SimpleName: currentTime to VariableDeclarationFragment at 0", "INS SimpleName: workflowContext to MethodInvocation at 0", "INS SimpleName: isWorkflowFinished to MethodInvocation at 0", "INS SimpleType: WorkflowContext to SingleVariableDeclaration at 0", "INS SimpleName: workflowConfig to SingleVariableDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: private to MethodDeclaration at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: JobContext to SimpleType: JobContext at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: workflowContext to MethodInvocation at 0", "INS Block to MethodDeclaration at 7", "INS SimpleName: currentTime to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleType: JobContext to SingleVariableDeclaration at 0", "INS QualifiedName: TaskState.FAILED to MethodInvocation at 3", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS SimpleName: setJobState to MethodInvocation at 1", "INS SimpleName: WorkflowContext to SimpleType: WorkflowContext at 0", "INS SimpleName: WorkflowConfig to SimpleType: WorkflowConfig at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: workflowContext to SingleVariableDeclaration at 1", "INS SimpleName: workflowContext to MethodInvocation at 1", "INS SimpleName: jobContext to SingleVariableDeclaration at 1", "INS SimpleName: jobName to MethodInvocation at 2", "INS SimpleName: currentTime to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: setFinishTime to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS SimpleType: String to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: workflowContext to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: isWorkflowFinished to MethodInvocation at 0", "INS SimpleName: setFinishTime to MethodInvocation at 1", "INS SimpleName: workflowContext to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: workflowContext to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: System to MethodInvocation at 0", "INS SimpleType: WorkflowContext to SingleVariableDeclaration at 0", "INS SimpleName: workflowConfig to MethodInvocation at 2", "INS SimpleName: JobContext to SimpleType: JobContext at 0", "INS SimpleName: currentTime to MethodInvocation at 2", "INS SimpleName: workflowContext to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS SimpleName: currentTimeMillis to MethodInvocation at 1", "INS Modifier: private to MethodDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: setJobState to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: WorkflowConfig to SimpleType: WorkflowConfig at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: JobContext to SingleVariableDeclaration at 0", "INS SimpleName: setFinishTime to MethodInvocation at 1", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS MethodInvocation to IfStatement at 0", "INS IfStatement to Block at 3", "INS SimpleType: WorkflowConfig to SingleVariableDeclaration at 0", "INS SimpleName: markJobComplete to MethodDeclaration at 2", "INS SimpleName: currentTime to MethodInvocation at 2", "INS SimpleName: currentTime to VariableDeclarationFragment at 0", "INS Block to MethodDeclaration at 7", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: TaskState.COMPLETED to MethodInvocation at 3", "INS SimpleName: jobName to MethodInvocation at 2", "INS SimpleName: WorkflowContext to SimpleType: WorkflowContext at 0", "INS SimpleName: jobContext to MethodInvocation at 0", "INS SimpleName: jobContext to SingleVariableDeclaration at 1", "INS SimpleName: workflowConfig to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: jobName to SingleVariableDeclaration at 1"]}, {"root": "INS IfStatement to Block at 8", "operations": ["INS SimpleName: allPartitions to MethodInvocation at 0", "INS IfStatement to Block at 8", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: ResourceAssignment to ClassInstanceCreation at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS QualifiedName: TaskPartitionState.ERROR to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: ResourceAssignment to SimpleType: ResourceAssignment at 0", "INS NullLiteral to InfixExpression: == at 1", "INS InfixExpression: == to InfixExpression: || at 0", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: jobResource to ClassInstanceCreation at 1", "INS Block to IfStatement at 1", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS ReturnStatement to Block at 3", "INS SimpleName: allPartitions to InfixExpression: == at 0", "INS BooleanLiteral: false to MethodInvocation at 3"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 11"]}, {"root": "INS IfStatement to Block at 14", "operations": ["INS Block to IfStatement at 1", "INS IfStatement to Block at 14"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from workflowCtx to LOG", "operations": ["UPD SimpleName: workflowCtx from workflowCtx to LOG", "UPD SimpleName: workflowCtx from workflowCtx to LOG"]}, {"root": "UPDATE from setWorkflowState to debug", "operations": ["UPD SimpleName: setWorkflowState from setWorkflowState to debug"]}, {"root": "INS InfixExpression: + to MethodInvocation at 2", "operations": ["INS StringLiteral: \"All partitions: \" to InfixExpression: + at 0", "INS SimpleName: allPartitions to InfixExpression: + at 1", "INS StringLiteral: \" taskAssignment: \" to InfixExpression: + at 2", "INS StringLiteral: \" excludedInstances: \" to InfixExpression: + at 4", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: taskAssignments to InfixExpression: + at 3", "INS SimpleName: excludedInstances to InfixExpression: + at 5"]}, {"root": "UPDATE from setJobState to warn", "operations": ["UPD SimpleName: setJobState from setJobState to warn"]}, {"root": "INS InfixExpression: + to MethodInvocation at 2", "operations": ["INS StringLiteral: \"Missing task partition mapping for job \" to InfixExpression: + at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \", marked the job as FAILED!\" to InfixExpression: + at 2", "INS SimpleName: jobResource to InfixExpression: + at 1"]}, {"root": "INS SimpleName: markJobFailed to MethodInvocation at 0", "operations": ["INS SimpleName: markJobFailed to MethodInvocation at 0"]}, {"root": "INS SimpleName: jobResource to MethodInvocation at 1", "operations": ["INS SimpleName: jobResource to MethodInvocation at 1"]}, {"root": "UPDATE from workflowCtx to workflowConfig", "operations": ["UPD SimpleName: workflowCtx from workflowCtx to workflowConfig", "UPD SimpleName: setFinishTime from setFinishTime to workflowConfig", "UPD SimpleName: setFinishTime from setFinishTime to workflowConfig"]}, {"root": "UPDATE from currentTime to workflowCtx", "operations": ["UPD SimpleName: currentTime from currentTime to workflowCtx", "UPD SimpleName: currentTime from currentTime to workflowCtx"]}, {"root": "UPDATE from isWorkflowComplete to markAllPartitionsError", "operations": ["UPD SimpleName: isWorkflowComplete from isWorkflowComplete to markAllPartitionsError"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: workflowCtx to MethodInvocation at 1", "MOV SimpleName: isWorkflowComplete to MethodInvocation at 0"]}, {"root": "UPDATE from workflowConfig to jobCtx", "operations": ["UPD SimpleName: workflowConfig from workflowConfig to jobCtx", "UPD SimpleName: workflowCtx from workflowCtx to jobCtx", "UPD SimpleName: workflowCtx from workflowCtx to jobCtx"]}, {"root": "INS SimpleName: markJobComplete to MethodInvocation at 0", "operations": ["INS SimpleName: markJobComplete to MethodInvocation at 0"]}, {"root": "INS SimpleName: jobResource to MethodInvocation at 1", "operations": ["INS SimpleName: jobResource to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from setJobState to markJobFailed", "operations": ["UPD SimpleName: setJobState from setJobState to markJobFailed"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setJobState to MethodInvocation at 0", "MOV SimpleName: jobResource to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: workflowConfig to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: workflowCtx to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: workflowCtx to MethodInvocation at 4"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Date"]}, {"root": "DEL SimpleName: jobResource", "operations": ["DEL SimpleName: jobResource"]}, {"root": "DEL QualifiedName: TaskState.COMPLETED", "operations": ["DEL QualifiedName: TaskState.COMPLETED"]}, {"root": "DEL QualifiedName: TaskState.COMPLETED", "operations": ["DEL QualifiedName: TaskState.COMPLETED"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL PrimitiveType: long", "DEL SimpleName: currentTime", "DEL VariableDeclarationFragment", "DEL SimpleName: finishTime"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL QualifiedName: TaskState.FAILED", "DEL MethodInvocation", "DEL SimpleName: workflowCtx", "DEL ExpressionStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL QualifiedName: TaskState.FAILED", "DEL SimpleName: isTerminable", "DEL SimpleName: setWorkflowState", "DEL Block", "DEL SimpleName: setFinishTime", "DEL SimpleName: finishTime", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL IfStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: finishTime", "DEL SimpleName: jobCtx", "DEL SimpleName: setFinishTime"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL SimpleName: workflowConfig", "DEL MethodInvocation", "DEL IfStatement", "DEL IfStatement", "DEL Block"]}]}}, {"JobRebalancer_diff": {"operations": ["Insert MethodDeclaration(1699) into TypeDeclaration: class(2749) at 11", "Insert MethodDeclaration(1749) into TypeDeclaration: class(2749) at 12", "Insert Modifier: private(1650) into MethodDeclaration(1699) at 0", "Insert PrimitiveType: void(1651) into MethodDeclaration(1699) at 1", "Insert SimpleName: markJobFailed(1652) into MethodDeclaration(1699) at 2", "Insert SingleVariableDeclaration(1656) into MethodDeclaration(1699) at 3", "Insert SingleVariableDeclaration(1660) into MethodDeclaration(1699) at 4", "Insert SingleVariableDeclaration(1664) into MethodDeclaration(1699) at 5", "Insert SingleVariableDeclaration(1668) into MethodDeclaration(1699) at 6", "Insert Block(1698) into MethodDeclaration(1699) at 7", "Insert Modifier: private(1700) into MethodDeclaration(1749) at 0", "Insert PrimitiveType: void(1701) into MethodDeclaration(1749) at 1", "Insert SimpleName: markJobComplete(1702) into MethodDeclaration(1749) at 2", "Insert SingleVariableDeclaration(1706) into MethodDeclaration(1749) at 3", "Insert SingleVariableDeclaration(1710) into MethodDeclaration(1749) at 4", "Insert SingleVariableDeclaration(1714) into MethodDeclaration(1749) at 5", "Insert SingleVariableDeclaration(1718) into MethodDeclaration(1749) at 6", "Insert Block(1748) into MethodDeclaration(1749) at 7", "Insert IfStatement(822) into Block(1648) at 8", "Move ExpressionStatement(1374) into Block(1648) at 11", "Insert IfStatement(1391) into Block(1648) at 14", "Insert SimpleType: String(1654) into SingleVariableDeclaration(1656) at 0", "Insert SimpleName: jobName(1655) into SingleVariableDeclaration(1656) at 1", "Insert SimpleType: JobContext(1658) into SingleVariableDeclaration(1660) at 0", "Insert SimpleName: jobContext(1659) into SingleVariableDeclaration(1660) at 1", "Insert SimpleType: WorkflowConfig(1662) into SingleVariableDeclaration(1664) at 0", "Insert SimpleName: workflowConfig(1663) into SingleVariableDeclaration(1664) at 1", "Insert SimpleType: WorkflowContext(1666) into SingleVariableDeclaration(1668) at 0", "Insert SimpleName: workflowContext(1667) into SingleVariableDeclaration(1668) at 1", "Insert VariableDeclarationStatement(1675) into Block(1698) at 0", "Insert ExpressionStatement(1681) into Block(1698) at 1", "Insert ExpressionStatement(1686) into Block(1698) at 2", "Insert IfStatement(1697) into Block(1698) at 3", "Insert SimpleType: String(1704) into SingleVariableDeclaration(1706) at 0", "Insert SimpleName: jobName(1705) into SingleVariableDeclaration(1706) at 1", "Insert SimpleType: JobContext(1708) into SingleVariableDeclaration(1710) at 0", "Insert SimpleName: jobContext(1709) into SingleVariableDeclaration(1710) at 1", "Insert SimpleType: WorkflowConfig(1712) into SingleVariableDeclaration(1714) at 0", "Insert SimpleName: workflowConfig(1713) into SingleVariableDeclaration(1714) at 1", "Insert SimpleType: WorkflowContext(1716) into SingleVariableDeclaration(1718) at 0", "Insert SimpleName: workflowContext(1717) into SingleVariableDeclaration(1718) at 1", "Insert VariableDeclarationStatement(1725) into Block(1748) at 0", "Insert ExpressionStatement(1731) into Block(1748) at 1", "Insert ExpressionStatement(1736) into Block(1748) at 2", "Insert IfStatement(1747) into Block(1748) at 3", "Insert InfixExpression: ||(794) into IfStatement(822) at 0", "Insert Block(821) into IfStatement(822) at 1", "Move MethodInvocation(1354) into IfStatement(1391) at 0", "Insert Block(1390) into IfStatement(1391) at 1", "Insert SimpleName: String(1653) into SimpleType: String(1654) at 0", "Insert SimpleName: JobContext(1657) into SimpleType: JobContext(1658) at 0", "Insert SimpleName: WorkflowConfig(1661) into SimpleType: WorkflowConfig(1662) at 0", "Insert SimpleName: WorkflowContext(1665) into SimpleType: WorkflowContext(1666) at 0", "Insert PrimitiveType: long(1669) into VariableDeclarationStatement(1675) at 0", "Insert VariableDeclarationFragment(1674) into VariableDeclarationStatement(1675) at 1", "Insert MethodInvocation(1680) into ExpressionStatement(1681) at 0", "Insert MethodInvocation(1685) into ExpressionStatement(1686) at 0", "Insert MethodInvocation(1690) into IfStatement(1697) at 0", "Insert Block(1696) into IfStatement(1697) at 1", "Insert SimpleName: String(1703) into SimpleType: String(1704) at 0", "Insert SimpleName: JobContext(1707) into SimpleType: JobContext(1708) at 0", "Insert SimpleName: WorkflowConfig(1711) into SimpleType: WorkflowConfig(1712) at 0", "Insert SimpleName: WorkflowContext(1715) into SimpleType: WorkflowContext(1716) at 0", "Insert PrimitiveType: long(1719) into VariableDeclarationStatement(1725) at 0", "Insert VariableDeclarationFragment(1724) into VariableDeclarationStatement(1725) at 1", "Insert MethodInvocation(1730) into ExpressionStatement(1731) at 0", "Insert MethodInvocation(1735) into ExpressionStatement(1736) at 0", "Insert MethodInvocation(1740) into IfStatement(1747) at 0", "Insert Block(1746) into IfStatement(1747) at 1", "Insert InfixExpression: ==(790) into InfixExpression: ||(794) at 0", "Insert MethodInvocation(793) into InfixExpression: ||(794) at 1", "Move ExpressionStatement(1360) into Block(821) at 0", "Move ExpressionStatement(1365) into Block(821) at 1", "Insert ExpressionStatement(815) into Block(821) at 2", "Insert ReturnStatement(820) into Block(821) at 3", "Update SimpleName: workflowCtx(1370) to LOG", "Update SimpleName: setWorkflowState(1371) to debug", "Insert InfixExpression: +(856) into MethodInvocation(857) at 2", "Move ExpressionStatement(1379) into Block(1390) at 0", "Move ExpressionStatement(1389) into Block(1390) at 1", "Insert SimpleName: currentTime(1670) into VariableDeclarationFragment(1674) at 0", "Insert MethodInvocation(1673) into VariableDeclarationFragment(1674) at 1", "Insert SimpleName: workflowContext(1676) into MethodInvocation(1680) at 0", "Insert SimpleName: setJobState(1677) into MethodInvocation(1680) at 1", "Insert SimpleName: jobName(1678) into MethodInvocation(1680) at 2", "Insert QualifiedName: TaskState.FAILED(1679) into MethodInvocation(1680) at 3", "Insert SimpleName: jobContext(1682) into MethodInvocation(1685) at 0", "Insert SimpleName: setFinishTime(1683) into MethodInvocation(1685) at 1", "Insert SimpleName: currentTime(1684) into MethodInvocation(1685) at 2", "Insert SimpleName: isWorkflowFinished(1687) into MethodInvocation(1690) at 0", "Insert SimpleName: workflowContext(1688) into MethodInvocation(1690) at 1", "Insert SimpleName: workflowConfig(1689) into MethodInvocation(1690) at 2", "Insert ExpressionStatement(1695) into Block(1696) at 0", "Insert SimpleName: currentTime(1720) into VariableDeclarationFragment(1724) at 0", "Insert MethodInvocation(1723) into VariableDeclarationFragment(1724) at 1", "Insert SimpleName: workflowContext(1726) into MethodInvocation(1730) at 0", "Insert SimpleName: setJobState(1727) into MethodInvocation(1730) at 1", "Insert SimpleName: jobName(1728) into MethodInvocation(1730) at 2", "Insert QualifiedName: TaskState.COMPLETED(1729) into MethodInvocation(1730) at 3", "Insert SimpleName: jobContext(1732) into MethodInvocation(1735) at 0", "Insert SimpleName: setFinishTime(1733) into MethodInvocation(1735) at 1", "Insert SimpleName: currentTime(1734) into MethodInvocation(1735) at 2", "Insert SimpleName: isWorkflowFinished(1737) into MethodInvocation(1740) at 0", "Insert SimpleName: workflowContext(1738) into MethodInvocation(1740) at 1", "Insert SimpleName: workflowConfig(1739) into MethodInvocation(1740) at 2", "Insert ExpressionStatement(1745) into Block(1746) at 0", "Insert SimpleName: allPartitions(788) into InfixExpression: ==(790) at 0", "Insert NullLiteral(789) into InfixExpression: ==(790) at 1", "Insert SimpleName: allPartitions(791) into MethodInvocation(793) at 0", "Insert SimpleName: isEmpty(792) into MethodInvocation(793) at 1", "Insert MethodInvocation(814) into ExpressionStatement(815) at 0", "Insert ClassInstanceCreation(819) into ReturnStatement(820) at 0", "Insert StringLiteral: \"All partitions: \"(850) into InfixExpression: +(856) at 0", "Insert SimpleName: allPartitions(851) into InfixExpression: +(856) at 1", "Insert StringLiteral: \" taskAssignment: \"(852) into InfixExpression: +(856) at 2", "Insert SimpleName: taskAssignments(853) into InfixExpression: +(856) at 3", "Insert StringLiteral: \" excludedInstances: \"(854) into InfixExpression: +(856) at 4", "Insert SimpleName: excludedInstances(855) into InfixExpression: +(856) at 5", "Insert SimpleName: System(1671) into MethodInvocation(1673) at 0", "Insert SimpleName: currentTimeMillis(1672) into MethodInvocation(1673) at 1", "Insert MethodInvocation(1694) into ExpressionStatement(1695) at 0", "Insert SimpleName: System(1721) into MethodInvocation(1723) at 0", "Insert SimpleName: currentTimeMillis(1722) into MethodInvocation(1723) at 1", "Insert MethodInvocation(1744) into ExpressionStatement(1745) at 0", "Update SimpleName: workflowCtx(1355) to LOG", "Update SimpleName: setJobState(1356) to warn", "Insert InfixExpression: +(800) into MethodInvocation(801) at 2", "Insert SimpleName: markJobFailed(803) into MethodInvocation(808) at 0", "Insert SimpleName: jobResource(804) into MethodInvocation(808) at 1", "Update SimpleName: setFinishTime(1362) to workflowConfig", "Update SimpleName: currentTime(1363) to workflowCtx", "Update SimpleName: isWorkflowComplete(1366) to markAllPartitionsError", "Move SimpleName: isWorkflowComplete(1366) into MethodInvocation(814) at 0", "Update SimpleName: workflowCtx(1367) to jobCtx", "Move SimpleName: workflowCtx(1367) into MethodInvocation(814) at 1", "Insert QualifiedName: TaskPartitionState.ERROR(812) into MethodInvocation(814) at 2", "Insert BooleanLiteral: false(813) into MethodInvocation(814) at 3", "Insert SimpleType: ResourceAssignment(817) into ClassInstanceCreation(819) at 0", "Insert SimpleName: jobResource(818) into ClassInstanceCreation(819) at 1", "Insert SimpleName: markJobComplete(1375) into MethodInvocation(1380) at 0", "Insert SimpleName: jobResource(1376) into MethodInvocation(1380) at 1", "Update SimpleName: workflowCtx(1375) to jobCtx", "Update SimpleName: setFinishTime(1376) to workflowConfig", "Update SimpleName: currentTime(1377) to workflowCtx", "Insert SimpleName: workflowContext(1691) into MethodInvocation(1694) at 0", "Insert SimpleName: setFinishTime(1692) into MethodInvocation(1694) at 1", "Insert SimpleName: currentTime(1693) into MethodInvocation(1694) at 2", "Insert SimpleName: workflowContext(1741) into MethodInvocation(1744) at 0", "Insert SimpleName: setFinishTime(1742) into MethodInvocation(1744) at 1", "Insert SimpleName: currentTime(1743) into MethodInvocation(1744) at 2", "Insert StringLiteral: \"Missing task partition mapping for job \"(797) into InfixExpression: +(800) at 0", "Insert SimpleName: jobResource(798) into InfixExpression: +(800) at 1", "Insert StringLiteral: \", marked the job as FAILED!\"(799) into InfixExpression: +(800) at 2", "Insert SimpleName: ResourceAssignment(816) into SimpleType: ResourceAssignment(817) at 0", "Insert ExpressionStatement(1275) into Block(1300) at 0", "Insert MethodInvocation(1274) into ExpressionStatement(1275) at 0", "Update SimpleName: setJobState(1231) to markJobFailed", "Move SimpleName: setJobState(1231) into MethodInvocation(1274) at 0", "Move SimpleName: jobResource(1232) into MethodInvocation(1274) at 1", "Update SimpleName: workflowConfig(1236) to jobCtx", "Move SimpleName: workflowConfig(1236) into MethodInvocation(1274) at 2", "Update SimpleName: workflowCtx(1239) to workflowConfig", "Move SimpleName: workflowCtx(1239) into MethodInvocation(1274) at 3", "Move SimpleName: workflowCtx(1244) into MethodInvocation(1274) at 4", "Delete QualifiedName: java.util.Date(24)", "Delete ImportDeclaration(25)", "Delete SimpleName: jobResource(1357)", "Delete QualifiedName: TaskState.COMPLETED(1358)", "Delete QualifiedName: TaskState.COMPLETED(1372)", "Delete PrimitiveType: long(1225)", "Delete SimpleName: finishTime(1226)", "Delete SimpleName: currentTime(1227)", "Delete VariableDeclarationFragment(1228)", "Delete VariableDeclarationStatement(1229)", "Delete SimpleName: workflowCtx(1230)", "Delete QualifiedName: TaskState.FAILED(1233)", "Delete MethodInvocation(1234)", "Delete ExpressionStatement(1235)", "Delete SimpleName: isTerminable(1237)", "Delete MethodInvocation(1238)", "Delete SimpleName: setWorkflowState(1240)", "Delete QualifiedName: TaskState.FAILED(1241)", "Delete MethodInvocation(1242)", "Delete ExpressionStatement(1243)", "Delete SimpleName: setFinishTime(1245)", "Delete SimpleName: finishTime(1246)", "Delete MethodInvocation(1247)", "Delete ExpressionStatement(1248)", "Delete Block(1249)", "Delete IfStatement(1250)", "Delete SimpleName: jobCtx(1251)", "Delete SimpleName: setFinishTime(1252)", "Delete SimpleName: finishTime(1253)", "Delete MethodInvocation(1254)", "Delete ExpressionStatement(1255)", "Delete SimpleName: workflowConfig(1368)", "Delete MethodInvocation(1369)", "Delete Block(1380)", "Delete IfStatement(1381)", "Delete Block(1390)", "Delete IfStatement(1391)"]}}, {"TaskRebalancer_cluster": {"actions": [{"root": "UPDATE from isWorkflowComplete to isWorkflowFinished", "operations": ["UPD SimpleName: isWorkflowComplete from isWorkflowComplete to isWorkflowFinished"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS BooleanLiteral: false to VariableDeclarationFragment at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: incomplete to VariableDeclarationFragment at 0"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS SimpleName: incomplete to PrefixExpression: ! at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: ctx to MethodInvocation at 0", "INS IfStatement to Block at 3", "INS InfixExpression: && to IfStatement at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: setWorkflowState to MethodInvocation at 1", "INS BooleanLiteral: true to ReturnStatement at 0", "INS Block to IfStatement at 1", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS ExpressionStatement to Block at 0", "INS QualifiedName: TaskState.COMPLETED to MethodInvocation at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 4"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: failedCount to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 2"]}, {"root": "UPDATE from Checks if the workflow has completed. to Checks if the workflow has finished (either completed or failed).", "operations": ["UPD TextElement: Checks if the workflow has completed. from Checks if the workflow has completed. to Checks if the workflow has finished (either completed or failed)."]}, {"root": "INS TextElement: Set the state in workflow context properly. to TagElement at 1", "operations": ["INS TextElement: Set the state in workflow context properly. to TagElement at 1"]}, {"root": "UPDATE from  returns true if all tasks are  to  returns true if the workflow either completed (all tasks are ", "operations": ["UPD TextElement:  returns true if all tasks are  from  returns true if all tasks are  to  returns true if the workflow either completed (all tasks are "]}, {"root": "INS TextElement: ) to TagElement: @return at 2", "operations": ["INS TextElement: ) to TagElement: @return at 2"]}, {"root": "INS TextElement: or failed (any task is  to TagElement: @return at 3", "operations": ["INS TextElement: or failed (any task is  to TagElement: @return at 3"]}, {"root": "INS TagElement: @link to TagElement: @return at 4", "operations": ["INS SimpleName: FAILED to MemberRef at 1", "INS SimpleName: TaskState to MemberRef at 0", "INS TagElement: @link to TagElement: @return at 4", "INS MemberRef to TagElement: @link at 0"]}, {"root": "INS InfixExpression: || to IfStatement at 0", "operations": ["INS NumberLiteral: 0 to InfixExpression: > at 1", "INS InfixExpression: || to IfStatement at 0", "INS InfixExpression: > to InfixExpression: || at 1", "INS SimpleName: failedCount to InfixExpression: > at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: jobState to VariableDeclarationFragment at 0", "INS SimpleName: TaskState to SimpleType: TaskState at 0", "INS SimpleType: TaskState to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS SimpleName: ctx to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS QualifiedName: TaskState.FAILED to InfixExpression: == at 1", "INS InfixExpression: == to IfStatement at 0", "INS IfStatement to Block at 1", "INS SimpleName: setWorkflowState to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS QualifiedName: TaskState.FAILED to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: jobState to InfixExpression: == at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV MethodInvocation to InfixExpression: && at 1"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: || to InfixExpression: || at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "INS SimpleName: jobState to InfixExpression: != at 0", "operations": ["INS SimpleName: jobState to InfixExpression: != at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: incomplete to Assignment: = at 0", "INS BooleanLiteral: true to Assignment: = at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "INS IfStatement to IfStatement at 2", "operations": ["INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS SimpleName: jobState to InfixExpression: == at 0", "INS QualifiedName: TaskState.FAILED to InfixExpression: == at 1", "INS IfStatement to IfStatement at 2", "INS SimpleName: failedCount to PrefixExpression: ++ at 0", "INS InfixExpression: == to IfStatement at 0"]}, {"root": "UPDATE from \"Job %s is not ready to start, notStartedParent(s)=%d, inCompleteParent(s)=%d.\" to \"Job %s is not ready to start, notStartedParent(s)=%d, inCompleteParent(s)=%d, failedParent(s)=%d.\"", "operations": ["UPD StringLiteral: \"Job %s is not ready to start, notStartedParent(s)=%d, inCompleteParent(s)=%d.\" from \"Job %s is not ready to start, notStartedParent(s)=%d, inCompleteParent(s)=%d.\" to \"Job %s is not ready to start, notStartedParent(s)=%d, inCompleteParent(s)=%d, failedParent(s)=%d.\""]}, {"root": "INS SimpleName: failedCount to MethodInvocation at 6", "operations": ["INS SimpleName: failedCount to MethodInvocation at 6"]}, {"root": "DEL IfStatement", "operations": ["DEL PrefixExpression: !", "DEL ReturnStatement", "DEL BooleanLiteral: false", "DEL Block", "DEL IfStatement"]}]}}, {"TaskRebalancer_diff": {"operations": ["Update SimpleName: isWorkflowComplete(144) to isWorkflowFinished", "Insert VariableDeclarationStatement(164) into Block(223) at 0", "Insert IfStatement(220) into Block(223) at 2", "Move ReturnStatement(177) into Block(223) at 4", "Insert VariableDeclarationStatement(428) into Block(513) at 2", "Update TextElement: Checks if the workflow has completed.(126) to Checks if the workflow has finished (either completed or failed).", "Insert TextElement: Set the state in workflow context properly.(127) into TagElement(128) at 1", "Update TextElement:  returns true if all tasks are (134) to  returns true if the workflow either completed (all tasks are ", "Insert TextElement: )(140) into TagElement: @return(147) at 2", "Insert TextElement: or failed (any task is (141) into TagElement: @return(147) at 3", "Insert TagElement: @link(145) into TagElement: @return(147) at 4", "Insert PrimitiveType: boolean(160) into VariableDeclarationStatement(164) at 0", "Insert VariableDeclarationFragment(163) into VariableDeclarationStatement(164) at 1", "Insert InfixExpression: &&(211) into IfStatement(220) at 0", "Insert Block(219) into IfStatement(220) at 1", "Insert PrimitiveType: int(424) into VariableDeclarationStatement(428) at 0", "Insert VariableDeclarationFragment(427) into VariableDeclarationStatement(428) at 1", "Insert InfixExpression: ||(494) into IfStatement(510) at 0", "Insert MemberRef(144) into TagElement: @link(145) at 0", "Insert SimpleName: incomplete(161) into VariableDeclarationFragment(163) at 0", "Insert BooleanLiteral: false(162) into VariableDeclarationFragment(163) at 1", "Insert VariableDeclarationStatement(182) into Block(204) at 0", "Insert IfStatement(194) into Block(204) at 1", "Insert PrefixExpression: !(207) into InfixExpression: &&(211) at 0", "Move MethodInvocation(155) into InfixExpression: &&(211) at 1", "Insert ExpressionStatement(216) into Block(219) at 0", "Insert ReturnStatement(218) into Block(219) at 1", "Insert SimpleName: failedCount(425) into VariableDeclarationFragment(427) at 0", "Insert NumberLiteral: 0(426) into VariableDeclarationFragment(427) at 1", "Move InfixExpression: ||(438) into InfixExpression: ||(494) at 0", "Insert InfixExpression: >(493) into InfixExpression: ||(494) at 1", "Insert SimpleName: TaskState(142) into MemberRef(144) at 0", "Insert SimpleName: FAILED(143) into MemberRef(144) at 1", "Insert SimpleType: TaskState(175) into VariableDeclarationStatement(182) at 0", "Insert VariableDeclarationFragment(181) into VariableDeclarationStatement(182) at 1", "Insert InfixExpression: ==(185) into IfStatement(194) at 0", "Insert Block(193) into IfStatement(194) at 1", "Insert SimpleName: incomplete(206) into PrefixExpression: !(207) at 0", "Insert MethodInvocation(215) into ExpressionStatement(216) at 0", "Insert BooleanLiteral: true(217) into ReturnStatement(218) at 0", "Insert SimpleName: failedCount(491) into InfixExpression: >(493) at 0", "Insert NumberLiteral: 0(492) into InfixExpression: >(493) at 1", "Insert SimpleName: TaskState(174) into SimpleType: TaskState(175) at 0", "Insert SimpleName: jobState(176) into VariableDeclarationFragment(181) at 0", "Move MethodInvocation(173) into VariableDeclarationFragment(181) at 1", "Insert SimpleName: jobState(183) into InfixExpression: ==(185) at 0", "Insert QualifiedName: TaskState.FAILED(184) into InfixExpression: ==(185) at 1", "Insert ExpressionStatement(190) into Block(193) at 0", "Move ReturnStatement(183) into Block(193) at 1", "Insert SimpleName: jobState(195) into InfixExpression: !=(197) at 0", "Insert ExpressionStatement(201) into Block(202) at 0", "Insert SimpleName: ctx(212) into MethodInvocation(215) at 0", "Insert SimpleName: setWorkflowState(213) into MethodInvocation(215) at 1", "Insert QualifiedName: TaskState.COMPLETED(214) into MethodInvocation(215) at 2", "Insert IfStatement(477) into IfStatement(478) at 2", "Insert MethodInvocation(189) into ExpressionStatement(190) at 0", "Insert Assignment: =(200) into ExpressionStatement(201) at 0", "Insert InfixExpression: ==(472) into IfStatement(477) at 0", "Insert Block(476) into IfStatement(477) at 1", "Update StringLiteral: \"Job %s is not ready to start, notStartedParent(s)=%d, inCompleteParent(s)=%d.\"(443) to \"Job %s is not ready to start, notStartedParent(s)=%d, inCompleteParent(s)=%d, failedParent(s)=%d.\"", "Insert SimpleName: failedCount(503) into MethodInvocation(504) at 6", "Insert SimpleName: ctx(186) into MethodInvocation(189) at 0", "Insert SimpleName: setWorkflowState(187) into MethodInvocation(189) at 1", "Insert QualifiedName: TaskState.FAILED(188) into MethodInvocation(189) at 2", "Insert SimpleName: incomplete(198) into Assignment: =(200) at 0", "Insert BooleanLiteral: true(199) into Assignment: =(200) at 1", "Insert SimpleName: jobState(470) into InfixExpression: ==(472) at 0", "Insert QualifiedName: TaskState.FAILED(471) into InfixExpression: ==(472) at 1", "Insert ExpressionStatement(475) into Block(476) at 0", "Insert PrefixExpression: ++(474) into ExpressionStatement(475) at 0", "Insert SimpleName: failedCount(473) into PrefixExpression: ++(474) at 0", "Delete PrefixExpression: !(156)", "Delete BooleanLiteral: false(157)", "Delete ReturnStatement(158)", "Delete Block(159)", "Delete IfStatement(160)"]}}, {"WorkflowRebalancer_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 4", "INS SimpleName: numIndependentTasks to VariableDeclarationFragment at 1"]}, {"root": "INS IfStatement to Block at 5", "operations": ["INS SimpleName: warn to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: IdealState to SimpleType: IdealState at 0", "INS SimpleType: IdealState to VariableDeclarationStatement at 0", "INS IfStatement to Block at 5", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 2", "INS SimpleName: LOG to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS IfStatement to Block at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: numPartitions to Assignment: = at 0", "INS SimpleName: jobResource to InfixExpression: + at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: targetIs to InfixExpression: == at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: targetIs to VariableDeclarationFragment at 0", "INS StringLiteral: \"Target resource does not exist for job \" to InfixExpression: + at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to InfixExpression: == at 1"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to InfixExpression: && at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV PrimitiveType: int to VariableDeclarationStatement at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: == to InfixExpression: && at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: numPartitions to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from numIndependentTasks to numPartitions", "operations": ["UPD SimpleName: numIndependentTasks from numIndependentTasks to numPartitions"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV SimpleName: numIndependentTasks to InfixExpression: == at 0", "MOV NumberLiteral: 0 to InfixExpression: == at 1"]}, {"root": "UPDATE from isWorkflowComplete to isWorkflowFinished", "operations": ["UPD SimpleName: isWorkflowComplete from isWorkflowComplete to isWorkflowFinished"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: workflowCfg to MethodInvocation at 2", "MOV SimpleName: workflowCtx to MethodInvocation at 1", "MOV SimpleName: isWorkflowComplete to MethodInvocation at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from \" is completed.\" to \" is finished.\"", "operations": ["UPD StringLiteral: \" is completed.\" from \" is completed.\" to \" is finished.\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: size to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS SimpleName: targetIs to MethodInvocation at 0", "operations": ["INS SimpleName: targetIs to MethodInvocation at 0"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: workflowCtx", "DEL SimpleName: setWorkflowState", "DEL MethodInvocation", "DEL QualifiedName: TaskState.COMPLETED", "DEL ExpressionStatement"]}, {"root": "DEL Block", "operations": ["DEL MethodInvocation", "DEL IfStatement", "DEL Block"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL ParenthesizedExpression", "DEL InfixExpression: >", "DEL ConditionalExpression", "DEL SimpleName: numIndependentTasks", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL MethodInvocation"]}]}}, {"WorkflowRebalancer_diff": {"operations": ["Insert VariableDeclarationStatement(546) into Block(790) at 4", "Insert IfStatement(586) into Block(790) at 5", "Insert InfixExpression: &&(231) into IfStatement(245) at 0", "Move Block(248) into IfStatement(245) at 1", "Move PrimitiveType: int(548) into VariableDeclarationStatement(546) at 0", "Insert VariableDeclarationFragment(545) into VariableDeclarationStatement(546) at 1", "Insert InfixExpression: ==(549) into IfStatement(586) at 0", "Insert Block(585) into IfStatement(586) at 1", "Move InfixExpression: ==(226) into InfixExpression: &&(231) at 0", "Insert MethodInvocation(230) into InfixExpression: &&(231) at 1", "Move SimpleName: numPartitions(549) into VariableDeclarationFragment(545) at 0", "Insert SimpleName: numIndependentTasks(544) into VariableDeclarationFragment(545) at 1", "Update SimpleName: numIndependentTasks(550) to numPartitions", "Move SimpleName: numIndependentTasks(550) into InfixExpression: ==(549) at 0", "Move NumberLiteral: 0(551) into InfixExpression: ==(549) at 1", "Insert VariableDeclarationStatement(563) into Block(585) at 0", "Insert IfStatement(584) into Block(585) at 1", "Update SimpleName: isWorkflowComplete(227) to isWorkflowFinished", "Move SimpleName: isWorkflowComplete(227) into MethodInvocation(230) at 0", "Move SimpleName: workflowCtx(228) into MethodInvocation(230) at 1", "Move SimpleName: workflowCfg(229) into MethodInvocation(230) at 2", "Insert SimpleType: IdealState(551) into VariableDeclarationStatement(563) at 0", "Insert VariableDeclarationFragment(562) into VariableDeclarationStatement(563) at 1", "Insert InfixExpression: ==(566) into IfStatement(584) at 0", "Insert Block(574) into IfStatement(584) at 1", "Insert Block(583) into IfStatement(584) at 2", "Insert SimpleName: IdealState(550) into SimpleType: IdealState(551) at 0", "Insert SimpleName: targetIs(552) into VariableDeclarationFragment(562) at 0", "Move MethodInvocation(563) into VariableDeclarationFragment(562) at 1", "Insert SimpleName: targetIs(564) into InfixExpression: ==(566) at 0", "Insert NullLiteral(565) into InfixExpression: ==(566) at 1", "Insert ExpressionStatement(573) into Block(574) at 0", "Insert ExpressionStatement(582) into Block(583) at 0", "Update StringLiteral: \" is completed.\"(261) to \" is finished.\"", "Insert MethodInvocation(572) into ExpressionStatement(573) at 0", "Insert Assignment: =(581) into ExpressionStatement(582) at 0", "Insert SimpleName: LOG(567) into MethodInvocation(572) at 0", "Insert SimpleName: warn(568) into MethodInvocation(572) at 1", "Insert InfixExpression: +(571) into MethodInvocation(572) at 2", "Insert SimpleName: numPartitions(575) into Assignment: =(581) at 0", "Insert MethodInvocation(580) into Assignment: =(581) at 1", "Insert StringLiteral: \"Target resource does not exist for job \"(569) into InfixExpression: +(571) at 0", "Insert SimpleName: jobResource(570) into InfixExpression: +(571) at 1", "Move MethodInvocation(565) into MethodInvocation(580) at 0", "Move SimpleName: size(566) into MethodInvocation(580) at 1", "Insert SimpleName: targetIs(576) into MethodInvocation(578) at 0", "Delete SimpleName: workflowCtx(231)", "Delete SimpleName: setWorkflowState(232)", "Delete QualifiedName: TaskState.COMPLETED(233)", "Delete MethodInvocation(234)", "Delete ExpressionStatement(235)", "Delete MethodInvocation(230)", "Delete IfStatement(249)", "Delete Block(250)", "Delete InfixExpression: >(552)", "Delete ParenthesizedExpression(553)", "Delete SimpleName: numIndependentTasks(554)", "Delete MethodInvocation(567)", "Delete ConditionalExpression(568)", "Delete VariableDeclarationFragment(569)", "Delete VariableDeclarationStatement(570)"]}}], "commit_stats": [{"total_files": 5, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}