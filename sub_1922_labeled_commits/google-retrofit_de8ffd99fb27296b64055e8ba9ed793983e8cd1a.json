{"application": "google-retrofit", "csha": "de8ffd99fb27296b64055e8ba9ed793983e8cd1a", "files": [{"RequestBuilder_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS BooleanLiteral: false to VariableDeclarationFragment at 1", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: addPathParam to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: name to SingleVariableDeclaration at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: value to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: name to MethodInvocation at 1", "INS SimpleName: disableUrlEncoding to MethodInvocation at 3", "INS SimpleName: addPathParam to MethodDeclaration at 3", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: disableUrlEncoding to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: value to SingleVariableDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS PrimitiveType: void to MethodDeclaration at 2", "INS Block to MethodDeclaration at 6", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: value to MethodInvocation at 2", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: addPathParam to MethodInvocation at 0", "INS SimpleName: disableUrlEncoding to MethodInvocation at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS VariableDeclarationStatement to Block at 0", "INS BooleanLiteral: true to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: name to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: addEncodedPathParam to MethodDeclaration at 3", "INS SimpleName: value to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: name to SingleVariableDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 22", "operations": ["INS SimpleName: name to MethodInvocation at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: addQueryParam to MethodDeclaration at 3", "INS ExpressionStatement to Block at 1", "INS SimpleName: name to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: disableUrlEncoding to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS BooleanLiteral: false to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS Block to MethodDeclaration at 6", "INS MethodDeclaration to TypeDeclaration: class at 22", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: addQueryParam to MethodInvocation at 0", "INS SimpleName: value to SingleVariableDeclaration at 1", "INS SimpleName: value to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: disableUrlEncoding to MethodInvocation at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: disableUrlEncoding to VariableDeclarationFragment at 0", "INS SimpleName: disableUrlEncoding to MethodInvocation at 3", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Block to MethodDeclaration at 6", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: addEncodedQueryParam to MethodDeclaration at 3", "INS SimpleName: addQueryParam to MethodInvocation at 0", "INS SimpleName: name to SingleVariableDeclaration at 1", "INS BooleanLiteral: true to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: value to MethodInvocation at 2", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: name to MethodInvocation at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: String to SimpleType: String at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 23", "INS SimpleName: value to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0"]}, {"root": "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from Boolean to String", "operations": ["UPD SimpleName: Boolean from Boolean to String"]}, {"root": "MOVE from SimpleType: String", "operations": ["MOV SimpleName: Boolean to SimpleType: String at 0"]}, {"root": "UPDATE from paramFlags to disableUrlEncoding", "operations": ["UPD SimpleName: paramFlags from paramFlags to disableUrlEncoding"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: paramFlags to VariableDeclarationFragment at 0"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV BreakStatement to SwitchStatement at 6"]}, {"root": "MOVE from IfStatement", "operations": ["MOV PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV PrefixExpression: ! to IfStatement at 0"]}, {"root": "INS ExpressionStatement to SwitchStatement at 3", "operations": ["INS SimpleName: name to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to SwitchStatement at 3", "INS SimpleName: addPathParam to MethodInvocation at 0"]}, {"root": "INS BreakStatement to SwitchStatement at 4", "operations": ["INS BreakStatement to SwitchStatement at 4"]}, {"root": "INS SwitchCase to SwitchStatement at 5", "operations": ["INS SwitchCase to SwitchStatement at 5", "INS SimpleName: ENCODED_PATH to SwitchCase at 0"]}, {"root": "INS IfStatement to SwitchStatement at 6", "operations": ["INS IfStatement to SwitchStatement at 6", "INS StringLiteral: \"Path parameter \\\"\" to InfixExpression: + at 0", "INS StringLiteral: \"\\\" value must not be null.\" to InfixExpression: + at 2", "INS ClassInstanceCreation to ThrowStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS ThrowStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: name to InfixExpression: + at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: value to InfixExpression: == at 0", "INS InfixExpression: + to ClassInstanceCreation at 1"]}, {"root": "INS ExpressionStatement to SwitchStatement at 7", "operations": ["INS SimpleName: name to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to SwitchStatement at 7", "INS SimpleName: addEncodedPathParam to MethodInvocation at 0"]}, {"root": "INS BreakStatement to SwitchStatement at 8", "operations": ["INS BreakStatement to SwitchStatement at 8"]}, {"root": "INS IfStatement to SwitchStatement at 11", "operations": ["INS IfStatement to SwitchStatement at 11", "INS Block to IfStatement at 1"]}, {"root": "INS SwitchCase to SwitchStatement at 13", "operations": ["INS SwitchCase to SwitchStatement at 13", "INS SimpleName: ENCODED_QUERY to SwitchCase at 0"]}, {"root": "INS IfStatement to SwitchStatement at 14", "operations": ["INS InfixExpression: != to IfStatement at 0", "INS IfStatement to SwitchStatement at 14", "INS NullLiteral to InfixExpression: != at 1", "INS Block to IfStatement at 1", "INS SimpleName: value to InfixExpression: != at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: disableUrlEncoding to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: disableUrlEncoding to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from addPathParam to addQueryParam", "operations": ["UPD SimpleName: addPathParam from addPathParam to addQueryParam"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: value to MethodInvocation at 0"]}, {"root": "UPDATE from addQueryParam to addEncodedQueryParam", "operations": ["UPD SimpleName: addQueryParam from addQueryParam to addEncodedQueryParam"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: value to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from Boolean to IllegalArgumentException", "operations": ["UPD SimpleName: Boolean from Boolean to IllegalArgumentException"]}, {"root": "MOVE from SimpleType: IllegalArgumentException", "operations": ["MOV SimpleName: Boolean to SimpleType: IllegalArgumentException at 0"]}, {"root": "UPDATE from disableUrlEncoding to toString", "operations": ["UPD SimpleName: disableUrlEncoding from disableUrlEncoding to toString", "UPD SimpleName: disableUrlEncoding from disableUrlEncoding to toString"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL SimpleType: Boolean", "DEL Dimension", "DEL ArrayType: Boolean[]", "DEL FieldDeclaration", "DEL Modifier: private", "DEL VariableDeclarationFragment"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL SimpleName: paramFlags", "DEL QualifiedName: methodInfo.requestParamFlags", "DEL ExpressionStatement"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL SimpleType: Boolean", "operations": ["DEL SimpleName: Boolean", "DEL SimpleType: Boolean"]}, {"root": "DEL InfixExpression: ||", "operations": ["DEL InfixExpression: ==", "DEL NullLiteral", "DEL SimpleName: disableUrlEncoding", "DEL InfixExpression: ||"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL SimpleType: Boolean", "operations": ["DEL SimpleType: Boolean", "DEL SimpleName: Boolean"]}, {"root": "DEL InfixExpression: ||", "operations": ["DEL InfixExpression: ==", "DEL NullLiteral", "DEL InfixExpression: ||", "DEL SimpleName: disableUrlEncoding"]}, {"root": "DEL Block", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: disableUrlEncoding", "DEL SimpleName: paramFlags", "DEL ArrayAccess", "DEL SimpleType: Boolean", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: i"]}, {"root": "DEL IfStatement", "operations": ["DEL ArrayAccess", "DEL SimpleName: paramFlags", "DEL SimpleType: Boolean", "DEL Block", "DEL SimpleName: Boolean", "DEL SimpleName: i", "DEL IfStatement", "DEL SimpleName: disableUrlEncoding", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment"]}]}}, {"RequestBuilder_diff": {"operations": ["Insert MethodDeclaration(324) into TypeDeclaration: class(969) at 18", "Insert MethodDeclaration(350) into TypeDeclaration: class(969) at 19", "Insert MethodDeclaration(483) into TypeDeclaration: class(969) at 21", "Insert MethodDeclaration(509) into TypeDeclaration: class(969) at 22", "Move MarkerAnnotation(313) into MethodDeclaration(324) at 0", "Insert Modifier: public(301) into MethodDeclaration(324) at 1", "Insert PrimitiveType: void(302) into MethodDeclaration(324) at 2", "Insert SimpleName: addPathParam(303) into MethodDeclaration(324) at 3", "Insert SingleVariableDeclaration(307) into MethodDeclaration(324) at 4", "Insert SingleVariableDeclaration(311) into MethodDeclaration(324) at 5", "Insert Block(323) into MethodDeclaration(324) at 6", "Insert MarkerAnnotation(326) into MethodDeclaration(350) at 0", "Insert Modifier: public(327) into MethodDeclaration(350) at 1", "Insert PrimitiveType: void(328) into MethodDeclaration(350) at 2", "Insert SimpleName: addEncodedPathParam(329) into MethodDeclaration(350) at 3", "Insert SingleVariableDeclaration(333) into MethodDeclaration(350) at 4", "Insert SingleVariableDeclaration(337) into MethodDeclaration(350) at 5", "Insert Block(349) into MethodDeclaration(350) at 6", "Move MarkerAnnotation(428) into MethodDeclaration(483) at 0", "Insert Modifier: public(460) into MethodDeclaration(483) at 1", "Insert PrimitiveType: void(461) into MethodDeclaration(483) at 2", "Insert SimpleName: addQueryParam(462) into MethodDeclaration(483) at 3", "Insert SingleVariableDeclaration(466) into MethodDeclaration(483) at 4", "Insert SingleVariableDeclaration(470) into MethodDeclaration(483) at 5", "Insert Block(482) into MethodDeclaration(483) at 6", "Insert MarkerAnnotation(485) into MethodDeclaration(509) at 0", "Insert Modifier: public(486) into MethodDeclaration(509) at 1", "Insert PrimitiveType: void(487) into MethodDeclaration(509) at 2", "Insert SimpleName: addEncodedQueryParam(488) into MethodDeclaration(509) at 3", "Insert SingleVariableDeclaration(492) into MethodDeclaration(509) at 4", "Insert SingleVariableDeclaration(496) into MethodDeclaration(509) at 5", "Insert Block(508) into MethodDeclaration(509) at 6", "Insert SimpleType: String(305) into SingleVariableDeclaration(307) at 0", "Insert SimpleName: name(306) into SingleVariableDeclaration(307) at 1", "Insert SimpleType: String(309) into SingleVariableDeclaration(311) at 0", "Insert SimpleName: value(310) into SingleVariableDeclaration(311) at 1", "Insert VariableDeclarationStatement(316) into Block(323) at 0", "Insert ExpressionStatement(322) into Block(323) at 1", "Insert SimpleName: Override(325) into MarkerAnnotation(326) at 0", "Insert SimpleType: String(331) into SingleVariableDeclaration(333) at 0", "Insert SimpleName: name(332) into SingleVariableDeclaration(333) at 1", "Insert SimpleType: String(335) into SingleVariableDeclaration(337) at 0", "Insert SimpleName: value(336) into SingleVariableDeclaration(337) at 1", "Insert VariableDeclarationStatement(342) into Block(349) at 0", "Insert ExpressionStatement(348) into Block(349) at 1", "Insert PrimitiveType: boolean(361) into SingleVariableDeclaration(363) at 0", "Insert SimpleType: String(464) into SingleVariableDeclaration(466) at 0", "Insert SimpleName: name(465) into SingleVariableDeclaration(466) at 1", "Insert SimpleType: String(468) into SingleVariableDeclaration(470) at 0", "Insert SimpleName: value(469) into SingleVariableDeclaration(470) at 1", "Insert VariableDeclarationStatement(475) into Block(482) at 0", "Insert ExpressionStatement(481) into Block(482) at 1", "Insert SimpleName: Override(484) into MarkerAnnotation(485) at 0", "Insert SimpleType: String(490) into SingleVariableDeclaration(492) at 0", "Insert SimpleName: name(491) into SingleVariableDeclaration(492) at 1", "Insert SimpleType: String(494) into SingleVariableDeclaration(496) at 0", "Insert SimpleName: value(495) into SingleVariableDeclaration(496) at 1", "Insert VariableDeclarationStatement(501) into Block(508) at 0", "Insert ExpressionStatement(507) into Block(508) at 1", "Insert PrimitiveType: boolean(520) into SingleVariableDeclaration(522) at 0", "Insert SimpleName: String(304) into SimpleType: String(305) at 0", "Insert SimpleName: String(308) into SimpleType: String(309) at 0", "Insert PrimitiveType: boolean(312) into VariableDeclarationStatement(316) at 0", "Insert VariableDeclarationFragment(315) into VariableDeclarationStatement(316) at 1", "Insert MethodInvocation(321) into ExpressionStatement(322) at 0", "Update SimpleName: Boolean(63) to String", "Move SimpleName: Boolean(63) into SimpleType: String(331) at 0", "Insert SimpleName: String(334) into SimpleType: String(335) at 0", "Insert PrimitiveType: boolean(338) into VariableDeclarationStatement(342) at 0", "Insert VariableDeclarationFragment(341) into VariableDeclarationStatement(342) at 1", "Insert MethodInvocation(347) into ExpressionStatement(348) at 0", "Insert SimpleName: String(463) into SimpleType: String(464) at 0", "Insert SimpleName: String(467) into SimpleType: String(468) at 0", "Insert PrimitiveType: boolean(471) into VariableDeclarationStatement(475) at 0", "Insert VariableDeclarationFragment(474) into VariableDeclarationStatement(475) at 1", "Insert MethodInvocation(480) into ExpressionStatement(481) at 0", "Insert SimpleName: String(489) into SimpleType: String(490) at 0", "Insert SimpleName: String(493) into SimpleType: String(494) at 0", "Insert PrimitiveType: boolean(497) into VariableDeclarationStatement(501) at 0", "Insert VariableDeclarationFragment(500) into VariableDeclarationStatement(501) at 1", "Insert MethodInvocation(506) into ExpressionStatement(507) at 0", "Insert SimpleName: disableUrlEncoding(313) into VariableDeclarationFragment(315) at 0", "Insert BooleanLiteral: false(314) into VariableDeclarationFragment(315) at 1", "Insert SimpleName: addPathParam(317) into MethodInvocation(321) at 0", "Insert SimpleName: name(318) into MethodInvocation(321) at 1", "Insert SimpleName: value(319) into MethodInvocation(321) at 2", "Insert SimpleName: disableUrlEncoding(320) into MethodInvocation(321) at 3", "Update SimpleName: paramFlags(67) to disableUrlEncoding", "Move SimpleName: paramFlags(67) into VariableDeclarationFragment(341) at 0", "Insert BooleanLiteral: true(340) into VariableDeclarationFragment(341) at 1", "Insert SimpleName: addPathParam(343) into MethodInvocation(347) at 0", "Insert SimpleName: name(344) into MethodInvocation(347) at 1", "Insert SimpleName: value(345) into MethodInvocation(347) at 2", "Insert SimpleName: disableUrlEncoding(346) into MethodInvocation(347) at 3", "Insert SimpleName: disableUrlEncoding(472) into VariableDeclarationFragment(474) at 0", "Insert BooleanLiteral: false(473) into VariableDeclarationFragment(474) at 1", "Insert SimpleName: addQueryParam(476) into MethodInvocation(480) at 0", "Insert SimpleName: name(477) into MethodInvocation(480) at 1", "Insert SimpleName: value(478) into MethodInvocation(480) at 2", "Insert SimpleName: disableUrlEncoding(479) into MethodInvocation(480) at 3", "Insert SimpleName: disableUrlEncoding(498) into VariableDeclarationFragment(500) at 0", "Insert BooleanLiteral: true(499) into VariableDeclarationFragment(500) at 1", "Insert SimpleName: addQueryParam(502) into MethodInvocation(506) at 0", "Insert SimpleName: name(503) into MethodInvocation(506) at 1", "Insert SimpleName: value(504) into MethodInvocation(506) at 2", "Insert SimpleName: disableUrlEncoding(505) into MethodInvocation(506) at 3", "Move BreakStatement(631) into SwitchStatement(874) at 6", "Move PrefixExpression: !(356) into IfStatement(437) at 0", "Move PrefixExpression: !(471) into IfStatement(560) at 0", "Insert ExpressionStatement(695) into SwitchStatement(874) at 3", "Insert BreakStatement(696) into SwitchStatement(874) at 4", "Insert SwitchCase(698) into SwitchStatement(874) at 5", "Insert IfStatement(711) into SwitchStatement(874) at 6", "Insert ExpressionStatement(718) into SwitchStatement(874) at 7", "Insert BreakStatement(719) into SwitchStatement(874) at 8", "Insert IfStatement(733) into SwitchStatement(874) at 10", "Insert SwitchCase(736) into SwitchStatement(874) at 12", "Insert IfStatement(748) into SwitchStatement(874) at 13", "Insert MethodInvocation(694) into ExpressionStatement(695) at 0", "Insert SimpleName: ENCODED_PATH(697) into SwitchCase(698) at 0", "Insert InfixExpression: ==(701) into IfStatement(711) at 0", "Insert Block(710) into IfStatement(711) at 1", "Insert MethodInvocation(717) into ExpressionStatement(718) at 0", "Move InfixExpression: !=(636) into IfStatement(733) at 0", "Insert Block(732) into IfStatement(733) at 1", "Insert SimpleName: ENCODED_QUERY(735) into SwitchCase(736) at 0", "Insert InfixExpression: !=(739) into IfStatement(748) at 0", "Insert Block(747) into IfStatement(748) at 1", "Insert SimpleName: addPathParam(689) into MethodInvocation(694) at 0", "Insert SimpleName: name(690) into MethodInvocation(694) at 1", "Move MethodInvocation(649) into MethodInvocation(694) at 2", "Insert SimpleName: value(699) into InfixExpression: ==(701) at 0", "Insert NullLiteral(700) into InfixExpression: ==(701) at 1", "Insert ThrowStatement(709) into Block(710) at 0", "Insert SimpleName: addEncodedPathParam(712) into MethodInvocation(717) at 0", "Insert SimpleName: name(713) into MethodInvocation(717) at 1", "Move MethodInvocation(626) into MethodInvocation(717) at 2", "Move ExpressionStatement(629) into Block(732) at 0", "Insert SimpleName: value(737) into InfixExpression: !=(739) at 0", "Insert NullLiteral(738) into InfixExpression: !=(739) at 1", "Move ExpressionStatement(652) into Block(747) at 0", "Insert ClassInstanceCreation(708) into ThrowStatement(709) at 0", "Insert SimpleType: IllegalArgumentException(703) into ClassInstanceCreation(708) at 0", "Insert InfixExpression: +(707) into ClassInstanceCreation(708) at 1", "Update SimpleName: addPathParam(622) to addQueryParam", "Insert MethodInvocation(729) into MethodInvocation(730) at 2", "Update SimpleName: addQueryParam(645) to addEncodedQueryParam", "Insert MethodInvocation(744) into MethodInvocation(745) at 2", "Update SimpleName: Boolean(614) to IllegalArgumentException", "Move SimpleName: Boolean(614) into SimpleType: IllegalArgumentException(703) at 0", "Insert StringLiteral: \"Path parameter \\\"\"(704) into InfixExpression: +(707) at 0", "Insert SimpleName: name(705) into InfixExpression: +(707) at 1", "Insert StringLiteral: \"\\\" value must not be null.\"(706) into InfixExpression: +(707) at 2", "Insert SimpleName: value(727) into MethodInvocation(729) at 0", "Update SimpleName: disableUrlEncoding(627) to toString", "Move SimpleName: disableUrlEncoding(627) into MethodInvocation(729) at 1", "Insert SimpleName: value(742) into MethodInvocation(744) at 0", "Update SimpleName: disableUrlEncoding(650) to toString", "Move SimpleName: disableUrlEncoding(650) into MethodInvocation(744) at 1", "Delete Modifier: private(61)", "Delete Modifier: final(62)", "Delete SimpleType: Boolean(64)", "Delete Dimension(65)", "Delete ArrayType: Boolean[](66)", "Delete VariableDeclarationFragment(68)", "Delete FieldDeclaration(69)", "Delete SimpleName: paramFlags(143)", "Delete QualifiedName: methodInfo.requestParamFlags(144)", "Delete Assignment: =(145)", "Delete ExpressionStatement(146)", "Delete Modifier: public(314)", "Delete SimpleName: Boolean(325)", "Delete SimpleType: Boolean(326)", "Delete SimpleName: disableUrlEncoding(352)", "Delete NullLiteral(353)", "Delete InfixExpression: ==(354)", "Delete InfixExpression: ||(357)", "Delete Modifier: public(429)", "Delete SimpleName: Boolean(440)", "Delete SimpleType: Boolean(441)", "Delete SimpleName: disableUrlEncoding(467)", "Delete NullLiteral(468)", "Delete InfixExpression: ==(469)", "Delete InfixExpression: ||(472)", "Delete SimpleType: Boolean(615)", "Delete SimpleName: disableUrlEncoding(616)", "Delete SimpleName: paramFlags(617)", "Delete SimpleName: i(618)", "Delete ArrayAccess(619)", "Delete VariableDeclarationFragment(620)", "Delete VariableDeclarationStatement(621)", "Delete Block(630)", "Delete SimpleName: Boolean(637)", "Delete SimpleType: Boolean(638)", "Delete SimpleName: disableUrlEncoding(639)", "Delete SimpleName: paramFlags(640)", "Delete SimpleName: i(641)", "Delete ArrayAccess(642)", "Delete VariableDeclarationFragment(643)", "Delete VariableDeclarationStatement(644)", "Delete Block(653)", "Delete IfStatement(654)"]}}, {"RequestInterceptor_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 3", "operations": ["INS SimpleName: name to SingleVariableDeclaration at 1", "INS TextElement: -annotated method argument. to TagElement at 2", "INS SimpleName: String to SimpleType: String at 0", "INS TagElement to Javadoc at 0", "INS MethodDeclaration to TypeDeclaration: interface at 3", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: addEncodedPathParam to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS TextElement:  &#64;EncodedPath to TagElement: @link at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS TextElement: Add a path parameter replacement without first URI encoding. This works exactly like a to TagElement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS Javadoc to MethodDeclaration at 0", "INS QualifiedName: retrofit.http.EncodedPath to TagElement: @link at 0", "INS SimpleName: value to SingleVariableDeclaration at 1", "INS TagElement: @link to TagElement at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 5", "operations": ["INS TextElement: Add an additional query parameter without first URI encoding. This will not replace any to TagElement at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: name to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: addEncodedQueryParam to MethodDeclaration at 2", "INS TextElement: existing query parameters. to TagElement at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: value to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: interface at 5", "INS PrimitiveType: void to MethodDeclaration at 1"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: Boolean", "DEL SimpleName: Boolean", "DEL SimpleName: disableUrlEncoding", "DEL SingleVariableDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: disableUrlEncoding", "DEL SimpleName: Boolean", "DEL SingleVariableDeclaration", "DEL SimpleType: Boolean"]}]}}, {"RequestInterceptor_diff": {"operations": ["Insert MethodDeclaration(70) into TypeDeclaration: interface(100) at 3", "Insert MethodDeclaration(99) into TypeDeclaration: interface(100) at 5", "Insert Javadoc(59) into MethodDeclaration(70) at 0", "Insert PrimitiveType: void(60) into MethodDeclaration(70) at 1", "Insert SimpleName: addEncodedPathParam(61) into MethodDeclaration(70) at 2", "Insert SingleVariableDeclaration(65) into MethodDeclaration(70) at 3", "Insert SingleVariableDeclaration(69) into MethodDeclaration(70) at 4", "Insert Javadoc(88) into MethodDeclaration(99) at 0", "Insert PrimitiveType: void(89) into MethodDeclaration(99) at 1", "Insert SimpleName: addEncodedQueryParam(90) into MethodDeclaration(99) at 2", "Insert SingleVariableDeclaration(94) into MethodDeclaration(99) at 3", "Insert SingleVariableDeclaration(98) into MethodDeclaration(99) at 4", "Insert TagElement(58) into Javadoc(59) at 0", "Insert SimpleType: String(63) into SingleVariableDeclaration(65) at 0", "Insert SimpleName: name(64) into SingleVariableDeclaration(65) at 1", "Insert SimpleType: String(67) into SingleVariableDeclaration(69) at 0", "Insert SimpleName: value(68) into SingleVariableDeclaration(69) at 1", "Insert TagElement(87) into Javadoc(88) at 0", "Insert SimpleType: String(92) into SingleVariableDeclaration(94) at 0", "Insert SimpleName: name(93) into SingleVariableDeclaration(94) at 1", "Insert SimpleType: String(96) into SingleVariableDeclaration(98) at 0", "Insert SimpleName: value(97) into SingleVariableDeclaration(98) at 1", "Insert TextElement: Add a path parameter replacement without first URI encoding. This works exactly like a(53) into TagElement(58) at 0", "Insert TagElement: @link(56) into TagElement(58) at 1", "Insert TextElement: -annotated method argument.(57) into TagElement(58) at 2", "Insert SimpleName: String(62) into SimpleType: String(63) at 0", "Insert SimpleName: String(66) into SimpleType: String(67) at 0", "Insert TextElement: Add an additional query parameter without first URI encoding. This will not replace any(85) into TagElement(87) at 0", "Insert TextElement: existing query parameters.(86) into TagElement(87) at 1", "Insert SimpleName: String(91) into SimpleType: String(92) at 0", "Insert SimpleName: String(95) into SimpleType: String(96) at 0", "Insert QualifiedName: retrofit.http.EncodedPath(54) into TagElement: @link(56) at 0", "Insert TextElement:  &#64;EncodedPath(55) into TagElement: @link(56) at 1", "Delete SimpleName: Boolean(52)", "Delete SimpleType: Boolean(53)", "Delete SimpleName: disableUrlEncoding(54)", "Delete SingleVariableDeclaration(55)", "Delete SimpleName: Boolean(70)", "Delete SimpleType: Boolean(71)", "Delete SimpleName: disableUrlEncoding(72)", "Delete SingleVariableDeclaration(73)"]}}, {"RestAdapter_cluster": {"actions": [{"root": "INS TagElement to Javadoc at 0", "operations": ["INS TextElement: use  to TagElement at 28", "INS TagElement: @link to TagElement at 29", "INS TagElement to Javadoc at 0", "INS TextElement:  @EncodedPath to TagElement: @link at 1", "INS QualifiedName: retrofit.http.EncodedQuery to TagElement: @link at 0", "INS TagElement: @link to TagElement at 31", "INS TextElement: . If the path or query element has already been URI encoded to TagElement at 27", "INS QualifiedName: retrofit.http.EncodedPath to TagElement: @link at 0", "INS TextElement:  or  to TagElement at 30"]}, {"root": "INS TagElement: @EncodedQuery to Javadoc at 1", "operations": ["INS TagElement: @EncodedQuery to Javadoc at 1"]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement: API endpoints are defined as methods on an interface with annotations providing metadata about to TagElement at 2", "MOV TagElement: @link to TagElement at 13", "MOV TagElement: @link to TagElement: @EncodedQuery at 27", "MOV TextElement: <p> to TagElement: @EncodedQuery at 33", "MOV TextElement: Alternative request body formats are supported by method annotations and corresponding parameter to TagElement: @EncodedQuery at 34", "MOV TagElement: @link to TagElement: @EncodedQuery at 12", "MOV TextElement: List&lt;Item> categoryList(@Path(\"cat\") String a, @Query(\"page\") int b); to TagElement: @EncodedQuery at 64", "MOV TextElement: Adapts a Java interface to a REST API. to TagElement at 0", "MOV TextElement: . to TagElement at 20", "MOV TextElement: . to TagElement: @EncodedQuery at 56", "MOV TextElement: Calling  to TagElement: @EncodedQuery at 68", "MOV TextElement: ,  to TagElement at 10", "MOV TextElement: . You can define your own HTTP method by creating an to TagElement at 17", "MOV TagElement: @code to TagElement: @EncodedQuery at 71", "MOV TagElement: @link to TagElement at 19", "MOV TextElement: <li> to TagElement: @EncodedQuery at 37", "MOV TagElement: @link to TagElement: @EncodedQuery at 16", "MOV TextElement: the form in which the HTTP call should be made. to TagElement at 3", "MOV TextElement: implementation of the API. to TagElement: @EncodedQuery at 73", "MOV TextElement: The relative path for a given method is obtained from an annotation on the method describing to TagElement at 5", "MOV TagElement: @link to TagElement: @EncodedQuery at 9", "MOV TagElement: @link to TagElement: @EncodedQuery at 52", "MOV TextElement: Method parameters can be used to replace parts of the URL by annotating them with to TagElement at 22", "MOV TextElement: response will be converted to the callback's parameter type using the specified to TagElement: @EncodedQuery at 11", "MOV TagElement: @link to TagElement: @EncodedQuery at 41", "MOV TextElement:  parameter annotation. to TagElement: @EncodedQuery at 48", "MOV TagElement: @link to TagElement: @EncodedQuery at 24", "MOV TagElement: @link to TagElement at 11", "MOV TextElement: . The HTTP to TagElement: @EncodedQuery at 17", "MOV TextElement: . The HTTP to TagElement: @EncodedQuery at 10", "MOV TextElement: <pre> to TagElement: @EncodedQuery at 59", "MOV TagElement: @link to TagElement at 9", "MOV TextElement: public interface MyApi { to TagElement: @EncodedQuery at 60", "MOV TextElement: annotation that takes a {code String} value and itself is annotated with to TagElement at 18", "MOV TextElement:  annotation. The object to TagElement: @EncodedQuery at 25", "MOV TextElement: specified by the  to TagElement: @EncodedQuery at 46", "MOV TextElement: <ul> to TagElement: @EncodedQuery at 36", "MOV TextElement:  with  to TagElement: @EncodedQuery at 70", "MOV TextElement:  parameter annotation. to TagElement: @EncodedQuery at 42", "MOV TagElement: @link to TagElement: @EncodedQuery at 44", "MOV TextElement: and  to TagElement at 15", "MOV TextElement: response will be converted to the method's return type using the specified to TagElement: @EncodedQuery at 18", "MOV TextElement:  on the supplied to TagElement: @EncodedQuery at 28", "MOV TextElement: </ul> to TagElement: @EncodedQuery at 21", "MOV TagElement: @link to TagElement at 16", "MOV TextElement: The body of a request is denoted by the  to TagElement: @EncodedQuery at 23", "MOV TextElement: HTTP requests happen in one of two ways: to TagElement: @EncodedQuery at 2", "MOV TextElement: . to TagElement: @EncodedQuery at 20", "MOV TextElement: <li>On the provided HTTP  to TagElement: @EncodedQuery at 4", "MOV TextElement: pairs specified by the  to TagElement: @EncodedQuery at 40", "MOV TagElement: @link to TagElement: @EncodedQuery at 5", "MOV TextElement: <p> to TagElement at 21", "MOV TagElement: @link to TagElement at 26", "MOV TextElement: <p> to TagElement: @EncodedQuery at 1", "MOV TagElement: @link to TagElement: @EncodedQuery at 31", "MOV TextElement: the request type. The built-in methods are  to TagElement at 6", "MOV TagElement: @link to TagElement: @EncodedQuery at 55", "MOV TextElement: Additional static headers can be added for an endpoint using the to TagElement: @EncodedQuery at 51", "MOV TextElement: For example: to TagElement: @EncodedQuery at 58", "MOV TextElement: void categoryList(@Path(\"cat\") String a, @Query(\"page\") int b, Callback&lt;List&lt;Item>> cb); to TagElement: @EncodedQuery at 62", "MOV TextElement: annotations: to TagElement: @EncodedQuery at 35", "MOV TextElement: . The last method parameter should be of type  to TagElement: @EncodedQuery at 8", "MOV TextElement: } to TagElement: @EncodedQuery at 65", "MOV TextElement:  will validate and create a new to TagElement: @EncodedQuery at 72", "MOV TextElement: <li>On the current thread returning the response or throwing a  to TagElement: @EncodedQuery at 15", "MOV TextElement: . to TagElement: @EncodedQuery at 0", "MOV TextElement: <p> to TagElement at 1", "MOV TextElement: &#64;POST(\"/category/{cat}\") // Synchronous execution. to TagElement: @EncodedQuery at 63", "MOV TagElement: @link to TagElement: @EncodedQuery at 29", "MOV TextElement: ,  to TagElement at 12", "MOV TextElement: , to TagElement at 8", "MOV TextElement: <p> to TagElement: @EncodedQuery at 57", "MOV TextElement:  - RFC 2387-compliant multi-part data with parts to TagElement: @EncodedQuery at 45", "MOV TextElement: by curly braces (e.g., \"{foo}\"). To add items to the query string of a URL use to TagElement at 25", "MOV TextElement: the lower bound will be used as the conversion type. to TagElement: @EncodedQuery at 14", "MOV TagElement: @link to TagElement: @EncodedQuery at 7", "MOV TextElement:  - Form-encoded data with key-value to TagElement: @EncodedQuery at 39", "MOV TagElement: @link to TagElement: @EncodedQuery at 38", "MOV TextElement: <ul> to TagElement: @EncodedQuery at 3", "MOV TagElement: @link to TagElement: @EncodedQuery at 47", "MOV TextElement:  for this instance. The body can also be a to TagElement: @EncodedQuery at 30", "MOV TextElement: <p> to TagElement at 4", "MOV TextElement: <li> to TagElement: @EncodedQuery at 43", "MOV TextElement: </pre> to TagElement: @EncodedQuery at 66", "MOV TextElement:  method annotation. For per-request control over a header to TagElement: @EncodedQuery at 53", "MOV TextElement: <p> to TagElement: @EncodedQuery at 22", "MOV TextElement: <p> to TagElement: @EncodedQuery at 50", "MOV TextElement:  with callbacks marshaled to the callback to TagElement: @EncodedQuery at 6", "MOV TextElement:  where it will be used directly. to TagElement: @EncodedQuery at 32", "MOV TextElement: . If the callback parameter type uses a wildcard, to TagElement: @EncodedQuery at 13", "MOV TagElement: @link to TagElement at 23", "MOV TextElement: annotate a parameter with  to TagElement: @EncodedQuery at 54", "MOV TagElement: @link to TagElement: @EncodedQuery at 69", "MOV TextElement: will be converted to request representation by a call to to TagElement: @EncodedQuery at 26", "MOV TextElement: , to TagElement at 14", "MOV TextElement: <p> to TagElement: @EncodedQuery at 67", "MOV TextElement: </ul> to TagElement: @EncodedQuery at 49", "MOV TagElement: @link to TagElement at 7", "MOV TagElement: @link to TagElement: @EncodedQuery at 19", "MOV TextElement: . Replacement sections are denoted by an identifier surrounded to TagElement at 24", "MOV TextElement: &#64;POST(\"/category/{cat}\") // Asynchronous execution. to TagElement: @EncodedQuery at 61"]}, {"root": "UPDATE from . to } to prevent repeated encoding.", "operations": ["UPD TextElement: . from . to } to prevent repeated encoding."]}, {"root": "DEL TagElement", "operations": ["DEL TagElement"]}]}}, {"RestAdapter_diff": {"operations": ["Insert TagElement(95) into Javadoc(213) at 0", "Insert TagElement: @EncodedQuery(208) into Javadoc(213) at 1", "Move TextElement: Adapts a Java interface to a REST API.(44) into TagElement(95) at 0", "Move TextElement: <p>(45) into TagElement(95) at 1", "Move TextElement: API endpoints are defined as methods on an interface with annotations providing metadata about(46) into TagElement(95) at 2", "Move TextElement: the form in which the HTTP call should be made.(47) into TagElement(95) at 3", "Move TextElement: <p>(48) into TagElement(95) at 4", "Move TextElement: The relative path for a given method is obtained from an annotation on the method describing(49) into TagElement(95) at 5", "Move TextElement: the request type. The built-in methods are (50) into TagElement(95) at 6", "Move TagElement: @link(53) into TagElement(95) at 7", "Move TextElement: ,(54) into TagElement(95) at 8", "Move TagElement: @link(57) into TagElement(95) at 9", "Move TextElement: , (58) into TagElement(95) at 10", "Move TagElement: @link(61) into TagElement(95) at 11", "Move TextElement: , (62) into TagElement(95) at 12", "Move TagElement: @link(65) into TagElement(95) at 13", "Move TextElement: ,(66) into TagElement(95) at 14", "Move TextElement: and (67) into TagElement(95) at 15", "Move TagElement: @link(70) into TagElement(95) at 16", "Move TextElement: . You can define your own HTTP method by creating an(71) into TagElement(95) at 17", "Move TextElement: annotation that takes a {code String} value and itself is annotated with(72) into TagElement(95) at 18", "Move TagElement: @link(75) into TagElement(95) at 19", "Move TextElement: .(76) into TagElement(95) at 20", "Move TextElement: <p>(77) into TagElement(95) at 21", "Move TextElement: Method parameters can be used to replace parts of the URL by annotating them with(78) into TagElement(95) at 22", "Move TagElement: @link(81) into TagElement(95) at 23", "Move TextElement: . Replacement sections are denoted by an identifier surrounded(82) into TagElement(95) at 24", "Move TextElement: by curly braces (e.g., \"{foo}\"). To add items to the query string of a URL use(83) into TagElement(95) at 25", "Move TagElement: @link(86) into TagElement(95) at 26", "Insert TextElement: . If the path or query element has already been URI encoded(87) into TagElement(95) at 27", "Insert TextElement: use (88) into TagElement(95) at 28", "Insert TagElement: @link(91) into TagElement(95) at 29", "Insert TextElement:  or (92) into TagElement(95) at 30", "Insert TagElement: @link(94) into TagElement(95) at 31", "Update TextElement: .(87) to } to prevent repeated encoding.", "Move TextElement: .(87) into TagElement: @EncodedQuery(208) at 0", "Move TextElement: <p>(88) into TagElement: @EncodedQuery(208) at 1", "Move TextElement: HTTP requests happen in one of two ways:(89) into TagElement: @EncodedQuery(208) at 2", "Move TextElement: <ul>(90) into TagElement: @EncodedQuery(208) at 3", "Move TextElement: <li>On the provided HTTP (91) into TagElement: @EncodedQuery(208) at 4", "Move TagElement: @link(96) into TagElement: @EncodedQuery(208) at 5", "Move TextElement:  with callbacks marshaled to the callback(94) into TagElement: @EncodedQuery(208) at 6", "Move TagElement: @link(93) into TagElement: @EncodedQuery(208) at 7", "Move TextElement: . The last method parameter should be of type (97) into TagElement: @EncodedQuery(208) at 8", "Move TagElement: @link(99) into TagElement: @EncodedQuery(208) at 9", "Move TextElement: . The HTTP(100) into TagElement: @EncodedQuery(208) at 10", "Move TextElement: response will be converted to the callback's parameter type using the specified(101) into TagElement: @EncodedQuery(208) at 11", "Move TagElement: @link(135) into TagElement: @EncodedQuery(208) at 12", "Move TextElement: . If the callback parameter type uses a wildcard,(105) into TagElement: @EncodedQuery(208) at 13", "Move TextElement: the lower bound will be used as the conversion type.(106) into TagElement: @EncodedQuery(208) at 14", "Move TextElement: <li>On the current thread returning the response or throwing a (107) into TagElement: @EncodedQuery(208) at 15", "Move TagElement: @link(109) into TagElement: @EncodedQuery(208) at 16", "Move TextElement: . The HTTP(110) into TagElement: @EncodedQuery(208) at 17", "Move TextElement: response will be converted to the method's return type using the specified(111) into TagElement: @EncodedQuery(208) at 18", "Move TagElement: @link(114) into TagElement: @EncodedQuery(208) at 19", "Move TextElement: .(115) into TagElement: @EncodedQuery(208) at 20", "Move TextElement: </ul>(116) into TagElement: @EncodedQuery(208) at 21", "Move TextElement: <p>(117) into TagElement: @EncodedQuery(208) at 22", "Move TextElement: The body of a request is denoted by the (118) into TagElement: @EncodedQuery(208) at 23", "Move TagElement: @link(121) into TagElement: @EncodedQuery(208) at 24", "Move TextElement:  annotation. The object(122) into TagElement: @EncodedQuery(208) at 25", "Move TextElement: will be converted to request representation by a call to(123) into TagElement: @EncodedQuery(208) at 26", "Move TagElement: @link(131) into TagElement: @EncodedQuery(208) at 27", "Move TextElement:  on the supplied(132) into TagElement: @EncodedQuery(208) at 28", "Move TagElement: @link(104) into TagElement: @EncodedQuery(208) at 29", "Move TextElement:  for this instance. The body can also be a(136) into TagElement: @EncodedQuery(208) at 30", "Move TagElement: @link(138) into TagElement: @EncodedQuery(208) at 31", "Move TextElement:  where it will be used directly.(139) into TagElement: @EncodedQuery(208) at 32", "Move TextElement: <p>(140) into TagElement: @EncodedQuery(208) at 33", "Move TextElement: Alternative request body formats are supported by method annotations and corresponding parameter(141) into TagElement: @EncodedQuery(208) at 34", "Move TextElement: annotations:(142) into TagElement: @EncodedQuery(208) at 35", "Move TextElement: <ul>(143) into TagElement: @EncodedQuery(208) at 36", "Move TextElement: <li>(144) into TagElement: @EncodedQuery(208) at 37", "Move TagElement: @link(147) into TagElement: @EncodedQuery(208) at 38", "Move TextElement:  - Form-encoded data with key-value(148) into TagElement: @EncodedQuery(208) at 39", "Move TextElement: pairs specified by the (149) into TagElement: @EncodedQuery(208) at 40", "Move TagElement: @link(152) into TagElement: @EncodedQuery(208) at 41", "Move TextElement:  parameter annotation.(153) into TagElement: @EncodedQuery(208) at 42", "Move TextElement: <li>(154) into TagElement: @EncodedQuery(208) at 43", "Move TagElement: @link(157) into TagElement: @EncodedQuery(208) at 44", "Move TextElement:  - RFC 2387-compliant multi-part data with parts(158) into TagElement: @EncodedQuery(208) at 45", "Move TextElement: specified by the (159) into TagElement: @EncodedQuery(208) at 46", "Move TagElement: @link(162) into TagElement: @EncodedQuery(208) at 47", "Move TextElement:  parameter annotation.(163) into TagElement: @EncodedQuery(208) at 48", "Move TextElement: </ul>(164) into TagElement: @EncodedQuery(208) at 49", "Move TextElement: <p>(165) into TagElement: @EncodedQuery(208) at 50", "Move TextElement: Additional static headers can be added for an endpoint using the(166) into TagElement: @EncodedQuery(208) at 51", "Move TagElement: @link(169) into TagElement: @EncodedQuery(208) at 52", "Move TextElement:  method annotation. For per-request control over a header(170) into TagElement: @EncodedQuery(208) at 53", "Move TextElement: annotate a parameter with (171) into TagElement: @EncodedQuery(208) at 54", "Move TagElement: @link(174) into TagElement: @EncodedQuery(208) at 55", "Move TextElement: .(175) into TagElement: @EncodedQuery(208) at 56", "Move TextElement: <p>(176) into TagElement: @EncodedQuery(208) at 57", "Move TextElement: For example:(177) into TagElement: @EncodedQuery(208) at 58", "Move TextElement: <pre>(178) into TagElement: @EncodedQuery(208) at 59", "Move TextElement: public interface MyApi {(179) into TagElement: @EncodedQuery(208) at 60", "Move TextElement: &#64;POST(\"/category/{cat}\") // Asynchronous execution.(180) into TagElement: @EncodedQuery(208) at 61", "Move TextElement: void categoryList(@Path(\"cat\") String a, @Query(\"page\") int b, Callback&lt;List&lt;Item>> cb);(181) into TagElement: @EncodedQuery(208) at 62", "Move TextElement: &#64;POST(\"/category/{cat}\") // Synchronous execution.(182) into TagElement: @EncodedQuery(208) at 63", "Move TextElement: List&lt;Item> categoryList(@Path(\"cat\") String a, @Query(\"page\") int b);(183) into TagElement: @EncodedQuery(208) at 64", "Move TextElement: }(184) into TagElement: @EncodedQuery(208) at 65", "Move TextElement: </pre>(185) into TagElement: @EncodedQuery(208) at 66", "Move TextElement: <p>(186) into TagElement: @EncodedQuery(208) at 67", "Move TextElement: Calling (187) into TagElement: @EncodedQuery(208) at 68", "Move TagElement: @link(193) into TagElement: @EncodedQuery(208) at 69", "Move TextElement:  with (194) into TagElement: @EncodedQuery(208) at 70", "Move TagElement: @code(196) into TagElement: @EncodedQuery(208) at 71", "Move TextElement:  will validate and create a new(197) into TagElement: @EncodedQuery(208) at 72", "Move TextElement: implementation of the API.(198) into TagElement: @EncodedQuery(208) at 73", "Insert QualifiedName: retrofit.http.EncodedPath(89) into TagElement: @link(91) at 0", "Insert TextElement:  @EncodedPath(90) into TagElement: @link(91) at 1", "Insert QualifiedName: retrofit.http.EncodedQuery(93) into TagElement: @link(94) at 0", "Delete TagElement(199)"]}}, {"RestMethodInfo_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 13", "operations": ["INS QualifiedName: retrofit.http.EncodedPath to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 13"]}, {"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS QualifiedName: retrofit.http.EncodedQuery to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 14"]}, {"root": "INS EnumConstantDeclaration to EnumDeclaration at 2", "operations": ["INS EnumConstantDeclaration to EnumDeclaration at 2", "INS SimpleName: ENCODED_PATH to EnumConstantDeclaration at 0"]}, {"root": "INS EnumConstantDeclaration to EnumDeclaration at 4", "operations": ["INS SimpleName: ENCODED_QUERY to EnumConstantDeclaration at 0", "INS EnumConstantDeclaration to EnumDeclaration at 4"]}, {"root": "INS InfixExpression: || to IfStatement at 0", "operations": ["INS SimpleName: annotationType to InfixExpression: == at 0", "INS TypeLiteral to InfixExpression: == at 1", "INS InfixExpression: == to InfixExpression: || at 1", "INS SimpleName: EncodedPath to SimpleType: EncodedPath at 0", "INS InfixExpression: || to IfStatement at 0", "INS SimpleType: EncodedPath to TypeLiteral at 0"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: == to InfixExpression: || at 0"]}, {"root": "INS IfStatement to Block at 5", "operations": ["INS InfixExpression: == to IfStatement at 0", "INS Block to IfStatement at 2", "INS SimpleName: annotationType to InfixExpression: == at 0", "INS IfStatement to Block at 5", "INS Block to IfStatement at 1", "INS SimpleType: EncodedPath to TypeLiteral at 0", "INS TypeLiteral to InfixExpression: == at 1"]}, {"root": "INS IfStatement to IfStatement at 2", "operations": ["INS SimpleName: EncodedQuery to SimpleType: EncodedQuery at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS IfStatement to IfStatement at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: Query to CastExpression at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: parameterAnnotation to CastExpression at 1", "INS SimpleName: String to SimpleType: String at 0", "INS ExpressionStatement to Block at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: annotationType to InfixExpression: == at 0", "INS SimpleName: name to VariableDeclarationFragment at 0", "INS SimpleName: value to MethodInvocation at 1", "INS SimpleName: paramUsage to ArrayAccess at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS SimpleType: EncodedQuery to TypeLiteral at 0", "INS SimpleName: name to Assignment: = at 1", "INS QualifiedName: ParamUsage.ENCODED_QUERY to Assignment: = at 1", "INS SimpleName: Query to SimpleType: Query at 0", "INS ExpressionStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: i to ArrayAccess at 1", "INS Block to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ArrayAccess to Assignment: = at 0", "INS SimpleName: i to ArrayAccess at 1", "INS SimpleName: paramNames to ArrayAccess at 0", "INS ArrayAccess to Assignment: = at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS TypeLiteral to InfixExpression: == at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV IfStatement to IfStatement at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from Path to EncodedPath", "operations": ["UPD SimpleName: Path from Path to EncodedPath"]}, {"root": "MOVE from SimpleType: EncodedPath", "operations": ["MOV SimpleName: Path to SimpleType: EncodedPath at 0"]}, {"root": "INS QualifiedName: ParamUsage.ENCODED_PATH to Assignment: = at 1", "operations": ["INS QualifiedName: ParamUsage.ENCODED_PATH to Assignment: = at 1"]}, {"root": "UPDATE from requestParamFlags to paramUsage", "operations": ["UPD SimpleName: requestParamFlags from requestParamFlags to paramUsage"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Dimension", "DEL SimpleName: requestParamFlags", "DEL SimpleName: Boolean", "DEL ArrayType: Boolean[]", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL SimpleType: Boolean"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL ArrayCreation", "DEL ArrayType: Boolean[]", "DEL SimpleName: Boolean", "DEL SimpleName: count", "DEL SimpleName: requestParamFlags", "DEL Dimension", "DEL ExpressionStatement", "DEL SimpleType: Boolean"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL MethodInvocation", "DEL SimpleType: Path", "DEL CastExpression", "DEL SimpleName: disableUrlEncoding", "DEL SimpleName: parameterAnnotation", "DEL SimpleName: Boolean", "DEL VariableDeclarationFragment", "DEL SimpleName: disableUrlEncoding", "DEL ParenthesizedExpression", "DEL VariableDeclarationStatement", "DEL SimpleType: Boolean"]}, {"root": "DEL SimpleName: disableUrlEncoding", "operations": ["DEL SimpleName: disableUrlEncoding"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: Boolean", "DEL VariableDeclarationFragment", "DEL SimpleName: disableUrlEncoding", "DEL CastExpression", "DEL SimpleType: Query", "DEL SimpleName: Query", "DEL SimpleName: disableUrlEncoding", "DEL MethodInvocation", "DEL SimpleName: parameterAnnotation", "DEL VariableDeclarationStatement", "DEL SimpleName: Boolean", "DEL ParenthesizedExpression"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: i", "DEL SimpleName: disableUrlEncoding", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: requestParamFlags", "DEL ArrayAccess"]}]}}, {"RestMethodInfo_diff": {"operations": ["Insert ImportDeclaration(27) into CompilationUnit(1624) at 13", "Insert ImportDeclaration(29) into CompilationUnit(1624) at 14", "Insert QualifiedName: retrofit.http.EncodedPath(26) into ImportDeclaration(27) at 0", "Insert QualifiedName: retrofit.http.EncodedQuery(28) into ImportDeclaration(29) at 0", "Insert EnumConstantDeclaration(93) into EnumDeclaration(106) at 2", "Insert EnumConstantDeclaration(97) into EnumDeclaration(106) at 4", "Insert SimpleName: ENCODED_PATH(92) into EnumConstantDeclaration(93) at 0", "Insert SimpleName: ENCODED_QUERY(96) into EnumConstantDeclaration(97) at 0", "Insert InfixExpression: ||(1186) into IfStatement(1497) at 0", "Move InfixExpression: ==(1188) into InfixExpression: ||(1186) at 0", "Insert InfixExpression: ==(1185) into InfixExpression: ||(1186) at 1", "Insert IfStatement(1261) into Block(1262) at 4", "Insert IfStatement(1495) into IfStatement(1496) at 2", "Insert SimpleName: annotationType(1181) into InfixExpression: ==(1185) at 0", "Insert TypeLiteral(1184) into InfixExpression: ==(1185) at 1", "Insert InfixExpression: ==(1246) into IfStatement(1261) at 0", "Insert Block(1253) into IfStatement(1261) at 1", "Insert Block(1260) into IfStatement(1261) at 2", "Insert InfixExpression: ==(1297) into IfStatement(1495) at 0", "Insert Block(1322) into IfStatement(1495) at 1", "Move IfStatement(1488) into IfStatement(1495) at 2", "Insert SimpleType: EncodedPath(1183) into TypeLiteral(1184) at 0", "Insert SimpleName: annotationType(1242) into InfixExpression: ==(1246) at 0", "Insert TypeLiteral(1245) into InfixExpression: ==(1246) at 1", "Move ExpressionStatement(1261) into Block(1253) at 0", "Move ExpressionStatement(1267) into Block(1260) at 0", "Insert SimpleName: annotationType(1293) into InfixExpression: ==(1297) at 0", "Insert TypeLiteral(1296) into InfixExpression: ==(1297) at 1", "Insert VariableDeclarationStatement(1309) into Block(1322) at 0", "Insert ExpressionStatement(1315) into Block(1322) at 1", "Insert ExpressionStatement(1321) into Block(1322) at 2", "Insert SimpleName: EncodedPath(1182) into SimpleType: EncodedPath(1183) at 0", "Insert SimpleType: EncodedPath(1244) into TypeLiteral(1245) at 0", "Insert SimpleType: EncodedQuery(1295) into TypeLiteral(1296) at 0", "Insert SimpleType: String(1299) into VariableDeclarationStatement(1309) at 0", "Insert VariableDeclarationFragment(1308) into VariableDeclarationStatement(1309) at 1", "Insert Assignment: =(1314) into ExpressionStatement(1315) at 0", "Insert Assignment: =(1320) into ExpressionStatement(1321) at 0", "Update SimpleName: Path(1204) to EncodedPath", "Move SimpleName: Path(1204) into SimpleType: EncodedPath(1244) at 0", "Insert QualifiedName: ParamUsage.ENCODED_PATH(1250) into Assignment: =(1251) at 1", "Insert SimpleName: EncodedQuery(1294) into SimpleType: EncodedQuery(1295) at 0", "Insert SimpleName: String(1298) into SimpleType: String(1299) at 0", "Insert SimpleName: name(1300) into VariableDeclarationFragment(1308) at 0", "Insert MethodInvocation(1307) into VariableDeclarationFragment(1308) at 1", "Insert ArrayAccess(1312) into Assignment: =(1314) at 0", "Insert SimpleName: name(1313) into Assignment: =(1314) at 1", "Insert ArrayAccess(1318) into Assignment: =(1320) at 0", "Insert QualifiedName: ParamUsage.ENCODED_QUERY(1319) into Assignment: =(1320) at 1", "Update SimpleName: requestParamFlags(1256) to paramUsage", "Insert ParenthesizedExpression(1305) into MethodInvocation(1307) at 0", "Insert SimpleName: value(1306) into MethodInvocation(1307) at 1", "Insert SimpleName: paramNames(1310) into ArrayAccess(1312) at 0", "Insert SimpleName: i(1311) into ArrayAccess(1312) at 1", "Insert SimpleName: paramUsage(1316) into ArrayAccess(1318) at 0", "Insert SimpleName: i(1317) into ArrayAccess(1318) at 1", "Insert CastExpression(1304) into ParenthesizedExpression(1305) at 0", "Insert SimpleType: Query(1302) into CastExpression(1304) at 0", "Insert SimpleName: parameterAnnotation(1303) into CastExpression(1304) at 1", "Insert SimpleName: Query(1301) into SimpleType: Query(1302) at 0", "Delete SimpleName: Boolean(185)", "Delete SimpleType: Boolean(186)", "Delete Dimension(187)", "Delete ArrayType: Boolean[](188)", "Delete SimpleName: requestParamFlags(189)", "Delete VariableDeclarationFragment(190)", "Delete FieldDeclaration(191)", "Delete SimpleName: requestParamFlags(1093)", "Delete SimpleName: Boolean(1094)", "Delete SimpleType: Boolean(1095)", "Delete Dimension(1096)", "Delete ArrayType: Boolean[](1097)", "Delete SimpleName: count(1098)", "Delete ArrayCreation(1099)", "Delete Assignment: =(1100)", "Delete ExpressionStatement(1101)", "Delete SimpleName: Boolean(1201)", "Delete SimpleType: Boolean(1202)", "Delete SimpleName: disableUrlEncoding(1203)", "Delete SimpleType: Path(1205)", "Delete SimpleName: parameterAnnotation(1206)", "Delete CastExpression(1207)", "Delete ParenthesizedExpression(1208)", "Delete SimpleName: disableUrlEncoding(1209)", "Delete MethodInvocation(1210)", "Delete VariableDeclarationFragment(1211)", "Delete VariableDeclarationStatement(1212)", "Delete SimpleName: disableUrlEncoding(1259)", "Delete SimpleName: Boolean(1286)", "Delete SimpleType: Boolean(1287)", "Delete SimpleName: disableUrlEncoding(1288)", "Delete SimpleName: Query(1289)", "Delete SimpleType: Query(1290)", "Delete SimpleName: parameterAnnotation(1291)", "Delete CastExpression(1292)", "Delete ParenthesizedExpression(1293)", "Delete SimpleName: disableUrlEncoding(1294)", "Delete MethodInvocation(1295)", "Delete VariableDeclarationFragment(1296)", "Delete VariableDeclarationStatement(1297)", "Delete SimpleName: requestParamFlags(1304)", "Delete SimpleName: i(1305)", "Delete ArrayAccess(1306)", "Delete SimpleName: disableUrlEncoding(1307)", "Delete Assignment: =(1308)", "Delete ExpressionStatement(1309)"]}}, {"Path_cluster": {"actions": [{"root": "DEL TextElement: &#64;GET(\"/{specialPath}\")", "operations": ["DEL TextElement: &#64;GET(\"/{specialPath}\")"]}, {"root": "DEL TextElement: void example2(@Path(value = \"specialPath\", disableUrlEncoding = true) String alreadyEncoded);", "operations": ["DEL TextElement: void example2(@Path(value = \"specialPath\", disableUrlEncoding = true) String alreadyEncoded);"]}, {"root": "DEL AnnotationTypeMemberDeclaration", "operations": ["DEL SimpleName: disableUrlEncoding", "DEL PrimitiveType: boolean", "DEL AnnotationTypeMemberDeclaration", "DEL BooleanLiteral: false"]}]}}, {"Path_diff": {"operations": ["Delete TextElement: &#64;GET(\"/{specialPath}\")(23)", "Delete TextElement: void example2(@Path(value = \"specialPath\", disableUrlEncoding = true) String alreadyEncoded);(24)", "Delete PrimitiveType: boolean(45)", "Delete SimpleName: disableUrlEncoding(46)", "Delete BooleanLiteral: false(47)", "Delete AnnotationTypeMemberDeclaration(48)"]}}, {"Query_cluster": {"actions": [{"root": "DEL TextElement: &#64;GET(\"/listAll\")", "operations": ["DEL TextElement: &#64;GET(\"/listAll\")"]}, {"root": "DEL TextElement: void example2(@Query(value = \"specialParam\", disableUrlEncoding = true) String alreadyEncoded);", "operations": ["DEL TextElement: void example2(@Query(value = \"specialParam\", disableUrlEncoding = true) String alreadyEncoded);"]}, {"root": "DEL AnnotationTypeMemberDeclaration", "operations": ["DEL SimpleName: disableUrlEncoding", "DEL PrimitiveType: boolean", "DEL AnnotationTypeMemberDeclaration", "DEL BooleanLiteral: false"]}]}}, {"Query_diff": {"operations": ["Delete TextElement: &#64;GET(\"/listAll\")(23)", "Delete TextElement: void example2(@Query(value = \"specialParam\", disableUrlEncoding = true) String alreadyEncoded);(24)", "Delete PrimitiveType: boolean(45)", "Delete SimpleName: disableUrlEncoding(46)", "Delete BooleanLiteral: false(47)", "Delete AnnotationTypeMemberDeclaration(48)"]}}], "commit_stats": [{"total_files": 7, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}