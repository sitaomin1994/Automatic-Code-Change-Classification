{"application": "apache-commons-collections", "csha": "fb7bae91d7fbde40767195dc8ea8166abd1bcb56", "files": [{"ExtendedProperties_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.collections", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.File", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.FileInputStream"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.IOException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.InputStream", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.InputStreamReader"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.LineNumberReader"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.OutputStream", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.PrintWriter"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.Reader"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.UnsupportedEncodingException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.ArrayList", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Enumeration", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Hashtable", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Iterator"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Locale", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.NoSuchElementException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Properties", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.StringTokenizer", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Vector", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TagElement", "DEL SimpleName: variable", "DEL MethodInvocation", "DEL TextElement: object that is not a Vector.", "DEL Modifier: final", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL Block", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleType: Object", "DEL SimpleName: NoSuchElementException", "DEL Block", "DEL PrefixExpression: !", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL InfixExpression: +", "DEL NullLiteral", "DEL IfStatement", "DEL TextElement:  The associated string if key is found,", "DEL TextElement: ExtendedProperties.", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: str", "DEL SimpleName: defaultValue", "DEL NumberLiteral: 1", "DEL Modifier: final", "DEL SimpleName: i", "DEL SimpleName: begin", "DEL SimpleName: value", "DEL SimpleName: String", "DEL SimpleType: Integer", "DEL VariableDeclarationFragment", "DEL TextElement:  The configuration key.", "DEL TagElement: @throws", "DEL SimpleName: values", "DEL SimpleName: String", "DEL SimpleName: PropertiesReader", "DEL WildcardType: ? extends Object", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL IfStatement", "DEL TagElement: @throws", "DEL SimpleType: List", "DEL Block", "DEL TagElement: @param", "DEL StringLiteral: \"=\"", "DEL SimpleType: StringBuilder", "DEL PrimitiveType: boolean", "DEL SimpleName: input", "DEL ReturnStatement", "DEL TagElement: @return", "DEL TextElement: object that is not a Long.", "DEL Block", "DEL TextElement: object that is not a List.", "DEL TextElement:  The associated short.", "DEL Modifier: public", "DEL Modifier: public", "DEL Modifier: final", "DEL ClassInstanceCreation", "DEL TextElement:  The configuration key.", "DEL TextElement:  is thrown if the key maps to an", "DEL SimpleType: String", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL SimpleType: String", "DEL TextElement: Check whether the object has more tokens.", "DEL SimpleName: append", "DEL Block", "DEL TextElement:  The default value.", "DEL SimpleName: List", "DEL NullLiteral", "DEL SimpleType: ArrayList", "DEL Modifier: public", "DEL SimpleName: ClassCastException", "DEL SimpleName: remove", "DEL SimpleName: get", "DEL TagElement: @throws", "DEL SimpleName: String", "DEL MethodInvocation", "DEL Block", "DEL Assignment: =", "DEL IfStatement", "DEL TextElement:  is thrown if the value mapped", "DEL TextElement:  The configuration key.", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL Modifier: protected", "DEL SimpleName: key", "DEL ThrowStatement", "DEL SimpleName: ClassCastException", "DEL SimpleName: String", "DEL StringLiteral: \"include\"", "DEL SimpleType: String", "DEL TextElement: These are the keys in the order they listed", "DEL TextElement: Constructor.", "DEL NullLiteral", "DEL SimpleName: append", "DEL SimpleName: InputStreamReader", "DEL SimpleName: subset", "DEL SimpleName: length", "DEL SimpleName: key", "DEL SimpleName: defaultValue", "DEL TagElement: @return", "DEL TextElement:  a String property", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL TagElement: @throws", "DEL Block", "DEL Modifier: protected", "DEL TextElement:  The default value.", "DEL SimpleType: Hashtable", "DEL SimpleName: b", "DEL Modifier: public", "DEL SimpleName: line", "DEL SimpleName: key", "DEL VariableDeclarationFragment", "DEL SimpleName: value", "DEL SimpleType: String", "DEL TagElement", "DEL StringLiteral: \"on\"", "DEL PrimitiveType: int", "DEL TextElement: map to an existing object.", "DEL SimpleType: Long", "DEL NumberLiteral: 1", "DEL Javadoc", "DEL ThrowStatement", "DEL SimpleName: s", "DEL Javadoc", "DEL SimpleName: ret", "DEL Javadoc", "DEL MethodDeclaration", "DEL Modifier: final", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL QualifiedName: tokens.length", "DEL Block", "DEL TextElement: <ul>", "DEL Modifier: public", "DEL SimpleName: keys", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL TextElement: Combines an existing ExtendedProperties object with this one.", "DEL MethodInvocation", "DEL Block", "DEL Modifier: final", "DEL PrimitiveType: byte", "DEL TagElement", "DEL SuperMethodInvocation", "DEL SimpleName: getInclude", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL Javadoc", "DEL Block", "DEL SimpleName: key", "DEL SimpleName: value", "DEL Block", "DEL TagElement: @param", "DEL TextElement: Get a List of strings associated with the given configuration key.", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL ForStatement", "DEL Javadoc", "DEL SimpleName: iterator", "DEL SimpleName: Double", "DEL Block", "DEL SimpleName: key", "DEL SimpleName: line", "DEL VariableDeclarationFragment", "DEL TextElement:  The associated Vector.", "DEL SimpleType: String", "DEL TagElement", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL TextElement: and <code>yes</code> for a <code>true</code> boolean value, and", "DEL SimpleName: defaultValue", "DEL SimpleName: getInteger", "DEL SimpleType: String", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Iterator<String>", "DEL SimpleName: clearProperty", "DEL SimpleType: Short", "DEL NullLiteral", "DEL ThrowStatement", "DEL SimpleName: ClassCastException", "DEL SimpleName: String", "DEL NumberLiteral: 2", "DEL TextElement: Get the list of the keys contained in the configuration", "DEL SimpleName: defaultValue", "DEL SimpleName: result", "DEL TagElement", "DEL SimpleName: string", "DEL PrefixExpression: !", "DEL Block", "DEL TextElement: setInclude() and getInclude() and the value of that property is", "DEL TagElement: @param", "DEL Modifier: final", "DEL Block", "DEL TextElement:  is thrown if the key maps to an", "DEL SimpleName: values", "DEL Block", "DEL SimpleType: String", "DEL SimpleType: String", "DEL SimpleType: Vector", "DEL SimpleName: append", "DEL ReturnStatement", "DEL PrimitiveType: boolean", "DEL SimpleName: defaults", "DEL VariableDeclarationExpression", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: priorVariables", "DEL TextElement:  The configuration key.", "DEL SimpleName: InputStreamReader", "DEL Block", "DEL SimpleName: FileInputStream", "DEL MethodInvocation", "DEL TagElement: @param", "DEL InfixExpression: -", "DEL SimpleType: Map", "DEL Modifier: public", "DEL ParameterizedType: ArrayList<String>", "DEL StringLiteral: \"' does not contain \"", "DEL ClassInstanceCreation", "DEL SimpleName: StringBuilder", "DEL MethodInvocation", "DEL SimpleName: escape", "DEL SimpleName: defaultValue", "DEL ExpressionStatement", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL CharacterLiteral: ','", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: initialBase", "DEL TextElement: malformed (does not contain an equals sign).", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TagElement: @param", "DEL MethodInvocation", "DEL IfStatement", "DEL TextElement: Add a map full of key/value pairs to the ExtendedProperties. ", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL InfixExpression: >", "DEL TagElement: @throws", "DEL TagElement", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL NullLiteral", "DEL SimpleName: String", "DEL SimpleName: key", "DEL TagElement", "DEL StringLiteral: \"file.separator\"", "DEL SimpleType: IllegalArgumentException", "DEL Dimension", "DEL SimpleName: key", "DEL Modifier: protected", "DEL TextElement: Load the properties from the given input stream.", "DEL SimpleName: Short", "DEL SimpleName: d", "DEL VariableDeclarationFragment", "DEL SimpleName: variable", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleName: buf", "DEL SimpleName: equalSign", "DEL SimpleName: String", "DEL Block", "DEL SimpleType: String", "DEL ReturnStatement", "DEL SimpleName: equalSign", "DEL IfStatement", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: NumberFormatException", "DEL InstanceofExpression", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: newKey", "DEL SimpleName: key", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleType: String", "DEL SimpleName: defaultValue", "DEL SimpleName: key", "DEL SimpleName: enc", "DEL ReturnStatement", "DEL SimpleType: StringBuilder", "DEL SimpleName: value", "DEL Modifier: public", "DEL TextElement:  is thrown if the key doesn't", "DEL SimpleType: String", "DEL StringLiteral: \"off\"", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL ExpressionStatement", "DEL Block", "DEL TextElement:  if a file error occurs", "DEL MethodInvocation", "DEL ParameterizedType: ArrayList<String>", "DEL Block", "DEL ParameterizedType: Iterator<?>", "DEL TextElement: include = additional.properties", "DEL SimpleName: String", "DEL SimpleName: getKeys", "DEL SingleVariableDeclaration", "DEL SimpleName: defaultValue", "DEL MethodInvocation", "DEL SimpleName: defaults", "DEL SimpleName: put", "DEL ExpressionStatement", "DEL TextElement:  The configuration key.", "DEL Modifier: final", "DEL TextElement:  is thrown if the value mapped", "DEL MethodInvocation", "DEL TextElement: key = value", "DEL Javadoc", "DEL SimpleType: StringBuilder", "DEL ExpressionStatement", "DEL Block", "DEL PrimitiveType: void", "DEL Block", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: Vector", "DEL SimpleName: input", "DEL MethodDeclaration", "DEL SimpleType: ExtendedProperties", "DEL ReturnStatement", "DEL CharacterLiteral: '\\\\'", "DEL SimpleName: b", "DEL FieldAccess", "DEL MethodInvocation", "DEL PostfixExpression: --", "DEL SimpleName: buf", "DEL Modifier: final", "DEL SimpleName: ExtendedProperties", "DEL InfixExpression: >=", "DEL TextElement: if not then default value if exists, otherwise null", "DEL SimpleName: i", "DEL SimpleType: List", "DEL SimpleName: containsKey", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL InfixExpression: ||", "DEL SimpleName: key", "DEL TextElement:  is thrown if the key maps to an", "DEL SimpleType: Byte", "DEL SimpleName: substring", "DEL PrimitiveType: double", "DEL SimpleType: String", "DEL SimpleName: list", "DEL SimpleName: defaults", "DEL PrimitiveType: int", "DEL SimpleName: e", "DEL StringLiteral: \"' doesn't map to an existing object\"", "DEL SimpleName: interpolate", "DEL MethodDeclaration", "DEL SimpleName: key", "DEL MethodDeclaration", "DEL TextElement: <a href=\"http://commons.apache.org/configuration\">Commons Configuration</a>.", "DEL TextElement:  The configuration key.", "DEL SimpleName: length", "DEL SimpleName: defaultValue", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: String", "DEL TextElement: object that is not a String/List.", "DEL SimpleName: substring", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL TextElement:  is thrown if the value mapped", "DEL SimpleName: Object", "DEL Modifier: static", "DEL SimpleName: key", "DEL InfixExpression: !=", "DEL SimpleName: substring", "DEL Modifier: final", "DEL InstanceofExpression", "DEL SimpleName: result", "DEL Javadoc", "DEL TextElement: you wish to perform operations with configuration", "DEL SimpleName: key", "DEL ClassInstanceCreation", "DEL SimpleName: Short", "DEL SimpleName: getString", "DEL SimpleName: it", "DEL CastExpression", "DEL SimpleName: defaults", "DEL Modifier: private", "DEL MethodDeclaration", "DEL SimpleName: next", "DEL Block", "DEL MethodDeclaration", "DEL Block", "DEL TextElement:  The associated short if key is found and has valid", "DEL SimpleType: Byte", "DEL MethodInvocation", "DEL SimpleName: variable", "DEL TextElement: by the key has not a valid number format.", "DEL MethodInvocation", "DEL SimpleName: equalSign", "DEL Block", "DEL TagElement: @return", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL SimpleName: addPropertyInternal", "DEL TextElement:  if a file error occurs", "DEL SimpleName: key", "DEL CatchClause", "DEL IfStatement", "DEL TagElement: @param", "DEL ForStatement", "DEL PrefixExpression: -", "DEL InfixExpression: !=", "DEL SimpleName: theKeys", "DEL SimpleName: result", "DEL NullLiteral", "DEL ReturnStatement", "DEL SimpleName: reader", "DEL TextElement: as if they were on the same line separated with commas.", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL SimpleName: index", "DEL SimpleName: NumberFormatException", "DEL TextElement: to the parent configuration file. So if you have something", "DEL TextElement:  The configuration key.", "DEL InfixExpression: ==", "DEL TagElement: @param", "DEL InfixExpression: +", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: f", "DEL TextElement:  is thrown if the key doesn't", "DEL Block", "DEL EnhancedForStatement", "DEL SimpleName: defaultValue", "DEL ThrowStatement", "DEL SimpleName: file", "DEL SimpleName: output", "DEL SimpleName: key", "DEL SingleVariableDeclaration", "DEL SimpleName: hasMoreTokens", "DEL ArrayAccess", "DEL Block", "DEL SimpleName: key", "DEL SimpleName: IOException", "DEL TextElement:  for the property", "DEL SimpleName: START_TOKEN", "DEL IfStatement", "DEL Modifier: final", "DEL Javadoc", "DEL SimpleName: values", "DEL TextElement:  the string with the interpolation taken care of", "DEL Modifier: final", "DEL TextElement:  $Id$", "DEL InfixExpression: !=", "DEL Modifier: final", "DEL SimpleName: key", "DEL TextElement: features like automatic reloading, advanced interpolation, more type", "DEL SimpleType: ArrayList", "DEL SimpleName: s", "DEL SimpleName: entrySet", "DEL InfixExpression: -", "DEL SimpleName: prefix", "DEL SimpleName: map", "DEL TagElement: @return", "DEL SimpleName: String", "DEL TagElement: @return", "DEL InstanceofExpression", "DEL SimpleName: next", "DEL SimpleName: Properties", "DEL SimpleName: base", "DEL Modifier: final", "DEL SimpleName: begin", "DEL SimpleName: prefix", "DEL SimpleName: value", "DEL ExpressionStatement", "DEL SimpleName: substring", "DEL SimpleType: Object", "DEL TextElement: value or not. We will allow <code>true</code>, <code>on</code>,", "DEL TextElement:  The default value of the resource.", "DEL SimpleName: buf", "DEL SimpleName: s", "DEL SimpleName: enc", "DEL SimpleName: addPropertyInternal", "DEL TextElement: is placed at the end of the line that continues below.", "DEL SimpleName: ClassCastException", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: hasMoreElements", "DEL ClassInstanceCreation", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL StringLiteral: \"8859_1\"", "DEL TextElement:  A Reader.", "DEL NumberLiteral: 0", "DEL Modifier: public", "DEL SimpleName: Object", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL NumberLiteral: 1", "DEL SimpleName: NumberFormatException", "DEL SimpleType: NoSuchElementException", "DEL VariableDeclarationStatement", "DEL Block", "DEL ParameterizedType: Map<String,Object>", "DEL Javadoc", "DEL TextElement: The list is a copy of the internal data of this object, and as", "DEL SimpleName: ClassCastException", "DEL PrimitiveType: char", "DEL SimpleType: Iterator", "DEL Block", "DEL Modifier: final", "DEL SimpleName: String", "DEL SimpleName: buf", "DEL VariableDeclarationFragment", "DEL SimpleName: value", "DEL SimpleName: load", "DEL SimpleName: validSubset", "DEL SimpleName: NumberFormatException", "DEL MethodDeclaration", "DEL SimpleName: IllegalArgumentException", "DEL SingleVariableDeclaration", "DEL TextElement:  is thrown if the key maps to an", "DEL SimpleName: String", "DEL SimpleName: getDouble", "DEL SimpleName: i", "DEL TagElement: @param", "DEL SimpleName: key", "DEL SimpleName: token", "DEL SimpleType: String", "DEL TextElement:  is thrown if the value mapped", "DEL Block", "DEL ReturnStatement", "DEL CastExpression", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleType: String", "DEL Javadoc", "DEL SimpleName: input", "DEL SimpleName: String", "DEL SimpleName: getKeys", "DEL TextElement:  if no keys matched", "DEL SimpleName: line", "DEL SimpleType: String", "DEL Assignment: =", "DEL TagElement: @return", "DEL TagElement: @throws", "DEL TagElement: @throws", "DEL SimpleName: ClassCastException", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL ClassInstanceCreation", "DEL InfixExpression: !=", "DEL Block", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL TextElement:  value as object. Will return user value if exists,", "DEL SimpleName: priorVariables", "DEL Modifier: final", "DEL SimpleType: String", "DEL SimpleName: value", "DEL SimpleName: testBoolean", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL MethodInvocation", "DEL StringLiteral: \"' doesn't map to a String/List object\"", "DEL SimpleName: key", "DEL SimpleName: getDouble", "DEL SimpleName: ClassCastException", "DEL SimpleName: String", "DEL Modifier: public", "DEL Block", "DEL VariableDeclarationExpression", "DEL VariableDeclarationStatement", "DEL TextElement:  The associated properties if key is found.", "DEL TagElement: @throws", "DEL NumberLiteral: 1", "DEL SimpleName: defaultValue", "DEL TagElement: @return", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: i", "DEL MethodInvocation", "DEL ParameterizedType: Vector<String>", "DEL ExpressionStatement", "DEL SimpleName: value", "DEL SimpleName: reader", "DEL TextElement: object that is not a List.", "DEL SimpleName: ExtendedProperties", "DEL ReturnStatement", "DEL MethodInvocation", "DEL PrimitiveType: long", "DEL WhileStatement", "DEL TextElement:  The associated List object.", "DEL SimpleName: value", "DEL SimpleName: output", "DEL Assignment: =", "DEL SimpleName: key", "DEL SimpleName: key", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: String", "DEL Block", "DEL SimpleName: key", "DEL CastExpression", "DEL SimpleName: endsWithSlash", "DEL SimpleType: String", "DEL InfixExpression: +", "DEL SimpleType: File", "DEL SuperMethodInvocation", "DEL SimpleType: IOException", "DEL Assignment: =", "DEL TextElement: <code>resource.loader = file</code>", "DEL SimpleName: substring", "DEL SimpleName: isInitialized", "DEL SimpleName: key", "DEL SimpleName: String", "DEL SimpleName: toString", "DEL SimpleName: defaults", "DEL Block", "DEL SimpleName: StringBuilder", "DEL SimpleName: NumberFormatException", "DEL TextElement: object that is not a String.", "DEL ParameterizedType: List<String>", "DEL ReturnStatement", "DEL NullLiteral", "DEL SimpleType: ExtendedProperties", "DEL VariableDeclarationExpression", "DEL VariableDeclarationFragment", "DEL CharacterLiteral: '\\''", "DEL SimpleName: key", "DEL SimpleName: charAt", "DEL SimpleName: defaultValue", "DEL SimpleType: String", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL InfixExpression: !=", "DEL SimpleType: Short", "DEL Modifier: final", "DEL SimpleType: String", "DEL TextElement:   the encoding to use", "DEL Modifier: final", "DEL TextElement: by the key has not a valid number format.", "DEL TextElement:  an Iterator over the keys", "DEL SimpleName: List", "DEL Block", "DEL SimpleType: List", "DEL TagElement: @throws", "DEL Modifier: final", "DEL TextElement:  is thrown if the key maps to an", "DEL SimpleName: Float", "DEL TextElement:  The default value.", "DEL ClassInstanceCreation", "DEL TextElement: object that is not a Byte.", "DEL SimpleName: key", "DEL VariableDeclarationFragment", "DEL Block", "DEL MarkerAnnotation", "DEL TextElement: This is the name of the property that can point to other", "DEL TagElement: @param", "DEL SimpleName: defaults", "DEL IfStatement", "DEL SimpleName: Boolean", "DEL Block", "DEL SimpleType: String", "DEL TagElement: @code", "DEL Modifier: final", "DEL ReturnStatement", "DEL SimpleType: Vector", "DEL SimpleName: priorVariables", "DEL ClassInstanceCreation", "DEL SimpleName: equalsIgnoreCase", "DEL TextElement: The list is a copy of the internal data of this object, and as", "DEL TagElement: @param", "DEL SimpleName: toString", "DEL SimpleName: String", "DEL Modifier: final", "DEL SimpleName: Override", "DEL VariableDeclarationStatement", "DEL SimpleName: values", "DEL MethodInvocation", "DEL TextElement: <code>false</code>, <code>off</code>, and <code>no</code> for", "DEL SimpleName: defaults", "DEL TagElement: @serial", "DEL Javadoc", "DEL SimpleName: flush", "DEL SimpleName: END_TOKEN", "DEL TextElement: <code>addProperty(\"resource.loader\", \"classpath\")</code>", "DEL SimpleName: String", "DEL SimpleName: NoSuchElementException", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL SimpleName: key", "DEL SimpleName: StringBuilder", "DEL SimpleName: String", "DEL NumberLiteral: 1", "DEL SimpleName: key", "DEL SimpleName: i", "DEL SimpleName: value", "DEL TagElement", "DEL SimpleType: String", "DEL PrimitiveType: int", "DEL SimpleName: append", "DEL InstanceofExpression", "DEL SimpleType: String", "DEL SimpleName: value", "DEL SimpleName: String", "DEL Modifier: final", "DEL SingleMemberAnnotation", "DEL TagElement", "DEL SimpleName: getLong", "DEL SimpleName: Object", "DEL NullLiteral", "DEL TextElement:  is thrown if the key maps to an", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleType: String", "DEL TypeDeclaration: class", "DEL TagElement: @return", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: value", "DEL SimpleType: String", "DEL SimpleName: key", "DEL SimpleName: getLong", "DEL InfixExpression: ==", "DEL TagElement: @throws", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: equalSign", "DEL SimpleName: ArrayList", "DEL TagElement: @param", "DEL SimpleType: String", "DEL SimpleName: booleanValue", "DEL SimpleName: priorVariables", "DEL SimpleName: defaultValue", "DEL SimpleName: file", "DEL SimpleName: key", "DEL SimpleType: String", "DEL SimpleName: addPropertyDirect", "DEL SimpleName: buffer", "DEL StringLiteral: \"' doesn't map to a Integer object\"", "DEL SimpleType: ArrayList", "DEL SimpleName: in", "DEL SimpleName: intValue", "DEL SimpleName: i", "DEL Block", "DEL SimpleName: put", "DEL StringLiteral: \"' doesn't map to a Vector object\"", "DEL SimpleName: charAt", "DEL SimpleName: println", "DEL FieldDeclaration", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleName: String", "DEL SimpleName: getInt", "DEL SimpleName: key", "DEL SimpleName: key", "DEL Block", "DEL TextElement: # A long property may be separated on multiple lines", "DEL SimpleName: Short", "DEL Modifier: final", "DEL Modifier: final", "DEL InfixExpression: ==", "DEL SimpleType: Vector", "DEL TextElement: 'line' before the position indicated by the 'index'.", "DEL SimpleName: token", "DEL Javadoc", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleName: UnsupportedEncodingException", "DEL SimpleName: key", "DEL SimpleName: currentOutput", "DEL SimpleName: ExtendedProperties", "DEL SimpleType: Float", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL Block", "DEL TextElement:  The configuration key.", "DEL CharacterLiteral: '\\''", "DEL SimpleName: ExtendedProperties", "DEL PrefixExpression: -", "DEL SimpleName: currentElement", "DEL SimpleName: key", "DEL TextElement:   the key to store at", "DEL Modifier: final", "DEL Block", "DEL SimpleName: ArrayList", "DEL TagElement: @throws", "DEL SimpleName: base", "DEL MethodInvocation", "DEL SimpleName: toString", "DEL ReturnStatement", "DEL SimpleName: convertProperties", "DEL SimpleName: toLowerCase", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL SimpleName: keys", "DEL ReturnStatement", "DEL TextElement:  is thrown if the value mapped", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleType: StringBuilder", "DEL TagElement: @throws", "DEL SingleVariableDeclaration", "DEL SimpleName: key", "DEL SimpleType: String", "DEL ReturnStatement", "DEL SimpleType: StringBuilder", "DEL TagElement", "DEL TagElement: @throws", "DEL TextElement:  The configuration key.", "DEL SimpleName: key", "DEL SimpleName: String", "DEL TagElement: @param", "DEL TextElement:  is thrown if the key maps to an", "DEL VariableDeclarationFragment", "DEL TextElement: object that is not a Float.", "DEL WildcardType: ?", "DEL SimpleType: String", "DEL TextElement: format, default value otherwise.", "DEL SimpleName: defaultValue", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL TextElement: The property delimiter used while parsing (a comma).", "DEL VariableDeclarationFragment", "DEL Block", "DEL ExpressionStatement", "DEL Block", "DEL Modifier: public", "DEL Block", "DEL SimpleName: line", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: file", "DEL SimpleName: value", "DEL SimpleName: StringBuilder", "DEL SimpleName: output", "DEL SimpleName: base", "DEL SimpleName: key", "DEL TextElement: this ExtendedProperties object.", "DEL SimpleName: Long", "DEL SimpleType: Properties", "DEL TextElement: If a property is named \"include\" (or whatever is defined by", "DEL TextElement: </li>", "DEL SimpleName: Long", "DEL MethodInvocation", "DEL SimpleName: ClassCastException", "DEL TagElement", "DEL SimpleName: next", "DEL SimpleName: defaults", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL SimpleName: currentOutput", "DEL ClassInstanceCreation", "DEL NullLiteral", "DEL NumberLiteral: 0", "DEL SimpleName: key", "DEL SimpleType: Enumeration", "DEL TextElement:  returns the key name with the ${key} substituted", "DEL ExpressionStatement", "DEL TagElement: @return", "DEL SimpleName: value", "DEL SimpleName: keys", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL NumberLiteral: 1", "DEL SimpleName: SuppressWarnings", "DEL ThrowStatement", "DEL SimpleType: String", "DEL SimpleName: Long", "DEL SimpleName: buf", "DEL SingleVariableDeclaration", "DEL SimpleName: value", "DEL NullLiteral", "DEL CharacterLiteral: '\\''", "DEL SimpleName: token", "DEL SimpleName: it", "DEL VariableDeclarationStatement", "DEL SimpleName: getKey", "DEL Block", "DEL SimpleName: keys", "DEL SimpleName: defaultValue", "DEL InstanceofExpression", "DEL SimpleName: Double", "DEL Modifier: public", "DEL TagElement: @throws", "DEL PrimitiveType: void", "DEL SimpleName: fileSeparator", "DEL SimpleName: NoSuchElementException", "DEL SimpleName: PropertiesReader", "DEL StringLiteral: \"no\"", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL SimpleName: defaultValue", "DEL SimpleName: defaults", "DEL TagElement", "DEL Modifier: final", "DEL SimpleName: prefix", "DEL SimpleName: matchingKeys", "DEL SimpleType: List", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: equals", "DEL SimpleName: String", "DEL SimpleType: List", "DEL MarkerAnnotation", "DEL InfixExpression: !=", "DEL NumberLiteral: 1", "DEL SimpleName: result", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: put", "DEL NullLiteral", "DEL Modifier: final", "DEL SimpleName: nextElement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: ClassCastException", "DEL SimpleName: getProperty", "DEL SimpleName: prefix", "DEL SimpleName: value", "DEL Block", "DEL SimpleType: PropertiesReader", "DEL Modifier: final", "DEL TagElement: @param", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: value", "DEL Modifier: final", "DEL SimpleName: value", "DEL InfixExpression: !=", "DEL TextElement: properties file for including other properties files.", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: defaults", "DEL Modifier: final", "DEL Block", "DEL SimpleName: defaultValue", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: reader", "DEL SimpleName: append", "DEL MethodDeclaration", "DEL TextElement:  3.2", "DEL SimpleName: getList", "DEL SimpleType: List", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: Enumeration", "DEL TextElement:  The default value.", "DEL SimpleName: value", "DEL MethodInvocation", "DEL TagElement: @param", "DEL TagElement: @param", "DEL NullLiteral", "DEL InfixExpression: <", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: String", "DEL TagElement", "DEL PostfixExpression: ++", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: String", "DEL SimpleName: String", "DEL SuperMethodInvocation", "DEL TagElement: @return", "DEL MarkerAnnotation", "DEL VariableDeclarationFragment", "DEL TextElement:  The associated List.", "DEL MethodInvocation", "DEL TextElement: text maps to a boolean value, or <code>null</code> otherwise.", "DEL Modifier: final", "DEL SimpleType: ClassCastException", "DEL TagElement: @throws", "DEL MethodInvocation", "DEL TextElement:  The associated string array if key is found.", "DEL SimpleName: ClassCastException", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: input", "DEL SimpleName: defaultValue", "DEL NumberLiteral: 4064305575636043822L", "DEL SimpleName: props", "DEL SimpleName: String", "DEL TextElement: # This sequence generates exactly the same result", "DEL Modifier: public", "DEL Modifier: public", "DEL SimpleName: equals", "DEL SimpleName: key", "DEL InfixExpression: ==", "DEL TextElement:  The associated float if key is found and has valid", "DEL WhileStatement", "DEL SimpleName: value", "DEL Assignment: =", "DEL Block", "DEL SimpleName: List", "DEL TextElement: following:", "DEL SimpleName: key", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: defaults", "DEL SimpleName: substring", "DEL TextElement: format, default value otherwise.", "DEL TextElement:  The default value.", "DEL SimpleName: key", "DEL IfStatement", "DEL SimpleType: String", "DEL SimpleType: Short", "DEL SimpleName: Vector", "DEL MethodInvocation", "DEL SimpleName: NumberFormatException", "DEL Block", "DEL SimpleName: getByte", "DEL SimpleName: addPropertyDirect", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleType: String", "DEL ClassInstanceCreation", "DEL SimpleName: defaults", "DEL ConstructorInvocation", "DEL TextElement:  is thrown if the key doesn't", "DEL SimpleName: NoSuchElementException", "DEL NullLiteral", "DEL Block", "DEL SimpleType: Reader", "DEL SimpleName: Override", "DEL CharacterLiteral: '\\\\'", "DEL MethodInvocation", "DEL SimpleType: ArrayList", "DEL IfStatement", "DEL SimpleName: key", "DEL SimpleType: ArrayList", "DEL TextElement:  The default value.", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL MethodInvocation", "DEL Dimension", "DEL SimpleType: PropertiesReader", "DEL SimpleName: END_TOKEN", "DEL SingleVariableDeclaration", "DEL TextElement: Save the properties to the given output stream.", "DEL TagElement: @param", "DEL SimpleName: list", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: Vector", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: String", "DEL SimpleName: length", "DEL SimpleName: name", "DEL NullLiteral", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL Modifier: final", "DEL SimpleName: inc", "DEL SimpleName: result", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleName: file", "DEL TagElement: @param", "DEL SimpleName: put", "DEL SimpleName: Properties", "DEL NullLiteral", "DEL PrimitiveType: long", "DEL TextElement: <b>Please consider using the", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: PropertiesTokenizer", "DEL TagElement", "DEL CastExpression", "DEL IfStatement", "DEL SimpleName: toString", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: String", "DEL SimpleName: defaults", "DEL SimpleType: InputStreamReader", "DEL NullLiteral", "DEL SimpleType: String", "DEL PrimitiveType: int", "DEL IfStatement", "DEL SimpleName: priorVariables", "DEL Block", "DEL TextElement: Get a int associated with the given configuration key.", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL TextElement:  The default value.", "DEL EnhancedForStatement", "DEL TextElement: Get a float associated with the given configuration key.", "DEL SimpleName: keys", "DEL InfixExpression: +", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL Block", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"unchecked\"", "DEL SimpleName: String", "DEL ArrayType: String[]", "DEL Modifier: synchronized", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: getInteger", "DEL SimpleName: get", "DEL Modifier: final", "DEL Block", "DEL TextElement:   the InputStream to load from", "DEL SimpleName: getInteger", "DEL SimpleName: entry", "DEL SimpleName: f", "DEL MethodDeclaration", "DEL SimpleType: StringBuilder", "DEL Block", "DEL Modifier: final", "DEL SimpleName: toString", "DEL Modifier: final", "DEL TagElement: @param", "DEL TagElement: @param", "DEL SimpleName: String", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL Javadoc", "DEL NullLiteral", "DEL SimpleName: String", "DEL SimpleName: END_TOKEN", "DEL SimpleType: String", "DEL SimpleName: entry", "DEL Modifier: public", "DEL TagElement: @throws", "DEL SimpleName: String", "DEL SimpleName: begin", "DEL TextElement:  The configuration key.", "DEL NullLiteral", "DEL TagElement: @param", "DEL SimpleName: value", "DEL SimpleName: value", "DEL SimpleName: getLong", "DEL SimpleName: obj", "DEL SimpleName: values", "DEL TagElement: @param", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: key", "DEL Modifier: final", "DEL SimpleName: key", "DEL TextElement:  The associated boolean.", "DEL IfStatement", "DEL NullLiteral", "DEL Modifier: final", "DEL SimpleName: key", "DEL Block", "DEL SimpleName: Iterator", "DEL SimpleName: defaultValue", "DEL SimpleType: Double", "DEL TextElement:  full of key/value pair data", "DEL SimpleType: Object", "DEL Modifier: final", "DEL SimpleName: getProperty", "DEL SimpleName: getVector", "DEL Modifier: final", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleName: key", "DEL IfStatement", "DEL Modifier: final", "DEL InfixExpression: !=", "DEL SimpleName: key", "DEL InfixExpression: !=", "DEL ReturnStatement", "DEL SimpleName: ClassCastException", "DEL MethodInvocation", "DEL SimpleName: s", "DEL Modifier: final", "DEL ParenthesizedExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: NumberFormatException", "DEL SimpleName: equals", "DEL TryStatement", "DEL SimpleName: List", "DEL TextElement: any default parent Properties of the specified input object.", "DEL TagElement: @return", "DEL MethodDeclaration", "DEL SimpleName: defaults", "DEL SimpleName: String", "DEL Block", "DEL StringLiteral: \": \"", "DEL TextElement: Adds a key/value pair to the map.  This routine does", "DEL TextElement: object that is not a String/List.", "DEL SimpleType: InputStreamReader", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL SimpleName: value", "DEL SimpleName: key", "DEL TagElement: @throws", "DEL TextElement:  is thrown if the key maps to an", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: Boolean", "DEL ExpressionStatement", "DEL SimpleName: string", "DEL SimpleName: NoSuchElementException", "DEL Modifier: public", "DEL SimpleType: Float", "DEL SimpleName: key", "DEL SimpleType: List", "DEL SimpleName: buffer", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: getFloat", "DEL SimpleName: value", "DEL SimpleName: value", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleName: StringBuilder", "DEL ConditionalExpression", "DEL SimpleName: String", "DEL Block", "DEL SimpleName: insert", "DEL SimpleName: getStringArray", "DEL NullLiteral", "DEL TextElement:  if an IO error occurs", "DEL SimpleName: String", "DEL SimpleName: ExtendedProperties", "DEL SimpleName: String", "DEL SimpleName: File", "DEL SimpleName: Float", "DEL TextElement:   the property key to remove along with corresponding value", "DEL SimpleName: obj", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: ClassCastException", "DEL VariableDeclarationFragment", "DEL SimpleName: equals", "DEL VariableDeclarationStatement", "DEL InstanceofExpression", "DEL Modifier: public", "DEL SimpleName: String", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: String", "DEL TextElement:  The associated float.", "DEL SimpleType: String", "DEL TextElement: resources have been initialized or not.", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL ClassInstanceCreation", "DEL SimpleName: tokens", "DEL Block", "DEL TextElement: object that is not a Short.", "DEL SimpleType: String", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: b", "DEL SimpleType: Object", "DEL SimpleName: String", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL PrimitiveType: boolean", "DEL TextElement: by the key has not a valid number format.", "DEL SimpleName: String", "DEL TextElement:  is thrown if the key maps to an", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleType: ExtendedProperties", "DEL SimpleType: String", "DEL MethodInvocation", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: Float", "DEL MethodDeclaration", "DEL TextElement:   the decoded object to store", "DEL NullLiteral", "DEL Modifier: protected", "DEL SimpleName: START_TOKEN", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL TextElement:  is thrown if the key maps to an", "DEL ClassInstanceCreation", "DEL SimpleName: Override", "DEL SimpleType: String", "DEL SimpleName: defaultValue", "DEL SimpleName: add", "DEL Block", "DEL SimpleName: values", "DEL SimpleName: key", "DEL StringLiteral: \"}\"", "DEL SimpleName: START_TOKEN", "DEL ArrayType: String[]", "DEL VariableDeclarationFragment", "DEL TextElement: ExtendedProperties.", "DEL CastExpression", "DEL ExpressionStatement", "DEL PrimitiveType: short", "DEL TextElement: with the given name as an integer.", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL WhileStatement", "DEL SimpleName: buffer", "DEL SimpleName: value", "DEL SimpleName: value", "DEL SimpleName: get", "DEL SimpleName: key", "DEL TagElement: @throws", "DEL TagElement: @return", "DEL VariableDeclarationStatement", "DEL SimpleName: base", "DEL SuperMethodInvocation", "DEL NullLiteral", "DEL SimpleName: value", "DEL SimpleName: load", "DEL SimpleType: Double", "DEL Modifier: final", "DEL Modifier: final", "DEL Modifier: final", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: fileSeparator", "DEL MethodDeclaration", "DEL Javadoc", "DEL Modifier: final", "DEL TextElement:   the InputStream to load from", "DEL InfixExpression: +", "DEL SimpleType: List", "DEL SimpleName: Short", "DEL TextElement:  The configuration key.", "DEL SimpleType: Short", "DEL SimpleName: ExtendedProperties", "DEL SimpleType: ClassCastException", "DEL TextElement: object that is not a Byte.", "DEL SimpleName: unescape", "DEL SimpleName: key", "DEL StringLiteral: \"=\"", "DEL SimpleName: prec", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL TextElement:  old value of the property", "DEL SimpleName: add", "DEL Modifier: final", "DEL SimpleType: String", "DEL BreakStatement", "DEL NullLiteral", "DEL Modifier: final", "DEL MethodDeclaration", "DEL InstanceofExpression", "DEL Modifier: final", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleName: add", "DEL SimpleType: Object", "DEL SimpleName: String", "DEL SimpleName: tokens", "DEL SimpleType: StringBuilder", "DEL SimpleName: key", "DEL TextElement:  a new independent ExtendedProperties", "DEL ParameterizedType: Iterator<String>", "DEL TagElement: @throws", "DEL SimpleName: key", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL InfixExpression: +", "DEL SimpleName: String", "DEL SimpleName: def", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL IfStatement", "DEL Modifier: final", "DEL NullLiteral", "DEL SimpleName: ex", "DEL TextElement: by the key has not a valid number format.", "DEL SimpleName: currentElement", "DEL SimpleType: Vector", "DEL Block", "DEL Modifier: final", "DEL SimpleType: Byte", "DEL Modifier: final", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL TextElement: of this one. Take into account duplicate keys", "DEL SimpleName: endsWith", "DEL MethodInvocation", "DEL TextElement:  The configuration key.", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: String", "DEL SimpleName: getKeys", "DEL SimpleName: next", "DEL StringLiteral: \"' doesn't map to an existing object\"", "DEL Modifier: final", "DEL StringLiteral: \"->\"", "DEL SimpleName: Short", "DEL SimpleName: value", "DEL SimpleName: defaultValue", "DEL TagElement: @throws", "DEL SuperConstructorInvocation", "DEL PrimitiveType: float", "DEL SimpleName: value", "DEL StringLiteral: \"unchecked\"", "DEL SimpleType: String", "DEL TextElement:  The configuration key.", "DEL SuperMethodInvocation", "DEL SimpleType: String", "DEL SimpleName: key", "DEL SimpleName: value", "DEL CharacterLiteral: '\\''", "DEL ReturnStatement", "DEL ParameterizedType: Vector<Object>", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL SimpleType: String", "DEL SimpleName: getProperty", "DEL Assignment: =", "DEL TagElement: @param", "DEL Block", "DEL ExpressionStatement", "DEL PrimitiveType: boolean", "DEL SimpleName: getString", "DEL SimpleType: Byte", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: priorVariables", "DEL SimpleName: key", "DEL NullLiteral", "DEL SimpleName: key", "DEL SimpleName: map", "DEL WhileStatement", "DEL MethodInvocation", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: value", "DEL SimpleName: List", "DEL ParameterizedType: Hashtable<String,Object>", "DEL Javadoc", "DEL SimpleName: Double", "DEL Modifier: final", "DEL SimpleName: map", "DEL SimpleName: intValue", "DEL Block", "DEL WildcardType: ? extends String", "DEL Modifier: public", "DEL SimpleType: StringBuilder", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL TextElement:  The configuration key.", "DEL Javadoc", "DEL SimpleName: NumberFormatException", "DEL Modifier: final", "DEL SimpleName: hasNext", "DEL SimpleName: output", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: strKey", "DEL SimpleName: String", "DEL SimpleName: get", "DEL TextElement: backslash sign a the end of the line.  This is used to", "DEL SimpleType: LineNumberReader", "DEL ReturnStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: keys", "DEL MethodInvocation", "DEL Block", "DEL ReturnStatement", "DEL CastExpression", "DEL MethodInvocation", "DEL TextElement:  is thrown if the value mapped", "DEL TextElement: object that is not a Integer.", "DEL TextElement:  is thrown if the value mapped", "DEL TagElement: @throws", "DEL MethodInvocation", "DEL SimpleName: key", "DEL NullLiteral", "DEL Block", "DEL PrimitiveType: double", "DEL SimpleName: line", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL SimpleName: hasMoreTokens", "DEL SimpleName: ExtendedProperties", "DEL MethodInvocation", "DEL TagElement", "DEL TagElement: @throws", "DEL MethodInvocation", "DEL TextElement: object that is not a Boolean.", "DEL SimpleType: ExtendedProperties", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL SimpleName: Map", "DEL Modifier: final", "DEL SimpleType: Double", "DEL Modifier: final", "DEL SimpleName: next", "DEL SimpleType: String", "DEL TagElement: @param", "DEL SimpleName: key", "DEL SimpleName: startsWith", "DEL MethodInvocation", "DEL TextElement: Has this configuration been initialized.", "DEL Block", "DEL TextElement: format, default value otherwise.", "DEL SimpleType: String", "DEL SimpleName: s", "DEL Block", "DEL VariableDeclarationExpression", "DEL SimpleName: put", "DEL SimpleName: getInteger", "DEL TagElement: @throws", "DEL InstanceofExpression", "DEL TextElement:  The associated int if key is found and has valid", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: defaultValue", "DEL TextElement: map to an existing object.", "DEL TextElement: object that is not a Integer.", "DEL SimpleName: String", "DEL SimpleType: Boolean", "DEL Assignment: =", "DEL SimpleName: Iterator", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL TagElement: @return", "DEL ClassInstanceCreation", "DEL ParameterizedType: Iterator<String>", "DEL TagElement: @param", "DEL TagElement", "DEL Modifier: final", "DEL SimpleName: newKey", "DEL SimpleType: Object", "DEL ParameterizedType: ArrayList<String>", "DEL StringLiteral: \"unchecked\"", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL TextElement: <code>[\"file\", \"classpath\"]</code>", "DEL SimpleName: key", "DEL Javadoc", "DEL ExpressionStatement", "DEL Block", "DEL TextElement: <li>", "DEL Block", "DEL Modifier: private", "DEL TagElement: @throws", "DEL Modifier: public", "DEL SimpleName: line", "DEL Javadoc", "DEL SimpleName: get", "DEL SimpleName: NumberFormatException", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: String", "DEL SimpleName: valueOf", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL Modifier: protected", "DEL SimpleName: floatValue", "DEL MethodDeclaration", "DEL InfixExpression: +", "DEL SimpleName: size", "DEL TextElement:  The associated double if key is found and has valid", "DEL SimpleName: inc", "DEL SimpleType: String", "DEL SimpleName: value", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL TagElement: @throws", "DEL Modifier: final", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL TextElement:  is thrown if the key doesn't", "DEL StringLiteral: \"' doesn't map to an existing object\"", "DEL TextElement: <p>Here is an example of a valid extended properties file:", "DEL SimpleName: props", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: key", "DEL Block", "DEL Block", "DEL Block", "DEL TagElement: @param", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL TagElement: @throws", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: defaults", "DEL IfStatement", "DEL TextElement:  The configuration key.", "DEL InfixExpression: !=", "DEL InfixExpression: !=", "DEL NullLiteral", "DEL SimpleName: defaultFile", "DEL SimpleName: getProperties", "DEL PrimitiveType: int", "DEL NullLiteral", "DEL ParameterizedType: List<String>", "DEL SimpleName: add", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SimpleName: key", "DEL IfStatement", "DEL ParameterizedType: ArrayList<String>", "DEL SimpleName: getLong", "DEL IfStatement", "DEL InfixExpression: &&", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL TextElement: Get a int associated with the given configuration key.", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL TextElement: Test whether the string represent by value maps to a boolean", "DEL SuperMethodInvocation", "DEL PrimitiveType: float", "DEL Modifier: final", "DEL Block", "DEL ThrowStatement", "DEL SimpleName: load", "DEL ThrowStatement", "DEL SimpleType: Object", "DEL SimpleName: key", "DEL MethodInvocation", "DEL TextElement: conversions, changes notifications and file layout preservation.</b>", "DEL Modifier: private", "DEL SimpleName: e", "DEL SimpleName: size", "DEL ParameterizedType: Map<String,Object>", "DEL IfStatement", "DEL InfixExpression: +", "DEL PrimitiveType: long", "DEL Assignment: =", "DEL TagElement: @param", "DEL SimpleType: List", "DEL SimpleName: mapso", "DEL Block", "DEL TagElement", "DEL SimpleName: value", "DEL SimpleName: key", "DEL PrimitiveType: boolean", "DEL Block", "DEL SimpleType: String", "DEL TextElement: Gets the property value for including other properties files.", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: mapso", "DEL SimpleName: get", "DEL SimpleName: Iterator", "DEL TextElement: Recursive handler for multiple levels of interpolation.", "DEL SimpleName: key", "DEL SimpleName: value", "DEL SimpleName: currentOutput", "DEL Modifier: final", "DEL SimpleName: append", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: nextElement", "DEL SimpleName: key", "DEL SimpleName: interpolate", "DEL SimpleName: priorVariableSb", "DEL SimpleType: PropertiesReader", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: fileSeparator", "DEL TextElement: the comma.", "DEL Block", "DEL SimpleName: FileInputStream", "DEL NullLiteral", "DEL TextElement: Convert a standard properties class into a configuration class.", "DEL TagElement", "DEL SimpleName: list", "DEL SimpleName: Override", "DEL SimpleName: defaultValue", "DEL MethodInvocation", "DEL SimpleName: String", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleType: Object", "DEL TextElement: order of the added properties is maintained. ", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL CatchClause", "DEL SimpleName: l", "DEL SimpleType: StringBuilder", "DEL SimpleName: equalSign", "DEL Block", "DEL StringLiteral: \",\"", "DEL SimpleName: value", "DEL VariableDeclarationStatement", "DEL SimpleName: StringBuilder", "DEL SimpleName: value", "DEL SimpleName: i", "DEL SimpleType: String", "DEL SimpleType: ArrayList", "DEL Assignment: =", "DEL Modifier: final", "DEL SimpleName: String", "DEL SimpleName: defaults", "DEL SimpleName: result", "DEL SimpleName: token", "DEL SimpleType: String", "DEL IfStatement", "DEL Block", "DEL SimpleName: String", "DEL Block", "DEL SimpleType: Object", "DEL ExpressionStatement", "DEL SimpleName: key", "DEL TagElement: @throws", "DEL NullLiteral", "DEL SimpleName: setInclude", "DEL MethodInvocation", "DEL SimpleName: value", "DEL TextElement: <p>", "DEL TextElement: Get a long associated with the given configuration key.", "DEL ExpressionStatement", "DEL CastExpression", "DEL SimpleName: String", "DEL IfStatement", "DEL Block", "DEL TagElement", "DEL TagElement: @param", "DEL IfStatement", "DEL ParameterizedType: ArrayList<String>", "DEL SimpleName: byteValue", "DEL ParameterizedType: List<String>", "DEL Javadoc", "DEL SimpleType: String", "DEL SimpleName: s", "DEL SimpleName: endsWithSlash", "DEL SimpleName: defaultValue", "DEL TagElement: @return", "DEL SimpleName: getLong", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL Javadoc", "DEL TagElement: @return", "DEL TextElement: object that is not a Byte.", "DEL SimpleName: getBoolean", "DEL SimpleName: Object", "DEL Javadoc", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL SimpleName: prec", "DEL SimpleName: defaultValue", "DEL SimpleName: String", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL TagElement: @return", "DEL Block", "DEL StringLiteral: \" => \"", "DEL SimpleName: PropertiesReader", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: props", "DEL MethodInvocation", "DEL TagElement: @return", "DEL SimpleName: value", "DEL SimpleName: File", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 0", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL InfixExpression: &&", "DEL TextElement: Get a byte associated with the given configuration key.", "DEL SimpleName: d", "DEL IfStatement", "DEL SuperMethodInvocation", "DEL SimpleName: key", "DEL SimpleName: s", "DEL Assignment: =", "DEL SimpleName: contains", "DEL SimpleName: display", "DEL TextElement:   the filename to load", "DEL TextElement: object.", "DEL CastExpression", "DEL SimpleName: propertyNames", "DEL SimpleName: base", "DEL VariableDeclarationFragment", "DEL SimpleName: value", "DEL SimpleType: String", "DEL SimpleName: defaultValue", "DEL SimpleName: validSubset", "DEL Block", "DEL SimpleName: getList", "DEL MethodInvocation", "DEL TextElement: <code>false</code> boolean values.  Case of value to test for", "DEL CastExpression", "DEL SimpleType: Object", "DEL SimpleName: IOException", "DEL SimpleName: priorVariables", "DEL SimpleName: reader", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Vector<String>", "DEL Block", "DEL TextElement: </ul>", "DEL SimpleName: get", "DEL TextElement: <p>", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL Assignment: =", "DEL SimpleName: key", "DEL Modifier: final", "DEL SimpleName: input", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: indexOf", "DEL SimpleName: add", "DEL TextElement: Get a Vector of strings associated with the given configuration key.", "DEL Block", "DEL Javadoc", "DEL TextElement: Removes a backslash from every pair of backslashes. ", "DEL SimpleName: defaultValue", "DEL SimpleName: value", "DEL ThrowStatement", "DEL SimpleName: key", "DEL TextElement: in the configuration file. This is useful when", "DEL SimpleName: close", "DEL SimpleType: UnsupportedEncodingException", "DEL TextElement:  The resource name", "DEL SimpleType: Vector", "DEL SimpleName: ClassCastException", "DEL PrimitiveType: boolean", "DEL Modifier: public", "DEL SimpleName: getString", "DEL MethodInvocation", "DEL TextElement:  if one of the tokens is", "DEL SimpleName: i", "DEL TagElement", "DEL SimpleName: c1", "DEL SimpleName: Short", "DEL SimpleName: value", "DEL SimpleName: key", "DEL Block", "DEL SimpleName: matchingKeys", "DEL Javadoc", "DEL SimpleType: String", "DEL SimpleName: doubleValue", "DEL TextElement: File separator.", "DEL SimpleName: name", "DEL SimpleName: file", "DEL MethodInvocation", "DEL SimpleName: SuppressWarnings", "DEL Block", "DEL MethodInvocation", "DEL ReturnStatement", "DEL PrefixExpression: -", "DEL ArrayCreation", "DEL SimpleName: IOException", "DEL SimpleType: Long", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"' doesn't map to an existing object\"", "DEL SimpleName: includeProperty", "DEL Dimension", "DEL SimpleName: def", "DEL SimpleType: Properties", "DEL SimpleName: defaultFile", "DEL SimpleName: includePropertyName", "DEL Modifier: final", "DEL SimpleName: key", "DEL SimpleType: ClassCastException", "DEL SimpleType: Object", "DEL CatchClause", "DEL InfixExpression: !=", "DEL SimpleName: s", "DEL TextElement:  The configuration key.", "DEL TagElement: @return", "DEL NumberLiteral: 1", "DEL InfixExpression: !=", "DEL SimpleName: append", "DEL TextElement: Thanks to Leon Messerschmidt for this one.", "DEL Modifier: final", "DEL SimpleName: variable", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL SimpleName: List", "DEL SimpleName: keysAsListed", "DEL Modifier: public", "DEL Javadoc", "DEL SimpleName: ExtendedProperties", "DEL SimpleName: IOException", "DEL VariableDeclarationStatement", "DEL SimpleName: key", "DEL IfStatement", "DEL SimpleName: equals", "DEL Block", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: value", "DEL SimpleName: ClassCastException", "DEL SimpleName: Object", "DEL SimpleName: input", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL InfixExpression: ||", "DEL TextElement: # This is a property with many tokens", "DEL SimpleType: Object", "DEL SimpleName: end", "DEL ExpressionStatement", "DEL TextElement:  The configuration key.", "DEL VariableDeclarationFragment", "DEL SimpleName: theKeys", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleType: Double", "DEL Modifier: final", "DEL SimpleName: String", "DEL Block", "DEL SimpleName: value", "DEL Modifier: public", "DEL ThrowStatement", "DEL MethodDeclaration", "DEL Assignment: =", "DEL TextElement:  The default value.", "DEL SimpleName: toString", "DEL Block", "DEL SimpleName: ExtendedProperties", "DEL Block", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleName: token", "DEL SimpleName: b", "DEL SimpleName: FileInputStream", "DEL SingleVariableDeclaration", "DEL SimpleName: List", "DEL SimpleName: PropertiesTokenizer", "DEL SimpleName: add", "DEL SimpleName: value", "DEL SimpleName: deleteCharAt", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL NumberLiteral: 1", "DEL SimpleType: String", "DEL ClassInstanceCreation", "DEL TextElement:  The associated int.", "DEL TagElement: @throws", "DEL SimpleName: get", "DEL SimpleType: NoSuchElementException", "DEL SimpleName: keys", "DEL SimpleName: prec", "DEL SimpleType: String", "DEL CharacterLiteral: '='", "DEL SimpleName: name", "DEL SimpleType: Iterator", "DEL SimpleName: matchingKeys", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleType: Map", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL SimpleName: defaults", "DEL SimpleType: Boolean", "DEL SimpleName: tokens", "DEL SimpleName: String", "DEL SimpleName: append", "DEL SimpleName: getProperty", "DEL TextElement: This class is used to read properties lines.  These lines do", "DEL Javadoc", "DEL ExpressionStatement", "DEL ConditionalExpression", "DEL TagElement: @param", "DEL SimpleType: String", "DEL TextElement:  The default value.", "DEL VariableDeclarationStatement", "DEL InfixExpression: ==", "DEL TextElement: Backslashes are escaped by using two consecutive backslashes i.e. \\\\", "DEL MethodInvocation", "DEL IfStatement", "DEL Block", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: getProperties", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL SimpleName: ClassCastException", "DEL InfixExpression: ==", "DEL SimpleName: Double", "DEL SuperConstructorInvocation", "DEL TextElement: Gets a property from the configuration.", "DEL ReturnStatement", "DEL TextElement: Get a boolean associated with the given configuration key.", "DEL Javadoc", "DEL SimpleName: NoSuchElementException", "DEL SimpleType: String", "DEL IfStatement", "DEL SimpleType: String", "DEL ForStatement", "DEL TextElement: tokens_on_multiple_lines = second token", "DEL MethodInvocation", "DEL SimpleName: key", "DEL WhileStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: Map", "DEL SimpleName: includePropertyName", "DEL TextElement:  The configuration key.", "DEL SimpleType: String", "DEL SimpleName: SuppressWarnings", "DEL NumberLiteral: 2", "DEL Block", "DEL SimpleName: interpolateHelper", "DEL SimpleName: value", "DEL SimpleName: key", "DEL TextElement: Duplicate name values will be replaced, so be careful.", "DEL SimpleName: InputStreamReader", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: ClassCastException", "DEL MethodInvocation", "DEL SimpleName: String", "DEL TagElement", "DEL SimpleName: value", "DEL Javadoc", "DEL SimpleType: String", "DEL SimpleName: getInteger", "DEL SimpleName: String", "DEL SimpleType: Integer", "DEL Modifier: final", "DEL SimpleName: key", "DEL IfStatement", "DEL SimpleType: Byte", "DEL SimpleName: List", "DEL SingleVariableDeclaration", "DEL SimpleName: base", "DEL SimpleName: getList", "DEL SimpleType: String", "DEL SimpleName: value", "DEL MethodInvocation", "DEL SimpleName: getFloat", "DEL VariableDeclarationFragment", "DEL SimpleName: value", "DEL ReturnStatement", "DEL SimpleName: key", "DEL Block", "DEL SimpleName: ClassCastException", "DEL NumberLiteral: 0", "DEL SimpleName: index", "DEL Block", "DEL SimpleType: ClassCastException", "DEL TagElement: @throws", "DEL CharacterLiteral: '#'", "DEL TextElement: much time to improve it), I wrote it this way.  If you don't like", "DEL SimpleName: add", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: SuppressWarnings", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL TextElement: <p>", "DEL Modifier: final", "DEL TagElement: @return", "DEL SimpleName: hasNext", "DEL SimpleType: String", "DEL SimpleName: clearProperty", "DEL TextElement: <p>", "DEL Javadoc", "DEL ExpressionStatement", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: key", "DEL TextElement:  The associated long.", "DEL SimpleType: Iterator", "DEL SimpleName: String", "DEL TextElement: format, default value otherwise.", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: Hashtable", "DEL SimpleName: key", "DEL SimpleName: currentOutput", "DEL SimpleName: Boolean", "DEL TagElement: @param", "DEL VariableDeclarationStatement", "DEL TagElement: @param", "DEL SimpleName: key", "DEL SimpleName: key", "DEL MethodInvocation", "DEL Block", "DEL IfStatement", "DEL TextElement:  The associated double.", "DEL Block", "DEL SimpleType: FileInputStream", "DEL Block", "DEL SimpleName: values", "DEL TagElement: @return", "DEL SimpleName: b", "DEL SimpleName: line", "DEL Block", "DEL SimpleName: Boolean", "DEL Assignment: =", "DEL MethodInvocation", "DEL TagElement: @since", "DEL CharacterLiteral: '\\''", "DEL SimpleName: key", "DEL SimpleName: base", "DEL Block", "DEL TagElement: @return", "DEL SimpleName: key", "DEL SimpleType: String", "DEL SimpleName: key", "DEL Dimension", "DEL MethodInvocation", "DEL SimpleName: reader", "DEL TextElement: The file connected to this repository (holding comments and such).", "DEL Javadoc", "DEL SimpleName: isInitialized", "DEL SimpleName: length", "DEL SimpleName: key", "DEL SimpleName: getString", "DEL SimpleName: String", "DEL CharacterLiteral: '\\''", "DEL SimpleName: current", "DEL SimpleName: valueOf", "DEL SingleMemberAnnotation", "DEL Block", "DEL SimpleName: string", "DEL Block", "DEL NumberLiteral: 2", "DEL TextElement: not terminate with new-line chars but rather when there is no", "DEL SimpleType: String", "DEL MethodInvocation", "DEL Block", "DEL ParameterizedType: List<String>", "DEL SimpleName: b", "DEL Block", "DEL SimpleName: lastIndexOf", "DEL SimpleType: String", "DEL TagElement: @param", "DEL SimpleName: l", "DEL SimpleName: containsKey", "DEL TagElement: @throws", "DEL SimpleName: String", "DEL ReturnStatement", "DEL SimpleName: length", "DEL SimpleName: value", "DEL TextElement: format, default value otherwise.", "DEL Block", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL Modifier: final", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL ParameterizedType: List<String>", "DEL Modifier: final", "DEL StringLiteral: \"false\"", "DEL MethodInvocation", "DEL SimpleName: defaultValue", "DEL SimpleName: defaultValue", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: hasNext", "DEL PrimitiveType: void", "DEL TextElement: Get a long associated with the given configuration key.", "DEL SimpleName: String", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: StringBuilder", "DEL SimpleName: b", "DEL TextElement:  is thrown if the key maps to an", "DEL MethodInvocation", "DEL SimpleName: value", "DEL Block", "DEL TextElement:  is thrown if the key doesn't", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: defaultValue", "DEL InstanceofExpression", "DEL TextElement: map to an existing object.", "DEL VariableDeclarationStatement", "DEL SimpleName: getInteger", "DEL InfixExpression: !=", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL SimpleName: defaults", "DEL SimpleName: String", "DEL TextElement:  old value of the property", "DEL MethodInvocation", "DEL SimpleName: pvalue", "DEL SimpleName: list", "DEL TextElement: object that is not a String.", "DEL TextElement: Get a List of strings associated with the given configuration key.", "DEL Javadoc", "DEL SimpleName: equalSign", "DEL TextElement: object that is not a Float.", "DEL ReturnStatement", "DEL SimpleName: key", "DEL NumberLiteral: 1", "DEL SimpleName: i", "DEL SimpleName: length", "DEL SimpleName: base", "DEL ReturnStatement", "DEL InfixExpression: -", "DEL Modifier: final", "DEL TagElement: @throws", "DEL SimpleType: ExtendedProperties", "DEL IfStatement", "DEL SimpleName: file", "DEL StringLiteral: \"' doesn't map to an existing object\"", "DEL SimpleName: append", "DEL Modifier: final", "DEL ParameterizedType: Vector<String>", "DEL VariableDeclarationStatement", "DEL SimpleName: add", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL ThisExpression", "DEL SimpleName: theWrtr", "DEL TextElement: If the added map is an ExtendedProperties class, then the ", "DEL InfixExpression: >", "DEL TagElement: @throws", "DEL SimpleName: key", "DEL SimpleName: key", "DEL TextElement:  class in", "DEL ForStatement", "DEL Block", "DEL TextElement:  The associated boolean if key is found and has valid", "DEL ExpressionStatement", "DEL SimpleName: defaultValue", "DEL SimpleName: startsWith", "DEL MethodInvocation", "DEL TextElement: Create an ExtendedProperties object that is a subset", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL Modifier: final", "DEL TextElement: Display the configuration for debugging purposes to System.out.", "DEL Block", "DEL TagElement: @throws", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL SimpleName: getShort", "DEL SimpleName: getDouble", "DEL MethodInvocation", "DEL TextElement:  The resource name.", "DEL Block", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: setProperty", "DEL Block", "DEL SimpleType: String", "DEL Modifier: final", "DEL ThrowStatement", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL TextElement: object that is not a Boolean.", "DEL SimpleName: getAbsolutePath", "DEL SimpleName: Iterator", "DEL IfStatement", "DEL SimpleName: c", "DEL SimpleType: ArrayList", "DEL TextElement: Get a short associated with the given configuration key.", "DEL SingleVariableDeclaration", "DEL TextElement:  The default value.", "DEL SingleMemberAnnotation", "DEL SimpleName: it", "DEL Block", "DEL SimpleName: key", "DEL SimpleName: name", "DEL MethodInvocation", "DEL SimpleName: getByte", "DEL SimpleName: ret", "DEL SimpleType: List", "DEL SimpleType: String", "DEL Block", "DEL TagElement: @param", "DEL SimpleName: priorVariables", "DEL TextElement: Get a string associated with the given configuration key.", "DEL TextElement: map to an existing object.", "DEL SimpleName: str", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleType: Long", "DEL Block", "DEL Modifier: static", "DEL SimpleName: IOException", "DEL SimpleName: value", "DEL SimpleName: i", "DEL TagElement: @return", "DEL SimpleName: key", "DEL SimpleName: String", "DEL SimpleName: String", "DEL PrimitiveType: int", "DEL SimpleName: input", "DEL SimpleName: ch", "DEL SimpleName: index", "DEL ClassInstanceCreation", "DEL SimpleName: theWrtr", "DEL IfStatement", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: buffer", "DEL SimpleName: getFloat", "DEL SimpleType: Integer", "DEL Modifier: protected", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: ExtendedProperties", "DEL SimpleName: value", "DEL SimpleName: value", "DEL Javadoc", "DEL TextElement: to clearProperty(key), addProperty(key,value).", "DEL InstanceofExpression", "DEL SimpleName: String", "DEL SimpleType: String", "DEL CharacterLiteral: '\\''", "DEL TagElement: @throws", "DEL SimpleType: String", "DEL SimpleName: basePath", "DEL NullLiteral", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleType: List", "DEL SimpleName: i", "DEL SingleVariableDeclaration", "DEL TextElement:  The associated long if key is found and has valid", "DEL MethodDeclaration", "DEL Block", "DEL Modifier: static", "DEL SimpleName: token", "DEL SimpleType: String", "DEL SimpleName: END_TOKEN", "DEL SimpleName: ClassCastException", "DEL SimpleName: String", "DEL SimpleName: key", "DEL TextElement: Interpolate key names to handle ${key} stuff", "DEL SimpleName: base", "DEL SimpleType: ClassCastException", "DEL ClassInstanceCreation", "DEL SimpleType: Byte", "DEL IfStatement", "DEL WhileStatement", "DEL SimpleName: get", "DEL SimpleName: append", "DEL SimpleName: String", "DEL Block", "DEL SimpleName: put", "DEL ParameterizedType: List<String>", "DEL SimpleName: values", "DEL TextElement:   the value to test for boolean state", "DEL SimpleType: String", "DEL Modifier: final", "DEL Block", "DEL SimpleName: c", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL TypeDeclaration: class", "DEL IfStatement", "DEL SimpleName: s", "DEL MethodInvocation", "DEL SimpleName: file", "DEL ParameterizedType: List<String>", "DEL TagElement", "DEL SimpleName: String", "DEL TextElement: Commas in each token are escaped placing a backslash right before", "DEL VariableDeclarationFragment", "DEL SimpleName: defaultValue", "DEL TagElement: @param", "DEL EnhancedForStatement", "DEL SimpleName: PropertiesReader", "DEL InfixExpression: +", "DEL ParameterizedType: List<String>", "DEL MethodInvocation", "DEL TextElement: If a <i>key</i> is used more than once, the values are appended", "DEL SimpleType: String", "DEL TagElement", "DEL SimpleName: key", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleType: String", "DEL ReturnStatement", "DEL Block", "DEL ParameterizedType: Iterator<String>", "DEL StringLiteral: \".\"", "DEL SimpleName: values", "DEL SimpleName: IOException", "DEL Block", "DEL ArrayType: String[]", "DEL SimpleName: equals", "DEL SimpleName: getStringArray", "DEL Block", "DEL MethodInvocation", "DEL ParameterizedType: ArrayList<String>", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL SimpleName: values", "DEL InstanceofExpression", "DEL Modifier: synchronized", "DEL ReturnStatement", "DEL TextElement: map to an existing object.", "DEL SingleVariableDeclaration", "DEL CharacterLiteral: '\\\\'", "DEL SimpleName: getShort", "DEL InfixExpression: !=", "DEL SingleVariableDeclaration", "DEL SimpleType: NoSuchElementException", "DEL Modifier: public", "DEL Modifier: final", "DEL MethodDeclaration", "DEL StringLiteral: \"' doesn't map to a List object\"", "DEL SimpleName: addProperty", "DEL SimpleName: put", "DEL SimpleType: String", "DEL SimpleName: key", "DEL ParameterizedType: List<String>", "DEL Modifier: final", "DEL SimpleName: substring", "DEL MethodDeclaration", "DEL SimpleName: keysAsListed", "DEL SimpleName: String", "DEL Modifier: final", "DEL SimpleName: getString", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL MethodDeclaration", "DEL IfStatement", "DEL SimpleName: String", "DEL Javadoc", "DEL TagElement: @param", "DEL NullLiteral", "DEL SimpleName: IOException", "DEL MethodInvocation", "DEL SimpleName: enc", "DEL TextElement: no magic morphing.  It ensures the keylist is maintained", "DEL TextElement: </li>", "DEL SimpleName: header", "DEL TextElement:  is thrown if the key maps to an", "DEL Block", "DEL SimpleName: basePath", "DEL TextElement: Default configurations repository.", "DEL TextElement:  property to retrieve", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL InfixExpression: +", "DEL ThrowStatement", "DEL SimpleName: String", "DEL InfixExpression: +", "DEL SimpleName: fileSeparator", "DEL TextElement:   the value to add", "DEL TextElement: such you may alter it freely.", "DEL Modifier: public", "DEL Modifier: final", "DEL Block", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL SimpleName: Object", "DEL SimpleName: key", "DEL TextElement:  is thrown if the value mapped", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL SimpleName: key", "DEL Modifier: final", "DEL SimpleName: equalSign", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: value", "DEL SimpleName: substring", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL TagElement: @return", "DEL WhileStatement", "DEL SimpleName: add", "DEL VariableDeclarationFragment", "DEL SimpleName: getInteger", "DEL Modifier: final", "DEL TagElement: @return", "DEL VariableDeclarationStatement", "DEL SimpleName: getVector", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL SimpleName: defaultValue", "DEL Assignment: =", "DEL Block", "DEL NullLiteral", "DEL InfixExpression: ==", "DEL SimpleType: String", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL PrimitiveType: char", "DEL SimpleName: List", "DEL SimpleName: i", "DEL IfStatement", "DEL Javadoc", "DEL SimpleName: inc", "DEL SimpleName: floatValue", "DEL SimpleName: START_TOKEN", "DEL SimpleName: String", "DEL TagElement: @throws", "DEL TextElement: Get a Vector of strings associated with the given configuration key.", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: values", "DEL SimpleType: Properties", "DEL ThrowStatement", "DEL SimpleName: priorVariables", "DEL TextElement: Sets the property value for including other properties files.", "DEL SimpleType: List", "DEL SingleVariableDeclaration", "DEL SimpleType: OutputStream", "DEL TextElement: Get a long associated with the given configuration key.", "DEL IfStatement", "DEL SimpleName: value", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: File", "DEL SimpleName: reader", "DEL SimpleType: Object", "DEL SimpleType: Byte", "DEL SimpleName: getDouble", "DEL SimpleName: getValue", "DEL SimpleName: begin", "DEL TextElement: Each property has the syntax <code>key = value</code>", "DEL SimpleName: tokens", "DEL TextElement:  The default value.", "DEL InfixExpression: <", "DEL TextElement: by the key has not a valid number format.", "DEL Javadoc", "DEL SimpleName: key", "DEL SimpleName: DELIMITER", "DEL SimpleName: getInteger", "DEL Block", "DEL Block", "DEL TagElement", "DEL SimpleName: defaults", "DEL NullLiteral", "DEL SimpleName: end", "DEL IfStatement", "DEL Modifier: final", "DEL StringLiteral: \"${\"", "DEL TagElement: @return", "DEL VariableDeclarationStatement", "DEL SimpleName: value", "DEL SimpleType: StringBuilder", "DEL ReturnStatement", "DEL SimpleName: defaultValue", "DEL SimpleName: Object", "DEL SimpleName: remove", "DEL IfStatement", "DEL SimpleName: indexOf", "DEL Block", "DEL TextElement:  is thrown if the key maps to an", "DEL SimpleName: getKeys", "DEL SimpleName: String", "DEL Modifier: final", "DEL SimpleName: println", "DEL Modifier: public", "DEL Modifier: static", "DEL TextElement:   the key to set", "DEL InstanceofExpression", "DEL ClassInstanceCreation", "DEL SimpleName: toString", "DEL MethodInvocation", "DEL Modifier: final", "DEL InstanceofExpression", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: i", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleType: Properties", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL InfixExpression: ==", "DEL SimpleType: String", "DEL NullLiteral", "DEL SimpleName: ret", "DEL SimpleName: list", "DEL SimpleType: Object", "DEL MarkerAnnotation", "DEL TagElement: @param", "DEL SimpleName: key", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 1", "DEL ReturnStatement", "DEL SimpleName: key", "DEL SimpleName: pkey", "DEL Block", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL StringLiteral: \"an equals sign\"", "DEL ThisExpression", "DEL TextElement:  if an IO error occurs", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleName: file", "DEL SimpleName: List", "DEL MethodDeclaration", "DEL SimpleName: prefix", "DEL TextElement: performance nor low memory usage.  In fact, it's way slower than it", "DEL TextElement: by the key has not a valid number format.", "DEL TagElement: @param", "DEL SimpleType: String", "DEL TextElement:  The configuration key.", "DEL SuperMethodInvocation", "DEL SimpleName: key", "DEL SimpleType: List", "DEL PostfixExpression: ++", "DEL SimpleName: trim", "DEL SimpleName: ArrayList", "DEL VariableDeclarationFragment", "DEL SimpleName: key", "DEL TextElement: If <i>value</i> is a list of strings, each token is separated", "DEL ReturnStatement", "DEL SimpleName: ClassCastException", "DEL TextElement: could be and generates too much memory garbage.  But since", "DEL Block", "DEL ArrayCreation", "DEL SimpleName: values", "DEL TagElement: @return", "DEL Modifier: final", "DEL SimpleName: base", "DEL ForStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL TagElement: @throws", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL Modifier: final", "DEL SimpleName: key", "DEL Modifier: final", "DEL SimpleName: toString", "DEL SimpleName: String", "DEL FieldDeclaration", "DEL SimpleName: String", "DEL TagElement: @throws", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: length", "DEL SimpleName: newKey", "DEL MethodInvocation", "DEL TextElement:  The associated int.", "DEL TextElement: by the key has not a valid number format.", "DEL SimpleName: LineNumberReader", "DEL SimpleName: String", "DEL TextElement:  is thrown if the value mapped", "DEL SimpleName: key", "DEL SimpleName: i", "DEL SimpleName: i", "DEL SimpleName: token", "DEL SimpleName: put", "DEL NullLiteral", "DEL TagElement: @throws", "DEL SimpleName: line", "DEL TextElement:  is thrown if the value mapped", "DEL Block", "DEL NumberLiteral: 1", "DEL TagElement: @param", "DEL TextElement: </pre>", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: String", "DEL SimpleName: getByte", "DEL SimpleName: key", "DEL IfStatement", "DEL StringLiteral: \"true\"", "DEL Block", "DEL TagElement: @param", "DEL SimpleType: String", "DEL TextElement: Read a property.", "DEL SimpleName: println", "DEL NullLiteral", "DEL SimpleName: value", "DEL TagElement: @throws", "DEL ClassInstanceCreation", "DEL TextElement: by the key has not a valid number format.", "DEL ParameterizedType: Vector<String>", "DEL CastExpression", "DEL SimpleName: defaultValue", "DEL SimpleName: s", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL TagElement", "DEL InfixExpression: +", "DEL Block", "DEL SimpleName: header", "DEL Block", "DEL SimpleName: key", "DEL ReturnStatement", "DEL SimpleName: String", "DEL SimpleName: List", "DEL SimpleName: String", "DEL SimpleType: Enumeration", "DEL SimpleName: hasNext", "DEL SimpleName: StringBuilder", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: get", "DEL SimpleName: hasMoreTokens", "DEL SimpleName: file", "DEL SimpleName: i", "DEL SimpleName: save", "DEL SimpleName: keysAsListed", "DEL SimpleName: String", "DEL SimpleName: String", "DEL TextElement:  is thrown if the key maps to an", "DEL TagElement: @param", "DEL SimpleName: isInitialized", "DEL SimpleName: c", "DEL Block", "DEL SimpleName: ExtendedProperties", "DEL MethodDeclaration", "DEL SimpleName: l", "DEL SimpleName: String", "DEL SimpleType: Long", "DEL Modifier: final", "DEL SimpleName: String", "DEL SimpleName: ClassCastException", "DEL SimpleName: d", "DEL SimpleName: variable", "DEL SimpleName: s", "DEL TextElement:  The configuration key.", "DEL SimpleType: ClassCastException", "DEL Block", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleType: Properties", "DEL TagElement: @throws", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL TryStatement", "DEL SuperMethodInvocation", "DEL SimpleName: current", "DEL Modifier: final", "DEL TextElement:  The default value.", "DEL InfixExpression: !=", "DEL SingleVariableDeclaration", "DEL SimpleName: System", "DEL SimpleName: String", "DEL SimpleName: s", "DEL SimpleType: List", "DEL TagElement: @return", "DEL Block", "DEL CharacterLiteral: '\\''", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL BreakStatement", "DEL SimpleName: value", "DEL ReturnStatement", "DEL SimpleName: List", "DEL SimpleName: Integer", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL StringLiteral: \"' doesn't map to a Byte object\"", "DEL SimpleType: Iterator", "DEL SimpleName: value", "DEL InfixExpression: ==", "DEL Modifier: public", "DEL SimpleName: valueOf", "DEL TagElement: @return", "DEL TextElement: The list is a copy of the internal data of this object, and as", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL SimpleName: StringBuilder", "DEL Modifier: final", "DEL IfStatement", "DEL SimpleType: String", "DEL SimpleName: value", "DEL SimpleName: ClassCastException", "DEL Modifier: final", "DEL SimpleName: Integer", "DEL PrimitiveType: byte", "DEL NullLiteral", "DEL SimpleName: isInitialized", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL CastExpression", "DEL SimpleName: enc", "DEL Modifier: final", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: f", "DEL SimpleName: nextToken", "DEL SimpleName: IllegalArgumentException", "DEL TextElement: This class extends normal Java properties by adding the possibility", "DEL SimpleName: String", "DEL SimpleName: Byte", "DEL SimpleName: c", "DEL TagElement", "DEL TextElement: by the key has not a valid number format.", "DEL ReturnStatement", "DEL SimpleType: StringBuilder", "DEL Modifier: public", "DEL Block", "DEL VariableDeclarationStatement", "DEL TagElement: @param", "DEL TagElement: @throws", "DEL SimpleName: PropertiesReader", "DEL SimpleType: String", "DEL SimpleName: value", "DEL TextElement:  The associated double.", "DEL ParameterizedType: Vector<String>", "DEL ExpressionStatement", "DEL SimpleName: newKey", "DEL Modifier: final", "DEL SingleMemberAnnotation", "DEL SimpleName: List", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: includeProperty", "DEL Javadoc", "DEL InfixExpression: <", "DEL SimpleName: hasNext", "DEL TagElement", "DEL SimpleName: List", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL SimpleName: key", "DEL Block", "DEL TextElement:  The configuration key.", "DEL TextElement: object that is not a Long.", "DEL Block", "DEL SimpleName: String", "DEL TagElement: @param", "DEL SimpleName: longValue", "DEL SimpleName: key", "DEL SimpleType: Object", "DEL SimpleName: NoSuchElementException", "DEL InfixExpression: !=", "DEL SimpleName: i", "DEL SimpleName: Properties", "DEL Modifier: final", "DEL IfStatement", "DEL SimpleName: IOException", "DEL SimpleName: Map", "DEL SimpleName: key", "DEL MethodInvocation", "DEL TextElement: The purpose of this method is to get the configuration resource", "DEL TextElement: by the key has not a valid number format.", "DEL SimpleName: append", "DEL MethodInvocation", "DEL CastExpression", "DEL SimpleName: get", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Modifier: final", "DEL SimpleName: it", "DEL IfStatement", "DEL SimpleName: Reader", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: get", "DEL SimpleName: Object", "DEL TagElement: @param", "DEL SimpleName: key", "DEL PrefixExpression: -", "DEL PrimitiveType: short", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: interpolate", "DEL SimpleName: List", "DEL SimpleName: key", "DEL IfStatement", "DEL IfStatement", "DEL WhileStatement", "DEL SimpleType: Integer", "DEL SimpleName: variable", "DEL SimpleType: Double", "DEL SimpleName: put", "DEL MethodInvocation", "DEL SimpleName: in", "DEL SimpleName: getList", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL QualifiedName: System.out", "DEL SimpleName: key", "DEL TextElement: the inadvertent vectorization.", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: prefix", "DEL SimpleName: defaultValue", "DEL SimpleName: NumberFormatException", "DEL SimpleName: NumberFormatException", "DEL MethodDeclaration", "DEL Javadoc", "DEL SimpleName: String", "DEL TextElement:  The configuration key.", "DEL InfixExpression: ==", "DEL NumberLiteral: 1", "DEL VariableDeclarationStatement", "DEL CastExpression", "DEL SimpleName: String", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL TextElement: is already present in the configuration and you", "DEL Assignment: =", "DEL InstanceofExpression", "DEL SimpleName: key", "DEL SimpleName: NoSuchElementException", "DEL TextElement:  specifying the property", "DEL SimpleName: getInclude", "DEL SimpleName: String", "DEL TypeDeclaration: class", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: defaultValue", "DEL InfixExpression: !=", "DEL TextElement: </li>", "DEL ParameterizedType: List<Object>", "DEL MethodInvocation", "DEL SimpleName: defaultValue", "DEL Modifier: final", "DEL SimpleType: IOException", "DEL InfixExpression: ==", "DEL SimpleName: current", "DEL PrimitiveType: boolean", "DEL SimpleType: StringTokenizer", "DEL TextElement: by the key has not a valid number format.", "DEL TextElement: loops, and creating a meaningful exception message should a loop", "DEL TextElement: set values. Set values is implicitly a call", "DEL TagElement: @return", "DEL SimpleName: load", "DEL SimpleName: endsWithSlash", "DEL PrimitiveType: long", "DEL SimpleName: i", "DEL Block", "DEL StringLiteral: \"' doesn't map to a Float object\"", "DEL MethodInvocation", "DEL TextElement:  The default value.", "DEL SimpleName: String", "DEL TextElement:  specifying the property", "DEL SimpleName: SuppressWarnings", "DEL StringLiteral: \"false\"", "DEL SimpleName: List", "DEL SimpleType: IOException", "DEL SimpleName: list", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: addProperty", "DEL SimpleName: file", "DEL SimpleName: append", "DEL TextElement: <li>", "DEL SimpleName: Long", "DEL MethodInvocation", "DEL TextElement:  The associated properties if key is found.", "DEL TagElement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: PrintWriter", "DEL TextElement: As with java.util.Properties(Properties), any non-String ", "DEL TextElement:  is thrown if the key maps to an", "DEL PrimitiveType: int", "DEL IfStatement", "DEL TagElement", "DEL SimpleName: get", "DEL TagElement: @param", "DEL Modifier: public", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Modifier: final", "DEL SimpleType: UnsupportedEncodingException", "DEL SimpleName: trim", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TagElement", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: base", "DEL MethodInvocation", "DEL Block", "DEL TextElement: object that is not a Double.", "DEL MethodInvocation", "DEL SimpleType: Enumeration", "DEL StringLiteral: \"unchecked\"", "DEL TextElement: </li>", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: ExtendedProperties", "DEL CastExpression", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL Modifier: static", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL TextElement:  is thrown if the key maps to an", "DEL ClassInstanceCreation", "DEL SimpleName: props", "DEL SimpleName: i", "DEL SimpleName: defaults", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleName: defaultValue", "DEL TextElement: or ", "DEL TextElement:  3.2", "DEL SimpleName: Float", "DEL FieldDeclaration", "DEL SimpleName: ArrayList", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL SimpleType: String", "DEL SimpleName: i", "DEL TextElement: by the key has not a valid number format.", "DEL ParameterizedType: Vector<String>", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleType: ClassCastException", "DEL SimpleName: defaultValue", "DEL ReturnStatement", "DEL InfixExpression: +", "DEL SimpleName: line", "DEL SimpleName: String", "DEL Block", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SimpleName: append", "DEL Modifier: private", "DEL SimpleName: ClassCastException", "DEL SuperMethodInvocation", "DEL SimpleName: String", "DEL SimpleName: value", "DEL Modifier: final", "DEL SimpleType: String", "DEL NullLiteral", "DEL Javadoc", "DEL SimpleName: value", "DEL TagElement: @throws", "DEL SimpleName: key", "DEL ClassInstanceCreation", "DEL TagElement", "DEL Modifier: private", "DEL ParameterizedType: List<String>", "DEL TextElement:  serves two purposes: to allow checking for", "DEL SimpleType: Integer", "DEL InfixExpression: +", "DEL SimpleName: key", "DEL ParameterizedType: List<Object>", "DEL CastExpression", "DEL TagElement: @param", "DEL Block", "DEL SimpleName: theKeys", "DEL TextElement:  The configuration key.", "DEL ExpressionStatement", "DEL TagElement: @throws", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL SimpleName: s", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: println", "DEL TagElement", "DEL SimpleName: buf", "DEL IfStatement", "DEL SimpleName: c", "DEL SimpleName: i", "DEL ReturnStatement", "DEL TagElement: @param", "DEL SimpleName: ch", "DEL TextElement: <p><b>NOTE</b>: this class has <b>not</b> been written for", "DEL SimpleName: List", "DEL SimpleType: Boolean", "DEL SimpleName: theWrtr", "DEL SimpleName: length", "DEL CharacterLiteral: '\\''", "DEL IfStatement", "DEL TagElement: @return", "DEL InfixExpression: >", "DEL VariableDeclarationFragment", "DEL InfixExpression: !=", "DEL SimpleName: value", "DEL SimpleName: NumberFormatException", "DEL MethodInvocation", "DEL SimpleName: value", "DEL SimpleName: String", "DEL TagElement: @return", "DEL Block", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: shortValue", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL TextElement: The stream is not closed, but it is flushed.", "DEL TextElement:  The configuration key.", "DEL SimpleName: key", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL InstanceofExpression", "DEL Modifier: final", "DEL SimpleName: addPropertyInternal", "DEL SimpleName: value", "DEL SimpleType: FileInputStream", "DEL CastExpression", "DEL SimpleName: i", "DEL SimpleName: readLine", "DEL TextElement: </li>", "DEL MethodDeclaration", "DEL SimpleName: length", "DEL NullLiteral", "DEL SimpleName: File", "DEL TextElement: When called the first time, priorVariables should be null.", "DEL SimpleName: b", "DEL SimpleName: value", "DEL MethodDeclaration", "DEL TextElement: Get the list of the keys contained in the configuration repository.", "DEL TextElement: Checks if the line ends with odd number of backslashes ", "DEL SimpleName: get", "DEL TextElement: Get a boolean associated with the given configuration key.", "DEL SimpleName: includePropertyName", "DEL SimpleType: StringBuilder", "DEL ReturnStatement", "DEL InfixExpression: +", "DEL NullLiteral", "DEL TagElement", "DEL TextElement:  new ExtendedProperties created from props", "DEL SimpleType: Double", "DEL SimpleName: getKeys", "DEL SimpleName: PrintWriter", "DEL VariableDeclarationStatement", "DEL SimpleName: line", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL Block", "DEL SimpleName: priorVariableSb", "DEL SimpleName: line", "DEL SimpleName: StringBuilder", "DEL SingleVariableDeclaration", "DEL SimpleName: i", "DEL Assignment: =", "DEL SimpleName: key", "DEL Modifier: final", "DEL SimpleName: hasNext", "DEL IfStatement", "DEL SuperMethodInvocation", "DEL SimpleName: String", "DEL ThrowStatement", "DEL Modifier: final", "DEL SimpleName: line", "DEL SimpleName: tokenizer", "DEL SimpleName: prefix", "DEL InstanceofExpression", "DEL SimpleName: defaultValue", "DEL SimpleName: append", "DEL SimpleName: hasMoreElements", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: hasNext", "DEL TagElement", "DEL SimpleName: key", "DEL SimpleType: File", "DEL SimpleName: s", "DEL SimpleType: ClassCastException", "DEL Modifier: final", "DEL SimpleName: key", "DEL SingleVariableDeclaration", "DEL InstanceofExpression", "DEL Block", "DEL Javadoc", "DEL TagElement: @param", "DEL TagElement: @param", "DEL SimpleName: trim", "DEL SimpleName: Byte", "DEL SimpleName: String", "DEL TextElement: Get a short associated with the given configuration key.", "DEL InfixExpression: !=", "DEL TagElement: @return", "DEL MethodDeclaration", "DEL SimpleName: value", "DEL SimpleType: Short", "DEL SimpleName: doubleValue", "DEL MethodDeclaration", "DEL SimpleName: end", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL SimpleName: basePath", "DEL SimpleType: String", "DEL SimpleName: defaultFile", "DEL SimpleName: StringTokenizer", "DEL MethodInvocation", "DEL TextElement:  True if the object has more tokens.", "DEL TextElement:  is thrown if the key maps to an", "DEL TextElement: <p>", "DEL VariableDeclarationStatement", "DEL TagElement: @param", "DEL SuperMethodInvocation", "DEL TagElement: @param", "DEL SimpleType: Object", "DEL SimpleName: Long", "DEL InfixExpression: &&", "DEL SimpleName: key", "DEL SimpleName: key", "DEL SimpleName: key", "DEL SimpleName: key", "DEL TagElement", "DEL Assignment: =", "DEL SimpleName: SuppressWarnings", "DEL TextElement:  string to interpolate", "DEL CastExpression", "DEL SimpleType: Object", "DEL IfStatement", "DEL NumberLiteral: 1", "DEL SimpleName: Short", "DEL NullLiteral", "DEL SimpleName: getBoolean", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TextElement: like the following:", "DEL CastExpression", "DEL SimpleName: currentOutput", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleName: defaultValue", "DEL PostfixExpression: ++", "DEL SimpleName: key", "DEL SimpleName: token", "DEL InstanceofExpression", "DEL MethodInvocation", "DEL SimpleName: priorVariables", "DEL TagElement: @param", "DEL SimpleName: file", "DEL StringLiteral: \"unchecked\"", "DEL Modifier: final", "DEL SuperConstructorInvocation", "DEL SimpleType: String", "DEL SimpleName: file", "DEL MethodInvocation", "DEL Javadoc", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL SimpleName: Vector", "DEL TextElement: separator is \",\" but commas into the property value are escaped", "DEL SimpleType: String", "DEL Modifier: final", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleType: String", "DEL TextElement: object that is not a Short.", "DEL ReturnStatement", "DEL SimpleName: List", "DEL SimpleName: Iterator", "DEL SimpleName: header", "DEL TextElement: By default it is \"include\".", "DEL TextElement:  is thrown if the key maps to an", "DEL MethodInvocation", "DEL SimpleName: ClassCastException", "DEL TextElement: object that is not a Short.", "DEL SimpleName: String", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL TextElement:   the prefix to match", "DEL SimpleName: setProperty", "DEL TextElement: # commas may be escaped in tokens", "DEL SimpleName: countPreceding", "DEL TextElement: Counts the number of successive times 'ch' appears in the", "DEL SimpleName: put", "DEL VariableDeclarationFragment", "DEL SimpleName: Iterator", "DEL SimpleType: Vector", "DEL StringLiteral: \"' doesn't map to a Long object\"", "DEL SimpleName: println", "DEL ParameterizedType: List<String>", "DEL IfStatement", "DEL TextElement:  is thrown if the key maps to an", "DEL SimpleName: Boolean", "DEL TagElement: @param", "DEL InfixExpression: +", "DEL Modifier: final", "DEL TagElement", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL PrefixExpression: !", "DEL NullLiteral", "DEL ExpressionStatement", "DEL TryStatement", "DEL SimpleName: NoSuchElementException", "DEL ReturnStatement", "DEL Modifier: public", "DEL SimpleName: getKeys", "DEL SimpleName: map", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: remove", "DEL TagElement: @return", "DEL SimpleType: String", "DEL SimpleType: StringBuilder", "DEL ParameterizedType: List<String>", "DEL SimpleName: key", "DEL SingleVariableDeclaration", "DEL TextElement: map to an existing object.", "DEL SimpleName: line", "DEL Block", "DEL TryStatement", "DEL SimpleName: buf", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: key", "DEL SimpleType: Double", "DEL TextElement: <li>", "DEL SimpleName: interpolateHelper", "DEL TextElement:  if there is difficulty reading the source.", "DEL Block", "DEL MethodDeclaration", "DEL IfStatement", "DEL SimpleName: priorVariables", "DEL PrimitiveType: void", "DEL ClassInstanceCreation", "DEL SimpleName: currentOutput", "DEL VariableDeclarationStatement", "DEL InfixExpression: ==", "DEL MethodDeclaration", "DEL SimpleName: length", "DEL TagElement: @param", "DEL TagElement: @return", "DEL TextElement:  The associated byte.", "DEL SimpleType: Object", "DEL SimpleName: IOException", "DEL Block", "DEL SimpleName: key", "DEL SimpleName: header", "DEL InfixExpression: >", "DEL Block", "DEL SimpleName: i", "DEL SimpleName: Object", "DEL InfixExpression: +", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: initialBase", "DEL SimpleName: String", "DEL TextElement: Blank lines and lines starting with character '#' are skipped.", "DEL SimpleName: i", "DEL MethodDeclaration", "DEL SimpleName: it", "DEL SimpleType: String", "DEL SimpleName: Enumeration", "DEL InfixExpression: +", "DEL TextElement: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "DEL SimpleName: append", "DEL SimpleName: file", "DEL TextElement:   the properties object to convert", "DEL SimpleName: Vector", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL MethodInvocation", "DEL TextElement:   the value to set", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL TextElement:  The associated short.", "DEL SimpleName: value", "DEL SimpleName: b", "DEL SimpleName: props", "DEL SimpleName: shortValue", "DEL SimpleName: key", "DEL SimpleName: NumberFormatException", "DEL SimpleName: key", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: key", "DEL SimpleName: value", "DEL NumberLiteral: 0", "DEL Javadoc", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleName: token", "DEL SimpleType: String", "DEL TagElement", "DEL MethodInvocation", "DEL Modifier: public", "DEL Block", "DEL ParameterizedType: List<String>", "DEL TextElement: <p>", "DEL FieldDeclaration", "DEL TextElement: object that is not a Long.", "DEL SimpleName: ret", "DEL SimpleName: String", "DEL TextElement:  if an IO error occurs", "DEL SimpleName: key", "DEL ReturnStatement", "DEL MethodInvocation", "DEL TextElement: occur.  It's 0'th element will be set to the value of base from", "DEL SimpleName: c", "DEL ClassInstanceCreation", "DEL Block", "DEL TagElement: @param", "DEL SimpleName: ClassCastException", "DEL SimpleName: line", "DEL SimpleName: defaultValue", "DEL SimpleName: append", "DEL SimpleType: String", "DEL SimpleType: PropertiesTokenizer", "DEL Block", "DEL SingleVariableDeclaration", "DEL TextElement: by the key has not a valid number format.", "DEL VariableDeclarationStatement", "DEL InfixExpression: !=", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL SimpleName: value", "DEL SimpleName: StringBuilder", "DEL SimpleName: includeProperty", "DEL SimpleName: defaults", "DEL SimpleType: String", "DEL IfStatement", "DEL NullLiteral", "DEL TextElement:  The configuration key.", "DEL SimpleName: key", "DEL SimpleName: String", "DEL SimpleName: String", "DEL Javadoc", "DEL SimpleName: String", "DEL SimpleName: value", "DEL SimpleName: c", "DEL NullLiteral", "DEL Modifier: final", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL TextElement:   a textual comment to act as a file header", "DEL TextElement: object that is not a Double.", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL CastExpression", "DEL VariableDeclarationStatement", "DEL SimpleName: defaultValue", "DEL SimpleName: StringBuilder", "DEL MethodInvocation", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: String", "DEL ClassInstanceCreation", "DEL SimpleName: key", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL Block", "DEL TagElement", "DEL SimpleName: END_TOKEN", "DEL NumberLiteral: 0", "DEL TextElement: Load the properties from the given input stream", "DEL SimpleName: ClassCastException", "DEL ThrowStatement", "DEL SimpleName: ClassCastException", "DEL SimpleName: value", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleType: String", "DEL SimpleName: i", "DEL MethodDeclaration", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL TextElement:  The default value.", "DEL SimpleType: String", "DEL SimpleName: addProperty", "DEL TagElement", "DEL TextElement: configuration key.", "DEL SimpleType: Boolean", "DEL SimpleType: String", "DEL Modifier: final", "DEL TextElement: tokens_on_a_line = first token, second token", "DEL SimpleName: IOException", "DEL SimpleName: Byte", "DEL SimpleName: defaultValue", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL Block", "DEL Block", "DEL MethodDeclaration", "DEL NullLiteral", "DEL BooleanLiteral: true", "DEL Javadoc", "DEL TextElement: performance is not an issue during initialization (and there is not", "DEL SimpleName: ClassCastException", "DEL SimpleName: value", "DEL PrimitiveType: void", "DEL StringLiteral: \"unchecked\"", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL TextElement:  is thrown if the key maps to an", "DEL MethodInvocation", "DEL CharacterLiteral: '='", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL Assignment: =", "DEL TagElement: @return", "DEL SimpleName: NumberFormatException", "DEL SimpleName: ClassCastException", "DEL Modifier: public", "DEL Block", "DEL TextElement: # lines starting with # are comments", "DEL Modifier: public", "DEL MethodInvocation", "DEL CastExpression", "DEL SimpleName: countPreceding", "DEL SimpleName: getShort", "DEL SimpleName: theWrtr", "DEL TagElement", "DEL IfStatement", "DEL TextElement:  is thrown if the key maps to an", "DEL TagElement", "DEL SimpleName: key", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: defaultValue", "DEL SimpleName: value", "DEL TextElement: By default it is \"include\".", "DEL VariableDeclarationFragment", "DEL InfixExpression: !=", "DEL SimpleType: String", "DEL TextElement:  The associated boolean.", "DEL VariableDeclarationFragment", "DEL SimpleName: getLong", "DEL TextElement:  is thrown if the key maps to an", "DEL SingleVariableDeclaration", "DEL SimpleName: d", "DEL TextElement:  The configuration key.", "DEL SimpleName: key", "DEL ExpressionStatement", "DEL SimpleName: NoSuchElementException", "DEL TagElement: @param", "DEL SimpleName: put", "DEL SimpleName: Boolean", "DEL SimpleName: value", "DEL StringLiteral: \"true\"", "DEL SimpleName: defaultValue", "DEL TextElement: </li>", "DEL InfixExpression: ==", "DEL TextElement: default value otherwise.", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL SimpleName: UnsupportedEncodingException", "DEL SimpleName: Byte", "DEL TextElement: tokens_on_multiple_lines = first token", "DEL SimpleType: String", "DEL Block", "DEL MethodDeclaration", "DEL TextElement: <p>", "DEL SimpleName: String", "DEL SimpleName: it", "DEL Modifier: final", "DEL SimpleName: key", "DEL SimpleName: ClassCastException", "DEL ReturnStatement", "DEL CastExpression", "DEL SimpleName: InputStream", "DEL SimpleName: i", "DEL TextElement:  is thrown if the value mapped", "DEL TextElement:  <code>true</code> or <code>false</code> if the supplied", "DEL TextElement: directory as the parent configuration file.", "DEL TextElement: The purpose of this method is to get the configuration resource", "DEL InstanceofExpression", "DEL TextElement: <li>", "DEL Modifier: final", "DEL Modifier: final", "DEL Modifier: final", "DEL IfStatement", "DEL MethodInvocation", "DEL TextElement: Get an array of strings associated with the given configuration key.", "DEL CharacterLiteral: '\\\\'", "DEL MethodInvocation", "DEL TextElement:  The configuration key.", "DEL Block", "DEL ExpressionStatement", "DEL Modifier: final", "DEL SimpleName: str", "DEL SimpleName: Integer", "DEL ExpressionStatement", "DEL TagElement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: String", "DEL SimpleName: startsWith", "DEL SimpleName: defaultValue", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleType: String", "DEL SimpleType: String", "DEL SimpleName: name", "DEL ReturnStatement", "DEL SimpleType: Short", "DEL SimpleName: Float", "DEL SimpleName: theWrtr", "DEL Modifier: final", "DEL NumberLiteral: 0", "DEL SimpleName: defaultValue", "DEL TextElement:  is thrown if the value mapped", "DEL Modifier: static", "DEL NullLiteral", "DEL SimpleName: defaultValue", "DEL SimpleName: pkey", "DEL VariableDeclarationFragment", "DEL SimpleName: token", "DEL MethodInvocation", "DEL Modifier: final", "DEL SingleMemberAnnotation", "DEL NumberLiteral: 1", "DEL SimpleName: value", "DEL VariableDeclarationStatement", "DEL TagElement: @throws", "DEL SimpleName: Object", "DEL TagElement: @param", "DEL NullLiteral", "DEL TextElement: concatenate multiple lines for readability.", "DEL SimpleName: Boolean", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: charAt", "DEL TextElement:   the properties to combine", "DEL Modifier: public", "DEL Modifier: final", "DEL InfixExpression: !=", "DEL SimpleName: l", "DEL ClassInstanceCreation", "DEL SimpleName: currentOutput", "DEL SimpleName: NoSuchElementException", "DEL TagElement", "DEL SimpleType: Integer", "DEL NullLiteral", "DEL SimpleType: List", "DEL TextElement:  is thrown if the value mapped", "DEL SimpleName: InputStream", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL TextElement:  The associated byte if key is found and has valid", "DEL CharacterLiteral: '\\''", "DEL CastExpression", "DEL TextElement:  is thrown if the value mapped", "DEL InfixExpression: ==", "DEL ParameterizedType: Enumeration<String>", "DEL InfixExpression: +", "DEL TextElement:  A String.", "DEL Block", "DEL SimpleName: getProperties", "DEL VariableDeclarationFragment", "DEL SimpleName: ClassCastException", "DEL TagElement: @return", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL CharacterLiteral: '\\''", "DEL SimpleName: Object", "DEL SimpleName: String", "DEL TextElement: object that is not a Float.", "DEL SimpleName: length", "DEL Block", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SimpleType: Object", "DEL SimpleName: defaultValue", "DEL MethodDeclaration", "DEL TextElement:  is thrown if the value mapped", "DEL IfStatement", "DEL TagElement", "DEL Modifier: private", "DEL SimpleName: String", "DEL SimpleName: pvalue", "DEL Modifier: public", "DEL TextElement: Remove the property specified by the key from the ", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleName: addPropertyDirect", "DEL ExpressionStatement", "DEL NumberLiteral: 1", "DEL VariableDeclarationFragment", "DEL SimpleType: ExtendedProperties", "DEL CharacterLiteral: '\\''", "DEL SimpleName: ClassCastException", "DEL TagElement", "DEL StringLiteral: \"unchecked\"", "DEL SimpleName: get", "DEL Modifier: final", "DEL SimpleType: NoSuchElementException", "DEL SimpleName: nextToken", "DEL MethodDeclaration", "DEL Javadoc", "DEL TextElement:  is thrown if the value mapped", "DEL PrimitiveType: short", "DEL TagElement: @return", "DEL ParameterizedType: ArrayList<String>", "DEL SimpleName: Byte", "DEL TextElement: such you may alter it freely.", "DEL TextElement:  The default value.", "DEL SimpleName: ex", "DEL ClassInstanceCreation", "DEL SimpleType: String", "DEL TextElement: Get a int associated with the given configuration key.", "DEL Modifier: public", "DEL SimpleName: key", "DEL SimpleName: key", "DEL SimpleName: s", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: currentOutput", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: ClassCastException", "DEL SingleMemberAnnotation", "DEL SimpleName: line", "DEL SimpleName: Properties", "DEL SimpleType: String", "DEL Block", "DEL SimpleType: Object", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: add", "DEL IfStatement", "DEL SimpleName: substring", "DEL SimpleName: String", "DEL SimpleName: defaultValue", "DEL Modifier: final", "DEL TextElement:  is thrown if the value mapped", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL TextElement: <li>", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleName: Iterator", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL ParameterizedType: Enumeration<String>", "DEL ParameterizedType: Map<? extends String,? extends Object>", "DEL TextElement:  org.apache.commons.configuration.PropertiesConfiguration", "DEL TextElement: format, default value otherwise.", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 0", "DEL SimpleName: key", "DEL SimpleName: values", "DEL TagElement: @param", "DEL SimpleName: Long", "DEL TextElement: instead of overwriting them.", "DEL SimpleName: values", "DEL TextElement:  A String.", "DEL Modifier: final", "DEL SimpleName: file", "DEL Block", "DEL SimpleName: getBoolean", "DEL PrimitiveType: int", "DEL SimpleName: props", "DEL Javadoc", "DEL SimpleName: token", "DEL SimpleName: input", "DEL Modifier: final", "DEL SimpleName: String", "DEL Block", "DEL FieldDeclaration", "DEL SimpleName: variable", "DEL TextElement: Warning: It will overwrite previous entries without warning.", "DEL SimpleName: String", "DEL ClassInstanceCreation", "DEL Block", "DEL InfixExpression: !=", "DEL WhileStatement", "DEL SimpleName: iterator", "DEL PrimitiveType: void", "DEL SimpleName: value", "DEL MethodInvocation", "DEL SimpleName: getByte", "DEL SimpleName: key", "DEL TextElement:  The associated byte.", "DEL NullLiteral", "DEL TextElement: <i>value</i> may be separated on different lines if a backslash", "DEL VariableDeclarationExpression", "DEL SimpleType: List", "DEL Modifier: public", "DEL Modifier: final", "DEL SimpleName: value", "DEL SimpleName: key", "DEL SimpleName: key", "DEL PrefixExpression: !", "DEL SimpleName: Vector", "DEL InfixExpression: +", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL TextElement: Get a float associated with the given configuration key.", "DEL SimpleType: IOException", "DEL Modifier: private", "DEL TextElement:  is thrown if the key maps to an", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleType: java.util.Map.Entry", "DEL SimpleName: defaults", "DEL InstanceofExpression", "DEL TextElement: Get a byte associated with the given configuration key.", "DEL TextElement: <p>", "DEL SimpleName: in", "DEL SimpleName: key", "DEL VariableDeclarationFragment", "DEL SimpleName: containsKey", "DEL InfixExpression: -", "DEL SimpleName: Integer", "DEL Modifier: final", "DEL BreakStatement", "DEL IfStatement", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL SimpleName: s", "DEL InfixExpression: ==", "DEL SimpleName: get", "DEL MethodInvocation", "DEL CharacterLiteral: '\\\\'", "DEL Block", "DEL ParameterizedType: List<String>", "DEL SimpleName: currentOutput", "DEL CharacterLiteral: '\\''", "DEL TagElement", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL SimpleName: add", "DEL InfixExpression: +", "DEL SimpleName: value", "DEL SimpleName: addProperty", "DEL MethodDeclaration", "DEL IfStatement", "DEL TextElement:  is thrown if the key maps to an", "DEL TextElement:  is thrown if the key maps to an", "DEL InfixExpression: &&", "DEL SimpleName: add", "DEL TextElement: Get a string associated with the given configuration key.", "DEL TextElement: map to an existing object.", "DEL MethodDeclaration", "DEL SimpleName: String", "DEL TextElement: Base path of the configuration file used to create", "DEL SimpleName: List", "DEL TextElement: the first call.  All subsequent interpolated variables are added", "DEL SimpleName: String", "DEL SimpleName: key", "DEL TextElement: commas.escaped = Hi\\, what'up?", "DEL TextElement: by the key has not a valid number format.", "DEL SimpleType: Float", "DEL ExpressionStatement", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL SimpleType: IllegalStateException", "DEL SimpleType: Vector", "DEL SimpleType: InputStream", "DEL IfStatement", "DEL MethodDeclaration", "DEL InfixExpression: <", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: Object", "DEL ParameterizedType: Iterator<String>", "DEL SimpleName: value", "DEL Block", "DEL SimpleName: String", "DEL SimpleType: Object", "DEL BooleanLiteral: false", "DEL SimpleName: value", "DEL CastExpression", "DEL Modifier: final", "DEL SimpleName: value", "DEL SimpleType: String", "DEL TagElement: @param", "DEL SimpleName: readProperty", "DEL SimpleName: getProperty", "DEL SimpleName: entry", "DEL SuperMethodInvocation", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL SingleMemberAnnotation", "DEL TagElement: @throws", "DEL TagElement: @param", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: Vector", "DEL TextElement:  if this instance has already been initialized", "DEL Block", "DEL SimpleName: addPropertyInternal", "DEL SimpleType: List", "DEL SimpleName: value", "DEL SimpleName: String", "DEL ReturnStatement", "DEL TextElement: the ConfigurationsRepository. You can also pull in files relative", "DEL SimpleName: NoSuchElementException", "DEL SimpleName: String", "DEL SimpleName: getByte", "DEL TextElement:  The associated float.", "DEL TextElement:  The associated string.", "DEL SimpleName: String", "DEL Modifier: public", "DEL Modifier: final", "DEL Javadoc", "DEL MethodDeclaration", "DEL TextElement:  is thrown if the key maps to an", "DEL TextElement:  The associated long.", "DEL TextElement: Inserts a backslash before every comma and backslash. ", "DEL InfixExpression: ||", "DEL SimpleName: key", "DEL SimpleName: values", "DEL SimpleType: Object", "DEL SimpleName: length", "DEL TextElement:  The associated Vector.", "DEL SimpleName: def", "DEL SimpleType: Long", "DEL SimpleName: StringBuilder", "DEL SimpleName: defaults", "DEL VariableDeclarationStatement", "DEL SimpleName: getInt", "DEL ReturnStatement", "DEL SimpleName: it", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: strKey", "DEL SimpleName: values", "DEL ThisExpression", "DEL StringLiteral: \" doesn't map to an existing object\"", "DEL TagElement: @param", "DEL NullLiteral", "DEL TextElement:  The default value.", "DEL Modifier: final", "DEL Block", "DEL SimpleName: getByte", "DEL MethodInvocation", "DEL TagElement", "DEL TextElement:   an OutputStream, may be null", "DEL SimpleName: defaults", "DEL SimpleName: String", "DEL SimpleName: s", "DEL Modifier: final", "DEL MethodInvocation", "DEL TextElement: boolean status is ignored.", "DEL Block", "DEL SimpleName: PrintWriter", "DEL BooleanLiteral: true", "DEL SimpleName: key", "DEL SimpleType: String", "DEL SimpleName: key", "DEL Javadoc", "DEL IfStatement", "DEL SimpleName: key", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL WhileStatement", "DEL TextElement: Get a double associated with the given configuration key.", "DEL NumberLiteral: 0", "DEL SimpleName: putAll", "DEL SimpleName: Boolean", "DEL SimpleName: String", "DEL SimpleName: IllegalStateException", "DEL SimpleType: String", "DEL SimpleName: value", "DEL Modifier: final", "DEL SimpleName: in", "DEL SimpleName: defaults", "DEL Javadoc", "DEL SimpleName: key", "DEL SimpleName: key", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SimpleName: Enumeration", "DEL MethodInvocation", "DEL SimpleType: ExtendedProperties", "DEL ClassInstanceCreation", "DEL SimpleName: String", "DEL NullLiteral", "DEL ParameterizedType: Vector<String>", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL InstanceofExpression", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL TagElement: @throws", "DEL SingleVariableDeclaration", "DEL SimpleName: getFloat", "DEL StringLiteral: \"unchecked\"", "DEL SimpleName: s", "DEL SimpleName: Integer", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleType: ClassCastException", "DEL SimpleName: toString", "DEL SimpleName: String", "DEL SimpleName: String", "DEL SimpleName: buf", "DEL Block", "DEL SimpleName: String", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleName: remove", "DEL Block", "DEL Javadoc", "DEL SimpleName: String", "DEL TagElement: @throws", "DEL SimpleName: Object", "DEL SingleMemberAnnotation", "DEL SimpleName: StringBuilder", "DEL TextElement: by using the setProperty() in ExtendedProperties.", "DEL SimpleName: Vector", "DEL TextElement: The Extended Properties syntax is explained here:", "DEL MethodInvocation", "DEL SimpleName: priorVariableSb", "DEL ReturnStatement", "DEL SimpleName: basePath", "DEL SimpleName: prec", "DEL SimpleName: Properties", "DEL TextElement: internally when a property has been broken up into", "DEL SimpleName: key", "DEL SimpleName: props", "DEL ReturnStatement", "DEL SimpleType: InputStreamReader", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: testBoolean", "DEL Modifier: final", "DEL SimpleName: NumberFormatException", "DEL SimpleName: key", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SimpleName: l", "DEL SimpleType: NoSuchElementException", "DEL IfStatement", "DEL TextElement:  The default value.", "DEL TextElement: NOTE: From Commons Collections 3.2 this method will pick up", "DEL SimpleType: List", "DEL ClassInstanceCreation", "DEL SimpleName: key", "DEL Javadoc", "DEL SimpleName: put", "DEL IfStatement", "DEL SimpleName: key", "DEL Block", "DEL SimpleType: List", "DEL VariableDeclarationFragment", "DEL TextElement: Indicate to client code whether property", "DEL VariableDeclarationStatement", "DEL TextElement: Creates and loads the extended properties from the specified file.", "DEL SimpleName: key", "DEL IfStatement", "DEL StringLiteral: \"infinite loop in property interpolation of \"", "DEL TagElement: @return", "DEL TextElement: strings that could contain escaped commas to prevent", "DEL SimpleType: Short", "DEL Modifier: final", "DEL NullLiteral", "DEL SimpleType: Properties", "DEL SimpleName: defaultValue", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL TextElement: with the given name as an integer, or a default value.", "DEL TextElement:  1.0", "DEL SimpleType: PropertiesReader", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL InfixExpression: -", "DEL SimpleName: defaultValue", "DEL TagElement: @version", "DEL NullLiteral", "DEL ExpressionStatement", "DEL SimpleType: Integer", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL SimpleName: key", "DEL SimpleName: c1", "DEL Modifier: static", "DEL SimpleName: reader", "DEL VariableDeclarationStatement", "DEL ParenthesizedExpression", "DEL SimpleName: getBoolean", "DEL SimpleName: escape", "DEL SimpleName: s", "DEL NumberLiteral: 0", "DEL SimpleName: SuppressWarnings", "DEL Block", "DEL ThrowStatement", "DEL SimpleName: value", "DEL SimpleName: Long", "DEL ThrowStatement", "DEL SimpleName: key", "DEL ReturnStatement", "DEL SimpleName: append", "DEL SimpleName: Double", "DEL MethodInvocation", "DEL SimpleName: line", "DEL SimpleName: startsWith", "DEL VariableDeclarationFragment", "DEL SimpleName: key", "DEL VariableDeclarationFragment", "DEL SimpleName: remove", "DEL SimpleName: List", "DEL PrimitiveType: float", "DEL SimpleName: priorVariables", "DEL MethodInvocation", "DEL SimpleName: tokens", "DEL SimpleName: Short", "DEL SimpleType: ExtendedProperties", "DEL SimpleType: Iterator", "DEL SimpleName: it", "DEL SimpleName: value", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleType: String", "DEL InfixExpression: ==", "DEL SingleVariableDeclaration", "DEL SimpleName: IOException", "DEL SimpleName: line", "DEL Block", "DEL SimpleName: defaults", "DEL ArrayType: String[]", "DEL VariableDeclarationStatement", "DEL TextElement: the full path to a file on disk, that file will be included into", "DEL SingleVariableDeclaration", "DEL SimpleName: charAt", "DEL SimpleName: List", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TextElement: by the key has not a valid number format.", "DEL Block", "DEL Modifier: public", "DEL SimpleName: Object", "DEL IfStatement", "DEL SimpleName: values", "DEL Javadoc", "DEL MethodInvocation", "DEL TagElement: @since", "DEL SimpleName: END_TOKEN", "DEL TextElement: It's an evolution of <code>ExtendedProperties</code> supporting more", "DEL SimpleName: key", "DEL SimpleName: List", "DEL SimpleName: Object", "DEL SimpleName: d", "DEL Modifier: public", "DEL TextElement:  is thrown if the key maps to an", "DEL TextElement:  The value of the resource as an integer.", "DEL TextElement: <li>", "DEL TextElement: Get a boolean associated with the given configuration key.", "DEL SimpleName: buffer", "DEL SimpleType: ClassCastException", "DEL SimpleName: buffer", "DEL SimpleName: String", "DEL InfixExpression: +", "DEL SimpleName: Float", "DEL SimpleType: String", "DEL SimpleName: value", "DEL Block", "DEL SimpleName: Object", "DEL Modifier: final", "DEL SimpleName: value", "DEL SimpleName: key", "DEL Block", "DEL SimpleName: defaultValue", "DEL Modifier: protected", "DEL SimpleName: getVector", "DEL Block", "DEL SimpleName: get", "DEL SimpleName: String", "DEL InstanceofExpression", "DEL SimpleName: c", "DEL SimpleType: Object", "DEL TextElement:  string with the ${key} variables", "DEL SimpleName: key", "DEL SimpleType: String", "DEL SimpleName: key", "DEL IfStatement", "DEL TextElement: Get a list of properties associated with the given", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL TextElement: and using the specified encoding.", "DEL SimpleName: load", "DEL ForStatement", "DEL ReturnStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: unescape", "DEL SimpleName: value", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: key", "DEL SimpleName: trim", "DEL CastExpression", "DEL SimpleName: put", "DEL SimpleType: IOException", "DEL SimpleName: i", "DEL SimpleName: i", "DEL CastExpression", "DEL SimpleType: Object", "DEL Modifier: final", "DEL MethodInvocation", "DEL StringLiteral: \"yes\"", "DEL SimpleName: Float", "DEL SimpleName: i", "DEL TagElement", "DEL Block", "DEL SimpleName: variable", "DEL SimpleName: currentOutput", "DEL Modifier: final", "DEL SimpleName: ClassCastException", "DEL Block", "DEL ThrowStatement", "DEL SimpleName: ArrayList", "DEL ExpressionStatement", "DEL SimpleName: tokenizer", "DEL VariableDeclarationStatement", "DEL TextElement: </li>", "DEL TextElement: it, go ahead and tune it up!", "DEL SimpleName: String", "DEL TextElement: such you may alter it freely.", "DEL TagElement: @code", "DEL Javadoc", "DEL SimpleName: String", "DEL SimpleType: ExtendedProperties", "DEL SuperMethodInvocation", "DEL Modifier: public", "DEL SimpleType: String", "DEL SimpleType: String", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL TextElement: object that is not a String/List.", "DEL IfStatement", "DEL TextElement: using the backslash in front.", "DEL NullLiteral", "DEL Block", "DEL ReturnStatement", "DEL Modifier: final", "DEL SimpleType: String", "DEL IfStatement", "DEL InfixExpression: >", "DEL SimpleName: line", "DEL SimpleName: defaultValue", "DEL SimpleName: value", "DEL SimpleName: value", "DEL CharacterLiteral: '\\''", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL SimpleType: Float", "DEL SimpleType: ExtendedProperties", "DEL SimpleName: hasMoreTokens", "DEL PrefixExpression: -", "DEL SimpleName: getDouble", "DEL SimpleName: value", "DEL SimpleName: reader", "DEL MethodDeclaration", "DEL SimpleName: ClassCastException", "DEL TagElement: @return", "DEL TextElement: object that is not a Vector.", "DEL StringLiteral: \"' doesn't map to a Short object\"", "DEL SimpleType: String", "DEL SimpleType: Float", "DEL Block", "DEL Block", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleName: IOException", "DEL SimpleName: String", "DEL SimpleType: String", "DEL TextElement: Set a property, this will replace any previously", "DEL SimpleName: getShort", "DEL MethodInvocation", "DEL SimpleName: List", "DEL InfixExpression: +", "DEL Block", "DEL TextElement: <li>", "DEL SimpleName: ClassCastException", "DEL SimpleName: Iterator", "DEL TagElement", "DEL IfStatement", "DEL TagElement", "DEL SimpleName: Object", "DEL Javadoc", "DEL SimpleName: key", "DEL SimpleName: put", "DEL SimpleType: Long", "DEL SimpleType: String", "DEL SimpleName: StringBuilder", "DEL ExpressionStatement", "DEL TextElement: malformed (does not contain an equals sign).", "DEL PrimitiveType: void", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: defaults", "DEL ReturnStatement", "DEL SimpleName: String", "DEL SimpleName: key", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleName: defaults", "DEL Modifier: final", "DEL Block", "DEL QualifiedName: PropertiesTokenizer.DELIMITER", "DEL Modifier: final", "DEL Javadoc", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL TextElement: Get a double associated with the given configuration key.", "DEL SimpleName: getKeys", "DEL SimpleType: String", "DEL Modifier: final", "DEL SimpleName: get", "DEL SimpleName: priorVariables", "DEL SimpleName: unescape", "DEL ClassInstanceCreation", "DEL SimpleName: Integer", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL SimpleType: String", "DEL SimpleName: ArrayList", "DEL TagElement: @throws", "DEL PrimitiveType: int", "DEL Javadoc", "DEL SimpleName: ClassCastException", "DEL SimpleName: get", "DEL SimpleName: buf", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: IOException", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL MethodInvocation", "DEL VariableDeclarationExpression", "DEL IfStatement", "DEL SimpleName: defaults", "DEL SimpleName: ArrayList", "DEL SimpleName: length", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL InfixExpression: +", "DEL SimpleName: keysAsListed", "DEL TagElement: @throws", "DEL PostfixExpression: ++", "DEL SimpleType: File", "DEL TextElement:  The configuration key.", "DEL TextElement: Constructor.", "DEL PrimitiveType: int", "DEL SimpleName: ArrayList", "DEL SimpleType: String", "DEL SimpleName: key", "DEL SimpleName: value", "DEL SimpleName: length", "DEL SingleVariableDeclaration", "DEL PrimitiveType: void", "DEL SimpleName: String", "DEL TagElement", "DEL SimpleName: Object", "DEL InfixExpression: -", "DEL SimpleType: ClassCastException", "DEL SimpleType: Integer", "DEL SimpleName: c2", "DEL VariableDeclarationStatement", "DEL TagElement: @param", "DEL SimpleName: name", "DEL SimpleType: Float", "DEL SimpleName: Double", "DEL SimpleType: String", "DEL SimpleName: value", "DEL SimpleName: map", "DEL Modifier: final", "DEL ParameterizedType: ArrayList<String>", "DEL ExpressionStatement", "DEL SimpleType: Float", "DEL SimpleName: substring", "DEL InstanceofExpression", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: prec", "DEL SimpleName: String", "DEL SimpleType: String", "DEL SimpleName: value", "DEL MethodInvocation", "DEL SimpleType: ExtendedProperties", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL TagElement", "DEL PrimitiveType: void", "DEL SimpleName: defaultValue", "DEL SimpleName: String", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL TextElement: <p>", "DEL CharacterLiteral: '\\''", "DEL Javadoc", "DEL SimpleName: interpolateHelper", "DEL SimpleName: entry", "DEL Modifier: final", "DEL SimpleName: line", "DEL Modifier: final", "DEL SimpleName: PropertiesTokenizer", "DEL MethodInvocation", "DEL Modifier: static", "DEL BooleanLiteral: false", "DEL SimpleName: key", "DEL SimpleName: str", "DEL SimpleName: key", "DEL VariableDeclarationFragment", "DEL SimpleType: List", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleName: c2", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: defaultValue", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: NumberFormatException", "DEL ParameterizedType: List<Object>", "DEL TagElement: @return", "DEL SimpleName: prefix", "DEL SimpleName: line", "DEL SimpleName: END_TOKEN", "DEL SimpleName: DELIMITER", "DEL SimpleName: keysAsListed", "DEL IfStatement", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: line", "DEL SimpleName: NumberFormatException", "DEL QualifiedName: Locale.ENGLISH", "DEL Modifier: public", "DEL IfStatement", "DEL SimpleName: substring", "DEL SimpleType: String", "DEL SimpleName: value", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL NullLiteral", "DEL TagElement: @return", "DEL IfStatement", "DEL InstanceofExpression", "DEL SimpleName: equals", "DEL TagElement: @param", "DEL InfixExpression: !=", "DEL VariableDeclarationFragment", "DEL TextElement:  is thrown if the key maps to an", "DEL Modifier: final", "DEL TagElement: @return", "DEL TagElement: @throws", "DEL ParameterizedType: List<String>", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: getString", "DEL MethodInvocation", "DEL PrimitiveType: char", "DEL ParameterizedType: List<String>", "DEL SimpleName: append", "DEL SimpleName: Float", "DEL SimpleType: String", "DEL PrimitiveType: byte", "DEL SimpleName: String", "DEL SimpleName: interpolate", "DEL SimpleName: basePath", "DEL SimpleName: ExtendedProperties", "DEL Modifier: final", "DEL IfStatement", "DEL Modifier: private", "DEL TextElement: object that is not a Double.", "DEL SimpleType: NoSuchElementException", "DEL SimpleName: keysAsListed", "DEL SimpleName: key", "DEL TagElement", "DEL MethodInvocation", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SimpleName: it", "DEL TextElement:  is thrown if the key maps to an", "DEL TagElement: @throws", "DEL SimpleName: ex", "DEL SimpleName: Properties", "DEL SimpleName: prefix", "DEL SimpleType: String", "DEL ParenthesizedExpression", "DEL SimpleName: props", "DEL SimpleType: String", "DEL InfixExpression: ==", "DEL Modifier: private", "DEL SimpleName: Byte", "DEL ClassInstanceCreation", "DEL SimpleName: getFloat", "DEL NullLiteral", "DEL SimpleType: String", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: indexOf", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SimpleName: line", "DEL TagElement", "DEL TagElement", "DEL SimpleName: next", "DEL TagElement: @throws", "DEL SimpleName: serialVersionUID", "DEL SimpleName: obj", "DEL MethodInvocation", "DEL SimpleType: String", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: buffer", "DEL SingleVariableDeclaration", "DEL Modifier: protected", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: String", "DEL SimpleType: String", "DEL SimpleName: props", "DEL MethodInvocation", "DEL TextElement: Clear a property in the configuration.", "DEL Modifier: final", "DEL TextElement: <li>", "DEL SimpleName: clearProperty", "DEL SimpleType: Properties", "DEL ParameterizedType: Vector<String>", "DEL StringLiteral: \"' doesn't map to an existing object\"", "DEL ClassInstanceCreation", "DEL SimpleName: end", "DEL SimpleName: canRead", "DEL SimpleName: value", "DEL InfixExpression: &&", "DEL SimpleType: String", "DEL SimpleName: it", "DEL SimpleName: Object", "DEL SimpleName: key", "DEL InfixExpression: !=", "DEL SimpleName: defaultFile", "DEL NullLiteral", "DEL TextElement:  is thrown if the key doesn't", "DEL SimpleName: i", "DEL Assignment: =", "DEL PrimitiveType: double", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: key", "DEL Modifier: final", "DEL TextElement:   a second filename to load default values from", "DEL SimpleType: IOException", "DEL SimpleName: value", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 0", "DEL InstanceofExpression", "DEL SimpleName: getShort", "DEL Modifier: final", "DEL TryStatement", "DEL InstanceofExpression", "DEL SimpleName: defaultValue", "DEL SimpleName: file", "DEL Block", "DEL SimpleName: defaultValue", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: key", "DEL ExpressionStatement", "DEL IfStatement", "DEL ArrayType: String[]", "DEL TextElement: Get a byte associated with the given configuration key.", "DEL TextElement:   the prefix to get a subset for", "DEL Block", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleType: Boolean", "DEL Assignment: =", "DEL Block", "DEL TextElement: Add a new property specified by the key to the ", "DEL TagElement: @throws", "DEL NullLiteral", "DEL StringLiteral: \"' doesn't map to a String object\"", "DEL SimpleName: combine", "DEL SimpleName: value", "DEL TextElement: information in a particular order.", "DEL SimpleName: nextToken", "DEL SimpleType: Object", "DEL SimpleName: isInitialized", "DEL SimpleName: String", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: StringBuilder", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL InfixExpression: !=", "DEL SimpleName: size", "DEL SimpleName: line", "DEL SimpleName: Integer", "DEL TextElement: by a comma ','.", "DEL TextElement: object that is not a Integer.", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL SimpleType: Iterator", "DEL SimpleName: Integer", "DEL IfStatement", "DEL SimpleName: trim", "DEL TagElement: @param", "DEL TagElement", "DEL SimpleName: key", "DEL TextElement: Then \"additional.properties\" is expected to be in the same", "DEL SingleVariableDeclaration", "DEL InstanceofExpression", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL Modifier: final", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL SimpleName: longValue", "DEL Assignment: =", "DEL TextElement: <p>", "DEL Block", "DEL SimpleName: byteValue", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleName: value", "DEL Modifier: final", "DEL ReturnStatement", "DEL SimpleName: String", "DEL TagElement", "DEL SimpleName: key", "DEL SimpleType: Iterator", "DEL SimpleName: current", "DEL TextElement:  null", "DEL SimpleName: value", "DEL TextElement:   the key to store at", "DEL SimpleName: get", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL SimpleName: base", "DEL SuperMethodInvocation", "DEL MethodInvocation", "DEL SimpleType: Float", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL SimpleName: b", "DEL NumberLiteral: 1", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleName: s", "DEL VariableDeclarationStatement", "DEL TagElement: @throws", "DEL ExpressionStatement", "DEL CharacterLiteral: '\\''", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL TextElement:   the property name which includes another property, empty converted to null", "DEL SimpleName: i", "DEL ThrowStatement", "DEL NumberLiteral: 1", "DEL MethodDeclaration", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: Vector", "DEL Block", "DEL SimpleName: valueOf", "DEL TextElement: longvalue = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \\", "DEL Block", "DEL TextElement: Creates and loads the extended properties from the specified file.", "DEL SimpleType: StringBuilder", "DEL TextElement:  The default properties used to initialize the returned object", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodInvocation", "DEL TextElement: afterward.", "DEL SimpleName: interpolate", "DEL SimpleName: Override", "DEL SimpleName: String", "DEL TagElement: @param", "DEL SimpleName: strKey", "DEL TagElement: @throws", "DEL VariableDeclarationFragment", "DEL SuperMethodInvocation", "DEL SimpleName: getBoolean", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL SimpleType: List", "DEL SimpleName: defaultValue", "DEL TagElement: @throws", "DEL BooleanLiteral: true", "DEL ParameterizedType: Iterator<String>", "DEL ReturnStatement", "DEL SimpleName: ClassCastException", "DEL TextElement: Add a property to the configuration. If it already", "DEL Modifier: static", "DEL SimpleName: Object", "DEL SimpleName: value", "DEL SimpleName: SuppressWarnings", "DEL SimpleName: ExtendedProperties", "DEL SimpleName: i", "DEL CastExpression", "DEL TagElement", "DEL SimpleType: String", "DEL SimpleName: key", "DEL SimpleName: b", "DEL SimpleName: validSubset", "DEL SimpleName: tokenizer", "DEL SimpleName: props", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL ParameterizedType: java.util.Map.Entry<String,Object>", "DEL ClassInstanceCreation", "DEL TextElement: configuration key.", "DEL TagElement: @param", "DEL TextElement: This class divides into tokens a property value.  Token", "DEL ExpressionStatement", "DEL TagElement: @return", "DEL Block", "DEL ParameterizedType: Iterator<String>", "DEL SimpleName: key", "DEL SimpleName: List", "DEL Block", "DEL SimpleName: value", "DEL TextElement: Get a float associated with the given configuration key.", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL SimpleType: Long", "DEL TextElement: <li>", "DEL SimpleName: get", "DEL MethodInvocation", "DEL TextElement: Then you will end up with a Vector like the", "DEL TagElement: @throws", "DEL Modifier: final", "DEL Javadoc", "DEL SimpleName: defaultValue", "DEL TextElement: exists then the value stated here will be added", "DEL MethodInvocation", "DEL SimpleName: Properties", "DEL TextElement: The <i>key</i> may use any character but the equal sign '='.", "DEL SimpleName: charAt", "DEL InfixExpression: +", "DEL TagElement: @throws", "DEL SimpleName: ExtendedProperties", "DEL SimpleName: key", "DEL SimpleName: file", "DEL ExpressionStatement", "DEL SimpleName: key", "DEL SimpleName: f", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"' doesn't map to a Boolean object\"", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL MethodInvocation", "DEL InfixExpression: -", "DEL SimpleName: key", "DEL TextElement: values will not be passed on in the new ExtendedProperties ", "DEL SimpleName: getBoolean", "DEL Modifier: final", "DEL ExpressionStatement", "DEL InfixExpression: +", "DEL SimpleName: String", "DEL SimpleName: getProperty", "DEL SimpleType: Double", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleName: NoSuchElementException", "DEL VariableDeclarationStatement", "DEL SimpleName: key", "DEL SimpleName: line", "DEL Modifier: final", "DEL SimpleName: l", "DEL SimpleName: Double", "DEL SimpleName: keysAsListed", "DEL TextElement: Get a double associated with the given configuration key.", "DEL TagElement", "DEL TextElement: to use the same key many times concatenating the value strings", "DEL ReturnStatement", "DEL ThrowStatement", "DEL SimpleName: PropertiesReader", "DEL SimpleName: booleanValue", "DEL SingleVariableDeclaration", "DEL TextElement: Get a short associated with the given configuration key.", "DEL SimpleType: File", "DEL MethodInvocation", "DEL SimpleName: getFloat", "DEL SimpleType: String", "DEL TagElement: @throws", "DEL SimpleName: IOException", "DEL MethodInvocation", "DEL SimpleType: Boolean", "DEL Block", "DEL Block", "DEL TagElement", "DEL SimpleName: value", "DEL MethodInvocation", "DEL SimpleName: readProperty", "DEL SimpleType: StringBuilder", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL Block", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: list", "DEL SimpleType: String", "DEL SimpleName: list", "DEL SimpleName: readLine", "DEL VariableDeclarationExpression", "DEL TextElement:  is thrown if the key doesn't", "DEL SimpleType: String", "DEL SimpleName: entry", "DEL VariableDeclarationStatement", "DEL SimpleName: values", "DEL NullLiteral", "DEL SimpleName: String", "DEL MethodInvocation", "DEL TextElement:  the property name which includes another property", "DEL SimpleName: d", "DEL CastExpression", "DEL PostfixExpression: ++", "DEL SimpleType: Map", "DEL ExpressionStatement", "DEL SimpleName: length", "DEL Modifier: public", "DEL SimpleName: Object", "DEL Javadoc", "DEL SimpleName: variable", "DEL TextElement:  is thrown if the value mapped", "DEL SimpleName: get", "DEL TagElement: @param", "DEL TextElement: </li>", "DEL TagElement: @throws", "DEL SimpleType: List", "DEL StringLiteral: \"' doesn't map to a Double object\"", "DEL SimpleName: iterator", "DEL Assignment: =", "DEL TextElement: by the key has not a valid number format.", "DEL Block", "DEL TagElement: @return", "DEL SimpleName: defaults", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: current", "DEL SimpleName: values", "DEL IfStatement", "DEL TagElement: @throws", "DEL SimpleName: ClassCastException", "DEL SimpleName: Long", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL TextElement:  is thrown if the key maps to an", "DEL SimpleName: theWrtr", "DEL Assignment: =", "DEL SimpleName: setProperty", "DEL ClassInstanceCreation", "DEL SimpleType: String", "DEL FieldDeclaration", "DEL Block", "DEL SimpleType: Object", "DEL SimpleName: priorVariableSb", "DEL Block", "DEL SimpleName: indexOf", "DEL VariableDeclarationFragment", "DEL Block", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL SimpleName: key", "DEL SimpleName: NumberFormatException", "DEL SimpleName: substring", "DEL TextElement: object that is not a Boolean.", "DEL SimpleType: String", "DEL InfixExpression: +", "DEL Modifier: final", "DEL NumberLiteral: 0", "DEL ForStatement", "DEL SimpleName: String", "DEL NullLiteral", "DEL SimpleName: valueOf", "DEL SimpleName: Byte", "DEL Modifier: final", "DEL SimpleType: Object", "DEL Javadoc", "DEL SimpleName: props", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL TagElement: @since", "DEL SimpleName: String", "DEL ReturnStatement", "DEL SimpleName: value", "DEL SimpleName: buffer", "DEL InfixExpression: %", "DEL Javadoc", "DEL Block", "DEL SimpleType: String", "DEL SimpleName: ClassCastException", "DEL SimpleType: Vector", "DEL SimpleName: basePath", "DEL SimpleName: Object", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleType: String", "DEL TextElement:  The value of the resource as an integer.", "DEL SimpleType: PropertiesTokenizer", "DEL Javadoc", "DEL NullLiteral", "DEL NumberLiteral: 1", "DEL SimpleName: map", "DEL MethodInvocation", "DEL SimpleName: buf", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SimpleName: NoSuchElementException", "DEL QualifiedName: java.util.Map.Entry", "DEL SimpleName: token", "DEL Modifier: final", "DEL SimpleName: value", "DEL SimpleName: escape", "DEL SingleVariableDeclaration", "DEL TextElement: Get next token.", "DEL ThrowStatement", "DEL TextElement: <p><pre>", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: key", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL TextElement: to the configuration entry. For example, if", "DEL InfixExpression: ==", "DEL TagElement: @return", "DEL ClassInstanceCreation", "DEL TextElement:   the filename to load", "DEL SimpleName: trim", "DEL Block", "DEL ParameterizedType: Enumeration<String>", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Javadoc", "DEL TextElement:  if one of the tokens is", "DEL SimpleName: indexOf", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL TextElement: # This is the simplest property", "DEL SimpleName: i", "DEL MethodDeclaration", "DEL SimpleType: List", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL SimpleType: String", "DEL SimpleType: FileInputStream", "DEL SimpleName: Object", "DEL Modifier: public", "DEL SimpleName: value", "DEL SimpleName: String", "DEL SimpleName: getShort", "DEL TextElement: Creates an empty extended properties object.", "DEL SimpleName: valueOf", "DEL PrimitiveType: char", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: Double", "DEL SimpleName: clearProperty", "DEL TextElement: </li>", "DEL StringLiteral: \"\\\\\"", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL ClassInstanceCreation", "DEL TextElement:  The configuration key.", "DEL Modifier: public", "DEL IfStatement", "DEL TextElement:   the decoded object to store", "DEL SimpleName: key", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: getVector", "DEL TagElement: @param", "DEL SimpleType: String", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: values", "DEL SimpleName: Byte", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL InfixExpression: &&", "DEL SimpleName: PropertiesTokenizer", "DEL PrimitiveType: boolean", "DEL IfStatement", "DEL SimpleName: in", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL Modifier: protected", "DEL Modifier: static", "DEL CharacterLiteral: '\\''", "DEL TagElement", "DEL SimpleName: exists", "DEL MethodInvocation", "DEL SimpleType: List", "DEL SimpleName: getStringArray", "DEL SimpleName: key", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL TagElement: @throws", "DEL TagElement: @param", "DEL TextElement:  The configuration key.", "DEL Javadoc", "DEL SimpleName: c", "DEL NullLiteral", "DEL SimpleName: put", "DEL SimpleName: equalSign", "DEL CastExpression", "DEL SimpleName: String", "DEL FieldDeclaration", "DEL CastExpression", "DEL SimpleName: result", "DEL VariableDeclarationStatement", "DEL SimpleName: ClassCastException", "DEL InfixExpression: !=", "DEL CharacterLiteral: '\\''", "DEL SimpleName: key", "DEL TagElement", "DEL SimpleName: DELIMITER", "DEL TextElement: by the key has not a valid number format.", "DEL SimpleType: Iterator", "DEL SimpleName: e", "DEL VariableDeclarationStatement", "DEL ForStatement", "DEL SimpleName: base", "DEL SimpleName: defaults", "DEL SimpleType: List", "DEL SimpleName: buffer", "DEL CharacterLiteral: '\\''", "DEL SimpleName: validSubset", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL Dimension", "DEL SimpleName: List", "DEL SimpleName: b", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL SimpleType: InputStream", "DEL TextElement:  an Iterator of keys that match the prefix", "DEL SimpleName: defaults", "DEL TextElement: by the key has not a valid number format.", "DEL SimpleName: getDouble", "DEL SimpleName: i", "DEL TagElement: @param", "DEL TagElement", "DEL SimpleName: s", "DEL TextElement:   the key to add", "DEL TextElement: Get a list of properties associated with the given", "DEL SimpleName: key", "DEL NumberLiteral: 1", "DEL SimpleName: defaultValue", "DEL SimpleName: f", "DEL NumberLiteral: 1", "DEL SimpleName: Object", "DEL SimpleType: String", "DEL SimpleName: value", "DEL MethodInvocation", "DEL TagElement: @throws", "DEL SimpleName: obj", "DEL InfixExpression: -", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL SimpleType: PrintWriter", "DEL SimpleName: String", "DEL SimpleName: String", "DEL ClassInstanceCreation", "DEL SimpleType: StringBuilder", "DEL NumberLiteral: 0", "DEL Block", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL Block", "DEL Modifier: final", "DEL SimpleName: defaultValue", "DEL SimpleName: key", "DEL TextElement: Adds a decoded property to the map w/o checking for commas - used", "DEL Assignment: =", "DEL SimpleName: reader", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL TextElement: format, default value otherwise.", "DEL SimpleName: s", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: buf", "DEL ExpressionStatement", "DEL TagElement: @return", "DEL MethodInvocation", "DEL SimpleType: NoSuchElementException", "DEL PrimitiveType: void", "DEL Modifier: final", "DEL SimpleName: ClassCastException", "DEL ReturnStatement", "DEL SimpleName: OutputStream", "DEL SimpleType: ArrayList", "DEL Block", "DEL SimpleType: String", "DEL TagElement: @param", "DEL Modifier: final", "DEL PrimitiveType: void", "DEL SimpleName: f", "DEL TextElement: repository that match the specified prefix.", "DEL SimpleName: key", "DEL SimpleName: begin", "DEL SimpleName: key", "DEL Modifier: final", "DEL SimpleType: Vector"]}]}}, {"ExtendedProperties_diff": {"operations": ["Delete QualifiedName: org.apache.commons.collections(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.io.File(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.io.FileInputStream(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.io.IOException(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.io.InputStream(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.io.InputStreamReader(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.io.LineNumberReader(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.io.OutputStream(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.io.PrintWriter(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: java.io.Reader(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: java.io.UnsupportedEncodingException(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: java.util.ArrayList(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: java.util.Enumeration(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: java.util.Hashtable(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: java.util.Iterator(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: java.util.List(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: java.util.Locale(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: java.util.Map(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: java.util.NoSuchElementException(36)", "Delete ImportDeclaration(37)", "Delete QualifiedName: java.util.Properties(38)", "Delete ImportDeclaration(39)", "Delete QualifiedName: java.util.StringTokenizer(40)", "Delete ImportDeclaration(41)", "Delete QualifiedName: java.util.Vector(42)", "Delete ImportDeclaration(43)", "Delete TextElement: This class extends normal Java properties by adding the possibility(44)", "Delete TextElement: to use the same key many times concatenating the value strings(45)", "Delete TextElement: instead of overwriting them.(46)", "Delete TextElement: <p>(47)", "Delete TextElement: <b>Please consider using the(48)", "Delete TextElement:  org.apache.commons.configuration.PropertiesConfiguration(49)", "Delete TagElement: @code(50)", "Delete TextElement:  class in(51)", "Delete TextElement: <a href=\"http://commons.apache.org/configuration\">Commons Configuration</a>.(52)", "Delete TextElement: It's an evolution of <code>ExtendedProperties</code> supporting more(53)", "Delete TextElement: features like automatic reloading, advanced interpolation, more type(54)", "Delete TextElement: conversions, changes notifications and file layout preservation.</b>(55)", "Delete TextElement: <p>(56)", "Delete TextElement: The Extended Properties syntax is explained here:(57)", "Delete TextElement: <ul>(58)", "Delete TextElement: <li>(59)", "Delete TextElement: Each property has the syntax <code>key = value</code>(60)", "Delete TextElement: </li>(61)", "Delete TextElement: <li>(62)", "Delete TextElement: The <i>key</i> may use any character but the equal sign '='.(63)", "Delete TextElement: </li>(64)", "Delete TextElement: <li>(65)", "Delete TextElement: <i>value</i> may be separated on different lines if a backslash(66)", "Delete TextElement: is placed at the end of the line that continues below.(67)", "Delete TextElement: </li>(68)", "Delete TextElement: <li>(69)", "Delete TextElement: If <i>value</i> is a list of strings, each token is separated(70)", "Delete TextElement: by a comma ','.(71)", "Delete TextElement: </li>(72)", "Delete TextElement: <li>(73)", "Delete TextElement: Commas in each token are escaped placing a backslash right before(74)", "Delete TextElement: the comma.(75)", "Delete TextElement: </li>(76)", "Delete TextElement: <li>(77)", "Delete TextElement: Backslashes are escaped by using two consecutive backslashes i.e. \\\\(78)", "Delete TextElement: </li>(79)", "Delete TextElement: <li>(80)", "Delete TextElement: If a <i>key</i> is used more than once, the values are appended(81)", "Delete TextElement: as if they were on the same line separated with commas.(82)", "Delete TextElement: </li>(83)", "Delete TextElement: <li>(84)", "Delete TextElement: Blank lines and lines starting with character '#' are skipped.(85)", "Delete TextElement: </li>(86)", "Delete TextElement: <li>(87)", "Delete TextElement: If a property is named \"include\" (or whatever is defined by(88)", "Delete TextElement: setInclude() and getInclude() and the value of that property is(89)", "Delete TextElement: the full path to a file on disk, that file will be included into(90)", "Delete TextElement: the ConfigurationsRepository. You can also pull in files relative(91)", "Delete TextElement: to the parent configuration file. So if you have something(92)", "Delete TextElement: like the following:(93)", "Delete TextElement: include = additional.properties(94)", "Delete TextElement: Then \"additional.properties\" is expected to be in the same(95)", "Delete TextElement: directory as the parent configuration file.(96)", "Delete TextElement: Duplicate name values will be replaced, so be careful.(97)", "Delete TextElement: </li>(98)", "Delete TextElement: </ul>(99)", "Delete TextElement: <p>Here is an example of a valid extended properties file:(100)", "Delete TextElement: <p><pre>(101)", "Delete TextElement: # lines starting with # are comments(102)", "Delete TextElement: # This is the simplest property(103)", "Delete TextElement: key = value(104)", "Delete TextElement: # A long property may be separated on multiple lines(105)", "Delete TextElement: longvalue = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \\(106)", "Delete TextElement: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(107)", "Delete TextElement: # This is a property with many tokens(108)", "Delete TextElement: tokens_on_a_line = first token, second token(109)", "Delete TextElement: # This sequence generates exactly the same result(110)", "Delete TextElement: tokens_on_multiple_lines = first token(111)", "Delete TextElement: tokens_on_multiple_lines = second token(112)", "Delete TextElement: # commas may be escaped in tokens(113)", "Delete TextElement: commas.escaped = Hi\\, what'up?(114)", "Delete TextElement: </pre>(115)", "Delete TextElement: <p><b>NOTE</b>: this class has <b>not</b> been written for(116)", "Delete TextElement: performance nor low memory usage.  In fact, it's way slower than it(117)", "Delete TextElement: could be and generates too much memory garbage.  But since(118)", "Delete TextElement: performance is not an issue during initialization (and there is not(119)", "Delete TextElement: much time to improve it), I wrote it this way.  If you don't like(120)", "Delete TextElement: it, go ahead and tune it up!(121)", "Delete TagElement(122)", "Delete TextElement:  1.0(123)", "Delete TagElement: @since(124)", "Delete TextElement:  $Id$(125)", "Delete TagElement: @version(126)", "Delete Javadoc(127)", "Delete Modifier: public(128)", "Delete SimpleName: ExtendedProperties(129)", "Delete SimpleName: Hashtable(130)", "Delete SimpleType: Hashtable(131)", "Delete SimpleName: String(132)", "Delete SimpleType: String(133)", "Delete SimpleName: Object(134)", "Delete SimpleType: Object(135)", "Delete ParameterizedType: Hashtable<String,Object>(136)", "Delete Modifier: private(137)", "Delete Modifier: static(138)", "Delete Modifier: final(139)", "Delete PrimitiveType: long(140)", "Delete SimpleName: serialVersionUID(141)", "Delete NumberLiteral: 4064305575636043822L(142)", "Delete PrefixExpression: -(143)", "Delete VariableDeclarationFragment(144)", "Delete FieldDeclaration(145)", "Delete TextElement: Default configurations repository.(146)", "Delete TagElement(147)", "Delete Javadoc(148)", "Delete Modifier: private(149)", "Delete SimpleName: ExtendedProperties(150)", "Delete SimpleType: ExtendedProperties(151)", "Delete SimpleName: defaults(152)", "Delete VariableDeclarationFragment(153)", "Delete FieldDeclaration(154)", "Delete TextElement: The file connected to this repository (holding comments and such).(155)", "Delete TagElement(156)", "Delete TagElement: @serial(157)", "Delete Javadoc(158)", "Delete Modifier: protected(159)", "Delete SimpleName: String(160)", "Delete SimpleType: String(161)", "Delete SimpleName: file(162)", "Delete VariableDeclarationFragment(163)", "Delete FieldDeclaration(164)", "Delete TextElement: Base path of the configuration file used to create(165)", "Delete TextElement: this ExtendedProperties object.(166)", "Delete TagElement(167)", "Delete Javadoc(168)", "Delete Modifier: protected(169)", "Delete SimpleName: String(170)", "Delete SimpleType: String(171)", "Delete SimpleName: basePath(172)", "Delete VariableDeclarationFragment(173)", "Delete FieldDeclaration(174)", "Delete TextElement: File separator.(175)", "Delete TagElement(176)", "Delete Javadoc(177)", "Delete Modifier: protected(178)", "Delete SimpleName: String(179)", "Delete SimpleType: String(180)", "Delete SimpleName: fileSeparator(181)", "Delete SimpleName: System(182)", "Delete SimpleName: getProperty(183)", "Delete StringLiteral: \"file.separator\"(184)", "Delete MethodInvocation(185)", "Delete VariableDeclarationFragment(186)", "Delete FieldDeclaration(187)", "Delete TextElement: Has this configuration been initialized.(188)", "Delete TagElement(189)", "Delete Javadoc(190)", "Delete Modifier: protected(191)", "Delete PrimitiveType: boolean(192)", "Delete SimpleName: isInitialized(193)", "Delete BooleanLiteral: false(194)", "Delete VariableDeclarationFragment(195)", "Delete FieldDeclaration(196)", "Delete TextElement: This is the name of the property that can point to other(197)", "Delete TextElement: properties file for including other properties files.(198)", "Delete TagElement(199)", "Delete Javadoc(200)", "Delete Modifier: private(201)", "Delete SimpleName: String(202)", "Delete SimpleType: String(203)", "Delete SimpleName: includePropertyName(204)", "Delete StringLiteral: \"include\"(205)", "Delete VariableDeclarationFragment(206)", "Delete FieldDeclaration(207)", "Delete TextElement: These are the keys in the order they listed(208)", "Delete TextElement: in the configuration file. This is useful when(209)", "Delete TextElement: you wish to perform operations with configuration(210)", "Delete TextElement: information in a particular order.(211)", "Delete TagElement(212)", "Delete Javadoc(213)", "Delete Modifier: protected(214)", "Delete SimpleName: ArrayList(215)", "Delete SimpleType: ArrayList(216)", "Delete SimpleName: String(217)", "Delete SimpleType: String(218)", "Delete ParameterizedType: ArrayList<String>(219)", "Delete SimpleName: keysAsListed(220)", "Delete SimpleName: ArrayList(221)", "Delete SimpleType: ArrayList(222)", "Delete SimpleName: String(223)", "Delete SimpleType: String(224)", "Delete ParameterizedType: ArrayList<String>(225)", "Delete ClassInstanceCreation(226)", "Delete VariableDeclarationFragment(227)", "Delete FieldDeclaration(228)", "Delete Modifier: protected(229)", "Delete Modifier: final(230)", "Delete Modifier: static(231)", "Delete SimpleName: String(232)", "Delete SimpleType: String(233)", "Delete SimpleName: START_TOKEN(234)", "Delete StringLiteral: \"${\"(235)", "Delete VariableDeclarationFragment(236)", "Delete FieldDeclaration(237)", "Delete Modifier: protected(238)", "Delete Modifier: final(239)", "Delete Modifier: static(240)", "Delete SimpleName: String(241)", "Delete SimpleType: String(242)", "Delete SimpleName: END_TOKEN(243)", "Delete StringLiteral: \"}\"(244)", "Delete VariableDeclarationFragment(245)", "Delete FieldDeclaration(246)", "Delete TextElement: Interpolate key names to handle ${key} stuff(247)", "Delete TagElement(248)", "Delete SimpleName: base(249)", "Delete TextElement:  string to interpolate(250)", "Delete TagElement: @param(251)", "Delete TextElement:  returns the key name with the ${key} substituted(252)", "Delete TagElement: @return(253)", "Delete Javadoc(254)", "Delete Modifier: protected(255)", "Delete SimpleName: String(256)", "Delete SimpleType: String(257)", "Delete SimpleName: interpolate(258)", "Delete Modifier: final(259)", "Delete SimpleName: String(260)", "Delete SimpleType: String(261)", "Delete SimpleName: base(262)", "Delete SingleVariableDeclaration(263)", "Delete SimpleName: interpolateHelper(264)", "Delete SimpleName: base(265)", "Delete NullLiteral(266)", "Delete MethodInvocation(267)", "Delete ReturnStatement(268)", "Delete Block(269)", "Delete MethodDeclaration(270)", "Delete TextElement: Recursive handler for multiple levels of interpolation.(271)", "Delete TextElement: When called the first time, priorVariables should be null.(272)", "Delete TagElement(273)", "Delete SimpleName: base(274)", "Delete TextElement:  string with the ${key} variables(275)", "Delete TagElement: @param(276)", "Delete SimpleName: priorVariables(277)", "Delete TextElement:  serves two purposes: to allow checking for(278)", "Delete TextElement: loops, and creating a meaningful exception message should a loop(279)", "Delete TextElement: occur.  It's 0'th element will be set to the value of base from(280)", "Delete TextElement: the first call.  All subsequent interpolated variables are added(281)", "Delete TextElement: afterward.(282)", "Delete TagElement: @param(283)", "Delete TextElement:  the string with the interpolation taken care of(284)", "Delete TagElement: @return(285)", "Delete Javadoc(286)", "Delete Modifier: protected(287)", "Delete SimpleName: String(288)", "Delete SimpleType: String(289)", "Delete SimpleName: interpolateHelper(290)", "Delete Modifier: final(291)", "Delete SimpleName: String(292)", "Delete SimpleType: String(293)", "Delete SimpleName: base(294)", "Delete SingleVariableDeclaration(295)", "Delete SimpleName: List(296)", "Delete SimpleType: List(297)", "Delete SimpleName: String(298)", "Delete SimpleType: String(299)", "Delete ParameterizedType: List<String>(300)", "Delete SimpleName: priorVariables(301)", "Delete SingleVariableDeclaration(302)", "Delete SimpleName: base(303)", "Delete NullLiteral(304)", "Delete InfixExpression: ==(305)", "Delete NullLiteral(306)", "Delete ReturnStatement(307)", "Delete Block(308)", "Delete IfStatement(309)", "Delete SimpleName: priorVariables(310)", "Delete NullLiteral(311)", "Delete InfixExpression: ==(312)", "Delete SimpleName: priorVariables(313)", "Delete SimpleName: ArrayList(314)", "Delete SimpleType: ArrayList(315)", "Delete SimpleName: String(316)", "Delete SimpleType: String(317)", "Delete ParameterizedType: ArrayList<String>(318)", "Delete ClassInstanceCreation(319)", "Delete Assignment: =(320)", "Delete ExpressionStatement(321)", "Delete SimpleName: priorVariables(322)", "Delete SimpleName: add(323)", "Delete SimpleName: base(324)", "Delete MethodInvocation(325)", "Delete ExpressionStatement(326)", "Delete Block(327)", "Delete IfStatement(328)", "Delete PrimitiveType: int(329)", "Delete SimpleName: begin(330)", "Delete NumberLiteral: 1(331)", "Delete PrefixExpression: -(332)", "Delete VariableDeclarationFragment(333)", "Delete VariableDeclarationStatement(334)", "Delete PrimitiveType: int(335)", "Delete SimpleName: end(336)", "Delete NumberLiteral: 1(337)", "Delete PrefixExpression: -(338)", "Delete VariableDeclarationFragment(339)", "Delete VariableDeclarationStatement(340)", "Delete PrimitiveType: int(341)", "Delete SimpleName: prec(342)", "Delete NumberLiteral: 0(343)", "Delete SimpleName: END_TOKEN(344)", "Delete SimpleName: length(345)", "Delete MethodInvocation(346)", "Delete InfixExpression: -(347)", "Delete VariableDeclarationFragment(348)", "Delete VariableDeclarationStatement(349)", "Delete SimpleName: String(350)", "Delete SimpleType: String(351)", "Delete SimpleName: variable(352)", "Delete NullLiteral(353)", "Delete VariableDeclarationFragment(354)", "Delete VariableDeclarationStatement(355)", "Delete Modifier: final(356)", "Delete SimpleName: StringBuilder(357)", "Delete SimpleType: StringBuilder(358)", "Delete SimpleName: result(359)", "Delete SimpleName: StringBuilder(360)", "Delete SimpleType: StringBuilder(361)", "Delete ClassInstanceCreation(362)", "Delete VariableDeclarationFragment(363)", "Delete VariableDeclarationStatement(364)", "Delete SimpleName: begin(365)", "Delete SimpleName: base(366)", "Delete SimpleName: indexOf(367)", "Delete SimpleName: START_TOKEN(368)", "Delete SimpleName: prec(369)", "Delete SimpleName: END_TOKEN(370)", "Delete SimpleName: length(371)", "Delete MethodInvocation(372)", "Delete InfixExpression: +(373)", "Delete MethodInvocation(374)", "Delete Assignment: =(375)", "Delete ParenthesizedExpression(376)", "Delete NumberLiteral: 1(377)", "Delete PrefixExpression: -(378)", "Delete InfixExpression: >(379)", "Delete SimpleName: end(380)", "Delete SimpleName: base(381)", "Delete SimpleName: indexOf(382)", "Delete SimpleName: END_TOKEN(383)", "Delete SimpleName: begin(384)", "Delete MethodInvocation(385)", "Delete Assignment: =(386)", "Delete ParenthesizedExpression(387)", "Delete NumberLiteral: 1(388)", "Delete PrefixExpression: -(389)", "Delete InfixExpression: >(390)", "Delete InfixExpression: &&(391)", "Delete SimpleName: result(392)", "Delete SimpleName: append(393)", "Delete SimpleName: base(394)", "Delete SimpleName: substring(395)", "Delete SimpleName: prec(396)", "Delete SimpleName: END_TOKEN(397)", "Delete SimpleName: length(398)", "Delete MethodInvocation(399)", "Delete InfixExpression: +(400)", "Delete SimpleName: begin(401)", "Delete MethodInvocation(402)", "Delete MethodInvocation(403)", "Delete ExpressionStatement(404)", "Delete SimpleName: variable(405)", "Delete SimpleName: base(406)", "Delete SimpleName: substring(407)", "Delete SimpleName: begin(408)", "Delete SimpleName: START_TOKEN(409)", "Delete SimpleName: length(410)", "Delete MethodInvocation(411)", "Delete InfixExpression: +(412)", "Delete SimpleName: end(413)", "Delete MethodInvocation(414)", "Delete Assignment: =(415)", "Delete ExpressionStatement(416)", "Delete SimpleName: priorVariables(417)", "Delete SimpleName: contains(418)", "Delete SimpleName: variable(419)", "Delete MethodInvocation(420)", "Delete Modifier: final(421)", "Delete SimpleName: String(422)", "Delete SimpleType: String(423)", "Delete SimpleName: initialBase(424)", "Delete SimpleName: priorVariables(425)", "Delete SimpleName: remove(426)", "Delete NumberLiteral: 0(427)", "Delete MethodInvocation(428)", "Delete SimpleName: toString(429)", "Delete MethodInvocation(430)", "Delete VariableDeclarationFragment(431)", "Delete VariableDeclarationStatement(432)", "Delete SimpleName: priorVariables(433)", "Delete SimpleName: add(434)", "Delete SimpleName: variable(435)", "Delete MethodInvocation(436)", "Delete ExpressionStatement(437)", "Delete Modifier: final(438)", "Delete SimpleName: StringBuilder(439)", "Delete SimpleType: StringBuilder(440)", "Delete SimpleName: priorVariableSb(441)", "Delete SimpleName: StringBuilder(442)", "Delete SimpleType: StringBuilder(443)", "Delete ClassInstanceCreation(444)", "Delete VariableDeclarationFragment(445)", "Delete VariableDeclarationStatement(446)", "Delete Modifier: final(447)", "Delete SimpleName: Iterator(448)", "Delete SimpleType: Iterator(449)", "Delete WildcardType: ?(450)", "Delete ParameterizedType: Iterator<?>(451)", "Delete SimpleName: it(452)", "Delete SimpleName: priorVariables(453)", "Delete SimpleName: iterator(454)", "Delete MethodInvocation(455)", "Delete VariableDeclarationFragment(456)", "Delete VariableDeclarationExpression(457)", "Delete SimpleName: it(458)", "Delete SimpleName: hasNext(459)", "Delete MethodInvocation(460)", "Delete SimpleName: priorVariableSb(461)", "Delete SimpleName: append(462)", "Delete SimpleName: it(463)", "Delete SimpleName: next(464)", "Delete MethodInvocation(465)", "Delete MethodInvocation(466)", "Delete ExpressionStatement(467)", "Delete SimpleName: it(468)", "Delete SimpleName: hasNext(469)", "Delete MethodInvocation(470)", "Delete SimpleName: priorVariableSb(471)", "Delete SimpleName: append(472)", "Delete StringLiteral: \"->\"(473)", "Delete MethodInvocation(474)", "Delete ExpressionStatement(475)", "Delete Block(476)", "Delete IfStatement(477)", "Delete Block(478)", "Delete ForStatement(479)", "Delete SimpleName: IllegalStateException(480)", "Delete SimpleType: IllegalStateException(481)", "Delete StringLiteral: \"infinite loop in property interpolation of \"(482)", "Delete SimpleName: initialBase(483)", "Delete StringLiteral: \": \"(484)", "Delete SimpleName: priorVariableSb(485)", "Delete InfixExpression: +(486)", "Delete ClassInstanceCreation(487)", "Delete ThrowStatement(488)", "Delete Block(489)", "Delete SimpleName: priorVariables(490)", "Delete SimpleName: add(491)", "Delete SimpleName: variable(492)", "Delete MethodInvocation(493)", "Delete ExpressionStatement(494)", "Delete Block(495)", "Delete IfStatement(496)", "Delete Modifier: final(497)", "Delete SimpleName: Object(498)", "Delete SimpleType: Object(499)", "Delete SimpleName: value(500)", "Delete SimpleName: getProperty(501)", "Delete SimpleName: variable(502)", "Delete MethodInvocation(503)", "Delete VariableDeclarationFragment(504)", "Delete VariableDeclarationStatement(505)", "Delete SimpleName: value(506)", "Delete NullLiteral(507)", "Delete InfixExpression: !=(508)", "Delete SimpleName: result(509)", "Delete SimpleName: append(510)", "Delete SimpleName: interpolateHelper(511)", "Delete SimpleName: value(512)", "Delete SimpleName: toString(513)", "Delete MethodInvocation(514)", "Delete SimpleName: priorVariables(515)", "Delete MethodInvocation(516)", "Delete MethodInvocation(517)", "Delete ExpressionStatement(518)", "Delete SimpleName: priorVariables(519)", "Delete SimpleName: remove(520)", "Delete SimpleName: priorVariables(521)", "Delete SimpleName: size(522)", "Delete MethodInvocation(523)", "Delete NumberLiteral: 1(524)", "Delete InfixExpression: -(525)", "Delete MethodInvocation(526)", "Delete ExpressionStatement(527)", "Delete Block(528)", "Delete SimpleName: defaults(529)", "Delete NullLiteral(530)", "Delete InfixExpression: !=(531)", "Delete SimpleName: defaults(532)", "Delete SimpleName: getString(533)", "Delete SimpleName: variable(534)", "Delete NullLiteral(535)", "Delete MethodInvocation(536)", "Delete NullLiteral(537)", "Delete InfixExpression: !=(538)", "Delete InfixExpression: &&(539)", "Delete SimpleName: result(540)", "Delete SimpleName: append(541)", "Delete SimpleName: defaults(542)", "Delete SimpleName: getString(543)", "Delete SimpleName: variable(544)", "Delete MethodInvocation(545)", "Delete MethodInvocation(546)", "Delete ExpressionStatement(547)", "Delete Block(548)", "Delete SimpleName: result(549)", "Delete SimpleName: append(550)", "Delete SimpleName: START_TOKEN(551)", "Delete MethodInvocation(552)", "Delete SimpleName: append(553)", "Delete SimpleName: variable(554)", "Delete MethodInvocation(555)", "Delete SimpleName: append(556)", "Delete SimpleName: END_TOKEN(557)", "Delete MethodInvocation(558)", "Delete ExpressionStatement(559)", "Delete Block(560)", "Delete IfStatement(561)", "Delete IfStatement(562)", "Delete SimpleName: prec(563)", "Delete SimpleName: end(564)", "Delete Assignment: =(565)", "Delete ExpressionStatement(566)", "Delete Block(567)", "Delete WhileStatement(568)", "Delete SimpleName: result(569)", "Delete SimpleName: append(570)", "Delete SimpleName: base(571)", "Delete SimpleName: substring(572)", "Delete SimpleName: prec(573)", "Delete SimpleName: END_TOKEN(574)", "Delete SimpleName: length(575)", "Delete MethodInvocation(576)", "Delete InfixExpression: +(577)", "Delete SimpleName: base(578)", "Delete SimpleName: length(579)", "Delete MethodInvocation(580)", "Delete MethodInvocation(581)", "Delete MethodInvocation(582)", "Delete ExpressionStatement(583)", "Delete SimpleName: result(584)", "Delete SimpleName: toString(585)", "Delete MethodInvocation(586)", "Delete ReturnStatement(587)", "Delete Block(588)", "Delete MethodDeclaration(589)", "Delete TextElement: Inserts a backslash before every comma and backslash. (590)", "Delete TagElement(591)", "Delete Javadoc(592)", "Delete Modifier: private(593)", "Delete Modifier: static(594)", "Delete SimpleName: String(595)", "Delete SimpleType: String(596)", "Delete SimpleName: escape(597)", "Delete Modifier: final(598)", "Delete SimpleName: String(599)", "Delete SimpleType: String(600)", "Delete SimpleName: s(601)", "Delete SingleVariableDeclaration(602)", "Delete Modifier: final(603)", "Delete SimpleName: StringBuilder(604)", "Delete SimpleType: StringBuilder(605)", "Delete SimpleName: buf(606)", "Delete SimpleName: StringBuilder(607)", "Delete SimpleType: StringBuilder(608)", "Delete SimpleName: s(609)", "Delete ClassInstanceCreation(610)", "Delete VariableDeclarationFragment(611)", "Delete VariableDeclarationStatement(612)", "Delete PrimitiveType: int(613)", "Delete SimpleName: i(614)", "Delete NumberLiteral: 0(615)", "Delete VariableDeclarationFragment(616)", "Delete VariableDeclarationExpression(617)", "Delete SimpleName: i(618)", "Delete SimpleName: buf(619)", "Delete SimpleName: length(620)", "Delete MethodInvocation(621)", "Delete InfixExpression: <(622)", "Delete SimpleName: i(623)", "Delete PostfixExpression: ++(624)", "Delete Modifier: final(625)", "Delete PrimitiveType: char(626)", "Delete SimpleName: c(627)", "Delete SimpleName: buf(628)", "Delete SimpleName: charAt(629)", "Delete SimpleName: i(630)", "Delete MethodInvocation(631)", "Delete VariableDeclarationFragment(632)", "Delete VariableDeclarationStatement(633)", "Delete SimpleName: c(634)", "Delete CharacterLiteral: ','(635)", "Delete InfixExpression: ==(636)", "Delete SimpleName: c(637)", "Delete CharacterLiteral: '\\\\'(638)", "Delete InfixExpression: ==(639)", "Delete InfixExpression: ||(640)", "Delete SimpleName: buf(641)", "Delete SimpleName: insert(642)", "Delete SimpleName: i(643)", "Delete CharacterLiteral: '\\\\'(644)", "Delete MethodInvocation(645)", "Delete ExpressionStatement(646)", "Delete SimpleName: i(647)", "Delete PostfixExpression: ++(648)", "Delete ExpressionStatement(649)", "Delete Block(650)", "Delete IfStatement(651)", "Delete Block(652)", "Delete ForStatement(653)", "Delete SimpleName: buf(654)", "Delete SimpleName: toString(655)", "Delete MethodInvocation(656)", "Delete ReturnStatement(657)", "Delete Block(658)", "Delete MethodDeclaration(659)", "Delete TextElement: Removes a backslash from every pair of backslashes. (660)", "Delete TagElement(661)", "Delete Javadoc(662)", "Delete Modifier: private(663)", "Delete Modifier: static(664)", "Delete SimpleName: String(665)", "Delete SimpleType: String(666)", "Delete SimpleName: unescape(667)", "Delete Modifier: final(668)", "Delete SimpleName: String(669)", "Delete SimpleType: String(670)", "Delete SimpleName: s(671)", "Delete SingleVariableDeclaration(672)", "Delete Modifier: final(673)", "Delete SimpleName: StringBuilder(674)", "Delete SimpleType: StringBuilder(675)", "Delete SimpleName: buf(676)", "Delete SimpleName: StringBuilder(677)", "Delete SimpleType: StringBuilder(678)", "Delete SimpleName: s(679)", "Delete ClassInstanceCreation(680)", "Delete VariableDeclarationFragment(681)", "Delete VariableDeclarationStatement(682)", "Delete PrimitiveType: int(683)", "Delete SimpleName: i(684)", "Delete NumberLiteral: 0(685)", "Delete VariableDeclarationFragment(686)", "Delete VariableDeclarationExpression(687)", "Delete SimpleName: i(688)", "Delete SimpleName: buf(689)", "Delete SimpleName: length(690)", "Delete MethodInvocation(691)", "Delete NumberLiteral: 1(692)", "Delete InfixExpression: -(693)", "Delete InfixExpression: <(694)", "Delete SimpleName: i(695)", "Delete PostfixExpression: ++(696)", "Delete Modifier: final(697)", "Delete PrimitiveType: char(698)", "Delete SimpleName: c1(699)", "Delete SimpleName: buf(700)", "Delete SimpleName: charAt(701)", "Delete SimpleName: i(702)", "Delete MethodInvocation(703)", "Delete VariableDeclarationFragment(704)", "Delete VariableDeclarationStatement(705)", "Delete Modifier: final(706)", "Delete PrimitiveType: char(707)", "Delete SimpleName: c2(708)", "Delete SimpleName: buf(709)", "Delete SimpleName: charAt(710)", "Delete SimpleName: i(711)", "Delete NumberLiteral: 1(712)", "Delete InfixExpression: +(713)", "Delete MethodInvocation(714)", "Delete VariableDeclarationFragment(715)", "Delete VariableDeclarationStatement(716)", "Delete SimpleName: c1(717)", "Delete CharacterLiteral: '\\\\'(718)", "Delete InfixExpression: ==(719)", "Delete SimpleName: c2(720)", "Delete CharacterLiteral: '\\\\'(721)", "Delete InfixExpression: ==(722)", "Delete InfixExpression: &&(723)", "Delete SimpleName: buf(724)", "Delete SimpleName: deleteCharAt(725)", "Delete SimpleName: i(726)", "Delete MethodInvocation(727)", "Delete ExpressionStatement(728)", "Delete Block(729)", "Delete IfStatement(730)", "Delete Block(731)", "Delete ForStatement(732)", "Delete SimpleName: buf(733)", "Delete SimpleName: toString(734)", "Delete MethodInvocation(735)", "Delete ReturnStatement(736)", "Delete Block(737)", "Delete MethodDeclaration(738)", "Delete TextElement: Counts the number of successive times 'ch' appears in the(739)", "Delete TextElement: 'line' before the position indicated by the 'index'.(740)", "Delete TagElement(741)", "Delete Javadoc(742)", "Delete Modifier: private(743)", "Delete Modifier: static(744)", "Delete PrimitiveType: int(745)", "Delete SimpleName: countPreceding(746)", "Delete Modifier: final(747)", "Delete SimpleName: String(748)", "Delete SimpleType: String(749)", "Delete SimpleName: line(750)", "Delete SingleVariableDeclaration(751)", "Delete Modifier: final(752)", "Delete PrimitiveType: int(753)", "Delete SimpleName: index(754)", "Delete SingleVariableDeclaration(755)", "Delete Modifier: final(756)", "Delete PrimitiveType: char(757)", "Delete SimpleName: ch(758)", "Delete SingleVariableDeclaration(759)", "Delete PrimitiveType: int(760)", "Delete SimpleName: i(761)", "Delete VariableDeclarationFragment(762)", "Delete VariableDeclarationStatement(763)", "Delete SimpleName: i(764)", "Delete SimpleName: index(765)", "Delete NumberLiteral: 1(766)", "Delete InfixExpression: -(767)", "Delete Assignment: =(768)", "Delete SimpleName: i(769)", "Delete NumberLiteral: 0(770)", "Delete InfixExpression: >=(771)", "Delete SimpleName: i(772)", "Delete PostfixExpression: --(773)", "Delete SimpleName: line(774)", "Delete SimpleName: charAt(775)", "Delete SimpleName: i(776)", "Delete MethodInvocation(777)", "Delete SimpleName: ch(778)", "Delete InfixExpression: !=(779)", "Delete BreakStatement(780)", "Delete Block(781)", "Delete IfStatement(782)", "Delete Block(783)", "Delete ForStatement(784)", "Delete SimpleName: index(785)", "Delete NumberLiteral: 1(786)", "Delete SimpleName: i(787)", "Delete InfixExpression: -(788)", "Delete ReturnStatement(789)", "Delete Block(790)", "Delete MethodDeclaration(791)", "Delete TextElement: Checks if the line ends with odd number of backslashes (792)", "Delete TagElement(793)", "Delete Javadoc(794)", "Delete Modifier: private(795)", "Delete Modifier: static(796)", "Delete PrimitiveType: boolean(797)", "Delete SimpleName: endsWithSlash(798)", "Delete Modifier: final(799)", "Delete SimpleName: String(800)", "Delete SimpleType: String(801)", "Delete SimpleName: line(802)", "Delete SingleVariableDeclaration(803)", "Delete SimpleName: line(804)", "Delete SimpleName: endsWith(805)", "Delete StringLiteral: \"\\\\\"(806)", "Delete MethodInvocation(807)", "Delete PrefixExpression: !(808)", "Delete BooleanLiteral: false(809)", "Delete ReturnStatement(810)", "Delete Block(811)", "Delete IfStatement(812)", "Delete SimpleName: countPreceding(813)", "Delete SimpleName: line(814)", "Delete SimpleName: line(815)", "Delete SimpleName: length(816)", "Delete MethodInvocation(817)", "Delete NumberLiteral: 1(818)", "Delete InfixExpression: -(819)", "Delete CharacterLiteral: '\\\\'(820)", "Delete MethodInvocation(821)", "Delete NumberLiteral: 2(822)", "Delete InfixExpression: %(823)", "Delete NumberLiteral: 0(824)", "Delete InfixExpression: ==(825)", "Delete ReturnStatement(826)", "Delete Block(827)", "Delete MethodDeclaration(828)", "Delete TextElement: This class is used to read properties lines.  These lines do(829)", "Delete TextElement: not terminate with new-line chars but rather when there is no(830)", "Delete TextElement: backslash sign a the end of the line.  This is used to(831)", "Delete TextElement: concatenate multiple lines for readability.(832)", "Delete TagElement(833)", "Delete Javadoc(834)", "Delete Modifier: static(835)", "Delete SimpleName: PropertiesReader(836)", "Delete SimpleName: LineNumberReader(837)", "Delete SimpleType: LineNumberReader(838)", "Delete TextElement: Constructor.(839)", "Delete TagElement(840)", "Delete SimpleName: reader(841)", "Delete TextElement:  A Reader.(842)", "Delete TagElement: @param(843)", "Delete Javadoc(844)", "Delete Modifier: public(845)", "Delete SimpleName: PropertiesReader(846)", "Delete Modifier: final(847)", "Delete SimpleName: Reader(848)", "Delete SimpleType: Reader(849)", "Delete SimpleName: reader(850)", "Delete SingleVariableDeclaration(851)", "Delete SimpleName: reader(852)", "Delete SuperConstructorInvocation(853)", "Delete Block(854)", "Delete MethodDeclaration(855)", "Delete TextElement: Read a property.(856)", "Delete TagElement(857)", "Delete TextElement:  a String property(858)", "Delete TagElement: @return(859)", "Delete SimpleName: IOException(860)", "Delete TextElement:  if there is difficulty reading the source.(861)", "Delete TagElement: @throws(862)", "Delete Javadoc(863)", "Delete Modifier: public(864)", "Delete SimpleName: String(865)", "Delete SimpleType: String(866)", "Delete SimpleName: readProperty(867)", "Delete SimpleName: IOException(868)", "Delete SimpleType: IOException(869)", "Delete Modifier: final(870)", "Delete SimpleName: StringBuilder(871)", "Delete SimpleType: StringBuilder(872)", "Delete SimpleName: buffer(873)", "Delete SimpleName: StringBuilder(874)", "Delete SimpleType: StringBuilder(875)", "Delete ClassInstanceCreation(876)", "Delete VariableDeclarationFragment(877)", "Delete VariableDeclarationStatement(878)", "Delete SimpleName: String(879)", "Delete SimpleType: String(880)", "Delete SimpleName: line(881)", "Delete SimpleName: readLine(882)", "Delete MethodInvocation(883)", "Delete VariableDeclarationFragment(884)", "Delete VariableDeclarationStatement(885)", "Delete SimpleName: line(886)", "Delete NullLiteral(887)", "Delete InfixExpression: !=(888)", "Delete SimpleName: line(889)", "Delete SimpleName: line(890)", "Delete SimpleName: trim(891)", "Delete MethodInvocation(892)", "Delete Assignment: =(893)", "Delete ExpressionStatement(894)", "Delete SimpleName: line(895)", "Delete SimpleName: length(896)", "Delete MethodInvocation(897)", "Delete NumberLiteral: 0(898)", "Delete InfixExpression: !=(899)", "Delete SimpleName: line(900)", "Delete SimpleName: charAt(901)", "Delete NumberLiteral: 0(902)", "Delete MethodInvocation(903)", "Delete CharacterLiteral: '#'(904)", "Delete InfixExpression: !=(905)", "Delete InfixExpression: &&(906)", "Delete SimpleName: endsWithSlash(907)", "Delete SimpleName: line(908)", "Delete MethodInvocation(909)", "Delete SimpleName: line(910)", "Delete SimpleName: line(911)", "Delete SimpleName: substring(912)", "Delete NumberLiteral: 0(913)", "Delete SimpleName: line(914)", "Delete SimpleName: length(915)", "Delete MethodInvocation(916)", "Delete NumberLiteral: 1(917)", "Delete InfixExpression: -(918)", "Delete MethodInvocation(919)", "Delete Assignment: =(920)", "Delete ExpressionStatement(921)", "Delete SimpleName: buffer(922)", "Delete SimpleName: append(923)", "Delete SimpleName: line(924)", "Delete MethodInvocation(925)", "Delete ExpressionStatement(926)", "Delete Block(927)", "Delete SimpleName: buffer(928)", "Delete SimpleName: append(929)", "Delete SimpleName: line(930)", "Delete MethodInvocation(931)", "Delete ExpressionStatement(932)", "Delete SimpleName: buffer(933)", "Delete SimpleName: toString(934)", "Delete MethodInvocation(935)", "Delete ReturnStatement(936)", "Delete Block(937)", "Delete IfStatement(938)", "Delete Block(939)", "Delete IfStatement(940)", "Delete SimpleName: line(941)", "Delete SimpleName: readLine(942)", "Delete MethodInvocation(943)", "Delete Assignment: =(944)", "Delete ExpressionStatement(945)", "Delete Block(946)", "Delete WhileStatement(947)", "Delete NullLiteral(948)", "Delete ReturnStatement(949)", "Delete Block(950)", "Delete MethodDeclaration(951)", "Delete TypeDeclaration: class(952)", "Delete TextElement: This class divides into tokens a property value.  Token(953)", "Delete TextElement: separator is \",\" but commas into the property value are escaped(954)", "Delete TextElement: using the backslash in front.(955)", "Delete TagElement(956)", "Delete Javadoc(957)", "Delete Modifier: static(958)", "Delete SimpleName: PropertiesTokenizer(959)", "Delete SimpleName: StringTokenizer(960)", "Delete SimpleType: StringTokenizer(961)", "Delete TextElement: The property delimiter used while parsing (a comma).(962)", "Delete TagElement(963)", "Delete Javadoc(964)", "Delete Modifier: static(965)", "Delete Modifier: final(966)", "Delete SimpleName: String(967)", "Delete SimpleType: String(968)", "Delete SimpleName: DELIMITER(969)", "Delete StringLiteral: \",\"(970)", "Delete VariableDeclarationFragment(971)", "Delete FieldDeclaration(972)", "Delete TextElement: Constructor.(973)", "Delete TagElement(974)", "Delete SimpleName: string(975)", "Delete TextElement:  A String.(976)", "Delete TagElement: @param(977)", "Delete Javadoc(978)", "Delete Modifier: public(979)", "Delete SimpleName: PropertiesTokenizer(980)", "Delete Modifier: final(981)", "Delete SimpleName: String(982)", "Delete SimpleType: String(983)", "Delete SimpleName: string(984)", "Delete SingleVariableDeclaration(985)", "Delete SimpleName: string(986)", "Delete SimpleName: DELIMITER(987)", "Delete SuperConstructorInvocation(988)", "Delete Block(989)", "Delete MethodDeclaration(990)", "Delete TextElement: Check whether the object has more tokens.(991)", "Delete TagElement(992)", "Delete TextElement:  True if the object has more tokens.(993)", "Delete TagElement: @return(994)", "Delete Javadoc(995)", "Delete SimpleName: Override(996)", "Delete MarkerAnnotation(997)", "Delete Modifier: public(998)", "Delete PrimitiveType: boolean(999)", "Delete SimpleName: hasMoreTokens(1000)", "Delete SimpleName: hasMoreTokens(1001)", "Delete SuperMethodInvocation(1002)", "Delete ReturnStatement(1003)", "Delete Block(1004)", "Delete MethodDeclaration(1005)", "Delete TextElement: Get next token.(1006)", "Delete TagElement(1007)", "Delete TextElement:  A String.(1008)", "Delete TagElement: @return(1009)", "Delete Javadoc(1010)", "Delete SimpleName: Override(1011)", "Delete MarkerAnnotation(1012)", "Delete Modifier: public(1013)", "Delete SimpleName: String(1014)", "Delete SimpleType: String(1015)", "Delete SimpleName: nextToken(1016)", "Delete Modifier: final(1017)", "Delete SimpleName: StringBuilder(1018)", "Delete SimpleType: StringBuilder(1019)", "Delete SimpleName: buffer(1020)", "Delete SimpleName: StringBuilder(1021)", "Delete SimpleType: StringBuilder(1022)", "Delete ClassInstanceCreation(1023)", "Delete VariableDeclarationFragment(1024)", "Delete VariableDeclarationStatement(1025)", "Delete SimpleName: hasMoreTokens(1026)", "Delete MethodInvocation(1027)", "Delete Modifier: final(1028)", "Delete SimpleName: String(1029)", "Delete SimpleType: String(1030)", "Delete SimpleName: token(1031)", "Delete SimpleName: nextToken(1032)", "Delete SuperMethodInvocation(1033)", "Delete VariableDeclarationFragment(1034)", "Delete VariableDeclarationStatement(1035)", "Delete SimpleName: endsWithSlash(1036)", "Delete SimpleName: token(1037)", "Delete MethodInvocation(1038)", "Delete SimpleName: buffer(1039)", "Delete SimpleName: append(1040)", "Delete SimpleName: token(1041)", "Delete SimpleName: substring(1042)", "Delete NumberLiteral: 0(1043)", "Delete SimpleName: token(1044)", "Delete SimpleName: length(1045)", "Delete MethodInvocation(1046)", "Delete NumberLiteral: 1(1047)", "Delete InfixExpression: -(1048)", "Delete MethodInvocation(1049)", "Delete MethodInvocation(1050)", "Delete ExpressionStatement(1051)", "Delete SimpleName: buffer(1052)", "Delete SimpleName: append(1053)", "Delete SimpleName: DELIMITER(1054)", "Delete MethodInvocation(1055)", "Delete ExpressionStatement(1056)", "Delete Block(1057)", "Delete SimpleName: buffer(1058)", "Delete SimpleName: append(1059)", "Delete SimpleName: token(1060)", "Delete MethodInvocation(1061)", "Delete ExpressionStatement(1062)", "Delete BreakStatement(1063)", "Delete Block(1064)", "Delete IfStatement(1065)", "Delete Block(1066)", "Delete WhileStatement(1067)", "Delete SimpleName: buffer(1068)", "Delete SimpleName: toString(1069)", "Delete MethodInvocation(1070)", "Delete SimpleName: trim(1071)", "Delete MethodInvocation(1072)", "Delete ReturnStatement(1073)", "Delete Block(1074)", "Delete MethodDeclaration(1075)", "Delete TypeDeclaration: class(1076)", "Delete TextElement: Creates an empty extended properties object.(1077)", "Delete TagElement(1078)", "Delete Javadoc(1079)", "Delete Modifier: public(1080)", "Delete SimpleName: ExtendedProperties(1081)", "Delete SuperConstructorInvocation(1082)", "Delete Block(1083)", "Delete MethodDeclaration(1084)", "Delete TextElement: Creates and loads the extended properties from the specified file.(1085)", "Delete TagElement(1086)", "Delete SimpleName: file(1087)", "Delete TextElement:   the filename to load(1088)", "Delete TagElement: @param(1089)", "Delete SimpleName: IOException(1090)", "Delete TextElement:  if a file error occurs(1091)", "Delete TagElement: @throws(1092)", "Delete Javadoc(1093)", "Delete Modifier: public(1094)", "Delete SimpleName: ExtendedProperties(1095)", "Delete Modifier: final(1096)", "Delete SimpleName: String(1097)", "Delete SimpleType: String(1098)", "Delete SimpleName: file(1099)", "Delete SingleVariableDeclaration(1100)", "Delete SimpleName: IOException(1101)", "Delete SimpleType: IOException(1102)", "Delete SimpleName: file(1103)", "Delete NullLiteral(1104)", "Delete ConstructorInvocation(1105)", "Delete Block(1106)", "Delete MethodDeclaration(1107)", "Delete TextElement: Creates and loads the extended properties from the specified file.(1108)", "Delete TagElement(1109)", "Delete SimpleName: file(1110)", "Delete TextElement:   the filename to load(1111)", "Delete TagElement: @param(1112)", "Delete SimpleName: defaultFile(1113)", "Delete TextElement:   a second filename to load default values from(1114)", "Delete TagElement: @param(1115)", "Delete SimpleName: IOException(1116)", "Delete TextElement:  if a file error occurs(1117)", "Delete TagElement: @throws(1118)", "Delete Javadoc(1119)", "Delete Modifier: public(1120)", "Delete SimpleName: ExtendedProperties(1121)", "Delete Modifier: final(1122)", "Delete SimpleName: String(1123)", "Delete SimpleType: String(1124)", "Delete SimpleName: file(1125)", "Delete SingleVariableDeclaration(1126)", "Delete Modifier: final(1127)", "Delete SimpleName: String(1128)", "Delete SimpleType: String(1129)", "Delete SimpleName: defaultFile(1130)", "Delete SingleVariableDeclaration(1131)", "Delete SimpleName: IOException(1132)", "Delete SimpleType: IOException(1133)", "Delete ThisExpression(1134)", "Delete SimpleName: file(1135)", "Delete FieldAccess(1136)", "Delete SimpleName: file(1137)", "Delete Assignment: =(1138)", "Delete ExpressionStatement(1139)", "Delete SimpleName: basePath(1140)", "Delete SimpleName: File(1141)", "Delete SimpleType: File(1142)", "Delete SimpleName: file(1143)", "Delete ClassInstanceCreation(1144)", "Delete SimpleName: getAbsolutePath(1145)", "Delete MethodInvocation(1146)", "Delete Assignment: =(1147)", "Delete ExpressionStatement(1148)", "Delete SimpleName: basePath(1149)", "Delete SimpleName: basePath(1150)", "Delete SimpleName: substring(1151)", "Delete NumberLiteral: 0(1152)", "Delete SimpleName: basePath(1153)", "Delete SimpleName: lastIndexOf(1154)", "Delete SimpleName: fileSeparator(1155)", "Delete MethodInvocation(1156)", "Delete NumberLiteral: 1(1157)", "Delete InfixExpression: +(1158)", "Delete MethodInvocation(1159)", "Delete Assignment: =(1160)", "Delete ExpressionStatement(1161)", "Delete SimpleName: FileInputStream(1162)", "Delete SimpleType: FileInputStream(1163)", "Delete SimpleName: in(1164)", "Delete NullLiteral(1165)", "Delete VariableDeclarationFragment(1166)", "Delete VariableDeclarationStatement(1167)", "Delete SimpleName: in(1168)", "Delete SimpleName: FileInputStream(1169)", "Delete SimpleType: FileInputStream(1170)", "Delete SimpleName: file(1171)", "Delete ClassInstanceCreation(1172)", "Delete Assignment: =(1173)", "Delete ExpressionStatement(1174)", "Delete ThisExpression(1175)", "Delete SimpleName: load(1176)", "Delete SimpleName: in(1177)", "Delete MethodInvocation(1178)", "Delete ExpressionStatement(1179)", "Delete Block(1180)", "Delete SimpleName: in(1181)", "Delete NullLiteral(1182)", "Delete InfixExpression: !=(1183)", "Delete SimpleName: in(1184)", "Delete SimpleName: close(1185)", "Delete MethodInvocation(1186)", "Delete ExpressionStatement(1187)", "Delete Block(1188)", "Delete IfStatement(1189)", "Delete Block(1190)", "Delete Modifier: final(1191)", "Delete SimpleName: IOException(1192)", "Delete SimpleType: IOException(1193)", "Delete SimpleName: ex(1194)", "Delete SingleVariableDeclaration(1195)", "Delete Block(1196)", "Delete CatchClause(1197)", "Delete TryStatement(1198)", "Delete Block(1199)", "Delete TryStatement(1200)", "Delete SimpleName: defaultFile(1201)", "Delete NullLiteral(1202)", "Delete InfixExpression: !=(1203)", "Delete SimpleName: defaults(1204)", "Delete SimpleName: ExtendedProperties(1205)", "Delete SimpleType: ExtendedProperties(1206)", "Delete SimpleName: defaultFile(1207)", "Delete ClassInstanceCreation(1208)", "Delete Assignment: =(1209)", "Delete ExpressionStatement(1210)", "Delete Block(1211)", "Delete IfStatement(1212)", "Delete Block(1213)", "Delete MethodDeclaration(1214)", "Delete TextElement: Indicate to client code whether property(1215)", "Delete TextElement: resources have been initialized or not.(1216)", "Delete TagElement(1217)", "Delete TextElement:  if this instance has already been initialized(1218)", "Delete TagElement: @return(1219)", "Delete Javadoc(1220)", "Delete Modifier: public(1221)", "Delete PrimitiveType: boolean(1222)", "Delete SimpleName: isInitialized(1223)", "Delete SimpleName: isInitialized(1224)", "Delete ReturnStatement(1225)", "Delete Block(1226)", "Delete MethodDeclaration(1227)", "Delete TextElement: Gets the property value for including other properties files.(1228)", "Delete TextElement: By default it is \"include\".(1229)", "Delete TagElement(1230)", "Delete TextElement:  the property name which includes another property(1231)", "Delete TagElement: @return(1232)", "Delete Javadoc(1233)", "Delete Modifier: public(1234)", "Delete SimpleName: String(1235)", "Delete SimpleType: String(1236)", "Delete SimpleName: getInclude(1237)", "Delete SimpleName: includePropertyName(1238)", "Delete ReturnStatement(1239)", "Delete Block(1240)", "Delete MethodDeclaration(1241)", "Delete TextElement: Sets the property value for including other properties files.(1242)", "Delete TextElement: By default it is \"include\".(1243)", "Delete TagElement(1244)", "Delete SimpleName: inc(1245)", "Delete TextElement:   the property name which includes another property, empty converted to null(1246)", "Delete TagElement: @param(1247)", "Delete Javadoc(1248)", "Delete Modifier: public(1249)", "Delete PrimitiveType: void(1250)", "Delete SimpleName: setInclude(1251)", "Delete Modifier: final(1252)", "Delete SimpleName: String(1253)", "Delete SimpleType: String(1254)", "Delete SimpleName: inc(1255)", "Delete SingleVariableDeclaration(1256)", "Delete SimpleName: includePropertyName(1257)", "Delete SimpleName: inc(1258)", "Delete Assignment: =(1259)", "Delete ExpressionStatement(1260)", "Delete Block(1261)", "Delete MethodDeclaration(1262)", "Delete TextElement: Load the properties from the given input stream.(1263)", "Delete TagElement(1264)", "Delete SimpleName: input(1265)", "Delete TextElement:   the InputStream to load from(1266)", "Delete TagElement: @param(1267)", "Delete SimpleName: IOException(1268)", "Delete TextElement:  if an IO error occurs(1269)", "Delete TagElement: @throws(1270)", "Delete Javadoc(1271)", "Delete Modifier: public(1272)", "Delete PrimitiveType: void(1273)", "Delete SimpleName: load(1274)", "Delete Modifier: final(1275)", "Delete SimpleName: InputStream(1276)", "Delete SimpleType: InputStream(1277)", "Delete SimpleName: input(1278)", "Delete SingleVariableDeclaration(1279)", "Delete SimpleName: IOException(1280)", "Delete SimpleType: IOException(1281)", "Delete SimpleName: load(1282)", "Delete SimpleName: input(1283)", "Delete NullLiteral(1284)", "Delete MethodInvocation(1285)", "Delete ExpressionStatement(1286)", "Delete Block(1287)", "Delete MethodDeclaration(1288)", "Delete TextElement: Load the properties from the given input stream(1289)", "Delete TextElement: and using the specified encoding.(1290)", "Delete TagElement(1291)", "Delete SimpleName: input(1292)", "Delete TextElement:   the InputStream to load from(1293)", "Delete TagElement: @param(1294)", "Delete SimpleName: enc(1295)", "Delete TextElement:   the encoding to use(1296)", "Delete TagElement: @param(1297)", "Delete SimpleName: IOException(1298)", "Delete TextElement:  if an IO error occurs(1299)", "Delete TagElement: @throws(1300)", "Delete Javadoc(1301)", "Delete Modifier: public(1302)", "Delete Modifier: synchronized(1303)", "Delete PrimitiveType: void(1304)", "Delete SimpleName: load(1305)", "Delete Modifier: final(1306)", "Delete SimpleName: InputStream(1307)", "Delete SimpleType: InputStream(1308)", "Delete SimpleName: input(1309)", "Delete SingleVariableDeclaration(1310)", "Delete Modifier: final(1311)", "Delete SimpleName: String(1312)", "Delete SimpleType: String(1313)", "Delete SimpleName: enc(1314)", "Delete SingleVariableDeclaration(1315)", "Delete SimpleName: IOException(1316)", "Delete SimpleType: IOException(1317)", "Delete SimpleName: PropertiesReader(1318)", "Delete SimpleType: PropertiesReader(1319)", "Delete SimpleName: reader(1320)", "Delete NullLiteral(1321)", "Delete VariableDeclarationFragment(1322)", "Delete VariableDeclarationStatement(1323)", "Delete SimpleName: enc(1324)", "Delete NullLiteral(1325)", "Delete InfixExpression: !=(1326)", "Delete SimpleName: reader(1327)", "Delete SimpleName: PropertiesReader(1328)", "Delete SimpleType: PropertiesReader(1329)", "Delete SimpleName: InputStreamReader(1330)", "Delete SimpleType: InputStreamReader(1331)", "Delete SimpleName: input(1332)", "Delete SimpleName: enc(1333)", "Delete ClassInstanceCreation(1334)", "Delete ClassInstanceCreation(1335)", "Delete Assignment: =(1336)", "Delete ExpressionStatement(1337)", "Delete Block(1338)", "Delete Modifier: final(1339)", "Delete SimpleName: UnsupportedEncodingException(1340)", "Delete SimpleType: UnsupportedEncodingException(1341)", "Delete SimpleName: ex(1342)", "Delete SingleVariableDeclaration(1343)", "Delete Block(1344)", "Delete CatchClause(1345)", "Delete TryStatement(1346)", "Delete Block(1347)", "Delete IfStatement(1348)", "Delete SimpleName: reader(1349)", "Delete NullLiteral(1350)", "Delete InfixExpression: ==(1351)", "Delete SimpleName: reader(1352)", "Delete SimpleName: PropertiesReader(1353)", "Delete SimpleType: PropertiesReader(1354)", "Delete SimpleName: InputStreamReader(1355)", "Delete SimpleType: InputStreamReader(1356)", "Delete SimpleName: input(1357)", "Delete StringLiteral: \"8859_1\"(1358)", "Delete ClassInstanceCreation(1359)", "Delete ClassInstanceCreation(1360)", "Delete Assignment: =(1361)", "Delete ExpressionStatement(1362)", "Delete Block(1363)", "Delete Modifier: final(1364)", "Delete SimpleName: UnsupportedEncodingException(1365)", "Delete SimpleType: UnsupportedEncodingException(1366)", "Delete SimpleName: ex(1367)", "Delete SingleVariableDeclaration(1368)", "Delete SimpleName: reader(1369)", "Delete SimpleName: PropertiesReader(1370)", "Delete SimpleType: PropertiesReader(1371)", "Delete SimpleName: InputStreamReader(1372)", "Delete SimpleType: InputStreamReader(1373)", "Delete SimpleName: input(1374)", "Delete ClassInstanceCreation(1375)", "Delete ClassInstanceCreation(1376)", "Delete Assignment: =(1377)", "Delete ExpressionStatement(1378)", "Delete Block(1379)", "Delete CatchClause(1380)", "Delete TryStatement(1381)", "Delete Block(1382)", "Delete IfStatement(1383)", "Delete Modifier: final(1384)", "Delete SimpleName: String(1385)", "Delete SimpleType: String(1386)", "Delete SimpleName: includeProperty(1387)", "Delete SimpleName: getInclude(1388)", "Delete MethodInvocation(1389)", "Delete VariableDeclarationFragment(1390)", "Delete VariableDeclarationStatement(1391)", "Delete BooleanLiteral: true(1392)", "Delete Modifier: final(1393)", "Delete SimpleName: String(1394)", "Delete SimpleType: String(1395)", "Delete SimpleName: line(1396)", "Delete SimpleName: reader(1397)", "Delete SimpleName: readProperty(1398)", "Delete MethodInvocation(1399)", "Delete VariableDeclarationFragment(1400)", "Delete VariableDeclarationStatement(1401)", "Delete SimpleName: line(1402)", "Delete NullLiteral(1403)", "Delete InfixExpression: ==(1404)", "Delete ReturnStatement(1405)", "Delete Block(1406)", "Delete IfStatement(1407)", "Delete Modifier: final(1408)", "Delete PrimitiveType: int(1409)", "Delete SimpleName: equalSign(1410)", "Delete SimpleName: line(1411)", "Delete SimpleName: indexOf(1412)", "Delete CharacterLiteral: '='(1413)", "Delete MethodInvocation(1414)", "Delete VariableDeclarationFragment(1415)", "Delete VariableDeclarationStatement(1416)", "Delete SimpleName: equalSign(1417)", "Delete NumberLiteral: 0(1418)", "Delete InfixExpression: >(1419)", "Delete Modifier: final(1420)", "Delete SimpleName: String(1421)", "Delete SimpleType: String(1422)", "Delete SimpleName: key(1423)", "Delete SimpleName: line(1424)", "Delete SimpleName: substring(1425)", "Delete NumberLiteral: 0(1426)", "Delete SimpleName: equalSign(1427)", "Delete MethodInvocation(1428)", "Delete SimpleName: trim(1429)", "Delete MethodInvocation(1430)", "Delete VariableDeclarationFragment(1431)", "Delete VariableDeclarationStatement(1432)", "Delete SimpleName: String(1433)", "Delete SimpleType: String(1434)", "Delete SimpleName: value(1435)", "Delete SimpleName: line(1436)", "Delete SimpleName: substring(1437)", "Delete SimpleName: equalSign(1438)", "Delete NumberLiteral: 1(1439)", "Delete InfixExpression: +(1440)", "Delete MethodInvocation(1441)", "Delete SimpleName: trim(1442)", "Delete MethodInvocation(1443)", "Delete VariableDeclarationFragment(1444)", "Delete VariableDeclarationStatement(1445)", "Delete SimpleName: includeProperty(1446)", "Delete NullLiteral(1447)", "Delete InfixExpression: !=(1448)", "Delete SimpleName: key(1449)", "Delete SimpleName: equalsIgnoreCase(1450)", "Delete SimpleName: includeProperty(1451)", "Delete MethodInvocation(1452)", "Delete InfixExpression: &&(1453)", "Delete SimpleName: File(1454)", "Delete SimpleType: File(1455)", "Delete SimpleName: file(1456)", "Delete VariableDeclarationFragment(1457)", "Delete VariableDeclarationStatement(1458)", "Delete SimpleName: value(1459)", "Delete SimpleName: startsWith(1460)", "Delete SimpleName: fileSeparator(1461)", "Delete MethodInvocation(1462)", "Delete SimpleName: file(1463)", "Delete SimpleName: File(1464)", "Delete SimpleType: File(1465)", "Delete SimpleName: value(1466)", "Delete ClassInstanceCreation(1467)", "Delete Assignment: =(1468)", "Delete ExpressionStatement(1469)", "Delete Block(1470)", "Delete SimpleName: value(1471)", "Delete SimpleName: startsWith(1472)", "Delete StringLiteral: \".\"(1473)", "Delete SimpleName: fileSeparator(1474)", "Delete InfixExpression: +(1475)", "Delete MethodInvocation(1476)", "Delete SimpleName: value(1477)", "Delete SimpleName: value(1478)", "Delete SimpleName: substring(1479)", "Delete NumberLiteral: 2(1480)", "Delete MethodInvocation(1481)", "Delete Assignment: =(1482)", "Delete ExpressionStatement(1483)", "Delete Block(1484)", "Delete IfStatement(1485)", "Delete SimpleName: file(1486)", "Delete SimpleName: File(1487)", "Delete SimpleType: File(1488)", "Delete SimpleName: basePath(1489)", "Delete SimpleName: value(1490)", "Delete InfixExpression: +(1491)", "Delete ClassInstanceCreation(1492)", "Delete Assignment: =(1493)", "Delete ExpressionStatement(1494)", "Delete Block(1495)", "Delete IfStatement(1496)", "Delete SimpleName: file(1497)", "Delete SimpleName: exists(1498)", "Delete MethodInvocation(1499)", "Delete SimpleName: file(1500)", "Delete SimpleName: canRead(1501)", "Delete MethodInvocation(1502)", "Delete InfixExpression: &&(1503)", "Delete SimpleName: load(1504)", "Delete SimpleName: FileInputStream(1505)", "Delete SimpleType: FileInputStream(1506)", "Delete SimpleName: file(1507)", "Delete ClassInstanceCreation(1508)", "Delete MethodInvocation(1509)", "Delete ExpressionStatement(1510)", "Delete Block(1511)", "Delete IfStatement(1512)", "Delete Block(1513)", "Delete SimpleName: addProperty(1514)", "Delete SimpleName: key(1515)", "Delete SimpleName: value(1516)", "Delete MethodInvocation(1517)", "Delete ExpressionStatement(1518)", "Delete Block(1519)", "Delete IfStatement(1520)", "Delete Block(1521)", "Delete IfStatement(1522)", "Delete Block(1523)", "Delete WhileStatement(1524)", "Delete Block(1525)", "Delete SimpleName: isInitialized(1526)", "Delete BooleanLiteral: true(1527)", "Delete Assignment: =(1528)", "Delete ExpressionStatement(1529)", "Delete Block(1530)", "Delete TryStatement(1531)", "Delete Block(1532)", "Delete MethodDeclaration(1533)", "Delete TextElement: Gets a property from the configuration.(1534)", "Delete TagElement(1535)", "Delete SimpleName: key(1536)", "Delete TextElement:  property to retrieve(1537)", "Delete TagElement: @param(1538)", "Delete TextElement:  value as object. Will return user value if exists,(1539)", "Delete TextElement: if not then default value if exists, otherwise null(1540)", "Delete TagElement: @return(1541)", "Delete Javadoc(1542)", "Delete Modifier: public(1543)", "Delete SimpleName: Object(1544)", "Delete SimpleType: Object(1545)", "Delete SimpleName: getProperty(1546)", "Delete Modifier: final(1547)", "Delete SimpleName: String(1548)", "Delete SimpleType: String(1549)", "Delete SimpleName: key(1550)", "Delete SingleVariableDeclaration(1551)", "Delete SimpleName: Object(1552)", "Delete SimpleType: Object(1553)", "Delete SimpleName: obj(1554)", "Delete SimpleName: get(1555)", "Delete SimpleName: key(1556)", "Delete SuperMethodInvocation(1557)", "Delete VariableDeclarationFragment(1558)", "Delete VariableDeclarationStatement(1559)", "Delete SimpleName: obj(1560)", "Delete NullLiteral(1561)", "Delete InfixExpression: ==(1562)", "Delete SimpleName: defaults(1563)", "Delete NullLiteral(1564)", "Delete InfixExpression: !=(1565)", "Delete SimpleName: obj(1566)", "Delete SimpleName: defaults(1567)", "Delete SimpleName: get(1568)", "Delete SimpleName: key(1569)", "Delete MethodInvocation(1570)", "Delete Assignment: =(1571)", "Delete ExpressionStatement(1572)", "Delete Block(1573)", "Delete IfStatement(1574)", "Delete Block(1575)", "Delete IfStatement(1576)", "Delete SimpleName: obj(1577)", "Delete ReturnStatement(1578)", "Delete Block(1579)", "Delete MethodDeclaration(1580)", "Delete TextElement: Add a property to the configuration. If it already(1581)", "Delete TextElement: exists then the value stated here will be added(1582)", "Delete TextElement: to the configuration entry. For example, if(1583)", "Delete TextElement: <code>resource.loader = file</code>(1584)", "Delete TextElement: is already present in the configuration and you(1585)", "Delete TextElement: <code>addProperty(\"resource.loader\", \"classpath\")</code>(1586)", "Delete TextElement: Then you will end up with a Vector like the(1587)", "Delete TextElement: following:(1588)", "Delete TextElement: <code>[\"file\", \"classpath\"]</code>(1589)", "Delete TagElement(1590)", "Delete SimpleName: key(1591)", "Delete TextElement:   the key to add(1592)", "Delete TagElement: @param(1593)", "Delete SimpleName: value(1594)", "Delete TextElement:   the value to add(1595)", "Delete TagElement: @param(1596)", "Delete Javadoc(1597)", "Delete Modifier: public(1598)", "Delete PrimitiveType: void(1599)", "Delete SimpleName: addProperty(1600)", "Delete Modifier: final(1601)", "Delete SimpleName: String(1602)", "Delete SimpleType: String(1603)", "Delete SimpleName: key(1604)", "Delete SingleVariableDeclaration(1605)", "Delete Modifier: final(1606)", "Delete SimpleName: Object(1607)", "Delete SimpleType: Object(1608)", "Delete SimpleName: value(1609)", "Delete SingleVariableDeclaration(1610)", "Delete SimpleName: value(1611)", "Delete SimpleName: String(1612)", "Delete SimpleType: String(1613)", "Delete InstanceofExpression(1614)", "Delete Modifier: final(1615)", "Delete SimpleName: String(1616)", "Delete SimpleType: String(1617)", "Delete SimpleName: str(1618)", "Delete SimpleName: String(1619)", "Delete SimpleType: String(1620)", "Delete SimpleName: value(1621)", "Delete CastExpression(1622)", "Delete VariableDeclarationFragment(1623)", "Delete VariableDeclarationStatement(1624)", "Delete SimpleName: str(1625)", "Delete SimpleName: indexOf(1626)", "Delete QualifiedName: PropertiesTokenizer.DELIMITER(1627)", "Delete MethodInvocation(1628)", "Delete NumberLiteral: 0(1629)", "Delete InfixExpression: >(1630)", "Delete Modifier: final(1631)", "Delete SimpleName: PropertiesTokenizer(1632)", "Delete SimpleType: PropertiesTokenizer(1633)", "Delete SimpleName: tokenizer(1634)", "Delete SimpleName: PropertiesTokenizer(1635)", "Delete SimpleType: PropertiesTokenizer(1636)", "Delete SimpleName: str(1637)", "Delete ClassInstanceCreation(1638)", "Delete VariableDeclarationFragment(1639)", "Delete VariableDeclarationStatement(1640)", "Delete SimpleName: tokenizer(1641)", "Delete SimpleName: hasMoreTokens(1642)", "Delete MethodInvocation(1643)", "Delete Modifier: final(1644)", "Delete SimpleName: String(1645)", "Delete SimpleType: String(1646)", "Delete SimpleName: token(1647)", "Delete SimpleName: tokenizer(1648)", "Delete SimpleName: nextToken(1649)", "Delete MethodInvocation(1650)", "Delete VariableDeclarationFragment(1651)", "Delete VariableDeclarationStatement(1652)", "Delete SimpleName: addPropertyInternal(1653)", "Delete SimpleName: key(1654)", "Delete SimpleName: unescape(1655)", "Delete SimpleName: token(1656)", "Delete MethodInvocation(1657)", "Delete MethodInvocation(1658)", "Delete ExpressionStatement(1659)", "Delete Block(1660)", "Delete WhileStatement(1661)", "Delete Block(1662)", "Delete SimpleName: addPropertyInternal(1663)", "Delete SimpleName: key(1664)", "Delete SimpleName: unescape(1665)", "Delete SimpleName: str(1666)", "Delete MethodInvocation(1667)", "Delete MethodInvocation(1668)", "Delete ExpressionStatement(1669)", "Delete Block(1670)", "Delete IfStatement(1671)", "Delete Block(1672)", "Delete SimpleName: addPropertyInternal(1673)", "Delete SimpleName: key(1674)", "Delete SimpleName: value(1675)", "Delete MethodInvocation(1676)", "Delete ExpressionStatement(1677)", "Delete Block(1678)", "Delete IfStatement(1679)", "Delete SimpleName: isInitialized(1680)", "Delete BooleanLiteral: true(1681)", "Delete Assignment: =(1682)", "Delete ExpressionStatement(1683)", "Delete Block(1684)", "Delete MethodDeclaration(1685)", "Delete TextElement: Adds a key/value pair to the map.  This routine does(1686)", "Delete TextElement: no magic morphing.  It ensures the keylist is maintained(1687)", "Delete TagElement(1688)", "Delete SimpleName: key(1689)", "Delete TextElement:   the key to store at(1690)", "Delete TagElement: @param(1691)", "Delete SimpleName: value(1692)", "Delete TextElement:   the decoded object to store(1693)", "Delete TagElement: @param(1694)", "Delete Javadoc(1695)", "Delete Modifier: private(1696)", "Delete PrimitiveType: void(1697)", "Delete SimpleName: addPropertyDirect(1698)", "Delete Modifier: final(1699)", "Delete SimpleName: String(1700)", "Delete SimpleType: String(1701)", "Delete SimpleName: key(1702)", "Delete SingleVariableDeclaration(1703)", "Delete Modifier: final(1704)", "Delete SimpleName: Object(1705)", "Delete SimpleType: Object(1706)", "Delete SimpleName: value(1707)", "Delete SingleVariableDeclaration(1708)", "Delete SimpleName: containsKey(1709)", "Delete SimpleName: key(1710)", "Delete MethodInvocation(1711)", "Delete PrefixExpression: !(1712)", "Delete SimpleName: keysAsListed(1713)", "Delete SimpleName: add(1714)", "Delete SimpleName: key(1715)", "Delete MethodInvocation(1716)", "Delete ExpressionStatement(1717)", "Delete Block(1718)", "Delete IfStatement(1719)", "Delete SimpleName: put(1720)", "Delete SimpleName: key(1721)", "Delete SimpleName: value(1722)", "Delete SuperMethodInvocation(1723)", "Delete ExpressionStatement(1724)", "Delete Block(1725)", "Delete MethodDeclaration(1726)", "Delete TextElement: Adds a decoded property to the map w/o checking for commas - used(1727)", "Delete TextElement: internally when a property has been broken up into(1728)", "Delete TextElement: strings that could contain escaped commas to prevent(1729)", "Delete TextElement: the inadvertent vectorization.(1730)", "Delete TextElement: <p>(1731)", "Delete TextElement: Thanks to Leon Messerschmidt for this one.(1732)", "Delete TagElement(1733)", "Delete SimpleName: key(1734)", "Delete TextElement:   the key to store at(1735)", "Delete TagElement: @param(1736)", "Delete SimpleName: value(1737)", "Delete TextElement:   the decoded object to store(1738)", "Delete TagElement: @param(1739)", "Delete Javadoc(1740)", "Delete Modifier: private(1741)", "Delete PrimitiveType: void(1742)", "Delete SimpleName: addPropertyInternal(1743)", "Delete Modifier: final(1744)", "Delete SimpleName: String(1745)", "Delete SimpleType: String(1746)", "Delete SimpleName: key(1747)", "Delete SingleVariableDeclaration(1748)", "Delete Modifier: final(1749)", "Delete SimpleName: Object(1750)", "Delete SimpleType: Object(1751)", "Delete SimpleName: value(1752)", "Delete SingleVariableDeclaration(1753)", "Delete Modifier: final(1754)", "Delete SimpleName: Object(1755)", "Delete SimpleType: Object(1756)", "Delete SimpleName: current(1757)", "Delete ThisExpression(1758)", "Delete SimpleName: get(1759)", "Delete SimpleName: key(1760)", "Delete MethodInvocation(1761)", "Delete VariableDeclarationFragment(1762)", "Delete VariableDeclarationStatement(1763)", "Delete SimpleName: current(1764)", "Delete SimpleName: String(1765)", "Delete SimpleType: String(1766)", "Delete InstanceofExpression(1767)", "Delete Modifier: final(1768)", "Delete SimpleName: List(1769)", "Delete SimpleType: List(1770)", "Delete SimpleName: Object(1771)", "Delete SimpleType: Object(1772)", "Delete ParameterizedType: List<Object>(1773)", "Delete SimpleName: values(1774)", "Delete SimpleName: Vector(1775)", "Delete SimpleType: Vector(1776)", "Delete SimpleName: Object(1777)", "Delete SimpleType: Object(1778)", "Delete ParameterizedType: Vector<Object>(1779)", "Delete NumberLiteral: 2(1780)", "Delete ClassInstanceCreation(1781)", "Delete VariableDeclarationFragment(1782)", "Delete VariableDeclarationStatement(1783)", "Delete SimpleName: values(1784)", "Delete SimpleName: add(1785)", "Delete SimpleName: current(1786)", "Delete MethodInvocation(1787)", "Delete ExpressionStatement(1788)", "Delete SimpleName: values(1789)", "Delete SimpleName: add(1790)", "Delete SimpleName: value(1791)", "Delete MethodInvocation(1792)", "Delete ExpressionStatement(1793)", "Delete SimpleName: put(1794)", "Delete SimpleName: key(1795)", "Delete SimpleName: values(1796)", "Delete SuperMethodInvocation(1797)", "Delete ExpressionStatement(1798)", "Delete Block(1799)", "Delete SimpleName: current(1800)", "Delete SimpleName: List(1801)", "Delete SimpleType: List(1802)", "Delete InstanceofExpression(1803)", "Delete SimpleName: SuppressWarnings(1804)", "Delete StringLiteral: \"unchecked\"(1805)", "Delete SingleMemberAnnotation(1806)", "Delete Modifier: final(1807)", "Delete SimpleName: List(1808)", "Delete SimpleType: List(1809)", "Delete SimpleName: Object(1810)", "Delete SimpleType: Object(1811)", "Delete ParameterizedType: List<Object>(1812)", "Delete SimpleName: list(1813)", "Delete SimpleName: List(1814)", "Delete SimpleType: List(1815)", "Delete SimpleName: Object(1816)", "Delete SimpleType: Object(1817)", "Delete ParameterizedType: List<Object>(1818)", "Delete SimpleName: current(1819)", "Delete CastExpression(1820)", "Delete VariableDeclarationFragment(1821)", "Delete VariableDeclarationStatement(1822)", "Delete SimpleName: list(1823)", "Delete SimpleName: add(1824)", "Delete SimpleName: value(1825)", "Delete MethodInvocation(1826)", "Delete ExpressionStatement(1827)", "Delete Block(1828)", "Delete SimpleName: containsKey(1829)", "Delete SimpleName: key(1830)", "Delete MethodInvocation(1831)", "Delete PrefixExpression: !(1832)", "Delete SimpleName: keysAsListed(1833)", "Delete SimpleName: add(1834)", "Delete SimpleName: key(1835)", "Delete MethodInvocation(1836)", "Delete ExpressionStatement(1837)", "Delete Block(1838)", "Delete IfStatement(1839)", "Delete SimpleName: put(1840)", "Delete SimpleName: key(1841)", "Delete SimpleName: value(1842)", "Delete SuperMethodInvocation(1843)", "Delete ExpressionStatement(1844)", "Delete Block(1845)", "Delete IfStatement(1846)", "Delete IfStatement(1847)", "Delete Block(1848)", "Delete MethodDeclaration(1849)", "Delete TextElement: Set a property, this will replace any previously(1850)", "Delete TextElement: set values. Set values is implicitly a call(1851)", "Delete TextElement: to clearProperty(key), addProperty(key,value).(1852)", "Delete TagElement(1853)", "Delete SimpleName: key(1854)", "Delete TextElement:   the key to set(1855)", "Delete TagElement: @param(1856)", "Delete SimpleName: value(1857)", "Delete TextElement:   the value to set(1858)", "Delete TagElement: @param(1859)", "Delete Javadoc(1860)", "Delete Modifier: public(1861)", "Delete PrimitiveType: void(1862)", "Delete SimpleName: setProperty(1863)", "Delete Modifier: final(1864)", "Delete SimpleName: String(1865)", "Delete SimpleType: String(1866)", "Delete SimpleName: key(1867)", "Delete SingleVariableDeclaration(1868)", "Delete Modifier: final(1869)", "Delete SimpleName: Object(1870)", "Delete SimpleType: Object(1871)", "Delete SimpleName: value(1872)", "Delete SingleVariableDeclaration(1873)", "Delete SimpleName: clearProperty(1874)", "Delete SimpleName: key(1875)", "Delete MethodInvocation(1876)", "Delete ExpressionStatement(1877)", "Delete SimpleName: addProperty(1878)", "Delete SimpleName: key(1879)", "Delete SimpleName: value(1880)", "Delete MethodInvocation(1881)", "Delete ExpressionStatement(1882)", "Delete Block(1883)", "Delete MethodDeclaration(1884)", "Delete TextElement: Save the properties to the given output stream.(1885)", "Delete TextElement: <p>(1886)", "Delete TextElement: The stream is not closed, but it is flushed.(1887)", "Delete TagElement(1888)", "Delete SimpleName: output(1889)", "Delete TextElement:   an OutputStream, may be null(1890)", "Delete TagElement: @param(1891)", "Delete SimpleName: header(1892)", "Delete TextElement:   a textual comment to act as a file header(1893)", "Delete TagElement: @param(1894)", "Delete SimpleName: IOException(1895)", "Delete TextElement:  if an IO error occurs(1896)", "Delete TagElement: @throws(1897)", "Delete Javadoc(1898)", "Delete Modifier: public(1899)", "Delete Modifier: synchronized(1900)", "Delete PrimitiveType: void(1901)", "Delete SimpleName: save(1902)", "Delete Modifier: final(1903)", "Delete SimpleName: OutputStream(1904)", "Delete SimpleType: OutputStream(1905)", "Delete SimpleName: output(1906)", "Delete SingleVariableDeclaration(1907)", "Delete Modifier: final(1908)", "Delete SimpleName: String(1909)", "Delete SimpleType: String(1910)", "Delete SimpleName: header(1911)", "Delete SingleVariableDeclaration(1912)", "Delete SimpleName: IOException(1913)", "Delete SimpleType: IOException(1914)", "Delete SimpleName: output(1915)", "Delete NullLiteral(1916)", "Delete InfixExpression: ==(1917)", "Delete ReturnStatement(1918)", "Delete Block(1919)", "Delete IfStatement(1920)", "Delete Modifier: final(1921)", "Delete SimpleName: PrintWriter(1922)", "Delete SimpleType: PrintWriter(1923)", "Delete SimpleName: theWrtr(1924)", "Delete SimpleName: PrintWriter(1925)", "Delete SimpleType: PrintWriter(1926)", "Delete SimpleName: output(1927)", "Delete ClassInstanceCreation(1928)", "Delete VariableDeclarationFragment(1929)", "Delete VariableDeclarationStatement(1930)", "Delete SimpleName: header(1931)", "Delete NullLiteral(1932)", "Delete InfixExpression: !=(1933)", "Delete SimpleName: theWrtr(1934)", "Delete SimpleName: println(1935)", "Delete SimpleName: header(1936)", "Delete MethodInvocation(1937)", "Delete ExpressionStatement(1938)", "Delete Block(1939)", "Delete IfStatement(1940)", "Delete Modifier: final(1941)", "Delete SimpleName: Enumeration(1942)", "Delete SimpleType: Enumeration(1943)", "Delete SimpleName: String(1944)", "Delete SimpleType: String(1945)", "Delete ParameterizedType: Enumeration<String>(1946)", "Delete SimpleName: theKeys(1947)", "Delete SimpleName: keys(1948)", "Delete MethodInvocation(1949)", "Delete VariableDeclarationFragment(1950)", "Delete VariableDeclarationStatement(1951)", "Delete SimpleName: theKeys(1952)", "Delete SimpleName: hasMoreElements(1953)", "Delete MethodInvocation(1954)", "Delete Modifier: final(1955)", "Delete SimpleName: String(1956)", "Delete SimpleType: String(1957)", "Delete SimpleName: key(1958)", "Delete SimpleName: theKeys(1959)", "Delete SimpleName: nextElement(1960)", "Delete MethodInvocation(1961)", "Delete VariableDeclarationFragment(1962)", "Delete VariableDeclarationStatement(1963)", "Delete Modifier: final(1964)", "Delete SimpleName: Object(1965)", "Delete SimpleType: Object(1966)", "Delete SimpleName: value(1967)", "Delete SimpleName: get(1968)", "Delete SimpleName: key(1969)", "Delete MethodInvocation(1970)", "Delete VariableDeclarationFragment(1971)", "Delete VariableDeclarationStatement(1972)", "Delete SimpleName: value(1973)", "Delete NullLiteral(1974)", "Delete InfixExpression: !=(1975)", "Delete SimpleName: value(1976)", "Delete SimpleName: String(1977)", "Delete SimpleType: String(1978)", "Delete InstanceofExpression(1979)", "Delete Modifier: final(1980)", "Delete SimpleName: StringBuilder(1981)", "Delete SimpleType: StringBuilder(1982)", "Delete SimpleName: currentOutput(1983)", "Delete SimpleName: StringBuilder(1984)", "Delete SimpleType: StringBuilder(1985)", "Delete ClassInstanceCreation(1986)", "Delete VariableDeclarationFragment(1987)", "Delete VariableDeclarationStatement(1988)", "Delete SimpleName: currentOutput(1989)", "Delete SimpleName: append(1990)", "Delete SimpleName: key(1991)", "Delete MethodInvocation(1992)", "Delete ExpressionStatement(1993)", "Delete SimpleName: currentOutput(1994)", "Delete SimpleName: append(1995)", "Delete StringLiteral: \"=\"(1996)", "Delete MethodInvocation(1997)", "Delete ExpressionStatement(1998)", "Delete SimpleName: currentOutput(1999)", "Delete SimpleName: append(2000)", "Delete SimpleName: escape(2001)", "Delete SimpleName: String(2002)", "Delete SimpleType: String(2003)", "Delete SimpleName: value(2004)", "Delete CastExpression(2005)", "Delete MethodInvocation(2006)", "Delete MethodInvocation(2007)", "Delete ExpressionStatement(2008)", "Delete SimpleName: theWrtr(2009)", "Delete SimpleName: println(2010)", "Delete SimpleName: currentOutput(2011)", "Delete SimpleName: toString(2012)", "Delete MethodInvocation(2013)", "Delete MethodInvocation(2014)", "Delete ExpressionStatement(2015)", "Delete Block(2016)", "Delete SimpleName: value(2017)", "Delete SimpleName: List(2018)", "Delete SimpleType: List(2019)", "Delete InstanceofExpression(2020)", "Delete SimpleName: SuppressWarnings(2021)", "Delete StringLiteral: \"unchecked\"(2022)", "Delete SingleMemberAnnotation(2023)", "Delete Modifier: final(2024)", "Delete SimpleName: List(2025)", "Delete SimpleType: List(2026)", "Delete SimpleName: String(2027)", "Delete SimpleType: String(2028)", "Delete ParameterizedType: List<String>(2029)", "Delete SimpleName: values(2030)", "Delete SimpleName: List(2031)", "Delete SimpleType: List(2032)", "Delete SimpleName: String(2033)", "Delete SimpleType: String(2034)", "Delete ParameterizedType: List<String>(2035)", "Delete SimpleName: value(2036)", "Delete CastExpression(2037)", "Delete VariableDeclarationFragment(2038)", "Delete VariableDeclarationStatement(2039)", "Delete Modifier: final(2040)", "Delete SimpleName: String(2041)", "Delete SimpleType: String(2042)", "Delete SimpleName: currentElement(2043)", "Delete SingleVariableDeclaration(2044)", "Delete SimpleName: values(2045)", "Delete Modifier: final(2046)", "Delete SimpleName: StringBuilder(2047)", "Delete SimpleType: StringBuilder(2048)", "Delete SimpleName: currentOutput(2049)", "Delete SimpleName: StringBuilder(2050)", "Delete SimpleType: StringBuilder(2051)", "Delete ClassInstanceCreation(2052)", "Delete VariableDeclarationFragment(2053)", "Delete VariableDeclarationStatement(2054)", "Delete SimpleName: currentOutput(2055)", "Delete SimpleName: append(2056)", "Delete SimpleName: key(2057)", "Delete MethodInvocation(2058)", "Delete ExpressionStatement(2059)", "Delete SimpleName: currentOutput(2060)", "Delete SimpleName: append(2061)", "Delete StringLiteral: \"=\"(2062)", "Delete MethodInvocation(2063)", "Delete ExpressionStatement(2064)", "Delete SimpleName: currentOutput(2065)", "Delete SimpleName: append(2066)", "Delete SimpleName: escape(2067)", "Delete SimpleName: currentElement(2068)", "Delete MethodInvocation(2069)", "Delete MethodInvocation(2070)", "Delete ExpressionStatement(2071)", "Delete SimpleName: theWrtr(2072)", "Delete SimpleName: println(2073)", "Delete SimpleName: currentOutput(2074)", "Delete SimpleName: toString(2075)", "Delete MethodInvocation(2076)", "Delete MethodInvocation(2077)", "Delete ExpressionStatement(2078)", "Delete Block(2079)", "Delete EnhancedForStatement(2080)", "Delete Block(2081)", "Delete IfStatement(2082)", "Delete IfStatement(2083)", "Delete Block(2084)", "Delete IfStatement(2085)", "Delete SimpleName: theWrtr(2086)", "Delete SimpleName: println(2087)", "Delete MethodInvocation(2088)", "Delete ExpressionStatement(2089)", "Delete SimpleName: theWrtr(2090)", "Delete SimpleName: flush(2091)", "Delete MethodInvocation(2092)", "Delete ExpressionStatement(2093)", "Delete Block(2094)", "Delete WhileStatement(2095)", "Delete Block(2096)", "Delete MethodDeclaration(2097)", "Delete TextElement: Combines an existing ExtendedProperties object with this one.(2098)", "Delete TextElement: <p>(2099)", "Delete TextElement: Warning: It will overwrite previous entries without warning.(2100)", "Delete TagElement(2101)", "Delete SimpleName: props(2102)", "Delete TextElement:   the properties to combine(2103)", "Delete TagElement: @param(2104)", "Delete Javadoc(2105)", "Delete Modifier: public(2106)", "Delete PrimitiveType: void(2107)", "Delete SimpleName: combine(2108)", "Delete Modifier: final(2109)", "Delete SimpleName: ExtendedProperties(2110)", "Delete SimpleType: ExtendedProperties(2111)", "Delete SimpleName: props(2112)", "Delete SingleVariableDeclaration(2113)", "Delete Modifier: final(2114)", "Delete SimpleName: Iterator(2115)", "Delete SimpleType: Iterator(2116)", "Delete SimpleName: String(2117)", "Delete SimpleType: String(2118)", "Delete ParameterizedType: Iterator<String>(2119)", "Delete SimpleName: it(2120)", "Delete SimpleName: props(2121)", "Delete SimpleName: getKeys(2122)", "Delete MethodInvocation(2123)", "Delete VariableDeclarationFragment(2124)", "Delete VariableDeclarationExpression(2125)", "Delete SimpleName: it(2126)", "Delete SimpleName: hasNext(2127)", "Delete MethodInvocation(2128)", "Delete Modifier: final(2129)", "Delete SimpleName: String(2130)", "Delete SimpleType: String(2131)", "Delete SimpleName: key(2132)", "Delete SimpleName: it(2133)", "Delete SimpleName: next(2134)", "Delete MethodInvocation(2135)", "Delete VariableDeclarationFragment(2136)", "Delete VariableDeclarationStatement(2137)", "Delete SimpleName: clearProperty(2138)", "Delete SimpleName: key(2139)", "Delete MethodInvocation(2140)", "Delete ExpressionStatement(2141)", "Delete SimpleName: addPropertyDirect(2142)", "Delete SimpleName: key(2143)", "Delete SimpleName: props(2144)", "Delete SimpleName: get(2145)", "Delete SimpleName: key(2146)", "Delete MethodInvocation(2147)", "Delete MethodInvocation(2148)", "Delete ExpressionStatement(2149)", "Delete Block(2150)", "Delete ForStatement(2151)", "Delete Block(2152)", "Delete MethodDeclaration(2153)", "Delete TextElement: Clear a property in the configuration.(2154)", "Delete TagElement(2155)", "Delete SimpleName: key(2156)", "Delete TextElement:   the property key to remove along with corresponding value(2157)", "Delete TagElement: @param(2158)", "Delete Javadoc(2159)", "Delete Modifier: public(2160)", "Delete PrimitiveType: void(2161)", "Delete SimpleName: clearProperty(2162)", "Delete Modifier: final(2163)", "Delete SimpleName: String(2164)", "Delete SimpleType: String(2165)", "Delete SimpleName: key(2166)", "Delete SingleVariableDeclaration(2167)", "Delete SimpleName: containsKey(2168)", "Delete SimpleName: key(2169)", "Delete MethodInvocation(2170)", "Delete PrimitiveType: int(2171)", "Delete SimpleName: i(2172)", "Delete NumberLiteral: 0(2173)", "Delete VariableDeclarationFragment(2174)", "Delete VariableDeclarationExpression(2175)", "Delete SimpleName: i(2176)", "Delete SimpleName: keysAsListed(2177)", "Delete SimpleName: size(2178)", "Delete MethodInvocation(2179)", "Delete InfixExpression: <(2180)", "Delete SimpleName: i(2181)", "Delete PostfixExpression: ++(2182)", "Delete SimpleName: keysAsListed(2183)", "Delete SimpleName: get(2184)", "Delete SimpleName: i(2185)", "Delete MethodInvocation(2186)", "Delete SimpleName: equals(2187)", "Delete SimpleName: key(2188)", "Delete MethodInvocation(2189)", "Delete SimpleName: keysAsListed(2190)", "Delete SimpleName: remove(2191)", "Delete SimpleName: i(2192)", "Delete MethodInvocation(2193)", "Delete ExpressionStatement(2194)", "Delete BreakStatement(2195)", "Delete Block(2196)", "Delete IfStatement(2197)", "Delete Block(2198)", "Delete ForStatement(2199)", "Delete SimpleName: remove(2200)", "Delete SimpleName: key(2201)", "Delete SuperMethodInvocation(2202)", "Delete ExpressionStatement(2203)", "Delete Block(2204)", "Delete IfStatement(2205)", "Delete Block(2206)", "Delete MethodDeclaration(2207)", "Delete TextElement: Get the list of the keys contained in the configuration repository.(2208)", "Delete TagElement(2209)", "Delete TextElement:  an Iterator over the keys(2210)", "Delete TagElement: @return(2211)", "Delete Javadoc(2212)", "Delete Modifier: public(2213)", "Delete SimpleName: Iterator(2214)", "Delete SimpleType: Iterator(2215)", "Delete SimpleName: String(2216)", "Delete SimpleType: String(2217)", "Delete ParameterizedType: Iterator<String>(2218)", "Delete SimpleName: getKeys(2219)", "Delete SimpleName: keysAsListed(2220)", "Delete SimpleName: iterator(2221)", "Delete MethodInvocation(2222)", "Delete ReturnStatement(2223)", "Delete Block(2224)", "Delete MethodDeclaration(2225)", "Delete TextElement: Get the list of the keys contained in the configuration(2226)", "Delete TextElement: repository that match the specified prefix.(2227)", "Delete TagElement(2228)", "Delete SimpleName: prefix(2229)", "Delete TextElement:   the prefix to match(2230)", "Delete TagElement: @param(2231)", "Delete TextElement:  an Iterator of keys that match the prefix(2232)", "Delete TagElement: @return(2233)", "Delete Javadoc(2234)", "Delete Modifier: public(2235)", "Delete SimpleName: Iterator(2236)", "Delete SimpleType: Iterator(2237)", "Delete SimpleName: String(2238)", "Delete SimpleType: String(2239)", "Delete ParameterizedType: Iterator<String>(2240)", "Delete SimpleName: getKeys(2241)", "Delete Modifier: final(2242)", "Delete SimpleName: String(2243)", "Delete SimpleType: String(2244)", "Delete SimpleName: prefix(2245)", "Delete SingleVariableDeclaration(2246)", "Delete Modifier: final(2247)", "Delete SimpleName: Iterator(2248)", "Delete SimpleType: Iterator(2249)", "Delete SimpleName: String(2250)", "Delete SimpleType: String(2251)", "Delete ParameterizedType: Iterator<String>(2252)", "Delete SimpleName: keys(2253)", "Delete SimpleName: getKeys(2254)", "Delete MethodInvocation(2255)", "Delete VariableDeclarationFragment(2256)", "Delete VariableDeclarationStatement(2257)", "Delete Modifier: final(2258)", "Delete SimpleName: ArrayList(2259)", "Delete SimpleType: ArrayList(2260)", "Delete SimpleName: String(2261)", "Delete SimpleType: String(2262)", "Delete ParameterizedType: ArrayList<String>(2263)", "Delete SimpleName: matchingKeys(2264)", "Delete SimpleName: ArrayList(2265)", "Delete SimpleType: ArrayList(2266)", "Delete SimpleName: String(2267)", "Delete SimpleType: String(2268)", "Delete ParameterizedType: ArrayList<String>(2269)", "Delete ClassInstanceCreation(2270)", "Delete VariableDeclarationFragment(2271)", "Delete VariableDeclarationStatement(2272)", "Delete SimpleName: keys(2273)", "Delete SimpleName: hasNext(2274)", "Delete MethodInvocation(2275)", "Delete Modifier: final(2276)", "Delete SimpleName: String(2277)", "Delete SimpleType: String(2278)", "Delete SimpleName: key(2279)", "Delete SimpleName: keys(2280)", "Delete SimpleName: next(2281)", "Delete MethodInvocation(2282)", "Delete VariableDeclarationFragment(2283)", "Delete VariableDeclarationStatement(2284)", "Delete SimpleName: key(2285)", "Delete SimpleName: startsWith(2286)", "Delete SimpleName: prefix(2287)", "Delete MethodInvocation(2288)", "Delete SimpleName: matchingKeys(2289)", "Delete SimpleName: add(2290)", "Delete SimpleName: key(2291)", "Delete MethodInvocation(2292)", "Delete ExpressionStatement(2293)", "Delete Block(2294)", "Delete IfStatement(2295)", "Delete Block(2296)", "Delete WhileStatement(2297)", "Delete SimpleName: matchingKeys(2298)", "Delete SimpleName: iterator(2299)", "Delete MethodInvocation(2300)", "Delete ReturnStatement(2301)", "Delete Block(2302)", "Delete MethodDeclaration(2303)", "Delete TextElement: Create an ExtendedProperties object that is a subset(2304)", "Delete TextElement: of this one. Take into account duplicate keys(2305)", "Delete TextElement: by using the setProperty() in ExtendedProperties.(2306)", "Delete TagElement(2307)", "Delete SimpleName: prefix(2308)", "Delete TextElement:   the prefix to get a subset for(2309)", "Delete TagElement: @param(2310)", "Delete TextElement:  a new independent ExtendedProperties(2311)", "Delete TextElement: or (2312)", "Delete TextElement:  null(2313)", "Delete TagElement: @code(2314)", "Delete TextElement:  if no keys matched(2315)", "Delete TagElement: @return(2316)", "Delete Javadoc(2317)", "Delete Modifier: public(2318)", "Delete SimpleName: ExtendedProperties(2319)", "Delete SimpleType: ExtendedProperties(2320)", "Delete SimpleName: subset(2321)", "Delete Modifier: final(2322)", "Delete SimpleName: String(2323)", "Delete SimpleType: String(2324)", "Delete SimpleName: prefix(2325)", "Delete SingleVariableDeclaration(2326)", "Delete Modifier: final(2327)", "Delete SimpleName: ExtendedProperties(2328)", "Delete SimpleType: ExtendedProperties(2329)", "Delete SimpleName: c(2330)", "Delete SimpleName: ExtendedProperties(2331)", "Delete SimpleType: ExtendedProperties(2332)", "Delete ClassInstanceCreation(2333)", "Delete VariableDeclarationFragment(2334)", "Delete VariableDeclarationStatement(2335)", "Delete Modifier: final(2336)", "Delete SimpleName: Iterator(2337)", "Delete SimpleType: Iterator(2338)", "Delete SimpleName: String(2339)", "Delete SimpleType: String(2340)", "Delete ParameterizedType: Iterator<String>(2341)", "Delete SimpleName: keys(2342)", "Delete SimpleName: getKeys(2343)", "Delete MethodInvocation(2344)", "Delete VariableDeclarationFragment(2345)", "Delete VariableDeclarationStatement(2346)", "Delete PrimitiveType: boolean(2347)", "Delete SimpleName: validSubset(2348)", "Delete BooleanLiteral: false(2349)", "Delete VariableDeclarationFragment(2350)", "Delete VariableDeclarationStatement(2351)", "Delete SimpleName: keys(2352)", "Delete SimpleName: hasNext(2353)", "Delete MethodInvocation(2354)", "Delete Modifier: final(2355)", "Delete SimpleName: String(2356)", "Delete SimpleType: String(2357)", "Delete SimpleName: key(2358)", "Delete SimpleName: keys(2359)", "Delete SimpleName: next(2360)", "Delete MethodInvocation(2361)", "Delete VariableDeclarationFragment(2362)", "Delete VariableDeclarationStatement(2363)", "Delete SimpleName: key(2364)", "Delete SimpleName: startsWith(2365)", "Delete SimpleName: prefix(2366)", "Delete MethodInvocation(2367)", "Delete SimpleName: validSubset(2368)", "Delete PrefixExpression: !(2369)", "Delete SimpleName: validSubset(2370)", "Delete BooleanLiteral: true(2371)", "Delete Assignment: =(2372)", "Delete ExpressionStatement(2373)", "Delete Block(2374)", "Delete IfStatement(2375)", "Delete SimpleName: String(2376)", "Delete SimpleType: String(2377)", "Delete SimpleName: newKey(2378)", "Delete NullLiteral(2379)", "Delete VariableDeclarationFragment(2380)", "Delete VariableDeclarationStatement(2381)", "Delete SimpleName: key(2382)", "Delete SimpleName: length(2383)", "Delete MethodInvocation(2384)", "Delete SimpleName: prefix(2385)", "Delete SimpleName: length(2386)", "Delete MethodInvocation(2387)", "Delete InfixExpression: ==(2388)", "Delete SimpleName: newKey(2389)", "Delete SimpleName: prefix(2390)", "Delete Assignment: =(2391)", "Delete ExpressionStatement(2392)", "Delete Block(2393)", "Delete SimpleName: newKey(2394)", "Delete SimpleName: key(2395)", "Delete SimpleName: substring(2396)", "Delete SimpleName: prefix(2397)", "Delete SimpleName: length(2398)", "Delete MethodInvocation(2399)", "Delete NumberLiteral: 1(2400)", "Delete InfixExpression: +(2401)", "Delete MethodInvocation(2402)", "Delete Assignment: =(2403)", "Delete ExpressionStatement(2404)", "Delete Block(2405)", "Delete IfStatement(2406)", "Delete SimpleName: c(2407)", "Delete SimpleName: addPropertyDirect(2408)", "Delete SimpleName: newKey(2409)", "Delete SimpleName: get(2410)", "Delete SimpleName: key(2411)", "Delete MethodInvocation(2412)", "Delete MethodInvocation(2413)", "Delete ExpressionStatement(2414)", "Delete Block(2415)", "Delete IfStatement(2416)", "Delete Block(2417)", "Delete WhileStatement(2418)", "Delete SimpleName: validSubset(2419)", "Delete SimpleName: c(2420)", "Delete ReturnStatement(2421)", "Delete Block(2422)", "Delete NullLiteral(2423)", "Delete ReturnStatement(2424)", "Delete Block(2425)", "Delete IfStatement(2426)", "Delete Block(2427)", "Delete MethodDeclaration(2428)", "Delete TextElement: Display the configuration for debugging purposes to System.out.(2429)", "Delete TagElement(2430)", "Delete Javadoc(2431)", "Delete Modifier: public(2432)", "Delete PrimitiveType: void(2433)", "Delete SimpleName: display(2434)", "Delete Modifier: final(2435)", "Delete SimpleName: Iterator(2436)", "Delete SimpleType: Iterator(2437)", "Delete SimpleName: String(2438)", "Delete SimpleType: String(2439)", "Delete ParameterizedType: Iterator<String>(2440)", "Delete SimpleName: i(2441)", "Delete SimpleName: getKeys(2442)", "Delete MethodInvocation(2443)", "Delete VariableDeclarationFragment(2444)", "Delete VariableDeclarationStatement(2445)", "Delete SimpleName: i(2446)", "Delete SimpleName: hasNext(2447)", "Delete MethodInvocation(2448)", "Delete Modifier: final(2449)", "Delete SimpleName: String(2450)", "Delete SimpleType: String(2451)", "Delete SimpleName: key(2452)", "Delete SimpleName: i(2453)", "Delete SimpleName: next(2454)", "Delete MethodInvocation(2455)", "Delete VariableDeclarationFragment(2456)", "Delete VariableDeclarationStatement(2457)", "Delete Modifier: final(2458)", "Delete SimpleName: Object(2459)", "Delete SimpleType: Object(2460)", "Delete SimpleName: value(2461)", "Delete SimpleName: get(2462)", "Delete SimpleName: key(2463)", "Delete MethodInvocation(2464)", "Delete VariableDeclarationFragment(2465)", "Delete VariableDeclarationStatement(2466)", "Delete QualifiedName: System.out(2467)", "Delete SimpleName: println(2468)", "Delete SimpleName: key(2469)", "Delete StringLiteral: \" => \"(2470)", "Delete SimpleName: value(2471)", "Delete InfixExpression: +(2472)", "Delete MethodInvocation(2473)", "Delete ExpressionStatement(2474)", "Delete Block(2475)", "Delete WhileStatement(2476)", "Delete Block(2477)", "Delete MethodDeclaration(2478)", "Delete TextElement: Get a string associated with the given configuration key.(2479)", "Delete TagElement(2480)", "Delete SimpleName: key(2481)", "Delete TextElement:  The configuration key.(2482)", "Delete TagElement: @param(2483)", "Delete TextElement:  The associated string.(2484)", "Delete TagElement: @return(2485)", "Delete SimpleName: ClassCastException(2486)", "Delete TextElement:  is thrown if the key maps to an(2487)", "Delete TextElement: object that is not a String.(2488)", "Delete TagElement: @throws(2489)", "Delete Javadoc(2490)", "Delete Modifier: public(2491)", "Delete SimpleName: String(2492)", "Delete SimpleType: String(2493)", "Delete SimpleName: getString(2494)", "Delete Modifier: final(2495)", "Delete SimpleName: String(2496)", "Delete SimpleType: String(2497)", "Delete SimpleName: key(2498)", "Delete SingleVariableDeclaration(2499)", "Delete SimpleName: getString(2500)", "Delete SimpleName: key(2501)", "Delete NullLiteral(2502)", "Delete MethodInvocation(2503)", "Delete ReturnStatement(2504)", "Delete Block(2505)", "Delete MethodDeclaration(2506)", "Delete TextElement: Get a string associated with the given configuration key.(2507)", "Delete TagElement(2508)", "Delete SimpleName: key(2509)", "Delete TextElement:  The configuration key.(2510)", "Delete TagElement: @param(2511)", "Delete SimpleName: defaultValue(2512)", "Delete TextElement:  The default value.(2513)", "Delete TagElement: @param(2514)", "Delete TextElement:  The associated string if key is found,(2515)", "Delete TextElement: default value otherwise.(2516)", "Delete TagElement: @return(2517)", "Delete SimpleName: ClassCastException(2518)", "Delete TextElement:  is thrown if the key maps to an(2519)", "Delete TextElement: object that is not a String.(2520)", "Delete TagElement: @throws(2521)", "Delete Javadoc(2522)", "Delete Modifier: public(2523)", "Delete SimpleName: String(2524)", "Delete SimpleType: String(2525)", "Delete SimpleName: getString(2526)", "Delete Modifier: final(2527)", "Delete SimpleName: String(2528)", "Delete SimpleType: String(2529)", "Delete SimpleName: key(2530)", "Delete SingleVariableDeclaration(2531)", "Delete Modifier: final(2532)", "Delete SimpleName: String(2533)", "Delete SimpleType: String(2534)", "Delete SimpleName: defaultValue(2535)", "Delete SingleVariableDeclaration(2536)", "Delete Modifier: final(2537)", "Delete SimpleName: Object(2538)", "Delete SimpleType: Object(2539)", "Delete SimpleName: value(2540)", "Delete SimpleName: get(2541)", "Delete SimpleName: key(2542)", "Delete MethodInvocation(2543)", "Delete VariableDeclarationFragment(2544)", "Delete VariableDeclarationStatement(2545)", "Delete SimpleName: value(2546)", "Delete SimpleName: String(2547)", "Delete SimpleType: String(2548)", "Delete InstanceofExpression(2549)", "Delete SimpleName: interpolate(2550)", "Delete SimpleName: String(2551)", "Delete SimpleType: String(2552)", "Delete SimpleName: value(2553)", "Delete CastExpression(2554)", "Delete MethodInvocation(2555)", "Delete ReturnStatement(2556)", "Delete Block(2557)", "Delete SimpleName: value(2558)", "Delete NullLiteral(2559)", "Delete InfixExpression: ==(2560)", "Delete SimpleName: defaults(2561)", "Delete NullLiteral(2562)", "Delete InfixExpression: !=(2563)", "Delete SimpleName: interpolate(2564)", "Delete SimpleName: defaults(2565)", "Delete SimpleName: getString(2566)", "Delete SimpleName: key(2567)", "Delete SimpleName: defaultValue(2568)", "Delete MethodInvocation(2569)", "Delete MethodInvocation(2570)", "Delete ReturnStatement(2571)", "Delete Block(2572)", "Delete SimpleName: interpolate(2573)", "Delete SimpleName: defaultValue(2574)", "Delete MethodInvocation(2575)", "Delete ReturnStatement(2576)", "Delete Block(2577)", "Delete IfStatement(2578)", "Delete Block(2579)", "Delete SimpleName: value(2580)", "Delete SimpleName: List(2581)", "Delete SimpleType: List(2582)", "Delete InstanceofExpression(2583)", "Delete SimpleName: SuppressWarnings(2584)", "Delete StringLiteral: \"unchecked\"(2585)", "Delete SingleMemberAnnotation(2586)", "Delete Modifier: final(2587)", "Delete SimpleName: List(2588)", "Delete SimpleType: List(2589)", "Delete SimpleName: String(2590)", "Delete SimpleType: String(2591)", "Delete ParameterizedType: List<String>(2592)", "Delete SimpleName: entry(2593)", "Delete SimpleName: List(2594)", "Delete SimpleType: List(2595)", "Delete SimpleName: String(2596)", "Delete SimpleType: String(2597)", "Delete ParameterizedType: List<String>(2598)", "Delete SimpleName: value(2599)", "Delete CastExpression(2600)", "Delete VariableDeclarationFragment(2601)", "Delete VariableDeclarationStatement(2602)", "Delete SimpleName: interpolate(2603)", "Delete SimpleName: entry(2604)", "Delete SimpleName: get(2605)", "Delete NumberLiteral: 0(2606)", "Delete MethodInvocation(2607)", "Delete MethodInvocation(2608)", "Delete ReturnStatement(2609)", "Delete Block(2610)", "Delete SimpleName: ClassCastException(2611)", "Delete SimpleType: ClassCastException(2612)", "Delete CharacterLiteral: '\\''(2613)", "Delete SimpleName: key(2614)", "Delete StringLiteral: \"' doesn't map to a String object\"(2615)", "Delete InfixExpression: +(2616)", "Delete ClassInstanceCreation(2617)", "Delete ThrowStatement(2618)", "Delete Block(2619)", "Delete IfStatement(2620)", "Delete IfStatement(2621)", "Delete IfStatement(2622)", "Delete Block(2623)", "Delete MethodDeclaration(2624)", "Delete TextElement: Get a list of properties associated with the given(2625)", "Delete TextElement: configuration key.(2626)", "Delete TagElement(2627)", "Delete SimpleName: key(2628)", "Delete TextElement:  The configuration key.(2629)", "Delete TagElement: @param(2630)", "Delete TextElement:  The associated properties if key is found.(2631)", "Delete TagElement: @return(2632)", "Delete SimpleName: ClassCastException(2633)", "Delete TextElement:  is thrown if the key maps to an(2634)", "Delete TextElement: object that is not a String/List.(2635)", "Delete TagElement: @throws(2636)", "Delete SimpleName: IllegalArgumentException(2637)", "Delete TextElement:  if one of the tokens is(2638)", "Delete TextElement: malformed (does not contain an equals sign).(2639)", "Delete TagElement: @throws(2640)", "Delete Javadoc(2641)", "Delete Modifier: public(2642)", "Delete SimpleName: Properties(2643)", "Delete SimpleType: Properties(2644)", "Delete SimpleName: getProperties(2645)", "Delete Modifier: final(2646)", "Delete SimpleName: String(2647)", "Delete SimpleType: String(2648)", "Delete SimpleName: key(2649)", "Delete SingleVariableDeclaration(2650)", "Delete SimpleName: getProperties(2651)", "Delete SimpleName: key(2652)", "Delete SimpleName: Properties(2653)", "Delete SimpleType: Properties(2654)", "Delete ClassInstanceCreation(2655)", "Delete MethodInvocation(2656)", "Delete ReturnStatement(2657)", "Delete Block(2658)", "Delete MethodDeclaration(2659)", "Delete TextElement: Get a list of properties associated with the given(2660)", "Delete TextElement: configuration key.(2661)", "Delete TagElement(2662)", "Delete SimpleName: key(2663)", "Delete TextElement:  The configuration key.(2664)", "Delete TagElement: @param(2665)", "Delete SimpleName: defaults(2666)", "Delete TextElement:  The default properties used to initialize the returned object(2667)", "Delete TagElement: @param(2668)", "Delete TextElement:  The associated properties if key is found.(2669)", "Delete TagElement: @return(2670)", "Delete SimpleName: ClassCastException(2671)", "Delete TextElement:  is thrown if the key maps to an(2672)", "Delete TextElement: object that is not a String/List.(2673)", "Delete TagElement: @throws(2674)", "Delete SimpleName: IllegalArgumentException(2675)", "Delete TextElement:  if one of the tokens is(2676)", "Delete TextElement: malformed (does not contain an equals sign).(2677)", "Delete TagElement: @throws(2678)", "Delete Javadoc(2679)", "Delete Modifier: public(2680)", "Delete SimpleName: Properties(2681)", "Delete SimpleType: Properties(2682)", "Delete SimpleName: getProperties(2683)", "Delete Modifier: final(2684)", "Delete SimpleName: String(2685)", "Delete SimpleType: String(2686)", "Delete SimpleName: key(2687)", "Delete SingleVariableDeclaration(2688)", "Delete Modifier: final(2689)", "Delete SimpleName: Properties(2690)", "Delete SimpleType: Properties(2691)", "Delete SimpleName: defaults(2692)", "Delete SingleVariableDeclaration(2693)", "Delete Modifier: final(2694)", "Delete SimpleName: String(2695)", "Delete SimpleType: String(2696)", "Delete Dimension(2697)", "Delete ArrayType: String[](2698)", "Delete SimpleName: tokens(2699)", "Delete SimpleName: getStringArray(2700)", "Delete SimpleName: key(2701)", "Delete MethodInvocation(2702)", "Delete VariableDeclarationFragment(2703)", "Delete VariableDeclarationStatement(2704)", "Delete Modifier: final(2705)", "Delete SimpleName: Properties(2706)", "Delete SimpleType: Properties(2707)", "Delete SimpleName: props(2708)", "Delete SimpleName: Properties(2709)", "Delete SimpleType: Properties(2710)", "Delete SimpleName: defaults(2711)", "Delete ClassInstanceCreation(2712)", "Delete VariableDeclarationFragment(2713)", "Delete VariableDeclarationStatement(2714)", "Delete Modifier: final(2715)", "Delete SimpleName: String(2716)", "Delete SimpleType: String(2717)", "Delete SimpleName: token(2718)", "Delete SingleVariableDeclaration(2719)", "Delete SimpleName: tokens(2720)", "Delete Modifier: final(2721)", "Delete PrimitiveType: int(2722)", "Delete SimpleName: equalSign(2723)", "Delete SimpleName: token(2724)", "Delete SimpleName: indexOf(2725)", "Delete CharacterLiteral: '='(2726)", "Delete MethodInvocation(2727)", "Delete VariableDeclarationFragment(2728)", "Delete VariableDeclarationStatement(2729)", "Delete SimpleName: equalSign(2730)", "Delete NumberLiteral: 0(2731)", "Delete InfixExpression: >(2732)", "Delete Modifier: final(2733)", "Delete SimpleName: String(2734)", "Delete SimpleType: String(2735)", "Delete SimpleName: pkey(2736)", "Delete SimpleName: token(2737)", "Delete SimpleName: substring(2738)", "Delete NumberLiteral: 0(2739)", "Delete SimpleName: equalSign(2740)", "Delete MethodInvocation(2741)", "Delete SimpleName: trim(2742)", "Delete MethodInvocation(2743)", "Delete VariableDeclarationFragment(2744)", "Delete VariableDeclarationStatement(2745)", "Delete Modifier: final(2746)", "Delete SimpleName: String(2747)", "Delete SimpleType: String(2748)", "Delete SimpleName: pvalue(2749)", "Delete SimpleName: token(2750)", "Delete SimpleName: substring(2751)", "Delete SimpleName: equalSign(2752)", "Delete NumberLiteral: 1(2753)", "Delete InfixExpression: +(2754)", "Delete MethodInvocation(2755)", "Delete SimpleName: trim(2756)", "Delete MethodInvocation(2757)", "Delete VariableDeclarationFragment(2758)", "Delete VariableDeclarationStatement(2759)", "Delete SimpleName: props(2760)", "Delete SimpleName: setProperty(2761)", "Delete SimpleName: pkey(2762)", "Delete SimpleName: pvalue(2763)", "Delete MethodInvocation(2764)", "Delete ExpressionStatement(2765)", "Delete Block(2766)", "Delete SimpleName: IllegalArgumentException(2767)", "Delete SimpleType: IllegalArgumentException(2768)", "Delete CharacterLiteral: '\\''(2769)", "Delete SimpleName: token(2770)", "Delete StringLiteral: \"' does not contain \"(2771)", "Delete StringLiteral: \"an equals sign\"(2772)", "Delete InfixExpression: +(2773)", "Delete ClassInstanceCreation(2774)", "Delete ThrowStatement(2775)", "Delete Block(2776)", "Delete IfStatement(2777)", "Delete Block(2778)", "Delete EnhancedForStatement(2779)", "Delete SimpleName: props(2780)", "Delete ReturnStatement(2781)", "Delete Block(2782)", "Delete MethodDeclaration(2783)", "Delete TextElement: Get an array of strings associated with the given configuration key.(2784)", "Delete TagElement(2785)", "Delete SimpleName: key(2786)", "Delete TextElement:  The configuration key.(2787)", "Delete TagElement: @param(2788)", "Delete TextElement:  The associated string array if key is found.(2789)", "Delete TagElement: @return(2790)", "Delete SimpleName: ClassCastException(2791)", "Delete TextElement:  is thrown if the key maps to an(2792)", "Delete TextElement: object that is not a String/List.(2793)", "Delete TagElement: @throws(2794)", "Delete Javadoc(2795)", "Delete Modifier: public(2796)", "Delete SimpleName: String(2797)", "Delete SimpleType: String(2798)", "Delete Dimension(2799)", "Delete ArrayType: String[](2800)", "Delete SimpleName: getStringArray(2801)", "Delete Modifier: final(2802)", "Delete SimpleName: String(2803)", "Delete SimpleType: String(2804)", "Delete SimpleName: key(2805)", "Delete SingleVariableDeclaration(2806)", "Delete Modifier: final(2807)", "Delete SimpleName: Object(2808)", "Delete SimpleType: Object(2809)", "Delete SimpleName: value(2810)", "Delete SimpleName: get(2811)", "Delete SimpleName: key(2812)", "Delete MethodInvocation(2813)", "Delete VariableDeclarationFragment(2814)", "Delete VariableDeclarationStatement(2815)", "Delete SimpleName: List(2816)", "Delete SimpleType: List(2817)", "Delete SimpleName: String(2818)", "Delete SimpleType: String(2819)", "Delete ParameterizedType: List<String>(2820)", "Delete SimpleName: values(2821)", "Delete VariableDeclarationFragment(2822)", "Delete VariableDeclarationStatement(2823)", "Delete SimpleName: value(2824)", "Delete SimpleName: String(2825)", "Delete SimpleType: String(2826)", "Delete InstanceofExpression(2827)", "Delete SimpleName: values(2828)", "Delete SimpleName: Vector(2829)", "Delete SimpleType: Vector(2830)", "Delete SimpleName: String(2831)", "Delete SimpleType: String(2832)", "Delete ParameterizedType: Vector<String>(2833)", "Delete NumberLiteral: 1(2834)", "Delete ClassInstanceCreation(2835)", "Delete Assignment: =(2836)", "Delete ExpressionStatement(2837)", "Delete SimpleName: values(2838)", "Delete SimpleName: add(2839)", "Delete SimpleName: String(2840)", "Delete SimpleType: String(2841)", "Delete SimpleName: value(2842)", "Delete CastExpression(2843)", "Delete MethodInvocation(2844)", "Delete ExpressionStatement(2845)", "Delete Block(2846)", "Delete SimpleName: value(2847)", "Delete SimpleName: List(2848)", "Delete SimpleType: List(2849)", "Delete InstanceofExpression(2850)", "Delete SimpleName: SuppressWarnings(2851)", "Delete StringLiteral: \"unchecked\"(2852)", "Delete SingleMemberAnnotation(2853)", "Delete Modifier: final(2854)", "Delete SimpleName: List(2855)", "Delete SimpleType: List(2856)", "Delete SimpleName: String(2857)", "Delete SimpleType: String(2858)", "Delete ParameterizedType: List<String>(2859)", "Delete SimpleName: list(2860)", "Delete SimpleName: List(2861)", "Delete SimpleType: List(2862)", "Delete SimpleName: String(2863)", "Delete SimpleType: String(2864)", "Delete ParameterizedType: List<String>(2865)", "Delete SimpleName: value(2866)", "Delete CastExpression(2867)", "Delete VariableDeclarationFragment(2868)", "Delete VariableDeclarationStatement(2869)", "Delete SimpleName: values(2870)", "Delete SimpleName: list(2871)", "Delete Assignment: =(2872)", "Delete ExpressionStatement(2873)", "Delete Block(2874)", "Delete SimpleName: value(2875)", "Delete NullLiteral(2876)", "Delete InfixExpression: ==(2877)", "Delete SimpleName: defaults(2878)", "Delete NullLiteral(2879)", "Delete InfixExpression: !=(2880)", "Delete SimpleName: defaults(2881)", "Delete SimpleName: getStringArray(2882)", "Delete SimpleName: key(2883)", "Delete MethodInvocation(2884)", "Delete ReturnStatement(2885)", "Delete Block(2886)", "Delete SimpleName: String(2887)", "Delete SimpleType: String(2888)", "Delete Dimension(2889)", "Delete ArrayType: String[](2890)", "Delete NumberLiteral: 0(2891)", "Delete ArrayCreation(2892)", "Delete ReturnStatement(2893)", "Delete Block(2894)", "Delete IfStatement(2895)", "Delete Block(2896)", "Delete SimpleName: ClassCastException(2897)", "Delete SimpleType: ClassCastException(2898)", "Delete CharacterLiteral: '\\''(2899)", "Delete SimpleName: key(2900)", "Delete StringLiteral: \"' doesn't map to a String/List object\"(2901)", "Delete InfixExpression: +(2902)", "Delete ClassInstanceCreation(2903)", "Delete ThrowStatement(2904)", "Delete Block(2905)", "Delete IfStatement(2906)", "Delete IfStatement(2907)", "Delete IfStatement(2908)", "Delete Modifier: final(2909)", "Delete SimpleName: String(2910)", "Delete SimpleType: String(2911)", "Delete Dimension(2912)", "Delete ArrayType: String[](2913)", "Delete SimpleName: tokens(2914)", "Delete SimpleName: String(2915)", "Delete SimpleType: String(2916)", "Delete Dimension(2917)", "Delete ArrayType: String[](2918)", "Delete SimpleName: values(2919)", "Delete SimpleName: size(2920)", "Delete MethodInvocation(2921)", "Delete ArrayCreation(2922)", "Delete VariableDeclarationFragment(2923)", "Delete VariableDeclarationStatement(2924)", "Delete PrimitiveType: int(2925)", "Delete SimpleName: i(2926)", "Delete NumberLiteral: 0(2927)", "Delete VariableDeclarationFragment(2928)", "Delete VariableDeclarationExpression(2929)", "Delete SimpleName: i(2930)", "Delete QualifiedName: tokens.length(2931)", "Delete InfixExpression: <(2932)", "Delete SimpleName: i(2933)", "Delete PostfixExpression: ++(2934)", "Delete SimpleName: tokens(2935)", "Delete SimpleName: i(2936)", "Delete ArrayAccess(2937)", "Delete SimpleName: values(2938)", "Delete SimpleName: get(2939)", "Delete SimpleName: i(2940)", "Delete MethodInvocation(2941)", "Delete Assignment: =(2942)", "Delete ExpressionStatement(2943)", "Delete Block(2944)", "Delete ForStatement(2945)", "Delete SimpleName: tokens(2946)", "Delete ReturnStatement(2947)", "Delete Block(2948)", "Delete MethodDeclaration(2949)", "Delete TextElement: Get a Vector of strings associated with the given configuration key.(2950)", "Delete TagElement(2951)", "Delete SimpleName: key(2952)", "Delete TextElement:  The configuration key.(2953)", "Delete TagElement: @param(2954)", "Delete TextElement:  The associated Vector.(2955)", "Delete TagElement: @return(2956)", "Delete SimpleName: ClassCastException(2957)", "Delete TextElement:  is thrown if the key maps to an(2958)", "Delete TextElement: object that is not a Vector.(2959)", "Delete TagElement: @throws(2960)", "Delete Javadoc(2961)", "Delete Modifier: public(2962)", "Delete SimpleName: Vector(2963)", "Delete SimpleType: Vector(2964)", "Delete SimpleName: String(2965)", "Delete SimpleType: String(2966)", "Delete ParameterizedType: Vector<String>(2967)", "Delete SimpleName: getVector(2968)", "Delete Modifier: final(2969)", "Delete SimpleName: String(2970)", "Delete SimpleType: String(2971)", "Delete SimpleName: key(2972)", "Delete SingleVariableDeclaration(2973)", "Delete SimpleName: getVector(2974)", "Delete SimpleName: key(2975)", "Delete NullLiteral(2976)", "Delete MethodInvocation(2977)", "Delete ReturnStatement(2978)", "Delete Block(2979)", "Delete MethodDeclaration(2980)", "Delete TextElement: Get a Vector of strings associated with the given configuration key.(2981)", "Delete TextElement: <p>(2982)", "Delete TextElement: The list is a copy of the internal data of this object, and as(2983)", "Delete TextElement: such you may alter it freely.(2984)", "Delete TagElement(2985)", "Delete SimpleName: key(2986)", "Delete TextElement:  The configuration key.(2987)", "Delete TagElement: @param(2988)", "Delete SimpleName: defaultValue(2989)", "Delete TextElement:  The default value.(2990)", "Delete TagElement: @param(2991)", "Delete TextElement:  The associated Vector.(2992)", "Delete TagElement: @return(2993)", "Delete SimpleName: ClassCastException(2994)", "Delete TextElement:  is thrown if the key maps to an(2995)", "Delete TextElement: object that is not a Vector.(2996)", "Delete TagElement: @throws(2997)", "Delete Javadoc(2998)", "Delete Modifier: public(2999)", "Delete SimpleName: Vector(3000)", "Delete SimpleType: Vector(3001)", "Delete SimpleName: String(3002)", "Delete SimpleType: String(3003)", "Delete ParameterizedType: Vector<String>(3004)", "Delete SimpleName: getVector(3005)", "Delete Modifier: final(3006)", "Delete SimpleName: String(3007)", "Delete SimpleType: String(3008)", "Delete SimpleName: key(3009)", "Delete SingleVariableDeclaration(3010)", "Delete Modifier: final(3011)", "Delete SimpleName: Vector(3012)", "Delete SimpleType: Vector(3013)", "Delete SimpleName: String(3014)", "Delete SimpleType: String(3015)", "Delete ParameterizedType: Vector<String>(3016)", "Delete SimpleName: defaultValue(3017)", "Delete SingleVariableDeclaration(3018)", "Delete Modifier: final(3019)", "Delete SimpleName: Object(3020)", "Delete SimpleType: Object(3021)", "Delete SimpleName: value(3022)", "Delete SimpleName: get(3023)", "Delete SimpleName: key(3024)", "Delete MethodInvocation(3025)", "Delete VariableDeclarationFragment(3026)", "Delete VariableDeclarationStatement(3027)", "Delete SimpleName: value(3028)", "Delete SimpleName: List(3029)", "Delete SimpleType: List(3030)", "Delete InstanceofExpression(3031)", "Delete SimpleName: SuppressWarnings(3032)", "Delete StringLiteral: \"unchecked\"(3033)", "Delete SingleMemberAnnotation(3034)", "Delete Modifier: final(3035)", "Delete SimpleName: List(3036)", "Delete SimpleType: List(3037)", "Delete SimpleName: String(3038)", "Delete SimpleType: String(3039)", "Delete ParameterizedType: List<String>(3040)", "Delete SimpleName: list(3041)", "Delete SimpleName: List(3042)", "Delete SimpleType: List(3043)", "Delete SimpleName: String(3044)", "Delete SimpleType: String(3045)", "Delete ParameterizedType: List<String>(3046)", "Delete SimpleName: value(3047)", "Delete CastExpression(3048)", "Delete VariableDeclarationFragment(3049)", "Delete VariableDeclarationStatement(3050)", "Delete SimpleName: Vector(3051)", "Delete SimpleType: Vector(3052)", "Delete SimpleName: String(3053)", "Delete SimpleType: String(3054)", "Delete ParameterizedType: Vector<String>(3055)", "Delete SimpleName: list(3056)", "Delete ClassInstanceCreation(3057)", "Delete ReturnStatement(3058)", "Delete Block(3059)", "Delete SimpleName: value(3060)", "Delete SimpleName: String(3061)", "Delete SimpleType: String(3062)", "Delete InstanceofExpression(3063)", "Delete Modifier: final(3064)", "Delete SimpleName: Vector(3065)", "Delete SimpleType: Vector(3066)", "Delete SimpleName: String(3067)", "Delete SimpleType: String(3068)", "Delete ParameterizedType: Vector<String>(3069)", "Delete SimpleName: values(3070)", "Delete SimpleName: Vector(3071)", "Delete SimpleType: Vector(3072)", "Delete SimpleName: String(3073)", "Delete SimpleType: String(3074)", "Delete ParameterizedType: Vector<String>(3075)", "Delete NumberLiteral: 1(3076)", "Delete ClassInstanceCreation(3077)", "Delete VariableDeclarationFragment(3078)", "Delete VariableDeclarationStatement(3079)", "Delete SimpleName: values(3080)", "Delete SimpleName: add(3081)", "Delete SimpleName: String(3082)", "Delete SimpleType: String(3083)", "Delete SimpleName: value(3084)", "Delete CastExpression(3085)", "Delete MethodInvocation(3086)", "Delete ExpressionStatement(3087)", "Delete SimpleName: put(3088)", "Delete SimpleName: key(3089)", "Delete SimpleName: values(3090)", "Delete SuperMethodInvocation(3091)", "Delete ExpressionStatement(3092)", "Delete SimpleName: values(3093)", "Delete ReturnStatement(3094)", "Delete Block(3095)", "Delete SimpleName: value(3096)", "Delete NullLiteral(3097)", "Delete InfixExpression: ==(3098)", "Delete SimpleName: defaults(3099)", "Delete NullLiteral(3100)", "Delete InfixExpression: !=(3101)", "Delete SimpleName: defaults(3102)", "Delete SimpleName: getVector(3103)", "Delete SimpleName: key(3104)", "Delete SimpleName: defaultValue(3105)", "Delete MethodInvocation(3106)", "Delete ReturnStatement(3107)", "Delete Block(3108)", "Delete SimpleName: defaultValue(3109)", "Delete NullLiteral(3110)", "Delete InfixExpression: ==(3111)", "Delete SimpleName: Vector(3112)", "Delete SimpleType: Vector(3113)", "Delete SimpleName: String(3114)", "Delete SimpleType: String(3115)", "Delete ParameterizedType: Vector<String>(3116)", "Delete NumberLiteral: 1(3117)", "Delete ClassInstanceCreation(3118)", "Delete SimpleName: defaultValue(3119)", "Delete ConditionalExpression(3120)", "Delete ReturnStatement(3121)", "Delete Block(3122)", "Delete IfStatement(3123)", "Delete Block(3124)", "Delete SimpleName: ClassCastException(3125)", "Delete SimpleType: ClassCastException(3126)", "Delete CharacterLiteral: '\\''(3127)", "Delete SimpleName: key(3128)", "Delete StringLiteral: \"' doesn't map to a Vector object\"(3129)", "Delete InfixExpression: +(3130)", "Delete ClassInstanceCreation(3131)", "Delete ThrowStatement(3132)", "Delete Block(3133)", "Delete IfStatement(3134)", "Delete IfStatement(3135)", "Delete IfStatement(3136)", "Delete Block(3137)", "Delete MethodDeclaration(3138)", "Delete TextElement: Get a List of strings associated with the given configuration key.(3139)", "Delete TextElement: <p>(3140)", "Delete TextElement: The list is a copy of the internal data of this object, and as(3141)", "Delete TextElement: such you may alter it freely.(3142)", "Delete TagElement(3143)", "Delete SimpleName: key(3144)", "Delete TextElement:  The configuration key.(3145)", "Delete TagElement: @param(3146)", "Delete TextElement:  The associated List object.(3147)", "Delete TagElement: @return(3148)", "Delete SimpleName: ClassCastException(3149)", "Delete TextElement:  is thrown if the key maps to an(3150)", "Delete TextElement: object that is not a List.(3151)", "Delete TagElement: @throws(3152)", "Delete TextElement:  3.2(3153)", "Delete TagElement: @since(3154)", "Delete Javadoc(3155)", "Delete Modifier: public(3156)", "Delete SimpleName: List(3157)", "Delete SimpleType: List(3158)", "Delete SimpleName: String(3159)", "Delete SimpleType: String(3160)", "Delete ParameterizedType: List<String>(3161)", "Delete SimpleName: getList(3162)", "Delete Modifier: final(3163)", "Delete SimpleName: String(3164)", "Delete SimpleType: String(3165)", "Delete SimpleName: key(3166)", "Delete SingleVariableDeclaration(3167)", "Delete SimpleName: getList(3168)", "Delete SimpleName: key(3169)", "Delete NullLiteral(3170)", "Delete MethodInvocation(3171)", "Delete ReturnStatement(3172)", "Delete Block(3173)", "Delete MethodDeclaration(3174)", "Delete TextElement: Get a List of strings associated with the given configuration key.(3175)", "Delete TextElement: <p>(3176)", "Delete TextElement: The list is a copy of the internal data of this object, and as(3177)", "Delete TextElement: such you may alter it freely.(3178)", "Delete TagElement(3179)", "Delete SimpleName: key(3180)", "Delete TextElement:  The configuration key.(3181)", "Delete TagElement: @param(3182)", "Delete SimpleName: defaultValue(3183)", "Delete TextElement:  The default value.(3184)", "Delete TagElement: @param(3185)", "Delete TextElement:  The associated List.(3186)", "Delete TagElement: @return(3187)", "Delete SimpleName: ClassCastException(3188)", "Delete TextElement:  is thrown if the key maps to an(3189)", "Delete TextElement: object that is not a List.(3190)", "Delete TagElement: @throws(3191)", "Delete TextElement:  3.2(3192)", "Delete TagElement: @since(3193)", "Delete Javadoc(3194)", "Delete Modifier: public(3195)", "Delete SimpleName: List(3196)", "Delete SimpleType: List(3197)", "Delete SimpleName: String(3198)", "Delete SimpleType: String(3199)", "Delete ParameterizedType: List<String>(3200)", "Delete SimpleName: getList(3201)", "Delete Modifier: final(3202)", "Delete SimpleName: String(3203)", "Delete SimpleType: String(3204)", "Delete SimpleName: key(3205)", "Delete SingleVariableDeclaration(3206)", "Delete Modifier: final(3207)", "Delete SimpleName: List(3208)", "Delete SimpleType: List(3209)", "Delete SimpleName: String(3210)", "Delete SimpleType: String(3211)", "Delete ParameterizedType: List<String>(3212)", "Delete SimpleName: defaultValue(3213)", "Delete SingleVariableDeclaration(3214)", "Delete Modifier: final(3215)", "Delete SimpleName: Object(3216)", "Delete SimpleType: Object(3217)", "Delete SimpleName: value(3218)", "Delete SimpleName: get(3219)", "Delete SimpleName: key(3220)", "Delete MethodInvocation(3221)", "Delete VariableDeclarationFragment(3222)", "Delete VariableDeclarationStatement(3223)", "Delete SimpleName: value(3224)", "Delete SimpleName: List(3225)", "Delete SimpleType: List(3226)", "Delete InstanceofExpression(3227)", "Delete SimpleName: SuppressWarnings(3228)", "Delete StringLiteral: \"unchecked\"(3229)", "Delete SingleMemberAnnotation(3230)", "Delete Modifier: final(3231)", "Delete SimpleName: List(3232)", "Delete SimpleType: List(3233)", "Delete SimpleName: String(3234)", "Delete SimpleType: String(3235)", "Delete ParameterizedType: List<String>(3236)", "Delete SimpleName: list(3237)", "Delete SimpleName: List(3238)", "Delete SimpleType: List(3239)", "Delete SimpleName: String(3240)", "Delete SimpleType: String(3241)", "Delete ParameterizedType: List<String>(3242)", "Delete SimpleName: value(3243)", "Delete CastExpression(3244)", "Delete VariableDeclarationFragment(3245)", "Delete VariableDeclarationStatement(3246)", "Delete SimpleName: ArrayList(3247)", "Delete SimpleType: ArrayList(3248)", "Delete SimpleName: String(3249)", "Delete SimpleType: String(3250)", "Delete ParameterizedType: ArrayList<String>(3251)", "Delete SimpleName: list(3252)", "Delete ClassInstanceCreation(3253)", "Delete ReturnStatement(3254)", "Delete Block(3255)", "Delete SimpleName: value(3256)", "Delete SimpleName: String(3257)", "Delete SimpleType: String(3258)", "Delete InstanceofExpression(3259)", "Delete Modifier: final(3260)", "Delete SimpleName: List(3261)", "Delete SimpleType: List(3262)", "Delete SimpleName: String(3263)", "Delete SimpleType: String(3264)", "Delete ParameterizedType: List<String>(3265)", "Delete SimpleName: values(3266)", "Delete SimpleName: ArrayList(3267)", "Delete SimpleType: ArrayList(3268)", "Delete SimpleName: String(3269)", "Delete SimpleType: String(3270)", "Delete ParameterizedType: ArrayList<String>(3271)", "Delete NumberLiteral: 1(3272)", "Delete ClassInstanceCreation(3273)", "Delete VariableDeclarationFragment(3274)", "Delete VariableDeclarationStatement(3275)", "Delete SimpleName: values(3276)", "Delete SimpleName: add(3277)", "Delete SimpleName: String(3278)", "Delete SimpleType: String(3279)", "Delete SimpleName: value(3280)", "Delete CastExpression(3281)", "Delete MethodInvocation(3282)", "Delete ExpressionStatement(3283)", "Delete SimpleName: put(3284)", "Delete SimpleName: key(3285)", "Delete SimpleName: values(3286)", "Delete SuperMethodInvocation(3287)", "Delete ExpressionStatement(3288)", "Delete SimpleName: values(3289)", "Delete ReturnStatement(3290)", "Delete Block(3291)", "Delete SimpleName: value(3292)", "Delete NullLiteral(3293)", "Delete InfixExpression: ==(3294)", "Delete SimpleName: defaults(3295)", "Delete NullLiteral(3296)", "Delete InfixExpression: !=(3297)", "Delete SimpleName: defaults(3298)", "Delete SimpleName: getList(3299)", "Delete SimpleName: key(3300)", "Delete SimpleName: defaultValue(3301)", "Delete MethodInvocation(3302)", "Delete ReturnStatement(3303)", "Delete Block(3304)", "Delete SimpleName: defaultValue(3305)", "Delete NullLiteral(3306)", "Delete InfixExpression: ==(3307)", "Delete SimpleName: ArrayList(3308)", "Delete SimpleType: ArrayList(3309)", "Delete SimpleName: String(3310)", "Delete SimpleType: String(3311)", "Delete ParameterizedType: ArrayList<String>(3312)", "Delete NumberLiteral: 1(3313)", "Delete ClassInstanceCreation(3314)", "Delete SimpleName: defaultValue(3315)", "Delete ConditionalExpression(3316)", "Delete ReturnStatement(3317)", "Delete Block(3318)", "Delete IfStatement(3319)", "Delete Block(3320)", "Delete SimpleName: ClassCastException(3321)", "Delete SimpleType: ClassCastException(3322)", "Delete CharacterLiteral: '\\''(3323)", "Delete SimpleName: key(3324)", "Delete StringLiteral: \"' doesn't map to a List object\"(3325)", "Delete InfixExpression: +(3326)", "Delete ClassInstanceCreation(3327)", "Delete ThrowStatement(3328)", "Delete Block(3329)", "Delete IfStatement(3330)", "Delete IfStatement(3331)", "Delete IfStatement(3332)", "Delete Block(3333)", "Delete MethodDeclaration(3334)", "Delete TextElement: Get a boolean associated with the given configuration key.(3335)", "Delete TagElement(3336)", "Delete SimpleName: key(3337)", "Delete TextElement:  The configuration key.(3338)", "Delete TagElement: @param(3339)", "Delete TextElement:  The associated boolean.(3340)", "Delete TagElement: @return(3341)", "Delete SimpleName: NoSuchElementException(3342)", "Delete TextElement:  is thrown if the key doesn't(3343)", "Delete TextElement: map to an existing object.(3344)", "Delete TagElement: @throws(3345)", "Delete SimpleName: ClassCastException(3346)", "Delete TextElement:  is thrown if the key maps to an(3347)", "Delete TextElement: object that is not a Boolean.(3348)", "Delete TagElement: @throws(3349)", "Delete Javadoc(3350)", "Delete Modifier: public(3351)", "Delete PrimitiveType: boolean(3352)", "Delete SimpleName: getBoolean(3353)", "Delete Modifier: final(3354)", "Delete SimpleName: String(3355)", "Delete SimpleType: String(3356)", "Delete SimpleName: key(3357)", "Delete SingleVariableDeclaration(3358)", "Delete Modifier: final(3359)", "Delete SimpleName: Boolean(3360)", "Delete SimpleType: Boolean(3361)", "Delete SimpleName: b(3362)", "Delete SimpleName: getBoolean(3363)", "Delete SimpleName: key(3364)", "Delete NullLiteral(3365)", "Delete MethodInvocation(3366)", "Delete VariableDeclarationFragment(3367)", "Delete VariableDeclarationStatement(3368)", "Delete SimpleName: b(3369)", "Delete NullLiteral(3370)", "Delete InfixExpression: !=(3371)", "Delete SimpleName: b(3372)", "Delete SimpleName: booleanValue(3373)", "Delete MethodInvocation(3374)", "Delete ReturnStatement(3375)", "Delete Block(3376)", "Delete SimpleName: NoSuchElementException(3377)", "Delete SimpleType: NoSuchElementException(3378)", "Delete CharacterLiteral: '\\''(3379)", "Delete SimpleName: key(3380)", "Delete StringLiteral: \"' doesn't map to an existing object\"(3381)", "Delete InfixExpression: +(3382)", "Delete ClassInstanceCreation(3383)", "Delete ThrowStatement(3384)", "Delete Block(3385)", "Delete IfStatement(3386)", "Delete Block(3387)", "Delete MethodDeclaration(3388)", "Delete TextElement: Get a boolean associated with the given configuration key.(3389)", "Delete TagElement(3390)", "Delete SimpleName: key(3391)", "Delete TextElement:  The configuration key.(3392)", "Delete TagElement: @param(3393)", "Delete SimpleName: defaultValue(3394)", "Delete TextElement:  The default value.(3395)", "Delete TagElement: @param(3396)", "Delete TextElement:  The associated boolean.(3397)", "Delete TagElement: @return(3398)", "Delete SimpleName: ClassCastException(3399)", "Delete TextElement:  is thrown if the key maps to an(3400)", "Delete TextElement: object that is not a Boolean.(3401)", "Delete TagElement: @throws(3402)", "Delete Javadoc(3403)", "Delete Modifier: public(3404)", "Delete PrimitiveType: boolean(3405)", "Delete SimpleName: getBoolean(3406)", "Delete Modifier: final(3407)", "Delete SimpleName: String(3408)", "Delete SimpleType: String(3409)", "Delete SimpleName: key(3410)", "Delete SingleVariableDeclaration(3411)", "Delete Modifier: final(3412)", "Delete PrimitiveType: boolean(3413)", "Delete SimpleName: defaultValue(3414)", "Delete SingleVariableDeclaration(3415)", "Delete SimpleName: getBoolean(3416)", "Delete SimpleName: key(3417)", "Delete SimpleName: Boolean(3418)", "Delete SimpleName: valueOf(3419)", "Delete SimpleName: defaultValue(3420)", "Delete MethodInvocation(3421)", "Delete MethodInvocation(3422)", "Delete SimpleName: booleanValue(3423)", "Delete MethodInvocation(3424)", "Delete ReturnStatement(3425)", "Delete Block(3426)", "Delete MethodDeclaration(3427)", "Delete TextElement: Get a boolean associated with the given configuration key.(3428)", "Delete TagElement(3429)", "Delete SimpleName: key(3430)", "Delete TextElement:  The configuration key.(3431)", "Delete TagElement: @param(3432)", "Delete SimpleName: defaultValue(3433)", "Delete TextElement:  The default value.(3434)", "Delete TagElement: @param(3435)", "Delete TextElement:  The associated boolean if key is found and has valid(3436)", "Delete TextElement: format, default value otherwise.(3437)", "Delete TagElement: @return(3438)", "Delete SimpleName: ClassCastException(3439)", "Delete TextElement:  is thrown if the key maps to an(3440)", "Delete TextElement: object that is not a Boolean.(3441)", "Delete TagElement: @throws(3442)", "Delete Javadoc(3443)", "Delete Modifier: public(3444)", "Delete SimpleName: Boolean(3445)", "Delete SimpleType: Boolean(3446)", "Delete SimpleName: getBoolean(3447)", "Delete Modifier: final(3448)", "Delete SimpleName: String(3449)", "Delete SimpleType: String(3450)", "Delete SimpleName: key(3451)", "Delete SingleVariableDeclaration(3452)", "Delete Modifier: final(3453)", "Delete SimpleName: Boolean(3454)", "Delete SimpleType: Boolean(3455)", "Delete SimpleName: defaultValue(3456)", "Delete SingleVariableDeclaration(3457)", "Delete Modifier: final(3458)", "Delete SimpleName: Object(3459)", "Delete SimpleType: Object(3460)", "Delete SimpleName: value(3461)", "Delete SimpleName: get(3462)", "Delete SimpleName: key(3463)", "Delete MethodInvocation(3464)", "Delete VariableDeclarationFragment(3465)", "Delete VariableDeclarationStatement(3466)", "Delete SimpleName: value(3467)", "Delete SimpleName: Boolean(3468)", "Delete SimpleType: Boolean(3469)", "Delete InstanceofExpression(3470)", "Delete SimpleName: Boolean(3471)", "Delete SimpleType: Boolean(3472)", "Delete SimpleName: value(3473)", "Delete CastExpression(3474)", "Delete ReturnStatement(3475)", "Delete Block(3476)", "Delete SimpleName: value(3477)", "Delete SimpleName: String(3478)", "Delete SimpleType: String(3479)", "Delete InstanceofExpression(3480)", "Delete Modifier: final(3481)", "Delete SimpleName: String(3482)", "Delete SimpleType: String(3483)", "Delete SimpleName: s(3484)", "Delete SimpleName: testBoolean(3485)", "Delete SimpleName: String(3486)", "Delete SimpleType: String(3487)", "Delete SimpleName: value(3488)", "Delete CastExpression(3489)", "Delete MethodInvocation(3490)", "Delete VariableDeclarationFragment(3491)", "Delete VariableDeclarationStatement(3492)", "Delete Modifier: final(3493)", "Delete SimpleName: Boolean(3494)", "Delete SimpleType: Boolean(3495)", "Delete SimpleName: b(3496)", "Delete SimpleName: Boolean(3497)", "Delete SimpleName: valueOf(3498)", "Delete SimpleName: s(3499)", "Delete MethodInvocation(3500)", "Delete VariableDeclarationFragment(3501)", "Delete VariableDeclarationStatement(3502)", "Delete SimpleName: put(3503)", "Delete SimpleName: key(3504)", "Delete SimpleName: b(3505)", "Delete SuperMethodInvocation(3506)", "Delete ExpressionStatement(3507)", "Delete SimpleName: b(3508)", "Delete ReturnStatement(3509)", "Delete Block(3510)", "Delete SimpleName: value(3511)", "Delete NullLiteral(3512)", "Delete InfixExpression: ==(3513)", "Delete SimpleName: defaults(3514)", "Delete NullLiteral(3515)", "Delete InfixExpression: !=(3516)", "Delete SimpleName: defaults(3517)", "Delete SimpleName: getBoolean(3518)", "Delete SimpleName: key(3519)", "Delete SimpleName: defaultValue(3520)", "Delete MethodInvocation(3521)", "Delete ReturnStatement(3522)", "Delete Block(3523)", "Delete SimpleName: defaultValue(3524)", "Delete ReturnStatement(3525)", "Delete Block(3526)", "Delete IfStatement(3527)", "Delete Block(3528)", "Delete SimpleName: ClassCastException(3529)", "Delete SimpleType: ClassCastException(3530)", "Delete CharacterLiteral: '\\''(3531)", "Delete SimpleName: key(3532)", "Delete StringLiteral: \"' doesn't map to a Boolean object\"(3533)", "Delete InfixExpression: +(3534)", "Delete ClassInstanceCreation(3535)", "Delete ThrowStatement(3536)", "Delete Block(3537)", "Delete IfStatement(3538)", "Delete IfStatement(3539)", "Delete IfStatement(3540)", "Delete Block(3541)", "Delete MethodDeclaration(3542)", "Delete TextElement: Test whether the string represent by value maps to a boolean(3543)", "Delete TextElement: value or not. We will allow <code>true</code>, <code>on</code>,(3544)", "Delete TextElement: and <code>yes</code> for a <code>true</code> boolean value, and(3545)", "Delete TextElement: <code>false</code>, <code>off</code>, and <code>no</code> for(3546)", "Delete TextElement: <code>false</code> boolean values.  Case of value to test for(3547)", "Delete TextElement: boolean status is ignored.(3548)", "Delete TagElement(3549)", "Delete SimpleName: value(3550)", "Delete TextElement:   the value to test for boolean state(3551)", "Delete TagElement: @param(3552)", "Delete TextElement:  <code>true</code> or <code>false</code> if the supplied(3553)", "Delete TextElement: text maps to a boolean value, or <code>null</code> otherwise.(3554)", "Delete TagElement: @return(3555)", "Delete Javadoc(3556)", "Delete Modifier: public(3557)", "Delete SimpleName: String(3558)", "Delete SimpleType: String(3559)", "Delete SimpleName: testBoolean(3560)", "Delete Modifier: final(3561)", "Delete SimpleName: String(3562)", "Delete SimpleType: String(3563)", "Delete SimpleName: value(3564)", "Delete SingleVariableDeclaration(3565)", "Delete Modifier: final(3566)", "Delete SimpleName: String(3567)", "Delete SimpleType: String(3568)", "Delete SimpleName: s(3569)", "Delete SimpleName: value(3570)", "Delete SimpleName: toLowerCase(3571)", "Delete QualifiedName: Locale.ENGLISH(3572)", "Delete MethodInvocation(3573)", "Delete VariableDeclarationFragment(3574)", "Delete VariableDeclarationStatement(3575)", "Delete SimpleName: s(3576)", "Delete SimpleName: equals(3577)", "Delete StringLiteral: \"true\"(3578)", "Delete MethodInvocation(3579)", "Delete SimpleName: s(3580)", "Delete SimpleName: equals(3581)", "Delete StringLiteral: \"on\"(3582)", "Delete MethodInvocation(3583)", "Delete SimpleName: s(3584)", "Delete SimpleName: equals(3585)", "Delete StringLiteral: \"yes\"(3586)", "Delete MethodInvocation(3587)", "Delete InfixExpression: ||(3588)", "Delete StringLiteral: \"true\"(3589)", "Delete ReturnStatement(3590)", "Delete Block(3591)", "Delete SimpleName: s(3592)", "Delete SimpleName: equals(3593)", "Delete StringLiteral: \"false\"(3594)", "Delete MethodInvocation(3595)", "Delete SimpleName: s(3596)", "Delete SimpleName: equals(3597)", "Delete StringLiteral: \"off\"(3598)", "Delete MethodInvocation(3599)", "Delete SimpleName: s(3600)", "Delete SimpleName: equals(3601)", "Delete StringLiteral: \"no\"(3602)", "Delete MethodInvocation(3603)", "Delete InfixExpression: ||(3604)", "Delete StringLiteral: \"false\"(3605)", "Delete ReturnStatement(3606)", "Delete Block(3607)", "Delete NullLiteral(3608)", "Delete ReturnStatement(3609)", "Delete Block(3610)", "Delete IfStatement(3611)", "Delete IfStatement(3612)", "Delete Block(3613)", "Delete MethodDeclaration(3614)", "Delete TextElement: Get a byte associated with the given configuration key.(3615)", "Delete TagElement(3616)", "Delete SimpleName: key(3617)", "Delete TextElement:  The configuration key.(3618)", "Delete TagElement: @param(3619)", "Delete TextElement:  The associated byte.(3620)", "Delete TagElement: @return(3621)", "Delete SimpleName: NoSuchElementException(3622)", "Delete TextElement:  is thrown if the key doesn't(3623)", "Delete TextElement: map to an existing object.(3624)", "Delete TagElement: @throws(3625)", "Delete SimpleName: ClassCastException(3626)", "Delete TextElement:  is thrown if the key maps to an(3627)", "Delete TextElement: object that is not a Byte.(3628)", "Delete TagElement: @throws(3629)", "Delete SimpleName: NumberFormatException(3630)", "Delete TextElement:  is thrown if the value mapped(3631)", "Delete TextElement: by the key has not a valid number format.(3632)", "Delete TagElement: @throws(3633)", "Delete Javadoc(3634)", "Delete Modifier: public(3635)", "Delete PrimitiveType: byte(3636)", "Delete SimpleName: getByte(3637)", "Delete Modifier: final(3638)", "Delete SimpleName: String(3639)", "Delete SimpleType: String(3640)", "Delete SimpleName: key(3641)", "Delete SingleVariableDeclaration(3642)", "Delete Modifier: final(3643)", "Delete SimpleName: Byte(3644)", "Delete SimpleType: Byte(3645)", "Delete SimpleName: b(3646)", "Delete SimpleName: getByte(3647)", "Delete SimpleName: key(3648)", "Delete NullLiteral(3649)", "Delete MethodInvocation(3650)", "Delete VariableDeclarationFragment(3651)", "Delete VariableDeclarationStatement(3652)", "Delete SimpleName: b(3653)", "Delete NullLiteral(3654)", "Delete InfixExpression: !=(3655)", "Delete SimpleName: b(3656)", "Delete SimpleName: byteValue(3657)", "Delete MethodInvocation(3658)", "Delete ReturnStatement(3659)", "Delete Block(3660)", "Delete SimpleName: NoSuchElementException(3661)", "Delete SimpleType: NoSuchElementException(3662)", "Delete CharacterLiteral: '\\''(3663)", "Delete SimpleName: key(3664)", "Delete StringLiteral: \" doesn't map to an existing object\"(3665)", "Delete InfixExpression: +(3666)", "Delete ClassInstanceCreation(3667)", "Delete ThrowStatement(3668)", "Delete Block(3669)", "Delete IfStatement(3670)", "Delete Block(3671)", "Delete MethodDeclaration(3672)", "Delete TextElement: Get a byte associated with the given configuration key.(3673)", "Delete TagElement(3674)", "Delete SimpleName: key(3675)", "Delete TextElement:  The configuration key.(3676)", "Delete TagElement: @param(3677)", "Delete SimpleName: defaultValue(3678)", "Delete TextElement:  The default value.(3679)", "Delete TagElement: @param(3680)", "Delete TextElement:  The associated byte.(3681)", "Delete TagElement: @return(3682)", "Delete SimpleName: ClassCastException(3683)", "Delete TextElement:  is thrown if the key maps to an(3684)", "Delete TextElement: object that is not a Byte.(3685)", "Delete TagElement: @throws(3686)", "Delete SimpleName: NumberFormatException(3687)", "Delete TextElement:  is thrown if the value mapped(3688)", "Delete TextElement: by the key has not a valid number format.(3689)", "Delete TagElement: @throws(3690)", "Delete Javadoc(3691)", "Delete Modifier: public(3692)", "Delete PrimitiveType: byte(3693)", "Delete SimpleName: getByte(3694)", "Delete Modifier: final(3695)", "Delete SimpleName: String(3696)", "Delete SimpleType: String(3697)", "Delete SimpleName: key(3698)", "Delete SingleVariableDeclaration(3699)", "Delete Modifier: final(3700)", "Delete PrimitiveType: byte(3701)", "Delete SimpleName: defaultValue(3702)", "Delete SingleVariableDeclaration(3703)", "Delete SimpleName: getByte(3704)", "Delete SimpleName: key(3705)", "Delete SimpleName: Byte(3706)", "Delete SimpleName: valueOf(3707)", "Delete SimpleName: defaultValue(3708)", "Delete MethodInvocation(3709)", "Delete MethodInvocation(3710)", "Delete SimpleName: byteValue(3711)", "Delete MethodInvocation(3712)", "Delete ReturnStatement(3713)", "Delete Block(3714)", "Delete MethodDeclaration(3715)", "Delete TextElement: Get a byte associated with the given configuration key.(3716)", "Delete TagElement(3717)", "Delete SimpleName: key(3718)", "Delete TextElement:  The configuration key.(3719)", "Delete TagElement: @param(3720)", "Delete SimpleName: defaultValue(3721)", "Delete TextElement:  The default value.(3722)", "Delete TagElement: @param(3723)", "Delete TextElement:  The associated byte if key is found and has valid(3724)", "Delete TextElement: format, default value otherwise.(3725)", "Delete TagElement: @return(3726)", "Delete SimpleName: ClassCastException(3727)", "Delete TextElement:  is thrown if the key maps to an(3728)", "Delete TextElement: object that is not a Byte.(3729)", "Delete TagElement: @throws(3730)", "Delete SimpleName: NumberFormatException(3731)", "Delete TextElement:  is thrown if the value mapped(3732)", "Delete TextElement: by the key has not a valid number format.(3733)", "Delete TagElement: @throws(3734)", "Delete Javadoc(3735)", "Delete Modifier: public(3736)", "Delete SimpleName: Byte(3737)", "Delete SimpleType: Byte(3738)", "Delete SimpleName: getByte(3739)", "Delete Modifier: final(3740)", "Delete SimpleName: String(3741)", "Delete SimpleType: String(3742)", "Delete SimpleName: key(3743)", "Delete SingleVariableDeclaration(3744)", "Delete Modifier: final(3745)", "Delete SimpleName: Byte(3746)", "Delete SimpleType: Byte(3747)", "Delete SimpleName: defaultValue(3748)", "Delete SingleVariableDeclaration(3749)", "Delete Modifier: final(3750)", "Delete SimpleName: Object(3751)", "Delete SimpleType: Object(3752)", "Delete SimpleName: value(3753)", "Delete SimpleName: get(3754)", "Delete SimpleName: key(3755)", "Delete MethodInvocation(3756)", "Delete VariableDeclarationFragment(3757)", "Delete VariableDeclarationStatement(3758)", "Delete SimpleName: value(3759)", "Delete SimpleName: Byte(3760)", "Delete SimpleType: Byte(3761)", "Delete InstanceofExpression(3762)", "Delete SimpleName: Byte(3763)", "Delete SimpleType: Byte(3764)", "Delete SimpleName: value(3765)", "Delete CastExpression(3766)", "Delete ReturnStatement(3767)", "Delete Block(3768)", "Delete SimpleName: value(3769)", "Delete SimpleName: String(3770)", "Delete SimpleType: String(3771)", "Delete InstanceofExpression(3772)", "Delete Modifier: final(3773)", "Delete SimpleName: Byte(3774)", "Delete SimpleType: Byte(3775)", "Delete SimpleName: b(3776)", "Delete SimpleName: Byte(3777)", "Delete SimpleType: Byte(3778)", "Delete SimpleName: String(3779)", "Delete SimpleType: String(3780)", "Delete SimpleName: value(3781)", "Delete CastExpression(3782)", "Delete ClassInstanceCreation(3783)", "Delete VariableDeclarationFragment(3784)", "Delete VariableDeclarationStatement(3785)", "Delete SimpleName: put(3786)", "Delete SimpleName: key(3787)", "Delete SimpleName: b(3788)", "Delete SuperMethodInvocation(3789)", "Delete ExpressionStatement(3790)", "Delete SimpleName: b(3791)", "Delete ReturnStatement(3792)", "Delete Block(3793)", "Delete SimpleName: value(3794)", "Delete NullLiteral(3795)", "Delete InfixExpression: ==(3796)", "Delete SimpleName: defaults(3797)", "Delete NullLiteral(3798)", "Delete InfixExpression: !=(3799)", "Delete SimpleName: defaults(3800)", "Delete SimpleName: getByte(3801)", "Delete SimpleName: key(3802)", "Delete SimpleName: defaultValue(3803)", "Delete MethodInvocation(3804)", "Delete ReturnStatement(3805)", "Delete Block(3806)", "Delete SimpleName: defaultValue(3807)", "Delete ReturnStatement(3808)", "Delete Block(3809)", "Delete IfStatement(3810)", "Delete Block(3811)", "Delete SimpleName: ClassCastException(3812)", "Delete SimpleType: ClassCastException(3813)", "Delete CharacterLiteral: '\\''(3814)", "Delete SimpleName: key(3815)", "Delete StringLiteral: \"' doesn't map to a Byte object\"(3816)", "Delete InfixExpression: +(3817)", "Delete ClassInstanceCreation(3818)", "Delete ThrowStatement(3819)", "Delete Block(3820)", "Delete IfStatement(3821)", "Delete IfStatement(3822)", "Delete IfStatement(3823)", "Delete Block(3824)", "Delete MethodDeclaration(3825)", "Delete TextElement: Get a short associated with the given configuration key.(3826)", "Delete TagElement(3827)", "Delete SimpleName: key(3828)", "Delete TextElement:  The configuration key.(3829)", "Delete TagElement: @param(3830)", "Delete TextElement:  The associated short.(3831)", "Delete TagElement: @return(3832)", "Delete SimpleName: NoSuchElementException(3833)", "Delete TextElement:  is thrown if the key doesn't(3834)", "Delete TextElement: map to an existing object.(3835)", "Delete TagElement: @throws(3836)", "Delete SimpleName: ClassCastException(3837)", "Delete TextElement:  is thrown if the key maps to an(3838)", "Delete TextElement: object that is not a Short.(3839)", "Delete TagElement: @throws(3840)", "Delete SimpleName: NumberFormatException(3841)", "Delete TextElement:  is thrown if the value mapped(3842)", "Delete TextElement: by the key has not a valid number format.(3843)", "Delete TagElement: @throws(3844)", "Delete Javadoc(3845)", "Delete Modifier: public(3846)", "Delete PrimitiveType: short(3847)", "Delete SimpleName: getShort(3848)", "Delete Modifier: final(3849)", "Delete SimpleName: String(3850)", "Delete SimpleType: String(3851)", "Delete SimpleName: key(3852)", "Delete SingleVariableDeclaration(3853)", "Delete Modifier: final(3854)", "Delete SimpleName: Short(3855)", "Delete SimpleType: Short(3856)", "Delete SimpleName: s(3857)", "Delete SimpleName: getShort(3858)", "Delete SimpleName: key(3859)", "Delete NullLiteral(3860)", "Delete MethodInvocation(3861)", "Delete VariableDeclarationFragment(3862)", "Delete VariableDeclarationStatement(3863)", "Delete SimpleName: s(3864)", "Delete NullLiteral(3865)", "Delete InfixExpression: !=(3866)", "Delete SimpleName: s(3867)", "Delete SimpleName: shortValue(3868)", "Delete MethodInvocation(3869)", "Delete ReturnStatement(3870)", "Delete Block(3871)", "Delete SimpleName: NoSuchElementException(3872)", "Delete SimpleType: NoSuchElementException(3873)", "Delete CharacterLiteral: '\\''(3874)", "Delete SimpleName: key(3875)", "Delete StringLiteral: \"' doesn't map to an existing object\"(3876)", "Delete InfixExpression: +(3877)", "Delete ClassInstanceCreation(3878)", "Delete ThrowStatement(3879)", "Delete Block(3880)", "Delete IfStatement(3881)", "Delete Block(3882)", "Delete MethodDeclaration(3883)", "Delete TextElement: Get a short associated with the given configuration key.(3884)", "Delete TagElement(3885)", "Delete SimpleName: key(3886)", "Delete TextElement:  The configuration key.(3887)", "Delete TagElement: @param(3888)", "Delete SimpleName: defaultValue(3889)", "Delete TextElement:  The default value.(3890)", "Delete TagElement: @param(3891)", "Delete TextElement:  The associated short.(3892)", "Delete TagElement: @return(3893)", "Delete SimpleName: ClassCastException(3894)", "Delete TextElement:  is thrown if the key maps to an(3895)", "Delete TextElement: object that is not a Short.(3896)", "Delete TagElement: @throws(3897)", "Delete SimpleName: NumberFormatException(3898)", "Delete TextElement:  is thrown if the value mapped(3899)", "Delete TextElement: by the key has not a valid number format.(3900)", "Delete TagElement: @throws(3901)", "Delete Javadoc(3902)", "Delete Modifier: public(3903)", "Delete PrimitiveType: short(3904)", "Delete SimpleName: getShort(3905)", "Delete Modifier: final(3906)", "Delete SimpleName: String(3907)", "Delete SimpleType: String(3908)", "Delete SimpleName: key(3909)", "Delete SingleVariableDeclaration(3910)", "Delete Modifier: final(3911)", "Delete PrimitiveType: short(3912)", "Delete SimpleName: defaultValue(3913)", "Delete SingleVariableDeclaration(3914)", "Delete SimpleName: getShort(3915)", "Delete SimpleName: key(3916)", "Delete SimpleName: Short(3917)", "Delete SimpleName: valueOf(3918)", "Delete SimpleName: defaultValue(3919)", "Delete MethodInvocation(3920)", "Delete MethodInvocation(3921)", "Delete SimpleName: shortValue(3922)", "Delete MethodInvocation(3923)", "Delete ReturnStatement(3924)", "Delete Block(3925)", "Delete MethodDeclaration(3926)", "Delete TextElement: Get a short associated with the given configuration key.(3927)", "Delete TagElement(3928)", "Delete SimpleName: key(3929)", "Delete TextElement:  The configuration key.(3930)", "Delete TagElement: @param(3931)", "Delete SimpleName: defaultValue(3932)", "Delete TextElement:  The default value.(3933)", "Delete TagElement: @param(3934)", "Delete TextElement:  The associated short if key is found and has valid(3935)", "Delete TextElement: format, default value otherwise.(3936)", "Delete TagElement: @return(3937)", "Delete SimpleName: ClassCastException(3938)", "Delete TextElement:  is thrown if the key maps to an(3939)", "Delete TextElement: object that is not a Short.(3940)", "Delete TagElement: @throws(3941)", "Delete SimpleName: NumberFormatException(3942)", "Delete TextElement:  is thrown if the value mapped(3943)", "Delete TextElement: by the key has not a valid number format.(3944)", "Delete TagElement: @throws(3945)", "Delete Javadoc(3946)", "Delete Modifier: public(3947)", "Delete SimpleName: Short(3948)", "Delete SimpleType: Short(3949)", "Delete SimpleName: getShort(3950)", "Delete Modifier: final(3951)", "Delete SimpleName: String(3952)", "Delete SimpleType: String(3953)", "Delete SimpleName: key(3954)", "Delete SingleVariableDeclaration(3955)", "Delete Modifier: final(3956)", "Delete SimpleName: Short(3957)", "Delete SimpleType: Short(3958)", "Delete SimpleName: defaultValue(3959)", "Delete SingleVariableDeclaration(3960)", "Delete Modifier: final(3961)", "Delete SimpleName: Object(3962)", "Delete SimpleType: Object(3963)", "Delete SimpleName: value(3964)", "Delete SimpleName: get(3965)", "Delete SimpleName: key(3966)", "Delete MethodInvocation(3967)", "Delete VariableDeclarationFragment(3968)", "Delete VariableDeclarationStatement(3969)", "Delete SimpleName: value(3970)", "Delete SimpleName: Short(3971)", "Delete SimpleType: Short(3972)", "Delete InstanceofExpression(3973)", "Delete SimpleName: Short(3974)", "Delete SimpleType: Short(3975)", "Delete SimpleName: value(3976)", "Delete CastExpression(3977)", "Delete ReturnStatement(3978)", "Delete Block(3979)", "Delete SimpleName: value(3980)", "Delete SimpleName: String(3981)", "Delete SimpleType: String(3982)", "Delete InstanceofExpression(3983)", "Delete Modifier: final(3984)", "Delete SimpleName: Short(3985)", "Delete SimpleType: Short(3986)", "Delete SimpleName: s(3987)", "Delete SimpleName: Short(3988)", "Delete SimpleType: Short(3989)", "Delete SimpleName: String(3990)", "Delete SimpleType: String(3991)", "Delete SimpleName: value(3992)", "Delete CastExpression(3993)", "Delete ClassInstanceCreation(3994)", "Delete VariableDeclarationFragment(3995)", "Delete VariableDeclarationStatement(3996)", "Delete SimpleName: put(3997)", "Delete SimpleName: key(3998)", "Delete SimpleName: s(3999)", "Delete SuperMethodInvocation(4000)", "Delete ExpressionStatement(4001)", "Delete SimpleName: s(4002)", "Delete ReturnStatement(4003)", "Delete Block(4004)", "Delete SimpleName: value(4005)", "Delete NullLiteral(4006)", "Delete InfixExpression: ==(4007)", "Delete SimpleName: defaults(4008)", "Delete NullLiteral(4009)", "Delete InfixExpression: !=(4010)", "Delete SimpleName: defaults(4011)", "Delete SimpleName: getShort(4012)", "Delete SimpleName: key(4013)", "Delete SimpleName: defaultValue(4014)", "Delete MethodInvocation(4015)", "Delete ReturnStatement(4016)", "Delete Block(4017)", "Delete SimpleName: defaultValue(4018)", "Delete ReturnStatement(4019)", "Delete Block(4020)", "Delete IfStatement(4021)", "Delete Block(4022)", "Delete SimpleName: ClassCastException(4023)", "Delete SimpleType: ClassCastException(4024)", "Delete CharacterLiteral: '\\''(4025)", "Delete SimpleName: key(4026)", "Delete StringLiteral: \"' doesn't map to a Short object\"(4027)", "Delete InfixExpression: +(4028)", "Delete ClassInstanceCreation(4029)", "Delete ThrowStatement(4030)", "Delete Block(4031)", "Delete IfStatement(4032)", "Delete IfStatement(4033)", "Delete IfStatement(4034)", "Delete Block(4035)", "Delete MethodDeclaration(4036)", "Delete TextElement: The purpose of this method is to get the configuration resource(4037)", "Delete TextElement: with the given name as an integer.(4038)", "Delete TagElement(4039)", "Delete SimpleName: name(4040)", "Delete TextElement:  The resource name.(4041)", "Delete TagElement: @param(4042)", "Delete TextElement:  The value of the resource as an integer.(4043)", "Delete TagElement: @return(4044)", "Delete Javadoc(4045)", "Delete Modifier: public(4046)", "Delete PrimitiveType: int(4047)", "Delete SimpleName: getInt(4048)", "Delete Modifier: final(4049)", "Delete SimpleName: String(4050)", "Delete SimpleType: String(4051)", "Delete SimpleName: name(4052)", "Delete SingleVariableDeclaration(4053)", "Delete SimpleName: getInteger(4054)", "Delete SimpleName: name(4055)", "Delete MethodInvocation(4056)", "Delete ReturnStatement(4057)", "Delete Block(4058)", "Delete MethodDeclaration(4059)", "Delete TextElement: The purpose of this method is to get the configuration resource(4060)", "Delete TextElement: with the given name as an integer, or a default value.(4061)", "Delete TagElement(4062)", "Delete SimpleName: name(4063)", "Delete TextElement:  The resource name(4064)", "Delete TagElement: @param(4065)", "Delete SimpleName: def(4066)", "Delete TextElement:  The default value of the resource.(4067)", "Delete TagElement: @param(4068)", "Delete TextElement:  The value of the resource as an integer.(4069)", "Delete TagElement: @return(4070)", "Delete Javadoc(4071)", "Delete Modifier: public(4072)", "Delete PrimitiveType: int(4073)", "Delete SimpleName: getInt(4074)", "Delete Modifier: final(4075)", "Delete SimpleName: String(4076)", "Delete SimpleType: String(4077)", "Delete SimpleName: name(4078)", "Delete SingleVariableDeclaration(4079)", "Delete Modifier: final(4080)", "Delete PrimitiveType: int(4081)", "Delete SimpleName: def(4082)", "Delete SingleVariableDeclaration(4083)", "Delete SimpleName: getInteger(4084)", "Delete SimpleName: name(4085)", "Delete SimpleName: def(4086)", "Delete MethodInvocation(4087)", "Delete ReturnStatement(4088)", "Delete Block(4089)", "Delete MethodDeclaration(4090)", "Delete TextElement: Get a int associated with the given configuration key.(4091)", "Delete TagElement(4092)", "Delete SimpleName: key(4093)", "Delete TextElement:  The configuration key.(4094)", "Delete TagElement: @param(4095)", "Delete TextElement:  The associated int.(4096)", "Delete TagElement: @return(4097)", "Delete SimpleName: NoSuchElementException(4098)", "Delete TextElement:  is thrown if the key doesn't(4099)", "Delete TextElement: map to an existing object.(4100)", "Delete TagElement: @throws(4101)", "Delete SimpleName: ClassCastException(4102)", "Delete TextElement:  is thrown if the key maps to an(4103)", "Delete TextElement: object that is not a Integer.(4104)", "Delete TagElement: @throws(4105)", "Delete SimpleName: NumberFormatException(4106)", "Delete TextElement:  is thrown if the value mapped(4107)", "Delete TextElement: by the key has not a valid number format.(4108)", "Delete TagElement: @throws(4109)", "Delete Javadoc(4110)", "Delete Modifier: public(4111)", "Delete PrimitiveType: int(4112)", "Delete SimpleName: getInteger(4113)", "Delete Modifier: final(4114)", "Delete SimpleName: String(4115)", "Delete SimpleType: String(4116)", "Delete SimpleName: key(4117)", "Delete SingleVariableDeclaration(4118)", "Delete Modifier: final(4119)", "Delete SimpleName: Integer(4120)", "Delete SimpleType: Integer(4121)", "Delete SimpleName: i(4122)", "Delete SimpleName: getInteger(4123)", "Delete SimpleName: key(4124)", "Delete NullLiteral(4125)", "Delete MethodInvocation(4126)", "Delete VariableDeclarationFragment(4127)", "Delete VariableDeclarationStatement(4128)", "Delete SimpleName: i(4129)", "Delete NullLiteral(4130)", "Delete InfixExpression: !=(4131)", "Delete SimpleName: i(4132)", "Delete SimpleName: intValue(4133)", "Delete MethodInvocation(4134)", "Delete ReturnStatement(4135)", "Delete Block(4136)", "Delete SimpleName: NoSuchElementException(4137)", "Delete SimpleType: NoSuchElementException(4138)", "Delete CharacterLiteral: '\\''(4139)", "Delete SimpleName: key(4140)", "Delete StringLiteral: \"' doesn't map to an existing object\"(4141)", "Delete InfixExpression: +(4142)", "Delete ClassInstanceCreation(4143)", "Delete ThrowStatement(4144)", "Delete Block(4145)", "Delete IfStatement(4146)", "Delete Block(4147)", "Delete MethodDeclaration(4148)", "Delete TextElement: Get a int associated with the given configuration key.(4149)", "Delete TagElement(4150)", "Delete SimpleName: key(4151)", "Delete TextElement:  The configuration key.(4152)", "Delete TagElement: @param(4153)", "Delete SimpleName: defaultValue(4154)", "Delete TextElement:  The default value.(4155)", "Delete TagElement: @param(4156)", "Delete TextElement:  The associated int.(4157)", "Delete TagElement: @return(4158)", "Delete SimpleName: ClassCastException(4159)", "Delete TextElement:  is thrown if the key maps to an(4160)", "Delete TextElement: object that is not a Integer.(4161)", "Delete TagElement: @throws(4162)", "Delete SimpleName: NumberFormatException(4163)", "Delete TextElement:  is thrown if the value mapped(4164)", "Delete TextElement: by the key has not a valid number format.(4165)", "Delete TagElement: @throws(4166)", "Delete Javadoc(4167)", "Delete Modifier: public(4168)", "Delete PrimitiveType: int(4169)", "Delete SimpleName: getInteger(4170)", "Delete Modifier: final(4171)", "Delete SimpleName: String(4172)", "Delete SimpleType: String(4173)", "Delete SimpleName: key(4174)", "Delete SingleVariableDeclaration(4175)", "Delete Modifier: final(4176)", "Delete PrimitiveType: int(4177)", "Delete SimpleName: defaultValue(4178)", "Delete SingleVariableDeclaration(4179)", "Delete Modifier: final(4180)", "Delete SimpleName: Integer(4181)", "Delete SimpleType: Integer(4182)", "Delete SimpleName: i(4183)", "Delete SimpleName: getInteger(4184)", "Delete SimpleName: key(4185)", "Delete NullLiteral(4186)", "Delete MethodInvocation(4187)", "Delete VariableDeclarationFragment(4188)", "Delete VariableDeclarationStatement(4189)", "Delete SimpleName: i(4190)", "Delete NullLiteral(4191)", "Delete InfixExpression: ==(4192)", "Delete SimpleName: defaultValue(4193)", "Delete ReturnStatement(4194)", "Delete Block(4195)", "Delete IfStatement(4196)", "Delete SimpleName: i(4197)", "Delete SimpleName: intValue(4198)", "Delete MethodInvocation(4199)", "Delete ReturnStatement(4200)", "Delete Block(4201)", "Delete MethodDeclaration(4202)", "Delete TextElement: Get a int associated with the given configuration key.(4203)", "Delete TagElement(4204)", "Delete SimpleName: key(4205)", "Delete TextElement:  The configuration key.(4206)", "Delete TagElement: @param(4207)", "Delete SimpleName: defaultValue(4208)", "Delete TextElement:  The default value.(4209)", "Delete TagElement: @param(4210)", "Delete TextElement:  The associated int if key is found and has valid(4211)", "Delete TextElement: format, default value otherwise.(4212)", "Delete TagElement: @return(4213)", "Delete SimpleName: ClassCastException(4214)", "Delete TextElement:  is thrown if the key maps to an(4215)", "Delete TextElement: object that is not a Integer.(4216)", "Delete TagElement: @throws(4217)", "Delete SimpleName: NumberFormatException(4218)", "Delete TextElement:  is thrown if the value mapped(4219)", "Delete TextElement: by the key has not a valid number format.(4220)", "Delete TagElement: @throws(4221)", "Delete Javadoc(4222)", "Delete Modifier: public(4223)", "Delete SimpleName: Integer(4224)", "Delete SimpleType: Integer(4225)", "Delete SimpleName: getInteger(4226)", "Delete Modifier: final(4227)", "Delete SimpleName: String(4228)", "Delete SimpleType: String(4229)", "Delete SimpleName: key(4230)", "Delete SingleVariableDeclaration(4231)", "Delete Modifier: final(4232)", "Delete SimpleName: Integer(4233)", "Delete SimpleType: Integer(4234)", "Delete SimpleName: defaultValue(4235)", "Delete SingleVariableDeclaration(4236)", "Delete Modifier: final(4237)", "Delete SimpleName: Object(4238)", "Delete SimpleType: Object(4239)", "Delete SimpleName: value(4240)", "Delete SimpleName: get(4241)", "Delete SimpleName: key(4242)", "Delete MethodInvocation(4243)", "Delete VariableDeclarationFragment(4244)", "Delete VariableDeclarationStatement(4245)", "Delete SimpleName: value(4246)", "Delete SimpleName: Integer(4247)", "Delete SimpleType: Integer(4248)", "Delete InstanceofExpression(4249)", "Delete SimpleName: Integer(4250)", "Delete SimpleType: Integer(4251)", "Delete SimpleName: value(4252)", "Delete CastExpression(4253)", "Delete ReturnStatement(4254)", "Delete Block(4255)", "Delete SimpleName: value(4256)", "Delete SimpleName: String(4257)", "Delete SimpleType: String(4258)", "Delete InstanceofExpression(4259)", "Delete Modifier: final(4260)", "Delete SimpleName: Integer(4261)", "Delete SimpleType: Integer(4262)", "Delete SimpleName: i(4263)", "Delete SimpleName: Integer(4264)", "Delete SimpleType: Integer(4265)", "Delete SimpleName: String(4266)", "Delete SimpleType: String(4267)", "Delete SimpleName: value(4268)", "Delete CastExpression(4269)", "Delete ClassInstanceCreation(4270)", "Delete VariableDeclarationFragment(4271)", "Delete VariableDeclarationStatement(4272)", "Delete SimpleName: put(4273)", "Delete SimpleName: key(4274)", "Delete SimpleName: i(4275)", "Delete SuperMethodInvocation(4276)", "Delete ExpressionStatement(4277)", "Delete SimpleName: i(4278)", "Delete ReturnStatement(4279)", "Delete Block(4280)", "Delete SimpleName: value(4281)", "Delete NullLiteral(4282)", "Delete InfixExpression: ==(4283)", "Delete SimpleName: defaults(4284)", "Delete NullLiteral(4285)", "Delete InfixExpression: !=(4286)", "Delete SimpleName: defaults(4287)", "Delete SimpleName: getInteger(4288)", "Delete SimpleName: key(4289)", "Delete SimpleName: defaultValue(4290)", "Delete MethodInvocation(4291)", "Delete ReturnStatement(4292)", "Delete Block(4293)", "Delete SimpleName: defaultValue(4294)", "Delete ReturnStatement(4295)", "Delete Block(4296)", "Delete IfStatement(4297)", "Delete Block(4298)", "Delete SimpleName: ClassCastException(4299)", "Delete SimpleType: ClassCastException(4300)", "Delete CharacterLiteral: '\\''(4301)", "Delete SimpleName: key(4302)", "Delete StringLiteral: \"' doesn't map to a Integer object\"(4303)", "Delete InfixExpression: +(4304)", "Delete ClassInstanceCreation(4305)", "Delete ThrowStatement(4306)", "Delete Block(4307)", "Delete IfStatement(4308)", "Delete IfStatement(4309)", "Delete IfStatement(4310)", "Delete Block(4311)", "Delete MethodDeclaration(4312)", "Delete TextElement: Get a long associated with the given configuration key.(4313)", "Delete TagElement(4314)", "Delete SimpleName: key(4315)", "Delete TextElement:  The configuration key.(4316)", "Delete TagElement: @param(4317)", "Delete TextElement:  The associated long.(4318)", "Delete TagElement: @return(4319)", "Delete SimpleName: NoSuchElementException(4320)", "Delete TextElement:  is thrown if the key doesn't(4321)", "Delete TextElement: map to an existing object.(4322)", "Delete TagElement: @throws(4323)", "Delete SimpleName: ClassCastException(4324)", "Delete TextElement:  is thrown if the key maps to an(4325)", "Delete TextElement: object that is not a Long.(4326)", "Delete TagElement: @throws(4327)", "Delete SimpleName: NumberFormatException(4328)", "Delete TextElement:  is thrown if the value mapped(4329)", "Delete TextElement: by the key has not a valid number format.(4330)", "Delete TagElement: @throws(4331)", "Delete Javadoc(4332)", "Delete Modifier: public(4333)", "Delete PrimitiveType: long(4334)", "Delete SimpleName: getLong(4335)", "Delete Modifier: final(4336)", "Delete SimpleName: String(4337)", "Delete SimpleType: String(4338)", "Delete SimpleName: key(4339)", "Delete SingleVariableDeclaration(4340)", "Delete Modifier: final(4341)", "Delete SimpleName: Long(4342)", "Delete SimpleType: Long(4343)", "Delete SimpleName: l(4344)", "Delete SimpleName: getLong(4345)", "Delete SimpleName: key(4346)", "Delete NullLiteral(4347)", "Delete MethodInvocation(4348)", "Delete VariableDeclarationFragment(4349)", "Delete VariableDeclarationStatement(4350)", "Delete SimpleName: l(4351)", "Delete NullLiteral(4352)", "Delete InfixExpression: !=(4353)", "Delete SimpleName: l(4354)", "Delete SimpleName: longValue(4355)", "Delete MethodInvocation(4356)", "Delete ReturnStatement(4357)", "Delete Block(4358)", "Delete SimpleName: NoSuchElementException(4359)", "Delete SimpleType: NoSuchElementException(4360)", "Delete CharacterLiteral: '\\''(4361)", "Delete SimpleName: key(4362)", "Delete StringLiteral: \"' doesn't map to an existing object\"(4363)", "Delete InfixExpression: +(4364)", "Delete ClassInstanceCreation(4365)", "Delete ThrowStatement(4366)", "Delete Block(4367)", "Delete IfStatement(4368)", "Delete Block(4369)", "Delete MethodDeclaration(4370)", "Delete TextElement: Get a long associated with the given configuration key.(4371)", "Delete TagElement(4372)", "Delete SimpleName: key(4373)", "Delete TextElement:  The configuration key.(4374)", "Delete TagElement: @param(4375)", "Delete SimpleName: defaultValue(4376)", "Delete TextElement:  The default value.(4377)", "Delete TagElement: @param(4378)", "Delete TextElement:  The associated long.(4379)", "Delete TagElement: @return(4380)", "Delete SimpleName: ClassCastException(4381)", "Delete TextElement:  is thrown if the key maps to an(4382)", "Delete TextElement: object that is not a Long.(4383)", "Delete TagElement: @throws(4384)", "Delete SimpleName: NumberFormatException(4385)", "Delete TextElement:  is thrown if the value mapped(4386)", "Delete TextElement: by the key has not a valid number format.(4387)", "Delete TagElement: @throws(4388)", "Delete Javadoc(4389)", "Delete Modifier: public(4390)", "Delete PrimitiveType: long(4391)", "Delete SimpleName: getLong(4392)", "Delete Modifier: final(4393)", "Delete SimpleName: String(4394)", "Delete SimpleType: String(4395)", "Delete SimpleName: key(4396)", "Delete SingleVariableDeclaration(4397)", "Delete Modifier: final(4398)", "Delete PrimitiveType: long(4399)", "Delete SimpleName: defaultValue(4400)", "Delete SingleVariableDeclaration(4401)", "Delete SimpleName: getLong(4402)", "Delete SimpleName: key(4403)", "Delete SimpleName: Long(4404)", "Delete SimpleName: valueOf(4405)", "Delete SimpleName: defaultValue(4406)", "Delete MethodInvocation(4407)", "Delete MethodInvocation(4408)", "Delete SimpleName: longValue(4409)", "Delete MethodInvocation(4410)", "Delete ReturnStatement(4411)", "Delete Block(4412)", "Delete MethodDeclaration(4413)", "Delete TextElement: Get a long associated with the given configuration key.(4414)", "Delete TagElement(4415)", "Delete SimpleName: key(4416)", "Delete TextElement:  The configuration key.(4417)", "Delete TagElement: @param(4418)", "Delete SimpleName: defaultValue(4419)", "Delete TextElement:  The default value.(4420)", "Delete TagElement: @param(4421)", "Delete TextElement:  The associated long if key is found and has valid(4422)", "Delete TextElement: format, default value otherwise.(4423)", "Delete TagElement: @return(4424)", "Delete SimpleName: ClassCastException(4425)", "Delete TextElement:  is thrown if the key maps to an(4426)", "Delete TextElement: object that is not a Long.(4427)", "Delete TagElement: @throws(4428)", "Delete SimpleName: NumberFormatException(4429)", "Delete TextElement:  is thrown if the value mapped(4430)", "Delete TextElement: by the key has not a valid number format.(4431)", "Delete TagElement: @throws(4432)", "Delete Javadoc(4433)", "Delete Modifier: public(4434)", "Delete SimpleName: Long(4435)", "Delete SimpleType: Long(4436)", "Delete SimpleName: getLong(4437)", "Delete Modifier: final(4438)", "Delete SimpleName: String(4439)", "Delete SimpleType: String(4440)", "Delete SimpleName: key(4441)", "Delete SingleVariableDeclaration(4442)", "Delete Modifier: final(4443)", "Delete SimpleName: Long(4444)", "Delete SimpleType: Long(4445)", "Delete SimpleName: defaultValue(4446)", "Delete SingleVariableDeclaration(4447)", "Delete Modifier: final(4448)", "Delete SimpleName: Object(4449)", "Delete SimpleType: Object(4450)", "Delete SimpleName: value(4451)", "Delete SimpleName: get(4452)", "Delete SimpleName: key(4453)", "Delete MethodInvocation(4454)", "Delete VariableDeclarationFragment(4455)", "Delete VariableDeclarationStatement(4456)", "Delete SimpleName: value(4457)", "Delete SimpleName: Long(4458)", "Delete SimpleType: Long(4459)", "Delete InstanceofExpression(4460)", "Delete SimpleName: Long(4461)", "Delete SimpleType: Long(4462)", "Delete SimpleName: value(4463)", "Delete CastExpression(4464)", "Delete ReturnStatement(4465)", "Delete Block(4466)", "Delete SimpleName: value(4467)", "Delete SimpleName: String(4468)", "Delete SimpleType: String(4469)", "Delete InstanceofExpression(4470)", "Delete Modifier: final(4471)", "Delete SimpleName: Long(4472)", "Delete SimpleType: Long(4473)", "Delete SimpleName: l(4474)", "Delete SimpleName: Long(4475)", "Delete SimpleType: Long(4476)", "Delete SimpleName: String(4477)", "Delete SimpleType: String(4478)", "Delete SimpleName: value(4479)", "Delete CastExpression(4480)", "Delete ClassInstanceCreation(4481)", "Delete VariableDeclarationFragment(4482)", "Delete VariableDeclarationStatement(4483)", "Delete SimpleName: put(4484)", "Delete SimpleName: key(4485)", "Delete SimpleName: l(4486)", "Delete SuperMethodInvocation(4487)", "Delete ExpressionStatement(4488)", "Delete SimpleName: l(4489)", "Delete ReturnStatement(4490)", "Delete Block(4491)", "Delete SimpleName: value(4492)", "Delete NullLiteral(4493)", "Delete InfixExpression: ==(4494)", "Delete SimpleName: defaults(4495)", "Delete NullLiteral(4496)", "Delete InfixExpression: !=(4497)", "Delete SimpleName: defaults(4498)", "Delete SimpleName: getLong(4499)", "Delete SimpleName: key(4500)", "Delete SimpleName: defaultValue(4501)", "Delete MethodInvocation(4502)", "Delete ReturnStatement(4503)", "Delete Block(4504)", "Delete SimpleName: defaultValue(4505)", "Delete ReturnStatement(4506)", "Delete Block(4507)", "Delete IfStatement(4508)", "Delete Block(4509)", "Delete SimpleName: ClassCastException(4510)", "Delete SimpleType: ClassCastException(4511)", "Delete CharacterLiteral: '\\''(4512)", "Delete SimpleName: key(4513)", "Delete StringLiteral: \"' doesn't map to a Long object\"(4514)", "Delete InfixExpression: +(4515)", "Delete ClassInstanceCreation(4516)", "Delete ThrowStatement(4517)", "Delete Block(4518)", "Delete IfStatement(4519)", "Delete IfStatement(4520)", "Delete IfStatement(4521)", "Delete Block(4522)", "Delete MethodDeclaration(4523)", "Delete TextElement: Get a float associated with the given configuration key.(4524)", "Delete TagElement(4525)", "Delete SimpleName: key(4526)", "Delete TextElement:  The configuration key.(4527)", "Delete TagElement: @param(4528)", "Delete TextElement:  The associated float.(4529)", "Delete TagElement: @return(4530)", "Delete SimpleName: NoSuchElementException(4531)", "Delete TextElement:  is thrown if the key doesn't(4532)", "Delete TextElement: map to an existing object.(4533)", "Delete TagElement: @throws(4534)", "Delete SimpleName: ClassCastException(4535)", "Delete TextElement:  is thrown if the key maps to an(4536)", "Delete TextElement: object that is not a Float.(4537)", "Delete TagElement: @throws(4538)", "Delete SimpleName: NumberFormatException(4539)", "Delete TextElement:  is thrown if the value mapped(4540)", "Delete TextElement: by the key has not a valid number format.(4541)", "Delete TagElement: @throws(4542)", "Delete Javadoc(4543)", "Delete Modifier: public(4544)", "Delete PrimitiveType: float(4545)", "Delete SimpleName: getFloat(4546)", "Delete Modifier: final(4547)", "Delete SimpleName: String(4548)", "Delete SimpleType: String(4549)", "Delete SimpleName: key(4550)", "Delete SingleVariableDeclaration(4551)", "Delete Modifier: final(4552)", "Delete SimpleName: Float(4553)", "Delete SimpleType: Float(4554)", "Delete SimpleName: f(4555)", "Delete SimpleName: getFloat(4556)", "Delete SimpleName: key(4557)", "Delete NullLiteral(4558)", "Delete MethodInvocation(4559)", "Delete VariableDeclarationFragment(4560)", "Delete VariableDeclarationStatement(4561)", "Delete SimpleName: f(4562)", "Delete NullLiteral(4563)", "Delete InfixExpression: !=(4564)", "Delete SimpleName: f(4565)", "Delete SimpleName: floatValue(4566)", "Delete MethodInvocation(4567)", "Delete ReturnStatement(4568)", "Delete Block(4569)", "Delete SimpleName: NoSuchElementException(4570)", "Delete SimpleType: NoSuchElementException(4571)", "Delete CharacterLiteral: '\\''(4572)", "Delete SimpleName: key(4573)", "Delete StringLiteral: \"' doesn't map to an existing object\"(4574)", "Delete InfixExpression: +(4575)", "Delete ClassInstanceCreation(4576)", "Delete ThrowStatement(4577)", "Delete Block(4578)", "Delete IfStatement(4579)", "Delete Block(4580)", "Delete MethodDeclaration(4581)", "Delete TextElement: Get a float associated with the given configuration key.(4582)", "Delete TagElement(4583)", "Delete SimpleName: key(4584)", "Delete TextElement:  The configuration key.(4585)", "Delete TagElement: @param(4586)", "Delete SimpleName: defaultValue(4587)", "Delete TextElement:  The default value.(4588)", "Delete TagElement: @param(4589)", "Delete TextElement:  The associated float.(4590)", "Delete TagElement: @return(4591)", "Delete SimpleName: ClassCastException(4592)", "Delete TextElement:  is thrown if the key maps to an(4593)", "Delete TextElement: object that is not a Float.(4594)", "Delete TagElement: @throws(4595)", "Delete SimpleName: NumberFormatException(4596)", "Delete TextElement:  is thrown if the value mapped(4597)", "Delete TextElement: by the key has not a valid number format.(4598)", "Delete TagElement: @throws(4599)", "Delete Javadoc(4600)", "Delete Modifier: public(4601)", "Delete PrimitiveType: float(4602)", "Delete SimpleName: getFloat(4603)", "Delete Modifier: final(4604)", "Delete SimpleName: String(4605)", "Delete SimpleType: String(4606)", "Delete SimpleName: key(4607)", "Delete SingleVariableDeclaration(4608)", "Delete Modifier: final(4609)", "Delete PrimitiveType: float(4610)", "Delete SimpleName: defaultValue(4611)", "Delete SingleVariableDeclaration(4612)", "Delete SimpleName: getFloat(4613)", "Delete SimpleName: key(4614)", "Delete SimpleName: Float(4615)", "Delete SimpleType: Float(4616)", "Delete SimpleName: defaultValue(4617)", "Delete ClassInstanceCreation(4618)", "Delete MethodInvocation(4619)", "Delete SimpleName: floatValue(4620)", "Delete MethodInvocation(4621)", "Delete ReturnStatement(4622)", "Delete Block(4623)", "Delete MethodDeclaration(4624)", "Delete TextElement: Get a float associated with the given configuration key.(4625)", "Delete TagElement(4626)", "Delete SimpleName: key(4627)", "Delete TextElement:  The configuration key.(4628)", "Delete TagElement: @param(4629)", "Delete SimpleName: defaultValue(4630)", "Delete TextElement:  The default value.(4631)", "Delete TagElement: @param(4632)", "Delete TextElement:  The associated float if key is found and has valid(4633)", "Delete TextElement: format, default value otherwise.(4634)", "Delete TagElement: @return(4635)", "Delete SimpleName: ClassCastException(4636)", "Delete TextElement:  is thrown if the key maps to an(4637)", "Delete TextElement: object that is not a Float.(4638)", "Delete TagElement: @throws(4639)", "Delete SimpleName: NumberFormatException(4640)", "Delete TextElement:  is thrown if the value mapped(4641)", "Delete TextElement: by the key has not a valid number format.(4642)", "Delete TagElement: @throws(4643)", "Delete Javadoc(4644)", "Delete Modifier: public(4645)", "Delete SimpleName: Float(4646)", "Delete SimpleType: Float(4647)", "Delete SimpleName: getFloat(4648)", "Delete Modifier: final(4649)", "Delete SimpleName: String(4650)", "Delete SimpleType: String(4651)", "Delete SimpleName: key(4652)", "Delete SingleVariableDeclaration(4653)", "Delete Modifier: final(4654)", "Delete SimpleName: Float(4655)", "Delete SimpleType: Float(4656)", "Delete SimpleName: defaultValue(4657)", "Delete SingleVariableDeclaration(4658)", "Delete Modifier: final(4659)", "Delete SimpleName: Object(4660)", "Delete SimpleType: Object(4661)", "Delete SimpleName: value(4662)", "Delete SimpleName: get(4663)", "Delete SimpleName: key(4664)", "Delete MethodInvocation(4665)", "Delete VariableDeclarationFragment(4666)", "Delete VariableDeclarationStatement(4667)", "Delete SimpleName: value(4668)", "Delete SimpleName: Float(4669)", "Delete SimpleType: Float(4670)", "Delete InstanceofExpression(4671)", "Delete SimpleName: Float(4672)", "Delete SimpleType: Float(4673)", "Delete SimpleName: value(4674)", "Delete CastExpression(4675)", "Delete ReturnStatement(4676)", "Delete Block(4677)", "Delete SimpleName: value(4678)", "Delete SimpleName: String(4679)", "Delete SimpleType: String(4680)", "Delete InstanceofExpression(4681)", "Delete Modifier: final(4682)", "Delete SimpleName: Float(4683)", "Delete SimpleType: Float(4684)", "Delete SimpleName: f(4685)", "Delete SimpleName: Float(4686)", "Delete SimpleType: Float(4687)", "Delete SimpleName: String(4688)", "Delete SimpleType: String(4689)", "Delete SimpleName: value(4690)", "Delete CastExpression(4691)", "Delete ClassInstanceCreation(4692)", "Delete VariableDeclarationFragment(4693)", "Delete VariableDeclarationStatement(4694)", "Delete SimpleName: put(4695)", "Delete SimpleName: key(4696)", "Delete SimpleName: f(4697)", "Delete SuperMethodInvocation(4698)", "Delete ExpressionStatement(4699)", "Delete SimpleName: f(4700)", "Delete ReturnStatement(4701)", "Delete Block(4702)", "Delete SimpleName: value(4703)", "Delete NullLiteral(4704)", "Delete InfixExpression: ==(4705)", "Delete SimpleName: defaults(4706)", "Delete NullLiteral(4707)", "Delete InfixExpression: !=(4708)", "Delete SimpleName: defaults(4709)", "Delete SimpleName: getFloat(4710)", "Delete SimpleName: key(4711)", "Delete SimpleName: defaultValue(4712)", "Delete MethodInvocation(4713)", "Delete ReturnStatement(4714)", "Delete Block(4715)", "Delete SimpleName: defaultValue(4716)", "Delete ReturnStatement(4717)", "Delete Block(4718)", "Delete IfStatement(4719)", "Delete Block(4720)", "Delete SimpleName: ClassCastException(4721)", "Delete SimpleType: ClassCastException(4722)", "Delete CharacterLiteral: '\\''(4723)", "Delete SimpleName: key(4724)", "Delete StringLiteral: \"' doesn't map to a Float object\"(4725)", "Delete InfixExpression: +(4726)", "Delete ClassInstanceCreation(4727)", "Delete ThrowStatement(4728)", "Delete Block(4729)", "Delete IfStatement(4730)", "Delete IfStatement(4731)", "Delete IfStatement(4732)", "Delete Block(4733)", "Delete MethodDeclaration(4734)", "Delete TextElement: Get a double associated with the given configuration key.(4735)", "Delete TagElement(4736)", "Delete SimpleName: key(4737)", "Delete TextElement:  The configuration key.(4738)", "Delete TagElement: @param(4739)", "Delete TextElement:  The associated double.(4740)", "Delete TagElement: @return(4741)", "Delete SimpleName: NoSuchElementException(4742)", "Delete TextElement:  is thrown if the key doesn't(4743)", "Delete TextElement: map to an existing object.(4744)", "Delete TagElement: @throws(4745)", "Delete SimpleName: ClassCastException(4746)", "Delete TextElement:  is thrown if the key maps to an(4747)", "Delete TextElement: object that is not a Double.(4748)", "Delete TagElement: @throws(4749)", "Delete SimpleName: NumberFormatException(4750)", "Delete TextElement:  is thrown if the value mapped(4751)", "Delete TextElement: by the key has not a valid number format.(4752)", "Delete TagElement: @throws(4753)", "Delete Javadoc(4754)", "Delete Modifier: public(4755)", "Delete PrimitiveType: double(4756)", "Delete SimpleName: getDouble(4757)", "Delete Modifier: final(4758)", "Delete SimpleName: String(4759)", "Delete SimpleType: String(4760)", "Delete SimpleName: key(4761)", "Delete SingleVariableDeclaration(4762)", "Delete Modifier: final(4763)", "Delete SimpleName: Double(4764)", "Delete SimpleType: Double(4765)", "Delete SimpleName: d(4766)", "Delete SimpleName: getDouble(4767)", "Delete SimpleName: key(4768)", "Delete NullLiteral(4769)", "Delete MethodInvocation(4770)", "Delete VariableDeclarationFragment(4771)", "Delete VariableDeclarationStatement(4772)", "Delete SimpleName: d(4773)", "Delete NullLiteral(4774)", "Delete InfixExpression: !=(4775)", "Delete SimpleName: d(4776)", "Delete SimpleName: doubleValue(4777)", "Delete MethodInvocation(4778)", "Delete ReturnStatement(4779)", "Delete Block(4780)", "Delete SimpleName: NoSuchElementException(4781)", "Delete SimpleType: NoSuchElementException(4782)", "Delete CharacterLiteral: '\\''(4783)", "Delete SimpleName: key(4784)", "Delete StringLiteral: \"' doesn't map to an existing object\"(4785)", "Delete InfixExpression: +(4786)", "Delete ClassInstanceCreation(4787)", "Delete ThrowStatement(4788)", "Delete Block(4789)", "Delete IfStatement(4790)", "Delete Block(4791)", "Delete MethodDeclaration(4792)", "Delete TextElement: Get a double associated with the given configuration key.(4793)", "Delete TagElement(4794)", "Delete SimpleName: key(4795)", "Delete TextElement:  The configuration key.(4796)", "Delete TagElement: @param(4797)", "Delete SimpleName: defaultValue(4798)", "Delete TextElement:  The default value.(4799)", "Delete TagElement: @param(4800)", "Delete TextElement:  The associated double.(4801)", "Delete TagElement: @return(4802)", "Delete SimpleName: ClassCastException(4803)", "Delete TextElement:  is thrown if the key maps to an(4804)", "Delete TextElement: object that is not a Double.(4805)", "Delete TagElement: @throws(4806)", "Delete SimpleName: NumberFormatException(4807)", "Delete TextElement:  is thrown if the value mapped(4808)", "Delete TextElement: by the key has not a valid number format.(4809)", "Delete TagElement: @throws(4810)", "Delete Javadoc(4811)", "Delete Modifier: public(4812)", "Delete PrimitiveType: double(4813)", "Delete SimpleName: getDouble(4814)", "Delete Modifier: final(4815)", "Delete SimpleName: String(4816)", "Delete SimpleType: String(4817)", "Delete SimpleName: key(4818)", "Delete SingleVariableDeclaration(4819)", "Delete Modifier: final(4820)", "Delete PrimitiveType: double(4821)", "Delete SimpleName: defaultValue(4822)", "Delete SingleVariableDeclaration(4823)", "Delete SimpleName: getDouble(4824)", "Delete SimpleName: key(4825)", "Delete SimpleName: Double(4826)", "Delete SimpleType: Double(4827)", "Delete SimpleName: defaultValue(4828)", "Delete ClassInstanceCreation(4829)", "Delete MethodInvocation(4830)", "Delete SimpleName: doubleValue(4831)", "Delete MethodInvocation(4832)", "Delete ReturnStatement(4833)", "Delete Block(4834)", "Delete MethodDeclaration(4835)", "Delete TextElement: Get a double associated with the given configuration key.(4836)", "Delete TagElement(4837)", "Delete SimpleName: key(4838)", "Delete TextElement:  The configuration key.(4839)", "Delete TagElement: @param(4840)", "Delete SimpleName: defaultValue(4841)", "Delete TextElement:  The default value.(4842)", "Delete TagElement: @param(4843)", "Delete TextElement:  The associated double if key is found and has valid(4844)", "Delete TextElement: format, default value otherwise.(4845)", "Delete TagElement: @return(4846)", "Delete SimpleName: ClassCastException(4847)", "Delete TextElement:  is thrown if the key maps to an(4848)", "Delete TextElement: object that is not a Double.(4849)", "Delete TagElement: @throws(4850)", "Delete SimpleName: NumberFormatException(4851)", "Delete TextElement:  is thrown if the value mapped(4852)", "Delete TextElement: by the key has not a valid number format.(4853)", "Delete TagElement: @throws(4854)", "Delete Javadoc(4855)", "Delete Modifier: public(4856)", "Delete SimpleName: Double(4857)", "Delete SimpleType: Double(4858)", "Delete SimpleName: getDouble(4859)", "Delete Modifier: final(4860)", "Delete SimpleName: String(4861)", "Delete SimpleType: String(4862)", "Delete SimpleName: key(4863)", "Delete SingleVariableDeclaration(4864)", "Delete Modifier: final(4865)", "Delete SimpleName: Double(4866)", "Delete SimpleType: Double(4867)", "Delete SimpleName: defaultValue(4868)", "Delete SingleVariableDeclaration(4869)", "Delete Modifier: final(4870)", "Delete SimpleName: Object(4871)", "Delete SimpleType: Object(4872)", "Delete SimpleName: value(4873)", "Delete SimpleName: get(4874)", "Delete SimpleName: key(4875)", "Delete MethodInvocation(4876)", "Delete VariableDeclarationFragment(4877)", "Delete VariableDeclarationStatement(4878)", "Delete SimpleName: value(4879)", "Delete SimpleName: Double(4880)", "Delete SimpleType: Double(4881)", "Delete InstanceofExpression(4882)", "Delete SimpleName: Double(4883)", "Delete SimpleType: Double(4884)", "Delete SimpleName: value(4885)", "Delete CastExpression(4886)", "Delete ReturnStatement(4887)", "Delete Block(4888)", "Delete SimpleName: value(4889)", "Delete SimpleName: String(4890)", "Delete SimpleType: String(4891)", "Delete InstanceofExpression(4892)", "Delete Modifier: final(4893)", "Delete SimpleName: Double(4894)", "Delete SimpleType: Double(4895)", "Delete SimpleName: d(4896)", "Delete SimpleName: Double(4897)", "Delete SimpleType: Double(4898)", "Delete SimpleName: String(4899)", "Delete SimpleType: String(4900)", "Delete SimpleName: value(4901)", "Delete CastExpression(4902)", "Delete ClassInstanceCreation(4903)", "Delete VariableDeclarationFragment(4904)", "Delete VariableDeclarationStatement(4905)", "Delete SimpleName: put(4906)", "Delete SimpleName: key(4907)", "Delete SimpleName: d(4908)", "Delete SuperMethodInvocation(4909)", "Delete ExpressionStatement(4910)", "Delete SimpleName: d(4911)", "Delete ReturnStatement(4912)", "Delete Block(4913)", "Delete SimpleName: value(4914)", "Delete NullLiteral(4915)", "Delete InfixExpression: ==(4916)", "Delete SimpleName: defaults(4917)", "Delete NullLiteral(4918)", "Delete InfixExpression: !=(4919)", "Delete SimpleName: defaults(4920)", "Delete SimpleName: getDouble(4921)", "Delete SimpleName: key(4922)", "Delete SimpleName: defaultValue(4923)", "Delete MethodInvocation(4924)", "Delete ReturnStatement(4925)", "Delete Block(4926)", "Delete SimpleName: defaultValue(4927)", "Delete ReturnStatement(4928)", "Delete Block(4929)", "Delete IfStatement(4930)", "Delete Block(4931)", "Delete SimpleName: ClassCastException(4932)", "Delete SimpleType: ClassCastException(4933)", "Delete CharacterLiteral: '\\''(4934)", "Delete SimpleName: key(4935)", "Delete StringLiteral: \"' doesn't map to a Double object\"(4936)", "Delete InfixExpression: +(4937)", "Delete ClassInstanceCreation(4938)", "Delete ThrowStatement(4939)", "Delete Block(4940)", "Delete IfStatement(4941)", "Delete IfStatement(4942)", "Delete IfStatement(4943)", "Delete Block(4944)", "Delete MethodDeclaration(4945)", "Delete TextElement: Convert a standard properties class into a configuration class.(4946)", "Delete TextElement: <p>(4947)", "Delete TextElement: NOTE: From Commons Collections 3.2 this method will pick up(4948)", "Delete TextElement: any default parent Properties of the specified input object.(4949)", "Delete TextElement: <p>(4950)", "Delete TextElement: As with java.util.Properties(Properties), any non-String (4951)", "Delete TextElement: values will not be passed on in the new ExtendedProperties (4952)", "Delete TextElement: object.(4953)", "Delete TagElement(4954)", "Delete SimpleName: props(4955)", "Delete TextElement:   the properties object to convert(4956)", "Delete TagElement: @param(4957)", "Delete TextElement:  new ExtendedProperties created from props(4958)", "Delete TagElement: @return(4959)", "Delete Javadoc(4960)", "Delete Modifier: public(4961)", "Delete Modifier: static(4962)", "Delete SimpleName: ExtendedProperties(4963)", "Delete SimpleType: ExtendedProperties(4964)", "Delete SimpleName: convertProperties(4965)", "Delete Modifier: final(4966)", "Delete SimpleName: Properties(4967)", "Delete SimpleType: Properties(4968)", "Delete SimpleName: props(4969)", "Delete SingleVariableDeclaration(4970)", "Delete Modifier: final(4971)", "Delete SimpleName: ExtendedProperties(4972)", "Delete SimpleType: ExtendedProperties(4973)", "Delete SimpleName: c(4974)", "Delete SimpleName: ExtendedProperties(4975)", "Delete SimpleType: ExtendedProperties(4976)", "Delete ClassInstanceCreation(4977)", "Delete VariableDeclarationFragment(4978)", "Delete VariableDeclarationStatement(4979)", "Delete SimpleName: SuppressWarnings(4980)", "Delete StringLiteral: \"unchecked\"(4981)", "Delete SingleMemberAnnotation(4982)", "Delete Modifier: final(4983)", "Delete SimpleName: Enumeration(4984)", "Delete SimpleType: Enumeration(4985)", "Delete SimpleName: String(4986)", "Delete SimpleType: String(4987)", "Delete ParameterizedType: Enumeration<String>(4988)", "Delete SimpleName: e(4989)", "Delete SimpleName: Enumeration(4990)", "Delete SimpleType: Enumeration(4991)", "Delete SimpleName: String(4992)", "Delete SimpleType: String(4993)", "Delete ParameterizedType: Enumeration<String>(4994)", "Delete SimpleName: props(4995)", "Delete SimpleName: propertyNames(4996)", "Delete MethodInvocation(4997)", "Delete CastExpression(4998)", "Delete VariableDeclarationFragment(4999)", "Delete VariableDeclarationStatement(5000)", "Delete SimpleName: e(5001)", "Delete SimpleName: hasMoreElements(5002)", "Delete MethodInvocation(5003)", "Delete Modifier: final(5004)", "Delete SimpleName: String(5005)", "Delete SimpleType: String(5006)", "Delete SimpleName: s(5007)", "Delete SimpleName: e(5008)", "Delete SimpleName: nextElement(5009)", "Delete MethodInvocation(5010)", "Delete VariableDeclarationFragment(5011)", "Delete VariableDeclarationStatement(5012)", "Delete Modifier: final(5013)", "Delete SimpleName: String(5014)", "Delete SimpleType: String(5015)", "Delete SimpleName: value(5016)", "Delete SimpleName: props(5017)", "Delete SimpleName: getProperty(5018)", "Delete SimpleName: s(5019)", "Delete MethodInvocation(5020)", "Delete VariableDeclarationFragment(5021)", "Delete VariableDeclarationStatement(5022)", "Delete SimpleName: value(5023)", "Delete NullLiteral(5024)", "Delete InfixExpression: !=(5025)", "Delete SimpleName: c(5026)", "Delete SimpleName: setProperty(5027)", "Delete SimpleName: s(5028)", "Delete SimpleName: value(5029)", "Delete MethodInvocation(5030)", "Delete ExpressionStatement(5031)", "Delete Block(5032)", "Delete IfStatement(5033)", "Delete Block(5034)", "Delete WhileStatement(5035)", "Delete SimpleName: c(5036)", "Delete ReturnStatement(5037)", "Delete Block(5038)", "Delete MethodDeclaration(5039)", "Delete TextElement: Add a new property specified by the key to the (5040)", "Delete TextElement: ExtendedProperties.(5041)", "Delete TagElement(5042)", "Delete SimpleName: key(5043)", "Delete TextElement:  specifying the property(5044)", "Delete TagElement: @param(5045)", "Delete SimpleName: value(5046)", "Delete TextElement:  for the property(5047)", "Delete TagElement: @param(5048)", "Delete TextElement:  old value of the property(5049)", "Delete TagElement: @return(5050)", "Delete Javadoc(5051)", "Delete SimpleName: Override(5052)", "Delete MarkerAnnotation(5053)", "Delete Modifier: public(5054)", "Delete SimpleName: Object(5055)", "Delete SimpleType: Object(5056)", "Delete SimpleName: put(5057)", "Delete Modifier: final(5058)", "Delete SimpleName: String(5059)", "Delete SimpleType: String(5060)", "Delete SimpleName: key(5061)", "Delete SingleVariableDeclaration(5062)", "Delete Modifier: final(5063)", "Delete SimpleName: Object(5064)", "Delete SimpleType: Object(5065)", "Delete SimpleName: value(5066)", "Delete SingleVariableDeclaration(5067)", "Delete Modifier: final(5068)", "Delete SimpleName: Object(5069)", "Delete SimpleType: Object(5070)", "Delete SimpleName: ret(5071)", "Delete SimpleName: getProperty(5072)", "Delete SimpleName: key(5073)", "Delete MethodInvocation(5074)", "Delete VariableDeclarationFragment(5075)", "Delete VariableDeclarationStatement(5076)", "Delete SimpleName: addProperty(5077)", "Delete SimpleName: key(5078)", "Delete SimpleName: value(5079)", "Delete MethodInvocation(5080)", "Delete ExpressionStatement(5081)", "Delete SimpleName: ret(5082)", "Delete ReturnStatement(5083)", "Delete Block(5084)", "Delete MethodDeclaration(5085)", "Delete TextElement: Add a map full of key/value pairs to the ExtendedProperties. (5086)", "Delete TextElement: If the added map is an ExtendedProperties class, then the (5087)", "Delete TextElement: order of the added properties is maintained. (5088)", "Delete TagElement(5089)", "Delete SimpleName: map(5090)", "Delete TextElement:  full of key/value pair data(5091)", "Delete TagElement: @param(5092)", "Delete Javadoc(5093)", "Delete SimpleName: Override(5094)", "Delete MarkerAnnotation(5095)", "Delete Modifier: public(5096)", "Delete PrimitiveType: void(5097)", "Delete SimpleName: putAll(5098)", "Delete Modifier: final(5099)", "Delete SimpleName: Map(5100)", "Delete SimpleType: Map(5101)", "Delete SimpleName: String(5102)", "Delete SimpleType: String(5103)", "Delete WildcardType: ? extends String(5104)", "Delete SimpleName: Object(5105)", "Delete SimpleType: Object(5106)", "Delete WildcardType: ? extends Object(5107)", "Delete ParameterizedType: Map<? extends String,? extends Object>(5108)", "Delete SimpleName: map(5109)", "Delete SingleVariableDeclaration(5110)", "Delete SimpleName: map(5111)", "Delete SimpleName: ExtendedProperties(5112)", "Delete SimpleType: ExtendedProperties(5113)", "Delete InstanceofExpression(5114)", "Delete Modifier: final(5115)", "Delete SimpleName: Iterator(5116)", "Delete SimpleType: Iterator(5117)", "Delete SimpleName: String(5118)", "Delete SimpleType: String(5119)", "Delete ParameterizedType: Iterator<String>(5120)", "Delete SimpleName: it(5121)", "Delete SimpleName: ExtendedProperties(5122)", "Delete SimpleType: ExtendedProperties(5123)", "Delete SimpleName: map(5124)", "Delete CastExpression(5125)", "Delete ParenthesizedExpression(5126)", "Delete SimpleName: getKeys(5127)", "Delete MethodInvocation(5128)", "Delete VariableDeclarationFragment(5129)", "Delete VariableDeclarationExpression(5130)", "Delete SimpleName: it(5131)", "Delete SimpleName: hasNext(5132)", "Delete MethodInvocation(5133)", "Delete Modifier: final(5134)", "Delete SimpleName: String(5135)", "Delete SimpleType: String(5136)", "Delete SimpleName: key(5137)", "Delete SimpleName: it(5138)", "Delete SimpleName: next(5139)", "Delete MethodInvocation(5140)", "Delete VariableDeclarationFragment(5141)", "Delete VariableDeclarationStatement(5142)", "Delete SimpleName: put(5143)", "Delete SimpleName: key(5144)", "Delete SimpleName: map(5145)", "Delete SimpleName: get(5146)", "Delete SimpleName: key(5147)", "Delete MethodInvocation(5148)", "Delete MethodInvocation(5149)", "Delete ExpressionStatement(5150)", "Delete Block(5151)", "Delete ForStatement(5152)", "Delete Block(5153)", "Delete SimpleName: SuppressWarnings(5154)", "Delete StringLiteral: \"unchecked\"(5155)", "Delete SingleMemberAnnotation(5156)", "Delete Modifier: final(5157)", "Delete SimpleName: Map(5158)", "Delete SimpleType: Map(5159)", "Delete SimpleName: String(5160)", "Delete SimpleType: String(5161)", "Delete SimpleName: Object(5162)", "Delete SimpleType: Object(5163)", "Delete ParameterizedType: Map<String,Object>(5164)", "Delete SimpleName: mapso(5165)", "Delete SimpleName: Map(5166)", "Delete SimpleType: Map(5167)", "Delete SimpleName: String(5168)", "Delete SimpleType: String(5169)", "Delete SimpleName: Object(5170)", "Delete SimpleType: Object(5171)", "Delete ParameterizedType: Map<String,Object>(5172)", "Delete SimpleName: map(5173)", "Delete CastExpression(5174)", "Delete VariableDeclarationFragment(5175)", "Delete VariableDeclarationStatement(5176)", "Delete Modifier: final(5177)", "Delete QualifiedName: java.util.Map.Entry(5178)", "Delete SimpleType: java.util.Map.Entry(5179)", "Delete SimpleName: String(5180)", "Delete SimpleType: String(5181)", "Delete SimpleName: Object(5182)", "Delete SimpleType: Object(5183)", "Delete ParameterizedType: java.util.Map.Entry<String,Object>(5184)", "Delete SimpleName: entry(5185)", "Delete SingleVariableDeclaration(5186)", "Delete SimpleName: mapso(5187)", "Delete SimpleName: entrySet(5188)", "Delete MethodInvocation(5189)", "Delete SimpleName: put(5190)", "Delete SimpleName: entry(5191)", "Delete SimpleName: getKey(5192)", "Delete MethodInvocation(5193)", "Delete SimpleName: entry(5194)", "Delete SimpleName: getValue(5195)", "Delete MethodInvocation(5196)", "Delete MethodInvocation(5197)", "Delete ExpressionStatement(5198)", "Delete Block(5199)", "Delete EnhancedForStatement(5200)", "Delete Block(5201)", "Delete IfStatement(5202)", "Delete Block(5203)", "Delete MethodDeclaration(5204)", "Delete TextElement: Remove the property specified by the key from the (5205)", "Delete TextElement: ExtendedProperties.(5206)", "Delete TagElement(5207)", "Delete SimpleName: key(5208)", "Delete TextElement:  specifying the property(5209)", "Delete TagElement: @param(5210)", "Delete TextElement:  old value of the property(5211)", "Delete TagElement: @return(5212)", "Delete Javadoc(5213)", "Delete SimpleName: Override(5214)", "Delete MarkerAnnotation(5215)", "Delete Modifier: public(5216)", "Delete SimpleName: Object(5217)", "Delete SimpleType: Object(5218)", "Delete SimpleName: remove(5219)", "Delete Modifier: final(5220)", "Delete SimpleName: Object(5221)", "Delete SimpleType: Object(5222)", "Delete SimpleName: key(5223)", "Delete SingleVariableDeclaration(5224)", "Delete Modifier: final(5225)", "Delete SimpleName: String(5226)", "Delete SimpleType: String(5227)", "Delete SimpleName: strKey(5228)", "Delete SimpleName: String(5229)", "Delete SimpleName: valueOf(5230)", "Delete SimpleName: key(5231)", "Delete MethodInvocation(5232)", "Delete VariableDeclarationFragment(5233)", "Delete VariableDeclarationStatement(5234)", "Delete Modifier: final(5235)", "Delete SimpleName: Object(5236)", "Delete SimpleType: Object(5237)", "Delete SimpleName: ret(5238)", "Delete SimpleName: getProperty(5239)", "Delete SimpleName: strKey(5240)", "Delete MethodInvocation(5241)", "Delete VariableDeclarationFragment(5242)", "Delete VariableDeclarationStatement(5243)", "Delete SimpleName: clearProperty(5244)", "Delete SimpleName: strKey(5245)", "Delete MethodInvocation(5246)", "Delete ExpressionStatement(5247)", "Delete SimpleName: ret(5248)", "Delete ReturnStatement(5249)", "Delete Block(5250)", "Delete MethodDeclaration(5251)", "Delete TypeDeclaration: class(5252)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 2, "testing": "True", "maintenance": "False", "build": "False"}]}