{"application": "google-guava", "csha": "e53a8154368689026b3216fe259be4129c89fcd5", "files": [{"UnsignedLongs_cluster": {"actions": [{"root": "INS IfStatement to Block at 1", "operations": ["INS SimpleName: x to InfixExpression: > at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: Long to MethodInvocation at 0", "INS IfStatement to IfStatement at 2", "INS SimpleName: radix to MethodInvocation at 3", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS IfStatement to Block at 1", "INS InfixExpression: > to IfStatement at 0", "INS SimpleName: x to MethodInvocation at 2", "INS Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0", "MOV Block to IfStatement at 1", "MOV Block to IfStatement at 2"]}, {"root": "INS InfixExpression: == to IfStatement at 0", "operations": ["INS InfixExpression: - to ParenthesizedExpression at 0", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS InfixExpression: == to IfStatement at 0", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS ParenthesizedExpression to InfixExpression: & at 1", "INS SimpleName: radix to InfixExpression: - at 0", "INS SimpleName: radix to InfixExpression: & at 0", "INS ParenthesizedExpression to InfixExpression: == at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS SimpleName: radix to MethodInvocation at 3", "INS SimpleName: radix to InfixExpression: - at 0", "INS SimpleName: radix to MethodInvocation at 2", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: numberOfTrailingZeros to MethodInvocation at 1", "INS SimpleName: forDigit to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS PrimitiveType: int to CastExpression at 0", "INS SimpleName: shift to VariableDeclarationFragment at 0", "INS ParenthesizedExpression to InfixExpression: & at 0", "INS PrefixExpression: -- to ArrayAccess at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Assignment: >>>= to ExpressionStatement at 0", "INS SimpleName: Character to MethodInvocation at 0", "INS SimpleName: mask to InfixExpression: & at 1", "INS DoStatement to Block at 2", "INS SimpleName: mask to VariableDeclarationFragment at 0", "INS Block to DoStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: x to Assignment: >>>= at 0", "INS SimpleName: i to PrefixExpression: -- at 0", "INS InfixExpression: & to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS CastExpression to ParenthesizedExpression at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ArrayAccess to Assignment: = at 0", "INS InfixExpression: != to DoStatement at 1", "INS Block to IfStatement at 1", "INS SimpleName: Integer to MethodInvocation at 0", "INS InfixExpression: - to VariableDeclarationFragment at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 1", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS SimpleName: shift to Assignment: >>>= at 1", "INS SimpleName: x to CastExpression at 1", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS ParenthesizedExpression to InfixExpression: / at 1", "INS SimpleName: radix to InfixExpression: >>> at 0", "INS Block to IfStatement at 1", "INS InfixExpression: == to IfStatement at 0", "INS ParenthesizedExpression to InfixExpression: == at 0", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ParenthesizedExpression to InfixExpression: / at 0", "INS SimpleName: x to InfixExpression: >>> at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS NumberLiteral: 1 to InfixExpression: & at 1", "INS InfixExpression: / to Assignment: = at 1", "INS Block to IfStatement at 2", "INS ExpressionStatement to Block at 0", "INS NumberLiteral: 1 to InfixExpression: >>> at 1", "INS InfixExpression: >>> to ParenthesizedExpression at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: quotient to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: radix to InfixExpression: & at 0", "INS NumberLiteral: 1 to InfixExpression: >>> at 1", "INS SimpleName: quotient to Assignment: = at 0", "INS IfStatement to Block at 1", "INS InfixExpression: >>> to ParenthesizedExpression at 0"]}, {"root": "MOVE from Block", "operations": ["MOV WhileStatement to Block at 5"]}, {"root": "MOVE from InfixExpression: !=", "operations": ["MOV SimpleName: x to InfixExpression: != at 0", "MOV NumberLiteral: 0 to InfixExpression: != at 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "DEL InfixExpression: <", "operations": ["DEL InfixExpression: <"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement"]}]}}, {"UnsignedLongs_diff": {"operations": ["Insert IfStatement(1372) into Block(1373) at 1", "Move InfixExpression: ==(1196) into IfStatement(1372) at 0", "Move Block(1199) into IfStatement(1372) at 1", "Insert IfStatement(1371) into IfStatement(1372) at 2", "Insert InfixExpression: >(1202) into IfStatement(1371) at 0", "Insert Block(1209) into IfStatement(1371) at 1", "Move Block(1289) into IfStatement(1371) at 2", "Insert SimpleName: x(1200) into InfixExpression: >(1202) at 0", "Insert NumberLiteral: 0(1201) into InfixExpression: >(1202) at 1", "Insert ReturnStatement(1208) into Block(1209) at 0", "Insert MethodInvocation(1207) into ReturnStatement(1208) at 0", "Insert InfixExpression: ==(1234) into IfStatement(1360) at 0", "Insert Block(1275) into IfStatement(1360) at 1", "Insert SimpleName: Long(1203) into MethodInvocation(1207) at 0", "Insert SimpleName: toString(1204) into MethodInvocation(1207) at 1", "Insert SimpleName: x(1205) into MethodInvocation(1207) at 2", "Insert SimpleName: radix(1206) into MethodInvocation(1207) at 3", "Insert ParenthesizedExpression(1232) into InfixExpression: ==(1234) at 0", "Insert NumberLiteral: 0(1233) into InfixExpression: ==(1234) at 1", "Insert VariableDeclarationStatement(1242) into Block(1275) at 0", "Insert VariableDeclarationStatement(1249) into Block(1275) at 1", "Insert DoStatement(1274) into Block(1275) at 2", "Insert IfStatement(1307) into Block(1359) at 1", "Move WhileStatement(1279) into Block(1359) at 5", "Insert InfixExpression: &(1231) into ParenthesizedExpression(1232) at 0", "Insert PrimitiveType: int(1235) into VariableDeclarationStatement(1242) at 0", "Insert VariableDeclarationFragment(1241) into VariableDeclarationStatement(1242) at 1", "Insert PrimitiveType: int(1243) into VariableDeclarationStatement(1249) at 0", "Insert VariableDeclarationFragment(1248) into VariableDeclarationStatement(1249) at 1", "Insert Block(1270) into DoStatement(1274) at 0", "Insert InfixExpression: !=(1273) into DoStatement(1274) at 1", "Insert InfixExpression: ==(1285) into IfStatement(1307) at 0", "Insert Block(1298) into IfStatement(1307) at 1", "Insert Block(1306) into IfStatement(1307) at 2", "Insert SimpleName: radix(1226) into InfixExpression: &(1231) at 0", "Insert ParenthesizedExpression(1230) into InfixExpression: &(1231) at 1", "Insert SimpleName: shift(1236) into VariableDeclarationFragment(1241) at 0", "Insert MethodInvocation(1240) into VariableDeclarationFragment(1241) at 1", "Insert SimpleName: mask(1244) into VariableDeclarationFragment(1248) at 0", "Insert InfixExpression: -(1247) into VariableDeclarationFragment(1248) at 1", "Insert ExpressionStatement(1265) into Block(1270) at 0", "Insert ExpressionStatement(1269) into Block(1270) at 1", "Move SimpleName: x(1216) into InfixExpression: !=(1273) at 0", "Move NumberLiteral: 0(1217) into InfixExpression: !=(1273) at 1", "Insert ParenthesizedExpression(1283) into InfixExpression: ==(1285) at 0", "Insert NumberLiteral: 0(1284) into InfixExpression: ==(1285) at 1", "Insert ExpressionStatement(1297) into Block(1298) at 0", "Insert ExpressionStatement(1305) into Block(1306) at 0", "Insert InfixExpression: -(1229) into ParenthesizedExpression(1230) at 0", "Insert SimpleName: Integer(1237) into MethodInvocation(1240) at 0", "Insert SimpleName: numberOfTrailingZeros(1238) into MethodInvocation(1240) at 1", "Insert SimpleName: radix(1239) into MethodInvocation(1240) at 2", "Insert SimpleName: radix(1245) into InfixExpression: -(1247) at 0", "Insert NumberLiteral: 1(1246) into InfixExpression: -(1247) at 1", "Insert Assignment: =(1264) into ExpressionStatement(1265) at 0", "Insert Assignment: >>>=(1268) into ExpressionStatement(1269) at 0", "Insert InfixExpression: &(1282) into ParenthesizedExpression(1283) at 0", "Insert Assignment: =(1296) into ExpressionStatement(1297) at 0", "Insert Assignment: =(1304) into ExpressionStatement(1305) at 0", "Insert SimpleName: radix(1227) into InfixExpression: -(1229) at 0", "Insert NumberLiteral: 1(1228) into InfixExpression: -(1229) at 1", "Insert ArrayAccess(1253) into Assignment: =(1264) at 0", "Insert MethodInvocation(1263) into Assignment: =(1264) at 1", "Insert SimpleName: x(1266) into Assignment: >>>=(1268) at 0", "Insert SimpleName: shift(1267) into Assignment: >>>=(1268) at 1", "Insert SimpleName: radix(1280) into InfixExpression: &(1282) at 0", "Insert NumberLiteral: 1(1281) into InfixExpression: &(1282) at 1", "Insert SimpleName: quotient(1286) into Assignment: =(1296) at 0", "Insert InfixExpression: /(1295) into Assignment: =(1296) at 1", "Insert SimpleName: quotient(1299) into Assignment: =(1304) at 0", "Move MethodInvocation(1224) into Assignment: =(1304) at 1", "Insert SimpleName: buf(1250) into ArrayAccess(1253) at 0", "Insert PrefixExpression: --(1252) into ArrayAccess(1253) at 1", "Insert SimpleName: Character(1254) into MethodInvocation(1263) at 0", "Insert SimpleName: forDigit(1255) into MethodInvocation(1263) at 1", "Insert InfixExpression: &(1261) into MethodInvocation(1263) at 2", "Insert SimpleName: radix(1262) into MethodInvocation(1263) at 3", "Insert ParenthesizedExpression(1290) into InfixExpression: /(1295) at 0", "Insert ParenthesizedExpression(1294) into InfixExpression: /(1295) at 1", "Insert SimpleName: i(1251) into PrefixExpression: --(1252) at 0", "Insert ParenthesizedExpression(1259) into InfixExpression: &(1261) at 0", "Insert SimpleName: mask(1260) into InfixExpression: &(1261) at 1", "Insert InfixExpression: >>>(1289) into ParenthesizedExpression(1290) at 0", "Insert InfixExpression: >>>(1293) into ParenthesizedExpression(1294) at 0", "Insert CastExpression(1258) into ParenthesizedExpression(1259) at 0", "Insert SimpleName: x(1287) into InfixExpression: >>>(1289) at 0", "Insert NumberLiteral: 1(1288) into InfixExpression: >>>(1289) at 1", "Insert SimpleName: radix(1291) into InfixExpression: >>>(1293) at 0", "Insert NumberLiteral: 1(1292) into InfixExpression: >>>(1293) at 1", "Insert PrimitiveType: int(1256) into CastExpression(1258) at 0", "Insert SimpleName: x(1257) into CastExpression(1258) at 1", "Delete InfixExpression: <(1218)", "Delete IfStatement(1290)"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}