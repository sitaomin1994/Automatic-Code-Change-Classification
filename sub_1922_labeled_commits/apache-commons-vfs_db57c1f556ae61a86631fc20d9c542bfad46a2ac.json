{"application": "apache-commons-vfs", "csha": "db57c1f556ae61a86631fc20d9c542bfad46a2ac", "files": [{"TarBuffer_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.vfs2.provider.tar", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.IOException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.InputStream", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.OutputStream"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Arrays"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: setDebug", "DEL Dimension", "DEL NumberLiteral: 20", "DEL SimpleName: recsPerBlock", "DEL SimpleType: IOException", "DEL IfStatement", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL SimpleName: input", "DEL SimpleName: output", "DEL StringLiteral: \"WriteRecord: recIdx = \"", "DEL Modifier: final", "DEL IfStatement", "DEL Assignment: =", "DEL TagElement", "DEL StringLiteral: \"ReadBlock: INCOMPLETE READ \"", "DEL Modifier: private", "DEL SimpleName: bytesNeeded", "DEL InfixExpression: >=", "DEL NumberLiteral: 0", "DEL MethodDeclaration", "DEL SimpleType: IOException", "DEL SimpleName: readBlock", "DEL ThrowStatement", "DEL SimpleName: numBytes", "DEL SimpleName: input", "DEL ExpressionStatement", "DEL SimpleName: buffer", "DEL Javadoc", "DEL MethodDeclaration", "DEL TextElement:  The BlockSize value", "DEL Block", "DEL VariableDeclarationFragment", "DEL TypeDeclaration: class", "DEL QualifiedName: record.length", "DEL SimpleName: initialize", "DEL NumberLiteral: 0", "DEL StringLiteral: \"reading (via skip) from an output buffer\"", "DEL TextElement: Write an archive record to the archive, where the record may be inside of", "DEL SimpleType: IOException", "DEL TextElement: Initialization common to all constructors.", "DEL IfStatement", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: recsPerBlock", "DEL StringLiteral: \"ReadBlock: blkIdx = \"", "DEL SimpleName: currRecIdx", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleType: OutputStream", "DEL StringLiteral: \" blkIdx = \"", "DEL Modifier: private", "DEL InfixExpression: !=", "DEL SimpleName: recordSize", "DEL IfStatement", "DEL SimpleName: message", "DEL Assignment: =", "DEL SimpleName: recsPerBlock", "DEL InfixExpression: <", "DEL SimpleType: InputStream", "DEL SimpleName: currRecIdx", "DEL SimpleType: InputStream", "DEL PrefixExpression: -", "DEL Block", "DEL NullLiteral", "DEL InfixExpression: *", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL TagElement", "DEL PrimitiveType: void", "DEL Javadoc", "DEL InfixExpression: >=", "DEL SimpleName: bytesNeeded", "DEL NullLiteral", "DEL SimpleName: OutputStream", "DEL ThrowStatement", "DEL SimpleName: offset", "DEL NumberLiteral: 0", "DEL SimpleName: message", "DEL FieldAccess", "DEL SimpleName: currBlkIdx", "DEL SimpleName: currRecIdx", "DEL IfStatement", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL FieldDeclaration", "DEL Block", "DEL SingleVariableDeclaration", "DEL Block", "DEL TextElement: indicated by a record that consists entirely of null bytes.", "DEL PrimitiveType: boolean", "DEL Block", "DEL PostfixExpression: ++", "DEL ParenthesizedExpression", "DEL FieldDeclaration", "DEL WhileStatement", "DEL SimpleName: blockBuffer", "DEL SimpleName: IOException", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL TextElement:  Description of Exception", "DEL SimpleName: String", "DEL FieldDeclaration", "DEL SimpleName: OutputStream", "DEL StringLiteral: \"writing to an input buffer\"", "DEL SimpleType: IOException", "DEL TagElement", "DEL ArrayType: byte[]", "DEL InfixExpression: ==", "DEL SimpleName: input", "DEL SimpleName: blockBuffer", "DEL SimpleName: message", "DEL SimpleName: message", "DEL MethodDeclaration", "DEL ThisExpression", "DEL Assignment: =", "DEL ExpressionStatement", "DEL FieldAccess", "DEL SimpleName: IOException", "DEL SimpleName: record", "DEL NumberLiteral: 0", "DEL StringLiteral: \"record to write has length '\"", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: currBlkIdx", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL SimpleName: recordSize", "DEL Modifier: final", "DEL SimpleName: fill", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL Modifier: public", "DEL Modifier: private", "DEL SimpleName: flush", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL PrimitiveType: long", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL Block", "DEL Assignment: =", "DEL FieldDeclaration", "DEL TagElement", "DEL MethodInvocation", "DEL Block", "DEL Block", "DEL SimpleName: input", "DEL SimpleName: currRecIdx", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL IfStatement", "DEL Assignment: -=", "DEL Block", "DEL SimpleName: write", "DEL Block", "DEL ExpressionStatement", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: debug", "DEL TextElement:  The current zero based block number.", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: currRecIdx", "DEL SimpleType: IOException", "DEL SimpleName: record", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL Modifier: final", "DEL InfixExpression: ==", "DEL PostfixExpression: ++", "DEL PrimitiveType: int", "DEL InfixExpression: +", "DEL PrimitiveType: int", "DEL SimpleName: System", "DEL SimpleName: recsPerBlock", "DEL SimpleType: String", "DEL InfixExpression: !=", "DEL StringLiteral: \" of \"", "DEL TagElement: @return", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL SimpleName: record", "DEL SimpleName: offset", "DEL ThisExpression", "DEL Javadoc", "DEL SimpleName: record", "DEL SimpleName: input", "DEL PrimitiveType: byte", "DEL IfStatement", "DEL ThisExpression", "DEL Dimension", "DEL NullLiteral", "DEL SimpleType: IOException", "DEL SimpleName: currRecIdx", "DEL InfixExpression: !=", "DEL SimpleName: debug", "DEL ParenthesizedExpression", "DEL SimpleName: readRecord", "DEL SimpleName: writeBlock", "DEL SimpleName: blockSize", "DEL SimpleName: IOException", "DEL StringLiteral: \"SkipRecord: recIdx = \"", "DEL SimpleName: buffer", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL TextElement: a larger array buffer. The buffer must be \"offset plus record size\" long.", "DEL TextElement:  The offset of the record data within buf.", "DEL SimpleType: String", "DEL Block", "DEL TextElement:  The record data.", "DEL SimpleName: message", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: output", "DEL Modifier: final", "DEL ThrowStatement", "DEL Block", "DEL SimpleName: output", "DEL PrefixExpression: ++", "DEL TextElement: You should never have a need to access this class directly. TarBuffers are", "DEL SimpleName: debug", "DEL SimpleType: OutputStream", "DEL SimpleName: writeBlock", "DEL SimpleName: input", "DEL NumberLiteral: 512", "DEL VariableDeclarationFragment", "DEL TagElement: @return", "DEL StringLiteral: \"writing to an input buffer\"", "DEL SimpleName: close", "DEL Modifier: final", "DEL BooleanLiteral: false", "DEL SimpleName: message", "DEL VariableDeclarationFragment", "DEL SimpleName: message", "DEL SimpleName: offset", "DEL SimpleName: currRecIdx", "DEL StringLiteral: \" bytes read.\"", "DEL SimpleName: message", "DEL NumberLiteral: 0", "DEL TagElement", "DEL NullLiteral", "DEL Modifier: final", "DEL TagElement: @throws", "DEL TagElement", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL FieldAccess", "DEL SimpleName: blockSize", "DEL SimpleName: blockSize", "DEL Assignment: +=", "DEL ExpressionStatement", "DEL TextElement: performs is to ensure that files have the correct \"block\" size, or other tars", "DEL PrimitiveType: int", "DEL SimpleName: debug", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL ArrayType: byte[]", "DEL SimpleName: currBlkIdx", "DEL SimpleName: IOException", "DEL TextElement:  The RecordSize value", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: currRecIdx", "DEL SimpleName: recordSize", "DEL SimpleName: writeRecord", "DEL InfixExpression: !=", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL TextElement: Get the TAR Buffer's record size.", "DEL SimpleType: IOException", "DEL InfixExpression: ==", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: IOException", "DEL ThrowStatement", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"reading from an output buffer\"", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: size", "DEL Block", "DEL SimpleName: recordSize", "DEL Assignment: =", "DEL SimpleName: message", "DEL SimpleName: recordSize", "DEL SimpleName: result", "DEL SimpleName: String", "DEL TextElement: Write an archive record to the archive.", "DEL SimpleName: IOException", "DEL IfStatement", "DEL Block", "DEL StringLiteral: \"reading from an output buffer\"", "DEL TextElement: <p/>", "DEL ArrayCreation", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL SimpleName: output", "DEL SimpleName: recordSize", "DEL MethodDeclaration", "DEL Block", "DEL IfStatement", "DEL PrimitiveType: byte", "DEL PrimitiveType: int", "DEL SimpleName: InputStream", "DEL TagElement", "DEL Block", "DEL SimpleName: output", "DEL MethodInvocation", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleName: recordSize", "DEL Block", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: blockSize", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleName: recordSize", "DEL ExpressionStatement", "DEL IfStatement", "DEL InfixExpression: >", "DEL SimpleName: recordSize", "DEL SimpleName: message", "DEL NumberLiteral: 0", "DEL QualifiedName: System.out", "DEL PrimitiveType: void", "DEL InfixExpression: >", "DEL SimpleName: writeBlock", "DEL InfixExpression: !=", "DEL SimpleName: debug", "DEL SimpleName: getRecordSize", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL TagElement: @return", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: currBlkIdx", "DEL ReturnStatement", "DEL SimpleName: IOException", "DEL SimpleName: input", "DEL FieldDeclaration", "DEL Modifier: final", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL BooleanLiteral: false", "DEL TagElement: @return", "DEL StringLiteral: \"WriteRecord: recIdx = \"", "DEL Modifier: final", "DEL SimpleName: currRecIdx", "DEL ArrayType: byte[]", "DEL SimpleName: blockSize", "DEL SimpleName: currBlkIdx", "DEL IfStatement", "DEL IfStatement", "DEL ParenthesizedExpression", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: message", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL SimpleName: initialize", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL SimpleName: currBlkIdx", "DEL StringLiteral: \"' which is not the record size of '\"", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL Javadoc", "DEL PrimitiveType: int", "DEL Dimension", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SimpleType: OutputStream", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: input", "DEL PrimitiveType: byte", "DEL SimpleName: output", "DEL IfStatement", "DEL Block", "DEL Javadoc", "DEL StringLiteral: \"' with offset '\"", "DEL MethodDeclaration", "DEL SimpleName: debug", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleType: String", "DEL SimpleName: arraycopy", "DEL SimpleName: println", "DEL StringLiteral: \"'\"", "DEL Modifier: private", "DEL SimpleName: currRecIdx", "DEL Modifier: private", "DEL SimpleName: message", "DEL Modifier: public", "DEL Block", "DEL SimpleName: TarBuffer", "DEL Block", "DEL PrimitiveType: int", "DEL SimpleName: blockBuffer", "DEL Modifier: public", "DEL StringLiteral: \"TarBuffer.flushBlock() called.\"", "DEL VariableDeclarationFragment", "DEL SimpleName: readBlock", "DEL SimpleName: message", "DEL BooleanLiteral: true", "DEL SimpleName: blockBuffer", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: bytesNeeded", "DEL Javadoc", "DEL SimpleType: IOException", "DEL Modifier: public", "DEL TextElement: Skip over a record on the input stream.", "DEL IfStatement", "DEL ConstructorInvocation", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: recordSize", "DEL NullLiteral", "DEL SimpleName: i", "DEL TextElement: Get the TAR Buffer's block size. Blocks consist of multiple records.", "DEL VariableDeclarationFragment", "DEL BreakStatement", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL SimpleName: String", "DEL Block", "DEL TextElement:  The record data to write to the archive.", "DEL Block", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleName: message", "DEL ArrayType: byte[]", "DEL TagElement", "DEL SimpleName: arraycopy", "DEL ArrayType: byte[]", "DEL MethodInvocation", "DEL Block", "DEL Modifier: public", "DEL TagElement: @return", "DEL Assignment: =", "DEL TagElement", "DEL Modifier: final", "DEL SimpleName: input", "DEL SimpleName: recordSize", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: currRecIdx", "DEL SimpleName: blockSize", "DEL SimpleName: currBlkIdx", "DEL SimpleName: recordSize", "DEL SimpleName: initialize", "DEL SimpleName: blockSize", "DEL SimpleName: writeBlock", "DEL IfStatement", "DEL InfixExpression: *", "DEL Block", "DEL Modifier: final", "DEL SimpleName: currRecIdx", "DEL Modifier: private", "DEL SimpleName: recordSize", "DEL SimpleName: debug", "DEL InfixExpression: /", "DEL FieldAccess", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL QualifiedName: System.err", "DEL SimpleName: record", "DEL SimpleName: IOException", "DEL SingleVariableDeclaration", "DEL ThrowStatement", "DEL SimpleName: output", "DEL ReturnStatement", "DEL NullLiteral", "DEL SimpleName: output", "DEL SimpleName: currRecIdx", "DEL TextElement: will complain. <p>", "DEL NullLiteral", "DEL SimpleType: String", "DEL Block", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL SimpleName: debug", "DEL StringLiteral: \" blkIdx = \"", "DEL InfixExpression: ==", "DEL SimpleName: recordSize", "DEL Block", "DEL SimpleName: blockSize", "DEL VariableDeclarationFragment", "DEL SimpleName: output", "DEL SimpleName: message", "DEL TagElement", "DEL SimpleName: String", "DEL Modifier: final", "DEL SimpleName: IOException", "DEL SimpleName: String", "DEL SimpleName: blockBuffer", "DEL SimpleName: debug", "DEL StringLiteral: \" blkIdx = \"", "DEL SingleVariableDeclaration", "DEL SimpleName: recordSize", "DEL ThisExpression", "DEL PrimitiveType: void", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL TextElement: Flush the current data block if it has any data in it.", "DEL PrimitiveType: int", "DEL FieldDeclaration", "DEL ArrayType: byte[]", "DEL ExpressionStatement", "DEL Modifier: public", "DEL TextElement: Write a TarBuffer block to the archive.", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SimpleType: IOException", "DEL SimpleName: output", "DEL Modifier: private", "DEL SimpleName: debug", "DEL Modifier: final", "DEL SimpleName: debug", "DEL SimpleName: message", "DEL SimpleName: recsPerBlock", "DEL ExpressionStatement", "DEL SimpleName: output", "DEL SimpleName: message", "DEL VariableDeclarationFragment", "DEL PostfixExpression: ++", "DEL QualifiedName: record.length", "DEL QualifiedName: System.in", "DEL ExpressionStatement", "DEL Modifier: private", "DEL Javadoc", "DEL SimpleName: message", "DEL FieldDeclaration", "DEL SimpleName: debug", "DEL InfixExpression: !=", "DEL PrimitiveType: boolean", "DEL NullLiteral", "DEL SimpleName: println", "DEL SimpleName: result", "DEL SimpleName: numBytes", "DEL TextElement: io devices. In the Java universe, the only real function that this class", "DEL SimpleType: String", "DEL NullLiteral", "DEL SimpleName: message", "DEL IfStatement", "DEL SimpleName: currRecIdx", "DEL MethodInvocation", "DEL SimpleName: String", "DEL PrimitiveType: int", "DEL SimpleName: getBlockSize", "DEL ClassInstanceCreation", "DEL InfixExpression: +", "DEL ThrowStatement", "DEL SimpleType: IOException", "DEL Modifier: final", "DEL SimpleName: input", "DEL SimpleType: String", "DEL InfixExpression: +", "DEL SimpleType: IOException", "DEL Assignment: =", "DEL Block", "DEL ThrowStatement", "DEL ArrayAccess", "DEL InfixExpression: +", "DEL TagElement: @param", "DEL SimpleName: message", "DEL QualifiedName: TarBuffer.DEFAULT_BLOCKSIZE", "DEL Modifier: public", "DEL SimpleName: message", "DEL Block", "DEL QualifiedName: TarBuffer.DEFAULT_RECORDSIZE", "DEL SimpleName: readBlock", "DEL VariableDeclarationExpression", "DEL Javadoc", "DEL Javadoc", "DEL ReturnStatement", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL SimpleName: debug", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: String", "DEL QualifiedName: System.err", "DEL SimpleName: currRecIdx", "DEL MethodDeclaration", "DEL FieldDeclaration", "DEL Javadoc", "DEL Javadoc", "DEL TagElement", "DEL TagElement: @throws", "DEL SimpleName: TarBuffer", "DEL SimpleName: record", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL ConstructorInvocation", "DEL ForStatement", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL TagElement: @param", "DEL SimpleName: output", "DEL StringLiteral: \"writing to an input buffer\"", "DEL Modifier: public", "DEL PrimitiveType: byte", "DEL SimpleName: currRecIdx", "DEL SimpleName: debug", "DEL Block", "DEL InfixExpression: !=", "DEL SimpleName: currBlkIdx", "DEL InfixExpression: ==", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL Block", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: debug", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL PrimitiveType: byte", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL SimpleName: input", "DEL SimpleName: currRecIdx", "DEL ReturnStatement", "DEL InfixExpression: +", "DEL SimpleName: TarBuffer", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: IOException", "DEL SimpleName: i", "DEL Block", "DEL PostfixExpression: ++", "DEL StringLiteral: \"' which is less than the record size of '\"", "DEL PrimitiveType: byte", "DEL Assignment: =", "DEL SimpleName: System", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: currRecIdx", "DEL SimpleName: DEFAULT_RECORDSIZE", "DEL SimpleName: blockSize", "DEL PrimitiveType: void", "DEL ConstructorInvocation", "DEL PrimitiveType: int", "DEL QualifiedName: TarBuffer.DEFAULT_RECORDSIZE", "DEL MethodDeclaration", "DEL TextElement:  The EOFRecord value", "DEL Block", "DEL StringLiteral: \"ReadRecord: recIdx = \"", "DEL TextElement: created by Tar IO Streams.", "DEL Block", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL InfixExpression: -", "DEL ParenthesizedExpression", "DEL SimpleName: bytesNeeded", "DEL SimpleName: System", "DEL SimpleName: isEOFRecord", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleName: offset", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL ThrowStatement", "DEL Block", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: message", "DEL NumberLiteral: 0", "DEL SimpleType: IOException", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL ParenthesizedExpression", "DEL SimpleType: String", "DEL SimpleName: debug", "DEL Block", "DEL Modifier: final", "DEL SimpleName: String", "DEL SimpleName: recordSize", "DEL Modifier: final", "DEL SimpleName: blockBuffer", "DEL IfStatement", "DEL SimpleName: flushBlock", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SimpleName: TarBuffer", "DEL SimpleName: buffer", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL IfStatement", "DEL MethodDeclaration", "DEL SimpleName: flushBlock", "DEL SimpleName: output", "DEL SimpleName: recsPerBlock", "DEL Modifier: final", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL QualifiedName: TarBuffer.DEFAULT_BLOCKSIZE", "DEL TextElement:  The buffer containing the record data to write.", "DEL VariableDeclarationFragment", "DEL SimpleName: debug", "DEL Block", "DEL SimpleName: currBlkIdx", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: recordSize", "DEL SimpleName: i", "DEL SimpleName: IOException", "DEL SimpleName: output", "DEL IfStatement", "DEL ThisExpression", "DEL Block", "DEL TagElement", "DEL Modifier: static", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL Block", "DEL Modifier: final", "DEL ArrayType: byte[]", "DEL SimpleType: InputStream", "DEL SimpleName: currRecIdx", "DEL ConstructorInvocation", "DEL SimpleName: currRecIdx", "DEL SimpleName: blockSize", "DEL Modifier: static", "DEL TextElement: Close the TarBuffer. If this is an output buffer, also flush the current", "DEL InfixExpression: >=", "DEL VariableDeclarationFragment", "DEL SimpleName: numBytes", "DEL ThisExpression", "DEL MethodInvocation", "DEL Modifier: final", "DEL Block", "DEL PrimitiveType: int", "DEL SimpleName: DEFAULT_RECORDSIZE", "DEL SimpleName: blockSize", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL PrimitiveType: byte", "DEL SimpleName: String", "DEL SimpleName: DEFAULT_BLOCKSIZE", "DEL InfixExpression: &&", "DEL StringLiteral: \"'\"", "DEL TextElement: Set the debugging flag for the buffer.", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL InfixExpression: +", "DEL InfixExpression: +", "DEL SimpleName: input", "DEL PostfixExpression: ++", "DEL SimpleName: skipRecord", "DEL SimpleName: IOException", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL InfixExpression: !=", "DEL ReturnStatement", "DEL SimpleName: message", "DEL SimpleName: recsPerBlock", "DEL TextElement: Read a record from the input stream and return the data.", "DEL SimpleType: String", "DEL TextElement:  <a href=\"http://commons.apache.org/vfs/team-list.html\">Commons VFS team</a>", "DEL TextElement: Determine if an archive record indicate End of Archive. End of archive is", "DEL ExpressionStatement", "DEL Assignment: =", "DEL NullLiteral", "DEL SimpleName: String", "DEL SimpleName: output", "DEL SimpleName: message", "DEL IfStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL TextElement: block before closing.", "DEL CastExpression", "DEL SimpleName: blockBuffer", "DEL TagElement", "DEL NumberLiteral: 0", "DEL Modifier: final", "DEL StringLiteral: \"writing to an input buffer\"", "DEL SimpleName: output", "DEL SimpleName: result", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL Modifier: final", "DEL SimpleName: blockSize", "DEL TextElement:  Description of Exception", "DEL MethodDeclaration", "DEL SimpleName: output", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: blockSize", "DEL SimpleName: debug", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: IOException", "DEL SimpleName: debug", "DEL ClassInstanceCreation", "DEL Dimension", "DEL ArrayType: byte[]", "DEL SimpleName: blockBuffer", "DEL QualifiedName: buffer.length", "DEL Block", "DEL SimpleName: numBytes", "DEL TextElement: Get the current block number, zero based.", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL Assignment: =", "DEL Javadoc", "DEL ExpressionStatement", "DEL TagElement", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL Assignment: =", "DEL Dimension", "DEL SimpleName: OutputStream", "DEL MethodDeclaration", "DEL Block", "DEL FieldAccess", "DEL IfStatement", "DEL SimpleType: OutputStream", "DEL SimpleName: recordSize", "DEL SimpleName: close", "DEL Block", "DEL QualifiedName: System.err", "DEL SimpleName: getCurrentRecordNum", "DEL PrimitiveType: byte", "DEL SimpleType: IOException", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL IfStatement", "DEL ExpressionStatement", "DEL ThisExpression", "DEL InfixExpression: *", "DEL SimpleType: IOException", "DEL SimpleName: bytesNeeded", "DEL NumberLiteral: 0", "DEL PrefixExpression: -", "DEL SimpleName: OutputStream", "DEL SingleVariableDeclaration", "DEL SimpleName: numBytes", "DEL SimpleName: input", "DEL SimpleName: input", "DEL SimpleName: offset", "DEL Block", "DEL ExpressionStatement", "DEL TagElement: @return", "DEL SimpleName: debug", "DEL PrimitiveType: boolean", "DEL SimpleName: message", "DEL SimpleName: message", "DEL SimpleName: writeRecord", "DEL TagElement: @return", "DEL ExpressionStatement", "DEL IfStatement", "DEL InfixExpression: >=", "DEL SimpleType: IOException", "DEL StringLiteral: \"TarBuffer.closeBuffer().\"", "DEL Modifier: private", "DEL SimpleName: TarBuffer", "DEL VariableDeclarationFragment", "DEL SimpleName: recordSize", "DEL Modifier: final", "DEL Block", "DEL TextElement: stream. This concept goes back to the days of blocked tape drives and special", "DEL InfixExpression: +", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL ThisExpression", "DEL SimpleName: debug", "DEL TextElement: The TarBuffer class implements the tar archive concept of a buffered input", "DEL PrimitiveType: int", "DEL InfixExpression: +", "DEL SimpleName: message", "DEL Block", "DEL NumberLiteral: 0", "DEL Modifier: final", "DEL SimpleName: output", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL SimpleType: String", "DEL SimpleType: IOException", "DEL IfStatement", "DEL InfixExpression: >", "DEL SimpleName: IOException", "DEL InfixExpression: +", "DEL NullLiteral", "DEL SimpleName: IOException", "DEL TextElement: Get the current record number, within the current block, zero based.", "DEL Block", "DEL NullLiteral", "DEL Modifier: public", "DEL InfixExpression: !=", "DEL SimpleName: message", "DEL Block", "DEL ReturnStatement", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleName: recordSize", "DEL ExpressionStatement", "DEL SimpleName: message", "DEL FieldDeclaration", "DEL Assignment: =", "DEL SimpleName: offset", "DEL Modifier: protected", "DEL SimpleName: IOException", "DEL SimpleName: debug", "DEL Modifier: final", "DEL SimpleName: IOException", "DEL VariableDeclarationStatement", "DEL TextElement:  false if End-Of-File, else true", "DEL Block", "DEL FieldAccess", "DEL VariableDeclarationStatement", "DEL Block", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL InfixExpression: *", "DEL SimpleName: currBlkIdx", "DEL TextElement:  If true, print debugging output.", "DEL SimpleName: currBlkIdx", "DEL SimpleName: currRecIdx", "DEL SimpleName: offset", "DEL SimpleName: arraycopy", "DEL Modifier: private", "DEL IfStatement", "DEL ExpressionStatement", "DEL Modifier: final", "DEL FieldAccess", "DEL StringLiteral: \" blkIdx = \"", "DEL SimpleName: blockSize", "DEL SimpleName: message", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: blockSize", "DEL QualifiedName: buffer.length", "DEL ExpressionStatement", "DEL SimpleName: InputStream", "DEL SimpleName: InputStream", "DEL Block", "DEL SimpleType: InputStream", "DEL ThrowStatement", "DEL NumberLiteral: 0", "DEL SimpleName: message", "DEL SimpleName: InputStream", "DEL TextElement:  The current zero based record number.", "DEL SimpleName: currRecIdx", "DEL Modifier: private", "DEL Block", "DEL PrimitiveType: byte", "DEL MethodDeclaration", "DEL SimpleName: output", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: input", "DEL Modifier: public", "DEL SimpleName: debug", "DEL PrimitiveType: boolean", "DEL SimpleName: close", "DEL Assignment: =", "DEL ClassInstanceCreation", "DEL PrefixExpression: !", "DEL PostfixExpression: ++", "DEL VariableDeclarationStatement", "DEL SimpleName: offset", "DEL SimpleName: String", "DEL IfStatement", "DEL Block", "DEL SimpleName: debug", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL NumberLiteral: 1", "DEL SimpleName: blockSize", "DEL Modifier: final", "DEL Modifier: public", "DEL ExpressionStatement", "DEL StringLiteral: \"WriteBlock: blkIdx = \"", "DEL SimpleName: debug", "DEL SimpleName: blockSize", "DEL VariableDeclarationStatement", "DEL SimpleName: read", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: currBlkIdx", "DEL SimpleName: numBytes", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL Block", "DEL TagElement: @author", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL SimpleName: getRecordSize", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: message", "DEL NumberLiteral: 1", "DEL TextElement: Thus, current offset = (currentBlockNum * recsPerBlk) + currentRecNum.", "DEL SimpleType: IOException", "DEL SimpleName: input", "DEL Modifier: private", "DEL TagElement: @param", "DEL PrimitiveType: int", "DEL SimpleName: IOException", "DEL SimpleName: recordSize", "DEL SimpleName: TarBuffer", "DEL SimpleName: blockSize", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: message", "DEL SimpleName: Arrays", "DEL VariableDeclarationStatement", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL StringLiteral: \"record has length '\"", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL Assignment: =", "DEL PrimitiveType: int", "DEL SimpleName: TarBuffer", "DEL SimpleName: getCurrentBlockNum", "DEL SimpleType: String", "DEL SimpleName: size", "DEL ArrayCreation", "DEL SimpleName: input", "DEL TextElement:  The record data to check.", "DEL SimpleName: IOException", "DEL InfixExpression: ==", "DEL ParenthesizedExpression", "DEL SimpleName: blockSize", "DEL SimpleName: message", "DEL FieldAccess"]}]}}, {"TarBuffer_diff": {"operations": ["Delete QualifiedName: org.apache.commons.vfs2.provider.tar(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.io.IOException(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.io.InputStream(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.io.OutputStream(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.Arrays(8)", "Delete ImportDeclaration(9)", "Delete TextElement: The TarBuffer class implements the tar archive concept of a buffered input(10)", "Delete TextElement: stream. This concept goes back to the days of blocked tape drives and special(11)", "Delete TextElement: io devices. In the Java universe, the only real function that this class(12)", "Delete TextElement: performs is to ensure that files have the correct \"block\" size, or other tars(13)", "Delete TextElement: will complain. <p>(14)", "Delete TextElement: <p/>(15)", "Delete TextElement: You should never have a need to access this class directly. TarBuffers are(16)", "Delete TextElement: created by Tar IO Streams.(17)", "Delete TagElement(18)", "Delete TextElement:  <a href=\"http://commons.apache.org/vfs/team-list.html\">Commons VFS team</a>(19)", "Delete TagElement: @author(20)", "Delete Javadoc(21)", "Delete SimpleName: TarBuffer(22)", "Delete Modifier: public(23)", "Delete Modifier: static(24)", "Delete Modifier: final(25)", "Delete PrimitiveType: int(26)", "Delete SimpleName: DEFAULT_RECORDSIZE(27)", "Delete NumberLiteral: 512(28)", "Delete ParenthesizedExpression(29)", "Delete VariableDeclarationFragment(30)", "Delete FieldDeclaration(31)", "Delete Modifier: public(32)", "Delete Modifier: static(33)", "Delete Modifier: final(34)", "Delete PrimitiveType: int(35)", "Delete SimpleName: DEFAULT_BLOCKSIZE(36)", "Delete SimpleName: DEFAULT_RECORDSIZE(37)", "Delete NumberLiteral: 20(38)", "Delete InfixExpression: *(39)", "Delete ParenthesizedExpression(40)", "Delete VariableDeclarationFragment(41)", "Delete FieldDeclaration(42)", "Delete Modifier: private(43)", "Delete PrimitiveType: byte(44)", "Delete Dimension(45)", "Delete ArrayType: byte[](46)", "Delete SimpleName: blockBuffer(47)", "Delete VariableDeclarationFragment(48)", "Delete FieldDeclaration(49)", "Delete Modifier: private(50)", "Delete PrimitiveType: int(51)", "Delete SimpleName: blockSize(52)", "Delete VariableDeclarationFragment(53)", "Delete FieldDeclaration(54)", "Delete Modifier: private(55)", "Delete PrimitiveType: int(56)", "Delete SimpleName: currBlkIdx(57)", "Delete VariableDeclarationFragment(58)", "Delete FieldDeclaration(59)", "Delete Modifier: private(60)", "Delete PrimitiveType: int(61)", "Delete SimpleName: currRecIdx(62)", "Delete VariableDeclarationFragment(63)", "Delete FieldDeclaration(64)", "Delete Modifier: private(65)", "Delete PrimitiveType: boolean(66)", "Delete SimpleName: debug(67)", "Delete VariableDeclarationFragment(68)", "Delete FieldDeclaration(69)", "Delete Modifier: private(70)", "Delete SimpleName: InputStream(71)", "Delete SimpleType: InputStream(72)", "Delete SimpleName: input(73)", "Delete VariableDeclarationFragment(74)", "Delete FieldDeclaration(75)", "Delete Modifier: private(76)", "Delete SimpleName: OutputStream(77)", "Delete SimpleType: OutputStream(78)", "Delete SimpleName: output(79)", "Delete VariableDeclarationFragment(80)", "Delete FieldDeclaration(81)", "Delete Modifier: private(82)", "Delete PrimitiveType: int(83)", "Delete SimpleName: recordSize(84)", "Delete VariableDeclarationFragment(85)", "Delete FieldDeclaration(86)", "Delete Modifier: private(87)", "Delete PrimitiveType: int(88)", "Delete SimpleName: recsPerBlock(89)", "Delete VariableDeclarationFragment(90)", "Delete FieldDeclaration(91)", "Delete SimpleName: TarBuffer(92)", "Delete Modifier: final(93)", "Delete SimpleName: InputStream(94)", "Delete SimpleType: InputStream(95)", "Delete SimpleName: input(96)", "Delete SingleVariableDeclaration(97)", "Delete SimpleName: input(98)", "Delete QualifiedName: TarBuffer.DEFAULT_BLOCKSIZE(99)", "Delete ConstructorInvocation(100)", "Delete Block(101)", "Delete MethodDeclaration(102)", "Delete SimpleName: TarBuffer(103)", "Delete Modifier: final(104)", "Delete SimpleName: InputStream(105)", "Delete SimpleType: InputStream(106)", "Delete SimpleName: input(107)", "Delete SingleVariableDeclaration(108)", "Delete Modifier: final(109)", "Delete PrimitiveType: int(110)", "Delete SimpleName: blockSize(111)", "Delete SingleVariableDeclaration(112)", "Delete SimpleName: input(113)", "Delete SimpleName: blockSize(114)", "Delete QualifiedName: TarBuffer.DEFAULT_RECORDSIZE(115)", "Delete ConstructorInvocation(116)", "Delete Block(117)", "Delete MethodDeclaration(118)", "Delete SimpleName: TarBuffer(119)", "Delete Modifier: final(120)", "Delete SimpleName: InputStream(121)", "Delete SimpleType: InputStream(122)", "Delete SimpleName: input(123)", "Delete SingleVariableDeclaration(124)", "Delete Modifier: final(125)", "Delete PrimitiveType: int(126)", "Delete SimpleName: blockSize(127)", "Delete SingleVariableDeclaration(128)", "Delete Modifier: final(129)", "Delete PrimitiveType: int(130)", "Delete SimpleName: recordSize(131)", "Delete SingleVariableDeclaration(132)", "Delete ThisExpression(133)", "Delete SimpleName: input(134)", "Delete FieldAccess(135)", "Delete SimpleName: input(136)", "Delete Assignment: =(137)", "Delete ExpressionStatement(138)", "Delete SimpleName: initialize(139)", "Delete SimpleName: blockSize(140)", "Delete SimpleName: recordSize(141)", "Delete MethodInvocation(142)", "Delete ExpressionStatement(143)", "Delete Block(144)", "Delete MethodDeclaration(145)", "Delete SimpleName: TarBuffer(146)", "Delete Modifier: final(147)", "Delete SimpleName: OutputStream(148)", "Delete SimpleType: OutputStream(149)", "Delete SimpleName: output(150)", "Delete SingleVariableDeclaration(151)", "Delete SimpleName: output(152)", "Delete QualifiedName: TarBuffer.DEFAULT_BLOCKSIZE(153)", "Delete ConstructorInvocation(154)", "Delete Block(155)", "Delete MethodDeclaration(156)", "Delete SimpleName: TarBuffer(157)", "Delete Modifier: final(158)", "Delete SimpleName: OutputStream(159)", "Delete SimpleType: OutputStream(160)", "Delete SimpleName: output(161)", "Delete SingleVariableDeclaration(162)", "Delete Modifier: final(163)", "Delete PrimitiveType: int(164)", "Delete SimpleName: blockSize(165)", "Delete SingleVariableDeclaration(166)", "Delete SimpleName: output(167)", "Delete SimpleName: blockSize(168)", "Delete QualifiedName: TarBuffer.DEFAULT_RECORDSIZE(169)", "Delete ConstructorInvocation(170)", "Delete Block(171)", "Delete MethodDeclaration(172)", "Delete SimpleName: TarBuffer(173)", "Delete Modifier: final(174)", "Delete SimpleName: OutputStream(175)", "Delete SimpleType: OutputStream(176)", "Delete SimpleName: output(177)", "Delete SingleVariableDeclaration(178)", "Delete Modifier: final(179)", "Delete PrimitiveType: int(180)", "Delete SimpleName: blockSize(181)", "Delete SingleVariableDeclaration(182)", "Delete Modifier: final(183)", "Delete PrimitiveType: int(184)", "Delete SimpleName: recordSize(185)", "Delete SingleVariableDeclaration(186)", "Delete ThisExpression(187)", "Delete SimpleName: output(188)", "Delete FieldAccess(189)", "Delete SimpleName: output(190)", "Delete Assignment: =(191)", "Delete ExpressionStatement(192)", "Delete SimpleName: initialize(193)", "Delete SimpleName: blockSize(194)", "Delete SimpleName: recordSize(195)", "Delete MethodInvocation(196)", "Delete ExpressionStatement(197)", "Delete Block(198)", "Delete MethodDeclaration(199)", "Delete TextElement: Set the debugging flag for the buffer.(200)", "Delete TagElement(201)", "Delete SimpleName: debug(202)", "Delete TextElement:  If true, print debugging output.(203)", "Delete TagElement: @param(204)", "Delete Javadoc(205)", "Delete Modifier: public(206)", "Delete PrimitiveType: void(207)", "Delete SimpleName: setDebug(208)", "Delete Modifier: final(209)", "Delete PrimitiveType: boolean(210)", "Delete SimpleName: debug(211)", "Delete SingleVariableDeclaration(212)", "Delete ThisExpression(213)", "Delete SimpleName: debug(214)", "Delete FieldAccess(215)", "Delete SimpleName: debug(216)", "Delete Assignment: =(217)", "Delete ExpressionStatement(218)", "Delete Block(219)", "Delete MethodDeclaration(220)", "Delete TextElement: Get the TAR Buffer's block size. Blocks consist of multiple records.(221)", "Delete TagElement(222)", "Delete TextElement:  The BlockSize value(223)", "Delete TagElement: @return(224)", "Delete Javadoc(225)", "Delete Modifier: public(226)", "Delete PrimitiveType: int(227)", "Delete SimpleName: getBlockSize(228)", "Delete SimpleName: blockSize(229)", "Delete ReturnStatement(230)", "Delete Block(231)", "Delete MethodDeclaration(232)", "Delete TextElement: Get the current block number, zero based.(233)", "Delete TagElement(234)", "Delete TextElement:  The current zero based block number.(235)", "Delete TagElement: @return(236)", "Delete Javadoc(237)", "Delete Modifier: public(238)", "Delete PrimitiveType: int(239)", "Delete SimpleName: getCurrentBlockNum(240)", "Delete SimpleName: currBlkIdx(241)", "Delete ReturnStatement(242)", "Delete Block(243)", "Delete MethodDeclaration(244)", "Delete TextElement: Get the current record number, within the current block, zero based.(245)", "Delete TextElement: Thus, current offset = (currentBlockNum * recsPerBlk) + currentRecNum.(246)", "Delete TagElement(247)", "Delete TextElement:  The current zero based record number.(248)", "Delete TagElement: @return(249)", "Delete Javadoc(250)", "Delete Modifier: public(251)", "Delete PrimitiveType: int(252)", "Delete SimpleName: getCurrentRecordNum(253)", "Delete SimpleName: currRecIdx(254)", "Delete NumberLiteral: 1(255)", "Delete InfixExpression: -(256)", "Delete ReturnStatement(257)", "Delete Block(258)", "Delete MethodDeclaration(259)", "Delete TextElement: Get the TAR Buffer's record size.(260)", "Delete TagElement(261)", "Delete TextElement:  The RecordSize value(262)", "Delete TagElement: @return(263)", "Delete Javadoc(264)", "Delete Modifier: public(265)", "Delete PrimitiveType: int(266)", "Delete SimpleName: getRecordSize(267)", "Delete SimpleName: recordSize(268)", "Delete ReturnStatement(269)", "Delete Block(270)", "Delete MethodDeclaration(271)", "Delete TextElement: Determine if an archive record indicate End of Archive. End of archive is(272)", "Delete TextElement: indicated by a record that consists entirely of null bytes.(273)", "Delete TagElement(274)", "Delete SimpleName: record(275)", "Delete TextElement:  The record data to check.(276)", "Delete TagElement: @param(277)", "Delete TextElement:  The EOFRecord value(278)", "Delete TagElement: @return(279)", "Delete Javadoc(280)", "Delete Modifier: public(281)", "Delete PrimitiveType: boolean(282)", "Delete SimpleName: isEOFRecord(283)", "Delete Modifier: final(284)", "Delete PrimitiveType: byte(285)", "Delete Dimension(286)", "Delete ArrayType: byte[](287)", "Delete SimpleName: record(288)", "Delete SingleVariableDeclaration(289)", "Delete Modifier: final(290)", "Delete PrimitiveType: int(291)", "Delete SimpleName: size(292)", "Delete SimpleName: getRecordSize(293)", "Delete MethodInvocation(294)", "Delete VariableDeclarationFragment(295)", "Delete VariableDeclarationStatement(296)", "Delete PrimitiveType: int(297)", "Delete SimpleName: i(298)", "Delete NumberLiteral: 0(299)", "Delete VariableDeclarationFragment(300)", "Delete VariableDeclarationExpression(301)", "Delete SimpleName: i(302)", "Delete SimpleName: size(303)", "Delete InfixExpression: <(304)", "Delete SimpleName: i(305)", "Delete PrefixExpression: ++(306)", "Delete SimpleName: record(307)", "Delete SimpleName: i(308)", "Delete ArrayAccess(309)", "Delete NumberLiteral: 0(310)", "Delete InfixExpression: !=(311)", "Delete BooleanLiteral: false(312)", "Delete ReturnStatement(313)", "Delete Block(314)", "Delete IfStatement(315)", "Delete Block(316)", "Delete ForStatement(317)", "Delete BooleanLiteral: true(318)", "Delete ReturnStatement(319)", "Delete Block(320)", "Delete MethodDeclaration(321)", "Delete TextElement: Close the TarBuffer. If this is an output buffer, also flush the current(322)", "Delete TextElement: block before closing.(323)", "Delete TagElement(324)", "Delete Javadoc(325)", "Delete Modifier: public(326)", "Delete PrimitiveType: void(327)", "Delete SimpleName: close(328)", "Delete SimpleName: IOException(329)", "Delete SimpleType: IOException(330)", "Delete SimpleName: debug(331)", "Delete SimpleName: debug(332)", "Delete StringLiteral: \"TarBuffer.closeBuffer().\"(333)", "Delete MethodInvocation(334)", "Delete ExpressionStatement(335)", "Delete Block(336)", "Delete IfStatement(337)", "Delete NullLiteral(338)", "Delete SimpleName: output(339)", "Delete InfixExpression: !=(340)", "Delete SimpleName: flushBlock(341)", "Delete MethodInvocation(342)", "Delete ExpressionStatement(343)", "Delete SimpleName: output(344)", "Delete QualifiedName: System.out(345)", "Delete InfixExpression: !=(346)", "Delete SimpleName: output(347)", "Delete QualifiedName: System.err(348)", "Delete InfixExpression: !=(349)", "Delete InfixExpression: &&(350)", "Delete SimpleName: output(351)", "Delete SimpleName: close(352)", "Delete MethodInvocation(353)", "Delete ExpressionStatement(354)", "Delete SimpleName: output(355)", "Delete NullLiteral(356)", "Delete Assignment: =(357)", "Delete ExpressionStatement(358)", "Delete Block(359)", "Delete IfStatement(360)", "Delete Block(361)", "Delete SimpleName: input(362)", "Delete NullLiteral(363)", "Delete InfixExpression: !=(364)", "Delete SimpleName: input(365)", "Delete QualifiedName: System.in(366)", "Delete InfixExpression: !=(367)", "Delete SimpleName: input(368)", "Delete SimpleName: close(369)", "Delete MethodInvocation(370)", "Delete ExpressionStatement(371)", "Delete SimpleName: input(372)", "Delete NullLiteral(373)", "Delete Assignment: =(374)", "Delete ExpressionStatement(375)", "Delete Block(376)", "Delete IfStatement(377)", "Delete Block(378)", "Delete IfStatement(379)", "Delete IfStatement(380)", "Delete Block(381)", "Delete MethodDeclaration(382)", "Delete TextElement: Read a record from the input stream and return the data.(383)", "Delete TagElement(384)", "Delete TextElement:  The record data.(385)", "Delete TagElement: @return(386)", "Delete SimpleName: IOException(387)", "Delete TextElement:  Description of Exception(388)", "Delete TagElement: @throws(389)", "Delete Javadoc(390)", "Delete Modifier: public(391)", "Delete PrimitiveType: byte(392)", "Delete Dimension(393)", "Delete ArrayType: byte[](394)", "Delete SimpleName: readRecord(395)", "Delete SimpleName: IOException(396)", "Delete SimpleType: IOException(397)", "Delete SimpleName: debug(398)", "Delete Modifier: final(399)", "Delete SimpleName: String(400)", "Delete SimpleType: String(401)", "Delete SimpleName: message(402)", "Delete StringLiteral: \"ReadRecord: recIdx = \"(403)", "Delete SimpleName: currRecIdx(404)", "Delete StringLiteral: \" blkIdx = \"(405)", "Delete SimpleName: currBlkIdx(406)", "Delete InfixExpression: +(407)", "Delete VariableDeclarationFragment(408)", "Delete VariableDeclarationStatement(409)", "Delete SimpleName: debug(410)", "Delete SimpleName: message(411)", "Delete MethodInvocation(412)", "Delete ExpressionStatement(413)", "Delete Block(414)", "Delete IfStatement(415)", "Delete NullLiteral(416)", "Delete SimpleName: input(417)", "Delete InfixExpression: ==(418)", "Delete Modifier: final(419)", "Delete SimpleName: String(420)", "Delete SimpleType: String(421)", "Delete SimpleName: message(422)", "Delete StringLiteral: \"reading from an output buffer\"(423)", "Delete VariableDeclarationFragment(424)", "Delete VariableDeclarationStatement(425)", "Delete SimpleName: IOException(426)", "Delete SimpleType: IOException(427)", "Delete SimpleName: message(428)", "Delete ClassInstanceCreation(429)", "Delete ThrowStatement(430)", "Delete Block(431)", "Delete IfStatement(432)", "Delete SimpleName: currRecIdx(433)", "Delete SimpleName: recsPerBlock(434)", "Delete InfixExpression: >=(435)", "Delete SimpleName: readBlock(436)", "Delete MethodInvocation(437)", "Delete PrefixExpression: !(438)", "Delete NullLiteral(439)", "Delete ReturnStatement(440)", "Delete Block(441)", "Delete IfStatement(442)", "Delete Block(443)", "Delete IfStatement(444)", "Delete Modifier: final(445)", "Delete PrimitiveType: byte(446)", "Delete Dimension(447)", "Delete ArrayType: byte[](448)", "Delete SimpleName: result(449)", "Delete PrimitiveType: byte(450)", "Delete Dimension(451)", "Delete ArrayType: byte[](452)", "Delete SimpleName: recordSize(453)", "Delete ArrayCreation(454)", "Delete VariableDeclarationFragment(455)", "Delete VariableDeclarationStatement(456)", "Delete SimpleName: System(457)", "Delete SimpleName: arraycopy(458)", "Delete SimpleName: blockBuffer(459)", "Delete SimpleName: currRecIdx(460)", "Delete SimpleName: recordSize(461)", "Delete InfixExpression: *(462)", "Delete ParenthesizedExpression(463)", "Delete SimpleName: result(464)", "Delete NumberLiteral: 0(465)", "Delete SimpleName: recordSize(466)", "Delete MethodInvocation(467)", "Delete ExpressionStatement(468)", "Delete SimpleName: currRecIdx(469)", "Delete PostfixExpression: ++(470)", "Delete ExpressionStatement(471)", "Delete SimpleName: result(472)", "Delete ReturnStatement(473)", "Delete Block(474)", "Delete MethodDeclaration(475)", "Delete TextElement: Skip over a record on the input stream.(476)", "Delete TagElement(477)", "Delete Javadoc(478)", "Delete Modifier: public(479)", "Delete PrimitiveType: void(480)", "Delete SimpleName: skipRecord(481)", "Delete SimpleName: IOException(482)", "Delete SimpleType: IOException(483)", "Delete SimpleName: debug(484)", "Delete Modifier: final(485)", "Delete SimpleName: String(486)", "Delete SimpleType: String(487)", "Delete SimpleName: message(488)", "Delete StringLiteral: \"SkipRecord: recIdx = \"(489)", "Delete SimpleName: currRecIdx(490)", "Delete StringLiteral: \" blkIdx = \"(491)", "Delete SimpleName: currBlkIdx(492)", "Delete InfixExpression: +(493)", "Delete VariableDeclarationFragment(494)", "Delete VariableDeclarationStatement(495)", "Delete SimpleName: debug(496)", "Delete SimpleName: message(497)", "Delete MethodInvocation(498)", "Delete ExpressionStatement(499)", "Delete Block(500)", "Delete IfStatement(501)", "Delete NullLiteral(502)", "Delete SimpleName: input(503)", "Delete InfixExpression: ==(504)", "Delete Modifier: final(505)", "Delete SimpleName: String(506)", "Delete SimpleType: String(507)", "Delete SimpleName: message(508)", "Delete StringLiteral: \"reading (via skip) from an output buffer\"(509)", "Delete VariableDeclarationFragment(510)", "Delete VariableDeclarationStatement(511)", "Delete SimpleName: IOException(512)", "Delete SimpleType: IOException(513)", "Delete SimpleName: message(514)", "Delete ClassInstanceCreation(515)", "Delete ThrowStatement(516)", "Delete Block(517)", "Delete IfStatement(518)", "Delete SimpleName: currRecIdx(519)", "Delete SimpleName: recsPerBlock(520)", "Delete InfixExpression: >=(521)", "Delete SimpleName: readBlock(522)", "Delete MethodInvocation(523)", "Delete PrefixExpression: !(524)", "Delete ReturnStatement(525)", "Delete Block(526)", "Delete IfStatement(527)", "Delete Block(528)", "Delete IfStatement(529)", "Delete SimpleName: currRecIdx(530)", "Delete PostfixExpression: ++(531)", "Delete ExpressionStatement(532)", "Delete Block(533)", "Delete MethodDeclaration(534)", "Delete TextElement: Write an archive record to the archive.(535)", "Delete TagElement(536)", "Delete SimpleName: record(537)", "Delete TextElement:  The record data to write to the archive.(538)", "Delete TagElement: @param(539)", "Delete Javadoc(540)", "Delete Modifier: public(541)", "Delete PrimitiveType: void(542)", "Delete SimpleName: writeRecord(543)", "Delete Modifier: final(544)", "Delete PrimitiveType: byte(545)", "Delete Dimension(546)", "Delete ArrayType: byte[](547)", "Delete SimpleName: record(548)", "Delete SingleVariableDeclaration(549)", "Delete SimpleName: IOException(550)", "Delete SimpleType: IOException(551)", "Delete SimpleName: debug(552)", "Delete Modifier: final(553)", "Delete SimpleName: String(554)", "Delete SimpleType: String(555)", "Delete SimpleName: message(556)", "Delete StringLiteral: \"WriteRecord: recIdx = \"(557)", "Delete SimpleName: currRecIdx(558)", "Delete StringLiteral: \" blkIdx = \"(559)", "Delete SimpleName: currBlkIdx(560)", "Delete InfixExpression: +(561)", "Delete VariableDeclarationFragment(562)", "Delete VariableDeclarationStatement(563)", "Delete SimpleName: debug(564)", "Delete SimpleName: message(565)", "Delete MethodInvocation(566)", "Delete ExpressionStatement(567)", "Delete Block(568)", "Delete IfStatement(569)", "Delete NullLiteral(570)", "Delete SimpleName: output(571)", "Delete InfixExpression: ==(572)", "Delete Modifier: final(573)", "Delete SimpleName: String(574)", "Delete SimpleType: String(575)", "Delete SimpleName: message(576)", "Delete StringLiteral: \"writing to an input buffer\"(577)", "Delete VariableDeclarationFragment(578)", "Delete VariableDeclarationStatement(579)", "Delete SimpleName: IOException(580)", "Delete SimpleType: IOException(581)", "Delete SimpleName: message(582)", "Delete ClassInstanceCreation(583)", "Delete ThrowStatement(584)", "Delete Block(585)", "Delete IfStatement(586)", "Delete QualifiedName: record.length(587)", "Delete SimpleName: recordSize(588)", "Delete InfixExpression: !=(589)", "Delete Modifier: final(590)", "Delete SimpleName: String(591)", "Delete SimpleType: String(592)", "Delete SimpleName: message(593)", "Delete StringLiteral: \"record to write has length '\"(594)", "Delete QualifiedName: record.length(595)", "Delete StringLiteral: \"' which is not the record size of '\"(596)", "Delete SimpleName: recordSize(597)", "Delete StringLiteral: \"'\"(598)", "Delete InfixExpression: +(599)", "Delete VariableDeclarationFragment(600)", "Delete VariableDeclarationStatement(601)", "Delete SimpleName: IOException(602)", "Delete SimpleType: IOException(603)", "Delete SimpleName: message(604)", "Delete ClassInstanceCreation(605)", "Delete ThrowStatement(606)", "Delete Block(607)", "Delete IfStatement(608)", "Delete SimpleName: currRecIdx(609)", "Delete SimpleName: recsPerBlock(610)", "Delete InfixExpression: >=(611)", "Delete SimpleName: writeBlock(612)", "Delete MethodInvocation(613)", "Delete ExpressionStatement(614)", "Delete Block(615)", "Delete IfStatement(616)", "Delete SimpleName: System(617)", "Delete SimpleName: arraycopy(618)", "Delete SimpleName: record(619)", "Delete NumberLiteral: 0(620)", "Delete SimpleName: blockBuffer(621)", "Delete SimpleName: currRecIdx(622)", "Delete SimpleName: recordSize(623)", "Delete InfixExpression: *(624)", "Delete ParenthesizedExpression(625)", "Delete SimpleName: recordSize(626)", "Delete MethodInvocation(627)", "Delete ExpressionStatement(628)", "Delete SimpleName: currRecIdx(629)", "Delete PostfixExpression: ++(630)", "Delete ExpressionStatement(631)", "Delete Block(632)", "Delete MethodDeclaration(633)", "Delete TextElement: Write an archive record to the archive, where the record may be inside of(634)", "Delete TextElement: a larger array buffer. The buffer must be \"offset plus record size\" long.(635)", "Delete TagElement(636)", "Delete SimpleName: buffer(637)", "Delete TextElement:  The buffer containing the record data to write.(638)", "Delete TagElement: @param(639)", "Delete SimpleName: offset(640)", "Delete TextElement:  The offset of the record data within buf.(641)", "Delete TagElement: @param(642)", "Delete Javadoc(643)", "Delete Modifier: public(644)", "Delete PrimitiveType: void(645)", "Delete SimpleName: writeRecord(646)", "Delete Modifier: final(647)", "Delete PrimitiveType: byte(648)", "Delete Dimension(649)", "Delete ArrayType: byte[](650)", "Delete SimpleName: buffer(651)", "Delete SingleVariableDeclaration(652)", "Delete Modifier: final(653)", "Delete PrimitiveType: int(654)", "Delete SimpleName: offset(655)", "Delete SingleVariableDeclaration(656)", "Delete SimpleName: IOException(657)", "Delete SimpleType: IOException(658)", "Delete SimpleName: debug(659)", "Delete Modifier: final(660)", "Delete SimpleName: String(661)", "Delete SimpleType: String(662)", "Delete SimpleName: message(663)", "Delete StringLiteral: \"WriteRecord: recIdx = \"(664)", "Delete SimpleName: currRecIdx(665)", "Delete StringLiteral: \" blkIdx = \"(666)", "Delete SimpleName: currBlkIdx(667)", "Delete InfixExpression: +(668)", "Delete VariableDeclarationFragment(669)", "Delete VariableDeclarationStatement(670)", "Delete SimpleName: debug(671)", "Delete SimpleName: message(672)", "Delete MethodInvocation(673)", "Delete ExpressionStatement(674)", "Delete Block(675)", "Delete IfStatement(676)", "Delete NullLiteral(677)", "Delete SimpleName: output(678)", "Delete InfixExpression: ==(679)", "Delete Modifier: final(680)", "Delete SimpleName: String(681)", "Delete SimpleType: String(682)", "Delete SimpleName: message(683)", "Delete StringLiteral: \"writing to an input buffer\"(684)", "Delete VariableDeclarationFragment(685)", "Delete VariableDeclarationStatement(686)", "Delete SimpleName: IOException(687)", "Delete SimpleType: IOException(688)", "Delete SimpleName: message(689)", "Delete ClassInstanceCreation(690)", "Delete ThrowStatement(691)", "Delete Block(692)", "Delete IfStatement(693)", "Delete SimpleName: offset(694)", "Delete SimpleName: recordSize(695)", "Delete InfixExpression: +(696)", "Delete ParenthesizedExpression(697)", "Delete QualifiedName: buffer.length(698)", "Delete InfixExpression: >(699)", "Delete Modifier: final(700)", "Delete SimpleName: String(701)", "Delete SimpleType: String(702)", "Delete SimpleName: message(703)", "Delete StringLiteral: \"record has length '\"(704)", "Delete QualifiedName: buffer.length(705)", "Delete StringLiteral: \"' with offset '\"(706)", "Delete SimpleName: offset(707)", "Delete StringLiteral: \"' which is less than the record size of '\"(708)", "Delete SimpleName: recordSize(709)", "Delete StringLiteral: \"'\"(710)", "Delete InfixExpression: +(711)", "Delete VariableDeclarationFragment(712)", "Delete VariableDeclarationStatement(713)", "Delete SimpleName: IOException(714)", "Delete SimpleType: IOException(715)", "Delete SimpleName: message(716)", "Delete ClassInstanceCreation(717)", "Delete ThrowStatement(718)", "Delete Block(719)", "Delete IfStatement(720)", "Delete SimpleName: currRecIdx(721)", "Delete SimpleName: recsPerBlock(722)", "Delete InfixExpression: >=(723)", "Delete SimpleName: writeBlock(724)", "Delete MethodInvocation(725)", "Delete ExpressionStatement(726)", "Delete Block(727)", "Delete IfStatement(728)", "Delete SimpleName: System(729)", "Delete SimpleName: arraycopy(730)", "Delete SimpleName: buffer(731)", "Delete SimpleName: offset(732)", "Delete SimpleName: blockBuffer(733)", "Delete SimpleName: currRecIdx(734)", "Delete SimpleName: recordSize(735)", "Delete InfixExpression: *(736)", "Delete ParenthesizedExpression(737)", "Delete SimpleName: recordSize(738)", "Delete MethodInvocation(739)", "Delete ExpressionStatement(740)", "Delete SimpleName: currRecIdx(741)", "Delete PostfixExpression: ++(742)", "Delete ExpressionStatement(743)", "Delete Block(744)", "Delete MethodDeclaration(745)", "Delete TextElement: Flush the current data block if it has any data in it.(746)", "Delete TagElement(747)", "Delete Javadoc(748)", "Delete Modifier: private(749)", "Delete PrimitiveType: void(750)", "Delete SimpleName: flushBlock(751)", "Delete SimpleName: IOException(752)", "Delete SimpleType: IOException(753)", "Delete SimpleName: debug(754)", "Delete Modifier: final(755)", "Delete SimpleName: String(756)", "Delete SimpleType: String(757)", "Delete SimpleName: message(758)", "Delete StringLiteral: \"TarBuffer.flushBlock() called.\"(759)", "Delete VariableDeclarationFragment(760)", "Delete VariableDeclarationStatement(761)", "Delete SimpleName: debug(762)", "Delete SimpleName: message(763)", "Delete MethodInvocation(764)", "Delete ExpressionStatement(765)", "Delete Block(766)", "Delete IfStatement(767)", "Delete SimpleName: output(768)", "Delete NullLiteral(769)", "Delete InfixExpression: ==(770)", "Delete Modifier: final(771)", "Delete SimpleName: String(772)", "Delete SimpleType: String(773)", "Delete SimpleName: message(774)", "Delete StringLiteral: \"writing to an input buffer\"(775)", "Delete VariableDeclarationFragment(776)", "Delete VariableDeclarationStatement(777)", "Delete SimpleName: IOException(778)", "Delete SimpleType: IOException(779)", "Delete SimpleName: message(780)", "Delete ClassInstanceCreation(781)", "Delete ThrowStatement(782)", "Delete Block(783)", "Delete IfStatement(784)", "Delete SimpleName: currRecIdx(785)", "Delete NumberLiteral: 0(786)", "Delete InfixExpression: >(787)", "Delete SimpleName: writeBlock(788)", "Delete MethodInvocation(789)", "Delete ExpressionStatement(790)", "Delete Block(791)", "Delete IfStatement(792)", "Delete Block(793)", "Delete MethodDeclaration(794)", "Delete TextElement: Initialization common to all constructors.(795)", "Delete TagElement(796)", "Delete Javadoc(797)", "Delete Modifier: private(798)", "Delete PrimitiveType: void(799)", "Delete SimpleName: initialize(800)", "Delete Modifier: final(801)", "Delete PrimitiveType: int(802)", "Delete SimpleName: blockSize(803)", "Delete SingleVariableDeclaration(804)", "Delete Modifier: final(805)", "Delete PrimitiveType: int(806)", "Delete SimpleName: recordSize(807)", "Delete SingleVariableDeclaration(808)", "Delete SimpleName: debug(809)", "Delete BooleanLiteral: false(810)", "Delete Assignment: =(811)", "Delete ExpressionStatement(812)", "Delete ThisExpression(813)", "Delete SimpleName: blockSize(814)", "Delete FieldAccess(815)", "Delete SimpleName: blockSize(816)", "Delete Assignment: =(817)", "Delete ExpressionStatement(818)", "Delete ThisExpression(819)", "Delete SimpleName: recordSize(820)", "Delete FieldAccess(821)", "Delete SimpleName: recordSize(822)", "Delete Assignment: =(823)", "Delete ExpressionStatement(824)", "Delete SimpleName: recsPerBlock(825)", "Delete ThisExpression(826)", "Delete SimpleName: blockSize(827)", "Delete FieldAccess(828)", "Delete ThisExpression(829)", "Delete SimpleName: recordSize(830)", "Delete FieldAccess(831)", "Delete InfixExpression: /(832)", "Delete ParenthesizedExpression(833)", "Delete Assignment: =(834)", "Delete ExpressionStatement(835)", "Delete SimpleName: blockBuffer(836)", "Delete PrimitiveType: byte(837)", "Delete Dimension(838)", "Delete ArrayType: byte[](839)", "Delete ThisExpression(840)", "Delete SimpleName: blockSize(841)", "Delete FieldAccess(842)", "Delete ArrayCreation(843)", "Delete Assignment: =(844)", "Delete ExpressionStatement(845)", "Delete NullLiteral(846)", "Delete SimpleName: input(847)", "Delete InfixExpression: !=(848)", "Delete SimpleName: currBlkIdx(849)", "Delete NumberLiteral: 1(850)", "Delete PrefixExpression: -(851)", "Delete Assignment: =(852)", "Delete ExpressionStatement(853)", "Delete SimpleName: currRecIdx(854)", "Delete SimpleName: recsPerBlock(855)", "Delete Assignment: =(856)", "Delete ExpressionStatement(857)", "Delete Block(858)", "Delete SimpleName: currBlkIdx(859)", "Delete NumberLiteral: 0(860)", "Delete Assignment: =(861)", "Delete ExpressionStatement(862)", "Delete SimpleName: currRecIdx(863)", "Delete NumberLiteral: 0(864)", "Delete Assignment: =(865)", "Delete ExpressionStatement(866)", "Delete Block(867)", "Delete IfStatement(868)", "Delete Block(869)", "Delete MethodDeclaration(870)", "Delete TextElement:  false if End-Of-File, else true(871)", "Delete TagElement: @return(872)", "Delete Javadoc(873)", "Delete Modifier: private(874)", "Delete PrimitiveType: boolean(875)", "Delete SimpleName: readBlock(876)", "Delete SimpleName: IOException(877)", "Delete SimpleType: IOException(878)", "Delete SimpleName: debug(879)", "Delete Modifier: final(880)", "Delete SimpleName: String(881)", "Delete SimpleType: String(882)", "Delete SimpleName: message(883)", "Delete StringLiteral: \"ReadBlock: blkIdx = \"(884)", "Delete SimpleName: currBlkIdx(885)", "Delete InfixExpression: +(886)", "Delete VariableDeclarationFragment(887)", "Delete VariableDeclarationStatement(888)", "Delete SimpleName: debug(889)", "Delete SimpleName: message(890)", "Delete MethodInvocation(891)", "Delete ExpressionStatement(892)", "Delete Block(893)", "Delete IfStatement(894)", "Delete NullLiteral(895)", "Delete SimpleName: input(896)", "Delete InfixExpression: ==(897)", "Delete Modifier: final(898)", "Delete SimpleName: String(899)", "Delete SimpleType: String(900)", "Delete SimpleName: message(901)", "Delete StringLiteral: \"reading from an output buffer\"(902)", "Delete VariableDeclarationFragment(903)", "Delete VariableDeclarationStatement(904)", "Delete SimpleName: IOException(905)", "Delete SimpleType: IOException(906)", "Delete SimpleName: message(907)", "Delete ClassInstanceCreation(908)", "Delete ThrowStatement(909)", "Delete Block(910)", "Delete IfStatement(911)", "Delete SimpleName: currRecIdx(912)", "Delete NumberLiteral: 0(913)", "Delete Assignment: =(914)", "Delete ExpressionStatement(915)", "Delete PrimitiveType: int(916)", "Delete SimpleName: offset(917)", "Delete NumberLiteral: 0(918)", "Delete VariableDeclarationFragment(919)", "Delete VariableDeclarationStatement(920)", "Delete PrimitiveType: int(921)", "Delete SimpleName: bytesNeeded(922)", "Delete SimpleName: blockSize(923)", "Delete VariableDeclarationFragment(924)", "Delete VariableDeclarationStatement(925)", "Delete SimpleName: bytesNeeded(926)", "Delete NumberLiteral: 0(927)", "Delete InfixExpression: >(928)", "Delete Modifier: final(929)", "Delete PrimitiveType: long(930)", "Delete SimpleName: numBytes(931)", "Delete SimpleName: input(932)", "Delete SimpleName: read(933)", "Delete SimpleName: blockBuffer(934)", "Delete SimpleName: offset(935)", "Delete SimpleName: bytesNeeded(936)", "Delete MethodInvocation(937)", "Delete VariableDeclarationFragment(938)", "Delete VariableDeclarationStatement(939)", "Delete SimpleName: numBytes(940)", "Delete NumberLiteral: 1(941)", "Delete PrefixExpression: -(942)", "Delete InfixExpression: ==(943)", "Delete SimpleName: Arrays(944)", "Delete SimpleName: fill(945)", "Delete SimpleName: blockBuffer(946)", "Delete SimpleName: offset(947)", "Delete SimpleName: offset(948)", "Delete SimpleName: bytesNeeded(949)", "Delete InfixExpression: +(950)", "Delete PrimitiveType: byte(951)", "Delete NumberLiteral: 0(952)", "Delete CastExpression(953)", "Delete MethodInvocation(954)", "Delete ExpressionStatement(955)", "Delete BreakStatement(956)", "Delete Block(957)", "Delete IfStatement(958)", "Delete SimpleName: offset(959)", "Delete SimpleName: numBytes(960)", "Delete Assignment: +=(961)", "Delete ExpressionStatement(962)", "Delete SimpleName: bytesNeeded(963)", "Delete SimpleName: numBytes(964)", "Delete Assignment: -=(965)", "Delete ExpressionStatement(966)", "Delete SimpleName: numBytes(967)", "Delete SimpleName: blockSize(968)", "Delete InfixExpression: !=(969)", "Delete SimpleName: debug(970)", "Delete QualifiedName: System.err(971)", "Delete SimpleName: println(972)", "Delete StringLiteral: \"ReadBlock: INCOMPLETE READ \"(973)", "Delete SimpleName: numBytes(974)", "Delete StringLiteral: \" of \"(975)", "Delete SimpleName: blockSize(976)", "Delete StringLiteral: \" bytes read.\"(977)", "Delete InfixExpression: +(978)", "Delete MethodInvocation(979)", "Delete ExpressionStatement(980)", "Delete Block(981)", "Delete IfStatement(982)", "Delete Block(983)", "Delete IfStatement(984)", "Delete Block(985)", "Delete WhileStatement(986)", "Delete SimpleName: currBlkIdx(987)", "Delete PostfixExpression: ++(988)", "Delete ExpressionStatement(989)", "Delete BooleanLiteral: true(990)", "Delete ReturnStatement(991)", "Delete Block(992)", "Delete MethodDeclaration(993)", "Delete TextElement: Write a TarBuffer block to the archive.(994)", "Delete TagElement(995)", "Delete SimpleName: IOException(996)", "Delete TextElement:  Description of Exception(997)", "Delete TagElement: @throws(998)", "Delete Javadoc(999)", "Delete Modifier: private(1000)", "Delete PrimitiveType: void(1001)", "Delete SimpleName: writeBlock(1002)", "Delete SimpleName: IOException(1003)", "Delete SimpleType: IOException(1004)", "Delete SimpleName: debug(1005)", "Delete Modifier: final(1006)", "Delete SimpleName: String(1007)", "Delete SimpleType: String(1008)", "Delete SimpleName: message(1009)", "Delete StringLiteral: \"WriteBlock: blkIdx = \"(1010)", "Delete SimpleName: currBlkIdx(1011)", "Delete InfixExpression: +(1012)", "Delete VariableDeclarationFragment(1013)", "Delete VariableDeclarationStatement(1014)", "Delete SimpleName: debug(1015)", "Delete SimpleName: message(1016)", "Delete MethodInvocation(1017)", "Delete ExpressionStatement(1018)", "Delete Block(1019)", "Delete IfStatement(1020)", "Delete NullLiteral(1021)", "Delete SimpleName: output(1022)", "Delete InfixExpression: ==(1023)", "Delete Modifier: final(1024)", "Delete SimpleName: String(1025)", "Delete SimpleType: String(1026)", "Delete SimpleName: message(1027)", "Delete StringLiteral: \"writing to an input buffer\"(1028)", "Delete VariableDeclarationFragment(1029)", "Delete VariableDeclarationStatement(1030)", "Delete SimpleName: IOException(1031)", "Delete SimpleType: IOException(1032)", "Delete SimpleName: message(1033)", "Delete ClassInstanceCreation(1034)", "Delete ThrowStatement(1035)", "Delete Block(1036)", "Delete IfStatement(1037)", "Delete SimpleName: output(1038)", "Delete SimpleName: write(1039)", "Delete SimpleName: blockBuffer(1040)", "Delete NumberLiteral: 0(1041)", "Delete SimpleName: blockSize(1042)", "Delete MethodInvocation(1043)", "Delete ExpressionStatement(1044)", "Delete SimpleName: output(1045)", "Delete SimpleName: flush(1046)", "Delete MethodInvocation(1047)", "Delete ExpressionStatement(1048)", "Delete SimpleName: currRecIdx(1049)", "Delete NumberLiteral: 0(1050)", "Delete Assignment: =(1051)", "Delete ExpressionStatement(1052)", "Delete SimpleName: currBlkIdx(1053)", "Delete PostfixExpression: ++(1054)", "Delete ExpressionStatement(1055)", "Delete Block(1056)", "Delete MethodDeclaration(1057)", "Delete Modifier: protected(1058)", "Delete PrimitiveType: void(1059)", "Delete SimpleName: debug(1060)", "Delete Modifier: final(1061)", "Delete SimpleName: String(1062)", "Delete SimpleType: String(1063)", "Delete SimpleName: message(1064)", "Delete SingleVariableDeclaration(1065)", "Delete SimpleName: debug(1066)", "Delete QualifiedName: System.err(1067)", "Delete SimpleName: println(1068)", "Delete SimpleName: message(1069)", "Delete MethodInvocation(1070)", "Delete ExpressionStatement(1071)", "Delete Block(1072)", "Delete IfStatement(1073)", "Delete Block(1074)", "Delete MethodDeclaration(1075)", "Delete TypeDeclaration: class(1076)"]}}, {"TarConstants_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.vfs2.provider.tar", "DEL PackageDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL PrimitiveType: byte", "DEL Modifier: final", "DEL CastExpression", "DEL CharacterLiteral: '0'", "DEL PrimitiveType: byte", "DEL Modifier: final", "DEL CastExpression", "DEL PrimitiveType: byte", "DEL TextElement: LF_ constants represent the \"link flag\" of an entry, or more commonly,", "DEL PrimitiveType: int", "DEL Modifier: static", "DEL SimpleName: GNAMELEN", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: MAGICLEN", "DEL Modifier: static", "DEL PrimitiveType: int", "DEL TagElement", "DEL Modifier: static", "DEL Modifier: final", "DEL SimpleName: LF_GNUTYPE_LONGNAME", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL FieldDeclaration", "DEL TextElement: FIFO (pipe) file type.", "DEL Javadoc", "DEL Javadoc", "DEL SimpleName: LF_CONTIG", "DEL SimpleName: String", "DEL TextElement: The length of the group name field in a header buffer.", "DEL Modifier: public", "DEL Javadoc", "DEL Modifier: final", "DEL CharacterLiteral: '5'", "DEL TextElement: The length of the checksum field in a header buffer.", "DEL CharacterLiteral: '1'", "DEL PrimitiveType: byte", "DEL FieldDeclaration", "DEL Modifier: public", "DEL SimpleName: LF_SYMLINK", "DEL TextElement: Link file type.", "DEL Modifier: static", "DEL Modifier: public", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL PrimitiveType: byte", "DEL NumberLiteral: 8", "DEL NumberLiteral: 8", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL PrimitiveType: byte", "DEL PrimitiveType: int", "DEL PrimitiveType: byte", "DEL TextElement: The magic tag representing a POSIX tar archive.", "DEL FieldDeclaration", "DEL CharacterLiteral: '3'", "DEL FieldDeclaration", "DEL Javadoc", "DEL FieldDeclaration", "DEL Javadoc", "DEL Modifier: public", "DEL Javadoc", "DEL TextElement: The length of the size field in a header buffer.", "DEL TagElement", "DEL TextElement: the \"entry type\". This is the \"old way\" of indicating a normal file.", "DEL Modifier: static", "DEL Modifier: public", "DEL Javadoc", "DEL Modifier: final", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL Modifier: static", "DEL SimpleName: LF_BLK", "DEL Modifier: final", "DEL FieldDeclaration", "DEL Javadoc", "DEL TagElement", "DEL TextElement: The magic tag representing a GNU tar archive.", "DEL Modifier: final", "DEL TextElement: The length of the user name field in a header buffer.", "DEL Modifier: static", "DEL FieldDeclaration", "DEL Modifier: public", "DEL SimpleType: String", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL FieldDeclaration", "DEL TagElement", "DEL SimpleName: UIDLEN", "DEL NumberLiteral: 8", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"ustar  \"", "DEL TagElement", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: GIDLEN", "DEL PrimitiveType: byte", "DEL SimpleName: TarConstants", "DEL Modifier: public", "DEL TypeDeclaration: class", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL TextElement: Character device file type.", "DEL Modifier: public", "DEL NumberLiteral: 12", "DEL Modifier: final", "DEL TagElement", "DEL TextElement: Identifies the *next* file on the tape as having a long name.", "DEL TagElement", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0", "DEL TagElement", "DEL SimpleName: LF_OLDNORM", "DEL VariableDeclarationFragment", "DEL CastExpression", "DEL NumberLiteral: 12", "DEL NumberLiteral: 32", "DEL TextElement: This class contains all the definitions used in the package.", "DEL PrimitiveType: byte", "DEL TextElement: Normal file type.", "DEL PrimitiveType: byte", "DEL Javadoc", "DEL CharacterLiteral: '2'", "DEL Modifier: static", "DEL FieldDeclaration", "DEL Javadoc", "DEL CastExpression", "DEL PrimitiveType: byte", "DEL Javadoc", "DEL FieldDeclaration", "DEL Modifier: static", "DEL StringLiteral: \"ustar\"", "DEL TextElement: Contiguous file type.", "DEL Javadoc", "DEL Modifier: static", "DEL SimpleName: CHKSUMLEN", "DEL Javadoc", "DEL Modifier: static", "DEL Modifier: final", "DEL Modifier: final", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL Modifier: static", "DEL PrimitiveType: byte", "DEL SimpleName: TMAGIC", "DEL Modifier: static", "DEL SimpleName: LF_LINK", "DEL CharacterLiteral: '7'", "DEL FieldDeclaration", "DEL TagElement", "DEL StringLiteral: \"././@LongLink\"", "DEL FieldDeclaration", "DEL Modifier: private", "DEL PrimitiveType: byte", "DEL Modifier: final", "DEL SimpleType: String", "DEL TextElement: Block device file type.", "DEL TagElement", "DEL Modifier: public", "DEL PrimitiveType: byte", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL Modifier: public", "DEL Modifier: static", "DEL Modifier: final", "DEL CharacterLiteral: '6'", "DEL NumberLiteral: 8", "DEL MethodDeclaration", "DEL Javadoc", "DEL SimpleName: TarConstants", "DEL Modifier: static", "DEL SimpleName: GNU_LONGLINK", "DEL FieldDeclaration", "DEL TagElement", "DEL Modifier: static", "DEL TagElement", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL PrimitiveType: byte", "DEL TextElement: The namr of the GNU tar entry which contains a long name.", "DEL PrimitiveType: int", "DEL NumberLiteral: 32", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL TextElement: Symbolic link file type.", "DEL SimpleName: MODTIMELEN", "DEL SimpleName: String", "DEL Modifier: final", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: LF_CHR", "DEL FieldDeclaration", "DEL PrimitiveType: byte", "DEL CharacterLiteral: 'L'", "DEL Modifier: public", "DEL Modifier: public", "DEL NumberLiteral: 8", "DEL TextElement: The length of the group id field in a header buffer.", "DEL CastExpression", "DEL TagElement", "DEL NumberLiteral: 8", "DEL Modifier: static", "DEL Modifier: final", "DEL TagElement", "DEL Javadoc", "DEL TextElement: The length of the devices field in a header buffer.", "DEL Modifier: static", "DEL Modifier: public", "DEL TagElement", "DEL SimpleName: DEVLEN", "DEL Block", "DEL TextElement: The length of the user id field in a header buffer.", "DEL SimpleName: LF_NORMAL", "DEL VariableDeclarationFragment", "DEL Modifier: static", "DEL Javadoc", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: SIZELEN", "DEL CastExpression", "DEL Modifier: public", "DEL SimpleName: UNAMELEN", "DEL Modifier: public", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL TextElement: The length of the mode field in a header buffer.", "DEL PrimitiveType: int", "DEL TagElement", "DEL FieldDeclaration", "DEL Javadoc", "DEL Modifier: public", "DEL Modifier: public", "DEL TextElement: The length of the magic field in a header buffer.", "DEL SimpleType: String", "DEL TagElement", "DEL SimpleName: String", "DEL FieldDeclaration", "DEL CharacterLiteral: '4'", "DEL TextElement: Directory file type.", "DEL PrimitiveType: byte", "DEL Javadoc", "DEL Modifier: static", "DEL Modifier: static", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL SimpleName: GNU_TMAGIC", "DEL Modifier: final", "DEL SimpleName: MODELEN", "DEL SimpleName: LF_FIFO", "DEL TextElement: Prevent instantiation", "DEL FieldDeclaration", "DEL FieldDeclaration", "DEL TagElement", "DEL FieldDeclaration", "DEL Javadoc", "DEL Javadoc", "DEL Modifier: final", "DEL Modifier: final", "DEL Javadoc", "DEL SimpleName: LF_DIR", "DEL CastExpression", "DEL TagElement: @author", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL Javadoc", "DEL TextElement: The length of the modification time field in a header buffer.", "DEL PrimitiveType: byte", "DEL TextElement:  <a href=\"http://commons.apache.org/vfs/team-list.html\">Commons VFS team</a>", "DEL FieldDeclaration", "DEL PrimitiveType: byte"]}]}}, {"TarConstants_diff": {"operations": ["Delete QualifiedName: org.apache.commons.vfs2.provider.tar(0)", "Delete PackageDeclaration(1)", "Delete TextElement: This class contains all the definitions used in the package.(2)", "Delete TagElement(3)", "Delete TextElement:  <a href=\"http://commons.apache.org/vfs/team-list.html\">Commons VFS team</a>(4)", "Delete TagElement: @author(5)", "Delete Javadoc(6)", "Delete Modifier: final(7)", "Delete SimpleName: TarConstants(8)", "Delete TextElement: The length of the mode field in a header buffer.(9)", "Delete TagElement(10)", "Delete Javadoc(11)", "Delete Modifier: public(12)", "Delete Modifier: static(13)", "Delete Modifier: final(14)", "Delete PrimitiveType: int(15)", "Delete SimpleName: MODELEN(16)", "Delete NumberLiteral: 8(17)", "Delete VariableDeclarationFragment(18)", "Delete FieldDeclaration(19)", "Delete TextElement: The length of the user id field in a header buffer.(20)", "Delete TagElement(21)", "Delete Javadoc(22)", "Delete Modifier: public(23)", "Delete Modifier: static(24)", "Delete Modifier: final(25)", "Delete PrimitiveType: int(26)", "Delete SimpleName: UIDLEN(27)", "Delete NumberLiteral: 8(28)", "Delete VariableDeclarationFragment(29)", "Delete FieldDeclaration(30)", "Delete TextElement: The length of the group id field in a header buffer.(31)", "Delete TagElement(32)", "Delete Javadoc(33)", "Delete Modifier: public(34)", "Delete Modifier: static(35)", "Delete Modifier: final(36)", "Delete PrimitiveType: int(37)", "Delete SimpleName: GIDLEN(38)", "Delete NumberLiteral: 8(39)", "Delete VariableDeclarationFragment(40)", "Delete FieldDeclaration(41)", "Delete TextElement: The length of the checksum field in a header buffer.(42)", "Delete TagElement(43)", "Delete Javadoc(44)", "Delete Modifier: public(45)", "Delete Modifier: static(46)", "Delete Modifier: final(47)", "Delete PrimitiveType: int(48)", "Delete SimpleName: CHKSUMLEN(49)", "Delete NumberLiteral: 8(50)", "Delete VariableDeclarationFragment(51)", "Delete FieldDeclaration(52)", "Delete TextElement: The length of the size field in a header buffer.(53)", "Delete TagElement(54)", "Delete Javadoc(55)", "Delete Modifier: public(56)", "Delete Modifier: static(57)", "Delete Modifier: final(58)", "Delete PrimitiveType: int(59)", "Delete SimpleName: SIZELEN(60)", "Delete NumberLiteral: 12(61)", "Delete VariableDeclarationFragment(62)", "Delete FieldDeclaration(63)", "Delete TextElement: The length of the magic field in a header buffer.(64)", "Delete TagElement(65)", "Delete Javadoc(66)", "Delete Modifier: public(67)", "Delete Modifier: static(68)", "Delete Modifier: final(69)", "Delete PrimitiveType: int(70)", "Delete SimpleName: MAGICLEN(71)", "Delete NumberLiteral: 8(72)", "Delete VariableDeclarationFragment(73)", "Delete FieldDeclaration(74)", "Delete TextElement: The length of the modification time field in a header buffer.(75)", "Delete TagElement(76)", "Delete Javadoc(77)", "Delete Modifier: public(78)", "Delete Modifier: static(79)", "Delete Modifier: final(80)", "Delete PrimitiveType: int(81)", "Delete SimpleName: MODTIMELEN(82)", "Delete NumberLiteral: 12(83)", "Delete VariableDeclarationFragment(84)", "Delete FieldDeclaration(85)", "Delete TextElement: The length of the user name field in a header buffer.(86)", "Delete TagElement(87)", "Delete Javadoc(88)", "Delete Modifier: public(89)", "Delete Modifier: static(90)", "Delete Modifier: final(91)", "Delete PrimitiveType: int(92)", "Delete SimpleName: UNAMELEN(93)", "Delete NumberLiteral: 32(94)", "Delete VariableDeclarationFragment(95)", "Delete FieldDeclaration(96)", "Delete TextElement: The length of the group name field in a header buffer.(97)", "Delete TagElement(98)", "Delete Javadoc(99)", "Delete Modifier: public(100)", "Delete Modifier: static(101)", "Delete Modifier: final(102)", "Delete PrimitiveType: int(103)", "Delete SimpleName: GNAMELEN(104)", "Delete NumberLiteral: 32(105)", "Delete VariableDeclarationFragment(106)", "Delete FieldDeclaration(107)", "Delete TextElement: The length of the devices field in a header buffer.(108)", "Delete TagElement(109)", "Delete Javadoc(110)", "Delete Modifier: public(111)", "Delete Modifier: static(112)", "Delete Modifier: final(113)", "Delete PrimitiveType: int(114)", "Delete SimpleName: DEVLEN(115)", "Delete NumberLiteral: 8(116)", "Delete VariableDeclarationFragment(117)", "Delete FieldDeclaration(118)", "Delete TextElement: LF_ constants represent the \"link flag\" of an entry, or more commonly,(119)", "Delete TextElement: the \"entry type\". This is the \"old way\" of indicating a normal file.(120)", "Delete TagElement(121)", "Delete Javadoc(122)", "Delete Modifier: public(123)", "Delete Modifier: static(124)", "Delete Modifier: final(125)", "Delete PrimitiveType: byte(126)", "Delete SimpleName: LF_OLDNORM(127)", "Delete NumberLiteral: 0(128)", "Delete VariableDeclarationFragment(129)", "Delete FieldDeclaration(130)", "Delete TextElement: Normal file type.(131)", "Delete TagElement(132)", "Delete Javadoc(133)", "Delete Modifier: public(134)", "Delete Modifier: static(135)", "Delete Modifier: final(136)", "Delete PrimitiveType: byte(137)", "Delete SimpleName: LF_NORMAL(138)", "Delete PrimitiveType: byte(139)", "Delete CharacterLiteral: '0'(140)", "Delete CastExpression(141)", "Delete VariableDeclarationFragment(142)", "Delete FieldDeclaration(143)", "Delete TextElement: Link file type.(144)", "Delete TagElement(145)", "Delete Javadoc(146)", "Delete Modifier: public(147)", "Delete Modifier: static(148)", "Delete Modifier: final(149)", "Delete PrimitiveType: byte(150)", "Delete SimpleName: LF_LINK(151)", "Delete PrimitiveType: byte(152)", "Delete CharacterLiteral: '1'(153)", "Delete CastExpression(154)", "Delete VariableDeclarationFragment(155)", "Delete FieldDeclaration(156)", "Delete TextElement: Symbolic link file type.(157)", "Delete TagElement(158)", "Delete Javadoc(159)", "Delete Modifier: public(160)", "Delete Modifier: static(161)", "Delete Modifier: final(162)", "Delete PrimitiveType: byte(163)", "Delete SimpleName: LF_SYMLINK(164)", "Delete PrimitiveType: byte(165)", "Delete CharacterLiteral: '2'(166)", "Delete CastExpression(167)", "Delete VariableDeclarationFragment(168)", "Delete FieldDeclaration(169)", "Delete TextElement: Character device file type.(170)", "Delete TagElement(171)", "Delete Javadoc(172)", "Delete Modifier: public(173)", "Delete Modifier: static(174)", "Delete Modifier: final(175)", "Delete PrimitiveType: byte(176)", "Delete SimpleName: LF_CHR(177)", "Delete PrimitiveType: byte(178)", "Delete CharacterLiteral: '3'(179)", "Delete CastExpression(180)", "Delete VariableDeclarationFragment(181)", "Delete FieldDeclaration(182)", "Delete TextElement: Block device file type.(183)", "Delete TagElement(184)", "Delete Javadoc(185)", "Delete Modifier: public(186)", "Delete Modifier: static(187)", "Delete Modifier: final(188)", "Delete PrimitiveType: byte(189)", "Delete SimpleName: LF_BLK(190)", "Delete PrimitiveType: byte(191)", "Delete CharacterLiteral: '4'(192)", "Delete CastExpression(193)", "Delete VariableDeclarationFragment(194)", "Delete FieldDeclaration(195)", "Delete TextElement: Directory file type.(196)", "Delete TagElement(197)", "Delete Javadoc(198)", "Delete Modifier: public(199)", "Delete Modifier: static(200)", "Delete Modifier: final(201)", "Delete PrimitiveType: byte(202)", "Delete SimpleName: LF_DIR(203)", "Delete PrimitiveType: byte(204)", "Delete CharacterLiteral: '5'(205)", "Delete CastExpression(206)", "Delete VariableDeclarationFragment(207)", "Delete FieldDeclaration(208)", "Delete TextElement: FIFO (pipe) file type.(209)", "Delete TagElement(210)", "Delete Javadoc(211)", "Delete Modifier: public(212)", "Delete Modifier: static(213)", "Delete Modifier: final(214)", "Delete PrimitiveType: byte(215)", "Delete SimpleName: LF_FIFO(216)", "Delete PrimitiveType: byte(217)", "Delete CharacterLiteral: '6'(218)", "Delete CastExpression(219)", "Delete VariableDeclarationFragment(220)", "Delete FieldDeclaration(221)", "Delete TextElement: Contiguous file type.(222)", "Delete TagElement(223)", "Delete Javadoc(224)", "Delete Modifier: public(225)", "Delete Modifier: static(226)", "Delete Modifier: final(227)", "Delete PrimitiveType: byte(228)", "Delete SimpleName: LF_CONTIG(229)", "Delete PrimitiveType: byte(230)", "Delete CharacterLiteral: '7'(231)", "Delete CastExpression(232)", "Delete VariableDeclarationFragment(233)", "Delete FieldDeclaration(234)", "Delete TextElement: The magic tag representing a POSIX tar archive.(235)", "Delete TagElement(236)", "Delete Javadoc(237)", "Delete Modifier: public(238)", "Delete Modifier: static(239)", "Delete Modifier: final(240)", "Delete SimpleName: String(241)", "Delete SimpleType: String(242)", "Delete SimpleName: TMAGIC(243)", "Delete StringLiteral: \"ustar\"(244)", "Delete VariableDeclarationFragment(245)", "Delete FieldDeclaration(246)", "Delete TextElement: The magic tag representing a GNU tar archive.(247)", "Delete TagElement(248)", "Delete Javadoc(249)", "Delete Modifier: public(250)", "Delete Modifier: static(251)", "Delete Modifier: final(252)", "Delete SimpleName: String(253)", "Delete SimpleType: String(254)", "Delete SimpleName: GNU_TMAGIC(255)", "Delete StringLiteral: \"ustar  \"(256)", "Delete VariableDeclarationFragment(257)", "Delete FieldDeclaration(258)", "Delete TextElement: The namr of the GNU tar entry which contains a long name.(259)", "Delete TagElement(260)", "Delete Javadoc(261)", "Delete Modifier: public(262)", "Delete Modifier: static(263)", "Delete Modifier: final(264)", "Delete SimpleName: String(265)", "Delete SimpleType: String(266)", "Delete SimpleName: GNU_LONGLINK(267)", "Delete StringLiteral: \"././@LongLink\"(268)", "Delete VariableDeclarationFragment(269)", "Delete FieldDeclaration(270)", "Delete TextElement: Identifies the *next* file on the tape as having a long name.(271)", "Delete TagElement(272)", "Delete Javadoc(273)", "Delete Modifier: public(274)", "Delete Modifier: static(275)", "Delete Modifier: final(276)", "Delete PrimitiveType: byte(277)", "Delete SimpleName: LF_GNUTYPE_LONGNAME(278)", "Delete PrimitiveType: byte(279)", "Delete CharacterLiteral: 'L'(280)", "Delete CastExpression(281)", "Delete VariableDeclarationFragment(282)", "Delete FieldDeclaration(283)", "Delete TextElement: Prevent instantiation(284)", "Delete TagElement(285)", "Delete Javadoc(286)", "Delete Modifier: private(287)", "Delete SimpleName: TarConstants(288)", "Delete Block(289)", "Delete MethodDeclaration(290)", "Delete TypeDeclaration: class(291)"]}}, {"TarEntry_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.vfs2.provider.tar"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.File", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Date"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Locale", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL PrimitiveType: long", "DEL Modifier: public", "DEL TagElement", "DEL Assignment: =", "DEL Javadoc", "DEL PostfixExpression: ++", "DEL CharacterLiteral: ':'", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ArrayAccess", "DEL PrimitiveType: int", "DEL SimpleType: String", "DEL TextElement:  The tar entry header buffer to fill in.", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: name", "DEL TextElement:  The file that the entry represents.", "DEL SimpleName: mode", "DEL Assignment: =", "DEL TextElement: InputStream is available for writing to the archive, and the header", "DEL Block", "DEL FieldDeclaration", "DEL TextElement: Get this entry's group id.", "DEL SimpleName: Override", "DEL TagElement", "DEL InfixExpression: ||", "DEL SimpleName: buffer", "DEL TextElement: Finally, TarEntries can be constructed from nothing but a name. This allows", "DEL Modifier: final", "DEL SimpleName: header", "DEL SimpleName: checkSum", "DEL CastExpression", "DEL SimpleName: magic", "DEL TagElement: @return", "DEL Modifier: final", "DEL SimpleName: getUserName", "DEL SimpleName: userId", "DEL MethodInvocation", "DEL SimpleName: time", "DEL SimpleName: String", "DEL MarkerAnnotation", "DEL TextElement:  The header bytes from a tar archive entry.", "DEL SimpleType: StringBuffer", "DEL SimpleType: StringBuffer", "DEL MethodDeclaration", "DEL QualifiedName: TarConstants.CHKSUMLEN", "DEL VariableDeclarationFragment", "DEL Assignment: +=", "DEL PrimitiveType: byte", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: ch2", "DEL NumberLiteral: 100", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL SimpleName: name", "DEL TagElement", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: TarUtils", "DEL SimpleName: setModTime", "DEL TagElement", "DEL SimpleName: magic", "DEL MethodInvocation", "DEL SimpleName: getName", "DEL Assignment: =", "DEL StringLiteral: \"/\"", "DEL SimpleName: indexOf", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL SimpleName: result", "DEL TextElement: Set this entry's file size.", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL TextElement: Construct an entry with only a name. This allows the programmer to", "DEL ThisExpression", "DEL SimpleName: getProperty", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL SimpleType: StringBuffer", "DEL Modifier: public", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL Assignment: =", "DEL Javadoc", "DEL SimpleName: TarEntry", "DEL Dimension", "DEL SimpleName: offset", "DEL VariableDeclarationStatement", "DEL Block", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL ThisExpression", "DEL Modifier: final", "DEL SimpleName: name", "DEL InfixExpression: &&", "DEL TextElement:  True if the entries are equal.", "DEL TextElement: header names being equal.", "DEL SimpleName: userID", "DEL TextElement: char uid[8];", "DEL SimpleName: NAMELEN", "DEL SimpleName: linkName", "DEL SimpleName: getNameBytes", "DEL FieldDeclaration", "DEL VariableDeclarationStatement", "DEL InfixExpression: !=", "DEL TextElement:  Entry to be checked for equality.", "DEL SimpleName: time", "DEL SimpleName: checkSumOffset", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL InfixExpression: ||", "DEL SimpleName: list", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: groupName", "DEL PrimitiveType: byte", "DEL SimpleName: groupName", "DEL StringLiteral: \"/\"", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: header", "DEL TextElement: Construct an empty entry and prepares the header values.", "DEL TextElement: TarEntries that are created from the header bytes read from an archive are", "DEL ExpressionStatement", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: groupName", "DEL Assignment: =", "DEL Assignment: =", "DEL TextElement: Get this entry's user name.", "DEL SimpleName: devMajor", "DEL PrimitiveType: void", "DEL SimpleName: linkFlag", "DEL Assignment: =", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL Modifier: public", "DEL SimpleName: offset", "DEL Assignment: =", "DEL TagElement", "DEL SimpleName: offset", "DEL Modifier: public", "DEL Block", "DEL TextElement: Construct an entry with a name an a link flag.", "DEL TextElement:  This entry's new user name.", "DEL Block", "DEL CharacterLiteral: ':'", "DEL Block", "DEL SimpleName: isDir", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleType: StringBuffer", "DEL SimpleName: Object", "DEL SimpleName: offset", "DEL VariableDeclarationStatement", "DEL QualifiedName: TarConstants.TMAGIC", "DEL SimpleType: StringBuffer", "DEL SimpleName: other", "DEL ExpressionStatement", "DEL SimpleName: userName", "DEL InfixExpression: >=", "DEL TagElement: @return", "DEL MethodInvocation", "DEL SimpleName: StringBuffer", "DEL TextElement: char size[12];", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: TarUtils", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL SimpleType: Date", "DEL SimpleName: name", "DEL TextElement: Set the mode for this entry", "DEL TextElement: Set this entry's modification time.", "DEL Modifier: public", "DEL SimpleName: TarEntry", "DEL Modifier: public", "DEL SimpleName: getMode", "DEL ExpressionStatement", "DEL SimpleName: StringBuffer", "DEL TagElement: @param", "DEL ArrayType: String[]", "DEL TagElement: @param", "DEL SimpleName: File", "DEL TextElement:  True if this entry is a directory.", "DEL CharacterLiteral: 'A'", "DEL Assignment: =", "DEL StringLiteral: \"\"", "DEL PrimitiveType: byte", "DEL TagElement: @see", "DEL NumberLiteral: 1", "DEL NumberLiteral: 1", "DEL TextElement: Get this entry's name.", "DEL Block", "DEL SingleVariableDeclaration", "DEL ConstructorInvocation", "DEL SimpleName: modTime", "DEL TagElement", "DEL Javadoc", "DEL SimpleName: offset", "DEL TagElement", "DEL MethodInvocation", "DEL InfixExpression: <=", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 040755", "DEL SimpleName: header", "DEL SimpleName: groupName", "DEL QualifiedName: TarConstants.MODELEN", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL InfixExpression: /", "DEL VariableDeclarationStatement", "DEL SimpleName: buffer", "DEL ExpressionStatement", "DEL Assignment: +=", "DEL TextElement: Set this entry's group id.", "DEL ExpressionStatement", "DEL SimpleName: offset", "DEL InfixExpression: ==", "DEL Modifier: final", "DEL SimpleType: TarEntry", "DEL SimpleName: modTime", "DEL TextElement: struct header {", "DEL SimpleName: StringBuffer", "DEL Javadoc", "DEL SimpleName: checkSum", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL SimpleName: StringBuffer", "DEL SimpleName: System", "DEL SimpleName: StringBuffer", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL NumberLiteral: 1", "DEL ExpressionStatement", "DEL SimpleName: groupName", "DEL SimpleName: buffer", "DEL MethodDeclaration", "DEL SimpleType: StringBuffer", "DEL Assignment: +=", "DEL SimpleName: offset", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleName: other", "DEL SimpleType: TarEntry", "DEL SimpleName: getUserID", "DEL Block", "DEL SimpleName: linkFlag", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: name", "DEL SimpleName: name", "DEL Modifier: static", "DEL ExpressionStatement", "DEL SimpleName: linkName", "DEL Javadoc", "DEL TagElement", "DEL Modifier: private", "DEL ReturnStatement", "DEL Modifier: private", "DEL SimpleName: offset", "DEL Modifier: private", "DEL BooleanLiteral: true", "DEL NumberLiteral: 1000", "DEL SimpleName: buffer", "DEL NumberLiteral: 040755", "DEL SimpleName: parseName", "DEL SimpleName: buffer", "DEL SimpleName: name", "DEL SimpleName: groupID", "DEL ExpressionStatement", "DEL SimpleName: offset", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TextElement: name.", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL QualifiedName: TarConstants.LF_DIR", "DEL SimpleName: list", "DEL Assignment: =", "DEL QualifiedName: TarConstants.DEVLEN", "DEL SimpleName: name", "DEL SimpleName: name", "DEL Assignment: +=", "DEL InfixExpression: <=", "DEL ExpressionStatement", "DEL SimpleName: TarUtils", "DEL Javadoc", "DEL TagElement", "DEL TextElement: The entry's minor device number.", "DEL TagElement", "DEL NumberLiteral: 1", "DEL QualifiedName: TarConstants.MODELEN", "DEL SimpleName: TarUtils", "DEL TextElement: Determine if the two entries are equal. Equality is determined by the", "DEL CastExpression", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ReturnStatement", "DEL TagElement", "DEL SimpleName: linkFlag", "DEL TagElement", "DEL Block", "DEL TextElement: used when extracting from or listing the contents of an archive. These", "DEL StringLiteral: \"\"", "DEL SimpleName: NAMELEN", "DEL SimpleName: Date", "DEL SimpleName: TarEntry", "DEL SimpleName: time", "DEL Assignment: =", "DEL SimpleType: StringBuffer", "DEL InfixExpression: >=", "DEL SimpleName: offset", "DEL InfixExpression: &&", "DEL PrefixExpression: ++", "DEL SimpleName: StringBuffer", "DEL Assignment: =", "DEL MethodDeclaration", "DEL SimpleType: TarEntry", "DEL TextElement: Get this entry's file size.", "DEL SimpleName: setGroupID", "DEL CastExpression", "DEL SimpleName: header", "DEL Assignment: =", "DEL SimpleName: size", "DEL SimpleName: TarEntry", "DEL TagElement: @return", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleType: TarEntry", "DEL ExpressionStatement", "DEL SimpleName: time", "DEL TextElement:  This entry's file size.", "DEL SimpleName: toString", "DEL ReturnStatement", "DEL MethodInvocation", "DEL Modifier: final", "DEL TextElement:  An array of TarEntry's for this entry's children.", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL ArrayAccess", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL Block", "DEL TextElement: char uname[TUNMLEN];", "DEL QualifiedName: TarConstants.MODTIMELEN", "DEL NumberLiteral: 2", "DEL SimpleName: modTime", "DEL TagElement: @param", "DEL SimpleName: userName", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL SimpleName: groupName", "DEL SimpleType: TarEntry", "DEL TextElement:  This entry's group name.", "DEL VariableDeclarationFragment", "DEL QualifiedName: TarConstants.UNAMELEN", "DEL QualifiedName: buffer.length", "DEL SimpleName: offset", "DEL PrimitiveType: byte", "DEL BooleanLiteral: false", "DEL PrimitiveType: byte", "DEL SimpleName: File", "DEL SimpleName: header", "DEL SimpleName: name", "DEL SimpleName: buffer", "DEL Modifier: public", "DEL MethodDeclaration", "DEL QualifiedName: list.length", "DEL CharacterLiteral: 'z'", "DEL SimpleType: TarEntry", "DEL SimpleName: offset", "DEL SimpleName: String", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL QualifiedName: TarConstants.DEVLEN", "DEL SimpleName: file", "DEL VariableDeclarationFragment", "DEL SimpleName: getCheckSum", "DEL TagElement: @return", "DEL MethodDeclaration", "DEL Modifier: private", "DEL SimpleName: ch1", "DEL MethodInvocation", "DEL SimpleName: offset", "DEL SimpleName: ch1", "DEL Javadoc", "DEL SimpleName: name", "DEL QualifiedName: TarConstants.DEVLEN", "DEL QualifiedName: TarConstants.UIDLEN", "DEL ArrayAccess", "DEL NullLiteral", "DEL PrimitiveType: boolean", "DEL ConstructorInvocation", "DEL ExpressionStatement", "DEL TagElement", "DEL FieldAccess", "DEL TagElement: @param", "DEL SimpleName: ch2", "DEL SimpleName: magic", "DEL SimpleName: getLongOctalBytes", "DEL SimpleName: buffer", "DEL SimpleName: offset", "DEL Block", "DEL CharacterLiteral: 'a'", "DEL Modifier: final", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL TextElement: The entry's permission mode.", "DEL SimpleName: System", "DEL TextElement: Parse an entry's header information from a header buffer.", "DEL Assignment: =", "DEL SimpleName: toString", "DEL ClassInstanceCreation", "DEL SimpleName: equals", "DEL Modifier: private", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL Modifier: public", "DEL IfStatement", "DEL SimpleName: toString", "DEL TagElement", "DEL SimpleName: offset", "DEL SimpleName: NAMELEN", "DEL SimpleName: result", "DEL SimpleName: mode", "DEL SimpleName: String", "DEL SimpleName: parseOctal", "DEL Assignment: =", "DEL SimpleName: getPath", "DEL Modifier: final", "DEL InfixExpression: &&", "DEL SimpleName: offset", "DEL CharacterLiteral: ' '", "DEL MethodDeclaration", "DEL SimpleName: linkFlag", "DEL QualifiedName: TarConstants.GIDLEN", "DEL Assignment: =", "DEL Modifier: public", "DEL TagElement: @return", "DEL TextElement: constructed from information from the file.", "DEL IfStatement", "DEL SimpleName: name", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL TextElement: their header filled in using the File's information. They also keep a", "DEL PrimitiveType: void", "DEL TagElement: @param", "DEL Block", "DEL TextElement: array of TarEntries for this entry's children.", "DEL SimpleName: offset", "DEL VariableDeclarationFragment", "DEL PrimitiveType: void", "DEL VariableDeclarationFragment", "DEL SimpleName: header", "DEL ReturnStatement", "DEL SimpleName: writeEntryHeader", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL WhileStatement", "DEL TextElement: Set this entry's user name.", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 31", "DEL ExpressionStatement", "DEL PrimitiveType: long", "DEL Assignment: =", "DEL ExpressionStatement", "DEL ArrayCreation", "DEL SimpleName: modTime", "DEL SimpleName: isDescendent", "DEL NumberLiteral: 0", "DEL TagElement", "DEL TextElement: If this entry represents a file, and the file is a directory, return an", "DEL TextElement: The entry's size.", "DEL TagElement", "DEL TextElement:  Description of Parameter", "DEL QualifiedName: TarConstants.GNAMELEN", "DEL SimpleName: String", "DEL SimpleName: Date", "DEL SimpleName: mode", "DEL SimpleName: buffer", "DEL IfStatement", "DEL SimpleName: Date", "DEL SimpleName: StringBuffer", "DEL QualifiedName: File.separatorChar", "DEL Modifier: public", "DEL PostfixExpression: ++", "DEL VariableDeclarationFragment", "DEL SimpleName: indexOf", "DEL QualifiedName: TarConstants.UNAMELEN", "DEL BooleanLiteral: false", "DEL FieldDeclaration", "DEL IfStatement", "DEL TextElement:  This entry's new group name.", "DEL PostfixExpression: ++", "DEL SimpleName: offset", "DEL SimpleName: file", "DEL TextElement:  This entry's new modification time.", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL SimpleName: name", "DEL Modifier: final", "DEL SimpleName: getGroupName", "DEL FieldDeclaration", "DEL SimpleName: file", "DEL SimpleName: parseName", "DEL VariableDeclarationFragment", "DEL PrefixExpression: !", "DEL SimpleName: desc", "DEL TextElement: char chksum[8];", "DEL SimpleName: TarUtils", "DEL ExpressionStatement", "DEL SimpleName: mode", "DEL InfixExpression: /", "DEL SimpleName: TarUtils", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0", "DEL Modifier: private", "DEL QualifiedName: TarConstants.LF_NORMAL", "DEL Block", "DEL SimpleName: hashCode", "DEL Modifier: final", "DEL ArrayType: TarEntry[]", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: TarUtils", "DEL SimpleName: name", "DEL InfixExpression: !=", "DEL MethodDeclaration", "DEL SimpleName: buffer", "DEL TextElement: information is constructed from other information. In this case the header", "DEL TextElement: Indicate if this entry is a GNU long name block", "DEL SimpleType: StringBuffer", "DEL SimpleName: getNameBytes", "DEL Assignment: =", "DEL PrimitiveType: int", "DEL SimpleName: TarEntry", "DEL ExpressionStatement", "DEL SimpleName: getOctalBytes", "DEL SimpleName: linkFlag", "DEL ExpressionStatement", "DEL QualifiedName: TarConstants.MODTIMELEN", "DEL Modifier: final", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL TextElement:  The new Mode value", "DEL MethodInvocation", "DEL Modifier: final", "DEL Block", "DEL Assignment: +=", "DEL SimpleName: offset", "DEL SimpleName: offset", "DEL Modifier: final", "DEL InfixExpression: /", "DEL SimpleName: offset", "DEL Block", "DEL TagElement", "DEL TextElement:  True if entry is a descendant of", "DEL TextElement: char mode[8];", "DEL Dimension", "DEL Dimension", "DEL MethodInvocation", "DEL NumberLiteral: 2", "DEL SimpleName: entry", "DEL PrimitiveType: void", "DEL SimpleType: String", "DEL SimpleName: offset", "DEL ReturnStatement", "DEL TextElement:  <a href=\"http://commons.apache.org/vfs/team-list.html\">Commons VFS team</a>", "DEL TagElement: @param", "DEL SimpleName: getCheckSumOctalBytes", "DEL SimpleName: name", "DEL TextElement:  the name of the entry", "DEL CharacterLiteral: '/'", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL SimpleName: groupId", "DEL TextElement: Return whether or not this entry represents a directory.", "DEL SimpleName: TarUtils", "DEL Modifier: final", "DEL SimpleName: length", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL TextElement: The entry's modification time.", "DEL SimpleName: linkName", "DEL Modifier: public", "DEL Assignment: =", "DEL InfixExpression: <", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: groupName", "DEL SimpleType: File", "DEL Block", "DEL SimpleName: buffer", "DEL Modifier: final", "DEL Block", "DEL InfixExpression: <", "DEL SimpleName: TarUtils", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL QualifiedName: TarConstants.UNAMELEN", "DEL TextElement: Set this entry's name.", "DEL SimpleName: indexOf", "DEL TagElement", "DEL ArrayAccess", "DEL SimpleName: parseOctal", "DEL PrimitiveType: int", "DEL ArrayType: TarEntry[]", "DEL SimpleName: buffer", "DEL PrimitiveType: long", "DEL SimpleName: file", "DEL NumberLiteral: 0", "DEL SimpleName: header", "DEL TagElement: @param", "DEL StringLiteral: \"os.name\"", "DEL MethodInvocation", "DEL SimpleName: name", "DEL SimpleType: TarEntry", "DEL NumberLiteral: 1000", "DEL SimpleName: isDir", "DEL SimpleName: lastModified", "DEL SimpleName: ch1", "DEL SimpleName: name", "DEL SimpleName: devMinor", "DEL PrimitiveType: boolean", "DEL TextElement:      Description of Parameter", "DEL ArrayCreation", "DEL ForStatement", "DEL NumberLiteral: 0", "DEL ClassInstanceCreation", "DEL SimpleName: name", "DEL SimpleType: StringBuffer", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: StringBuffer", "DEL Block", "DEL SimpleName: other", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleName: groupID", "DEL MethodInvocation", "DEL SimpleName: charAt", "DEL SimpleName: String", "DEL SimpleName: length", "DEL InfixExpression: ==", "DEL Javadoc", "DEL TextElement: entries have their header filled in using the header bytes. They also set the", "DEL Assignment: =", "DEL FieldAccess", "DEL Javadoc", "DEL SimpleName: getName", "DEL Modifier: final", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL Block", "DEL PrimitiveType: void", "DEL Javadoc", "DEL TextElement: char devminor[8];", "DEL Block", "DEL TagElement", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: TarEntry", "DEL SimpleName: TarUtils", "DEL ReturnStatement", "DEL ArrayAccess", "DEL SimpleName: String", "DEL Javadoc", "DEL SimpleName: TarEntry", "DEL Assignment: +=", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: buffer", "DEL MethodInvocation", "DEL SimpleName: getOctalBytes", "DEL ExpressionStatement", "DEL TagElement: @return", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL SimpleName: isGNULongNameEntry", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: parseOctal", "DEL MethodInvocation", "DEL SimpleName: file", "DEL NumberLiteral: 1", "DEL FieldAccess", "DEL SimpleName: offset", "DEL ClassInstanceCreation", "DEL TagElement", "DEL SimpleType: String", "DEL SimpleName: time", "DEL Javadoc", "DEL PrimitiveType: char", "DEL TagElement: @return", "DEL SimpleName: name", "DEL ExpressionStatement", "DEL SimpleName: userID", "DEL SimpleName: name", "DEL SimpleName: charAt", "DEL PrimitiveType: void", "DEL FieldDeclaration", "DEL TextElement:  This entry's mode.", "DEL SimpleName: StringBuffer", "DEL ExpressionStatement", "DEL SimpleName: linkFlag", "DEL SingleVariableDeclaration", "DEL SimpleType: File", "DEL Assignment: =", "DEL TagElement: @param", "DEL SimpleName: devMajor", "DEL SimpleName: list", "DEL SimpleName: isDirectory", "DEL TextElement: The length of the name field in a header buffer.", "DEL TagElement: @param", "DEL SimpleName: offset", "DEL Javadoc", "DEL PrimitiveType: int", "DEL VariableDeclarationExpression", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: colon", "DEL SimpleName: file", "DEL SimpleName: name", "DEL Modifier: public", "DEL TextElement:  The ModTime value", "DEL SimpleName: header", "DEL SimpleType: String", "DEL ArrayType: TarEntry[]", "DEL ExpressionStatement", "DEL TagElement: @author", "DEL Javadoc", "DEL SimpleName: TarEntry", "DEL PrimitiveType: int", "DEL SimpleName: isDirectory", "DEL SimpleName: header", "DEL SimpleName: substring", "DEL SimpleName: TarUtils", "DEL TextElement: The entry's major device number.", "DEL Assignment: =", "DEL Assignment: =", "DEL TextElement:  This entry's user id.", "DEL TagElement: @return", "DEL SimpleType: StringBuffer", "DEL Block", "DEL TextElement:  This entry's file.", "DEL MethodInvocation", "DEL SimpleName: linkFlag", "DEL MethodInvocation", "DEL SimpleName: offset", "DEL SimpleName: TarEntry", "DEL SimpleName: getFile", "DEL SimpleName: colon", "DEL SimpleName: userName", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL TagElement", "DEL MethodInvocation", "DEL Javadoc", "DEL TextElement: are instantiated with the TarEntry( File ) constructor. These entries have", "DEL PrimitiveType: byte", "DEL SimpleName: linkFlag", "DEL SimpleName: length", "DEL InfixExpression: >", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 31", "DEL SimpleName: parseName", "DEL SimpleName: offset", "DEL QualifiedName: TarConstants.LF_DIR", "DEL ExpressionStatement", "DEL SimpleName: startsWith", "DEL PrimitiveType: int", "DEL SimpleName: file", "DEL ForStatement", "DEL SimpleName: i", "DEL SimpleName: groupId", "DEL SimpleName: computeCheckSum", "DEL MethodDeclaration", "DEL Block", "DEL TextElement: Get this entry's checksum.", "DEL SimpleName: parseOctal", "DEL SingleVariableDeclaration", "DEL InfixExpression: !=", "DEL Assignment: =", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: file", "DEL SimpleName: TarUtils", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: StringBuffer", "DEL NumberLiteral: 1000", "DEL SimpleName: file", "DEL TagElement: @param", "DEL Block", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: groupName", "DEL SimpleName: header", "DEL IfStatement", "DEL SimpleName: modTime", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: mode", "DEL Block", "DEL Modifier: private", "DEL FieldAccess", "DEL SimpleName: parseTarHeader", "DEL SimpleName: String", "DEL Assignment: +=", "DEL Assignment: =", "DEL TextElement: <p/>", "DEL TextElement: Determine if the given entry is a descendant of this entry. Descendancy", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleType: TarEntry", "DEL ExpressionStatement", "DEL SimpleName: TarUtils", "DEL SimpleName: size", "DEL FieldDeclaration", "DEL SimpleName: file", "DEL TagElement: @return", "DEL MethodInvocation", "DEL SimpleName: name", "DEL Javadoc", "DEL PrefixExpression: -", "DEL InfixExpression: &&", "DEL ThisExpression", "DEL ClassInstanceCreation", "DEL ArrayType: TarEntry[]", "DEL StringLiteral: \"\"", "DEL SimpleName: Override", "DEL SimpleName: userName", "DEL SimpleName: magic", "DEL SimpleName: getDirectoryEntries", "DEL ReturnStatement", "DEL SimpleType: StringBuffer", "DEL SimpleName: size", "DEL SimpleName: offset", "DEL Modifier: private", "DEL SimpleName: TarEntry", "DEL SimpleName: name", "DEL ExpressionStatement", "DEL SimpleName: groupName", "DEL MethodInvocation", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: mode", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SimpleName: TarUtils", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL SimpleName: getName", "DEL BooleanLiteral: true", "DEL SimpleName: substring", "DEL SimpleName: setName", "DEL TextElement:  Entry to be checked as a descendent of", "DEL TextElement: char mtime[12];", "DEL TagElement: @return", "DEL SimpleName: name", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: desc", "DEL SimpleName: checkSumOffset", "DEL SimpleName: userID", "DEL TextElement: char gname[TGNMLEN];", "DEL ExpressionStatement", "DEL ArrayType: byte[]", "DEL Assignment: =", "DEL ExpressionStatement", "DEL ThisExpression", "DEL NumberLiteral: 1000", "DEL SimpleName: parseOctal", "DEL TagElement: @return", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL PrimitiveType: boolean", "DEL QualifiedName: Locale.US", "DEL Modifier: final", "DEL QualifiedName: TarConstants.DEVLEN", "DEL SimpleName: String", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL NumberLiteral: 0", "DEL PrimitiveType: int", "DEL SimpleName: offset", "DEL SimpleName: getName", "DEL QualifiedName: TarConstants.GIDLEN", "DEL SimpleName: NAMELEN", "DEL SimpleName: getModTime", "DEL NumberLiteral: 1", "DEL Javadoc", "DEL MethodDeclaration", "DEL PrimitiveType: void", "DEL SimpleName: toString", "DEL Modifier: final", "DEL SimpleName: osName", "DEL NumberLiteral: 1", "DEL SimpleName: mode", "DEL MethodInvocation", "DEL TextElement: The C structure for a Tar Entry's header is: <pre>", "DEL SimpleType: Date", "DEL CharacterLiteral: '/'", "DEL QualifiedName: TarConstants.CHKSUMLEN", "DEL SimpleName: String", "DEL SimpleName: header", "DEL SimpleName: offset", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: file", "DEL QualifiedName: TarConstants.SIZELEN", "DEL Modifier: private", "DEL SimpleType: String", "DEL SimpleType: StringBuffer", "DEL Javadoc", "DEL SimpleName: setSize", "DEL FieldDeclaration", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL SimpleName: file", "DEL TextElement: The entry's magic tag.", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL ThisExpression", "DEL FieldAccess", "DEL TagElement", "DEL Assignment: =", "DEL SimpleName: getProperty", "DEL Assignment: =", "DEL SimpleName: TarEntry", "DEL SimpleName: devMinor", "DEL TextElement:  true if this is a long name extension provided by GNU tar", "DEL Block", "DEL TagElement", "DEL SimpleName: desc", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL TagElement: @param", "DEL SimpleName: hashCode", "DEL NumberLiteral: 0100644", "DEL TextElement: Set this entry's modification time. The parameter passed to this method", "DEL Assignment: =", "DEL NumberLiteral: 0", "DEL FieldDeclaration", "DEL SimpleName: size", "DEL SimpleName: name", "DEL Modifier: private", "DEL Assignment: =", "DEL SimpleName: parseName", "DEL Javadoc", "DEL ExpressionStatement", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL ParenthesizedExpression", "DEL SimpleName: TarUtils", "DEL TextElement: Get this entry's mode.", "DEL SimpleName: getOctalBytes", "DEL QualifiedName: TarConstants.DEVLEN", "DEL SimpleName: TarUtils", "DEL SimpleName: getName", "DEL FieldAccess", "DEL SimpleName: mode", "DEL PrimitiveType: boolean", "DEL ParenthesizedExpression", "DEL PrefixExpression: ++", "DEL InfixExpression: +", "DEL InfixExpression: !=", "DEL SimpleName: getTime", "DEL Assignment: =", "DEL SimpleName: parseName", "DEL SimpleName: getSize", "DEL TextElement:  This entry's new name.", "DEL SimpleName: header", "DEL VariableDeclarationStatement", "DEL SimpleName: linkFlag", "DEL SimpleName: buffer", "DEL FieldAccess", "DEL TextElement: File to null, since they reference an archive entry not a file. <p>", "DEL TextElement: The entry's user name.", "DEL SimpleName: append", "DEL TagElement: @return", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: isDir", "DEL SimpleName: TarUtils", "DEL Assignment: =", "DEL ClassInstanceCreation", "DEL SimpleName: i", "DEL Javadoc", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL TextElement: char name[NAMSIZ];", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL Modifier: private", "DEL SimpleName: userName", "DEL IfStatement", "DEL SimpleName: setUserName", "DEL Assignment: =", "DEL PrimitiveType: void", "DEL SimpleName: offset", "DEL SimpleName: StringBuffer", "DEL TextElement: three ways, depending on how they are to be used. <p>", "DEL Assignment: +=", "DEL SimpleName: offset", "DEL ClassInstanceCreation", "DEL PrimitiveType: long", "DEL ExpressionStatement", "DEL IfStatement", "DEL NumberLiteral: 0100644", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL Block", "DEL SimpleName: offset", "DEL SimpleName: isDirectory", "DEL TextElement: The entry's group name.", "DEL SimpleName: startsWith", "DEL Javadoc", "DEL SimpleName: TarEntry", "DEL SimpleType: StringBuffer", "DEL ExpressionStatement", "DEL SimpleName: header", "DEL QualifiedName: TarConstants.MODTIMELEN", "DEL SimpleName: StringBuffer", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleType: String", "DEL Block", "DEL Javadoc", "DEL Javadoc", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL PrefixExpression: !", "DEL Javadoc", "DEL SimpleName: toLowerCase", "DEL TagElement: @param", "DEL SimpleName: groupID", "DEL PrimitiveType: boolean", "DEL IfStatement", "DEL Assignment: =", "DEL SimpleName: user", "DEL Modifier: final", "DEL SimpleName: offset", "DEL SimpleName: ch1", "DEL TextElement: The entry's group id.", "DEL TagElement", "DEL SimpleName: offset", "DEL MethodDeclaration", "DEL PrefixExpression: -", "DEL Block", "DEL SimpleName: TarUtils", "DEL VariableDeclarationFragment", "DEL SimpleName: name", "DEL MethodInvocation", "DEL SimpleName: buffer", "DEL TagElement", "DEL TagElement", "DEL SimpleName: mode", "DEL Assignment: =", "DEL QualifiedName: TarConstants.CHKSUMLEN", "DEL TagElement", "DEL ArrayType: byte[]", "DEL TagElement", "DEL TagElement: @param", "DEL QualifiedName: TarConstants.LF_GNUTYPE_LONGNAME", "DEL Assignment: =", "DEL QualifiedName: TarConstants.SIZELEN", "DEL PrimitiveType: int", "DEL QualifiedName: TarConstants.CHKSUMLEN", "DEL ConditionalExpression", "DEL Block", "DEL SimpleName: getName", "DEL SimpleName: result", "DEL StringLiteral: \"netware\"", "DEL Assignment: =", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SimpleName: i", "DEL SimpleName: time", "DEL SimpleName: offset", "DEL SimpleName: header", "DEL TagElement", "DEL TextElement:  This entry's new group id.", "DEL SimpleName: File", "DEL ReturnStatement", "DEL QualifiedName: TarConstants.GNAMELEN", "DEL TextElement: char linkname[NAMSIZ];", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleType: StringBuffer", "DEL Assignment: =", "DEL TextElement:  This entry's user name.", "DEL IfStatement", "DEL SimpleName: colon", "DEL MethodDeclaration", "DEL Assignment: =", "DEL SimpleName: StringBuffer", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SimpleName: header", "DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleName: NAMELEN", "DEL SimpleName: offset", "DEL ThisExpression", "DEL Assignment: =", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL SimpleName: offset", "DEL SimpleName: user", "DEL Block", "DEL TagElement", "DEL ThisExpression", "DEL SimpleName: linkFlag", "DEL SimpleName: StringBuffer", "DEL ConstructorInvocation", "DEL Assignment: =", "DEL Assignment: =", "DEL QualifiedName: TarConstants.UIDLEN", "DEL TextElement: Get this entry's file.", "DEL SimpleName: user", "DEL SimpleName: size", "DEL SimpleName: i", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: name", "DEL SimpleName: buffer", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL MethodInvocation", "DEL QualifiedName: TarConstants.SIZELEN", "DEL TextElement:  This entry's new user id.", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleType: StringBuffer", "DEL MethodInvocation", "DEL SimpleName: TarUtils", "DEL TextElement:  This entry's group id.", "DEL Javadoc", "DEL ThisExpression", "DEL Javadoc", "DEL PrimitiveType: void", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleName: length", "DEL SimpleName: offset", "DEL SimpleName: substring", "DEL QualifiedName: TarConstants.MAGICLEN", "DEL SimpleName: name", "DEL TagElement", "DEL ClassInstanceCreation", "DEL SimpleName: mode", "DEL SimpleName: offset", "DEL ReturnStatement", "DEL SimpleName: ch1", "DEL Block", "DEL MethodInvocation", "DEL Modifier: public", "DEL MethodInvocation", "DEL ArrayType: byte[]", "DEL VariableDeclarationFragment", "DEL SimpleName: endsWith", "DEL TagElement", "DEL SimpleName: size", "DEL ThisExpression", "DEL SimpleName: osName", "DEL Assignment: =", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL Javadoc", "DEL SimpleName: getNameBytes", "DEL PrimitiveType: int", "DEL TextElement: } header;", "DEL NumberLiteral: 0", "DEL SimpleName: name", "DEL SingleVariableDeclaration", "DEL SimpleName: file", "DEL SimpleName: buffer", "DEL MethodInvocation", "DEL Modifier: public", "DEL VariableDeclarationStatement", "DEL SimpleName: name", "DEL SimpleName: replace", "DEL SimpleName: offset", "DEL SimpleName: offset", "DEL Block", "DEL SimpleName: name", "DEL SimpleName: file", "DEL MethodDeclaration", "DEL SimpleName: StringBuffer", "DEL ReturnStatement", "DEL Modifier: final", "DEL SimpleName: size", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0", "DEL SimpleName: user", "DEL FieldDeclaration", "DEL TextElement:  The tar entry header buffer to get information from.", "DEL Block", "DEL MethodInvocation", "DEL SimpleType: String", "DEL PrimitiveType: int", "DEL SimpleName: offset", "DEL Block", "DEL TextElement: Set this entry's user id.", "DEL InfixExpression: ==", "DEL PrimitiveType: int", "DEL SimpleName: TarEntry", "DEL SimpleName: offset", "DEL Dimension", "DEL TextElement: Set this entry's group name.", "DEL TextElement: char gid[8];", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: getOctalBytes", "DEL MethodInvocation", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL FieldDeclaration", "DEL TextElement: Construct an entry from an archive's header bytes. File is set to null.", "DEL SimpleName: linkName", "DEL ConstructorInvocation", "DEL TextElement: is in \"Java time\".", "DEL SimpleName: offset", "DEL VariableDeclarationFragment", "DEL SimpleName: userId", "DEL Dimension", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL MethodInvocation", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL SimpleName: StringBuffer", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleType: StringBuffer", "DEL SimpleName: getNameBytes", "DEL Javadoc", "DEL TagElement", "DEL TextElement: Get this entry's user id.", "DEL QualifiedName: TarConstants.UIDLEN", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL SimpleName: userName", "DEL TextElement: is determined by the name of the descendant starting with this entry's", "DEL MethodInvocation", "DEL FieldAccess", "DEL SimpleName: i", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleType: String", "DEL StringLiteral: \"\"", "DEL NumberLiteral: 0", "DEL SimpleName: TarUtils", "DEL TextElement: </pre>", "DEL Assignment: +=", "DEL SimpleName: charAt", "DEL SimpleName: groupName", "DEL SimpleName: entry", "DEL Assignment: =", "DEL PrimitiveType: int", "DEL TextElement:  This entry's checksum.", "DEL SimpleName: offset", "DEL SimpleName: TarInputStream", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL TextElement: The entry's link name.", "DEL Modifier: public", "DEL InfixExpression: <", "DEL SimpleName: File", "DEL TextElement: Get this entry's group name.", "DEL SimpleName: equals", "DEL SimpleName: parseOctal", "DEL SimpleType: Date", "DEL TagElement: @param", "DEL InfixExpression: /", "DEL SimpleType: TarEntry", "DEL TagElement", "DEL SimpleName: TarUtils", "DEL Block", "DEL SimpleName: name", "DEL TextElement: construct the entry's header \"by hand\". File is set to null.", "DEL SimpleName: file", "DEL SimpleName: size", "DEL QualifiedName: TarConstants.MODELEN", "DEL SimpleName: name", "DEL TagElement", "DEL Javadoc", "DEL Block", "DEL SimpleName: userName", "DEL QualifiedName: list.length", "DEL ExpressionStatement", "DEL PrefixExpression: -", "DEL SimpleName: getName", "DEL PrimitiveType: long", "DEL SimpleName: user", "DEL VariableDeclarationFragment", "DEL SimpleName: NAMELEN", "DEL ExpressionStatement", "DEL SimpleName: name", "DEL SimpleName: header", "DEL Javadoc", "DEL InfixExpression: *", "DEL SimpleName: offset", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL StringLiteral: \"netware\"", "DEL Javadoc", "DEL SimpleName: getLongOctalBytes", "DEL Modifier: final", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: getNameBytes", "DEL SingleVariableDeclaration", "DEL TextElement: Set this entry's modification time.", "DEL SimpleName: groupID", "DEL TextElement: <p/>", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: isDirectory", "DEL MethodDeclaration", "DEL TextElement: char magic[8];", "DEL MethodInvocation", "DEL TextElement: the programmer to construct the entry by hand, for instance when only an", "DEL Modifier: final", "DEL QualifiedName: TarConstants.GNU_LONGLINK", "DEL SimpleType: File", "DEL StringLiteral: \"/\"", "DEL TextElement: Construct an entry for a file. File is set to file, and the header is", "DEL SimpleType: File", "DEL MethodInvocation", "DEL SimpleName: substring", "DEL TextElement: Write an entry's header information to a header buffer.", "DEL MethodInvocation", "DEL Assignment: =", "DEL Modifier: final", "DEL MethodInvocation", "DEL Assignment: =", "DEL ExpressionStatement", "DEL Javadoc", "DEL Block", "DEL TextElement: The entry's name.", "DEL SimpleName: linkFlag", "DEL SimpleName: i", "DEL FieldAccess", "DEL MethodInvocation", "DEL Assignment: =", "DEL ExpressionStatement", "DEL TextElement: char devmajor[8];", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL Block", "DEL ReturnStatement", "DEL InfixExpression: -", "DEL SimpleName: header", "DEL SimpleName: offset", "DEL SimpleName: getGroupID", "DEL SimpleName: setModTime", "DEL PrimitiveType: int", "DEL SimpleName: linkName", "DEL ClassInstanceCreation", "DEL SimpleName: offset", "DEL TextElement:  This entry's new file size.", "DEL Modifier: private", "DEL VariableDeclarationExpression", "DEL TextElement: TarEntries that are created from Files that are to be written into an archive", "DEL TypeDeclaration: class", "DEL SimpleName: groupID", "DEL MarkerAnnotation", "DEL Assignment: =", "DEL SimpleName: buffer", "DEL SimpleName: buffer", "DEL TextElement: fields are set to defaults and the File is set to null. <p>", "DEL Modifier: private", "DEL SimpleName: userId", "DEL SimpleName: userName", "DEL TextElement: <p/>", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: groupId", "DEL SimpleType: StringBuffer", "DEL MethodInvocation", "DEL Modifier: public", "DEL Javadoc", "DEL SimpleName: TarEntry", "DEL Block", "DEL MethodInvocation", "DEL Assignment: +=", "DEL Modifier: final", "DEL Block", "DEL SimpleName: TarUtils", "DEL Block", "DEL SimpleName: devMajor", "DEL WhileStatement", "DEL QualifiedName: TarConstants.LF_DIR", "DEL TextElement: header, as well as the entry's File. Entries can be instantiated in one of", "DEL Block", "DEL Assignment: =", "DEL SimpleName: StringBuffer", "DEL SimpleType: String", "DEL SimpleName: userName", "DEL ParenthesizedExpression", "DEL SimpleName: name", "DEL SimpleName: osName", "DEL ArrayAccess", "DEL SimpleName: modTime", "DEL Modifier: private", "DEL SimpleName: linkFlag", "DEL SimpleName: size", "DEL Modifier: public", "DEL CharacterLiteral: 'Z'", "DEL SimpleName: linkName", "DEL Block", "DEL TextElement: The entry's checksum.", "DEL QualifiedName: TarConstants.MAGICLEN", "DEL Javadoc", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: file", "DEL TagElement", "DEL StringLiteral: \"\"", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleName: parseOctal", "DEL SimpleName: buffer", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: name", "DEL Javadoc", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL SimpleName: other", "DEL ThisExpression", "DEL SimpleName: i", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL SimpleName: devMinor", "DEL CastExpression", "DEL ExpressionStatement", "DEL Modifier: private", "DEL SimpleName: header", "DEL SimpleName: TarUtils", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL PrimitiveType: long", "DEL StringLiteral: \"user.name\"", "DEL TagElement: @return", "DEL SimpleName: setGroupName", "DEL Modifier: public", "DEL FieldAccess", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: checkSum", "DEL SimpleName: checkSum", "DEL MethodInvocation", "DEL TagElement: @return", "DEL SimpleName: offset", "DEL ParenthesizedExpression", "DEL StringLiteral: \"\"", "DEL TextElement: This class represents an entry in a Tar archive. It consists of the entry's", "DEL PrimitiveType: int", "DEL CastExpression", "DEL Assignment: +=", "DEL QualifiedName: TarConstants.GNAMELEN", "DEL Assignment: =", "DEL TextElement: reference to the File for convenience when writing entries. <p>", "DEL MethodDeclaration", "DEL Block", "DEL Assignment: =", "DEL SimpleName: parseOctal", "DEL TextElement: instantiated with the TarEntry( byte[] ) constructor. These entries will be", "DEL SimpleName: offset", "DEL PostfixExpression: ++", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: TarEntry", "DEL Modifier: private", "DEL MethodInvocation", "DEL SimpleName: TarUtils", "DEL Block", "DEL SimpleName: offset", "DEL PrimitiveType: int", "DEL TagElement", "DEL ClassInstanceCreation", "DEL TagElement", "DEL SimpleName: setUserID", "DEL ExpressionStatement", "DEL SimpleName: devMajor", "DEL SimpleName: header", "DEL SimpleName: equals", "DEL SimpleName: getOctalBytes", "DEL QualifiedName: TarConstants.GIDLEN", "DEL Javadoc", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: Date", "DEL SimpleName: devMinor", "DEL SimpleName: TarUtils", "DEL FieldAccess", "DEL VariableDeclarationFragment", "DEL SimpleName: modTime", "DEL TextElement: char linkflag;", "DEL SimpleName: mode", "DEL SimpleName: StringBuffer", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: userID", "DEL QualifiedName: TarConstants.LF_NORMAL", "DEL TagElement: @param", "DEL TagElement", "DEL ThisExpression", "DEL SimpleName: checkSum", "DEL ClassInstanceCreation", "DEL SimpleName: TarUtils", "DEL SimpleName: NAMELEN", "DEL SimpleName: getTime", "DEL SimpleType: StringBuffer", "DEL SimpleName: parseTarHeader", "DEL Javadoc", "DEL Block", "DEL Modifier: public", "DEL SimpleName: StringBuffer", "DEL SimpleName: offset", "DEL TextElement:  This entry's new modification time.", "DEL SimpleName: offset", "DEL TextElement: <p/>", "DEL Block", "DEL Dimension", "DEL SimpleName: userName", "DEL ConditionalExpression", "DEL Javadoc", "DEL FieldAccess", "DEL SimpleName: endsWith", "DEL TextElement:  This entry's name.", "DEL SimpleName: offset", "DEL InstanceofExpression", "DEL TextElement: The entry's user id.", "DEL MethodInvocation", "DEL TagElement", "DEL InfixExpression: !=", "DEL PrimitiveType: int", "DEL NumberLiteral: 1000", "DEL CastExpression", "DEL StringLiteral: \"/\"", "DEL SimpleType: Date", "DEL SimpleType: StringBuffer", "DEL Assignment: =", "DEL SimpleName: modTime", "DEL TextElement: The entry's link flag.", "DEL FieldDeclaration", "DEL FieldDeclaration", "DEL ReturnStatement", "DEL Assignment: +=", "DEL PrimitiveType: char", "DEL QualifiedName: TarConstants.MAGICLEN", "DEL SimpleName: setMode", "DEL Modifier: final", "DEL SimpleName: userID", "DEL SimpleName: TarUtils", "DEL ReturnStatement", "DEL Dimension", "DEL Modifier: final", "DEL Dimension", "DEL TagElement: @return", "DEL SimpleName: name", "DEL SimpleName: checkSum"]}]}}, {"TarEntry_diff": {"operations": ["Delete QualifiedName: org.apache.commons.vfs2.provider.tar(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.io.File(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Date(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Locale(6)", "Delete ImportDeclaration(7)", "Delete TextElement: This class represents an entry in a Tar archive. It consists of the entry's(8)", "Delete TextElement: header, as well as the entry's File. Entries can be instantiated in one of(9)", "Delete TextElement: three ways, depending on how they are to be used. <p>(10)", "Delete TextElement: <p/>(11)", "Delete TextElement: TarEntries that are created from the header bytes read from an archive are(12)", "Delete TextElement: instantiated with the TarEntry( byte[] ) constructor. These entries will be(13)", "Delete TextElement: used when extracting from or listing the contents of an archive. These(14)", "Delete TextElement: entries have their header filled in using the header bytes. They also set the(15)", "Delete TextElement: File to null, since they reference an archive entry not a file. <p>(16)", "Delete TextElement: <p/>(17)", "Delete TextElement: TarEntries that are created from Files that are to be written into an archive(18)", "Delete TextElement: are instantiated with the TarEntry( File ) constructor. These entries have(19)", "Delete TextElement: their header filled in using the File's information. They also keep a(20)", "Delete TextElement: reference to the File for convenience when writing entries. <p>(21)", "Delete TextElement: <p/>(22)", "Delete TextElement: Finally, TarEntries can be constructed from nothing but a name. This allows(23)", "Delete TextElement: the programmer to construct the entry by hand, for instance when only an(24)", "Delete TextElement: InputStream is available for writing to the archive, and the header(25)", "Delete TextElement: information is constructed from other information. In this case the header(26)", "Delete TextElement: fields are set to defaults and the File is set to null. <p>(27)", "Delete TextElement: <p/>(28)", "Delete TextElement: The C structure for a Tar Entry's header is: <pre>(29)", "Delete TextElement: struct header {(30)", "Delete TextElement: char name[NAMSIZ];(31)", "Delete TextElement: char mode[8];(32)", "Delete TextElement: char uid[8];(33)", "Delete TextElement: char gid[8];(34)", "Delete TextElement: char size[12];(35)", "Delete TextElement: char mtime[12];(36)", "Delete TextElement: char chksum[8];(37)", "Delete TextElement: char linkflag;(38)", "Delete TextElement: char linkname[NAMSIZ];(39)", "Delete TextElement: char magic[8];(40)", "Delete TextElement: char uname[TUNMLEN];(41)", "Delete TextElement: char gname[TGNMLEN];(42)", "Delete TextElement: char devmajor[8];(43)", "Delete TextElement: char devminor[8];(44)", "Delete TextElement: } header;(45)", "Delete TextElement: </pre>(46)", "Delete TagElement(47)", "Delete TextElement:  <a href=\"http://commons.apache.org/vfs/team-list.html\">Commons VFS team</a>(48)", "Delete TagElement: @author(49)", "Delete SimpleName: TarInputStream(50)", "Delete TagElement: @see(51)", "Delete Javadoc(52)", "Delete SimpleName: TarEntry(53)", "Delete TextElement: The length of the name field in a header buffer.(54)", "Delete TagElement(55)", "Delete Javadoc(56)", "Delete Modifier: public(57)", "Delete Modifier: static(58)", "Delete Modifier: final(59)", "Delete PrimitiveType: int(60)", "Delete SimpleName: NAMELEN(61)", "Delete NumberLiteral: 100(62)", "Delete VariableDeclarationFragment(63)", "Delete FieldDeclaration(64)", "Delete TextElement: The entry's modification time.(65)", "Delete TagElement(66)", "Delete Javadoc(67)", "Delete Modifier: private(68)", "Delete PrimitiveType: int(69)", "Delete SimpleName: checkSum(70)", "Delete VariableDeclarationFragment(71)", "Delete FieldDeclaration(72)", "Delete TextElement: The entry's group name.(73)", "Delete TagElement(74)", "Delete Javadoc(75)", "Delete Modifier: private(76)", "Delete PrimitiveType: int(77)", "Delete SimpleName: devMajor(78)", "Delete VariableDeclarationFragment(79)", "Delete FieldDeclaration(80)", "Delete TextElement: The entry's major device number.(81)", "Delete TagElement(82)", "Delete Javadoc(83)", "Delete Modifier: private(84)", "Delete PrimitiveType: int(85)", "Delete SimpleName: devMinor(86)", "Delete VariableDeclarationFragment(87)", "Delete FieldDeclaration(88)", "Delete TextElement: The entry's minor device number.(89)", "Delete TagElement(90)", "Delete Javadoc(91)", "Delete Modifier: private(92)", "Delete SimpleName: File(93)", "Delete SimpleType: File(94)", "Delete SimpleName: file(95)", "Delete VariableDeclarationFragment(96)", "Delete FieldDeclaration(97)", "Delete TextElement: The entry's user id.(98)", "Delete TagElement(99)", "Delete Javadoc(100)", "Delete Modifier: private(101)", "Delete PrimitiveType: int(102)", "Delete SimpleName: groupID(103)", "Delete VariableDeclarationFragment(104)", "Delete FieldDeclaration(105)", "Delete TextElement: The entry's user name.(106)", "Delete TagElement(107)", "Delete Javadoc(108)", "Delete Modifier: private(109)", "Delete SimpleName: StringBuffer(110)", "Delete SimpleType: StringBuffer(111)", "Delete SimpleName: groupName(112)", "Delete VariableDeclarationFragment(113)", "Delete FieldDeclaration(114)", "Delete TextElement: The entry's checksum.(115)", "Delete TagElement(116)", "Delete Javadoc(117)", "Delete Modifier: private(118)", "Delete PrimitiveType: byte(119)", "Delete SimpleName: linkFlag(120)", "Delete VariableDeclarationFragment(121)", "Delete FieldDeclaration(122)", "Delete TextElement: The entry's link flag.(123)", "Delete TagElement(124)", "Delete Javadoc(125)", "Delete Modifier: private(126)", "Delete SimpleName: StringBuffer(127)", "Delete SimpleType: StringBuffer(128)", "Delete SimpleName: linkName(129)", "Delete VariableDeclarationFragment(130)", "Delete FieldDeclaration(131)", "Delete TextElement: The entry's link name.(132)", "Delete TagElement(133)", "Delete Javadoc(134)", "Delete Modifier: private(135)", "Delete SimpleName: StringBuffer(136)", "Delete SimpleType: StringBuffer(137)", "Delete SimpleName: magic(138)", "Delete VariableDeclarationFragment(139)", "Delete FieldDeclaration(140)", "Delete TextElement: The entry's size.(141)", "Delete TagElement(142)", "Delete Javadoc(143)", "Delete Modifier: private(144)", "Delete PrimitiveType: long(145)", "Delete SimpleName: modTime(146)", "Delete VariableDeclarationFragment(147)", "Delete FieldDeclaration(148)", "Delete TextElement: The entry's name.(149)", "Delete TagElement(150)", "Delete Javadoc(151)", "Delete Modifier: private(152)", "Delete PrimitiveType: int(153)", "Delete SimpleName: mode(154)", "Delete VariableDeclarationFragment(155)", "Delete FieldDeclaration(156)", "Delete Modifier: private(157)", "Delete SimpleName: StringBuffer(158)", "Delete SimpleType: StringBuffer(159)", "Delete SimpleName: name(160)", "Delete VariableDeclarationFragment(161)", "Delete FieldDeclaration(162)", "Delete TextElement: The entry's group id.(163)", "Delete TagElement(164)", "Delete Javadoc(165)", "Delete Modifier: private(166)", "Delete PrimitiveType: long(167)", "Delete SimpleName: size(168)", "Delete VariableDeclarationFragment(169)", "Delete FieldDeclaration(170)", "Delete TextElement: The entry's permission mode.(171)", "Delete TagElement(172)", "Delete Javadoc(173)", "Delete Modifier: private(174)", "Delete PrimitiveType: int(175)", "Delete SimpleName: userID(176)", "Delete VariableDeclarationFragment(177)", "Delete FieldDeclaration(178)", "Delete TextElement: The entry's magic tag.(179)", "Delete TagElement(180)", "Delete Javadoc(181)", "Delete Modifier: private(182)", "Delete SimpleName: StringBuffer(183)", "Delete SimpleType: StringBuffer(184)", "Delete SimpleName: userName(185)", "Delete VariableDeclarationFragment(186)", "Delete FieldDeclaration(187)", "Delete TextElement: Construct an entry with only a name. This allows the programmer to(188)", "Delete TextElement: construct the entry's header \"by hand\". File is set to null.(189)", "Delete TagElement(190)", "Delete SimpleName: name(191)", "Delete TextElement:  the name of the entry(192)", "Delete TagElement: @param(193)", "Delete Javadoc(194)", "Delete SimpleName: TarEntry(195)", "Delete Modifier: final(196)", "Delete SimpleName: String(197)", "Delete SimpleType: String(198)", "Delete SimpleName: name(199)", "Delete SingleVariableDeclaration(200)", "Delete ConstructorInvocation(201)", "Delete Modifier: final(202)", "Delete PrimitiveType: boolean(203)", "Delete SimpleName: isDir(204)", "Delete SimpleName: name(205)", "Delete SimpleName: endsWith(206)", "Delete StringLiteral: \"/\"(207)", "Delete MethodInvocation(208)", "Delete VariableDeclarationFragment(209)", "Delete VariableDeclarationStatement(210)", "Delete ThisExpression(211)", "Delete SimpleName: name(212)", "Delete FieldAccess(213)", "Delete SimpleName: StringBuffer(214)", "Delete SimpleType: StringBuffer(215)", "Delete SimpleName: name(216)", "Delete ClassInstanceCreation(217)", "Delete Assignment: =(218)", "Delete ExpressionStatement(219)", "Delete SimpleName: mode(220)", "Delete SimpleName: isDir(221)", "Delete NumberLiteral: 040755(222)", "Delete NumberLiteral: 0100644(223)", "Delete ConditionalExpression(224)", "Delete Assignment: =(225)", "Delete ExpressionStatement(226)", "Delete SimpleName: linkFlag(227)", "Delete SimpleName: isDir(228)", "Delete QualifiedName: TarConstants.LF_DIR(229)", "Delete QualifiedName: TarConstants.LF_NORMAL(230)", "Delete ConditionalExpression(231)", "Delete Assignment: =(232)", "Delete ExpressionStatement(233)", "Delete SimpleName: modTime(234)", "Delete SimpleName: Date(235)", "Delete SimpleType: Date(236)", "Delete ClassInstanceCreation(237)", "Delete ParenthesizedExpression(238)", "Delete SimpleName: getTime(239)", "Delete MethodInvocation(240)", "Delete NumberLiteral: 1000(241)", "Delete InfixExpression: /(242)", "Delete Assignment: =(243)", "Delete ExpressionStatement(244)", "Delete SimpleName: linkName(245)", "Delete SimpleName: StringBuffer(246)", "Delete SimpleType: StringBuffer(247)", "Delete StringLiteral: \"\"(248)", "Delete ClassInstanceCreation(249)", "Delete Assignment: =(250)", "Delete ExpressionStatement(251)", "Delete SimpleName: userName(252)", "Delete SimpleName: StringBuffer(253)", "Delete SimpleType: StringBuffer(254)", "Delete StringLiteral: \"\"(255)", "Delete ClassInstanceCreation(256)", "Delete Assignment: =(257)", "Delete ExpressionStatement(258)", "Delete SimpleName: groupName(259)", "Delete SimpleName: StringBuffer(260)", "Delete SimpleType: StringBuffer(261)", "Delete StringLiteral: \"\"(262)", "Delete ClassInstanceCreation(263)", "Delete Assignment: =(264)", "Delete ExpressionStatement(265)", "Delete Block(266)", "Delete MethodDeclaration(267)", "Delete TextElement: Construct an entry with a name an a link flag.(268)", "Delete TagElement(269)", "Delete SimpleName: name(270)", "Delete TextElement:      Description of Parameter(271)", "Delete TagElement: @param(272)", "Delete SimpleName: linkFlag(273)", "Delete TextElement:  Description of Parameter(274)", "Delete TagElement: @param(275)", "Delete Javadoc(276)", "Delete SimpleName: TarEntry(277)", "Delete Modifier: final(278)", "Delete SimpleName: String(279)", "Delete SimpleType: String(280)", "Delete SimpleName: name(281)", "Delete SingleVariableDeclaration(282)", "Delete Modifier: final(283)", "Delete PrimitiveType: byte(284)", "Delete SimpleName: linkFlag(285)", "Delete SingleVariableDeclaration(286)", "Delete SimpleName: name(287)", "Delete ConstructorInvocation(288)", "Delete ThisExpression(289)", "Delete SimpleName: linkFlag(290)", "Delete FieldAccess(291)", "Delete SimpleName: linkFlag(292)", "Delete Assignment: =(293)", "Delete ExpressionStatement(294)", "Delete Block(295)", "Delete MethodDeclaration(296)", "Delete TextElement: Construct an entry for a file. File is set to file, and the header is(297)", "Delete TextElement: constructed from information from the file.(298)", "Delete TagElement(299)", "Delete SimpleName: file(300)", "Delete TextElement:  The file that the entry represents.(301)", "Delete TagElement: @param(302)", "Delete Javadoc(303)", "Delete SimpleName: TarEntry(304)", "Delete Modifier: final(305)", "Delete SimpleName: File(306)", "Delete SimpleType: File(307)", "Delete SimpleName: file(308)", "Delete SingleVariableDeclaration(309)", "Delete ConstructorInvocation(310)", "Delete ThisExpression(311)", "Delete SimpleName: file(312)", "Delete FieldAccess(313)", "Delete SimpleName: file(314)", "Delete Assignment: =(315)", "Delete ExpressionStatement(316)", "Delete SimpleName: String(317)", "Delete SimpleType: String(318)", "Delete SimpleName: name(319)", "Delete SimpleName: file(320)", "Delete SimpleName: getPath(321)", "Delete MethodInvocation(322)", "Delete VariableDeclarationFragment(323)", "Delete VariableDeclarationStatement(324)", "Delete Modifier: final(325)", "Delete SimpleName: String(326)", "Delete SimpleType: String(327)", "Delete SimpleName: osName(328)", "Delete SimpleName: System(329)", "Delete SimpleName: getProperty(330)", "Delete StringLiteral: \"os.name\"(331)", "Delete MethodInvocation(332)", "Delete SimpleName: toLowerCase(333)", "Delete QualifiedName: Locale.US(334)", "Delete MethodInvocation(335)", "Delete VariableDeclarationFragment(336)", "Delete VariableDeclarationStatement(337)", "Delete NumberLiteral: 1(338)", "Delete PrefixExpression: -(339)", "Delete SimpleName: osName(340)", "Delete SimpleName: indexOf(341)", "Delete StringLiteral: \"netware\"(342)", "Delete MethodInvocation(343)", "Delete InfixExpression: !=(344)", "Delete SimpleName: name(345)", "Delete SimpleName: length(346)", "Delete MethodInvocation(347)", "Delete NumberLiteral: 2(348)", "Delete InfixExpression: >(349)", "Delete Modifier: final(350)", "Delete PrimitiveType: char(351)", "Delete SimpleName: ch1(352)", "Delete SimpleName: name(353)", "Delete SimpleName: charAt(354)", "Delete NumberLiteral: 0(355)", "Delete MethodInvocation(356)", "Delete VariableDeclarationFragment(357)", "Delete VariableDeclarationStatement(358)", "Delete Modifier: final(359)", "Delete PrimitiveType: char(360)", "Delete SimpleName: ch2(361)", "Delete SimpleName: name(362)", "Delete SimpleName: charAt(363)", "Delete NumberLiteral: 1(364)", "Delete MethodInvocation(365)", "Delete VariableDeclarationFragment(366)", "Delete VariableDeclarationStatement(367)", "Delete SimpleName: ch2(368)", "Delete CharacterLiteral: ':'(369)", "Delete InfixExpression: ==(370)", "Delete SimpleName: ch1(371)", "Delete CharacterLiteral: 'a'(372)", "Delete InfixExpression: >=(373)", "Delete SimpleName: ch1(374)", "Delete CharacterLiteral: 'z'(375)", "Delete InfixExpression: <=(376)", "Delete InfixExpression: &&(377)", "Delete ParenthesizedExpression(378)", "Delete SimpleName: ch1(379)", "Delete CharacterLiteral: 'A'(380)", "Delete InfixExpression: >=(381)", "Delete SimpleName: ch1(382)", "Delete CharacterLiteral: 'Z'(383)", "Delete InfixExpression: <=(384)", "Delete InfixExpression: &&(385)", "Delete ParenthesizedExpression(386)", "Delete InfixExpression: ||(387)", "Delete ParenthesizedExpression(388)", "Delete InfixExpression: &&(389)", "Delete SimpleName: name(390)", "Delete SimpleName: name(391)", "Delete SimpleName: substring(392)", "Delete NumberLiteral: 2(393)", "Delete MethodInvocation(394)", "Delete Assignment: =(395)", "Delete ExpressionStatement(396)", "Delete Block(397)", "Delete IfStatement(398)", "Delete Block(399)", "Delete IfStatement(400)", "Delete Block(401)", "Delete NumberLiteral: 1(402)", "Delete PrefixExpression: -(403)", "Delete SimpleName: osName(404)", "Delete SimpleName: indexOf(405)", "Delete StringLiteral: \"netware\"(406)", "Delete MethodInvocation(407)", "Delete InfixExpression: !=(408)", "Delete Modifier: final(409)", "Delete PrimitiveType: int(410)", "Delete SimpleName: colon(411)", "Delete SimpleName: name(412)", "Delete SimpleName: indexOf(413)", "Delete CharacterLiteral: ':'(414)", "Delete MethodInvocation(415)", "Delete VariableDeclarationFragment(416)", "Delete VariableDeclarationStatement(417)", "Delete SimpleName: colon(418)", "Delete NumberLiteral: 1(419)", "Delete PrefixExpression: -(420)", "Delete InfixExpression: !=(421)", "Delete SimpleName: name(422)", "Delete SimpleName: name(423)", "Delete SimpleName: substring(424)", "Delete SimpleName: colon(425)", "Delete NumberLiteral: 1(426)", "Delete InfixExpression: +(427)", "Delete MethodInvocation(428)", "Delete Assignment: =(429)", "Delete ExpressionStatement(430)", "Delete Block(431)", "Delete IfStatement(432)", "Delete Block(433)", "Delete IfStatement(434)", "Delete IfStatement(435)", "Delete SimpleName: name(436)", "Delete SimpleName: name(437)", "Delete SimpleName: replace(438)", "Delete QualifiedName: File.separatorChar(439)", "Delete CharacterLiteral: '/'(440)", "Delete MethodInvocation(441)", "Delete Assignment: =(442)", "Delete ExpressionStatement(443)", "Delete SimpleName: name(444)", "Delete SimpleName: startsWith(445)", "Delete StringLiteral: \"/\"(446)", "Delete MethodInvocation(447)", "Delete SimpleName: name(448)", "Delete SimpleName: name(449)", "Delete SimpleName: substring(450)", "Delete NumberLiteral: 1(451)", "Delete MethodInvocation(452)", "Delete Assignment: =(453)", "Delete ExpressionStatement(454)", "Delete Block(455)", "Delete WhileStatement(456)", "Delete SimpleName: linkName(457)", "Delete SimpleName: StringBuffer(458)", "Delete SimpleType: StringBuffer(459)", "Delete StringLiteral: \"\"(460)", "Delete ClassInstanceCreation(461)", "Delete Assignment: =(462)", "Delete ExpressionStatement(463)", "Delete ThisExpression(464)", "Delete SimpleName: name(465)", "Delete FieldAccess(466)", "Delete SimpleName: StringBuffer(467)", "Delete SimpleType: StringBuffer(468)", "Delete SimpleName: name(469)", "Delete ClassInstanceCreation(470)", "Delete Assignment: =(471)", "Delete ExpressionStatement(472)", "Delete SimpleName: file(473)", "Delete SimpleName: isDirectory(474)", "Delete MethodInvocation(475)", "Delete SimpleName: mode(476)", "Delete NumberLiteral: 040755(477)", "Delete Assignment: =(478)", "Delete ExpressionStatement(479)", "Delete SimpleName: linkFlag(480)", "Delete QualifiedName: TarConstants.LF_DIR(481)", "Delete Assignment: =(482)", "Delete ExpressionStatement(483)", "Delete ThisExpression(484)", "Delete SimpleName: name(485)", "Delete FieldAccess(486)", "Delete SimpleName: charAt(487)", "Delete ThisExpression(488)", "Delete SimpleName: name(489)", "Delete FieldAccess(490)", "Delete SimpleName: length(491)", "Delete MethodInvocation(492)", "Delete NumberLiteral: 1(493)", "Delete InfixExpression: -(494)", "Delete MethodInvocation(495)", "Delete CharacterLiteral: '/'(496)", "Delete InfixExpression: !=(497)", "Delete ThisExpression(498)", "Delete SimpleName: name(499)", "Delete FieldAccess(500)", "Delete SimpleName: append(501)", "Delete StringLiteral: \"/\"(502)", "Delete MethodInvocation(503)", "Delete ExpressionStatement(504)", "Delete Block(505)", "Delete IfStatement(506)", "Delete Block(507)", "Delete SimpleName: mode(508)", "Delete NumberLiteral: 0100644(509)", "Delete Assignment: =(510)", "Delete ExpressionStatement(511)", "Delete SimpleName: linkFlag(512)", "Delete QualifiedName: TarConstants.LF_NORMAL(513)", "Delete Assignment: =(514)", "Delete ExpressionStatement(515)", "Delete Block(516)", "Delete IfStatement(517)", "Delete SimpleName: size(518)", "Delete SimpleName: file(519)", "Delete SimpleName: length(520)", "Delete MethodInvocation(521)", "Delete Assignment: =(522)", "Delete ExpressionStatement(523)", "Delete SimpleName: modTime(524)", "Delete SimpleName: file(525)", "Delete SimpleName: lastModified(526)", "Delete MethodInvocation(527)", "Delete NumberLiteral: 1000(528)", "Delete InfixExpression: /(529)", "Delete Assignment: =(530)", "Delete ExpressionStatement(531)", "Delete SimpleName: checkSum(532)", "Delete NumberLiteral: 0(533)", "Delete Assignment: =(534)", "Delete ExpressionStatement(535)", "Delete SimpleName: devMajor(536)", "Delete NumberLiteral: 0(537)", "Delete Assignment: =(538)", "Delete ExpressionStatement(539)", "Delete SimpleName: devMinor(540)", "Delete NumberLiteral: 0(541)", "Delete Assignment: =(542)", "Delete ExpressionStatement(543)", "Delete Block(544)", "Delete MethodDeclaration(545)", "Delete TextElement: Construct an entry from an archive's header bytes. File is set to null.(546)", "Delete TagElement(547)", "Delete SimpleName: header(548)", "Delete TextElement:  The header bytes from a tar archive entry.(549)", "Delete TagElement: @param(550)", "Delete Javadoc(551)", "Delete SimpleName: TarEntry(552)", "Delete Modifier: final(553)", "Delete PrimitiveType: byte(554)", "Delete Dimension(555)", "Delete ArrayType: byte[](556)", "Delete SimpleName: header(557)", "Delete SingleVariableDeclaration(558)", "Delete ConstructorInvocation(559)", "Delete SimpleName: parseTarHeader(560)", "Delete SimpleName: header(561)", "Delete MethodInvocation(562)", "Delete ExpressionStatement(563)", "Delete Block(564)", "Delete MethodDeclaration(565)", "Delete TextElement: Construct an empty entry and prepares the header values.(566)", "Delete TagElement(567)", "Delete Javadoc(568)", "Delete Modifier: private(569)", "Delete SimpleName: TarEntry(570)", "Delete SimpleName: magic(571)", "Delete SimpleName: StringBuffer(572)", "Delete SimpleType: StringBuffer(573)", "Delete QualifiedName: TarConstants.TMAGIC(574)", "Delete ClassInstanceCreation(575)", "Delete Assignment: =(576)", "Delete ExpressionStatement(577)", "Delete SimpleName: name(578)", "Delete SimpleName: StringBuffer(579)", "Delete SimpleType: StringBuffer(580)", "Delete ClassInstanceCreation(581)", "Delete Assignment: =(582)", "Delete ExpressionStatement(583)", "Delete SimpleName: linkName(584)", "Delete SimpleName: StringBuffer(585)", "Delete SimpleType: StringBuffer(586)", "Delete ClassInstanceCreation(587)", "Delete Assignment: =(588)", "Delete ExpressionStatement(589)", "Delete SimpleName: String(590)", "Delete SimpleType: String(591)", "Delete SimpleName: user(592)", "Delete SimpleName: System(593)", "Delete SimpleName: getProperty(594)", "Delete StringLiteral: \"user.name\"(595)", "Delete StringLiteral: \"\"(596)", "Delete MethodInvocation(597)", "Delete VariableDeclarationFragment(598)", "Delete VariableDeclarationStatement(599)", "Delete SimpleName: user(600)", "Delete SimpleName: length(601)", "Delete MethodInvocation(602)", "Delete NumberLiteral: 31(603)", "Delete InfixExpression: >(604)", "Delete SimpleName: user(605)", "Delete SimpleName: user(606)", "Delete SimpleName: substring(607)", "Delete NumberLiteral: 0(608)", "Delete NumberLiteral: 31(609)", "Delete MethodInvocation(610)", "Delete Assignment: =(611)", "Delete ExpressionStatement(612)", "Delete Block(613)", "Delete IfStatement(614)", "Delete SimpleName: userName(615)", "Delete SimpleName: StringBuffer(616)", "Delete SimpleType: StringBuffer(617)", "Delete SimpleName: user(618)", "Delete ClassInstanceCreation(619)", "Delete Assignment: =(620)", "Delete ExpressionStatement(621)", "Delete SimpleName: groupName(622)", "Delete SimpleName: StringBuffer(623)", "Delete SimpleType: StringBuffer(624)", "Delete StringLiteral: \"\"(625)", "Delete ClassInstanceCreation(626)", "Delete Assignment: =(627)", "Delete ExpressionStatement(628)", "Delete Block(629)", "Delete MethodDeclaration(630)", "Delete TextElement: Set this entry's group id.(631)", "Delete TagElement(632)", "Delete SimpleName: groupId(633)", "Delete TextElement:  This entry's new group id.(634)", "Delete TagElement: @param(635)", "Delete Javadoc(636)", "Delete Modifier: public(637)", "Delete PrimitiveType: void(638)", "Delete SimpleName: setGroupID(639)", "Delete Modifier: final(640)", "Delete PrimitiveType: int(641)", "Delete SimpleName: groupId(642)", "Delete SingleVariableDeclaration(643)", "Delete SimpleName: groupID(644)", "Delete SimpleName: groupId(645)", "Delete Assignment: =(646)", "Delete ExpressionStatement(647)", "Delete Block(648)", "Delete MethodDeclaration(649)", "Delete TextElement: Set this entry's group name.(650)", "Delete TagElement(651)", "Delete SimpleName: groupName(652)", "Delete TextElement:  This entry's new group name.(653)", "Delete TagElement: @param(654)", "Delete Javadoc(655)", "Delete Modifier: public(656)", "Delete PrimitiveType: void(657)", "Delete SimpleName: setGroupName(658)", "Delete Modifier: final(659)", "Delete SimpleName: String(660)", "Delete SimpleType: String(661)", "Delete SimpleName: groupName(662)", "Delete SingleVariableDeclaration(663)", "Delete ThisExpression(664)", "Delete SimpleName: groupName(665)", "Delete FieldAccess(666)", "Delete SimpleName: StringBuffer(667)", "Delete SimpleType: StringBuffer(668)", "Delete SimpleName: groupName(669)", "Delete ClassInstanceCreation(670)", "Delete Assignment: =(671)", "Delete ExpressionStatement(672)", "Delete Block(673)", "Delete MethodDeclaration(674)", "Delete TextElement: Set this entry's modification time. The parameter passed to this method(675)", "Delete TextElement: is in \"Java time\".(676)", "Delete TagElement(677)", "Delete SimpleName: time(678)", "Delete TextElement:  This entry's new modification time.(679)", "Delete TagElement: @param(680)", "Delete Javadoc(681)", "Delete Modifier: public(682)", "Delete PrimitiveType: void(683)", "Delete SimpleName: setModTime(684)", "Delete Modifier: final(685)", "Delete PrimitiveType: long(686)", "Delete SimpleName: time(687)", "Delete SingleVariableDeclaration(688)", "Delete SimpleName: modTime(689)", "Delete SimpleName: time(690)", "Delete NumberLiteral: 1000(691)", "Delete InfixExpression: /(692)", "Delete Assignment: =(693)", "Delete ExpressionStatement(694)", "Delete Block(695)", "Delete MethodDeclaration(696)", "Delete TextElement: Set this entry's modification time.(697)", "Delete TagElement(698)", "Delete SimpleName: time(699)", "Delete TextElement:  This entry's new modification time.(700)", "Delete TagElement: @param(701)", "Delete Javadoc(702)", "Delete Modifier: public(703)", "Delete PrimitiveType: void(704)", "Delete SimpleName: setModTime(705)", "Delete Modifier: final(706)", "Delete SimpleName: Date(707)", "Delete SimpleType: Date(708)", "Delete SimpleName: time(709)", "Delete SingleVariableDeclaration(710)", "Delete SimpleName: modTime(711)", "Delete SimpleName: time(712)", "Delete SimpleName: getTime(713)", "Delete MethodInvocation(714)", "Delete NumberLiteral: 1000(715)", "Delete InfixExpression: /(716)", "Delete Assignment: =(717)", "Delete ExpressionStatement(718)", "Delete Block(719)", "Delete MethodDeclaration(720)", "Delete TextElement: Set the mode for this entry(721)", "Delete TagElement(722)", "Delete SimpleName: mode(723)", "Delete TextElement:  The new Mode value(724)", "Delete TagElement: @param(725)", "Delete Javadoc(726)", "Delete Modifier: public(727)", "Delete PrimitiveType: void(728)", "Delete SimpleName: setMode(729)", "Delete Modifier: final(730)", "Delete PrimitiveType: int(731)", "Delete SimpleName: mode(732)", "Delete SingleVariableDeclaration(733)", "Delete ThisExpression(734)", "Delete SimpleName: mode(735)", "Delete FieldAccess(736)", "Delete SimpleName: mode(737)", "Delete Assignment: =(738)", "Delete ExpressionStatement(739)", "Delete Block(740)", "Delete MethodDeclaration(741)", "Delete TextElement: Set this entry's name.(742)", "Delete TagElement(743)", "Delete SimpleName: name(744)", "Delete TextElement:  This entry's new name.(745)", "Delete TagElement: @param(746)", "Delete Javadoc(747)", "Delete Modifier: public(748)", "Delete PrimitiveType: void(749)", "Delete SimpleName: setName(750)", "Delete Modifier: final(751)", "Delete SimpleName: String(752)", "Delete SimpleType: String(753)", "Delete SimpleName: name(754)", "Delete SingleVariableDeclaration(755)", "Delete ThisExpression(756)", "Delete SimpleName: name(757)", "Delete FieldAccess(758)", "Delete SimpleName: StringBuffer(759)", "Delete SimpleType: StringBuffer(760)", "Delete SimpleName: name(761)", "Delete ClassInstanceCreation(762)", "Delete Assignment: =(763)", "Delete ExpressionStatement(764)", "Delete Block(765)", "Delete MethodDeclaration(766)", "Delete TextElement: Set this entry's file size.(767)", "Delete TagElement(768)", "Delete SimpleName: size(769)", "Delete TextElement:  This entry's new file size.(770)", "Delete TagElement: @param(771)", "Delete Javadoc(772)", "Delete Modifier: public(773)", "Delete PrimitiveType: void(774)", "Delete SimpleName: setSize(775)", "Delete Modifier: final(776)", "Delete PrimitiveType: long(777)", "Delete SimpleName: size(778)", "Delete SingleVariableDeclaration(779)", "Delete ThisExpression(780)", "Delete SimpleName: size(781)", "Delete FieldAccess(782)", "Delete SimpleName: size(783)", "Delete Assignment: =(784)", "Delete ExpressionStatement(785)", "Delete Block(786)", "Delete MethodDeclaration(787)", "Delete TextElement: Set this entry's user id.(788)", "Delete TagElement(789)", "Delete SimpleName: userId(790)", "Delete TextElement:  This entry's new user id.(791)", "Delete TagElement: @param(792)", "Delete Javadoc(793)", "Delete Modifier: public(794)", "Delete PrimitiveType: void(795)", "Delete SimpleName: setUserID(796)", "Delete Modifier: final(797)", "Delete PrimitiveType: int(798)", "Delete SimpleName: userId(799)", "Delete SingleVariableDeclaration(800)", "Delete SimpleName: userID(801)", "Delete SimpleName: userId(802)", "Delete Assignment: =(803)", "Delete ExpressionStatement(804)", "Delete Block(805)", "Delete MethodDeclaration(806)", "Delete TextElement: Set this entry's user name.(807)", "Delete TagElement(808)", "Delete SimpleName: userName(809)", "Delete TextElement:  This entry's new user name.(810)", "Delete TagElement: @param(811)", "Delete Javadoc(812)", "Delete Modifier: public(813)", "Delete PrimitiveType: void(814)", "Delete SimpleName: setUserName(815)", "Delete Modifier: final(816)", "Delete SimpleName: String(817)", "Delete SimpleType: String(818)", "Delete SimpleName: userName(819)", "Delete SingleVariableDeclaration(820)", "Delete ThisExpression(821)", "Delete SimpleName: userName(822)", "Delete FieldAccess(823)", "Delete SimpleName: StringBuffer(824)", "Delete SimpleType: StringBuffer(825)", "Delete SimpleName: userName(826)", "Delete ClassInstanceCreation(827)", "Delete Assignment: =(828)", "Delete ExpressionStatement(829)", "Delete Block(830)", "Delete MethodDeclaration(831)", "Delete TextElement: If this entry represents a file, and the file is a directory, return an(832)", "Delete TextElement: array of TarEntries for this entry's children.(833)", "Delete TagElement(834)", "Delete TextElement:  An array of TarEntry's for this entry's children.(835)", "Delete TagElement: @return(836)", "Delete Javadoc(837)", "Delete Modifier: public(838)", "Delete SimpleName: TarEntry(839)", "Delete SimpleType: TarEntry(840)", "Delete Dimension(841)", "Delete ArrayType: TarEntry[](842)", "Delete SimpleName: getDirectoryEntries(843)", "Delete NullLiteral(844)", "Delete SimpleName: file(845)", "Delete InfixExpression: ==(846)", "Delete SimpleName: file(847)", "Delete SimpleName: isDirectory(848)", "Delete MethodInvocation(849)", "Delete PrefixExpression: !(850)", "Delete InfixExpression: ||(851)", "Delete SimpleName: TarEntry(852)", "Delete SimpleType: TarEntry(853)", "Delete Dimension(854)", "Delete ArrayType: TarEntry[](855)", "Delete NumberLiteral: 0(856)", "Delete ArrayCreation(857)", "Delete ReturnStatement(858)", "Delete Block(859)", "Delete IfStatement(860)", "Delete Modifier: final(861)", "Delete SimpleName: String(862)", "Delete SimpleType: String(863)", "Delete Dimension(864)", "Delete ArrayType: String[](865)", "Delete SimpleName: list(866)", "Delete SimpleName: file(867)", "Delete SimpleName: list(868)", "Delete MethodInvocation(869)", "Delete VariableDeclarationFragment(870)", "Delete VariableDeclarationStatement(871)", "Delete Modifier: final(872)", "Delete SimpleName: TarEntry(873)", "Delete SimpleType: TarEntry(874)", "Delete Dimension(875)", "Delete ArrayType: TarEntry[](876)", "Delete SimpleName: result(877)", "Delete SimpleName: TarEntry(878)", "Delete SimpleType: TarEntry(879)", "Delete Dimension(880)", "Delete ArrayType: TarEntry[](881)", "Delete QualifiedName: list.length(882)", "Delete ArrayCreation(883)", "Delete VariableDeclarationFragment(884)", "Delete VariableDeclarationStatement(885)", "Delete PrimitiveType: int(886)", "Delete SimpleName: i(887)", "Delete NumberLiteral: 0(888)", "Delete VariableDeclarationFragment(889)", "Delete VariableDeclarationExpression(890)", "Delete SimpleName: i(891)", "Delete QualifiedName: list.length(892)", "Delete InfixExpression: <(893)", "Delete SimpleName: i(894)", "Delete PrefixExpression: ++(895)", "Delete SimpleName: result(896)", "Delete SimpleName: i(897)", "Delete ArrayAccess(898)", "Delete SimpleName: TarEntry(899)", "Delete SimpleType: TarEntry(900)", "Delete SimpleName: File(901)", "Delete SimpleType: File(902)", "Delete SimpleName: file(903)", "Delete SimpleName: list(904)", "Delete SimpleName: i(905)", "Delete ArrayAccess(906)", "Delete ClassInstanceCreation(907)", "Delete ClassInstanceCreation(908)", "Delete Assignment: =(909)", "Delete ExpressionStatement(910)", "Delete Block(911)", "Delete ForStatement(912)", "Delete SimpleName: result(913)", "Delete ReturnStatement(914)", "Delete Block(915)", "Delete MethodDeclaration(916)", "Delete TextElement: Get this entry's file.(917)", "Delete TagElement(918)", "Delete TextElement:  This entry's file.(919)", "Delete TagElement: @return(920)", "Delete Javadoc(921)", "Delete Modifier: public(922)", "Delete SimpleName: File(923)", "Delete SimpleType: File(924)", "Delete SimpleName: getFile(925)", "Delete SimpleName: file(926)", "Delete ReturnStatement(927)", "Delete Block(928)", "Delete MethodDeclaration(929)", "Delete TextElement: Get this entry's group id.(930)", "Delete TagElement(931)", "Delete TextElement:  This entry's group id.(932)", "Delete TagElement: @return(933)", "Delete Javadoc(934)", "Delete Modifier: public(935)", "Delete PrimitiveType: int(936)", "Delete SimpleName: getGroupID(937)", "Delete SimpleName: groupID(938)", "Delete ReturnStatement(939)", "Delete Block(940)", "Delete MethodDeclaration(941)", "Delete TextElement: Get this entry's group name.(942)", "Delete TagElement(943)", "Delete TextElement:  This entry's group name.(944)", "Delete TagElement: @return(945)", "Delete Javadoc(946)", "Delete Modifier: public(947)", "Delete SimpleName: String(948)", "Delete SimpleType: String(949)", "Delete SimpleName: getGroupName(950)", "Delete SimpleName: groupName(951)", "Delete SimpleName: toString(952)", "Delete MethodInvocation(953)", "Delete ReturnStatement(954)", "Delete Block(955)", "Delete MethodDeclaration(956)", "Delete TextElement: Set this entry's modification time.(957)", "Delete TagElement(958)", "Delete TextElement:  The ModTime value(959)", "Delete TagElement: @return(960)", "Delete Javadoc(961)", "Delete Modifier: public(962)", "Delete SimpleName: Date(963)", "Delete SimpleType: Date(964)", "Delete SimpleName: getModTime(965)", "Delete SimpleName: Date(966)", "Delete SimpleType: Date(967)", "Delete SimpleName: modTime(968)", "Delete NumberLiteral: 1000(969)", "Delete InfixExpression: *(970)", "Delete ClassInstanceCreation(971)", "Delete ReturnStatement(972)", "Delete Block(973)", "Delete MethodDeclaration(974)", "Delete TextElement: Get this entry's mode.(975)", "Delete TagElement(976)", "Delete TextElement:  This entry's mode.(977)", "Delete TagElement: @return(978)", "Delete Javadoc(979)", "Delete Modifier: public(980)", "Delete PrimitiveType: int(981)", "Delete SimpleName: getMode(982)", "Delete SimpleName: mode(983)", "Delete ReturnStatement(984)", "Delete Block(985)", "Delete MethodDeclaration(986)", "Delete TextElement: Get this entry's name.(987)", "Delete TagElement(988)", "Delete TextElement:  This entry's name.(989)", "Delete TagElement: @return(990)", "Delete Javadoc(991)", "Delete Modifier: public(992)", "Delete SimpleName: String(993)", "Delete SimpleType: String(994)", "Delete SimpleName: getName(995)", "Delete SimpleName: name(996)", "Delete SimpleName: toString(997)", "Delete MethodInvocation(998)", "Delete ReturnStatement(999)", "Delete Block(1000)", "Delete MethodDeclaration(1001)", "Delete TextElement: Get this entry's file size.(1002)", "Delete TagElement(1003)", "Delete TextElement:  This entry's file size.(1004)", "Delete TagElement: @return(1005)", "Delete Javadoc(1006)", "Delete Modifier: public(1007)", "Delete PrimitiveType: long(1008)", "Delete SimpleName: getSize(1009)", "Delete SimpleName: size(1010)", "Delete ReturnStatement(1011)", "Delete Block(1012)", "Delete MethodDeclaration(1013)", "Delete TextElement: Get this entry's checksum.(1014)", "Delete TagElement(1015)", "Delete TextElement:  This entry's checksum.(1016)", "Delete TagElement: @return(1017)", "Delete Javadoc(1018)", "Delete Modifier: public(1019)", "Delete PrimitiveType: int(1020)", "Delete SimpleName: getCheckSum(1021)", "Delete SimpleName: checkSum(1022)", "Delete ReturnStatement(1023)", "Delete Block(1024)", "Delete MethodDeclaration(1025)", "Delete TextElement: Get this entry's user id.(1026)", "Delete TagElement(1027)", "Delete TextElement:  This entry's user id.(1028)", "Delete TagElement: @return(1029)", "Delete Javadoc(1030)", "Delete Modifier: public(1031)", "Delete PrimitiveType: int(1032)", "Delete SimpleName: getUserID(1033)", "Delete SimpleName: userID(1034)", "Delete ReturnStatement(1035)", "Delete Block(1036)", "Delete MethodDeclaration(1037)", "Delete TextElement: Get this entry's user name.(1038)", "Delete TagElement(1039)", "Delete TextElement:  This entry's user name.(1040)", "Delete TagElement: @return(1041)", "Delete Javadoc(1042)", "Delete Modifier: public(1043)", "Delete SimpleName: String(1044)", "Delete SimpleType: String(1045)", "Delete SimpleName: getUserName(1046)", "Delete SimpleName: userName(1047)", "Delete SimpleName: toString(1048)", "Delete MethodInvocation(1049)", "Delete ReturnStatement(1050)", "Delete Block(1051)", "Delete MethodDeclaration(1052)", "Delete TextElement: Determine if the given entry is a descendant of this entry. Descendancy(1053)", "Delete TextElement: is determined by the name of the descendant starting with this entry's(1054)", "Delete TextElement: name.(1055)", "Delete TagElement(1056)", "Delete SimpleName: desc(1057)", "Delete TextElement:  Entry to be checked as a descendent of(1058)", "Delete TagElement: @param(1059)", "Delete TextElement:  True if entry is a descendant of(1060)", "Delete TagElement: @return(1061)", "Delete Javadoc(1062)", "Delete Modifier: public(1063)", "Delete PrimitiveType: boolean(1064)", "Delete SimpleName: isDescendent(1065)", "Delete Modifier: final(1066)", "Delete SimpleName: TarEntry(1067)", "Delete SimpleType: TarEntry(1068)", "Delete SimpleName: desc(1069)", "Delete SingleVariableDeclaration(1070)", "Delete SimpleName: desc(1071)", "Delete SimpleName: getName(1072)", "Delete MethodInvocation(1073)", "Delete SimpleName: startsWith(1074)", "Delete SimpleName: getName(1075)", "Delete MethodInvocation(1076)", "Delete MethodInvocation(1077)", "Delete ReturnStatement(1078)", "Delete Block(1079)", "Delete MethodDeclaration(1080)", "Delete TextElement: Return whether or not this entry represents a directory.(1081)", "Delete TagElement(1082)", "Delete TextElement:  True if this entry is a directory.(1083)", "Delete TagElement: @return(1084)", "Delete Javadoc(1085)", "Delete Modifier: public(1086)", "Delete PrimitiveType: boolean(1087)", "Delete SimpleName: isDirectory(1088)", "Delete SimpleName: file(1089)", "Delete NullLiteral(1090)", "Delete InfixExpression: !=(1091)", "Delete SimpleName: file(1092)", "Delete SimpleName: isDirectory(1093)", "Delete MethodInvocation(1094)", "Delete ReturnStatement(1095)", "Delete Block(1096)", "Delete IfStatement(1097)", "Delete SimpleName: linkFlag(1098)", "Delete QualifiedName: TarConstants.LF_DIR(1099)", "Delete InfixExpression: ==(1100)", "Delete BooleanLiteral: true(1101)", "Delete ReturnStatement(1102)", "Delete Block(1103)", "Delete IfStatement(1104)", "Delete SimpleName: getName(1105)", "Delete MethodInvocation(1106)", "Delete SimpleName: endsWith(1107)", "Delete StringLiteral: \"/\"(1108)", "Delete MethodInvocation(1109)", "Delete BooleanLiteral: true(1110)", "Delete ReturnStatement(1111)", "Delete Block(1112)", "Delete IfStatement(1113)", "Delete BooleanLiteral: false(1114)", "Delete ReturnStatement(1115)", "Delete Block(1116)", "Delete MethodDeclaration(1117)", "Delete TextElement: Indicate if this entry is a GNU long name block(1118)", "Delete TagElement(1119)", "Delete TextElement:  true if this is a long name extension provided by GNU tar(1120)", "Delete TagElement: @return(1121)", "Delete Javadoc(1122)", "Delete Modifier: public(1123)", "Delete PrimitiveType: boolean(1124)", "Delete SimpleName: isGNULongNameEntry(1125)", "Delete SimpleName: linkFlag(1126)", "Delete QualifiedName: TarConstants.LF_GNUTYPE_LONGNAME(1127)", "Delete InfixExpression: ==(1128)", "Delete SimpleName: name(1129)", "Delete SimpleName: toString(1130)", "Delete MethodInvocation(1131)", "Delete SimpleName: equals(1132)", "Delete QualifiedName: TarConstants.GNU_LONGLINK(1133)", "Delete MethodInvocation(1134)", "Delete InfixExpression: &&(1135)", "Delete ReturnStatement(1136)", "Delete Block(1137)", "Delete MethodDeclaration(1138)", "Delete TextElement: Determine if the two entries are equal. Equality is determined by the(1139)", "Delete TextElement: header names being equal.(1140)", "Delete TagElement(1141)", "Delete SimpleName: other(1142)", "Delete TextElement:  Entry to be checked for equality.(1143)", "Delete TagElement: @param(1144)", "Delete TextElement:  True if the entries are equal.(1145)", "Delete TagElement: @return(1146)", "Delete Javadoc(1147)", "Delete SimpleName: Override(1148)", "Delete MarkerAnnotation(1149)", "Delete Modifier: public(1150)", "Delete PrimitiveType: boolean(1151)", "Delete SimpleName: equals(1152)", "Delete Modifier: final(1153)", "Delete SimpleName: Object(1154)", "Delete SimpleType: Object(1155)", "Delete SimpleName: other(1156)", "Delete SingleVariableDeclaration(1157)", "Delete SimpleName: other(1158)", "Delete SimpleName: TarEntry(1159)", "Delete SimpleType: TarEntry(1160)", "Delete InstanceofExpression(1161)", "Delete ParenthesizedExpression(1162)", "Delete PrefixExpression: !(1163)", "Delete BooleanLiteral: false(1164)", "Delete ReturnStatement(1165)", "Delete Block(1166)", "Delete IfStatement(1167)", "Delete SimpleName: TarEntry(1168)", "Delete SimpleType: TarEntry(1169)", "Delete SimpleName: entry(1170)", "Delete SimpleName: TarEntry(1171)", "Delete SimpleType: TarEntry(1172)", "Delete SimpleName: other(1173)", "Delete CastExpression(1174)", "Delete VariableDeclarationFragment(1175)", "Delete VariableDeclarationStatement(1176)", "Delete SimpleName: getName(1177)", "Delete MethodInvocation(1178)", "Delete SimpleName: equals(1179)", "Delete SimpleName: entry(1180)", "Delete SimpleName: getName(1181)", "Delete MethodInvocation(1182)", "Delete MethodInvocation(1183)", "Delete ReturnStatement(1184)", "Delete Block(1185)", "Delete MethodDeclaration(1186)", "Delete SimpleName: Override(1187)", "Delete MarkerAnnotation(1188)", "Delete Modifier: public(1189)", "Delete PrimitiveType: int(1190)", "Delete SimpleName: hashCode(1191)", "Delete SimpleName: getName(1192)", "Delete MethodInvocation(1193)", "Delete SimpleName: hashCode(1194)", "Delete MethodInvocation(1195)", "Delete ReturnStatement(1196)", "Delete Block(1197)", "Delete MethodDeclaration(1198)", "Delete TextElement: Parse an entry's header information from a header buffer.(1199)", "Delete TagElement(1200)", "Delete SimpleName: header(1201)", "Delete TextElement:  The tar entry header buffer to get information from.(1202)", "Delete TagElement: @param(1203)", "Delete Javadoc(1204)", "Delete Modifier: private(1205)", "Delete PrimitiveType: void(1206)", "Delete SimpleName: parseTarHeader(1207)", "Delete Modifier: final(1208)", "Delete PrimitiveType: byte(1209)", "Delete Dimension(1210)", "Delete ArrayType: byte[](1211)", "Delete SimpleName: header(1212)", "Delete SingleVariableDeclaration(1213)", "Delete PrimitiveType: int(1214)", "Delete SimpleName: offset(1215)", "Delete NumberLiteral: 0(1216)", "Delete VariableDeclarationFragment(1217)", "Delete VariableDeclarationStatement(1218)", "Delete SimpleName: name(1219)", "Delete SimpleName: TarUtils(1220)", "Delete SimpleName: parseName(1221)", "Delete SimpleName: header(1222)", "Delete SimpleName: offset(1223)", "Delete SimpleName: NAMELEN(1224)", "Delete MethodInvocation(1225)", "Delete Assignment: =(1226)", "Delete ExpressionStatement(1227)", "Delete SimpleName: offset(1228)", "Delete SimpleName: NAMELEN(1229)", "Delete Assignment: +=(1230)", "Delete ExpressionStatement(1231)", "Delete SimpleName: mode(1232)", "Delete PrimitiveType: int(1233)", "Delete SimpleName: TarUtils(1234)", "Delete SimpleName: parseOctal(1235)", "Delete SimpleName: header(1236)", "Delete SimpleName: offset(1237)", "Delete QualifiedName: TarConstants.MODELEN(1238)", "Delete MethodInvocation(1239)", "Delete CastExpression(1240)", "Delete Assignment: =(1241)", "Delete ExpressionStatement(1242)", "Delete SimpleName: offset(1243)", "Delete QualifiedName: TarConstants.MODELEN(1244)", "Delete Assignment: +=(1245)", "Delete ExpressionStatement(1246)", "Delete SimpleName: userID(1247)", "Delete PrimitiveType: int(1248)", "Delete SimpleName: TarUtils(1249)", "Delete SimpleName: parseOctal(1250)", "Delete SimpleName: header(1251)", "Delete SimpleName: offset(1252)", "Delete QualifiedName: TarConstants.UIDLEN(1253)", "Delete MethodInvocation(1254)", "Delete CastExpression(1255)", "Delete Assignment: =(1256)", "Delete ExpressionStatement(1257)", "Delete SimpleName: offset(1258)", "Delete QualifiedName: TarConstants.UIDLEN(1259)", "Delete Assignment: +=(1260)", "Delete ExpressionStatement(1261)", "Delete SimpleName: groupID(1262)", "Delete PrimitiveType: int(1263)", "Delete SimpleName: TarUtils(1264)", "Delete SimpleName: parseOctal(1265)", "Delete SimpleName: header(1266)", "Delete SimpleName: offset(1267)", "Delete QualifiedName: TarConstants.GIDLEN(1268)", "Delete MethodInvocation(1269)", "Delete CastExpression(1270)", "Delete Assignment: =(1271)", "Delete ExpressionStatement(1272)", "Delete SimpleName: offset(1273)", "Delete QualifiedName: TarConstants.GIDLEN(1274)", "Delete Assignment: +=(1275)", "Delete ExpressionStatement(1276)", "Delete SimpleName: size(1277)", "Delete SimpleName: TarUtils(1278)", "Delete SimpleName: parseOctal(1279)", "Delete SimpleName: header(1280)", "Delete SimpleName: offset(1281)", "Delete QualifiedName: TarConstants.SIZELEN(1282)", "Delete MethodInvocation(1283)", "Delete Assignment: =(1284)", "Delete ExpressionStatement(1285)", "Delete SimpleName: offset(1286)", "Delete QualifiedName: TarConstants.SIZELEN(1287)", "Delete Assignment: +=(1288)", "Delete ExpressionStatement(1289)", "Delete SimpleName: modTime(1290)", "Delete SimpleName: TarUtils(1291)", "Delete SimpleName: parseOctal(1292)", "Delete SimpleName: header(1293)", "Delete SimpleName: offset(1294)", "Delete QualifiedName: TarConstants.MODTIMELEN(1295)", "Delete MethodInvocation(1296)", "Delete Assignment: =(1297)", "Delete ExpressionStatement(1298)", "Delete SimpleName: offset(1299)", "Delete QualifiedName: TarConstants.MODTIMELEN(1300)", "Delete Assignment: +=(1301)", "Delete ExpressionStatement(1302)", "Delete SimpleName: checkSum(1303)", "Delete PrimitiveType: int(1304)", "Delete SimpleName: TarUtils(1305)", "Delete SimpleName: parseOctal(1306)", "Delete SimpleName: header(1307)", "Delete SimpleName: offset(1308)", "Delete QualifiedName: TarConstants.CHKSUMLEN(1309)", "Delete MethodInvocation(1310)", "Delete CastExpression(1311)", "Delete Assignment: =(1312)", "Delete ExpressionStatement(1313)", "Delete SimpleName: offset(1314)", "Delete QualifiedName: TarConstants.CHKSUMLEN(1315)", "Delete Assignment: +=(1316)", "Delete ExpressionStatement(1317)", "Delete SimpleName: linkFlag(1318)", "Delete SimpleName: header(1319)", "Delete SimpleName: offset(1320)", "Delete PostfixExpression: ++(1321)", "Delete ArrayAccess(1322)", "Delete Assignment: =(1323)", "Delete ExpressionStatement(1324)", "Delete SimpleName: linkName(1325)", "Delete SimpleName: TarUtils(1326)", "Delete SimpleName: parseName(1327)", "Delete SimpleName: header(1328)", "Delete SimpleName: offset(1329)", "Delete SimpleName: NAMELEN(1330)", "Delete MethodInvocation(1331)", "Delete Assignment: =(1332)", "Delete ExpressionStatement(1333)", "Delete SimpleName: offset(1334)", "Delete SimpleName: NAMELEN(1335)", "Delete Assignment: +=(1336)", "Delete ExpressionStatement(1337)", "Delete SimpleName: magic(1338)", "Delete SimpleName: TarUtils(1339)", "Delete SimpleName: parseName(1340)", "Delete SimpleName: header(1341)", "Delete SimpleName: offset(1342)", "Delete QualifiedName: TarConstants.MAGICLEN(1343)", "Delete MethodInvocation(1344)", "Delete Assignment: =(1345)", "Delete ExpressionStatement(1346)", "Delete SimpleName: offset(1347)", "Delete QualifiedName: TarConstants.MAGICLEN(1348)", "Delete Assignment: +=(1349)", "Delete ExpressionStatement(1350)", "Delete SimpleName: userName(1351)", "Delete SimpleName: TarUtils(1352)", "Delete SimpleName: parseName(1353)", "Delete SimpleName: header(1354)", "Delete SimpleName: offset(1355)", "Delete QualifiedName: TarConstants.UNAMELEN(1356)", "Delete MethodInvocation(1357)", "Delete Assignment: =(1358)", "Delete ExpressionStatement(1359)", "Delete SimpleName: offset(1360)", "Delete QualifiedName: TarConstants.UNAMELEN(1361)", "Delete Assignment: +=(1362)", "Delete ExpressionStatement(1363)", "Delete SimpleName: groupName(1364)", "Delete SimpleName: TarUtils(1365)", "Delete SimpleName: parseName(1366)", "Delete SimpleName: header(1367)", "Delete SimpleName: offset(1368)", "Delete QualifiedName: TarConstants.GNAMELEN(1369)", "Delete MethodInvocation(1370)", "Delete Assignment: =(1371)", "Delete ExpressionStatement(1372)", "Delete SimpleName: offset(1373)", "Delete QualifiedName: TarConstants.GNAMELEN(1374)", "Delete Assignment: +=(1375)", "Delete ExpressionStatement(1376)", "Delete SimpleName: devMajor(1377)", "Delete PrimitiveType: int(1378)", "Delete SimpleName: TarUtils(1379)", "Delete SimpleName: parseOctal(1380)", "Delete SimpleName: header(1381)", "Delete SimpleName: offset(1382)", "Delete QualifiedName: TarConstants.DEVLEN(1383)", "Delete MethodInvocation(1384)", "Delete CastExpression(1385)", "Delete Assignment: =(1386)", "Delete ExpressionStatement(1387)", "Delete SimpleName: offset(1388)", "Delete QualifiedName: TarConstants.DEVLEN(1389)", "Delete Assignment: +=(1390)", "Delete ExpressionStatement(1391)", "Delete SimpleName: devMinor(1392)", "Delete PrimitiveType: int(1393)", "Delete SimpleName: TarUtils(1394)", "Delete SimpleName: parseOctal(1395)", "Delete SimpleName: header(1396)", "Delete SimpleName: offset(1397)", "Delete QualifiedName: TarConstants.DEVLEN(1398)", "Delete MethodInvocation(1399)", "Delete CastExpression(1400)", "Delete Assignment: =(1401)", "Delete ExpressionStatement(1402)", "Delete Block(1403)", "Delete MethodDeclaration(1404)", "Delete TextElement: Write an entry's header information to a header buffer.(1405)", "Delete TagElement(1406)", "Delete SimpleName: buffer(1407)", "Delete TextElement:  The tar entry header buffer to fill in.(1408)", "Delete TagElement: @param(1409)", "Delete Javadoc(1410)", "Delete Modifier: public(1411)", "Delete PrimitiveType: void(1412)", "Delete SimpleName: writeEntryHeader(1413)", "Delete Modifier: final(1414)", "Delete PrimitiveType: byte(1415)", "Delete Dimension(1416)", "Delete ArrayType: byte[](1417)", "Delete SimpleName: buffer(1418)", "Delete SingleVariableDeclaration(1419)", "Delete PrimitiveType: int(1420)", "Delete SimpleName: offset(1421)", "Delete NumberLiteral: 0(1422)", "Delete VariableDeclarationFragment(1423)", "Delete VariableDeclarationStatement(1424)", "Delete SimpleName: offset(1425)", "Delete SimpleName: TarUtils(1426)", "Delete SimpleName: getNameBytes(1427)", "Delete SimpleName: name(1428)", "Delete SimpleName: buffer(1429)", "Delete SimpleName: offset(1430)", "Delete SimpleName: NAMELEN(1431)", "Delete MethodInvocation(1432)", "Delete Assignment: =(1433)", "Delete ExpressionStatement(1434)", "Delete SimpleName: offset(1435)", "Delete SimpleName: TarUtils(1436)", "Delete SimpleName: getOctalBytes(1437)", "Delete SimpleName: mode(1438)", "Delete SimpleName: buffer(1439)", "Delete SimpleName: offset(1440)", "Delete QualifiedName: TarConstants.MODELEN(1441)", "Delete MethodInvocation(1442)", "Delete Assignment: =(1443)", "Delete ExpressionStatement(1444)", "Delete SimpleName: offset(1445)", "Delete SimpleName: TarUtils(1446)", "Delete SimpleName: getOctalBytes(1447)", "Delete SimpleName: userID(1448)", "Delete SimpleName: buffer(1449)", "Delete SimpleName: offset(1450)", "Delete QualifiedName: TarConstants.UIDLEN(1451)", "Delete MethodInvocation(1452)", "Delete Assignment: =(1453)", "Delete ExpressionStatement(1454)", "Delete SimpleName: offset(1455)", "Delete SimpleName: TarUtils(1456)", "Delete SimpleName: getOctalBytes(1457)", "Delete SimpleName: groupID(1458)", "Delete SimpleName: buffer(1459)", "Delete SimpleName: offset(1460)", "Delete QualifiedName: TarConstants.GIDLEN(1461)", "Delete MethodInvocation(1462)", "Delete Assignment: =(1463)", "Delete ExpressionStatement(1464)", "Delete SimpleName: offset(1465)", "Delete SimpleName: TarUtils(1466)", "Delete SimpleName: getLongOctalBytes(1467)", "Delete SimpleName: size(1468)", "Delete SimpleName: buffer(1469)", "Delete SimpleName: offset(1470)", "Delete QualifiedName: TarConstants.SIZELEN(1471)", "Delete MethodInvocation(1472)", "Delete Assignment: =(1473)", "Delete ExpressionStatement(1474)", "Delete SimpleName: offset(1475)", "Delete SimpleName: TarUtils(1476)", "Delete SimpleName: getLongOctalBytes(1477)", "Delete SimpleName: modTime(1478)", "Delete SimpleName: buffer(1479)", "Delete SimpleName: offset(1480)", "Delete QualifiedName: TarConstants.MODTIMELEN(1481)", "Delete MethodInvocation(1482)", "Delete Assignment: =(1483)", "Delete ExpressionStatement(1484)", "Delete Modifier: final(1485)", "Delete PrimitiveType: int(1486)", "Delete SimpleName: checkSumOffset(1487)", "Delete SimpleName: offset(1488)", "Delete VariableDeclarationFragment(1489)", "Delete VariableDeclarationStatement(1490)", "Delete PrimitiveType: int(1491)", "Delete SimpleName: i(1492)", "Delete NumberLiteral: 0(1493)", "Delete VariableDeclarationFragment(1494)", "Delete VariableDeclarationExpression(1495)", "Delete SimpleName: i(1496)", "Delete QualifiedName: TarConstants.CHKSUMLEN(1497)", "Delete InfixExpression: <(1498)", "Delete SimpleName: i(1499)", "Delete PrefixExpression: ++(1500)", "Delete SimpleName: buffer(1501)", "Delete SimpleName: offset(1502)", "Delete PostfixExpression: ++(1503)", "Delete ArrayAccess(1504)", "Delete PrimitiveType: byte(1505)", "Delete CharacterLiteral: ' '(1506)", "Delete CastExpression(1507)", "Delete Assignment: =(1508)", "Delete ExpressionStatement(1509)", "Delete Block(1510)", "Delete ForStatement(1511)", "Delete SimpleName: buffer(1512)", "Delete SimpleName: offset(1513)", "Delete PostfixExpression: ++(1514)", "Delete ArrayAccess(1515)", "Delete SimpleName: linkFlag(1516)", "Delete Assignment: =(1517)", "Delete ExpressionStatement(1518)", "Delete SimpleName: offset(1519)", "Delete SimpleName: TarUtils(1520)", "Delete SimpleName: getNameBytes(1521)", "Delete SimpleName: linkName(1522)", "Delete SimpleName: buffer(1523)", "Delete SimpleName: offset(1524)", "Delete SimpleName: NAMELEN(1525)", "Delete MethodInvocation(1526)", "Delete Assignment: =(1527)", "Delete ExpressionStatement(1528)", "Delete SimpleName: offset(1529)", "Delete SimpleName: TarUtils(1530)", "Delete SimpleName: getNameBytes(1531)", "Delete SimpleName: magic(1532)", "Delete SimpleName: buffer(1533)", "Delete SimpleName: offset(1534)", "Delete QualifiedName: TarConstants.MAGICLEN(1535)", "Delete MethodInvocation(1536)", "Delete Assignment: =(1537)", "Delete ExpressionStatement(1538)", "Delete SimpleName: offset(1539)", "Delete SimpleName: TarUtils(1540)", "Delete SimpleName: getNameBytes(1541)", "Delete SimpleName: userName(1542)", "Delete SimpleName: buffer(1543)", "Delete SimpleName: offset(1544)", "Delete QualifiedName: TarConstants.UNAMELEN(1545)", "Delete MethodInvocation(1546)", "Delete Assignment: =(1547)", "Delete ExpressionStatement(1548)", "Delete SimpleName: offset(1549)", "Delete SimpleName: TarUtils(1550)", "Delete SimpleName: getNameBytes(1551)", "Delete SimpleName: groupName(1552)", "Delete SimpleName: buffer(1553)", "Delete SimpleName: offset(1554)", "Delete QualifiedName: TarConstants.GNAMELEN(1555)", "Delete MethodInvocation(1556)", "Delete Assignment: =(1557)", "Delete ExpressionStatement(1558)", "Delete SimpleName: offset(1559)", "Delete SimpleName: TarUtils(1560)", "Delete SimpleName: getOctalBytes(1561)", "Delete SimpleName: devMajor(1562)", "Delete SimpleName: buffer(1563)", "Delete SimpleName: offset(1564)", "Delete QualifiedName: TarConstants.DEVLEN(1565)", "Delete MethodInvocation(1566)", "Delete Assignment: =(1567)", "Delete ExpressionStatement(1568)", "Delete SimpleName: offset(1569)", "Delete SimpleName: TarUtils(1570)", "Delete SimpleName: getOctalBytes(1571)", "Delete SimpleName: devMinor(1572)", "Delete SimpleName: buffer(1573)", "Delete SimpleName: offset(1574)", "Delete QualifiedName: TarConstants.DEVLEN(1575)", "Delete MethodInvocation(1576)", "Delete Assignment: =(1577)", "Delete ExpressionStatement(1578)", "Delete SimpleName: offset(1579)", "Delete QualifiedName: buffer.length(1580)", "Delete InfixExpression: <(1581)", "Delete SimpleName: buffer(1582)", "Delete SimpleName: offset(1583)", "Delete PostfixExpression: ++(1584)", "Delete ArrayAccess(1585)", "Delete NumberLiteral: 0(1586)", "Delete Assignment: =(1587)", "Delete ExpressionStatement(1588)", "Delete Block(1589)", "Delete WhileStatement(1590)", "Delete Modifier: final(1591)", "Delete PrimitiveType: long(1592)", "Delete SimpleName: checkSum(1593)", "Delete SimpleName: TarUtils(1594)", "Delete SimpleName: computeCheckSum(1595)", "Delete SimpleName: buffer(1596)", "Delete MethodInvocation(1597)", "Delete VariableDeclarationFragment(1598)", "Delete VariableDeclarationStatement(1599)", "Delete SimpleName: TarUtils(1600)", "Delete SimpleName: getCheckSumOctalBytes(1601)", "Delete SimpleName: checkSum(1602)", "Delete SimpleName: buffer(1603)", "Delete SimpleName: checkSumOffset(1604)", "Delete QualifiedName: TarConstants.CHKSUMLEN(1605)", "Delete MethodInvocation(1606)", "Delete ExpressionStatement(1607)", "Delete Block(1608)", "Delete MethodDeclaration(1609)", "Delete TypeDeclaration: class(1610)"]}}, {"TarFileObject_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: org.apache.commons.compress.archivers.tar.TarArchiveEntry to ImportDeclaration at 0"]}, {"root": "UPDATE from TarEntry to TarArchiveEntry", "operations": ["UPD SimpleName: TarEntry from TarEntry to TarArchiveEntry", "UPD SimpleName: TarEntry from TarEntry to TarArchiveEntry", "UPD SimpleType: TarEntry from TarEntry to TarArchiveEntry", "UPD SimpleName: TarEntry from TarEntry to TarArchiveEntry", "UPD SimpleType: TarEntry from TarEntry to TarArchiveEntry", "UPD SimpleType: TarEntry from TarEntry to TarArchiveEntry"]}, {"root": "UPDATE from The TarEntry  to The TarArchiveEntry ", "operations": ["UPD TextElement: The TarEntry  from The TarEntry  to The TarArchiveEntry "]}]}}, {"TarFileObject_diff": {"operations": ["Insert ImportDeclaration(7) into CompilationUnit(352) at 3", "Insert QualifiedName: org.apache.commons.compress.archivers.tar.TarArchiveEntry(6) into ImportDeclaration(7) at 0", "Update SimpleType: TarEntry(30) to TarArchiveEntry", "Update SimpleName: TarEntry(29) to TarArchiveEntry", "Update SimpleType: TarEntry(70) to TarArchiveEntry", "Update SimpleType: TarEntry(113) to TarArchiveEntry", "Update TextElement: The TarEntry (25) to The TarArchiveEntry ", "Update SimpleName: TarEntry(69) to TarArchiveEntry", "Update SimpleName: TarEntry(112) to TarArchiveEntry"]}}, {"TarFileSystem_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS QualifiedName: org.apache.commons.compress.archivers.tar.TarArchiveEntry to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 9"]}, {"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS ImportDeclaration to CompilationUnit at 10", "INS QualifiedName: org.apache.commons.compress.archivers.tar.TarArchiveInputStream to ImportDeclaration at 0"]}, {"root": "UPDATE from TarInputStream to TarArchiveInputStream", "operations": ["UPD SimpleName: TarInputStream from TarInputStream to TarArchiveInputStream", "UPD SimpleName: TarInputStream from TarInputStream to TarArchiveInputStream", "UPD SimpleType: TarInputStream from TarInputStream to TarArchiveInputStream", "UPD SimpleType: TarInputStream from TarInputStream to TarArchiveInputStream", "UPD SimpleType: TarInputStream from TarInputStream to TarArchiveInputStream", "UPD SimpleName: TarInputStream from TarInputStream to TarArchiveInputStream", "UPD SimpleType: TarInputStream from TarInputStream to TarArchiveInputStream", "UPD SimpleType: TarInputStream from TarInputStream to TarArchiveInputStream", "UPD SimpleType: TarInputStream from TarInputStream to TarArchiveInputStream", "UPD SimpleName: TarInputStream from TarInputStream to TarArchiveInputStream", "UPD SimpleName: TarInputStream from TarInputStream to TarArchiveInputStream", "UPD SimpleName: TarInputStream from TarInputStream to TarArchiveInputStream", "UPD SimpleName: TarInputStream from TarInputStream to TarArchiveInputStream", "UPD SimpleType: TarInputStream from TarInputStream to TarArchiveInputStream"]}, {"root": "UPDATE from TarEntry to TarArchiveEntry", "operations": ["UPD SimpleType: TarEntry from TarEntry to TarArchiveEntry", "UPD SimpleType: TarEntry from TarEntry to TarArchiveEntry", "UPD SimpleName: TarEntry from TarEntry to TarArchiveEntry", "UPD SimpleType: TarEntry from TarEntry to TarArchiveEntry", "UPD SimpleName: TarEntry from TarEntry to TarArchiveEntry", "UPD SimpleName: TarEntry from TarEntry to TarArchiveEntry"]}, {"root": "UPDATE from getNextEntry to getNextTarEntry", "operations": ["UPD SimpleName: getNextEntry from getNextEntry to getNextTarEntry"]}]}}, {"TarFileSystem_diff": {"operations": ["Insert ImportDeclaration(19) into CompilationUnit(669) at 9", "Insert ImportDeclaration(21) into CompilationUnit(669) at 10", "Insert QualifiedName: org.apache.commons.compress.archivers.tar.TarArchiveEntry(18) into ImportDeclaration(19) at 0", "Insert QualifiedName: org.apache.commons.compress.archivers.tar.TarArchiveInputStream(20) into ImportDeclaration(21) at 0", "Update SimpleType: TarInputStream(78) to TarArchiveInputStream", "Update SimpleType: TarInputStream(448) to TarArchiveInputStream", "Update SimpleType: TarInputStream(498) to TarArchiveInputStream", "Update SimpleName: TarInputStream(77) to TarArchiveInputStream", "Update SimpleType: TarEntry(340) to TarArchiveEntry", "Update SimpleName: TarInputStream(447) to TarArchiveInputStream", "Update SimpleType: TarEntry(481) to TarArchiveEntry", "Update SimpleName: TarInputStream(497) to TarArchiveInputStream", "Update SimpleName: TarEntry(339) to TarArchiveEntry", "Update SimpleType: TarInputStream(429) to TarArchiveInputStream", "Update SimpleName: TarEntry(480) to TarArchiveEntry", "Update SimpleName: TarInputStream(428) to TarArchiveInputStream", "Update SimpleType: TarEntry(154) to TarArchiveEntry", "Update SimpleName: TarEntry(153) to TarArchiveEntry", "Update SimpleType: TarInputStream(551) to TarArchiveInputStream", "Update SimpleName: TarInputStream(550) to TarArchiveInputStream", "Update SimpleType: TarInputStream(515) to TarArchiveInputStream", "Update SimpleName: getNextEntry(161) to getNextTarEntry", "Update SimpleName: TarInputStream(514) to TarArchiveInputStream", "Update SimpleType: TarInputStream(534) to TarArchiveInputStream", "Update SimpleName: TarInputStream(533) to TarArchiveInputStream"]}}, {"TarInputStream_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.vfs2.provider.tar"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.FilterInputStream", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.IOException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.InputStream", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.OutputStream", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: System", "DEL TagElement", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: blockSize", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL SimpleName: currEntry", "DEL CharacterLiteral: 'r'", "DEL SimpleName: size", "DEL TextElement: Get the next entry in this tar archive. This will skip over any remaining", "DEL TextElement: Since we do not support marking just yet, we do nothing.", "DEL SimpleName: IOException", "DEL SimpleName: buffer", "DEL NumberLiteral: 0", "DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL Block", "DEL SimpleType: TarEntry", "DEL SingleVariableDeclaration", "DEL Block", "DEL CastExpression", "DEL Modifier: private", "DEL Assignment: -=", "DEL SimpleName: buffer", "DEL ExpressionStatement", "DEL SimpleName: entrySize", "DEL Block", "DEL SimpleName: longName", "DEL SimpleName: IOException", "DEL Block", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL MethodDeclaration", "DEL IfStatement", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL QualifiedName: TarBuffer.DEFAULT_BLOCKSIZE", "DEL SimpleName: getNextEntry", "DEL FieldAccess", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL SimpleName: entryOffset", "DEL SimpleName: message", "DEL SimpleName: hasHitEOF", "DEL PrimitiveType: boolean", "DEL IfStatement", "DEL Assignment: =", "DEL FieldDeclaration", "DEL IfStatement", "DEL TextElement:  The number of bytes to skip.", "DEL SimpleName: entryOffset", "DEL FieldDeclaration", "DEL StringLiteral: \"' size = \"", "DEL SimpleName: available", "DEL ExpressionStatement", "DEL SimpleName: length", "DEL Modifier: final", "DEL SimpleName: currEntry", "DEL SimpleName: numRead", "DEL PrimitiveType: int", "DEL SimpleName: setDebug", "DEL SimpleName: readBuf", "DEL MethodDeclaration", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL ConditionalExpression", "DEL SimpleName: currEntry", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: numToSkip", "DEL SingleVariableDeclaration", "DEL SimpleName: size", "DEL SimpleName: debug", "DEL SimpleName: write", "DEL Dimension", "DEL Modifier: public", "DEL SimpleName: buffer", "DEL SimpleName: output", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleName: headerBuf", "DEL InfixExpression: &&", "DEL PrimitiveType: void", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL MemberRef", "DEL InfixExpression: >", "DEL SimpleName: buffer", "DEL SimpleName: skipped", "DEL TextElement: them as if they were this stream's start and EOF.", "DEL SimpleName: Override", "DEL PrimitiveType: byte", "DEL SimpleName: debug", "DEL IfStatement", "DEL QualifiedName: readBuf.length", "DEL SimpleName: debug", "DEL SingleVariableDeclaration", "DEL Block", "DEL TextElement: Reads a byte from the current tar archive entry. This method simply calls", "DEL ArrayType: byte[]", "DEL TextElement:  The number of bytes read, or -1 at EOF.", "DEL Block", "DEL Modifier: public", "DEL SimpleName: hasHitEOF", "DEL InfixExpression: >=", "DEL ExpressionStatement", "DEL QualifiedName: Integer.MAX_VALUE", "DEL NullLiteral", "DEL TagElement: @throws", "DEL ArrayType: byte[]", "DEL NumberLiteral: 1", "DEL IfStatement", "DEL StringLiteral: \" OFF \"", "DEL NumberLiteral: 0", "DEL PrimitiveType: long", "DEL MethodInvocation", "DEL TextElement:  when an IO error causes operation to fail", "DEL Javadoc", "DEL Javadoc", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: IOException", "DEL Block", "DEL SimpleName: newBuffer", "DEL SimpleName: numRead", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL ArrayCreation", "DEL SimpleName: getSize", "DEL InfixExpression: &&", "DEL MarkerAnnotation", "DEL Modifier: final", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL FieldAccess", "DEL SimpleName: oneBuf", "DEL TagElement", "DEL InfixExpression: >", "DEL TextElement:  The byte read, or -1 at EOF.", "DEL VariableDeclarationStatement", "DEL SimpleName: count", "DEL SimpleName: offset", "DEL SimpleName: read", "DEL SimpleName: numToSkip", "DEL Modifier: final", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL SimpleName: reset", "DEL TextElement: Copies the contents of the current tar archive entry directly into an", "DEL Modifier: public", "DEL TextElement: current entry.", "DEL TextElement:  The offset at which to place bytes read.", "DEL SimpleName: position", "DEL SimpleName: InputStream", "DEL ExpressionStatement", "DEL TextElement: Since we do not support marking just yet, we do nothing.", "DEL Modifier: final", "DEL Dimension", "DEL MethodInvocation", "DEL TextElement: Reads bytes from the current tar archive entry. This method simply calls", "DEL SimpleName: currEntry", "DEL InfixExpression: >", "DEL SimpleName: setDebug", "DEL NumberLiteral: 0", "DEL ConditionalExpression", "DEL SimpleName: numToSkip", "DEL SimpleName: System", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL Modifier: private", "DEL SimpleName: str", "DEL IfStatement", "DEL SimpleName: size", "DEL VariableDeclarationStatement", "DEL Dimension", "DEL SuperConstructorInvocation", "DEL ArrayType: byte[]", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL Modifier: public", "DEL VariableDeclarationStatement", "DEL SimpleName: Override", "DEL TextElement:  The number of bytes read, or -1 at EOF.", "DEL IfStatement", "DEL SimpleName: remaining", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodInvocation", "DEL TextElement: provided to position at each successive entry in the archive, and the read", "DEL SimpleName: markLimit", "DEL SimpleName: num", "DEL Modifier: private", "DEL NullLiteral", "DEL NumberLiteral: 0", "DEL SimpleName: currEntry", "DEL SimpleName: entryOffset", "DEL VariableDeclarationFragment", "DEL PrimitiveType: byte", "DEL SimpleName: numToRead", "DEL NumberLiteral: 1", "DEL TextElement: data in the current entry, if there is one, and place the input stream at", "DEL SimpleName: buffer", "DEL SimpleName: offset", "DEL SimpleName: IOException", "DEL SimpleName: DEFAULT_RECORDSIZE", "DEL Dimension", "DEL SimpleName: num", "DEL InfixExpression: ==", "DEL SimpleType: TarEntry", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: oneBuf", "DEL ArrayType: byte[]", "DEL MethodDeclaration", "DEL SimpleName: debug", "DEL ParenthesizedExpression", "DEL PrefixExpression: -", "DEL SimpleName: input", "DEL SimpleName: hasHitEOF", "DEL SimpleName: OutputStream", "DEL VariableDeclarationFragment", "DEL TagElement: @throws", "DEL ArrayCreation", "DEL SimpleName: currEntry", "DEL SimpleName: isEOFRecord", "DEL SimpleType: TarEntry", "DEL TagElement: @see", "DEL QualifiedName: System.err", "DEL FieldDeclaration", "DEL Javadoc", "DEL InfixExpression: &&", "DEL TagElement: @see", "DEL TextElement:  the message to use in debugging", "DEL Block", "DEL TextElement: Closes this stream. Calls the TarBuffer's close() method.", "DEL TypeDeclaration: class", "DEL IfStatement", "DEL Javadoc", "DEL TagElement: @param", "DEL SimpleName: buffer", "DEL QualifiedName: readBuf.length", "DEL TextElement: read( byte[], int, int ).", "DEL TagElement: @param", "DEL SimpleName: rec", "DEL SimpleName: numToRead", "DEL Assignment: =", "DEL TagElement: @param", "DEL SimpleName: getName", "DEL SimpleName: remaining", "DEL SimpleName: headerBuf", "DEL TagElement: @param", "DEL Assignment: +=", "DEL Assignment: +=", "DEL SimpleName: read", "DEL TextElement:  when an IO error causes operation to fail", "DEL TextElement: stream, block size and default record sizes.", "DEL Javadoc", "DEL TagElement: @param", "DEL SimpleName: debug", "DEL ClassInstanceCreation", "DEL SimpleName: size", "DEL VariableDeclarationStatement", "DEL SimpleName: numRead", "DEL SimpleName: DEFAULT_RECORDSIZE", "DEL PrimitiveType: byte", "DEL SimpleName: markSupported", "DEL MethodInvocation", "DEL InfixExpression: -", "DEL SimpleName: buffer", "DEL SimpleName: toString", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL IfStatement", "DEL ArrayType: byte[]", "DEL SimpleName: entryOffset", "DEL VariableDeclarationFragment", "DEL Block", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: TarBuffer", "DEL VariableDeclarationStatement", "DEL SimpleName: skipped", "DEL NumberLiteral: 1024", "DEL Dimension", "DEL MethodInvocation", "DEL TagElement: @param", "DEL TagElement: @param", "DEL TextElement: Since we do not support marking just yet, we return false.", "DEL TextElement:  The next TarEntry in the archive, or null.", "DEL Block", "DEL TagElement: @param", "DEL SimpleName: output", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: buffer", "DEL SimpleName: message", "DEL TagElement: @throws", "DEL SimpleName: recordLength", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL PrimitiveType: byte", "DEL PrimitiveType: void", "DEL SimpleName: Override", "DEL Modifier: public", "DEL SimpleName: String", "DEL StringLiteral: \"  skipping \"", "DEL SimpleName: IOException", "DEL InfixExpression: *", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL Assignment: -=", "DEL PrimitiveType: void", "DEL SimpleName: entrySize", "DEL SimpleName: message", "DEL ForStatement", "DEL MethodDeclaration", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: longSkip", "DEL MethodDeclaration", "DEL Modifier: private", "DEL SimpleName: position", "DEL MarkerAnnotation", "DEL SimpleName: newBuffer", "DEL SimpleName: rec", "DEL SimpleName: num", "DEL SimpleType: InputStream", "DEL TextElement: entry's data if the number to skip extends beyond that point.", "DEL PrimitiveType: byte", "DEL MethodDeclaration", "DEL IfStatement", "DEL SimpleName: debug", "DEL PrimitiveType: long", "DEL StringLiteral: \" bytes\"", "DEL MethodInvocation", "DEL SimpleType: InputStream", "DEL TextElement: the boundaries of the current entry in the archive and will deal with", "DEL SimpleName: Override", "DEL Modifier: public", "DEL CastExpression", "DEL TagElement: @return", "DEL Assignment: -=", "DEL SimpleName: headerBuf", "DEL SimpleName: IOException", "DEL ExpressionStatement", "DEL TextElement:   The number of bytes to read.", "DEL SimpleName: mark", "DEL Block", "DEL TextElement:  when an IO error causes operation to fail", "DEL SimpleName: input", "DEL SimpleName: headerBuf", "DEL Assignment: =", "DEL SimpleName: buffer", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: numToSkip", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: readBuf", "DEL SimpleType: IOException", "DEL MarkerAnnotation", "DEL InfixExpression: -", "DEL PrefixExpression: -", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: length", "DEL QualifiedName: TarBuffer.DEFAULT_RECORDSIZE", "DEL VariableDeclarationFragment", "DEL TextElement: The TarInputStream reads a UNIX tar archive as an InputStream. methods are", "DEL SimpleName: input", "DEL TagElement", "DEL InfixExpression: >", "DEL PrimitiveType: int", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: size", "DEL NumberLiteral: 0", "DEL SimpleName: longName", "DEL TextElement:  <a href=\"http://commons.apache.org/vfs/team-list.html\">Commons VFS team</a>", "DEL SimpleName: getNextEntry", "DEL MemberRef", "DEL SimpleName: headerBuf", "DEL Block", "DEL QualifiedName: rec.length", "DEL MethodInvocation", "DEL SimpleName: buffer", "DEL Block", "DEL VariableDeclarationFragment", "DEL MemberRef", "DEL SimpleName: getRecordSize", "DEL SimpleType: OutputStream", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: readBuf", "DEL SimpleName: position", "DEL ReturnStatement", "DEL SimpleName: skipped", "DEL TagElement", "DEL ArrayType: byte[]", "DEL Modifier: final", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: buffer", "DEL PrefixExpression: !", "DEL PrimitiveType: void", "DEL SimpleName: length", "DEL IfStatement", "DEL Modifier: final", "DEL SimpleType: String", "DEL SimpleName: buffer", "DEL InfixExpression: +", "DEL MarkerAnnotation", "DEL Dimension", "DEL Javadoc", "DEL SimpleType: IOException", "DEL SimpleName: append", "DEL Block", "DEL SimpleName: numToSkip", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL SimpleName: input", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleType: FilterInputStream", "DEL SimpleName: num", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL QualifiedName: buffer.length", "DEL SimpleName: length", "DEL TextElement: output stream.", "DEL SimpleName: TarBuffer", "DEL FieldDeclaration", "DEL SimpleName: currEntry", "DEL WhileStatement", "DEL MarkerAnnotation", "DEL Modifier: final", "DEL Dimension", "DEL MethodInvocation", "DEL Assignment: +=", "DEL SimpleName: skipped", "DEL SimpleType: IOException", "DEL InfixExpression: >", "DEL VariableDeclarationFragment", "DEL SimpleName: numToSkip", "DEL InfixExpression: -", "DEL ClassInstanceCreation", "DEL TagElement: @return", "DEL SimpleName: position", "DEL TextElement: end of the archive has been reached.", "DEL SimpleName: entryOffset", "DEL NumberLiteral: 256", "DEL MethodDeclaration", "DEL SimpleName: totalRead", "DEL Block", "DEL SimpleName: num", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: input", "DEL NumberLiteral: 0", "DEL QualifiedName: readBuf.length", "DEL MarkerAnnotation", "DEL Dimension", "DEL BooleanLiteral: false", "DEL TextElement: read( byte[], int, int ).", "DEL Modifier: final", "DEL TextElement: Construct a TarInputStream using specified input", "DEL TextElement: Capable of being overidden in sub-classes.", "DEL SimpleName: recordLength", "DEL SimpleType: IOException", "DEL InfixExpression: !=", "DEL TextElement:       stream to create TarInputStream from", "DEL Block", "DEL TextElement:  the block size to use", "DEL InfixExpression: -", "DEL InfixExpression: -", "DEL SimpleName: input", "DEL ExpressionStatement", "DEL InfixExpression: -", "DEL NumberLiteral: 1", "DEL SimpleName: skipBuf", "DEL SimpleName: buffer", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL TextElement: the header of the next entry, and read the header and instantiate a new", "DEL PrimitiveType: int", "DEL SimpleName: read", "DEL SimpleName: buffer", "DEL SimpleType: String", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL QualifiedName: TarBuffer.DEFAULT_RECORDSIZE", "DEL Modifier: final", "DEL SimpleName: TarEntry", "DEL VariableDeclarationFragment", "DEL SimpleName: currEntry", "DEL SimpleName: FilterInputStream", "DEL SimpleType: IOException", "DEL Modifier: public", "DEL MethodInvocation", "DEL Block", "DEL TextElement: stream and default block and record sizes.", "DEL SimpleName: numToRead", "DEL PrimitiveType: void", "DEL StringLiteral: \"READ NULL RECORD\"", "DEL PrimitiveType: byte", "DEL InfixExpression: -", "DEL SimpleName: size", "DEL SimpleName: position", "DEL Javadoc", "DEL Block", "DEL PrimitiveType: int", "DEL SimpleName: recordSize", "DEL VariableDeclarationStatement", "DEL Block", "DEL NumberLiteral: 1024", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL PrimitiveType: byte", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleName: numToSkip", "DEL SimpleName: input", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: arraycopy", "DEL SimpleName: read", "DEL Javadoc", "DEL SimpleName: recordLength", "DEL InfixExpression: &&", "DEL SimpleName: recordSize", "DEL TextElement:  stream to create TarInputStream from", "DEL SimpleType: StringBuffer", "DEL ExpressionStatement", "DEL InfixExpression: -", "DEL SimpleName: buffer", "DEL TagElement: @see", "DEL SimpleName: TarInputStream", "DEL SimpleType: IOException", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: close", "DEL MarkerAnnotation", "DEL TextElement:  when an IO error causes operation to fail", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL SimpleName: message", "DEL SimpleName: arraycopy", "DEL VariableDeclarationExpression", "DEL SimpleName: numToSkip", "DEL SimpleName: close", "DEL QualifiedName: Integer.MAX_VALUE", "DEL PrimitiveType: byte", "DEL PrimitiveType: byte", "DEL WhileStatement", "DEL SimpleName: buffer", "DEL ExpressionStatement", "DEL SimpleName: currEntry", "DEL InfixExpression: &&", "DEL Block", "DEL SimpleName: input", "DEL Assignment: +=", "DEL ExpressionStatement", "DEL SimpleName: numToRead", "DEL SimpleName: length", "DEL VariableDeclarationStatement", "DEL SimpleName: StringBuffer", "DEL ExpressionStatement", "DEL SimpleName: input", "DEL SimpleName: Override", "DEL Assignment: =", "DEL Javadoc", "DEL SimpleName: str", "DEL SimpleName: length", "DEL QualifiedName: readBuf.length", "DEL Assignment: +=", "DEL SimpleName: read", "DEL TagElement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL PrimitiveType: long", "DEL Block", "DEL SimpleName: entryOffset", "DEL SimpleName: entryOffset", "DEL NumberLiteral: 0", "DEL SimpleName: TarBuffer", "DEL TagElement: @param", "DEL Assignment: =", "DEL Modifier: final", "DEL TagElement: @param", "DEL InfixExpression: +", "DEL SimpleName: TarEntry", "DEL TagElement", "DEL SimpleName: recordLength", "DEL ExpressionStatement", "DEL SimpleName: entrySize", "DEL ArrayType: byte[]", "DEL QualifiedName: Integer.MAX_VALUE", "DEL SimpleName: message", "DEL VariableDeclarationFragment", "DEL TagElement: @throws", "DEL MethodDeclaration", "DEL SimpleName: numToRead", "DEL Block", "DEL TagElement", "DEL Block", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: TarInputStream", "DEL SimpleName: headerBuf", "DEL Modifier: final", "DEL SimpleName: isGNULongNameEntry", "DEL PrimitiveType: int", "DEL SimpleName: buffer", "DEL SimpleName: buffer", "DEL SimpleName: skipped", "DEL ConstructorInvocation", "DEL ParenthesizedExpression", "DEL MethodDeclaration", "DEL TextElement:  The new Debug value", "DEL ArrayAccess", "DEL MethodInvocation", "DEL ArrayType: byte[]", "DEL NullLiteral", "DEL SimpleName: entrySize", "DEL NullLiteral", "DEL SimpleName: System", "DEL Block", "DEL SimpleName: skip", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 261", "DEL SimpleName: longSkip", "DEL TextElement: TarEntry from the header bytes and return that entry. If there are no", "DEL Assignment: =", "DEL InfixExpression: &&", "DEL WhileStatement", "DEL ExpressionStatement", "DEL NumberLiteral: 1", "DEL SimpleName: debug", "DEL TextElement:      stream to create TarInputStream from", "DEL Modifier: final", "DEL TextElement: more entries in the archive, null will be returned to indicate that the", "DEL TextElement: stream, block size and record sizes.", "DEL TextElement:  False.", "DEL SingleVariableDeclaration", "DEL SimpleName: IOException", "DEL Modifier: private", "DEL SimpleName: DEFAULT_BLOCKSIZE", "DEL Modifier: private", "DEL Assignment: =", "DEL Dimension", "DEL SimpleName: IOException", "DEL TextElement:   the block size to use", "DEL TagElement", "DEL IfStatement", "DEL Assignment: =", "DEL SimpleType: InputStream", "DEL VariableDeclarationFragment", "DEL Block", "DEL CharacterLiteral: 'u'", "DEL SimpleName: size", "DEL SimpleName: charAt", "DEL SimpleName: rec", "DEL MethodInvocation", "DEL SimpleName: headerBuf", "DEL SimpleName: count", "DEL SimpleName: read", "DEL SimpleName: readBuf", "DEL SimpleName: currEntry", "DEL SimpleName: TarInputStream", "DEL SimpleName: debug", "DEL Block", "DEL MethodInvocation", "DEL TagElement: @return", "DEL SimpleName: skipBuf", "DEL NumberLiteral: 259", "DEL TextElement: Get the record size being used by this stream's TarBuffer.", "DEL SimpleName: markLimit", "DEL PrimitiveType: long", "DEL SimpleName: readBuf", "DEL TagElement: @param", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL Block", "DEL TagElement: @param", "DEL NumberLiteral: 257", "DEL InfixExpression: !=", "DEL SimpleName: offset", "DEL VariableDeclarationFragment", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: numToSkip", "DEL Modifier: final", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: totalRead", "DEL ArrayCreation", "DEL SimpleName: readRecord", "DEL IfStatement", "DEL SimpleName: entryOffset", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: position", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodDeclaration", "DEL FieldDeclaration", "DEL SimpleName: entrySize", "DEL SimpleName: newBuffer", "DEL SimpleName: size", "DEL IfStatement", "DEL SimpleName: copyEntryContents", "DEL SimpleName: blockSize", "DEL SimpleName: num", "DEL TagElement: @see", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL InfixExpression: <", "DEL NumberLiteral: 32", "DEL Modifier: private", "DEL SimpleName: read", "DEL QualifiedName: Integer.MAX_VALUE", "DEL SimpleName: buffer", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: IOException", "DEL SimpleName: debug", "DEL Assignment: =", "DEL SimpleName: readBuf", "DEL Dimension", "DEL NumberLiteral: 0", "DEL SimpleName: numToSkip", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: blockSize", "DEL BooleanLiteral: true", "DEL TextElement:  The OutputStream into which to write the entry's data.", "DEL SimpleName: skipped", "DEL InfixExpression: +", "DEL InfixExpression: !=", "DEL ParenthesizedExpression", "DEL PrimitiveType: void", "DEL Dimension", "DEL VariableDeclarationStatement", "DEL TagElement: @return", "DEL NullLiteral", "DEL CharacterLiteral: 't'", "DEL Block", "DEL Dimension", "DEL PrefixExpression: -", "DEL Block", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: IOException", "DEL SimpleName: TarBuffer", "DEL Javadoc", "DEL Modifier: final", "DEL SimpleName: count", "DEL PrimitiveType: void", "DEL TextElement: entry's size header field and the amount of data already read from the", "DEL SimpleName: System", "DEL TagElement: @param", "DEL TagElement", "DEL Modifier: final", "DEL ExpressionStatement", "DEL Assignment: +=", "DEL TextElement:  The number of available bytes for the current entry.", "DEL SimpleName: buffer", "DEL TextElement: Reads bytes from the current tar archive entry. This method is aware of", "DEL InfixExpression: ==", "DEL NumberLiteral: 1", "DEL SimpleName: newLength", "DEL SimpleName: size", "DEL Modifier: final", "DEL Assignment: =", "DEL SimpleType: StringBuffer", "DEL SimpleName: arraycopy", "DEL SimpleType: IOException", "DEL ExpressionStatement", "DEL SimpleName: oneBuf", "DEL TagElement", "DEL SimpleName: IOException", "DEL QualifiedName: Integer.MAX_VALUE", "DEL SimpleName: InputStream", "DEL NumberLiteral: 0", "DEL TextElement: archive, only in the current entry. This value is determined from the", "DEL SimpleName: IOException", "DEL SimpleName: numToRead", "DEL FieldDeclaration", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL InfixExpression: >=", "DEL NullLiteral", "DEL SimpleName: input", "DEL MethodInvocation", "DEL SimpleName: setName", "DEL SimpleName: debug", "DEL SimpleName: IOException", "DEL CastExpression", "DEL SimpleName: longName", "DEL SimpleName: arraycopy", "DEL SimpleName: TarInputStream", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL TagElement: @author", "DEL SimpleName: currEntry", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL WhileStatement", "DEL InfixExpression: >=", "DEL SimpleName: numToRead", "DEL Javadoc", "DEL SimpleName: count", "DEL SimpleName: size", "DEL TagElement", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL Modifier: final", "DEL InfixExpression: >", "DEL StringLiteral: \"' SZ \"", "DEL ExpressionStatement", "DEL ArrayAccess", "DEL Block", "DEL PrimitiveType: byte", "DEL InfixExpression: >", "DEL NullLiteral", "DEL SimpleName: entrySize", "DEL SimpleName: hasHitEOF", "DEL SimpleName: totalRead", "DEL Block", "DEL ArrayCreation", "DEL SimpleName: totalRead", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL TextElement: each entry as a normal input stream using read().", "DEL SimpleName: String", "DEL NumberLiteral: 0", "DEL PrimitiveType: int", "DEL TagElement: @param", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL ConstructorInvocation", "DEL SimpleName: numToRead", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL ArrayAccess", "DEL TextElement:  the record size to use", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL SimpleName: message", "DEL NumberLiteral: 0", "DEL SimpleName: longName", "DEL Block", "DEL PrimitiveType: boolean", "DEL SimpleName: rec", "DEL Block", "DEL NumberLiteral: 8", "DEL SimpleName: debug", "DEL NullLiteral", "DEL ThisExpression", "DEL ExpressionStatement", "DEL TagElement", "DEL InfixExpression: ==", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: readBuf", "DEL TextElement:  Description of Exception", "DEL TextElement: Skip bytes in the input buffer. This skips bytes in the current entry's", "DEL SimpleName: headerBuf", "DEL Block", "DEL SimpleName: message", "DEL ArrayAccess", "DEL PrimitiveType: byte", "DEL ExpressionStatement", "DEL InfixExpression: *", "DEL SimpleName: message", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: entrySize", "DEL NumberLiteral: 0", "DEL TagElement: @throws", "DEL SimpleName: debug", "DEL SimpleName: entrySize", "DEL Block", "DEL SimpleName: size", "DEL SimpleName: IOException", "DEL PrimitiveType: int", "DEL SimpleName: deleteCharAt", "DEL TagElement: @see", "DEL Modifier: final", "DEL CharacterLiteral: 's'", "DEL Block", "DEL PrimitiveType: int", "DEL ArrayType: byte[]", "DEL PrimitiveType: byte", "DEL InfixExpression: -", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TextElement:  when an IO error causes operation to fail", "DEL NumberLiteral: 0", "DEL SimpleName: readBuf", "DEL ParenthesizedExpression", "DEL SimpleName: recordLength", "DEL SimpleName: TarInputStream", "DEL FieldDeclaration", "DEL InfixExpression: ==", "DEL ArrayType: byte[]", "DEL TextElement: Construct a TarInputStream using specified input", "DEL SimpleName: output", "DEL SimpleName: remaining", "DEL Block", "DEL SimpleName: size", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL TagElement", "DEL NumberLiteral: 1", "DEL Dimension", "DEL SimpleName: skip", "DEL Javadoc", "DEL InfixExpression: ==", "DEL SimpleType: TarBuffer", "DEL SimpleName: recordSize", "DEL Block", "DEL SimpleName: numRead", "DEL TextElement:  when an IO error causes operation to fail", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: blockSize", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"READ EOF RECORD\"", "DEL ArrayType: byte[]", "DEL Modifier: protected", "DEL SimpleName: longName", "DEL SimpleName: numToRead", "DEL Block", "DEL InfixExpression: >", "DEL SimpleName: numToSkip", "DEL SimpleName: buffer", "DEL QualifiedName: buffer.length", "DEL SimpleName: Override", "DEL InfixExpression: +", "DEL TextElement: Sets the debugging flag.", "DEL VariableDeclarationFragment", "DEL TextElement:  The TarBuffer record size.", "DEL SimpleName: System", "DEL ThrowStatement", "DEL SimpleType: TarBuffer", "DEL StringLiteral: \"TarInputStream: SKIP currENTRY '\"", "DEL Block", "DEL IfStatement", "DEL ReturnStatement", "DEL SimpleName: numToSkip", "DEL SimpleName: longName", "DEL Javadoc", "DEL ArrayAccess", "DEL NumberLiteral: 1", "DEL InfixExpression: ==", "DEL SimpleName: size", "DEL FieldDeclaration", "DEL SimpleName: IOException", "DEL VariableDeclarationFragment", "DEL PrimitiveType: byte", "DEL CharacterLiteral: 'a'", "DEL SimpleName: debug", "DEL NumberLiteral: 0", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 0", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL TextElement: Utility method to do debugging.", "DEL Assignment: +=", "DEL SimpleName: headerBuf", "DEL TextElement:  The buffer into which to place bytes read.", "DEL SimpleName: Override", "DEL SimpleName: size", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL PrimitiveType: int", "DEL TextElement:  The buffer into which to place bytes read.", "DEL SimpleName: num", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL ArrayType: byte[]", "DEL TagElement: @return", "DEL BreakStatement", "DEL SimpleName: count", "DEL Modifier: public", "DEL PrimitiveType: boolean", "DEL PrimitiveType: int", "DEL InfixExpression: ==", "DEL Javadoc", "DEL SimpleName: TarEntry", "DEL Modifier: public", "DEL PrimitiveType: long", "DEL PrefixExpression: -", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: IOException", "DEL SimpleType: IOException", "DEL SimpleName: IOException", "DEL SimpleName: StringBuffer", "DEL SimpleName: debug", "DEL TextElement:  when an IO error causes operation to fail", "DEL SimpleName: currEntry", "DEL IfStatement", "DEL SimpleType: IOException", "DEL SimpleName: getName", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL ReturnStatement", "DEL SimpleType: IOException", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL TagElement: @param", "DEL PrimitiveType: byte", "DEL SimpleName: println", "DEL SimpleName: skip", "DEL MethodInvocation", "DEL TextElement: Construct a TarInputStream using specified input", "DEL SimpleName: longName", "DEL SimpleName: debug", "DEL MethodInvocation", "DEL SimpleName: totalRead", "DEL ParenthesizedExpression", "DEL VariableDeclarationFragment", "DEL TagElement: @return", "DEL InfixExpression: >", "DEL StringLiteral: \"TarInputStream: SET CURRENTRY '\"", "DEL TextElement: archive. This does not indicate how much data is left in the entire", "DEL Modifier: final", "DEL TagElement: @throws", "DEL ExpressionStatement", "DEL NullLiteral", "DEL IfStatement", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL SimpleName: readBuf", "DEL SimpleName: size", "DEL ExpressionStatement", "DEL ArrayCreation", "DEL QualifiedName: skipBuf.length", "DEL SimpleName: entryOffset", "DEL Assignment: =", "DEL Block", "DEL ParenthesizedExpression", "DEL BreakStatement", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL ParenthesizedExpression", "DEL Modifier: public", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL InfixExpression: -", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: debug", "DEL SimpleName: recordLength", "DEL TagElement: @throws", "DEL Block", "DEL SimpleName: blockSize", "DEL SimpleName: TarEntry", "DEL StringLiteral: \" bytes unread\"", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: getSize", "DEL SimpleName: size", "DEL QualifiedName: skipBuf.length", "DEL ArrayAccess", "DEL TagElement: @throws", "DEL ArrayType: byte[]", "DEL ArrayType: byte[]", "DEL SimpleName: buffer", "DEL SimpleName: longName", "DEL SimpleName: readRecord", "DEL NumberLiteral: 258", "DEL Dimension", "DEL SimpleName: newLength", "DEL ClassInstanceCreation", "DEL Block", "DEL PrimitiveType: byte", "DEL StringLiteral: \"unexpected EOF with \"", "DEL SimpleName: String", "DEL TextElement: data, not the entire archive, and will stop at the end of the current", "DEL MethodInvocation", "DEL SimpleName: oneBuf", "DEL NumberLiteral: 0", "DEL SimpleName: TarBuffer", "DEL SimpleType: String", "DEL TagElement: @return", "DEL NumberLiteral: 260", "DEL SimpleType: String", "DEL SimpleName: numToRead", "DEL SimpleName: read", "DEL SimpleName: IOException", "DEL SimpleName: InputStream", "DEL ArrayCreation", "DEL SimpleName: size", "DEL Dimension", "DEL SimpleName: currEntry", "DEL ReturnStatement", "DEL SimpleName: skipped", "DEL PrimitiveType: byte", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL ArrayType: byte[]", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TextElement:  The limit to mark.", "DEL SimpleName: rec", "DEL ArrayType: byte[]", "DEL BooleanLiteral: true", "DEL Modifier: final", "DEL SimpleName: num", "DEL SimpleName: numRead", "DEL SimpleName: numRead", "DEL NumberLiteral: 1", "DEL SimpleName: message", "DEL TagElement", "DEL Modifier: public", "DEL TextElement: Get the available data that can be read from the current entry in the", "DEL NumberLiteral: 0", "DEL Block", "DEL InfixExpression: -", "DEL SimpleName: newLength", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: blockSize", "DEL SimpleName: getRecordSize", "DEL Block", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL MarkerAnnotation", "DEL Assignment: =", "DEL SimpleName: arraycopy", "DEL Modifier: final", "DEL SimpleName: size", "DEL Block", "DEL Block", "DEL SingleVariableDeclaration"]}]}}, {"TarInputStream_diff": {"operations": ["Delete QualifiedName: org.apache.commons.vfs2.provider.tar(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.io.FilterInputStream(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.io.IOException(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.io.InputStream(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.io.OutputStream(8)", "Delete ImportDeclaration(9)", "Delete TextElement: The TarInputStream reads a UNIX tar archive as an InputStream. methods are(10)", "Delete TextElement: provided to position at each successive entry in the archive, and the read(11)", "Delete TextElement: each entry as a normal input stream using read().(12)", "Delete TagElement(13)", "Delete TextElement:  <a href=\"http://commons.apache.org/vfs/team-list.html\">Commons VFS team</a>(14)", "Delete TagElement: @author(15)", "Delete SimpleName: TarInputStream(16)", "Delete TagElement: @see(17)", "Delete SimpleName: TarEntry(18)", "Delete TagElement: @see(19)", "Delete Javadoc(20)", "Delete SimpleName: TarInputStream(21)", "Delete SimpleName: FilterInputStream(22)", "Delete SimpleType: FilterInputStream(23)", "Delete Modifier: private(24)", "Delete SimpleName: TarBuffer(25)", "Delete SimpleType: TarBuffer(26)", "Delete SimpleName: buffer(27)", "Delete VariableDeclarationFragment(28)", "Delete FieldDeclaration(29)", "Delete Modifier: private(30)", "Delete SimpleName: TarEntry(31)", "Delete SimpleType: TarEntry(32)", "Delete SimpleName: currEntry(33)", "Delete VariableDeclarationFragment(34)", "Delete FieldDeclaration(35)", "Delete Modifier: private(36)", "Delete PrimitiveType: boolean(37)", "Delete SimpleName: debug(38)", "Delete VariableDeclarationFragment(39)", "Delete FieldDeclaration(40)", "Delete Modifier: private(41)", "Delete PrimitiveType: int(42)", "Delete SimpleName: entryOffset(43)", "Delete VariableDeclarationFragment(44)", "Delete FieldDeclaration(45)", "Delete Modifier: private(46)", "Delete PrimitiveType: long(47)", "Delete SimpleName: entrySize(48)", "Delete VariableDeclarationFragment(49)", "Delete FieldDeclaration(50)", "Delete Modifier: private(51)", "Delete PrimitiveType: boolean(52)", "Delete SimpleName: hasHitEOF(53)", "Delete VariableDeclarationFragment(54)", "Delete FieldDeclaration(55)", "Delete Modifier: private(56)", "Delete PrimitiveType: byte(57)", "Delete Dimension(58)", "Delete ArrayType: byte[](59)", "Delete SimpleName: oneBuf(60)", "Delete VariableDeclarationFragment(61)", "Delete FieldDeclaration(62)", "Delete Modifier: private(63)", "Delete PrimitiveType: byte(64)", "Delete Dimension(65)", "Delete ArrayType: byte[](66)", "Delete SimpleName: readBuf(67)", "Delete VariableDeclarationFragment(68)", "Delete FieldDeclaration(69)", "Delete TextElement: Construct a TarInputStream using specified input(70)", "Delete TextElement: stream and default block and record sizes.(71)", "Delete TagElement(72)", "Delete SimpleName: input(73)", "Delete TextElement:  stream to create TarInputStream from(74)", "Delete TagElement: @param(75)", "Delete SimpleName: TarBuffer(76)", "Delete SimpleName: DEFAULT_BLOCKSIZE(77)", "Delete MemberRef(78)", "Delete TagElement: @see(79)", "Delete SimpleName: TarBuffer(80)", "Delete SimpleName: DEFAULT_RECORDSIZE(81)", "Delete MemberRef(82)", "Delete TagElement: @see(83)", "Delete Javadoc(84)", "Delete SimpleName: TarInputStream(85)", "Delete Modifier: final(86)", "Delete SimpleName: InputStream(87)", "Delete SimpleType: InputStream(88)", "Delete SimpleName: input(89)", "Delete SingleVariableDeclaration(90)", "Delete SimpleName: input(91)", "Delete QualifiedName: TarBuffer.DEFAULT_BLOCKSIZE(92)", "Delete QualifiedName: TarBuffer.DEFAULT_RECORDSIZE(93)", "Delete ConstructorInvocation(94)", "Delete Block(95)", "Delete MethodDeclaration(96)", "Delete TextElement: Construct a TarInputStream using specified input(97)", "Delete TextElement: stream, block size and default record sizes.(98)", "Delete TagElement(99)", "Delete SimpleName: input(100)", "Delete TextElement:      stream to create TarInputStream from(101)", "Delete TagElement: @param(102)", "Delete SimpleName: blockSize(103)", "Delete TextElement:  the block size to use(104)", "Delete TagElement: @param(105)", "Delete SimpleName: TarBuffer(106)", "Delete SimpleName: DEFAULT_RECORDSIZE(107)", "Delete MemberRef(108)", "Delete TagElement: @see(109)", "Delete Javadoc(110)", "Delete SimpleName: TarInputStream(111)", "Delete Modifier: final(112)", "Delete SimpleName: InputStream(113)", "Delete SimpleType: InputStream(114)", "Delete SimpleName: input(115)", "Delete SingleVariableDeclaration(116)", "Delete Modifier: final(117)", "Delete PrimitiveType: int(118)", "Delete SimpleName: blockSize(119)", "Delete SingleVariableDeclaration(120)", "Delete SimpleName: input(121)", "Delete SimpleName: blockSize(122)", "Delete QualifiedName: TarBuffer.DEFAULT_RECORDSIZE(123)", "Delete ConstructorInvocation(124)", "Delete Block(125)", "Delete MethodDeclaration(126)", "Delete TextElement: Construct a TarInputStream using specified input(127)", "Delete TextElement: stream, block size and record sizes.(128)", "Delete TagElement(129)", "Delete SimpleName: input(130)", "Delete TextElement:       stream to create TarInputStream from(131)", "Delete TagElement: @param(132)", "Delete SimpleName: blockSize(133)", "Delete TextElement:   the block size to use(134)", "Delete TagElement: @param(135)", "Delete SimpleName: recordSize(136)", "Delete TextElement:  the record size to use(137)", "Delete TagElement: @param(138)", "Delete Javadoc(139)", "Delete SimpleName: TarInputStream(140)", "Delete Modifier: final(141)", "Delete SimpleName: InputStream(142)", "Delete SimpleType: InputStream(143)", "Delete SimpleName: input(144)", "Delete SingleVariableDeclaration(145)", "Delete Modifier: final(146)", "Delete PrimitiveType: int(147)", "Delete SimpleName: blockSize(148)", "Delete SingleVariableDeclaration(149)", "Delete Modifier: final(150)", "Delete PrimitiveType: int(151)", "Delete SimpleName: recordSize(152)", "Delete SingleVariableDeclaration(153)", "Delete SimpleName: input(154)", "Delete SuperConstructorInvocation(155)", "Delete SimpleName: buffer(156)", "Delete SimpleName: TarBuffer(157)", "Delete SimpleType: TarBuffer(158)", "Delete SimpleName: input(159)", "Delete SimpleName: blockSize(160)", "Delete SimpleName: recordSize(161)", "Delete ClassInstanceCreation(162)", "Delete Assignment: =(163)", "Delete ExpressionStatement(164)", "Delete SimpleName: oneBuf(165)", "Delete PrimitiveType: byte(166)", "Delete Dimension(167)", "Delete ArrayType: byte[](168)", "Delete NumberLiteral: 1(169)", "Delete ArrayCreation(170)", "Delete Assignment: =(171)", "Delete ExpressionStatement(172)", "Delete Block(173)", "Delete MethodDeclaration(174)", "Delete TextElement: Sets the debugging flag.(175)", "Delete TagElement(176)", "Delete SimpleName: debug(177)", "Delete TextElement:  The new Debug value(178)", "Delete TagElement: @param(179)", "Delete Javadoc(180)", "Delete Modifier: public(181)", "Delete PrimitiveType: void(182)", "Delete SimpleName: setDebug(183)", "Delete Modifier: final(184)", "Delete PrimitiveType: boolean(185)", "Delete SimpleName: debug(186)", "Delete SingleVariableDeclaration(187)", "Delete ThisExpression(188)", "Delete SimpleName: debug(189)", "Delete FieldAccess(190)", "Delete SimpleName: debug(191)", "Delete Assignment: =(192)", "Delete ExpressionStatement(193)", "Delete SimpleName: buffer(194)", "Delete SimpleName: setDebug(195)", "Delete SimpleName: debug(196)", "Delete MethodInvocation(197)", "Delete ExpressionStatement(198)", "Delete Block(199)", "Delete MethodDeclaration(200)", "Delete TextElement: Get the next entry in this tar archive. This will skip over any remaining(201)", "Delete TextElement: data in the current entry, if there is one, and place the input stream at(202)", "Delete TextElement: the header of the next entry, and read the header and instantiate a new(203)", "Delete TextElement: TarEntry from the header bytes and return that entry. If there are no(204)", "Delete TextElement: more entries in the archive, null will be returned to indicate that the(205)", "Delete TextElement: end of the archive has been reached.(206)", "Delete TagElement(207)", "Delete TextElement:  The next TarEntry in the archive, or null.(208)", "Delete TagElement: @return(209)", "Delete SimpleName: IOException(210)", "Delete TextElement:  Description of Exception(211)", "Delete TagElement: @throws(212)", "Delete Javadoc(213)", "Delete Modifier: public(214)", "Delete SimpleName: TarEntry(215)", "Delete SimpleType: TarEntry(216)", "Delete SimpleName: getNextEntry(217)", "Delete SimpleName: IOException(218)", "Delete SimpleType: IOException(219)", "Delete SimpleName: hasHitEOF(220)", "Delete NullLiteral(221)", "Delete ReturnStatement(222)", "Delete Block(223)", "Delete IfStatement(224)", "Delete SimpleName: currEntry(225)", "Delete NullLiteral(226)", "Delete InfixExpression: !=(227)", "Delete Modifier: final(228)", "Delete PrimitiveType: long(229)", "Delete SimpleName: numToSkip(230)", "Delete SimpleName: entrySize(231)", "Delete SimpleName: entryOffset(232)", "Delete InfixExpression: -(233)", "Delete VariableDeclarationFragment(234)", "Delete VariableDeclarationStatement(235)", "Delete SimpleName: debug(236)", "Delete Modifier: final(237)", "Delete SimpleName: String(238)", "Delete SimpleType: String(239)", "Delete SimpleName: message(240)", "Delete StringLiteral: \"TarInputStream: SKIP currENTRY '\"(241)", "Delete SimpleName: currEntry(242)", "Delete SimpleName: getName(243)", "Delete MethodInvocation(244)", "Delete StringLiteral: \"' SZ \"(245)", "Delete SimpleName: entrySize(246)", "Delete StringLiteral: \" OFF \"(247)", "Delete SimpleName: entryOffset(248)", "Delete StringLiteral: \"  skipping \"(249)", "Delete SimpleName: numToSkip(250)", "Delete StringLiteral: \" bytes\"(251)", "Delete InfixExpression: +(252)", "Delete VariableDeclarationFragment(253)", "Delete VariableDeclarationStatement(254)", "Delete SimpleName: debug(255)", "Delete SimpleName: message(256)", "Delete MethodInvocation(257)", "Delete ExpressionStatement(258)", "Delete Block(259)", "Delete IfStatement(260)", "Delete SimpleName: numToSkip(261)", "Delete NumberLiteral: 0(262)", "Delete InfixExpression: >(263)", "Delete SimpleName: longSkip(264)", "Delete SimpleName: numToSkip(265)", "Delete MethodInvocation(266)", "Delete ExpressionStatement(267)", "Delete Block(268)", "Delete IfStatement(269)", "Delete SimpleName: readBuf(270)", "Delete NullLiteral(271)", "Delete Assignment: =(272)", "Delete ExpressionStatement(273)", "Delete Block(274)", "Delete IfStatement(275)", "Delete Modifier: final(276)", "Delete PrimitiveType: byte(277)", "Delete Dimension(278)", "Delete ArrayType: byte[](279)", "Delete SimpleName: headerBuf(280)", "Delete SimpleName: buffer(281)", "Delete SimpleName: readRecord(282)", "Delete MethodInvocation(283)", "Delete VariableDeclarationFragment(284)", "Delete VariableDeclarationStatement(285)", "Delete SimpleName: headerBuf(286)", "Delete NullLiteral(287)", "Delete InfixExpression: ==(288)", "Delete SimpleName: debug(289)", "Delete SimpleName: debug(290)", "Delete StringLiteral: \"READ NULL RECORD\"(291)", "Delete MethodInvocation(292)", "Delete ExpressionStatement(293)", "Delete Block(294)", "Delete IfStatement(295)", "Delete SimpleName: hasHitEOF(296)", "Delete BooleanLiteral: true(297)", "Delete Assignment: =(298)", "Delete ExpressionStatement(299)", "Delete SimpleName: currEntry(300)", "Delete NullLiteral(301)", "Delete Assignment: =(302)", "Delete ExpressionStatement(303)", "Delete Block(304)", "Delete SimpleName: buffer(305)", "Delete SimpleName: isEOFRecord(306)", "Delete SimpleName: headerBuf(307)", "Delete MethodInvocation(308)", "Delete SimpleName: debug(309)", "Delete SimpleName: debug(310)", "Delete StringLiteral: \"READ EOF RECORD\"(311)", "Delete MethodInvocation(312)", "Delete ExpressionStatement(313)", "Delete Block(314)", "Delete IfStatement(315)", "Delete SimpleName: hasHitEOF(316)", "Delete BooleanLiteral: true(317)", "Delete Assignment: =(318)", "Delete ExpressionStatement(319)", "Delete SimpleName: currEntry(320)", "Delete NullLiteral(321)", "Delete Assignment: =(322)", "Delete ExpressionStatement(323)", "Delete Block(324)", "Delete SimpleName: currEntry(325)", "Delete SimpleName: TarEntry(326)", "Delete SimpleType: TarEntry(327)", "Delete SimpleName: headerBuf(328)", "Delete ClassInstanceCreation(329)", "Delete Assignment: =(330)", "Delete ExpressionStatement(331)", "Delete SimpleName: headerBuf(332)", "Delete NumberLiteral: 257(333)", "Delete ArrayAccess(334)", "Delete CharacterLiteral: 'u'(335)", "Delete InfixExpression: ==(336)", "Delete SimpleName: headerBuf(337)", "Delete NumberLiteral: 258(338)", "Delete ArrayAccess(339)", "Delete CharacterLiteral: 's'(340)", "Delete InfixExpression: ==(341)", "Delete InfixExpression: &&(342)", "Delete SimpleName: headerBuf(343)", "Delete NumberLiteral: 259(344)", "Delete ArrayAccess(345)", "Delete CharacterLiteral: 't'(346)", "Delete InfixExpression: ==(347)", "Delete InfixExpression: &&(348)", "Delete SimpleName: headerBuf(349)", "Delete NumberLiteral: 260(350)", "Delete ArrayAccess(351)", "Delete CharacterLiteral: 'a'(352)", "Delete InfixExpression: ==(353)", "Delete InfixExpression: &&(354)", "Delete SimpleName: headerBuf(355)", "Delete NumberLiteral: 261(356)", "Delete ArrayAccess(357)", "Delete CharacterLiteral: 'r'(358)", "Delete InfixExpression: ==(359)", "Delete InfixExpression: &&(360)", "Delete ParenthesizedExpression(361)", "Delete PrefixExpression: !(362)", "Delete Block(363)", "Delete IfStatement(364)", "Delete SimpleName: debug(365)", "Delete Modifier: final(366)", "Delete SimpleName: String(367)", "Delete SimpleType: String(368)", "Delete SimpleName: message(369)", "Delete StringLiteral: \"TarInputStream: SET CURRENTRY '\"(370)", "Delete SimpleName: currEntry(371)", "Delete SimpleName: getName(372)", "Delete MethodInvocation(373)", "Delete StringLiteral: \"' size = \"(374)", "Delete SimpleName: currEntry(375)", "Delete SimpleName: getSize(376)", "Delete MethodInvocation(377)", "Delete InfixExpression: +(378)", "Delete VariableDeclarationFragment(379)", "Delete VariableDeclarationStatement(380)", "Delete SimpleName: debug(381)", "Delete SimpleName: message(382)", "Delete MethodInvocation(383)", "Delete ExpressionStatement(384)", "Delete Block(385)", "Delete IfStatement(386)", "Delete SimpleName: entryOffset(387)", "Delete NumberLiteral: 0(388)", "Delete Assignment: =(389)", "Delete ExpressionStatement(390)", "Delete SimpleName: entrySize(391)", "Delete SimpleName: currEntry(392)", "Delete SimpleName: getSize(393)", "Delete MethodInvocation(394)", "Delete Assignment: =(395)", "Delete ExpressionStatement(396)", "Delete Block(397)", "Delete IfStatement(398)", "Delete IfStatement(399)", "Delete NullLiteral(400)", "Delete SimpleName: currEntry(401)", "Delete InfixExpression: !=(402)", "Delete SimpleName: currEntry(403)", "Delete SimpleName: isGNULongNameEntry(404)", "Delete MethodInvocation(405)", "Delete InfixExpression: &&(406)", "Delete Modifier: final(407)", "Delete SimpleName: StringBuffer(408)", "Delete SimpleType: StringBuffer(409)", "Delete SimpleName: longName(410)", "Delete SimpleName: StringBuffer(411)", "Delete SimpleType: StringBuffer(412)", "Delete ClassInstanceCreation(413)", "Delete VariableDeclarationFragment(414)", "Delete VariableDeclarationStatement(415)", "Delete Modifier: final(416)", "Delete PrimitiveType: byte(417)", "Delete Dimension(418)", "Delete ArrayType: byte[](419)", "Delete SimpleName: buffer(420)", "Delete PrimitiveType: byte(421)", "Delete Dimension(422)", "Delete ArrayType: byte[](423)", "Delete NumberLiteral: 256(424)", "Delete ArrayCreation(425)", "Delete VariableDeclarationFragment(426)", "Delete VariableDeclarationStatement(427)", "Delete PrimitiveType: int(428)", "Delete SimpleName: length(429)", "Delete NumberLiteral: 0(430)", "Delete VariableDeclarationFragment(431)", "Delete VariableDeclarationStatement(432)", "Delete SimpleName: length(433)", "Delete SimpleName: read(434)", "Delete SimpleName: buffer(435)", "Delete MethodInvocation(436)", "Delete Assignment: =(437)", "Delete ParenthesizedExpression(438)", "Delete NumberLiteral: 0(439)", "Delete InfixExpression: >=(440)", "Delete Modifier: final(441)", "Delete SimpleName: String(442)", "Delete SimpleType: String(443)", "Delete SimpleName: str(444)", "Delete SimpleName: String(445)", "Delete SimpleType: String(446)", "Delete SimpleName: buffer(447)", "Delete NumberLiteral: 0(448)", "Delete SimpleName: length(449)", "Delete ClassInstanceCreation(450)", "Delete VariableDeclarationFragment(451)", "Delete VariableDeclarationStatement(452)", "Delete SimpleName: longName(453)", "Delete SimpleName: append(454)", "Delete SimpleName: str(455)", "Delete MethodInvocation(456)", "Delete ExpressionStatement(457)", "Delete Block(458)", "Delete WhileStatement(459)", "Delete SimpleName: getNextEntry(460)", "Delete MethodInvocation(461)", "Delete ExpressionStatement(462)", "Delete SimpleName: longName(463)", "Delete SimpleName: length(464)", "Delete MethodInvocation(465)", "Delete NumberLiteral: 0(466)", "Delete InfixExpression: >(467)", "Delete SimpleName: longName(468)", "Delete SimpleName: charAt(469)", "Delete SimpleName: longName(470)", "Delete SimpleName: length(471)", "Delete MethodInvocation(472)", "Delete NumberLiteral: 1(473)", "Delete InfixExpression: -(474)", "Delete MethodInvocation(475)", "Delete NumberLiteral: 0(476)", "Delete InfixExpression: ==(477)", "Delete InfixExpression: &&(478)", "Delete SimpleName: longName(479)", "Delete SimpleName: deleteCharAt(480)", "Delete SimpleName: longName(481)", "Delete SimpleName: length(482)", "Delete MethodInvocation(483)", "Delete NumberLiteral: 1(484)", "Delete InfixExpression: -(485)", "Delete MethodInvocation(486)", "Delete ExpressionStatement(487)", "Delete Block(488)", "Delete IfStatement(489)", "Delete SimpleName: currEntry(490)", "Delete SimpleName: setName(491)", "Delete SimpleName: longName(492)", "Delete SimpleName: toString(493)", "Delete MethodInvocation(494)", "Delete MethodInvocation(495)", "Delete ExpressionStatement(496)", "Delete Block(497)", "Delete IfStatement(498)", "Delete SimpleName: currEntry(499)", "Delete ReturnStatement(500)", "Delete Block(501)", "Delete MethodDeclaration(502)", "Delete TextElement: Get the record size being used by this stream's TarBuffer.(503)", "Delete TagElement(504)", "Delete TextElement:  The TarBuffer record size.(505)", "Delete TagElement: @return(506)", "Delete Javadoc(507)", "Delete Modifier: public(508)", "Delete PrimitiveType: int(509)", "Delete SimpleName: getRecordSize(510)", "Delete SimpleName: buffer(511)", "Delete SimpleName: getRecordSize(512)", "Delete MethodInvocation(513)", "Delete ReturnStatement(514)", "Delete Block(515)", "Delete MethodDeclaration(516)", "Delete TextElement: Get the available data that can be read from the current entry in the(517)", "Delete TextElement: archive. This does not indicate how much data is left in the entire(518)", "Delete TextElement: archive, only in the current entry. This value is determined from the(519)", "Delete TextElement: entry's size header field and the amount of data already read from the(520)", "Delete TextElement: current entry.(521)", "Delete TagElement(522)", "Delete TextElement:  The number of available bytes for the current entry.(523)", "Delete TagElement: @return(524)", "Delete SimpleName: IOException(525)", "Delete TextElement:  when an IO error causes operation to fail(526)", "Delete TagElement: @throws(527)", "Delete Javadoc(528)", "Delete SimpleName: Override(529)", "Delete MarkerAnnotation(530)", "Delete Modifier: public(531)", "Delete PrimitiveType: int(532)", "Delete SimpleName: available(533)", "Delete SimpleName: IOException(534)", "Delete SimpleType: IOException(535)", "Delete PrimitiveType: long(536)", "Delete SimpleName: remaining(537)", "Delete SimpleName: entrySize(538)", "Delete SimpleName: entryOffset(539)", "Delete InfixExpression: -(540)", "Delete VariableDeclarationFragment(541)", "Delete VariableDeclarationStatement(542)", "Delete SimpleName: remaining(543)", "Delete QualifiedName: Integer.MAX_VALUE(544)", "Delete InfixExpression: >(545)", "Delete QualifiedName: Integer.MAX_VALUE(546)", "Delete ReturnStatement(547)", "Delete Block(548)", "Delete IfStatement(549)", "Delete PrimitiveType: int(550)", "Delete SimpleName: remaining(551)", "Delete CastExpression(552)", "Delete ReturnStatement(553)", "Delete Block(554)", "Delete MethodDeclaration(555)", "Delete TextElement: Closes this stream. Calls the TarBuffer's close() method.(556)", "Delete TagElement(557)", "Delete SimpleName: IOException(558)", "Delete TextElement:  when an IO error causes operation to fail(559)", "Delete TagElement: @throws(560)", "Delete Javadoc(561)", "Delete SimpleName: Override(562)", "Delete MarkerAnnotation(563)", "Delete Modifier: public(564)", "Delete PrimitiveType: void(565)", "Delete SimpleName: close(566)", "Delete SimpleName: IOException(567)", "Delete SimpleType: IOException(568)", "Delete SimpleName: buffer(569)", "Delete SimpleName: close(570)", "Delete MethodInvocation(571)", "Delete ExpressionStatement(572)", "Delete Block(573)", "Delete MethodDeclaration(574)", "Delete TextElement: Copies the contents of the current tar archive entry directly into an(575)", "Delete TextElement: output stream.(576)", "Delete TagElement(577)", "Delete SimpleName: output(578)", "Delete TextElement:  The OutputStream into which to write the entry's data.(579)", "Delete TagElement: @param(580)", "Delete SimpleName: IOException(581)", "Delete TextElement:  when an IO error causes operation to fail(582)", "Delete TagElement: @throws(583)", "Delete Javadoc(584)", "Delete Modifier: public(585)", "Delete PrimitiveType: void(586)", "Delete SimpleName: copyEntryContents(587)", "Delete Modifier: final(588)", "Delete SimpleName: OutputStream(589)", "Delete SimpleType: OutputStream(590)", "Delete SimpleName: output(591)", "Delete SingleVariableDeclaration(592)", "Delete SimpleName: IOException(593)", "Delete SimpleType: IOException(594)", "Delete Modifier: final(595)", "Delete PrimitiveType: byte(596)", "Delete Dimension(597)", "Delete ArrayType: byte[](598)", "Delete SimpleName: buffer(599)", "Delete PrimitiveType: byte(600)", "Delete Dimension(601)", "Delete ArrayType: byte[](602)", "Delete NumberLiteral: 32(603)", "Delete NumberLiteral: 1024(604)", "Delete InfixExpression: *(605)", "Delete ArrayCreation(606)", "Delete VariableDeclarationFragment(607)", "Delete VariableDeclarationStatement(608)", "Delete BooleanLiteral: true(609)", "Delete Modifier: final(610)", "Delete PrimitiveType: int(611)", "Delete SimpleName: numRead(612)", "Delete SimpleName: read(613)", "Delete SimpleName: buffer(614)", "Delete NumberLiteral: 0(615)", "Delete QualifiedName: buffer.length(616)", "Delete MethodInvocation(617)", "Delete VariableDeclarationFragment(618)", "Delete VariableDeclarationStatement(619)", "Delete SimpleName: numRead(620)", "Delete NumberLiteral: 1(621)", "Delete PrefixExpression: -(622)", "Delete InfixExpression: ==(623)", "Delete BreakStatement(624)", "Delete Block(625)", "Delete IfStatement(626)", "Delete SimpleName: output(627)", "Delete SimpleName: write(628)", "Delete SimpleName: buffer(629)", "Delete NumberLiteral: 0(630)", "Delete SimpleName: numRead(631)", "Delete MethodInvocation(632)", "Delete ExpressionStatement(633)", "Delete Block(634)", "Delete WhileStatement(635)", "Delete Block(636)", "Delete MethodDeclaration(637)", "Delete TextElement: Since we do not support marking just yet, we do nothing.(638)", "Delete TagElement(639)", "Delete SimpleName: markLimit(640)", "Delete TextElement:  The limit to mark.(641)", "Delete TagElement: @param(642)", "Delete Javadoc(643)", "Delete SimpleName: Override(644)", "Delete MarkerAnnotation(645)", "Delete Modifier: public(646)", "Delete PrimitiveType: void(647)", "Delete SimpleName: mark(648)", "Delete PrimitiveType: int(649)", "Delete SimpleName: markLimit(650)", "Delete SingleVariableDeclaration(651)", "Delete Block(652)", "Delete MethodDeclaration(653)", "Delete TextElement: Since we do not support marking just yet, we return false.(654)", "Delete TagElement(655)", "Delete TextElement:  False.(656)", "Delete TagElement: @return(657)", "Delete Javadoc(658)", "Delete SimpleName: Override(659)", "Delete MarkerAnnotation(660)", "Delete Modifier: public(661)", "Delete PrimitiveType: boolean(662)", "Delete SimpleName: markSupported(663)", "Delete BooleanLiteral: false(664)", "Delete ReturnStatement(665)", "Delete Block(666)", "Delete MethodDeclaration(667)", "Delete TextElement: Reads a byte from the current tar archive entry. This method simply calls(668)", "Delete TextElement: read( byte[], int, int ).(669)", "Delete TagElement(670)", "Delete TextElement:  The byte read, or -1 at EOF.(671)", "Delete TagElement: @return(672)", "Delete SimpleName: IOException(673)", "Delete TextElement:  when an IO error causes operation to fail(674)", "Delete TagElement: @throws(675)", "Delete Javadoc(676)", "Delete SimpleName: Override(677)", "Delete MarkerAnnotation(678)", "Delete Modifier: public(679)", "Delete PrimitiveType: int(680)", "Delete SimpleName: read(681)", "Delete SimpleName: IOException(682)", "Delete SimpleType: IOException(683)", "Delete Modifier: final(684)", "Delete PrimitiveType: int(685)", "Delete SimpleName: num(686)", "Delete SimpleName: read(687)", "Delete SimpleName: oneBuf(688)", "Delete NumberLiteral: 0(689)", "Delete NumberLiteral: 1(690)", "Delete MethodInvocation(691)", "Delete VariableDeclarationFragment(692)", "Delete VariableDeclarationStatement(693)", "Delete SimpleName: num(694)", "Delete NumberLiteral: 1(695)", "Delete PrefixExpression: -(696)", "Delete InfixExpression: ==(697)", "Delete SimpleName: num(698)", "Delete ReturnStatement(699)", "Delete Block(700)", "Delete SimpleName: oneBuf(701)", "Delete NumberLiteral: 0(702)", "Delete ArrayAccess(703)", "Delete ReturnStatement(704)", "Delete Block(705)", "Delete IfStatement(706)", "Delete Block(707)", "Delete MethodDeclaration(708)", "Delete TextElement: Reads bytes from the current tar archive entry. This method simply calls(709)", "Delete TextElement: read( byte[], int, int ).(710)", "Delete TagElement(711)", "Delete SimpleName: buffer(712)", "Delete TextElement:  The buffer into which to place bytes read.(713)", "Delete TagElement: @param(714)", "Delete TextElement:  The number of bytes read, or -1 at EOF.(715)", "Delete TagElement: @return(716)", "Delete SimpleName: IOException(717)", "Delete TextElement:  when an IO error causes operation to fail(718)", "Delete TagElement: @throws(719)", "Delete Javadoc(720)", "Delete SimpleName: Override(721)", "Delete MarkerAnnotation(722)", "Delete Modifier: public(723)", "Delete PrimitiveType: int(724)", "Delete SimpleName: read(725)", "Delete Modifier: final(726)", "Delete PrimitiveType: byte(727)", "Delete Dimension(728)", "Delete ArrayType: byte[](729)", "Delete SimpleName: buffer(730)", "Delete SingleVariableDeclaration(731)", "Delete SimpleName: IOException(732)", "Delete SimpleType: IOException(733)", "Delete SimpleName: read(734)", "Delete SimpleName: buffer(735)", "Delete NumberLiteral: 0(736)", "Delete QualifiedName: buffer.length(737)", "Delete MethodInvocation(738)", "Delete ReturnStatement(739)", "Delete Block(740)", "Delete MethodDeclaration(741)", "Delete TextElement: Reads bytes from the current tar archive entry. This method is aware of(742)", "Delete TextElement: the boundaries of the current entry in the archive and will deal with(743)", "Delete TextElement: them as if they were this stream's start and EOF.(744)", "Delete TagElement(745)", "Delete SimpleName: buffer(746)", "Delete TextElement:  The buffer into which to place bytes read.(747)", "Delete TagElement: @param(748)", "Delete SimpleName: offset(749)", "Delete TextElement:  The offset at which to place bytes read.(750)", "Delete TagElement: @param(751)", "Delete SimpleName: count(752)", "Delete TextElement:   The number of bytes to read.(753)", "Delete TagElement: @param(754)", "Delete TextElement:  The number of bytes read, or -1 at EOF.(755)", "Delete TagElement: @return(756)", "Delete SimpleName: IOException(757)", "Delete TextElement:  when an IO error causes operation to fail(758)", "Delete TagElement: @throws(759)", "Delete Javadoc(760)", "Delete SimpleName: Override(761)", "Delete MarkerAnnotation(762)", "Delete Modifier: public(763)", "Delete PrimitiveType: int(764)", "Delete SimpleName: read(765)", "Delete Modifier: final(766)", "Delete PrimitiveType: byte(767)", "Delete Dimension(768)", "Delete ArrayType: byte[](769)", "Delete SimpleName: buffer(770)", "Delete SingleVariableDeclaration(771)", "Delete Modifier: final(772)", "Delete PrimitiveType: int(773)", "Delete SimpleName: offset(774)", "Delete SingleVariableDeclaration(775)", "Delete Modifier: final(776)", "Delete PrimitiveType: int(777)", "Delete SimpleName: count(778)", "Delete SingleVariableDeclaration(779)", "Delete SimpleName: IOException(780)", "Delete SimpleType: IOException(781)", "Delete PrimitiveType: int(782)", "Delete SimpleName: position(783)", "Delete SimpleName: offset(784)", "Delete VariableDeclarationFragment(785)", "Delete VariableDeclarationStatement(786)", "Delete PrimitiveType: int(787)", "Delete SimpleName: numToRead(788)", "Delete SimpleName: count(789)", "Delete VariableDeclarationFragment(790)", "Delete VariableDeclarationStatement(791)", "Delete PrimitiveType: int(792)", "Delete SimpleName: totalRead(793)", "Delete NumberLiteral: 0(794)", "Delete VariableDeclarationFragment(795)", "Delete VariableDeclarationStatement(796)", "Delete SimpleName: entryOffset(797)", "Delete SimpleName: entrySize(798)", "Delete InfixExpression: >=(799)", "Delete NumberLiteral: 1(800)", "Delete PrefixExpression: -(801)", "Delete ReturnStatement(802)", "Delete Block(803)", "Delete IfStatement(804)", "Delete SimpleName: numToRead(805)", "Delete SimpleName: entryOffset(806)", "Delete InfixExpression: +(807)", "Delete ParenthesizedExpression(808)", "Delete SimpleName: entrySize(809)", "Delete InfixExpression: >(810)", "Delete SimpleName: numToRead(811)", "Delete PrimitiveType: int(812)", "Delete SimpleName: entrySize(813)", "Delete SimpleName: entryOffset(814)", "Delete InfixExpression: -(815)", "Delete ParenthesizedExpression(816)", "Delete CastExpression(817)", "Delete Assignment: =(818)", "Delete ExpressionStatement(819)", "Delete Block(820)", "Delete IfStatement(821)", "Delete NullLiteral(822)", "Delete SimpleName: readBuf(823)", "Delete InfixExpression: !=(824)", "Delete Modifier: final(825)", "Delete PrimitiveType: int(826)", "Delete SimpleName: size(827)", "Delete SimpleName: numToRead(828)", "Delete QualifiedName: readBuf.length(829)", "Delete InfixExpression: >(830)", "Delete ParenthesizedExpression(831)", "Delete QualifiedName: readBuf.length(832)", "Delete SimpleName: numToRead(833)", "Delete ConditionalExpression(834)", "Delete VariableDeclarationFragment(835)", "Delete VariableDeclarationStatement(836)", "Delete SimpleName: System(837)", "Delete SimpleName: arraycopy(838)", "Delete SimpleName: readBuf(839)", "Delete NumberLiteral: 0(840)", "Delete SimpleName: buffer(841)", "Delete SimpleName: position(842)", "Delete SimpleName: size(843)", "Delete MethodInvocation(844)", "Delete ExpressionStatement(845)", "Delete SimpleName: size(846)", "Delete QualifiedName: readBuf.length(847)", "Delete InfixExpression: >=(848)", "Delete SimpleName: readBuf(849)", "Delete NullLiteral(850)", "Delete Assignment: =(851)", "Delete ExpressionStatement(852)", "Delete Block(853)", "Delete Modifier: final(854)", "Delete PrimitiveType: int(855)", "Delete SimpleName: newLength(856)", "Delete QualifiedName: readBuf.length(857)", "Delete SimpleName: size(858)", "Delete InfixExpression: -(859)", "Delete VariableDeclarationFragment(860)", "Delete VariableDeclarationStatement(861)", "Delete Modifier: final(862)", "Delete PrimitiveType: byte(863)", "Delete Dimension(864)", "Delete ArrayType: byte[](865)", "Delete SimpleName: newBuffer(866)", "Delete PrimitiveType: byte(867)", "Delete Dimension(868)", "Delete ArrayType: byte[](869)", "Delete SimpleName: newLength(870)", "Delete ArrayCreation(871)", "Delete VariableDeclarationFragment(872)", "Delete VariableDeclarationStatement(873)", "Delete SimpleName: System(874)", "Delete SimpleName: arraycopy(875)", "Delete SimpleName: readBuf(876)", "Delete SimpleName: size(877)", "Delete SimpleName: newBuffer(878)", "Delete NumberLiteral: 0(879)", "Delete SimpleName: newLength(880)", "Delete MethodInvocation(881)", "Delete ExpressionStatement(882)", "Delete SimpleName: readBuf(883)", "Delete SimpleName: newBuffer(884)", "Delete Assignment: =(885)", "Delete ExpressionStatement(886)", "Delete Block(887)", "Delete IfStatement(888)", "Delete SimpleName: totalRead(889)", "Delete SimpleName: size(890)", "Delete Assignment: +=(891)", "Delete ExpressionStatement(892)", "Delete SimpleName: numToRead(893)", "Delete SimpleName: size(894)", "Delete Assignment: -=(895)", "Delete ExpressionStatement(896)", "Delete SimpleName: position(897)", "Delete SimpleName: size(898)", "Delete Assignment: +=(899)", "Delete ExpressionStatement(900)", "Delete Block(901)", "Delete IfStatement(902)", "Delete SimpleName: numToRead(903)", "Delete NumberLiteral: 0(904)", "Delete InfixExpression: >(905)", "Delete Modifier: final(906)", "Delete PrimitiveType: byte(907)", "Delete Dimension(908)", "Delete ArrayType: byte[](909)", "Delete SimpleName: rec(910)", "Delete ThisExpression(911)", "Delete SimpleName: buffer(912)", "Delete FieldAccess(913)", "Delete SimpleName: readRecord(914)", "Delete MethodInvocation(915)", "Delete VariableDeclarationFragment(916)", "Delete VariableDeclarationStatement(917)", "Delete NullLiteral(918)", "Delete SimpleName: rec(919)", "Delete InfixExpression: ==(920)", "Delete Modifier: final(921)", "Delete SimpleName: String(922)", "Delete SimpleType: String(923)", "Delete SimpleName: message(924)", "Delete StringLiteral: \"unexpected EOF with \"(925)", "Delete SimpleName: numToRead(926)", "Delete StringLiteral: \" bytes unread\"(927)", "Delete InfixExpression: +(928)", "Delete VariableDeclarationFragment(929)", "Delete VariableDeclarationStatement(930)", "Delete SimpleName: IOException(931)", "Delete SimpleType: IOException(932)", "Delete SimpleName: message(933)", "Delete ClassInstanceCreation(934)", "Delete ThrowStatement(935)", "Delete Block(936)", "Delete IfStatement(937)", "Delete PrimitiveType: int(938)", "Delete SimpleName: size(939)", "Delete SimpleName: numToRead(940)", "Delete VariableDeclarationFragment(941)", "Delete VariableDeclarationStatement(942)", "Delete Modifier: final(943)", "Delete PrimitiveType: int(944)", "Delete SimpleName: recordLength(945)", "Delete QualifiedName: rec.length(946)", "Delete VariableDeclarationFragment(947)", "Delete VariableDeclarationStatement(948)", "Delete SimpleName: recordLength(949)", "Delete SimpleName: size(950)", "Delete InfixExpression: >(951)", "Delete SimpleName: System(952)", "Delete SimpleName: arraycopy(953)", "Delete SimpleName: rec(954)", "Delete NumberLiteral: 0(955)", "Delete SimpleName: buffer(956)", "Delete SimpleName: position(957)", "Delete SimpleName: size(958)", "Delete MethodInvocation(959)", "Delete ExpressionStatement(960)", "Delete SimpleName: readBuf(961)", "Delete PrimitiveType: byte(962)", "Delete Dimension(963)", "Delete ArrayType: byte[](964)", "Delete SimpleName: recordLength(965)", "Delete SimpleName: size(966)", "Delete InfixExpression: -(967)", "Delete ArrayCreation(968)", "Delete Assignment: =(969)", "Delete ExpressionStatement(970)", "Delete SimpleName: System(971)", "Delete SimpleName: arraycopy(972)", "Delete SimpleName: rec(973)", "Delete SimpleName: size(974)", "Delete SimpleName: readBuf(975)", "Delete NumberLiteral: 0(976)", "Delete SimpleName: recordLength(977)", "Delete SimpleName: size(978)", "Delete InfixExpression: -(979)", "Delete MethodInvocation(980)", "Delete ExpressionStatement(981)", "Delete Block(982)", "Delete SimpleName: size(983)", "Delete SimpleName: recordLength(984)", "Delete Assignment: =(985)", "Delete ExpressionStatement(986)", "Delete SimpleName: System(987)", "Delete SimpleName: arraycopy(988)", "Delete SimpleName: rec(989)", "Delete NumberLiteral: 0(990)", "Delete SimpleName: buffer(991)", "Delete SimpleName: position(992)", "Delete SimpleName: recordLength(993)", "Delete MethodInvocation(994)", "Delete ExpressionStatement(995)", "Delete Block(996)", "Delete IfStatement(997)", "Delete SimpleName: totalRead(998)", "Delete SimpleName: size(999)", "Delete Assignment: +=(1000)", "Delete ExpressionStatement(1001)", "Delete SimpleName: numToRead(1002)", "Delete SimpleName: size(1003)", "Delete Assignment: -=(1004)", "Delete ExpressionStatement(1005)", "Delete SimpleName: position(1006)", "Delete SimpleName: size(1007)", "Delete Assignment: +=(1008)", "Delete ExpressionStatement(1009)", "Delete Block(1010)", "Delete WhileStatement(1011)", "Delete SimpleName: entryOffset(1012)", "Delete SimpleName: totalRead(1013)", "Delete Assignment: +=(1014)", "Delete ExpressionStatement(1015)", "Delete SimpleName: totalRead(1016)", "Delete ReturnStatement(1017)", "Delete Block(1018)", "Delete MethodDeclaration(1019)", "Delete TextElement: Since we do not support marking just yet, we do nothing.(1020)", "Delete TagElement(1021)", "Delete Javadoc(1022)", "Delete SimpleName: Override(1023)", "Delete MarkerAnnotation(1024)", "Delete Modifier: public(1025)", "Delete PrimitiveType: void(1026)", "Delete SimpleName: reset(1027)", "Delete Block(1028)", "Delete MethodDeclaration(1029)", "Delete Modifier: public(1030)", "Delete PrimitiveType: void(1031)", "Delete SimpleName: longSkip(1032)", "Delete Modifier: final(1033)", "Delete PrimitiveType: long(1034)", "Delete SimpleName: numToSkip(1035)", "Delete SingleVariableDeclaration(1036)", "Delete SimpleName: IOException(1037)", "Delete SimpleType: IOException(1038)", "Delete PrimitiveType: long(1039)", "Delete SimpleName: skipped(1040)", "Delete NumberLiteral: 0(1041)", "Delete VariableDeclarationFragment(1042)", "Delete VariableDeclarationExpression(1043)", "Delete SimpleName: skipped(1044)", "Delete SimpleName: numToSkip(1045)", "Delete InfixExpression: <(1046)", "Delete SimpleName: numToSkip(1047)", "Delete SimpleName: skipped(1048)", "Delete InfixExpression: -(1049)", "Delete QualifiedName: Integer.MAX_VALUE(1050)", "Delete InfixExpression: >(1051)", "Delete SimpleName: skip(1052)", "Delete QualifiedName: Integer.MAX_VALUE(1053)", "Delete MethodInvocation(1054)", "Delete ExpressionStatement(1055)", "Delete SimpleName: skipped(1056)", "Delete QualifiedName: Integer.MAX_VALUE(1057)", "Delete Assignment: +=(1058)", "Delete ExpressionStatement(1059)", "Delete Block(1060)", "Delete SimpleName: skip(1061)", "Delete PrimitiveType: int(1062)", "Delete SimpleName: numToSkip(1063)", "Delete SimpleName: skipped(1064)", "Delete InfixExpression: -(1065)", "Delete ParenthesizedExpression(1066)", "Delete CastExpression(1067)", "Delete MethodInvocation(1068)", "Delete ExpressionStatement(1069)", "Delete SimpleName: skipped(1070)", "Delete SimpleName: numToSkip(1071)", "Delete SimpleName: skipped(1072)", "Delete InfixExpression: -(1073)", "Delete Assignment: +=(1074)", "Delete ExpressionStatement(1075)", "Delete Block(1076)", "Delete IfStatement(1077)", "Delete Block(1078)", "Delete ForStatement(1079)", "Delete Block(1080)", "Delete MethodDeclaration(1081)", "Delete TextElement: Skip bytes in the input buffer. This skips bytes in the current entry's(1082)", "Delete TextElement: data, not the entire archive, and will stop at the end of the current(1083)", "Delete TextElement: entry's data if the number to skip extends beyond that point.(1084)", "Delete TagElement(1085)", "Delete SimpleName: numToSkip(1086)", "Delete TextElement:  The number of bytes to skip.(1087)", "Delete TagElement: @param(1088)", "Delete SimpleName: IOException(1089)", "Delete TextElement:  when an IO error causes operation to fail(1090)", "Delete TagElement: @throws(1091)", "Delete Javadoc(1092)", "Delete Modifier: public(1093)", "Delete PrimitiveType: void(1094)", "Delete SimpleName: skip(1095)", "Delete Modifier: final(1096)", "Delete PrimitiveType: int(1097)", "Delete SimpleName: numToSkip(1098)", "Delete SingleVariableDeclaration(1099)", "Delete SimpleName: IOException(1100)", "Delete SimpleType: IOException(1101)", "Delete Modifier: final(1102)", "Delete PrimitiveType: byte(1103)", "Delete Dimension(1104)", "Delete ArrayType: byte[](1105)", "Delete SimpleName: skipBuf(1106)", "Delete PrimitiveType: byte(1107)", "Delete Dimension(1108)", "Delete ArrayType: byte[](1109)", "Delete NumberLiteral: 8(1110)", "Delete NumberLiteral: 1024(1111)", "Delete InfixExpression: *(1112)", "Delete ArrayCreation(1113)", "Delete VariableDeclarationFragment(1114)", "Delete VariableDeclarationStatement(1115)", "Delete PrimitiveType: int(1116)", "Delete SimpleName: num(1117)", "Delete SimpleName: numToSkip(1118)", "Delete VariableDeclarationFragment(1119)", "Delete VariableDeclarationStatement(1120)", "Delete SimpleName: num(1121)", "Delete NumberLiteral: 0(1122)", "Delete InfixExpression: >(1123)", "Delete Modifier: final(1124)", "Delete PrimitiveType: int(1125)", "Delete SimpleName: count(1126)", "Delete SimpleName: num(1127)", "Delete QualifiedName: skipBuf.length(1128)", "Delete InfixExpression: >(1129)", "Delete ParenthesizedExpression(1130)", "Delete QualifiedName: skipBuf.length(1131)", "Delete SimpleName: num(1132)", "Delete ConditionalExpression(1133)", "Delete VariableDeclarationFragment(1134)", "Delete VariableDeclarationStatement(1135)", "Delete Modifier: final(1136)", "Delete PrimitiveType: int(1137)", "Delete SimpleName: numRead(1138)", "Delete SimpleName: read(1139)", "Delete SimpleName: skipBuf(1140)", "Delete NumberLiteral: 0(1141)", "Delete SimpleName: count(1142)", "Delete MethodInvocation(1143)", "Delete VariableDeclarationFragment(1144)", "Delete VariableDeclarationStatement(1145)", "Delete SimpleName: numRead(1146)", "Delete NumberLiteral: 1(1147)", "Delete PrefixExpression: -(1148)", "Delete InfixExpression: ==(1149)", "Delete BreakStatement(1150)", "Delete Block(1151)", "Delete IfStatement(1152)", "Delete SimpleName: num(1153)", "Delete SimpleName: numRead(1154)", "Delete Assignment: -=(1155)", "Delete ExpressionStatement(1156)", "Delete Block(1157)", "Delete WhileStatement(1158)", "Delete Block(1159)", "Delete MethodDeclaration(1160)", "Delete TextElement: Utility method to do debugging.(1161)", "Delete TextElement: Capable of being overidden in sub-classes.(1162)", "Delete TagElement(1163)", "Delete SimpleName: message(1164)", "Delete TextElement:  the message to use in debugging(1165)", "Delete TagElement: @param(1166)", "Delete Javadoc(1167)", "Delete Modifier: protected(1168)", "Delete PrimitiveType: void(1169)", "Delete SimpleName: debug(1170)", "Delete Modifier: final(1171)", "Delete SimpleName: String(1172)", "Delete SimpleType: String(1173)", "Delete SimpleName: message(1174)", "Delete SingleVariableDeclaration(1175)", "Delete SimpleName: debug(1176)", "Delete QualifiedName: System.err(1177)", "Delete SimpleName: println(1178)", "Delete SimpleName: message(1179)", "Delete MethodInvocation(1180)", "Delete ExpressionStatement(1181)", "Delete Block(1182)", "Delete IfStatement(1183)", "Delete Block(1184)", "Delete MethodDeclaration(1185)", "Delete TypeDeclaration: class(1186)"]}}], "commit_stats": [{"total_files": 10, "deleted_files": 5, "testing": "False", "maintenance": "True", "build": "True"}]}