{"application": "google-closure-compiler", "csha": "4169bde362b193921b75971e699a371237d7ba32", "files": [{"SymbolTable_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 36", "operations": ["INS ImportDeclaration to CompilationUnit at 36", "INS QualifiedName: java.util.IdentityHashMap to ImportDeclaration at 0"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS StringLiteral: \"ReferenceEquality\" to SingleMemberAnnotation at 1", "INS SingleMemberAnnotation to MethodDeclaration at 0", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 1", "operations": ["INS StringLiteral: \"ReferenceEquality\" to SingleMemberAnnotation at 1", "INS SingleMemberAnnotation to MethodDeclaration at 1", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 5", "operations": ["INS SimpleType: Iterable to ParameterizedType: Iterable<Symbol> at 0", "INS SimpleType: Symbol to ParameterizedType: Iterable<Symbol> at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: allTypes to VariableDeclarationFragment at 0", "INS ParameterizedType: Iterable<Symbol> to VariableDeclarationStatement at 0", "INS SimpleName: Iterable to SimpleType: Iterable at 0", "INS SimpleName: Symbol to SimpleType: Symbol at 0", "INS VariableDeclarationStatement to Block at 5"]}, {"root": "INS VariableDeclarationStatement to Block at 6", "operations": ["INS ParameterizedType: Map<JSType,Symbol> to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 6", "INS SimpleName: symbolThatDeclaresType to VariableDeclarationFragment at 0", "INS SimpleType: Symbol to ParameterizedType: Map<JSType,Symbol> at 2", "INS SimpleType: JSType to ParameterizedType: Map<JSType,Symbol> at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: IdentityHashMap to SimpleType: IdentityHashMap at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: JSType to SimpleType: JSType at 0", "INS SimpleName: Symbol to SimpleType: Symbol at 0", "INS ParameterizedType: IdentityHashMap<> to ClassInstanceCreation at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleType: Map to ParameterizedType: Map<JSType,Symbol> at 0", "INS SimpleType: IdentityHashMap to ParameterizedType: IdentityHashMap<> at 0"]}, {"root": "INS EnhancedForStatement to Block at 8", "operations": ["INS SimpleName: s to MethodInvocation at 2", "INS EnhancedForStatement to Block at 8", "INS NullLiteral to InfixExpression: == at 1", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: getType to MethodInvocation at 1", "INS SimpleName: s to MethodInvocation at 0", "INS SimpleName: symbolThatDeclaresType to MethodInvocation at 0", "INS InfixExpression: == to InfixExpression: || at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: allTypes to EnhancedForStatement at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: equals to MethodInvocation at 1", "INS Block to EnhancedForStatement at 2", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: s to MethodInvocation at 0", "INS IfStatement to Block at 0"]}, {"root": "INS EnhancedForStatement to Block at 9", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: Symbol to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: s to SingleVariableDeclaration at 1", "INS IfStatement to Block at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS SimpleName: allTypes to EnhancedForStatement at 1", "INS Block to EnhancedForStatement at 2", "INS SimpleName: s to MethodInvocation at 0", "INS SimpleName: symbolThatDeclaresType to MethodInvocation at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: Symbol to SimpleType: Symbol at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS NullLiteral to InfixExpression: != at 1", "INS EnhancedForStatement to Block at 9", "INS SimpleName: s to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getPropertyScope to MethodInvocation at 1", "INS QualifiedName: s.propertyScope to Assignment: = at 0", "INS SimpleName: get to MethodInvocation at 1"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: s to MethodInvocation at 2", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: equals to MethodInvocation at 1"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: s to MethodInvocation at 2", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: equals to MethodInvocation at 1"]}, {"root": "INS SingleVariableDeclaration to EnhancedForStatement at 0", "operations": ["INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleType: Symbol to SingleVariableDeclaration at 0", "INS SimpleName: s to SingleVariableDeclaration at 1", "INS SimpleName: Symbol to SimpleType: Symbol at 0"]}, {"root": "INS SimpleName: allTypes to EnhancedForStatement at 1", "operations": ["INS SimpleName: allTypes to EnhancedForStatement at 1"]}, {"root": "INS Block to EnhancedForStatement at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS Block to EnhancedForStatement at 2", "INS SimpleName: s to MethodInvocation at 3", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleName: s to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: symbolThatDeclaresType to MethodInvocation at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0", "MOV Block to IfStatement at 1", "MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from Build a property scope for the given symbol. Any properties of the symbol to Build a property scope for the given symbol. Any properties of the symbol will be added to the", "operations": ["UPD TextElement: Build a property scope for the given symbol. Any properties of the symbol from Build a property scope for the given symbol. Any properties of the symbol to Build a property scope for the given symbol. Any properties of the symbol will be added to the"]}, {"root": "UPDATE from will be added to the property scope. to property scope.", "operations": ["UPD TextElement: will be added to the property scope. from will be added to the property scope. to property scope."]}, {"root": "UPDATE from It is important that property scopes are created in order from the leaves to <p>It is important that property scopes are created in order from the leaves up to the root, so", "operations": ["UPD TextElement: It is important that property scopes are created in order from the leaves from It is important that property scopes are created in order from the leaves to <p>It is important that property scopes are created in order from the leaves up to the root, so"]}, {"root": "UPDATE from up to the root, so this should only be called from #fillPropertyScopes. to this should only be called from #fillPropertyScopes. If you try to create a property scope for", "operations": ["UPD TextElement: up to the root, so this should only be called from #fillPropertyScopes. from up to the root, so this should only be called from #fillPropertyScopes. to this should only be called from #fillPropertyScopes. If you try to create a property scope for"]}, {"root": "UPDATE from then the leaf will get cut and re-added to the parent property scope, to a parent before its leaf, then the leaf will get cut and re-added to the parent property scope,", "operations": ["UPD TextElement: then the leaf will get cut and re-added to the parent property scope, from then the leaf will get cut and re-added to the parent property scope, to a parent before its leaf, then the leaf will get cut and re-added to the parent property scope,"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL SimpleName: s", "DEL InfixExpression: !="]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL InfixExpression: !=", "DEL SimpleName: s"]}, {"root": "DEL TextElement: If you try to create a property scope for a parent before its leaf,", "operations": ["DEL TextElement: If you try to create a property scope for a parent before its leaf,"]}]}}, {"SymbolTable_diff": {"operations": ["Insert ImportDeclaration(73) into CompilationUnit(6069) at 36", "Insert QualifiedName: java.util.IdentityHashMap(72) into ImportDeclaration(73) at 0", "Insert SingleMemberAnnotation(2344) into MethodDeclaration(2520) at 0", "Insert SingleMemberAnnotation(3009) into MethodDeclaration(3289) at 1", "Insert SimpleName: SuppressWarnings(2342) into SingleMemberAnnotation(2344) at 0", "Insert StringLiteral: \"ReferenceEquality\"(2343) into SingleMemberAnnotation(2344) at 1", "Insert VariableDeclarationStatement(2433) into Block(2519) at 5", "Insert VariableDeclarationStatement(2447) into Block(2519) at 6", "Insert EnhancedForStatement(2490) into Block(2519) at 8", "Insert EnhancedForStatement(2515) into Block(2519) at 9", "Insert SimpleName: SuppressWarnings(3007) into SingleMemberAnnotation(3009) at 0", "Insert StringLiteral: \"ReferenceEquality\"(3008) into SingleMemberAnnotation(3009) at 1", "Insert PrefixExpression: !(2142) into IfStatement(2151) at 0", "Insert PrefixExpression: !(2166) into IfStatement(2175) at 0", "Insert ParameterizedType: Iterable<Symbol>(2425) into VariableDeclarationStatement(2433) at 0", "Insert VariableDeclarationFragment(2432) into VariableDeclarationStatement(2433) at 1", "Insert ParameterizedType: Map<JSType,Symbol>(2440) into VariableDeclarationStatement(2447) at 0", "Insert VariableDeclarationFragment(2446) into VariableDeclarationStatement(2447) at 1", "Insert SingleVariableDeclaration(2451) into EnhancedForStatement(2462) at 0", "Insert SimpleName: allTypes(2452) into EnhancedForStatement(2462) at 1", "Insert Block(2461) into EnhancedForStatement(2462) at 2", "Move SingleVariableDeclaration(2415) into EnhancedForStatement(2490) at 0", "Insert SimpleName: allTypes(2467) into EnhancedForStatement(2490) at 1", "Insert Block(2489) into EnhancedForStatement(2490) at 2", "Insert SingleVariableDeclaration(2494) into EnhancedForStatement(2515) at 0", "Insert SimpleName: allTypes(2495) into EnhancedForStatement(2515) at 1", "Insert Block(2514) into EnhancedForStatement(2515) at 2", "Update TextElement: Build a property scope for the given symbol. Any properties of the symbol(2910) to Build a property scope for the given symbol. Any properties of the symbol will be added to the", "Update TextElement: will be added to the property scope.(2911) to property scope.", "Update TextElement: It is important that property scopes are created in order from the leaves(2912) to <p>It is important that property scopes are created in order from the leaves up to the root, so", "Update TextElement: up to the root, so this should only be called from #fillPropertyScopes.(2913) to this should only be called from #fillPropertyScopes. If you try to create a property scope for", "Update TextElement: then the leaf will get cut and re-added to the parent property scope,(2915) to a parent before its leaf, then the leaf will get cut and re-added to the parent property scope,", "Insert MethodInvocation(2141) into PrefixExpression: !(2142) at 0", "Insert MethodInvocation(2165) into PrefixExpression: !(2166) at 0", "Insert SimpleType: Iterable(2422) into ParameterizedType: Iterable<Symbol>(2425) at 0", "Insert SimpleType: Symbol(2424) into ParameterizedType: Iterable<Symbol>(2425) at 1", "Insert SimpleName: allTypes(2426) into VariableDeclarationFragment(2432) at 0", "Move MethodInvocation(2420) into VariableDeclarationFragment(2432) at 1", "Insert SimpleType: Map(2435) into ParameterizedType: Map<JSType,Symbol>(2440) at 0", "Insert SimpleType: JSType(2437) into ParameterizedType: Map<JSType,Symbol>(2440) at 1", "Insert SimpleType: Symbol(2439) into ParameterizedType: Map<JSType,Symbol>(2440) at 2", "Insert SimpleName: symbolThatDeclaresType(2441) into VariableDeclarationFragment(2446) at 0", "Insert ClassInstanceCreation(2445) into VariableDeclarationFragment(2446) at 1", "Insert SimpleType: Symbol(2449) into SingleVariableDeclaration(2451) at 0", "Insert SimpleName: s(2450) into SingleVariableDeclaration(2451) at 1", "Insert ExpressionStatement(2460) into Block(2461) at 0", "Insert IfStatement(2488) into Block(2489) at 0", "Insert SimpleType: Symbol(2492) into SingleVariableDeclaration(2494) at 0", "Insert SimpleName: s(2493) into SingleVariableDeclaration(2494) at 1", "Insert IfStatement(2513) into Block(2514) at 0", "Move MethodInvocation(2136) into MethodInvocation(2141) at 0", "Insert SimpleName: equals(2139) into MethodInvocation(2141) at 1", "Insert SimpleName: s(2140) into MethodInvocation(2141) at 2", "Move MethodInvocation(2158) into MethodInvocation(2165) at 0", "Insert SimpleName: equals(2163) into MethodInvocation(2165) at 1", "Insert SimpleName: s(2164) into MethodInvocation(2165) at 2", "Insert SimpleName: Iterable(2421) into SimpleType: Iterable(2422) at 0", "Insert SimpleName: Symbol(2423) into SimpleType: Symbol(2424) at 0", "Insert SimpleName: Map(2434) into SimpleType: Map(2435) at 0", "Insert SimpleName: JSType(2436) into SimpleType: JSType(2437) at 0", "Insert SimpleName: Symbol(2438) into SimpleType: Symbol(2439) at 0", "Insert ParameterizedType: IdentityHashMap<>(2444) into ClassInstanceCreation(2445) at 0", "Insert SimpleName: Symbol(2448) into SimpleType: Symbol(2449) at 0", "Insert MethodInvocation(2459) into ExpressionStatement(2460) at 0", "Insert InfixExpression: ||(2482) into IfStatement(2488) at 0", "Move Block(2425) into IfStatement(2488) at 1", "Insert SimpleName: Symbol(2491) into SimpleType: Symbol(2492) at 0", "Insert InfixExpression: !=(2500) into IfStatement(2513) at 0", "Insert Block(2512) into IfStatement(2513) at 1", "Insert SimpleType: IdentityHashMap(2443) into ParameterizedType: IdentityHashMap<>(2444) at 0", "Insert SimpleName: symbolThatDeclaresType(2453) into MethodInvocation(2459) at 0", "Insert SimpleName: put(2454) into MethodInvocation(2459) at 1", "Insert MethodInvocation(2457) into MethodInvocation(2459) at 2", "Insert SimpleName: s(2458) into MethodInvocation(2459) at 3", "Insert InfixExpression: ==(2472) into InfixExpression: ||(2482) at 0", "Insert MethodInvocation(2481) into InfixExpression: ||(2482) at 1", "Insert MethodInvocation(2498) into InfixExpression: !=(2500) at 0", "Insert NullLiteral(2499) into InfixExpression: !=(2500) at 1", "Insert ExpressionStatement(2511) into Block(2512) at 0", "Insert SimpleName: IdentityHashMap(2442) into SimpleType: IdentityHashMap(2443) at 0", "Insert SimpleName: s(2455) into MethodInvocation(2457) at 0", "Insert SimpleName: getType(2456) into MethodInvocation(2457) at 1", "Insert MethodInvocation(2470) into InfixExpression: ==(2472) at 0", "Insert NullLiteral(2471) into InfixExpression: ==(2472) at 1", "Insert MethodInvocation(2478) into MethodInvocation(2481) at 0", "Insert SimpleName: equals(2479) into MethodInvocation(2481) at 1", "Insert SimpleName: s(2480) into MethodInvocation(2481) at 2", "Insert SimpleName: s(2496) into MethodInvocation(2498) at 0", "Insert SimpleName: getType(2497) into MethodInvocation(2498) at 1", "Insert Assignment: =(2510) into ExpressionStatement(2511) at 0", "Insert SimpleName: s(2468) into MethodInvocation(2470) at 0", "Insert SimpleName: getType(2469) into MethodInvocation(2470) at 1", "Insert SimpleName: symbolThatDeclaresType(2473) into MethodInvocation(2478) at 0", "Insert SimpleName: get(2474) into MethodInvocation(2478) at 1", "Insert MethodInvocation(2477) into MethodInvocation(2478) at 2", "Insert QualifiedName: s.propertyScope(2501) into Assignment: =(2510) at 0", "Insert MethodInvocation(2509) into Assignment: =(2510) at 1", "Insert SimpleName: s(2475) into MethodInvocation(2477) at 0", "Insert SimpleName: getType(2476) into MethodInvocation(2477) at 1", "Insert MethodInvocation(2507) into MethodInvocation(2509) at 0", "Insert SimpleName: getPropertyScope(2508) into MethodInvocation(2509) at 1", "Insert SimpleName: symbolThatDeclaresType(2502) into MethodInvocation(2507) at 0", "Insert SimpleName: get(2503) into MethodInvocation(2507) at 1", "Insert MethodInvocation(2506) into MethodInvocation(2507) at 2", "Insert SimpleName: s(2504) into MethodInvocation(2506) at 0", "Insert SimpleName: getType(2505) into MethodInvocation(2506) at 1", "Delete SimpleName: s(2137)", "Delete InfixExpression: !=(2138)", "Delete SimpleName: s(2159)", "Delete InfixExpression: !=(2160)", "Delete TextElement: If you try to create a property scope for a parent before its leaf,(2914)"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}