{"application": "google-closure-templates", "csha": "f237ff93142fe4fd2373714074adabf6210cf8e5", "files": [{"AbstractNode_cluster": {"actions": []}}, {"AbstractNode_diff": {"operations": []}}, {"AbstractParentNode_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.basetree", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Block", "DEL SimpleName: Node", "DEL MethodDeclaration", "DEL SimpleName: clearChildren", "DEL SimpleName: Override", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: parentMixin", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: MixinParentNode", "DEL MarkerAnnotation", "DEL Modifier: private", "DEL ClassInstanceCreation", "DEL PrimitiveType: void", "DEL SimpleName: N", "DEL Modifier: public", "DEL ThisExpression", "DEL Block", "DEL SimpleName: N", "DEL SimpleName: parentMixin", "DEL SimpleName: N", "DEL SimpleType: MixinParentNode", "DEL SimpleName: orig", "DEL SimpleName: StringBuilder", "DEL SimpleName: N", "DEL MarkerAnnotation", "DEL SimpleName: parentMixin", "DEL Modifier: public", "DEL SimpleName: N", "DEL SimpleName: N", "DEL TagElement", "DEL SimpleName: newChild", "DEL SimpleName: toTreeString", "DEL SimpleName: index", "DEL SimpleName: Override", "DEL SimpleName: AbstractParentNode", "DEL MethodDeclaration", "DEL Block", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MarkerAnnotation", "DEL SimpleName: parentMixin", "DEL SimpleName: sb", "DEL TextElement: Abstract implementation of a ParentNode.", "DEL PrimitiveType: void", "DEL SimpleName: indent", "DEL SimpleName: replaceChild", "DEL SimpleName: orig", "DEL SingleVariableDeclaration", "DEL SimpleType: List", "DEL SimpleName: parentMixin", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleName: numChildren", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: parentMixin", "DEL WildcardType: ? extends N", "DEL ParameterizedType: MixinParentNode<N>", "DEL SimpleName: AbstractParentNode", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: parentMixin", "DEL SimpleType: String", "DEL SimpleType: AbstractNode", "DEL SimpleType: List", "DEL ExpressionStatement", "DEL TagElement", "DEL MarkerAnnotation", "DEL PrimitiveType: int", "DEL SimpleName: replaceChild", "DEL SimpleName: child", "DEL MethodInvocation", "DEL QualifiedName: orig.parentMixin", "DEL SingleVariableDeclaration", "DEL Block", "DEL Block", "DEL SimpleName: addChildren", "DEL SimpleType: N", "DEL ExpressionStatement", "DEL SimpleName: index", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL MethodDeclaration", "DEL PrimitiveType: void", "DEL SimpleName: removeChild", "DEL SimpleName: sb", "DEL ParameterizedType: MixinParentNode<N>", "DEL SimpleName: parentMixin", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: appendSourceStringForChildren", "DEL ParameterizedType: List<? extends N>", "DEL SingleVariableDeclaration", "DEL SimpleName: Override", "DEL SimpleName: sb", "DEL SimpleName: getChildIndex", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL SimpleName: addChildren", "DEL SimpleName: child", "DEL SimpleType: N", "DEL Javadoc", "DEL SimpleName: newChild", "DEL Block", "DEL MethodDeclaration", "DEL MarkerAnnotation", "DEL SimpleType: N", "DEL SimpleName: Override", "DEL TagElement", "DEL SimpleType: N", "DEL SimpleName: newChild", "DEL Modifier: public", "DEL Modifier: public", "DEL SimpleType: N", "DEL SingleVariableDeclaration", "DEL SimpleName: Override", "DEL SimpleName: newChild", "DEL Modifier: public", "DEL Modifier: abstract", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: N", "DEL ThisExpression", "DEL SimpleName: orig", "DEL SimpleType: Node", "DEL SingleVariableDeclaration", "DEL SimpleName: N", "DEL SimpleName: child", "DEL Assignment: =", "DEL Block", "DEL SimpleName: parentMixin", "DEL Block", "DEL TextElement: <p> Important: Do not use outside of Soy code (treat as superpackage-private).", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL MarkerAnnotation", "DEL SimpleType: ParentNode", "DEL PrimitiveType: void", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SimpleName: indent", "DEL SimpleName: parentMixin", "DEL SimpleName: addChild", "DEL SimpleName: parentMixin", "DEL TextElement: Copy constructor.", "DEL SimpleName: parentMixin", "DEL Block", "DEL SimpleName: index", "DEL SimpleName: currChild", "DEL SimpleName: numChildren", "DEL MethodInvocation", "DEL SimpleName: replaceChild", "DEL SimpleName: Override", "DEL TextElement:  The node to copy.", "DEL SimpleName: index", "DEL SingleVariableDeclaration", "DEL SimpleName: appendSourceStringForChildren", "DEL SimpleType: MixinParentNode", "DEL SimpleName: child", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL Modifier: protected", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL Javadoc", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: N", "DEL SimpleType: N", "DEL SimpleType: N", "DEL SimpleName: index", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: parentMixin", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: N", "DEL ParameterizedType: ParentNode<N>", "DEL ReturnStatement", "DEL SimpleName: AbstractNode", "DEL ReturnStatement", "DEL SimpleType: N", "DEL TextElement: Constructor. ", "DEL ThisExpression", "DEL SimpleName: N", "DEL SimpleName: List", "DEL MarkerAnnotation", "DEL SimpleName: MixinParentNode", "DEL SimpleName: StringBuilder", "DEL TypeParameter", "DEL SimpleName: getChildren", "DEL Javadoc", "DEL Modifier: public", "DEL Modifier: public", "DEL ReturnStatement", "DEL PrimitiveType: int", "DEL Block", "DEL ParameterizedType: List<N>", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL SimpleName: Override", "DEL Modifier: public", "DEL SimpleName: N", "DEL Block", "DEL SimpleName: appendTreeStringForChildren", "DEL SimpleName: MixinParentNode", "DEL ParameterizedType: List<? extends N>", "DEL SingleVariableDeclaration", "DEL SimpleName: child", "DEL SingleVariableDeclaration", "DEL SimpleName: children", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL SimpleName: N", "DEL SimpleName: getChild", "DEL SimpleName: parentMixin", "DEL SimpleName: List", "DEL SimpleName: indent", "DEL SuperConstructorInvocation", "DEL SimpleType: List", "DEL MethodDeclaration", "DEL SimpleName: removeChild", "DEL TagElement: @param", "DEL SimpleName: getChildren", "DEL PrimitiveType: int", "DEL SimpleName: index", "DEL SimpleName: children", "DEL SimpleName: parentMixin", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL SimpleName: removeChild", "DEL Modifier: public", "DEL SimpleName: index", "DEL SimpleName: AbstractParentNode", "DEL SimpleName: child", "DEL SimpleName: Override", "DEL SimpleName: String", "DEL SimpleName: parentMixin", "DEL SimpleName: children", "DEL SimpleName: addChildren", "DEL SimpleType: N", "DEL SimpleName: Override", "DEL MarkerAnnotation", "DEL SimpleType: AbstractParentNode", "DEL SimpleName: N", "DEL SimpleName: index", "DEL MethodInvocation", "DEL SimpleName: addChild", "DEL MethodDeclaration", "DEL TypeDeclaration: class", "DEL PrimitiveType: int", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL TagElement", "DEL Modifier: public", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: replaceChild", "DEL SimpleName: addChild", "DEL Modifier: public", "DEL WildcardType: ? extends N", "DEL MarkerAnnotation", "DEL SimpleName: addChildren", "DEL SingleVariableDeclaration", "DEL SimpleName: removeChild", "DEL SimpleType: N", "DEL Modifier: public", "DEL ParameterizedType: AbstractParentNode<N>", "DEL SimpleName: child", "DEL ParameterizedType: MixinParentNode<N>", "DEL Block", "DEL SimpleName: parentMixin", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SimpleType: N", "DEL SimpleName: Override", "DEL MarkerAnnotation", "DEL SimpleName: appendTreeStringForChildren", "DEL FieldAccess", "DEL Modifier: public", "DEL SimpleName: ParentNode", "DEL SimpleType: N", "DEL MarkerAnnotation", "DEL SimpleName: toTreeString", "DEL Block", "DEL SimpleName: N", "DEL SimpleName: N", "DEL SimpleName: getChild", "DEL TextElement: The mixin object that implements the ParentNode functionality. ", "DEL PrimitiveType: void", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL Block", "DEL SimpleName: N", "DEL MethodDeclaration", "DEL SimpleType: N", "DEL Modifier: public", "DEL SimpleType: MixinParentNode", "DEL SimpleName: index", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL SimpleName: indent", "DEL Block", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL FieldDeclaration", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleType: StringBuilder", "DEL SimpleType: N", "DEL SimpleName: index", "DEL MarkerAnnotation", "DEL SimpleName: parentMixin", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL SimpleName: addChild", "DEL SimpleName: Override", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: parentMixin", "DEL SimpleName: List", "DEL VariableDeclarationFragment", "DEL SimpleName: clearChildren", "DEL SimpleName: Override", "DEL SimpleName: getChildIndex", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: AbstractParentNode", "DEL MethodDeclaration", "DEL SimpleName: currChild", "DEL MarkerAnnotation", "DEL PrimitiveType: void", "DEL PrimitiveType: void", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL SimpleName: N", "DEL SimpleName: child", "DEL SimpleName: Override", "DEL PrimitiveType: int", "DEL SimpleType: N", "DEL MethodDeclaration", "DEL SimpleName: children", "DEL MethodInvocation", "DEL SimpleType: StringBuilder", "DEL Block"]}]}}, {"AbstractParentNode_diff": {"operations": ["Delete QualifiedName: com.google.template.soy.basetree(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.List(2)", "Delete ImportDeclaration(3)", "Delete TextElement: Abstract implementation of a ParentNode.(4)", "Delete TextElement: <p> Important: Do not use outside of Soy code (treat as superpackage-private).(5)", "Delete TagElement(6)", "Delete Javadoc(7)", "Delete Modifier: public(8)", "Delete Modifier: abstract(9)", "Delete SimpleName: AbstractParentNode(10)", "Delete SimpleName: N(11)", "Delete SimpleName: Node(12)", "Delete SimpleType: Node(13)", "Delete TypeParameter(14)", "Delete SimpleName: AbstractNode(15)", "Delete SimpleType: AbstractNode(16)", "Delete SimpleName: ParentNode(17)", "Delete SimpleType: ParentNode(18)", "Delete SimpleName: N(19)", "Delete SimpleType: N(20)", "Delete ParameterizedType: ParentNode<N>(21)", "Delete TextElement: The mixin object that implements the ParentNode functionality. (22)", "Delete TagElement(23)", "Delete Javadoc(24)", "Delete Modifier: private(25)", "Delete Modifier: final(26)", "Delete SimpleName: MixinParentNode(27)", "Delete SimpleType: MixinParentNode(28)", "Delete SimpleName: N(29)", "Delete SimpleType: N(30)", "Delete ParameterizedType: MixinParentNode<N>(31)", "Delete SimpleName: parentMixin(32)", "Delete VariableDeclarationFragment(33)", "Delete FieldDeclaration(34)", "Delete TextElement: Constructor. (35)", "Delete TagElement(36)", "Delete Javadoc(37)", "Delete Modifier: public(38)", "Delete SimpleName: AbstractParentNode(39)", "Delete SimpleName: parentMixin(40)", "Delete SimpleName: MixinParentNode(41)", "Delete SimpleType: MixinParentNode(42)", "Delete SimpleName: N(43)", "Delete SimpleType: N(44)", "Delete ParameterizedType: MixinParentNode<N>(45)", "Delete ThisExpression(46)", "Delete ClassInstanceCreation(47)", "Delete Assignment: =(48)", "Delete ExpressionStatement(49)", "Delete Block(50)", "Delete MethodDeclaration(51)", "Delete TextElement: Copy constructor.(52)", "Delete TagElement(53)", "Delete SimpleName: orig(54)", "Delete TextElement:  The node to copy.(55)", "Delete TagElement: @param(56)", "Delete Javadoc(57)", "Delete Modifier: protected(58)", "Delete SimpleName: AbstractParentNode(59)", "Delete SimpleName: AbstractParentNode(60)", "Delete SimpleType: AbstractParentNode(61)", "Delete SimpleName: N(62)", "Delete SimpleType: N(63)", "Delete ParameterizedType: AbstractParentNode<N>(64)", "Delete SimpleName: orig(65)", "Delete SingleVariableDeclaration(66)", "Delete SimpleName: orig(67)", "Delete SuperConstructorInvocation(68)", "Delete ThisExpression(69)", "Delete SimpleName: parentMixin(70)", "Delete FieldAccess(71)", "Delete SimpleName: MixinParentNode(72)", "Delete SimpleType: MixinParentNode(73)", "Delete SimpleName: N(74)", "Delete SimpleType: N(75)", "Delete ParameterizedType: MixinParentNode<N>(76)", "Delete QualifiedName: orig.parentMixin(77)", "Delete ThisExpression(78)", "Delete ClassInstanceCreation(79)", "Delete Assignment: =(80)", "Delete ExpressionStatement(81)", "Delete Block(82)", "Delete MethodDeclaration(83)", "Delete SimpleName: Override(84)", "Delete MarkerAnnotation(85)", "Delete Modifier: public(86)", "Delete PrimitiveType: int(87)", "Delete SimpleName: numChildren(88)", "Delete SimpleName: parentMixin(89)", "Delete SimpleName: numChildren(90)", "Delete MethodInvocation(91)", "Delete ReturnStatement(92)", "Delete Block(93)", "Delete MethodDeclaration(94)", "Delete SimpleName: Override(95)", "Delete MarkerAnnotation(96)", "Delete Modifier: public(97)", "Delete SimpleName: N(98)", "Delete SimpleType: N(99)", "Delete SimpleName: getChild(100)", "Delete PrimitiveType: int(101)", "Delete SimpleName: index(102)", "Delete SingleVariableDeclaration(103)", "Delete SimpleName: parentMixin(104)", "Delete SimpleName: getChild(105)", "Delete SimpleName: index(106)", "Delete MethodInvocation(107)", "Delete ReturnStatement(108)", "Delete Block(109)", "Delete MethodDeclaration(110)", "Delete SimpleName: Override(111)", "Delete MarkerAnnotation(112)", "Delete Modifier: public(113)", "Delete PrimitiveType: int(114)", "Delete SimpleName: getChildIndex(115)", "Delete SimpleName: N(116)", "Delete SimpleType: N(117)", "Delete SimpleName: child(118)", "Delete SingleVariableDeclaration(119)", "Delete SimpleName: parentMixin(120)", "Delete SimpleName: getChildIndex(121)", "Delete SimpleName: child(122)", "Delete MethodInvocation(123)", "Delete ReturnStatement(124)", "Delete Block(125)", "Delete MethodDeclaration(126)", "Delete SimpleName: Override(127)", "Delete MarkerAnnotation(128)", "Delete Modifier: public(129)", "Delete SimpleName: List(130)", "Delete SimpleType: List(131)", "Delete SimpleName: N(132)", "Delete SimpleType: N(133)", "Delete ParameterizedType: List<N>(134)", "Delete SimpleName: getChildren(135)", "Delete SimpleName: parentMixin(136)", "Delete SimpleName: getChildren(137)", "Delete MethodInvocation(138)", "Delete ReturnStatement(139)", "Delete Block(140)", "Delete MethodDeclaration(141)", "Delete SimpleName: Override(142)", "Delete MarkerAnnotation(143)", "Delete Modifier: public(144)", "Delete PrimitiveType: void(145)", "Delete SimpleName: addChild(146)", "Delete SimpleName: N(147)", "Delete SimpleType: N(148)", "Delete SimpleName: child(149)", "Delete SingleVariableDeclaration(150)", "Delete SimpleName: parentMixin(151)", "Delete SimpleName: addChild(152)", "Delete SimpleName: child(153)", "Delete MethodInvocation(154)", "Delete ExpressionStatement(155)", "Delete Block(156)", "Delete MethodDeclaration(157)", "Delete SimpleName: Override(158)", "Delete MarkerAnnotation(159)", "Delete Modifier: public(160)", "Delete PrimitiveType: void(161)", "Delete SimpleName: addChild(162)", "Delete PrimitiveType: int(163)", "Delete SimpleName: index(164)", "Delete SingleVariableDeclaration(165)", "Delete SimpleName: N(166)", "Delete SimpleType: N(167)", "Delete SimpleName: child(168)", "Delete SingleVariableDeclaration(169)", "Delete SimpleName: parentMixin(170)", "Delete SimpleName: addChild(171)", "Delete SimpleName: index(172)", "Delete SimpleName: child(173)", "Delete MethodInvocation(174)", "Delete ExpressionStatement(175)", "Delete Block(176)", "Delete MethodDeclaration(177)", "Delete SimpleName: Override(178)", "Delete MarkerAnnotation(179)", "Delete Modifier: public(180)", "Delete PrimitiveType: void(181)", "Delete SimpleName: removeChild(182)", "Delete PrimitiveType: int(183)", "Delete SimpleName: index(184)", "Delete SingleVariableDeclaration(185)", "Delete SimpleName: parentMixin(186)", "Delete SimpleName: removeChild(187)", "Delete SimpleName: index(188)", "Delete MethodInvocation(189)", "Delete ExpressionStatement(190)", "Delete Block(191)", "Delete MethodDeclaration(192)", "Delete SimpleName: Override(193)", "Delete MarkerAnnotation(194)", "Delete Modifier: public(195)", "Delete PrimitiveType: void(196)", "Delete SimpleName: removeChild(197)", "Delete SimpleName: N(198)", "Delete SimpleType: N(199)", "Delete SimpleName: child(200)", "Delete SingleVariableDeclaration(201)", "Delete SimpleName: parentMixin(202)", "Delete SimpleName: removeChild(203)", "Delete SimpleName: child(204)", "Delete MethodInvocation(205)", "Delete ExpressionStatement(206)", "Delete Block(207)", "Delete MethodDeclaration(208)", "Delete SimpleName: Override(209)", "Delete MarkerAnnotation(210)", "Delete Modifier: public(211)", "Delete PrimitiveType: void(212)", "Delete SimpleName: replaceChild(213)", "Delete PrimitiveType: int(214)", "Delete SimpleName: index(215)", "Delete SingleVariableDeclaration(216)", "Delete SimpleName: N(217)", "Delete SimpleType: N(218)", "Delete SimpleName: newChild(219)", "Delete SingleVariableDeclaration(220)", "Delete SimpleName: parentMixin(221)", "Delete SimpleName: replaceChild(222)", "Delete SimpleName: index(223)", "Delete SimpleName: newChild(224)", "Delete MethodInvocation(225)", "Delete ExpressionStatement(226)", "Delete Block(227)", "Delete MethodDeclaration(228)", "Delete SimpleName: Override(229)", "Delete MarkerAnnotation(230)", "Delete Modifier: public(231)", "Delete PrimitiveType: void(232)", "Delete SimpleName: replaceChild(233)", "Delete SimpleName: N(234)", "Delete SimpleType: N(235)", "Delete SimpleName: currChild(236)", "Delete SingleVariableDeclaration(237)", "Delete SimpleName: N(238)", "Delete SimpleType: N(239)", "Delete SimpleName: newChild(240)", "Delete SingleVariableDeclaration(241)", "Delete SimpleName: parentMixin(242)", "Delete SimpleName: replaceChild(243)", "Delete SimpleName: currChild(244)", "Delete SimpleName: newChild(245)", "Delete MethodInvocation(246)", "Delete ExpressionStatement(247)", "Delete Block(248)", "Delete MethodDeclaration(249)", "Delete SimpleName: Override(250)", "Delete MarkerAnnotation(251)", "Delete Modifier: public(252)", "Delete PrimitiveType: void(253)", "Delete SimpleName: clearChildren(254)", "Delete SimpleName: parentMixin(255)", "Delete SimpleName: clearChildren(256)", "Delete MethodInvocation(257)", "Delete ExpressionStatement(258)", "Delete Block(259)", "Delete MethodDeclaration(260)", "Delete SimpleName: Override(261)", "Delete MarkerAnnotation(262)", "Delete Modifier: public(263)", "Delete PrimitiveType: void(264)", "Delete SimpleName: addChildren(265)", "Delete SimpleName: List(266)", "Delete SimpleType: List(267)", "Delete SimpleName: N(268)", "Delete SimpleType: N(269)", "Delete WildcardType: ? extends N(270)", "Delete ParameterizedType: List<? extends N>(271)", "Delete SimpleName: children(272)", "Delete SingleVariableDeclaration(273)", "Delete SimpleName: parentMixin(274)", "Delete SimpleName: addChildren(275)", "Delete SimpleName: children(276)", "Delete MethodInvocation(277)", "Delete ExpressionStatement(278)", "Delete Block(279)", "Delete MethodDeclaration(280)", "Delete SimpleName: Override(281)", "Delete MarkerAnnotation(282)", "Delete Modifier: public(283)", "Delete PrimitiveType: void(284)", "Delete SimpleName: addChildren(285)", "Delete PrimitiveType: int(286)", "Delete SimpleName: index(287)", "Delete SingleVariableDeclaration(288)", "Delete SimpleName: List(289)", "Delete SimpleType: List(290)", "Delete SimpleName: N(291)", "Delete SimpleType: N(292)", "Delete WildcardType: ? extends N(293)", "Delete ParameterizedType: List<? extends N>(294)", "Delete SimpleName: children(295)", "Delete SingleVariableDeclaration(296)", "Delete SimpleName: parentMixin(297)", "Delete SimpleName: addChildren(298)", "Delete SimpleName: index(299)", "Delete SimpleName: children(300)", "Delete MethodInvocation(301)", "Delete ExpressionStatement(302)", "Delete Block(303)", "Delete MethodDeclaration(304)", "Delete SimpleName: Override(305)", "Delete MarkerAnnotation(306)", "Delete Modifier: public(307)", "Delete PrimitiveType: void(308)", "Delete SimpleName: appendSourceStringForChildren(309)", "Delete SimpleName: StringBuilder(310)", "Delete SimpleType: StringBuilder(311)", "Delete SimpleName: sb(312)", "Delete SingleVariableDeclaration(313)", "Delete SimpleName: parentMixin(314)", "Delete SimpleName: appendSourceStringForChildren(315)", "Delete SimpleName: sb(316)", "Delete MethodInvocation(317)", "Delete ExpressionStatement(318)", "Delete Block(319)", "Delete MethodDeclaration(320)", "Delete SimpleName: Override(321)", "Delete MarkerAnnotation(322)", "Delete Modifier: public(323)", "Delete PrimitiveType: void(324)", "Delete SimpleName: appendTreeStringForChildren(325)", "Delete SimpleName: StringBuilder(326)", "Delete SimpleType: StringBuilder(327)", "Delete SimpleName: sb(328)", "Delete SingleVariableDeclaration(329)", "Delete PrimitiveType: int(330)", "Delete SimpleName: indent(331)", "Delete SingleVariableDeclaration(332)", "Delete SimpleName: parentMixin(333)", "Delete SimpleName: appendTreeStringForChildren(334)", "Delete SimpleName: sb(335)", "Delete SimpleName: indent(336)", "Delete MethodInvocation(337)", "Delete ExpressionStatement(338)", "Delete Block(339)", "Delete MethodDeclaration(340)", "Delete SimpleName: Override(341)", "Delete MarkerAnnotation(342)", "Delete Modifier: public(343)", "Delete SimpleName: String(344)", "Delete SimpleType: String(345)", "Delete SimpleName: toTreeString(346)", "Delete PrimitiveType: int(347)", "Delete SimpleName: indent(348)", "Delete SingleVariableDeclaration(349)", "Delete SimpleName: parentMixin(350)", "Delete SimpleName: toTreeString(351)", "Delete SimpleName: indent(352)", "Delete MethodInvocation(353)", "Delete ReturnStatement(354)", "Delete Block(355)", "Delete MethodDeclaration(356)", "Delete TypeDeclaration: class(357)"]}}, {"Node_cluster": {"actions": [{"root": "UPDATE from Clones this node. The clone's parent pointer is set to null. to Copies this node. The clone's parent pointer is set to null.", "operations": ["UPD TextElement: Clones this node. The clone's parent pointer is set to null. from Clones this node. The clone's parent pointer is set to null. to Copies this node. The clone's parent pointer is set to null."]}, {"root": "INS TextElement: <p>All clone() overrides should follow this contract: to TagElement at 1", "operations": ["INS TextElement: <p>All clone() overrides should follow this contract: to TagElement at 1"]}, {"root": "INS TextElement: <ul> to TagElement at 2", "operations": ["INS TextElement: <ul> to TagElement at 2"]}, {"root": "INS TextElement: <li>only leaf classes (in the class hierarchy) should have non-abstract clone methods to TagElement at 3", "operations": ["INS TextElement: <li>only leaf classes (in the class hierarchy) should have non-abstract clone methods to TagElement at 3"]}, {"root": "INS TextElement: <li>all leaf classes should be final to TagElement at 4", "operations": ["INS TextElement: <li>all leaf classes should be final to TagElement at 4"]}, {"root": "INS TextElement: <li>all leaf copy constructors should be private to TagElement at 5", "operations": ["INS TextElement: <li>all leaf copy constructors should be private to TagElement at 5"]}, {"root": "INS TextElement: <li>all clone methods should look exactly like: <pre> to TagElement at 6", "operations": ["INS TextElement: <li>all clone methods should look exactly like: <pre> to TagElement at 6"]}, {"root": "INS TagElement: @code to TagElement at 7", "operations": ["INS TagElement: @code to TagElement at 7"]}, {"root": "INS TextElement: {@literal @}Override public T clone()  to TagElement at 8", "operations": ["INS TextElement: {@literal @}Override public T clone()  to TagElement at 8"]}, {"root": "INS TextElement: return new T(this); to TagElement at 9", "operations": ["INS TextElement: return new T(this); to TagElement at 9"]}, {"root": "INS TextElement: } to TagElement at 10", "operations": ["INS TextElement: } to TagElement at 10"]}, {"root": "INS TextElement: }</pre> to TagElement at 11", "operations": ["INS TextElement: }</pre> to TagElement at 11"]}, {"root": "INS TextElement: <li>all non-leaf copy constructors should be protected to TagElement at 12", "operations": ["INS TextElement: <li>all non-leaf copy constructors should be protected to TagElement at 12"]}, {"root": "INS TextElement: </ul> to TagElement at 13", "operations": ["INS TextElement: </ul> to TagElement at 13"]}, {"root": "INS TextElement: <p>NOTE: this means we do not ultimately delegate to Object.clone(), ever. to TagElement at 14", "operations": ["INS TextElement: <p>NOTE: this means we do not ultimately delegate to Object.clone(), ever. to TagElement at 14"]}, {"root": "INS TextElement: <p>TODO(lukes): The usecases for a clone method are few and far between.  Making the AST nodes to TagElement at 15", "operations": ["INS TextElement: <p>TODO(lukes): The usecases for a clone method are few and far between.  Making the AST nodes to TagElement at 15"]}, {"root": "INS TextElement: immutable (or at least unmodifiable) would be preferable to maintaining our clone() methods. to TagElement at 16", "operations": ["INS TextElement: immutable (or at least unmodifiable) would be preferable to maintaining our clone() methods. to TagElement at 16"]}]}}, {"Node_diff": {"operations": ["Update TextElement: Clones this node. The clone's parent pointer is set to null.(171) to Copies this node. The clone's parent pointer is set to null.", "Insert TextElement: <p>All clone() overrides should follow this contract:(172) into TagElement(188) at 1", "Insert TextElement: <ul>(173) into TagElement(188) at 2", "Insert TextElement: <li>only leaf classes (in the class hierarchy) should have non-abstract clone methods(174) into TagElement(188) at 3", "Insert TextElement: <li>all leaf classes should be final(175) into TagElement(188) at 4", "Insert TextElement: <li>all leaf copy constructors should be private(176) into TagElement(188) at 5", "Insert TextElement: <li>all clone methods should look exactly like: <pre>(177) into TagElement(188) at 6", "Insert TagElement: @code(178) into TagElement(188) at 7", "Insert TextElement: {@literal @}Override public T clone() (179) into TagElement(188) at 8", "Insert TextElement: return new T(this);(180) into TagElement(188) at 9", "Insert TextElement: }(181) into TagElement(188) at 10", "Insert TextElement: }</pre>(182) into TagElement(188) at 11", "Insert TextElement: <li>all non-leaf copy constructors should be protected(183) into TagElement(188) at 12", "Insert TextElement: </ul>(184) into TagElement(188) at 13", "Insert TextElement: <p>NOTE: this means we do not ultimately delegate to Object.clone(), ever.(185) into TagElement(188) at 14", "Insert TextElement: <p>TODO(lukes): The usecases for a clone method are few and far between.  Making the AST nodes(186) into TagElement(188) at 15", "Insert TextElement: immutable (or at least unmodifiable) would be preferable to maintaining our clone() methods.(187) into TagElement(188) at 16"]}}, {"AbstractExprNode_cluster": {"actions": []}}, {"AbstractExprNode_diff": {"operations": []}}, {"AbstractPrimitiveNode_cluster": {"actions": []}}, {"AbstractPrimitiveNode_diff": {"operations": []}}, {"BooleanNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"BooleanNode_diff": {"operations": ["Insert Modifier: final(11) into TypeDeclaration: class(121) at 2", "Update Modifier: protected(46) to private"]}}, {"DataAccessNode_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS QualifiedName: orig.isNullSafe to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 1", "INS FieldAccess to Assignment: = at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS Block to MethodDeclaration at 3", "INS SimpleName: DataAccessNode to SimpleType: DataAccessNode at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SuperConstructorInvocation to Block at 0", "INS SimpleName: orig to SuperConstructorInvocation at 0", "INS SimpleType: DataAccessNode to SingleVariableDeclaration at 0", "INS SimpleName: isNullSafe to FieldAccess at 1", "INS SimpleName: orig to SingleVariableDeclaration at 1", "INS SimpleName: DataAccessNode to MethodDeclaration at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 7"]}]}}, {"DataAccessNode_diff": {"operations": ["Insert MethodDeclaration(72) into TypeDeclaration: class(124) at 7", "Insert Modifier: protected(57) into MethodDeclaration(72) at 0", "Insert SimpleName: DataAccessNode(58) into MethodDeclaration(72) at 1", "Insert SingleVariableDeclaration(62) into MethodDeclaration(72) at 2", "Insert Block(71) into MethodDeclaration(72) at 3", "Insert SimpleType: DataAccessNode(60) into SingleVariableDeclaration(62) at 0", "Insert SimpleName: orig(61) into SingleVariableDeclaration(62) at 1", "Insert SuperConstructorInvocation(64) into Block(71) at 0", "Insert ExpressionStatement(70) into Block(71) at 1", "Insert SimpleName: DataAccessNode(59) into SimpleType: DataAccessNode(60) at 0", "Insert SimpleName: orig(63) into SuperConstructorInvocation(64) at 0", "Insert Assignment: =(69) into ExpressionStatement(70) at 0", "Insert FieldAccess(67) into Assignment: =(69) at 0", "Insert QualifiedName: orig.isNullSafe(68) into Assignment: =(69) at 1", "Insert ThisExpression(65) into FieldAccess(67) at 0", "Insert SimpleName: isNullSafe(66) into FieldAccess(67) at 1"]}}, {"ExprNode_cluster": {"actions": [{"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS SimpleName: Node to MethodRef at 0", "INS TextElement:  for a description of the clone contract. to TagElement at 2", "INS TagElement to Javadoc at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: clone to MethodRef at 1", "INS TextElement: See  to TagElement at 0", "INS MethodRef to TagElement: @link at 0", "INS TagElement: @link to TagElement at 1"]}]}}, {"ExprNode_diff": {"operations": ["Insert Javadoc(121) into MethodDeclaration(128) at 0", "Insert TagElement(120) into Javadoc(121) at 0", "Insert TextElement: See (114) into TagElement(120) at 0", "Insert TagElement: @link(118) into TagElement(120) at 1", "Insert TextElement:  for a description of the clone contract.(119) into TagElement(120) at 2", "Insert MethodRef(117) into TagElement: @link(118) at 0", "Insert SimpleName: Node(115) into MethodRef(117) at 0", "Insert SimpleName: clone(116) into MethodRef(117) at 1"]}}, {"ExprRootNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"ExprRootNode_diff": {"operations": ["Insert Modifier: final(11) into TypeDeclaration: class(134) at 2", "Update Modifier: protected(43) to private"]}}, {"FieldAccessNode_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS FieldAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SuperConstructorInvocation to Block at 0", "INS SimpleName: fieldName to FieldAccess at 1", "INS Modifier: private to MethodDeclaration at 0", "INS ThisExpression to FieldAccess at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: FieldAccessNode to MethodDeclaration at 1", "INS SimpleName: FieldAccessNode to SimpleType: FieldAccessNode at 0", "INS SimpleName: orig to SingleVariableDeclaration at 1", "INS SimpleName: orig to SuperConstructorInvocation at 0", "INS QualifiedName: orig.fieldName to Assignment: = at 1", "INS ExpressionStatement to Block at 1", "INS Block to MethodDeclaration at 3", "INS SimpleType: FieldAccessNode to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2"]}, {"root": "UPDATE from ExprNode to FieldAccessNode", "operations": ["UPD SimpleType: ExprNode from ExprNode to FieldAccessNode", "UPD SimpleName: ExprNode from ExprNode to FieldAccessNode"]}, {"root": "INS ThisExpression to ClassInstanceCreation at 1", "operations": ["INS ThisExpression to ClassInstanceCreation at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getChild", "DEL SimpleName: clone", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: fieldName", "operations": ["DEL SimpleName: fieldName"]}, {"root": "DEL SimpleName: isNullSafe", "operations": ["DEL SimpleName: isNullSafe"]}]}}, {"FieldAccessNode_diff": {"operations": ["Insert MethodDeclaration(79) into TypeDeclaration: class(207) at 7", "Insert Modifier: private(64) into MethodDeclaration(79) at 0", "Insert SimpleName: FieldAccessNode(65) into MethodDeclaration(79) at 1", "Insert SingleVariableDeclaration(69) into MethodDeclaration(79) at 2", "Insert Block(78) into MethodDeclaration(79) at 3", "Update SimpleType: ExprNode(110) to FieldAccessNode", "Insert SimpleType: FieldAccessNode(67) into SingleVariableDeclaration(69) at 0", "Insert SimpleName: orig(68) into SingleVariableDeclaration(69) at 1", "Insert SuperConstructorInvocation(71) into Block(78) at 0", "Insert ExpressionStatement(77) into Block(78) at 1", "Update SimpleName: ExprNode(109) to FieldAccessNode", "Insert SimpleName: FieldAccessNode(66) into SimpleType: FieldAccessNode(67) at 0", "Insert SimpleName: orig(70) into SuperConstructorInvocation(71) at 0", "Insert Assignment: =(76) into ExpressionStatement(77) at 0", "Insert FieldAccess(74) into Assignment: =(76) at 0", "Insert QualifiedName: orig.fieldName(75) into Assignment: =(76) at 1", "Insert ThisExpression(130) into ClassInstanceCreation(131) at 1", "Insert ThisExpression(72) into FieldAccess(74) at 0", "Insert SimpleName: fieldName(73) into FieldAccess(74) at 1", "Delete SimpleName: getChild(114)", "Delete NumberLiteral: 0(115)", "Delete MethodInvocation(116)", "Delete SimpleName: clone(117)", "Delete MethodInvocation(118)", "Delete SimpleName: fieldName(119)", "Delete SimpleName: isNullSafe(120)"]}}, {"FloatNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"FloatNode_diff": {"operations": ["Insert Modifier: final(11) into TypeDeclaration: class(125) at 2", "Update Modifier: protected(46) to private"]}}, {"FunctionNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"FunctionNode_diff": {"operations": ["Insert Modifier: final(7) into TypeDeclaration: class(161) at 2", "Update Modifier: protected(44) to private"]}}, {"GlobalNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"GlobalNode_diff": {"operations": ["Insert Modifier: final(11) into TypeDeclaration: class(121) at 2", "Update Modifier: protected(48) to private"]}}, {"IntegerNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"IntegerNode_diff": {"operations": ["Insert Modifier: final(13) into TypeDeclaration: class(177) at 2", "Update Modifier: protected(48) to private"]}}, {"ItemAccessNode_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS QualifiedName: orig.isDotSyntax to Assignment: = at 1", "INS ExpressionStatement to Block at 1", "INS SuperConstructorInvocation to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: orig to SuperConstructorInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: orig to SingleVariableDeclaration at 1", "INS SimpleName: ItemAccessNode to SimpleType: ItemAccessNode at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: isDotSyntax to FieldAccess at 1", "INS SimpleName: ItemAccessNode to MethodDeclaration at 1", "INS Block to MethodDeclaration at 3", "INS SimpleType: ItemAccessNode to SingleVariableDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0"]}, {"root": "UPDATE from ExprNode to ItemAccessNode", "operations": ["UPD SimpleName: ExprNode from ExprNode to ItemAccessNode", "UPD SimpleType: ExprNode from ExprNode to ItemAccessNode"]}, {"root": "INS ThisExpression to ClassInstanceCreation at 1", "operations": ["INS ThisExpression to ClassInstanceCreation at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: clone", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: getChild"]}, {"root": "DEL MethodInvocation", "operations": ["DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getChild", "DEL SimpleName: clone"]}, {"root": "DEL SimpleName: isNullSafe", "operations": ["DEL SimpleName: isNullSafe"]}, {"root": "DEL SimpleName: isDotSyntax", "operations": ["DEL SimpleName: isDotSyntax"]}]}}, {"ItemAccessNode_diff": {"operations": ["Insert MethodDeclaration(106) into TypeDeclaration: class(267) at 7", "Insert Modifier: private(91) into MethodDeclaration(106) at 0", "Insert SimpleName: ItemAccessNode(92) into MethodDeclaration(106) at 1", "Insert SingleVariableDeclaration(96) into MethodDeclaration(106) at 2", "Insert Block(105) into MethodDeclaration(106) at 3", "Update SimpleType: ExprNode(160) to ItemAccessNode", "Insert SimpleType: ItemAccessNode(94) into SingleVariableDeclaration(96) at 0", "Insert SimpleName: orig(95) into SingleVariableDeclaration(96) at 1", "Insert SuperConstructorInvocation(98) into Block(105) at 0", "Insert ExpressionStatement(104) into Block(105) at 1", "Update SimpleName: ExprNode(159) to ItemAccessNode", "Insert SimpleName: ItemAccessNode(93) into SimpleType: ItemAccessNode(94) at 0", "Insert SimpleName: orig(97) into SuperConstructorInvocation(98) at 0", "Insert Assignment: =(103) into ExpressionStatement(104) at 0", "Insert FieldAccess(101) into Assignment: =(103) at 0", "Insert QualifiedName: orig.isDotSyntax(102) into Assignment: =(103) at 1", "Insert ThisExpression(180) into ClassInstanceCreation(181) at 1", "Insert ThisExpression(99) into FieldAccess(101) at 0", "Insert SimpleName: isDotSyntax(100) into FieldAccess(101) at 1", "Delete SimpleName: getChild(164)", "Delete NumberLiteral: 0(165)", "Delete MethodInvocation(166)", "Delete SimpleName: clone(167)", "Delete MethodInvocation(168)", "Delete SimpleName: getChild(169)", "Delete NumberLiteral: 1(170)", "Delete MethodInvocation(171)", "Delete SimpleName: clone(172)", "Delete MethodInvocation(173)", "Delete SimpleName: isNullSafe(174)", "Delete SimpleName: isDotSyntax(175)"]}}, {"ListLiteralNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"ListLiteralNode_diff": {"operations": ["Insert Modifier: final(9) into TypeDeclaration: class(134) at 2", "Update Modifier: protected(37) to private"]}}, {"MapLiteralNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"MapLiteralNode_diff": {"operations": ["Insert Modifier: final(9) into TypeDeclaration: class(157) at 2", "Update Modifier: protected(37) to private"]}}, {"NullNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"NullNode_diff": {"operations": ["Insert Modifier: final(11) into TypeDeclaration: class(80) at 2", "Update Modifier: protected(24) to private"]}}, {"OperatorNodes_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private", "UPD Modifier: protected from protected to private", "UPD Modifier: protected from protected to private", "UPD Modifier: protected from protected to private", "UPD Modifier: protected from protected to private", "UPD Modifier: protected from protected to private", "UPD Modifier: protected from protected to private", "UPD Modifier: protected from protected to private", "UPD Modifier: protected from protected to private", "UPD Modifier: protected from protected to private", "UPD Modifier: protected from protected to private", "UPD Modifier: protected from protected to private", "UPD Modifier: protected from protected to private", "UPD Modifier: protected from protected to private", "UPD Modifier: protected from protected to private", "UPD Modifier: protected from protected to private", "UPD Modifier: protected from protected to private"]}]}}, {"OperatorNodes_diff": {"operations": ["Insert Modifier: final(16) into TypeDeclaration: class(60) at 2", "Insert Modifier: final(65) into TypeDeclaration: class(109) at 2", "Insert Modifier: final(114) into TypeDeclaration: class(158) at 2", "Insert Modifier: final(163) into TypeDeclaration: class(207) at 2", "Insert Modifier: final(212) into TypeDeclaration: class(256) at 2", "Insert Modifier: final(261) into TypeDeclaration: class(305) at 2", "Insert Modifier: final(310) into TypeDeclaration: class(354) at 2", "Insert Modifier: final(359) into TypeDeclaration: class(403) at 2", "Insert Modifier: final(408) into TypeDeclaration: class(452) at 2", "Insert Modifier: final(457) into TypeDeclaration: class(501) at 2", "Insert Modifier: final(506) into TypeDeclaration: class(550) at 2", "Insert Modifier: final(555) into TypeDeclaration: class(599) at 2", "Insert Modifier: final(604) into TypeDeclaration: class(648) at 2", "Insert Modifier: final(653) into TypeDeclaration: class(697) at 2", "Insert Modifier: final(702) into TypeDeclaration: class(746) at 2", "Insert Modifier: final(751) into TypeDeclaration: class(795) at 2", "Insert Modifier: final(800) into TypeDeclaration: class(844) at 2", "Update Modifier: protected(26) to private", "Update Modifier: protected(74) to private", "Update Modifier: protected(122) to private", "Update Modifier: protected(170) to private", "Update Modifier: protected(218) to private", "Update Modifier: protected(266) to private", "Update Modifier: protected(314) to private", "Update Modifier: protected(362) to private", "Update Modifier: protected(410) to private", "Update Modifier: protected(458) to private", "Update Modifier: protected(506) to private", "Update Modifier: protected(554) to private", "Update Modifier: protected(602) to private", "Update Modifier: protected(650) to private", "Update Modifier: protected(698) to private", "Update Modifier: protected(746) to private", "Update Modifier: protected(794) to private"]}}, {"StringNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"StringNode_diff": {"operations": ["Insert Modifier: final(13) into TypeDeclaration: class(156) at 2", "Update Modifier: protected(50) to private"]}}, {"VarNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"VarNode_diff": {"operations": ["Insert Modifier: final(12) into TypeDeclaration: class(124) at 2", "Update Modifier: protected(49) to private"]}}, {"VarRefNode_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 11"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS ThisExpression to ClassInstanceCreation at 1", "INS SimpleName: VarRefNode to SimpleType: VarRefNode at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: clone to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: VarRefNode to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 23", "INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 0"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "INS SimpleName: VarRefNode to MethodDeclaration at 2", "operations": ["INS SimpleName: VarRefNode to MethodDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SimpleName: orig to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: VarRefNode to SingleVariableDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS SuperConstructorInvocation to Block at 0", "operations": ["INS SimpleName: orig to SuperConstructorInvocation at 0", "INS SuperConstructorInvocation to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS QualifiedName: orig.name to Assignment: = at 1", "INS SimpleName: name to FieldAccess at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 2", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: isInjected to FieldAccess at 1", "INS QualifiedName: orig.isInjected to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: isNullSafeInjected to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS QualifiedName: orig.isNullSafeInjected to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS ExpressionStatement to Block at 4", "INS ThisExpression to FieldAccess at 0", "INS QualifiedName: orig.defn to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: defn to FieldAccess at 1"]}, {"root": "UPDATE from ExprNode to VarRefNode", "operations": ["UPD SimpleName: ExprNode from ExprNode to VarRefNode"]}, {"root": "MOVE from SimpleType: VarRefNode", "operations": ["MOV SimpleName: ExprNode to SimpleType: VarRefNode at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: VarRefNode to ClassInstanceCreation at 0"]}, {"root": "DEL SimpleType: ExprNode", "operations": ["DEL SimpleType: ExprNode"]}, {"root": "DEL SimpleName: clone", "operations": ["DEL SimpleName: clone"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: isNullSafeInjected", "DEL ClassInstanceCreation", "DEL SimpleName: isInjected", "DEL SimpleName: name", "DEL SimpleName: defn"]}]}}, {"VarRefNode_diff": {"operations": ["Move MethodDeclaration(326) into TypeDeclaration: class(423) at 11", "Insert MethodDeclaration(357) into TypeDeclaration: class(423) at 23", "Update Modifier: public(313) to private", "Insert SimpleName: VarRefNode(130) into MethodDeclaration(162) at 1", "Insert SingleVariableDeclaration(134) into MethodDeclaration(162) at 2", "Move MarkerAnnotation(312) into MethodDeclaration(357) at 0", "Insert Modifier: public(347) into MethodDeclaration(357) at 1", "Insert SimpleType: VarRefNode(349) into MethodDeclaration(357) at 2", "Insert SimpleName: clone(350) into MethodDeclaration(357) at 3", "Insert Block(356) into MethodDeclaration(357) at 4", "Insert SimpleType: VarRefNode(132) into SingleVariableDeclaration(134) at 0", "Insert SimpleName: orig(133) into SingleVariableDeclaration(134) at 1", "Insert SuperConstructorInvocation(136) into Block(161) at 0", "Insert ExpressionStatement(142) into Block(161) at 1", "Insert ExpressionStatement(148) into Block(161) at 2", "Insert ExpressionStatement(154) into Block(161) at 3", "Insert ExpressionStatement(160) into Block(161) at 4", "Insert SimpleName: VarRefNode(348) into SimpleType: VarRefNode(349) at 0", "Insert ReturnStatement(355) into Block(356) at 0", "Update SimpleName: ExprNode(314) to VarRefNode", "Move SimpleName: ExprNode(314) into SimpleType: VarRefNode(132) at 0", "Insert SimpleName: orig(135) into SuperConstructorInvocation(136) at 0", "Insert Assignment: =(141) into ExpressionStatement(142) at 0", "Insert Assignment: =(147) into ExpressionStatement(148) at 0", "Insert Assignment: =(153) into ExpressionStatement(154) at 0", "Insert Assignment: =(159) into ExpressionStatement(160) at 0", "Insert ClassInstanceCreation(354) into ReturnStatement(355) at 0", "Insert FieldAccess(139) into Assignment: =(141) at 0", "Insert QualifiedName: orig.name(140) into Assignment: =(141) at 1", "Insert FieldAccess(145) into Assignment: =(147) at 0", "Insert QualifiedName: orig.isInjected(146) into Assignment: =(147) at 1", "Insert FieldAccess(151) into Assignment: =(153) at 0", "Insert QualifiedName: orig.isNullSafeInjected(152) into Assignment: =(153) at 1", "Insert FieldAccess(157) into Assignment: =(159) at 0", "Insert QualifiedName: orig.defn(158) into Assignment: =(159) at 1", "Move SimpleType: VarRefNode(318) into ClassInstanceCreation(354) at 0", "Insert ThisExpression(353) into ClassInstanceCreation(354) at 1", "Insert ThisExpression(137) into FieldAccess(139) at 0", "Insert SimpleName: name(138) into FieldAccess(139) at 1", "Insert ThisExpression(143) into FieldAccess(145) at 0", "Insert SimpleName: isInjected(144) into FieldAccess(145) at 1", "Insert ThisExpression(149) into FieldAccess(151) at 0", "Insert SimpleName: isNullSafeInjected(150) into FieldAccess(151) at 1", "Insert ThisExpression(155) into FieldAccess(157) at 0", "Insert SimpleName: defn(156) into FieldAccess(157) at 1", "Delete SimpleType: ExprNode(315)", "Delete SimpleName: clone(316)", "Delete SimpleName: name(319)", "Delete SimpleName: isInjected(320)", "Delete SimpleName: isNullSafeInjected(321)", "Delete SimpleName: defn(322)", "Delete ClassInstanceCreation(323)", "Delete ReturnStatement(324)"]}}, {"SoyJsSrcOptions_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 18"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 43", "operations": ["INS Block to MethodDeclaration at 5", "INS Modifier: final to MethodDeclaration at 2", "INS ThisExpression to ClassInstanceCreation at 1", "INS ReturnStatement to Block at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 43", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: clone to MethodDeclaration at 4"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "UPDATE from CloneNotSupportedException to SoyJsSrcOptions", "operations": ["UPD SimpleName: CloneNotSupportedException from CloneNotSupportedException to SoyJsSrcOptions", "UPD SimpleType: CloneNotSupportedException from CloneNotSupportedException to SoyJsSrcOptions", "UPD SimpleName: clone from clone to SoyJsSrcOptions"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS SimpleName: googMsgsAreExternal to FieldAccess at 1", "INS QualifiedName: orig.shouldProvideBothSoyNamespacesAndJsFunctions to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 2", "INS QualifiedName: orig.shouldProvideRequireJsFunctions to Assignment: = at 1", "INS SimpleName: shouldProvideBothSoyNamespacesAndJsFunctions to FieldAccess at 1", "INS ExpressionStatement to Block at 5", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: shouldGenerateGoogMsgDefs to FieldAccess at 1", "INS ExpressionStatement to Block at 9", "INS QualifiedName: orig.shouldGenerateGoogMsgDefs to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 11", "INS SimpleName: useGoogIsRtlForBidiGlobalDir to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: shouldProvideRequireJsFunctions to FieldAccess at 1", "INS QualifiedName: orig.isUsingIjData to Assignment: = at 1", "INS ExpressionStatement to Block at 3", "INS FieldAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS QualifiedName: orig.useGoogIsRtlForBidiGlobalDir to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS ThisExpression to FieldAccess at 0", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS QualifiedName: orig.bidiGlobalDir to Assignment: = at 1", "INS SimpleName: isUsingIjData to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: codeStyle to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS Block to MethodDeclaration at 6", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS FieldAccess to Assignment: = at 0", "INS QualifiedName: orig.shouldAllowDeprecatedSyntax to Assignment: = at 1", "INS QualifiedName: orig.shouldGenerateJsdoc to Assignment: = at 1", "INS ExpressionStatement to Block at 6", "INS ExpressionStatement to Block at 8", "INS ExpressionStatement to Block at 10", "INS SimpleName: shouldAllowDeprecatedSyntax to FieldAccess at 1", "INS ExpressionStatement to Block at 4", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: shouldProvideRequireSoyNamespaces to FieldAccess at 1", "INS QualifiedName: orig.googMsgsAreExternal to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: bidiGlobalDir to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: shouldGenerateJsdoc to FieldAccess at 1", "INS SimpleName: shouldDeclareTopLevelNamespaces to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 7", "INS QualifiedName: orig.codeStyle to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS QualifiedName: orig.shouldProvideRequireSoyNamespaces to Assignment: = at 1", "INS QualifiedName: orig.shouldDeclareTopLevelNamespaces to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: SoyJsSrcOptions to MethodDeclaration at 3"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: CloneNotSupportedException to SingleVariableDeclaration at 0", "MOV SimpleName: cnse to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from cnse to orig", "operations": ["UPD SimpleName: cnse from cnse to orig"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: SoyJsSrcOptions to ClassInstanceCreation at 0"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: RuntimeException", "DEL ThrowStatement", "DEL SuperMethodInvocation", "DEL ClassInstanceCreation", "DEL TryStatement", "DEL StringLiteral: \"Cloneable interface removed from SoyJsSrcOptions.\"", "DEL Block", "DEL CatchClause", "DEL Block", "DEL Block", "DEL SingleVariableDeclaration", "DEL CastExpression", "DEL SimpleName: clone", "DEL SimpleType: RuntimeException", "DEL ReturnStatement"]}]}}, {"SoyJsSrcOptions_diff": {"operations": ["Move MethodDeclaration(765) into TypeDeclaration: class(832) at 18", "Insert MethodDeclaration(831) into TypeDeclaration: class(832) at 43", "Update Modifier: public(740) to private", "Update SimpleName: clone(744) to SoyJsSrcOptions", "Insert SingleVariableDeclaration(181) into MethodDeclaration(255) at 2", "Insert Block(254) into MethodDeclaration(255) at 3", "Move MarkerAnnotation(739) into MethodDeclaration(831) at 0", "Insert Modifier: public(820) into MethodDeclaration(831) at 1", "Insert Modifier: final(821) into MethodDeclaration(831) at 2", "Move SimpleType: SoyJsSrcOptions(743) into MethodDeclaration(831) at 3", "Insert SimpleName: clone(824) into MethodDeclaration(831) at 4", "Insert Block(830) into MethodDeclaration(831) at 5", "Update SimpleType: CloneNotSupportedException(753) to SoyJsSrcOptions", "Move SimpleType: CloneNotSupportedException(753) into SingleVariableDeclaration(181) at 0", "Update SimpleName: cnse(754) to orig", "Move SimpleName: cnse(754) into SingleVariableDeclaration(181) at 1", "Insert ExpressionStatement(187) into Block(254) at 0", "Insert ExpressionStatement(193) into Block(254) at 1", "Insert ExpressionStatement(199) into Block(254) at 2", "Insert ExpressionStatement(205) into Block(254) at 3", "Insert ExpressionStatement(211) into Block(254) at 4", "Insert ExpressionStatement(217) into Block(254) at 5", "Insert ExpressionStatement(223) into Block(254) at 6", "Insert ExpressionStatement(229) into Block(254) at 7", "Insert ExpressionStatement(235) into Block(254) at 8", "Insert ExpressionStatement(241) into Block(254) at 9", "Insert ExpressionStatement(247) into Block(254) at 10", "Insert ExpressionStatement(253) into Block(254) at 11", "Insert ReturnStatement(829) into Block(830) at 0", "Update SimpleName: CloneNotSupportedException(752) to SoyJsSrcOptions", "Insert Assignment: =(186) into ExpressionStatement(187) at 0", "Insert Assignment: =(192) into ExpressionStatement(193) at 0", "Insert Assignment: =(198) into ExpressionStatement(199) at 0", "Insert Assignment: =(204) into ExpressionStatement(205) at 0", "Insert Assignment: =(210) into ExpressionStatement(211) at 0", "Insert Assignment: =(216) into ExpressionStatement(217) at 0", "Insert Assignment: =(222) into ExpressionStatement(223) at 0", "Insert Assignment: =(228) into ExpressionStatement(229) at 0", "Insert Assignment: =(234) into ExpressionStatement(235) at 0", "Insert Assignment: =(240) into ExpressionStatement(241) at 0", "Insert Assignment: =(246) into ExpressionStatement(247) at 0", "Insert Assignment: =(252) into ExpressionStatement(253) at 0", "Insert ClassInstanceCreation(828) into ReturnStatement(829) at 0", "Insert FieldAccess(184) into Assignment: =(186) at 0", "Insert QualifiedName: orig.shouldAllowDeprecatedSyntax(185) into Assignment: =(186) at 1", "Insert FieldAccess(190) into Assignment: =(192) at 0", "Insert QualifiedName: orig.isUsingIjData(191) into Assignment: =(192) at 1", "Insert FieldAccess(196) into Assignment: =(198) at 0", "Insert QualifiedName: orig.codeStyle(197) into Assignment: =(198) at 1", "Insert FieldAccess(202) into Assignment: =(204) at 0", "Insert QualifiedName: orig.shouldGenerateJsdoc(203) into Assignment: =(204) at 1", "Insert FieldAccess(208) into Assignment: =(210) at 0", "Insert QualifiedName: orig.shouldProvideRequireSoyNamespaces(209) into Assignment: =(210) at 1", "Insert FieldAccess(214) into Assignment: =(216) at 0", "Insert QualifiedName: orig.shouldProvideRequireJsFunctions(215) into Assignment: =(216) at 1", "Insert FieldAccess(220) into Assignment: =(222) at 0", "Insert QualifiedName: orig.shouldProvideBothSoyNamespacesAndJsFunctions(221) into Assignment: =(222) at 1", "Insert FieldAccess(226) into Assignment: =(228) at 0", "Insert QualifiedName: orig.shouldDeclareTopLevelNamespaces(227) into Assignment: =(228) at 1", "Insert FieldAccess(232) into Assignment: =(234) at 0", "Insert QualifiedName: orig.shouldGenerateGoogMsgDefs(233) into Assignment: =(234) at 1", "Insert FieldAccess(238) into Assignment: =(240) at 0", "Insert QualifiedName: orig.googMsgsAreExternal(239) into Assignment: =(240) at 1", "Insert FieldAccess(244) into Assignment: =(246) at 0", "Insert QualifiedName: orig.bidiGlobalDir(245) into Assignment: =(246) at 1", "Insert FieldAccess(250) into Assignment: =(252) at 0", "Insert QualifiedName: orig.useGoogIsRtlForBidiGlobalDir(251) into Assignment: =(252) at 1", "Move SimpleType: SoyJsSrcOptions(746) into ClassInstanceCreation(828) at 0", "Insert ThisExpression(827) into ClassInstanceCreation(828) at 1", "Insert ThisExpression(182) into FieldAccess(184) at 0", "Insert SimpleName: shouldAllowDeprecatedSyntax(183) into FieldAccess(184) at 1", "Insert ThisExpression(188) into FieldAccess(190) at 0", "Insert SimpleName: isUsingIjData(189) into FieldAccess(190) at 1", "Insert ThisExpression(194) into FieldAccess(196) at 0", "Insert SimpleName: codeStyle(195) into FieldAccess(196) at 1", "Insert ThisExpression(200) into FieldAccess(202) at 0", "Insert SimpleName: shouldGenerateJsdoc(201) into FieldAccess(202) at 1", "Insert ThisExpression(206) into FieldAccess(208) at 0", "Insert SimpleName: shouldProvideRequireSoyNamespaces(207) into FieldAccess(208) at 1", "Insert ThisExpression(212) into FieldAccess(214) at 0", "Insert SimpleName: shouldProvideRequireJsFunctions(213) into FieldAccess(214) at 1", "Insert ThisExpression(218) into FieldAccess(220) at 0", "Insert SimpleName: shouldProvideBothSoyNamespacesAndJsFunctions(219) into FieldAccess(220) at 1", "Insert ThisExpression(224) into FieldAccess(226) at 0", "Insert SimpleName: shouldDeclareTopLevelNamespaces(225) into FieldAccess(226) at 1", "Insert ThisExpression(230) into FieldAccess(232) at 0", "Insert SimpleName: shouldGenerateGoogMsgDefs(231) into FieldAccess(232) at 1", "Insert ThisExpression(236) into FieldAccess(238) at 0", "Insert SimpleName: googMsgsAreExternal(237) into FieldAccess(238) at 1", "Insert ThisExpression(242) into FieldAccess(244) at 0", "Insert SimpleName: bidiGlobalDir(243) into FieldAccess(244) at 1", "Insert ThisExpression(248) into FieldAccess(250) at 0", "Insert SimpleName: useGoogIsRtlForBidiGlobalDir(249) into FieldAccess(250) at 1", "Delete Modifier: final(741)", "Delete SimpleName: clone(747)", "Delete SuperMethodInvocation(748)", "Delete CastExpression(749)", "Delete ReturnStatement(750)", "Delete Block(751)", "Delete SingleVariableDeclaration(755)", "Delete SimpleName: RuntimeException(756)", "Delete SimpleType: RuntimeException(757)", "Delete StringLiteral: \"Cloneable interface removed from SoyJsSrcOptions.\"(758)", "Delete ClassInstanceCreation(759)", "Delete ThrowStatement(760)", "Delete Block(761)", "Delete CatchClause(762)", "Delete TryStatement(763)", "Delete Block(764)"]}}, {"SoyPySrcOptions_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 9"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS SimpleName: clone to MethodDeclaration at 4", "INS Block to MethodDeclaration at 5", "INS ClassInstanceCreation to ReturnStatement at 0", "INS Modifier: final to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS ThisExpression to ClassInstanceCreation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 13"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "UPDATE from clone to SoyPySrcOptions", "operations": ["UPD SimpleName: clone from clone to SoyPySrcOptions", "UPD SimpleType: CloneNotSupportedException from CloneNotSupportedException to SoyPySrcOptions", "UPD SimpleName: CloneNotSupportedException from CloneNotSupportedException to SoyPySrcOptions"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS Block to MethodDeclaration at 6", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 2", "INS FieldAccess to Assignment: = at 0", "INS FieldAccess to Assignment: = at 0", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS QualifiedName: orig.runtimePath to Assignment: = at 1", "INS SimpleName: bidiIsRtlFn to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS QualifiedName: orig.bidiIsRtlFn to Assignment: = at 1", "INS SimpleName: translationPyModuleName to FieldAccess at 1", "INS QualifiedName: orig.translationPyModuleName to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: runtimePath to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: SoyPySrcOptions to MethodDeclaration at 3"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleName: cnse to SingleVariableDeclaration at 1", "MOV SimpleType: CloneNotSupportedException to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from cnse to orig", "operations": ["UPD SimpleName: cnse from cnse to orig"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: SoyPySrcOptions to ClassInstanceCreation at 0"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL SimpleType: RuntimeException", "DEL SuperMethodInvocation", "DEL SingleVariableDeclaration", "DEL CastExpression", "DEL SimpleName: RuntimeException", "DEL CatchClause", "DEL ClassInstanceCreation", "DEL Block", "DEL ThrowStatement", "DEL SimpleName: clone", "DEL ReturnStatement", "DEL TryStatement", "DEL Block", "DEL StringLiteral: \"Cloneable interface removed from SoyPySrcOptions.\""]}]}}, {"SoyPySrcOptions_diff": {"operations": ["Move MethodDeclaration(125) into TypeDeclaration: class(138) at 9", "Insert MethodDeclaration(137) into TypeDeclaration: class(138) at 13", "Update Modifier: public(100) to private", "Update SimpleName: clone(104) to SoyPySrcOptions", "Insert SingleVariableDeclaration(79) into MethodDeclaration(99) at 2", "Insert Block(98) into MethodDeclaration(99) at 3", "Move MarkerAnnotation(99) into MethodDeclaration(137) at 0", "Insert Modifier: public(126) into MethodDeclaration(137) at 1", "Insert Modifier: final(127) into MethodDeclaration(137) at 2", "Move SimpleType: SoyPySrcOptions(103) into MethodDeclaration(137) at 3", "Insert SimpleName: clone(130) into MethodDeclaration(137) at 4", "Insert Block(136) into MethodDeclaration(137) at 5", "Update SimpleType: CloneNotSupportedException(113) to SoyPySrcOptions", "Move SimpleType: CloneNotSupportedException(113) into SingleVariableDeclaration(79) at 0", "Update SimpleName: cnse(114) to orig", "Move SimpleName: cnse(114) into SingleVariableDeclaration(79) at 1", "Insert ExpressionStatement(85) into Block(98) at 0", "Insert ExpressionStatement(91) into Block(98) at 1", "Insert ExpressionStatement(97) into Block(98) at 2", "Insert ReturnStatement(135) into Block(136) at 0", "Update SimpleName: CloneNotSupportedException(112) to SoyPySrcOptions", "Insert Assignment: =(84) into ExpressionStatement(85) at 0", "Insert Assignment: =(90) into ExpressionStatement(91) at 0", "Insert Assignment: =(96) into ExpressionStatement(97) at 0", "Insert ClassInstanceCreation(134) into ReturnStatement(135) at 0", "Insert FieldAccess(82) into Assignment: =(84) at 0", "Insert QualifiedName: orig.runtimePath(83) into Assignment: =(84) at 1", "Insert FieldAccess(88) into Assignment: =(90) at 0", "Insert QualifiedName: orig.bidiIsRtlFn(89) into Assignment: =(90) at 1", "Insert FieldAccess(94) into Assignment: =(96) at 0", "Insert QualifiedName: orig.translationPyModuleName(95) into Assignment: =(96) at 1", "Move SimpleType: SoyPySrcOptions(106) into ClassInstanceCreation(134) at 0", "Insert ThisExpression(133) into ClassInstanceCreation(134) at 1", "Insert ThisExpression(80) into FieldAccess(82) at 0", "Insert SimpleName: runtimePath(81) into FieldAccess(82) at 1", "Insert ThisExpression(86) into FieldAccess(88) at 0", "Insert SimpleName: bidiIsRtlFn(87) into FieldAccess(88) at 1", "Insert ThisExpression(92) into FieldAccess(94) at 0", "Insert SimpleName: translationPyModuleName(93) into FieldAccess(94) at 1", "Delete Modifier: final(101)", "Delete SimpleName: clone(107)", "Delete SuperMethodInvocation(108)", "Delete CastExpression(109)", "Delete ReturnStatement(110)", "Delete Block(111)", "Delete SingleVariableDeclaration(115)", "Delete SimpleName: RuntimeException(116)", "Delete SimpleType: RuntimeException(117)", "Delete StringLiteral: \"Cloneable interface removed from SoyPySrcOptions.\"(118)", "Delete ClassInstanceCreation(119)", "Delete ThrowStatement(120)", "Delete Block(121)", "Delete CatchClause(122)", "Delete TryStatement(123)", "Delete Block(124)"]}}, {"SoyGeneralOptions_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 11"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 25", "operations": ["INS Block to MethodDeclaration at 5", "INS MethodDeclaration to TypeDeclaration: class at 25", "INS Modifier: final to MethodDeclaration at 2", "INS ThisExpression to ClassInstanceCreation at 1", "INS ClassInstanceCreation to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: clone to MethodDeclaration at 4", "INS ReturnStatement to Block at 0"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "UPDATE from CloneNotSupportedException to SoyGeneralOptions", "operations": ["UPD SimpleType: CloneNotSupportedException from CloneNotSupportedException to SoyGeneralOptions", "UPD SimpleName: CloneNotSupportedException from CloneNotSupportedException to SoyGeneralOptions", "UPD SimpleName: clone from clone to SoyGeneralOptions"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS FieldAccess to Assignment: = at 0", "INS SimpleName: supportContentSecurityPolicy to FieldAccess at 1", "INS ExpressionStatement to Block at 2", "INS ExpressionStatement to Block at 4", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 1", "INS FieldAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 3", "INS FieldAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: compileTimeGlobals to FieldAccess at 1", "INS Block to MethodDeclaration at 6", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: cssHandlingScheme to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 0", "INS QualifiedName: orig.cssHandlingScheme to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: declaredSyntaxVersion to FieldAccess at 1", "INS QualifiedName: orig.supportContentSecurityPolicy to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS QualifiedName: orig.declaredSyntaxVersion to Assignment: = at 1", "INS SimpleName: allowExternalCalls to FieldAccess at 1", "INS QualifiedName: orig.allowExternalCalls to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS QualifiedName: orig.compileTimeGlobals to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: SoyGeneralOptions to MethodDeclaration at 3", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: CloneNotSupportedException to SingleVariableDeclaration at 0", "MOV SimpleName: cnse to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from cnse to orig", "operations": ["UPD SimpleName: cnse from cnse to orig"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: SoyGeneralOptions to ClassInstanceCreation at 0"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL SimpleType: RuntimeException", "DEL TryStatement", "DEL ThrowStatement", "DEL CastExpression", "DEL SuperMethodInvocation", "DEL CatchClause", "DEL Block", "DEL SimpleName: clone", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: RuntimeException", "DEL Block", "DEL ClassInstanceCreation", "DEL StringLiteral: \"Cloneable interface removed from SoyGeneralOptions.\""]}]}}, {"SoyGeneralOptions_diff": {"operations": ["Move MethodDeclaration(482) into TypeDeclaration: class(507) at 11", "Insert MethodDeclaration(506) into TypeDeclaration: class(507) at 25", "Update Modifier: public(457) to private", "Update SimpleName: clone(461) to SoyGeneralOptions", "Insert SingleVariableDeclaration(135) into MethodDeclaration(167) at 2", "Insert Block(166) into MethodDeclaration(167) at 3", "Move MarkerAnnotation(456) into MethodDeclaration(506) at 0", "Insert Modifier: public(495) into MethodDeclaration(506) at 1", "Insert Modifier: final(496) into MethodDeclaration(506) at 2", "Move SimpleType: SoyGeneralOptions(460) into MethodDeclaration(506) at 3", "Insert SimpleName: clone(499) into MethodDeclaration(506) at 4", "Insert Block(505) into MethodDeclaration(506) at 5", "Update SimpleType: CloneNotSupportedException(470) to SoyGeneralOptions", "Move SimpleType: CloneNotSupportedException(470) into SingleVariableDeclaration(135) at 0", "Update SimpleName: cnse(471) to orig", "Move SimpleName: cnse(471) into SingleVariableDeclaration(135) at 1", "Insert ExpressionStatement(141) into Block(166) at 0", "Insert ExpressionStatement(147) into Block(166) at 1", "Insert ExpressionStatement(153) into Block(166) at 2", "Insert ExpressionStatement(159) into Block(166) at 3", "Insert ExpressionStatement(165) into Block(166) at 4", "Insert ReturnStatement(504) into Block(505) at 0", "Update SimpleName: CloneNotSupportedException(469) to SoyGeneralOptions", "Insert Assignment: =(140) into ExpressionStatement(141) at 0", "Insert Assignment: =(146) into ExpressionStatement(147) at 0", "Insert Assignment: =(152) into ExpressionStatement(153) at 0", "Insert Assignment: =(158) into ExpressionStatement(159) at 0", "Insert Assignment: =(164) into ExpressionStatement(165) at 0", "Insert ClassInstanceCreation(503) into ReturnStatement(504) at 0", "Insert FieldAccess(138) into Assignment: =(140) at 0", "Insert QualifiedName: orig.declaredSyntaxVersion(139) into Assignment: =(140) at 1", "Insert FieldAccess(144) into Assignment: =(146) at 0", "Insert QualifiedName: orig.allowExternalCalls(145) into Assignment: =(146) at 1", "Insert FieldAccess(150) into Assignment: =(152) at 0", "Insert QualifiedName: orig.cssHandlingScheme(151) into Assignment: =(152) at 1", "Insert FieldAccess(156) into Assignment: =(158) at 0", "Insert QualifiedName: orig.compileTimeGlobals(157) into Assignment: =(158) at 1", "Insert FieldAccess(162) into Assignment: =(164) at 0", "Insert QualifiedName: orig.supportContentSecurityPolicy(163) into Assignment: =(164) at 1", "Move SimpleType: SoyGeneralOptions(463) into ClassInstanceCreation(503) at 0", "Insert ThisExpression(502) into ClassInstanceCreation(503) at 1", "Insert ThisExpression(136) into FieldAccess(138) at 0", "Insert SimpleName: declaredSyntaxVersion(137) into FieldAccess(138) at 1", "Insert ThisExpression(142) into FieldAccess(144) at 0", "Insert SimpleName: allowExternalCalls(143) into FieldAccess(144) at 1", "Insert ThisExpression(148) into FieldAccess(150) at 0", "Insert SimpleName: cssHandlingScheme(149) into FieldAccess(150) at 1", "Insert ThisExpression(154) into FieldAccess(156) at 0", "Insert SimpleName: compileTimeGlobals(155) into FieldAccess(156) at 1", "Insert ThisExpression(160) into FieldAccess(162) at 0", "Insert SimpleName: supportContentSecurityPolicy(161) into FieldAccess(162) at 1", "Delete Modifier: final(458)", "Delete SimpleName: clone(464)", "Delete SuperMethodInvocation(465)", "Delete CastExpression(466)", "Delete ReturnStatement(467)", "Delete Block(468)", "Delete SingleVariableDeclaration(472)", "Delete SimpleName: RuntimeException(473)", "Delete SimpleType: RuntimeException(474)", "Delete StringLiteral: \"Cloneable interface removed from SoyGeneralOptions.\"(475)", "Delete ClassInstanceCreation(476)", "Delete ThrowStatement(477)", "Delete Block(478)", "Delete CatchClause(479)", "Delete TryStatement(480)", "Delete Block(481)"]}}, {"AbstractParentCommandNode_cluster": {"actions": []}}, {"AbstractParentCommandNode_diff": {"operations": []}}, {"AbstractSoyNode_cluster": {"actions": []}}, {"AbstractSoyNode_diff": {"operations": []}}, {"CallDelegateNode_cluster": {"actions": [{"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"CallDelegateNode_diff": {"operations": ["Update Modifier: protected(1067) to private"]}}, {"CssNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"CssNode_diff": {"operations": ["Insert Modifier: final(39) into TypeDeclaration: class(476) at 2", "Update Modifier: protected(231) to private"]}}, {"DebuggerNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"DebuggerNode_diff": {"operations": ["Insert Modifier: final(10) into TypeDeclaration: class(82) at 2", "Update Modifier: protected(34) to private"]}}, {"ExprUnion_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 8"]}, {"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 12", "INS Modifier: public to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: clone to MethodDeclaration at 4", "INS Block to MethodDeclaration at 5"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "UPDATE from clone to ExprUnion", "operations": ["UPD SimpleName: clone from clone to ExprUnion"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: orig to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 1", "MOV SimpleType: ExprUnion to MethodDeclaration at 3", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: ExprUnion to SingleVariableDeclaration at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ThisExpression to FieldAccess at 0", "INS QualifiedName: orig.expr to InfixExpression: != at 0", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: != to ConditionalExpression at 0", "INS QualifiedName: orig.expr to MethodInvocation at 0", "INS NullLiteral to ConditionalExpression at 2", "INS ExpressionStatement to Block at 0", "INS FieldAccess to Assignment: = at 0", "INS ConditionalExpression to Assignment: = at 1", "INS MethodInvocation to ConditionalExpression at 1", "INS SimpleName: expr to FieldAccess at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: exprText to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS QualifiedName: orig.exprText to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 1", "INS ThisExpression to FieldAccess at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "INS ThisExpression to ClassInstanceCreation at 1", "operations": ["INS ThisExpression to ClassInstanceCreation at 1"]}, {"root": "MOVE from InfixExpression: !=", "operations": ["MOV NullLiteral to InfixExpression: != at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: clone to MethodInvocation at 1"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ParenthesizedExpression", "DEL ClassInstanceCreation", "DEL SimpleName: expr", "DEL ConditionalExpression", "DEL InfixExpression: !=", "DEL SimpleName: expr", "DEL ReturnStatement", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: exprText", "operations": ["DEL SimpleName: exprText"]}]}}, {"ExprUnion_diff": {"operations": ["Move MethodDeclaration(235) into TypeDeclaration: class(253) at 8", "Insert Modifier: final(29) into TypeDeclaration: class(253) at 2", "Insert MethodDeclaration(252) into TypeDeclaration: class(253) at 12", "Update Modifier: public(214) to private", "Update SimpleName: clone(217) to ExprUnion", "Insert SingleVariableDeclaration(183) into MethodDeclaration(204) at 2", "Move Javadoc(211) into MethodDeclaration(252) at 0", "Move MarkerAnnotation(213) into MethodDeclaration(252) at 1", "Insert Modifier: public(242) into MethodDeclaration(252) at 2", "Move SimpleType: ExprUnion(216) into MethodDeclaration(252) at 3", "Insert SimpleName: clone(245) into MethodDeclaration(252) at 4", "Insert Block(251) into MethodDeclaration(252) at 5", "Move SimpleType: ExprUnion(223) into SingleVariableDeclaration(183) at 0", "Insert SimpleName: orig(182) into SingleVariableDeclaration(183) at 1", "Insert ExpressionStatement(196) into Block(203) at 0", "Insert ExpressionStatement(202) into Block(203) at 1", "Insert ReturnStatement(250) into Block(251) at 0", "Insert Assignment: =(195) into ExpressionStatement(196) at 0", "Insert Assignment: =(201) into ExpressionStatement(202) at 0", "Move ClassInstanceCreation(231) into ReturnStatement(250) at 0", "Insert FieldAccess(186) into Assignment: =(195) at 0", "Insert ConditionalExpression(194) into Assignment: =(195) at 1", "Insert FieldAccess(199) into Assignment: =(201) at 0", "Insert QualifiedName: orig.exprText(200) into Assignment: =(201) at 1", "Insert ThisExpression(248) into ClassInstanceCreation(249) at 1", "Insert ThisExpression(184) into FieldAccess(186) at 0", "Insert SimpleName: expr(185) into FieldAccess(186) at 1", "Insert InfixExpression: !=(189) into ConditionalExpression(194) at 0", "Insert MethodInvocation(192) into ConditionalExpression(194) at 1", "Insert NullLiteral(193) into ConditionalExpression(194) at 2", "Insert ThisExpression(197) into FieldAccess(199) at 0", "Insert SimpleName: exprText(198) into FieldAccess(199) at 1", "Insert QualifiedName: orig.expr(187) into InfixExpression: !=(189) at 0", "Move NullLiteral(219) into InfixExpression: !=(189) at 1", "Insert QualifiedName: orig.expr(190) into MethodInvocation(192) at 0", "Move SimpleName: clone(225) into MethodInvocation(192) at 1", "Delete SimpleName: expr(218)", "Delete InfixExpression: !=(220)", "Delete ParenthesizedExpression(221)", "Delete SimpleName: expr(224)", "Delete MethodInvocation(226)", "Delete ClassInstanceCreation(227)", "Delete ConditionalExpression(232)", "Delete ReturnStatement(233)", "Delete SimpleName: exprText(230)"]}}, {"ForNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"ForNode_diff": {"operations": ["Insert Modifier: final(39) into TypeDeclaration: class(437) at 2", "Update Modifier: protected(266) to private"]}}, {"ForeachIfemptyNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"ForeachIfemptyNode_diff": {"operations": ["Insert Modifier: final(9) into TypeDeclaration: class(113) at 2", "Update Modifier: protected(35) to private"]}}, {"ForeachNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"ForeachNode_diff": {"operations": ["Insert Modifier: final(24) into TypeDeclaration: class(200) at 2", "Update Modifier: protected(99) to private"]}}, {"ForeachNonemptyNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"ForeachNonemptyNode_diff": {"operations": ["Insert Modifier: final(17) into TypeDeclaration: class(212) at 2", "Update Modifier: protected(70) to private"]}}, {"IfCondNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"IfCondNode_diff": {"operations": ["Insert Modifier: final(22) into TypeDeclaration: class(333) at 2", "Update Modifier: protected(183) to private"]}}, {"IfElseNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"IfElseNode_diff": {"operations": ["Insert Modifier: final(9) into TypeDeclaration: class(99) at 2", "Update Modifier: protected(35) to private"]}}, {"IfNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"IfNode_diff": {"operations": ["Insert Modifier: final(13) into TypeDeclaration: class(124) at 2", "Update Modifier: protected(47) to private"]}}, {"LetContentNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"LetContentNode_diff": {"operations": ["Insert Modifier: final(21) into TypeDeclaration: class(527) at 2", "Update Modifier: protected(133) to private"]}}, {"LetValueNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"LetValueNode_diff": {"operations": ["Insert Modifier: final(19) into TypeDeclaration: class(215) at 2", "Update Modifier: protected(125) to private"]}}, {"LogNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"LogNode_diff": {"operations": ["Insert Modifier: final(10) into TypeDeclaration: class(82) at 2", "Update Modifier: protected(34) to private"]}}, {"MsgFallbackGroupNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"MsgFallbackGroupNode_diff": {"operations": ["Insert Modifier: final(25) into TypeDeclaration: class(136) at 2", "Update Modifier: protected(59) to private"]}}, {"MsgHtmlTagNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"MsgHtmlTagNode_diff": {"operations": ["Insert Modifier: final(29) into TypeDeclaration: class(837) at 2", "Update Modifier: protected(523) to private"]}}, {"MsgNode_cluster": {"actions": [{"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"MsgNode_diff": {"operations": ["Update Modifier: protected(377) to private"]}}, {"MsgPlaceholderNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"MsgPlaceholderNode_diff": {"operations": ["Insert Modifier: final(9) into TypeDeclaration: class(241) at 2", "Update Modifier: protected(102) to private"]}}, {"MsgPluralCaseNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"MsgPluralCaseNode_diff": {"operations": ["Insert Modifier: final(11) into TypeDeclaration: class(143) at 2", "Update Modifier: protected(93) to private"]}}, {"MsgPluralDefaultNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"MsgPluralDefaultNode_diff": {"operations": ["Insert Modifier: final(9) into TypeDeclaration: class(69) at 2", "Update Modifier: protected(35) to private"]}}, {"MsgPluralNode_cluster": {"actions": [{"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"MsgPluralNode_diff": {"operations": ["Update Modifier: protected(279) to private"]}}, {"MsgPluralRemainderNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"MsgPluralRemainderNode_diff": {"operations": ["Insert Modifier: final(9) into TypeDeclaration: class(145) at 2", "Update Modifier: protected(54) to private"]}}, {"MsgSelectCaseNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"MsgSelectCaseNode_diff": {"operations": ["Insert Modifier: final(17) into TypeDeclaration: class(167) at 2", "Update Modifier: protected(116) to private"]}}, {"MsgSelectDefaultNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"MsgSelectDefaultNode_diff": {"operations": ["Insert Modifier: final(9) into TypeDeclaration: class(69) at 2", "Update Modifier: protected(35) to private"]}}, {"MsgSelectNode_cluster": {"actions": [{"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"MsgSelectNode_diff": {"operations": ["Update Modifier: protected(196) to private"]}}, {"PrintDirectiveNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"PrintDirectiveNode_diff": {"operations": ["Insert Modifier: final(35) into TypeDeclaration: class(432) at 2", "Update Modifier: protected(273) to private"]}}, {"PrintNode_cluster": {"actions": [{"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"PrintNode_diff": {"operations": ["Update Modifier: protected(241) to private"]}}, {"RawTextNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"RawTextNode_diff": {"operations": ["Insert Modifier: final(17) into TypeDeclaration: class(248) at 2", "Update Modifier: protected(124) to private"]}}, {"SoyFileNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"SoyFileNode_diff": {"operations": ["Insert Modifier: final(45) into TypeDeclaration: class(1197) at 2", "Update Modifier: protected(763) to private"]}}, {"SoyFileSetNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}, {"root": "UPDATE from clone to copy", "operations": ["UPD SimpleName: clone from clone to copy"]}]}}, {"SoyFileSetNode_diff": {"operations": ["Insert Modifier: final(13) into TypeDeclaration: class(136) at 2", "Update Modifier: protected(71) to private", "Update SimpleName: clone(83) to copy"]}}, {"SwitchCaseNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"SwitchCaseNode_diff": {"operations": ["Insert Modifier: final(21) into TypeDeclaration: class(213) at 2", "Update Modifier: protected(101) to private"]}}, {"SwitchDefaultNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"SwitchDefaultNode_diff": {"operations": ["Insert Modifier: final(9) into TypeDeclaration: class(69) at 2", "Update Modifier: protected(35) to private"]}}, {"SwitchNode_cluster": {"actions": [{"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"SwitchNode_diff": {"operations": ["Update Modifier: protected(98) to private"]}}, {"TemplateBasicNode_cluster": {"actions": [{"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"TemplateBasicNode_diff": {"operations": ["Update Modifier: protected(85) to private"]}}, {"TemplateDelegateNode_cluster": {"actions": [{"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"TemplateDelegateNode_diff": {"operations": ["Update Modifier: protected(393) to private"]}}, {"XidNode_cluster": {"actions": [{"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"XidNode_diff": {"operations": ["Update Modifier: protected(103) to private"]}}, {"FixedIdGenerator_cluster": {"actions": [{"root": "UPDATE from clone to copy", "operations": ["UPD SimpleName: clone from clone to copy"]}]}}, {"FixedIdGenerator_diff": {"operations": ["Update SimpleName: clone(74) to copy"]}}, {"IdGenerator_cluster": {"actions": [{"root": "UPDATE from clone to copy", "operations": ["UPD SimpleName: clone from clone to copy"]}]}}, {"IdGenerator_diff": {"operations": ["Update SimpleName: clone(26) to copy"]}}, {"IncrementingIdGenerator_cluster": {"actions": [{"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}, {"root": "UPDATE from clone to copy", "operations": ["UPD SimpleName: clone from clone to copy"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ClassInstanceCreation to ReturnStatement at 0", "INS ThisExpression to ClassInstanceCreation at 1", "INS ReturnStatement to Block at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: IncrementingIdGenerator to ClassInstanceCreation at 0"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL SimpleType: IncrementingIdGenerator", "DEL SimpleName: clone", "DEL SimpleName: IncrementingIdGenerator", "DEL VariableDeclarationFragment"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: currId", "DEL FieldAccess", "DEL QualifiedName: clone.currId", "DEL Assignment: =", "DEL ThisExpression", "DEL ExpressionStatement"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: clone"]}]}}, {"IncrementingIdGenerator_diff": {"operations": ["Update Modifier: protected(27) to private", "Update SimpleName: clone(56) to copy", "Insert ReturnStatement(61) into Block(62) at 0", "Insert ClassInstanceCreation(60) into ReturnStatement(61) at 0", "Move SimpleType: IncrementingIdGenerator(58) into ClassInstanceCreation(60) at 0", "Insert ThisExpression(59) into ClassInstanceCreation(60) at 1", "Delete SimpleName: clone(59)", "Delete SimpleName: IncrementingIdGenerator(60)", "Delete SimpleType: IncrementingIdGenerator(61)", "Delete ClassInstanceCreation(62)", "Delete VariableDeclarationFragment(63)", "Delete VariableDeclarationStatement(64)", "Delete QualifiedName: clone.currId(65)", "Delete ThisExpression(66)", "Delete SimpleName: currId(67)", "Delete FieldAccess(68)", "Delete Assignment: =(69)", "Delete ExpressionStatement(70)", "Delete SimpleName: clone(71)", "Delete ReturnStatement(72)"]}}, {"GoogMsgDefNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"GoogMsgDefNode_diff": {"operations": ["Insert Modifier: final(33) into TypeDeclaration: class(328) at 2", "Update Modifier: protected(213) to private"]}}, {"GoogMsgRefNode_cluster": {"actions": [{"root": "INS Modifier: final to TypeDeclaration: class at 2", "operations": ["INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}]}}, {"GoogMsgRefNode_diff": {"operations": ["Insert Modifier: final(14) into TypeDeclaration: class(139) at 2", "Update Modifier: protected(61) to private"]}}], "commit_stats": [{"total_files": 72, "deleted_files": 1, "testing": "True", "maintenance": "False", "build": "False"}]}