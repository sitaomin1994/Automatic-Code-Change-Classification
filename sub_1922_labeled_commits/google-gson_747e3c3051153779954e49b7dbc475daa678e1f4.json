{"application": "google-gson", "csha": "747e3c3051153779954e49b7dbc475daa678e1f4", "files": [{"Gson_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: com.google.gson.stream.JsonWriter to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 21", "operations": ["INS Modifier: final to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS PrimitiveType: boolean to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: htmlSafe to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 21"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 33", "operations": ["INS SimpleName: toJson to MethodInvocation at 0", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS SimpleType: JsonWriter to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 7", "INS TextElement: . to TagElement at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS TextElement:  src to TagElement: @code at 0", "INS TextElement:  to to TagElement at 4", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @code to TagElement at 5", "INS SimpleName: toJsonTree to MethodInvocation at 0", "INS SimpleName: src to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: typeOfSrc to SingleVariableDeclaration at 1", "INS SimpleName: JsonWriter to SimpleType: JsonWriter at 0", "INS SimpleName: typeOfSrc to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 33", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS TagElement to Javadoc at 0", "INS TextElement: Writes the JSON representation of  to TagElement at 0", "INS TagElement: @code to TagElement at 1", "INS SimpleName: writer to SingleVariableDeclaration at 1", "INS SimpleName: Type to SimpleType: Type at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: src to SingleVariableDeclaration at 1", "INS SimpleName: toJson to MethodDeclaration at 3", "INS SimpleName: writer to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ExpressionStatement to Block at 0", "INS TextElement:  of type  to TagElement at 2", "INS TagElement: @code to TagElement at 3", "INS TextElement:  typeOfSrc to TagElement: @code at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS TextElement:  writer to TagElement: @code at 0", "INS SimpleType: Type to SingleVariableDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 36", "operations": ["INS TryStatement to Block at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS TextElement:  to  to TagElement at 2", "INS TextElement: . to TagElement at 4", "INS SimpleName: isHtmlSafe to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SimpleName: e to ClassInstanceCreation at 1", "INS VariableDeclarationStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ThrowStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: writer to MethodInvocation at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS Block to TryStatement at 2", "INS SimpleName: serializeNulls to MethodInvocation at 3", "INS SimpleName: setLenient to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: writer to SingleVariableDeclaration at 1", "INS SimpleType: JsonWriter to SingleVariableDeclaration at 0", "INS SimpleName: writer to MethodInvocation at 0", "INS SimpleName: writer to MethodInvocation at 0", "INS SimpleName: writer to MethodInvocation at 0", "INS TextElement: Writes the JSON for  to TagElement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: oldLenient to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 3", "INS TextElement:  writer to TagElement: @code at 0", "INS SimpleName: writer to MethodInvocation at 0", "INS SimpleName: setLenient to MethodInvocation at 1", "INS SimpleName: writer to MethodInvocation at 0", "INS CatchClause to TryStatement at 1", "INS SimpleName: oldHtmlSafe to MethodInvocation at 2", "INS SimpleName: setHtmlSafe to MethodInvocation at 1", "INS SimpleName: Streams to MethodInvocation at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleType: RuntimeException to ClassInstanceCreation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setHtmlSafe to MethodInvocation at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: jsonElement to MethodInvocation at 2", "INS BooleanLiteral: true to MethodInvocation at 2", "INS TextElement:  jsonElement to TagElement: @code at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: oldHtmlSafe to VariableDeclarationFragment at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: jsonElement to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @code to TagElement at 3", "INS SimpleName: JsonWriter to SimpleType: JsonWriter at 0", "INS SimpleName: toJson to MethodDeclaration at 3", "INS ExpressionStatement to Block at 0", "INS SimpleName: isLenient to MethodInvocation at 1", "INS SimpleType: JsonElement to SingleVariableDeclaration at 0", "INS SimpleName: writer to MethodInvocation at 4", "INS Block to MethodDeclaration at 6", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: oldLenient to VariableDeclarationFragment at 0", "INS SimpleName: htmlSafe to MethodInvocation at 2", "INS SimpleName: write to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 36", "INS TagElement to Javadoc at 0", "INS SimpleName: JsonElement to SimpleType: JsonElement at 0", "INS Block to CatchClause at 1", "INS Block to TryStatement at 0", "INS TagElement: @code to TagElement at 1", "INS SimpleType: IOException to SingleVariableDeclaration at 0", "INS SimpleName: e to SingleVariableDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 41", "operations": ["INS SimpleName: reader to SingleVariableDeclaration at 1", "INS SimpleName: Type to SimpleType: Type at 0", "INS Block to MethodDeclaration at 9", "INS ExpressionStatement to Block at 0", "INS TextElement:  typeOfT to TagElement: @code at 0", "INS SimpleName: fromJson to MethodDeclaration at 5", "INS TextElement:  reader to TagElement: @code at 0", "INS SimpleName: Streams to MethodInvocation at 0", "INS TextElement:  and convert it to an object to TagElement at 2", "INS SimpleName: setLenient to MethodInvocation at 1", "INS TryStatement to Block at 2", "INS TextElement: of type  to TagElement at 3", "INS Block to TryStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: oldLenient to MethodInvocation at 2", "INS SimpleName: reader to MethodInvocation at 2", "INS TagElement: @code to TagElement at 4", "INS SimpleName: reader to MethodInvocation at 0", "INS SimpleName: typeOfT to SingleVariableDeclaration at 1", "INS SimpleName: reader to MethodInvocation at 0", "INS SimpleName: oldLenient to VariableDeclarationFragment at 0", "INS TypeParameter to MethodDeclaration at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: parse to MethodInvocation at 1", "INS SimpleType: JsonParseException to MethodDeclaration at 8", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleType: T to MethodDeclaration at 4", "INS SimpleType: Type to SingleVariableDeclaration at 0", "INS Block to TryStatement at 0", "INS SimpleName: root to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS TagElement: @code to TagElement at 1", "INS Modifier: public to MethodDeclaration at 2", "INS ExpressionStatement to Block at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: JsonParseException to SimpleType: JsonParseException at 0", "INS SimpleName: T to TypeParameter at 0", "INS TextElement: Reads the next JSON value from  to TagElement at 0", "INS BooleanLiteral: true to MethodInvocation at 2", "INS TextElement: . to TagElement at 5", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: setLenient to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 41", "INS SimpleName: reader to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS TagElement to Javadoc at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: isLenient to MethodInvocation at 1", "INS SimpleName: T to SimpleType: T at 0", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 10", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 10", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: htmlSafe to SingleVariableDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleMemberAnnotation to MethodDeclaration at 1"]}, {"root": "INS ExpressionStatement to Block at 9", "operations": ["INS ThisExpression to FieldAccess at 0", "INS SimpleName: htmlSafe to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: htmlSafe to Assignment: = at 1", "INS ExpressionStatement to Block at 9", "INS FieldAccess to Assignment: = at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleName: T to SimpleType: T at 0", "INS ThisExpression to MethodInvocation at 0", "INS ClassInstanceCreation to MethodInvocation at 3", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleType: T to MethodInvocation at 1", "INS SimpleName: fromJson to MethodInvocation at 2"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: JsonReader to SingleVariableDeclaration at 0"]}, {"root": "INS BooleanLiteral: true to ConstructorInvocation at 9", "operations": ["INS BooleanLiteral: true to ConstructorInvocation at 9"]}, {"root": "INS MethodInvocation to MethodInvocation at 1", "operations": ["INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: toJsonTree to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ClassInstanceCreation to MethodInvocation at 2", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleType: JsonWriter to ClassInstanceCreation at 0", "INS SimpleName: JsonWriter to SimpleType: JsonWriter at 0", "INS SimpleName: toJson to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: jsonElement to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from jsonReader to typeOfT", "operations": ["UPD SimpleName: jsonReader from jsonReader to typeOfT"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: jsonReader to MethodInvocation at 4"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: typeOfSrc to MethodInvocation at 2", "MOV SimpleName: src to MethodInvocation at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleName: json to ClassInstanceCreation at 1", "MOV SimpleType: JsonReader to ClassInstanceCreation at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: JsonElement to VariableDeclarationStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 1"]}, {"root": "INS SimpleName: classOfT to MethodInvocation at 2", "operations": ["INS SimpleName: classOfT to MethodInvocation at 2"]}, {"root": "INS SimpleType: JsonReader to ClassInstanceCreation at 0", "operations": ["INS SimpleName: JsonReader to SimpleType: JsonReader at 0", "INS SimpleType: JsonReader to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: json to ClassInstanceCreation at 1", "operations": ["INS SimpleName: json to ClassInstanceCreation at 1"]}, {"root": "UPDATE from formatter to Streams", "operations": ["UPD SimpleName: formatter from formatter to Streams"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: formatter to MethodInvocation at 0", "MOV SimpleName: format to MethodInvocation at 1", "MOV SimpleName: writer to MethodInvocation at 2"]}, {"root": "UPDATE from format to writerForAppendable", "operations": ["UPD SimpleName: format from format to writerForAppendable"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: jsonElement", "DEL Block", "DEL NullLiteral", "DEL InfixExpression: ==", "DEL SimpleName: serializeNulls", "DEL SimpleName: writer", "DEL MethodInvocation", "DEL SimpleName: writeOutNullString", "DEL InfixExpression: &&", "DEL IfStatement", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: serializeNulls", "DEL MethodInvocation", "DEL SimpleName: jsonElement"]}, {"root": "DEL SimpleName: json", "operations": ["DEL SimpleName: json"]}, {"root": "DEL CastExpression", "operations": ["DEL SimpleType: Type", "DEL SimpleName: Type", "DEL CastExpression", "DEL SimpleName: classOfT"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: jsonReader"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: setLenient", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL BooleanLiteral: true"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: root", "DEL SimpleName: jsonReader", "DEL SimpleName: Streams", "DEL VariableDeclarationStatement", "DEL SimpleName: parse"]}]}}, {"Gson_diff": {"operations": ["Insert ImportDeclaration(5) into CompilationUnit(1986) at 2", "Insert QualifiedName: com.google.gson.stream.JsonWriter(4) into ImportDeclaration(5) at 0", "Insert FieldDeclaration(292) into TypeDeclaration: class(1985) at 21", "Insert MethodDeclaration(1115) into TypeDeclaration: class(1985) at 33", "Insert MethodDeclaration(1297) into TypeDeclaration: class(1985) at 36", "Insert MethodDeclaration(1726) into TypeDeclaration: class(1985) at 41", "Insert Modifier: private(287) into FieldDeclaration(292) at 0", "Insert Modifier: final(288) into FieldDeclaration(292) at 1", "Insert PrimitiveType: boolean(289) into FieldDeclaration(292) at 2", "Insert VariableDeclarationFragment(291) into FieldDeclaration(292) at 3", "Insert SingleVariableDeclaration(493) into MethodDeclaration(555) at 10", "Insert Javadoc(1090) into MethodDeclaration(1115) at 0", "Insert Modifier: public(1091) into MethodDeclaration(1115) at 1", "Insert PrimitiveType: void(1092) into MethodDeclaration(1115) at 2", "Insert SimpleName: toJson(1093) into MethodDeclaration(1115) at 3", "Insert SingleVariableDeclaration(1097) into MethodDeclaration(1115) at 4", "Insert SingleVariableDeclaration(1101) into MethodDeclaration(1115) at 5", "Insert SingleVariableDeclaration(1105) into MethodDeclaration(1115) at 6", "Insert Block(1114) into MethodDeclaration(1115) at 7", "Insert Javadoc(1229) into MethodDeclaration(1297) at 0", "Insert Modifier: public(1230) into MethodDeclaration(1297) at 1", "Insert PrimitiveType: void(1231) into MethodDeclaration(1297) at 2", "Insert SimpleName: toJson(1232) into MethodDeclaration(1297) at 3", "Insert SingleVariableDeclaration(1236) into MethodDeclaration(1297) at 4", "Insert SingleVariableDeclaration(1240) into MethodDeclaration(1297) at 5", "Insert Block(1296) into MethodDeclaration(1297) at 6", "Insert Javadoc(1668) into MethodDeclaration(1726) at 0", "Move SingleMemberAnnotation(1505) into MethodDeclaration(1726) at 1", "Insert Modifier: public(1672) into MethodDeclaration(1726) at 2", "Insert TypeParameter(1674) into MethodDeclaration(1726) at 3", "Insert SimpleType: T(1676) into MethodDeclaration(1726) at 4", "Insert SimpleName: fromJson(1677) into MethodDeclaration(1726) at 5", "Insert SingleVariableDeclaration(1681) into MethodDeclaration(1726) at 6", "Insert SingleVariableDeclaration(1685) into MethodDeclaration(1726) at 7", "Insert SimpleType: JsonParseException(1687) into MethodDeclaration(1726) at 8", "Insert Block(1725) into MethodDeclaration(1726) at 9", "Insert SimpleName: htmlSafe(290) into VariableDeclarationFragment(291) at 0", "Insert PrimitiveType: boolean(491) into SingleVariableDeclaration(493) at 0", "Insert SimpleName: htmlSafe(492) into SingleVariableDeclaration(493) at 1", "Insert ExpressionStatement(553) into Block(554) at 9", "Insert TagElement(1089) into Javadoc(1090) at 0", "Insert SimpleType: Object(1095) into SingleVariableDeclaration(1097) at 0", "Insert SimpleName: src(1096) into SingleVariableDeclaration(1097) at 1", "Insert SimpleType: Type(1099) into SingleVariableDeclaration(1101) at 0", "Insert SimpleName: typeOfSrc(1100) into SingleVariableDeclaration(1101) at 1", "Insert SimpleType: JsonWriter(1103) into SingleVariableDeclaration(1105) at 0", "Insert SimpleName: writer(1104) into SingleVariableDeclaration(1105) at 1", "Insert ExpressionStatement(1113) into Block(1114) at 0", "Insert TagElement(1228) into Javadoc(1229) at 0", "Insert SimpleType: JsonElement(1234) into SingleVariableDeclaration(1236) at 0", "Insert SimpleName: jsonElement(1235) into SingleVariableDeclaration(1236) at 1", "Insert SimpleType: JsonWriter(1238) into SingleVariableDeclaration(1240) at 0", "Insert SimpleName: writer(1239) into SingleVariableDeclaration(1240) at 1", "Insert VariableDeclarationStatement(1247) into Block(1296) at 0", "Insert ExpressionStatement(1252) into Block(1296) at 1", "Insert VariableDeclarationStatement(1259) into Block(1296) at 2", "Insert ExpressionStatement(1264) into Block(1296) at 3", "Insert TryStatement(1295) into Block(1296) at 4", "Insert ReturnStatement(1656) into Block(1657) at 0", "Insert TagElement(1667) into Javadoc(1668) at 0", "Insert SimpleName: T(1673) into TypeParameter(1674) at 0", "Insert SimpleName: T(1675) into SimpleType: T(1676) at 0", "Move SimpleType: JsonReader(1523) into SingleVariableDeclaration(1681) at 0", "Insert SimpleName: reader(1680) into SingleVariableDeclaration(1681) at 1", "Insert SimpleType: Type(1683) into SingleVariableDeclaration(1685) at 0", "Insert SimpleName: typeOfT(1684) into SingleVariableDeclaration(1685) at 1", "Insert SimpleName: JsonParseException(1686) into SimpleType: JsonParseException(1687) at 0", "Insert VariableDeclarationStatement(1694) into Block(1725) at 0", "Insert ExpressionStatement(1699) into Block(1725) at 1", "Insert TryStatement(1724) into Block(1725) at 2", "Insert BooleanLiteral: true(442) into ConstructorInvocation(443) at 9", "Insert Assignment: =(552) into ExpressionStatement(553) at 0", "Insert TextElement: Writes the JSON representation of (1079) into TagElement(1089) at 0", "Insert TagElement: @code(1081) into TagElement(1089) at 1", "Insert TextElement:  of type (1082) into TagElement(1089) at 2", "Insert TagElement: @code(1084) into TagElement(1089) at 3", "Insert TextElement:  to(1085) into TagElement(1089) at 4", "Insert TagElement: @code(1087) into TagElement(1089) at 5", "Insert TextElement: .(1088) into TagElement(1089) at 6", "Insert SimpleName: Object(1094) into SimpleType: Object(1095) at 0", "Insert SimpleName: Type(1098) into SimpleType: Type(1099) at 0", "Insert SimpleName: JsonWriter(1102) into SimpleType: JsonWriter(1103) at 0", "Insert MethodInvocation(1112) into ExpressionStatement(1113) at 0", "Insert TextElement: Writes the JSON for (1221) into TagElement(1228) at 0", "Insert TagElement: @code(1223) into TagElement(1228) at 1", "Insert TextElement:  to (1224) into TagElement(1228) at 2", "Insert TagElement: @code(1226) into TagElement(1228) at 3", "Insert TextElement: .(1227) into TagElement(1228) at 4", "Insert SimpleName: JsonElement(1233) into SimpleType: JsonElement(1234) at 0", "Insert SimpleName: JsonWriter(1237) into SimpleType: JsonWriter(1238) at 0", "Insert PrimitiveType: boolean(1241) into VariableDeclarationStatement(1247) at 0", "Insert VariableDeclarationFragment(1246) into VariableDeclarationStatement(1247) at 1", "Insert MethodInvocation(1251) into ExpressionStatement(1252) at 0", "Insert PrimitiveType: boolean(1253) into VariableDeclarationStatement(1259) at 0", "Insert VariableDeclarationFragment(1258) into VariableDeclarationStatement(1259) at 1", "Insert MethodInvocation(1263) into ExpressionStatement(1264) at 0", "Insert Block(1272) into TryStatement(1295) at 0", "Insert CatchClause(1283) into TryStatement(1295) at 1", "Insert Block(1294) into TryStatement(1295) at 2", "Insert MethodInvocation(1655) into ReturnStatement(1656) at 0", "Insert TextElement: Reads the next JSON value from (1659) into TagElement(1667) at 0", "Insert TagElement: @code(1661) into TagElement(1667) at 1", "Insert TextElement:  and convert it to an object(1662) into TagElement(1667) at 2", "Insert TextElement: of type (1663) into TagElement(1667) at 3", "Insert TagElement: @code(1665) into TagElement(1667) at 4", "Insert TextElement: .(1666) into TagElement(1667) at 5", "Insert SimpleName: Type(1682) into SimpleType: Type(1683) at 0", "Insert PrimitiveType: boolean(1688) into VariableDeclarationStatement(1694) at 0", "Insert VariableDeclarationFragment(1693) into VariableDeclarationStatement(1694) at 1", "Insert MethodInvocation(1698) into ExpressionStatement(1699) at 0", "Insert Block(1717) into TryStatement(1724) at 0", "Insert Block(1723) into TryStatement(1724) at 1", "Insert FieldAccess(550) into Assignment: =(552) at 0", "Insert SimpleName: htmlSafe(551) into Assignment: =(552) at 1", "Insert MethodInvocation(920) into MethodInvocation(922) at 1", "Insert TextElement:  src(1080) into TagElement: @code(1081) at 0", "Insert TextElement:  typeOfSrc(1083) into TagElement: @code(1084) at 0", "Insert TextElement:  writer(1086) into TagElement: @code(1087) at 0", "Insert SimpleName: toJson(1106) into MethodInvocation(1112) at 0", "Insert MethodInvocation(1110) into MethodInvocation(1112) at 1", "Insert SimpleName: writer(1111) into MethodInvocation(1112) at 2", "Insert ExpressionStatement(1205) into Block(1206) at 1", "Insert TextElement:  jsonElement(1222) into TagElement: @code(1223) at 0", "Insert TextElement:  writer(1225) into TagElement: @code(1226) at 0", "Insert SimpleName: oldLenient(1242) into VariableDeclarationFragment(1246) at 0", "Insert MethodInvocation(1245) into VariableDeclarationFragment(1246) at 1", "Insert SimpleName: writer(1248) into MethodInvocation(1251) at 0", "Insert SimpleName: setLenient(1249) into MethodInvocation(1251) at 1", "Insert BooleanLiteral: true(1250) into MethodInvocation(1251) at 2", "Insert SimpleName: oldHtmlSafe(1254) into VariableDeclarationFragment(1258) at 0", "Insert MethodInvocation(1257) into VariableDeclarationFragment(1258) at 1", "Insert SimpleName: writer(1260) into MethodInvocation(1263) at 0", "Insert SimpleName: setHtmlSafe(1261) into MethodInvocation(1263) at 1", "Insert SimpleName: htmlSafe(1262) into MethodInvocation(1263) at 2", "Insert ExpressionStatement(1271) into Block(1272) at 0", "Insert SingleVariableDeclaration(1276) into CatchClause(1283) at 0", "Insert Block(1282) into CatchClause(1283) at 1", "Insert ExpressionStatement(1288) into Block(1294) at 0", "Insert ExpressionStatement(1293) into Block(1294) at 1", "Insert ThisExpression(1646) into MethodInvocation(1655) at 0", "Insert SimpleType: T(1648) into MethodInvocation(1655) at 1", "Insert SimpleName: fromJson(1649) into MethodInvocation(1655) at 2", "Insert ClassInstanceCreation(1653) into MethodInvocation(1655) at 3", "Update SimpleName: jsonReader(1531) to typeOfT", "Move SimpleName: jsonReader(1531) into MethodInvocation(1655) at 4", "Insert TextElement:  reader(1660) into TagElement: @code(1661) at 0", "Insert TextElement:  typeOfT(1664) into TagElement: @code(1665) at 0", "Insert SimpleName: oldLenient(1689) into VariableDeclarationFragment(1693) at 0", "Insert MethodInvocation(1692) into VariableDeclarationFragment(1693) at 1", "Insert SimpleName: reader(1695) into MethodInvocation(1698) at 0", "Insert SimpleName: setLenient(1696) into MethodInvocation(1698) at 1", "Insert BooleanLiteral: true(1697) into MethodInvocation(1698) at 2", "Insert VariableDeclarationStatement(1708) into Block(1717) at 0", "Move ReturnStatement(1552) into Block(1717) at 1", "Insert ExpressionStatement(1722) into Block(1723) at 0", "Insert ThisExpression(548) into FieldAccess(550) at 0", "Insert SimpleName: htmlSafe(549) into FieldAccess(550) at 1", "Insert SimpleName: toJsonTree(917) into MethodInvocation(920) at 0", "Move SimpleName: src(899) into MethodInvocation(920) at 1", "Move SimpleName: typeOfSrc(900) into MethodInvocation(920) at 2", "Insert SimpleName: toJsonTree(1107) into MethodInvocation(1110) at 0", "Insert SimpleName: src(1108) into MethodInvocation(1110) at 1", "Insert SimpleName: typeOfSrc(1109) into MethodInvocation(1110) at 2", "Insert MethodInvocation(1204) into ExpressionStatement(1205) at 0", "Insert SimpleName: writer(1243) into MethodInvocation(1245) at 0", "Insert SimpleName: isLenient(1244) into MethodInvocation(1245) at 1", "Insert SimpleName: writer(1255) into MethodInvocation(1257) at 0", "Insert SimpleName: isHtmlSafe(1256) into MethodInvocation(1257) at 1", "Insert MethodInvocation(1270) into ExpressionStatement(1271) at 0", "Insert SimpleType: IOException(1274) into SingleVariableDeclaration(1276) at 0", "Insert SimpleName: e(1275) into SingleVariableDeclaration(1276) at 1", "Insert ThrowStatement(1281) into Block(1282) at 0", "Insert MethodInvocation(1287) into ExpressionStatement(1288) at 0", "Insert MethodInvocation(1292) into ExpressionStatement(1293) at 0", "Insert SimpleName: T(1647) into SimpleType: T(1648) at 0", "Move SimpleType: JsonReader(1526) into ClassInstanceCreation(1653) at 0", "Move SimpleName: json(1527) into ClassInstanceCreation(1653) at 1", "Insert SimpleName: reader(1690) into MethodInvocation(1692) at 0", "Insert SimpleName: isLenient(1691) into MethodInvocation(1692) at 1", "Move SimpleType: JsonElement(1537) into VariableDeclarationStatement(1708) at 0", "Insert VariableDeclarationFragment(1707) into VariableDeclarationStatement(1708) at 1", "Insert MethodInvocation(1721) into ExpressionStatement(1722) at 0", "Insert SimpleName: toJson(1195) into MethodInvocation(1204) at 0", "Insert SimpleName: jsonElement(1196) into MethodInvocation(1204) at 1", "Insert ClassInstanceCreation(1203) into MethodInvocation(1204) at 2", "Insert SimpleName: Streams(1265) into MethodInvocation(1270) at 0", "Insert SimpleName: write(1266) into MethodInvocation(1270) at 1", "Insert SimpleName: jsonElement(1267) into MethodInvocation(1270) at 2", "Insert SimpleName: serializeNulls(1268) into MethodInvocation(1270) at 3", "Insert SimpleName: writer(1269) into MethodInvocation(1270) at 4", "Insert SimpleName: IOException(1273) into SimpleType: IOException(1274) at 0", "Insert ClassInstanceCreation(1280) into ThrowStatement(1281) at 0", "Insert SimpleName: writer(1284) into MethodInvocation(1287) at 0", "Insert SimpleName: setLenient(1285) into MethodInvocation(1287) at 1", "Insert SimpleName: oldLenient(1286) into MethodInvocation(1287) at 2", "Insert SimpleName: writer(1289) into MethodInvocation(1292) at 0", "Insert SimpleName: setHtmlSafe(1290) into MethodInvocation(1292) at 1", "Insert SimpleName: oldHtmlSafe(1291) into MethodInvocation(1292) at 2", "Move ClassInstanceCreation(1528) into MethodInvocation(1566) at 1", "Insert SimpleName: classOfT(1565) into MethodInvocation(1566) at 2", "Insert SimpleName: root(1702) into VariableDeclarationFragment(1707) at 0", "Insert MethodInvocation(1706) into VariableDeclarationFragment(1707) at 1", "Insert SimpleName: reader(1718) into MethodInvocation(1721) at 0", "Insert SimpleName: setLenient(1719) into MethodInvocation(1721) at 1", "Insert SimpleName: oldLenient(1720) into MethodInvocation(1721) at 2", "Insert SimpleType: JsonWriter(1198) into ClassInstanceCreation(1203) at 0", "Insert MethodInvocation(1202) into ClassInstanceCreation(1203) at 1", "Insert SimpleType: RuntimeException(1278) into ClassInstanceCreation(1280) at 0", "Insert SimpleName: e(1279) into ClassInstanceCreation(1280) at 1", "Insert SimpleType: JsonReader(1562) into ClassInstanceCreation(1564) at 0", "Insert SimpleName: json(1563) into ClassInstanceCreation(1564) at 1", "Insert SimpleName: Streams(1703) into MethodInvocation(1706) at 0", "Insert SimpleName: parse(1704) into MethodInvocation(1706) at 1", "Insert SimpleName: reader(1705) into MethodInvocation(1706) at 2", "Insert SimpleName: JsonWriter(1197) into SimpleType: JsonWriter(1198) at 0", "Update SimpleName: formatter(1149) to Streams", "Move SimpleName: formatter(1149) into MethodInvocation(1202) at 0", "Update SimpleName: format(1150) to writerForAppendable", "Move SimpleName: format(1150) into MethodInvocation(1202) at 1", "Move SimpleName: writer(1152) into MethodInvocation(1202) at 2", "Insert SimpleName: RuntimeException(1277) into SimpleType: RuntimeException(1278) at 0", "Insert SimpleName: JsonReader(1561) into SimpleType: JsonReader(1562) at 0", "Delete SimpleName: jsonElement(1138)", "Delete NullLiteral(1139)", "Delete InfixExpression: ==(1140)", "Delete SimpleName: serializeNulls(1141)", "Delete InfixExpression: &&(1142)", "Delete SimpleName: writeOutNullString(1143)", "Delete SimpleName: writer(1144)", "Delete MethodInvocation(1145)", "Delete ExpressionStatement(1146)", "Delete Block(1147)", "Delete IfStatement(1148)", "Delete SimpleName: jsonElement(1151)", "Delete SimpleName: serializeNulls(1153)", "Delete MethodInvocation(1154)", "Delete ExpressionStatement(1155)", "Delete SimpleName: json(1434)", "Delete SimpleName: Type(1435)", "Delete SimpleType: Type(1436)", "Delete SimpleName: classOfT(1437)", "Delete CastExpression(1438)", "Delete SimpleName: jsonReader(1524)", "Delete VariableDeclarationFragment(1529)", "Delete VariableDeclarationStatement(1530)", "Delete SimpleName: setLenient(1532)", "Delete BooleanLiteral: true(1533)", "Delete MethodInvocation(1534)", "Delete ExpressionStatement(1535)", "Delete SimpleName: root(1538)", "Delete SimpleName: Streams(1539)", "Delete SimpleName: parse(1540)", "Delete SimpleName: jsonReader(1541)", "Delete MethodInvocation(1542)", "Delete VariableDeclarationFragment(1543)", "Delete VariableDeclarationStatement(1544)"]}}, {"GsonBuilder_cluster": {"actions": [{"root": "INS SimpleName: escapeHtmlChars to ClassInstanceCreation at 10", "operations": ["INS SimpleName: escapeHtmlChars to ClassInstanceCreation at 10"]}]}}, {"GsonBuilder_diff": {"operations": ["Insert SimpleName: escapeHtmlChars(1728) into ClassInstanceCreation(1729) at 10"]}}, {"JsonParser_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 5", "operations": ["INS SimpleType: JsonElement to MethodDeclaration at 2", "INS SimpleName: parse to MethodDeclaration at 3", "INS SimpleName: JsonElement to SimpleType: JsonElement at 0", "INS SimpleName: parse to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: JsonParseException to MethodDeclaration at 5", "INS SimpleName: JsonParseException to SimpleType: JsonParseException at 0", "INS MethodInvocation to ReturnStatement at 0", "INS Block to MethodDeclaration at 6", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement: text is not valid JSON to TagElement: @throws at 2", "INS TagElement: @throws to Javadoc at 1", "INS TextElement:  if there is an IOException or if the specified to TagElement: @throws at 1", "INS SimpleName: JsonParseException to TagElement: @throws at 0", "INS TextElement: Returns the next value from the JSON stream as a parse tree. to TagElement at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: json to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: JsonReader to SingleVariableDeclaration at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS SimpleName: isLenient to MethodInvocation at 1", "INS SimpleName: lenient to VariableDeclarationFragment at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: json to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS BooleanLiteral: true to MethodInvocation at 2", "INS SimpleName: json to MethodInvocation at 0", "INS SimpleName: setLenient to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS Block to TryStatement at 4", "operations": ["INS SimpleName: lenient to MethodInvocation at 2", "INS SimpleName: setLenient to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: json to MethodInvocation at 0", "INS Block to TryStatement at 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 1"]}, {"root": "UPDATE from jsonReader to json", "operations": ["UPD SimpleName: jsonReader from jsonReader to json"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: jsonReader", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: jsonReader", "DEL MethodInvocation", "DEL SimpleName: setLenient", "DEL ExpressionStatement", "DEL BooleanLiteral: true"]}]}}, {"JsonParser_diff": {"operations": ["Insert MethodDeclaration(94) into TypeDeclaration: class(190) at 5", "Move Javadoc(75) into MethodDeclaration(94) at 0", "Insert Modifier: public(76) into MethodDeclaration(94) at 1", "Insert SimpleType: JsonElement(78) into MethodDeclaration(94) at 2", "Insert SimpleName: parse(79) into MethodDeclaration(94) at 3", "Move SingleVariableDeclaration(83) into MethodDeclaration(94) at 4", "Insert SimpleType: JsonParseException(85) into MethodDeclaration(94) at 5", "Insert Block(93) into MethodDeclaration(94) at 6", "Insert Javadoc(101) into MethodDeclaration(189) at 0", "Insert SingleVariableDeclaration(109) into MethodDeclaration(189) at 4", "Insert SimpleName: JsonElement(77) into SimpleType: JsonElement(78) at 0", "Insert SimpleName: JsonParseException(84) into SimpleType: JsonParseException(85) at 0", "Insert ReturnStatement(92) into Block(93) at 0", "Insert TagElement(96) into Javadoc(101) at 0", "Insert TagElement: @throws(100) into Javadoc(101) at 1", "Move SimpleType: JsonReader(87) into SingleVariableDeclaration(109) at 0", "Insert SimpleName: json(108) into SingleVariableDeclaration(109) at 1", "Insert VariableDeclarationStatement(118) into Block(188) at 0", "Insert ExpressionStatement(123) into Block(188) at 1", "Insert MethodInvocation(91) into ReturnStatement(92) at 0", "Insert TextElement: Returns the next value from the JSON stream as a parse tree.(95) into TagElement(96) at 0", "Insert SimpleName: JsonParseException(97) into TagElement: @throws(100) at 0", "Insert TextElement:  if there is an IOException or if the specified(98) into TagElement: @throws(100) at 1", "Insert TextElement: text is not valid JSON(99) into TagElement: @throws(100) at 2", "Insert PrimitiveType: boolean(112) into VariableDeclarationStatement(118) at 0", "Insert VariableDeclarationFragment(117) into VariableDeclarationStatement(118) at 1", "Insert MethodInvocation(122) into ExpressionStatement(123) at 0", "Insert Block(186) into TryStatement(187) at 4", "Insert SimpleName: parse(86) into MethodInvocation(91) at 0", "Move ClassInstanceCreation(92) into MethodInvocation(91) at 1", "Insert SimpleName: lenient(113) into VariableDeclarationFragment(117) at 0", "Insert MethodInvocation(116) into VariableDeclarationFragment(117) at 1", "Insert SimpleName: json(119) into MethodInvocation(122) at 0", "Insert SimpleName: setLenient(120) into MethodInvocation(122) at 1", "Insert BooleanLiteral: true(121) into MethodInvocation(122) at 2", "Insert ExpressionStatement(185) into Block(186) at 0", "Insert SimpleName: json(114) into MethodInvocation(116) at 0", "Insert SimpleName: isLenient(115) into MethodInvocation(116) at 1", "Insert MethodInvocation(184) into ExpressionStatement(185) at 0", "Update SimpleName: jsonReader(102) to json", "Insert SimpleName: json(181) into MethodInvocation(184) at 0", "Insert SimpleName: setLenient(182) into MethodInvocation(184) at 1", "Insert SimpleName: lenient(183) into MethodInvocation(184) at 2", "Delete SimpleName: jsonReader(88)", "Delete VariableDeclarationFragment(93)", "Delete VariableDeclarationStatement(94)", "Delete SimpleName: jsonReader(95)", "Delete SimpleName: setLenient(96)", "Delete BooleanLiteral: true(97)", "Delete MethodInvocation(98)", "Delete ExpressionStatement(99)"]}}, {"JsonWriter_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 11", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 11", "INS PrimitiveType: boolean to FieldDeclaration at 1", "INS SimpleName: htmlSafe to VariableDeclarationFragment at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS TextElement: Returns true if this writer has relaxed syntax rules. to TagElement at 0", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS Javadoc to MethodDeclaration at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: lenient to ReturnStatement at 0", "INS TagElement to Javadoc at 0", "INS Block to MethodDeclaration at 4", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: isLenient to MethodDeclaration at 3", "INS ReturnStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS TextElement: ,  to TagElement at 3", "INS TextElement: and XML documents. This escapes the HTML characters  to TagElement at 1", "INS SimpleName: htmlSafe to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS TagElement: @code to TagElement at 2", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS ThisExpression to FieldAccess at 0", "INS Block to MethodDeclaration at 5", "INS FieldAccess to Assignment: = at 0", "INS Modifier: public to MethodDeclaration at 1", "INS TextElement: corresponding escape sequences. to TagElement at 11", "INS TextElement: , to TagElement at 5", "INS TagElement: @code to TagElement at 8", "INS PrimitiveType: void to MethodDeclaration at 2", "INS TextElement:  & to TagElement: @code at 0", "INS TagElement: @code to TagElement at 6", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: setHtmlSafe to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS TextElement: setting, your XML/HTML encoder should replace these characters with the to TagElement at 10", "INS TagElement: @code to TagElement at 4", "INS TextElement: Configure this writer to emit JSON that's safe for direct inclusion in HTML to TagElement at 0", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS TextElement:  before writing them to the stream. Without this to TagElement at 9", "INS SimpleName: htmlSafe to FieldAccess at 1", "INS TextElement:  and  to TagElement at 7", "INS SimpleName: htmlSafe to SingleVariableDeclaration at 1", "INS TextElement:  > to TagElement: @code at 0", "INS TextElement:  = to TagElement: @code at 0", "INS TagElement to Javadoc at 0", "INS Javadoc to MethodDeclaration at 0", "INS TextElement:  < to TagElement: @code at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 17", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 1", "INS TextElement: and XML documents. to TagElement at 1", "INS MethodDeclaration to TypeDeclaration: class at 17", "INS Javadoc to MethodDeclaration at 0", "INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS SimpleName: isHtmlSafe to MethodDeclaration at 3", "INS TagElement to Javadoc at 0", "INS TextElement: Returns true if this writer writes JSON that's safe for inclusion in HTML to TagElement at 0", "INS SimpleName: htmlSafe to ReturnStatement at 0"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV IfStatement to SwitchStatement at 24"]}, {"root": "INS SwitchCase to SwitchStatement at 22", "operations": ["INS SwitchCase to SwitchStatement at 22", "INS CharacterLiteral: '>' to SwitchCase at 0"]}, {"root": "INS SwitchCase to SwitchStatement at 23", "operations": ["INS CharacterLiteral: '&' to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 23"]}, {"root": "INS SwitchCase to SwitchStatement at 24", "operations": ["INS SwitchCase to SwitchStatement at 24", "INS CharacterLiteral: '=' to SwitchCase at 0"]}, {"root": "INS SwitchCase to SwitchStatement at 25", "operations": ["INS CharacterLiteral: '\\'' to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 25"]}, {"root": "INS IfStatement to SwitchStatement at 26", "operations": ["INS SimpleName: htmlSafe to IfStatement at 0", "INS PrimitiveType: int to CastExpression at 0", "INS SimpleName: write to MethodInvocation at 1", "INS SimpleName: c to MethodInvocation at 2", "INS SimpleName: c to CastExpression at 1", "INS Block to IfStatement at 1", "INS CastExpression to MethodInvocation at 3", "INS SimpleName: write to MethodInvocation at 1", "INS SimpleName: out to MethodInvocation at 0", "INS IfStatement to SwitchStatement at 26", "INS SimpleName: out to MethodInvocation at 0", "INS SimpleName: format to MethodInvocation at 1", "INS Block to IfStatement at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: String to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS StringLiteral: \"\\\\u%04x\" to MethodInvocation at 2"]}, {"root": "INS SwitchCase to SwitchStatement at 28", "operations": ["INS SwitchCase to SwitchStatement at 28"]}, {"root": "INS BreakStatement to SwitchStatement at 30", "operations": ["INS BreakStatement to SwitchStatement at 30"]}, {"root": "INS CharacterLiteral: '<' to SwitchCase at 0", "operations": ["INS CharacterLiteral: '<' to SwitchCase at 0"]}]}}, {"JsonWriter_diff": {"operations": ["Insert FieldDeclaration(202) into TypeDeclaration: class(1319) at 11", "Insert MethodDeclaration(338) into TypeDeclaration: class(1319) at 15", "Insert MethodDeclaration(370) into TypeDeclaration: class(1319) at 16", "Insert MethodDeclaration(381) into TypeDeclaration: class(1319) at 17", "Insert Modifier: private(198) into FieldDeclaration(202) at 0", "Insert PrimitiveType: boolean(199) into FieldDeclaration(202) at 1", "Insert VariableDeclarationFragment(201) into FieldDeclaration(202) at 2", "Insert Javadoc(331) into MethodDeclaration(338) at 0", "Insert Modifier: public(332) into MethodDeclaration(338) at 1", "Insert PrimitiveType: boolean(333) into MethodDeclaration(338) at 2", "Insert SimpleName: isLenient(334) into MethodDeclaration(338) at 3", "Insert Block(337) into MethodDeclaration(338) at 4", "Insert Javadoc(356) into MethodDeclaration(370) at 0", "Insert Modifier: public(357) into MethodDeclaration(370) at 1", "Insert PrimitiveType: void(358) into MethodDeclaration(370) at 2", "Insert SimpleName: setHtmlSafe(359) into MethodDeclaration(370) at 3", "Insert SingleVariableDeclaration(362) into MethodDeclaration(370) at 4", "Insert Block(369) into MethodDeclaration(370) at 5", "Insert Javadoc(374) into MethodDeclaration(381) at 0", "Insert Modifier: public(375) into MethodDeclaration(381) at 1", "Insert PrimitiveType: boolean(376) into MethodDeclaration(381) at 2", "Insert SimpleName: isHtmlSafe(377) into MethodDeclaration(381) at 3", "Insert Block(380) into MethodDeclaration(381) at 4", "Insert SimpleName: htmlSafe(200) into VariableDeclarationFragment(201) at 0", "Insert TagElement(330) into Javadoc(331) at 0", "Insert ReturnStatement(336) into Block(337) at 0", "Insert TagElement(355) into Javadoc(356) at 0", "Insert PrimitiveType: boolean(360) into SingleVariableDeclaration(362) at 0", "Insert SimpleName: htmlSafe(361) into SingleVariableDeclaration(362) at 1", "Insert ExpressionStatement(368) into Block(369) at 0", "Insert TagElement(373) into Javadoc(374) at 0", "Insert ReturnStatement(379) into Block(380) at 0", "Insert TextElement: Returns true if this writer has relaxed syntax rules.(329) into TagElement(330) at 0", "Insert SimpleName: lenient(335) into ReturnStatement(336) at 0", "Insert TextElement: Configure this writer to emit JSON that's safe for direct inclusion in HTML(339) into TagElement(355) at 0", "Insert TextElement: and XML documents. This escapes the HTML characters (340) into TagElement(355) at 1", "Insert TagElement: @code(342) into TagElement(355) at 2", "Insert TextElement: , (343) into TagElement(355) at 3", "Insert TagElement: @code(345) into TagElement(355) at 4", "Insert TextElement: ,(346) into TagElement(355) at 5", "Insert TagElement: @code(348) into TagElement(355) at 6", "Insert TextElement:  and (349) into TagElement(355) at 7", "Insert TagElement: @code(351) into TagElement(355) at 8", "Insert TextElement:  before writing them to the stream. Without this(352) into TagElement(355) at 9", "Insert TextElement: setting, your XML/HTML encoder should replace these characters with the(353) into TagElement(355) at 10", "Insert TextElement: corresponding escape sequences.(354) into TagElement(355) at 11", "Insert Assignment: =(367) into ExpressionStatement(368) at 0", "Insert TextElement: Returns true if this writer writes JSON that's safe for inclusion in HTML(371) into TagElement(373) at 0", "Insert TextElement: and XML documents.(372) into TagElement(373) at 1", "Insert SimpleName: htmlSafe(378) into ReturnStatement(379) at 0", "Insert TextElement:  <(341) into TagElement: @code(342) at 0", "Insert TextElement:  >(344) into TagElement: @code(345) at 0", "Insert TextElement:  &(347) into TagElement: @code(348) at 0", "Insert TextElement:  =(350) into TagElement: @code(351) at 0", "Insert FieldAccess(365) into Assignment: =(367) at 0", "Insert SimpleName: htmlSafe(366) into Assignment: =(367) at 1", "Move IfStatement(1045) into SwitchStatement(1136) at 24", "Insert ThisExpression(363) into FieldAccess(365) at 0", "Insert SimpleName: htmlSafe(364) into FieldAccess(365) at 1", "Insert SwitchCase(1084) into SwitchStatement(1136) at 22", "Insert SwitchCase(1086) into SwitchStatement(1136) at 23", "Insert SwitchCase(1088) into SwitchStatement(1136) at 24", "Insert SwitchCase(1090) into SwitchStatement(1136) at 25", "Insert IfStatement(1110) into SwitchStatement(1136) at 26", "Insert SwitchCase(1112) into SwitchStatement(1136) at 28", "Insert BreakStatement(1135) into SwitchStatement(1136) at 30", "Insert CharacterLiteral: '<'(1081) into SwitchCase(1082) at 0", "Insert CharacterLiteral: '>'(1083) into SwitchCase(1084) at 0", "Insert CharacterLiteral: '&'(1085) into SwitchCase(1086) at 0", "Insert CharacterLiteral: '='(1087) into SwitchCase(1088) at 0", "Insert CharacterLiteral: '\\''(1089) into SwitchCase(1090) at 0", "Insert SimpleName: htmlSafe(1091) into IfStatement(1110) at 0", "Insert Block(1103) into IfStatement(1110) at 1", "Insert Block(1109) into IfStatement(1110) at 2", "Insert ExpressionStatement(1102) into Block(1103) at 0", "Insert ExpressionStatement(1108) into Block(1109) at 0", "Insert MethodInvocation(1101) into ExpressionStatement(1102) at 0", "Insert MethodInvocation(1107) into ExpressionStatement(1108) at 0", "Insert SimpleName: out(1092) into MethodInvocation(1101) at 0", "Insert SimpleName: write(1093) into MethodInvocation(1101) at 1", "Insert MethodInvocation(1100) into MethodInvocation(1101) at 2", "Insert SimpleName: out(1104) into MethodInvocation(1107) at 0", "Insert SimpleName: write(1105) into MethodInvocation(1107) at 1", "Insert SimpleName: c(1106) into MethodInvocation(1107) at 2", "Insert SimpleName: String(1094) into MethodInvocation(1100) at 0", "Insert SimpleName: format(1095) into MethodInvocation(1100) at 1", "Insert StringLiteral: \"\\\\u%04x\"(1096) into MethodInvocation(1100) at 2", "Insert CastExpression(1099) into MethodInvocation(1100) at 3", "Insert PrimitiveType: int(1097) into CastExpression(1099) at 0", "Insert SimpleName: c(1098) into CastExpression(1099) at 1"]}}], "commit_stats": [{"total_files": 9, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}