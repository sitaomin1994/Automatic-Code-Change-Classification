{"application": "google-caja", "csha": "8a5fe82027b8d1a4645cda6f6d865a520c535e83", "files": [{"CssRewriter_cluster": {"actions": [{"root": "UPDATE from PluginMeta to PluginEnvironment", "operations": ["UPD SimpleName: PluginMeta from PluginMeta to PluginEnvironment", "UPD SimpleType: PluginMeta from PluginMeta to PluginEnvironment", "UPD SimpleName: PluginMeta from PluginMeta to PluginEnvironment", "UPD SimpleType: PluginMeta from PluginMeta to PluginEnvironment"]}, {"root": "UPDATE from meta to env", "operations": ["UPD SimpleName: meta from meta to env", "UPD SimpleName: meta from meta to env", "UPD SimpleName: meta from meta to env", "UPD SimpleName: meta from meta to env", "UPD SimpleName: meta from meta to env", "UPD SimpleName: meta from meta to env", "UPD SimpleName: meta from meta to env"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: meta to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: meta to MethodInvocation at 0"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getPluginEnvironment"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getPluginEnvironment", "DEL MethodInvocation"]}]}}, {"CssRewriter_diff": {"operations": ["Update SimpleType: PluginMeta(71) to PluginEnvironment", "Update SimpleName: PluginMeta(70) to PluginEnvironment", "Update SimpleName: meta(72) to env", "Update SimpleType: PluginMeta(92) to PluginEnvironment", "Update SimpleName: meta(93) to env", "Update SimpleName: PluginMeta(91) to PluginEnvironment", "Update SimpleName: meta(104) to env", "Update SimpleName: meta(110) to env", "Update SimpleName: meta(108) to env", "Update SimpleName: meta(2691) to env", "Move SimpleName: meta(2691) into MethodInvocation(2693) at 0", "Update SimpleName: meta(2291) to env", "Move SimpleName: meta(2291) into MethodInvocation(2295) at 0", "Delete SimpleName: getPluginEnvironment(2292)", "Delete MethodInvocation(2293)", "Delete SimpleName: getPluginEnvironment(2692)", "Delete MethodInvocation(2693)"]}}, {"SourceSnippetRenderer_cluster": {"actions": [{"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL Modifier: final", "DEL SimpleName: source", "DEL SimpleType: InputSource", "DEL SimpleName: InputSource", "DEL FieldDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: source", "DEL SimpleName: InputSource", "DEL SingleVariableDeclaration", "DEL SimpleType: InputSource"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ThisExpression", "DEL SimpleName: source", "DEL FieldAccess", "DEL Assignment: =", "DEL SimpleName: source", "DEL ExpressionStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: source", "DEL SimpleName: InputSource", "DEL Block", "DEL SimpleType: InputSource", "DEL SimpleName: getSource", "DEL Modifier: public", "DEL ReturnStatement", "DEL MethodDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL Modifier: final", "DEL FieldDeclaration", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL SimpleName: lineNo"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL SimpleName: lineNo"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL FieldAccess", "DEL ExpressionStatement", "DEL SimpleName: lineNo", "DEL Assignment: =", "DEL ThisExpression", "DEL SimpleName: lineNo"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL PrimitiveType: int", "DEL Block", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: lineNo", "DEL SimpleName: getLineNo", "DEL ReturnStatement"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getKey", "DEL MethodInvocation", "DEL SimpleName: entry"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: renderedLines", "DEL SimpleName: size", "DEL MethodInvocation"]}]}}, {"SourceSnippetRenderer_diff": {"operations": ["Delete Modifier: private(45)", "Delete Modifier: final(46)", "Delete SimpleName: InputSource(47)", "Delete SimpleType: InputSource(48)", "Delete SimpleName: source(49)", "Delete VariableDeclarationFragment(50)", "Delete FieldDeclaration(51)", "Delete SimpleName: InputSource(86)", "Delete SimpleType: InputSource(87)", "Delete SimpleName: source(88)", "Delete SingleVariableDeclaration(89)", "Delete ThisExpression(97)", "Delete SimpleName: source(98)", "Delete FieldAccess(99)", "Delete SimpleName: source(100)", "Delete Assignment: =(101)", "Delete ExpressionStatement(102)", "Delete Modifier: public(117)", "Delete SimpleName: InputSource(118)", "Delete SimpleType: InputSource(119)", "Delete SimpleName: getSource(120)", "Delete SimpleName: source(121)", "Delete ReturnStatement(122)", "Delete Block(123)", "Delete MethodDeclaration(124)", "Delete Modifier: private(223)", "Delete Modifier: final(224)", "Delete PrimitiveType: int(225)", "Delete SimpleName: lineNo(226)", "Delete VariableDeclarationFragment(227)", "Delete FieldDeclaration(228)", "Delete PrimitiveType: int(271)", "Delete SimpleName: lineNo(272)", "Delete SingleVariableDeclaration(273)", "Delete ThisExpression(278)", "Delete SimpleName: lineNo(279)", "Delete FieldAccess(280)", "Delete SimpleName: lineNo(281)", "Delete Assignment: =(282)", "Delete ExpressionStatement(283)", "Delete Modifier: public(291)", "Delete PrimitiveType: int(292)", "Delete SimpleName: getLineNo(293)", "Delete SimpleName: lineNo(294)", "Delete ReturnStatement(295)", "Delete Block(296)", "Delete MethodDeclaration(297)", "Delete NumberLiteral: 0(667)", "Delete SimpleName: entry(918)", "Delete SimpleName: getKey(919)", "Delete MethodInvocation(920)", "Delete SimpleName: renderedLines(1016)", "Delete SimpleName: size(1017)", "Delete MethodInvocation(1018)"]}}, {"ValidateCssStage_cluster": {"actions": [{"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: getPluginEnvironment to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}]}}, {"ValidateCssStage_diff": {"operations": ["Insert MethodInvocation(127) into ClassInstanceCreation(131) at 1", "Move MethodInvocation(125) into MethodInvocation(127) at 0", "Insert SimpleName: getPluginEnvironment(126) into MethodInvocation(127) at 1"]}}, {"SafeCssMaker_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: cat to VariableDeclarationFragment at 0", "INS SimpleType: JsConcatenator to VariableDeclarationStatement at 0", "INS SimpleName: JsConcatenator to SimpleType: JsConcatenator at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: JsConcatenator to SimpleType: JsConcatenator at 0", "INS SimpleType: JsConcatenator to ClassInstanceCreation at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: cat to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS SimpleName: cat to MethodInvocation at 0", "INS SimpleName: child0 to MethodInvocation at 2", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 3"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from StringLiteral to cat", "operations": ["UPD SimpleName: StringLiteral from StringLiteral to cat", "UPD SimpleName: concat from concat to cat"]}, {"root": "UPDATE from valueOf to append", "operations": ["UPD SimpleName: valueOf from valueOf to append"]}, {"root": "UPDATE from child0 to toExpression", "operations": ["UPD SimpleName: child0 from child0 to toExpression"]}, {"root": "INS BooleanLiteral: false to MethodInvocation at 3", "operations": ["INS BooleanLiteral: false to MethodInvocation at 3"]}, {"root": "DEL SimpleName: QuasiUtil", "operations": ["DEL SimpleName: QuasiUtil"]}]}}, {"SafeCssMaker_diff": {"operations": ["Insert VariableDeclarationStatement(256) into Block(305) at 0", "Insert ExpressionStatement(266) into Block(305) at 1", "Insert ExpressionStatement(277) into Block(305) at 2", "Insert ExpressionStatement(282) into Block(305) at 3", "Insert SimpleType: JsConcatenator(250) into VariableDeclarationStatement(256) at 0", "Insert VariableDeclarationFragment(255) into VariableDeclarationStatement(256) at 1", "Insert MethodInvocation(265) into ExpressionStatement(266) at 0", "Move MethodInvocation(271) into ExpressionStatement(277) at 0", "Insert MethodInvocation(281) into ExpressionStatement(282) at 0", "Insert SimpleName: JsConcatenator(249) into SimpleType: JsConcatenator(250) at 0", "Insert SimpleName: cat(251) into VariableDeclarationFragment(255) at 0", "Insert ClassInstanceCreation(254) into VariableDeclarationFragment(255) at 1", "Insert SimpleName: cat(257) into MethodInvocation(265) at 0", "Insert SimpleName: append(258) into MethodInvocation(265) at 1", "Move MethodInvocation(261) into MethodInvocation(265) at 2", "Update SimpleName: StringLiteral(262) to cat", "Update SimpleName: valueOf(263) to append", "Insert SimpleName: cat(278) into MethodInvocation(281) at 0", "Insert SimpleName: append(279) into MethodInvocation(281) at 1", "Insert SimpleName: child0(280) into MethodInvocation(281) at 2", "Insert SimpleType: JsConcatenator(253) into ClassInstanceCreation(254) at 0", "Update SimpleName: concat(255) to cat", "Update SimpleName: child0(272) to toExpression", "Insert BooleanLiteral: false(290) into MethodInvocation(291) at 2", "Insert SimpleName: JsConcatenator(252) into SimpleType: JsConcatenator(253) at 0", "Delete SimpleName: QuasiUtil(254)"]}}, {"TemplateCompiler_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 10"]}, {"root": "UPDATE from CssSchema to HtmlAttributeRewriter", "operations": ["UPD SimpleType: CssSchema from CssSchema to HtmlAttributeRewriter", "UPD SimpleName: SyntheticNodes from SyntheticNodes to HtmlAttributeRewriter", "UPD SimpleName: CssSchema from CssSchema to HtmlAttributeRewriter"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 7"]}, {"root": "UPDATE from QuasiBuilder to aRewriter", "operations": ["UPD SimpleName: QuasiBuilder from QuasiBuilder to aRewriter", "UPD SimpleName: cssSchema from cssSchema to aRewriter", "UPD SimpleName: cssSchema from cssSchema to aRewriter"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS QualifiedName: r.isSafe to IfStatement at 0", "INS Block to IfStatement at 1", "INS IfStatement to Block at 1"]}, {"root": "UPDATE from Declaration to HtmlAttributeRewriter.SanitizedAttr", "operations": ["UPD SimpleType: Declaration from Declaration to HtmlAttributeRewriter.SanitizedAttr"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: SafeHtmlMaker to VariableDeclarationStatement at 0"]}, {"root": "INS ClassInstanceCreation to Assignment: = at 1", "operations": ["INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: HtmlAttributeRewriter to SimpleType: HtmlAttributeRewriter at 0", "INS SimpleName: htmlSchema to ClassInstanceCreation at 3", "INS SimpleType: HtmlAttributeRewriter to ClassInstanceCreation at 0", "INS SimpleName: meta to ClassInstanceCreation at 1", "INS SimpleName: cssSchema to ClassInstanceCreation at 2", "INS SimpleName: mq to ClassInstanceCreation at 4"]}, {"root": "INS QualifiedName: HtmlAttributeRewriter.SanitizedAttr to SimpleType: Declaration at 0", "operations": ["INS QualifiedName: HtmlAttributeRewriter.SanitizedAttr to SimpleType: Declaration at 0"]}, {"root": "UPDATE from handler to r", "operations": ["UPD SimpleName: handler from handler to r"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: substV to MethodInvocation at 1", "MOV SimpleName: QuasiBuilder to MethodInvocation at 0"]}, {"root": "UPDATE from substV to sanitizeStringValue", "operations": ["UPD SimpleName: substV from substV to sanitizeStringValue"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: SafeHtmlMaker to ClassInstanceCreation at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 6", "operations": ["INS SimpleName: aRewriter to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 6", "INS SimpleName: getHandlers to MethodInvocation at 1"]}, {"root": "UPDATE from s to fromAttr", "operations": ["UPD SimpleName: s from s to fromAttr"]}, {"root": "INS SimpleName: attr to MethodInvocation at 2", "operations": ["INS SimpleName: attr to MethodInvocation at 2"]}, {"root": "INS SimpleName: info to MethodInvocation at 3", "operations": ["INS SimpleName: info to MethodInvocation at 3"]}, {"root": "INS QualifiedName: r.result to MethodInvocation at 3", "operations": ["INS QualifiedName: r.result to MethodInvocation at 3"]}, {"root": "INS InfixExpression: + to Assignment: = at 1", "operations": ["INS InfixExpression: + to Assignment: = at 1", "INS StringLiteral: \"\" to InfixExpression: + at 0"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV MethodInvocation to InfixExpression: + at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.lexer.CharProducer", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.lexer.CssTokenType"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.lexer.ExternalReference", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.lexer.FilePosition", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.lexer.JsLexer", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.lexer.JsTokenQueue", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.lexer.Keyword"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.lexer.ParseException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.lexer.TokenQueue"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.AncestorChain"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.ParseTreeNodeContainer"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.Visitor", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.css.CssParser"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.js.Declaration", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.js.Expression"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.js.FunctionConstructor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.js.Identifier"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.js.Parser"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.js.Reference"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.js.Statement", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.js.StringLiteral"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.js.SyntheticNodes", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.quasiliteral.QuasiBuilder", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.quasiliteral.ReservedNames", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.plugin.CssRewriter"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.plugin.CssValidator", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.reporting.RenderContext", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.StringReader"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.net.URI"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.net.URISyntaxException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collections"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.regex.Pattern"]}, {"root": "DEL TextElement: <li>If the node is an ", "operations": ["DEL TextElement: <li>If the node is an "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  Element", "DEL TagElement: @code"]}, {"root": "DEL TextElement: , then the value is an expression", "operations": ["DEL TextElement: , then the value is an expression"]}, {"root": "DEL TextElement: that returns a tag name.</li>", "operations": ["DEL TextElement: that returns a tag name.</li>"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: handlers", "DEL SimpleName: Statement", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL SimpleType: Statement", "DEL Modifier: final", "DEL SimpleName: ArrayList", "DEL SimpleType: ArrayList", "DEL SimpleType: Statement", "DEL SimpleType: List", "DEL SimpleName: List", "DEL TagElement", "DEL ParameterizedType: List<Statement>", "DEL SimpleName: Statement", "DEL TextElement: Extracted event handler functions. ", "DEL Javadoc", "DEL FieldDeclaration", "DEL ClassInstanceCreation", "DEL ParameterizedType: ArrayList<Statement>"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL SimpleType: HashMap", "DEL SimpleName: HashMap", "DEL Modifier: private", "DEL SimpleType: String", "DEL SimpleName: String", "DEL ParameterizedType: HashMap<String,String>", "DEL SimpleName: Map", "DEL TagElement", "DEL SimpleType: String", "DEL SimpleType: Map", "DEL SimpleType: String", "DEL TextElement: Maps handler attribute source to handler names. ", "DEL FieldDeclaration", "DEL ParameterizedType: Map<String,String>", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL SimpleName: String", "DEL SimpleName: handlerCache", "DEL Javadoc", "DEL SimpleType: String", "DEL SimpleName: String"]}, {"root": "DEL SimpleName: cssSchema", "operations": ["DEL SimpleName: cssSchema"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: toString"]}, {"root": "DEL SimpleName: Declaration", "operations": ["DEL SimpleName: Declaration"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ClassInstanceCreation", "DEL SimpleName: Identifier", "DEL SimpleType: Identifier", "DEL SimpleName: handlerFnName", "DEL QualifiedName: FilePosition.UNKNOWN"]}, {"root": "DEL CastExpression", "operations": ["DEL MethodInvocation", "DEL SimpleName: Declaration", "DEL SimpleType: Declaration", "DEL StringLiteral: \"body\"", "DEL StringLiteral: \"\"", "DEL SimpleName: b", "DEL SimpleName: children", "DEL StringLiteral: \"var @handlerName = ___./*@synthetic*/markFuncFreeze(\"", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL SimpleType: ParseTreeNodeContainer", "DEL StringLiteral: \"        event, \"", "DEL InfixExpression: +", "DEL StringLiteral: \"    /*@synthetic*/function (\"", "DEL StringLiteral: \") { @body*; });\"", "DEL CastExpression", "DEL QualifiedName: ReservedNames.THIS_NODE", "DEL StringLiteral: \"handlerName\"", "DEL SimpleName: ParseTreeNodeContainer", "DEL ClassInstanceCreation"]}, {"root": "DEL SimpleName: dynamicValue", "operations": ["DEL SimpleName: dynamicValue"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: pos", "DEL SimpleName: FilePosition", "DEL SimpleName: Nodes", "DEL SimpleName: attr", "DEL MethodInvocation", "DEL SimpleName: getFilePositionForValue", "DEL SimpleType: FilePosition"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: attr", "DEL SimpleName: getValue", "DEL VariableDeclarationFragment", "DEL SimpleName: value", "DEL SimpleType: String", "DEL SimpleName: String", "DEL MethodInvocation", "DEL VariableDeclarationStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: dynamicValue", "DEL SimpleName: Expression", "DEL SimpleType: Expression"]}, {"root": "DEL SwitchStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: value", "DEL SimpleName: dynamicValue", "DEL SimpleName: QuasiBuilder", "DEL CatchClause", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: info", "DEL SimpleName: AncestorChain", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: put", "DEL ExpressionStatement", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: FunctionConstructor", "DEL InfixExpression: ==", "DEL SimpleName: instance", "DEL SimpleName: mq", "DEL PrefixExpression: !", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: v", "DEL VariableDeclarationFragment", "DEL SimpleName: toString", "DEL SwitchCase", "DEL SimpleName: CLASSES", "DEL SimpleName: setFilePosition", "DEL SwitchCase", "DEL SimpleName: pos", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: pos", "DEL SimpleName: handlerFnName", "DEL VariableDeclarationFragment", "DEL SimpleType: ExternalReference", "DEL Block", "DEL SimpleName: ParseException", "DEL CastExpression", "DEL SimpleName: css", "DEL Block", "DEL SimpleType: CssValidator", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: mq", "DEL SwitchCase", "DEL SwitchCase", "DEL IfStatement", "DEL SimpleName: getValue", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: valueOf", "DEL SimpleName: ref", "DEL ExpressionStatement", "DEL StringLiteral: \"\"", "DEL MethodInvocation", "DEL SimpleName: eventAdapter", "DEL SimpleName: value", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL SimpleName: checkRestrictedName", "DEL SimpleName: mq", "DEL Assignment: =", "DEL SimpleName: pos", "DEL SimpleName: ExternalReference", "DEL SimpleName: eventAdapter", "DEL SimpleName: mq", "DEL NullLiteral", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleType: FunctionConstructor", "DEL Block", "DEL SimpleName: handlerFnName", "DEL Block", "DEL SimpleType: RuntimeException", "DEL SimpleName: valueOf", "DEL SimpleName: value", "DEL SimpleName: dynamicValue", "DEL SimpleName: getType", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: dynamicValue", "DEL BreakStatement", "DEL MethodInvocation", "DEL SimpleName: pos", "DEL NullLiteral", "DEL SimpleName: AncestorChain", "DEL SimpleName: pos", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL BreakStatement", "DEL SimpleName: IDREF", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL QualifiedName: IhtmlMessageType.MALFORMED_URI", "DEL SimpleName: value", "DEL SimpleType: ExternalReference", "DEL MethodInvocation", "DEL SimpleName: b", "DEL ReturnStatement", "DEL SimpleName: value", "DEL SimpleName: URI", "DEL SimpleName: IDREFS", "DEL SimpleName: getOut", "DEL SimpleName: rewrittenUri", "DEL VariableDeclarationStatement", "DEL SimpleName: rewriteUri", "DEL SimpleName: rc", "DEL Assignment: =", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: uri", "DEL SimpleName: checkRestrictedName", "DEL SimpleName: CssValidator", "DEL SimpleName: meta", "DEL SimpleName: attr", "DEL SimpleName: ID", "DEL SimpleName: substV", "DEL BreakStatement", "DEL MethodInvocation", "DEL QualifiedName: MessagePart.Factory", "DEL SimpleName: name", "DEL SimpleName: pos", "DEL SimpleName: pos", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: handlerFnName", "DEL InfixExpression: +", "DEL IfStatement", "DEL SimpleName: pos", "DEL SimpleName: makeRenderer", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: getReferencePosition", "DEL StringLiteral: \"c\"", "DEL SimpleName: attr", "DEL SimpleName: StringBuilder", "DEL SimpleName: handlers", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: RuntimeException", "DEL IfStatement", "DEL SwitchCase", "DEL SimpleName: FunctionConstructor", "DEL SimpleName: RenderContext", "DEL VariableDeclarationFragment", "DEL SimpleName: value", "DEL SimpleName: RenderContext", "DEL SwitchCase", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleName: info", "DEL IfStatement", "DEL SimpleName: StringBuilder", "DEL ExpressionStatement", "DEL SimpleName: parseStyleAttrib", "DEL SingleVariableDeclaration", "DEL SimpleName: handlerFnName", "DEL ExpressionStatement", "DEL TryStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: instance", "DEL SimpleName: String", "DEL SimpleName: ref", "DEL SimpleName: String", "DEL SimpleName: pos", "DEL SimpleName: getMimeTypes", "DEL QualifiedName: MessageLevel.WARNING", "DEL SimpleType: URI", "DEL ExpressionStatement", "DEL SimpleName: checkRestrictedNames", "DEL ReturnStatement", "DEL StringLiteral: \"})\"", "DEL InfixExpression: ==", "DEL SimpleName: Block", "DEL TryStatement", "DEL SimpleName: dynamicValue", "DEL SwitchCase", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: Reference", "DEL SimpleName: pos", "DEL TryStatement", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: value", "DEL SimpleName: getPluginEnvironment", "DEL StringLiteral: \"tail\"", "DEL SimpleName: withInvalidNodeMessageLevel", "DEL StringLiteral: \"(/*@synthetic*/ function (event) {\"", "DEL SimpleName: uri", "DEL InfixExpression: ==", "DEL SimpleName: checkRestrictedNames", "DEL SimpleName: CssRewriter", "DEL ExpressionStatement", "DEL SimpleName: mq", "DEL SimpleName: toMessageQueue", "DEL MethodInvocation", "DEL SimpleName: eventAdapter", "DEL SimpleType: URISyntaxException", "DEL SimpleName: rc", "DEL SimpleName: GLOBAL_NAME", "DEL SimpleName: addMessage", "DEL SimpleType: CssValidator", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: RenderContext", "DEL SimpleName: b", "DEL SimpleName: s", "DEL MethodInvocation", "DEL SimpleName: CssValidator", "DEL SimpleName: decls", "DEL SimpleName: attr", "DEL SimpleName: attr", "DEL BreakStatement", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: b", "DEL PrefixExpression: !", "DEL SimpleName: decls", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL SimpleName: uri", "DEL SimpleName: NONE", "DEL SimpleName: cssSchema", "DEL Assignment: =", "DEL SimpleName: pos", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL SwitchCase", "DEL SimpleName: parseJsFromAttrValue", "DEL SimpleName: toMessageQueue", "DEL StringLiteral: \"      ___./*@synthetic*/getId(IMPORTS___), @tail));\"", "DEL BreakStatement", "DEL MethodInvocation", "DEL SimpleName: rewriteIdentifiers", "DEL SimpleName: ex", "DEL SimpleName: handler", "DEL QualifiedName: MessagePart.Factory", "DEL SwitchCase", "DEL IfStatement", "DEL BreakStatement", "DEL MethodInvocation", "DEL NullLiteral", "DEL ReturnStatement", "DEL SimpleName: meta", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: getValue", "DEL MethodInvocation", "DEL CatchClause", "DEL SimpleName: handlerFnName", "DEL Assignment: =", "DEL SimpleType: StringBuilder", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: pos", "DEL SimpleName: URI", "DEL IfStatement", "DEL SimpleType: CssTree.DeclarationGroup", "DEL SimpleName: ref", "DEL SimpleName: addMessage", "DEL ThrowStatement", "DEL SimpleName: rewrite", "DEL SimpleName: ex", "DEL MethodInvocation", "DEL SimpleName: ex", "DEL SimpleName: isEmpty", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: decls", "DEL SimpleName: decls", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleName: SyntheticNodes", "DEL SimpleName: FRAME_TARGET", "DEL SimpleName: SCRIPT", "DEL SimpleName: decls", "DEL SimpleName: children", "DEL MethodInvocation", "DEL SimpleName: URI", "DEL SimpleName: mq", "DEL NullLiteral", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: ex", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL BreakStatement", "DEL MethodInvocation", "DEL CatchClause", "DEL Assignment: =", "DEL SimpleType: URI", "DEL SimpleName: info", "DEL SimpleName: ExternalReference", "DEL SimpleName: handlerCache", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL SimpleName: LOCAL_NAME", "DEL Assignment: =", "DEL SimpleName: rewriteIdentifiers", "DEL SimpleName: URISyntaxException", "DEL MethodInvocation", "DEL BreakStatement", "DEL SimpleName: get", "DEL Block", "DEL SimpleType: Identifier", "DEL NullLiteral", "DEL SimpleType: Block", "DEL SimpleName: meta", "DEL SimpleName: withInvalidNodeMessageLevel", "DEL SimpleName: StringLiteral", "DEL SimpleName: validateCss", "DEL PrefixExpression: !", "DEL SimpleName: rc", "DEL SimpleType: RenderContext", "DEL Assignment: =", "DEL SimpleType: ParseException", "DEL MethodInvocation", "DEL SimpleName: add", "DEL SimpleName: dynamicValue", "DEL SimpleName: rewrittenUri", "DEL SwitchCase", "DEL SimpleType: StringBuilder", "DEL SimpleName: handlerCache", "DEL SimpleType: Reference", "DEL SimpleName: valueOf", "DEL SimpleName: render", "DEL SimpleType: ParseException", "DEL QualifiedName: IhtmlMessageType.MALFORMED_URI", "DEL SimpleName: css", "DEL ExpressionStatement", "DEL QualifiedName: CssTree.DeclarationGroup", "DEL SimpleName: dynamicValue", "DEL SimpleName: dynamicValue", "DEL SimpleName: ParseException", "DEL StringLiteral: \"      /*@synthetic*/this, event, \"", "DEL ExpressionStatement", "DEL SimpleName: dynamicValue", "DEL SimpleName: rewriteEventHandlerReferences", "DEL StringLiteral: \"  return /*@synthetic*/ (plugin_dispatchEvent___(\"", "DEL SimpleName: STYLE", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: htmlSchema", "DEL MethodInvocation", "DEL Assignment: =", "DEL SwitchCase", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleType: FunctionConstructor", "DEL SimpleName: css", "DEL SimpleName: generateUniqueName", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: Identifier", "DEL Block", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: decls", "DEL SimpleName: v", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: CssRewriter", "DEL SimpleName: valueOf", "DEL SimpleName: decls", "DEL SwitchCase", "DEL SimpleName: b", "DEL ExpressionStatement", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL SimpleName: getType", "DEL SimpleName: noMoreTokens", "DEL SimpleName: ex", "DEL VariableDeclarationStatement", "DEL SimpleName: value", "DEL SimpleName: StringLiteral", "DEL QualifiedName: MessageLevel.WARNING", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL NullLiteral", "DEL SwitchStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: rewrittenUri", "DEL Block", "DEL ClassInstanceCreation"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL SimpleName: compile", "DEL StringLiteral: \"\\\\s+\"", "DEL MethodInvocation", "DEL SimpleName: IDENTIFIER_SEPARATOR", "DEL SimpleName: Pattern", "DEL SimpleName: Pattern", "DEL VariableDeclarationFragment", "DEL Modifier: static", "DEL SimpleType: Pattern", "DEL FieldDeclaration", "DEL Modifier: final"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL SimpleType: Pattern", "DEL StringLiteral: \"^[\\\\p{Alpha}_:][\\\\p{Alnum}.\\\\-_:]*$\"", "DEL SimpleName: ALLOWED_NAME", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL SimpleName: Pattern", "DEL SimpleName: Pattern", "DEL Modifier: static", "DEL SimpleName: compile", "DEL Modifier: final"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL InfixExpression: ||", "DEL SimpleName: value", "DEL SimpleName: value", "DEL QualifiedName: IhtmlMessageType.ILLEGAL_NAME", "DEL SimpleName: addMessage", "DEL SimpleName: println", "DEL SimpleName: checkRestrictedName", "DEL StringLiteral: \"`\"", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL StringLiteral: \"rejected ident `\"", "DEL SimpleType: FilePosition", "DEL SimpleType: String", "DEL PrimitiveType: boolean", "DEL SimpleName: value", "DEL StringLiteral: \"\"", "DEL SingleVariableDeclaration", "DEL SimpleName: equals", "DEL SimpleName: pos", "DEL SimpleName: mq", "DEL SimpleName: equals", "DEL InfixExpression: +", "DEL Modifier: private", "DEL SimpleName: pos", "DEL SimpleName: value", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: value", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL StringLiteral: \"\"", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleName: IDENTIFIER_SEPARATOR", "DEL SimpleName: FilePosition", "DEL SingleVariableDeclaration", "DEL BooleanLiteral: true", "DEL SimpleName: valueOf", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: value", "DEL QualifiedName: System.err", "DEL SimpleName: value", "DEL SimpleName: String", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleName: ALLOWED_NAME", "DEL Block", "DEL IfStatement", "DEL SimpleName: find", "DEL Javadoc", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: find", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: matcher", "DEL AssertStatement", "DEL QualifiedName: MessagePart.Factory", "DEL SimpleName: matcher", "DEL MethodInvocation", "DEL TextElement: True if value is a valid XML names outside the restricted namespace. "]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: ok", "DEL SingleVariableDeclaration", "DEL SimpleName: IDENTIFIER_SEPARATOR", "DEL SimpleName: pos", "DEL PrefixExpression: !", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL SimpleName: checkRestrictedNames", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL SimpleName: ALLOWED_NAME", "DEL TagElement", "DEL TextElement: restricted namespace.", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: pos", "DEL SimpleName: value", "DEL SimpleName: mq", "DEL Modifier: private", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: ident", "DEL ReturnStatement", "DEL QualifiedName: MessagePart.Factory", "DEL StringLiteral: \"\"", "DEL MethodDeclaration", "DEL IfStatement", "DEL SimpleName: value", "DEL BooleanLiteral: true", "DEL ExpressionStatement", "DEL SimpleName: ok", "DEL ContinueStatement", "DEL BooleanLiteral: true", "DEL SimpleName: valueOf", "DEL MethodInvocation", "DEL SimpleName: value", "DEL SimpleName: equals", "DEL SimpleName: String", "DEL SimpleName: matches", "DEL SimpleName: ident", "DEL SingleVariableDeclaration", "DEL SimpleType: FilePosition", "DEL EnhancedForStatement", "DEL SimpleName: ok", "DEL SimpleName: matcher", "DEL Block", "DEL IfStatement", "DEL Block", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleName: split", "DEL Assignment: =", "DEL MethodInvocation", "DEL Block", "DEL StringLiteral: \"\"", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL SimpleName: ident", "DEL TextElement: True iff value is a space separated group of XML names outside the", "DEL QualifiedName: IhtmlMessageType.ILLEGAL_NAME", "DEL PrimitiveType: boolean", "DEL SimpleName: addMessage", "DEL Javadoc", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: ident", "DEL SimpleName: FilePosition", "DEL ReturnStatement", "DEL IfStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: pos", "DEL MethodInvocation", "DEL Block", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL Block", "DEL SimpleType: Expression", "DEL SimpleName: StringLiteral", "DEL StringLiteral: \"ident\"", "DEL SimpleType: StringBuilder", "DEL SimpleName: names", "DEL VariableDeclarationStatement", "DEL SimpleName: result", "DEL NumberLiteral: 0", "DEL SimpleType: Expression", "DEL TagElement", "DEL SimpleName: ident", "DEL StringLiteral: \"@ident + IMPORTS___.getIdClass___()\"", "DEL SimpleName: split", "DEL InfixExpression: !=", "DEL SimpleName: valueOf", "DEL ConditionalExpression", "DEL SimpleName: append", "DEL IfStatement", "DEL Block", "DEL EnhancedForStatement", "DEL SimpleName: IDENTIFIER_SEPARATOR", "DEL IfStatement", "DEL SimpleName: concat", "DEL SimpleName: StringBuilder", "DEL NullLiteral", "DEL ReturnStatement", "DEL SimpleName: names", "DEL ParenthesizedExpression", "DEL SimpleName: result", "DEL SimpleName: toString", "DEL InfixExpression: !=", "DEL ArrayType: String[]", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: meta", "DEL SimpleName: oneRewritten", "DEL SimpleName: getIdClass", "DEL SimpleType: FilePosition", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleName: ident", "DEL MethodInvocation", "DEL SimpleName: length", "DEL SimpleName: oneRewritten", "DEL Block", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: result", "DEL StringLiteral: \"\"", "DEL SimpleName: names", "DEL SimpleName: oneRewritten", "DEL CharacterLiteral: ' '", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: ident", "DEL MethodInvocation", "DEL SimpleType: Expression", "DEL SimpleName: Expression", "DEL MethodInvocation", "DEL SimpleName: idents", "DEL TextElement: \"foo bar baz\" -> \"foo-suffix___ bar-suffix___ baz-suffix___\". ", "DEL EnhancedForStatement", "DEL SimpleName: append", "DEL SimpleName: result", "DEL Block", "DEL SimpleName: pos", "DEL SimpleName: Expression", "DEL SimpleName: StringLiteral", "DEL MethodInvocation", "DEL SimpleName: QuasiBuilder", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL SimpleName: pos", "DEL SimpleName: String", "DEL InfixExpression: +", "DEL SimpleType: StringBuilder", "DEL ContinueStatement", "DEL SimpleName: idClass", "DEL Modifier: private", "DEL SimpleName: append", "DEL InfixExpression: !=", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: Expression", "DEL SimpleName: result", "DEL SimpleName: append", "DEL SimpleName: result", "DEL NullLiteral", "DEL StringLiteral: \"-\"", "DEL SimpleName: result", "DEL SimpleName: equals", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL SimpleName: length", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL SimpleName: String", "DEL SimpleName: names", "DEL StringLiteral: \"\"", "DEL Block", "DEL SimpleName: FilePosition", "DEL SingleVariableDeclaration", "DEL SimpleName: Expression", "DEL IfStatement", "DEL SimpleType: String", "DEL SimpleName: valueOf", "DEL SimpleName: ident", "DEL SimpleName: String", "DEL SimpleName: idents", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: StringBuilder", "DEL SimpleName: substV", "DEL SimpleName: result", "DEL SimpleType: String", "DEL Dimension", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL CharacterLiteral: '-'", "DEL SimpleName: equals", "DEL NullLiteral", "DEL SimpleName: QuasiUtil", "DEL Block", "DEL ContinueStatement", "DEL ReturnStatement", "DEL SimpleName: result", "DEL SimpleName: result", "DEL SimpleType: String", "DEL SimpleName: result", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: idents", "DEL SimpleName: equals", "DEL ExpressionStatement", "DEL SimpleName: rewriteIdentifiers", "DEL StringLiteral: \"\"", "DEL CastExpression", "DEL SimpleName: ident", "DEL MethodInvocation", "DEL SimpleName: String", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: idClass", "DEL InfixExpression: !=", "DEL SingleVariableDeclaration", "DEL Block", "DEL Block", "DEL SimpleName: ident", "DEL ExpressionStatement", "DEL StringLiteral: \"\"", "DEL SimpleType: Expression", "DEL SimpleType: String", "DEL SimpleName: idClass", "DEL VariableDeclarationFragment", "DEL StringLiteral: \" \"", "DEL SimpleName: result", "DEL VariableDeclarationFragment"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: static", "DEL QualifiedName: Keyword.THIS", "DEL BooleanLiteral: true", "DEL SimpleType: Reference", "DEL SimpleName: ParseTreeNode", "DEL SimpleName: Reference", "DEL VariableDeclarationStatement", "DEL SimpleName: oldRef", "DEL SimpleName: replaceChild", "DEL SimpleName: s", "DEL Modifier: public", "DEL SimpleName: getIdentifier", "DEL AnonymousClassDeclaration", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: r", "DEL SimpleName: Visitor", "DEL SimpleName: SyntheticNodes", "DEL TextElement: We need to emulate that but still allow the event handlers to be simple", "DEL TextElement: }", "DEL VariableDeclarationFragment", "DEL InstanceofExpression", "DEL SimpleType: ParseTreeNode", "DEL TextElement: function (thisNode___, event) {", "DEL SimpleName: acceptPreOrder", "DEL TextElement: alert(thisNode___.value);", "DEL MethodInvocation", "DEL SimpleName: Identifier", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: visit", "DEL SimpleName: thisNode", "DEL SimpleName: r", "DEL Block", "DEL SimpleType: Identifier", "DEL SimpleName: Block", "DEL TextElement: The event handler goes from:<br>", "DEL TagElement: @code", "DEL SimpleName: node", "DEL QualifiedName: ancestors.node", "DEL ExpressionStatement", "DEL SimpleName: block", "DEL TextElement: Convert \"this\" -> \"thisNode___\" in event handlers.  Event handlers are", "DEL PrimitiveType: void", "DEL WildcardType: ?", "DEL ReturnStatement", "DEL TextElement: }</pre>", "DEL SimpleName: Reference", "DEL IfStatement", "DEL CastExpression", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL QualifiedName: ReservedNames.THIS_NODE", "DEL SimpleName: r", "DEL InstanceofExpression", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: rewriteEventHandlerReferences", "DEL SimpleName: node", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: toString", "DEL SimpleName: oldRef", "DEL SimpleName: FunctionConstructor", "DEL BooleanLiteral: false", "DEL ParameterizedType: AncestorChain<?>", "DEL TextElement: to a function like:<pre>", "DEL SimpleName: node", "DEL SimpleType: Block", "DEL ClassInstanceCreation", "DEL SimpleName: r", "DEL TextElement:  onchange=\"plugin_dispatchEvent___(this, node, 1234, 'handlerName')\"", "DEL MethodInvocation", "DEL SimpleName: Reference", "DEL SimpleName: Identifier", "DEL SimpleName: thisNode", "DEL SimpleName: node", "DEL Block", "DEL PrimitiveType: boolean", "DEL SimpleType: FunctionConstructor", "DEL BooleanLiteral: false", "DEL Modifier: private", "DEL ReturnStatement", "DEL SimpleName: Identifier", "DEL TextElement:  if (this.type === 'text') alert(this.value); ", "DEL TagElement: @code", "DEL SimpleType: Identifier", "DEL SimpleType: Reference", "DEL TextElement: if (thisNode___.type === 'text') {", "DEL SimpleName: getIdentifierName", "DEL Javadoc", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: AncestorChain", "DEL SimpleName: ancestors", "DEL TextElement: <p>", "DEL SimpleType: Reference", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: block", "DEL Block", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodInvocation", "DEL SimpleType: Visitor", "DEL SimpleType: Identifier", "DEL TextElement: run in a context where this points to the current node.", "DEL SimpleName: getFilePosition", "DEL VariableDeclarationStatement", "DEL SimpleName: oldRef", "DEL ReturnStatement", "DEL SimpleType: AncestorChain", "DEL VariableDeclarationStatement", "DEL TextElement: functions, so we pass in the tamed node as the first parameter.", "DEL SimpleName: equals", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL TextElement: And the resulting function is called via a handler attribute like", "DEL SingleVariableDeclaration", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: handlers", "operations": ["DEL SimpleName: handlers"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleType: Statement", "DEL MethodInvocation", "DEL SimpleType: Block", "DEL SimpleName: attr", "DEL MethodInvocation", "DEL SimpleName: tq", "DEL SimpleType: Parser", "DEL MethodInvocation", "DEL SimpleName: b", "DEL TextElement:  handler's or other handler's attribute value", "DEL Modifier: private", "DEL MethodInvocation", "DEL SimpleType: Block", "DEL SimpleName: attr", "DEL SimpleName: Block", "DEL VariableDeclarationStatement", "DEL SimpleName: attr", "DEL SimpleName: JsTokenQueue", "DEL TagElement", "DEL ClassInstanceCreation", "DEL SimpleName: getFilePositionForValue", "DEL SimpleType: Block", "DEL SimpleName: Nodes", "DEL SimpleName: pos", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: setInputRange", "DEL SimpleType: JsLexer", "DEL SimpleName: cp", "DEL SingleVariableDeclaration", "DEL SimpleName: Statement", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL SimpleName: parseJsFromAttrValue", "DEL SimpleName: b", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: mq", "DEL VariableDeclarationFragment", "DEL SimpleName: Collections", "DEL TagElement: @code", "DEL ExpressionStatement", "DEL TextElement:  onclick", "DEL TextElement: as a javascript statement.", "DEL SimpleName: pos", "DEL VariableDeclarationFragment", "DEL SimpleName: Block", "DEL SimpleName: tq", "DEL SimpleName: setFilePosition", "DEL Block", "DEL SimpleName: parse", "DEL SimpleName: pos", "DEL MethodDeclaration", "DEL IfStatement", "DEL SimpleType: FilePosition", "DEL SimpleName: tq", "DEL SimpleName: source", "DEL TextElement: Parses an ", "DEL SimpleType: Attr", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL SimpleName: JsTokenQueue", "DEL SimpleName: cp", "DEL ReturnStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: FilePosition", "DEL SimpleName: JsLexer", "DEL SimpleName: Block", "DEL SimpleName: CharProducer", "DEL SimpleName: tq", "DEL SimpleName: Parser", "DEL VariableDeclarationFragment", "DEL SimpleType: CharProducer", "DEL ReturnStatement", "DEL SimpleType: ParseException", "DEL SimpleName: b", "DEL SimpleName: ParseException", "DEL BooleanLiteral: false", "DEL SimpleName: pos", "DEL SimpleType: JsTokenQueue", "DEL SimpleType: JsTokenQueue", "DEL SimpleName: fromAttrValue", "DEL SimpleName: Attr", "DEL SimpleName: isEmpty", "DEL SimpleName: emptyList", "DEL SimpleName: pos"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Nodes", "DEL MethodDeclaration", "DEL SimpleName: p", "DEL SimpleName: mq", "DEL BooleanLiteral: false", "DEL SimpleName: CssTokenType", "DEL MethodInvocation", "DEL SimpleType: TokenQueue", "DEL Javadoc", "DEL SimpleName: TokenQueue", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: cp", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL SimpleName: expectEmpty", "DEL SimpleName: parseDeclarationGroup", "DEL VariableDeclarationFragment", "DEL SimpleType: Attr", "DEL SimpleName: setInputRange", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: CssParser", "DEL SimpleName: tq", "DEL SimpleName: ParseException", "DEL TextElement: Parses a style attribute's value as a CSS declaration group.", "DEL Block", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL QualifiedName: CssTree.DeclarationGroup", "DEL SimpleName: tq", "DEL SimpleType: CssParser", "DEL SimpleType: CssTokenType", "DEL ReturnStatement", "DEL SimpleName: a", "DEL SimpleType: CssTree.DeclarationGroup", "DEL SimpleName: mq", "DEL SimpleName: decls", "DEL SimpleName: getFilePositionForValue", "DEL VariableDeclarationStatement", "DEL SimpleName: p", "DEL SimpleType: CssTree.DeclarationGroup", "DEL ParameterizedType: TokenQueue<CssTokenType>", "DEL ExpressionStatement", "DEL SimpleName: parseStyleAttrib", "DEL SimpleType: ParseException", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: a", "DEL SimpleType: CharProducer", "DEL SimpleName: makeTokenQueue", "DEL SimpleName: CssParser", "DEL SimpleName: tq", "DEL QualifiedName: CssTree.DeclarationGroup", "DEL MethodInvocation", "DEL SimpleType: CssParser", "DEL SimpleName: CssParser", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleName: tq", "DEL ClassInstanceCreation", "DEL SimpleName: decls", "DEL SimpleName: fromAttrValue", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: Attr", "DEL MethodInvocation", "DEL SimpleName: tq", "DEL SimpleName: isEmpty", "DEL QualifiedName: MessageLevel.WARNING", "DEL SimpleName: CharProducer", "DEL SimpleName: cp", "DEL MethodInvocation", "DEL SimpleName: a", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Nodes", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: StringReader", "DEL MethodInvocation", "DEL SimpleName: cp", "DEL SimpleName: cp", "DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL SimpleName: value", "DEL SimpleName: cp", "DEL SimpleType: CharProducer", "DEL IfStatement", "DEL MethodInvocation", "DEL QualifiedName: CharProducer.Factory", "DEL MethodInvocation", "DEL SimpleName: value", "DEL SimpleName: getOffset", "DEL SimpleName: Nodes", "DEL MethodInvocation", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: equals", "DEL SimpleName: rawValue", "DEL IfStatement", "DEL SimpleName: getBuffer", "DEL SimpleName: fromAttrValue", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: getRawValue", "DEL SimpleName: getNodeValue", "DEL SimpleType: FilePosition", "DEL SimpleName: pos", "DEL SimpleName: value", "DEL MethodInvocation", "DEL SimpleName: CharProducer", "DEL SimpleName: Attr", "DEL SimpleType: String", "DEL SimpleName: CharProducer", "DEL NullLiteral", "DEL SimpleName: deQuote", "DEL MethodInvocation", "DEL QualifiedName: CharProducer.Factory", "DEL Block", "DEL SimpleName: String", "DEL SimpleName: a", "DEL SimpleName: pos", "DEL SimpleName: a", "DEL SimpleName: String", "DEL SimpleName: StringReader", "DEL SimpleName: create", "DEL SimpleName: getLength", "DEL SimpleType: String", "DEL SimpleName: create", "DEL SimpleName: fromHtmlAttribute", "DEL Modifier: private", "DEL SimpleType: StringReader", "DEL SimpleName: a", "DEL SimpleName: a", "DEL VariableDeclarationFragment", "DEL SimpleType: CharProducer", "DEL VariableDeclarationStatement", "DEL SimpleName: rawValue", "DEL QualifiedName: CharProducer.Factory", "DEL MethodInvocation", "DEL SimpleName: getFilePositionForValue", "DEL VariableDeclarationStatement", "DEL SimpleType: StringReader", "DEL SimpleName: cp", "DEL VariableDeclarationFragment", "DEL SimpleType: Attr", "DEL VariableDeclarationFragment", "DEL SimpleName: pos", "DEL SimpleName: valueOf", "DEL MethodInvocation", "DEL Modifier: static", "DEL VariableDeclarationStatement", "DEL SimpleName: rawValue", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL Block", "DEL SimpleName: String", "DEL SimpleName: FilePosition", "DEL ClassInstanceCreation", "DEL SimpleName: cp"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL InfixExpression: <", "DEL ParenthesizedExpression", "DEL SimpleType: String", "DEL SimpleName: s", "DEL InfixExpression: &&", "DEL Modifier: private", "DEL SimpleName: length", "DEL SimpleName: s", "DEL TextElement: Strip quotes from an attribute value if there are any. ", "DEL VariableDeclarationStatement", "DEL Modifier: static", "DEL SimpleName: ch0", "DEL NumberLiteral: 0", "DEL SimpleName: s", "DEL SimpleName: deQuote", "DEL InfixExpression: +", "DEL StringLiteral: \" \"", "DEL SimpleName: String", "DEL ParenthesizedExpression", "DEL NumberLiteral: 1", "DEL SimpleName: ch0", "DEL Javadoc", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL InfixExpression: -", "DEL NumberLiteral: 2", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL SimpleName: s", "DEL SimpleName: len", "DEL SimpleName: charAt", "DEL Block", "DEL SimpleName: len", "DEL SimpleName: s", "DEL CharacterLiteral: '\"'", "DEL InfixExpression: ==", "DEL NumberLiteral: 1", "DEL CharacterLiteral: '\\''", "DEL StringLiteral: \" \"", "DEL VariableDeclarationFragment", "DEL ConditionalExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: s", "DEL SimpleName: substring", "DEL IfStatement", "DEL SimpleName: String", "DEL PrimitiveType: char", "DEL SimpleName: s", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL SimpleName: ch0", "DEL SimpleName: charAt", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL SimpleName: len", "DEL SimpleName: ch0", "DEL InfixExpression: -", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Block", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: len", "DEL ReturnStatement", "DEL NumberLiteral: 1"]}]}}, {"TemplateCompiler_diff": {"operations": ["Move FieldDeclaration(162) into TypeDeclaration: class(918) at 10", "Update SimpleType: CssSchema(159) to HtmlAttributeRewriter", "Move ExpressionStatement(366) into Block(284) at 7", "Update SimpleName: CssSchema(158) to HtmlAttributeRewriter", "Update SimpleName: cssSchema(160) to aRewriter", "Move VariableDeclarationStatement(1055) into Block(772) at 0", "Insert IfStatement(771) into Block(772) at 1", "Update SimpleType: Declaration(1022) to HtmlAttributeRewriter.SanitizedAttr", "Insert QualifiedName: r.isSafe(763) into IfStatement(771) at 0", "Insert Block(770) into IfStatement(771) at 1", "Move SimpleType: SafeHtmlMaker(1825) into VariableDeclarationStatement(830) at 0", "Insert ClassInstanceCreation(281) into Assignment: =(282) at 1", "Insert QualifiedName: HtmlAttributeRewriter.SanitizedAttr(750) into SimpleType: HtmlAttributeRewriter.SanitizedAttr(751) at 0", "Update SimpleName: handler(1023) to r", "Insert MethodInvocation(760) into VariableDeclarationFragment(761) at 1", "Move ExpressionStatement(1321) into Block(770) at 0", "Update SimpleName: cssSchema(362) to aRewriter", "Insert SimpleType: HtmlAttributeRewriter(276) into ClassInstanceCreation(281) at 0", "Insert SimpleName: meta(277) into ClassInstanceCreation(281) at 1", "Insert SimpleName: cssSchema(278) into ClassInstanceCreation(281) at 2", "Insert SimpleName: htmlSchema(279) into ClassInstanceCreation(281) at 3", "Insert SimpleName: mq(280) into ClassInstanceCreation(281) at 4", "Update SimpleName: QuasiBuilder(1026) to aRewriter", "Move SimpleName: QuasiBuilder(1026) into MethodInvocation(760) at 0", "Update SimpleName: substV(1027) to sanitizeStringValue", "Move SimpleName: substV(1027) into MethodInvocation(760) at 1", "Move MethodInvocation(1044) into MethodInvocation(760) at 2", "Move SimpleType: SafeHtmlMaker(1822) into ClassInstanceCreation(828) at 0", "Insert MethodInvocation(827) into ClassInstanceCreation(828) at 6", "Insert SimpleName: HtmlAttributeRewriter(275) into SimpleType: HtmlAttributeRewriter(276) at 0", "Update SimpleName: SyntheticNodes(1037) to HtmlAttributeRewriter", "Update SimpleName: s(1038) to fromAttr", "Insert SimpleName: attr(757) into MethodInvocation(759) at 2", "Insert SimpleName: info(758) into MethodInvocation(759) at 3", "Insert QualifiedName: r.result(767) into MethodInvocation(768) at 3", "Insert SimpleName: aRewriter(825) into MethodInvocation(827) at 0", "Insert SimpleName: getHandlers(826) into MethodInvocation(827) at 1", "Insert InfixExpression: +(563) into Assignment: =(564) at 1", "Insert StringLiteral: \"\"(554) into InfixExpression: +(563) at 0", "Move MethodInvocation(668) into InfixExpression: +(563) at 1", "Delete QualifiedName: com.google.caja.lexer.CharProducer(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.google.caja.lexer.CssTokenType(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: com.google.caja.lexer.ExternalReference(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: com.google.caja.lexer.FilePosition(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: com.google.caja.lexer.JsLexer(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: com.google.caja.lexer.JsTokenQueue(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: com.google.caja.lexer.Keyword(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: com.google.caja.lexer.ParseException(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: com.google.caja.lexer.TokenQueue(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: com.google.caja.parser.AncestorChain(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: com.google.caja.parser.ParseTreeNodeContainer(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: com.google.caja.parser.Visitor(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: com.google.caja.parser.css.CssParser(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: com.google.caja.parser.js.Declaration(42)", "Delete ImportDeclaration(43)", "Delete QualifiedName: com.google.caja.parser.js.Expression(44)", "Delete ImportDeclaration(45)", "Delete QualifiedName: com.google.caja.parser.js.FunctionConstructor(46)", "Delete ImportDeclaration(47)", "Delete QualifiedName: com.google.caja.parser.js.Identifier(48)", "Delete ImportDeclaration(49)", "Delete QualifiedName: com.google.caja.parser.js.Parser(50)", "Delete ImportDeclaration(51)", "Delete QualifiedName: com.google.caja.parser.js.Reference(52)", "Delete ImportDeclaration(53)", "Delete QualifiedName: com.google.caja.parser.js.Statement(54)", "Delete ImportDeclaration(55)", "Delete QualifiedName: com.google.caja.parser.js.StringLiteral(56)", "Delete ImportDeclaration(57)", "Delete QualifiedName: com.google.caja.parser.js.SyntheticNodes(58)", "Delete ImportDeclaration(59)", "Delete QualifiedName: com.google.caja.parser.quasiliteral.QuasiBuilder(62)", "Delete ImportDeclaration(63)", "Delete QualifiedName: com.google.caja.parser.quasiliteral.ReservedNames(64)", "Delete ImportDeclaration(65)", "Delete QualifiedName: com.google.caja.plugin.CssRewriter(66)", "Delete ImportDeclaration(67)", "Delete QualifiedName: com.google.caja.plugin.CssValidator(68)", "Delete ImportDeclaration(69)", "Delete QualifiedName: com.google.caja.reporting.RenderContext(82)", "Delete ImportDeclaration(83)", "Delete QualifiedName: java.io.StringReader(88)", "Delete ImportDeclaration(89)", "Delete QualifiedName: java.net.URI(90)", "Delete ImportDeclaration(91)", "Delete QualifiedName: java.net.URISyntaxException(92)", "Delete ImportDeclaration(93)", "Delete QualifiedName: java.util.Collections(96)", "Delete ImportDeclaration(97)", "Delete QualifiedName: java.util.HashMap(98)", "Delete ImportDeclaration(99)", "Delete QualifiedName: java.util.regex.Pattern(106)", "Delete ImportDeclaration(107)", "Delete TextElement: <li>If the node is an (201)", "Delete TextElement:  Element(202)", "Delete TagElement: @code(203)", "Delete TextElement: , then the value is an expression(204)", "Delete TextElement: that returns a tag name.</li>(205)", "Delete TextElement: Extracted event handler functions. (237)", "Delete TagElement(238)", "Delete Javadoc(239)", "Delete Modifier: private(240)", "Delete Modifier: final(241)", "Delete SimpleName: List(242)", "Delete SimpleType: List(243)", "Delete SimpleName: Statement(244)", "Delete SimpleType: Statement(245)", "Delete ParameterizedType: List<Statement>(246)", "Delete SimpleName: handlers(247)", "Delete SimpleName: ArrayList(248)", "Delete SimpleType: ArrayList(249)", "Delete SimpleName: Statement(250)", "Delete SimpleType: Statement(251)", "Delete ParameterizedType: ArrayList<Statement>(252)", "Delete ClassInstanceCreation(253)", "Delete VariableDeclarationFragment(254)", "Delete FieldDeclaration(255)", "Delete TextElement: Maps handler attribute source to handler names. (256)", "Delete TagElement(257)", "Delete Javadoc(258)", "Delete Modifier: private(259)", "Delete Modifier: final(260)", "Delete SimpleName: Map(261)", "Delete SimpleType: Map(262)", "Delete SimpleName: String(263)", "Delete SimpleType: String(264)", "Delete SimpleName: String(265)", "Delete SimpleType: String(266)", "Delete ParameterizedType: Map<String,String>(267)", "Delete SimpleName: handlerCache(268)", "Delete SimpleName: HashMap(269)", "Delete SimpleType: HashMap(270)", "Delete SimpleName: String(271)", "Delete SimpleType: String(272)", "Delete SimpleName: String(273)", "Delete SimpleType: String(274)", "Delete ParameterizedType: HashMap<String,String>(275)", "Delete ClassInstanceCreation(276)", "Delete VariableDeclarationFragment(277)", "Delete FieldDeclaration(278)", "Delete SimpleName: cssSchema(364)", "Delete SimpleName: toString(669)", "Delete MethodInvocation(670)", "Delete SimpleName: Declaration(1021)", "Delete SimpleName: Identifier(1039)", "Delete SimpleType: Identifier(1040)", "Delete QualifiedName: FilePosition.UNKNOWN(1041)", "Delete SimpleName: handlerFnName(1042)", "Delete ClassInstanceCreation(1043)", "Delete SimpleName: Declaration(1024)", "Delete SimpleType: Declaration(1025)", "Delete StringLiteral: \"\"(1028)", "Delete StringLiteral: \"var @handlerName = ___./*@synthetic*/markFuncFreeze(\"(1029)", "Delete StringLiteral: \"    /*@synthetic*/function (\"(1030)", "Delete StringLiteral: \"        event, \"(1031)", "Delete InfixExpression: +(1032)", "Delete QualifiedName: ReservedNames.THIS_NODE(1033)", "Delete StringLiteral: \") { @body*; });\"(1034)", "Delete InfixExpression: +(1035)", "Delete StringLiteral: \"handlerName\"(1036)", "Delete StringLiteral: \"body\"(1045)", "Delete SimpleName: ParseTreeNodeContainer(1046)", "Delete SimpleType: ParseTreeNodeContainer(1047)", "Delete SimpleName: b(1048)", "Delete SimpleName: children(1049)", "Delete MethodInvocation(1050)", "Delete ClassInstanceCreation(1051)", "Delete MethodInvocation(1052)", "Delete CastExpression(1053)", "Delete SimpleName: dynamicValue(1319)", "Delete SimpleName: FilePosition(857)", "Delete SimpleType: FilePosition(858)", "Delete SimpleName: pos(859)", "Delete SimpleName: Nodes(860)", "Delete SimpleName: getFilePositionForValue(861)", "Delete SimpleName: attr(862)", "Delete MethodInvocation(863)", "Delete VariableDeclarationFragment(864)", "Delete VariableDeclarationStatement(865)", "Delete SimpleName: String(866)", "Delete SimpleType: String(867)", "Delete SimpleName: value(868)", "Delete SimpleName: attr(869)", "Delete SimpleName: getValue(870)", "Delete MethodInvocation(871)", "Delete VariableDeclarationFragment(872)", "Delete VariableDeclarationStatement(873)", "Delete SimpleName: Expression(874)", "Delete SimpleType: Expression(875)", "Delete SimpleName: dynamicValue(876)", "Delete VariableDeclarationFragment(877)", "Delete VariableDeclarationStatement(878)", "Delete SimpleName: info(879)", "Delete SimpleName: getType(880)", "Delete MethodInvocation(881)", "Delete SimpleName: CLASSES(882)", "Delete SwitchCase(883)", "Delete SimpleName: checkRestrictedNames(884)", "Delete SimpleName: value(885)", "Delete SimpleName: pos(886)", "Delete MethodInvocation(887)", "Delete PrefixExpression: !(888)", "Delete ReturnStatement(889)", "Delete Block(890)", "Delete IfStatement(891)", "Delete SimpleName: dynamicValue(892)", "Delete NullLiteral(893)", "Delete Assignment: =(894)", "Delete ExpressionStatement(895)", "Delete BreakStatement(896)", "Delete SimpleName: FRAME_TARGET(897)", "Delete SwitchCase(898)", "Delete SimpleName: LOCAL_NAME(899)", "Delete SwitchCase(900)", "Delete SimpleName: checkRestrictedName(901)", "Delete SimpleName: value(902)", "Delete SimpleName: pos(903)", "Delete MethodInvocation(904)", "Delete PrefixExpression: !(905)", "Delete ReturnStatement(906)", "Delete Block(907)", "Delete IfStatement(908)", "Delete SimpleName: dynamicValue(909)", "Delete NullLiteral(910)", "Delete Assignment: =(911)", "Delete ExpressionStatement(912)", "Delete BreakStatement(913)", "Delete SimpleName: GLOBAL_NAME(914)", "Delete SwitchCase(915)", "Delete SimpleName: ID(916)", "Delete SwitchCase(917)", "Delete SimpleName: IDREF(918)", "Delete SwitchCase(919)", "Delete SimpleName: checkRestrictedName(920)", "Delete SimpleName: value(921)", "Delete SimpleName: pos(922)", "Delete MethodInvocation(923)", "Delete PrefixExpression: !(924)", "Delete ReturnStatement(925)", "Delete Block(926)", "Delete IfStatement(927)", "Delete SimpleName: dynamicValue(928)", "Delete SimpleName: rewriteIdentifiers(929)", "Delete SimpleName: pos(930)", "Delete SimpleName: value(931)", "Delete MethodInvocation(932)", "Delete Assignment: =(933)", "Delete ExpressionStatement(934)", "Delete BreakStatement(935)", "Delete SimpleName: IDREFS(936)", "Delete SwitchCase(937)", "Delete SimpleName: checkRestrictedNames(938)", "Delete SimpleName: value(939)", "Delete SimpleName: pos(940)", "Delete MethodInvocation(941)", "Delete PrefixExpression: !(942)", "Delete ReturnStatement(943)", "Delete Block(944)", "Delete IfStatement(945)", "Delete SimpleName: dynamicValue(946)", "Delete SimpleName: rewriteIdentifiers(947)", "Delete SimpleName: pos(948)", "Delete SimpleName: value(949)", "Delete MethodInvocation(950)", "Delete Assignment: =(951)", "Delete ExpressionStatement(952)", "Delete BreakStatement(953)", "Delete SimpleName: NONE(954)", "Delete SwitchCase(955)", "Delete SimpleName: dynamicValue(956)", "Delete NullLiteral(957)", "Delete Assignment: =(958)", "Delete ExpressionStatement(959)", "Delete BreakStatement(960)", "Delete SimpleName: SCRIPT(961)", "Delete SwitchCase(962)", "Delete SimpleName: String(963)", "Delete SimpleType: String(964)", "Delete SimpleName: handlerFnName(965)", "Delete SimpleName: handlerCache(966)", "Delete SimpleName: get(967)", "Delete SimpleName: attr(968)", "Delete SimpleName: getValue(969)", "Delete MethodInvocation(970)", "Delete MethodInvocation(971)", "Delete VariableDeclarationFragment(972)", "Delete VariableDeclarationStatement(973)", "Delete SimpleName: handlerFnName(974)", "Delete NullLiteral(975)", "Delete InfixExpression: ==(976)", "Delete SimpleName: Block(977)", "Delete SimpleType: Block(978)", "Delete SimpleName: b(979)", "Delete VariableDeclarationFragment(980)", "Delete VariableDeclarationStatement(981)", "Delete SimpleName: b(982)", "Delete SimpleName: parseJsFromAttrValue(983)", "Delete SimpleName: attr(984)", "Delete MethodInvocation(985)", "Delete Assignment: =(986)", "Delete ExpressionStatement(987)", "Delete Block(988)", "Delete SimpleName: ParseException(989)", "Delete SimpleType: ParseException(990)", "Delete SimpleName: ex(991)", "Delete SingleVariableDeclaration(992)", "Delete SimpleName: ex(993)", "Delete SimpleName: toMessageQueue(994)", "Delete SimpleName: mq(995)", "Delete MethodInvocation(996)", "Delete ExpressionStatement(997)", "Delete ReturnStatement(998)", "Delete Block(999)", "Delete CatchClause(1000)", "Delete TryStatement(1001)", "Delete SimpleName: b(1002)", "Delete SimpleName: children(1003)", "Delete MethodInvocation(1004)", "Delete SimpleName: isEmpty(1005)", "Delete MethodInvocation(1006)", "Delete ReturnStatement(1007)", "Delete Block(1008)", "Delete IfStatement(1009)", "Delete SimpleName: rewriteEventHandlerReferences(1010)", "Delete SimpleName: b(1011)", "Delete MethodInvocation(1012)", "Delete ExpressionStatement(1013)", "Delete SimpleName: handlerFnName(1014)", "Delete SimpleName: meta(1015)", "Delete SimpleName: generateUniqueName(1016)", "Delete StringLiteral: \"c\"(1017)", "Delete MethodInvocation(1018)", "Delete Assignment: =(1019)", "Delete ExpressionStatement(1020)", "Delete SimpleName: handlers(1056)", "Delete SimpleName: add(1057)", "Delete SimpleName: handler(1058)", "Delete MethodInvocation(1059)", "Delete ExpressionStatement(1060)", "Delete SimpleName: handlerCache(1061)", "Delete SimpleName: put(1062)", "Delete SimpleName: attr(1063)", "Delete SimpleName: getValue(1064)", "Delete MethodInvocation(1065)", "Delete SimpleName: handlerFnName(1066)", "Delete MethodInvocation(1067)", "Delete ExpressionStatement(1068)", "Delete Block(1069)", "Delete IfStatement(1070)", "Delete SimpleName: FunctionConstructor(1071)", "Delete SimpleType: FunctionConstructor(1072)", "Delete SimpleName: eventAdapter(1073)", "Delete SimpleName: FunctionConstructor(1074)", "Delete SimpleType: FunctionConstructor(1075)", "Delete SimpleName: QuasiBuilder(1076)", "Delete SimpleName: substV(1077)", "Delete StringLiteral: \"\"(1078)", "Delete StringLiteral: \"(/*@synthetic*/ function (event) {\"(1079)", "Delete StringLiteral: \"  return /*@synthetic*/ (plugin_dispatchEvent___(\"(1080)", "Delete StringLiteral: \"      /*@synthetic*/this, event, \"(1081)", "Delete StringLiteral: \"      ___./*@synthetic*/getId(IMPORTS___), @tail));\"(1082)", "Delete StringLiteral: \"})\"(1083)", "Delete InfixExpression: +(1084)", "Delete StringLiteral: \"tail\"(1085)", "Delete SimpleName: Reference(1086)", "Delete SimpleType: Reference(1087)", "Delete SimpleName: SyntheticNodes(1088)", "Delete SimpleName: s(1089)", "Delete SimpleName: Identifier(1090)", "Delete SimpleType: Identifier(1091)", "Delete SimpleName: pos(1092)", "Delete SimpleName: handlerFnName(1093)", "Delete ClassInstanceCreation(1094)", "Delete MethodInvocation(1095)", "Delete ClassInstanceCreation(1096)", "Delete MethodInvocation(1097)", "Delete CastExpression(1098)", "Delete VariableDeclarationFragment(1099)", "Delete VariableDeclarationStatement(1100)", "Delete SimpleName: eventAdapter(1101)", "Delete SimpleName: setFilePosition(1102)", "Delete SimpleName: pos(1103)", "Delete MethodInvocation(1104)", "Delete ExpressionStatement(1105)", "Delete SimpleName: dynamicValue(1106)", "Delete SimpleName: eventAdapter(1107)", "Delete Assignment: =(1108)", "Delete ExpressionStatement(1109)", "Delete BreakStatement(1110)", "Delete SimpleName: STYLE(1111)", "Delete SwitchCase(1112)", "Delete QualifiedName: CssTree.DeclarationGroup(1113)", "Delete SimpleType: CssTree.DeclarationGroup(1114)", "Delete SimpleName: decls(1115)", "Delete VariableDeclarationFragment(1116)", "Delete VariableDeclarationStatement(1117)", "Delete SimpleName: decls(1118)", "Delete SimpleName: parseStyleAttrib(1119)", "Delete SimpleName: attr(1120)", "Delete MethodInvocation(1121)", "Delete Assignment: =(1122)", "Delete ExpressionStatement(1123)", "Delete SimpleName: decls(1124)", "Delete NullLiteral(1125)", "Delete InfixExpression: ==(1126)", "Delete ReturnStatement(1127)", "Delete Block(1128)", "Delete IfStatement(1129)", "Delete Block(1130)", "Delete SimpleName: ParseException(1131)", "Delete SimpleType: ParseException(1132)", "Delete SimpleName: ex(1133)", "Delete SingleVariableDeclaration(1134)", "Delete SimpleName: ex(1135)", "Delete SimpleName: toMessageQueue(1136)", "Delete SimpleName: mq(1137)", "Delete MethodInvocation(1138)", "Delete ExpressionStatement(1139)", "Delete ReturnStatement(1140)", "Delete Block(1141)", "Delete CatchClause(1142)", "Delete TryStatement(1143)", "Delete SimpleName: CssValidator(1144)", "Delete SimpleType: CssValidator(1145)", "Delete SimpleName: v(1146)", "Delete SimpleName: CssValidator(1147)", "Delete SimpleType: CssValidator(1148)", "Delete SimpleName: cssSchema(1149)", "Delete SimpleName: htmlSchema(1150)", "Delete SimpleName: mq(1151)", "Delete ClassInstanceCreation(1152)", "Delete SimpleName: withInvalidNodeMessageLevel(1153)", "Delete QualifiedName: MessageLevel.WARNING(1154)", "Delete MethodInvocation(1155)", "Delete VariableDeclarationFragment(1156)", "Delete VariableDeclarationStatement(1157)", "Delete SimpleName: v(1158)", "Delete SimpleName: validateCss(1159)", "Delete SimpleName: AncestorChain(1160)", "Delete SimpleName: instance(1161)", "Delete SimpleName: decls(1162)", "Delete MethodInvocation(1163)", "Delete MethodInvocation(1164)", "Delete ExpressionStatement(1165)", "Delete SimpleName: CssRewriter(1166)", "Delete SimpleType: CssRewriter(1167)", "Delete SimpleName: meta(1168)", "Delete SimpleName: mq(1169)", "Delete ClassInstanceCreation(1170)", "Delete SimpleName: withInvalidNodeMessageLevel(1171)", "Delete QualifiedName: MessageLevel.WARNING(1172)", "Delete MethodInvocation(1173)", "Delete SimpleName: rewrite(1174)", "Delete SimpleName: AncestorChain(1175)", "Delete SimpleName: instance(1176)", "Delete SimpleName: decls(1177)", "Delete MethodInvocation(1178)", "Delete MethodInvocation(1179)", "Delete ExpressionStatement(1180)", "Delete SimpleName: StringBuilder(1181)", "Delete SimpleType: StringBuilder(1182)", "Delete SimpleName: css(1183)", "Delete SimpleName: StringBuilder(1184)", "Delete SimpleType: StringBuilder(1185)", "Delete ClassInstanceCreation(1186)", "Delete VariableDeclarationFragment(1187)", "Delete VariableDeclarationStatement(1188)", "Delete SimpleName: RenderContext(1189)", "Delete SimpleType: RenderContext(1190)", "Delete SimpleName: rc(1191)", "Delete SimpleName: RenderContext(1192)", "Delete SimpleType: RenderContext(1193)", "Delete SimpleName: decls(1194)", "Delete SimpleName: makeRenderer(1195)", "Delete SimpleName: css(1196)", "Delete NullLiteral(1197)", "Delete MethodInvocation(1198)", "Delete ClassInstanceCreation(1199)", "Delete VariableDeclarationFragment(1200)", "Delete VariableDeclarationStatement(1201)", "Delete SimpleName: decls(1202)", "Delete SimpleName: render(1203)", "Delete SimpleName: rc(1204)", "Delete MethodInvocation(1205)", "Delete ExpressionStatement(1206)", "Delete SimpleName: rc(1207)", "Delete SimpleName: getOut(1208)", "Delete MethodInvocation(1209)", "Delete SimpleName: noMoreTokens(1210)", "Delete MethodInvocation(1211)", "Delete ExpressionStatement(1212)", "Delete SimpleName: dynamicValue(1213)", "Delete SimpleName: StringLiteral(1214)", "Delete SimpleName: valueOf(1215)", "Delete SimpleName: pos(1216)", "Delete SimpleName: css(1217)", "Delete MethodInvocation(1218)", "Delete Assignment: =(1219)", "Delete ExpressionStatement(1220)", "Delete BreakStatement(1221)", "Delete SimpleName: URI(1222)", "Delete SwitchCase(1223)", "Delete SimpleName: URI(1224)", "Delete SimpleType: URI(1225)", "Delete SimpleName: uri(1226)", "Delete SimpleName: URI(1227)", "Delete SimpleType: URI(1228)", "Delete SimpleName: value(1229)", "Delete ClassInstanceCreation(1230)", "Delete VariableDeclarationFragment(1231)", "Delete VariableDeclarationStatement(1232)", "Delete SimpleName: ExternalReference(1233)", "Delete SimpleType: ExternalReference(1234)", "Delete SimpleName: ref(1235)", "Delete SimpleName: ExternalReference(1236)", "Delete SimpleType: ExternalReference(1237)", "Delete SimpleName: uri(1238)", "Delete SimpleName: pos(1239)", "Delete ClassInstanceCreation(1240)", "Delete VariableDeclarationFragment(1241)", "Delete VariableDeclarationStatement(1242)", "Delete SimpleName: String(1243)", "Delete SimpleType: String(1244)", "Delete SimpleName: rewrittenUri(1245)", "Delete SimpleName: meta(1246)", "Delete SimpleName: getPluginEnvironment(1247)", "Delete MethodInvocation(1248)", "Delete SimpleName: rewriteUri(1249)", "Delete SimpleName: ref(1250)", "Delete SimpleName: info(1251)", "Delete SimpleName: getMimeTypes(1252)", "Delete MethodInvocation(1253)", "Delete MethodInvocation(1254)", "Delete VariableDeclarationFragment(1255)", "Delete VariableDeclarationStatement(1256)", "Delete SimpleName: rewrittenUri(1257)", "Delete NullLiteral(1258)", "Delete InfixExpression: ==(1259)", "Delete SimpleName: mq(1260)", "Delete SimpleName: addMessage(1261)", "Delete QualifiedName: IhtmlMessageType.MALFORMED_URI(1262)", "Delete SimpleName: pos(1263)", "Delete QualifiedName: MessagePart.Factory(1264)", "Delete SimpleName: valueOf(1265)", "Delete SimpleName: uri(1266)", "Delete SimpleName: toString(1267)", "Delete MethodInvocation(1268)", "Delete MethodInvocation(1269)", "Delete MethodInvocation(1270)", "Delete ExpressionStatement(1271)", "Delete ReturnStatement(1272)", "Delete Block(1273)", "Delete IfStatement(1274)", "Delete SimpleName: dynamicValue(1275)", "Delete SimpleName: StringLiteral(1276)", "Delete SimpleName: valueOf(1277)", "Delete SimpleName: ref(1278)", "Delete SimpleName: getReferencePosition(1279)", "Delete MethodInvocation(1280)", "Delete SimpleName: rewrittenUri(1281)", "Delete MethodInvocation(1282)", "Delete Assignment: =(1283)", "Delete ExpressionStatement(1284)", "Delete Block(1285)", "Delete SimpleName: URISyntaxException(1286)", "Delete SimpleType: URISyntaxException(1287)", "Delete SimpleName: ex(1288)", "Delete SingleVariableDeclaration(1289)", "Delete SimpleName: mq(1290)", "Delete SimpleName: addMessage(1291)", "Delete QualifiedName: IhtmlMessageType.MALFORMED_URI(1292)", "Delete SimpleName: pos(1293)", "Delete QualifiedName: MessagePart.Factory(1294)", "Delete SimpleName: valueOf(1295)", "Delete SimpleName: value(1296)", "Delete MethodInvocation(1297)", "Delete MethodInvocation(1298)", "Delete ExpressionStatement(1299)", "Delete ReturnStatement(1300)", "Delete Block(1301)", "Delete CatchClause(1302)", "Delete TryStatement(1303)", "Delete BreakStatement(1304)", "Delete SwitchCase(1305)", "Delete SimpleName: RuntimeException(1306)", "Delete SimpleType: RuntimeException(1307)", "Delete SimpleName: info(1308)", "Delete SimpleName: getType(1309)", "Delete MethodInvocation(1310)", "Delete SimpleName: name(1311)", "Delete MethodInvocation(1312)", "Delete ClassInstanceCreation(1313)", "Delete ThrowStatement(1314)", "Delete SwitchStatement(1315)", "Delete Modifier: private(1324)", "Delete Modifier: static(1325)", "Delete Modifier: final(1326)", "Delete SimpleName: Pattern(1327)", "Delete SimpleType: Pattern(1328)", "Delete SimpleName: IDENTIFIER_SEPARATOR(1329)", "Delete SimpleName: Pattern(1330)", "Delete SimpleName: compile(1331)", "Delete StringLiteral: \"\\\\s+\"(1332)", "Delete MethodInvocation(1333)", "Delete VariableDeclarationFragment(1334)", "Delete FieldDeclaration(1335)", "Delete Modifier: private(1336)", "Delete Modifier: static(1337)", "Delete Modifier: final(1338)", "Delete SimpleName: Pattern(1339)", "Delete SimpleType: Pattern(1340)", "Delete SimpleName: ALLOWED_NAME(1341)", "Delete SimpleName: Pattern(1342)", "Delete SimpleName: compile(1343)", "Delete StringLiteral: \"^[\\\\p{Alpha}_:][\\\\p{Alnum}.\\\\-_:]*$\"(1344)", "Delete MethodInvocation(1345)", "Delete VariableDeclarationFragment(1346)", "Delete FieldDeclaration(1347)", "Delete TextElement: True if value is a valid XML names outside the restricted namespace. (1348)", "Delete TagElement(1349)", "Delete Javadoc(1350)", "Delete Modifier: private(1351)", "Delete PrimitiveType: boolean(1352)", "Delete SimpleName: checkRestrictedName(1353)", "Delete SimpleName: String(1354)", "Delete SimpleType: String(1355)", "Delete SimpleName: value(1356)", "Delete SingleVariableDeclaration(1357)", "Delete SimpleName: FilePosition(1358)", "Delete SimpleType: FilePosition(1359)", "Delete SimpleName: pos(1360)", "Delete SingleVariableDeclaration(1361)", "Delete StringLiteral: \"\"(1362)", "Delete SimpleName: equals(1363)", "Delete SimpleName: value(1364)", "Delete MethodInvocation(1365)", "Delete SimpleName: IDENTIFIER_SEPARATOR(1366)", "Delete SimpleName: matcher(1367)", "Delete SimpleName: value(1368)", "Delete MethodInvocation(1369)", "Delete SimpleName: find(1370)", "Delete MethodInvocation(1371)", "Delete PrefixExpression: !(1372)", "Delete InfixExpression: ||(1373)", "Delete AssertStatement(1374)", "Delete SimpleName: ALLOWED_NAME(1375)", "Delete SimpleName: matcher(1376)", "Delete SimpleName: value(1377)", "Delete MethodInvocation(1378)", "Delete SimpleName: find(1379)", "Delete MethodInvocation(1380)", "Delete BooleanLiteral: true(1381)", "Delete ReturnStatement(1382)", "Delete Block(1383)", "Delete IfStatement(1384)", "Delete QualifiedName: System.err(1385)", "Delete SimpleName: println(1386)", "Delete StringLiteral: \"rejected ident `\"(1387)", "Delete SimpleName: value(1388)", "Delete StringLiteral: \"`\"(1389)", "Delete InfixExpression: +(1390)", "Delete MethodInvocation(1391)", "Delete ExpressionStatement(1392)", "Delete StringLiteral: \"\"(1393)", "Delete SimpleName: equals(1394)", "Delete SimpleName: value(1395)", "Delete MethodInvocation(1396)", "Delete PrefixExpression: !(1397)", "Delete SimpleName: mq(1398)", "Delete SimpleName: addMessage(1399)", "Delete QualifiedName: IhtmlMessageType.ILLEGAL_NAME(1400)", "Delete SimpleName: pos(1401)", "Delete QualifiedName: MessagePart.Factory(1402)", "Delete SimpleName: valueOf(1403)", "Delete SimpleName: value(1404)", "Delete MethodInvocation(1405)", "Delete MethodInvocation(1406)", "Delete ExpressionStatement(1407)", "Delete Block(1408)", "Delete IfStatement(1409)", "Delete BooleanLiteral: false(1410)", "Delete ReturnStatement(1411)", "Delete Block(1412)", "Delete MethodDeclaration(1413)", "Delete TextElement: True iff value is a space separated group of XML names outside the(1414)", "Delete TextElement: restricted namespace.(1415)", "Delete TagElement(1416)", "Delete Javadoc(1417)", "Delete Modifier: private(1418)", "Delete PrimitiveType: boolean(1419)", "Delete SimpleName: checkRestrictedNames(1420)", "Delete SimpleName: String(1421)", "Delete SimpleType: String(1422)", "Delete SimpleName: value(1423)", "Delete SingleVariableDeclaration(1424)", "Delete SimpleName: FilePosition(1425)", "Delete SimpleType: FilePosition(1426)", "Delete SimpleName: pos(1427)", "Delete SingleVariableDeclaration(1428)", "Delete StringLiteral: \"\"(1429)", "Delete SimpleName: equals(1430)", "Delete SimpleName: value(1431)", "Delete MethodInvocation(1432)", "Delete BooleanLiteral: true(1433)", "Delete ReturnStatement(1434)", "Delete Block(1435)", "Delete IfStatement(1436)", "Delete PrimitiveType: boolean(1437)", "Delete SimpleName: ok(1438)", "Delete BooleanLiteral: true(1439)", "Delete VariableDeclarationFragment(1440)", "Delete VariableDeclarationStatement(1441)", "Delete SimpleName: String(1442)", "Delete SimpleType: String(1443)", "Delete SimpleName: ident(1444)", "Delete SingleVariableDeclaration(1445)", "Delete SimpleName: IDENTIFIER_SEPARATOR(1446)", "Delete SimpleName: split(1447)", "Delete SimpleName: value(1448)", "Delete MethodInvocation(1449)", "Delete StringLiteral: \"\"(1450)", "Delete SimpleName: equals(1451)", "Delete SimpleName: ident(1452)", "Delete MethodInvocation(1453)", "Delete ContinueStatement(1454)", "Delete Block(1455)", "Delete IfStatement(1456)", "Delete SimpleName: ALLOWED_NAME(1457)", "Delete SimpleName: matcher(1458)", "Delete SimpleName: ident(1459)", "Delete MethodInvocation(1460)", "Delete SimpleName: matches(1461)", "Delete MethodInvocation(1462)", "Delete PrefixExpression: !(1463)", "Delete SimpleName: mq(1464)", "Delete SimpleName: addMessage(1465)", "Delete QualifiedName: IhtmlMessageType.ILLEGAL_NAME(1466)", "Delete SimpleName: pos(1467)", "Delete QualifiedName: MessagePart.Factory(1468)", "Delete SimpleName: valueOf(1469)", "Delete SimpleName: ident(1470)", "Delete MethodInvocation(1471)", "Delete MethodInvocation(1472)", "Delete ExpressionStatement(1473)", "Delete SimpleName: ok(1474)", "Delete BooleanLiteral: false(1475)", "Delete Assignment: =(1476)", "Delete ExpressionStatement(1477)", "Delete Block(1478)", "Delete IfStatement(1479)", "Delete Block(1480)", "Delete EnhancedForStatement(1481)", "Delete SimpleName: ok(1482)", "Delete ReturnStatement(1483)", "Delete Block(1484)", "Delete MethodDeclaration(1485)", "Delete TextElement: \"foo bar baz\" -> \"foo-suffix___ bar-suffix___ baz-suffix___\". (1486)", "Delete TagElement(1487)", "Delete Javadoc(1488)", "Delete Modifier: private(1489)", "Delete SimpleName: Expression(1490)", "Delete SimpleType: Expression(1491)", "Delete SimpleName: rewriteIdentifiers(1492)", "Delete SimpleName: FilePosition(1493)", "Delete SimpleType: FilePosition(1494)", "Delete SimpleName: pos(1495)", "Delete SingleVariableDeclaration(1496)", "Delete SimpleName: String(1497)", "Delete SimpleType: String(1498)", "Delete SimpleName: names(1499)", "Delete SingleVariableDeclaration(1500)", "Delete StringLiteral: \"\"(1501)", "Delete SimpleName: equals(1502)", "Delete SimpleName: names(1503)", "Delete MethodInvocation(1504)", "Delete NullLiteral(1505)", "Delete ReturnStatement(1506)", "Delete Block(1507)", "Delete IfStatement(1508)", "Delete SimpleName: String(1509)", "Delete SimpleType: String(1510)", "Delete Dimension(1511)", "Delete ArrayType: String[](1512)", "Delete SimpleName: idents(1513)", "Delete SimpleName: IDENTIFIER_SEPARATOR(1514)", "Delete SimpleName: split(1515)", "Delete SimpleName: names(1516)", "Delete MethodInvocation(1517)", "Delete VariableDeclarationFragment(1518)", "Delete VariableDeclarationStatement(1519)", "Delete SimpleName: String(1520)", "Delete SimpleType: String(1521)", "Delete SimpleName: idClass(1522)", "Delete SimpleName: meta(1523)", "Delete SimpleName: getIdClass(1524)", "Delete MethodInvocation(1525)", "Delete VariableDeclarationFragment(1526)", "Delete VariableDeclarationStatement(1527)", "Delete SimpleName: idClass(1528)", "Delete NullLiteral(1529)", "Delete InfixExpression: !=(1530)", "Delete SimpleName: StringBuilder(1531)", "Delete SimpleType: StringBuilder(1532)", "Delete SimpleName: result(1533)", "Delete SimpleName: StringBuilder(1534)", "Delete SimpleType: StringBuilder(1535)", "Delete SimpleName: names(1536)", "Delete SimpleName: length(1537)", "Delete MethodInvocation(1538)", "Delete ClassInstanceCreation(1539)", "Delete VariableDeclarationFragment(1540)", "Delete VariableDeclarationStatement(1541)", "Delete SimpleName: String(1542)", "Delete SimpleType: String(1543)", "Delete SimpleName: ident(1544)", "Delete SingleVariableDeclaration(1545)", "Delete SimpleName: idents(1546)", "Delete StringLiteral: \"\"(1547)", "Delete SimpleName: equals(1548)", "Delete SimpleName: ident(1549)", "Delete MethodInvocation(1550)", "Delete ContinueStatement(1551)", "Delete Block(1552)", "Delete IfStatement(1553)", "Delete SimpleName: result(1554)", "Delete SimpleName: length(1555)", "Delete MethodInvocation(1556)", "Delete NumberLiteral: 0(1557)", "Delete InfixExpression: !=(1558)", "Delete SimpleName: result(1559)", "Delete SimpleName: append(1560)", "Delete CharacterLiteral: ' '(1561)", "Delete MethodInvocation(1562)", "Delete ExpressionStatement(1563)", "Delete Block(1564)", "Delete IfStatement(1565)", "Delete SimpleName: result(1566)", "Delete SimpleName: append(1567)", "Delete SimpleName: ident(1568)", "Delete MethodInvocation(1569)", "Delete SimpleName: append(1570)", "Delete CharacterLiteral: '-'(1571)", "Delete MethodInvocation(1572)", "Delete SimpleName: append(1573)", "Delete SimpleName: idClass(1574)", "Delete MethodInvocation(1575)", "Delete ExpressionStatement(1576)", "Delete Block(1577)", "Delete EnhancedForStatement(1578)", "Delete SimpleName: StringLiteral(1579)", "Delete SimpleName: valueOf(1580)", "Delete SimpleName: pos(1581)", "Delete SimpleName: result(1582)", "Delete SimpleName: toString(1583)", "Delete MethodInvocation(1584)", "Delete MethodInvocation(1585)", "Delete ReturnStatement(1586)", "Delete Block(1587)", "Delete SimpleName: Expression(1588)", "Delete SimpleType: Expression(1589)", "Delete SimpleName: result(1590)", "Delete NullLiteral(1591)", "Delete VariableDeclarationFragment(1592)", "Delete VariableDeclarationStatement(1593)", "Delete SimpleName: String(1594)", "Delete SimpleType: String(1595)", "Delete SimpleName: ident(1596)", "Delete SingleVariableDeclaration(1597)", "Delete SimpleName: idents(1598)", "Delete StringLiteral: \"\"(1599)", "Delete SimpleName: equals(1600)", "Delete SimpleName: ident(1601)", "Delete MethodInvocation(1602)", "Delete ContinueStatement(1603)", "Delete Block(1604)", "Delete IfStatement(1605)", "Delete SimpleName: Expression(1606)", "Delete SimpleType: Expression(1607)", "Delete SimpleName: oneRewritten(1608)", "Delete SimpleName: Expression(1609)", "Delete SimpleType: Expression(1610)", "Delete SimpleName: QuasiBuilder(1611)", "Delete SimpleName: substV(1612)", "Delete StringLiteral: \"@ident + IMPORTS___.getIdClass___()\"(1613)", "Delete StringLiteral: \"ident\"(1614)", "Delete SimpleName: StringLiteral(1615)", "Delete SimpleName: valueOf(1616)", "Delete SimpleName: pos(1617)", "Delete SimpleName: result(1618)", "Delete NullLiteral(1619)", "Delete InfixExpression: !=(1620)", "Delete StringLiteral: \" \"(1621)", "Delete StringLiteral: \"\"(1622)", "Delete ConditionalExpression(1623)", "Delete ParenthesizedExpression(1624)", "Delete SimpleName: ident(1625)", "Delete StringLiteral: \"-\"(1626)", "Delete InfixExpression: +(1627)", "Delete MethodInvocation(1628)", "Delete MethodInvocation(1629)", "Delete CastExpression(1630)", "Delete VariableDeclarationFragment(1631)", "Delete VariableDeclarationStatement(1632)", "Delete SimpleName: result(1633)", "Delete NullLiteral(1634)", "Delete InfixExpression: !=(1635)", "Delete SimpleName: result(1636)", "Delete SimpleName: QuasiUtil(1637)", "Delete SimpleName: concat(1638)", "Delete SimpleName: result(1639)", "Delete SimpleName: oneRewritten(1640)", "Delete MethodInvocation(1641)", "Delete Assignment: =(1642)", "Delete ExpressionStatement(1643)", "Delete Block(1644)", "Delete SimpleName: result(1645)", "Delete SimpleName: oneRewritten(1646)", "Delete Assignment: =(1647)", "Delete ExpressionStatement(1648)", "Delete Block(1649)", "Delete IfStatement(1650)", "Delete Block(1651)", "Delete EnhancedForStatement(1652)", "Delete SimpleName: result(1653)", "Delete ReturnStatement(1654)", "Delete Block(1655)", "Delete IfStatement(1656)", "Delete Block(1657)", "Delete MethodDeclaration(1658)", "Delete TextElement: Convert \"this\" -> \"thisNode___\" in event handlers.  Event handlers are(1659)", "Delete TextElement: run in a context where this points to the current node.(1660)", "Delete TextElement: We need to emulate that but still allow the event handlers to be simple(1661)", "Delete TextElement: functions, so we pass in the tamed node as the first parameter.(1662)", "Delete TextElement: The event handler goes from:<br>(1663)", "Delete TextElement:  if (this.type === 'text') alert(this.value); (1664)", "Delete TagElement: @code(1665)", "Delete TextElement: to a function like:<pre>(1666)", "Delete TextElement: function (thisNode___, event) {(1667)", "Delete TextElement: if (thisNode___.type === 'text') {(1668)", "Delete TextElement: alert(thisNode___.value);(1669)", "Delete TextElement: }(1670)", "Delete TextElement: }</pre>(1671)", "Delete TextElement: <p>(1672)", "Delete TextElement: And the resulting function is called via a handler attribute like(1673)", "Delete TextElement:  onchange=\"plugin_dispatchEvent___(this, node, 1234, 'handlerName')\"(1674)", "Delete TagElement: @code(1675)", "Delete TagElement(1676)", "Delete Javadoc(1677)", "Delete Modifier: private(1678)", "Delete Modifier: static(1679)", "Delete PrimitiveType: void(1680)", "Delete SimpleName: rewriteEventHandlerReferences(1681)", "Delete SimpleName: Block(1682)", "Delete SimpleType: Block(1683)", "Delete SimpleName: block(1684)", "Delete SingleVariableDeclaration(1685)", "Delete SimpleName: block(1686)", "Delete SimpleName: acceptPreOrder(1687)", "Delete SimpleName: Visitor(1688)", "Delete SimpleType: Visitor(1689)", "Delete Modifier: public(1690)", "Delete PrimitiveType: boolean(1691)", "Delete SimpleName: visit(1692)", "Delete SimpleName: AncestorChain(1693)", "Delete SimpleType: AncestorChain(1694)", "Delete WildcardType: ?(1695)", "Delete ParameterizedType: AncestorChain<?>(1696)", "Delete SimpleName: ancestors(1697)", "Delete SingleVariableDeclaration(1698)", "Delete SimpleName: ParseTreeNode(1699)", "Delete SimpleType: ParseTreeNode(1700)", "Delete SimpleName: node(1701)", "Delete QualifiedName: ancestors.node(1702)", "Delete VariableDeclarationFragment(1703)", "Delete VariableDeclarationStatement(1704)", "Delete SimpleName: node(1705)", "Delete SimpleName: FunctionConstructor(1706)", "Delete SimpleType: FunctionConstructor(1707)", "Delete InstanceofExpression(1708)", "Delete BooleanLiteral: false(1709)", "Delete ReturnStatement(1710)", "Delete Block(1711)", "Delete IfStatement(1712)", "Delete SimpleName: node(1713)", "Delete SimpleName: Reference(1714)", "Delete SimpleType: Reference(1715)", "Delete InstanceofExpression(1716)", "Delete SimpleName: Reference(1717)", "Delete SimpleType: Reference(1718)", "Delete SimpleName: r(1719)", "Delete SimpleName: Reference(1720)", "Delete SimpleType: Reference(1721)", "Delete SimpleName: node(1722)", "Delete CastExpression(1723)", "Delete VariableDeclarationFragment(1724)", "Delete VariableDeclarationStatement(1725)", "Delete QualifiedName: Keyword.THIS(1726)", "Delete SimpleName: toString(1727)", "Delete MethodInvocation(1728)", "Delete SimpleName: equals(1729)", "Delete SimpleName: r(1730)", "Delete SimpleName: getIdentifierName(1731)", "Delete MethodInvocation(1732)", "Delete MethodInvocation(1733)", "Delete SimpleName: Identifier(1734)", "Delete SimpleType: Identifier(1735)", "Delete SimpleName: oldRef(1736)", "Delete SimpleName: r(1737)", "Delete SimpleName: getIdentifier(1738)", "Delete MethodInvocation(1739)", "Delete VariableDeclarationFragment(1740)", "Delete VariableDeclarationStatement(1741)", "Delete SimpleName: Identifier(1742)", "Delete SimpleType: Identifier(1743)", "Delete SimpleName: thisNode(1744)", "Delete SimpleName: Identifier(1745)", "Delete SimpleType: Identifier(1746)", "Delete SimpleName: oldRef(1747)", "Delete SimpleName: getFilePosition(1748)", "Delete MethodInvocation(1749)", "Delete QualifiedName: ReservedNames.THIS_NODE(1750)", "Delete ClassInstanceCreation(1751)", "Delete VariableDeclarationFragment(1752)", "Delete VariableDeclarationStatement(1753)", "Delete SimpleName: r(1754)", "Delete SimpleName: replaceChild(1755)", "Delete SimpleName: SyntheticNodes(1756)", "Delete SimpleName: s(1757)", "Delete SimpleName: thisNode(1758)", "Delete MethodInvocation(1759)", "Delete SimpleName: oldRef(1760)", "Delete MethodInvocation(1761)", "Delete ExpressionStatement(1762)", "Delete Block(1763)", "Delete IfStatement(1764)", "Delete BooleanLiteral: false(1765)", "Delete ReturnStatement(1766)", "Delete Block(1767)", "Delete IfStatement(1768)", "Delete BooleanLiteral: true(1769)", "Delete ReturnStatement(1770)", "Delete Block(1771)", "Delete MethodDeclaration(1772)", "Delete AnonymousClassDeclaration(1773)", "Delete ClassInstanceCreation(1774)", "Delete NullLiteral(1775)", "Delete MethodInvocation(1776)", "Delete ExpressionStatement(1777)", "Delete Block(1778)", "Delete MethodDeclaration(1779)", "Delete SimpleName: handlers(1831)", "Delete TextElement: Parses an (1922)", "Delete TextElement:  onclick(1923)", "Delete TagElement: @code(1924)", "Delete TextElement:  handler's or other handler's attribute value(1925)", "Delete TextElement: as a javascript statement.(1926)", "Delete TagElement(1927)", "Delete Javadoc(1928)", "Delete Modifier: private(1929)", "Delete SimpleName: Block(1930)", "Delete SimpleType: Block(1931)", "Delete SimpleName: parseJsFromAttrValue(1932)", "Delete SimpleName: Attr(1933)", "Delete SimpleType: Attr(1934)", "Delete SimpleName: attr(1935)", "Delete SingleVariableDeclaration(1936)", "Delete SimpleName: ParseException(1937)", "Delete SimpleType: ParseException(1938)", "Delete SimpleName: FilePosition(1939)", "Delete SimpleType: FilePosition(1940)", "Delete SimpleName: pos(1941)", "Delete SimpleName: Nodes(1942)", "Delete SimpleName: getFilePositionForValue(1943)", "Delete SimpleName: attr(1944)", "Delete MethodInvocation(1945)", "Delete VariableDeclarationFragment(1946)", "Delete VariableDeclarationStatement(1947)", "Delete SimpleName: CharProducer(1948)", "Delete SimpleType: CharProducer(1949)", "Delete SimpleName: cp(1950)", "Delete SimpleName: fromAttrValue(1951)", "Delete SimpleName: attr(1952)", "Delete MethodInvocation(1953)", "Delete VariableDeclarationFragment(1954)", "Delete VariableDeclarationStatement(1955)", "Delete SimpleName: JsTokenQueue(1956)", "Delete SimpleType: JsTokenQueue(1957)", "Delete SimpleName: tq(1958)", "Delete SimpleName: JsTokenQueue(1959)", "Delete SimpleType: JsTokenQueue(1960)", "Delete SimpleName: JsLexer(1961)", "Delete SimpleType: JsLexer(1962)", "Delete SimpleName: cp(1963)", "Delete BooleanLiteral: false(1964)", "Delete ClassInstanceCreation(1965)", "Delete SimpleName: pos(1966)", "Delete SimpleName: source(1967)", "Delete MethodInvocation(1968)", "Delete ClassInstanceCreation(1969)", "Delete VariableDeclarationFragment(1970)", "Delete VariableDeclarationStatement(1971)", "Delete SimpleName: tq(1972)", "Delete SimpleName: setInputRange(1973)", "Delete SimpleName: pos(1974)", "Delete MethodInvocation(1975)", "Delete ExpressionStatement(1976)", "Delete SimpleName: tq(1977)", "Delete SimpleName: isEmpty(1978)", "Delete MethodInvocation(1979)", "Delete SimpleName: Block(1980)", "Delete SimpleType: Block(1981)", "Delete SimpleName: pos(1982)", "Delete SimpleName: Collections(1983)", "Delete SimpleName: Statement(1984)", "Delete SimpleType: Statement(1985)", "Delete SimpleName: emptyList(1986)", "Delete MethodInvocation(1987)", "Delete ClassInstanceCreation(1988)", "Delete ReturnStatement(1989)", "Delete Block(1990)", "Delete IfStatement(1991)", "Delete SimpleName: Block(1992)", "Delete SimpleType: Block(1993)", "Delete SimpleName: b(1994)", "Delete SimpleName: Parser(1995)", "Delete SimpleType: Parser(1996)", "Delete SimpleName: tq(1997)", "Delete SimpleName: mq(1998)", "Delete ClassInstanceCreation(1999)", "Delete SimpleName: parse(2000)", "Delete MethodInvocation(2001)", "Delete VariableDeclarationFragment(2002)", "Delete VariableDeclarationStatement(2003)", "Delete SimpleName: b(2004)", "Delete SimpleName: setFilePosition(2005)", "Delete SimpleName: pos(2006)", "Delete MethodInvocation(2007)", "Delete ExpressionStatement(2008)", "Delete SimpleName: b(2009)", "Delete ReturnStatement(2010)", "Delete Block(2011)", "Delete MethodDeclaration(2012)", "Delete TextElement: Parses a style attribute's value as a CSS declaration group.(2013)", "Delete TagElement(2014)", "Delete Javadoc(2015)", "Delete Modifier: private(2016)", "Delete QualifiedName: CssTree.DeclarationGroup(2017)", "Delete SimpleType: CssTree.DeclarationGroup(2018)", "Delete SimpleName: parseStyleAttrib(2019)", "Delete SimpleName: Attr(2020)", "Delete SimpleType: Attr(2021)", "Delete SimpleName: a(2022)", "Delete SingleVariableDeclaration(2023)", "Delete SimpleName: ParseException(2024)", "Delete SimpleType: ParseException(2025)", "Delete SimpleName: CharProducer(2026)", "Delete SimpleType: CharProducer(2027)", "Delete SimpleName: cp(2028)", "Delete SimpleName: fromAttrValue(2029)", "Delete SimpleName: a(2030)", "Delete MethodInvocation(2031)", "Delete VariableDeclarationFragment(2032)", "Delete VariableDeclarationStatement(2033)", "Delete SimpleName: TokenQueue(2034)", "Delete SimpleType: TokenQueue(2035)", "Delete SimpleName: CssTokenType(2036)", "Delete SimpleType: CssTokenType(2037)", "Delete ParameterizedType: TokenQueue<CssTokenType>(2038)", "Delete SimpleName: tq(2039)", "Delete SimpleName: CssParser(2040)", "Delete SimpleName: makeTokenQueue(2041)", "Delete SimpleName: cp(2042)", "Delete SimpleName: mq(2043)", "Delete BooleanLiteral: false(2044)", "Delete MethodInvocation(2045)", "Delete VariableDeclarationFragment(2046)", "Delete VariableDeclarationStatement(2047)", "Delete SimpleName: tq(2048)", "Delete SimpleName: isEmpty(2049)", "Delete MethodInvocation(2050)", "Delete NullLiteral(2051)", "Delete ReturnStatement(2052)", "Delete Block(2053)", "Delete IfStatement(2054)", "Delete SimpleName: tq(2055)", "Delete SimpleName: setInputRange(2056)", "Delete SimpleName: Nodes(2057)", "Delete SimpleName: getFilePositionForValue(2058)", "Delete SimpleName: a(2059)", "Delete MethodInvocation(2060)", "Delete MethodInvocation(2061)", "Delete ExpressionStatement(2062)", "Delete SimpleName: CssParser(2063)", "Delete SimpleType: CssParser(2064)", "Delete SimpleName: p(2065)", "Delete SimpleName: CssParser(2066)", "Delete SimpleType: CssParser(2067)", "Delete SimpleName: tq(2068)", "Delete SimpleName: mq(2069)", "Delete QualifiedName: MessageLevel.WARNING(2070)", "Delete ClassInstanceCreation(2071)", "Delete VariableDeclarationFragment(2072)", "Delete VariableDeclarationStatement(2073)", "Delete QualifiedName: CssTree.DeclarationGroup(2074)", "Delete SimpleType: CssTree.DeclarationGroup(2075)", "Delete SimpleName: decls(2076)", "Delete SimpleName: p(2077)", "Delete SimpleName: parseDeclarationGroup(2078)", "Delete MethodInvocation(2079)", "Delete VariableDeclarationFragment(2080)", "Delete VariableDeclarationStatement(2081)", "Delete SimpleName: tq(2082)", "Delete SimpleName: expectEmpty(2083)", "Delete MethodInvocation(2084)", "Delete ExpressionStatement(2085)", "Delete SimpleName: decls(2086)", "Delete ReturnStatement(2087)", "Delete Block(2088)", "Delete MethodDeclaration(2089)", "Delete Modifier: private(2090)", "Delete Modifier: static(2091)", "Delete SimpleName: CharProducer(2092)", "Delete SimpleType: CharProducer(2093)", "Delete SimpleName: fromAttrValue(2094)", "Delete SimpleName: Attr(2095)", "Delete SimpleType: Attr(2096)", "Delete SimpleName: a(2097)", "Delete SingleVariableDeclaration(2098)", "Delete SimpleName: String(2099)", "Delete SimpleType: String(2100)", "Delete SimpleName: value(2101)", "Delete SimpleName: a(2102)", "Delete SimpleName: getNodeValue(2103)", "Delete MethodInvocation(2104)", "Delete VariableDeclarationFragment(2105)", "Delete VariableDeclarationStatement(2106)", "Delete SimpleName: FilePosition(2107)", "Delete SimpleType: FilePosition(2108)", "Delete SimpleName: pos(2109)", "Delete SimpleName: Nodes(2110)", "Delete SimpleName: getFilePositionForValue(2111)", "Delete SimpleName: a(2112)", "Delete MethodInvocation(2113)", "Delete VariableDeclarationFragment(2114)", "Delete VariableDeclarationStatement(2115)", "Delete SimpleName: String(2116)", "Delete SimpleType: String(2117)", "Delete SimpleName: rawValue(2118)", "Delete SimpleName: Nodes(2119)", "Delete SimpleName: getRawValue(2120)", "Delete SimpleName: a(2121)", "Delete MethodInvocation(2122)", "Delete VariableDeclarationFragment(2123)", "Delete VariableDeclarationStatement(2124)", "Delete SimpleName: rawValue(2125)", "Delete NullLiteral(2126)", "Delete InfixExpression: !=(2127)", "Delete SimpleName: CharProducer(2128)", "Delete SimpleType: CharProducer(2129)", "Delete SimpleName: cp(2130)", "Delete QualifiedName: CharProducer.Factory(2131)", "Delete SimpleName: fromHtmlAttribute(2132)", "Delete QualifiedName: CharProducer.Factory(2133)", "Delete SimpleName: create(2134)", "Delete SimpleName: StringReader(2135)", "Delete SimpleType: StringReader(2136)", "Delete SimpleName: deQuote(2137)", "Delete SimpleName: rawValue(2138)", "Delete MethodInvocation(2139)", "Delete ClassInstanceCreation(2140)", "Delete SimpleName: pos(2141)", "Delete MethodInvocation(2142)", "Delete MethodInvocation(2143)", "Delete VariableDeclarationFragment(2144)", "Delete VariableDeclarationStatement(2145)", "Delete SimpleName: String(2146)", "Delete SimpleName: valueOf(2147)", "Delete SimpleName: cp(2148)", "Delete SimpleName: getBuffer(2149)", "Delete MethodInvocation(2150)", "Delete SimpleName: cp(2151)", "Delete SimpleName: getOffset(2152)", "Delete MethodInvocation(2153)", "Delete SimpleName: cp(2154)", "Delete SimpleName: getLength(2155)", "Delete MethodInvocation(2156)", "Delete MethodInvocation(2157)", "Delete SimpleName: equals(2158)", "Delete SimpleName: value(2159)", "Delete MethodInvocation(2160)", "Delete SimpleName: cp(2161)", "Delete ReturnStatement(2162)", "Delete Block(2163)", "Delete IfStatement(2164)", "Delete Block(2165)", "Delete IfStatement(2166)", "Delete QualifiedName: CharProducer.Factory(2167)", "Delete SimpleName: create(2168)", "Delete SimpleName: StringReader(2169)", "Delete SimpleType: StringReader(2170)", "Delete SimpleName: value(2171)", "Delete ClassInstanceCreation(2172)", "Delete SimpleName: pos(2173)", "Delete MethodInvocation(2174)", "Delete ReturnStatement(2175)", "Delete Block(2176)", "Delete MethodDeclaration(2177)", "Delete TextElement: Strip quotes from an attribute value if there are any. (2178)", "Delete TagElement(2179)", "Delete Javadoc(2180)", "Delete Modifier: private(2181)", "Delete Modifier: static(2182)", "Delete SimpleName: String(2183)", "Delete SimpleType: String(2184)", "Delete SimpleName: deQuote(2185)", "Delete SimpleName: String(2186)", "Delete SimpleType: String(2187)", "Delete SimpleName: s(2188)", "Delete SingleVariableDeclaration(2189)", "Delete PrimitiveType: int(2190)", "Delete SimpleName: len(2191)", "Delete SimpleName: s(2192)", "Delete SimpleName: length(2193)", "Delete MethodInvocation(2194)", "Delete VariableDeclarationFragment(2195)", "Delete VariableDeclarationStatement(2196)", "Delete SimpleName: len(2197)", "Delete NumberLiteral: 2(2198)", "Delete InfixExpression: <(2199)", "Delete SimpleName: s(2200)", "Delete ReturnStatement(2201)", "Delete Block(2202)", "Delete IfStatement(2203)", "Delete PrimitiveType: char(2204)", "Delete SimpleName: ch0(2205)", "Delete SimpleName: s(2206)", "Delete SimpleName: charAt(2207)", "Delete NumberLiteral: 0(2208)", "Delete MethodInvocation(2209)", "Delete VariableDeclarationFragment(2210)", "Delete VariableDeclarationStatement(2211)", "Delete CharacterLiteral: '\"'(2212)", "Delete SimpleName: ch0(2213)", "Delete InfixExpression: ==(2214)", "Delete CharacterLiteral: '\\''(2215)", "Delete SimpleName: ch0(2216)", "Delete InfixExpression: ==(2217)", "Delete InfixExpression: ||(2218)", "Delete ParenthesizedExpression(2219)", "Delete SimpleName: ch0(2220)", "Delete SimpleName: s(2221)", "Delete SimpleName: charAt(2222)", "Delete SimpleName: len(2223)", "Delete NumberLiteral: 1(2224)", "Delete InfixExpression: -(2225)", "Delete MethodInvocation(2226)", "Delete InfixExpression: ==(2227)", "Delete InfixExpression: &&(2228)", "Delete ParenthesizedExpression(2229)", "Delete StringLiteral: \" \"(2230)", "Delete SimpleName: s(2231)", "Delete SimpleName: substring(2232)", "Delete NumberLiteral: 1(2233)", "Delete SimpleName: len(2234)", "Delete NumberLiteral: 1(2235)", "Delete InfixExpression: -(2236)", "Delete MethodInvocation(2237)", "Delete StringLiteral: \" \"(2238)", "Delete InfixExpression: +(2239)", "Delete SimpleName: s(2240)", "Delete ConditionalExpression(2241)", "Delete ReturnStatement(2242)", "Delete Block(2243)", "Delete MethodDeclaration(2244)"]}}], "commit_stats": [{"total_files": 13, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}