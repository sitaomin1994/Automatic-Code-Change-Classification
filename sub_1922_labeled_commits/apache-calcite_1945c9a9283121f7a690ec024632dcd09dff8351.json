{"application": "apache-calcite", "csha": "1945c9a9283121f7a690ec024632dcd09dff8351", "files": [{"HepMatchOrder_cluster": {"actions": [{"root": "INS EnumConstantDeclaration to EnumDeclaration at 6", "operations": ["INS TextElement: <p>It avoids applying a rule to the previous to TagElement at 1", "INS SimpleName: ARBITRARY to MemberRef at 0", "INS TagElement: @link to TagElement at 5", "INS TagElement: @link to TagElement at 2", "INS EnumConstantDeclaration to EnumDeclaration at 6", "INS Javadoc to EnumConstantDeclaration at 0", "INS SimpleName: DEPTH_FIRST to EnumConstantDeclaration at 1", "INS MemberRef to TagElement: @link at 0", "INS QualifiedName: org.apache.calcite.rel.core.Union to TagElement: @link at 0", "INS TagElement to Javadoc at 0", "INS QualifiedName: org.apache.calcite.rel.RelNode to TagElement: @link at 0", "INS TextElement: Match in depth-first order. to TagElement at 0", "INS TextElement:  in cases such as to TagElement at 6", "INS TextElement:  with large fan-out. to TagElement at 8", "INS TextElement:  repeatedly after new vertex is to TagElement at 3", "INS TagElement: @link to TagElement at 7", "INS TextElement: generated in one rule application. It can therefore be more efficient than to TagElement at 4"]}, {"root": "UPDATE from Match in arbitrary order. This is the default because it is the most to Match in arbitrary order. This is the default because it is", "operations": ["UPD TextElement: Match in arbitrary order. This is the default because it is the most from Match in arbitrary order. This is the default because it is the most to Match in arbitrary order. This is the default because it is"]}]}}, {"HepMatchOrder_diff": {"operations": ["Insert EnumConstantDeclaration(42) into EnumDeclaration(43) at 6", "Insert Javadoc(40) into EnumConstantDeclaration(42) at 0", "Insert SimpleName: DEPTH_FIRST(41) into EnumConstantDeclaration(42) at 1", "Insert TagElement(39) into Javadoc(40) at 0", "Insert TextElement: <p>It avoids applying a rule to the previous(27) into TagElement(39) at 1", "Insert TagElement: @link(29) into TagElement(39) at 2", "Insert TextElement:  repeatedly after new vertex is(30) into TagElement(39) at 3", "Insert TextElement: generated in one rule application. It can therefore be more efficient than(31) into TagElement(39) at 4", "Insert TagElement: @link(34) into TagElement(39) at 5", "Insert TextElement:  in cases such as(35) into TagElement(39) at 6", "Insert TagElement: @link(37) into TagElement(39) at 7", "Insert TextElement:  with large fan-out.(38) into TagElement(39) at 8", "Insert QualifiedName: org.apache.calcite.rel.RelNode(28) into TagElement: @link(29) at 0", "Insert MemberRef(33) into TagElement: @link(34) at 0", "Insert QualifiedName: org.apache.calcite.rel.core.Union(36) into TagElement: @link(37) at 0", "Insert SimpleName: ARBITRARY(32) into MemberRef(33) at 0"]}}, {"HepPlanner_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 39", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS BreakStatement to Block at 4", "INS PrimitiveType: int to MethodDeclaration at 1", "INS SimpleName: rules to EnhancedForStatement at 1", "INS SimpleName: depthFirstApply to MethodDeclaration at 2", "INS InfixExpression: >= to IfStatement at 0", "INS SimpleName: HepRelVertex to SimpleType: HepRelVertex at 0", "INS SimpleName: applyRule to MethodInvocation at 0", "INS SimpleName: RelOptRule to SimpleType: RelOptRule at 0", "INS SimpleName: next to MethodInvocation at 1", "INS SimpleName: depthIter to VariableDeclarationFragment at 0", "INS MethodDeclaration to TypeDeclaration: class at 39", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS EnhancedForStatement to Block at 1", "INS SimpleName: nMatches to Assignment: = at 0", "INS SimpleName: HepRelVertex to SimpleType: HepRelVertex at 0", "INS SimpleName: Iterator to SimpleType: Iterator at 0", "INS IfStatement to Block at 1", "INS ParameterizedType: Iterator<HepRelVertex> to SingleVariableDeclaration at 0", "INS MethodInvocation to Assignment: = at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: Iterator to ParameterizedType: Iterator<HepRelVertex> at 0", "INS Block to MethodDeclaration at 7", "INS ParameterizedType: Collection<RelOptRule> to SingleVariableDeclaration at 0", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: RelOptRule to SimpleType: RelOptRule at 0", "INS SimpleName: depthIter to MethodInvocation at 1", "INS SimpleType: HepRelVertex to VariableDeclarationStatement at 0", "INS Block to EnhancedForStatement at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: rules to SingleVariableDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: rule to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Block to IfStatement at 1", "INS SimpleType: HepRelVertex to ParameterizedType: Iterator<HepRelVertex> at 1", "INS SimpleType: RelOptRule to ParameterizedType: Collection<RelOptRule> at 1", "INS SimpleName: rule to SingleVariableDeclaration at 1", "INS SimpleName: vertex to MethodInvocation at 2", "INS SimpleName: Iterator to SimpleType: Iterator at 0", "INS InfixExpression: != to IfStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleType: Collection to ParameterizedType: Collection<RelOptRule> at 0", "INS WhileStatement to Block at 0", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleName: iter to MethodInvocation at 0", "INS SimpleName: nMatches to ReturnStatement at 0", "INS SimpleName: vertex to VariableDeclarationFragment at 0", "INS MethodInvocation to WhileStatement at 0", "INS ParameterizedType: Iterator<HepRelVertex> to VariableDeclarationStatement at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: iter to SingleVariableDeclaration at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: nMatches to InfixExpression: >= at 0", "INS SimpleName: newVertex to InfixExpression: != at 0", "INS Block to WhileStatement at 1", "INS SimpleName: HepRelVertex to SimpleType: HepRelVertex at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: HepRelVertex to SimpleType: HepRelVertex at 0", "INS SimpleName: rules to MethodInvocation at 2", "INS SimpleName: nMatches to SingleVariableDeclaration at 1", "INS SimpleName: nMatches to PrefixExpression: ++ at 0", "INS Modifier: private to MethodDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: forceConversions to MethodInvocation at 3", "INS ReturnStatement to Block at 0", "INS QualifiedName: currentProgram.matchLimit to InfixExpression: >= at 1", "INS VariableDeclarationStatement to Block at 2", "INS Block to IfStatement at 1", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS SimpleType: HepRelVertex to VariableDeclarationStatement at 0", "INS IfStatement to Block at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: newVertex to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: forceConversions to MethodInvocation at 3", "INS SimpleType: Iterator to ParameterizedType: Iterator<HepRelVertex> at 0", "INS SimpleName: getGraphIterator to MethodInvocation at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: hasNext to MethodInvocation at 1", "INS SimpleName: nMatches to MethodInvocation at 4", "INS SimpleName: depthFirstApply to MethodInvocation at 0", "INS SimpleName: nMatches to ReturnStatement at 0", "INS SimpleName: newVertex to MethodInvocation at 1", "INS SimpleName: iter to MethodInvocation at 0", "INS SimpleType: RelOptRule to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: forceConversions to SingleVariableDeclaration at 1", "INS SimpleType: HepRelVertex to ParameterizedType: Iterator<HepRelVertex> at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 42", "operations": ["INS TextElement: Returns whether the vertex is valid.  to TagElement at 0", "INS SimpleName: getDigest to MethodInvocation at 1", "INS SimpleName: digest to MethodInvocation at 2", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 42", "INS SimpleName: String to SimpleType: String at 0", "INS Modifier: private to MethodDeclaration at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: belongsToDag to MethodDeclaration at 3", "INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: != at 0", "INS SimpleName: getCurrentRel to MethodInvocation at 1", "INS SimpleName: vertex to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: vertex to SingleVariableDeclaration at 1", "INS TagElement to Javadoc at 0", "INS SimpleType: HepRelVertex to SingleVariableDeclaration at 0", "INS SimpleName: HepRelVertex to SimpleType: HepRelVertex at 0", "INS NullLiteral to InfixExpression: != at 1", "INS ReturnStatement to Block at 1", "INS SimpleName: digest to VariableDeclarationFragment at 0", "INS SimpleName: mapDigestToVertex to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: != to ReturnStatement at 0"]}, {"root": "INS SwitchStatement to Block at 1", "operations": ["INS ReturnStatement to SwitchStatement at 6", "INS AssertStatement to SwitchStatement at 9", "INS SimpleName: TOP_DOWN to SwitchCase at 0", "INS QualifiedName: currentProgram.matchOrder to SwitchStatement at 0", "INS SwitchCase to SwitchStatement at 7", "INS SwitchCase to SwitchStatement at 1", "INS SimpleName: BOTTOM_UP to SwitchCase at 0", "INS SimpleName: ARBITRARY to SwitchCase at 0", "INS SwitchStatement to Block at 1", "INS SwitchCase to SwitchStatement at 8", "INS SwitchCase to SwitchStatement at 4", "INS SwitchCase to SwitchStatement at 2", "INS SimpleName: DEPTH_FIRST to SwitchCase at 0"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: belongsToDag to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: vertex to MethodInvocation at 1", "INS NullLiteral to ReturnStatement at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS Block to IfStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ReturnStatement to SwitchStatement at 3"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ReturnStatement to SwitchStatement at 13", "MOV EnhancedForStatement to SwitchStatement at 11", "MOV VariableDeclarationStatement to SwitchStatement at 10", "MOV AssertStatement to SwitchStatement at 5", "MOV ExpressionStatement to SwitchStatement at 12"]}, {"root": "INS InfixExpression: && to VariableDeclarationFragment at 1", "operations": ["INS InfixExpression: != to InfixExpression: && at 1", "INS QualifiedName: currentProgram.matchOrder to InfixExpression: != at 0", "INS QualifiedName: HepMatchOrder.DEPTH_FIRST to InfixExpression: != at 1", "INS InfixExpression: && to VariableDeclarationFragment at 1"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from AssertStatement", "operations": ["MOV InfixExpression: == to AssertStatement at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV MethodInvocation to EnhancedForStatement at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: != to InfixExpression: && at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: graph to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: of to MethodInvocation at 1"]}, {"root": "INS SimpleName: start to InfixExpression: == at 0", "operations": ["INS SimpleName: start to InfixExpression: == at 0"]}, {"root": "INS SimpleName: root to InfixExpression: == at 1", "operations": ["INS SimpleName: root to InfixExpression: == at 1"]}, {"root": "UPDATE from iter to TopologicalOrderIterator", "operations": ["UPD SimpleName: iter from iter to TopologicalOrderIterator"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: iter to MethodInvocation at 0"]}, {"root": "INS Block to IfStatement at 2", "operations": ["INS ExpressionStatement to Block at 0", "INS QualifiedName: currentProgram.matchOrder to InfixExpression: == at 0", "INS IfStatement to Block at 1", "INS MethodInvocation to Assignment: = at 1", "INS QualifiedName: HepMatchOrder.DEPTH_FIRST to InfixExpression: == at 1", "INS IfStatement to Block at 1", "INS SimpleName: rules to MethodInvocation at 2", "INS SimpleName: nMatches to MethodInvocation at 4", "INS Block to IfStatement at 1", "INS SimpleName: iter to MethodInvocation at 1", "INS Block to IfStatement at 2", "INS SimpleName: nMatches to InfixExpression: >= at 0", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: >= to IfStatement at 0", "INS QualifiedName: currentProgram.matchLimit to InfixExpression: >= at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: nMatches to Assignment: = at 0", "INS SimpleName: forceConversions to MethodInvocation at 3", "INS SimpleName: depthFirstApply to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0"]}, {"root": "DEL QualifiedName: currentProgram.matchOrder", "operations": ["DEL QualifiedName: currentProgram.matchOrder"]}, {"root": "DEL QualifiedName: HepMatchOrder.BOTTOM_UP", "operations": ["DEL QualifiedName: HepMatchOrder.BOTTOM_UP"]}, {"root": "DEL SimpleName: iter", "operations": ["DEL SimpleName: iter"]}, {"root": "DEL IfStatement", "operations": ["DEL InfixExpression: ==", "DEL IfStatement", "DEL QualifiedName: currentProgram.matchOrder", "DEL Block", "DEL QualifiedName: HepMatchOrder.ARBITRARY"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: iter", "DEL VariableDeclarationStatement", "DEL SimpleType: Iterable", "DEL SimpleName: HepRelVertex", "DEL ParameterizedType: Iterable<HepRelVertex>", "DEL SimpleType: HepRelVertex", "DEL VariableDeclarationFragment", "DEL SimpleName: Iterable"]}, {"root": "DEL IfStatement", "operations": ["DEL QualifiedName: currentProgram.matchOrder", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL IfStatement", "DEL Block", "DEL QualifiedName: HepMatchOrder.TOP_DOWN"]}, {"root": "DEL AssertStatement", "operations": ["DEL AssertStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: get", "DEL IfStatement", "DEL Block", "DEL SimpleName: newDigest", "DEL NullLiteral", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: mapDigestToVertex", "DEL Block"]}]}}, {"HepPlanner_diff": {"operations": ["Insert MethodDeclaration(1030) into TypeDeclaration: class(3055) at 39", "Insert MethodDeclaration(1304) into TypeDeclaration: class(3055) at 42", "Insert Modifier: private(938) into MethodDeclaration(1030) at 0", "Insert PrimitiveType: int(939) into MethodDeclaration(1030) at 1", "Insert SimpleName: depthFirstApply(940) into MethodDeclaration(1030) at 2", "Insert SingleVariableDeclaration(947) into MethodDeclaration(1030) at 3", "Insert SingleVariableDeclaration(954) into MethodDeclaration(1030) at 4", "Insert SingleVariableDeclaration(957) into MethodDeclaration(1030) at 5", "Insert SingleVariableDeclaration(960) into MethodDeclaration(1030) at 6", "Insert Block(1029) into MethodDeclaration(1030) at 7", "Insert Javadoc(1278) into MethodDeclaration(1304) at 0", "Insert Modifier: private(1279) into MethodDeclaration(1304) at 1", "Insert PrimitiveType: boolean(1280) into MethodDeclaration(1304) at 2", "Insert SimpleName: belongsToDag(1281) into MethodDeclaration(1304) at 3", "Insert SingleVariableDeclaration(1285) into MethodDeclaration(1304) at 4", "Insert Block(1303) into MethodDeclaration(1304) at 5", "Insert ParameterizedType: Iterator<HepRelVertex>(945) into SingleVariableDeclaration(947) at 0", "Insert SimpleName: iter(946) into SingleVariableDeclaration(947) at 1", "Insert ParameterizedType: Collection<RelOptRule>(952) into SingleVariableDeclaration(954) at 0", "Insert SimpleName: rules(953) into SingleVariableDeclaration(954) at 1", "Insert PrimitiveType: boolean(955) into SingleVariableDeclaration(957) at 0", "Insert SimpleName: forceConversions(956) into SingleVariableDeclaration(957) at 1", "Insert PrimitiveType: int(958) into SingleVariableDeclaration(960) at 0", "Insert WhileStatement(1026) into Block(1029) at 0", "Insert ReturnStatement(1028) into Block(1029) at 1", "Insert SwitchStatement(1273) into Block(1274) at 1", "Insert TagElement(1277) into Javadoc(1278) at 0", "Insert SimpleType: HepRelVertex(1283) into SingleVariableDeclaration(1285) at 0", "Insert SimpleName: vertex(1284) into SingleVariableDeclaration(1285) at 1", "Insert VariableDeclarationStatement(1295) into Block(1303) at 0", "Insert ReturnStatement(1302) into Block(1303) at 1", "Insert IfStatement(1327) into Block(1533) at 0", "Move ExpressionStatement(2454) into Block(2616) at 4", "Insert SimpleType: Iterator(942) into ParameterizedType: Iterator<HepRelVertex>(945) at 0", "Insert SimpleType: HepRelVertex(944) into ParameterizedType: Iterator<HepRelVertex>(945) at 1", "Insert SimpleType: Collection(949) into ParameterizedType: Collection<RelOptRule>(952) at 0", "Insert SimpleType: RelOptRule(951) into ParameterizedType: Collection<RelOptRule>(952) at 1", "Insert MethodInvocation(963) into WhileStatement(1026) at 0", "Insert Block(1025) into WhileStatement(1026) at 1", "Insert QualifiedName: currentProgram.matchOrder(1203) into SwitchStatement(1273) at 0", "Insert SwitchCase(1205) into SwitchStatement(1273) at 1", "Insert SwitchCase(1207) into SwitchStatement(1273) at 2", "Move ReturnStatement(1096) into SwitchStatement(1273) at 3", "Insert SwitchCase(1217) into SwitchStatement(1273) at 4", "Move AssertStatement(1102) into SwitchStatement(1273) at 5", "Insert ReturnStatement(1228) into SwitchStatement(1273) at 6", "Insert SwitchCase(1230) into SwitchStatement(1273) at 7", "Insert SwitchCase(1231) into SwitchStatement(1273) at 8", "Insert AssertStatement(1235) into SwitchStatement(1273) at 9", "Move VariableDeclarationStatement(1140) into SwitchStatement(1273) at 10", "Move EnhancedForStatement(1152) into SwitchStatement(1273) at 11", "Move ExpressionStatement(1157) into SwitchStatement(1273) at 12", "Move ReturnStatement(1161) into SwitchStatement(1273) at 13", "Insert TextElement: Returns whether the vertex is valid. (1276) into TagElement(1277) at 0", "Insert SimpleName: HepRelVertex(1282) into SimpleType: HepRelVertex(1283) at 0", "Insert SimpleType: String(1287) into VariableDeclarationStatement(1295) at 0", "Insert VariableDeclarationFragment(1294) into VariableDeclarationStatement(1295) at 1", "Insert InfixExpression: !=(1301) into ReturnStatement(1302) at 0", "Insert PrefixExpression: !(1323) into IfStatement(1327) at 0", "Insert Block(1326) into IfStatement(1327) at 1", "Insert SimpleName: Iterator(941) into SimpleType: Iterator(942) at 0", "Insert SimpleName: HepRelVertex(943) into SimpleType: HepRelVertex(944) at 0", "Insert SimpleName: Collection(948) into SimpleType: Collection(949) at 0", "Insert SimpleName: RelOptRule(950) into SimpleType: RelOptRule(951) at 0", "Insert SimpleName: iter(961) into MethodInvocation(963) at 0", "Insert SimpleName: hasNext(962) into MethodInvocation(963) at 1", "Insert VariableDeclarationStatement(971) into Block(1025) at 0", "Insert EnhancedForStatement(1024) into Block(1025) at 1", "Insert InfixExpression: &&(1071) into VariableDeclarationFragment(1072) at 1", "Insert SimpleName: ARBITRARY(1204) into SwitchCase(1205) at 0", "Insert SimpleName: DEPTH_FIRST(1206) into SwitchCase(1207) at 0", "Insert SimpleName: TOP_DOWN(1216) into SwitchCase(1217) at 0", "Move MethodInvocation(1120) into ReturnStatement(1228) at 0", "Insert SimpleName: BOTTOM_UP(1229) into SwitchCase(1230) at 0", "Move InfixExpression: ==(1126) into AssertStatement(1235) at 0", "Move MethodInvocation(1112) into EnhancedForStatement(1263) at 1", "Insert SimpleName: String(1286) into SimpleType: String(1287) at 0", "Insert SimpleName: digest(1288) into VariableDeclarationFragment(1294) at 0", "Insert MethodInvocation(1293) into VariableDeclarationFragment(1294) at 1", "Insert MethodInvocation(1299) into InfixExpression: !=(1301) at 0", "Insert NullLiteral(1300) into InfixExpression: !=(1301) at 1", "Insert MethodInvocation(1322) into PrefixExpression: !(1323) at 0", "Insert ReturnStatement(1325) into Block(1326) at 0", "Insert SimpleType: HepRelVertex(965) into VariableDeclarationStatement(971) at 0", "Insert VariableDeclarationFragment(970) into VariableDeclarationStatement(971) at 1", "Insert SingleVariableDeclaration(975) into EnhancedForStatement(1024) at 0", "Insert SimpleName: rules(976) into EnhancedForStatement(1024) at 1", "Insert Block(1023) into EnhancedForStatement(1024) at 2", "Move InfixExpression: !=(974) into InfixExpression: &&(1071) at 0", "Insert InfixExpression: !=(1070) into InfixExpression: &&(1071) at 1", "Insert MethodInvocation(1225) into MethodInvocation(1227) at 0", "Insert SimpleName: start(1232) into InfixExpression: ==(1234) at 0", "Insert SimpleName: root(1233) into InfixExpression: ==(1234) at 1", "Insert MethodInvocation(1291) into MethodInvocation(1293) at 0", "Insert SimpleName: getDigest(1292) into MethodInvocation(1293) at 1", "Insert SimpleName: mapDigestToVertex(1296) into MethodInvocation(1299) at 0", "Insert SimpleName: get(1297) into MethodInvocation(1299) at 1", "Insert SimpleName: digest(1298) into MethodInvocation(1299) at 2", "Insert SimpleName: belongsToDag(1320) into MethodInvocation(1322) at 0", "Insert SimpleName: vertex(1321) into MethodInvocation(1322) at 1", "Insert NullLiteral(1324) into ReturnStatement(1325) at 0", "Insert SimpleName: HepRelVertex(964) into SimpleType: HepRelVertex(965) at 0", "Insert SimpleName: vertex(966) into VariableDeclarationFragment(970) at 0", "Insert MethodInvocation(969) into VariableDeclarationFragment(970) at 1", "Insert SimpleType: RelOptRule(973) into SingleVariableDeclaration(975) at 0", "Insert SimpleName: rule(974) into SingleVariableDeclaration(975) at 1", "Insert VariableDeclarationStatement(986) into Block(1023) at 0", "Insert IfStatement(1022) into Block(1023) at 1", "Insert QualifiedName: currentProgram.matchOrder(1068) into InfixExpression: !=(1070) at 0", "Update SimpleName: iter(1118) to TopologicalOrderIterator", "Move SimpleName: iter(1118) into MethodInvocation(1225) at 0", "Insert SimpleName: of(1223) into MethodInvocation(1225) at 1", "Insert SimpleName: graph(1224) into MethodInvocation(1225) at 2", "Insert SimpleName: vertex(1289) into MethodInvocation(1291) at 0", "Insert SimpleName: getCurrentRel(1290) into MethodInvocation(1291) at 1", "Insert SimpleName: iter(967) into MethodInvocation(969) at 0", "Insert SimpleName: next(968) into MethodInvocation(969) at 1", "Insert SimpleName: RelOptRule(972) into SimpleType: RelOptRule(973) at 0", "Insert SimpleType: HepRelVertex(978) into VariableDeclarationStatement(986) at 0", "Insert VariableDeclarationFragment(985) into VariableDeclarationStatement(986) at 1", "Insert InfixExpression: !=(989) into IfStatement(1022) at 0", "Insert Block(1021) into IfStatement(1022) at 1", "Insert SimpleName: HepRelVertex(977) into SimpleType: HepRelVertex(978) at 0", "Insert SimpleName: newVertex(979) into VariableDeclarationFragment(985) at 0", "Insert MethodInvocation(984) into VariableDeclarationFragment(985) at 1", "Insert SimpleName: newVertex(987) into InfixExpression: !=(989) at 0", "Insert NullLiteral(988) into InfixExpression: !=(989) at 1", "Insert ExpressionStatement(992) into Block(1021) at 0", "Insert IfStatement(999) into Block(1021) at 1", "Insert VariableDeclarationStatement(1010) into Block(1021) at 2", "Insert ExpressionStatement(1019) into Block(1021) at 3", "Insert BreakStatement(1020) into Block(1021) at 4", "Insert SimpleName: applyRule(980) into MethodInvocation(984) at 0", "Insert SimpleName: rule(981) into MethodInvocation(984) at 1", "Insert SimpleName: vertex(982) into MethodInvocation(984) at 2", "Insert SimpleName: forceConversions(983) into MethodInvocation(984) at 3", "Insert PrefixExpression: ++(991) into ExpressionStatement(992) at 0", "Insert InfixExpression: >=(995) into IfStatement(999) at 0", "Insert Block(998) into IfStatement(999) at 1", "Insert ParameterizedType: Iterator<HepRelVertex>(1004) into VariableDeclarationStatement(1010) at 0", "Insert VariableDeclarationFragment(1009) into VariableDeclarationStatement(1010) at 1", "Insert Assignment: =(1018) into ExpressionStatement(1019) at 0", "Insert QualifiedName: currentProgram.matchLimit(994) into InfixExpression: >=(995) at 1", "Insert ReturnStatement(997) into Block(998) at 0", "Insert SimpleType: Iterator(1001) into ParameterizedType: Iterator<HepRelVertex>(1004) at 0", "Insert SimpleType: HepRelVertex(1003) into ParameterizedType: Iterator<HepRelVertex>(1004) at 1", "Insert SimpleName: depthIter(1005) into VariableDeclarationFragment(1009) at 0", "Insert MethodInvocation(1008) into VariableDeclarationFragment(1009) at 1", "Insert MethodInvocation(1017) into Assignment: =(1018) at 1", "Insert SimpleName: Iterator(1000) into SimpleType: Iterator(1001) at 0", "Insert SimpleName: HepRelVertex(1002) into SimpleType: HepRelVertex(1003) at 0", "Insert SimpleName: getGraphIterator(1006) into MethodInvocation(1008) at 0", "Insert SimpleName: newVertex(1007) into MethodInvocation(1008) at 1", "Insert SimpleName: depthFirstApply(1012) into MethodInvocation(1017) at 0", "Insert SimpleName: depthIter(1013) into MethodInvocation(1017) at 1", "Insert SimpleName: rules(1014) into MethodInvocation(1017) at 2", "Insert SimpleName: forceConversions(1015) into MethodInvocation(1017) at 3", "Insert Block(1174) into IfStatement(1175) at 2", "Move ExpressionStatement(1052) into Block(1174) at 0", "Insert IfStatement(1169) into Block(1174) at 1", "Move ExpressionStatement(1056) into Block(1174) at 2", "Insert InfixExpression: ==(1152) into IfStatement(1169) at 0", "Insert Block(1168) into IfStatement(1169) at 1", "Insert QualifiedName: currentProgram.matchOrder(1150) into InfixExpression: ==(1152) at 0", "Insert ExpressionStatement(1161) into Block(1168) at 0", "Insert IfStatement(1167) into Block(1168) at 1", "Insert Assignment: =(1160) into ExpressionStatement(1161) at 0", "Insert InfixExpression: >=(1164) into IfStatement(1167) at 0", "Move Block(1057) into IfStatement(1167) at 1", "Insert MethodInvocation(1159) into Assignment: =(1160) at 1", "Insert QualifiedName: currentProgram.matchLimit(1163) into InfixExpression: >=(1164) at 1", "Insert ReturnStatement(1165) into Block(1166) at 0", "Insert SimpleName: depthFirstApply(1154) into MethodInvocation(1159) at 0", "Insert SimpleName: iter(1155) into MethodInvocation(1159) at 1", "Insert SimpleName: rules(1156) into MethodInvocation(1159) at 2", "Insert SimpleName: forceConversions(1157) into MethodInvocation(1159) at 3", "Delete QualifiedName: currentProgram.matchOrder(1124)", "Delete SimpleName: iter(1145)", "Delete QualifiedName: currentProgram.matchOrder(1086)", "Delete InfixExpression: ==(1088)", "Delete Block(1097)", "Delete IfStatement(1098)", "Delete SimpleName: Iterable(1103)", "Delete SimpleType: Iterable(1104)", "Delete SimpleName: HepRelVertex(1105)", "Delete SimpleType: HepRelVertex(1106)", "Delete ParameterizedType: Iterable<HepRelVertex>(1107)", "Delete SimpleName: iter(1108)", "Delete VariableDeclarationFragment(1113)", "Delete VariableDeclarationStatement(1114)", "Delete QualifiedName: currentProgram.matchOrder(1115)", "Delete InfixExpression: ==(1117)", "Delete ReturnStatement(1121)", "Delete Block(1122)", "Delete IfStatement(1123)", "Delete AssertStatement(1127)", "Delete SimpleName: mapDigestToVertex(2443)", "Delete SimpleName: get(2444)", "Delete SimpleName: newDigest(2445)", "Delete MethodInvocation(2446)", "Delete NullLiteral(2447)", "Delete InfixExpression: ==(2448)", "Delete Block(2455)", "Delete Block(2456)", "Delete IfStatement(2457)"]}}, {"HepProgram_cluster": {"actions": [{"root": "UPDATE from HepMatchOrder.ARBITRARY to HepMatchOrder.DEPTH_FIRST", "operations": ["UPD QualifiedName: HepMatchOrder.ARBITRARY from HepMatchOrder.ARBITRARY to HepMatchOrder.DEPTH_FIRST"]}]}}, {"HepProgram_diff": {"operations": []}}], "commit_stats": [{"total_files": 4, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}