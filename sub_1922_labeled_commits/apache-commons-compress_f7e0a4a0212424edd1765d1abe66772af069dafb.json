{"application": "apache-commons-compress", "csha": "f7e0a4a0212424edd1765d1abe66772af069dafb", "files": [{"LZ77Compressor_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 38", "operations": ["INS VariableDeclarationStatement to Block at 6", "INS SimpleName: matchLength to InfixExpression: <= at 0", "INS SimpleName: hashHead to MethodInvocation at 1", "INS PostfixExpression: ++ to ExpressionStatement at 0", "INS SimpleName: prevMatchLength to InfixExpression: <= at 1", "INS PostfixExpression: ++ to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: prevHashHead to VariableDeclarationFragment at 0", "INS SimpleName: prevMatchStart to VariableDeclarationFragment at 0", "INS SimpleName: longestMatch to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 5", "INS PrimitiveType: int to MethodDeclaration at 1", "INS SimpleName: prevMatchStart to Assignment: = at 1", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationStatement to Block at 4", "INS SimpleName: longestMatchForNextPosition to MethodDeclaration at 2", "INS ExpressionStatement to Block at 3", "INS SimpleName: matchLength to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS Modifier: final to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to IfStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: hashHead to VariableDeclarationFragment at 0", "INS ArrayAccess to Assignment: = at 0", "INS SimpleName: prevMatchLength to SingleVariableDeclaration at 2", "INS ExpressionStatement to Block at 1", "INS SimpleName: currentPosition to PostfixExpression: ++ at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: head to ArrayAccess at 0", "INS SimpleName: wMask to InfixExpression: & at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS SimpleName: currentPosition to MethodInvocation at 1", "INS SimpleName: currentPosition to InfixExpression: & at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 1", "INS SimpleName: insertHash to VariableDeclarationFragment at 1", "INS Block to MethodDeclaration at 4", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: matchStart to Assignment: = at 0", "INS SimpleName: insertHash to ArrayAccess at 1", "INS SimpleName: lookahead to PostfixExpression: -- at 0", "INS PostfixExpression: -- to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: matchStart to VariableDeclarationFragment at 1", "INS SimpleName: matchLength to Assignment: = at 0", "INS SimpleName: prevHashHead to Assignment: = at 1", "INS InfixExpression: <= to IfStatement at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 1", "INS SimpleName: prevInsertHash to Assignment: = at 1", "INS SimpleName: matchLength to ReturnStatement at 0", "INS SimpleName: insertHash to Assignment: = at 0", "INS ExpressionStatement to Block at 5", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: prevInsertHash to VariableDeclarationFragment at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodDeclaration to TypeDeclaration: class at 38", "INS ArrayAccess to VariableDeclarationFragment at 1", "INS IfStatement to Block at 7", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: currentPosition to PostfixExpression: -- at 0", "INS ExpressionStatement to Block at 4", "INS ExpressionStatement to Block at 2", "INS PostfixExpression: -- to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: prev to ArrayAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: lookahead to PostfixExpression: ++ at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: prevMatchLength to Assignment: = at 1", "INS ReturnStatement to Block at 8", "INS SimpleName: insertString to MethodInvocation at 0", "INS InfixExpression: & to ArrayAccess at 1", "INS ExpressionStatement to Block at 3"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS Modifier: final to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: params to MethodInvocation at 0", "INS SimpleName: getLazyMatching to MethodInvocation at 1", "INS SimpleName: lazy to VariableDeclarationFragment at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: params to MethodInvocation at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 1", "INS SimpleName: lazyThreshold to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getLazyMatchingThreshold to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 2", "INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS IfStatement to Block at 3", "INS Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: && to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS SimpleName: matchLength to InfixExpression: <= at 0", "INS InfixExpression: && to InfixExpression: && at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: lazy to InfixExpression: && at 0", "INS InfixExpression: <= to InfixExpression: && at 1", "INS SimpleName: lookahead to InfixExpression: > at 0", "INS SimpleName: minMatch to InfixExpression: > at 1", "INS InfixExpression: > to InfixExpression: && at 1", "INS SimpleName: lazyThreshold to InfixExpression: <= at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: longestMatchForNextPosition to MethodInvocation at 0", "INS SimpleName: matchLength to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: matchLength to MethodInvocation at 1"]}]}}, {"LZ77Compressor_diff": {"operations": ["Insert MethodDeclaration(1354) into TypeDeclaration: class(1614) at 38", "Insert Modifier: private(1273) into MethodDeclaration(1354) at 0", "Insert PrimitiveType: int(1274) into MethodDeclaration(1354) at 1", "Insert SingleVariableDeclaration(1279) into MethodDeclaration(1354) at 3", "Insert Block(1353) into MethodDeclaration(1354) at 4", "Insert VariableDeclarationStatement(1096) into Block(1221) at 1", "Insert VariableDeclarationStatement(1104) into Block(1221) at 2", "Insert Modifier: final(1276) into SingleVariableDeclaration(1279) at 0", "Insert PrimitiveType: int(1277) into SingleVariableDeclaration(1279) at 1", "Insert VariableDeclarationStatement(1285) into Block(1353) at 0", "Insert VariableDeclarationStatement(1291) into Block(1353) at 1", "Insert ExpressionStatement(1294) into Block(1353) at 2", "Insert ExpressionStatement(1297) into Block(1353) at 3", "Insert VariableDeclarationStatement(1304) into Block(1353) at 4", "Insert VariableDeclarationStatement(1314) into Block(1353) at 5", "Insert VariableDeclarationStatement(1321) into Block(1353) at 6", "Insert IfStatement(1350) into Block(1353) at 7", "Insert ReturnStatement(1352) into Block(1353) at 8", "Insert Modifier: final(1089) into VariableDeclarationStatement(1096) at 0", "Insert PrimitiveType: boolean(1090) into VariableDeclarationStatement(1096) at 1", "Insert VariableDeclarationFragment(1095) into VariableDeclarationStatement(1096) at 2", "Insert Modifier: final(1097) into VariableDeclarationStatement(1104) at 0", "Insert PrimitiveType: int(1098) into VariableDeclarationStatement(1104) at 1", "Insert VariableDeclarationFragment(1103) into VariableDeclarationStatement(1104) at 2", "Insert Modifier: final(1280) into VariableDeclarationStatement(1285) at 0", "Insert PrimitiveType: int(1281) into VariableDeclarationStatement(1285) at 1", "Insert VariableDeclarationFragment(1284) into VariableDeclarationStatement(1285) at 2", "Insert Modifier: final(1286) into VariableDeclarationStatement(1291) at 0", "Insert PrimitiveType: int(1287) into VariableDeclarationStatement(1291) at 1", "Insert VariableDeclarationFragment(1290) into VariableDeclarationStatement(1291) at 2", "Insert PostfixExpression: --(1293) into ExpressionStatement(1294) at 0", "Insert PostfixExpression: ++(1296) into ExpressionStatement(1297) at 0", "Insert PrimitiveType: int(1298) into VariableDeclarationStatement(1304) at 0", "Insert VariableDeclarationFragment(1303) into VariableDeclarationStatement(1304) at 1", "Insert Modifier: final(1305) into VariableDeclarationStatement(1314) at 0", "Insert PrimitiveType: int(1306) into VariableDeclarationStatement(1314) at 1", "Insert VariableDeclarationFragment(1313) into VariableDeclarationStatement(1314) at 2", "Insert PrimitiveType: int(1315) into VariableDeclarationStatement(1321) at 0", "Insert VariableDeclarationFragment(1320) into VariableDeclarationStatement(1321) at 1", "Insert InfixExpression: <=(1324) into IfStatement(1350) at 0", "Insert Block(1349) into IfStatement(1350) at 1", "Insert SimpleName: matchLength(1351) into ReturnStatement(1352) at 0", "Insert SimpleName: lazy(1091) into VariableDeclarationFragment(1095) at 0", "Insert MethodInvocation(1094) into VariableDeclarationFragment(1095) at 1", "Insert SimpleName: lazyThreshold(1099) into VariableDeclarationFragment(1103) at 0", "Insert MethodInvocation(1102) into VariableDeclarationFragment(1103) at 1", "Insert IfStatement(1158) into Block(1219) at 3", "Insert SimpleName: matchStart(1283) into VariableDeclarationFragment(1284) at 1", "Insert SimpleName: prevInsertHash(1288) into VariableDeclarationFragment(1290) at 0", "Insert SimpleName: insertHash(1289) into VariableDeclarationFragment(1290) at 1", "Insert SimpleName: lookahead(1292) into PostfixExpression: --(1293) at 0", "Insert SimpleName: currentPosition(1295) into PostfixExpression: ++(1296) at 0", "Insert SimpleName: hashHead(1299) into VariableDeclarationFragment(1303) at 0", "Insert MethodInvocation(1302) into VariableDeclarationFragment(1303) at 1", "Insert SimpleName: prevHashHead(1307) into VariableDeclarationFragment(1313) at 0", "Insert ArrayAccess(1312) into VariableDeclarationFragment(1313) at 1", "Insert SimpleName: matchLength(1316) into VariableDeclarationFragment(1320) at 0", "Insert MethodInvocation(1319) into VariableDeclarationFragment(1320) at 1", "Insert SimpleName: matchLength(1322) into InfixExpression: <=(1324) at 0", "Insert ExpressionStatement(1328) into Block(1349) at 0", "Insert ExpressionStatement(1332) into Block(1349) at 1", "Insert ExpressionStatement(1338) into Block(1349) at 2", "Insert ExpressionStatement(1342) into Block(1349) at 3", "Insert ExpressionStatement(1345) into Block(1349) at 4", "Insert ExpressionStatement(1348) into Block(1349) at 5", "Insert SimpleName: params(1092) into MethodInvocation(1094) at 0", "Insert SimpleName: params(1100) into MethodInvocation(1102) at 0", "Move InfixExpression: &&(1117) into IfStatement(1158) at 0", "Insert Block(1157) into IfStatement(1158) at 1", "Insert SimpleName: insertString(1300) into MethodInvocation(1302) at 0", "Insert SimpleName: currentPosition(1301) into MethodInvocation(1302) at 1", "Insert SimpleName: prev(1308) into ArrayAccess(1312) at 0", "Insert InfixExpression: &(1311) into ArrayAccess(1312) at 1", "Insert SimpleName: hashHead(1318) into MethodInvocation(1319) at 1", "Insert Assignment: =(1327) into ExpressionStatement(1328) at 0", "Insert Assignment: =(1331) into ExpressionStatement(1332) at 0", "Insert Assignment: =(1337) into ExpressionStatement(1338) at 0", "Insert Assignment: =(1341) into ExpressionStatement(1342) at 0", "Insert PostfixExpression: --(1344) into ExpressionStatement(1345) at 0", "Insert PostfixExpression: ++(1347) into ExpressionStatement(1348) at 0", "Move ExpressionStatement(1123) into Block(1157) at 0", "Move IfStatement(1125) into Block(1157) at 1", "Insert SimpleName: currentPosition(1309) into InfixExpression: &(1311) at 0", "Insert SimpleName: wMask(1310) into InfixExpression: &(1311) at 1", "Insert SimpleName: matchLength(1325) into Assignment: =(1327) at 0", "Insert SimpleName: matchStart(1329) into Assignment: =(1331) at 0", "Insert ArrayAccess(1335) into Assignment: =(1337) at 0", "Insert SimpleName: prevHashHead(1336) into Assignment: =(1337) at 1", "Insert SimpleName: insertHash(1339) into Assignment: =(1341) at 0", "Insert SimpleName: prevInsertHash(1340) into Assignment: =(1341) at 1", "Insert SimpleName: currentPosition(1343) into PostfixExpression: --(1344) at 0", "Insert SimpleName: lookahead(1346) into PostfixExpression: ++(1347) at 0", "Insert InfixExpression: &&(1148) into IfStatement(1156) at 0", "Insert SimpleName: head(1333) into ArrayAccess(1335) at 0", "Insert SimpleName: insertHash(1334) into ArrayAccess(1335) at 1", "Insert InfixExpression: &&(1144) into InfixExpression: &&(1148) at 0", "Insert InfixExpression: >(1147) into InfixExpression: &&(1148) at 1", "Insert ExpressionStatement(1154) into Block(1155) at 0", "Insert SimpleName: lazy(1140) into InfixExpression: &&(1144) at 0", "Insert InfixExpression: <=(1143) into InfixExpression: &&(1144) at 1", "Insert SimpleName: lookahead(1145) into InfixExpression: >(1147) at 0", "Insert Assignment: =(1153) into ExpressionStatement(1154) at 0", "Insert SimpleName: matchLength(1141) into InfixExpression: <=(1143) at 0", "Insert SimpleName: lazyThreshold(1142) into InfixExpression: <=(1143) at 1", "Insert SimpleName: matchLength(1149) into Assignment: =(1153) at 0", "Insert MethodInvocation(1152) into Assignment: =(1153) at 1", "Insert SimpleName: matchLength(1151) into MethodInvocation(1152) at 1"]}}, {"Parameters_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleName: lazyMatching to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS Modifier: final to FieldDeclaration at 1", "INS PrimitiveType: boolean to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 17", "operations": ["INS Block to MethodDeclaration at 4", "INS SimpleName: getLazyMatching to MethodDeclaration at 3", "INS Javadoc to MethodDeclaration at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS TagElement to Javadoc at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: lazyMatching to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS TextElement: Gets whether to perform lazy matching. to TagElement at 0", "INS MethodDeclaration to TypeDeclaration: class at 17"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 18", "INS SimpleName: lazyThreshold to ReturnStatement at 0", "INS SimpleName: getLazyMatchingThreshold to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS TextElement: Gets the threshold for lazy matching. to TagElement at 0", "INS TagElement to Javadoc at 0", "INS Block to MethodDeclaration at 4", "INS Javadoc to MethodDeclaration at 0", "INS PrimitiveType: int to MethodDeclaration at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: Boolean to SimpleType: Boolean at 0", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: Boolean to FieldDeclaration at 1", "INS SimpleName: lazyMatches to VariableDeclarationFragment at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS TextElement: <p>Lazy matching means that after a back-reference for a certain position has been found the compressor will to TagElement at 1", "INS SimpleName: withLazyMatching to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: lazy to SingleVariableDeclaration at 1", "INS TextElement: <p>Lazy matching is enabled by default and disabled when tuning for speed.</p> to TagElement at 3", "INS ReturnStatement to Block at 1", "INS ThisExpression to ReturnStatement at 0", "INS ExpressionStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: Builder to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS SimpleName: Builder to SimpleType: Builder at 0", "INS TagElement to Javadoc at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: lazy to Assignment: = at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: lazyMatches to Assignment: = at 0", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS TextElement: try to find a longer match for the next position.</p> to TagElement at 2", "INS Block to MethodDeclaration at 5", "INS TextElement: Sets whether lazy matching should be performed. to TagElement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS SimpleType: Builder to MethodDeclaration at 2", "INS SimpleName: withLazyThreshold to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS TextElement: the current position is longer than this value.</p> to TagElement at 2", "INS SimpleName: threshold to Assignment: = at 1", "INS Block to MethodDeclaration at 5", "INS Javadoc to MethodDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS TagElement to Javadoc at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: Builder to SimpleType: Builder at 0", "INS TextElement: Sets the threshold for lazy matching. to TagElement at 0", "INS SimpleName: lazyThreshold to Assignment: = at 0", "INS SimpleName: threshold to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 1", "INS ThisExpression to ReturnStatement at 0", "INS TextElement: <p>Even if lazy matching is enabled it will not be performed if the length of the back-reference found for to TagElement at 1"]}, {"root": "INS VariableDeclarationFragment to FieldDeclaration at 10", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 10", "INS SimpleName: lazyThreshold to VariableDeclarationFragment at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 9", "operations": ["INS SimpleName: lazyMatching to SingleVariableDeclaration at 1", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 9"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 10", "operations": ["INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 10", "INS SimpleName: lazyThreshold to SingleVariableDeclaration at 1"]}, {"root": "INS VariableDeclarationFragment to FieldDeclaration at 4", "operations": ["INS SimpleName: lazyThreshold to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4"]}, {"root": "INS ExpressionStatement to Block at 7", "operations": ["INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 7", "INS SimpleName: lazyMatching to Assignment: = at 1", "INS SimpleName: lazyMatching to FieldAccess at 1"]}, {"root": "INS ExpressionStatement to Block at 8", "operations": ["INS ExpressionStatement to Block at 8", "INS SimpleName: lazyThreshold to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: lazyThreshold to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2", "INS SimpleName: lazyMatches to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS BooleanLiteral: false to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS SimpleName: lazyThreshold to Assignment: = at 0", "INS ExpressionStatement to Block at 3", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: minBackReferenceLength to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: lazyMatches to Assignment: = at 0", "INS BooleanLiteral: true to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS NullLiteral to InfixExpression: != at 1", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: lazyMatches to ConditionalExpression at 1", "INS InfixExpression: != to ConditionalExpression at 0", "INS SimpleName: lazyMatches to InfixExpression: != at 0", "INS BooleanLiteral: true to ConditionalExpression at 2", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: lazy to VariableDeclarationFragment at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS ConditionalExpression to VariableDeclarationFragment at 1", "INS InfixExpression: != to ConditionalExpression at 0", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: niceLen to ConditionalExpression at 2", "INS SimpleName: threshold to VariableDeclarationFragment at 0", "INS ConditionalExpression to ParenthesizedExpression at 0", "INS SimpleName: lazyThreshold to ConditionalExpression at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS ParenthesizedExpression to ConditionalExpression at 1", "INS SimpleName: minBackReferenceLength to ConditionalExpression at 2", "INS SimpleName: lazyThreshold to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: lazy to ConditionalExpression at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS Assignment: = to Assignment: = at 1", "operations": ["INS SimpleName: lazyThreshold to Assignment: = at 0", "INS Assignment: = to Assignment: = at 1"]}, {"root": "INS SimpleName: lazy to ClassInstanceCreation at 8", "operations": ["INS SimpleName: lazy to ClassInstanceCreation at 8"]}, {"root": "INS SimpleName: threshold to ClassInstanceCreation at 9", "operations": ["INS SimpleName: threshold to ClassInstanceCreation at 9"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV SimpleName: maxBackReferenceLength to Assignment: = at 1"]}]}}, {"Parameters_diff": {"operations": ["Insert FieldDeclaration(621) into TypeDeclaration: class(828) at 8", "Insert MethodDeclaration(797) into TypeDeclaration: class(828) at 17", "Insert MethodDeclaration(807) into TypeDeclaration: class(828) at 18", "Insert FieldDeclaration(100) into TypeDeclaration: class(595) at 7", "Insert MethodDeclaration(414) into TypeDeclaration: class(595) at 15", "Insert MethodDeclaration(434) into TypeDeclaration: class(595) at 16", "Insert VariableDeclarationFragment(614) into FieldDeclaration(615) at 10", "Insert Modifier: private(616) into FieldDeclaration(621) at 0", "Insert Modifier: final(617) into FieldDeclaration(621) at 1", "Insert PrimitiveType: boolean(618) into FieldDeclaration(621) at 2", "Insert VariableDeclarationFragment(620) into FieldDeclaration(621) at 3", "Insert SingleVariableDeclaration(647) into MethodDeclaration(706) at 9", "Insert SingleVariableDeclaration(650) into MethodDeclaration(706) at 10", "Insert Javadoc(790) into MethodDeclaration(797) at 0", "Insert Modifier: public(791) into MethodDeclaration(797) at 1", "Insert PrimitiveType: boolean(792) into MethodDeclaration(797) at 2", "Insert Block(796) into MethodDeclaration(797) at 4", "Insert Javadoc(800) into MethodDeclaration(807) at 0", "Insert Modifier: public(801) into MethodDeclaration(807) at 1", "Insert PrimitiveType: int(802) into MethodDeclaration(807) at 2", "Insert Block(806) into MethodDeclaration(807) at 4", "Insert VariableDeclarationFragment(93) into FieldDeclaration(94) at 4", "Insert Modifier: private(95) into FieldDeclaration(100) at 0", "Insert SimpleType: Boolean(97) into FieldDeclaration(100) at 1", "Insert VariableDeclarationFragment(99) into FieldDeclaration(100) at 2", "Insert Javadoc(399) into MethodDeclaration(414) at 0", "Insert Modifier: public(400) into MethodDeclaration(414) at 1", "Insert SimpleType: Builder(402) into MethodDeclaration(414) at 2", "Insert SingleVariableDeclaration(406) into MethodDeclaration(414) at 4", "Insert Block(413) into MethodDeclaration(414) at 5", "Insert Javadoc(419) into MethodDeclaration(434) at 0", "Insert Modifier: public(420) into MethodDeclaration(434) at 1", "Insert SimpleType: Builder(422) into MethodDeclaration(434) at 2", "Insert SimpleName: withLazyThreshold(423) into MethodDeclaration(434) at 3", "Insert SingleVariableDeclaration(426) into MethodDeclaration(434) at 4", "Insert Block(433) into MethodDeclaration(434) at 5", "Insert SimpleName: lazyThreshold(613) into VariableDeclarationFragment(614) at 0", "Insert PrimitiveType: boolean(645) into SingleVariableDeclaration(647) at 0", "Insert PrimitiveType: int(648) into SingleVariableDeclaration(650) at 0", "Insert SimpleName: lazyThreshold(649) into SingleVariableDeclaration(650) at 1", "Insert ExpressionStatement(698) into Block(705) at 7", "Insert ExpressionStatement(704) into Block(705) at 8", "Insert TagElement(789) into Javadoc(790) at 0", "Insert ReturnStatement(795) into Block(796) at 0", "Insert TagElement(799) into Javadoc(800) at 0", "Insert ReturnStatement(805) into Block(806) at 0", "Insert SimpleName: lazyThreshold(92) into VariableDeclarationFragment(93) at 0", "Insert SimpleName: Boolean(96) into SimpleType: Boolean(97) at 0", "Insert TagElement(398) into Javadoc(399) at 0", "Insert SimpleName: Builder(401) into SimpleType: Builder(402) at 0", "Insert PrimitiveType: boolean(404) into SingleVariableDeclaration(406) at 0", "Insert SimpleName: lazy(405) into SingleVariableDeclaration(406) at 1", "Insert ExpressionStatement(410) into Block(413) at 0", "Insert ReturnStatement(412) into Block(413) at 1", "Insert TagElement(418) into Javadoc(419) at 0", "Insert SimpleName: Builder(421) into SimpleType: Builder(422) at 0", "Insert PrimitiveType: int(424) into SingleVariableDeclaration(426) at 0", "Insert SimpleName: threshold(425) into SingleVariableDeclaration(426) at 1", "Insert ExpressionStatement(430) into Block(433) at 0", "Insert ReturnStatement(432) into Block(433) at 1", "Insert ExpressionStatement(467) into Block(474) at 2", "Insert ExpressionStatement(471) into Block(474) at 3", "Insert ExpressionStatement(504) into Block(507) at 2", "Insert VariableDeclarationStatement(565) into Block(593) at 2", "Insert VariableDeclarationStatement(579) into Block(593) at 3", "Insert Assignment: =(697) into ExpressionStatement(698) at 0", "Insert Assignment: =(703) into ExpressionStatement(704) at 0", "Insert TextElement: Gets whether to perform lazy matching.(788) into TagElement(789) at 0", "Insert TextElement: Gets the threshold for lazy matching.(798) into TagElement(799) at 0", "Insert SimpleName: lazyThreshold(804) into ReturnStatement(805) at 0", "Insert TextElement: Sets whether lazy matching should be performed.(394) into TagElement(398) at 0", "Insert TextElement: <p>Lazy matching means that after a back-reference for a certain position has been found the compressor will(395) into TagElement(398) at 1", "Insert TextElement: try to find a longer match for the next position.</p>(396) into TagElement(398) at 2", "Insert TextElement: <p>Lazy matching is enabled by default and disabled when tuning for speed.</p>(397) into TagElement(398) at 3", "Insert Assignment: =(409) into ExpressionStatement(410) at 0", "Insert ThisExpression(411) into ReturnStatement(412) at 0", "Insert TextElement: Sets the threshold for lazy matching.(415) into TagElement(418) at 0", "Insert TextElement: <p>Even if lazy matching is enabled it will not be performed if the length of the back-reference found for(416) into TagElement(418) at 1", "Insert TextElement: the current position is longer than this value.</p>(417) into TagElement(418) at 2", "Insert Assignment: =(429) into ExpressionStatement(430) at 0", "Insert ThisExpression(431) into ReturnStatement(432) at 0", "Insert Assignment: =(466) into ExpressionStatement(467) at 0", "Insert Assignment: =(470) into ExpressionStatement(471) at 0", "Insert Assignment: =(503) into ExpressionStatement(504) at 0", "Insert PrimitiveType: boolean(556) into VariableDeclarationStatement(565) at 0", "Insert VariableDeclarationFragment(564) into VariableDeclarationStatement(565) at 1", "Insert PrimitiveType: int(566) into VariableDeclarationStatement(579) at 0", "Insert VariableDeclarationFragment(578) into VariableDeclarationStatement(579) at 1", "Insert FieldAccess(695) into Assignment: =(697) at 0", "Insert FieldAccess(701) into Assignment: =(703) at 0", "Insert SimpleName: lazyThreshold(702) into Assignment: =(703) at 1", "Insert SimpleName: lazy(408) into Assignment: =(409) at 1", "Insert SimpleName: lazyThreshold(427) into Assignment: =(429) at 0", "Insert SimpleName: threshold(428) into Assignment: =(429) at 1", "Insert BooleanLiteral: false(465) into Assignment: =(466) at 1", "Insert SimpleName: lazyThreshold(468) into Assignment: =(470) at 0", "Insert SimpleName: minBackReferenceLength(469) into Assignment: =(470) at 1", "Insert Assignment: =(488) into Assignment: =(489) at 1", "Insert BooleanLiteral: true(502) into Assignment: =(503) at 1", "Insert SimpleName: lazy(557) into VariableDeclarationFragment(564) at 0", "Insert ConditionalExpression(563) into VariableDeclarationFragment(564) at 1", "Insert SimpleName: threshold(567) into VariableDeclarationFragment(578) at 0", "Insert ConditionalExpression(577) into VariableDeclarationFragment(578) at 1", "Insert SimpleName: lazy(589) into ClassInstanceCreation(591) at 8", "Insert SimpleName: threshold(590) into ClassInstanceCreation(591) at 9", "Insert ThisExpression(693) into FieldAccess(695) at 0", "Insert ThisExpression(699) into FieldAccess(701) at 0", "Insert SimpleName: lazyThreshold(700) into FieldAccess(701) at 1", "Insert SimpleName: lazyThreshold(486) into Assignment: =(488) at 0", "Move SimpleName: maxBackReferenceLength(429) into Assignment: =(488) at 1", "Insert InfixExpression: !=(560) into ConditionalExpression(563) at 0", "Insert BooleanLiteral: true(562) into ConditionalExpression(563) at 2", "Insert SimpleName: lazy(568) into ConditionalExpression(577) at 0", "Insert ParenthesizedExpression(575) into ConditionalExpression(577) at 1", "Insert SimpleName: minBackReferenceLength(576) into ConditionalExpression(577) at 2", "Insert NullLiteral(559) into InfixExpression: !=(560) at 1", "Insert ConditionalExpression(574) into ParenthesizedExpression(575) at 0", "Insert InfixExpression: !=(571) into ConditionalExpression(574) at 0", "Insert SimpleName: lazyThreshold(572) into ConditionalExpression(574) at 1", "Insert SimpleName: niceLen(573) into ConditionalExpression(574) at 2", "Insert SimpleName: lazyThreshold(569) into InfixExpression: !=(571) at 0", "Insert NullLiteral(570) into InfixExpression: !=(571) at 1"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}