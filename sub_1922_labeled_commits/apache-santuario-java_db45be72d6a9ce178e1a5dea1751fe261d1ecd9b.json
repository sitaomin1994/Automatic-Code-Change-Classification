{"application": "apache-santuario-java", "csha": "db45be72d6a9ce178e1a5dea1751fe261d1ecd9b", "files": [{"CreateMerlinsExampleSixteen_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 24", "operations": ["INS ImportDeclaration to CompilationUnit at 24", "INS QualifiedName: org.apache.xml.security.utils.ElementProxy to ImportDeclaration at 0"]}, {"root": "UPDATE from Constants to ElementProxy", "operations": ["UPD SimpleName: Constants from Constants to ElementProxy"]}, {"root": "UPDATE from setSignatureSpecNSprefix to setDefaultPrefix", "operations": ["UPD SimpleName: setSignatureSpecNSprefix from setSignatureSpecNSprefix to setDefaultPrefix"]}, {"root": "INS QualifiedName: Constants.SignatureSpecNS to MethodInvocation at 2", "operations": ["INS QualifiedName: Constants.SignatureSpecNS to MethodInvocation at 2"]}]}}, {"CreateMerlinsExampleSixteen_diff": {"operations": ["Insert ImportDeclaration(49) into CompilationUnit(1523) at 24", "Insert QualifiedName: org.apache.xml.security.utils.ElementProxy(48) into ImportDeclaration(49) at 0", "Update SimpleName: Constants(109) to ElementProxy", "Update SimpleName: setSignatureSpecNSprefix(110) to setDefaultPrefix", "Insert QualifiedName: Constants.SignatureSpecNS(113) into MethodInvocation(115) at 2"]}}, {"CreateMerlinsExampleTwentyThree_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 24", "operations": ["INS ImportDeclaration to CompilationUnit at 24", "INS QualifiedName: org.apache.xml.security.utils.ElementProxy to ImportDeclaration at 0"]}, {"root": "UPDATE from Constants to ElementProxy", "operations": ["UPD SimpleName: Constants from Constants to ElementProxy"]}, {"root": "UPDATE from setSignatureSpecNSprefix to setDefaultPrefix", "operations": ["UPD SimpleName: setSignatureSpecNSprefix from setSignatureSpecNSprefix to setDefaultPrefix"]}, {"root": "INS QualifiedName: Constants.SignatureSpecNS to MethodInvocation at 2", "operations": ["INS QualifiedName: Constants.SignatureSpecNS to MethodInvocation at 2"]}]}}, {"CreateMerlinsExampleTwentyThree_diff": {"operations": ["Insert ImportDeclaration(49) into CompilationUnit(1523) at 24", "Insert QualifiedName: org.apache.xml.security.utils.ElementProxy(48) into ImportDeclaration(49) at 0", "Update SimpleName: Constants(109) to ElementProxy", "Update SimpleName: setSignatureSpecNSprefix(110) to setDefaultPrefix", "Insert QualifiedName: Constants.SignatureSpecNS(113) into MethodInvocation(115) at 2"]}}, {"CreateNullURIReference_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS QualifiedName: org.apache.xml.security.utils.ElementProxy to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 9"]}, {"root": "UPDATE from Constants to ElementProxy", "operations": ["UPD SimpleName: Constants from Constants to ElementProxy"]}, {"root": "UPDATE from setSignatureSpecNSprefix to setDefaultPrefix", "operations": ["UPD SimpleName: setSignatureSpecNSprefix from setSignatureSpecNSprefix to setDefaultPrefix"]}, {"root": "INS QualifiedName: Constants.SignatureSpecNS to MethodInvocation at 2", "operations": ["INS QualifiedName: Constants.SignatureSpecNS to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: toURI to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: signatureFile to MethodInvocation at 0"]}]}}, {"CreateNullURIReference_diff": {"operations": ["Insert ImportDeclaration(19) into CompilationUnit(330) at 9", "Insert QualifiedName: org.apache.xml.security.utils.ElementProxy(18) into ImportDeclaration(19) at 0", "Update SimpleName: Constants(196) to ElementProxy", "Update SimpleName: setSignatureSpecNSprefix(197) to setDefaultPrefix", "Insert QualifiedName: Constants.SignatureSpecNS(202) into MethodInvocation(204) at 2", "Insert MethodInvocation(193) into MethodInvocation(195) at 0", "Move SimpleName: signatureFile(189) into MethodInvocation(193) at 0", "Insert SimpleName: toURI(192) into MethodInvocation(193) at 1"]}}, {"CreateSignature_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS ImportDeclaration to CompilationUnit at 10", "INS QualifiedName: org.apache.xml.security.utils.ElementProxy to ImportDeclaration at 0"]}, {"root": "UPDATE from Constants to ElementProxy", "operations": ["UPD SimpleName: Constants from Constants to ElementProxy"]}, {"root": "UPDATE from setSignatureSpecNSprefix to setDefaultPrefix", "operations": ["UPD SimpleName: setSignatureSpecNSprefix from setSignatureSpecNSprefix to setDefaultPrefix"]}, {"root": "INS QualifiedName: Constants.SignatureSpecNS to MethodInvocation at 2", "operations": ["INS QualifiedName: Constants.SignatureSpecNS to MethodInvocation at 2"]}]}}, {"CreateSignature_diff": {"operations": ["Insert ImportDeclaration(21) into CompilationUnit(416) at 10", "Insert QualifiedName: org.apache.xml.security.utils.ElementProxy(20) into ImportDeclaration(21) at 0", "Update SimpleName: Constants(73) to ElementProxy", "Update SimpleName: setSignatureSpecNSprefix(74) to setDefaultPrefix", "Insert QualifiedName: Constants.SignatureSpecNS(77) into MethodInvocation(79) at 2"]}}, {"HereSigner_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 13", "operations": ["INS QualifiedName: org.apache.xml.security.utils.ElementProxy to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 13"]}, {"root": "UPDATE from Constants to ElementProxy", "operations": ["UPD SimpleName: Constants from Constants to ElementProxy"]}, {"root": "UPDATE from setSignatureSpecNSprefix to setDefaultPrefix", "operations": ["UPD SimpleName: setSignatureSpecNSprefix from setSignatureSpecNSprefix to setDefaultPrefix"]}, {"root": "INS QualifiedName: Constants.SignatureSpecNS to MethodInvocation at 2", "operations": ["INS QualifiedName: Constants.SignatureSpecNS to MethodInvocation at 2"]}]}}, {"HereSigner_diff": {"operations": ["Insert ImportDeclaration(27) into CompilationUnit(494) at 13", "Insert QualifiedName: org.apache.xml.security.utils.ElementProxy(26) into ImportDeclaration(27) at 0", "Update SimpleName: Constants(208) to ElementProxy", "Update SimpleName: setSignatureSpecNSprefix(209) to setDefaultPrefix", "Insert QualifiedName: Constants.SignatureSpecNS(212) into MethodInvocation(214) at 2"]}}, {"Init_cluster": {"actions": [{"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: init", "DEL SimpleName: Transform", "DEL ExpressionStatement"]}]}}, {"Init_diff": {"operations": ["Delete SimpleName: Transform(628)", "Delete SimpleName: init(629)", "Delete MethodInvocation(630)", "Delete ExpressionStatement(631)"]}}, {"InvalidTransformException_cluster": {"actions": [{"root": "UPDATE from _msgId to msgId", "operations": ["UPD SimpleName: _msgId from _msgId to msgId", "UPD SimpleName: _msgId from _msgId to msgId", "UPD SimpleName: _msgId from _msgId to msgId", "UPD SimpleName: _msgId from _msgId to msgId", "UPD SimpleName: _msgId from _msgId to msgId", "UPD SimpleName: _msgId from _msgId to msgId", "UPD SimpleName: _msgId from _msgId to msgId", "UPD SimpleName: _msgId from _msgId to msgId", "UPD SimpleName: _msgId from _msgId to msgId", "UPD SimpleName: _msgId from _msgId to msgId", "UPD SimpleName: _msgId from _msgId to msgId", "UPD SimpleName: _msgId from _msgId to msgId"]}, {"root": "UPDATE from _originalException to originalException", "operations": ["UPD SimpleName: _originalException from _originalException to originalException", "UPD SimpleName: _originalException from _originalException to originalException", "UPD SimpleName: _originalException from _originalException to originalException", "UPD SimpleName: _originalException from _originalException to originalException", "UPD SimpleName: _originalException from _originalException to originalException", "UPD SimpleName: _originalException from _originalException to originalException"]}]}}, {"InvalidTransformException_diff": {"operations": ["Update SimpleName: _msgId(37) to msgId", "Update SimpleName: _msgId(54) to msgId", "Update SimpleName: _msgId(77) to msgId", "Update SimpleName: _originalException(81) to originalException", "Update SimpleName: _msgId(101) to msgId", "Update SimpleName: _originalException(110) to originalException", "Update SimpleName: _msgId(30) to msgId", "Update SimpleName: _msgId(39) to msgId", "Update SimpleName: _msgId(45) to msgId", "Update SimpleName: _msgId(61) to msgId", "Update SimpleName: _msgId(68) to msgId", "Update SimpleName: _originalException(70) to originalException", "Update SimpleName: _msgId(83) to msgId", "Update SimpleName: _originalException(84) to originalException", "Update SimpleName: _msgId(90) to msgId", "Update SimpleName: _originalException(94) to originalException", "Update SimpleName: _msgId(112) to msgId", "Update SimpleName: _originalException(114) to originalException"]}}, {"Transform_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: java.util.concurrent.ConcurrentHashMap to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "UPDATE from java.util.HashMap to java.util.Map", "operations": ["UPD QualifiedName: java.util.HashMap from java.util.HashMap to java.util.Map"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 6", "INS SimpleType: TransformSpi to ParameterizedType: Map<String,TransformSpi> at 2", "INS ParameterizedType: Map<String,TransformSpi> to FieldDeclaration at 3", "INS SimpleType: Map to ParameterizedType: Map<String,TransformSpi> at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 16", "INS StringLiteral: \"unchecked\" to SingleMemberAnnotation at 1", "INS SingleMemberAnnotation to MethodDeclaration at 1", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS Block to MethodDeclaration at 10"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Javadoc to FieldDeclaration at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Modifier: private to FieldDeclaration at 1", "MOV Modifier: static to FieldDeclaration at 2"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SimpleName: register to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 7", "MOV SimpleType: AlgorithmAlreadyRegisteredException to MethodDeclaration at 8"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: static to MethodDeclaration at 3", "MOV PrimitiveType: void to MethodDeclaration at 4", "MOV Modifier: public to MethodDeclaration at 2"]}, {"root": "MOVE from ParameterizedType: ConcurrentHashMap<String,TransformSpi>", "operations": ["MOV SimpleType: TransformSpi to ParameterizedType: ConcurrentHashMap<String,TransformSpi> at 2", "MOV SimpleType: InvalidTransformException to MethodDeclaration at 9"]}, {"root": "MOVE from ParameterizedType: Map<String,TransformSpi>", "operations": ["MOV SimpleType: String to ParameterizedType: Map<String,TransformSpi> at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV TryStatement to Block at 2"]}, {"root": "UPDATE from HashMap to Map", "operations": ["UPD SimpleName: HashMap from HashMap to Map"]}, {"root": "MOVE from SimpleType: Map", "operations": ["MOV SimpleName: HashMap to SimpleType: Map at 0"]}, {"root": "UPDATE from HashMap to TransformSpi", "operations": ["UPD SimpleName: HashMap from HashMap to TransformSpi"]}, {"root": "MOVE from SimpleType: TransformSpi", "operations": ["MOV SimpleName: HashMap to SimpleType: TransformSpi at 0"]}, {"root": "INS ParameterizedType: ConcurrentHashMap<String,TransformSpi> to ClassInstanceCreation at 0", "operations": ["INS SimpleType: ConcurrentHashMap to ParameterizedType: ConcurrentHashMap<String,TransformSpi> at 0", "INS ParameterizedType: ConcurrentHashMap<String,TransformSpi> to ClassInstanceCreation at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: TransformSpi to VariableDeclarationStatement at 0"]}, {"root": "INS Block to TryStatement at 0", "operations": ["INS MethodInvocation to MethodInvocation at 3", "INS ExpressionStatement to Block at 1", "INS Block to TryStatement at 0", "INS SimpleName: put to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: transformSpiHash to MethodInvocation at 0", "INS SimpleName: algorithmURI to MethodInvocation at 2"]}, {"root": "INS CatchClause to TryStatement at 1", "operations": ["INS CatchClause to TryStatement at 1", "INS ThrowStatement to Block at 1", "INS StringLiteral: \"signature.Transform.UnknownTransform\" to ClassInstanceCreation at 1", "INS SimpleName: ex to ClassInstanceCreation at 3", "INS SimpleName: exArgs to ClassInstanceCreation at 2", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleType: InvalidTransformException to ClassInstanceCreation at 0", "INS SimpleName: InvalidTransformException to SimpleType: InvalidTransformException at 0", "INS Block to CatchClause at 1"]}, {"root": "MOVE from ParameterizedType: ConcurrentHashMap<String,TransformSpi>", "operations": ["MOV SimpleType: String to ParameterizedType: ConcurrentHashMap<String,TransformSpi> at 1"]}, {"root": "UPDATE from registeredClass to transformSpi", "operations": ["UPD SimpleName: registeredClass from registeredClass to transformSpi", "UPD SimpleName: registeredClass from registeredClass to transformSpi"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "UPDATE from HashMap to ConcurrentHashMap", "operations": ["UPD SimpleName: HashMap from HashMap to ConcurrentHashMap"]}, {"root": "MOVE from SimpleType: ConcurrentHashMap", "operations": ["MOV SimpleName: HashMap to SimpleType: ConcurrentHashMap at 0"]}, {"root": "UPDATE from getTransformSpi to transformSpiHash", "operations": ["UPD SimpleName: getTransformSpi from getTransformSpi to transformSpiHash", "UPD SimpleName: getTransformSpi from getTransformSpi to transformSpiHash"]}, {"root": "INS SimpleName: get to MethodInvocation at 1", "operations": ["INS SimpleName: get to MethodInvocation at 1"]}, {"root": "INS SimpleName: get to MethodInvocation at 1", "operations": ["INS SimpleName: get to MethodInvocation at 1"]}, {"root": "INS SimpleName: transformSpiHash to MethodInvocation at 0", "operations": ["INS SimpleName: transformSpiHash to MethodInvocation at 0"]}, {"root": "UPDATE from getImplementingClass to get", "operations": ["UPD SimpleName: getImplementingClass from getImplementingClass to get"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Object to VariableDeclarationStatement at 0"]}, {"root": "INS ParameterizedType: Class<TransformSpi> to VariableDeclarationStatement at 0", "operations": ["INS ParameterizedType: Class<TransformSpi> to VariableDeclarationStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ThrowStatement to Block at 1"]}, {"root": "UPDATE from e to ex", "operations": ["UPD SimpleName: e from e to ex"]}, {"root": "MOVE from Block", "operations": ["MOV ThrowStatement to Block at 1"]}, {"root": "MOVE from ParameterizedType: Class<TransformSpi>", "operations": ["MOV SimpleType: Class to ParameterizedType: Class<TransformSpi> at 0"]}, {"root": "MOVE from ParameterizedType: Class<TransformSpi>", "operations": ["MOV SimpleType: TransformSpi to ParameterizedType: Class<TransformSpi> at 1"]}, {"root": "INS SimpleName: transformSpiClass to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: transformSpiClass to VariableDeclarationFragment at 0"]}, {"root": "INS CastExpression to VariableDeclarationFragment at 1", "operations": ["INS ParameterizedType: Class<TransformSpi> to CastExpression at 0", "INS CastExpression to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Object to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Object to VariableDeclarationStatement at 0"]}, {"root": "INS MethodInvocation to ArrayInitializer at 1", "operations": ["INS MethodInvocation to ArrayInitializer at 1", "INS SimpleName: transformSpi to MethodInvocation at 0", "INS SimpleName: getClass to MethodInvocation at 1"]}, {"root": "MOVE from CastExpression", "operations": ["MOV MethodInvocation to CastExpression at 1"]}, {"root": "UPDATE from transformClassHash to transformSpiClass", "operations": ["UPD SimpleName: transformClassHash from transformClassHash to transformSpiClass"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: get to MethodInvocation at 1", "MOV SimpleName: transformClassHash to MethodInvocation at 0"]}, {"root": "UPDATE from get to newInstance", "operations": ["UPD SimpleName: get from get to newInstance"]}, {"root": "UPDATE from tr to exArgs", "operations": ["UPD SimpleName: tr from tr to exArgs"]}, {"root": "INS Dimension to VariableDeclarationFragment at 1", "operations": ["INS Dimension to VariableDeclarationFragment at 1"]}, {"root": "INS ArrayInitializer to VariableDeclarationFragment at 2", "operations": ["INS ArrayInitializer to VariableDeclarationFragment at 2", "INS SimpleName: algorithmURI to ArrayInitializer at 0"]}, {"root": "MOVE from ParameterizedType: Class<TransformSpi>", "operations": ["MOV SimpleType: Class to ParameterizedType: Class<TransformSpi> at 0"]}, {"root": "MOVE from ParameterizedType: Class<TransformSpi>", "operations": ["MOV SimpleType: TransformSpi to ParameterizedType: Class<TransformSpi> at 1"]}, {"root": "UPDATE from URI to algorithmURI", "operations": ["UPD SimpleName: URI from URI to algorithmURI", "UPD SimpleName: URI from URI to algorithmURI"]}, {"root": "DEL SimpleType: HashMap", "operations": ["DEL SimpleType: HashMap"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL TextElement: Field _alreadyInitialized ", "DEL PrimitiveType: boolean", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: alreadyInitialized", "DEL BooleanLiteral: false", "DEL Javadoc"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL NullLiteral", "DEL FieldDeclaration", "DEL SimpleType: HashMap", "DEL SimpleName: transformClassHash"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleType: HashMap", "DEL Modifier: private", "DEL FieldDeclaration", "DEL Modifier: static"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL TagElement", "operations": ["DEL TagElement", "DEL TextElement:  object,", "DEL SimpleName: Transforms", "DEL TagElement: @link", "DEL TextElement: This constructor can only be called from the ", "DEL TextElement: so it's protected."]}, {"root": "DEL SimpleName: registeredClass", "operations": ["DEL SimpleName: registeredClass"]}, {"root": "DEL SimpleName: value", "operations": ["DEL SimpleName: value"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: get", "DEL SimpleName: URI", "DEL MethodInvocation", "DEL SimpleName: transformSpiHash"]}, {"root": "DEL CastExpression", "operations": ["DEL CastExpression", "DEL MethodInvocation", "DEL SimpleName: newInstance", "DEL SimpleName: cl"]}, {"root": "DEL Block", "operations": ["DEL NullLiteral", "DEL SimpleName: cl", "DEL Block", "DEL IfStatement", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: Class", "DEL SimpleName: URI", "DEL CastExpression", "DEL SimpleName: URI", "DEL SimpleName: value", "DEL InfixExpression: !=", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: put", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: tr", "DEL IfStatement", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleName: cl", "DEL InfixExpression: !=", "DEL SimpleName: tr", "DEL SimpleName: transformSpiHash", "DEL SimpleName: Class", "DEL SimpleName: value", "DEL SimpleType: Class", "DEL ReturnStatement", "DEL SimpleType: Class"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ExpressionStatement", "DEL PrefixExpression: !", "DEL TextElement: Initalizes for this ", "DEL SimpleName: init", "DEL SimpleName: alreadyInitialized", "DEL Javadoc", "DEL Block", "DEL IfStatement", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: alreadyInitialized", "DEL MethodDeclaration", "DEL BooleanLiteral: true", "DEL TextElement: .", "DEL SimpleType: HashMap", "DEL SimpleName: transformClassHash", "DEL NumberLiteral: 10", "DEL TagElement: @link", "DEL SimpleName: Transform", "DEL Block", "DEL Assignment: =", "DEL Assignment: =", "DEL ClassInstanceCreation", "DEL SimpleName: HashMap"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL SimpleName: RuntimeException", "DEL TryStatement", "DEL ExpressionStatement", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL CatchClause", "DEL PrimitiveType: void", "DEL SimpleName: transformClassHash", "DEL SimpleName: put", "DEL SimpleName: e", "DEL Block", "DEL ThrowStatement", "DEL SimpleName: algorithmURI", "DEL Block", "DEL MethodDeclaration", "DEL Modifier: static", "DEL Block", "DEL SimpleType: RuntimeException"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement: @param", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL CastExpression", "DEL MethodInvocation", "DEL SimpleName: getImplementingClass", "DEL Block", "DEL TagElement", "DEL SimpleName: get", "DEL SimpleType: Class", "DEL ReturnStatement", "DEL SimpleName: URI", "DEL TagElement: @return", "DEL TextElement:  The name of the class implementing the URI.", "DEL SimpleName: transformClassHash", "DEL SimpleName: Class", "DEL Modifier: private", "DEL SimpleName: URI", "DEL Modifier: static", "DEL MethodDeclaration", "DEL TextElement: Method getImplementingClass", "DEL SimpleName: URI"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL Modifier: static", "DEL Block", "DEL SimpleName: URI", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL SimpleName: getTransformSpi", "DEL ReturnStatement"]}]}}, {"Transform_diff": {"operations": ["Insert ImportDeclaration(7) into CompilationUnit(965) at 3", "Insert QualifiedName: java.util.concurrent.ConcurrentHashMap(6) into ImportDeclaration(7) at 0", "Update QualifiedName: java.util.HashMap(6) to java.util.Map", "Insert FieldDeclaration(101) into TypeDeclaration: class(964) at 6", "Insert MethodDeclaration(703) into TypeDeclaration: class(964) at 13", "Move Javadoc(89) into FieldDeclaration(101) at 0", "Move Modifier: private(80) into FieldDeclaration(101) at 1", "Move Modifier: static(81) into FieldDeclaration(101) at 2", "Insert ParameterizedType: Map<String,TransformSpi>(90) into FieldDeclaration(101) at 3", "Move VariableDeclarationFragment(106) into FieldDeclaration(101) at 4", "Move Javadoc(594) into MethodDeclaration(703) at 0", "Insert SingleMemberAnnotation(559) into MethodDeclaration(703) at 1", "Move Modifier: public(547) into MethodDeclaration(703) at 2", "Move Modifier: static(548) into MethodDeclaration(703) at 3", "Move PrimitiveType: void(549) into MethodDeclaration(703) at 4", "Move SimpleName: register(598) into MethodDeclaration(703) at 5", "Move SingleVariableDeclaration(602) into MethodDeclaration(703) at 6", "Move SingleVariableDeclaration(606) into MethodDeclaration(703) at 7", "Move SimpleType: AlgorithmAlreadyRegisteredException(608) into MethodDeclaration(703) at 8", "Move SimpleType: InvalidTransformException(950) into MethodDeclaration(703) at 9", "Insert Block(702) into MethodDeclaration(703) at 10", "Insert SimpleType: Map(85) into ParameterizedType: Map<String,TransformSpi>(90) at 0", "Move SimpleType: String(946) into ParameterizedType: Map<String,TransformSpi>(90) at 1", "Insert SimpleType: TransformSpi(89) into ParameterizedType: Map<String,TransformSpi>(90) at 2", "Insert SimpleName: SuppressWarnings(557) into SingleMemberAnnotation(559) at 0", "Insert StringLiteral: \"unchecked\"(558) into SingleMemberAnnotation(559) at 1", "Move VariableDeclarationStatement(616) into Block(702) at 0", "Move IfStatement(637) into Block(702) at 1", "Move TryStatement(1049) into Block(702) at 2", "Update SimpleName: HashMap(92) to Map", "Move SimpleName: HashMap(92) into SimpleType: Map(85) at 0", "Update SimpleName: HashMap(100) to TransformSpi", "Move SimpleName: HashMap(100) into SimpleType: TransformSpi(89) at 0", "Insert ParameterizedType: ConcurrentHashMap<String,TransformSpi>(98) into ClassInstanceCreation(99) at 0", "Move SimpleType: TransformSpi(964) into VariableDeclarationStatement(584) at 0", "Insert Block(637) into TryStatement(701) at 0", "Insert CatchClause(658) into TryStatement(701) at 1", "Insert SimpleType: ConcurrentHashMap(93) into ParameterizedType: ConcurrentHashMap<String,TransformSpi>(98) at 0", "Move SimpleType: String(927) into ParameterizedType: ConcurrentHashMap<String,TransformSpi>(98) at 1", "Move SimpleType: TransformSpi(943) into ParameterizedType: ConcurrentHashMap<String,TransformSpi>(98) at 2", "Update SimpleName: registeredClass(611) to transformSpi", "Move VariableDeclarationStatement(959) into Block(637) at 0", "Insert ExpressionStatement(636) into Block(637) at 1", "Move SingleVariableDeclaration(1010) into CatchClause(658) at 0", "Insert Block(657) into CatchClause(658) at 1", "Move SingleVariableDeclaration(1031) into CatchClause(679) at 0", "Move SingleVariableDeclaration(654) into CatchClause(700) at 0", "Update SimpleName: HashMap(103) to ConcurrentHashMap", "Move SimpleName: HashMap(103) into SimpleType: ConcurrentHashMap(93) at 0", "Update SimpleName: getTransformSpi(174) to transformSpiHash", "Insert SimpleName: get(168) into MethodInvocation(170) at 1", "Update SimpleName: getTransformSpi(331) to transformSpiHash", "Insert SimpleName: get(320) into MethodInvocation(322) at 1", "Insert SimpleName: transformSpiHash(579) into MethodInvocation(582) at 0", "Update SimpleName: getImplementingClass(612) to get", "Update SimpleName: registeredClass(617) to transformSpi", "Move SimpleType: Object(1033) into VariableDeclarationStatement(599) at 0", "Insert ParameterizedType: Class<TransformSpi>(612) into VariableDeclarationStatement(628) at 0", "Insert MethodInvocation(635) into ExpressionStatement(636) at 0", "Move VariableDeclarationStatement(995) into Block(657) at 0", "Insert ThrowStatement(656) into Block(657) at 1", "Move ThrowStatement(1046) into Block(678) at 1", "Update SimpleName: e(653) to ex", "Move ThrowStatement(1025) into Block(699) at 1", "Move SimpleType: Class(610) into ParameterizedType: Class<TransformSpi>(612) at 0", "Move SimpleType: TransformSpi(989) into ParameterizedType: Class<TransformSpi>(612) at 1", "Insert SimpleName: transformSpiClass(613) into VariableDeclarationFragment(627) at 0", "Insert CastExpression(626) into VariableDeclarationFragment(627) at 1", "Insert SimpleName: transformSpiHash(629) into MethodInvocation(635) at 0", "Insert SimpleName: put(630) into MethodInvocation(635) at 1", "Insert SimpleName: algorithmURI(631) into MethodInvocation(635) at 2", "Insert MethodInvocation(634) into MethodInvocation(635) at 3", "Move SimpleType: Object(622) into VariableDeclarationStatement(649) at 0", "Insert ClassInstanceCreation(655) into ThrowStatement(656) at 0", "Move SimpleType: Object(952) into VariableDeclarationStatement(691) at 0", "Insert MethodInvocation(596) into ArrayInitializer(597) at 1", "Insert ParameterizedType: Class<TransformSpi>(618) into CastExpression(626) at 0", "Move MethodInvocation(647) into CastExpression(626) at 1", "Update SimpleName: transformClassHash(975) to transformSpiClass", "Move SimpleName: transformClassHash(975) into MethodInvocation(634) at 0", "Update SimpleName: get(976) to newInstance", "Move SimpleName: get(976) into MethodInvocation(634) at 1", "Update SimpleName: tr(987) to exArgs", "Insert Dimension(645) into VariableDeclarationFragment(648) at 1", "Insert ArrayInitializer(647) into VariableDeclarationFragment(648) at 2", "Insert SimpleType: InvalidTransformException(651) into ClassInstanceCreation(655) at 0", "Insert StringLiteral: \"signature.Transform.UnknownTransform\"(652) into ClassInstanceCreation(655) at 1", "Insert SimpleName: exArgs(653) into ClassInstanceCreation(655) at 2", "Insert SimpleName: ex(654) into ClassInstanceCreation(655) at 3", "Insert SimpleName: transformSpi(594) into MethodInvocation(596) at 0", "Insert SimpleName: getClass(595) into MethodInvocation(596) at 1", "Move SimpleType: Class(931) into ParameterizedType: Class<TransformSpi>(618) at 0", "Move SimpleType: TransformSpi(986) into ParameterizedType: Class<TransformSpi>(618) at 1", "Insert SimpleName: algorithmURI(646) into ArrayInitializer(647) at 0", "Insert SimpleName: InvalidTransformException(650) into SimpleType: InvalidTransformException(651) at 0", "Update SimpleName: URI(1015) to algorithmURI", "Update SimpleName: URI(1036) to algorithmURI", "Delete SimpleType: HashMap(104)", "Delete TextElement: Field _alreadyInitialized (77)", "Delete TagElement(78)", "Delete Javadoc(79)", "Delete PrimitiveType: boolean(82)", "Delete SimpleName: alreadyInitialized(83)", "Delete BooleanLiteral: false(84)", "Delete VariableDeclarationFragment(85)", "Delete FieldDeclaration(86)", "Delete Modifier: private(90)", "Delete Modifier: static(91)", "Delete SimpleType: HashMap(93)", "Delete SimpleName: transformClassHash(94)", "Delete NullLiteral(95)", "Delete VariableDeclarationFragment(96)", "Delete FieldDeclaration(97)", "Delete Modifier: private(98)", "Delete Modifier: static(99)", "Delete SimpleType: HashMap(101)", "Delete FieldDeclaration(107)", "Delete NullLiteral(112)", "Delete TextElement: This constructor can only be called from the (256)", "Delete SimpleName: Transforms(257)", "Delete TagElement: @link(258)", "Delete TextElement:  object,(259)", "Delete TextElement: so it's protected.(260)", "Delete TagElement(261)", "Delete SimpleName: registeredClass(626)", "Delete SimpleName: value(953)", "Delete SimpleName: transformSpiHash(954)", "Delete SimpleName: get(955)", "Delete SimpleName: URI(956)", "Delete MethodInvocation(957)", "Delete SimpleName: cl(990)", "Delete SimpleName: newInstance(991)", "Delete MethodInvocation(992)", "Delete CastExpression(993)", "Delete SimpleName: value(960)", "Delete NullLiteral(961)", "Delete InfixExpression: !=(962)", "Delete SimpleName: value(965)", "Delete CastExpression(966)", "Delete ReturnStatement(967)", "Delete Block(968)", "Delete IfStatement(969)", "Delete SimpleName: Class(970)", "Delete SimpleType: Class(971)", "Delete SimpleName: cl(972)", "Delete SimpleName: Class(973)", "Delete SimpleType: Class(974)", "Delete SimpleName: URI(977)", "Delete MethodInvocation(978)", "Delete CastExpression(979)", "Delete VariableDeclarationFragment(980)", "Delete VariableDeclarationStatement(981)", "Delete SimpleName: cl(982)", "Delete NullLiteral(983)", "Delete InfixExpression: !=(984)", "Delete SimpleName: transformSpiHash(996)", "Delete SimpleName: put(997)", "Delete SimpleName: URI(998)", "Delete SimpleName: tr(999)", "Delete MethodInvocation(1000)", "Delete ExpressionStatement(1001)", "Delete SimpleName: tr(1002)", "Delete ReturnStatement(1003)", "Delete Block(1004)", "Delete IfStatement(1005)", "Delete Block(1006)", "Delete TextElement: Initalizes for this (541)", "Delete SimpleName: Transform(542)", "Delete TagElement: @link(543)", "Delete TextElement: .(544)", "Delete TagElement(545)", "Delete Javadoc(546)", "Delete SimpleName: init(550)", "Delete SimpleName: alreadyInitialized(551)", "Delete PrefixExpression: !(552)", "Delete SimpleName: transformClassHash(553)", "Delete SimpleName: HashMap(554)", "Delete SimpleType: HashMap(555)", "Delete NumberLiteral: 10(556)", "Delete ClassInstanceCreation(557)", "Delete Assignment: =(558)", "Delete ExpressionStatement(559)", "Delete SimpleName: alreadyInitialized(560)", "Delete BooleanLiteral: true(561)", "Delete Assignment: =(562)", "Delete ExpressionStatement(563)", "Delete Block(564)", "Delete IfStatement(565)", "Delete Block(566)", "Delete MethodDeclaration(567)", "Delete Modifier: public(595)", "Delete Modifier: static(596)", "Delete PrimitiveType: void(597)", "Delete SimpleName: transformClassHash(638)", "Delete SimpleName: put(639)", "Delete SimpleName: algorithmURI(640)", "Delete MethodInvocation(648)", "Delete ExpressionStatement(649)", "Delete Block(650)", "Delete SimpleName: RuntimeException(655)", "Delete SimpleType: RuntimeException(656)", "Delete SimpleName: e(657)", "Delete ClassInstanceCreation(658)", "Delete ThrowStatement(659)", "Delete Block(660)", "Delete CatchClause(661)", "Delete TryStatement(662)", "Delete Block(663)", "Delete MethodDeclaration(664)", "Delete TextElement: Method getImplementingClass(914)", "Delete TagElement(915)", "Delete SimpleName: URI(916)", "Delete TagElement: @param(917)", "Delete TextElement:  The name of the class implementing the URI.(918)", "Delete TagElement: @return(919)", "Delete Javadoc(920)", "Delete Modifier: private(921)", "Delete Modifier: static(922)", "Delete SimpleName: Class(923)", "Delete SimpleType: Class(924)", "Delete SimpleName: getImplementingClass(925)", "Delete SimpleName: URI(928)", "Delete SingleVariableDeclaration(929)", "Delete SimpleName: transformClassHash(932)", "Delete SimpleName: get(933)", "Delete SimpleName: URI(934)", "Delete MethodInvocation(935)", "Delete CastExpression(936)", "Delete ReturnStatement(937)", "Delete Block(938)", "Delete MethodDeclaration(939)", "Delete Modifier: private(940)", "Delete Modifier: static(941)", "Delete SimpleName: getTransformSpi(944)", "Delete SimpleName: URI(947)", "Delete SingleVariableDeclaration(948)", "Delete NullLiteral(1050)", "Delete ReturnStatement(1051)", "Delete Block(1052)", "Delete MethodDeclaration(1053)"]}}, {"TransformParam_cluster": {"actions": []}}, {"TransformParam_diff": {"operations": []}}, {"TransformSpi_cluster": {"actions": [{"root": "UPDATE from _transformObject to transformObject", "operations": ["UPD SimpleName: _transformObject from _transformObject to transformObject", "UPD SimpleName: _transformObject from _transformObject to transformObject", "UPD SimpleName: _transformObject from _transformObject to transformObject", "UPD SimpleName: _transformObject from _transformObject to transformObject", "UPD SimpleName: _transformObject from _transformObject to transformObject", "UPD SimpleName: _transformObject from _transformObject to transformObject", "UPD SimpleName: _transformObject from _transformObject to transformObject"]}, {"root": "UPDATE from Depeprecated For API compatibility. to Deprecated For API compatibility.", "operations": ["UPD TextElement: Depeprecated For API compatibility. from Depeprecated For API compatibility. to Deprecated For API compatibility."]}]}}, {"TransformSpi_diff": {"operations": ["Update SimpleName: _transformObject(42) to transformObject", "Update SimpleName: _transformObject(115) to transformObject", "Update SimpleName: _transformObject(179) to transformObject", "Update TextElement: Depeprecated For API compatibility.(47) to Deprecated For API compatibility.", "Update SimpleName: _transformObject(148) to transformObject", "Update SimpleName: _transformObject(131) to transformObject", "Update SimpleName: _transformObject(62) to transformObject", "Update SimpleName: _transformObject(207) to transformObject"]}}, {"TransformationException_cluster": {"actions": [{"root": "UPDATE from _msgID to msgID", "operations": ["UPD SimpleName: _msgID from _msgID to msgID", "UPD SimpleName: _msgID from _msgID to msgID", "UPD SimpleName: _msgID from _msgID to msgID", "UPD SimpleName: _msgID from _msgID to msgID", "UPD SimpleName: _msgID from _msgID to msgID", "UPD SimpleName: _msgID from _msgID to msgID", "UPD SimpleName: _msgID from _msgID to msgID", "UPD SimpleName: _msgID from _msgID to msgID", "UPD SimpleName: _msgID from _msgID to msgID", "UPD SimpleName: _msgID from _msgID to msgID", "UPD SimpleName: _msgID from _msgID to msgID", "UPD SimpleName: _msgID from _msgID to msgID"]}, {"root": "UPDATE from _originalException to originalException", "operations": ["UPD SimpleName: _originalException from _originalException to originalException", "UPD SimpleName: _originalException from _originalException to originalException", "UPD SimpleName: _originalException from _originalException to originalException", "UPD SimpleName: _originalException from _originalException to originalException", "UPD SimpleName: _originalException from _originalException to originalException", "UPD SimpleName: _originalException from _originalException to originalException"]}]}}, {"TransformationException_diff": {"operations": ["Update SimpleName: _msgID(37) to msgID", "Update SimpleName: _msgID(54) to msgID", "Update SimpleName: _msgID(77) to msgID", "Update SimpleName: _originalException(81) to originalException", "Update SimpleName: _msgID(101) to msgID", "Update SimpleName: _originalException(110) to originalException", "Update SimpleName: _msgID(30) to msgID", "Update SimpleName: _msgID(39) to msgID", "Update SimpleName: _msgID(45) to msgID", "Update SimpleName: _msgID(61) to msgID", "Update SimpleName: _msgID(68) to msgID", "Update SimpleName: _originalException(70) to originalException", "Update SimpleName: _msgID(83) to msgID", "Update SimpleName: _originalException(84) to originalException", "Update SimpleName: _msgID(90) to msgID", "Update SimpleName: _originalException(94) to originalException", "Update SimpleName: _msgID(112) to msgID", "Update SimpleName: _originalException(114) to originalException"]}}, {"Transforms_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 19"]}, {"root": "INS Modifier: private to FieldDeclaration at 1", "operations": ["INS Modifier: private to FieldDeclaration at 1"]}, {"root": "INS Modifier: private to FieldDeclaration at 0", "operations": ["INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS Block to IfStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS Block to IfStatement at 1"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS Block to IfStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}]}}, {"Transforms_diff": {"operations": ["Move FieldDeclaration(71) into TypeDeclaration: class(935) at 19", "Insert Modifier: private(230) into FieldDeclaration(244) at 1", "Insert Modifier: private(245) into FieldDeclaration(252) at 0", "Insert Block(622) into IfStatement(623) at 1", "Move ExpressionStatement(617) into Block(622) at 0", "Insert Block(395) into IfStatement(396) at 1", "Insert Block(482) into IfStatement(483) at 1", "Move ExpressionStatement(392) into Block(395) at 0", "Move ExpressionStatement(478) into Block(482) at 0"]}}], "commit_stats": [{"total_files": 15, "deleted_files": 1, "testing": "True", "maintenance": "True", "build": "False"}]}