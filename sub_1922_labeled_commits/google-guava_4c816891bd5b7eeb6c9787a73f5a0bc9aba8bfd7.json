{"application": "google-guava", "csha": "4c816891bd5b7eeb6c9787a73f5a0bc9aba8bfd7", "files": [{"AbstractDirectedNodeConnections_cluster": {"actions": [{"root": "INS SimpleType: N to MethodDeclaration at 2", "operations": ["INS SimpleType: N to MethodDeclaration at 2", "INS SimpleName: N to SimpleType: N at 0"]}, {"root": "UPDATE from boolean to void", "operations": ["UPD PrimitiveType: boolean from boolean to void", "UPD PrimitiveType: boolean from boolean to void"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS Block to MethodDeclaration at 6"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS SimpleType: N to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: N to SimpleType: N at 0", "INS SimpleName: previousNode to VariableDeclarationFragment at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationStatement to Block at 1", "INS SimpleName: previousNode to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 2", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SimpleName: previousNode to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: N to VariableDeclarationStatement at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SimpleName: previousNode to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS InfixExpression: == to MethodInvocation at 1", "operations": ["INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: previousNode to InfixExpression: == at 0", "INS InfixExpression: == to MethodInvocation at 1"]}, {"root": "INS InfixExpression: == to MethodInvocation at 1", "operations": ["INS InfixExpression: == to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: previousNode to InfixExpression: == at 0"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: previousNode", "DEL SimpleName: node", "DEL SimpleName: equals", "DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL InfixExpression: !=", "DEL NullLiteral", "DEL BooleanLiteral: false", "DEL IfStatement", "DEL SimpleName: previousNode", "DEL ReturnStatement"]}, {"root": "DEL ReturnStatement", "operations": ["DEL BooleanLiteral: true", "DEL ReturnStatement"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: equals", "DEL SimpleName: previousNode", "DEL SimpleName: node"]}, {"root": "DEL Block", "operations": ["DEL NullLiteral", "DEL Block", "DEL ReturnStatement", "DEL Block", "DEL BooleanLiteral: false", "DEL IfStatement", "DEL BooleanLiteral: true", "DEL SimpleName: previousNode", "DEL ReturnStatement", "DEL InfixExpression: !="]}]}}, {"AbstractDirectedNodeConnections_diff": {"operations": ["Insert SimpleType: N(353) into MethodDeclaration(378) at 2", "Update PrimitiveType: boolean(366) to void", "Update PrimitiveType: boolean(432) to void", "Insert Block(474) into MethodDeclaration(475) at 6", "Insert VariableDeclarationStatement(342) into Block(347) at 2", "Insert SimpleName: N(352) into SimpleType: N(353) at 0", "Insert VariableDeclarationStatement(372) into Block(377) at 1", "Move ExpressionStatement(420) into Block(433) at 4", "Move ExpressionStatement(446) into Block(474) at 0", "Move ExpressionStatement(451) into Block(474) at 1", "Move VariableDeclarationStatement(461) into Block(474) at 2", "Move ExpressionStatement(471) into Block(474) at 3", "Insert SimpleType: N(335) into VariableDeclarationStatement(342) at 0", "Insert VariableDeclarationFragment(341) into VariableDeclarationStatement(342) at 1", "Insert MethodInvocation(345) into ReturnStatement(346) at 0", "Move SimpleType: N(345) into VariableDeclarationStatement(372) at 0", "Insert VariableDeclarationFragment(371) into VariableDeclarationStatement(372) at 1", "Insert MethodInvocation(375) into ReturnStatement(376) at 0", "Insert SimpleName: N(334) into SimpleType: N(335) at 0", "Insert SimpleName: previousNode(336) into VariableDeclarationFragment(341) at 0", "Move MethodInvocation(337) into VariableDeclarationFragment(341) at 1", "Insert SimpleName: checkNotNull(343) into MethodInvocation(345) at 0", "Insert SimpleName: previousNode(344) into MethodInvocation(345) at 1", "Insert SimpleName: previousNode(366) into VariableDeclarationFragment(371) at 0", "Move MethodInvocation(359) into VariableDeclarationFragment(371) at 1", "Insert SimpleName: checkNotNull(373) into MethodInvocation(375) at 0", "Insert SimpleName: previousNode(374) into MethodInvocation(375) at 1", "Insert InfixExpression: ==(430) into MethodInvocation(431) at 1", "Insert InfixExpression: ==(471) into MethodInvocation(472) at 1", "Insert SimpleName: previousNode(428) into InfixExpression: ==(430) at 0", "Insert NullLiteral(429) into InfixExpression: ==(430) at 1", "Insert SimpleName: previousNode(469) into InfixExpression: ==(471) at 0", "Insert NullLiteral(470) into InfixExpression: ==(471) at 1", "Delete SimpleName: node(415)", "Delete SimpleName: equals(416)", "Delete SimpleName: previousNode(417)", "Delete MethodInvocation(418)", "Delete SimpleName: previousNode(411)", "Delete NullLiteral(412)", "Delete InfixExpression: !=(413)", "Delete BooleanLiteral: false(421)", "Delete ReturnStatement(422)", "Delete Block(423)", "Delete IfStatement(424)", "Delete BooleanLiteral: true(425)", "Delete ReturnStatement(426)", "Delete SimpleName: node(466)", "Delete SimpleName: equals(467)", "Delete SimpleName: previousNode(468)", "Delete MethodInvocation(469)", "Delete SimpleName: previousNode(462)", "Delete NullLiteral(463)", "Delete InfixExpression: !=(464)", "Delete BooleanLiteral: false(472)", "Delete ReturnStatement(473)", "Delete Block(474)", "Delete IfStatement(475)", "Delete BooleanLiteral: true(476)", "Delete ReturnStatement(477)", "Delete Block(478)"]}}, {"AbstractUndirectedNodeConnections_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 3"]}, {"root": "UPDATE from com.google.common.base.Preconditions.checkArgument to com.google.common.base.Preconditions.checkState", "operations": ["UPD QualifiedName: com.google.common.base.Preconditions.checkArgument from com.google.common.base.Preconditions.checkArgument to com.google.common.base.Preconditions.checkState"]}, {"root": "INS SimpleType: N to MethodDeclaration at 2", "operations": ["INS SimpleName: N to SimpleType: N at 0", "INS SimpleType: N to MethodDeclaration at 2"]}, {"root": "UPDATE from boolean to void", "operations": ["UPD PrimitiveType: boolean from boolean to void", "UPD PrimitiveType: boolean from boolean to void"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS Block to MethodDeclaration at 6"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationStatement to Block at 1", "INS SimpleName: previousNode to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 2", "MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS SimpleName: isSelfLoop to PrefixExpression: ! at 0", "INS PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: N to VariableDeclarationStatement at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SimpleName: previousNode to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: isSelfLoop to PrefixExpression: ! at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0"]}, {"root": "UPDATE from checkArgument to checkState", "operations": ["UPD SimpleName: checkArgument from checkArgument to checkState"]}, {"root": "INS InfixExpression: == to MethodInvocation at 1", "operations": ["INS InfixExpression: == to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: previousNode to InfixExpression: == at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "DEL SimpleName: isSelfLoop", "operations": ["DEL SimpleName: isSelfLoop"]}, {"root": "DEL SimpleName: isSelfLoop", "operations": ["DEL SimpleName: isSelfLoop"]}, {"root": "DEL ReturnStatement", "operations": ["DEL BooleanLiteral: false", "DEL ReturnStatement"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: equals", "DEL SimpleName: previousNode", "DEL MethodInvocation", "DEL SimpleName: node"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL BooleanLiteral: false", "DEL BooleanLiteral: true", "DEL SimpleName: previousNode", "DEL IfStatement", "DEL NullLiteral", "DEL Block", "DEL ReturnStatement", "DEL InfixExpression: !=", "DEL ReturnStatement"]}]}}, {"AbstractUndirectedNodeConnections_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(297) at 3", "Update QualifiedName: com.google.common.base.Preconditions.checkArgument(2) to com.google.common.base.Preconditions.checkState", "Insert SimpleType: N(202) into MethodDeclaration(227) at 2", "Update PrimitiveType: boolean(222) to void", "Update PrimitiveType: boolean(250) to void", "Insert Block(294) into MethodDeclaration(295) at 6", "Move ReturnStatement(188) into Block(196) at 1", "Insert SimpleName: N(201) into SimpleType: N(202) at 0", "Insert VariableDeclarationStatement(221) into Block(226) at 1", "Move ExpressionStatement(264) into Block(294) at 0", "Move ExpressionStatement(269) into Block(294) at 1", "Move VariableDeclarationStatement(279) into Block(294) at 2", "Move ExpressionStatement(289) into Block(294) at 3", "Insert PrefixExpression: !(187) into IfStatement(193) at 0", "Move SimpleType: N(201) into VariableDeclarationStatement(221) at 0", "Insert VariableDeclarationFragment(220) into VariableDeclarationStatement(221) at 1", "Insert MethodInvocation(224) into ReturnStatement(225) at 0", "Insert PrefixExpression: !(245) into IfStatement(252) at 0", "Insert SimpleName: isSelfLoop(186) into PrefixExpression: !(187) at 0", "Move ReturnStatement(194) into Block(192) at 0", "Insert SimpleName: previousNode(215) into VariableDeclarationFragment(220) at 0", "Move MethodInvocation(215) into VariableDeclarationFragment(220) at 1", "Insert SimpleName: checkNotNull(222) into MethodInvocation(224) at 0", "Insert SimpleName: previousNode(223) into MethodInvocation(224) at 1", "Insert SimpleName: isSelfLoop(244) into PrefixExpression: !(245) at 0", "Insert ExpressionStatement(250) into Block(251) at 0", "Update SimpleName: checkArgument(283) to checkState", "Insert InfixExpression: ==(291) into MethodInvocation(292) at 1", "Move MethodInvocation(243) into ExpressionStatement(250) at 0", "Insert SimpleName: previousNode(289) into InfixExpression: ==(291) at 0", "Insert NullLiteral(290) into InfixExpression: ==(291) at 1", "Delete SimpleName: isSelfLoop(186)", "Delete SimpleName: isSelfLoop(235)", "Delete BooleanLiteral: false(236)", "Delete ReturnStatement(237)", "Delete ReturnStatement(244)", "Delete SimpleName: node(284)", "Delete SimpleName: equals(285)", "Delete SimpleName: previousNode(286)", "Delete MethodInvocation(287)", "Delete SimpleName: previousNode(280)", "Delete NullLiteral(281)", "Delete InfixExpression: !=(282)", "Delete BooleanLiteral: false(290)", "Delete ReturnStatement(291)", "Delete Block(292)", "Delete IfStatement(293)", "Delete BooleanLiteral: true(294)", "Delete ReturnStatement(295)", "Delete Block(296)"]}}, {"DirectedMultiNodeConnections_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: com.google.common.base.Preconditions.checkNotNull to ImportDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5"]}, {"root": "UPDATE from boolean to void", "operations": ["UPD PrimitiveType: boolean from boolean to void", "UPD PrimitiveType: boolean from boolean to void"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 7", "MOV SuperMethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV SuperMethodInvocation to ExpressionStatement at 0", "MOV Block to MethodDeclaration at 6"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SimpleName: node to VariableDeclarationFragment at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 3"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: N to VariableDeclarationStatement at 0"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: checkNotNull to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SuperMethodInvocation to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SuperMethodInvocation to MethodInvocation at 1"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: node", "DEL Block", "DEL IfStatement", "DEL NullLiteral", "DEL InfixExpression: !="]}, {"root": "DEL Block", "operations": ["DEL SimpleName: node", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL InfixExpression: !=", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: node", "DEL NullLiteral"]}, {"root": "DEL ReturnStatement", "operations": ["DEL BooleanLiteral: true", "DEL ReturnStatement"]}, {"root": "DEL Block", "operations": ["DEL IfStatement", "DEL BooleanLiteral: false", "DEL ReturnStatement", "DEL Block"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL BooleanLiteral: true"]}, {"root": "DEL Block", "operations": ["DEL ReturnStatement", "DEL BooleanLiteral: false", "DEL Block", "DEL IfStatement"]}]}}, {"DirectedMultiNodeConnections_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(606) at 1", "Insert QualifiedName: com.google.common.base.Preconditions.checkNotNull(2) into ImportDeclaration(3) at 0", "Move Block(432) into MethodDeclaration(436) at 6", "Move Block(482) into MethodDeclaration(483) at 5", "Update PrimitiveType: boolean(491) to void", "Move Block(534) into MethodDeclaration(530) at 7", "Update PrimitiveType: boolean(543) to void", "Move Block(582) into MethodDeclaration(573) at 6", "Move VariableDeclarationStatement(405) into Block(435) at 0", "Move ReturnStatement(435) into Block(435) at 3", "Insert VariableDeclarationStatement(456) into Block(482) at 0", "Move ReturnStatement(485) into Block(482) at 3", "Insert ExpressionStatement(505) into Block(529) at 0", "Insert ExpressionStatement(548) into Block(572) at 0", "Move SimpleType: N(449) into VariableDeclarationStatement(456) at 0", "Insert VariableDeclarationFragment(455) into VariableDeclarationStatement(456) at 1", "Move SuperMethodInvocation(508) into ExpressionStatement(505) at 0", "Move SuperMethodInvocation(556) into ExpressionStatement(548) at 0", "Insert MethodInvocation(407) into VariableDeclarationFragment(408) at 1", "Insert SimpleName: node(449) into VariableDeclarationFragment(455) at 0", "Insert MethodInvocation(454) into VariableDeclarationFragment(455) at 1", "Insert SimpleName: checkNotNull(402) into MethodInvocation(407) at 0", "Move SuperMethodInvocation(403) into MethodInvocation(407) at 1", "Insert SimpleName: checkNotNull(450) into MethodInvocation(454) at 0", "Move SuperMethodInvocation(453) into MethodInvocation(454) at 1", "Delete SimpleName: node(406)", "Delete NullLiteral(407)", "Delete InfixExpression: !=(408)", "Delete IfStatement(433)", "Delete Block(436)", "Delete SimpleName: node(450)", "Delete VariableDeclarationFragment(454)", "Delete VariableDeclarationStatement(455)", "Delete SimpleName: node(456)", "Delete NullLiteral(457)", "Delete InfixExpression: !=(458)", "Delete IfStatement(483)", "Delete Block(486)", "Delete BooleanLiteral: true(532)", "Delete ReturnStatement(533)", "Delete IfStatement(535)", "Delete BooleanLiteral: false(536)", "Delete ReturnStatement(537)", "Delete Block(538)", "Delete BooleanLiteral: true(580)", "Delete ReturnStatement(581)", "Delete IfStatement(583)", "Delete BooleanLiteral: false(584)", "Delete ReturnStatement(585)", "Delete Block(586)"]}}, {"NodeConnections_cluster": {"actions": [{"root": "UPDATE from boolean to void", "operations": ["UPD PrimitiveType: boolean from boolean to void", "UPD PrimitiveType: boolean from boolean to void"]}, {"root": "UPDATE from In the directed case,  to <p>In the directed case, ", "operations": ["UPD TextElement: In the directed case,  from In the directed case,  to <p>In the directed case, "]}, {"root": "UPDATE from  from the set of incoming edges. Returns the former predecessor node, to  from the set of incoming edges. Returns the former predecessor node.", "operations": ["UPD TextElement:  from the set of incoming edges. Returns the former predecessor node, from  from the set of incoming edges. Returns the former predecessor node, to  from the set of incoming edges. Returns the former predecessor node."]}, {"root": "INS TextElement: <p>In the undirected case, returns  to TagElement at 3", "operations": ["INS TextElement: <p>In the undirected case, returns  to TagElement at 3"]}, {"root": "INS TagElement: @code to TagElement at 4", "operations": ["INS TagElement: @code to TagElement at 4"]}, {"root": "INS TextElement:  if  to TagElement at 5", "operations": ["INS TextElement:  if  to TagElement at 5"]}, {"root": "INS TagElement: @code to TagElement at 6", "operations": ["INS TagElement: @code to TagElement at 6", "INS TextElement:  isSelfLoop to TagElement: @code at 0"]}, {"root": "INS TextElement:  is true. to TagElement at 7", "operations": ["INS TextElement:  is true. to TagElement at 7"]}, {"root": "UPDATE from  from the set of outgoing edges. Returns the former successor node, to  from the set of outgoing edges. Returns the former successor node.", "operations": ["UPD TextElement:  from the set of outgoing edges. Returns the former successor node, from  from the set of outgoing edges. Returns the former successor node, to  from the set of outgoing edges. Returns the former successor node."]}, {"root": "UPDATE from or null if the edge did not exist. to  null", "operations": ["UPD TextElement: or null if the edge did not exist. from or null if the edge did not exist. to  null"]}, {"root": "MOVE from TagElement: @code", "operations": ["MOV TextElement: or null if the edge did not exist. to TagElement: @code at 0"]}, {"root": "DEL TextElement: or null if the edge did not exist.", "operations": ["DEL TextElement: or null if the edge did not exist."]}, {"root": "DEL TextElement: Returns false if the edge already existed.", "operations": ["DEL TextElement: Returns false if the edge already existed."]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: CanIgnoreReturnValue"]}, {"root": "DEL TextElement: Returns false if the edge already existed.", "operations": ["DEL TextElement: Returns false if the edge already existed."]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: CanIgnoreReturnValue", "DEL MarkerAnnotation"]}]}}, {"NodeConnections_diff": {"operations": ["Update PrimitiveType: boolean(153) to void", "Update PrimitiveType: boolean(179) to void", "Update TextElement: In the directed case, (72) to <p>In the directed case, ", "Update TextElement:  from the set of incoming edges. Returns the former predecessor node,(107) to  from the set of incoming edges. Returns the former predecessor node.", "Insert TextElement: <p>In the undirected case, returns (108) into TagElement(115) at 3", "Insert TagElement: @code(110) into TagElement(115) at 4", "Insert TextElement:  if (111) into TagElement(115) at 5", "Insert TagElement: @code(113) into TagElement(115) at 6", "Insert TextElement:  is true.(114) into TagElement(115) at 7", "Update TextElement:  from the set of outgoing edges. Returns the former successor node,(127) to  from the set of outgoing edges. Returns the former successor node.", "Update TextElement: or null if the edge did not exist.(108) to  null", "Move TextElement: or null if the edge did not exist.(108) into TagElement: @code(110) at 0", "Insert TextElement:  isSelfLoop(112) into TagElement: @code(113) at 0", "Delete TextElement: or null if the edge did not exist.(128)", "Delete TextElement: Returns false if the edge already existed.(148)", "Delete SimpleName: CanIgnoreReturnValue(151)", "Delete MarkerAnnotation(152)", "Delete TextElement: Returns false if the edge already existed.(174)", "Delete SimpleName: CanIgnoreReturnValue(177)", "Delete MarkerAnnotation(178)"]}}, {"UndirectedMultiNodeConnections_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: com.google.common.base.Preconditions.checkNotNull to ImportDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5"]}, {"root": "UPDATE from boolean to void", "operations": ["UPD PrimitiveType: boolean from boolean to void", "UPD PrimitiveType: boolean from boolean to void"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 6", "MOV SuperMethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: node to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: checkNotNull to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 3"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: isSelfLoop to PrefixExpression: ! at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: N to VariableDeclarationStatement at 0"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS SimpleName: isSelfLoop to PrefixExpression: ! at 0", "INS PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SuperMethodInvocation to MethodInvocation at 1"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "DEL SimpleName: isSelfLoop", "operations": ["DEL SimpleName: isSelfLoop"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL InfixExpression: !=", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL NullLiteral", "DEL SimpleName: node", "DEL SimpleName: node"]}, {"root": "DEL SimpleName: isSelfLoop", "operations": ["DEL SimpleName: isSelfLoop"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL BooleanLiteral: false"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL BooleanLiteral: true"]}, {"root": "DEL Block", "operations": ["DEL BooleanLiteral: false", "DEL Block", "DEL IfStatement", "DEL ReturnStatement"]}]}}, {"UndirectedMultiNodeConnections_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(451) at 1", "Insert QualifiedName: com.google.common.base.Preconditions.checkNotNull(2) into ImportDeclaration(3) at 0", "Move Block(343) into MethodDeclaration(348) at 5", "Update PrimitiveType: boolean(352) to void", "Update PrimitiveType: boolean(380) to void", "Move Block(419) into MethodDeclaration(418) at 6", "Move ReturnStatement(290) into Block(300) at 1", "Insert VariableDeclarationStatement(321) into Block(347) at 0", "Move ReturnStatement(346) into Block(347) at 3", "Insert ExpressionStatement(393) into Block(417) at 0", "Insert PrefixExpression: !(291) into IfStatement(297) at 0", "Move SimpleType: N(310) into VariableDeclarationStatement(321) at 0", "Insert VariableDeclarationFragment(320) into VariableDeclarationStatement(321) at 1", "Insert PrefixExpression: !(366) into IfStatement(373) at 0", "Move SuperMethodInvocation(393) into ExpressionStatement(393) at 0", "Insert SimpleName: isSelfLoop(290) into PrefixExpression: !(291) at 0", "Move ReturnStatement(296) into Block(296) at 0", "Insert SimpleName: node(314) into VariableDeclarationFragment(320) at 0", "Insert MethodInvocation(319) into VariableDeclarationFragment(320) at 1", "Insert SimpleName: isSelfLoop(365) into PrefixExpression: !(366) at 0", "Insert ExpressionStatement(371) into Block(372) at 0", "Insert SimpleName: checkNotNull(315) into MethodInvocation(319) at 0", "Move SuperMethodInvocation(314) into MethodInvocation(319) at 1", "Move MethodInvocation(373) into ExpressionStatement(371) at 0", "Delete SimpleName: isSelfLoop(288)", "Delete SimpleName: node(311)", "Delete VariableDeclarationFragment(315)", "Delete VariableDeclarationStatement(316)", "Delete SimpleName: node(317)", "Delete NullLiteral(318)", "Delete InfixExpression: !=(319)", "Delete IfStatement(344)", "Delete Block(347)", "Delete SimpleName: isSelfLoop(365)", "Delete BooleanLiteral: false(366)", "Delete ReturnStatement(367)", "Delete ReturnStatement(374)", "Delete BooleanLiteral: true(417)", "Delete ReturnStatement(418)", "Delete IfStatement(420)", "Delete BooleanLiteral: false(421)", "Delete ReturnStatement(422)", "Delete Block(423)"]}}], "commit_stats": [{"total_files": 5, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}