{"application": "apache-nutch", "csha": "1065a5f80a987bfdd4f2fa3c64deb90ef11bdf69", "files": [{"Fetcher_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 23", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS PrimitiveType: boolean to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 23", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: checkTruncated to VariableDeclarationFragment at 0"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS ExpressionStatement to Block at 6", "INS BooleanLiteral: true to MethodInvocation at 3", "INS ThisExpression to FieldAccess at 0", "INS QualifiedName: ParseSegment.SKIP_TRUNCATED to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: checkTruncated to FieldAccess at 1", "INS SimpleName: conf to MethodInvocation at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: getBoolean to MethodInvocation at 1"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS IfStatement to Block at 0", "INS InfixExpression: || to IfStatement at 0", "INS ParenthesizedExpression to InfixExpression: || at 1", "INS SimpleName: ParseSegment to MethodInvocation at 0", "INS SimpleName: checkTruncated to PrefixExpression: ! at 0", "INS SimpleName: content to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS InfixExpression: && to ParenthesizedExpression at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: isTruncated to MethodInvocation at 1", "INS PrefixExpression: ! to InfixExpression: || at 0", "INS SimpleName: checkTruncated to InfixExpression: && at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}]}}, {"Fetcher_diff": {"operations": ["Insert FieldDeclaration(2313) into TypeDeclaration: class(4516) at 23", "Insert Modifier: private(2309) into FieldDeclaration(2313) at 0", "Insert PrimitiveType: boolean(2310) into FieldDeclaration(2313) at 1", "Insert VariableDeclarationFragment(2312) into FieldDeclaration(2313) at 2", "Insert SimpleName: checkTruncated(2311) into VariableDeclarationFragment(2312) at 0", "Insert ExpressionStatement(2372) into Block(2528) at 6", "Insert Assignment: =(2371) into ExpressionStatement(2372) at 0", "Insert FieldAccess(2365) into Assignment: =(2371) at 0", "Insert MethodInvocation(2370) into Assignment: =(2371) at 1", "Insert ThisExpression(2363) into FieldAccess(2365) at 0", "Insert SimpleName: checkTruncated(2364) into FieldAccess(2365) at 1", "Insert SimpleName: conf(2366) into MethodInvocation(2370) at 0", "Insert SimpleName: getBoolean(2367) into MethodInvocation(2370) at 1", "Insert QualifiedName: ParseSegment.SKIP_TRUNCATED(2368) into MethodInvocation(2370) at 2", "Insert BooleanLiteral: true(2369) into MethodInvocation(2370) at 3", "Insert Block(3944) into IfStatement(3945) at 1", "Insert IfStatement(3943) into Block(3944) at 0", "Insert InfixExpression: ||(3882) into IfStatement(3943) at 0", "Move Block(3917) into IfStatement(3943) at 1", "Insert PrefixExpression: !(3874) into InfixExpression: ||(3882) at 0", "Insert ParenthesizedExpression(3881) into InfixExpression: ||(3882) at 1", "Insert SimpleName: checkTruncated(3873) into PrefixExpression: !(3874) at 0", "Insert InfixExpression: &&(3880) into ParenthesizedExpression(3881) at 0", "Insert SimpleName: checkTruncated(3875) into InfixExpression: &&(3880) at 0", "Insert MethodInvocation(3879) into InfixExpression: &&(3880) at 1", "Insert SimpleName: ParseSegment(3876) into MethodInvocation(3879) at 0", "Insert SimpleName: isTruncated(3877) into MethodInvocation(3879) at 1", "Insert SimpleName: content(3878) into MethodInvocation(3879) at 2"]}}, {"ParseSegment_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 1", "MOV ImportDeclaration to CompilationUnit at 1", "MOV ImportDeclaration to CompilationUnit at 18", "MOV ImportDeclaration to CompilationUnit at 18", "MOV ImportDeclaration to CompilationUnit at 2", "MOV ImportDeclaration to CompilationUnit at 7", "MOV ImportDeclaration to CompilationUnit at 7"]}, {"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: java.io.IOException to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: java.util.Iterator to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS QualifiedName: org.apache.hadoop.conf.Configuration to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS ImportDeclaration to CompilationUnit at 6", "INS QualifiedName: org.apache.hadoop.conf.Configured to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS ImportDeclaration to CompilationUnit at 9", "INS QualifiedName: org.apache.hadoop.io.UTF8 to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS ImportDeclaration to CompilationUnit at 10", "INS QualifiedName: org.apache.hadoop.io.Writable to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS ImportDeclaration to CompilationUnit at 11", "INS QualifiedName: org.apache.hadoop.io.WritableComparable to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS QualifiedName: org.apache.hadoop.mapred.FileInputFormat to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 12"]}, {"root": "INS ImportDeclaration to CompilationUnit at 13", "operations": ["INS ImportDeclaration to CompilationUnit at 13", "INS QualifiedName: org.apache.hadoop.mapred.FileOutputFormat to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS QualifiedName: org.apache.hadoop.mapred.JobClient to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 14"]}, {"root": "INS ImportDeclaration to CompilationUnit at 15", "operations": ["INS QualifiedName: org.apache.hadoop.mapred.JobConf to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 15"]}, {"root": "INS ImportDeclaration to CompilationUnit at 17", "operations": ["INS ImportDeclaration to CompilationUnit at 17", "INS QualifiedName: org.apache.hadoop.mapred.OutputCollector to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 18", "operations": ["INS QualifiedName: org.apache.hadoop.mapred.Reducer to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 18"]}, {"root": "INS ImportDeclaration to CompilationUnit at 19", "operations": ["INS QualifiedName: org.apache.hadoop.mapred.Reporter to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 19"]}, {"root": "INS ImportDeclaration to CompilationUnit at 20", "operations": ["INS QualifiedName: org.apache.hadoop.mapred.SequenceFileInputFormat to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 20"]}, {"root": "INS ImportDeclaration to CompilationUnit at 21", "operations": ["INS ImportDeclaration to CompilationUnit at 21", "INS QualifiedName: org.apache.hadoop.util.StringUtils to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 26", "operations": ["INS ImportDeclaration to CompilationUnit at 26", "INS QualifiedName: org.apache.nutch.metadata.Metadata to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 28", "operations": ["INS QualifiedName: org.apache.nutch.net.protocols.Response to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 28"]}, {"root": "INS ImportDeclaration to CompilationUnit at 32", "operations": ["INS ImportDeclaration to CompilationUnit at 32", "INS QualifiedName: org.apache.nutch.util.NutchConfiguration to ImportDeclaration at 0"]}, {"root": "UPDATE from org.apache.hadoop.io to org.apache.hadoop.io.Text", "operations": ["UPD QualifiedName: org.apache.hadoop.io from org.apache.hadoop.io to org.apache.hadoop.io.Text"]}, {"root": "UPDATE from org.apache.hadoop.mapred to org.apache.hadoop.mapred.Mapper", "operations": ["UPD QualifiedName: org.apache.hadoop.mapred from org.apache.hadoop.mapred to org.apache.hadoop.mapred.Mapper"]}, {"root": "UPDATE from org.apache.hadoop.util to org.apache.hadoop.util.Tool", "operations": ["UPD QualifiedName: org.apache.hadoop.util from org.apache.hadoop.util to org.apache.hadoop.util.Tool"]}, {"root": "UPDATE from org.apache.hadoop.conf to org.apache.hadoop.util.ToolRunner", "operations": ["UPD QualifiedName: org.apache.hadoop.conf from org.apache.hadoop.conf to org.apache.hadoop.util.ToolRunner"]}, {"root": "UPDATE from org.apache.nutch.protocol to org.apache.nutch.protocol.Content", "operations": ["UPD QualifiedName: org.apache.nutch.protocol from org.apache.nutch.protocol to org.apache.nutch.protocol.Content"]}, {"root": "UPDATE from org.apache.nutch.util to org.apache.nutch.util.NutchJob", "operations": ["UPD QualifiedName: org.apache.nutch.util from org.apache.nutch.util to org.apache.nutch.util.NutchJob"]}, {"root": "UPDATE from java.io to org.apache.nutch.util.StringUtil", "operations": ["UPD QualifiedName: java.io from java.io to org.apache.nutch.util.StringUtil"]}, {"root": "UPDATE from java.util to org.apache.nutch.util.TimingUtil", "operations": ["UPD QualifiedName: java.util from java.util to org.apache.nutch.util.TimingUtil"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleType: String to FieldDeclaration at 3", "INS StringLiteral: \"parser.skip.truncated\" to VariableDeclarationFragment at 1", "INS Modifier: public to FieldDeclaration at 0", "INS SimpleName: SKIP_TRUNCATED to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS Modifier: static to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 9", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 9", "INS PrimitiveType: boolean to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: skipTruncated to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS InfixExpression: + to MethodInvocation at 2", "INS QualifiedName: contentBytes.length to InfixExpression: > at 1", "INS SimpleName: content to TagElement: @param at 0", "INS SimpleName: lengthStr to InfixExpression: != at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: Metadata to SimpleType: Metadata at 0", "INS CatchClause to TryStatement at 1", "INS SimpleName: trim to MethodInvocation at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS MethodInvocation to InfixExpression: + at 1", "INS InfixExpression: == to IfStatement at 0", "INS ReturnStatement to IfStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to CatchClause at 1", "INS MethodInvocation to Assignment: = at 1", "INS StringLiteral: \" skipped. Content of size \" to InfixExpression: + at 1", "INS StringLiteral: \"Wrong contentlength format for \" to InfixExpression: + at 0", "INS Block to IfStatement at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS IfStatement to Block at 5", "INS Block to MethodDeclaration at 6", "INS SimpleName: lengthStr to MethodInvocation at 2", "INS SimpleName: isTruncated to MethodDeclaration at 4", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: Content to SingleVariableDeclaration at 0", "INS Block to TryStatement at 0", "INS SimpleName: content to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationStatement to Block at 0", "INS Modifier: static to MethodDeclaration at 2", "INS PrimitiveType: boolean to MethodDeclaration at 3", "INS SimpleName: lengthStr to MethodInvocation at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS IfStatement to Block at 1", "INS SimpleType: Metadata to VariableDeclarationStatement at 0", "INS QualifiedName: contentBytes.length to InfixExpression: + at 4", "INS SimpleName: warn to MethodInvocation at 1", "INS SimpleName: getUrl to MethodInvocation at 1", "INS SimpleName: parseInt to MethodInvocation at 1", "INS SimpleName: contentBytes to VariableDeclarationFragment at 0", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS VariableDeclarationStatement to Block at 7", "INS SimpleName: info to MethodInvocation at 1", "INS ReturnStatement to Block at 1", "INS Block to IfStatement at 1", "INS SimpleName: contentLength to Assignment: = at 0", "INS SimpleName: content to MethodInvocation at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: content to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: contentLength to InfixExpression: + at 2", "INS IfStatement to Block at 3", "INS TagElement: @return to Javadoc at 2", "INS SimpleName: String to SimpleType: String at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ArrayType: byte[] to VariableDeclarationStatement at 0", "INS SimpleName: metadata to MethodInvocation at 0", "INS SimpleName: StringUtil to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: NumberFormatException to SimpleType: NumberFormatException at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS BooleanLiteral: false to ReturnStatement at 0", "INS SimpleName: content to MethodInvocation at 0", "INS SimpleType: NumberFormatException to SingleVariableDeclaration at 0", "INS QualifiedName: Response.CONTENT_LENGTH to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: lengthStr to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: get to MethodInvocation at 1", "INS TryStatement to Block at 8", "INS SimpleName: Integer to MethodInvocation at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS BooleanLiteral: true to ReturnStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: e to MethodInvocation at 3", "INS SimpleName: getMetadata to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: metadata to VariableDeclarationFragment at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: content to SingleVariableDeclaration at 1", "INS TextElement:  If the page is truncated <code>true</code>. When it is not, to TagElement: @return at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: getContent to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: + at 0", "INS InfixExpression: > to IfStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: contentLength to InfixExpression: > at 0", "INS ReturnStatement to Block at 10", "INS Dimension to ArrayType: byte[] at 1", "INS TextElement: Checks if the page's content is truncated. to TagElement at 0", "INS VariableDeclarationStatement to Block at 4", "INS BooleanLiteral: false to ReturnStatement at 0", "INS SimpleName: lengthStr to MethodInvocation at 2", "INS SimpleName: metadata to InfixExpression: == at 0", "INS SimpleName: Content to SimpleType: Content at 0", "INS ExpressionStatement to IfStatement at 1", "INS SimpleName: LOG to MethodInvocation at 0", "INS TagElement: @param to Javadoc at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: getUrl to MethodInvocation at 1", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ReturnStatement to IfStatement at 1", "INS IfStatement to Block at 6", "INS SimpleName: contentLength to VariableDeclarationFragment at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS IfStatement to Block at 9", "INS ExpressionStatement to Block at 0", "INS NullLiteral to InfixExpression: == at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: contentBytes to InfixExpression: == at 0", "INS SimpleName: lengthStr to Assignment: = at 0", "INS TextElement: or when it could be determined, <code>false</code>.  to TagElement: @return at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS MethodInvocation to Assignment: = at 1", "INS StringLiteral: \" was truncated to \" to InfixExpression: + at 3"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: getBoolean to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: SKIP_TRUNCATED to MethodInvocation at 2", "INS BooleanLiteral: true to MethodInvocation at 3", "INS SimpleName: skipTruncated to Assignment: = at 0", "INS ExpressionStatement to Block at 2", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: job to MethodInvocation at 0"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS ReturnStatement to Block at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: isTruncated to MethodInvocation at 0", "INS IfStatement to Block at 3", "INS SimpleName: content to MethodInvocation at 1", "INS Block to IfStatement at 1"]}]}}, {"ParseSegment_diff": {"operations": ["Move ImportDeclaration(17) into CompilationUnit(989) at 18", "Move ImportDeclaration(19) into CompilationUnit(989) at 18", "Move ImportDeclaration(21) into CompilationUnit(989) at 7", "Move ImportDeclaration(23) into CompilationUnit(989) at 7", "Move ImportDeclaration(43) into CompilationUnit(989) at 1", "Move ImportDeclaration(47) into CompilationUnit(989) at 1", "Move ImportDeclaration(51) into CompilationUnit(989) at 2", "Insert ImportDeclaration(17) into CompilationUnit(989) at 1", "Insert ImportDeclaration(21) into CompilationUnit(989) at 3", "Insert ImportDeclaration(25) into CompilationUnit(989) at 5", "Insert ImportDeclaration(27) into CompilationUnit(989) at 6", "Insert ImportDeclaration(33) into CompilationUnit(989) at 9", "Insert ImportDeclaration(35) into CompilationUnit(989) at 10", "Insert ImportDeclaration(37) into CompilationUnit(989) at 11", "Insert ImportDeclaration(39) into CompilationUnit(989) at 12", "Insert ImportDeclaration(41) into CompilationUnit(989) at 13", "Insert ImportDeclaration(43) into CompilationUnit(989) at 14", "Insert ImportDeclaration(45) into CompilationUnit(989) at 15", "Insert ImportDeclaration(49) into CompilationUnit(989) at 17", "Insert ImportDeclaration(51) into CompilationUnit(989) at 18", "Insert ImportDeclaration(53) into CompilationUnit(989) at 19", "Insert ImportDeclaration(55) into CompilationUnit(989) at 20", "Insert ImportDeclaration(57) into CompilationUnit(989) at 21", "Insert ImportDeclaration(67) into CompilationUnit(989) at 26", "Insert ImportDeclaration(71) into CompilationUnit(989) at 28", "Insert ImportDeclaration(79) into CompilationUnit(989) at 32", "Insert QualifiedName: java.io.IOException(16) into ImportDeclaration(17) at 0", "Insert QualifiedName: java.util.Iterator(20) into ImportDeclaration(21) at 0", "Insert QualifiedName: org.apache.hadoop.conf.Configuration(24) into ImportDeclaration(25) at 0", "Insert QualifiedName: org.apache.hadoop.conf.Configured(26) into ImportDeclaration(27) at 0", "Update QualifiedName: org.apache.hadoop.io(24) to org.apache.hadoop.io.Text", "Insert QualifiedName: org.apache.hadoop.io.UTF8(32) into ImportDeclaration(33) at 0", "Insert QualifiedName: org.apache.hadoop.io.Writable(34) into ImportDeclaration(35) at 0", "Insert QualifiedName: org.apache.hadoop.io.WritableComparable(36) into ImportDeclaration(37) at 0", "Insert QualifiedName: org.apache.hadoop.mapred.FileInputFormat(38) into ImportDeclaration(39) at 0", "Insert QualifiedName: org.apache.hadoop.mapred.FileOutputFormat(40) into ImportDeclaration(41) at 0", "Insert QualifiedName: org.apache.hadoop.mapred.JobClient(42) into ImportDeclaration(43) at 0", "Insert QualifiedName: org.apache.hadoop.mapred.JobConf(44) into ImportDeclaration(45) at 0", "Update QualifiedName: org.apache.hadoop.mapred(26) to org.apache.hadoop.mapred.Mapper", "Insert QualifiedName: org.apache.hadoop.mapred.OutputCollector(48) into ImportDeclaration(49) at 0", "Insert QualifiedName: org.apache.hadoop.mapred.Reducer(50) into ImportDeclaration(51) at 0", "Insert QualifiedName: org.apache.hadoop.mapred.Reporter(52) into ImportDeclaration(53) at 0", "Insert QualifiedName: org.apache.hadoop.mapred.SequenceFileInputFormat(54) into ImportDeclaration(55) at 0", "Insert QualifiedName: org.apache.hadoop.util.StringUtils(56) into ImportDeclaration(57) at 0", "Update QualifiedName: org.apache.hadoop.util(28) to org.apache.hadoop.util.Tool", "Update QualifiedName: org.apache.hadoop.conf(30) to org.apache.hadoop.util.ToolRunner", "Insert QualifiedName: org.apache.nutch.metadata.Metadata(66) into ImportDeclaration(67) at 0", "Insert QualifiedName: org.apache.nutch.net.protocols.Response(70) into ImportDeclaration(71) at 0", "Update QualifiedName: org.apache.nutch.protocol(34) to org.apache.nutch.protocol.Content", "Insert QualifiedName: org.apache.nutch.util.NutchConfiguration(78) into ImportDeclaration(79) at 0", "Update QualifiedName: org.apache.nutch.util(40) to org.apache.nutch.util.NutchJob", "Update QualifiedName: java.io(44) to org.apache.nutch.util.StringUtil", "Update QualifiedName: java.util(48) to org.apache.nutch.util.TimingUtil", "Insert FieldDeclaration(140) into TypeDeclaration: class(988) at 7", "Insert FieldDeclaration(151) into TypeDeclaration: class(988) at 9", "Insert MethodDeclaration(646) into TypeDeclaration: class(988) at 16", "Insert Modifier: public(132) into FieldDeclaration(140) at 0", "Insert Modifier: static(133) into FieldDeclaration(140) at 1", "Insert Modifier: final(134) into FieldDeclaration(140) at 2", "Insert SimpleType: String(136) into FieldDeclaration(140) at 3", "Insert VariableDeclarationFragment(139) into FieldDeclaration(140) at 4", "Insert Modifier: private(147) into FieldDeclaration(151) at 0", "Insert PrimitiveType: boolean(148) into FieldDeclaration(151) at 1", "Insert VariableDeclarationFragment(150) into FieldDeclaration(151) at 2", "Insert Javadoc(528) into MethodDeclaration(646) at 0", "Insert Modifier: public(529) into MethodDeclaration(646) at 1", "Insert Modifier: static(530) into MethodDeclaration(646) at 2", "Insert PrimitiveType: boolean(531) into MethodDeclaration(646) at 3", "Insert SimpleName: isTruncated(532) into MethodDeclaration(646) at 4", "Insert SingleVariableDeclaration(536) into MethodDeclaration(646) at 5", "Insert Block(645) into MethodDeclaration(646) at 6", "Insert SimpleName: String(135) into SimpleType: String(136) at 0", "Insert SimpleName: SKIP_TRUNCATED(137) into VariableDeclarationFragment(139) at 0", "Insert StringLiteral: \"parser.skip.truncated\"(138) into VariableDeclarationFragment(139) at 1", "Insert SimpleName: skipTruncated(149) into VariableDeclarationFragment(150) at 0", "Insert ExpressionStatement(195) into Block(196) at 2", "Insert IfStatement(287) into Block(519) at 3", "Insert TagElement(522) into Javadoc(528) at 0", "Insert TagElement: @param(524) into Javadoc(528) at 1", "Insert TagElement: @return(527) into Javadoc(528) at 2", "Insert SimpleType: Content(534) into SingleVariableDeclaration(536) at 0", "Insert SimpleName: content(535) into SingleVariableDeclaration(536) at 1", "Insert VariableDeclarationStatement(545) into Block(645) at 0", "Insert IfStatement(551) into Block(645) at 1", "Insert VariableDeclarationStatement(559) into Block(645) at 2", "Insert IfStatement(565) into Block(645) at 3", "Insert VariableDeclarationStatement(574) into Block(645) at 4", "Insert IfStatement(584) into Block(645) at 5", "Insert IfStatement(592) into Block(645) at 6", "Insert VariableDeclarationStatement(596) into Block(645) at 7", "Insert TryStatement(623) into Block(645) at 8", "Insert IfStatement(642) into Block(645) at 9", "Insert ReturnStatement(644) into Block(645) at 10", "Insert Assignment: =(194) into ExpressionStatement(195) at 0", "Insert MethodInvocation(284) into IfStatement(287) at 0", "Insert Block(286) into IfStatement(287) at 1", "Insert TextElement: Checks if the page's content is truncated.(521) into TagElement(522) at 0", "Insert SimpleName: content(523) into TagElement: @param(524) at 0", "Insert TextElement:  If the page is truncated <code>true</code>. When it is not,(525) into TagElement: @return(527) at 0", "Insert TextElement: or when it could be determined, <code>false</code>. (526) into TagElement: @return(527) at 1", "Insert SimpleName: Content(533) into SimpleType: Content(534) at 0", "Insert ArrayType: byte[](539) into VariableDeclarationStatement(545) at 0", "Insert VariableDeclarationFragment(544) into VariableDeclarationStatement(545) at 1", "Insert InfixExpression: ==(548) into IfStatement(551) at 0", "Insert ReturnStatement(550) into IfStatement(551) at 1", "Insert SimpleType: Metadata(553) into VariableDeclarationStatement(559) at 0", "Insert VariableDeclarationFragment(558) into VariableDeclarationStatement(559) at 1", "Insert InfixExpression: ==(562) into IfStatement(565) at 0", "Insert ReturnStatement(564) into IfStatement(565) at 1", "Insert SimpleType: String(567) into VariableDeclarationStatement(574) at 0", "Insert VariableDeclarationFragment(573) into VariableDeclarationStatement(574) at 1", "Insert InfixExpression: !=(577) into IfStatement(584) at 0", "Insert ExpressionStatement(583) into IfStatement(584) at 1", "Insert MethodInvocation(588) into IfStatement(592) at 0", "Insert Block(591) into IfStatement(592) at 1", "Insert PrimitiveType: int(593) into VariableDeclarationStatement(596) at 0", "Insert VariableDeclarationFragment(595) into VariableDeclarationStatement(596) at 1", "Insert Block(604) into TryStatement(623) at 0", "Insert CatchClause(622) into TryStatement(623) at 1", "Insert InfixExpression: >(626) into IfStatement(642) at 0", "Insert Block(641) into IfStatement(642) at 1", "Insert BooleanLiteral: false(643) into ReturnStatement(644) at 0", "Insert SimpleName: skipTruncated(188) into Assignment: =(194) at 0", "Insert MethodInvocation(193) into Assignment: =(194) at 1", "Insert SimpleName: isTruncated(282) into MethodInvocation(284) at 0", "Insert SimpleName: content(283) into MethodInvocation(284) at 1", "Insert ReturnStatement(285) into Block(286) at 0", "Insert PrimitiveType: byte(537) into ArrayType: byte[](539) at 0", "Insert Dimension(538) into ArrayType: byte[](539) at 1", "Insert SimpleName: contentBytes(540) into VariableDeclarationFragment(544) at 0", "Insert MethodInvocation(543) into VariableDeclarationFragment(544) at 1", "Insert SimpleName: contentBytes(546) into InfixExpression: ==(548) at 0", "Insert NullLiteral(547) into InfixExpression: ==(548) at 1", "Insert BooleanLiteral: false(549) into ReturnStatement(550) at 0", "Insert SimpleName: Metadata(552) into SimpleType: Metadata(553) at 0", "Insert SimpleName: metadata(554) into VariableDeclarationFragment(558) at 0", "Insert MethodInvocation(557) into VariableDeclarationFragment(558) at 1", "Insert SimpleName: metadata(560) into InfixExpression: ==(562) at 0", "Insert NullLiteral(561) into InfixExpression: ==(562) at 1", "Insert BooleanLiteral: false(563) into ReturnStatement(564) at 0", "Insert SimpleName: String(566) into SimpleType: String(567) at 0", "Insert SimpleName: lengthStr(568) into VariableDeclarationFragment(573) at 0", "Insert MethodInvocation(572) into VariableDeclarationFragment(573) at 1", "Insert SimpleName: lengthStr(575) into InfixExpression: !=(577) at 0", "Insert NullLiteral(576) into InfixExpression: !=(577) at 1", "Insert Assignment: =(582) into ExpressionStatement(583) at 0", "Insert SimpleName: StringUtil(585) into MethodInvocation(588) at 0", "Insert SimpleName: isEmpty(586) into MethodInvocation(588) at 1", "Insert SimpleName: lengthStr(587) into MethodInvocation(588) at 2", "Insert ReturnStatement(590) into Block(591) at 0", "Insert SimpleName: contentLength(594) into VariableDeclarationFragment(595) at 0", "Insert ExpressionStatement(603) into Block(604) at 0", "Insert SingleVariableDeclaration(608) into CatchClause(622) at 0", "Insert Block(621) into CatchClause(622) at 1", "Insert SimpleName: contentLength(624) into InfixExpression: >(626) at 0", "Insert QualifiedName: contentBytes.length(625) into InfixExpression: >(626) at 1", "Insert ExpressionStatement(638) into Block(641) at 0", "Insert ReturnStatement(640) into Block(641) at 1", "Insert SimpleName: job(189) into MethodInvocation(193) at 0", "Insert SimpleName: getBoolean(190) into MethodInvocation(193) at 1", "Insert SimpleName: SKIP_TRUNCATED(191) into MethodInvocation(193) at 2", "Insert BooleanLiteral: true(192) into MethodInvocation(193) at 3", "Insert SimpleName: content(541) into MethodInvocation(543) at 0", "Insert SimpleName: getContent(542) into MethodInvocation(543) at 1", "Insert SimpleName: content(555) into MethodInvocation(557) at 0", "Insert SimpleName: getMetadata(556) into MethodInvocation(557) at 1", "Insert SimpleName: metadata(569) into MethodInvocation(572) at 0", "Insert SimpleName: get(570) into MethodInvocation(572) at 1", "Insert QualifiedName: Response.CONTENT_LENGTH(571) into MethodInvocation(572) at 2", "Insert SimpleName: lengthStr(578) into Assignment: =(582) at 0", "Insert MethodInvocation(581) into Assignment: =(582) at 1", "Insert BooleanLiteral: false(589) into ReturnStatement(590) at 0", "Insert Assignment: =(602) into ExpressionStatement(603) at 0", "Insert SimpleType: NumberFormatException(606) into SingleVariableDeclaration(608) at 0", "Insert SimpleName: e(607) into SingleVariableDeclaration(608) at 1", "Insert ExpressionStatement(618) into Block(621) at 0", "Insert ReturnStatement(620) into Block(621) at 1", "Insert MethodInvocation(637) into ExpressionStatement(638) at 0", "Insert BooleanLiteral: true(639) into ReturnStatement(640) at 0", "Insert SimpleName: lengthStr(579) into MethodInvocation(581) at 0", "Insert SimpleName: trim(580) into MethodInvocation(581) at 1", "Insert SimpleName: contentLength(597) into Assignment: =(602) at 0", "Insert MethodInvocation(601) into Assignment: =(602) at 1", "Insert SimpleName: NumberFormatException(605) into SimpleType: NumberFormatException(606) at 0", "Insert MethodInvocation(617) into ExpressionStatement(618) at 0", "Insert BooleanLiteral: false(619) into ReturnStatement(620) at 0", "Insert SimpleName: LOG(627) into MethodInvocation(637) at 0", "Insert SimpleName: info(628) into MethodInvocation(637) at 1", "Insert InfixExpression: +(636) into MethodInvocation(637) at 2", "Insert SimpleName: Integer(598) into MethodInvocation(601) at 0", "Insert SimpleName: parseInt(599) into MethodInvocation(601) at 1", "Insert SimpleName: lengthStr(600) into MethodInvocation(601) at 2", "Insert SimpleName: LOG(609) into MethodInvocation(617) at 0", "Insert SimpleName: warn(610) into MethodInvocation(617) at 1", "Insert InfixExpression: +(615) into MethodInvocation(617) at 2", "Insert SimpleName: e(616) into MethodInvocation(617) at 3", "Insert MethodInvocation(631) into InfixExpression: +(636) at 0", "Insert StringLiteral: \" skipped. Content of size \"(632) into InfixExpression: +(636) at 1", "Insert SimpleName: contentLength(633) into InfixExpression: +(636) at 2", "Insert StringLiteral: \" was truncated to \"(634) into InfixExpression: +(636) at 3", "Insert QualifiedName: contentBytes.length(635) into InfixExpression: +(636) at 4", "Insert StringLiteral: \"Wrong contentlength format for \"(611) into InfixExpression: +(615) at 0", "Insert MethodInvocation(614) into InfixExpression: +(615) at 1", "Insert SimpleName: content(629) into MethodInvocation(631) at 0", "Insert SimpleName: getUrl(630) into MethodInvocation(631) at 1", "Insert SimpleName: content(612) into MethodInvocation(614) at 0", "Insert SimpleName: getUrl(613) into MethodInvocation(614) at 1"]}}], "commit_stats": [{"total_files": 4, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}