{"application": "Netflix-hollow", "csha": "805d4f4f7b9c6bd71c27e2105c052875b48f245b", "files": [{"HollowPrefixIndex_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: com.netflix.hollow.core.memory.encoding.FixedLengthElementArray to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "UPDATE from com.netflix.hollow.core.read.dataaccess.HollowTypeDataAccess to com.netflix.hollow.core.memory.pool.WastefulRecycler", "operations": ["UPD QualifiedName: com.netflix.hollow.core.read.dataaccess.HollowTypeDataAccess from com.netflix.hollow.core.read.dataaccess.HollowTypeDataAccess to com.netflix.hollow.core.memory.pool.WastefulRecycler"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4"]}, {"root": "INS SimpleType: Tst to MethodDeclaration at 1", "operations": ["INS SimpleType: Tst to MethodDeclaration at 1", "INS SimpleName: Tst to SimpleType: Tst at 0"]}, {"root": "UPDATE from add to addOrdinal", "operations": ["UPD SimpleName: add from add to addOrdinal", "UPD SimpleName: updateIndex from updateIndex to addOrdinal", "UPD SimpleName: query from query to addOrdinal", "UPD SimpleName: add from add to addOrdinal", "UPD SimpleName: updateIndex from updateIndex to addOrdinal"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS Modifier: static to TypeDeclaration: class at 1", "operations": ["INS Modifier: static to TypeDeclaration: class at 1"]}, {"root": "INS EnumDeclaration to TypeDeclaration: class at 3", "operations": ["INS EnumConstantDeclaration to EnumDeclaration at 2", "INS SimpleName: Middle to EnumConstantDeclaration at 0", "INS SimpleName: NodeType to EnumDeclaration at 0", "INS SimpleName: Right to EnumConstantDeclaration at 0", "INS EnumDeclaration to TypeDeclaration: class at 3", "INS EnumConstantDeclaration to EnumDeclaration at 1", "INS SimpleName: Left to EnumConstantDeclaration at 0", "INS EnumConstantDeclaration to EnumDeclaration at 3"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: bitsPerNode to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS PrimitiveType: int to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 5", "MOV MethodDeclaration to TypeDeclaration: class at 19", "MOV FieldDeclaration to TypeDeclaration: class at 17"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 6", "INS SimpleName: bitsForChildPointer to VariableDeclarationFragment at 0", "INS PrimitiveType: int to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 7", "INS Modifier: private to FieldDeclaration at 0", "INS PrimitiveType: int to FieldDeclaration at 1", "INS SimpleName: bitsForOrdinalSetPointer to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 8", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS PrimitiveType: int to FieldDeclaration at 1", "INS SimpleName: bitsForOrdinalSetSize to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 9", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 9", "INS PrimitiveType: int to FieldDeclaration at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 10", "INS Modifier: private to FieldDeclaration at 0", "INS PrimitiveType: int to FieldDeclaration at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 11", "operations": ["INS PrimitiveType: int to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 11", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 12", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 12", "INS SimpleName: ordinalSetPointerOffset to VariableDeclarationFragment at 0", "INS PrimitiveType: int to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 13", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: ordinalSetSizeOffset to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 13", "INS PrimitiveType: int to FieldDeclaration at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 14", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: bitsPerOrdinal to VariableDeclarationFragment at 0", "INS PrimitiveType: int to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 14"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 15", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 15", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0", "INS PrimitiveType: int to FieldDeclaration at 1", "INS SimpleName: bitsPerOrdinalSet to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 16", "operations": ["INS PrimitiveType: int to FieldDeclaration at 1", "INS SimpleName: maxNodes to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 16"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 18", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 18", "INS SimpleName: indexTracker to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS PrimitiveType: int to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: rightChildOffset to Assignment: = at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ReturnStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: offset to Assignment: = at 0", "INS SimpleName: nodeType to SingleVariableDeclaration at 1", "INS SimpleName: leftChildOffset to Assignment: = at 1", "INS IfStatement to Block at 1", "INS IfStatement to IfStatement at 2", "INS ExpressionStatement to IfStatement at 2", "INS SimpleType: NodeType to SingleVariableDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS QualifiedName: NodeType.Middle to MethodInvocation at 2", "INS SimpleName: middleChildOffset to Assignment: = at 1", "INS SimpleName: offset to Assignment: = at 0", "INS SimpleName: offset to Assignment: = at 0", "INS SimpleName: nodeType to MethodInvocation at 0", "INS SimpleName: nodeType to MethodInvocation at 0", "INS MethodInvocation to IfStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS MethodInvocation to IfStatement at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: getChildOffset to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS Assignment: = to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: offset to ReturnStatement at 0", "INS QualifiedName: NodeType.Left to MethodInvocation at 2", "INS PrimitiveType: int to MethodDeclaration at 1", "INS ExpressionStatement to IfStatement at 1", "INS ExpressionStatement to IfStatement at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 21", "operations": ["INS SimpleType: NodeType to SingleVariableDeclaration at 0", "INS SimpleName: getChildOffset to MethodInvocation at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: bitsForChildPointer to MethodInvocation at 3", "INS SimpleName: NodeType to SimpleType: NodeType at 0", "INS PrimitiveType: int to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS ParenthesizedExpression to InfixExpression: + at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Block to MethodDeclaration at 5", "INS SimpleName: offset to InfixExpression: + at 1", "INS InfixExpression: * to ParenthesizedExpression at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: nodeType to SingleVariableDeclaration at 1", "INS SimpleName: currentNode to InfixExpression: * at 0", "INS CastExpression to ReturnStatement at 0", "INS SimpleName: offset to VariableDeclarationFragment at 0", "INS SimpleName: nodeType to MethodInvocation at 1", "INS SimpleName: currentNode to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: getElementValue to MethodInvocation at 1", "INS MethodInvocation to CastExpression at 1", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SimpleName: getIndex to MethodDeclaration at 2", "INS Modifier: private to MethodDeclaration at 0", "INS PrimitiveType: int to CastExpression at 0", "INS SimpleName: bitsPerNode to InfixExpression: * at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: nodes to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 22", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS ParenthesizedExpression to InfixExpression: + at 0", "INS SimpleName: bitsForOrdinalSetPointer to MethodInvocation at 3", "INS SimpleName: nodes to MethodInvocation at 0", "INS SimpleName: ch to MethodInvocation at 4", "INS SimpleName: nodes to MethodInvocation at 0", "INS SimpleName: index to InfixExpression: * at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: setElementValue to MethodInvocation at 1", "INS SimpleName: index to MethodInvocation at 4", "INS SimpleName: setDataForNewNode to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 22", "INS SimpleName: index to InfixExpression: * at 0", "INS SimpleName: bitsPerNode to InfixExpression: * at 1", "INS SimpleName: bitsPerNode to InfixExpression: * at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: index to SingleVariableDeclaration at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: setElementValue to MethodInvocation at 1", "INS InfixExpression: * to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS SimpleName: bitsPerKey to MethodInvocation at 3", "INS Block to MethodDeclaration at 5", "INS InfixExpression: * to ParenthesizedExpression at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: ordinalSetPointerOffset to InfixExpression: + at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: offset to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ReturnStatement to Block at 5", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: currentNode to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: nodeType to SingleVariableDeclaration at 1", "INS SimpleName: getChildOffset to MethodInvocation at 0", "INS SimpleName: ch to MethodInvocation at 2", "INS SimpleName: ch to SingleVariableDeclaration at 1", "INS SimpleName: indexForNode to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 23", "INS PrimitiveType: char to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setDataForNewNode to MethodInvocation at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: createNode to MethodDeclaration at 1", "INS SimpleType: NodeType to SingleVariableDeclaration at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: indexForNode to ReturnStatement at 0", "INS SimpleName: indexTracker to VariableDeclarationFragment at 1", "INS SimpleName: nodeType to MethodInvocation at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS PrimitiveType: int to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 24", "operations": ["INS SimpleName: getIndex to MethodInvocation at 0", "INS SimpleName: getKey to MethodDeclaration at 2", "INS SimpleType: NodeType to SingleVariableDeclaration at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: childIndex to VariableDeclarationFragment at 0", "INS SimpleName: getKey to MethodInvocation at 0", "INS PrimitiveType: long to MethodDeclaration at 1", "INS Block to MethodDeclaration at 5", "INS VariableDeclarationStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS CastExpression to ReturnStatement at 0", "INS SimpleName: childIndex to MethodInvocation at 1", "INS SimpleName: type to SingleVariableDeclaration at 1", "INS PrimitiveType: char to CastExpression at 0", "INS MethodDeclaration to TypeDeclaration: class at 24", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: nodeIndex to MethodInvocation at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: nodeIndex to SingleVariableDeclaration at 1", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: type to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 32", "operations": ["INS SimpleName: ordinalSetSize to InfixExpression: + at 0", "INS SimpleName: bitsPerOrdinalSet to InfixExpression: * at 1", "INS SimpleName: nodes to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS InfixExpression: * to ParenthesizedExpression at 0", "INS MethodDeclaration to TypeDeclaration: class at 32", "INS SimpleName: bitsPerOrdinal to MethodInvocation at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ParenthesizedExpression to MethodInvocation at 4", "INS SimpleName: ordinalSetSizeOffset to InfixExpression: + at 1", "INS SimpleName: nodeIndex to InfixExpression: * at 0", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ParenthesizedExpression to InfixExpression: + at 1", "INS SimpleName: ordinalSet to MethodInvocation at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS SimpleName: ordinalSetPointerOffset to InfixExpression: + at 1", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SimpleName: nodes to MethodInvocation at 0", "INS SimpleName: bitsForOrdinalSetPointer to MethodInvocation at 3", "INS SimpleName: getElementValue to MethodInvocation at 1", "INS SimpleName: nodeIndex to SingleVariableDeclaration at 1", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS SimpleName: setElementValue to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS InfixExpression: * to ParenthesizedExpression at 0", "INS ExpressionStatement to Block at 3", "INS InfixExpression: + to ParenthesizedExpression at 0", "INS SimpleName: bitsPerNode to InfixExpression: * at 1", "INS SimpleName: ordinalSetIndex to InfixExpression: * at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: bitsPerOrdinal to InfixExpression: * at 1", "INS ParenthesizedExpression to InfixExpression: + at 0", "INS SimpleName: ordinalSetSize to InfixExpression: * at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: nodeIndex to InfixExpression: * at 0", "INS SimpleName: bitsForOrdinalSetSize to MethodInvocation at 3", "INS SimpleName: bitsPerNode to InfixExpression: * at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setElementValue to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: ordinal to SingleVariableDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: ordinal to MethodInvocation at 4", "INS SimpleName: ordinalSetIndex to VariableDeclarationFragment at 0", "INS InfixExpression: * to ParenthesizedExpression at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ParenthesizedExpression to InfixExpression: + at 0", "INS InfixExpression: * to ParenthesizedExpression at 0", "INS Block to MethodDeclaration at 5", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ParenthesizedExpression to InfixExpression: + at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 33", "operations": ["INS SimpleName: getElementValue to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 2", "INS Modifier: private to MethodDeclaration at 1", "INS PrimitiveType: int to CastExpression at 0", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: getElementValue to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: ordinals to MethodInvocation at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS EnhancedForStatement to Block at 3", "INS Block to IfStatement at 1", "INS SimpleName: ordinalSetSize to InfixExpression: - at 0", "INS IfStatement to Block at 4", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS Block to DoStatement at 0", "INS SimpleName: current to VariableDeclarationFragment at 0", "INS MethodInvocation to CastExpression at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS InfixExpression: - to ParenthesizedExpression at 0", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS CastExpression to VariableDeclarationFragment at 1", "INS ParenthesizedExpression to InfixExpression: + at 1", "INS SimpleName: bitsPerNode to InfixExpression: * at 1", "INS SimpleName: getElementValue to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: ordinal to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS ParenthesizedExpression to InfixExpression: + at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: bitsForOrdinalSetSize to MethodInvocation at 3", "INS InfixExpression: + to MethodInvocation at 2", "INS PrimitiveType: int to CastExpression at 0", "INS SimpleName: ordinalSetIndex to InfixExpression: * at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS InfixExpression: < to DoStatement at 1", "INS SimpleName: bitsForOrdinalSetPointer to MethodInvocation at 3", "INS SimpleName: current to InfixExpression: * at 0", "INS SimpleName: ordinalSetSizeOffset to InfixExpression: + at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: nodes to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: bitsPerNode to InfixExpression: * at 1", "INS InfixExpression: * to ParenthesizedExpression at 0", "INS SimpleName: ordinalSet to MethodInvocation at 0", "INS SimpleName: bitsPerOrdinal to InfixExpression: * at 1", "INS PostfixExpression: ++ to ExpressionStatement at 0", "INS SimpleName: ordinalSetIndex to VariableDeclarationFragment at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: bitsPerOrdinal to MethodInvocation at 3", "INS MethodDeclaration to TypeDeclaration: class at 33", "INS ParenthesizedExpression to InfixExpression: < at 1", "INS InfixExpression: * to ParenthesizedExpression at 0", "INS SimpleName: ordinalSetPointerOffset to InfixExpression: + at 1", "INS InfixExpression: * to InfixExpression: + at 0", "INS SimpleName: query to MethodDeclaration at 3", "INS SimpleName: ordinalSetSize to VariableDeclarationFragment at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: current to InfixExpression: * at 0", "INS InfixExpression: * to InfixExpression: + at 0", "INS DoStatement to Block at 4", "INS SimpleName: nodes to MethodInvocation at 0", "INS MethodInvocation to CastExpression at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: ordinal to VariableDeclarationFragment at 0", "INS SimpleName: add to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 8", "operations": ["INS VariableDeclarationStatement to Block at 8", "INS SimpleName: maxOrdinalValue to VariableDeclarationFragment at 0", "INS SimpleName: readStateForValue to MethodInvocation at 0", "INS SimpleName: maxOrdinal to MethodInvocation at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 9", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: Tst to ClassInstanceCreation at 0", "INS SimpleName: cardinality to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 9", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: readStateForKey to MethodInvocation at 0", "INS SimpleName: Tst to SimpleType: Tst at 0", "INS MethodInvocation to ClassInstanceCreation at 2", "INS SimpleName: getPopulatedOrdinals to MethodInvocation at 1", "INS SimpleName: prefixIndex to VariableDeclarationFragment at 0", "INS SimpleName: maxOrdinalValue to ClassInstanceCreation at 1", "INS SimpleName: ordinals to MethodInvocation at 0", "INS SimpleName: cardinality to MethodInvocation at 1", "INS MethodInvocation to ClassInstanceCreation at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS ReturnStatement to Block at 12", "operations": ["INS ReturnStatement to Block at 12", "INS SimpleName: prefixIndex to ReturnStatement at 0"]}, {"root": "INS SimpleType: Tst to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: Tst to SingleVariableDeclaration at 0", "INS SimpleName: Tst to SimpleType: Tst at 0"]}, {"root": "UPDATE from prefixTree to tst", "operations": ["UPD SimpleName: prefixTree from prefixTree to tst", "UPD SimpleName: toAdd from toAdd to tst"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2"]}, {"root": "UPDATE from char to int", "operations": ["UPD PrimitiveType: char from char to int", "UPD PrimitiveType: char from char to int"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 2", "MOV VariableDeclarationFragment to FieldDeclaration at 2", "MOV VariableDeclarationFragment to FieldDeclaration at 2", "MOV Modifier: private to FieldDeclaration at 0"]}, {"root": "INS SimpleType: FixedLengthElementArray to FieldDeclaration at 1", "operations": ["INS SimpleType: FixedLengthElementArray to FieldDeclaration at 1"]}, {"root": "INS VariableDeclarationFragment to FieldDeclaration at 2", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: nodes to VariableDeclarationFragment at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement:    max ordinal value for value type stored. to TagElement: @param at 1", "INS SimpleName: cardinalityValues to TagElement: @param at 0", "INS TextElement:  total cardinality of the values to TagElement: @param at 1", "INS SimpleName: cardinalityKeys to TagElement: @param at 0", "INS TextElement:    total cardinality of the keys to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 3", "INS SimpleName: maxOrdinalValue to TagElement: @param at 0", "INS TagElement to Javadoc at 0", "INS TagElement: @param to Javadoc at 2", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @param to Javadoc at 1", "INS TextElement: Create new prefix index. Represents a ternary search tree. to TagElement at 0"]}, {"root": "INS SimpleName: Tst to MethodDeclaration at 2", "operations": ["INS SimpleName: Tst to MethodDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SimpleName: maxOrdinalValue to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS PrimitiveType: int to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: cardinalityKeys to SingleVariableDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Block to EnhancedForStatement at 2"]}, {"root": "INS PrimitiveType: long to MethodDeclaration at 2", "operations": ["INS PrimitiveType: long to MethodDeclaration at 2"]}, {"root": "INS SimpleName: getKey to MethodDeclaration at 3", "operations": ["INS SimpleName: getKey to MethodDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: nodeIndex to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV SimpleName: query to MethodDeclaration at 2", "MOV ParameterizedType: Set<Integer> to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Modifier: private to MethodDeclaration at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: HollowObjectSchema to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Tst to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from key to bitsPerKey", "operations": ["UPD SimpleName: key from key to bitsPerKey"]}, {"root": "UPDATE from left to leftChildOffset", "operations": ["UPD SimpleName: left from left to leftChildOffset"]}, {"root": "UPDATE from middle to middleChildOffset", "operations": ["UPD SimpleName: middle from middle to middleChildOffset"]}, {"root": "UPDATE from right to rightChildOffset", "operations": ["UPD SimpleName: right from right to rightChildOffset"]}, {"root": "UPDATE from Set to FixedLengthElementArray", "operations": ["UPD SimpleName: Set from Set to FixedLengthElementArray", "UPD SimpleName: HashSet from HashSet to FixedLengthElementArray"]}, {"root": "MOVE from SimpleType: FixedLengthElementArray", "operations": ["MOV SimpleName: Set to SimpleType: FixedLengthElementArray at 0"]}, {"root": "UPDATE from ordinals to ordinalSet", "operations": ["UPD SimpleName: ordinals from ordinals to ordinalSet"]}, {"root": "UPDATE from key to cardinalityValues", "operations": ["UPD SimpleName: key from key to cardinalityValues"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: maxNodes to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS InfixExpression: * to Assignment: = at 1", "INS SimpleName: cardinalityKeys to InfixExpression: * at 0", "INS NumberLiteral: 256 to InfixExpression: * at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: bitsPerOrdinal to Assignment: = at 0", "INS NumberLiteral: 32 to InfixExpression: - at 0", "INS MethodInvocation to InfixExpression: - at 1", "INS InfixExpression: - to Assignment: = at 1", "INS SimpleName: numberOfLeadingZeros to MethodInvocation at 1", "INS SimpleName: maxOrdinalValue to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS SimpleName: Integer to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: cardinalityValues to InfixExpression: * at 0", "INS SimpleName: bitsPerOrdinalSet to Assignment: = at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: bitsPerOrdinal to InfixExpression: * at 1", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: * to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS NumberLiteral: 16 to Assignment: = at 1", "INS ExpressionStatement to Block at 3", "INS SimpleName: bitsPerKey to Assignment: = at 0"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: bitsForChildPointer to Assignment: = at 0", "INS ExpressionStatement to Block at 4", "INS SimpleName: numberOfLeadingZeros to MethodInvocation at 1", "INS SimpleName: Integer to MethodInvocation at 0", "INS SimpleName: maxNodes to MethodInvocation at 2", "INS NumberLiteral: 32 to InfixExpression: - at 0", "INS InfixExpression: - to Assignment: = at 1", "INS MethodInvocation to InfixExpression: - at 1"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS InfixExpression: - to Assignment: = at 1", "INS SimpleName: Integer to MethodInvocation at 0", "INS SimpleName: bitsForOrdinalSetPointer to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS NumberLiteral: 32 to InfixExpression: - at 0", "INS ExpressionStatement to Block at 5", "INS SimpleName: numberOfLeadingZeros to MethodInvocation at 1", "INS SimpleName: maxNodes to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: - at 1"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: - to Assignment: = at 1", "INS SimpleName: numberOfLeadingZeros to MethodInvocation at 1", "INS ExpressionStatement to Block at 6", "INS SimpleName: bitsPerOrdinalSet to MethodInvocation at 2", "INS SimpleName: bitsForOrdinalSetSize to Assignment: = at 0", "INS NumberLiteral: 32 to InfixExpression: - at 0", "INS MethodInvocation to InfixExpression: - at 1", "INS SimpleName: Integer to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 8", "operations": ["INS SimpleName: FixedLengthElementArray to SimpleType: FixedLengthElementArray at 0", "INS ExpressionStatement to Block at 8", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: FixedLengthElementArray to ClassInstanceCreation at 0", "INS SimpleName: nodes to Assignment: = at 0", "INS SimpleName: maxNodes to InfixExpression: * at 1", "INS ClassInstanceCreation to Assignment: = at 1", "INS QualifiedName: WastefulRecycler.DEFAULT_INSTANCE to ClassInstanceCreation at 1", "INS InfixExpression: * to ClassInstanceCreation at 2", "INS SimpleName: bitsPerNode to InfixExpression: * at 0"]}, {"root": "INS ExpressionStatement to Block at 10", "operations": ["INS ExpressionStatement to Block at 10", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: indexTracker to Assignment: = at 0", "INS NumberLiteral: 0 to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 11", "operations": ["INS SimpleName: bitsPerKey to Assignment: = at 1", "INS ExpressionStatement to Block at 11", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: leftChildOffset to Assignment: = at 0"]}, {"root": "INS ExpressionStatement to Block at 12", "operations": ["INS SimpleName: leftChildOffset to InfixExpression: + at 0", "INS ExpressionStatement to Block at 12", "INS SimpleName: middleChildOffset to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: bitsForChildPointer to InfixExpression: + at 1", "INS InfixExpression: + to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 13", "operations": ["INS ExpressionStatement to Block at 13", "INS SimpleName: middleChildOffset to InfixExpression: + at 0", "INS SimpleName: rightChildOffset to Assignment: = at 0", "INS SimpleName: bitsForChildPointer to InfixExpression: + at 1", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: + to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 14", "operations": ["INS ParenthesizedExpression to InfixExpression: + at 1", "INS ExpressionStatement to Block at 14", "INS InfixExpression: * to ParenthesizedExpression at 0", "INS NumberLiteral: 3 to InfixExpression: * at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: bitsForChildPointer to InfixExpression: * at 1", "INS InfixExpression: + to Assignment: = at 1", "INS SimpleName: ordinalSetPointerOffset to Assignment: = at 0", "INS SimpleName: bitsPerKey to InfixExpression: + at 0"]}, {"root": "INS ExpressionStatement to Block at 15", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: ordinalSetSizeOffset to Assignment: = at 0", "INS ExpressionStatement to Block at 15", "INS SimpleName: bitsForOrdinalSetPointer to InfixExpression: + at 1", "INS SimpleName: ordinalSetPointerOffset to InfixExpression: + at 0", "INS InfixExpression: + to Assignment: = at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 3"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleName: currentIndex to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS EnhancedForStatement to Block at 2", "operations": ["INS Block to EnhancedForStatement at 2", "INS EnhancedForStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 5", "MOV IfStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from typeDataAccess to objectSchema", "operations": ["UPD SimpleName: typeDataAccess from typeDataAccess to objectSchema"]}, {"root": "INS CastExpression to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: getSchema to MethodInvocation at 1", "INS CastExpression to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from Object to NodeType", "operations": ["UPD SimpleName: Object from Object to NodeType", "UPD SimpleName: Node from Node to NodeType", "UPD SimpleName: Object from Object to NodeType"]}, {"root": "MOVE from SimpleType: NodeType", "operations": ["MOV SimpleName: Node to SimpleType: NodeType at 0"]}, {"root": "MOVE from SimpleType: NodeType", "operations": ["MOV SimpleName: Object to SimpleType: NodeType at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setElementValue to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS ParenthesizedExpression to InfixExpression: + at 0", "INS SimpleName: bitsPerNode to InfixExpression: * at 1", "INS InfixExpression: * to ParenthesizedExpression at 0", "INS SimpleName: nodes to MethodInvocation at 0", "INS SimpleName: indexForNode to MethodInvocation at 4", "INS SimpleName: offset to InfixExpression: + at 1", "INS SimpleName: currentNode to InfixExpression: * at 0", "INS SimpleName: bitsForChildPointer to MethodInvocation at 3"]}, {"root": "INS PostfixExpression: ++ to ExpressionStatement at 0", "operations": ["INS PostfixExpression: ++ to ExpressionStatement at 0", "INS SimpleName: indexTracker to PostfixExpression: ++ at 0"]}, {"root": "MOVE from SimpleType: NodeType", "operations": ["MOV SimpleName: Object to SimpleType: NodeType at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: bitsPerKey to MethodInvocation at 3", "INS InfixExpression: * to MethodInvocation at 2", "INS SimpleName: getElementValue to MethodInvocation at 1", "INS SimpleName: nodes to MethodInvocation at 0", "INS SimpleName: nodeIndex to InfixExpression: * at 0", "INS SimpleName: bitsPerNode to InfixExpression: * at 1"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0", "MOV MethodInvocation to EnhancedForStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0", "MOV MethodInvocation to EnhancedForStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: HollowObjectSchema to CastExpression at 0"]}, {"root": "INS SimpleName: bitsPerNode to Assignment: = at 0", "operations": ["INS SimpleName: bitsPerNode to Assignment: = at 0"]}, {"root": "INS InfixExpression: + to Assignment: = at 1", "operations": ["INS ParenthesizedExpression to InfixExpression: + at 1", "INS InfixExpression: * to ParenthesizedExpression at 0", "INS InfixExpression: + to Assignment: = at 1", "INS SimpleName: bitsForOrdinalSetSize to InfixExpression: + at 2", "INS SimpleName: bitsForChildPointer to InfixExpression: * at 1", "INS SimpleName: bitsPerKey to InfixExpression: + at 0", "INS SimpleName: bitsForOrdinalSetPointer to InfixExpression: + at 3", "INS NumberLiteral: 3 to InfixExpression: * at 0"]}, {"root": "INS SimpleName: ordinalSet to Assignment: = at 0", "operations": ["INS SimpleName: ordinalSet to Assignment: = at 0"]}, {"root": "UPDATE from root to offset", "operations": ["UPD SimpleName: root from root to offset"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: root to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from lock to indexForNode", "operations": ["UPD SimpleName: lock from lock to indexForNode"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: lock to VariableDeclarationFragment at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1"]}, {"root": "INS SimpleName: ordinalSetSize to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: ordinalSetSize to VariableDeclarationFragment at 0"]}, {"root": "INS CastExpression to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: ordinalSetSizeOffset to InfixExpression: + at 1", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleName: getElementValue to MethodInvocation at 1", "INS SimpleName: bitsForOrdinalSetSize to MethodInvocation at 3", "INS SimpleName: bitsPerNode to InfixExpression: * at 1", "INS MethodInvocation to CastExpression at 1", "INS ParenthesizedExpression to InfixExpression: + at 0", "INS SimpleName: nodes to MethodInvocation at 0", "INS PrimitiveType: int to CastExpression at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS InfixExpression: * to ParenthesizedExpression at 0", "INS SimpleName: nodeIndex to InfixExpression: * at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS SimpleName: current to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getKey to MethodInvocation at 0", "INS SimpleName: currentValue to VariableDeclarationFragment at 0"]}, {"root": "INS MethodInvocation to InfixExpression: != at 0", "operations": ["INS MethodInvocation to InfixExpression: != at 0", "INS SimpleName: getKey to MethodInvocation at 0", "INS SimpleName: current to MethodInvocation at 1"]}, {"root": "INS NumberLiteral: 0 to InfixExpression: != at 1", "operations": ["INS NumberLiteral: 0 to InfixExpression: != at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2"]}, {"root": "INS SimpleName: prefixIndex to MethodInvocation at 2", "operations": ["INS SimpleName: prefixIndex to MethodInvocation at 2"]}, {"root": "INS SimpleType: FixedLengthElementArray to ClassInstanceCreation at 0", "operations": ["INS SimpleType: FixedLengthElementArray to ClassInstanceCreation at 0"]}, {"root": "INS QualifiedName: WastefulRecycler.DEFAULT_INSTANCE to ClassInstanceCreation at 1", "operations": ["INS QualifiedName: WastefulRecycler.DEFAULT_INSTANCE to ClassInstanceCreation at 1"]}, {"root": "INS InfixExpression: * to ClassInstanceCreation at 2", "operations": ["INS SimpleName: maxNodes to InfixExpression: * at 1", "INS InfixExpression: * to ClassInstanceCreation at 2", "INS SimpleName: bitsPerOrdinalSet to InfixExpression: * at 0"]}, {"root": "INS PrimitiveType: long to VariableDeclarationStatement at 0", "operations": ["INS PrimitiveType: long to VariableDeclarationStatement at 0"]}, {"root": "INS ReturnStatement to IfStatement at 1", "operations": ["INS SimpleName: ordinals to ReturnStatement at 0", "INS ReturnStatement to IfStatement at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: readStateEngine to MethodInvocation at 0", "MOV SimpleName: type to MethodInvocation at 2", "MOV SimpleName: getTypeDataAccess to MethodInvocation at 1"]}, {"root": "UPDATE from getTypeDataAccess to getTypeState", "operations": ["UPD SimpleName: getTypeDataAccess from getTypeDataAccess to getTypeState"]}, {"root": "MOVE from SimpleType: FixedLengthElementArray", "operations": ["MOV SimpleName: HashSet to SimpleType: FixedLengthElementArray at 0"]}, {"root": "UPDATE from current to currentValue", "operations": ["UPD SimpleName: current from current to currentValue", "UPD SimpleName: current from current to currentValue", "UPD SimpleName: current from current to currentValue"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getKey to MethodInvocation at 0", "INS SimpleName: currentIndex to MethodInvocation at 1"]}, {"root": "INS NumberLiteral: 0 to InfixExpression: != at 1", "operations": ["INS NumberLiteral: 0 to InfixExpression: != at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getKey to MethodInvocation at 0", "INS SimpleName: current to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: currentValue to Assignment: = at 0"]}, {"root": "UPDATE from prefix to ordinalSetSize", "operations": ["UPD SimpleName: prefix from prefix to ordinalSetSize"]}, {"root": "INS NumberLiteral: 0 to InfixExpression: == at 1", "operations": ["INS NumberLiteral: 0 to InfixExpression: == at 1"]}, {"root": "UPDATE from ch to i", "operations": ["UPD SimpleName: ch from ch to i", "UPD SimpleName: ch from ch to i"]}, {"root": "MOVE from InfixExpression: <", "operations": ["MOV SimpleName: ch to InfixExpression: < at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: ch to MethodInvocation at 2", "INS SimpleName: currentIndex to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setDataForNewNode to MethodInvocation at 0"]}, {"root": "INS PostfixExpression: ++ to ExpressionStatement at 0", "operations": ["INS PostfixExpression: ++ to ExpressionStatement at 0", "INS SimpleName: indexTracker to PostfixExpression: ++ at 0"]}, {"root": "INS NumberLiteral: 0 to InfixExpression: != at 1", "operations": ["INS NumberLiteral: 0 to InfixExpression: != at 1"]}, {"root": "INS SimpleName: currentValue to InfixExpression: != at 0", "operations": ["INS SimpleName: currentValue to InfixExpression: != at 0"]}, {"root": "INS SimpleName: currentValue to InfixExpression: != at 0", "operations": ["INS SimpleName: currentValue to InfixExpression: != at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS SimpleName: currentIndex to MethodInvocation at 1", "INS SimpleName: currentValue to Assignment: = at 0", "INS SimpleName: getKey to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 3", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS SimpleName: currentIndex to MethodInvocation at 2", "operations": ["INS SimpleName: currentIndex to MethodInvocation at 2"]}, {"root": "INS SimpleName: currentIndex to MethodInvocation at 2", "operations": ["INS SimpleName: currentIndex to MethodInvocation at 2"]}, {"root": "INS SimpleName: currentValue to InfixExpression: < at 1", "operations": ["INS SimpleName: currentValue to InfixExpression: < at 1"]}, {"root": "INS PrimitiveType: int to VariableDeclarationStatement at 0", "operations": ["INS PrimitiveType: int to VariableDeclarationStatement at 0"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS SimpleName: current to MethodInvocation at 1", "INS QualifiedName: NodeType.Left to MethodInvocation at 2", "INS SimpleName: getIndex to MethodInvocation at 0"]}, {"root": "INS SimpleName: currentValue to InfixExpression: > at 1", "operations": ["INS SimpleName: currentValue to InfixExpression: > at 1"]}, {"root": "UPDATE from child to childIndex", "operations": ["UPD SimpleName: child from child to childIndex", "UPD SimpleName: child from child to childIndex", "UPD SimpleName: child from child to childIndex", "UPD SimpleName: child from child to childIndex", "UPD SimpleName: child from child to childIndex"]}, {"root": "INS SimpleName: currentValue to InfixExpression: < at 1", "operations": ["INS SimpleName: currentValue to InfixExpression: < at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS QualifiedName: NodeType.Left to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: leftIndex to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getIndex to MethodInvocation at 0", "INS SimpleName: currentIndex to MethodInvocation at 1"]}, {"root": "UPDATE from current to currentIndex", "operations": ["UPD SimpleName: current from current to currentIndex"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS SimpleName: current to MethodInvocation at 1", "INS SimpleName: getIndex to MethodInvocation at 0", "INS QualifiedName: NodeType.Right to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS QualifiedName: NodeType.Middle to MethodInvocation at 2", "INS SimpleName: current to MethodInvocation at 1", "INS SimpleName: getIndex to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "INS SimpleName: currentValue to InfixExpression: > at 1", "operations": ["INS SimpleName: currentValue to InfixExpression: > at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: currentIndex to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getIndex to MethodInvocation at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: rightIndex to VariableDeclarationFragment at 0", "INS QualifiedName: NodeType.Right to MethodInvocation at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: middleIndex to VariableDeclarationFragment at 0", "INS QualifiedName: NodeType.Middle to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getIndex to MethodInvocation at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: currentIndex to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS SimpleName: leftIndex to InfixExpression: == at 0", "operations": ["INS SimpleName: leftIndex to InfixExpression: == at 0"]}, {"root": "INS NumberLiteral: 0 to InfixExpression: == at 1", "operations": ["INS NumberLiteral: 0 to InfixExpression: == at 1"]}, {"root": "INS SimpleName: leftIndex to Assignment: = at 1", "operations": ["INS SimpleName: leftIndex to Assignment: = at 1"]}, {"root": "INS SimpleName: leftIndex to Assignment: = at 0", "operations": ["INS SimpleName: leftIndex to Assignment: = at 0"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS QualifiedName: NodeType.Left to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: currentIndex to MethodInvocation at 1", "INS SimpleName: ch to MethodInvocation at 3", "INS SimpleName: createNode to MethodInvocation at 0"]}, {"root": "INS SimpleName: rightIndex to InfixExpression: == at 0", "operations": ["INS SimpleName: rightIndex to InfixExpression: == at 0"]}, {"root": "INS NumberLiteral: 0 to InfixExpression: == at 1", "operations": ["INS NumberLiteral: 0 to InfixExpression: == at 1"]}, {"root": "INS SimpleName: rightIndex to Assignment: = at 1", "operations": ["INS SimpleName: rightIndex to Assignment: = at 1"]}, {"root": "INS SimpleName: middleIndex to InfixExpression: == at 0", "operations": ["INS SimpleName: middleIndex to InfixExpression: == at 0"]}, {"root": "INS NumberLiteral: 0 to InfixExpression: == at 1", "operations": ["INS NumberLiteral: 0 to InfixExpression: == at 1"]}, {"root": "INS SimpleName: middleIndex to Assignment: = at 1", "operations": ["INS SimpleName: middleIndex to Assignment: = at 1"]}, {"root": "UPDATE from current to bitsPerOrdinalSet", "operations": ["UPD SimpleName: current from current to bitsPerOrdinalSet"]}, {"root": "MOVE from InfixExpression: *", "operations": ["MOV SimpleName: current to InfixExpression: * at 1"]}, {"root": "MOVE from InfixExpression: *", "operations": ["MOV SimpleName: ch to InfixExpression: * at 0"]}, {"root": "INS SimpleName: rightIndex to Assignment: = at 0", "operations": ["INS SimpleName: rightIndex to Assignment: = at 0"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS SimpleName: createNode to MethodInvocation at 0", "INS QualifiedName: NodeType.Right to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: currentIndex to MethodInvocation at 1", "INS SimpleName: ch to MethodInvocation at 3"]}, {"root": "INS SimpleName: middleIndex to Assignment: = at 0", "operations": ["INS SimpleName: middleIndex to Assignment: = at 0"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS SimpleName: currentIndex to MethodInvocation at 1", "INS SimpleName: createNode to MethodInvocation at 0", "INS SimpleName: ch to MethodInvocation at 3", "INS MethodInvocation to Assignment: = at 1", "INS QualifiedName: NodeType.Middle to MethodInvocation at 2"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ClassInstanceCreation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement"]}, {"root": "DEL SimpleType: HollowTypeDataAccess", "operations": ["DEL SimpleName: HollowTypeDataAccess", "DEL SimpleType: HollowTypeDataAccess"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: getSchema", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL CastExpression", "DEL SimpleName: typeDataAccess", "DEL MethodInvocation", "DEL SimpleName: objectSchema"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL SimpleName: position", "DEL VariableDeclarationStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL SimpleName: position", "DEL InfixExpression: +", "DEL NumberLiteral: 0", "DEL SimpleType: IllegalArgumentException", "DEL ClassInstanceCreation", "DEL SimpleName: field", "DEL StringLiteral: \" in the given type:\"", "DEL InfixExpression: <", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: type", "DEL ThrowStatement", "DEL StringLiteral: \"Cannot find the field:\""]}, {"root": "DEL SimpleName: position", "operations": ["DEL SimpleName: position"]}, {"root": "DEL PrimitiveType: void", "operations": ["DEL PrimitiveType: void"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: toAdd", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: key", "DEL SimpleName: ordinal", "DEL SimpleName: remove", "DEL MethodInvocation", "DEL SimpleName: prefixTree", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: updateIndex", "DEL BooleanLiteral: true", "DEL ExpressionStatement", "DEL SimpleName: ordinal", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: ordinal", "DEL MethodInvocation", "DEL SimpleName: updateIndex", "DEL BooleanLiteral: false"]}, {"root": "DEL ParameterizedType: Set<Integer>", "operations": ["DEL SimpleType: Set", "DEL SimpleType: Integer", "DEL ParameterizedType: Set<Integer>", "DEL SimpleName: Integer"]}, {"root": "DEL SimpleName: Node", "operations": ["DEL SimpleName: Node"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: key", "DEL ThisExpression", "DEL FieldAccess"]}, {"root": "DEL SimpleName: key", "operations": ["DEL SimpleName: key"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL SimpleName: ordinals", "DEL ThisExpression"]}, {"root": "DEL ParameterizedType: HashSet<>", "operations": ["DEL SimpleType: HashSet", "DEL ParameterizedType: HashSet<>"]}, {"root": "DEL Assignment: =", "operations": ["DEL Assignment: =", "DEL NumberLiteral: 0", "DEL FieldAccess", "DEL ThisExpression", "DEL SimpleName: size"]}, {"root": "DEL Assignment: =", "operations": ["DEL FieldAccess", "DEL NullLiteral", "DEL Assignment: =", "DEL SimpleName: root", "DEL ThisExpression"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Modifier: private", "DEL SimpleType: Node", "DEL SimpleName: Node", "DEL TypeDeclaration: class", "DEL FieldDeclaration", "DEL SimpleName: Node"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL FieldDeclaration", "DEL SimpleType: Node", "DEL VariableDeclarationFragment"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: size", "DEL PrimitiveType: int", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL FieldDeclaration", "DEL SimpleType: Object", "DEL VariableDeclarationFragment"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: lock", "DEL MethodDeclaration", "DEL Modifier: protected", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleType: Object", "DEL FieldAccess", "DEL ExpressionStatement", "DEL Assignment: =", "DEL ThisExpression", "DEL SimpleName: Tst"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: get total number of keys inserted in the tree.", "DEL TagElement", "DEL Javadoc"]}, {"root": "DEL PrimitiveType: int", "operations": ["DEL PrimitiveType: int"]}, {"root": "DEL SimpleName: getSize", "operations": ["DEL SimpleName: getSize"]}, {"root": "DEL SimpleName: size", "operations": ["DEL SimpleName: size"]}, {"root": "DEL Modifier: synchronized", "operations": ["DEL Modifier: synchronized"]}, {"root": "DEL SimpleType: Node", "operations": ["DEL SimpleType: Node", "DEL SimpleName: Node"]}, {"root": "DEL SimpleName: root", "operations": ["DEL SimpleName: root"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL QualifiedName: current.key", "operations": ["DEL QualifiedName: current.key"]}, {"root": "DEL SimpleType: Node", "operations": ["DEL SimpleType: Node", "DEL SimpleName: Node"]}, {"root": "DEL QualifiedName: current.key", "operations": ["DEL QualifiedName: current.key"]}, {"root": "DEL QualifiedName: current.left", "operations": ["DEL QualifiedName: current.left"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL QualifiedName: current.left", "operations": ["DEL QualifiedName: current.left"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleType: Node", "DEL ClassInstanceCreation", "DEL SimpleName: ch", "DEL SimpleName: Node"]}, {"root": "DEL QualifiedName: current.left", "operations": ["DEL QualifiedName: current.left"]}, {"root": "DEL QualifiedName: current.key", "operations": ["DEL QualifiedName: current.key"]}, {"root": "DEL QualifiedName: current.right", "operations": ["DEL QualifiedName: current.right"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL QualifiedName: current.right", "operations": ["DEL QualifiedName: current.right"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleType: Node", "DEL SimpleName: Node", "DEL ClassInstanceCreation", "DEL SimpleName: ch"]}, {"root": "DEL QualifiedName: current.right", "operations": ["DEL QualifiedName: current.right"]}, {"root": "DEL QualifiedName: current.middle", "operations": ["DEL QualifiedName: current.middle"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL QualifiedName: current.middle", "operations": ["DEL QualifiedName: current.middle"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: Node", "DEL SimpleType: Node", "DEL ClassInstanceCreation", "DEL SimpleName: ch"]}, {"root": "DEL QualifiedName: current.middle", "operations": ["DEL QualifiedName: current.middle"]}, {"root": "DEL QualifiedName: current.ordinals", "operations": ["DEL QualifiedName: current.ordinals"]}, {"root": "DEL Assignment: =", "operations": ["DEL Assignment: =", "DEL SimpleName: Node", "DEL ThisExpression", "DEL ClassInstanceCreation", "DEL SimpleName: root", "DEL FieldAccess", "DEL SimpleType: Node", "DEL SimpleName: ch"]}, {"root": "DEL IfStatement", "operations": ["DEL InfixExpression: ==", "DEL IfStatement", "DEL ThisExpression", "DEL FieldAccess", "DEL NullLiteral", "DEL SimpleName: root", "DEL Block"]}, {"root": "DEL Assignment: =", "operations": ["DEL FieldAccess", "DEL SimpleName: root", "DEL SimpleName: current", "DEL Assignment: =", "DEL ThisExpression"]}, {"root": "DEL QualifiedName: current.ordinals", "operations": ["DEL QualifiedName: current.ordinals"]}, {"root": "DEL SynchronizedStatement", "operations": ["DEL EnhancedForStatement", "DEL SynchronizedStatement", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: lock", "DEL Block", "DEL PostfixExpression: ++", "DEL SimpleName: size"]}, {"root": "DEL SimpleName: current", "operations": ["DEL SimpleName: current"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL ThisExpression", "DEL SimpleName: root"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL QualifiedName: current.key", "operations": ["DEL QualifiedName: current.key"]}, {"root": "DEL QualifiedName: current.key", "operations": ["DEL QualifiedName: current.key"]}, {"root": "DEL QualifiedName: current.left", "operations": ["DEL QualifiedName: current.left"]}, {"root": "DEL QualifiedName: current.key", "operations": ["DEL QualifiedName: current.key"]}, {"root": "DEL QualifiedName: current.right", "operations": ["DEL QualifiedName: current.right"]}, {"root": "DEL QualifiedName: current.middle", "operations": ["DEL QualifiedName: current.middle"]}, {"root": "DEL SimpleName: current", "operations": ["DEL SimpleName: current"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL ThrowStatement", "operations": ["DEL SimpleName: IllegalArgumentException", "DEL ClassInstanceCreation", "DEL SimpleType: IllegalArgumentException", "DEL ThrowStatement", "DEL StringLiteral: \"Cannot remove null prefix from the tree\""]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: Node", "DEL MethodInvocation", "DEL SimpleName: Node", "DEL QualifiedName: current.ordinals", "DEL SimpleName: toLowerCase", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL IfStatement", "DEL Block", "DEL Block", "DEL SimpleName: toCharArray", "DEL MethodDeclaration", "DEL SimpleName: ordinals", "DEL SimpleName: prefix", "DEL ExpressionStatement", "DEL EnhancedForStatement", "DEL Assignment: ="]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: for the given prefix, remove all the references of the ordinal in the tree.", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: remove", "DEL Block", "DEL Block", "DEL TagElement: @param", "DEL TagElement", "DEL InfixExpression: ==", "DEL SimpleName: remove", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: ch", "DEL SingleVariableDeclaration", "DEL SimpleName: current", "DEL QualifiedName: current.right", "DEL InfixExpression: <", "DEL SimpleName: current", "DEL SimpleType: String", "DEL SimpleType: Node", "DEL ExpressionStatement", "DEL SimpleName: ch", "DEL EnhancedForStatement", "DEL SimpleName: prefix", "DEL Block", "DEL QualifiedName: current.left", "DEL InfixExpression: >", "DEL WhileStatement", "DEL IfStatement", "DEL Assignment: =", "DEL QualifiedName: current.key", "DEL MethodDeclaration", "DEL Assignment: =", "DEL Modifier: synchronized", "DEL SimpleName: Node", "DEL QualifiedName: current.ordinals", "DEL SimpleName: root", "DEL SimpleName: current", "DEL SimpleName: current", "DEL ExpressionStatement", "DEL NullLiteral", "DEL SimpleName: ordinal", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: ordinal", "DEL SimpleName: prefix", "DEL Modifier: private", "DEL ThisExpression", "DEL SynchronizedStatement", "DEL QualifiedName: current.key", "DEL SimpleName: ordinal", "DEL QualifiedName: current.key", "DEL FieldAccess", "DEL InfixExpression: !=", "DEL Block", "DEL InfixExpression: !=", "DEL Javadoc", "DEL PrimitiveType: void", "DEL SimpleName: lock", "DEL InfixExpression: &&", "DEL QualifiedName: current.middle", "DEL TagElement: @param", "DEL QualifiedName: current.key", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL VariableDeclarationFragment"]}]}}, {"HollowPrefixIndex_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(1358) at 1", "Insert QualifiedName: com.netflix.hollow.core.memory.encoding.FixedLengthElementArray(2) into ImportDeclaration(3) at 0", "Update QualifiedName: com.netflix.hollow.core.read.dataaccess.HollowTypeDataAccess(2) to com.netflix.hollow.core.memory.pool.WastefulRecycler", "Move ExpressionStatement(111) into Block(131) at 4", "Insert SimpleType: Tst(159) into MethodDeclaration(385) at 1", "Update SimpleName: updateIndex(387) to addOrdinal", "Move MarkerAnnotation(492) into MethodDeclaration(479) at 0", "Move SingleVariableDeclaration(498) into MethodDeclaration(479) at 5", "Move MarkerAnnotation(477) into MethodDeclaration(489) at 0", "Move SingleVariableDeclaration(483) into MethodDeclaration(489) at 4", "Insert Modifier: static(498) into TypeDeclaration: class(1356) at 1", "Insert EnumDeclaration(507) into TypeDeclaration: class(1356) at 3", "Insert FieldDeclaration(512) into TypeDeclaration: class(1356) at 4", "Move FieldDeclaration(521) into TypeDeclaration: class(1356) at 5", "Insert FieldDeclaration(522) into TypeDeclaration: class(1356) at 6", "Insert FieldDeclaration(527) into TypeDeclaration: class(1356) at 7", "Insert FieldDeclaration(532) into TypeDeclaration: class(1356) at 8", "Insert FieldDeclaration(537) into TypeDeclaration: class(1356) at 9", "Insert FieldDeclaration(542) into TypeDeclaration: class(1356) at 10", "Insert FieldDeclaration(547) into TypeDeclaration: class(1356) at 11", "Insert FieldDeclaration(552) into TypeDeclaration: class(1356) at 12", "Insert FieldDeclaration(557) into TypeDeclaration: class(1356) at 13", "Insert FieldDeclaration(562) into TypeDeclaration: class(1356) at 14", "Insert FieldDeclaration(567) into TypeDeclaration: class(1356) at 15", "Insert FieldDeclaration(572) into TypeDeclaration: class(1356) at 16", "Move FieldDeclaration(540) into TypeDeclaration: class(1356) at 17", "Insert FieldDeclaration(585) into TypeDeclaration: class(1356) at 18", "Move MethodDeclaration(562) into TypeDeclaration: class(1356) at 19", "Insert MethodDeclaration(765) into TypeDeclaration: class(1356) at 20", "Insert MethodDeclaration(797) into TypeDeclaration: class(1356) at 21", "Insert MethodDeclaration(829) into TypeDeclaration: class(1356) at 22", "Insert MethodDeclaration(877) into TypeDeclaration: class(1356) at 23", "Insert MethodDeclaration(903) into TypeDeclaration: class(1356) at 24", "Insert MethodDeclaration(1166) into TypeDeclaration: class(1356) at 27", "Insert MethodDeclaration(1355) into TypeDeclaration: class(1356) at 28", "Insert SimpleName: Tst(158) into SimpleType: Tst(159) at 0", "Insert VariableDeclarationStatement(336) into Block(384) at 8", "Insert VariableDeclarationStatement(353) into Block(384) at 9", "Insert ReturnStatement(383) into Block(384) at 12", "Insert SimpleType: Tst(393) into SingleVariableDeclaration(395) at 0", "Update SimpleName: toAdd(392) to tst", "Insert ExpressionStatement(435) into Block(436) at 2", "Insert SimpleName: NodeType(500) into EnumDeclaration(507) at 0", "Insert EnumConstantDeclaration(502) into EnumDeclaration(507) at 1", "Insert EnumConstantDeclaration(504) into EnumDeclaration(507) at 2", "Insert EnumConstantDeclaration(506) into EnumDeclaration(507) at 3", "Insert Modifier: private(508) into FieldDeclaration(512) at 0", "Insert PrimitiveType: int(509) into FieldDeclaration(512) at 1", "Insert VariableDeclarationFragment(511) into FieldDeclaration(512) at 2", "Update PrimitiveType: char(518) to int", "Move Modifier: private(522) into FieldDeclaration(522) at 0", "Insert PrimitiveType: int(519) into FieldDeclaration(522) at 1", "Insert VariableDeclarationFragment(521) into FieldDeclaration(522) at 2", "Insert Modifier: private(523) into FieldDeclaration(527) at 0", "Insert PrimitiveType: int(524) into FieldDeclaration(527) at 1", "Insert VariableDeclarationFragment(526) into FieldDeclaration(527) at 2", "Insert Modifier: private(528) into FieldDeclaration(532) at 0", "Insert PrimitiveType: int(529) into FieldDeclaration(532) at 1", "Insert VariableDeclarationFragment(531) into FieldDeclaration(532) at 2", "Insert Modifier: private(533) into FieldDeclaration(537) at 0", "Insert PrimitiveType: int(534) into FieldDeclaration(537) at 1", "Move VariableDeclarationFragment(526) into FieldDeclaration(537) at 2", "Insert Modifier: private(538) into FieldDeclaration(542) at 0", "Insert PrimitiveType: int(539) into FieldDeclaration(542) at 1", "Move VariableDeclarationFragment(528) into FieldDeclaration(542) at 2", "Insert Modifier: private(543) into FieldDeclaration(547) at 0", "Insert PrimitiveType: int(544) into FieldDeclaration(547) at 1", "Move VariableDeclarationFragment(530) into FieldDeclaration(547) at 2", "Insert Modifier: private(548) into FieldDeclaration(552) at 0", "Insert PrimitiveType: int(549) into FieldDeclaration(552) at 1", "Insert VariableDeclarationFragment(551) into FieldDeclaration(552) at 2", "Insert Modifier: private(553) into FieldDeclaration(557) at 0", "Insert PrimitiveType: int(554) into FieldDeclaration(557) at 1", "Insert VariableDeclarationFragment(556) into FieldDeclaration(557) at 2", "Insert Modifier: private(558) into FieldDeclaration(562) at 0", "Insert PrimitiveType: int(559) into FieldDeclaration(562) at 1", "Insert VariableDeclarationFragment(561) into FieldDeclaration(562) at 2", "Insert Modifier: private(563) into FieldDeclaration(567) at 0", "Insert PrimitiveType: int(564) into FieldDeclaration(567) at 1", "Insert VariableDeclarationFragment(566) into FieldDeclaration(567) at 2", "Insert Modifier: private(568) into FieldDeclaration(572) at 0", "Insert PrimitiveType: int(569) into FieldDeclaration(572) at 1", "Insert VariableDeclarationFragment(571) into FieldDeclaration(572) at 2", "Insert SimpleType: FixedLengthElementArray(575) into FieldDeclaration(580) at 1", "Insert VariableDeclarationFragment(577) into FieldDeclaration(580) at 2", "Insert Modifier: private(581) into FieldDeclaration(585) at 0", "Insert PrimitiveType: int(582) into FieldDeclaration(585) at 1", "Insert VariableDeclarationFragment(584) into FieldDeclaration(585) at 2", "Insert Javadoc(597) into MethodDeclaration(728) at 0", "Insert SimpleName: Tst(599) into MethodDeclaration(728) at 2", "Insert SingleVariableDeclaration(602) into MethodDeclaration(728) at 3", "Insert SingleVariableDeclaration(608) into MethodDeclaration(728) at 5", "Insert Modifier: private(729) into MethodDeclaration(765) at 0", "Insert PrimitiveType: int(730) into MethodDeclaration(765) at 1", "Insert SimpleName: getChildOffset(731) into MethodDeclaration(765) at 2", "Insert SingleVariableDeclaration(735) into MethodDeclaration(765) at 3", "Insert Block(764) into MethodDeclaration(765) at 4", "Insert Modifier: private(766) into MethodDeclaration(797) at 0", "Insert PrimitiveType: int(767) into MethodDeclaration(797) at 1", "Insert SimpleName: getIndex(768) into MethodDeclaration(797) at 2", "Insert SingleVariableDeclaration(771) into MethodDeclaration(797) at 3", "Insert SingleVariableDeclaration(775) into MethodDeclaration(797) at 4", "Insert Block(796) into MethodDeclaration(797) at 5", "Insert Modifier: private(798) into MethodDeclaration(829) at 0", "Insert PrimitiveType: void(799) into MethodDeclaration(829) at 1", "Insert SimpleName: setDataForNewNode(800) into MethodDeclaration(829) at 2", "Insert SingleVariableDeclaration(803) into MethodDeclaration(829) at 3", "Move SingleVariableDeclaration(822) into MethodDeclaration(829) at 4", "Insert Block(828) into MethodDeclaration(829) at 5", "Insert PrimitiveType: int(830) into MethodDeclaration(877) at 0", "Insert SimpleName: createNode(831) into MethodDeclaration(877) at 1", "Insert SingleVariableDeclaration(834) into MethodDeclaration(877) at 2", "Insert SingleVariableDeclaration(838) into MethodDeclaration(877) at 3", "Insert SingleVariableDeclaration(841) into MethodDeclaration(877) at 4", "Insert Block(876) into MethodDeclaration(877) at 5", "Insert Modifier: private(878) into MethodDeclaration(903) at 0", "Insert PrimitiveType: long(879) into MethodDeclaration(903) at 1", "Insert SimpleName: getKey(880) into MethodDeclaration(903) at 2", "Insert SingleVariableDeclaration(883) into MethodDeclaration(903) at 3", "Insert SingleVariableDeclaration(887) into MethodDeclaration(903) at 4", "Insert Block(902) into MethodDeclaration(903) at 5", "Insert PrimitiveType: long(905) into MethodDeclaration(919) at 1", "Insert SimpleName: getKey(906) into MethodDeclaration(919) at 2", "Insert SingleVariableDeclaration(909) into MethodDeclaration(919) at 3", "Move Modifier: private(780) into MethodDeclaration(1166) at 0", "Insert PrimitiveType: void(1097) into MethodDeclaration(1166) at 1", "Update SimpleName: query(786) to addOrdinal", "Move SimpleName: query(786) into MethodDeclaration(1166) at 2", "Insert SingleVariableDeclaration(1101) into MethodDeclaration(1166) at 3", "Insert SingleVariableDeclaration(1104) into MethodDeclaration(1166) at 4", "Insert Block(1165) into MethodDeclaration(1166) at 5", "Move Javadoc(779) into MethodDeclaration(1355) at 0", "Insert Modifier: private(1173) into MethodDeclaration(1355) at 1", "Move ParameterizedType: Set<Integer>(785) into MethodDeclaration(1355) at 2", "Insert SimpleName: query(1179) into MethodDeclaration(1355) at 3", "Move SingleVariableDeclaration(790) into MethodDeclaration(1355) at 4", "Insert Block(1354) into MethodDeclaration(1355) at 5", "Move SimpleType: HollowObjectSchema(151) into VariableDeclarationStatement(149) at 0", "Move MethodInvocation(163) into ReturnStatement(154) at 0", "Insert PrimitiveType: int(330) into VariableDeclarationStatement(336) at 0", "Insert VariableDeclarationFragment(335) into VariableDeclarationStatement(336) at 1", "Move SimpleType: Tst(108) into VariableDeclarationStatement(353) at 0", "Insert VariableDeclarationFragment(352) into VariableDeclarationStatement(353) at 1", "Insert SimpleName: prefixIndex(382) into ReturnStatement(383) at 0", "Insert SimpleName: Tst(392) into SimpleType: Tst(393) at 0", "Move MethodInvocation(433) into ExpressionStatement(435) at 0", "Insert SimpleName: Left(501) into EnumConstantDeclaration(502) at 0", "Insert SimpleName: Right(503) into EnumConstantDeclaration(504) at 0", "Insert SimpleName: Middle(505) into EnumConstantDeclaration(506) at 0", "Insert SimpleName: bitsPerNode(510) into VariableDeclarationFragment(511) at 0", "Update SimpleName: key(519) to bitsPerKey", "Insert SimpleName: bitsForChildPointer(520) into VariableDeclarationFragment(521) at 0", "Insert SimpleName: bitsForOrdinalSetPointer(525) into VariableDeclarationFragment(526) at 0", "Insert SimpleName: bitsForOrdinalSetSize(530) into VariableDeclarationFragment(531) at 0", "Update SimpleName: left(525) to leftChildOffset", "Update SimpleName: middle(527) to middleChildOffset", "Update SimpleName: right(529) to rightChildOffset", "Insert SimpleName: ordinalSetPointerOffset(550) into VariableDeclarationFragment(551) at 0", "Insert SimpleName: ordinalSetSizeOffset(555) into VariableDeclarationFragment(556) at 0", "Insert SimpleName: bitsPerOrdinal(560) into VariableDeclarationFragment(561) at 0", "Insert SimpleName: bitsPerOrdinalSet(565) into VariableDeclarationFragment(566) at 0", "Insert SimpleName: maxNodes(570) into VariableDeclarationFragment(571) at 0", "Update SimpleName: Set(533) to FixedLengthElementArray", "Move SimpleName: Set(533) into SimpleType: FixedLengthElementArray(575) at 0", "Insert SimpleName: nodes(576) into VariableDeclarationFragment(577) at 0", "Update SimpleName: ordinals(538) to ordinalSet", "Insert SimpleName: indexTracker(583) into VariableDeclarationFragment(584) at 0", "Insert TagElement(587) into Javadoc(597) at 0", "Insert TagElement: @param(590) into Javadoc(597) at 1", "Insert TagElement: @param(593) into Javadoc(597) at 2", "Insert TagElement: @param(596) into Javadoc(597) at 3", "Insert PrimitiveType: int(600) into SingleVariableDeclaration(602) at 0", "Insert SimpleName: maxOrdinalValue(601) into SingleVariableDeclaration(602) at 1", "Update PrimitiveType: char(543) to int", "Update SimpleName: key(544) to cardinalityValues", "Insert PrimitiveType: int(606) into SingleVariableDeclaration(608) at 0", "Insert SimpleName: cardinalityKeys(607) into SingleVariableDeclaration(608) at 1", "Insert ExpressionStatement(614) into Block(727) at 0", "Insert ExpressionStatement(623) into Block(727) at 1", "Insert ExpressionStatement(629) into Block(727) at 2", "Insert ExpressionStatement(633) into Block(727) at 3", "Insert ExpressionStatement(642) into Block(727) at 4", "Insert ExpressionStatement(651) into Block(727) at 5", "Insert ExpressionStatement(660) into Block(727) at 6", "Insert ExpressionStatement(681) into Block(727) at 8", "Insert ExpressionStatement(695) into Block(727) at 10", "Insert ExpressionStatement(699) into Block(727) at 11", "Insert ExpressionStatement(705) into Block(727) at 12", "Insert ExpressionStatement(711) into Block(727) at 13", "Insert ExpressionStatement(720) into Block(727) at 14", "Insert ExpressionStatement(726) into Block(727) at 15", "Insert SimpleType: NodeType(733) into SingleVariableDeclaration(735) at 0", "Insert SimpleName: nodeType(734) into SingleVariableDeclaration(735) at 1", "Insert VariableDeclarationStatement(739) into Block(764) at 0", "Insert IfStatement(761) into Block(764) at 1", "Insert ReturnStatement(763) into Block(764) at 2", "Insert PrimitiveType: long(769) into SingleVariableDeclaration(771) at 0", "Insert SimpleName: currentNode(770) into SingleVariableDeclaration(771) at 1", "Insert SimpleType: NodeType(773) into SingleVariableDeclaration(775) at 0", "Insert SimpleName: nodeType(774) into SingleVariableDeclaration(775) at 1", "Insert VariableDeclarationStatement(782) into Block(796) at 0", "Insert ReturnStatement(795) into Block(796) at 1", "Insert PrimitiveType: int(801) into SingleVariableDeclaration(803) at 0", "Insert SimpleName: index(802) into SingleVariableDeclaration(803) at 1", "Insert ExpressionStatement(815) into Block(828) at 0", "Insert ExpressionStatement(827) into Block(828) at 1", "Insert PrimitiveType: long(832) into SingleVariableDeclaration(834) at 0", "Insert SimpleName: currentNode(833) into SingleVariableDeclaration(834) at 1", "Insert SimpleType: NodeType(836) into SingleVariableDeclaration(838) at 0", "Insert SimpleName: nodeType(837) into SingleVariableDeclaration(838) at 1", "Insert PrimitiveType: char(839) into SingleVariableDeclaration(841) at 0", "Insert SimpleName: ch(840) into SingleVariableDeclaration(841) at 1", "Insert VariableDeclarationStatement(846) into Block(876) at 0", "Insert ExpressionStatement(851) into Block(876) at 1", "Insert VariableDeclarationStatement(858) into Block(876) at 2", "Move ExpressionStatement(588) into Block(876) at 3", "Move ExpressionStatement(594) into Block(876) at 4", "Insert ReturnStatement(875) into Block(876) at 5", "Insert PrimitiveType: int(881) into SingleVariableDeclaration(883) at 0", "Insert SimpleName: nodeIndex(882) into SingleVariableDeclaration(883) at 1", "Insert SimpleType: NodeType(885) into SingleVariableDeclaration(887) at 0", "Insert SimpleName: type(886) into SingleVariableDeclaration(887) at 1", "Insert VariableDeclarationStatement(895) into Block(902) at 0", "Insert ReturnStatement(901) into Block(902) at 1", "Insert PrimitiveType: int(907) into SingleVariableDeclaration(909) at 0", "Insert SimpleName: nodeIndex(908) into SingleVariableDeclaration(909) at 1", "Insert VariableDeclarationStatement(950) into Block(1094) at 1", "Insert EnhancedForStatement(1093) into Block(1094) at 2", "Insert PrimitiveType: long(1099) into SingleVariableDeclaration(1101) at 0", "Insert SimpleName: nodeIndex(1100) into SingleVariableDeclaration(1101) at 1", "Insert PrimitiveType: long(1102) into SingleVariableDeclaration(1104) at 0", "Insert SimpleName: ordinal(1103) into SingleVariableDeclaration(1104) at 1", "Insert VariableDeclarationStatement(1118) into Block(1165) at 0", "Insert VariableDeclarationStatement(1134) into Block(1165) at 1", "Insert ExpressionStatement(1149) into Block(1165) at 2", "Insert ExpressionStatement(1164) into Block(1165) at 3", "Move IfStatement(799) into Block(1354) at 0", "Move VariableDeclarationStatement(819) into Block(1354) at 1", "Insert VariableDeclarationStatement(1209) into Block(1354) at 2", "Insert EnhancedForStatement(1270) into Block(1354) at 3", "Insert IfStatement(1351) into Block(1354) at 4", "Move ReturnStatement(869) into Block(1354) at 5", "Move MethodInvocation(131) into Assignment: =(129) at 1", "Update SimpleName: typeDataAccess(140) to objectSchema", "Insert CastExpression(147) into VariableDeclarationFragment(148) at 1", "Insert SimpleName: maxOrdinalValue(331) into VariableDeclarationFragment(335) at 0", "Insert MethodInvocation(334) into VariableDeclarationFragment(335) at 1", "Insert SimpleName: prefixIndex(339) into VariableDeclarationFragment(352) at 0", "Insert ClassInstanceCreation(351) into VariableDeclarationFragment(352) at 1", "Update SimpleName: prefixTree(429) to tst", "Insert TextElement: Create new prefix index. Represents a ternary search tree.(586) into TagElement(587) at 0", "Insert SimpleName: maxOrdinalValue(588) into TagElement: @param(590) at 0", "Insert TextElement:    max ordinal value for value type stored.(589) into TagElement: @param(590) at 1", "Insert SimpleName: cardinalityValues(591) into TagElement: @param(593) at 0", "Insert TextElement:  total cardinality of the values(592) into TagElement: @param(593) at 1", "Insert SimpleName: cardinalityKeys(594) into TagElement: @param(596) at 0", "Insert TextElement:    total cardinality of the keys(595) into TagElement: @param(596) at 1", "Insert Assignment: =(613) into ExpressionStatement(614) at 0", "Insert Assignment: =(622) into ExpressionStatement(623) at 0", "Insert Assignment: =(628) into ExpressionStatement(629) at 0", "Insert Assignment: =(632) into ExpressionStatement(633) at 0", "Insert Assignment: =(641) into ExpressionStatement(642) at 0", "Insert Assignment: =(650) into ExpressionStatement(651) at 0", "Insert Assignment: =(659) into ExpressionStatement(660) at 0", "Insert Assignment: =(680) into ExpressionStatement(681) at 0", "Insert Assignment: =(694) into ExpressionStatement(695) at 0", "Insert Assignment: =(698) into ExpressionStatement(699) at 0", "Insert Assignment: =(704) into ExpressionStatement(705) at 0", "Insert Assignment: =(710) into ExpressionStatement(711) at 0", "Insert Assignment: =(719) into ExpressionStatement(720) at 0", "Insert Assignment: =(725) into ExpressionStatement(726) at 0", "Update SimpleName: Node(565) to NodeType", "Move SimpleName: Node(565) into SimpleType: NodeType(733) at 0", "Insert PrimitiveType: int(736) into VariableDeclarationStatement(739) at 0", "Insert VariableDeclarationFragment(738) into VariableDeclarationStatement(739) at 1", "Insert MethodInvocation(743) into IfStatement(761) at 0", "Insert ExpressionStatement(747) into IfStatement(761) at 1", "Insert IfStatement(760) into IfStatement(761) at 2", "Insert SimpleName: offset(762) into ReturnStatement(763) at 0", "Insert SimpleName: NodeType(772) into SimpleType: NodeType(773) at 0", "Insert PrimitiveType: int(776) into VariableDeclarationStatement(782) at 0", "Insert VariableDeclarationFragment(781) into VariableDeclarationStatement(782) at 1", "Insert CastExpression(794) into ReturnStatement(795) at 0", "Insert MethodInvocation(814) into ExpressionStatement(815) at 0", "Insert MethodInvocation(826) into ExpressionStatement(827) at 0", "Update SimpleName: Object(576) to NodeType", "Move SimpleName: Object(576) into SimpleType: NodeType(836) at 0", "Insert PrimitiveType: int(842) into VariableDeclarationStatement(846) at 0", "Insert VariableDeclarationFragment(845) into VariableDeclarationStatement(846) at 1", "Insert MethodInvocation(850) into ExpressionStatement(851) at 0", "Insert PrimitiveType: int(852) into VariableDeclarationStatement(858) at 0", "Insert VariableDeclarationFragment(857) into VariableDeclarationStatement(858) at 1", "Insert MethodInvocation(869) into ExpressionStatement(870) at 0", "Insert PostfixExpression: ++(872) into ExpressionStatement(873) at 0", "Insert SimpleName: indexForNode(874) into ReturnStatement(875) at 0", "Update SimpleName: Object(598) to NodeType", "Move SimpleName: Object(598) into SimpleType: NodeType(885) at 0", "Insert PrimitiveType: int(888) into VariableDeclarationStatement(895) at 0", "Insert VariableDeclarationFragment(894) into VariableDeclarationStatement(895) at 1", "Insert CastExpression(900) into ReturnStatement(901) at 0", "Insert MethodInvocation(916) into ReturnStatement(917) at 0", "Insert PrimitiveType: int(946) into VariableDeclarationStatement(950) at 0", "Insert VariableDeclarationFragment(949) into VariableDeclarationStatement(950) at 1", "Move SingleVariableDeclaration(651) into EnhancedForStatement(1093) at 0", "Move MethodInvocation(656) into EnhancedForStatement(1093) at 1", "Insert Block(1092) into EnhancedForStatement(1093) at 2", "Insert PrimitiveType: long(1105) into VariableDeclarationStatement(1118) at 0", "Insert VariableDeclarationFragment(1117) into VariableDeclarationStatement(1118) at 1", "Insert PrimitiveType: int(1119) into VariableDeclarationStatement(1134) at 0", "Move VariableDeclarationFragment(806) into VariableDeclarationStatement(1134) at 1", "Insert MethodInvocation(1148) into ExpressionStatement(1149) at 0", "Insert MethodInvocation(1163) into ExpressionStatement(1164) at 0", "Insert PrimitiveType: int(1205) into VariableDeclarationStatement(1209) at 0", "Insert VariableDeclarationFragment(1208) into VariableDeclarationStatement(1209) at 1", "Move SingleVariableDeclaration(910) into EnhancedForStatement(1270) at 0", "Move MethodInvocation(915) into EnhancedForStatement(1270) at 1", "Move Block(857) into EnhancedForStatement(1270) at 2", "Move InfixExpression: !=(861) into IfStatement(1351) at 0", "Insert Block(1350) into IfStatement(1351) at 1", "Move SimpleType: HollowObjectSchema(148) into CastExpression(147) at 0", "Insert MethodInvocation(146) into CastExpression(147) at 1", "Insert SimpleName: readStateForValue(332) into MethodInvocation(334) at 0", "Insert SimpleName: maxOrdinal(333) into MethodInvocation(334) at 1", "Insert SimpleType: Tst(341) into ClassInstanceCreation(351) at 0", "Insert SimpleName: maxOrdinalValue(342) into ClassInstanceCreation(351) at 1", "Insert MethodInvocation(345) into ClassInstanceCreation(351) at 2", "Insert MethodInvocation(350) into ClassInstanceCreation(351) at 3", "Insert SimpleName: maxNodes(609) into Assignment: =(613) at 0", "Insert InfixExpression: *(612) into Assignment: =(613) at 1", "Insert SimpleName: bitsPerOrdinal(615) into Assignment: =(622) at 0", "Insert InfixExpression: -(621) into Assignment: =(622) at 1", "Insert SimpleName: bitsPerOrdinalSet(624) into Assignment: =(628) at 0", "Insert InfixExpression: *(627) into Assignment: =(628) at 1", "Insert SimpleName: bitsPerKey(630) into Assignment: =(632) at 0", "Insert NumberLiteral: 16(631) into Assignment: =(632) at 1", "Insert SimpleName: bitsForChildPointer(634) into Assignment: =(641) at 0", "Insert InfixExpression: -(640) into Assignment: =(641) at 1", "Insert SimpleName: bitsForOrdinalSetPointer(643) into Assignment: =(650) at 0", "Insert InfixExpression: -(649) into Assignment: =(650) at 1", "Insert SimpleName: bitsForOrdinalSetSize(652) into Assignment: =(659) at 0", "Insert InfixExpression: -(658) into Assignment: =(659) at 1", "Insert SimpleName: bitsPerNode(661) into Assignment: =(670) at 0", "Insert InfixExpression: +(669) into Assignment: =(670) at 1", "Insert SimpleName: nodes(672) into Assignment: =(680) at 0", "Insert ClassInstanceCreation(679) into Assignment: =(680) at 1", "Insert SimpleName: ordinalSet(682) into Assignment: =(690) at 0", "Insert SimpleName: indexTracker(692) into Assignment: =(694) at 0", "Insert NumberLiteral: 0(693) into Assignment: =(694) at 1", "Insert SimpleName: leftChildOffset(696) into Assignment: =(698) at 0", "Insert SimpleName: bitsPerKey(697) into Assignment: =(698) at 1", "Insert SimpleName: middleChildOffset(700) into Assignment: =(704) at 0", "Insert InfixExpression: +(703) into Assignment: =(704) at 1", "Insert SimpleName: rightChildOffset(706) into Assignment: =(710) at 0", "Insert InfixExpression: +(709) into Assignment: =(710) at 1", "Insert SimpleName: ordinalSetPointerOffset(712) into Assignment: =(719) at 0", "Insert InfixExpression: +(718) into Assignment: =(719) at 1", "Insert SimpleName: ordinalSetSizeOffset(721) into Assignment: =(725) at 0", "Insert InfixExpression: +(724) into Assignment: =(725) at 1", "Update SimpleName: root(567) to offset", "Move SimpleName: root(567) into VariableDeclarationFragment(738) at 0", "Insert SimpleName: nodeType(740) into MethodInvocation(743) at 0", "Insert SimpleName: equals(741) into MethodInvocation(743) at 1", "Insert QualifiedName: NodeType.Left(742) into MethodInvocation(743) at 2", "Insert Assignment: =(746) into ExpressionStatement(747) at 0", "Insert MethodInvocation(751) into IfStatement(760) at 0", "Insert ExpressionStatement(755) into IfStatement(760) at 1", "Insert ExpressionStatement(759) into IfStatement(760) at 2", "Insert SimpleName: offset(777) into VariableDeclarationFragment(781) at 0", "Insert MethodInvocation(780) into VariableDeclarationFragment(781) at 1", "Insert PrimitiveType: int(783) into CastExpression(794) at 0", "Insert MethodInvocation(793) into CastExpression(794) at 1", "Insert SimpleName: nodes(807) into MethodInvocation(814) at 0", "Insert SimpleName: setElementValue(808) into MethodInvocation(814) at 1", "Insert InfixExpression: *(811) into MethodInvocation(814) at 2", "Insert SimpleName: bitsPerKey(812) into MethodInvocation(814) at 3", "Insert SimpleName: ch(813) into MethodInvocation(814) at 4", "Insert SimpleName: nodes(816) into MethodInvocation(826) at 0", "Insert SimpleName: setElementValue(817) into MethodInvocation(826) at 1", "Insert InfixExpression: +(823) into MethodInvocation(826) at 2", "Insert SimpleName: bitsForOrdinalSetPointer(824) into MethodInvocation(826) at 3", "Insert SimpleName: index(825) into MethodInvocation(826) at 4", "Update SimpleName: lock(578) to indexForNode", "Move SimpleName: lock(578) into VariableDeclarationFragment(845) at 0", "Insert SimpleName: indexTracker(844) into VariableDeclarationFragment(845) at 1", "Insert SimpleName: setDataForNewNode(847) into MethodInvocation(850) at 0", "Insert SimpleName: indexForNode(848) into MethodInvocation(850) at 1", "Insert SimpleName: ch(849) into MethodInvocation(850) at 2", "Insert SimpleName: offset(853) into VariableDeclarationFragment(857) at 0", "Insert MethodInvocation(856) into VariableDeclarationFragment(857) at 1", "Insert SimpleName: nodes(859) into MethodInvocation(869) at 0", "Insert SimpleName: setElementValue(860) into MethodInvocation(869) at 1", "Insert InfixExpression: +(866) into MethodInvocation(869) at 2", "Insert SimpleName: bitsForChildPointer(867) into MethodInvocation(869) at 3", "Insert SimpleName: indexForNode(868) into MethodInvocation(869) at 4", "Insert SimpleName: indexTracker(871) into PostfixExpression: ++(872) at 0", "Insert SimpleName: childIndex(889) into VariableDeclarationFragment(894) at 0", "Insert MethodInvocation(893) into VariableDeclarationFragment(894) at 1", "Insert PrimitiveType: char(896) into CastExpression(900) at 0", "Insert MethodInvocation(899) into CastExpression(900) at 1", "Insert SimpleName: nodes(910) into MethodInvocation(916) at 0", "Insert SimpleName: getElementValue(911) into MethodInvocation(916) at 1", "Insert InfixExpression: *(914) into MethodInvocation(916) at 2", "Insert SimpleName: bitsPerKey(915) into MethodInvocation(916) at 3", "Insert SimpleName: currentIndex(947) into VariableDeclarationFragment(949) at 0", "Insert NumberLiteral: 0(948) into VariableDeclarationFragment(949) at 1", "Move VariableDeclarationStatement(648) into Block(1092) at 0", "Move IfStatement(764) into Block(1092) at 1", "Insert SimpleName: ordinalSetIndex(1106) into VariableDeclarationFragment(1117) at 0", "Insert MethodInvocation(1116) into VariableDeclarationFragment(1117) at 1", "Insert SimpleName: ordinalSetSize(1120) into VariableDeclarationFragment(1133) at 0", "Insert CastExpression(1132) into VariableDeclarationFragment(1133) at 1", "Insert SimpleName: ordinalSet(1135) into MethodInvocation(1148) at 0", "Insert SimpleName: setElementValue(1136) into MethodInvocation(1148) at 1", "Insert InfixExpression: +(1145) into MethodInvocation(1148) at 2", "Insert SimpleName: bitsPerOrdinal(1146) into MethodInvocation(1148) at 3", "Insert SimpleName: ordinal(1147) into MethodInvocation(1148) at 4", "Insert SimpleName: nodes(1150) into MethodInvocation(1163) at 0", "Insert SimpleName: setElementValue(1151) into MethodInvocation(1163) at 1", "Insert InfixExpression: +(1157) into MethodInvocation(1163) at 2", "Insert SimpleName: bitsForOrdinalSetSize(1158) into MethodInvocation(1163) at 3", "Insert ParenthesizedExpression(1162) into MethodInvocation(1163) at 4", "Insert SimpleName: current(1206) into VariableDeclarationFragment(1208) at 0", "Insert NumberLiteral: 0(1207) into VariableDeclarationFragment(1208) at 1", "Insert VariableDeclarationStatement(1224) into Block(1269) at 0", "Insert MethodInvocation(1273) into InfixExpression: !=(1275) at 0", "Insert NumberLiteral: 0(1274) into InfixExpression: !=(1275) at 1", "Insert VariableDeclarationStatement(1288) into Block(1350) at 0", "Insert VariableDeclarationStatement(1303) into Block(1350) at 1", "Move IfStatement(898) into Block(1350) at 2", "Insert VariableDeclarationStatement(1314) into Block(1350) at 3", "Insert DoStatement(1349) into Block(1350) at 4", "Insert MethodInvocation(144) into MethodInvocation(146) at 0", "Insert SimpleName: getSchema(145) into MethodInvocation(146) at 1", "Insert SimpleName: Tst(340) into SimpleType: Tst(341) at 0", "Insert SimpleName: ordinals(343) into MethodInvocation(345) at 0", "Insert SimpleName: cardinality(344) into MethodInvocation(345) at 1", "Insert MethodInvocation(348) into MethodInvocation(350) at 0", "Insert SimpleName: cardinality(349) into MethodInvocation(350) at 1", "Update SimpleName: updateIndex(367) to addOrdinal", "Insert SimpleName: prefixIndex(368) into MethodInvocation(369) at 2", "Insert SimpleName: cardinalityKeys(610) into InfixExpression: *(612) at 0", "Insert NumberLiteral: 256(611) into InfixExpression: *(612) at 1", "Insert NumberLiteral: 32(616) into InfixExpression: -(621) at 0", "Insert MethodInvocation(620) into InfixExpression: -(621) at 1", "Insert SimpleName: cardinalityValues(625) into InfixExpression: *(627) at 0", "Insert SimpleName: bitsPerOrdinal(626) into InfixExpression: *(627) at 1", "Insert NumberLiteral: 32(635) into InfixExpression: -(640) at 0", "Insert MethodInvocation(639) into InfixExpression: -(640) at 1", "Insert NumberLiteral: 32(644) into InfixExpression: -(649) at 0", "Insert MethodInvocation(648) into InfixExpression: -(649) at 1", "Insert NumberLiteral: 32(653) into InfixExpression: -(658) at 0", "Insert MethodInvocation(657) into InfixExpression: -(658) at 1", "Insert SimpleName: bitsPerKey(662) into InfixExpression: +(669) at 0", "Insert ParenthesizedExpression(666) into InfixExpression: +(669) at 1", "Insert SimpleName: bitsForOrdinalSetSize(667) into InfixExpression: +(669) at 2", "Insert SimpleName: bitsForOrdinalSetPointer(668) into InfixExpression: +(669) at 3", "Insert SimpleType: FixedLengthElementArray(674) into ClassInstanceCreation(679) at 0", "Insert QualifiedName: WastefulRecycler.DEFAULT_INSTANCE(675) into ClassInstanceCreation(679) at 1", "Insert InfixExpression: *(678) into ClassInstanceCreation(679) at 2", "Insert SimpleType: FixedLengthElementArray(684) into ClassInstanceCreation(689) at 0", "Insert QualifiedName: WastefulRecycler.DEFAULT_INSTANCE(685) into ClassInstanceCreation(689) at 1", "Insert InfixExpression: *(688) into ClassInstanceCreation(689) at 2", "Insert SimpleName: leftChildOffset(701) into InfixExpression: +(703) at 0", "Insert SimpleName: bitsForChildPointer(702) into InfixExpression: +(703) at 1", "Insert SimpleName: middleChildOffset(707) into InfixExpression: +(709) at 0", "Insert SimpleName: bitsForChildPointer(708) into InfixExpression: +(709) at 1", "Insert SimpleName: bitsPerKey(713) into InfixExpression: +(718) at 0", "Insert ParenthesizedExpression(717) into InfixExpression: +(718) at 1", "Insert SimpleName: ordinalSetPointerOffset(722) into InfixExpression: +(724) at 0", "Insert SimpleName: bitsForOrdinalSetPointer(723) into InfixExpression: +(724) at 1", "Insert SimpleName: offset(744) into Assignment: =(746) at 0", "Insert SimpleName: leftChildOffset(745) into Assignment: =(746) at 1", "Insert SimpleName: nodeType(748) into MethodInvocation(751) at 0", "Insert SimpleName: equals(749) into MethodInvocation(751) at 1", "Insert QualifiedName: NodeType.Middle(750) into MethodInvocation(751) at 2", "Insert Assignment: =(754) into ExpressionStatement(755) at 0", "Insert Assignment: =(758) into ExpressionStatement(759) at 0", "Insert SimpleName: getChildOffset(778) into MethodInvocation(780) at 0", "Insert SimpleName: nodeType(779) into MethodInvocation(780) at 1", "Insert SimpleName: nodes(784) into MethodInvocation(793) at 0", "Insert SimpleName: getElementValue(785) into MethodInvocation(793) at 1", "Insert InfixExpression: +(791) into MethodInvocation(793) at 2", "Insert SimpleName: bitsForChildPointer(792) into MethodInvocation(793) at 3", "Insert SimpleName: index(809) into InfixExpression: *(811) at 0", "Insert SimpleName: bitsPerNode(810) into InfixExpression: *(811) at 1", "Insert ParenthesizedExpression(821) into InfixExpression: +(823) at 0", "Insert SimpleName: ordinalSetPointerOffset(822) into InfixExpression: +(823) at 1", "Insert SimpleName: getChildOffset(854) into MethodInvocation(856) at 0", "Insert SimpleName: nodeType(855) into MethodInvocation(856) at 1", "Insert ParenthesizedExpression(864) into InfixExpression: +(866) at 0", "Insert SimpleName: offset(865) into InfixExpression: +(866) at 1", "Insert SimpleName: getIndex(890) into MethodInvocation(893) at 0", "Insert SimpleName: nodeIndex(891) into MethodInvocation(893) at 1", "Insert SimpleName: type(892) into MethodInvocation(893) at 2", "Insert SimpleName: getKey(897) into MethodInvocation(899) at 0", "Insert SimpleName: childIndex(898) into MethodInvocation(899) at 1", "Insert SimpleName: nodeIndex(912) into InfixExpression: *(914) at 0", "Insert SimpleName: bitsPerNode(913) into InfixExpression: *(914) at 1", "Insert PrimitiveType: long(959) into VariableDeclarationStatement(965) at 0", "Insert SimpleName: nodes(1107) into MethodInvocation(1116) at 0", "Insert SimpleName: getElementValue(1108) into MethodInvocation(1116) at 1", "Insert InfixExpression: +(1114) into MethodInvocation(1116) at 2", "Insert SimpleName: bitsForOrdinalSetPointer(1115) into MethodInvocation(1116) at 3", "Insert PrimitiveType: int(1121) into CastExpression(1132) at 0", "Insert MethodInvocation(1131) into CastExpression(1132) at 1", "Insert ParenthesizedExpression(1140) into InfixExpression: +(1145) at 0", "Insert ParenthesizedExpression(1144) into InfixExpression: +(1145) at 1", "Insert ParenthesizedExpression(1155) into InfixExpression: +(1157) at 0", "Insert SimpleName: ordinalSetSizeOffset(1156) into InfixExpression: +(1157) at 1", "Insert InfixExpression: +(1161) into ParenthesizedExpression(1162) at 0", "Insert PrimitiveType: long(1218) into VariableDeclarationStatement(1224) at 0", "Insert VariableDeclarationFragment(1223) into VariableDeclarationStatement(1224) at 1", "Insert SimpleName: getKey(1271) into MethodInvocation(1273) at 0", "Insert SimpleName: current(1272) into MethodInvocation(1273) at 1", "Insert PrimitiveType: long(1276) into VariableDeclarationStatement(1288) at 0", "Insert VariableDeclarationFragment(1287) into VariableDeclarationStatement(1288) at 1", "Insert PrimitiveType: int(1289) into VariableDeclarationStatement(1303) at 0", "Insert VariableDeclarationFragment(1302) into VariableDeclarationStatement(1303) at 1", "Insert ReturnStatement(1308) into IfStatement(1309) at 1", "Insert PrimitiveType: int(1310) into VariableDeclarationStatement(1314) at 0", "Insert VariableDeclarationFragment(1313) into VariableDeclarationStatement(1314) at 1", "Insert Block(1342) into DoStatement(1349) at 0", "Insert InfixExpression: <(1348) into DoStatement(1349) at 1", "Move SimpleName: readStateEngine(141) into MethodInvocation(144) at 0", "Update SimpleName: getTypeDataAccess(142) to getTypeState", "Move SimpleName: getTypeDataAccess(142) into MethodInvocation(144) at 1", "Move SimpleName: type(143) into MethodInvocation(144) at 2", "Insert SimpleName: readStateForKey(346) into MethodInvocation(348) at 0", "Insert SimpleName: getPopulatedOrdinals(347) into MethodInvocation(348) at 1", "Insert SimpleName: Integer(617) into MethodInvocation(620) at 0", "Insert SimpleName: numberOfLeadingZeros(618) into MethodInvocation(620) at 1", "Insert SimpleName: maxOrdinalValue(619) into MethodInvocation(620) at 2", "Insert SimpleName: Integer(636) into MethodInvocation(639) at 0", "Insert SimpleName: numberOfLeadingZeros(637) into MethodInvocation(639) at 1", "Insert SimpleName: maxNodes(638) into MethodInvocation(639) at 2", "Insert SimpleName: Integer(645) into MethodInvocation(648) at 0", "Insert SimpleName: numberOfLeadingZeros(646) into MethodInvocation(648) at 1", "Insert SimpleName: maxNodes(647) into MethodInvocation(648) at 2", "Insert SimpleName: Integer(654) into MethodInvocation(657) at 0", "Insert SimpleName: numberOfLeadingZeros(655) into MethodInvocation(657) at 1", "Insert SimpleName: bitsPerOrdinalSet(656) into MethodInvocation(657) at 2", "Insert InfixExpression: *(665) into ParenthesizedExpression(666) at 0", "Insert SimpleName: FixedLengthElementArray(673) into SimpleType: FixedLengthElementArray(674) at 0", "Insert SimpleName: bitsPerNode(676) into InfixExpression: *(678) at 0", "Insert SimpleName: maxNodes(677) into InfixExpression: *(678) at 1", "Update SimpleName: HashSet(555) to FixedLengthElementArray", "Move SimpleName: HashSet(555) into SimpleType: FixedLengthElementArray(684) at 0", "Insert SimpleName: bitsPerOrdinalSet(686) into InfixExpression: *(688) at 0", "Insert SimpleName: maxNodes(687) into InfixExpression: *(688) at 1", "Insert InfixExpression: *(716) into ParenthesizedExpression(717) at 0", "Insert SimpleName: offset(752) into Assignment: =(754) at 0", "Insert SimpleName: middleChildOffset(753) into Assignment: =(754) at 1", "Insert SimpleName: offset(756) into Assignment: =(758) at 0", "Insert SimpleName: rightChildOffset(757) into Assignment: =(758) at 1", "Insert ParenthesizedExpression(789) into InfixExpression: +(791) at 0", "Insert SimpleName: offset(790) into InfixExpression: +(791) at 1", "Insert InfixExpression: *(820) into ParenthesizedExpression(821) at 0", "Insert InfixExpression: *(863) into ParenthesizedExpression(864) at 0", "Update SimpleName: current(645) to currentValue", "Insert MethodInvocation(963) into VariableDeclarationFragment(964) at 1", "Update SimpleName: current(657) to currentValue", "Insert NumberLiteral: 0(967) into InfixExpression: !=(968) at 1", "Move ExpressionStatement(749) into Block(1090) at 0", "Insert ParenthesizedExpression(1112) into InfixExpression: +(1114) at 0", "Insert SimpleName: ordinalSetPointerOffset(1113) into InfixExpression: +(1114) at 1", "Insert SimpleName: nodes(1122) into MethodInvocation(1131) at 0", "Insert SimpleName: getElementValue(1123) into MethodInvocation(1131) at 1", "Insert InfixExpression: +(1129) into MethodInvocation(1131) at 2", "Insert SimpleName: bitsForOrdinalSetSize(1130) into MethodInvocation(1131) at 3", "Insert InfixExpression: *(1139) into ParenthesizedExpression(1140) at 0", "Insert InfixExpression: *(1143) into ParenthesizedExpression(1144) at 0", "Insert InfixExpression: *(1154) into ParenthesizedExpression(1155) at 0", "Insert SimpleName: ordinalSetSize(1159) into InfixExpression: +(1161) at 0", "Insert NumberLiteral: 1(1160) into InfixExpression: +(1161) at 1", "Insert SimpleName: currentValue(1219) into VariableDeclarationFragment(1223) at 0", "Insert MethodInvocation(1222) into VariableDeclarationFragment(1223) at 1", "Insert ExpressionStatement(1266) into Block(1267) at 1", "Insert SimpleName: ordinalSetIndex(1277) into VariableDeclarationFragment(1287) at 0", "Insert MethodInvocation(1286) into VariableDeclarationFragment(1287) at 1", "Insert SimpleName: ordinalSetSize(1290) into VariableDeclarationFragment(1302) at 0", "Insert CastExpression(1301) into VariableDeclarationFragment(1302) at 1", "Update SimpleName: prefix(890) to ordinalSetSize", "Insert NumberLiteral: 0(1305) into InfixExpression: ==(1306) at 1", "Insert SimpleName: ordinals(1307) into ReturnStatement(1308) at 0", "Insert SimpleName: i(1311) into VariableDeclarationFragment(1313) at 0", "Insert NumberLiteral: 0(1312) into VariableDeclarationFragment(1313) at 1", "Insert VariableDeclarationStatement(1333) into Block(1342) at 0", "Insert ExpressionStatement(1338) into Block(1342) at 1", "Insert ExpressionStatement(1341) into Block(1342) at 2", "Update SimpleName: ch(946) to i", "Move SimpleName: ch(946) into InfixExpression: <(1348) at 0", "Insert ParenthesizedExpression(1347) into InfixExpression: <(1348) at 1", "Insert NumberLiteral: 3(663) into InfixExpression: *(665) at 0", "Insert SimpleName: bitsForChildPointer(664) into InfixExpression: *(665) at 1", "Insert NumberLiteral: 3(714) into InfixExpression: *(716) at 0", "Insert SimpleName: bitsForChildPointer(715) into InfixExpression: *(716) at 1", "Insert InfixExpression: *(788) into ParenthesizedExpression(789) at 0", "Insert SimpleName: index(818) into InfixExpression: *(820) at 0", "Insert SimpleName: bitsPerNode(819) into InfixExpression: *(820) at 1", "Insert SimpleName: currentNode(861) into InfixExpression: *(863) at 0", "Insert SimpleName: bitsPerNode(862) into InfixExpression: *(863) at 1", "Insert SimpleName: getKey(961) into MethodInvocation(963) at 0", "Insert SimpleName: currentIndex(962) into MethodInvocation(963) at 1", "Insert MethodInvocation(1080) into ExpressionStatement(1081) at 0", "Insert PostfixExpression: ++(1083) into ExpressionStatement(1084) at 0", "Insert InfixExpression: *(1111) into ParenthesizedExpression(1112) at 0", "Insert ParenthesizedExpression(1127) into InfixExpression: +(1129) at 0", "Insert SimpleName: ordinalSetSizeOffset(1128) into InfixExpression: +(1129) at 1", "Insert SimpleName: ordinalSetIndex(1137) into InfixExpression: *(1139) at 0", "Insert SimpleName: bitsPerOrdinalSet(1138) into InfixExpression: *(1139) at 1", "Insert SimpleName: ordinalSetSize(1141) into InfixExpression: *(1143) at 0", "Insert SimpleName: bitsPerOrdinal(1142) into InfixExpression: *(1143) at 1", "Insert SimpleName: nodeIndex(1152) into InfixExpression: *(1154) at 0", "Insert SimpleName: bitsPerNode(1153) into InfixExpression: *(1154) at 1", "Insert SimpleName: getKey(1220) into MethodInvocation(1222) at 0", "Insert SimpleName: current(1221) into MethodInvocation(1222) at 1", "Update SimpleName: current(828) to currentValue", "Insert NumberLiteral: 0(1226) into InfixExpression: !=(1227) at 1", "Insert SimpleName: currentValue(1228) into InfixExpression: !=(1230) at 0", "Insert Assignment: =(1265) into ExpressionStatement(1266) at 0", "Insert SimpleName: nodes(1278) into MethodInvocation(1286) at 0", "Insert SimpleName: getElementValue(1279) into MethodInvocation(1286) at 1", "Insert InfixExpression: +(1284) into MethodInvocation(1286) at 2", "Insert SimpleName: bitsForOrdinalSetPointer(1285) into MethodInvocation(1286) at 3", "Insert PrimitiveType: int(1291) into CastExpression(1301) at 0", "Insert MethodInvocation(1300) into CastExpression(1301) at 1", "Insert PrimitiveType: int(1315) into VariableDeclarationStatement(1333) at 0", "Insert VariableDeclarationFragment(1332) into VariableDeclarationStatement(1333) at 1", "Insert MethodInvocation(1337) into ExpressionStatement(1338) at 0", "Insert PostfixExpression: ++(1340) into ExpressionStatement(1341) at 0", "Insert InfixExpression: -(1346) into ParenthesizedExpression(1347) at 0", "Insert SimpleName: currentNode(786) into InfixExpression: *(788) at 0", "Insert SimpleName: bitsPerNode(787) into InfixExpression: *(788) at 1", "Insert SimpleName: currentValue(969) into InfixExpression: !=(971) at 0", "Insert ExpressionStatement(1068) into Block(1069) at 3", "Update SimpleName: add(731) to addOrdinal", "Insert SimpleName: currentIndex(1072) into MethodInvocation(1074) at 1", "Insert SimpleName: setDataForNewNode(1077) into MethodInvocation(1080) at 0", "Insert SimpleName: currentIndex(1078) into MethodInvocation(1080) at 1", "Insert SimpleName: ch(1079) into MethodInvocation(1080) at 2", "Insert SimpleName: indexTracker(1082) into PostfixExpression: ++(1083) at 0", "Update SimpleName: add(759) to addOrdinal", "Insert SimpleName: currentIndex(1086) into MethodInvocation(1088) at 1", "Insert SimpleName: nodeIndex(1109) into InfixExpression: *(1111) at 0", "Insert SimpleName: bitsPerNode(1110) into InfixExpression: *(1111) at 1", "Insert InfixExpression: *(1126) into ParenthesizedExpression(1127) at 0", "Insert SimpleName: currentValue(1233) into InfixExpression: <(1234) at 1", "Insert SimpleName: currentValue(1261) into Assignment: =(1265) at 0", "Insert MethodInvocation(1264) into Assignment: =(1265) at 1", "Insert InfixExpression: *(1282) into InfixExpression: +(1284) at 0", "Insert SimpleName: ordinalSetPointerOffset(1283) into InfixExpression: +(1284) at 1", "Insert SimpleName: nodes(1292) into MethodInvocation(1300) at 0", "Insert SimpleName: getElementValue(1293) into MethodInvocation(1300) at 1", "Insert InfixExpression: +(1298) into MethodInvocation(1300) at 2", "Insert SimpleName: bitsForOrdinalSetSize(1299) into MethodInvocation(1300) at 3", "Insert SimpleName: ordinal(1316) into VariableDeclarationFragment(1332) at 0", "Insert CastExpression(1331) into VariableDeclarationFragment(1332) at 1", "Insert SimpleName: ordinals(1334) into MethodInvocation(1337) at 0", "Insert SimpleName: add(1335) into MethodInvocation(1337) at 1", "Insert SimpleName: ordinal(1336) into MethodInvocation(1337) at 2", "Insert SimpleName: i(1339) into PostfixExpression: ++(1340) at 0", "Insert SimpleName: ordinalSetSize(1344) into InfixExpression: -(1346) at 0", "Insert NumberLiteral: 1(1345) into InfixExpression: -(1346) at 1", "Insert PrimitiveType: int(972) into VariableDeclarationStatement(975) at 0", "Insert Assignment: =(1067) into ExpressionStatement(1068) at 0", "Insert SimpleName: nodeIndex(1124) into InfixExpression: *(1126) at 0", "Insert SimpleName: bitsPerNode(1125) into InfixExpression: *(1126) at 1", "Insert MethodInvocation(1239) into Assignment: =(1240) at 1", "Insert SimpleName: currentValue(1243) into InfixExpression: >(1244) at 1", "Insert SimpleName: getKey(1262) into MethodInvocation(1264) at 0", "Insert SimpleName: current(1263) into MethodInvocation(1264) at 1", "Insert SimpleName: current(1280) into InfixExpression: *(1282) at 0", "Insert SimpleName: bitsPerNode(1281) into InfixExpression: *(1282) at 1", "Insert InfixExpression: *(1296) into InfixExpression: +(1298) at 0", "Insert SimpleName: ordinalSetSizeOffset(1297) into InfixExpression: +(1298) at 1", "Insert PrimitiveType: int(1317) into CastExpression(1331) at 0", "Insert MethodInvocation(1330) into CastExpression(1331) at 1", "Update SimpleName: child(665) to childIndex", "Insert SimpleName: currentValue(977) into InfixExpression: <(978) at 1", "Insert VariableDeclarationStatement(986) into Block(1003) at 0", "Update SimpleName: current(724) to currentIndex", "Update SimpleName: child(725) to childIndex", "Insert SimpleName: currentValue(1063) into Assignment: =(1067) at 0", "Insert MethodInvocation(1066) into Assignment: =(1067) at 1", "Insert SimpleName: getIndex(1236) into MethodInvocation(1239) at 0", "Insert SimpleName: current(1237) into MethodInvocation(1239) at 1", "Insert QualifiedName: NodeType.Left(1238) into MethodInvocation(1239) at 2", "Insert MethodInvocation(1249) into Assignment: =(1250) at 1", "Insert MethodInvocation(1256) into Assignment: =(1257) at 1", "Insert SimpleName: current(1294) into InfixExpression: *(1296) at 0", "Insert SimpleName: bitsPerNode(1295) into InfixExpression: *(1296) at 1", "Insert SimpleName: ordinalSet(1318) into MethodInvocation(1330) at 0", "Insert SimpleName: getElementValue(1319) into MethodInvocation(1330) at 1", "Insert InfixExpression: +(1328) into MethodInvocation(1330) at 2", "Insert SimpleName: bitsPerOrdinal(1329) into MethodInvocation(1330) at 3", "Insert PrimitiveType: int(979) into VariableDeclarationStatement(986) at 0", "Insert VariableDeclarationFragment(985) into VariableDeclarationStatement(986) at 1", "Insert SimpleName: currentValue(1005) into InfixExpression: >(1006) at 1", "Insert VariableDeclarationStatement(1014) into Block(1031) at 0", "Insert VariableDeclarationStatement(1039) into Block(1056) at 0", "Insert SimpleName: getKey(1064) into MethodInvocation(1066) at 0", "Insert SimpleName: currentIndex(1065) into MethodInvocation(1066) at 1", "Insert SimpleName: getIndex(1246) into MethodInvocation(1249) at 0", "Insert SimpleName: current(1247) into MethodInvocation(1249) at 1", "Insert QualifiedName: NodeType.Right(1248) into MethodInvocation(1249) at 2", "Insert SimpleName: getIndex(1253) into MethodInvocation(1256) at 0", "Insert SimpleName: current(1254) into MethodInvocation(1256) at 1", "Insert QualifiedName: NodeType.Middle(1255) into MethodInvocation(1256) at 2", "Insert ParenthesizedExpression(1323) into InfixExpression: +(1328) at 0", "Insert ParenthesizedExpression(1327) into InfixExpression: +(1328) at 1", "Insert SimpleName: leftIndex(980) into VariableDeclarationFragment(985) at 0", "Insert MethodInvocation(984) into VariableDeclarationFragment(985) at 1", "Insert SimpleName: leftIndex(987) into InfixExpression: ==(989) at 0", "Insert NumberLiteral: 0(988) into InfixExpression: ==(989) at 1", "Update SimpleName: child(682) to childIndex", "Insert SimpleName: leftIndex(1000) into Assignment: =(1001) at 1", "Insert PrimitiveType: int(1007) into VariableDeclarationStatement(1014) at 0", "Insert VariableDeclarationFragment(1013) into VariableDeclarationStatement(1014) at 1", "Insert PrimitiveType: int(1032) into VariableDeclarationStatement(1039) at 0", "Insert VariableDeclarationFragment(1038) into VariableDeclarationStatement(1039) at 1", "Insert InfixExpression: *(1322) into ParenthesizedExpression(1323) at 0", "Insert InfixExpression: *(1326) into ParenthesizedExpression(1327) at 0", "Insert SimpleName: getIndex(981) into MethodInvocation(984) at 0", "Insert SimpleName: currentIndex(982) into MethodInvocation(984) at 1", "Insert QualifiedName: NodeType.Left(983) into MethodInvocation(984) at 2", "Insert SimpleName: leftIndex(990) into Assignment: =(996) at 0", "Insert MethodInvocation(995) into Assignment: =(996) at 1", "Insert SimpleName: rightIndex(1008) into VariableDeclarationFragment(1013) at 0", "Insert MethodInvocation(1012) into VariableDeclarationFragment(1013) at 1", "Insert SimpleName: rightIndex(1015) into InfixExpression: ==(1017) at 0", "Insert NumberLiteral: 0(1016) into InfixExpression: ==(1017) at 1", "Update SimpleName: child(701) to childIndex", "Insert SimpleName: rightIndex(1028) into Assignment: =(1029) at 1", "Insert SimpleName: middleIndex(1033) into VariableDeclarationFragment(1038) at 0", "Insert MethodInvocation(1037) into VariableDeclarationFragment(1038) at 1", "Insert SimpleName: middleIndex(1040) into InfixExpression: ==(1042) at 0", "Insert NumberLiteral: 0(1041) into InfixExpression: ==(1042) at 1", "Update SimpleName: child(717) to childIndex", "Insert SimpleName: middleIndex(1053) into Assignment: =(1054) at 1", "Insert SimpleName: ordinalSetIndex(1320) into InfixExpression: *(1322) at 0", "Update SimpleName: current(916) to bitsPerOrdinalSet", "Move SimpleName: current(916) into InfixExpression: *(1322) at 1", "Update SimpleName: ch(920) to i", "Move SimpleName: ch(920) into InfixExpression: *(1326) at 0", "Insert SimpleName: bitsPerOrdinal(1325) into InfixExpression: *(1326) at 1", "Insert SimpleName: createNode(991) into MethodInvocation(995) at 0", "Insert SimpleName: currentIndex(992) into MethodInvocation(995) at 1", "Insert QualifiedName: NodeType.Left(993) into MethodInvocation(995) at 2", "Insert SimpleName: ch(994) into MethodInvocation(995) at 3", "Insert SimpleName: getIndex(1009) into MethodInvocation(1012) at 0", "Insert SimpleName: currentIndex(1010) into MethodInvocation(1012) at 1", "Insert QualifiedName: NodeType.Right(1011) into MethodInvocation(1012) at 2", "Insert SimpleName: rightIndex(1018) into Assignment: =(1024) at 0", "Insert MethodInvocation(1023) into Assignment: =(1024) at 1", "Insert SimpleName: getIndex(1034) into MethodInvocation(1037) at 0", "Insert SimpleName: currentIndex(1035) into MethodInvocation(1037) at 1", "Insert QualifiedName: NodeType.Middle(1036) into MethodInvocation(1037) at 2", "Insert SimpleName: middleIndex(1043) into Assignment: =(1049) at 0", "Insert MethodInvocation(1048) into Assignment: =(1049) at 1", "Insert SimpleName: createNode(1019) into MethodInvocation(1023) at 0", "Insert SimpleName: currentIndex(1020) into MethodInvocation(1023) at 1", "Insert QualifiedName: NodeType.Right(1021) into MethodInvocation(1023) at 2", "Insert SimpleName: ch(1022) into MethodInvocation(1023) at 3", "Insert SimpleName: createNode(1044) into MethodInvocation(1048) at 0", "Insert SimpleName: currentIndex(1045) into MethodInvocation(1048) at 1", "Insert QualifiedName: NodeType.Middle(1046) into MethodInvocation(1048) at 2", "Insert SimpleName: ch(1047) into MethodInvocation(1048) at 3", "Delete ClassInstanceCreation(109)", "Delete ExpressionStatement(132)", "Delete SimpleName: HollowTypeDataAccess(138)", "Delete SimpleType: HollowTypeDataAccess(139)", "Delete MethodInvocation(144)", "Delete SimpleName: objectSchema(149)", "Delete SimpleName: typeDataAccess(152)", "Delete SimpleName: getSchema(153)", "Delete MethodInvocation(154)", "Delete CastExpression(155)", "Delete VariableDeclarationFragment(156)", "Delete VariableDeclarationStatement(157)", "Delete PrimitiveType: int(158)", "Delete SimpleName: position(159)", "Delete VariableDeclarationFragment(164)", "Delete VariableDeclarationStatement(165)", "Delete SimpleName: position(166)", "Delete NumberLiteral: 0(167)", "Delete InfixExpression: <(168)", "Delete SimpleName: IllegalArgumentException(169)", "Delete SimpleType: IllegalArgumentException(170)", "Delete StringLiteral: \"Cannot find the field:\"(171)", "Delete SimpleName: field(172)", "Delete StringLiteral: \" in the given type:\"(173)", "Delete SimpleName: type(174)", "Delete InfixExpression: +(175)", "Delete ClassInstanceCreation(176)", "Delete ThrowStatement(177)", "Delete IfStatement(178)", "Delete SimpleName: position(179)", "Delete PrimitiveType: void(184)", "Delete BooleanLiteral: true(369)", "Delete PrimitiveType: boolean(391)", "Delete SimpleName: toAdd(428)", "Delete ExpressionStatement(434)", "Delete SimpleName: prefixTree(435)", "Delete SimpleName: remove(436)", "Delete SimpleName: key(437)", "Delete SimpleName: ordinal(438)", "Delete MethodInvocation(439)", "Delete ExpressionStatement(440)", "Delete IfStatement(441)", "Delete SimpleName: updateIndex(484)", "Delete SimpleName: ordinal(485)", "Delete BooleanLiteral: true(486)", "Delete MethodInvocation(487)", "Delete ExpressionStatement(488)", "Delete SimpleName: updateIndex(499)", "Delete SimpleName: ordinal(500)", "Delete BooleanLiteral: false(501)", "Delete MethodInvocation(502)", "Delete ExpressionStatement(503)", "Delete SimpleType: Set(534)", "Delete SimpleName: Integer(535)", "Delete SimpleType: Integer(536)", "Delete ParameterizedType: Set<Integer>(537)", "Delete SimpleName: Node(542)", "Delete ThisExpression(546)", "Delete SimpleName: key(547)", "Delete FieldAccess(548)", "Delete SimpleName: key(549)", "Delete ThisExpression(552)", "Delete SimpleName: ordinals(553)", "Delete FieldAccess(554)", "Delete SimpleType: HashSet(556)", "Delete ParameterizedType: HashSet<>(557)", "Delete ThisExpression(583)", "Delete SimpleName: size(584)", "Delete FieldAccess(585)", "Delete NumberLiteral: 0(586)", "Delete Assignment: =(587)", "Delete ThisExpression(589)", "Delete SimpleName: root(590)", "Delete FieldAccess(591)", "Delete NullLiteral(592)", "Delete Assignment: =(593)", "Delete Modifier: private(515)", "Delete SimpleName: Node(516)", "Delete SimpleName: Node(523)", "Delete SimpleType: Node(524)", "Delete FieldDeclaration(531)", "Delete TypeDeclaration: class(563)", "Delete Modifier: private(564)", "Delete SimpleType: Node(566)", "Delete VariableDeclarationFragment(568)", "Delete FieldDeclaration(569)", "Delete Modifier: private(570)", "Delete PrimitiveType: int(571)", "Delete SimpleName: size(572)", "Delete VariableDeclarationFragment(573)", "Delete FieldDeclaration(574)", "Delete Modifier: private(575)", "Delete SimpleType: Object(577)", "Delete VariableDeclarationFragment(579)", "Delete FieldDeclaration(580)", "Delete Modifier: protected(581)", "Delete SimpleName: Tst(582)", "Delete ThisExpression(595)", "Delete SimpleName: lock(596)", "Delete FieldAccess(597)", "Delete SimpleType: Object(599)", "Delete ClassInstanceCreation(600)", "Delete Assignment: =(601)", "Delete ExpressionStatement(602)", "Delete Block(603)", "Delete MethodDeclaration(604)", "Delete TextElement: get total number of keys inserted in the tree.(605)", "Delete TagElement(606)", "Delete Javadoc(607)", "Delete PrimitiveType: int(609)", "Delete SimpleName: getSize(610)", "Delete SimpleName: size(611)", "Delete Modifier: synchronized(623)", "Delete SimpleName: Node(643)", "Delete SimpleType: Node(644)", "Delete SimpleName: root(646)", "Delete NullLiteral(658)", "Delete QualifiedName: current.key(660)", "Delete SimpleName: Node(663)", "Delete SimpleType: Node(664)", "Delete QualifiedName: current.key(669)", "Delete QualifiedName: current.left(671)", "Delete NullLiteral(672)", "Delete QualifiedName: current.left(674)", "Delete SimpleName: Node(675)", "Delete SimpleType: Node(676)", "Delete SimpleName: ch(677)", "Delete ClassInstanceCreation(678)", "Delete QualifiedName: current.left(683)", "Delete QualifiedName: current.key(688)", "Delete QualifiedName: current.right(690)", "Delete NullLiteral(691)", "Delete QualifiedName: current.right(693)", "Delete SimpleName: Node(694)", "Delete SimpleType: Node(695)", "Delete SimpleName: ch(696)", "Delete ClassInstanceCreation(697)", "Delete QualifiedName: current.right(702)", "Delete QualifiedName: current.middle(706)", "Delete NullLiteral(707)", "Delete QualifiedName: current.middle(709)", "Delete SimpleName: Node(710)", "Delete SimpleType: Node(711)", "Delete SimpleName: ch(712)", "Delete ClassInstanceCreation(713)", "Delete QualifiedName: current.middle(718)", "Delete QualifiedName: current.ordinals(730)", "Delete ThisExpression(741)", "Delete SimpleName: root(742)", "Delete FieldAccess(743)", "Delete SimpleName: Node(744)", "Delete SimpleType: Node(745)", "Delete SimpleName: ch(746)", "Delete ClassInstanceCreation(747)", "Delete Assignment: =(748)", "Delete ThisExpression(736)", "Delete SimpleName: root(737)", "Delete FieldAccess(738)", "Delete NullLiteral(739)", "Delete InfixExpression: ==(740)", "Delete Block(750)", "Delete IfStatement(751)", "Delete SimpleName: current(752)", "Delete ThisExpression(753)", "Delete SimpleName: root(754)", "Delete FieldAccess(755)", "Delete Assignment: =(756)", "Delete QualifiedName: current.ordinals(758)", "Delete SimpleName: lock(642)", "Delete Block(765)", "Delete EnhancedForStatement(766)", "Delete SimpleName: size(767)", "Delete PostfixExpression: ++(768)", "Delete ExpressionStatement(769)", "Delete Block(770)", "Delete SynchronizedStatement(771)", "Delete SimpleName: current(802)", "Delete ThisExpression(803)", "Delete SimpleName: root(804)", "Delete FieldAccess(805)", "Delete NullLiteral(829)", "Delete QualifiedName: current.key(831)", "Delete QualifiedName: current.key(836)", "Delete QualifiedName: current.left(839)", "Delete QualifiedName: current.key(843)", "Delete QualifiedName: current.right(846)", "Delete QualifiedName: current.middle(850)", "Delete SimpleName: current(859)", "Delete NullLiteral(860)", "Delete NullLiteral(891)", "Delete SimpleName: IllegalArgumentException(893)", "Delete SimpleType: IllegalArgumentException(894)", "Delete StringLiteral: \"Cannot remove null prefix from the tree\"(895)", "Delete ClassInstanceCreation(896)", "Delete ThrowStatement(897)", "Delete SimpleName: Node(800)", "Delete SimpleType: Node(801)", "Delete VariableDeclarationStatement(807)", "Delete SimpleName: prefix(823)", "Delete SimpleName: toLowerCase(824)", "Delete MethodInvocation(825)", "Delete SimpleName: toCharArray(826)", "Delete MethodInvocation(827)", "Delete EnhancedForStatement(858)", "Delete SimpleName: ordinals(862)", "Delete QualifiedName: current.ordinals(863)", "Delete Assignment: =(864)", "Delete ExpressionStatement(865)", "Delete Block(866)", "Delete IfStatement(867)", "Delete Block(870)", "Delete MethodDeclaration(871)", "Delete TextElement: for the given prefix, remove all the references of the ordinal in the tree.(872)", "Delete TagElement(873)", "Delete SimpleName: prefix(874)", "Delete TagElement: @param(875)", "Delete SimpleName: ordinal(876)", "Delete TagElement: @param(877)", "Delete Javadoc(878)", "Delete Modifier: private(879)", "Delete Modifier: synchronized(880)", "Delete PrimitiveType: void(881)", "Delete SimpleName: remove(882)", "Delete SimpleName: String(883)", "Delete SimpleType: String(884)", "Delete SimpleName: prefix(885)", "Delete SingleVariableDeclaration(886)", "Delete PrimitiveType: int(887)", "Delete SimpleName: ordinal(888)", "Delete SingleVariableDeclaration(889)", "Delete SimpleName: lock(899)", "Delete SimpleName: Node(900)", "Delete SimpleType: Node(901)", "Delete SimpleName: current(902)", "Delete ThisExpression(903)", "Delete SimpleName: root(904)", "Delete FieldAccess(905)", "Delete VariableDeclarationFragment(906)", "Delete VariableDeclarationStatement(907)", "Delete NullLiteral(917)", "Delete InfixExpression: !=(918)", "Delete QualifiedName: current.key(919)", "Delete InfixExpression: !=(921)", "Delete InfixExpression: &&(922)", "Delete SimpleName: ch(923)", "Delete QualifiedName: current.key(924)", "Delete InfixExpression: <(925)", "Delete SimpleName: current(926)", "Delete QualifiedName: current.left(927)", "Delete Assignment: =(928)", "Delete ExpressionStatement(929)", "Delete SimpleName: ch(930)", "Delete QualifiedName: current.key(931)", "Delete InfixExpression: >(932)", "Delete SimpleName: current(933)", "Delete QualifiedName: current.right(934)", "Delete Assignment: =(935)", "Delete ExpressionStatement(936)", "Delete SimpleName: current(937)", "Delete QualifiedName: current.middle(938)", "Delete Assignment: =(939)", "Delete ExpressionStatement(940)", "Delete IfStatement(941)", "Delete IfStatement(942)", "Delete Block(943)", "Delete WhileStatement(944)", "Delete QualifiedName: current.key(945)", "Delete InfixExpression: ==(947)", "Delete QualifiedName: current.ordinals(948)", "Delete SimpleName: remove(949)", "Delete SimpleName: ordinal(950)", "Delete MethodInvocation(951)", "Delete ExpressionStatement(952)", "Delete IfStatement(953)", "Delete Block(954)", "Delete EnhancedForStatement(955)", "Delete Block(956)", "Delete SynchronizedStatement(957)", "Delete Block(958)", "Delete MethodDeclaration(959)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}