{"application": "apache-santuario-java", "csha": "f3123e631e173d28121d8751d534f4b7e3dde3b3", "files": [{"SignatureECDSA_cluster": {"actions": [{"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "UPDATE from System to ECDSAUtils", "operations": ["UPD SimpleName: System from System to ECDSAUtils", "UPD SimpleName: System from System to ECDSAUtils"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: arraycopy to MethodInvocation at 1", "MOV SimpleName: asn1Bytes to MethodInvocation at 2", "MOV SimpleName: System to MethodInvocation at 0"]}, {"root": "UPDATE from arraycopy to convertASN1toXMLDSIG", "operations": ["UPD SimpleName: arraycopy from arraycopy to convertASN1toXMLDSIG"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: System to MethodInvocation at 0", "MOV SimpleName: xmldsigBytes to MethodInvocation at 2", "MOV SimpleName: arraycopy to MethodInvocation at 1"]}, {"root": "UPDATE from arraycopy to convertXMLDSIGtoASN1", "operations": ["UPD SimpleName: arraycopy from arraycopy to convertXMLDSIGtoASN1"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: asn1Bytes", "DEL ThrowStatement", "DEL NumberLiteral: 0", "DEL IfStatement", "DEL QualifiedName: asn1Bytes.length", "DEL InfixExpression: ||", "DEL InfixExpression: <", "DEL StringLiteral: \"Invalid ASN.1 format of ECDSA signature\"", "DEL ClassInstanceCreation", "DEL SimpleName: IOException", "DEL InfixExpression: !=", "DEL NumberLiteral: 48", "DEL Block", "DEL ArrayAccess", "DEL SimpleType: IOException", "DEL NumberLiteral: 8"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: offset", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL NumberLiteral: 0x81", "DEL StringLiteral: \"Invalid ASN.1 format of ECDSA signature\"", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL CastExpression", "DEL Block", "DEL Block", "DEL NumberLiteral: 2", "DEL NumberLiteral: 3", "DEL SimpleName: offset", "DEL Assignment: =", "DEL InfixExpression: >", "DEL NumberLiteral: 0", "DEL ArrayAccess", "DEL PrimitiveType: byte", "DEL ClassInstanceCreation", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL NumberLiteral: 1", "DEL SimpleType: IOException", "DEL SimpleName: asn1Bytes", "DEL SimpleName: IOException", "DEL NumberLiteral: 1", "DEL IfStatement", "DEL ThrowStatement", "DEL Block", "DEL Assignment: =", "DEL SimpleName: asn1Bytes", "DEL ArrayAccess"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL ArrayAccess", "DEL InfixExpression: +", "DEL SimpleName: rLength", "DEL SimpleName: asn1Bytes", "DEL NumberLiteral: 1", "DEL VariableDeclarationFragment", "DEL SimpleName: offset", "DEL PrimitiveType: byte", "DEL VariableDeclarationStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: i", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment"]}, {"root": "DEL ForStatement", "operations": ["DEL SimpleName: i", "DEL NumberLiteral: 0", "DEL PostfixExpression: --", "DEL InfixExpression: -", "DEL SimpleName: i", "DEL SimpleName: rLength", "DEL InfixExpression: +", "DEL NumberLiteral: 0", "DEL InfixExpression: &&", "DEL SimpleName: i", "DEL ArrayAccess", "DEL InfixExpression: ==", "DEL Assignment: =", "DEL NumberLiteral: 2", "DEL ForStatement", "DEL InfixExpression: >", "DEL EmptyStatement", "DEL SimpleName: offset", "DEL SimpleName: asn1Bytes", "DEL SimpleName: rLength", "DEL SimpleName: i"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL PrimitiveType: byte", "DEL VariableDeclarationFragment", "DEL SimpleName: sLength", "DEL SimpleName: asn1Bytes", "DEL NumberLiteral: 1", "DEL NumberLiteral: 2", "DEL InfixExpression: +", "DEL SimpleName: offset", "DEL ArrayAccess", "DEL SimpleName: rLength"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleName: j", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int"]}, {"root": "DEL ForStatement", "operations": ["DEL SimpleName: offset", "DEL SimpleName: j", "DEL InfixExpression: -", "DEL InfixExpression: +", "DEL EmptyStatement", "DEL ForStatement", "DEL SimpleName: j", "DEL ArrayAccess", "DEL SimpleName: sLength", "DEL Assignment: =", "DEL InfixExpression: &&", "DEL NumberLiteral: 2", "DEL InfixExpression: ==", "DEL PostfixExpression: --", "DEL NumberLiteral: 2", "DEL NumberLiteral: 0", "DEL InfixExpression: >", "DEL SimpleName: sLength", "DEL SimpleName: j", "DEL SimpleName: j", "DEL NumberLiteral: 0", "DEL SimpleName: asn1Bytes", "DEL SimpleName: rLength"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: rawLen", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL SimpleName: j", "DEL SimpleName: Math", "DEL VariableDeclarationFragment", "DEL SimpleName: max", "DEL SimpleName: i"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: offset", "DEL SimpleType: IOException", "DEL InfixExpression: !=", "DEL NumberLiteral: 2", "DEL SimpleName: offset", "DEL ArrayAccess", "DEL StringLiteral: \"Invalid ASN.1 format of ECDSA signature\"", "DEL InfixExpression: ||", "DEL InfixExpression: &", "DEL SimpleName: offset", "DEL SimpleName: asn1Bytes", "DEL SimpleName: rLength", "DEL InfixExpression: -", "DEL ArrayAccess", "DEL InfixExpression: +", "DEL InfixExpression: ||", "DEL NumberLiteral: 0xff", "DEL InfixExpression: !=", "DEL SimpleName: offset", "DEL ArrayAccess", "DEL NumberLiteral: 2", "DEL InfixExpression: -", "DEL ParenthesizedExpression", "DEL IfStatement", "DEL SimpleName: asn1Bytes", "DEL NumberLiteral: 2", "DEL ClassInstanceCreation", "DEL SimpleName: asn1Bytes", "DEL NumberLiteral: 1", "DEL SimpleName: offset", "DEL InfixExpression: !=", "DEL NumberLiteral: 2", "DEL InfixExpression: +", "DEL NumberLiteral: 1", "DEL ArrayAccess", "DEL InfixExpression: ||", "DEL InfixExpression: !=", "DEL Block", "DEL ParenthesizedExpression", "DEL NumberLiteral: 0xff", "DEL SimpleName: IOException", "DEL QualifiedName: asn1Bytes.length", "DEL ThrowStatement", "DEL SimpleName: rLength", "DEL NumberLiteral: 2", "DEL InfixExpression: &", "DEL InfixExpression: -", "DEL SimpleName: asn1Bytes", "DEL SimpleName: sLength"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL NumberLiteral: 2", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL PrimitiveType: byte", "DEL Dimension", "DEL SimpleName: xmldsigBytes", "DEL InfixExpression: *", "DEL PrimitiveType: byte", "DEL ArrayType: byte[]", "DEL SimpleName: rawLen", "DEL Dimension", "DEL ArrayCreation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL InfixExpression: +", "DEL SimpleName: xmldsigBytes", "DEL NumberLiteral: 2", "DEL ExpressionStatement", "DEL SimpleName: i", "DEL InfixExpression: -", "DEL SimpleName: i", "DEL SimpleName: i", "DEL InfixExpression: -", "DEL SimpleName: rLength", "DEL MethodInvocation", "DEL SimpleName: offset", "DEL SimpleName: rawLen"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: j", "DEL InfixExpression: *", "DEL SimpleName: rLength", "DEL SimpleName: arraycopy", "DEL NumberLiteral: 2", "DEL SimpleName: j", "DEL ExpressionStatement", "DEL SimpleName: j", "DEL NumberLiteral: 2", "DEL SimpleName: xmldsigBytes", "DEL NumberLiteral: 2", "DEL SimpleName: System", "DEL SimpleName: offset", "DEL SimpleName: sLength", "DEL InfixExpression: +", "DEL SimpleName: rawLen", "DEL SimpleName: asn1Bytes", "DEL InfixExpression: -", "DEL MethodInvocation", "DEL InfixExpression: -"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: xmldsigBytes"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL PrimitiveType: int", "DEL SimpleName: rawLen", "DEL VariableDeclarationFragment", "DEL InfixExpression: /", "DEL NumberLiteral: 2", "DEL VariableDeclarationStatement", "DEL QualifiedName: xmldsigBytes.length"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int"]}, {"root": "DEL ForStatement", "operations": ["DEL SimpleName: rawLen", "DEL SimpleName: i", "DEL SimpleName: i", "DEL InfixExpression: ==", "DEL NumberLiteral: 0", "DEL ArrayAccess", "DEL ForStatement", "DEL SimpleName: xmldsigBytes", "DEL InfixExpression: >", "DEL SimpleName: i", "DEL SimpleName: rawLen", "DEL InfixExpression: &&", "DEL PostfixExpression: --", "DEL Assignment: =", "DEL SimpleName: i", "DEL NumberLiteral: 0", "DEL EmptyStatement", "DEL InfixExpression: -"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: i", "DEL SimpleName: j", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment"]}, {"root": "DEL IfStatement", "operations": ["DEL InfixExpression: <", "DEL IfStatement", "DEL Assignment: +=", "DEL ExpressionStatement", "DEL SimpleName: j", "DEL InfixExpression: -", "DEL SimpleName: xmldsigBytes", "DEL NumberLiteral: 1", "DEL SimpleName: i", "DEL SimpleName: rawLen", "DEL Block", "DEL NumberLiteral: 0", "DEL ArrayAccess"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL SimpleName: k"]}, {"root": "DEL ForStatement", "operations": ["DEL SimpleName: rawLen", "DEL PostfixExpression: --", "DEL SimpleName: k", "DEL SimpleName: k", "DEL SimpleName: rawLen", "DEL ForStatement", "DEL ArrayAccess", "DEL InfixExpression: ==", "DEL NumberLiteral: 0", "DEL InfixExpression: -", "DEL NumberLiteral: 2", "DEL SimpleName: k", "DEL Assignment: =", "DEL InfixExpression: >", "DEL SimpleName: k", "DEL InfixExpression: &&", "DEL EmptyStatement", "DEL NumberLiteral: 0", "DEL SimpleName: xmldsigBytes", "DEL InfixExpression: *"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: l", "DEL PrimitiveType: int", "DEL SimpleName: k", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL ArrayAccess", "DEL NumberLiteral: 1", "DEL SimpleName: k", "DEL SimpleName: l", "DEL InfixExpression: *", "DEL NumberLiteral: 0", "DEL SimpleName: rawLen", "DEL SimpleName: xmldsigBytes", "DEL InfixExpression: -", "DEL Assignment: +=", "DEL ExpressionStatement", "DEL Block", "DEL InfixExpression: <", "DEL NumberLiteral: 2"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: len", "DEL SimpleName: j", "DEL SimpleName: l", "DEL NumberLiteral: 2", "DEL NumberLiteral: 2", "DEL VariableDeclarationStatement", "DEL InfixExpression: +", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int"]}, {"root": "DEL IfStatement", "operations": ["DEL StringLiteral: \"Invalid XMLDSIG format of ECDSA signature\"", "DEL ThrowStatement", "DEL ClassInstanceCreation", "DEL NumberLiteral: 255", "DEL Block", "DEL SimpleName: len", "DEL IfStatement", "DEL SimpleName: IOException", "DEL InfixExpression: >", "DEL SimpleType: IOException"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: offset", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL PrimitiveType: byte", "DEL SimpleName: asn1Bytes", "DEL VariableDeclarationStatement", "DEL Dimension"]}, {"root": "DEL IfStatement", "operations": ["DEL Assignment: =", "DEL ExpressionStatement", "DEL NumberLiteral: 2", "DEL NumberLiteral: 2", "DEL SimpleName: asn1Bytes", "DEL IfStatement", "DEL ArrayType: byte[]", "DEL SimpleName: len", "DEL ExpressionStatement", "DEL ArrayCreation", "DEL ExpressionStatement", "DEL Assignment: =", "DEL ArrayAccess", "DEL NumberLiteral: 128", "DEL Block", "DEL SimpleName: j", "DEL NumberLiteral: 3", "DEL InfixExpression: +", "DEL SimpleName: offset", "DEL PrimitiveType: byte", "DEL NumberLiteral: 2", "DEL PrimitiveType: byte", "DEL SimpleName: l", "DEL InfixExpression: <", "DEL NumberLiteral: 0x81", "DEL Assignment: =", "DEL NumberLiteral: 1", "DEL NumberLiteral: 1", "DEL CastExpression", "DEL NumberLiteral: 2", "DEL SimpleName: j", "DEL ExpressionStatement", "DEL SimpleName: asn1Bytes", "DEL Dimension", "DEL NumberLiteral: 2", "DEL Block", "DEL InfixExpression: +", "DEL ArrayType: byte[]", "DEL Dimension", "DEL NumberLiteral: 2", "DEL Assignment: =", "DEL ArrayCreation", "DEL ExpressionStatement", "DEL SimpleName: offset", "DEL PrimitiveType: byte", "DEL SimpleName: l", "DEL SimpleName: asn1Bytes", "DEL Assignment: ="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: asn1Bytes", "DEL Assignment: =", "DEL ExpressionStatement", "DEL ArrayAccess", "DEL NumberLiteral: 48", "DEL NumberLiteral: 0"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: len", "DEL CastExpression", "DEL ExpressionStatement", "DEL SimpleName: offset", "DEL ArrayAccess", "DEL SimpleName: asn1Bytes", "DEL PostfixExpression: ++", "DEL Assignment: =", "DEL PrimitiveType: byte"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ArrayAccess", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: asn1Bytes", "DEL PostfixExpression: ++", "DEL NumberLiteral: 2", "DEL SimpleName: offset"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL PrimitiveType: byte", "DEL SimpleName: j", "DEL CastExpression", "DEL SimpleName: asn1Bytes", "DEL ArrayAccess", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: offset", "DEL PostfixExpression: ++"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: i", "DEL SimpleName: i", "DEL SimpleName: rawLen", "DEL MethodInvocation", "DEL SimpleName: offset", "DEL InfixExpression: -", "DEL SimpleName: j", "DEL InfixExpression: -", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL SimpleName: asn1Bytes", "DEL SimpleName: i"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: j", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL Assignment: +="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL PostfixExpression: ++", "DEL NumberLiteral: 2", "DEL ArrayAccess", "DEL SimpleName: offset", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: asn1Bytes"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL ArrayAccess", "DEL SimpleName: l", "DEL SimpleName: asn1Bytes", "DEL PrimitiveType: byte", "DEL SimpleName: offset", "DEL PostfixExpression: ++", "DEL ExpressionStatement", "DEL CastExpression"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: System", "DEL SimpleName: asn1Bytes", "DEL SimpleName: k", "DEL InfixExpression: -", "DEL InfixExpression: -", "DEL MethodInvocation", "DEL SimpleName: arraycopy", "DEL SimpleName: xmldsigBytes", "DEL SimpleName: k", "DEL ExpressionStatement", "DEL SimpleName: k", "DEL NumberLiteral: 2", "DEL SimpleName: rawLen", "DEL SimpleName: l", "DEL InfixExpression: *", "DEL SimpleName: offset", "DEL InfixExpression: +"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: asn1Bytes", "DEL ReturnStatement"]}]}}, {"SignatureECDSA_diff": {"operations": ["Insert ReturnStatement(123) into Block(124) at 0", "Insert ReturnStatement(157) into Block(158) at 0", "Insert MethodInvocation(122) into ReturnStatement(123) at 0", "Insert MethodInvocation(156) into ReturnStatement(157) at 0", "Update SimpleName: System(311) to ECDSAUtils", "Move SimpleName: System(311) into MethodInvocation(122) at 0", "Update SimpleName: arraycopy(312) to convertASN1toXMLDSIG", "Move SimpleName: arraycopy(312) into MethodInvocation(122) at 1", "Move SimpleName: asn1Bytes(313) into MethodInvocation(122) at 2", "Update SimpleName: System(576) to ECDSAUtils", "Move SimpleName: System(576) into MethodInvocation(156) at 0", "Update SimpleName: arraycopy(577) to convertXMLDSIGtoASN1", "Move SimpleName: arraycopy(577) into MethodInvocation(156) at 1", "Move SimpleName: xmldsigBytes(578) into MethodInvocation(156) at 2", "Delete QualifiedName: asn1Bytes.length(119)", "Delete NumberLiteral: 8(120)", "Delete InfixExpression: <(121)", "Delete SimpleName: asn1Bytes(122)", "Delete NumberLiteral: 0(123)", "Delete ArrayAccess(124)", "Delete NumberLiteral: 48(125)", "Delete InfixExpression: !=(126)", "Delete InfixExpression: ||(127)", "Delete SimpleName: IOException(128)", "Delete SimpleType: IOException(129)", "Delete StringLiteral: \"Invalid ASN.1 format of ECDSA signature\"(130)", "Delete ClassInstanceCreation(131)", "Delete ThrowStatement(132)", "Delete Block(133)", "Delete IfStatement(134)", "Delete PrimitiveType: int(135)", "Delete SimpleName: offset(136)", "Delete VariableDeclarationFragment(137)", "Delete VariableDeclarationStatement(138)", "Delete SimpleName: asn1Bytes(139)", "Delete NumberLiteral: 1(140)", "Delete ArrayAccess(141)", "Delete NumberLiteral: 0(142)", "Delete InfixExpression: >(143)", "Delete SimpleName: offset(144)", "Delete NumberLiteral: 2(145)", "Delete Assignment: =(146)", "Delete ExpressionStatement(147)", "Delete Block(148)", "Delete SimpleName: asn1Bytes(149)", "Delete NumberLiteral: 1(150)", "Delete ArrayAccess(151)", "Delete PrimitiveType: byte(152)", "Delete NumberLiteral: 0x81(153)", "Delete CastExpression(154)", "Delete InfixExpression: ==(155)", "Delete SimpleName: offset(156)", "Delete NumberLiteral: 3(157)", "Delete Assignment: =(158)", "Delete ExpressionStatement(159)", "Delete Block(160)", "Delete SimpleName: IOException(161)", "Delete SimpleType: IOException(162)", "Delete StringLiteral: \"Invalid ASN.1 format of ECDSA signature\"(163)", "Delete ClassInstanceCreation(164)", "Delete ThrowStatement(165)", "Delete Block(166)", "Delete IfStatement(167)", "Delete IfStatement(168)", "Delete PrimitiveType: byte(169)", "Delete SimpleName: rLength(170)", "Delete SimpleName: asn1Bytes(171)", "Delete SimpleName: offset(172)", "Delete NumberLiteral: 1(173)", "Delete InfixExpression: +(174)", "Delete ArrayAccess(175)", "Delete VariableDeclarationFragment(176)", "Delete VariableDeclarationStatement(177)", "Delete PrimitiveType: int(178)", "Delete SimpleName: i(179)", "Delete VariableDeclarationFragment(180)", "Delete VariableDeclarationStatement(181)", "Delete SimpleName: i(182)", "Delete SimpleName: rLength(183)", "Delete Assignment: =(184)", "Delete SimpleName: i(185)", "Delete NumberLiteral: 0(186)", "Delete InfixExpression: >(187)", "Delete SimpleName: asn1Bytes(188)", "Delete SimpleName: offset(189)", "Delete NumberLiteral: 2(190)", "Delete SimpleName: rLength(191)", "Delete InfixExpression: +(192)", "Delete SimpleName: i(193)", "Delete InfixExpression: -(194)", "Delete ArrayAccess(195)", "Delete NumberLiteral: 0(196)", "Delete InfixExpression: ==(197)", "Delete InfixExpression: &&(198)", "Delete SimpleName: i(199)", "Delete PostfixExpression: --(200)", "Delete EmptyStatement(201)", "Delete ForStatement(202)", "Delete PrimitiveType: byte(203)", "Delete SimpleName: sLength(204)", "Delete SimpleName: asn1Bytes(205)", "Delete SimpleName: offset(206)", "Delete NumberLiteral: 2(207)", "Delete SimpleName: rLength(208)", "Delete NumberLiteral: 1(209)", "Delete InfixExpression: +(210)", "Delete ArrayAccess(211)", "Delete VariableDeclarationFragment(212)", "Delete VariableDeclarationStatement(213)", "Delete PrimitiveType: int(214)", "Delete SimpleName: j(215)", "Delete VariableDeclarationFragment(216)", "Delete VariableDeclarationStatement(217)", "Delete SimpleName: j(218)", "Delete SimpleName: sLength(219)", "Delete Assignment: =(220)", "Delete SimpleName: j(221)", "Delete NumberLiteral: 0(222)", "Delete InfixExpression: >(223)", "Delete SimpleName: asn1Bytes(224)", "Delete SimpleName: offset(225)", "Delete NumberLiteral: 2(226)", "Delete SimpleName: rLength(227)", "Delete NumberLiteral: 2(228)", "Delete SimpleName: sLength(229)", "Delete InfixExpression: +(230)", "Delete SimpleName: j(231)", "Delete InfixExpression: -(232)", "Delete ArrayAccess(233)", "Delete NumberLiteral: 0(234)", "Delete InfixExpression: ==(235)", "Delete InfixExpression: &&(236)", "Delete SimpleName: j(237)", "Delete PostfixExpression: --(238)", "Delete EmptyStatement(239)", "Delete ForStatement(240)", "Delete PrimitiveType: int(241)", "Delete SimpleName: rawLen(242)", "Delete SimpleName: Math(243)", "Delete SimpleName: max(244)", "Delete SimpleName: i(245)", "Delete SimpleName: j(246)", "Delete MethodInvocation(247)", "Delete VariableDeclarationFragment(248)", "Delete VariableDeclarationStatement(249)", "Delete SimpleName: asn1Bytes(250)", "Delete SimpleName: offset(251)", "Delete NumberLiteral: 1(252)", "Delete InfixExpression: -(253)", "Delete ArrayAccess(254)", "Delete NumberLiteral: 0xff(255)", "Delete InfixExpression: &(256)", "Delete ParenthesizedExpression(257)", "Delete QualifiedName: asn1Bytes.length(258)", "Delete SimpleName: offset(259)", "Delete InfixExpression: -(260)", "Delete InfixExpression: !=(261)", "Delete SimpleName: asn1Bytes(262)", "Delete SimpleName: offset(263)", "Delete NumberLiteral: 1(264)", "Delete InfixExpression: -(265)", "Delete ArrayAccess(266)", "Delete NumberLiteral: 0xff(267)", "Delete InfixExpression: &(268)", "Delete ParenthesizedExpression(269)", "Delete NumberLiteral: 2(270)", "Delete SimpleName: rLength(271)", "Delete NumberLiteral: 2(272)", "Delete SimpleName: sLength(273)", "Delete InfixExpression: +(274)", "Delete InfixExpression: !=(275)", "Delete InfixExpression: ||(276)", "Delete SimpleName: asn1Bytes(277)", "Delete SimpleName: offset(278)", "Delete ArrayAccess(279)", "Delete NumberLiteral: 2(280)", "Delete InfixExpression: !=(281)", "Delete InfixExpression: ||(282)", "Delete SimpleName: asn1Bytes(283)", "Delete SimpleName: offset(284)", "Delete NumberLiteral: 2(285)", "Delete SimpleName: rLength(286)", "Delete InfixExpression: +(287)", "Delete ArrayAccess(288)", "Delete NumberLiteral: 2(289)", "Delete InfixExpression: !=(290)", "Delete InfixExpression: ||(291)", "Delete SimpleName: IOException(292)", "Delete SimpleType: IOException(293)", "Delete StringLiteral: \"Invalid ASN.1 format of ECDSA signature\"(294)", "Delete ClassInstanceCreation(295)", "Delete ThrowStatement(296)", "Delete Block(297)", "Delete IfStatement(298)", "Delete PrimitiveType: byte(299)", "Delete SimpleName: xmldsigBytes(300)", "Delete Dimension(301)", "Delete PrimitiveType: byte(302)", "Delete Dimension(303)", "Delete ArrayType: byte[](304)", "Delete NumberLiteral: 2(305)", "Delete SimpleName: rawLen(306)", "Delete InfixExpression: *(307)", "Delete ArrayCreation(308)", "Delete VariableDeclarationFragment(309)", "Delete VariableDeclarationStatement(310)", "Delete SimpleName: offset(314)", "Delete NumberLiteral: 2(315)", "Delete SimpleName: rLength(316)", "Delete InfixExpression: +(317)", "Delete SimpleName: i(318)", "Delete InfixExpression: -(319)", "Delete SimpleName: xmldsigBytes(320)", "Delete SimpleName: rawLen(321)", "Delete SimpleName: i(322)", "Delete InfixExpression: -(323)", "Delete SimpleName: i(324)", "Delete MethodInvocation(325)", "Delete ExpressionStatement(326)", "Delete SimpleName: System(327)", "Delete SimpleName: arraycopy(328)", "Delete SimpleName: asn1Bytes(329)", "Delete SimpleName: offset(330)", "Delete NumberLiteral: 2(331)", "Delete SimpleName: rLength(332)", "Delete NumberLiteral: 2(333)", "Delete SimpleName: sLength(334)", "Delete InfixExpression: +(335)", "Delete SimpleName: j(336)", "Delete InfixExpression: -(337)", "Delete SimpleName: xmldsigBytes(338)", "Delete NumberLiteral: 2(339)", "Delete SimpleName: rawLen(340)", "Delete InfixExpression: *(341)", "Delete SimpleName: j(342)", "Delete InfixExpression: -(343)", "Delete SimpleName: j(344)", "Delete MethodInvocation(345)", "Delete ExpressionStatement(346)", "Delete SimpleName: xmldsigBytes(347)", "Delete ReturnStatement(348)", "Delete PrimitiveType: int(378)", "Delete SimpleName: rawLen(379)", "Delete QualifiedName: xmldsigBytes.length(380)", "Delete NumberLiteral: 2(381)", "Delete InfixExpression: /(382)", "Delete VariableDeclarationFragment(383)", "Delete VariableDeclarationStatement(384)", "Delete PrimitiveType: int(385)", "Delete SimpleName: i(386)", "Delete VariableDeclarationFragment(387)", "Delete VariableDeclarationStatement(388)", "Delete SimpleName: i(389)", "Delete SimpleName: rawLen(390)", "Delete Assignment: =(391)", "Delete SimpleName: i(392)", "Delete NumberLiteral: 0(393)", "Delete InfixExpression: >(394)", "Delete SimpleName: xmldsigBytes(395)", "Delete SimpleName: rawLen(396)", "Delete SimpleName: i(397)", "Delete InfixExpression: -(398)", "Delete ArrayAccess(399)", "Delete NumberLiteral: 0(400)", "Delete InfixExpression: ==(401)", "Delete InfixExpression: &&(402)", "Delete SimpleName: i(403)", "Delete PostfixExpression: --(404)", "Delete EmptyStatement(405)", "Delete ForStatement(406)", "Delete PrimitiveType: int(407)", "Delete SimpleName: j(408)", "Delete SimpleName: i(409)", "Delete VariableDeclarationFragment(410)", "Delete VariableDeclarationStatement(411)", "Delete SimpleName: xmldsigBytes(412)", "Delete SimpleName: rawLen(413)", "Delete SimpleName: i(414)", "Delete InfixExpression: -(415)", "Delete ArrayAccess(416)", "Delete NumberLiteral: 0(417)", "Delete InfixExpression: <(418)", "Delete SimpleName: j(419)", "Delete NumberLiteral: 1(420)", "Delete Assignment: +=(421)", "Delete ExpressionStatement(422)", "Delete Block(423)", "Delete IfStatement(424)", "Delete PrimitiveType: int(425)", "Delete SimpleName: k(426)", "Delete VariableDeclarationFragment(427)", "Delete VariableDeclarationStatement(428)", "Delete SimpleName: k(429)", "Delete SimpleName: rawLen(430)", "Delete Assignment: =(431)", "Delete SimpleName: k(432)", "Delete NumberLiteral: 0(433)", "Delete InfixExpression: >(434)", "Delete SimpleName: xmldsigBytes(435)", "Delete NumberLiteral: 2(436)", "Delete SimpleName: rawLen(437)", "Delete InfixExpression: *(438)", "Delete SimpleName: k(439)", "Delete InfixExpression: -(440)", "Delete ArrayAccess(441)", "Delete NumberLiteral: 0(442)", "Delete InfixExpression: ==(443)", "Delete InfixExpression: &&(444)", "Delete SimpleName: k(445)", "Delete PostfixExpression: --(446)", "Delete EmptyStatement(447)", "Delete ForStatement(448)", "Delete PrimitiveType: int(449)", "Delete SimpleName: l(450)", "Delete SimpleName: k(451)", "Delete VariableDeclarationFragment(452)", "Delete VariableDeclarationStatement(453)", "Delete SimpleName: xmldsigBytes(454)", "Delete NumberLiteral: 2(455)", "Delete SimpleName: rawLen(456)", "Delete InfixExpression: *(457)", "Delete SimpleName: k(458)", "Delete InfixExpression: -(459)", "Delete ArrayAccess(460)", "Delete NumberLiteral: 0(461)", "Delete InfixExpression: <(462)", "Delete SimpleName: l(463)", "Delete NumberLiteral: 1(464)", "Delete Assignment: +=(465)", "Delete ExpressionStatement(466)", "Delete Block(467)", "Delete IfStatement(468)", "Delete PrimitiveType: int(469)", "Delete SimpleName: len(470)", "Delete NumberLiteral: 2(471)", "Delete SimpleName: j(472)", "Delete NumberLiteral: 2(473)", "Delete SimpleName: l(474)", "Delete InfixExpression: +(475)", "Delete VariableDeclarationFragment(476)", "Delete VariableDeclarationStatement(477)", "Delete SimpleName: len(478)", "Delete NumberLiteral: 255(479)", "Delete InfixExpression: >(480)", "Delete SimpleName: IOException(481)", "Delete SimpleType: IOException(482)", "Delete StringLiteral: \"Invalid XMLDSIG format of ECDSA signature\"(483)", "Delete ClassInstanceCreation(484)", "Delete ThrowStatement(485)", "Delete Block(486)", "Delete IfStatement(487)", "Delete PrimitiveType: int(488)", "Delete SimpleName: offset(489)", "Delete VariableDeclarationFragment(490)", "Delete VariableDeclarationStatement(491)", "Delete PrimitiveType: byte(492)", "Delete SimpleName: asn1Bytes(493)", "Delete Dimension(494)", "Delete VariableDeclarationFragment(495)", "Delete VariableDeclarationStatement(496)", "Delete SimpleName: len(497)", "Delete NumberLiteral: 128(498)", "Delete InfixExpression: <(499)", "Delete SimpleName: asn1Bytes(500)", "Delete PrimitiveType: byte(501)", "Delete Dimension(502)", "Delete ArrayType: byte[](503)", "Delete NumberLiteral: 2(504)", "Delete NumberLiteral: 2(505)", "Delete SimpleName: j(506)", "Delete NumberLiteral: 2(507)", "Delete SimpleName: l(508)", "Delete InfixExpression: +(509)", "Delete ArrayCreation(510)", "Delete Assignment: =(511)", "Delete ExpressionStatement(512)", "Delete SimpleName: offset(513)", "Delete NumberLiteral: 1(514)", "Delete Assignment: =(515)", "Delete ExpressionStatement(516)", "Delete Block(517)", "Delete SimpleName: asn1Bytes(518)", "Delete PrimitiveType: byte(519)", "Delete Dimension(520)", "Delete ArrayType: byte[](521)", "Delete NumberLiteral: 3(522)", "Delete NumberLiteral: 2(523)", "Delete SimpleName: j(524)", "Delete NumberLiteral: 2(525)", "Delete SimpleName: l(526)", "Delete InfixExpression: +(527)", "Delete ArrayCreation(528)", "Delete Assignment: =(529)", "Delete ExpressionStatement(530)", "Delete SimpleName: asn1Bytes(531)", "Delete NumberLiteral: 1(532)", "Delete ArrayAccess(533)", "Delete PrimitiveType: byte(534)", "Delete NumberLiteral: 0x81(535)", "Delete CastExpression(536)", "Delete Assignment: =(537)", "Delete ExpressionStatement(538)", "Delete SimpleName: offset(539)", "Delete NumberLiteral: 2(540)", "Delete Assignment: =(541)", "Delete ExpressionStatement(542)", "Delete Block(543)", "Delete IfStatement(544)", "Delete SimpleName: asn1Bytes(545)", "Delete NumberLiteral: 0(546)", "Delete ArrayAccess(547)", "Delete NumberLiteral: 48(548)", "Delete Assignment: =(549)", "Delete ExpressionStatement(550)", "Delete SimpleName: asn1Bytes(551)", "Delete SimpleName: offset(552)", "Delete PostfixExpression: ++(553)", "Delete ArrayAccess(554)", "Delete PrimitiveType: byte(555)", "Delete SimpleName: len(556)", "Delete CastExpression(557)", "Delete Assignment: =(558)", "Delete ExpressionStatement(559)", "Delete SimpleName: asn1Bytes(560)", "Delete SimpleName: offset(561)", "Delete PostfixExpression: ++(562)", "Delete ArrayAccess(563)", "Delete NumberLiteral: 2(564)", "Delete Assignment: =(565)", "Delete ExpressionStatement(566)", "Delete SimpleName: asn1Bytes(567)", "Delete SimpleName: offset(568)", "Delete PostfixExpression: ++(569)", "Delete ArrayAccess(570)", "Delete PrimitiveType: byte(571)", "Delete SimpleName: j(572)", "Delete CastExpression(573)", "Delete Assignment: =(574)", "Delete ExpressionStatement(575)", "Delete SimpleName: rawLen(579)", "Delete SimpleName: i(580)", "Delete InfixExpression: -(581)", "Delete SimpleName: asn1Bytes(582)", "Delete SimpleName: offset(583)", "Delete SimpleName: j(584)", "Delete InfixExpression: +(585)", "Delete SimpleName: i(586)", "Delete InfixExpression: -(587)", "Delete SimpleName: i(588)", "Delete MethodInvocation(589)", "Delete ExpressionStatement(590)", "Delete SimpleName: offset(591)", "Delete SimpleName: j(592)", "Delete Assignment: +=(593)", "Delete ExpressionStatement(594)", "Delete SimpleName: asn1Bytes(595)", "Delete SimpleName: offset(596)", "Delete PostfixExpression: ++(597)", "Delete ArrayAccess(598)", "Delete NumberLiteral: 2(599)", "Delete Assignment: =(600)", "Delete ExpressionStatement(601)", "Delete SimpleName: asn1Bytes(602)", "Delete SimpleName: offset(603)", "Delete PostfixExpression: ++(604)", "Delete ArrayAccess(605)", "Delete PrimitiveType: byte(606)", "Delete SimpleName: l(607)", "Delete CastExpression(608)", "Delete Assignment: =(609)", "Delete ExpressionStatement(610)", "Delete SimpleName: System(611)", "Delete SimpleName: arraycopy(612)", "Delete SimpleName: xmldsigBytes(613)", "Delete NumberLiteral: 2(614)", "Delete SimpleName: rawLen(615)", "Delete InfixExpression: *(616)", "Delete SimpleName: k(617)", "Delete InfixExpression: -(618)", "Delete SimpleName: asn1Bytes(619)", "Delete SimpleName: offset(620)", "Delete SimpleName: l(621)", "Delete InfixExpression: +(622)", "Delete SimpleName: k(623)", "Delete InfixExpression: -(624)", "Delete SimpleName: k(625)", "Delete MethodInvocation(626)", "Delete ExpressionStatement(627)", "Delete SimpleName: asn1Bytes(628)", "Delete ReturnStatement(629)"]}}, {"PKISignatureAlgorithm_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: org.apache.xml.security.algorithms.implementations.ECDSAUtils to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: org.apache.xml.security.utils.JavaUtils to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "UPDATE from DSAUtils to JavaUtils", "operations": ["UPD SimpleName: DSAUtils from DSAUtils to JavaUtils", "UPD SimpleName: DSAUtils from DSAUtils to JavaUtils"]}, {"root": "UPDATE from convertASN1toXMLDSIG to convertDsaASN1toXMLDSIG", "operations": ["UPD SimpleName: convertASN1toXMLDSIG from convertASN1toXMLDSIG to convertDsaASN1toXMLDSIG"]}, {"root": "INS NumberLiteral: 20 to MethodInvocation at 3", "operations": ["INS NumberLiteral: 20 to MethodInvocation at 3"]}, {"root": "UPDATE from convertXMLDSIGtoASN1 to convertDsaXMLDSIGtoASN1", "operations": ["UPD SimpleName: convertXMLDSIGtoASN1 from convertXMLDSIGtoASN1 to convertDsaXMLDSIGtoASN1"]}, {"root": "INS NumberLiteral: 20 to MethodInvocation at 3", "operations": ["INS NumberLiteral: 20 to MethodInvocation at 3"]}]}}, {"PKISignatureAlgorithm_diff": {"operations": ["Insert ImportDeclaration(19) into CompilationUnit(535) at 1", "Insert ImportDeclaration(23) into CompilationUnit(535) at 3", "Insert QualifiedName: org.apache.xml.security.algorithms.implementations.ECDSAUtils(18) into ImportDeclaration(19) at 0", "Insert QualifiedName: org.apache.xml.security.utils.JavaUtils(22) into ImportDeclaration(23) at 0", "Update SimpleName: DSAUtils(345) to JavaUtils", "Update SimpleName: convertASN1toXMLDSIG(346) to convertDsaASN1toXMLDSIG", "Insert NumberLiteral: 20(352) into MethodInvocation(353) at 3", "Update SimpleName: DSAUtils(455) to JavaUtils", "Update SimpleName: convertXMLDSIGtoASN1(456) to convertDsaXMLDSIGtoASN1", "Insert NumberLiteral: 20(463) into MethodInvocation(464) at 3"]}}, {"ECKeyValueSecurityToken_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 1"]}, {"root": "UPDATE from org.apache.xml.security.stax.impl.algorithms.ECDSAUtils to org.apache.xml.security.algorithms.implementations.ECDSAUtils", "operations": ["UPD QualifiedName: org.apache.xml.security.stax.impl.algorithms.ECDSAUtils from org.apache.xml.security.stax.impl.algorithms.ECDSAUtils to org.apache.xml.security.algorithms.implementations.ECDSAUtils"]}]}}, {"ECKeyValueSecurityToken_diff": {"operations": ["Move ImportDeclaration(25) into CompilationUnit(343) at 1", "Update QualifiedName: org.apache.xml.security.stax.impl.algorithms.ECDSAUtils(24) to org.apache.xml.security.algorithms.implementations.ECDSAUtils"]}}], "commit_stats": [{"total_files": 8, "deleted_files": 2, "testing": "False", "maintenance": "True", "build": "True"}]}