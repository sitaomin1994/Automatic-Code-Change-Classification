{"application": "google-closure-compiler", "csha": "fd1eb16ae364cba7a78ffe08ef2400e0bc7cc2fa", "files": [{"NewTypeInference_cluster": {"actions": [{"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 6"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: required", "DEL InfixExpression: &&", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: found", "DEL SimpleName: isTypeVariable", "DEL Block", "DEL SimpleName: isTypeVariable", "DEL PrefixExpression: !", "DEL IfStatement", "DEL MethodInvocation"]}]}}, {"NewTypeInference_diff": {"operations": ["Move Block(1860) into MethodDeclaration(1857) at 6", "Move ExpressionStatement(1866) into Block(1856) at 1", "Delete SimpleName: found(1838)", "Delete SimpleName: isTypeVariable(1839)", "Delete MethodInvocation(1840)", "Delete PrefixExpression: !(1841)", "Delete SimpleName: required(1842)", "Delete SimpleName: isTypeVariable(1843)", "Delete MethodInvocation(1844)", "Delete PrefixExpression: !(1845)", "Delete InfixExpression: &&(1846)", "Delete IfStatement(1861)", "Delete Block(1867)"]}}, {"TypeMismatch_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: required to MethodInvocation at 0", "INS TextElement: bounded generics. to TagElement at 7", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: required to SingleVariableDeclaration at 1", "INS SimpleType: TypeI to SingleVariableDeclaration at 0", "INS Modifier: private to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS Modifier: static to MethodDeclaration at 2", "INS TextElement: However, we don't want to block disambiguation in these cases. So, to avoid types getting to TagElement at 2", "INS SimpleName: bothAreNotTypeVariables to MethodDeclaration at 4", "INS SimpleType: TypeI to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleName: found to SingleVariableDeclaration at 1", "INS SimpleName: TypeI to SimpleType: TypeI at 0", "INS InfixExpression: && to ReturnStatement at 0", "INS SimpleName: isTypeVariable to MethodInvocation at 1", "INS Block to MethodDeclaration at 7", "INS SimpleName: TypeI to SimpleType: TypeI at 0", "INS SimpleName: found to MethodInvocation at 0", "INS SimpleName: isTypeVariable to MethodInvocation at 1", "INS TextElement: *and* we have switched all the unsafe uses of type variables in the code base to use to TagElement at 6", "INS PrimitiveType: boolean to MethodDeclaration at 3", "INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS TextElement: we would have to add casts all over the code base. to TagElement at 4", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS TextElement: TODO(dimvar): this can be made safe in the distant future where we have bounded generics to TagElement at 5", "INS TextElement: In the old type checker, a type variable is considered unknown, so other types can be to TagElement at 0", "INS TextElement: invalidated, we don't register the mismatch. Otherwise, to get good disambiguation, to TagElement at 3", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS TextElement: used as type variables, and vice versa, without warning. NTI correctly warns. to TagElement at 1"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS SimpleName: required to MethodInvocation at 2", "INS SimpleName: found to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: bothAreNotTypeVariables to MethodInvocation at 0", "INS IfStatement to Block at 3", "INS MethodInvocation to IfStatement at 0"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS ParenthesizedExpression to InfixExpression: && at 0", "INS SimpleName: targetType to MethodInvocation at 2", "INS SimpleName: bothAreNotTypeVariables to MethodInvocation at 0", "INS SimpleName: sourceType to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: && at 1", "INS InfixExpression: && to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS MethodInvocation to InfixExpression: && at 3", "operations": ["INS SimpleName: targetType to MethodInvocation at 2", "INS SimpleName: bothAreNotTypeVariables to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: && at 3", "INS SimpleName: sourceType to MethodInvocation at 1"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS SimpleName: bothAreNotTypeVariables to MethodInvocation at 0", "INS SimpleName: strictMismatch to InfixExpression: && at 0", "INS SimpleName: required to MethodInvocation at 2", "INS SimpleName: found to MethodInvocation at 1", "INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to InfixExpression: && at 1"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV InfixExpression: || to ParenthesizedExpression at 0"]}, {"root": "DEL SimpleName: strictMismatch", "operations": ["DEL SimpleName: strictMismatch"]}]}}, {"TypeMismatch_diff": {"operations": ["Insert MethodDeclaration(194) into TypeDeclaration: class(820) at 8", "Insert Javadoc(170) into MethodDeclaration(194) at 0", "Insert Modifier: private(171) into MethodDeclaration(194) at 1", "Insert Modifier: static(172) into MethodDeclaration(194) at 2", "Insert PrimitiveType: boolean(173) into MethodDeclaration(194) at 3", "Insert SimpleName: bothAreNotTypeVariables(174) into MethodDeclaration(194) at 4", "Insert SingleVariableDeclaration(178) into MethodDeclaration(194) at 5", "Insert SingleVariableDeclaration(182) into MethodDeclaration(194) at 6", "Insert Block(193) into MethodDeclaration(194) at 7", "Insert TagElement(169) into Javadoc(170) at 0", "Insert SimpleType: TypeI(176) into SingleVariableDeclaration(178) at 0", "Insert SimpleName: found(177) into SingleVariableDeclaration(178) at 1", "Insert SimpleType: TypeI(180) into SingleVariableDeclaration(182) at 0", "Insert SimpleName: required(181) into SingleVariableDeclaration(182) at 1", "Insert ReturnStatement(192) into Block(193) at 0", "Insert IfStatement(302) into Block(389) at 3", "Insert TextElement: In the old type checker, a type variable is considered unknown, so other types can be(161) into TagElement(169) at 0", "Insert TextElement: used as type variables, and vice versa, without warning. NTI correctly warns.(162) into TagElement(169) at 1", "Insert TextElement: However, we don't want to block disambiguation in these cases. So, to avoid types getting(163) into TagElement(169) at 2", "Insert TextElement: invalidated, we don't register the mismatch. Otherwise, to get good disambiguation,(164) into TagElement(169) at 3", "Insert TextElement: we would have to add casts all over the code base.(165) into TagElement(169) at 4", "Insert TextElement: TODO(dimvar): this can be made safe in the distant future where we have bounded generics(166) into TagElement(169) at 5", "Insert TextElement: *and* we have switched all the unsafe uses of type variables in the code base to use(167) into TagElement(169) at 6", "Insert TextElement: bounded generics.(168) into TagElement(169) at 7", "Insert SimpleName: TypeI(175) into SimpleType: TypeI(176) at 0", "Insert SimpleName: TypeI(179) into SimpleType: TypeI(180) at 0", "Insert InfixExpression: &&(191) into ReturnStatement(192) at 0", "Insert MethodInvocation(287) into IfStatement(302) at 0", "Insert Block(301) into IfStatement(302) at 1", "Insert InfixExpression: &&(545) into IfStatement(569) at 0", "Insert PrefixExpression: !(186) into InfixExpression: &&(191) at 0", "Insert PrefixExpression: !(190) into InfixExpression: &&(191) at 1", "Insert SimpleName: bothAreNotTypeVariables(284) into MethodInvocation(287) at 0", "Insert SimpleName: found(285) into MethodInvocation(287) at 1", "Insert SimpleName: required(286) into MethodInvocation(287) at 2", "Move ExpressionStatement(257) into Block(301) at 0", "Insert MethodInvocation(439) into InfixExpression: &&(440) at 3", "Insert ParenthesizedExpression(540) into InfixExpression: &&(545) at 0", "Insert MethodInvocation(544) into InfixExpression: &&(545) at 1", "Insert MethodInvocation(185) into PrefixExpression: !(186) at 0", "Insert MethodInvocation(189) into PrefixExpression: !(190) at 0", "Insert InfixExpression: &&(265) into IfStatement(280) at 0", "Insert SimpleName: bothAreNotTypeVariables(436) into MethodInvocation(439) at 0", "Insert SimpleName: sourceType(437) into MethodInvocation(439) at 1", "Insert SimpleName: targetType(438) into MethodInvocation(439) at 2", "Move InfixExpression: ||(490) into ParenthesizedExpression(540) at 0", "Insert SimpleName: bothAreNotTypeVariables(541) into MethodInvocation(544) at 0", "Insert SimpleName: sourceType(542) into MethodInvocation(544) at 1", "Insert SimpleName: targetType(543) into MethodInvocation(544) at 2", "Insert SimpleName: found(183) into MethodInvocation(185) at 0", "Insert SimpleName: isTypeVariable(184) into MethodInvocation(185) at 1", "Insert SimpleName: required(187) into MethodInvocation(189) at 0", "Insert SimpleName: isTypeVariable(188) into MethodInvocation(189) at 1", "Insert SimpleName: strictMismatch(260) into InfixExpression: &&(265) at 0", "Insert MethodInvocation(264) into InfixExpression: &&(265) at 1", "Insert SimpleName: bothAreNotTypeVariables(261) into MethodInvocation(264) at 0", "Insert SimpleName: found(262) into MethodInvocation(264) at 1", "Insert SimpleName: required(263) into MethodInvocation(264) at 2", "Delete SimpleName: strictMismatch(226)"]}}, {"JSType_cluster": {"actions": [{"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS SingleMemberAnnotation to MethodDeclaration at 0", "INS StringLiteral: \"unchecked\" to SingleMemberAnnotation at 1", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS SingleMemberAnnotation to MethodDeclaration at 0", "INS StringLiteral: \"unchecked\" to SingleMemberAnnotation at 1"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS StringLiteral: \"unchecked\" to SingleMemberAnnotation at 1", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS SingleMemberAnnotation to MethodDeclaration at 0"]}]}}, {"JSType_diff": {"operations": ["Insert SingleMemberAnnotation(10039) into MethodDeclaration(10087) at 0", "Insert SingleMemberAnnotation(10320) into MethodDeclaration(10354) at 0", "Insert SingleMemberAnnotation(10510) into MethodDeclaration(10544) at 0", "Insert SimpleName: SuppressWarnings(10037) into SingleMemberAnnotation(10039) at 0", "Insert StringLiteral: \"unchecked\"(10038) into SingleMemberAnnotation(10039) at 1", "Insert SimpleName: SuppressWarnings(10318) into SingleMemberAnnotation(10320) at 0", "Insert StringLiteral: \"unchecked\"(10319) into SingleMemberAnnotation(10320) at 1", "Insert SimpleName: SuppressWarnings(10508) into SingleMemberAnnotation(10510) at 0", "Insert StringLiteral: \"unchecked\"(10509) into SingleMemberAnnotation(10510) at 1"]}}], "commit_stats": [{"total_files": 4, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}