{"application": "google-closure-compiler", "csha": "1231aa86f3e71a66c69ac949e47fae0c5340e99e", "files": [{"PeepholeSubstituteAlternateSyntax_cluster": {"actions": [{"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 3"]}, {"root": "INS Block to SwitchStatement at 4", "operations": ["INS SimpleName: Node to SimpleType: Node at 0", "INS ExpressionStatement to Block at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: IR to MethodInvocation at 0", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS SimpleName: replaceChild to MethodInvocation at 1", "INS SimpleName: IR to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS IfStatement to Block at 1", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS InfixExpression: - to VariableDeclarationFragment at 1", "INS SimpleName: getChildCount to MethodInvocation at 1", "INS SimpleName: n to MethodInvocation at 0", "INS SimpleName: replacement to Assignment: = at 0", "INS SimpleName: n to MethodInvocation at 0", "INS SimpleName: n to MethodInvocation at 2", "INS Block to IfStatement at 2", "INS SimpleName: detachFromParent to MethodInvocation at 1", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS Block to SwitchStatement at 4", "INS SimpleName: replacement to VariableDeclarationFragment at 0", "INS SimpleName: getParent to MethodInvocation at 1", "INS InfixExpression: == to InfixExpression: || at 0", "INS SimpleName: paramCount to InfixExpression: == at 0", "INS InfixExpression: == to InfixExpression: || at 1", "INS SimpleName: paramCount to InfixExpression: == at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: isNumericResult to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: replacement to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS SimpleName: value to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: n to MethodInvocation at 0", "INS SimpleName: value to MethodInvocation at 2", "INS SimpleName: paramCount to VariableDeclarationFragment at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: paramCount to InfixExpression: == at 0", "INS SimpleName: number to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: reportCodeChange to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to Block at 1", "INS SimpleName: replacement to MethodInvocation at 3", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: replacement to Assignment: = at 0", "INS SimpleName: NodeUtil to MethodInvocation at 0", "INS ExpressionStatement to Block at 3", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS VariableDeclarationStatement to Block at 0", "INS Block to IfStatement at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: || to IfStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getLastChild to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS IfStatement to Block at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: value to Assignment: = at 1", "INS SimpleName: pos to MethodInvocation at 1", "INS BreakStatement to Block at 2", "INS Block to IfStatement at 1", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS NumberLiteral: 1 to InfixExpression: == at 1", "INS Block to IfStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to InfixExpression: - at 0", "INS SimpleName: value to VariableDeclarationFragment at 0", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "INS SwitchCase to SwitchStatement at 7", "operations": ["INS SwitchCase to SwitchStatement at 7"]}, {"root": "INS BreakStatement to SwitchStatement at 8", "operations": ["INS BreakStatement to SwitchStatement at 8"]}, {"root": "INS StringLiteral: \"Number\" to SwitchCase at 0", "operations": ["INS StringLiteral: \"Number\" to SwitchCase at 0"]}, {"root": "DEL BreakStatement", "operations": ["DEL BreakStatement"]}]}}, {"PeepholeSubstituteAlternateSyntax_diff": {"operations": ["Move SwitchCase(733) into SwitchStatement(814) at 3", "Insert Block(755) into SwitchStatement(814) at 4", "Insert SwitchCase(812) into SwitchStatement(814) at 7", "Insert BreakStatement(813) into SwitchStatement(814) at 8", "Insert StringLiteral: \"Number\"(677) into SwitchCase(678) at 0", "Insert VariableDeclarationStatement(687) into Block(755) at 0", "Insert IfStatement(753) into Block(755) at 1", "Insert BreakStatement(754) into Block(755) at 2", "Insert PrimitiveType: int(679) into VariableDeclarationStatement(687) at 0", "Insert VariableDeclarationFragment(686) into VariableDeclarationStatement(687) at 1", "Insert InfixExpression: ||(694) into IfStatement(753) at 0", "Insert Block(752) into IfStatement(753) at 1", "Insert SimpleName: paramCount(680) into VariableDeclarationFragment(686) at 0", "Insert InfixExpression: -(685) into VariableDeclarationFragment(686) at 1", "Insert InfixExpression: ==(690) into InfixExpression: ||(694) at 0", "Insert InfixExpression: ==(693) into InfixExpression: ||(694) at 1", "Insert VariableDeclarationStatement(699) into Block(752) at 0", "Insert IfStatement(740) into Block(752) at 1", "Insert ExpressionStatement(748) into Block(752) at 2", "Insert ExpressionStatement(751) into Block(752) at 3", "Insert MethodInvocation(683) into InfixExpression: -(685) at 0", "Insert NumberLiteral: 1(684) into InfixExpression: -(685) at 1", "Insert SimpleName: paramCount(688) into InfixExpression: ==(690) at 0", "Insert NumberLiteral: 0(689) into InfixExpression: ==(690) at 1", "Insert SimpleName: paramCount(691) into InfixExpression: ==(693) at 0", "Insert NumberLiteral: 1(692) into InfixExpression: ==(693) at 1", "Insert SimpleType: Node(696) into VariableDeclarationStatement(699) at 0", "Insert VariableDeclarationFragment(698) into VariableDeclarationStatement(699) at 1", "Insert InfixExpression: ==(702) into IfStatement(740) at 0", "Insert Block(710) into IfStatement(740) at 1", "Insert Block(739) into IfStatement(740) at 2", "Insert MethodInvocation(747) into ExpressionStatement(748) at 0", "Insert MethodInvocation(750) into ExpressionStatement(751) at 0", "Insert SimpleName: n(681) into MethodInvocation(683) at 0", "Insert SimpleName: getChildCount(682) into MethodInvocation(683) at 1", "Insert SimpleName: Node(695) into SimpleType: Node(696) at 0", "Insert SimpleName: replacement(697) into VariableDeclarationFragment(698) at 0", "Insert SimpleName: paramCount(700) into InfixExpression: ==(702) at 0", "Insert NumberLiteral: 0(701) into InfixExpression: ==(702) at 1", "Insert ExpressionStatement(709) into Block(710) at 0", "Insert VariableDeclarationStatement(720) into Block(739) at 0", "Insert IfStatement(738) into Block(739) at 1", "Insert MethodInvocation(743) into MethodInvocation(747) at 0", "Insert SimpleName: replaceChild(744) into MethodInvocation(747) at 1", "Insert SimpleName: n(745) into MethodInvocation(747) at 2", "Insert SimpleName: replacement(746) into MethodInvocation(747) at 3", "Insert SimpleName: reportCodeChange(749) into MethodInvocation(750) at 0", "Insert Assignment: =(708) into ExpressionStatement(709) at 0", "Insert SimpleType: Node(712) into VariableDeclarationStatement(720) at 0", "Insert VariableDeclarationFragment(719) into VariableDeclarationStatement(720) at 1", "Insert MethodInvocation(724) into IfStatement(738) at 0", "Insert Block(729) into IfStatement(738) at 1", "Insert Block(737) into IfStatement(738) at 2", "Insert SimpleName: n(741) into MethodInvocation(743) at 0", "Insert SimpleName: getParent(742) into MethodInvocation(743) at 1", "Insert SimpleName: replacement(703) into Assignment: =(708) at 0", "Insert MethodInvocation(707) into Assignment: =(708) at 1", "Insert SimpleName: Node(711) into SimpleType: Node(712) at 0", "Insert SimpleName: value(713) into VariableDeclarationFragment(719) at 0", "Insert MethodInvocation(718) into VariableDeclarationFragment(719) at 1", "Insert SimpleName: NodeUtil(721) into MethodInvocation(724) at 0", "Insert SimpleName: isNumericResult(722) into MethodInvocation(724) at 1", "Insert SimpleName: value(723) into MethodInvocation(724) at 2", "Insert ExpressionStatement(728) into Block(729) at 0", "Insert ExpressionStatement(736) into Block(737) at 0", "Insert SimpleName: IR(704) into MethodInvocation(707) at 0", "Insert SimpleName: number(705) into MethodInvocation(707) at 1", "Insert NumberLiteral: 0(706) into MethodInvocation(707) at 2", "Insert MethodInvocation(716) into MethodInvocation(718) at 0", "Insert SimpleName: detachFromParent(717) into MethodInvocation(718) at 1", "Insert Assignment: =(727) into ExpressionStatement(728) at 0", "Insert Assignment: =(735) into ExpressionStatement(736) at 0", "Insert SimpleName: n(714) into MethodInvocation(716) at 0", "Insert SimpleName: getLastChild(715) into MethodInvocation(716) at 1", "Insert SimpleName: replacement(725) into Assignment: =(727) at 0", "Insert SimpleName: value(726) into Assignment: =(727) at 1", "Insert SimpleName: replacement(730) into Assignment: =(735) at 0", "Insert MethodInvocation(734) into Assignment: =(735) at 1", "Insert SimpleName: IR(731) into MethodInvocation(734) at 0", "Insert SimpleName: pos(732) into MethodInvocation(734) at 1", "Insert SimpleName: value(733) into MethodInvocation(734) at 2", "Delete BreakStatement(734)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}