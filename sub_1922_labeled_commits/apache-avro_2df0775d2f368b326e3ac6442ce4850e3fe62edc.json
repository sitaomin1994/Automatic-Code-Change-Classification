{"application": "apache-avro", "csha": "2df0775d2f368b326e3ac6442ce4850e3fe62edc", "files": [{"SchemaCompatibility_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: java.util.ArrayDeque to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: java.util.Collections to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: java.util.Deque to ImportDeclaration at 0"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 13", "operations": ["INS ReturnStatement to Block at 3", "INS MarkerAnnotation to MethodDeclaration at 1", "INS NumberLiteral: 31 to VariableDeclarationFragment at 1", "INS BooleanLiteral: false to ReturnStatement at 0", "INS SimpleName: mCompatibilityType to MethodInvocation at 3", "INS Modifier: public to MethodDeclaration at 2", "INS SimpleName: format to MethodInvocation at 1", "INS ReturnStatement to IfStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ThisExpression to InfixExpression: == at 0", "INS TextElement:  that combines the state of the current and supplied instances. to TagElement: @return at 2", "INS VariableDeclarationStatement to Block at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 1", "INS QualifiedName: SchemaCompatibilityType.INCOMPATIBLE to ConditionalExpression at 2", "INS ExpressionStatement to Block at 3", "INS IfStatement to Block at 0", "INS TextElement:  SchemaCompatibilityResult to TagElement: @code at 0", "INS SimpleName: Incompatibility to SimpleType: Incompatibility at 0", "INS IfStatement to IfStatement at 2", "INS SimpleName: mIncompatibilities to ClassInstanceCreation at 1", "INS SimpleName: result to Assignment: = at 0", "INS SimpleName: toMerge to TagElement: @param at 0", "INS SimpleName: getClass to MethodInvocation at 0", "INS ConditionalExpression to ParenthesizedExpression at 0", "INS QualifiedName: other.mIncompatibilities to InfixExpression: != at 0", "INS TextElement:  A  to TagElement: @return at 0", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS InfixExpression: == to IfStatement at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: hashCode to MethodInvocation at 1", "INS SimpleType: Incompatibility to ParameterizedType: List<Incompatibility> at 1", "INS NumberLiteral: 0 to ConditionalExpression at 1", "INS IfStatement to Block at 4", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: result to VariableDeclarationFragment at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: result to Assignment: = at 0", "INS SimpleName: mIncompatibilities to MethodInvocation at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: mCompatibilityType to InfixExpression: != at 0", "INS VariableDeclarationStatement to Block at 0", "INS NullLiteral to InfixExpression: == at 1", "INS ConditionalExpression to ParenthesizedExpression at 0", "INS SimpleName: mIncompatibilities to MethodInvocation at 4", "INS Block to MethodDeclaration at 5", "INS SimpleName: mergedWith to MethodDeclaration at 3", "INS InfixExpression: == to ConditionalExpression at 0", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS QualifiedName: other.mCompatibilityType to InfixExpression: != at 1", "INS SimpleName: obj to SingleVariableDeclaration at 1", "INS StringLiteral: \"SchemaCompatibilityResult{compatibility:%s, incompatibilities:%s}\" to MethodInvocation at 2", "INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: mCompatibilityType to MethodInvocation at 0", "INS TagElement to Javadoc at 0", "INS TagElement: @code to TagElement: @param at 2", "INS ExpressionStatement to Block at 1", "INS BooleanLiteral: true to ReturnStatement at 0", "INS InfixExpression: + to Assignment: = at 1", "INS Block to MethodDeclaration at 5", "INS ReturnStatement to Block at 0", "INS TagElement: @param to Javadoc at 1", "INS ParameterizedType: List<Incompatibility> to VariableDeclarationStatement at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS SimpleType: SchemaCompatibilityResult to MethodDeclaration at 2", "INS SimpleName: String to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS MethodInvocation to ConditionalExpression at 2", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS MethodDeclaration to TypeDeclaration: class at 17", "INS BooleanLiteral: false to ReturnStatement at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS ParameterizedType: ArrayList<Incompatibility> to ClassInstanceCreation at 0", "INS Modifier: public to MethodDeclaration at 2", "INS SimpleType: List to ParameterizedType: List<Incompatibility> at 0", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS TagElement: @code to TagElement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ReturnStatement to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS IfStatement to Block at 5", "INS SimpleName: result to ReturnStatement at 0", "INS TextElement:   to TagElement at 1", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS TextElement:   to TagElement at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: mIncompatibilities to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS TagElement: @inheritDoc to TagElement at 0", "INS SimpleName: toMerge to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 2", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: compatibilityType to ClassInstanceCreation at 1", "INS SimpleName: mergedIncompatibilities to VariableDeclarationFragment at 0", "INS ReturnStatement to Block at 6", "INS PrimitiveType: boolean to MethodDeclaration at 3", "INS TextElement: Merges the current  to TagElement at 0", "INS TagElement: @code to TagElement: @return at 1", "INS NumberLiteral: 0 to ConditionalExpression at 1", "INS BooleanLiteral: false to ReturnStatement at 0", "INS ParenthesizedExpression to InfixExpression: + at 1", "INS ReturnStatement to Block at 4", "INS IfStatement to Block at 2", "INS TextElement: list of  to TagElement at 3", "INS TextElement:  Incompatibility Incompatibilities to TagElement: @code at 0", "INS IfStatement to Block at 0", "INS TypeDeclaration: class to TypeDeclaration: class at 13", "INS Block to MethodDeclaration at 5", "INS SimpleName: mergedIncompatibilities to MethodInvocation at 0", "INS SimpleName: prime to VariableDeclarationFragment at 0", "INS TextElement:  The  to TagElement: @param at 1", "INS InfixExpression: + to Assignment: = at 1", "INS MethodInvocation to InfixExpression: != at 1", "INS ReturnStatement to IfStatement at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: mergedIncompatibilities to ClassInstanceCreation at 2", "INS QualifiedName: other.mIncompatibilities to MethodInvocation at 2", "INS ReturnStatement to IfStatement at 1", "INS TextElement:  with the supplied result into a new instance, combining the to TagElement at 2", "INS ExpressionStatement to Block at 2", "INS SimpleName: hashCode to MethodInvocation at 1", "INS SimpleName: mIncompatibilities to MethodInvocation at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleType: Incompatibility to ParameterizedType: ArrayList<Incompatibility> at 1", "INS TextElement:  SchemaCompatibilityResult to TagElement: @code at 0", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS TagElement: @inheritDoc to TagElement at 0", "INS QualifiedName: toMerge.mCompatibilityType to ConditionalExpression at 1", "INS Javadoc to MethodDeclaration at 0", "INS InfixExpression: == to IfStatement at 0", "INS ReturnStatement to IfStatement at 1", "INS TextElement:  and regressing to the to TagElement at 5", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: obj to InfixExpression: == at 1", "INS SimpleName: addAll to MethodInvocation at 1", "INS BooleanLiteral: false to ReturnStatement at 0", "INS TextElement:  SchemaCompatibilityResult to TagElement: @code at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: Incompatibility to SimpleType: Incompatibility at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS QualifiedName: SchemaCompatibilityType.COMPATIBLE to InfixExpression: == at 1", "INS MarkerAnnotation to MethodDeclaration at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: SchemaCompatibilityResult to SimpleType: SchemaCompatibilityResult at 0", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1", "INS IfStatement to Block at 1", "INS MethodInvocation to ReturnStatement at 0", "INS PrimitiveType: int to MethodDeclaration at 3", "INS TagElement to Javadoc at 0", "INS TagElement: @return to Javadoc at 2", "INS SimpleName: getClass to MethodInvocation at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS SimpleName: toString to MethodDeclaration at 4", "INS SimpleName: List to SimpleType: List at 0", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS TextElement:  to merge with the current instance. to TagElement: @param at 3", "INS ParenthesizedExpression to InfixExpression: + at 1", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<Incompatibility> at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS TextElement:  SchemaCompatibilityType#INCOMPATIBLE INCOMPATIBLE to TagElement: @code at 0", "INS Assignment: = to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: mCompatibilityType to InfixExpression: == at 0", "INS TagElement to Javadoc at 0", "INS ReturnStatement to IfStatement at 1", "INS TagElement: @code to TagElement at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: obj to MethodInvocation at 0", "INS SimpleName: toMerge to SingleVariableDeclaration at 1", "INS SimpleName: getIncompatibilities to MethodInvocation at 1", "INS SimpleName: mIncompatibilities to InfixExpression: == at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: obj to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS TagElement: @code to TagElement at 6", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS Block to MethodDeclaration at 6", "INS BooleanLiteral: true to ReturnStatement at 0", "INS SimpleName: hashCode to MethodDeclaration at 4", "INS TextElement:  state if any incompatibilities are encountered. to TagElement at 7", "INS SimpleName: equals to MethodDeclaration at 4", "INS SimpleName: mCompatibilityType to InfixExpression: == at 0", "INS NumberLiteral: 1 to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 14", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS SimpleName: s to VariableDeclarationFragment at 0", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS ExpressionStatement to Block at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: mLocation to MethodInvocation at 0", "INS SimpleName: replace to MethodInvocation at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 5", "INS TextElement: the node location within the schema's JSON document tree where the incompatibility was encountered. to TagElement at 1", "INS Block to EnhancedForStatement at 2", "INS MethodInvocation to ReturnStatement at 0", "INS StringLiteral: \"~1\" to MethodInvocation at 3", "INS ThisExpression to FieldAccess at 0", "INS SimpleType: String to ParameterizedType: List<String> at 1", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: List to ParameterizedType: List<String> at 0", "INS SimpleName: List to SimpleType: List at 0", "INS Modifier: private to FieldDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: append to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: Incompatibility to TypeDeclaration: class at 3", "INS SimpleName: location to SingleVariableDeclaration at 1", "INS IfStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS FieldAccess to Assignment: = at 0", "INS ParameterizedType: List<String> to SingleVariableDeclaration at 0", "INS SuperConstructorInvocation to Block at 0", "INS TypeDeclaration: class to TypeDeclaration: class at 14", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS SimpleName: first to Assignment: = at 0", "INS SimpleName: mWriterFragment to FieldAccess at 1", "INS SimpleName: replace to MethodInvocation at 1", "INS StringLiteral: \"/\" to MethodInvocation at 2", "INS SimpleName: append to MethodInvocation at 1", "INS Modifier: final to FieldDeclaration at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: mLocation to FieldAccess at 1", "INS TagElement to Javadoc at 0", "INS SimpleName: coordinate to MethodInvocation at 0", "INS Modifier: final to TypeDeclaration: class at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS ThisExpression to FieldAccess at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: String to SimpleType: String at 0", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS BooleanLiteral: true to VariableDeclarationFragment at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1", "INS TagElement: @return to Javadoc at 1", "INS SimpleType: StringBuilder to VariableDeclarationStatement at 0", "INS Block to IfStatement at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleType: StringBuilder to ClassInstanceCreation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS Block to MethodDeclaration at 4", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: toString to MethodInvocation at 1", "INS SimpleName: s to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: String to ParameterizedType: List<String> at 1", "INS Modifier: public to TypeDeclaration: class at 0", "INS SimpleName: coordinate to SingleVariableDeclaration at 1", "INS SimpleName: mReaderFragment to FieldAccess at 1", "INS SimpleName: size to MethodInvocation at 1", "INS Block to MethodDeclaration at 6", "INS FieldAccess to Assignment: = at 0", "INS EnhancedForStatement to Block at 2", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS Assignment: = to ExpressionStatement at 0", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: mReaderFragment to VariableDeclarationFragment at 0", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS SimpleName: writerFragment to SingleVariableDeclaration at 1", "INS SimpleName: readerFragment to Assignment: = at 1", "INS SimpleName: Incompatibility to MethodDeclaration at 0", "INS SimpleName: mLocation to VariableDeclarationFragment at 0", "INS SimpleName: mWriterFragment to VariableDeclarationFragment at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: mLocation to MethodInvocation at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: List to SimpleType: List at 0", "INS StringLiteral: \"/\" to ClassInstanceCreation at 1", "INS SimpleName: mType to VariableDeclarationFragment at 0", "INS TextElement: Returns a <a href=\"https://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-08\">JSON Pointer</a> describing to TagElement at 0", "INS SimpleName: writerFragment to Assignment: = at 1", "INS Javadoc to MethodDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS TagElement: @return to Javadoc at 1", "INS SimpleName: s to MethodInvocation at 0", "INS SimpleName: s to MethodInvocation at 0", "INS SimpleName: first to VariableDeclarationFragment at 0", "INS Block to MethodDeclaration at 4", "INS MethodInvocation to MethodInvocation at 3", "INS TextElement:  a SchemaIncompatibilityType instance. to TagElement: @return at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 0", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 1", "INS ExpressionStatement to Block at 3", "INS Modifier: private to FieldDeclaration at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS SimpleName: first to IfStatement at 0", "INS TextElement:  JSON Pointer encoded as a string. to TagElement: @return at 0", "INS ReturnStatement to Block at 0", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ParameterizedType: List<String> to FieldDeclaration at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: location to Assignment: = at 1", "INS TextElement: Returns the SchemaIncompatibilityType. to TagElement at 0", "INS BooleanLiteral: false to Assignment: = at 1", "INS SimpleType: String to MethodDeclaration at 2", "INS SimpleName: subList to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: type to Assignment: = at 1", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: mType to FieldAccess at 1", "INS CharacterLiteral: '/' to MethodInvocation at 2", "INS SimpleName: getType to MethodDeclaration at 3", "INS Modifier: static to TypeDeclaration: class at 1", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS TagElement to Javadoc at 0", "INS SimpleName: mType to ReturnStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleType: List to ParameterizedType: List<String> at 0", "INS FieldAccess to Assignment: = at 0", "INS MethodInvocation to MethodInvocation at 0", "INS ThisExpression to FieldAccess at 0", "INS StringLiteral: \"~0\" to MethodInvocation at 3", "INS ReturnStatement to Block at 3", "INS SimpleName: readerFragment to SingleVariableDeclaration at 1", "INS SimpleName: getLocation to MethodDeclaration at 3", "INS StringLiteral: \"~\" to MethodInvocation at 2", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS SimpleName: reverse to MethodInvocation at 1", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: deque to ClassInstanceCreation at 1", "INS SimpleName: Deque to SimpleType: Deque at 0", "INS SimpleType: String to ParameterizedType: List<String> at 1", "INS ParameterizedType: Deque<String> to SingleVariableDeclaration at 0", "INS ParameterizedType: ArrayList<String> to ClassInstanceCreation at 0", "INS SimpleName: String to SimpleType: String at 0", "INS ParameterizedType: List<String> to VariableDeclarationStatement at 0", "INS SimpleType: List to ParameterizedType: List<String> at 0", "INS SimpleName: String to SimpleType: String at 0", "INS VariableDeclarationStatement to Block at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: deque to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: String to ParameterizedType: List<String> at 1", "INS SimpleName: Collections to MethodInvocation at 0", "INS SimpleName: unmodifiableList to MethodInvocation at 1", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS ParameterizedType: List<String> to MethodDeclaration at 2", "INS SimpleName: asList to MethodDeclaration at 3", "INS ReturnStatement to Block at 2", "INS Block to MethodDeclaration at 5", "INS SimpleType: Deque to ParameterizedType: Deque<String> at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: Collections to MethodInvocation at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: List to ParameterizedType: List<String> at 0", "INS SimpleName: list to MethodInvocation at 2", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<String> at 0", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS SimpleName: list to MethodInvocation at 2", "INS SimpleType: String to ParameterizedType: ArrayList<String> at 1", "INS ExpressionStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: list to VariableDeclarationFragment at 0", "INS SimpleType: String to ParameterizedType: Deque<String> at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: List to SimpleType: List at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: ROOT_REFERENCE_TOKEN to VariableDeclarationFragment at 0", "INS Modifier: static to FieldDeclaration at 1", "INS StringLiteral: \"\" to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: String to FieldDeclaration at 3", "INS Modifier: final to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleName: Deque to SimpleType: Deque at 0", "INS SimpleType: ArrayDeque to ParameterizedType: ArrayDeque<String> at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleType: Deque to ParameterizedType: Deque<String> at 0", "INS ParameterizedType: ArrayDeque<String> to ClassInstanceCreation at 0", "INS SimpleName: Schema to SimpleType: Schema at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: String to ParameterizedType: ArrayDeque<String> at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: writer to MethodInvocation at 3", "INS SimpleName: reader to MethodInvocation at 2", "INS ParameterizedType: Deque<String> to VariableDeclarationStatement at 0", "INS SimpleName: reader to SingleVariableDeclaration at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: Schema to SingleVariableDeclaration at 1", "INS SimpleName: getCompatibility to MethodDeclaration at 3", "INS SimpleName: Schema to SimpleType: Schema at 0", "INS SimpleName: getCompatibility to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: location to MethodInvocation at 4", "INS SimpleName: ArrayDeque to SimpleType: ArrayDeque at 0", "INS SimpleName: ROOT_REFERENCE_TOKEN to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleType: String to ParameterizedType: Deque<String> at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: Schema to SingleVariableDeclaration at 1", "INS SimpleName: writer to SingleVariableDeclaration at 2", "INS Modifier: final to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 1", "INS Block to MethodDeclaration at 6", "INS Modifier: final to SingleVariableDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: location to VariableDeclarationFragment at 0", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 12", "MOV SimpleName: SchemaCompatibilityResult to TypeDeclaration: class at 4", "MOV MethodDeclaration to TypeDeclaration: class at 13", "MOV MethodDeclaration to TypeDeclaration: class at 11", "MOV MethodDeclaration to TypeDeclaration: class at 17", "MOV FieldDeclaration to TypeDeclaration: class at 8", "MOV FieldDeclaration to TypeDeclaration: class at 9", "MOV MethodDeclaration to TypeDeclaration: class at 16", "MOV MethodDeclaration to TypeDeclaration: class at 10", "MOV MethodDeclaration to TypeDeclaration: class at 12", "MOV MethodDeclaration to TypeDeclaration: class at 15", "MOV MethodDeclaration to TypeDeclaration: class at 15", "MOV MethodDeclaration to TypeDeclaration: class at 14", "MOV Modifier: public to TypeDeclaration: class at 1", "MOV MethodDeclaration to TypeDeclaration: class at 11", "MOV FieldDeclaration to TypeDeclaration: class at 7", "MOV FieldDeclaration to TypeDeclaration: class at 6", "MOV Modifier: final to TypeDeclaration: class at 3", "MOV Modifier: static to TypeDeclaration: class at 2", "MOV MethodDeclaration to TypeDeclaration: class at 13", "MOV FieldDeclaration to TypeDeclaration: class at 7", "MOV Javadoc to TypeDeclaration: class at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 9"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: SchemaCompatibilityResult to MethodDeclaration at 2"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement:  Writer schema to test. to TagElement: @param at 1", "INS TextElement:  The equivalent JSON pointer reference token representation of the schema node being visited. to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 3", "INS TextElement: <p> Memoizes the compatibility results. </p> to TagElement at 1", "INS TextElement: Reports the compatibility of a reader/writer schema pair. to TagElement at 0", "INS TextElement:  Stack with which to track the location within the schema. to TagElement: @param at 1", "INS TagElement: @return to Javadoc at 5", "INS TagElement to Javadoc at 0", "INS SimpleName: location to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1", "INS TextElement:  Reader schema to test. to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 2", "INS SimpleName: writer to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 4", "INS SimpleName: referenceToken to TagElement: @param at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: reader to TagElement: @param at 0", "INS TextElement:  the compatibility of the reader/writer schema pair. to TagElement: @return at 0"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: referenceToken to SingleVariableDeclaration at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SimpleType: String to ParameterizedType: Deque<String> at 1", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleName: location to SingleVariableDeclaration at 2", "INS ParameterizedType: Deque<String> to SingleVariableDeclaration at 1", "INS SimpleType: Deque to ParameterizedType: Deque<String> at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: Deque to SimpleType: Deque at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS ParameterizedType: Deque<String> to SingleVariableDeclaration at 1", "INS SimpleType: String to ParameterizedType: Deque<String> at 1", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: Deque to ParameterizedType: Deque<String> at 0", "INS SimpleName: Deque to SimpleType: Deque at 0", "INS SimpleName: location to SingleVariableDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: Deque to ParameterizedType: Deque<String> at 0", "INS SimpleName: Deque to SimpleType: Deque at 0", "INS SimpleName: location to SingleVariableDeclaration at 2", "INS ParameterizedType: Deque<String> to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to ParameterizedType: Deque<String> at 1", "INS Modifier: final to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: Deque to SimpleType: Deque at 0", "INS ParameterizedType: Deque<String> to SingleVariableDeclaration at 1", "INS SimpleType: Deque to ParameterizedType: Deque<String> at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: location to SingleVariableDeclaration at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to ParameterizedType: Deque<String> at 1"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS SimpleName: result to VariableDeclarationFragment at 0", "INS SimpleName: asList to MethodInvocation at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: result to ReturnStatement at 0", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: location to MethodInvocation at 1", "INS ReturnStatement to Block at 6", "INS SimpleName: result to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: removeFirst to MethodInvocation at 1", "INS StringLiteral: \"symbols\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 5", "INS Block to MethodDeclaration at 6", "INS IfStatement to Block at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 6", "INS SimpleName: location to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: addFirst to MethodInvocation at 1", "INS SimpleName: location to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: location to SingleVariableDeclaration at 2", "INS ParameterizedType: Deque<String> to SingleVariableDeclaration at 1", "INS SimpleName: Deque to SimpleType: Deque at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: Deque to ParameterizedType: Deque<String> at 0", "INS SimpleType: String to ParameterizedType: Deque<String> at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: String to SimpleType: String at 0", "INS ParameterizedType: Deque<String> to SingleVariableDeclaration at 1", "INS SimpleType: Deque to ParameterizedType: Deque<String> at 0", "INS SimpleName: Deque to SimpleType: Deque at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: location to SingleVariableDeclaration at 2", "INS SimpleType: String to ParameterizedType: Deque<String> at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ParameterizedType: Deque<String> to SingleVariableDeclaration at 1", "INS SimpleType: Deque to ParameterizedType: Deque<String> at 0", "INS SimpleName: location to SingleVariableDeclaration at 2", "INS SimpleType: String to ParameterizedType: Deque<String> at 1", "INS SimpleName: String to SimpleType: String at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: Deque to SimpleType: Deque at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: SchemaCompatibilityType to FieldDeclaration at 2"]}, {"root": "INS ParameterizedType: List<Incompatibility> to FieldDeclaration at 2", "operations": ["INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: Incompatibility to SimpleType: Incompatibility at 0", "INS SimpleType: Incompatibility to ParameterizedType: List<Incompatibility> at 1", "INS SimpleType: List to ParameterizedType: List<Incompatibility> at 0", "INS ParameterizedType: List<Incompatibility> to FieldDeclaration at 2"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: SchemaCompatibilityResult to FieldDeclaration at 3"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: SchemaCompatibilityResult to FieldDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 2", "operations": ["INS SimpleName: compatibilityType to SingleVariableDeclaration at 1", "INS SimpleType: SchemaCompatibilityType to SingleVariableDeclaration at 0", "INS SimpleName: SchemaCompatibilityType to SimpleType: SchemaCompatibilityType at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: List to ParameterizedType: List<Incompatibility> at 0", "INS SimpleType: Incompatibility to ParameterizedType: List<Incompatibility> at 1", "INS ParameterizedType: List<Incompatibility> to SingleVariableDeclaration at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: Incompatibility to SimpleType: Incompatibility at 0", "INS SimpleName: incompatibilities to SingleVariableDeclaration at 1"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS Block to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 7", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 1"]}, {"root": "INS Block to MethodDeclaration at 11", "operations": ["INS SimpleName: writerFragment to ClassInstanceCreation at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: readerFragment to ClassInstanceCreation at 2", "INS SimpleName: incompatibility to VariableDeclarationFragment at 0", "INS SimpleName: Incompatibility to SimpleType: Incompatibility at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: location to ClassInstanceCreation at 5", "INS SimpleName: incompatibilityType to ClassInstanceCreation at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: Incompatibility to ClassInstanceCreation at 0", "INS Block to MethodDeclaration at 11", "INS SimpleType: Incompatibility to VariableDeclarationStatement at 0", "INS SimpleName: message to ClassInstanceCreation at 4"]}, {"root": "INS ParameterizedType: List<Incompatibility> to MethodDeclaration at 2", "operations": ["INS SimpleType: Incompatibility to ParameterizedType: List<Incompatibility> at 1", "INS SimpleName: Incompatibility to SimpleType: Incompatibility at 0", "INS SimpleType: List to ParameterizedType: List<Incompatibility> at 0", "INS SimpleName: List to SimpleType: List at 0", "INS ParameterizedType: List<Incompatibility> to MethodDeclaration at 2"]}, {"root": "INS SimpleName: getIncompatibilities to MethodDeclaration at 3", "operations": ["INS SimpleName: getIncompatibilities to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 1", "MOV SimpleType: String to MethodDeclaration at 3", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: SchemaIncompatibilityType to FieldDeclaration at 2"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: Schema to FieldDeclaration at 2"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: Schema to FieldDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: SchemaIncompatibilityType to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Schema to MethodDeclaration at 2"]}, {"root": "UPDATE from getReaderSubset to getReaderFragment", "operations": ["UPD SimpleName: getReaderSubset from getReaderSubset to getReaderFragment"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Schema to MethodDeclaration at 2"]}, {"root": "UPDATE from getWriterSubset to getWriterFragment", "operations": ["UPD SimpleName: getWriterSubset from getWriterSubset to getWriterFragment"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 6"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 3", "MOV IfStatement to Block at 6", "MOV IfStatement to Block at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement: @inheritDoc to TagElement at 0", "INS TagElement to Javadoc at 0", "INS TextElement:   to TagElement at 1", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS SimpleType: String to MethodDeclaration at 3", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to MethodDeclaration at 3"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: referenceToken to MethodInvocation at 2", "INS SimpleName: addFirst to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: location to MethodInvocation at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 4", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS SimpleName: result to Assignment: = at 0", "INS Block to IfStatement at 2", "INS ExpressionStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS IfStatement to Block at 4", "INS SimpleName: location to MethodInvocation at 3"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS SimpleName: removeFirst to MethodInvocation at 1", "INS ExpressionStatement to Block at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: location to MethodInvocation at 0"]}, {"root": "INS TagElement: @param to Javadoc at 3", "operations": ["INS TagElement: @param to Javadoc at 3", "INS TextElement:  Stack with which to track the location within the schema. to TagElement: @param at 1", "INS SimpleName: location to TagElement: @param at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: result to VariableDeclarationFragment at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: result to VariableDeclarationFragment at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: location to MethodInvocation at 0", "INS SimpleName: addFirst to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS StringLiteral: \"fields\" to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS ExpressionStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ReturnStatement to Block at 4", "operations": ["INS ReturnStatement to Block at 4", "INS SimpleName: result to ReturnStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2", "MOV ExpressionStatement to Block at 3"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS SimpleName: result to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS StringLiteral: \"size\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS SimpleName: addFirst to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: location to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS ExpressionStatement to Block at 5", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ReturnStatement to Block at 6", "operations": ["INS ReturnStatement to Block at 6", "INS SimpleName: result to ReturnStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: result to VariableDeclarationFragment at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS SimpleName: addFirst to MethodInvocation at 1", "INS StringLiteral: \"name\" to MethodInvocation at 2", "INS SimpleName: location to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS ExpressionStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ReturnStatement to Block at 4", "operations": ["INS ReturnStatement to Block at 4", "INS SimpleName: result to ReturnStatement at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: SchemaCompatibilityResult to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from mCompatibility to mCompatibilityType", "operations": ["UPD SimpleName: mCompatibility from mCompatibility to mCompatibilityType", "UPD SimpleName: mReaderSubset from mReaderSubset to mCompatibilityType", "UPD SimpleName: mReaderSubset from mReaderSubset to mCompatibilityType"]}, {"root": "UPDATE from mSchemaIncompatibilityType to mIncompatibilities", "operations": ["UPD SimpleName: mSchemaIncompatibilityType from mSchemaIncompatibilityType to mIncompatibilities", "UPD SimpleName: mWriterSubset from mWriterSubset to mIncompatibilities", "UPD SimpleName: mWriterSubset from mWriterSubset to mIncompatibilities"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from error to incompatibilityType", "operations": ["UPD SimpleName: error from error to incompatibilityType"]}, {"root": "UPDATE from writerDetails to readerFragment", "operations": ["UPD SimpleName: writerDetails from writerDetails to readerFragment"]}, {"root": "UPDATE from readerDetails to writerFragment", "operations": ["UPD SimpleName: readerDetails from readerDetails to writerFragment"]}, {"root": "UPDATE from msg to message", "operations": ["UPD SimpleName: msg from msg to message", "UPD SimpleName: msg from msg to message", "UPD SimpleName: details from details to message", "UPD SimpleName: msg from msg to message", "UPD SimpleName: msg from msg to message", "UPD SimpleName: details from details to message", "UPD SimpleName: details from details to message", "UPD SimpleName: msg from msg to message", "UPD SimpleName: msg from msg to message", "UPD SimpleName: msg from msg to message", "UPD SimpleName: msg from msg to message", "UPD SimpleName: msg from msg to message", "UPD SimpleName: msg from msg to message"]}, {"root": "INS ParameterizedType: List<String> to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: List to ParameterizedType: List<String> at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: String to ParameterizedType: List<String> at 1", "INS ParameterizedType: List<String> to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from SchemaCompatibilityResult to location", "operations": ["UPD SimpleName: SchemaCompatibilityResult from SchemaCompatibilityResult to location", "UPD SimpleName: SchemaCompatibilityResult from SchemaCompatibilityResult to location", "UPD SimpleName: reader from reader to location", "UPD SimpleName: SchemaCompatibilityResult from SchemaCompatibilityResult to location"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "UPDATE from errorDetails to type", "operations": ["UPD SimpleName: errorDetails from errorDetails to type"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Schema to SingleVariableDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Schema to SingleVariableDeclaration at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleName: obj to CastExpression at 1", "INS SimpleName: Incompatibility to SimpleType: Incompatibility at 0", "INS VariableDeclarationStatement to Block at 3", "INS SimpleType: Incompatibility to VariableDeclarationStatement at 0", "INS SimpleType: Incompatibility to CastExpression at 0", "INS SimpleName: other to VariableDeclarationFragment at 0", "INS SimpleName: Incompatibility to SimpleType: Incompatibility at 0"]}, {"root": "INS IfStatement to Block at 4", "operations": ["INS InfixExpression: != to IfStatement at 0", "INS QualifiedName: other.mType to InfixExpression: != at 1", "INS SimpleName: mType to InfixExpression: != at 0", "INS IfStatement to Block at 4"]}, {"root": "INS IfStatement to Block at 6", "operations": ["INS InfixExpression: == to IfStatement at 0", "INS Block to IfStatement at 1", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS QualifiedName: other.mWriterFragment to MethodInvocation at 2", "INS MethodInvocation to PrefixExpression: ! at 0", "INS IfStatement to IfStatement at 2", "INS IfStatement to Block at 6", "INS SimpleName: mWriterFragment to InfixExpression: == at 0", "INS SimpleName: mWriterFragment to MethodInvocation at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV InfixExpression: != to IfStatement at 0"]}, {"root": "UPDATE from nameCheck to result", "operations": ["UPD SimpleName: nameCheck from nameCheck to result", "UPD SimpleName: existing from existing to result", "UPD SimpleName: compat from compat to result", "UPD SimpleName: nameCheck from nameCheck to result", "UPD SimpleName: compatibility from compatibility to result", "UPD SimpleName: existing from existing to result", "UPD SimpleName: calculated from calculated to result", "UPD SimpleName: calculated from calculated to result", "UPD SimpleName: nameCheck from nameCheck to result", "UPD SimpleName: existing from existing to result"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: SchemaCompatibilityResult to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: SchemaCompatibilityResult to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: SchemaCompatibilityResult to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: SchemaCompatibilityResult to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: SchemaCompatibilityResult to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: SchemaCompatibilityType to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: SchemaCompatibilityResult to ClassInstanceCreation at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 2", "operations": ["INS SimpleName: Collections to MethodInvocation at 0", "INS SimpleName: Incompatibility to SimpleType: Incompatibility at 0", "INS MethodInvocation to ClassInstanceCreation at 2", "INS SimpleName: emptyList to MethodInvocation at 2", "INS SimpleType: Incompatibility to MethodInvocation at 1"]}, {"root": "INS SimpleType: SchemaCompatibilityResult to ClassInstanceCreation at 0", "operations": ["INS SimpleName: SchemaCompatibilityResult to SimpleType: SchemaCompatibilityResult at 0", "INS SimpleType: SchemaCompatibilityResult to ClassInstanceCreation at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 2", "operations": ["INS SimpleName: emptyList to MethodInvocation at 2", "INS SimpleName: Collections to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 2", "INS SimpleName: Incompatibility to SimpleType: Incompatibility at 0", "INS SimpleType: Incompatibility to MethodInvocation at 1"]}, {"root": "UPDATE from If the compatibility is INCOMPATIBLE, returns the SchemaIncompatibilityType (first thing that to If the compatibility is INCOMPATIBLE, returns ", "operations": ["UPD TextElement: If the compatibility is INCOMPATIBLE, returns the SchemaIncompatibilityType (first thing that from If the compatibility is INCOMPATIBLE, returns the SchemaIncompatibilityType (first thing that to If the compatibility is INCOMPATIBLE, returns "]}, {"root": "INS TagElement: @link to TagElement at 1", "operations": ["INS TagElement: @link to TagElement at 1", "INS SimpleName: Incompatibility to TagElement: @link at 0", "INS TextElement:  Incompatibilities to TagElement: @link at 1"]}, {"root": "UPDATE from was incompatible), otherwise null. to  found, otherwise an empty", "operations": ["UPD TextElement: was incompatible), otherwise null. from was incompatible), otherwise null. to  found, otherwise an empty"]}, {"root": "INS TextElement: list. to TagElement at 3", "operations": ["INS TextElement: list. to TagElement at 3"]}, {"root": "INS TextElement:  a list of  to TagElement: @return at 0", "operations": ["INS TextElement:  a list of  to TagElement: @return at 0"]}, {"root": "INS TagElement: @link to TagElement: @return at 1", "operations": ["INS SimpleName: Incompatibility to TagElement: @link at 0", "INS TagElement: @link to TagElement: @return at 1"]}, {"root": "INS TextElement: , may be empty, never null. to TagElement: @return at 2", "operations": ["INS TextElement: , may be empty, never null. to TagElement: @return at 2"]}, {"root": "UPDATE from If the compatibility is INCOMPATIBLE, returns the first part of the reader schema that failed to Returns the fragment of the reader schema that failed compatibility check.", "operations": ["UPD TextElement: If the compatibility is INCOMPATIBLE, returns the first part of the reader schema that failed from If the compatibility is INCOMPATIBLE, returns the first part of the reader schema that failed to Returns the fragment of the reader schema that failed compatibility check."]}, {"root": "UPDATE from  a Schema instance (part of the reader schema), or null to  a Schema instance (fragment of the reader schema).", "operations": ["UPD TextElement:  a Schema instance (part of the reader schema), or null from  a Schema instance (part of the reader schema), or null to  a Schema instance (fragment of the reader schema)."]}, {"root": "UPDATE from mReaderSubset to mReaderFragment", "operations": ["UPD SimpleName: mReaderSubset from mReaderSubset to mReaderFragment", "UPD SimpleName: mCompatibility from mCompatibility to mReaderFragment", "UPD SimpleName: mWriterSubset from mWriterSubset to mReaderFragment", "UPD SimpleName: mReaderSubset from mReaderSubset to mReaderFragment", "UPD SimpleName: mCompatibility from mCompatibility to mReaderFragment", "UPD SimpleName: mReaderSubset from mReaderSubset to mReaderFragment"]}, {"root": "UPDATE from If the compatibility is INCOMPATIBLE, returns the first part of the writer schema that failed to Returns the fragment of the writer schema that failed compatibility check.", "operations": ["UPD TextElement: If the compatibility is INCOMPATIBLE, returns the first part of the writer schema that failed from If the compatibility is INCOMPATIBLE, returns the first part of the writer schema that failed to Returns the fragment of the writer schema that failed compatibility check."]}, {"root": "UPDATE from  a Schema instance (part of the writer schema), or null to  a Schema instance (fragment of the writer schema).", "operations": ["UPD TextElement:  a Schema instance (part of the writer schema), or null from  a Schema instance (part of the writer schema), or null to  a Schema instance (fragment of the writer schema)."]}, {"root": "UPDATE from mSchemaIncompatibilityType to mWriterFragment", "operations": ["UPD SimpleName: mSchemaIncompatibilityType from mSchemaIncompatibilityType to mWriterFragment", "UPD SimpleName: mWriterSubset from mWriterSubset to mWriterFragment", "UPD SimpleName: mMessage from mMessage to mWriterFragment", "UPD SimpleName: mSchemaIncompatibilityType from mSchemaIncompatibilityType to mWriterFragment"]}, {"root": "UPDATE from If the compatibility is INCOMPATIBLE, returns a human-readable string with more details about to Returns a human-readable message with more details about what failed. Syntax depends on the", "operations": ["UPD TextElement: If the compatibility is INCOMPATIBLE, returns a human-readable string with more details about from If the compatibility is INCOMPATIBLE, returns a human-readable string with more details about to Returns a human-readable message with more details about what failed. Syntax depends on the"]}, {"root": "UPDATE from what failed. Syntax depends on the SchemaIncompatibilityType. to SchemaIncompatibilityType.", "operations": ["UPD TextElement: what failed. Syntax depends on the SchemaIncompatibilityType. from what failed. Syntax depends on the SchemaIncompatibilityType. to SchemaIncompatibilityType."]}, {"root": "UPDATE from  a String with details about the incompatibility, or null to  a String with details about the incompatibility.", "operations": ["UPD TextElement:  a String with details about the incompatibility, or null from  a String with details about the incompatibility, or null to  a String with details about the incompatibility."]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from  of the schema compatibility. to  The result of the compatibility check.", "operations": ["UPD TextElement:  of the schema compatibility. from  of the schema compatibility. to  The result of the compatibility check."]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1", "MOV MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Integer to MethodInvocation at 0", "INS SimpleName: readerField to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: toString to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: addFirst to MethodInvocation at 1", "INS SimpleName: location to MethodInvocation at 0", "INS SimpleName: pos to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS SimpleName: location to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: removeFirst to MethodInvocation at 1", "INS ExpressionStatement to Block at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: compatible to MethodInvocation at 1", "MOV SimpleName: SchemaCompatibilityResult to MethodInvocation at 0"]}, {"root": "UPDATE from compatible to removeFirst", "operations": ["UPD SimpleName: compatible from compatible to removeFirst", "UPD SimpleName: compatible from compatible to removeFirst", "UPD SimpleName: compatible from compatible to removeFirst"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: asList to MethodInvocation at 0", "INS SimpleName: result to Assignment: = at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: location to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 6"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: SchemaCompatibilityResult to MethodInvocation at 0", "MOV SimpleName: compatible to MethodInvocation at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS MethodInvocation to MethodInvocation at 6", "INS SimpleName: location to MethodInvocation at 1", "INS SimpleName: asList to MethodInvocation at 0", "INS SimpleName: result to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: compatible to MethodInvocation at 1", "MOV SimpleName: SchemaCompatibilityResult to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 6", "operations": ["INS SimpleName: location to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 6", "INS SimpleName: asList to MethodInvocation at 0"]}, {"root": "UPDATE from readerDetails to compatibilityType", "operations": ["UPD SimpleName: readerDetails from readerDetails to compatibilityType", "UPD SimpleName: mSchemaIncompatibilityType from mSchemaIncompatibilityType to compatibilityType"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: mSchemaIncompatibilityType to VariableDeclarationFragment at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: SchemaCompatibilityResult to ClassInstanceCreation at 0"]}, {"root": "UPDATE from writerDetails to incompatibilities", "operations": ["UPD SimpleName: writerDetails from writerDetails to incompatibilities"]}, {"root": "UPDATE from Schema to String", "operations": ["UPD SimpleName: Schema from Schema to String"]}, {"root": "MOVE from SimpleType: String", "operations": ["MOV SimpleName: Schema to SimpleType: String at 0"]}, {"root": "UPDATE from Schema to Incompatibility", "operations": ["UPD SimpleName: Schema from Schema to Incompatibility"]}, {"root": "MOVE from SimpleType: Incompatibility", "operations": ["MOV SimpleName: Schema to SimpleType: Incompatibility at 0"]}, {"root": "INS SimpleType: SchemaCompatibilityResult to ClassInstanceCreation at 0", "operations": ["INS SimpleType: SchemaCompatibilityResult to ClassInstanceCreation at 0", "INS SimpleName: SchemaCompatibilityResult to SimpleType: SchemaCompatibilityResult at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 2", "operations": ["INS SimpleName: Collections to MethodInvocation at 0", "INS SimpleName: incompatibility to MethodInvocation at 2", "INS SimpleName: singletonList to MethodInvocation at 1", "INS MethodInvocation to ClassInstanceCreation at 2"]}, {"root": "UPDATE from  a SchemaIncompatibilityType instance, or null to  Incompatibilities", "operations": ["UPD TextElement:  a SchemaIncompatibilityType instance, or null from  a SchemaIncompatibilityType instance, or null to  Incompatibilities"]}, {"root": "MOVE from TagElement: @link", "operations": ["MOV TextElement:  a SchemaIncompatibilityType instance, or null to TagElement: @link at 1"]}, {"root": "UPDATE from getIncompatibility to getType", "operations": ["UPD SimpleName: getIncompatibility from getIncompatibility to getType"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from mWriterSubset to mLocation", "operations": ["UPD SimpleName: mWriterSubset from mWriterSubset to mLocation", "UPD SimpleName: mWriterSubset from mWriterSubset to mLocation", "UPD SimpleName: mWriterSubset from mWriterSubset to mLocation", "UPD SimpleName: mWriterSubset from mWriterSubset to mLocation"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS ReturnStatement to Block at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS Block to IfStatement at 1"]}, {"root": "UPDATE from \"SchemaCompatibilityDetails{compatibility:%s, type:%s, readerSubset:%s, writerSubset:%s, message:%s}\" to \"Incompatibility{type:%s, location:%s, message:%s, reader:%s, writer:%s}\"", "operations": ["UPD StringLiteral: \"SchemaCompatibilityDetails{compatibility:%s, type:%s, readerSubset:%s, writerSubset:%s, message:%s}\" from \"SchemaCompatibilityDetails{compatibility:%s, type:%s, readerSubset:%s, writerSubset:%s, message:%s}\" to \"Incompatibility{type:%s, location:%s, message:%s, reader:%s, writer:%s}\""]}, {"root": "UPDATE from mReaderSubset to mType", "operations": ["UPD SimpleName: mReaderSubset from mReaderSubset to mType", "UPD SimpleName: mCompatibility from mCompatibility to mType", "UPD SimpleName: mReaderSubset from mReaderSubset to mType"]}, {"root": "INS MethodInvocation to MethodInvocation at 4", "operations": ["INS MethodInvocation to MethodInvocation at 4"]}, {"root": "UPDATE from mReaderSubset to mMessage", "operations": ["UPD SimpleName: mReaderSubset from mReaderSubset to mMessage"]}, {"root": "UPDATE from TreeSet<> to TreeSet<String>", "operations": ["UPD ParameterizedType: TreeSet<> from TreeSet<> to TreeSet<String>"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV InfixExpression: * to InfixExpression: + at 0"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV InfixExpression: * to InfixExpression: + at 0"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV InfixExpression: * to InfixExpression: + at 0"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV InfixExpression: * to InfixExpression: + at 0"]}, {"root": "INS InfixExpression: * to InfixExpression: + at 0", "operations": ["INS InfixExpression: * to InfixExpression: + at 0", "INS SimpleName: result to InfixExpression: * at 1", "INS SimpleName: prime to InfixExpression: * at 0"]}, {"root": "INS InfixExpression: * to InfixExpression: + at 0", "operations": ["INS SimpleName: prime to InfixExpression: * at 0", "INS InfixExpression: * to InfixExpression: + at 0", "INS SimpleName: result to InfixExpression: * at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from mSchemaIncompatibilityType to getLocation", "operations": ["UPD SimpleName: mSchemaIncompatibilityType from mSchemaIncompatibilityType to getLocation"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: mSchemaIncompatibilityType to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: result to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: location to MethodInvocation at 3", "INS SimpleName: result to MethodInvocation at 0", "INS SimpleName: result to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: mergedWith to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS ReturnStatement to Block at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: location to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: result to Assignment: = at 0", "INS SimpleName: result to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: location to MethodInvocation at 3", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: mergedWith to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS SimpleName: location to MethodInvocation at 3", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ReturnStatement to Block at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: mergedWith to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: result to Assignment: = at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: location to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS SimpleName: result to MethodInvocation at 0"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: location to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 2", "INS ReturnStatement to Block at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: i to VariableDeclarationFragment at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: result to MethodInvocation at 0", "INS SimpleName: location to MethodInvocation at 3", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: mergedWith to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: location to MethodInvocation at 3", "INS SimpleName: mergedWith to MethodInvocation at 1", "INS SimpleName: result to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: result to MethodInvocation at 0", "INS SimpleName: mergedWith to MethodInvocation at 1", "INS SimpleName: location to MethodInvocation at 3"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: result to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: mergedWith to MethodInvocation at 1", "INS SimpleName: location to MethodInvocation at 3"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: location to MethodInvocation at 3", "INS SimpleName: result to MethodInvocation at 0", "INS SimpleName: mergedWith to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: location to MethodInvocation at 3", "INS SimpleName: mergedWith to MethodInvocation at 1", "INS SimpleName: result to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: location to MethodInvocation at 3", "INS SimpleName: result to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: mergedWith to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: mergedWith to MethodInvocation at 1", "INS SimpleName: result to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: location to MethodInvocation at 3", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: result to Assignment: = at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "INS SimpleType: String to ParameterizedType: TreeSet<> at 1", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to ParameterizedType: TreeSet<> at 1"]}, {"root": "UPDATE from other.mReaderSubset to other.mReaderFragment", "operations": ["UPD QualifiedName: other.mReaderSubset from other.mReaderSubset to other.mReaderFragment", "UPD QualifiedName: other.mReaderSubset from other.mReaderSubset to other.mReaderFragment"]}, {"root": "UPDATE from other.mCompatibility to other.mWriterFragment", "operations": ["UPD QualifiedName: other.mCompatibility from other.mCompatibility to other.mWriterFragment"]}, {"root": "INS NullLiteral to InfixExpression: != at 2", "operations": ["INS NullLiteral to InfixExpression: != at 2"]}, {"root": "UPDATE from other.mWriterSubset to other.mLocation", "operations": ["UPD QualifiedName: other.mWriterSubset from other.mWriterSubset to other.mLocation", "UPD QualifiedName: other.mWriterSubset from other.mWriterSubset to other.mLocation"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: calculateCompatibility to MethodInvocation at 0", "MOV SimpleName: reader to MethodInvocation at 1", "MOV SimpleName: writer to MethodInvocation at 2"]}, {"root": "INS SimpleName: result to ReturnStatement at 0", "operations": ["INS SimpleName: result to ReturnStatement at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: result to MethodInvocation at 0", "INS SimpleName: mergedWith to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: result to MethodInvocation at 0", "INS SimpleName: mergedWith to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS SimpleName: result to ReturnStatement at 0", "operations": ["INS SimpleName: result to ReturnStatement at 0"]}, {"root": "INS SimpleName: result to ReturnStatement at 0", "operations": ["INS SimpleName: result to ReturnStatement at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 6", "INS SimpleName: asList to MethodInvocation at 0", "INS SimpleName: result to MethodInvocation at 0", "INS SimpleName: mergedWith to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: location to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV QualifiedName: SchemaIncompatibilityType.MISSING_ENUM_SYMBOLS to MethodInvocation at 2", "MOV SimpleName: reader to MethodInvocation at 3", "MOV SimpleName: incompatible to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 5", "MOV SimpleName: writer to MethodInvocation at 4", "MOV SimpleName: SchemaCompatibilityResult to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: incompatible to MethodInvocation at 1", "MOV QualifiedName: SchemaIncompatibilityType.FIXED_SIZE_MISMATCH to MethodInvocation at 2", "MOV SimpleName: reader to MethodInvocation at 3", "MOV SimpleName: writer to MethodInvocation at 4", "MOV SimpleName: SchemaCompatibilityResult to MethodInvocation at 0", "MOV SimpleName: msg to MethodInvocation at 5"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: incompatible to MethodInvocation at 1", "MOV SimpleName: SchemaCompatibilityResult to MethodInvocation at 0", "MOV SimpleName: msg to MethodInvocation at 5", "MOV QualifiedName: SchemaIncompatibilityType.NAME_MISMATCH to MethodInvocation at 2", "MOV SimpleName: writer to MethodInvocation at 4", "MOV SimpleName: reader to MethodInvocation at 3"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getCompatibility to MethodInvocation at 1", "MOV SimpleName: nameCheck to MethodInvocation at 0"]}, {"root": "UPDATE from getCompatibility to mergedWith", "operations": ["UPD SimpleName: getCompatibility from getCompatibility to mergedWith", "UPD SimpleName: getCompatibility from getCompatibility to mergedWith", "UPD SimpleName: getCompatibility from getCompatibility to mergedWith", "UPD SimpleName: getCompatibility from getCompatibility to mergedWith", "UPD SimpleName: getCompatibility from getCompatibility to mergedWith"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: nameCheck to MethodInvocation at 0", "MOV SimpleName: getCompatibility to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getCompatibility to MethodInvocation at 1", "MOV SimpleName: nameCheck to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Integer to MethodInvocation at 0", "INS SimpleName: i to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: addFirst to MethodInvocation at 1", "INS SimpleName: toString to MethodInvocation at 1", "INS SimpleName: location to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: removeFirst to MethodInvocation at 1", "INS ExpressionStatement to Block at 3", "INS SimpleName: location to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS PostfixExpression: ++ to ExpressionStatement at 0", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS ExpressionStatement to Block at 4"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: result to Assignment: = at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: writer to MethodInvocation at 2", "MOV SimpleName: typeMismatch to MethodInvocation at 0", "MOV SimpleName: reader to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: reader to MethodInvocation at 1", "MOV SimpleName: writer to MethodInvocation at 2", "MOV SimpleName: typeMismatch to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: typeMismatch to MethodInvocation at 0", "MOV SimpleName: reader to MethodInvocation at 1", "MOV SimpleName: writer to MethodInvocation at 2"]}, {"root": "INS SimpleName: result to ConditionalExpression at 1", "operations": ["INS SimpleName: result to ConditionalExpression at 1"]}, {"root": "INS MethodInvocation to ConditionalExpression at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: location to MethodInvocation at 3", "INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: result to MethodInvocation at 0", "INS SimpleName: mergedWith to MethodInvocation at 1"]}, {"root": "INS SimpleName: result to ConditionalExpression at 1", "operations": ["INS SimpleName: result to ConditionalExpression at 1"]}, {"root": "INS MethodInvocation to ConditionalExpression at 2", "operations": ["INS SimpleName: mergedWith to MethodInvocation at 1", "INS MethodInvocation to ConditionalExpression at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: result to MethodInvocation at 0", "INS SimpleName: location to MethodInvocation at 3"]}, {"root": "INS SimpleName: result to ConditionalExpression at 1", "operations": ["INS SimpleName: result to ConditionalExpression at 1"]}, {"root": "INS MethodInvocation to ConditionalExpression at 2", "operations": ["INS MethodInvocation to ConditionalExpression at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: result to MethodInvocation at 0", "INS SimpleName: mergedWith to MethodInvocation at 1", "INS SimpleName: location to MethodInvocation at 3"]}, {"root": "INS SimpleName: result to ConditionalExpression at 1", "operations": ["INS SimpleName: result to ConditionalExpression at 1"]}, {"root": "INS MethodInvocation to ConditionalExpression at 2", "operations": ["INS SimpleName: location to MethodInvocation at 3", "INS SimpleName: result to MethodInvocation at 0", "INS MethodInvocation to ConditionalExpression at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: mergedWith to MethodInvocation at 1"]}, {"root": "INS SimpleName: result to ConditionalExpression at 1", "operations": ["INS SimpleName: result to ConditionalExpression at 1"]}, {"root": "INS MethodInvocation to ConditionalExpression at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: result to MethodInvocation at 0", "INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: mergedWith to MethodInvocation at 1", "INS SimpleName: location to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: reader to MethodInvocation at 1", "MOV SimpleName: typeMismatch to MethodInvocation at 0", "MOV SimpleName: writer to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: writer to MethodInvocation at 2", "MOV SimpleName: reader to MethodInvocation at 1", "MOV SimpleName: typeMismatch to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: typeMismatch to MethodInvocation at 0", "MOV SimpleName: reader to MethodInvocation at 1", "MOV SimpleName: writer to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: reader to MethodInvocation at 1", "MOV SimpleName: typeMismatch to MethodInvocation at 0", "MOV SimpleName: writer to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: typeMismatch to MethodInvocation at 0", "MOV SimpleName: writer to MethodInvocation at 2", "MOV SimpleName: reader to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: location to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 6", "INS SimpleName: result to MethodInvocation at 0", "INS SimpleName: result to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: mergedWith to MethodInvocation at 1", "INS SimpleName: asList to MethodInvocation at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "INS StringLiteral: \"items\" to MethodInvocation at 1", "operations": ["INS StringLiteral: \"items\" to MethodInvocation at 1"]}, {"root": "INS SimpleName: location to MethodInvocation at 4", "operations": ["INS SimpleName: location to MethodInvocation at 4"]}, {"root": "INS StringLiteral: \"values\" to MethodInvocation at 1", "operations": ["INS StringLiteral: \"values\" to MethodInvocation at 1"]}, {"root": "INS SimpleName: location to MethodInvocation at 4", "operations": ["INS SimpleName: location to MethodInvocation at 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: checkFixedSize to MethodInvocation at 0", "MOV SimpleName: reader to MethodInvocation at 1", "MOV SimpleName: writer to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: reader to MethodInvocation at 1", "MOV SimpleName: writer to MethodInvocation at 2", "MOV SimpleName: checkReaderEnumContainsAllWriterEnumSymbols to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: writer to MethodInvocation at 2", "MOV SimpleName: reader to MethodInvocation at 1", "MOV SimpleName: checkReaderWriterRecordFields to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: SchemaCompatibilityResult to MethodInvocation at 0", "MOV SimpleName: reader to MethodInvocation at 3", "MOV QualifiedName: SchemaIncompatibilityType.MISSING_UNION_BRANCH to MethodInvocation at 2", "MOV SimpleName: msg to MethodInvocation at 5", "MOV SimpleName: writer to MethodInvocation at 4", "MOV SimpleName: incompatible to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getCompatibility to MethodInvocation at 1", "MOV SimpleName: compatibility to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: writer to MethodInvocation at 2", "MOV SimpleName: reader to MethodInvocation at 1", "MOV SimpleName: checkSchemaNames to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: reader to MethodInvocation at 1", "MOV SimpleName: writer to MethodInvocation at 2", "MOV SimpleName: checkSchemaNames to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: reader to MethodInvocation at 1", "MOV SimpleName: checkSchemaNames to MethodInvocation at 0", "MOV SimpleName: writer to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: location to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: result to MethodInvocation at 0", "INS SimpleName: mergedWith to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: result to Assignment: = at 0", "INS MethodInvocation to MethodInvocation at 6", "INS SimpleName: asList to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: reader to MethodInvocation at 1", "MOV SimpleName: typeMismatch to MethodInvocation at 0", "MOV SimpleName: writer to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: reader to MethodInvocation at 1", "MOV SimpleName: writer to MethodInvocation at 2", "MOV SimpleName: typeMismatch to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: reader to MethodInvocation at 1", "MOV SimpleName: typeMismatch to MethodInvocation at 0", "MOV SimpleName: writer to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: writer to MethodInvocation at 2", "MOV SimpleName: typeMismatch to MethodInvocation at 0", "MOV SimpleName: reader to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: writer to MethodInvocation at 2", "MOV SimpleName: typeMismatch to MethodInvocation at 0", "MOV SimpleName: reader to MethodInvocation at 1"]}, {"root": "INS StringLiteral: \"type\" to MethodInvocation at 1", "operations": ["INS StringLiteral: \"type\" to MethodInvocation at 1"]}, {"root": "INS SimpleName: location to MethodInvocation at 4", "operations": ["INS SimpleName: location to MethodInvocation at 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: compat to MethodInvocation at 0", "MOV SimpleName: getCompatibility to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "INS SimpleName: result to ReturnStatement at 0", "operations": ["INS SimpleName: result to ReturnStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: SchemaCompatibilityResult to MethodInvocation at 0", "MOV QualifiedName: SchemaIncompatibilityType.READER_FIELD_MISSING_DEFAULT_VALUE to MethodInvocation at 2", "MOV SimpleName: reader to MethodInvocation at 3", "MOV MethodInvocation to MethodInvocation at 5", "MOV SimpleName: writer to MethodInvocation at 4", "MOV SimpleName: incompatible to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: msg to MethodInvocation at 5", "MOV SimpleName: SchemaCompatibilityResult to MethodInvocation at 0", "MOV QualifiedName: SchemaIncompatibilityType.MISSING_UNION_BRANCH to MethodInvocation at 2", "MOV SimpleName: reader to MethodInvocation at 3", "MOV SimpleName: incompatible to MethodInvocation at 1", "MOV SimpleName: writer to MethodInvocation at 4"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: Returns the reader schema in this pair.", "DEL SimpleName: getReader", "DEL Block", "DEL TagElement: @return", "DEL SimpleName: mReader", "DEL TextElement:  the reader schema in this pair.", "DEL Javadoc", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL TagElement", "DEL Modifier: public"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: Returns the writer schema in this pair.", "DEL Block", "DEL Javadoc", "DEL TextElement:  the writer schema in this pair.", "DEL ReturnStatement", "DEL TagElement", "DEL SimpleName: mWriter", "DEL Modifier: public", "DEL SimpleName: getWriter", "DEL TagElement: @return", "DEL MethodDeclaration"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: compatible", "DEL SimpleName: SchemaCompatibilityResult", "DEL ReturnStatement", "DEL MethodInvocation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: existing"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: calculated", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL Modifier: final"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: compatible", "DEL SimpleName: SchemaCompatibilityResult", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: nameCheck", "DEL VariableDeclarationStatement", "DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL InfixExpression: ==", "DEL MethodInvocation", "DEL QualifiedName: SchemaCompatibilityType.INCOMPATIBLE", "DEL SimpleName: nameCheck", "DEL IfStatement", "DEL ReturnStatement", "DEL Block"]}, {"root": "DEL ReturnStatement", "operations": ["DEL MethodInvocation", "DEL ReturnStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: nameCheck", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL InfixExpression: ==", "DEL SimpleName: nameCheck", "DEL MethodInvocation", "DEL Block", "DEL IfStatement", "DEL ReturnStatement", "DEL QualifiedName: SchemaCompatibilityType.INCOMPATIBLE"]}, {"root": "DEL ReturnStatement", "operations": ["DEL MethodInvocation", "DEL ReturnStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: nameCheck", "DEL VariableDeclarationStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL InfixExpression: ==", "DEL Block", "DEL QualifiedName: SchemaCompatibilityType.INCOMPATIBLE", "DEL IfStatement", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: nameCheck"]}, {"root": "DEL ReturnStatement", "operations": ["DEL MethodInvocation", "DEL ReturnStatement"]}, {"root": "DEL ReturnStatement", "operations": ["DEL MethodInvocation", "DEL ReturnStatement"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: compatible", "DEL SimpleName: SchemaCompatibilityResult"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleName: compat", "DEL VariableDeclarationFragment"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: compat", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL Block", "DEL ReturnStatement", "DEL QualifiedName: SchemaCompatibilityType.INCOMPATIBLE", "DEL IfStatement"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: compatible", "DEL SimpleName: SchemaCompatibilityResult"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: SchemaCompatibilityResult", "DEL SimpleName: compatible", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: compatibility", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL InfixExpression: ==", "DEL SimpleName: compatibility", "DEL ReturnStatement", "DEL MethodInvocation", "DEL QualifiedName: SchemaCompatibilityType.INCOMPATIBLE", "DEL Block"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL MethodInvocation", "DEL ConditionalExpression", "DEL Block", "DEL ReturnStatement"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL MethodInvocation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL MethodInvocation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL MethodInvocation", "DEL ReturnStatement"]}, {"root": "DEL ReturnStatement", "operations": ["DEL MethodInvocation", "DEL ReturnStatement"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: type"]}, {"root": "DEL Block", "operations": ["DEL FieldAccess", "DEL SimpleName: mSchemaIncompatibilityType", "DEL Assignment: =", "DEL SimpleName: mCompatibility", "DEL ExpressionStatement", "DEL SimpleName: type", "DEL Block", "DEL ThisExpression", "DEL FieldAccess", "DEL SimpleName: errorDetails", "DEL ExpressionStatement", "DEL ThisExpression", "DEL Assignment: ="]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: writer", "DEL SimpleType: Schema"]}, {"root": "DEL SimpleType: Schema", "operations": ["DEL SimpleType: Schema"]}, {"root": "DEL SimpleName: error", "operations": ["DEL SimpleName: error"]}, {"root": "DEL SimpleName: reader", "operations": ["DEL SimpleName: reader"]}, {"root": "DEL SimpleName: writer", "operations": ["DEL SimpleName: writer"]}, {"root": "DEL SimpleName: details", "operations": ["DEL SimpleName: details"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL SimpleName: getIncompatibility", "operations": ["DEL SimpleName: getIncompatibility"]}, {"root": "DEL TextElement: compatibility check.", "operations": ["DEL TextElement: compatibility check."]}, {"root": "DEL TextElement: compatibility check.", "operations": ["DEL TextElement: compatibility check."]}, {"root": "DEL SimpleName: mCompatibility", "operations": ["DEL SimpleName: mCompatibility"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: mSchemaIncompatibilityType", "DEL IfStatement", "DEL InfixExpression: !=", "DEL QualifiedName: other.mSchemaIncompatibilityType"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: mCompatibility", "DEL FieldDeclaration", "DEL TypeDeclaration: class", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL FieldDeclaration", "DEL Modifier: private", "DEL Modifier: final"]}]}}, {"SchemaCompatibility_diff": {"operations": ["Insert ImportDeclaration(18) into CompilationUnit(3064) at 1", "Insert ImportDeclaration(24) into CompilationUnit(3064) at 4", "Insert ImportDeclaration(26) into CompilationUnit(3064) at 5", "Insert QualifiedName: java.util.ArrayDeque(17) into ImportDeclaration(18) at 0", "Insert QualifiedName: java.util.Collections(23) into ImportDeclaration(24) at 0", "Insert QualifiedName: java.util.Deque(25) into ImportDeclaration(26) at 0", "Insert TypeDeclaration: class(2218) into TypeDeclaration: class(3063) at 13", "Insert TypeDeclaration: class(2716) into TypeDeclaration: class(3063) at 14", "Insert MethodDeclaration(3062) into TypeDeclaration: class(3063) at 17", "Insert FieldDeclaration(530) into TypeDeclaration: class(1754) at 5", "Insert MethodDeclaration(599) into TypeDeclaration: class(1754) at 7", "Move Javadoc(1505) into TypeDeclaration: class(2218) at 0", "Move Modifier: public(1506) into TypeDeclaration: class(2218) at 1", "Move Modifier: static(1507) into TypeDeclaration: class(2218) at 2", "Move Modifier: final(1508) into TypeDeclaration: class(2218) at 3", "Move SimpleName: SchemaCompatibilityResult(1509) into TypeDeclaration: class(2218) at 4", "Insert MethodDeclaration(1864) into TypeDeclaration: class(2218) at 5", "Move FieldDeclaration(1530) into TypeDeclaration: class(2218) at 6", "Move FieldDeclaration(1537) into TypeDeclaration: class(2218) at 7", "Move FieldDeclaration(1560) into TypeDeclaration: class(2218) at 8", "Move FieldDeclaration(1576) into TypeDeclaration: class(2218) at 9", "Move MethodDeclaration(1630) into TypeDeclaration: class(2218) at 10", "Move MethodDeclaration(1645) into TypeDeclaration: class(2218) at 11", "Move MethodDeclaration(1660) into TypeDeclaration: class(2218) at 12", "Move MethodDeclaration(1698) into TypeDeclaration: class(2218) at 13", "Move SingleVariableDeclaration(1679) into MethodDeclaration(2030) at 9", "Move MethodDeclaration(1711) into TypeDeclaration: class(2218) at 14", "Move MethodDeclaration(1725) into TypeDeclaration: class(2218) at 15", "Insert MethodDeclaration(2126) into TypeDeclaration: class(2218) at 16", "Insert MethodDeclaration(2198) into TypeDeclaration: class(2218) at 17", "Insert MethodDeclaration(2217) into TypeDeclaration: class(2218) at 18", "Insert Modifier: public(2219) into TypeDeclaration: class(2716) at 0", "Insert Modifier: static(2220) into TypeDeclaration: class(2716) at 1", "Insert Modifier: final(2221) into TypeDeclaration: class(2716) at 2", "Insert SimpleName: Incompatibility(2222) into TypeDeclaration: class(2716) at 3", "Insert FieldDeclaration(2229) into TypeDeclaration: class(2716) at 4", "Insert FieldDeclaration(2236) into TypeDeclaration: class(2716) at 5", "Insert FieldDeclaration(2243) into TypeDeclaration: class(2716) at 6", "Move FieldDeclaration(1544) into TypeDeclaration: class(2716) at 7", "Insert FieldDeclaration(2260) into TypeDeclaration: class(2716) at 8", "Insert MethodDeclaration(2317) into TypeDeclaration: class(2716) at 9", "Insert MethodDeclaration(2330) into TypeDeclaration: class(2716) at 10", "Move MethodDeclaration(1739) into TypeDeclaration: class(2716) at 11", "Move MethodDeclaration(1753) into TypeDeclaration: class(2716) at 12", "Move MethodDeclaration(1770) into TypeDeclaration: class(2716) at 13", "Insert MethodDeclaration(2442) into TypeDeclaration: class(2716) at 14", "Move MethodDeclaration(1879) into TypeDeclaration: class(2716) at 15", "Move MethodDeclaration(2006) into TypeDeclaration: class(2716) at 16", "Move MethodDeclaration(2028) into TypeDeclaration: class(2716) at 17", "Insert Modifier: private(3021) into MethodDeclaration(3062) at 0", "Insert Modifier: static(3022) into MethodDeclaration(3062) at 1", "Insert ParameterizedType: List<String>(3027) into MethodDeclaration(3062) at 2", "Insert SimpleName: asList(3028) into MethodDeclaration(3062) at 3", "Insert SingleVariableDeclaration(3035) into MethodDeclaration(3062) at 4", "Insert Block(3061) into MethodDeclaration(3062) at 5", "Insert Modifier: private(522) into FieldDeclaration(530) at 0", "Insert Modifier: static(523) into FieldDeclaration(530) at 1", "Insert Modifier: final(524) into FieldDeclaration(530) at 2", "Insert SimpleType: String(526) into FieldDeclaration(530) at 3", "Insert VariableDeclarationFragment(529) into FieldDeclaration(530) at 4", "Move Javadoc(573) into MethodDeclaration(599) at 0", "Insert Modifier: public(563) into MethodDeclaration(599) at 1", "Move SimpleType: SchemaCompatibilityResult(644) into MethodDeclaration(599) at 2", "Insert SimpleName: getCompatibility(566) into MethodDeclaration(599) at 3", "Insert SingleVariableDeclaration(571) into MethodDeclaration(599) at 4", "Insert SingleVariableDeclaration(576) into MethodDeclaration(599) at 5", "Insert Block(598) into MethodDeclaration(599) at 6", "Insert Javadoc(617) into MethodDeclaration(724) at 0", "Update Modifier: public(574) to private", "Insert SingleVariableDeclaration(625) into MethodDeclaration(724) at 4", "Insert SingleVariableDeclaration(643) into MethodDeclaration(724) at 7", "Insert SingleVariableDeclaration(773) into MethodDeclaration(1329) at 6", "Insert SingleVariableDeclaration(1351) into MethodDeclaration(1453) at 5", "Insert SingleVariableDeclaration(1475) into MethodDeclaration(1542) at 5", "Insert Block(1541) into MethodDeclaration(1542) at 6", "Insert SingleVariableDeclaration(1564) into MethodDeclaration(1628) at 5", "Insert SingleVariableDeclaration(1650) into MethodDeclaration(1703) at 5", "Insert SingleVariableDeclaration(1725) into MethodDeclaration(1753) at 5", "Insert Javadoc(1815) into MethodDeclaration(1864) at 0", "Insert Modifier: public(1816) into MethodDeclaration(1864) at 1", "Insert SimpleType: SchemaCompatibilityResult(1818) into MethodDeclaration(1864) at 2", "Insert SimpleName: mergedWith(1819) into MethodDeclaration(1864) at 3", "Insert SingleVariableDeclaration(1823) into MethodDeclaration(1864) at 4", "Insert Block(1863) into MethodDeclaration(1864) at 5", "Move SimpleType: SchemaCompatibilityType(1513) into FieldDeclaration(1871) at 2", "Insert ParameterizedType: List<Incompatibility>(1878) into FieldDeclaration(1881) at 2", "Move SimpleType: SchemaCompatibilityResult(1565) into FieldDeclaration(1898) at 3", "Move SimpleType: SchemaCompatibilityResult(1549) into FieldDeclaration(1915) at 3", "Insert SingleVariableDeclaration(1921) into MethodDeclaration(1942) at 2", "Insert SingleVariableDeclaration(1928) into MethodDeclaration(1942) at 3", "Insert Block(1941) into MethodDeclaration(1942) at 4", "Move SingleVariableDeclaration(1594) into MethodDeclaration(2030) at 6", "Move SingleVariableDeclaration(1590) into MethodDeclaration(2030) at 7", "Insert Block(2029) into MethodDeclaration(2030) at 10", "Insert ParameterizedType: List<Incompatibility>(2063) into MethodDeclaration(2068) at 2", "Insert SimpleName: getIncompatibilities(2064) into MethodDeclaration(2068) at 3", "Move Javadoc(2010) into MethodDeclaration(2126) at 0", "Move MarkerAnnotation(2012) into MethodDeclaration(2126) at 1", "Insert Modifier: public(2075) into MethodDeclaration(2126) at 2", "Insert PrimitiveType: int(2076) into MethodDeclaration(2126) at 3", "Insert SimpleName: hashCode(2077) into MethodDeclaration(2126) at 4", "Insert Block(2125) into MethodDeclaration(2126) at 5", "Insert Javadoc(2130) into MethodDeclaration(2198) at 0", "Insert MarkerAnnotation(2132) into MethodDeclaration(2198) at 1", "Insert Modifier: public(2133) into MethodDeclaration(2198) at 2", "Insert PrimitiveType: boolean(2134) into MethodDeclaration(2198) at 3", "Insert SimpleName: equals(2135) into MethodDeclaration(2198) at 4", "Insert SingleVariableDeclaration(2139) into MethodDeclaration(2198) at 5", "Insert Block(2197) into MethodDeclaration(2198) at 6", "Insert Javadoc(2202) into MethodDeclaration(2217) at 0", "Insert MarkerAnnotation(2204) into MethodDeclaration(2217) at 1", "Insert Modifier: public(2205) into MethodDeclaration(2217) at 2", "Move SimpleType: String(2015) into MethodDeclaration(2217) at 3", "Insert SimpleName: toString(2208) into MethodDeclaration(2217) at 4", "Insert Block(2216) into MethodDeclaration(2217) at 5", "Insert Modifier: private(2223) into FieldDeclaration(2229) at 0", "Insert Modifier: final(2224) into FieldDeclaration(2229) at 1", "Move SimpleType: SchemaIncompatibilityType(1720) into FieldDeclaration(2229) at 2", "Insert VariableDeclarationFragment(2228) into FieldDeclaration(2229) at 3", "Insert Modifier: private(2230) into FieldDeclaration(2236) at 0", "Insert Modifier: final(2231) into FieldDeclaration(2236) at 1", "Move SimpleType: Schema(1748) into FieldDeclaration(2236) at 2", "Insert VariableDeclarationFragment(2235) into FieldDeclaration(2236) at 3", "Insert Modifier: private(2237) into FieldDeclaration(2243) at 0", "Insert Modifier: final(2238) into FieldDeclaration(2243) at 1", "Move SimpleType: Schema(1734) into FieldDeclaration(2243) at 2", "Insert VariableDeclarationFragment(2242) into FieldDeclaration(2243) at 3", "Insert Modifier: private(2251) into FieldDeclaration(2260) at 0", "Insert Modifier: final(2252) into FieldDeclaration(2260) at 1", "Insert ParameterizedType: List<String>(2257) into FieldDeclaration(2260) at 2", "Insert VariableDeclarationFragment(2259) into FieldDeclaration(2260) at 3", "Insert SimpleName: Incompatibility(2261) into MethodDeclaration(2317) at 0", "Move SingleVariableDeclaration(1586) into MethodDeclaration(2317) at 1", "Insert SingleVariableDeclaration(2269) into MethodDeclaration(2317) at 2", "Insert SingleVariableDeclaration(2273) into MethodDeclaration(2317) at 3", "Move SingleVariableDeclaration(1598) into MethodDeclaration(2317) at 4", "Insert SingleVariableDeclaration(2284) into MethodDeclaration(2317) at 5", "Insert Block(2316) into MethodDeclaration(2317) at 6", "Insert Javadoc(2322) into MethodDeclaration(2330) at 0", "Insert Modifier: public(2323) into MethodDeclaration(2330) at 1", "Move SimpleType: SchemaIncompatibilityType(1520) into MethodDeclaration(2330) at 2", "Insert SimpleName: getType(2326) into MethodDeclaration(2330) at 3", "Insert Block(2329) into MethodDeclaration(2330) at 4", "Move SimpleType: Schema(1534) into MethodDeclaration(2343) at 2", "Update SimpleName: getReaderSubset(1735) to getReaderFragment", "Move SimpleType: Schema(1527) into MethodDeclaration(2356) at 2", "Update SimpleName: getWriterSubset(1749) to getWriterFragment", "Insert Javadoc(2379) into MethodDeclaration(2442) at 0", "Insert Modifier: public(2380) into MethodDeclaration(2442) at 1", "Insert SimpleType: String(2382) into MethodDeclaration(2442) at 2", "Insert SimpleName: getLocation(2383) into MethodDeclaration(2442) at 3", "Insert Block(2441) into MethodDeclaration(2442) at 4", "Move ExpressionStatement(1807) into Block(2550) at 6", "Move IfStatement(1946) into Block(2691) at 6", "Insert Javadoc(2696) into MethodDeclaration(2715) at 0", "Insert MarkerAnnotation(2698) into MethodDeclaration(2715) at 1", "Insert SimpleType: String(2701) into MethodDeclaration(2715) at 3", "Insert SimpleType: List(3024) into ParameterizedType: List<String>(3027) at 0", "Insert SimpleType: String(3026) into ParameterizedType: List<String>(3027) at 1", "Insert ParameterizedType: Deque<String>(3033) into SingleVariableDeclaration(3035) at 0", "Insert SimpleName: deque(3034) into SingleVariableDeclaration(3035) at 1", "Insert VariableDeclarationStatement(3050) into Block(3061) at 0", "Insert ExpressionStatement(3055) into Block(3061) at 1", "Insert ReturnStatement(3060) into Block(3061) at 2", "Insert SimpleName: String(525) into SimpleType: String(526) at 0", "Insert SimpleName: ROOT_REFERENCE_TOKEN(527) into VariableDeclarationFragment(529) at 0", "Insert StringLiteral: \"\"(528) into VariableDeclarationFragment(529) at 1", "Insert Modifier: final(567) into SingleVariableDeclaration(571) at 0", "Insert SimpleType: Schema(569) into SingleVariableDeclaration(571) at 1", "Insert SimpleName: reader(570) into SingleVariableDeclaration(571) at 2", "Insert Modifier: final(572) into SingleVariableDeclaration(576) at 0", "Insert SimpleType: Schema(574) into SingleVariableDeclaration(576) at 1", "Insert SimpleName: writer(575) into SingleVariableDeclaration(576) at 2", "Insert VariableDeclarationStatement(590) into Block(598) at 0", "Insert ReturnStatement(597) into Block(598) at 1", "Insert TagElement(602) into Javadoc(617) at 0", "Insert TagElement: @param(605) into Javadoc(617) at 1", "Insert TagElement: @param(608) into Javadoc(617) at 2", "Insert TagElement: @param(611) into Javadoc(617) at 3", "Insert TagElement: @param(614) into Javadoc(617) at 4", "Insert TagElement: @return(616) into Javadoc(617) at 5", "Insert SimpleType: String(623) into SingleVariableDeclaration(625) at 0", "Insert SimpleName: referenceToken(624) into SingleVariableDeclaration(625) at 1", "Insert Modifier: final(636) into SingleVariableDeclaration(643) at 0", "Insert ParameterizedType: Deque<String>(641) into SingleVariableDeclaration(643) at 1", "Insert SimpleName: location(642) into SingleVariableDeclaration(643) at 2", "Insert ExpressionStatement(648) into Block(723) at 0", "Insert IfStatement(716) into Block(723) at 4", "Insert ExpressionStatement(720) into Block(723) at 5", "Insert TagElement: @param(748) into Javadoc(751) at 3", "Insert Modifier: final(766) into SingleVariableDeclaration(773) at 0", "Insert ParameterizedType: Deque<String>(771) into SingleVariableDeclaration(773) at 1", "Insert SimpleName: location(772) into SingleVariableDeclaration(773) at 2", "Insert VariableDeclarationStatement(791) into Block(1328) at 2", "Insert Modifier: final(1344) into SingleVariableDeclaration(1351) at 0", "Insert ParameterizedType: Deque<String>(1349) into SingleVariableDeclaration(1351) at 1", "Insert SimpleName: location(1350) into SingleVariableDeclaration(1351) at 2", "Insert VariableDeclarationStatement(1359) into Block(1452) at 0", "Insert ExpressionStatement(1364) into Block(1452) at 1", "Insert ExpressionStatement(1449) into Block(1452) at 3", "Insert ReturnStatement(1451) into Block(1452) at 4", "Insert Modifier: final(1468) into SingleVariableDeclaration(1475) at 0", "Insert ParameterizedType: Deque<String>(1473) into SingleVariableDeclaration(1475) at 1", "Insert SimpleName: location(1474) into SingleVariableDeclaration(1475) at 2", "Insert VariableDeclarationStatement(1483) into Block(1541) at 0", "Insert ExpressionStatement(1488) into Block(1541) at 1", "Move VariableDeclarationStatement(1301) into Block(1541) at 2", "Move ExpressionStatement(1308) into Block(1541) at 3", "Insert IfStatement(1534) into Block(1541) at 4", "Insert ExpressionStatement(1538) into Block(1541) at 5", "Insert ReturnStatement(1540) into Block(1541) at 6", "Insert Modifier: final(1557) into SingleVariableDeclaration(1564) at 0", "Insert ParameterizedType: Deque<String>(1562) into SingleVariableDeclaration(1564) at 1", "Insert SimpleName: location(1563) into SingleVariableDeclaration(1564) at 2", "Insert VariableDeclarationStatement(1572) into Block(1627) at 0", "Insert ExpressionStatement(1577) into Block(1627) at 1", "Insert ExpressionStatement(1624) into Block(1627) at 5", "Insert ReturnStatement(1626) into Block(1627) at 6", "Insert Modifier: final(1643) into SingleVariableDeclaration(1650) at 0", "Insert ParameterizedType: Deque<String>(1648) into SingleVariableDeclaration(1650) at 1", "Insert SimpleName: location(1649) into SingleVariableDeclaration(1650) at 2", "Insert VariableDeclarationStatement(1658) into Block(1702) at 0", "Insert ExpressionStatement(1663) into Block(1702) at 1", "Insert ExpressionStatement(1699) into Block(1702) at 3", "Insert ReturnStatement(1701) into Block(1702) at 4", "Insert Modifier: final(1718) into SingleVariableDeclaration(1725) at 0", "Insert ParameterizedType: Deque<String>(1723) into SingleVariableDeclaration(1725) at 1", "Insert SimpleName: location(1724) into SingleVariableDeclaration(1725) at 2", "Insert TagElement(1803) into Javadoc(1815) at 0", "Insert TagElement: @param(1809) into Javadoc(1815) at 1", "Insert TagElement: @return(1814) into Javadoc(1815) at 2", "Insert SimpleName: SchemaCompatibilityResult(1817) into SimpleType: SchemaCompatibilityResult(1818) at 0", "Move SimpleType: SchemaCompatibilityResult(922) into SingleVariableDeclaration(1823) at 0", "Insert SimpleName: toMerge(1822) into SingleVariableDeclaration(1823) at 1", "Insert VariableDeclarationStatement(1838) into Block(1863) at 0", "Insert ExpressionStatement(1845) into Block(1863) at 1", "Insert VariableDeclarationStatement(1856) into Block(1863) at 2", "Insert ReturnStatement(1862) into Block(1863) at 3", "Update SimpleName: mReaderSubset(1528) to mCompatibilityType", "Insert SimpleType: List(1875) into ParameterizedType: List<Incompatibility>(1878) at 0", "Insert SimpleType: Incompatibility(1877) into ParameterizedType: List<Incompatibility>(1878) at 1", "Update SimpleName: mWriterSubset(1535) to mIncompatibilities", "Insert SimpleType: SchemaCompatibilityType(1919) into SingleVariableDeclaration(1921) at 0", "Insert SimpleName: compatibilityType(1920) into SingleVariableDeclaration(1921) at 1", "Insert ParameterizedType: List<Incompatibility>(1926) into SingleVariableDeclaration(1928) at 0", "Insert SimpleName: incompatibilities(1927) into SingleVariableDeclaration(1928) at 1", "Move ExpressionStatement(1616) into Block(1941) at 0", "Move ExpressionStatement(1622) into Block(1941) at 1", "Update SimpleName: error(1674) to incompatibilityType", "Update SimpleName: writerDetails(1593) to readerFragment", "Update SimpleName: readerDetails(1589) to writerFragment", "Update SimpleName: details(1686) to message", "Insert ParameterizedType: List<String>(2004) into SingleVariableDeclaration(2006) at 0", "Update SimpleName: reader(1678) to location", "Insert VariableDeclarationStatement(2019) into Block(2029) at 0", "Move ReturnStatement(1696) into Block(2029) at 1", "Insert SimpleType: List(2060) into ParameterizedType: List<Incompatibility>(2063) at 0", "Insert SimpleType: Incompatibility(2062) into ParameterizedType: List<Incompatibility>(2063) at 1", "Insert VariableDeclarationStatement(2083) into Block(2125) at 0", "Insert VariableDeclarationStatement(2088) into Block(2125) at 1", "Insert ExpressionStatement(2105) into Block(2125) at 2", "Insert ExpressionStatement(2122) into Block(2125) at 3", "Insert ReturnStatement(2124) into Block(2125) at 4", "Insert TagElement(2129) into Javadoc(2130) at 0", "Insert SimpleName: Override(2131) into MarkerAnnotation(2132) at 0", "Insert SimpleType: Object(2137) into SingleVariableDeclaration(2139) at 0", "Insert SimpleName: obj(2138) into SingleVariableDeclaration(2139) at 1", "Insert IfStatement(2145) into Block(2197) at 0", "Insert IfStatement(2151) into Block(2197) at 1", "Insert IfStatement(2160) into Block(2197) at 2", "Move VariableDeclarationStatement(1925) into Block(2197) at 3", "Insert IfStatement(2188) into Block(2197) at 4", "Insert IfStatement(2194) into Block(2197) at 5", "Insert ReturnStatement(2196) into Block(2197) at 6", "Insert TagElement(2201) into Javadoc(2202) at 0", "Insert SimpleName: Override(2203) into MarkerAnnotation(2204) at 0", "Insert ReturnStatement(2215) into Block(2216) at 0", "Insert SimpleName: mType(2227) into VariableDeclarationFragment(2228) at 0", "Insert SimpleName: mReaderFragment(2234) into VariableDeclarationFragment(2235) at 0", "Insert SimpleName: mWriterFragment(2241) into VariableDeclarationFragment(2242) at 0", "Insert SimpleType: List(2254) into ParameterizedType: List<String>(2257) at 0", "Insert SimpleType: String(2256) into ParameterizedType: List<String>(2257) at 1", "Insert SimpleName: mLocation(2258) into VariableDeclarationFragment(2259) at 0", "Update SimpleName: errorDetails(1585) to type", "Move SimpleType: Schema(438) into SingleVariableDeclaration(2269) at 0", "Insert SimpleName: readerFragment(2268) into SingleVariableDeclaration(2269) at 1", "Move SimpleType: Schema(425) into SingleVariableDeclaration(2273) at 0", "Insert SimpleName: writerFragment(2272) into SingleVariableDeclaration(2273) at 1", "Update SimpleName: details(1597) to message", "Insert ParameterizedType: List<String>(2282) into SingleVariableDeclaration(2284) at 0", "Insert SimpleName: location(2283) into SingleVariableDeclaration(2284) at 1", "Insert SuperConstructorInvocation(2285) into Block(2316) at 0", "Insert ExpressionStatement(2291) into Block(2316) at 1", "Insert ExpressionStatement(2297) into Block(2316) at 2", "Insert ExpressionStatement(2303) into Block(2316) at 3", "Move ExpressionStatement(1628) into Block(2316) at 4", "Insert ExpressionStatement(2315) into Block(2316) at 5", "Insert TagElement(2319) into Javadoc(2322) at 0", "Insert TagElement: @return(2321) into Javadoc(2322) at 1", "Insert ReturnStatement(2328) into Block(2329) at 0", "Insert TagElement(2376) into Javadoc(2379) at 0", "Insert TagElement: @return(2378) into Javadoc(2379) at 1", "Insert SimpleName: String(2381) into SimpleType: String(2382) at 0", "Insert VariableDeclarationStatement(2392) into Block(2441) at 0", "Insert VariableDeclarationStatement(2397) into Block(2441) at 1", "Insert EnhancedForStatement(2436) into Block(2441) at 2", "Insert ReturnStatement(2440) into Block(2441) at 3", "Insert VariableDeclarationStatement(2597) into Block(2691) at 3", "Insert IfStatement(2604) into Block(2691) at 4", "Insert IfStatement(2646) into Block(2691) at 6", "Insert TagElement(2695) into Javadoc(2696) at 0", "Insert SimpleName: Override(2697) into MarkerAnnotation(2698) at 0", "Insert SimpleName: String(2700) into SimpleType: String(2701) at 0", "Insert SimpleName: List(3023) into SimpleType: List(3024) at 0", "Insert SimpleName: String(3025) into SimpleType: String(3026) at 0", "Insert SimpleType: Deque(3030) into ParameterizedType: Deque<String>(3033) at 0", "Insert SimpleType: String(3032) into ParameterizedType: Deque<String>(3033) at 1", "Insert ParameterizedType: List<String>(3040) into VariableDeclarationStatement(3050) at 0", "Insert VariableDeclarationFragment(3049) into VariableDeclarationStatement(3050) at 1", "Insert MethodInvocation(3054) into ExpressionStatement(3055) at 0", "Insert MethodInvocation(3059) into ReturnStatement(3060) at 0", "Insert SimpleName: Schema(568) into SimpleType: Schema(569) at 0", "Insert SimpleName: Schema(573) into SimpleType: Schema(574) at 0", "Insert ParameterizedType: Deque<String>(581) into VariableDeclarationStatement(590) at 0", "Insert VariableDeclarationFragment(589) into VariableDeclarationStatement(590) at 1", "Insert MethodInvocation(596) into ReturnStatement(597) at 0", "Insert TextElement: Reports the compatibility of a reader/writer schema pair.(600) into TagElement(602) at 0", "Insert TextElement: <p> Memoizes the compatibility results. </p>(601) into TagElement(602) at 1", "Insert SimpleName: referenceToken(603) into TagElement: @param(605) at 0", "Insert TextElement:  The equivalent JSON pointer reference token representation of the schema node being visited.(604) into TagElement: @param(605) at 1", "Insert SimpleName: reader(606) into TagElement: @param(608) at 0", "Insert TextElement:  Reader schema to test.(607) into TagElement: @param(608) at 1", "Insert SimpleName: writer(609) into TagElement: @param(611) at 0", "Insert TextElement:  Writer schema to test.(610) into TagElement: @param(611) at 1", "Insert SimpleName: location(612) into TagElement: @param(614) at 0", "Insert TextElement:  Stack with which to track the location within the schema.(613) into TagElement: @param(614) at 1", "Insert TextElement:  the compatibility of the reader/writer schema pair.(615) into TagElement: @return(616) at 0", "Insert SimpleName: String(622) into SimpleType: String(623) at 0", "Insert SimpleType: Deque(638) into ParameterizedType: Deque<String>(641) at 0", "Insert SimpleType: String(640) into ParameterizedType: Deque<String>(641) at 1", "Insert MethodInvocation(647) into ExpressionStatement(648) at 0", "Move InfixExpression: !=(618) into IfStatement(716) at 0", "Move Block(632) into IfStatement(716) at 1", "Insert Block(715) into IfStatement(716) at 2", "Insert MethodInvocation(719) into ExpressionStatement(720) at 0", "Update SimpleName: calculated(658) to result", "Insert SimpleName: location(746) into TagElement: @param(748) at 0", "Insert TextElement:  Stack with which to track the location within the schema.(747) into TagElement: @param(748) at 1", "Insert SimpleType: Deque(768) into ParameterizedType: Deque<String>(771) at 0", "Insert SimpleType: String(770) into ParameterizedType: Deque<String>(771) at 1", "Move SimpleType: SchemaCompatibilityResult(794) into VariableDeclarationStatement(791) at 0", "Insert VariableDeclarationFragment(790) into VariableDeclarationStatement(791) at 1", "Insert SimpleType: Deque(1346) into ParameterizedType: Deque<String>(1349) at 0", "Insert SimpleType: String(1348) into ParameterizedType: Deque<String>(1349) at 1", "Move SimpleType: SchemaCompatibilityResult(1241) into VariableDeclarationStatement(1359) at 0", "Insert VariableDeclarationFragment(1358) into VariableDeclarationStatement(1359) at 1", "Insert MethodInvocation(1363) into ExpressionStatement(1364) at 0", "Insert MethodInvocation(1448) into ExpressionStatement(1449) at 0", "Insert SimpleName: result(1450) into ReturnStatement(1451) at 0", "Insert SimpleType: Deque(1470) into ParameterizedType: Deque<String>(1473) at 0", "Insert SimpleType: String(1472) into ParameterizedType: Deque<String>(1473) at 1", "Move SimpleType: SchemaCompatibilityResult(1552) into VariableDeclarationStatement(1483) at 0", "Insert VariableDeclarationFragment(1482) into VariableDeclarationStatement(1483) at 1", "Insert MethodInvocation(1487) into ExpressionStatement(1488) at 0", "Insert PrefixExpression: !(1517) into IfStatement(1534) at 0", "Insert Block(1533) into IfStatement(1534) at 1", "Insert MethodInvocation(1537) into ExpressionStatement(1538) at 0", "Insert SimpleName: result(1539) into ReturnStatement(1540) at 0", "Insert SimpleType: Deque(1559) into ParameterizedType: Deque<String>(1562) at 0", "Insert SimpleType: String(1561) into ParameterizedType: Deque<String>(1562) at 1", "Move SimpleType: SchemaCompatibilityResult(1568) into VariableDeclarationStatement(1572) at 0", "Insert VariableDeclarationFragment(1571) into VariableDeclarationStatement(1572) at 1", "Insert MethodInvocation(1576) into ExpressionStatement(1577) at 0", "Insert MethodInvocation(1623) into ExpressionStatement(1624) at 0", "Insert SimpleName: result(1625) into ReturnStatement(1626) at 0", "Insert SimpleType: Deque(1645) into ParameterizedType: Deque<String>(1648) at 0", "Insert SimpleType: String(1647) into ParameterizedType: Deque<String>(1648) at 1", "Move SimpleType: SchemaCompatibilityResult(1689) into VariableDeclarationStatement(1658) at 0", "Insert VariableDeclarationFragment(1657) into VariableDeclarationStatement(1658) at 1", "Insert MethodInvocation(1662) into ExpressionStatement(1663) at 0", "Insert MethodInvocation(1698) into ExpressionStatement(1699) at 0", "Insert SimpleName: result(1700) into ReturnStatement(1701) at 0", "Insert SimpleType: Deque(1720) into ParameterizedType: Deque<String>(1723) at 0", "Insert SimpleType: String(1722) into ParameterizedType: Deque<String>(1723) at 1", "Insert TextElement: Merges the current (1792) into TagElement(1803) at 0", "Insert TagElement: @code(1794) into TagElement(1803) at 1", "Insert TextElement:  with the supplied result into a new instance, combining the(1795) into TagElement(1803) at 2", "Insert TextElement: list of (1796) into TagElement(1803) at 3", "Insert TagElement: @code(1798) into TagElement(1803) at 4", "Insert TextElement:  and regressing to the(1799) into TagElement(1803) at 5", "Insert TagElement: @code(1801) into TagElement(1803) at 6", "Insert TextElement:  state if any incompatibilities are encountered.(1802) into TagElement(1803) at 7", "Insert SimpleName: toMerge(1804) into TagElement: @param(1809) at 0", "Insert TextElement:  The (1805) into TagElement: @param(1809) at 1", "Insert TagElement: @code(1807) into TagElement: @param(1809) at 2", "Insert TextElement:  to merge with the current instance.(1808) into TagElement: @param(1809) at 3", "Insert TextElement:  A (1810) into TagElement: @return(1814) at 0", "Insert TagElement: @code(1812) into TagElement: @return(1814) at 1", "Insert TextElement:  that combines the state of the current and supplied instances.(1813) into TagElement: @return(1814) at 2", "Insert ParameterizedType: List<Incompatibility>(1828) into VariableDeclarationStatement(1838) at 0", "Insert VariableDeclarationFragment(1837) into VariableDeclarationStatement(1838) at 1", "Insert MethodInvocation(1844) into ExpressionStatement(1845) at 0", "Move SimpleType: SchemaCompatibilityType(1580) into VariableDeclarationStatement(1856) at 0", "Insert VariableDeclarationFragment(1855) into VariableDeclarationStatement(1856) at 1", "Insert ClassInstanceCreation(1861) into ReturnStatement(1862) at 0", "Insert SimpleName: List(1874) into SimpleType: List(1875) at 0", "Insert SimpleName: Incompatibility(1876) into SimpleType: Incompatibility(1877) at 0", "Move SimpleType: SchemaCompatibilityResult(768) into ClassInstanceCreation(1896) at 0", "Insert MethodInvocation(1895) into ClassInstanceCreation(1896) at 2", "Insert SimpleType: SchemaCompatibilityResult(1906) into ClassInstanceCreation(1913) at 0", "Insert MethodInvocation(1912) into ClassInstanceCreation(1913) at 2", "Insert SimpleName: SchemaCompatibilityType(1918) into SimpleType: SchemaCompatibilityType(1919) at 0", "Insert SimpleType: List(1923) into ParameterizedType: List<Incompatibility>(1926) at 0", "Insert SimpleType: Incompatibility(1925) into ParameterizedType: List<Incompatibility>(1926) at 1", "Insert SimpleType: List(2001) into ParameterizedType: List<String>(2004) at 0", "Insert SimpleType: String(2003) into ParameterizedType: List<String>(2004) at 1", "Insert SimpleType: Incompatibility(2008) into VariableDeclarationStatement(2019) at 0", "Insert VariableDeclarationFragment(2018) into VariableDeclarationStatement(2019) at 1", "Update SimpleName: mCompatibility(1708) to mCompatibilityType", "Update TextElement: If the compatibility is INCOMPATIBLE, returns the SchemaIncompatibilityType (first thing that(1712) to If the compatibility is INCOMPATIBLE, returns ", "Insert TagElement: @link(2047) into TagElement(2050) at 1", "Update TextElement: was incompatible), otherwise null.(1713) to  found, otherwise an empty", "Insert TextElement: list.(2049) into TagElement(2050) at 3", "Insert TextElement:  a list of (2051) into TagElement: @return(2056) at 0", "Insert TagElement: @link(2054) into TagElement: @return(2056) at 1", "Insert TextElement: , may be empty, never null.(2055) into TagElement: @return(2056) at 2", "Insert SimpleName: List(2059) into SimpleType: List(2060) at 0", "Insert SimpleName: Incompatibility(2061) into SimpleType: Incompatibility(2062) at 0", "Update SimpleName: mSchemaIncompatibilityType(1722) to mIncompatibilities", "Insert Modifier: final(2078) into VariableDeclarationStatement(2083) at 0", "Insert PrimitiveType: int(2079) into VariableDeclarationStatement(2083) at 1", "Insert VariableDeclarationFragment(2082) into VariableDeclarationStatement(2083) at 2", "Insert PrimitiveType: int(2084) into VariableDeclarationStatement(2088) at 0", "Insert VariableDeclarationFragment(2087) into VariableDeclarationStatement(2088) at 1", "Insert Assignment: =(2104) into ExpressionStatement(2105) at 0", "Insert Assignment: =(2121) into ExpressionStatement(2122) at 0", "Insert SimpleName: result(2123) into ReturnStatement(2124) at 0", "Insert TagElement: @inheritDoc(2127) into TagElement(2129) at 0", "Insert TextElement:  (2128) into TagElement(2129) at 1", "Insert SimpleName: Object(2136) into SimpleType: Object(2137) at 0", "Insert InfixExpression: ==(2142) into IfStatement(2145) at 0", "Insert ReturnStatement(2144) into IfStatement(2145) at 1", "Insert InfixExpression: ==(2148) into IfStatement(2151) at 0", "Insert ReturnStatement(2150) into IfStatement(2151) at 1", "Insert InfixExpression: !=(2157) into IfStatement(2160) at 0", "Insert ReturnStatement(2159) into IfStatement(2160) at 1", "Insert InfixExpression: ==(2172) into IfStatement(2188) at 0", "Insert Block(2179) into IfStatement(2188) at 1", "Insert IfStatement(2187) into IfStatement(2188) at 2", "Insert InfixExpression: !=(2191) into IfStatement(2194) at 0", "Insert ReturnStatement(2193) into IfStatement(2194) at 1", "Insert BooleanLiteral: true(2195) into ReturnStatement(2196) at 0", "Insert TagElement: @inheritDoc(2199) into TagElement(2201) at 0", "Insert TextElement:  (2200) into TagElement(2201) at 1", "Insert MethodInvocation(2214) into ReturnStatement(2215) at 0", "Insert SimpleName: List(2253) into SimpleType: List(2254) at 0", "Insert SimpleName: String(2255) into SimpleType: String(2256) at 0", "Insert SimpleType: List(2279) into ParameterizedType: List<String>(2282) at 0", "Insert SimpleType: String(2281) into ParameterizedType: List<String>(2282) at 1", "Insert Assignment: =(2290) into ExpressionStatement(2291) at 0", "Insert Assignment: =(2296) into ExpressionStatement(2297) at 0", "Insert Assignment: =(2302) into ExpressionStatement(2303) at 0", "Insert Assignment: =(2314) into ExpressionStatement(2315) at 0", "Insert TextElement: Returns the SchemaIncompatibilityType.(2318) into TagElement(2319) at 0", "Insert TextElement:  a SchemaIncompatibilityType instance.(2320) into TagElement: @return(2321) at 0", "Insert SimpleName: mType(2327) into ReturnStatement(2328) at 0", "Update TextElement: If the compatibility is INCOMPATIBLE, returns the first part of the reader schema that failed(1726) to Returns the fragment of the reader schema that failed compatibility check.", "Update TextElement:  a Schema instance (part of the reader schema), or null(1729) to  a Schema instance (fragment of the reader schema).", "Update SimpleName: mReaderSubset(1736) to mReaderFragment", "Update TextElement: If the compatibility is INCOMPATIBLE, returns the first part of the writer schema that failed(1740) to Returns the fragment of the writer schema that failed compatibility check.", "Update TextElement:  a Schema instance (part of the writer schema), or null(1743) to  a Schema instance (fragment of the writer schema).", "Update SimpleName: mWriterSubset(1750) to mWriterFragment", "Update TextElement: If the compatibility is INCOMPATIBLE, returns a human-readable string with more details about(1754) to Returns a human-readable message with more details about what failed. Syntax depends on the", "Update TextElement: what failed. Syntax depends on the SchemaIncompatibilityType.(1755) to SchemaIncompatibilityType.", "Update TextElement:  a String with details about the incompatibility, or null(1760) to  a String with details about the incompatibility.", "Insert TextElement: Returns a <a href=\"https://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-08\">JSON Pointer</a> describing(2374) into TagElement(2376) at 0", "Insert TextElement: the node location within the schema's JSON document tree where the incompatibility was encountered.(2375) into TagElement(2376) at 1", "Insert TextElement:  JSON Pointer encoded as a string.(2377) into TagElement: @return(2378) at 0", "Insert SimpleType: StringBuilder(2385) into VariableDeclarationStatement(2392) at 0", "Insert VariableDeclarationFragment(2391) into VariableDeclarationStatement(2392) at 1", "Insert PrimitiveType: boolean(2393) into VariableDeclarationStatement(2397) at 0", "Insert VariableDeclarationFragment(2396) into VariableDeclarationStatement(2397) at 1", "Insert SingleVariableDeclaration(2401) into EnhancedForStatement(2436) at 0", "Insert MethodInvocation(2408) into EnhancedForStatement(2436) at 1", "Insert Block(2435) into EnhancedForStatement(2436) at 2", "Insert MethodInvocation(2439) into ReturnStatement(2440) at 0", "Insert SimpleType: Incompatibility(2590) into VariableDeclarationStatement(2597) at 0", "Insert VariableDeclarationFragment(2596) into VariableDeclarationStatement(2597) at 1", "Insert InfixExpression: !=(2600) into IfStatement(2604) at 0", "Move Block(2000) into IfStatement(2604) at 1", "Insert InfixExpression: ==(2628) into IfStatement(2646) at 0", "Insert Block(2636) into IfStatement(2646) at 1", "Insert IfStatement(2645) into IfStatement(2646) at 2", "Insert TagElement: @inheritDoc(2693) into TagElement(2695) at 0", "Insert TextElement:  (2694) into TagElement(2695) at 1", "Update TextElement:  of the schema compatibility.(2081) to  The result of the compatibility check.", "Insert SimpleName: Deque(3029) into SimpleType: Deque(3030) at 0", "Insert SimpleName: String(3031) into SimpleType: String(3032) at 0", "Insert SimpleType: List(3037) into ParameterizedType: List<String>(3040) at 0", "Insert SimpleType: String(3039) into ParameterizedType: List<String>(3040) at 1", "Insert SimpleName: list(3041) into VariableDeclarationFragment(3049) at 0", "Insert ClassInstanceCreation(3048) into VariableDeclarationFragment(3049) at 1", "Insert SimpleName: Collections(3051) into MethodInvocation(3054) at 0", "Insert SimpleName: reverse(3052) into MethodInvocation(3054) at 1", "Insert SimpleName: list(3053) into MethodInvocation(3054) at 2", "Insert SimpleName: Collections(3056) into MethodInvocation(3059) at 0", "Insert SimpleName: unmodifiableList(3057) into MethodInvocation(3059) at 1", "Insert SimpleName: list(3058) into MethodInvocation(3059) at 2", "Insert SimpleType: Deque(578) into ParameterizedType: Deque<String>(581) at 0", "Insert SimpleType: String(580) into ParameterizedType: Deque<String>(581) at 1", "Insert SimpleName: location(582) into VariableDeclarationFragment(589) at 0", "Insert ClassInstanceCreation(588) into VariableDeclarationFragment(589) at 1", "Insert SimpleName: getCompatibility(591) into MethodInvocation(596) at 0", "Insert SimpleName: ROOT_REFERENCE_TOKEN(592) into MethodInvocation(596) at 1", "Insert SimpleName: reader(593) into MethodInvocation(596) at 2", "Insert SimpleName: writer(594) into MethodInvocation(596) at 3", "Insert SimpleName: location(595) into MethodInvocation(596) at 4", "Insert SimpleName: Deque(637) into SimpleType: Deque(638) at 0", "Insert SimpleName: String(639) into SimpleType: String(640) at 0", "Insert SimpleName: location(644) into MethodInvocation(647) at 0", "Insert SimpleName: addFirst(645) into MethodInvocation(647) at 1", "Insert SimpleName: referenceToken(646) into MethodInvocation(647) at 2", "Update SimpleName: existing(609) to result", "Update SimpleName: existing(616) to result", "Move ExpressionStatement(641) into Block(715) at 0", "Insert ExpressionStatement(708) into Block(715) at 1", "Move ExpressionStatement(657) into Block(715) at 2", "Insert SimpleName: location(717) into MethodInvocation(719) at 0", "Insert SimpleName: removeFirst(718) into MethodInvocation(719) at 1", "Insert SimpleName: Deque(767) into SimpleType: Deque(768) at 0", "Insert SimpleName: String(769) into SimpleType: String(770) at 0", "Insert SimpleName: result(786) into VariableDeclarationFragment(790) at 0", "Move MethodInvocation(981) into VariableDeclarationFragment(790) at 1", "Insert SimpleName: Deque(1345) into SimpleType: Deque(1346) at 0", "Insert SimpleName: String(1347) into SimpleType: String(1348) at 0", "Insert SimpleName: result(1354) into VariableDeclarationFragment(1358) at 0", "Move MethodInvocation(1314) into VariableDeclarationFragment(1358) at 1", "Insert SimpleName: location(1360) into MethodInvocation(1363) at 0", "Insert SimpleName: addFirst(1361) into MethodInvocation(1363) at 1", "Insert StringLiteral: \"fields\"(1362) into MethodInvocation(1363) at 2", "Insert ExpressionStatement(1382) into Block(1444) at 0", "Insert ExpressionStatement(1443) into Block(1444) at 3", "Update SimpleName: SchemaCompatibilityResult(1266) to location", "Move SimpleName: SchemaCompatibilityResult(1266) into MethodInvocation(1448) at 0", "Update SimpleName: compatible(1267) to removeFirst", "Move SimpleName: compatible(1267) into MethodInvocation(1448) at 1", "Insert SimpleName: Deque(1469) into SimpleType: Deque(1470) at 0", "Insert SimpleName: String(1471) into SimpleType: String(1472) at 0", "Insert SimpleName: result(1478) into VariableDeclarationFragment(1482) at 0", "Move MethodInvocation(1075) into VariableDeclarationFragment(1482) at 1", "Insert SimpleName: location(1484) into MethodInvocation(1487) at 0", "Insert SimpleName: addFirst(1485) into MethodInvocation(1487) at 1", "Insert StringLiteral: \"symbols\"(1486) into MethodInvocation(1487) at 2", "Move MethodInvocation(1311) into PrefixExpression: !(1517) at 0", "Insert ExpressionStatement(1532) into Block(1533) at 0", "Insert SimpleName: location(1535) into MethodInvocation(1537) at 0", "Insert SimpleName: removeFirst(1536) into MethodInvocation(1537) at 1", "Insert SimpleName: Deque(1558) into SimpleType: Deque(1559) at 0", "Insert SimpleName: String(1560) into SimpleType: String(1561) at 0", "Insert SimpleName: result(1567) into VariableDeclarationFragment(1571) at 0", "Move MethodInvocation(1057) into VariableDeclarationFragment(1571) at 1", "Insert SimpleName: location(1573) into MethodInvocation(1576) at 0", "Insert SimpleName: addFirst(1574) into MethodInvocation(1576) at 1", "Insert StringLiteral: \"size\"(1575) into MethodInvocation(1576) at 2", "Insert ExpressionStatement(1618) into Block(1619) at 1", "Update SimpleName: SchemaCompatibilityResult(1380) to location", "Move SimpleName: SchemaCompatibilityResult(1380) into MethodInvocation(1623) at 0", "Update SimpleName: compatible(1381) to removeFirst", "Move SimpleName: compatible(1381) into MethodInvocation(1623) at 1", "Insert SimpleName: Deque(1644) into SimpleType: Deque(1645) at 0", "Insert SimpleName: String(1646) into SimpleType: String(1647) at 0", "Insert SimpleName: result(1653) into VariableDeclarationFragment(1657) at 0", "Move MethodInvocation(1039) into VariableDeclarationFragment(1657) at 1", "Insert SimpleName: location(1659) into MethodInvocation(1662) at 0", "Insert SimpleName: addFirst(1660) into MethodInvocation(1662) at 1", "Insert StringLiteral: \"name\"(1661) into MethodInvocation(1662) at 2", "Insert ExpressionStatement(1693) into Block(1694) at 1", "Update SimpleName: SchemaCompatibilityResult(1427) to location", "Move SimpleName: SchemaCompatibilityResult(1427) into MethodInvocation(1698) at 0", "Update SimpleName: compatible(1428) to removeFirst", "Move SimpleName: compatible(1428) into MethodInvocation(1698) at 1", "Insert SimpleName: Deque(1719) into SimpleType: Deque(1720) at 0", "Insert SimpleName: String(1721) into SimpleType: String(1722) at 0", "Update SimpleName: msg(1449) to message", "Update SimpleName: msg(1467) to message", "Insert MethodInvocation(1749) into MethodInvocation(1750) at 6", "Insert TextElement:  SchemaCompatibilityResult(1793) into TagElement: @code(1794) at 0", "Insert TextElement:  Incompatibility Incompatibilities(1797) into TagElement: @code(1798) at 0", "Insert TextElement:  SchemaCompatibilityType#INCOMPATIBLE INCOMPATIBLE(1800) into TagElement: @code(1801) at 0", "Insert TextElement:  SchemaCompatibilityResult(1806) into TagElement: @code(1807) at 0", "Insert TextElement:  SchemaCompatibilityResult(1811) into TagElement: @code(1812) at 0", "Insert SimpleType: List(1825) into ParameterizedType: List<Incompatibility>(1828) at 0", "Insert SimpleType: Incompatibility(1827) into ParameterizedType: List<Incompatibility>(1828) at 1", "Insert SimpleName: mergedIncompatibilities(1829) into VariableDeclarationFragment(1837) at 0", "Insert ClassInstanceCreation(1836) into VariableDeclarationFragment(1837) at 1", "Insert SimpleName: mergedIncompatibilities(1839) into MethodInvocation(1844) at 0", "Insert SimpleName: addAll(1840) into MethodInvocation(1844) at 1", "Insert MethodInvocation(1843) into MethodInvocation(1844) at 2", "Update SimpleName: mSchemaIncompatibilityType(1521) to compatibilityType", "Move SimpleName: mSchemaIncompatibilityType(1521) into VariableDeclarationFragment(1855) at 0", "Insert ConditionalExpression(1854) into VariableDeclarationFragment(1855) at 1", "Move SimpleType: SchemaCompatibilityResult(820) into ClassInstanceCreation(1861) at 0", "Insert SimpleName: compatibilityType(1859) into ClassInstanceCreation(1861) at 1", "Insert SimpleName: mergedIncompatibilities(1860) into ClassInstanceCreation(1861) at 2", "Insert SimpleName: Collections(1891) into MethodInvocation(1895) at 0", "Insert SimpleType: Incompatibility(1893) into MethodInvocation(1895) at 1", "Insert SimpleName: emptyList(1894) into MethodInvocation(1895) at 2", "Insert SimpleName: SchemaCompatibilityResult(1905) into SimpleType: SchemaCompatibilityResult(1906) at 0", "Insert SimpleName: Collections(1908) into MethodInvocation(1912) at 0", "Insert SimpleType: Incompatibility(1910) into MethodInvocation(1912) at 1", "Insert SimpleName: emptyList(1911) into MethodInvocation(1912) at 2", "Insert SimpleName: List(1922) into SimpleType: List(1923) at 0", "Insert SimpleName: Incompatibility(1924) into SimpleType: Incompatibility(1925) at 0", "Update SimpleName: readerDetails(1614) to compatibilityType", "Update SimpleName: writerDetails(1620) to incompatibilities", "Insert SimpleName: List(2000) into SimpleType: List(2001) at 0", "Update SimpleName: Schema(1676) to String", "Move SimpleName: Schema(1676) into SimpleType: String(2003) at 0", "Update SimpleName: Schema(1680) to Incompatibility", "Move SimpleName: Schema(1680) into SimpleType: Incompatibility(2008) at 0", "Insert SimpleName: incompatibility(2009) into VariableDeclarationFragment(2018) at 0", "Insert ClassInstanceCreation(2017) into VariableDeclarationFragment(2018) at 1", "Insert SimpleType: SchemaCompatibilityResult(2021) into ClassInstanceCreation(2027) at 0", "Insert MethodInvocation(2026) into ClassInstanceCreation(2027) at 2", "Insert SimpleName: Incompatibility(2045) into TagElement: @link(2047) at 0", "Insert TextElement:  Incompatibilities(2046) into TagElement: @link(2047) at 1", "Insert SimpleName: Incompatibility(2052) into TagElement: @link(2054) at 0", "Update TextElement:  a SchemaIncompatibilityType instance, or null(1715) to  Incompatibilities", "Move TextElement:  a SchemaIncompatibilityType instance, or null(1715) into TagElement: @link(2054) at 1", "Insert SimpleName: prime(2080) into VariableDeclarationFragment(2082) at 0", "Insert NumberLiteral: 31(2081) into VariableDeclarationFragment(2082) at 1", "Insert SimpleName: result(2085) into VariableDeclarationFragment(2087) at 0", "Insert NumberLiteral: 1(2086) into VariableDeclarationFragment(2087) at 1", "Insert SimpleName: result(2089) into Assignment: =(2104) at 0", "Insert InfixExpression: +(2103) into Assignment: =(2104) at 1", "Insert SimpleName: result(2106) into Assignment: =(2121) at 0", "Insert InfixExpression: +(2120) into Assignment: =(2121) at 1", "Insert ThisExpression(2140) into InfixExpression: ==(2142) at 0", "Insert SimpleName: obj(2141) into InfixExpression: ==(2142) at 1", "Insert BooleanLiteral: true(2143) into ReturnStatement(2144) at 0", "Insert SimpleName: obj(2146) into InfixExpression: ==(2148) at 0", "Insert NullLiteral(2147) into InfixExpression: ==(2148) at 1", "Insert BooleanLiteral: false(2149) into ReturnStatement(2150) at 0", "Insert MethodInvocation(2153) into InfixExpression: !=(2157) at 0", "Insert MethodInvocation(2156) into InfixExpression: !=(2157) at 1", "Insert BooleanLiteral: false(2158) into ReturnStatement(2159) at 0", "Insert SimpleName: mIncompatibilities(2170) into InfixExpression: ==(2172) at 0", "Insert NullLiteral(2171) into InfixExpression: ==(2172) at 1", "Insert IfStatement(2178) into Block(2179) at 0", "Insert PrefixExpression: !(2184) into IfStatement(2187) at 0", "Insert ReturnStatement(2186) into IfStatement(2187) at 1", "Insert SimpleName: mCompatibilityType(2189) into InfixExpression: !=(2191) at 0", "Insert QualifiedName: other.mCompatibilityType(2190) into InfixExpression: !=(2191) at 1", "Insert BooleanLiteral: false(2192) into ReturnStatement(2193) at 0", "Insert SimpleName: String(2209) into MethodInvocation(2214) at 0", "Insert SimpleName: format(2210) into MethodInvocation(2214) at 1", "Insert StringLiteral: \"SchemaCompatibilityResult{compatibility:%s, incompatibilities:%s}\"(2211) into MethodInvocation(2214) at 2", "Insert SimpleName: mCompatibilityType(2212) into MethodInvocation(2214) at 3", "Insert SimpleName: mIncompatibilities(2213) into MethodInvocation(2214) at 4", "Insert SimpleName: List(2278) into SimpleType: List(2279) at 0", "Insert SimpleName: String(2280) into SimpleType: String(2281) at 0", "Insert FieldAccess(2288) into Assignment: =(2290) at 0", "Insert SimpleName: type(2289) into Assignment: =(2290) at 1", "Insert FieldAccess(2294) into Assignment: =(2296) at 0", "Insert SimpleName: readerFragment(2295) into Assignment: =(2296) at 1", "Insert FieldAccess(2300) into Assignment: =(2302) at 0", "Insert SimpleName: writerFragment(2301) into Assignment: =(2302) at 1", "Update SimpleName: details(1626) to message", "Insert FieldAccess(2312) into Assignment: =(2314) at 0", "Insert SimpleName: location(2313) into Assignment: =(2314) at 1", "Update SimpleName: getIncompatibility(1757) to getType", "Insert SimpleName: StringBuilder(2384) into SimpleType: StringBuilder(2385) at 0", "Insert SimpleName: s(2386) into VariableDeclarationFragment(2391) at 0", "Insert ClassInstanceCreation(2390) into VariableDeclarationFragment(2391) at 1", "Insert SimpleName: first(2394) into VariableDeclarationFragment(2396) at 0", "Insert BooleanLiteral: true(2395) into VariableDeclarationFragment(2396) at 1", "Insert SimpleType: String(2399) into SingleVariableDeclaration(2401) at 0", "Insert SimpleName: coordinate(2400) into SingleVariableDeclaration(2401) at 1", "Insert SimpleName: mLocation(2402) into MethodInvocation(2408) at 0", "Insert SimpleName: subList(2403) into MethodInvocation(2408) at 1", "Insert NumberLiteral: 1(2404) into MethodInvocation(2408) at 2", "Insert MethodInvocation(2407) into MethodInvocation(2408) at 3", "Insert IfStatement(2421) into Block(2435) at 0", "Insert ExpressionStatement(2434) into Block(2435) at 1", "Insert SimpleName: s(2437) into MethodInvocation(2439) at 0", "Insert SimpleName: toString(2438) into MethodInvocation(2439) at 1", "Insert SimpleName: Incompatibility(2589) into SimpleType: Incompatibility(2590) at 0", "Insert SimpleName: other(2591) into VariableDeclarationFragment(2596) at 0", "Insert CastExpression(2595) into VariableDeclarationFragment(2596) at 1", "Insert SimpleName: mType(2598) into InfixExpression: !=(2600) at 0", "Insert QualifiedName: other.mType(2599) into InfixExpression: !=(2600) at 1", "Update SimpleName: mReaderSubset(1947) to mReaderFragment", "Move Block(1980) into IfStatement(2624) at 1", "Insert SimpleName: mWriterFragment(2626) into InfixExpression: ==(2628) at 0", "Insert NullLiteral(2627) into InfixExpression: ==(2628) at 1", "Move IfStatement(1974) into Block(2636) at 0", "Insert PrefixExpression: !(2641) into IfStatement(2645) at 0", "Move Block(1965) into IfStatement(2645) at 1", "Update SimpleName: mWriterSubset(1982) to mLocation", "Insert Block(2686) into IfStatement(2687) at 1", "Update StringLiteral: \"SchemaCompatibilityDetails{compatibility:%s, type:%s, readerSubset:%s, writerSubset:%s, message:%s}\"(2019) to \"Incompatibility{type:%s, location:%s, message:%s, reader:%s, writer:%s}\"", "Update SimpleName: mCompatibility(2020) to mType", "Insert MethodInvocation(2708) into MethodInvocation(2712) at 4", "Update SimpleName: mReaderSubset(2022) to mMessage", "Update SimpleName: mWriterSubset(2023) to mReaderFragment", "Update SimpleName: mMessage(2024) to mWriterFragment", "Insert SimpleName: List(3036) into SimpleType: List(3037) at 0", "Insert SimpleName: String(3038) into SimpleType: String(3039) at 0", "Insert ParameterizedType: ArrayList<String>(3046) into ClassInstanceCreation(3048) at 0", "Insert SimpleName: deque(3047) into ClassInstanceCreation(3048) at 1", "Insert SimpleName: Deque(577) into SimpleType: Deque(578) at 0", "Insert SimpleName: String(579) into SimpleType: String(580) at 0", "Insert ParameterizedType: ArrayDeque<String>(587) into ClassInstanceCreation(588) at 0", "Insert Assignment: =(707) into ExpressionStatement(708) at 0", "Insert MethodInvocation(1381) into ExpressionStatement(1382) at 0", "Insert MethodInvocation(1442) into ExpressionStatement(1443) at 0", "Update ParameterizedType: TreeSet<>(1295) to TreeSet<String>", "Insert Assignment: =(1531) into ExpressionStatement(1532) at 0", "Insert Assignment: =(1617) into ExpressionStatement(1618) at 0", "Insert Assignment: =(1692) into ExpressionStatement(1693) at 0", "Insert SimpleName: asList(1747) into MethodInvocation(1749) at 0", "Insert SimpleName: location(1748) into MethodInvocation(1749) at 1", "Insert SimpleName: List(1824) into SimpleType: List(1825) at 0", "Insert SimpleName: Incompatibility(1826) into SimpleType: Incompatibility(1827) at 0", "Insert ParameterizedType: ArrayList<Incompatibility>(1834) into ClassInstanceCreation(1836) at 0", "Insert SimpleName: mIncompatibilities(1835) into ClassInstanceCreation(1836) at 1", "Insert SimpleName: toMerge(1841) into MethodInvocation(1843) at 0", "Insert SimpleName: getIncompatibilities(1842) into MethodInvocation(1843) at 1", "Insert InfixExpression: ==(1851) into ConditionalExpression(1854) at 0", "Insert QualifiedName: toMerge.mCompatibilityType(1852) into ConditionalExpression(1854) at 1", "Insert QualifiedName: SchemaCompatibilityType.INCOMPATIBLE(1853) into ConditionalExpression(1854) at 2", "Insert SimpleName: Incompatibility(1892) into SimpleType: Incompatibility(1893) at 0", "Insert SimpleName: Incompatibility(1909) into SimpleType: Incompatibility(1910) at 0", "Update SimpleName: mReaderSubset(1612) to mCompatibilityType", "Update SimpleName: mWriterSubset(1618) to mIncompatibilities", "Insert SimpleType: Incompatibility(2011) into ClassInstanceCreation(2017) at 0", "Insert SimpleName: incompatibilityType(2012) into ClassInstanceCreation(2017) at 1", "Insert SimpleName: readerFragment(2013) into ClassInstanceCreation(2017) at 2", "Insert SimpleName: writerFragment(2014) into ClassInstanceCreation(2017) at 3", "Insert SimpleName: message(2015) into ClassInstanceCreation(2017) at 4", "Insert SimpleName: location(2016) into ClassInstanceCreation(2017) at 5", "Insert SimpleName: SchemaCompatibilityResult(2020) into SimpleType: SchemaCompatibilityResult(2021) at 0", "Insert SimpleName: Collections(2023) into MethodInvocation(2026) at 0", "Insert SimpleName: singletonList(2024) into MethodInvocation(2026) at 1", "Insert SimpleName: incompatibility(2025) into MethodInvocation(2026) at 2", "Move InfixExpression: *(1862) into InfixExpression: +(2103) at 0", "Insert ParenthesizedExpression(2102) into InfixExpression: +(2103) at 1", "Move InfixExpression: *(1845) into InfixExpression: +(2120) at 0", "Insert ParenthesizedExpression(2119) into InfixExpression: +(2120) at 1", "Insert SimpleName: getClass(2152) into MethodInvocation(2153) at 0", "Insert SimpleName: obj(2154) into MethodInvocation(2156) at 0", "Insert SimpleName: getClass(2155) into MethodInvocation(2156) at 1", "Insert InfixExpression: !=(2175) into IfStatement(2178) at 0", "Insert ReturnStatement(2177) into IfStatement(2178) at 1", "Insert MethodInvocation(2183) into PrefixExpression: !(2184) at 0", "Insert BooleanLiteral: false(2185) into ReturnStatement(2186) at 0", "Insert ThisExpression(2286) into FieldAccess(2288) at 0", "Insert SimpleName: mType(2287) into FieldAccess(2288) at 1", "Insert ThisExpression(2292) into FieldAccess(2294) at 0", "Insert SimpleName: mReaderFragment(2293) into FieldAccess(2294) at 1", "Insert ThisExpression(2298) into FieldAccess(2300) at 0", "Insert SimpleName: mWriterFragment(2299) into FieldAccess(2300) at 1", "Insert ThisExpression(2310) into FieldAccess(2312) at 0", "Insert SimpleName: mLocation(2311) into FieldAccess(2312) at 1", "Insert SimpleType: StringBuilder(2388) into ClassInstanceCreation(2390) at 0", "Insert StringLiteral: \"/\"(2389) into ClassInstanceCreation(2390) at 1", "Insert SimpleName: String(2398) into SimpleType: String(2399) at 0", "Insert SimpleName: mLocation(2405) into MethodInvocation(2407) at 0", "Insert SimpleName: size(2406) into MethodInvocation(2407) at 1", "Insert SimpleName: first(2409) into IfStatement(2421) at 0", "Insert Block(2414) into IfStatement(2421) at 1", "Insert Block(2420) into IfStatement(2421) at 2", "Insert MethodInvocation(2433) into ExpressionStatement(2434) at 0", "Move InfixExpression: *(1828) into InfixExpression: +(2477) at 0", "Move InfixExpression: *(1811) into InfixExpression: +(2494) at 0", "Insert InfixExpression: *(2500) into InfixExpression: +(2511) at 0", "Insert InfixExpression: *(2534) into InfixExpression: +(2545) at 0", "Insert SimpleType: Incompatibility(2593) into CastExpression(2595) at 0", "Insert SimpleName: obj(2594) into CastExpression(2595) at 1", "Move Block(1990) into IfStatement(2614) at 1", "Insert MethodInvocation(2640) into PrefixExpression: !(2641) at 0", "Move Block(1955) into IfStatement(2677) at 1", "Insert ReturnStatement(2685) into Block(2686) at 0", "Update SimpleName: mSchemaIncompatibilityType(2021) to getLocation", "Move SimpleName: mSchemaIncompatibilityType(2021) into MethodInvocation(2708) at 0", "Insert SimpleType: ArrayList(3043) into ParameterizedType: ArrayList<String>(3046) at 0", "Insert SimpleType: String(3045) into ParameterizedType: ArrayList<String>(3046) at 1", "Insert SimpleType: ArrayDeque(584) into ParameterizedType: ArrayDeque<String>(587) at 0", "Insert SimpleType: String(586) into ParameterizedType: ArrayDeque<String>(587) at 1", "Insert ExpressionStatement(689) into Block(690) at 0", "Insert SimpleName: result(701) into Assignment: =(707) at 0", "Insert MethodInvocation(706) into Assignment: =(707) at 1", "Update SimpleName: calculated(655) to result", "Insert ExpressionStatement(867) into Block(877) at 0", "Insert ReturnStatement(876) into Block(877) at 1", "Insert ExpressionStatement(890) into Block(900) at 0", "Insert ReturnStatement(899) into Block(900) at 1", "Insert ExpressionStatement(913) into Block(923) at 0", "Insert ReturnStatement(922) into Block(923) at 1", "Insert VariableDeclarationStatement(930) into Block(1002) at 0", "Insert MethodInvocation(1056) into ReturnStatement(1057) at 0", "Insert MethodInvocation(1067) into ReturnStatement(1068) at 0", "Insert MethodInvocation(1078) into ReturnStatement(1079) at 0", "Insert MethodInvocation(1211) into ReturnStatement(1212) at 0", "Insert MethodInvocation(1222) into ReturnStatement(1223) at 0", "Insert MethodInvocation(1233) into ReturnStatement(1234) at 0", "Insert MethodInvocation(1244) into ReturnStatement(1245) at 0", "Insert MethodInvocation(1255) into ReturnStatement(1256) at 0", "Insert SimpleName: location(1373) into MethodInvocation(1381) at 0", "Insert SimpleName: addFirst(1374) into MethodInvocation(1381) at 1", "Insert MethodInvocation(1380) into MethodInvocation(1381) at 2", "Insert ExpressionStatement(1437) into Block(1438) at 0", "Insert SimpleName: location(1440) into MethodInvocation(1442) at 0", "Insert SimpleName: removeFirst(1441) into MethodInvocation(1442) at 1", "Insert SimpleType: String(1499) into ParameterizedType: TreeSet<String>(1500) at 1", "Insert SimpleName: result(1518) into Assignment: =(1531) at 0", "Insert MethodInvocation(1530) into Assignment: =(1531) at 1", "Update SimpleName: msg(1361) to message", "Insert SimpleName: result(1606) into Assignment: =(1617) at 0", "Insert MethodInvocation(1616) into Assignment: =(1617) at 1", "Update SimpleName: msg(1407) to message", "Insert SimpleName: result(1681) into Assignment: =(1692) at 0", "Insert MethodInvocation(1691) into Assignment: =(1692) at 1", "Insert SimpleType: ArrayList(1831) into ParameterizedType: ArrayList<Incompatibility>(1834) at 0", "Insert SimpleType: Incompatibility(1833) into ParameterizedType: ArrayList<Incompatibility>(1834) at 1", "Insert SimpleName: mCompatibilityType(1849) into InfixExpression: ==(1851) at 0", "Insert QualifiedName: SchemaCompatibilityType.COMPATIBLE(1850) into InfixExpression: ==(1851) at 1", "Insert SimpleName: Incompatibility(2010) into SimpleType: Incompatibility(2011) at 0", "Insert ConditionalExpression(2101) into ParenthesizedExpression(2102) at 0", "Insert ConditionalExpression(2118) into ParenthesizedExpression(2119) at 0", "Insert QualifiedName: other.mIncompatibilities(2173) into InfixExpression: !=(2175) at 0", "Insert NullLiteral(2174) into InfixExpression: !=(2175) at 1", "Insert BooleanLiteral: false(2176) into ReturnStatement(2177) at 0", "Insert SimpleName: mIncompatibilities(2180) into MethodInvocation(2183) at 0", "Insert SimpleName: equals(2181) into MethodInvocation(2183) at 1", "Insert QualifiedName: other.mIncompatibilities(2182) into MethodInvocation(2183) at 2", "Insert SimpleName: StringBuilder(2387) into SimpleType: StringBuilder(2388) at 0", "Insert ExpressionStatement(2413) into Block(2414) at 0", "Insert ExpressionStatement(2419) into Block(2420) at 0", "Insert SimpleName: s(2422) into MethodInvocation(2433) at 0", "Insert SimpleName: append(2423) into MethodInvocation(2433) at 1", "Insert MethodInvocation(2432) into MethodInvocation(2433) at 2", "Insert SimpleName: prime(2498) into InfixExpression: *(2500) at 0", "Insert SimpleName: result(2499) into InfixExpression: *(2500) at 1", "Insert SimpleName: prime(2532) into InfixExpression: *(2534) at 0", "Insert SimpleName: result(2533) into InfixExpression: *(2534) at 1", "Insert SimpleName: Incompatibility(2592) into SimpleType: Incompatibility(2593) at 0", "Update QualifiedName: other.mReaderSubset(1950) to other.mReaderFragment", "Update SimpleName: mReaderSubset(1958) to mReaderFragment", "Update QualifiedName: other.mReaderSubset(1960) to other.mReaderFragment", "Update QualifiedName: other.mCompatibility(1969) to other.mWriterFragment", "Insert NullLiteral(2630) into InfixExpression: !=(2631) at 1", "Insert SimpleName: mWriterFragment(2637) into MethodInvocation(2640) at 0", "Insert SimpleName: equals(2638) into MethodInvocation(2640) at 1", "Insert QualifiedName: other.mWriterFragment(2639) into MethodInvocation(2640) at 2", "Update QualifiedName: other.mWriterSubset(1985) to other.mLocation", "Update SimpleName: mWriterSubset(1993) to mLocation", "Update QualifiedName: other.mWriterSubset(1995) to other.mLocation", "Insert BooleanLiteral: false(2684) into ReturnStatement(2685) at 0", "Insert SimpleName: ArrayList(3042) into SimpleType: ArrayList(3043) at 0", "Insert SimpleName: String(3044) into SimpleType: String(3045) at 0", "Insert SimpleName: ArrayDeque(583) into SimpleType: ArrayDeque(584) at 0", "Insert SimpleName: String(585) into SimpleType: String(586) at 0", "Update SimpleName: existing(619) to result", "Insert Assignment: =(688) into ExpressionStatement(689) at 0", "Move SimpleName: calculateCompatibility(646) into MethodInvocation(706) at 0", "Move SimpleName: reader(647) into MethodInvocation(706) at 1", "Move SimpleName: writer(648) into MethodInvocation(706) at 2", "Insert SimpleName: location(705) into MethodInvocation(706) at 3", "Insert SimpleName: result(818) into ReturnStatement(819) at 0", "Insert MethodInvocation(835) into ReturnStatement(836) at 0", "Insert MethodInvocation(852) into ReturnStatement(853) at 0", "Insert Assignment: =(866) into ExpressionStatement(867) at 0", "Insert MethodInvocation(875) into ReturnStatement(876) at 0", "Insert Assignment: =(889) into ExpressionStatement(890) at 0", "Insert MethodInvocation(898) into ReturnStatement(899) at 0", "Insert Assignment: =(912) into ExpressionStatement(913) at 0", "Insert MethodInvocation(921) into ReturnStatement(922) at 0", "Insert PrimitiveType: int(926) into VariableDeclarationStatement(930) at 0", "Insert VariableDeclarationFragment(929) into VariableDeclarationStatement(930) at 1", "Insert SimpleName: result(1000) into ReturnStatement(1001) at 0", "Insert SimpleName: result(1040) into ReturnStatement(1041) at 0", "Insert SimpleName: result(1049) into MethodInvocation(1056) at 0", "Insert SimpleName: mergedWith(1050) into MethodInvocation(1056) at 1", "Insert MethodInvocation(1055) into MethodInvocation(1056) at 2", "Insert SimpleName: result(1060) into MethodInvocation(1067) at 0", "Insert SimpleName: mergedWith(1061) into MethodInvocation(1067) at 1", "Insert MethodInvocation(1066) into MethodInvocation(1067) at 2", "Insert SimpleName: result(1071) into MethodInvocation(1078) at 0", "Insert SimpleName: mergedWith(1072) into MethodInvocation(1078) at 1", "Insert MethodInvocation(1077) into MethodInvocation(1078) at 2", "Insert SimpleName: result(1204) into MethodInvocation(1211) at 0", "Insert SimpleName: mergedWith(1205) into MethodInvocation(1211) at 1", "Insert MethodInvocation(1210) into MethodInvocation(1211) at 2", "Insert SimpleName: result(1215) into MethodInvocation(1222) at 0", "Insert SimpleName: mergedWith(1216) into MethodInvocation(1222) at 1", "Insert MethodInvocation(1221) into MethodInvocation(1222) at 2", "Insert SimpleName: result(1226) into MethodInvocation(1233) at 0", "Insert SimpleName: mergedWith(1227) into MethodInvocation(1233) at 1", "Insert MethodInvocation(1232) into MethodInvocation(1233) at 2", "Insert SimpleName: result(1237) into MethodInvocation(1244) at 0", "Insert SimpleName: mergedWith(1238) into MethodInvocation(1244) at 1", "Insert MethodInvocation(1243) into MethodInvocation(1244) at 2", "Insert SimpleName: result(1248) into MethodInvocation(1255) at 0", "Insert SimpleName: mergedWith(1249) into MethodInvocation(1255) at 1", "Insert MethodInvocation(1254) into MethodInvocation(1255) at 2", "Insert MethodInvocation(1311) into ReturnStatement(1312) at 0", "Insert SimpleName: Integer(1375) into MethodInvocation(1380) at 0", "Insert SimpleName: toString(1376) into MethodInvocation(1380) at 1", "Insert MethodInvocation(1379) into MethodInvocation(1380) at 2", "Insert Assignment: =(1436) into ExpressionStatement(1437) at 0", "Insert SimpleName: String(1498) into SimpleType: String(1499) at 0", "Move SimpleName: SchemaCompatibilityResult(1315) into MethodInvocation(1530) at 0", "Move SimpleName: incompatible(1316) into MethodInvocation(1530) at 1", "Move QualifiedName: SchemaIncompatibilityType.MISSING_ENUM_SYMBOLS(1317) into MethodInvocation(1530) at 2", "Move SimpleName: reader(1318) into MethodInvocation(1530) at 3", "Move SimpleName: writer(1319) into MethodInvocation(1530) at 4", "Move MethodInvocation(1322) into MethodInvocation(1530) at 5", "Insert MethodInvocation(1529) into MethodInvocation(1530) at 6", "Move SimpleName: SchemaCompatibilityResult(1370) into MethodInvocation(1616) at 0", "Move SimpleName: incompatible(1371) into MethodInvocation(1616) at 1", "Move QualifiedName: SchemaIncompatibilityType.FIXED_SIZE_MISMATCH(1372) into MethodInvocation(1616) at 2", "Move SimpleName: reader(1373) into MethodInvocation(1616) at 3", "Move SimpleName: writer(1374) into MethodInvocation(1616) at 4", "Update SimpleName: msg(1375) to message", "Move SimpleName: msg(1375) into MethodInvocation(1616) at 5", "Insert MethodInvocation(1615) into MethodInvocation(1616) at 6", "Move SimpleName: SchemaCompatibilityResult(1417) into MethodInvocation(1691) at 0", "Move SimpleName: incompatible(1418) into MethodInvocation(1691) at 1", "Move QualifiedName: SchemaIncompatibilityType.NAME_MISMATCH(1419) into MethodInvocation(1691) at 2", "Move SimpleName: reader(1420) into MethodInvocation(1691) at 3", "Move SimpleName: writer(1421) into MethodInvocation(1691) at 4", "Update SimpleName: msg(1422) to message", "Move SimpleName: msg(1422) into MethodInvocation(1691) at 5", "Insert MethodInvocation(1690) into MethodInvocation(1691) at 6", "Insert SimpleName: ArrayList(1830) into SimpleType: ArrayList(1831) at 0", "Insert SimpleName: Incompatibility(1832) into SimpleType: Incompatibility(1833) at 0", "Insert ParenthesizedExpression(2096) into ConditionalExpression(2101) at 0", "Insert NumberLiteral: 0(2097) into ConditionalExpression(2101) at 1", "Insert MethodInvocation(2100) into ConditionalExpression(2101) at 2", "Insert ParenthesizedExpression(2113) into ConditionalExpression(2118) at 0", "Insert NumberLiteral: 0(2114) into ConditionalExpression(2118) at 1", "Insert MethodInvocation(2117) into ConditionalExpression(2118) at 2", "Insert Assignment: =(2412) into ExpressionStatement(2413) at 0", "Insert MethodInvocation(2418) into ExpressionStatement(2419) at 0", "Insert MethodInvocation(2428) into MethodInvocation(2432) at 0", "Insert SimpleName: replace(2429) into MethodInvocation(2432) at 1", "Insert StringLiteral: \"/\"(2430) into MethodInvocation(2432) at 2", "Insert StringLiteral: \"~1\"(2431) into MethodInvocation(2432) at 3", "Insert SimpleName: result(684) into Assignment: =(688) at 0", "Move MethodInvocation(1007) into Assignment: =(688) at 1", "Insert SimpleName: result(823) into MethodInvocation(835) at 0", "Insert SimpleName: mergedWith(824) into MethodInvocation(835) at 1", "Move MethodInvocation(750) into MethodInvocation(835) at 2", "Insert SimpleName: result(840) into MethodInvocation(852) at 0", "Insert SimpleName: mergedWith(841) into MethodInvocation(852) at 1", "Move MethodInvocation(762) into MethodInvocation(852) at 2", "Insert SimpleName: result(857) into Assignment: =(866) at 0", "Insert MethodInvocation(865) into Assignment: =(866) at 1", "Update SimpleName: nameCheck(776) to result", "Move SimpleName: nameCheck(776) into MethodInvocation(875) at 0", "Update SimpleName: getCompatibility(777) to mergedWith", "Move SimpleName: getCompatibility(777) into MethodInvocation(875) at 1", "Insert MethodInvocation(874) into MethodInvocation(875) at 2", "Insert SimpleName: result(880) into Assignment: =(889) at 0", "Insert MethodInvocation(888) into Assignment: =(889) at 1", "Update SimpleName: nameCheck(802) to result", "Move SimpleName: nameCheck(802) into MethodInvocation(898) at 0", "Update SimpleName: getCompatibility(803) to mergedWith", "Move SimpleName: getCompatibility(803) into MethodInvocation(898) at 1", "Insert MethodInvocation(897) into MethodInvocation(898) at 2", "Insert SimpleName: result(903) into Assignment: =(912) at 0", "Insert MethodInvocation(911) into Assignment: =(912) at 1", "Update SimpleName: nameCheck(828) to result", "Move SimpleName: nameCheck(828) into MethodInvocation(921) at 0", "Update SimpleName: getCompatibility(829) to mergedWith", "Move SimpleName: getCompatibility(829) into MethodInvocation(921) at 1", "Insert MethodInvocation(920) into MethodInvocation(921) at 2", "Insert SimpleName: i(927) into VariableDeclarationFragment(929) at 0", "Insert NumberLiteral: 0(928) into VariableDeclarationFragment(929) at 1", "Insert ExpressionStatement(946) into Block(998) at 0", "Insert ExpressionStatement(994) into Block(998) at 3", "Insert ExpressionStatement(997) into Block(998) at 4", "Insert ExpressionStatement(1037) into Block(1038) at 0", "Move SimpleName: typeMismatch(952) into MethodInvocation(1055) at 0", "Move SimpleName: reader(953) into MethodInvocation(1055) at 1", "Move SimpleName: writer(954) into MethodInvocation(1055) at 2", "Insert SimpleName: location(1054) into MethodInvocation(1055) at 3", "Move SimpleName: typeMismatch(959) into MethodInvocation(1066) at 0", "Move SimpleName: reader(960) into MethodInvocation(1066) at 1", "Move SimpleName: writer(961) into MethodInvocation(1066) at 2", "Insert SimpleName: location(1065) into MethodInvocation(1066) at 3", "Move SimpleName: typeMismatch(966) into MethodInvocation(1077) at 0", "Move SimpleName: reader(967) into MethodInvocation(1077) at 1", "Move SimpleName: writer(968) into MethodInvocation(1077) at 2", "Insert SimpleName: location(1076) into MethodInvocation(1077) at 3", "Insert SimpleName: result(1088) into ConditionalExpression(1097) at 1", "Insert MethodInvocation(1096) into ConditionalExpression(1097) at 2", "Insert SimpleName: result(1116) into ConditionalExpression(1125) at 1", "Insert MethodInvocation(1124) into ConditionalExpression(1125) at 2", "Insert SimpleName: result(1150) into ConditionalExpression(1159) at 1", "Insert MethodInvocation(1158) into ConditionalExpression(1159) at 2", "Insert SimpleName: result(1170) into ConditionalExpression(1179) at 1", "Insert MethodInvocation(1178) into ConditionalExpression(1179) at 2", "Insert SimpleName: result(1190) into ConditionalExpression(1199) at 1", "Insert MethodInvocation(1198) into ConditionalExpression(1199) at 2", "Move SimpleName: typeMismatch(1085) into MethodInvocation(1210) at 0", "Move SimpleName: reader(1086) into MethodInvocation(1210) at 1", "Move SimpleName: writer(1087) into MethodInvocation(1210) at 2", "Insert SimpleName: location(1209) into MethodInvocation(1210) at 3", "Move SimpleName: typeMismatch(1092) into MethodInvocation(1221) at 0", "Move SimpleName: reader(1093) into MethodInvocation(1221) at 1", "Move SimpleName: writer(1094) into MethodInvocation(1221) at 2", "Insert SimpleName: location(1220) into MethodInvocation(1221) at 3", "Move SimpleName: typeMismatch(1099) into MethodInvocation(1232) at 0", "Move SimpleName: reader(1100) into MethodInvocation(1232) at 1", "Move SimpleName: writer(1101) into MethodInvocation(1232) at 2", "Insert SimpleName: location(1231) into MethodInvocation(1232) at 3", "Move SimpleName: typeMismatch(1106) into MethodInvocation(1243) at 0", "Move SimpleName: reader(1107) into MethodInvocation(1243) at 1", "Move SimpleName: writer(1108) into MethodInvocation(1243) at 2", "Insert SimpleName: location(1242) into MethodInvocation(1243) at 3", "Move SimpleName: typeMismatch(1113) into MethodInvocation(1254) at 0", "Move SimpleName: reader(1114) into MethodInvocation(1254) at 1", "Move SimpleName: writer(1115) into MethodInvocation(1254) at 2", "Insert SimpleName: location(1253) into MethodInvocation(1254) at 3", "Update SimpleName: msg(1152) to message", "Insert SimpleName: result(1299) into MethodInvocation(1311) at 0", "Insert SimpleName: mergedWith(1300) into MethodInvocation(1311) at 1", "Insert MethodInvocation(1310) into MethodInvocation(1311) at 2", "Insert SimpleName: readerField(1377) into MethodInvocation(1379) at 0", "Insert SimpleName: pos(1378) into MethodInvocation(1379) at 1", "Insert ExpressionStatement(1418) into Block(1419) at 0", "Insert SimpleName: result(1422) into Assignment: =(1436) at 0", "Insert MethodInvocation(1435) into Assignment: =(1436) at 1", "Insert SimpleName: asList(1527) into MethodInvocation(1529) at 0", "Insert SimpleName: location(1528) into MethodInvocation(1529) at 1", "Insert SimpleName: asList(1613) into MethodInvocation(1615) at 0", "Insert SimpleName: location(1614) into MethodInvocation(1615) at 1", "Insert SimpleName: asList(1688) into MethodInvocation(1690) at 0", "Insert SimpleName: location(1689) into MethodInvocation(1690) at 1", "Insert InfixExpression: ==(2095) into ParenthesizedExpression(2096) at 0", "Insert SimpleName: mCompatibilityType(2098) into MethodInvocation(2100) at 0", "Insert SimpleName: hashCode(2099) into MethodInvocation(2100) at 1", "Insert InfixExpression: ==(2112) into ParenthesizedExpression(2113) at 0", "Insert SimpleName: mIncompatibilities(2115) into MethodInvocation(2117) at 0", "Insert SimpleName: hashCode(2116) into MethodInvocation(2117) at 1", "Insert SimpleName: first(2410) into Assignment: =(2412) at 0", "Insert BooleanLiteral: false(2411) into Assignment: =(2412) at 1", "Insert SimpleName: s(2415) into MethodInvocation(2418) at 0", "Insert SimpleName: append(2416) into MethodInvocation(2418) at 1", "Insert CharacterLiteral: '/'(2417) into MethodInvocation(2418) at 2", "Insert SimpleName: coordinate(2424) into MethodInvocation(2428) at 0", "Insert SimpleName: replace(2425) into MethodInvocation(2428) at 1", "Insert StringLiteral: \"~\"(2426) into MethodInvocation(2428) at 2", "Insert StringLiteral: \"~0\"(2427) into MethodInvocation(2428) at 3", "Update SimpleName: mReaderSubset(1817) to mType", "Update SimpleName: mCompatibility(1834) to mReaderFragment", "Update SimpleName: mSchemaIncompatibilityType(1851) to mWriterFragment", "Update SimpleName: mWriterSubset(1868) to mLocation", "Insert StringLiteral: \"items\"(826) into MethodInvocation(834) at 1", "Insert SimpleName: location(833) into MethodInvocation(834) at 4", "Insert StringLiteral: \"values\"(843) into MethodInvocation(851) at 1", "Insert SimpleName: location(850) into MethodInvocation(851) at 4", "Insert SimpleName: result(858) into MethodInvocation(865) at 0", "Insert SimpleName: mergedWith(859) into MethodInvocation(865) at 1", "Insert MethodInvocation(864) into MethodInvocation(865) at 2", "Move SimpleName: checkFixedSize(785) into MethodInvocation(874) at 0", "Move SimpleName: reader(786) into MethodInvocation(874) at 1", "Move SimpleName: writer(787) into MethodInvocation(874) at 2", "Insert SimpleName: location(873) into MethodInvocation(874) at 3", "Insert SimpleName: result(881) into MethodInvocation(888) at 0", "Insert SimpleName: mergedWith(882) into MethodInvocation(888) at 1", "Insert MethodInvocation(887) into MethodInvocation(888) at 2", "Move SimpleName: checkReaderEnumContainsAllWriterEnumSymbols(811) into MethodInvocation(897) at 0", "Move SimpleName: reader(812) into MethodInvocation(897) at 1", "Move SimpleName: writer(813) into MethodInvocation(897) at 2", "Insert SimpleName: location(896) into MethodInvocation(897) at 3", "Insert SimpleName: result(904) into MethodInvocation(911) at 0", "Insert SimpleName: mergedWith(905) into MethodInvocation(911) at 1", "Insert MethodInvocation(910) into MethodInvocation(911) at 2", "Move SimpleName: checkReaderWriterRecordFields(837) into MethodInvocation(920) at 0", "Move SimpleName: reader(838) into MethodInvocation(920) at 1", "Move SimpleName: writer(839) into MethodInvocation(920) at 2", "Insert SimpleName: location(919) into MethodInvocation(920) at 3", "Insert MethodInvocation(945) into ExpressionStatement(946) at 0", "Insert MethodInvocation(993) into ExpressionStatement(994) at 0", "Insert PostfixExpression: ++(996) into ExpressionStatement(997) at 0", "Insert Assignment: =(1036) into ExpressionStatement(1037) at 0", "Insert SimpleName: result(1089) into MethodInvocation(1096) at 0", "Insert SimpleName: mergedWith(1090) into MethodInvocation(1096) at 1", "Insert MethodInvocation(1095) into MethodInvocation(1096) at 2", "Insert SimpleName: result(1117) into MethodInvocation(1124) at 0", "Insert SimpleName: mergedWith(1118) into MethodInvocation(1124) at 1", "Insert MethodInvocation(1123) into MethodInvocation(1124) at 2", "Insert SimpleName: result(1151) into MethodInvocation(1158) at 0", "Insert SimpleName: mergedWith(1152) into MethodInvocation(1158) at 1", "Insert MethodInvocation(1157) into MethodInvocation(1158) at 2", "Insert SimpleName: result(1171) into MethodInvocation(1178) at 0", "Insert SimpleName: mergedWith(1172) into MethodInvocation(1178) at 1", "Insert MethodInvocation(1177) into MethodInvocation(1178) at 2", "Insert SimpleName: result(1191) into MethodInvocation(1198) at 0", "Insert SimpleName: mergedWith(1192) into MethodInvocation(1198) at 1", "Insert MethodInvocation(1197) into MethodInvocation(1198) at 2", "Move SimpleName: SchemaCompatibilityResult(1162) into MethodInvocation(1310) at 0", "Move SimpleName: incompatible(1163) into MethodInvocation(1310) at 1", "Move QualifiedName: SchemaIncompatibilityType.MISSING_UNION_BRANCH(1164) into MethodInvocation(1310) at 2", "Move SimpleName: reader(1165) into MethodInvocation(1310) at 3", "Move SimpleName: writer(1166) into MethodInvocation(1310) at 4", "Update SimpleName: msg(1167) to message", "Move SimpleName: msg(1167) into MethodInvocation(1310) at 5", "Insert MethodInvocation(1309) into MethodInvocation(1310) at 6", "Insert Assignment: =(1417) into ExpressionStatement(1418) at 0", "Update SimpleName: compatibility(1253) to result", "Move SimpleName: compatibility(1253) into MethodInvocation(1435) at 0", "Update SimpleName: getCompatibility(1254) to mergedWith", "Move SimpleName: getCompatibility(1254) into MethodInvocation(1435) at 1", "Move MethodInvocation(1250) into MethodInvocation(1435) at 2", "Insert SimpleName: mCompatibilityType(2093) into InfixExpression: ==(2095) at 0", "Insert NullLiteral(2094) into InfixExpression: ==(2095) at 1", "Insert SimpleName: mIncompatibilities(2110) into InfixExpression: ==(2112) at 0", "Insert NullLiteral(2111) into InfixExpression: ==(2112) at 1", "Update SimpleName: mReaderSubset(1812) to mType", "Update SimpleName: mCompatibility(1829) to mReaderFragment", "Update SimpleName: mSchemaIncompatibilityType(1846) to mWriterFragment", "Update SimpleName: mWriterSubset(1863) to mLocation", "Move SimpleName: checkSchemaNames(770) into MethodInvocation(864) at 0", "Move SimpleName: reader(771) into MethodInvocation(864) at 1", "Move SimpleName: writer(772) into MethodInvocation(864) at 2", "Insert SimpleName: location(863) into MethodInvocation(864) at 3", "Move SimpleName: checkSchemaNames(796) into MethodInvocation(887) at 0", "Move SimpleName: reader(797) into MethodInvocation(887) at 1", "Move SimpleName: writer(798) into MethodInvocation(887) at 2", "Insert SimpleName: location(886) into MethodInvocation(887) at 3", "Move SimpleName: checkSchemaNames(822) into MethodInvocation(910) at 0", "Move SimpleName: reader(823) into MethodInvocation(910) at 1", "Move SimpleName: writer(824) into MethodInvocation(910) at 2", "Insert SimpleName: location(909) into MethodInvocation(910) at 3", "Insert SimpleName: location(939) into MethodInvocation(945) at 0", "Insert SimpleName: addFirst(940) into MethodInvocation(945) at 1", "Insert MethodInvocation(944) into MethodInvocation(945) at 2", "Insert ExpressionStatement(988) into Block(989) at 1", "Insert SimpleName: location(991) into MethodInvocation(993) at 0", "Insert SimpleName: removeFirst(992) into MethodInvocation(993) at 1", "Insert SimpleName: i(995) into PostfixExpression: ++(996) at 0", "Insert SimpleName: result(1028) into Assignment: =(1036) at 0", "Insert MethodInvocation(1035) into Assignment: =(1036) at 1", "Move SimpleName: typeMismatch(982) into MethodInvocation(1095) at 0", "Move SimpleName: reader(983) into MethodInvocation(1095) at 1", "Move SimpleName: writer(984) into MethodInvocation(1095) at 2", "Insert SimpleName: location(1094) into MethodInvocation(1095) at 3", "Move SimpleName: typeMismatch(1008) into MethodInvocation(1123) at 0", "Move SimpleName: reader(1009) into MethodInvocation(1123) at 1", "Move SimpleName: writer(1010) into MethodInvocation(1123) at 2", "Insert SimpleName: location(1122) into MethodInvocation(1123) at 3", "Move SimpleName: typeMismatch(1040) into MethodInvocation(1157) at 0", "Move SimpleName: reader(1041) into MethodInvocation(1157) at 1", "Move SimpleName: writer(1042) into MethodInvocation(1157) at 2", "Insert SimpleName: location(1156) into MethodInvocation(1157) at 3", "Move SimpleName: typeMismatch(1058) into MethodInvocation(1177) at 0", "Move SimpleName: reader(1059) into MethodInvocation(1177) at 1", "Move SimpleName: writer(1060) into MethodInvocation(1177) at 2", "Insert SimpleName: location(1176) into MethodInvocation(1177) at 3", "Move SimpleName: typeMismatch(1076) into MethodInvocation(1197) at 0", "Move SimpleName: reader(1077) into MethodInvocation(1197) at 1", "Move SimpleName: writer(1078) into MethodInvocation(1197) at 2", "Insert SimpleName: location(1196) into MethodInvocation(1197) at 3", "Insert SimpleName: asList(1307) into MethodInvocation(1309) at 0", "Insert SimpleName: location(1308) into MethodInvocation(1309) at 1", "Insert SimpleName: result(1401) into Assignment: =(1417) at 0", "Insert MethodInvocation(1416) into Assignment: =(1417) at 1", "Insert StringLiteral: \"type\"(1426) into MethodInvocation(1434) at 1", "Insert SimpleName: location(1433) into MethodInvocation(1434) at 4", "Insert SimpleName: Integer(941) into MethodInvocation(944) at 0", "Insert SimpleName: toString(942) into MethodInvocation(944) at 1", "Insert SimpleName: i(943) into MethodInvocation(944) at 2", "Insert Assignment: =(987) into ExpressionStatement(988) at 0", "Update SimpleName: compat(930) to result", "Move SimpleName: compat(930) into MethodInvocation(1035) at 0", "Update SimpleName: getCompatibility(931) to mergedWith", "Move SimpleName: getCompatibility(931) into MethodInvocation(1035) at 1", "Move MethodInvocation(927) into MethodInvocation(1035) at 2", "Insert SimpleName: result(1281) into ReturnStatement(1282) at 0", "Insert SimpleName: result(1402) into MethodInvocation(1416) at 0", "Insert SimpleName: mergedWith(1403) into MethodInvocation(1416) at 1", "Insert MethodInvocation(1415) into MethodInvocation(1416) at 2", "Update SimpleName: msg(869) to message", "Insert SimpleName: result(973) into Assignment: =(987) at 0", "Insert MethodInvocation(986) into Assignment: =(987) at 1", "Move SimpleName: SchemaCompatibilityResult(1227) into MethodInvocation(1415) at 0", "Move SimpleName: incompatible(1228) into MethodInvocation(1415) at 1", "Move QualifiedName: SchemaIncompatibilityType.READER_FIELD_MISSING_DEFAULT_VALUE(1229) into MethodInvocation(1415) at 2", "Move SimpleName: reader(1230) into MethodInvocation(1415) at 3", "Move SimpleName: writer(1231) into MethodInvocation(1415) at 4", "Move MethodInvocation(1234) into MethodInvocation(1415) at 5", "Insert MethodInvocation(1414) into MethodInvocation(1415) at 6", "Insert SimpleName: result(974) into MethodInvocation(986) at 0", "Insert SimpleName: mergedWith(975) into MethodInvocation(986) at 1", "Insert MethodInvocation(985) into MethodInvocation(986) at 2", "Insert SimpleName: asList(1412) into MethodInvocation(1414) at 0", "Insert SimpleName: location(1413) into MethodInvocation(1414) at 1", "Move SimpleName: SchemaCompatibilityResult(879) into MethodInvocation(985) at 0", "Move SimpleName: incompatible(880) into MethodInvocation(985) at 1", "Move QualifiedName: SchemaIncompatibilityType.MISSING_UNION_BRANCH(881) into MethodInvocation(985) at 2", "Move SimpleName: reader(882) into MethodInvocation(985) at 3", "Move SimpleName: writer(883) into MethodInvocation(985) at 4", "Update SimpleName: msg(884) to message", "Move SimpleName: msg(884) into MethodInvocation(985) at 5", "Insert MethodInvocation(984) into MethodInvocation(985) at 6", "Insert SimpleName: asList(982) into MethodInvocation(984) at 0", "Insert SimpleName: location(983) into MethodInvocation(984) at 1", "Delete TextElement: Returns the reader schema in this pair.(418)", "Delete TagElement(419)", "Delete TextElement:  the reader schema in this pair.(420)", "Delete TagElement: @return(421)", "Delete Javadoc(422)", "Delete Modifier: public(423)", "Delete SimpleName: getReader(426)", "Delete SimpleName: mReader(427)", "Delete ReturnStatement(428)", "Delete Block(429)", "Delete MethodDeclaration(430)", "Delete TextElement: Returns the writer schema in this pair.(431)", "Delete TagElement(432)", "Delete TextElement:  the writer schema in this pair.(433)", "Delete TagElement: @return(434)", "Delete Javadoc(435)", "Delete Modifier: public(436)", "Delete SimpleName: getWriter(439)", "Delete SimpleName: mWriter(440)", "Delete ReturnStatement(441)", "Delete Block(442)", "Delete MethodDeclaration(443)", "Delete Modifier: final(606)", "Delete SimpleName: SchemaCompatibilityResult(624)", "Delete SimpleName: compatible(625)", "Delete MethodInvocation(626)", "Delete ReturnStatement(627)", "Delete SimpleName: existing(630)", "Delete ReturnStatement(631)", "Delete IfStatement(633)", "Delete Modifier: final(642)", "Delete SimpleName: calculated(645)", "Delete MethodInvocation(649)", "Delete VariableDeclarationFragment(650)", "Delete VariableDeclarationStatement(651)", "Delete SimpleName: SchemaCompatibilityResult(736)", "Delete SimpleName: compatible(737)", "Delete MethodInvocation(738)", "Delete SimpleName: nameCheck(769)", "Delete MethodInvocation(773)", "Delete VariableDeclarationFragment(774)", "Delete VariableDeclarationStatement(775)", "Delete MethodInvocation(778)", "Delete QualifiedName: SchemaCompatibilityType.INCOMPATIBLE(779)", "Delete InfixExpression: ==(780)", "Delete SimpleName: nameCheck(781)", "Delete ReturnStatement(782)", "Delete Block(783)", "Delete IfStatement(784)", "Delete MethodInvocation(788)", "Delete ReturnStatement(789)", "Delete SimpleName: nameCheck(795)", "Delete MethodInvocation(799)", "Delete VariableDeclarationFragment(800)", "Delete VariableDeclarationStatement(801)", "Delete MethodInvocation(804)", "Delete QualifiedName: SchemaCompatibilityType.INCOMPATIBLE(805)", "Delete InfixExpression: ==(806)", "Delete SimpleName: nameCheck(807)", "Delete ReturnStatement(808)", "Delete Block(809)", "Delete IfStatement(810)", "Delete MethodInvocation(814)", "Delete ReturnStatement(815)", "Delete SimpleName: nameCheck(821)", "Delete MethodInvocation(825)", "Delete VariableDeclarationFragment(826)", "Delete VariableDeclarationStatement(827)", "Delete MethodInvocation(830)", "Delete QualifiedName: SchemaCompatibilityType.INCOMPATIBLE(831)", "Delete InfixExpression: ==(832)", "Delete SimpleName: nameCheck(833)", "Delete ReturnStatement(834)", "Delete Block(835)", "Delete IfStatement(836)", "Delete MethodInvocation(840)", "Delete ReturnStatement(841)", "Delete MethodInvocation(885)", "Delete ReturnStatement(886)", "Delete SimpleName: SchemaCompatibilityResult(891)", "Delete SimpleName: compatible(892)", "Delete MethodInvocation(893)", "Delete SimpleName: compat(923)", "Delete VariableDeclarationFragment(928)", "Delete VariableDeclarationStatement(929)", "Delete MethodInvocation(932)", "Delete QualifiedName: SchemaCompatibilityType.INCOMPATIBLE(933)", "Delete InfixExpression: ==(934)", "Delete SimpleName: compat(935)", "Delete ReturnStatement(936)", "Delete Block(937)", "Delete IfStatement(938)", "Delete SimpleName: SchemaCompatibilityResult(941)", "Delete SimpleName: compatible(942)", "Delete MethodInvocation(943)", "Delete MethodInvocation(955)", "Delete MethodInvocation(962)", "Delete MethodInvocation(969)", "Delete MethodInvocation(985)", "Delete MethodInvocation(1011)", "Delete MethodInvocation(1043)", "Delete MethodInvocation(1061)", "Delete MethodInvocation(1079)", "Delete MethodInvocation(1088)", "Delete MethodInvocation(1095)", "Delete MethodInvocation(1102)", "Delete MethodInvocation(1109)", "Delete MethodInvocation(1116)", "Delete SimpleName: SchemaCompatibilityResult(1142)", "Delete SimpleName: compatible(1143)", "Delete MethodInvocation(1144)", "Delete MethodInvocation(1168)", "Delete MethodInvocation(1235)", "Delete ReturnStatement(1236)", "Delete SimpleName: compatibility(1242)", "Delete VariableDeclarationFragment(1251)", "Delete VariableDeclarationStatement(1252)", "Delete MethodInvocation(1255)", "Delete QualifiedName: SchemaCompatibilityType.INCOMPATIBLE(1256)", "Delete InfixExpression: ==(1257)", "Delete SimpleName: compatibility(1258)", "Delete ReturnStatement(1259)", "Delete Block(1260)", "Delete IfStatement(1261)", "Delete MethodInvocation(1268)", "Delete ReturnStatement(1269)", "Delete MethodInvocation(1323)", "Delete ConditionalExpression(1324)", "Delete ReturnStatement(1325)", "Delete Block(1326)", "Delete MethodInvocation(1376)", "Delete ReturnStatement(1377)", "Delete MethodInvocation(1382)", "Delete ReturnStatement(1383)", "Delete MethodInvocation(1423)", "Delete ReturnStatement(1424)", "Delete MethodInvocation(1429)", "Delete ReturnStatement(1430)", "Delete NullLiteral(1554)", "Delete NullLiteral(1555)", "Delete NullLiteral(1556)", "Delete NullLiteral(1557)", "Delete NullLiteral(1570)", "Delete NullLiteral(1571)", "Delete NullLiteral(1572)", "Delete NullLiteral(1573)", "Delete SimpleName: type(1581)", "Delete SingleVariableDeclaration(1582)", "Delete ThisExpression(1599)", "Delete SimpleName: mCompatibility(1600)", "Delete FieldAccess(1601)", "Delete SimpleName: type(1602)", "Delete Assignment: =(1603)", "Delete ExpressionStatement(1604)", "Delete ThisExpression(1605)", "Delete SimpleName: mSchemaIncompatibilityType(1606)", "Delete FieldAccess(1607)", "Delete SimpleName: errorDetails(1608)", "Delete Assignment: =(1609)", "Delete ExpressionStatement(1610)", "Delete Block(1629)", "Delete SimpleType: Schema(1681)", "Delete SimpleName: writer(1682)", "Delete SingleVariableDeclaration(1683)", "Delete SimpleType: Schema(1677)", "Delete SimpleName: error(1691)", "Delete SimpleName: reader(1692)", "Delete SimpleName: writer(1693)", "Delete SimpleName: details(1694)", "Delete Block(1697)", "Delete SimpleName: getIncompatibility(1721)", "Delete TextElement: compatibility check.(1727)", "Delete TextElement: compatibility check.(1741)", "Delete SimpleName: mCompatibility(1968)", "Delete SimpleName: mSchemaIncompatibilityType(1975)", "Delete QualifiedName: other.mSchemaIncompatibilityType(1976)", "Delete InfixExpression: !=(1977)", "Delete IfStatement(1981)", "Delete Modifier: private(1510)", "Delete Modifier: final(1511)", "Delete SimpleName: mCompatibility(1514)", "Delete VariableDeclarationFragment(1515)", "Delete FieldDeclaration(1516)", "Delete Modifier: private(1517)", "Delete Modifier: final(1518)", "Delete VariableDeclarationFragment(1522)", "Delete FieldDeclaration(1523)", "Delete TypeDeclaration: class(2029)"]}}], "commit_stats": [{"total_files": 11, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}