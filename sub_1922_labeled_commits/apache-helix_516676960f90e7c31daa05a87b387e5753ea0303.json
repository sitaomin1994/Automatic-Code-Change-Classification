{"application": "apache-helix", "csha": "516676960f90e7c31daa05a87b387e5753ea0303", "files": [{"BaseDataAccessor_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 20", "operations": ["INS SimpleName: listener to TagElement: @param at 0", "INS SimpleName: path to TagElement: @param at 0", "INS SimpleName: subscribe to MethodDeclaration at 2", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: path to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: interface at 20", "INS TagElement: @param to Javadoc at 2", "INS SimpleName: String to SimpleType: String at 0", "INS TagElement: @return to Javadoc at 3", "INS TextElement: Subscribe listener to path to TagElement at 0", "INS TagElement: @param to Javadoc at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: IZkListener to SimpleType: IZkListener at 0", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS SimpleType: IZkListener to SingleVariableDeclaration at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: Stat to SimpleType: Stat at 0", "INS SimpleType: Stat to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: stat to SingleVariableDeclaration at 1"]}]}}, {"BaseDataAccessor_diff": {"operations": ["Insert MethodDeclaration(468) into TypeDeclaration: interface(469) at 20", "Insert SingleVariableDeclaration(295) into MethodDeclaration(299) at 4", "Insert Javadoc(457) into MethodDeclaration(468) at 0", "Insert PrimitiveType: boolean(458) into MethodDeclaration(468) at 1", "Insert SimpleName: subscribe(459) into MethodDeclaration(468) at 2", "Insert SingleVariableDeclaration(463) into MethodDeclaration(468) at 3", "Insert SingleVariableDeclaration(467) into MethodDeclaration(468) at 4", "Insert SimpleType: Stat(293) into SingleVariableDeclaration(295) at 0", "Insert SimpleName: stat(294) into SingleVariableDeclaration(295) at 1", "Insert TagElement(451) into Javadoc(457) at 0", "Insert TagElement: @param(453) into Javadoc(457) at 1", "Insert TagElement: @param(455) into Javadoc(457) at 2", "Insert TagElement: @return(456) into Javadoc(457) at 3", "Insert SimpleType: String(461) into SingleVariableDeclaration(463) at 0", "Insert SimpleName: path(462) into SingleVariableDeclaration(463) at 1", "Insert SimpleType: IZkListener(465) into SingleVariableDeclaration(467) at 0", "Insert SimpleName: listener(466) into SingleVariableDeclaration(467) at 1", "Insert SimpleName: Stat(292) into SimpleType: Stat(293) at 0", "Insert TextElement: Subscribe listener to path(450) into TagElement(451) at 0", "Insert SimpleName: path(452) into TagElement: @param(453) at 0", "Insert SimpleName: listener(454) into TagElement: @param(455) at 0", "Insert SimpleName: String(460) into SimpleType: String(461) at 0", "Insert SimpleName: IZkListener(464) into SimpleType: IZkListener(465) at 0"]}}, {"DataAccessor_cluster": {"actions": [{"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"DataAccessor_diff": {"operations": ["Update SimpleType: ZNRecordDecorator(64) to HelixProperty", "Update SimpleType: ZNRecordDecorator(107) to HelixProperty", "Update SimpleType: ZNRecordDecorator(139) to HelixProperty", "Update SimpleType: ZNRecordDecorator(228) to HelixProperty", "Update SimpleType: ZNRecordDecorator(254) to HelixProperty", "Update SimpleName: ZNRecordDecorator(63) to HelixProperty", "Update SimpleName: ZNRecordDecorator(106) to HelixProperty", "Update SimpleName: ZNRecordDecorator(138) to HelixProperty", "Update SimpleName: ZNRecordDecorator(227) to HelixProperty", "Update SimpleName: ZNRecordDecorator(253) to HelixProperty"]}}, {"HelixProperty_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: java.lang.reflect.Constructor to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: java.util.ArrayList to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: java.util.Collection to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS QualifiedName: java.util.Collections to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 4"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: java.util.HashMap to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS ImportDeclaration to CompilationUnit at 6", "INS QualifiedName: java.util.List to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS ImportDeclaration to CompilationUnit at 7", "INS QualifiedName: java.util.Map to ImportDeclaration at 0"]}, {"root": "INS Javadoc to PackageDeclaration at 0", "operations": ["INS TextElement: you may not use this file except in compliance with the License. to TagElement at 2", "INS TextElement: http://www.apache.org/licenses/LICENSE-2.0 to TagElement at 4", "INS Javadoc to PackageDeclaration at 0", "INS TextElement: limitations under the License. to TagElement at 9", "INS TagElement to Javadoc at 0", "INS TextElement: You may obtain a copy of the License at to TagElement at 3", "INS TextElement: Unless required by applicable law or agreed to in writing, software to TagElement at 5", "INS TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. to TagElement at 7", "INS TextElement: Licensed under the Apache License, Version 2.0 (the \"License\"); to TagElement at 1", "INS TextElement: distributed under the License is distributed on an \"AS IS\" BASIS, to TagElement at 6", "INS TextElement: Copyright (C) 2012 LinkedIn Inc <opensource@linkedin.com> to TagElement at 0", "INS TextElement: See the License for the specific language governing permissions and to TagElement at 8"]}, {"root": "INS Javadoc to TypeDeclaration: class at 0", "operations": ["INS TextElement: A wrapper class for ZNRecord. Used as a parent class for IdealState, to TagElement at 0", "INS Javadoc to TypeDeclaration: class at 0", "INS TextElement: CurrentState, etc. to TagElement at 1", "INS TagElement to Javadoc at 0"]}, {"root": "INS Modifier: abstract to TypeDeclaration: class at 2", "operations": ["INS Modifier: abstract to TypeDeclaration: class at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: _record to VariableDeclarationFragment at 0", "INS Modifier: protected to FieldDeclaration at 0", "INS SimpleName: ZNRecord to SimpleType: ZNRecord at 0", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleType: ZNRecord to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 5", "operations": ["INS SimpleName: ZNRecord to SimpleType: ZNRecord at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: _record to Assignment: = at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: id to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS Block to MethodDeclaration at 3", "INS SimpleType: ZNRecord to ClassInstanceCreation at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS SimpleName: HelixProperty to MethodDeclaration at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: id to ClassInstanceCreation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 6", "operations": ["INS SimpleName: ZNRecord to SimpleType: ZNRecord at 0", "INS SimpleName: HelixProperty to MethodDeclaration at 1", "INS SimpleName: ZNRecord to SimpleType: ZNRecord at 0", "INS SimpleName: record to ClassInstanceCreation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleType: ZNRecord to SingleVariableDeclaration at 0", "INS SimpleName: record to SingleVariableDeclaration at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: ZNRecord to ClassInstanceCreation at 0", "INS SimpleName: _record to Assignment: = at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS ClassInstanceCreation to Assignment: = at 1", "INS Block to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 6"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS Modifier: final to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleType: String to MethodDeclaration at 2", "INS SimpleName: getId to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: _record to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: getId to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: _record to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: setDeltaList to MethodInvocation at 1", "INS SimpleName: setDeltaList to MethodDeclaration at 3", "INS Modifier: final to MethodDeclaration at 1", "INS SimpleType: List to ParameterizedType: List<ZNRecordDelta> at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: deltaList to SingleVariableDeclaration at 1", "INS SimpleName: deltaList to MethodInvocation at 2", "INS ParameterizedType: List<ZNRecordDelta> to SingleVariableDeclaration at 0", "INS SimpleName: ZNRecordDelta to SimpleType: ZNRecordDelta at 0", "INS Modifier: public to MethodDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS SimpleType: ZNRecordDelta to ParameterizedType: List<ZNRecordDelta> at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS SimpleName: toString to MethodInvocation at 1", "INS SimpleName: toString to MethodDeclaration at 3", "INS SimpleName: String to SimpleType: String at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: String to MethodDeclaration at 2", "INS SimpleName: _record to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS MethodInvocation to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS ReturnStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS TagElement to Javadoc at 0", "INS SimpleName: record to SingleVariableDeclaration at 1", "INS SimpleType: T to ParameterizedType: Class<T> at 1", "INS TryStatement to Block at 1", "INS MethodInvocation to ReturnStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: ZNRecord to SimpleType: ZNRecord at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: HelixProperty to SimpleType: HelixProperty at 0", "INS SimpleName: constructor to MethodInvocation at 0", "INS SimpleName: record to MethodInvocation at 2", "INS ArrayCreation to MethodInvocation at 2", "INS IfStatement to Block at 0", "INS Block to CatchClause at 1", "INS TagElement: @return to Javadoc at 3", "INS SimpleName: clazz to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS TagElement: @param to Javadoc at 2", "INS SimpleName: T to TypeParameter at 0", "INS ArrayType: Class[] to ArrayCreation at 0", "INS SimpleType: HelixProperty to TypeParameter at 1", "INS SimpleName: getConstructor to MethodInvocation at 1", "INS SimpleName: ZNRecord to SimpleType: ZNRecord at 0", "INS TextElement: HelixProperty to TagElement at 1", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS SimpleType: Constructor to ParameterizedType: Constructor<T> at 0", "INS SimpleType: ZNRecord to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 1", "INS SimpleType: T to MethodDeclaration at 4", "INS TextElement: static method that convert ZNRecord to an instance that subclasses to TagElement at 0", "INS Block to MethodDeclaration at 8", "INS SimpleType: Class to ParameterizedType: Class<T> at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleType: T to ParameterizedType: Constructor<T> at 1", "INS ParameterizedType: Class<T> to SingleVariableDeclaration at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS VariableDeclarationStatement to Block at 0", "INS TypeLiteral to ArrayInitializer at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: record to InfixExpression: == at 0", "INS CatchClause to TryStatement at 1", "INS SimpleType: Class to ArrayType: Class[] at 0", "INS SimpleName: T to SimpleType: T at 0", "INS TypeParameter to MethodDeclaration at 3", "INS SimpleName: convertToTypedInstance to MethodDeclaration at 5", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: T to SimpleType: T at 0", "INS Modifier: static to MethodDeclaration at 2", "INS SimpleName: Constructor to SimpleType: Constructor at 0", "INS ParameterizedType: Constructor<T> to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: newInstance to MethodInvocation at 1", "INS SimpleName: clazz to TagElement: @param at 0", "INS SimpleName: T to SimpleType: T at 0", "INS Dimension to ArrayType: Class[] at 1", "INS SimpleName: clazz to SingleVariableDeclaration at 1", "INS SimpleName: record to TagElement: @param at 0", "INS NullLiteral to ReturnStatement at 0", "INS SimpleName: printStackTrace to MethodInvocation at 1", "INS SimpleName: constructor to VariableDeclarationFragment at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: Class to SimpleType: Class at 0", "INS Block to TryStatement at 0", "INS ArrayInitializer to ArrayCreation at 1", "INS SimpleType: Exception to SingleVariableDeclaration at 0", "INS TagElement: @param to Javadoc at 1", "INS ReturnStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: ZNRecord to TypeLiteral at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS ParameterizedType: List<T> to VariableDeclarationStatement at 0", "INS SimpleType: List to ParameterizedType: List<T> at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: T to SimpleType: T at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS EnhancedForStatement to Block at 2", "INS IfStatement to Block at 1", "INS ReturnStatement to Block at 3", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: convertToTypedList to MethodDeclaration at 4", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Block to EnhancedForStatement at 2", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: Class to ParameterizedType: Class<T> at 0", "INS ParameterizedType: Collection<ZNRecord> to SingleVariableDeclaration at 0", "INS SimpleName: T to SimpleType: T at 0", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleType: Collection to ParameterizedType: Collection<ZNRecord> at 0", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS SimpleName: ZNRecord to SimpleType: ZNRecord at 0", "INS SimpleName: clazz to MethodInvocation at 2", "INS SimpleType: T to ParameterizedType: ArrayList<T> at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleName: HelixProperty to MethodInvocation at 0", "INS TypeParameter to MethodDeclaration at 2", "INS SimpleName: decorators to VariableDeclarationFragment at 0", "INS SimpleName: record to SingleVariableDeclaration at 1", "INS ParameterizedType: List<T> to MethodDeclaration at 3", "INS Block to MethodDeclaration at 7", "INS SimpleName: records to InfixExpression: == at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleType: HelixProperty to TypeParameter at 1", "INS SimpleName: clazz to SingleVariableDeclaration at 1", "INS ParameterizedType: Class<T> to SingleVariableDeclaration at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<T> at 0", "INS SimpleName: decorator to VariableDeclarationFragment at 0", "INS SimpleName: convertToTypedInstance to MethodInvocation at 1", "INS SimpleName: records to EnhancedForStatement at 1", "INS SimpleName: T to SimpleType: T at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleType: ZNRecord to SingleVariableDeclaration at 0", "INS SimpleType: T to ParameterizedType: List<T> at 1", "INS NullLiteral to InfixExpression: == at 1", "INS NullLiteral to InfixExpression: != at 1", "INS IfStatement to Block at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: records to SingleVariableDeclaration at 1", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS SimpleName: record to MethodInvocation at 3", "INS SimpleName: HelixProperty to SimpleType: HelixProperty at 0", "INS NullLiteral to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleType: T to VariableDeclarationStatement at 0", "INS SimpleName: decorator to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: T to ParameterizedType: List<T> at 1", "INS SimpleType: List to ParameterizedType: List<T> at 0", "INS SimpleName: T to SimpleType: T at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: T to TypeParameter at 0", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: decorators to ReturnStatement at 0", "INS SimpleName: T to SimpleType: T at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: decorator to InfixExpression: != at 0", "INS SimpleName: decorators to MethodInvocation at 0", "INS SimpleType: T to ParameterizedType: Class<T> at 1", "INS ParameterizedType: ArrayList<T> to ClassInstanceCreation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS EnhancedForStatement to Block at 2", "INS SimpleName: T to SimpleType: T at 0", "INS SimpleName: T to SimpleType: T at 0", "INS SimpleName: decorators to VariableDeclarationFragment at 0", "INS Modifier: public to MethodDeclaration at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: HashMap to ParameterizedType: HashMap<String,T> at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleType: List to ParameterizedType: List<T> at 0", "INS SimpleName: List to SimpleType: List at 0", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS SimpleName: convertListToMap to MethodDeclaration at 4", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: record to SingleVariableDeclaration at 1", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleType: T to ParameterizedType: Map<String,T> at 2", "INS SimpleName: decorators to MethodInvocation at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleType: Map to ParameterizedType: Map<String,T> at 0", "INS SimpleName: Collections to MethodInvocation at 0", "INS SimpleName: records to EnhancedForStatement at 1", "INS ParameterizedType: HashMap<String,T> to ClassInstanceCreation at 0", "INS SimpleType: String to ParameterizedType: Map<String,T> at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleType: T to ParameterizedType: Map<String,T> at 2", "INS SimpleName: HelixProperty to SimpleType: HelixProperty at 0", "INS SimpleName: T to SimpleType: T at 0", "INS SimpleName: records to InfixExpression: == at 0", "INS Block to IfStatement at 1", "INS SimpleName: T to SimpleType: T at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: T to SimpleType: T at 0", "INS SimpleType: T to SingleVariableDeclaration at 0", "INS SimpleType: String to ParameterizedType: HashMap<String,T> at 1", "INS SimpleName: record to MethodInvocation at 0", "INS ParameterizedType: List<T> to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: T to ParameterizedType: HashMap<String,T> at 2", "INS SimpleType: String to ParameterizedType: Map<String,T> at 1", "INS IfStatement to Block at 0", "INS SimpleName: record to MethodInvocation at 3", "INS Block to EnhancedForStatement at 2", "INS ParameterizedType: Map<String,T> to MethodDeclaration at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Map to ParameterizedType: Map<String,T> at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: HelixProperty to TypeParameter at 1", "INS ReturnStatement to Block at 3", "INS SimpleType: T to ParameterizedType: List<T> at 1", "INS SimpleName: getId to MethodInvocation at 1", "INS ParameterizedType: Map<String,T> to VariableDeclarationStatement at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: records to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 1", "INS TypeParameter to MethodDeclaration at 2", "INS SimpleName: HashMap to SimpleType: HashMap at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: decorators to ReturnStatement at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: emptyMap to MethodInvocation at 1", "INS InfixExpression: == to IfStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: T to TypeParameter at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS Modifier: abstract to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS SimpleName: isValid to MethodDeclaration at 3", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS SimpleName: HelixProperty to SimpleType: HelixProperty at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ReturnStatement to Block at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS SimpleType: HelixProperty to InstanceofExpression at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: obj to InfixExpression: == at 0", "INS IfStatement to Block at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: getRecord to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS Block to IfStatement at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS InstanceofExpression to IfStatement at 0", "INS ThisExpression to MethodInvocation at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleName: HelixProperty to SimpleType: HelixProperty at 0", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS SimpleName: getRecord to MethodInvocation at 1", "INS BooleanLiteral: false to ReturnStatement at 0", "INS InfixExpression: == to IfStatement at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS IfStatement to Block at 0", "INS SimpleType: HelixProperty to CastExpression at 0", "INS SimpleName: that to VariableDeclarationFragment at 0", "INS SimpleName: that to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: HelixProperty to SimpleType: HelixProperty at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleType: HelixProperty to VariableDeclarationStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 5", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: getRecord to MethodInvocation at 1", "INS SimpleName: obj to SingleVariableDeclaration at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: obj to InstanceofExpression at 0", "INS SimpleName: that to MethodInvocation at 0", "INS SimpleName: equals to MethodDeclaration at 3", "INS Block to IfStatement at 1", "INS SimpleName: obj to CastExpression at 1", "INS IfStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS Modifier: final to MethodDeclaration at 1", "operations": ["INS Modifier: final to MethodDeclaration at 1"]}, {"root": "INS SimpleType: ZNRecord to MethodDeclaration at 2", "operations": ["INS SimpleType: ZNRecord to MethodDeclaration at 2", "INS SimpleName: ZNRecord to SimpleType: ZNRecord at 0"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: _record to ReturnStatement at 0"]}, {"root": "MOVE from ParameterizedType: Collection<ZNRecord>", "operations": ["MOV SimpleType: ZNRecord to ParameterizedType: Collection<ZNRecord> at 1", "MOV Block to IfStatement at 1"]}]}}, {"HelixProperty_diff": {"operations": ["Insert ImportDeclaration(15) into CompilationUnit(401) at 1", "Insert ImportDeclaration(17) into CompilationUnit(401) at 2", "Insert ImportDeclaration(19) into CompilationUnit(401) at 3", "Insert ImportDeclaration(21) into CompilationUnit(401) at 4", "Insert ImportDeclaration(23) into CompilationUnit(401) at 5", "Insert ImportDeclaration(25) into CompilationUnit(401) at 6", "Insert ImportDeclaration(27) into CompilationUnit(401) at 7", "Insert Javadoc(11) into PackageDeclaration(13) at 0", "Insert QualifiedName: java.lang.reflect.Constructor(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: java.util.ArrayList(16) into ImportDeclaration(17) at 0", "Insert QualifiedName: java.util.Collection(18) into ImportDeclaration(19) at 0", "Insert QualifiedName: java.util.Collections(20) into ImportDeclaration(21) at 0", "Insert QualifiedName: java.util.HashMap(22) into ImportDeclaration(23) at 0", "Insert QualifiedName: java.util.List(24) into ImportDeclaration(25) at 0", "Insert QualifiedName: java.util.Map(26) into ImportDeclaration(27) at 0", "Insert Javadoc(31) into TypeDeclaration: class(400) at 0", "Insert Modifier: abstract(33) into TypeDeclaration: class(400) at 2", "Insert FieldDeclaration(41) into TypeDeclaration: class(400) at 4", "Insert MethodDeclaration(56) into TypeDeclaration: class(400) at 5", "Insert MethodDeclaration(71) into TypeDeclaration: class(400) at 6", "Insert MethodDeclaration(82) into TypeDeclaration: class(400) at 7", "Insert MethodDeclaration(109) into TypeDeclaration: class(400) at 9", "Insert MethodDeclaration(121) into TypeDeclaration: class(400) at 10", "Insert MethodDeclaration(198) into TypeDeclaration: class(400) at 11", "Insert MethodDeclaration(276) into TypeDeclaration: class(400) at 12", "Insert MethodDeclaration(343) into TypeDeclaration: class(400) at 13", "Insert MethodDeclaration(348) into TypeDeclaration: class(400) at 14", "Insert MethodDeclaration(399) into TypeDeclaration: class(400) at 15", "Insert TagElement(10) into Javadoc(11) at 0", "Insert TagElement(30) into Javadoc(31) at 0", "Insert Modifier: protected(35) into FieldDeclaration(41) at 0", "Insert Modifier: final(36) into FieldDeclaration(41) at 1", "Insert SimpleType: ZNRecord(38) into FieldDeclaration(41) at 2", "Insert VariableDeclarationFragment(40) into FieldDeclaration(41) at 3", "Insert Modifier: public(42) into MethodDeclaration(56) at 0", "Insert SimpleName: HelixProperty(43) into MethodDeclaration(56) at 1", "Insert SingleVariableDeclaration(47) into MethodDeclaration(56) at 2", "Insert Block(55) into MethodDeclaration(56) at 3", "Insert Modifier: public(57) into MethodDeclaration(71) at 0", "Insert SimpleName: HelixProperty(58) into MethodDeclaration(71) at 1", "Insert SingleVariableDeclaration(62) into MethodDeclaration(71) at 2", "Insert Block(70) into MethodDeclaration(71) at 3", "Insert Modifier: public(72) into MethodDeclaration(82) at 0", "Insert Modifier: final(73) into MethodDeclaration(82) at 1", "Insert SimpleType: String(75) into MethodDeclaration(82) at 2", "Insert SimpleName: getId(76) into MethodDeclaration(82) at 3", "Insert Block(81) into MethodDeclaration(82) at 4", "Insert Modifier: final(84) into MethodDeclaration(91) at 1", "Insert SimpleType: ZNRecord(86) into MethodDeclaration(91) at 2", "Insert Block(90) into MethodDeclaration(91) at 4", "Insert Modifier: public(92) into MethodDeclaration(109) at 0", "Insert Modifier: final(93) into MethodDeclaration(109) at 1", "Insert PrimitiveType: void(94) into MethodDeclaration(109) at 2", "Insert SimpleName: setDeltaList(95) into MethodDeclaration(109) at 3", "Insert SingleVariableDeclaration(102) into MethodDeclaration(109) at 4", "Insert Block(108) into MethodDeclaration(109) at 5", "Insert MarkerAnnotation(111) into MethodDeclaration(121) at 0", "Insert Modifier: public(112) into MethodDeclaration(121) at 1", "Insert SimpleType: String(114) into MethodDeclaration(121) at 2", "Insert SimpleName: toString(115) into MethodDeclaration(121) at 3", "Insert Block(120) into MethodDeclaration(121) at 4", "Insert Javadoc(130) into MethodDeclaration(198) at 0", "Insert Modifier: public(131) into MethodDeclaration(198) at 1", "Insert Modifier: static(132) into MethodDeclaration(198) at 2", "Insert TypeParameter(136) into MethodDeclaration(198) at 3", "Insert SimpleType: T(138) into MethodDeclaration(198) at 4", "Insert SimpleName: convertToTypedInstance(139) into MethodDeclaration(198) at 5", "Insert SingleVariableDeclaration(146) into MethodDeclaration(198) at 6", "Insert SingleVariableDeclaration(150) into MethodDeclaration(198) at 7", "Insert Block(197) into MethodDeclaration(198) at 8", "Insert Modifier: public(199) into MethodDeclaration(276) at 0", "Insert Modifier: static(200) into MethodDeclaration(276) at 1", "Insert TypeParameter(204) into MethodDeclaration(276) at 2", "Insert ParameterizedType: List<T>(209) into MethodDeclaration(276) at 3", "Insert SimpleName: convertToTypedList(210) into MethodDeclaration(276) at 4", "Insert SingleVariableDeclaration(217) into MethodDeclaration(276) at 5", "Insert SingleVariableDeclaration(224) into MethodDeclaration(276) at 6", "Insert Block(275) into MethodDeclaration(276) at 7", "Insert Modifier: public(277) into MethodDeclaration(343) at 0", "Insert Modifier: static(278) into MethodDeclaration(343) at 1", "Insert TypeParameter(282) into MethodDeclaration(343) at 2", "Insert ParameterizedType: Map<String,T>(289) into MethodDeclaration(343) at 3", "Insert SimpleName: convertListToMap(290) into MethodDeclaration(343) at 4", "Insert SingleVariableDeclaration(297) into MethodDeclaration(343) at 5", "Insert Block(342) into MethodDeclaration(343) at 6", "Insert Modifier: public(344) into MethodDeclaration(348) at 0", "Insert Modifier: abstract(345) into MethodDeclaration(348) at 1", "Insert PrimitiveType: boolean(346) into MethodDeclaration(348) at 2", "Insert SimpleName: isValid(347) into MethodDeclaration(348) at 3", "Insert MarkerAnnotation(350) into MethodDeclaration(399) at 0", "Insert Modifier: public(351) into MethodDeclaration(399) at 1", "Insert PrimitiveType: boolean(352) into MethodDeclaration(399) at 2", "Insert SimpleName: equals(353) into MethodDeclaration(399) at 3", "Insert SingleVariableDeclaration(357) into MethodDeclaration(399) at 4", "Insert Block(398) into MethodDeclaration(399) at 5", "Insert TextElement: Copyright (C) 2012 LinkedIn Inc <opensource@linkedin.com>(0) into TagElement(10) at 0", "Insert TextElement: Licensed under the Apache License, Version 2.0 (the \"License\");(1) into TagElement(10) at 1", "Insert TextElement: you may not use this file except in compliance with the License.(2) into TagElement(10) at 2", "Insert TextElement: You may obtain a copy of the License at(3) into TagElement(10) at 3", "Insert TextElement: http://www.apache.org/licenses/LICENSE-2.0(4) into TagElement(10) at 4", "Insert TextElement: Unless required by applicable law or agreed to in writing, software(5) into TagElement(10) at 5", "Insert TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(6) into TagElement(10) at 6", "Insert TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(7) into TagElement(10) at 7", "Insert TextElement: See the License for the specific language governing permissions and(8) into TagElement(10) at 8", "Insert TextElement: limitations under the License.(9) into TagElement(10) at 9", "Insert TextElement: A wrapper class for ZNRecord. Used as a parent class for IdealState,(28) into TagElement(30) at 0", "Insert TextElement: CurrentState, etc.(29) into TagElement(30) at 1", "Insert SimpleName: ZNRecord(37) into SimpleType: ZNRecord(38) at 0", "Insert SimpleName: _record(39) into VariableDeclarationFragment(40) at 0", "Insert SimpleType: String(45) into SingleVariableDeclaration(47) at 0", "Insert SimpleName: id(46) into SingleVariableDeclaration(47) at 1", "Insert ExpressionStatement(54) into Block(55) at 0", "Insert SimpleType: ZNRecord(60) into SingleVariableDeclaration(62) at 0", "Insert SimpleName: record(61) into SingleVariableDeclaration(62) at 1", "Insert ExpressionStatement(69) into Block(70) at 0", "Insert SimpleName: String(74) into SimpleType: String(75) at 0", "Insert ReturnStatement(80) into Block(81) at 0", "Insert SimpleName: ZNRecord(85) into SimpleType: ZNRecord(86) at 0", "Insert ReturnStatement(89) into Block(90) at 0", "Insert ParameterizedType: List<ZNRecordDelta>(100) into SingleVariableDeclaration(102) at 0", "Insert SimpleName: deltaList(101) into SingleVariableDeclaration(102) at 1", "Insert ExpressionStatement(107) into Block(108) at 0", "Insert SimpleName: Override(110) into MarkerAnnotation(111) at 0", "Insert SimpleName: String(113) into SimpleType: String(114) at 0", "Insert ReturnStatement(119) into Block(120) at 0", "Insert TagElement(124) into Javadoc(130) at 0", "Insert TagElement: @param(126) into Javadoc(130) at 1", "Insert TagElement: @param(128) into Javadoc(130) at 2", "Insert TagElement: @return(129) into Javadoc(130) at 3", "Insert SimpleName: T(133) into TypeParameter(136) at 0", "Insert SimpleType: HelixProperty(135) into TypeParameter(136) at 1", "Insert SimpleName: T(137) into SimpleType: T(138) at 0", "Insert ParameterizedType: Class<T>(144) into SingleVariableDeclaration(146) at 0", "Insert SimpleName: clazz(145) into SingleVariableDeclaration(146) at 1", "Insert SimpleType: ZNRecord(148) into SingleVariableDeclaration(150) at 0", "Insert SimpleName: record(149) into SingleVariableDeclaration(150) at 1", "Insert IfStatement(157) into Block(197) at 0", "Insert TryStatement(194) into Block(197) at 1", "Insert ReturnStatement(196) into Block(197) at 2", "Insert SimpleName: T(201) into TypeParameter(204) at 0", "Insert SimpleType: HelixProperty(203) into TypeParameter(204) at 1", "Insert SimpleType: List(206) into ParameterizedType: List<T>(209) at 0", "Insert SimpleType: T(208) into ParameterizedType: List<T>(209) at 1", "Insert ParameterizedType: Class<T>(215) into SingleVariableDeclaration(217) at 0", "Insert SimpleName: clazz(216) into SingleVariableDeclaration(217) at 1", "Insert ParameterizedType: Collection<ZNRecord>(222) into SingleVariableDeclaration(224) at 0", "Insert SimpleName: records(223) into SingleVariableDeclaration(224) at 1", "Insert IfStatement(231) into Block(275) at 0", "Insert VariableDeclarationStatement(245) into Block(275) at 1", "Insert EnhancedForStatement(272) into Block(275) at 2", "Insert ReturnStatement(274) into Block(275) at 3", "Insert SimpleName: T(279) into TypeParameter(282) at 0", "Insert SimpleType: HelixProperty(281) into TypeParameter(282) at 1", "Insert SimpleType: Map(284) into ParameterizedType: Map<String,T>(289) at 0", "Insert SimpleType: String(286) into ParameterizedType: Map<String,T>(289) at 1", "Insert SimpleType: T(288) into ParameterizedType: Map<String,T>(289) at 2", "Insert ParameterizedType: List<T>(295) into SingleVariableDeclaration(297) at 0", "Insert SimpleName: records(296) into SingleVariableDeclaration(297) at 1", "Insert IfStatement(306) into Block(342) at 0", "Insert VariableDeclarationStatement(324) into Block(342) at 1", "Insert EnhancedForStatement(339) into Block(342) at 2", "Insert ReturnStatement(341) into Block(342) at 3", "Insert SimpleName: Override(349) into MarkerAnnotation(350) at 0", "Insert SimpleType: Object(355) into SingleVariableDeclaration(357) at 0", "Insert SimpleName: obj(356) into SingleVariableDeclaration(357) at 1", "Insert IfStatement(364) into Block(398) at 0", "Insert IfStatement(395) into Block(398) at 1", "Insert ReturnStatement(397) into Block(398) at 2", "Insert SimpleName: String(44) into SimpleType: String(45) at 0", "Insert Assignment: =(53) into ExpressionStatement(54) at 0", "Insert SimpleName: ZNRecord(59) into SimpleType: ZNRecord(60) at 0", "Insert Assignment: =(68) into ExpressionStatement(69) at 0", "Insert MethodInvocation(79) into ReturnStatement(80) at 0", "Insert SimpleName: _record(88) into ReturnStatement(89) at 0", "Insert SimpleType: List(97) into ParameterizedType: List<ZNRecordDelta>(100) at 0", "Insert SimpleType: ZNRecordDelta(99) into ParameterizedType: List<ZNRecordDelta>(100) at 1", "Insert MethodInvocation(106) into ExpressionStatement(107) at 0", "Insert MethodInvocation(118) into ReturnStatement(119) at 0", "Insert TextElement: static method that convert ZNRecord to an instance that subclasses(122) into TagElement(124) at 0", "Insert TextElement: HelixProperty(123) into TagElement(124) at 1", "Insert SimpleName: clazz(125) into TagElement: @param(126) at 0", "Insert SimpleName: record(127) into TagElement: @param(128) at 0", "Insert SimpleName: HelixProperty(134) into SimpleType: HelixProperty(135) at 0", "Insert SimpleType: Class(141) into ParameterizedType: Class<T>(144) at 0", "Insert SimpleType: T(143) into ParameterizedType: Class<T>(144) at 1", "Insert SimpleName: ZNRecord(147) into SimpleType: ZNRecord(148) at 0", "Insert InfixExpression: ==(153) into IfStatement(157) at 0", "Move Block(10) into IfStatement(157) at 1", "Insert Block(183) into TryStatement(194) at 0", "Insert CatchClause(193) into TryStatement(194) at 1", "Insert NullLiteral(195) into ReturnStatement(196) at 0", "Insert SimpleName: HelixProperty(202) into SimpleType: HelixProperty(203) at 0", "Insert SimpleName: List(205) into SimpleType: List(206) at 0", "Insert SimpleName: T(207) into SimpleType: T(208) at 0", "Insert SimpleType: Class(212) into ParameterizedType: Class<T>(215) at 0", "Insert SimpleType: T(214) into ParameterizedType: Class<T>(215) at 1", "Insert SimpleType: Collection(219) into ParameterizedType: Collection<ZNRecord>(222) at 0", "Move SimpleType: ZNRecord(6) into ParameterizedType: Collection<ZNRecord>(222) at 1", "Insert InfixExpression: ==(227) into IfStatement(231) at 0", "Insert Block(230) into IfStatement(231) at 1", "Insert ParameterizedType: List<T>(236) into VariableDeclarationStatement(245) at 0", "Insert VariableDeclarationFragment(244) into VariableDeclarationStatement(245) at 1", "Insert SingleVariableDeclaration(249) into EnhancedForStatement(272) at 0", "Insert SimpleName: records(250) into EnhancedForStatement(272) at 1", "Insert Block(271) into EnhancedForStatement(272) at 2", "Insert SimpleName: decorators(273) into ReturnStatement(274) at 0", "Insert SimpleName: HelixProperty(280) into SimpleType: HelixProperty(281) at 0", "Insert SimpleName: Map(283) into SimpleType: Map(284) at 0", "Insert SimpleName: String(285) into SimpleType: String(286) at 0", "Insert SimpleName: T(287) into SimpleType: T(288) at 0", "Insert SimpleType: List(292) into ParameterizedType: List<T>(295) at 0", "Insert SimpleType: T(294) into ParameterizedType: List<T>(295) at 1", "Insert InfixExpression: ==(300) into IfStatement(306) at 0", "Insert Block(305) into IfStatement(306) at 1", "Insert ParameterizedType: Map<String,T>(313) into VariableDeclarationStatement(324) at 0", "Insert VariableDeclarationFragment(323) into VariableDeclarationStatement(324) at 1", "Insert SingleVariableDeclaration(328) into EnhancedForStatement(339) at 0", "Insert SimpleName: records(329) into EnhancedForStatement(339) at 1", "Insert Block(338) into EnhancedForStatement(339) at 2", "Insert SimpleName: decorators(340) into ReturnStatement(341) at 0", "Insert SimpleName: Object(354) into SimpleType: Object(355) at 0", "Insert InfixExpression: ==(360) into IfStatement(364) at 0", "Insert Block(363) into IfStatement(364) at 1", "Insert InstanceofExpression(368) into IfStatement(395) at 0", "Insert Block(394) into IfStatement(395) at 1", "Insert BooleanLiteral: false(396) into ReturnStatement(397) at 0", "Insert SimpleName: _record(48) into Assignment: =(53) at 0", "Insert ClassInstanceCreation(52) into Assignment: =(53) at 1", "Insert SimpleName: _record(63) into Assignment: =(68) at 0", "Insert ClassInstanceCreation(67) into Assignment: =(68) at 1", "Insert SimpleName: _record(77) into MethodInvocation(79) at 0", "Insert SimpleName: getId(78) into MethodInvocation(79) at 1", "Insert SimpleName: List(96) into SimpleType: List(97) at 0", "Insert SimpleName: ZNRecordDelta(98) into SimpleType: ZNRecordDelta(99) at 0", "Insert SimpleName: _record(103) into MethodInvocation(106) at 0", "Insert SimpleName: setDeltaList(104) into MethodInvocation(106) at 1", "Insert SimpleName: deltaList(105) into MethodInvocation(106) at 2", "Insert SimpleName: _record(116) into MethodInvocation(118) at 0", "Insert SimpleName: toString(117) into MethodInvocation(118) at 1", "Insert SimpleName: Class(140) into SimpleType: Class(141) at 0", "Insert SimpleName: T(142) into SimpleType: T(143) at 0", "Insert SimpleName: record(151) into InfixExpression: ==(153) at 0", "Insert NullLiteral(152) into InfixExpression: ==(153) at 1", "Insert VariableDeclarationStatement(177) into Block(183) at 0", "Insert ReturnStatement(182) into Block(183) at 1", "Insert SingleVariableDeclaration(187) into CatchClause(193) at 0", "Insert Block(192) into CatchClause(193) at 1", "Insert SimpleName: Class(211) into SimpleType: Class(212) at 0", "Insert SimpleName: T(213) into SimpleType: T(214) at 0", "Insert SimpleName: Collection(218) into SimpleType: Collection(219) at 0", "Insert SimpleName: records(225) into InfixExpression: ==(227) at 0", "Insert NullLiteral(226) into InfixExpression: ==(227) at 1", "Insert ReturnStatement(229) into Block(230) at 0", "Insert SimpleType: List(233) into ParameterizedType: List<T>(236) at 0", "Insert SimpleType: T(235) into ParameterizedType: List<T>(236) at 1", "Insert SimpleName: decorators(237) into VariableDeclarationFragment(244) at 0", "Insert ClassInstanceCreation(243) into VariableDeclarationFragment(244) at 1", "Insert SimpleType: ZNRecord(247) into SingleVariableDeclaration(249) at 0", "Insert SimpleName: record(248) into SingleVariableDeclaration(249) at 1", "Insert VariableDeclarationStatement(260) into Block(271) at 0", "Insert IfStatement(270) into Block(271) at 1", "Insert SimpleName: List(291) into SimpleType: List(292) at 0", "Insert SimpleName: T(293) into SimpleType: T(294) at 0", "Insert SimpleName: records(298) into InfixExpression: ==(300) at 0", "Insert NullLiteral(299) into InfixExpression: ==(300) at 1", "Insert ReturnStatement(304) into Block(305) at 0", "Insert SimpleType: Map(308) into ParameterizedType: Map<String,T>(313) at 0", "Insert SimpleType: String(310) into ParameterizedType: Map<String,T>(313) at 1", "Insert SimpleType: T(312) into ParameterizedType: Map<String,T>(313) at 2", "Insert SimpleName: decorators(314) into VariableDeclarationFragment(323) at 0", "Insert ClassInstanceCreation(322) into VariableDeclarationFragment(323) at 1", "Insert SimpleType: T(326) into SingleVariableDeclaration(328) at 0", "Insert SimpleName: record(327) into SingleVariableDeclaration(328) at 1", "Insert ExpressionStatement(337) into Block(338) at 0", "Insert SimpleName: obj(358) into InfixExpression: ==(360) at 0", "Insert NullLiteral(359) into InfixExpression: ==(360) at 1", "Insert ReturnStatement(362) into Block(363) at 0", "Insert SimpleName: obj(365) into InstanceofExpression(368) at 0", "Insert SimpleType: HelixProperty(367) into InstanceofExpression(368) at 1", "Insert VariableDeclarationStatement(377) into Block(394) at 0", "Insert IfStatement(393) into Block(394) at 1", "Insert SimpleType: ZNRecord(50) into ClassInstanceCreation(52) at 0", "Insert SimpleName: id(51) into ClassInstanceCreation(52) at 1", "Insert SimpleType: ZNRecord(65) into ClassInstanceCreation(67) at 0", "Insert SimpleName: record(66) into ClassInstanceCreation(67) at 1", "Insert ParameterizedType: Constructor<T>(162) into VariableDeclarationStatement(177) at 0", "Insert VariableDeclarationFragment(176) into VariableDeclarationStatement(177) at 1", "Insert MethodInvocation(181) into ReturnStatement(182) at 0", "Insert SimpleType: Exception(185) into SingleVariableDeclaration(187) at 0", "Insert SimpleName: e(186) into SingleVariableDeclaration(187) at 1", "Insert ExpressionStatement(191) into Block(192) at 0", "Insert NullLiteral(228) into ReturnStatement(229) at 0", "Insert SimpleName: List(232) into SimpleType: List(233) at 0", "Insert SimpleName: T(234) into SimpleType: T(235) at 0", "Insert ParameterizedType: ArrayList<T>(242) into ClassInstanceCreation(243) at 0", "Insert SimpleName: ZNRecord(246) into SimpleType: ZNRecord(247) at 0", "Insert SimpleType: T(252) into VariableDeclarationStatement(260) at 0", "Insert VariableDeclarationFragment(259) into VariableDeclarationStatement(260) at 1", "Insert InfixExpression: !=(263) into IfStatement(270) at 0", "Insert Block(269) into IfStatement(270) at 1", "Insert MethodInvocation(303) into ReturnStatement(304) at 0", "Insert SimpleName: Map(307) into SimpleType: Map(308) at 0", "Insert SimpleName: String(309) into SimpleType: String(310) at 0", "Insert SimpleName: T(311) into SimpleType: T(312) at 0", "Insert ParameterizedType: HashMap<String,T>(321) into ClassInstanceCreation(322) at 0", "Insert SimpleName: T(325) into SimpleType: T(326) at 0", "Insert MethodInvocation(336) into ExpressionStatement(337) at 0", "Insert BooleanLiteral: false(361) into ReturnStatement(362) at 0", "Insert SimpleName: HelixProperty(366) into SimpleType: HelixProperty(367) at 0", "Insert SimpleType: HelixProperty(370) into VariableDeclarationStatement(377) at 0", "Insert VariableDeclarationFragment(376) into VariableDeclarationStatement(377) at 1", "Insert InfixExpression: !=(382) into IfStatement(393) at 0", "Insert Block(392) into IfStatement(393) at 1", "Insert SimpleName: ZNRecord(49) into SimpleType: ZNRecord(50) at 0", "Insert SimpleName: ZNRecord(64) into SimpleType: ZNRecord(65) at 0", "Insert SimpleType: Constructor(159) into ParameterizedType: Constructor<T>(162) at 0", "Insert SimpleType: T(161) into ParameterizedType: Constructor<T>(162) at 1", "Insert SimpleName: constructor(163) into VariableDeclarationFragment(176) at 0", "Insert MethodInvocation(175) into VariableDeclarationFragment(176) at 1", "Insert SimpleName: constructor(178) into MethodInvocation(181) at 0", "Insert SimpleName: newInstance(179) into MethodInvocation(181) at 1", "Insert SimpleName: record(180) into MethodInvocation(181) at 2", "Insert SimpleName: Exception(184) into SimpleType: Exception(185) at 0", "Insert MethodInvocation(190) into ExpressionStatement(191) at 0", "Insert SimpleType: ArrayList(239) into ParameterizedType: ArrayList<T>(242) at 0", "Insert SimpleType: T(241) into ParameterizedType: ArrayList<T>(242) at 1", "Insert SimpleName: T(251) into SimpleType: T(252) at 0", "Insert SimpleName: decorator(253) into VariableDeclarationFragment(259) at 0", "Insert MethodInvocation(258) into VariableDeclarationFragment(259) at 1", "Insert SimpleName: decorator(261) into InfixExpression: !=(263) at 0", "Insert NullLiteral(262) into InfixExpression: !=(263) at 1", "Insert ExpressionStatement(268) into Block(269) at 0", "Insert SimpleName: Collections(301) into MethodInvocation(303) at 0", "Insert SimpleName: emptyMap(302) into MethodInvocation(303) at 1", "Insert SimpleType: HashMap(316) into ParameterizedType: HashMap<String,T>(321) at 0", "Insert SimpleType: String(318) into ParameterizedType: HashMap<String,T>(321) at 1", "Insert SimpleType: T(320) into ParameterizedType: HashMap<String,T>(321) at 2", "Insert SimpleName: decorators(330) into MethodInvocation(336) at 0", "Insert SimpleName: put(331) into MethodInvocation(336) at 1", "Insert MethodInvocation(334) into MethodInvocation(336) at 2", "Insert SimpleName: record(335) into MethodInvocation(336) at 3", "Insert SimpleName: HelixProperty(369) into SimpleType: HelixProperty(370) at 0", "Insert SimpleName: that(371) into VariableDeclarationFragment(376) at 0", "Insert CastExpression(375) into VariableDeclarationFragment(376) at 1", "Insert MethodInvocation(380) into InfixExpression: !=(382) at 0", "Insert NullLiteral(381) into InfixExpression: !=(382) at 1", "Insert ReturnStatement(391) into Block(392) at 0", "Insert SimpleName: Constructor(158) into SimpleType: Constructor(159) at 0", "Insert SimpleName: T(160) into SimpleType: T(161) at 0", "Insert SimpleName: clazz(164) into MethodInvocation(175) at 0", "Insert SimpleName: getConstructor(165) into MethodInvocation(175) at 1", "Insert ArrayCreation(174) into MethodInvocation(175) at 2", "Insert SimpleName: e(188) into MethodInvocation(190) at 0", "Insert SimpleName: printStackTrace(189) into MethodInvocation(190) at 1", "Insert SimpleName: ArrayList(238) into SimpleType: ArrayList(239) at 0", "Insert SimpleName: T(240) into SimpleType: T(241) at 0", "Insert SimpleName: HelixProperty(254) into MethodInvocation(258) at 0", "Insert SimpleName: convertToTypedInstance(255) into MethodInvocation(258) at 1", "Insert SimpleName: clazz(256) into MethodInvocation(258) at 2", "Insert SimpleName: record(257) into MethodInvocation(258) at 3", "Insert MethodInvocation(267) into ExpressionStatement(268) at 0", "Insert SimpleName: HashMap(315) into SimpleType: HashMap(316) at 0", "Insert SimpleName: String(317) into SimpleType: String(318) at 0", "Insert SimpleName: T(319) into SimpleType: T(320) at 0", "Insert SimpleName: record(332) into MethodInvocation(334) at 0", "Insert SimpleName: getId(333) into MethodInvocation(334) at 1", "Insert SimpleType: HelixProperty(373) into CastExpression(375) at 0", "Insert SimpleName: obj(374) into CastExpression(375) at 1", "Insert SimpleName: that(378) into MethodInvocation(380) at 0", "Insert SimpleName: getRecord(379) into MethodInvocation(380) at 1", "Insert MethodInvocation(390) into ReturnStatement(391) at 0", "Insert ArrayType: Class[](169) into ArrayCreation(174) at 0", "Insert ArrayInitializer(173) into ArrayCreation(174) at 1", "Insert SimpleName: decorators(264) into MethodInvocation(267) at 0", "Insert SimpleName: add(265) into MethodInvocation(267) at 1", "Insert SimpleName: decorator(266) into MethodInvocation(267) at 2", "Insert SimpleName: HelixProperty(372) into SimpleType: HelixProperty(373) at 0", "Insert MethodInvocation(385) into MethodInvocation(390) at 0", "Insert SimpleName: equals(386) into MethodInvocation(390) at 1", "Insert MethodInvocation(389) into MethodInvocation(390) at 2", "Insert SimpleType: Class(167) into ArrayType: Class[](169) at 0", "Insert Dimension(168) into ArrayType: Class[](169) at 1", "Insert TypeLiteral(172) into ArrayInitializer(173) at 0", "Insert SimpleName: that(383) into MethodInvocation(385) at 0", "Insert SimpleName: getRecord(384) into MethodInvocation(385) at 1", "Insert ThisExpression(387) into MethodInvocation(389) at 0", "Insert SimpleName: getRecord(388) into MethodInvocation(389) at 1", "Insert SimpleName: Class(166) into SimpleType: Class(167) at 0", "Insert SimpleType: ZNRecord(171) into TypeLiteral(172) at 0", "Insert SimpleName: ZNRecord(170) into SimpleType: ZNRecord(171) at 0"]}}, {"PropertyPathConfig_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: com.linkedin.helix.PropertyType.ALERTS to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: com.linkedin.helix.PropertyType.ALERT_STATUS to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: com.linkedin.helix.PropertyType.CONFIGS to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: com.linkedin.helix.PropertyType.CURRENTSTATES to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS QualifiedName: com.linkedin.helix.PropertyType.EXTERNALVIEW to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS ImportDeclaration to CompilationUnit at 6", "INS QualifiedName: com.linkedin.helix.PropertyType.HEALTHREPORT to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS ImportDeclaration to CompilationUnit at 7", "INS QualifiedName: com.linkedin.helix.PropertyType.HISTORY to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS QualifiedName: com.linkedin.helix.PropertyType.IDEALSTATES to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 8"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS QualifiedName: com.linkedin.helix.PropertyType.LIVEINSTANCES to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 9"]}, {"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS ImportDeclaration to CompilationUnit at 10", "INS QualifiedName: com.linkedin.helix.PropertyType.MESSAGES to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS QualifiedName: com.linkedin.helix.PropertyType.STATEMODELDEFS to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 12"]}, {"root": "INS ImportDeclaration to CompilationUnit at 13", "operations": ["INS ImportDeclaration to CompilationUnit at 13", "INS QualifiedName: com.linkedin.helix.PropertyType.STATUSUPDATES to ImportDeclaration at 0"]}, {"root": "UPDATE from com.linkedin.helix.PropertyType to com.linkedin.helix.PropertyType.PAUSE", "operations": ["UPD QualifiedName: com.linkedin.helix.PropertyType from com.linkedin.helix.PropertyType to com.linkedin.helix.PropertyType.PAUSE"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: typeToClassMapping to MethodInvocation at 0", "INS SimpleName: LIVEINSTANCES to MethodInvocation at 2", "INS TypeLiteral to MethodInvocation at 3", "INS SimpleType: LiveInstance to TypeLiteral at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: LiveInstance to SimpleType: LiveInstance at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: put to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: put to MethodInvocation at 1", "INS SimpleName: typeToClassMapping to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 3", "INS ExpressionStatement to Block at 1", "INS SimpleName: IDEALSTATES to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: IdealState to TypeLiteral at 0", "INS SimpleName: IdealState to SimpleType: IdealState at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleType: InstanceConfig to TypeLiteral at 0", "INS SimpleName: typeToClassMapping to MethodInvocation at 0", "INS SimpleName: CONFIGS to MethodInvocation at 2", "INS SimpleName: InstanceConfig to SimpleType: InstanceConfig at 0", "INS SimpleName: put to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS TypeLiteral to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS SimpleName: put to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 3", "INS SimpleType: ExternalView to TypeLiteral at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: typeToClassMapping to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: EXTERNALVIEW to MethodInvocation at 2", "INS SimpleName: ExternalView to SimpleType: ExternalView at 0"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS SimpleType: StateModelDefinition to TypeLiteral at 0", "INS SimpleName: StateModelDefinition to SimpleType: StateModelDefinition at 0", "INS ExpressionStatement to Block at 4", "INS SimpleName: typeToClassMapping to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleName: STATEMODELDEFS to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS TypeLiteral to MethodInvocation at 3", "INS SimpleName: MESSAGES to MethodInvocation at 2", "INS SimpleType: Message to TypeLiteral at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: typeToClassMapping to MethodInvocation at 0", "INS SimpleName: put to MethodInvocation at 1", "INS ExpressionStatement to Block at 5", "INS SimpleName: Message to SimpleType: Message at 0"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: typeToClassMapping to MethodInvocation at 0", "INS SimpleName: CurrentState to SimpleType: CurrentState at 0", "INS TypeLiteral to MethodInvocation at 3", "INS SimpleName: CURRENTSTATES to MethodInvocation at 2", "INS SimpleType: CurrentState to TypeLiteral at 0", "INS ExpressionStatement to Block at 6", "INS SimpleName: put to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 7", "operations": ["INS SimpleName: put to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: STATUSUPDATES to MethodInvocation at 2", "INS ExpressionStatement to Block at 7", "INS TypeLiteral to MethodInvocation at 3", "INS SimpleName: typeToClassMapping to MethodInvocation at 0", "INS SimpleName: StatusUpdate to SimpleType: StatusUpdate at 0", "INS SimpleType: StatusUpdate to TypeLiteral at 0"]}, {"root": "INS ExpressionStatement to Block at 8", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleName: LeaderHistory to SimpleType: LeaderHistory at 0", "INS ExpressionStatement to Block at 8", "INS SimpleType: LeaderHistory to TypeLiteral at 0", "INS SimpleName: typeToClassMapping to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 3", "INS SimpleName: HISTORY to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 9", "operations": ["INS ExpressionStatement to Block at 9", "INS SimpleName: typeToClassMapping to MethodInvocation at 0", "INS SimpleType: HealthStat to TypeLiteral at 0", "INS SimpleName: put to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: HEALTHREPORT to MethodInvocation at 2", "INS SimpleName: HealthStat to SimpleType: HealthStat at 0"]}, {"root": "INS ExpressionStatement to Block at 10", "operations": ["INS SimpleName: Alerts to SimpleType: Alerts at 0", "INS SimpleName: put to MethodInvocation at 1", "INS ExpressionStatement to Block at 10", "INS SimpleName: typeToClassMapping to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 3", "INS SimpleName: ALERTS to MethodInvocation at 2", "INS SimpleType: Alerts to TypeLiteral at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 11", "operations": ["INS SimpleName: typeToClassMapping to MethodInvocation at 0", "INS SimpleName: put to MethodInvocation at 1", "INS ExpressionStatement to Block at 11", "INS MethodInvocation to ExpressionStatement at 0", "INS TypeLiteral to MethodInvocation at 3", "INS SimpleName: ALERT_STATUS to MethodInvocation at 2", "INS SimpleName: AlertStatus to SimpleType: AlertStatus at 0", "INS SimpleType: AlertStatus to TypeLiteral at 0"]}, {"root": "INS ExpressionStatement to Block at 12", "operations": ["INS SimpleName: PAUSE to MethodInvocation at 2", "INS SimpleName: PauseSignal to SimpleType: PauseSignal at 0", "INS SimpleType: PauseSignal to TypeLiteral at 0", "INS SimpleName: typeToClassMapping to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 3", "INS ExpressionStatement to Block at 12", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: put to MethodInvocation at 1"]}]}}, {"PropertyPathConfig_diff": {"operations": ["Move ImportDeclaration(25) into CompilationUnit(781) at 1", "Insert ImportDeclaration(15) into CompilationUnit(781) at 1", "Insert ImportDeclaration(17) into CompilationUnit(781) at 2", "Insert ImportDeclaration(19) into CompilationUnit(781) at 3", "Insert ImportDeclaration(21) into CompilationUnit(781) at 4", "Insert ImportDeclaration(23) into CompilationUnit(781) at 5", "Insert ImportDeclaration(25) into CompilationUnit(781) at 6", "Insert ImportDeclaration(27) into CompilationUnit(781) at 7", "Insert ImportDeclaration(29) into CompilationUnit(781) at 8", "Insert ImportDeclaration(31) into CompilationUnit(781) at 9", "Insert ImportDeclaration(33) into CompilationUnit(781) at 10", "Insert ImportDeclaration(37) into CompilationUnit(781) at 12", "Insert ImportDeclaration(39) into CompilationUnit(781) at 13", "Insert QualifiedName: com.linkedin.helix.PropertyType.ALERTS(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: com.linkedin.helix.PropertyType.ALERT_STATUS(16) into ImportDeclaration(17) at 0", "Insert QualifiedName: com.linkedin.helix.PropertyType.CONFIGS(18) into ImportDeclaration(19) at 0", "Insert QualifiedName: com.linkedin.helix.PropertyType.CURRENTSTATES(20) into ImportDeclaration(21) at 0", "Insert QualifiedName: com.linkedin.helix.PropertyType.EXTERNALVIEW(22) into ImportDeclaration(23) at 0", "Insert QualifiedName: com.linkedin.helix.PropertyType.HEALTHREPORT(24) into ImportDeclaration(25) at 0", "Insert QualifiedName: com.linkedin.helix.PropertyType.HISTORY(26) into ImportDeclaration(27) at 0", "Insert QualifiedName: com.linkedin.helix.PropertyType.IDEALSTATES(28) into ImportDeclaration(29) at 0", "Insert QualifiedName: com.linkedin.helix.PropertyType.LIVEINSTANCES(30) into ImportDeclaration(31) at 0", "Insert QualifiedName: com.linkedin.helix.PropertyType.MESSAGES(32) into ImportDeclaration(33) at 0", "Update QualifiedName: com.linkedin.helix.PropertyType(24) to com.linkedin.helix.PropertyType.PAUSE", "Insert QualifiedName: com.linkedin.helix.PropertyType.STATEMODELDEFS(36) into ImportDeclaration(37) at 0", "Insert QualifiedName: com.linkedin.helix.PropertyType.STATUSUPDATES(38) into ImportDeclaration(39) at 0", "Insert ExpressionStatement(157) into Block(254) at 0", "Insert ExpressionStatement(165) into Block(254) at 1", "Insert ExpressionStatement(173) into Block(254) at 2", "Insert ExpressionStatement(181) into Block(254) at 3", "Insert ExpressionStatement(189) into Block(254) at 4", "Insert ExpressionStatement(197) into Block(254) at 5", "Insert ExpressionStatement(205) into Block(254) at 6", "Insert ExpressionStatement(213) into Block(254) at 7", "Insert ExpressionStatement(221) into Block(254) at 8", "Insert ExpressionStatement(229) into Block(254) at 9", "Insert ExpressionStatement(237) into Block(254) at 10", "Insert ExpressionStatement(245) into Block(254) at 11", "Insert ExpressionStatement(253) into Block(254) at 12", "Insert MethodInvocation(156) into ExpressionStatement(157) at 0", "Insert MethodInvocation(164) into ExpressionStatement(165) at 0", "Insert MethodInvocation(172) into ExpressionStatement(173) at 0", "Insert MethodInvocation(180) into ExpressionStatement(181) at 0", "Insert MethodInvocation(188) into ExpressionStatement(189) at 0", "Insert MethodInvocation(196) into ExpressionStatement(197) at 0", "Insert MethodInvocation(204) into ExpressionStatement(205) at 0", "Insert MethodInvocation(212) into ExpressionStatement(213) at 0", "Insert MethodInvocation(220) into ExpressionStatement(221) at 0", "Insert MethodInvocation(228) into ExpressionStatement(229) at 0", "Insert MethodInvocation(236) into ExpressionStatement(237) at 0", "Insert MethodInvocation(244) into ExpressionStatement(245) at 0", "Insert MethodInvocation(252) into ExpressionStatement(253) at 0", "Insert SimpleName: typeToClassMapping(150) into MethodInvocation(156) at 0", "Insert SimpleName: put(151) into MethodInvocation(156) at 1", "Insert SimpleName: LIVEINSTANCES(152) into MethodInvocation(156) at 2", "Insert TypeLiteral(155) into MethodInvocation(156) at 3", "Insert SimpleName: typeToClassMapping(158) into MethodInvocation(164) at 0", "Insert SimpleName: put(159) into MethodInvocation(164) at 1", "Insert SimpleName: IDEALSTATES(160) into MethodInvocation(164) at 2", "Insert TypeLiteral(163) into MethodInvocation(164) at 3", "Insert SimpleName: typeToClassMapping(166) into MethodInvocation(172) at 0", "Insert SimpleName: put(167) into MethodInvocation(172) at 1", "Insert SimpleName: CONFIGS(168) into MethodInvocation(172) at 2", "Insert TypeLiteral(171) into MethodInvocation(172) at 3", "Insert SimpleName: typeToClassMapping(174) into MethodInvocation(180) at 0", "Insert SimpleName: put(175) into MethodInvocation(180) at 1", "Insert SimpleName: EXTERNALVIEW(176) into MethodInvocation(180) at 2", "Insert TypeLiteral(179) into MethodInvocation(180) at 3", "Insert SimpleName: typeToClassMapping(182) into MethodInvocation(188) at 0", "Insert SimpleName: put(183) into MethodInvocation(188) at 1", "Insert SimpleName: STATEMODELDEFS(184) into MethodInvocation(188) at 2", "Insert TypeLiteral(187) into MethodInvocation(188) at 3", "Insert SimpleName: typeToClassMapping(190) into MethodInvocation(196) at 0", "Insert SimpleName: put(191) into MethodInvocation(196) at 1", "Insert SimpleName: MESSAGES(192) into MethodInvocation(196) at 2", "Insert TypeLiteral(195) into MethodInvocation(196) at 3", "Insert SimpleName: typeToClassMapping(198) into MethodInvocation(204) at 0", "Insert SimpleName: put(199) into MethodInvocation(204) at 1", "Insert SimpleName: CURRENTSTATES(200) into MethodInvocation(204) at 2", "Insert TypeLiteral(203) into MethodInvocation(204) at 3", "Insert SimpleName: typeToClassMapping(206) into MethodInvocation(212) at 0", "Insert SimpleName: put(207) into MethodInvocation(212) at 1", "Insert SimpleName: STATUSUPDATES(208) into MethodInvocation(212) at 2", "Insert TypeLiteral(211) into MethodInvocation(212) at 3", "Insert SimpleName: typeToClassMapping(214) into MethodInvocation(220) at 0", "Insert SimpleName: put(215) into MethodInvocation(220) at 1", "Insert SimpleName: HISTORY(216) into MethodInvocation(220) at 2", "Insert TypeLiteral(219) into MethodInvocation(220) at 3", "Insert SimpleName: typeToClassMapping(222) into MethodInvocation(228) at 0", "Insert SimpleName: put(223) into MethodInvocation(228) at 1", "Insert SimpleName: HEALTHREPORT(224) into MethodInvocation(228) at 2", "Insert TypeLiteral(227) into MethodInvocation(228) at 3", "Insert SimpleName: typeToClassMapping(230) into MethodInvocation(236) at 0", "Insert SimpleName: put(231) into MethodInvocation(236) at 1", "Insert SimpleName: ALERTS(232) into MethodInvocation(236) at 2", "Insert TypeLiteral(235) into MethodInvocation(236) at 3", "Insert SimpleName: typeToClassMapping(238) into MethodInvocation(244) at 0", "Insert SimpleName: put(239) into MethodInvocation(244) at 1", "Insert SimpleName: ALERT_STATUS(240) into MethodInvocation(244) at 2", "Insert TypeLiteral(243) into MethodInvocation(244) at 3", "Insert SimpleName: typeToClassMapping(246) into MethodInvocation(252) at 0", "Insert SimpleName: put(247) into MethodInvocation(252) at 1", "Insert SimpleName: PAUSE(248) into MethodInvocation(252) at 2", "Insert TypeLiteral(251) into MethodInvocation(252) at 3", "Insert SimpleType: LiveInstance(154) into TypeLiteral(155) at 0", "Insert SimpleType: IdealState(162) into TypeLiteral(163) at 0", "Insert SimpleType: InstanceConfig(170) into TypeLiteral(171) at 0", "Insert SimpleType: ExternalView(178) into TypeLiteral(179) at 0", "Insert SimpleType: StateModelDefinition(186) into TypeLiteral(187) at 0", "Insert SimpleType: Message(194) into TypeLiteral(195) at 0", "Insert SimpleType: CurrentState(202) into TypeLiteral(203) at 0", "Insert SimpleType: StatusUpdate(210) into TypeLiteral(211) at 0", "Insert SimpleType: LeaderHistory(218) into TypeLiteral(219) at 0", "Insert SimpleType: HealthStat(226) into TypeLiteral(227) at 0", "Insert SimpleType: Alerts(234) into TypeLiteral(235) at 0", "Insert SimpleType: AlertStatus(242) into TypeLiteral(243) at 0", "Insert SimpleType: PauseSignal(250) into TypeLiteral(251) at 0", "Insert SimpleName: LiveInstance(153) into SimpleType: LiveInstance(154) at 0", "Insert SimpleName: IdealState(161) into SimpleType: IdealState(162) at 0", "Insert SimpleName: InstanceConfig(169) into SimpleType: InstanceConfig(170) at 0", "Insert SimpleName: ExternalView(177) into SimpleType: ExternalView(178) at 0", "Insert SimpleName: StateModelDefinition(185) into SimpleType: StateModelDefinition(186) at 0", "Insert SimpleName: Message(193) into SimpleType: Message(194) at 0", "Insert SimpleName: CurrentState(201) into SimpleType: CurrentState(202) at 0", "Insert SimpleName: StatusUpdate(209) into SimpleType: StatusUpdate(210) at 0", "Insert SimpleName: LeaderHistory(217) into SimpleType: LeaderHistory(218) at 0", "Insert SimpleName: HealthStat(225) into SimpleType: HealthStat(226) at 0", "Insert SimpleName: Alerts(233) into SimpleType: Alerts(234) at 0", "Insert SimpleName: AlertStatus(241) into SimpleType: AlertStatus(242) at 0", "Insert SimpleName: PauseSignal(249) into SimpleType: PauseSignal(250) at 0"]}}, {"ZNRecordDecorator_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TagElement", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: You may obtain a copy of the License at", "DEL QualifiedName: com.linkedin.helix", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL PackageDeclaration", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: limitations under the License.", "DEL TextElement: Licensed under the Apache License, Version 2.0 (the \"License\");", "DEL TextElement: Copyright (C) 2012 LinkedIn Inc <opensource@linkedin.com>", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL Javadoc", "DEL TextElement: you may not use this file except in compliance with the License."]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Constructor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.ArrayList"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collection", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collections"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: clazz", "DEL NullLiteral", "DEL TagElement", "DEL SimpleName: List", "DEL NullLiteral", "DEL Block", "DEL SimpleType: List", "DEL SimpleName: decorators", "DEL SimpleName: Exception", "DEL ArrayType: Class[]", "DEL SimpleName: decorators", "DEL SimpleName: T", "DEL SimpleName: T", "DEL SimpleType: ZNRecordDecorator", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL SimpleName: record", "DEL SimpleName: record", "DEL SimpleName: _record", "DEL ClassInstanceCreation", "DEL SimpleName: decorator", "DEL SimpleType: T", "DEL MethodDeclaration", "DEL SimpleName: Collection", "DEL VariableDeclarationStatement", "DEL SimpleType: ZNRecord", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: T", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL SimpleName: constructor", "DEL ParameterizedType: List<T>", "DEL NullLiteral", "DEL SimpleName: T", "DEL SimpleName: _record", "DEL ReturnStatement", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: T", "DEL Modifier: public", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL SimpleName: getRecord", "DEL SimpleType: String", "DEL SimpleType: ZNRecord", "DEL ExpressionStatement", "DEL ParameterizedType: Collection<ZNRecord>", "DEL SimpleName: obj", "DEL VariableDeclarationStatement", "DEL SimpleName: deltaList", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL Modifier: public", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleType: ZNRecordDecorator", "DEL Modifier: public", "DEL SimpleType: Class", "DEL Block", "DEL MethodInvocation", "DEL SimpleType: ArrayList", "DEL SimpleName: decorators", "DEL SimpleType: Exception", "DEL ReturnStatement", "DEL TypeParameter", "DEL InfixExpression: !=", "DEL SimpleType: ZNRecordDecorator", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL Block", "DEL SimpleName: ZNRecordDecorator", "DEL MethodDeclaration", "DEL SimpleType: T", "DEL SimpleName: getRecord", "DEL Block", "DEL InstanceofExpression", "DEL SimpleName: record", "DEL VariableDeclarationStatement", "DEL SimpleName: ZNRecord", "DEL MethodInvocation", "DEL SimpleName: record", "DEL SimpleName: decorator", "DEL SimpleName: String", "DEL ParameterizedType: ArrayList<T>", "DEL SimpleType: T", "DEL SimpleName: List", "DEL SingleVariableDeclaration", "DEL SimpleName: T", "DEL SimpleName: convertToTypedInstance", "DEL NullLiteral", "DEL SimpleName: that", "DEL SimpleName: equals", "DEL SimpleName: T", "DEL SimpleName: record", "DEL SimpleName: Class", "DEL CatchClause", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: Class", "DEL Modifier: public", "DEL SimpleType: T", "DEL Modifier: public", "DEL SimpleName: Collections", "DEL SimpleType: ZNRecordDecorator", "DEL SimpleName: getConstructor", "DEL BooleanLiteral: false", "DEL SimpleType: Class", "DEL SimpleName: obj", "DEL SimpleName: that", "DEL SimpleName: ZNRecord", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: ZNRecordDelta", "DEL SimpleType: String", "DEL SimpleName: convertListToMap", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL ReturnStatement", "DEL SimpleName: add", "DEL Modifier: final", "DEL Modifier: final", "DEL Block", "DEL SimpleName: deltaList", "DEL SimpleName: records", "DEL NullLiteral", "DEL Modifier: public", "DEL PrimitiveType: boolean", "DEL SimpleName: decorators", "DEL SimpleName: ZNRecordDecorator", "DEL SingleVariableDeclaration", "DEL SimpleName: clazz", "DEL PrimitiveType: void", "DEL SimpleName: ZNRecordDecorator", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleType: String", "DEL SimpleName: _record", "DEL Block", "DEL MarkerAnnotation", "DEL SimpleName: List", "DEL SimpleName: ZNRecord", "DEL SimpleName: ZNRecordDecorator", "DEL ReturnStatement", "DEL SimpleType: HashMap", "DEL SimpleName: ZNRecord", "DEL NullLiteral", "DEL SimpleName: ZNRecordDecorator", "DEL VariableDeclarationFragment", "DEL Block", "DEL TypeParameter", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL Block", "DEL TypeLiteral", "DEL IfStatement", "DEL MethodDeclaration", "DEL SimpleName: Map", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: ZNRecordDecorator", "DEL SingleVariableDeclaration", "DEL EnhancedForStatement", "DEL SimpleType: T", "DEL SimpleType: List", "DEL Block", "DEL SimpleName: convertToTypedInstance", "DEL Block", "DEL SimpleName: decorators", "DEL SimpleName: Constructor", "DEL MethodDeclaration", "DEL SimpleName: id", "DEL SimpleName: Map", "DEL Assignment: =", "DEL Block", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL SimpleName: setDeltaList", "DEL MarkerAnnotation", "DEL TagElement: @param", "DEL ArrayCreation", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL Block", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL MethodInvocation", "DEL Modifier: protected", "DEL SimpleName: record", "DEL Block", "DEL SimpleType: List", "DEL InfixExpression: !=", "DEL SimpleName: T", "DEL Modifier: final", "DEL Block", "DEL TagElement", "DEL MethodDeclaration", "DEL InfixExpression: ==", "DEL SimpleName: getId", "DEL SimpleName: T", "DEL MethodInvocation", "DEL Modifier: abstract", "DEL ReturnStatement", "DEL SimpleName: e", "DEL Modifier: public", "DEL ParameterizedType: List<T>", "DEL SimpleName: toString", "DEL SimpleName: ZNRecordDecorator", "DEL Block", "DEL Block", "DEL SimpleName: Class", "DEL SimpleName: that", "DEL TagElement: @param", "DEL TagElement: @return", "DEL SimpleName: ZNRecord", "DEL SimpleName: T", "DEL SimpleType: T", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: _record", "DEL SimpleName: records", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: constructor", "DEL Modifier: static", "DEL Block", "DEL SimpleType: Map", "DEL IfStatement", "DEL SimpleName: decorators", "DEL MethodInvocation", "DEL SimpleName: records", "DEL SimpleName: ZNRecordDecorator", "DEL SimpleName: obj", "DEL SimpleName: Override", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleType: T", "DEL SimpleType: T", "DEL SimpleType: T", "DEL SimpleType: ZNRecord", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleType: T", "DEL ReturnStatement", "DEL NullLiteral", "DEL SimpleName: T", "DEL SimpleType: T", "DEL SimpleName: clazz", "DEL SimpleName: getRecord", "DEL SimpleName: setDeltaList", "DEL SimpleType: Class", "DEL SimpleType: ZNRecord", "DEL SimpleName: e", "DEL NullLiteral", "DEL SimpleName: ArrayList", "DEL TypeDeclaration: class", "DEL SimpleName: ZNRecord", "DEL SimpleName: put", "DEL IfStatement", "DEL Block", "DEL SimpleName: T", "DEL ThisExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: _record", "DEL Modifier: abstract", "DEL Modifier: public", "DEL SimpleType: Map", "DEL SimpleType: ZNRecordDelta", "DEL SimpleName: T", "DEL SimpleName: record", "DEL SimpleName: toString", "DEL SimpleName: records", "DEL SimpleName: records", "DEL SimpleType: ZNRecord", "DEL TextElement: A wrapper class for ZNRecord. Used as a parent class for IdealState,", "DEL SimpleType: String", "DEL SimpleName: record", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL TextElement: CurrentState, etc.", "DEL SimpleName: obj", "DEL SimpleName: Override", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleType: ZNRecord", "DEL ParameterizedType: List<ZNRecordDelta>", "DEL TextElement: static method that convert ZNRecord to an instance that subclasses", "DEL SimpleName: ZNRecord", "DEL SimpleName: String", "DEL SimpleName: getId", "DEL SimpleType: T", "DEL SimpleName: isValid", "DEL SimpleName: ZNRecord", "DEL PrimitiveType: boolean", "DEL SimpleType: Collection", "DEL ArrayInitializer", "DEL SimpleName: String", "DEL SimpleType: Constructor", "DEL EnhancedForStatement", "DEL ParameterizedType: List<T>", "DEL SimpleName: T", "DEL SimpleType: ZNRecordDecorator", "DEL ParameterizedType: Constructor<T>", "DEL SimpleType: Object", "DEL SimpleName: newInstance", "DEL SimpleName: record", "DEL ParameterizedType: Map<String,T>", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL ParameterizedType: Map<String,T>", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: T", "DEL SimpleName: id", "DEL SimpleName: ZNRecordDecorator", "DEL MethodInvocation", "DEL SimpleName: records", "DEL SimpleName: record", "DEL SimpleName: getRecord", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: clazz", "DEL MethodInvocation", "DEL SimpleType: ZNRecord", "DEL SimpleName: ZNRecord", "DEL SimpleName: getId", "DEL SimpleName: record", "DEL SimpleName: String", "DEL SimpleName: String", "DEL Block", "DEL SimpleName: decorator", "DEL SimpleType: ZNRecord", "DEL SimpleType: ZNRecord", "DEL ParameterizedType: HashMap<String,T>", "DEL ParameterizedType: Class<T>", "DEL SimpleName: _record", "DEL Assignment: =", "DEL Modifier: final", "DEL SimpleType: List", "DEL SimpleName: String", "DEL SimpleType: T", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL SimpleName: clazz", "DEL SimpleName: ZNRecordDecorator", "DEL TextElement: ZNRecordDecorator", "DEL FieldDeclaration", "DEL SimpleType: ZNRecordDecorator", "DEL SimpleName: emptyMap", "DEL ReturnStatement", "DEL ParameterizedType: Class<T>", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL SimpleName: List", "DEL TypeParameter", "DEL SimpleName: T", "DEL SimpleName: _record", "DEL Modifier: public", "DEL SimpleName: convertToTypedList", "DEL SingleVariableDeclaration", "DEL SimpleName: printStackTrace", "DEL Block", "DEL SimpleName: HashMap", "DEL Modifier: static", "DEL Block", "DEL TryStatement"]}]}}, {"ZNRecordDecorator_diff": {"operations": ["Delete TextElement: Copyright (C) 2012 LinkedIn Inc <opensource@linkedin.com>(0)", "Delete TextElement: Licensed under the Apache License, Version 2.0 (the \"License\");(1)", "Delete TextElement: you may not use this file except in compliance with the License.(2)", "Delete TextElement: You may obtain a copy of the License at(3)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(4)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(5)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(6)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(7)", "Delete TextElement: See the License for the specific language governing permissions and(8)", "Delete TextElement: limitations under the License.(9)", "Delete TagElement(10)", "Delete Javadoc(11)", "Delete QualifiedName: com.linkedin.helix(12)", "Delete PackageDeclaration(13)", "Delete QualifiedName: java.lang.reflect.Constructor(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.util.ArrayList(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: java.util.Collection(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: java.util.Collections(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: java.util.HashMap(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: java.util.List(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: java.util.Map(26)", "Delete ImportDeclaration(27)", "Delete TextElement: A wrapper class for ZNRecord. Used as a parent class for IdealState,(28)", "Delete TextElement: CurrentState, etc.(29)", "Delete TagElement(30)", "Delete Javadoc(31)", "Delete Modifier: public(32)", "Delete Modifier: abstract(33)", "Delete SimpleName: ZNRecordDecorator(34)", "Delete Modifier: protected(35)", "Delete Modifier: final(36)", "Delete SimpleName: ZNRecord(37)", "Delete SimpleType: ZNRecord(38)", "Delete SimpleName: _record(39)", "Delete VariableDeclarationFragment(40)", "Delete FieldDeclaration(41)", "Delete Modifier: public(42)", "Delete SimpleName: ZNRecordDecorator(43)", "Delete SimpleName: String(44)", "Delete SimpleType: String(45)", "Delete SimpleName: id(46)", "Delete SingleVariableDeclaration(47)", "Delete SimpleName: _record(48)", "Delete SimpleName: ZNRecord(49)", "Delete SimpleType: ZNRecord(50)", "Delete SimpleName: id(51)", "Delete ClassInstanceCreation(52)", "Delete Assignment: =(53)", "Delete ExpressionStatement(54)", "Delete Block(55)", "Delete MethodDeclaration(56)", "Delete Modifier: public(57)", "Delete SimpleName: ZNRecordDecorator(58)", "Delete SimpleName: ZNRecord(59)", "Delete SimpleType: ZNRecord(60)", "Delete SimpleName: record(61)", "Delete SingleVariableDeclaration(62)", "Delete SimpleName: _record(63)", "Delete SimpleName: ZNRecord(64)", "Delete SimpleType: ZNRecord(65)", "Delete SimpleName: record(66)", "Delete ClassInstanceCreation(67)", "Delete Assignment: =(68)", "Delete ExpressionStatement(69)", "Delete Block(70)", "Delete MethodDeclaration(71)", "Delete Modifier: public(72)", "Delete Modifier: final(73)", "Delete SimpleName: String(74)", "Delete SimpleType: String(75)", "Delete SimpleName: getId(76)", "Delete SimpleName: _record(77)", "Delete SimpleName: getId(78)", "Delete MethodInvocation(79)", "Delete ReturnStatement(80)", "Delete Block(81)", "Delete MethodDeclaration(82)", "Delete Modifier: public(83)", "Delete Modifier: final(84)", "Delete SimpleName: ZNRecord(85)", "Delete SimpleType: ZNRecord(86)", "Delete SimpleName: getRecord(87)", "Delete SimpleName: _record(88)", "Delete ReturnStatement(89)", "Delete Block(90)", "Delete MethodDeclaration(91)", "Delete Modifier: public(92)", "Delete Modifier: final(93)", "Delete PrimitiveType: void(94)", "Delete SimpleName: setDeltaList(95)", "Delete SimpleName: List(96)", "Delete SimpleType: List(97)", "Delete SimpleName: ZNRecordDelta(98)", "Delete SimpleType: ZNRecordDelta(99)", "Delete ParameterizedType: List<ZNRecordDelta>(100)", "Delete SimpleName: deltaList(101)", "Delete SingleVariableDeclaration(102)", "Delete SimpleName: _record(103)", "Delete SimpleName: setDeltaList(104)", "Delete SimpleName: deltaList(105)", "Delete MethodInvocation(106)", "Delete ExpressionStatement(107)", "Delete Block(108)", "Delete MethodDeclaration(109)", "Delete SimpleName: Override(110)", "Delete MarkerAnnotation(111)", "Delete Modifier: public(112)", "Delete SimpleName: String(113)", "Delete SimpleType: String(114)", "Delete SimpleName: toString(115)", "Delete SimpleName: _record(116)", "Delete SimpleName: toString(117)", "Delete MethodInvocation(118)", "Delete ReturnStatement(119)", "Delete Block(120)", "Delete MethodDeclaration(121)", "Delete TextElement: static method that convert ZNRecord to an instance that subclasses(122)", "Delete TextElement: ZNRecordDecorator(123)", "Delete TagElement(124)", "Delete SimpleName: clazz(125)", "Delete TagElement: @param(126)", "Delete SimpleName: record(127)", "Delete TagElement: @param(128)", "Delete TagElement: @return(129)", "Delete Javadoc(130)", "Delete Modifier: public(131)", "Delete Modifier: static(132)", "Delete SimpleName: T(133)", "Delete SimpleName: ZNRecordDecorator(134)", "Delete SimpleType: ZNRecordDecorator(135)", "Delete TypeParameter(136)", "Delete SimpleName: T(137)", "Delete SimpleType: T(138)", "Delete SimpleName: convertToTypedInstance(139)", "Delete SimpleName: Class(140)", "Delete SimpleType: Class(141)", "Delete SimpleName: T(142)", "Delete SimpleType: T(143)", "Delete ParameterizedType: Class<T>(144)", "Delete SimpleName: clazz(145)", "Delete SingleVariableDeclaration(146)", "Delete SimpleName: ZNRecord(147)", "Delete SimpleType: ZNRecord(148)", "Delete SimpleName: record(149)", "Delete SingleVariableDeclaration(150)", "Delete SimpleName: record(151)", "Delete NullLiteral(152)", "Delete InfixExpression: ==(153)", "Delete NullLiteral(154)", "Delete ReturnStatement(155)", "Delete Block(156)", "Delete IfStatement(157)", "Delete SimpleName: Constructor(158)", "Delete SimpleType: Constructor(159)", "Delete SimpleName: T(160)", "Delete SimpleType: T(161)", "Delete ParameterizedType: Constructor<T>(162)", "Delete SimpleName: constructor(163)", "Delete SimpleName: clazz(164)", "Delete SimpleName: getConstructor(165)", "Delete SimpleName: Class(166)", "Delete SimpleType: Class(167)", "Delete Dimension(168)", "Delete ArrayType: Class[](169)", "Delete SimpleName: ZNRecord(170)", "Delete SimpleType: ZNRecord(171)", "Delete TypeLiteral(172)", "Delete ArrayInitializer(173)", "Delete ArrayCreation(174)", "Delete MethodInvocation(175)", "Delete VariableDeclarationFragment(176)", "Delete VariableDeclarationStatement(177)", "Delete SimpleName: constructor(178)", "Delete SimpleName: newInstance(179)", "Delete SimpleName: record(180)", "Delete MethodInvocation(181)", "Delete ReturnStatement(182)", "Delete Block(183)", "Delete SimpleName: Exception(184)", "Delete SimpleType: Exception(185)", "Delete SimpleName: e(186)", "Delete SingleVariableDeclaration(187)", "Delete SimpleName: e(188)", "Delete SimpleName: printStackTrace(189)", "Delete MethodInvocation(190)", "Delete ExpressionStatement(191)", "Delete Block(192)", "Delete CatchClause(193)", "Delete TryStatement(194)", "Delete NullLiteral(195)", "Delete ReturnStatement(196)", "Delete Block(197)", "Delete MethodDeclaration(198)", "Delete Modifier: public(199)", "Delete Modifier: static(200)", "Delete SimpleName: T(201)", "Delete SimpleName: ZNRecordDecorator(202)", "Delete SimpleType: ZNRecordDecorator(203)", "Delete TypeParameter(204)", "Delete SimpleName: List(205)", "Delete SimpleType: List(206)", "Delete SimpleName: T(207)", "Delete SimpleType: T(208)", "Delete ParameterizedType: List<T>(209)", "Delete SimpleName: convertToTypedList(210)", "Delete SimpleName: Class(211)", "Delete SimpleType: Class(212)", "Delete SimpleName: T(213)", "Delete SimpleType: T(214)", "Delete ParameterizedType: Class<T>(215)", "Delete SimpleName: clazz(216)", "Delete SingleVariableDeclaration(217)", "Delete SimpleName: Collection(218)", "Delete SimpleType: Collection(219)", "Delete SimpleName: ZNRecord(220)", "Delete SimpleType: ZNRecord(221)", "Delete ParameterizedType: Collection<ZNRecord>(222)", "Delete SimpleName: records(223)", "Delete SingleVariableDeclaration(224)", "Delete SimpleName: records(225)", "Delete NullLiteral(226)", "Delete InfixExpression: ==(227)", "Delete NullLiteral(228)", "Delete ReturnStatement(229)", "Delete Block(230)", "Delete IfStatement(231)", "Delete SimpleName: List(232)", "Delete SimpleType: List(233)", "Delete SimpleName: T(234)", "Delete SimpleType: T(235)", "Delete ParameterizedType: List<T>(236)", "Delete SimpleName: decorators(237)", "Delete SimpleName: ArrayList(238)", "Delete SimpleType: ArrayList(239)", "Delete SimpleName: T(240)", "Delete SimpleType: T(241)", "Delete ParameterizedType: ArrayList<T>(242)", "Delete ClassInstanceCreation(243)", "Delete VariableDeclarationFragment(244)", "Delete VariableDeclarationStatement(245)", "Delete SimpleName: ZNRecord(246)", "Delete SimpleType: ZNRecord(247)", "Delete SimpleName: record(248)", "Delete SingleVariableDeclaration(249)", "Delete SimpleName: records(250)", "Delete SimpleName: T(251)", "Delete SimpleType: T(252)", "Delete SimpleName: decorator(253)", "Delete SimpleName: ZNRecordDecorator(254)", "Delete SimpleName: convertToTypedInstance(255)", "Delete SimpleName: clazz(256)", "Delete SimpleName: record(257)", "Delete MethodInvocation(258)", "Delete VariableDeclarationFragment(259)", "Delete VariableDeclarationStatement(260)", "Delete SimpleName: decorator(261)", "Delete NullLiteral(262)", "Delete InfixExpression: !=(263)", "Delete SimpleName: decorators(264)", "Delete SimpleName: add(265)", "Delete SimpleName: decorator(266)", "Delete MethodInvocation(267)", "Delete ExpressionStatement(268)", "Delete Block(269)", "Delete IfStatement(270)", "Delete Block(271)", "Delete EnhancedForStatement(272)", "Delete SimpleName: decorators(273)", "Delete ReturnStatement(274)", "Delete Block(275)", "Delete MethodDeclaration(276)", "Delete Modifier: public(277)", "Delete Modifier: static(278)", "Delete SimpleName: T(279)", "Delete SimpleName: ZNRecordDecorator(280)", "Delete SimpleType: ZNRecordDecorator(281)", "Delete TypeParameter(282)", "Delete SimpleName: Map(283)", "Delete SimpleType: Map(284)", "Delete SimpleName: String(285)", "Delete SimpleType: String(286)", "Delete SimpleName: T(287)", "Delete SimpleType: T(288)", "Delete ParameterizedType: Map<String,T>(289)", "Delete SimpleName: convertListToMap(290)", "Delete SimpleName: List(291)", "Delete SimpleType: List(292)", "Delete SimpleName: T(293)", "Delete SimpleType: T(294)", "Delete ParameterizedType: List<T>(295)", "Delete SimpleName: records(296)", "Delete SingleVariableDeclaration(297)", "Delete SimpleName: records(298)", "Delete NullLiteral(299)", "Delete InfixExpression: ==(300)", "Delete SimpleName: Collections(301)", "Delete SimpleName: emptyMap(302)", "Delete MethodInvocation(303)", "Delete ReturnStatement(304)", "Delete Block(305)", "Delete IfStatement(306)", "Delete SimpleName: Map(307)", "Delete SimpleType: Map(308)", "Delete SimpleName: String(309)", "Delete SimpleType: String(310)", "Delete SimpleName: T(311)", "Delete SimpleType: T(312)", "Delete ParameterizedType: Map<String,T>(313)", "Delete SimpleName: decorators(314)", "Delete SimpleName: HashMap(315)", "Delete SimpleType: HashMap(316)", "Delete SimpleName: String(317)", "Delete SimpleType: String(318)", "Delete SimpleName: T(319)", "Delete SimpleType: T(320)", "Delete ParameterizedType: HashMap<String,T>(321)", "Delete ClassInstanceCreation(322)", "Delete VariableDeclarationFragment(323)", "Delete VariableDeclarationStatement(324)", "Delete SimpleName: T(325)", "Delete SimpleType: T(326)", "Delete SimpleName: record(327)", "Delete SingleVariableDeclaration(328)", "Delete SimpleName: records(329)", "Delete SimpleName: decorators(330)", "Delete SimpleName: put(331)", "Delete SimpleName: record(332)", "Delete SimpleName: getId(333)", "Delete MethodInvocation(334)", "Delete SimpleName: record(335)", "Delete MethodInvocation(336)", "Delete ExpressionStatement(337)", "Delete Block(338)", "Delete EnhancedForStatement(339)", "Delete SimpleName: decorators(340)", "Delete ReturnStatement(341)", "Delete Block(342)", "Delete MethodDeclaration(343)", "Delete Modifier: public(344)", "Delete Modifier: abstract(345)", "Delete PrimitiveType: boolean(346)", "Delete SimpleName: isValid(347)", "Delete MethodDeclaration(348)", "Delete SimpleName: Override(349)", "Delete MarkerAnnotation(350)", "Delete Modifier: public(351)", "Delete PrimitiveType: boolean(352)", "Delete SimpleName: equals(353)", "Delete SimpleName: Object(354)", "Delete SimpleType: Object(355)", "Delete SimpleName: obj(356)", "Delete SingleVariableDeclaration(357)", "Delete SimpleName: obj(358)", "Delete NullLiteral(359)", "Delete InfixExpression: ==(360)", "Delete BooleanLiteral: false(361)", "Delete ReturnStatement(362)", "Delete Block(363)", "Delete IfStatement(364)", "Delete SimpleName: obj(365)", "Delete SimpleName: ZNRecordDecorator(366)", "Delete SimpleType: ZNRecordDecorator(367)", "Delete InstanceofExpression(368)", "Delete SimpleName: ZNRecordDecorator(369)", "Delete SimpleType: ZNRecordDecorator(370)", "Delete SimpleName: that(371)", "Delete SimpleName: ZNRecordDecorator(372)", "Delete SimpleType: ZNRecordDecorator(373)", "Delete SimpleName: obj(374)", "Delete CastExpression(375)", "Delete VariableDeclarationFragment(376)", "Delete VariableDeclarationStatement(377)", "Delete SimpleName: that(378)", "Delete SimpleName: getRecord(379)", "Delete MethodInvocation(380)", "Delete NullLiteral(381)", "Delete InfixExpression: !=(382)", "Delete SimpleName: that(383)", "Delete SimpleName: getRecord(384)", "Delete MethodInvocation(385)", "Delete SimpleName: equals(386)", "Delete ThisExpression(387)", "Delete SimpleName: getRecord(388)", "Delete MethodInvocation(389)", "Delete MethodInvocation(390)", "Delete ReturnStatement(391)", "Delete Block(392)", "Delete IfStatement(393)", "Delete Block(394)", "Delete IfStatement(395)", "Delete BooleanLiteral: false(396)", "Delete ReturnStatement(397)", "Delete Block(398)", "Delete MethodDeclaration(399)", "Delete TypeDeclaration: class(400)"]}}, {"AlertStatus_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 4"]}, {"root": "UPDATE from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty", "operations": ["UPD QualifiedName: com.linkedin.helix.ZNRecordDecorator from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty"]}, {"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"AlertStatus_diff": {"operations": ["Move ImportDeclaration(17) into CompilationUnit(150) at 4", "Update QualifiedName: com.linkedin.helix.ZNRecordDecorator(18) to com.linkedin.helix.HelixProperty", "Update SimpleType: ZNRecordDecorator(23) to HelixProperty", "Update SimpleName: ZNRecordDecorator(22) to HelixProperty"]}}, {"Alerts_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 4"]}, {"root": "UPDATE from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty", "operations": ["UPD QualifiedName: com.linkedin.helix.ZNRecordDecorator from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty"]}, {"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"Alerts_diff": {"operations": ["Move ImportDeclaration(17) into CompilationUnit(150) at 4", "Update QualifiedName: com.linkedin.helix.ZNRecordDecorator(18) to com.linkedin.helix.HelixProperty", "Update SimpleType: ZNRecordDecorator(23) to HelixProperty", "Update SimpleName: ZNRecordDecorator(22) to HelixProperty"]}}, {"ClusterConstraints_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 11"]}, {"root": "UPDATE from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty", "operations": ["UPD QualifiedName: com.linkedin.helix.ZNRecordDecorator from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty"]}, {"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"ClusterConstraints_diff": {"operations": ["Move ImportDeclaration(31) into CompilationUnit(656) at 11", "Update QualifiedName: com.linkedin.helix.ZNRecordDecorator(32) to com.linkedin.helix.HelixProperty", "Update SimpleType: ZNRecordDecorator(39) to HelixProperty", "Update SimpleName: ZNRecordDecorator(38) to HelixProperty"]}}, {"CurrentState_cluster": {"actions": [{"root": "UPDATE from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty", "operations": ["UPD QualifiedName: com.linkedin.helix.ZNRecordDecorator from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty"]}, {"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"CurrentState_diff": {"operations": ["Update QualifiedName: com.linkedin.helix.ZNRecordDecorator(24) to com.linkedin.helix.HelixProperty", "Update SimpleType: ZNRecordDecorator(32) to HelixProperty", "Update SimpleName: ZNRecordDecorator(31) to HelixProperty"]}}, {"ExternalView_cluster": {"actions": [{"root": "UPDATE from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty", "operations": ["UPD QualifiedName: com.linkedin.helix.ZNRecordDecorator from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty"]}, {"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"ExternalView_diff": {"operations": ["Update QualifiedName: com.linkedin.helix.ZNRecordDecorator(22) to com.linkedin.helix.HelixProperty", "Update SimpleType: ZNRecordDecorator(31) to HelixProperty", "Update SimpleName: ZNRecordDecorator(30) to HelixProperty"]}}, {"HealthStat_cluster": {"actions": [{"root": "UPDATE from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty", "operations": ["UPD QualifiedName: com.linkedin.helix.ZNRecordDecorator from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty"]}, {"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"HealthStat_diff": {"operations": ["Update QualifiedName: com.linkedin.helix.ZNRecordDecorator(24) to com.linkedin.helix.HelixProperty", "Update SimpleType: ZNRecordDecorator(35) to HelixProperty", "Update SimpleName: ZNRecordDecorator(34) to HelixProperty"]}}, {"IdealState_cluster": {"actions": [{"root": "UPDATE from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty", "operations": ["UPD QualifiedName: com.linkedin.helix.ZNRecordDecorator from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty"]}, {"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"IdealState_diff": {"operations": ["Update QualifiedName: com.linkedin.helix.ZNRecordDecorator(28) to com.linkedin.helix.HelixProperty", "Update SimpleType: ZNRecordDecorator(36) to HelixProperty", "Update SimpleName: ZNRecordDecorator(35) to HelixProperty"]}}, {"InstanceConfig_cluster": {"actions": [{"root": "UPDATE from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty", "operations": ["UPD QualifiedName: com.linkedin.helix.ZNRecordDecorator from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty"]}, {"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"InstanceConfig_diff": {"operations": ["Update QualifiedName: com.linkedin.helix.ZNRecordDecorator(24) to com.linkedin.helix.HelixProperty", "Update SimpleType: ZNRecordDecorator(32) to HelixProperty", "Update SimpleName: ZNRecordDecorator(31) to HelixProperty"]}}, {"LeaderHistory_cluster": {"actions": [{"root": "UPDATE from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty", "operations": ["UPD QualifiedName: com.linkedin.helix.ZNRecordDecorator from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty"]}, {"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"LeaderHistory_diff": {"operations": ["Update QualifiedName: com.linkedin.helix.ZNRecordDecorator(20) to com.linkedin.helix.HelixProperty", "Update SimpleType: ZNRecordDecorator(25) to HelixProperty", "Update SimpleName: ZNRecordDecorator(24) to HelixProperty"]}}, {"LiveInstance_cluster": {"actions": [{"root": "UPDATE from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty", "operations": ["UPD QualifiedName: com.linkedin.helix.ZNRecordDecorator from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty"]}, {"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"LiveInstance_diff": {"operations": ["Update QualifiedName: com.linkedin.helix.ZNRecordDecorator(20) to com.linkedin.helix.HelixProperty", "Update SimpleType: ZNRecordDecorator(30) to HelixProperty", "Update SimpleName: ZNRecordDecorator(29) to HelixProperty"]}}, {"Message_cluster": {"actions": [{"root": "UPDATE from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty", "operations": ["UPD QualifiedName: com.linkedin.helix.ZNRecordDecorator from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty"]}, {"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"Message_diff": {"operations": ["Update QualifiedName: com.linkedin.helix.ZNRecordDecorator(24) to com.linkedin.helix.HelixProperty", "Update SimpleType: ZNRecordDecorator(34) to HelixProperty", "Update SimpleName: ZNRecordDecorator(33) to HelixProperty"]}}, {"PauseSignal_cluster": {"actions": [{"root": "UPDATE from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty", "operations": ["UPD QualifiedName: com.linkedin.helix.ZNRecordDecorator from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty"]}, {"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"PauseSignal_diff": {"operations": ["Update QualifiedName: com.linkedin.helix.ZNRecordDecorator(16) to com.linkedin.helix.HelixProperty", "Update SimpleType: ZNRecordDecorator(21) to HelixProperty", "Update SimpleName: ZNRecordDecorator(20) to HelixProperty"]}}, {"PersistentStats_cluster": {"actions": [{"root": "UPDATE from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty", "operations": ["UPD QualifiedName: com.linkedin.helix.ZNRecordDecorator from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty"]}, {"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"PersistentStats_diff": {"operations": ["Update QualifiedName: com.linkedin.helix.ZNRecordDecorator(20) to com.linkedin.helix.HelixProperty", "Update SimpleType: ZNRecordDecorator(25) to HelixProperty", "Update SimpleName: ZNRecordDecorator(24) to HelixProperty"]}}, {"StateModelDefinition_cluster": {"actions": [{"root": "UPDATE from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty", "operations": ["UPD QualifiedName: com.linkedin.helix.ZNRecordDecorator from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty"]}, {"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"StateModelDefinition_diff": {"operations": ["Update QualifiedName: com.linkedin.helix.ZNRecordDecorator(24) to com.linkedin.helix.HelixProperty", "Update SimpleType: ZNRecordDecorator(32) to HelixProperty", "Update SimpleName: ZNRecordDecorator(31) to HelixProperty"]}}, {"StatusUpdate_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: com.linkedin.helix.HelixProperty to ImportDeclaration at 0"]}, {"root": "INS SimpleType: HelixProperty to TypeDeclaration: class at 2", "operations": ["INS SimpleName: HelixProperty to SimpleType: HelixProperty at 0", "INS SimpleType: HelixProperty to TypeDeclaration: class at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 3", "operations": ["INS SimpleName: StatusUpdate to MethodDeclaration at 1", "INS Block to MethodDeclaration at 3", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: id to SingleVariableDeclaration at 1", "INS SimpleName: id to SuperConstructorInvocation at 0", "INS SuperConstructorInvocation to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 3", "INS SingleVariableDeclaration to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 4", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 4", "INS BooleanLiteral: false to ReturnStatement at 0", "INS Block to MethodDeclaration at 4", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: isValid to MethodDeclaration at 3", "INS ReturnStatement to Block at 0"]}]}}, {"StatusUpdate_diff": {"operations": ["Insert ImportDeclaration(15) into CompilationUnit(40) at 1", "Insert QualifiedName: com.linkedin.helix.HelixProperty(14) into ImportDeclaration(15) at 0", "Insert SimpleType: HelixProperty(19) into TypeDeclaration: class(39) at 2", "Insert MethodDeclaration(29) into TypeDeclaration: class(39) at 3", "Insert MethodDeclaration(38) into TypeDeclaration: class(39) at 4", "Insert SimpleName: HelixProperty(18) into SimpleType: HelixProperty(19) at 0", "Insert Modifier: public(20) into MethodDeclaration(29) at 0", "Insert SimpleName: StatusUpdate(21) into MethodDeclaration(29) at 1", "Insert SingleVariableDeclaration(25) into MethodDeclaration(29) at 2", "Insert Block(28) into MethodDeclaration(29) at 3", "Insert MarkerAnnotation(31) into MethodDeclaration(38) at 0", "Insert Modifier: public(32) into MethodDeclaration(38) at 1", "Insert PrimitiveType: boolean(33) into MethodDeclaration(38) at 2", "Insert SimpleName: isValid(34) into MethodDeclaration(38) at 3", "Insert Block(37) into MethodDeclaration(38) at 4", "Insert SimpleType: String(23) into SingleVariableDeclaration(25) at 0", "Insert SimpleName: id(24) into SingleVariableDeclaration(25) at 1", "Insert SuperConstructorInvocation(27) into Block(28) at 0", "Insert SimpleName: Override(30) into MarkerAnnotation(31) at 0", "Insert ReturnStatement(36) into Block(37) at 0", "Insert SimpleName: String(22) into SimpleType: String(23) at 0", "Insert SimpleName: id(26) into SuperConstructorInvocation(27) at 0", "Insert BooleanLiteral: false(35) into ReturnStatement(36) at 0"]}}, {"FileDataAccessor_cluster": {"actions": [{"root": "UPDATE from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty", "operations": ["UPD QualifiedName: com.linkedin.helix.ZNRecordDecorator from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty"]}, {"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"FileDataAccessor_diff": {"operations": ["Update QualifiedName: com.linkedin.helix.ZNRecordDecorator(38) to com.linkedin.helix.HelixProperty", "Update SimpleType: ZNRecordDecorator(123) to HelixProperty", "Update SimpleType: ZNRecordDecorator(224) to HelixProperty", "Update SimpleType: ZNRecordDecorator(335) to HelixProperty", "Update SimpleType: ZNRecordDecorator(599) to HelixProperty", "Update SimpleType: ZNRecordDecorator(973) to HelixProperty", "Update SimpleName: ZNRecordDecorator(122) to HelixProperty", "Update SimpleName: ZNRecordDecorator(223) to HelixProperty", "Update SimpleName: ZNRecordDecorator(334) to HelixProperty", "Update SimpleName: ZNRecordDecorator(598) to HelixProperty", "Update SimpleName: ZNRecordDecorator(972) to HelixProperty", "Update SimpleName: ZNRecordDecorator(371) to HelixProperty", "Update SimpleName: ZNRecordDecorator(634) to HelixProperty", "Update SimpleName: ZNRecordDecorator(1011) to HelixProperty"]}}, {"StaticFileHelixManager_cluster": {"actions": [{"root": "UPDATE from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty", "operations": ["UPD QualifiedName: com.linkedin.helix.ZNRecordDecorator from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty"]}, {"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"StaticFileHelixManager_diff": {"operations": ["Update QualifiedName: com.linkedin.helix.ZNRecordDecorator(66) to com.linkedin.helix.HelixProperty", "Update SimpleName: ZNRecordDecorator(894) to HelixProperty", "Update SimpleName: ZNRecordDecorator(987) to HelixProperty"]}}, {"ZKDataAccessor_cluster": {"actions": [{"root": "UPDATE from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty", "operations": ["UPD QualifiedName: com.linkedin.helix.ZNRecordDecorator from com.linkedin.helix.ZNRecordDecorator to com.linkedin.helix.HelixProperty"]}, {"root": "UPDATE from ZNRecordDecorator to HelixProperty", "operations": ["UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleType: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty", "UPD SimpleName: ZNRecordDecorator from ZNRecordDecorator to HelixProperty"]}]}}, {"ZKDataAccessor_diff": {"operations": ["Update QualifiedName: com.linkedin.helix.ZNRecordDecorator(44) to com.linkedin.helix.HelixProperty", "Update SimpleType: ZNRecordDecorator(142) to HelixProperty", "Update SimpleType: ZNRecordDecorator(302) to HelixProperty", "Update SimpleType: ZNRecordDecorator(429) to HelixProperty", "Update SimpleType: ZNRecordDecorator(637) to HelixProperty", "Update SimpleType: ZNRecordDecorator(1118) to HelixProperty", "Update SimpleName: ZNRecordDecorator(141) to HelixProperty", "Update SimpleName: ZNRecordDecorator(301) to HelixProperty", "Update SimpleName: ZNRecordDecorator(428) to HelixProperty", "Update SimpleName: ZNRecordDecorator(636) to HelixProperty", "Update SimpleName: ZNRecordDecorator(1117) to HelixProperty", "Update SimpleName: ZNRecordDecorator(449) to HelixProperty", "Update SimpleName: ZNRecordDecorator(1158) to HelixProperty", "Update SimpleName: ZNRecordDecorator(677) to HelixProperty"]}}, {"ZKHelixDataAccessor_cluster": {"actions": [{"root": "INS NullLiteral to MethodInvocation at 3", "operations": ["INS NullLiteral to MethodInvocation at 3"]}]}}, {"ZKHelixDataAccessor_diff": {"operations": ["Insert NullLiteral(279) into MethodInvocation(281) at 3"]}}, {"ZkBaseDataAccessor_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS QualifiedName: com.linkedin.helix.IZkListener to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 14"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleType: String to SingleVariableDeclaration at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS ReturnStatement to Block at 0", "INS StringLiteral: \"/\" to InfixExpression: + at 0", "INS SimpleName: path to SingleVariableDeclaration at 1", "INS InfixExpression: || to ReturnStatement at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: || at 0", "INS SimpleName: path to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: startsWith to MethodInvocation at 1", "INS SimpleName: _root to InfixExpression: + at 1", "INS StringLiteral: \"/\" to InfixExpression: + at 2", "INS StringLiteral: \"/\" to InfixExpression: + at 0", "INS PrimitiveType: boolean to MethodDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: checkPath to MethodDeclaration at 1", "INS SimpleName: path to MethodInvocation at 0", "INS SimpleName: _root to InfixExpression: + at 1", "INS Block to MethodDeclaration at 3", "INS SimpleName: equals to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 27", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 27", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: _zkClient to MethodInvocation at 0", "INS SimpleName: _zkClient to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: subscribeDataChanges to MethodInvocation at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS ReturnStatement to Block at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS BooleanLiteral: true to ReturnStatement at 0", "INS SimpleName: listener to MethodInvocation at 3", "INS SimpleType: IZkListener to SingleVariableDeclaration at 0", "INS SimpleName: path to MethodInvocation at 2", "INS SimpleName: path to MethodInvocation at 2", "INS SimpleName: subscribe to MethodDeclaration at 3", "INS SimpleName: subscribeChildChanges to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: IZkListener to SimpleType: IZkListener at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: listener to MethodInvocation at 3", "INS SimpleName: path to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleType: Stat to SingleVariableDeclaration at 0", "INS SimpleName: Stat to SimpleType: Stat at 0", "INS SimpleName: stat to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "UPDATE from _clusterName to _root", "operations": ["UPD SimpleName: _clusterName from _clusterName to _root", "UPD SimpleName: _clusterName from _clusterName to _root", "UPD SimpleName: _clusterName from _clusterName to _root"]}, {"root": "UPDATE from clusterName to root", "operations": ["UPD SimpleName: clusterName from clusterName to root", "UPD SimpleName: clusterName from clusterName to root"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS SimpleName: error to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: path to InfixExpression: + at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS StringLiteral: \"invalid path. path: \" to InfixExpression: + at 0", "INS SimpleName: checkPath to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to Block at 0", "INS SimpleName: path to MethodInvocation at 1", "INS BooleanLiteral: false to ReturnStatement at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS ReturnStatement to Block at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: LOG to MethodInvocation at 0"]}, {"root": "UPDATE from aysnc create parent and child. used internally when fail on NoNode to sync create parent and async create child. used internally when fail on NoNode", "operations": ["UPD TextElement: aysnc create parent and child. used internally when fail on NoNode from aysnc create parent and child. used internally when fail on NoNode to sync create parent and async create child. used internally when fail on NoNode"]}, {"root": "INS SimpleName: stat to MethodInvocation at 3", "operations": ["INS SimpleName: stat to MethodInvocation at 3"]}, {"root": "INS NullLiteral to MethodInvocation at 3", "operations": ["INS NullLiteral to MethodInvocation at 3"]}, {"root": "DEL Modifier: protected", "operations": ["DEL Modifier: protected"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}]}}, {"ZkBaseDataAccessor_diff": {"operations": ["Insert ImportDeclaration(29) into CompilationUnit(2885) at 14", "Insert QualifiedName: com.linkedin.helix.IZkListener(28) into ImportDeclaration(29) at 0", "Insert MethodDeclaration(170) into TypeDeclaration: class(2884) at 8", "Insert MethodDeclaration(2041) into TypeDeclaration: class(2884) at 27", "Update Modifier: protected(70) to private", "Insert PrimitiveType: boolean(148) into MethodDeclaration(170) at 0", "Insert SimpleName: checkPath(149) into MethodDeclaration(170) at 1", "Insert SingleVariableDeclaration(153) into MethodDeclaration(170) at 2", "Insert Block(169) into MethodDeclaration(170) at 3", "Insert SingleVariableDeclaration(1293) into MethodDeclaration(1304) at 5", "Insert MarkerAnnotation(2014) into MethodDeclaration(2041) at 0", "Insert Modifier: public(2015) into MethodDeclaration(2041) at 1", "Insert PrimitiveType: boolean(2016) into MethodDeclaration(2041) at 2", "Insert SimpleName: subscribe(2017) into MethodDeclaration(2041) at 3", "Insert SingleVariableDeclaration(2021) into MethodDeclaration(2041) at 4", "Insert SingleVariableDeclaration(2025) into MethodDeclaration(2041) at 5", "Insert Block(2040) into MethodDeclaration(2041) at 6", "Update SimpleName: _clusterName(67) to _root", "Update SimpleName: clusterName(131) to root", "Insert SimpleType: String(151) into SingleVariableDeclaration(153) at 0", "Insert SimpleName: path(152) into SingleVariableDeclaration(153) at 1", "Insert ReturnStatement(168) into Block(169) at 0", "Insert IfStatement(201) into Block(283) at 0", "Insert SimpleType: Stat(1291) into SingleVariableDeclaration(1293) at 0", "Insert SimpleName: stat(1292) into SingleVariableDeclaration(1293) at 1", "Insert SimpleName: Override(2013) into MarkerAnnotation(2014) at 0", "Insert SimpleType: String(2019) into SingleVariableDeclaration(2021) at 0", "Insert SimpleName: path(2020) into SingleVariableDeclaration(2021) at 1", "Insert SimpleType: IZkListener(2023) into SingleVariableDeclaration(2025) at 0", "Insert SimpleName: listener(2024) into SingleVariableDeclaration(2025) at 1", "Insert ExpressionStatement(2031) into Block(2040) at 0", "Insert ExpressionStatement(2037) into Block(2040) at 1", "Insert ReturnStatement(2039) into Block(2040) at 2", "Insert SimpleName: String(150) into SimpleType: String(151) at 0", "Insert InfixExpression: ||(167) into ReturnStatement(168) at 0", "Insert PrefixExpression: !(190) into IfStatement(201) at 0", "Insert Block(200) into IfStatement(201) at 1", "Update TextElement: aysnc create parent and child. used internally when fail on NoNode(418) to sync create parent and async create child. used internally when fail on NoNode", "Insert SimpleName: Stat(1290) into SimpleType: Stat(1291) at 0", "Insert SimpleName: String(2018) into SimpleType: String(2019) at 0", "Insert SimpleName: IZkListener(2022) into SimpleType: IZkListener(2023) at 0", "Insert MethodInvocation(2030) into ExpressionStatement(2031) at 0", "Insert MethodInvocation(2036) into ExpressionStatement(2037) at 0", "Insert BooleanLiteral: true(2038) into ReturnStatement(2039) at 0", "Update SimpleName: _clusterName(137) to _root", "Update SimpleName: clusterName(138) to root", "Insert MethodInvocation(159) into InfixExpression: ||(167) at 0", "Insert MethodInvocation(166) into InfixExpression: ||(167) at 1", "Insert MethodInvocation(189) into PrefixExpression: !(190) at 0", "Insert ExpressionStatement(197) into Block(200) at 0", "Insert ReturnStatement(199) into Block(200) at 1", "Insert SimpleName: stat(1300) into MethodInvocation(1301) at 3", "Update SimpleName: _clusterName(1508) to _root", "Insert SimpleName: _zkClient(2026) into MethodInvocation(2030) at 0", "Insert SimpleName: subscribeChildChanges(2027) into MethodInvocation(2030) at 1", "Insert SimpleName: path(2028) into MethodInvocation(2030) at 2", "Insert SimpleName: listener(2029) into MethodInvocation(2030) at 3", "Insert SimpleName: _zkClient(2032) into MethodInvocation(2036) at 0", "Insert SimpleName: subscribeDataChanges(2033) into MethodInvocation(2036) at 1", "Insert SimpleName: path(2034) into MethodInvocation(2036) at 2", "Insert SimpleName: listener(2035) into MethodInvocation(2036) at 3", "Insert SimpleName: path(154) into MethodInvocation(159) at 0", "Insert SimpleName: equals(155) into MethodInvocation(159) at 1", "Insert InfixExpression: +(158) into MethodInvocation(159) at 2", "Insert SimpleName: path(160) into MethodInvocation(166) at 0", "Insert SimpleName: startsWith(161) into MethodInvocation(166) at 1", "Insert InfixExpression: +(165) into MethodInvocation(166) at 2", "Insert SimpleName: checkPath(187) into MethodInvocation(189) at 0", "Insert SimpleName: path(188) into MethodInvocation(189) at 1", "Insert MethodInvocation(196) into ExpressionStatement(197) at 0", "Insert BooleanLiteral: false(198) into ReturnStatement(199) at 0", "Insert StringLiteral: \"/\"(156) into InfixExpression: +(158) at 0", "Insert SimpleName: _root(157) into InfixExpression: +(158) at 1", "Insert StringLiteral: \"/\"(162) into InfixExpression: +(165) at 0", "Insert SimpleName: _root(163) into InfixExpression: +(165) at 1", "Insert StringLiteral: \"/\"(164) into InfixExpression: +(165) at 2", "Insert SimpleName: LOG(191) into MethodInvocation(196) at 0", "Insert SimpleName: error(192) into MethodInvocation(196) at 1", "Insert InfixExpression: +(195) into MethodInvocation(196) at 2", "Insert StringLiteral: \"invalid path. path: \"(193) into InfixExpression: +(195) at 0", "Insert SimpleName: path(194) into InfixExpression: +(195) at 1", "Insert NullLiteral(2298) into MethodInvocation(2300) at 3", "Delete Modifier: protected(63)", "Delete BooleanLiteral: true(1257)"]}}, {"ZkClient_cluster": {"actions": [{"root": "UPDATE from org.apache.zookeeper.data.Id to org.apache.zookeeper.ZooDefs.Ids", "operations": ["UPD QualifiedName: org.apache.zookeeper.data.Id from org.apache.zookeeper.data.Id to org.apache.zookeeper.ZooDefs.Ids"]}, {"root": "INS QualifiedName: Ids.OPEN_ACL_UNSAFE to MethodInvocation at 4", "operations": ["INS QualifiedName: Ids.OPEN_ACL_UNSAFE to MethodInvocation at 4"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Arrays", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.zookeeper.data.ACL", "DEL ImportDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleType: ACL", "DEL SimpleType: Id", "DEL ClassInstanceCreation", "DEL NumberLiteral: 31", "DEL Modifier: final", "DEL SimpleName: DEFAULT_ACL", "DEL FieldDeclaration", "DEL StringLiteral: \"anyone\"", "DEL Modifier: private", "DEL SimpleType: ACL", "DEL SimpleName: ACL", "DEL VariableDeclarationFragment", "DEL SimpleName: ACL", "DEL ClassInstanceCreation", "DEL StringLiteral: \"world\"", "DEL Modifier: static", "DEL SimpleName: Id"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: Arrays", "DEL SimpleName: DEFAULT_ACL", "DEL SimpleName: asList", "DEL MethodInvocation"]}]}}, {"ZkClient_diff": {"operations": ["Update QualifiedName: org.apache.zookeeper.data.Id(42) to org.apache.zookeeper.ZooDefs.Ids", "Insert QualifiedName: Ids.OPEN_ACL_UNSAFE(657) into MethodInvocation(661) at 4", "Delete QualifiedName: java.util.Arrays(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: org.apache.zookeeper.data.ACL(40)", "Delete ImportDeclaration(41)", "Delete Modifier: private(88)", "Delete Modifier: static(89)", "Delete Modifier: final(90)", "Delete SimpleName: ACL(91)", "Delete SimpleType: ACL(92)", "Delete SimpleName: DEFAULT_ACL(93)", "Delete SimpleName: ACL(94)", "Delete SimpleType: ACL(95)", "Delete NumberLiteral: 31(96)", "Delete SimpleName: Id(97)", "Delete SimpleType: Id(98)", "Delete StringLiteral: \"world\"(99)", "Delete StringLiteral: \"anyone\"(100)", "Delete ClassInstanceCreation(101)", "Delete ClassInstanceCreation(102)", "Delete VariableDeclarationFragment(103)", "Delete FieldDeclaration(104)", "Delete SimpleName: Arrays(678)", "Delete SimpleName: asList(679)", "Delete SimpleName: DEFAULT_ACL(680)", "Delete MethodInvocation(681)"]}}, {"ZNode_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 13", "INS StringLiteral: \", \" to InfixExpression: + at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: _data to InfixExpression: + at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: _name to InfixExpression: + at 0", "INS StringLiteral: \", \" to InfixExpression: + at 5", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS StringLiteral: \", \" to InfixExpression: + at 3", "INS SimpleName: _childSet to InfixExpression: + at 4", "INS InfixExpression: + to ReturnStatement at 0", "INS SimpleName: toString to MethodDeclaration at 3", "INS SimpleType: String to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: _stat to InfixExpression: + at 6"]}]}}, {"ZNode_diff": {"operations": ["Insert MethodDeclaration(158) into TypeDeclaration: class(159) at 13", "Insert MarkerAnnotation(143) into MethodDeclaration(158) at 0", "Insert Modifier: public(144) into MethodDeclaration(158) at 1", "Insert SimpleType: String(146) into MethodDeclaration(158) at 2", "Insert SimpleName: toString(147) into MethodDeclaration(158) at 3", "Insert Block(157) into MethodDeclaration(158) at 4", "Insert SimpleName: Override(142) into MarkerAnnotation(143) at 0", "Insert SimpleName: String(145) into SimpleType: String(146) at 0", "Insert ReturnStatement(156) into Block(157) at 0", "Insert InfixExpression: +(155) into ReturnStatement(156) at 0", "Insert SimpleName: _name(148) into InfixExpression: +(155) at 0", "Insert StringLiteral: \", \"(149) into InfixExpression: +(155) at 1", "Insert SimpleName: _data(150) into InfixExpression: +(155) at 2", "Insert StringLiteral: \", \"(151) into InfixExpression: +(155) at 3", "Insert SimpleName: _childSet(152) into InfixExpression: +(155) at 4", "Insert StringLiteral: \", \"(153) into InfixExpression: +(155) at 5", "Insert SimpleName: _stat(154) into InfixExpression: +(155) at 6"]}}], "commit_stats": [{"total_files": 31, "deleted_files": 1, "testing": "True", "maintenance": "False", "build": "False"}]}