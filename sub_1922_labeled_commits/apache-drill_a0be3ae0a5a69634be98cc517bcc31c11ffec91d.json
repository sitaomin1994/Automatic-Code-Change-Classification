{"application": "apache-drill", "csha": "a0be3ae0a5a69634be98cc517bcc31c11ffec91d", "files": [{"AbstractFieldWriter_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV Initializer to TypeDeclaration: class at 56", "MOV FieldDeclaration to TypeDeclaration: class at 40", "MOV Initializer to TypeDeclaration: class at 50", "MOV FieldDeclaration to TypeDeclaration: class at 50", "MOV FieldDeclaration to TypeDeclaration: class at 55"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 30", "operations": ["INS TagElement to Javadoc at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: isEmptyMap to MethodDeclaration at 4", "INS TagElement: @code to TagElement at 1", "INS MarkerAnnotation to MethodDeclaration at 1", "INS Modifier: public to MethodDeclaration at 2", "INS TextElement: This implementation returns  to TagElement at 0", "INS TextElement: Must be overridden by map writers. to TagElement at 4", "INS TextElement: </p>   to TagElement at 5", "INS MethodDeclaration to TypeDeclaration: class at 30", "INS SimpleName: Override to MarkerAnnotation at 0", "INS TextElement:  false to TagElement: @code at 0", "INS PrimitiveType: boolean to MethodDeclaration at 3", "INS TextElement: . to TagElement at 2", "INS Javadoc to MethodDeclaration at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS TextElement: <p>   to TagElement at 3", "INS Block to MethodDeclaration at 5"]}]}}, {"AbstractFieldWriter_diff": {"operations": ["Move FieldDeclaration(292) into TypeDeclaration: class(446) at 40", "Move Initializer(337) into TypeDeclaration: class(446) at 56", "Move FieldDeclaration(342) into TypeDeclaration: class(446) at 50", "Move Initializer(359) into TypeDeclaration: class(446) at 50", "Move FieldDeclaration(364) into TypeDeclaration: class(446) at 55", "Insert MethodDeclaration(221) into TypeDeclaration: class(446) at 30", "Insert Javadoc(212) into MethodDeclaration(221) at 0", "Insert MarkerAnnotation(214) into MethodDeclaration(221) at 1", "Insert Modifier: public(215) into MethodDeclaration(221) at 2", "Insert PrimitiveType: boolean(216) into MethodDeclaration(221) at 3", "Insert SimpleName: isEmptyMap(217) into MethodDeclaration(221) at 4", "Insert Block(220) into MethodDeclaration(221) at 5", "Insert TagElement(211) into Javadoc(212) at 0", "Insert SimpleName: Override(213) into MarkerAnnotation(214) at 0", "Insert ReturnStatement(219) into Block(220) at 0", "Insert TextElement: This implementation returns (204) into TagElement(211) at 0", "Insert TagElement: @code(206) into TagElement(211) at 1", "Insert TextElement: .(207) into TagElement(211) at 2", "Insert TextElement: <p>  (208) into TagElement(211) at 3", "Insert TextElement: Must be overridden by map writers.(209) into TagElement(211) at 4", "Insert TextElement: </p>  (210) into TagElement(211) at 5", "Insert BooleanLiteral: false(218) into ReturnStatement(219) at 0", "Insert TextElement:  false(205) into TagElement: @code(206) at 0"]}}, {"BaseWriter_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: interface", "operations": ["MOV Initializer to TypeDeclaration: interface at 20", "MOV FieldDeclaration to TypeDeclaration: interface at 19", "MOV FieldDeclaration to TypeDeclaration: interface at 10"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 4", "operations": ["INS TagElement to Javadoc at 0", "INS SimpleName: isEmptyMap to MethodDeclaration at 2", "INS TextElement: Whether this writer is a map writer and is empty (has no children). to TagElement at 0", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS TextElement: Intended only for use in determining whether to add dummy vector to to TagElement at 2", "INS TextElement: avoid empty (zero-column) schema, as in JsonReader. to TagElement at 3", "INS TextElement: <p> to TagElement at 1", "INS TextElement: </p> to TagElement at 4", "INS MethodDeclaration to TypeDeclaration: interface at 4", "INS Javadoc to MethodDeclaration at 0"]}]}}, {"BaseWriter_diff": {"operations": ["Move FieldDeclaration(69) into TypeDeclaration: interface(162) at 10", "Move Initializer(106) into TypeDeclaration: interface(162) at 20", "Move FieldDeclaration(111) into TypeDeclaration: interface(162) at 19", "Insert MethodDeclaration(54) into TypeDeclaration: interface(162) at 4", "Insert Javadoc(51) into MethodDeclaration(54) at 0", "Insert PrimitiveType: boolean(52) into MethodDeclaration(54) at 1", "Insert SimpleName: isEmptyMap(53) into MethodDeclaration(54) at 2", "Insert TagElement(50) into Javadoc(51) at 0", "Insert TextElement: Whether this writer is a map writer and is empty (has no children).(45) into TagElement(50) at 0", "Insert TextElement: <p>(46) into TagElement(50) at 1", "Insert TextElement: Intended only for use in determining whether to add dummy vector to(47) into TagElement(50) at 2", "Insert TextElement: avoid empty (zero-column) schema, as in JsonReader.(48) into TagElement(50) at 3", "Insert TextElement: </p>(49) into TagElement(50) at 4"]}}, {"MapWriters_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 50", "MOV Initializer to TypeDeclaration: class at 57", "MOV Initializer to TypeDeclaration: class at 44", "MOV FieldDeclaration to TypeDeclaration: class at 56", "MOV FieldDeclaration to TypeDeclaration: class at 34", "MOV FieldDeclaration to TypeDeclaration: class at 38", "MOV FieldDeclaration to TypeDeclaration: class at 54", "MOV FieldDeclaration to TypeDeclaration: class at 44"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS InfixExpression: == to ReturnStatement at 0", "INS SimpleName: size to MethodInvocation at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: isEmptyMap to MethodDeclaration at 3", "INS Block to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodInvocation to InfixExpression: == at 1", "INS NumberLiteral: 0 to InfixExpression: == at 0", "INS Modifier: public to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: container to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 16"]}]}}, {"MapWriters_diff": {"operations": ["Move FieldDeclaration(390) into TypeDeclaration: class(513) at 34", "Move FieldDeclaration(410) into TypeDeclaration: class(513) at 38", "Move Initializer(449) into TypeDeclaration: class(513) at 57", "Move FieldDeclaration(454) into TypeDeclaration: class(513) at 44", "Move Initializer(471) into TypeDeclaration: class(513) at 44", "Move FieldDeclaration(479) into TypeDeclaration: class(513) at 50", "Move FieldDeclaration(490) into TypeDeclaration: class(513) at 54", "Move FieldDeclaration(497) into TypeDeclaration: class(513) at 56", "Insert MethodDeclaration(117) into TypeDeclaration: class(513) at 16", "Insert MarkerAnnotation(106) into MethodDeclaration(117) at 0", "Insert Modifier: public(107) into MethodDeclaration(117) at 1", "Insert PrimitiveType: boolean(108) into MethodDeclaration(117) at 2", "Insert SimpleName: isEmptyMap(109) into MethodDeclaration(117) at 3", "Insert Block(116) into MethodDeclaration(117) at 4", "Insert SimpleName: Override(105) into MarkerAnnotation(106) at 0", "Insert ReturnStatement(115) into Block(116) at 0", "Insert InfixExpression: ==(114) into ReturnStatement(115) at 0", "Insert NumberLiteral: 0(110) into InfixExpression: ==(114) at 0", "Insert MethodInvocation(113) into InfixExpression: ==(114) at 1", "Insert SimpleName: container(111) into MethodInvocation(113) at 0", "Insert SimpleName: size(112) into MethodInvocation(113) at 1"]}}, {"FieldReference_cluster": {"actions": [{"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS StringLiteral: \" must not have the form of a qualified name (i.e., with \\\".\\\").\" to InfixExpression: + at 1", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: value to MethodInvocation at 3", "INS SimpleName: String to MethodInvocation at 0", "INS SimpleName: format to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \"Unhandled field reference \\\"%s\\\"; a field reference identifier\" to InfixExpression: + at 0"]}, {"root": "DEL StringLiteral: \"Field references must be singular names.\"", "operations": ["DEL StringLiteral: \"Field references must be singular names.\""]}]}}, {"FieldReference_diff": {"operations": ["Insert MethodInvocation(122) into ClassInstanceCreation(123) at 1", "Insert SimpleName: String(116) into MethodInvocation(122) at 0", "Insert SimpleName: format(117) into MethodInvocation(122) at 1", "Insert InfixExpression: +(120) into MethodInvocation(122) at 2", "Insert SimpleName: value(121) into MethodInvocation(122) at 3", "Insert StringLiteral: \"Unhandled field reference \\\"%s\\\"; a field reference identifier\"(118) into InfixExpression: +(120) at 0", "Insert StringLiteral: \" must not have the form of a qualified name (i.e., with \\\".\\\").\"(119) into InfixExpression: +(120) at 1", "Delete StringLiteral: \"Field references must be singular names.\"(116)"]}}, {"AbstractRecordBatch_cluster": {"actions": [{"root": "INS Javadoc to EnumConstantDeclaration at 0", "operations": ["INS TextElement: Need to build schema and return.  to TagElement at 0", "INS Javadoc to EnumConstantDeclaration at 0", "INS TagElement to Javadoc at 0"]}, {"root": "INS Javadoc to EnumConstantDeclaration at 0", "operations": ["INS TextElement: This is still the first data batch.  to TagElement at 0", "INS Javadoc to EnumConstantDeclaration at 0", "INS TagElement to Javadoc at 0"]}, {"root": "INS Javadoc to EnumConstantDeclaration at 0", "operations": ["INS TextElement: The first data batch has already been returned.  to TagElement at 0", "INS TagElement to Javadoc at 0", "INS Javadoc to EnumConstantDeclaration at 0"]}, {"root": "INS Javadoc to EnumConstantDeclaration at 0", "operations": ["INS Javadoc to EnumConstantDeclaration at 0", "INS TagElement to Javadoc at 0", "INS TextElement: The query most likely failed, we need to propagate STOP to the root.  to TagElement at 0"]}, {"root": "INS Javadoc to EnumConstantDeclaration at 0", "operations": ["INS Javadoc to EnumConstantDeclaration at 0", "INS TagElement to Javadoc at 0", "INS TextElement: Out of Memory while building the Schema...Ouch!  to TagElement at 0"]}, {"root": "INS Javadoc to EnumConstantDeclaration at 0", "operations": ["INS TagElement to Javadoc at 0", "INS Javadoc to EnumConstantDeclaration at 0", "INS TextElement: All work is done, no more data to be sent.  to TagElement at 0"]}]}}, {"AbstractRecordBatch_diff": {"operations": ["Insert Javadoc(274) into EnumConstantDeclaration(276) at 0", "Insert Javadoc(279) into EnumConstantDeclaration(281) at 0", "Insert Javadoc(284) into EnumConstantDeclaration(286) at 0", "Insert Javadoc(289) into EnumConstantDeclaration(291) at 0", "Insert Javadoc(294) into EnumConstantDeclaration(296) at 0", "Insert Javadoc(299) into EnumConstantDeclaration(301) at 0", "Insert TagElement(273) into Javadoc(274) at 0", "Insert TagElement(278) into Javadoc(279) at 0", "Insert TagElement(283) into Javadoc(284) at 0", "Insert TagElement(288) into Javadoc(289) at 0", "Insert TagElement(293) into Javadoc(294) at 0", "Insert TagElement(298) into Javadoc(299) at 0", "Insert TextElement: Need to build schema and return. (272) into TagElement(273) at 0", "Insert TextElement: This is still the first data batch. (277) into TagElement(278) at 0", "Insert TextElement: The first data batch has already been returned. (282) into TagElement(283) at 0", "Insert TextElement: The query most likely failed, we need to propagate STOP to the root. (287) into TagElement(288) at 0", "Insert TextElement: Out of Memory while building the Schema...Ouch! (292) into TagElement(293) at 0", "Insert TextElement: All work is done, no more data to be sent. (297) into TagElement(298) at 0"]}}, {"AbstractSingleRecordBatch_cluster": {"actions": [{"root": "UPDATE from getSchemaChange to getSchemaChangedAndReset", "operations": ["UPD SimpleName: getSchemaChange from getSchemaChange to getSchemaChangedAndReset"]}]}}, {"AbstractSingleRecordBatch_diff": {"operations": ["Update SimpleName: getSchemaChange(319) to getSchemaChangedAndReset"]}}, {"RecordBatch_cluster": {"actions": [{"root": "INS Javadoc to FieldDeclaration at 0", "operations": ["INS TextElement: max batch size, limited by 2-byte length in SV2: 65536 = 2^16  to TagElement at 0", "INS Javadoc to FieldDeclaration at 0", "INS TagElement to Javadoc at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "UPDATE from A record batch contains a set of field values for a particular range of records. In the case of a record batch to A record batch contains a set of field values for a particular range of", "operations": ["UPD TextElement: A record batch contains a set of field values for a particular range of records. In the case of a record batch from A record batch contains a set of field values for a particular range of records. In the case of a record batch to A record batch contains a set of field values for a particular range of"]}, {"root": "INS TextElement: records. to TagElement at 1", "operations": ["INS TextElement: records. to TagElement at 1"]}, {"root": "INS TextElement: <p> to TagElement at 2", "operations": ["INS TextElement: <p> to TagElement at 2"]}, {"root": "INS TextElement: In the case of a record batch composed of ValueVectors, ideally a batch to TagElement at 3", "operations": ["INS TextElement: In the case of a record batch composed of ValueVectors, ideally a batch to TagElement at 3"]}, {"root": "UPDATE from composed of ValueVectors, ideally a batch fits within L2 cache (~256k per core). The set of value vectors do not to fits within L2 cache (~256kB per core).  The set of value vectors does", "operations": ["UPD TextElement: composed of ValueVectors, ideally a batch fits within L2 cache (~256k per core). The set of value vectors do not from composed of ValueVectors, ideally a batch fits within L2 cache (~256k per core). The set of value vectors do not to fits within L2 cache (~256kB per core).  The set of value vectors does"]}, {"root": "UPDATE from change unless the next() IterOutcome is a *_NEW_SCHEMA type. to not change except during a call to ", "operations": ["UPD TextElement: change unless the next() IterOutcome is a *_NEW_SCHEMA type. from change unless the next() IterOutcome is a *_NEW_SCHEMA type. to not change except during a call to "]}, {"root": "INS TagElement: @link to TagElement at 6", "operations": ["INS MethodRef to TagElement: @link at 0", "INS TagElement: @link to TagElement at 6", "INS SimpleName: next to MethodRef at 0"]}, {"root": "INS TextElement:  that returns to TagElement at 7", "operations": ["INS TextElement:  that returns to TagElement at 7"]}, {"root": "INS TagElement: @link to TagElement at 8", "operations": ["INS TagElement: @link to TagElement at 8", "INS SimpleName: IterOutcome to MemberRef at 0", "INS SimpleName: OK_NEW_SCHEMA to MemberRef at 1", "INS MemberRef to TagElement: @link at 0"]}, {"root": "INS TextElement:  value. to TagElement at 9", "operations": ["INS TextElement:  value. to TagElement at 9"]}, {"root": "INS TextElement: </p> to TagElement at 10", "operations": ["INS TextElement: </p> to TagElement at 10"]}, {"root": "INS TextElement: <p> to TagElement at 11", "operations": ["INS TextElement: <p> to TagElement at 11"]}, {"root": "UPDATE from A key thing to know is that the Iterator provided by record batch must align with the rank positions of the field ids to A key thing to know is that the Iterator provided by a record batch must", "operations": ["UPD TextElement: A key thing to know is that the Iterator provided by record batch must align with the rank positions of the field ids from A key thing to know is that the Iterator provided by record batch must align with the rank positions of the field ids to A key thing to know is that the Iterator provided by a record batch must"]}, {"root": "UPDATE from provided utilizing getValueVectorId(); to align with the rank positions of the field IDs provided using", "operations": ["UPD TextElement: provided utilizing getValueVectorId(); from provided utilizing getValueVectorId(); to align with the rank positions of the field IDs provided using"]}, {"root": "INS TagElement: @link to TagElement at 14", "operations": ["INS SimpleName: getValueVectorId to TagElement: @link at 0", "INS TagElement: @link to TagElement at 14"]}, {"root": "INS TextElement: . to TagElement at 15", "operations": ["INS TextElement: . to TagElement at 15"]}, {"root": "INS TextElement: </p> to TagElement at 16", "operations": ["INS TextElement: </p> to TagElement at 16"]}, {"root": "INS Javadoc to EnumConstantDeclaration at 0", "operations": ["INS TextElement:  next() to TagElement: @code at 0", "INS TextElement: The call to  to TagElement at 2", "INS TextElement: This value will be returned only after  to TagElement at 11", "INS SimpleName: next to MethodRef at 0", "INS SimpleName: OK_NEW_SCHEMA to MemberRef at 0", "INS Javadoc to EnumConstantDeclaration at 0", "INS TagElement: @link to TagElement at 12", "INS MethodRef to TagElement: @link at 0", "INS TextElement: </p> to TagElement at 9", "INS TextElement: <p> to TagElement at 10", "INS TextElement:  must not be called again. to TagElement at 8", "INS TextElement: read no records, to TagElement at 4", "INS TextElement: </p> to TagElement at 15", "INS TextElement: returned at least once (not necessarily <em>immediately</em> after). to TagElement at 14", "INS TextElement: <p> to TagElement at 1", "INS TextElement:  has been to TagElement at 13", "INS TagElement to Javadoc at 0", "INS TextElement: the batch has and will have no more results to return, to TagElement at 5", "INS TextElement: Normal completion of batch. to TagElement at 0", "INS TagElement: @code to TagElement at 7", "INS TagElement: @link to TagElement at 3", "INS TextElement: and  to TagElement at 6", "INS MemberRef to TagElement: @link at 0"]}, {"root": "INS Javadoc to EnumConstantDeclaration at 0", "operations": ["INS TextElement: The call to  to TagElement at 2", "INS TextElement: returned at least once (not necessarily <em>immediately</em> after). to TagElement at 22", "INS Javadoc to EnumConstantDeclaration at 0", "INS TextElement:  or  to TagElement at 11", "INS TextElement: <p> to TagElement at 1", "INS TagElement to Javadoc at 0", "INS MethodRef to TagElement: @link at 0", "INS TagElement: @link to TagElement at 20", "INS TextElement:  has been to TagElement at 21", "INS TextElement: ( to TagElement at 14", "INS TextElement: the schema has not changed since the last time  to TagElement at 5", "INS TextElement:  should be called again.) to TagElement at 16", "INS TextElement: </p> to TagElement at 17", "INS TagElement: @code to TagElement at 6", "INS TagElement: @code to TagElement at 15", "INS SimpleName: OK_NEW_SCHEMA to MemberRef at 0", "INS TextElement:  STOP to TagElement: @code at 0", "INS TagElement: @code to TagElement at 12", "INS TextElement: )). to TagElement at 13", "INS TextElement:  NONE to TagElement: @code at 0", "INS TextElement: <p> to TagElement at 18", "INS TagElement: @code to TagElement at 10", "INS TextElement: </p> to TagElement at 23", "INS MemberRef to TagElement: @link at 0", "INS SimpleName: next to MethodRef at 0", "INS TagElement: @link to TagElement at 3", "INS TextElement: Zero or more records with same schema. to TagElement at 0", "INS TextElement: This will be returned only after  to TagElement at 19", "INS TextElement: read zero or more records, to TagElement at 4", "INS TextElement:  next() to TagElement: @code at 0", "INS TextElement:  OK_NEW_SCHEMA to TagElement: @code at 0", "INS TextElement: was returned, to TagElement at 7", "INS TextElement: and the batch will have more results to return (at least completion or to TagElement at 8", "INS TextElement: abnormal termination ( to TagElement at 9"]}, {"root": "INS Javadoc to EnumConstantDeclaration at 0", "operations": ["INS TextElement: New schema, maybe with records. to TagElement at 0", "INS Javadoc to EnumConstantDeclaration at 0", "INS TextElement:  should be called again.) to TagElement at 14", "INS TagElement: @code to TagElement at 13", "INS TextElement: </p> to TagElement at 15", "INS TextElement: )). to TagElement at 11", "INS TagElement: @link to TagElement at 3", "INS MethodRef to TagElement: @link at 0", "INS TextElement: and the batch will have more results to return (at least completion or to TagElement at 6", "INS TextElement:  or  to TagElement at 9", "INS TagElement: @code to TagElement at 10", "INS SimpleName: next to MethodRef at 0", "INS TagElement to Javadoc at 0", "INS TextElement:  NONE to TagElement: @code at 0", "INS TextElement: changed the schema and vector structures to TagElement at 4", "INS TextElement: ( to TagElement at 12", "INS TextElement: <p> to TagElement at 1", "INS TextElement: The call to  to TagElement at 2", "INS TextElement: and read zero or more records, to TagElement at 5", "INS TextElement:  next() to TagElement: @code at 0", "INS TextElement:  STOP to TagElement: @code at 0", "INS TextElement: abnormal termination ( to TagElement at 7", "INS TagElement: @code to TagElement at 8"]}, {"root": "INS Javadoc to EnumConstantDeclaration at 0", "operations": ["INS TextElement: data-access methods nor call  to TagElement at 6", "INS TextElement: </p> to TagElement at 9", "INS TextElement: <p> to TagElement at 10", "INS TextElement: </p> to TagElement at 13", "INS TextElement: of things. to TagElement at 12", "INS MethodRef to TagElement: @link at 0", "INS Javadoc to EnumConstantDeclaration at 0", "INS TextElement:  again. to TagElement at 8", "INS TextElement: The caller can consume its QueryContext to understand the current state to TagElement at 11", "INS TagElement to Javadoc at 0", "INS TextElement: Non-completion (abnormal) termination. to TagElement at 0", "INS TextElement:  next() to TagElement: @code at 0", "INS SimpleName: next to MethodRef at 0", "INS TextElement: The call to  to TagElement at 2", "INS TextElement: reports that the query has terminated other than by normal completion, to TagElement at 4", "INS TagElement: @code to TagElement at 7", "INS TextElement: and that the caller must not call any of the schema-access or to TagElement at 5", "INS TextElement: <p> to TagElement at 1", "INS TagElement: @link to TagElement at 3"]}, {"root": "INS Javadoc to EnumConstantDeclaration at 0", "operations": ["INS TagElement: @code to TagElement at 15", "INS TagElement: @code to TagElement at 9", "INS TagElement to Javadoc at 0", "INS TextElement:  or  to TagElement at 8", "INS TextElement:  NONE to TagElement: @code at 0", "INS TextElement: <p> to TagElement at 1", "INS TextElement:  again, but should do so later to TagElement at 13", "INS TextElement: No data yet. to TagElement at 0", "INS TextElement: waiting for incoming data from the callee, for example, doing partial to TagElement at 20", "INS TextElement:  next() to TagElement: @code at 0", "INS MethodRef to TagElement: @link at 0", "INS SimpleName: next to MethodRef at 0", "INS TextElement: sort. to TagElement at 22", "INS TextElement: completion or abnormal termination ( to TagElement at 6", "INS TextElement: The call to  to TagElement at 2", "INS TagElement: @code to TagElement at 7", "INS TagElement: @link to TagElement at 3", "INS TextElement: Used by batches that haven't received incoming data yet. to TagElement at 25", "INS TextElement:  NOT_YET to TagElement: @code at 0", "INS TextElement: The caller should call  to TagElement at 11", "INS TextElement:  STOP to TagElement: @code at 0", "INS TextElement: )). to TagElement at 10", "INS Javadoc to EnumConstantDeclaration at 0", "INS TextElement: <p> to TagElement at 24", "INS TextElement: and the batch will have more results to return in the future (at least to TagElement at 5", "INS TextElement: Normally, the caller should perform any locally available work while to TagElement at 19", "INS TextElement:  to its caller). to TagElement at 16", "INS TextElement: read no data, to TagElement at 4", "INS TextElement: </p> to TagElement at 26", "INS TagElement: @code to TagElement at 12", "INS TextElement: (including by returning  to TagElement at 14", "INS TextElement: </p> to TagElement at 23", "INS TextElement: sorts on already received data while waiting for additional data to to TagElement at 21", "INS TextElement: <p> to TagElement at 18", "INS TextElement: </p> to TagElement at 17"]}, {"root": "INS Javadoc to EnumConstantDeclaration at 0", "operations": ["INS TextElement: <p> to TagElement at 1", "INS TextElement:  STOP to TagElement: @code at 0", "INS TagElement to Javadoc at 0", "INS TextElement: </p> to TagElement at 18", "INS TagElement: @link to TagElement at 3", "INS MethodRef to TagElement: @link at 0", "INS TextElement: , to TagElement at 4", "INS TagElement: @code to TagElement at 11", "INS TextElement:  NONE to TagElement: @code at 0", "INS TextElement:  OUT_OF_MEMORY to TagElement: @code at 0", "INS TextElement:  to its caller) and call  to TagElement at 15", "INS SimpleName: next to MethodRef at 0", "INS TextElement: The caller should release memory if it can (including by returning to TagElement at 13", "INS TagElement: @code to TagElement at 16", "INS TextElement:  again. to TagElement at 17", "INS TagElement: @code to TagElement at 9", "INS TextElement:  next() to TagElement: @code at 0", "INS TagElement: @code to TagElement at 14", "INS TextElement: and the batch will have more results to return (at least completion or to TagElement at 7", "INS Javadoc to EnumConstantDeclaration at 0", "INS TextElement: The call to  to TagElement at 2", "INS TextElement: Out of memory (not fatal). to TagElement at 0", "INS TextElement:  or  to TagElement at 10", "INS TextElement: )). to TagElement at 12", "INS TextElement: including upstream operators, was unable to allocate memory to TagElement at 5", "INS TextElement: and did not read any records, to TagElement at 6", "INS TextElement: abnormal termination ( to TagElement at 8"]}, {"root": "INS TagElement to Javadoc at 0", "operations": ["INS TextElement:  returns to TagElement at 14", "INS MemberRef to TagElement: @link at 0", "INS MemberRef to TagElement: @link at 0", "INS TextElement: . to TagElement at 16", "INS TextElement: May be called only when the most recent call to  to TagElement at 2", "INS TextElement: </p> to TagElement at 10", "INS TextElement:  or  to TagElement at 7", "INS TagElement: @link to TagElement at 13", "INS SimpleName: next to MemberRef at 0", "INS TextElement: <p> to TagElement at 1", "INS TextElement: . to TagElement at 9", "INS TextElement: </p> to TagElement at 17", "INS SimpleName: next to MemberRef at 0", "INS TextElement: <p> to TagElement at 11", "INS MemberRef to TagElement: @link at 0", "INS MemberRef to TagElement: @link at 0", "INS MemberRef to TagElement: @link at 0", "INS TextElement: The schema changes when and only when  to TagElement at 12", "INS SimpleName: OK to MemberRef at 0", "INS TagElement: @link to TagElement at 15", "INS TextElement: , if any, to TagElement at 4", "INS TextElement: returned  to TagElement at 5", "INS TagElement: @link to TagElement at 3", "INS SimpleName: OK_NEW_SCHEMA to MemberRef at 0", "INS TagElement to Javadoc at 0", "INS TagElement: @link to TagElement at 8", "INS SimpleName: OK_NEW_SCHEMA to MemberRef at 0", "INS TagElement: @link to TagElement at 6"]}, {"root": "UPDATE from Describes the outcome of a RecordBatch being incremented forward. to Describes the outcome of incrementing RecordBatch forward by a call to", "operations": ["UPD TextElement: Describes the outcome of a RecordBatch being incremented forward. from Describes the outcome of a RecordBatch being incremented forward. to Describes the outcome of incrementing RecordBatch forward by a call to"]}, {"root": "INS TagElement: @link to TagElement at 1", "operations": ["INS SimpleName: next to MethodRef at 0", "INS TagElement: @link to TagElement at 1", "INS MethodRef to TagElement: @link at 0"]}, {"root": "INS TextElement: . to TagElement at 2", "operations": ["INS TextElement: . to TagElement at 2"]}, {"root": "INS TextElement: <p> to TagElement at 3", "operations": ["INS TextElement: <p> to TagElement at 3"]}, {"root": "INS TextElement: Key characteristics of the return value sequence: to TagElement at 4", "operations": ["INS TextElement: Key characteristics of the return value sequence: to TagElement at 4"]}, {"root": "INS TextElement: </p> to TagElement at 5", "operations": ["INS TextElement: </p> to TagElement at 5"]}, {"root": "INS TextElement: <ul> to TagElement at 6", "operations": ["INS TextElement: <ul> to TagElement at 6"]}, {"root": "INS TextElement: <li> to TagElement at 7", "operations": ["INS TextElement: <li> to TagElement at 7"]}, {"root": "INS TagElement: @code to TagElement at 8", "operations": ["INS TextElement:  OK_NEW_SCHEMA to TagElement: @code at 0", "INS TagElement: @code to TagElement at 8"]}, {"root": "INS TextElement:  always appears unless  to TagElement at 9", "operations": ["INS TextElement:  always appears unless  to TagElement at 9"]}, {"root": "INS TagElement: @code to TagElement at 10", "operations": ["INS TextElement:  STOP to TagElement: @code at 0", "INS TagElement: @code to TagElement at 10"]}, {"root": "INS TextElement:  appears.  (A to TagElement at 11", "operations": ["INS TextElement:  appears.  (A to TagElement at 11"]}, {"root": "INS TextElement: batch returns  to TagElement at 12", "operations": ["INS TextElement: batch returns  to TagElement at 12"]}, {"root": "INS TagElement: @code to TagElement at 13", "operations": ["INS TagElement: @code to TagElement at 13", "INS TextElement:  OK_NEW_SCHEMA to TagElement: @code at 0"]}, {"root": "INS TextElement:  before returning  to TagElement at 14", "operations": ["INS TextElement:  before returning  to TagElement at 14"]}, {"root": "INS TagElement: @code to TagElement at 15", "operations": ["INS TagElement: @code to TagElement at 15", "INS TextElement:  NONE to TagElement: @code at 0"]}, {"root": "INS TextElement:  even to TagElement at 16", "operations": ["INS TextElement:  even to TagElement at 16"]}, {"root": "INS TextElement: if the batch has zero rows.) to TagElement at 17", "operations": ["INS TextElement: if the batch has zero rows.) to TagElement at 17"]}, {"root": "INS TextElement: </li> to TagElement at 18", "operations": ["INS TextElement: </li> to TagElement at 18"]}, {"root": "INS TextElement: <li> to TagElement at 19", "operations": ["INS TextElement: <li> to TagElement at 19"]}, {"root": "INS TagElement: @code to TagElement at 20", "operations": ["INS TagElement: @code to TagElement at 20", "INS TextElement:  OK_NEW_SCHEMA to TagElement: @code at 0"]}, {"root": "INS TextElement:  always appears before  to TagElement at 21", "operations": ["INS TextElement:  always appears before  to TagElement at 21"]}, {"root": "INS TagElement: @code to TagElement at 22", "operations": ["INS TextElement:  OK to TagElement: @code at 0", "INS TagElement: @code to TagElement at 22"]}, {"root": "INS TextElement:  appears.</li> to TagElement at 23", "operations": ["INS TextElement:  appears.</li> to TagElement at 23"]}, {"root": "INS TextElement: <li> to TagElement at 24", "operations": ["INS TextElement: <li> to TagElement at 24"]}, {"root": "INS TextElement: The last value is always  to TagElement at 25", "operations": ["INS TextElement: The last value is always  to TagElement at 25"]}, {"root": "INS TagElement: @code to TagElement at 26", "operations": ["INS TagElement: @code to TagElement at 26", "INS TextElement:  NONE to TagElement: @code at 0"]}, {"root": "INS TextElement:  or  to TagElement at 27", "operations": ["INS TextElement:  or  to TagElement at 27"]}, {"root": "INS TagElement: @code to TagElement at 28", "operations": ["INS TextElement:  STOP to TagElement: @code at 0", "INS TagElement: @code to TagElement at 28"]}, {"root": "INS TextElement: , and  to TagElement at 29", "operations": ["INS TextElement: , and  to TagElement at 29"]}, {"root": "INS TagElement: @code to TagElement at 30", "operations": ["INS TagElement: @code to TagElement at 30", "INS TextElement:  NONE to TagElement: @code at 0"]}, {"root": "INS TextElement: and  to TagElement at 31", "operations": ["INS TextElement: and  to TagElement at 31"]}, {"root": "INS TagElement: @code to TagElement at 32", "operations": ["INS TagElement: @code to TagElement at 32", "INS TextElement:  STOP to TagElement: @code at 0"]}, {"root": "INS TextElement:  appear only as the last value. to TagElement at 33", "operations": ["INS TextElement:  appear only as the last value. to TagElement at 33"]}, {"root": "INS TextElement: </li> to TagElement at 34", "operations": ["INS TextElement: </li> to TagElement at 34"]}, {"root": "INS TextElement: </ul> to TagElement at 35", "operations": ["INS TextElement: </ul> to TagElement at 35"]}, {"root": "INS TextElement: <p> to TagElement at 36", "operations": ["INS TextElement: <p> to TagElement at 36"]}, {"root": "INS TextElement: <strong>Details</strong>: to TagElement at 37", "operations": ["INS TextElement: <strong>Details</strong>: to TagElement at 37"]}, {"root": "INS TextElement: </p> to TagElement at 38", "operations": ["INS TextElement: </p> to TagElement at 38"]}, {"root": "INS TextElement: <p> to TagElement at 39", "operations": ["INS TextElement: <p> to TagElement at 39"]}, {"root": "INS TextElement: For normal completion, the basic sequence of return values from calls to to TagElement at 40", "operations": ["INS TextElement: For normal completion, the basic sequence of return values from calls to to TagElement at 40"]}, {"root": "INS TagElement: @code to TagElement at 41", "operations": ["INS TagElement: @code to TagElement at 41", "INS TextElement:  next() to TagElement: @code at 0"]}, {"root": "INS TextElement:  on a  to TagElement at 42", "operations": ["INS TextElement:  on a  to TagElement at 42"]}, {"root": "INS TagElement: @code to TagElement at 43", "operations": ["INS TagElement: @code to TagElement at 43", "INS TextElement:  RecordBatch to TagElement: @code at 0"]}, {"root": "INS TextElement:  is: to TagElement at 44", "operations": ["INS TextElement:  is: to TagElement at 44"]}, {"root": "INS TextElement: </p> to TagElement at 45", "operations": ["INS TextElement: </p> to TagElement at 45"]}, {"root": "INS TextElement: <ol> to TagElement at 46", "operations": ["INS TextElement: <ol> to TagElement at 46"]}, {"root": "INS TextElement: <li> to TagElement at 47", "operations": ["INS TextElement: <li> to TagElement at 47"]}, {"root": "INS TextElement: an  to TagElement at 48", "operations": ["INS TextElement: an  to TagElement at 48"]}, {"root": "INS TagElement: @link to TagElement at 49", "operations": ["INS MemberRef to TagElement: @link at 0", "INS TagElement: @link to TagElement at 49", "INS SimpleName: OK_NEW_SCHEMA to MemberRef at 0"]}, {"root": "INS TextElement:  value followed by zero or more  to TagElement at 50", "operations": ["INS TextElement:  value followed by zero or more  to TagElement at 50"]}, {"root": "INS TagElement: @link to TagElement at 51", "operations": ["INS MemberRef to TagElement: @link at 0", "INS SimpleName: OK to MemberRef at 0", "INS TagElement: @link to TagElement at 51"]}, {"root": "INS TextElement: values, to TagElement at 52", "operations": ["INS TextElement: values, to TagElement at 52"]}, {"root": "INS TextElement: </li> to TagElement at 53", "operations": ["INS TextElement: </li> to TagElement at 53"]}, {"root": "INS TextElement: <li> to TagElement at 54", "operations": ["INS TextElement: <li> to TagElement at 54"]}, {"root": "INS TextElement: zero or more subsequences each having an  to TagElement at 55", "operations": ["INS TextElement: zero or more subsequences each having an  to TagElement at 55"]}, {"root": "INS TagElement: @code to TagElement at 56", "operations": ["INS TextElement:  OK_NEW_SCHEMA to TagElement: @code at 0", "INS TagElement: @code to TagElement at 56"]}, {"root": "INS TextElement:  value to TagElement at 57", "operations": ["INS TextElement:  value to TagElement at 57"]}, {"root": "INS TextElement: followed by zero or more  to TagElement at 58", "operations": ["INS TextElement: followed by zero or more  to TagElement at 58"]}, {"root": "INS TagElement: @code to TagElement at 59", "operations": ["INS TagElement: @code to TagElement at 59", "INS TextElement:  OK to TagElement: @code at 0"]}, {"root": "INS TextElement:  values, and then to TagElement at 60", "operations": ["INS TextElement:  values, and then to TagElement at 60"]}, {"root": "INS TextElement: </li> to TagElement at 61", "operations": ["INS TextElement: </li> to TagElement at 61"]}, {"root": "INS TextElement: <li> to TagElement at 62", "operations": ["INS TextElement: <li> to TagElement at 62"]}, {"root": "INS TextElement: a  to TagElement at 63", "operations": ["INS TextElement: a  to TagElement at 63"]}, {"root": "INS TagElement: @link to TagElement at 64", "operations": ["INS MemberRef to TagElement: @link at 0", "INS SimpleName: NONE to MemberRef at 0", "INS TagElement: @link to TagElement at 64"]}, {"root": "INS TextElement:  value. to TagElement at 65", "operations": ["INS TextElement:  value. to TagElement at 65"]}, {"root": "INS TextElement: </li> to TagElement at 66", "operations": ["INS TextElement: </li> to TagElement at 66"]}, {"root": "INS TextElement: </ol> to TagElement at 67", "operations": ["INS TextElement: </ol> to TagElement at 67"]}, {"root": "INS TextElement: <p> to TagElement at 68", "operations": ["INS TextElement: <p> to TagElement at 68"]}, {"root": "INS TextElement: In addition to that basic sequence,  to TagElement at 69", "operations": ["INS TextElement: In addition to that basic sequence,  to TagElement at 69"]}, {"root": "INS TagElement: @link to TagElement at 70", "operations": ["INS SimpleName: NOT_YET to MemberRef at 0", "INS MemberRef to TagElement: @link at 0", "INS TagElement: @link to TagElement at 70"]}, {"root": "INS TextElement:  and to TagElement at 71", "operations": ["INS TextElement:  and to TagElement at 71"]}, {"root": "INS TagElement: @link to TagElement at 72", "operations": ["INS TagElement: @link to TagElement at 72", "INS MemberRef to TagElement: @link at 0", "INS SimpleName: OUT_OF_MEMORY to MemberRef at 0"]}, {"root": "INS TextElement:  values can appear anywhere in the subsequence to TagElement at 73", "operations": ["INS TextElement:  values can appear anywhere in the subsequence to TagElement at 73"]}, {"root": "INS TextElement: before the terminal value ( to TagElement at 74", "operations": ["INS TextElement: before the terminal value ( to TagElement at 74"]}, {"root": "INS TagElement: @code to TagElement at 75", "operations": ["INS TextElement:  NONE to TagElement: @code at 0", "INS TagElement: @code to TagElement at 75"]}, {"root": "INS TextElement:  or  to TagElement at 76", "operations": ["INS TextElement:  or  to TagElement at 76"]}, {"root": "INS TagElement: @code to TagElement at 77", "operations": ["INS TagElement: @code to TagElement at 77", "INS TextElement:  STOP to TagElement: @code at 0"]}, {"root": "INS TextElement: ). to TagElement at 78", "operations": ["INS TextElement: ). to TagElement at 78"]}, {"root": "INS TextElement: </p> to TagElement at 79", "operations": ["INS TextElement: </p> to TagElement at 79"]}, {"root": "INS TextElement: <p> to TagElement at 80", "operations": ["INS TextElement: <p> to TagElement at 80"]}, {"root": "INS TextElement: For abnormal termination, the sequence is truncated (before the to TagElement at 81", "operations": ["INS TextElement: For abnormal termination, the sequence is truncated (before the to TagElement at 81"]}, {"root": "INS TagElement: @code to TagElement at 82", "operations": ["INS TagElement: @code to TagElement at 82", "INS TextElement:  NONE to TagElement: @code at 0"]}, {"root": "INS TextElement: ) and ends with  to TagElement at 83", "operations": ["INS TextElement: ) and ends with  to TagElement at 83"]}, {"root": "INS TagElement: @link to TagElement at 84", "operations": ["INS SimpleName: STOP to MemberRef at 0", "INS MemberRef to TagElement: @link at 0", "INS TagElement: @link to TagElement at 84"]}, {"root": "INS TextElement: .  That is, the sequence begins to TagElement at 85", "operations": ["INS TextElement: .  That is, the sequence begins to TagElement at 85"]}, {"root": "INS TextElement: with a subsequence that is some prefix of a normal-completion sequence to TagElement at 86", "operations": ["INS TextElement: with a subsequence that is some prefix of a normal-completion sequence to TagElement at 86"]}, {"root": "INS TextElement: and that does not contain  to TagElement at 87", "operations": ["INS TextElement: and that does not contain  to TagElement at 87"]}, {"root": "INS TagElement: @code to TagElement at 88", "operations": ["INS TagElement: @code to TagElement at 88", "INS TextElement:  NONE to TagElement: @code at 0"]}, {"root": "INS TextElement: , and ends with  to TagElement at 89", "operations": ["INS TextElement: , and ends with  to TagElement at 89"]}, {"root": "INS TagElement: @code to TagElement at 90", "operations": ["INS TextElement:  STOP to TagElement: @code at 0", "INS TagElement: @code to TagElement at 90"]}, {"root": "INS TextElement: . to TagElement at 91", "operations": ["INS TextElement: . to TagElement at 91"]}, {"root": "INS TextElement: </p> to TagElement at 92", "operations": ["INS TextElement: </p> to TagElement at 92"]}, {"root": "INS TextElement: <p> to TagElement at 93", "operations": ["INS TextElement: <p> to TagElement at 93"]}, {"root": "INS TextElement: (The normal-completion return sequence is matched by the following to TagElement at 94", "operations": ["INS TextElement: (The normal-completion return sequence is matched by the following to TagElement at 94"]}, {"root": "INS TextElement: regular-expression-style grammar: to TagElement at 95", "operations": ["INS TextElement: regular-expression-style grammar: to TagElement at 95"]}, {"root": "INS TextElement: <pre> to TagElement at 96", "operations": ["INS TextElement: <pre> to TagElement at 96"]}, {"root": "INS TextElement: ( ( NOT_YET | OUT_OF_MEMORY )*  OK_NEW_SCHEMA to TagElement at 97", "operations": ["INS TextElement: ( ( NOT_YET | OUT_OF_MEMORY )*  OK_NEW_SCHEMA to TagElement at 97"]}, {"root": "INS TextElement: ( NOT_YET | OUT_OF_MEMORY )*  OK ) to TagElement at 98", "operations": ["INS TextElement: ( NOT_YET | OUT_OF_MEMORY )*  OK ) to TagElement at 98"]}, {"root": "INS TextElement: )+ to TagElement at 99", "operations": ["INS TextElement: )+ to TagElement at 99"]}, {"root": "INS TextElement: ( NOT_YET | OUT_OF_+MEMORY )*  NONE to TagElement at 100", "operations": ["INS TextElement: ( NOT_YET | OUT_OF_+MEMORY )*  NONE to TagElement at 100"]}, {"root": "INS TextElement: </pre> to TagElement at 101", "operations": ["INS TextElement: </pre> to TagElement at 101"]}, {"root": "INS TextElement: ) to TagElement at 102", "operations": ["INS TextElement: ) to TagElement at 102"]}, {"root": "INS TextElement: </p> to TagElement at 103", "operations": ["INS TextElement: </p> to TagElement at 103"]}, {"root": "UPDATE from Access the FragmentContext of the current query fragment. Useful for reporting failure information or other query to Gets the FragmentContext of the current query fragment.  Useful for", "operations": ["UPD TextElement: Access the FragmentContext of the current query fragment. Useful for reporting failure information or other query from Access the FragmentContext of the current query fragment. Useful for reporting failure information or other query to Gets the FragmentContext of the current query fragment.  Useful for"]}, {"root": "UPDATE from level information. to reporting failure information or other query-level information.", "operations": ["UPD TextElement: level information. from level information. to reporting failure information or other query-level information."]}, {"root": "UPDATE from Provide the schema of the current RecordBatch. This changes if and only if a *_NEW_SCHEMA IterOutcome is provided. to Gets the current schema of this record batch.", "operations": ["UPD TextElement: Provide the schema of the current RecordBatch. This changes if and only if a *_NEW_SCHEMA IterOutcome is provided. from Provide the schema of the current RecordBatch. This changes if and only if a *_NEW_SCHEMA IterOutcome is provided. to Gets the current schema of this record batch."]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement: Provide the schema of the current RecordBatch. This changes if and only if a *_NEW_SCHEMA IterOutcome is provided. to TagElement at 0"]}, {"root": "UPDATE from Provide the number of records that are within this record count to Gets the number of records that are within this record.", "operations": ["UPD TextElement: Provide the number of records that are within this record count from Provide the number of records that are within this record count to Gets the number of records that are within this record."]}, {"root": "UPDATE from Inform child nodes that this query should be terminated. Child nodes should utilize the QueryContext to determine to Informs child nodes that this query should be terminated.  Child nodes", "operations": ["UPD TextElement: Inform child nodes that this query should be terminated. Child nodes should utilize the QueryContext to determine from Inform child nodes that this query should be terminated. Child nodes should utilize the QueryContext to determine to Informs child nodes that this query should be terminated.  Child nodes"]}, {"root": "UPDATE from what has happened. to should use the QueryContext to determine what has happened.", "operations": ["UPD TextElement: what has happened. from what has happened. to should use the QueryContext to determine what has happened."]}, {"root": "UPDATE from Get the value vector type and id for the given schema path. The TypedFieldId should store a fieldId which is the to Gets the value vector type and ID for the given schema path.  The", "operations": ["UPD TextElement: Get the value vector type and id for the given schema path. The TypedFieldId should store a fieldId which is the from Get the value vector type and id for the given schema path. The TypedFieldId should store a fieldId which is the to Gets the value vector type and ID for the given schema path.  The"]}, {"root": "INS TextElement: TypedFieldId should store a fieldId which is the same as the ordinal to TagElement at 1", "operations": ["INS TextElement: TypedFieldId should store a fieldId which is the same as the ordinal to TagElement at 1"]}, {"root": "UPDATE from same as the ordinal position of the field within the Iterator provided this classes implementation of to position of the field within the Iterator provided this class's", "operations": ["UPD TextElement: same as the ordinal position of the field within the Iterator provided this classes implementation of from same as the ordinal position of the field within the Iterator provided this classes implementation of to position of the field within the Iterator provided this class's"]}, {"root": "UPDATE from Iterable<ValueVector>. to implementation of Iterable<ValueVector>.", "operations": ["UPD TextElement: Iterable<ValueVector>. from Iterable<ValueVector>. to implementation of Iterable<ValueVector>."]}, {"root": "UPDATE from Update the data in each Field reading interface for the next range of records. Once a RecordBatch returns an to Updates the data in each Field reading interface for the next range of", "operations": ["UPD TextElement: Update the data in each Field reading interface for the next range of records. Once a RecordBatch returns an from Update the data in each Field reading interface for the next range of records. Once a RecordBatch returns an to Updates the data in each Field reading interface for the next range of"]}, {"root": "INS TextElement: records. to TagElement at 1", "operations": ["INS TextElement: records. to TagElement at 1"]}, {"root": "INS TextElement: <p> to TagElement at 2", "operations": ["INS TextElement: <p> to TagElement at 2"]}, {"root": "INS TextElement: Once a RecordBatch's  to TagElement at 3", "operations": ["INS TextElement: Once a RecordBatch's  to TagElement at 3"]}, {"root": "INS TagElement: @code to TagElement at 4", "operations": ["INS TagElement: @code to TagElement at 4", "INS TextElement:  next() to TagElement: @code at 0"]}, {"root": "INS TextElement:  has returned  to TagElement at 5", "operations": ["INS TextElement:  has returned  to TagElement at 5"]}, {"root": "INS TagElement: @link to TagElement at 6", "operations": ["INS SimpleName: NONE to MemberRef at 1", "INS TagElement: @link to TagElement at 6", "INS MemberRef to TagElement: @link at 0", "INS SimpleName: IterOutcome to MemberRef at 0"]}, {"root": "INS TextElement: or  to TagElement at 7", "operations": ["INS TextElement: or  to TagElement at 7"]}, {"root": "INS TagElement: @link to TagElement at 8", "operations": ["INS TagElement: @link to TagElement at 8", "INS SimpleName: STOP to MemberRef at 1", "INS SimpleName: IterOutcome to MemberRef at 0", "INS MemberRef to TagElement: @link at 0"]}, {"root": "INS TextElement: , the consumer should no longer call to TagElement at 9", "operations": ["INS TextElement: , the consumer should no longer call to TagElement at 9"]}, {"root": "INS TagElement: @code to TagElement at 10", "operations": ["INS TextElement:  next() to TagElement: @code at 0", "INS TagElement: @code to TagElement at 10"]}, {"root": "UPDATE from IterOutcome.NONE, the consumer should no longer next(). Behavior at this point is undetermined and likely to throw to .  Behavior at this point is undefined and likely to", "operations": ["UPD TextElement: IterOutcome.NONE, the consumer should no longer next(). Behavior at this point is undetermined and likely to throw from IterOutcome.NONE, the consumer should no longer next(). Behavior at this point is undetermined and likely to throw to .  Behavior at this point is undefined and likely to"]}, {"root": "UPDATE from an exception. to throw an exception.", "operations": ["UPD TextElement: an exception. from an exception. to throw an exception."]}, {"root": "INS TextElement: </p> to TagElement at 13", "operations": ["INS TextElement: </p> to TagElement at 13"]}, {"root": "INS TextElement: <p> to TagElement at 14", "operations": ["INS TextElement: <p> to TagElement at 14"]}, {"root": "INS TextElement: See  to TagElement at 15", "operations": ["INS TextElement: See  to TagElement at 15"]}, {"root": "INS TagElement: @link to TagElement at 16", "operations": ["INS TagElement: @link to TagElement at 16", "INS SimpleName: IterOutcome to TagElement: @link at 0"]}, {"root": "INS TextElement:  for the protocol (possible sequences of return to TagElement at 17", "operations": ["INS TextElement:  for the protocol (possible sequences of return to TagElement at 17"]}, {"root": "INS TextElement: values). to TagElement at 18", "operations": ["INS TextElement: values). to TagElement at 18"]}, {"root": "INS TextElement: </p> to TagElement at 19", "operations": ["INS TextElement: </p> to TagElement at 19"]}, {"root": "UPDATE from Get a writable version of this batch. Takes over owernship of existing buffers. to Gets a writable version of this batch.  Takes over ownership of existing", "operations": ["UPD TextElement: Get a writable version of this batch. Takes over owernship of existing buffers. from Get a writable version of this batch. Takes over owernship of existing buffers. to Gets a writable version of this batch.  Takes over ownership of existing"]}, {"root": "INS TextElement: buffers. to TagElement at 1", "operations": ["INS TextElement: buffers. to TagElement at 1"]}, {"root": "DEL EnumDeclaration", "operations": ["DEL EnumConstantDeclaration", "DEL EnumConstantDeclaration", "DEL EnumDeclaration", "DEL EnumConstantDeclaration", "DEL Modifier: static", "DEL Modifier: public", "DEL SimpleName: OK_NEW_SCHEMA", "DEL SimpleName: FAILED", "DEL SimpleName: OK", "DEL SimpleName: SetupOutcome"]}, {"root": "DEL TagElement: @return", "operations": ["DEL TagElement: @return"]}, {"root": "DEL TagElement", "operations": ["DEL TagElement"]}, {"root": "DEL TagElement: @return", "operations": ["DEL TagElement: @return"]}, {"root": "DEL TagElement: @return", "operations": ["DEL TagElement: @return"]}, {"root": "DEL TagElement: @return", "operations": ["DEL TagElement: @return"]}]}}, {"RecordBatch_diff": {"operations": ["Insert Javadoc(56) into FieldDeclaration(64) at 0", "Insert MarkerAnnotation(421) into MethodDeclaration(426) at 1", "Insert MarkerAnnotation(431) into MethodDeclaration(435) at 1", "Insert MarkerAnnotation(477) into MethodDeclaration(487) at 1", "Update TextElement: A record batch contains a set of field values for a particular range of records. In the case of a record batch(25) to A record batch contains a set of field values for a particular range of", "Insert TextElement: records.(26) into TagElement(48) at 1", "Insert TextElement: <p>(27) into TagElement(48) at 2", "Insert TextElement: In the case of a record batch composed of ValueVectors, ideally a batch(28) into TagElement(48) at 3", "Update TextElement: composed of ValueVectors, ideally a batch fits within L2 cache (~256k per core). The set of value vectors do not(26) to fits within L2 cache (~256kB per core).  The set of value vectors does", "Update TextElement: change unless the next() IterOutcome is a *_NEW_SCHEMA type.(27) to not change except during a call to ", "Insert TagElement: @link(33) into TagElement(48) at 6", "Insert TextElement:  that returns(34) into TagElement(48) at 7", "Insert TagElement: @link(38) into TagElement(48) at 8", "Insert TextElement:  value.(39) into TagElement(48) at 9", "Insert TextElement: </p>(40) into TagElement(48) at 10", "Insert TextElement: <p>(41) into TagElement(48) at 11", "Update TextElement: A key thing to know is that the Iterator provided by record batch must align with the rank positions of the field ids(28) to A key thing to know is that the Iterator provided by a record batch must", "Update TextElement: provided utilizing getValueVectorId();(29) to align with the rank positions of the field IDs provided using", "Insert TagElement: @link(45) into TagElement(48) at 14", "Insert TextElement: .(46) into TagElement(48) at 15", "Insert TextElement: </p>(47) into TagElement(48) at 16", "Insert TagElement(55) into Javadoc(56) at 0", "Insert Javadoc(229) into EnumConstantDeclaration(231) at 0", "Insert Javadoc(265) into EnumConstantDeclaration(267) at 0", "Insert Javadoc(290) into EnumConstantDeclaration(292) at 0", "Insert Javadoc(311) into EnumConstantDeclaration(313) at 0", "Insert Javadoc(348) into EnumConstantDeclaration(350) at 0", "Insert Javadoc(377) into EnumConstantDeclaration(379) at 0", "Insert TagElement(418) into Javadoc(419) at 0", "Insert SimpleName: Override(420) into MarkerAnnotation(421) at 0", "Insert SimpleName: Override(430) into MarkerAnnotation(431) at 0", "Insert SimpleName: Override(476) into MarkerAnnotation(477) at 0", "Insert MethodRef(32) into TagElement: @link(33) at 0", "Insert MemberRef(37) into TagElement: @link(38) at 0", "Insert SimpleName: getValueVectorId(44) into TagElement: @link(45) at 0", "Insert TextElement: max batch size, limited by 2-byte length in SV2: 65536 = 2^16 (54) into TagElement(55) at 0", "Update TextElement: Describes the outcome of a RecordBatch being incremented forward.(44) to Describes the outcome of incrementing RecordBatch forward by a call to", "Insert TagElement: @link(68) into TagElement(202) at 1", "Insert TextElement: .(69) into TagElement(202) at 2", "Insert TextElement: <p>(70) into TagElement(202) at 3", "Insert TextElement: Key characteristics of the return value sequence:(71) into TagElement(202) at 4", "Insert TextElement: </p>(72) into TagElement(202) at 5", "Insert TextElement: <ul>(73) into TagElement(202) at 6", "Insert TextElement: <li>(74) into TagElement(202) at 7", "Insert TagElement: @code(76) into TagElement(202) at 8", "Insert TextElement:  always appears unless (77) into TagElement(202) at 9", "Insert TagElement: @code(79) into TagElement(202) at 10", "Insert TextElement:  appears.  (A(80) into TagElement(202) at 11", "Insert TextElement: batch returns (81) into TagElement(202) at 12", "Insert TagElement: @code(83) into TagElement(202) at 13", "Insert TextElement:  before returning (84) into TagElement(202) at 14", "Insert TagElement: @code(86) into TagElement(202) at 15", "Insert TextElement:  even(87) into TagElement(202) at 16", "Insert TextElement: if the batch has zero rows.)(88) into TagElement(202) at 17", "Insert TextElement: </li>(89) into TagElement(202) at 18", "Insert TextElement: <li>(90) into TagElement(202) at 19", "Insert TagElement: @code(92) into TagElement(202) at 20", "Insert TextElement:  always appears before (93) into TagElement(202) at 21", "Insert TagElement: @code(95) into TagElement(202) at 22", "Insert TextElement:  appears.</li>(96) into TagElement(202) at 23", "Insert TextElement: <li>(97) into TagElement(202) at 24", "Insert TextElement: The last value is always (98) into TagElement(202) at 25", "Insert TagElement: @code(100) into TagElement(202) at 26", "Insert TextElement:  or (101) into TagElement(202) at 27", "Insert TagElement: @code(103) into TagElement(202) at 28", "Insert TextElement: , and (104) into TagElement(202) at 29", "Insert TagElement: @code(106) into TagElement(202) at 30", "Insert TextElement: and (107) into TagElement(202) at 31", "Insert TagElement: @code(109) into TagElement(202) at 32", "Insert TextElement:  appear only as the last value.(110) into TagElement(202) at 33", "Insert TextElement: </li>(111) into TagElement(202) at 34", "Insert TextElement: </ul>(112) into TagElement(202) at 35", "Insert TextElement: <p>(113) into TagElement(202) at 36", "Insert TextElement: <strong>Details</strong>:(114) into TagElement(202) at 37", "Insert TextElement: </p>(115) into TagElement(202) at 38", "Insert TextElement: <p>(116) into TagElement(202) at 39", "Insert TextElement: For normal completion, the basic sequence of return values from calls to(117) into TagElement(202) at 40", "Insert TagElement: @code(119) into TagElement(202) at 41", "Insert TextElement:  on a (120) into TagElement(202) at 42", "Insert TagElement: @code(122) into TagElement(202) at 43", "Insert TextElement:  is:(123) into TagElement(202) at 44", "Insert TextElement: </p>(124) into TagElement(202) at 45", "Insert TextElement: <ol>(125) into TagElement(202) at 46", "Insert TextElement: <li>(126) into TagElement(202) at 47", "Insert TextElement: an (127) into TagElement(202) at 48", "Insert TagElement: @link(130) into TagElement(202) at 49", "Insert TextElement:  value followed by zero or more (131) into TagElement(202) at 50", "Insert TagElement: @link(134) into TagElement(202) at 51", "Insert TextElement: values,(135) into TagElement(202) at 52", "Insert TextElement: </li>(136) into TagElement(202) at 53", "Insert TextElement: <li>(137) into TagElement(202) at 54", "Insert TextElement: zero or more subsequences each having an (138) into TagElement(202) at 55", "Insert TagElement: @code(140) into TagElement(202) at 56", "Insert TextElement:  value(141) into TagElement(202) at 57", "Insert TextElement: followed by zero or more (142) into TagElement(202) at 58", "Insert TagElement: @code(144) into TagElement(202) at 59", "Insert TextElement:  values, and then(145) into TagElement(202) at 60", "Insert TextElement: </li>(146) into TagElement(202) at 61", "Insert TextElement: <li>(147) into TagElement(202) at 62", "Insert TextElement: a (148) into TagElement(202) at 63", "Insert TagElement: @link(151) into TagElement(202) at 64", "Insert TextElement:  value.(152) into TagElement(202) at 65", "Insert TextElement: </li>(153) into TagElement(202) at 66", "Insert TextElement: </ol>(154) into TagElement(202) at 67", "Insert TextElement: <p>(155) into TagElement(202) at 68", "Insert TextElement: In addition to that basic sequence, (156) into TagElement(202) at 69", "Insert TagElement: @link(159) into TagElement(202) at 70", "Insert TextElement:  and(160) into TagElement(202) at 71", "Insert TagElement: @link(163) into TagElement(202) at 72", "Insert TextElement:  values can appear anywhere in the subsequence(164) into TagElement(202) at 73", "Insert TextElement: before the terminal value ((165) into TagElement(202) at 74", "Insert TagElement: @code(167) into TagElement(202) at 75", "Insert TextElement:  or (168) into TagElement(202) at 76", "Insert TagElement: @code(170) into TagElement(202) at 77", "Insert TextElement: ).(171) into TagElement(202) at 78", "Insert TextElement: </p>(172) into TagElement(202) at 79", "Insert TextElement: <p>(173) into TagElement(202) at 80", "Insert TextElement: For abnormal termination, the sequence is truncated (before the(174) into TagElement(202) at 81", "Insert TagElement: @code(176) into TagElement(202) at 82", "Insert TextElement: ) and ends with (177) into TagElement(202) at 83", "Insert TagElement: @link(180) into TagElement(202) at 84", "Insert TextElement: .  That is, the sequence begins(181) into TagElement(202) at 85", "Insert TextElement: with a subsequence that is some prefix of a normal-completion sequence(182) into TagElement(202) at 86", "Insert TextElement: and that does not contain (183) into TagElement(202) at 87", "Insert TagElement: @code(185) into TagElement(202) at 88", "Insert TextElement: , and ends with (186) into TagElement(202) at 89", "Insert TagElement: @code(188) into TagElement(202) at 90", "Insert TextElement: .(189) into TagElement(202) at 91", "Insert TextElement: </p>(190) into TagElement(202) at 92", "Insert TextElement: <p>(191) into TagElement(202) at 93", "Insert TextElement: (The normal-completion return sequence is matched by the following(192) into TagElement(202) at 94", "Insert TextElement: regular-expression-style grammar:(193) into TagElement(202) at 95", "Insert TextElement: <pre>(194) into TagElement(202) at 96", "Insert TextElement: ( ( NOT_YET | OUT_OF_MEMORY )*  OK_NEW_SCHEMA(195) into TagElement(202) at 97", "Insert TextElement: ( NOT_YET | OUT_OF_MEMORY )*  OK )(196) into TagElement(202) at 98", "Insert TextElement: )+(197) into TagElement(202) at 99", "Insert TextElement: ( NOT_YET | OUT_OF_+MEMORY )*  NONE(198) into TagElement(202) at 100", "Insert TextElement: </pre>(199) into TagElement(202) at 101", "Insert TextElement: )(200) into TagElement(202) at 102", "Insert TextElement: </p>(201) into TagElement(202) at 103", "Insert TagElement(228) into Javadoc(229) at 0", "Insert TagElement(264) into Javadoc(265) at 0", "Insert TagElement(289) into Javadoc(290) at 0", "Insert TagElement(310) into Javadoc(311) at 0", "Insert TagElement(347) into Javadoc(348) at 0", "Insert TagElement(376) into Javadoc(377) at 0", "Update TextElement: Access the FragmentContext of the current query fragment. Useful for reporting failure information or other query(73) to Gets the FragmentContext of the current query fragment.  Useful for", "Update TextElement: level information.(74) to reporting failure information or other query-level information.", "Update TextElement: Provide the schema of the current RecordBatch. This changes if and only if a *_NEW_SCHEMA IterOutcome is provided.(83) to Gets the current schema of this record batch.", "Move TextElement: Provide the schema of the current RecordBatch. This changes if and only if a *_NEW_SCHEMA IterOutcome is provided.(83) into TagElement(418) at 0", "Insert TextElement: <p>(391) into TagElement(418) at 1", "Insert TextElement: May be called only when the most recent call to (392) into TagElement(418) at 2", "Insert TagElement: @link(395) into TagElement(418) at 3", "Insert TextElement: , if any,(396) into TagElement(418) at 4", "Insert TextElement: returned (397) into TagElement(418) at 5", "Insert TagElement: @link(400) into TagElement(418) at 6", "Insert TextElement:  or (401) into TagElement(418) at 7", "Insert TagElement: @link(404) into TagElement(418) at 8", "Insert TextElement: .(405) into TagElement(418) at 9", "Insert TextElement: </p>(406) into TagElement(418) at 10", "Insert TextElement: <p>(407) into TagElement(418) at 11", "Insert TextElement: The schema changes when and only when (408) into TagElement(418) at 12", "Insert TagElement: @link(411) into TagElement(418) at 13", "Insert TextElement:  returns(412) into TagElement(418) at 14", "Insert TagElement: @link(415) into TagElement(418) at 15", "Insert TextElement: .(416) into TagElement(418) at 16", "Insert TextElement: </p>(417) into TagElement(418) at 17", "Update TextElement: Provide the number of records that are within this record count(92) to Gets the number of records that are within this record.", "Update TextElement: Inform child nodes that this query should be terminated. Child nodes should utilize the QueryContext to determine(100) to Informs child nodes that this query should be terminated.  Child nodes", "Update TextElement: what has happened.(101) to should use the QueryContext to determine what has happened.", "Update TextElement: Get the value vector type and id for the given schema path. The TypedFieldId should store a fieldId which is the(128) to Gets the value vector type and ID for the given schema path.  The", "Insert TextElement: TypedFieldId should store a fieldId which is the same as the ordinal(465) into TagElement(468) at 1", "Update TextElement: same as the ordinal position of the field within the Iterator provided this classes implementation of(129) to position of the field within the Iterator provided this class's", "Update TextElement: Iterable<ValueVector>.(130) to implementation of Iterable<ValueVector>.", "Update TextElement: Update the data in each Field reading interface for the next range of records. Once a RecordBatch returns an(168) to Updates the data in each Field reading interface for the next range of", "Insert TextElement: records.(508) into TagElement(536) at 1", "Insert TextElement: <p>(509) into TagElement(536) at 2", "Insert TextElement: Once a RecordBatch's (510) into TagElement(536) at 3", "Insert TagElement: @code(512) into TagElement(536) at 4", "Insert TextElement:  has returned (513) into TagElement(536) at 5", "Insert TagElement: @link(517) into TagElement(536) at 6", "Insert TextElement: or (518) into TagElement(536) at 7", "Insert TagElement: @link(522) into TagElement(536) at 8", "Insert TextElement: , the consumer should no longer call(523) into TagElement(536) at 9", "Insert TagElement: @code(525) into TagElement(536) at 10", "Update TextElement: IterOutcome.NONE, the consumer should no longer next(). Behavior at this point is undetermined and likely to throw(169) to .  Behavior at this point is undefined and likely to", "Update TextElement: an exception.(170) to throw an exception.", "Insert TextElement: </p>(528) into TagElement(536) at 13", "Insert TextElement: <p>(529) into TagElement(536) at 14", "Insert TextElement: See (530) into TagElement(536) at 15", "Insert TagElement: @link(532) into TagElement(536) at 16", "Insert TextElement:  for the protocol (possible sequences of return(533) into TagElement(536) at 17", "Insert TextElement: values).(534) into TagElement(536) at 18", "Insert TextElement: </p>(535) into TagElement(536) at 19", "Update TextElement: Get a writable version of this batch. Takes over owernship of existing buffers.(180) to Gets a writable version of this batch.  Takes over ownership of existing", "Insert TextElement: buffers.(546) into TagElement(547) at 1", "Insert SimpleName: next(31) into MethodRef(32) at 0", "Insert SimpleName: IterOutcome(35) into MemberRef(37) at 0", "Insert SimpleName: OK_NEW_SCHEMA(36) into MemberRef(37) at 1", "Insert MethodRef(67) into TagElement: @link(68) at 0", "Insert TextElement:  OK_NEW_SCHEMA(75) into TagElement: @code(76) at 0", "Insert TextElement:  STOP(78) into TagElement: @code(79) at 0", "Insert TextElement:  OK_NEW_SCHEMA(82) into TagElement: @code(83) at 0", "Insert TextElement:  NONE(85) into TagElement: @code(86) at 0", "Insert TextElement:  OK_NEW_SCHEMA(91) into TagElement: @code(92) at 0", "Insert TextElement:  OK(94) into TagElement: @code(95) at 0", "Insert TextElement:  NONE(99) into TagElement: @code(100) at 0", "Insert TextElement:  STOP(102) into TagElement: @code(103) at 0", "Insert TextElement:  NONE(105) into TagElement: @code(106) at 0", "Insert TextElement:  STOP(108) into TagElement: @code(109) at 0", "Insert TextElement:  next()(118) into TagElement: @code(119) at 0", "Insert TextElement:  RecordBatch(121) into TagElement: @code(122) at 0", "Insert MemberRef(129) into TagElement: @link(130) at 0", "Insert MemberRef(133) into TagElement: @link(134) at 0", "Insert TextElement:  OK_NEW_SCHEMA(139) into TagElement: @code(140) at 0", "Insert TextElement:  OK(143) into TagElement: @code(144) at 0", "Insert MemberRef(150) into TagElement: @link(151) at 0", "Insert MemberRef(158) into TagElement: @link(159) at 0", "Insert MemberRef(162) into TagElement: @link(163) at 0", "Insert TextElement:  NONE(166) into TagElement: @code(167) at 0", "Insert TextElement:  STOP(169) into TagElement: @code(170) at 0", "Insert TextElement:  NONE(175) into TagElement: @code(176) at 0", "Insert MemberRef(179) into TagElement: @link(180) at 0", "Insert TextElement:  NONE(184) into TagElement: @code(185) at 0", "Insert TextElement:  STOP(187) into TagElement: @code(188) at 0", "Insert TextElement: Normal completion of batch.(207) into TagElement(228) at 0", "Insert TextElement: <p>(208) into TagElement(228) at 1", "Insert TextElement: The call to (209) into TagElement(228) at 2", "Insert TagElement: @link(212) into TagElement(228) at 3", "Insert TextElement: read no records,(213) into TagElement(228) at 4", "Insert TextElement: the batch has and will have no more results to return,(214) into TagElement(228) at 5", "Insert TextElement: and (215) into TagElement(228) at 6", "Insert TagElement: @code(217) into TagElement(228) at 7", "Insert TextElement:  must not be called again.(218) into TagElement(228) at 8", "Insert TextElement: </p>(219) into TagElement(228) at 9", "Insert TextElement: <p>(220) into TagElement(228) at 10", "Insert TextElement: This value will be returned only after (221) into TagElement(228) at 11", "Insert TagElement: @link(224) into TagElement(228) at 12", "Insert TextElement:  has been(225) into TagElement(228) at 13", "Insert TextElement: returned at least once (not necessarily <em>immediately</em> after).(226) into TagElement(228) at 14", "Insert TextElement: </p>(227) into TagElement(228) at 15", "Insert TextElement: Zero or more records with same schema.(232) into TagElement(264) at 0", "Insert TextElement: <p>(233) into TagElement(264) at 1", "Insert TextElement: The call to (234) into TagElement(264) at 2", "Insert TagElement: @link(237) into TagElement(264) at 3", "Insert TextElement: read zero or more records,(238) into TagElement(264) at 4", "Insert TextElement: the schema has not changed since the last time (239) into TagElement(264) at 5", "Insert TagElement: @code(241) into TagElement(264) at 6", "Insert TextElement: was returned,(242) into TagElement(264) at 7", "Insert TextElement: and the batch will have more results to return (at least completion or(243) into TagElement(264) at 8", "Insert TextElement: abnormal termination ((244) into TagElement(264) at 9", "Insert TagElement: @code(246) into TagElement(264) at 10", "Insert TextElement:  or (247) into TagElement(264) at 11", "Insert TagElement: @code(249) into TagElement(264) at 12", "Insert TextElement: )).(250) into TagElement(264) at 13", "Insert TextElement: ((251) into TagElement(264) at 14", "Insert TagElement: @code(253) into TagElement(264) at 15", "Insert TextElement:  should be called again.)(254) into TagElement(264) at 16", "Insert TextElement: </p>(255) into TagElement(264) at 17", "Insert TextElement: <p>(256) into TagElement(264) at 18", "Insert TextElement: This will be returned only after (257) into TagElement(264) at 19", "Insert TagElement: @link(260) into TagElement(264) at 20", "Insert TextElement:  has been(261) into TagElement(264) at 21", "Insert TextElement: returned at least once (not necessarily <em>immediately</em> after).(262) into TagElement(264) at 22", "Insert TextElement: </p>(263) into TagElement(264) at 23", "Insert TextElement: New schema, maybe with records.(268) into TagElement(289) at 0", "Insert TextElement: <p>(269) into TagElement(289) at 1", "Insert TextElement: The call to (270) into TagElement(289) at 2", "Insert TagElement: @link(273) into TagElement(289) at 3", "Insert TextElement: changed the schema and vector structures(274) into TagElement(289) at 4", "Insert TextElement: and read zero or more records,(275) into TagElement(289) at 5", "Insert TextElement: and the batch will have more results to return (at least completion or(276) into TagElement(289) at 6", "Insert TextElement: abnormal termination ((277) into TagElement(289) at 7", "Insert TagElement: @code(279) into TagElement(289) at 8", "Insert TextElement:  or (280) into TagElement(289) at 9", "Insert TagElement: @code(282) into TagElement(289) at 10", "Insert TextElement: )).(283) into TagElement(289) at 11", "Insert TextElement: ((284) into TagElement(289) at 12", "Insert TagElement: @code(286) into TagElement(289) at 13", "Insert TextElement:  should be called again.)(287) into TagElement(289) at 14", "Insert TextElement: </p>(288) into TagElement(289) at 15", "Insert TextElement: Non-completion (abnormal) termination.(293) into TagElement(310) at 0", "Insert TextElement: <p>(294) into TagElement(310) at 1", "Insert TextElement: The call to (295) into TagElement(310) at 2", "Insert TagElement: @link(298) into TagElement(310) at 3", "Insert TextElement: reports that the query has terminated other than by normal completion,(299) into TagElement(310) at 4", "Insert TextElement: and that the caller must not call any of the schema-access or(300) into TagElement(310) at 5", "Insert TextElement: data-access methods nor call (301) into TagElement(310) at 6", "Insert TagElement: @code(303) into TagElement(310) at 7", "Insert TextElement:  again.(304) into TagElement(310) at 8", "Insert TextElement: </p>(305) into TagElement(310) at 9", "Insert TextElement: <p>(306) into TagElement(310) at 10", "Insert TextElement: The caller can consume its QueryContext to understand the current state(307) into TagElement(310) at 11", "Insert TextElement: of things.(308) into TagElement(310) at 12", "Insert TextElement: </p>(309) into TagElement(310) at 13", "Insert TextElement: No data yet.(314) into TagElement(347) at 0", "Insert TextElement: <p>(315) into TagElement(347) at 1", "Insert TextElement: The call to (316) into TagElement(347) at 2", "Insert TagElement: @link(319) into TagElement(347) at 3", "Insert TextElement: read no data,(320) into TagElement(347) at 4", "Insert TextElement: and the batch will have more results to return in the future (at least(321) into TagElement(347) at 5", "Insert TextElement: completion or abnormal termination ((322) into TagElement(347) at 6", "Insert TagElement: @code(324) into TagElement(347) at 7", "Insert TextElement:  or (325) into TagElement(347) at 8", "Insert TagElement: @code(327) into TagElement(347) at 9", "Insert TextElement: )).(328) into TagElement(347) at 10", "Insert TextElement: The caller should call (329) into TagElement(347) at 11", "Insert TagElement: @code(331) into TagElement(347) at 12", "Insert TextElement:  again, but should do so later(332) into TagElement(347) at 13", "Insert TextElement: (including by returning (333) into TagElement(347) at 14", "Insert TagElement: @code(335) into TagElement(347) at 15", "Insert TextElement:  to its caller).(336) into TagElement(347) at 16", "Insert TextElement: </p>(337) into TagElement(347) at 17", "Insert TextElement: <p>(338) into TagElement(347) at 18", "Insert TextElement: Normally, the caller should perform any locally available work while(339) into TagElement(347) at 19", "Insert TextElement: waiting for incoming data from the callee, for example, doing partial(340) into TagElement(347) at 20", "Insert TextElement: sorts on already received data while waiting for additional data to(341) into TagElement(347) at 21", "Insert TextElement: sort.(342) into TagElement(347) at 22", "Insert TextElement: </p>(343) into TagElement(347) at 23", "Insert TextElement: <p>(344) into TagElement(347) at 24", "Insert TextElement: Used by batches that haven't received incoming data yet.(345) into TagElement(347) at 25", "Insert TextElement: </p>(346) into TagElement(347) at 26", "Insert TextElement: Out of memory (not fatal).(351) into TagElement(376) at 0", "Insert TextElement: <p>(352) into TagElement(376) at 1", "Insert TextElement: The call to (353) into TagElement(376) at 2", "Insert TagElement: @link(356) into TagElement(376) at 3", "Insert TextElement: ,(357) into TagElement(376) at 4", "Insert TextElement: including upstream operators, was unable to allocate memory(358) into TagElement(376) at 5", "Insert TextElement: and did not read any records,(359) into TagElement(376) at 6", "Insert TextElement: and the batch will have more results to return (at least completion or(360) into TagElement(376) at 7", "Insert TextElement: abnormal termination ((361) into TagElement(376) at 8", "Insert TagElement: @code(363) into TagElement(376) at 9", "Insert TextElement:  or (364) into TagElement(376) at 10", "Insert TagElement: @code(366) into TagElement(376) at 11", "Insert TextElement: )).(367) into TagElement(376) at 12", "Insert TextElement: The caller should release memory if it can (including by returning(368) into TagElement(376) at 13", "Insert TagElement: @code(370) into TagElement(376) at 14", "Insert TextElement:  to its caller) and call (371) into TagElement(376) at 15", "Insert TagElement: @code(373) into TagElement(376) at 16", "Insert TextElement:  again.(374) into TagElement(376) at 17", "Insert TextElement: </p>(375) into TagElement(376) at 18", "Insert MemberRef(394) into TagElement: @link(395) at 0", "Insert MemberRef(399) into TagElement: @link(400) at 0", "Insert MemberRef(403) into TagElement: @link(404) at 0", "Insert MemberRef(410) into TagElement: @link(411) at 0", "Insert MemberRef(414) into TagElement: @link(415) at 0", "Insert TextElement:  next()(511) into TagElement: @code(512) at 0", "Insert MemberRef(516) into TagElement: @link(517) at 0", "Insert MemberRef(521) into TagElement: @link(522) at 0", "Insert TextElement:  next()(524) into TagElement: @code(525) at 0", "Insert SimpleName: IterOutcome(531) into TagElement: @link(532) at 0", "Insert SimpleName: next(66) into MethodRef(67) at 0", "Insert SimpleName: OK_NEW_SCHEMA(128) into MemberRef(129) at 0", "Insert SimpleName: OK(132) into MemberRef(133) at 0", "Insert SimpleName: NONE(149) into MemberRef(150) at 0", "Insert SimpleName: NOT_YET(157) into MemberRef(158) at 0", "Insert SimpleName: OUT_OF_MEMORY(161) into MemberRef(162) at 0", "Insert SimpleName: STOP(178) into MemberRef(179) at 0", "Insert MethodRef(211) into TagElement: @link(212) at 0", "Insert TextElement:  next()(216) into TagElement: @code(217) at 0", "Insert MemberRef(223) into TagElement: @link(224) at 0", "Insert MethodRef(236) into TagElement: @link(237) at 0", "Insert TextElement:  OK_NEW_SCHEMA(240) into TagElement: @code(241) at 0", "Insert TextElement:  NONE(245) into TagElement: @code(246) at 0", "Insert TextElement:  STOP(248) into TagElement: @code(249) at 0", "Insert TextElement:  next()(252) into TagElement: @code(253) at 0", "Insert MemberRef(259) into TagElement: @link(260) at 0", "Insert MethodRef(272) into TagElement: @link(273) at 0", "Insert TextElement:  NONE(278) into TagElement: @code(279) at 0", "Insert TextElement:  STOP(281) into TagElement: @code(282) at 0", "Insert TextElement:  next()(285) into TagElement: @code(286) at 0", "Insert MethodRef(297) into TagElement: @link(298) at 0", "Insert TextElement:  next()(302) into TagElement: @code(303) at 0", "Insert MethodRef(318) into TagElement: @link(319) at 0", "Insert TextElement:  NONE(323) into TagElement: @code(324) at 0", "Insert TextElement:  STOP(326) into TagElement: @code(327) at 0", "Insert TextElement:  next()(330) into TagElement: @code(331) at 0", "Insert TextElement:  NOT_YET(334) into TagElement: @code(335) at 0", "Insert MethodRef(355) into TagElement: @link(356) at 0", "Insert TextElement:  NONE(362) into TagElement: @code(363) at 0", "Insert TextElement:  STOP(365) into TagElement: @code(366) at 0", "Insert TextElement:  OUT_OF_MEMORY(369) into TagElement: @code(370) at 0", "Insert TextElement:  next()(372) into TagElement: @code(373) at 0", "Insert SimpleName: next(393) into MemberRef(394) at 0", "Insert SimpleName: OK_NEW_SCHEMA(398) into MemberRef(399) at 0", "Insert SimpleName: OK(402) into MemberRef(403) at 0", "Insert SimpleName: next(409) into MemberRef(410) at 0", "Insert SimpleName: OK_NEW_SCHEMA(413) into MemberRef(414) at 0", "Insert SimpleName: IterOutcome(514) into MemberRef(516) at 0", "Insert SimpleName: NONE(515) into MemberRef(516) at 1", "Insert SimpleName: IterOutcome(519) into MemberRef(521) at 0", "Insert SimpleName: STOP(520) into MemberRef(521) at 1", "Insert SimpleName: next(210) into MethodRef(211) at 0", "Insert SimpleName: OK_NEW_SCHEMA(222) into MemberRef(223) at 0", "Insert SimpleName: next(235) into MethodRef(236) at 0", "Insert SimpleName: OK_NEW_SCHEMA(258) into MemberRef(259) at 0", "Insert SimpleName: next(271) into MethodRef(272) at 0", "Insert SimpleName: next(296) into MethodRef(297) at 0", "Insert SimpleName: next(317) into MethodRef(318) at 0", "Insert SimpleName: next(354) into MethodRef(355) at 0", "Delete Modifier: public(63)", "Delete Modifier: static(64)", "Delete SimpleName: SetupOutcome(65)", "Delete SimpleName: OK(66)", "Delete EnumConstantDeclaration(67)", "Delete SimpleName: OK_NEW_SCHEMA(68)", "Delete EnumConstantDeclaration(69)", "Delete SimpleName: FAILED(70)", "Delete EnumConstantDeclaration(71)", "Delete EnumDeclaration(72)", "Delete TagElement: @return(76)", "Delete TagElement(84)", "Delete TagElement: @return(85)", "Delete TagElement: @return(94)", "Delete TagElement: @return(182)"]}}, {"RecordBatchLoader_cluster": {"actions": [{"root": "INS Javadoc to TypeDeclaration: class at 0", "operations": ["INS Javadoc to TypeDeclaration: class at 0", "INS TagElement to Javadoc at 0", "INS TextElement: Holds record batch loaded from record batch message. to TagElement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: resetRecordCount to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS Block to MethodDeclaration at 3", "INS SimpleName: valueCount to Assignment: = at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS NumberLiteral: 0 to Assignment: = at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement to Javadoc at 0", "INS TextElement: Constructs a loader using the given allocator for vector buffer allocation. to TagElement at 0", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement to Javadoc at 0", "INS TextElement: Clears this loader, which clears the internal vector container (see to TagElement at 0", "INS TagElement: @link to TagElement at 1", "INS SimpleName: VectorContainer to MemberRef at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: clear to MemberRef at 1", "INS TextElement: ) and resets the record count to zero. to TagElement at 2", "INS MemberRef to TagElement: @link at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement: Sorts vectors into canonical order (by field name).  Updates schema and to TagElement at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS TextElement: internal vector container. to TagElement at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: resetRecordCount to MethodInvocation at 0", "INS ExpressionStatement to Block at 1"]}]}}, {"RecordBatchLoader_diff": {"operations": ["Insert Javadoc(53) into TypeDeclaration: class(675) at 0", "Insert MethodDeclaration(600) into TypeDeclaration: class(675) at 18", "Insert TagElement(52) into Javadoc(53) at 0", "Insert Javadoc(108) into MethodDeclaration(125) at 0", "Insert Modifier: public(592) into MethodDeclaration(600) at 0", "Insert PrimitiveType: void(593) into MethodDeclaration(600) at 1", "Insert SimpleName: resetRecordCount(594) into MethodDeclaration(600) at 2", "Insert Block(599) into MethodDeclaration(600) at 3", "Insert Javadoc(608) into MethodDeclaration(620) at 0", "Insert Javadoc(624) into MethodDeclaration(674) at 0", "Insert TextElement: Holds record batch loaded from record batch message.(51) into TagElement(52) at 0", "Insert TagElement(107) into Javadoc(108) at 0", "Insert ExpressionStatement(598) into Block(599) at 0", "Insert TagElement(607) into Javadoc(608) at 0", "Insert ExpressionStatement(618) into Block(619) at 1", "Insert TagElement(623) into Javadoc(624) at 0", "Insert TextElement: Constructs a loader using the given allocator for vector buffer allocation.(106) into TagElement(107) at 0", "Insert Assignment: =(597) into ExpressionStatement(598) at 0", "Insert TextElement: Clears this loader, which clears the internal vector container (see(601) into TagElement(607) at 0", "Insert TagElement: @link(605) into TagElement(607) at 1", "Insert TextElement: ) and resets the record count to zero.(606) into TagElement(607) at 2", "Insert MethodInvocation(617) into ExpressionStatement(618) at 0", "Insert TextElement: Sorts vectors into canonical order (by field name).  Updates schema and(621) into TagElement(623) at 0", "Insert TextElement: internal vector container.(622) into TagElement(623) at 1", "Insert SimpleName: valueCount(595) into Assignment: =(597) at 0", "Insert NumberLiteral: 0(596) into Assignment: =(597) at 1", "Insert MemberRef(604) into TagElement: @link(605) at 0", "Insert SimpleName: resetRecordCount(616) into MethodInvocation(617) at 0", "Insert SimpleName: VectorContainer(602) into MemberRef(604) at 0", "Insert SimpleName: clear(603) into MemberRef(604) at 1"]}}, {"VectorContainer_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS StringLiteral: \"[recordCount = \" to InfixExpression: + at 1", "INS StringLiteral: \", schemaChanged = \" to InfixExpression: + at 3", "INS InfixExpression: + to ReturnStatement at 0", "INS SuperMethodInvocation to InfixExpression: + at 0", "INS Block to MethodDeclaration at 4", "INS StringLiteral: \", ...]\" to InfixExpression: + at 9", "INS ReturnStatement to Block at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS SimpleName: String to SimpleType: String at 0", "INS StringLiteral: \", schema = \" to InfixExpression: + at 5", "INS SimpleName: wrappers to InfixExpression: + at 8", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: toString to SuperMethodInvocation at 0", "INS SimpleName: toString to MethodDeclaration at 3", "INS SimpleName: schemaChanged to InfixExpression: + at 4", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: recordCount to InfixExpression: + at 2", "INS StringLiteral: \", wrappers = \" to InfixExpression: + at 7", "INS SimpleType: String to MethodDeclaration at 2", "INS SimpleName: schema to InfixExpression: + at 6"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement to Javadoc at 0", "INS TextElement: Sorts vectors into canonical order (by field name) in new VectorContainer. to TagElement at 0", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS TextElement: Clears the contained vectors.  (See  to TagElement at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: clear to MemberRef at 1", "INS TagElement: @link to TagElement at 1", "INS SimpleName: ValueVector to MemberRef at 0", "INS TextElement: ). to TagElement at 2", "INS MemberRef to TagElement: @link at 0"]}]}}, {"VectorContainer_diff": {"operations": ["Insert MethodDeclaration(148) into TypeDeclaration: class(1547) at 11", "Insert MarkerAnnotation(129) into MethodDeclaration(148) at 0", "Insert Modifier: public(130) into MethodDeclaration(148) at 1", "Insert SimpleType: String(132) into MethodDeclaration(148) at 2", "Insert SimpleName: toString(133) into MethodDeclaration(148) at 3", "Insert Block(147) into MethodDeclaration(148) at 4", "Insert Javadoc(696) into MethodDeclaration(804) at 0", "Insert Javadoc(1471) into MethodDeclaration(1489) at 0", "Insert SimpleName: Override(128) into MarkerAnnotation(129) at 0", "Insert SimpleName: String(131) into SimpleType: String(132) at 0", "Insert ReturnStatement(146) into Block(147) at 0", "Insert TagElement(695) into Javadoc(696) at 0", "Insert TagElement(1470) into Javadoc(1471) at 0", "Insert InfixExpression: +(145) into ReturnStatement(146) at 0", "Insert TextElement: Sorts vectors into canonical order (by field name) in new VectorContainer.(694) into TagElement(695) at 0", "Insert TextElement: Clears the contained vectors.  (See (1464) into TagElement(1470) at 0", "Insert TagElement: @link(1468) into TagElement(1470) at 1", "Insert TextElement: ).(1469) into TagElement(1470) at 2", "Insert SuperMethodInvocation(135) into InfixExpression: +(145) at 0", "Insert StringLiteral: \"[recordCount = \"(136) into InfixExpression: +(145) at 1", "Insert SimpleName: recordCount(137) into InfixExpression: +(145) at 2", "Insert StringLiteral: \", schemaChanged = \"(138) into InfixExpression: +(145) at 3", "Insert SimpleName: schemaChanged(139) into InfixExpression: +(145) at 4", "Insert StringLiteral: \", schema = \"(140) into InfixExpression: +(145) at 5", "Insert SimpleName: schema(141) into InfixExpression: +(145) at 6", "Insert StringLiteral: \", wrappers = \"(142) into InfixExpression: +(145) at 7", "Insert SimpleName: wrappers(143) into InfixExpression: +(145) at 8", "Insert StringLiteral: \", ...]\"(144) into InfixExpression: +(145) at 9", "Insert MemberRef(1467) into TagElement: @link(1468) at 0", "Insert SimpleName: toString(134) into SuperMethodInvocation(135) at 0", "Insert SimpleName: ValueVector(1465) into MemberRef(1467) at 0", "Insert SimpleName: clear(1466) into MemberRef(1467) at 1"]}}, {"AbstractRecordReader_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleType: String to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 1", "INS StringLiteral: \", isStarQuery = \" to InfixExpression: + at 3", "INS StringLiteral: \"[columns = \" to InfixExpression: + at 1", "INS SimpleName: toString to SuperMethodInvocation at 0", "INS SimpleName: isSkipQuery to InfixExpression: + at 6", "INS InfixExpression: + to ReturnStatement at 0", "INS StringLiteral: \"]\" to InfixExpression: + at 7", "INS SimpleName: toString to MethodDeclaration at 3", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: String to SimpleType: String at 0", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS Block to MethodDeclaration at 4", "INS SuperMethodInvocation to InfixExpression: + at 0", "INS SimpleName: columns to InfixExpression: + at 2", "INS SimpleName: isStarQuery to InfixExpression: + at 4", "INS StringLiteral: \", isSkipQuery = \" to InfixExpression: + at 5"]}]}}, {"AbstractRecordReader_diff": {"operations": ["Insert MethodDeclaration(112) into TypeDeclaration: class(304) at 10", "Insert MarkerAnnotation(95) into MethodDeclaration(112) at 0", "Insert Modifier: public(96) into MethodDeclaration(112) at 1", "Insert SimpleType: String(98) into MethodDeclaration(112) at 2", "Insert SimpleName: toString(99) into MethodDeclaration(112) at 3", "Insert Block(111) into MethodDeclaration(112) at 4", "Insert SimpleName: Override(94) into MarkerAnnotation(95) at 0", "Insert SimpleName: String(97) into SimpleType: String(98) at 0", "Insert ReturnStatement(110) into Block(111) at 0", "Insert InfixExpression: +(109) into ReturnStatement(110) at 0", "Insert SuperMethodInvocation(101) into InfixExpression: +(109) at 0", "Insert StringLiteral: \"[columns = \"(102) into InfixExpression: +(109) at 1", "Insert SimpleName: columns(103) into InfixExpression: +(109) at 2", "Insert StringLiteral: \", isStarQuery = \"(104) into InfixExpression: +(109) at 3", "Insert SimpleName: isStarQuery(105) into InfixExpression: +(109) at 4", "Insert StringLiteral: \", isSkipQuery = \"(106) into InfixExpression: +(109) at 5", "Insert SimpleName: isSkipQuery(107) into InfixExpression: +(109) at 6", "Insert StringLiteral: \"]\"(108) into InfixExpression: +(109) at 7", "Insert SimpleName: toString(100) into SuperMethodInvocation(101) at 0"]}}, {"RecordReader_cluster": {"actions": [{"root": "UPDATE from Increment record reader forward, writing into the provided output batch. to Increments this record reader forward, writing via the provided output", "operations": ["UPD TextElement: Increment record reader forward, writing into the provided output batch. from Increment record reader forward, writing into the provided output batch. to Increments this record reader forward, writing via the provided output"]}, {"root": "INS TextElement: mutator into the output batch. to TagElement at 1", "operations": ["INS TextElement: mutator into the output batch. to TagElement at 1"]}]}}, {"RecordReader_diff": {"operations": ["Update TextElement: Increment record reader forward, writing into the provided output batch.(97) to Increments this record reader forward, writing via the provided output", "Insert TextElement: mutator into the output batch.(98) into TagElement(99) at 1"]}}, {"BaseValueVector_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS SimpleName: toString to MethodDeclaration at 3", "INS MarkerAnnotation to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS SuperMethodInvocation to InfixExpression: + at 0", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS StringLiteral: \", ...]\" to InfixExpression: + at 3", "INS SimpleType: String to MethodDeclaration at 2", "INS InfixExpression: + to ReturnStatement at 0", "INS SimpleName: field to InfixExpression: + at 2", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: String to SimpleType: String at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: toString to SuperMethodInvocation at 0", "INS StringLiteral: \"[field = \" to InfixExpression: + at 1"]}]}}, {"BaseValueVector_diff": {"operations": ["Insert MethodDeclaration(134) into TypeDeclaration: class(335) at 10", "Insert MarkerAnnotation(121) into MethodDeclaration(134) at 0", "Insert Modifier: public(122) into MethodDeclaration(134) at 1", "Insert SimpleType: String(124) into MethodDeclaration(134) at 2", "Insert SimpleName: toString(125) into MethodDeclaration(134) at 3", "Insert Block(133) into MethodDeclaration(134) at 4", "Insert SimpleName: Override(120) into MarkerAnnotation(121) at 0", "Insert SimpleName: String(123) into SimpleType: String(124) at 0", "Insert ReturnStatement(132) into Block(133) at 0", "Insert InfixExpression: +(131) into ReturnStatement(132) at 0", "Insert SuperMethodInvocation(127) into InfixExpression: +(131) at 0", "Insert StringLiteral: \"[field = \"(128) into InfixExpression: +(131) at 1", "Insert SimpleName: field(129) into InfixExpression: +(131) at 2", "Insert StringLiteral: \", ...]\"(130) into InfixExpression: +(131) at 3", "Insert SimpleName: toString(126) into SuperMethodInvocation(127) at 0"]}}, {"SchemaChangeCallBack_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 4", "operations": ["INS TextElement: . to TagElement at 2", "INS Javadoc to MethodDeclaration at 0", "INS TextElement:  false to TagElement: @code at 0", "INS MethodDeclaration to TypeDeclaration: class at 4", "INS TextElement: Constructs a schema-change callback with the schema-changed state set to to TagElement at 0", "INS TagElement to Javadoc at 0", "INS TagElement: @code to TagElement at 1", "INS SimpleName: SchemaChangeCallBack to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 3"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS TextElement:  true to TagElement: @code at 0", "INS TagElement to Javadoc at 0", "INS TextElement: Sets the schema-changed state to  to TagElement at 0", "INS TextElement: . to TagElement at 2", "INS TagElement: @code to TagElement at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement: Returns the value of schema-changed state, <strong>resetting</strong> the to TagElement at 0", "INS TextElement:  false to TagElement: @code at 0", "INS TextElement: . to TagElement at 3", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @code to TagElement at 2", "INS TextElement: schema-changed state to  to TagElement at 1", "INS TagElement to Javadoc at 0"]}, {"root": "UPDATE from getSchemaChange to getSchemaChangedAndReset", "operations": ["UPD SimpleName: getSchemaChange from getSchemaChange to getSchemaChangedAndReset"]}, {"root": "UPDATE from schemaChange to schemaChanged", "operations": ["UPD SimpleName: schemaChange from schemaChange to schemaChanged", "UPD SimpleName: schemaChange from schemaChange to schemaChanged", "UPD SimpleName: schemaChange from schemaChange to schemaChanged", "UPD SimpleName: schemaChange from schemaChange to schemaChanged"]}]}}, {"SchemaChangeCallBack_diff": {"operations": ["Insert MethodDeclaration(38) into TypeDeclaration: class(80) at 4", "Insert Javadoc(34) into MethodDeclaration(38) at 0", "Insert Modifier: public(35) into MethodDeclaration(38) at 1", "Insert SimpleName: SchemaChangeCallBack(36) into MethodDeclaration(38) at 2", "Insert Block(37) into MethodDeclaration(38) at 3", "Insert Javadoc(44) into MethodDeclaration(55) at 0", "Insert MarkerAnnotation(46) into MethodDeclaration(55) at 1", "Insert Javadoc(62) into MethodDeclaration(79) at 0", "Update SimpleName: getSchemaChange(40) to getSchemaChangedAndReset", "Update SimpleName: schemaChange(25) to schemaChanged", "Insert TagElement(33) into Javadoc(34) at 0", "Insert TagElement(43) into Javadoc(44) at 0", "Insert SimpleName: Override(45) into MarkerAnnotation(46) at 0", "Insert TagElement(61) into Javadoc(62) at 0", "Insert TextElement: Constructs a schema-change callback with the schema-changed state set to(29) into TagElement(33) at 0", "Insert TagElement: @code(31) into TagElement(33) at 1", "Insert TextElement: .(32) into TagElement(33) at 2", "Insert TextElement: Sets the schema-changed state to (39) into TagElement(43) at 0", "Insert TagElement: @code(41) into TagElement(43) at 1", "Insert TextElement: .(42) into TagElement(43) at 2", "Insert TextElement: Returns the value of schema-changed state, <strong>resetting</strong> the(56) into TagElement(61) at 0", "Insert TextElement: schema-changed state to (57) into TagElement(61) at 1", "Insert TagElement: @code(59) into TagElement(61) at 2", "Insert TextElement: .(60) into TagElement(61) at 3", "Insert TextElement:  false(30) into TagElement: @code(31) at 0", "Insert TextElement:  true(40) into TagElement: @code(41) at 0", "Update SimpleName: schemaChange(32) to schemaChanged", "Insert TextElement:  false(58) into TagElement: @code(59) at 0", "Update SimpleName: schemaChange(44) to schemaChanged", "Update SimpleName: schemaChange(47) to schemaChanged"]}}, {"HBaseRecordReader_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: java.nio.charset.StandardCharsets to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: java.util.NavigableSet to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "INS ImportDeclaration to CompilationUnit at 29", "operations": ["INS ImportDeclaration to CompilationUnit at 29", "INS QualifiedName: org.apache.hadoop.hbase.HColumnDescriptor to ImportDeclaration at 0"]}, {"root": "INS Block to TryStatement at 0", "operations": ["INS ExpressionStatement to Block at 1", "INS SimpleName: familyName to MethodInvocation at 1", "INS ArrayType: byte[] to ParameterizedType: NavigableSet<byte[]> at 1", "INS EnhancedForStatement to Block at 4", "INS ParameterizedType: NavigableSet<byte[]> to ParameterizedType: Map.Entry<byte[],NavigableSet<byte[]>> at 2", "INS VariableDeclarationStatement to Block at 0", "INS IfStatement to Block at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: children to VariableDeclarationFragment at 0", "INS SimpleType: NavigableSet to ParameterizedType: NavigableSet<byte[]> at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleType: String to ClassInstanceCreation at 0", "INS Dimension to ArrayType: byte[] at 1", "INS EnhancedForStatement to Block at 0", "INS ArrayType: byte[] to ParameterizedType: NavigableSet<byte[]> at 1", "INS SimpleType: Set to ParameterizedType: Set<byte[]> at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleType: Map.Entry to ParameterizedType: Map.Entry<byte[],NavigableSet<byte[]>> at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleName: childNameBytes to ClassInstanceCreation at 1", "INS ParameterizedType: Set<Map.Entry<byte[],NavigableSet<byte[]>>> to VariableDeclarationStatement at 1", "INS SimpleName: familyEntry to MethodInvocation at 0", "INS SimpleName: NavigableSet to SimpleType: NavigableSet at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getKey to MethodInvocation at 1", "INS ArrayType: byte[] to ParameterizedType: Map.Entry<byte[],NavigableSet<byte[]>> at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS ParameterizedType: NavigableSet<byte[]> to ParameterizedType: Map.Entry<byte[],NavigableSet<byte[]>> at 2", "INS Block to TryStatement at 0", "INS QualifiedName: Map.Entry to SimpleType: Map.Entry at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleType: String to VariableDeclarationStatement at 1", "INS SimpleType: Map.Entry to ParameterizedType: Map.Entry<byte[],NavigableSet<byte[]>> at 0", "INS SimpleName: getOrCreateColumnVector to MethodInvocation at 0", "INS SimpleName: getOrCreateFamilyVector to MethodInvocation at 0", "INS SimpleName: familyEntry to SingleVariableDeclaration at 1", "INS QualifiedName: StandardCharsets.UTF_8 to ClassInstanceCreation at 2", "INS ParameterizedType: Map.Entry<byte[],NavigableSet<byte[]>> to ParameterizedType: Set<Map.Entry<byte[],NavigableSet<byte[]>>> at 1", "INS ArrayType: byte[] to ParameterizedType: Map.Entry<byte[],NavigableSet<byte[]>> at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: MapVector to SimpleType: MapVector at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleType: String to ClassInstanceCreation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: childName to MethodInvocation at 2", "INS SimpleName: NavigableSet to SimpleType: NavigableSet at 0", "INS SimpleType: Set to ParameterizedType: Set<Map.Entry<byte[],NavigableSet<byte[]>>> at 0", "INS MethodInvocation to MethodInvocation at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: entrySet to MethodInvocation at 1", "INS Dimension to ArrayType: byte[] at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: NavigableSet to ParameterizedType: NavigableSet<byte[]> at 0", "INS SimpleName: familyEntry to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleName: childName to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: familiesEntries to EnhancedForStatement at 1", "INS Dimension to ArrayType: byte[] at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: hbaseScan to MethodInvocation at 0", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleType: MapVector to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: familyVector to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 3", "INS ParameterizedType: Set<byte[]> to VariableDeclarationStatement at 1", "INS BooleanLiteral: false to MethodInvocation at 2", "INS ArrayType: byte[] to ParameterizedType: Set<byte[]> at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS Block to EnhancedForStatement at 2", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: getValue to MethodInvocation at 1", "INS SimpleName: familyVector to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: familiesEntries to VariableDeclarationFragment at 0", "INS QualifiedName: StandardCharsets.UTF_8 to ClassInstanceCreation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: children to EnhancedForStatement at 1", "INS NullLiteral to InfixExpression: != at 0", "INS SimpleType: String to VariableDeclarationStatement at 1", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleName: childNameBytes to SingleVariableDeclaration at 1", "INS InfixExpression: != to IfStatement at 0", "INS Block to EnhancedForStatement at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleName: getFamilyMap to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: children to InfixExpression: != at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: familyName to VariableDeclarationFragment at 0", "INS QualifiedName: Map.Entry to SimpleType: Map.Entry at 0", "INS ParameterizedType: Map.Entry<byte[],NavigableSet<byte[]>> to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 5", "MOV EnhancedForStatement to Block at 2"]}, {"root": "DEL Block", "operations": ["DEL Block"]}]}}, {"HBaseRecordReader_diff": {"operations": ["Insert ImportDeclaration(20) into CompilationUnit(1178) at 2", "Insert ImportDeclaration(30) into CompilationUnit(1178) at 7", "Insert ImportDeclaration(74) into CompilationUnit(1178) at 29", "Insert QualifiedName: java.nio.charset.StandardCharsets(19) into ImportDeclaration(20) at 0", "Insert QualifiedName: java.util.NavigableSet(29) into ImportDeclaration(30) at 0", "Insert QualifiedName: org.apache.hadoop.hbase.HColumnDescriptor(73) into ImportDeclaration(74) at 0", "Insert Block(632) into TryStatement(647) at 0", "Move ExpressionStatement(504) into Block(632) at 0", "Move ExpressionStatement(512) into Block(632) at 1", "Move EnhancedForStatement(486) into Block(632) at 2", "Insert VariableDeclarationStatement(542) into Block(632) at 3", "Insert EnhancedForStatement(624) into Block(632) at 4", "Move ExpressionStatement(519) into Block(632) at 5", "Insert Modifier: final(519) into VariableDeclarationStatement(542) at 0", "Insert ParameterizedType: Set<Map.Entry<byte[],NavigableSet<byte[]>>>(534) into VariableDeclarationStatement(542) at 1", "Insert VariableDeclarationFragment(541) into VariableDeclarationStatement(542) at 2", "Insert SingleVariableDeclaration(556) into EnhancedForStatement(624) at 0", "Insert SimpleName: familiesEntries(557) into EnhancedForStatement(624) at 1", "Insert Block(623) into EnhancedForStatement(624) at 2", "Insert SimpleType: Set(521) into ParameterizedType: Set<Map.Entry<byte[],NavigableSet<byte[]>>>(534) at 0", "Insert ParameterizedType: Map.Entry<byte[],NavigableSet<byte[]>>(533) into ParameterizedType: Set<Map.Entry<byte[],NavigableSet<byte[]>>>(534) at 1", "Insert SimpleName: familiesEntries(535) into VariableDeclarationFragment(541) at 0", "Insert MethodInvocation(540) into VariableDeclarationFragment(541) at 1", "Insert ParameterizedType: Map.Entry<byte[],NavigableSet<byte[]>>(554) into SingleVariableDeclaration(556) at 0", "Insert SimpleName: familyEntry(555) into SingleVariableDeclaration(556) at 1", "Insert VariableDeclarationStatement(570) into Block(623) at 0", "Insert VariableDeclarationStatement(580) into Block(623) at 1", "Insert VariableDeclarationStatement(593) into Block(623) at 2", "Insert IfStatement(622) into Block(623) at 3", "Insert SimpleName: Set(520) into SimpleType: Set(521) at 0", "Insert SimpleType: Map.Entry(523) into ParameterizedType: Map.Entry<byte[],NavigableSet<byte[]>>(533) at 0", "Insert ArrayType: byte[](526) into ParameterizedType: Map.Entry<byte[],NavigableSet<byte[]>>(533) at 1", "Insert ParameterizedType: NavigableSet<byte[]>(532) into ParameterizedType: Map.Entry<byte[],NavigableSet<byte[]>>(533) at 2", "Insert MethodInvocation(538) into MethodInvocation(540) at 0", "Insert SimpleName: entrySet(539) into MethodInvocation(540) at 1", "Insert SimpleType: Map.Entry(544) into ParameterizedType: Map.Entry<byte[],NavigableSet<byte[]>>(554) at 0", "Insert ArrayType: byte[](547) into ParameterizedType: Map.Entry<byte[],NavigableSet<byte[]>>(554) at 1", "Insert ParameterizedType: NavigableSet<byte[]>(553) into ParameterizedType: Map.Entry<byte[],NavigableSet<byte[]>>(554) at 2", "Insert Modifier: final(558) into VariableDeclarationStatement(570) at 0", "Insert SimpleType: String(560) into VariableDeclarationStatement(570) at 1", "Insert VariableDeclarationFragment(569) into VariableDeclarationStatement(570) at 2", "Insert Modifier: final(571) into VariableDeclarationStatement(580) at 0", "Insert SimpleType: MapVector(573) into VariableDeclarationStatement(580) at 1", "Insert VariableDeclarationFragment(579) into VariableDeclarationStatement(580) at 2", "Insert Modifier: final(581) into VariableDeclarationStatement(593) at 0", "Insert ParameterizedType: Set<byte[]>(587) into VariableDeclarationStatement(593) at 1", "Insert VariableDeclarationFragment(592) into VariableDeclarationStatement(593) at 2", "Insert InfixExpression: !=(596) into IfStatement(622) at 0", "Insert Block(621) into IfStatement(622) at 1", "Insert QualifiedName: Map.Entry(522) into SimpleType: Map.Entry(523) at 0", "Insert PrimitiveType: byte(524) into ArrayType: byte[](526) at 0", "Insert Dimension(525) into ArrayType: byte[](526) at 1", "Insert SimpleType: NavigableSet(528) into ParameterizedType: NavigableSet<byte[]>(532) at 0", "Insert ArrayType: byte[](531) into ParameterizedType: NavigableSet<byte[]>(532) at 1", "Insert SimpleName: hbaseScan(536) into MethodInvocation(538) at 0", "Insert SimpleName: getFamilyMap(537) into MethodInvocation(538) at 1", "Insert QualifiedName: Map.Entry(543) into SimpleType: Map.Entry(544) at 0", "Insert PrimitiveType: byte(545) into ArrayType: byte[](547) at 0", "Insert Dimension(546) into ArrayType: byte[](547) at 1", "Insert SimpleType: NavigableSet(549) into ParameterizedType: NavigableSet<byte[]>(553) at 0", "Insert ArrayType: byte[](552) into ParameterizedType: NavigableSet<byte[]>(553) at 1", "Insert SimpleName: String(559) into SimpleType: String(560) at 0", "Insert SimpleName: familyName(561) into VariableDeclarationFragment(569) at 0", "Insert ClassInstanceCreation(568) into VariableDeclarationFragment(569) at 1", "Insert SimpleName: MapVector(572) into SimpleType: MapVector(573) at 0", "Insert SimpleName: familyVector(574) into VariableDeclarationFragment(579) at 0", "Insert MethodInvocation(578) into VariableDeclarationFragment(579) at 1", "Insert SimpleType: Set(583) into ParameterizedType: Set<byte[]>(587) at 0", "Insert ArrayType: byte[](586) into ParameterizedType: Set<byte[]>(587) at 1", "Insert SimpleName: children(588) into VariableDeclarationFragment(592) at 0", "Insert MethodInvocation(591) into VariableDeclarationFragment(592) at 1", "Insert NullLiteral(594) into InfixExpression: !=(596) at 0", "Insert SimpleName: children(595) into InfixExpression: !=(596) at 1", "Insert EnhancedForStatement(620) into Block(621) at 0", "Insert SimpleName: NavigableSet(527) into SimpleType: NavigableSet(528) at 0", "Insert PrimitiveType: byte(529) into ArrayType: byte[](531) at 0", "Insert Dimension(530) into ArrayType: byte[](531) at 1", "Insert SimpleName: NavigableSet(548) into SimpleType: NavigableSet(549) at 0", "Insert PrimitiveType: byte(550) into ArrayType: byte[](552) at 0", "Insert Dimension(551) into ArrayType: byte[](552) at 1", "Insert SimpleType: String(563) into ClassInstanceCreation(568) at 0", "Insert MethodInvocation(566) into ClassInstanceCreation(568) at 1", "Insert QualifiedName: StandardCharsets.UTF_8(567) into ClassInstanceCreation(568) at 2", "Insert SimpleName: getOrCreateFamilyVector(575) into MethodInvocation(578) at 0", "Insert SimpleName: familyName(576) into MethodInvocation(578) at 1", "Insert BooleanLiteral: false(577) into MethodInvocation(578) at 2", "Insert SimpleName: Set(582) into SimpleType: Set(583) at 0", "Insert PrimitiveType: byte(584) into ArrayType: byte[](586) at 0", "Insert Dimension(585) into ArrayType: byte[](586) at 1", "Insert SimpleName: familyEntry(589) into MethodInvocation(591) at 0", "Insert SimpleName: getValue(590) into MethodInvocation(591) at 1", "Insert SingleVariableDeclaration(601) into EnhancedForStatement(620) at 0", "Insert SimpleName: children(602) into EnhancedForStatement(620) at 1", "Insert Block(619) into EnhancedForStatement(620) at 2", "Insert SimpleName: String(562) into SimpleType: String(563) at 0", "Insert SimpleName: familyEntry(564) into MethodInvocation(566) at 0", "Insert SimpleName: getKey(565) into MethodInvocation(566) at 1", "Insert ArrayType: byte[](599) into SingleVariableDeclaration(601) at 0", "Insert SimpleName: childNameBytes(600) into SingleVariableDeclaration(601) at 1", "Insert VariableDeclarationStatement(613) into Block(619) at 0", "Insert ExpressionStatement(618) into Block(619) at 1", "Insert PrimitiveType: byte(597) into ArrayType: byte[](599) at 0", "Insert Dimension(598) into ArrayType: byte[](599) at 1", "Insert Modifier: final(603) into VariableDeclarationStatement(613) at 0", "Insert SimpleType: String(605) into VariableDeclarationStatement(613) at 1", "Insert VariableDeclarationFragment(612) into VariableDeclarationStatement(613) at 2", "Insert MethodInvocation(617) into ExpressionStatement(618) at 0", "Insert SimpleName: String(604) into SimpleType: String(605) at 0", "Insert SimpleName: childName(606) into VariableDeclarationFragment(612) at 0", "Insert ClassInstanceCreation(611) into VariableDeclarationFragment(612) at 1", "Insert SimpleName: getOrCreateColumnVector(614) into MethodInvocation(617) at 0", "Insert SimpleName: familyVector(615) into MethodInvocation(617) at 1", "Insert SimpleName: childName(616) into MethodInvocation(617) at 2", "Insert SimpleType: String(608) into ClassInstanceCreation(611) at 0", "Insert SimpleName: childNameBytes(609) into ClassInstanceCreation(611) at 1", "Insert QualifiedName: StandardCharsets.UTF_8(610) into ClassInstanceCreation(611) at 2", "Insert SimpleName: String(607) into SimpleType: String(608) at 0", "Delete Block(520)"]}}, {"ScanBatch_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 8"]}, {"root": "INS Javadoc to FieldDeclaration at 0", "operations": ["INS Javadoc to FieldDeclaration at 0", "INS TextElement: Main collection of fields' value vectors.  to TagElement at 0", "INS TagElement to Javadoc at 0"]}, {"root": "INS Javadoc to FieldDeclaration at 0", "operations": ["INS Javadoc to FieldDeclaration at 0", "INS TagElement to Javadoc at 0", "INS TextElement: Fields' value vectors indexed by fields' keys.  to TagElement at 0"]}, {"root": "INS Javadoc to FieldDeclaration at 0", "operations": ["INS TagElement to Javadoc at 0", "INS Javadoc to FieldDeclaration at 0", "INS TextElement: true before first inquiry.  to TagElement at 1", "INS TextElement: Whether schema has changed since last inquiry (via #isNewSchema}).  Is to TagElement at 0"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS SingleMemberAnnotation to MethodDeclaration at 0", "INS StringLiteral: \"unchecked\" to SingleMemberAnnotation at 1"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement to Javadoc at 0", "INS TextElement: last call to  to TagElement at 1", "INS TextElement: .  Returns true at first call. to TagElement at 3", "INS SimpleName: isNewSchema to MemberRef at 0", "INS TagElement: @link to TagElement at 2", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: Reports whether schema has changed (field was added or re-added) since to TagElement at 0", "INS MemberRef to TagElement: @link at 0"]}, {"root": "UPDATE from schemaChange to schemaChanged", "operations": ["UPD SimpleName: schemaChange from schemaChange to schemaChanged", "UPD SimpleName: schemaChange from schemaChange to schemaChanged", "UPD SimpleName: schemaChange from schemaChange to schemaChanged", "UPD SimpleName: schemaChange from schemaChange to schemaChanged"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: callBack to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: getSchemaChangedAndReset to MethodInvocation at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: deeperSchemaChanged to VariableDeclarationFragment at 0"]}, {"root": "INS SimpleName: deeperSchemaChanged to InfixExpression: || at 1", "operations": ["INS SimpleName: deeperSchemaChanged to InfixExpression: || at 1"]}, {"root": "UPDATE from \" You should not call getOutgoingContainer() for class %s\" to \"You should not call getOutgoingContainer() for class %s\"", "operations": ["UPD StringLiteral: \" You should not call getOutgoingContainer() for class %s\" from \" You should not call getOutgoingContainer() for class %s\" to \"You should not call getOutgoingContainer() for class %s\""]}, {"root": "INS InfixExpression: + to MethodInvocation at 2", "operations": ["INS StringLiteral: \"The class that was provided, %s, does not correspond to the \" to InfixExpression: + at 0", "INS StringLiteral: \"expected vector type of %s.\" to InfixExpression: + at 1", "INS InfixExpression: + to MethodInvocation at 2"]}, {"root": "INS ReturnStatement to Block at 2", "operations": ["INS QualifiedName: IterOutcome.OK_NEW_SCHEMA to ReturnStatement at 0", "INS ReturnStatement to Block at 2"]}, {"root": "DEL StringLiteral: \"The class that was provided %s does not correspond to the expected vector type of %s.\"", "operations": ["DEL StringLiteral: \"The class that was provided %s does not correspond to the expected vector type of %s.\""]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getSchemaChange", "DEL SimpleName: callBack", "DEL MethodInvocation"]}]}}, {"ScanBatch_diff": {"operations": ["Move FieldDeclaration(144) into TypeDeclaration: class(1468) at 8", "Insert Javadoc(132) into FieldDeclaration(142) at 0", "Insert Javadoc(145) into FieldDeclaration(160) at 0", "Insert TagElement(131) into Javadoc(132) at 0", "Insert TagElement(144) into Javadoc(145) at 0", "Insert Javadoc(1161) into FieldDeclaration(1167) at 0", "Insert SingleMemberAnnotation(1170) into MethodDeclaration(1296) at 0", "Insert Javadoc(1332) into MethodDeclaration(1360) at 0", "Insert TextElement: Main collection of fields' value vectors. (130) into TagElement(131) at 0", "Insert TextElement: Fields' value vectors indexed by fields' keys. (143) into TagElement(144) at 0", "Insert TagElement(1160) into Javadoc(1161) at 0", "Update SimpleName: schemaChange(1152) to schemaChanged", "Insert SimpleName: SuppressWarnings(1168) into SingleMemberAnnotation(1170) at 0", "Insert StringLiteral: \"unchecked\"(1169) into SingleMemberAnnotation(1170) at 1", "Insert TagElement(1331) into Javadoc(1332) at 0", "Insert VariableDeclarationStatement(1345) into Block(1359) at 0", "Insert TextElement: Whether schema has changed since last inquiry (via #isNewSchema}).  Is(1158) into TagElement(1160) at 0", "Insert TextElement: true before first inquiry. (1159) into TagElement(1160) at 1", "Insert TextElement: Reports whether schema has changed (field was added or re-added) since(1325) into TagElement(1331) at 0", "Insert TextElement: last call to (1326) into TagElement(1331) at 1", "Insert TagElement: @link(1329) into TagElement(1331) at 2", "Insert TextElement: .  Returns true at first call.(1330) into TagElement(1331) at 3", "Insert Modifier: final(1338) into VariableDeclarationStatement(1345) at 0", "Insert PrimitiveType: boolean(1339) into VariableDeclarationStatement(1345) at 1", "Insert VariableDeclarationFragment(1344) into VariableDeclarationStatement(1345) at 2", "Insert MemberRef(1328) into TagElement: @link(1329) at 0", "Insert SimpleName: deeperSchemaChanged(1340) into VariableDeclarationFragment(1344) at 0", "Insert MethodInvocation(1343) into VariableDeclarationFragment(1344) at 1", "Update SimpleName: schemaChange(1313) to schemaChanged", "Insert SimpleName: deeperSchemaChanged(1347) into InfixExpression: ||(1348) at 1", "Update StringLiteral: \" You should not call getOutgoingContainer() for class %s\"(1426) to \"You should not call getOutgoingContainer() for class %s\"", "Insert SimpleName: isNewSchema(1327) into MemberRef(1328) at 0", "Insert SimpleName: callBack(1341) into MethodInvocation(1343) at 0", "Insert SimpleName: getSchemaChangedAndReset(1342) into MethodInvocation(1343) at 1", "Update SimpleName: schemaChange(1267) to schemaChanged", "Update SimpleName: schemaChange(1318) to schemaChanged", "Insert InfixExpression: +(1238) into MethodInvocation(1247) at 2", "Insert StringLiteral: \"The class that was provided, %s, does not correspond to the \"(1236) into InfixExpression: +(1238) at 0", "Insert StringLiteral: \"expected vector type of %s.\"(1237) into InfixExpression: +(1238) at 1", "Insert ReturnStatement(669) into Block(670) at 2", "Insert QualifiedName: IterOutcome.OK_NEW_SCHEMA(668) into ReturnStatement(669) at 0", "Delete StringLiteral: \"The class that was provided %s does not correspond to the expected vector type of %s.\"(1221)", "Delete SimpleName: callBack(1314)", "Delete SimpleName: getSchemaChange(1315)", "Delete MethodInvocation(1316)"]}}, {"AbstractMapVector_cluster": {"actions": [{"root": "UPDATE from \"Field [%s] mutated from [%s] to [%s]\" to \"Field [{}] mutated from [{}] to [{}]\"", "operations": ["UPD StringLiteral: \"Field [%s] mutated from [%s] to [%s]\" from \"Field [%s] mutated from [%s] to [%s]\" to \"Field [{}] mutated from [{}] to [{}]\""]}]}}, {"AbstractMapVector_diff": {"operations": ["Update StringLiteral: \"Field [%s] mutated from [%s] to [%s]\"(596) to \"Field [{}] mutated from [{}] to [{}]\""]}}, {"MapVector_cluster": {"actions": [{"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: index to InfixExpression: < at 0", "INS MethodInvocation to InfixExpression: < at 1", "INS SimpleName: v to MethodInvocation at 0", "INS SimpleName: getValueCount to MethodInvocation at 1", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: getAccessor to MethodInvocation at 1", "INS InfixExpression: < to InfixExpression: && at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: != to InfixExpression: && at 0"]}]}}, {"MapVector_diff": {"operations": ["Insert InfixExpression: &&(1124) into IfStatement(1148) at 0", "Move InfixExpression: !=(1116) into InfixExpression: &&(1124) at 0", "Insert InfixExpression: <(1123) into InfixExpression: &&(1124) at 1", "Insert SimpleName: index(1117) into InfixExpression: <(1123) at 0", "Insert MethodInvocation(1122) into InfixExpression: <(1123) at 1", "Insert MethodInvocation(1120) into MethodInvocation(1122) at 0", "Insert SimpleName: getValueCount(1121) into MethodInvocation(1122) at 1", "Insert SimpleName: v(1118) into MethodInvocation(1120) at 0", "Insert SimpleName: getAccessor(1119) into MethodInvocation(1120) at 1"]}}, {"TopNBatch_cluster": {"actions": [{"root": "INS ExpressionStatement to Block at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: recordCount to Assignment: = at 0", "INS NumberLiteral: 0 to Assignment: = at 1", "INS ExpressionStatement to Block at 0"]}]}}, {"TopNBatch_diff": {"operations": ["Insert ExpressionStatement(490) into Block(847) at 0", "Insert Assignment: =(489) into ExpressionStatement(490) at 0", "Insert SimpleName: recordCount(487) into Assignment: =(489) at 0", "Insert NumberLiteral: 0(488) into Assignment: =(489) at 1"]}}, {"OrderedPartitionRecordBatch_cluster": {"actions": [{"root": "INS ExpressionStatement to Block at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS NumberLiteral: 0 to Assignment: = at 1", "INS SimpleName: recordCount to Assignment: = at 0"]}]}}, {"OrderedPartitionRecordBatch_diff": {"operations": ["Insert ExpressionStatement(1833) into Block(2115) at 0", "Insert Assignment: =(1832) into ExpressionStatement(1833) at 0", "Insert SimpleName: recordCount(1830) into Assignment: =(1832) at 0", "Insert NumberLiteral: 0(1831) into Assignment: =(1832) at 1"]}}, {"ProjectRecordBatch_cluster": {"actions": [{"root": "INS ExpressionStatement to Block at 0", "operations": ["INS NumberLiteral: 0 to Assignment: = at 1", "INS SimpleName: recordCount to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0"]}]}}, {"ProjectRecordBatch_diff": {"operations": ["Insert ExpressionStatement(341) into Block(353) at 0", "Insert Assignment: =(340) into ExpressionStatement(341) at 0", "Insert SimpleName: recordCount(338) into Assignment: =(340) at 0", "Insert NumberLiteral: 0(339) into Assignment: =(340) at 1"]}}, {"UnionAllRecordBatch_cluster": {"actions": [{"root": "UPDATE from \"Upstream of Union-All: \" to \"Upstream of Union-All: {}\"", "operations": ["UPD StringLiteral: \"Upstream of Union-All: \" from \"Upstream of Union-All: \" to \"Upstream of Union-All: {}\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: upstream to MethodInvocation at 3"]}, {"root": "INS IfStatement to SwitchStatement at 3", "operations": ["INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS IfStatement to SwitchStatement at 3", "INS InfixExpression: == to IfStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS MethodInvocation to MethodInvocation at 0", "INS Block to IfStatement at 2", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS QualifiedName: IterOutcome.NONE to InfixExpression: == at 1", "INS IfStatement to Block at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: rightSide to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: inferOutputFields to MethodInvocation at 0", "INS InfixExpression: == to IfStatement at 0", "INS Block to IfStatement at 2", "INS SimpleName: iterRight to Assignment: = at 0", "INS SimpleName: iterRight to InfixExpression: == at 0", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from \"Unknown state %s.\" to \"Unexpected state %s.\"", "operations": ["UPD StringLiteral: \"Unknown state %s.\" from \"Unknown state %s.\" to \"Unexpected state %s.\"", "UPD StringLiteral: \"Unknown state %s.\" from \"Unknown state %s.\" to \"Unexpected state %s.\""]}, {"root": "UPDATE from setCurrentRecordBatch to getRecordCount", "operations": ["UPD SimpleName: setCurrentRecordBatch from setCurrentRecordBatch to getRecordCount"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setCurrentRecordBatch to MethodInvocation at 1", "MOV SimpleName: unionAllRecordBatch to MethodInvocation at 1"]}, {"root": "UPDATE from unionAllRecordBatch to getRecordBatch", "operations": ["UPD SimpleName: unionAllRecordBatch from unionAllRecordBatch to getRecordBatch"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from leftSide to rightSide", "operations": ["UPD SimpleName: leftSide from leftSide to rightSide"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: leftSide to MethodInvocation at 0", "MOV SimpleName: getRecordBatch to MethodInvocation at 1"]}, {"root": "UPDATE from getRecordBatch to nextBatch", "operations": ["UPD SimpleName: getRecordBatch from getRecordBatch to nextBatch"]}, {"root": "UPDATE from SchemaChangeException to IllegalStateException", "operations": ["UPD SimpleType: SchemaChangeException from SchemaChangeException to IllegalStateException", "UPD SimpleName: SchemaChangeException from SchemaChangeException to IllegalStateException"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: String to MethodInvocation at 0", "INS SimpleName: format to MethodInvocation at 1", "INS StringLiteral: \"Unknown state %s.\" to MethodInvocation at 2", "INS SimpleName: iterOutcome to MethodInvocation at 3"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: toString"]}, {"root": "DEL SimpleName: NONE", "operations": ["DEL SimpleName: NONE"]}, {"root": "DEL ThrowStatement", "operations": ["DEL StringLiteral: \"The left input of Union-All should not come from an empty data source\"", "DEL SimpleName: SchemaChangeException", "DEL SimpleType: SchemaChangeException", "DEL ClassInstanceCreation", "DEL ThrowStatement"]}, {"root": "DEL SwitchCase", "operations": ["DEL SwitchCase"]}, {"root": "DEL BreakStatement", "operations": ["DEL BreakStatement"]}, {"root": "DEL SwitchCase", "operations": ["DEL SimpleName: NONE", "DEL SwitchCase"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL StringLiteral: \"Schema change detected in the left input of Union-All. This is not currently supported\"", "operations": ["DEL StringLiteral: \"Schema change detected in the left input of Union-All. This is not currently supported\""]}]}}, {"UnionAllRecordBatch_diff": {"operations": ["Update StringLiteral: \"Upstream of Union-All: \"(307) to \"Upstream of Union-All: {}\"", "Move SimpleName: upstream(308) into MethodInvocation(309) at 3", "Insert IfStatement(1262) into SwitchStatement(1280) at 3", "Insert InfixExpression: ==(1234) into IfStatement(1262) at 0", "Insert Block(1257) into IfStatement(1262) at 1", "Insert Block(1261) into IfStatement(1262) at 2", "Insert MethodInvocation(1232) into InfixExpression: ==(1234) at 0", "Insert NumberLiteral: 0(1233) into InfixExpression: ==(1234) at 1", "Insert ExpressionStatement(1240) into Block(1257) at 0", "Insert IfStatement(1256) into Block(1257) at 1", "Insert ExpressionStatement(1260) into Block(1261) at 0", "Update StringLiteral: \"Unknown state %s.\"(1213) to \"Unexpected state %s.\"", "Insert MethodInvocation(1230) into MethodInvocation(1232) at 0", "Update SimpleName: setCurrentRecordBatch(1244) to getRecordCount", "Move SimpleName: setCurrentRecordBatch(1244) into MethodInvocation(1232) at 1", "Insert Assignment: =(1239) into ExpressionStatement(1240) at 0", "Insert InfixExpression: ==(1243) into IfStatement(1256) at 0", "Insert Block(1251) into IfStatement(1256) at 1", "Insert Block(1255) into IfStatement(1256) at 2", "Insert MethodInvocation(1259) into ExpressionStatement(1260) at 0", "Update StringLiteral: \"Unknown state %s.\"(1269) to \"Unexpected state %s.\"", "Insert SimpleName: rightSide(1228) into MethodInvocation(1230) at 0", "Update SimpleName: unionAllRecordBatch(1243) to getRecordBatch", "Move SimpleName: unionAllRecordBatch(1243) into MethodInvocation(1230) at 1", "Insert SimpleName: iterRight(1235) into Assignment: =(1239) at 0", "Insert MethodInvocation(1238) into Assignment: =(1239) at 1", "Insert SimpleName: iterRight(1241) into InfixExpression: ==(1243) at 0", "Insert QualifiedName: IterOutcome.NONE(1242) into InfixExpression: ==(1243) at 1", "Move ExpressionStatement(1252) into Block(1251) at 0", "Move ExpressionStatement(1256) into Block(1251) at 1", "Move ExpressionStatement(1239) into Block(1255) at 0", "Insert SimpleName: inferOutputFields(1258) into MethodInvocation(1259) at 0", "Update SimpleName: leftSide(1245) to rightSide", "Move SimpleName: leftSide(1245) into MethodInvocation(1238) at 0", "Update SimpleName: getRecordBatch(1246) to nextBatch", "Move SimpleName: getRecordBatch(1246) into MethodInvocation(1238) at 1", "Update SimpleType: SchemaChangeException(1410) to IllegalStateException", "Insert MethodInvocation(1421) into ClassInstanceCreation(1422) at 1", "Update SimpleName: SchemaChangeException(1409) to IllegalStateException", "Insert SimpleName: String(1417) into MethodInvocation(1421) at 0", "Insert SimpleName: format(1418) into MethodInvocation(1421) at 1", "Insert StringLiteral: \"Unknown state %s.\"(1419) into MethodInvocation(1421) at 2", "Insert SimpleName: iterOutcome(1420) into MethodInvocation(1421) at 3", "Delete SimpleName: toString(309)", "Delete MethodInvocation(310)", "Delete SimpleName: NONE(1201)", "Delete SimpleName: SchemaChangeException(1203)", "Delete SimpleType: SchemaChangeException(1204)", "Delete StringLiteral: \"The left input of Union-All should not come from an empty data source\"(1205)", "Delete ClassInstanceCreation(1206)", "Delete ThrowStatement(1207)", "Delete SwitchCase(1208)", "Delete BreakStatement(1240)", "Delete SimpleName: NONE(1241)", "Delete SwitchCase(1242)", "Delete MethodInvocation(1247)", "Delete MethodInvocation(1248)", "Delete ExpressionStatement(1249)", "Delete StringLiteral: \"Schema change detected in the left input of Union-All. This is not currently supported\"(1411)"]}}, {"UnorderedReceiverBatch_cluster": {"actions": [{"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: batchLoader to MethodInvocation at 0", "INS SimpleName: resetRecordCount to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0"]}]}}, {"UnorderedReceiverBatch_diff": {"operations": ["Insert ExpressionStatement(446) into Block(637) at 0", "Insert MethodInvocation(445) into ExpressionStatement(446) at 0", "Insert SimpleName: batchLoader(443) into MethodInvocation(445) at 0", "Insert SimpleName: resetRecordCount(444) into MethodInvocation(445) at 1"]}}, {"IteratorValidatorBatchIterator_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 15", "operations": ["INS QualifiedName: org.apache.drill.exec.record.RecordBatch.IterOutcome to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 15"]}, {"root": "INS Initializer to TypeDeclaration: class at 7", "operations": ["INS SimpleName: instanceCount to PrefixExpression: ++ at 0", "INS ExpressionStatement to Block at 0", "INS Initializer to TypeDeclaration: class at 7", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: instNum to Assignment: = at 0", "INS PrefixExpression: ++ to Assignment: = at 1", "INS Block to Initializer at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 8", "operations": ["INS TagElement to Javadoc at 0", "INS Modifier: final to FieldDeclaration at 2", "INS TextElement: The upstream batch, calls to which and return values from which are to TagElement at 0", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS Javadoc to FieldDeclaration at 0", "INS Modifier: private to FieldDeclaration at 1", "INS TextElement: checked by this validator. to TagElement at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS Javadoc to FieldDeclaration at 0", "INS Modifier: private to FieldDeclaration at 1", "INS SimpleName: exceptionState to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 10", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS TextElement: Exception state of incoming batch; last value thrown by its next() to TagElement at 0", "INS SimpleType: Throwable to FieldDeclaration at 2", "INS TextElement: method.  to TagElement at 1", "INS TagElement to Javadoc at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 11", "operations": ["INS Modifier: private to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: IterOutcome to SimpleType: IterOutcome at 0", "INS TagElement to Javadoc at 0", "INS TextElement: Main state of incoming batch; last value returned by its next() method.  to TagElement at 0", "INS SimpleType: IterOutcome to FieldDeclaration at 2", "INS SimpleName: batchState to VariableDeclarationFragment at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS Javadoc to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 11"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 12", "operations": ["INS SimpleName: BatchSchema to SimpleType: BatchSchema at 0", "INS Javadoc to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 12", "INS NullLiteral to VariableDeclarationFragment at 1", "INS Modifier: private to FieldDeclaration at 1", "INS TagElement to Javadoc at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS TextElement: yet. Currently for logging/debuggability only.  to TagElement at 1", "INS SimpleType: BatchSchema to FieldDeclaration at 2", "INS TextElement: Last schema retrieved after OK_NEW_SCHEMA or OK from next().  Null if none to TagElement at 0", "INS SimpleName: lastSchema to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 13", "operations": ["INS Modifier: private to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 13", "INS SimpleType: BatchSchema to FieldDeclaration at 2", "INS TextElement: Last schema retrieved after OK_NEW_SCHEMA from next().  Null if none yet. to TagElement at 0", "INS TextElement: Currently for logging/debuggability only.  to TagElement at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: BatchSchema to SimpleType: BatchSchema at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: lastNewSchema to VariableDeclarationFragment at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS Javadoc to FieldDeclaration at 0"]}, {"root": "INS EnumDeclaration to TypeDeclaration: class at 14", "operations": ["INS Javadoc to EnumConstantDeclaration at 0", "INS TextElement: (Only needs enough to validate returns of OK.) to TagElement at 2", "INS TagElement to Javadoc at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: IterOutcome to TagElement: @link at 0", "INS SimpleName: INITIAL_NO_SCHEMA to EnumConstantDeclaration at 1", "INS TextElement: now.  to TagElement at 1", "INS TagElement to Javadoc at 0", "INS TextElement: Have gotten OK_NEW_SCHEMA already and not terminated.  OK is allowed to TagElement at 0", "INS SimpleName: HAVE_SCHEMA to EnumConstantDeclaration at 1", "INS TextElement:  return value sequence validation state. to TagElement at 1", "INS TagElement to Javadoc at 0", "INS TextElement: terminated.  OK is not allowed yet.  to TagElement at 1", "INS Javadoc to EnumConstantDeclaration at 0", "INS TagElement: @link to TagElement at 0", "INS TextElement: Initial state:  Have not gotten any OK_NEW_SCHEMA yet and not to TagElement at 0", "INS EnumConstantDeclaration to EnumDeclaration at 4", "INS EnumConstantDeclaration to EnumDeclaration at 3", "INS SimpleName: TERMINAL to EnumConstantDeclaration at 1", "INS TextElement: Terminal state:  Have seen NONE or STOP.  Nothing more is allowed.  to TagElement at 0", "INS Modifier: private to EnumDeclaration at 1", "INS Javadoc to EnumConstantDeclaration at 0", "INS EnumConstantDeclaration to EnumDeclaration at 5", "INS Javadoc to EnumDeclaration at 0", "INS SimpleName: ValidationState to EnumDeclaration at 2", "INS EnumDeclaration to TypeDeclaration: class at 14"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 15", "operations": ["INS SimpleType: ValidationState to FieldDeclaration at 2", "INS TextElement: High-level IterOutcome sequence state.  to TagElement at 0", "INS Modifier: private to FieldDeclaration at 1", "INS SimpleName: validationState to VariableDeclarationFragment at 0", "INS QualifiedName: ValidationState.INITIAL_NO_SCHEMA to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 15", "INS Javadoc to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: ValidationState to SimpleType: ValidationState at 0", "INS TagElement to Javadoc at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 17", "operations": ["INS StringLiteral: \", validationState = \" to InfixExpression: + at 4", "INS InfixExpression: + to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: incoming to InfixExpression: + at 10", "INS SuperMethodInvocation to InfixExpression: + at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: String to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 17", "INS StringLiteral: \"[\" to InfixExpression: + at 1", "INS StringLiteral: \"]\" to InfixExpression: + at 11", "INS SimpleName: validationState to InfixExpression: + at 5", "INS Block to MethodDeclaration at 4", "INS SimpleName: batchState to InfixExpression: + at 7", "INS SimpleName: toString to MethodDeclaration at 3", "INS SimpleName: instNum to InfixExpression: + at 3", "INS StringLiteral: \", ... \" to InfixExpression: + at 8", "INS StringLiteral: \"instNum = \" to InfixExpression: + at 2", "INS StringLiteral: \", batchState = \" to InfixExpression: + at 6", "INS SimpleName: String to SimpleType: String at 0", "INS StringLiteral: \"; incoming = \" to InfixExpression: + at 9", "INS SimpleName: toString to SuperMethodInvocation at 0"]}, {"root": "INS Modifier: private to FieldDeclaration at 0", "operations": ["INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS Javadoc to FieldDeclaration at 0", "operations": ["INS TextElement: For logging/debuggability only.  to TagElement at 0", "INS Javadoc to FieldDeclaration at 0", "INS TagElement to Javadoc at 0"]}, {"root": "INS Modifier: static to FieldDeclaration at 2", "operations": ["INS Modifier: static to FieldDeclaration at 2"]}, {"root": "INS Modifier: volatile to FieldDeclaration at 3", "operations": ["INS Modifier: volatile to FieldDeclaration at 3"]}, {"root": "INS PrimitiveType: int to FieldDeclaration at 4", "operations": ["INS PrimitiveType: int to FieldDeclaration at 4"]}, {"root": "INS Javadoc to FieldDeclaration at 0", "operations": ["INS TagElement to Javadoc at 0", "INS Javadoc to FieldDeclaration at 0", "INS TextElement: For logging/debuggability only.  to TagElement at 0"]}, {"root": "INS PrimitiveType: int to FieldDeclaration at 3", "operations": ["INS PrimitiveType: int to FieldDeclaration at 3"]}, {"root": "INS VariableDeclarationFragment to FieldDeclaration at 4", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: instNum to VariableDeclarationFragment at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 4", "MOV SimpleType: RecordBatch to FieldDeclaration at 3"]}, {"root": "INS Javadoc to FieldDeclaration at 0", "operations": ["INS TextElement: only.  to TagElement at 1", "INS Javadoc to FieldDeclaration at 0", "INS TextElement: Incoming batch's type (simple class name); for logging/debuggability to TagElement at 0", "INS TagElement to Javadoc at 0"]}, {"root": "INS Modifier: final to FieldDeclaration at 2", "operations": ["INS Modifier: final to FieldDeclaration at 2"]}, {"root": "INS SimpleType: String to FieldDeclaration at 3", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to FieldDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: operation to SingleVariableDeclaration at 1"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS SimpleName: instNum to MethodInvocation at 3", "INS Block to IfStatement at 1", "INS ThrowStatement to Block at 2", "INS SwitchCase to SwitchStatement at 14", "INS SimpleName: format to MethodInvocation at 1", "INS ThrowStatement to SwitchStatement at 18", "INS QualifiedName: ValidationState.TERMINAL to Assignment: = at 1", "INS SimpleName: batchTypeName to MethodInvocation at 4", "INS SimpleName: batchState to MethodInvocation at 3", "INS MethodInvocation to ClassInstanceCreation at 1", "INS Block to CatchClause at 1", "INS SimpleName: trace to MethodInvocation at 1", "INS SimpleName: exceptionState to Assignment: = at 0", "INS SwitchCase to SwitchStatement at 1", "INS InfixExpression: != to IfStatement at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS ExpressionStatement to SwitchStatement at 12", "INS SimpleName: validationState to Assignment: = at 0", "INS SimpleName: batchState to MethodInvocation at 3", "INS SimpleType: AssertionError to ClassInstanceCreation at 0", "INS SimpleName: instNum to MethodInvocation at 3", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: exceptionState to MethodInvocation at 6", "INS ExpressionStatement to SwitchStatement at 9", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS QualifiedName: ValidationState.HAVE_SCHEMA to InfixExpression: != at 1", "INS SimpleName: Error to SimpleType: Error at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: OK_NEW_SCHEMA to MethodInvocation at 4", "INS StringLiteral: \"next() returned %s without first returning %s [#%d, %s]\" to MethodInvocation at 2", "INS SwitchCase to SwitchStatement at 4", "INS SimpleName: validationState to InfixExpression: != at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS BreakStatement to SwitchStatement at 3", "INS SimpleName: logger to MethodInvocation at 0", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS SimpleName: String to MethodInvocation at 0", "INS SimpleName: trace to MethodInvocation at 1", "INS SimpleName: String to MethodInvocation at 0", "INS SimpleName: validationState to InfixExpression: != at 0", "INS SimpleName: exceptionState to InfixExpression: != at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: IterOutcome to SimpleType: IterOutcome at 0", "INS SimpleName: prevBatchState to VariableDeclarationFragment at 0", "INS SwitchCase to SwitchStatement at 7", "INS SimpleName: batchTypeName to MethodInvocation at 4", "INS SimpleName: batchTypeName to MethodInvocation at 6", "INS SimpleName: instNum to MethodInvocation at 5", "INS BreakStatement to SwitchStatement at 16", "INS StringLiteral: \"[#{}, on {}]: incoming next() exception: ({} ->) {}\" to MethodInvocation at 2", "INS MethodInvocation to ClassInstanceCreation at 1", "INS TryStatement to Block at 2", "INS SimpleName: batchState to InfixExpression: + at 3", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS SimpleName: e to Assignment: = at 1", "INS SimpleName: NONE to SwitchCase at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: logger to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: exceptionState to MethodInvocation at 7", "INS SimpleName: AssertionError to SimpleType: AssertionError at 0", "INS SwitchStatement to Block at 4", "INS SimpleName: instNum to MethodInvocation at 5", "INS StringLiteral: \"next() returned %s without first returning %s [#%d, %s]\" to MethodInvocation at 2", "INS SimpleName: batchState to VariableDeclarationFragment at 1", "INS Block to IfStatement at 1", "INS SimpleName: batchState to MethodInvocation at 6", "INS SimpleName: IllegalStateException to SimpleType: IllegalStateException at 0", "INS IfStatement to SwitchStatement at 8", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"[#{}; on {}]: incoming next() return: ({} ->) {}\" to MethodInvocation at 2", "INS SimpleName: validationState to Assignment: = at 0", "INS SimpleName: batchTypeName to MethodInvocation at 4", "INS Assignment: = to ExpressionStatement at 0", "INS StringLiteral: \"[#{}; on {}]: next() called.\" to MethodInvocation at 2", "INS ClassInstanceCreation to ThrowStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleType: Error to UnionType: RuntimeException|Error at 1", "INS Block to TryStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS BreakStatement to SwitchStatement at 6", "INS SimpleName: prevBatchState to MethodInvocation at 5", "INS SimpleName: format to MethodInvocation at 1", "INS BreakStatement to SwitchStatement at 10", "INS SwitchCase to SwitchStatement at 15", "INS Block to IfStatement at 1", "INS QualifiedName: ValidationState.HAVE_SCHEMA to InfixExpression: != at 1", "INS SimpleName: instNum to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \" value \" to InfixExpression: + at 2", "INS SimpleName: batchState to SwitchStatement at 0", "INS Block to MethodDeclaration at 4", "INS InfixExpression: + to MethodInvocation at 2", "INS CatchClause to TryStatement at 1", "INS IfStatement to Block at 0", "INS ExpressionStatement to SwitchStatement at 2", "INS SimpleName: batchTypeName to MethodInvocation at 6", "INS ExpressionStatement to Block at 1", "INS SimpleName: batchTypeName to MethodInvocation at 4", "INS ExpressionStatement to Block at 0", "INS SimpleName: exceptionState to MethodInvocation at 5", "INS TypeLiteral to MethodInvocation at 0", "INS ThrowStatement to Block at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: trace to MethodInvocation at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS BreakStatement to SwitchStatement at 13", "INS UnionType: RuntimeException|Error to SingleVariableDeclaration at 0", "INS SimpleName: OUT_OF_MEMORY to SwitchCase at 0", "INS SimpleType: IllegalStateException to ClassInstanceCreation at 0", "INS SimpleName: NOT_YET to SwitchCase at 0", "INS SimpleName: batchState to MethodInvocation at 6", "INS VariableDeclarationStatement to Block at 1", "INS InfixExpression: != to IfStatement at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS StringLiteral: \"next() [on #%d; %s] called again after it threw %s (after\" to InfixExpression: + at 0", "INS SimpleName: String to MethodInvocation at 0", "INS SimpleType: RuntimeException to UnionType: RuntimeException|Error at 0", "INS StringLiteral: \"Unhandled new \" to InfixExpression: + at 0", "INS SimpleName: OK_NEW_SCHEMA to MethodInvocation at 4", "INS SimpleName: logger to MethodInvocation at 0", "INS SimpleName: STOP to SwitchCase at 0", "INS SimpleType: IterOutcome to TypeLiteral at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SwitchCase to SwitchStatement at 17", "INS SimpleName: instNum to MethodInvocation at 3", "INS SimpleName: e to ThrowStatement at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: IllegalStateException to SimpleType: IllegalStateException at 0", "INS StringLiteral: \" returning %s).  Caller should not have called next() again.\" to InfixExpression: + at 1", "INS SwitchCase to SwitchStatement at 11", "INS SimpleName: OK to SwitchCase at 0", "INS SimpleName: prevBatchState to MethodInvocation at 5", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: format to MethodInvocation at 1", "INS IfStatement to SwitchStatement at 5", "INS QualifiedName: ValidationState.HAVE_SCHEMA to Assignment: = at 1", "INS NullLiteral to InfixExpression: != at 0", "INS SimpleName: OK_NEW_SCHEMA to SwitchCase at 0", "INS SimpleType: IllegalStateException to ClassInstanceCreation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from state to instanceCount", "operations": ["UPD SimpleName: state from state to instanceCount"]}, {"root": "UPDATE from first to batchTypeName", "operations": ["UPD SimpleName: first from first to batchTypeName"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: batchTypeName to Assignment: = at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: batchTypeName to MethodInvocation at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: trace to MethodInvocation at 1", "INS SimpleName: instNum to MethodInvocation at 3", "INS SimpleName: logger to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS StringLiteral: \"[#{}; on {}]: Being constructed.\" to MethodInvocation at 2"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: batchState to InfixExpression: == at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \" on batch [#%d, %s].\" to InfixExpression: + at 1", "INS IfStatement to Block at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: operation to MethodInvocation at 3", "INS StringLiteral: \"Batch data read operation (%s) attempted before first next() call\" to InfixExpression: + at 0", "INS Block to IfStatement at 1", "INS NullLiteral to InfixExpression: == at 1", "INS ThrowStatement to Block at 0", "INS SimpleName: batchTypeName to MethodInvocation at 5", "INS SimpleName: format to MethodInvocation at 1", "INS SimpleName: instNum to MethodInvocation at 4", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: String to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: logger to MethodInvocation at 0", "INS SimpleName: batchTypeName to MethodInvocation at 4", "INS SimpleName: batchState to MethodInvocation at 5", "INS SimpleName: trace to MethodInvocation at 1", "INS SimpleName: instNum to MethodInvocation at 3", "INS StringLiteral: \"[#{}; on {}]: close() called, state = {} / {}.\" to MethodInvocation at 2", "INS SimpleName: exceptionState to MethodInvocation at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "UPDATE from state to batchState", "operations": ["UPD SimpleName: state from state to batchState", "UPD SimpleName: state from state to batchState", "UPD SimpleName: state from state to batchState", "UPD SimpleName: state from state to batchState", "UPD SimpleName: state from state to batchState", "UPD SimpleName: state from state to batchState", "UPD SimpleName: state from state to batchState"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: IterOutcome to VariableDeclarationStatement at 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1", "MOV MethodInvocation to MethodInvocation at 5"]}, {"root": "INS StringLiteral: \"iterator()\" to MethodInvocation at 1", "operations": ["INS StringLiteral: \"iterator()\" to MethodInvocation at 1"]}, {"root": "INS StringLiteral: \"getRecordCount()\" to MethodInvocation at 1", "operations": ["INS StringLiteral: \"getRecordCount()\" to MethodInvocation at 1"]}, {"root": "INS StringLiteral: \"getSelectionVector2()\" to MethodInvocation at 1", "operations": ["INS StringLiteral: \"getSelectionVector2()\" to MethodInvocation at 1"]}, {"root": "INS StringLiteral: \"getSelectionVector4()\" to MethodInvocation at 1", "operations": ["INS StringLiteral: \"getSelectionVector4()\" to MethodInvocation at 1"]}, {"root": "INS StringLiteral: \"getValueVectorId(SchemaPath)\" to MethodInvocation at 1", "operations": ["INS StringLiteral: \"getValueVectorId(SchemaPath)\" to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 6", "MOV ExpressionStatement to Block at 2", "MOV IfStatement to Block at 1", "MOV IfStatement to Block at 5"]}, {"root": "INS StringLiteral: \"getWritableBatch()\" to MethodInvocation at 1", "operations": ["INS StringLiteral: \"getWritableBatch()\" to MethodInvocation at 1"]}, {"root": "UPDATE from getName to getSimpleName", "operations": ["UPD SimpleName: getName from getName to getSimpleName"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: IllegalStateException to ClassInstanceCreation at 0"]}, {"root": "INS InfixExpression: || to IfStatement at 0", "operations": ["INS SimpleName: NONE to InfixExpression: == at 1", "INS InfixExpression: == to InfixExpression: || at 0", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: batchState to InfixExpression: == at 0", "INS InfixExpression: == to InfixExpression: || at 1", "INS SimpleName: STOP to InfixExpression: == at 1"]}, {"root": "UPDATE from \" You should not call getOutgoingContainer() for class %s\" to \"You should not call getOutgoingContainer() for class %s\"", "operations": ["UPD StringLiteral: \" You should not call getOutgoingContainer() for class %s\" from \" You should not call getOutgoingContainer() for class %s\" to \"You should not call getOutgoingContainer() for class %s\""]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: IllegalStateException to ClassInstanceCreation at 0"]}, {"root": "INS InfixExpression: + to MethodInvocation at 2", "operations": ["INS StringLiteral: \" on batch [#%d, %s] returned %s (not %s or %s).\" to InfixExpression: + at 1", "INS StringLiteral: \"Batch data read operation (%s) attempted when last next() call\" to InfixExpression: + at 0", "INS InfixExpression: + to MethodInvocation at 2"]}, {"root": "INS SimpleName: operation to MethodInvocation at 3", "operations": ["INS SimpleName: operation to MethodInvocation at 3"]}, {"root": "INS SimpleName: instNum to MethodInvocation at 4", "operations": ["INS SimpleName: instNum to MethodInvocation at 4"]}, {"root": "INS SimpleName: batchTypeName to MethodInvocation at 5", "operations": ["INS SimpleName: batchTypeName to MethodInvocation at 5"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: state to MethodInvocation at 6", "MOV SimpleName: name to MethodInvocation at 7"]}, {"root": "UPDATE from name to OK", "operations": ["UPD SimpleName: name from name to OK"]}, {"root": "INS SimpleName: OK_NEW_SCHEMA to MethodInvocation at 8", "operations": ["INS SimpleName: OK_NEW_SCHEMA to MethodInvocation at 8"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV Assignment: = to ExpressionStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleType: BatchSchema to VariableDeclarationStatement at 1", "INS SimpleName: BatchSchema to SimpleType: BatchSchema at 0", "INS SimpleName: prevLastNewSchema to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: lastNewSchema to VariableDeclarationFragment at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2", "INS SimpleName: lastSchema to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS InfixExpression: == to IfStatement at 0", "INS SimpleName: OK_NEW_SCHEMA to InfixExpression: == at 1", "INS SimpleName: lastSchema to Assignment: = at 1", "INS IfStatement to Block at 3", "INS ExpressionStatement to Block at 0", "INS SimpleName: lastNewSchema to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: batchState to InfixExpression: == at 0"]}, {"root": "INS IfStatement to Block at 4", "operations": ["INS ExpressionStatement to Block at 0", "INS StringLiteral: \"equal\" to ConditionalExpression at 1", "INS SimpleName: prevLastNewSchema to MethodInvocation at 2", "INS StringLiteral: \"\\n  schema:\" to InfixExpression: + at 1", "INS SimpleName: lastSchema to MethodInvocation at 0", "INS StringLiteral: \"\\n  prev. new ({}):\" to InfixExpression: + at 3", "INS IfStatement to Block at 4", "INS StringLiteral: \"not equal\" to ConditionalExpression at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ConditionalExpression at 0", "INS SimpleName: logger to MethodInvocation at 0", "INS SimpleName: trace to MethodInvocation at 1", "INS SimpleName: instNum to MethodInvocation at 3", "INS SimpleName: lastSchema to MethodInvocation at 6", "INS StringLiteral: \"\\n    {}\" to InfixExpression: + at 4", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \"\\n    {}, \" to InfixExpression: + at 2", "INS ConditionalExpression to MethodInvocation at 7", "INS Block to IfStatement at 1", "INS SimpleName: batchTypeName to MethodInvocation at 4", "INS SimpleName: isTraceEnabled to MethodInvocation at 1", "INS SimpleName: logger to MethodInvocation at 0", "INS SimpleName: prevLastNewSchema to MethodInvocation at 8", "INS StringLiteral: \"[#{}; on {}]: incoming next() return: #records = {}, \" to InfixExpression: + at 0"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV SimpleName: state to InfixExpression: == at 0"]}, {"root": "UPDATE from first to validationState", "operations": ["UPD SimpleName: first from first to validationState"]}, {"root": "INS QualifiedName: ValidationState.TERMINAL to Assignment: = at 1", "operations": ["INS QualifiedName: ValidationState.TERMINAL to Assignment: = at 1"]}, {"root": "INS SimpleName: OK to InfixExpression: == at 1", "operations": ["INS SimpleName: OK to InfixExpression: == at 1"]}, {"root": "INS SimpleName: OK_NEW_SCHEMA to InfixExpression: == at 1", "operations": ["INS SimpleName: OK_NEW_SCHEMA to InfixExpression: == at 1"]}, {"root": "INS Modifier: final to VariableDeclarationStatement at 0", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: IllegalStateException to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: IllegalStateException to ClassInstanceCreation at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS StringLiteral: \"next() [on #%d, %s] called again after it returned %s.\" to InfixExpression: + at 0", "INS SimpleName: String to MethodInvocation at 0", "INS SimpleName: batchState to MethodInvocation at 5", "INS SimpleName: instNum to MethodInvocation at 3", "INS StringLiteral: \"  Caller should not have called next() again.\" to InfixExpression: + at 1", "INS SimpleName: format to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: batchTypeName to MethodInvocation at 4", "INS MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "INS SimpleName: prevLastSchema to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: prevLastSchema to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from schema to lastSchema", "operations": ["UPD SimpleName: schema from schema to lastSchema", "UPD SimpleName: schema from schema to lastSchema", "UPD SimpleName: schema from schema to lastSchema"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "INS ThrowStatement to Block at 0", "operations": ["INS StringLiteral: \"Incoming batch [#%d, %s] has a null schema. This is not allowed.\" to MethodInvocation at 2", "INS ClassInstanceCreation to ThrowStatement at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: String to MethodInvocation at 0", "INS SimpleType: IllegalStateException to ClassInstanceCreation at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: format to MethodInvocation at 1", "INS SimpleName: batchTypeName to MethodInvocation at 4", "INS SimpleName: instNum to MethodInvocation at 3", "INS SimpleName: IllegalStateException to SimpleType: IllegalStateException at 0"]}, {"root": "INS SimpleType: IllegalStateException to ClassInstanceCreation at 0", "operations": ["INS SimpleName: IllegalStateException to SimpleType: IllegalStateException at 0", "INS SimpleType: IllegalStateException to ClassInstanceCreation at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS SimpleName: instNum to MethodInvocation at 3", "INS SimpleName: String to MethodInvocation at 0", "INS SimpleName: batchTypeName to MethodInvocation at 4", "INS SimpleName: format to MethodInvocation at 1", "INS StringLiteral: \"Incoming batch [#%d, %s] has an empty schema. This is not allowed.\" to MethodInvocation at 2", "INS MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "INS SimpleType: IllegalStateException to ClassInstanceCreation at 0", "operations": ["INS SimpleName: IllegalStateException to SimpleType: IllegalStateException at 0", "INS SimpleType: IllegalStateException to ClassInstanceCreation at 0"]}, {"root": "INS InfixExpression: + to MethodInvocation at 2", "operations": ["INS StringLiteral: \" limit of %d\" to InfixExpression: + at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \"Incoming batch [#%d, %s] has size %d, which is beyond the\" to InfixExpression: + at 0"]}, {"root": "INS SimpleName: instNum to MethodInvocation at 3", "operations": ["INS SimpleName: instNum to MethodInvocation at 3"]}, {"root": "INS SimpleName: batchTypeName to MethodInvocation at 4", "operations": ["INS SimpleName: batchTypeName to MethodInvocation at 4"]}, {"root": "INS MethodInvocation to MethodInvocation at 5", "operations": ["INS SimpleName: getRecordCount to MethodInvocation at 1", "INS SimpleName: incoming to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 5"]}, {"root": "DEL QualifiedName: IterOutcome.NOT_YET", "operations": ["DEL QualifiedName: IterOutcome.NOT_YET"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL StringLiteral: \"You tried to do a batch data read operation when you were in a state of %s.  You can only do this type of operation when you are in a state of OK or OK_NEW_SCHEMA.\"", "operations": ["DEL StringLiteral: \"You tried to do a batch data read operation when you were in a state of %s.  You can only do this type of operation when you are in a state of OK or OK_NEW_SCHEMA.\""]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL QualifiedName: IterOutcome.NONE", "DEL InfixExpression: =="]}, {"root": "DEL StringLiteral: \"The incoming iterator has previously moved to a state of NONE. You should not be attempting to call next() again.\"", "operations": ["DEL StringLiteral: \"The incoming iterator has previously moved to a state of NONE. You should not be attempting to call next() again.\""]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !", "DEL SimpleName: first"]}, {"root": "DEL QualifiedName: IterOutcome.OK", "operations": ["DEL QualifiedName: IterOutcome.OK"]}, {"root": "DEL QualifiedName: IterOutcome.OK_NEW_SCHEMA", "operations": ["DEL QualifiedName: IterOutcome.OK_NEW_SCHEMA"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: state", "DEL ReturnStatement"]}, {"root": "DEL StringLiteral: \"Incoming batch has an empty schema. This is not allowed.\"", "operations": ["DEL StringLiteral: \"Incoming batch has an empty schema. This is not allowed.\""]}, {"root": "DEL StringLiteral: \"Incoming batch of %s has size %d, which is beyond the limit of %d\"", "operations": ["DEL StringLiteral: \"Incoming batch of %s has size %d, which is beyond the limit of %d\""]}, {"root": "DEL Block", "operations": ["DEL SimpleName: first", "DEL Block", "DEL ExpressionStatement", "DEL IfStatement", "DEL Block"]}]}}, {"IteratorValidatorBatchIterator_diff": {"operations": ["Insert ImportDeclaration(46) into CompilationUnit(825) at 15", "Insert QualifiedName: org.apache.drill.exec.record.RecordBatch.IterOutcome(45) into ImportDeclaration(46) at 0", "Insert Initializer(97) into TypeDeclaration: class(824) at 7", "Insert FieldDeclaration(108) into TypeDeclaration: class(824) at 8", "Insert FieldDeclaration(130) into TypeDeclaration: class(824) at 10", "Insert FieldDeclaration(140) into TypeDeclaration: class(824) at 11", "Insert FieldDeclaration(151) into TypeDeclaration: class(824) at 12", "Insert FieldDeclaration(162) into TypeDeclaration: class(824) at 13", "Insert EnumDeclaration(188) into TypeDeclaration: class(824) at 14", "Insert FieldDeclaration(198) into TypeDeclaration: class(824) at 15", "Insert MethodDeclaration(250) into TypeDeclaration: class(824) at 17", "Insert Modifier: private(51) into FieldDeclaration(64) at 0", "Insert Javadoc(74) into FieldDeclaration(81) at 0", "Insert Modifier: static(76) into FieldDeclaration(81) at 2", "Insert Modifier: volatile(77) into FieldDeclaration(81) at 3", "Insert PrimitiveType: int(78) into FieldDeclaration(81) at 4", "Insert Javadoc(84) into FieldDeclaration(90) at 0", "Insert PrimitiveType: int(87) into FieldDeclaration(90) at 3", "Insert VariableDeclarationFragment(89) into FieldDeclaration(90) at 4", "Insert Block(96) into Initializer(97) at 0", "Insert Javadoc(101) into FieldDeclaration(108) at 0", "Insert Modifier: private(102) into FieldDeclaration(108) at 1", "Insert Modifier: final(103) into FieldDeclaration(108) at 2", "Move SimpleType: RecordBatch(79) into FieldDeclaration(108) at 3", "Move VariableDeclarationFragment(81) into FieldDeclaration(108) at 4", "Insert Javadoc(112) into FieldDeclaration(119) at 0", "Insert Modifier: final(114) into FieldDeclaration(119) at 2", "Insert SimpleType: String(116) into FieldDeclaration(119) at 3", "Insert Javadoc(123) into FieldDeclaration(130) at 0", "Insert Modifier: private(124) into FieldDeclaration(130) at 1", "Insert SimpleType: Throwable(126) into FieldDeclaration(130) at 2", "Insert VariableDeclarationFragment(129) into FieldDeclaration(130) at 3", "Insert Javadoc(133) into FieldDeclaration(140) at 0", "Insert Modifier: private(134) into FieldDeclaration(140) at 1", "Insert SimpleType: IterOutcome(136) into FieldDeclaration(140) at 2", "Insert VariableDeclarationFragment(139) into FieldDeclaration(140) at 3", "Insert Javadoc(144) into FieldDeclaration(151) at 0", "Insert Modifier: private(145) into FieldDeclaration(151) at 1", "Insert SimpleType: BatchSchema(147) into FieldDeclaration(151) at 2", "Insert VariableDeclarationFragment(150) into FieldDeclaration(151) at 3", "Insert Javadoc(155) into FieldDeclaration(162) at 0", "Insert Modifier: private(156) into FieldDeclaration(162) at 1", "Insert SimpleType: BatchSchema(158) into FieldDeclaration(162) at 2", "Insert VariableDeclarationFragment(161) into FieldDeclaration(162) at 3", "Insert Javadoc(168) into EnumDeclaration(188) at 0", "Insert Modifier: private(169) into EnumDeclaration(188) at 1", "Insert SimpleName: ValidationState(170) into EnumDeclaration(188) at 2", "Insert EnumConstantDeclaration(176) into EnumDeclaration(188) at 3", "Insert EnumConstantDeclaration(182) into EnumDeclaration(188) at 4", "Insert EnumConstantDeclaration(187) into EnumDeclaration(188) at 5", "Insert Javadoc(191) into FieldDeclaration(198) at 0", "Insert Modifier: private(192) into FieldDeclaration(198) at 1", "Insert SimpleType: ValidationState(194) into FieldDeclaration(198) at 2", "Insert VariableDeclarationFragment(197) into FieldDeclaration(198) at 3", "Move MarkerAnnotation(393) into MethodDeclaration(250) at 0", "Insert Modifier: public(230) into MethodDeclaration(250) at 1", "Insert SimpleType: String(232) into MethodDeclaration(250) at 2", "Insert SimpleName: toString(233) into MethodDeclaration(250) at 3", "Insert Block(249) into MethodDeclaration(250) at 4", "Insert SingleVariableDeclaration(257) into MethodDeclaration(301) at 3", "Insert Block(769) into MethodDeclaration(770) at 4", "Insert MarkerAnnotation(788) into MethodDeclaration(802) at 0", "Insert TagElement(73) into Javadoc(74) at 0", "Update SimpleName: state(72) to instanceCount", "Insert TagElement(83) into Javadoc(84) at 0", "Insert SimpleName: instNum(88) into VariableDeclarationFragment(89) at 0", "Insert ExpressionStatement(95) into Block(96) at 0", "Insert TagElement(100) into Javadoc(101) at 0", "Insert TagElement(111) into Javadoc(112) at 0", "Insert SimpleName: String(115) into SimpleType: String(116) at 0", "Update SimpleName: first(85) to batchTypeName", "Insert TagElement(122) into Javadoc(123) at 0", "Insert SimpleName: Throwable(125) into SimpleType: Throwable(126) at 0", "Insert SimpleName: exceptionState(127) into VariableDeclarationFragment(129) at 0", "Insert NullLiteral(128) into VariableDeclarationFragment(129) at 1", "Insert TagElement(132) into Javadoc(133) at 0", "Insert SimpleName: IterOutcome(135) into SimpleType: IterOutcome(136) at 0", "Insert SimpleName: batchState(137) into VariableDeclarationFragment(139) at 0", "Insert NullLiteral(138) into VariableDeclarationFragment(139) at 1", "Insert TagElement(143) into Javadoc(144) at 0", "Insert SimpleName: BatchSchema(146) into SimpleType: BatchSchema(147) at 0", "Insert SimpleName: lastSchema(148) into VariableDeclarationFragment(150) at 0", "Insert NullLiteral(149) into VariableDeclarationFragment(150) at 1", "Insert TagElement(154) into Javadoc(155) at 0", "Insert SimpleName: BatchSchema(157) into SimpleType: BatchSchema(158) at 0", "Insert SimpleName: lastNewSchema(159) into VariableDeclarationFragment(161) at 0", "Insert NullLiteral(160) into VariableDeclarationFragment(161) at 1", "Insert TagElement(167) into Javadoc(168) at 0", "Insert Javadoc(174) into EnumConstantDeclaration(176) at 0", "Insert SimpleName: INITIAL_NO_SCHEMA(175) into EnumConstantDeclaration(176) at 1", "Insert Javadoc(180) into EnumConstantDeclaration(182) at 0", "Insert SimpleName: HAVE_SCHEMA(181) into EnumConstantDeclaration(182) at 1", "Insert Javadoc(185) into EnumConstantDeclaration(187) at 0", "Insert SimpleName: TERMINAL(186) into EnumConstantDeclaration(187) at 1", "Insert TagElement(190) into Javadoc(191) at 0", "Insert SimpleName: ValidationState(193) into SimpleType: ValidationState(194) at 0", "Insert SimpleName: validationState(195) into VariableDeclarationFragment(197) at 0", "Insert QualifiedName: ValidationState.INITIAL_NO_SCHEMA(196) into VariableDeclarationFragment(197) at 1", "Insert ExpressionStatement(218) into Block(226) at 1", "Insert ExpressionStatement(225) into Block(226) at 2", "Insert SimpleName: String(231) into SimpleType: String(232) at 0", "Insert ReturnStatement(248) into Block(249) at 0", "Insert SimpleType: String(255) into SingleVariableDeclaration(257) at 0", "Insert SimpleName: operation(256) into SingleVariableDeclaration(257) at 1", "Insert IfStatement(275) into Block(300) at 0", "Insert ExpressionStatement(467) into Block(769) at 0", "Insert VariableDeclarationStatement(474) into Block(769) at 1", "Insert TryStatement(768) into Block(769) at 2", "Insert SimpleName: Override(787) into MarkerAnnotation(788) at 0", "Insert ExpressionStatement(800) into Block(801) at 0", "Insert TextElement: For logging/debuggability only. (72) into TagElement(73) at 0", "Insert TextElement: For logging/debuggability only. (82) into TagElement(83) at 0", "Insert Assignment: =(94) into ExpressionStatement(95) at 0", "Insert TextElement: The upstream batch, calls to which and return values from which are(98) into TagElement(100) at 0", "Insert TextElement: checked by this validator.(99) into TagElement(100) at 1", "Insert TextElement: Incoming batch's type (simple class name); for logging/debuggability(109) into TagElement(111) at 0", "Insert TextElement: only. (110) into TagElement(111) at 1", "Insert TextElement: Exception state of incoming batch; last value thrown by its next()(120) into TagElement(122) at 0", "Insert TextElement: method. (121) into TagElement(122) at 1", "Insert TextElement: Main state of incoming batch; last value returned by its next() method. (131) into TagElement(132) at 0", "Insert TextElement: Last schema retrieved after OK_NEW_SCHEMA or OK from next().  Null if none(141) into TagElement(143) at 0", "Insert TextElement: yet. Currently for logging/debuggability only. (142) into TagElement(143) at 1", "Insert TextElement: Last schema retrieved after OK_NEW_SCHEMA from next().  Null if none yet.(152) into TagElement(154) at 0", "Insert TextElement: Currently for logging/debuggability only. (153) into TagElement(154) at 1", "Insert TagElement: @link(164) into TagElement(167) at 0", "Insert TextElement:  return value sequence validation state.(165) into TagElement(167) at 1", "Insert TextElement: (Only needs enough to validate returns of OK.)(166) into TagElement(167) at 2", "Insert TagElement(173) into Javadoc(174) at 0", "Insert TagElement(179) into Javadoc(180) at 0", "Insert TagElement(184) into Javadoc(185) at 0", "Insert TextElement: High-level IterOutcome sequence state. (189) into TagElement(190) at 0", "Insert Assignment: =(217) into ExpressionStatement(218) at 0", "Insert MethodInvocation(224) into ExpressionStatement(225) at 0", "Insert InfixExpression: +(247) into ReturnStatement(248) at 0", "Insert SimpleName: String(254) into SimpleType: String(255) at 0", "Insert InfixExpression: ==(260) into IfStatement(275) at 0", "Insert Block(274) into IfStatement(275) at 1", "Update SimpleName: state(106) to batchState", "Insert MethodInvocation(466) into ExpressionStatement(467) at 0", "Insert Modifier: final(468) into VariableDeclarationStatement(474) at 0", "Move SimpleType: IterOutcome(71) into VariableDeclarationStatement(474) at 1", "Insert VariableDeclarationFragment(473) into VariableDeclarationStatement(474) at 2", "Insert Block(742) into TryStatement(768) at 0", "Insert CatchClause(767) into TryStatement(768) at 1", "Insert MethodInvocation(799) into ExpressionStatement(800) at 0", "Insert SimpleName: instNum(91) into Assignment: =(94) at 0", "Insert PrefixExpression: ++(93) into Assignment: =(94) at 1", "Insert SimpleName: IterOutcome(163) into TagElement: @link(164) at 0", "Insert TextElement: Initial state:  Have not gotten any OK_NEW_SCHEMA yet and not(171) into TagElement(173) at 0", "Insert TextElement: terminated.  OK is not allowed yet. (172) into TagElement(173) at 1", "Insert TextElement: Have gotten OK_NEW_SCHEMA already and not terminated.  OK is allowed(177) into TagElement(179) at 0", "Insert TextElement: now. (178) into TagElement(179) at 1", "Insert TextElement: Terminal state:  Have seen NONE or STOP.  Nothing more is allowed. (183) into TagElement(184) at 0", "Insert SimpleName: batchTypeName(211) into Assignment: =(217) at 0", "Move MethodInvocation(353) into Assignment: =(217) at 1", "Insert SimpleName: logger(219) into MethodInvocation(224) at 0", "Insert SimpleName: trace(220) into MethodInvocation(224) at 1", "Insert StringLiteral: \"[#{}; on {}]: Being constructed.\"(221) into MethodInvocation(224) at 2", "Insert SimpleName: instNum(222) into MethodInvocation(224) at 3", "Insert SimpleName: batchTypeName(223) into MethodInvocation(224) at 4", "Insert SuperMethodInvocation(235) into InfixExpression: +(247) at 0", "Insert StringLiteral: \"[\"(236) into InfixExpression: +(247) at 1", "Insert StringLiteral: \"instNum = \"(237) into InfixExpression: +(247) at 2", "Insert SimpleName: instNum(238) into InfixExpression: +(247) at 3", "Insert StringLiteral: \", validationState = \"(239) into InfixExpression: +(247) at 4", "Insert SimpleName: validationState(240) into InfixExpression: +(247) at 5", "Insert StringLiteral: \", batchState = \"(241) into InfixExpression: +(247) at 6", "Insert SimpleName: batchState(242) into InfixExpression: +(247) at 7", "Insert StringLiteral: \", ... \"(243) into InfixExpression: +(247) at 8", "Insert StringLiteral: \"; incoming = \"(244) into InfixExpression: +(247) at 9", "Insert SimpleName: incoming(245) into InfixExpression: +(247) at 10", "Insert StringLiteral: \"]\"(246) into InfixExpression: +(247) at 11", "Insert SimpleName: batchState(258) into InfixExpression: ==(260) at 0", "Insert NullLiteral(259) into InfixExpression: ==(260) at 1", "Insert ThrowStatement(273) into Block(274) at 0", "Insert StringLiteral: \"iterator()\"(314) into MethodInvocation(315) at 1", "Insert StringLiteral: \"getRecordCount()\"(353) into MethodInvocation(354) at 1", "Insert StringLiteral: \"getSelectionVector2()\"(384) into MethodInvocation(385) at 1", "Insert StringLiteral: \"getSelectionVector4()\"(400) into MethodInvocation(401) at 1", "Insert StringLiteral: \"getValueVectorId(SchemaPath)\"(420) into MethodInvocation(421) at 1", "Insert SimpleName: logger(461) into MethodInvocation(466) at 0", "Insert SimpleName: trace(462) into MethodInvocation(466) at 1", "Insert StringLiteral: \"[#{}; on {}]: next() called.\"(463) into MethodInvocation(466) at 2", "Insert SimpleName: instNum(464) into MethodInvocation(466) at 3", "Insert SimpleName: batchTypeName(465) into MethodInvocation(466) at 4", "Insert SimpleName: prevBatchState(471) into VariableDeclarationFragment(473) at 0", "Insert SimpleName: batchState(472) into VariableDeclarationFragment(473) at 1", "Insert IfStatement(493) into Block(742) at 0", "Move IfStatement(290) into Block(742) at 1", "Move ExpressionStatement(296) into Block(742) at 2", "Insert ExpressionStatement(530) into Block(742) at 3", "Insert SwitchStatement(609) into Block(742) at 4", "Move IfStatement(372) into Block(742) at 5", "Move ReturnStatement(374) into Block(742) at 6", "Insert SingleVariableDeclaration(749) into CatchClause(767) at 0", "Insert Block(766) into CatchClause(767) at 1", "Insert StringLiteral: \"getWritableBatch()\"(778) into MethodInvocation(779) at 1", "Insert SimpleName: logger(792) into MethodInvocation(799) at 0", "Insert SimpleName: trace(793) into MethodInvocation(799) at 1", "Insert StringLiteral: \"[#{}; on {}]: close() called, state = {} / {}.\"(794) into MethodInvocation(799) at 2", "Insert SimpleName: instNum(795) into MethodInvocation(799) at 3", "Insert SimpleName: batchTypeName(796) into MethodInvocation(799) at 4", "Insert SimpleName: batchState(797) into MethodInvocation(799) at 5", "Insert SimpleName: exceptionState(798) into MethodInvocation(799) at 6", "Insert SimpleName: instanceCount(92) into PrefixExpression: ++(93) at 0", "Update SimpleName: getName(352) to getSimpleName", "Insert SimpleName: toString(234) into SuperMethodInvocation(235) at 0", "Insert ClassInstanceCreation(272) into ThrowStatement(273) at 0", "Move SimpleType: IllegalStateException(285) into ClassInstanceCreation(297) at 0", "Insert InfixExpression: !=(477) into IfStatement(493) at 0", "Insert Block(492) into IfStatement(493) at 1", "Insert InfixExpression: ||(500) into IfStatement(515) at 0", "Insert MethodInvocation(529) into ExpressionStatement(530) at 0", "Insert SimpleName: batchState(531) into SwitchStatement(609) at 0", "Insert SwitchCase(533) into SwitchStatement(609) at 1", "Insert ExpressionStatement(537) into SwitchStatement(609) at 2", "Insert BreakStatement(538) into SwitchStatement(609) at 3", "Insert SwitchCase(540) into SwitchStatement(609) at 4", "Insert IfStatement(557) into SwitchStatement(609) at 5", "Insert BreakStatement(558) into SwitchStatement(609) at 6", "Insert SwitchCase(560) into SwitchStatement(609) at 7", "Insert IfStatement(577) into SwitchStatement(609) at 8", "Insert ExpressionStatement(581) into SwitchStatement(609) at 9", "Insert BreakStatement(582) into SwitchStatement(609) at 10", "Insert SwitchCase(584) into SwitchStatement(609) at 11", "Insert ExpressionStatement(588) into SwitchStatement(609) at 12", "Insert BreakStatement(589) into SwitchStatement(609) at 13", "Insert SwitchCase(591) into SwitchStatement(609) at 14", "Insert SwitchCase(593) into SwitchStatement(609) at 15", "Insert BreakStatement(594) into SwitchStatement(609) at 16", "Insert SwitchCase(595) into SwitchStatement(609) at 17", "Insert ThrowStatement(608) into SwitchStatement(609) at 18", "Update SimpleName: state(373) to batchState", "Insert UnionType: RuntimeException|Error(747) into SingleVariableDeclaration(749) at 0", "Insert SimpleName: e(748) into SingleVariableDeclaration(749) at 1", "Insert ExpressionStatement(753) into Block(766) at 0", "Insert ExpressionStatement(763) into Block(766) at 1", "Insert ThrowStatement(765) into Block(766) at 2", "Update StringLiteral: \" You should not call getOutgoingContainer() for class %s\"(409) to \"You should not call getOutgoingContainer() for class %s\"", "Move SimpleType: IllegalStateException(333) into ClassInstanceCreation(272) at 0", "Insert MethodInvocation(271) into ClassInstanceCreation(272) at 1", "Insert InfixExpression: +(289) into MethodInvocation(296) at 2", "Insert SimpleName: operation(290) into MethodInvocation(296) at 3", "Insert SimpleName: instNum(291) into MethodInvocation(296) at 4", "Insert SimpleName: batchTypeName(292) into MethodInvocation(296) at 5", "Update SimpleName: state(118) to batchState", "Move SimpleName: state(118) into MethodInvocation(296) at 6", "Update SimpleName: name(119) to OK", "Move SimpleName: name(119) into MethodInvocation(296) at 7", "Insert SimpleName: OK_NEW_SCHEMA(295) into MethodInvocation(296) at 8", "Insert NullLiteral(475) into InfixExpression: !=(477) at 0", "Insert SimpleName: exceptionState(476) into InfixExpression: !=(477) at 1", "Insert ThrowStatement(491) into Block(492) at 0", "Insert InfixExpression: ==(496) into InfixExpression: ||(500) at 0", "Insert InfixExpression: ==(499) into InfixExpression: ||(500) at 1", "Update SimpleName: state(291) to batchState", "Insert SimpleName: logger(522) into MethodInvocation(529) at 0", "Insert SimpleName: trace(523) into MethodInvocation(529) at 1", "Insert StringLiteral: \"[#{}; on {}]: incoming next() return: ({} ->) {}\"(524) into MethodInvocation(529) at 2", "Insert SimpleName: instNum(525) into MethodInvocation(529) at 3", "Insert SimpleName: batchTypeName(526) into MethodInvocation(529) at 4", "Insert SimpleName: prevBatchState(527) into MethodInvocation(529) at 5", "Insert SimpleName: batchState(528) into MethodInvocation(529) at 6", "Insert SimpleName: OK_NEW_SCHEMA(532) into SwitchCase(533) at 0", "Insert Assignment: =(536) into ExpressionStatement(537) at 0", "Insert SimpleName: OK(539) into SwitchCase(540) at 0", "Insert InfixExpression: !=(543) into IfStatement(557) at 0", "Insert Block(556) into IfStatement(557) at 1", "Insert SimpleName: NONE(559) into SwitchCase(560) at 0", "Insert InfixExpression: !=(563) into IfStatement(577) at 0", "Insert Block(576) into IfStatement(577) at 1", "Move Assignment: =(301) into ExpressionStatement(581) at 0", "Insert SimpleName: STOP(583) into SwitchCase(584) at 0", "Insert Assignment: =(587) into ExpressionStatement(588) at 0", "Insert SimpleName: NOT_YET(590) into SwitchCase(591) at 0", "Insert SimpleName: OUT_OF_MEMORY(592) into SwitchCase(593) at 0", "Insert ClassInstanceCreation(607) into ThrowStatement(608) at 0", "Insert VariableDeclarationStatement(630) into Block(738) at 1", "Insert ExpressionStatement(636) into Block(738) at 2", "Insert IfStatement(645) into Block(738) at 3", "Insert IfStatement(674) into Block(738) at 4", "Insert SimpleType: RuntimeException(744) into UnionType: RuntimeException|Error(747) at 0", "Insert SimpleType: Error(746) into UnionType: RuntimeException|Error(747) at 1", "Insert Assignment: =(752) into ExpressionStatement(753) at 0", "Insert MethodInvocation(762) into ExpressionStatement(763) at 0", "Insert SimpleName: e(764) into ThrowStatement(765) at 0", "Insert SimpleName: String(263) into MethodInvocation(271) at 0", "Insert SimpleName: format(264) into MethodInvocation(271) at 1", "Insert InfixExpression: +(267) into MethodInvocation(271) at 2", "Insert SimpleName: operation(268) into MethodInvocation(271) at 3", "Insert SimpleName: instNum(269) into MethodInvocation(271) at 4", "Insert SimpleName: batchTypeName(270) into MethodInvocation(271) at 5", "Insert StringLiteral: \"Batch data read operation (%s) attempted when last next() call\"(287) into InfixExpression: +(289) at 0", "Insert StringLiteral: \" on batch [#%d, %s] returned %s (not %s or %s).\"(288) into InfixExpression: +(289) at 1", "Insert ClassInstanceCreation(490) into ThrowStatement(491) at 0", "Update SimpleName: state(281) to batchState", "Move SimpleName: state(281) into InfixExpression: ==(496) at 0", "Insert SimpleName: NONE(495) into InfixExpression: ==(496) at 1", "Insert SimpleName: batchState(497) into InfixExpression: ==(499) at 0", "Insert SimpleName: STOP(498) into InfixExpression: ==(499) at 1", "Insert SimpleName: validationState(534) into Assignment: =(536) at 0", "Insert QualifiedName: ValidationState.HAVE_SCHEMA(535) into Assignment: =(536) at 1", "Insert SimpleName: validationState(541) into InfixExpression: !=(543) at 0", "Insert QualifiedName: ValidationState.HAVE_SCHEMA(542) into InfixExpression: !=(543) at 1", "Insert ThrowStatement(555) into Block(556) at 0", "Insert SimpleName: validationState(561) into InfixExpression: !=(563) at 0", "Insert QualifiedName: ValidationState.HAVE_SCHEMA(562) into InfixExpression: !=(563) at 1", "Insert ThrowStatement(575) into Block(576) at 0", "Update SimpleName: first(298) to validationState", "Insert QualifiedName: ValidationState.TERMINAL(579) into Assignment: =(580) at 1", "Insert SimpleName: validationState(585) into Assignment: =(587) at 0", "Insert QualifiedName: ValidationState.TERMINAL(586) into Assignment: =(587) at 1", "Insert SimpleType: AssertionError(597) into ClassInstanceCreation(607) at 0", "Insert InfixExpression: +(606) into ClassInstanceCreation(607) at 1", "Update SimpleName: state(305) to batchState", "Insert SimpleName: OK(611) into InfixExpression: ==(612) at 1", "Update SimpleName: state(308) to batchState", "Insert SimpleName: OK_NEW_SCHEMA(614) into InfixExpression: ==(615) at 1", "Insert Modifier: final(617) into VariableDeclarationStatement(623) at 0", "Insert Modifier: final(624) into VariableDeclarationStatement(630) at 0", "Insert SimpleType: BatchSchema(626) into VariableDeclarationStatement(630) at 1", "Insert VariableDeclarationFragment(629) into VariableDeclarationStatement(630) at 2", "Insert Assignment: =(635) into ExpressionStatement(636) at 0", "Insert InfixExpression: ==(639) into IfStatement(645) at 0", "Insert Block(644) into IfStatement(645) at 1", "Insert MethodInvocation(648) into IfStatement(674) at 0", "Insert Block(673) into IfStatement(674) at 1", "Insert SimpleName: RuntimeException(743) into SimpleType: RuntimeException(744) at 0", "Insert SimpleName: Error(745) into SimpleType: Error(746) at 0", "Insert SimpleName: exceptionState(750) into Assignment: =(752) at 0", "Insert SimpleName: e(751) into Assignment: =(752) at 1", "Insert SimpleName: logger(754) into MethodInvocation(762) at 0", "Insert SimpleName: trace(755) into MethodInvocation(762) at 1", "Insert StringLiteral: \"[#{}, on {}]: incoming next() exception: ({} ->) {}\"(756) into MethodInvocation(762) at 2", "Insert SimpleName: instNum(757) into MethodInvocation(762) at 3", "Insert SimpleName: batchTypeName(758) into MethodInvocation(762) at 4", "Insert SimpleName: prevBatchState(759) into MethodInvocation(762) at 5", "Insert SimpleName: exceptionState(760) into MethodInvocation(762) at 6", "Insert SimpleName: exceptionState(761) into MethodInvocation(762) at 7", "Insert StringLiteral: \"Batch data read operation (%s) attempted before first next() call\"(265) into InfixExpression: +(267) at 0", "Insert StringLiteral: \" on batch [#%d, %s].\"(266) into InfixExpression: +(267) at 1", "Move SimpleType: IllegalStateException(345) into ClassInstanceCreation(490) at 0", "Insert MethodInvocation(489) into ClassInstanceCreation(490) at 1", "Move SimpleType: IllegalStateException(114) into ClassInstanceCreation(512) at 0", "Insert MethodInvocation(511) into ClassInstanceCreation(512) at 1", "Insert ClassInstanceCreation(554) into ThrowStatement(555) at 0", "Insert ClassInstanceCreation(574) into ThrowStatement(575) at 0", "Insert SimpleName: AssertionError(596) into SimpleType: AssertionError(597) at 0", "Insert StringLiteral: \"Unhandled new \"(598) into InfixExpression: +(606) at 0", "Insert MethodInvocation(603) into InfixExpression: +(606) at 1", "Insert StringLiteral: \" value \"(604) into InfixExpression: +(606) at 2", "Insert SimpleName: batchState(605) into InfixExpression: +(606) at 3", "Insert SimpleName: prevLastSchema(620) into VariableDeclarationFragment(622) at 0", "Update SimpleName: schema(314) to lastSchema", "Insert SimpleName: BatchSchema(625) into SimpleType: BatchSchema(626) at 0", "Insert SimpleName: prevLastNewSchema(627) into VariableDeclarationFragment(629) at 0", "Insert SimpleName: lastNewSchema(628) into VariableDeclarationFragment(629) at 1", "Insert SimpleName: lastSchema(631) into Assignment: =(635) at 0", "Move MethodInvocation(317) into Assignment: =(635) at 1", "Insert SimpleName: batchState(637) into InfixExpression: ==(639) at 0", "Insert SimpleName: OK_NEW_SCHEMA(638) into InfixExpression: ==(639) at 1", "Insert ExpressionStatement(643) into Block(644) at 0", "Insert SimpleName: logger(646) into MethodInvocation(648) at 0", "Insert SimpleName: isTraceEnabled(647) into MethodInvocation(648) at 1", "Insert ExpressionStatement(672) into Block(673) at 0", "Update SimpleName: schema(320) to lastSchema", "Insert ThrowStatement(687) into Block(688) at 0", "Insert SimpleName: String(480) into MethodInvocation(489) at 0", "Insert SimpleName: format(481) into MethodInvocation(489) at 1", "Insert InfixExpression: +(484) into MethodInvocation(489) at 2", "Insert SimpleName: instNum(485) into MethodInvocation(489) at 3", "Insert SimpleName: batchTypeName(486) into MethodInvocation(489) at 4", "Insert SimpleName: exceptionState(487) into MethodInvocation(489) at 5", "Insert SimpleName: batchState(488) into MethodInvocation(489) at 6", "Insert SimpleName: String(503) into MethodInvocation(511) at 0", "Insert SimpleName: format(504) into MethodInvocation(511) at 1", "Insert InfixExpression: +(507) into MethodInvocation(511) at 2", "Insert SimpleName: instNum(508) into MethodInvocation(511) at 3", "Insert SimpleName: batchTypeName(509) into MethodInvocation(511) at 4", "Insert SimpleName: batchState(510) into MethodInvocation(511) at 5", "Insert SimpleType: IllegalStateException(545) into ClassInstanceCreation(554) at 0", "Insert MethodInvocation(553) into ClassInstanceCreation(554) at 1", "Insert SimpleType: IllegalStateException(565) into ClassInstanceCreation(574) at 0", "Insert MethodInvocation(573) into ClassInstanceCreation(574) at 1", "Insert TypeLiteral(601) into MethodInvocation(603) at 0", "Insert SimpleName: getSimpleName(602) into MethodInvocation(603) at 1", "Insert Assignment: =(642) into ExpressionStatement(643) at 0", "Insert MethodInvocation(671) into ExpressionStatement(672) at 0", "Insert ClassInstanceCreation(686) into ThrowStatement(687) at 0", "Update SimpleName: schema(327) to lastSchema", "Insert StringLiteral: \"next() [on #%d; %s] called again after it threw %s (after\"(482) into InfixExpression: +(484) at 0", "Insert StringLiteral: \" returning %s).  Caller should not have called next() again.\"(483) into InfixExpression: +(484) at 1", "Insert StringLiteral: \"next() [on #%d, %s] called again after it returned %s.\"(505) into InfixExpression: +(507) at 0", "Insert StringLiteral: \"  Caller should not have called next() again.\"(506) into InfixExpression: +(507) at 1", "Insert SimpleName: IllegalStateException(544) into SimpleType: IllegalStateException(545) at 0", "Insert SimpleName: String(546) into MethodInvocation(553) at 0", "Insert SimpleName: format(547) into MethodInvocation(553) at 1", "Insert StringLiteral: \"next() returned %s without first returning %s [#%d, %s]\"(548) into MethodInvocation(553) at 2", "Insert SimpleName: batchState(549) into MethodInvocation(553) at 3", "Insert SimpleName: OK_NEW_SCHEMA(550) into MethodInvocation(553) at 4", "Insert SimpleName: instNum(551) into MethodInvocation(553) at 5", "Insert SimpleName: batchTypeName(552) into MethodInvocation(553) at 6", "Insert SimpleName: IllegalStateException(564) into SimpleType: IllegalStateException(565) at 0", "Insert SimpleName: String(566) into MethodInvocation(573) at 0", "Insert SimpleName: format(567) into MethodInvocation(573) at 1", "Insert StringLiteral: \"next() returned %s without first returning %s [#%d, %s]\"(568) into MethodInvocation(573) at 2", "Insert SimpleName: batchState(569) into MethodInvocation(573) at 3", "Insert SimpleName: OK_NEW_SCHEMA(570) into MethodInvocation(573) at 4", "Insert SimpleName: instNum(571) into MethodInvocation(573) at 5", "Insert SimpleName: batchTypeName(572) into MethodInvocation(573) at 6", "Insert SimpleType: IterOutcome(600) into TypeLiteral(601) at 0", "Insert SimpleName: lastNewSchema(640) into Assignment: =(642) at 0", "Insert SimpleName: lastSchema(641) into Assignment: =(642) at 1", "Insert SimpleName: logger(649) into MethodInvocation(671) at 0", "Insert SimpleName: trace(650) into MethodInvocation(671) at 1", "Insert InfixExpression: +(656) into MethodInvocation(671) at 2", "Insert SimpleName: instNum(657) into MethodInvocation(671) at 3", "Insert SimpleName: batchTypeName(658) into MethodInvocation(671) at 4", "Move MethodInvocation(356) into MethodInvocation(671) at 5", "Insert SimpleName: lastSchema(662) into MethodInvocation(671) at 6", "Insert ConditionalExpression(669) into MethodInvocation(671) at 7", "Insert SimpleName: prevLastNewSchema(670) into MethodInvocation(671) at 8", "Insert SimpleType: IllegalStateException(679) into ClassInstanceCreation(686) at 0", "Insert MethodInvocation(685) into ClassInstanceCreation(686) at 1", "Insert SimpleType: IllegalStateException(696) into ClassInstanceCreation(703) at 0", "Insert MethodInvocation(702) into ClassInstanceCreation(703) at 1", "Insert SimpleType: IllegalStateException(713) into ClassInstanceCreation(726) at 0", "Insert SimpleName: IterOutcome(599) into SimpleType: IterOutcome(600) at 0", "Insert StringLiteral: \"[#{}; on {}]: incoming next() return: #records = {}, \"(651) into InfixExpression: +(656) at 0", "Insert StringLiteral: \"\\n  schema:\"(652) into InfixExpression: +(656) at 1", "Insert StringLiteral: \"\\n    {}, \"(653) into InfixExpression: +(656) at 2", "Insert StringLiteral: \"\\n  prev. new ({}):\"(654) into InfixExpression: +(656) at 3", "Insert StringLiteral: \"\\n    {}\"(655) into InfixExpression: +(656) at 4", "Insert MethodInvocation(666) into ConditionalExpression(669) at 0", "Insert StringLiteral: \"equal\"(667) into ConditionalExpression(669) at 1", "Insert StringLiteral: \"not equal\"(668) into ConditionalExpression(669) at 2", "Insert SimpleName: IllegalStateException(678) into SimpleType: IllegalStateException(679) at 0", "Insert SimpleName: String(680) into MethodInvocation(685) at 0", "Insert SimpleName: format(681) into MethodInvocation(685) at 1", "Insert StringLiteral: \"Incoming batch [#%d, %s] has a null schema. This is not allowed.\"(682) into MethodInvocation(685) at 2", "Insert SimpleName: instNum(683) into MethodInvocation(685) at 3", "Insert SimpleName: batchTypeName(684) into MethodInvocation(685) at 4", "Insert SimpleName: IllegalStateException(695) into SimpleType: IllegalStateException(696) at 0", "Insert SimpleName: String(697) into MethodInvocation(702) at 0", "Insert SimpleName: format(698) into MethodInvocation(702) at 1", "Insert StringLiteral: \"Incoming batch [#%d, %s] has an empty schema. This is not allowed.\"(699) into MethodInvocation(702) at 2", "Insert SimpleName: instNum(700) into MethodInvocation(702) at 3", "Insert SimpleName: batchTypeName(701) into MethodInvocation(702) at 4", "Insert SimpleName: IllegalStateException(712) into SimpleType: IllegalStateException(713) at 0", "Insert InfixExpression: +(718) into MethodInvocation(725) at 2", "Insert SimpleName: instNum(719) into MethodInvocation(725) at 3", "Insert SimpleName: batchTypeName(720) into MethodInvocation(725) at 4", "Insert MethodInvocation(723) into MethodInvocation(725) at 5", "Insert SimpleName: lastSchema(663) into MethodInvocation(666) at 0", "Insert SimpleName: equals(664) into MethodInvocation(666) at 1", "Insert SimpleName: prevLastNewSchema(665) into MethodInvocation(666) at 2", "Insert StringLiteral: \"Incoming batch [#%d, %s] has size %d, which is beyond the\"(716) into InfixExpression: +(718) at 0", "Insert StringLiteral: \" limit of %d\"(717) into InfixExpression: +(718) at 1", "Insert SimpleName: incoming(721) into MethodInvocation(723) at 0", "Insert SimpleName: getRecordCount(722) into MethodInvocation(723) at 1", "Delete QualifiedName: IterOutcome.NOT_YET(73)", "Delete PrimitiveType: boolean(84)", "Delete BooleanLiteral: true(86)", "Delete StringLiteral: \"You tried to do a batch data read operation when you were in a state of %s.  You can only do this type of operation when you are in a state of OK or OK_NEW_SCHEMA.\"(117)", "Delete MethodInvocation(120)", "Delete QualifiedName: IterOutcome.NONE(282)", "Delete InfixExpression: ==(283)", "Delete StringLiteral: \"The incoming iterator has previously moved to a state of NONE. You should not be attempting to call next() again.\"(286)", "Delete SimpleName: first(299)", "Delete PrefixExpression: !(300)", "Delete QualifiedName: IterOutcome.OK(306)", "Delete QualifiedName: IterOutcome.OK_NEW_SCHEMA(309)", "Delete SimpleName: state(323)", "Delete ReturnStatement(324)", "Delete StringLiteral: \"Incoming batch has an empty schema. This is not allowed.\"(334)", "Delete StringLiteral: \"Incoming batch of %s has size %d, which is beyond the limit of %d\"(348)", "Delete SimpleName: first(297)", "Delete ExpressionStatement(302)", "Delete Block(303)", "Delete IfStatement(304)", "Delete Block(375)"]}}, {"JSONFormatPlugin_cluster": {"actions": []}}, {"JSONFormatPlugin_diff": {"operations": []}}, {"JSONRecordReader_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS SimpleName: hadoopPath to InfixExpression: + at 2", "INS StringLiteral: \", runningRecordCount = \" to InfixExpression: + at 5", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS SimpleName: toString to MethodDeclaration at 3", "INS StringLiteral: \", recordCount = \" to InfixExpression: + at 3", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Block to MethodDeclaration at 4", "INS StringLiteral: \", ...]\" to InfixExpression: + at 7", "INS StringLiteral: \"[hadoopPath = \" to InfixExpression: + at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: toString to SuperMethodInvocation at 0", "INS SimpleName: recordCount to InfixExpression: + at 4", "INS SimpleType: String to MethodDeclaration at 2", "INS SuperMethodInvocation to InfixExpression: + at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: runningRecordCount to InfixExpression: + at 6", "INS InfixExpression: + to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "INS TextElement:   pathnames of columns/subfields to read to TagElement: @param at 1", "operations": ["INS TextElement:   pathnames of columns/subfields to read to TagElement: @param at 1"]}, {"root": "INS TextElement:   pathnames of columns/subfields to read to TagElement: @param at 1", "operations": ["INS TextElement:   pathnames of columns/subfields to read to TagElement: @param at 1"]}]}}, {"JSONRecordReader_diff": {"operations": ["Insert MethodDeclaration(400) into TypeDeclaration: class(751) at 19", "Insert MarkerAnnotation(383) into MethodDeclaration(400) at 0", "Insert Modifier: public(384) into MethodDeclaration(400) at 1", "Insert SimpleType: String(386) into MethodDeclaration(400) at 2", "Insert SimpleName: toString(387) into MethodDeclaration(400) at 3", "Insert Block(399) into MethodDeclaration(400) at 4", "Insert SimpleName: Override(382) into MarkerAnnotation(383) at 0", "Insert SimpleName: String(385) into SimpleType: String(386) at 0", "Insert ReturnStatement(398) into Block(399) at 0", "Insert TextElement:   pathnames of columns/subfields to read(163) into TagElement: @param(164) at 1", "Insert TextElement:   pathnames of columns/subfields to read(212) into TagElement: @param(213) at 1", "Insert InfixExpression: +(397) into ReturnStatement(398) at 0", "Insert SuperMethodInvocation(389) into InfixExpression: +(397) at 0", "Insert StringLiteral: \"[hadoopPath = \"(390) into InfixExpression: +(397) at 1", "Insert SimpleName: hadoopPath(391) into InfixExpression: +(397) at 2", "Insert StringLiteral: \", recordCount = \"(392) into InfixExpression: +(397) at 3", "Insert SimpleName: recordCount(393) into InfixExpression: +(397) at 4", "Insert StringLiteral: \", runningRecordCount = \"(394) into InfixExpression: +(397) at 5", "Insert SimpleName: runningRecordCount(395) into InfixExpression: +(397) at 6", "Insert StringLiteral: \", ...]\"(396) into InfixExpression: +(397) at 7", "Insert SimpleName: toString(388) into SuperMethodInvocation(389) at 0"]}}, {"FieldSelection_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: childrenInsensitive to InfixExpression: + at 6", "INS StringLiteral: \", childrenInsensitive = \" to InfixExpression: + at 5", "INS Modifier: public to MethodDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS SimpleName: mode to InfixExpression: + at 2", "INS SimpleName: toString to SuperMethodInvocation at 0", "INS SimpleName: toString to MethodDeclaration at 3", "INS InfixExpression: + to ReturnStatement at 0", "INS SimpleType: String to MethodDeclaration at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: children to InfixExpression: + at 4", "INS StringLiteral: \", children = \" to InfixExpression: + at 3", "INS Block to MethodDeclaration at 4", "INS SuperMethodInvocation to InfixExpression: + at 0", "INS StringLiteral: \"[mode = \" to InfixExpression: + at 1", "INS StringLiteral: \"]\" to InfixExpression: + at 7"]}]}}, {"FieldSelection_diff": {"operations": ["Insert MethodDeclaration(190) into TypeDeclaration: class(536) at 10", "Insert MarkerAnnotation(173) into MethodDeclaration(190) at 0", "Insert Modifier: public(174) into MethodDeclaration(190) at 1", "Insert SimpleType: String(176) into MethodDeclaration(190) at 2", "Insert SimpleName: toString(177) into MethodDeclaration(190) at 3", "Insert Block(189) into MethodDeclaration(190) at 4", "Insert SimpleName: Override(172) into MarkerAnnotation(173) at 0", "Insert SimpleName: String(175) into SimpleType: String(176) at 0", "Insert ReturnStatement(188) into Block(189) at 0", "Insert InfixExpression: +(187) into ReturnStatement(188) at 0", "Insert SuperMethodInvocation(179) into InfixExpression: +(187) at 0", "Insert StringLiteral: \"[mode = \"(180) into InfixExpression: +(187) at 1", "Insert SimpleName: mode(181) into InfixExpression: +(187) at 2", "Insert StringLiteral: \", children = \"(182) into InfixExpression: +(187) at 3", "Insert SimpleName: children(183) into InfixExpression: +(187) at 4", "Insert StringLiteral: \", childrenInsensitive = \"(184) into InfixExpression: +(187) at 5", "Insert SimpleName: childrenInsensitive(185) into InfixExpression: +(187) at 6", "Insert StringLiteral: \"]\"(186) into InfixExpression: +(187) at 7", "Insert SimpleName: toString(178) into SuperMethodInvocation(179) at 0"]}}, {"JsonReader_cluster": {"actions": [{"root": "INS Block to MethodDeclaration at 5", "operations": ["INS MethodInvocation to IfStatement at 0", "INS IfStatement to Block at 4", "INS Block to MethodDeclaration at 5", "INS SimpleName: fieldWriter to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: isEmptyMap to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 0", "MOV WhileStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 1", "MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from \"json record reader requires at least a column\" to \"JSON record reader requires at least one column\"", "operations": ["UPD StringLiteral: \"json record reader requires at least a column\" from \"json record reader requires at least a column\" to \"JSON record reader requires at least one column\""]}, {"root": "UPDATE from root to fieldPath", "operations": ["UPD SimpleName: root from root to fieldPath", "UPD SimpleName: root from root to fieldPath", "UPD SimpleName: root from root to fieldPath", "UPD SimpleName: root from root to fieldPath", "UPD SimpleName: root from root to fieldPath", "UPD SimpleName: root from root to fieldPath", "UPD SimpleName: root from root to fieldPath"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL PrimitiveType: boolean", "DEL BooleanLiteral: false", "DEL Modifier: private", "DEL SimpleName: atLeastOneWrite"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL Block", "DEL PrefixExpression: !", "DEL SimpleName: atLeastOneWrite", "DEL IfStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL Assignment: =", "DEL BooleanLiteral: true", "DEL SimpleName: atLeastOneWrite"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL BooleanLiteral: true", "DEL Assignment: =", "DEL SimpleName: atLeastOneWrite"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: atLeastOneWrite", "DEL Assignment: =", "DEL BooleanLiteral: true"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL BooleanLiteral: true", "DEL ExpressionStatement", "DEL SimpleName: atLeastOneWrite", "DEL Assignment: ="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL BooleanLiteral: true", "DEL SimpleName: atLeastOneWrite", "DEL ExpressionStatement", "DEL Assignment: ="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: atLeastOneWrite", "DEL Assignment: =", "DEL BooleanLiteral: true", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: atLeastOneWrite", "DEL ExpressionStatement", "DEL BooleanLiteral: true", "DEL Assignment: ="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL SimpleName: atLeastOneWrite", "DEL BooleanLiteral: true", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL BooleanLiteral: true", "DEL Assignment: =", "DEL SimpleName: atLeastOneWrite", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: atLeastOneWrite", "DEL BooleanLiteral: true", "DEL Assignment: =", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL BooleanLiteral: true", "DEL SimpleName: atLeastOneWrite", "DEL ExpressionStatement", "DEL Assignment: ="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: atLeastOneWrite", "DEL BooleanLiteral: true"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: atLeastOneWrite", "DEL ExpressionStatement", "DEL BooleanLiteral: true", "DEL Assignment: ="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: atLeastOneWrite", "DEL Assignment: =", "DEL BooleanLiteral: true"]}]}}, {"JsonReader_diff": {"operations": ["Insert Block(371) into MethodDeclaration(372) at 5", "Move VariableDeclarationStatement(317) into Block(371) at 0", "Move VariableDeclarationStatement(325) into Block(371) at 1", "Move VariableDeclarationStatement(333) into Block(371) at 2", "Move WhileStatement(364) into Block(371) at 3", "Insert IfStatement(370) into Block(371) at 4", "Update StringLiteral: \"json record reader requires at least a column\"(228) to \"JSON record reader requires at least one column\"", "Insert MethodInvocation(359) into IfStatement(370) at 0", "Insert Block(369) into IfStatement(370) at 1", "Update SimpleName: root(320) to fieldPath", "Insert SimpleName: fieldWriter(357) into MethodInvocation(359) at 0", "Insert SimpleName: isEmptyMap(358) into MethodInvocation(359) at 1", "Move ExpressionStatement(373) into Block(369) at 0", "Update SimpleName: root(334) to fieldPath", "Update SimpleName: root(357) to fieldPath", "Update SimpleName: root(339) to fieldPath", "Update SimpleName: root(358) to fieldPath", "Update SimpleName: root(367) to fieldPath", "Update SimpleName: root(349) to fieldPath", "Delete Modifier: private(108)", "Delete PrimitiveType: boolean(109)", "Delete SimpleName: atLeastOneWrite(110)", "Delete BooleanLiteral: false(111)", "Delete VariableDeclarationFragment(112)", "Delete FieldDeclaration(113)", "Delete SimpleName: atLeastOneWrite(307)", "Delete PrefixExpression: !(308)", "Delete Block(374)", "Delete IfStatement(375)", "Delete Block(376)", "Delete SimpleName: atLeastOneWrite(996)", "Delete BooleanLiteral: true(997)", "Delete Assignment: =(998)", "Delete ExpressionStatement(999)", "Delete SimpleName: atLeastOneWrite(1012)", "Delete BooleanLiteral: true(1013)", "Delete Assignment: =(1014)", "Delete ExpressionStatement(1015)", "Delete SimpleName: atLeastOneWrite(1033)", "Delete BooleanLiteral: true(1034)", "Delete Assignment: =(1035)", "Delete ExpressionStatement(1036)", "Delete SimpleName: atLeastOneWrite(1066)", "Delete BooleanLiteral: true(1067)", "Delete Assignment: =(1068)", "Delete ExpressionStatement(1069)", "Delete SimpleName: atLeastOneWrite(1079)", "Delete BooleanLiteral: true(1080)", "Delete Assignment: =(1081)", "Delete ExpressionStatement(1082)", "Delete SimpleName: atLeastOneWrite(1271)", "Delete BooleanLiteral: true(1272)", "Delete Assignment: =(1273)", "Delete ExpressionStatement(1274)", "Delete SimpleName: atLeastOneWrite(1331)", "Delete BooleanLiteral: true(1332)", "Delete Assignment: =(1333)", "Delete ExpressionStatement(1334)", "Delete SimpleName: atLeastOneWrite(1370)", "Delete BooleanLiteral: true(1371)", "Delete Assignment: =(1372)", "Delete ExpressionStatement(1373)", "Delete SimpleName: atLeastOneWrite(1518)", "Delete BooleanLiteral: true(1519)", "Delete Assignment: =(1520)", "Delete ExpressionStatement(1521)", "Delete SimpleName: atLeastOneWrite(1533)", "Delete BooleanLiteral: true(1534)", "Delete Assignment: =(1535)", "Delete ExpressionStatement(1536)", "Delete SimpleName: atLeastOneWrite(1565)", "Delete BooleanLiteral: true(1566)", "Delete Assignment: =(1567)", "Delete ExpressionStatement(1568)", "Delete SimpleName: atLeastOneWrite(1596)", "Delete BooleanLiteral: true(1597)", "Delete Assignment: =(1598)", "Delete ExpressionStatement(1599)", "Delete SimpleName: atLeastOneWrite(1608)", "Delete BooleanLiteral: true(1609)", "Delete Assignment: =(1610)", "Delete ExpressionStatement(1611)", "Delete SimpleName: atLeastOneWrite(1725)", "Delete BooleanLiteral: true(1726)", "Delete Assignment: =(1727)", "Delete ExpressionStatement(1728)"]}}, {"AbstractBaseWriter_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 6", "operations": ["INS SimpleName: toString to MethodDeclaration at 3", "INS SimpleName: parent to InfixExpression: + at 4", "INS SimpleName: String to SimpleType: String at 0", "INS Block to MethodDeclaration at 4", "INS MarkerAnnotation to MethodDeclaration at 0", "INS StringLiteral: \", parent = \" to InfixExpression: + at 3", "INS SimpleName: toString to SuperMethodInvocation at 0", "INS StringLiteral: \"[index = \" to InfixExpression: + at 1", "INS SimpleType: String to MethodDeclaration at 2", "INS InfixExpression: + to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SuperMethodInvocation to InfixExpression: + at 0", "INS SimpleName: index to InfixExpression: + at 2", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS ReturnStatement to Block at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS StringLiteral: \"]\" to InfixExpression: + at 5"]}]}}, {"AbstractBaseWriter_diff": {"operations": ["Insert MethodDeclaration(64) into TypeDeclaration: class(113) at 6", "Insert MarkerAnnotation(49) into MethodDeclaration(64) at 0", "Insert Modifier: public(50) into MethodDeclaration(64) at 1", "Insert SimpleType: String(52) into MethodDeclaration(64) at 2", "Insert SimpleName: toString(53) into MethodDeclaration(64) at 3", "Insert Block(63) into MethodDeclaration(64) at 4", "Insert SimpleName: Override(48) into MarkerAnnotation(49) at 0", "Insert SimpleName: String(51) into SimpleType: String(52) at 0", "Insert ReturnStatement(62) into Block(63) at 0", "Insert InfixExpression: +(61) into ReturnStatement(62) at 0", "Insert SuperMethodInvocation(55) into InfixExpression: +(61) at 0", "Insert StringLiteral: \"[index = \"(56) into InfixExpression: +(61) at 1", "Insert SimpleName: index(57) into InfixExpression: +(61) at 2", "Insert StringLiteral: \", parent = \"(58) into InfixExpression: +(61) at 3", "Insert SimpleName: parent(59) into InfixExpression: +(61) at 4", "Insert StringLiteral: \"]\"(60) into InfixExpression: +(61) at 5", "Insert SimpleName: toString(54) into SuperMethodInvocation(55) at 0"]}}, {"PromotableWriter_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: isEmptyMap to MethodDeclaration at 3", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: writer to MethodInvocation at 0", "INS SimpleName: isEmptyMap to MethodInvocation at 1", "INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0"]}]}}, {"PromotableWriter_diff": {"operations": ["Insert MethodDeclaration(501) into TypeDeclaration: class(704) at 19", "Insert MarkerAnnotation(492) into MethodDeclaration(501) at 0", "Insert Modifier: public(493) into MethodDeclaration(501) at 1", "Insert PrimitiveType: boolean(494) into MethodDeclaration(501) at 2", "Insert SimpleName: isEmptyMap(495) into MethodDeclaration(501) at 3", "Insert Block(500) into MethodDeclaration(501) at 4", "Insert SimpleName: Override(491) into MarkerAnnotation(492) at 0", "Insert ReturnStatement(499) into Block(500) at 0", "Insert MethodInvocation(498) into ReturnStatement(499) at 0", "Insert SimpleName: writer(496) into MethodInvocation(498) at 0", "Insert SimpleName: isEmptyMap(497) into MethodInvocation(498) at 1"]}}], "commit_stats": [{"total_files": 40, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}