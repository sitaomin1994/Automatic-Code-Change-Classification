{"application": "google-caja", "csha": "ccb14801eb53c90da121a48a484cdee21f9957cf", "files": [{"JsPrettyPrinter_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS SimpleName: lineLengthLimit to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS PrimitiveType: int to FieldDeclaration at 1", "INS NumberLiteral: 80 to VariableDeclarationFragment at 1", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 7", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: lineLengthLimit to FieldAccess at 1", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: setLineLengthLimit to MethodDeclaration at 2", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: lineLengthLimit to SingleVariableDeclaration at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 4", "INS ExpressionStatement to Block at 0", "INS SimpleName: lineLengthLimit to Assignment: = at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS Modifier: public to MethodDeclaration at 0", "INS ThisExpression to FieldAccess at 0", "INS Block to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS SimpleName: lineLengthLimit to FieldAccess at 1", "INS FieldAccess to ReturnStatement at 0", "INS PrimitiveType: int to MethodDeclaration at 1", "INS SimpleName: getLineLengthLimit to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 8"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: outputTokens to VariableDeclarationFragment at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS SimpleType: Indenter to VariableDeclarationStatement at 0", "INS SimpleName: Indenter to SimpleType: Indenter at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: Indenter to SimpleType: Indenter at 0", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: indenter to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: Indenter to ClassInstanceCreation at 0", "INS SimpleName: outputTokens to ClassInstanceCreation at 1"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS ExpressionStatement to Block at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: indenter to MethodInvocation at 0", "INS SimpleName: breakLines to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 5", "INS SimpleName: indenter to MethodInvocation at 0", "INS SimpleName: indent to MethodInvocation at 1", "INS SimpleName: lineLengthLimit to MethodInvocation at 2"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: List<String> to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV SimpleName: outputTokens to ReturnStatement at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.lexer.Keyword", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.ArrayList", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Arrays"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashSet"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.LinkedList"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Set", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TypeDeclaration: class", "DEL IfStatement", "DEL SimpleName: Indent", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Assignment: =", "DEL NumberLiteral: 2", "DEL InfixExpression: &&", "DEL Modifier: private", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: text", "DEL ExpressionStatement", "DEL SimpleName: spaces", "DEL SimpleName: add", "DEL SimpleName: text", "DEL SimpleName: setInStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: TokenClassification", "DEL CharacterLiteral: ' '", "DEL SimpleType: Keyword", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL StringLiteral: \"\\n\"", "DEL SimpleName: String", "DEL SimpleName: spaceAfter", "DEL SimpleName: charInLine", "DEL NumberLiteral: 0", "DEL SimpleName: outputTokens", "DEL Modifier: private", "DEL Block", "DEL SimpleName: equals", "DEL SimpleName: nFrames", "DEL BreakStatement", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: mark", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL BreakStatement", "DEL SimpleName: equals", "DEL IfStatement", "DEL StringLiteral: \":\"", "DEL SwitchCase", "DEL CharacterLiteral: '['", "DEL Block", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: lastToken", "DEL SimpleName: text", "DEL SimpleName: FilePosition", "DEL SimpleName: breakBefore", "DEL SimpleName: pos", "DEL SimpleName: lastLine", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL InfixExpression: +", "DEL SimpleName: equals", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: get", "DEL MethodInvocation", "DEL VariableDeclarationExpression", "DEL CharacterLiteral: '['", "DEL ClassInstanceCreation", "DEL Assignment: =", "DEL ThisExpression", "DEL SwitchStatement", "DEL Block", "DEL SimpleName: indent", "DEL BooleanLiteral: true", "DEL Modifier: static", "DEL TextElement: The end line number of the last token seen. ", "DEL Block", "DEL SimpleType: Indent", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: charInLine", "DEL SimpleName: spaceBefore", "DEL SimpleName: equals", "DEL BreakStatement", "DEL Javadoc", "DEL TextElement: True iff we are in a statement.", "DEL SimpleName: TokenClassification", "DEL CharacterLiteral: ' '", "DEL NumberLiteral: 1", "DEL SimpleName: lastToken", "DEL SimpleName: indentStack", "DEL MethodInvocation", "DEL SimpleName: charInLine", "DEL PrefixExpression: -", "DEL SimpleName: spaceAfter", "DEL SimpleName: newLine", "DEL NumberLiteral: 0", "DEL Block", "DEL BooleanLiteral: true", "DEL CharacterLiteral: '('", "DEL SimpleName: spaceAfter", "DEL SimpleType: HashSet", "DEL SimpleName: newLine", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleName: inStatement", "DEL PrimitiveType: boolean", "DEL Assignment: =", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: append", "DEL NumberLiteral: 16", "DEL SimpleName: kw", "DEL IfStatement", "DEL QualifiedName: TokenClassification.OTHER", "DEL MethodInvocation", "DEL SimpleName: text", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL ExpressionStatement", "DEL SimpleName: text", "DEL Block", "DEL SimpleType: ArrayList", "DEL InfixExpression: ==", "DEL IfStatement", "DEL SimpleName: indentOffset", "DEL SimpleName: mark", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL Block", "DEL CharacterLiteral: ','", "DEL Assignment: =", "DEL Block", "DEL VariableDeclarationStatement", "DEL TextElement: because we have not yet seen a semicolon.", "DEL InfixExpression: ||", "DEL SimpleName: setInStatement", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL Assignment: =", "DEL Assignment: =", "DEL BooleanLiteral: false", "DEL BooleanLiteral: false", "DEL StringLiteral: \")\"", "DEL MethodDeclaration", "DEL IfStatement", "DEL SimpleName: outputTokens", "DEL SimpleName: text", "DEL SimpleName: space", "DEL InfixExpression: +", "DEL SimpleName: String", "DEL ClassInstanceCreation", "DEL BreakStatement", "DEL SimpleName: emit", "DEL MethodInvocation", "DEL SimpleName: pos", "DEL StringLiteral: \"(\"", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL TextElement: True if the last token needs a following space. ", "DEL Block", "DEL Block", "DEL SimpleName: spaceBefore", "DEL SimpleName: spaceAfter", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL StringLiteral: \"/\"", "DEL SimpleName: lastToken", "DEL StringLiteral: \"}\"", "DEL SimpleName: FilePosition", "DEL Modifier: private", "DEL SimpleName: indentOffset", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL SimpleName: popIndentStack", "DEL ExpressionStatement", "DEL QualifiedName: sframe.spaces", "DEL BreakStatement", "DEL IfStatement", "DEL SimpleType: StringBuilder", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL InfixExpression: ==", "DEL TextElement: The last position marked. ", "DEL SimpleName: Set", "DEL Block", "DEL SwitchStatement", "DEL MethodInvocation", "DEL SimpleName: processMark", "DEL SimpleName: i", "DEL InfixExpression: !=", "DEL TagElement", "DEL Modifier: private", "DEL SimpleName: mark", "DEL SimpleName: SPACE", "DEL ExpressionStatement", "DEL SimpleName: lastToken", "DEL SimpleName: append", "DEL BreakStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL PrimitiveType: char", "DEL SimpleName: lastClass", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleName: tClass", "DEL SimpleName: tClass", "DEL BooleanLiteral: false", "DEL SimpleName: TokenClassification", "DEL InfixExpression: ||", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL BreakStatement", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL SwitchCase", "DEL SimpleName: mark", "DEL InfixExpression: ==", "DEL SimpleName: set", "DEL Assignment: =", "DEL InfixExpression: ==", "DEL TagElement", "DEL SimpleName: deindentRecentlyOpenedParens", "DEL BreakStatement", "DEL SimpleName: add", "DEL SwitchCase", "DEL SimpleName: last", "DEL SimpleName: lastClass", "DEL MethodInvocation", "DEL SimpleName: i", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleType: List", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL SwitchCase", "DEL BooleanLiteral: false", "DEL SimpleName: Indent", "DEL NumberLiteral: 0", "DEL SimpleName: nSpaces", "DEL StringLiteral: \"}\"", "DEL SimpleName: outputTokens", "DEL PrimitiveType: void", "DEL BooleanLiteral: true", "DEL BooleanLiteral: true", "DEL SimpleName: lastToken", "DEL SimpleName: outputTokens", "DEL SimpleName: startLineNo", "DEL SimpleName: size", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL Assignment: =", "DEL SimpleName: pendingSpace", "DEL Assignment: +=", "DEL Block", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL SimpleName: setInStatement", "DEL SimpleName: spaceBefore", "DEL SimpleName: spaceBefore", "DEL BooleanLiteral: false", "DEL SimpleName: nFrames", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: pushIndent", "DEL IfStatement", "DEL Modifier: final", "DEL ParenthesizedExpression", "DEL QualifiedName: TokenClassification.OTHER", "DEL IfStatement", "DEL SimpleName: equals", "DEL SimpleName: startLineNo", "DEL TextElement: the <code>+</code> is indented past the beginning of the previous line", "DEL Assignment: =", "DEL InfixExpression: ||", "DEL NumberLiteral: 0", "DEL StringLiteral: \"default\"", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: emit", "DEL SwitchCase", "DEL SimpleName: spaces", "DEL IfStatement", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: spaceBefore", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL InfixExpression: ==", "DEL SimpleName: spaces", "DEL Assignment: =", "DEL Block", "DEL Assignment: =", "DEL SimpleName: length", "DEL BooleanLiteral: true", "DEL SimpleName: indent", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL NullLiteral", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL Block", "DEL SimpleName: spaceBefore", "DEL VariableDeclarationFragment", "DEL SimpleName: lastToken", "DEL MethodInvocation", "DEL SimpleName: nSpaces", "DEL FieldDeclaration", "DEL BooleanLiteral: true", "DEL BreakStatement", "DEL SimpleName: emit", "DEL Modifier: private", "DEL FieldAccess", "DEL MethodInvocation", "DEL CharacterLiteral: ':'", "DEL SimpleType: FilePosition", "DEL CharacterLiteral: '{'", "DEL PrimitiveType: int", "DEL SimpleName: getOutputTokens", "DEL SwitchCase", "DEL ReturnStatement", "DEL StringLiteral: \")\"", "DEL StringLiteral: \"                \"", "DEL MethodInvocation", "DEL CharacterLiteral: ')'", "DEL CharacterLiteral: ';'", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: spaces", "DEL SimpleName: Keyword", "DEL SimpleType: Indent", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL SimpleName: spaceBefore", "DEL CharacterLiteral: ' '", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: startLineNo", "DEL PrefixExpression: ++", "DEL MethodInvocation", "DEL SimpleName: text", "DEL Block", "DEL SimpleName: Math", "DEL SimpleName: LINEBREAK", "DEL SimpleName: lastToken", "DEL SimpleName: List", "DEL IfStatement", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL SimpleName: inStatement", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL Javadoc", "DEL TextElement: Number of characters written to out since the last linebreak. ", "DEL ParameterizedType: HashSet<String>", "DEL ReturnStatement", "DEL VariableDeclarationExpression", "DEL SimpleName: lastToken", "DEL Block", "DEL FieldAccess", "DEL SimpleName: lastLine", "DEL InfixExpression: &&", "DEL Assignment: =", "DEL PrimitiveType: int", "DEL SimpleName: HashSet", "DEL SimpleName: pushIndent", "DEL PrimitiveType: boolean", "DEL SimpleName: nSpaces", "DEL MethodDeclaration", "DEL SwitchCase", "DEL ExpressionStatement", "DEL BreakStatement", "DEL SimpleName: ch0", "DEL SimpleName: newLine", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: pendingSpace", "DEL SimpleName: setInStatement", "DEL StringLiteral: \"=\"", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: popIndentStack", "DEL SimpleName: Keyword", "DEL SimpleName: get", "DEL StringLiteral: \"                \"", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: popIndentStack", "DEL Block", "DEL SimpleName: lastToken", "DEL MethodInvocation", "DEL Modifier: private", "DEL TagElement", "DEL SimpleName: charInLine", "DEL SimpleType: String", "DEL SimpleName: lastClass", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL BreakStatement", "DEL SimpleName: parenthetical", "DEL CharacterLiteral: '\\n'", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL InfixExpression: +", "DEL SwitchCase", "DEL SimpleName: setInStatement", "DEL SwitchCase", "DEL VariableDeclarationFragment", "DEL SimpleName: indentStack", "DEL MethodInvocation", "DEL InfixExpression: -", "DEL Modifier: final", "DEL Block", "DEL InfixExpression: ||", "DEL StringLiteral: \"finally\"", "DEL Assignment: =", "DEL StringLiteral: \"else\"", "DEL SimpleName: equals", "DEL QualifiedName: TokenClassification.PUNCTUATION", "DEL ExpressionStatement", "DEL CharacterLiteral: ','", "DEL IfStatement", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: text", "DEL VariableDeclarationStatement", "DEL SimpleName: text", "DEL BreakStatement", "DEL Modifier: private", "DEL SwitchCase", "DEL SimpleName: Indent", "DEL Modifier: private", "DEL SimpleName: max", "DEL SimpleName: breakBefore", "DEL ClassInstanceCreation", "DEL FieldAccess", "DEL Javadoc", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SimpleName: isKeyword", "DEL ParenthesizedExpression", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL QualifiedName: TokenClassification.REGEX", "DEL SimpleName: spaceBefore", "DEL Javadoc", "DEL TextElement: parenthetical blocks indent to the open parenthesis.", "DEL SimpleName: n", "DEL CharacterLiteral: '}'", "DEL SimpleName: breakBefore", "DEL FieldDeclaration", "DEL SimpleName: equals", "DEL VariableDeclarationStatement", "DEL SwitchCase", "DEL FieldDeclaration", "DEL Block", "DEL CharacterLiteral: '}'", "DEL IfStatement", "DEL InfixExpression: &&", "DEL ParenthesizedExpression", "DEL SimpleType: String", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: spaces", "DEL SimpleName: nSpaces", "DEL SimpleName: pendingSpace", "DEL Initializer", "DEL NumberLiteral: 0", "DEL InfixExpression: &&", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: indentStack", "DEL Assignment: =", "DEL StringLiteral: \".\"", "DEL ExpressionStatement", "DEL SimpleName: s", "DEL SimpleName: mark", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL BooleanLiteral: true", "DEL IfStatement", "DEL PrefixExpression: ++", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: pos", "DEL PrimitiveType: int", "DEL SimpleName: indent", "DEL BreakStatement", "DEL NumberLiteral: 0", "DEL VariableDeclarationStatement", "DEL SimpleName: equals", "DEL IfStatement", "DEL StringLiteral: \")\"", "DEL SimpleName: space", "DEL SimpleName: n", "DEL Assignment: =", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL SimpleType: FilePosition", "DEL ExpressionStatement", "DEL QualifiedName: TokenClassification.REGEX", "DEL SimpleName: Indent", "DEL SimpleName: popIndentStack", "DEL SwitchCase", "DEL VariableDeclarationFragment", "DEL InfixExpression: >", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: asList", "DEL Assignment: =", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleType: Indent", "DEL SimpleType: Indent", "DEL InfixExpression: >=", "DEL Assignment: =", "DEL Modifier: private", "DEL SimpleName: lastClass", "DEL SimpleName: KEYWORDS", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL PrimitiveType: boolean", "DEL Block", "DEL InfixExpression: >", "DEL NumberLiteral: 0", "DEL SimpleName: equals", "DEL ExpressionStatement", "DEL CharacterLiteral: '\\n'", "DEL SimpleName: Indent", "DEL SimpleName: ch0", "DEL StringLiteral: \"\\n\"", "DEL Modifier: private", "DEL SimpleName: equals", "DEL SimpleName: KEYWORDS", "DEL SimpleName: text", "DEL SwitchCase", "DEL ForStatement", "DEL Assignment: =", "DEL SimpleName: tClass", "DEL ExpressionStatement", "DEL CharacterLiteral: ';'", "DEL Block", "DEL SimpleName: spaceAfter", "DEL MethodInvocation", "DEL SimpleName: charInLine", "DEL ExpressionStatement", "DEL SimpleName: i", "DEL PrimitiveType: char", "DEL SimpleName: lastToken", "DEL SimpleName: nFrames", "DEL SimpleName: lastToken", "DEL SimpleName: isDigit", "DEL Assignment: =", "DEL SimpleName: length", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL SimpleName: size", "DEL CharacterLiteral: ' '", "DEL Assignment: =", "DEL WhileStatement", "DEL CharacterLiteral: '{'", "DEL SimpleName: lastToken", "DEL SimpleName: parenthetical", "DEL NumberLiteral: 0", "DEL NumberLiteral: 0", "DEL TagElement", "DEL CharacterLiteral: ' '", "DEL Block", "DEL SimpleName: last", "DEL InfixExpression: >=", "DEL SwitchCase", "DEL Modifier: final", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: lastToken", "DEL TagElement", "DEL TextElement: Stack of indentation positions.", "DEL PrimitiveType: boolean", "DEL VariableDeclarationFragment", "DEL SimpleName: add", "DEL StringLiteral: \";\"", "DEL InfixExpression: +", "DEL Block", "DEL SimpleName: indentStack", "DEL SimpleName: ch", "DEL MethodInvocation", "DEL SimpleName: text", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: add", "DEL SwitchCase", "DEL SimpleType: String", "DEL NumberLiteral: 1", "DEL SimpleName: mark", "DEL TextElement: Are we in a () or [] block.", "DEL SimpleName: sframe", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: isKeyword", "DEL Block", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL FieldAccess", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SimpleName: charInLine", "DEL CharacterLiteral: ' '", "DEL CharacterLiteral: '\\n'", "DEL CharacterLiteral: '{'", "DEL CharacterLiteral: ']'", "DEL Assignment: =", "DEL InfixExpression: !=", "DEL Assignment: =", "DEL SimpleName: newLine", "DEL SimpleType: Indent", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL StringLiteral: \" \"", "DEL QualifiedName: sframe.parenthetical", "DEL PrimitiveType: void", "DEL IfStatement", "DEL SwitchCase", "DEL SwitchStatement", "DEL SimpleName: add", "DEL FieldDeclaration", "DEL Block", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL SimpleType: LinkedList", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL Block", "DEL CharacterLiteral: '\\n'", "DEL SimpleName: spaceBefore", "DEL NumberLiteral: 1", "DEL InfixExpression: >", "DEL SimpleName: text", "DEL NumberLiteral: 1", "DEL ExpressionStatement", "DEL NumberLiteral: 1", "DEL TextElement: + y;", "DEL SimpleName: pushIndent", "DEL SimpleName: spaces", "DEL Assignment: =", "DEL SimpleName: toString", "DEL TagElement: @code", "DEL SimpleName: top", "DEL Assignment: =", "DEL SimpleName: mark", "DEL MethodInvocation", "DEL SimpleName: emit", "DEL SimpleName: indentStack", "DEL Javadoc", "DEL Block", "DEL IfStatement", "DEL BreakStatement", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL Block", "DEL SwitchCase", "DEL InfixExpression: !=", "DEL SimpleType: Set", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: spaceAfter", "DEL SimpleName: n", "DEL MethodDeclaration", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleName: spaceBefore", "DEL ExpressionStatement", "DEL SimpleName: tClass", "DEL Javadoc", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL SimpleName: tClass", "DEL StringLiteral: \"case\"", "DEL MethodInvocation", "DEL SimpleName: get", "DEL ExpressionStatement", "DEL NumberLiteral: 4", "DEL SimpleName: s", "DEL SimpleName: sb", "DEL ForStatement", "DEL SimpleName: equals", "DEL SimpleName: i", "DEL SimpleName: toString", "DEL SimpleName: Indent", "DEL MethodInvocation", "DEL Assignment: =", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL SimpleName: spaceBefore", "DEL Assignment: =", "DEL EnhancedForStatement", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleName: length", "DEL SimpleName: charAt", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: charInLine", "DEL SimpleName: breakBefore", "DEL SimpleName: spaces", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: tClass", "DEL SimpleName: get", "DEL ExpressionStatement", "DEL SimpleName: text", "DEL InfixExpression: +", "DEL ParameterizedType: LinkedList<Indent>", "DEL PrefixExpression: !", "DEL SimpleName: inStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL CharacterLiteral: '.'", "DEL SimpleName: charInLine", "DEL FieldDeclaration", "DEL TypeDeclaration: class", "DEL Assignment: =", "DEL SimpleName: Arrays", "DEL SimpleName: pendingSpace", "DEL Modifier: private", "DEL PrefixExpression: !", "DEL Assignment: =", "DEL Assignment: =", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: charAt", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: equals", "DEL MethodInvocation", "DEL Assignment: =", "DEL NumberLiteral: 2", "DEL StringLiteral: \"\\n\"", "DEL Block", "DEL SimpleName: equals", "DEL SimpleType: TokenClassification", "DEL IfStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL BooleanLiteral: true", "DEL Block", "DEL Assignment: =", "DEL Block", "DEL Assignment: =", "DEL InfixExpression: &&", "DEL ExpressionStatement", "DEL SimpleName: spaceAfter", "DEL ExpressionStatement", "DEL FieldAccess", "DEL Block", "DEL SimpleName: spaceBefore", "DEL SimpleName: equals", "DEL InfixExpression: &&", "DEL NumberLiteral: 0", "DEL CharacterLiteral: ' '", "DEL ExpressionStatement", "DEL SimpleName: indentStack", "DEL FieldAccess", "DEL SimpleName: indentStack", "DEL TagElement", "DEL Modifier: private", "DEL SimpleName: add", "DEL SimpleName: sb", "DEL SimpleName: LinkedList", "DEL SimpleName: sb", "DEL MethodDeclaration", "DEL BreakStatement", "DEL CharacterLiteral: '\\n'", "DEL SimpleName: sframe", "DEL SimpleName: parenthetical", "DEL SimpleName: lastClass", "DEL SwitchStatement", "DEL SimpleName: equals", "DEL PrefixExpression: --", "DEL BooleanLiteral: false", "DEL MethodDeclaration", "DEL NullLiteral", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL SingleVariableDeclaration", "DEL SimpleName: equals", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL InfixExpression: >=", "DEL InfixExpression: <", "DEL SimpleName: spaceAfter", "DEL IfStatement", "DEL CharacterLiteral: '\\n'", "DEL CharacterLiteral: ' '", "DEL SimpleName: breakBefore", "DEL BooleanLiteral: false", "DEL NumberLiteral: 0", "DEL SimpleName: spaceAfter", "DEL SimpleName: lastToken", "DEL SwitchCase", "DEL SimpleName: mark", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleName: pendingSpace", "DEL SimpleName: breakBefore", "DEL ParameterizedType: List<String>", "DEL TextElement: E.g. in ", "DEL SimpleName: charAt", "DEL SimpleName: processToken", "DEL CharacterLiteral: '\\0'", "DEL ExpressionStatement", "DEL SimpleName: ch", "DEL Block", "DEL SimpleName: text", "DEL PrimitiveType: void", "DEL IfStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: lastToken", "DEL NumberLiteral: 0", "DEL StringLiteral: \"//\"", "DEL SimpleName: equals", "DEL ExpressionStatement", "DEL SimpleName: pendingSpace", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL SimpleName: spaceBefore", "DEL ExpressionStatement", "DEL SimpleName: List", "DEL MethodInvocation", "DEL SimpleName: lastLine", "DEL Assignment: =", "DEL QualifiedName: top.parenthetical", "DEL FieldDeclaration", "DEL PrimitiveType: int", "DEL Block", "DEL ParameterizedType: Set<String>", "DEL SimpleName: TokenClassification", "DEL Assignment: =", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL BreakStatement", "DEL SimpleName: Indent", "DEL SimpleName: text", "DEL MethodInvocation", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL BooleanLiteral: false", "DEL TagElement", "DEL SimpleName: nSpaces", "DEL SimpleName: get", "DEL ThisExpression", "DEL SimpleName: sb", "DEL VariableDeclarationFragment", "DEL SimpleName: startsWith", "DEL SimpleName: spaceAfter", "DEL PrefixExpression: !", "DEL SimpleName: pos", "DEL SimpleName: get", "DEL SwitchCase", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL Modifier: static", "DEL FieldDeclaration", "DEL SimpleName: spaceBefore", "DEL SimpleName: equals", "DEL VariableDeclarationStatement", "DEL SimpleName: length", "DEL SimpleType: List", "DEL Assignment: =", "DEL SimpleName: spaceBefore", "DEL Block", "DEL SimpleName: parenthetical", "DEL SwitchStatement", "DEL ExpressionStatement", "DEL SimpleName: ch", "DEL SimpleName: charInLine", "DEL Block", "DEL VariableDeclarationStatement", "DEL Block", "DEL TextElement: Semicolons are not treated as statement separators in that context.", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL Assignment: =", "DEL ExpressionStatement", "DEL PrefixExpression: ++", "DEL PrimitiveType: int", "DEL StringLiteral: \"/\"", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: s", "DEL SimpleName: values", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleName: last", "DEL SimpleName: spaceBefore", "DEL SimpleName: text", "DEL WhileStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: pendingSpace", "DEL SimpleName: space", "DEL CharacterLiteral: '\\0'", "DEL SimpleName: indentStack", "DEL SimpleName: s", "DEL MethodInvocation", "DEL NumberLiteral: 16", "DEL ExpressionStatement", "DEL SimpleName: lastToken", "DEL CharacterLiteral: '\\r'", "DEL SimpleName: contains", "DEL SimpleName: indentOffset", "DEL IfStatement", "DEL MethodDeclaration", "DEL BreakStatement", "DEL Assignment: =", "DEL IfStatement", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL Block", "DEL SwitchCase", "DEL SimpleName: get", "DEL NumberLiteral: 0", "DEL InfixExpression: +", "DEL PrimitiveType: char", "DEL SimpleType: TokenClassification", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL SimpleName: lastToken", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Block", "DEL CharacterLiteral: '\\n'", "DEL SimpleName: nSpaces", "DEL SimpleName: outputTokens", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL TextElement: var foo = x", "DEL Javadoc", "DEL StringLiteral: \":\"", "DEL Block", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL SimpleName: tClass", "DEL BooleanLiteral: true", "DEL InfixExpression: ==", "DEL SimpleName: spaceAfter", "DEL Block", "DEL Assignment: =", "DEL SimpleName: outputTokens", "DEL ParameterizedType: ArrayList<String>", "DEL ExpressionStatement", "DEL PrefixExpression: --", "DEL SimpleName: spaceBefore", "DEL SimpleName: classify", "DEL SimpleName: text", "DEL SimpleName: String", "DEL InfixExpression: !=", "DEL SimpleName: tClass", "DEL SimpleName: breakBefore", "DEL InfixExpression: ||", "DEL SimpleName: remove", "DEL CharacterLiteral: '\\0'", "DEL InfixExpression: ||", "DEL SimpleName: spaces", "DEL NumberLiteral: 0", "DEL SimpleName: charInLine", "DEL SimpleName: n", "DEL Assignment: =", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SwitchCase", "DEL SimpleName: kw", "DEL MethodInvocation", "DEL CharacterLiteral: ':'", "DEL SimpleName: equals", "DEL SimpleName: s", "DEL Block", "DEL SimpleName: charInLine", "DEL Block", "DEL SimpleName: Indent", "DEL SimpleName: text", "DEL NumberLiteral: 0", "DEL SimpleName: StringBuilder", "DEL CharacterLiteral: ' '", "DEL SimpleName: spaceBefore", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL StringLiteral: \".\"", "DEL NumberLiteral: 1", "DEL SimpleName: indentStack", "DEL InfixExpression: &&", "DEL SimpleName: nFrames", "DEL SimpleName: Indent", "DEL SimpleName: getIndentation", "DEL Block", "DEL SimpleName: toString", "DEL Modifier: private", "DEL ReturnStatement", "DEL ParameterizedType: List<Indent>", "DEL PrimitiveType: void", "DEL InfixExpression: ||", "DEL TextElement: Curly brackets indent to two past the last stack position and", "DEL BooleanLiteral: false", "DEL SimpleName: parenthetical", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: s", "DEL Assignment: =", "DEL SimpleType: StringBuilder", "DEL SimpleType: Indent", "DEL SimpleName: StringBuilder", "DEL NumberLiteral: 0", "DEL InfixExpression: -", "DEL Block", "DEL ThisExpression", "DEL SimpleName: i", "DEL Assignment: =", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL NumberLiteral: 1", "DEL StringLiteral: \"while\"", "DEL BooleanLiteral: false", "DEL FieldDeclaration", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: outputTokens", "DEL SimpleName: breakBefore", "DEL SimpleName: spaceAfter", "DEL FieldAccess", "DEL SimpleType: String", "DEL SimpleName: getIndentation", "DEL InfixExpression: &&", "DEL SimpleType: Indent", "DEL ExpressionStatement", "DEL SimpleName: charAt", "DEL PrimitiveType: void", "DEL SimpleName: offset", "DEL SimpleName: get", "DEL ClassInstanceCreation", "DEL PrimitiveType: int", "DEL PrefixExpression: !", "DEL Block", "DEL SimpleName: String", "DEL Block", "DEL SimpleName: equals", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL NullLiteral", "DEL NumberLiteral: 4", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL PrimitiveType: void", "DEL Assignment: =", "DEL SimpleName: nFrames", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL ExpressionStatement", "DEL StringLiteral: \"/\"", "DEL SimpleName: text", "DEL FieldAccess", "DEL SimpleName: breakBefore", "DEL ExpressionStatement", "DEL BooleanLiteral: false", "DEL IfStatement", "DEL SimpleName: indentStack", "DEL SimpleName: Spacer", "DEL MethodInvocation", "DEL SimpleName: text", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: lastLine", "DEL SwitchCase", "DEL SimpleName: breakBefore", "DEL VariableDeclarationFragment", "DEL QualifiedName: TokenClassification.OTHER", "DEL SwitchCase", "DEL SwitchCase", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: ch0", "DEL ExpressionStatement", "DEL SimpleName: text", "DEL InfixExpression: !=", "DEL SimpleName: String", "DEL SimpleName: sframe", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL SimpleName: size", "DEL SimpleType: String", "DEL Assignment: +=", "DEL SimpleName: nFrames", "DEL SimpleName: mark", "DEL SimpleName: Indent", "DEL SimpleName: equals", "DEL MethodInvocation", "DEL CharacterLiteral: '\\0'", "DEL SimpleName: inStatement", "DEL SimpleName: spaceAfter", "DEL BreakStatement", "DEL InfixExpression: !=", "DEL Assignment: +=", "DEL SimpleName: last", "DEL SimpleType: Indent", "DEL QualifiedName: top.spaces", "DEL PrimitiveType: char", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SwitchCase", "DEL SimpleName: deindentRecentlyOpenedParens", "DEL SwitchCase", "DEL SimpleName: charInLine", "DEL InfixExpression: &&", "DEL ExpressionStatement", "DEL Assignment: =", "DEL MethodInvocation", "DEL IfStatement", "DEL StringLiteral: \"catch\"", "DEL SimpleName: ch0", "DEL VariableDeclarationFragment", "DEL PrimitiveType: boolean", "DEL Assignment: -=", "DEL InfixExpression: ==", "DEL SimpleName: indentStack", "DEL TextElement: The last non-space/comment token. ", "DEL CharacterLiteral: '='", "DEL CharacterLiteral: '\\0'", "DEL CharacterLiteral: ' '", "DEL PrimitiveType: char", "DEL ExpressionStatement", "DEL SimpleName: nSpaces", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: Character", "DEL SimpleName: COMMENT", "DEL SimpleName: isNumber", "DEL SimpleName: spaceBefore", "DEL PrimitiveType: void", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL Modifier: static", "DEL Modifier: private", "DEL SimpleName: spaces", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL ConditionalExpression", "DEL TextElement: The classification of the last non-space/comment token. ", "DEL SimpleName: pendingSpace", "DEL SimpleName: outputTokens", "DEL PrefixExpression: !", "DEL ExpressionStatement", "DEL BooleanLiteral: true", "DEL SimpleName: toString", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: indentStack", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL NumberLiteral: 0", "DEL MethodDeclaration", "DEL SimpleName: lastToken", "DEL CharacterLiteral: '('", "DEL ExpressionStatement", "DEL SimpleName: charAt", "DEL SimpleType: String", "DEL PrefixExpression: !", "DEL Assignment: =", "DEL IfStatement", "DEL ExpressionStatement", "DEL InfixExpression: &&", "DEL SimpleName: ArrayList", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL CharacterLiteral: '\\0'", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: KEYWORDS", "DEL SimpleName: tClass", "DEL PrimitiveType: int", "DEL QualifiedName: sframe.inStatement", "DEL InfixExpression: &&"]}]}}, {"JsPrettyPrinter_diff": {"operations": ["Insert FieldDeclaration(27) into TypeDeclaration: class(162) at 5", "Insert MethodDeclaration(66) into TypeDeclaration: class(162) at 7", "Insert MethodDeclaration(75) into TypeDeclaration: class(162) at 8", "Insert Modifier: private(22) into FieldDeclaration(27) at 0", "Insert PrimitiveType: int(23) into FieldDeclaration(27) at 1", "Insert VariableDeclarationFragment(26) into FieldDeclaration(27) at 2", "Insert Modifier: public(53) into MethodDeclaration(66) at 0", "Insert PrimitiveType: void(54) into MethodDeclaration(66) at 1", "Insert SimpleName: setLineLengthLimit(55) into MethodDeclaration(66) at 2", "Insert SingleVariableDeclaration(58) into MethodDeclaration(66) at 3", "Insert Block(65) into MethodDeclaration(66) at 4", "Insert Modifier: public(67) into MethodDeclaration(75) at 0", "Insert PrimitiveType: int(68) into MethodDeclaration(75) at 1", "Insert SimpleName: getLineLengthLimit(69) into MethodDeclaration(75) at 2", "Insert Block(74) into MethodDeclaration(75) at 3", "Insert SimpleName: lineLengthLimit(24) into VariableDeclarationFragment(26) at 0", "Insert NumberLiteral: 80(25) into VariableDeclarationFragment(26) at 1", "Insert PrimitiveType: int(56) into SingleVariableDeclaration(58) at 0", "Insert SimpleName: lineLengthLimit(57) into SingleVariableDeclaration(58) at 1", "Insert ExpressionStatement(64) into Block(65) at 0", "Insert ReturnStatement(73) into Block(74) at 0", "Insert VariableDeclarationStatement(139) into Block(160) at 2", "Insert VariableDeclarationStatement(148) into Block(160) at 3", "Insert ExpressionStatement(152) into Block(160) at 4", "Insert ExpressionStatement(157) into Block(160) at 5", "Move ReturnStatement(275) into Block(160) at 6", "Insert Assignment: =(63) into ExpressionStatement(64) at 0", "Insert FieldAccess(72) into ReturnStatement(73) at 0", "Move ParameterizedType: List<String>(272) into VariableDeclarationStatement(139) at 0", "Insert VariableDeclarationFragment(138) into VariableDeclarationStatement(139) at 1", "Insert SimpleType: Indenter(141) into VariableDeclarationStatement(148) at 0", "Insert VariableDeclarationFragment(147) into VariableDeclarationStatement(148) at 1", "Insert MethodInvocation(151) into ExpressionStatement(152) at 0", "Insert MethodInvocation(156) into ExpressionStatement(157) at 0", "Insert FieldAccess(61) into Assignment: =(63) at 0", "Insert SimpleName: lineLengthLimit(62) into Assignment: =(63) at 1", "Insert ThisExpression(70) into FieldAccess(72) at 0", "Insert SimpleName: lineLengthLimit(71) into FieldAccess(72) at 1", "Insert SimpleName: outputTokens(134) into VariableDeclarationFragment(138) at 0", "Move MethodInvocation(114) into VariableDeclarationFragment(138) at 1", "Insert SimpleName: Indenter(140) into SimpleType: Indenter(141) at 0", "Insert SimpleName: indenter(142) into VariableDeclarationFragment(147) at 0", "Insert ClassInstanceCreation(146) into VariableDeclarationFragment(147) at 1", "Insert SimpleName: indenter(149) into MethodInvocation(151) at 0", "Insert SimpleName: breakLines(150) into MethodInvocation(151) at 1", "Insert SimpleName: indenter(153) into MethodInvocation(156) at 0", "Insert SimpleName: indent(154) into MethodInvocation(156) at 1", "Insert SimpleName: lineLengthLimit(155) into MethodInvocation(156) at 2", "Insert ThisExpression(59) into FieldAccess(61) at 0", "Insert SimpleName: lineLengthLimit(60) into FieldAccess(61) at 1", "Insert SimpleType: Indenter(144) into ClassInstanceCreation(146) at 0", "Insert SimpleName: outputTokens(145) into ClassInstanceCreation(146) at 1", "Insert SimpleName: Indenter(143) into SimpleType: Indenter(144) at 0", "Delete QualifiedName: com.google.caja.lexer.Keyword(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.ArrayList(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.Arrays(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.util.HashSet(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.util.LinkedList(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: java.util.Set(20)", "Delete ImportDeclaration(21)", "Delete SimpleName: Spacer(119)", "Delete TextElement: Stack of indentation positions.(120)", "Delete TextElement: Curly brackets indent to two past the last stack position and(121)", "Delete TextElement: parenthetical blocks indent to the open parenthesis.(122)", "Delete TagElement(123)", "Delete Javadoc(124)", "Delete Modifier: private(125)", "Delete SimpleName: List(126)", "Delete SimpleType: List(127)", "Delete SimpleName: Indent(128)", "Delete SimpleType: Indent(129)", "Delete ParameterizedType: List<Indent>(130)", "Delete SimpleName: indentStack(131)", "Delete SimpleName: LinkedList(132)", "Delete SimpleType: LinkedList(133)", "Delete SimpleName: Indent(134)", "Delete SimpleType: Indent(135)", "Delete ParameterizedType: LinkedList<Indent>(136)", "Delete SimpleName: Arrays(137)", "Delete SimpleName: asList(138)", "Delete SimpleName: Indent(139)", "Delete SimpleType: Indent(140)", "Delete NumberLiteral: 0(141)", "Delete BooleanLiteral: false(142)", "Delete ClassInstanceCreation(143)", "Delete MethodInvocation(144)", "Delete ClassInstanceCreation(145)", "Delete VariableDeclarationFragment(146)", "Delete FieldDeclaration(147)", "Delete TextElement: The last position marked. (148)", "Delete TagElement(149)", "Delete Javadoc(150)", "Delete Modifier: private(151)", "Delete SimpleName: FilePosition(152)", "Delete SimpleType: FilePosition(153)", "Delete SimpleName: mark(154)", "Delete VariableDeclarationFragment(155)", "Delete FieldDeclaration(156)", "Delete TextElement: Number of characters written to out since the last linebreak. (157)", "Delete TagElement(158)", "Delete Javadoc(159)", "Delete Modifier: private(160)", "Delete PrimitiveType: int(161)", "Delete SimpleName: charInLine(162)", "Delete VariableDeclarationFragment(163)", "Delete FieldDeclaration(164)", "Delete TextElement: The end line number of the last token seen. (165)", "Delete TagElement(166)", "Delete Javadoc(167)", "Delete Modifier: private(168)", "Delete PrimitiveType: int(169)", "Delete SimpleName: lastLine(170)", "Delete NumberLiteral: 1(171)", "Delete VariableDeclarationFragment(172)", "Delete FieldDeclaration(173)", "Delete TextElement: The classification of the last non-space/comment token. (174)", "Delete TagElement(175)", "Delete Javadoc(176)", "Delete Modifier: private(177)", "Delete SimpleName: TokenClassification(178)", "Delete SimpleType: TokenClassification(179)", "Delete SimpleName: lastClass(180)", "Delete VariableDeclarationFragment(181)", "Delete FieldDeclaration(182)", "Delete TextElement: The last non-space/comment token. (183)", "Delete TagElement(184)", "Delete Javadoc(185)", "Delete Modifier: private(186)", "Delete SimpleName: String(187)", "Delete SimpleType: String(188)", "Delete SimpleName: lastToken(189)", "Delete VariableDeclarationFragment(190)", "Delete FieldDeclaration(191)", "Delete TextElement: True if the last token needs a following space. (192)", "Delete TagElement(193)", "Delete Javadoc(194)", "Delete Modifier: private(195)", "Delete PrimitiveType: char(196)", "Delete SimpleName: pendingSpace(197)", "Delete CharacterLiteral: '\\0'(198)", "Delete VariableDeclarationFragment(199)", "Delete FieldDeclaration(200)", "Delete Modifier: private(201)", "Delete Modifier: final(202)", "Delete SimpleName: List(203)", "Delete SimpleType: List(204)", "Delete SimpleName: String(205)", "Delete SimpleType: String(206)", "Delete ParameterizedType: List<String>(207)", "Delete SimpleName: outputTokens(208)", "Delete SimpleName: ArrayList(209)", "Delete SimpleType: ArrayList(210)", "Delete SimpleName: String(211)", "Delete SimpleType: String(212)", "Delete ParameterizedType: ArrayList<String>(213)", "Delete ClassInstanceCreation(214)", "Delete VariableDeclarationFragment(215)", "Delete FieldDeclaration(216)", "Delete Modifier: private(217)", "Delete Modifier: static(218)", "Delete SimpleName: Indent(219)", "Delete PrimitiveType: int(220)", "Delete SimpleName: spaces(221)", "Delete VariableDeclarationFragment(222)", "Delete FieldDeclaration(223)", "Delete TextElement: Are we in a () or [] block.(224)", "Delete TextElement: Semicolons are not treated as statement separators in that context.(225)", "Delete TagElement(226)", "Delete Javadoc(227)", "Delete Modifier: final(228)", "Delete PrimitiveType: boolean(229)", "Delete SimpleName: parenthetical(230)", "Delete VariableDeclarationFragment(231)", "Delete FieldDeclaration(232)", "Delete TextElement: True iff we are in a statement.(233)", "Delete TextElement: E.g. in (234)", "Delete TextElement: var foo = x(235)", "Delete TextElement: + y;(236)", "Delete TagElement: @code(237)", "Delete TextElement: the <code>+</code> is indented past the beginning of the previous line(238)", "Delete TextElement: because we have not yet seen a semicolon.(239)", "Delete TagElement(240)", "Delete Javadoc(241)", "Delete PrimitiveType: boolean(242)", "Delete SimpleName: inStatement(243)", "Delete VariableDeclarationFragment(244)", "Delete FieldDeclaration(245)", "Delete SimpleName: Indent(246)", "Delete PrimitiveType: int(247)", "Delete SimpleName: spaces(248)", "Delete SingleVariableDeclaration(249)", "Delete PrimitiveType: boolean(250)", "Delete SimpleName: parenthetical(251)", "Delete SingleVariableDeclaration(252)", "Delete ThisExpression(253)", "Delete SimpleName: spaces(254)", "Delete FieldAccess(255)", "Delete SimpleName: spaces(256)", "Delete Assignment: =(257)", "Delete ExpressionStatement(258)", "Delete ThisExpression(259)", "Delete SimpleName: parenthetical(260)", "Delete FieldAccess(261)", "Delete SimpleName: parenthetical(262)", "Delete Assignment: =(263)", "Delete ExpressionStatement(264)", "Delete Block(265)", "Delete MethodDeclaration(266)", "Delete TypeDeclaration: class(267)", "Delete SimpleName: getOutputTokens(273)", "Delete Block(276)", "Delete MethodDeclaration(277)", "Delete PrimitiveType: void(278)", "Delete SimpleName: processMark(279)", "Delete SimpleName: FilePosition(280)", "Delete SimpleType: FilePosition(281)", "Delete SimpleName: mark(282)", "Delete SingleVariableDeclaration(283)", "Delete ThisExpression(284)", "Delete SimpleName: mark(285)", "Delete FieldAccess(286)", "Delete SimpleName: mark(287)", "Delete Assignment: =(288)", "Delete ExpressionStatement(289)", "Delete Block(290)", "Delete MethodDeclaration(291)", "Delete PrimitiveType: void(292)", "Delete SimpleName: processToken(293)", "Delete SimpleName: String(294)", "Delete SimpleType: String(295)", "Delete SimpleName: text(296)", "Delete SingleVariableDeclaration(297)", "Delete SimpleName: TokenClassification(298)", "Delete SimpleType: TokenClassification(299)", "Delete SimpleName: tClass(300)", "Delete SimpleName: TokenClassification(301)", "Delete SimpleName: classify(302)", "Delete SimpleName: text(303)", "Delete MethodInvocation(304)", "Delete VariableDeclarationFragment(305)", "Delete VariableDeclarationStatement(306)", "Delete SimpleName: tClass(307)", "Delete NullLiteral(308)", "Delete InfixExpression: ==(309)", "Delete ReturnStatement(310)", "Delete Block(311)", "Delete IfStatement(312)", "Delete SimpleName: tClass(313)", "Delete SimpleName: LINEBREAK(314)", "Delete SwitchCase(315)", "Delete SimpleName: deindentRecentlyOpenedParens(316)", "Delete MethodInvocation(317)", "Delete ExpressionStatement(318)", "Delete SimpleName: pendingSpace(319)", "Delete CharacterLiteral: '\\0'(320)", "Delete Assignment: =(321)", "Delete ExpressionStatement(322)", "Delete SimpleName: emit(323)", "Delete StringLiteral: \"\\n\"(324)", "Delete MethodInvocation(325)", "Delete ExpressionStatement(326)", "Delete ReturnStatement(327)", "Delete SimpleName: SPACE(328)", "Delete SwitchCase(329)", "Delete SimpleName: pendingSpace(330)", "Delete CharacterLiteral: ' '(331)", "Delete Assignment: =(332)", "Delete ExpressionStatement(333)", "Delete ReturnStatement(334)", "Delete SimpleName: COMMENT(335)", "Delete SwitchCase(336)", "Delete SimpleName: mark(337)", "Delete NullLiteral(338)", "Delete InfixExpression: !=(339)", "Delete SimpleName: lastLine(340)", "Delete SimpleName: mark(341)", "Delete SimpleName: startLineNo(342)", "Delete MethodInvocation(343)", "Delete InfixExpression: !=(344)", "Delete InfixExpression: &&(345)", "Delete SimpleName: charInLine(346)", "Delete NumberLiteral: 0(347)", "Delete InfixExpression: !=(348)", "Delete InfixExpression: &&(349)", "Delete SimpleName: newLine(350)", "Delete MethodInvocation(351)", "Delete ExpressionStatement(352)", "Delete SimpleName: lastLine(353)", "Delete SimpleName: mark(354)", "Delete SimpleName: startLineNo(355)", "Delete MethodInvocation(356)", "Delete Assignment: =(357)", "Delete ExpressionStatement(358)", "Delete Block(359)", "Delete StringLiteral: \"/\"(360)", "Delete SimpleName: equals(361)", "Delete SimpleName: lastToken(362)", "Delete MethodInvocation(363)", "Delete SimpleName: pendingSpace(364)", "Delete CharacterLiteral: '\\0'(365)", "Delete InfixExpression: !=(366)", "Delete InfixExpression: ||(367)", "Delete SimpleName: space(368)", "Delete MethodInvocation(369)", "Delete ExpressionStatement(370)", "Delete Block(371)", "Delete IfStatement(372)", "Delete IfStatement(373)", "Delete SimpleName: indent(374)", "Delete NumberLiteral: 0(375)", "Delete MethodInvocation(376)", "Delete ExpressionStatement(377)", "Delete SimpleName: emit(378)", "Delete SimpleName: text(379)", "Delete MethodInvocation(380)", "Delete ExpressionStatement(381)", "Delete SimpleName: text(382)", "Delete SimpleName: startsWith(383)", "Delete StringLiteral: \"//\"(384)", "Delete MethodInvocation(385)", "Delete SimpleName: newLine(386)", "Delete MethodInvocation(387)", "Delete ExpressionStatement(388)", "Delete Block(389)", "Delete SimpleName: pendingSpace(390)", "Delete CharacterLiteral: '\\n'(391)", "Delete Assignment: =(392)", "Delete ExpressionStatement(393)", "Delete Block(394)", "Delete IfStatement(395)", "Delete ReturnStatement(396)", "Delete SwitchCase(397)", "Delete BreakStatement(398)", "Delete SwitchStatement(399)", "Delete PrimitiveType: boolean(400)", "Delete SimpleName: spaceBefore(401)", "Delete BooleanLiteral: false(402)", "Delete VariableDeclarationFragment(403)", "Delete SimpleName: breakBefore(404)", "Delete BooleanLiteral: false(405)", "Delete VariableDeclarationFragment(406)", "Delete VariableDeclarationStatement(407)", "Delete PrimitiveType: char(408)", "Delete SimpleName: spaceAfter(409)", "Delete CharacterLiteral: '\\0'(410)", "Delete VariableDeclarationFragment(411)", "Delete VariableDeclarationStatement(412)", "Delete SimpleName: pendingSpace(413)", "Delete CharacterLiteral: ' '(414)", "Delete SwitchCase(415)", "Delete SimpleName: spaceBefore(416)", "Delete BooleanLiteral: true(417)", "Delete Assignment: =(418)", "Delete ExpressionStatement(419)", "Delete BreakStatement(420)", "Delete CharacterLiteral: '\\n'(421)", "Delete SwitchCase(422)", "Delete SimpleName: breakBefore(423)", "Delete BooleanLiteral: true(424)", "Delete Assignment: =(425)", "Delete ExpressionStatement(426)", "Delete BreakStatement(427)", "Delete SwitchStatement(428)", "Delete SimpleName: pendingSpace(429)", "Delete CharacterLiteral: '\\0'(430)", "Delete Assignment: =(431)", "Delete ExpressionStatement(432)", "Delete SimpleName: tClass(433)", "Delete SimpleName: lastClass(434)", "Delete InfixExpression: ==(435)", "Delete SimpleName: spaceBefore(436)", "Delete StringLiteral: \"(\"(437)", "Delete SimpleName: equals(438)", "Delete SimpleName: lastToken(439)", "Delete MethodInvocation(440)", "Delete PrefixExpression: !(441)", "Delete Assignment: =(442)", "Delete ExpressionStatement(443)", "Delete Block(444)", "Delete SimpleName: lastClass(445)", "Delete QualifiedName: TokenClassification.REGEX(446)", "Delete InfixExpression: ==(447)", "Delete SimpleName: tClass(448)", "Delete QualifiedName: TokenClassification.OTHER(449)", "Delete InfixExpression: ==(450)", "Delete StringLiteral: \"/\"(451)", "Delete SimpleName: equals(452)", "Delete SimpleName: text(453)", "Delete MethodInvocation(454)", "Delete InfixExpression: ||(455)", "Delete SimpleName: spaceBefore(456)", "Delete BooleanLiteral: true(457)", "Delete Assignment: =(458)", "Delete ExpressionStatement(459)", "Delete Block(460)", "Delete IfStatement(461)", "Delete Block(462)", "Delete SimpleName: tClass(463)", "Delete QualifiedName: TokenClassification.REGEX(464)", "Delete InfixExpression: ==(465)", "Delete StringLiteral: \"/\"(466)", "Delete SimpleName: equals(467)", "Delete SimpleName: lastToken(468)", "Delete MethodInvocation(469)", "Delete InfixExpression: &&(470)", "Delete SimpleName: spaceBefore(471)", "Delete BooleanLiteral: true(472)", "Delete Assignment: =(473)", "Delete ExpressionStatement(474)", "Delete Block(475)", "Delete SimpleName: tClass(476)", "Delete QualifiedName: TokenClassification.OTHER(477)", "Delete InfixExpression: ==(478)", "Delete SimpleName: Character(479)", "Delete SimpleName: isDigit(480)", "Delete SimpleName: text(481)", "Delete SimpleName: charAt(482)", "Delete NumberLiteral: 0(483)", "Delete MethodInvocation(484)", "Delete MethodInvocation(485)", "Delete InfixExpression: &&(486)", "Delete StringLiteral: \".\"(487)", "Delete SimpleName: equals(488)", "Delete SimpleName: lastToken(489)", "Delete MethodInvocation(490)", "Delete InfixExpression: &&(491)", "Delete SimpleName: spaceBefore(492)", "Delete BooleanLiteral: true(493)", "Delete Assignment: =(494)", "Delete ExpressionStatement(495)", "Delete Block(496)", "Delete IfStatement(497)", "Delete IfStatement(498)", "Delete IfStatement(499)", "Delete IfStatement(500)", "Delete PrimitiveType: int(501)", "Delete SimpleName: indentOffset(502)", "Delete NumberLiteral: 0(503)", "Delete VariableDeclarationFragment(504)", "Delete VariableDeclarationStatement(505)", "Delete SimpleName: tClass(506)", "Delete QualifiedName: TokenClassification.OTHER(507)", "Delete InfixExpression: ==(508)", "Delete StringLiteral: \"}\"(509)", "Delete SimpleName: equals(510)", "Delete SimpleName: lastToken(511)", "Delete MethodInvocation(512)", "Delete StringLiteral: \"else\"(513)", "Delete SimpleName: equals(514)", "Delete SimpleName: text(515)", "Delete MethodInvocation(516)", "Delete StringLiteral: \"while\"(517)", "Delete SimpleName: equals(518)", "Delete SimpleName: text(519)", "Delete MethodInvocation(520)", "Delete StringLiteral: \"catch\"(521)", "Delete SimpleName: equals(522)", "Delete SimpleName: text(523)", "Delete MethodInvocation(524)", "Delete StringLiteral: \"finally\"(525)", "Delete SimpleName: equals(526)", "Delete SimpleName: text(527)", "Delete MethodInvocation(528)", "Delete InfixExpression: ||(529)", "Delete ParenthesizedExpression(530)", "Delete InfixExpression: &&(531)", "Delete SimpleName: spaceBefore(532)", "Delete BooleanLiteral: true(533)", "Delete Assignment: =(534)", "Delete ExpressionStatement(535)", "Delete SimpleName: breakBefore(536)", "Delete BooleanLiteral: false(537)", "Delete Assignment: =(538)", "Delete ExpressionStatement(539)", "Delete Block(540)", "Delete IfStatement(541)", "Delete SimpleName: isKeyword(542)", "Delete SimpleName: text(543)", "Delete SimpleName: toString(544)", "Delete MethodInvocation(545)", "Delete MethodInvocation(546)", "Delete SimpleName: spaceAfter(547)", "Delete CharacterLiteral: ' '(548)", "Delete Assignment: =(549)", "Delete ExpressionStatement(550)", "Delete StringLiteral: \"default\"(551)", "Delete SimpleName: equals(552)", "Delete SimpleName: text(553)", "Delete MethodInvocation(554)", "Delete StringLiteral: \"case\"(555)", "Delete SimpleName: equals(556)", "Delete SimpleName: text(557)", "Delete MethodInvocation(558)", "Delete InfixExpression: ||(559)", "Delete SimpleName: indentOffset(560)", "Delete NumberLiteral: 2(561)", "Delete PrefixExpression: -(562)", "Delete Assignment: =(563)", "Delete ExpressionStatement(564)", "Delete Block(565)", "Delete IfStatement(566)", "Delete Block(567)", "Delete IfStatement(568)", "Delete Block(569)", "Delete IfStatement(570)", "Delete SimpleName: text(571)", "Delete SimpleName: length(572)", "Delete MethodInvocation(573)", "Delete NumberLiteral: 1(574)", "Delete InfixExpression: ==(575)", "Delete PrimitiveType: char(576)", "Delete SimpleName: ch0(577)", "Delete SimpleName: text(578)", "Delete SimpleName: charAt(579)", "Delete NumberLiteral: 0(580)", "Delete MethodInvocation(581)", "Delete VariableDeclarationFragment(582)", "Delete VariableDeclarationStatement(583)", "Delete SimpleName: ch0(584)", "Delete CharacterLiteral: '{'(585)", "Delete SwitchCase(586)", "Delete SimpleName: lastClass(587)", "Delete QualifiedName: TokenClassification.PUNCTUATION(588)", "Delete InfixExpression: ==(589)", "Delete StringLiteral: \":\"(590)", "Delete SimpleName: equals(591)", "Delete SimpleName: lastToken(592)", "Delete MethodInvocation(593)", "Delete SimpleName: spaceBefore(594)", "Delete BooleanLiteral: true(595)", "Delete Assignment: =(596)", "Delete ExpressionStatement(597)", "Delete SimpleName: breakBefore(598)", "Delete BooleanLiteral: false(599)", "Delete Assignment: =(600)", "Delete ExpressionStatement(601)", "Delete Block(602)", "Delete StringLiteral: \")\"(603)", "Delete SimpleName: equals(604)", "Delete SimpleName: lastToken(605)", "Delete MethodInvocation(606)", "Delete StringLiteral: \"=\"(607)", "Delete SimpleName: equals(608)", "Delete SimpleName: lastToken(609)", "Delete MethodInvocation(610)", "Delete InfixExpression: ||(611)", "Delete ParenthesizedExpression(612)", "Delete PrefixExpression: !(613)", "Delete SimpleName: spaceBefore(614)", "Delete BooleanLiteral: false(615)", "Delete Assignment: =(616)", "Delete ExpressionStatement(617)", "Delete Block(618)", "Delete IfStatement(619)", "Delete IfStatement(620)", "Delete Block(621)", "Delete IfStatement(622)", "Delete SimpleName: spaceAfter(623)", "Delete CharacterLiteral: '\\n'(624)", "Delete Assignment: =(625)", "Delete ExpressionStatement(626)", "Delete BreakStatement(627)", "Delete CharacterLiteral: '['(628)", "Delete SwitchCase(629)", "Delete StringLiteral: \")\"(630)", "Delete SimpleName: equals(631)", "Delete SimpleName: lastToken(632)", "Delete MethodInvocation(633)", "Delete SimpleName: spaceBefore(634)", "Delete BooleanLiteral: false(635)", "Delete Assignment: =(636)", "Delete ExpressionStatement(637)", "Delete Block(638)", "Delete IfStatement(639)", "Delete SimpleName: spaceAfter(640)", "Delete CharacterLiteral: ' '(641)", "Delete Assignment: =(642)", "Delete ExpressionStatement(643)", "Delete BreakStatement(644)", "Delete CharacterLiteral: '('(645)", "Delete SwitchCase(646)", "Delete StringLiteral: \")\"(647)", "Delete SimpleName: equals(648)", "Delete SimpleName: lastToken(649)", "Delete MethodInvocation(650)", "Delete SimpleName: spaceBefore(651)", "Delete BooleanLiteral: false(652)", "Delete Assignment: =(653)", "Delete ExpressionStatement(654)", "Delete Block(655)", "Delete IfStatement(656)", "Delete BreakStatement(657)", "Delete CharacterLiteral: '}'(658)", "Delete SwitchCase(659)", "Delete SimpleName: breakBefore(660)", "Delete BooleanLiteral: true(661)", "Delete Assignment: =(662)", "Delete ExpressionStatement(663)", "Delete SimpleName: spaceAfter(664)", "Delete CharacterLiteral: '\\n'(665)", "Delete Assignment: =(666)", "Delete ExpressionStatement(667)", "Delete SimpleName: popIndentStack(668)", "Delete MethodInvocation(669)", "Delete ExpressionStatement(670)", "Delete SimpleName: setInStatement(671)", "Delete BooleanLiteral: false(672)", "Delete MethodInvocation(673)", "Delete ExpressionStatement(674)", "Delete BreakStatement(675)", "Delete CharacterLiteral: ')'(676)", "Delete SwitchCase(677)", "Delete SimpleName: spaceBefore(678)", "Delete SimpleName: breakBefore(679)", "Delete BooleanLiteral: false(680)", "Delete Assignment: =(681)", "Delete Assignment: =(682)", "Delete ExpressionStatement(683)", "Delete SimpleName: spaceAfter(684)", "Delete CharacterLiteral: ' '(685)", "Delete Assignment: =(686)", "Delete ExpressionStatement(687)", "Delete SimpleName: popIndentStack(688)", "Delete MethodInvocation(689)", "Delete ExpressionStatement(690)", "Delete BreakStatement(691)", "Delete CharacterLiteral: ']'(692)", "Delete SwitchCase(693)", "Delete SimpleName: breakBefore(694)", "Delete BooleanLiteral: false(695)", "Delete Assignment: =(696)", "Delete ExpressionStatement(697)", "Delete SimpleName: spaceBefore(698)", "Delete StringLiteral: \"}\"(699)", "Delete SimpleName: equals(700)", "Delete SimpleName: lastToken(701)", "Delete MethodInvocation(702)", "Delete PrefixExpression: !(703)", "Delete Assignment: =(704)", "Delete ExpressionStatement(705)", "Delete SimpleName: spaceAfter(706)", "Delete CharacterLiteral: ' '(707)", "Delete Assignment: =(708)", "Delete ExpressionStatement(709)", "Delete SimpleName: popIndentStack(710)", "Delete MethodInvocation(711)", "Delete ExpressionStatement(712)", "Delete BreakStatement(713)", "Delete CharacterLiteral: ','(714)", "Delete SwitchCase(715)", "Delete SimpleName: spaceBefore(716)", "Delete SimpleName: breakBefore(717)", "Delete BooleanLiteral: false(718)", "Delete Assignment: =(719)", "Delete Assignment: =(720)", "Delete ExpressionStatement(721)", "Delete SimpleName: spaceAfter(722)", "Delete CharacterLiteral: ' '(723)", "Delete Assignment: =(724)", "Delete ExpressionStatement(725)", "Delete BreakStatement(726)", "Delete CharacterLiteral: ';'(727)", "Delete SwitchCase(728)", "Delete SimpleName: spaceBefore(729)", "Delete BooleanLiteral: false(730)", "Delete Assignment: =(731)", "Delete ExpressionStatement(732)", "Delete StringLiteral: \";\"(733)", "Delete SimpleName: equals(734)", "Delete SimpleName: lastToken(735)", "Delete MethodInvocation(736)", "Delete PrefixExpression: !(737)", "Delete SimpleName: breakBefore(738)", "Delete BooleanLiteral: false(739)", "Delete Assignment: =(740)", "Delete ExpressionStatement(741)", "Delete Block(742)", "Delete IfStatement(743)", "Delete SimpleName: spaceAfter(744)", "Delete SimpleName: indentStack(745)", "Delete SimpleName: get(746)", "Delete NumberLiteral: 0(747)", "Delete MethodInvocation(748)", "Delete SimpleName: parenthetical(749)", "Delete FieldAccess(750)", "Delete CharacterLiteral: ' '(751)", "Delete CharacterLiteral: '\\n'(752)", "Delete ConditionalExpression(753)", "Delete Assignment: =(754)", "Delete ExpressionStatement(755)", "Delete BreakStatement(756)", "Delete CharacterLiteral: ':'(757)", "Delete SwitchCase(758)", "Delete SimpleName: spaceBefore(759)", "Delete StringLiteral: \":\"(760)", "Delete SimpleName: equals(761)", "Delete SimpleName: lastToken(762)", "Delete MethodInvocation(763)", "Delete Assignment: =(764)", "Delete ExpressionStatement(765)", "Delete SimpleName: spaceAfter(766)", "Delete CharacterLiteral: ' '(767)", "Delete Assignment: =(768)", "Delete ExpressionStatement(769)", "Delete BreakStatement(770)", "Delete CharacterLiteral: '='(771)", "Delete SwitchCase(772)", "Delete SimpleName: spaceBefore(773)", "Delete BooleanLiteral: true(774)", "Delete Assignment: =(775)", "Delete ExpressionStatement(776)", "Delete SimpleName: spaceAfter(777)", "Delete CharacterLiteral: ' '(778)", "Delete Assignment: =(779)", "Delete ExpressionStatement(780)", "Delete BreakStatement(781)", "Delete CharacterLiteral: '.'(782)", "Delete SwitchCase(783)", "Delete SimpleName: spaceBefore(784)", "Delete SimpleName: lastToken(785)", "Delete NullLiteral(786)", "Delete InfixExpression: !=(787)", "Delete SimpleName: TokenClassification(788)", "Delete SimpleName: isNumber(789)", "Delete SimpleName: lastToken(790)", "Delete MethodInvocation(791)", "Delete StringLiteral: \".\"(792)", "Delete SimpleName: equals(793)", "Delete SimpleName: lastToken(794)", "Delete MethodInvocation(795)", "Delete InfixExpression: ||(796)", "Delete ParenthesizedExpression(797)", "Delete InfixExpression: &&(798)", "Delete Assignment: =(799)", "Delete ExpressionStatement(800)", "Delete SimpleName: spaceAfter(801)", "Delete CharacterLiteral: '\\0'(802)", "Delete Assignment: =(803)", "Delete ExpressionStatement(804)", "Delete BreakStatement(805)", "Delete SwitchStatement(806)", "Delete Block(807)", "Delete IfStatement(808)", "Delete SimpleName: breakBefore(809)", "Delete SimpleName: newLine(810)", "Delete MethodInvocation(811)", "Delete ExpressionStatement(812)", "Delete Block(813)", "Delete SimpleName: spaceBefore(814)", "Delete SimpleName: space(815)", "Delete MethodInvocation(816)", "Delete ExpressionStatement(817)", "Delete Block(818)", "Delete IfStatement(819)", "Delete IfStatement(820)", "Delete SimpleName: indent(821)", "Delete SimpleName: indentOffset(822)", "Delete MethodInvocation(823)", "Delete ExpressionStatement(824)", "Delete SimpleName: text(825)", "Delete SimpleName: length(826)", "Delete MethodInvocation(827)", "Delete NumberLiteral: 1(828)", "Delete InfixExpression: ==(829)", "Delete PrimitiveType: char(830)", "Delete SimpleName: ch0(831)", "Delete SimpleName: text(832)", "Delete SimpleName: charAt(833)", "Delete NumberLiteral: 0(834)", "Delete MethodInvocation(835)", "Delete VariableDeclarationFragment(836)", "Delete VariableDeclarationStatement(837)", "Delete SimpleName: ch0(838)", "Delete CharacterLiteral: '('(839)", "Delete SwitchCase(840)", "Delete CharacterLiteral: '['(841)", "Delete SwitchCase(842)", "Delete SimpleName: pushIndent(843)", "Delete SimpleName: Indent(844)", "Delete SimpleType: Indent(845)", "Delete SimpleName: charInLine(846)", "Delete NumberLiteral: 1(847)", "Delete InfixExpression: +(848)", "Delete BooleanLiteral: true(849)", "Delete ClassInstanceCreation(850)", "Delete MethodInvocation(851)", "Delete ExpressionStatement(852)", "Delete BreakStatement(853)", "Delete CharacterLiteral: '{'(854)", "Delete SwitchCase(855)", "Delete SimpleName: pushIndent(856)", "Delete SimpleName: Indent(857)", "Delete SimpleType: Indent(858)", "Delete SimpleName: getIndentation(859)", "Delete MethodInvocation(860)", "Delete NumberLiteral: 2(861)", "Delete InfixExpression: +(862)", "Delete BooleanLiteral: false(863)", "Delete ClassInstanceCreation(864)", "Delete MethodInvocation(865)", "Delete ExpressionStatement(866)", "Delete BreakStatement(867)", "Delete SwitchStatement(868)", "Delete Block(869)", "Delete IfStatement(870)", "Delete SimpleName: emit(871)", "Delete SimpleName: text(872)", "Delete MethodInvocation(873)", "Delete ExpressionStatement(874)", "Delete SimpleName: pendingSpace(875)", "Delete SimpleName: spaceAfter(876)", "Delete Assignment: =(877)", "Delete ExpressionStatement(878)", "Delete SimpleName: text(879)", "Delete SimpleName: length(880)", "Delete MethodInvocation(881)", "Delete NumberLiteral: 1(882)", "Delete InfixExpression: ==(883)", "Delete SimpleName: text(884)", "Delete SimpleName: charAt(885)", "Delete NumberLiteral: 0(886)", "Delete MethodInvocation(887)", "Delete CharacterLiteral: '{'(888)", "Delete SwitchCase(889)", "Delete CharacterLiteral: '}'(890)", "Delete SwitchCase(891)", "Delete CharacterLiteral: ':'(892)", "Delete SwitchCase(893)", "Delete CharacterLiteral: ';'(894)", "Delete SwitchCase(895)", "Delete CharacterLiteral: ','(896)", "Delete SwitchCase(897)", "Delete SimpleName: setInStatement(898)", "Delete BooleanLiteral: false(899)", "Delete MethodInvocation(900)", "Delete ExpressionStatement(901)", "Delete BreakStatement(902)", "Delete SwitchCase(903)", "Delete SimpleName: setInStatement(904)", "Delete BooleanLiteral: true(905)", "Delete MethodInvocation(906)", "Delete ExpressionStatement(907)", "Delete SwitchStatement(908)", "Delete Block(909)", "Delete SimpleName: setInStatement(910)", "Delete BooleanLiteral: true(911)", "Delete MethodInvocation(912)", "Delete ExpressionStatement(913)", "Delete Block(914)", "Delete IfStatement(915)", "Delete SimpleName: lastClass(916)", "Delete SimpleName: tClass(917)", "Delete Assignment: =(918)", "Delete ExpressionStatement(919)", "Delete SimpleName: lastToken(920)", "Delete SimpleName: text(921)", "Delete Assignment: =(922)", "Delete ExpressionStatement(923)", "Delete SimpleName: mark(924)", "Delete NullLiteral(925)", "Delete InfixExpression: !=(926)", "Delete SimpleName: lastLine(927)", "Delete SimpleName: mark(928)", "Delete SimpleName: startLineNo(929)", "Delete MethodInvocation(930)", "Delete Assignment: =(931)", "Delete ExpressionStatement(932)", "Delete Block(933)", "Delete IfStatement(934)", "Delete Block(935)", "Delete MethodDeclaration(936)", "Delete Modifier: private(937)", "Delete PrimitiveType: int(938)", "Delete SimpleName: getIndentation(939)", "Delete SimpleName: indentStack(940)", "Delete SimpleName: get(941)", "Delete NumberLiteral: 0(942)", "Delete MethodInvocation(943)", "Delete SimpleName: spaces(944)", "Delete FieldAccess(945)", "Delete ReturnStatement(946)", "Delete Block(947)", "Delete MethodDeclaration(948)", "Delete Modifier: private(949)", "Delete PrimitiveType: void(950)", "Delete SimpleName: pushIndent(951)", "Delete SimpleName: Indent(952)", "Delete SimpleType: Indent(953)", "Delete SimpleName: sframe(954)", "Delete SingleVariableDeclaration(955)", "Delete SimpleName: indentStack(956)", "Delete SimpleName: add(957)", "Delete NumberLiteral: 0(958)", "Delete SimpleName: sframe(959)", "Delete MethodInvocation(960)", "Delete ExpressionStatement(961)", "Delete Block(962)", "Delete MethodDeclaration(963)", "Delete Modifier: private(964)", "Delete PrimitiveType: void(965)", "Delete SimpleName: popIndentStack(966)", "Delete SimpleName: indentStack(967)", "Delete SimpleName: size(968)", "Delete MethodInvocation(969)", "Delete NumberLiteral: 1(970)", "Delete InfixExpression: >(971)", "Delete SimpleName: indentStack(972)", "Delete SimpleName: remove(973)", "Delete NumberLiteral: 0(974)", "Delete MethodInvocation(975)", "Delete ExpressionStatement(976)", "Delete Block(977)", "Delete IfStatement(978)", "Delete Block(979)", "Delete MethodDeclaration(980)", "Delete Modifier: private(981)", "Delete PrimitiveType: void(982)", "Delete SimpleName: deindentRecentlyOpenedParens(983)", "Delete PrimitiveType: int(984)", "Delete SimpleName: pos(985)", "Delete SimpleName: charInLine(986)", "Delete VariableDeclarationFragment(987)", "Delete VariableDeclarationStatement(988)", "Delete PrimitiveType: int(989)", "Delete SimpleName: nFrames(990)", "Delete NumberLiteral: 0(991)", "Delete VariableDeclarationFragment(992)", "Delete VariableDeclarationStatement(993)", "Delete SimpleName: pos(994)", "Delete NumberLiteral: 0(995)", "Delete InfixExpression: >(996)", "Delete SimpleName: indentStack(997)", "Delete SimpleName: size(998)", "Delete MethodInvocation(999)", "Delete SimpleName: nFrames(1000)", "Delete NumberLiteral: 1(1001)", "Delete InfixExpression: +(1002)", "Delete InfixExpression: >(1003)", "Delete InfixExpression: &&(1004)", "Delete SimpleName: Indent(1005)", "Delete SimpleType: Indent(1006)", "Delete SimpleName: top(1007)", "Delete SimpleName: indentStack(1008)", "Delete SimpleName: get(1009)", "Delete SimpleName: nFrames(1010)", "Delete MethodInvocation(1011)", "Delete VariableDeclarationFragment(1012)", "Delete VariableDeclarationStatement(1013)", "Delete QualifiedName: top.parenthetical(1014)", "Delete QualifiedName: top.spaces(1015)", "Delete SimpleName: pos(1016)", "Delete InfixExpression: ==(1017)", "Delete InfixExpression: &&(1018)", "Delete ParenthesizedExpression(1019)", "Delete PrefixExpression: !(1020)", "Delete BreakStatement(1021)", "Delete Block(1022)", "Delete IfStatement(1023)", "Delete SimpleName: pos(1024)", "Delete PrefixExpression: --(1025)", "Delete ExpressionStatement(1026)", "Delete SimpleName: nFrames(1027)", "Delete PrefixExpression: ++(1028)", "Delete ExpressionStatement(1029)", "Delete Block(1030)", "Delete WhileStatement(1031)", "Delete PrimitiveType: int(1032)", "Delete SimpleName: spaces(1033)", "Delete SimpleName: indentStack(1034)", "Delete SimpleName: get(1035)", "Delete SimpleName: nFrames(1036)", "Delete MethodInvocation(1037)", "Delete SimpleName: spaces(1038)", "Delete FieldAccess(1039)", "Delete NumberLiteral: 4(1040)", "Delete InfixExpression: +(1041)", "Delete VariableDeclarationFragment(1042)", "Delete VariableDeclarationStatement(1043)", "Delete PrimitiveType: int(1044)", "Delete SimpleName: i(1045)", "Delete NumberLiteral: 0(1046)", "Delete VariableDeclarationFragment(1047)", "Delete VariableDeclarationExpression(1048)", "Delete SimpleName: i(1049)", "Delete SimpleName: nFrames(1050)", "Delete InfixExpression: <(1051)", "Delete SimpleName: i(1052)", "Delete PrefixExpression: ++(1053)", "Delete SimpleName: indentStack(1054)", "Delete SimpleName: get(1055)", "Delete SimpleName: i(1056)", "Delete MethodInvocation(1057)", "Delete SimpleName: spaces(1058)", "Delete FieldAccess(1059)", "Delete SimpleName: spaces(1060)", "Delete Assignment: =(1061)", "Delete ExpressionStatement(1062)", "Delete Block(1063)", "Delete ForStatement(1064)", "Delete Block(1065)", "Delete MethodDeclaration(1066)", "Delete Modifier: private(1067)", "Delete PrimitiveType: void(1068)", "Delete SimpleName: setInStatement(1069)", "Delete PrimitiveType: boolean(1070)", "Delete SimpleName: inStatement(1071)", "Delete SingleVariableDeclaration(1072)", "Delete SimpleName: indentStack(1073)", "Delete SimpleName: get(1074)", "Delete NumberLiteral: 0(1075)", "Delete MethodInvocation(1076)", "Delete SimpleName: inStatement(1077)", "Delete FieldAccess(1078)", "Delete SimpleName: inStatement(1079)", "Delete Assignment: =(1080)", "Delete ExpressionStatement(1081)", "Delete Block(1082)", "Delete MethodDeclaration(1083)", "Delete Modifier: private(1084)", "Delete Modifier: static(1085)", "Delete Modifier: final(1086)", "Delete SimpleName: Set(1087)", "Delete SimpleType: Set(1088)", "Delete SimpleName: String(1089)", "Delete SimpleType: String(1090)", "Delete ParameterizedType: Set<String>(1091)", "Delete SimpleName: KEYWORDS(1092)", "Delete SimpleName: HashSet(1093)", "Delete SimpleType: HashSet(1094)", "Delete SimpleName: String(1095)", "Delete SimpleType: String(1096)", "Delete ParameterizedType: HashSet<String>(1097)", "Delete ClassInstanceCreation(1098)", "Delete VariableDeclarationFragment(1099)", "Delete FieldDeclaration(1100)", "Delete Modifier: static(1101)", "Delete SimpleName: Keyword(1102)", "Delete SimpleType: Keyword(1103)", "Delete SimpleName: kw(1104)", "Delete SingleVariableDeclaration(1105)", "Delete SimpleName: Keyword(1106)", "Delete SimpleName: values(1107)", "Delete MethodInvocation(1108)", "Delete SimpleName: KEYWORDS(1109)", "Delete SimpleName: add(1110)", "Delete SimpleName: kw(1111)", "Delete SimpleName: toString(1112)", "Delete MethodInvocation(1113)", "Delete MethodInvocation(1114)", "Delete ExpressionStatement(1115)", "Delete Block(1116)", "Delete EnhancedForStatement(1117)", "Delete Block(1118)", "Delete Initializer(1119)", "Delete Modifier: private(1120)", "Delete PrimitiveType: boolean(1121)", "Delete SimpleName: isKeyword(1122)", "Delete SimpleName: String(1123)", "Delete SimpleType: String(1124)", "Delete SimpleName: s(1125)", "Delete SingleVariableDeclaration(1126)", "Delete SimpleName: KEYWORDS(1127)", "Delete SimpleName: contains(1128)", "Delete SimpleName: s(1129)", "Delete MethodInvocation(1130)", "Delete ReturnStatement(1131)", "Delete Block(1132)", "Delete MethodDeclaration(1133)", "Delete Modifier: private(1134)", "Delete PrimitiveType: void(1135)", "Delete SimpleName: indent(1136)", "Delete PrimitiveType: int(1137)", "Delete SimpleName: offset(1138)", "Delete SingleVariableDeclaration(1139)", "Delete SimpleName: charInLine(1140)", "Delete NumberLiteral: 0(1141)", "Delete InfixExpression: !=(1142)", "Delete ReturnStatement(1143)", "Delete Block(1144)", "Delete IfStatement(1145)", "Delete SimpleName: Indent(1146)", "Delete SimpleType: Indent(1147)", "Delete SimpleName: sframe(1148)", "Delete SimpleName: indentStack(1149)", "Delete SimpleName: get(1150)", "Delete NumberLiteral: 0(1151)", "Delete MethodInvocation(1152)", "Delete VariableDeclarationFragment(1153)", "Delete VariableDeclarationStatement(1154)", "Delete PrimitiveType: int(1155)", "Delete SimpleName: nSpaces(1156)", "Delete SimpleName: Math(1157)", "Delete SimpleName: max(1158)", "Delete NumberLiteral: 0(1159)", "Delete QualifiedName: sframe.spaces(1160)", "Delete SimpleName: offset(1161)", "Delete InfixExpression: +(1162)", "Delete MethodInvocation(1163)", "Delete VariableDeclarationFragment(1164)", "Delete VariableDeclarationStatement(1165)", "Delete QualifiedName: sframe.parenthetical(1166)", "Delete PrefixExpression: !(1167)", "Delete QualifiedName: sframe.inStatement(1168)", "Delete InfixExpression: &&(1169)", "Delete SimpleName: nSpaces(1170)", "Delete NumberLiteral: 4(1171)", "Delete Assignment: +=(1172)", "Delete ExpressionStatement(1173)", "Delete Block(1174)", "Delete IfStatement(1175)", "Delete SimpleName: charInLine(1176)", "Delete SimpleName: nSpaces(1177)", "Delete Assignment: +=(1178)", "Delete ExpressionStatement(1179)", "Delete SimpleName: StringBuilder(1180)", "Delete SimpleType: StringBuilder(1181)", "Delete SimpleName: sb(1182)", "Delete SimpleName: StringBuilder(1183)", "Delete SimpleType: StringBuilder(1184)", "Delete SimpleName: nSpaces(1185)", "Delete NumberLiteral: 1(1186)", "Delete InfixExpression: +(1187)", "Delete ClassInstanceCreation(1188)", "Delete VariableDeclarationFragment(1189)", "Delete VariableDeclarationStatement(1190)", "Delete SimpleName: sb(1191)", "Delete SimpleName: append(1192)", "Delete CharacterLiteral: '\\n'(1193)", "Delete MethodInvocation(1194)", "Delete ExpressionStatement(1195)", "Delete SimpleName: nSpaces(1196)", "Delete NumberLiteral: 16(1197)", "Delete InfixExpression: >=(1198)", "Delete SimpleName: sb(1199)", "Delete SimpleName: append(1200)", "Delete StringLiteral: \"                \"(1201)", "Delete MethodInvocation(1202)", "Delete ExpressionStatement(1203)", "Delete SimpleName: nSpaces(1204)", "Delete NumberLiteral: 16(1205)", "Delete Assignment: -=(1206)", "Delete ExpressionStatement(1207)", "Delete Block(1208)", "Delete WhileStatement(1209)", "Delete SimpleName: sb(1210)", "Delete SimpleName: append(1211)", "Delete StringLiteral: \"                \"(1212)", "Delete NumberLiteral: 0(1213)", "Delete SimpleName: nSpaces(1214)", "Delete MethodInvocation(1215)", "Delete ExpressionStatement(1216)", "Delete PrimitiveType: int(1217)", "Delete SimpleName: last(1218)", "Delete SimpleName: outputTokens(1219)", "Delete SimpleName: size(1220)", "Delete MethodInvocation(1221)", "Delete NumberLiteral: 1(1222)", "Delete InfixExpression: -(1223)", "Delete VariableDeclarationFragment(1224)", "Delete VariableDeclarationStatement(1225)", "Delete SimpleName: last(1226)", "Delete NumberLiteral: 0(1227)", "Delete InfixExpression: >=(1228)", "Delete StringLiteral: \"\\n\"(1229)", "Delete SimpleName: equals(1230)", "Delete SimpleName: outputTokens(1231)", "Delete SimpleName: get(1232)", "Delete SimpleName: last(1233)", "Delete MethodInvocation(1234)", "Delete MethodInvocation(1235)", "Delete InfixExpression: &&(1236)", "Delete SimpleName: outputTokens(1237)", "Delete SimpleName: set(1238)", "Delete SimpleName: last(1239)", "Delete SimpleName: sb(1240)", "Delete SimpleName: toString(1241)", "Delete MethodInvocation(1242)", "Delete MethodInvocation(1243)", "Delete ExpressionStatement(1244)", "Delete Block(1245)", "Delete SimpleName: outputTokens(1246)", "Delete SimpleName: add(1247)", "Delete SimpleName: sb(1248)", "Delete SimpleName: toString(1249)", "Delete MethodInvocation(1250)", "Delete MethodInvocation(1251)", "Delete ExpressionStatement(1252)", "Delete Block(1253)", "Delete IfStatement(1254)", "Delete Block(1255)", "Delete MethodDeclaration(1256)", "Delete Modifier: private(1257)", "Delete PrimitiveType: void(1258)", "Delete SimpleName: newLine(1259)", "Delete SimpleName: charInLine(1260)", "Delete NumberLiteral: 0(1261)", "Delete InfixExpression: ==(1262)", "Delete ReturnStatement(1263)", "Delete Block(1264)", "Delete IfStatement(1265)", "Delete SimpleName: charInLine(1266)", "Delete NumberLiteral: 0(1267)", "Delete Assignment: =(1268)", "Delete ExpressionStatement(1269)", "Delete SimpleName: outputTokens(1270)", "Delete SimpleName: add(1271)", "Delete StringLiteral: \"\\n\"(1272)", "Delete MethodInvocation(1273)", "Delete ExpressionStatement(1274)", "Delete Block(1275)", "Delete MethodDeclaration(1276)", "Delete Modifier: private(1277)", "Delete PrimitiveType: void(1278)", "Delete SimpleName: space(1279)", "Delete SimpleName: charInLine(1280)", "Delete NumberLiteral: 0(1281)", "Delete InfixExpression: !=(1282)", "Delete SimpleName: charInLine(1283)", "Delete PrefixExpression: ++(1284)", "Delete ExpressionStatement(1285)", "Delete SimpleName: outputTokens(1286)", "Delete SimpleName: add(1287)", "Delete StringLiteral: \" \"(1288)", "Delete MethodInvocation(1289)", "Delete ExpressionStatement(1290)", "Delete Block(1291)", "Delete IfStatement(1292)", "Delete Block(1293)", "Delete MethodDeclaration(1294)", "Delete Modifier: private(1295)", "Delete PrimitiveType: void(1296)", "Delete SimpleName: emit(1297)", "Delete SimpleName: String(1298)", "Delete SimpleType: String(1299)", "Delete SimpleName: s(1300)", "Delete SingleVariableDeclaration(1301)", "Delete SimpleName: outputTokens(1302)", "Delete SimpleName: add(1303)", "Delete SimpleName: s(1304)", "Delete MethodInvocation(1305)", "Delete ExpressionStatement(1306)", "Delete PrimitiveType: int(1307)", "Delete SimpleName: n(1308)", "Delete SimpleName: s(1309)", "Delete SimpleName: length(1310)", "Delete MethodInvocation(1311)", "Delete VariableDeclarationFragment(1312)", "Delete VariableDeclarationStatement(1313)", "Delete PrimitiveType: int(1314)", "Delete SimpleName: i(1315)", "Delete SimpleName: n(1316)", "Delete VariableDeclarationFragment(1317)", "Delete VariableDeclarationExpression(1318)", "Delete SimpleName: i(1319)", "Delete PrefixExpression: --(1320)", "Delete NumberLiteral: 0(1321)", "Delete InfixExpression: >=(1322)", "Delete PrimitiveType: char(1323)", "Delete SimpleName: ch(1324)", "Delete SimpleName: s(1325)", "Delete SimpleName: charAt(1326)", "Delete SimpleName: i(1327)", "Delete MethodInvocation(1328)", "Delete VariableDeclarationFragment(1329)", "Delete VariableDeclarationStatement(1330)", "Delete SimpleName: ch(1331)", "Delete CharacterLiteral: '\\r'(1332)", "Delete InfixExpression: ==(1333)", "Delete SimpleName: ch(1334)", "Delete CharacterLiteral: '\\n'(1335)", "Delete InfixExpression: ==(1336)", "Delete InfixExpression: ||(1337)", "Delete SimpleName: charInLine(1338)", "Delete SimpleName: n(1339)", "Delete SimpleName: i(1340)", "Delete NumberLiteral: 1(1341)", "Delete InfixExpression: -(1342)", "Delete Assignment: =(1343)", "Delete ExpressionStatement(1344)", "Delete ReturnStatement(1345)", "Delete Block(1346)", "Delete IfStatement(1347)", "Delete Block(1348)", "Delete ForStatement(1349)", "Delete SimpleName: charInLine(1350)", "Delete SimpleName: n(1351)", "Delete Assignment: +=(1352)", "Delete ExpressionStatement(1353)", "Delete Block(1354)", "Delete MethodDeclaration(1355)", "Delete TypeDeclaration: class(1356)"]}}, {"Minify_cluster": {"actions": [{"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.ParseTreeNode", "DEL ImportDeclaration"]}]}}, {"Minify_diff": {"operations": ["Delete QualifiedName: com.google.caja.parser.ParseTreeNode(34)", "Delete ImportDeclaration(35)"]}}, {"Parser_cluster": {"actions": [{"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.ParseTreeNode"]}]}}, {"Parser_diff": {"operations": ["Delete QualifiedName: com.google.caja.parser.ParseTreeNode(24)", "Delete ImportDeclaration(25)"]}}], "commit_stats": [{"total_files": 23, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}