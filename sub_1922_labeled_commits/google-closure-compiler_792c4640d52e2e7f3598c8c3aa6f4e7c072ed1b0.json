{"application": "google-closure-compiler", "csha": "792c4640d52e2e7f3598c8c3aa6f4e7c072ed1b0", "files": [{"PeepholeReplaceKnownMethods_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS QualifiedName: com.google.common.collect.ImmutableList to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS Block to IfStatement at 1", "INS MethodInvocation to InfixExpression: * at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS PrimitiveType: float to CastExpression at 0", "INS SwitchCase to SwitchStatement at 4", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: Double to VariableDeclarationStatement at 0", "INS SimpleName: result to VariableDeclarationFragment at 0", "INS SimpleName: Math to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 3", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: Math to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SwitchCase to SwitchStatement at 19", "INS MethodInvocation to InfixExpression: || at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS IfStatement to SwitchStatement at 20", "INS SimpleName: Double to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: replacement to Assignment: = at 0", "INS SimpleName: callTarget to MethodInvocation at 0", "INS BreakStatement to SwitchStatement at 21", "INS PrimitiveType: double to VariableDeclarationStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS NumberLiteral: 1 to InfixExpression: == at 1", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: replacement to MethodInvocation at 2", "INS SimpleName: args to MethodInvocation at 0", "INS Assignment: = to ForStatement at 2", "INS VariableDeclarationStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to IfStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: Double to SimpleType: Double at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: replacement to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Double to MethodInvocation at 0", "INS Block to IfStatement at 2", "INS SimpleName: arg to MethodInvocation at 2", "INS SimpleName: arg to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS StringLiteral: \"floor\" to SwitchCase at 0", "INS SimpleName: numberNode to MethodInvocation at 2", "INS PrimitiveType: double to VariableDeclarationStatement at 0", "INS SimpleName: callTarget to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: arg to Assignment: = at 1", "INS SimpleName: subtree to SingleVariableDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: max to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: abs to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: Double to SimpleType: Double at 0", "INS SimpleName: Double to MethodInvocation at 0", "INS StringLiteral: \"round\" to SwitchCase at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS SimpleName: replacement to Assignment: = at 0", "INS SimpleName: valueOf to MethodInvocation at 1", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: arg to MethodInvocation at 2", "INS SimpleName: Integer to MethodInvocation at 0", "INS StringLiteral: \"ceil\" to SwitchCase at 0", "INS SimpleName: result to Assignment: = at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: Double to MethodInvocation at 0", "INS SimpleName: replacement to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to IfStatement at 1", "INS BreakStatement to SwitchStatement at 18", "INS SimpleName: Double to SimpleType: Double at 0", "INS Block to IfStatement at 1", "INS SimpleName: args to MethodInvocation at 0", "INS SimpleName: arg to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: || at 0", "INS SimpleName: replacement to Assignment: = at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS SimpleName: result to VariableDeclarationFragment at 0", "INS SimpleName: result to Assignment: = at 1", "INS SimpleName: getNext to MethodInvocation at 1", "INS SimpleName: numberNode to ReturnStatement at 0", "INS StringLiteral: \"min\" to SwitchCase at 0", "INS MethodInvocation to Assignment: = at 1", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: * to Assignment: = at 1", "INS CastExpression to InfixExpression: == at 0", "INS InfixExpression: == to IfStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ReturnStatement to Block at 7", "INS Assignment: = to ExpressionStatement at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: ImmutableList to MethodInvocation at 0", "INS SimpleName: d to SingleVariableDeclaration at 1", "INS SimpleName: floor to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SwitchCase to SwitchStatement at 1", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS SimpleName: args to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: arg to MethodInvocation at 2", "INS IfStatement to Block at 4", "INS SimpleName: arg to Assignment: = at 1", "INS SimpleName: result to Assignment: = at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: toUInt32 to MethodInvocation at 1", "INS SwitchCase to SwitchStatement at 3", "INS SimpleName: Double to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS PrimitiveType: double to VariableDeclarationStatement at 0", "INS SimpleName: d to MethodInvocation at 3", "INS TextElement: Tries to evaluate a method on the Math object  to TagElement at 0", "INS SwitchStatement to Block at 1", "INS Modifier: strictfp to MethodDeclaration at 2", "INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to SwitchStatement at 2", "INS SimpleName: d to VariableDeclarationFragment at 0", "INS SimpleName: numberNode to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS Block to IfStatement at 2", "INS SimpleName: Math to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS VariableDeclarationStatement to Block at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS NullLiteral to Assignment: = at 1", "INS SimpleName: Double to SimpleType: Double at 0", "INS SimpleName: Math to MethodInvocation at 0", "INS SimpleName: callTarget to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleName: size to MethodInvocation at 1", "INS SimpleName: replacement to InfixExpression: != at 0", "INS SimpleName: arg to MethodInvocation at 2", "INS NullLiteral to VariableDeclarationFragment at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: arg to MethodInvocation at 2", "INS SimpleName: d to MethodInvocation at 3", "INS SwitchCase to SwitchStatement at 13", "INS SimpleName: replacement to Assignment: = at 0", "INS SimpleType: Double to VariableDeclarationStatement at 0", "INS SwitchCase to SwitchStatement at 1", "INS StringLiteral: \"trunc\" to SwitchCase at 0", "INS IfStatement to Block at 0", "INS SwitchCase to SwitchStatement at 25", "INS SimpleName: arg to MethodInvocation at 2", "INS Block to SwitchStatement at 4", "INS InfixExpression: == to InfixExpression: || at 2", "INS SimpleName: NodeUtil to MethodInvocation at 0", "INS ExpressionStatement to SwitchStatement at 23", "INS PrimitiveType: float to CastExpression at 0", "INS CastExpression to MethodInvocation at 2", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: Math to MethodInvocation at 0", "INS BreakStatement to Block at 3", "INS SimpleName: Double to MethodInvocation at 0", "INS SimpleType: Double to SingleVariableDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS BreakStatement to SwitchStatement at 6", "INS EnhancedForStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: replacement to Assignment: = at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: arg to MethodInvocation at 2", "INS InfixExpression: != to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: isNaN to MethodInvocation at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: args to Assignment: = at 0", "INS MethodInvocation to MethodInvocation at 2", "INS IfStatement to SwitchStatement at 11", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 2", "INS Block to MethodDeclaration at 7", "INS StringLiteral: \"abs\" to SwitchCase at 0", "INS IfStatement to SwitchStatement at 14", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: replacement to Assignment: = at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS StringLiteral: \"sign\" to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 5", "INS SimpleName: arg to InfixExpression: == at 1", "INS BreakStatement to SwitchStatement at 12", "INS IfStatement to Block at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: Double to SimpleType: Double at 0", "INS EnhancedForStatement to Block at 1", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleType: Node to MethodDeclaration at 3", "INS SimpleName: replacement to Assignment: = at 0", "INS SimpleName: subtree to ReturnStatement at 0", "INS SimpleName: subtree to MethodInvocation at 0", "INS SimpleName: replacement to Assignment: = at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: arg to VariableDeclarationFragment at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: replacement to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: get to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: replaceWith to MethodInvocation at 1", "INS SimpleName: signum to MethodInvocation at 1", "INS SimpleName: subtree to MethodInvocation at 3", "INS VariableDeclarationStatement to Block at 0", "INS StringLiteral: \"max\" to SwitchCase at 0", "INS MethodInvocation to InfixExpression: || at 1", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS Block to IfStatement at 1", "INS SimpleName: subtree to ReturnStatement at 0", "INS SimpleName: arg to CastExpression at 1", "INS SimpleName: round to MethodInvocation at 1", "INS StringLiteral: \"clz32\" to SwitchCase at 0", "INS SimpleName: numberNode to VariableDeclarationFragment at 0", "INS SimpleName: arg to MethodInvocation at 2", "INS SimpleName: arg to Assignment: = at 1", "INS InfixExpression: != to IfStatement at 0", "INS IfStatement to Block at 6", "INS SimpleName: Double to MethodInvocation at 0", "INS SimpleName: methodName to SwitchStatement at 0", "INS ExpressionStatement to SwitchStatement at 5", "INS SwitchCase to SwitchStatement at 7", "INS SimpleName: valueOf to MethodInvocation at 1", "INS InfixExpression: || to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: result to MethodInvocation at 2", "INS StringLiteral: \"fround\" to SwitchCase at 0", "INS ExpressionStatement to Block at 0", "INS ReturnStatement to Block at 3", "INS Block to IfStatement at 2", "INS Block to SwitchStatement at 2", "INS SimpleName: getFirstChild to MethodInvocation at 1", "INS SimpleName: arg to Assignment: = at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: arg to MethodInvocation at 2", "INS SimpleName: getNumberValue to MethodInvocation at 1", "INS SimpleName: replacement to Assignment: = at 0", "INS SimpleName: args to EnhancedForStatement at 1", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS SimpleName: Double to MethodInvocation at 0", "INS SimpleName: min to MethodInvocation at 1", "INS SimpleName: tryFoldKnownMathMethods to MethodDeclaration at 4", "INS SimpleName: replacement to InfixExpression: == at 0", "INS SimpleName: String to SimpleType: String at 0", "INS BreakStatement to SwitchStatement at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: arg to MethodInvocation at 2", "INS SimpleName: Node to SimpleType: Node at 0", "INS SwitchStatement to Block at 0", "INS SimpleName: Double to MethodInvocation at 0", "INS SimpleType: Node to VariableDeclarationExpression at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: Math to MethodInvocation at 0", "INS QualifiedName: Double.POSITIVE_INFINITY to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: isNaN to MethodInvocation at 1", "INS SimpleName: arg to MethodInvocation at 0", "INS BreakStatement to Block at 3", "INS SimpleName: reportChangeToEnclosingScope to MethodInvocation at 1", "INS ForStatement to Block at 1", "INS SimpleName: arg to InfixExpression: != at 0", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: arg to VariableDeclarationFragment at 0", "INS SimpleType: List to ParameterizedType: List<Double> at 0", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS SimpleName: Math to MethodInvocation at 0", "INS SimpleName: isInfinite to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleType: Double to SingleVariableDeclaration at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: methodName to VariableDeclarationFragment at 0", "INS SimpleName: valueOf to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: || at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: args to MethodInvocation at 0", "INS SimpleName: Math to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to InfixExpression: || at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: arg to MethodInvocation at 2", "INS InfixExpression: != to ForStatement at 1", "INS SimpleName: isInfinite to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleType: Double to ParameterizedType: List<Double> at 1", "INS SimpleName: arg to MethodInvocation at 2", "INS SimpleName: replacement to Assignment: = at 0", "INS SimpleName: result to MethodInvocation at 2", "INS SimpleName: NodeUtil to MethodInvocation at 0", "INS SimpleName: abs to MethodInvocation at 1", "INS Block to ForStatement at 3", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SwitchCase to SwitchStatement at 10", "INS BreakStatement to SwitchStatement at 15", "INS Assignment: = to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: NodeUtil to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: numberNode to MethodInvocation at 2", "INS SwitchCase to SwitchStatement at 16", "INS InfixExpression: == to IfStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: isInfinite to MethodInvocation at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS BreakStatement to SwitchStatement at 24", "INS SimpleName: ceil to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: methodName to SwitchStatement at 0", "INS ExpressionStatement to SwitchStatement at 8", "INS Block to EnhancedForStatement at 2", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: arg to CastExpression at 1", "INS SimpleName: replacement to Assignment: = at 0", "INS SimpleName: numberOfLeadingZeros to MethodInvocation at 1", "INS SimpleName: args to MethodInvocation at 0", "INS SimpleName: result to Assignment: = at 0", "INS SimpleName: replacement to Assignment: = at 0", "INS SimpleName: floor to MethodInvocation at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: d to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS Block to IfStatement at 1", "INS IfStatement to IfStatement at 2", "INS SimpleName: arg to InfixExpression: == at 0", "INS SwitchCase to SwitchStatement at 22", "INS MethodInvocation to InfixExpression: * at 0", "INS SimpleName: d to MethodInvocation at 2", "INS SimpleName: signum to MethodInvocation at 1", "INS SimpleName: getNext to MethodInvocation at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS BreakStatement to SwitchStatement at 9", "INS ParameterizedType: List<Double> to VariableDeclarationStatement at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: Math to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: arg to MethodInvocation at 2", "INS QualifiedName: Double.NEGATIVE_INFINITY to VariableDeclarationFragment at 1", "INS MethodInvocation to Assignment: = at 1", "INS Modifier: private to MethodDeclaration at 1", "INS ExpressionStatement to SwitchStatement at 17", "INS ExpressionStatement to Block at 2", "INS SimpleName: Math to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: compiler to MethodInvocation at 0", "INS SimpleName: isNaN to MethodInvocation at 1", "INS SimpleName: of to MethodInvocation at 1", "INS SimpleName: args to EnhancedForStatement at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleName: d to InfixExpression: != at 0", "INS IfStatement to Block at 5", "INS SimpleName: getNext to MethodInvocation at 1"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS IfStatement to Block at 2", "INS Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0", "MOV IfStatement to IfStatement at 2"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS MethodInvocation to InfixExpression: && at 1", "INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to InfixExpression: && at 0", "INS SimpleName: isQualifiedName to MethodInvocation at 1", "INS SimpleName: getFirstChild to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: isASTNormalized to MethodInvocation at 0", "INS SimpleName: callTarget to MethodInvocation at 0"]}, {"root": "INS SwitchStatement to Block at 0", "operations": ["INS SimpleName: callTarget to MethodInvocation at 0", "INS SimpleName: callTarget to MethodInvocation at 2", "INS ReturnStatement to SwitchStatement at 2", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: subtree to MethodInvocation at 1", "INS StringLiteral: \"Math\" to SwitchCase at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFirstChild to MethodInvocation at 1", "INS SimpleName: getQualifiedName to MethodInvocation at 1", "INS SimpleName: tryFoldKnownMathMethods to MethodInvocation at 0", "INS SwitchCase to SwitchStatement at 3", "INS SwitchCase to SwitchStatement at 1", "INS SwitchStatement to Block at 0", "INS MethodInvocation to SwitchStatement at 0"]}]}}, {"PeepholeReplaceKnownMethods_diff": {"operations": ["Insert ImportDeclaration(11) into CompilationUnit(3272) at 5", "Insert QualifiedName: com.google.common.collect.ImmutableList(10) into ImportDeclaration(11) at 0", "Insert MethodDeclaration(547) into TypeDeclaration: class(3271) at 8", "Insert Javadoc(179) into MethodDeclaration(547) at 0", "Insert Modifier: private(180) into MethodDeclaration(547) at 1", "Insert Modifier: strictfp(181) into MethodDeclaration(547) at 2", "Insert SimpleType: Node(183) into MethodDeclaration(547) at 3", "Insert SimpleName: tryFoldKnownMathMethods(184) into MethodDeclaration(547) at 4", "Insert SingleVariableDeclaration(188) into MethodDeclaration(547) at 5", "Insert SingleVariableDeclaration(192) into MethodDeclaration(547) at 6", "Insert Block(546) into MethodDeclaration(547) at 7", "Insert TagElement(178) into Javadoc(179) at 0", "Insert SimpleName: Node(182) into SimpleType: Node(183) at 0", "Insert SimpleType: Node(186) into SingleVariableDeclaration(188) at 0", "Insert SimpleName: subtree(187) into SingleVariableDeclaration(188) at 1", "Insert SimpleType: Node(190) into SingleVariableDeclaration(192) at 0", "Insert SimpleName: callTarget(191) into SingleVariableDeclaration(192) at 1", "Insert VariableDeclarationStatement(203) into Block(546) at 0", "Insert ForStatement(255) into Block(546) at 1", "Insert VariableDeclarationStatement(261) into Block(546) at 2", "Insert VariableDeclarationStatement(273) into Block(546) at 3", "Insert IfStatement(452) into Block(546) at 4", "Insert IfStatement(516) into Block(546) at 5", "Insert IfStatement(543) into Block(546) at 6", "Insert ReturnStatement(545) into Block(546) at 7", "Insert TextElement: Tries to evaluate a method on the Math object (177) into TagElement(178) at 0", "Insert SimpleName: Node(185) into SimpleType: Node(186) at 0", "Insert SimpleName: Node(189) into SimpleType: Node(190) at 0", "Insert ParameterizedType: List<Double>(197) into VariableDeclarationStatement(203) at 0", "Insert VariableDeclarationFragment(202) into VariableDeclarationStatement(203) at 1", "Insert VariableDeclarationExpression(211) into ForStatement(255) at 0", "Insert InfixExpression: !=(214) into ForStatement(255) at 1", "Insert Assignment: =(219) into ForStatement(255) at 2", "Insert Block(254) into ForStatement(255) at 3", "Insert SimpleType: Double(257) into VariableDeclarationStatement(261) at 0", "Insert VariableDeclarationFragment(260) into VariableDeclarationStatement(261) at 1", "Insert SimpleType: String(263) into VariableDeclarationStatement(273) at 0", "Insert VariableDeclarationFragment(272) into VariableDeclarationStatement(273) at 1", "Insert InfixExpression: ==(278) into IfStatement(452) at 0", "Insert Block(451) into IfStatement(452) at 1", "Insert InfixExpression: ==(455) into IfStatement(516) at 0", "Insert Block(515) into IfStatement(516) at 1", "Insert InfixExpression: !=(519) into IfStatement(543) at 0", "Insert Block(542) into IfStatement(543) at 1", "Insert SimpleName: subtree(544) into ReturnStatement(545) at 0", "Insert IfStatement(170) into Block(171) at 2", "Insert SimpleType: List(194) into ParameterizedType: List<Double>(197) at 0", "Insert SimpleType: Double(196) into ParameterizedType: List<Double>(197) at 1", "Insert SimpleName: args(198) into VariableDeclarationFragment(202) at 0", "Insert MethodInvocation(201) into VariableDeclarationFragment(202) at 1", "Insert SimpleType: Node(205) into VariableDeclarationExpression(211) at 0", "Insert VariableDeclarationFragment(210) into VariableDeclarationExpression(211) at 1", "Insert SimpleName: arg(212) into InfixExpression: !=(214) at 0", "Insert NullLiteral(213) into InfixExpression: !=(214) at 1", "Insert SimpleName: arg(215) into Assignment: =(219) at 0", "Insert MethodInvocation(218) into Assignment: =(219) at 1", "Insert VariableDeclarationStatement(228) into Block(254) at 0", "Insert IfStatement(253) into Block(254) at 1", "Insert SimpleName: Double(256) into SimpleType: Double(257) at 0", "Insert SimpleName: replacement(258) into VariableDeclarationFragment(260) at 0", "Insert NullLiteral(259) into VariableDeclarationFragment(260) at 1", "Insert SimpleName: String(262) into SimpleType: String(263) at 0", "Insert SimpleName: methodName(264) into VariableDeclarationFragment(272) at 0", "Insert MethodInvocation(271) into VariableDeclarationFragment(272) at 1", "Insert MethodInvocation(276) into InfixExpression: ==(278) at 0", "Insert NumberLiteral: 1(277) into InfixExpression: ==(278) at 1", "Insert VariableDeclarationStatement(286) into Block(451) at 0", "Insert SwitchStatement(450) into Block(451) at 1", "Insert SimpleName: replacement(453) into InfixExpression: ==(455) at 0", "Insert NullLiteral(454) into InfixExpression: ==(455) at 1", "Insert SwitchStatement(514) into Block(515) at 0", "Insert SimpleName: replacement(517) into InfixExpression: !=(519) at 0", "Insert NullLiteral(518) into InfixExpression: !=(519) at 1", "Insert VariableDeclarationStatement(529) into Block(542) at 0", "Insert ExpressionStatement(534) into Block(542) at 1", "Insert ExpressionStatement(539) into Block(542) at 2", "Insert ReturnStatement(541) into Block(542) at 3", "Move MethodInvocation(123) into IfStatement(170) at 0", "Insert Block(157) into IfStatement(170) at 1", "Move IfStatement(143) into IfStatement(170) at 2", "Insert SimpleName: List(193) into SimpleType: List(194) at 0", "Insert SimpleName: Double(195) into SimpleType: Double(196) at 0", "Insert SimpleName: ImmutableList(199) into MethodInvocation(201) at 0", "Insert SimpleName: of(200) into MethodInvocation(201) at 1", "Insert SimpleName: Node(204) into SimpleType: Node(205) at 0", "Insert SimpleName: arg(206) into VariableDeclarationFragment(210) at 0", "Insert MethodInvocation(209) into VariableDeclarationFragment(210) at 1", "Insert SimpleName: arg(216) into MethodInvocation(218) at 0", "Insert SimpleName: getNext(217) into MethodInvocation(218) at 1", "Insert SimpleType: Double(221) into VariableDeclarationStatement(228) at 0", "Insert VariableDeclarationFragment(227) into VariableDeclarationStatement(228) at 1", "Insert InfixExpression: !=(231) into IfStatement(253) at 0", "Insert Block(249) into IfStatement(253) at 1", "Insert Block(252) into IfStatement(253) at 2", "Insert MethodInvocation(269) into MethodInvocation(271) at 0", "Insert SimpleName: getString(270) into MethodInvocation(271) at 1", "Insert SimpleName: args(274) into MethodInvocation(276) at 0", "Insert SimpleName: size(275) into MethodInvocation(276) at 1", "Insert PrimitiveType: double(279) into VariableDeclarationStatement(286) at 0", "Insert VariableDeclarationFragment(285) into VariableDeclarationStatement(286) at 1", "Insert SimpleName: methodName(287) into SwitchStatement(450) at 0", "Insert SwitchCase(289) into SwitchStatement(450) at 1", "Insert ExpressionStatement(296) into SwitchStatement(450) at 2", "Insert BreakStatement(297) into SwitchStatement(450) at 3", "Insert SwitchCase(299) into SwitchStatement(450) at 4", "Insert ExpressionStatement(306) into SwitchStatement(450) at 5", "Insert BreakStatement(307) into SwitchStatement(450) at 6", "Insert SwitchCase(309) into SwitchStatement(450) at 7", "Insert ExpressionStatement(316) into SwitchStatement(450) at 8", "Insert BreakStatement(317) into SwitchStatement(450) at 9", "Insert SwitchCase(319) into SwitchStatement(450) at 10", "Insert IfStatement(358) into SwitchStatement(450) at 11", "Insert BreakStatement(359) into SwitchStatement(450) at 12", "Insert SwitchCase(361) into SwitchStatement(450) at 13", "Insert IfStatement(387) into SwitchStatement(450) at 14", "Insert BreakStatement(388) into SwitchStatement(450) at 15", "Insert SwitchCase(390) into SwitchStatement(450) at 16", "Insert ExpressionStatement(397) into SwitchStatement(450) at 17", "Insert BreakStatement(398) into SwitchStatement(450) at 18", "Insert SwitchCase(400) into SwitchStatement(450) at 19", "Insert IfStatement(431) into SwitchStatement(450) at 20", "Insert BreakStatement(432) into SwitchStatement(450) at 21", "Insert SwitchCase(434) into SwitchStatement(450) at 22", "Insert ExpressionStatement(447) into SwitchStatement(450) at 23", "Insert BreakStatement(448) into SwitchStatement(450) at 24", "Insert SwitchCase(449) into SwitchStatement(450) at 25", "Insert SimpleName: methodName(456) into SwitchStatement(514) at 0", "Insert SwitchCase(458) into SwitchStatement(514) at 1", "Insert Block(484) into SwitchStatement(514) at 2", "Insert SwitchCase(486) into SwitchStatement(514) at 3", "Insert Block(512) into SwitchStatement(514) at 4", "Insert SwitchCase(513) into SwitchStatement(514) at 5", "Insert SimpleType: Node(521) into VariableDeclarationStatement(529) at 0", "Insert VariableDeclarationFragment(528) into VariableDeclarationStatement(529) at 1", "Insert MethodInvocation(533) into ExpressionStatement(534) at 0", "Insert MethodInvocation(538) into ExpressionStatement(539) at 0", "Insert SimpleName: numberNode(540) into ReturnStatement(541) at 0", "Move IfStatement(144) into Block(157) at 0", "Move ExpressionStatement(130) into Block(157) at 1", "Insert SimpleName: callTarget(207) into MethodInvocation(209) at 0", "Insert SimpleName: getNext(208) into MethodInvocation(209) at 1", "Insert SimpleName: Double(220) into SimpleType: Double(221) at 0", "Insert SimpleName: d(222) into VariableDeclarationFragment(227) at 0", "Insert MethodInvocation(226) into VariableDeclarationFragment(227) at 1", "Insert SimpleName: d(229) into InfixExpression: !=(231) at 0", "Insert NullLiteral(230) into InfixExpression: !=(231) at 1", "Insert IfStatement(243) into Block(249) at 0", "Insert ExpressionStatement(248) into Block(249) at 1", "Insert ReturnStatement(251) into Block(252) at 0", "Insert MethodInvocation(267) into MethodInvocation(269) at 0", "Insert SimpleName: getNext(268) into MethodInvocation(269) at 1", "Insert SimpleName: arg(280) into VariableDeclarationFragment(285) at 0", "Insert MethodInvocation(284) into VariableDeclarationFragment(285) at 1", "Insert StringLiteral: \"abs\"(288) into SwitchCase(289) at 0", "Insert Assignment: =(295) into ExpressionStatement(296) at 0", "Insert StringLiteral: \"ceil\"(298) into SwitchCase(299) at 0", "Insert Assignment: =(305) into ExpressionStatement(306) at 0", "Insert StringLiteral: \"floor\"(308) into SwitchCase(309) at 0", "Insert Assignment: =(315) into ExpressionStatement(316) at 0", "Insert StringLiteral: \"fround\"(318) into SwitchCase(319) at 0", "Insert InfixExpression: ||(331) into IfStatement(358) at 0", "Insert Block(336) into IfStatement(358) at 1", "Insert IfStatement(357) into IfStatement(358) at 2", "Insert StringLiteral: \"round\"(360) into SwitchCase(361) at 0", "Insert InfixExpression: ||(370) into IfStatement(387) at 0", "Insert Block(375) into IfStatement(387) at 1", "Insert Block(386) into IfStatement(387) at 2", "Insert StringLiteral: \"sign\"(389) into SwitchCase(390) at 0", "Insert Assignment: =(396) into ExpressionStatement(397) at 0", "Insert StringLiteral: \"trunc\"(399) into SwitchCase(400) at 0", "Insert InfixExpression: ||(409) into IfStatement(431) at 0", "Insert Block(414) into IfStatement(431) at 1", "Insert Block(430) into IfStatement(431) at 2", "Insert StringLiteral: \"clz32\"(433) into SwitchCase(434) at 0", "Insert Assignment: =(446) into ExpressionStatement(447) at 0", "Insert StringLiteral: \"max\"(457) into SwitchCase(458) at 0", "Insert VariableDeclarationStatement(463) into Block(484) at 0", "Insert EnhancedForStatement(478) into Block(484) at 1", "Insert ExpressionStatement(482) into Block(484) at 2", "Insert BreakStatement(483) into Block(484) at 3", "Insert StringLiteral: \"min\"(485) into SwitchCase(486) at 0", "Insert VariableDeclarationStatement(491) into Block(512) at 0", "Insert EnhancedForStatement(506) into Block(512) at 1", "Insert ExpressionStatement(510) into Block(512) at 2", "Insert BreakStatement(511) into Block(512) at 3", "Insert SimpleName: Node(520) into SimpleType: Node(521) at 0", "Insert SimpleName: numberNode(522) into VariableDeclarationFragment(528) at 0", "Insert MethodInvocation(527) into VariableDeclarationFragment(528) at 1", "Insert SimpleName: subtree(530) into MethodInvocation(533) at 0", "Insert SimpleName: replaceWith(531) into MethodInvocation(533) at 1", "Insert SimpleName: numberNode(532) into MethodInvocation(533) at 2", "Insert SimpleName: compiler(535) into MethodInvocation(538) at 0", "Insert SimpleName: reportChangeToEnclosingScope(536) into MethodInvocation(538) at 1", "Insert SimpleName: numberNode(537) into MethodInvocation(538) at 2", "Insert InfixExpression: &&(133) into IfStatement(149) at 0", "Insert SimpleName: NodeUtil(223) into MethodInvocation(226) at 0", "Insert SimpleName: getNumberValue(224) into MethodInvocation(226) at 1", "Insert SimpleName: arg(225) into MethodInvocation(226) at 2", "Insert MethodInvocation(234) into IfStatement(243) at 0", "Insert Block(242) into IfStatement(243) at 1", "Insert MethodInvocation(247) into ExpressionStatement(248) at 0", "Insert SimpleName: subtree(250) into ReturnStatement(251) at 0", "Insert SimpleName: callTarget(265) into MethodInvocation(267) at 0", "Insert SimpleName: getFirstChild(266) into MethodInvocation(267) at 1", "Insert SimpleName: args(281) into MethodInvocation(284) at 0", "Insert SimpleName: get(282) into MethodInvocation(284) at 1", "Insert NumberLiteral: 0(283) into MethodInvocation(284) at 2", "Insert SimpleName: replacement(290) into Assignment: =(295) at 0", "Insert MethodInvocation(294) into Assignment: =(295) at 1", "Insert SimpleName: replacement(300) into Assignment: =(305) at 0", "Insert MethodInvocation(304) into Assignment: =(305) at 1", "Insert SimpleName: replacement(310) into Assignment: =(315) at 0", "Insert MethodInvocation(314) into Assignment: =(315) at 1", "Insert MethodInvocation(323) into InfixExpression: ||(331) at 0", "Insert MethodInvocation(327) into InfixExpression: ||(331) at 1", "Insert InfixExpression: ==(330) into InfixExpression: ||(331) at 2", "Insert ExpressionStatement(335) into Block(336) at 0", "Insert InfixExpression: ==(341) into IfStatement(357) at 0", "Insert Block(351) into IfStatement(357) at 1", "Insert Block(356) into IfStatement(357) at 2", "Insert MethodInvocation(365) into InfixExpression: ||(370) at 0", "Insert MethodInvocation(369) into InfixExpression: ||(370) at 1", "Insert ExpressionStatement(374) into Block(375) at 0", "Insert ExpressionStatement(385) into Block(386) at 0", "Insert SimpleName: replacement(391) into Assignment: =(396) at 0", "Insert MethodInvocation(395) into Assignment: =(396) at 1", "Insert MethodInvocation(404) into InfixExpression: ||(409) at 0", "Insert MethodInvocation(408) into InfixExpression: ||(409) at 1", "Insert ExpressionStatement(413) into Block(414) at 0", "Insert ExpressionStatement(429) into Block(430) at 0", "Insert SimpleName: replacement(435) into Assignment: =(446) at 0", "Insert MethodInvocation(445) into Assignment: =(446) at 1", "Insert PrimitiveType: double(459) into VariableDeclarationStatement(463) at 0", "Insert VariableDeclarationFragment(462) into VariableDeclarationStatement(463) at 1", "Insert SingleVariableDeclaration(467) into EnhancedForStatement(478) at 0", "Insert SimpleName: args(468) into EnhancedForStatement(478) at 1", "Insert Block(477) into EnhancedForStatement(478) at 2", "Insert Assignment: =(481) into ExpressionStatement(482) at 0", "Insert PrimitiveType: double(487) into VariableDeclarationStatement(491) at 0", "Insert VariableDeclarationFragment(490) into VariableDeclarationStatement(491) at 1", "Insert SingleVariableDeclaration(495) into EnhancedForStatement(506) at 0", "Insert SimpleName: args(496) into EnhancedForStatement(506) at 1", "Insert Block(505) into EnhancedForStatement(506) at 2", "Insert Assignment: =(509) into ExpressionStatement(510) at 0", "Insert SimpleName: NodeUtil(523) into MethodInvocation(527) at 0", "Insert SimpleName: numberNode(524) into MethodInvocation(527) at 1", "Insert SimpleName: replacement(525) into MethodInvocation(527) at 2", "Insert SimpleName: subtree(526) into MethodInvocation(527) at 3", "Insert MethodInvocation(127) into InfixExpression: &&(133) at 0", "Insert MethodInvocation(132) into InfixExpression: &&(133) at 1", "Insert SwitchStatement(147) into Block(148) at 0", "Insert SimpleName: args(232) into MethodInvocation(234) at 0", "Insert SimpleName: isEmpty(233) into MethodInvocation(234) at 1", "Insert ExpressionStatement(241) into Block(242) at 0", "Insert SimpleName: args(244) into MethodInvocation(247) at 0", "Insert SimpleName: add(245) into MethodInvocation(247) at 1", "Insert SimpleName: d(246) into MethodInvocation(247) at 2", "Insert SimpleName: Math(291) into MethodInvocation(294) at 0", "Insert SimpleName: abs(292) into MethodInvocation(294) at 1", "Insert SimpleName: arg(293) into MethodInvocation(294) at 2", "Insert SimpleName: Math(301) into MethodInvocation(304) at 0", "Insert SimpleName: ceil(302) into MethodInvocation(304) at 1", "Insert SimpleName: arg(303) into MethodInvocation(304) at 2", "Insert SimpleName: Math(311) into MethodInvocation(314) at 0", "Insert SimpleName: floor(312) into MethodInvocation(314) at 1", "Insert SimpleName: arg(313) into MethodInvocation(314) at 2", "Insert SimpleName: Double(320) into MethodInvocation(323) at 0", "Insert SimpleName: isNaN(321) into MethodInvocation(323) at 1", "Insert SimpleName: arg(322) into MethodInvocation(323) at 2", "Insert SimpleName: Double(324) into MethodInvocation(327) at 0", "Insert SimpleName: isInfinite(325) into MethodInvocation(327) at 1", "Insert SimpleName: arg(326) into MethodInvocation(327) at 2", "Insert SimpleName: arg(328) into InfixExpression: ==(330) at 0", "Insert NumberLiteral: 0(329) into InfixExpression: ==(330) at 1", "Insert Assignment: =(334) into ExpressionStatement(335) at 0", "Insert CastExpression(339) into InfixExpression: ==(341) at 0", "Insert SimpleName: arg(340) into InfixExpression: ==(341) at 1", "Insert ExpressionStatement(350) into Block(351) at 0", "Insert ExpressionStatement(355) into Block(356) at 0", "Insert SimpleName: Double(362) into MethodInvocation(365) at 0", "Insert SimpleName: isNaN(363) into MethodInvocation(365) at 1", "Insert SimpleName: arg(364) into MethodInvocation(365) at 2", "Insert SimpleName: Double(366) into MethodInvocation(369) at 0", "Insert SimpleName: isInfinite(367) into MethodInvocation(369) at 1", "Insert SimpleName: arg(368) into MethodInvocation(369) at 2", "Insert Assignment: =(373) into ExpressionStatement(374) at 0", "Insert Assignment: =(384) into ExpressionStatement(385) at 0", "Insert SimpleName: Math(392) into MethodInvocation(395) at 0", "Insert SimpleName: signum(393) into MethodInvocation(395) at 1", "Insert SimpleName: arg(394) into MethodInvocation(395) at 2", "Insert SimpleName: Double(401) into MethodInvocation(404) at 0", "Insert SimpleName: isNaN(402) into MethodInvocation(404) at 1", "Insert SimpleName: arg(403) into MethodInvocation(404) at 2", "Insert SimpleName: Double(405) into MethodInvocation(408) at 0", "Insert SimpleName: isInfinite(406) into MethodInvocation(408) at 1", "Insert SimpleName: arg(407) into MethodInvocation(408) at 2", "Insert Assignment: =(412) into ExpressionStatement(413) at 0", "Insert Assignment: =(428) into ExpressionStatement(429) at 0", "Insert SimpleName: Double(436) into MethodInvocation(445) at 0", "Insert SimpleName: valueOf(437) into MethodInvocation(445) at 1", "Insert MethodInvocation(444) into MethodInvocation(445) at 2", "Insert SimpleName: result(460) into VariableDeclarationFragment(462) at 0", "Insert QualifiedName: Double.NEGATIVE_INFINITY(461) into VariableDeclarationFragment(462) at 1", "Insert SimpleType: Double(465) into SingleVariableDeclaration(467) at 0", "Insert SimpleName: d(466) into SingleVariableDeclaration(467) at 1", "Insert ExpressionStatement(476) into Block(477) at 0", "Insert SimpleName: replacement(479) into Assignment: =(481) at 0", "Insert SimpleName: result(480) into Assignment: =(481) at 1", "Insert SimpleName: result(488) into VariableDeclarationFragment(490) at 0", "Insert QualifiedName: Double.POSITIVE_INFINITY(489) into VariableDeclarationFragment(490) at 1", "Insert SimpleType: Double(493) into SingleVariableDeclaration(495) at 0", "Insert SimpleName: d(494) into SingleVariableDeclaration(495) at 1", "Insert ExpressionStatement(504) into Block(505) at 0", "Insert SimpleName: replacement(507) into Assignment: =(509) at 0", "Insert SimpleName: result(508) into Assignment: =(509) at 1", "Insert SimpleName: isASTNormalized(126) into MethodInvocation(127) at 0", "Insert MethodInvocation(130) into MethodInvocation(132) at 0", "Insert SimpleName: isQualifiedName(131) into MethodInvocation(132) at 1", "Insert MethodInvocation(138) into SwitchStatement(147) at 0", "Insert SwitchCase(140) into SwitchStatement(147) at 1", "Insert ReturnStatement(145) into SwitchStatement(147) at 2", "Insert SwitchCase(146) into SwitchStatement(147) at 3", "Insert Assignment: =(240) into ExpressionStatement(241) at 0", "Insert SimpleName: replacement(332) into Assignment: =(334) at 0", "Insert SimpleName: arg(333) into Assignment: =(334) at 1", "Insert PrimitiveType: float(337) into CastExpression(339) at 0", "Insert SimpleName: arg(338) into CastExpression(339) at 1", "Insert Assignment: =(349) into ExpressionStatement(350) at 0", "Insert Assignment: =(354) into ExpressionStatement(355) at 0", "Insert SimpleName: replacement(371) into Assignment: =(373) at 0", "Insert SimpleName: arg(372) into Assignment: =(373) at 1", "Insert SimpleName: replacement(376) into Assignment: =(384) at 0", "Insert MethodInvocation(383) into Assignment: =(384) at 1", "Insert SimpleName: replacement(410) into Assignment: =(412) at 0", "Insert SimpleName: arg(411) into Assignment: =(412) at 1", "Insert SimpleName: replacement(415) into Assignment: =(428) at 0", "Insert InfixExpression: *(427) into Assignment: =(428) at 1", "Insert SimpleName: Integer(438) into MethodInvocation(444) at 0", "Insert SimpleName: numberOfLeadingZeros(439) into MethodInvocation(444) at 1", "Insert MethodInvocation(443) into MethodInvocation(444) at 2", "Insert SimpleName: Double(464) into SimpleType: Double(465) at 0", "Insert Assignment: =(475) into ExpressionStatement(476) at 0", "Insert SimpleName: Double(492) into SimpleType: Double(493) at 0", "Insert Assignment: =(503) into ExpressionStatement(504) at 0", "Insert SimpleName: callTarget(128) into MethodInvocation(130) at 0", "Insert SimpleName: getFirstChild(129) into MethodInvocation(130) at 1", "Insert MethodInvocation(136) into MethodInvocation(138) at 0", "Insert SimpleName: getQualifiedName(137) into MethodInvocation(138) at 1", "Insert StringLiteral: \"Math\"(139) into SwitchCase(140) at 0", "Insert MethodInvocation(144) into ReturnStatement(145) at 0", "Insert SimpleName: args(235) into Assignment: =(240) at 0", "Insert ClassInstanceCreation(239) into Assignment: =(240) at 1", "Insert SimpleName: replacement(342) into Assignment: =(349) at 0", "Insert MethodInvocation(348) into Assignment: =(349) at 1", "Insert SimpleName: replacement(352) into Assignment: =(354) at 0", "Insert NullLiteral(353) into Assignment: =(354) at 1", "Insert SimpleName: Double(377) into MethodInvocation(383) at 0", "Insert SimpleName: valueOf(378) into MethodInvocation(383) at 1", "Insert MethodInvocation(382) into MethodInvocation(383) at 2", "Insert MethodInvocation(419) into InfixExpression: *(427) at 0", "Insert MethodInvocation(426) into InfixExpression: *(427) at 1", "Insert SimpleName: NodeUtil(440) into MethodInvocation(443) at 0", "Insert SimpleName: toUInt32(441) into MethodInvocation(443) at 1", "Insert SimpleName: arg(442) into MethodInvocation(443) at 2", "Insert SimpleName: result(469) into Assignment: =(475) at 0", "Insert MethodInvocation(474) into Assignment: =(475) at 1", "Insert SimpleName: result(497) into Assignment: =(503) at 0", "Insert MethodInvocation(502) into Assignment: =(503) at 1", "Insert SimpleName: callTarget(134) into MethodInvocation(136) at 0", "Insert SimpleName: getFirstChild(135) into MethodInvocation(136) at 1", "Insert SimpleName: tryFoldKnownMathMethods(141) into MethodInvocation(144) at 0", "Insert SimpleName: subtree(142) into MethodInvocation(144) at 1", "Insert SimpleName: callTarget(143) into MethodInvocation(144) at 2", "Insert ParameterizedType: ArrayList<>(238) into ClassInstanceCreation(239) at 0", "Insert SimpleName: Double(343) into MethodInvocation(348) at 0", "Insert SimpleName: valueOf(344) into MethodInvocation(348) at 1", "Insert CastExpression(347) into MethodInvocation(348) at 2", "Insert SimpleName: Math(379) into MethodInvocation(382) at 0", "Insert SimpleName: round(380) into MethodInvocation(382) at 1", "Insert SimpleName: arg(381) into MethodInvocation(382) at 2", "Insert SimpleName: Math(416) into MethodInvocation(419) at 0", "Insert SimpleName: signum(417) into MethodInvocation(419) at 1", "Insert SimpleName: arg(418) into MethodInvocation(419) at 2", "Insert SimpleName: Math(420) into MethodInvocation(426) at 0", "Insert SimpleName: floor(421) into MethodInvocation(426) at 1", "Insert MethodInvocation(425) into MethodInvocation(426) at 2", "Insert SimpleName: Math(470) into MethodInvocation(474) at 0", "Insert SimpleName: max(471) into MethodInvocation(474) at 1", "Insert SimpleName: result(472) into MethodInvocation(474) at 2", "Insert SimpleName: d(473) into MethodInvocation(474) at 3", "Insert SimpleName: Math(498) into MethodInvocation(502) at 0", "Insert SimpleName: min(499) into MethodInvocation(502) at 1", "Insert SimpleName: result(500) into MethodInvocation(502) at 2", "Insert SimpleName: d(501) into MethodInvocation(502) at 3", "Insert SimpleType: ArrayList(237) into ParameterizedType: ArrayList<>(238) at 0", "Insert PrimitiveType: float(345) into CastExpression(347) at 0", "Insert SimpleName: arg(346) into CastExpression(347) at 1", "Insert SimpleName: Math(422) into MethodInvocation(425) at 0", "Insert SimpleName: abs(423) into MethodInvocation(425) at 1", "Insert SimpleName: arg(424) into MethodInvocation(425) at 2", "Insert SimpleName: ArrayList(236) into SimpleType: ArrayList(237) at 0"]}}], "commit_stats": [{"total_files": 3, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}