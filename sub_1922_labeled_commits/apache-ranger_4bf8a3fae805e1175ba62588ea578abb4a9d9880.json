{"application": "apache-ranger", "csha": "4bf8a3fae805e1175ba62588ea578abb4a9d9880", "files": [{"ServiceREST_cluster": {"actions": [{"root": "UPDATE from org.apache.ranger.plugin.policyengine.RangerResource to org.apache.ranger.plugin.policyengine.RangerAccessResource", "operations": ["UPD QualifiedName: org.apache.ranger.plugin.policyengine.RangerResource from org.apache.ranger.plugin.policyengine.RangerResource to org.apache.ranger.plugin.policyengine.RangerAccessResource"]}, {"root": "UPDATE from org.apache.ranger.plugin.policyengine.RangerResourceImpl to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl", "operations": ["UPD QualifiedName: org.apache.ranger.plugin.policyengine.RangerResourceImpl from org.apache.ranger.plugin.policyengine.RangerResourceImpl to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl"]}, {"root": "UPDATE from RangerResource to RangerAccessResource", "operations": ["UPD SimpleType: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleType: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleName: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleName: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleType: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleType: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleName: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleType: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleType: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleName: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleName: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleName: RangerResource from RangerResource to RangerAccessResource"]}, {"root": "UPDATE from RangerResourceImpl to RangerAccessResourceImpl", "operations": ["UPD SimpleType: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl", "UPD SimpleType: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl", "UPD SimpleName: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl", "UPD SimpleName: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl"]}]}}, {"ServiceREST_diff": {"operations": ["Update QualifiedName: org.apache.ranger.plugin.policyengine.RangerResource(88) to org.apache.ranger.plugin.policyengine.RangerAccessResource", "Update QualifiedName: org.apache.ranger.plugin.policyengine.RangerResourceImpl(90) to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl", "Update SimpleType: RangerResource(4202) to RangerAccessResource", "Update SimpleType: RangerResource(4350) to RangerAccessResource", "Update SimpleType: RangerResource(4441) to RangerAccessResource", "Update SimpleType: RangerResource(4534) to RangerAccessResource", "Update SimpleName: RangerResource(4201) to RangerAccessResource", "Update SimpleName: RangerResource(4349) to RangerAccessResource", "Update SimpleName: RangerResource(4440) to RangerAccessResource", "Update SimpleName: RangerResource(4533) to RangerAccessResource", "Update SimpleType: RangerResource(1815) to RangerAccessResource", "Update SimpleType: RangerResource(2554) to RangerAccessResource", "Update SimpleName: RangerResource(1814) to RangerAccessResource", "Update SimpleName: RangerResource(2553) to RangerAccessResource", "Update SimpleType: RangerResourceImpl(1818) to RangerAccessResourceImpl", "Update SimpleType: RangerResourceImpl(2557) to RangerAccessResourceImpl", "Update SimpleName: RangerResourceImpl(1817) to RangerAccessResourceImpl", "Update SimpleName: RangerResourceImpl(2556) to RangerAccessResourceImpl"]}}, {"RangerDefaultAuditHandler_cluster": {"actions": [{"root": "UPDATE from org.apache.ranger.plugin.policyengine.RangerResource to org.apache.ranger.plugin.policyengine.RangerAccessResource", "operations": ["UPD QualifiedName: org.apache.ranger.plugin.policyengine.RangerResource from org.apache.ranger.plugin.policyengine.RangerResource to org.apache.ranger.plugin.policyengine.RangerAccessResource"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: RangerAccessResource to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: RangerAccessResource to SimpleType: RangerAccessResource at 0", "INS SimpleName: resource to VariableDeclarationFragment at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: serviceDef to MethodInvocation at 2", "MOV MethodInvocation to VariableDeclarationFragment at 1", "MOV SimpleName: getResourceName to MethodInvocation at 1"]}, {"root": "INS ConditionalExpression to VariableDeclarationFragment at 1", "operations": ["INS NullLiteral to ConditionalExpression at 1", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS SimpleName: resource to InfixExpression: == at 0", "INS SimpleName: resource to MethodInvocation at 0", "INS MethodInvocation to ConditionalExpression at 2", "INS NullLiteral to InfixExpression: == at 1", "INS InfixExpression: == to ConditionalExpression at 0"]}, {"root": "INS ConditionalExpression to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to ConditionalExpression at 2", "INS NullLiteral to InfixExpression: == at 1", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS NullLiteral to ConditionalExpression at 1", "INS InfixExpression: == to ConditionalExpression at 0", "INS SimpleName: resource to InfixExpression: == at 0"]}, {"root": "UPDATE from getResourceName to getLeafName", "operations": ["UPD SimpleName: getResourceName from getResourceName to getLeafName"]}, {"root": "UPDATE from request to resource", "operations": ["UPD SimpleName: request from request to resource"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: request to MethodInvocation at 0", "MOV SimpleName: getResource to MethodInvocation at 1"]}, {"root": "UPDATE from getResource to getAsString", "operations": ["UPD SimpleName: getResource from getResource to getAsString"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: serviceDef to MethodInvocation at 2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.ranger.plugin.model.RangerServiceDef.RangerResourceDef", "DEL ImportDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"/\"", "DEL SimpleName: String", "DEL Modifier: static", "DEL SimpleName: RESOURCE_SEP", "DEL SimpleType: String", "DEL Modifier: private", "DEL FieldDeclaration"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getResourceValueAsString", "DEL MethodInvocation", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: List", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: resourceDef", "DEL SimpleName: String", "DEL SimpleName: getName", "DEL SimpleName: ret", "DEL VariableDeclarationExpression", "DEL MethodInvocation", "DEL SimpleName: RangerServiceDef", "DEL SimpleType: RangerServiceDef", "DEL MethodInvocation", "DEL SimpleName: idx", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: serviceDef", "DEL SimpleName: RangerResourceDef", "DEL SimpleName: resourceDef", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL InfixExpression: >=", "DEL VariableDeclarationFragment", "DEL SimpleName: resource", "DEL SimpleName: String", "DEL SimpleType: String", "DEL ContinueStatement", "DEL Block", "DEL InfixExpression: ||", "DEL BreakStatement", "DEL VariableDeclarationStatement", "DEL InfixExpression: !=", "DEL SimpleName: getResourceName", "DEL SimpleName: ret", "DEL SimpleType: RangerResourceDef", "DEL SimpleName: size", "DEL NullLiteral", "DEL SimpleName: get", "DEL SimpleName: resourceDefs", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: serviceDef", "DEL InfixExpression: ==", "DEL NullLiteral", "DEL NullLiteral", "DEL InfixExpression: &&", "DEL IfStatement", "DEL SimpleType: String", "DEL IfStatement", "DEL SimpleName: idx", "DEL SimpleName: resource", "DEL SimpleName: exists", "DEL Assignment: =", "DEL NumberLiteral: 1", "DEL SimpleName: getResources", "DEL PrefixExpression: !", "DEL PrimitiveType: int", "DEL SimpleName: getResources", "DEL SimpleName: resource", "DEL SimpleName: RangerResource", "DEL SimpleName: serviceDef", "DEL SimpleName: idx", "DEL SimpleType: RangerResource", "DEL Modifier: public", "DEL Block", "DEL SimpleName: ret", "DEL InfixExpression: -", "DEL ForStatement", "DEL SimpleName: resourceDef", "DEL PostfixExpression: --", "DEL SimpleName: serviceDef", "DEL NullLiteral", "DEL SimpleType: List", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: resourceDefs", "DEL SimpleName: resourceDef", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleType: RangerResourceDef", "DEL ParameterizedType: List<RangerResourceDef>", "DEL VariableDeclarationFragment", "DEL SimpleName: resourceDefs", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL SimpleName: getName", "DEL Block", "DEL InfixExpression: !=", "DEL SimpleName: idx", "DEL SimpleName: RangerResourceDef"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: RangerResourceDef", "DEL SimpleName: serviceDef", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL SimpleType: StringBuilder", "DEL SimpleName: resource", "DEL NullLiteral", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleType: RangerResource", "DEL SimpleName: sb", "DEL Block", "DEL SimpleName: StringBuilder", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL SimpleName: getResourceValueAsString", "DEL SimpleName: RangerResource", "DEL SimpleName: resource", "DEL SimpleName: getValue", "DEL SimpleName: append", "DEL InfixExpression: !=", "DEL InfixExpression: &&", "DEL SimpleName: toString", "DEL SimpleName: exists", "DEL PrefixExpression: !", "DEL SimpleType: String", "DEL SimpleName: ret", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: length", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL SimpleName: RangerServiceDef", "DEL SimpleName: serviceDef", "DEL MethodInvocation", "DEL SimpleName: getName", "DEL SimpleName: sb", "DEL SimpleName: getName", "DEL InfixExpression: >", "DEL SimpleType: RangerServiceDef", "DEL ContinueStatement", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: resource", "DEL NullLiteral", "DEL SimpleName: ret", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: resourceDef", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL NullLiteral", "DEL SimpleName: serviceDef", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: resourceDef", "DEL IfStatement", "DEL SimpleName: getResources", "DEL MethodInvocation", "DEL SimpleName: length", "DEL NullLiteral", "DEL InfixExpression: ==", "DEL SimpleName: sb", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SimpleName: sb", "DEL SimpleName: RangerResourceDef", "DEL Block", "DEL Block", "DEL SimpleName: ret", "DEL SimpleName: resource", "DEL VariableDeclarationFragment", "DEL SimpleName: resourceDef", "DEL SimpleType: StringBuilder", "DEL SimpleName: serviceDef", "DEL IfStatement", "DEL SimpleName: append", "DEL InfixExpression: &&", "DEL EnhancedForStatement", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL NullLiteral", "DEL NumberLiteral: 0", "DEL SimpleName: sb", "DEL Block", "DEL SimpleName: RESOURCE_SEP", "DEL ClassInstanceCreation", "DEL SimpleName: StringBuilder", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleName: String", "DEL SimpleName: resourceDef", "DEL InfixExpression: !=", "DEL SimpleName: getResources", "DEL InfixExpression: ||"]}]}}, {"RangerDefaultAuditHandler_diff": {"operations": ["Update QualifiedName: org.apache.ranger.plugin.policyengine.RangerResource(24) to org.apache.ranger.plugin.policyengine.RangerAccessResource", "Insert VariableDeclarationStatement(216) into Block(363) at 1", "Insert SimpleType: RangerAccessResource(210) into VariableDeclarationStatement(216) at 0", "Insert VariableDeclarationFragment(215) into VariableDeclarationStatement(216) at 1", "Insert SimpleName: RangerAccessResource(209) into SimpleType: RangerAccessResource(210) at 0", "Insert SimpleName: resource(211) into VariableDeclarationFragment(215) at 0", "Move MethodInvocation(226) into VariableDeclarationFragment(215) at 1", "Insert ConditionalExpression(228) into VariableDeclarationFragment(229) at 1", "Insert ConditionalExpression(242) into VariableDeclarationFragment(243) at 1", "Insert InfixExpression: ==(222) into ConditionalExpression(228) at 0", "Insert NullLiteral(223) into ConditionalExpression(228) at 1", "Insert MethodInvocation(227) into ConditionalExpression(228) at 2", "Insert InfixExpression: ==(236) into ConditionalExpression(242) at 0", "Insert NullLiteral(237) into ConditionalExpression(242) at 1", "Insert MethodInvocation(241) into ConditionalExpression(242) at 2", "Insert SimpleName: resource(220) into InfixExpression: ==(222) at 0", "Insert NullLiteral(221) into InfixExpression: ==(222) at 1", "Insert SimpleName: resource(224) into MethodInvocation(227) at 0", "Update SimpleName: getResourceName(223) to getLeafName", "Move SimpleName: getResourceName(223) into MethodInvocation(227) at 1", "Move SimpleName: serviceDef(227) into MethodInvocation(227) at 2", "Insert SimpleName: resource(234) into InfixExpression: ==(236) at 0", "Insert NullLiteral(235) into InfixExpression: ==(236) at 1", "Update SimpleName: request(235) to resource", "Move SimpleName: request(235) into MethodInvocation(241) at 0", "Update SimpleName: getResource(236) to getAsString", "Move SimpleName: getResource(236) into MethodInvocation(241) at 1", "Move SimpleName: serviceDef(238) into MethodInvocation(241) at 2", "Delete QualifiedName: org.apache.ranger.plugin.model.RangerServiceDef.RangerResourceDef(18)", "Delete ImportDeclaration(19)", "Delete Modifier: private(44)", "Delete Modifier: static(45)", "Delete Modifier: final(46)", "Delete SimpleName: String(47)", "Delete SimpleType: String(48)", "Delete SimpleName: RESOURCE_SEP(49)", "Delete StringLiteral: \"/\"(50)", "Delete VariableDeclarationFragment(51)", "Delete FieldDeclaration(52)", "Delete MethodInvocation(228)", "Delete SimpleName: getResourceValueAsString(234)", "Delete MethodInvocation(237)", "Delete MethodInvocation(239)", "Delete Modifier: public(590)", "Delete SimpleName: String(591)", "Delete SimpleType: String(592)", "Delete SimpleName: getResourceName(593)", "Delete SimpleName: RangerResource(594)", "Delete SimpleType: RangerResource(595)", "Delete SimpleName: resource(596)", "Delete SingleVariableDeclaration(597)", "Delete SimpleName: RangerServiceDef(598)", "Delete SimpleType: RangerServiceDef(599)", "Delete SimpleName: serviceDef(600)", "Delete SingleVariableDeclaration(601)", "Delete SimpleName: String(602)", "Delete SimpleType: String(603)", "Delete SimpleName: ret(604)", "Delete NullLiteral(605)", "Delete VariableDeclarationFragment(606)", "Delete VariableDeclarationStatement(607)", "Delete SimpleName: resource(608)", "Delete NullLiteral(609)", "Delete InfixExpression: !=(610)", "Delete SimpleName: serviceDef(611)", "Delete NullLiteral(612)", "Delete InfixExpression: !=(613)", "Delete InfixExpression: &&(614)", "Delete SimpleName: serviceDef(615)", "Delete SimpleName: getResources(616)", "Delete MethodInvocation(617)", "Delete NullLiteral(618)", "Delete InfixExpression: !=(619)", "Delete InfixExpression: &&(620)", "Delete SimpleName: List(621)", "Delete SimpleType: List(622)", "Delete SimpleName: RangerResourceDef(623)", "Delete SimpleType: RangerResourceDef(624)", "Delete ParameterizedType: List<RangerResourceDef>(625)", "Delete SimpleName: resourceDefs(626)", "Delete SimpleName: serviceDef(627)", "Delete SimpleName: getResources(628)", "Delete MethodInvocation(629)", "Delete VariableDeclarationFragment(630)", "Delete VariableDeclarationStatement(631)", "Delete PrimitiveType: int(632)", "Delete SimpleName: idx(633)", "Delete SimpleName: resourceDefs(634)", "Delete SimpleName: size(635)", "Delete MethodInvocation(636)", "Delete NumberLiteral: 1(637)", "Delete InfixExpression: -(638)", "Delete VariableDeclarationFragment(639)", "Delete VariableDeclarationExpression(640)", "Delete SimpleName: idx(641)", "Delete NumberLiteral: 0(642)", "Delete InfixExpression: >=(643)", "Delete SimpleName: idx(644)", "Delete PostfixExpression: --(645)", "Delete SimpleName: RangerResourceDef(646)", "Delete SimpleType: RangerResourceDef(647)", "Delete SimpleName: resourceDef(648)", "Delete SimpleName: resourceDefs(649)", "Delete SimpleName: get(650)", "Delete SimpleName: idx(651)", "Delete MethodInvocation(652)", "Delete VariableDeclarationFragment(653)", "Delete VariableDeclarationStatement(654)", "Delete SimpleName: resourceDef(655)", "Delete NullLiteral(656)", "Delete InfixExpression: ==(657)", "Delete SimpleName: resource(658)", "Delete SimpleName: exists(659)", "Delete SimpleName: resourceDef(660)", "Delete SimpleName: getName(661)", "Delete MethodInvocation(662)", "Delete MethodInvocation(663)", "Delete PrefixExpression: !(664)", "Delete InfixExpression: ||(665)", "Delete ContinueStatement(666)", "Delete Block(667)", "Delete IfStatement(668)", "Delete SimpleName: ret(669)", "Delete SimpleName: resourceDef(670)", "Delete SimpleName: getName(671)", "Delete MethodInvocation(672)", "Delete Assignment: =(673)", "Delete ExpressionStatement(674)", "Delete BreakStatement(675)", "Delete Block(676)", "Delete ForStatement(677)", "Delete Block(678)", "Delete IfStatement(679)", "Delete SimpleName: ret(680)", "Delete ReturnStatement(681)", "Delete Block(682)", "Delete MethodDeclaration(683)", "Delete Modifier: public(684)", "Delete SimpleName: String(685)", "Delete SimpleType: String(686)", "Delete SimpleName: getResourceValueAsString(687)", "Delete SimpleName: RangerResource(688)", "Delete SimpleType: RangerResource(689)", "Delete SimpleName: resource(690)", "Delete SingleVariableDeclaration(691)", "Delete SimpleName: RangerServiceDef(692)", "Delete SimpleType: RangerServiceDef(693)", "Delete SimpleName: serviceDef(694)", "Delete SingleVariableDeclaration(695)", "Delete SimpleName: String(696)", "Delete SimpleType: String(697)", "Delete SimpleName: ret(698)", "Delete NullLiteral(699)", "Delete VariableDeclarationFragment(700)", "Delete VariableDeclarationStatement(701)", "Delete SimpleName: resource(702)", "Delete NullLiteral(703)", "Delete InfixExpression: !=(704)", "Delete SimpleName: serviceDef(705)", "Delete NullLiteral(706)", "Delete InfixExpression: !=(707)", "Delete InfixExpression: &&(708)", "Delete SimpleName: serviceDef(709)", "Delete SimpleName: getResources(710)", "Delete MethodInvocation(711)", "Delete NullLiteral(712)", "Delete InfixExpression: !=(713)", "Delete InfixExpression: &&(714)", "Delete SimpleName: StringBuilder(715)", "Delete SimpleType: StringBuilder(716)", "Delete SimpleName: sb(717)", "Delete SimpleName: StringBuilder(718)", "Delete SimpleType: StringBuilder(719)", "Delete ClassInstanceCreation(720)", "Delete VariableDeclarationFragment(721)", "Delete VariableDeclarationStatement(722)", "Delete SimpleName: RangerResourceDef(723)", "Delete SimpleType: RangerResourceDef(724)", "Delete SimpleName: resourceDef(725)", "Delete SingleVariableDeclaration(726)", "Delete SimpleName: serviceDef(727)", "Delete SimpleName: getResources(728)", "Delete MethodInvocation(729)", "Delete SimpleName: resourceDef(730)", "Delete NullLiteral(731)", "Delete InfixExpression: ==(732)", "Delete SimpleName: resource(733)", "Delete SimpleName: exists(734)", "Delete SimpleName: resourceDef(735)", "Delete SimpleName: getName(736)", "Delete MethodInvocation(737)", "Delete MethodInvocation(738)", "Delete PrefixExpression: !(739)", "Delete InfixExpression: ||(740)", "Delete ContinueStatement(741)", "Delete Block(742)", "Delete IfStatement(743)", "Delete SimpleName: sb(744)", "Delete SimpleName: length(745)", "Delete MethodInvocation(746)", "Delete NumberLiteral: 0(747)", "Delete InfixExpression: >(748)", "Delete SimpleName: sb(749)", "Delete SimpleName: append(750)", "Delete SimpleName: RESOURCE_SEP(751)", "Delete MethodInvocation(752)", "Delete ExpressionStatement(753)", "Delete Block(754)", "Delete IfStatement(755)", "Delete SimpleName: sb(756)", "Delete SimpleName: append(757)", "Delete SimpleName: resource(758)", "Delete SimpleName: getValue(759)", "Delete SimpleName: resourceDef(760)", "Delete SimpleName: getName(761)", "Delete MethodInvocation(762)", "Delete MethodInvocation(763)", "Delete MethodInvocation(764)", "Delete ExpressionStatement(765)", "Delete Block(766)", "Delete EnhancedForStatement(767)", "Delete SimpleName: sb(768)", "Delete SimpleName: length(769)", "Delete MethodInvocation(770)", "Delete NumberLiteral: 0(771)", "Delete InfixExpression: >(772)", "Delete SimpleName: ret(773)", "Delete SimpleName: sb(774)", "Delete SimpleName: toString(775)", "Delete MethodInvocation(776)", "Delete Assignment: =(777)", "Delete ExpressionStatement(778)", "Delete Block(779)", "Delete IfStatement(780)", "Delete Block(781)", "Delete IfStatement(782)", "Delete SimpleName: ret(783)", "Delete ReturnStatement(784)", "Delete Block(785)", "Delete MethodDeclaration(786)"]}}, {"CacheMap_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS SimpleName: serialVersionUID to VariableDeclarationFragment at 0", "INS Modifier: static to FieldDeclaration at 1", "INS NumberLiteral: 1L to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: final to FieldDeclaration at 2", "INS PrimitiveType: long to FieldDeclaration at 3"]}]}}, {"CacheMap_diff": {"operations": ["Insert FieldDeclaration(26) into TypeDeclaration: class(73) at 5", "Insert Modifier: private(19) into FieldDeclaration(26) at 0", "Insert Modifier: static(20) into FieldDeclaration(26) at 1", "Insert Modifier: final(21) into FieldDeclaration(26) at 2", "Insert PrimitiveType: long(22) into FieldDeclaration(26) at 3", "Insert VariableDeclarationFragment(25) into FieldDeclaration(26) at 4", "Insert SimpleName: serialVersionUID(23) into VariableDeclarationFragment(25) at 0", "Insert NumberLiteral: 1L(24) into VariableDeclarationFragment(25) at 1"]}}, {"RangerAccessData_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.ranger.plugin.policyengine", "DEL PackageDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: T", "DEL TypeParameter", "DEL SimpleName: accessFDN", "DEL TypeDeclaration: class", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleType: T", "DEL SimpleName: accessDetails", "DEL FieldAccess", "DEL SimpleName: accessDetails", "DEL Modifier: private", "DEL Modifier: public", "DEL Block", "DEL MethodDeclaration", "DEL SimpleType: T", "DEL SimpleName: accessDetails", "DEL SimpleName: accessDetails", "DEL SimpleType: T", "DEL SimpleType: String", "DEL Modifier: public", "DEL Modifier: public", "DEL SimpleName: String", "DEL Modifier: private", "DEL SimpleName: String", "DEL SimpleName: setAccessDetails", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL SimpleName: accessFDN", "DEL SimpleName: accessFDN", "DEL SimpleName: T", "DEL SimpleName: getAccessFDN", "DEL SimpleName: accessFDN", "DEL SimpleName: accessDetails", "DEL ReturnStatement", "DEL SimpleName: RangerAccessData", "DEL ExpressionStatement", "DEL SimpleName: accessFDN", "DEL ThisExpression", "DEL FieldDeclaration", "DEL Assignment: =", "DEL ReturnStatement", "DEL ThisExpression", "DEL SimpleName: RangerAccessData", "DEL SingleVariableDeclaration", "DEL Block", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: String", "DEL NullLiteral", "DEL SimpleName: T", "DEL SimpleName: getAccessDetails", "DEL NullLiteral", "DEL SimpleName: T", "DEL VariableDeclarationFragment", "DEL Block", "DEL PrimitiveType: void", "DEL FieldDeclaration", "DEL FieldAccess", "DEL Block", "DEL Modifier: public", "DEL Assignment: =", "DEL MethodDeclaration"]}]}}, {"RangerAccessData_diff": {"operations": ["Delete QualifiedName: org.apache.ranger.plugin.policyengine(0)", "Delete PackageDeclaration(1)", "Delete Modifier: public(2)", "Delete SimpleName: RangerAccessData(3)", "Delete SimpleName: T(4)", "Delete TypeParameter(5)", "Delete Modifier: private(6)", "Delete SimpleName: String(7)", "Delete SimpleType: String(8)", "Delete SimpleName: accessFDN(9)", "Delete NullLiteral(10)", "Delete VariableDeclarationFragment(11)", "Delete FieldDeclaration(12)", "Delete Modifier: private(13)", "Delete SimpleName: T(14)", "Delete SimpleType: T(15)", "Delete SimpleName: accessDetails(16)", "Delete NullLiteral(17)", "Delete VariableDeclarationFragment(18)", "Delete FieldDeclaration(19)", "Delete Modifier: public(20)", "Delete SimpleName: RangerAccessData(21)", "Delete SimpleName: String(22)", "Delete SimpleType: String(23)", "Delete SimpleName: accessFDN(24)", "Delete SingleVariableDeclaration(25)", "Delete ThisExpression(26)", "Delete SimpleName: accessFDN(27)", "Delete FieldAccess(28)", "Delete SimpleName: accessFDN(29)", "Delete Assignment: =(30)", "Delete ExpressionStatement(31)", "Delete Block(32)", "Delete MethodDeclaration(33)", "Delete Modifier: public(34)", "Delete SimpleName: String(35)", "Delete SimpleType: String(36)", "Delete SimpleName: getAccessFDN(37)", "Delete SimpleName: accessFDN(38)", "Delete ReturnStatement(39)", "Delete Block(40)", "Delete MethodDeclaration(41)", "Delete Modifier: public(42)", "Delete SimpleName: T(43)", "Delete SimpleType: T(44)", "Delete SimpleName: getAccessDetails(45)", "Delete SimpleName: accessDetails(46)", "Delete ReturnStatement(47)", "Delete Block(48)", "Delete MethodDeclaration(49)", "Delete Modifier: public(50)", "Delete PrimitiveType: void(51)", "Delete SimpleName: setAccessDetails(52)", "Delete SimpleName: T(53)", "Delete SimpleType: T(54)", "Delete SimpleName: accessDetails(55)", "Delete SingleVariableDeclaration(56)", "Delete ThisExpression(57)", "Delete SimpleName: accessDetails(58)", "Delete FieldAccess(59)", "Delete SimpleName: accessDetails(60)", "Delete Assignment: =(61)", "Delete ExpressionStatement(62)", "Delete Block(63)", "Delete MethodDeclaration(64)", "Delete TypeDeclaration: class(65)"]}}, {"RangerAccessRequest_cluster": {"actions": [{"root": "UPDATE from RangerResource to RangerAccessResource", "operations": ["UPD SimpleType: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleName: RangerResource from RangerResource to RangerAccessResource"]}]}}, {"RangerAccessRequest_diff": {"operations": ["Update SimpleType: RangerResource(11) to RangerAccessResource", "Update SimpleName: RangerResource(10) to RangerAccessResource"]}}, {"RangerAccessRequestImpl_cluster": {"actions": [{"root": "UPDATE from RangerResource to RangerAccessResource", "operations": ["UPD SimpleName: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleName: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleName: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleType: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleType: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleType: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleName: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleType: RangerResource from RangerResource to RangerAccessResource"]}]}}, {"RangerAccessRequestImpl_diff": {"operations": ["Update SimpleType: RangerResource(18) to RangerAccessResource", "Update SimpleType: RangerResource(181) to RangerAccessResource", "Update SimpleName: RangerResource(17) to RangerAccessResource", "Update SimpleType: RangerResource(113) to RangerAccessResource", "Update SimpleName: RangerResource(180) to RangerAccessResource", "Update SimpleType: RangerResource(299) to RangerAccessResource", "Update SimpleName: RangerResource(112) to RangerAccessResource", "Update SimpleName: RangerResource(298) to RangerAccessResource"]}}, {"RangerMutableResource_cluster": {"actions": [{"root": "UPDATE from RangerResource to RangerAccessResource", "operations": ["UPD SimpleType: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleName: RangerResource from RangerResource to RangerAccessResource"]}]}}, {"RangerMutableResource_diff": {"operations": ["Update SimpleType: RangerResource(5) to RangerAccessResource", "Update SimpleName: RangerResource(4) to RangerAccessResource"]}}, {"RangerPolicyEngineImpl_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: foundInCache to VariableDeclarationFragment at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS Block to IfStatement at 1", "INS IfStatement to Block at 3", "INS SimpleName: foundInCache to PrefixExpression: ! at 0", "INS PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ret to MethodInvocation at 3", "MOV SimpleName: policyRepository to MethodInvocation at 0", "MOV SimpleName: retrieveAuditEnabled to MethodInvocation at 1", "MOV SimpleName: request to MethodInvocation at 2"]}, {"root": "UPDATE from retrieveAuditEnabled to setAuditEnabledFromCache", "operations": ["UPD SimpleName: retrieveAuditEnabled from retrieveAuditEnabled to setAuditEnabledFromCache"]}, {"root": "UPDATE from storeAuditEnabled to storeAuditEnabledInCache", "operations": ["UPD SimpleName: storeAuditEnabled from storeAuditEnabled to storeAuditEnabledInCache"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation"]}]}}, {"RangerPolicyEngineImpl_diff": {"operations": ["Insert VariableDeclarationStatement(560) into Block(594) at 0", "Insert IfStatement(593) into Block(594) at 2", "Insert PrimitiveType: boolean(552) into VariableDeclarationStatement(560) at 0", "Insert VariableDeclarationFragment(559) into VariableDeclarationStatement(560) at 1", "Insert PrefixExpression: !(585) into IfStatement(593) at 0", "Insert Block(592) into IfStatement(593) at 1", "Insert SimpleName: foundInCache(553) into VariableDeclarationFragment(559) at 0", "Insert MethodInvocation(558) into VariableDeclarationFragment(559) at 1", "Insert SimpleName: foundInCache(584) into PrefixExpression: !(585) at 0", "Move ExpressionStatement(586) into Block(592) at 0", "Move SimpleName: policyRepository(552) into MethodInvocation(558) at 0", "Update SimpleName: retrieveAuditEnabled(553) to setAuditEnabledFromCache", "Move SimpleName: retrieveAuditEnabled(553) into MethodInvocation(558) at 1", "Move SimpleName: request(554) into MethodInvocation(558) at 2", "Move SimpleName: ret(555) into MethodInvocation(558) at 3", "Update SimpleName: storeAuditEnabled(582) to storeAuditEnabledInCache", "Delete MethodInvocation(556)", "Delete ExpressionStatement(557)"]}}, {"RangerPolicyEvaluatorFacade_cluster": {"actions": [{"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV Block to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from RangerResource to RangerAccessResource", "operations": ["UPD SimpleType: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleName: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleName: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleType: RangerResource from RangerResource to RangerAccessResource"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "INS StringLiteral: \"==> RangerPolicyEvaluatorFacade.init()\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"==> RangerPolicyEvaluatorFacade.init()\" to MethodInvocation at 2"]}, {"root": "INS StringLiteral: \"<== RangerPolicyEvaluatorFacade.init()\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"<== RangerPolicyEvaluatorFacade.init()\" to MethodInvocation at 2"]}, {"root": "UPDATE from myComputedPriority to computedPolicyEvalOrder", "operations": ["UPD SimpleName: myComputedPriority from myComputedPriority to computedPolicyEvalOrder"]}, {"root": "INS QualifiedName: other.computedPolicyEvalOrder to MethodInvocation at 3", "operations": ["INS QualifiedName: other.computedPolicyEvalOrder to MethodInvocation at 3"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: useCachePolicyEngine", "DEL BooleanLiteral: false"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL SimpleName: useCachePolicyEngine", "DEL FieldAccess", "DEL ThisExpression", "DEL SimpleName: useCachePolicyEngine", "DEL ExpressionStatement"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL SimpleName: useCachePolicyEngine", "DEL InfixExpression: +", "DEL StringLiteral: \"==> RangerPolicyEvaluatorFacade.init(), useCachePolicyEngine:\""]}, {"root": "DEL InfixExpression: +", "operations": ["DEL InfixExpression: +", "DEL StringLiteral: \"<== RangerPolicyEvaluatorFacade.init(), useCachePolicyEngine:\"", "DEL SimpleName: useCachePolicyEngine"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: getComputedPolicyEvalOrder", "DEL PrimitiveType: int", "DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleName: myComputedPriority", "DEL VariableDeclarationStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: getComputedPolicyEvalOrder", "DEL SimpleName: otherComputedPriority", "DEL VariableDeclarationStatement", "DEL SimpleName: other", "DEL VariableDeclarationFragment"]}, {"root": "DEL SimpleName: otherComputedPriority", "operations": ["DEL SimpleName: otherComputedPriority"]}]}}, {"RangerPolicyEvaluatorFacade_diff": {"operations": ["Move MarkerAnnotation(194) into MethodDeclaration(177) at 0", "Move Block(204) into MethodDeclaration(177) at 6", "Move MarkerAnnotation(181) into MethodDeclaration(190) at 0", "Move Block(191) into MethodDeclaration(190) at 5", "Update SimpleType: RangerResource(186) to RangerAccessResource", "Update SimpleType: RangerResource(199) to RangerAccessResource", "Move MethodInvocation(123) into IfStatement(96) at 0", "Move MethodInvocation(100) into IfStatement(117) at 0", "Update SimpleName: RangerResource(185) to RangerAccessResource", "Update SimpleName: RangerResource(198) to RangerAccessResource", "Insert StringLiteral: \"==> RangerPolicyEvaluatorFacade.init()\"(92) into MethodInvocation(93) at 2", "Insert StringLiteral: \"<== RangerPolicyEvaluatorFacade.init()\"(113) into MethodInvocation(114) at 2", "Update SimpleName: myComputedPriority(314) to computedPolicyEvalOrder", "Insert QualifiedName: other.computedPolicyEvalOrder(286) into MethodInvocation(287) at 3", "Delete PrimitiveType: boolean(54)", "Delete SimpleName: useCachePolicyEngine(55)", "Delete BooleanLiteral: false(56)", "Delete VariableDeclarationFragment(57)", "Delete FieldDeclaration(58)", "Delete ThisExpression(64)", "Delete SimpleName: useCachePolicyEngine(65)", "Delete FieldAccess(66)", "Delete SimpleName: useCachePolicyEngine(67)", "Delete Assignment: =(68)", "Delete ExpressionStatement(69)", "Delete StringLiteral: \"==> RangerPolicyEvaluatorFacade.init(), useCachePolicyEngine:\"(103)", "Delete SimpleName: useCachePolicyEngine(104)", "Delete InfixExpression: +(105)", "Delete StringLiteral: \"<== RangerPolicyEvaluatorFacade.init(), useCachePolicyEngine:\"(126)", "Delete SimpleName: useCachePolicyEngine(127)", "Delete InfixExpression: +(128)", "Delete PrimitiveType: int(297)", "Delete SimpleName: myComputedPriority(298)", "Delete ThisExpression(299)", "Delete SimpleName: getComputedPolicyEvalOrder(300)", "Delete MethodInvocation(301)", "Delete VariableDeclarationFragment(302)", "Delete VariableDeclarationStatement(303)", "Delete PrimitiveType: int(304)", "Delete SimpleName: otherComputedPriority(305)", "Delete SimpleName: other(306)", "Delete SimpleName: getComputedPolicyEvalOrder(307)", "Delete MethodInvocation(308)", "Delete VariableDeclarationFragment(309)", "Delete VariableDeclarationStatement(310)", "Delete SimpleName: otherComputedPriority(315)"]}}, {"RangerPolicyRepository_cluster": {"actions": [{"root": "UPDATE from Map<String,RangerAccessData<Boolean>> to Map<String,Boolean>", "operations": ["UPD ParameterizedType: Map<String,RangerAccessData<Boolean>> from Map<String,RangerAccessData<Boolean>> to Map<String,Boolean>"]}, {"root": "UPDATE from void to boolean", "operations": ["UPD PrimitiveType: void from void to boolean"]}, {"root": "UPDATE from retrieveAuditEnabled to setAuditEnabledFromCache", "operations": ["UPD SimpleName: retrieveAuditEnabled from retrieveAuditEnabled to setAuditEnabledFromCache"]}, {"root": "UPDATE from storeAuditEnabled to storeAuditEnabledInCache", "operations": ["UPD SimpleName: storeAuditEnabled from storeAuditEnabled to storeAuditEnabledInCache"]}, {"root": "MOVE from ParameterizedType: Map<String,RangerAccessData<Boolean>>", "operations": ["MOV SimpleType: Boolean to ParameterizedType: Map<String,RangerAccessData<Boolean>> at 2"]}, {"root": "UPDATE from ret to result", "operations": ["UPD SimpleName: ret from ret to result", "UPD SimpleName: ret from ret to result"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleName: value to VariableDeclarationFragment at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS SynchronizedStatement to Block at 2", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SynchronizedStatement to Block at 2", "INS Block to SynchronizedStatement at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: value to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: accessAuditCache to SynchronizedStatement at 0"]}, {"root": "INS ReturnStatement to Block at 6", "operations": ["INS ReturnStatement to Block at 6", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to ReturnStatement at 0", "INS SimpleName: value to InfixExpression: != at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS SynchronizedStatement to Block at 2", "INS SimpleName: accessAuditCache to SynchronizedStatement at 0", "INS IfStatement to Block at 1", "INS Block to IfStatement at 1", "INS Block to SynchronizedStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Boolean to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV ParenthesizedExpression to IfStatement at 0"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV InfixExpression: == to ParenthesizedExpression at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 1"]}, {"root": "UPDATE from CacheMap<String,RangerAccessData<Boolean>> to CacheMap<String,Boolean>", "operations": ["UPD ParameterizedType: CacheMap<String,RangerAccessData<Boolean>> from CacheMap<String,RangerAccessData<Boolean>> to CacheMap<String,Boolean>"]}, {"root": "INS SimpleType: String to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Boolean to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ParameterizedType: CacheMap<String,RangerAccessData<Boolean>>", "operations": ["MOV SimpleType: Boolean to ParameterizedType: CacheMap<String,RangerAccessData<Boolean>> at 2"]}, {"root": "UPDATE from \"==> RangerPolicyRepository.retrieveAuditEnabled()\" to \"==> RangerPolicyRepository.setAuditEnabledFromCache()\"", "operations": ["UPD StringLiteral: \"==> RangerPolicyRepository.retrieveAuditEnabled()\" from \"==> RangerPolicyRepository.retrieveAuditEnabled()\" to \"==> RangerPolicyRepository.setAuditEnabledFromCache()\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: value to MethodInvocation at 2"]}, {"root": "UPDATE from \"<== RangerPolicyRepository.retrieveAuditEnabled()\" to \"<== RangerPolicyRepository.setAuditEnabledFromCache()\"", "operations": ["UPD StringLiteral: \"<== RangerPolicyRepository.retrieveAuditEnabled()\" from \"<== RangerPolicyRepository.retrieveAuditEnabled()\" to \"<== RangerPolicyRepository.setAuditEnabledFromCache()\""]}, {"root": "UPDATE from \"==> RangerPolicyRepository.storeAuditEnabled()\" to \"==> RangerPolicyRepository.storeAuditEnabledInCache()\"", "operations": ["UPD StringLiteral: \"==> RangerPolicyRepository.storeAuditEnabled()\" from \"==> RangerPolicyRepository.storeAuditEnabled()\" to \"==> RangerPolicyRepository.storeAuditEnabledInCache()\""]}, {"root": "UPDATE from RangerAccessData to String", "operations": ["UPD SimpleName: RangerAccessData from RangerAccessData to String"]}, {"root": "MOVE from SimpleType: String", "operations": ["MOV SimpleName: RangerAccessData to SimpleType: String at 0"]}, {"root": "UPDATE from getResource to strResource", "operations": ["UPD SimpleName: getResource from getResource to strResource", "UPD SimpleName: lookup from lookup to strResource"]}, {"root": "INS ConditionalExpression to VariableDeclarationFragment at 1", "operations": ["INS ConditionalExpression to VariableDeclarationFragment at 1", "INS QualifiedName: Boolean.FALSE to ConditionalExpression at 2", "INS QualifiedName: Boolean.TRUE to ConditionalExpression at 1"]}, {"root": "UPDATE from \"<== RangerPolicyRepository.storeAuditEnabled()\" to \"<== RangerPolicyRepository.storeAuditEnabledInCache()\"", "operations": ["UPD StringLiteral: \"<== RangerPolicyRepository.storeAuditEnabled()\" from \"<== RangerPolicyRepository.storeAuditEnabled()\" to \"<== RangerPolicyRepository.storeAuditEnabledInCache()\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: accessAuditCache to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: get to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from get to getAsString", "operations": ["UPD SimpleName: get from get to getAsString", "UPD SimpleName: toString from toString to getAsString"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: getServiceDef to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from toString to getServiceDef", "operations": ["UPD SimpleName: toString from toString to getServiceDef"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getResource to MethodInvocation at 2"]}, {"root": "DEL ParameterizedType: RangerAccessData<Boolean>", "operations": ["DEL SimpleName: RangerAccessData", "DEL SimpleType: RangerAccessData", "DEL ParameterizedType: RangerAccessData<Boolean>"]}, {"root": "DEL ParameterizedType: RangerAccessData<Boolean>", "operations": ["DEL ParameterizedType: RangerAccessData<Boolean>", "DEL SimpleType: RangerAccessData", "DEL SimpleName: RangerAccessData"]}, {"root": "DEL Modifier: synchronized", "operations": ["DEL Modifier: synchronized"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: RangerAccessData", "DEL VariableDeclarationFragment", "DEL SimpleType: RangerAccessData", "DEL SimpleName: value", "DEL ParameterizedType: RangerAccessData<Boolean>", "DEL VariableDeclarationStatement", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getAccessDetails", "DEL MethodInvocation"]}, {"root": "DEL Modifier: synchronized", "operations": ["DEL Modifier: synchronized"]}, {"root": "DEL InfixExpression: &&", "operations": ["DEL InfixExpression: &&", "DEL SimpleName: lookup", "DEL NullLiteral", "DEL InfixExpression: =="]}, {"root": "DEL ParameterizedType: RangerAccessData<Boolean>", "operations": ["DEL SimpleType: RangerAccessData", "DEL ParameterizedType: RangerAccessData<Boolean>", "DEL SimpleType: Boolean", "DEL SimpleName: Boolean"]}, {"root": "DEL SimpleName: accessAuditCache", "operations": ["DEL SimpleName: accessAuditCache"]}, {"root": "DEL ParameterizedType: RangerAccessData<Boolean>", "operations": ["DEL SimpleName: RangerAccessData", "DEL SimpleType: RangerAccessData", "DEL ParameterizedType: RangerAccessData<Boolean>"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: RangerAccessData", "DEL ClassInstanceCreation", "DEL SimpleName: Boolean", "DEL SimpleName: toString", "DEL SimpleType: RangerAccessData", "DEL SimpleName: request", "DEL SimpleType: Boolean", "DEL MethodInvocation", "DEL ParameterizedType: RangerAccessData<Boolean>"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: request", "DEL SimpleName: toString", "DEL MethodInvocation", "DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: value", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: setAccessDetails", "DEL IfStatement", "DEL Block"]}]}}, {"RangerPolicyRepository_diff": {"operations": ["Update ParameterizedType: Map<String,RangerAccessData<Boolean>>(94) to Map<String,Boolean>", "Update PrimitiveType: void(552) to boolean", "Update SimpleName: retrieveAuditEnabled(553) to setAuditEnabledFromCache", "Update SimpleName: storeAuditEnabled(615) to storeAuditEnabledInCache", "Move SimpleType: Boolean(92) into ParameterizedType: Map<String,Boolean>(91) at 2", "Update SimpleName: ret(560) to result", "Insert VariableDeclarationStatement(570) into Block(612) at 1", "Insert SynchronizedStatement(586) into Block(612) at 2", "Insert ReturnStatement(611) into Block(612) at 5", "Insert IfStatement(673) into Block(684) at 1", "Move SimpleType: Boolean(575) into VariableDeclarationStatement(570) at 0", "Insert VariableDeclarationFragment(569) into VariableDeclarationStatement(570) at 1", "Insert SimpleName: accessAuditCache(571) into SynchronizedStatement(586) at 0", "Insert Block(585) into SynchronizedStatement(586) at 1", "Insert InfixExpression: !=(610) into ReturnStatement(611) at 0", "Move ParenthesizedExpression(659) into IfStatement(673) at 0", "Insert Block(672) into IfStatement(673) at 1", "Insert SimpleName: value(567) into VariableDeclarationFragment(569) at 0", "Insert NullLiteral(568) into VariableDeclarationFragment(569) at 1", "Insert ExpressionStatement(584) into Block(585) at 0", "Insert SimpleName: value(608) into InfixExpression: !=(610) at 0", "Insert NullLiteral(609) into InfixExpression: !=(610) at 1", "Move InfixExpression: ==(657) into ParenthesizedExpression(639) at 0", "Move VariableDeclarationStatement(649) into Block(672) at 0", "Move VariableDeclarationStatement(676) into Block(672) at 1", "Insert SynchronizedStatement(671) into Block(672) at 2", "Update ParameterizedType: CacheMap<String,RangerAccessData<Boolean>>(321) to CacheMap<String,Boolean>", "Insert Assignment: =(583) into ExpressionStatement(584) at 0", "Insert SimpleType: String(641) into VariableDeclarationStatement(651) at 0", "Move SimpleType: Boolean(663) into VariableDeclarationStatement(662) at 0", "Insert SimpleName: accessAuditCache(663) into SynchronizedStatement(671) at 0", "Insert Block(670) into SynchronizedStatement(671) at 1", "Move SimpleType: Boolean(319) into ParameterizedType: CacheMap<String,Boolean>(315) at 2", "Update StringLiteral: \"==> RangerPolicyRepository.retrieveAuditEnabled()\"(567) to \"==> RangerPolicyRepository.setAuditEnabledFromCache()\"", "Insert SimpleName: value(572) into Assignment: =(583) at 0", "Insert MethodInvocation(582) into Assignment: =(583) at 1", "Update SimpleName: ret(592) to result", "Move SimpleName: value(594) into MethodInvocation(594) at 2", "Update StringLiteral: \"<== RangerPolicyRepository.retrieveAuditEnabled()\"(606) to \"<== RangerPolicyRepository.setAuditEnabledFromCache()\"", "Update StringLiteral: \"==> RangerPolicyRepository.storeAuditEnabled()\"(629) to \"==> RangerPolicyRepository.storeAuditEnabledInCache()\"", "Update SimpleName: RangerAccessData(634) to String", "Move SimpleName: RangerAccessData(634) into SimpleType: String(641) at 0", "Update SimpleName: lookup(639) to strResource", "Insert ConditionalExpression(660) into VariableDeclarationFragment(661) at 1", "Move ExpressionStatement(693) into Block(670) at 0", "Update StringLiteral: \"<== RangerPolicyRepository.storeAuditEnabled()\"(701) to \"<== RangerPolicyRepository.storeAuditEnabledInCache()\"", "Move SimpleName: accessAuditCache(578) into MethodInvocation(582) at 0", "Move SimpleName: get(579) into MethodInvocation(582) at 1", "Move MethodInvocation(584) into MethodInvocation(582) at 2", "Move MethodInvocation(644) into MethodInvocation(649) at 0", "Update SimpleName: get(641) to getAsString", "Move MethodInvocation(681) into ConditionalExpression(660) at 0", "Insert QualifiedName: Boolean.TRUE(658) into ConditionalExpression(660) at 1", "Insert QualifiedName: Boolean.FALSE(659) into ConditionalExpression(660) at 2", "Update SimpleName: toString(583) to getAsString", "Insert MethodInvocation(580) into MethodInvocation(581) at 2", "Update SimpleName: toString(645) to getServiceDef", "Update SimpleName: getResource(687) to strResource", "Move SimpleName: getResource(687) into MethodInvocation(668) at 2", "Insert SimpleName: getServiceDef(579) into MethodInvocation(580) at 0", "Delete SimpleName: RangerAccessData(89)", "Delete SimpleType: RangerAccessData(90)", "Delete ParameterizedType: RangerAccessData<Boolean>(93)", "Delete SimpleName: RangerAccessData(316)", "Delete SimpleType: RangerAccessData(317)", "Delete ParameterizedType: RangerAccessData<Boolean>(320)", "Delete Modifier: synchronized(551)", "Delete SimpleName: RangerAccessData(572)", "Delete SimpleType: RangerAccessData(573)", "Delete ParameterizedType: RangerAccessData<Boolean>(576)", "Delete SimpleName: value(577)", "Delete MethodInvocation(585)", "Delete VariableDeclarationFragment(586)", "Delete VariableDeclarationStatement(587)", "Delete SimpleName: getAccessDetails(595)", "Delete MethodInvocation(596)", "Delete Modifier: synchronized(613)", "Delete SimpleName: lookup(650)", "Delete NullLiteral(651)", "Delete InfixExpression: ==(652)", "Delete InfixExpression: &&(658)", "Delete SimpleType: RangerAccessData(635)", "Delete SimpleName: Boolean(636)", "Delete SimpleType: Boolean(637)", "Delete ParameterizedType: RangerAccessData<Boolean>(638)", "Delete SimpleName: accessAuditCache(640)", "Delete SimpleName: RangerAccessData(660)", "Delete SimpleType: RangerAccessData(661)", "Delete ParameterizedType: RangerAccessData<Boolean>(664)", "Delete SimpleName: RangerAccessData(666)", "Delete SimpleType: RangerAccessData(667)", "Delete SimpleName: Boolean(668)", "Delete SimpleType: Boolean(669)", "Delete ParameterizedType: RangerAccessData<Boolean>(670)", "Delete SimpleName: request(671)", "Delete SimpleName: toString(672)", "Delete MethodInvocation(673)", "Delete ClassInstanceCreation(674)", "Delete SimpleName: request(686)", "Delete MethodInvocation(688)", "Delete SimpleName: toString(689)", "Delete MethodInvocation(690)", "Delete SimpleName: value(677)", "Delete SimpleName: setAccessDetails(678)", "Delete MethodInvocation(682)", "Delete ExpressionStatement(683)", "Delete Block(694)", "Delete IfStatement(695)"]}}, {"RangerResourceImpl_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.ranger.plugin.policyengine"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Set", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL SimpleName: name", "DEL SimpleName: append", "DEL Block", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL SimpleName: sb", "DEL SimpleName: append", "DEL SimpleName: getKey", "DEL SimpleName: sb", "DEL SimpleName: get", "DEL Assignment: =", "DEL NullLiteral", "DEL ConstructorInvocation", "DEL ParameterizedType: HashMap<String,String>", "DEL SimpleName: String", "DEL MarkerAnnotation", "DEL Block", "DEL IfStatement", "DEL SimpleName: containsKey", "DEL SimpleName: String", "DEL SimpleName: RangerResourceImpl", "DEL SimpleName: StringBuilder", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL SimpleName: e", "DEL SimpleName: append", "DEL SingleVariableDeclaration", "DEL FieldDeclaration", "DEL SimpleName: ownerUser", "DEL NullLiteral", "DEL NullLiteral", "DEL SimpleName: String", "DEL SimpleName: ret", "DEL Block", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleName: RangerResourceImpl", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: name", "DEL MethodDeclaration", "DEL SimpleName: ownerUser", "DEL SimpleType: String", "DEL SimpleName: sb", "DEL Modifier: public", "DEL SimpleName: String", "DEL StringLiteral: \"} \"", "DEL Block", "DEL MarkerAnnotation", "DEL SimpleName: setOwnerUser", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL SimpleName: String", "DEL SimpleName: value", "DEL SimpleName: ownerUser", "DEL Modifier: public", "DEL ParameterizedType: Set<String>", "DEL Block", "DEL SimpleType: String", "DEL SimpleName: StringBuilder", "DEL SimpleName: append", "DEL SimpleName: elements", "DEL MethodDeclaration", "DEL SimpleName: elements", "DEL SimpleName: toString", "DEL SimpleName: elements", "DEL PrimitiveType: void", "DEL SimpleName: StringBuilder", "DEL ThisExpression", "DEL SimpleName: String", "DEL NullLiteral", "DEL SimpleName: elements", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: sb", "DEL SimpleName: name", "DEL SimpleName: String", "DEL SimpleType: String", "DEL SimpleName: elements", "DEL ClassInstanceCreation", "DEL ConstructorInvocation", "DEL SimpleName: sb", "DEL SimpleType: StringBuilder", "DEL SimpleType: Map", "DEL SimpleName: RangerResourceImpl", "DEL StringLiteral: \"RangerResourceImpl={\"", "DEL SimpleName: sb", "DEL SimpleType: StringBuilder", "DEL ReturnStatement", "DEL SimpleType: String", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL InfixExpression: !=", "DEL SimpleName: getValue", "DEL SimpleName: elements", "DEL SimpleType: String", "DEL SimpleName: append", "DEL NullLiteral", "DEL SimpleName: String", "DEL SimpleName: ret", "DEL SimpleName: RangerMutableResource", "DEL MethodInvocation", "DEL Block", "DEL Block", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleName: elements", "DEL NullLiteral", "DEL SimpleName: String", "DEL SimpleName: String", "DEL SimpleName: elements", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL SimpleType: String", "DEL Block", "DEL ThisExpression", "DEL SimpleType: String", "DEL SimpleName: Set", "DEL SimpleType: String", "DEL SimpleName: Map", "DEL SimpleName: e", "DEL SimpleName: sb", "DEL SimpleName: elements", "DEL SimpleName: getValue", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleType: Set", "DEL SimpleName: name", "DEL SimpleName: name", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleType: HashMap", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL SimpleName: ret", "DEL SimpleName: ownerUser", "DEL SimpleName: keySet", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleType: Map", "DEL MethodInvocation", "DEL SimpleName: elements", "DEL Block", "DEL Block", "DEL SimpleName: ret", "DEL StringLiteral: \"} \"", "DEL Modifier: public", "DEL MarkerAnnotation", "DEL SimpleName: value", "DEL SimpleType: StringBuilder", "DEL MethodInvocation", "DEL SimpleName: entrySet", "DEL Block", "DEL SimpleName: Override", "DEL SimpleName: Map", "DEL ThisExpression", "DEL SimpleName: isEmpty", "DEL Block", "DEL SimpleName: ownerUser", "DEL InfixExpression: !=", "DEL StringLiteral: \"}\"", "DEL SimpleName: elements", "DEL Assignment: =", "DEL Modifier: public", "DEL SimpleName: Override", "DEL SimpleType: String", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL SimpleName: elements", "DEL MarkerAnnotation", "DEL PrimitiveType: void", "DEL SimpleType: Set", "DEL Block", "DEL SimpleName: toString", "DEL SimpleType: String", "DEL ParameterizedType: Set<String>", "DEL QualifiedName: Map.Entry", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL SimpleName: remove", "DEL MethodInvocation", "DEL IfStatement", "DEL ParameterizedType: Map<String,String>", "DEL SimpleName: name", "DEL MethodInvocation", "DEL NullLiteral", "DEL IfStatement", "DEL MethodInvocation", "DEL NullLiteral", "DEL MethodInvocation", "DEL Modifier: public", "DEL NullLiteral", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: ownerUser", "DEL SimpleName: RangerResourceImpl", "DEL SimpleType: String", "DEL Modifier: public", "DEL ExpressionStatement", "DEL IfStatement", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleType: String", "DEL SimpleName: sb", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: StringBuilder", "DEL SimpleName: append", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: elements", "DEL MethodInvocation", "DEL SimpleName: ownerUser", "DEL NullLiteral", "DEL ParameterizedType: Map<String,String>", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: ownerUser", "DEL SimpleName: ownerUser", "DEL SimpleType: String", "DEL InfixExpression: &&", "DEL SimpleType: String", "DEL SimpleType: String", "DEL Modifier: public", "DEL SimpleName: String", "DEL MarkerAnnotation", "DEL SimpleName: exists", "DEL IfStatement", "DEL NullLiteral", "DEL SimpleType: String", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Modifier: public", "DEL Assignment: =", "DEL Modifier: private", "DEL SimpleName: elements", "DEL PrimitiveType: boolean", "DEL SimpleType: String", "DEL StringLiteral: \"ownerUser={\"", "DEL InfixExpression: !=", "DEL SimpleName: getKeys", "DEL ExpressionStatement", "DEL SimpleName: Override", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: elements", "DEL SimpleName: Set", "DEL SimpleName: HashMap", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Assignment: =", "DEL Block", "DEL SimpleName: elements", "DEL FieldAccess", "DEL SimpleName: elements", "DEL ExpressionStatement", "DEL MarkerAnnotation", "DEL SimpleName: setValue", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL InfixExpression: &&", "DEL SimpleType: StringBuilder", "DEL SimpleName: ret", "DEL EnhancedForStatement", "DEL SimpleName: append", "DEL SimpleName: toString", "DEL TypeDeclaration: class", "DEL StringLiteral: \"=\"", "DEL SimpleName: sb", "DEL InfixExpression: !=", "DEL IfStatement", "DEL SimpleName: elements", "DEL ExpressionStatement", "DEL SimpleName: name", "DEL ExpressionStatement", "DEL MarkerAnnotation", "DEL ParameterizedType: Map<String,String>", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL SimpleName: elements", "DEL SimpleName: elements", "DEL SimpleName: append", "DEL SimpleName: toString", "DEL SimpleName: containsKey", "DEL SingleVariableDeclaration", "DEL SimpleName: append", "DEL NullLiteral", "DEL SimpleType: String", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL SimpleName: elements", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: name", "DEL Block", "DEL StringLiteral: \"; \"", "DEL SimpleName: String", "DEL SimpleName: elements", "DEL Block", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL SimpleName: value", "DEL SimpleType: RangerMutableResource", "DEL SimpleName: Override", "DEL FieldAccess", "DEL SimpleName: put", "DEL Modifier: public", "DEL Block", "DEL SimpleName: ret", "DEL MethodDeclaration", "DEL StringLiteral: \"elements={\"", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL ReturnStatement", "DEL SimpleName: Map", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getOwnerUser", "DEL InfixExpression: !=", "DEL SimpleName: String", "DEL FieldAccess", "DEL MethodInvocation", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: e", "DEL SimpleType: Map.Entry", "DEL Modifier: private", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleName: Override", "DEL SimpleName: Override", "DEL SimpleType: Map", "DEL SimpleName: String", "DEL InfixExpression: ==", "DEL ParameterizedType: Map.Entry<String,String>"]}]}}, {"RangerResourceImpl_diff": {"operations": ["Delete QualifiedName: org.apache.ranger.plugin.policyengine(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.HashMap(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Map(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Set(6)", "Delete ImportDeclaration(7)", "Delete Modifier: public(8)", "Delete SimpleName: RangerResourceImpl(9)", "Delete SimpleName: RangerMutableResource(10)", "Delete SimpleType: RangerMutableResource(11)", "Delete Modifier: private(12)", "Delete SimpleName: String(13)", "Delete SimpleType: String(14)", "Delete SimpleName: ownerUser(15)", "Delete NullLiteral(16)", "Delete VariableDeclarationFragment(17)", "Delete FieldDeclaration(18)", "Delete Modifier: private(19)", "Delete SimpleName: Map(20)", "Delete SimpleType: Map(21)", "Delete SimpleName: String(22)", "Delete SimpleType: String(23)", "Delete SimpleName: String(24)", "Delete SimpleType: String(25)", "Delete ParameterizedType: Map<String,String>(26)", "Delete SimpleName: elements(27)", "Delete NullLiteral(28)", "Delete VariableDeclarationFragment(29)", "Delete FieldDeclaration(30)", "Delete Modifier: public(31)", "Delete SimpleName: RangerResourceImpl(32)", "Delete NullLiteral(33)", "Delete NullLiteral(34)", "Delete ConstructorInvocation(35)", "Delete Block(36)", "Delete MethodDeclaration(37)", "Delete Modifier: public(38)", "Delete SimpleName: RangerResourceImpl(39)", "Delete SimpleName: Map(40)", "Delete SimpleType: Map(41)", "Delete SimpleName: String(42)", "Delete SimpleType: String(43)", "Delete SimpleName: String(44)", "Delete SimpleType: String(45)", "Delete ParameterizedType: Map<String,String>(46)", "Delete SimpleName: elements(47)", "Delete SingleVariableDeclaration(48)", "Delete SimpleName: elements(49)", "Delete NullLiteral(50)", "Delete ConstructorInvocation(51)", "Delete Block(52)", "Delete MethodDeclaration(53)", "Delete Modifier: public(54)", "Delete SimpleName: RangerResourceImpl(55)", "Delete SimpleName: Map(56)", "Delete SimpleType: Map(57)", "Delete SimpleName: String(58)", "Delete SimpleType: String(59)", "Delete SimpleName: String(60)", "Delete SimpleType: String(61)", "Delete ParameterizedType: Map<String,String>(62)", "Delete SimpleName: elements(63)", "Delete SingleVariableDeclaration(64)", "Delete SimpleName: String(65)", "Delete SimpleType: String(66)", "Delete SimpleName: ownerUser(67)", "Delete SingleVariableDeclaration(68)", "Delete ThisExpression(69)", "Delete SimpleName: elements(70)", "Delete FieldAccess(71)", "Delete SimpleName: elements(72)", "Delete Assignment: =(73)", "Delete ExpressionStatement(74)", "Delete ThisExpression(75)", "Delete SimpleName: ownerUser(76)", "Delete FieldAccess(77)", "Delete SimpleName: ownerUser(78)", "Delete Assignment: =(79)", "Delete ExpressionStatement(80)", "Delete Block(81)", "Delete MethodDeclaration(82)", "Delete SimpleName: Override(83)", "Delete MarkerAnnotation(84)", "Delete Modifier: public(85)", "Delete SimpleName: String(86)", "Delete SimpleType: String(87)", "Delete SimpleName: getOwnerUser(88)", "Delete SimpleName: ownerUser(89)", "Delete ReturnStatement(90)", "Delete Block(91)", "Delete MethodDeclaration(92)", "Delete SimpleName: Override(93)", "Delete MarkerAnnotation(94)", "Delete Modifier: public(95)", "Delete PrimitiveType: boolean(96)", "Delete SimpleName: exists(97)", "Delete SimpleName: String(98)", "Delete SimpleType: String(99)", "Delete SimpleName: name(100)", "Delete SingleVariableDeclaration(101)", "Delete SimpleName: elements(102)", "Delete NullLiteral(103)", "Delete InfixExpression: !=(104)", "Delete SimpleName: elements(105)", "Delete SimpleName: containsKey(106)", "Delete SimpleName: name(107)", "Delete MethodInvocation(108)", "Delete InfixExpression: &&(109)", "Delete ReturnStatement(110)", "Delete Block(111)", "Delete MethodDeclaration(112)", "Delete SimpleName: Override(113)", "Delete MarkerAnnotation(114)", "Delete Modifier: public(115)", "Delete SimpleName: String(116)", "Delete SimpleType: String(117)", "Delete SimpleName: getValue(118)", "Delete SimpleName: String(119)", "Delete SimpleType: String(120)", "Delete SimpleName: name(121)", "Delete SingleVariableDeclaration(122)", "Delete SimpleName: String(123)", "Delete SimpleType: String(124)", "Delete SimpleName: ret(125)", "Delete NullLiteral(126)", "Delete VariableDeclarationFragment(127)", "Delete VariableDeclarationStatement(128)", "Delete SimpleName: elements(129)", "Delete NullLiteral(130)", "Delete InfixExpression: !=(131)", "Delete SimpleName: elements(132)", "Delete SimpleName: containsKey(133)", "Delete SimpleName: name(134)", "Delete MethodInvocation(135)", "Delete InfixExpression: &&(136)", "Delete SimpleName: ret(137)", "Delete SimpleName: elements(138)", "Delete SimpleName: get(139)", "Delete SimpleName: name(140)", "Delete MethodInvocation(141)", "Delete Assignment: =(142)", "Delete ExpressionStatement(143)", "Delete Block(144)", "Delete IfStatement(145)", "Delete SimpleName: ret(146)", "Delete ReturnStatement(147)", "Delete Block(148)", "Delete MethodDeclaration(149)", "Delete SimpleName: Override(150)", "Delete MarkerAnnotation(151)", "Delete Modifier: public(152)", "Delete SimpleName: Set(153)", "Delete SimpleType: Set(154)", "Delete SimpleName: String(155)", "Delete SimpleType: String(156)", "Delete ParameterizedType: Set<String>(157)", "Delete SimpleName: getKeys(158)", "Delete SimpleName: Set(159)", "Delete SimpleType: Set(160)", "Delete SimpleName: String(161)", "Delete SimpleType: String(162)", "Delete ParameterizedType: Set<String>(163)", "Delete SimpleName: ret(164)", "Delete NullLiteral(165)", "Delete VariableDeclarationFragment(166)", "Delete VariableDeclarationStatement(167)", "Delete SimpleName: elements(168)", "Delete NullLiteral(169)", "Delete InfixExpression: !=(170)", "Delete SimpleName: ret(171)", "Delete SimpleName: elements(172)", "Delete SimpleName: keySet(173)", "Delete MethodInvocation(174)", "Delete Assignment: =(175)", "Delete ExpressionStatement(176)", "Delete Block(177)", "Delete IfStatement(178)", "Delete SimpleName: ret(179)", "Delete ReturnStatement(180)", "Delete Block(181)", "Delete MethodDeclaration(182)", "Delete SimpleName: Override(183)", "Delete MarkerAnnotation(184)", "Delete Modifier: public(185)", "Delete PrimitiveType: void(186)", "Delete SimpleName: setOwnerUser(187)", "Delete SimpleName: String(188)", "Delete SimpleType: String(189)", "Delete SimpleName: ownerUser(190)", "Delete SingleVariableDeclaration(191)", "Delete ThisExpression(192)", "Delete SimpleName: ownerUser(193)", "Delete FieldAccess(194)", "Delete SimpleName: ownerUser(195)", "Delete Assignment: =(196)", "Delete ExpressionStatement(197)", "Delete Block(198)", "Delete MethodDeclaration(199)", "Delete SimpleName: Override(200)", "Delete MarkerAnnotation(201)", "Delete Modifier: public(202)", "Delete PrimitiveType: void(203)", "Delete SimpleName: setValue(204)", "Delete SimpleName: String(205)", "Delete SimpleType: String(206)", "Delete SimpleName: name(207)", "Delete SingleVariableDeclaration(208)", "Delete SimpleName: String(209)", "Delete SimpleType: String(210)", "Delete SimpleName: value(211)", "Delete SingleVariableDeclaration(212)", "Delete SimpleName: value(213)", "Delete NullLiteral(214)", "Delete InfixExpression: ==(215)", "Delete SimpleName: elements(216)", "Delete NullLiteral(217)", "Delete InfixExpression: !=(218)", "Delete SimpleName: elements(219)", "Delete SimpleName: remove(220)", "Delete SimpleName: name(221)", "Delete MethodInvocation(222)", "Delete ExpressionStatement(223)", "Delete SimpleName: elements(224)", "Delete SimpleName: isEmpty(225)", "Delete MethodInvocation(226)", "Delete SimpleName: elements(227)", "Delete NullLiteral(228)", "Delete Assignment: =(229)", "Delete ExpressionStatement(230)", "Delete Block(231)", "Delete IfStatement(232)", "Delete Block(233)", "Delete IfStatement(234)", "Delete Block(235)", "Delete SimpleName: elements(236)", "Delete NullLiteral(237)", "Delete InfixExpression: ==(238)", "Delete SimpleName: elements(239)", "Delete SimpleName: HashMap(240)", "Delete SimpleType: HashMap(241)", "Delete SimpleName: String(242)", "Delete SimpleType: String(243)", "Delete SimpleName: String(244)", "Delete SimpleType: String(245)", "Delete ParameterizedType: HashMap<String,String>(246)", "Delete ClassInstanceCreation(247)", "Delete Assignment: =(248)", "Delete ExpressionStatement(249)", "Delete Block(250)", "Delete IfStatement(251)", "Delete SimpleName: elements(252)", "Delete SimpleName: put(253)", "Delete SimpleName: name(254)", "Delete SimpleName: value(255)", "Delete MethodInvocation(256)", "Delete ExpressionStatement(257)", "Delete Block(258)", "Delete IfStatement(259)", "Delete Block(260)", "Delete MethodDeclaration(261)", "Delete SimpleName: Override(262)", "Delete MarkerAnnotation(263)", "Delete Modifier: public(264)", "Delete SimpleName: String(265)", "Delete SimpleType: String(266)", "Delete SimpleName: toString(267)", "Delete SimpleName: StringBuilder(268)", "Delete SimpleType: StringBuilder(269)", "Delete SimpleName: sb(270)", "Delete SimpleName: StringBuilder(271)", "Delete SimpleType: StringBuilder(272)", "Delete ClassInstanceCreation(273)", "Delete VariableDeclarationFragment(274)", "Delete VariableDeclarationStatement(275)", "Delete SimpleName: toString(276)", "Delete SimpleName: sb(277)", "Delete MethodInvocation(278)", "Delete ExpressionStatement(279)", "Delete SimpleName: sb(280)", "Delete SimpleName: toString(281)", "Delete MethodInvocation(282)", "Delete ReturnStatement(283)", "Delete Block(284)", "Delete MethodDeclaration(285)", "Delete Modifier: public(286)", "Delete SimpleName: StringBuilder(287)", "Delete SimpleType: StringBuilder(288)", "Delete SimpleName: toString(289)", "Delete SimpleName: StringBuilder(290)", "Delete SimpleType: StringBuilder(291)", "Delete SimpleName: sb(292)", "Delete SingleVariableDeclaration(293)", "Delete SimpleName: sb(294)", "Delete SimpleName: append(295)", "Delete StringLiteral: \"RangerResourceImpl={\"(296)", "Delete MethodInvocation(297)", "Delete ExpressionStatement(298)", "Delete SimpleName: sb(299)", "Delete SimpleName: append(300)", "Delete StringLiteral: \"ownerUser={\"(301)", "Delete MethodInvocation(302)", "Delete SimpleName: append(303)", "Delete SimpleName: ownerUser(304)", "Delete MethodInvocation(305)", "Delete SimpleName: append(306)", "Delete StringLiteral: \"} \"(307)", "Delete MethodInvocation(308)", "Delete ExpressionStatement(309)", "Delete SimpleName: sb(310)", "Delete SimpleName: append(311)", "Delete StringLiteral: \"elements={\"(312)", "Delete MethodInvocation(313)", "Delete ExpressionStatement(314)", "Delete SimpleName: elements(315)", "Delete NullLiteral(316)", "Delete InfixExpression: !=(317)", "Delete QualifiedName: Map.Entry(318)", "Delete SimpleType: Map.Entry(319)", "Delete SimpleName: String(320)", "Delete SimpleType: String(321)", "Delete SimpleName: String(322)", "Delete SimpleType: String(323)", "Delete ParameterizedType: Map.Entry<String,String>(324)", "Delete SimpleName: e(325)", "Delete SingleVariableDeclaration(326)", "Delete SimpleName: elements(327)", "Delete SimpleName: entrySet(328)", "Delete MethodInvocation(329)", "Delete SimpleName: sb(330)", "Delete SimpleName: append(331)", "Delete SimpleName: e(332)", "Delete SimpleName: getKey(333)", "Delete MethodInvocation(334)", "Delete MethodInvocation(335)", "Delete SimpleName: append(336)", "Delete StringLiteral: \"=\"(337)", "Delete MethodInvocation(338)", "Delete SimpleName: append(339)", "Delete SimpleName: e(340)", "Delete SimpleName: getValue(341)", "Delete MethodInvocation(342)", "Delete MethodInvocation(343)", "Delete SimpleName: append(344)", "Delete StringLiteral: \"; \"(345)", "Delete MethodInvocation(346)", "Delete ExpressionStatement(347)", "Delete Block(348)", "Delete EnhancedForStatement(349)", "Delete Block(350)", "Delete IfStatement(351)", "Delete SimpleName: sb(352)", "Delete SimpleName: append(353)", "Delete StringLiteral: \"} \"(354)", "Delete MethodInvocation(355)", "Delete ExpressionStatement(356)", "Delete SimpleName: sb(357)", "Delete SimpleName: append(358)", "Delete StringLiteral: \"}\"(359)", "Delete MethodInvocation(360)", "Delete ExpressionStatement(361)", "Delete SimpleName: sb(362)", "Delete ReturnStatement(363)", "Delete Block(364)", "Delete MethodDeclaration(365)", "Delete TypeDeclaration: class(366)"]}}, {"RangerDefaultPolicyEvaluator_cluster": {"actions": [{"root": "UPDATE from org.apache.ranger.plugin.policyengine.RangerResource to org.apache.ranger.plugin.policyengine.RangerAccessResource", "operations": ["UPD QualifiedName: org.apache.ranger.plugin.policyengine.RangerResource from org.apache.ranger.plugin.policyengine.RangerResource to org.apache.ranger.plugin.policyengine.RangerAccessResource"]}, {"root": "UPDATE from RangerResource to RangerAccessResource", "operations": ["UPD SimpleName: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleType: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleName: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleName: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleType: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleType: RangerResource from RangerResource to RangerAccessResource"]}]}}, {"RangerDefaultPolicyEvaluator_diff": {"operations": ["Update QualifiedName: org.apache.ranger.plugin.policyengine.RangerResource(38) to org.apache.ranger.plugin.policyengine.RangerAccessResource", "Update SimpleType: RangerResource(1125) to RangerAccessResource", "Update SimpleType: RangerResource(1333) to RangerAccessResource", "Update SimpleType: RangerResource(1532) to RangerAccessResource", "Update SimpleName: RangerResource(1124) to RangerAccessResource", "Update SimpleName: RangerResource(1332) to RangerAccessResource", "Update SimpleName: RangerResource(1531) to RangerAccessResource"]}}, {"RangerPolicyEvaluator_cluster": {"actions": [{"root": "UPDATE from org.apache.ranger.plugin.policyengine.RangerResource to org.apache.ranger.plugin.policyengine.RangerAccessResource", "operations": ["UPD QualifiedName: org.apache.ranger.plugin.policyengine.RangerResource from org.apache.ranger.plugin.policyengine.RangerResource to org.apache.ranger.plugin.policyengine.RangerAccessResource"]}, {"root": "UPDATE from RangerResource to RangerAccessResource", "operations": ["UPD SimpleName: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleType: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleType: RangerResource from RangerResource to RangerAccessResource", "UPD SimpleName: RangerResource from RangerResource to RangerAccessResource"]}]}}, {"RangerPolicyEvaluator_diff": {"operations": ["Update QualifiedName: org.apache.ranger.plugin.policyengine.RangerResource(10) to org.apache.ranger.plugin.policyengine.RangerAccessResource", "Update SimpleType: RangerResource(47) to RangerAccessResource", "Update SimpleType: RangerResource(54) to RangerAccessResource", "Update SimpleName: RangerResource(46) to RangerAccessResource", "Update SimpleName: RangerResource(53) to RangerAccessResource"]}}, {"RangerBasePlugin_cluster": {"actions": [{"root": "UPDATE from org.apache.ranger.plugin.policyengine.RangerResourceImpl to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl", "operations": ["UPD QualifiedName: org.apache.ranger.plugin.policyengine.RangerResourceImpl from org.apache.ranger.plugin.policyengine.RangerResourceImpl to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl"]}, {"root": "UPDATE from RangerResourceImpl to RangerAccessResourceImpl", "operations": ["UPD SimpleType: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl", "UPD SimpleName: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl"]}]}}, {"RangerBasePlugin_diff": {"operations": ["Update QualifiedName: org.apache.ranger.plugin.policyengine.RangerResourceImpl(36) to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl", "Update SimpleType: RangerResourceImpl(1139) to RangerAccessResourceImpl", "Update SimpleName: RangerResourceImpl(1138) to RangerAccessResourceImpl"]}}, {"AuthorizationSession_cluster": {"actions": [{"root": "UPDATE from org.apache.ranger.plugin.policyengine.RangerResourceImpl to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl", "operations": ["UPD QualifiedName: org.apache.ranger.plugin.policyengine.RangerResourceImpl from org.apache.ranger.plugin.policyengine.RangerResourceImpl to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl"]}, {"root": "UPDATE from RangerResourceImpl to RangerAccessResourceImpl", "operations": ["UPD SimpleType: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl", "UPD SimpleName: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl", "UPD SimpleType: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl", "UPD SimpleName: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl"]}]}}, {"AuthorizationSession_diff": {"operations": ["Update QualifiedName: org.apache.ranger.plugin.policyengine.RangerResourceImpl(22) to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl", "Update SimpleType: RangerResourceImpl(487) to RangerAccessResourceImpl", "Update SimpleName: RangerResourceImpl(486) to RangerAccessResourceImpl", "Update SimpleType: RangerResourceImpl(490) to RangerAccessResourceImpl", "Update SimpleName: RangerResourceImpl(489) to RangerAccessResourceImpl"]}}, {"KnoxRangerPlugin_cluster": {"actions": [{"root": "UPDATE from org.apache.ranger.plugin.policyengine.RangerResourceImpl to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl", "operations": ["UPD QualifiedName: org.apache.ranger.plugin.policyengine.RangerResourceImpl from org.apache.ranger.plugin.policyengine.RangerResourceImpl to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl"]}, {"root": "UPDATE from RangerResourceImpl to RangerAccessResourceImpl", "operations": ["UPD SimpleType: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl", "UPD SimpleName: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl", "UPD SimpleName: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl", "UPD SimpleType: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl"]}]}}, {"KnoxRangerPlugin_diff": {"operations": ["Update QualifiedName: org.apache.ranger.plugin.policyengine.RangerResourceImpl(16) to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl", "Update SimpleType: RangerResourceImpl(206) to RangerAccessResourceImpl", "Update SimpleName: RangerResourceImpl(205) to RangerAccessResourceImpl", "Update SimpleType: RangerResourceImpl(209) to RangerAccessResourceImpl", "Update SimpleName: RangerResourceImpl(208) to RangerAccessResourceImpl"]}}, {"StormRangerPlugin_cluster": {"actions": [{"root": "UPDATE from org.apache.ranger.plugin.policyengine.RangerResourceImpl to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl", "operations": ["UPD QualifiedName: org.apache.ranger.plugin.policyengine.RangerResourceImpl from org.apache.ranger.plugin.policyengine.RangerResourceImpl to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl"]}, {"root": "UPDATE from RangerResourceImpl to RangerAccessResourceImpl", "operations": ["UPD SimpleName: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl", "UPD SimpleType: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl", "UPD SimpleName: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl", "UPD SimpleType: RangerResourceImpl from RangerResourceImpl to RangerAccessResourceImpl"]}]}}, {"StormRangerPlugin_diff": {"operations": ["Update QualifiedName: org.apache.ranger.plugin.policyengine.RangerResourceImpl(20) to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl", "Update SimpleType: RangerResourceImpl(174) to RangerAccessResourceImpl", "Update SimpleName: RangerResourceImpl(173) to RangerAccessResourceImpl", "Update SimpleType: RangerResourceImpl(177) to RangerAccessResourceImpl", "Update SimpleName: RangerResourceImpl(176) to RangerAccessResourceImpl"]}}, {"RangerFSPermissionChecker_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 24", "operations": ["INS QualifiedName: org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 24"]}, {"root": "UPDATE from org.apache.ranger.plugin.policyengine.RangerResource to org.apache.ranger.plugin.policyengine.RangerAccessResource", "operations": ["UPD QualifiedName: org.apache.ranger.plugin.policyengine.RangerResource from org.apache.ranger.plugin.policyengine.RangerResource to org.apache.ranger.plugin.policyengine.RangerAccessResource"]}, {"root": "UPDATE from RangerResource to RangerAccessResourceImpl", "operations": ["UPD SimpleName: RangerResource from RangerResource to RangerAccessResourceImpl", "UPD SimpleType: RangerResource from RangerResource to RangerAccessResourceImpl"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS SimpleName: resource to VariableDeclarationFragment at 0", "INS SimpleName: RangerAccessResource to SimpleType: RangerAccessResource at 0", "INS SimpleType: RangerAccessResource to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS SuperMethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: setValue to SuperMethodInvocation at 0", "INS SimpleName: path to SuperMethodInvocation at 2", "INS SuperMethodInvocation to ExpressionStatement at 0", "INS SimpleName: KEY_PATH to SuperMethodInvocation at 1"]}, {"root": "INS SuperMethodInvocation to ExpressionStatement at 0", "operations": ["INS SuperMethodInvocation to ExpressionStatement at 0", "INS SimpleName: setOwnerUser to SuperMethodInvocation at 0", "INS SimpleName: owner to SuperMethodInvocation at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getResourceName to MethodInvocation at 1", "MOV SimpleName: serviceDef to MethodInvocation at 2", "MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS ConditionalExpression to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to ConditionalExpression at 1", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to ConditionalExpression at 0", "INS SimpleName: resource to InfixExpression: != at 0", "INS NullLiteral to ConditionalExpression at 2", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS SimpleName: resource to MethodInvocation at 0"]}, {"root": "INS ConditionalExpression to VariableDeclarationFragment at 1", "operations": ["INS InfixExpression: != to ConditionalExpression at 0", "INS NullLiteral to InfixExpression: != at 1", "INS MethodInvocation to ConditionalExpression at 1", "INS NullLiteral to ConditionalExpression at 2", "INS SimpleName: resource to InfixExpression: != at 0", "INS ConditionalExpression to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from getResourceName to getLeafName", "operations": ["UPD SimpleName: getResourceName from getResourceName to getLeafName"]}, {"root": "UPDATE from request to resource", "operations": ["UPD SimpleName: request from request to resource"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getResource to MethodInvocation at 1", "MOV SimpleName: request to MethodInvocation at 0"]}, {"root": "UPDATE from getResource to getAsString", "operations": ["UPD SimpleName: getResource from getResource to getAsString"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: serviceDef to MethodInvocation at 2"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: String", "DEL FieldDeclaration", "DEL SimpleName: newHashSet", "DEL SimpleType: Set", "DEL ParameterizedType: Set<String>", "DEL SimpleName: KEY_PATH", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: Sets", "DEL SimpleName: Set", "DEL MethodInvocation", "DEL Modifier: static", "DEL SimpleName: KEYS_PATH", "DEL Modifier: private", "DEL SimpleType: String"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL NullLiteral", "DEL FieldDeclaration", "DEL SimpleType: String", "DEL SimpleName: path", "DEL Modifier: private", "DEL SimpleName: String", "DEL VariableDeclarationFragment"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL FieldDeclaration", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL SimpleName: owner", "DEL NullLiteral"]}, {"root": "DEL Assignment: =", "operations": ["DEL FieldAccess", "DEL Assignment: =", "DEL SimpleName: path", "DEL ThisExpression", "DEL SimpleName: path"]}, {"root": "DEL Assignment: =", "operations": ["DEL SimpleName: owner", "DEL Assignment: =", "DEL SimpleName: owner", "DEL ThisExpression", "DEL FieldAccess"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: owner", "DEL SimpleName: getOwnerUser", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: String", "DEL SimpleName: Override", "DEL Modifier: public", "DEL SimpleType: String", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Override", "DEL PrimitiveType: boolean", "DEL Block", "DEL SimpleName: StringUtils", "DEL MarkerAnnotation", "DEL SimpleName: name", "DEL MethodDeclaration", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: String", "DEL SimpleName: name", "DEL SimpleType: String", "DEL SimpleName: equalsIgnoreCase", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: KEY_PATH", "DEL SimpleName: exists"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: StringUtils", "DEL SimpleType: String", "DEL Block", "DEL Modifier: public", "DEL SimpleName: name", "DEL Block", "DEL SimpleName: name", "DEL SimpleType: String", "DEL ReturnStatement", "DEL SimpleName: path", "DEL SimpleName: getValue", "DEL ReturnStatement", "DEL NullLiteral", "DEL SimpleName: Override", "DEL IfStatement", "DEL MarkerAnnotation", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleName: equalsIgnoreCase", "DEL MethodDeclaration", "DEL SimpleName: KEY_PATH"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: Set", "DEL SimpleName: String", "DEL ParameterizedType: Set<String>", "DEL SimpleName: KEYS_PATH", "DEL Block", "DEL SimpleName: getKeys", "DEL ReturnStatement", "DEL SimpleType: Set", "DEL SimpleType: String"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getResourceValueAsString"]}]}}, {"RangerFSPermissionChecker_diff": {"operations": ["Insert ImportDeclaration(49) into CompilationUnit(1342) at 24", "Update QualifiedName: org.apache.ranger.plugin.policyengine.RangerResource(46) to org.apache.ranger.plugin.policyengine.RangerAccessResource", "Insert QualifiedName: org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl(48) into ImportDeclaration(49) at 0", "Update SimpleType: RangerResource(791) to RangerAccessResourceImpl", "Update SimpleName: RangerResource(790) to RangerAccessResourceImpl", "Insert VariableDeclarationStatement(1149) into Block(1260) at 3", "Insert SuperMethodInvocation(816) into ExpressionStatement(817) at 0", "Insert SuperMethodInvocation(820) into ExpressionStatement(821) at 0", "Insert SimpleType: RangerAccessResource(1143) into VariableDeclarationStatement(1149) at 0", "Insert VariableDeclarationFragment(1148) into VariableDeclarationStatement(1149) at 1", "Move SimpleType: String(1245) into VariableDeclarationStatement(1163) at 0", "Move SimpleType: String(1234) into VariableDeclarationStatement(1177) at 0", "Insert SimpleName: setValue(813) into SuperMethodInvocation(816) at 0", "Insert SimpleName: KEY_PATH(814) into SuperMethodInvocation(816) at 1", "Insert SimpleName: path(815) into SuperMethodInvocation(816) at 2", "Insert SimpleName: setOwnerUser(818) into SuperMethodInvocation(820) at 0", "Insert SimpleName: owner(819) into SuperMethodInvocation(820) at 1", "Insert SimpleName: RangerAccessResource(1142) into SimpleType: RangerAccessResource(1143) at 0", "Insert SimpleName: resource(1144) into VariableDeclarationFragment(1148) at 0", "Move MethodInvocation(1239) into VariableDeclarationFragment(1148) at 1", "Insert ConditionalExpression(1161) into VariableDeclarationFragment(1162) at 1", "Insert ConditionalExpression(1175) into VariableDeclarationFragment(1176) at 1", "Insert InfixExpression: !=(1155) into ConditionalExpression(1161) at 0", "Insert MethodInvocation(1159) into ConditionalExpression(1161) at 1", "Insert NullLiteral(1160) into ConditionalExpression(1161) at 2", "Insert InfixExpression: !=(1169) into ConditionalExpression(1175) at 0", "Insert MethodInvocation(1173) into ConditionalExpression(1175) at 1", "Insert NullLiteral(1174) into ConditionalExpression(1175) at 2", "Insert SimpleName: resource(1153) into InfixExpression: !=(1155) at 0", "Insert NullLiteral(1154) into InfixExpression: !=(1155) at 1", "Insert SimpleName: resource(1156) into MethodInvocation(1159) at 0", "Update SimpleName: getResourceName(1236) to getLeafName", "Move SimpleName: getResourceName(1236) into MethodInvocation(1159) at 1", "Move SimpleName: serviceDef(1240) into MethodInvocation(1159) at 2", "Insert SimpleName: resource(1167) into InfixExpression: !=(1169) at 0", "Insert NullLiteral(1168) into InfixExpression: !=(1169) at 1", "Update SimpleName: request(1248) to resource", "Move SimpleName: request(1248) into MethodInvocation(1173) at 0", "Update SimpleName: getResource(1249) to getAsString", "Move SimpleName: getResource(1249) into MethodInvocation(1173) at 1", "Move SimpleName: serviceDef(1251) into MethodInvocation(1173) at 2", "Delete Modifier: private(801)", "Delete Modifier: static(802)", "Delete Modifier: final(803)", "Delete SimpleName: Set(804)", "Delete SimpleType: Set(805)", "Delete SimpleName: String(806)", "Delete SimpleType: String(807)", "Delete ParameterizedType: Set<String>(808)", "Delete SimpleName: KEYS_PATH(809)", "Delete SimpleName: Sets(810)", "Delete SimpleName: newHashSet(811)", "Delete SimpleName: KEY_PATH(812)", "Delete MethodInvocation(813)", "Delete VariableDeclarationFragment(814)", "Delete FieldDeclaration(815)", "Delete Modifier: private(816)", "Delete SimpleName: String(817)", "Delete SimpleType: String(818)", "Delete SimpleName: path(819)", "Delete NullLiteral(820)", "Delete VariableDeclarationFragment(821)", "Delete FieldDeclaration(822)", "Delete Modifier: private(823)", "Delete SimpleName: String(824)", "Delete SimpleType: String(825)", "Delete SimpleName: owner(826)", "Delete NullLiteral(827)", "Delete VariableDeclarationFragment(828)", "Delete FieldDeclaration(829)", "Delete ThisExpression(840)", "Delete SimpleName: path(841)", "Delete FieldAccess(842)", "Delete SimpleName: path(843)", "Delete Assignment: =(844)", "Delete ThisExpression(846)", "Delete SimpleName: owner(847)", "Delete FieldAccess(848)", "Delete SimpleName: owner(849)", "Delete Assignment: =(850)", "Delete SimpleName: Override(854)", "Delete MarkerAnnotation(855)", "Delete Modifier: public(856)", "Delete SimpleName: String(857)", "Delete SimpleType: String(858)", "Delete SimpleName: getOwnerUser(859)", "Delete SimpleName: owner(860)", "Delete ReturnStatement(861)", "Delete Block(862)", "Delete MethodDeclaration(863)", "Delete SimpleName: Override(864)", "Delete MarkerAnnotation(865)", "Delete Modifier: public(866)", "Delete PrimitiveType: boolean(867)", "Delete SimpleName: exists(868)", "Delete SimpleName: String(869)", "Delete SimpleType: String(870)", "Delete SimpleName: name(871)", "Delete SingleVariableDeclaration(872)", "Delete SimpleName: StringUtils(873)", "Delete SimpleName: equalsIgnoreCase(874)", "Delete SimpleName: name(875)", "Delete SimpleName: KEY_PATH(876)", "Delete MethodInvocation(877)", "Delete ReturnStatement(878)", "Delete Block(879)", "Delete MethodDeclaration(880)", "Delete SimpleName: Override(881)", "Delete MarkerAnnotation(882)", "Delete Modifier: public(883)", "Delete SimpleName: String(884)", "Delete SimpleType: String(885)", "Delete SimpleName: getValue(886)", "Delete SimpleName: String(887)", "Delete SimpleType: String(888)", "Delete SimpleName: name(889)", "Delete SingleVariableDeclaration(890)", "Delete SimpleName: StringUtils(891)", "Delete SimpleName: equalsIgnoreCase(892)", "Delete SimpleName: name(893)", "Delete SimpleName: KEY_PATH(894)", "Delete MethodInvocation(895)", "Delete SimpleName: path(896)", "Delete ReturnStatement(897)", "Delete Block(898)", "Delete IfStatement(899)", "Delete NullLiteral(900)", "Delete ReturnStatement(901)", "Delete Block(902)", "Delete MethodDeclaration(903)", "Delete Modifier: public(904)", "Delete SimpleName: Set(905)", "Delete SimpleType: Set(906)", "Delete SimpleName: String(907)", "Delete SimpleType: String(908)", "Delete ParameterizedType: Set<String>(909)", "Delete SimpleName: getKeys(910)", "Delete SimpleName: KEYS_PATH(911)", "Delete ReturnStatement(912)", "Delete Block(913)", "Delete MethodDeclaration(914)", "Delete MethodInvocation(1241)", "Delete SimpleName: getResourceValueAsString(1247)", "Delete MethodInvocation(1250)", "Delete MethodInvocation(1252)"]}}, {"RangerHiveAuditHandler_cluster": {"actions": [{"root": "INS ConditionalExpression to MethodInvocation at 2", "operations": ["INS ConditionalExpression to MethodInvocation at 2", "INS InfixExpression: != to ConditionalExpression at 0", "INS NullLiteral to ConditionalExpression at 2", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: resource to InfixExpression: != at 0", "INS SimpleName: getAsString to MethodInvocation at 1", "INS MethodInvocation to ConditionalExpression at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: resource to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "INS ConditionalExpression to MethodInvocation at 2", "operations": ["INS NullLiteral to InfixExpression: != at 1", "INS ConditionalExpression to MethodInvocation at 2", "INS MethodInvocation to ConditionalExpression at 1", "INS SimpleName: resource to InfixExpression: != at 0", "INS InfixExpression: != to ConditionalExpression at 0", "INS SimpleName: getAsString to MethodInvocation at 1", "INS NullLiteral to ConditionalExpression at 2"]}, {"root": "INS ConditionalExpression to MethodInvocation at 2", "operations": ["INS NullLiteral to ConditionalExpression at 2", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to ConditionalExpression at 0", "INS MethodInvocation to ConditionalExpression at 1", "INS SimpleName: resource to InfixExpression: != at 0", "INS ConditionalExpression to MethodInvocation at 2"]}, {"root": "INS ConditionalExpression to MethodInvocation at 2", "operations": ["INS NullLiteral to ConditionalExpression at 2", "INS InfixExpression: != to ConditionalExpression at 0", "INS MethodInvocation to ConditionalExpression at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: resource to InfixExpression: != at 0", "INS ConditionalExpression to MethodInvocation at 2", "INS SimpleName: resource to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: resource to MethodInvocation at 0"]}, {"root": "UPDATE from result to resource", "operations": ["UPD SimpleName: result from result to resource"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: result to MethodInvocation at 0", "MOV SimpleName: getServiceDef to MethodInvocation at 1"]}, {"root": "UPDATE from getResourceValueAsString to getAsString", "operations": ["UPD SimpleName: getResourceValueAsString from getResourceValueAsString to getAsString", "UPD SimpleName: getServiceDef from getServiceDef to getAsString"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: resource to MethodInvocation at 0", "MOV SimpleName: getResourceValueAsString to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from resource to result", "operations": ["UPD SimpleName: resource from resource to result"]}, {"root": "INS SimpleName: getServiceDef to MethodInvocation at 1", "operations": ["INS SimpleName: getServiceDef to MethodInvocation at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getResourceValueAsString"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getResourceValueAsString"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getResourceValueAsString", "DEL MethodInvocation", "DEL SimpleName: resource"]}]}}, {"RangerHiveAuditHandler_diff": {"operations": ["Insert ConditionalExpression(229) into MethodInvocation(230) at 2", "Insert InfixExpression: !=(221) into ConditionalExpression(229) at 0", "Insert MethodInvocation(227) into ConditionalExpression(229) at 1", "Insert NullLiteral(228) into ConditionalExpression(229) at 2", "Insert SimpleName: resource(219) into InfixExpression: !=(221) at 0", "Insert NullLiteral(220) into InfixExpression: !=(221) at 1", "Move SimpleName: resource(220) into MethodInvocation(227) at 0", "Insert SimpleName: getAsString(223) into MethodInvocation(227) at 1", "Move MethodInvocation(223) into MethodInvocation(227) at 2", "Insert ConditionalExpression(453) into MethodInvocation(454) at 2", "Insert ConditionalExpression(507) into MethodInvocation(508) at 2", "Insert InfixExpression: !=(445) into ConditionalExpression(453) at 0", "Insert MethodInvocation(451) into ConditionalExpression(453) at 1", "Insert NullLiteral(452) into ConditionalExpression(453) at 2", "Insert ConditionalExpression(485) into MethodInvocation(486) at 2", "Insert InfixExpression: !=(499) into ConditionalExpression(507) at 0", "Insert MethodInvocation(505) into ConditionalExpression(507) at 1", "Insert NullLiteral(506) into ConditionalExpression(507) at 2", "Insert SimpleName: resource(443) into InfixExpression: !=(445) at 0", "Insert NullLiteral(444) into InfixExpression: !=(445) at 1", "Move SimpleName: resource(439) into MethodInvocation(451) at 0", "Insert SimpleName: getAsString(447) into MethodInvocation(451) at 1", "Move MethodInvocation(442) into MethodInvocation(451) at 2", "Insert InfixExpression: !=(477) into ConditionalExpression(485) at 0", "Insert MethodInvocation(483) into ConditionalExpression(485) at 1", "Insert NullLiteral(484) into ConditionalExpression(485) at 2", "Insert SimpleName: resource(497) into InfixExpression: !=(499) at 0", "Insert NullLiteral(498) into InfixExpression: !=(499) at 1", "Update SimpleName: result(484) to resource", "Move SimpleName: result(484) into MethodInvocation(505) at 0", "Update SimpleName: getServiceDef(485) to getAsString", "Move SimpleName: getServiceDef(485) into MethodInvocation(505) at 1", "Move MethodInvocation(469) into MethodInvocation(505) at 2", "Insert SimpleName: resource(475) into InfixExpression: !=(477) at 0", "Insert NullLiteral(476) into InfixExpression: !=(477) at 1", "Insert SimpleName: resource(478) into MethodInvocation(483) at 0", "Update SimpleName: getResourceValueAsString(465) to getAsString", "Move SimpleName: getResourceValueAsString(465) into MethodInvocation(483) at 1", "Move MethodInvocation(486) into MethodInvocation(483) at 2", "Update SimpleName: resource(466) to result", "Move SimpleName: resource(466) into MethodInvocation(482) at 0", "Insert SimpleName: getServiceDef(481) into MethodInvocation(482) at 1", "Delete SimpleName: getResourceValueAsString(219)", "Delete MethodInvocation(224)", "Delete SimpleName: getResourceValueAsString(438)", "Delete MethodInvocation(443)", "Delete MethodInvocation(470)", "Delete SimpleName: getResourceValueAsString(482)", "Delete SimpleName: resource(483)", "Delete MethodInvocation(487)"]}}, {"RangerHiveAuthorizer_cluster": {"actions": [{"root": "UPDATE from getTableOrUdf to getTable", "operations": ["UPD SimpleName: getTableOrUdf from getTableOrUdf to getTable", "UPD SimpleName: getTableOrUdf from getTableOrUdf to getTable", "UPD SimpleName: getTableOrUdf from getTableOrUdf to getTable"]}, {"root": "INS ConditionalExpression to VariableDeclarationFragment at 1", "operations": ["INS NullLiteral to ConditionalExpression at 2", "INS InfixExpression: != to ConditionalExpression at 0", "INS MethodInvocation to ConditionalExpression at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: resource to InfixExpression: != at 0", "INS ConditionalExpression to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from request to resource", "operations": ["UPD SimpleName: request from request to resource"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getResource to MethodInvocation at 1", "MOV SimpleName: request to MethodInvocation at 0"]}, {"root": "UPDATE from getResource to getAsString", "operations": ["UPD SimpleName: getResource from getResource to getAsString"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getResourceValueAsString", "DEL SimpleName: auditHandler", "DEL MethodInvocation"]}]}}, {"RangerHiveAuthorizer_diff": {"operations": ["Update SimpleName: getTableOrUdf(2194) to getTable", "Update SimpleName: getTableOrUdf(2189) to getTable", "Insert ConditionalExpression(1037) into VariableDeclarationFragment(1038) at 1", "Insert InfixExpression: !=(1029) into ConditionalExpression(1037) at 0", "Insert MethodInvocation(1035) into ConditionalExpression(1037) at 1", "Insert NullLiteral(1036) into ConditionalExpression(1037) at 2", "Insert SimpleName: resource(1027) into InfixExpression: !=(1029) at 0", "Insert NullLiteral(1028) into InfixExpression: !=(1029) at 1", "Update SimpleName: request(1029) to resource", "Move SimpleName: request(1029) into MethodInvocation(1035) at 0", "Update SimpleName: getResource(1030) to getAsString", "Move SimpleName: getResource(1030) into MethodInvocation(1035) at 1", "Move MethodInvocation(1034) into MethodInvocation(1035) at 2", "Update SimpleName: getTableOrUdf(943) to getTable", "Delete SimpleName: auditHandler(1027)", "Delete SimpleName: getResourceValueAsString(1028)", "Delete MethodInvocation(1031)", "Delete MethodInvocation(1035)"]}}, {"RangerHiveResource_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 18"]}, {"root": "UPDATE from org.apache.ranger.plugin.policyengine.RangerResource to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl", "operations": ["UPD QualifiedName: org.apache.ranger.plugin.policyengine.RangerResource from org.apache.ranger.plugin.policyengine.RangerResource to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl"]}, {"root": "UPDATE from RangerResource to RangerAccessResourceImpl", "operations": ["UPD SimpleType: RangerResource from RangerResource to RangerAccessResourceImpl", "UPD SimpleName: RangerResource from RangerResource to RangerAccessResourceImpl"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS ExpressionStatement to SwitchStatement at 5", "INS Modifier: public to MethodDeclaration at 0", "INS ExpressionStatement to SwitchStatement at 10", "INS BreakStatement to SwitchStatement at 7", "INS ExpressionStatement to SwitchStatement at 18", "INS ExpressionStatement to SwitchStatement at 17", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to SwitchStatement at 9", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: tableOrUdf to MethodInvocation at 2", "INS ExpressionStatement to SwitchStatement at 6", "INS BreakStatement to SwitchStatement at 23", "INS BreakStatement to SwitchStatement at 19", "INS SwitchStatement to Block at 1", "INS BreakStatement to SwitchStatement at 12", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 6", "INS ExpressionStatement to SwitchStatement at 11", "INS SimpleName: database to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS SwitchCase to SwitchStatement at 22", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SimpleName: RangerHiveResource to MethodDeclaration at 1", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 2"]}, {"root": "INS SimpleName: getDatabase to MethodDeclaration at 3", "operations": ["INS SimpleName: getDatabase to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 1"]}, {"root": "INS SimpleName: getTable to MethodDeclaration at 2", "operations": ["INS SimpleName: getTable to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 1"]}, {"root": "UPDATE from getTableOrUdf to getUdf", "operations": ["UPD SimpleName: getTableOrUdf from getTableOrUdf to getUdf"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 2", "MOV SwitchCase to SwitchStatement at 13", "MOV SwitchCase to SwitchStatement at 15", "MOV BreakStatement to SwitchStatement at 3", "MOV SwitchCase to SwitchStatement at 1", "MOV SwitchCase to SwitchStatement at 21", "MOV SimpleName: objectType to SwitchStatement at 0", "MOV SwitchCase to SwitchStatement at 4", "MOV SwitchCase to SwitchStatement at 14", "MOV SwitchCase to SwitchStatement at 8", "MOV SwitchCase to SwitchStatement at 16", "MOV SwitchCase to SwitchStatement at 20"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: getValue to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: KEY_UDF to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: KEY_COLUMN to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: getValue to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: database to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setValue to MethodInvocation at 0", "INS SimpleName: KEY_DATABASE to MethodInvocation at 1"]}, {"root": "UPDATE from database to getValue", "operations": ["UPD SimpleName: database from database to getValue", "UPD SimpleName: sb from sb to getValue"]}, {"root": "UPDATE from toString to KEY_DATABASE", "operations": ["UPD SimpleName: toString from toString to KEY_DATABASE", "UPD SimpleName: hashCode from hashCode to KEY_DATABASE", "UPD SimpleName: equals from equals to KEY_DATABASE"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: database to MethodInvocation at 0"]}, {"root": "UPDATE from append to KEY_TABLE", "operations": ["UPD SimpleName: append from append to KEY_TABLE", "UPD SimpleName: hashCode from hashCode to KEY_TABLE", "UPD SimpleName: equals from equals to KEY_TABLE"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: append to MethodInvocation at 1"]}, {"root": "UPDATE from ObjectUtils to setValue", "operations": ["UPD SimpleName: ObjectUtils from ObjectUtils to setValue", "UPD SimpleName: name from name to setValue", "UPD SimpleName: ObjectUtils from ObjectUtils to setValue", "UPD SimpleName: ObjectUtils from ObjectUtils to setValue", "UPD SimpleName: getValue from getValue to setValue", "UPD SimpleName: ObjectUtils from ObjectUtils to setValue", "UPD SimpleName: ObjectUtils from ObjectUtils to setValue"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getValue to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: KEY_DATABASE to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: name to MethodInvocation at 0", "MOV SimpleName: KEY_UDF to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: equals to MethodInvocation at 1", "MOV SimpleName: ObjectUtils to MethodInvocation at 0", "MOV SimpleName: database to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: equals to MethodInvocation at 1", "MOV SimpleName: tableOrUdf to MethodInvocation at 2", "MOV SimpleName: ObjectUtils to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: column to MethodInvocation at 2", "MOV SimpleName: equals to MethodInvocation at 1", "MOV SimpleName: ObjectUtils to MethodInvocation at 0"]}, {"root": "UPDATE from equals to KEY_COLUMN", "operations": ["UPD SimpleName: equals from equals to KEY_COLUMN"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ObjectUtils to MethodInvocation at 0", "MOV SimpleName: database to MethodInvocation at 2", "MOV SimpleName: hashCode to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: hashCode to MethodInvocation at 1", "MOV SimpleName: ObjectUtils to MethodInvocation at 0", "MOV SimpleName: tableOrUdf to MethodInvocation at 2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Set", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.lang.ObjectUtils"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.lang.StringUtils", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.Sets"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: KEYS_DATABASE", "DEL SimpleType: String", "DEL SimpleName: Sets", "DEL Modifier: static", "DEL ParameterizedType: Set<String>", "DEL SimpleName: KEY_DATABASE", "DEL Modifier: final", "DEL SimpleName: String", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: newHashSet", "DEL FieldDeclaration", "DEL SimpleType: Set", "DEL SimpleName: Set", "DEL VariableDeclarationFragment"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: newHashSet", "DEL Modifier: final", "DEL FieldDeclaration", "DEL SimpleName: KEY_TABLE", "DEL SimpleName: String", "DEL SimpleType: Set", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL Modifier: static", "DEL SimpleName: Sets", "DEL SimpleName: KEY_DATABASE", "DEL MethodInvocation", "DEL SimpleName: Set", "DEL ParameterizedType: Set<String>", "DEL SimpleName: KEYS_TABLE", "DEL SimpleType: String"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleType: Set", "DEL SimpleName: newHashSet", "DEL SimpleName: KEYS_UDF", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL ParameterizedType: Set<String>", "DEL FieldDeclaration", "DEL SimpleName: KEY_UDF", "DEL Modifier: final", "DEL SimpleType: String", "DEL Modifier: public", "DEL SimpleName: KEY_DATABASE", "DEL SimpleName: Sets", "DEL SimpleName: Set", "DEL MethodInvocation"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: Set", "DEL Modifier: public", "DEL SimpleType: Set", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: String", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL SimpleName: KEY_COLUMN", "DEL SimpleName: KEY_DATABASE", "DEL SimpleName: KEYS_COLUMN", "DEL ParameterizedType: Set<String>", "DEL SimpleName: KEY_TABLE", "DEL FieldDeclaration", "DEL Modifier: final", "DEL SimpleName: Sets", "DEL SimpleName: newHashSet"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: database", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL Modifier: private", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL SimpleName: tableOrUdf", "DEL NullLiteral", "DEL Modifier: private", "DEL VariableDeclarationFragment"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL NullLiteral", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL SimpleName: column"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: Set", "DEL SimpleType: Set", "DEL ParameterizedType: Set<String>", "DEL VariableDeclarationFragment", "DEL SimpleName: keys", "DEL Modifier: private", "DEL NullLiteral", "DEL FieldDeclaration"]}, {"root": "DEL Assignment: =", "operations": ["DEL SimpleName: keys", "DEL SimpleName: KEYS_DATABASE", "DEL Assignment: ="]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL ExpressionStatement", "DEL FieldAccess", "DEL Assignment: =", "DEL ThisExpression", "DEL SimpleName: tableOrUdf", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SwitchCase", "DEL ExpressionStatement", "DEL SimpleName: KEYS_TABLE", "DEL BreakStatement", "DEL SimpleName: database", "DEL Block", "DEL SimpleName: keys", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleName: keys", "DEL NullLiteral", "DEL ExpressionStatement", "DEL FieldAccess", "DEL Assignment: =", "DEL BreakStatement", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: tableOrUdf", "DEL SwitchStatement", "DEL Modifier: public", "DEL FieldAccess", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: column", "DEL ExpressionStatement", "DEL SimpleName: database", "DEL SimpleName: KEYS_COLUMN", "DEL ThisExpression", "DEL SimpleName: column", "DEL BreakStatement", "DEL BreakStatement", "DEL ThisExpression", "DEL SimpleName: KEYS_UDF", "DEL SimpleName: keys", "DEL SimpleName: keys"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL SimpleName: getOwnerUser", "DEL Modifier: public", "DEL SimpleName: String", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL Block", "DEL SimpleType: String", "DEL MarkerAnnotation", "DEL NullLiteral"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: isEmpty", "DEL Modifier: public", "DEL ReturnStatement", "DEL PrefixExpression: !", "DEL SimpleName: exists", "DEL Block", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleName: StringUtils", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL MarkerAnnotation", "DEL SimpleName: Override", "DEL SimpleName: name", "DEL SimpleName: name"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: name", "DEL Block", "DEL ReturnStatement", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleName: KEY_TABLE", "DEL NullLiteral", "DEL SimpleType: String", "DEL SimpleName: name", "DEL IfStatement", "DEL SimpleName: Override", "DEL SimpleName: StringUtils", "DEL Block", "DEL Block", "DEL QualifiedName: HiveObjectType.FUNCTION", "DEL Modifier: public", "DEL IfStatement", "DEL SimpleName: equalsIgnoreCase", "DEL SimpleName: tableOrUdf", "DEL SimpleName: equalsIgnoreCase", "DEL SimpleName: name", "DEL SimpleName: StringUtils", "DEL SimpleName: getValue", "DEL SimpleName: tableOrUdf", "DEL SimpleName: objectType", "DEL MethodInvocation", "DEL SimpleName: name", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: StringUtils", "DEL SimpleName: database", "DEL SimpleName: String", "DEL ReturnStatement", "DEL SimpleName: String", "DEL IfStatement", "DEL SimpleName: StringUtils", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleName: equalsIgnoreCase", "DEL IfStatement", "DEL SimpleName: column", "DEL Block", "DEL SimpleName: equalsIgnoreCase", "DEL Block", "DEL Block", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: KEY_COLUMN", "DEL MethodDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ParameterizedType: Set<String>", "DEL Block", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: String", "DEL SimpleType: Set", "DEL SimpleName: Set", "DEL SimpleName: keys", "DEL Modifier: public", "DEL SimpleName: getKeys"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: obj", "DEL SimpleName: obj", "DEL SimpleType: Object", "DEL InstanceofExpression", "DEL ParenthesizedExpression", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL QualifiedName: other.objectType", "DEL QualifiedName: other.database", "DEL SimpleType: RangerHiveResource", "DEL SimpleName: obj", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL SimpleName: Object", "DEL QualifiedName: other.column", "DEL MarkerAnnotation", "DEL SimpleName: obj", "DEL IfStatement", "DEL SimpleName: RangerHiveResource", "DEL Block", "DEL SimpleName: equals", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL SimpleType: RangerHiveResource", "DEL InfixExpression: ==", "DEL SingleVariableDeclaration", "DEL SimpleName: obj", "DEL BooleanLiteral: false", "DEL BooleanLiteral: true", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: objectType", "DEL Block", "DEL IfStatement", "DEL Modifier: public", "DEL InfixExpression: &&", "DEL PrefixExpression: !", "DEL SimpleName: RangerHiveResource", "DEL SimpleName: other", "DEL MethodInvocation", "DEL Block", "DEL CastExpression", "DEL SimpleType: RangerHiveResource", "DEL QualifiedName: other.tableOrUdf", "DEL SimpleName: ObjectUtils", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleName: RangerHiveResource", "DEL MethodDeclaration", "DEL InfixExpression: ||", "DEL PrimitiveType: boolean", "DEL SimpleName: Override", "DEL ThisExpression"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL InfixExpression: +", "DEL SimpleName: ret", "DEL ReturnStatement", "DEL Modifier: public", "DEL ExpressionStatement", "DEL NumberLiteral: 31", "DEL Assignment: =", "DEL SimpleName: ret", "DEL SimpleName: ret", "DEL NumberLiteral: 31", "DEL MethodInvocation", "DEL SimpleName: ret", "DEL SimpleName: ret", "DEL InfixExpression: +", "DEL Assignment: =", "DEL SimpleName: hashCode", "DEL VariableDeclarationFragment", "DEL SimpleName: ret", "DEL SimpleName: ObjectUtils", "DEL SimpleName: Override", "DEL Assignment: =", "DEL InfixExpression: *", "DEL NumberLiteral: 7", "DEL ExpressionStatement", "DEL SimpleName: hashCode", "DEL SimpleName: hashCode", "DEL InfixExpression: *", "DEL SimpleName: ret", "DEL PrimitiveType: int", "DEL SimpleName: ret", "DEL SimpleName: column", "DEL NumberLiteral: 31", "DEL Assignment: =", "DEL ExpressionStatement", "DEL InfixExpression: +", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL SimpleName: objectType", "DEL MethodInvocation", "DEL SimpleName: ObjectUtils", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL NumberLiteral: 31", "DEL SimpleName: ret", "DEL InfixExpression: *", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL SimpleName: ret", "DEL PrimitiveType: int", "DEL InfixExpression: *"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Override"]}, {"root": "DEL SimpleType: String", "operations": ["DEL SimpleName: String", "DEL SimpleType: String"]}, {"root": "DEL SimpleName: toString", "operations": ["DEL SimpleName: toString"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: StringBuilder", "DEL SimpleName: StringBuilder", "DEL VariableDeclarationStatement", "DEL SimpleType: StringBuilder", "DEL ClassInstanceCreation", "DEL SimpleName: StringBuilder", "DEL VariableDeclarationFragment", "DEL SimpleName: sb"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: sb", "DEL SimpleName: toString", "DEL ExpressionStatement", "DEL MethodInvocation"]}, {"root": "DEL SimpleType: StringBuilder", "operations": ["DEL SimpleName: StringBuilder", "DEL SimpleType: StringBuilder"]}, {"root": "DEL SimpleName: toString", "operations": ["DEL SimpleName: toString"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: StringBuilder", "DEL SimpleName: StringBuilder", "DEL SingleVariableDeclaration", "DEL SimpleName: sb"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: append", "DEL StringLiteral: \"objectType={\"", "DEL MethodInvocation", "DEL SimpleName: append", "DEL StringLiteral: \"} \"", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL SimpleName: objectType", "DEL SimpleName: append"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL StringLiteral: \"database={\"", "DEL SimpleName: append", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL StringLiteral: \"} \"", "DEL SimpleName: sb", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL StringLiteral: \"tableOrUdf={\"", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: sb", "DEL StringLiteral: \"} \"", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL SimpleName: tableOrUdf", "DEL SimpleName: append", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: append", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: column", "DEL StringLiteral: \"} \"", "DEL SimpleName: append", "DEL SimpleName: sb", "DEL StringLiteral: \"column={\"", "DEL MethodInvocation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: sb", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: database", "DEL SimpleName: getDatabase", "DEL Block", "DEL SimpleName: String", "DEL Modifier: public", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleType: String"]}, {"root": "DEL SimpleType: String", "operations": ["DEL SimpleName: String", "DEL SimpleType: String"]}, {"root": "DEL SimpleName: tableOrUdf", "operations": ["DEL SimpleName: tableOrUdf"]}, {"root": "DEL SimpleType: String", "operations": ["DEL SimpleName: String", "DEL SimpleType: String"]}, {"root": "DEL SimpleName: column", "operations": ["DEL SimpleName: column"]}]}}, {"RangerHiveResource_diff": {"operations": ["Move MethodDeclaration(585) into TypeDeclaration: class(229) at 18", "Update QualifiedName: org.apache.ranger.plugin.policyengine.RangerResource(8) to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl", "Update SimpleType: RangerResource(15) to RangerAccessResourceImpl", "Insert MethodDeclaration(180) into TypeDeclaration: class(229) at 10", "Update SimpleName: RangerResource(14) to RangerAccessResourceImpl", "Insert Modifier: public(89) into MethodDeclaration(180) at 0", "Move SimpleName: RangerHiveResource(193) into MethodDeclaration(180) at 1", "Move SingleVariableDeclaration(197) into MethodDeclaration(180) at 2", "Move SingleVariableDeclaration(201) into MethodDeclaration(180) at 3", "Move SingleVariableDeclaration(205) into MethodDeclaration(180) at 4", "Move SingleVariableDeclaration(209) into MethodDeclaration(180) at 5", "Insert Block(179) into MethodDeclaration(180) at 6", "Move SimpleType: String(148) into MethodDeclaration(198) at 2", "Insert SimpleName: getDatabase(192) into MethodDeclaration(198) at 2", "Move SimpleType: String(139) into MethodDeclaration(208) at 1", "Insert SimpleName: getTable(202) into MethodDeclaration(208) at 2", "Move SimpleType: String(132) into MethodDeclaration(218) at 1", "Update SimpleName: getTableOrUdf(597) to getUdf", "Move SimpleType: String(125) into MethodDeclaration(228) at 1", "Move ExpressionStatement(215) into Block(179) at 0", "Insert SwitchStatement(178) into Block(179) at 1", "Insert ReturnStatement(206) into Block(207) at 0", "Move SimpleName: objectType(234) into SwitchStatement(178) at 0", "Move SwitchCase(236) into SwitchStatement(178) at 1", "Move ExpressionStatement(240) into SwitchStatement(178) at 2", "Move BreakStatement(241) into SwitchStatement(178) at 3", "Move SwitchCase(243) into SwitchStatement(178) at 4", "Insert ExpressionStatement(128) into SwitchStatement(178) at 5", "Insert ExpressionStatement(133) into SwitchStatement(178) at 6", "Insert BreakStatement(134) into SwitchStatement(178) at 7", "Move SwitchCase(250) into SwitchStatement(178) at 8", "Insert ExpressionStatement(141) into SwitchStatement(178) at 9", "Insert ExpressionStatement(146) into SwitchStatement(178) at 10", "Insert ExpressionStatement(151) into SwitchStatement(178) at 11", "Insert BreakStatement(152) into SwitchStatement(178) at 12", "Move SwitchCase(257) into SwitchStatement(178) at 13", "Move SwitchCase(259) into SwitchStatement(178) at 14", "Move SwitchCase(261) into SwitchStatement(178) at 15", "Move SwitchCase(263) into SwitchStatement(178) at 16", "Insert ExpressionStatement(165) into SwitchStatement(178) at 17", "Insert ExpressionStatement(170) into SwitchStatement(178) at 18", "Insert BreakStatement(171) into SwitchStatement(178) at 19", "Move SwitchCase(270) into SwitchStatement(178) at 20", "Move SwitchCase(272) into SwitchStatement(178) at 21", "Insert SwitchCase(176) into SwitchStatement(178) at 22", "Insert BreakStatement(177) into SwitchStatement(178) at 23", "Insert MethodInvocation(205) into ReturnStatement(206) at 0", "Insert MethodInvocation(215) into ReturnStatement(216) at 0", "Insert MethodInvocation(225) into ReturnStatement(226) at 0", "Insert MethodInvocation(119) into ExpressionStatement(120) at 0", "Insert MethodInvocation(127) into ExpressionStatement(128) at 0", "Insert MethodInvocation(132) into ExpressionStatement(133) at 0", "Insert MethodInvocation(140) into ExpressionStatement(141) at 0", "Insert MethodInvocation(145) into ExpressionStatement(146) at 0", "Insert MethodInvocation(150) into ExpressionStatement(151) at 0", "Insert MethodInvocation(164) into ExpressionStatement(165) at 0", "Insert MethodInvocation(169) into ExpressionStatement(170) at 0", "Update SimpleName: sb(516) to getValue", "Update SimpleName: toString(517) to KEY_DATABASE", "Update SimpleName: database(546) to getValue", "Move SimpleName: database(546) into MethodInvocation(205) at 0", "Update SimpleName: append(548) to KEY_TABLE", "Move SimpleName: append(548) into MethodInvocation(205) at 1", "Insert SimpleName: getValue(213) into MethodInvocation(215) at 0", "Insert SimpleName: KEY_UDF(214) into MethodInvocation(215) at 1", "Insert SimpleName: getValue(223) into MethodInvocation(225) at 0", "Insert SimpleName: KEY_COLUMN(224) into MethodInvocation(225) at 1", "Insert SimpleName: setValue(116) into MethodInvocation(119) at 0", "Insert SimpleName: KEY_DATABASE(117) into MethodInvocation(119) at 1", "Insert SimpleName: database(118) into MethodInvocation(119) at 2", "Update SimpleName: getValue(303) to setValue", "Move SimpleName: getValue(303) into MethodInvocation(127) at 0", "Move SimpleName: KEY_DATABASE(324) into MethodInvocation(127) at 1", "Insert SimpleName: database(126) into MethodInvocation(127) at 2", "Update SimpleName: name(334) to setValue", "Move SimpleName: name(334) into MethodInvocation(132) at 0", "Move SimpleName: KEY_UDF(335) into MethodInvocation(132) at 1", "Insert SimpleName: tableOrUdf(131) into MethodInvocation(132) at 2", "Update SimpleName: ObjectUtils(421) to setValue", "Move SimpleName: ObjectUtils(421) into MethodInvocation(140) at 0", "Update SimpleName: equals(422) to KEY_DATABASE", "Move SimpleName: equals(422) into MethodInvocation(140) at 1", "Move SimpleName: database(423) into MethodInvocation(140) at 2", "Update SimpleName: ObjectUtils(426) to setValue", "Move SimpleName: ObjectUtils(426) into MethodInvocation(145) at 0", "Update SimpleName: equals(427) to KEY_TABLE", "Move SimpleName: equals(427) into MethodInvocation(145) at 1", "Move SimpleName: tableOrUdf(428) into MethodInvocation(145) at 2", "Update SimpleName: ObjectUtils(431) to setValue", "Move SimpleName: ObjectUtils(431) into MethodInvocation(150) at 0", "Update SimpleName: equals(432) to KEY_COLUMN", "Move SimpleName: equals(432) into MethodInvocation(150) at 1", "Move SimpleName: column(433) into MethodInvocation(150) at 2", "Update SimpleName: ObjectUtils(465) to setValue", "Move SimpleName: ObjectUtils(465) into MethodInvocation(164) at 0", "Update SimpleName: hashCode(466) to KEY_DATABASE", "Move SimpleName: hashCode(466) into MethodInvocation(164) at 1", "Move SimpleName: database(467) into MethodInvocation(164) at 2", "Update SimpleName: ObjectUtils(476) to setValue", "Move SimpleName: ObjectUtils(476) into MethodInvocation(169) at 0", "Update SimpleName: hashCode(477) to KEY_TABLE", "Move SimpleName: hashCode(477) into MethodInvocation(169) at 1", "Move SimpleName: tableOrUdf(478) into MethodInvocation(169) at 2", "Delete QualifiedName: java.util.Set(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.apache.commons.lang.ObjectUtils(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.apache.commons.lang.StringUtils(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.google.common.collect.Sets(10)", "Delete ImportDeclaration(11)", "Delete Modifier: public(52)", "Delete Modifier: static(53)", "Delete Modifier: final(54)", "Delete SimpleName: Set(55)", "Delete SimpleType: Set(56)", "Delete SimpleName: String(57)", "Delete SimpleType: String(58)", "Delete ParameterizedType: Set<String>(59)", "Delete SimpleName: KEYS_DATABASE(60)", "Delete SimpleName: Sets(61)", "Delete SimpleName: newHashSet(62)", "Delete SimpleName: KEY_DATABASE(63)", "Delete MethodInvocation(64)", "Delete VariableDeclarationFragment(65)", "Delete FieldDeclaration(66)", "Delete Modifier: public(67)", "Delete Modifier: static(68)", "Delete Modifier: final(69)", "Delete SimpleName: Set(70)", "Delete SimpleType: Set(71)", "Delete SimpleName: String(72)", "Delete SimpleType: String(73)", "Delete ParameterizedType: Set<String>(74)", "Delete SimpleName: KEYS_TABLE(75)", "Delete SimpleName: Sets(76)", "Delete SimpleName: newHashSet(77)", "Delete SimpleName: KEY_DATABASE(78)", "Delete SimpleName: KEY_TABLE(79)", "Delete MethodInvocation(80)", "Delete VariableDeclarationFragment(81)", "Delete FieldDeclaration(82)", "Delete Modifier: public(83)", "Delete Modifier: static(84)", "Delete Modifier: final(85)", "Delete SimpleName: Set(86)", "Delete SimpleType: Set(87)", "Delete SimpleName: String(88)", "Delete SimpleType: String(89)", "Delete ParameterizedType: Set<String>(90)", "Delete SimpleName: KEYS_UDF(91)", "Delete SimpleName: Sets(92)", "Delete SimpleName: newHashSet(93)", "Delete SimpleName: KEY_DATABASE(94)", "Delete SimpleName: KEY_UDF(95)", "Delete MethodInvocation(96)", "Delete VariableDeclarationFragment(97)", "Delete FieldDeclaration(98)", "Delete Modifier: public(99)", "Delete Modifier: static(100)", "Delete Modifier: final(101)", "Delete SimpleName: Set(102)", "Delete SimpleType: Set(103)", "Delete SimpleName: String(104)", "Delete SimpleType: String(105)", "Delete ParameterizedType: Set<String>(106)", "Delete SimpleName: KEYS_COLUMN(107)", "Delete SimpleName: Sets(108)", "Delete SimpleName: newHashSet(109)", "Delete SimpleName: KEY_DATABASE(110)", "Delete SimpleName: KEY_TABLE(111)", "Delete SimpleName: KEY_COLUMN(112)", "Delete MethodInvocation(113)", "Delete VariableDeclarationFragment(114)", "Delete FieldDeclaration(115)", "Delete Modifier: private(123)", "Delete SimpleName: database(126)", "Delete NullLiteral(127)", "Delete VariableDeclarationFragment(128)", "Delete FieldDeclaration(129)", "Delete Modifier: private(130)", "Delete SimpleName: tableOrUdf(133)", "Delete NullLiteral(134)", "Delete VariableDeclarationFragment(135)", "Delete FieldDeclaration(136)", "Delete Modifier: private(137)", "Delete SimpleName: column(140)", "Delete NullLiteral(141)", "Delete VariableDeclarationFragment(142)", "Delete FieldDeclaration(143)", "Delete Modifier: private(144)", "Delete SimpleName: Set(145)", "Delete SimpleType: Set(146)", "Delete ParameterizedType: Set<String>(149)", "Delete SimpleName: keys(150)", "Delete NullLiteral(151)", "Delete VariableDeclarationFragment(152)", "Delete FieldDeclaration(153)", "Delete SimpleName: keys(237)", "Delete SimpleName: KEYS_DATABASE(238)", "Delete Assignment: =(239)", "Delete Modifier: public(192)", "Delete ThisExpression(216)", "Delete SimpleName: database(217)", "Delete FieldAccess(218)", "Delete SimpleName: database(219)", "Delete Assignment: =(220)", "Delete ExpressionStatement(221)", "Delete ThisExpression(222)", "Delete SimpleName: tableOrUdf(223)", "Delete FieldAccess(224)", "Delete SimpleName: tableOrUdf(225)", "Delete Assignment: =(226)", "Delete ExpressionStatement(227)", "Delete ThisExpression(228)", "Delete SimpleName: column(229)", "Delete FieldAccess(230)", "Delete SimpleName: column(231)", "Delete Assignment: =(232)", "Delete ExpressionStatement(233)", "Delete SimpleName: keys(244)", "Delete SimpleName: KEYS_UDF(245)", "Delete Assignment: =(246)", "Delete ExpressionStatement(247)", "Delete BreakStatement(248)", "Delete SimpleName: keys(251)", "Delete SimpleName: KEYS_COLUMN(252)", "Delete Assignment: =(253)", "Delete ExpressionStatement(254)", "Delete BreakStatement(255)", "Delete SimpleName: keys(264)", "Delete SimpleName: KEYS_TABLE(265)", "Delete Assignment: =(266)", "Delete ExpressionStatement(267)", "Delete BreakStatement(268)", "Delete SwitchCase(273)", "Delete SimpleName: keys(274)", "Delete NullLiteral(275)", "Delete Assignment: =(276)", "Delete ExpressionStatement(277)", "Delete BreakStatement(278)", "Delete SwitchStatement(279)", "Delete Block(280)", "Delete MethodDeclaration(281)", "Delete SimpleName: Override(282)", "Delete MarkerAnnotation(283)", "Delete Modifier: public(284)", "Delete SimpleName: String(285)", "Delete SimpleType: String(286)", "Delete SimpleName: getOwnerUser(287)", "Delete NullLiteral(288)", "Delete ReturnStatement(289)", "Delete Block(290)", "Delete MethodDeclaration(291)", "Delete SimpleName: Override(292)", "Delete MarkerAnnotation(293)", "Delete Modifier: public(294)", "Delete PrimitiveType: boolean(295)", "Delete SimpleName: exists(296)", "Delete SimpleName: String(297)", "Delete SimpleType: String(298)", "Delete SimpleName: name(299)", "Delete SingleVariableDeclaration(300)", "Delete SimpleName: StringUtils(301)", "Delete SimpleName: isEmpty(302)", "Delete SimpleName: name(304)", "Delete MethodInvocation(305)", "Delete MethodInvocation(306)", "Delete PrefixExpression: !(307)", "Delete ReturnStatement(308)", "Delete Block(309)", "Delete MethodDeclaration(310)", "Delete SimpleName: Override(311)", "Delete MarkerAnnotation(312)", "Delete Modifier: public(313)", "Delete SimpleName: String(314)", "Delete SimpleType: String(315)", "Delete SimpleName: getValue(316)", "Delete SimpleName: String(317)", "Delete SimpleType: String(318)", "Delete SimpleName: name(319)", "Delete SingleVariableDeclaration(320)", "Delete SimpleName: StringUtils(321)", "Delete SimpleName: equalsIgnoreCase(322)", "Delete SimpleName: name(323)", "Delete MethodInvocation(325)", "Delete SimpleName: database(326)", "Delete ReturnStatement(327)", "Delete Block(328)", "Delete SimpleName: objectType(329)", "Delete QualifiedName: HiveObjectType.FUNCTION(330)", "Delete InfixExpression: ==(331)", "Delete SimpleName: StringUtils(332)", "Delete SimpleName: equalsIgnoreCase(333)", "Delete MethodInvocation(336)", "Delete SimpleName: tableOrUdf(337)", "Delete ReturnStatement(338)", "Delete Block(339)", "Delete IfStatement(340)", "Delete Block(341)", "Delete SimpleName: StringUtils(342)", "Delete SimpleName: equalsIgnoreCase(343)", "Delete SimpleName: name(344)", "Delete SimpleName: KEY_TABLE(345)", "Delete MethodInvocation(346)", "Delete SimpleName: tableOrUdf(347)", "Delete ReturnStatement(348)", "Delete Block(349)", "Delete SimpleName: StringUtils(350)", "Delete SimpleName: equalsIgnoreCase(351)", "Delete SimpleName: name(352)", "Delete SimpleName: KEY_COLUMN(353)", "Delete MethodInvocation(354)", "Delete SimpleName: column(355)", "Delete ReturnStatement(356)", "Delete Block(357)", "Delete IfStatement(358)", "Delete IfStatement(359)", "Delete IfStatement(360)", "Delete IfStatement(361)", "Delete NullLiteral(362)", "Delete ReturnStatement(363)", "Delete Block(364)", "Delete MethodDeclaration(365)", "Delete Modifier: public(366)", "Delete SimpleName: Set(367)", "Delete SimpleType: Set(368)", "Delete SimpleName: String(369)", "Delete SimpleType: String(370)", "Delete ParameterizedType: Set<String>(371)", "Delete SimpleName: getKeys(372)", "Delete SimpleName: keys(373)", "Delete ReturnStatement(374)", "Delete Block(375)", "Delete MethodDeclaration(376)", "Delete SimpleName: Override(377)", "Delete MarkerAnnotation(378)", "Delete Modifier: public(379)", "Delete PrimitiveType: boolean(380)", "Delete SimpleName: equals(381)", "Delete SimpleName: Object(382)", "Delete SimpleType: Object(383)", "Delete SimpleName: obj(384)", "Delete SingleVariableDeclaration(385)", "Delete SimpleName: obj(386)", "Delete NullLiteral(387)", "Delete InfixExpression: ==(388)", "Delete SimpleName: obj(389)", "Delete SimpleName: RangerHiveResource(390)", "Delete SimpleType: RangerHiveResource(391)", "Delete InstanceofExpression(392)", "Delete ParenthesizedExpression(393)", "Delete PrefixExpression: !(394)", "Delete InfixExpression: ||(395)", "Delete BooleanLiteral: false(396)", "Delete ReturnStatement(397)", "Delete Block(398)", "Delete IfStatement(399)", "Delete ThisExpression(400)", "Delete SimpleName: obj(401)", "Delete InfixExpression: ==(402)", "Delete BooleanLiteral: true(403)", "Delete ReturnStatement(404)", "Delete Block(405)", "Delete IfStatement(406)", "Delete SimpleName: RangerHiveResource(407)", "Delete SimpleType: RangerHiveResource(408)", "Delete SimpleName: other(409)", "Delete SimpleName: RangerHiveResource(410)", "Delete SimpleType: RangerHiveResource(411)", "Delete SimpleName: obj(412)", "Delete CastExpression(413)", "Delete VariableDeclarationFragment(414)", "Delete VariableDeclarationStatement(415)", "Delete SimpleName: ObjectUtils(416)", "Delete SimpleName: equals(417)", "Delete SimpleName: objectType(418)", "Delete QualifiedName: other.objectType(419)", "Delete MethodInvocation(420)", "Delete QualifiedName: other.database(424)", "Delete MethodInvocation(425)", "Delete QualifiedName: other.tableOrUdf(429)", "Delete MethodInvocation(430)", "Delete QualifiedName: other.column(434)", "Delete MethodInvocation(435)", "Delete InfixExpression: &&(436)", "Delete ReturnStatement(437)", "Delete Block(438)", "Delete MethodDeclaration(439)", "Delete SimpleName: Override(440)", "Delete MarkerAnnotation(441)", "Delete Modifier: public(442)", "Delete PrimitiveType: int(443)", "Delete SimpleName: hashCode(444)", "Delete PrimitiveType: int(445)", "Delete SimpleName: ret(446)", "Delete NumberLiteral: 7(447)", "Delete VariableDeclarationFragment(448)", "Delete VariableDeclarationStatement(449)", "Delete SimpleName: ret(450)", "Delete NumberLiteral: 31(451)", "Delete SimpleName: ret(452)", "Delete InfixExpression: *(453)", "Delete SimpleName: ObjectUtils(454)", "Delete SimpleName: hashCode(455)", "Delete SimpleName: objectType(456)", "Delete MethodInvocation(457)", "Delete InfixExpression: +(458)", "Delete Assignment: =(459)", "Delete ExpressionStatement(460)", "Delete SimpleName: ret(461)", "Delete NumberLiteral: 31(462)", "Delete SimpleName: ret(463)", "Delete InfixExpression: *(464)", "Delete MethodInvocation(468)", "Delete InfixExpression: +(469)", "Delete Assignment: =(470)", "Delete ExpressionStatement(471)", "Delete SimpleName: ret(472)", "Delete NumberLiteral: 31(473)", "Delete SimpleName: ret(474)", "Delete InfixExpression: *(475)", "Delete MethodInvocation(479)", "Delete InfixExpression: +(480)", "Delete Assignment: =(481)", "Delete ExpressionStatement(482)", "Delete SimpleName: ret(483)", "Delete NumberLiteral: 31(484)", "Delete SimpleName: ret(485)", "Delete InfixExpression: *(486)", "Delete SimpleName: ObjectUtils(487)", "Delete SimpleName: hashCode(488)", "Delete SimpleName: column(489)", "Delete MethodInvocation(490)", "Delete InfixExpression: +(491)", "Delete Assignment: =(492)", "Delete ExpressionStatement(493)", "Delete SimpleName: ret(494)", "Delete ReturnStatement(495)", "Delete Block(496)", "Delete MethodDeclaration(497)", "Delete SimpleName: Override(498)", "Delete MarkerAnnotation(499)", "Delete SimpleName: String(501)", "Delete SimpleType: String(502)", "Delete SimpleName: toString(503)", "Delete SimpleName: StringBuilder(504)", "Delete SimpleType: StringBuilder(505)", "Delete SimpleName: sb(506)", "Delete SimpleName: StringBuilder(507)", "Delete SimpleType: StringBuilder(508)", "Delete ClassInstanceCreation(509)", "Delete VariableDeclarationFragment(510)", "Delete VariableDeclarationStatement(511)", "Delete SimpleName: toString(512)", "Delete SimpleName: sb(513)", "Delete MethodInvocation(514)", "Delete ExpressionStatement(515)", "Delete SimpleName: StringBuilder(523)", "Delete SimpleType: StringBuilder(524)", "Delete SimpleName: toString(525)", "Delete SimpleName: StringBuilder(526)", "Delete SimpleType: StringBuilder(527)", "Delete SimpleName: sb(528)", "Delete SingleVariableDeclaration(529)", "Delete SimpleName: sb(530)", "Delete SimpleName: append(531)", "Delete StringLiteral: \"objectType={\"(532)", "Delete MethodInvocation(533)", "Delete SimpleName: append(534)", "Delete SimpleName: objectType(535)", "Delete MethodInvocation(536)", "Delete SimpleName: append(537)", "Delete StringLiteral: \"} \"(538)", "Delete MethodInvocation(539)", "Delete ExpressionStatement(540)", "Delete SimpleName: sb(541)", "Delete SimpleName: append(542)", "Delete StringLiteral: \"database={\"(543)", "Delete MethodInvocation(544)", "Delete SimpleName: append(545)", "Delete MethodInvocation(547)", "Delete StringLiteral: \"} \"(549)", "Delete MethodInvocation(550)", "Delete ExpressionStatement(551)", "Delete SimpleName: sb(552)", "Delete SimpleName: append(553)", "Delete StringLiteral: \"tableOrUdf={\"(554)", "Delete MethodInvocation(555)", "Delete SimpleName: append(556)", "Delete SimpleName: tableOrUdf(557)", "Delete MethodInvocation(558)", "Delete SimpleName: append(559)", "Delete StringLiteral: \"} \"(560)", "Delete MethodInvocation(561)", "Delete ExpressionStatement(562)", "Delete SimpleName: sb(563)", "Delete SimpleName: append(564)", "Delete StringLiteral: \"column={\"(565)", "Delete MethodInvocation(566)", "Delete SimpleName: append(567)", "Delete SimpleName: column(568)", "Delete MethodInvocation(569)", "Delete SimpleName: append(570)", "Delete StringLiteral: \"} \"(571)", "Delete MethodInvocation(572)", "Delete ExpressionStatement(573)", "Delete SimpleName: sb(574)", "Delete ReturnStatement(575)", "Delete Modifier: public(586)", "Delete SimpleName: String(587)", "Delete SimpleType: String(588)", "Delete SimpleName: getDatabase(589)", "Delete SimpleName: database(590)", "Delete ReturnStatement(591)", "Delete Block(592)", "Delete MethodDeclaration(593)", "Delete SimpleName: String(595)", "Delete SimpleType: String(596)", "Delete SimpleName: tableOrUdf(598)", "Delete SimpleName: String(603)", "Delete SimpleType: String(604)", "Delete SimpleName: column(606)"]}}, {"RangerYarnAuthorizer_cluster": {"actions": [{"root": "UPDATE from org.apache.ranger.plugin.policyengine.RangerResource to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl", "operations": ["UPD QualifiedName: org.apache.ranger.plugin.policyengine.RangerResource from org.apache.ranger.plugin.policyengine.RangerResource to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl"]}, {"root": "UPDATE from RangerResource to RangerAccessResourceImpl", "operations": ["UPD SimpleName: RangerResource from RangerResource to RangerAccessResourceImpl", "UPD SimpleType: RangerResource from RangerResource to RangerAccessResourceImpl"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: KEY_QUEUE to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setValue to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ConditionalExpression to MethodInvocation at 2"]}, {"root": "UPDATE from getResourceAsMap to getAsMap", "operations": ["UPD SimpleName: getResourceAsMap from getResourceAsMap to getAsMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collections", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.lang.StringUtils", "DEL ImportDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleType: String", "DEL ParameterizedType: Set<String>", "DEL SimpleType: Set", "DEL SimpleName: Sets", "DEL Modifier: final", "DEL Modifier: private", "DEL SimpleName: KEYS_QUEUE", "DEL Modifier: static", "DEL SimpleName: Set", "DEL SimpleName: KEY_QUEUE", "DEL FieldDeclaration", "DEL SimpleName: String", "DEL SimpleName: newHashSet", "DEL VariableDeclarationFragment", "DEL MethodInvocation"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: queue", "DEL FieldDeclaration", "DEL NullLiteral", "DEL Modifier: private", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL SimpleName: String"]}, {"root": "DEL Assignment: =", "operations": ["DEL Assignment: =", "DEL FieldAccess", "DEL ThisExpression", "DEL SimpleName: queue"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL MarkerAnnotation", "DEL SimpleName: getOwnerUser", "DEL SimpleName: Override", "DEL Block", "DEL ReturnStatement", "DEL SimpleType: String", "DEL Modifier: public", "DEL SimpleName: String", "DEL NullLiteral"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: KEY_QUEUE", "DEL ReturnStatement", "DEL PrimitiveType: boolean", "DEL SimpleName: StringUtils", "DEL SimpleName: exists", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL SimpleName: equals", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleName: StringUtils", "DEL SimpleName: isEmpty", "DEL SimpleName: name", "DEL SimpleName: queue", "DEL MarkerAnnotation", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleName: name", "DEL Modifier: public"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: KEY_QUEUE", "DEL MarkerAnnotation", "DEL SimpleName: String", "DEL NullLiteral", "DEL SimpleName: String", "DEL ReturnStatement", "DEL SimpleName: name", "DEL SimpleType: String", "DEL SimpleName: queue", "DEL SimpleName: StringUtils", "DEL SingleVariableDeclaration", "DEL SimpleName: equals", "DEL ConditionalExpression", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: Override", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: name", "DEL SimpleName: getValue", "DEL SimpleType: String"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL SimpleName: String", "DEL Modifier: public", "DEL SimpleType: Set", "DEL SimpleName: String", "DEL MarkerAnnotation", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: queue", "DEL SimpleName: isEmpty", "DEL SimpleName: Collections", "DEL SimpleName: Set", "DEL MethodInvocation", "DEL SimpleName: StringUtils", "DEL SimpleType: String", "DEL SimpleName: KEYS_QUEUE", "DEL ParameterizedType: Set<String>", "DEL SimpleName: getKeys", "DEL ReturnStatement", "DEL SimpleName: Override", "DEL ConditionalExpression", "DEL SimpleName: emptySet"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: queue", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL ParameterizedType: Map<String,String>", "DEL SimpleName: String", "DEL SimpleName: isEmpty", "DEL SimpleType: Map", "DEL SimpleName: String", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: Map", "DEL SimpleType: Map", "DEL SimpleName: ret", "DEL SimpleName: queue", "DEL Block", "DEL SimpleType: String", "DEL SimpleName: String", "DEL ClassInstanceCreation", "DEL SimpleName: getResourceAsMap", "DEL Block", "DEL ParameterizedType: Map<String,String>", "DEL SimpleName: String", "DEL IfStatement", "DEL SimpleName: ret", "DEL SimpleName: ret", "DEL ParameterizedType: HashMap<String,String>", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: StringUtils", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleType: String", "DEL Modifier: public", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleType: HashMap", "DEL SimpleName: put", "DEL SimpleType: String", "DEL SimpleName: KEY_QUEUE", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleName: Map", "DEL SimpleName: HashMap"]}]}}, {"RangerYarnAuthorizer_diff": {"operations": ["Update QualifiedName: org.apache.ranger.plugin.policyengine.RangerResource(46) to org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl", "Update SimpleType: RangerResource(838) to RangerAccessResourceImpl", "Update SimpleName: RangerResource(837) to RangerAccessResourceImpl", "Insert MethodInvocation(858) into ExpressionStatement(859) at 0", "Insert SimpleName: setValue(848) into MethodInvocation(858) at 0", "Insert SimpleName: KEY_QUEUE(849) into MethodInvocation(858) at 1", "Move ConditionalExpression(886) into MethodInvocation(858) at 2", "Update SimpleName: getResourceAsMap(481) to getAsMap", "Delete QualifiedName: java.util.Collections(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.HashMap(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: org.apache.commons.lang.StringUtils(20)", "Delete ImportDeclaration(21)", "Delete Modifier: private(848)", "Delete Modifier: static(849)", "Delete Modifier: final(850)", "Delete SimpleName: Set(851)", "Delete SimpleType: Set(852)", "Delete SimpleName: String(853)", "Delete SimpleType: String(854)", "Delete ParameterizedType: Set<String>(855)", "Delete SimpleName: KEYS_QUEUE(856)", "Delete SimpleName: Sets(857)", "Delete SimpleName: newHashSet(858)", "Delete SimpleName: KEY_QUEUE(859)", "Delete MethodInvocation(860)", "Delete VariableDeclarationFragment(861)", "Delete FieldDeclaration(862)", "Delete Modifier: private(863)", "Delete SimpleName: String(864)", "Delete SimpleType: String(865)", "Delete SimpleName: queue(866)", "Delete NullLiteral(867)", "Delete VariableDeclarationFragment(868)", "Delete FieldDeclaration(869)", "Delete ThisExpression(876)", "Delete SimpleName: queue(877)", "Delete FieldAccess(878)", "Delete Assignment: =(887)", "Delete SimpleName: Override(891)", "Delete MarkerAnnotation(892)", "Delete Modifier: public(893)", "Delete SimpleName: String(894)", "Delete SimpleType: String(895)", "Delete SimpleName: getOwnerUser(896)", "Delete NullLiteral(897)", "Delete ReturnStatement(898)", "Delete Block(899)", "Delete MethodDeclaration(900)", "Delete SimpleName: Override(901)", "Delete MarkerAnnotation(902)", "Delete Modifier: public(903)", "Delete PrimitiveType: boolean(904)", "Delete SimpleName: exists(905)", "Delete SimpleName: String(906)", "Delete SimpleType: String(907)", "Delete SimpleName: name(908)", "Delete SingleVariableDeclaration(909)", "Delete SimpleName: StringUtils(910)", "Delete SimpleName: isEmpty(911)", "Delete SimpleName: queue(912)", "Delete MethodInvocation(913)", "Delete PrefixExpression: !(914)", "Delete SimpleName: StringUtils(915)", "Delete SimpleName: equals(916)", "Delete SimpleName: name(917)", "Delete SimpleName: KEY_QUEUE(918)", "Delete MethodInvocation(919)", "Delete InfixExpression: &&(920)", "Delete ReturnStatement(921)", "Delete Block(922)", "Delete MethodDeclaration(923)", "Delete SimpleName: Override(924)", "Delete MarkerAnnotation(925)", "Delete Modifier: public(926)", "Delete SimpleName: String(927)", "Delete SimpleType: String(928)", "Delete SimpleName: getValue(929)", "Delete SimpleName: String(930)", "Delete SimpleType: String(931)", "Delete SimpleName: name(932)", "Delete SingleVariableDeclaration(933)", "Delete SimpleName: StringUtils(934)", "Delete SimpleName: equals(935)", "Delete SimpleName: name(936)", "Delete SimpleName: KEY_QUEUE(937)", "Delete MethodInvocation(938)", "Delete SimpleName: queue(939)", "Delete NullLiteral(940)", "Delete ConditionalExpression(941)", "Delete ReturnStatement(942)", "Delete Block(943)", "Delete MethodDeclaration(944)", "Delete SimpleName: Override(945)", "Delete MarkerAnnotation(946)", "Delete Modifier: public(947)", "Delete SimpleName: Set(948)", "Delete SimpleType: Set(949)", "Delete SimpleName: String(950)", "Delete SimpleType: String(951)", "Delete ParameterizedType: Set<String>(952)", "Delete SimpleName: getKeys(953)", "Delete SimpleName: StringUtils(954)", "Delete SimpleName: isEmpty(955)", "Delete SimpleName: queue(956)", "Delete MethodInvocation(957)", "Delete SimpleName: Collections(958)", "Delete SimpleName: String(959)", "Delete SimpleType: String(960)", "Delete SimpleName: emptySet(961)", "Delete MethodInvocation(962)", "Delete SimpleName: KEYS_QUEUE(963)", "Delete ConditionalExpression(964)", "Delete ReturnStatement(965)", "Delete Block(966)", "Delete MethodDeclaration(967)", "Delete Modifier: public(968)", "Delete SimpleName: Map(969)", "Delete SimpleType: Map(970)", "Delete SimpleName: String(971)", "Delete SimpleType: String(972)", "Delete SimpleName: String(973)", "Delete SimpleType: String(974)", "Delete ParameterizedType: Map<String,String>(975)", "Delete SimpleName: getResourceAsMap(976)", "Delete SimpleName: Map(977)", "Delete SimpleType: Map(978)", "Delete SimpleName: String(979)", "Delete SimpleType: String(980)", "Delete SimpleName: String(981)", "Delete SimpleType: String(982)", "Delete ParameterizedType: Map<String,String>(983)", "Delete SimpleName: ret(984)", "Delete SimpleName: HashMap(985)", "Delete SimpleType: HashMap(986)", "Delete SimpleName: String(987)", "Delete SimpleType: String(988)", "Delete SimpleName: String(989)", "Delete SimpleType: String(990)", "Delete ParameterizedType: HashMap<String,String>(991)", "Delete ClassInstanceCreation(992)", "Delete VariableDeclarationFragment(993)", "Delete VariableDeclarationStatement(994)", "Delete SimpleName: StringUtils(995)", "Delete SimpleName: isEmpty(996)", "Delete SimpleName: queue(997)", "Delete MethodInvocation(998)", "Delete PrefixExpression: !(999)", "Delete SimpleName: ret(1000)", "Delete SimpleName: put(1001)", "Delete SimpleName: KEY_QUEUE(1002)", "Delete SimpleName: queue(1003)", "Delete MethodInvocation(1004)", "Delete ExpressionStatement(1005)", "Delete Block(1006)", "Delete IfStatement(1007)", "Delete SimpleName: ret(1008)", "Delete ReturnStatement(1009)", "Delete Block(1010)", "Delete MethodDeclaration(1011)"]}}], "commit_stats": [{"total_files": 27, "deleted_files": 3, "testing": "True", "maintenance": "True", "build": "False"}]}